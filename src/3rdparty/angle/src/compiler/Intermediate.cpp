begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Build the intermediate representation.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<float.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_include
include|#
directive|include
file|"compiler/HashNames.h"
end_include
begin_include
include|#
directive|include
file|"compiler/localintermediate.h"
end_include
begin_include
include|#
directive|include
file|"compiler/QualifierAlive.h"
end_include
begin_include
include|#
directive|include
file|"compiler/RemoveTree.h"
end_include
begin_function_decl
name|bool
name|CompareStructure
parameter_list|(
specifier|const
name|TType
modifier|&
name|leftNodeType
parameter_list|,
name|ConstantUnion
modifier|*
name|rightUnionArray
parameter_list|,
name|ConstantUnion
modifier|*
name|leftUnionArray
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|GetHigherPrecision
specifier|static
name|TPrecision
name|GetHigherPrecision
parameter_list|(
name|TPrecision
name|left
parameter_list|,
name|TPrecision
name|right
parameter_list|)
block|{
return|return
name|left
operator|>
name|right
condition|?
name|left
else|:
name|right
return|;
block|}
end_function
begin_function
DECL|function|getOperatorString
specifier|const
name|char
modifier|*
name|getOperatorString
parameter_list|(
name|TOperator
name|op
parameter_list|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|EOpInitialize
case|:
return|return
literal|"="
return|;
case|case
name|EOpAssign
case|:
return|return
literal|"="
return|;
case|case
name|EOpAddAssign
case|:
return|return
literal|"+="
return|;
case|case
name|EOpSubAssign
case|:
return|return
literal|"-="
return|;
case|case
name|EOpDivAssign
case|:
return|return
literal|"/="
return|;
comment|// Fall-through.
case|case
name|EOpMulAssign
case|:
case|case
name|EOpVectorTimesMatrixAssign
case|:
case|case
name|EOpVectorTimesScalarAssign
case|:
case|case
name|EOpMatrixTimesScalarAssign
case|:
case|case
name|EOpMatrixTimesMatrixAssign
case|:
return|return
literal|"*="
return|;
comment|// Fall-through.
case|case
name|EOpIndexDirect
case|:
case|case
name|EOpIndexIndirect
case|:
return|return
literal|"[]"
return|;
case|case
name|EOpIndexDirectStruct
case|:
return|return
literal|"."
return|;
case|case
name|EOpVectorSwizzle
case|:
return|return
literal|"."
return|;
case|case
name|EOpAdd
case|:
return|return
literal|"+"
return|;
case|case
name|EOpSub
case|:
return|return
literal|"-"
return|;
case|case
name|EOpMul
case|:
return|return
literal|"*"
return|;
case|case
name|EOpDiv
case|:
return|return
literal|"/"
return|;
case|case
name|EOpMod
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
break|break;
case|case
name|EOpEqual
case|:
return|return
literal|"=="
return|;
case|case
name|EOpNotEqual
case|:
return|return
literal|"!="
return|;
case|case
name|EOpLessThan
case|:
return|return
literal|"<"
return|;
case|case
name|EOpGreaterThan
case|:
return|return
literal|">"
return|;
case|case
name|EOpLessThanEqual
case|:
return|return
literal|"<="
return|;
case|case
name|EOpGreaterThanEqual
case|:
return|return
literal|">="
return|;
comment|// Fall-through.
case|case
name|EOpVectorTimesScalar
case|:
case|case
name|EOpVectorTimesMatrix
case|:
case|case
name|EOpMatrixTimesVector
case|:
case|case
name|EOpMatrixTimesScalar
case|:
case|case
name|EOpMatrixTimesMatrix
case|:
return|return
literal|"*"
return|;
case|case
name|EOpLogicalOr
case|:
return|return
literal|"||"
return|;
case|case
name|EOpLogicalXor
case|:
return|return
literal|"^^"
return|;
case|case
name|EOpLogicalAnd
case|:
return|return
literal|"&&"
return|;
case|case
name|EOpNegative
case|:
return|return
literal|"-"
return|;
case|case
name|EOpVectorLogicalNot
case|:
return|return
literal|"not"
return|;
case|case
name|EOpLogicalNot
case|:
return|return
literal|"!"
return|;
case|case
name|EOpPostIncrement
case|:
return|return
literal|"++"
return|;
case|case
name|EOpPostDecrement
case|:
return|return
literal|"--"
return|;
case|case
name|EOpPreIncrement
case|:
return|return
literal|"++"
return|;
case|case
name|EOpPreDecrement
case|:
return|return
literal|"--"
return|;
comment|// Fall-through.
case|case
name|EOpConvIntToBool
case|:
case|case
name|EOpConvFloatToBool
case|:
return|return
literal|"bool"
return|;
comment|// Fall-through.
case|case
name|EOpConvBoolToFloat
case|:
case|case
name|EOpConvIntToFloat
case|:
return|return
literal|"float"
return|;
comment|// Fall-through.
case|case
name|EOpConvFloatToInt
case|:
case|case
name|EOpConvBoolToInt
case|:
return|return
literal|"int"
return|;
case|case
name|EOpRadians
case|:
return|return
literal|"radians"
return|;
case|case
name|EOpDegrees
case|:
return|return
literal|"degrees"
return|;
case|case
name|EOpSin
case|:
return|return
literal|"sin"
return|;
case|case
name|EOpCos
case|:
return|return
literal|"cos"
return|;
case|case
name|EOpTan
case|:
return|return
literal|"tan"
return|;
case|case
name|EOpAsin
case|:
return|return
literal|"asin"
return|;
case|case
name|EOpAcos
case|:
return|return
literal|"acos"
return|;
case|case
name|EOpAtan
case|:
return|return
literal|"atan"
return|;
case|case
name|EOpExp
case|:
return|return
literal|"exp"
return|;
case|case
name|EOpLog
case|:
return|return
literal|"log"
return|;
case|case
name|EOpExp2
case|:
return|return
literal|"exp2"
return|;
case|case
name|EOpLog2
case|:
return|return
literal|"log2"
return|;
case|case
name|EOpSqrt
case|:
return|return
literal|"sqrt"
return|;
case|case
name|EOpInverseSqrt
case|:
return|return
literal|"inversesqrt"
return|;
case|case
name|EOpAbs
case|:
return|return
literal|"abs"
return|;
case|case
name|EOpSign
case|:
return|return
literal|"sign"
return|;
case|case
name|EOpFloor
case|:
return|return
literal|"floor"
return|;
case|case
name|EOpCeil
case|:
return|return
literal|"ceil"
return|;
case|case
name|EOpFract
case|:
return|return
literal|"fract"
return|;
case|case
name|EOpLength
case|:
return|return
literal|"length"
return|;
case|case
name|EOpNormalize
case|:
return|return
literal|"normalize"
return|;
case|case
name|EOpDFdx
case|:
return|return
literal|"dFdx"
return|;
case|case
name|EOpDFdy
case|:
return|return
literal|"dFdy"
return|;
case|case
name|EOpFwidth
case|:
return|return
literal|"fwidth"
return|;
case|case
name|EOpAny
case|:
return|return
literal|"any"
return|;
case|case
name|EOpAll
case|:
return|return
literal|"all"
return|;
default|default:
break|break;
block|}
return|return
literal|""
return|;
block|}
end_function
begin_comment
comment|////////////////////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// First set of functions are to help build the intermediate representation.
end_comment
begin_comment
comment|// These functions are not member functions of the nodes.
end_comment
begin_comment
comment|// They are called from parser productions.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|/////////////////////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Add a terminal node for an identifier in an expression.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Returns the added node.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|addSymbol
name|TIntermSymbol
modifier|*
name|TIntermediate
operator|::
name|addSymbol
parameter_list|(
name|int
name|id
parameter_list|,
specifier|const
name|TString
modifier|&
name|name
parameter_list|,
specifier|const
name|TType
modifier|&
name|type
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
name|line
parameter_list|)
block|{
name|TIntermSymbol
modifier|*
name|node
init|=
operator|new
name|TIntermSymbol
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|node
operator|->
name|setLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Connect two nodes with a new parent that does a binary operation on the nodes.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Returns the added node.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|addBinaryMath
name|TIntermTyped
modifier|*
name|TIntermediate
operator|::
name|addBinaryMath
parameter_list|(
name|TOperator
name|op
parameter_list|,
name|TIntermTyped
modifier|*
name|left
parameter_list|,
name|TIntermTyped
modifier|*
name|right
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
name|line
parameter_list|,
name|TSymbolTable
modifier|&
name|symbolTable
parameter_list|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|EOpEqual
case|:
case|case
name|EOpNotEqual
case|:
if|if
condition|(
name|left
operator|->
name|isArray
argument_list|()
condition|)
return|return
literal|0
return|;
break|break;
case|case
name|EOpLessThan
case|:
case|case
name|EOpGreaterThan
case|:
case|case
name|EOpLessThanEqual
case|:
case|case
name|EOpGreaterThanEqual
case|:
if|if
condition|(
name|left
operator|->
name|isMatrix
argument_list|()
operator|||
name|left
operator|->
name|isArray
argument_list|()
operator|||
name|left
operator|->
name|isVector
argument_list|()
operator|||
name|left
operator|->
name|getBasicType
argument_list|()
operator|==
name|EbtStruct
condition|)
block|{
return|return
literal|0
return|;
block|}
break|break;
case|case
name|EOpLogicalOr
case|:
case|case
name|EOpLogicalXor
case|:
case|case
name|EOpLogicalAnd
case|:
if|if
condition|(
name|left
operator|->
name|getBasicType
argument_list|()
operator|!=
name|EbtBool
operator|||
name|left
operator|->
name|isMatrix
argument_list|()
operator|||
name|left
operator|->
name|isArray
argument_list|()
operator|||
name|left
operator|->
name|isVector
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
break|break;
case|case
name|EOpAdd
case|:
case|case
name|EOpSub
case|:
case|case
name|EOpDiv
case|:
case|case
name|EOpMul
case|:
if|if
condition|(
name|left
operator|->
name|getBasicType
argument_list|()
operator|==
name|EbtStruct
operator|||
name|left
operator|->
name|getBasicType
argument_list|()
operator|==
name|EbtBool
condition|)
return|return
literal|0
return|;
default|default:
break|break;
block|}
comment|//
comment|// First try converting the children to compatible types.
comment|//
if|if
condition|(
name|left
operator|->
name|getType
argument_list|()
operator|.
name|getStruct
argument_list|()
operator|&&
name|right
operator|->
name|getType
argument_list|()
operator|.
name|getStruct
argument_list|()
condition|)
block|{
if|if
condition|(
name|left
operator|->
name|getType
argument_list|()
operator|!=
name|right
operator|->
name|getType
argument_list|()
condition|)
return|return
literal|0
return|;
block|}
else|else
block|{
name|TIntermTyped
modifier|*
name|child
init|=
name|addConversion
argument_list|(
name|op
argument_list|,
name|left
operator|->
name|getType
argument_list|()
argument_list|,
name|right
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
condition|)
name|right
operator|=
name|child
expr_stmt|;
else|else
block|{
name|child
operator|=
name|addConversion
argument_list|(
name|op
argument_list|,
name|right
operator|->
name|getType
argument_list|()
argument_list|,
name|left
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
condition|)
name|left
operator|=
name|child
expr_stmt|;
else|else
return|return
literal|0
return|;
block|}
block|}
comment|//
comment|// Need a new node holding things together then.  Make
comment|// one and promote it to the right type.
comment|//
name|TIntermBinary
modifier|*
name|node
init|=
operator|new
name|TIntermBinary
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|node
operator|->
name|setLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|node
operator|->
name|setLeft
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|node
operator|->
name|setRight
argument_list|(
name|right
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|node
operator|->
name|promote
argument_list|(
name|infoSink
argument_list|)
condition|)
return|return
literal|0
return|;
comment|//
comment|// See if we can fold constants.
comment|//
name|TIntermTyped
modifier|*
name|typedReturnNode
init|=
literal|0
decl_stmt|;
name|TIntermConstantUnion
modifier|*
name|leftTempConstant
init|=
name|left
operator|->
name|getAsConstantUnion
argument_list|()
decl_stmt|;
name|TIntermConstantUnion
modifier|*
name|rightTempConstant
init|=
name|right
operator|->
name|getAsConstantUnion
argument_list|()
decl_stmt|;
if|if
condition|(
name|leftTempConstant
operator|&&
name|rightTempConstant
condition|)
block|{
name|typedReturnNode
operator|=
name|leftTempConstant
operator|->
name|fold
argument_list|(
name|node
operator|->
name|getOp
argument_list|()
argument_list|,
name|rightTempConstant
argument_list|,
name|infoSink
argument_list|)
expr_stmt|;
if|if
condition|(
name|typedReturnNode
condition|)
return|return
name|typedReturnNode
return|;
block|}
return|return
name|node
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Connect two nodes through an assignment.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Returns the added node.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|addAssign
name|TIntermTyped
modifier|*
name|TIntermediate
operator|::
name|addAssign
parameter_list|(
name|TOperator
name|op
parameter_list|,
name|TIntermTyped
modifier|*
name|left
parameter_list|,
name|TIntermTyped
modifier|*
name|right
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
name|line
parameter_list|)
block|{
comment|//
comment|// Like adding binary math, except the conversion can only go
comment|// from right to left.
comment|//
name|TIntermBinary
modifier|*
name|node
init|=
operator|new
name|TIntermBinary
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|node
operator|->
name|setLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|TIntermTyped
modifier|*
name|child
init|=
name|addConversion
argument_list|(
name|op
argument_list|,
name|left
operator|->
name|getType
argument_list|()
argument_list|,
name|right
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|0
condition|)
return|return
literal|0
return|;
name|node
operator|->
name|setLeft
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|node
operator|->
name|setRight
argument_list|(
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|node
operator|->
name|promote
argument_list|(
name|infoSink
argument_list|)
condition|)
return|return
literal|0
return|;
return|return
name|node
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Connect two nodes through an index operator, where the left node is the base
end_comment
begin_comment
comment|// of an array or struct, and the right node is a direct or indirect offset.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Returns the added node.
end_comment
begin_comment
comment|// The caller should set the type of the returned node.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|addIndex
name|TIntermTyped
modifier|*
name|TIntermediate
operator|::
name|addIndex
parameter_list|(
name|TOperator
name|op
parameter_list|,
name|TIntermTyped
modifier|*
name|base
parameter_list|,
name|TIntermTyped
modifier|*
name|index
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
name|line
parameter_list|)
block|{
name|TIntermBinary
modifier|*
name|node
init|=
operator|new
name|TIntermBinary
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|node
operator|->
name|setLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|node
operator|->
name|setLeft
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|node
operator|->
name|setRight
argument_list|(
name|index
argument_list|)
expr_stmt|;
comment|// caller should set the type
return|return
name|node
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Add one node as the parent of another that it operates on.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Returns the added node.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|addUnaryMath
name|TIntermTyped
modifier|*
name|TIntermediate
operator|::
name|addUnaryMath
parameter_list|(
name|TOperator
name|op
parameter_list|,
name|TIntermNode
modifier|*
name|childNode
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
name|line
parameter_list|,
name|TSymbolTable
modifier|&
name|symbolTable
parameter_list|)
block|{
name|TIntermUnary
modifier|*
name|node
decl_stmt|;
name|TIntermTyped
modifier|*
name|child
init|=
name|childNode
operator|->
name|getAsTyped
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|0
condition|)
block|{
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|line
argument_list|,
literal|"Bad type in AddUnaryMath"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|EOpLogicalNot
case|:
if|if
condition|(
name|child
operator|->
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
operator|!=
name|EbtBool
operator|||
name|child
operator|->
name|getType
argument_list|()
operator|.
name|isMatrix
argument_list|()
operator|||
name|child
operator|->
name|getType
argument_list|()
operator|.
name|isArray
argument_list|()
operator|||
name|child
operator|->
name|getType
argument_list|()
operator|.
name|isVector
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
break|break;
case|case
name|EOpPostIncrement
case|:
case|case
name|EOpPreIncrement
case|:
case|case
name|EOpPostDecrement
case|:
case|case
name|EOpPreDecrement
case|:
case|case
name|EOpNegative
case|:
if|if
condition|(
name|child
operator|->
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
operator|==
name|EbtStruct
operator|||
name|child
operator|->
name|getType
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
return|return
literal|0
return|;
default|default:
break|break;
block|}
comment|//
comment|// Do we need to promote the operand?
comment|//
comment|// Note: Implicit promotions were removed from the language.
comment|//
name|TBasicType
name|newType
init|=
name|EbtVoid
decl_stmt|;
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|EOpConstructInt
case|:
name|newType
operator|=
name|EbtInt
expr_stmt|;
break|break;
case|case
name|EOpConstructBool
case|:
name|newType
operator|=
name|EbtBool
expr_stmt|;
break|break;
case|case
name|EOpConstructFloat
case|:
name|newType
operator|=
name|EbtFloat
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|newType
operator|!=
name|EbtVoid
condition|)
block|{
name|child
operator|=
name|addConversion
argument_list|(
name|op
argument_list|,
name|TType
argument_list|(
name|newType
argument_list|,
name|child
operator|->
name|getPrecision
argument_list|()
argument_list|,
name|EvqTemporary
argument_list|,
name|child
operator|->
name|getNominalSize
argument_list|()
argument_list|,
name|child
operator|->
name|isMatrix
argument_list|()
argument_list|,
name|child
operator|->
name|isArray
argument_list|()
argument_list|)
argument_list|,
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|==
literal|0
condition|)
return|return
literal|0
return|;
block|}
comment|//
comment|// For constructors, we are now done, it's all in the conversion.
comment|//
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|EOpConstructInt
case|:
case|case
name|EOpConstructBool
case|:
case|case
name|EOpConstructFloat
case|:
return|return
name|child
return|;
default|default:
break|break;
block|}
name|TIntermConstantUnion
modifier|*
name|childTempConstant
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|child
operator|->
name|getAsConstantUnion
argument_list|()
condition|)
name|childTempConstant
operator|=
name|child
operator|->
name|getAsConstantUnion
argument_list|()
expr_stmt|;
comment|//
comment|// Make a new node for the operator.
comment|//
name|node
operator|=
operator|new
name|TIntermUnary
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|node
operator|->
name|setLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|node
operator|->
name|setOperand
argument_list|(
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|node
operator|->
name|promote
argument_list|(
name|infoSink
argument_list|)
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|childTempConstant
condition|)
block|{
name|TIntermTyped
modifier|*
name|newChild
init|=
name|childTempConstant
operator|->
name|fold
argument_list|(
name|op
argument_list|,
literal|0
argument_list|,
name|infoSink
argument_list|)
decl_stmt|;
if|if
condition|(
name|newChild
condition|)
return|return
name|newChild
return|;
block|}
return|return
name|node
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// This is the safe way to change the operator on an aggregate, as it
end_comment
begin_comment
comment|// does lots of error checking and fixing.  Especially for establishing
end_comment
begin_comment
comment|// a function call's operation on it's set of parameters.  Sequences
end_comment
begin_comment
comment|// of instructions are also aggregates, but they just direnctly set
end_comment
begin_comment
comment|// their operator to EOpSequence.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Returns an aggregate node, which could be the one passed in if
end_comment
begin_comment
comment|// it was already an aggregate but no operator was set.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|setAggregateOperator
name|TIntermAggregate
modifier|*
name|TIntermediate
operator|::
name|setAggregateOperator
parameter_list|(
name|TIntermNode
modifier|*
name|node
parameter_list|,
name|TOperator
name|op
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
name|line
parameter_list|)
block|{
name|TIntermAggregate
modifier|*
name|aggNode
decl_stmt|;
comment|//
comment|// Make sure we have an aggregate.  If not turn it into one.
comment|//
if|if
condition|(
name|node
condition|)
block|{
name|aggNode
operator|=
name|node
operator|->
name|getAsAggregate
argument_list|()
expr_stmt|;
if|if
condition|(
name|aggNode
operator|==
literal|0
operator|||
name|aggNode
operator|->
name|getOp
argument_list|()
operator|!=
name|EOpNull
condition|)
block|{
comment|//
comment|// Make an aggregate containing this node.
comment|//
name|aggNode
operator|=
operator|new
name|TIntermAggregate
argument_list|()
expr_stmt|;
name|aggNode
operator|->
name|getSequence
argument_list|()
operator|.
name|push_back
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|aggNode
operator|=
operator|new
name|TIntermAggregate
argument_list|()
expr_stmt|;
comment|//
comment|// Set the operator.
comment|//
name|aggNode
operator|->
name|setOp
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|aggNode
operator|->
name|setLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
return|return
name|aggNode
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Convert one type to another.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Returns the node representing the conversion, which could be the same
end_comment
begin_comment
comment|// node passed in if no conversion was needed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Return 0 if a conversion can't be done.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|addConversion
name|TIntermTyped
modifier|*
name|TIntermediate
operator|::
name|addConversion
parameter_list|(
name|TOperator
name|op
parameter_list|,
specifier|const
name|TType
modifier|&
name|type
parameter_list|,
name|TIntermTyped
modifier|*
name|node
parameter_list|)
block|{
comment|//
comment|// Does the base type allow operation?
comment|//
switch|switch
condition|(
name|node
operator|->
name|getBasicType
argument_list|()
condition|)
block|{
case|case
name|EbtVoid
case|:
case|case
name|EbtSampler2D
case|:
case|case
name|EbtSamplerCube
case|:
return|return
literal|0
return|;
default|default:
break|break;
block|}
comment|//
comment|// Otherwise, if types are identical, no problem
comment|//
if|if
condition|(
name|type
operator|==
name|node
operator|->
name|getType
argument_list|()
condition|)
return|return
name|node
return|;
comment|//
comment|// If one's a structure, then no conversions.
comment|//
if|if
condition|(
name|type
operator|.
name|getStruct
argument_list|()
operator|||
name|node
operator|->
name|getType
argument_list|()
operator|.
name|getStruct
argument_list|()
condition|)
return|return
literal|0
return|;
comment|//
comment|// If one's an array, then no conversions.
comment|//
if|if
condition|(
name|type
operator|.
name|isArray
argument_list|()
operator|||
name|node
operator|->
name|getType
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
return|return
literal|0
return|;
name|TBasicType
name|promoteTo
decl_stmt|;
switch|switch
condition|(
name|op
condition|)
block|{
comment|//
comment|// Explicit conversions
comment|//
case|case
name|EOpConstructBool
case|:
name|promoteTo
operator|=
name|EbtBool
expr_stmt|;
break|break;
case|case
name|EOpConstructFloat
case|:
name|promoteTo
operator|=
name|EbtFloat
expr_stmt|;
break|break;
case|case
name|EOpConstructInt
case|:
name|promoteTo
operator|=
name|EbtInt
expr_stmt|;
break|break;
default|default:
comment|//
comment|// implicit conversions were removed from the language.
comment|//
if|if
condition|(
name|type
operator|.
name|getBasicType
argument_list|()
operator|!=
name|node
operator|->
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
condition|)
return|return
literal|0
return|;
comment|//
comment|// Size and structure could still differ, but that's
comment|// handled by operator promotion.
comment|//
return|return
name|node
return|;
block|}
if|if
condition|(
name|node
operator|->
name|getAsConstantUnion
argument_list|()
condition|)
block|{
return|return
operator|(
name|promoteConstantUnion
argument_list|(
name|promoteTo
argument_list|,
name|node
operator|->
name|getAsConstantUnion
argument_list|()
argument_list|)
operator|)
return|;
block|}
else|else
block|{
comment|//
comment|// Add a new newNode for the conversion.
comment|//
name|TIntermUnary
modifier|*
name|newNode
init|=
literal|0
decl_stmt|;
name|TOperator
name|newOp
init|=
name|EOpNull
decl_stmt|;
switch|switch
condition|(
name|promoteTo
condition|)
block|{
case|case
name|EbtFloat
case|:
switch|switch
condition|(
name|node
operator|->
name|getBasicType
argument_list|()
condition|)
block|{
case|case
name|EbtInt
case|:
name|newOp
operator|=
name|EOpConvIntToFloat
expr_stmt|;
break|break;
case|case
name|EbtBool
case|:
name|newOp
operator|=
name|EOpConvBoolToFloat
expr_stmt|;
break|break;
default|default:
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|node
operator|->
name|getLine
argument_list|()
argument_list|,
literal|"Bad promotion node"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
break|break;
case|case
name|EbtBool
case|:
switch|switch
condition|(
name|node
operator|->
name|getBasicType
argument_list|()
condition|)
block|{
case|case
name|EbtInt
case|:
name|newOp
operator|=
name|EOpConvIntToBool
expr_stmt|;
break|break;
case|case
name|EbtFloat
case|:
name|newOp
operator|=
name|EOpConvFloatToBool
expr_stmt|;
break|break;
default|default:
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|node
operator|->
name|getLine
argument_list|()
argument_list|,
literal|"Bad promotion node"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
break|break;
case|case
name|EbtInt
case|:
switch|switch
condition|(
name|node
operator|->
name|getBasicType
argument_list|()
condition|)
block|{
case|case
name|EbtBool
case|:
name|newOp
operator|=
name|EOpConvBoolToInt
expr_stmt|;
break|break;
case|case
name|EbtFloat
case|:
name|newOp
operator|=
name|EOpConvFloatToInt
expr_stmt|;
break|break;
default|default:
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|node
operator|->
name|getLine
argument_list|()
argument_list|,
literal|"Bad promotion node"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
break|break;
default|default:
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|node
operator|->
name|getLine
argument_list|()
argument_list|,
literal|"Bad promotion type"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|TType
name|type
argument_list|(
name|promoteTo
argument_list|,
name|node
operator|->
name|getPrecision
argument_list|()
argument_list|,
name|EvqTemporary
argument_list|,
name|node
operator|->
name|getNominalSize
argument_list|()
argument_list|,
name|node
operator|->
name|isMatrix
argument_list|()
argument_list|,
name|node
operator|->
name|isArray
argument_list|()
argument_list|)
decl_stmt|;
name|newNode
operator|=
operator|new
name|TIntermUnary
argument_list|(
name|newOp
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|newNode
operator|->
name|setLine
argument_list|(
name|node
operator|->
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
name|newNode
operator|->
name|setOperand
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|newNode
return|;
block|}
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Safe way to combine two nodes into an aggregate.  Works with null pointers,
end_comment
begin_comment
comment|// a node that's not a aggregate yet, etc.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Returns the resulting aggregate, unless 0 was passed in for
end_comment
begin_comment
comment|// both existing nodes.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|growAggregate
name|TIntermAggregate
modifier|*
name|TIntermediate
operator|::
name|growAggregate
parameter_list|(
name|TIntermNode
modifier|*
name|left
parameter_list|,
name|TIntermNode
modifier|*
name|right
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
name|line
parameter_list|)
block|{
if|if
condition|(
name|left
operator|==
literal|0
operator|&&
name|right
operator|==
literal|0
condition|)
return|return
literal|0
return|;
name|TIntermAggregate
modifier|*
name|aggNode
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|left
condition|)
name|aggNode
operator|=
name|left
operator|->
name|getAsAggregate
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|aggNode
operator|||
name|aggNode
operator|->
name|getOp
argument_list|()
operator|!=
name|EOpNull
condition|)
block|{
name|aggNode
operator|=
operator|new
name|TIntermAggregate
expr_stmt|;
if|if
condition|(
name|left
condition|)
name|aggNode
operator|->
name|getSequence
argument_list|()
operator|.
name|push_back
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|right
condition|)
name|aggNode
operator|->
name|getSequence
argument_list|()
operator|.
name|push_back
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|aggNode
operator|->
name|setLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
return|return
name|aggNode
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Turn an existing node into an aggregate.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Returns an aggregate, unless 0 was passed in for the existing node.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|makeAggregate
name|TIntermAggregate
modifier|*
name|TIntermediate
operator|::
name|makeAggregate
parameter_list|(
name|TIntermNode
modifier|*
name|node
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
name|line
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
literal|0
condition|)
return|return
literal|0
return|;
name|TIntermAggregate
modifier|*
name|aggNode
init|=
operator|new
name|TIntermAggregate
decl_stmt|;
name|aggNode
operator|->
name|getSequence
argument_list|()
operator|.
name|push_back
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|aggNode
operator|->
name|setLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
return|return
name|aggNode
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// For "if" test nodes.  There are three children; a condition,
end_comment
begin_comment
comment|// a true path, and a false path.  The two paths are in the
end_comment
begin_comment
comment|// nodePair.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Returns the selection node created.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|addSelection
name|TIntermNode
modifier|*
name|TIntermediate
operator|::
name|addSelection
parameter_list|(
name|TIntermTyped
modifier|*
name|cond
parameter_list|,
name|TIntermNodePair
name|nodePair
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
name|line
parameter_list|)
block|{
comment|//
comment|// For compile time constant selections, prune the code and
comment|// test now.
comment|//
if|if
condition|(
name|cond
operator|->
name|getAsTyped
argument_list|()
operator|&&
name|cond
operator|->
name|getAsTyped
argument_list|()
operator|->
name|getAsConstantUnion
argument_list|()
condition|)
block|{
if|if
condition|(
name|cond
operator|->
name|getAsConstantUnion
argument_list|()
operator|->
name|getBConst
argument_list|(
literal|0
argument_list|)
operator|==
literal|true
condition|)
return|return
name|nodePair
operator|.
name|node1
condition|?
name|setAggregateOperator
argument_list|(
name|nodePair
operator|.
name|node1
argument_list|,
name|EOpSequence
argument_list|,
name|nodePair
operator|.
name|node1
operator|->
name|getLine
argument_list|()
argument_list|)
else|:
name|NULL
return|;
else|else
return|return
name|nodePair
operator|.
name|node2
condition|?
name|setAggregateOperator
argument_list|(
name|nodePair
operator|.
name|node2
argument_list|,
name|EOpSequence
argument_list|,
name|nodePair
operator|.
name|node2
operator|->
name|getLine
argument_list|()
argument_list|)
else|:
name|NULL
return|;
block|}
name|TIntermSelection
modifier|*
name|node
init|=
operator|new
name|TIntermSelection
argument_list|(
name|cond
argument_list|,
name|nodePair
operator|.
name|node1
argument_list|,
name|nodePair
operator|.
name|node2
argument_list|)
decl_stmt|;
name|node
operator|->
name|setLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
end_function
begin_function
DECL|function|addComma
name|TIntermTyped
modifier|*
name|TIntermediate
operator|::
name|addComma
parameter_list|(
name|TIntermTyped
modifier|*
name|left
parameter_list|,
name|TIntermTyped
modifier|*
name|right
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
name|line
parameter_list|)
block|{
if|if
condition|(
name|left
operator|->
name|getType
argument_list|()
operator|.
name|getQualifier
argument_list|()
operator|==
name|EvqConst
operator|&&
name|right
operator|->
name|getType
argument_list|()
operator|.
name|getQualifier
argument_list|()
operator|==
name|EvqConst
condition|)
block|{
return|return
name|right
return|;
block|}
else|else
block|{
name|TIntermTyped
modifier|*
name|commaAggregate
init|=
name|growAggregate
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|line
argument_list|)
decl_stmt|;
name|commaAggregate
operator|->
name|getAsAggregate
argument_list|()
operator|->
name|setOp
argument_list|(
name|EOpComma
argument_list|)
expr_stmt|;
name|commaAggregate
operator|->
name|setType
argument_list|(
name|right
operator|->
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|commaAggregate
operator|->
name|getTypePointer
argument_list|()
operator|->
name|setQualifier
argument_list|(
name|EvqTemporary
argument_list|)
expr_stmt|;
return|return
name|commaAggregate
return|;
block|}
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// For "?:" test nodes.  There are three children; a condition,
end_comment
begin_comment
comment|// a true path, and a false path.  The two paths are specified
end_comment
begin_comment
comment|// as separate parameters.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Returns the selection node created, or 0 if one could not be.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|addSelection
name|TIntermTyped
modifier|*
name|TIntermediate
operator|::
name|addSelection
parameter_list|(
name|TIntermTyped
modifier|*
name|cond
parameter_list|,
name|TIntermTyped
modifier|*
name|trueBlock
parameter_list|,
name|TIntermTyped
modifier|*
name|falseBlock
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
name|line
parameter_list|)
block|{
comment|//
comment|// Get compatible types.
comment|//
name|TIntermTyped
modifier|*
name|child
init|=
name|addConversion
argument_list|(
name|EOpSequence
argument_list|,
name|trueBlock
operator|->
name|getType
argument_list|()
argument_list|,
name|falseBlock
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
condition|)
name|falseBlock
operator|=
name|child
expr_stmt|;
else|else
block|{
name|child
operator|=
name|addConversion
argument_list|(
name|EOpSequence
argument_list|,
name|falseBlock
operator|->
name|getType
argument_list|()
argument_list|,
name|trueBlock
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
condition|)
name|trueBlock
operator|=
name|child
expr_stmt|;
else|else
return|return
literal|0
return|;
block|}
comment|//
comment|// See if all the operands are constant, then fold it otherwise not.
comment|//
if|if
condition|(
name|cond
operator|->
name|getAsConstantUnion
argument_list|()
operator|&&
name|trueBlock
operator|->
name|getAsConstantUnion
argument_list|()
operator|&&
name|falseBlock
operator|->
name|getAsConstantUnion
argument_list|()
condition|)
block|{
if|if
condition|(
name|cond
operator|->
name|getAsConstantUnion
argument_list|()
operator|->
name|getBConst
argument_list|(
literal|0
argument_list|)
condition|)
return|return
name|trueBlock
return|;
else|else
return|return
name|falseBlock
return|;
block|}
comment|//
comment|// Make a selection node.
comment|//
name|TIntermSelection
modifier|*
name|node
init|=
operator|new
name|TIntermSelection
argument_list|(
name|cond
argument_list|,
name|trueBlock
argument_list|,
name|falseBlock
argument_list|,
name|trueBlock
operator|->
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|->
name|getTypePointer
argument_list|()
operator|->
name|setQualifier
argument_list|(
name|EvqTemporary
argument_list|)
expr_stmt|;
name|node
operator|->
name|setLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Constant terminal nodes.  Has a union that contains bool, float or int constants
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Returns the constant union node created.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|addConstantUnion
name|TIntermConstantUnion
modifier|*
name|TIntermediate
operator|::
name|addConstantUnion
parameter_list|(
name|ConstantUnion
modifier|*
name|unionArrayPointer
parameter_list|,
specifier|const
name|TType
modifier|&
name|t
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
name|line
parameter_list|)
block|{
name|TIntermConstantUnion
modifier|*
name|node
init|=
operator|new
name|TIntermConstantUnion
argument_list|(
name|unionArrayPointer
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|node
operator|->
name|setLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
end_function
begin_function
DECL|function|addSwizzle
name|TIntermTyped
modifier|*
name|TIntermediate
operator|::
name|addSwizzle
parameter_list|(
name|TVectorFields
modifier|&
name|fields
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
name|line
parameter_list|)
block|{
name|TIntermAggregate
modifier|*
name|node
init|=
operator|new
name|TIntermAggregate
argument_list|(
name|EOpSequence
argument_list|)
decl_stmt|;
name|node
operator|->
name|setLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|TIntermConstantUnion
modifier|*
name|constIntNode
decl_stmt|;
name|TIntermSequence
modifier|&
name|sequenceVector
init|=
name|node
operator|->
name|getSequence
argument_list|()
decl_stmt|;
name|ConstantUnion
modifier|*
name|unionArray
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|num
condition|;
name|i
operator|++
control|)
block|{
name|unionArray
operator|=
operator|new
name|ConstantUnion
index|[
literal|1
index|]
expr_stmt|;
name|unionArray
operator|->
name|setIConst
argument_list|(
name|fields
operator|.
name|offsets
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|constIntNode
operator|=
name|addConstantUnion
argument_list|(
name|unionArray
argument_list|,
name|TType
argument_list|(
name|EbtInt
argument_list|,
name|EbpUndefined
argument_list|,
name|EvqConst
argument_list|)
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|sequenceVector
operator|.
name|push_back
argument_list|(
name|constIntNode
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Create loop nodes.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|addLoop
name|TIntermNode
modifier|*
name|TIntermediate
operator|::
name|addLoop
parameter_list|(
name|TLoopType
name|type
parameter_list|,
name|TIntermNode
modifier|*
name|init
parameter_list|,
name|TIntermTyped
modifier|*
name|cond
parameter_list|,
name|TIntermTyped
modifier|*
name|expr
parameter_list|,
name|TIntermNode
modifier|*
name|body
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
name|line
parameter_list|)
block|{
name|TIntermNode
modifier|*
name|node
init|=
operator|new
name|TIntermLoop
argument_list|(
name|type
argument_list|,
name|init
argument_list|,
name|cond
argument_list|,
name|expr
argument_list|,
name|body
argument_list|)
decl_stmt|;
name|node
operator|->
name|setLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Add branches.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|addBranch
name|TIntermBranch
modifier|*
name|TIntermediate
operator|::
name|addBranch
parameter_list|(
name|TOperator
name|branchOp
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
name|line
parameter_list|)
block|{
return|return
name|addBranch
argument_list|(
name|branchOp
argument_list|,
literal|0
argument_list|,
name|line
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|addBranch
name|TIntermBranch
modifier|*
name|TIntermediate
operator|::
name|addBranch
parameter_list|(
name|TOperator
name|branchOp
parameter_list|,
name|TIntermTyped
modifier|*
name|expression
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
name|line
parameter_list|)
block|{
name|TIntermBranch
modifier|*
name|node
init|=
operator|new
name|TIntermBranch
argument_list|(
name|branchOp
argument_list|,
name|expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|setLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// This is to be executed once the final root is put on top by the parsing
end_comment
begin_comment
comment|// process.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|postProcess
name|bool
name|TIntermediate
operator|::
name|postProcess
parameter_list|(
name|TIntermNode
modifier|*
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|==
literal|0
condition|)
return|return
literal|true
return|;
comment|//
comment|// First, finish off the top level sequence, if any
comment|//
name|TIntermAggregate
modifier|*
name|aggRoot
init|=
name|root
operator|->
name|getAsAggregate
argument_list|()
decl_stmt|;
if|if
condition|(
name|aggRoot
operator|&&
name|aggRoot
operator|->
name|getOp
argument_list|()
operator|==
name|EOpNull
condition|)
name|aggRoot
operator|->
name|setOp
argument_list|(
name|EOpSequence
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// This deletes the tree.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|remove
name|void
name|TIntermediate
operator|::
name|remove
parameter_list|(
name|TIntermNode
modifier|*
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
condition|)
name|RemoveAllTreeNodes
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|////////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Member functions of the nodes used for building the tree.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|////////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Say whether or not an operation node changes the value of a variable.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Returns true if state is modified.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|modifiesState
name|bool
name|TIntermOperator
operator|::
name|modifiesState
parameter_list|()
specifier|const
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|EOpPostIncrement
case|:
case|case
name|EOpPostDecrement
case|:
case|case
name|EOpPreIncrement
case|:
case|case
name|EOpPreDecrement
case|:
case|case
name|EOpAssign
case|:
case|case
name|EOpAddAssign
case|:
case|case
name|EOpSubAssign
case|:
case|case
name|EOpMulAssign
case|:
case|case
name|EOpVectorTimesMatrixAssign
case|:
case|case
name|EOpVectorTimesScalarAssign
case|:
case|case
name|EOpMatrixTimesScalarAssign
case|:
case|case
name|EOpMatrixTimesMatrixAssign
case|:
case|case
name|EOpDivAssign
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// returns true if the operator is for one of the constructors
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|isConstructor
name|bool
name|TIntermOperator
operator|::
name|isConstructor
parameter_list|()
specifier|const
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|EOpConstructVec2
case|:
case|case
name|EOpConstructVec3
case|:
case|case
name|EOpConstructVec4
case|:
case|case
name|EOpConstructMat2
case|:
case|case
name|EOpConstructMat3
case|:
case|case
name|EOpConstructMat4
case|:
case|case
name|EOpConstructFloat
case|:
case|case
name|EOpConstructIVec2
case|:
case|case
name|EOpConstructIVec3
case|:
case|case
name|EOpConstructIVec4
case|:
case|case
name|EOpConstructInt
case|:
case|case
name|EOpConstructBVec2
case|:
case|case
name|EOpConstructBVec3
case|:
case|case
name|EOpConstructBVec4
case|:
case|case
name|EOpConstructBool
case|:
case|case
name|EOpConstructStruct
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Make sure the type of a unary operator is appropriate for its
end_comment
begin_comment
comment|// combination of operation and operand type.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Returns false in nothing makes sense.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|promote
name|bool
name|TIntermUnary
operator|::
name|promote
parameter_list|(
name|TInfoSink
modifier|&
parameter_list|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|EOpLogicalNot
case|:
if|if
condition|(
name|operand
operator|->
name|getBasicType
argument_list|()
operator|!=
name|EbtBool
condition|)
return|return
literal|false
return|;
break|break;
case|case
name|EOpNegative
case|:
case|case
name|EOpPostIncrement
case|:
case|case
name|EOpPostDecrement
case|:
case|case
name|EOpPreIncrement
case|:
case|case
name|EOpPreDecrement
case|:
if|if
condition|(
name|operand
operator|->
name|getBasicType
argument_list|()
operator|==
name|EbtBool
condition|)
return|return
literal|false
return|;
break|break;
comment|// operators for built-ins are already type checked against their prototype
case|case
name|EOpAny
case|:
case|case
name|EOpAll
case|:
case|case
name|EOpVectorLogicalNot
case|:
return|return
literal|true
return|;
default|default:
if|if
condition|(
name|operand
operator|->
name|getBasicType
argument_list|()
operator|!=
name|EbtFloat
condition|)
return|return
literal|false
return|;
block|}
name|setType
argument_list|(
name|operand
operator|->
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setQualifier
argument_list|(
name|EvqTemporary
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Establishes the type of the resultant operation, as well as
end_comment
begin_comment
comment|// makes the operator the correct one for the operands.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Returns false if operator can't work on operands.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|promote
name|bool
name|TIntermBinary
operator|::
name|promote
parameter_list|(
name|TInfoSink
modifier|&
name|infoSink
parameter_list|)
block|{
comment|// This function only handles scalars, vectors, and matrices.
if|if
condition|(
name|left
operator|->
name|isArray
argument_list|()
operator|||
name|right
operator|->
name|isArray
argument_list|()
condition|)
block|{
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Invalid operation for arrays"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// GLSL ES 2.0 does not support implicit type casting.
comment|// So the basic type should always match.
if|if
condition|(
name|left
operator|->
name|getBasicType
argument_list|()
operator|!=
name|right
operator|->
name|getBasicType
argument_list|()
condition|)
return|return
literal|false
return|;
comment|//
comment|// Base assumption:  just make the type the same as the left
comment|// operand.  Then only deviations from this need be coded.
comment|//
name|setType
argument_list|(
name|left
operator|->
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// The result gets promoted to the highest precision.
name|TPrecision
name|higherPrecision
init|=
name|GetHigherPrecision
argument_list|(
name|left
operator|->
name|getPrecision
argument_list|()
argument_list|,
name|right
operator|->
name|getPrecision
argument_list|()
argument_list|)
decl_stmt|;
name|getTypePointer
argument_list|()
operator|->
name|setPrecision
argument_list|(
name|higherPrecision
argument_list|)
expr_stmt|;
comment|// Binary operations results in temporary variables unless both
comment|// operands are const.
if|if
condition|(
name|left
operator|->
name|getQualifier
argument_list|()
operator|!=
name|EvqConst
operator|||
name|right
operator|->
name|getQualifier
argument_list|()
operator|!=
name|EvqConst
condition|)
block|{
name|getTypePointer
argument_list|()
operator|->
name|setQualifier
argument_list|(
name|EvqTemporary
argument_list|)
expr_stmt|;
block|}
name|int
name|size
init|=
name|std
operator|::
name|max
argument_list|(
name|left
operator|->
name|getNominalSize
argument_list|()
argument_list|,
name|right
operator|->
name|getNominalSize
argument_list|()
argument_list|)
decl_stmt|;
comment|//
comment|// All scalars. Code after this test assumes this case is removed!
comment|//
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
comment|//
comment|// Promote to conditional
comment|//
case|case
name|EOpEqual
case|:
case|case
name|EOpNotEqual
case|:
case|case
name|EOpLessThan
case|:
case|case
name|EOpGreaterThan
case|:
case|case
name|EOpLessThanEqual
case|:
case|case
name|EOpGreaterThanEqual
case|:
name|setType
argument_list|(
name|TType
argument_list|(
name|EbtBool
argument_list|,
name|EbpUndefined
argument_list|)
argument_list|)
expr_stmt|;
break|break;
comment|//
comment|// And and Or operate on conditionals
comment|//
case|case
name|EOpLogicalAnd
case|:
case|case
name|EOpLogicalOr
case|:
comment|// Both operands must be of type bool.
if|if
condition|(
name|left
operator|->
name|getBasicType
argument_list|()
operator|!=
name|EbtBool
operator|||
name|right
operator|->
name|getBasicType
argument_list|()
operator|!=
name|EbtBool
condition|)
return|return
literal|false
return|;
name|setType
argument_list|(
name|TType
argument_list|(
name|EbtBool
argument_list|,
name|EbpUndefined
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
literal|true
return|;
block|}
comment|// If we reach here, at least one of the operands is vector or matrix.
comment|// The other operand could be a scalar, vector, or matrix.
comment|// Are the sizes compatible?
comment|//
if|if
condition|(
name|left
operator|->
name|getNominalSize
argument_list|()
operator|!=
name|right
operator|->
name|getNominalSize
argument_list|()
condition|)
block|{
comment|// If the nominal size of operands do not match:
comment|// One of them must be scalar.
if|if
condition|(
name|left
operator|->
name|getNominalSize
argument_list|()
operator|!=
literal|1
operator|&&
name|right
operator|->
name|getNominalSize
argument_list|()
operator|!=
literal|1
condition|)
return|return
literal|false
return|;
comment|// Operator cannot be of type pure assignment.
if|if
condition|(
name|op
operator|==
name|EOpAssign
operator|||
name|op
operator|==
name|EOpInitialize
condition|)
return|return
literal|false
return|;
block|}
comment|//
comment|// Can these two operands be combined?
comment|//
name|TBasicType
name|basicType
init|=
name|left
operator|->
name|getBasicType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|EOpMul
case|:
if|if
condition|(
operator|!
name|left
operator|->
name|isMatrix
argument_list|()
operator|&&
name|right
operator|->
name|isMatrix
argument_list|()
condition|)
block|{
if|if
condition|(
name|left
operator|->
name|isVector
argument_list|()
condition|)
name|op
operator|=
name|EOpVectorTimesMatrix
expr_stmt|;
else|else
block|{
name|op
operator|=
name|EOpMatrixTimesScalar
expr_stmt|;
name|setType
argument_list|(
name|TType
argument_list|(
name|basicType
argument_list|,
name|higherPrecision
argument_list|,
name|EvqTemporary
argument_list|,
name|size
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|left
operator|->
name|isMatrix
argument_list|()
operator|&&
operator|!
name|right
operator|->
name|isMatrix
argument_list|()
condition|)
block|{
if|if
condition|(
name|right
operator|->
name|isVector
argument_list|()
condition|)
block|{
name|op
operator|=
name|EOpMatrixTimesVector
expr_stmt|;
name|setType
argument_list|(
name|TType
argument_list|(
name|basicType
argument_list|,
name|higherPrecision
argument_list|,
name|EvqTemporary
argument_list|,
name|size
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|op
operator|=
name|EOpMatrixTimesScalar
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|left
operator|->
name|isMatrix
argument_list|()
operator|&&
name|right
operator|->
name|isMatrix
argument_list|()
condition|)
block|{
name|op
operator|=
name|EOpMatrixTimesMatrix
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|left
operator|->
name|isMatrix
argument_list|()
operator|&&
operator|!
name|right
operator|->
name|isMatrix
argument_list|()
condition|)
block|{
if|if
condition|(
name|left
operator|->
name|isVector
argument_list|()
operator|&&
name|right
operator|->
name|isVector
argument_list|()
condition|)
block|{
comment|// leave as component product
block|}
elseif|else
if|if
condition|(
name|left
operator|->
name|isVector
argument_list|()
operator|||
name|right
operator|->
name|isVector
argument_list|()
condition|)
block|{
name|op
operator|=
name|EOpVectorTimesScalar
expr_stmt|;
name|setType
argument_list|(
name|TType
argument_list|(
name|basicType
argument_list|,
name|higherPrecision
argument_list|,
name|EvqTemporary
argument_list|,
name|size
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Missing elses"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|EOpMulAssign
case|:
if|if
condition|(
operator|!
name|left
operator|->
name|isMatrix
argument_list|()
operator|&&
name|right
operator|->
name|isMatrix
argument_list|()
condition|)
block|{
if|if
condition|(
name|left
operator|->
name|isVector
argument_list|()
condition|)
name|op
operator|=
name|EOpVectorTimesMatrixAssign
expr_stmt|;
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|left
operator|->
name|isMatrix
argument_list|()
operator|&&
operator|!
name|right
operator|->
name|isMatrix
argument_list|()
condition|)
block|{
if|if
condition|(
name|right
operator|->
name|isVector
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|op
operator|=
name|EOpMatrixTimesScalarAssign
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|left
operator|->
name|isMatrix
argument_list|()
operator|&&
name|right
operator|->
name|isMatrix
argument_list|()
condition|)
block|{
name|op
operator|=
name|EOpMatrixTimesMatrixAssign
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|left
operator|->
name|isMatrix
argument_list|()
operator|&&
operator|!
name|right
operator|->
name|isMatrix
argument_list|()
condition|)
block|{
if|if
condition|(
name|left
operator|->
name|isVector
argument_list|()
operator|&&
name|right
operator|->
name|isVector
argument_list|()
condition|)
block|{
comment|// leave as component product
block|}
elseif|else
if|if
condition|(
name|left
operator|->
name|isVector
argument_list|()
operator|||
name|right
operator|->
name|isVector
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|left
operator|->
name|isVector
argument_list|()
condition|)
return|return
literal|false
return|;
name|op
operator|=
name|EOpVectorTimesScalarAssign
expr_stmt|;
name|setType
argument_list|(
name|TType
argument_list|(
name|basicType
argument_list|,
name|higherPrecision
argument_list|,
name|EvqTemporary
argument_list|,
name|size
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Missing elses"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|EOpAssign
case|:
case|case
name|EOpInitialize
case|:
case|case
name|EOpAdd
case|:
case|case
name|EOpSub
case|:
case|case
name|EOpDiv
case|:
case|case
name|EOpAddAssign
case|:
case|case
name|EOpSubAssign
case|:
case|case
name|EOpDivAssign
case|:
if|if
condition|(
operator|(
name|left
operator|->
name|isMatrix
argument_list|()
operator|&&
name|right
operator|->
name|isVector
argument_list|()
operator|)
operator|||
operator|(
name|left
operator|->
name|isVector
argument_list|()
operator|&&
name|right
operator|->
name|isMatrix
argument_list|()
operator|)
condition|)
return|return
literal|false
return|;
name|setType
argument_list|(
name|TType
argument_list|(
name|basicType
argument_list|,
name|higherPrecision
argument_list|,
name|EvqTemporary
argument_list|,
name|size
argument_list|,
name|left
operator|->
name|isMatrix
argument_list|()
operator|||
name|right
operator|->
name|isMatrix
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|EOpEqual
case|:
case|case
name|EOpNotEqual
case|:
case|case
name|EOpLessThan
case|:
case|case
name|EOpGreaterThan
case|:
case|case
name|EOpLessThanEqual
case|:
case|case
name|EOpGreaterThanEqual
case|:
if|if
condition|(
operator|(
name|left
operator|->
name|isMatrix
argument_list|()
operator|&&
name|right
operator|->
name|isVector
argument_list|()
operator|)
operator|||
operator|(
name|left
operator|->
name|isVector
argument_list|()
operator|&&
name|right
operator|->
name|isMatrix
argument_list|()
operator|)
condition|)
return|return
literal|false
return|;
name|setType
argument_list|(
name|TType
argument_list|(
name|EbtBool
argument_list|,
name|EbpUndefined
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|CompareStruct
name|bool
name|CompareStruct
parameter_list|(
specifier|const
name|TType
modifier|&
name|leftNodeType
parameter_list|,
name|ConstantUnion
modifier|*
name|rightUnionArray
parameter_list|,
name|ConstantUnion
modifier|*
name|leftUnionArray
parameter_list|)
block|{
specifier|const
name|TFieldList
modifier|&
name|fields
init|=
name|leftNodeType
operator|.
name|getStruct
argument_list|()
operator|->
name|fields
argument_list|()
decl_stmt|;
name|size_t
name|structSize
init|=
name|fields
operator|.
name|size
argument_list|()
decl_stmt|;
name|size_t
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|size_t
name|j
init|=
literal|0
init|;
name|j
operator|<
name|structSize
condition|;
name|j
operator|++
control|)
block|{
name|size_t
name|size
init|=
name|fields
index|[
name|j
index|]
operator|->
name|type
argument_list|()
operator|->
name|getObjectSize
argument_list|()
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fields
index|[
name|j
index|]
operator|->
name|type
argument_list|()
operator|->
name|getBasicType
argument_list|()
operator|==
name|EbtStruct
condition|)
block|{
if|if
condition|(
operator|!
name|CompareStructure
argument_list|(
operator|*
operator|(
name|fields
index|[
name|j
index|]
operator|->
name|type
argument_list|()
operator|)
argument_list|,
operator|&
name|rightUnionArray
index|[
name|index
index|]
argument_list|,
operator|&
name|leftUnionArray
index|[
name|index
index|]
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|leftUnionArray
index|[
name|index
index|]
operator|!=
name|rightUnionArray
index|[
name|index
index|]
condition|)
return|return
literal|false
return|;
name|index
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|CompareStructure
name|bool
name|CompareStructure
parameter_list|(
specifier|const
name|TType
modifier|&
name|leftNodeType
parameter_list|,
name|ConstantUnion
modifier|*
name|rightUnionArray
parameter_list|,
name|ConstantUnion
modifier|*
name|leftUnionArray
parameter_list|)
block|{
if|if
condition|(
name|leftNodeType
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|TType
name|typeWithoutArrayness
init|=
name|leftNodeType
decl_stmt|;
name|typeWithoutArrayness
operator|.
name|clearArrayness
argument_list|()
expr_stmt|;
name|size_t
name|arraySize
init|=
name|leftNodeType
operator|.
name|getArraySize
argument_list|()
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arraySize
condition|;
operator|++
name|i
control|)
block|{
name|size_t
name|offset
init|=
name|typeWithoutArrayness
operator|.
name|getObjectSize
argument_list|()
operator|*
name|i
decl_stmt|;
if|if
condition|(
operator|!
name|CompareStruct
argument_list|(
name|typeWithoutArrayness
argument_list|,
operator|&
name|rightUnionArray
index|[
name|offset
index|]
argument_list|,
operator|&
name|leftUnionArray
index|[
name|offset
index|]
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
else|else
return|return
name|CompareStruct
argument_list|(
name|leftNodeType
argument_list|,
name|rightUnionArray
argument_list|,
name|leftUnionArray
argument_list|)
return|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// The fold functions see if an operation on a constant can be done in place,
end_comment
begin_comment
comment|// without generating run-time code.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Returns the node to keep using, which may or may not be the node passed in.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|fold
name|TIntermTyped
modifier|*
name|TIntermConstantUnion
operator|::
name|fold
parameter_list|(
name|TOperator
name|op
parameter_list|,
name|TIntermTyped
modifier|*
name|constantNode
parameter_list|,
name|TInfoSink
modifier|&
name|infoSink
parameter_list|)
block|{
name|ConstantUnion
modifier|*
name|unionArray
init|=
name|getUnionArrayPointer
argument_list|()
decl_stmt|;
name|size_t
name|objectSize
init|=
name|getType
argument_list|()
operator|.
name|getObjectSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|constantNode
condition|)
block|{
comment|// binary operations
name|TIntermConstantUnion
modifier|*
name|node
init|=
name|constantNode
operator|->
name|getAsConstantUnion
argument_list|()
decl_stmt|;
name|ConstantUnion
modifier|*
name|rightUnionArray
init|=
name|node
operator|->
name|getUnionArrayPointer
argument_list|()
decl_stmt|;
name|TType
name|returnType
init|=
name|getType
argument_list|()
decl_stmt|;
comment|// for a case like float f = 1.2 + vec4(2,3,4,5);
if|if
condition|(
name|constantNode
operator|->
name|getType
argument_list|()
operator|.
name|getObjectSize
argument_list|()
operator|==
literal|1
operator|&&
name|objectSize
operator|>
literal|1
condition|)
block|{
name|rightUnionArray
operator|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
operator|++
name|i
control|)
name|rightUnionArray
index|[
name|i
index|]
operator|=
operator|*
name|node
operator|->
name|getUnionArrayPointer
argument_list|()
expr_stmt|;
name|returnType
operator|=
name|getType
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|constantNode
operator|->
name|getType
argument_list|()
operator|.
name|getObjectSize
argument_list|()
operator|>
literal|1
operator|&&
name|objectSize
operator|==
literal|1
condition|)
block|{
comment|// for a case like float f = vec4(2,3,4,5) + 1.2;
name|unionArray
operator|=
operator|new
name|ConstantUnion
index|[
name|constantNode
operator|->
name|getType
argument_list|()
operator|.
name|getObjectSize
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|constantNode
operator|->
name|getType
argument_list|()
operator|.
name|getObjectSize
argument_list|()
condition|;
operator|++
name|i
control|)
name|unionArray
index|[
name|i
index|]
operator|=
operator|*
name|getUnionArrayPointer
argument_list|()
expr_stmt|;
name|returnType
operator|=
name|node
operator|->
name|getType
argument_list|()
expr_stmt|;
name|objectSize
operator|=
name|constantNode
operator|->
name|getType
argument_list|()
operator|.
name|getObjectSize
argument_list|()
expr_stmt|;
block|}
name|ConstantUnion
modifier|*
name|tempConstArray
init|=
literal|0
decl_stmt|;
name|TIntermConstantUnion
modifier|*
name|tempNode
decl_stmt|;
name|bool
name|boolNodeFlag
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|EOpAdd
case|:
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
expr_stmt|;
block|{
comment|// support MSVC++6.0
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
name|tempConstArray
index|[
name|i
index|]
operator|=
name|unionArray
index|[
name|i
index|]
operator|+
name|rightUnionArray
index|[
name|i
index|]
expr_stmt|;
block|}
break|break;
case|case
name|EOpSub
case|:
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
expr_stmt|;
block|{
comment|// support MSVC++6.0
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
name|tempConstArray
index|[
name|i
index|]
operator|=
name|unionArray
index|[
name|i
index|]
operator|-
name|rightUnionArray
index|[
name|i
index|]
expr_stmt|;
block|}
break|break;
case|case
name|EOpMul
case|:
case|case
name|EOpVectorTimesScalar
case|:
case|case
name|EOpMatrixTimesScalar
case|:
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
expr_stmt|;
block|{
comment|// support MSVC++6.0
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
name|tempConstArray
index|[
name|i
index|]
operator|=
name|unionArray
index|[
name|i
index|]
operator|*
name|rightUnionArray
index|[
name|i
index|]
expr_stmt|;
block|}
break|break;
case|case
name|EOpMatrixTimesMatrix
case|:
if|if
condition|(
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
operator|!=
name|EbtFloat
operator|||
name|node
operator|->
name|getBasicType
argument_list|()
operator|!=
name|EbtFloat
condition|)
block|{
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Constant Folding cannot be done for matrix multiply"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|{
comment|// support MSVC++6.0
name|int
name|size
init|=
name|getNominalSize
argument_list|()
decl_stmt|;
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|size
operator|*
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|size
condition|;
name|row
operator|++
control|)
block|{
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|size
condition|;
name|column
operator|++
control|)
block|{
name|tempConstArray
index|[
name|size
operator|*
name|column
operator|+
name|row
index|]
operator|.
name|setFConst
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|tempConstArray
index|[
name|size
operator|*
name|column
operator|+
name|row
index|]
operator|.
name|setFConst
argument_list|(
name|tempConstArray
index|[
name|size
operator|*
name|column
operator|+
name|row
index|]
operator|.
name|getFConst
argument_list|()
operator|+
name|unionArray
index|[
name|i
operator|*
name|size
operator|+
name|row
index|]
operator|.
name|getFConst
argument_list|()
operator|*
operator|(
name|rightUnionArray
index|[
name|column
operator|*
name|size
operator|+
name|i
index|]
operator|.
name|getFConst
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
break|break;
case|case
name|EOpDiv
case|:
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
expr_stmt|;
block|{
comment|// support MSVC++6.0
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
condition|)
block|{
case|case
name|EbtFloat
case|:
if|if
condition|(
name|rightUnionArray
index|[
name|i
index|]
operator|==
literal|0.0f
condition|)
block|{
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixWarning
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Divide by zero error during constant folding"
argument_list|)
expr_stmt|;
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setFConst
argument_list|(
name|unionArray
index|[
name|i
index|]
operator|.
name|getFConst
argument_list|()
operator|<
literal|0
condition|?
operator|-
name|FLT_MAX
else|:
name|FLT_MAX
argument_list|)
expr_stmt|;
block|}
else|else
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setFConst
argument_list|(
name|unionArray
index|[
name|i
index|]
operator|.
name|getFConst
argument_list|()
operator|/
name|rightUnionArray
index|[
name|i
index|]
operator|.
name|getFConst
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EbtInt
case|:
if|if
condition|(
name|rightUnionArray
index|[
name|i
index|]
operator|==
literal|0
condition|)
block|{
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixWarning
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Divide by zero error during constant folding"
argument_list|)
expr_stmt|;
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setIConst
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
block|}
else|else
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setIConst
argument_list|(
name|unionArray
index|[
name|i
index|]
operator|.
name|getIConst
argument_list|()
operator|/
name|rightUnionArray
index|[
name|i
index|]
operator|.
name|getIConst
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Constant folding cannot be done for \"/\""
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
block|}
break|break;
case|case
name|EOpMatrixTimesVector
case|:
if|if
condition|(
name|node
operator|->
name|getBasicType
argument_list|()
operator|!=
name|EbtFloat
condition|)
block|{
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Constant Folding cannot be done for matrix times vector"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|getNominalSize
argument_list|()
index|]
expr_stmt|;
block|{
comment|// support MSVC++6.0
for|for
control|(
name|int
name|size
init|=
name|getNominalSize
argument_list|()
init|,
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setFConst
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size
condition|;
name|j
operator|++
control|)
block|{
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setFConst
argument_list|(
name|tempConstArray
index|[
name|i
index|]
operator|.
name|getFConst
argument_list|()
operator|+
operator|(
operator|(
name|unionArray
index|[
name|j
operator|*
name|size
operator|+
name|i
index|]
operator|.
name|getFConst
argument_list|()
operator|)
operator|*
name|rightUnionArray
index|[
name|j
index|]
operator|.
name|getFConst
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|tempNode
operator|=
operator|new
name|TIntermConstantUnion
argument_list|(
name|tempConstArray
argument_list|,
name|node
operator|->
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|tempNode
operator|->
name|setLine
argument_list|(
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tempNode
return|;
case|case
name|EOpVectorTimesMatrix
case|:
if|if
condition|(
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
operator|!=
name|EbtFloat
condition|)
block|{
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Constant Folding cannot be done for vector times matrix"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|getNominalSize
argument_list|()
index|]
expr_stmt|;
block|{
comment|// support MSVC++6.0
for|for
control|(
name|int
name|size
init|=
name|getNominalSize
argument_list|()
init|,
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setFConst
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size
condition|;
name|j
operator|++
control|)
block|{
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setFConst
argument_list|(
name|tempConstArray
index|[
name|i
index|]
operator|.
name|getFConst
argument_list|()
operator|+
operator|(
operator|(
name|unionArray
index|[
name|j
index|]
operator|.
name|getFConst
argument_list|()
operator|)
operator|*
name|rightUnionArray
index|[
name|i
operator|*
name|size
operator|+
name|j
index|]
operator|.
name|getFConst
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|EOpLogicalAnd
case|:
comment|// this code is written for possible future use, will not get executed currently
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
expr_stmt|;
block|{
comment|// support MSVC++6.0
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
name|tempConstArray
index|[
name|i
index|]
operator|=
name|unionArray
index|[
name|i
index|]
operator|&&
name|rightUnionArray
index|[
name|i
index|]
expr_stmt|;
block|}
break|break;
case|case
name|EOpLogicalOr
case|:
comment|// this code is written for possible future use, will not get executed currently
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
expr_stmt|;
block|{
comment|// support MSVC++6.0
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
name|tempConstArray
index|[
name|i
index|]
operator|=
name|unionArray
index|[
name|i
index|]
operator|||
name|rightUnionArray
index|[
name|i
index|]
expr_stmt|;
block|}
break|break;
case|case
name|EOpLogicalXor
case|:
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
expr_stmt|;
block|{
comment|// support MSVC++6.0
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
switch|switch
condition|(
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
condition|)
block|{
case|case
name|EbtBool
case|:
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setBConst
argument_list|(
operator|(
name|unionArray
index|[
name|i
index|]
operator|==
name|rightUnionArray
index|[
name|i
index|]
operator|)
condition|?
literal|false
else|:
literal|true
argument_list|)
expr_stmt|;
break|break;
default|default:
name|assert
argument_list|(
literal|false
operator|&&
literal|"Default missing"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|EOpLessThan
case|:
name|assert
argument_list|(
name|objectSize
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
literal|1
index|]
expr_stmt|;
name|tempConstArray
operator|->
name|setBConst
argument_list|(
operator|*
name|unionArray
operator|<
operator|*
name|rightUnionArray
argument_list|)
expr_stmt|;
name|returnType
operator|=
name|TType
argument_list|(
name|EbtBool
argument_list|,
name|EbpUndefined
argument_list|,
name|EvqConst
argument_list|)
expr_stmt|;
break|break;
case|case
name|EOpGreaterThan
case|:
name|assert
argument_list|(
name|objectSize
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
literal|1
index|]
expr_stmt|;
name|tempConstArray
operator|->
name|setBConst
argument_list|(
operator|*
name|unionArray
operator|>
operator|*
name|rightUnionArray
argument_list|)
expr_stmt|;
name|returnType
operator|=
name|TType
argument_list|(
name|EbtBool
argument_list|,
name|EbpUndefined
argument_list|,
name|EvqConst
argument_list|)
expr_stmt|;
break|break;
case|case
name|EOpLessThanEqual
case|:
block|{
name|assert
argument_list|(
name|objectSize
operator|==
literal|1
argument_list|)
expr_stmt|;
name|ConstantUnion
name|constant
decl_stmt|;
name|constant
operator|.
name|setBConst
argument_list|(
operator|*
name|unionArray
operator|>
operator|*
name|rightUnionArray
argument_list|)
expr_stmt|;
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
literal|1
index|]
expr_stmt|;
name|tempConstArray
operator|->
name|setBConst
argument_list|(
operator|!
name|constant
operator|.
name|getBConst
argument_list|()
argument_list|)
expr_stmt|;
name|returnType
operator|=
name|TType
argument_list|(
name|EbtBool
argument_list|,
name|EbpUndefined
argument_list|,
name|EvqConst
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EOpGreaterThanEqual
case|:
block|{
name|assert
argument_list|(
name|objectSize
operator|==
literal|1
argument_list|)
expr_stmt|;
name|ConstantUnion
name|constant
decl_stmt|;
name|constant
operator|.
name|setBConst
argument_list|(
operator|*
name|unionArray
operator|<
operator|*
name|rightUnionArray
argument_list|)
expr_stmt|;
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
literal|1
index|]
expr_stmt|;
name|tempConstArray
operator|->
name|setBConst
argument_list|(
operator|!
name|constant
operator|.
name|getBConst
argument_list|()
argument_list|)
expr_stmt|;
name|returnType
operator|=
name|TType
argument_list|(
name|EbtBool
argument_list|,
name|EbpUndefined
argument_list|,
name|EvqConst
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EOpEqual
case|:
if|if
condition|(
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
operator|==
name|EbtStruct
condition|)
block|{
if|if
condition|(
operator|!
name|CompareStructure
argument_list|(
name|node
operator|->
name|getType
argument_list|()
argument_list|,
name|node
operator|->
name|getUnionArrayPointer
argument_list|()
argument_list|,
name|unionArray
argument_list|)
condition|)
name|boolNodeFlag
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|unionArray
index|[
name|i
index|]
operator|!=
name|rightUnionArray
index|[
name|i
index|]
condition|)
block|{
name|boolNodeFlag
operator|=
literal|true
expr_stmt|;
break|break;
comment|// break out of for loop
block|}
block|}
block|}
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
literal|1
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|boolNodeFlag
condition|)
block|{
name|tempConstArray
operator|->
name|setBConst
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tempConstArray
operator|->
name|setBConst
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|tempNode
operator|=
operator|new
name|TIntermConstantUnion
argument_list|(
name|tempConstArray
argument_list|,
name|TType
argument_list|(
name|EbtBool
argument_list|,
name|EbpUndefined
argument_list|,
name|EvqConst
argument_list|)
argument_list|)
expr_stmt|;
name|tempNode
operator|->
name|setLine
argument_list|(
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tempNode
return|;
case|case
name|EOpNotEqual
case|:
if|if
condition|(
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
operator|==
name|EbtStruct
condition|)
block|{
if|if
condition|(
name|CompareStructure
argument_list|(
name|node
operator|->
name|getType
argument_list|()
argument_list|,
name|node
operator|->
name|getUnionArrayPointer
argument_list|()
argument_list|,
name|unionArray
argument_list|)
condition|)
name|boolNodeFlag
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|unionArray
index|[
name|i
index|]
operator|==
name|rightUnionArray
index|[
name|i
index|]
condition|)
block|{
name|boolNodeFlag
operator|=
literal|true
expr_stmt|;
break|break;
comment|// break out of for loop
block|}
block|}
block|}
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
literal|1
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|boolNodeFlag
condition|)
block|{
name|tempConstArray
operator|->
name|setBConst
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tempConstArray
operator|->
name|setBConst
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|tempNode
operator|=
operator|new
name|TIntermConstantUnion
argument_list|(
name|tempConstArray
argument_list|,
name|TType
argument_list|(
name|EbtBool
argument_list|,
name|EbpUndefined
argument_list|,
name|EvqConst
argument_list|)
argument_list|)
expr_stmt|;
name|tempNode
operator|->
name|setLine
argument_list|(
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tempNode
return|;
default|default:
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Invalid operator for constant folding"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|tempNode
operator|=
operator|new
name|TIntermConstantUnion
argument_list|(
name|tempConstArray
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|tempNode
operator|->
name|setLine
argument_list|(
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tempNode
return|;
block|}
else|else
block|{
comment|//
comment|// Do unary operations
comment|//
name|TIntermConstantUnion
modifier|*
name|newNode
init|=
literal|0
decl_stmt|;
name|ConstantUnion
modifier|*
name|tempConstArray
init|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|EOpNegative
case|:
switch|switch
condition|(
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
condition|)
block|{
case|case
name|EbtFloat
case|:
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setFConst
argument_list|(
operator|-
name|unionArray
index|[
name|i
index|]
operator|.
name|getFConst
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EbtInt
case|:
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setIConst
argument_list|(
operator|-
name|unionArray
index|[
name|i
index|]
operator|.
name|getIConst
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Unary operation not folded into constant"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
break|break;
case|case
name|EOpLogicalNot
case|:
comment|// this code is written for possible future use, will not get executed currently
switch|switch
condition|(
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
condition|)
block|{
case|case
name|EbtBool
case|:
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setBConst
argument_list|(
operator|!
name|unionArray
index|[
name|i
index|]
operator|.
name|getBConst
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Unary operation not folded into constant"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
break|break;
default|default:
return|return
literal|0
return|;
block|}
block|}
name|newNode
operator|=
operator|new
name|TIntermConstantUnion
argument_list|(
name|tempConstArray
argument_list|,
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|newNode
operator|->
name|setLine
argument_list|(
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newNode
return|;
block|}
block|}
end_function
begin_function
DECL|function|promoteConstantUnion
name|TIntermTyped
modifier|*
name|TIntermediate
operator|::
name|promoteConstantUnion
parameter_list|(
name|TBasicType
name|promoteTo
parameter_list|,
name|TIntermConstantUnion
modifier|*
name|node
parameter_list|)
block|{
name|size_t
name|size
init|=
name|node
operator|->
name|getType
argument_list|()
operator|.
name|getObjectSize
argument_list|()
decl_stmt|;
name|ConstantUnion
modifier|*
name|leftUnionArray
init|=
operator|new
name|ConstantUnion
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|promoteTo
condition|)
block|{
case|case
name|EbtFloat
case|:
switch|switch
condition|(
name|node
operator|->
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
condition|)
block|{
case|case
name|EbtInt
case|:
name|leftUnionArray
index|[
name|i
index|]
operator|.
name|setFConst
argument_list|(
cast|static_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|node
operator|->
name|getIConst
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|EbtBool
case|:
name|leftUnionArray
index|[
name|i
index|]
operator|.
name|setFConst
argument_list|(
cast|static_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|node
operator|->
name|getBConst
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|EbtFloat
case|:
name|leftUnionArray
index|[
name|i
index|]
operator|.
name|setFConst
argument_list|(
cast|static_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|node
operator|->
name|getFConst
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|node
operator|->
name|getLine
argument_list|()
argument_list|,
literal|"Cannot promote"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
break|break;
case|case
name|EbtInt
case|:
switch|switch
condition|(
name|node
operator|->
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
condition|)
block|{
case|case
name|EbtInt
case|:
name|leftUnionArray
index|[
name|i
index|]
operator|.
name|setIConst
argument_list|(
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|node
operator|->
name|getIConst
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|EbtBool
case|:
name|leftUnionArray
index|[
name|i
index|]
operator|.
name|setIConst
argument_list|(
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|node
operator|->
name|getBConst
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|EbtFloat
case|:
name|leftUnionArray
index|[
name|i
index|]
operator|.
name|setIConst
argument_list|(
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|node
operator|->
name|getFConst
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|node
operator|->
name|getLine
argument_list|()
argument_list|,
literal|"Cannot promote"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
break|break;
case|case
name|EbtBool
case|:
switch|switch
condition|(
name|node
operator|->
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
condition|)
block|{
case|case
name|EbtInt
case|:
name|leftUnionArray
index|[
name|i
index|]
operator|.
name|setBConst
argument_list|(
name|node
operator|->
name|getIConst
argument_list|(
name|i
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|EbtBool
case|:
name|leftUnionArray
index|[
name|i
index|]
operator|.
name|setBConst
argument_list|(
name|node
operator|->
name|getBConst
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|EbtFloat
case|:
name|leftUnionArray
index|[
name|i
index|]
operator|.
name|setBConst
argument_list|(
name|node
operator|->
name|getFConst
argument_list|(
name|i
argument_list|)
operator|!=
literal|0.0f
argument_list|)
expr_stmt|;
break|break;
default|default:
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|node
operator|->
name|getLine
argument_list|()
argument_list|,
literal|"Cannot promote"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
break|break;
default|default:
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|node
operator|->
name|getLine
argument_list|()
argument_list|,
literal|"Incorrect data type found"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
specifier|const
name|TType
modifier|&
name|t
init|=
name|node
operator|->
name|getType
argument_list|()
decl_stmt|;
return|return
name|addConstantUnion
argument_list|(
name|leftUnionArray
argument_list|,
name|TType
argument_list|(
name|promoteTo
argument_list|,
name|t
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|t
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|t
operator|.
name|getNominalSize
argument_list|()
argument_list|,
name|t
operator|.
name|isMatrix
argument_list|()
argument_list|,
name|t
operator|.
name|isArray
argument_list|()
argument_list|)
argument_list|,
name|node
operator|->
name|getLine
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// static
end_comment
begin_function
DECL|function|hash
name|TString
name|TIntermTraverser
operator|::
name|hash
parameter_list|(
specifier|const
name|TString
modifier|&
name|name
parameter_list|,
name|ShHashFunction64
name|hashFunction
parameter_list|)
block|{
if|if
condition|(
name|hashFunction
operator|==
name|NULL
operator|||
name|name
operator|.
name|empty
argument_list|()
condition|)
return|return
name|name
return|;
name|khronos_uint64_t
name|number
init|=
call|(
modifier|*
name|hashFunction
call|)
argument_list|(
name|name
operator|.
name|c_str
argument_list|()
argument_list|,
name|name
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|TStringStream
name|stream
decl_stmt|;
name|stream
operator|<<
name|HASHED_NAME_PREFIX
operator|<<
name|std
operator|::
name|hex
operator|<<
name|number
expr_stmt|;
name|TString
name|hashedName
init|=
name|stream
operator|.
name|str
argument_list|()
decl_stmt|;
return|return
name|hashedName
return|;
block|}
end_function
end_unit
