begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/translator/ValidateGlobalInitializer.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/ParseContext.h"
end_include
begin_namespace
namespace|namespace
block|{
DECL|class|ValidateGlobalInitializerTraverser
class|class
name|ValidateGlobalInitializerTraverser
super|:
specifier|public
name|TIntermTraverser
block|{
public|public:
name|ValidateGlobalInitializerTraverser
parameter_list|(
specifier|const
name|TParseContext
modifier|*
name|context
parameter_list|)
constructor_decl|;
DECL|member|override
name|void
name|visitSymbol
parameter_list|(
name|TIntermSymbol
modifier|*
name|node
parameter_list|)
specifier|override
function_decl|;
DECL|member|override
name|bool
name|visitAggregate
parameter_list|(
name|Visit
name|visit
parameter_list|,
name|TIntermAggregate
modifier|*
name|node
parameter_list|)
specifier|override
function_decl|;
DECL|member|override
name|bool
name|visitBinary
parameter_list|(
name|Visit
name|visit
parameter_list|,
name|TIntermBinary
modifier|*
name|node
parameter_list|)
specifier|override
function_decl|;
DECL|member|override
name|bool
name|visitUnary
parameter_list|(
name|Visit
name|visit
parameter_list|,
name|TIntermUnary
modifier|*
name|node
parameter_list|)
specifier|override
function_decl|;
DECL|function|isValid
name|bool
name|isValid
parameter_list|()
specifier|const
block|{
return|return
name|mIsValid
return|;
block|}
DECL|function|issueWarning
name|bool
name|issueWarning
parameter_list|()
specifier|const
block|{
return|return
name|mIssueWarning
return|;
block|}
private|private:
DECL|member|mContext
specifier|const
name|TParseContext
modifier|*
name|mContext
decl_stmt|;
DECL|member|mIsValid
name|bool
name|mIsValid
decl_stmt|;
DECL|member|mIssueWarning
name|bool
name|mIssueWarning
decl_stmt|;
block|}
class|;
DECL|function|visitSymbol
name|void
name|ValidateGlobalInitializerTraverser
operator|::
name|visitSymbol
parameter_list|(
name|TIntermSymbol
modifier|*
name|node
parameter_list|)
block|{
specifier|const
name|TSymbol
modifier|*
name|sym
init|=
name|mContext
operator|->
name|symbolTable
operator|.
name|find
argument_list|(
name|node
operator|->
name|getSymbol
argument_list|()
argument_list|,
name|mContext
operator|->
name|getShaderVersion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sym
operator|->
name|isVariable
argument_list|()
condition|)
block|{
comment|// ESSL 1.00 section 4.3 (or ESSL 3.00 section 4.3):
comment|// Global initializers must be constant expressions.
specifier|const
name|TVariable
modifier|*
name|var
init|=
cast|static_cast
argument_list|<
specifier|const
name|TVariable
operator|*
argument_list|>
argument_list|(
name|sym
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|var
operator|->
name|getType
argument_list|()
operator|.
name|getQualifier
argument_list|()
condition|)
block|{
case|case
name|EvqConst
case|:
break|break;
case|case
name|EvqGlobal
case|:
case|case
name|EvqTemporary
case|:
case|case
name|EvqUniform
case|:
comment|// We allow these cases to be compatible with legacy ESSL 1.00 content.
comment|// Implement stricter rules for ESSL 3.00 since there's no legacy content to deal with.
if|if
condition|(
name|mContext
operator|->
name|getShaderVersion
argument_list|()
operator|>=
literal|300
condition|)
block|{
name|mIsValid
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|mIssueWarning
operator|=
literal|true
expr_stmt|;
block|}
break|break;
default|default:
name|mIsValid
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
DECL|function|visitAggregate
name|bool
name|ValidateGlobalInitializerTraverser
operator|::
name|visitAggregate
parameter_list|(
name|Visit
name|visit
parameter_list|,
name|TIntermAggregate
modifier|*
name|node
parameter_list|)
block|{
comment|// Disallow calls to user-defined functions and texture lookup functions in global variable initializers.
comment|// This is done simply by disabling all function calls - built-in math functions don't use EOpFunctionCall.
if|if
condition|(
name|node
operator|->
name|getOp
argument_list|()
operator|==
name|EOpFunctionCall
condition|)
block|{
name|mIsValid
operator|=
literal|false
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|visitBinary
name|bool
name|ValidateGlobalInitializerTraverser
operator|::
name|visitBinary
parameter_list|(
name|Visit
name|visit
parameter_list|,
name|TIntermBinary
modifier|*
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|->
name|isAssignment
argument_list|()
condition|)
block|{
name|mIsValid
operator|=
literal|false
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|visitUnary
name|bool
name|ValidateGlobalInitializerTraverser
operator|::
name|visitUnary
parameter_list|(
name|Visit
name|visit
parameter_list|,
name|TIntermUnary
modifier|*
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|->
name|isAssignment
argument_list|()
condition|)
block|{
name|mIsValid
operator|=
literal|false
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateGlobalInitializerTraverser
name|ValidateGlobalInitializerTraverser
operator|::
name|ValidateGlobalInitializerTraverser
parameter_list|(
specifier|const
name|TParseContext
modifier|*
name|context
parameter_list|)
member_init_list|:
name|TIntermTraverser
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
member_init_list|,
name|mContext
argument_list|(
name|context
argument_list|)
member_init_list|,
name|mIsValid
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|mIssueWarning
argument_list|(
literal|false
argument_list|)
block|{ }
block|}
end_namespace
begin_comment
comment|// namespace
end_comment
begin_function
DECL|function|ValidateGlobalInitializer
name|bool
name|ValidateGlobalInitializer
parameter_list|(
name|TIntermTyped
modifier|*
name|initializer
parameter_list|,
specifier|const
name|TParseContext
modifier|*
name|context
parameter_list|,
name|bool
modifier|*
name|warning
parameter_list|)
block|{
name|ValidateGlobalInitializerTraverser
name|validate
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|initializer
operator|->
name|traverse
argument_list|(
operator|&
name|validate
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|warning
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
operator|*
name|warning
operator|=
name|validate
operator|.
name|issueWarning
argument_list|()
expr_stmt|;
return|return
name|validate
operator|.
name|isValid
argument_list|()
return|;
block|}
end_function
end_unit
