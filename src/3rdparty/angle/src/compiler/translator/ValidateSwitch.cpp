begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/translator/ValidateSwitch.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/ParseContext.h"
end_include
begin_function
DECL|function|validate
name|bool
name|ValidateSwitch
operator|::
name|validate
parameter_list|(
name|TBasicType
name|switchType
parameter_list|,
name|TParseContext
modifier|*
name|context
parameter_list|,
name|TIntermAggregate
modifier|*
name|statementList
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
name|loc
parameter_list|)
block|{
name|ValidateSwitch
name|validate
argument_list|(
name|switchType
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|statementList
argument_list|)
expr_stmt|;
name|statementList
operator|->
name|traverse
argument_list|(
operator|&
name|validate
argument_list|)
expr_stmt|;
return|return
name|validate
operator|.
name|validateInternal
argument_list|(
name|loc
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|ValidateSwitch
name|ValidateSwitch
operator|::
name|ValidateSwitch
parameter_list|(
name|TBasicType
name|switchType
parameter_list|,
name|TParseContext
modifier|*
name|context
parameter_list|)
member_init_list|:
name|TIntermTraverser
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
member_init_list|,
name|mSwitchType
argument_list|(
name|switchType
argument_list|)
member_init_list|,
name|mContext
argument_list|(
name|context
argument_list|)
member_init_list|,
name|mCaseTypeMismatch
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mFirstCaseFound
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mStatementBeforeCase
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mLastStatementWasCase
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mControlFlowDepth
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mCaseInsideControlFlow
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mDefaultCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mDuplicateCases
argument_list|(
literal|false
argument_list|)
block|{}
end_constructor
begin_function
DECL|function|visitSymbol
name|void
name|ValidateSwitch
operator|::
name|visitSymbol
parameter_list|(
name|TIntermSymbol
modifier|*
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mFirstCaseFound
condition|)
name|mStatementBeforeCase
operator|=
literal|true
expr_stmt|;
name|mLastStatementWasCase
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|visitConstantUnion
name|void
name|ValidateSwitch
operator|::
name|visitConstantUnion
parameter_list|(
name|TIntermConstantUnion
modifier|*
parameter_list|)
block|{
comment|// Conditions of case labels are not traversed, so this is some other constant
comment|// Could be just a statement like "0;"
if|if
condition|(
operator|!
name|mFirstCaseFound
condition|)
name|mStatementBeforeCase
operator|=
literal|true
expr_stmt|;
name|mLastStatementWasCase
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|visitBinary
name|bool
name|ValidateSwitch
operator|::
name|visitBinary
parameter_list|(
name|Visit
parameter_list|,
name|TIntermBinary
modifier|*
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mFirstCaseFound
condition|)
name|mStatementBeforeCase
operator|=
literal|true
expr_stmt|;
name|mLastStatementWasCase
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|visitUnary
name|bool
name|ValidateSwitch
operator|::
name|visitUnary
parameter_list|(
name|Visit
parameter_list|,
name|TIntermUnary
modifier|*
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mFirstCaseFound
condition|)
name|mStatementBeforeCase
operator|=
literal|true
expr_stmt|;
name|mLastStatementWasCase
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|visitSelection
name|bool
name|ValidateSwitch
operator|::
name|visitSelection
parameter_list|(
name|Visit
name|visit
parameter_list|,
name|TIntermSelection
modifier|*
parameter_list|)
block|{
if|if
condition|(
name|visit
operator|==
name|PreVisit
condition|)
operator|++
name|mControlFlowDepth
expr_stmt|;
if|if
condition|(
name|visit
operator|==
name|PostVisit
condition|)
operator|--
name|mControlFlowDepth
expr_stmt|;
if|if
condition|(
operator|!
name|mFirstCaseFound
condition|)
name|mStatementBeforeCase
operator|=
literal|true
expr_stmt|;
name|mLastStatementWasCase
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|visitSwitch
name|bool
name|ValidateSwitch
operator|::
name|visitSwitch
parameter_list|(
name|Visit
parameter_list|,
name|TIntermSwitch
modifier|*
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mFirstCaseFound
condition|)
name|mStatementBeforeCase
operator|=
literal|true
expr_stmt|;
name|mLastStatementWasCase
operator|=
literal|false
expr_stmt|;
comment|// Don't go into nested switch statements
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|visitCase
name|bool
name|ValidateSwitch
operator|::
name|visitCase
parameter_list|(
name|Visit
parameter_list|,
name|TIntermCase
modifier|*
name|node
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|nodeStr
init|=
name|node
operator|->
name|hasCondition
argument_list|()
condition|?
literal|"case"
else|:
literal|"default"
decl_stmt|;
if|if
condition|(
name|mControlFlowDepth
operator|>
literal|0
condition|)
block|{
name|mContext
operator|->
name|error
argument_list|(
name|node
operator|->
name|getLine
argument_list|()
argument_list|,
literal|"label statement nested inside control flow"
argument_list|,
name|nodeStr
argument_list|)
expr_stmt|;
name|mCaseInsideControlFlow
operator|=
literal|true
expr_stmt|;
block|}
name|mFirstCaseFound
operator|=
literal|true
expr_stmt|;
name|mLastStatementWasCase
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|node
operator|->
name|hasCondition
argument_list|()
condition|)
block|{
operator|++
name|mDefaultCount
expr_stmt|;
if|if
condition|(
name|mDefaultCount
operator|>
literal|1
condition|)
block|{
name|mContext
operator|->
name|error
argument_list|(
name|node
operator|->
name|getLine
argument_list|()
argument_list|,
literal|"duplicate default label"
argument_list|,
name|nodeStr
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|TIntermConstantUnion
modifier|*
name|condition
init|=
name|node
operator|->
name|getCondition
argument_list|()
operator|->
name|getAsConstantUnion
argument_list|()
decl_stmt|;
if|if
condition|(
name|condition
operator|==
literal|nullptr
condition|)
block|{
comment|// This can happen in error cases.
return|return
literal|false
return|;
block|}
name|TBasicType
name|conditionType
init|=
name|condition
operator|->
name|getBasicType
argument_list|()
decl_stmt|;
if|if
condition|(
name|conditionType
operator|!=
name|mSwitchType
condition|)
block|{
name|mContext
operator|->
name|error
argument_list|(
name|condition
operator|->
name|getLine
argument_list|()
argument_list|,
literal|"case label type does not match switch init-expression type"
argument_list|,
name|nodeStr
argument_list|)
expr_stmt|;
name|mCaseTypeMismatch
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|conditionType
operator|==
name|EbtInt
condition|)
block|{
name|int
name|iConst
init|=
name|condition
operator|->
name|getIConst
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|mCasesSigned
operator|.
name|find
argument_list|(
name|iConst
argument_list|)
operator|!=
name|mCasesSigned
operator|.
name|end
argument_list|()
condition|)
block|{
name|mContext
operator|->
name|error
argument_list|(
name|condition
operator|->
name|getLine
argument_list|()
argument_list|,
literal|"duplicate case label"
argument_list|,
name|nodeStr
argument_list|)
expr_stmt|;
name|mDuplicateCases
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|mCasesSigned
operator|.
name|insert
argument_list|(
name|iConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|conditionType
operator|==
name|EbtUInt
condition|)
block|{
name|unsigned
name|int
name|uConst
init|=
name|condition
operator|->
name|getUConst
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|mCasesUnsigned
operator|.
name|find
argument_list|(
name|uConst
argument_list|)
operator|!=
name|mCasesUnsigned
operator|.
name|end
argument_list|()
condition|)
block|{
name|mContext
operator|->
name|error
argument_list|(
name|condition
operator|->
name|getLine
argument_list|()
argument_list|,
literal|"duplicate case label"
argument_list|,
name|nodeStr
argument_list|)
expr_stmt|;
name|mDuplicateCases
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|mCasesUnsigned
operator|.
name|insert
argument_list|(
name|uConst
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Other types are possible only in error cases, where the error has already been generated
comment|// when parsing the case statement.
block|}
comment|// Don't traverse the condition of the case statement
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|visitAggregate
name|bool
name|ValidateSwitch
operator|::
name|visitAggregate
parameter_list|(
name|Visit
name|visit
parameter_list|,
name|TIntermAggregate
modifier|*
parameter_list|)
block|{
if|if
condition|(
name|getParentNode
argument_list|()
operator|!=
literal|nullptr
condition|)
block|{
comment|// This is not the statementList node, but some other node.
if|if
condition|(
operator|!
name|mFirstCaseFound
condition|)
name|mStatementBeforeCase
operator|=
literal|true
expr_stmt|;
name|mLastStatementWasCase
operator|=
literal|false
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|visitLoop
name|bool
name|ValidateSwitch
operator|::
name|visitLoop
parameter_list|(
name|Visit
name|visit
parameter_list|,
name|TIntermLoop
modifier|*
parameter_list|)
block|{
if|if
condition|(
name|visit
operator|==
name|PreVisit
condition|)
operator|++
name|mControlFlowDepth
expr_stmt|;
if|if
condition|(
name|visit
operator|==
name|PostVisit
condition|)
operator|--
name|mControlFlowDepth
expr_stmt|;
if|if
condition|(
operator|!
name|mFirstCaseFound
condition|)
name|mStatementBeforeCase
operator|=
literal|true
expr_stmt|;
name|mLastStatementWasCase
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|visitBranch
name|bool
name|ValidateSwitch
operator|::
name|visitBranch
parameter_list|(
name|Visit
parameter_list|,
name|TIntermBranch
modifier|*
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mFirstCaseFound
condition|)
name|mStatementBeforeCase
operator|=
literal|true
expr_stmt|;
name|mLastStatementWasCase
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|validateInternal
name|bool
name|ValidateSwitch
operator|::
name|validateInternal
parameter_list|(
specifier|const
name|TSourceLoc
modifier|&
name|loc
parameter_list|)
block|{
if|if
condition|(
name|mStatementBeforeCase
condition|)
block|{
name|mContext
operator|->
name|error
argument_list|(
name|loc
argument_list|,
literal|"statement before the first label"
argument_list|,
literal|"switch"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mLastStatementWasCase
condition|)
block|{
name|mContext
operator|->
name|error
argument_list|(
name|loc
argument_list|,
literal|"no statement between the last label and the end of the switch statement"
argument_list|,
literal|"switch"
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|mStatementBeforeCase
operator|&&
operator|!
name|mLastStatementWasCase
operator|&&
operator|!
name|mCaseInsideControlFlow
operator|&&
operator|!
name|mCaseTypeMismatch
operator|&&
name|mDefaultCount
operator|<=
literal|1
operator|&&
operator|!
name|mDuplicateCases
return|;
block|}
end_function
end_unit
