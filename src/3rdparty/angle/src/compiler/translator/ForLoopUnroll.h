begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2011 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMPILER_FORLOOPUNROLL_H_
end_ifndef
begin_define
DECL|macro|COMPILER_FORLOOPUNROLL_H_
define|#
directive|define
name|COMPILER_FORLOOPUNROLL_H_
end_define
begin_include
include|#
directive|include
file|"compiler/translator/intermediate.h"
end_include
begin_struct
DECL|struct|TLoopIndexInfo
struct|struct
name|TLoopIndexInfo
block|{
DECL|member|id
name|int
name|id
decl_stmt|;
DECL|member|initValue
name|int
name|initValue
decl_stmt|;
DECL|member|stopValue
name|int
name|stopValue
decl_stmt|;
DECL|member|incrementValue
name|int
name|incrementValue
decl_stmt|;
DECL|member|op
name|TOperator
name|op
decl_stmt|;
DECL|member|currentValue
name|int
name|currentValue
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
name|class
name|ForLoopUnroll
block|{
name|public
label|:
name|ForLoopUnroll
argument_list|()
block|{ }
name|void
name|FillLoopIndexInfo
parameter_list|(
name|TIntermLoop
modifier|*
name|node
parameter_list|,
name|TLoopIndexInfo
modifier|&
name|info
parameter_list|)
function_decl|;
comment|// Update the info.currentValue for the next loop iteration.
name|void
name|Step
parameter_list|()
function_decl|;
comment|// Return false if loop condition is no longer satisfied.
name|bool
name|SatisfiesLoopCondition
parameter_list|()
function_decl|;
comment|// Check if the symbol is the index of a loop that's unrolled.
name|bool
name|NeedsToReplaceSymbolWithValue
parameter_list|(
name|TIntermSymbol
modifier|*
name|symbol
parameter_list|)
function_decl|;
comment|// Return the current value of a given loop index symbol.
name|int
name|GetLoopIndexValue
parameter_list|(
name|TIntermSymbol
modifier|*
name|symbol
parameter_list|)
function_decl|;
name|void
name|Push
parameter_list|(
name|TLoopIndexInfo
modifier|&
name|info
parameter_list|)
function_decl|;
name|void
name|Pop
parameter_list|()
function_decl|;
specifier|static
name|void
name|MarkForLoopsWithIntegerIndicesForUnrolling
parameter_list|(
name|TIntermNode
modifier|*
name|root
parameter_list|)
function_decl|;
name|private
label|:
name|int
name|getLoopIncrement
parameter_list|(
name|TIntermLoop
modifier|*
name|node
parameter_list|)
function_decl|;
name|int
name|evaluateIntConstant
parameter_list|(
name|TIntermConstantUnion
modifier|*
name|node
parameter_list|)
function_decl|;
name|TVector
operator|<
name|TLoopIndexInfo
operator|>
name|mLoopIndexStack
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
