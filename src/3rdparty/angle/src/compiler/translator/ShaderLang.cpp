begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Implement the top-level of interface to the compiler,
end_comment
begin_comment
comment|// as defined in ShaderLang.h
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"GLSLANG/ShaderLang.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/Compiler.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/InitializeDll.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/length_limits.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|ANGLE_ENABLE_HLSL
end_ifdef
begin_include
include|#
directive|include
file|"compiler/translator/TranslatorHLSL.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// ANGLE_ENABLE_HLSL
end_comment
begin_include
include|#
directive|include
file|"compiler/translator/VariablePacker.h"
end_include
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_namespace
namespace|namespace
block|{
DECL|enum|ShaderVariableType
enum|enum
name|ShaderVariableType
block|{
DECL|enumerator|SHADERVAR_UNIFORM
name|SHADERVAR_UNIFORM
block|,
DECL|enumerator|SHADERVAR_VARYING
name|SHADERVAR_VARYING
block|,
DECL|enumerator|SHADERVAR_ATTRIBUTE
name|SHADERVAR_ATTRIBUTE
block|,
DECL|enumerator|SHADERVAR_OUTPUTVARIABLE
name|SHADERVAR_OUTPUTVARIABLE
block|,
DECL|enumerator|SHADERVAR_INTERFACEBLOCK
name|SHADERVAR_INTERFACEBLOCK
block|}
enum|;
DECL|member|isInitialized
name|bool
name|isInitialized
init|=
literal|false
decl_stmt|;
comment|//
comment|// This is the platform independent interface between an OGL driver
comment|// and the shading language compiler.
comment|//
template|template
parameter_list|<
name|typename
name|VarT
parameter_list|>
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|VarT
argument_list|>
modifier|*
name|GetVariableList
parameter_list|(
specifier|const
name|TCompiler
modifier|*
name|compiler
parameter_list|,
name|ShaderVariableType
name|variableType
parameter_list|)
function_decl|;
template|template
parameter_list|<>
DECL|function|GetVariableList
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|sh
operator|::
name|Uniform
argument_list|>
modifier|*
name|GetVariableList
parameter_list|(
specifier|const
name|TCompiler
modifier|*
name|compiler
parameter_list|,
name|ShaderVariableType
parameter_list|)
block|{
return|return
operator|&
name|compiler
operator|->
name|getUniforms
argument_list|()
return|;
block|}
template|template
parameter_list|<>
DECL|function|GetVariableList
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|sh
operator|::
name|Varying
argument_list|>
modifier|*
name|GetVariableList
parameter_list|(
specifier|const
name|TCompiler
modifier|*
name|compiler
parameter_list|,
name|ShaderVariableType
parameter_list|)
block|{
return|return
operator|&
name|compiler
operator|->
name|getVaryings
argument_list|()
return|;
block|}
template|template
parameter_list|<>
DECL|function|GetVariableList
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|sh
operator|::
name|Attribute
argument_list|>
modifier|*
name|GetVariableList
parameter_list|(
specifier|const
name|TCompiler
modifier|*
name|compiler
parameter_list|,
name|ShaderVariableType
name|variableType
parameter_list|)
block|{
return|return
operator|(
name|variableType
operator|==
name|SHADERVAR_ATTRIBUTE
condition|?
operator|&
name|compiler
operator|->
name|getAttributes
argument_list|()
else|:
operator|&
name|compiler
operator|->
name|getOutputVariables
argument_list|()
operator|)
return|;
block|}
template|template
parameter_list|<>
DECL|function|GetVariableList
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|sh
operator|::
name|InterfaceBlock
argument_list|>
modifier|*
name|GetVariableList
parameter_list|(
specifier|const
name|TCompiler
modifier|*
name|compiler
parameter_list|,
name|ShaderVariableType
parameter_list|)
block|{
return|return
operator|&
name|compiler
operator|->
name|getInterfaceBlocks
argument_list|()
return|;
block|}
template|template
parameter_list|<
name|typename
name|VarT
parameter_list|>
DECL|function|GetShaderVariables
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|VarT
argument_list|>
modifier|*
name|GetShaderVariables
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|,
name|ShaderVariableType
name|variableType
parameter_list|)
block|{
if|if
condition|(
operator|!
name|handle
condition|)
block|{
return|return
name|NULL
return|;
block|}
name|TShHandleBase
modifier|*
name|base
init|=
cast|static_cast
argument_list|<
name|TShHandleBase
operator|*
argument_list|>
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|TCompiler
modifier|*
name|compiler
init|=
name|base
operator|->
name|getAsCompiler
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|compiler
condition|)
block|{
return|return
name|NULL
return|;
block|}
return|return
name|GetVariableList
argument_list|<
name|VarT
argument_list|>
argument_list|(
name|compiler
argument_list|,
name|variableType
argument_list|)
return|;
block|}
DECL|function|GetCompilerFromHandle
name|TCompiler
modifier|*
name|GetCompilerFromHandle
parameter_list|(
name|ShHandle
name|handle
parameter_list|)
block|{
if|if
condition|(
operator|!
name|handle
condition|)
return|return
name|NULL
return|;
name|TShHandleBase
modifier|*
name|base
init|=
cast|static_cast
argument_list|<
name|TShHandleBase
operator|*
argument_list|>
argument_list|(
name|handle
argument_list|)
decl_stmt|;
return|return
name|base
operator|->
name|getAsCompiler
argument_list|()
return|;
block|}
ifdef|#
directive|ifdef
name|ANGLE_ENABLE_HLSL
DECL|function|GetTranslatorHLSLFromHandle
name|TranslatorHLSL
modifier|*
name|GetTranslatorHLSLFromHandle
parameter_list|(
name|ShHandle
name|handle
parameter_list|)
block|{
if|if
condition|(
operator|!
name|handle
condition|)
return|return
name|NULL
return|;
name|TShHandleBase
modifier|*
name|base
init|=
cast|static_cast
argument_list|<
name|TShHandleBase
operator|*
argument_list|>
argument_list|(
name|handle
argument_list|)
decl_stmt|;
return|return
name|base
operator|->
name|getAsTranslatorHLSL
argument_list|()
return|;
block|}
endif|#
directive|endif
comment|// ANGLE_ENABLE_HLSL
block|}
end_namespace
begin_comment
comment|// namespace anonymous
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Driver must call this first, once, before doing any other compiler operations.
end_comment
begin_comment
comment|// Subsequent calls to this function are no-op.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|ShInitialize
name|bool
name|ShInitialize
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isInitialized
condition|)
block|{
name|isInitialized
operator|=
name|InitProcess
argument_list|()
expr_stmt|;
block|}
return|return
name|isInitialized
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Cleanup symbol tables
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|ShFinalize
name|bool
name|ShFinalize
parameter_list|()
block|{
if|if
condition|(
name|isInitialized
condition|)
block|{
name|DetachProcess
argument_list|()
expr_stmt|;
name|isInitialized
operator|=
literal|false
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Initialize built-in resources with minimum expected values.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|ShInitBuiltInResources
name|void
name|ShInitBuiltInResources
parameter_list|(
name|ShBuiltInResources
modifier|*
name|resources
parameter_list|)
block|{
comment|// Make comparable.
name|memset
argument_list|(
name|resources
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|resources
argument_list|)
argument_list|)
expr_stmt|;
comment|// Constants.
name|resources
operator|->
name|MaxVertexAttribs
operator|=
literal|8
expr_stmt|;
name|resources
operator|->
name|MaxVertexUniformVectors
operator|=
literal|128
expr_stmt|;
name|resources
operator|->
name|MaxVaryingVectors
operator|=
literal|8
expr_stmt|;
name|resources
operator|->
name|MaxVertexTextureImageUnits
operator|=
literal|0
expr_stmt|;
name|resources
operator|->
name|MaxCombinedTextureImageUnits
operator|=
literal|8
expr_stmt|;
name|resources
operator|->
name|MaxTextureImageUnits
operator|=
literal|8
expr_stmt|;
name|resources
operator|->
name|MaxFragmentUniformVectors
operator|=
literal|16
expr_stmt|;
name|resources
operator|->
name|MaxDrawBuffers
operator|=
literal|1
expr_stmt|;
comment|// Extensions.
name|resources
operator|->
name|OES_standard_derivatives
operator|=
literal|0
expr_stmt|;
name|resources
operator|->
name|OES_EGL_image_external
operator|=
literal|0
expr_stmt|;
name|resources
operator|->
name|ARB_texture_rectangle
operator|=
literal|0
expr_stmt|;
name|resources
operator|->
name|EXT_draw_buffers
operator|=
literal|0
expr_stmt|;
name|resources
operator|->
name|EXT_frag_depth
operator|=
literal|0
expr_stmt|;
name|resources
operator|->
name|EXT_shader_texture_lod
operator|=
literal|0
expr_stmt|;
name|resources
operator|->
name|WEBGL_debug_shader_precision
operator|=
literal|0
expr_stmt|;
name|resources
operator|->
name|EXT_shader_framebuffer_fetch
operator|=
literal|0
expr_stmt|;
name|resources
operator|->
name|NV_shader_framebuffer_fetch
operator|=
literal|0
expr_stmt|;
name|resources
operator|->
name|ARM_shader_framebuffer_fetch
operator|=
literal|0
expr_stmt|;
name|resources
operator|->
name|NV_draw_buffers
operator|=
literal|0
expr_stmt|;
comment|// Disable highp precision in fragment shader by default.
name|resources
operator|->
name|FragmentPrecisionHigh
operator|=
literal|0
expr_stmt|;
comment|// GLSL ES 3.0 constants.
name|resources
operator|->
name|MaxVertexOutputVectors
operator|=
literal|16
expr_stmt|;
name|resources
operator|->
name|MaxFragmentInputVectors
operator|=
literal|15
expr_stmt|;
name|resources
operator|->
name|MinProgramTexelOffset
operator|=
operator|-
literal|8
expr_stmt|;
name|resources
operator|->
name|MaxProgramTexelOffset
operator|=
literal|7
expr_stmt|;
comment|// Disable name hashing by default.
name|resources
operator|->
name|HashFunction
operator|=
name|NULL
expr_stmt|;
name|resources
operator|->
name|ArrayIndexClampingStrategy
operator|=
name|SH_CLAMP_WITH_CLAMP_INTRINSIC
expr_stmt|;
name|resources
operator|->
name|MaxExpressionComplexity
operator|=
literal|256
expr_stmt|;
name|resources
operator|->
name|MaxCallStackDepth
operator|=
literal|256
expr_stmt|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Driver calls these to create and destroy compiler objects.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|ShConstructCompiler
name|ShHandle
name|ShConstructCompiler
parameter_list|(
name|sh
operator|::
name|GLenum
name|type
parameter_list|,
name|ShShaderSpec
name|spec
parameter_list|,
name|ShShaderOutput
name|output
parameter_list|,
specifier|const
name|ShBuiltInResources
modifier|*
name|resources
parameter_list|)
block|{
name|TShHandleBase
modifier|*
name|base
init|=
cast|static_cast
argument_list|<
name|TShHandleBase
operator|*
argument_list|>
argument_list|(
name|ConstructCompiler
argument_list|(
name|type
argument_list|,
name|spec
argument_list|,
name|output
argument_list|)
argument_list|)
decl_stmt|;
name|TCompiler
modifier|*
name|compiler
init|=
name|base
operator|->
name|getAsCompiler
argument_list|()
decl_stmt|;
if|if
condition|(
name|compiler
operator|==
literal|0
condition|)
return|return
literal|0
return|;
comment|// Generate built-in symbol table.
if|if
condition|(
operator|!
name|compiler
operator|->
name|Init
argument_list|(
operator|*
name|resources
argument_list|)
condition|)
block|{
name|ShDestruct
argument_list|(
name|base
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|base
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|ShDestruct
name|void
name|ShDestruct
parameter_list|(
name|ShHandle
name|handle
parameter_list|)
block|{
if|if
condition|(
name|handle
operator|==
literal|0
condition|)
return|return;
name|TShHandleBase
modifier|*
name|base
init|=
cast|static_cast
argument_list|<
name|TShHandleBase
operator|*
argument_list|>
argument_list|(
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|->
name|getAsCompiler
argument_list|()
condition|)
name|DeleteCompiler
argument_list|(
name|base
operator|->
name|getAsCompiler
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ShGetBuiltInResourcesString
specifier|const
name|std
operator|::
name|string
modifier|&
name|ShGetBuiltInResourcesString
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|)
block|{
name|TCompiler
modifier|*
name|compiler
init|=
name|GetCompilerFromHandle
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|compiler
argument_list|)
expr_stmt|;
return|return
name|compiler
operator|->
name|getBuiltInResourcesString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Do an actual compile on the given strings.  The result is left
end_comment
begin_comment
comment|// in the given compile object.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Return:  The return value of ShCompile is really boolean, indicating
end_comment
begin_comment
comment|// success or failure.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|ShCompile
name|bool
name|ShCompile
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
name|shaderStrings
index|[]
parameter_list|,
name|size_t
name|numStrings
parameter_list|,
name|int
name|compileOptions
parameter_list|)
block|{
name|TCompiler
modifier|*
name|compiler
init|=
name|GetCompilerFromHandle
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|compiler
argument_list|)
expr_stmt|;
return|return
name|compiler
operator|->
name|compile
argument_list|(
name|shaderStrings
argument_list|,
name|numStrings
argument_list|,
name|compileOptions
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|ShGetShaderVersion
name|int
name|ShGetShaderVersion
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|)
block|{
name|TCompiler
modifier|*
name|compiler
init|=
name|GetCompilerFromHandle
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|compiler
argument_list|)
expr_stmt|;
return|return
name|compiler
operator|->
name|getShaderVersion
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|ShGetShaderOutputType
name|ShShaderOutput
name|ShGetShaderOutputType
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|)
block|{
name|TCompiler
modifier|*
name|compiler
init|=
name|GetCompilerFromHandle
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|compiler
argument_list|)
expr_stmt|;
return|return
name|compiler
operator|->
name|getOutputType
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Return any compiler log of messages for the application.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|ShGetInfoLog
specifier|const
name|std
operator|::
name|string
modifier|&
name|ShGetInfoLog
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|)
block|{
name|TCompiler
modifier|*
name|compiler
init|=
name|GetCompilerFromHandle
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|compiler
argument_list|)
expr_stmt|;
name|TInfoSink
modifier|&
name|infoSink
init|=
name|compiler
operator|->
name|getInfoSink
argument_list|()
decl_stmt|;
return|return
name|infoSink
operator|.
name|info
operator|.
name|str
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Return any object code.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|ShGetObjectCode
specifier|const
name|std
operator|::
name|string
modifier|&
name|ShGetObjectCode
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|)
block|{
name|TCompiler
modifier|*
name|compiler
init|=
name|GetCompilerFromHandle
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|compiler
argument_list|)
expr_stmt|;
name|TInfoSink
modifier|&
name|infoSink
init|=
name|compiler
operator|->
name|getInfoSink
argument_list|()
decl_stmt|;
return|return
name|infoSink
operator|.
name|obj
operator|.
name|str
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|ShGetNameHashingMap
specifier|const
name|std
operator|::
name|map
argument_list|<
name|std
operator|::
name|string
argument_list|,
name|std
operator|::
name|string
argument_list|>
modifier|*
name|ShGetNameHashingMap
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|)
block|{
name|TCompiler
modifier|*
name|compiler
init|=
name|GetCompilerFromHandle
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|compiler
argument_list|)
expr_stmt|;
return|return
operator|&
operator|(
name|compiler
operator|->
name|getNameMap
argument_list|()
operator|)
return|;
block|}
end_function
begin_function
DECL|function|ShGetUniforms
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|sh
operator|::
name|Uniform
argument_list|>
modifier|*
name|ShGetUniforms
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|)
block|{
return|return
name|GetShaderVariables
argument_list|<
name|sh
operator|::
name|Uniform
argument_list|>
argument_list|(
name|handle
argument_list|,
name|SHADERVAR_UNIFORM
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|ShGetVaryings
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|sh
operator|::
name|Varying
argument_list|>
modifier|*
name|ShGetVaryings
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|)
block|{
return|return
name|GetShaderVariables
argument_list|<
name|sh
operator|::
name|Varying
argument_list|>
argument_list|(
name|handle
argument_list|,
name|SHADERVAR_VARYING
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|ShGetAttributes
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|sh
operator|::
name|Attribute
argument_list|>
modifier|*
name|ShGetAttributes
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|)
block|{
return|return
name|GetShaderVariables
argument_list|<
name|sh
operator|::
name|Attribute
argument_list|>
argument_list|(
name|handle
argument_list|,
name|SHADERVAR_ATTRIBUTE
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|ShGetOutputVariables
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|sh
operator|::
name|Attribute
argument_list|>
modifier|*
name|ShGetOutputVariables
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|)
block|{
return|return
name|GetShaderVariables
argument_list|<
name|sh
operator|::
name|Attribute
argument_list|>
argument_list|(
name|handle
argument_list|,
name|SHADERVAR_OUTPUTVARIABLE
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|ShGetInterfaceBlocks
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|sh
operator|::
name|InterfaceBlock
argument_list|>
modifier|*
name|ShGetInterfaceBlocks
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|)
block|{
return|return
name|GetShaderVariables
argument_list|<
name|sh
operator|::
name|InterfaceBlock
argument_list|>
argument_list|(
name|handle
argument_list|,
name|SHADERVAR_INTERFACEBLOCK
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|ShCheckVariablesWithinPackingLimits
name|bool
name|ShCheckVariablesWithinPackingLimits
parameter_list|(
name|int
name|maxVectors
parameter_list|,
name|ShVariableInfo
modifier|*
name|varInfoArray
parameter_list|,
name|size_t
name|varInfoArraySize
parameter_list|)
block|{
if|if
condition|(
name|varInfoArraySize
operator|==
literal|0
condition|)
return|return
literal|true
return|;
name|ASSERT
argument_list|(
name|varInfoArray
argument_list|)
expr_stmt|;
name|std
operator|::
name|vector
argument_list|<
name|sh
operator|::
name|ShaderVariable
argument_list|>
name|variables
decl_stmt|;
for|for
control|(
name|size_t
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|varInfoArraySize
condition|;
operator|++
name|ii
control|)
block|{
name|sh
operator|::
name|ShaderVariable
name|var
argument_list|(
name|varInfoArray
index|[
name|ii
index|]
operator|.
name|type
argument_list|,
name|varInfoArray
index|[
name|ii
index|]
operator|.
name|size
argument_list|)
decl_stmt|;
name|variables
operator|.
name|push_back
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
name|VariablePacker
name|packer
decl_stmt|;
return|return
name|packer
operator|.
name|CheckVariablesWithinPackingLimits
argument_list|(
name|maxVectors
argument_list|,
name|variables
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|ShGetInterfaceBlockRegister
name|bool
name|ShGetInterfaceBlockRegister
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|,
specifier|const
name|std
operator|::
name|string
modifier|&
name|interfaceBlockName
parameter_list|,
name|unsigned
name|int
modifier|*
name|indexOut
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|ANGLE_ENABLE_HLSL
name|ASSERT
argument_list|(
name|indexOut
argument_list|)
expr_stmt|;
name|TranslatorHLSL
modifier|*
name|translator
init|=
name|GetTranslatorHLSLFromHandle
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|translator
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|translator
operator|->
name|hasInterfaceBlock
argument_list|(
name|interfaceBlockName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
operator|*
name|indexOut
operator|=
name|translator
operator|->
name|getInterfaceBlockRegister
argument_list|(
name|interfaceBlockName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
comment|// ANGLE_ENABLE_HLSL
block|}
end_function
begin_function
DECL|function|ShGetUniformRegister
name|bool
name|ShGetUniformRegister
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|,
specifier|const
name|std
operator|::
name|string
modifier|&
name|uniformName
parameter_list|,
name|unsigned
name|int
modifier|*
name|indexOut
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|ANGLE_ENABLE_HLSL
name|ASSERT
argument_list|(
name|indexOut
argument_list|)
expr_stmt|;
name|TranslatorHLSL
modifier|*
name|translator
init|=
name|GetTranslatorHLSLFromHandle
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|translator
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|translator
operator|->
name|hasUniform
argument_list|(
name|uniformName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
operator|*
name|indexOut
operator|=
name|translator
operator|->
name|getUniformRegister
argument_list|(
name|uniformName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
comment|// ANGLE_ENABLE_HLSL
block|}
end_function
end_unit
