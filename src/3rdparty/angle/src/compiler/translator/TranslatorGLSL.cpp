begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/translator/TranslatorGLSL.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/OutputGLSL.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/VersionGLSL.h"
end_include
begin_constructor
DECL|function|TranslatorGLSL
name|TranslatorGLSL
operator|::
name|TranslatorGLSL
parameter_list|(
name|sh
operator|::
name|GLenum
name|type
parameter_list|,
name|ShShaderSpec
name|spec
parameter_list|)
member_init_list|:
name|TCompiler
argument_list|(
name|type
argument_list|,
name|spec
argument_list|,
name|SH_GLSL_OUTPUT
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|translate
name|void
name|TranslatorGLSL
operator|::
name|translate
parameter_list|(
name|TIntermNode
modifier|*
name|root
parameter_list|)
block|{
name|TInfoSinkBase
modifier|&
name|sink
init|=
name|getInfoSink
argument_list|()
operator|.
name|obj
decl_stmt|;
comment|// Write GLSL version.
name|writeVersion
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|writePragma
argument_list|()
expr_stmt|;
comment|// Write extension behaviour as needed
name|writeExtensionBehavior
argument_list|()
expr_stmt|;
comment|// Write emulated built-in functions if needed.
name|getBuiltInFunctionEmulator
argument_list|()
operator|.
name|OutputEmulatedFunctionDefinition
argument_list|(
name|sink
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Write array bounds clamping emulation if needed.
name|getArrayBoundsClamper
argument_list|()
operator|.
name|OutputClampingFunctionDefinition
argument_list|(
name|sink
argument_list|)
expr_stmt|;
comment|// Write translated shader.
name|TOutputGLSL
name|outputGLSL
argument_list|(
name|sink
argument_list|,
name|getArrayIndexClampingStrategy
argument_list|()
argument_list|,
name|getHashFunction
argument_list|()
argument_list|,
name|getNameMap
argument_list|()
argument_list|,
name|getSymbolTable
argument_list|()
argument_list|,
name|getShaderVersion
argument_list|()
argument_list|)
decl_stmt|;
name|root
operator|->
name|traverse
argument_list|(
operator|&
name|outputGLSL
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeVersion
name|void
name|TranslatorGLSL
operator|::
name|writeVersion
parameter_list|(
name|TIntermNode
modifier|*
name|root
parameter_list|)
block|{
name|TVersionGLSL
name|versionGLSL
argument_list|(
name|getShaderType
argument_list|()
argument_list|,
name|getPragma
argument_list|()
argument_list|)
decl_stmt|;
name|root
operator|->
name|traverse
argument_list|(
operator|&
name|versionGLSL
argument_list|)
expr_stmt|;
name|int
name|version
init|=
name|versionGLSL
operator|.
name|getVersion
argument_list|()
decl_stmt|;
comment|// We need to write version directive only if it is greater than 110.
comment|// If there is no version directive in the shader, 110 is implied.
if|if
condition|(
name|version
operator|>
literal|110
condition|)
block|{
name|TInfoSinkBase
modifier|&
name|sink
init|=
name|getInfoSink
argument_list|()
operator|.
name|obj
decl_stmt|;
name|sink
operator|<<
literal|"#version "
operator|<<
name|version
operator|<<
literal|"\n"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeExtensionBehavior
name|void
name|TranslatorGLSL
operator|::
name|writeExtensionBehavior
parameter_list|()
block|{
name|TInfoSinkBase
modifier|&
name|sink
init|=
name|getInfoSink
argument_list|()
operator|.
name|obj
decl_stmt|;
specifier|const
name|TExtensionBehavior
modifier|&
name|extensionBehavior
init|=
name|getExtensionBehavior
argument_list|()
decl_stmt|;
for|for
control|(
name|TExtensionBehavior
operator|::
name|const_iterator
name|iter
init|=
name|extensionBehavior
operator|.
name|begin
argument_list|()
init|;
name|iter
operator|!=
name|extensionBehavior
operator|.
name|end
argument_list|()
condition|;
operator|++
name|iter
control|)
block|{
if|if
condition|(
name|iter
operator|->
name|second
operator|==
name|EBhUndefined
condition|)
continue|continue;
comment|// For GLSL output, we don't need to emit most extensions explicitly,
comment|// but some we need to translate.
if|if
condition|(
name|iter
operator|->
name|first
operator|==
literal|"GL_EXT_shader_texture_lod"
condition|)
block|{
name|sink
operator|<<
literal|"#extension GL_ARB_shader_texture_lod : "
operator|<<
name|getBehaviorString
argument_list|(
name|iter
operator|->
name|second
argument_list|)
operator|<<
literal|"\n"
expr_stmt|;
block|}
block|}
block|}
end_function
end_unit
