begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMPILER_TRANSLATOR_LOOP_INFO_H_
end_ifndef
begin_define
DECL|macro|COMPILER_TRANSLATOR_LOOP_INFO_H_
define|#
directive|define
name|COMPILER_TRANSLATOR_LOOP_INFO_H_
end_define
begin_include
include|#
directive|include
file|"compiler/translator/intermediate.h"
end_include
begin_decl_stmt
name|class
name|TLoopIndexInfo
block|{
name|public
label|:
name|TLoopIndexInfo
argument_list|()
expr_stmt|;
comment|// If type is EbtInt, fill all fields of the structure with info
comment|// extracted from a loop node.
comment|// If type is not EbtInt, only fill id and type.
name|void
name|fillInfo
parameter_list|(
name|TIntermLoop
modifier|*
name|node
parameter_list|)
function_decl|;
name|int
name|getId
argument_list|()
specifier|const
block|{
return|return
name|mId
return|;
block|}
name|void
name|setId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|mId
operator|=
name|id
expr_stmt|;
block|}
name|TBasicType
name|getType
argument_list|()
specifier|const
block|{
return|return
name|mType
return|;
block|}
name|void
name|setType
parameter_list|(
name|TBasicType
name|type
parameter_list|)
block|{
name|mType
operator|=
name|type
expr_stmt|;
block|}
name|int
name|getCurrentValue
argument_list|()
specifier|const
block|{
return|return
name|mCurrentValue
return|;
block|}
name|void
name|step
parameter_list|()
block|{
name|mCurrentValue
operator|+=
name|mIncrementValue
expr_stmt|;
block|}
comment|// Check if the current value satisfies the loop condition.
name|bool
name|satisfiesLoopCondition
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|int
name|mId
decl_stmt|;
name|TBasicType
name|mType
decl_stmt|;
comment|// Either EbtInt or EbtFloat
comment|// Below fields are only valid if the index's type is int.
name|int
name|mInitValue
decl_stmt|;
name|int
name|mStopValue
decl_stmt|;
name|int
name|mIncrementValue
decl_stmt|;
name|TOperator
name|mOp
decl_stmt|;
name|int
name|mCurrentValue
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_struct
DECL|struct|TLoopInfo
struct|struct
name|TLoopInfo
block|{
DECL|member|index
name|TLoopIndexInfo
name|index
decl_stmt|;
DECL|member|loop
name|TIntermLoop
modifier|*
name|loop
decl_stmt|;
name|TLoopInfo
argument_list|()
expr_stmt|;
name|TLoopInfo
argument_list|(
name|TIntermLoop
operator|*
name|node
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
name|class
name|TLoopStack
range|:
name|public
name|TVector
operator|<
name|TLoopInfo
operator|>
block|{
name|public
operator|:
comment|// Search loop stack for a loop whose index matches the input symbol.
name|TIntermLoop
operator|*
name|findLoop
argument_list|(
name|TIntermSymbol
operator|*
name|symbol
argument_list|)
block|;
comment|// Find the loop index info in the loop stack by the input symbol.
name|TLoopIndexInfo
operator|*
name|getIndexInfo
argument_list|(
name|TIntermSymbol
operator|*
name|symbol
argument_list|)
block|;
comment|// Update the currentValue for the next loop iteration.
name|void
name|step
argument_list|()
block|;
comment|// Return false if loop condition is no longer satisfied.
name|bool
name|satisfiesLoopCondition
argument_list|()
block|;
comment|// Check if the symbol is the index of a loop that's unrolled.
name|bool
name|needsToReplaceSymbolWithValue
argument_list|(
name|TIntermSymbol
operator|*
name|symbol
argument_list|)
block|;
comment|// Return the current value of a given loop index symbol.
name|int
name|getLoopIndexValue
argument_list|(
name|TIntermSymbol
operator|*
name|symbol
argument_list|)
block|;
name|void
name|push
argument_list|(
name|TIntermLoop
operator|*
name|info
argument_list|)
block|;
name|void
name|pop
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// COMPILER_TRANSLATOR_LOOP_INDEX_H_
end_comment
end_unit
