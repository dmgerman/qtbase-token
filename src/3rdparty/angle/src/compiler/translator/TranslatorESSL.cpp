begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/translator/TranslatorESSL.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/BuiltInFunctionEmulatorGLSL.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/EmulatePrecision.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/OutputESSL.h"
end_include
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_constructor
DECL|function|TranslatorESSL
name|TranslatorESSL
operator|::
name|TranslatorESSL
parameter_list|(
name|sh
operator|::
name|GLenum
name|type
parameter_list|,
name|ShShaderSpec
name|spec
parameter_list|)
member_init_list|:
name|TCompiler
argument_list|(
name|type
argument_list|,
name|spec
argument_list|,
name|SH_ESSL_OUTPUT
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|initBuiltInFunctionEmulator
name|void
name|TranslatorESSL
operator|::
name|initBuiltInFunctionEmulator
parameter_list|(
name|BuiltInFunctionEmulator
modifier|*
name|emu
parameter_list|,
name|int
name|compileOptions
parameter_list|)
block|{
if|if
condition|(
name|compileOptions
operator|&
name|SH_EMULATE_BUILT_IN_FUNCTIONS
condition|)
name|InitBuiltInFunctionEmulatorForGLSL
argument_list|(
name|emu
argument_list|,
name|getShaderType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|translate
name|void
name|TranslatorESSL
operator|::
name|translate
parameter_list|(
name|TIntermNode
modifier|*
name|root
parameter_list|,
name|int
parameter_list|)
block|{
name|TInfoSinkBase
modifier|&
name|sink
init|=
name|getInfoSink
argument_list|()
operator|.
name|obj
decl_stmt|;
name|int
name|shaderVersion
init|=
name|getShaderVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|shaderVersion
operator|>
literal|100
condition|)
block|{
name|sink
operator|<<
literal|"#version "
operator|<<
name|shaderVersion
operator|<<
literal|" es\n"
expr_stmt|;
block|}
name|writePragma
argument_list|()
expr_stmt|;
comment|// Write built-in extension behaviors.
name|writeExtensionBehavior
argument_list|()
expr_stmt|;
name|bool
name|precisionEmulation
init|=
name|getResources
argument_list|()
operator|.
name|WEBGL_debug_shader_precision
operator|&&
name|getPragma
argument_list|()
operator|.
name|debugShaderPrecision
decl_stmt|;
if|if
condition|(
name|precisionEmulation
condition|)
block|{
name|EmulatePrecision
name|emulatePrecision
decl_stmt|;
name|root
operator|->
name|traverse
argument_list|(
operator|&
name|emulatePrecision
argument_list|)
expr_stmt|;
name|emulatePrecision
operator|.
name|updateTree
argument_list|()
expr_stmt|;
name|emulatePrecision
operator|.
name|writeEmulationHelpers
argument_list|(
name|sink
argument_list|,
name|SH_ESSL_OUTPUT
argument_list|)
expr_stmt|;
block|}
comment|// Write emulated built-in functions if needed.
if|if
condition|(
operator|!
name|getBuiltInFunctionEmulator
argument_list|()
operator|.
name|IsOutputEmpty
argument_list|()
condition|)
block|{
name|sink
operator|<<
literal|"// BEGIN: Generated code for built-in function emulation\n\n"
expr_stmt|;
if|if
condition|(
name|getShaderType
argument_list|()
operator|==
name|GL_FRAGMENT_SHADER
condition|)
block|{
name|sink
operator|<<
literal|"#if defined(GL_FRAGMENT_PRECISION_HIGH)\n"
operator|<<
literal|"#define webgl_emu_precision highp\n"
operator|<<
literal|"#else\n"
operator|<<
literal|"#define webgl_emu_precision mediump\n"
operator|<<
literal|"#endif\n\n"
expr_stmt|;
block|}
else|else
block|{
name|sink
operator|<<
literal|"#define webgl_emu_precision highp\n"
expr_stmt|;
block|}
name|getBuiltInFunctionEmulator
argument_list|()
operator|.
name|OutputEmulatedFunctions
argument_list|(
name|sink
argument_list|)
expr_stmt|;
name|sink
operator|<<
literal|"// END: Generated code for built-in function emulation\n\n"
expr_stmt|;
block|}
comment|// Write array bounds clamping emulation if needed.
name|getArrayBoundsClamper
argument_list|()
operator|.
name|OutputClampingFunctionDefinition
argument_list|(
name|sink
argument_list|)
expr_stmt|;
comment|// Write translated shader.
name|TOutputESSL
name|outputESSL
argument_list|(
name|sink
argument_list|,
name|getArrayIndexClampingStrategy
argument_list|()
argument_list|,
name|getHashFunction
argument_list|()
argument_list|,
name|getNameMap
argument_list|()
argument_list|,
name|getSymbolTable
argument_list|()
argument_list|,
name|shaderVersion
argument_list|,
name|precisionEmulation
argument_list|)
decl_stmt|;
name|root
operator|->
name|traverse
argument_list|(
operator|&
name|outputESSL
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeExtensionBehavior
name|void
name|TranslatorESSL
operator|::
name|writeExtensionBehavior
parameter_list|()
block|{
name|TInfoSinkBase
modifier|&
name|sink
init|=
name|getInfoSink
argument_list|()
operator|.
name|obj
decl_stmt|;
specifier|const
name|TExtensionBehavior
modifier|&
name|extBehavior
init|=
name|getExtensionBehavior
argument_list|()
decl_stmt|;
for|for
control|(
name|TExtensionBehavior
operator|::
name|const_iterator
name|iter
init|=
name|extBehavior
operator|.
name|begin
argument_list|()
init|;
name|iter
operator|!=
name|extBehavior
operator|.
name|end
argument_list|()
condition|;
operator|++
name|iter
control|)
block|{
if|if
condition|(
name|iter
operator|->
name|second
operator|!=
name|EBhUndefined
condition|)
block|{
if|if
condition|(
name|getResources
argument_list|()
operator|.
name|NV_shader_framebuffer_fetch
operator|&&
name|iter
operator|->
name|first
operator|==
literal|"GL_EXT_shader_framebuffer_fetch"
condition|)
block|{
name|sink
operator|<<
literal|"#extension GL_NV_shader_framebuffer_fetch : "
operator|<<
name|getBehaviorString
argument_list|(
name|iter
operator|->
name|second
argument_list|)
operator|<<
literal|"\n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getResources
argument_list|()
operator|.
name|NV_draw_buffers
operator|&&
name|iter
operator|->
name|first
operator|==
literal|"GL_EXT_draw_buffers"
condition|)
block|{
name|sink
operator|<<
literal|"#extension GL_NV_draw_buffers : "
operator|<<
name|getBehaviorString
argument_list|(
name|iter
operator|->
name|second
argument_list|)
operator|<<
literal|"\n"
expr_stmt|;
block|}
else|else
block|{
name|sink
operator|<<
literal|"#extension "
operator|<<
name|iter
operator|->
name|first
operator|<<
literal|" : "
operator|<<
name|getBehaviorString
argument_list|(
name|iter
operator|->
name|second
argument_list|)
operator|<<
literal|"\n"
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
end_unit
