begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/translator/Operator.h"
end_include
begin_function
DECL|function|GetOperatorString
specifier|const
name|char
modifier|*
name|GetOperatorString
parameter_list|(
name|TOperator
name|op
parameter_list|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
comment|// Note: ops from EOpNull to EOpPrototype can't be handled here.
case|case
name|EOpNegative
case|:
return|return
literal|"-"
return|;
case|case
name|EOpPositive
case|:
return|return
literal|"+"
return|;
case|case
name|EOpLogicalNot
case|:
return|return
literal|"!"
return|;
case|case
name|EOpVectorLogicalNot
case|:
return|return
literal|"not"
return|;
case|case
name|EOpBitwiseNot
case|:
return|return
literal|"~"
return|;
case|case
name|EOpPostIncrement
case|:
return|return
literal|"++"
return|;
case|case
name|EOpPostDecrement
case|:
return|return
literal|"--"
return|;
case|case
name|EOpPreIncrement
case|:
return|return
literal|"++"
return|;
case|case
name|EOpPreDecrement
case|:
return|return
literal|"--"
return|;
case|case
name|EOpAdd
case|:
return|return
literal|"+"
return|;
case|case
name|EOpSub
case|:
return|return
literal|"-"
return|;
case|case
name|EOpMul
case|:
return|return
literal|"*"
return|;
case|case
name|EOpDiv
case|:
return|return
literal|"/"
return|;
case|case
name|EOpIMod
case|:
return|return
literal|"%"
return|;
case|case
name|EOpEqual
case|:
return|return
literal|"=="
return|;
case|case
name|EOpNotEqual
case|:
return|return
literal|"!="
return|;
case|case
name|EOpVectorEqual
case|:
return|return
literal|"equal"
return|;
case|case
name|EOpVectorNotEqual
case|:
return|return
literal|"notEqual"
return|;
case|case
name|EOpLessThan
case|:
return|return
literal|"<"
return|;
case|case
name|EOpGreaterThan
case|:
return|return
literal|">"
return|;
case|case
name|EOpLessThanEqual
case|:
return|return
literal|"<="
return|;
case|case
name|EOpGreaterThanEqual
case|:
return|return
literal|">="
return|;
case|case
name|EOpComma
case|:
return|return
literal|","
return|;
comment|// Fall-through.
case|case
name|EOpVectorTimesScalar
case|:
case|case
name|EOpVectorTimesMatrix
case|:
case|case
name|EOpMatrixTimesVector
case|:
case|case
name|EOpMatrixTimesScalar
case|:
return|return
literal|"*"
return|;
case|case
name|EOpLogicalOr
case|:
return|return
literal|"||"
return|;
case|case
name|EOpLogicalXor
case|:
return|return
literal|"^^"
return|;
case|case
name|EOpLogicalAnd
case|:
return|return
literal|"&&"
return|;
case|case
name|EOpBitShiftLeft
case|:
return|return
literal|"<<"
return|;
case|case
name|EOpBitShiftRight
case|:
return|return
literal|">>"
return|;
case|case
name|EOpBitwiseAnd
case|:
return|return
literal|"&"
return|;
case|case
name|EOpBitwiseXor
case|:
return|return
literal|"^"
return|;
case|case
name|EOpBitwiseOr
case|:
return|return
literal|"|"
return|;
comment|// Fall-through.
case|case
name|EOpIndexDirect
case|:
case|case
name|EOpIndexIndirect
case|:
return|return
literal|"[]"
return|;
case|case
name|EOpIndexDirectStruct
case|:
case|case
name|EOpIndexDirectInterfaceBlock
case|:
return|return
literal|"."
return|;
case|case
name|EOpVectorSwizzle
case|:
return|return
literal|"."
return|;
case|case
name|EOpRadians
case|:
return|return
literal|"radians"
return|;
case|case
name|EOpDegrees
case|:
return|return
literal|"degrees"
return|;
case|case
name|EOpSin
case|:
return|return
literal|"sin"
return|;
case|case
name|EOpCos
case|:
return|return
literal|"cos"
return|;
case|case
name|EOpTan
case|:
return|return
literal|"tan"
return|;
case|case
name|EOpAsin
case|:
return|return
literal|"asin"
return|;
case|case
name|EOpAcos
case|:
return|return
literal|"acos"
return|;
case|case
name|EOpAtan
case|:
return|return
literal|"atan"
return|;
case|case
name|EOpSinh
case|:
return|return
literal|"sinh"
return|;
case|case
name|EOpCosh
case|:
return|return
literal|"cosh"
return|;
case|case
name|EOpTanh
case|:
return|return
literal|"tanh"
return|;
case|case
name|EOpAsinh
case|:
return|return
literal|"asinh"
return|;
case|case
name|EOpAcosh
case|:
return|return
literal|"acosh"
return|;
case|case
name|EOpAtanh
case|:
return|return
literal|"atanh"
return|;
case|case
name|EOpPow
case|:
return|return
literal|"pow"
return|;
case|case
name|EOpExp
case|:
return|return
literal|"exp"
return|;
case|case
name|EOpLog
case|:
return|return
literal|"log"
return|;
case|case
name|EOpExp2
case|:
return|return
literal|"exp2"
return|;
case|case
name|EOpLog2
case|:
return|return
literal|"log2"
return|;
case|case
name|EOpSqrt
case|:
return|return
literal|"sqrt"
return|;
case|case
name|EOpInverseSqrt
case|:
return|return
literal|"inversesqrt"
return|;
case|case
name|EOpAbs
case|:
return|return
literal|"abs"
return|;
case|case
name|EOpSign
case|:
return|return
literal|"sign"
return|;
case|case
name|EOpFloor
case|:
return|return
literal|"floor"
return|;
case|case
name|EOpTrunc
case|:
return|return
literal|"trunc"
return|;
case|case
name|EOpRound
case|:
return|return
literal|"round"
return|;
case|case
name|EOpRoundEven
case|:
return|return
literal|"roundEven"
return|;
case|case
name|EOpCeil
case|:
return|return
literal|"ceil"
return|;
case|case
name|EOpFract
case|:
return|return
literal|"fract"
return|;
case|case
name|EOpMod
case|:
return|return
literal|"mod"
return|;
case|case
name|EOpModf
case|:
return|return
literal|"modf"
return|;
case|case
name|EOpMin
case|:
return|return
literal|"min"
return|;
case|case
name|EOpMax
case|:
return|return
literal|"max"
return|;
case|case
name|EOpClamp
case|:
return|return
literal|"clamp"
return|;
case|case
name|EOpMix
case|:
return|return
literal|"mix"
return|;
case|case
name|EOpStep
case|:
return|return
literal|"step"
return|;
case|case
name|EOpSmoothStep
case|:
return|return
literal|"smoothstep"
return|;
case|case
name|EOpIsNan
case|:
return|return
literal|"isnan"
return|;
case|case
name|EOpIsInf
case|:
return|return
literal|"isinf"
return|;
case|case
name|EOpFloatBitsToInt
case|:
return|return
literal|"floatBitsToInt"
return|;
case|case
name|EOpFloatBitsToUint
case|:
return|return
literal|"floatBitsToUint"
return|;
case|case
name|EOpIntBitsToFloat
case|:
return|return
literal|"intBitsToFloat"
return|;
case|case
name|EOpUintBitsToFloat
case|:
return|return
literal|"uintBitsToFloat"
return|;
case|case
name|EOpPackSnorm2x16
case|:
return|return
literal|"packSnorm2x16"
return|;
case|case
name|EOpPackUnorm2x16
case|:
return|return
literal|"packUnorm2x16"
return|;
case|case
name|EOpPackHalf2x16
case|:
return|return
literal|"packHalf2x16"
return|;
case|case
name|EOpUnpackSnorm2x16
case|:
return|return
literal|"unpackSnorm2x16"
return|;
case|case
name|EOpUnpackUnorm2x16
case|:
return|return
literal|"unpackUnorm2x16"
return|;
case|case
name|EOpUnpackHalf2x16
case|:
return|return
literal|"unpackHalf2x16"
return|;
case|case
name|EOpLength
case|:
return|return
literal|"length"
return|;
case|case
name|EOpDistance
case|:
return|return
literal|"distance"
return|;
case|case
name|EOpDot
case|:
return|return
literal|"dot"
return|;
case|case
name|EOpCross
case|:
return|return
literal|"cross"
return|;
case|case
name|EOpNormalize
case|:
return|return
literal|"normalize"
return|;
case|case
name|EOpFaceForward
case|:
return|return
literal|"faceforward"
return|;
case|case
name|EOpReflect
case|:
return|return
literal|"reflect"
return|;
case|case
name|EOpRefract
case|:
return|return
literal|"refract"
return|;
case|case
name|EOpDFdx
case|:
return|return
literal|"dFdx"
return|;
case|case
name|EOpDFdy
case|:
return|return
literal|"dFdy"
return|;
case|case
name|EOpFwidth
case|:
return|return
literal|"fwidth"
return|;
case|case
name|EOpMatrixTimesMatrix
case|:
return|return
literal|"*"
return|;
case|case
name|EOpOuterProduct
case|:
return|return
literal|"outerProduct"
return|;
case|case
name|EOpTranspose
case|:
return|return
literal|"transpose"
return|;
case|case
name|EOpDeterminant
case|:
return|return
literal|"determinant"
return|;
case|case
name|EOpInverse
case|:
return|return
literal|"inverse"
return|;
case|case
name|EOpAny
case|:
return|return
literal|"any"
return|;
case|case
name|EOpAll
case|:
return|return
literal|"all"
return|;
case|case
name|EOpKill
case|:
return|return
literal|"kill"
return|;
case|case
name|EOpReturn
case|:
return|return
literal|"return"
return|;
case|case
name|EOpBreak
case|:
return|return
literal|"break"
return|;
case|case
name|EOpContinue
case|:
return|return
literal|"continue"
return|;
case|case
name|EOpConstructInt
case|:
return|return
literal|"int"
return|;
case|case
name|EOpConstructUInt
case|:
return|return
literal|"uint"
return|;
case|case
name|EOpConstructBool
case|:
return|return
literal|"bool"
return|;
case|case
name|EOpConstructFloat
case|:
return|return
literal|"float"
return|;
case|case
name|EOpConstructVec2
case|:
return|return
literal|"vec2"
return|;
case|case
name|EOpConstructVec3
case|:
return|return
literal|"vec3"
return|;
case|case
name|EOpConstructVec4
case|:
return|return
literal|"vec4"
return|;
case|case
name|EOpConstructBVec2
case|:
return|return
literal|"bvec2"
return|;
case|case
name|EOpConstructBVec3
case|:
return|return
literal|"bvec3"
return|;
case|case
name|EOpConstructBVec4
case|:
return|return
literal|"bvec4"
return|;
case|case
name|EOpConstructIVec2
case|:
return|return
literal|"ivec2"
return|;
case|case
name|EOpConstructIVec3
case|:
return|return
literal|"ivec3"
return|;
case|case
name|EOpConstructIVec4
case|:
return|return
literal|"ivec4"
return|;
case|case
name|EOpConstructUVec2
case|:
return|return
literal|"uvec2"
return|;
case|case
name|EOpConstructUVec3
case|:
return|return
literal|"uvec3"
return|;
case|case
name|EOpConstructUVec4
case|:
return|return
literal|"uvec4"
return|;
case|case
name|EOpConstructMat2
case|:
return|return
literal|"mat2"
return|;
case|case
name|EOpConstructMat2x3
case|:
return|return
literal|"mat2x3"
return|;
case|case
name|EOpConstructMat2x4
case|:
return|return
literal|"mat2x4"
return|;
case|case
name|EOpConstructMat3x2
case|:
return|return
literal|"mat3x2"
return|;
case|case
name|EOpConstructMat3
case|:
return|return
literal|"mat3"
return|;
case|case
name|EOpConstructMat3x4
case|:
return|return
literal|"mat3x4"
return|;
case|case
name|EOpConstructMat4x2
case|:
return|return
literal|"mat4x2"
return|;
case|case
name|EOpConstructMat4x3
case|:
return|return
literal|"mat4x3"
return|;
case|case
name|EOpConstructMat4
case|:
return|return
literal|"mat4"
return|;
comment|// Note: EOpConstructStruct can't be handled here
case|case
name|EOpAssign
case|:
return|return
literal|"="
return|;
case|case
name|EOpInitialize
case|:
return|return
literal|"="
return|;
case|case
name|EOpAddAssign
case|:
return|return
literal|"+="
return|;
case|case
name|EOpSubAssign
case|:
return|return
literal|"-="
return|;
comment|// Fall-through.
case|case
name|EOpMulAssign
case|:
case|case
name|EOpVectorTimesMatrixAssign
case|:
case|case
name|EOpVectorTimesScalarAssign
case|:
case|case
name|EOpMatrixTimesScalarAssign
case|:
case|case
name|EOpMatrixTimesMatrixAssign
case|:
return|return
literal|"*="
return|;
case|case
name|EOpDivAssign
case|:
return|return
literal|"/="
return|;
case|case
name|EOpIModAssign
case|:
return|return
literal|"%="
return|;
case|case
name|EOpBitShiftLeftAssign
case|:
return|return
literal|"<<="
return|;
case|case
name|EOpBitShiftRightAssign
case|:
return|return
literal|">>="
return|;
case|case
name|EOpBitwiseAndAssign
case|:
return|return
literal|"&="
return|;
case|case
name|EOpBitwiseXorAssign
case|:
return|return
literal|"^="
return|;
case|case
name|EOpBitwiseOrAssign
case|:
return|return
literal|"|="
return|;
default|default:
break|break;
block|}
return|return
literal|""
return|;
block|}
end_function
end_unit
