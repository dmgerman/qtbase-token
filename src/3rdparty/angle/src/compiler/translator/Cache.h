begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Cache.h: Implements a cache for various commonly created objects.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMPILER_TRANSLATOR_CACHE_H_
end_ifndef
begin_define
DECL|macro|COMPILER_TRANSLATOR_CACHE_H_
define|#
directive|define
name|COMPILER_TRANSLATOR_CACHE_H_
end_define
begin_include
include|#
directive|include
file|<stdint.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_include
include|#
directive|include
file|<map>
end_include
begin_include
include|#
directive|include
file|"compiler/translator/Types.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/PoolAlloc.h"
end_include
begin_decl_stmt
name|class
name|TCache
block|{
name|public
label|:
specifier|static
name|void
name|initialize
parameter_list|()
function_decl|;
specifier|static
name|void
name|destroy
parameter_list|()
function_decl|;
specifier|static
specifier|const
name|TType
modifier|*
name|getType
parameter_list|(
name|TBasicType
name|basicType
parameter_list|,
name|TPrecision
name|precision
parameter_list|)
block|{
return|return
name|getType
argument_list|(
name|basicType
argument_list|,
name|precision
argument_list|,
name|EvqTemporary
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
return|;
block|}
specifier|static
specifier|const
name|TType
modifier|*
name|getType
parameter_list|(
name|TBasicType
name|basicType
parameter_list|,
name|unsigned
name|char
name|primarySize
init|=
literal|1
parameter_list|,
name|unsigned
name|char
name|secondarySize
init|=
literal|1
parameter_list|)
block|{
return|return
name|getType
argument_list|(
name|basicType
argument_list|,
name|EbpUndefined
argument_list|,
name|EvqGlobal
argument_list|,
name|primarySize
argument_list|,
name|secondarySize
argument_list|)
return|;
block|}
specifier|static
specifier|const
name|TType
modifier|*
name|getType
parameter_list|(
name|TBasicType
name|basicType
parameter_list|,
name|TQualifier
name|qualifier
parameter_list|,
name|unsigned
name|char
name|primarySize
init|=
literal|1
parameter_list|,
name|unsigned
name|char
name|secondarySize
init|=
literal|1
parameter_list|)
block|{
return|return
name|getType
argument_list|(
name|basicType
argument_list|,
name|EbpUndefined
argument_list|,
name|qualifier
argument_list|,
name|primarySize
argument_list|,
name|secondarySize
argument_list|)
return|;
block|}
specifier|static
specifier|const
name|TType
modifier|*
name|getType
parameter_list|(
name|TBasicType
name|basicType
parameter_list|,
name|TPrecision
name|precision
parameter_list|,
name|TQualifier
name|qualifier
parameter_list|,
name|unsigned
name|char
name|primarySize
parameter_list|,
name|unsigned
name|char
name|secondarySize
parameter_list|)
function_decl|;
name|private
label|:
name|TCache
argument_list|()
block|{     }
union|union
name|TypeKey
block|{
name|TypeKey
argument_list|(
argument|TBasicType basicType
argument_list|,
argument|TPrecision precision
argument_list|,
argument|TQualifier qualifier
argument_list|,
argument|unsigned char primarySize
argument_list|,
argument|unsigned char secondarySize
argument_list|)
empty_stmt|;
typedef|typedef
name|uint8_t
name|EnumComponentType
typedef|;
struct|struct
block|{
name|EnumComponentType
name|basicType
decl_stmt|;
name|EnumComponentType
name|precision
decl_stmt|;
name|EnumComponentType
name|qualifier
decl_stmt|;
name|unsigned
name|char
name|primarySize
decl_stmt|;
name|unsigned
name|char
name|secondarySize
decl_stmt|;
block|}
name|components
struct|;
name|uint64_t
name|value
decl_stmt|;
name|bool
name|operator
operator|<
operator|(
specifier|const
name|TypeKey
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|value
operator|<
name|other
operator|.
name|value
return|;
block|}
block|}
union|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|TypeKey
operator|,
specifier|const
name|TType
operator|*
operator|>
name|TypeMap
expr_stmt|;
name|TypeMap
name|mTypes
decl_stmt|;
name|TPoolAllocator
name|mAllocator
decl_stmt|;
specifier|static
name|TCache
modifier|*
name|sCache
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// COMPILER_TRANSLATOR_CACHE_H_
end_comment
end_unit
