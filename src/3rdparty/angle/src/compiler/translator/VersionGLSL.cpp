begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/translator/VersionGLSL.h"
end_include
begin_decl_stmt
DECL|variable|GLSL_VERSION_110
specifier|static
specifier|const
name|int
name|GLSL_VERSION_110
init|=
literal|110
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|GLSL_VERSION_120
specifier|static
specifier|const
name|int
name|GLSL_VERSION_120
init|=
literal|120
decl_stmt|;
end_decl_stmt
begin_comment
comment|// We need to scan for the following:
end_comment
begin_comment
comment|// 1. "invariant" keyword: This can occur in both - vertex and fragment shaders
end_comment
begin_comment
comment|//    but only at the global scope.
end_comment
begin_comment
comment|// 2. "gl_PointCoord" built-in variable: This can only occur in fragment shader
end_comment
begin_comment
comment|//    but inside any scope.
end_comment
begin_comment
comment|// 3. Call to a matrix constructor with another matrix as argument.
end_comment
begin_comment
comment|//    (These constructors were reserved in GLSL version 1.10.)
end_comment
begin_comment
comment|// 4. Arrays as "out" function parameters.
end_comment
begin_comment
comment|//    GLSL spec section 6.1.1: "When calling a function, expressions that do
end_comment
begin_comment
comment|//    not evaluate to l-values cannot be passed to parameters declared as
end_comment
begin_comment
comment|//    out or inout."
end_comment
begin_comment
comment|//    GLSL 1.1 section 5.8: "Other binary or unary expressions,
end_comment
begin_comment
comment|//    non-dereferenced arrays, function names, swizzles with repeated fields,
end_comment
begin_comment
comment|//    and constants cannot be l-values."
end_comment
begin_comment
comment|//    GLSL 1.2 relaxed the restriction on arrays, section 5.8: "Variables that
end_comment
begin_comment
comment|//    are built-in types, entire structures or arrays... are all l-values."
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// TODO(alokp): The following two cases of invariant decalaration get lost
end_comment
begin_comment
comment|// during parsing - they do not get carried over to the intermediate tree.
end_comment
begin_comment
comment|// Handle these cases:
end_comment
begin_comment
comment|// 1. When a pragma is used to force all output variables to be invariant:
end_comment
begin_comment
comment|//    - #pragma STDGL invariant(all)
end_comment
begin_comment
comment|// 2. When a previously decalared or built-in variable is marked invariant:
end_comment
begin_comment
comment|//    - invariant gl_Position;
end_comment
begin_comment
comment|//    - varying vec3 color; invariant color;
end_comment
begin_comment
comment|//
end_comment
begin_constructor
DECL|function|TVersionGLSL
name|TVersionGLSL
operator|::
name|TVersionGLSL
parameter_list|(
name|ShShaderType
name|type
parameter_list|)
member_init_list|:
name|mShaderType
argument_list|(
name|type
argument_list|)
member_init_list|,
name|mVersion
argument_list|(
name|GLSL_VERSION_110
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|visitSymbol
name|void
name|TVersionGLSL
operator|::
name|visitSymbol
parameter_list|(
name|TIntermSymbol
modifier|*
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|->
name|getSymbol
argument_list|()
operator|==
literal|"gl_PointCoord"
condition|)
name|updateVersion
argument_list|(
name|GLSL_VERSION_120
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|visitConstantUnion
name|void
name|TVersionGLSL
operator|::
name|visitConstantUnion
parameter_list|(
name|TIntermConstantUnion
modifier|*
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|visitBinary
name|bool
name|TVersionGLSL
operator|::
name|visitBinary
parameter_list|(
name|Visit
parameter_list|,
name|TIntermBinary
modifier|*
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|visitUnary
name|bool
name|TVersionGLSL
operator|::
name|visitUnary
parameter_list|(
name|Visit
parameter_list|,
name|TIntermUnary
modifier|*
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|visitSelection
name|bool
name|TVersionGLSL
operator|::
name|visitSelection
parameter_list|(
name|Visit
parameter_list|,
name|TIntermSelection
modifier|*
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|visitAggregate
name|bool
name|TVersionGLSL
operator|::
name|visitAggregate
parameter_list|(
name|Visit
parameter_list|,
name|TIntermAggregate
modifier|*
name|node
parameter_list|)
block|{
name|bool
name|visitChildren
init|=
literal|true
decl_stmt|;
switch|switch
condition|(
name|node
operator|->
name|getOp
argument_list|()
condition|)
block|{
case|case
name|EOpSequence
case|:
comment|// We need to visit sequence children to get to global or inner scope.
name|visitChildren
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|EOpDeclaration
case|:
block|{
specifier|const
name|TIntermSequence
modifier|&
name|sequence
init|=
name|node
operator|->
name|getSequence
argument_list|()
decl_stmt|;
name|TQualifier
name|qualifier
init|=
name|sequence
operator|.
name|front
argument_list|()
operator|->
name|getAsTyped
argument_list|()
operator|->
name|getQualifier
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|qualifier
operator|==
name|EvqInvariantVaryingIn
operator|)
operator|||
operator|(
name|qualifier
operator|==
name|EvqInvariantVaryingOut
operator|)
condition|)
block|{
name|updateVersion
argument_list|(
name|GLSL_VERSION_120
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|EOpParameters
case|:
block|{
specifier|const
name|TIntermSequence
modifier|&
name|params
init|=
name|node
operator|->
name|getSequence
argument_list|()
decl_stmt|;
for|for
control|(
name|TIntermSequence
operator|::
name|const_iterator
name|iter
init|=
name|params
operator|.
name|begin
argument_list|()
init|;
name|iter
operator|!=
name|params
operator|.
name|end
argument_list|()
condition|;
operator|++
name|iter
control|)
block|{
specifier|const
name|TIntermTyped
modifier|*
name|param
init|=
operator|(
operator|*
name|iter
operator|)
operator|->
name|getAsTyped
argument_list|()
decl_stmt|;
if|if
condition|(
name|param
operator|->
name|isArray
argument_list|()
condition|)
block|{
name|TQualifier
name|qualifier
init|=
name|param
operator|->
name|getQualifier
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|qualifier
operator|==
name|EvqOut
operator|)
operator|||
operator|(
name|qualifier
operator|==
name|EvqInOut
operator|)
condition|)
block|{
name|updateVersion
argument_list|(
name|GLSL_VERSION_120
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// Fully processed. No need to visit children.
name|visitChildren
operator|=
literal|false
expr_stmt|;
break|break;
block|}
case|case
name|EOpConstructMat2
case|:
case|case
name|EOpConstructMat3
case|:
case|case
name|EOpConstructMat4
case|:
block|{
specifier|const
name|TIntermSequence
modifier|&
name|sequence
init|=
name|node
operator|->
name|getSequence
argument_list|()
decl_stmt|;
if|if
condition|(
name|sequence
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|TIntermTyped
modifier|*
name|typed
init|=
name|sequence
operator|.
name|front
argument_list|()
operator|->
name|getAsTyped
argument_list|()
decl_stmt|;
if|if
condition|(
name|typed
operator|&&
name|typed
operator|->
name|isMatrix
argument_list|()
condition|)
block|{
name|updateVersion
argument_list|(
name|GLSL_VERSION_120
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
default|default:
break|break;
block|}
return|return
name|visitChildren
return|;
block|}
end_function
begin_function
DECL|function|visitLoop
name|bool
name|TVersionGLSL
operator|::
name|visitLoop
parameter_list|(
name|Visit
parameter_list|,
name|TIntermLoop
modifier|*
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|visitBranch
name|bool
name|TVersionGLSL
operator|::
name|visitBranch
parameter_list|(
name|Visit
parameter_list|,
name|TIntermBranch
modifier|*
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|updateVersion
name|void
name|TVersionGLSL
operator|::
name|updateVersion
parameter_list|(
name|int
name|version
parameter_list|)
block|{
name|mVersion
operator|=
name|std
operator|::
name|max
argument_list|(
name|version
argument_list|,
name|mVersion
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
