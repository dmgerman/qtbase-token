begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// blocklayout.cpp:
end_comment
begin_comment
comment|//   Implementation for block layout classes and methods.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/translator/blocklayout.h"
end_include
begin_include
include|#
directive|include
file|"common/mathutil.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_namespace
DECL|namespace|sh
namespace|namespace
name|sh
block|{
DECL|function|BlockLayoutEncoder
name|BlockLayoutEncoder
operator|::
name|BlockLayoutEncoder
parameter_list|()
member_init_list|:
name|mCurrentOffset
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|encodeType
name|BlockMemberInfo
name|BlockLayoutEncoder
operator|::
name|encodeType
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|unsigned
name|int
name|arraySize
parameter_list|,
name|bool
name|isRowMajorMatrix
parameter_list|)
block|{
name|int
name|arrayStride
decl_stmt|;
name|int
name|matrixStride
decl_stmt|;
name|getBlockLayoutInfo
argument_list|(
name|type
argument_list|,
name|arraySize
argument_list|,
name|isRowMajorMatrix
argument_list|,
operator|&
name|arrayStride
argument_list|,
operator|&
name|matrixStride
argument_list|)
expr_stmt|;
specifier|const
name|BlockMemberInfo
name|memberInfo
argument_list|(
name|mCurrentOffset
operator|*
name|BytesPerComponent
argument_list|,
name|arrayStride
operator|*
name|BytesPerComponent
argument_list|,
name|matrixStride
operator|*
name|BytesPerComponent
argument_list|,
name|isRowMajorMatrix
argument_list|)
decl_stmt|;
name|advanceOffset
argument_list|(
name|type
argument_list|,
name|arraySize
argument_list|,
name|isRowMajorMatrix
argument_list|,
name|arrayStride
argument_list|,
name|matrixStride
argument_list|)
expr_stmt|;
return|return
name|memberInfo
return|;
block|}
comment|// static
DECL|function|getBlockRegister
name|size_t
name|BlockLayoutEncoder
operator|::
name|getBlockRegister
parameter_list|(
specifier|const
name|BlockMemberInfo
modifier|&
name|info
parameter_list|)
block|{
return|return
operator|(
name|info
operator|.
name|offset
operator|/
name|BytesPerComponent
operator|)
operator|/
name|ComponentsPerRegister
return|;
block|}
comment|// static
DECL|function|getBlockRegisterElement
name|size_t
name|BlockLayoutEncoder
operator|::
name|getBlockRegisterElement
parameter_list|(
specifier|const
name|BlockMemberInfo
modifier|&
name|info
parameter_list|)
block|{
return|return
operator|(
name|info
operator|.
name|offset
operator|/
name|BytesPerComponent
operator|)
operator|%
name|ComponentsPerRegister
return|;
block|}
DECL|function|nextRegister
name|void
name|BlockLayoutEncoder
operator|::
name|nextRegister
parameter_list|()
block|{
name|mCurrentOffset
operator|=
name|rx
operator|::
name|roundUp
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|mCurrentOffset
argument_list|,
name|ComponentsPerRegister
argument_list|)
expr_stmt|;
block|}
DECL|function|Std140BlockEncoder
name|Std140BlockEncoder
operator|::
name|Std140BlockEncoder
parameter_list|()
block|{ }
DECL|function|enterAggregateType
name|void
name|Std140BlockEncoder
operator|::
name|enterAggregateType
parameter_list|()
block|{
name|nextRegister
argument_list|()
expr_stmt|;
block|}
DECL|function|exitAggregateType
name|void
name|Std140BlockEncoder
operator|::
name|exitAggregateType
parameter_list|()
block|{
name|nextRegister
argument_list|()
expr_stmt|;
block|}
DECL|function|getBlockLayoutInfo
name|void
name|Std140BlockEncoder
operator|::
name|getBlockLayoutInfo
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|unsigned
name|int
name|arraySize
parameter_list|,
name|bool
name|isRowMajorMatrix
parameter_list|,
name|int
modifier|*
name|arrayStrideOut
parameter_list|,
name|int
modifier|*
name|matrixStrideOut
parameter_list|)
block|{
comment|// We assume we are only dealing with 4 byte components (no doubles or half-words currently)
name|ASSERT
argument_list|(
name|gl
operator|::
name|VariableComponentSize
argument_list|(
name|gl
operator|::
name|VariableComponentType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|==
name|BytesPerComponent
argument_list|)
expr_stmt|;
name|size_t
name|baseAlignment
init|=
literal|0
decl_stmt|;
name|int
name|matrixStride
init|=
literal|0
decl_stmt|;
name|int
name|arrayStride
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|gl
operator|::
name|IsMatrixType
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|baseAlignment
operator|=
name|ComponentsPerRegister
expr_stmt|;
name|matrixStride
operator|=
name|ComponentsPerRegister
expr_stmt|;
if|if
condition|(
name|arraySize
operator|>
literal|0
condition|)
block|{
specifier|const
name|int
name|numRegisters
init|=
name|gl
operator|::
name|MatrixRegisterCount
argument_list|(
name|type
argument_list|,
name|isRowMajorMatrix
argument_list|)
decl_stmt|;
name|arrayStride
operator|=
name|ComponentsPerRegister
operator|*
name|numRegisters
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|arraySize
operator|>
literal|0
condition|)
block|{
name|baseAlignment
operator|=
name|ComponentsPerRegister
expr_stmt|;
name|arrayStride
operator|=
name|ComponentsPerRegister
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|int
name|numComponents
init|=
name|gl
operator|::
name|VariableComponentCount
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|baseAlignment
operator|=
operator|(
name|numComponents
operator|==
literal|3
condition|?
literal|4u
else|:
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|numComponents
argument_list|)
operator|)
expr_stmt|;
block|}
name|mCurrentOffset
operator|=
name|rx
operator|::
name|roundUp
argument_list|(
name|mCurrentOffset
argument_list|,
name|baseAlignment
argument_list|)
expr_stmt|;
operator|*
name|matrixStrideOut
operator|=
name|matrixStride
expr_stmt|;
operator|*
name|arrayStrideOut
operator|=
name|arrayStride
expr_stmt|;
block|}
DECL|function|advanceOffset
name|void
name|Std140BlockEncoder
operator|::
name|advanceOffset
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|unsigned
name|int
name|arraySize
parameter_list|,
name|bool
name|isRowMajorMatrix
parameter_list|,
name|int
name|arrayStride
parameter_list|,
name|int
name|matrixStride
parameter_list|)
block|{
if|if
condition|(
name|arraySize
operator|>
literal|0
condition|)
block|{
name|mCurrentOffset
operator|+=
name|arrayStride
operator|*
name|arraySize
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|gl
operator|::
name|IsMatrixType
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|ASSERT
argument_list|(
name|matrixStride
operator|==
name|ComponentsPerRegister
argument_list|)
expr_stmt|;
specifier|const
name|int
name|numRegisters
init|=
name|gl
operator|::
name|MatrixRegisterCount
argument_list|(
name|type
argument_list|,
name|isRowMajorMatrix
argument_list|)
decl_stmt|;
name|mCurrentOffset
operator|+=
name|ComponentsPerRegister
operator|*
name|numRegisters
expr_stmt|;
block|}
else|else
block|{
name|mCurrentOffset
operator|+=
name|gl
operator|::
name|VariableComponentCount
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_namespace
end_unit
