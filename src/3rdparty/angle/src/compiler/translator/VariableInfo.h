begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2011 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMPILER_TRANSLATOR_VARIABLEINFO_H_
end_ifndef
begin_define
DECL|macro|COMPILER_TRANSLATOR_VARIABLEINFO_H_
define|#
directive|define
name|COMPILER_TRANSLATOR_VARIABLEINFO_H_
end_define
begin_include
include|#
directive|include
file|<GLSLANG/ShaderLang.h>
end_include
begin_include
include|#
directive|include
file|"compiler/translator/IntermNode.h"
end_include
begin_decl_stmt
DECL|variable|TSymbolTable
name|class
name|TSymbolTable
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|namespace
name|sh
block|{
comment|// Traverses intermediate tree to collect all attributes, uniforms, varyings.
name|class
name|CollectVariables
range|:
name|public
name|TIntermTraverser
block|{
name|public
operator|:
name|CollectVariables
argument_list|(
argument|std::vector<Attribute> *attribs
argument_list|,
argument|std::vector<OutputVariable> *outputVariables
argument_list|,
argument|std::vector<Uniform> *uniforms
argument_list|,
argument|std::vector<Varying> *varyings
argument_list|,
argument|std::vector<InterfaceBlock> *interfaceBlocks
argument_list|,
argument|ShHashFunction64 hashFunction
argument_list|,
argument|const TSymbolTable&symbolTable
argument_list|)
block|;
name|void
name|visitSymbol
argument_list|(
argument|TIntermSymbol *symbol
argument_list|)
name|override
block|;
name|bool
name|visitAggregate
argument_list|(
argument|Visit
argument_list|,
argument|TIntermAggregate *node
argument_list|)
name|override
block|;
name|bool
name|visitBinary
argument_list|(
argument|Visit visit
argument_list|,
argument|TIntermBinary *binaryNode
argument_list|)
name|override
block|;
name|private
operator|:
name|template
operator|<
name|typename
name|VarT
operator|>
name|void
name|visitVariable
argument_list|(
argument|const TIntermSymbol *variable
argument_list|,
argument|std::vector<VarT> *infoList
argument_list|)
specifier|const
block|;
name|template
operator|<
name|typename
name|VarT
operator|>
name|void
name|visitInfoList
argument_list|(
argument|const TIntermSequence&sequence
argument_list|,
argument|std::vector<VarT> *infoList
argument_list|)
specifier|const
block|;
name|std
operator|::
name|vector
operator|<
name|Attribute
operator|>
operator|*
name|mAttribs
block|;
name|std
operator|::
name|vector
operator|<
name|OutputVariable
operator|>
operator|*
name|mOutputVariables
block|;
name|std
operator|::
name|vector
operator|<
name|Uniform
operator|>
operator|*
name|mUniforms
block|;
name|std
operator|::
name|vector
operator|<
name|Varying
operator|>
operator|*
name|mVaryings
block|;
name|std
operator|::
name|vector
operator|<
name|InterfaceBlock
operator|>
operator|*
name|mInterfaceBlocks
block|;
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
block|,
name|InterfaceBlockField
operator|*
operator|>
name|mInterfaceBlockFields
block|;
name|bool
name|mDepthRangeAdded
block|;
name|bool
name|mPointCoordAdded
block|;
name|bool
name|mFrontFacingAdded
block|;
name|bool
name|mFragCoordAdded
block|;
name|bool
name|mInstanceIDAdded
block|;
name|bool
name|mPositionAdded
block|;
name|bool
name|mPointSizeAdded
block|;
name|bool
name|mLastFragDataAdded
block|;
name|bool
name|mFragColorAdded
block|;
name|bool
name|mFragDataAdded
block|;
name|bool
name|mFragDepthEXTAdded
block|;
name|bool
name|mFragDepthAdded
block|;
name|bool
name|mSecondaryFragColorEXTAdded
block|;
name|bool
name|mSecondaryFragDataEXTAdded
block|;
name|ShHashFunction64
name|mHashFunction
block|;
specifier|const
name|TSymbolTable
operator|&
name|mSymbolTable
block|; }
decl_stmt|;
comment|// Expand struct uniforms to flattened lists of split variables
name|void
name|ExpandUniforms
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|Uniform
operator|>
operator|&
name|compact
argument_list|,
name|std
operator|::
name|vector
operator|<
name|ShaderVariable
operator|>
operator|*
name|expanded
argument_list|)
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// COMPILER_TRANSLATOR_VARIABLEINFO_H_
end_comment
end_unit
