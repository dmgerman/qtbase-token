begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2010 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/translator/VariableInfo.h"
end_include
begin_namespace
namespace|namespace
block|{
DECL|function|arrayBrackets
name|TString
name|arrayBrackets
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|TStringStream
name|stream
decl_stmt|;
name|stream
operator|<<
literal|"["
operator|<<
name|index
operator|<<
literal|"]"
expr_stmt|;
return|return
name|stream
operator|.
name|str
argument_list|()
return|;
block|}
comment|// Returns the data type for an attribute, uniform, or varying.
DECL|function|getVariableDataType
name|ShDataType
name|getVariableDataType
parameter_list|(
specifier|const
name|TType
modifier|&
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
operator|.
name|getBasicType
argument_list|()
condition|)
block|{
case|case
name|EbtFloat
case|:
if|if
condition|(
name|type
operator|.
name|isMatrix
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|type
operator|.
name|getNominalSize
argument_list|()
condition|)
block|{
case|case
literal|2
case|:
return|return
name|SH_FLOAT_MAT2
return|;
case|case
literal|3
case|:
return|return
name|SH_FLOAT_MAT3
return|;
case|case
literal|4
case|:
return|return
name|SH_FLOAT_MAT4
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|isVector
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|type
operator|.
name|getNominalSize
argument_list|()
condition|)
block|{
case|case
literal|2
case|:
return|return
name|SH_FLOAT_VEC2
return|;
case|case
literal|3
case|:
return|return
name|SH_FLOAT_VEC3
return|;
case|case
literal|4
case|:
return|return
name|SH_FLOAT_VEC4
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
name|SH_FLOAT
return|;
block|}
case|case
name|EbtInt
case|:
if|if
condition|(
name|type
operator|.
name|isMatrix
argument_list|()
condition|)
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|isVector
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|type
operator|.
name|getNominalSize
argument_list|()
condition|)
block|{
case|case
literal|2
case|:
return|return
name|SH_INT_VEC2
return|;
case|case
literal|3
case|:
return|return
name|SH_INT_VEC3
return|;
case|case
literal|4
case|:
return|return
name|SH_INT_VEC4
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
name|SH_INT
return|;
block|}
case|case
name|EbtBool
case|:
if|if
condition|(
name|type
operator|.
name|isMatrix
argument_list|()
condition|)
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|isVector
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|type
operator|.
name|getNominalSize
argument_list|()
condition|)
block|{
case|case
literal|2
case|:
return|return
name|SH_BOOL_VEC2
return|;
case|case
literal|3
case|:
return|return
name|SH_BOOL_VEC3
return|;
case|case
literal|4
case|:
return|return
name|SH_BOOL_VEC4
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
name|SH_BOOL
return|;
block|}
case|case
name|EbtSampler2D
case|:
return|return
name|SH_SAMPLER_2D
return|;
case|case
name|EbtSamplerCube
case|:
return|return
name|SH_SAMPLER_CUBE
return|;
case|case
name|EbtSamplerExternalOES
case|:
return|return
name|SH_SAMPLER_EXTERNAL_OES
return|;
case|case
name|EbtSampler2DRect
case|:
return|return
name|SH_SAMPLER_2D_RECT_ARB
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|SH_NONE
return|;
block|}
name|void
name|getBuiltInVariableInfo
parameter_list|(
specifier|const
name|TType
modifier|&
name|type
parameter_list|,
specifier|const
name|TString
modifier|&
name|name
parameter_list|,
specifier|const
name|TString
modifier|&
name|mappedName
parameter_list|,
name|TVariableInfoList
modifier|&
name|infoList
parameter_list|)
function_decl|;
name|void
name|getUserDefinedVariableInfo
parameter_list|(
specifier|const
name|TType
modifier|&
name|type
parameter_list|,
specifier|const
name|TString
modifier|&
name|name
parameter_list|,
specifier|const
name|TString
modifier|&
name|mappedName
parameter_list|,
name|TVariableInfoList
modifier|&
name|infoList
parameter_list|,
name|ShHashFunction64
name|hashFunction
parameter_list|)
function_decl|;
comment|// Returns info for an attribute, uniform, or varying.
DECL|function|getVariableInfo
name|void
name|getVariableInfo
parameter_list|(
specifier|const
name|TType
modifier|&
name|type
parameter_list|,
specifier|const
name|TString
modifier|&
name|name
parameter_list|,
specifier|const
name|TString
modifier|&
name|mappedName
parameter_list|,
name|TVariableInfoList
modifier|&
name|infoList
parameter_list|,
name|ShHashFunction64
name|hashFunction
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|getBasicType
argument_list|()
operator|==
name|EbtStruct
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|isArray
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|type
operator|.
name|getArraySize
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|TString
name|lname
init|=
name|name
operator|+
name|arrayBrackets
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|TString
name|lmappedName
init|=
name|mappedName
operator|+
name|arrayBrackets
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|getUserDefinedVariableInfo
argument_list|(
name|type
argument_list|,
name|lname
argument_list|,
name|lmappedName
argument_list|,
name|infoList
argument_list|,
name|hashFunction
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getUserDefinedVariableInfo
argument_list|(
name|type
argument_list|,
name|name
argument_list|,
name|mappedName
argument_list|,
name|infoList
argument_list|,
name|hashFunction
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getBuiltInVariableInfo
argument_list|(
name|type
argument_list|,
name|name
argument_list|,
name|mappedName
argument_list|,
name|infoList
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|getBuiltInVariableInfo
name|void
name|getBuiltInVariableInfo
parameter_list|(
specifier|const
name|TType
modifier|&
name|type
parameter_list|,
specifier|const
name|TString
modifier|&
name|name
parameter_list|,
specifier|const
name|TString
modifier|&
name|mappedName
parameter_list|,
name|TVariableInfoList
modifier|&
name|infoList
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|type
operator|.
name|getBasicType
argument_list|()
operator|!=
name|EbtStruct
argument_list|)
expr_stmt|;
name|TVariableInfo
name|varInfo
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|varInfo
operator|.
name|name
operator|=
operator|(
name|name
operator|+
literal|"[0]"
operator|)
operator|.
name|c_str
argument_list|()
expr_stmt|;
name|varInfo
operator|.
name|mappedName
operator|=
operator|(
name|mappedName
operator|+
literal|"[0]"
operator|)
operator|.
name|c_str
argument_list|()
expr_stmt|;
name|varInfo
operator|.
name|size
operator|=
name|type
operator|.
name|getArraySize
argument_list|()
expr_stmt|;
name|varInfo
operator|.
name|isArray
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|varInfo
operator|.
name|name
operator|=
name|name
operator|.
name|c_str
argument_list|()
expr_stmt|;
name|varInfo
operator|.
name|mappedName
operator|=
name|mappedName
operator|.
name|c_str
argument_list|()
expr_stmt|;
name|varInfo
operator|.
name|size
operator|=
literal|1
expr_stmt|;
name|varInfo
operator|.
name|isArray
operator|=
literal|false
expr_stmt|;
block|}
name|varInfo
operator|.
name|precision
operator|=
name|type
operator|.
name|getPrecision
argument_list|()
expr_stmt|;
name|varInfo
operator|.
name|type
operator|=
name|getVariableDataType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|infoList
operator|.
name|push_back
argument_list|(
name|varInfo
argument_list|)
expr_stmt|;
block|}
DECL|function|getUserDefinedVariableInfo
name|void
name|getUserDefinedVariableInfo
parameter_list|(
specifier|const
name|TType
modifier|&
name|type
parameter_list|,
specifier|const
name|TString
modifier|&
name|name
parameter_list|,
specifier|const
name|TString
modifier|&
name|mappedName
parameter_list|,
name|TVariableInfoList
modifier|&
name|infoList
parameter_list|,
name|ShHashFunction64
name|hashFunction
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|type
operator|.
name|getBasicType
argument_list|()
operator|==
name|EbtStruct
argument_list|)
expr_stmt|;
specifier|const
name|TFieldList
modifier|&
name|fields
init|=
name|type
operator|.
name|getStruct
argument_list|()
operator|->
name|fields
argument_list|()
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|TType
modifier|&
name|fieldType
init|=
operator|*
operator|(
name|fields
index|[
name|i
index|]
operator|->
name|type
argument_list|()
operator|)
decl_stmt|;
specifier|const
name|TString
modifier|&
name|fieldName
init|=
name|fields
index|[
name|i
index|]
operator|->
name|name
argument_list|()
decl_stmt|;
name|getVariableInfo
argument_list|(
name|fieldType
argument_list|,
name|name
operator|+
literal|"."
operator|+
name|fieldName
argument_list|,
name|mappedName
operator|+
literal|"."
operator|+
name|TIntermTraverser
operator|::
name|hash
argument_list|(
name|fieldName
argument_list|,
name|hashFunction
argument_list|)
argument_list|,
name|infoList
argument_list|,
name|hashFunction
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|findVariable
name|TVariableInfo
modifier|*
name|findVariable
parameter_list|(
specifier|const
name|TType
modifier|&
name|type
parameter_list|,
specifier|const
name|TString
modifier|&
name|name
parameter_list|,
name|TVariableInfoList
modifier|&
name|infoList
parameter_list|)
block|{
comment|// TODO(zmo): optimize this function.
name|TString
name|myName
init|=
name|name
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isArray
argument_list|()
condition|)
name|myName
operator|+=
literal|"[0]"
expr_stmt|;
for|for
control|(
name|size_t
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|infoList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|ii
control|)
block|{
if|if
condition|(
name|infoList
index|[
name|ii
index|]
operator|.
name|name
operator|.
name|c_str
argument_list|()
operator|==
name|myName
condition|)
return|return
operator|&
operator|(
name|infoList
index|[
name|ii
index|]
operator|)
return|;
block|}
return|return
name|NULL
return|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace anonymous
end_comment
begin_constructor
DECL|function|TVariableInfo
name|TVariableInfo
operator|::
name|TVariableInfo
parameter_list|()
member_init_list|:
name|type
argument_list|(
name|SH_NONE
argument_list|)
member_init_list|,
name|size
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|isArray
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|precision
argument_list|(
name|EbpUndefined
argument_list|)
member_init_list|,
name|staticUse
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|TVariableInfo
name|TVariableInfo
operator|::
name|TVariableInfo
parameter_list|(
name|ShDataType
name|type
parameter_list|,
name|int
name|size
parameter_list|)
member_init_list|:
name|type
argument_list|(
name|type
argument_list|)
member_init_list|,
name|size
argument_list|(
name|size
argument_list|)
member_init_list|,
name|isArray
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|precision
argument_list|(
name|EbpUndefined
argument_list|)
member_init_list|,
name|staticUse
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|CollectVariables
name|CollectVariables
operator|::
name|CollectVariables
parameter_list|(
name|TVariableInfoList
modifier|&
name|attribs
parameter_list|,
name|TVariableInfoList
modifier|&
name|uniforms
parameter_list|,
name|TVariableInfoList
modifier|&
name|varyings
parameter_list|,
name|ShHashFunction64
name|hashFunction
parameter_list|)
member_init_list|:
name|mAttribs
argument_list|(
name|attribs
argument_list|)
member_init_list|,
name|mUniforms
argument_list|(
name|uniforms
argument_list|)
member_init_list|,
name|mVaryings
argument_list|(
name|varyings
argument_list|)
member_init_list|,
name|mPointCoordAdded
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mFrontFacingAdded
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mFragCoordAdded
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mHashFunction
argument_list|(
name|hashFunction
argument_list|)
block|{ }
end_constructor
begin_comment
comment|// We want to check whether a uniform/varying is statically used
end_comment
begin_comment
comment|// because we only count the used ones in packing computing.
end_comment
begin_comment
comment|// Also, gl_FragCoord, gl_PointCoord, and gl_FrontFacing count
end_comment
begin_comment
comment|// toward varying counting if they are statically used in a fragment
end_comment
begin_comment
comment|// shader.
end_comment
begin_function
DECL|function|visitSymbol
name|void
name|CollectVariables
operator|::
name|visitSymbol
parameter_list|(
name|TIntermSymbol
modifier|*
name|symbol
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|symbol
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|TVariableInfo
modifier|*
name|var
init|=
name|NULL
decl_stmt|;
switch|switch
condition|(
name|symbol
operator|->
name|getQualifier
argument_list|()
condition|)
block|{
case|case
name|EvqVaryingOut
case|:
case|case
name|EvqInvariantVaryingOut
case|:
case|case
name|EvqVaryingIn
case|:
case|case
name|EvqInvariantVaryingIn
case|:
name|var
operator|=
name|findVariable
argument_list|(
name|symbol
operator|->
name|getType
argument_list|()
argument_list|,
name|symbol
operator|->
name|getSymbol
argument_list|()
argument_list|,
name|mVaryings
argument_list|)
expr_stmt|;
break|break;
case|case
name|EvqUniform
case|:
name|var
operator|=
name|findVariable
argument_list|(
name|symbol
operator|->
name|getType
argument_list|()
argument_list|,
name|symbol
operator|->
name|getSymbol
argument_list|()
argument_list|,
name|mUniforms
argument_list|)
expr_stmt|;
break|break;
case|case
name|EvqFragCoord
case|:
if|if
condition|(
operator|!
name|mFragCoordAdded
condition|)
block|{
name|TVariableInfo
name|info
decl_stmt|;
name|info
operator|.
name|name
operator|=
literal|"gl_FragCoord"
expr_stmt|;
name|info
operator|.
name|mappedName
operator|=
literal|"gl_FragCoord"
expr_stmt|;
name|info
operator|.
name|type
operator|=
name|SH_FLOAT_VEC4
expr_stmt|;
name|info
operator|.
name|size
operator|=
literal|1
expr_stmt|;
name|info
operator|.
name|precision
operator|=
name|EbpMedium
expr_stmt|;
comment|// Use mediump as it doesn't really matter.
name|info
operator|.
name|staticUse
operator|=
literal|true
expr_stmt|;
name|mVaryings
operator|.
name|push_back
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|mFragCoordAdded
operator|=
literal|true
expr_stmt|;
block|}
return|return;
case|case
name|EvqFrontFacing
case|:
if|if
condition|(
operator|!
name|mFrontFacingAdded
condition|)
block|{
name|TVariableInfo
name|info
decl_stmt|;
name|info
operator|.
name|name
operator|=
literal|"gl_FrontFacing"
expr_stmt|;
name|info
operator|.
name|mappedName
operator|=
literal|"gl_FrontFacing"
expr_stmt|;
name|info
operator|.
name|type
operator|=
name|SH_BOOL
expr_stmt|;
name|info
operator|.
name|size
operator|=
literal|1
expr_stmt|;
name|info
operator|.
name|precision
operator|=
name|EbpUndefined
expr_stmt|;
name|info
operator|.
name|staticUse
operator|=
literal|true
expr_stmt|;
name|mVaryings
operator|.
name|push_back
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|mFrontFacingAdded
operator|=
literal|true
expr_stmt|;
block|}
return|return;
case|case
name|EvqPointCoord
case|:
if|if
condition|(
operator|!
name|mPointCoordAdded
condition|)
block|{
name|TVariableInfo
name|info
decl_stmt|;
name|info
operator|.
name|name
operator|=
literal|"gl_PointCoord"
expr_stmt|;
name|info
operator|.
name|mappedName
operator|=
literal|"gl_PointCoord"
expr_stmt|;
name|info
operator|.
name|type
operator|=
name|SH_FLOAT_VEC2
expr_stmt|;
name|info
operator|.
name|size
operator|=
literal|1
expr_stmt|;
name|info
operator|.
name|precision
operator|=
name|EbpMedium
expr_stmt|;
comment|// Use mediump as it doesn't really matter.
name|info
operator|.
name|staticUse
operator|=
literal|true
expr_stmt|;
name|mVaryings
operator|.
name|push_back
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|mPointCoordAdded
operator|=
literal|true
expr_stmt|;
block|}
return|return;
default|default:
break|break;
block|}
if|if
condition|(
name|var
condition|)
name|var
operator|->
name|staticUse
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|visitAggregate
name|bool
name|CollectVariables
operator|::
name|visitAggregate
parameter_list|(
name|Visit
parameter_list|,
name|TIntermAggregate
modifier|*
name|node
parameter_list|)
block|{
name|bool
name|visitChildren
init|=
literal|true
decl_stmt|;
switch|switch
condition|(
name|node
operator|->
name|getOp
argument_list|()
condition|)
block|{
case|case
name|EOpDeclaration
case|:
block|{
specifier|const
name|TIntermSequence
modifier|&
name|sequence
init|=
name|node
operator|->
name|getSequence
argument_list|()
decl_stmt|;
name|TQualifier
name|qualifier
init|=
name|sequence
operator|.
name|front
argument_list|()
operator|->
name|getAsTyped
argument_list|()
operator|->
name|getQualifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|qualifier
operator|==
name|EvqAttribute
operator|||
name|qualifier
operator|==
name|EvqUniform
operator|||
name|qualifier
operator|==
name|EvqVaryingIn
operator|||
name|qualifier
operator|==
name|EvqVaryingOut
operator|||
name|qualifier
operator|==
name|EvqInvariantVaryingIn
operator|||
name|qualifier
operator|==
name|EvqInvariantVaryingOut
condition|)
block|{
name|TVariableInfoList
modifier|&
name|infoList
init|=
name|qualifier
operator|==
name|EvqAttribute
condition|?
name|mAttribs
else|:
operator|(
name|qualifier
operator|==
name|EvqUniform
condition|?
name|mUniforms
else|:
name|mVaryings
operator|)
decl_stmt|;
for|for
control|(
name|TIntermSequence
operator|::
name|const_iterator
name|i
init|=
name|sequence
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|sequence
operator|.
name|end
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|TIntermSymbol
modifier|*
name|variable
init|=
operator|(
operator|*
name|i
operator|)
operator|->
name|getAsSymbolNode
argument_list|()
decl_stmt|;
comment|// The only case in which the sequence will not contain a
comment|// TIntermSymbol node is initialization. It will contain a
comment|// TInterBinary node in that case. Since attributes, uniforms,
comment|// and varyings cannot be initialized in a shader, we must have
comment|// only TIntermSymbol nodes in the sequence.
name|ASSERT
argument_list|(
name|variable
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|TString
name|processedSymbol
decl_stmt|;
if|if
condition|(
name|mHashFunction
operator|==
name|NULL
condition|)
name|processedSymbol
operator|=
name|variable
operator|->
name|getSymbol
argument_list|()
expr_stmt|;
else|else
name|processedSymbol
operator|=
name|TIntermTraverser
operator|::
name|hash
argument_list|(
name|variable
operator|->
name|getOriginalSymbol
argument_list|()
argument_list|,
name|mHashFunction
argument_list|)
expr_stmt|;
name|getVariableInfo
argument_list|(
name|variable
operator|->
name|getType
argument_list|()
argument_list|,
name|variable
operator|->
name|getOriginalSymbol
argument_list|()
argument_list|,
name|processedSymbol
argument_list|,
name|infoList
argument_list|,
name|mHashFunction
argument_list|)
expr_stmt|;
name|visitChildren
operator|=
literal|false
expr_stmt|;
block|}
block|}
break|break;
block|}
default|default:
break|break;
block|}
return|return
name|visitChildren
return|;
block|}
end_function
end_unit
