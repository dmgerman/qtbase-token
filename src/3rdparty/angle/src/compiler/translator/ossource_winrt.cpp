begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2010 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/translator/osinclude.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// This file contains contains Windows Runtime specific functions
end_comment
begin_comment
comment|//
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_OS_WINRT
argument_list|)
end_if
begin_error
error|#
directive|error
error|Trying to build a WinRT specific file in a non-WinRT build.
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<vector>
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Thread Local Storage Operations
end_comment
begin_comment
comment|//
end_comment
begin_macro
DECL|variable|tls
name|__declspec
argument_list|(
argument|thread
argument_list|)
end_macro
begin_decl_stmt
DECL|variable|tls
name|std
operator|::
name|vector
argument_list|<
name|void
modifier|*
argument_list|>
modifier|*
name|tls
init|=
literal|nullptr
decl_stmt|;
end_decl_stmt
begin_macro
DECL|variable|freeIndices
name|__declspec
argument_list|(
argument|thread
argument_list|)
end_macro
begin_decl_stmt
DECL|variable|freeIndices
name|std
operator|::
name|vector
argument_list|<
name|OS_TLSIndex
argument_list|>
modifier|*
name|freeIndices
init|=
literal|nullptr
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|OS_AllocTLSIndex
name|OS_TLSIndex
name|OS_AllocTLSIndex
parameter_list|()
block|{
if|if
condition|(
operator|!
name|tls
condition|)
name|tls
operator|=
operator|new
name|std
operator|::
name|vector
argument_list|<
name|void
operator|*
argument_list|>
expr_stmt|;
if|if
condition|(
name|freeIndices
operator|&&
operator|!
name|freeIndices
operator|->
name|empty
argument_list|()
condition|)
block|{
name|OS_TLSIndex
name|index
init|=
name|freeIndices
operator|->
name|back
argument_list|()
decl_stmt|;
name|freeIndices
operator|->
name|pop_back
argument_list|()
expr_stmt|;
return|return
name|index
return|;
block|}
else|else
block|{
name|tls
operator|->
name|push_back
argument_list|(
literal|nullptr
argument_list|)
expr_stmt|;
return|return
name|tls
operator|->
name|size
argument_list|()
operator|-
literal|1
return|;
block|}
block|}
end_function
begin_function
DECL|function|OS_GetTLSValue
name|void
modifier|*
name|OS_GetTLSValue
parameter_list|(
name|OS_TLSIndex
name|nIndex
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|nIndex
operator|!=
name|OS_INVALID_TLS_INDEX
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|tls
argument_list|)
expr_stmt|;
return|return
name|tls
operator|->
name|at
argument_list|(
name|nIndex
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|OS_SetTLSValue
name|bool
name|OS_SetTLSValue
parameter_list|(
name|OS_TLSIndex
name|nIndex
parameter_list|,
name|void
modifier|*
name|lpvValue
parameter_list|)
block|{
if|if
condition|(
operator|!
name|tls
operator|||
name|nIndex
operator|>=
name|tls
operator|->
name|size
argument_list|()
operator|||
name|nIndex
operator|==
name|OS_INVALID_TLS_INDEX
condition|)
block|{
name|ASSERT
argument_list|(
literal|0
operator|&&
literal|"OS_SetTLSValue(): Invalid TLS Index"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|tls
operator|->
name|at
argument_list|(
name|nIndex
argument_list|)
operator|=
name|lpvValue
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|OS_FreeTLSIndex
name|bool
name|OS_FreeTLSIndex
parameter_list|(
name|OS_TLSIndex
name|nIndex
parameter_list|)
block|{
if|if
condition|(
operator|!
name|tls
operator|||
name|nIndex
operator|>=
name|tls
operator|->
name|size
argument_list|()
operator|||
name|nIndex
operator|==
name|OS_INVALID_TLS_INDEX
condition|)
block|{
name|ASSERT
argument_list|(
literal|0
operator|&&
literal|"OS_SetTLSValue(): Invalid TLS Index"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|freeIndices
condition|)
name|freeIndices
operator|=
operator|new
name|std
operator|::
name|vector
argument_list|<
name|OS_TLSIndex
argument_list|>
expr_stmt|;
name|freeIndices
operator|->
name|push_back
argument_list|(
name|nIndex
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
end_unit
