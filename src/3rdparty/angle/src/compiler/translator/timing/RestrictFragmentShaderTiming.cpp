begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/translator/InfoSink.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/ParseContext.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/depgraph/DependencyGraphOutput.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/timing/RestrictFragmentShaderTiming.h"
end_include
begin_constructor
DECL|function|RestrictFragmentShaderTiming
name|RestrictFragmentShaderTiming
operator|::
name|RestrictFragmentShaderTiming
parameter_list|(
name|TInfoSinkBase
modifier|&
name|sink
parameter_list|)
member_init_list|:
name|mSink
argument_list|(
name|sink
argument_list|)
member_init_list|,
name|mNumErrors
argument_list|(
literal|0
argument_list|)
block|{
comment|// Sampling ops found only in fragment shaders.
name|mSamplingOps
operator|.
name|insert
argument_list|(
literal|"texture2D(s21;vf2;f1;"
argument_list|)
expr_stmt|;
name|mSamplingOps
operator|.
name|insert
argument_list|(
literal|"texture2DProj(s21;vf3;f1;"
argument_list|)
expr_stmt|;
name|mSamplingOps
operator|.
name|insert
argument_list|(
literal|"texture2DProj(s21;vf4;f1;"
argument_list|)
expr_stmt|;
name|mSamplingOps
operator|.
name|insert
argument_list|(
literal|"textureCube(sC1;vf3;f1;"
argument_list|)
expr_stmt|;
comment|// Sampling ops found in both vertex and fragment shaders.
name|mSamplingOps
operator|.
name|insert
argument_list|(
literal|"texture2D(s21;vf2;"
argument_list|)
expr_stmt|;
name|mSamplingOps
operator|.
name|insert
argument_list|(
literal|"texture2DProj(s21;vf3;"
argument_list|)
expr_stmt|;
name|mSamplingOps
operator|.
name|insert
argument_list|(
literal|"texture2DProj(s21;vf4;"
argument_list|)
expr_stmt|;
name|mSamplingOps
operator|.
name|insert
argument_list|(
literal|"textureCube(sC1;vf3;"
argument_list|)
expr_stmt|;
comment|// Sampling ops provided by OES_EGL_image_external.
name|mSamplingOps
operator|.
name|insert
argument_list|(
literal|"texture2D(1;vf2;"
argument_list|)
expr_stmt|;
name|mSamplingOps
operator|.
name|insert
argument_list|(
literal|"texture2DProj(1;vf3;"
argument_list|)
expr_stmt|;
name|mSamplingOps
operator|.
name|insert
argument_list|(
literal|"texture2DProj(1;vf4;"
argument_list|)
expr_stmt|;
comment|// Sampling ops provided by ARB_texture_rectangle.
name|mSamplingOps
operator|.
name|insert
argument_list|(
literal|"texture2DRect(1;vf2;"
argument_list|)
expr_stmt|;
name|mSamplingOps
operator|.
name|insert
argument_list|(
literal|"texture2DRectProj(1;vf3;"
argument_list|)
expr_stmt|;
name|mSamplingOps
operator|.
name|insert
argument_list|(
literal|"texture2DRectProj(1;vf4;"
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|// FIXME(mvujovic): We do not know if the execution time of built-in operations like sin, pow, etc.
end_comment
begin_comment
comment|// can vary based on the value of the input arguments. If so, we should restrict those as well.
end_comment
begin_function
DECL|function|enforceRestrictions
name|void
name|RestrictFragmentShaderTiming
operator|::
name|enforceRestrictions
parameter_list|(
specifier|const
name|TDependencyGraph
modifier|&
name|graph
parameter_list|)
block|{
name|mNumErrors
operator|=
literal|0
expr_stmt|;
comment|// FIXME(mvujovic): The dependency graph does not support user defined function calls right now,
comment|// so we generate errors for them.
name|validateUserDefinedFunctionCallUsage
argument_list|(
name|graph
argument_list|)
expr_stmt|;
comment|// Starting from each sampler, traverse the dependency graph and generate an error each time we
comment|// hit a node where sampler dependent values are not allowed.
for|for
control|(
name|TGraphSymbolVector
operator|::
name|const_iterator
name|iter
init|=
name|graph
operator|.
name|beginSamplerSymbols
argument_list|()
init|;
name|iter
operator|!=
name|graph
operator|.
name|endSamplerSymbols
argument_list|()
condition|;
operator|++
name|iter
control|)
block|{
name|TGraphSymbol
modifier|*
name|samplerSymbol
init|=
operator|*
name|iter
decl_stmt|;
name|clearVisited
argument_list|()
expr_stmt|;
name|samplerSymbol
operator|->
name|traverse
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|validateUserDefinedFunctionCallUsage
name|void
name|RestrictFragmentShaderTiming
operator|::
name|validateUserDefinedFunctionCallUsage
parameter_list|(
specifier|const
name|TDependencyGraph
modifier|&
name|graph
parameter_list|)
block|{
for|for
control|(
name|TFunctionCallVector
operator|::
name|const_iterator
name|iter
init|=
name|graph
operator|.
name|beginUserDefinedFunctionCalls
argument_list|()
init|;
name|iter
operator|!=
name|graph
operator|.
name|endUserDefinedFunctionCalls
argument_list|()
condition|;
operator|++
name|iter
control|)
block|{
name|TGraphFunctionCall
modifier|*
name|functionCall
init|=
operator|*
name|iter
decl_stmt|;
name|beginError
argument_list|(
name|functionCall
operator|->
name|getIntermFunctionCall
argument_list|()
argument_list|)
expr_stmt|;
name|mSink
operator|<<
literal|"A call to a user defined function is not permitted.\n"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|beginError
name|void
name|RestrictFragmentShaderTiming
operator|::
name|beginError
parameter_list|(
specifier|const
name|TIntermNode
modifier|*
name|node
parameter_list|)
block|{
operator|++
name|mNumErrors
expr_stmt|;
name|mSink
operator|.
name|prefix
argument_list|(
name|EPrefixError
argument_list|)
expr_stmt|;
name|mSink
operator|.
name|location
argument_list|(
name|node
operator|->
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isSamplingOp
name|bool
name|RestrictFragmentShaderTiming
operator|::
name|isSamplingOp
parameter_list|(
specifier|const
name|TIntermAggregate
modifier|*
name|intermFunctionCall
parameter_list|)
specifier|const
block|{
return|return
operator|!
name|intermFunctionCall
operator|->
name|isUserDefined
argument_list|()
operator|&&
name|mSamplingOps
operator|.
name|find
argument_list|(
name|intermFunctionCall
operator|->
name|getName
argument_list|()
argument_list|)
operator|!=
name|mSamplingOps
operator|.
name|end
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|visitArgument
name|void
name|RestrictFragmentShaderTiming
operator|::
name|visitArgument
parameter_list|(
name|TGraphArgument
modifier|*
name|parameter
parameter_list|)
block|{
comment|// Texture cache access time might leak sensitive information.
comment|// Thus, we restrict sampler dependent values from affecting the coordinate or LOD bias of a
comment|// sampling operation.
if|if
condition|(
name|isSamplingOp
argument_list|(
name|parameter
operator|->
name|getIntermFunctionCall
argument_list|()
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|parameter
operator|->
name|getArgumentNumber
argument_list|()
condition|)
block|{
case|case
literal|1
case|:
comment|// Second argument (coord)
name|beginError
argument_list|(
name|parameter
operator|->
name|getIntermFunctionCall
argument_list|()
argument_list|)
expr_stmt|;
name|mSink
operator|<<
literal|"An expression dependent on a sampler is not permitted to be the"
operator|<<
literal|" coordinate argument of a sampling operation.\n"
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// Third argument (bias)
name|beginError
argument_list|(
name|parameter
operator|->
name|getIntermFunctionCall
argument_list|()
argument_list|)
expr_stmt|;
name|mSink
operator|<<
literal|"An expression dependent on a sampler is not permitted to be the"
operator|<<
literal|" bias argument of a sampling operation.\n"
expr_stmt|;
break|break;
default|default:
comment|// First argument (sampler)
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|visitSelection
name|void
name|RestrictFragmentShaderTiming
operator|::
name|visitSelection
parameter_list|(
name|TGraphSelection
modifier|*
name|selection
parameter_list|)
block|{
name|beginError
argument_list|(
name|selection
operator|->
name|getIntermSelection
argument_list|()
argument_list|)
expr_stmt|;
name|mSink
operator|<<
literal|"An expression dependent on a sampler is not permitted in a conditional statement.\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|visitLoop
name|void
name|RestrictFragmentShaderTiming
operator|::
name|visitLoop
parameter_list|(
name|TGraphLoop
modifier|*
name|loop
parameter_list|)
block|{
name|beginError
argument_list|(
name|loop
operator|->
name|getIntermLoop
argument_list|()
argument_list|)
expr_stmt|;
name|mSink
operator|<<
literal|"An expression dependent on a sampler is not permitted in a loop condition.\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|visitLogicalOp
name|void
name|RestrictFragmentShaderTiming
operator|::
name|visitLogicalOp
parameter_list|(
name|TGraphLogicalOp
modifier|*
name|logicalOp
parameter_list|)
block|{
name|beginError
argument_list|(
name|logicalOp
operator|->
name|getIntermLogicalOp
argument_list|()
argument_list|)
expr_stmt|;
name|mSink
operator|<<
literal|"An expression dependent on a sampler is not permitted on the left hand side of a logical "
operator|<<
name|logicalOp
operator|->
name|getOpString
argument_list|()
operator|<<
literal|" operator.\n"
expr_stmt|;
block|}
end_function
end_unit
