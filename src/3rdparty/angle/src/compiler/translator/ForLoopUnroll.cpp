begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/translator/ForLoopUnroll.h"
end_include
begin_function
DECL|function|visitBinary
name|bool
name|ForLoopUnrollMarker
operator|::
name|visitBinary
parameter_list|(
name|Visit
parameter_list|,
name|TIntermBinary
modifier|*
name|node
parameter_list|)
block|{
if|if
condition|(
name|mUnrollCondition
operator|!=
name|kSamplerArrayIndex
condition|)
return|return
literal|true
return|;
comment|// If a sampler array index is also the loop index,
comment|//   1) if the index type is integer, mark the loop for unrolling;
comment|//   2) if the index type if float, set a flag to later fail compile.
switch|switch
condition|(
name|node
operator|->
name|getOp
argument_list|()
condition|)
block|{
case|case
name|EOpIndexIndirect
case|:
if|if
condition|(
name|node
operator|->
name|getLeft
argument_list|()
operator|!=
name|NULL
operator|&&
name|node
operator|->
name|getRight
argument_list|()
operator|!=
name|NULL
operator|&&
name|node
operator|->
name|getLeft
argument_list|()
operator|->
name|getAsSymbolNode
argument_list|()
condition|)
block|{
name|TIntermSymbol
modifier|*
name|symbol
init|=
name|node
operator|->
name|getLeft
argument_list|()
operator|->
name|getAsSymbolNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|IsSampler
argument_list|(
name|symbol
operator|->
name|getBasicType
argument_list|()
argument_list|)
operator|&&
name|symbol
operator|->
name|isArray
argument_list|()
operator|&&
operator|!
name|mLoopStack
operator|.
name|empty
argument_list|()
condition|)
block|{
name|mVisitSamplerArrayIndexNodeInsideLoop
operator|=
literal|true
expr_stmt|;
name|node
operator|->
name|getRight
argument_list|()
operator|->
name|traverse
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mVisitSamplerArrayIndexNodeInsideLoop
operator|=
literal|false
expr_stmt|;
comment|// We have already visited all the children.
return|return
literal|false
return|;
block|}
block|}
break|break;
default|default:
break|break;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|visitLoop
name|bool
name|ForLoopUnrollMarker
operator|::
name|visitLoop
parameter_list|(
name|Visit
parameter_list|,
name|TIntermLoop
modifier|*
name|node
parameter_list|)
block|{
if|if
condition|(
name|mUnrollCondition
operator|==
name|kIntegerIndex
condition|)
block|{
comment|// Check if loop index type is integer.
comment|// This is called after ValidateLimitations pass, so all the calls
comment|// should be valid. See ValidateLimitations::validateForLoopInit().
name|TIntermSequence
modifier|*
name|declSeq
init|=
name|node
operator|->
name|getInit
argument_list|()
operator|->
name|getAsAggregate
argument_list|()
operator|->
name|getSequence
argument_list|()
decl_stmt|;
name|TIntermSymbol
modifier|*
name|symbol
init|=
operator|(
operator|*
name|declSeq
operator|)
index|[
literal|0
index|]
operator|->
name|getAsBinaryNode
argument_list|()
operator|->
name|getLeft
argument_list|()
operator|->
name|getAsSymbolNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|symbol
operator|->
name|getBasicType
argument_list|()
operator|==
name|EbtInt
condition|)
name|node
operator|->
name|setUnrollFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|TIntermNode
modifier|*
name|body
init|=
name|node
operator|->
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|!=
name|NULL
condition|)
block|{
name|mLoopStack
operator|.
name|push
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|body
operator|->
name|traverse
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mLoopStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|// The loop is fully processed - no need to visit children.
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|visitSymbol
name|void
name|ForLoopUnrollMarker
operator|::
name|visitSymbol
parameter_list|(
name|TIntermSymbol
modifier|*
name|symbol
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mVisitSamplerArrayIndexNodeInsideLoop
condition|)
return|return;
name|TIntermLoop
modifier|*
name|loop
init|=
name|mLoopStack
operator|.
name|findLoop
argument_list|(
name|symbol
argument_list|)
decl_stmt|;
if|if
condition|(
name|loop
condition|)
block|{
switch|switch
condition|(
name|symbol
operator|->
name|getBasicType
argument_list|()
condition|)
block|{
case|case
name|EbtFloat
case|:
name|mSamplerArrayIndexIsFloatLoopIndex
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|EbtInt
case|:
name|loop
operator|->
name|setUnrollFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
end_unit
