begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/translator/ValidateOutputs.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/InfoSink.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/InitializeParseContext.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/ParseContext.h"
end_include
begin_namespace
namespace|namespace
block|{
DECL|function|error
name|void
name|error
parameter_list|(
name|int
modifier|*
name|errorCount
parameter_list|,
name|TInfoSinkBase
modifier|&
name|sink
parameter_list|,
specifier|const
name|TIntermSymbol
modifier|&
name|symbol
parameter_list|,
specifier|const
name|char
modifier|*
name|reason
parameter_list|)
block|{
name|sink
operator|.
name|prefix
argument_list|(
name|EPrefixError
argument_list|)
expr_stmt|;
name|sink
operator|.
name|location
argument_list|(
name|symbol
operator|.
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
name|sink
operator|<<
literal|"'"
operator|<<
name|symbol
operator|.
name|getSymbol
argument_list|()
operator|<<
literal|"' : "
operator|<<
name|reason
operator|<<
literal|"\n"
expr_stmt|;
operator|(
operator|*
name|errorCount
operator|)
operator|++
expr_stmt|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace
end_comment
begin_constructor
DECL|function|ValidateOutputs
name|ValidateOutputs
operator|::
name|ValidateOutputs
parameter_list|(
specifier|const
name|TExtensionBehavior
modifier|&
name|extBehavior
parameter_list|,
name|int
name|maxDrawBuffers
parameter_list|)
member_init_list|:
name|TIntermTraverser
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
member_init_list|,
name|mMaxDrawBuffers
argument_list|(
name|maxDrawBuffers
argument_list|)
member_init_list|,
name|mAllowUnspecifiedOutputLocationResolution
argument_list|(
name|IsExtensionEnabled
argument_list|(
name|extBehavior
argument_list|,
literal|"GL_EXT_blend_func_extended"
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|visitSymbol
name|void
name|ValidateOutputs
operator|::
name|visitSymbol
parameter_list|(
name|TIntermSymbol
modifier|*
name|symbol
parameter_list|)
block|{
name|TString
name|name
init|=
name|symbol
operator|->
name|getSymbol
argument_list|()
decl_stmt|;
name|TQualifier
name|qualifier
init|=
name|symbol
operator|->
name|getQualifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|mVisitedSymbols
operator|.
name|count
argument_list|(
name|name
argument_list|)
operator|==
literal|1
condition|)
return|return;
name|mVisitedSymbols
operator|.
name|insert
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|qualifier
operator|==
name|EvqFragmentOut
condition|)
block|{
if|if
condition|(
name|symbol
operator|->
name|getType
argument_list|()
operator|.
name|getLayoutQualifier
argument_list|()
operator|.
name|location
operator|==
operator|-
literal|1
condition|)
block|{
name|mUnspecifiedLocationOutputs
operator|.
name|push_back
argument_list|(
name|symbol
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mOutputs
operator|.
name|push_back
argument_list|(
name|symbol
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|validateAndCountErrors
name|int
name|ValidateOutputs
operator|::
name|validateAndCountErrors
parameter_list|(
name|TInfoSinkBase
modifier|&
name|sink
parameter_list|)
specifier|const
block|{
name|OutputVector
name|validOutputs
argument_list|(
name|mMaxDrawBuffers
argument_list|)
decl_stmt|;
name|int
name|errorCount
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|symbol
range|:
name|mOutputs
control|)
block|{
specifier|const
name|TType
modifier|&
name|type
init|=
name|symbol
operator|->
name|getType
argument_list|()
decl_stmt|;
specifier|const
name|size_t
name|elementCount
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|type
operator|.
name|isArray
argument_list|()
condition|?
name|type
operator|.
name|getArraySize
argument_list|()
else|:
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|size_t
name|location
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|type
operator|.
name|getLayoutQualifier
argument_list|()
operator|.
name|location
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|type
operator|.
name|getLayoutQualifier
argument_list|()
operator|.
name|location
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|+
name|elementCount
operator|<=
name|validOutputs
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|size_t
name|elementIndex
init|=
literal|0
init|;
name|elementIndex
operator|<
name|elementCount
condition|;
name|elementIndex
operator|++
control|)
block|{
specifier|const
name|size_t
name|offsetLocation
init|=
name|location
operator|+
name|elementIndex
decl_stmt|;
if|if
condition|(
name|validOutputs
index|[
name|offsetLocation
index|]
condition|)
block|{
name|std
operator|::
name|stringstream
name|strstr
decl_stmt|;
name|strstr
operator|<<
literal|"conflicting output locations with previously defined output '"
operator|<<
name|validOutputs
index|[
name|offsetLocation
index|]
operator|->
name|getSymbol
argument_list|()
operator|<<
literal|"'"
expr_stmt|;
name|error
argument_list|(
operator|&
name|errorCount
argument_list|,
name|sink
argument_list|,
operator|*
name|symbol
argument_list|,
name|strstr
operator|.
name|str
argument_list|()
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|validOutputs
index|[
name|offsetLocation
index|]
operator|=
name|symbol
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|elementCount
operator|>
literal|0
condition|)
block|{
name|error
argument_list|(
operator|&
name|errorCount
argument_list|,
name|sink
argument_list|,
operator|*
name|symbol
argument_list|,
name|elementCount
operator|>
literal|1
condition|?
literal|"output array locations would exceed MAX_DRAW_BUFFERS"
else|:
literal|"output location must be< MAX_DRAW_BUFFERS"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|mAllowUnspecifiedOutputLocationResolution
operator|&&
operator|(
operator|(
operator|!
name|mOutputs
operator|.
name|empty
argument_list|()
operator|&&
operator|!
name|mUnspecifiedLocationOutputs
operator|.
name|empty
argument_list|()
operator|)
operator|||
name|mUnspecifiedLocationOutputs
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|)
condition|)
block|{
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|symbol
range|:
name|mUnspecifiedLocationOutputs
control|)
block|{
name|error
argument_list|(
operator|&
name|errorCount
argument_list|,
name|sink
argument_list|,
operator|*
name|symbol
argument_list|,
literal|"must explicitly specify all locations when using multiple fragment outputs"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|errorCount
return|;
block|}
end_function
end_unit
