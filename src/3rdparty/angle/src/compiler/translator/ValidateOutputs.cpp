begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/translator/ValidateOutputs.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/InfoSink.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/InitializeParseContext.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/ParseContext.h"
end_include
begin_constructor
DECL|function|ValidateOutputs
name|ValidateOutputs
operator|::
name|ValidateOutputs
parameter_list|(
name|TInfoSinkBase
modifier|&
name|sink
parameter_list|,
name|int
name|maxDrawBuffers
parameter_list|)
member_init_list|:
name|mSink
argument_list|(
name|sink
argument_list|)
member_init_list|,
name|mMaxDrawBuffers
argument_list|(
name|maxDrawBuffers
argument_list|)
member_init_list|,
name|mNumErrors
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mHasUnspecifiedOutputLocation
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|visitSymbol
name|void
name|ValidateOutputs
operator|::
name|visitSymbol
parameter_list|(
name|TIntermSymbol
modifier|*
name|symbol
parameter_list|)
block|{
name|TString
name|name
init|=
name|symbol
operator|->
name|getSymbol
argument_list|()
decl_stmt|;
name|TQualifier
name|qualifier
init|=
name|symbol
operator|->
name|getQualifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|mVisitedSymbols
operator|.
name|count
argument_list|(
name|name
argument_list|)
operator|==
literal|1
condition|)
return|return;
name|mVisitedSymbols
operator|.
name|insert
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|qualifier
operator|==
name|EvqFragmentOut
condition|)
block|{
specifier|const
name|TType
modifier|&
name|type
init|=
name|symbol
operator|->
name|getType
argument_list|()
decl_stmt|;
specifier|const
name|int
name|location
init|=
name|type
operator|.
name|getLayoutQualifier
argument_list|()
operator|.
name|location
decl_stmt|;
if|if
condition|(
name|mHasUnspecifiedOutputLocation
condition|)
block|{
name|error
argument_list|(
name|symbol
operator|->
name|getLine
argument_list|()
argument_list|,
literal|"must explicitly specify all locations when using multiple fragment outputs"
argument_list|,
name|name
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|location
operator|==
operator|-
literal|1
condition|)
block|{
name|mHasUnspecifiedOutputLocation
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|OutputMap
operator|::
name|iterator
name|mapEntry
init|=
name|mOutputMap
operator|.
name|find
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapEntry
operator|==
name|mOutputMap
operator|.
name|end
argument_list|()
condition|)
block|{
specifier|const
name|int
name|elementCount
init|=
name|type
operator|.
name|isArray
argument_list|()
condition|?
name|type
operator|.
name|getArraySize
argument_list|()
else|:
literal|1
decl_stmt|;
if|if
condition|(
name|location
operator|+
name|elementCount
operator|>
name|mMaxDrawBuffers
condition|)
block|{
name|error
argument_list|(
name|symbol
operator|->
name|getLine
argument_list|()
argument_list|,
literal|"output location must be< MAX_DRAW_BUFFERS"
argument_list|,
name|name
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|elementIndex
init|=
literal|0
init|;
name|elementIndex
operator|<
name|elementCount
condition|;
name|elementIndex
operator|++
control|)
block|{
specifier|const
name|int
name|offsetLocation
init|=
name|location
operator|+
name|elementIndex
decl_stmt|;
name|mOutputMap
index|[
name|offsetLocation
index|]
operator|=
name|symbol
expr_stmt|;
block|}
block|}
else|else
block|{
name|std
operator|::
name|stringstream
name|strstr
decl_stmt|;
name|strstr
operator|<<
literal|"conflicting output locations with previously defined output '"
operator|<<
name|mapEntry
operator|->
name|second
operator|->
name|getSymbol
argument_list|()
operator|<<
literal|"'"
expr_stmt|;
name|error
argument_list|(
name|symbol
operator|->
name|getLine
argument_list|()
argument_list|,
name|strstr
operator|.
name|str
argument_list|()
operator|.
name|c_str
argument_list|()
argument_list|,
name|name
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|error
name|void
name|ValidateOutputs
operator|::
name|error
parameter_list|(
name|TSourceLoc
name|loc
parameter_list|,
specifier|const
name|char
modifier|*
name|reason
parameter_list|,
specifier|const
name|char
modifier|*
name|token
parameter_list|)
block|{
name|mSink
operator|.
name|prefix
argument_list|(
name|EPrefixError
argument_list|)
expr_stmt|;
name|mSink
operator|.
name|location
argument_list|(
name|loc
argument_list|)
expr_stmt|;
name|mSink
operator|<<
literal|"'"
operator|<<
name|token
operator|<<
literal|"' : "
operator|<<
name|reason
operator|<<
literal|"\n"
expr_stmt|;
name|mNumErrors
operator|++
expr_stmt|;
block|}
end_function
end_unit
