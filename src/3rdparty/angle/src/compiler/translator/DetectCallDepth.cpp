begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2011 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/translator/DetectCallDepth.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/InfoSink.h"
end_include
begin_constructor
DECL|function|FunctionNode
name|DetectCallDepth
operator|::
name|FunctionNode
operator|::
name|FunctionNode
parameter_list|(
specifier|const
name|TString
modifier|&
name|fname
parameter_list|)
member_init_list|:
name|name
argument_list|(
name|fname
argument_list|)
member_init_list|,
name|visit
argument_list|(
name|PreVisit
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|getName
specifier|const
name|TString
modifier|&
name|DetectCallDepth
operator|::
name|FunctionNode
operator|::
name|getName
parameter_list|()
specifier|const
block|{
return|return
name|name
return|;
block|}
end_function
begin_function
DECL|function|addCallee
name|void
name|DetectCallDepth
operator|::
name|FunctionNode
operator|::
name|addCallee
parameter_list|(
name|DetectCallDepth
operator|::
name|FunctionNode
modifier|*
name|callee
parameter_list|)
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callees
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|callees
index|[
name|i
index|]
operator|==
name|callee
condition|)
return|return;
block|}
name|callees
operator|.
name|push_back
argument_list|(
name|callee
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|detectCallDepth
name|int
name|DetectCallDepth
operator|::
name|FunctionNode
operator|::
name|detectCallDepth
parameter_list|(
name|DetectCallDepth
modifier|*
name|detectCallDepth
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|visit
operator|==
name|PreVisit
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|detectCallDepth
argument_list|)
expr_stmt|;
name|int
name|retMaxDepth
init|=
name|depth
decl_stmt|;
name|visit
operator|=
name|InVisit
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callees
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|callees
index|[
name|i
index|]
operator|->
name|visit
condition|)
block|{
case|case
name|InVisit
case|:
comment|// cycle detected, i.e., recursion detected.
return|return
name|kInfiniteCallDepth
return|;
case|case
name|PostVisit
case|:
break|break;
case|case
name|PreVisit
case|:
block|{
comment|// Check before we recurse so we don't go too depth
if|if
condition|(
name|detectCallDepth
operator|->
name|checkExceedsMaxDepth
argument_list|(
name|depth
argument_list|)
condition|)
return|return
name|depth
return|;
name|int
name|callDepth
init|=
name|callees
index|[
name|i
index|]
operator|->
name|detectCallDepth
argument_list|(
name|detectCallDepth
argument_list|,
name|depth
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// Check after we recurse so we can exit immediately and provide info.
if|if
condition|(
name|detectCallDepth
operator|->
name|checkExceedsMaxDepth
argument_list|(
name|callDepth
argument_list|)
condition|)
block|{
name|detectCallDepth
operator|->
name|getInfoSink
argument_list|()
operator|.
name|info
operator|<<
literal|"<-"
operator|<<
name|callees
index|[
name|i
index|]
operator|->
name|getName
argument_list|()
expr_stmt|;
return|return
name|callDepth
return|;
block|}
name|retMaxDepth
operator|=
name|std
operator|::
name|max
argument_list|(
name|callDepth
argument_list|,
name|retMaxDepth
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|visit
operator|=
name|PostVisit
expr_stmt|;
return|return
name|retMaxDepth
return|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|DetectCallDepth
operator|::
name|FunctionNode
operator|::
name|reset
parameter_list|()
block|{
name|visit
operator|=
name|PreVisit
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DetectCallDepth
name|DetectCallDepth
operator|::
name|DetectCallDepth
parameter_list|(
name|TInfoSink
modifier|&
name|infoSink
parameter_list|,
name|bool
name|limitCallStackDepth
parameter_list|,
name|int
name|maxCallStackDepth
parameter_list|)
member_init_list|:
name|TIntermTraverser
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
member_init_list|,
name|currentFunction
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|infoSink
argument_list|(
name|infoSink
argument_list|)
member_init_list|,
name|maxDepth
argument_list|(
name|limitCallStackDepth
condition|?
name|maxCallStackDepth
else|:
name|FunctionNode
operator|::
name|kInfiniteCallDepth
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~DetectCallDepth
name|DetectCallDepth
operator|::
name|~
name|DetectCallDepth
parameter_list|()
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|functions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
operator|delete
name|functions
index|[
name|i
index|]
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|visitAggregate
name|bool
name|DetectCallDepth
operator|::
name|visitAggregate
parameter_list|(
name|Visit
name|visit
parameter_list|,
name|TIntermAggregate
modifier|*
name|node
parameter_list|)
block|{
switch|switch
condition|(
name|node
operator|->
name|getOp
argument_list|()
condition|)
block|{
case|case
name|EOpPrototype
case|:
comment|// Function declaration.
comment|// Don't add FunctionNode here because node->getName() is the
comment|// unmangled function name.
break|break;
case|case
name|EOpFunction
case|:
block|{
comment|// Function definition.
if|if
condition|(
name|visit
operator|==
name|PreVisit
condition|)
block|{
name|currentFunction
operator|=
name|findFunctionByName
argument_list|(
name|node
operator|->
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentFunction
operator|==
name|NULL
condition|)
block|{
name|currentFunction
operator|=
operator|new
name|FunctionNode
argument_list|(
name|node
operator|->
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|functions
operator|.
name|push_back
argument_list|(
name|currentFunction
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|visit
operator|==
name|PostVisit
condition|)
block|{
name|currentFunction
operator|=
name|NULL
expr_stmt|;
block|}
break|break;
block|}
case|case
name|EOpFunctionCall
case|:
block|{
comment|// Function call.
if|if
condition|(
name|visit
operator|==
name|PreVisit
condition|)
block|{
name|FunctionNode
modifier|*
name|func
init|=
name|findFunctionByName
argument_list|(
name|node
operator|->
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
operator|==
name|NULL
condition|)
block|{
name|func
operator|=
operator|new
name|FunctionNode
argument_list|(
name|node
operator|->
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|functions
operator|.
name|push_back
argument_list|(
name|func
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentFunction
condition|)
name|currentFunction
operator|->
name|addCallee
argument_list|(
name|func
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
break|break;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|checkExceedsMaxDepth
name|bool
name|DetectCallDepth
operator|::
name|checkExceedsMaxDepth
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
return|return
name|depth
operator|>=
name|maxDepth
return|;
block|}
end_function
begin_function
DECL|function|resetFunctionNodes
name|void
name|DetectCallDepth
operator|::
name|resetFunctionNodes
parameter_list|()
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|functions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|functions
index|[
name|i
index|]
operator|->
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|detectCallDepthForFunction
name|DetectCallDepth
operator|::
name|ErrorCode
name|DetectCallDepth
operator|::
name|detectCallDepthForFunction
parameter_list|(
name|FunctionNode
modifier|*
name|func
parameter_list|)
block|{
name|currentFunction
operator|=
name|NULL
expr_stmt|;
name|resetFunctionNodes
argument_list|()
expr_stmt|;
name|int
name|maxCallDepth
init|=
name|func
operator|->
name|detectCallDepth
argument_list|(
name|this
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxCallDepth
operator|==
name|FunctionNode
operator|::
name|kInfiniteCallDepth
condition|)
return|return
name|kErrorRecursion
return|;
if|if
condition|(
name|maxCallDepth
operator|>=
name|maxDepth
condition|)
return|return
name|kErrorMaxDepthExceeded
return|;
return|return
name|kErrorNone
return|;
block|}
end_function
begin_function
DECL|function|detectCallDepth
name|DetectCallDepth
operator|::
name|ErrorCode
name|DetectCallDepth
operator|::
name|detectCallDepth
parameter_list|()
block|{
if|if
condition|(
name|maxDepth
operator|!=
name|FunctionNode
operator|::
name|kInfiniteCallDepth
condition|)
block|{
comment|// Check all functions because the driver may fail on them
comment|// TODO: Before detectingRecursion, strip unused functions.
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|functions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ErrorCode
name|error
init|=
name|detectCallDepthForFunction
argument_list|(
name|functions
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|!=
name|kErrorNone
condition|)
return|return
name|error
return|;
block|}
block|}
else|else
block|{
name|FunctionNode
modifier|*
decl|main
init|=
name|findFunctionByName
argument_list|(
literal|"main("
argument_list|)
decl_stmt|;
if|if
condition|(
expr|main
operator|==
name|NULL
condition|)
return|return
name|kErrorMissingMain
return|;
return|return
name|detectCallDepthForFunction
argument_list|(
expr|main
argument_list|)
return|;
block|}
return|return
name|kErrorNone
return|;
block|}
end_function
begin_function
DECL|function|findFunctionByName
name|DetectCallDepth
operator|::
name|FunctionNode
modifier|*
name|DetectCallDepth
operator|::
name|findFunctionByName
parameter_list|(
specifier|const
name|TString
modifier|&
name|name
parameter_list|)
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|functions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|functions
index|[
name|i
index|]
operator|->
name|getName
argument_list|()
operator|==
name|name
condition|)
return|return
name|functions
index|[
name|i
index|]
return|;
block|}
return|return
name|NULL
return|;
block|}
end_function
end_unit
