begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Build the intermediate representation.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<float.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_include
include|#
directive|include
file|"compiler/translator/HashNames.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/IntermNode.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/SymbolTable.h"
end_include
begin_namespace
namespace|namespace
block|{
DECL|function|GetHigherPrecision
name|TPrecision
name|GetHigherPrecision
parameter_list|(
name|TPrecision
name|left
parameter_list|,
name|TPrecision
name|right
parameter_list|)
block|{
return|return
name|left
operator|>
name|right
condition|?
name|left
else|:
name|right
return|;
block|}
DECL|function|ValidateMultiplication
name|bool
name|ValidateMultiplication
parameter_list|(
name|TOperator
name|op
parameter_list|,
specifier|const
name|TType
modifier|&
name|left
parameter_list|,
specifier|const
name|TType
modifier|&
name|right
parameter_list|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|EOpMul
case|:
case|case
name|EOpMulAssign
case|:
return|return
name|left
operator|.
name|getNominalSize
argument_list|()
operator|==
name|right
operator|.
name|getNominalSize
argument_list|()
operator|&&
name|left
operator|.
name|getSecondarySize
argument_list|()
operator|==
name|right
operator|.
name|getSecondarySize
argument_list|()
return|;
case|case
name|EOpVectorTimesScalar
case|:
case|case
name|EOpVectorTimesScalarAssign
case|:
return|return
literal|true
return|;
case|case
name|EOpVectorTimesMatrix
case|:
return|return
name|left
operator|.
name|getNominalSize
argument_list|()
operator|==
name|right
operator|.
name|getRows
argument_list|()
return|;
case|case
name|EOpVectorTimesMatrixAssign
case|:
return|return
name|left
operator|.
name|getNominalSize
argument_list|()
operator|==
name|right
operator|.
name|getRows
argument_list|()
operator|&&
name|left
operator|.
name|getNominalSize
argument_list|()
operator|==
name|right
operator|.
name|getCols
argument_list|()
return|;
case|case
name|EOpMatrixTimesVector
case|:
return|return
name|left
operator|.
name|getCols
argument_list|()
operator|==
name|right
operator|.
name|getNominalSize
argument_list|()
return|;
case|case
name|EOpMatrixTimesScalar
case|:
case|case
name|EOpMatrixTimesScalarAssign
case|:
return|return
literal|true
return|;
case|case
name|EOpMatrixTimesMatrix
case|:
return|return
name|left
operator|.
name|getCols
argument_list|()
operator|==
name|right
operator|.
name|getRows
argument_list|()
return|;
case|case
name|EOpMatrixTimesMatrixAssign
case|:
return|return
name|left
operator|.
name|getCols
argument_list|()
operator|==
name|right
operator|.
name|getCols
argument_list|()
operator|&&
name|left
operator|.
name|getRows
argument_list|()
operator|==
name|right
operator|.
name|getRows
argument_list|()
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|bool
name|CompareStructure
parameter_list|(
specifier|const
name|TType
modifier|&
name|leftNodeType
parameter_list|,
name|ConstantUnion
modifier|*
name|rightUnionArray
parameter_list|,
name|ConstantUnion
modifier|*
name|leftUnionArray
parameter_list|)
function_decl|;
DECL|function|CompareStruct
name|bool
name|CompareStruct
parameter_list|(
specifier|const
name|TType
modifier|&
name|leftNodeType
parameter_list|,
name|ConstantUnion
modifier|*
name|rightUnionArray
parameter_list|,
name|ConstantUnion
modifier|*
name|leftUnionArray
parameter_list|)
block|{
specifier|const
name|TFieldList
modifier|&
name|fields
init|=
name|leftNodeType
operator|.
name|getStruct
argument_list|()
operator|->
name|fields
argument_list|()
decl_stmt|;
name|size_t
name|structSize
init|=
name|fields
operator|.
name|size
argument_list|()
decl_stmt|;
name|size_t
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|size_t
name|j
init|=
literal|0
init|;
name|j
operator|<
name|structSize
condition|;
name|j
operator|++
control|)
block|{
name|size_t
name|size
init|=
name|fields
index|[
name|j
index|]
operator|->
name|type
argument_list|()
operator|->
name|getObjectSize
argument_list|()
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fields
index|[
name|j
index|]
operator|->
name|type
argument_list|()
operator|->
name|getBasicType
argument_list|()
operator|==
name|EbtStruct
condition|)
block|{
if|if
condition|(
operator|!
name|CompareStructure
argument_list|(
operator|*
name|fields
index|[
name|j
index|]
operator|->
name|type
argument_list|()
argument_list|,
operator|&
name|rightUnionArray
index|[
name|index
index|]
argument_list|,
operator|&
name|leftUnionArray
index|[
name|index
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|leftUnionArray
index|[
name|index
index|]
operator|!=
name|rightUnionArray
index|[
name|index
index|]
condition|)
return|return
literal|false
return|;
name|index
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|function|CompareStructure
name|bool
name|CompareStructure
parameter_list|(
specifier|const
name|TType
modifier|&
name|leftNodeType
parameter_list|,
name|ConstantUnion
modifier|*
name|rightUnionArray
parameter_list|,
name|ConstantUnion
modifier|*
name|leftUnionArray
parameter_list|)
block|{
if|if
condition|(
name|leftNodeType
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|TType
name|typeWithoutArrayness
init|=
name|leftNodeType
decl_stmt|;
name|typeWithoutArrayness
operator|.
name|clearArrayness
argument_list|()
expr_stmt|;
name|size_t
name|arraySize
init|=
name|leftNodeType
operator|.
name|getArraySize
argument_list|()
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arraySize
condition|;
operator|++
name|i
control|)
block|{
name|size_t
name|offset
init|=
name|typeWithoutArrayness
operator|.
name|getObjectSize
argument_list|()
operator|*
name|i
decl_stmt|;
if|if
condition|(
operator|!
name|CompareStruct
argument_list|(
name|typeWithoutArrayness
argument_list|,
operator|&
name|rightUnionArray
index|[
name|offset
index|]
argument_list|,
operator|&
name|leftUnionArray
index|[
name|offset
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
else|else
block|{
return|return
name|CompareStruct
argument_list|(
name|leftNodeType
argument_list|,
name|rightUnionArray
argument_list|,
name|leftUnionArray
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace anonymous
end_comment
begin_comment
comment|////////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Member functions of the nodes used for building the tree.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|////////////////////////////////////////////////////////////////
end_comment
begin_function
DECL|function|setTypePreservePrecision
name|void
name|TIntermTyped
operator|::
name|setTypePreservePrecision
parameter_list|(
specifier|const
name|TType
modifier|&
name|t
parameter_list|)
block|{
name|TPrecision
name|precision
init|=
name|getPrecision
argument_list|()
decl_stmt|;
name|mType
operator|=
name|t
expr_stmt|;
name|ASSERT
argument_list|(
name|mType
operator|.
name|getBasicType
argument_list|()
operator|!=
name|EbtBool
operator|||
name|precision
operator|==
name|EbpUndefined
argument_list|)
expr_stmt|;
name|mType
operator|.
name|setPrecision
argument_list|(
name|precision
argument_list|)
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|REPLACE_IF_IS
define|#
directive|define
name|REPLACE_IF_IS
parameter_list|(
name|node
parameter_list|,
name|type
parameter_list|,
name|original
parameter_list|,
name|replacement
parameter_list|)
define|\
value|if (node == original) { \         node = static_cast<type *>(replacement); \         return true; \     }
end_define
begin_function
DECL|function|replaceChildNode
name|bool
name|TIntermLoop
operator|::
name|replaceChildNode
parameter_list|(
name|TIntermNode
modifier|*
name|original
parameter_list|,
name|TIntermNode
modifier|*
name|replacement
parameter_list|)
block|{
name|REPLACE_IF_IS
argument_list|(
name|mInit
argument_list|,
name|TIntermNode
argument_list|,
name|original
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
name|REPLACE_IF_IS
argument_list|(
name|mCond
argument_list|,
name|TIntermTyped
argument_list|,
name|original
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
name|REPLACE_IF_IS
argument_list|(
name|mExpr
argument_list|,
name|TIntermTyped
argument_list|,
name|original
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
name|REPLACE_IF_IS
argument_list|(
name|mBody
argument_list|,
name|TIntermNode
argument_list|,
name|original
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|replaceChildNode
name|bool
name|TIntermBranch
operator|::
name|replaceChildNode
parameter_list|(
name|TIntermNode
modifier|*
name|original
parameter_list|,
name|TIntermNode
modifier|*
name|replacement
parameter_list|)
block|{
name|REPLACE_IF_IS
argument_list|(
name|mExpression
argument_list|,
name|TIntermTyped
argument_list|,
name|original
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|replaceChildNode
name|bool
name|TIntermBinary
operator|::
name|replaceChildNode
parameter_list|(
name|TIntermNode
modifier|*
name|original
parameter_list|,
name|TIntermNode
modifier|*
name|replacement
parameter_list|)
block|{
name|REPLACE_IF_IS
argument_list|(
name|mLeft
argument_list|,
name|TIntermTyped
argument_list|,
name|original
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
name|REPLACE_IF_IS
argument_list|(
name|mRight
argument_list|,
name|TIntermTyped
argument_list|,
name|original
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|replaceChildNode
name|bool
name|TIntermUnary
operator|::
name|replaceChildNode
parameter_list|(
name|TIntermNode
modifier|*
name|original
parameter_list|,
name|TIntermNode
modifier|*
name|replacement
parameter_list|)
block|{
name|REPLACE_IF_IS
argument_list|(
name|mOperand
argument_list|,
name|TIntermTyped
argument_list|,
name|original
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|replaceChildNode
name|bool
name|TIntermAggregate
operator|::
name|replaceChildNode
parameter_list|(
name|TIntermNode
modifier|*
name|original
parameter_list|,
name|TIntermNode
modifier|*
name|replacement
parameter_list|)
block|{
for|for
control|(
name|size_t
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|mSequence
operator|.
name|size
argument_list|()
condition|;
operator|++
name|ii
control|)
block|{
name|REPLACE_IF_IS
argument_list|(
name|mSequence
index|[
name|ii
index|]
argument_list|,
name|TIntermNode
argument_list|,
name|original
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|setPrecisionFromChildren
name|void
name|TIntermAggregate
operator|::
name|setPrecisionFromChildren
parameter_list|()
block|{
if|if
condition|(
name|getBasicType
argument_list|()
operator|==
name|EbtBool
condition|)
block|{
name|mType
operator|.
name|setPrecision
argument_list|(
name|EbpUndefined
argument_list|)
expr_stmt|;
return|return;
block|}
name|TPrecision
name|precision
init|=
name|EbpUndefined
decl_stmt|;
name|TIntermSequence
operator|::
name|iterator
name|childIter
init|=
name|mSequence
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|childIter
operator|!=
name|mSequence
operator|.
name|end
argument_list|()
condition|)
block|{
name|TIntermTyped
modifier|*
name|typed
init|=
operator|(
operator|*
name|childIter
operator|)
operator|->
name|getAsTyped
argument_list|()
decl_stmt|;
if|if
condition|(
name|typed
condition|)
name|precision
operator|=
name|GetHigherPrecision
argument_list|(
name|typed
operator|->
name|getPrecision
argument_list|()
argument_list|,
name|precision
argument_list|)
expr_stmt|;
operator|++
name|childIter
expr_stmt|;
block|}
name|mType
operator|.
name|setPrecision
argument_list|(
name|precision
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setBuiltInFunctionPrecision
name|void
name|TIntermAggregate
operator|::
name|setBuiltInFunctionPrecision
parameter_list|()
block|{
comment|// All built-ins returning bool should be handled as ops, not functions.
name|ASSERT
argument_list|(
name|getBasicType
argument_list|()
operator|!=
name|EbtBool
argument_list|)
expr_stmt|;
name|TPrecision
name|precision
init|=
name|EbpUndefined
decl_stmt|;
name|TIntermSequence
operator|::
name|iterator
name|childIter
init|=
name|mSequence
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|childIter
operator|!=
name|mSequence
operator|.
name|end
argument_list|()
condition|)
block|{
name|TIntermTyped
modifier|*
name|typed
init|=
operator|(
operator|*
name|childIter
operator|)
operator|->
name|getAsTyped
argument_list|()
decl_stmt|;
comment|// ESSL spec section 8: texture functions get their precision from the sampler.
if|if
condition|(
name|typed
operator|&&
name|IsSampler
argument_list|(
name|typed
operator|->
name|getBasicType
argument_list|()
argument_list|)
condition|)
block|{
name|precision
operator|=
name|typed
operator|->
name|getPrecision
argument_list|()
expr_stmt|;
break|break;
block|}
operator|++
name|childIter
expr_stmt|;
block|}
comment|// ESSL 3.0 spec section 8: textureSize always gets highp precision.
comment|// All other functions that take a sampler are assumed to be texture functions.
if|if
condition|(
name|mName
operator|.
name|find
argument_list|(
literal|"textureSize"
argument_list|)
operator|==
literal|0
condition|)
name|mType
operator|.
name|setPrecision
argument_list|(
name|EbpHigh
argument_list|)
expr_stmt|;
else|else
name|mType
operator|.
name|setPrecision
argument_list|(
name|precision
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|replaceChildNode
name|bool
name|TIntermSelection
operator|::
name|replaceChildNode
parameter_list|(
name|TIntermNode
modifier|*
name|original
parameter_list|,
name|TIntermNode
modifier|*
name|replacement
parameter_list|)
block|{
name|REPLACE_IF_IS
argument_list|(
name|mCondition
argument_list|,
name|TIntermTyped
argument_list|,
name|original
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
name|REPLACE_IF_IS
argument_list|(
name|mTrueBlock
argument_list|,
name|TIntermNode
argument_list|,
name|original
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
name|REPLACE_IF_IS
argument_list|(
name|mFalseBlock
argument_list|,
name|TIntermNode
argument_list|,
name|original
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|replaceChildNode
name|bool
name|TIntermSwitch
operator|::
name|replaceChildNode
parameter_list|(
name|TIntermNode
modifier|*
name|original
parameter_list|,
name|TIntermNode
modifier|*
name|replacement
parameter_list|)
block|{
name|REPLACE_IF_IS
argument_list|(
name|mInit
argument_list|,
name|TIntermTyped
argument_list|,
name|original
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
name|REPLACE_IF_IS
argument_list|(
name|mStatementList
argument_list|,
name|TIntermAggregate
argument_list|,
name|original
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|replaceChildNode
name|bool
name|TIntermCase
operator|::
name|replaceChildNode
parameter_list|(
name|TIntermNode
modifier|*
name|original
parameter_list|,
name|TIntermNode
modifier|*
name|replacement
parameter_list|)
block|{
name|REPLACE_IF_IS
argument_list|(
name|mCondition
argument_list|,
name|TIntermTyped
argument_list|,
name|original
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Say whether or not an operation node changes the value of a variable.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|isAssignment
name|bool
name|TIntermOperator
operator|::
name|isAssignment
parameter_list|()
specifier|const
block|{
switch|switch
condition|(
name|mOp
condition|)
block|{
case|case
name|EOpPostIncrement
case|:
case|case
name|EOpPostDecrement
case|:
case|case
name|EOpPreIncrement
case|:
case|case
name|EOpPreDecrement
case|:
case|case
name|EOpAssign
case|:
case|case
name|EOpAddAssign
case|:
case|case
name|EOpSubAssign
case|:
case|case
name|EOpMulAssign
case|:
case|case
name|EOpVectorTimesMatrixAssign
case|:
case|case
name|EOpVectorTimesScalarAssign
case|:
case|case
name|EOpMatrixTimesScalarAssign
case|:
case|case
name|EOpMatrixTimesMatrixAssign
case|:
case|case
name|EOpDivAssign
case|:
case|case
name|EOpIModAssign
case|:
case|case
name|EOpBitShiftLeftAssign
case|:
case|case
name|EOpBitShiftRightAssign
case|:
case|case
name|EOpBitwiseAndAssign
case|:
case|case
name|EOpBitwiseXorAssign
case|:
case|case
name|EOpBitwiseOrAssign
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// returns true if the operator is for one of the constructors
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|isConstructor
name|bool
name|TIntermOperator
operator|::
name|isConstructor
parameter_list|()
specifier|const
block|{
switch|switch
condition|(
name|mOp
condition|)
block|{
case|case
name|EOpConstructVec2
case|:
case|case
name|EOpConstructVec3
case|:
case|case
name|EOpConstructVec4
case|:
case|case
name|EOpConstructMat2
case|:
case|case
name|EOpConstructMat3
case|:
case|case
name|EOpConstructMat4
case|:
case|case
name|EOpConstructFloat
case|:
case|case
name|EOpConstructIVec2
case|:
case|case
name|EOpConstructIVec3
case|:
case|case
name|EOpConstructIVec4
case|:
case|case
name|EOpConstructInt
case|:
case|case
name|EOpConstructUVec2
case|:
case|case
name|EOpConstructUVec3
case|:
case|case
name|EOpConstructUVec4
case|:
case|case
name|EOpConstructUInt
case|:
case|case
name|EOpConstructBVec2
case|:
case|case
name|EOpConstructBVec3
case|:
case|case
name|EOpConstructBVec4
case|:
case|case
name|EOpConstructBool
case|:
case|case
name|EOpConstructStruct
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Make sure the type of a unary operator is appropriate for its
end_comment
begin_comment
comment|// combination of operation and operand type.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|promote
name|void
name|TIntermUnary
operator|::
name|promote
parameter_list|(
specifier|const
name|TType
modifier|*
name|funcReturnType
parameter_list|)
block|{
switch|switch
condition|(
name|mOp
condition|)
block|{
case|case
name|EOpFloatBitsToInt
case|:
case|case
name|EOpFloatBitsToUint
case|:
case|case
name|EOpIntBitsToFloat
case|:
case|case
name|EOpUintBitsToFloat
case|:
case|case
name|EOpPackSnorm2x16
case|:
case|case
name|EOpPackUnorm2x16
case|:
case|case
name|EOpPackHalf2x16
case|:
case|case
name|EOpUnpackSnorm2x16
case|:
case|case
name|EOpUnpackUnorm2x16
case|:
name|mType
operator|.
name|setPrecision
argument_list|(
name|EbpHigh
argument_list|)
expr_stmt|;
break|break;
case|case
name|EOpUnpackHalf2x16
case|:
name|mType
operator|.
name|setPrecision
argument_list|(
name|EbpMedium
argument_list|)
expr_stmt|;
break|break;
default|default:
name|setType
argument_list|(
name|mOperand
operator|->
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcReturnType
operator|!=
literal|nullptr
condition|)
block|{
if|if
condition|(
name|funcReturnType
operator|->
name|getBasicType
argument_list|()
operator|==
name|EbtBool
condition|)
block|{
comment|// Bool types should not have precision.
name|setType
argument_list|(
operator|*
name|funcReturnType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Precision of the node has been set based on the operand.
name|setTypePreservePrecision
argument_list|(
operator|*
name|funcReturnType
argument_list|)
expr_stmt|;
block|}
block|}
name|mType
operator|.
name|setQualifier
argument_list|(
name|EvqTemporary
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Establishes the type of the resultant operation, as well as
end_comment
begin_comment
comment|// makes the operator the correct one for the operands.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// For lots of operations it should already be established that the operand
end_comment
begin_comment
comment|// combination is valid, but returns false if operator can't work on operands.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|promote
name|bool
name|TIntermBinary
operator|::
name|promote
parameter_list|(
name|TInfoSink
modifier|&
name|infoSink
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|mLeft
operator|->
name|isArray
argument_list|()
operator|==
name|mRight
operator|->
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
comment|//
comment|// Base assumption:  just make the type the same as the left
comment|// operand.  Then only deviations from this need be coded.
comment|//
name|setType
argument_list|(
name|mLeft
operator|->
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// The result gets promoted to the highest precision.
name|TPrecision
name|higherPrecision
init|=
name|GetHigherPrecision
argument_list|(
name|mLeft
operator|->
name|getPrecision
argument_list|()
argument_list|,
name|mRight
operator|->
name|getPrecision
argument_list|()
argument_list|)
decl_stmt|;
name|getTypePointer
argument_list|()
operator|->
name|setPrecision
argument_list|(
name|higherPrecision
argument_list|)
expr_stmt|;
comment|// Binary operations results in temporary variables unless both
comment|// operands are const.
if|if
condition|(
name|mLeft
operator|->
name|getQualifier
argument_list|()
operator|!=
name|EvqConst
operator|||
name|mRight
operator|->
name|getQualifier
argument_list|()
operator|!=
name|EvqConst
condition|)
block|{
name|getTypePointer
argument_list|()
operator|->
name|setQualifier
argument_list|(
name|EvqTemporary
argument_list|)
expr_stmt|;
block|}
specifier|const
name|int
name|nominalSize
init|=
name|std
operator|::
name|max
argument_list|(
name|mLeft
operator|->
name|getNominalSize
argument_list|()
argument_list|,
name|mRight
operator|->
name|getNominalSize
argument_list|()
argument_list|)
decl_stmt|;
comment|//
comment|// All scalars or structs. Code after this test assumes this case is removed!
comment|//
if|if
condition|(
name|nominalSize
operator|==
literal|1
condition|)
block|{
switch|switch
condition|(
name|mOp
condition|)
block|{
comment|//
comment|// Promote to conditional
comment|//
case|case
name|EOpEqual
case|:
case|case
name|EOpNotEqual
case|:
case|case
name|EOpLessThan
case|:
case|case
name|EOpGreaterThan
case|:
case|case
name|EOpLessThanEqual
case|:
case|case
name|EOpGreaterThanEqual
case|:
name|setType
argument_list|(
name|TType
argument_list|(
name|EbtBool
argument_list|,
name|EbpUndefined
argument_list|)
argument_list|)
expr_stmt|;
break|break;
comment|//
comment|// And and Or operate on conditionals
comment|//
case|case
name|EOpLogicalAnd
case|:
case|case
name|EOpLogicalXor
case|:
case|case
name|EOpLogicalOr
case|:
name|ASSERT
argument_list|(
name|mLeft
operator|->
name|getBasicType
argument_list|()
operator|==
name|EbtBool
operator|&&
name|mRight
operator|->
name|getBasicType
argument_list|()
operator|==
name|EbtBool
argument_list|)
expr_stmt|;
name|setType
argument_list|(
name|TType
argument_list|(
name|EbtBool
argument_list|,
name|EbpUndefined
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
literal|true
return|;
block|}
comment|// If we reach here, at least one of the operands is vector or matrix.
comment|// The other operand could be a scalar, vector, or matrix.
comment|// Can these two operands be combined?
comment|//
name|TBasicType
name|basicType
init|=
name|mLeft
operator|->
name|getBasicType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|mOp
condition|)
block|{
case|case
name|EOpMul
case|:
if|if
condition|(
operator|!
name|mLeft
operator|->
name|isMatrix
argument_list|()
operator|&&
name|mRight
operator|->
name|isMatrix
argument_list|()
condition|)
block|{
if|if
condition|(
name|mLeft
operator|->
name|isVector
argument_list|()
condition|)
block|{
name|mOp
operator|=
name|EOpVectorTimesMatrix
expr_stmt|;
name|setType
argument_list|(
name|TType
argument_list|(
name|basicType
argument_list|,
name|higherPrecision
argument_list|,
name|EvqTemporary
argument_list|,
name|mRight
operator|->
name|getCols
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mOp
operator|=
name|EOpMatrixTimesScalar
expr_stmt|;
name|setType
argument_list|(
name|TType
argument_list|(
name|basicType
argument_list|,
name|higherPrecision
argument_list|,
name|EvqTemporary
argument_list|,
name|mRight
operator|->
name|getCols
argument_list|()
argument_list|,
name|mRight
operator|->
name|getRows
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|mLeft
operator|->
name|isMatrix
argument_list|()
operator|&&
operator|!
name|mRight
operator|->
name|isMatrix
argument_list|()
condition|)
block|{
if|if
condition|(
name|mRight
operator|->
name|isVector
argument_list|()
condition|)
block|{
name|mOp
operator|=
name|EOpMatrixTimesVector
expr_stmt|;
name|setType
argument_list|(
name|TType
argument_list|(
name|basicType
argument_list|,
name|higherPrecision
argument_list|,
name|EvqTemporary
argument_list|,
name|mLeft
operator|->
name|getRows
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mOp
operator|=
name|EOpMatrixTimesScalar
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|mLeft
operator|->
name|isMatrix
argument_list|()
operator|&&
name|mRight
operator|->
name|isMatrix
argument_list|()
condition|)
block|{
name|mOp
operator|=
name|EOpMatrixTimesMatrix
expr_stmt|;
name|setType
argument_list|(
name|TType
argument_list|(
name|basicType
argument_list|,
name|higherPrecision
argument_list|,
name|EvqTemporary
argument_list|,
name|mRight
operator|->
name|getCols
argument_list|()
argument_list|,
name|mLeft
operator|->
name|getRows
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|mLeft
operator|->
name|isMatrix
argument_list|()
operator|&&
operator|!
name|mRight
operator|->
name|isMatrix
argument_list|()
condition|)
block|{
if|if
condition|(
name|mLeft
operator|->
name|isVector
argument_list|()
operator|&&
name|mRight
operator|->
name|isVector
argument_list|()
condition|)
block|{
comment|// leave as component product
block|}
elseif|else
if|if
condition|(
name|mLeft
operator|->
name|isVector
argument_list|()
operator|||
name|mRight
operator|->
name|isVector
argument_list|()
condition|)
block|{
name|mOp
operator|=
name|EOpVectorTimesScalar
expr_stmt|;
name|setType
argument_list|(
name|TType
argument_list|(
name|basicType
argument_list|,
name|higherPrecision
argument_list|,
name|EvqTemporary
argument_list|,
name|nominalSize
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Missing elses"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|ValidateMultiplication
argument_list|(
name|mOp
argument_list|,
name|mLeft
operator|->
name|getType
argument_list|()
argument_list|,
name|mRight
operator|->
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
name|EOpMulAssign
case|:
if|if
condition|(
operator|!
name|mLeft
operator|->
name|isMatrix
argument_list|()
operator|&&
name|mRight
operator|->
name|isMatrix
argument_list|()
condition|)
block|{
if|if
condition|(
name|mLeft
operator|->
name|isVector
argument_list|()
condition|)
block|{
name|mOp
operator|=
name|EOpVectorTimesMatrixAssign
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|mLeft
operator|->
name|isMatrix
argument_list|()
operator|&&
operator|!
name|mRight
operator|->
name|isMatrix
argument_list|()
condition|)
block|{
if|if
condition|(
name|mRight
operator|->
name|isVector
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|mOp
operator|=
name|EOpMatrixTimesScalarAssign
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|mLeft
operator|->
name|isMatrix
argument_list|()
operator|&&
name|mRight
operator|->
name|isMatrix
argument_list|()
condition|)
block|{
name|mOp
operator|=
name|EOpMatrixTimesMatrixAssign
expr_stmt|;
name|setType
argument_list|(
name|TType
argument_list|(
name|basicType
argument_list|,
name|higherPrecision
argument_list|,
name|EvqTemporary
argument_list|,
name|mRight
operator|->
name|getCols
argument_list|()
argument_list|,
name|mLeft
operator|->
name|getRows
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|mLeft
operator|->
name|isMatrix
argument_list|()
operator|&&
operator|!
name|mRight
operator|->
name|isMatrix
argument_list|()
condition|)
block|{
if|if
condition|(
name|mLeft
operator|->
name|isVector
argument_list|()
operator|&&
name|mRight
operator|->
name|isVector
argument_list|()
condition|)
block|{
comment|// leave as component product
block|}
elseif|else
if|if
condition|(
name|mLeft
operator|->
name|isVector
argument_list|()
operator|||
name|mRight
operator|->
name|isVector
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|mLeft
operator|->
name|isVector
argument_list|()
condition|)
return|return
literal|false
return|;
name|mOp
operator|=
name|EOpVectorTimesScalarAssign
expr_stmt|;
name|setType
argument_list|(
name|TType
argument_list|(
name|basicType
argument_list|,
name|higherPrecision
argument_list|,
name|EvqTemporary
argument_list|,
name|mLeft
operator|->
name|getNominalSize
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Missing elses"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|ValidateMultiplication
argument_list|(
name|mOp
argument_list|,
name|mLeft
operator|->
name|getType
argument_list|()
argument_list|,
name|mRight
operator|->
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
name|EOpAssign
case|:
case|case
name|EOpInitialize
case|:
comment|// No more additional checks are needed.
name|ASSERT
argument_list|(
operator|(
name|mLeft
operator|->
name|getNominalSize
argument_list|()
operator|==
name|mRight
operator|->
name|getNominalSize
argument_list|()
operator|)
operator|&&
operator|(
name|mLeft
operator|->
name|getSecondarySize
argument_list|()
operator|==
name|mRight
operator|->
name|getSecondarySize
argument_list|()
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|EOpAdd
case|:
case|case
name|EOpSub
case|:
case|case
name|EOpDiv
case|:
case|case
name|EOpIMod
case|:
case|case
name|EOpBitShiftLeft
case|:
case|case
name|EOpBitShiftRight
case|:
case|case
name|EOpBitwiseAnd
case|:
case|case
name|EOpBitwiseXor
case|:
case|case
name|EOpBitwiseOr
case|:
case|case
name|EOpAddAssign
case|:
case|case
name|EOpSubAssign
case|:
case|case
name|EOpDivAssign
case|:
case|case
name|EOpIModAssign
case|:
case|case
name|EOpBitShiftLeftAssign
case|:
case|case
name|EOpBitShiftRightAssign
case|:
case|case
name|EOpBitwiseAndAssign
case|:
case|case
name|EOpBitwiseXorAssign
case|:
case|case
name|EOpBitwiseOrAssign
case|:
if|if
condition|(
operator|(
name|mLeft
operator|->
name|isMatrix
argument_list|()
operator|&&
name|mRight
operator|->
name|isVector
argument_list|()
operator|)
operator|||
operator|(
name|mLeft
operator|->
name|isVector
argument_list|()
operator|&&
name|mRight
operator|->
name|isMatrix
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Are the sizes compatible?
if|if
condition|(
name|mLeft
operator|->
name|getNominalSize
argument_list|()
operator|!=
name|mRight
operator|->
name|getNominalSize
argument_list|()
operator|||
name|mLeft
operator|->
name|getSecondarySize
argument_list|()
operator|!=
name|mRight
operator|->
name|getSecondarySize
argument_list|()
condition|)
block|{
comment|// If the nominal sizes of operands do not match:
comment|// One of them must be a scalar.
if|if
condition|(
operator|!
name|mLeft
operator|->
name|isScalar
argument_list|()
operator|&&
operator|!
name|mRight
operator|->
name|isScalar
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// In the case of compound assignment other than multiply-assign,
comment|// the right side needs to be a scalar. Otherwise a vector/matrix
comment|// would be assigned to a scalar. A scalar can't be shifted by a
comment|// vector either.
if|if
condition|(
operator|!
name|mRight
operator|->
name|isScalar
argument_list|()
operator|&&
operator|(
name|isAssignment
argument_list|()
operator|||
name|mOp
operator|==
name|EOpBitShiftLeft
operator|||
name|mOp
operator|==
name|EOpBitShiftRight
operator|)
condition|)
return|return
literal|false
return|;
block|}
block|{
specifier|const
name|int
name|secondarySize
init|=
name|std
operator|::
name|max
argument_list|(
name|mLeft
operator|->
name|getSecondarySize
argument_list|()
argument_list|,
name|mRight
operator|->
name|getSecondarySize
argument_list|()
argument_list|)
decl_stmt|;
name|setType
argument_list|(
name|TType
argument_list|(
name|basicType
argument_list|,
name|higherPrecision
argument_list|,
name|EvqTemporary
argument_list|,
name|nominalSize
argument_list|,
name|secondarySize
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mLeft
operator|->
name|isArray
argument_list|()
condition|)
block|{
name|ASSERT
argument_list|(
name|mLeft
operator|->
name|getArraySize
argument_list|()
operator|==
name|mRight
operator|->
name|getArraySize
argument_list|()
argument_list|)
expr_stmt|;
name|mType
operator|.
name|setArraySize
argument_list|(
name|mLeft
operator|->
name|getArraySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|EOpEqual
case|:
case|case
name|EOpNotEqual
case|:
case|case
name|EOpLessThan
case|:
case|case
name|EOpGreaterThan
case|:
case|case
name|EOpLessThanEqual
case|:
case|case
name|EOpGreaterThanEqual
case|:
name|ASSERT
argument_list|(
operator|(
name|mLeft
operator|->
name|getNominalSize
argument_list|()
operator|==
name|mRight
operator|->
name|getNominalSize
argument_list|()
operator|)
operator|&&
operator|(
name|mLeft
operator|->
name|getSecondarySize
argument_list|()
operator|==
name|mRight
operator|->
name|getSecondarySize
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|setType
argument_list|(
name|TType
argument_list|(
name|EbtBool
argument_list|,
name|EbpUndefined
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// The fold functions see if an operation on a constant can be done in place,
end_comment
begin_comment
comment|// without generating run-time code.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Returns the node to keep using, which may or may not be the node passed in.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|fold
name|TIntermTyped
modifier|*
name|TIntermConstantUnion
operator|::
name|fold
parameter_list|(
name|TOperator
name|op
parameter_list|,
name|TIntermTyped
modifier|*
name|constantNode
parameter_list|,
name|TInfoSink
modifier|&
name|infoSink
parameter_list|)
block|{
name|ConstantUnion
modifier|*
name|unionArray
init|=
name|getUnionArrayPointer
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|unionArray
condition|)
return|return
name|NULL
return|;
name|size_t
name|objectSize
init|=
name|getType
argument_list|()
operator|.
name|getObjectSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|constantNode
condition|)
block|{
comment|// binary operations
name|TIntermConstantUnion
modifier|*
name|node
init|=
name|constantNode
operator|->
name|getAsConstantUnion
argument_list|()
decl_stmt|;
name|ConstantUnion
modifier|*
name|rightUnionArray
init|=
name|node
operator|->
name|getUnionArrayPointer
argument_list|()
decl_stmt|;
name|TType
name|returnType
init|=
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rightUnionArray
condition|)
return|return
name|NULL
return|;
comment|// for a case like float f = 1.2 + vec4(2,3,4,5);
if|if
condition|(
name|constantNode
operator|->
name|getType
argument_list|()
operator|.
name|getObjectSize
argument_list|()
operator|==
literal|1
operator|&&
name|objectSize
operator|>
literal|1
condition|)
block|{
name|rightUnionArray
operator|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
operator|++
name|i
control|)
block|{
name|rightUnionArray
index|[
name|i
index|]
operator|=
operator|*
name|node
operator|->
name|getUnionArrayPointer
argument_list|()
expr_stmt|;
block|}
name|returnType
operator|=
name|getType
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|constantNode
operator|->
name|getType
argument_list|()
operator|.
name|getObjectSize
argument_list|()
operator|>
literal|1
operator|&&
name|objectSize
operator|==
literal|1
condition|)
block|{
comment|// for a case like float f = vec4(2,3,4,5) + 1.2;
name|unionArray
operator|=
operator|new
name|ConstantUnion
index|[
name|constantNode
operator|->
name|getType
argument_list|()
operator|.
name|getObjectSize
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|constantNode
operator|->
name|getType
argument_list|()
operator|.
name|getObjectSize
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|unionArray
index|[
name|i
index|]
operator|=
operator|*
name|getUnionArrayPointer
argument_list|()
expr_stmt|;
block|}
name|returnType
operator|=
name|node
operator|->
name|getType
argument_list|()
expr_stmt|;
name|objectSize
operator|=
name|constantNode
operator|->
name|getType
argument_list|()
operator|.
name|getObjectSize
argument_list|()
expr_stmt|;
block|}
name|ConstantUnion
modifier|*
name|tempConstArray
init|=
name|NULL
decl_stmt|;
name|TIntermConstantUnion
modifier|*
name|tempNode
decl_stmt|;
name|bool
name|boolNodeFlag
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|EOpAdd
case|:
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
name|tempConstArray
index|[
name|i
index|]
operator|=
name|unionArray
index|[
name|i
index|]
operator|+
name|rightUnionArray
index|[
name|i
index|]
expr_stmt|;
break|break;
case|case
name|EOpSub
case|:
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
name|tempConstArray
index|[
name|i
index|]
operator|=
name|unionArray
index|[
name|i
index|]
operator|-
name|rightUnionArray
index|[
name|i
index|]
expr_stmt|;
break|break;
case|case
name|EOpMul
case|:
case|case
name|EOpVectorTimesScalar
case|:
case|case
name|EOpMatrixTimesScalar
case|:
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
name|tempConstArray
index|[
name|i
index|]
operator|=
name|unionArray
index|[
name|i
index|]
operator|*
name|rightUnionArray
index|[
name|i
index|]
expr_stmt|;
break|break;
case|case
name|EOpMatrixTimesMatrix
case|:
block|{
if|if
condition|(
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
operator|!=
name|EbtFloat
operator|||
name|node
operator|->
name|getBasicType
argument_list|()
operator|!=
name|EbtFloat
condition|)
block|{
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Constant Folding cannot be done for matrix multiply"
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
specifier|const
name|int
name|leftCols
init|=
name|getCols
argument_list|()
decl_stmt|;
specifier|const
name|int
name|leftRows
init|=
name|getRows
argument_list|()
decl_stmt|;
specifier|const
name|int
name|rightCols
init|=
name|constantNode
operator|->
name|getType
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
specifier|const
name|int
name|rightRows
init|=
name|constantNode
operator|->
name|getType
argument_list|()
operator|.
name|getRows
argument_list|()
decl_stmt|;
specifier|const
name|int
name|resultCols
init|=
name|rightCols
decl_stmt|;
specifier|const
name|int
name|resultRows
init|=
name|leftRows
decl_stmt|;
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|resultCols
operator|*
name|resultRows
index|]
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|resultRows
condition|;
name|row
operator|++
control|)
block|{
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|resultCols
condition|;
name|column
operator|++
control|)
block|{
name|tempConstArray
index|[
name|resultRows
operator|*
name|column
operator|+
name|row
index|]
operator|.
name|setFConst
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leftCols
condition|;
name|i
operator|++
control|)
block|{
name|tempConstArray
index|[
name|resultRows
operator|*
name|column
operator|+
name|row
index|]
operator|.
name|setFConst
argument_list|(
name|tempConstArray
index|[
name|resultRows
operator|*
name|column
operator|+
name|row
index|]
operator|.
name|getFConst
argument_list|()
operator|+
name|unionArray
index|[
name|i
operator|*
name|leftRows
operator|+
name|row
index|]
operator|.
name|getFConst
argument_list|()
operator|*
name|rightUnionArray
index|[
name|column
operator|*
name|rightRows
operator|+
name|i
index|]
operator|.
name|getFConst
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// update return type for matrix product
name|returnType
operator|.
name|setPrimarySize
argument_list|(
name|resultCols
argument_list|)
expr_stmt|;
name|returnType
operator|.
name|setSecondarySize
argument_list|(
name|resultRows
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|EOpDiv
case|:
case|case
name|EOpIMod
case|:
block|{
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
condition|)
block|{
case|case
name|EbtFloat
case|:
if|if
condition|(
name|rightUnionArray
index|[
name|i
index|]
operator|==
literal|0.0f
condition|)
block|{
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixWarning
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Divide by zero error during constant folding"
argument_list|)
expr_stmt|;
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setFConst
argument_list|(
name|unionArray
index|[
name|i
index|]
operator|.
name|getFConst
argument_list|()
operator|<
literal|0
condition|?
operator|-
name|FLT_MAX
else|:
name|FLT_MAX
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ASSERT
argument_list|(
name|op
operator|==
name|EOpDiv
argument_list|)
expr_stmt|;
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setFConst
argument_list|(
name|unionArray
index|[
name|i
index|]
operator|.
name|getFConst
argument_list|()
operator|/
name|rightUnionArray
index|[
name|i
index|]
operator|.
name|getFConst
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|EbtInt
case|:
if|if
condition|(
name|rightUnionArray
index|[
name|i
index|]
operator|==
literal|0
condition|)
block|{
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixWarning
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Divide by zero error during constant folding"
argument_list|)
expr_stmt|;
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setIConst
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|op
operator|==
name|EOpDiv
condition|)
block|{
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setIConst
argument_list|(
name|unionArray
index|[
name|i
index|]
operator|.
name|getIConst
argument_list|()
operator|/
name|rightUnionArray
index|[
name|i
index|]
operator|.
name|getIConst
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ASSERT
argument_list|(
name|op
operator|==
name|EOpIMod
argument_list|)
expr_stmt|;
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setIConst
argument_list|(
name|unionArray
index|[
name|i
index|]
operator|.
name|getIConst
argument_list|()
operator|%
name|rightUnionArray
index|[
name|i
index|]
operator|.
name|getIConst
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|EbtUInt
case|:
if|if
condition|(
name|rightUnionArray
index|[
name|i
index|]
operator|==
literal|0
condition|)
block|{
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixWarning
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Divide by zero error during constant folding"
argument_list|)
expr_stmt|;
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setUConst
argument_list|(
name|UINT_MAX
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|op
operator|==
name|EOpDiv
condition|)
block|{
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setUConst
argument_list|(
name|unionArray
index|[
name|i
index|]
operator|.
name|getUConst
argument_list|()
operator|/
name|rightUnionArray
index|[
name|i
index|]
operator|.
name|getUConst
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ASSERT
argument_list|(
name|op
operator|==
name|EOpIMod
argument_list|)
expr_stmt|;
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setUConst
argument_list|(
name|unionArray
index|[
name|i
index|]
operator|.
name|getUConst
argument_list|()
operator|%
name|rightUnionArray
index|[
name|i
index|]
operator|.
name|getUConst
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Constant folding cannot be done for \"/\""
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
block|}
block|}
break|break;
case|case
name|EOpMatrixTimesVector
case|:
block|{
if|if
condition|(
name|node
operator|->
name|getBasicType
argument_list|()
operator|!=
name|EbtFloat
condition|)
block|{
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Constant Folding cannot be done for matrix times vector"
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
specifier|const
name|int
name|matrixCols
init|=
name|getCols
argument_list|()
decl_stmt|;
specifier|const
name|int
name|matrixRows
init|=
name|getRows
argument_list|()
decl_stmt|;
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|matrixRows
index|]
expr_stmt|;
for|for
control|(
name|int
name|matrixRow
init|=
literal|0
init|;
name|matrixRow
operator|<
name|matrixRows
condition|;
name|matrixRow
operator|++
control|)
block|{
name|tempConstArray
index|[
name|matrixRow
index|]
operator|.
name|setFConst
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|matrixCols
condition|;
name|col
operator|++
control|)
block|{
name|tempConstArray
index|[
name|matrixRow
index|]
operator|.
name|setFConst
argument_list|(
name|tempConstArray
index|[
name|matrixRow
index|]
operator|.
name|getFConst
argument_list|()
operator|+
name|unionArray
index|[
name|col
operator|*
name|matrixRows
operator|+
name|matrixRow
index|]
operator|.
name|getFConst
argument_list|()
operator|*
name|rightUnionArray
index|[
name|col
index|]
operator|.
name|getFConst
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|returnType
operator|=
name|node
operator|->
name|getType
argument_list|()
expr_stmt|;
name|returnType
operator|.
name|setPrimarySize
argument_list|(
name|matrixRows
argument_list|)
expr_stmt|;
name|tempNode
operator|=
operator|new
name|TIntermConstantUnion
argument_list|(
name|tempConstArray
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|tempNode
operator|->
name|setLine
argument_list|(
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tempNode
return|;
block|}
case|case
name|EOpVectorTimesMatrix
case|:
block|{
if|if
condition|(
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
operator|!=
name|EbtFloat
condition|)
block|{
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Constant Folding cannot be done for vector times matrix"
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
specifier|const
name|int
name|matrixCols
init|=
name|constantNode
operator|->
name|getType
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
specifier|const
name|int
name|matrixRows
init|=
name|constantNode
operator|->
name|getType
argument_list|()
operator|.
name|getRows
argument_list|()
decl_stmt|;
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|matrixCols
index|]
expr_stmt|;
for|for
control|(
name|int
name|matrixCol
init|=
literal|0
init|;
name|matrixCol
operator|<
name|matrixCols
condition|;
name|matrixCol
operator|++
control|)
block|{
name|tempConstArray
index|[
name|matrixCol
index|]
operator|.
name|setFConst
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|matrixRow
init|=
literal|0
init|;
name|matrixRow
operator|<
name|matrixRows
condition|;
name|matrixRow
operator|++
control|)
block|{
name|tempConstArray
index|[
name|matrixCol
index|]
operator|.
name|setFConst
argument_list|(
name|tempConstArray
index|[
name|matrixCol
index|]
operator|.
name|getFConst
argument_list|()
operator|+
name|unionArray
index|[
name|matrixRow
index|]
operator|.
name|getFConst
argument_list|()
operator|*
name|rightUnionArray
index|[
name|matrixCol
operator|*
name|matrixRows
operator|+
name|matrixRow
index|]
operator|.
name|getFConst
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|returnType
operator|.
name|setPrimarySize
argument_list|(
name|matrixCols
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|EOpLogicalAnd
case|:
comment|// this code is written for possible future use,
comment|// will not get executed currently
block|{
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
block|{
name|tempConstArray
index|[
name|i
index|]
operator|=
name|unionArray
index|[
name|i
index|]
operator|&&
name|rightUnionArray
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
break|break;
case|case
name|EOpLogicalOr
case|:
comment|// this code is written for possible future use,
comment|// will not get executed currently
block|{
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
block|{
name|tempConstArray
index|[
name|i
index|]
operator|=
name|unionArray
index|[
name|i
index|]
operator|||
name|rightUnionArray
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
break|break;
case|case
name|EOpLogicalXor
case|:
block|{
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
condition|)
block|{
case|case
name|EbtBool
case|:
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setBConst
argument_list|(
name|unionArray
index|[
name|i
index|]
operator|==
name|rightUnionArray
index|[
name|i
index|]
condition|?
literal|false
else|:
literal|true
argument_list|)
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
break|break;
case|case
name|EOpBitwiseAnd
case|:
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
name|tempConstArray
index|[
name|i
index|]
operator|=
name|unionArray
index|[
name|i
index|]
operator|&
name|rightUnionArray
index|[
name|i
index|]
expr_stmt|;
break|break;
case|case
name|EOpBitwiseXor
case|:
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
name|tempConstArray
index|[
name|i
index|]
operator|=
name|unionArray
index|[
name|i
index|]
operator|^
name|rightUnionArray
index|[
name|i
index|]
expr_stmt|;
break|break;
case|case
name|EOpBitwiseOr
case|:
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
name|tempConstArray
index|[
name|i
index|]
operator|=
name|unionArray
index|[
name|i
index|]
operator||
name|rightUnionArray
index|[
name|i
index|]
expr_stmt|;
break|break;
case|case
name|EOpBitShiftLeft
case|:
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
name|tempConstArray
index|[
name|i
index|]
operator|=
name|unionArray
index|[
name|i
index|]
operator|<<
name|rightUnionArray
index|[
name|i
index|]
expr_stmt|;
break|break;
case|case
name|EOpBitShiftRight
case|:
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
name|tempConstArray
index|[
name|i
index|]
operator|=
name|unionArray
index|[
name|i
index|]
operator|>>
name|rightUnionArray
index|[
name|i
index|]
expr_stmt|;
break|break;
case|case
name|EOpLessThan
case|:
name|ASSERT
argument_list|(
name|objectSize
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
literal|1
index|]
expr_stmt|;
name|tempConstArray
operator|->
name|setBConst
argument_list|(
operator|*
name|unionArray
operator|<
operator|*
name|rightUnionArray
argument_list|)
expr_stmt|;
name|returnType
operator|=
name|TType
argument_list|(
name|EbtBool
argument_list|,
name|EbpUndefined
argument_list|,
name|EvqConst
argument_list|)
expr_stmt|;
break|break;
case|case
name|EOpGreaterThan
case|:
name|ASSERT
argument_list|(
name|objectSize
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
literal|1
index|]
expr_stmt|;
name|tempConstArray
operator|->
name|setBConst
argument_list|(
operator|*
name|unionArray
operator|>
operator|*
name|rightUnionArray
argument_list|)
expr_stmt|;
name|returnType
operator|=
name|TType
argument_list|(
name|EbtBool
argument_list|,
name|EbpUndefined
argument_list|,
name|EvqConst
argument_list|)
expr_stmt|;
break|break;
case|case
name|EOpLessThanEqual
case|:
block|{
name|ASSERT
argument_list|(
name|objectSize
operator|==
literal|1
argument_list|)
expr_stmt|;
name|ConstantUnion
name|constant
decl_stmt|;
name|constant
operator|.
name|setBConst
argument_list|(
operator|*
name|unionArray
operator|>
operator|*
name|rightUnionArray
argument_list|)
expr_stmt|;
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
literal|1
index|]
expr_stmt|;
name|tempConstArray
operator|->
name|setBConst
argument_list|(
operator|!
name|constant
operator|.
name|getBConst
argument_list|()
argument_list|)
expr_stmt|;
name|returnType
operator|=
name|TType
argument_list|(
name|EbtBool
argument_list|,
name|EbpUndefined
argument_list|,
name|EvqConst
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EOpGreaterThanEqual
case|:
block|{
name|ASSERT
argument_list|(
name|objectSize
operator|==
literal|1
argument_list|)
expr_stmt|;
name|ConstantUnion
name|constant
decl_stmt|;
name|constant
operator|.
name|setBConst
argument_list|(
operator|*
name|unionArray
operator|<
operator|*
name|rightUnionArray
argument_list|)
expr_stmt|;
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
literal|1
index|]
expr_stmt|;
name|tempConstArray
operator|->
name|setBConst
argument_list|(
operator|!
name|constant
operator|.
name|getBConst
argument_list|()
argument_list|)
expr_stmt|;
name|returnType
operator|=
name|TType
argument_list|(
name|EbtBool
argument_list|,
name|EbpUndefined
argument_list|,
name|EvqConst
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EOpEqual
case|:
if|if
condition|(
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
operator|==
name|EbtStruct
condition|)
block|{
if|if
condition|(
operator|!
name|CompareStructure
argument_list|(
name|node
operator|->
name|getType
argument_list|()
argument_list|,
name|node
operator|->
name|getUnionArrayPointer
argument_list|()
argument_list|,
name|unionArray
argument_list|)
condition|)
block|{
name|boolNodeFlag
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|unionArray
index|[
name|i
index|]
operator|!=
name|rightUnionArray
index|[
name|i
index|]
condition|)
block|{
name|boolNodeFlag
operator|=
literal|true
expr_stmt|;
break|break;
comment|// break out of for loop
block|}
block|}
block|}
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
literal|1
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|boolNodeFlag
condition|)
block|{
name|tempConstArray
operator|->
name|setBConst
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tempConstArray
operator|->
name|setBConst
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|tempNode
operator|=
operator|new
name|TIntermConstantUnion
argument_list|(
name|tempConstArray
argument_list|,
name|TType
argument_list|(
name|EbtBool
argument_list|,
name|EbpUndefined
argument_list|,
name|EvqConst
argument_list|)
argument_list|)
expr_stmt|;
name|tempNode
operator|->
name|setLine
argument_list|(
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tempNode
return|;
case|case
name|EOpNotEqual
case|:
if|if
condition|(
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
operator|==
name|EbtStruct
condition|)
block|{
if|if
condition|(
name|CompareStructure
argument_list|(
name|node
operator|->
name|getType
argument_list|()
argument_list|,
name|node
operator|->
name|getUnionArrayPointer
argument_list|()
argument_list|,
name|unionArray
argument_list|)
condition|)
block|{
name|boolNodeFlag
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|unionArray
index|[
name|i
index|]
operator|==
name|rightUnionArray
index|[
name|i
index|]
condition|)
block|{
name|boolNodeFlag
operator|=
literal|true
expr_stmt|;
break|break;
comment|// break out of for loop
block|}
block|}
block|}
name|tempConstArray
operator|=
operator|new
name|ConstantUnion
index|[
literal|1
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|boolNodeFlag
condition|)
block|{
name|tempConstArray
operator|->
name|setBConst
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tempConstArray
operator|->
name|setBConst
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|tempNode
operator|=
operator|new
name|TIntermConstantUnion
argument_list|(
name|tempConstArray
argument_list|,
name|TType
argument_list|(
name|EbtBool
argument_list|,
name|EbpUndefined
argument_list|,
name|EvqConst
argument_list|)
argument_list|)
expr_stmt|;
name|tempNode
operator|->
name|setLine
argument_list|(
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tempNode
return|;
default|default:
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Invalid operator for constant folding"
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|tempNode
operator|=
operator|new
name|TIntermConstantUnion
argument_list|(
name|tempConstArray
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|tempNode
operator|->
name|setLine
argument_list|(
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tempNode
return|;
block|}
else|else
block|{
comment|//
comment|// Do unary operations
comment|//
name|TIntermConstantUnion
modifier|*
name|newNode
init|=
literal|0
decl_stmt|;
name|ConstantUnion
modifier|*
name|tempConstArray
init|=
operator|new
name|ConstantUnion
index|[
name|objectSize
index|]
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSize
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|EOpNegative
case|:
switch|switch
condition|(
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
condition|)
block|{
case|case
name|EbtFloat
case|:
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setFConst
argument_list|(
operator|-
name|unionArray
index|[
name|i
index|]
operator|.
name|getFConst
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EbtInt
case|:
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setIConst
argument_list|(
operator|-
name|unionArray
index|[
name|i
index|]
operator|.
name|getIConst
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EbtUInt
case|:
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setUConst
argument_list|(
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
operator|-
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|unionArray
index|[
name|i
index|]
operator|.
name|getUConst
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Unary operation not folded into constant"
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
break|break;
case|case
name|EOpPositive
case|:
switch|switch
condition|(
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
condition|)
block|{
case|case
name|EbtFloat
case|:
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setFConst
argument_list|(
name|unionArray
index|[
name|i
index|]
operator|.
name|getFConst
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EbtInt
case|:
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setIConst
argument_list|(
name|unionArray
index|[
name|i
index|]
operator|.
name|getIConst
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EbtUInt
case|:
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setUConst
argument_list|(
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|unionArray
index|[
name|i
index|]
operator|.
name|getUConst
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Unary operation not folded into constant"
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
break|break;
case|case
name|EOpLogicalNot
case|:
comment|// this code is written for possible future use,
comment|// will not get executed currently
switch|switch
condition|(
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
condition|)
block|{
case|case
name|EbtBool
case|:
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setBConst
argument_list|(
operator|!
name|unionArray
index|[
name|i
index|]
operator|.
name|getBConst
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Unary operation not folded into constant"
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
break|break;
case|case
name|EOpBitwiseNot
case|:
switch|switch
condition|(
name|getType
argument_list|()
operator|.
name|getBasicType
argument_list|()
condition|)
block|{
case|case
name|EbtInt
case|:
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setIConst
argument_list|(
operator|~
name|unionArray
index|[
name|i
index|]
operator|.
name|getIConst
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EbtUInt
case|:
name|tempConstArray
index|[
name|i
index|]
operator|.
name|setUConst
argument_list|(
operator|~
name|unionArray
index|[
name|i
index|]
operator|.
name|getUConst
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|infoSink
operator|.
name|info
operator|.
name|message
argument_list|(
name|EPrefixInternalError
argument_list|,
name|getLine
argument_list|()
argument_list|,
literal|"Unary operation not folded into constant"
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
break|break;
default|default:
return|return
name|NULL
return|;
block|}
block|}
name|newNode
operator|=
operator|new
name|TIntermConstantUnion
argument_list|(
name|tempConstArray
argument_list|,
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|newNode
operator|->
name|setLine
argument_list|(
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newNode
return|;
block|}
block|}
end_function
begin_comment
comment|// static
end_comment
begin_function
DECL|function|hash
name|TString
name|TIntermTraverser
operator|::
name|hash
parameter_list|(
specifier|const
name|TString
modifier|&
name|name
parameter_list|,
name|ShHashFunction64
name|hashFunction
parameter_list|)
block|{
if|if
condition|(
name|hashFunction
operator|==
name|NULL
operator|||
name|name
operator|.
name|empty
argument_list|()
condition|)
return|return
name|name
return|;
name|khronos_uint64_t
name|number
init|=
call|(
modifier|*
name|hashFunction
call|)
argument_list|(
name|name
operator|.
name|c_str
argument_list|()
argument_list|,
name|name
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|TStringStream
name|stream
decl_stmt|;
name|stream
operator|<<
name|HASHED_NAME_PREFIX
operator|<<
name|std
operator|::
name|hex
operator|<<
name|number
expr_stmt|;
name|TString
name|hashedName
init|=
name|stream
operator|.
name|str
argument_list|()
decl_stmt|;
return|return
name|hashedName
return|;
block|}
end_function
begin_function
DECL|function|updateTree
name|void
name|TIntermTraverser
operator|::
name|updateTree
parameter_list|()
block|{
for|for
control|(
name|size_t
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|mReplacements
operator|.
name|size
argument_list|()
condition|;
operator|++
name|ii
control|)
block|{
specifier|const
name|NodeUpdateEntry
modifier|&
name|entry
init|=
name|mReplacements
index|[
name|ii
index|]
decl_stmt|;
name|ASSERT
argument_list|(
name|entry
operator|.
name|parent
argument_list|)
expr_stmt|;
name|bool
name|replaced
init|=
name|entry
operator|.
name|parent
operator|->
name|replaceChildNode
argument_list|(
name|entry
operator|.
name|original
argument_list|,
name|entry
operator|.
name|replacement
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|replaced
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|entry
operator|.
name|originalBecomesChildOfReplacement
condition|)
block|{
comment|// In AST traversing, a parent is visited before its children.
comment|// After we replace a node, if an immediate child is to
comment|// be replaced, we need to make sure we don't update the replaced
comment|// node; instead, we update the replacement node.
for|for
control|(
name|size_t
name|jj
init|=
name|ii
operator|+
literal|1
init|;
name|jj
operator|<
name|mReplacements
operator|.
name|size
argument_list|()
condition|;
operator|++
name|jj
control|)
block|{
name|NodeUpdateEntry
modifier|&
name|entry2
init|=
name|mReplacements
index|[
name|jj
index|]
decl_stmt|;
if|if
condition|(
name|entry2
operator|.
name|parent
operator|==
name|entry
operator|.
name|original
condition|)
name|entry2
operator|.
name|parent
operator|=
name|entry
operator|.
name|replacement
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
end_unit
