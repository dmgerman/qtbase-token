begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2010 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|__OSINCLUDE_H
end_ifndef
begin_define
DECL|macro|__OSINCLUDE_H
define|#
directive|define
name|__OSINCLUDE_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|// This file contains contains os-specific datatypes and
end_comment
begin_comment
comment|// declares any os-specific functions.
end_comment
begin_comment
comment|//
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|_WIN64
argument_list|)
end_if
begin_if
if|#
directive|if
name|defined
argument_list|(
name|WINAPI_FAMILY
argument_list|)
operator|&&
operator|(
name|WINAPI_FAMILY
operator|==
name|WINAPI_FAMILY_APP
operator|||
name|WINAPI_FAMILY
operator|==
name|WINAPI_FAMILY_PHONE_APP
operator|)
end_if
begin_define
DECL|macro|ANGLE_OS_WINRT
define|#
directive|define
name|ANGLE_OS_WINRT
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|ANGLE_OS_WIN
define|#
directive|define
name|ANGLE_OS_WIN
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__APPLE__
argument_list|)
operator|||
name|defined
argument_list|(
name|__linux__
argument_list|)
operator|||
expr|\
name|defined
argument_list|(
name|__FreeBSD__
argument_list|)
operator|||
name|defined
argument_list|(
name|__OpenBSD__
argument_list|)
operator|||
expr|\
name|defined
argument_list|(
name|__NetBSD__
argument_list|)
operator|||
name|defined
argument_list|(
name|__DragonFly__
argument_list|)
operator|||
expr|\
name|defined
argument_list|(
name|__sun
argument_list|)
operator|||
name|defined
argument_list|(
name|ANDROID
argument_list|)
operator|||
expr|\
name|defined
argument_list|(
name|__GLIBC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__GNU__
argument_list|)
operator|||
expr|\
name|defined
argument_list|(
name|__QNX__
argument_list|)
end_elif
begin_define
DECL|macro|ANGLE_OS_POSIX
define|#
directive|define
name|ANGLE_OS_POSIX
end_define
begin_else
else|#
directive|else
end_else
begin_error
error|#
directive|error
error|Unsupported platform.
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_OS_WIN
argument_list|)
operator|||
name|defined
argument_list|(
name|ANGLE_OS_WINRT
argument_list|)
end_if
begin_define
DECL|macro|STRICT
define|#
directive|define
name|STRICT
end_define
begin_define
DECL|macro|VC_EXTRALEAN
define|#
directive|define
name|VC_EXTRALEAN
value|1
end_define
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|ANGLE_OS_POSIX
argument_list|)
end_elif
begin_include
include|#
directive|include
file|<pthread.h>
end_include
begin_include
include|#
directive|include
file|<semaphore.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// ANGLE_OS_WIN
end_comment
begin_include
include|#
directive|include
file|"compiler/translator/compilerdebug.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Thread Local Storage Operations
end_comment
begin_comment
comment|//
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_OS_WIN
argument_list|)
end_if
begin_typedef
DECL|typedef|OS_TLSIndex
typedef|typedef
name|DWORD
name|OS_TLSIndex
typedef|;
end_typedef
begin_define
DECL|macro|OS_INVALID_TLS_INDEX
define|#
directive|define
name|OS_INVALID_TLS_INDEX
value|(TLS_OUT_OF_INDEXES)
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|ANGLE_OS_WINRT
argument_list|)
end_elif
begin_typedef
DECL|typedef|OS_TLSIndex
typedef|typedef
name|size_t
name|OS_TLSIndex
typedef|;
end_typedef
begin_define
DECL|macro|OS_INVALID_TLS_INDEX
define|#
directive|define
name|OS_INVALID_TLS_INDEX
value|((DWORD)0xFFFFFF)
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|ANGLE_OS_POSIX
argument_list|)
end_elif
begin_typedef
DECL|typedef|OS_TLSIndex
typedef|typedef
name|pthread_key_t
name|OS_TLSIndex
typedef|;
end_typedef
begin_define
DECL|macro|OS_INVALID_TLS_INDEX
define|#
directive|define
name|OS_INVALID_TLS_INDEX
value|(static_cast<OS_TLSIndex>(-1))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// ANGLE_OS_WIN
end_comment
begin_function_decl
name|OS_TLSIndex
name|OS_AllocTLSIndex
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
modifier|*
name|OS_GetTLSValue
parameter_list|(
name|OS_TLSIndex
name|nIndex
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|OS_SetTLSValue
parameter_list|(
name|OS_TLSIndex
name|nIndex
parameter_list|,
name|void
modifier|*
name|lpvValue
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|OS_FreeTLSIndex
parameter_list|(
name|OS_TLSIndex
name|nIndex
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// __OSINCLUDE_H
end_comment
end_unit
