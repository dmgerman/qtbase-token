begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMPILER_INITIALIZE_VARIABLES_H_
end_ifndef
begin_define
DECL|macro|COMPILER_INITIALIZE_VARIABLES_H_
define|#
directive|define
name|COMPILER_INITIALIZE_VARIABLES_H_
end_define
begin_include
include|#
directive|include
file|"compiler/translator/intermediate.h"
end_include
begin_decl_stmt
name|class
name|InitializeVariables
range|:
name|public
name|TIntermTraverser
block|{
name|public
operator|:
expr|struct
name|InitVariableInfo
block|{
name|TString
name|name
block|;
name|TType
name|type
block|;
name|InitVariableInfo
argument_list|(
specifier|const
name|TString
operator|&
name|_name
argument_list|,
specifier|const
name|TType
operator|&
name|_type
argument_list|)
operator|:
name|name
argument_list|(
name|_name
argument_list|)
block|,
name|type
argument_list|(
argument|_type
argument_list|)
block|{         }
block|}
block|;
typedef|typedef
name|TVector
operator|<
name|InitVariableInfo
operator|>
name|InitVariableInfoList
expr_stmt|;
name|InitializeVariables
argument_list|(
specifier|const
name|InitVariableInfoList
operator|&
name|vars
argument_list|)
operator|:
name|mCodeInserted
argument_list|(
name|false
argument_list|)
block|,
name|mVariables
argument_list|(
argument|vars
argument_list|)
block|{     }
name|protected
operator|:
name|virtual
name|bool
name|visitBinary
argument_list|(
argument|Visit
argument_list|,
argument|TIntermBinary *node
argument_list|)
block|{
return|return
name|false
return|;
block|}
end_decl_stmt
begin_function
name|virtual
name|bool
name|visitUnary
parameter_list|(
name|Visit
parameter_list|,
name|TIntermUnary
modifier|*
name|node
parameter_list|)
block|{
return|return
name|false
return|;
block|}
end_function
begin_function
name|virtual
name|bool
name|visitSelection
parameter_list|(
name|Visit
parameter_list|,
name|TIntermSelection
modifier|*
name|node
parameter_list|)
block|{
return|return
name|false
return|;
block|}
end_function
begin_function
name|virtual
name|bool
name|visitLoop
parameter_list|(
name|Visit
parameter_list|,
name|TIntermLoop
modifier|*
name|node
parameter_list|)
block|{
return|return
name|false
return|;
block|}
end_function
begin_function
name|virtual
name|bool
name|visitBranch
parameter_list|(
name|Visit
parameter_list|,
name|TIntermBranch
modifier|*
name|node
parameter_list|)
block|{
return|return
name|false
return|;
block|}
end_function
begin_function_decl
name|virtual
name|bool
name|visitAggregate
parameter_list|(
name|Visit
name|visit
parameter_list|,
name|TIntermAggregate
modifier|*
name|node
parameter_list|)
function_decl|;
end_function_decl
begin_label
name|private
label|:
end_label
begin_function_decl
name|void
name|insertInitCode
parameter_list|(
name|TIntermSequence
modifier|*
name|sequence
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|InitVariableInfoList
name|mVariables
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|mCodeInserted
decl_stmt|;
end_decl_stmt
begin_endif
unit|};
endif|#
directive|endif
end_endif
begin_comment
comment|// COMPILER_INITIALIZE_VARIABLES_H_
end_comment
end_unit
