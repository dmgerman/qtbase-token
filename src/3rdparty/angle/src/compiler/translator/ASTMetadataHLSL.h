begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Defines analyses of the AST needed for HLSL generation
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMPILER_TRANSLATOR_ASTMETADATAHLSL_H_
end_ifndef
begin_define
DECL|macro|COMPILER_TRANSLATOR_ASTMETADATAHLSL_H_
define|#
directive|define
name|COMPILER_TRANSLATOR_ASTMETADATAHLSL_H_
end_define
begin_include
include|#
directive|include
file|<set>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_decl_stmt
DECL|variable|CallDAG
name|class
name|CallDAG
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|TIntermNode
name|class
name|TIntermNode
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|TIntermSelection
name|class
name|TIntermSelection
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|TIntermLoop
name|class
name|TIntermLoop
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|ASTMetadataHLSL
struct|struct
name|ASTMetadataHLSL
block|{
DECL|function|ASTMetadataHLSL
name|ASTMetadataHLSL
argument_list|()
operator|:
name|mUsesGradient
argument_list|(
name|false
argument_list|)
operator|,
name|mCalledInDiscontinuousLoop
argument_list|(
name|false
argument_list|)
operator|,
name|mHasGradientLoopInCallGraph
argument_list|(
name|false
argument_list|)
operator|,
name|mNeedsLod0
argument_list|(
argument|false
argument_list|)
block|{     }
comment|// Here "something uses a gradient" means here that it either contains a
comment|// gradient operation, or a call to a function that uses a gradient.
name|bool
name|hasGradientInCallGraph
argument_list|(
name|TIntermLoop
operator|*
name|node
argument_list|)
expr_stmt|;
name|bool
name|hasGradientLoop
parameter_list|(
name|TIntermSelection
modifier|*
name|node
parameter_list|)
function_decl|;
comment|// Does the function use a gradient.
DECL|member|mUsesGradient
name|bool
name|mUsesGradient
decl_stmt|;
comment|// Even if usesGradient is true, some control flow might not use a gradient
comment|// so we store the set of all gradient-using control flows.
DECL|member|mControlFlowsContainingGradient
name|std
operator|::
name|set
operator|<
name|TIntermNode
operator|*
operator|>
name|mControlFlowsContainingGradient
expr_stmt|;
comment|// Remember information about the discontinuous loops and which functions
comment|// are called in such loops.
DECL|member|mCalledInDiscontinuousLoop
name|bool
name|mCalledInDiscontinuousLoop
decl_stmt|;
DECL|member|mHasGradientLoopInCallGraph
name|bool
name|mHasGradientLoopInCallGraph
decl_stmt|;
DECL|member|mDiscontinuousLoops
name|std
operator|::
name|set
operator|<
name|TIntermLoop
operator|*
operator|>
name|mDiscontinuousLoops
expr_stmt|;
DECL|member|mIfsContainingGradientLoop
name|std
operator|::
name|set
operator|<
name|TIntermSelection
operator|*
operator|>
name|mIfsContainingGradientLoop
expr_stmt|;
comment|// Will we need to generate a Lod0 version of the function.
DECL|member|mNeedsLod0
name|bool
name|mNeedsLod0
decl_stmt|;
block|}
struct|;
end_struct
begin_typedef
DECL|typedef|MetadataList
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|ASTMetadataHLSL
operator|>
name|MetadataList
expr_stmt|;
end_typedef
begin_comment
comment|// Return the AST analysis result, in the order defined by the call DAG
end_comment
begin_function_decl
name|MetadataList
name|CreateASTMetadataHLSL
parameter_list|(
name|TIntermNode
modifier|*
name|root
parameter_list|,
specifier|const
name|CallDAG
modifier|&
name|callDag
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// COMPILER_TRANSLATOR_ASTMETADATAHLSL_H_
end_comment
end_unit
