begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// blocklayout.h:
end_comment
begin_comment
comment|//   Methods and classes related to uniform layout and packing in GLSL and HLSL.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMMON_BLOCKLAYOUT_H_
end_ifndef
begin_define
DECL|macro|COMMON_BLOCKLAYOUT_H_
define|#
directive|define
name|COMMON_BLOCKLAYOUT_H_
end_define
begin_include
include|#
directive|include
file|<cstddef>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_include
include|#
directive|include
file|<GLSLANG/ShaderLang.h>
end_include
begin_decl_stmt
name|namespace
name|sh
block|{
struct_decl|struct
name|ShaderVariable
struct_decl|;
struct_decl|struct
name|InterfaceBlockField
struct_decl|;
struct_decl|struct
name|Uniform
struct_decl|;
struct_decl|struct
name|Varying
struct_decl|;
struct_decl|struct
name|InterfaceBlock
struct_decl|;
struct|struct
name|COMPILER_EXPORT
name|BlockMemberInfo
block|{
name|BlockMemberInfo
argument_list|()
operator|:
name|offset
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|arrayStride
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|matrixStride
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|isRowMajorMatrix
argument_list|(
argument|false
argument_list|)
block|{}
name|BlockMemberInfo
argument_list|(
argument|int offset
argument_list|,
argument|int arrayStride
argument_list|,
argument|int matrixStride
argument_list|,
argument|bool isRowMajorMatrix
argument_list|)
operator|:
name|offset
argument_list|(
name|offset
argument_list|)
operator|,
name|arrayStride
argument_list|(
name|arrayStride
argument_list|)
operator|,
name|matrixStride
argument_list|(
name|matrixStride
argument_list|)
operator|,
name|isRowMajorMatrix
argument_list|(
argument|isRowMajorMatrix
argument_list|)
block|{}
specifier|static
name|BlockMemberInfo
name|getDefaultBlockInfo
argument_list|()
block|{
return|return
name|BlockMemberInfo
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|false
argument_list|)
return|;
block|}
name|int
name|offset
decl_stmt|;
name|int
name|arrayStride
decl_stmt|;
name|int
name|matrixStride
decl_stmt|;
name|bool
name|isRowMajorMatrix
decl_stmt|;
block|}
struct|;
name|class
name|COMPILER_EXPORT
name|BlockLayoutEncoder
block|{
name|public
label|:
name|BlockLayoutEncoder
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|BlockLayoutEncoder
argument_list|()
block|{}
name|BlockMemberInfo
name|encodeType
argument_list|(
argument|GLenum type
argument_list|,
argument|unsigned int arraySize
argument_list|,
argument|bool isRowMajorMatrix
argument_list|)
expr_stmt|;
name|size_t
name|getBlockSize
argument_list|()
specifier|const
block|{
return|return
name|mCurrentOffset
operator|*
name|BytesPerComponent
return|;
block|}
name|virtual
name|void
name|enterAggregateType
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|void
name|exitAggregateType
parameter_list|()
init|=
literal|0
function_decl|;
specifier|static
specifier|const
name|size_t
name|BytesPerComponent
init|=
literal|4u
decl_stmt|;
specifier|static
specifier|const
name|unsigned
name|int
name|ComponentsPerRegister
init|=
literal|4u
decl_stmt|;
specifier|static
name|size_t
name|getBlockRegister
parameter_list|(
specifier|const
name|BlockMemberInfo
modifier|&
name|info
parameter_list|)
function_decl|;
specifier|static
name|size_t
name|getBlockRegisterElement
parameter_list|(
specifier|const
name|BlockMemberInfo
modifier|&
name|info
parameter_list|)
function_decl|;
name|protected
label|:
name|size_t
name|mCurrentOffset
decl_stmt|;
name|void
name|nextRegister
parameter_list|()
function_decl|;
name|virtual
name|void
name|getBlockLayoutInfo
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|unsigned
name|int
name|arraySize
parameter_list|,
name|bool
name|isRowMajorMatrix
parameter_list|,
name|int
modifier|*
name|arrayStrideOut
parameter_list|,
name|int
modifier|*
name|matrixStrideOut
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|advanceOffset
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|unsigned
name|int
name|arraySize
parameter_list|,
name|bool
name|isRowMajorMatrix
parameter_list|,
name|int
name|arrayStride
parameter_list|,
name|int
name|matrixStride
parameter_list|)
init|=
literal|0
function_decl|;
block|}
empty_stmt|;
comment|// Block layout according to the std140 block layout
comment|// See "Standard Uniform Block Layout" in Section 2.11.6 of the OpenGL ES 3.0 specification
name|class
name|COMPILER_EXPORT
name|Std140BlockEncoder
range|:
name|public
name|BlockLayoutEncoder
block|{
name|public
operator|:
name|Std140BlockEncoder
argument_list|()
block|;
name|void
name|enterAggregateType
argument_list|()
name|override
block|;
name|void
name|exitAggregateType
argument_list|()
name|override
block|;
name|protected
operator|:
name|void
name|getBlockLayoutInfo
argument_list|(
argument|GLenum type
argument_list|,
argument|unsigned int arraySize
argument_list|,
argument|bool isRowMajorMatrix
argument_list|,
argument|int *arrayStrideOut
argument_list|,
argument|int *matrixStrideOut
argument_list|)
name|override
block|;
name|void
name|advanceOffset
argument_list|(
argument|GLenum type
argument_list|,
argument|unsigned int arraySize
argument_list|,
argument|bool isRowMajorMatrix
argument_list|,
argument|int arrayStride
argument_list|,
argument|int matrixStride
argument_list|)
name|override
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// COMMON_BLOCKLAYOUT_H_
end_comment
end_unit
