begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMPILER_TRANSLATOR_OUTPUTHLSL_H_
end_ifndef
begin_define
DECL|macro|COMPILER_TRANSLATOR_OUTPUTHLSL_H_
define|#
directive|define
name|COMPILER_TRANSLATOR_OUTPUTHLSL_H_
end_define
begin_include
include|#
directive|include
file|<list>
end_include
begin_include
include|#
directive|include
file|<set>
end_include
begin_include
include|#
directive|include
file|<map>
end_include
begin_include
include|#
directive|include
file|<stack>
end_include
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/ASTMetadataHLSL.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/IntermNode.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/ParseContext.h"
end_include
begin_decl_stmt
DECL|variable|BuiltInFunctionEmulator
name|class
name|BuiltInFunctionEmulator
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|namespace
name|sh
block|{
name|class
name|UnfoldShortCircuit
decl_stmt|;
name|class
name|StructureHLSL
decl_stmt|;
name|class
name|UniformHLSL
decl_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|TString
operator|,
name|TIntermSymbol
operator|*
operator|>
name|ReferencedSymbols
expr_stmt|;
name|class
name|OutputHLSL
range|:
name|public
name|TIntermTraverser
block|{
name|public
operator|:
name|OutputHLSL
argument_list|(
argument|sh::GLenum shaderType
argument_list|,
argument|int shaderVersion
argument_list|,
argument|const TExtensionBehavior&extensionBehavior
argument_list|,
argument|const char *sourcePath
argument_list|,
argument|ShShaderOutput outputType
argument_list|,
argument|int numRenderTargets
argument_list|,
argument|const std::vector<Uniform>&uniforms
argument_list|,
argument|int compileOptions
argument_list|)
block|;
operator|~
name|OutputHLSL
argument_list|()
block|;
name|void
name|output
argument_list|(
name|TIntermNode
operator|*
name|treeRoot
argument_list|,
name|TInfoSinkBase
operator|&
name|objSink
argument_list|)
block|;
specifier|const
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
block|,
name|unsigned
name|int
operator|>
operator|&
name|getInterfaceBlockRegisterMap
argument_list|()
specifier|const
block|;
specifier|const
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
block|,
name|unsigned
name|int
operator|>
operator|&
name|getUniformRegisterMap
argument_list|()
specifier|const
block|;
specifier|static
name|TString
name|initializer
argument_list|(
specifier|const
name|TType
operator|&
name|type
argument_list|)
block|;
name|TInfoSinkBase
operator|&
name|getInfoSink
argument_list|()
block|{
name|ASSERT
argument_list|(
operator|!
name|mInfoSinkStack
operator|.
name|empty
argument_list|()
argument_list|)
block|;
return|return
operator|*
name|mInfoSinkStack
operator|.
name|top
argument_list|()
return|;
block|}
specifier|static
name|bool
name|canWriteAsHLSLLiteral
argument_list|(
name|TIntermTyped
operator|*
name|expression
argument_list|)
block|;
name|protected
operator|:
name|void
name|header
argument_list|(
name|TInfoSinkBase
operator|&
name|out
argument_list|,
specifier|const
name|BuiltInFunctionEmulator
operator|*
name|builtInFunctionEmulator
argument_list|)
block|;
comment|// Visit AST nodes and output their code to the body stream
name|void
name|visitSymbol
argument_list|(
name|TIntermSymbol
operator|*
argument_list|)
block|;
name|void
name|visitRaw
argument_list|(
name|TIntermRaw
operator|*
argument_list|)
block|;
name|void
name|visitConstantUnion
argument_list|(
name|TIntermConstantUnion
operator|*
argument_list|)
block|;
name|bool
name|visitBinary
argument_list|(
argument|Visit visit
argument_list|,
argument|TIntermBinary*
argument_list|)
block|;
name|bool
name|visitUnary
argument_list|(
argument|Visit visit
argument_list|,
argument|TIntermUnary*
argument_list|)
block|;
name|bool
name|visitSelection
argument_list|(
argument|Visit visit
argument_list|,
argument|TIntermSelection*
argument_list|)
block|;
name|bool
name|visitSwitch
argument_list|(
argument|Visit visit
argument_list|,
argument|TIntermSwitch *
argument_list|)
block|;
name|bool
name|visitCase
argument_list|(
argument|Visit visit
argument_list|,
argument|TIntermCase *
argument_list|)
block|;
name|bool
name|visitAggregate
argument_list|(
argument|Visit visit
argument_list|,
argument|TIntermAggregate*
argument_list|)
block|;
name|bool
name|visitLoop
argument_list|(
argument|Visit visit
argument_list|,
argument|TIntermLoop*
argument_list|)
block|;
name|bool
name|visitBranch
argument_list|(
argument|Visit visit
argument_list|,
argument|TIntermBranch*
argument_list|)
block|;
name|bool
name|isSingleStatement
argument_list|(
name|TIntermNode
operator|*
name|node
argument_list|)
block|;
name|bool
name|handleExcessiveLoop
argument_list|(
name|TInfoSinkBase
operator|&
name|out
argument_list|,
name|TIntermLoop
operator|*
name|node
argument_list|)
block|;
comment|// Emit one of three strings depending on traverse phase. Called with literal strings so using const char* instead of TString.
name|void
name|outputTriplet
argument_list|(
argument|TInfoSinkBase&out
argument_list|,
argument|Visit visit
argument_list|,
argument|const char *preString
argument_list|,
argument|const char *inString
argument_list|,
argument|const char *postString
argument_list|)
block|;
name|void
name|outputLineDirective
argument_list|(
argument|TInfoSinkBase&out
argument_list|,
argument|int line
argument_list|)
block|;
name|TString
name|argumentString
argument_list|(
specifier|const
name|TIntermSymbol
operator|*
name|symbol
argument_list|)
block|;
name|int
name|vectorSize
argument_list|(
argument|const TType&type
argument_list|)
specifier|const
block|;
comment|// Emit constructor. Called with literal names so using const char* instead of TString.
name|void
name|outputConstructor
argument_list|(
argument|TInfoSinkBase&out
argument_list|,
argument|Visit visit
argument_list|,
argument|const TType&type
argument_list|,
argument|const char *name
argument_list|,
argument|const TIntermSequence *parameters
argument_list|)
block|;
specifier|const
name|TConstantUnion
operator|*
name|writeConstantUnion
argument_list|(
name|TInfoSinkBase
operator|&
name|out
argument_list|,
specifier|const
name|TType
operator|&
name|type
argument_list|,
specifier|const
name|TConstantUnion
operator|*
name|constUnion
argument_list|)
block|;
name|void
name|outputEqual
argument_list|(
argument|Visit visit
argument_list|,
argument|const TType&type
argument_list|,
argument|TOperator op
argument_list|,
argument|TInfoSinkBase&out
argument_list|)
block|;
name|void
name|writeEmulatedFunctionTriplet
argument_list|(
argument|TInfoSinkBase&out
argument_list|,
argument|Visit visit
argument_list|,
argument|const char *preStr
argument_list|)
block|;
name|void
name|makeFlaggedStructMaps
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|TIntermTyped
operator|*
operator|>
operator|&
name|flaggedStructs
argument_list|)
block|;
comment|// Returns true if it found a 'same symbol' initializer (initializer that references the variable it's initting)
name|bool
name|writeSameSymbolInitializer
argument_list|(
name|TInfoSinkBase
operator|&
name|out
argument_list|,
name|TIntermSymbol
operator|*
name|symbolNode
argument_list|,
name|TIntermTyped
operator|*
name|expression
argument_list|)
block|;
comment|// Returns true if variable initializer could be written using literal {} notation.
name|bool
name|writeConstantInitialization
argument_list|(
name|TInfoSinkBase
operator|&
name|out
argument_list|,
name|TIntermSymbol
operator|*
name|symbolNode
argument_list|,
name|TIntermTyped
operator|*
name|expression
argument_list|)
block|;
name|void
name|writeDeferredGlobalInitializers
argument_list|(
name|TInfoSinkBase
operator|&
name|out
argument_list|)
block|;
name|void
name|writeSelection
argument_list|(
name|TInfoSinkBase
operator|&
name|out
argument_list|,
name|TIntermSelection
operator|*
name|node
argument_list|)
block|;
comment|// Returns the function name
name|TString
name|addStructEqualityFunction
argument_list|(
specifier|const
name|TStructure
operator|&
name|structure
argument_list|)
block|;
name|TString
name|addArrayEqualityFunction
argument_list|(
specifier|const
name|TType
operator|&
name|type
argument_list|)
block|;
name|TString
name|addArrayAssignmentFunction
argument_list|(
specifier|const
name|TType
operator|&
name|type
argument_list|)
block|;
name|TString
name|addArrayConstructIntoFunction
argument_list|(
specifier|const
name|TType
operator|&
name|type
argument_list|)
block|;
comment|// Ensures if the type is a struct, the struct is defined
name|void
name|ensureStructDefined
argument_list|(
specifier|const
name|TType
operator|&
name|type
argument_list|)
block|;
name|sh
operator|::
name|GLenum
name|mShaderType
block|;
name|int
name|mShaderVersion
block|;
specifier|const
name|TExtensionBehavior
operator|&
name|mExtensionBehavior
block|;
specifier|const
name|char
operator|*
name|mSourcePath
block|;
specifier|const
name|ShShaderOutput
name|mOutputType
block|;
name|int
name|mCompileOptions
block|;
name|bool
name|mInsideFunction
block|;
comment|// Output streams
name|TInfoSinkBase
name|mHeader
block|;
name|TInfoSinkBase
name|mBody
block|;
name|TInfoSinkBase
name|mFooter
block|;
comment|// A stack is useful when we want to traverse in the header, or in helper functions, but not always
comment|// write to the body. Instead use an InfoSink stack to keep our current state intact.
comment|// TODO (jmadill): Just passing an InfoSink in function parameters would be simpler.
name|std
operator|::
name|stack
operator|<
name|TInfoSinkBase
operator|*
operator|>
name|mInfoSinkStack
block|;
name|ReferencedSymbols
name|mReferencedUniforms
block|;
name|ReferencedSymbols
name|mReferencedInterfaceBlocks
block|;
name|ReferencedSymbols
name|mReferencedAttributes
block|;
name|ReferencedSymbols
name|mReferencedVaryings
block|;
name|ReferencedSymbols
name|mReferencedOutputVariables
block|;
name|StructureHLSL
operator|*
name|mStructureHLSL
block|;
name|UniformHLSL
operator|*
name|mUniformHLSL
block|;      struct
name|TextureFunction
block|{         enum
name|Method
block|{
name|IMPLICIT
block|,
comment|// Mipmap LOD determined implicitly (standard lookup)
name|BIAS
block|,
name|LOD
block|,
name|LOD0
block|,
name|LOD0BIAS
block|,
name|SIZE
block|,
comment|// textureSize()
name|FETCH
block|,
name|GRAD
block|}
block|;
name|TBasicType
name|sampler
block|;
name|int
name|coords
block|;
name|bool
name|proj
block|;
name|bool
name|offset
block|;
name|Method
name|method
block|;
name|TString
name|name
argument_list|()
specifier|const
block|;
name|bool
name|operator
operator|<
operator|(
specifier|const
name|TextureFunction
operator|&
name|rhs
operator|)
specifier|const
block|;     }
block|;
typedef|typedef
name|std
operator|::
name|set
operator|<
name|TextureFunction
operator|>
name|TextureFunctionSet
expr_stmt|;
comment|// Parameters determining what goes in the header output
name|TextureFunctionSet
name|mUsesTexture
decl_stmt|;
name|bool
name|mUsesFragColor
decl_stmt|;
name|bool
name|mUsesFragData
decl_stmt|;
name|bool
name|mUsesDepthRange
decl_stmt|;
name|bool
name|mUsesFragCoord
decl_stmt|;
name|bool
name|mUsesPointCoord
decl_stmt|;
name|bool
name|mUsesFrontFacing
decl_stmt|;
name|bool
name|mUsesPointSize
decl_stmt|;
name|bool
name|mUsesInstanceID
decl_stmt|;
name|bool
name|mUsesFragDepth
decl_stmt|;
name|bool
name|mUsesXor
decl_stmt|;
name|bool
name|mUsesDiscardRewriting
decl_stmt|;
name|bool
name|mUsesNestedBreak
decl_stmt|;
name|bool
name|mRequiresIEEEStrictCompiling
decl_stmt|;
name|int
name|mNumRenderTargets
decl_stmt|;
name|int
name|mUniqueIndex
decl_stmt|;
comment|// For creating unique names
name|CallDAG
name|mCallDag
decl_stmt|;
name|MetadataList
name|mASTMetadataList
decl_stmt|;
name|ASTMetadataHLSL
modifier|*
name|mCurrentFunctionMetadata
decl_stmt|;
name|bool
name|mOutputLod0Function
decl_stmt|;
name|bool
name|mInsideDiscontinuousLoop
decl_stmt|;
name|int
name|mNestedLoopDepth
decl_stmt|;
name|TIntermSymbol
modifier|*
name|mExcessiveLoopIndex
decl_stmt|;
name|TString
name|structInitializerString
parameter_list|(
name|int
name|indent
parameter_list|,
specifier|const
name|TStructure
modifier|&
name|structure
parameter_list|,
specifier|const
name|TString
modifier|&
name|rhsStructName
parameter_list|)
function_decl|;
name|std
operator|::
name|map
operator|<
name|TIntermTyped
operator|*
operator|,
name|TString
operator|>
name|mFlaggedStructMappedNames
expr_stmt|;
name|std
operator|::
name|map
operator|<
name|TIntermTyped
operator|*
operator|,
name|TString
operator|>
name|mFlaggedStructOriginalNames
expr_stmt|;
comment|// Some initializers may have been unfolded into if statements, thus we can't evaluate all initializers
comment|// at global static scope in HLSL. Instead, we can initialize these static globals inside a helper function.
comment|// This also enables initialization of globals with uniforms.
name|TIntermSequence
name|mDeferredGlobalInitializers
decl_stmt|;
struct|struct
name|HelperFunction
block|{
name|TString
name|functionName
decl_stmt|;
name|TString
name|functionDefinition
decl_stmt|;
name|virtual
operator|~
name|HelperFunction
argument_list|()
block|{}
block|}
struct|;
comment|// A list of all equality comparison functions. It's important to preserve the order at
comment|// which we add the functions, since nested structures call each other recursively, and
comment|// structure equality functions may need to call array equality functions and vice versa.
comment|// The ownership of the pointers is maintained by the type-specific arrays.
name|std
operator|::
name|vector
operator|<
name|HelperFunction
operator|*
operator|>
name|mEqualityFunctions
expr_stmt|;
name|struct
name|StructEqualityFunction
range|:
name|public
name|HelperFunction
block|{
specifier|const
name|TStructure
operator|*
name|structure
block|;     }
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|StructEqualityFunction
operator|*
operator|>
name|mStructEqualityFunctions
expr_stmt|;
name|struct
name|ArrayHelperFunction
range|:
name|public
name|HelperFunction
block|{
name|TType
name|type
block|;     }
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|ArrayHelperFunction
operator|*
operator|>
name|mArrayEqualityFunctions
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|ArrayHelperFunction
operator|>
name|mArrayAssignmentFunctions
expr_stmt|;
comment|// The construct-into functions are functions that fill an N-element array passed as an out parameter
comment|// with the other N parameters of the function. This is used to work around that arrays can't be
comment|// return values in HLSL.
name|std
operator|::
name|vector
operator|<
name|ArrayHelperFunction
operator|>
name|mArrayConstructIntoFunctions
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|// COMPILER_TRANSLATOR_OUTPUTHLSL_H_
end_comment
end_unit
