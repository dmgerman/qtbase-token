begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/translator/TranslatorHLSL.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/InitializeParseContext.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/OutputHLSL.h"
end_include
begin_constructor
DECL|function|TranslatorHLSL
name|TranslatorHLSL
operator|::
name|TranslatorHLSL
parameter_list|(
name|sh
operator|::
name|GLenum
name|type
parameter_list|,
name|ShShaderSpec
name|spec
parameter_list|,
name|ShShaderOutput
name|output
parameter_list|)
member_init_list|:
name|TCompiler
argument_list|(
name|type
argument_list|,
name|spec
argument_list|,
name|output
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|translate
name|void
name|TranslatorHLSL
operator|::
name|translate
parameter_list|(
name|TIntermNode
modifier|*
name|root
parameter_list|)
block|{
name|TParseContext
modifier|&
name|parseContext
init|=
operator|*
name|GetGlobalParseContext
argument_list|()
decl_stmt|;
name|sh
operator|::
name|OutputHLSL
name|outputHLSL
argument_list|(
name|parseContext
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|outputHLSL
operator|.
name|output
argument_list|()
expr_stmt|;
name|mInterfaceBlockRegisterMap
operator|=
name|outputHLSL
operator|.
name|getInterfaceBlockRegisterMap
argument_list|()
expr_stmt|;
name|mUniformRegisterMap
operator|=
name|outputHLSL
operator|.
name|getUniformRegisterMap
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasInterfaceBlock
name|bool
name|TranslatorHLSL
operator|::
name|hasInterfaceBlock
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|interfaceBlockName
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|mInterfaceBlockRegisterMap
operator|.
name|count
argument_list|(
name|interfaceBlockName
argument_list|)
operator|>
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|getInterfaceBlockRegister
name|unsigned
name|int
name|TranslatorHLSL
operator|::
name|getInterfaceBlockRegister
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|interfaceBlockName
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|hasInterfaceBlock
argument_list|(
name|interfaceBlockName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mInterfaceBlockRegisterMap
operator|.
name|find
argument_list|(
name|interfaceBlockName
argument_list|)
operator|->
name|second
return|;
block|}
end_function
begin_function
DECL|function|hasUniform
name|bool
name|TranslatorHLSL
operator|::
name|hasUniform
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|uniformName
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|mUniformRegisterMap
operator|.
name|count
argument_list|(
name|uniformName
argument_list|)
operator|>
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|getUniformRegister
name|unsigned
name|int
name|TranslatorHLSL
operator|::
name|getUniformRegister
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|uniformName
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|hasUniform
argument_list|(
name|uniformName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mUniformRegisterMap
operator|.
name|find
argument_list|(
name|uniformName
argument_list|)
operator|->
name|second
return|;
block|}
end_function
end_unit
