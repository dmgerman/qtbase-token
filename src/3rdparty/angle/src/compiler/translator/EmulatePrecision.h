begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMPILER_TRANSLATOR_EMULATE_PRECISION_H_
end_ifndef
begin_define
DECL|macro|COMPILER_TRANSLATOR_EMULATE_PRECISION_H_
define|#
directive|define
name|COMPILER_TRANSLATOR_EMULATE_PRECISION_H_
end_define
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/Compiler.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/InfoSink.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/IntermNode.h"
end_include
begin_include
include|#
directive|include
file|"GLSLANG/ShaderLang.h"
end_include
begin_comment
comment|// This class gathers all compound assignments from the AST and can then write
end_comment
begin_comment
comment|// the functions required for their precision emulation. This way there is no
end_comment
begin_comment
comment|// need to write a huge number of variations of the emulated compound assignment
end_comment
begin_comment
comment|// to every translated shader with emulation enabled.
end_comment
begin_decl_stmt
name|class
name|EmulatePrecision
range|:
name|public
name|TLValueTrackingTraverser
block|{
name|public
operator|:
name|EmulatePrecision
argument_list|(
argument|const TSymbolTable&symbolTable
argument_list|,
argument|int shaderVersion
argument_list|)
block|;
name|void
name|visitSymbol
argument_list|(
argument|TIntermSymbol *node
argument_list|)
name|override
block|;
name|bool
name|visitBinary
argument_list|(
argument|Visit visit
argument_list|,
argument|TIntermBinary *node
argument_list|)
name|override
block|;
name|bool
name|visitUnary
argument_list|(
argument|Visit visit
argument_list|,
argument|TIntermUnary *node
argument_list|)
name|override
block|;
name|bool
name|visitAggregate
argument_list|(
argument|Visit visit
argument_list|,
argument|TIntermAggregate *node
argument_list|)
name|override
block|;
name|void
name|writeEmulationHelpers
argument_list|(
argument|TInfoSinkBase& sink
argument_list|,
argument|ShShaderOutput outputLanguage
argument_list|)
block|;
name|private
operator|:
expr|struct
name|TypePair
block|{
name|TypePair
argument_list|(
specifier|const
name|char
operator|*
name|l
argument_list|,
specifier|const
name|char
operator|*
name|r
argument_list|)
operator|:
name|lType
argument_list|(
name|l
argument_list|)
block|,
name|rType
argument_list|(
argument|r
argument_list|)
block|{ }
specifier|const
name|char
operator|*
name|lType
block|;
specifier|const
name|char
operator|*
name|rType
block|;     }
block|;      struct
name|TypePairComparator
block|{
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|TypePair
operator|&
name|l
expr|,
specifier|const
name|TypePair
operator|&
name|r
operator|)
specifier|const
block|{
if|if
condition|(
name|l
operator|.
name|lType
operator|==
name|r
operator|.
name|lType
condition|)
return|return
name|l
operator|.
name|rType
operator|<
name|r
operator|.
name|rType
return|;
return|return
name|l
operator|.
name|lType
operator|<
name|r
operator|.
name|lType
return|;
block|}
expr|}
block|;
typedef|typedef
name|std
operator|::
name|set
operator|<
name|TypePair
operator|,
name|TypePairComparator
operator|>
name|EmulationSet
expr_stmt|;
name|EmulationSet
name|mEmulateCompoundAdd
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|EmulationSet
name|mEmulateCompoundSub
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|EmulationSet
name|mEmulateCompoundMul
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|EmulationSet
name|mEmulateCompoundDiv
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|mDeclaringVariables
decl_stmt|;
end_decl_stmt
begin_endif
unit|};
endif|#
directive|endif
end_endif
begin_comment
comment|// COMPILER_TRANSLATOR_EMULATE_PRECISION_H_
end_comment
end_unit
