begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMPILER_TRANSLATOR_COMPILER_H_
end_ifndef
begin_define
DECL|macro|COMPILER_TRANSLATOR_COMPILER_H_
define|#
directive|define
name|COMPILER_TRANSLATOR_COMPILER_H_
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|// Machine independent part of the compiler private objects
end_comment
begin_comment
comment|// sent as ShHandle to the driver.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This should not be included by driver code.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/translator/BuiltInFunctionEmulator.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/CallDAG.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/ExtensionBehavior.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/HashNames.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/InfoSink.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/Pragma.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/SymbolTable.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/VariableInfo.h"
end_include
begin_include
include|#
directive|include
file|"third_party/compiler/ArrayBoundsClamper.h"
end_include
begin_decl_stmt
DECL|variable|TCompiler
name|class
name|TCompiler
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|TDependencyGraph
name|class
name|TDependencyGraph
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|ANGLE_ENABLE_HLSL
end_ifdef
begin_decl_stmt
DECL|variable|TranslatorHLSL
name|class
name|TranslatorHLSL
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// ANGLE_ENABLE_HLSL
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Helper function to identify specs that are based on the WebGL spec,
end_comment
begin_comment
comment|// like the CSS Shaders spec.
end_comment
begin_comment
comment|//
end_comment
begin_function_decl
name|bool
name|IsWebGLBasedSpec
parameter_list|(
name|ShShaderSpec
name|spec
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//
end_comment
begin_comment
comment|// Helper function to check if the shader type is GLSL.
end_comment
begin_comment
comment|//
end_comment
begin_function_decl
name|bool
name|IsGLSL130OrNewer
parameter_list|(
name|ShShaderOutput
name|output
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//
end_comment
begin_comment
comment|// The base class used to back handles returned to the driver.
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|class
name|TShHandleBase
block|{
name|public
label|:
name|TShHandleBase
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|TShHandleBase
argument_list|()
expr_stmt|;
name|virtual
name|TCompiler
modifier|*
name|getAsCompiler
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
ifdef|#
directive|ifdef
name|ANGLE_ENABLE_HLSL
name|virtual
name|TranslatorHLSL
modifier|*
name|getAsTranslatorHLSL
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
endif|#
directive|endif
comment|// ANGLE_ENABLE_HLSL
name|protected
label|:
comment|// Memory allocator. Allocates and tracks memory required by the compiler.
comment|// Deallocates all memory when compiler is destructed.
name|TPoolAllocator
name|allocator
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// The base class for the machine dependent compiler to derive from
end_comment
begin_comment
comment|// for managing object code from the compile.
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|class
name|TCompiler
range|:
name|public
name|TShHandleBase
block|{
name|public
operator|:
name|TCompiler
argument_list|(
argument|sh::GLenum type
argument_list|,
argument|ShShaderSpec spec
argument_list|,
argument|ShShaderOutput output
argument_list|)
block|;
operator|~
name|TCompiler
argument_list|()
name|override
block|;
name|TCompiler
operator|*
name|getAsCompiler
argument_list|()
name|override
block|{
return|return
name|this
return|;
block|}
name|bool
name|Init
argument_list|(
specifier|const
name|ShBuiltInResources
operator|&
name|resources
argument_list|)
block|;
comment|// compileTreeForTesting should be used only when tests require access to
comment|// the AST. Users of this function need to manually manage the global pool
comment|// allocator. Returns NULL whenever there are compilation errors.
name|TIntermNode
operator|*
name|compileTreeForTesting
argument_list|(
argument|const char* const shaderStrings[]
argument_list|,
argument|size_t numStrings
argument_list|,
argument|int compileOptions
argument_list|)
block|;
name|bool
name|compile
argument_list|(
argument|const char* const shaderStrings[]
argument_list|,
argument|size_t numStrings
argument_list|,
argument|int compileOptions
argument_list|)
block|;
comment|// Get results of the last compilation.
name|int
name|getShaderVersion
argument_list|()
specifier|const
block|{
return|return
name|shaderVersion
return|;
block|}
name|TInfoSink
operator|&
name|getInfoSink
argument_list|()
block|{
return|return
name|infoSink
return|;
block|}
comment|// Clears the results from the previous compilation.
name|void
name|clearResults
argument_list|()
block|;
specifier|const
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Attribute
operator|>
operator|&
name|getAttributes
argument_list|()
specifier|const
block|{
return|return
name|attributes
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|OutputVariable
operator|>
operator|&
name|getOutputVariables
argument_list|()
specifier|const
block|{
return|return
name|outputVariables
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Uniform
operator|>
operator|&
name|getUniforms
argument_list|()
specifier|const
block|{
return|return
name|uniforms
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Varying
operator|>
operator|&
name|getVaryings
argument_list|()
specifier|const
block|{
return|return
name|varyings
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|InterfaceBlock
operator|>
operator|&
name|getInterfaceBlocks
argument_list|()
specifier|const
block|{
return|return
name|interfaceBlocks
return|;
block|}
name|ShHashFunction64
name|getHashFunction
argument_list|()
specifier|const
block|{
return|return
name|hashFunction
return|;
block|}
name|NameMap
operator|&
name|getNameMap
argument_list|()
block|{
return|return
name|nameMap
return|;
block|}
name|TSymbolTable
operator|&
name|getSymbolTable
argument_list|()
block|{
return|return
name|symbolTable
return|;
block|}
name|ShShaderSpec
name|getShaderSpec
argument_list|()
specifier|const
block|{
return|return
name|shaderSpec
return|;
block|}
name|ShShaderOutput
name|getOutputType
argument_list|()
specifier|const
block|{
return|return
name|outputType
return|;
block|}
specifier|const
name|std
operator|::
name|string
operator|&
name|getBuiltInResourcesString
argument_list|()
specifier|const
block|{
return|return
name|builtInResourcesString
return|;
block|}
name|bool
name|shouldRunLoopAndIndexingValidation
argument_list|(
argument|int compileOptions
argument_list|)
specifier|const
block|;
comment|// Get the resources set by InitBuiltInSymbolTable
specifier|const
name|ShBuiltInResources
operator|&
name|getResources
argument_list|()
specifier|const
block|;
name|protected
operator|:
name|sh
operator|::
name|GLenum
name|getShaderType
argument_list|()
specifier|const
block|{
return|return
name|shaderType
return|;
block|}
comment|// Initialize symbol-table with built-in symbols.
name|bool
name|InitBuiltInSymbolTable
argument_list|(
specifier|const
name|ShBuiltInResources
operator|&
name|resources
argument_list|)
block|;
comment|// Compute the string representation of the built-in resources
name|void
name|setResourceString
argument_list|()
block|;
comment|// Return false if the call depth is exceeded.
name|bool
name|checkCallDepth
argument_list|()
block|;
comment|// Returns true if a program has no conflicting or missing fragment outputs
name|bool
name|validateOutputs
argument_list|(
name|TIntermNode
operator|*
name|root
argument_list|)
block|;
comment|// Rewrites a shader's intermediate tree according to the CSS Shaders spec.
name|void
name|rewriteCSSShader
argument_list|(
name|TIntermNode
operator|*
name|root
argument_list|)
block|;
comment|// Returns true if the given shader does not exceed the minimum
comment|// functionality mandated in GLSL 1.0 spec Appendix A.
name|bool
name|validateLimitations
argument_list|(
name|TIntermNode
operator|*
name|root
argument_list|)
block|;
comment|// Collect info for all attribs, uniforms, varyings.
name|void
name|collectVariables
argument_list|(
name|TIntermNode
operator|*
name|root
argument_list|)
block|;
comment|// Add emulated functions to the built-in function emulator.
name|virtual
name|void
name|initBuiltInFunctionEmulator
argument_list|(
argument|BuiltInFunctionEmulator *emu
argument_list|,
argument|int compileOptions
argument_list|)
block|{}
block|;
comment|// Translate to object code.
name|virtual
name|void
name|translate
argument_list|(
argument|TIntermNode *root
argument_list|,
argument|int compileOptions
argument_list|)
operator|=
literal|0
block|;
comment|// Returns true if, after applying the packing rules in the GLSL 1.017 spec
comment|// Appendix A, section 7, the shader does not use too many uniforms.
name|bool
name|enforcePackingRestrictions
argument_list|()
block|;
comment|// Insert statements to initialize varyings without static use in the beginning
comment|// of main(). It is to work around a Mac driver where such varyings in a vertex
comment|// shader may be optimized out incorrectly at compile time, causing a link failure.
comment|// This function should only be applied to vertex shaders.
name|void
name|initializeVaryingsWithoutStaticUse
argument_list|(
name|TIntermNode
operator|*
name|root
argument_list|)
block|;
comment|// Insert gl_Position = vec4(0,0,0,0) to the beginning of main().
comment|// It is to work around a Linux driver bug where missing this causes compile failure
comment|// while spec says it is allowed.
comment|// This function should only be applied to vertex shaders.
name|void
name|initializeGLPosition
argument_list|(
name|TIntermNode
operator|*
name|root
argument_list|)
block|;
comment|// Returns true if the shader passes the restrictions that aim to prevent timing attacks.
name|bool
name|enforceTimingRestrictions
argument_list|(
argument|TIntermNode* root
argument_list|,
argument|bool outputGraph
argument_list|)
block|;
comment|// Returns true if the shader does not use samplers.
name|bool
name|enforceVertexShaderTimingRestrictions
argument_list|(
name|TIntermNode
operator|*
name|root
argument_list|)
block|;
comment|// Returns true if the shader does not use sampler dependent values to affect control
comment|// flow or in operations whose time can depend on the input values.
name|bool
name|enforceFragmentShaderTimingRestrictions
argument_list|(
specifier|const
name|TDependencyGraph
operator|&
name|graph
argument_list|)
block|;
comment|// Return true if the maximum expression complexity is below the limit.
name|bool
name|limitExpressionComplexity
argument_list|(
name|TIntermNode
operator|*
name|root
argument_list|)
block|;
comment|// Get built-in extensions with default behavior.
specifier|const
name|TExtensionBehavior
operator|&
name|getExtensionBehavior
argument_list|()
specifier|const
block|;
specifier|const
name|char
operator|*
name|getSourcePath
argument_list|()
specifier|const
block|;
specifier|const
name|TPragma
operator|&
name|getPragma
argument_list|()
specifier|const
block|{
return|return
name|mPragma
return|;
block|}
name|void
name|writePragma
argument_list|()
block|;
name|unsigned
name|int
operator|*
name|getTemporaryIndex
argument_list|()
block|{
return|return
operator|&
name|mTemporaryIndex
return|;
block|}
specifier|const
name|ArrayBoundsClamper
operator|&
name|getArrayBoundsClamper
argument_list|()
specifier|const
block|;
name|ShArrayIndexClampingStrategy
name|getArrayIndexClampingStrategy
argument_list|()
specifier|const
block|;
specifier|const
name|BuiltInFunctionEmulator
operator|&
name|getBuiltInFunctionEmulator
argument_list|()
specifier|const
block|;
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Attribute
operator|>
name|attributes
block|;
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|OutputVariable
operator|>
name|outputVariables
block|;
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Uniform
operator|>
name|uniforms
block|;
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|ShaderVariable
operator|>
name|expandedUniforms
block|;
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Varying
operator|>
name|varyings
block|;
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|InterfaceBlock
operator|>
name|interfaceBlocks
block|;
name|virtual
name|bool
name|shouldCollectVariables
argument_list|(
argument|int compileOptions
argument_list|)
block|{
return|return
operator|(
name|compileOptions
operator|&
name|SH_VARIABLES
operator|)
operator|!=
literal|0
return|;
block|}
name|private
operator|:
comment|// Creates the function call DAG for further analysis, returning false if there is a recursion
name|bool
name|initCallDag
argument_list|(
name|TIntermNode
operator|*
name|root
argument_list|)
block|;
comment|// Return false if "main" doesn't exist
name|bool
name|tagUsedFunctions
argument_list|()
block|;
name|void
name|internalTagUsedFunction
argument_list|(
argument|size_t index
argument_list|)
block|;
name|void
name|initSamplerDefaultPrecision
argument_list|(
argument|TBasicType samplerType
argument_list|)
block|;
comment|// Removes unused function declarations and prototypes from the AST
name|class
name|UnusedPredicate
block|;
name|bool
name|pruneUnusedFunctions
argument_list|(
name|TIntermNode
operator|*
name|root
argument_list|)
block|;
name|TIntermNode
operator|*
name|compileTreeImpl
argument_list|(
argument|const char *const shaderStrings[]
argument_list|,
argument|size_t numStrings
argument_list|,
argument|const int compileOptions
argument_list|)
block|;
name|sh
operator|::
name|GLenum
name|shaderType
block|;
name|ShShaderSpec
name|shaderSpec
block|;
name|ShShaderOutput
name|outputType
block|;      struct
name|FunctionMetadata
block|{
name|FunctionMetadata
argument_list|()
operator|:
name|used
argument_list|(
argument|false
argument_list|)
block|{         }
name|bool
name|used
block|;     }
block|;
name|CallDAG
name|mCallDag
block|;
name|std
operator|::
name|vector
operator|<
name|FunctionMetadata
operator|>
name|functionMetadata
block|;
name|int
name|maxUniformVectors
block|;
name|int
name|maxExpressionComplexity
block|;
name|int
name|maxCallStackDepth
block|;
name|ShBuiltInResources
name|compileResources
block|;
name|std
operator|::
name|string
name|builtInResourcesString
block|;
comment|// Built-in symbol table for the given language, spec, and resources.
comment|// It is preserved from compile-to-compile.
name|TSymbolTable
name|symbolTable
block|;
comment|// Built-in extensions with default behavior.
name|TExtensionBehavior
name|extensionBehavior
block|;
name|bool
name|fragmentPrecisionHigh
block|;
name|ArrayBoundsClamper
name|arrayBoundsClamper
block|;
name|ShArrayIndexClampingStrategy
name|clampingStrategy
block|;
name|BuiltInFunctionEmulator
name|builtInFunctionEmulator
block|;
comment|// Results of compilation.
name|int
name|shaderVersion
block|;
name|TInfoSink
name|infoSink
block|;
comment|// Output sink.
specifier|const
name|char
operator|*
name|mSourcePath
block|;
comment|// Path of source file or NULL
comment|// name hashing.
name|ShHashFunction64
name|hashFunction
block|;
name|NameMap
name|nameMap
block|;
name|TPragma
name|mPragma
block|;
name|unsigned
name|int
name|mTemporaryIndex
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// This is the interface between the machine independent code
end_comment
begin_comment
comment|// and the machine dependent code.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// The machine dependent code should derive from the classes
end_comment
begin_comment
comment|// above. Then Construct*() and Delete*() will create and
end_comment
begin_comment
comment|// destroy the machine dependent objects, which contain the
end_comment
begin_comment
comment|// above machine independent information.
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|TCompiler
modifier|*
name|ConstructCompiler
argument_list|(
name|sh
operator|::
name|GLenum
name|type
argument_list|,
name|ShShaderSpec
name|spec
argument_list|,
name|ShShaderOutput
name|output
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|DeleteCompiler
parameter_list|(
name|TCompiler
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// COMPILER_TRANSLATOR_COMPILER_H_
end_comment
end_unit
