begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2011 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMPILER_TRANSLATOR_BUILTINFUNCTIONEMULATOR_H_
end_ifndef
begin_define
DECL|macro|COMPILER_TRANSLATOR_BUILTINFUNCTIONEMULATOR_H_
define|#
directive|define
name|COMPILER_TRANSLATOR_BUILTINFUNCTIONEMULATOR_H_
end_define
begin_include
include|#
directive|include
file|"compiler/translator/InfoSink.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/IntermNode.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// This class decides which built-in functions need to be replaced with the
end_comment
begin_comment
comment|// emulated ones.
end_comment
begin_comment
comment|// It can be used to work around driver bugs or implement functions that are
end_comment
begin_comment
comment|// not natively implemented on a specific platform.
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|class
name|BuiltInFunctionEmulator
block|{
name|public
label|:
name|BuiltInFunctionEmulator
argument_list|()
expr_stmt|;
name|void
name|MarkBuiltInFunctionsForEmulation
parameter_list|(
name|TIntermNode
modifier|*
name|root
parameter_list|)
function_decl|;
name|void
name|Cleanup
parameter_list|()
function_decl|;
comment|// "name(" becomes "webgl_name_emu(".
specifier|static
name|TString
name|GetEmulatedFunctionName
parameter_list|(
specifier|const
name|TString
modifier|&
name|name
parameter_list|)
function_decl|;
name|bool
name|IsOutputEmpty
argument_list|()
specifier|const
expr_stmt|;
comment|// Output function emulation definition. This should be before any other
comment|// shader source.
name|void
name|OutputEmulatedFunctions
argument_list|(
name|TInfoSinkBase
operator|&
name|out
argument_list|)
decl|const
decl_stmt|;
comment|// Add functions that need to be emulated.
name|void
name|addEmulatedFunction
parameter_list|(
name|TOperator
name|op
parameter_list|,
specifier|const
name|TType
modifier|*
name|param
parameter_list|,
specifier|const
name|char
modifier|*
name|emulatedFunctionDefinition
parameter_list|)
function_decl|;
name|void
name|addEmulatedFunction
parameter_list|(
name|TOperator
name|op
parameter_list|,
specifier|const
name|TType
modifier|*
name|param1
parameter_list|,
specifier|const
name|TType
modifier|*
name|param2
parameter_list|,
specifier|const
name|char
modifier|*
name|emulatedFunctionDefinition
parameter_list|)
function_decl|;
name|void
name|addEmulatedFunction
parameter_list|(
name|TOperator
name|op
parameter_list|,
specifier|const
name|TType
modifier|*
name|param1
parameter_list|,
specifier|const
name|TType
modifier|*
name|param2
parameter_list|,
specifier|const
name|TType
modifier|*
name|param3
parameter_list|,
specifier|const
name|char
modifier|*
name|emulatedFunctionDefinition
parameter_list|)
function_decl|;
name|private
label|:
name|class
name|BuiltInFunctionEmulationMarker
decl_stmt|;
comment|// Records that a function is called by the shader and might need to be
comment|// emulated. If the function is not in mEmulatedFunctions, this becomes a
comment|// no-op. Returns true if the function call needs to be replaced with an
comment|// emulated one.
name|bool
name|SetFunctionCalled
parameter_list|(
name|TOperator
name|op
parameter_list|,
specifier|const
name|TType
modifier|&
name|param
parameter_list|)
function_decl|;
name|bool
name|SetFunctionCalled
parameter_list|(
name|TOperator
name|op
parameter_list|,
specifier|const
name|TType
modifier|&
name|param1
parameter_list|,
specifier|const
name|TType
modifier|&
name|param2
parameter_list|)
function_decl|;
name|bool
name|SetFunctionCalled
parameter_list|(
name|TOperator
name|op
parameter_list|,
specifier|const
name|TType
modifier|&
name|param1
parameter_list|,
specifier|const
name|TType
modifier|&
name|param2
parameter_list|,
specifier|const
name|TType
modifier|&
name|param3
parameter_list|)
function_decl|;
name|class
name|FunctionId
block|{
name|public
label|:
name|FunctionId
argument_list|(
argument|TOperator op
argument_list|,
argument|const TType *param
argument_list|)
empty_stmt|;
name|FunctionId
argument_list|(
argument|TOperator op
argument_list|,
argument|const TType *param1
argument_list|,
argument|const TType *param2
argument_list|)
empty_stmt|;
name|FunctionId
argument_list|(
argument|TOperator op
argument_list|,
argument|const TType *param1
argument_list|,
argument|const TType *param2
argument_list|,
argument|const TType *param3
argument_list|)
empty_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|FunctionId
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|<
operator|(
specifier|const
name|FunctionId
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
name|FunctionId
name|getCopy
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|TOperator
name|mOp
decl_stmt|;
comment|// The memory that these TType objects use is freed by PoolAllocator. The BuiltInFunctionEmulator's lifetime
comment|// can extend until after the memory pool is freed, but that's not an issue since this class never destructs
comment|// these objects.
specifier|const
name|TType
modifier|*
name|mParam1
decl_stmt|;
specifier|const
name|TType
modifier|*
name|mParam2
decl_stmt|;
specifier|const
name|TType
modifier|*
name|mParam3
decl_stmt|;
block|}
empty_stmt|;
name|bool
name|SetFunctionCalled
parameter_list|(
specifier|const
name|FunctionId
modifier|&
name|functionId
parameter_list|)
function_decl|;
comment|// Map from function id to emulated function definition
name|std
operator|::
name|map
operator|<
name|FunctionId
operator|,
name|std
operator|::
name|string
operator|>
name|mEmulatedFunctions
expr_stmt|;
comment|// Called function ids
name|std
operator|::
name|vector
operator|<
name|FunctionId
operator|>
name|mFunctions
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// COMPILER_TRANSLATOR_BUILTINFUNCTIONEMULATOR_H_
end_comment
end_unit
