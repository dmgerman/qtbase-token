begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// StructureHLSL.h:
end_comment
begin_comment
comment|//   Interfaces of methods for HLSL translation of GLSL structures.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|TRANSLATOR_STRUCTUREHLSL_H_
end_ifndef
begin_define
DECL|macro|TRANSLATOR_STRUCTUREHLSL_H_
define|#
directive|define
name|TRANSLATOR_STRUCTUREHLSL_H_
end_define
begin_include
include|#
directive|include
file|"compiler/translator/Common.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/intermediate.h"
end_include
begin_include
include|#
directive|include
file|<set>
end_include
begin_decl_stmt
DECL|variable|TInfoSinkBase
name|class
name|TInfoSinkBase
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|TScopeBracket
name|class
name|TScopeBracket
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|namespace
name|sh
block|{
comment|// This helper class assists structure and interface block definitions in determining
comment|// how to pack std140 structs within HLSL's packing rules.
name|class
name|Std140PaddingHelper
block|{
name|public
label|:
name|explicit
name|Std140PaddingHelper
argument_list|(
specifier|const
name|std
operator|::
name|map
operator|<
name|TString
argument_list|,
name|int
operator|>
operator|&
name|structElementIndexes
argument_list|)
decl_stmt|;
name|int
name|elementIndex
argument_list|()
specifier|const
block|{
return|return
name|mElementIndex
return|;
block|}
name|int
name|prePadding
parameter_list|(
specifier|const
name|TType
modifier|&
name|type
parameter_list|)
function_decl|;
name|TString
name|prePaddingString
parameter_list|(
specifier|const
name|TType
modifier|&
name|type
parameter_list|)
function_decl|;
name|TString
name|postPaddingString
parameter_list|(
specifier|const
name|TType
modifier|&
name|type
parameter_list|,
name|bool
name|useHLSLRowMajorPacking
parameter_list|)
function_decl|;
name|private
label|:
name|int
name|mPaddingCounter
decl_stmt|;
name|int
name|mElementIndex
decl_stmt|;
specifier|const
name|std
operator|::
name|map
operator|<
name|TString
operator|,
name|int
operator|>
operator|&
name|mStructElementIndexes
expr_stmt|;
block|}
empty_stmt|;
name|class
name|StructureHLSL
block|{
name|public
label|:
name|StructureHLSL
argument_list|()
expr_stmt|;
name|void
name|addConstructor
parameter_list|(
specifier|const
name|TType
modifier|&
name|type
parameter_list|,
specifier|const
name|TString
modifier|&
name|name
parameter_list|,
specifier|const
name|TIntermSequence
modifier|*
name|parameters
parameter_list|)
function_decl|;
name|std
operator|::
name|string
name|structsHeader
argument_list|()
specifier|const
expr_stmt|;
name|TString
name|defineQualified
parameter_list|(
specifier|const
name|TStructure
modifier|&
name|structure
parameter_list|,
name|bool
name|useHLSLRowMajorPacking
parameter_list|,
name|bool
name|useStd140Packing
parameter_list|)
function_decl|;
specifier|static
name|TString
name|defineNameless
parameter_list|(
specifier|const
name|TStructure
modifier|&
name|structure
parameter_list|)
function_decl|;
name|Std140PaddingHelper
name|getPaddingHelper
argument_list|()
specifier|const
block|{
return|return
name|Std140PaddingHelper
argument_list|(
name|mStd140StructElementIndexes
argument_list|)
return|;
block|}
name|private
label|:
name|std
operator|::
name|map
operator|<
name|TString
operator|,
name|int
operator|>
name|mStd140StructElementIndexes
expr_stmt|;
typedef|typedef
name|std
operator|::
name|set
operator|<
name|TString
operator|>
name|StructNames
expr_stmt|;
name|StructNames
name|mStructNames
decl_stmt|;
typedef|typedef
name|std
operator|::
name|set
operator|<
name|TString
operator|>
name|Constructors
expr_stmt|;
name|Constructors
name|mConstructors
decl_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|TString
operator|>
name|StructDeclarations
expr_stmt|;
name|StructDeclarations
name|mStructDeclarations
decl_stmt|;
name|void
name|storeStd140ElementIndex
parameter_list|(
specifier|const
name|TStructure
modifier|&
name|structure
parameter_list|,
name|bool
name|useHLSLRowMajorPacking
parameter_list|)
function_decl|;
specifier|static
name|TString
name|define
parameter_list|(
specifier|const
name|TStructure
modifier|&
name|structure
parameter_list|,
name|bool
name|useHLSLRowMajorPacking
parameter_list|,
name|bool
name|useStd140Packing
parameter_list|,
name|Std140PaddingHelper
modifier|*
name|padHelper
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// COMPILER_STRUCTUREHLSL_H_
end_comment
end_unit
