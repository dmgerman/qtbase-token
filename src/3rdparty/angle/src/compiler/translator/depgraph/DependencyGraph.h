begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMPILER_DEPGRAPH_DEPENDENCY_GRAPH_H
end_ifndef
begin_define
DECL|macro|COMPILER_DEPGRAPH_DEPENDENCY_GRAPH_H
define|#
directive|define
name|COMPILER_DEPGRAPH_DEPENDENCY_GRAPH_H
end_define
begin_include
include|#
directive|include
file|"compiler/translator/intermediate.h"
end_include
begin_include
include|#
directive|include
file|<set>
end_include
begin_include
include|#
directive|include
file|<stack>
end_include
begin_decl_stmt
DECL|variable|TGraphNode
name|class
name|TGraphNode
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|TGraphParentNode
name|class
name|TGraphParentNode
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|TGraphArgument
name|class
name|TGraphArgument
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|TGraphFunctionCall
name|class
name|TGraphFunctionCall
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|TGraphSymbol
name|class
name|TGraphSymbol
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|TGraphSelection
name|class
name|TGraphSelection
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|TGraphLoop
name|class
name|TGraphLoop
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|TGraphLogicalOp
name|class
name|TGraphLogicalOp
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|TDependencyGraphTraverser
name|class
name|TDependencyGraphTraverser
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|TDependencyGraphOutput
name|class
name|TDependencyGraphOutput
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|TGraphNodeSet
typedef|typedef
name|std
operator|::
name|set
operator|<
name|TGraphNode
operator|*
operator|>
name|TGraphNodeSet
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|TGraphNodeVector
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|TGraphNode
operator|*
operator|>
name|TGraphNodeVector
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|TGraphSymbolVector
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|TGraphSymbol
operator|*
operator|>
name|TGraphSymbolVector
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|TFunctionCallVector
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|TGraphFunctionCall
operator|*
operator|>
name|TFunctionCallVector
expr_stmt|;
end_typedef
begin_comment
comment|//
end_comment
begin_comment
comment|// Base class for all dependency graph nodes.
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|class
name|TGraphNode
block|{
name|public
label|:
name|TGraphNode
argument_list|(
name|TIntermNode
operator|*
name|node
argument_list|)
operator|:
name|intermNode
argument_list|(
argument|node
argument_list|)
block|{}
name|virtual
operator|~
name|TGraphNode
argument_list|()
block|{}
name|virtual
name|void
name|traverse
argument_list|(
name|TDependencyGraphTraverser
operator|*
name|graphTraverser
argument_list|)
expr_stmt|;
name|protected
label|:
name|TIntermNode
modifier|*
name|intermNode
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// Base class for dependency graph nodes that may have children.
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|class
name|TGraphParentNode
range|:
name|public
name|TGraphNode
block|{
name|public
operator|:
name|TGraphParentNode
argument_list|(
name|TIntermNode
operator|*
name|node
argument_list|)
operator|:
name|TGraphNode
argument_list|(
argument|node
argument_list|)
block|{}
name|virtual
operator|~
name|TGraphParentNode
argument_list|()
block|{}
name|void
name|addDependentNode
argument_list|(
argument|TGraphNode* node
argument_list|)
block|{
if|if
condition|(
name|node
operator|!=
name|this
condition|)
name|mDependentNodes
operator|.
name|insert
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|virtual
name|void
name|traverse
argument_list|(
name|TDependencyGraphTraverser
operator|*
name|graphTraverser
argument_list|)
block|;
name|private
operator|:
name|TGraphNodeSet
name|mDependentNodes
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// Handle function call arguments.
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|class
name|TGraphArgument
range|:
name|public
name|TGraphParentNode
block|{
name|public
operator|:
name|TGraphArgument
argument_list|(
argument|TIntermAggregate* intermFunctionCall
argument_list|,
argument|int argumentNumber
argument_list|)
operator|:
name|TGraphParentNode
argument_list|(
name|intermFunctionCall
argument_list|)
block|,
name|mArgumentNumber
argument_list|(
argument|argumentNumber
argument_list|)
block|{}
name|virtual
operator|~
name|TGraphArgument
argument_list|()
block|{}
specifier|const
name|TIntermAggregate
operator|*
name|getIntermFunctionCall
argument_list|()
specifier|const
block|{
return|return
name|intermNode
operator|->
name|getAsAggregate
argument_list|()
return|;
block|}
name|int
name|getArgumentNumber
argument_list|()
specifier|const
block|{
return|return
name|mArgumentNumber
return|;
block|}
name|virtual
name|void
name|traverse
argument_list|(
name|TDependencyGraphTraverser
operator|*
name|graphTraverser
argument_list|)
block|;
name|private
operator|:
name|int
name|mArgumentNumber
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// Handle function calls.
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|class
name|TGraphFunctionCall
range|:
name|public
name|TGraphParentNode
block|{
name|public
operator|:
name|TGraphFunctionCall
argument_list|(
name|TIntermAggregate
operator|*
name|intermFunctionCall
argument_list|)
operator|:
name|TGraphParentNode
argument_list|(
argument|intermFunctionCall
argument_list|)
block|{}
name|virtual
operator|~
name|TGraphFunctionCall
argument_list|()
block|{}
specifier|const
name|TIntermAggregate
operator|*
name|getIntermFunctionCall
argument_list|()
specifier|const
block|{
return|return
name|intermNode
operator|->
name|getAsAggregate
argument_list|()
return|;
block|}
name|virtual
name|void
name|traverse
argument_list|(
name|TDependencyGraphTraverser
operator|*
name|graphTraverser
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// Handle symbols.
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|class
name|TGraphSymbol
range|:
name|public
name|TGraphParentNode
block|{
name|public
operator|:
name|TGraphSymbol
argument_list|(
name|TIntermSymbol
operator|*
name|intermSymbol
argument_list|)
operator|:
name|TGraphParentNode
argument_list|(
argument|intermSymbol
argument_list|)
block|{}
name|virtual
operator|~
name|TGraphSymbol
argument_list|()
block|{}
specifier|const
name|TIntermSymbol
operator|*
name|getIntermSymbol
argument_list|()
specifier|const
block|{
return|return
name|intermNode
operator|->
name|getAsSymbolNode
argument_list|()
return|;
block|}
name|virtual
name|void
name|traverse
argument_list|(
name|TDependencyGraphTraverser
operator|*
name|graphTraverser
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// Handle if statements and ternary operators.
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|class
name|TGraphSelection
range|:
name|public
name|TGraphNode
block|{
name|public
operator|:
name|TGraphSelection
argument_list|(
name|TIntermSelection
operator|*
name|intermSelection
argument_list|)
operator|:
name|TGraphNode
argument_list|(
argument|intermSelection
argument_list|)
block|{}
name|virtual
operator|~
name|TGraphSelection
argument_list|()
block|{}
specifier|const
name|TIntermSelection
operator|*
name|getIntermSelection
argument_list|()
specifier|const
block|{
return|return
name|intermNode
operator|->
name|getAsSelectionNode
argument_list|()
return|;
block|}
name|virtual
name|void
name|traverse
argument_list|(
name|TDependencyGraphTraverser
operator|*
name|graphTraverser
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// Handle for, do-while, and while loops.
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|class
name|TGraphLoop
range|:
name|public
name|TGraphNode
block|{
name|public
operator|:
name|TGraphLoop
argument_list|(
name|TIntermLoop
operator|*
name|intermLoop
argument_list|)
operator|:
name|TGraphNode
argument_list|(
argument|intermLoop
argument_list|)
block|{}
name|virtual
operator|~
name|TGraphLoop
argument_list|()
block|{}
specifier|const
name|TIntermLoop
operator|*
name|getIntermLoop
argument_list|()
specifier|const
block|{
return|return
name|intermNode
operator|->
name|getAsLoopNode
argument_list|()
return|;
block|}
name|virtual
name|void
name|traverse
argument_list|(
name|TDependencyGraphTraverser
operator|*
name|graphTraverser
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// Handle logical and, or.
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|class
name|TGraphLogicalOp
range|:
name|public
name|TGraphNode
block|{
name|public
operator|:
name|TGraphLogicalOp
argument_list|(
name|TIntermBinary
operator|*
name|intermLogicalOp
argument_list|)
operator|:
name|TGraphNode
argument_list|(
argument|intermLogicalOp
argument_list|)
block|{}
name|virtual
operator|~
name|TGraphLogicalOp
argument_list|()
block|{}
specifier|const
name|TIntermBinary
operator|*
name|getIntermLogicalOp
argument_list|()
specifier|const
block|{
return|return
name|intermNode
operator|->
name|getAsBinaryNode
argument_list|()
return|;
block|}
specifier|const
name|char
operator|*
name|getOpString
argument_list|()
specifier|const
block|;
name|virtual
name|void
name|traverse
argument_list|(
name|TDependencyGraphTraverser
operator|*
name|graphTraverser
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// A dependency graph of symbols, function calls, conditions etc.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This class provides an interface to the entry points of the dependency graph.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Dependency graph nodes should be created by using one of the provided "create..." methods.
end_comment
begin_comment
comment|// This class (and nobody else) manages the memory of the created nodes.
end_comment
begin_comment
comment|// Nodes may not be removed after being added, so all created nodes will exist while the
end_comment
begin_comment
comment|// TDependencyGraph instance exists.
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|class
name|TDependencyGraph
block|{
name|public
label|:
name|TDependencyGraph
argument_list|(
name|TIntermNode
operator|*
name|intermNode
argument_list|)
expr_stmt|;
operator|~
name|TDependencyGraph
argument_list|()
expr_stmt|;
name|TGraphNodeVector
operator|::
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|mAllNodes
operator|.
name|begin
argument_list|()
return|;
block|}
name|TGraphNodeVector
operator|::
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|mAllNodes
operator|.
name|end
argument_list|()
return|;
block|}
name|TGraphSymbolVector
operator|::
name|const_iterator
name|beginSamplerSymbols
argument_list|()
specifier|const
block|{
return|return
name|mSamplerSymbols
operator|.
name|begin
argument_list|()
return|;
block|}
name|TGraphSymbolVector
operator|::
name|const_iterator
name|endSamplerSymbols
argument_list|()
specifier|const
block|{
return|return
name|mSamplerSymbols
operator|.
name|end
argument_list|()
return|;
block|}
name|TFunctionCallVector
operator|::
name|const_iterator
name|beginUserDefinedFunctionCalls
argument_list|()
specifier|const
block|{
return|return
name|mUserDefinedFunctionCalls
operator|.
name|begin
argument_list|()
return|;
block|}
name|TFunctionCallVector
operator|::
name|const_iterator
name|endUserDefinedFunctionCalls
argument_list|()
specifier|const
block|{
return|return
name|mUserDefinedFunctionCalls
operator|.
name|end
argument_list|()
return|;
block|}
name|TGraphArgument
modifier|*
name|createArgument
parameter_list|(
name|TIntermAggregate
modifier|*
name|intermFunctionCall
parameter_list|,
name|int
name|argumentNumber
parameter_list|)
function_decl|;
name|TGraphFunctionCall
modifier|*
name|createFunctionCall
parameter_list|(
name|TIntermAggregate
modifier|*
name|intermFunctionCall
parameter_list|)
function_decl|;
name|TGraphSymbol
modifier|*
name|getOrCreateSymbol
parameter_list|(
name|TIntermSymbol
modifier|*
name|intermSymbol
parameter_list|)
function_decl|;
name|TGraphSelection
modifier|*
name|createSelection
parameter_list|(
name|TIntermSelection
modifier|*
name|intermSelection
parameter_list|)
function_decl|;
name|TGraphLoop
modifier|*
name|createLoop
parameter_list|(
name|TIntermLoop
modifier|*
name|intermLoop
parameter_list|)
function_decl|;
name|TGraphLogicalOp
modifier|*
name|createLogicalOp
parameter_list|(
name|TIntermBinary
modifier|*
name|intermLogicalOp
parameter_list|)
function_decl|;
name|private
label|:
typedef|typedef
name|TMap
operator|<
name|int
operator|,
name|TGraphSymbol
operator|*
operator|>
name|TSymbolIdMap
expr_stmt|;
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|int
operator|,
name|TGraphSymbol
operator|*
operator|>
name|TSymbolIdPair
expr_stmt|;
name|TGraphNodeVector
name|mAllNodes
decl_stmt|;
name|TGraphSymbolVector
name|mSamplerSymbols
decl_stmt|;
name|TFunctionCallVector
name|mUserDefinedFunctionCalls
decl_stmt|;
name|TSymbolIdMap
name|mSymbolIdMap
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// For traversing the dependency graph. Users should derive from this,
end_comment
begin_comment
comment|// put their traversal specific data in it, and then pass it to a
end_comment
begin_comment
comment|// traverse method.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// When using this, just fill in the methods for nodes you want visited.
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|class
name|TDependencyGraphTraverser
block|{
name|public
label|:
name|TDependencyGraphTraverser
argument_list|()
operator|:
name|mDepth
argument_list|(
literal|0
argument_list|)
block|{}
name|virtual
name|void
name|visitSymbol
argument_list|(
argument|TGraphSymbol* symbol
argument_list|)
block|{}
expr_stmt|;
name|virtual
name|void
name|visitArgument
parameter_list|(
name|TGraphArgument
modifier|*
name|selection
parameter_list|)
block|{}
empty_stmt|;
name|virtual
name|void
name|visitFunctionCall
parameter_list|(
name|TGraphFunctionCall
modifier|*
name|functionCall
parameter_list|)
block|{}
empty_stmt|;
name|virtual
name|void
name|visitSelection
parameter_list|(
name|TGraphSelection
modifier|*
name|selection
parameter_list|)
block|{}
empty_stmt|;
name|virtual
name|void
name|visitLoop
parameter_list|(
name|TGraphLoop
modifier|*
name|loop
parameter_list|)
block|{}
empty_stmt|;
name|virtual
name|void
name|visitLogicalOp
parameter_list|(
name|TGraphLogicalOp
modifier|*
name|logicalOp
parameter_list|)
block|{}
empty_stmt|;
name|int
name|getDepth
argument_list|()
specifier|const
block|{
return|return
name|mDepth
return|;
block|}
name|void
name|incrementDepth
parameter_list|()
block|{
operator|++
name|mDepth
expr_stmt|;
block|}
name|void
name|decrementDepth
parameter_list|()
block|{
operator|--
name|mDepth
expr_stmt|;
block|}
name|void
name|clearVisited
parameter_list|()
block|{
name|mVisited
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|void
name|markVisited
parameter_list|(
name|TGraphNode
modifier|*
name|node
parameter_list|)
block|{
name|mVisited
operator|.
name|insert
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|bool
name|isVisited
argument_list|(
name|TGraphNode
operator|*
name|node
argument_list|)
decl|const
block|{
return|return
name|mVisited
operator|.
name|find
argument_list|(
name|node
argument_list|)
operator|!=
name|mVisited
operator|.
name|end
argument_list|()
return|;
block|}
name|private
label|:
name|int
name|mDepth
decl_stmt|;
name|TGraphNodeSet
name|mVisited
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
