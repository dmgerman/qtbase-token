begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2011 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/BuiltInFunctionEmulator.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/SymbolTable.h"
end_include
begin_class
DECL|class|BuiltInFunctionEmulationMarker
class|class
name|BuiltInFunctionEmulator
operator|::
name|BuiltInFunctionEmulationMarker
super|:
specifier|public
name|TIntermTraverser
block|{
public|public:
DECL|function|BuiltInFunctionEmulationMarker
name|BuiltInFunctionEmulationMarker
parameter_list|(
name|BuiltInFunctionEmulator
modifier|&
name|emulator
parameter_list|)
member_init_list|:
name|mEmulator
argument_list|(
name|emulator
argument_list|)
block|{     }
DECL|function|visitUnary
specifier|virtual
name|bool
name|visitUnary
parameter_list|(
name|Visit
name|visit
parameter_list|,
name|TIntermUnary
modifier|*
name|node
parameter_list|)
block|{
if|if
condition|(
name|visit
operator|==
name|PreVisit
condition|)
block|{
name|bool
name|needToEmulate
init|=
name|mEmulator
operator|.
name|SetFunctionCalled
argument_list|(
name|node
operator|->
name|getOp
argument_list|()
argument_list|,
name|node
operator|->
name|getOperand
argument_list|()
operator|->
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|needToEmulate
condition|)
name|node
operator|->
name|setUseEmulatedFunction
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|visitAggregate
specifier|virtual
name|bool
name|visitAggregate
parameter_list|(
name|Visit
name|visit
parameter_list|,
name|TIntermAggregate
modifier|*
name|node
parameter_list|)
block|{
if|if
condition|(
name|visit
operator|==
name|PreVisit
condition|)
block|{
comment|// Here we handle all the built-in functions instead of the ones we
comment|// currently identified as problematic.
switch|switch
condition|(
name|node
operator|->
name|getOp
argument_list|()
condition|)
block|{
case|case
name|EOpLessThan
case|:
case|case
name|EOpGreaterThan
case|:
case|case
name|EOpLessThanEqual
case|:
case|case
name|EOpGreaterThanEqual
case|:
case|case
name|EOpVectorEqual
case|:
case|case
name|EOpVectorNotEqual
case|:
case|case
name|EOpMod
case|:
case|case
name|EOpPow
case|:
case|case
name|EOpAtan
case|:
case|case
name|EOpMin
case|:
case|case
name|EOpMax
case|:
case|case
name|EOpClamp
case|:
case|case
name|EOpMix
case|:
case|case
name|EOpStep
case|:
case|case
name|EOpSmoothStep
case|:
case|case
name|EOpDistance
case|:
case|case
name|EOpDot
case|:
case|case
name|EOpCross
case|:
case|case
name|EOpFaceForward
case|:
case|case
name|EOpReflect
case|:
case|case
name|EOpRefract
case|:
case|case
name|EOpOuterProduct
case|:
case|case
name|EOpMul
case|:
break|break;
default|default:
return|return
literal|true
return|;
block|}
empty_stmt|;
specifier|const
name|TIntermSequence
modifier|&
name|sequence
init|=
operator|*
operator|(
name|node
operator|->
name|getSequence
argument_list|()
operator|)
decl_stmt|;
name|bool
name|needToEmulate
init|=
literal|false
decl_stmt|;
comment|// Right now we only handle built-in functions with two or three parameters.
if|if
condition|(
name|sequence
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|TIntermTyped
modifier|*
name|param1
init|=
name|sequence
index|[
literal|0
index|]
operator|->
name|getAsTyped
argument_list|()
decl_stmt|;
name|TIntermTyped
modifier|*
name|param2
init|=
name|sequence
index|[
literal|1
index|]
operator|->
name|getAsTyped
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|param1
operator|||
operator|!
name|param2
condition|)
return|return
literal|true
return|;
name|needToEmulate
operator|=
name|mEmulator
operator|.
name|SetFunctionCalled
argument_list|(
name|node
operator|->
name|getOp
argument_list|()
argument_list|,
name|param1
operator|->
name|getType
argument_list|()
argument_list|,
name|param2
operator|->
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sequence
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
block|{
name|TIntermTyped
modifier|*
name|param1
init|=
name|sequence
index|[
literal|0
index|]
operator|->
name|getAsTyped
argument_list|()
decl_stmt|;
name|TIntermTyped
modifier|*
name|param2
init|=
name|sequence
index|[
literal|1
index|]
operator|->
name|getAsTyped
argument_list|()
decl_stmt|;
name|TIntermTyped
modifier|*
name|param3
init|=
name|sequence
index|[
literal|2
index|]
operator|->
name|getAsTyped
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|param1
operator|||
operator|!
name|param2
operator|||
operator|!
name|param3
condition|)
return|return
literal|true
return|;
name|needToEmulate
operator|=
name|mEmulator
operator|.
name|SetFunctionCalled
argument_list|(
name|node
operator|->
name|getOp
argument_list|()
argument_list|,
name|param1
operator|->
name|getType
argument_list|()
argument_list|,
name|param2
operator|->
name|getType
argument_list|()
argument_list|,
name|param3
operator|->
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|needToEmulate
condition|)
name|node
operator|->
name|setUseEmulatedFunction
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
private|private:
DECL|member|mEmulator
name|BuiltInFunctionEmulator
modifier|&
name|mEmulator
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|BuiltInFunctionEmulator
name|BuiltInFunctionEmulator
operator|::
name|BuiltInFunctionEmulator
parameter_list|()
block|{}
end_constructor
begin_function
DECL|function|addEmulatedFunction
name|void
name|BuiltInFunctionEmulator
operator|::
name|addEmulatedFunction
parameter_list|(
name|TOperator
name|op
parameter_list|,
specifier|const
name|TType
modifier|&
name|param
parameter_list|,
specifier|const
name|char
modifier|*
name|emulatedFunctionDefinition
parameter_list|)
block|{
name|mEmulatedFunctions
index|[
name|FunctionId
argument_list|(
name|op
argument_list|,
name|param
argument_list|)
index|]
operator|=
name|std
operator|::
name|string
argument_list|(
name|emulatedFunctionDefinition
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addEmulatedFunction
name|void
name|BuiltInFunctionEmulator
operator|::
name|addEmulatedFunction
parameter_list|(
name|TOperator
name|op
parameter_list|,
specifier|const
name|TType
modifier|&
name|param1
parameter_list|,
specifier|const
name|TType
modifier|&
name|param2
parameter_list|,
specifier|const
name|char
modifier|*
name|emulatedFunctionDefinition
parameter_list|)
block|{
name|mEmulatedFunctions
index|[
name|FunctionId
argument_list|(
name|op
argument_list|,
name|param1
argument_list|,
name|param2
argument_list|)
index|]
operator|=
name|std
operator|::
name|string
argument_list|(
name|emulatedFunctionDefinition
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addEmulatedFunction
name|void
name|BuiltInFunctionEmulator
operator|::
name|addEmulatedFunction
parameter_list|(
name|TOperator
name|op
parameter_list|,
specifier|const
name|TType
modifier|&
name|param1
parameter_list|,
specifier|const
name|TType
modifier|&
name|param2
parameter_list|,
specifier|const
name|TType
modifier|&
name|param3
parameter_list|,
specifier|const
name|char
modifier|*
name|emulatedFunctionDefinition
parameter_list|)
block|{
name|mEmulatedFunctions
index|[
name|FunctionId
argument_list|(
name|op
argument_list|,
name|param1
argument_list|,
name|param2
argument_list|,
name|param3
argument_list|)
index|]
operator|=
name|std
operator|::
name|string
argument_list|(
name|emulatedFunctionDefinition
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|IsOutputEmpty
name|bool
name|BuiltInFunctionEmulator
operator|::
name|IsOutputEmpty
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mFunctions
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|OutputEmulatedFunctions
name|void
name|BuiltInFunctionEmulator
operator|::
name|OutputEmulatedFunctions
parameter_list|(
name|TInfoSinkBase
modifier|&
name|out
parameter_list|)
specifier|const
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mFunctions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|out
operator|<<
name|mEmulatedFunctions
operator|.
name|find
argument_list|(
name|mFunctions
index|[
name|i
index|]
argument_list|)
operator|->
name|second
operator|<<
literal|"\n\n"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|SetFunctionCalled
name|bool
name|BuiltInFunctionEmulator
operator|::
name|SetFunctionCalled
parameter_list|(
name|TOperator
name|op
parameter_list|,
specifier|const
name|TType
modifier|&
name|param
parameter_list|)
block|{
return|return
name|SetFunctionCalled
argument_list|(
name|FunctionId
argument_list|(
name|op
argument_list|,
name|param
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|SetFunctionCalled
name|bool
name|BuiltInFunctionEmulator
operator|::
name|SetFunctionCalled
parameter_list|(
name|TOperator
name|op
parameter_list|,
specifier|const
name|TType
modifier|&
name|param1
parameter_list|,
specifier|const
name|TType
modifier|&
name|param2
parameter_list|)
block|{
return|return
name|SetFunctionCalled
argument_list|(
name|FunctionId
argument_list|(
name|op
argument_list|,
name|param1
argument_list|,
name|param2
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|SetFunctionCalled
name|bool
name|BuiltInFunctionEmulator
operator|::
name|SetFunctionCalled
parameter_list|(
name|TOperator
name|op
parameter_list|,
specifier|const
name|TType
modifier|&
name|param1
parameter_list|,
specifier|const
name|TType
modifier|&
name|param2
parameter_list|,
specifier|const
name|TType
modifier|&
name|param3
parameter_list|)
block|{
return|return
name|SetFunctionCalled
argument_list|(
name|FunctionId
argument_list|(
name|op
argument_list|,
name|param1
argument_list|,
name|param2
argument_list|,
name|param3
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|SetFunctionCalled
name|bool
name|BuiltInFunctionEmulator
operator|::
name|SetFunctionCalled
parameter_list|(
specifier|const
name|FunctionId
modifier|&
name|functionId
parameter_list|)
block|{
if|if
condition|(
name|mEmulatedFunctions
operator|.
name|find
argument_list|(
name|functionId
argument_list|)
operator|!=
name|mEmulatedFunctions
operator|.
name|end
argument_list|()
condition|)
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mFunctions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|mFunctions
index|[
name|i
index|]
operator|==
name|functionId
condition|)
return|return
literal|true
return|;
block|}
name|mFunctions
operator|.
name|push_back
argument_list|(
name|functionId
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|MarkBuiltInFunctionsForEmulation
name|void
name|BuiltInFunctionEmulator
operator|::
name|MarkBuiltInFunctionsForEmulation
parameter_list|(
name|TIntermNode
modifier|*
name|root
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|root
argument_list|)
expr_stmt|;
if|if
condition|(
name|mEmulatedFunctions
operator|.
name|empty
argument_list|()
condition|)
return|return;
name|BuiltInFunctionEmulationMarker
name|marker
argument_list|(
operator|*
name|this
argument_list|)
decl_stmt|;
name|root
operator|->
name|traverse
argument_list|(
operator|&
name|marker
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|Cleanup
name|void
name|BuiltInFunctionEmulator
operator|::
name|Cleanup
parameter_list|()
block|{
name|mFunctions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|GetEmulatedFunctionName
name|TString
name|BuiltInFunctionEmulator
operator|::
name|GetEmulatedFunctionName
parameter_list|(
specifier|const
name|TString
modifier|&
name|name
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|name
index|[
name|name
operator|.
name|length
argument_list|()
operator|-
literal|1
index|]
operator|==
literal|'('
argument_list|)
expr_stmt|;
return|return
literal|"webgl_"
operator|+
name|name
operator|.
name|substr
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
literal|"_emu("
return|;
block|}
end_function
begin_constructor
DECL|function|FunctionId
name|BuiltInFunctionEmulator
operator|::
name|FunctionId
operator|::
name|FunctionId
parameter_list|(
name|TOperator
name|op
parameter_list|,
specifier|const
name|TType
modifier|&
name|param
parameter_list|)
member_init_list|:
name|mOp
argument_list|(
name|op
argument_list|)
member_init_list|,
name|mParam1
argument_list|(
name|param
argument_list|)
member_init_list|,
name|mParam2
argument_list|(
name|EbtVoid
argument_list|)
member_init_list|,
name|mParam3
argument_list|(
name|EbtVoid
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|FunctionId
name|BuiltInFunctionEmulator
operator|::
name|FunctionId
operator|::
name|FunctionId
parameter_list|(
name|TOperator
name|op
parameter_list|,
specifier|const
name|TType
modifier|&
name|param1
parameter_list|,
specifier|const
name|TType
modifier|&
name|param2
parameter_list|)
member_init_list|:
name|mOp
argument_list|(
name|op
argument_list|)
member_init_list|,
name|mParam1
argument_list|(
name|param1
argument_list|)
member_init_list|,
name|mParam2
argument_list|(
name|param2
argument_list|)
member_init_list|,
name|mParam3
argument_list|(
name|EbtVoid
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|FunctionId
name|BuiltInFunctionEmulator
operator|::
name|FunctionId
operator|::
name|FunctionId
parameter_list|(
name|TOperator
name|op
parameter_list|,
specifier|const
name|TType
modifier|&
name|param1
parameter_list|,
specifier|const
name|TType
modifier|&
name|param2
parameter_list|,
specifier|const
name|TType
modifier|&
name|param3
parameter_list|)
member_init_list|:
name|mOp
argument_list|(
name|op
argument_list|)
member_init_list|,
name|mParam1
argument_list|(
name|param1
argument_list|)
member_init_list|,
name|mParam2
argument_list|(
name|param2
argument_list|)
member_init_list|,
name|mParam3
argument_list|(
name|param3
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|operator ==
name|bool
name|BuiltInFunctionEmulator
operator|::
name|FunctionId
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|BuiltInFunctionEmulator
operator|::
name|FunctionId
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|mOp
operator|==
name|other
operator|.
name|mOp
operator|&&
name|mParam1
operator|==
name|other
operator|.
name|mParam1
operator|&&
name|mParam2
operator|==
name|other
operator|.
name|mParam2
operator|&&
name|mParam3
operator|==
name|other
operator|.
name|mParam3
operator|)
return|;
block|}
end_function
begin_function
DECL|function|operator <
name|bool
name|BuiltInFunctionEmulator
operator|::
name|FunctionId
operator|::
name|operator
name|<
parameter_list|(
specifier|const
name|BuiltInFunctionEmulator
operator|::
name|FunctionId
modifier|&
name|other
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|mOp
operator|!=
name|other
operator|.
name|mOp
condition|)
return|return
name|mOp
operator|<
name|other
operator|.
name|mOp
return|;
if|if
condition|(
name|mParam1
operator|!=
name|other
operator|.
name|mParam1
condition|)
return|return
name|mParam1
operator|<
name|other
operator|.
name|mParam1
return|;
if|if
condition|(
name|mParam2
operator|!=
name|other
operator|.
name|mParam2
condition|)
return|return
name|mParam2
operator|<
name|other
operator|.
name|mParam2
return|;
if|if
condition|(
name|mParam3
operator|!=
name|other
operator|.
name|mParam3
condition|)
return|return
name|mParam3
operator|<
name|other
operator|.
name|mParam3
return|;
return|return
literal|false
return|;
comment|// all fields are equal
block|}
end_function
end_unit
