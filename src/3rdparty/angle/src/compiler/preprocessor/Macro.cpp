begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2011 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"Macro.h"
end_include
begin_include
include|#
directive|include
file|<sstream>
end_include
begin_include
include|#
directive|include
file|"Token.h"
end_include
begin_namespace
DECL|namespace|pp
namespace|namespace
name|pp
block|{
DECL|function|equals
name|bool
name|Macro
operator|::
name|equals
parameter_list|(
specifier|const
name|Macro
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|type
operator|==
name|other
operator|.
name|type
operator|)
operator|&&
operator|(
name|name
operator|==
name|other
operator|.
name|name
operator|)
operator|&&
operator|(
name|parameters
operator|==
name|other
operator|.
name|parameters
operator|)
operator|&&
operator|(
name|replacements
operator|==
name|other
operator|.
name|replacements
operator|)
return|;
block|}
DECL|function|PredefineMacro
name|void
name|PredefineMacro
parameter_list|(
name|MacroSet
modifier|*
name|macroSet
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|std
operator|::
name|ostringstream
name|stream
decl_stmt|;
name|stream
operator|<<
name|value
expr_stmt|;
name|Token
name|token
decl_stmt|;
name|token
operator|.
name|type
operator|=
name|Token
operator|::
name|CONST_INT
expr_stmt|;
name|token
operator|.
name|text
operator|=
name|stream
operator|.
name|str
argument_list|()
expr_stmt|;
name|Macro
name|macro
decl_stmt|;
name|macro
operator|.
name|predefined
operator|=
literal|true
expr_stmt|;
name|macro
operator|.
name|type
operator|=
name|Macro
operator|::
name|kTypeObj
expr_stmt|;
name|macro
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|macro
operator|.
name|replacements
operator|.
name|push_back
argument_list|(
name|token
argument_list|)
expr_stmt|;
operator|(
operator|*
name|macroSet
operator|)
index|[
name|name
index|]
operator|=
name|macro
expr_stmt|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace pp
end_comment
end_unit
