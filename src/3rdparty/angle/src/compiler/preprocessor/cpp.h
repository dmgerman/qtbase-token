begin_unit
begin_comment
comment|/****************************************************************************\ Copyright (c) 2002, NVIDIA Corporation.  NVIDIA Corporation("NVIDIA") supplies this software to you in consideration of your agreement to the following terms, and your use, installation, modification or redistribution of this NVIDIA software constitutes acceptance of these terms.  If you do not agree with these terms, please do not use, install, modify or redistribute this NVIDIA software.  In consideration of your agreement to abide by the following terms, and subject to these terms, NVIDIA grants you a personal, non-exclusive license, under NVIDIA's copyrights in this original NVIDIA software (the "NVIDIA Software"), to use, reproduce, modify and redistribute the NVIDIA Software, with or without modifications, in source and/or binary forms; provided that if you redistribute the NVIDIA Software, you must retain the copyright notice of NVIDIA, this notice and the following text and disclaimers in all such redistributions of the NVIDIA Software. Neither the name, trademarks, service marks nor logos of NVIDIA Corporation may be used to endorse or promote products derived from the NVIDIA Software without specific prior written permission from NVIDIA. Except as expressly stated in this notice, no other rights or licenses express or implied, are granted by NVIDIA herein, including but not limited to any patent rights that may be infringed by your derivative works or by other works in which the NVIDIA Software may be incorporated. No hardware is licensed hereunder.   THE NVIDIA SOFTWARE IS BEING PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR ITS USE AND OPERATION EITHER ALONE OR IN COMBINATION WITH OTHER PRODUCTS.  IN NO EVENT SHALL NVIDIA BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL, EXEMPLARY, CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, LOST PROFITS; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) OR ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, MODIFICATION AND/OR DISTRIBUTION OF THE NVIDIA SOFTWARE, HOWEVER CAUSED AND WHETHER UNDER THEORY OF CONTRACT, TORT (INCLUDING NEGLIGENCE), STRICT LIABILITY OR OTHERWISE, EVEN IF NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. \****************************************************************************/
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// cpp.h
end_comment
begin_comment
comment|//
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__CPP_H
argument_list|)
end_if
begin_define
DECL|macro|__CPP_H
define|#
directive|define
name|__CPP_H
value|1
end_define
begin_include
include|#
directive|include
file|"compiler/preprocessor/parser.h"
end_include
begin_include
include|#
directive|include
file|"compiler/preprocessor/tokens.h"
end_include
begin_function_decl
name|int
name|InitCPP
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|FinalCPP
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|readCPPline
parameter_list|(
name|yystypepp
modifier|*
name|yylvalpp
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|MacroExpand
parameter_list|(
name|int
name|atom
parameter_list|,
name|yystypepp
modifier|*
name|yylvalpp
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|ChkCorrectElseNesting
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_typedef
DECL|struct|MacroSymbol
typedef|typedef
struct|struct
name|MacroSymbol
block|{
DECL|member|argc
name|int
name|argc
decl_stmt|;
DECL|member|args
name|int
modifier|*
name|args
decl_stmt|;
DECL|member|body
name|TokenStream
modifier|*
name|body
decl_stmt|;
DECL|member|busy
name|unsigned
name|busy
range|:
literal|1
decl_stmt|;
DECL|member|undef
name|unsigned
name|undef
range|:
literal|1
decl_stmt|;
block|}
DECL|typedef|MacroSymbol
name|MacroSymbol
typedef|;
end_typedef
begin_function_decl
name|void
name|FreeMacro
parameter_list|(
name|MacroSymbol
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|PredefineIntMacro
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|CPPDebugLogMsg
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// Prints information into debug log
end_comment
begin_function_decl
name|void
name|CPPShInfoLogMsg
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// Store cpp Err Msg into Sh.Info.Log
end_comment
begin_function_decl
name|void
name|CPPWarningToInfoLog
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// Prints warning messages into info log
end_comment
begin_function_decl
name|void
name|HandlePragma
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
name|int
name|numTokens
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// #pragma directive container.
end_comment
begin_function_decl
name|void
name|ResetTString
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// #error Message as TString.
end_comment
begin_function_decl
name|void
name|CPPErrorToInfoLog
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// Stick all cpp errors into Sh.Info.log.
end_comment
begin_function_decl
name|void
name|StoreStr
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// Store the TString in Parse Context.
end_comment
begin_function_decl
name|void
name|SetLineNumber
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// Set line number.
end_comment
begin_function_decl
name|void
name|SetStringNumber
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// Set string number.
end_comment
begin_function_decl
name|int
name|GetLineNumber
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// Get the current String Number.
end_comment
begin_function_decl
name|int
name|GetStringNumber
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// Get the current String Number.
end_comment
begin_function_decl
specifier|const
name|char
modifier|*
name|GetStrfromTStr
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// Convert TString to String.
end_comment
begin_function_decl
name|void
name|updateExtensionBehavior
parameter_list|(
specifier|const
name|char
modifier|*
name|extName
parameter_list|,
specifier|const
name|char
modifier|*
name|behavior
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|FreeCPP
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !(defined(__CPP_H)
end_comment
end_unit
