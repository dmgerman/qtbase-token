begin_unit
begin_comment
comment|/****************************************************************************\ Copyright (c) 2002, NVIDIA Corporation.  NVIDIA Corporation("NVIDIA") supplies this software to you in consideration of your agreement to the following terms, and your use, installation, modification or redistribution of this NVIDIA software constitutes acceptance of these terms.  If you do not agree with these terms, please do not use, install, modify or redistribute this NVIDIA software.  In consideration of your agreement to abide by the following terms, and subject to these terms, NVIDIA grants you a personal, non-exclusive license, under NVIDIA's copyrights in this original NVIDIA software (the "NVIDIA Software"), to use, reproduce, modify and redistribute the NVIDIA Software, with or without modifications, in source and/or binary forms; provided that if you redistribute the NVIDIA Software, you must retain the copyright notice of NVIDIA, this notice and the following text and disclaimers in all such redistributions of the NVIDIA Software. Neither the name, trademarks, service marks nor logos of NVIDIA Corporation may be used to endorse or promote products derived from the NVIDIA Software without specific prior written permission from NVIDIA. Except as expressly stated in this notice, no other rights or licenses express or implied, are granted by NVIDIA herein, including but not limited to any patent rights that may be infringed by your derivative works or by other works in which the NVIDIA Software may be incorporated. No hardware is licensed hereunder.   THE NVIDIA SOFTWARE IS BEING PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR ITS USE AND OPERATION EITHER ALONE OR IN COMBINATION WITH OTHER PRODUCTS.  IN NO EVENT SHALL NVIDIA BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL, EXEMPLARY, CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, LOST PROFITS; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) OR ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, MODIFICATION AND/OR DISTRIBUTION OF THE NVIDIA SOFTWARE, HOWEVER CAUSED AND WHETHER UNDER THEORY OF CONTRACT, TORT (INCLUDING NEGLIGENCE), STRICT LIABILITY OR OTHERWISE, EVEN IF NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. \****************************************************************************/
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// tokens.h
end_comment
begin_comment
comment|//
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__TOKENS_H
argument_list|)
end_if
begin_define
DECL|macro|__TOKENS_H
define|#
directive|define
name|__TOKENS_H
value|1
end_define
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|"compiler/preprocessor/parser.h"
end_include
begin_define
DECL|macro|EOF_SY
define|#
directive|define
name|EOF_SY
value|(-1)
end_define
begin_typedef
DECL|typedef|TokenBlock
typedef|typedef
name|struct
name|TokenBlock_Rec
name|TokenBlock
typedef|;
end_typedef
begin_typedef
DECL|struct|TokenStream_Rec
typedef|typedef
struct|struct
name|TokenStream_Rec
block|{
DECL|member|next
name|struct
name|TokenStream_Rec
modifier|*
name|next
decl_stmt|;
DECL|member|name
name|char
modifier|*
name|name
decl_stmt|;
DECL|member|head
name|TokenBlock
modifier|*
name|head
decl_stmt|;
DECL|member|current
name|TokenBlock
modifier|*
name|current
decl_stmt|;
block|}
DECL|typedef|TokenStream
name|TokenStream
typedef|;
end_typedef
begin_struct
DECL|struct|TokenBlock_Rec
struct|struct
name|TokenBlock_Rec
block|{
DECL|member|next
name|TokenBlock
modifier|*
name|next
decl_stmt|;
DECL|member|current
name|int
name|current
decl_stmt|;
DECL|member|count
name|int
name|count
decl_stmt|;
DECL|member|max
name|int
name|max
decl_stmt|;
DECL|member|data
name|unsigned
name|char
modifier|*
name|data
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
specifier|extern
name|TokenStream
name|stdlib_cpp_stream
decl_stmt|;
end_decl_stmt
begin_function_decl
name|TokenStream
modifier|*
name|NewTokenStream
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|MemoryPool
modifier|*
name|pool
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|DeleteTokenStream
parameter_list|(
name|TokenStream
modifier|*
name|pTok
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|RecordToken
parameter_list|(
name|TokenStream
modifier|*
name|pTok
parameter_list|,
name|int
name|token
parameter_list|,
name|yystypepp
modifier|*
name|yylvalpp
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|RewindTokenStream
parameter_list|(
name|TokenStream
modifier|*
name|pTok
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|ReadToken
parameter_list|(
name|TokenStream
modifier|*
name|pTok
parameter_list|,
name|yystypepp
modifier|*
name|yylvalpp
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|ReadFromTokenStream
parameter_list|(
name|TokenStream
modifier|*
name|pTok
parameter_list|,
name|int
name|name
parameter_list|,
name|int
function_decl|(
modifier|*
name|final
function_decl|)
parameter_list|(
name|CPPStruct
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|UngetToken
parameter_list|(
name|int
parameter_list|,
name|yystypepp
modifier|*
name|yylvalpp
parameter_list|)
function_decl|;
end_function_decl
begin_if
if|#
directive|if
name|defined
argument_list|(
name|CPPC_ENABLE_TOOLS
argument_list|)
end_if
begin_function_decl
name|void
name|DumpTokenStream
parameter_list|(
name|FILE
modifier|*
parameter_list|,
name|TokenStream
modifier|*
parameter_list|,
name|yystypepp
modifier|*
name|yylvalpp
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// defined(CPPC_ENABLE_TOOLS)
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !defined(__TOKENS_H)
end_comment
end_unit
