begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2011 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMPILER_PREPROCESSOR_TOKEN_H_
end_ifndef
begin_define
DECL|macro|COMPILER_PREPROCESSOR_TOKEN_H_
define|#
directive|define
name|COMPILER_PREPROCESSOR_TOKEN_H_
end_define
begin_include
include|#
directive|include
file|<ostream>
end_include
begin_include
include|#
directive|include
file|<string>
end_include
begin_include
include|#
directive|include
file|"SourceLocation.h"
end_include
begin_decl_stmt
name|namespace
name|pp
block|{
struct|struct
name|Token
block|{
enum|enum
name|Type
block|{
name|LAST
init|=
literal|0
block|,
comment|// EOF.
name|IDENTIFIER
init|=
literal|258
block|,
name|CONST_INT
block|,
name|CONST_FLOAT
block|,
name|OP_INC
block|,
name|OP_DEC
block|,
name|OP_LEFT
block|,
name|OP_RIGHT
block|,
name|OP_LE
block|,
name|OP_GE
block|,
name|OP_EQ
block|,
name|OP_NE
block|,
name|OP_AND
block|,
name|OP_XOR
block|,
name|OP_OR
block|,
name|OP_ADD_ASSIGN
block|,
name|OP_SUB_ASSIGN
block|,
name|OP_MUL_ASSIGN
block|,
name|OP_DIV_ASSIGN
block|,
name|OP_MOD_ASSIGN
block|,
name|OP_LEFT_ASSIGN
block|,
name|OP_RIGHT_ASSIGN
block|,
name|OP_AND_ASSIGN
block|,
name|OP_XOR_ASSIGN
block|,
name|OP_OR_ASSIGN
block|,
comment|// Preprocessing token types.
comment|// These types are used by the preprocessor internally.
comment|// Preprocessor clients must not depend or check for them.
name|PP_HASH
block|,
name|PP_NUMBER
block|,
name|PP_OTHER
block|}
enum|;
enum|enum
name|Flags
block|{
name|AT_START_OF_LINE
init|=
literal|1
operator|<<
literal|0
block|,
name|HAS_LEADING_SPACE
init|=
literal|1
operator|<<
literal|1
block|,
name|EXPANSION_DISABLED
init|=
literal|1
operator|<<
literal|2
block|}
enum|;
name|Token
argument_list|()
operator|:
name|type
argument_list|(
literal|0
argument_list|)
operator|,
name|flags
argument_list|(
literal|0
argument_list|)
block|{     }
name|void
name|reset
argument_list|()
expr_stmt|;
name|bool
name|equals
argument_list|(
specifier|const
name|Token
operator|&
name|other
argument_list|)
decl|const
decl_stmt|;
comment|// Returns true if this is the first token on line.
comment|// It disregards any leading whitespace.
name|bool
name|atStartOfLine
argument_list|()
specifier|const
block|{
return|return
operator|(
name|flags
operator|&
name|AT_START_OF_LINE
operator|)
operator|!=
literal|0
return|;
block|}
name|void
name|setAtStartOfLine
parameter_list|(
name|bool
name|start
parameter_list|)
function_decl|;
name|bool
name|hasLeadingSpace
argument_list|()
specifier|const
block|{
return|return
operator|(
name|flags
operator|&
name|HAS_LEADING_SPACE
operator|)
operator|!=
literal|0
return|;
block|}
name|void
name|setHasLeadingSpace
parameter_list|(
name|bool
name|space
parameter_list|)
function_decl|;
name|bool
name|expansionDisabled
argument_list|()
specifier|const
block|{
return|return
operator|(
name|flags
operator|&
name|EXPANSION_DISABLED
operator|)
operator|!=
literal|0
return|;
block|}
name|void
name|setExpansionDisabled
parameter_list|(
name|bool
name|disable
parameter_list|)
function_decl|;
comment|// Converts text into numeric value for CONST_INT and CONST_FLOAT token.
comment|// Returns false if the parsed value cannot fit into an int or float.
name|bool
name|iValue
argument_list|(
name|int
operator|*
name|value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|uValue
argument_list|(
name|unsigned
name|int
operator|*
name|value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|fValue
argument_list|(
name|float
operator|*
name|value
argument_list|)
decl|const
decl_stmt|;
name|int
name|type
decl_stmt|;
name|unsigned
name|int
name|flags
decl_stmt|;
name|SourceLocation
name|location
decl_stmt|;
name|std
operator|::
name|string
name|text
expr_stmt|;
block|}
struct|;
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Token
operator|&
name|lhs
operator|,
specifier|const
name|Token
operator|&
name|rhs
operator|)
block|{
return|return
name|lhs
operator|.
name|equals
argument_list|(
name|rhs
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|Token
operator|&
name|lhs
operator|,
specifier|const
name|Token
operator|&
name|rhs
operator|)
block|{
return|return
operator|!
name|lhs
operator|.
name|equals
argument_list|(
name|rhs
argument_list|)
return|;
block|}
extern|extern std::ostream&operator<<(std::ostream&out
operator|,
extern|const Token&token
block|)
decl_stmt|;
end_decl_stmt
begin_comment
unit|}
comment|// namepsace pp
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// COMPILER_PREPROCESSOR_TOKEN_H_
end_comment
end_unit
