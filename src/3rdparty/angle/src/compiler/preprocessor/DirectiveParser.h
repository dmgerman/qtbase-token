begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMPILER_PREPROCESSOR_DIRECTIVEPARSER_H_
end_ifndef
begin_define
DECL|macro|COMPILER_PREPROCESSOR_DIRECTIVEPARSER_H_
define|#
directive|define
name|COMPILER_PREPROCESSOR_DIRECTIVEPARSER_H_
end_define
begin_include
include|#
directive|include
file|"Lexer.h"
end_include
begin_include
include|#
directive|include
file|"Macro.h"
end_include
begin_include
include|#
directive|include
file|"pp_utils.h"
end_include
begin_include
include|#
directive|include
file|"SourceLocation.h"
end_include
begin_decl_stmt
name|namespace
name|pp
block|{
name|class
name|Diagnostics
decl_stmt|;
name|class
name|DirectiveHandler
decl_stmt|;
name|class
name|Tokenizer
decl_stmt|;
name|class
name|DirectiveParser
range|:
name|public
name|Lexer
block|{
name|public
operator|:
name|DirectiveParser
argument_list|(
name|Tokenizer
operator|*
name|tokenizer
argument_list|,
name|MacroSet
operator|*
name|macroSet
argument_list|,
name|Diagnostics
operator|*
name|diagnostics
argument_list|,
name|DirectiveHandler
operator|*
name|directiveHandler
argument_list|)
block|;
name|virtual
name|void
name|lex
argument_list|(
name|Token
operator|*
name|token
argument_list|)
block|;
name|private
operator|:
name|PP_DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|DirectiveParser
argument_list|)
block|;
name|void
name|parseDirective
argument_list|(
name|Token
operator|*
name|token
argument_list|)
block|;
name|void
name|parseDefine
argument_list|(
name|Token
operator|*
name|token
argument_list|)
block|;
name|void
name|parseUndef
argument_list|(
name|Token
operator|*
name|token
argument_list|)
block|;
name|void
name|parseIf
argument_list|(
name|Token
operator|*
name|token
argument_list|)
block|;
name|void
name|parseIfdef
argument_list|(
name|Token
operator|*
name|token
argument_list|)
block|;
name|void
name|parseIfndef
argument_list|(
name|Token
operator|*
name|token
argument_list|)
block|;
name|void
name|parseElse
argument_list|(
name|Token
operator|*
name|token
argument_list|)
block|;
name|void
name|parseElif
argument_list|(
name|Token
operator|*
name|token
argument_list|)
block|;
name|void
name|parseEndif
argument_list|(
name|Token
operator|*
name|token
argument_list|)
block|;
name|void
name|parseError
argument_list|(
name|Token
operator|*
name|token
argument_list|)
block|;
name|void
name|parsePragma
argument_list|(
name|Token
operator|*
name|token
argument_list|)
block|;
name|void
name|parseExtension
argument_list|(
name|Token
operator|*
name|token
argument_list|)
block|;
name|void
name|parseVersion
argument_list|(
name|Token
operator|*
name|token
argument_list|)
block|;
name|void
name|parseLine
argument_list|(
name|Token
operator|*
name|token
argument_list|)
block|;
name|bool
name|skipping
argument_list|()
specifier|const
block|;
name|void
name|parseConditionalIf
argument_list|(
name|Token
operator|*
name|token
argument_list|)
block|;
name|int
name|parseExpressionIf
argument_list|(
name|Token
operator|*
name|token
argument_list|)
block|;
name|int
name|parseExpressionIfdef
argument_list|(
name|Token
operator|*
name|token
argument_list|)
block|;      struct
name|ConditionalBlock
block|{
name|std
operator|::
name|string
name|type
block|;
name|SourceLocation
name|location
block|;
name|bool
name|skipBlock
block|;
name|bool
name|skipGroup
block|;
name|bool
name|foundValidGroup
block|;
name|bool
name|foundElseGroup
block|;
name|ConditionalBlock
argument_list|()
operator|:
name|skipBlock
argument_list|(
name|false
argument_list|)
block|,
name|skipGroup
argument_list|(
name|false
argument_list|)
block|,
name|foundValidGroup
argument_list|(
name|false
argument_list|)
block|,
name|foundElseGroup
argument_list|(
argument|false
argument_list|)
block|{         }
block|}
block|;
name|bool
name|mPastFirstStatement
block|;
name|std
operator|::
name|vector
operator|<
name|ConditionalBlock
operator|>
name|mConditionalStack
block|;
name|Tokenizer
operator|*
name|mTokenizer
block|;
name|MacroSet
operator|*
name|mMacroSet
block|;
name|Diagnostics
operator|*
name|mDiagnostics
block|;
name|DirectiveHandler
operator|*
name|mDirectiveHandler
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_comment
comment|// namespace pp
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// COMPILER_PREPROCESSOR_DIRECTIVEPARSER_H_
end_comment
end_unit
