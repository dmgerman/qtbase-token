begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2011 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMPILER_PREPROCESSOR_INPUT_H_
end_ifndef
begin_define
DECL|macro|COMPILER_PREPROCESSOR_INPUT_H_
define|#
directive|define
name|COMPILER_PREPROCESSOR_INPUT_H_
end_define
begin_include
include|#
directive|include
file|<stddef.h>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_decl_stmt
name|namespace
name|pp
block|{
comment|// Holds and reads input for Lexer.
name|class
name|Input
block|{
name|public
label|:
name|Input
argument_list|()
expr_stmt|;
name|Input
argument_list|(
argument|size_t count
argument_list|,
argument|const char* const string[]
argument_list|,
argument|const int length[]
argument_list|)
empty_stmt|;
name|size_t
name|count
argument_list|()
specifier|const
block|{
return|return
name|mCount
return|;
block|}
specifier|const
name|char
modifier|*
name|string
argument_list|(
name|size_t
name|index
argument_list|)
decl|const
block|{
return|return
name|mString
index|[
name|index
index|]
return|;
block|}
name|size_t
name|length
argument_list|(
name|size_t
name|index
argument_list|)
decl|const
block|{
return|return
name|mLength
index|[
name|index
index|]
return|;
block|}
name|size_t
name|read
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|maxSize
parameter_list|)
function_decl|;
struct|struct
name|Location
block|{
name|size_t
name|sIndex
decl_stmt|;
comment|// String index;
name|size_t
name|cIndex
decl_stmt|;
comment|// Char index.
name|Location
argument_list|()
operator|:
name|sIndex
argument_list|(
literal|0
argument_list|)
operator|,
name|cIndex
argument_list|(
literal|0
argument_list|)
block|{ }
block|}
struct|;
specifier|const
name|Location
operator|&
name|readLoc
argument_list|()
specifier|const
block|{
return|return
name|mReadLoc
return|;
block|}
name|private
label|:
comment|// Input.
name|size_t
name|mCount
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|mString
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|size_t
operator|>
name|mLength
expr_stmt|;
name|Location
name|mReadLoc
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_comment
comment|// namespace pp
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// COMPILER_PREPROCESSOR_INPUT_H_
end_comment
end_unit
