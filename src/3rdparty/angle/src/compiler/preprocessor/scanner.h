begin_unit
begin_comment
comment|/****************************************************************************\ Copyright (c) 2002, NVIDIA Corporation.  NVIDIA Corporation("NVIDIA") supplies this software to you in consideration of your agreement to the following terms, and your use, installation, modification or redistribution of this NVIDIA software constitutes acceptance of these terms.  If you do not agree with these terms, please do not use, install, modify or redistribute this NVIDIA software.  In consideration of your agreement to abide by the following terms, and subject to these terms, NVIDIA grants you a personal, non-exclusive license, under NVIDIA's copyrights in this original NVIDIA software (the "NVIDIA Software"), to use, reproduce, modify and redistribute the NVIDIA Software, with or without modifications, in source and/or binary forms; provided that if you redistribute the NVIDIA Software, you must retain the copyright notice of NVIDIA, this notice and the following text and disclaimers in all such redistributions of the NVIDIA Software. Neither the name, trademarks, service marks nor logos of NVIDIA Corporation may be used to endorse or promote products derived from the NVIDIA Software without specific prior written permission from NVIDIA. Except as expressly stated in this notice, no other rights or licenses express or implied, are granted by NVIDIA herein, including but not limited to any patent rights that may be infringed by your derivative works or by other works in which the NVIDIA Software may be incorporated. No hardware is licensed hereunder.   THE NVIDIA SOFTWARE IS BEING PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR ITS USE AND OPERATION EITHER ALONE OR IN COMBINATION WITH OTHER PRODUCTS.  IN NO EVENT SHALL NVIDIA BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL, EXEMPLARY, CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, LOST PROFITS; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) OR ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, MODIFICATION AND/OR DISTRIBUTION OF THE NVIDIA SOFTWARE, HOWEVER CAUSED AND WHETHER UNDER THEORY OF CONTRACT, TORT (INCLUDING NEGLIGENCE), STRICT LIABILITY OR OTHERWISE, EVEN IF NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. \****************************************************************************/
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// scanner.h
end_comment
begin_comment
comment|//
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__SCANNER_H
argument_list|)
end_if
begin_define
DECL|macro|__SCANNER_H
define|#
directive|define
name|__SCANNER_H
value|1
end_define
begin_include
include|#
directive|include
file|"compiler/preprocessor/length_limits.h"
end_include
begin_include
include|#
directive|include
file|"compiler/preprocessor/parser.h"
end_include
begin_comment
comment|// Not really atom table stuff but needed first...
end_comment
begin_typedef
DECL|struct|SourceLoc_Rec
typedef|typedef
struct|struct
name|SourceLoc_Rec
block|{
DECL|member|file
DECL|member|line
name|unsigned
name|short
name|file
decl_stmt|,
name|line
decl_stmt|;
block|}
DECL|typedef|SourceLoc
name|SourceLoc
typedef|;
end_typedef
begin_function_decl
name|int
name|yylex_CPP
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|maxSize
parameter_list|)
function_decl|;
end_function_decl
begin_typedef
DECL|struct|InputSrc
typedef|typedef
struct|struct
name|InputSrc
block|{
DECL|member|prev
name|struct
name|InputSrc
modifier|*
name|prev
decl_stmt|;
DECL|member|scan
name|int
function_decl|(
modifier|*
name|scan
function_decl|)
parameter_list|(
name|struct
name|InputSrc
modifier|*
parameter_list|,
name|yystypepp
modifier|*
parameter_list|)
function_decl|;
DECL|member|getch
name|int
function_decl|(
modifier|*
name|getch
function_decl|)
parameter_list|(
name|struct
name|InputSrc
modifier|*
parameter_list|,
name|yystypepp
modifier|*
parameter_list|)
function_decl|;
DECL|member|ungetch
name|void
function_decl|(
modifier|*
name|ungetch
function_decl|)
parameter_list|(
name|struct
name|InputSrc
modifier|*
parameter_list|,
name|int
parameter_list|,
name|yystypepp
modifier|*
parameter_list|)
function_decl|;
DECL|member|name
name|int
name|name
decl_stmt|;
comment|/* atom */
DECL|member|line
name|int
name|line
decl_stmt|;
block|}
DECL|typedef|InputSrc
name|InputSrc
typedef|;
end_typedef
begin_function_decl
name|int
name|InitScanner
parameter_list|(
name|CPPStruct
modifier|*
name|cpp
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// Intialise the cpp scanner.
end_comment
begin_function_decl
name|int
name|InitScannerInput
parameter_list|(
name|CPPStruct
modifier|*
name|cpp
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
name|string
index|[]
parameter_list|,
specifier|const
name|int
name|length
index|[]
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|check_EOF
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// check if we hit a EOF abruptly
end_comment
begin_function_decl
name|void
name|CPPErrorToInfoLog
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// sticking the msg,line into the Shader's.Info.log
end_comment
begin_function_decl
name|void
name|SetLineNumber
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|SetStringNumber
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|IncLineNumber
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|DecLineNumber
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|FreeScanner
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// Free the cpp scanner
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !(defined(__SCANNER_H)
end_comment
end_unit
