begin_unit
begin_comment
comment|/****************************************************************************\ Copyright (c) 2002, NVIDIA Corporation.  NVIDIA Corporation("NVIDIA") supplies this software to you in consideration of your agreement to the following terms, and your use, installation, modification or redistribution of this NVIDIA software constitutes acceptance of these terms.  If you do not agree with these terms, please do not use, install, modify or redistribute this NVIDIA software.  In consideration of your agreement to abide by the following terms, and subject to these terms, NVIDIA grants you a personal, non-exclusive license, under NVIDIA's copyrights in this original NVIDIA software (the "NVIDIA Software"), to use, reproduce, modify and redistribute the NVIDIA Software, with or without modifications, in source and/or binary forms; provided that if you redistribute the NVIDIA Software, you must retain the copyright notice of NVIDIA, this notice and the following text and disclaimers in all such redistributions of the NVIDIA Software. Neither the name, trademarks, service marks nor logos of NVIDIA Corporation may be used to endorse or promote products derived from the NVIDIA Software without specific prior written permission from NVIDIA. Except as expressly stated in this notice, no other rights or licenses express or implied, are granted by NVIDIA herein, including but not limited to any patent rights that may be infringed by your derivative works or by other works in which the NVIDIA Software may be incorporated. No hardware is licensed hereunder.   THE NVIDIA SOFTWARE IS BEING PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR ITS USE AND OPERATION EITHER ALONE OR IN COMBINATION WITH OTHER PRODUCTS.  IN NO EVENT SHALL NVIDIA BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL, EXEMPLARY, CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, LOST PROFITS; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) OR ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, MODIFICATION AND/OR DISTRIBUTION OF THE NVIDIA SOFTWARE, HOWEVER CAUSED AND WHETHER UNDER THEORY OF CONTRACT, TORT (INCLUDING NEGLIGENCE), STRICT LIABILITY OR OTHERWISE, EVEN IF NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. \****************************************************************************/
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// symbols.h
end_comment
begin_comment
comment|//
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__SYMBOLS_H
argument_list|)
end_if
begin_define
DECL|macro|__SYMBOLS_H
define|#
directive|define
name|__SYMBOLS_H
value|1
end_define
begin_include
include|#
directive|include
file|"compiler/preprocessor/memory.h"
end_include
begin_typedef
DECL|enum|symbolkind
typedef|typedef
enum|enum
name|symbolkind
block|{
DECL|enumerator|MACRO_S
name|MACRO_S
block|}
DECL|typedef|symbolkind
name|symbolkind
typedef|;
end_typedef
begin_comment
comment|// Typedefs for things defined here in "symbols.h":
end_comment
begin_typedef
DECL|typedef|Scope
typedef|typedef
name|struct
name|Scope_Rec
name|Scope
typedef|;
end_typedef
begin_typedef
DECL|typedef|Symbol
typedef|typedef
name|struct
name|Symbol_Rec
name|Symbol
typedef|;
end_typedef
begin_typedef
DECL|struct|SymbolList_Rec
typedef|typedef
struct|struct
name|SymbolList_Rec
block|{
DECL|member|next
name|struct
name|SymbolList_Rec
modifier|*
name|next
decl_stmt|;
DECL|member|symb
name|Symbol
modifier|*
name|symb
decl_stmt|;
block|}
DECL|typedef|SymbolList
name|SymbolList
typedef|;
end_typedef
begin_struct
DECL|struct|Scope_Rec
struct|struct
name|Scope_Rec
block|{
DECL|member|next
DECL|member|prev
name|Scope
modifier|*
name|next
decl_stmt|,
modifier|*
name|prev
decl_stmt|;
comment|// doubly-linked list of all scopes
DECL|member|parent
name|Scope
modifier|*
name|parent
decl_stmt|;
DECL|member|funScope
name|Scope
modifier|*
name|funScope
decl_stmt|;
comment|// Points to base scope of enclosing function
DECL|member|pool
name|MemoryPool
modifier|*
name|pool
decl_stmt|;
comment|// pool used for allocation in this scope
DECL|member|symbols
name|Symbol
modifier|*
name|symbols
decl_stmt|;
DECL|member|level
name|int
name|level
decl_stmt|;
comment|// 0 = super globals, 1 = globals, etc.
comment|// Only used at global scope (level 1):
DECL|member|programs
name|SymbolList
modifier|*
name|programs
decl_stmt|;
comment|// List of programs for this compilation.
block|}
struct|;
end_struct
begin_comment
comment|// Symbol table is a simple binary tree.
end_comment
begin_include
include|#
directive|include
file|"compiler/preprocessor/cpp.h"
end_include
begin_comment
comment|// to get MacroSymbol def
end_comment
begin_struct
DECL|struct|Symbol_Rec
struct|struct
name|Symbol_Rec
block|{
DECL|member|left
DECL|member|right
name|Symbol
modifier|*
name|left
decl_stmt|,
modifier|*
name|right
decl_stmt|;
DECL|member|next
name|Symbol
modifier|*
name|next
decl_stmt|;
DECL|member|name
name|int
name|name
decl_stmt|;
comment|// Name atom
DECL|member|loc
name|SourceLoc
name|loc
decl_stmt|;
DECL|member|kind
name|symbolkind
name|kind
decl_stmt|;
union|union
block|{
DECL|member|mac
name|MacroSymbol
name|mac
decl_stmt|;
block|}
DECL|member|details
name|details
union|;
block|}
struct|;
end_struct
begin_decl_stmt
specifier|extern
name|Scope
modifier|*
name|CurrentScope
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|Scope
modifier|*
name|GlobalScope
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|Scope
modifier|*
name|ScopeList
decl_stmt|;
end_decl_stmt
begin_function_decl
name|Scope
modifier|*
name|NewScopeInPool
parameter_list|(
name|MemoryPool
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|NewScope
define|#
directive|define
name|NewScope
parameter_list|()
value|NewScopeInPool(CurrentScope->pool)
end_define
begin_function_decl
name|void
name|PushScope
parameter_list|(
name|Scope
modifier|*
name|fScope
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Scope
modifier|*
name|PopScope
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Symbol
modifier|*
name|NewSymbol
parameter_list|(
name|SourceLoc
modifier|*
name|loc
parameter_list|,
name|Scope
modifier|*
name|fScope
parameter_list|,
name|int
name|name
parameter_list|,
name|symbolkind
name|kind
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Symbol
modifier|*
name|AddSymbol
parameter_list|(
name|SourceLoc
modifier|*
name|loc
parameter_list|,
name|Scope
modifier|*
name|fScope
parameter_list|,
name|int
name|atom
parameter_list|,
name|symbolkind
name|kind
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Symbol
modifier|*
name|LookUpLocalSymbol
parameter_list|(
name|Scope
modifier|*
name|fScope
parameter_list|,
name|int
name|atom
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Symbol
modifier|*
name|LookUpSymbol
parameter_list|(
name|Scope
modifier|*
name|fScope
parameter_list|,
name|int
name|atom
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !defined(__SYMBOLS_H)
end_comment
end_unit
