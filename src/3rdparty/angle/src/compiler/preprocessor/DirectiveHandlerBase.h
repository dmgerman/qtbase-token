begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMPILER_PREPROCESSOR_DIRECTIVE_HANDLER_H_
end_ifndef
begin_define
DECL|macro|COMPILER_PREPROCESSOR_DIRECTIVE_HANDLER_H_
define|#
directive|define
name|COMPILER_PREPROCESSOR_DIRECTIVE_HANDLER_H_
end_define
begin_include
include|#
directive|include
file|<string>
end_include
begin_decl_stmt
name|namespace
name|pp
block|{
struct_decl|struct
name|SourceLocation
struct_decl|;
comment|// Base class for handling directives.
comment|// Preprocessor uses this class to notify the clients about certain
comment|// preprocessor directives. Derived classes are responsible for
comment|// handling them in an appropriate manner.
name|class
name|DirectiveHandler
block|{
name|public
label|:
name|virtual
operator|~
name|DirectiveHandler
argument_list|()
expr_stmt|;
name|virtual
name|void
name|handleError
argument_list|(
specifier|const
name|SourceLocation
operator|&
name|loc
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|msg
argument_list|)
init|=
literal|0
decl_stmt|;
comment|// Handle pragma of form: #pragma name[(value)]
name|virtual
name|void
name|handlePragma
argument_list|(
specifier|const
name|SourceLocation
operator|&
name|loc
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|name
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|value
argument_list|,
name|bool
name|stdgl
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|void
name|handleExtension
argument_list|(
specifier|const
name|SourceLocation
operator|&
name|loc
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|name
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|behavior
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|void
name|handleVersion
parameter_list|(
specifier|const
name|SourceLocation
modifier|&
name|loc
parameter_list|,
name|int
name|version
parameter_list|)
init|=
literal|0
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_comment
comment|// namespace pp
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// COMPILER_PREPROCESSOR_DIRECTIVE_HANDLER_H_
end_comment
end_unit
