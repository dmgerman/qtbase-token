begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMPILER_PREPROCESSOR_DIAGNOSTICS_H_
end_ifndef
begin_define
DECL|macro|COMPILER_PREPROCESSOR_DIAGNOSTICS_H_
define|#
directive|define
name|COMPILER_PREPROCESSOR_DIAGNOSTICS_H_
end_define
begin_include
include|#
directive|include
file|<string>
end_include
begin_decl_stmt
name|namespace
name|pp
block|{
struct_decl|struct
name|SourceLocation
struct_decl|;
comment|// Base class for reporting diagnostic messages.
comment|// Derived classes are responsible for formatting and printing the messages.
name|class
name|Diagnostics
block|{
name|public
label|:
enum|enum
name|Severity
block|{
name|ERROR
block|,
name|WARNING
block|}
enum|;
enum|enum
name|ID
block|{
name|ERROR_BEGIN
block|,
name|INTERNAL_ERROR
block|,
name|OUT_OF_MEMORY
block|,
name|INVALID_CHARACTER
block|,
name|INVALID_NUMBER
block|,
name|INTEGER_OVERFLOW
block|,
name|FLOAT_OVERFLOW
block|,
name|TOKEN_TOO_LONG
block|,
name|INVALID_EXPRESSION
block|,
name|DIVISION_BY_ZERO
block|,
name|EOF_IN_COMMENT
block|,
name|UNEXPECTED_TOKEN
block|,
name|DIRECTIVE_INVALID_NAME
block|,
name|MACRO_NAME_RESERVED
block|,
name|MACRO_REDEFINED
block|,
name|MACRO_PREDEFINED_REDEFINED
block|,
name|MACRO_PREDEFINED_UNDEFINED
block|,
name|MACRO_UNTERMINATED_INVOCATION
block|,
name|MACRO_TOO_FEW_ARGS
block|,
name|MACRO_TOO_MANY_ARGS
block|,
name|CONDITIONAL_ENDIF_WITHOUT_IF
block|,
name|CONDITIONAL_ELSE_WITHOUT_IF
block|,
name|CONDITIONAL_ELSE_AFTER_ELSE
block|,
name|CONDITIONAL_ELIF_WITHOUT_IF
block|,
name|CONDITIONAL_ELIF_AFTER_ELSE
block|,
name|CONDITIONAL_UNTERMINATED
block|,
name|INVALID_EXTENSION_NAME
block|,
name|INVALID_EXTENSION_BEHAVIOR
block|,
name|INVALID_EXTENSION_DIRECTIVE
block|,
name|INVALID_VERSION_NUMBER
block|,
name|INVALID_VERSION_DIRECTIVE
block|,
name|VERSION_NOT_FIRST_STATEMENT
block|,
name|INVALID_LINE_NUMBER
block|,
name|INVALID_FILE_NUMBER
block|,
name|INVALID_LINE_DIRECTIVE
block|,
name|ERROR_END
block|,
name|WARNING_BEGIN
block|,
name|EOF_IN_DIRECTIVE
block|,
name|CONDITIONAL_UNEXPECTED_TOKEN
block|,
name|UNRECOGNIZED_PRAGMA
block|,
name|WARNING_END
block|}
enum|;
name|virtual
operator|~
name|Diagnostics
argument_list|()
expr_stmt|;
name|void
name|report
argument_list|(
name|ID
name|id
argument_list|,
specifier|const
name|SourceLocation
operator|&
name|loc
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|text
argument_list|)
decl_stmt|;
name|protected
label|:
name|Severity
name|severity
parameter_list|(
name|ID
name|id
parameter_list|)
function_decl|;
name|std
operator|::
name|string
name|message
argument_list|(
argument|ID id
argument_list|)
expr_stmt|;
name|virtual
name|void
name|print
argument_list|(
name|ID
name|id
argument_list|,
specifier|const
name|SourceLocation
operator|&
name|loc
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|text
argument_list|)
init|=
literal|0
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_comment
comment|// namespace pp
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// COMPILER_PREPROCESSOR_DIAGNOSTICS_H_
end_comment
end_unit
