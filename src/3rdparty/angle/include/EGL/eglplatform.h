begin_unit
begin_ifndef
ifndef|#
directive|ifndef
name|__eglplatform_h_
end_ifndef
begin_define
DECL|macro|__eglplatform_h_
define|#
directive|define
name|__eglplatform_h_
end_define
begin_comment
comment|/* ** Copyright (c) 2007-2009 The Khronos Group Inc. ** ** Permission is hereby granted, free of charge, to any person obtaining a ** copy of this software and/or associated documentation files (the ** "Materials"), to deal in the Materials without restriction, including ** without limitation the rights to use, copy, modify, merge, publish, ** distribute, sublicense, and/or sell copies of the Materials, and to ** permit persons to whom the Materials are furnished to do so, subject to ** the following conditions: ** ** The above copyright notice and this permission notice shall be included ** in all copies or substantial portions of the Materials. ** ** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, ** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF ** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. ** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY ** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, ** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE ** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS. */
end_comment
begin_comment
comment|/* Platform-specific types and definitions for egl.h  * $Revision: 12306 $ on $Date: 2010-08-25 09:51:28 -0700 (Wed, 25 Aug 2010) $  *  * Adopters may modify khrplatform.h and this file to suit their platform.  * You are encouraged to submit all modifications to the Khronos group so that  * they can be included in future versions of this file.  Please submit changes  * by sending them to the public Khronos Bugzilla (http://khronos.org/bugzilla)  * by filing a bug against product "EGL" component "Registry".  */
end_comment
begin_include
include|#
directive|include
file|<KHR/khrplatform.h>
end_include
begin_comment
comment|/* Macros used in EGL function prototype declarations.  *  * EGL functions should be prototyped as:  *  * EGLAPI return-type EGLAPIENTRY eglFunction(arguments);  * typedef return-type (EXPAPIENTRYP PFNEGLFUNCTIONPROC) (arguments);  *  * KHRONOS_APICALL and KHRONOS_APIENTRY are defined in KHR/khrplatform.h  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|EGLAPI
end_ifndef
begin_define
DECL|macro|EGLAPI
define|#
directive|define
name|EGLAPI
value|KHRONOS_APICALL
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|EGLAPIENTRY
end_ifndef
begin_define
DECL|macro|EGLAPIENTRY
define|#
directive|define
name|EGLAPIENTRY
value|KHRONOS_APIENTRY
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|EGLAPIENTRYP
define|#
directive|define
name|EGLAPIENTRYP
value|EGLAPIENTRY*
end_define
begin_comment
comment|/* The types NativeDisplayType, NativeWindowType, and NativePixmapType  * are aliases of window-system-dependent types, such as X Display * or  * Windows Device Context. They must be defined in platform-specific  * code below. The EGL-prefixed versions of Native*Type are the same  * types, renamed in EGL 1.3 so all types in the API start with "EGL".  *  * Khronos STRONGLY RECOMMENDS that you use the default definitions  * provided below, since these changes affect both binary and source  * portability of applications using EGL running on different EGL  * implementations.  */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|WINAPI_FAMILY
argument_list|)
operator|&&
operator|(
name|WINAPI_FAMILY
operator|==
name|WINAPI_FAMILY_APP
operator|||
name|WINAPI_FAMILY
operator|==
name|WINAPI_FAMILY_PHONE_APP
operator|)
end_if
begin_comment
comment|/* Windows Runtime */
end_comment
begin_struct_decl
struct_decl|struct
name|IUnknown
struct_decl|;
end_struct_decl
begin_typedef
DECL|typedef|EGLNativeDisplayType
typedef|typedef
name|int
name|EGLNativeDisplayType
typedef|;
end_typedef
begin_typedef
DECL|typedef|EGLNativePixmapType
typedef|typedef
name|void
modifier|*
name|EGLNativePixmapType
typedef|;
end_typedef
begin_typedef
DECL|typedef|EGLNativeWindowType
typedef|typedef
name|IUnknown
modifier|*
name|EGLNativeWindowType
typedef|;
end_typedef
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|__VC32__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__CYGWIN__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__SCITECH_SNAP__
argument_list|)
end_elif
begin_comment
comment|/* Win32 and WinCE */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|WIN32_LEAN_AND_MEAN
end_ifndef
begin_define
DECL|macro|WIN32_LEAN_AND_MEAN
define|#
directive|define
name|WIN32_LEAN_AND_MEAN
value|1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_typedef
DECL|typedef|EGLNativeDisplayType
typedef|typedef
name|HDC
name|EGLNativeDisplayType
typedef|;
end_typedef
begin_typedef
DECL|typedef|EGLNativePixmapType
typedef|typedef
name|HBITMAP
name|EGLNativePixmapType
typedef|;
end_typedef
begin_typedef
DECL|typedef|EGLNativeWindowType
typedef|typedef
name|HWND
name|EGLNativeWindowType
typedef|;
end_typedef
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__WINSCW__
argument_list|)
operator|||
name|defined
argument_list|(
name|__SYMBIAN32__
argument_list|)
end_elif
begin_comment
comment|/* Symbian */
end_comment
begin_typedef
DECL|typedef|EGLNativeDisplayType
typedef|typedef
name|int
name|EGLNativeDisplayType
typedef|;
end_typedef
begin_typedef
DECL|typedef|EGLNativeWindowType
typedef|typedef
name|void
modifier|*
name|EGLNativeWindowType
typedef|;
end_typedef
begin_typedef
DECL|typedef|EGLNativePixmapType
typedef|typedef
name|void
modifier|*
name|EGLNativePixmapType
typedef|;
end_typedef
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|WL_EGL_PLATFORM
argument_list|)
end_elif
begin_typedef
DECL|typedef|EGLNativeDisplayType
typedef|typedef
name|struct
name|wl_display
modifier|*
name|EGLNativeDisplayType
typedef|;
end_typedef
begin_typedef
DECL|typedef|EGLNativePixmapType
typedef|typedef
name|struct
name|wl_egl_pixmap
modifier|*
name|EGLNativePixmapType
typedef|;
end_typedef
begin_typedef
DECL|typedef|EGLNativeWindowType
typedef|typedef
name|struct
name|wl_egl_window
modifier|*
name|EGLNativeWindowType
typedef|;
end_typedef
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__unix__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|ANDROID
argument_list|)
end_elif
begin_comment
comment|/* X11 (tentative)  */
end_comment
begin_include
include|#
directive|include
file|<X11/Xlib.h>
end_include
begin_include
include|#
directive|include
file|<X11/Xutil.h>
end_include
begin_typedef
DECL|typedef|EGLNativeDisplayType
typedef|typedef
name|Display
modifier|*
name|EGLNativeDisplayType
typedef|;
end_typedef
begin_typedef
DECL|typedef|EGLNativePixmapType
typedef|typedef
name|Pixmap
name|EGLNativePixmapType
typedef|;
end_typedef
begin_typedef
DECL|typedef|EGLNativeWindowType
typedef|typedef
name|Window
name|EGLNativeWindowType
typedef|;
end_typedef
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|ANDROID
argument_list|)
end_elif
begin_struct_decl
struct_decl|struct
name|egl_native_pixmap_t
struct_decl|;
end_struct_decl
begin_typedef
DECL|typedef|EGLNativeWindowType
typedef|typedef
name|struct
name|ANativeWindow
modifier|*
name|EGLNativeWindowType
typedef|;
end_typedef
begin_typedef
DECL|typedef|EGLNativePixmapType
typedef|typedef
name|struct
name|egl_native_pixmap_t
modifier|*
name|EGLNativePixmapType
typedef|;
end_typedef
begin_typedef
DECL|typedef|EGLNativeDisplayType
typedef|typedef
name|void
modifier|*
name|EGLNativeDisplayType
typedef|;
end_typedef
begin_else
else|#
directive|else
end_else
begin_error
error|#
directive|error
literal|"Platform not recognized"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* EGL 1.2 types, renamed for consistency in EGL 1.3 */
end_comment
begin_typedef
DECL|typedef|NativeDisplayType
typedef|typedef
name|EGLNativeDisplayType
name|NativeDisplayType
typedef|;
end_typedef
begin_typedef
DECL|typedef|NativePixmapType
typedef|typedef
name|EGLNativePixmapType
name|NativePixmapType
typedef|;
end_typedef
begin_typedef
DECL|typedef|NativeWindowType
typedef|typedef
name|EGLNativeWindowType
name|NativeWindowType
typedef|;
end_typedef
begin_comment
comment|/* Define EGLint. This must be a signed integral type large enough to contain  * all legal attribute names and values passed into and out of EGL, whether  * their type is boolean, bitmask, enumerant (symbolic constant), integer,  * handle, or other.  While in general a 32-bit integer will suffice, if  * handles are 64 bit types, then EGLint should be defined as a signed 64-bit  * integer type.  */
end_comment
begin_typedef
DECL|typedef|EGLint
typedef|typedef
name|khronos_int32_t
name|EGLint
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* __eglplatform_h */
end_comment
end_unit
