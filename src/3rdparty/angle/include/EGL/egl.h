begin_unit
begin_comment
comment|/* -*- mode: c; tab-width: 8; -*- */
end_comment
begin_comment
comment|/* vi: set sw=4 ts=8: */
end_comment
begin_comment
comment|/* Reference version of egl.h for EGL 1.4.  * $Revision: 9356 $ on $Date: 2009-10-21 02:52:25 -0700 (Wed, 21 Oct 2009) $  */
end_comment
begin_comment
comment|/* ** Copyright (c) 2007-2009 The Khronos Group Inc. ** ** Permission is hereby granted, free of charge, to any person obtaining a ** copy of this software and/or associated documentation files (the ** "Materials"), to deal in the Materials without restriction, including ** without limitation the rights to use, copy, modify, merge, publish, ** distribute, sublicense, and/or sell copies of the Materials, and to ** permit persons to whom the Materials are furnished to do so, subject to ** the following conditions: ** ** The above copyright notice and this permission notice shall be included ** in all copies or substantial portions of the Materials. ** ** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, ** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF ** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. ** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY ** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, ** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE ** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS. */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|__egl_h_
end_ifndef
begin_define
DECL|macro|__egl_h_
define|#
directive|define
name|__egl_h_
end_define
begin_comment
comment|/* All platform-dependent types and macro boilerplate (such as EGLAPI  * and EGLAPIENTRY) should go in eglplatform.h.  */
end_comment
begin_include
include|#
directive|include
file|<EGL/eglplatform.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef
begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* EGL Types */
comment|/* EGLint is defined in eglplatform.h */
DECL|typedef|EGLBoolean
typedef|typedef
name|unsigned
name|int
name|EGLBoolean
typedef|;
DECL|typedef|EGLenum
typedef|typedef
name|unsigned
name|int
name|EGLenum
typedef|;
DECL|typedef|EGLConfig
typedef|typedef
name|void
modifier|*
name|EGLConfig
typedef|;
DECL|typedef|EGLContext
typedef|typedef
name|void
modifier|*
name|EGLContext
typedef|;
DECL|typedef|EGLDisplay
typedef|typedef
name|void
modifier|*
name|EGLDisplay
typedef|;
DECL|typedef|EGLSurface
typedef|typedef
name|void
modifier|*
name|EGLSurface
typedef|;
DECL|typedef|EGLClientBuffer
typedef|typedef
name|void
modifier|*
name|EGLClientBuffer
typedef|;
comment|/* EGL Versioning */
DECL|macro|EGL_VERSION_1_0
define|#
directive|define
name|EGL_VERSION_1_0
value|1
DECL|macro|EGL_VERSION_1_1
define|#
directive|define
name|EGL_VERSION_1_1
value|1
DECL|macro|EGL_VERSION_1_2
define|#
directive|define
name|EGL_VERSION_1_2
value|1
DECL|macro|EGL_VERSION_1_3
define|#
directive|define
name|EGL_VERSION_1_3
value|1
DECL|macro|EGL_VERSION_1_4
define|#
directive|define
name|EGL_VERSION_1_4
value|1
comment|/* EGL Enumerants. Bitmasks and other exceptional cases aside, most  * enums are assigned unique values starting at 0x3000.  */
comment|/* EGL aliases */
DECL|macro|EGL_FALSE
define|#
directive|define
name|EGL_FALSE
value|0
DECL|macro|EGL_TRUE
define|#
directive|define
name|EGL_TRUE
value|1
comment|/* Out-of-band handle values */
DECL|macro|EGL_DEFAULT_DISPLAY
define|#
directive|define
name|EGL_DEFAULT_DISPLAY
value|((EGLNativeDisplayType)0)
DECL|macro|EGL_NO_CONTEXT
define|#
directive|define
name|EGL_NO_CONTEXT
value|((EGLContext)0)
DECL|macro|EGL_NO_DISPLAY
define|#
directive|define
name|EGL_NO_DISPLAY
value|((EGLDisplay)0)
DECL|macro|EGL_NO_SURFACE
define|#
directive|define
name|EGL_NO_SURFACE
value|((EGLSurface)0)
comment|/* Out-of-band attribute value */
DECL|macro|EGL_DONT_CARE
define|#
directive|define
name|EGL_DONT_CARE
value|((EGLint)-1)
comment|/* Errors / GetError return values */
DECL|macro|EGL_SUCCESS
define|#
directive|define
name|EGL_SUCCESS
value|0x3000
DECL|macro|EGL_NOT_INITIALIZED
define|#
directive|define
name|EGL_NOT_INITIALIZED
value|0x3001
DECL|macro|EGL_BAD_ACCESS
define|#
directive|define
name|EGL_BAD_ACCESS
value|0x3002
DECL|macro|EGL_BAD_ALLOC
define|#
directive|define
name|EGL_BAD_ALLOC
value|0x3003
DECL|macro|EGL_BAD_ATTRIBUTE
define|#
directive|define
name|EGL_BAD_ATTRIBUTE
value|0x3004
DECL|macro|EGL_BAD_CONFIG
define|#
directive|define
name|EGL_BAD_CONFIG
value|0x3005
DECL|macro|EGL_BAD_CONTEXT
define|#
directive|define
name|EGL_BAD_CONTEXT
value|0x3006
DECL|macro|EGL_BAD_CURRENT_SURFACE
define|#
directive|define
name|EGL_BAD_CURRENT_SURFACE
value|0x3007
DECL|macro|EGL_BAD_DISPLAY
define|#
directive|define
name|EGL_BAD_DISPLAY
value|0x3008
DECL|macro|EGL_BAD_MATCH
define|#
directive|define
name|EGL_BAD_MATCH
value|0x3009
DECL|macro|EGL_BAD_NATIVE_PIXMAP
define|#
directive|define
name|EGL_BAD_NATIVE_PIXMAP
value|0x300A
DECL|macro|EGL_BAD_NATIVE_WINDOW
define|#
directive|define
name|EGL_BAD_NATIVE_WINDOW
value|0x300B
DECL|macro|EGL_BAD_PARAMETER
define|#
directive|define
name|EGL_BAD_PARAMETER
value|0x300C
DECL|macro|EGL_BAD_SURFACE
define|#
directive|define
name|EGL_BAD_SURFACE
value|0x300D
DECL|macro|EGL_CONTEXT_LOST
define|#
directive|define
name|EGL_CONTEXT_LOST
value|0x300E
comment|/* EGL 1.1 - IMG_power_management */
comment|/* Reserved 0x300F-0x301F for additional errors */
comment|/* Config attributes */
DECL|macro|EGL_BUFFER_SIZE
define|#
directive|define
name|EGL_BUFFER_SIZE
value|0x3020
DECL|macro|EGL_ALPHA_SIZE
define|#
directive|define
name|EGL_ALPHA_SIZE
value|0x3021
DECL|macro|EGL_BLUE_SIZE
define|#
directive|define
name|EGL_BLUE_SIZE
value|0x3022
DECL|macro|EGL_GREEN_SIZE
define|#
directive|define
name|EGL_GREEN_SIZE
value|0x3023
DECL|macro|EGL_RED_SIZE
define|#
directive|define
name|EGL_RED_SIZE
value|0x3024
DECL|macro|EGL_DEPTH_SIZE
define|#
directive|define
name|EGL_DEPTH_SIZE
value|0x3025
DECL|macro|EGL_STENCIL_SIZE
define|#
directive|define
name|EGL_STENCIL_SIZE
value|0x3026
DECL|macro|EGL_CONFIG_CAVEAT
define|#
directive|define
name|EGL_CONFIG_CAVEAT
value|0x3027
DECL|macro|EGL_CONFIG_ID
define|#
directive|define
name|EGL_CONFIG_ID
value|0x3028
DECL|macro|EGL_LEVEL
define|#
directive|define
name|EGL_LEVEL
value|0x3029
DECL|macro|EGL_MAX_PBUFFER_HEIGHT
define|#
directive|define
name|EGL_MAX_PBUFFER_HEIGHT
value|0x302A
DECL|macro|EGL_MAX_PBUFFER_PIXELS
define|#
directive|define
name|EGL_MAX_PBUFFER_PIXELS
value|0x302B
DECL|macro|EGL_MAX_PBUFFER_WIDTH
define|#
directive|define
name|EGL_MAX_PBUFFER_WIDTH
value|0x302C
DECL|macro|EGL_NATIVE_RENDERABLE
define|#
directive|define
name|EGL_NATIVE_RENDERABLE
value|0x302D
DECL|macro|EGL_NATIVE_VISUAL_ID
define|#
directive|define
name|EGL_NATIVE_VISUAL_ID
value|0x302E
DECL|macro|EGL_NATIVE_VISUAL_TYPE
define|#
directive|define
name|EGL_NATIVE_VISUAL_TYPE
value|0x302F
DECL|macro|EGL_SAMPLES
define|#
directive|define
name|EGL_SAMPLES
value|0x3031
DECL|macro|EGL_SAMPLE_BUFFERS
define|#
directive|define
name|EGL_SAMPLE_BUFFERS
value|0x3032
DECL|macro|EGL_SURFACE_TYPE
define|#
directive|define
name|EGL_SURFACE_TYPE
value|0x3033
DECL|macro|EGL_TRANSPARENT_TYPE
define|#
directive|define
name|EGL_TRANSPARENT_TYPE
value|0x3034
DECL|macro|EGL_TRANSPARENT_BLUE_VALUE
define|#
directive|define
name|EGL_TRANSPARENT_BLUE_VALUE
value|0x3035
DECL|macro|EGL_TRANSPARENT_GREEN_VALUE
define|#
directive|define
name|EGL_TRANSPARENT_GREEN_VALUE
value|0x3036
DECL|macro|EGL_TRANSPARENT_RED_VALUE
define|#
directive|define
name|EGL_TRANSPARENT_RED_VALUE
value|0x3037
DECL|macro|EGL_NONE
define|#
directive|define
name|EGL_NONE
value|0x3038
comment|/* Attrib list terminator */
DECL|macro|EGL_BIND_TO_TEXTURE_RGB
define|#
directive|define
name|EGL_BIND_TO_TEXTURE_RGB
value|0x3039
DECL|macro|EGL_BIND_TO_TEXTURE_RGBA
define|#
directive|define
name|EGL_BIND_TO_TEXTURE_RGBA
value|0x303A
DECL|macro|EGL_MIN_SWAP_INTERVAL
define|#
directive|define
name|EGL_MIN_SWAP_INTERVAL
value|0x303B
DECL|macro|EGL_MAX_SWAP_INTERVAL
define|#
directive|define
name|EGL_MAX_SWAP_INTERVAL
value|0x303C
DECL|macro|EGL_LUMINANCE_SIZE
define|#
directive|define
name|EGL_LUMINANCE_SIZE
value|0x303D
DECL|macro|EGL_ALPHA_MASK_SIZE
define|#
directive|define
name|EGL_ALPHA_MASK_SIZE
value|0x303E
DECL|macro|EGL_COLOR_BUFFER_TYPE
define|#
directive|define
name|EGL_COLOR_BUFFER_TYPE
value|0x303F
DECL|macro|EGL_RENDERABLE_TYPE
define|#
directive|define
name|EGL_RENDERABLE_TYPE
value|0x3040
DECL|macro|EGL_MATCH_NATIVE_PIXMAP
define|#
directive|define
name|EGL_MATCH_NATIVE_PIXMAP
value|0x3041
comment|/* Pseudo-attribute (not queryable) */
DECL|macro|EGL_CONFORMANT
define|#
directive|define
name|EGL_CONFORMANT
value|0x3042
comment|/* Reserved 0x3041-0x304F for additional config attributes */
comment|/* Config attribute values */
DECL|macro|EGL_SLOW_CONFIG
define|#
directive|define
name|EGL_SLOW_CONFIG
value|0x3050
comment|/* EGL_CONFIG_CAVEAT value */
DECL|macro|EGL_NON_CONFORMANT_CONFIG
define|#
directive|define
name|EGL_NON_CONFORMANT_CONFIG
value|0x3051
comment|/* EGL_CONFIG_CAVEAT value */
DECL|macro|EGL_TRANSPARENT_RGB
define|#
directive|define
name|EGL_TRANSPARENT_RGB
value|0x3052
comment|/* EGL_TRANSPARENT_TYPE value */
DECL|macro|EGL_RGB_BUFFER
define|#
directive|define
name|EGL_RGB_BUFFER
value|0x308E
comment|/* EGL_COLOR_BUFFER_TYPE value */
DECL|macro|EGL_LUMINANCE_BUFFER
define|#
directive|define
name|EGL_LUMINANCE_BUFFER
value|0x308F
comment|/* EGL_COLOR_BUFFER_TYPE value */
comment|/* More config attribute values, for EGL_TEXTURE_FORMAT */
DECL|macro|EGL_NO_TEXTURE
define|#
directive|define
name|EGL_NO_TEXTURE
value|0x305C
DECL|macro|EGL_TEXTURE_RGB
define|#
directive|define
name|EGL_TEXTURE_RGB
value|0x305D
DECL|macro|EGL_TEXTURE_RGBA
define|#
directive|define
name|EGL_TEXTURE_RGBA
value|0x305E
DECL|macro|EGL_TEXTURE_2D
define|#
directive|define
name|EGL_TEXTURE_2D
value|0x305F
comment|/* Config attribute mask bits */
DECL|macro|EGL_PBUFFER_BIT
define|#
directive|define
name|EGL_PBUFFER_BIT
value|0x0001
comment|/* EGL_SURFACE_TYPE mask bits */
DECL|macro|EGL_PIXMAP_BIT
define|#
directive|define
name|EGL_PIXMAP_BIT
value|0x0002
comment|/* EGL_SURFACE_TYPE mask bits */
DECL|macro|EGL_WINDOW_BIT
define|#
directive|define
name|EGL_WINDOW_BIT
value|0x0004
comment|/* EGL_SURFACE_TYPE mask bits */
DECL|macro|EGL_VG_COLORSPACE_LINEAR_BIT
define|#
directive|define
name|EGL_VG_COLORSPACE_LINEAR_BIT
value|0x0020
comment|/* EGL_SURFACE_TYPE mask bits */
DECL|macro|EGL_VG_ALPHA_FORMAT_PRE_BIT
define|#
directive|define
name|EGL_VG_ALPHA_FORMAT_PRE_BIT
value|0x0040
comment|/* EGL_SURFACE_TYPE mask bits */
DECL|macro|EGL_MULTISAMPLE_RESOLVE_BOX_BIT
define|#
directive|define
name|EGL_MULTISAMPLE_RESOLVE_BOX_BIT
value|0x0200
comment|/* EGL_SURFACE_TYPE mask bits */
DECL|macro|EGL_SWAP_BEHAVIOR_PRESERVED_BIT
define|#
directive|define
name|EGL_SWAP_BEHAVIOR_PRESERVED_BIT
value|0x0400
comment|/* EGL_SURFACE_TYPE mask bits */
DECL|macro|EGL_OPENGL_ES_BIT
define|#
directive|define
name|EGL_OPENGL_ES_BIT
value|0x0001
comment|/* EGL_RENDERABLE_TYPE mask bits */
DECL|macro|EGL_OPENVG_BIT
define|#
directive|define
name|EGL_OPENVG_BIT
value|0x0002
comment|/* EGL_RENDERABLE_TYPE mask bits */
DECL|macro|EGL_OPENGL_ES2_BIT
define|#
directive|define
name|EGL_OPENGL_ES2_BIT
value|0x0004
comment|/* EGL_RENDERABLE_TYPE mask bits */
DECL|macro|EGL_OPENGL_BIT
define|#
directive|define
name|EGL_OPENGL_BIT
value|0x0008
comment|/* EGL_RENDERABLE_TYPE mask bits */
comment|/* QueryString targets */
DECL|macro|EGL_VENDOR
define|#
directive|define
name|EGL_VENDOR
value|0x3053
DECL|macro|EGL_VERSION
define|#
directive|define
name|EGL_VERSION
value|0x3054
DECL|macro|EGL_EXTENSIONS
define|#
directive|define
name|EGL_EXTENSIONS
value|0x3055
DECL|macro|EGL_CLIENT_APIS
define|#
directive|define
name|EGL_CLIENT_APIS
value|0x308D
comment|/* QuerySurface / SurfaceAttrib / CreatePbufferSurface targets */
DECL|macro|EGL_HEIGHT
define|#
directive|define
name|EGL_HEIGHT
value|0x3056
DECL|macro|EGL_WIDTH
define|#
directive|define
name|EGL_WIDTH
value|0x3057
DECL|macro|EGL_LARGEST_PBUFFER
define|#
directive|define
name|EGL_LARGEST_PBUFFER
value|0x3058
DECL|macro|EGL_TEXTURE_FORMAT
define|#
directive|define
name|EGL_TEXTURE_FORMAT
value|0x3080
DECL|macro|EGL_TEXTURE_TARGET
define|#
directive|define
name|EGL_TEXTURE_TARGET
value|0x3081
DECL|macro|EGL_MIPMAP_TEXTURE
define|#
directive|define
name|EGL_MIPMAP_TEXTURE
value|0x3082
DECL|macro|EGL_MIPMAP_LEVEL
define|#
directive|define
name|EGL_MIPMAP_LEVEL
value|0x3083
DECL|macro|EGL_RENDER_BUFFER
define|#
directive|define
name|EGL_RENDER_BUFFER
value|0x3086
DECL|macro|EGL_VG_COLORSPACE
define|#
directive|define
name|EGL_VG_COLORSPACE
value|0x3087
DECL|macro|EGL_VG_ALPHA_FORMAT
define|#
directive|define
name|EGL_VG_ALPHA_FORMAT
value|0x3088
DECL|macro|EGL_HORIZONTAL_RESOLUTION
define|#
directive|define
name|EGL_HORIZONTAL_RESOLUTION
value|0x3090
DECL|macro|EGL_VERTICAL_RESOLUTION
define|#
directive|define
name|EGL_VERTICAL_RESOLUTION
value|0x3091
DECL|macro|EGL_PIXEL_ASPECT_RATIO
define|#
directive|define
name|EGL_PIXEL_ASPECT_RATIO
value|0x3092
DECL|macro|EGL_SWAP_BEHAVIOR
define|#
directive|define
name|EGL_SWAP_BEHAVIOR
value|0x3093
DECL|macro|EGL_MULTISAMPLE_RESOLVE
define|#
directive|define
name|EGL_MULTISAMPLE_RESOLVE
value|0x3099
comment|/* EGL_RENDER_BUFFER values / BindTexImage / ReleaseTexImage buffer targets */
DECL|macro|EGL_BACK_BUFFER
define|#
directive|define
name|EGL_BACK_BUFFER
value|0x3084
DECL|macro|EGL_SINGLE_BUFFER
define|#
directive|define
name|EGL_SINGLE_BUFFER
value|0x3085
comment|/* OpenVG color spaces */
DECL|macro|EGL_VG_COLORSPACE_sRGB
define|#
directive|define
name|EGL_VG_COLORSPACE_sRGB
value|0x3089
comment|/* EGL_VG_COLORSPACE value */
DECL|macro|EGL_VG_COLORSPACE_LINEAR
define|#
directive|define
name|EGL_VG_COLORSPACE_LINEAR
value|0x308A
comment|/* EGL_VG_COLORSPACE value */
comment|/* OpenVG alpha formats */
DECL|macro|EGL_VG_ALPHA_FORMAT_NONPRE
define|#
directive|define
name|EGL_VG_ALPHA_FORMAT_NONPRE
value|0x308B
comment|/* EGL_ALPHA_FORMAT value */
DECL|macro|EGL_VG_ALPHA_FORMAT_PRE
define|#
directive|define
name|EGL_VG_ALPHA_FORMAT_PRE
value|0x308C
comment|/* EGL_ALPHA_FORMAT value */
comment|/* Constant scale factor by which fractional display resolutions&  * aspect ratio are scaled when queried as integer values.  */
DECL|macro|EGL_DISPLAY_SCALING
define|#
directive|define
name|EGL_DISPLAY_SCALING
value|10000
comment|/* Unknown display resolution/aspect ratio */
DECL|macro|EGL_UNKNOWN
define|#
directive|define
name|EGL_UNKNOWN
value|((EGLint)-1)
comment|/* Back buffer swap behaviors */
DECL|macro|EGL_BUFFER_PRESERVED
define|#
directive|define
name|EGL_BUFFER_PRESERVED
value|0x3094
comment|/* EGL_SWAP_BEHAVIOR value */
DECL|macro|EGL_BUFFER_DESTROYED
define|#
directive|define
name|EGL_BUFFER_DESTROYED
value|0x3095
comment|/* EGL_SWAP_BEHAVIOR value */
comment|/* CreatePbufferFromClientBuffer buffer types */
DECL|macro|EGL_OPENVG_IMAGE
define|#
directive|define
name|EGL_OPENVG_IMAGE
value|0x3096
comment|/* QueryContext targets */
DECL|macro|EGL_CONTEXT_CLIENT_TYPE
define|#
directive|define
name|EGL_CONTEXT_CLIENT_TYPE
value|0x3097
comment|/* CreateContext attributes */
DECL|macro|EGL_CONTEXT_CLIENT_VERSION
define|#
directive|define
name|EGL_CONTEXT_CLIENT_VERSION
value|0x3098
comment|/* Multisample resolution behaviors */
DECL|macro|EGL_MULTISAMPLE_RESOLVE_DEFAULT
define|#
directive|define
name|EGL_MULTISAMPLE_RESOLVE_DEFAULT
value|0x309A
comment|/* EGL_MULTISAMPLE_RESOLVE value */
DECL|macro|EGL_MULTISAMPLE_RESOLVE_BOX
define|#
directive|define
name|EGL_MULTISAMPLE_RESOLVE_BOX
value|0x309B
comment|/* EGL_MULTISAMPLE_RESOLVE value */
comment|/* BindAPI/QueryAPI targets */
DECL|macro|EGL_OPENGL_ES_API
define|#
directive|define
name|EGL_OPENGL_ES_API
value|0x30A0
DECL|macro|EGL_OPENVG_API
define|#
directive|define
name|EGL_OPENVG_API
value|0x30A1
DECL|macro|EGL_OPENGL_API
define|#
directive|define
name|EGL_OPENGL_API
value|0x30A2
comment|/* GetCurrentSurface targets */
DECL|macro|EGL_DRAW
define|#
directive|define
name|EGL_DRAW
value|0x3059
DECL|macro|EGL_READ
define|#
directive|define
name|EGL_READ
value|0x305A
comment|/* WaitNative engines */
DECL|macro|EGL_CORE_NATIVE_ENGINE
define|#
directive|define
name|EGL_CORE_NATIVE_ENGINE
value|0x305B
comment|/* EGL 1.2 tokens renamed for consistency in EGL 1.3 */
DECL|macro|EGL_COLORSPACE
define|#
directive|define
name|EGL_COLORSPACE
value|EGL_VG_COLORSPACE
DECL|macro|EGL_ALPHA_FORMAT
define|#
directive|define
name|EGL_ALPHA_FORMAT
value|EGL_VG_ALPHA_FORMAT
DECL|macro|EGL_COLORSPACE_sRGB
define|#
directive|define
name|EGL_COLORSPACE_sRGB
value|EGL_VG_COLORSPACE_sRGB
DECL|macro|EGL_COLORSPACE_LINEAR
define|#
directive|define
name|EGL_COLORSPACE_LINEAR
value|EGL_VG_COLORSPACE_LINEAR
DECL|macro|EGL_ALPHA_FORMAT_NONPRE
define|#
directive|define
name|EGL_ALPHA_FORMAT_NONPRE
value|EGL_VG_ALPHA_FORMAT_NONPRE
DECL|macro|EGL_ALPHA_FORMAT_PRE
define|#
directive|define
name|EGL_ALPHA_FORMAT_PRE
value|EGL_VG_ALPHA_FORMAT_PRE
comment|/* EGL extensions must request enum blocks from the Khronos  * API Registrar, who maintains the enumerant registry. Submit  * a bug in Khronos Bugzilla against task "Registry".  */
comment|/* EGL Functions */
name|EGLAPI
name|EGLint
name|EGLAPIENTRY
name|eglGetError
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLDisplay
name|EGLAPIENTRY
name|eglGetDisplay
parameter_list|(
name|EGLNativeDisplayType
name|display_id
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLBoolean
name|EGLAPIENTRY
name|eglInitialize
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLint
modifier|*
name|major
parameter_list|,
name|EGLint
modifier|*
name|minor
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLBoolean
name|EGLAPIENTRY
name|eglTerminate
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|)
function_decl|;
name|EGLAPI
specifier|const
name|char
modifier|*
name|EGLAPIENTRY
name|eglQueryString
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLint
name|name
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLBoolean
name|EGLAPIENTRY
name|eglGetConfigs
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
modifier|*
name|configs
parameter_list|,
name|EGLint
name|config_size
parameter_list|,
name|EGLint
modifier|*
name|num_config
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLBoolean
name|EGLAPIENTRY
name|eglChooseConfig
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|,
name|EGLConfig
modifier|*
name|configs
parameter_list|,
name|EGLint
name|config_size
parameter_list|,
name|EGLint
modifier|*
name|num_config
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLBoolean
name|EGLAPIENTRY
name|eglGetConfigAttrib
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLint
modifier|*
name|value
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLSurface
name|EGLAPIENTRY
name|eglCreateWindowSurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|EGLNativeWindowType
name|win
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLSurface
name|EGLAPIENTRY
name|eglCreatePbufferSurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLSurface
name|EGLAPIENTRY
name|eglCreatePixmapSurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|EGLNativePixmapType
name|pixmap
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLBoolean
name|EGLAPIENTRY
name|eglDestroySurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLBoolean
name|EGLAPIENTRY
name|eglQuerySurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLint
modifier|*
name|value
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLBoolean
name|EGLAPIENTRY
name|eglBindAPI
parameter_list|(
name|EGLenum
name|api
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLenum
name|EGLAPIENTRY
name|eglQueryAPI
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLBoolean
name|EGLAPIENTRY
name|eglWaitClient
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLBoolean
name|EGLAPIENTRY
name|eglReleaseThread
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLSurface
name|EGLAPIENTRY
name|eglCreatePbufferFromClientBuffer
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLenum
name|buftype
parameter_list|,
name|EGLClientBuffer
name|buffer
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLBoolean
name|EGLAPIENTRY
name|eglSurfaceAttrib
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLint
name|value
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLBoolean
name|EGLAPIENTRY
name|eglBindTexImage
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLint
name|buffer
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLBoolean
name|EGLAPIENTRY
name|eglReleaseTexImage
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLint
name|buffer
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLBoolean
name|EGLAPIENTRY
name|eglSwapInterval
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLint
name|interval
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLContext
name|EGLAPIENTRY
name|eglCreateContext
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|EGLContext
name|share_context
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLBoolean
name|EGLAPIENTRY
name|eglDestroyContext
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLContext
name|ctx
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLBoolean
name|EGLAPIENTRY
name|eglMakeCurrent
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|draw
parameter_list|,
name|EGLSurface
name|read
parameter_list|,
name|EGLContext
name|ctx
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLContext
name|EGLAPIENTRY
name|eglGetCurrentContext
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLSurface
name|EGLAPIENTRY
name|eglGetCurrentSurface
parameter_list|(
name|EGLint
name|readdraw
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLDisplay
name|EGLAPIENTRY
name|eglGetCurrentDisplay
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLBoolean
name|EGLAPIENTRY
name|eglQueryContext
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLContext
name|ctx
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLint
modifier|*
name|value
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLBoolean
name|EGLAPIENTRY
name|eglWaitGL
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLBoolean
name|EGLAPIENTRY
name|eglWaitNative
parameter_list|(
name|EGLint
name|engine
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLBoolean
name|EGLAPIENTRY
name|eglSwapBuffers
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|)
function_decl|;
name|EGLAPI
name|EGLBoolean
name|EGLAPIENTRY
name|eglCopyBuffers
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLNativePixmapType
name|target
parameter_list|)
function_decl|;
comment|/* This is a generic function pointer type, whose name indicates it must  * be cast to the proper type *and calling convention* before use.  */
DECL|typedef|__eglMustCastToProperFunctionPointerType
typedef|typedef
name|void
function_decl|(
modifier|*
name|__eglMustCastToProperFunctionPointerType
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Now, define eglGetProcAddress using the generic function ptr. type */
name|EGLAPI
name|__eglMustCastToProperFunctionPointerType
name|EGLAPIENTRY
name|eglGetProcAddress
parameter_list|(
specifier|const
name|char
modifier|*
name|procname
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* __egl_h_ */
end_comment
end_unit
