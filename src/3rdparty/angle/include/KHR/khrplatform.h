begin_unit
begin_ifndef
ifndef|#
directive|ifndef
name|__khrplatform_h_
end_ifndef
begin_define
DECL|macro|__khrplatform_h_
define|#
directive|define
name|__khrplatform_h_
end_define
begin_comment
comment|/* ** Copyright (c) 2008-2009 The Khronos Group Inc. ** ** Permission is hereby granted, free of charge, to any person obtaining a ** copy of this software and/or associated documentation files (the ** "Materials"), to deal in the Materials without restriction, including ** without limitation the rights to use, copy, modify, merge, publish, ** distribute, sublicense, and/or sell copies of the Materials, and to ** permit persons to whom the Materials are furnished to do so, subject to ** the following conditions: ** ** The above copyright notice and this permission notice shall be included ** in all copies or substantial portions of the Materials. ** ** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, ** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF ** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. ** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY ** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, ** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE ** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS. */
end_comment
begin_comment
comment|/* Khronos platform-specific types and definitions.  *  * $Revision: 9356 $ on $Date: 2009-10-21 02:52:25 -0700 (Wed, 21 Oct 2009) $  *  * Adopters may modify this file to suit their platform. Adopters are  * encouraged to submit platform specific modifications to the Khronos  * group so that they can be included in future versions of this file.  * Please submit changes by sending them to the public Khronos Bugzilla  * (http://khronos.org/bugzilla) by filing a bug against product  * "Khronos (general)" component "Registry".  *  * A predefined template which fills in some of the bug fields can be  * reached using http://tinyurl.com/khrplatform-h-bugreport, but you  * must create a Bugzilla login first.  *  *  * See the Implementer's Guidelines for information about where this file  * should be located on your system and for more details of its use:  *    http://www.khronos.org/registry/implementers_guide.pdf  *  * This file should be included as  *        #include<KHR/khrplatform.h>  * by Khronos client API header files that use its types and defines.  *  * The types in khrplatform.h should only be used to define API-specific types.  *  * Types defined in khrplatform.h:  *    khronos_int8_t              signed   8  bit  *    khronos_uint8_t             unsigned 8  bit  *    khronos_int16_t             signed   16 bit  *    khronos_uint16_t            unsigned 16 bit  *    khronos_int32_t             signed   32 bit  *    khronos_uint32_t            unsigned 32 bit  *    khronos_int64_t             signed   64 bit  *    khronos_uint64_t            unsigned 64 bit  *    khronos_intptr_t            signed   same number of bits as a pointer  *    khronos_uintptr_t           unsigned same number of bits as a pointer  *    khronos_ssize_t             signed   size  *    khronos_usize_t             unsigned size  *    khronos_float_t             signed   32 bit floating point  *    khronos_time_ns_t           unsigned 64 bit time in nanoseconds  *    khronos_utime_nanoseconds_t unsigned time interval or absolute time in  *                                         nanoseconds  *    khronos_stime_nanoseconds_t signed time interval in nanoseconds  *    khronos_boolean_enum_t      enumerated boolean type. This should  *      only be used as a base type when a client API's boolean type is  *      an enum. Client APIs which use an integer or other type for  *      booleans cannot use this as the base type for their boolean.  *  * Tokens defined in khrplatform.h:  *  *    KHRONOS_FALSE, KHRONOS_TRUE Enumerated boolean false/true values.  *  *    KHRONOS_SUPPORT_INT64 is 1 if 64 bit integers are supported; otherwise 0.  *    KHRONOS_SUPPORT_FLOAT is 1 if floats are supported; otherwise 0.  *  * Calling convention macros defined in this file:  *    KHRONOS_APICALL  *    KHRONOS_APIENTRY  *    KHRONOS_APIATTRIBUTES  *  * These may be used in function prototypes as:  *  *      KHRONOS_APICALL void KHRONOS_APIENTRY funcname(  *                                  int arg1,  *                                  int arg2) KHRONOS_APIATTRIBUTES;  */
end_comment
begin_comment
comment|/*-------------------------------------------------------------------------  * Definition of KHRONOS_APICALL  *-------------------------------------------------------------------------  * This precedes the return type of the function in the function prototype.  */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|_WIN32
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__SCITECH_SNAP__
argument_list|)
end_if
begin_define
DECL|macro|KHRONOS_APICALL
define|#
directive|define
name|KHRONOS_APICALL
value|__declspec(dllimport)
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__SYMBIAN32__
argument_list|)
end_elif
begin_define
DECL|macro|KHRONOS_APICALL
define|#
directive|define
name|KHRONOS_APICALL
value|IMPORT_C
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|KHRONOS_APICALL
define|#
directive|define
name|KHRONOS_APICALL
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*-------------------------------------------------------------------------  * Definition of KHRONOS_APIENTRY  *-------------------------------------------------------------------------  * This follows the return type of the function  and precedes the function  * name in the function prototype.  */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|_WIN32
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_WIN32_WCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__SCITECH_SNAP__
argument_list|)
end_if
begin_comment
comment|/* Win32 but not WinCE */
end_comment
begin_define
DECL|macro|KHRONOS_APIENTRY
define|#
directive|define
name|KHRONOS_APIENTRY
value|__stdcall
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|KHRONOS_APIENTRY
define|#
directive|define
name|KHRONOS_APIENTRY
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*-------------------------------------------------------------------------  * Definition of KHRONOS_APIATTRIBUTES  *-------------------------------------------------------------------------  * This follows the closing parenthesis of the function prototype arguments.  */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__ARMCC_2__
argument_list|)
end_if
begin_define
DECL|macro|KHRONOS_APIATTRIBUTES
define|#
directive|define
name|KHRONOS_APIATTRIBUTES
value|__softfp
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|KHRONOS_APIATTRIBUTES
define|#
directive|define
name|KHRONOS_APIATTRIBUTES
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*-------------------------------------------------------------------------  * basic type definitions  *-----------------------------------------------------------------------*/
end_comment
begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|__STDC_VERSION__
argument_list|)
operator|&&
name|__STDC_VERSION__
operator|>=
literal|199901L
operator|)
operator|||
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__SCO__
argument_list|)
operator|||
name|defined
argument_list|(
name|__USLC__
argument_list|)
end_if
begin_comment
comment|/*  * Using<stdint.h>  */
end_comment
begin_include
include|#
directive|include
file|<stdint.h>
end_include
begin_typedef
DECL|typedef|khronos_int32_t
typedef|typedef
name|int32_t
name|khronos_int32_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_uint32_t
typedef|typedef
name|uint32_t
name|khronos_uint32_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_int64_t
typedef|typedef
name|int64_t
name|khronos_int64_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_uint64_t
typedef|typedef
name|uint64_t
name|khronos_uint64_t
typedef|;
end_typedef
begin_define
DECL|macro|KHRONOS_SUPPORT_INT64
define|#
directive|define
name|KHRONOS_SUPPORT_INT64
value|1
end_define
begin_define
DECL|macro|KHRONOS_SUPPORT_FLOAT
define|#
directive|define
name|KHRONOS_SUPPORT_FLOAT
value|1
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__VMS
argument_list|)
operator|||
name|defined
argument_list|(
name|__sgi
argument_list|)
end_elif
begin_comment
comment|/*  * Using<inttypes.h>  */
end_comment
begin_include
include|#
directive|include
file|<inttypes.h>
end_include
begin_typedef
DECL|typedef|khronos_int32_t
typedef|typedef
name|int32_t
name|khronos_int32_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_uint32_t
typedef|typedef
name|uint32_t
name|khronos_uint32_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_int64_t
typedef|typedef
name|int64_t
name|khronos_int64_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_uint64_t
typedef|typedef
name|uint64_t
name|khronos_uint64_t
typedef|;
end_typedef
begin_define
DECL|macro|KHRONOS_SUPPORT_INT64
define|#
directive|define
name|KHRONOS_SUPPORT_INT64
value|1
end_define
begin_define
DECL|macro|KHRONOS_SUPPORT_FLOAT
define|#
directive|define
name|KHRONOS_SUPPORT_FLOAT
value|1
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|_WIN32
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__SCITECH_SNAP__
argument_list|)
end_elif
begin_comment
comment|/*  * Win32  */
end_comment
begin_typedef
DECL|typedef|khronos_int32_t
typedef|typedef
name|__int32
name|khronos_int32_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_uint32_t
typedef|typedef
name|unsigned
name|__int32
name|khronos_uint32_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_int64_t
typedef|typedef
name|__int64
name|khronos_int64_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_uint64_t
typedef|typedef
name|unsigned
name|__int64
name|khronos_uint64_t
typedef|;
end_typedef
begin_define
DECL|macro|KHRONOS_SUPPORT_INT64
define|#
directive|define
name|KHRONOS_SUPPORT_INT64
value|1
end_define
begin_define
DECL|macro|KHRONOS_SUPPORT_FLOAT
define|#
directive|define
name|KHRONOS_SUPPORT_FLOAT
value|1
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__sun__
argument_list|)
operator|||
name|defined
argument_list|(
name|__digital__
argument_list|)
end_elif
begin_comment
comment|/*  * Sun or Digital  */
end_comment
begin_typedef
DECL|typedef|khronos_int32_t
typedef|typedef
name|int
name|khronos_int32_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_uint32_t
typedef|typedef
name|unsigned
name|int
name|khronos_uint32_t
typedef|;
end_typedef
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__arch64__
argument_list|)
operator|||
name|defined
argument_list|(
name|_LP64
argument_list|)
end_if
begin_typedef
DECL|typedef|khronos_int64_t
typedef|typedef
name|long
name|int
name|khronos_int64_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_uint64_t
typedef|typedef
name|unsigned
name|long
name|int
name|khronos_uint64_t
typedef|;
end_typedef
begin_else
else|#
directive|else
end_else
begin_typedef
DECL|typedef|khronos_int64_t
typedef|typedef
name|long
name|long
name|int
name|khronos_int64_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_uint64_t
typedef|typedef
name|unsigned
name|long
name|long
name|int
name|khronos_uint64_t
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* __arch64__ */
end_comment
begin_define
DECL|macro|KHRONOS_SUPPORT_INT64
define|#
directive|define
name|KHRONOS_SUPPORT_INT64
value|1
end_define
begin_define
DECL|macro|KHRONOS_SUPPORT_FLOAT
define|#
directive|define
name|KHRONOS_SUPPORT_FLOAT
value|1
end_define
begin_elif
elif|#
directive|elif
literal|0
end_elif
begin_comment
comment|/*  * Hypothetical platform with no float or int64 support  */
end_comment
begin_typedef
DECL|typedef|khronos_int32_t
typedef|typedef
name|int
name|khronos_int32_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_uint32_t
typedef|typedef
name|unsigned
name|int
name|khronos_uint32_t
typedef|;
end_typedef
begin_define
DECL|macro|KHRONOS_SUPPORT_INT64
define|#
directive|define
name|KHRONOS_SUPPORT_INT64
value|0
end_define
begin_define
DECL|macro|KHRONOS_SUPPORT_FLOAT
define|#
directive|define
name|KHRONOS_SUPPORT_FLOAT
value|0
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|/*  * Generic fallback  */
end_comment
begin_include
include|#
directive|include
file|<stdint.h>
end_include
begin_typedef
DECL|typedef|khronos_int32_t
typedef|typedef
name|int32_t
name|khronos_int32_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_uint32_t
typedef|typedef
name|uint32_t
name|khronos_uint32_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_int64_t
typedef|typedef
name|int64_t
name|khronos_int64_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_uint64_t
typedef|typedef
name|uint64_t
name|khronos_uint64_t
typedef|;
end_typedef
begin_define
DECL|macro|KHRONOS_SUPPORT_INT64
define|#
directive|define
name|KHRONOS_SUPPORT_INT64
value|1
end_define
begin_define
DECL|macro|KHRONOS_SUPPORT_FLOAT
define|#
directive|define
name|KHRONOS_SUPPORT_FLOAT
value|1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*  * Types that are (so far) the same on all platforms  */
end_comment
begin_typedef
DECL|typedef|khronos_int8_t
typedef|typedef
name|signed
name|char
name|khronos_int8_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_uint8_t
typedef|typedef
name|unsigned
name|char
name|khronos_uint8_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_int16_t
typedef|typedef
name|signed
name|short
name|int
name|khronos_int16_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_uint16_t
typedef|typedef
name|unsigned
name|short
name|int
name|khronos_uint16_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_intptr_t
typedef|typedef
name|signed
name|long
name|int
name|khronos_intptr_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_uintptr_t
typedef|typedef
name|unsigned
name|long
name|int
name|khronos_uintptr_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_ssize_t
typedef|typedef
name|signed
name|long
name|int
name|khronos_ssize_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_usize_t
typedef|typedef
name|unsigned
name|long
name|int
name|khronos_usize_t
typedef|;
end_typedef
begin_if
if|#
directive|if
name|KHRONOS_SUPPORT_FLOAT
end_if
begin_comment
comment|/*  * Float type  */
end_comment
begin_typedef
DECL|typedef|khronos_float_t
typedef|typedef
name|float
name|khronos_float_t
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|KHRONOS_SUPPORT_INT64
end_if
begin_comment
comment|/* Time types  *  * These types can be used to represent a time interval in nanoseconds or  * an absolute Unadjusted System Time.  Unadjusted System Time is the number  * of nanoseconds since some arbitrary system event (e.g. since the last  * time the system booted).  The Unadjusted System Time is an unsigned  * 64 bit value that wraps back to 0 every 584 years.  Time intervals  * may be either signed or unsigned.  */
end_comment
begin_typedef
DECL|typedef|khronos_utime_nanoseconds_t
typedef|typedef
name|khronos_uint64_t
name|khronos_utime_nanoseconds_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|khronos_stime_nanoseconds_t
typedef|typedef
name|khronos_int64_t
name|khronos_stime_nanoseconds_t
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*  * Dummy value used to pad enum types to 32 bits.  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|KHRONOS_MAX_ENUM
end_ifndef
begin_define
DECL|macro|KHRONOS_MAX_ENUM
define|#
directive|define
name|KHRONOS_MAX_ENUM
value|0x7FFFFFFF
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*  * Enumerated boolean type  *  * Values other than zero should be considered to be true.  Therefore  * comparisons should not be made against KHRONOS_TRUE.  */
end_comment
begin_typedef
typedef|typedef
enum|enum
block|{
DECL|enumerator|KHRONOS_FALSE
name|KHRONOS_FALSE
init|=
literal|0
block|,
DECL|enumerator|KHRONOS_TRUE
name|KHRONOS_TRUE
init|=
literal|1
block|,
DECL|enumerator|KHRONOS_BOOLEAN_ENUM_FORCE_SIZE
name|KHRONOS_BOOLEAN_ENUM_FORCE_SIZE
init|=
name|KHRONOS_MAX_ENUM
block|}
DECL|typedef|khronos_boolean_enum_t
name|khronos_boolean_enum_t
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* __khrplatform_h_ */
end_comment
end_unit
