begin_unit
begin_comment
comment|/* * This file is part of libgq *  *  * Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).  * All rights reserved.  *  * Contact: Marius Vollmer<marius.vollmer@nokia.com>  *  * This library is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * version 2.1 as published by the Free Software Foundation.  *  * This library is distributed in the hope that it will be useful, but  * WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU  * Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  * 02110-1301 USA  *  */
end_comment
begin_include
include|#
directive|include
file|<QString>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QByteArray>
end_include
begin_include
include|#
directive|include
file|<QVariant>
end_include
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_include
include|#
directive|include
file|"gconfitem.h"
end_include
begin_include
include|#
directive|include
file|<glib.h>
end_include
begin_include
include|#
directive|include
file|<gconf/gconf-value.h>
end_include
begin_include
include|#
directive|include
file|<gconf/gconf-client.h>
end_include
begin_struct
DECL|struct|GConfItemPrivate
struct|struct
name|GConfItemPrivate
block|{
DECL|member|key
name|QString
name|key
decl_stmt|;
DECL|member|value
name|QVariant
name|value
decl_stmt|;
DECL|member|notify_id
name|guint
name|notify_id
decl_stmt|;
specifier|static
name|void
name|notify_trampoline
parameter_list|(
name|GConfClient
modifier|*
parameter_list|,
name|guint
parameter_list|,
name|GConfEntry
modifier|*
parameter_list|,
name|gpointer
parameter_list|)
function_decl|;
block|}
struct|;
end_struct
begin_comment
comment|/* We get the default client and never release it, on purpose, to    avoid disconnecting from the GConf daemon when a program happens to    not have any GConfItems for short periods of time.  */
end_comment
begin_function
specifier|static
name|GConfClient
modifier|*
DECL|function|get_gconf_client
name|get_gconf_client
parameter_list|()
block|{
specifier|static
name|bool
name|initialized
init|=
literal|false
decl_stmt|;
specifier|static
name|GConfClient
modifier|*
name|client
decl_stmt|;
if|if
condition|(
name|initialized
condition|)
return|return
name|client
return|;
name|g_type_init
argument_list|()
expr_stmt|;
name|client
operator|=
name|gconf_client_get_default
argument_list|()
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
return|return
name|client
return|;
block|}
end_function
begin_comment
comment|/* Sometimes I like being too clever...  */
end_comment
begin_define
DECL|macro|withClient
define|#
directive|define
name|withClient
parameter_list|(
name|c
parameter_list|)
value|for (GConfClient *c = get_gconf_client (); c; c = NULL)
end_define
begin_function
DECL|function|convertKey
specifier|static
name|QByteArray
name|convertKey
parameter_list|(
name|QString
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|'/'
argument_list|)
condition|)
return|return
name|key
operator|.
name|toUtf8
argument_list|()
return|;
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Using dot-separated key names with GConfItem is deprecated."
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"Please use"
operator|<<
literal|'/'
operator|+
name|key
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|<<
literal|"instead of"
operator|<<
name|key
expr_stmt|;
return|return
literal|'/'
operator|+
name|key
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|toUtf8
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|function|convertKey
specifier|static
name|QString
name|convertKey
parameter_list|(
specifier|const
name|char
modifier|*
name|key
parameter_list|)
block|{
return|return
name|QString
operator|::
name|fromUtf8
argument_list|(
name|key
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|convertValue
specifier|static
name|QVariant
name|convertValue
parameter_list|(
name|GConfValue
modifier|*
name|src
parameter_list|)
block|{
if|if
condition|(
operator|!
name|src
condition|)
block|{
return|return
name|QVariant
argument_list|()
return|;
block|}
else|else
block|{
switch|switch
condition|(
name|src
operator|->
name|type
condition|)
block|{
case|case
name|GCONF_VALUE_INVALID
case|:
return|return
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Invalid
argument_list|)
return|;
case|case
name|GCONF_VALUE_BOOL
case|:
return|return
name|QVariant
argument_list|(
operator|(
name|bool
operator|)
name|gconf_value_get_bool
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
case|case
name|GCONF_VALUE_INT
case|:
return|return
name|QVariant
argument_list|(
name|gconf_value_get_int
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
case|case
name|GCONF_VALUE_FLOAT
case|:
return|return
name|QVariant
argument_list|(
name|gconf_value_get_float
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
case|case
name|GCONF_VALUE_STRING
case|:
return|return
name|QVariant
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|gconf_value_get_string
argument_list|(
name|src
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|GCONF_VALUE_LIST
case|:
switch|switch
condition|(
name|gconf_value_get_list_type
argument_list|(
name|src
argument_list|)
condition|)
block|{
case|case
name|GCONF_VALUE_STRING
case|:
block|{
name|QStringList
name|result
decl_stmt|;
for|for
control|(
name|GSList
modifier|*
name|elts
init|=
name|gconf_value_get_list
argument_list|(
name|src
argument_list|)
init|;
name|elts
condition|;
name|elts
operator|=
name|elts
operator|->
name|next
control|)
name|result
operator|.
name|append
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|gconf_value_get_string
argument_list|(
operator|(
name|GConfValue
operator|*
operator|)
name|elts
operator|->
name|data
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|(
name|result
argument_list|)
return|;
block|}
default|default:
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|result
decl_stmt|;
for|for
control|(
name|GSList
modifier|*
name|elts
init|=
name|gconf_value_get_list
argument_list|(
name|src
argument_list|)
init|;
name|elts
condition|;
name|elts
operator|=
name|elts
operator|->
name|next
control|)
name|result
operator|.
name|append
argument_list|(
name|convertValue
argument_list|(
operator|(
name|GConfValue
operator|*
operator|)
name|elts
operator|->
name|data
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
case|case
name|GCONF_VALUE_SCHEMA
case|:
default|default:
return|return
name|QVariant
argument_list|()
return|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|convertString
specifier|static
name|GConfValue
modifier|*
name|convertString
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
name|GConfValue
modifier|*
name|v
init|=
name|gconf_value_new
argument_list|(
name|GCONF_VALUE_STRING
argument_list|)
decl_stmt|;
name|gconf_value_set_string
argument_list|(
name|v
argument_list|,
name|str
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
end_function
begin_function
DECL|function|primitiveType
specifier|static
name|GConfValueType
name|primitiveType
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|elt
parameter_list|)
block|{
switch|switch
condition|(
name|elt
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|String
case|:
return|return
name|GCONF_VALUE_STRING
return|;
case|case
name|QVariant
operator|::
name|Int
case|:
return|return
name|GCONF_VALUE_INT
return|;
case|case
name|QVariant
operator|::
name|Double
case|:
return|return
name|GCONF_VALUE_FLOAT
return|;
case|case
name|QVariant
operator|::
name|Bool
case|:
return|return
name|GCONF_VALUE_BOOL
return|;
default|default:
return|return
name|GCONF_VALUE_INVALID
return|;
block|}
block|}
end_function
begin_function
DECL|function|uniformType
specifier|static
name|GConfValueType
name|uniformType
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|list
parameter_list|)
block|{
name|GConfValueType
name|result
init|=
name|GCONF_VALUE_INVALID
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QVariant
modifier|&
name|elt
decl|,
name|list
control|)
block|{
name|GConfValueType
name|elt_type
init|=
name|primitiveType
argument_list|(
name|elt
argument_list|)
decl_stmt|;
if|if
condition|(
name|elt_type
operator|==
name|GCONF_VALUE_INVALID
condition|)
return|return
name|GCONF_VALUE_INVALID
return|;
if|if
condition|(
name|result
operator|==
name|GCONF_VALUE_INVALID
condition|)
name|result
operator|=
name|elt_type
expr_stmt|;
elseif|else
if|if
condition|(
name|result
operator|!=
name|elt_type
condition|)
return|return
name|GCONF_VALUE_INVALID
return|;
block|}
if|if
condition|(
name|result
operator|==
name|GCONF_VALUE_INVALID
condition|)
return|return
name|GCONF_VALUE_STRING
return|;
comment|// empty list.
else|else
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|convertValue
specifier|static
name|int
name|convertValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|src
parameter_list|,
name|GConfValue
modifier|*
modifier|*
name|valp
parameter_list|)
block|{
name|GConfValue
modifier|*
name|v
decl_stmt|;
switch|switch
condition|(
name|src
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Invalid
case|:
name|v
operator|=
name|NULL
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Bool
case|:
name|v
operator|=
name|gconf_value_new
argument_list|(
name|GCONF_VALUE_BOOL
argument_list|)
expr_stmt|;
name|gconf_value_set_bool
argument_list|(
name|v
argument_list|,
name|src
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Int
case|:
name|v
operator|=
name|gconf_value_new
argument_list|(
name|GCONF_VALUE_INT
argument_list|)
expr_stmt|;
name|gconf_value_set_int
argument_list|(
name|v
argument_list|,
name|src
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Double
case|:
name|v
operator|=
name|gconf_value_new
argument_list|(
name|GCONF_VALUE_FLOAT
argument_list|)
expr_stmt|;
name|gconf_value_set_float
argument_list|(
name|v
argument_list|,
name|src
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|String
case|:
name|v
operator|=
name|convertString
argument_list|(
name|src
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|StringList
case|:
block|{
name|GSList
modifier|*
name|elts
init|=
name|NULL
decl_stmt|;
name|v
operator|=
name|gconf_value_new
argument_list|(
name|GCONF_VALUE_LIST
argument_list|)
expr_stmt|;
name|gconf_value_set_list_type
argument_list|(
name|v
argument_list|,
name|GCONF_VALUE_STRING
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|str
decl|,
name|src
operator|.
name|toStringList
argument_list|()
control|)
name|elts
operator|=
name|g_slist_prepend
argument_list|(
name|elts
argument_list|,
name|convertString
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
name|gconf_value_set_list_nocopy
argument_list|(
name|v
argument_list|,
name|g_slist_reverse
argument_list|(
name|elts
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|List
case|:
block|{
name|GConfValueType
name|elt_type
init|=
name|uniformType
argument_list|(
name|src
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|elt_type
operator|==
name|GCONF_VALUE_INVALID
condition|)
name|v
operator|=
name|NULL
expr_stmt|;
else|else
block|{
name|GSList
modifier|*
name|elts
init|=
name|NULL
decl_stmt|;
name|v
operator|=
name|gconf_value_new
argument_list|(
name|GCONF_VALUE_LIST
argument_list|)
expr_stmt|;
name|gconf_value_set_list_type
argument_list|(
name|v
argument_list|,
name|elt_type
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QVariant
modifier|&
name|elt
decl|,
name|src
operator|.
name|toList
argument_list|()
control|)
block|{
name|GConfValue
modifier|*
name|val
init|=
name|NULL
decl_stmt|;
name|convertValue
argument_list|(
name|elt
argument_list|,
operator|&
name|val
argument_list|)
expr_stmt|;
comment|// guaranteed to succeed.
name|elts
operator|=
name|g_slist_prepend
argument_list|(
name|elts
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
name|gconf_value_set_list_nocopy
argument_list|(
name|v
argument_list|,
name|g_slist_reverse
argument_list|(
name|elts
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
return|return
literal|0
return|;
block|}
operator|*
name|valp
operator|=
name|v
expr_stmt|;
return|return
literal|1
return|;
block|}
end_function
begin_function
DECL|function|notify_trampoline
name|void
name|GConfItemPrivate
operator|::
name|notify_trampoline
parameter_list|(
name|GConfClient
modifier|*
parameter_list|,
name|guint
parameter_list|,
name|GConfEntry
modifier|*
parameter_list|,
name|gpointer
name|data
parameter_list|)
block|{
name|GConfItem
modifier|*
name|item
init|=
operator|(
name|GConfItem
operator|*
operator|)
name|data
decl_stmt|;
name|item
operator|->
name|update_value
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|update_value
name|void
name|GConfItem
operator|::
name|update_value
parameter_list|(
name|bool
name|emit_signal
parameter_list|)
block|{
name|QVariant
name|new_value
decl_stmt|;
name|withClient
argument_list|(
argument|client
argument_list|)
block|{
name|GError
modifier|*
name|error
init|=
name|NULL
decl_stmt|;
name|QByteArray
name|k
init|=
name|convertKey
argument_list|(
name|priv
operator|->
name|key
argument_list|)
decl_stmt|;
name|GConfValue
modifier|*
name|v
init|=
name|gconf_client_get
argument_list|(
name|client
argument_list|,
name|k
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|error
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|error
operator|->
name|message
expr_stmt|;
name|g_error_free
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|new_value
operator|=
name|priv
operator|->
name|value
expr_stmt|;
block|}
else|else
block|{
name|new_value
operator|=
name|convertValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
condition|)
name|gconf_value_free
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|new_value
operator|!=
name|priv
operator|->
name|value
condition|)
block|{
name|priv
operator|->
name|value
operator|=
name|new_value
expr_stmt|;
if|if
condition|(
name|emit_signal
condition|)
emit|emit
name|valueChanged
argument_list|()
emit|;
block|}
block|}
end_function
begin_function
DECL|function|key
name|QString
name|GConfItem
operator|::
name|key
parameter_list|()
specifier|const
block|{
return|return
name|priv
operator|->
name|key
return|;
block|}
end_function
begin_function
DECL|function|value
name|QVariant
name|GConfItem
operator|::
name|value
parameter_list|()
specifier|const
block|{
return|return
name|priv
operator|->
name|value
return|;
block|}
end_function
begin_function
DECL|function|value
name|QVariant
name|GConfItem
operator|::
name|value
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|def
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|priv
operator|->
name|value
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|def
return|;
else|else
return|return
name|priv
operator|->
name|value
return|;
block|}
end_function
begin_function
DECL|function|set
name|void
name|GConfItem
operator|::
name|set
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|val
parameter_list|)
block|{
name|withClient
argument_list|(
argument|client
argument_list|)
block|{
name|QByteArray
name|k
init|=
name|convertKey
argument_list|(
name|priv
operator|->
name|key
argument_list|)
decl_stmt|;
name|GConfValue
modifier|*
name|v
decl_stmt|;
if|if
condition|(
name|convertValue
argument_list|(
name|val
argument_list|,
operator|&
name|v
argument_list|)
condition|)
block|{
name|GError
modifier|*
name|error
init|=
name|NULL
decl_stmt|;
if|if
condition|(
name|v
condition|)
block|{
name|gconf_client_set
argument_list|(
name|client
argument_list|,
name|k
operator|.
name|data
argument_list|()
argument_list|,
name|v
argument_list|,
operator|&
name|error
argument_list|)
expr_stmt|;
name|gconf_value_free
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gconf_client_unset
argument_list|(
name|client
argument_list|,
name|k
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|error
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|error
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|error
operator|->
name|message
expr_stmt|;
name|g_error_free
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|priv
operator|->
name|value
operator|!=
name|val
condition|)
block|{
name|priv
operator|->
name|value
operator|=
name|val
expr_stmt|;
emit|emit
name|valueChanged
argument_list|()
emit|;
block|}
block|}
else|else
name|qWarning
argument_list|()
operator|<<
literal|"Can't store a"
operator|<<
name|val
operator|.
name|typeName
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|unset
name|void
name|GConfItem
operator|::
name|unset
parameter_list|()
block|{
name|set
argument_list|(
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|listDirs
name|QList
argument_list|<
name|QString
argument_list|>
name|GConfItem
operator|::
name|listDirs
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|children
decl_stmt|;
name|withClient
argument_list|(
argument|client
argument_list|)
block|{
name|QByteArray
name|k
init|=
name|convertKey
argument_list|(
name|priv
operator|->
name|key
argument_list|)
decl_stmt|;
name|GSList
modifier|*
name|dirs
init|=
name|gconf_client_all_dirs
argument_list|(
name|client
argument_list|,
name|k
operator|.
name|data
argument_list|()
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
for|for
control|(
name|GSList
modifier|*
name|d
init|=
name|dirs
init|;
name|d
condition|;
name|d
operator|=
name|d
operator|->
name|next
control|)
block|{
name|children
operator|.
name|append
argument_list|(
name|convertKey
argument_list|(
operator|(
name|char
operator|*
operator|)
name|d
operator|->
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|g_free
argument_list|(
name|d
operator|->
name|data
argument_list|)
expr_stmt|;
block|}
name|g_slist_free
argument_list|(
name|dirs
argument_list|)
expr_stmt|;
block|}
return|return
name|children
return|;
block|}
end_function
begin_function
DECL|function|listEntries
name|QList
argument_list|<
name|QString
argument_list|>
name|GConfItem
operator|::
name|listEntries
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|children
decl_stmt|;
name|withClient
argument_list|(
argument|client
argument_list|)
block|{
name|QByteArray
name|k
init|=
name|convertKey
argument_list|(
name|priv
operator|->
name|key
argument_list|)
decl_stmt|;
name|GSList
modifier|*
name|entries
init|=
name|gconf_client_all_entries
argument_list|(
name|client
argument_list|,
name|k
operator|.
name|data
argument_list|()
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
for|for
control|(
name|GSList
modifier|*
name|e
init|=
name|entries
init|;
name|e
condition|;
name|e
operator|=
name|e
operator|->
name|next
control|)
block|{
name|children
operator|.
name|append
argument_list|(
name|convertKey
argument_list|(
operator|(
operator|(
name|GConfEntry
operator|*
operator|)
name|e
operator|->
name|data
operator|)
operator|->
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|gconf_entry_free
argument_list|(
operator|(
name|GConfEntry
operator|*
operator|)
name|e
operator|->
name|data
argument_list|)
expr_stmt|;
block|}
name|g_slist_free
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
return|return
name|children
return|;
block|}
end_function
begin_constructor
DECL|function|GConfItem
name|GConfItem
operator|::
name|GConfItem
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{
name|priv
operator|=
operator|new
name|GConfItemPrivate
expr_stmt|;
name|priv
operator|->
name|key
operator|=
name|key
expr_stmt|;
name|priv
operator|->
name|notify_id
operator|=
literal|0
expr_stmt|;
name|withClient
argument_list|(
argument|client
argument_list|)
block|{
name|update_value
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QByteArray
name|k
init|=
name|convertKey
argument_list|(
name|priv
operator|->
name|key
argument_list|)
decl_stmt|;
name|gconf_client_add_dir
argument_list|(
name|client
argument_list|,
name|k
operator|.
name|data
argument_list|()
argument_list|,
name|GCONF_CLIENT_PRELOAD_ONELEVEL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|priv
operator|->
name|notify_id
operator|=
name|gconf_client_notify_add
argument_list|(
name|client
argument_list|,
name|k
operator|.
name|data
argument_list|()
argument_list|,
name|GConfItemPrivate
operator|::
name|notify_trampoline
argument_list|,
name|this
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~GConfItem
name|GConfItem
operator|::
name|~
name|GConfItem
parameter_list|()
block|{
name|withClient
argument_list|(
argument|client
argument_list|)
block|{
name|QByteArray
name|k
init|=
name|convertKey
argument_list|(
name|priv
operator|->
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|priv
operator|->
name|notify_id
condition|)
name|gconf_client_notify_remove
argument_list|(
name|client
argument_list|,
name|priv
operator|->
name|notify_id
argument_list|)
expr_stmt|;
name|gconf_client_remove_dir
argument_list|(
name|client
argument_list|,
name|k
operator|.
name|data
argument_list|()
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
operator|delete
name|priv
expr_stmt|;
block|}
end_destructor
end_unit
