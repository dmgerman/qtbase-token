begin_unit
begin_comment
comment|/* pngconf.h - machine configurable file for libpng  *  * libpng version 1.6.17, March 26, 2015  *  * Copyright (c) 1998-2015 Glenn Randers-Pehrson  * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)  * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)  *  * This code is released under the libpng license.  * For conditions of distribution and use, see the disclaimer  * and license in png.h  *  * Any machine specific code is near the front of this file, so if you  * are configuring libpng for a machine, you may want to read the section  * starting here down to where it starts to typedef png_color, png_text,  * and png_info.  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PNGCONF_H
end_ifndef
begin_define
DECL|macro|PNGCONF_H
define|#
directive|define
name|PNGCONF_H
end_define
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_BUILDING_SYMBOL_TABLE
end_ifndef
begin_comment
comment|/* else includes may cause problems */
end_comment
begin_comment
comment|/* From libpng 1.6.0 libpng requires an ANSI X3.159-1989 ("ISOC90") compliant C  * compiler for correct compilation.  The following header files are required by  * the standard.  If your compiler doesn't provide these header files, or they  * do not match the standard, you will need to provide/improve them.  */
end_comment
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<stddef.h>
end_include
begin_comment
comment|/* Library header files.  These header files are all defined by ISOC90; libpng  * expects conformant implementations, however, an ISOC90 conformant system need  * not provide these header files if the functionality cannot be implemented.  * In this case it will be necessary to disable the relevant parts of libpng in  * the build of pnglibconf.h.  *  * Prior to 1.6.0 string.h was included here; the API changes in 1.6.0 to not  * include this unnecessary header file.  */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|PNG_STDIO_SUPPORTED
end_ifdef
begin_comment
comment|/* Required for the definition of FILE: */
end_comment
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|PNG_SETJMP_SUPPORTED
end_ifdef
begin_comment
comment|/* Required for the definition of jmp_buf and the declaration of longjmp: */
end_comment
begin_include
include|#
directive|include
file|<setjmp.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|PNG_CONVERT_tIME_SUPPORTED
end_ifdef
begin_comment
comment|/* Required for struct tm: */
end_comment
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* PNG_BUILDING_SYMBOL_TABLE */
end_comment
begin_comment
comment|/* Prior to 1.6.0 it was possible to turn off 'const' in declarations using  * PNG_NO_CONST; this is no longer supported except for data declarations which  * apparently still cause problems in 2011 on some compilers.  */
end_comment
begin_define
DECL|macro|PNG_CONST
define|#
directive|define
name|PNG_CONST
value|const
end_define
begin_comment
DECL|macro|PNG_CONST
comment|/* backward compatibility only */
end_comment
begin_comment
comment|/* This controls optimization of the reading of 16 and 32 bit values  * from PNG files.  It can be set on a per-app-file basis - it  * just changes whether a macro is used when the function is called.  * The library builder sets the default; if read functions are not  * built into the library the macro implementation is forced on.  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_READ_INT_FUNCTIONS_SUPPORTED
end_ifndef
begin_define
DECL|macro|PNG_USE_READ_MACROS
define|#
directive|define
name|PNG_USE_READ_MACROS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|PNG_NO_USE_READ_MACROS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|PNG_USE_READ_MACROS
argument_list|)
end_if
begin_if
if|#
directive|if
name|PNG_DEFAULT_READ_MACROS
end_if
begin_define
DECL|macro|PNG_USE_READ_MACROS
define|#
directive|define
name|PNG_USE_READ_MACROS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* COMPILER SPECIFIC OPTIONS.  *  * These options are provided so that a variety of difficult compilers  * can be used.  Some are fixed at build time (e.g. PNG_API_RULE  * below) but still have compiler specific implementations, others  * may be changed on a per-file basis when compiling against libpng.  */
end_comment
begin_comment
comment|/* The PNGARG macro was used in versions of libpng prior to 1.6.0 to protect  * against legacy (pre ISOC90) compilers that did not understand function  * prototypes.  It is not required for modern C compilers.  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PNGARG
end_ifndef
begin_define
DECL|macro|PNGARG
define|#
directive|define
name|PNGARG
parameter_list|(
name|arglist
parameter_list|)
value|arglist
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* Function calling conventions.  * =============================  * Normally it is not necessary to specify to the compiler how to call  * a function - it just does it - however on x86 systems derived from  * Microsoft and Borland C compilers ('IBM PC', 'DOS', 'Windows' systems  * and some others) there are multiple ways to call a function and the  * default can be changed on the compiler command line.  For this reason  * libpng specifies the calling convention of every exported function and  * every function called via a user supplied function pointer.  This is  * done in this file by defining the following macros:  *  * PNGAPI    Calling convention for exported functions.  * PNGCBAPI  Calling convention for user provided (callback) functions.  * PNGCAPI   Calling convention used by the ANSI-C library (required  *           for longjmp callbacks and sometimes used internally to  *           specify the calling convention for zlib).  *  * These macros should never be overridden.  If it is necessary to  * change calling convention in a private build this can be done  * by setting PNG_API_RULE (which defaults to 0) to one of the values  * below to select the correct 'API' variants.  *  * PNG_API_RULE=0 Use PNGCAPI - the 'C' calling convention - throughout.  *                This is correct in every known environment.  * PNG_API_RULE=1 Use the operating system convention for PNGAPI and  *                the 'C' calling convention (from PNGCAPI) for  *                callbacks (PNGCBAPI).  This is no longer required  *                in any known environment - if it has to be used  *                please post an explanation of the problem to the  *                libpng mailing list.  *  * These cases only differ if the operating system does not use the C  * calling convention, at present this just means the above cases  * (x86 DOS/Windows sytems) and, even then, this does not apply to  * Cygwin running on those systems.  *  * Note that the value must be defined in pnglibconf.h so that what  * the application uses to call the library matches the conventions  * set when building the library.  */
end_comment
begin_comment
comment|/* Symbol export  * =============  * When building a shared library it is almost always necessary to tell  * the compiler which symbols to export.  The png.h macro 'PNG_EXPORT'  * is used to mark the symbols.  On some systems these symbols can be  * extracted at link time and need no special processing by the compiler,  * on other systems the symbols are flagged by the compiler and just  * the declaration requires a special tag applied (unfortunately) in a  * compiler dependent way.  Some systems can do either.  *  * A small number of older systems also require a symbol from a DLL to  * be flagged to the program that calls it.  This is a problem because  * we do not know in the header file included by application code that  * the symbol will come from a shared library, as opposed to a statically  * linked one.  For this reason the application must tell us by setting  * the magic flag PNG_USE_DLL to turn on the special processing before  * it includes png.h.  *  * Four additional macros are used to make this happen:  *  * PNG_IMPEXP The magic (if any) to cause a symbol to be exported from  *            the build or imported if PNG_USE_DLL is set - compiler  *            and system specific.  *  * PNG_EXPORT_TYPE(type) A macro that pre or appends PNG_IMPEXP to  *                       'type', compiler specific.  *  * PNG_DLL_EXPORT Set to the magic to use during a libpng build to  *                make a symbol exported from the DLL.  Not used in the  *                public header files; see pngpriv.h for how it is used  *                in the libpng build.  *  * PNG_DLL_IMPORT Set to the magic to force the libpng symbols to come  *                from a DLL - used to define PNG_IMPEXP when  *                PNG_USE_DLL is set.  */
end_comment
begin_comment
comment|/* System specific discovery.  * ==========================  * This code is used at build time to find PNG_IMPEXP, the API settings  * and PNG_EXPORT_TYPE(), it may also set a macro to indicate the DLL  * import processing is possible.  On Windows systems it also sets  * compiler-specific macros to the values required to change the calling  * conventions of the various functions.  */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|_Windows
argument_list|)
operator|||
name|defined
argument_list|(
name|_WINDOWS
argument_list|)
operator|||
name|defined
argument_list|(
name|WIN32
argument_list|)
operator|||
expr|\
name|defined
argument_list|(
name|_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|__WIN32__
argument_list|)
operator|||
name|defined
argument_list|(
name|__CYGWIN__
argument_list|)
end_if
begin_comment
comment|/* Windows system (DOS doesn't support DLLs).  Includes builds under Cygwin or    * MinGW on any architecture currently supported by Windows.  Also includes    * Watcom builds but these need special treatment because they are not    * compatible with GCC or Visual C because of different calling conventions.    */
end_comment
begin_if
if|#
directive|if
name|PNG_API_RULE
operator|==
literal|2
end_if
begin_comment
comment|/* If this line results in an error, either because __watcall is not      * understood or because of a redefine just below you cannot use *this*      * build of the library with the compiler you are using.  *This* build was      * build using Watcom and applications must also be built using Watcom!      */
end_comment
begin_define
DECL|macro|PNGCAPI
define|#
directive|define
name|PNGCAPI
value|__watcall
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|||
operator|(
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
operator|(
name|_MSC_VER
operator|>=
literal|800
operator|)
operator|)
end_if
begin_define
DECL|macro|PNGCAPI
define|#
directive|define
name|PNGCAPI
value|__cdecl
end_define
begin_if
if|#
directive|if
name|PNG_API_RULE
operator|==
literal|1
end_if
begin_comment
comment|/* If this line results in an error __stdcall is not understood and         * PNG_API_RULE should not have been set to '1'.         */
end_comment
begin_define
DECL|macro|PNGAPI
define|#
directive|define
name|PNGAPI
value|__stdcall
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_else
else|#
directive|else
end_else
begin_comment
comment|/* An older compiler, or one not detected (erroneously) above,      * if necessary override on the command line to get the correct      * variants for the compiler.      */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PNGCAPI
end_ifndef
begin_define
DECL|macro|PNGCAPI
define|#
directive|define
name|PNGCAPI
value|_cdecl
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|PNG_API_RULE
operator|==
literal|1
operator|&&
operator|!
name|defined
argument_list|(
name|PNGAPI
argument_list|)
end_if
begin_define
DECL|macro|PNGAPI
define|#
directive|define
name|PNGAPI
value|_stdcall
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* compiler/api */
end_comment
begin_comment
comment|/* NOTE: PNGCBAPI always defaults to PNGCAPI. */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|PNGAPI
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|PNG_USER_PRIVATEBUILD
argument_list|)
end_if
begin_error
error|#
directive|error
literal|"PNG_USER_PRIVATEBUILD must be defined if PNGAPI is changed"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|_MSC_VER
operator|<
literal|800
operator|)
operator|||
expr|\
operator|(
name|defined
argument_list|(
name|__BORLANDC__
argument_list|)
operator|&&
name|__BORLANDC__
operator|<
literal|0x500
operator|)
end_if
begin_comment
comment|/* older Borland and MSC      * compilers used '__export' and required this to be after      * the type.      */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_EXPORT_TYPE
end_ifndef
begin_define
DECL|macro|PNG_EXPORT_TYPE
define|#
directive|define
name|PNG_EXPORT_TYPE
parameter_list|(
name|type
parameter_list|)
value|type PNG_IMPEXP
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|PNG_DLL_EXPORT
define|#
directive|define
name|PNG_DLL_EXPORT
value|__export
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|/* newer compiler */
end_comment
begin_define
DECL|macro|PNG_DLL_EXPORT
define|#
directive|define
name|PNG_DLL_EXPORT
value|__declspec(dllexport)
end_define
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_DLL_IMPORT
end_ifndef
begin_define
DECL|macro|PNG_DLL_IMPORT
define|#
directive|define
name|PNG_DLL_IMPORT
value|__declspec(dllimport)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* compiler */
end_comment
begin_else
else|#
directive|else
end_else
begin_comment
comment|/* !Windows */
end_comment
begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|__IBMC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__IBMCPP__
argument_list|)
operator|)
operator|&&
name|defined
argument_list|(
name|__OS2__
argument_list|)
end_if
begin_define
DECL|macro|PNGAPI
define|#
directive|define
name|PNGAPI
value|_System
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|/* !Windows/x86&& !OS/2 */
end_comment
begin_comment
comment|/* Use the defaults, or define PNG*API on the command line (but      * this will have to be done for every compile!)      */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* other system, !OS/2 */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* !Windows/x86 */
end_comment
begin_comment
comment|/* Now do all the defaulting . */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PNGCAPI
end_ifndef
begin_define
DECL|macro|PNGCAPI
define|#
directive|define
name|PNGCAPI
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNGCBAPI
end_ifndef
begin_define
DECL|macro|PNGCBAPI
define|#
directive|define
name|PNGCBAPI
value|PNGCAPI
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNGAPI
end_ifndef
begin_define
DECL|macro|PNGAPI
define|#
directive|define
name|PNGAPI
value|PNGCAPI
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* PNG_IMPEXP may be set on the compilation system command line or (if not set)  * then in an internal header file when building the library, otherwise (when  * using the library) it is set here.  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_IMPEXP
end_ifndef
begin_if
if|#
directive|if
name|defined
argument_list|(
name|PNG_USE_DLL
argument_list|)
operator|&&
name|defined
argument_list|(
name|PNG_DLL_IMPORT
argument_list|)
end_if
begin_comment
comment|/* This forces use of a DLL, disallowing static linking */
end_comment
begin_define
DECL|macro|PNG_IMPEXP
define|#
directive|define
name|PNG_IMPEXP
value|PNG_DLL_IMPORT
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_IMPEXP
end_ifndef
begin_define
DECL|macro|PNG_IMPEXP
define|#
directive|define
name|PNG_IMPEXP
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* In 1.5.2 the definition of PNG_FUNCTION has been changed to always treat  * 'attributes' as a storage class - the attributes go at the start of the  * function definition, and attributes are always appended regardless of the  * compiler.  This considerably simplifies these macros but may cause problems  * if any compilers both need function attributes and fail to handle them as  * a storage class (this is unlikely.)  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_FUNCTION
end_ifndef
begin_define
DECL|macro|PNG_FUNCTION
define|#
directive|define
name|PNG_FUNCTION
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|,
name|args
parameter_list|,
name|attributes
parameter_list|)
value|attributes type name args
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_EXPORT_TYPE
end_ifndef
begin_define
DECL|macro|PNG_EXPORT_TYPE
define|#
directive|define
name|PNG_EXPORT_TYPE
parameter_list|(
name|type
parameter_list|)
value|PNG_IMPEXP type
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* The ordinal value is only relevant when preprocessing png.h for symbol     * table entries, so we discard it here.  See the .dfn files in the     * scripts directory.     */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_EXPORTA
end_ifndef
begin_define
DECL|macro|PNG_EXPORTA
define|#
directive|define
name|PNG_EXPORTA
parameter_list|(
name|ordinal
parameter_list|,
name|type
parameter_list|,
name|name
parameter_list|,
name|args
parameter_list|,
name|attributes
parameter_list|)
define|\
value|PNG_FUNCTION(PNG_EXPORT_TYPE(type),(PNGAPI name),PNGARG(args), \         extern attributes)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* ANSI-C (C90) does not permit a macro to be invoked with an empty argument,  * so make something non-empty to satisfy the requirement:  */
end_comment
begin_define
DECL|macro|PNG_EMPTY
define|#
directive|define
name|PNG_EMPTY
end_define
begin_comment
DECL|macro|PNG_EMPTY
comment|/*empty list*/
end_comment
begin_define
DECL|macro|PNG_EXPORT
define|#
directive|define
name|PNG_EXPORT
parameter_list|(
name|ordinal
parameter_list|,
name|type
parameter_list|,
name|name
parameter_list|,
name|args
parameter_list|)
define|\
value|PNG_EXPORTA(ordinal, type, name, args, PNG_EMPTY)
end_define
begin_comment
comment|/* Use PNG_REMOVED to comment out a removed interface. */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_REMOVED
end_ifndef
begin_define
DECL|macro|PNG_REMOVED
define|#
directive|define
name|PNG_REMOVED
parameter_list|(
name|ordinal
parameter_list|,
name|type
parameter_list|,
name|name
parameter_list|,
name|args
parameter_list|,
name|attributes
parameter_list|)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_CALLBACK
end_ifndef
begin_define
DECL|macro|PNG_CALLBACK
define|#
directive|define
name|PNG_CALLBACK
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|,
name|args
parameter_list|)
value|type (PNGCBAPI name) PNGARG(args)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* Support for compiler specific function attributes.  These are used  * so that where compiler support is available incorrect use of API  * functions in png.h will generate compiler warnings.  *  * Added at libpng-1.2.41.  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_NO_PEDANTIC_WARNINGS
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_PEDANTIC_WARNINGS_SUPPORTED
end_ifndef
begin_define
DECL|macro|PNG_PEDANTIC_WARNINGS_SUPPORTED
define|#
directive|define
name|PNG_PEDANTIC_WARNINGS_SUPPORTED
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|PNG_PEDANTIC_WARNINGS_SUPPORTED
end_ifdef
begin_comment
comment|/* Support for compiler specific function attributes.  These are used    * so that where compiler support is available, incorrect use of API    * functions in png.h will generate compiler warnings.  Added at libpng    * version 1.2.41.  Disabling these removes the warnings but may also produce    * less efficient code.    */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__clang__
argument_list|)
operator|&&
name|defined
argument_list|(
name|__has_attribute
argument_list|)
end_if
begin_comment
comment|/* Clang defines both __clang__ and __GNUC__. Check __clang__ first. */
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|PNG_USE_RESULT
argument_list|)
operator|&&
name|__has_attribute
argument_list|(
name|__warn_unused_result__
argument_list|)
end_if
begin_define
DECL|macro|PNG_USE_RESULT
define|#
directive|define
name|PNG_USE_RESULT
value|__attribute__((__warn_unused_result__))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|PNG_NORETURN
argument_list|)
operator|&&
name|__has_attribute
argument_list|(
name|__noreturn__
argument_list|)
end_if
begin_define
DECL|macro|PNG_NORETURN
define|#
directive|define
name|PNG_NORETURN
value|__attribute__((__noreturn__))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|PNG_ALLOCATED
argument_list|)
operator|&&
name|__has_attribute
argument_list|(
name|__malloc__
argument_list|)
end_if
begin_define
DECL|macro|PNG_ALLOCATED
define|#
directive|define
name|PNG_ALLOCATED
value|__attribute__((__malloc__))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|PNG_DEPRECATED
argument_list|)
operator|&&
name|__has_attribute
argument_list|(
name|__deprecated__
argument_list|)
end_if
begin_define
DECL|macro|PNG_DEPRECATED
define|#
directive|define
name|PNG_DEPRECATED
value|__attribute__((__deprecated__))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|PNG_PRIVATE
argument_list|)
end_if
begin_ifdef
ifdef|#
directive|ifdef
name|__has_extension
end_ifdef
begin_if
if|#
directive|if
name|__has_extension
argument_list|(
name|attribute_unavailable_with_message
argument_list|)
end_if
begin_define
DECL|macro|PNG_PRIVATE
define|#
directive|define
name|PNG_PRIVATE
value|__attribute__((__unavailable__(\              "This function is not exported by libpng.")))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_RESTRICT
end_ifndef
begin_define
DECL|macro|PNG_RESTRICT
define|#
directive|define
name|PNG_RESTRICT
value|__restrict
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__GNUC__
argument_list|)
end_elif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_USE_RESULT
end_ifndef
begin_define
DECL|macro|PNG_USE_RESULT
define|#
directive|define
name|PNG_USE_RESULT
value|__attribute__((__warn_unused_result__))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_NORETURN
end_ifndef
begin_define
DECL|macro|PNG_NORETURN
define|#
directive|define
name|PNG_NORETURN
value|__attribute__((__noreturn__))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__GNUC__
operator|>=
literal|3
end_if
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_ALLOCATED
end_ifndef
begin_define
DECL|macro|PNG_ALLOCATED
define|#
directive|define
name|PNG_ALLOCATED
value|__attribute__((__malloc__))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_DEPRECATED
end_ifndef
begin_define
DECL|macro|PNG_DEPRECATED
define|#
directive|define
name|PNG_DEPRECATED
value|__attribute__((__deprecated__))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_PRIVATE
end_ifndef
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
comment|/* Doesn't work so we use deprecated instead*/
end_comment
begin_define
define|#
directive|define
name|PNG_PRIVATE
define|\
value|__attribute__((warning("This function is not exported by libpng.")))
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|PNG_PRIVATE
define|#
directive|define
name|PNG_PRIVATE
define|\
value|__attribute__((__deprecated__))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|(
operator|(
name|__GNUC__
operator|>
literal|3
operator|)
operator|||
operator|!
name|defined
argument_list|(
name|__GNUC_MINOR__
argument_list|)
operator|||
operator|(
name|__GNUC_MINOR__
operator|>=
literal|1
operator|)
operator|)
end_if
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_RESTRICT
end_ifndef
begin_define
DECL|macro|PNG_RESTRICT
define|#
directive|define
name|PNG_RESTRICT
value|__restrict
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* __GNUC__.__GNUC_MINOR__> 3.0 */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* __GNUC__>= 3 */
end_comment
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
operator|(
name|_MSC_VER
operator|>=
literal|1300
operator|)
end_elif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_USE_RESULT
end_ifndef
begin_define
DECL|macro|PNG_USE_RESULT
define|#
directive|define
name|PNG_USE_RESULT
end_define
begin_comment
DECL|macro|PNG_USE_RESULT
comment|/* not supported */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_NORETURN
end_ifndef
begin_define
DECL|macro|PNG_NORETURN
define|#
directive|define
name|PNG_NORETURN
value|__declspec(noreturn)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_ALLOCATED
end_ifndef
begin_if
if|#
directive|if
operator|(
name|_MSC_VER
operator|>=
literal|1400
operator|)
end_if
begin_define
DECL|macro|PNG_ALLOCATED
define|#
directive|define
name|PNG_ALLOCATED
value|__declspec(restrict)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_DEPRECATED
end_ifndef
begin_define
DECL|macro|PNG_DEPRECATED
define|#
directive|define
name|PNG_DEPRECATED
value|__declspec(deprecated)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_PRIVATE
end_ifndef
begin_define
DECL|macro|PNG_PRIVATE
define|#
directive|define
name|PNG_PRIVATE
value|__declspec(deprecated)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_RESTRICT
end_ifndef
begin_if
if|#
directive|if
operator|(
name|_MSC_VER
operator|>=
literal|1400
operator|)
end_if
begin_define
DECL|macro|PNG_RESTRICT
define|#
directive|define
name|PNG_RESTRICT
value|__restrict
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__WATCOMC__
argument_list|)
end_elif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_RESTRICT
end_ifndef
begin_define
DECL|macro|PNG_RESTRICT
define|#
directive|define
name|PNG_RESTRICT
value|__restrict
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* PNG_PEDANTIC_WARNINGS */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_DEPRECATED
end_ifndef
begin_define
DECL|macro|PNG_DEPRECATED
define|#
directive|define
name|PNG_DEPRECATED
end_define
begin_comment
DECL|macro|PNG_DEPRECATED
comment|/* Use of this function is deprecated */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_USE_RESULT
end_ifndef
begin_define
DECL|macro|PNG_USE_RESULT
define|#
directive|define
name|PNG_USE_RESULT
end_define
begin_comment
DECL|macro|PNG_USE_RESULT
comment|/* The result of this function must be checked */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_NORETURN
end_ifndef
begin_define
DECL|macro|PNG_NORETURN
define|#
directive|define
name|PNG_NORETURN
end_define
begin_comment
DECL|macro|PNG_NORETURN
comment|/* This function does not return */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_ALLOCATED
end_ifndef
begin_define
DECL|macro|PNG_ALLOCATED
define|#
directive|define
name|PNG_ALLOCATED
end_define
begin_comment
DECL|macro|PNG_ALLOCATED
comment|/* The result of the function is new memory */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_PRIVATE
end_ifndef
begin_define
DECL|macro|PNG_PRIVATE
define|#
directive|define
name|PNG_PRIVATE
end_define
begin_comment
DECL|macro|PNG_PRIVATE
comment|/* This is a private libpng function */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_RESTRICT
end_ifndef
begin_define
DECL|macro|PNG_RESTRICT
define|#
directive|define
name|PNG_RESTRICT
end_define
begin_comment
DECL|macro|PNG_RESTRICT
comment|/* The C99 "restrict" feature */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_FP_EXPORT
end_ifndef
begin_comment
comment|/* A floating point API. */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|PNG_FLOATING_POINT_SUPPORTED
end_ifdef
begin_define
DECL|macro|PNG_FP_EXPORT
define|#
directive|define
name|PNG_FP_EXPORT
parameter_list|(
name|ordinal
parameter_list|,
name|type
parameter_list|,
name|name
parameter_list|,
name|args
parameter_list|)
define|\
value|PNG_EXPORT(ordinal, type, name, args);
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|/* No floating point APIs */
end_comment
begin_define
DECL|macro|PNG_FP_EXPORT
define|#
directive|define
name|PNG_FP_EXPORT
parameter_list|(
name|ordinal
parameter_list|,
name|type
parameter_list|,
name|name
parameter_list|,
name|args
parameter_list|)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_FIXED_EXPORT
end_ifndef
begin_comment
comment|/* A fixed point API. */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|PNG_FIXED_POINT_SUPPORTED
end_ifdef
begin_define
DECL|macro|PNG_FIXED_EXPORT
define|#
directive|define
name|PNG_FIXED_EXPORT
parameter_list|(
name|ordinal
parameter_list|,
name|type
parameter_list|,
name|name
parameter_list|,
name|args
parameter_list|)
define|\
value|PNG_EXPORT(ordinal, type, name, args);
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|/* No fixed point APIs */
end_comment
begin_define
DECL|macro|PNG_FIXED_EXPORT
define|#
directive|define
name|PNG_FIXED_EXPORT
parameter_list|(
name|ordinal
parameter_list|,
name|type
parameter_list|,
name|name
parameter_list|,
name|args
parameter_list|)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_BUILDING_SYMBOL_TABLE
end_ifndef
begin_comment
comment|/* Some typedefs to get us started.  These should be safe on most of the common  * platforms.  *  * png_uint_32 and png_int_32 may, currently, be larger than required to hold a  * 32-bit value however this is not normally advisable.  *  * png_uint_16 and png_int_16 should always be two bytes in size - this is  * verified at library build time.  *  * png_byte must always be one byte in size.  *  * The checks below use constants from limits.h, as defined by the ISOC90  * standard.  */
end_comment
begin_if
if|#
directive|if
name|CHAR_BIT
operator|==
literal|8
operator|&&
name|UCHAR_MAX
operator|==
literal|255
end_if
begin_typedef
DECL|typedef|png_byte
typedef|typedef
name|unsigned
name|char
name|png_byte
typedef|;
end_typedef
begin_else
else|#
directive|else
end_else
begin_error
error|#
directive|error
literal|"libpng requires 8 bit bytes"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|INT_MIN
operator|==
operator|-
literal|32768
operator|&&
name|INT_MAX
operator|==
literal|32767
end_if
begin_typedef
DECL|typedef|png_int_16
typedef|typedef
name|int
name|png_int_16
typedef|;
end_typedef
begin_elif
elif|#
directive|elif
name|SHRT_MIN
operator|==
operator|-
literal|32768
operator|&&
name|SHRT_MAX
operator|==
literal|32767
end_elif
begin_typedef
DECL|typedef|png_int_16
typedef|typedef
name|short
name|png_int_16
typedef|;
end_typedef
begin_else
else|#
directive|else
end_else
begin_error
error|#
directive|error
literal|"libpng requires a signed 16 bit type"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|UINT_MAX
operator|==
literal|65535
end_if
begin_typedef
DECL|typedef|png_uint_16
typedef|typedef
name|unsigned
name|int
name|png_uint_16
typedef|;
end_typedef
begin_elif
elif|#
directive|elif
name|USHRT_MAX
operator|==
literal|65535
end_elif
begin_typedef
DECL|typedef|png_uint_16
typedef|typedef
name|unsigned
name|short
name|png_uint_16
typedef|;
end_typedef
begin_else
else|#
directive|else
end_else
begin_error
error|#
directive|error
literal|"libpng requires an unsigned 16 bit type"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|INT_MIN
operator|<
operator|-
literal|2147483646
operator|&&
name|INT_MAX
operator|>
literal|2147483646
end_if
begin_typedef
DECL|typedef|png_int_32
typedef|typedef
name|int
name|png_int_32
typedef|;
end_typedef
begin_elif
elif|#
directive|elif
name|LONG_MIN
operator|<
operator|-
literal|2147483646
operator|&&
name|LONG_MAX
operator|>
literal|2147483646
end_elif
begin_typedef
DECL|typedef|png_int_32
typedef|typedef
name|long
name|int
name|png_int_32
typedef|;
end_typedef
begin_else
else|#
directive|else
end_else
begin_error
error|#
directive|error
literal|"libpng requires a signed 32 bit (or more) type"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|UINT_MAX
operator|>
literal|4294967294
end_if
begin_typedef
DECL|typedef|png_uint_32
typedef|typedef
name|unsigned
name|int
name|png_uint_32
typedef|;
end_typedef
begin_elif
elif|#
directive|elif
name|ULONG_MAX
operator|>
literal|4294967294
end_elif
begin_typedef
DECL|typedef|png_uint_32
typedef|typedef
name|unsigned
name|long
name|int
name|png_uint_32
typedef|;
end_typedef
begin_else
else|#
directive|else
end_else
begin_error
error|#
directive|error
literal|"libpng requires an unsigned 32 bit (or more) type"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* Prior to 1.6.0 it was possible to disable the use of size_t, 1.6.0, however,  * requires an ISOC90 compiler and relies on consistent behavior of sizeof.  */
end_comment
begin_typedef
DECL|typedef|png_size_t
typedef|typedef
name|size_t
name|png_size_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_ptrdiff_t
typedef|typedef
name|ptrdiff_t
name|png_ptrdiff_t
typedef|;
end_typedef
begin_comment
comment|/* libpng needs to know the maximum value of 'size_t' and this controls the  * definition of png_alloc_size_t, below.  This maximum value of size_t limits  * but does not control the maximum allocations the library makes - there is  * direct application control of this through png_set_user_limits().  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PNG_SMALL_SIZE_T
end_ifndef
begin_comment
comment|/* Compiler specific tests for systems where size_t is known to be less than     * 32 bits (some of these systems may no longer work because of the lack of     * 'far' support; see above.)     */
end_comment
begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|__TURBOC__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__FLAT__
argument_list|)
operator|)
operator|||
expr|\
operator|(
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|defined
argument_list|(
name|MAXSEG_64K
argument_list|)
operator|)
end_if
begin_define
DECL|macro|PNG_SMALL_SIZE_T
define|#
directive|define
name|PNG_SMALL_SIZE_T
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* png_alloc_size_t is guaranteed to be no smaller than png_size_t, and no  * smaller than png_uint_32.  Casts from png_size_t or png_uint_32 to  * png_alloc_size_t are not necessary; in fact, it is recommended not to use  * them at all so that the compiler can complain when something turns out to be  * problematic.  *  * Casts in the other direction (from png_alloc_size_t to png_size_t or  * png_uint_32) should be explicitly applied; however, we do not expect to  * encounter practical situations that require such conversions.  *  * PNG_SMALL_SIZE_T must be defined if the maximum value of size_t is less than  * 4294967295 - i.e. less than the maximum value of png_uint_32.  */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|PNG_SMALL_SIZE_T
end_ifdef
begin_typedef
DECL|typedef|png_alloc_size_t
typedef|typedef
name|png_uint_32
name|png_alloc_size_t
typedef|;
end_typedef
begin_else
else|#
directive|else
end_else
begin_typedef
DECL|typedef|png_alloc_size_t
typedef|typedef
name|png_size_t
name|png_alloc_size_t
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* Prior to 1.6.0 libpng offered limited support for Microsoft C compiler  * implementations of Intel CPU specific support of user-mode segmented address  * spaces, where 16-bit pointers address more than 65536 bytes of memory using  * separate 'segment' registers.  The implementation requires two different  * types of pointer (only one of which includes the segment value.)  *  * If required this support is available in version 1.2 of libpng and may be  * available in versions through 1.5, although the correctness of the code has  * not been verified recently.  */
end_comment
begin_comment
comment|/* Typedef for floating-point numbers that are converted to fixed-point with a  * multiple of 100,000, e.g., gamma  */
end_comment
begin_typedef
DECL|typedef|png_fixed_point
typedef|typedef
name|png_int_32
name|png_fixed_point
typedef|;
end_typedef
begin_comment
comment|/* Add typedefs for pointers */
end_comment
begin_typedef
DECL|typedef|png_voidp
typedef|typedef
name|void
modifier|*
name|png_voidp
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_const_voidp
typedef|typedef
specifier|const
name|void
modifier|*
name|png_const_voidp
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_bytep
typedef|typedef
name|png_byte
modifier|*
name|png_bytep
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_const_bytep
typedef|typedef
specifier|const
name|png_byte
modifier|*
name|png_const_bytep
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_uint_32p
typedef|typedef
name|png_uint_32
modifier|*
name|png_uint_32p
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_const_uint_32p
typedef|typedef
specifier|const
name|png_uint_32
modifier|*
name|png_const_uint_32p
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_int_32p
typedef|typedef
name|png_int_32
modifier|*
name|png_int_32p
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_const_int_32p
typedef|typedef
specifier|const
name|png_int_32
modifier|*
name|png_const_int_32p
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_uint_16p
typedef|typedef
name|png_uint_16
modifier|*
name|png_uint_16p
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_const_uint_16p
typedef|typedef
specifier|const
name|png_uint_16
modifier|*
name|png_const_uint_16p
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_int_16p
typedef|typedef
name|png_int_16
modifier|*
name|png_int_16p
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_const_int_16p
typedef|typedef
specifier|const
name|png_int_16
modifier|*
name|png_const_int_16p
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_charp
typedef|typedef
name|char
modifier|*
name|png_charp
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_const_charp
typedef|typedef
specifier|const
name|char
modifier|*
name|png_const_charp
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_fixed_point_p
typedef|typedef
name|png_fixed_point
modifier|*
name|png_fixed_point_p
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_const_fixed_point_p
typedef|typedef
specifier|const
name|png_fixed_point
modifier|*
name|png_const_fixed_point_p
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_size_tp
typedef|typedef
name|png_size_t
modifier|*
name|png_size_tp
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_const_size_tp
typedef|typedef
specifier|const
name|png_size_t
modifier|*
name|png_const_size_tp
typedef|;
end_typedef
begin_ifdef
ifdef|#
directive|ifdef
name|PNG_STDIO_SUPPORTED
end_ifdef
begin_typedef
DECL|typedef|png_FILE_p
typedef|typedef
name|FILE
modifier|*
name|png_FILE_p
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|PNG_FLOATING_POINT_SUPPORTED
end_ifdef
begin_typedef
DECL|typedef|png_doublep
typedef|typedef
name|double
modifier|*
name|png_doublep
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_const_doublep
typedef|typedef
specifier|const
name|double
modifier|*
name|png_const_doublep
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* Pointers to pointers; i.e. arrays */
end_comment
begin_typedef
DECL|typedef|png_bytepp
typedef|typedef
name|png_byte
modifier|*
modifier|*
name|png_bytepp
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_uint_32pp
typedef|typedef
name|png_uint_32
modifier|*
modifier|*
name|png_uint_32pp
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_int_32pp
typedef|typedef
name|png_int_32
modifier|*
modifier|*
name|png_int_32pp
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_uint_16pp
typedef|typedef
name|png_uint_16
modifier|*
modifier|*
name|png_uint_16pp
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_int_16pp
typedef|typedef
name|png_int_16
modifier|*
modifier|*
name|png_int_16pp
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_const_charpp
typedef|typedef
specifier|const
name|char
modifier|*
modifier|*
name|png_const_charpp
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_charpp
typedef|typedef
name|char
modifier|*
modifier|*
name|png_charpp
typedef|;
end_typedef
begin_typedef
DECL|typedef|png_fixed_point_pp
typedef|typedef
name|png_fixed_point
modifier|*
modifier|*
name|png_fixed_point_pp
typedef|;
end_typedef
begin_ifdef
ifdef|#
directive|ifdef
name|PNG_FLOATING_POINT_SUPPORTED
end_ifdef
begin_typedef
DECL|typedef|png_doublepp
typedef|typedef
name|double
modifier|*
modifier|*
name|png_doublepp
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* Pointers to pointers to pointers; i.e., pointer to array */
end_comment
begin_typedef
DECL|typedef|png_charppp
typedef|typedef
name|char
modifier|*
modifier|*
modifier|*
name|png_charppp
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* PNG_BUILDING_SYMBOL_TABLE */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* PNGCONF_H */
end_comment
end_unit
