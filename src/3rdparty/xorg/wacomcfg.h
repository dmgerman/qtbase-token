begin_unit
begin_comment
comment|/***************************************************************************** ** wacomcfg.h ** ** Copyright (C) 2003 - John E. Joganic ** Copyright (C) 2004-2008 - Ping Cheng ** ** This program is free software; you can redistribute it and/or ** modify it under the terms of the GNU Lesser General Public License ** as published by the Free Software Foundation; either version 2 ** of the License, or (at your option) any later version. ** ** This program is distributed in the hope that it will be useful, ** but WITHOUT ANY WARRANTY; without even the implied warranty of ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ** GNU Lesser General Public License for more details. ** ** You should have received a copy of the GNU Lesser General Public License ** along with this program; if not, write to the Free Software ** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|__LINUXWACOM_WACOMCFG_H
end_ifndef
begin_define
DECL|macro|__LINUXWACOM_WACOMCFG_H
define|#
directive|define
name|__LINUXWACOM_WACOMCFG_H
end_define
begin_include
include|#
directive|include
file|<X11/Xlib.h>
end_include
begin_include
include|#
directive|include
file|<X11/extensions/XInput.h>
end_include
begin_include
include|#
directive|include
file|<X11/extensions/XIproto.h>
end_include
begin_comment
comment|/* JEJ - NOTE WE DO NOT INCLUDE Xwacom.h HERE.  THIS ELIMINATES A CONFLICT  *       WHEN THIS FILE IS INSTALLED SINCE Xwacom.h WILL IN MANY CASES NOT  *       GO WITH IT.  SOMEDAY IT MAY BE PART OF XFREE86. */
end_comment
begin_typedef
DECL|typedef|WACOMCONFIG
typedef|typedef
name|struct
name|_WACOMCONFIG
name|WACOMCONFIG
typedef|;
end_typedef
begin_typedef
DECL|typedef|WACOMDEVICE
typedef|typedef
name|struct
name|_WACOMDEVICE
name|WACOMDEVICE
typedef|;
end_typedef
begin_typedef
DECL|typedef|WACOMERRORFUNC
typedef|typedef
name|void
function_decl|(
modifier|*
name|WACOMERRORFUNC
function_decl|)
parameter_list|(
name|int
name|err
parameter_list|,
specifier|const
name|char
modifier|*
name|pszText
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|WACOMDEVICEINFO
typedef|typedef
name|struct
name|_WACOMDEVICEINFO
name|WACOMDEVICEINFO
typedef|;
end_typedef
begin_typedef
typedef|typedef
enum|enum
block|{
DECL|enumerator|WACOMDEVICETYPE_UNKNOWN
name|WACOMDEVICETYPE_UNKNOWN
block|,
DECL|enumerator|WACOMDEVICETYPE_CURSOR
name|WACOMDEVICETYPE_CURSOR
block|,
DECL|enumerator|WACOMDEVICETYPE_STYLUS
name|WACOMDEVICETYPE_STYLUS
block|,
DECL|enumerator|WACOMDEVICETYPE_ERASER
name|WACOMDEVICETYPE_ERASER
block|,
DECL|enumerator|WACOMDEVICETYPE_PAD
name|WACOMDEVICETYPE_PAD
block|,
DECL|enumerator|WACOMDEVICETYPE_TOUCH
name|WACOMDEVICETYPE_TOUCH
block|,
DECL|enumerator|WACOMDEVICETYPE_MAX
name|WACOMDEVICETYPE_MAX
block|}
DECL|typedef|WACOMDEVICETYPE
name|WACOMDEVICETYPE
typedef|;
end_typedef
begin_struct
DECL|struct|_WACOMDEVICEINFO
struct|struct
name|_WACOMDEVICEINFO
block|{
DECL|member|pszName
specifier|const
name|char
modifier|*
name|pszName
decl_stmt|;
DECL|member|type
name|WACOMDEVICETYPE
name|type
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|_WACOMCONFIG
struct|struct
name|_WACOMCONFIG
block|{
DECL|member|pDisp
name|Display
modifier|*
name|pDisp
decl_stmt|;
DECL|member|pfnError
name|WACOMERRORFUNC
name|pfnError
decl_stmt|;
DECL|member|pDevs
name|XDeviceInfo
modifier|*
name|pDevs
decl_stmt|;
DECL|member|nDevCnt
name|int
name|nDevCnt
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|_WACOMDEVICE
struct|struct
name|_WACOMDEVICE
block|{
DECL|member|pCfg
name|WACOMCONFIG
modifier|*
name|pCfg
decl_stmt|;
DECL|member|pDev
name|XDevice
modifier|*
name|pDev
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|/***************************************************************************** ** Functions *****************************************************************************/
end_comment
begin_function_decl
name|WACOMCONFIG
modifier|*
name|WacomConfigInit
parameter_list|(
name|Display
modifier|*
name|pDisplay
parameter_list|,
name|WACOMERRORFUNC
name|pfnErrorHandler
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* Initializes configuration library.  *   pDisplay        - display to configure  *   pfnErrorHandler - handler to which errors are reported; may be NULL  * Returns WACOMCONFIG handle on success, NULL on error.  *   errno contains error code. */
end_comment
begin_function_decl
name|void
name|WacomConfigTerm
parameter_list|(
name|WACOMCONFIG
modifier|*
name|hConfig
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* Terminates configuration library, releasing display. */
end_comment
begin_function_decl
name|int
name|WacomConfigListDevices
parameter_list|(
name|WACOMCONFIG
modifier|*
name|hConfig
parameter_list|,
name|WACOMDEVICEINFO
modifier|*
modifier|*
name|ppInfo
parameter_list|,
name|unsigned
name|int
modifier|*
name|puCount
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* Returns a list of wacom devices.  *   ppInfo         - pointer to WACOMDEVICEINFO* to receive device data  *   puSize         - pointer to receive device count  * Returns 0 on success, -1 on failure.  errno contains error code.  * Comments: You must free this structure using WacomConfigFree. */
end_comment
begin_function_decl
name|WACOMDEVICE
modifier|*
name|WacomConfigOpenDevice
parameter_list|(
name|WACOMCONFIG
modifier|*
name|hConfig
parameter_list|,
specifier|const
name|char
modifier|*
name|pszDeviceName
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* Open a device by name.  *   pszDeviceName  - name of XInput device corresponding to wacom device  * Returns handle to device on success, NULL on error.  *   errno contains error code.  * Comments: Close using WacomConfigCloseDevice */
end_comment
begin_function_decl
name|int
name|WacomConfigCloseDevice
parameter_list|(
name|WACOMDEVICE
modifier|*
name|hDevice
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* Closes a device.  * Returns 0 on success, -1 on error.  errno contains error code. */
end_comment
begin_function_decl
name|int
name|WacomConfigSetRawParam
parameter_list|(
name|WACOMDEVICE
modifier|*
name|hDevice
parameter_list|,
name|int
name|nParam
parameter_list|,
name|int
name|nValue
parameter_list|,
name|unsigned
modifier|*
name|keys
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* Sets the raw device parameter to specified value.  *   nParam         - valid paramters can be found Xwacom.h which is not  *                      automatically included.  *   nValue         - 32 bit integer value  *   keys	    - an array of keys and modifiers  * Returns 0 on success, -1 on error.  errno contains error code.  *   EINVAL  - invalid parameter or value  *   EIO     - unknown X failure, use XSetErrorHandler to capture complete  *             error code and message  * Comments: Data is sent to wacom_drv module without any error checking.  *   Generally, you should use the more specific handler functions in this  *   library, but for some parameters, particularly experimental ones, you  *   will probably have to set them directly. */
end_comment
begin_function_decl
name|int
name|WacomConfigGetRawParam
parameter_list|(
name|WACOMDEVICE
modifier|*
name|hDevice
parameter_list|,
name|int
name|nParam
parameter_list|,
name|int
modifier|*
name|nValue
parameter_list|,
name|int
name|valu
parameter_list|,
name|unsigned
modifier|*
name|keys
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* Gets the raw device parameter.  *   nParam         - valid paramters can be found Xwacom.h which is not  *                      automatically included.  *   nValue         - the device parameter is returned in the integer  *                    pointed by this parameter.  *   valu	    - calling valuator value: 1: Get 3: GetDefault  *   keys	    - an array of keys and modifiers  * Returns 0 on success, -1 on error.  errno contains error code.  *   EINVAL  - invalid parameter or value  *   EIO     - unknown X failure, use XSetErrorHandler to capture complete  *             error code and message  */
end_comment
begin_function_decl
name|void
name|WacomConfigFree
parameter_list|(
name|void
modifier|*
name|pvData
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* Frees memory allocated by library. */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* __LINUXWACOM_WACOMCFG_H */
end_comment
end_unit
