begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#  DocMaker (c) 2002, 2004, 2008 David Turner <david@freetype.org>'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# This program is a re-write of the original DocMaker took used'
nl|'\n'
comment|'# to generate the API Reference of the FreeType font engine'
nl|'\n'
comment|'# by converting in-source comments into structured HTML.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# This new version is capable of outputting XML data, as well'
nl|'\n'
comment|'# as accepts more liberal formatting options.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# It also uses regular expression matching and substitution'
nl|'\n'
comment|'# to speed things significantly.'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
name|'from'
name|'sources'
name|'import'
op|'*'
newline|'\n'
name|'from'
name|'content'
name|'import'
op|'*'
newline|'\n'
name|'from'
name|'utils'
name|'import'
op|'*'
newline|'\n'
name|'from'
name|'formatter'
name|'import'
op|'*'
newline|'\n'
name|'from'
name|'tohtml'
name|'import'
op|'*'
newline|'\n'
nl|'\n'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
op|','
name|'os'
op|','
name|'time'
op|','
name|'string'
op|','
name|'glob'
op|','
name|'getopt'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|usage
name|'def'
name|'usage'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'print'
string|'"\\nDocMaker Usage information\\n"'
newline|'\n'
name|'print'
string|'"  docmaker [options] file1 [file2 ...]\\n"'
newline|'\n'
name|'print'
string|'"using the following options:\\n"'
newline|'\n'
name|'print'
string|'"  -h : print this page"'
newline|'\n'
name|'print'
string|'"  -t : set project title, as in \'-t \\"My Project\\"\'"'
newline|'\n'
name|'print'
string|'"  -o : set output directory, as in \'-o mydir\'"'
newline|'\n'
name|'print'
string|'"  -p : set documentation prefix, as in \'-p ft2\'"'
newline|'\n'
name|'print'
string|'""'
newline|'\n'
name|'print'
string|'"  --title  : same as -t, as in \'--title=\\"My Project\\"\'"'
newline|'\n'
name|'print'
string|'"  --output : same as -o, as in \'--output=mydir\'"'
newline|'\n'
name|'print'
string|'"  --prefix : same as -p, as in \'--prefix=ft2\'"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|main
dedent|''
name|'def'
name|'main'
op|'('
name|'argv'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""main program loop"""'
newline|'\n'
nl|'\n'
name|'global'
name|'output_dir'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'opts'
op|','
name|'args'
op|'='
name|'getopt'
op|'.'
name|'getopt'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'1'
op|':'
op|']'
op|','
string|'"ht:o:p:"'
op|','
op|'['
string|'"help"'
op|','
string|'"title="'
op|','
string|'"output="'
op|','
string|'"prefix="'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'getopt'
op|'.'
name|'GetoptError'
op|':'
newline|'\n'
indent|'        '
name|'usage'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'2'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'args'
op|'=='
op|'['
op|']'
op|':'
newline|'\n'
indent|'        '
name|'usage'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# process options'
nl|'\n'
comment|'#'
nl|'\n'
dedent|''
name|'project_title'
op|'='
string|'"Project"'
newline|'\n'
name|'project_prefix'
op|'='
name|'None'
newline|'\n'
name|'output_dir'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'for'
name|'opt'
name|'in'
name|'opts'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'opt'
op|'['
number|'0'
op|']'
name|'in'
op|'('
string|'"-h"'
op|','
string|'"--help"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'usage'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'opt'
op|'['
number|'0'
op|']'
name|'in'
op|'('
string|'"-t"'
op|','
string|'"--title"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'project_title'
op|'='
name|'opt'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'opt'
op|'['
number|'0'
op|']'
name|'in'
op|'('
string|'"-o"'
op|','
string|'"--output"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'output_dir'
op|'='
name|'opt'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'opt'
op|'['
number|'0'
op|']'
name|'in'
op|'('
string|'"-p"'
op|','
string|'"--prefix"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'project_prefix'
op|'='
name|'opt'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'check_output'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# create context and processor'
nl|'\n'
name|'source_processor'
op|'='
name|'SourceProcessor'
op|'('
op|')'
newline|'\n'
name|'content_processor'
op|'='
name|'ContentProcessor'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# retrieve the list of files to process'
nl|'\n'
name|'file_list'
op|'='
name|'make_file_list'
op|'('
name|'args'
op|')'
newline|'\n'
name|'for'
name|'filename'
name|'in'
name|'file_list'
op|':'
newline|'\n'
indent|'        '
name|'source_processor'
op|'.'
name|'parse_file'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'content_processor'
op|'.'
name|'parse_sources'
op|'('
name|'source_processor'
op|')'
newline|'\n'
nl|'\n'
comment|'# process sections'
nl|'\n'
dedent|''
name|'content_processor'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'formatter'
op|'='
name|'HtmlFormatter'
op|'('
name|'content_processor'
op|','
name|'project_title'
op|','
name|'project_prefix'
op|')'
newline|'\n'
nl|'\n'
name|'formatter'
op|'.'
name|'toc_dump'
op|'('
op|')'
newline|'\n'
name|'formatter'
op|'.'
name|'index_dump'
op|'('
op|')'
newline|'\n'
name|'formatter'
op|'.'
name|'section_dump_all'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# if called from the command line'
nl|'\n'
comment|'#'
nl|'\n'
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'main'
op|'('
name|'sys'
op|'.'
name|'argv'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# eof'
nl|'\n'
dedent|''
endmarker|''
end_unit
