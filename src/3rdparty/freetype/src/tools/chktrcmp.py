begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Check trace components in FreeType 2 source.'
nl|'\n'
comment|'# Author: suzuki toshiya, 2009'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# This code is explicitly into the public domain.'
nl|'\n'
nl|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
nl|'\n'
DECL|variable|SRC_FILE_LIST
name|'SRC_FILE_LIST'
op|'='
op|'['
op|']'
newline|'\n'
DECL|variable|USED_COMPONENT
name|'USED_COMPONENT'
op|'='
op|'{'
op|'}'
newline|'\n'
DECL|variable|KNOWN_COMPONENT
name|'KNOWN_COMPONENT'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|SRC_FILE_DIRS
name|'SRC_FILE_DIRS'
op|'='
op|'['
string|'"src"'
op|']'
newline|'\n'
DECL|variable|TRACE_DEF_FILES
name|'TRACE_DEF_FILES'
op|'='
op|'['
string|'"include/freetype/internal/fttrace.h"'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# --------------------------------------------------------------'
nl|'\n'
comment|'# Parse command line options'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'sys'
op|'.'
name|'argv'
op|')'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'if'
name|'sys'
op|'.'
name|'argv'
op|'['
name|'i'
op|']'
op|'.'
name|'startswith'
op|'('
string|'"--help"'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'print'
string|'"Usage: %s [option]"'
op|'%'
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
newline|'\n'
name|'print'
string|'"Search used-but-defined and defined-but-not-used trace_XXX macros"'
newline|'\n'
name|'print'
string|'""'
newline|'\n'
name|'print'
string|'"  --help:"'
newline|'\n'
name|'print'
string|'"        Show this help"'
newline|'\n'
name|'print'
string|'""'
newline|'\n'
name|'print'
string|'"  --src-dirs=dir1:dir2:..."'
newline|'\n'
name|'print'
string|'"        Specify the directories of C source files to be checked"'
newline|'\n'
name|'print'
string|'"        Default is %s"'
op|'%'
string|'":"'
op|'.'
name|'join'
op|'('
name|'SRC_FILE_DIRS'
op|')'
newline|'\n'
name|'print'
string|'""'
newline|'\n'
name|'print'
string|'"  --def-files=file1:file2:..."'
newline|'\n'
name|'print'
string|'"        Specify the header files including FT_TRACE_DEF()"'
newline|'\n'
name|'print'
string|'"        Default is %s"'
op|'%'
string|'":"'
op|'.'
name|'join'
op|'('
name|'TRACE_DEF_FILES'
op|')'
newline|'\n'
name|'print'
string|'""'
newline|'\n'
name|'exit'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'sys'
op|'.'
name|'argv'
op|'['
name|'i'
op|']'
op|'.'
name|'startswith'
op|'('
string|'"--src-dirs="'
op|')'
op|':'
newline|'\n'
DECL|variable|SRC_FILE_DIRS
indent|'    '
name|'SRC_FILE_DIRS'
op|'='
name|'sys'
op|'.'
name|'argv'
op|'['
name|'i'
op|']'
op|'.'
name|'replace'
op|'('
string|'"--src-dirs="'
op|','
string|'""'
op|','
number|'1'
op|')'
op|'.'
name|'split'
op|'('
string|'":"'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'sys'
op|'.'
name|'argv'
op|'['
name|'i'
op|']'
op|'.'
name|'startswith'
op|'('
string|'"--def-files="'
op|')'
op|':'
newline|'\n'
DECL|variable|TRACE_DEF_FILES
indent|'    '
name|'TRACE_DEF_FILES'
op|'='
name|'sys'
op|'.'
name|'argv'
op|'['
name|'i'
op|']'
op|'.'
name|'replace'
op|'('
string|'"--def-files="'
op|','
string|'""'
op|','
number|'1'
op|')'
op|'.'
name|'split'
op|'('
string|'":"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# --------------------------------------------------------------'
nl|'\n'
comment|'# Scan C source and header files using trace macros.'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
DECL|variable|c_pathname_pat
dedent|''
dedent|''
name|'c_pathname_pat'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'^.*\\.[ch]$'"
op|','
name|'re'
op|'.'
name|'IGNORECASE'
op|')'
newline|'\n'
DECL|variable|trace_use_pat
name|'trace_use_pat'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'^[ \\t]*#define[ \\t]+FT_COMPONENT[ \\t]+trace_'"
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'d'
name|'in'
name|'SRC_FILE_DIRS'
op|':'
newline|'\n'
indent|'  '
name|'for'
op|'('
name|'p'
op|','
name|'dlst'
op|','
name|'flst'
op|')'
name|'in'
name|'os'
op|'.'
name|'walk'
op|'('
name|'d'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'f'
name|'in'
name|'flst'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'c_pathname_pat'
op|'.'
name|'match'
op|'('
name|'f'
op|')'
op|'!='
name|'None'
op|':'
newline|'\n'
DECL|variable|src_pathname
indent|'        '
name|'src_pathname'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'p'
op|','
name|'f'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|line_num
name|'line_num'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'src_line'
name|'in'
name|'open'
op|'('
name|'src_pathname'
op|','
string|"'r'"
op|')'
op|':'
newline|'\n'
DECL|variable|line_num
indent|'          '
name|'line_num'
op|'='
name|'line_num'
op|'+'
number|'1'
newline|'\n'
DECL|variable|src_line
name|'src_line'
op|'='
name|'src_line'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'trace_use_pat'
op|'.'
name|'match'
op|'('
name|'src_line'
op|')'
op|'!='
name|'None'
op|':'
newline|'\n'
DECL|variable|component_name
indent|'            '
name|'component_name'
op|'='
name|'trace_use_pat'
op|'.'
name|'sub'
op|'('
string|"''"
op|','
name|'src_line'
op|')'
newline|'\n'
name|'if'
name|'component_name'
name|'in'
name|'USED_COMPONENT'
op|':'
newline|'\n'
indent|'              '
name|'USED_COMPONENT'
op|'['
name|'component_name'
op|']'
op|'.'
name|'append'
op|'('
string|'"%s:%d"'
op|'%'
op|'('
name|'src_pathname'
op|','
name|'line_num'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'              '
name|'USED_COMPONENT'
op|'['
name|'component_name'
op|']'
op|'='
op|'['
string|'"%s:%d"'
op|'%'
op|'('
name|'src_pathname'
op|','
name|'line_num'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# --------------------------------------------------------------'
nl|'\n'
comment|'# Scan header file(s) defining trace macros.'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
DECL|variable|trace_def_pat_opn
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'trace_def_pat_opn'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'^.*FT_TRACE_DEF[ \\t]*\\([ \\t]*'"
op|')'
newline|'\n'
DECL|variable|trace_def_pat_cls
name|'trace_def_pat_cls'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'[ \\t\\)].*$'"
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'f'
name|'in'
name|'TRACE_DEF_FILES'
op|':'
newline|'\n'
DECL|variable|line_num
indent|'  '
name|'line_num'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'hdr_line'
name|'in'
name|'open'
op|'('
name|'f'
op|','
string|"'r'"
op|')'
op|':'
newline|'\n'
DECL|variable|line_num
indent|'    '
name|'line_num'
op|'='
name|'line_num'
op|'+'
number|'1'
newline|'\n'
DECL|variable|hdr_line
name|'hdr_line'
op|'='
name|'hdr_line'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'trace_def_pat_opn'
op|'.'
name|'match'
op|'('
name|'hdr_line'
op|')'
op|'!='
name|'None'
op|':'
newline|'\n'
DECL|variable|component_name
indent|'      '
name|'component_name'
op|'='
name|'trace_def_pat_opn'
op|'.'
name|'sub'
op|'('
string|"''"
op|','
name|'hdr_line'
op|')'
newline|'\n'
DECL|variable|component_name
name|'component_name'
op|'='
name|'trace_def_pat_cls'
op|'.'
name|'sub'
op|'('
string|"''"
op|','
name|'component_name'
op|')'
newline|'\n'
name|'if'
name|'component_name'
name|'in'
name|'KNOWN_COMPONENT'
op|':'
newline|'\n'
indent|'        '
name|'print'
string|'"trace component %s is defined twice, see %s and fttrace.h:%d"'
op|'%'
op|'('
name|'component_name'
op|','
name|'KNOWN_COMPONENT'
op|'['
name|'component_name'
op|']'
op|','
name|'line_num'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'KNOWN_COMPONENT'
op|'['
name|'component_name'
op|']'
op|'='
string|'"%s:%d"'
op|'%'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'f'
op|')'
op|','
name|'line_num'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# --------------------------------------------------------------'
nl|'\n'
comment|'# Compare the used and defined trace macros.'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'print'
string|'"# Trace component used in the implementations but not defined in fttrace.h."'
newline|'\n'
DECL|variable|cmpnt
name|'cmpnt'
op|'='
name|'USED_COMPONENT'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'cmpnt'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'for'
name|'c'
name|'in'
name|'cmpnt'
op|':'
newline|'\n'
indent|'  '
name|'if'
name|'c'
name|'not'
name|'in'
name|'KNOWN_COMPONENT'
op|':'
newline|'\n'
indent|'    '
name|'print'
string|'"Trace component %s (used in %s) is not defined."'
op|'%'
op|'('
name|'c'
op|','
string|'", "'
op|'.'
name|'join'
op|'('
name|'USED_COMPONENT'
op|'['
name|'c'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'print'
string|'"# Trace component is defined but not used in the implementations."'
newline|'\n'
DECL|variable|cmpnt
name|'cmpnt'
op|'='
name|'KNOWN_COMPONENT'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'cmpnt'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'for'
name|'c'
name|'in'
name|'cmpnt'
op|':'
newline|'\n'
indent|'  '
name|'if'
name|'c'
name|'not'
name|'in'
name|'USED_COMPONENT'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'c'
op|'!='
string|'"any"'
op|':'
newline|'\n'
indent|'      '
name|'print'
string|'"Trace component %s (defined in %s) is not used."'
op|'%'
op|'('
name|'c'
op|','
name|'KNOWN_COMPONENT'
op|'['
name|'c'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit
