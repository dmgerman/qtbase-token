begin_unit
begin_comment
comment|/*  pcf.h    FreeType font driver for pcf fonts    Copyright (C) 2000, 2001, 2002, 2003, 2006, 2010 by   Francesco Zappa Nardelli  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|__PCF_H__
end_ifndef
begin_define
DECL|macro|__PCF_H__
define|#
directive|define
name|__PCF_H__
end_define
begin_include
include|#
directive|include
file|<ft2build.h>
end_include
begin_include
include|#
directive|include
include|FT_INTERNAL_DRIVER_H
end_include
begin_include
include|#
directive|include
include|FT_INTERNAL_STREAM_H
end_include
begin_macro
name|FT_BEGIN_HEADER
end_macro
begin_typedef
DECL|struct|PCF_TableRec_
typedef|typedef
struct|struct
name|PCF_TableRec_
block|{
DECL|member|type
name|FT_ULong
name|type
decl_stmt|;
DECL|member|format
name|FT_ULong
name|format
decl_stmt|;
DECL|member|size
name|FT_ULong
name|size
decl_stmt|;
DECL|member|offset
name|FT_ULong
name|offset
decl_stmt|;
block|}
DECL|typedef|PCF_TableRec
DECL|typedef|PCF_Table
name|PCF_TableRec
operator|,
typedef|*
name|PCF_Table
typedef|;
end_typedef
begin_typedef
DECL|struct|PCF_TocRec_
typedef|typedef
struct|struct
name|PCF_TocRec_
block|{
DECL|member|version
name|FT_ULong
name|version
decl_stmt|;
DECL|member|count
name|FT_ULong
name|count
decl_stmt|;
DECL|member|tables
name|PCF_Table
name|tables
decl_stmt|;
block|}
DECL|typedef|PCF_TocRec
DECL|typedef|PCF_Toc
name|PCF_TocRec
operator|,
typedef|*
name|PCF_Toc
typedef|;
end_typedef
begin_typedef
DECL|struct|PCF_ParsePropertyRec_
typedef|typedef
struct|struct
name|PCF_ParsePropertyRec_
block|{
DECL|member|name
name|FT_Long
name|name
decl_stmt|;
DECL|member|isString
name|FT_Byte
name|isString
decl_stmt|;
DECL|member|value
name|FT_Long
name|value
decl_stmt|;
block|}
DECL|typedef|PCF_ParsePropertyRec
DECL|typedef|PCF_ParseProperty
name|PCF_ParsePropertyRec
operator|,
typedef|*
name|PCF_ParseProperty
typedef|;
end_typedef
begin_typedef
DECL|struct|PCF_PropertyRec_
typedef|typedef
struct|struct
name|PCF_PropertyRec_
block|{
DECL|member|name
name|FT_String
modifier|*
name|name
decl_stmt|;
DECL|member|isString
name|FT_Byte
name|isString
decl_stmt|;
union|union
block|{
DECL|member|atom
name|FT_String
modifier|*
name|atom
decl_stmt|;
DECL|member|l
name|FT_Long
name|l
decl_stmt|;
DECL|member|ul
name|FT_ULong
name|ul
decl_stmt|;
block|}
DECL|member|value
name|value
union|;
block|}
DECL|typedef|PCF_PropertyRec
DECL|typedef|PCF_Property
name|PCF_PropertyRec
operator|,
typedef|*
name|PCF_Property
typedef|;
end_typedef
begin_typedef
DECL|struct|PCF_Compressed_MetricRec_
typedef|typedef
struct|struct
name|PCF_Compressed_MetricRec_
block|{
DECL|member|leftSideBearing
name|FT_Byte
name|leftSideBearing
decl_stmt|;
DECL|member|rightSideBearing
name|FT_Byte
name|rightSideBearing
decl_stmt|;
DECL|member|characterWidth
name|FT_Byte
name|characterWidth
decl_stmt|;
DECL|member|ascent
name|FT_Byte
name|ascent
decl_stmt|;
DECL|member|descent
name|FT_Byte
name|descent
decl_stmt|;
block|}
DECL|typedef|PCF_Compressed_MetricRec
DECL|typedef|PCF_Compressed_Metric
name|PCF_Compressed_MetricRec
operator|,
typedef|*
name|PCF_Compressed_Metric
typedef|;
end_typedef
begin_typedef
DECL|struct|PCF_MetricRec_
typedef|typedef
struct|struct
name|PCF_MetricRec_
block|{
DECL|member|leftSideBearing
name|FT_Short
name|leftSideBearing
decl_stmt|;
DECL|member|rightSideBearing
name|FT_Short
name|rightSideBearing
decl_stmt|;
DECL|member|characterWidth
name|FT_Short
name|characterWidth
decl_stmt|;
DECL|member|ascent
name|FT_Short
name|ascent
decl_stmt|;
DECL|member|descent
name|FT_Short
name|descent
decl_stmt|;
DECL|member|attributes
name|FT_Short
name|attributes
decl_stmt|;
DECL|member|bits
name|FT_ULong
name|bits
decl_stmt|;
block|}
DECL|typedef|PCF_MetricRec
DECL|typedef|PCF_Metric
name|PCF_MetricRec
operator|,
typedef|*
name|PCF_Metric
typedef|;
end_typedef
begin_typedef
DECL|struct|PCF_AccelRec_
typedef|typedef
struct|struct
name|PCF_AccelRec_
block|{
DECL|member|noOverlap
name|FT_Byte
name|noOverlap
decl_stmt|;
DECL|member|constantMetrics
name|FT_Byte
name|constantMetrics
decl_stmt|;
DECL|member|terminalFont
name|FT_Byte
name|terminalFont
decl_stmt|;
DECL|member|constantWidth
name|FT_Byte
name|constantWidth
decl_stmt|;
DECL|member|inkInside
name|FT_Byte
name|inkInside
decl_stmt|;
DECL|member|inkMetrics
name|FT_Byte
name|inkMetrics
decl_stmt|;
DECL|member|drawDirection
name|FT_Byte
name|drawDirection
decl_stmt|;
DECL|member|fontAscent
name|FT_Long
name|fontAscent
decl_stmt|;
DECL|member|fontDescent
name|FT_Long
name|fontDescent
decl_stmt|;
DECL|member|maxOverlap
name|FT_Long
name|maxOverlap
decl_stmt|;
DECL|member|minbounds
name|PCF_MetricRec
name|minbounds
decl_stmt|;
DECL|member|maxbounds
name|PCF_MetricRec
name|maxbounds
decl_stmt|;
DECL|member|ink_minbounds
name|PCF_MetricRec
name|ink_minbounds
decl_stmt|;
DECL|member|ink_maxbounds
name|PCF_MetricRec
name|ink_maxbounds
decl_stmt|;
block|}
DECL|typedef|PCF_AccelRec
DECL|typedef|PCF_Accel
name|PCF_AccelRec
operator|,
typedef|*
name|PCF_Accel
typedef|;
end_typedef
begin_typedef
DECL|struct|PCF_EncodingRec_
typedef|typedef
struct|struct
name|PCF_EncodingRec_
block|{
DECL|member|enc
name|FT_Long
name|enc
decl_stmt|;
DECL|member|glyph
name|FT_UShort
name|glyph
decl_stmt|;
block|}
DECL|typedef|PCF_EncodingRec
DECL|typedef|PCF_Encoding
name|PCF_EncodingRec
operator|,
typedef|*
name|PCF_Encoding
typedef|;
end_typedef
begin_typedef
DECL|struct|PCF_FaceRec_
typedef|typedef
struct|struct
name|PCF_FaceRec_
block|{
DECL|member|root
name|FT_FaceRec
name|root
decl_stmt|;
DECL|member|comp_stream
name|FT_StreamRec
name|comp_stream
decl_stmt|;
DECL|member|comp_source
name|FT_Stream
name|comp_source
decl_stmt|;
DECL|member|charset_encoding
name|char
modifier|*
name|charset_encoding
decl_stmt|;
DECL|member|charset_registry
name|char
modifier|*
name|charset_registry
decl_stmt|;
DECL|member|toc
name|PCF_TocRec
name|toc
decl_stmt|;
DECL|member|accel
name|PCF_AccelRec
name|accel
decl_stmt|;
DECL|member|nprops
name|int
name|nprops
decl_stmt|;
DECL|member|properties
name|PCF_Property
name|properties
decl_stmt|;
DECL|member|nmetrics
name|FT_ULong
name|nmetrics
decl_stmt|;
DECL|member|metrics
name|PCF_Metric
name|metrics
decl_stmt|;
DECL|member|nencodings
name|FT_ULong
name|nencodings
decl_stmt|;
DECL|member|encodings
name|PCF_Encoding
name|encodings
decl_stmt|;
DECL|member|defaultChar
name|FT_Short
name|defaultChar
decl_stmt|;
DECL|member|bitmapsFormat
name|FT_ULong
name|bitmapsFormat
decl_stmt|;
DECL|member|charmap_handle
name|FT_CharMap
name|charmap_handle
decl_stmt|;
DECL|member|charmap
name|FT_CharMapRec
name|charmap
decl_stmt|;
comment|/* a single charmap per face */
block|}
DECL|typedef|PCF_FaceRec
DECL|typedef|PCF_Face
name|PCF_FaceRec
operator|,
typedef|*
name|PCF_Face
typedef|;
end_typedef
begin_comment
comment|/* macros for pcf font format */
end_comment
begin_define
DECL|macro|LSBFirst
define|#
directive|define
name|LSBFirst
value|0
end_define
begin_define
DECL|macro|MSBFirst
define|#
directive|define
name|MSBFirst
value|1
end_define
begin_define
DECL|macro|PCF_FILE_VERSION
define|#
directive|define
name|PCF_FILE_VERSION
value|( ( 'p'<< 24 ) | \                                   ( 'c'<< 16 ) | \                                   ( 'f'<<  8 ) | 1 )
end_define
begin_define
DECL|macro|PCF_FORMAT_MASK
define|#
directive|define
name|PCF_FORMAT_MASK
value|0xFFFFFF00UL
end_define
begin_define
DECL|macro|PCF_DEFAULT_FORMAT
define|#
directive|define
name|PCF_DEFAULT_FORMAT
value|0x00000000UL
end_define
begin_define
DECL|macro|PCF_INKBOUNDS
define|#
directive|define
name|PCF_INKBOUNDS
value|0x00000200UL
end_define
begin_define
DECL|macro|PCF_ACCEL_W_INKBOUNDS
define|#
directive|define
name|PCF_ACCEL_W_INKBOUNDS
value|0x00000100UL
end_define
begin_define
DECL|macro|PCF_COMPRESSED_METRICS
define|#
directive|define
name|PCF_COMPRESSED_METRICS
value|0x00000100UL
end_define
begin_define
DECL|macro|PCF_FORMAT_MATCH
define|#
directive|define
name|PCF_FORMAT_MATCH
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
define|\
value|( ( (a)& PCF_FORMAT_MASK ) == ( (b)& PCF_FORMAT_MASK ) )
end_define
begin_define
DECL|macro|PCF_GLYPH_PAD_MASK
define|#
directive|define
name|PCF_GLYPH_PAD_MASK
value|( 3<< 0 )
end_define
begin_define
DECL|macro|PCF_BYTE_MASK
define|#
directive|define
name|PCF_BYTE_MASK
value|( 1<< 2 )
end_define
begin_define
DECL|macro|PCF_BIT_MASK
define|#
directive|define
name|PCF_BIT_MASK
value|( 1<< 3 )
end_define
begin_define
DECL|macro|PCF_SCAN_UNIT_MASK
define|#
directive|define
name|PCF_SCAN_UNIT_MASK
value|( 3<< 4 )
end_define
begin_define
DECL|macro|PCF_BYTE_ORDER
define|#
directive|define
name|PCF_BYTE_ORDER
parameter_list|(
name|f
parameter_list|)
define|\
value|( ( (f)& PCF_BYTE_MASK ) ? MSBFirst : LSBFirst )
end_define
begin_define
DECL|macro|PCF_BIT_ORDER
define|#
directive|define
name|PCF_BIT_ORDER
parameter_list|(
name|f
parameter_list|)
define|\
value|( ( (f)& PCF_BIT_MASK ) ? MSBFirst : LSBFirst )
end_define
begin_define
DECL|macro|PCF_GLYPH_PAD_INDEX
define|#
directive|define
name|PCF_GLYPH_PAD_INDEX
parameter_list|(
name|f
parameter_list|)
define|\
value|( (f)& PCF_GLYPH_PAD_MASK )
end_define
begin_define
DECL|macro|PCF_GLYPH_PAD
define|#
directive|define
name|PCF_GLYPH_PAD
parameter_list|(
name|f
parameter_list|)
define|\
value|( 1<< PCF_GLYPH_PAD_INDEX( f ) )
end_define
begin_define
DECL|macro|PCF_SCAN_UNIT_INDEX
define|#
directive|define
name|PCF_SCAN_UNIT_INDEX
parameter_list|(
name|f
parameter_list|)
define|\
value|( ( (f)& PCF_SCAN_UNIT_MASK )>> 4 )
end_define
begin_define
DECL|macro|PCF_SCAN_UNIT
define|#
directive|define
name|PCF_SCAN_UNIT
parameter_list|(
name|f
parameter_list|)
define|\
value|( 1<< PCF_SCAN_UNIT_INDEX( f ) )
end_define
begin_define
DECL|macro|PCF_FORMAT_BITS
define|#
directive|define
name|PCF_FORMAT_BITS
parameter_list|(
name|f
parameter_list|)
define|\
value|( (f)& ( PCF_GLYPH_PAD_MASK | \                     PCF_BYTE_MASK      | \                     PCF_BIT_MASK       | \                     PCF_SCAN_UNIT_MASK ) )
end_define
begin_define
DECL|macro|PCF_SIZE_TO_INDEX
define|#
directive|define
name|PCF_SIZE_TO_INDEX
parameter_list|(
name|s
parameter_list|)
value|( (s) == 4 ? 2 : (s) == 2 ? 1 : 0 )
end_define
begin_define
DECL|macro|PCF_INDEX_TO_SIZE
define|#
directive|define
name|PCF_INDEX_TO_SIZE
parameter_list|(
name|b
parameter_list|)
value|( 1<< b )
end_define
begin_define
DECL|macro|PCF_FORMAT
define|#
directive|define
name|PCF_FORMAT
parameter_list|(
name|bit
parameter_list|,
name|byte
parameter_list|,
name|glyph
parameter_list|,
name|scan
parameter_list|)
define|\
value|( ( PCF_SIZE_TO_INDEX( scan )<< 4 ) | \             ( ( (bit)  == MSBFirst ? 1 : 0 )<< 3 ) | \             ( ( (byte) == MSBFirst ? 1 : 0 )<< 2 ) | \             ( PCF_SIZE_TO_INDEX( glyph )<< 0 ) )
end_define
begin_define
DECL|macro|PCF_PROPERTIES
define|#
directive|define
name|PCF_PROPERTIES
value|( 1<< 0 )
end_define
begin_define
DECL|macro|PCF_ACCELERATORS
define|#
directive|define
name|PCF_ACCELERATORS
value|( 1<< 1 )
end_define
begin_define
DECL|macro|PCF_METRICS
define|#
directive|define
name|PCF_METRICS
value|( 1<< 2 )
end_define
begin_define
DECL|macro|PCF_BITMAPS
define|#
directive|define
name|PCF_BITMAPS
value|( 1<< 3 )
end_define
begin_define
DECL|macro|PCF_INK_METRICS
define|#
directive|define
name|PCF_INK_METRICS
value|( 1<< 4 )
end_define
begin_define
DECL|macro|PCF_BDF_ENCODINGS
define|#
directive|define
name|PCF_BDF_ENCODINGS
value|( 1<< 5 )
end_define
begin_define
DECL|macro|PCF_SWIDTHS
define|#
directive|define
name|PCF_SWIDTHS
value|( 1<< 6 )
end_define
begin_define
DECL|macro|PCF_GLYPH_NAMES
define|#
directive|define
name|PCF_GLYPH_NAMES
value|( 1<< 7 )
end_define
begin_define
DECL|macro|PCF_BDF_ACCELERATORS
define|#
directive|define
name|PCF_BDF_ACCELERATORS
value|( 1<< 8 )
end_define
begin_define
DECL|macro|GLYPHPADOPTIONS
define|#
directive|define
name|GLYPHPADOPTIONS
value|4
end_define
begin_comment
DECL|macro|GLYPHPADOPTIONS
comment|/* I'm not sure about this */
end_comment
begin_macro
name|FT_LOCAL
argument_list|(
argument|FT_Error
argument_list|)
end_macro
begin_expr_stmt
name|pcf_load_font
argument_list|(
name|FT_Stream
argument_list|,
name|PCF_Face
argument_list|)
expr_stmt|;
end_expr_stmt
begin_macro
name|FT_END_HEADER
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* __PCF_H__ */
end_comment
begin_comment
comment|/* END */
end_comment
end_unit
