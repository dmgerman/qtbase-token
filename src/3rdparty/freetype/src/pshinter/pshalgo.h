begin_unit
begin_comment
comment|/***************************************************************************/
end_comment
begin_comment
comment|/*                                                                         */
end_comment
begin_comment
comment|/*  pshalgo.h                                                              */
end_comment
begin_comment
comment|/*                                                                         */
end_comment
begin_comment
comment|/*    PostScript hinting algorithm (specification).                        */
end_comment
begin_comment
comment|/*                                                                         */
end_comment
begin_comment
comment|/*  Copyright 2001-2003, 2008, 2013 by                                     */
end_comment
begin_comment
comment|/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
end_comment
begin_comment
comment|/*                                                                         */
end_comment
begin_comment
comment|/*  This file is part of the FreeType project, and may only be used,       */
end_comment
begin_comment
comment|/*  modified, and distributed under the terms of the FreeType project      */
end_comment
begin_comment
comment|/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
end_comment
begin_comment
comment|/*  this file you indicate that you have read the license and              */
end_comment
begin_comment
comment|/*  understand and accept it fully.                                        */
end_comment
begin_comment
comment|/*                                                                         */
end_comment
begin_comment
comment|/***************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|__PSHALGO_H__
end_ifndef
begin_define
DECL|macro|__PSHALGO_H__
define|#
directive|define
name|__PSHALGO_H__
end_define
begin_include
include|#
directive|include
file|"pshrec.h"
end_include
begin_include
include|#
directive|include
file|"pshglob.h"
end_include
begin_macro
name|FT_BEGIN_HEADER
end_macro
begin_comment
comment|/* handle to Hint structure */
end_comment
begin_typedef
DECL|typedef|PSH_Hint
typedef|typedef
name|struct
name|PSH_HintRec_
modifier|*
name|PSH_Hint
typedef|;
end_typedef
begin_comment
comment|/* hint bit-flags */
end_comment
begin_typedef
DECL|enum|PSH_Hint_Flags_
typedef|typedef
enum|enum
name|PSH_Hint_Flags_
block|{
DECL|enumerator|PSH_HINT_GHOST
name|PSH_HINT_GHOST
init|=
name|PS_HINT_FLAG_GHOST
block|,
DECL|enumerator|PSH_HINT_BOTTOM
name|PSH_HINT_BOTTOM
init|=
name|PS_HINT_FLAG_BOTTOM
block|,
DECL|enumerator|PSH_HINT_ACTIVE
name|PSH_HINT_ACTIVE
init|=
literal|4
block|,
DECL|enumerator|PSH_HINT_FITTED
name|PSH_HINT_FITTED
init|=
literal|8
block|}
DECL|typedef|PSH_Hint_Flags
name|PSH_Hint_Flags
typedef|;
end_typedef
begin_define
DECL|macro|psh_hint_is_active
define|#
directive|define
name|psh_hint_is_active
parameter_list|(
name|x
parameter_list|)
value|( ( (x)->flags& PSH_HINT_ACTIVE ) != 0 )
end_define
begin_define
DECL|macro|psh_hint_is_ghost
define|#
directive|define
name|psh_hint_is_ghost
parameter_list|(
name|x
parameter_list|)
value|( ( (x)->flags& PSH_HINT_GHOST  ) != 0 )
end_define
begin_define
DECL|macro|psh_hint_is_fitted
define|#
directive|define
name|psh_hint_is_fitted
parameter_list|(
name|x
parameter_list|)
value|( ( (x)->flags& PSH_HINT_FITTED ) != 0 )
end_define
begin_define
DECL|macro|psh_hint_activate
define|#
directive|define
name|psh_hint_activate
parameter_list|(
name|x
parameter_list|)
value|(x)->flags |=  PSH_HINT_ACTIVE
end_define
begin_define
DECL|macro|psh_hint_deactivate
define|#
directive|define
name|psh_hint_deactivate
parameter_list|(
name|x
parameter_list|)
value|(x)->flags&= ~PSH_HINT_ACTIVE
end_define
begin_define
DECL|macro|psh_hint_set_fitted
define|#
directive|define
name|psh_hint_set_fitted
parameter_list|(
name|x
parameter_list|)
value|(x)->flags |=  PSH_HINT_FITTED
end_define
begin_comment
comment|/* hint structure */
end_comment
begin_typedef
DECL|struct|PSH_HintRec_
typedef|typedef
struct|struct
name|PSH_HintRec_
block|{
DECL|member|org_pos
name|FT_Int
name|org_pos
decl_stmt|;
DECL|member|org_len
name|FT_Int
name|org_len
decl_stmt|;
DECL|member|cur_pos
name|FT_Pos
name|cur_pos
decl_stmt|;
DECL|member|cur_len
name|FT_Pos
name|cur_len
decl_stmt|;
DECL|member|flags
name|FT_UInt
name|flags
decl_stmt|;
DECL|member|parent
name|PSH_Hint
name|parent
decl_stmt|;
DECL|member|order
name|FT_Int
name|order
decl_stmt|;
block|}
DECL|typedef|PSH_HintRec
name|PSH_HintRec
typedef|;
end_typedef
begin_comment
comment|/* this is an interpolation zone used for strong points;  */
end_comment
begin_comment
comment|/* weak points are interpolated according to their strong */
end_comment
begin_comment
comment|/* neighbours                                             */
end_comment
begin_typedef
DECL|struct|PSH_ZoneRec_
typedef|typedef
struct|struct
name|PSH_ZoneRec_
block|{
DECL|member|scale
name|FT_Fixed
name|scale
decl_stmt|;
DECL|member|delta
name|FT_Fixed
name|delta
decl_stmt|;
DECL|member|min
name|FT_Pos
name|min
decl_stmt|;
DECL|member|max
name|FT_Pos
name|max
decl_stmt|;
block|}
DECL|typedef|PSH_ZoneRec
DECL|typedef|PSH_Zone
name|PSH_ZoneRec
operator|,
typedef|*
name|PSH_Zone
typedef|;
end_typedef
begin_typedef
DECL|struct|PSH_Hint_TableRec_
typedef|typedef
struct|struct
name|PSH_Hint_TableRec_
block|{
DECL|member|max_hints
name|FT_UInt
name|max_hints
decl_stmt|;
DECL|member|num_hints
name|FT_UInt
name|num_hints
decl_stmt|;
DECL|member|hints
name|PSH_Hint
name|hints
decl_stmt|;
DECL|member|sort
name|PSH_Hint
modifier|*
name|sort
decl_stmt|;
DECL|member|sort_global
name|PSH_Hint
modifier|*
name|sort_global
decl_stmt|;
DECL|member|num_zones
name|FT_UInt
name|num_zones
decl_stmt|;
DECL|member|zones
name|PSH_ZoneRec
modifier|*
name|zones
decl_stmt|;
DECL|member|zone
name|PSH_Zone
name|zone
decl_stmt|;
DECL|member|hint_masks
name|PS_Mask_Table
name|hint_masks
decl_stmt|;
DECL|member|counter_masks
name|PS_Mask_Table
name|counter_masks
decl_stmt|;
block|}
DECL|typedef|PSH_Hint_TableRec
DECL|typedef|PSH_Hint_Table
name|PSH_Hint_TableRec
operator|,
typedef|*
name|PSH_Hint_Table
typedef|;
end_typedef
begin_typedef
DECL|typedef|PSH_Point
typedef|typedef
name|struct
name|PSH_PointRec_
modifier|*
name|PSH_Point
typedef|;
end_typedef
begin_typedef
DECL|typedef|PSH_Contour
typedef|typedef
name|struct
name|PSH_ContourRec_
modifier|*
name|PSH_Contour
typedef|;
end_typedef
begin_enum
enum|enum
block|{
DECL|enumerator|PSH_DIR_NONE
name|PSH_DIR_NONE
init|=
literal|4
block|,
DECL|enumerator|PSH_DIR_UP
name|PSH_DIR_UP
init|=
operator|-
literal|1
block|,
DECL|enumerator|PSH_DIR_DOWN
name|PSH_DIR_DOWN
init|=
literal|1
block|,
DECL|enumerator|PSH_DIR_LEFT
name|PSH_DIR_LEFT
init|=
operator|-
literal|2
block|,
DECL|enumerator|PSH_DIR_RIGHT
name|PSH_DIR_RIGHT
init|=
literal|2
block|}
enum|;
end_enum
begin_define
DECL|macro|PSH_DIR_HORIZONTAL
define|#
directive|define
name|PSH_DIR_HORIZONTAL
value|2
end_define
begin_define
DECL|macro|PSH_DIR_VERTICAL
define|#
directive|define
name|PSH_DIR_VERTICAL
value|1
end_define
begin_define
DECL|macro|PSH_DIR_COMPARE
define|#
directive|define
name|PSH_DIR_COMPARE
parameter_list|(
name|d1
parameter_list|,
name|d2
parameter_list|)
value|( (d1) == (d2) || (d1) == -(d2) )
end_define
begin_define
DECL|macro|PSH_DIR_IS_HORIZONTAL
define|#
directive|define
name|PSH_DIR_IS_HORIZONTAL
parameter_list|(
name|d
parameter_list|)
value|PSH_DIR_COMPARE( d, PSH_DIR_HORIZONTAL )
end_define
begin_define
DECL|macro|PSH_DIR_IS_VERTICAL
define|#
directive|define
name|PSH_DIR_IS_VERTICAL
parameter_list|(
name|d
parameter_list|)
value|PSH_DIR_COMPARE( d, PSH_DIR_VERTICAL )
end_define
begin_comment
comment|/* the following bit-flags are computed once by the glyph */
end_comment
begin_comment
comment|/* analyzer, for both dimensions                          */
end_comment
begin_enum
enum|enum
block|{
DECL|enumerator|PSH_POINT_OFF
name|PSH_POINT_OFF
init|=
literal|1
block|,
comment|/* point is off the curve */
DECL|enumerator|PSH_POINT_SMOOTH
name|PSH_POINT_SMOOTH
init|=
literal|2
block|,
comment|/* point is smooth        */
DECL|enumerator|PSH_POINT_INFLEX
name|PSH_POINT_INFLEX
init|=
literal|4
comment|/* point is inflection    */
block|}
enum|;
end_enum
begin_define
DECL|macro|psh_point_is_smooth
define|#
directive|define
name|psh_point_is_smooth
parameter_list|(
name|p
parameter_list|)
value|( (p)->flags& PSH_POINT_SMOOTH )
end_define
begin_define
DECL|macro|psh_point_is_off
define|#
directive|define
name|psh_point_is_off
parameter_list|(
name|p
parameter_list|)
value|( (p)->flags& PSH_POINT_OFF    )
end_define
begin_define
DECL|macro|psh_point_is_inflex
define|#
directive|define
name|psh_point_is_inflex
parameter_list|(
name|p
parameter_list|)
value|( (p)->flags& PSH_POINT_INFLEX )
end_define
begin_define
DECL|macro|psh_point_set_smooth
define|#
directive|define
name|psh_point_set_smooth
parameter_list|(
name|p
parameter_list|)
value|(p)->flags |= PSH_POINT_SMOOTH
end_define
begin_define
DECL|macro|psh_point_set_off
define|#
directive|define
name|psh_point_set_off
parameter_list|(
name|p
parameter_list|)
value|(p)->flags |= PSH_POINT_OFF
end_define
begin_define
DECL|macro|psh_point_set_inflex
define|#
directive|define
name|psh_point_set_inflex
parameter_list|(
name|p
parameter_list|)
value|(p)->flags |= PSH_POINT_INFLEX
end_define
begin_comment
comment|/* the following bit-flags are re-computed for each dimension */
end_comment
begin_enum
enum|enum
block|{
DECL|enumerator|PSH_POINT_STRONG
name|PSH_POINT_STRONG
init|=
literal|16
block|,
comment|/* point is strong                           */
DECL|enumerator|PSH_POINT_FITTED
name|PSH_POINT_FITTED
init|=
literal|32
block|,
comment|/* point is already fitted                   */
DECL|enumerator|PSH_POINT_EXTREMUM
name|PSH_POINT_EXTREMUM
init|=
literal|64
block|,
comment|/* point is local extremum                   */
DECL|enumerator|PSH_POINT_POSITIVE
name|PSH_POINT_POSITIVE
init|=
literal|128
block|,
comment|/* extremum has positive contour flow        */
DECL|enumerator|PSH_POINT_NEGATIVE
name|PSH_POINT_NEGATIVE
init|=
literal|256
block|,
comment|/* extremum has negative contour flow        */
DECL|enumerator|PSH_POINT_EDGE_MIN
name|PSH_POINT_EDGE_MIN
init|=
literal|512
block|,
comment|/* point is aligned to left/bottom stem edge */
DECL|enumerator|PSH_POINT_EDGE_MAX
name|PSH_POINT_EDGE_MAX
init|=
literal|1024
comment|/* point is aligned to top/right stem edge   */
block|}
enum|;
end_enum
begin_define
DECL|macro|psh_point_is_strong
define|#
directive|define
name|psh_point_is_strong
parameter_list|(
name|p
parameter_list|)
value|( (p)->flags2& PSH_POINT_STRONG )
end_define
begin_define
DECL|macro|psh_point_is_fitted
define|#
directive|define
name|psh_point_is_fitted
parameter_list|(
name|p
parameter_list|)
value|( (p)->flags2& PSH_POINT_FITTED )
end_define
begin_define
DECL|macro|psh_point_is_extremum
define|#
directive|define
name|psh_point_is_extremum
parameter_list|(
name|p
parameter_list|)
value|( (p)->flags2& PSH_POINT_EXTREMUM )
end_define
begin_define
DECL|macro|psh_point_is_positive
define|#
directive|define
name|psh_point_is_positive
parameter_list|(
name|p
parameter_list|)
value|( (p)->flags2& PSH_POINT_POSITIVE )
end_define
begin_define
DECL|macro|psh_point_is_negative
define|#
directive|define
name|psh_point_is_negative
parameter_list|(
name|p
parameter_list|)
value|( (p)->flags2& PSH_POINT_NEGATIVE )
end_define
begin_define
DECL|macro|psh_point_is_edge_min
define|#
directive|define
name|psh_point_is_edge_min
parameter_list|(
name|p
parameter_list|)
value|( (p)->flags2& PSH_POINT_EDGE_MIN )
end_define
begin_define
DECL|macro|psh_point_is_edge_max
define|#
directive|define
name|psh_point_is_edge_max
parameter_list|(
name|p
parameter_list|)
value|( (p)->flags2& PSH_POINT_EDGE_MAX )
end_define
begin_define
DECL|macro|psh_point_set_strong
define|#
directive|define
name|psh_point_set_strong
parameter_list|(
name|p
parameter_list|)
value|(p)->flags2 |= PSH_POINT_STRONG
end_define
begin_define
DECL|macro|psh_point_set_fitted
define|#
directive|define
name|psh_point_set_fitted
parameter_list|(
name|p
parameter_list|)
value|(p)->flags2 |= PSH_POINT_FITTED
end_define
begin_define
DECL|macro|psh_point_set_extremum
define|#
directive|define
name|psh_point_set_extremum
parameter_list|(
name|p
parameter_list|)
value|(p)->flags2 |= PSH_POINT_EXTREMUM
end_define
begin_define
DECL|macro|psh_point_set_positive
define|#
directive|define
name|psh_point_set_positive
parameter_list|(
name|p
parameter_list|)
value|(p)->flags2 |= PSH_POINT_POSITIVE
end_define
begin_define
DECL|macro|psh_point_set_negative
define|#
directive|define
name|psh_point_set_negative
parameter_list|(
name|p
parameter_list|)
value|(p)->flags2 |= PSH_POINT_NEGATIVE
end_define
begin_define
DECL|macro|psh_point_set_edge_min
define|#
directive|define
name|psh_point_set_edge_min
parameter_list|(
name|p
parameter_list|)
value|(p)->flags2 |= PSH_POINT_EDGE_MIN
end_define
begin_define
DECL|macro|psh_point_set_edge_max
define|#
directive|define
name|psh_point_set_edge_max
parameter_list|(
name|p
parameter_list|)
value|(p)->flags2 |= PSH_POINT_EDGE_MAX
end_define
begin_typedef
DECL|struct|PSH_PointRec_
typedef|typedef
struct|struct
name|PSH_PointRec_
block|{
DECL|member|prev
name|PSH_Point
name|prev
decl_stmt|;
DECL|member|next
name|PSH_Point
name|next
decl_stmt|;
DECL|member|contour
name|PSH_Contour
name|contour
decl_stmt|;
DECL|member|flags
name|FT_UInt
name|flags
decl_stmt|;
DECL|member|flags2
name|FT_UInt
name|flags2
decl_stmt|;
DECL|member|dir_in
name|FT_Char
name|dir_in
decl_stmt|;
DECL|member|dir_out
name|FT_Char
name|dir_out
decl_stmt|;
DECL|member|hint
name|PSH_Hint
name|hint
decl_stmt|;
DECL|member|org_u
name|FT_Pos
name|org_u
decl_stmt|;
DECL|member|org_v
name|FT_Pos
name|org_v
decl_stmt|;
DECL|member|cur_u
name|FT_Pos
name|cur_u
decl_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_HINTER
DECL|member|org_x
name|FT_Pos
name|org_x
decl_stmt|;
DECL|member|cur_x
name|FT_Pos
name|cur_x
decl_stmt|;
DECL|member|org_y
name|FT_Pos
name|org_y
decl_stmt|;
DECL|member|cur_y
name|FT_Pos
name|cur_y
decl_stmt|;
DECL|member|flags_x
name|FT_UInt
name|flags_x
decl_stmt|;
DECL|member|flags_y
name|FT_UInt
name|flags_y
decl_stmt|;
endif|#
directive|endif
block|}
DECL|typedef|PSH_PointRec
name|PSH_PointRec
typedef|;
end_typedef
begin_typedef
DECL|struct|PSH_ContourRec_
typedef|typedef
struct|struct
name|PSH_ContourRec_
block|{
DECL|member|start
name|PSH_Point
name|start
decl_stmt|;
DECL|member|count
name|FT_UInt
name|count
decl_stmt|;
block|}
DECL|typedef|PSH_ContourRec
name|PSH_ContourRec
typedef|;
end_typedef
begin_typedef
DECL|struct|PSH_GlyphRec_
typedef|typedef
struct|struct
name|PSH_GlyphRec_
block|{
DECL|member|num_points
name|FT_UInt
name|num_points
decl_stmt|;
DECL|member|num_contours
name|FT_UInt
name|num_contours
decl_stmt|;
DECL|member|points
name|PSH_Point
name|points
decl_stmt|;
DECL|member|contours
name|PSH_Contour
name|contours
decl_stmt|;
DECL|member|memory
name|FT_Memory
name|memory
decl_stmt|;
DECL|member|outline
name|FT_Outline
modifier|*
name|outline
decl_stmt|;
DECL|member|globals
name|PSH_Globals
name|globals
decl_stmt|;
DECL|member|hint_tables
name|PSH_Hint_TableRec
name|hint_tables
index|[
literal|2
index|]
decl_stmt|;
DECL|member|vertical
name|FT_Bool
name|vertical
decl_stmt|;
DECL|member|major_dir
name|FT_Int
name|major_dir
decl_stmt|;
DECL|member|minor_dir
name|FT_Int
name|minor_dir
decl_stmt|;
DECL|member|do_horz_hints
name|FT_Bool
name|do_horz_hints
decl_stmt|;
DECL|member|do_vert_hints
name|FT_Bool
name|do_vert_hints
decl_stmt|;
DECL|member|do_horz_snapping
name|FT_Bool
name|do_horz_snapping
decl_stmt|;
DECL|member|do_vert_snapping
name|FT_Bool
name|do_vert_snapping
decl_stmt|;
DECL|member|do_stem_adjust
name|FT_Bool
name|do_stem_adjust
decl_stmt|;
block|}
DECL|typedef|PSH_GlyphRec
DECL|typedef|PSH_Glyph
name|PSH_GlyphRec
operator|,
typedef|*
name|PSH_Glyph
typedef|;
end_typedef
begin_ifdef
ifdef|#
directive|ifdef
name|DEBUG_HINTER
end_ifdef
begin_decl_stmt
specifier|extern
name|PSH_Hint_Table
name|ps_debug_hint_table
decl_stmt|;
end_decl_stmt
begin_typedef
typedef|typedef
name|void
function_decl|(
DECL|typedef|PSH_HintFunc
modifier|*
name|PSH_HintFunc
function_decl|)
parameter_list|(
name|PSH_Hint
name|hint
parameter_list|,
name|FT_Bool
name|vertical
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
specifier|extern
name|PSH_HintFunc
name|ps_debug_hint_func
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|PSH_Glyph
name|ps_debug_glyph
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
specifier|extern
name|FT_Error
name|ps_hints_apply
parameter_list|(
name|PS_Hints
name|ps_hints
parameter_list|,
name|FT_Outline
modifier|*
name|outline
parameter_list|,
name|PSH_Globals
name|globals
parameter_list|,
name|FT_Render_Mode
name|hint_mode
parameter_list|)
function_decl|;
end_function_decl
begin_macro
name|FT_END_HEADER
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* __PSHALGO_H__ */
end_comment
begin_comment
comment|/* END */
end_comment
end_unit
