begin_unit
begin_comment
comment|/***************************************************************************/
end_comment
begin_comment
comment|/*                                                                         */
end_comment
begin_comment
comment|/*  aftypes.h                                                              */
end_comment
begin_comment
comment|/*                                                                         */
end_comment
begin_comment
comment|/*    Auto-fitter types (specification only).                              */
end_comment
begin_comment
comment|/*                                                                         */
end_comment
begin_comment
comment|/*  Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009 by                  */
end_comment
begin_comment
comment|/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
end_comment
begin_comment
comment|/*                                                                         */
end_comment
begin_comment
comment|/*  This file is part of the FreeType project, and may only be used,       */
end_comment
begin_comment
comment|/*  modified, and distributed under the terms of the FreeType project      */
end_comment
begin_comment
comment|/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
end_comment
begin_comment
comment|/*  this file you indicate that you have read the license and              */
end_comment
begin_comment
comment|/*  understand and accept it fully.                                        */
end_comment
begin_comment
comment|/*                                                                         */
end_comment
begin_comment
comment|/***************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************    *    *  The auto-fitter is a complete rewrite of the old auto-hinter.    *  Its main feature is the ability to differentiate between different    *  scripts in order to apply language-specific rules.    *    *  The code has also been compartmentized into several entities that    *  should make algorithmic experimentation easier than with the old    *  code.    *    *  Finally, we get rid of the Catharon license, since this code is    *  released under the FreeType one.    *    *************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|__AFTYPES_H__
end_ifndef
begin_define
DECL|macro|__AFTYPES_H__
define|#
directive|define
name|__AFTYPES_H__
end_define
begin_include
include|#
directive|include
file|<ft2build.h>
end_include
begin_include
include|#
directive|include
include|FT_FREETYPE_H
end_include
begin_include
include|#
directive|include
include|FT_OUTLINE_H
end_include
begin_include
include|#
directive|include
include|FT_INTERNAL_OBJECTS_H
end_include
begin_include
include|#
directive|include
include|FT_INTERNAL_DEBUG_H
end_include
begin_decl_stmt
name|FT_BEGIN_HEADER
comment|/*************************************************************************/
comment|/*************************************************************************/
comment|/*****                                                               *****/
comment|/*****                    D E B U G G I N G                          *****/
comment|/*****                                                               *****/
comment|/*************************************************************************/
comment|/*************************************************************************/
DECL|macro|xxAF_USE_WARPER
define|#
directive|define
name|xxAF_USE_WARPER
comment|/* only define to use warp hinting */
DECL|macro|xxAF_DEBUG
define|#
directive|define
name|xxAF_DEBUG
ifdef|#
directive|ifdef
name|AF_DEBUG
include|#
directive|include
include|FT_CONFIG_STANDARD_LIBRARY_H
DECL|macro|AF_LOG
define|#
directive|define
name|AF_LOG
parameter_list|(
name|x
parameter_list|)
value|do { if ( _af_debug ) printf x; } while ( 0 )
specifier|extern
name|int
name|_af_debug
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|_af_debug_disable_horz_hints
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|_af_debug_disable_vert_hints
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|_af_debug_disable_blue_hints
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|void
modifier|*
name|_af_debug_hints
decl_stmt|;
end_decl_stmt
begin_else
else|#
directive|else
end_else
begin_comment
comment|/* !AF_DEBUG */
end_comment
begin_define
define|#
directive|define
name|AF_LOG
parameter_list|(
name|x
parameter_list|)
value|do { } while ( 0 )
end_define
begin_comment
comment|/* nothing */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* !AF_DEBUG */
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*****                 U T I L I T Y   S T U F F                     *****/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_typedef
DECL|struct|AF_WidthRec_
typedef|typedef
struct|struct
name|AF_WidthRec_
block|{
DECL|member|org
name|FT_Pos
name|org
decl_stmt|;
comment|/* original position/width in font units              */
DECL|member|cur
name|FT_Pos
name|cur
decl_stmt|;
comment|/* current/scaled position/width in device sub-pixels */
DECL|member|fit
name|FT_Pos
name|fit
decl_stmt|;
comment|/* current/fitted position/width in device sub-pixels */
block|}
DECL|typedef|AF_WidthRec
DECL|typedef|AF_Width
name|AF_WidthRec
operator|,
typedef|*
name|AF_Width
typedef|;
end_typedef
begin_macro
name|FT_LOCAL
argument_list|(
argument|void
argument_list|)
end_macro
begin_macro
name|af_sort_pos
argument_list|(
argument|FT_UInt  count
argument_list|,
argument|FT_Pos*  table
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|FT_LOCAL
argument_list|(
argument|void
argument_list|)
end_macro
begin_macro
name|af_sort_widths
argument_list|(
argument|FT_UInt   count
argument_list|,
argument|AF_Width  widths
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*****                   A N G L E   T Y P E S                       *****/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*    *  The auto-fitter doesn't need a very high angular accuracy;    *  this allows us to speed up some computations considerably with a    *  light Cordic algorithm (see afangles.c).    */
end_comment
begin_typedef
DECL|typedef|AF_Angle
typedef|typedef
name|FT_Int
name|AF_Angle
typedef|;
end_typedef
begin_define
DECL|macro|AF_ANGLE_PI
define|#
directive|define
name|AF_ANGLE_PI
value|256
end_define
begin_define
DECL|macro|AF_ANGLE_2PI
define|#
directive|define
name|AF_ANGLE_2PI
value|( AF_ANGLE_PI * 2 )
end_define
begin_define
DECL|macro|AF_ANGLE_PI2
define|#
directive|define
name|AF_ANGLE_PI2
value|( AF_ANGLE_PI / 2 )
end_define
begin_define
DECL|macro|AF_ANGLE_PI4
define|#
directive|define
name|AF_ANGLE_PI4
value|( AF_ANGLE_PI / 4 )
end_define
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
comment|/*    *  compute the angle of a given 2-D vector    */
end_comment
begin_comment
unit|FT_LOCAL( AF_Angle )   af_angle_atan( FT_Pos  dx,                  FT_Pos  dy );
comment|/*    *  compute `angle2 - angle1'; the result is always within    *  the range [-AF_ANGLE_PI .. AF_ANGLE_PI - 1]    */
end_comment
begin_endif
unit|FT_LOCAL( AF_Angle )   af_angle_diff( AF_Angle  angle1,                  AF_Angle  angle2 );
endif|#
directive|endif
end_endif
begin_comment
comment|/* 0 */
end_comment
begin_define
DECL|macro|AF_ANGLE_DIFF
define|#
directive|define
name|AF_ANGLE_DIFF
parameter_list|(
name|result
parameter_list|,
name|angle1
parameter_list|,
name|angle2
parameter_list|)
define|\
value|FT_BEGIN_STMNT                                \     AF_Angle  _delta = (angle2) - (angle1);     \                                                 \                                                 \     _delta %= AF_ANGLE_2PI;                     \     if ( _delta< 0 )                           \       _delta += AF_ANGLE_2PI;                   \                                                 \     if ( _delta> AF_ANGLE_PI )                 \       _delta -= AF_ANGLE_2PI;                   \                                                 \     result = _delta;                            \   FT_END_STMNT
end_define
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*****                    O U T L I N E S                            *****/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*  opaque handle to glyph-specific hints -- see `afhints.h' for more    *  details    */
end_comment
begin_typedef
DECL|typedef|AF_GlyphHints
typedef|typedef
name|struct
name|AF_GlyphHintsRec_
modifier|*
name|AF_GlyphHints
typedef|;
end_typedef
begin_comment
comment|/*  This structure is used to model an input glyph outline to    *  the auto-hinter.  The latter will set the `hints' field    *  depending on the glyph's script.    */
end_comment
begin_typedef
DECL|struct|AF_OutlineRec_
typedef|typedef
struct|struct
name|AF_OutlineRec_
block|{
DECL|member|face
name|FT_Face
name|face
decl_stmt|;
DECL|member|outline
name|FT_Outline
name|outline
decl_stmt|;
DECL|member|outline_resolution
name|FT_UInt
name|outline_resolution
decl_stmt|;
DECL|member|advance
name|FT_Int
name|advance
decl_stmt|;
DECL|member|metrics_resolution
name|FT_UInt
name|metrics_resolution
decl_stmt|;
DECL|member|hints
name|AF_GlyphHints
name|hints
decl_stmt|;
block|}
DECL|typedef|AF_OutlineRec
name|AF_OutlineRec
typedef|;
end_typedef
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*****                       S C A L E R S                           *****/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*    *  A scaler models the target pixel device that will receive the    *  auto-hinted glyph image.    */
end_comment
begin_typedef
DECL|enum|AF_ScalerFlags_
typedef|typedef
enum|enum
name|AF_ScalerFlags_
block|{
DECL|enumerator|AF_SCALER_FLAG_NO_HORIZONTAL
name|AF_SCALER_FLAG_NO_HORIZONTAL
init|=
literal|1
block|,
comment|/* disable horizontal hinting */
DECL|enumerator|AF_SCALER_FLAG_NO_VERTICAL
name|AF_SCALER_FLAG_NO_VERTICAL
init|=
literal|2
block|,
comment|/* disable vertical hinting   */
DECL|enumerator|AF_SCALER_FLAG_NO_ADVANCE
name|AF_SCALER_FLAG_NO_ADVANCE
init|=
literal|4
comment|/* disable advance hinting    */
block|}
DECL|typedef|AF_ScalerFlags
name|AF_ScalerFlags
typedef|;
end_typedef
begin_typedef
DECL|struct|AF_ScalerRec_
typedef|typedef
struct|struct
name|AF_ScalerRec_
block|{
DECL|member|face
name|FT_Face
name|face
decl_stmt|;
comment|/* source font face                        */
DECL|member|x_scale
name|FT_Fixed
name|x_scale
decl_stmt|;
comment|/* from font units to 1/64th device pixels */
DECL|member|y_scale
name|FT_Fixed
name|y_scale
decl_stmt|;
comment|/* from font units to 1/64th device pixels */
DECL|member|x_delta
name|FT_Pos
name|x_delta
decl_stmt|;
comment|/* in 1/64th device pixels                 */
DECL|member|y_delta
name|FT_Pos
name|y_delta
decl_stmt|;
comment|/* in 1/64th device pixels                 */
DECL|member|render_mode
name|FT_Render_Mode
name|render_mode
decl_stmt|;
comment|/* monochrome, anti-aliased, LCD, etc.     */
DECL|member|flags
name|FT_UInt32
name|flags
decl_stmt|;
comment|/* additional control flags, see above     */
block|}
DECL|typedef|AF_ScalerRec
DECL|typedef|AF_Scaler
name|AF_ScalerRec
operator|,
typedef|*
name|AF_Scaler
typedef|;
end_typedef
begin_define
DECL|macro|AF_SCALER_EQUAL_SCALES
define|#
directive|define
name|AF_SCALER_EQUAL_SCALES
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
define|\
value|( (a)->x_scale == (b)->x_scale&& \             (a)->y_scale == (b)->y_scale&& \             (a)->x_delta == (b)->x_delta&& \             (a)->y_delta == (b)->y_delta )
end_define
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*****                       S C R I P T S                           *****/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*    *  The list of know scripts.  Each different script corresponds to the    *  following information:    *    *   - A set of Unicode ranges to test whether the face supports the    *     script.    *    *   - A specific global analyzer that will compute global metrics    *     specific to the script.    *    *   - A specific glyph analyzer that will compute segments and    *     edges for each glyph covered by the script.    *    *   - A specific grid-fitting algorithm that will distort the    *     scaled glyph outline according to the results of the glyph    *     analyzer.    *    *  Note that a given analyzer and/or grid-fitting algorithm can be    *  used by more than one script.    */
end_comment
begin_typedef
DECL|enum|AF_Script_
typedef|typedef
enum|enum
name|AF_Script_
block|{
DECL|enumerator|AF_SCRIPT_NONE
name|AF_SCRIPT_NONE
init|=
literal|0
block|,
DECL|enumerator|AF_SCRIPT_LATIN
name|AF_SCRIPT_LATIN
init|=
literal|1
block|,
DECL|enumerator|AF_SCRIPT_CJK
name|AF_SCRIPT_CJK
init|=
literal|2
block|,
DECL|enumerator|AF_SCRIPT_INDIC
name|AF_SCRIPT_INDIC
init|=
literal|3
block|,
ifdef|#
directive|ifdef
name|FT_OPTION_AUTOFIT2
DECL|enumerator|AF_SCRIPT_LATIN2
name|AF_SCRIPT_LATIN2
block|,
endif|#
directive|endif
comment|/* add new scripts here.  Don't forget to update the list in */
comment|/* `afglobal.c'.                                             */
DECL|enumerator|AF_SCRIPT_MAX
name|AF_SCRIPT_MAX
comment|/* do not remove */
block|}
DECL|typedef|AF_Script
name|AF_Script
typedef|;
end_typedef
begin_typedef
DECL|typedef|AF_ScriptClass
typedef|typedef
name|struct
name|AF_ScriptClassRec_
specifier|const
modifier|*
name|AF_ScriptClass
typedef|;
end_typedef
begin_typedef
DECL|struct|AF_ScriptMetricsRec_
typedef|typedef
struct|struct
name|AF_ScriptMetricsRec_
block|{
DECL|member|clazz
name|AF_ScriptClass
name|clazz
decl_stmt|;
DECL|member|scaler
name|AF_ScalerRec
name|scaler
decl_stmt|;
DECL|member|digits_have_same_width
name|FT_Bool
name|digits_have_same_width
decl_stmt|;
block|}
DECL|typedef|AF_ScriptMetricsRec
DECL|typedef|AF_ScriptMetrics
name|AF_ScriptMetricsRec
operator|,
typedef|*
name|AF_ScriptMetrics
typedef|;
end_typedef
begin_comment
comment|/*  This function parses an FT_Face to compute global metrics for    *  a specific script.    */
end_comment
begin_typedef
typedef|typedef
name|FT_Error
function_decl|(
DECL|typedef|AF_Script_InitMetricsFunc
modifier|*
name|AF_Script_InitMetricsFunc
function_decl|)
parameter_list|(
name|AF_ScriptMetrics
name|metrics
parameter_list|,
name|FT_Face
name|face
parameter_list|)
function_decl|;
end_typedef
begin_typedef
typedef|typedef
name|void
function_decl|(
DECL|typedef|AF_Script_ScaleMetricsFunc
modifier|*
name|AF_Script_ScaleMetricsFunc
function_decl|)
parameter_list|(
name|AF_ScriptMetrics
name|metrics
parameter_list|,
name|AF_Scaler
name|scaler
parameter_list|)
function_decl|;
end_typedef
begin_typedef
typedef|typedef
name|void
function_decl|(
DECL|typedef|AF_Script_DoneMetricsFunc
modifier|*
name|AF_Script_DoneMetricsFunc
function_decl|)
parameter_list|(
name|AF_ScriptMetrics
name|metrics
parameter_list|)
function_decl|;
end_typedef
begin_typedef
typedef|typedef
name|FT_Error
function_decl|(
DECL|typedef|AF_Script_InitHintsFunc
modifier|*
name|AF_Script_InitHintsFunc
function_decl|)
parameter_list|(
name|AF_GlyphHints
name|hints
parameter_list|,
name|AF_ScriptMetrics
name|metrics
parameter_list|)
function_decl|;
end_typedef
begin_typedef
typedef|typedef
name|void
function_decl|(
DECL|typedef|AF_Script_ApplyHintsFunc
modifier|*
name|AF_Script_ApplyHintsFunc
function_decl|)
parameter_list|(
name|AF_GlyphHints
name|hints
parameter_list|,
name|FT_Outline
modifier|*
name|outline
parameter_list|,
name|AF_ScriptMetrics
name|metrics
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|struct|AF_Script_UniRangeRec_
typedef|typedef
struct|struct
name|AF_Script_UniRangeRec_
block|{
DECL|member|first
name|FT_UInt32
name|first
decl_stmt|;
DECL|member|last
name|FT_UInt32
name|last
decl_stmt|;
block|}
DECL|typedef|AF_Script_UniRangeRec
name|AF_Script_UniRangeRec
typedef|;
end_typedef
begin_define
DECL|macro|AF_UNIRANGE_REC
define|#
directive|define
name|AF_UNIRANGE_REC
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|{ (FT_UInt32)(a), (FT_UInt32)(b) }
end_define
begin_typedef
DECL|typedef|AF_Script_UniRange
typedef|typedef
specifier|const
name|AF_Script_UniRangeRec
modifier|*
name|AF_Script_UniRange
typedef|;
end_typedef
begin_typedef
DECL|struct|AF_ScriptClassRec_
typedef|typedef
struct|struct
name|AF_ScriptClassRec_
block|{
DECL|member|script
name|AF_Script
name|script
decl_stmt|;
DECL|member|script_uni_ranges
name|AF_Script_UniRange
name|script_uni_ranges
decl_stmt|;
comment|/* last must be { 0, 0 } */
DECL|member|script_metrics_size
name|FT_Offset
name|script_metrics_size
decl_stmt|;
DECL|member|script_metrics_init
name|AF_Script_InitMetricsFunc
name|script_metrics_init
decl_stmt|;
DECL|member|script_metrics_scale
name|AF_Script_ScaleMetricsFunc
name|script_metrics_scale
decl_stmt|;
DECL|member|script_metrics_done
name|AF_Script_DoneMetricsFunc
name|script_metrics_done
decl_stmt|;
DECL|member|script_hints_init
name|AF_Script_InitHintsFunc
name|script_hints_init
decl_stmt|;
DECL|member|script_hints_apply
name|AF_Script_ApplyHintsFunc
name|script_hints_apply
decl_stmt|;
block|}
DECL|typedef|AF_ScriptClassRec
name|AF_ScriptClassRec
typedef|;
end_typedef
begin_comment
comment|/* Declare and define vtables for classes */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|FT_CONFIG_OPTION_PIC
end_ifndef
begin_define
DECL|macro|AF_DECLARE_SCRIPT_CLASS
define|#
directive|define
name|AF_DECLARE_SCRIPT_CLASS
parameter_list|(
name|script_class
parameter_list|)
define|\
value|FT_CALLBACK_TABLE const AF_ScriptClassRec                                  \   script_class;
end_define
begin_define
DECL|macro|AF_DEFINE_SCRIPT_CLASS
define|#
directive|define
name|AF_DEFINE_SCRIPT_CLASS
parameter_list|(
name|script_class
parameter_list|,
name|script_
parameter_list|,
name|ranges
parameter_list|,
name|m_size
parameter_list|,        \
name|m_init
parameter_list|,
name|m_scale
parameter_list|,
name|m_done
parameter_list|,
name|h_init
parameter_list|,
name|h_apply
parameter_list|)
define|\
value|FT_CALLBACK_TABLE_DEF const AF_ScriptClassRec                              \   script_class =                                                             \   {                                                                          \     script_,                                                                 \     ranges,                                                                  \                                                                              \     m_size,                                                                  \                                                                              \     m_init,                                                                  \     m_scale,                                                                 \     m_done,                                                                  \                                                                              \     h_init,                                                                  \     h_apply                                                                  \   };
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|AF_DECLARE_SCRIPT_CLASS
define|#
directive|define
name|AF_DECLARE_SCRIPT_CLASS
parameter_list|(
name|script_class
parameter_list|)
define|\
value|FT_LOCAL(void)                                                             \   FT_Init_Class_##script_class(AF_ScriptClassRec* ac);
end_define
begin_define
DECL|macro|AF_DEFINE_SCRIPT_CLASS
define|#
directive|define
name|AF_DEFINE_SCRIPT_CLASS
parameter_list|(
name|script_class
parameter_list|,
name|script_
parameter_list|,
name|ranges
parameter_list|,
name|m_size
parameter_list|,        \
name|m_init
parameter_list|,
name|m_scale
parameter_list|,
name|m_done
parameter_list|,
name|h_init
parameter_list|,
name|h_apply
parameter_list|)
define|\
value|FT_LOCAL_DEF(void)                                                         \   FT_Init_Class_##script_class(AF_ScriptClassRec* ac)                        \   {                                                                          \     ac->script                = script_;                                     \     ac->script_uni_ranges     = ranges;                                      \                                                                              \     ac->script_metrics_size   = m_size;                                      \                                                                              \     ac->script_metrics_init   = m_init;                                      \     ac->script_metrics_scale  = m_scale;                                     \     ac->script_metrics_done   = m_done;                                      \                                                                              \     ac->script_hints_init     = h_init;                                      \     ac->script_hints_apply    = h_apply;                                     \   }
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* */
end_comment
begin_macro
name|FT_END_HEADER
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* __AFTYPES_H__ */
end_comment
begin_comment
comment|/* END */
end_comment
end_unit
