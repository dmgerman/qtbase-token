begin_unit
begin_comment
comment|/***************************************************************************/
end_comment
begin_comment
comment|/*                                                                         */
end_comment
begin_comment
comment|/*  psaux.h                                                                */
end_comment
begin_comment
comment|/*                                                                         */
end_comment
begin_comment
comment|/*    Auxiliary functions and data structures related to PostScript fonts  */
end_comment
begin_comment
comment|/*    (specification).                                                     */
end_comment
begin_comment
comment|/*                                                                         */
end_comment
begin_comment
comment|/*  Copyright 1996-2015 by                                                 */
end_comment
begin_comment
comment|/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
end_comment
begin_comment
comment|/*                                                                         */
end_comment
begin_comment
comment|/*  This file is part of the FreeType project, and may only be used,       */
end_comment
begin_comment
comment|/*  modified, and distributed under the terms of the FreeType project      */
end_comment
begin_comment
comment|/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
end_comment
begin_comment
comment|/*  this file you indicate that you have read the license and              */
end_comment
begin_comment
comment|/*  understand and accept it fully.                                        */
end_comment
begin_comment
comment|/*                                                                         */
end_comment
begin_comment
comment|/***************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|__PSAUX_H__
end_ifndef
begin_define
DECL|macro|__PSAUX_H__
define|#
directive|define
name|__PSAUX_H__
end_define
begin_include
include|#
directive|include
file|<ft2build.h>
end_include
begin_include
include|#
directive|include
include|FT_INTERNAL_OBJECTS_H
end_include
begin_include
include|#
directive|include
include|FT_INTERNAL_TYPE1_TYPES_H
end_include
begin_include
include|#
directive|include
include|FT_SERVICE_POSTSCRIPT_CMAPS_H
end_include
begin_macro
name|FT_BEGIN_HEADER
end_macro
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*****                             T1_TABLE                          *****/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_typedef
DECL|typedef|PS_Table
typedef|typedef
name|struct
name|PS_TableRec_
modifier|*
name|PS_Table
typedef|;
end_typedef
begin_typedef
DECL|typedef|PS_Table_Funcs
typedef|typedef
specifier|const
name|struct
name|PS_Table_FuncsRec_
modifier|*
name|PS_Table_Funcs
typedef|;
end_typedef
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*<Struct>                                                              */
end_comment
begin_comment
comment|/*    PS_Table_FuncsRec                                                  */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*<Description>                                                         */
end_comment
begin_comment
comment|/*    A set of function pointers to manage PS_Table objects.             */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*<Fields>                                                              */
end_comment
begin_comment
comment|/*    table_init    :: Used to initialize a table.                       */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    table_done    :: Finalizes resp. destroy a given table.            */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    table_add     :: Adds a new object to a table.                     */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    table_release :: Releases table data, then finalizes it.           */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_typedef
DECL|struct|PS_Table_FuncsRec_
typedef|typedef
struct|struct
name|PS_Table_FuncsRec_
block|{
name|FT_Error
function_decl|(
DECL|member|init
modifier|*
name|init
function_decl|)
parameter_list|(
name|PS_Table
name|table
parameter_list|,
name|FT_Int
name|count
parameter_list|,
name|FT_Memory
name|memory
parameter_list|)
function_decl|;
name|void
function_decl|(
DECL|member|done
modifier|*
name|done
function_decl|)
parameter_list|(
name|PS_Table
name|table
parameter_list|)
function_decl|;
name|FT_Error
function_decl|(
DECL|member|add
modifier|*
name|add
function_decl|)
parameter_list|(
name|PS_Table
name|table
parameter_list|,
name|FT_Int
name|idx
parameter_list|,
name|void
modifier|*
name|object
parameter_list|,
name|FT_UInt
name|length
parameter_list|)
function_decl|;
name|void
function_decl|(
DECL|member|release
modifier|*
name|release
function_decl|)
parameter_list|(
name|PS_Table
name|table
parameter_list|)
function_decl|;
block|}
DECL|typedef|PS_Table_FuncsRec
name|PS_Table_FuncsRec
typedef|;
end_typedef
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*<Struct>                                                              */
end_comment
begin_comment
comment|/*    PS_TableRec                                                        */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*<Description>                                                         */
end_comment
begin_comment
comment|/*    A PS_Table is a simple object used to store an array of objects in */
end_comment
begin_comment
comment|/*    a single memory block.                                             */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*<Fields>                                                              */
end_comment
begin_comment
comment|/*    block     :: The address in memory of the growheap's block.  This  */
end_comment
begin_comment
comment|/*                 can change between two object adds, due to            */
end_comment
begin_comment
comment|/*                 reallocation.                                         */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    cursor    :: The current top of the grow heap within its block.    */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    capacity  :: The current size of the heap block.  Increments by    */
end_comment
begin_comment
comment|/*                 1kByte chunks.                                        */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    init      :: Set to 0xDEADBEEF if `elements' and `lengths' have    */
end_comment
begin_comment
comment|/*                 been allocated.                                       */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    max_elems :: The maximum number of elements in table.              */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    num_elems :: The current number of elements in table.              */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    elements  :: A table of element addresses within the block.        */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    lengths   :: A table of element sizes within the block.            */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    memory    :: The object used for memory operations                 */
end_comment
begin_comment
comment|/*                 (alloc/realloc).                                      */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    funcs     :: A table of method pointers for this object.           */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_typedef
DECL|struct|PS_TableRec_
typedef|typedef
struct|struct
name|PS_TableRec_
block|{
DECL|member|block
name|FT_Byte
modifier|*
name|block
decl_stmt|;
comment|/* current memory block           */
DECL|member|cursor
name|FT_Offset
name|cursor
decl_stmt|;
comment|/* current cursor in memory block */
DECL|member|capacity
name|FT_Offset
name|capacity
decl_stmt|;
comment|/* current size of memory block   */
DECL|member|init
name|FT_ULong
name|init
decl_stmt|;
DECL|member|max_elems
name|FT_Int
name|max_elems
decl_stmt|;
DECL|member|num_elems
name|FT_Int
name|num_elems
decl_stmt|;
DECL|member|elements
name|FT_Byte
modifier|*
modifier|*
name|elements
decl_stmt|;
comment|/* addresses of table elements */
DECL|member|lengths
name|FT_UInt
modifier|*
name|lengths
decl_stmt|;
comment|/* lengths of table elements   */
DECL|member|memory
name|FT_Memory
name|memory
decl_stmt|;
DECL|member|funcs
name|PS_Table_FuncsRec
name|funcs
decl_stmt|;
block|}
DECL|typedef|PS_TableRec
name|PS_TableRec
typedef|;
end_typedef
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*****                       T1 FIELDS& TOKENS                      *****/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_typedef
DECL|typedef|PS_Parser
typedef|typedef
name|struct
name|PS_ParserRec_
modifier|*
name|PS_Parser
typedef|;
end_typedef
begin_typedef
DECL|typedef|T1_Token
typedef|typedef
name|struct
name|T1_TokenRec_
modifier|*
name|T1_Token
typedef|;
end_typedef
begin_typedef
DECL|typedef|T1_Field
typedef|typedef
name|struct
name|T1_FieldRec_
modifier|*
name|T1_Field
typedef|;
end_typedef
begin_comment
comment|/* simple enumeration type used to identify token types */
end_comment
begin_typedef
DECL|enum|T1_TokenType_
typedef|typedef
enum|enum
name|T1_TokenType_
block|{
DECL|enumerator|T1_TOKEN_TYPE_NONE
name|T1_TOKEN_TYPE_NONE
init|=
literal|0
block|,
DECL|enumerator|T1_TOKEN_TYPE_ANY
name|T1_TOKEN_TYPE_ANY
block|,
DECL|enumerator|T1_TOKEN_TYPE_STRING
name|T1_TOKEN_TYPE_STRING
block|,
DECL|enumerator|T1_TOKEN_TYPE_ARRAY
name|T1_TOKEN_TYPE_ARRAY
block|,
DECL|enumerator|T1_TOKEN_TYPE_KEY
name|T1_TOKEN_TYPE_KEY
block|,
comment|/* aka `name' */
comment|/* do not remove */
DECL|enumerator|T1_TOKEN_TYPE_MAX
name|T1_TOKEN_TYPE_MAX
block|}
DECL|typedef|T1_TokenType
name|T1_TokenType
typedef|;
end_typedef
begin_comment
comment|/* a simple structure used to identify tokens */
end_comment
begin_typedef
DECL|struct|T1_TokenRec_
typedef|typedef
struct|struct
name|T1_TokenRec_
block|{
DECL|member|start
name|FT_Byte
modifier|*
name|start
decl_stmt|;
comment|/* first character of token in input stream */
DECL|member|limit
name|FT_Byte
modifier|*
name|limit
decl_stmt|;
comment|/* first character after the token          */
DECL|member|type
name|T1_TokenType
name|type
decl_stmt|;
comment|/* type of token                            */
block|}
DECL|typedef|T1_TokenRec
name|T1_TokenRec
typedef|;
end_typedef
begin_comment
comment|/* enumeration type used to identify object fields */
end_comment
begin_typedef
DECL|enum|T1_FieldType_
typedef|typedef
enum|enum
name|T1_FieldType_
block|{
DECL|enumerator|T1_FIELD_TYPE_NONE
name|T1_FIELD_TYPE_NONE
init|=
literal|0
block|,
DECL|enumerator|T1_FIELD_TYPE_BOOL
name|T1_FIELD_TYPE_BOOL
block|,
DECL|enumerator|T1_FIELD_TYPE_INTEGER
name|T1_FIELD_TYPE_INTEGER
block|,
DECL|enumerator|T1_FIELD_TYPE_FIXED
name|T1_FIELD_TYPE_FIXED
block|,
DECL|enumerator|T1_FIELD_TYPE_FIXED_1000
name|T1_FIELD_TYPE_FIXED_1000
block|,
DECL|enumerator|T1_FIELD_TYPE_STRING
name|T1_FIELD_TYPE_STRING
block|,
DECL|enumerator|T1_FIELD_TYPE_KEY
name|T1_FIELD_TYPE_KEY
block|,
DECL|enumerator|T1_FIELD_TYPE_BBOX
name|T1_FIELD_TYPE_BBOX
block|,
DECL|enumerator|T1_FIELD_TYPE_MM_BBOX
name|T1_FIELD_TYPE_MM_BBOX
block|,
DECL|enumerator|T1_FIELD_TYPE_INTEGER_ARRAY
name|T1_FIELD_TYPE_INTEGER_ARRAY
block|,
DECL|enumerator|T1_FIELD_TYPE_FIXED_ARRAY
name|T1_FIELD_TYPE_FIXED_ARRAY
block|,
DECL|enumerator|T1_FIELD_TYPE_CALLBACK
name|T1_FIELD_TYPE_CALLBACK
block|,
comment|/* do not remove */
DECL|enumerator|T1_FIELD_TYPE_MAX
name|T1_FIELD_TYPE_MAX
block|}
DECL|typedef|T1_FieldType
name|T1_FieldType
typedef|;
end_typedef
begin_typedef
DECL|enum|T1_FieldLocation_
typedef|typedef
enum|enum
name|T1_FieldLocation_
block|{
DECL|enumerator|T1_FIELD_LOCATION_CID_INFO
name|T1_FIELD_LOCATION_CID_INFO
block|,
DECL|enumerator|T1_FIELD_LOCATION_FONT_DICT
name|T1_FIELD_LOCATION_FONT_DICT
block|,
DECL|enumerator|T1_FIELD_LOCATION_FONT_EXTRA
name|T1_FIELD_LOCATION_FONT_EXTRA
block|,
DECL|enumerator|T1_FIELD_LOCATION_FONT_INFO
name|T1_FIELD_LOCATION_FONT_INFO
block|,
DECL|enumerator|T1_FIELD_LOCATION_PRIVATE
name|T1_FIELD_LOCATION_PRIVATE
block|,
DECL|enumerator|T1_FIELD_LOCATION_BBOX
name|T1_FIELD_LOCATION_BBOX
block|,
DECL|enumerator|T1_FIELD_LOCATION_LOADER
name|T1_FIELD_LOCATION_LOADER
block|,
DECL|enumerator|T1_FIELD_LOCATION_FACE
name|T1_FIELD_LOCATION_FACE
block|,
DECL|enumerator|T1_FIELD_LOCATION_BLEND
name|T1_FIELD_LOCATION_BLEND
block|,
comment|/* do not remove */
DECL|enumerator|T1_FIELD_LOCATION_MAX
name|T1_FIELD_LOCATION_MAX
block|}
DECL|typedef|T1_FieldLocation
name|T1_FieldLocation
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|void
function_decl|(
DECL|typedef|T1_Field_ParseFunc
modifier|*
name|T1_Field_ParseFunc
function_decl|)
parameter_list|(
name|FT_Face
name|face
parameter_list|,
name|FT_Pointer
name|parser
parameter_list|)
function_decl|;
end_typedef
begin_comment
comment|/* structure type used to model object fields */
end_comment
begin_typedef
DECL|struct|T1_FieldRec_
typedef|typedef
struct|struct
name|T1_FieldRec_
block|{
DECL|member|ident
specifier|const
name|char
modifier|*
name|ident
decl_stmt|;
comment|/* field identifier               */
DECL|member|location
name|T1_FieldLocation
name|location
decl_stmt|;
DECL|member|type
name|T1_FieldType
name|type
decl_stmt|;
comment|/* type of field                  */
DECL|member|reader
name|T1_Field_ParseFunc
name|reader
decl_stmt|;
DECL|member|offset
name|FT_UInt
name|offset
decl_stmt|;
comment|/* offset of field in object      */
DECL|member|size
name|FT_Byte
name|size
decl_stmt|;
comment|/* size of field in bytes         */
DECL|member|array_max
name|FT_UInt
name|array_max
decl_stmt|;
comment|/* maximum number of elements for */
comment|/* array                          */
DECL|member|count_offset
name|FT_UInt
name|count_offset
decl_stmt|;
comment|/* offset of element count for    */
comment|/* arrays; must not be zero if in */
comment|/* use -- in other words, a       */
comment|/* `num_FOO' element must not     */
comment|/* start the used structure if we */
comment|/* parse a `FOO' array            */
DECL|member|dict
name|FT_UInt
name|dict
decl_stmt|;
comment|/* where we expect it             */
block|}
DECL|typedef|T1_FieldRec
name|T1_FieldRec
typedef|;
end_typedef
begin_define
DECL|macro|T1_FIELD_DICT_FONTDICT
define|#
directive|define
name|T1_FIELD_DICT_FONTDICT
value|( 1<< 0 )
end_define
begin_comment
DECL|macro|T1_FIELD_DICT_FONTDICT
comment|/* also FontInfo and FDArray */
end_comment
begin_define
DECL|macro|T1_FIELD_DICT_PRIVATE
define|#
directive|define
name|T1_FIELD_DICT_PRIVATE
value|( 1<< 1 )
end_define
begin_define
DECL|macro|T1_NEW_SIMPLE_FIELD
define|#
directive|define
name|T1_NEW_SIMPLE_FIELD
parameter_list|(
name|_ident
parameter_list|,
name|_type
parameter_list|,
name|_fname
parameter_list|,
name|_dict
parameter_list|)
define|\
value|{                                                 \             _ident, T1CODE, _type,                          \             0,                                              \             FT_FIELD_OFFSET( _fname ),                      \             FT_FIELD_SIZE( _fname ),                        \             0, 0,                                           \             _dict                                           \           },
end_define
begin_define
DECL|macro|T1_NEW_CALLBACK_FIELD
define|#
directive|define
name|T1_NEW_CALLBACK_FIELD
parameter_list|(
name|_ident
parameter_list|,
name|_reader
parameter_list|,
name|_dict
parameter_list|)
define|\
value|{                                             \             _ident, T1CODE, T1_FIELD_TYPE_CALLBACK,     \             (T1_Field_ParseFunc)_reader,                \             0, 0,                                       \             0, 0,                                       \             _dict                                       \           },
end_define
begin_define
DECL|macro|T1_NEW_TABLE_FIELD
define|#
directive|define
name|T1_NEW_TABLE_FIELD
parameter_list|(
name|_ident
parameter_list|,
name|_type
parameter_list|,
name|_fname
parameter_list|,
name|_max
parameter_list|,
name|_dict
parameter_list|)
define|\
value|{                                                      \             _ident, T1CODE, _type,                               \             0,                                                   \             FT_FIELD_OFFSET( _fname ),                           \             FT_FIELD_SIZE_DELTA( _fname ),                       \             _max,                                                \             FT_FIELD_OFFSET( num_ ## _fname ),                   \             _dict                                                \           },
end_define
begin_define
DECL|macro|T1_NEW_TABLE_FIELD2
define|#
directive|define
name|T1_NEW_TABLE_FIELD2
parameter_list|(
name|_ident
parameter_list|,
name|_type
parameter_list|,
name|_fname
parameter_list|,
name|_max
parameter_list|,
name|_dict
parameter_list|)
define|\
value|{                                                       \             _ident, T1CODE, _type,                                \             0,                                                    \             FT_FIELD_OFFSET( _fname ),                            \             FT_FIELD_SIZE_DELTA( _fname ),                        \             _max, 0,                                              \             _dict                                                 \           },
end_define
begin_define
DECL|macro|T1_FIELD_BOOL
define|#
directive|define
name|T1_FIELD_BOOL
parameter_list|(
name|_ident
parameter_list|,
name|_fname
parameter_list|,
name|_dict
parameter_list|)
define|\
value|T1_NEW_SIMPLE_FIELD( _ident, T1_FIELD_TYPE_BOOL, _fname, _dict )
end_define
begin_define
DECL|macro|T1_FIELD_NUM
define|#
directive|define
name|T1_FIELD_NUM
parameter_list|(
name|_ident
parameter_list|,
name|_fname
parameter_list|,
name|_dict
parameter_list|)
define|\
value|T1_NEW_SIMPLE_FIELD( _ident, T1_FIELD_TYPE_INTEGER, _fname, _dict )
end_define
begin_define
DECL|macro|T1_FIELD_FIXED
define|#
directive|define
name|T1_FIELD_FIXED
parameter_list|(
name|_ident
parameter_list|,
name|_fname
parameter_list|,
name|_dict
parameter_list|)
define|\
value|T1_NEW_SIMPLE_FIELD( _ident, T1_FIELD_TYPE_FIXED, _fname, _dict )
end_define
begin_define
DECL|macro|T1_FIELD_FIXED_1000
define|#
directive|define
name|T1_FIELD_FIXED_1000
parameter_list|(
name|_ident
parameter_list|,
name|_fname
parameter_list|,
name|_dict
parameter_list|)
define|\
value|T1_NEW_SIMPLE_FIELD( _ident, T1_FIELD_TYPE_FIXED_1000, _fname, \                                _dict )
end_define
begin_define
DECL|macro|T1_FIELD_STRING
define|#
directive|define
name|T1_FIELD_STRING
parameter_list|(
name|_ident
parameter_list|,
name|_fname
parameter_list|,
name|_dict
parameter_list|)
define|\
value|T1_NEW_SIMPLE_FIELD( _ident, T1_FIELD_TYPE_STRING, _fname, _dict )
end_define
begin_define
DECL|macro|T1_FIELD_KEY
define|#
directive|define
name|T1_FIELD_KEY
parameter_list|(
name|_ident
parameter_list|,
name|_fname
parameter_list|,
name|_dict
parameter_list|)
define|\
value|T1_NEW_SIMPLE_FIELD( _ident, T1_FIELD_TYPE_KEY, _fname, _dict )
end_define
begin_define
DECL|macro|T1_FIELD_BBOX
define|#
directive|define
name|T1_FIELD_BBOX
parameter_list|(
name|_ident
parameter_list|,
name|_fname
parameter_list|,
name|_dict
parameter_list|)
define|\
value|T1_NEW_SIMPLE_FIELD( _ident, T1_FIELD_TYPE_BBOX, _fname, _dict )
end_define
begin_define
DECL|macro|T1_FIELD_NUM_TABLE
define|#
directive|define
name|T1_FIELD_NUM_TABLE
parameter_list|(
name|_ident
parameter_list|,
name|_fname
parameter_list|,
name|_fmax
parameter_list|,
name|_dict
parameter_list|)
define|\
value|T1_NEW_TABLE_FIELD( _ident, T1_FIELD_TYPE_INTEGER_ARRAY, \                               _fname, _fmax, _dict )
end_define
begin_define
DECL|macro|T1_FIELD_FIXED_TABLE
define|#
directive|define
name|T1_FIELD_FIXED_TABLE
parameter_list|(
name|_ident
parameter_list|,
name|_fname
parameter_list|,
name|_fmax
parameter_list|,
name|_dict
parameter_list|)
define|\
value|T1_NEW_TABLE_FIELD( _ident, T1_FIELD_TYPE_FIXED_ARRAY, \                               _fname, _fmax, _dict )
end_define
begin_define
DECL|macro|T1_FIELD_NUM_TABLE2
define|#
directive|define
name|T1_FIELD_NUM_TABLE2
parameter_list|(
name|_ident
parameter_list|,
name|_fname
parameter_list|,
name|_fmax
parameter_list|,
name|_dict
parameter_list|)
define|\
value|T1_NEW_TABLE_FIELD2( _ident, T1_FIELD_TYPE_INTEGER_ARRAY, \                                _fname, _fmax, _dict )
end_define
begin_define
DECL|macro|T1_FIELD_FIXED_TABLE2
define|#
directive|define
name|T1_FIELD_FIXED_TABLE2
parameter_list|(
name|_ident
parameter_list|,
name|_fname
parameter_list|,
name|_fmax
parameter_list|,
name|_dict
parameter_list|)
define|\
value|T1_NEW_TABLE_FIELD2( _ident, T1_FIELD_TYPE_FIXED_ARRAY, \                                _fname, _fmax, _dict )
end_define
begin_define
DECL|macro|T1_FIELD_CALLBACK
define|#
directive|define
name|T1_FIELD_CALLBACK
parameter_list|(
name|_ident
parameter_list|,
name|_name
parameter_list|,
name|_dict
parameter_list|)
define|\
value|T1_NEW_CALLBACK_FIELD( _ident, _name, _dict )
end_define
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*****                            T1 PARSER                          *****/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_typedef
DECL|typedef|PS_Parser_Funcs
typedef|typedef
specifier|const
name|struct
name|PS_Parser_FuncsRec_
modifier|*
name|PS_Parser_Funcs
typedef|;
end_typedef
begin_typedef
DECL|struct|PS_Parser_FuncsRec_
typedef|typedef
struct|struct
name|PS_Parser_FuncsRec_
block|{
name|void
function_decl|(
DECL|member|init
modifier|*
name|init
function_decl|)
parameter_list|(
name|PS_Parser
name|parser
parameter_list|,
name|FT_Byte
modifier|*
name|base
parameter_list|,
name|FT_Byte
modifier|*
name|limit
parameter_list|,
name|FT_Memory
name|memory
parameter_list|)
function_decl|;
name|void
function_decl|(
DECL|member|done
modifier|*
name|done
function_decl|)
parameter_list|(
name|PS_Parser
name|parser
parameter_list|)
function_decl|;
name|void
function_decl|(
DECL|member|skip_spaces
modifier|*
name|skip_spaces
function_decl|)
parameter_list|(
name|PS_Parser
name|parser
parameter_list|)
function_decl|;
name|void
function_decl|(
DECL|member|skip_PS_token
modifier|*
name|skip_PS_token
function_decl|)
parameter_list|(
name|PS_Parser
name|parser
parameter_list|)
function_decl|;
name|FT_Long
function_decl|(
DECL|member|to_int
modifier|*
name|to_int
function_decl|)
parameter_list|(
name|PS_Parser
name|parser
parameter_list|)
function_decl|;
name|FT_Fixed
function_decl|(
DECL|member|to_fixed
modifier|*
name|to_fixed
function_decl|)
parameter_list|(
name|PS_Parser
name|parser
parameter_list|,
name|FT_Int
name|power_ten
parameter_list|)
function_decl|;
name|FT_Error
function_decl|(
DECL|member|to_bytes
modifier|*
name|to_bytes
function_decl|)
parameter_list|(
name|PS_Parser
name|parser
parameter_list|,
name|FT_Byte
modifier|*
name|bytes
parameter_list|,
name|FT_Offset
name|max_bytes
parameter_list|,
name|FT_ULong
modifier|*
name|pnum_bytes
parameter_list|,
name|FT_Bool
name|delimiters
parameter_list|)
function_decl|;
name|FT_Int
function_decl|(
DECL|member|to_coord_array
modifier|*
name|to_coord_array
function_decl|)
parameter_list|(
name|PS_Parser
name|parser
parameter_list|,
name|FT_Int
name|max_coords
parameter_list|,
name|FT_Short
modifier|*
name|coords
parameter_list|)
function_decl|;
name|FT_Int
function_decl|(
DECL|member|to_fixed_array
modifier|*
name|to_fixed_array
function_decl|)
parameter_list|(
name|PS_Parser
name|parser
parameter_list|,
name|FT_Int
name|max_values
parameter_list|,
name|FT_Fixed
modifier|*
name|values
parameter_list|,
name|FT_Int
name|power_ten
parameter_list|)
function_decl|;
name|void
function_decl|(
DECL|member|to_token
modifier|*
name|to_token
function_decl|)
parameter_list|(
name|PS_Parser
name|parser
parameter_list|,
name|T1_Token
name|token
parameter_list|)
function_decl|;
name|void
function_decl|(
DECL|member|to_token_array
modifier|*
name|to_token_array
function_decl|)
parameter_list|(
name|PS_Parser
name|parser
parameter_list|,
name|T1_Token
name|tokens
parameter_list|,
name|FT_UInt
name|max_tokens
parameter_list|,
name|FT_Int
modifier|*
name|pnum_tokens
parameter_list|)
function_decl|;
name|FT_Error
function_decl|(
DECL|member|load_field
modifier|*
name|load_field
function_decl|)
parameter_list|(
name|PS_Parser
name|parser
parameter_list|,
specifier|const
name|T1_Field
name|field
parameter_list|,
name|void
modifier|*
modifier|*
name|objects
parameter_list|,
name|FT_UInt
name|max_objects
parameter_list|,
name|FT_ULong
modifier|*
name|pflags
parameter_list|)
function_decl|;
name|FT_Error
function_decl|(
DECL|member|load_field_table
modifier|*
name|load_field_table
function_decl|)
parameter_list|(
name|PS_Parser
name|parser
parameter_list|,
specifier|const
name|T1_Field
name|field
parameter_list|,
name|void
modifier|*
modifier|*
name|objects
parameter_list|,
name|FT_UInt
name|max_objects
parameter_list|,
name|FT_ULong
modifier|*
name|pflags
parameter_list|)
function_decl|;
block|}
DECL|typedef|PS_Parser_FuncsRec
name|PS_Parser_FuncsRec
typedef|;
end_typedef
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*<Struct>                                                              */
end_comment
begin_comment
comment|/*    PS_ParserRec                                                       */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*<Description>                                                         */
end_comment
begin_comment
comment|/*    A PS_Parser is an object used to parse a Type 1 font very quickly. */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*<Fields>                                                              */
end_comment
begin_comment
comment|/*    cursor :: The current position in the text.                        */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    base   :: Start of the processed text.                             */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    limit  :: End of the processed text.                               */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    error  :: The last error returned.                                 */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    memory :: The object used for memory operations (alloc/realloc).   */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    funcs  :: A table of functions for the parser.                     */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_typedef
DECL|struct|PS_ParserRec_
typedef|typedef
struct|struct
name|PS_ParserRec_
block|{
DECL|member|cursor
name|FT_Byte
modifier|*
name|cursor
decl_stmt|;
DECL|member|base
name|FT_Byte
modifier|*
name|base
decl_stmt|;
DECL|member|limit
name|FT_Byte
modifier|*
name|limit
decl_stmt|;
DECL|member|error
name|FT_Error
name|error
decl_stmt|;
DECL|member|memory
name|FT_Memory
name|memory
decl_stmt|;
DECL|member|funcs
name|PS_Parser_FuncsRec
name|funcs
decl_stmt|;
block|}
DECL|typedef|PS_ParserRec
name|PS_ParserRec
typedef|;
end_typedef
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*****                         T1 BUILDER                            *****/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_typedef
DECL|typedef|T1_Builder
typedef|typedef
name|struct
name|T1_BuilderRec_
modifier|*
name|T1_Builder
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|FT_Error
function_decl|(
DECL|typedef|T1_Builder_Check_Points_Func
modifier|*
name|T1_Builder_Check_Points_Func
function_decl|)
parameter_list|(
name|T1_Builder
name|builder
parameter_list|,
name|FT_Int
name|count
parameter_list|)
function_decl|;
end_typedef
begin_typedef
typedef|typedef
name|void
function_decl|(
DECL|typedef|T1_Builder_Add_Point_Func
modifier|*
name|T1_Builder_Add_Point_Func
function_decl|)
parameter_list|(
name|T1_Builder
name|builder
parameter_list|,
name|FT_Pos
name|x
parameter_list|,
name|FT_Pos
name|y
parameter_list|,
name|FT_Byte
name|flag
parameter_list|)
function_decl|;
end_typedef
begin_typedef
typedef|typedef
name|FT_Error
function_decl|(
DECL|typedef|T1_Builder_Add_Point1_Func
modifier|*
name|T1_Builder_Add_Point1_Func
function_decl|)
parameter_list|(
name|T1_Builder
name|builder
parameter_list|,
name|FT_Pos
name|x
parameter_list|,
name|FT_Pos
name|y
parameter_list|)
function_decl|;
end_typedef
begin_typedef
typedef|typedef
name|FT_Error
function_decl|(
DECL|typedef|T1_Builder_Add_Contour_Func
modifier|*
name|T1_Builder_Add_Contour_Func
function_decl|)
parameter_list|(
name|T1_Builder
name|builder
parameter_list|)
function_decl|;
end_typedef
begin_typedef
typedef|typedef
name|FT_Error
function_decl|(
DECL|typedef|T1_Builder_Start_Point_Func
modifier|*
name|T1_Builder_Start_Point_Func
function_decl|)
parameter_list|(
name|T1_Builder
name|builder
parameter_list|,
name|FT_Pos
name|x
parameter_list|,
name|FT_Pos
name|y
parameter_list|)
function_decl|;
end_typedef
begin_typedef
typedef|typedef
name|void
function_decl|(
DECL|typedef|T1_Builder_Close_Contour_Func
modifier|*
name|T1_Builder_Close_Contour_Func
function_decl|)
parameter_list|(
name|T1_Builder
name|builder
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|T1_Builder_Funcs
typedef|typedef
specifier|const
name|struct
name|T1_Builder_FuncsRec_
modifier|*
name|T1_Builder_Funcs
typedef|;
end_typedef
begin_typedef
DECL|struct|T1_Builder_FuncsRec_
typedef|typedef
struct|struct
name|T1_Builder_FuncsRec_
block|{
name|void
function_decl|(
DECL|member|init
modifier|*
name|init
function_decl|)
parameter_list|(
name|T1_Builder
name|builder
parameter_list|,
name|FT_Face
name|face
parameter_list|,
name|FT_Size
name|size
parameter_list|,
name|FT_GlyphSlot
name|slot
parameter_list|,
name|FT_Bool
name|hinting
parameter_list|)
function_decl|;
name|void
function_decl|(
DECL|member|done
modifier|*
name|done
function_decl|)
parameter_list|(
name|T1_Builder
name|builder
parameter_list|)
function_decl|;
DECL|member|check_points
name|T1_Builder_Check_Points_Func
name|check_points
decl_stmt|;
DECL|member|add_point
name|T1_Builder_Add_Point_Func
name|add_point
decl_stmt|;
DECL|member|add_point1
name|T1_Builder_Add_Point1_Func
name|add_point1
decl_stmt|;
DECL|member|add_contour
name|T1_Builder_Add_Contour_Func
name|add_contour
decl_stmt|;
DECL|member|start_point
name|T1_Builder_Start_Point_Func
name|start_point
decl_stmt|;
DECL|member|close_contour
name|T1_Builder_Close_Contour_Func
name|close_contour
decl_stmt|;
block|}
DECL|typedef|T1_Builder_FuncsRec
name|T1_Builder_FuncsRec
typedef|;
end_typedef
begin_comment
comment|/* an enumeration type to handle charstring parsing states */
end_comment
begin_typedef
DECL|enum|T1_ParseState_
typedef|typedef
enum|enum
name|T1_ParseState_
block|{
DECL|enumerator|T1_Parse_Start
name|T1_Parse_Start
block|,
DECL|enumerator|T1_Parse_Have_Width
name|T1_Parse_Have_Width
block|,
DECL|enumerator|T1_Parse_Have_Moveto
name|T1_Parse_Have_Moveto
block|,
DECL|enumerator|T1_Parse_Have_Path
name|T1_Parse_Have_Path
block|}
DECL|typedef|T1_ParseState
name|T1_ParseState
typedef|;
end_typedef
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*<Structure>                                                           */
end_comment
begin_comment
comment|/*    T1_BuilderRec                                                      */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*<Description>                                                         */
end_comment
begin_comment
comment|/*     A structure used during glyph loading to store its outline.       */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*<Fields>                                                              */
end_comment
begin_comment
comment|/*    memory       :: The current memory object.                         */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    face         :: The current face object.                           */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    glyph        :: The current glyph slot.                            */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    loader       :: XXX                                                */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    base         :: The base glyph outline.                            */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    current      :: The current glyph outline.                         */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    max_points   :: maximum points in builder outline                  */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    max_contours :: Maximum number of contours in builder outline.     */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    pos_x        :: The horizontal translation (if composite glyph).   */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    pos_y        :: The vertical translation (if composite glyph).     */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    left_bearing :: The left side bearing point.                       */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    advance      :: The horizontal advance vector.                     */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    bbox         :: Unused.                                            */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    parse_state  :: An enumeration which controls the charstring       */
end_comment
begin_comment
comment|/*                    parsing state.                                     */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    load_points  :: If this flag is not set, no points are loaded.     */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    no_recurse   :: Set but not used.                                  */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    metrics_only :: A boolean indicating that we only want to compute  */
end_comment
begin_comment
comment|/*                    the metrics of a given glyph, not load all of its  */
end_comment
begin_comment
comment|/*                    points.                                            */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    funcs        :: An array of function pointers for the builder.     */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_typedef
DECL|struct|T1_BuilderRec_
typedef|typedef
struct|struct
name|T1_BuilderRec_
block|{
DECL|member|memory
name|FT_Memory
name|memory
decl_stmt|;
DECL|member|face
name|FT_Face
name|face
decl_stmt|;
DECL|member|glyph
name|FT_GlyphSlot
name|glyph
decl_stmt|;
DECL|member|loader
name|FT_GlyphLoader
name|loader
decl_stmt|;
DECL|member|base
name|FT_Outline
modifier|*
name|base
decl_stmt|;
DECL|member|current
name|FT_Outline
modifier|*
name|current
decl_stmt|;
DECL|member|pos_x
name|FT_Pos
name|pos_x
decl_stmt|;
DECL|member|pos_y
name|FT_Pos
name|pos_y
decl_stmt|;
DECL|member|left_bearing
name|FT_Vector
name|left_bearing
decl_stmt|;
DECL|member|advance
name|FT_Vector
name|advance
decl_stmt|;
DECL|member|bbox
name|FT_BBox
name|bbox
decl_stmt|;
comment|/* bounding box */
DECL|member|parse_state
name|T1_ParseState
name|parse_state
decl_stmt|;
DECL|member|load_points
name|FT_Bool
name|load_points
decl_stmt|;
DECL|member|no_recurse
name|FT_Bool
name|no_recurse
decl_stmt|;
DECL|member|metrics_only
name|FT_Bool
name|metrics_only
decl_stmt|;
DECL|member|hints_funcs
name|void
modifier|*
name|hints_funcs
decl_stmt|;
comment|/* hinter-specific */
DECL|member|hints_globals
name|void
modifier|*
name|hints_globals
decl_stmt|;
comment|/* hinter-specific */
DECL|member|funcs
name|T1_Builder_FuncsRec
name|funcs
decl_stmt|;
block|}
DECL|typedef|T1_BuilderRec
name|T1_BuilderRec
typedef|;
end_typedef
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*****                         T1 DECODER                            *****/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/* T1_MAX_SUBRS_CALLS details the maximum number of nested sub-routine   */
end_comment
begin_comment
comment|/* calls during glyph loading.                                           */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_define
define|#
directive|define
name|T1_MAX_SUBRS_CALLS
value|8
end_define
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/* T1_MAX_CHARSTRING_OPERANDS is the charstring stack's capacity.  A     */
end_comment
begin_comment
comment|/* minimum of 16 is required.                                            */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_define
define|#
directive|define
name|T1_MAX_CHARSTRINGS_OPERANDS
value|32
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* 0 */
end_comment
begin_typedef
DECL|struct|T1_Decoder_ZoneRec_
typedef|typedef
struct|struct
name|T1_Decoder_ZoneRec_
block|{
DECL|member|cursor
name|FT_Byte
modifier|*
name|cursor
decl_stmt|;
DECL|member|base
name|FT_Byte
modifier|*
name|base
decl_stmt|;
DECL|member|limit
name|FT_Byte
modifier|*
name|limit
decl_stmt|;
block|}
DECL|typedef|T1_Decoder_ZoneRec
DECL|typedef|T1_Decoder_Zone
name|T1_Decoder_ZoneRec
operator|,
typedef|*
name|T1_Decoder_Zone
typedef|;
end_typedef
begin_typedef
DECL|typedef|T1_Decoder
typedef|typedef
name|struct
name|T1_DecoderRec_
modifier|*
name|T1_Decoder
typedef|;
end_typedef
begin_typedef
DECL|typedef|T1_Decoder_Funcs
typedef|typedef
specifier|const
name|struct
name|T1_Decoder_FuncsRec_
modifier|*
name|T1_Decoder_Funcs
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|FT_Error
function_decl|(
DECL|typedef|T1_Decoder_Callback
modifier|*
name|T1_Decoder_Callback
function_decl|)
parameter_list|(
name|T1_Decoder
name|decoder
parameter_list|,
name|FT_UInt
name|glyph_index
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|struct|T1_Decoder_FuncsRec_
typedef|typedef
struct|struct
name|T1_Decoder_FuncsRec_
block|{
name|FT_Error
function_decl|(
DECL|member|init
modifier|*
name|init
function_decl|)
parameter_list|(
name|T1_Decoder
name|decoder
parameter_list|,
name|FT_Face
name|face
parameter_list|,
name|FT_Size
name|size
parameter_list|,
name|FT_GlyphSlot
name|slot
parameter_list|,
name|FT_Byte
modifier|*
modifier|*
name|glyph_names
parameter_list|,
name|PS_Blend
name|blend
parameter_list|,
name|FT_Bool
name|hinting
parameter_list|,
name|FT_Render_Mode
name|hint_mode
parameter_list|,
name|T1_Decoder_Callback
name|callback
parameter_list|)
function_decl|;
name|void
function_decl|(
DECL|member|done
modifier|*
name|done
function_decl|)
parameter_list|(
name|T1_Decoder
name|decoder
parameter_list|)
function_decl|;
name|FT_Error
function_decl|(
DECL|member|parse_charstrings
modifier|*
name|parse_charstrings
function_decl|)
parameter_list|(
name|T1_Decoder
name|decoder
parameter_list|,
name|FT_Byte
modifier|*
name|base
parameter_list|,
name|FT_UInt
name|len
parameter_list|)
function_decl|;
block|}
DECL|typedef|T1_Decoder_FuncsRec
name|T1_Decoder_FuncsRec
typedef|;
end_typedef
begin_typedef
DECL|struct|T1_DecoderRec_
typedef|typedef
struct|struct
name|T1_DecoderRec_
block|{
DECL|member|builder
name|T1_BuilderRec
name|builder
decl_stmt|;
DECL|member|stack
name|FT_Long
name|stack
index|[
name|T1_MAX_CHARSTRINGS_OPERANDS
index|]
decl_stmt|;
DECL|member|top
name|FT_Long
modifier|*
name|top
decl_stmt|;
DECL|member|zones
name|T1_Decoder_ZoneRec
name|zones
index|[
name|T1_MAX_SUBRS_CALLS
operator|+
literal|1
index|]
decl_stmt|;
DECL|member|zone
name|T1_Decoder_Zone
name|zone
decl_stmt|;
DECL|member|psnames
name|FT_Service_PsCMaps
name|psnames
decl_stmt|;
comment|/* for seac */
DECL|member|num_glyphs
name|FT_UInt
name|num_glyphs
decl_stmt|;
DECL|member|glyph_names
name|FT_Byte
modifier|*
modifier|*
name|glyph_names
decl_stmt|;
DECL|member|lenIV
name|FT_Int
name|lenIV
decl_stmt|;
comment|/* internal for sub routine calls */
DECL|member|num_subrs
name|FT_Int
name|num_subrs
decl_stmt|;
DECL|member|subrs
name|FT_Byte
modifier|*
modifier|*
name|subrs
decl_stmt|;
DECL|member|subrs_len
name|FT_UInt
modifier|*
name|subrs_len
decl_stmt|;
comment|/* array of subrs length (optional) */
DECL|member|font_matrix
name|FT_Matrix
name|font_matrix
decl_stmt|;
DECL|member|font_offset
name|FT_Vector
name|font_offset
decl_stmt|;
DECL|member|flex_state
name|FT_Int
name|flex_state
decl_stmt|;
DECL|member|num_flex_vectors
name|FT_Int
name|num_flex_vectors
decl_stmt|;
DECL|member|flex_vectors
name|FT_Vector
name|flex_vectors
index|[
literal|7
index|]
decl_stmt|;
DECL|member|blend
name|PS_Blend
name|blend
decl_stmt|;
comment|/* for multiple master support */
DECL|member|hint_mode
name|FT_Render_Mode
name|hint_mode
decl_stmt|;
DECL|member|parse_callback
name|T1_Decoder_Callback
name|parse_callback
decl_stmt|;
DECL|member|funcs
name|T1_Decoder_FuncsRec
name|funcs
decl_stmt|;
DECL|member|buildchar
name|FT_Long
modifier|*
name|buildchar
decl_stmt|;
DECL|member|len_buildchar
name|FT_UInt
name|len_buildchar
decl_stmt|;
DECL|member|seac
name|FT_Bool
name|seac
decl_stmt|;
block|}
DECL|typedef|T1_DecoderRec
name|T1_DecoderRec
typedef|;
end_typedef
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*****                            AFM PARSER                         *****/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_typedef
DECL|typedef|AFM_Parser
typedef|typedef
name|struct
name|AFM_ParserRec_
modifier|*
name|AFM_Parser
typedef|;
end_typedef
begin_typedef
DECL|struct|AFM_Parser_FuncsRec_
typedef|typedef
struct|struct
name|AFM_Parser_FuncsRec_
block|{
name|FT_Error
function_decl|(
DECL|member|init
modifier|*
name|init
function_decl|)
parameter_list|(
name|AFM_Parser
name|parser
parameter_list|,
name|FT_Memory
name|memory
parameter_list|,
name|FT_Byte
modifier|*
name|base
parameter_list|,
name|FT_Byte
modifier|*
name|limit
parameter_list|)
function_decl|;
name|void
function_decl|(
DECL|member|done
modifier|*
name|done
function_decl|)
parameter_list|(
name|AFM_Parser
name|parser
parameter_list|)
function_decl|;
name|FT_Error
function_decl|(
DECL|member|parse
modifier|*
name|parse
function_decl|)
parameter_list|(
name|AFM_Parser
name|parser
parameter_list|)
function_decl|;
block|}
DECL|typedef|AFM_Parser_FuncsRec
name|AFM_Parser_FuncsRec
typedef|;
end_typedef
begin_typedef
DECL|typedef|AFM_Stream
typedef|typedef
name|struct
name|AFM_StreamRec_
modifier|*
name|AFM_Stream
typedef|;
end_typedef
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*<Struct>                                                              */
end_comment
begin_comment
comment|/*    AFM_ParserRec                                                      */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*<Description>                                                         */
end_comment
begin_comment
comment|/*    An AFM_Parser is a parser for the AFM files.                       */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*<Fields>                                                              */
end_comment
begin_comment
comment|/*    memory    :: The object used for memory operations (alloc and      */
end_comment
begin_comment
comment|/*                 realloc).                                             */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    stream    :: This is an opaque object.                             */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    FontInfo  :: The result will be stored here.                       */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*    get_index :: A user provided function to get a glyph index by its  */
end_comment
begin_comment
comment|/*                 name.                                                 */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_typedef
DECL|struct|AFM_ParserRec_
typedef|typedef
struct|struct
name|AFM_ParserRec_
block|{
DECL|member|memory
name|FT_Memory
name|memory
decl_stmt|;
DECL|member|stream
name|AFM_Stream
name|stream
decl_stmt|;
DECL|member|FontInfo
name|AFM_FontInfo
name|FontInfo
decl_stmt|;
name|FT_Int
function_decl|(
DECL|member|get_index
modifier|*
name|get_index
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|FT_Offset
name|len
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|)
function_decl|;
DECL|member|user_data
name|void
modifier|*
name|user_data
decl_stmt|;
block|}
DECL|typedef|AFM_ParserRec
name|AFM_ParserRec
typedef|;
end_typedef
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*****                     TYPE1 CHARMAPS                            *****/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_typedef
DECL|typedef|T1_CMap_Classes
typedef|typedef
specifier|const
name|struct
name|T1_CMap_ClassesRec_
modifier|*
name|T1_CMap_Classes
typedef|;
end_typedef
begin_typedef
DECL|struct|T1_CMap_ClassesRec_
typedef|typedef
struct|struct
name|T1_CMap_ClassesRec_
block|{
DECL|member|standard
name|FT_CMap_Class
name|standard
decl_stmt|;
DECL|member|expert
name|FT_CMap_Class
name|expert
decl_stmt|;
DECL|member|custom
name|FT_CMap_Class
name|custom
decl_stmt|;
DECL|member|unicode
name|FT_CMap_Class
name|unicode
decl_stmt|;
block|}
DECL|typedef|T1_CMap_ClassesRec
name|T1_CMap_ClassesRec
typedef|;
end_typedef
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*****                        PSAux Module Interface                 *****/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_typedef
DECL|struct|PSAux_ServiceRec_
typedef|typedef
struct|struct
name|PSAux_ServiceRec_
block|{
comment|/* don't use `PS_Table_Funcs' and friends to avoid compiler warnings */
DECL|member|ps_table_funcs
specifier|const
name|PS_Table_FuncsRec
modifier|*
name|ps_table_funcs
decl_stmt|;
DECL|member|ps_parser_funcs
specifier|const
name|PS_Parser_FuncsRec
modifier|*
name|ps_parser_funcs
decl_stmt|;
DECL|member|t1_builder_funcs
specifier|const
name|T1_Builder_FuncsRec
modifier|*
name|t1_builder_funcs
decl_stmt|;
DECL|member|t1_decoder_funcs
specifier|const
name|T1_Decoder_FuncsRec
modifier|*
name|t1_decoder_funcs
decl_stmt|;
name|void
function_decl|(
DECL|member|t1_decrypt
modifier|*
name|t1_decrypt
function_decl|)
parameter_list|(
name|FT_Byte
modifier|*
name|buffer
parameter_list|,
name|FT_Offset
name|length
parameter_list|,
name|FT_UShort
name|seed
parameter_list|)
function_decl|;
DECL|member|t1_cmap_classes
name|T1_CMap_Classes
name|t1_cmap_classes
decl_stmt|;
comment|/* fields after this comment line were added after version 2.1.10 */
DECL|member|afm_parser_funcs
specifier|const
name|AFM_Parser_FuncsRec
modifier|*
name|afm_parser_funcs
decl_stmt|;
block|}
DECL|typedef|PSAux_ServiceRec
DECL|typedef|PSAux_Service
name|PSAux_ServiceRec
operator|,
typedef|*
name|PSAux_Service
typedef|;
end_typedef
begin_comment
comment|/* backwards-compatible type definition */
end_comment
begin_typedef
DECL|typedef|PSAux_Interface
typedef|typedef
name|PSAux_ServiceRec
name|PSAux_Interface
typedef|;
end_typedef
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*****                 Some convenience functions                    *****/
end_comment
begin_comment
comment|/*****                                                               *****/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_define
DECL|macro|IS_PS_NEWLINE
define|#
directive|define
name|IS_PS_NEWLINE
parameter_list|(
name|ch
parameter_list|)
define|\
value|( (ch) == '\r' ||         \     (ch) == '\n' )
end_define
begin_define
DECL|macro|IS_PS_SPACE
define|#
directive|define
name|IS_PS_SPACE
parameter_list|(
name|ch
parameter_list|)
define|\
value|( (ch) == ' '         || \     IS_PS_NEWLINE( ch ) || \     (ch) == '\t'        || \     (ch) == '\f'        || \     (ch) == '\0' )
end_define
begin_define
DECL|macro|IS_PS_SPECIAL
define|#
directive|define
name|IS_PS_SPECIAL
parameter_list|(
name|ch
parameter_list|)
define|\
value|( (ch) == '/'                || \     (ch) == '(' || (ch) == ')' || \     (ch) == '<' || (ch) == '>' || \     (ch) == '[' || (ch) == ']' || \     (ch) == '{' || (ch) == '}' || \     (ch) == '%'                )
end_define
begin_define
DECL|macro|IS_PS_DELIM
define|#
directive|define
name|IS_PS_DELIM
parameter_list|(
name|ch
parameter_list|)
define|\
value|( IS_PS_SPACE( ch )   || \     IS_PS_SPECIAL( ch ) )
end_define
begin_define
DECL|macro|IS_PS_DIGIT
define|#
directive|define
name|IS_PS_DIGIT
parameter_list|(
name|ch
parameter_list|)
define|\
value|( (ch)>= '0'&& (ch)<= '9' )
end_define
begin_define
DECL|macro|IS_PS_XDIGIT
define|#
directive|define
name|IS_PS_XDIGIT
parameter_list|(
name|ch
parameter_list|)
define|\
value|( IS_PS_DIGIT( ch )              || \     ( (ch)>= 'A'&& (ch)<= 'F' ) || \     ( (ch)>= 'a'&& (ch)<= 'f' ) )
end_define
begin_define
DECL|macro|IS_PS_BASE85
define|#
directive|define
name|IS_PS_BASE85
parameter_list|(
name|ch
parameter_list|)
define|\
value|( (ch)>= '!'&& (ch)<= 'u' )
end_define
begin_define
DECL|macro|IS_PS_TOKEN
define|#
directive|define
name|IS_PS_TOKEN
parameter_list|(
name|cur
parameter_list|,
name|limit
parameter_list|,
name|token
parameter_list|)
define|\
value|( (char)(cur)[0] == (token)[0]&& \     ( (cur) + sizeof ( (token) ) == (limit) ||                          \       ( (cur) + sizeof( (token) )< (limit)&&                 \         IS_PS_DELIM( (cur)[sizeof ( (token) ) - 1] ) ) )&& \     ft_strncmp( (char*)(cur), (token), sizeof ( (token) ) - 1 ) == 0 )
end_define
begin_macro
name|FT_END_HEADER
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* __PSAUX_H__ */
end_comment
begin_comment
comment|/* END */
end_comment
end_unit
