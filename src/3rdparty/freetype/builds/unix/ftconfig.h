begin_unit
begin_comment
comment|/* ftconfig.h.  Generated by configure.  */
end_comment
begin_comment
comment|/***************************************************************************/
end_comment
begin_comment
comment|/*                                                                         */
end_comment
begin_comment
comment|/*  ftconfig.in                                                            */
end_comment
begin_comment
comment|/*                                                                         */
end_comment
begin_comment
comment|/*    UNIX-specific configuration file (specification only).               */
end_comment
begin_comment
comment|/*                                                                         */
end_comment
begin_comment
comment|/*  Copyright 1996-2000, 2002 by                                           */
end_comment
begin_comment
comment|/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
end_comment
begin_comment
comment|/*                                                                         */
end_comment
begin_comment
comment|/*  This file is part of the FreeType project, and may only be used,       */
end_comment
begin_comment
comment|/*  modified, and distributed under the terms of the FreeType project      */
end_comment
begin_comment
comment|/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
end_comment
begin_comment
comment|/*  this file you indicate that you have read the license and              */
end_comment
begin_comment
comment|/*  understand and accept it fully.                                        */
end_comment
begin_comment
comment|/*                                                                         */
end_comment
begin_comment
comment|/***************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/* This header file contains a number of macro definitions that are used */
end_comment
begin_comment
comment|/* by the rest of the engine.  Most of the macros here are automatically */
end_comment
begin_comment
comment|/* determined at compile time, and you should not need to change it to   */
end_comment
begin_comment
comment|/* port FreeType, except to compile the library with a non-ANSI          */
end_comment
begin_comment
comment|/* compiler.                                                             */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/* Note however that if some specific modifications are needed, we       */
end_comment
begin_comment
comment|/* advise you to place a modified copy in your build directory.          */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/* The build directory is usually `freetype/builds/<system>', and        */
end_comment
begin_comment
comment|/* contains system-specific files that are always included first when    */
end_comment
begin_comment
comment|/* building the library.                                                 */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|__FTCONFIG_H__
end_ifndef
begin_define
DECL|macro|__FTCONFIG_H__
define|#
directive|define
name|__FTCONFIG_H__
end_define
begin_include
include|#
directive|include
file|<ft2build.h>
end_include
begin_include
include|#
directive|include
include|FT_CONFIG_OPTIONS_H
end_include
begin_include
include|#
directive|include
include|FT_CONFIG_STANDARD_LIBRARY_H
end_include
begin_macro
name|FT_BEGIN_HEADER
end_macro
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*               PLATFORM-SPECIFIC CONFIGURATION MACROS                  */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/* These macros can be toggled to suit a specific system.  The current   */
end_comment
begin_comment
comment|/* ones are defaults used to compile FreeType in an ANSI C environment   */
end_comment
begin_comment
comment|/* (16bit compilers are also supported).  Copy this file to your own     */
end_comment
begin_comment
comment|/* `freetype/builds/<system>' directory, and edit it to port the engine. */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_define
DECL|macro|HAVE_UNISTD_H
define|#
directive|define
name|HAVE_UNISTD_H
value|1
end_define
begin_define
DECL|macro|HAVE_FCNTL_H
define|#
directive|define
name|HAVE_FCNTL_H
value|1
end_define
begin_define
DECL|macro|SIZEOF_INT
define|#
directive|define
name|SIZEOF_INT
value|4
end_define
begin_define
DECL|macro|SIZEOF_LONG
define|#
directive|define
name|SIZEOF_LONG
value|4
end_define
begin_define
DECL|macro|FT_SIZEOF_INT
define|#
directive|define
name|FT_SIZEOF_INT
value|SIZEOF_INT
end_define
begin_define
DECL|macro|FT_SIZEOF_LONG
define|#
directive|define
name|FT_SIZEOF_LONG
value|SIZEOF_LONG
end_define
begin_comment
comment|/* Preferred alignment of data */
end_comment
begin_define
DECL|macro|FT_ALIGNMENT
define|#
directive|define
name|FT_ALIGNMENT
value|8
end_define
begin_comment
comment|/* FT_UNUSED is a macro used to indicate that a given parameter is not  */
end_comment
begin_comment
comment|/* used -- this is only used to get rid of unpleasant compiler warnings */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|FT_UNUSED
end_ifndef
begin_define
DECL|macro|FT_UNUSED
define|#
directive|define
name|FT_UNUSED
parameter_list|(
name|arg
parameter_list|)
value|( (arg) = (arg) )
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*                     AUTOMATIC CONFIGURATION MACROS                    */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/* These macros are computed from the ones defined above.  Don't touch   */
end_comment
begin_comment
comment|/* their definition, unless you know precisely what you are doing.  No   */
end_comment
begin_comment
comment|/* porter should need to mess with them.                                 */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/* IntN types                                                            */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/*   Used to guarantee the size of some specific integers.               */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_typedef
DECL|typedef|FT_Int16
typedef|typedef
name|signed
name|short
name|FT_Int16
typedef|;
end_typedef
begin_typedef
DECL|typedef|FT_UInt16
typedef|typedef
name|unsigned
name|short
name|FT_UInt16
typedef|;
end_typedef
begin_if
if|#
directive|if
name|FT_SIZEOF_INT
operator|==
literal|4
end_if
begin_typedef
DECL|typedef|FT_Int32
typedef|typedef
name|signed
name|int
name|FT_Int32
typedef|;
end_typedef
begin_typedef
DECL|typedef|FT_UInt32
typedef|typedef
name|unsigned
name|int
name|FT_UInt32
typedef|;
end_typedef
begin_elif
elif|#
directive|elif
name|FT_SIZEOF_LONG
operator|==
literal|4
end_elif
begin_typedef
DECL|typedef|FT_Int32
typedef|typedef
name|signed
name|long
name|FT_Int32
typedef|;
end_typedef
begin_typedef
DECL|typedef|FT_UInt32
typedef|typedef
name|unsigned
name|long
name|FT_UInt32
typedef|;
end_typedef
begin_else
else|#
directive|else
end_else
begin_error
error|#
directive|error
literal|"no 32bit type found -- please check your configuration files"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|FT_SIZEOF_LONG
operator|==
literal|8
end_if
begin_comment
comment|/* FT_LONG64 must be defined if a 64-bit type is available */
end_comment
begin_define
DECL|macro|FT_LONG64
define|#
directive|define
name|FT_LONG64
end_define
begin_define
DECL|macro|FT_INT64
define|#
directive|define
name|FT_INT64
value|long
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|/*************************************************************************/
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/* Many compilers provide the non-ANSI `long long' 64-bit type.  You can */
end_comment
begin_comment
comment|/* activate it by defining the FTCALC_USE_LONG_LONG macro in             */
end_comment
begin_comment
comment|/* `ftoption.h'.                                                         */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_comment
comment|/* Note that this will produce many -ansi warnings during library        */
end_comment
begin_comment
comment|/* compilation, and that in many cases,  the generated code will be      */
end_comment
begin_comment
comment|/* neither smaller nor faster!                                           */
end_comment
begin_comment
comment|/*                                                                       */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|FTCALC_USE_LONG_LONG
end_ifdef
begin_define
DECL|macro|FT_LONG64
define|#
directive|define
name|FT_LONG64
end_define
begin_define
DECL|macro|FT_INT64
define|#
directive|define
name|FT_INT64
value|long long
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* FTCALC_USE_LONG_LONG */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* FT_SIZEOF_LONG == 8 */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|FT_CONFIG_OPTION_INLINE_MULFIX
end_ifdef
begin_ifdef
ifdef|#
directive|ifdef
name|FT_MULFIX_ASSEMBLER
end_ifdef
begin_define
DECL|macro|FT_MULFIX_INLINED
define|#
directive|define
name|FT_MULFIX_INLINED
value|FT_MULFIX_ASSEMBLER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|FT_MAKE_OPTION_SINGLE_OBJECT
end_ifdef
begin_define
DECL|macro|FT_LOCAL
define|#
directive|define
name|FT_LOCAL
parameter_list|(
name|x
parameter_list|)
value|static  x
end_define
begin_define
DECL|macro|FT_LOCAL_DEF
define|#
directive|define
name|FT_LOCAL_DEF
parameter_list|(
name|x
parameter_list|)
value|static  x
end_define
begin_else
else|#
directive|else
end_else
begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef
begin_define
DECL|macro|FT_LOCAL
define|#
directive|define
name|FT_LOCAL
parameter_list|(
name|x
parameter_list|)
value|extern "C"  x
end_define
begin_define
DECL|macro|FT_LOCAL_DEF
define|#
directive|define
name|FT_LOCAL_DEF
parameter_list|(
name|x
parameter_list|)
value|extern "C"  x
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|FT_LOCAL
define|#
directive|define
name|FT_LOCAL
parameter_list|(
name|x
parameter_list|)
value|extern  x
end_define
begin_define
DECL|macro|FT_LOCAL_DEF
define|#
directive|define
name|FT_LOCAL_DEF
parameter_list|(
name|x
parameter_list|)
value|extern  x
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* FT_MAKE_OPTION_SINGLE_OBJECT */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|FT_BASE
end_ifndef
begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef
begin_define
DECL|macro|FT_BASE
define|#
directive|define
name|FT_BASE
parameter_list|(
name|x
parameter_list|)
value|extern "C"  x
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|FT_BASE
define|#
directive|define
name|FT_BASE
parameter_list|(
name|x
parameter_list|)
value|extern  x
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* !FT_BASE */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|FT_BASE_DEF
end_ifndef
begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef
begin_define
DECL|macro|FT_BASE_DEF
define|#
directive|define
name|FT_BASE_DEF
parameter_list|(
name|x
parameter_list|)
value|extern "C"  x
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|FT_BASE_DEF
define|#
directive|define
name|FT_BASE_DEF
parameter_list|(
name|x
parameter_list|)
value|extern  x
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* !FT_BASE_DEF */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|FT_EXPORT
end_ifndef
begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef
begin_define
DECL|macro|FT_EXPORT
define|#
directive|define
name|FT_EXPORT
parameter_list|(
name|x
parameter_list|)
value|extern "C"  x
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|FT_EXPORT
define|#
directive|define
name|FT_EXPORT
parameter_list|(
name|x
parameter_list|)
value|extern  x
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* !FT_EXPORT */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|FT_EXPORT_DEF
end_ifndef
begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef
begin_define
DECL|macro|FT_EXPORT_DEF
define|#
directive|define
name|FT_EXPORT_DEF
parameter_list|(
name|x
parameter_list|)
value|extern "C"  x
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|FT_EXPORT_DEF
define|#
directive|define
name|FT_EXPORT_DEF
parameter_list|(
name|x
parameter_list|)
value|extern  x
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* !FT_EXPORT_DEF */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|FT_EXPORT_VAR
end_ifndef
begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef
begin_define
DECL|macro|FT_EXPORT_VAR
define|#
directive|define
name|FT_EXPORT_VAR
parameter_list|(
name|x
parameter_list|)
value|extern "C"  x
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|FT_EXPORT_VAR
define|#
directive|define
name|FT_EXPORT_VAR
parameter_list|(
name|x
parameter_list|)
value|extern  x
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* !FT_EXPORT_VAR */
end_comment
begin_comment
comment|/* The following macros are needed to compile the library with a   */
end_comment
begin_comment
comment|/* C++ compiler and with 16bit compilers.                          */
end_comment
begin_comment
comment|/*                                                                 */
end_comment
begin_comment
comment|/* This is special.  Within C++, you must specify `extern "C"' for */
end_comment
begin_comment
comment|/* functions which are used via function pointers, and you also    */
end_comment
begin_comment
comment|/* must do that for structures which contain function pointers to  */
end_comment
begin_comment
comment|/* assure C linkage -- it's not possible to have (local) anonymous */
end_comment
begin_comment
comment|/* functions which are accessed by (global) function pointers.     */
end_comment
begin_comment
comment|/*                                                                 */
end_comment
begin_comment
comment|/*                                                                 */
end_comment
begin_comment
comment|/* FT_CALLBACK_DEF is used to _define_ a callback function.        */
end_comment
begin_comment
comment|/*                                                                 */
end_comment
begin_comment
comment|/* FT_CALLBACK_TABLE is used to _declare_ a constant variable that */
end_comment
begin_comment
comment|/* contains pointers to callback functions.                        */
end_comment
begin_comment
comment|/*                                                                 */
end_comment
begin_comment
comment|/* FT_CALLBACK_TABLE_DEF is used to _define_ a constant variable   */
end_comment
begin_comment
comment|/* that contains pointers to callback functions.                   */
end_comment
begin_comment
comment|/*                                                                 */
end_comment
begin_comment
comment|/*                                                                 */
end_comment
begin_comment
comment|/* Some 16bit compilers have to redefine these macros to insert    */
end_comment
begin_comment
comment|/* the infamous `_cdecl' or `__fastcall' declarations.             */
end_comment
begin_comment
comment|/*                                                                 */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|FT_CALLBACK_DEF
end_ifndef
begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef
begin_define
DECL|macro|FT_CALLBACK_DEF
define|#
directive|define
name|FT_CALLBACK_DEF
parameter_list|(
name|x
parameter_list|)
value|extern "C"  x
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|FT_CALLBACK_DEF
define|#
directive|define
name|FT_CALLBACK_DEF
parameter_list|(
name|x
parameter_list|)
value|static  x
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* FT_CALLBACK_DEF */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|FT_CALLBACK_TABLE
end_ifndef
begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef
begin_define
DECL|macro|FT_CALLBACK_TABLE
define|#
directive|define
name|FT_CALLBACK_TABLE
value|extern "C"
end_define
begin_define
DECL|macro|FT_CALLBACK_TABLE_DEF
define|#
directive|define
name|FT_CALLBACK_TABLE_DEF
value|extern "C"
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|FT_CALLBACK_TABLE
define|#
directive|define
name|FT_CALLBACK_TABLE
value|extern
end_define
begin_define
DECL|macro|FT_CALLBACK_TABLE_DEF
define|#
directive|define
name|FT_CALLBACK_TABLE_DEF
end_define
begin_comment
DECL|macro|FT_CALLBACK_TABLE_DEF
comment|/* nothing */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* FT_CALLBACK_TABLE */
end_comment
begin_macro
name|FT_END_HEADER
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* __FTCONFIG_H__ */
end_comment
begin_comment
comment|/* END */
end_comment
end_unit
