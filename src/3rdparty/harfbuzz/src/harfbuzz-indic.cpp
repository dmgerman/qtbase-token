begin_unit
begin_comment
comment|/*  * Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies)  *  * This is part of HarfBuzz, an OpenType Layout engine library.  *  * Permission is hereby granted, without written agreement and without  * license or royalty fees, to use, copy, modify, and distribute this  * software and its documentation for any purpose, provided that the  * above copyright notice and the following two paragraphs appear in  * all copies of this software.  *  * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR  * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES  * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN  * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH  * DAMAGE.  *  * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,  * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND  * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS  * ON AN "AS IS" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO  * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.  */
end_comment
begin_include
include|#
directive|include
file|"harfbuzz-shaper.h"
end_include
begin_include
include|#
directive|include
file|"harfbuzz-shaper-private.h"
end_include
begin_include
include|#
directive|include
file|<assert.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_define
DECL|macro|FLAG
define|#
directive|define
name|FLAG
parameter_list|(
name|x
parameter_list|)
value|(1<< (x))
end_define
begin_function
DECL|function|isLetter
specifier|static
name|HB_Bool
name|isLetter
parameter_list|(
name|HB_UChar16
name|ucs
parameter_list|)
block|{
specifier|const
name|int
name|test
init|=
name|FLAG
argument_list|(
name|HB_Letter_Uppercase
argument_list|)
operator||
name|FLAG
argument_list|(
name|HB_Letter_Lowercase
argument_list|)
operator||
name|FLAG
argument_list|(
name|HB_Letter_Titlecase
argument_list|)
operator||
name|FLAG
argument_list|(
name|HB_Letter_Modifier
argument_list|)
operator||
name|FLAG
argument_list|(
name|HB_Letter_Other
argument_list|)
decl_stmt|;
return|return
operator|(
name|FLAG
argument_list|(
name|HB_GetUnicodeCharCategory
argument_list|(
name|ucs
argument_list|)
argument_list|)
operator|&
name|test
operator|)
operator|!=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|isMark
specifier|static
name|HB_Bool
name|isMark
parameter_list|(
name|HB_UChar16
name|ucs
parameter_list|)
block|{
specifier|const
name|int
name|test
init|=
name|FLAG
argument_list|(
name|HB_Mark_NonSpacing
argument_list|)
operator||
name|FLAG
argument_list|(
name|HB_Mark_SpacingCombining
argument_list|)
operator||
name|FLAG
argument_list|(
name|HB_Mark_Enclosing
argument_list|)
decl_stmt|;
return|return
name|FLAG
argument_list|(
name|HB_GetUnicodeCharCategory
argument_list|(
name|ucs
argument_list|)
argument_list|)
operator|&
name|test
return|;
block|}
end_function
begin_enum
DECL|enum|Form
enum|enum
name|Form
block|{
DECL|enumerator|Invalid
name|Invalid
init|=
literal|0x0
block|,
DECL|enumerator|UnknownForm
name|UnknownForm
init|=
name|Invalid
block|,
DECL|enumerator|Consonant
name|Consonant
block|,
DECL|enumerator|Nukta
name|Nukta
block|,
DECL|enumerator|Halant
name|Halant
block|,
DECL|enumerator|Matra
name|Matra
block|,
DECL|enumerator|VowelMark
name|VowelMark
block|,
DECL|enumerator|StressMark
name|StressMark
block|,
DECL|enumerator|IndependentVowel
name|IndependentVowel
block|,
DECL|enumerator|LengthMark
name|LengthMark
block|,
DECL|enumerator|Control
name|Control
block|,
DECL|enumerator|Other
name|Other
block|}
enum|;
end_enum
begin_decl_stmt
DECL|variable|indicForms
specifier|static
specifier|const
name|unsigned
name|char
name|indicForms
index|[
literal|0xe00
operator|-
literal|0x900
index|]
init|=
block|{
comment|// Devangari
name|Invalid
block|,
name|VowelMark
block|,
name|VowelMark
block|,
name|VowelMark
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|Nukta
block|,
name|Other
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Halant
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|Other
block|,
name|StressMark
block|,
name|StressMark
block|,
name|StressMark
block|,
name|StressMark
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|VowelMark
block|,
name|VowelMark
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
comment|/* ??? */
block|,
name|Consonant
block|,
name|Consonant
block|,
comment|// Bengali
name|Invalid
block|,
name|VowelMark
block|,
name|VowelMark
block|,
name|VowelMark
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Invalid
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Invalid
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|Nukta
block|,
name|Other
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Halant
block|,
name|Consonant
block|,
name|UnknownForm
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|VowelMark
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|VowelMark
block|,
name|VowelMark
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
comment|// Gurmukhi
name|Invalid
block|,
name|VowelMark
block|,
name|VowelMark
block|,
name|VowelMark
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Invalid
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|Nukta
block|,
name|Other
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Halant
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Other
block|,
name|Other
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|StressMark
block|,
name|StressMark
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
comment|// Gujarati
name|Invalid
block|,
name|VowelMark
block|,
name|VowelMark
block|,
name|VowelMark
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|Nukta
block|,
name|Other
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Halant
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|Other
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|VowelMark
block|,
name|VowelMark
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
comment|// Oriya
name|Invalid
block|,
name|VowelMark
block|,
name|VowelMark
block|,
name|VowelMark
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Invalid
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Invalid
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|Nukta
block|,
name|Other
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Halant
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|Other
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|UnknownForm
block|,
name|LengthMark
block|,
name|LengthMark
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Consonant
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
comment|//Tamil
name|Invalid
block|,
name|Invalid
block|,
name|VowelMark
block|,
name|Other
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Halant
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|LengthMark
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
comment|// Telugu
name|Invalid
block|,
name|VowelMark
block|,
name|VowelMark
block|,
name|VowelMark
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Halant
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|LengthMark
block|,
name|Matra
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
comment|// Kannada
name|Invalid
block|,
name|Invalid
block|,
name|VowelMark
block|,
name|VowelMark
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|Nukta
block|,
name|Other
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Halant
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|LengthMark
block|,
name|LengthMark
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|VowelMark
block|,
name|VowelMark
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
comment|// Malayalam
name|Invalid
block|,
name|Invalid
block|,
name|VowelMark
block|,
name|VowelMark
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|UnknownForm
block|,
name|UnknownForm
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Halant
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Matra
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
comment|// Sinhala
name|Invalid
block|,
name|Invalid
block|,
name|VowelMark
block|,
name|VowelMark
block|,
name|Invalid
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|IndependentVowel
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Consonant
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Halant
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Invalid
block|,
name|Matra
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Matra
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Invalid
block|,
name|Matra
block|,
name|Matra
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|,
name|Other
block|, }
decl_stmt|;
end_decl_stmt
begin_enum
DECL|enum|Position
enum|enum
name|Position
block|{
DECL|enumerator|None
name|None
block|,
DECL|enumerator|Pre
name|Pre
block|,
DECL|enumerator|Above
name|Above
block|,
DECL|enumerator|Below
name|Below
block|,
DECL|enumerator|Post
name|Post
block|,
DECL|enumerator|Split
name|Split
block|,
DECL|enumerator|Base
name|Base
block|,
DECL|enumerator|Reph
name|Reph
block|,
DECL|enumerator|Vattu
name|Vattu
block|,
DECL|enumerator|Inherit
name|Inherit
block|}
enum|;
end_enum
begin_decl_stmt
DECL|variable|indicPosition
specifier|static
specifier|const
name|unsigned
name|char
name|indicPosition
index|[
literal|0xe00
operator|-
literal|0x900
index|]
init|=
block|{
comment|// Devanagari
name|None
block|,
name|Above
block|,
name|Above
block|,
name|Post
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Post
block|,
name|Pre
block|,
name|Post
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Above
block|,
name|Above
block|,
name|Above
block|,
name|Above
block|,
name|Post
block|,
name|Post
block|,
name|Post
block|,
name|Post
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Above
block|,
name|Below
block|,
name|Above
block|,
name|Above
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Below
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
comment|// Bengali
name|None
block|,
name|Above
block|,
name|Post
block|,
name|Post
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|Post
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Below
block|,
name|None
block|,
name|Post
block|,
name|Pre
block|,
name|Post
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|Pre
block|,
name|Pre
block|,
name|None
block|,
name|None
block|,
name|Split
block|,
name|Split
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Post
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Below
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
comment|// Gurmukhi
name|None
block|,
name|Above
block|,
name|Above
block|,
name|Post
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Post
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|Below
block|,
name|None
block|,
name|Post
block|,
name|Pre
block|,
name|Post
block|,
name|Below
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Above
block|,
name|Above
block|,
name|None
block|,
name|None
block|,
name|Above
block|,
name|Above
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Above
block|,
name|Above
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
comment|// Gujarati
name|None
block|,
name|Above
block|,
name|Above
block|,
name|Post
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Post
block|,
name|Pre
block|,
name|Post
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Above
block|,
name|None
block|,
name|Above
block|,
name|Above
block|,
name|Post
block|,
name|None
block|,
name|Post
block|,
name|Post
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Below
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
comment|// Oriya
name|None
block|,
name|Above
block|,
name|Post
block|,
name|Post
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|None
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|None
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Post
block|,
name|Below
block|,
name|None
block|,
name|Below
block|,
name|Below
block|,
name|None
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Post
block|,
name|Above
block|,
name|Post
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Pre
block|,
name|Split
block|,
name|None
block|,
name|None
block|,
name|Split
block|,
name|Split
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Above
block|,
name|Post
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Post
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
comment|// Tamil
name|None
block|,
name|None
block|,
name|Above
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Post
block|,
name|Post
block|,
name|Above
block|,
name|Below
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Pre
block|,
name|Pre
block|,
name|Pre
block|,
name|None
block|,
name|Split
block|,
name|Split
block|,
name|Split
block|,
name|Halant
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Post
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
comment|// Telugu
name|None
block|,
name|Post
block|,
name|Post
block|,
name|Post
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|None
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|None
block|,
name|Below
block|,
name|Below
block|,
name|None
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Post
block|,
name|Above
block|,
name|Above
block|,
name|Post
block|,
name|Post
block|,
name|Post
block|,
name|Post
block|,
name|None
block|,
name|Above
block|,
name|Above
block|,
name|Split
block|,
name|None
block|,
name|Post
block|,
name|Above
block|,
name|Above
block|,
name|Halant
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Above
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
comment|// Kannada
name|None
block|,
name|None
block|,
name|Post
block|,
name|Post
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|None
block|,
name|Below
block|,
name|Below
block|,
name|None
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Post
block|,
name|Above
block|,
name|Split
block|,
name|Post
block|,
name|Post
block|,
name|Post
block|,
name|Post
block|,
name|None
block|,
name|Above
block|,
name|Split
block|,
name|Split
block|,
name|None
block|,
name|Split
block|,
name|Split
block|,
name|Above
block|,
name|Halant
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Post
block|,
name|Post
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Below
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
comment|// Malayalam
name|None
block|,
name|None
block|,
name|Post
block|,
name|Post
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Post
block|,
name|Pre
block|,
name|None
block|,
name|Below
block|,
name|None
block|,
name|None
block|,
name|Post
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Post
block|,
name|Post
block|,
name|Post
block|,
name|Post
block|,
name|Post
block|,
name|Post
block|,
name|None
block|,
name|None
block|,
name|Pre
block|,
name|Pre
block|,
name|Pre
block|,
name|None
block|,
name|Split
block|,
name|Split
block|,
name|Split
block|,
name|Halant
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Post
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
comment|// Sinhala
name|None
block|,
name|None
block|,
name|Post
block|,
name|Post
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Post
block|,
name|Post
block|,
name|Post
block|,
name|Above
block|,
name|Above
block|,
name|Below
block|,
name|None
block|,
name|Below
block|,
name|None
block|,
name|Post
block|,
name|Pre
block|,
name|Split
block|,
name|Pre
block|,
name|Split
block|,
name|Split
block|,
name|Split
block|,
name|Post
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|Post
block|,
name|Post
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|,
name|None
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|form
specifier|static
specifier|inline
name|Form
name|form
parameter_list|(
name|unsigned
name|short
name|uc
parameter_list|)
block|{
if|if
condition|(
name|uc
argument_list|<
literal|0x900
operator|||
name|uc
argument_list|>
literal|0xdff
condition|)
block|{
if|if
condition|(
name|uc
operator|==
literal|0x25cc
condition|)
return|return
name|Consonant
return|;
if|if
condition|(
name|uc
operator|==
literal|0x200c
operator|||
name|uc
operator|==
literal|0x200d
condition|)
return|return
name|Control
return|;
return|return
name|Other
return|;
block|}
return|return
operator|(
name|Form
operator|)
name|indicForms
index|[
name|uc
operator|-
literal|0x900
index|]
return|;
block|}
end_function
begin_function
DECL|function|indic_position
specifier|static
specifier|inline
name|Position
name|indic_position
parameter_list|(
name|unsigned
name|short
name|uc
parameter_list|)
block|{
if|if
condition|(
name|uc
argument_list|<
literal|0x900
operator|||
name|uc
argument_list|>
literal|0xdff
condition|)
return|return
name|None
return|;
return|return
operator|(
name|Position
operator|)
name|indicPosition
index|[
name|uc
operator|-
literal|0x900
index|]
return|;
block|}
end_function
begin_enum
DECL|enum|IndicScriptProperties
enum|enum
name|IndicScriptProperties
block|{
DECL|enumerator|HasReph
name|HasReph
init|=
literal|0x01
block|,
DECL|enumerator|HasSplit
name|HasSplit
init|=
literal|0x02
block|}
enum|;
end_enum
begin_decl_stmt
DECL|variable|scriptProperties
specifier|const
name|hb_uint8
name|scriptProperties
index|[
literal|10
index|]
init|=
block|{
comment|// Devanagari,
name|HasReph
block|,
comment|// Bengali,
name|HasReph
operator||
name|HasSplit
block|,
comment|// Gurmukhi,
literal|0
block|,
comment|// Gujarati,
name|HasReph
block|,
comment|// Oriya,
name|HasReph
operator||
name|HasSplit
block|,
comment|// Tamil,
name|HasSplit
block|,
comment|// Telugu,
name|HasSplit
block|,
comment|// Kannada,
name|HasSplit
operator||
name|HasReph
block|,
comment|// Malayalam,
name|HasSplit
block|,
comment|// Sinhala,
name|HasSplit
block|}
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|IndicOrdering
struct|struct
name|IndicOrdering
block|{
DECL|member|form
name|Form
name|form
decl_stmt|;
DECL|member|position
name|Position
name|position
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|devanagari_order
specifier|static
specifier|const
name|IndicOrdering
name|devanagari_order
index|[]
init|=
block|{
block|{
name|Consonant
block|,
name|Below
block|}
block|,
block|{
name|Matra
block|,
name|Below
block|}
block|,
block|{
name|VowelMark
block|,
name|Below
block|}
block|,
block|{
name|StressMark
block|,
name|Below
block|}
block|,
block|{
name|Matra
block|,
name|Above
block|}
block|,
block|{
name|Matra
block|,
name|Post
block|}
block|,
block|{
name|Consonant
block|,
name|Reph
block|}
block|,
block|{
name|VowelMark
block|,
name|Above
block|}
block|,
block|{
name|StressMark
block|,
name|Above
block|}
block|,
block|{
name|VowelMark
block|,
name|Post
block|}
block|,
block|{
operator|(
name|Form
operator|)
literal|0
block|,
name|None
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|bengali_order
specifier|static
specifier|const
name|IndicOrdering
name|bengali_order
index|[]
init|=
block|{
block|{
name|Consonant
block|,
name|Below
block|}
block|,
block|{
name|Matra
block|,
name|Below
block|}
block|,
block|{
name|Matra
block|,
name|Above
block|}
block|,
block|{
name|Consonant
block|,
name|Reph
block|}
block|,
block|{
name|VowelMark
block|,
name|Above
block|}
block|,
block|{
name|Consonant
block|,
name|Post
block|}
block|,
block|{
name|Matra
block|,
name|Post
block|}
block|,
block|{
name|VowelMark
block|,
name|Post
block|}
block|,
block|{
operator|(
name|Form
operator|)
literal|0
block|,
name|None
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|gurmukhi_order
specifier|static
specifier|const
name|IndicOrdering
name|gurmukhi_order
index|[]
init|=
block|{
block|{
name|Consonant
block|,
name|Below
block|}
block|,
block|{
name|Matra
block|,
name|Below
block|}
block|,
block|{
name|Matra
block|,
name|Above
block|}
block|,
block|{
name|Consonant
block|,
name|Post
block|}
block|,
block|{
name|Matra
block|,
name|Post
block|}
block|,
block|{
name|VowelMark
block|,
name|Above
block|}
block|,
block|{
operator|(
name|Form
operator|)
literal|0
block|,
name|None
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|tamil_order
specifier|static
specifier|const
name|IndicOrdering
name|tamil_order
index|[]
init|=
block|{
block|{
name|Matra
block|,
name|Above
block|}
block|,
block|{
name|Matra
block|,
name|Post
block|}
block|,
block|{
name|VowelMark
block|,
name|Post
block|}
block|,
block|{
operator|(
name|Form
operator|)
literal|0
block|,
name|None
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|telugu_order
specifier|static
specifier|const
name|IndicOrdering
name|telugu_order
index|[]
init|=
block|{
block|{
name|Matra
block|,
name|Above
block|}
block|,
block|{
name|Matra
block|,
name|Below
block|}
block|,
block|{
name|Matra
block|,
name|Post
block|}
block|,
block|{
name|Consonant
block|,
name|Below
block|}
block|,
block|{
name|Consonant
block|,
name|Post
block|}
block|,
block|{
name|VowelMark
block|,
name|Post
block|}
block|,
block|{
operator|(
name|Form
operator|)
literal|0
block|,
name|None
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|kannada_order
specifier|static
specifier|const
name|IndicOrdering
name|kannada_order
index|[]
init|=
block|{
block|{
name|Matra
block|,
name|Above
block|}
block|,
block|{
name|Matra
block|,
name|Post
block|}
block|,
block|{
name|Consonant
block|,
name|Below
block|}
block|,
block|{
name|Consonant
block|,
name|Post
block|}
block|,
block|{
name|LengthMark
block|,
name|Post
block|}
block|,
block|{
name|Consonant
block|,
name|Reph
block|}
block|,
block|{
name|VowelMark
block|,
name|Post
block|}
block|,
block|{
operator|(
name|Form
operator|)
literal|0
block|,
name|None
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|malayalam_order
specifier|static
specifier|const
name|IndicOrdering
name|malayalam_order
index|[]
init|=
block|{
block|{
name|Consonant
block|,
name|Below
block|}
block|,
block|{
name|Matra
block|,
name|Below
block|}
block|,
block|{
name|Consonant
block|,
name|Reph
block|}
block|,
block|{
name|Consonant
block|,
name|Post
block|}
block|,
block|{
name|Matra
block|,
name|Post
block|}
block|,
block|{
name|VowelMark
block|,
name|Post
block|}
block|,
block|{
operator|(
name|Form
operator|)
literal|0
block|,
name|None
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|sinhala_order
specifier|static
specifier|const
name|IndicOrdering
name|sinhala_order
index|[]
init|=
block|{
block|{
name|Matra
block|,
name|Below
block|}
block|,
block|{
name|Matra
block|,
name|Above
block|}
block|,
block|{
name|Matra
block|,
name|Post
block|}
block|,
block|{
name|VowelMark
block|,
name|Post
block|}
block|,
block|{
operator|(
name|Form
operator|)
literal|0
block|,
name|None
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|indic_order
specifier|static
specifier|const
name|IndicOrdering
modifier|*
specifier|const
name|indic_order
index|[]
init|=
block|{
name|devanagari_order
block|,
comment|// Devanagari
name|bengali_order
block|,
comment|// Bengali
name|gurmukhi_order
block|,
comment|// Gurmukhi
name|devanagari_order
block|,
comment|// Gujarati
name|bengali_order
block|,
comment|// Oriya
name|tamil_order
block|,
comment|// Tamil
name|telugu_order
block|,
comment|// Telugu
name|kannada_order
block|,
comment|// Kannada
name|malayalam_order
block|,
comment|// Malayalam
name|sinhala_order
comment|// Sinhala
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|// vowel matras that have to be split into two parts.
end_comment
begin_decl_stmt
DECL|variable|split_matras
specifier|static
specifier|const
name|unsigned
name|short
name|split_matras
index|[]
init|=
block|{
comment|//  matra, split1, split2, split3
comment|// bengalis
literal|0x9cb
block|,
literal|0x9c7
block|,
literal|0x9be
block|,
literal|0x0
block|,
literal|0x9cc
block|,
literal|0x9c7
block|,
literal|0x9d7
block|,
literal|0x0
block|,
comment|// oriya
literal|0xb48
block|,
literal|0xb47
block|,
literal|0xb56
block|,
literal|0x0
block|,
literal|0xb4b
block|,
literal|0xb47
block|,
literal|0xb3e
block|,
literal|0x0
block|,
literal|0xb4c
block|,
literal|0xb47
block|,
literal|0xb57
block|,
literal|0x0
block|,
comment|// tamil
literal|0xbca
block|,
literal|0xbc6
block|,
literal|0xbbe
block|,
literal|0x0
block|,
literal|0xbcb
block|,
literal|0xbc7
block|,
literal|0xbbe
block|,
literal|0x0
block|,
literal|0xbcc
block|,
literal|0xbc6
block|,
literal|0xbd7
block|,
literal|0x0
block|,
comment|// telugu
literal|0xc48
block|,
literal|0xc46
block|,
literal|0xc56
block|,
literal|0x0
block|,
comment|// kannada
literal|0xcc0
block|,
literal|0xcbf
block|,
literal|0xcd5
block|,
literal|0x0
block|,
literal|0xcc7
block|,
literal|0xcc6
block|,
literal|0xcd5
block|,
literal|0x0
block|,
literal|0xcc8
block|,
literal|0xcc6
block|,
literal|0xcd6
block|,
literal|0x0
block|,
literal|0xcca
block|,
literal|0xcc6
block|,
literal|0xcc2
block|,
literal|0x0
block|,
literal|0xccb
block|,
literal|0xcc6
block|,
literal|0xcc2
block|,
literal|0xcd5
block|,
comment|// malayalam
literal|0xd4a
block|,
literal|0xd46
block|,
literal|0xd3e
block|,
literal|0x0
block|,
literal|0xd4b
block|,
literal|0xd47
block|,
literal|0xd3e
block|,
literal|0x0
block|,
literal|0xd4c
block|,
literal|0xd46
block|,
literal|0xd57
block|,
literal|0x0
block|,
comment|// sinhala
literal|0xdda
block|,
literal|0xdd9
block|,
literal|0xdca
block|,
literal|0x0
block|,
literal|0xddc
block|,
literal|0xdd9
block|,
literal|0xdcf
block|,
literal|0x0
block|,
literal|0xddd
block|,
literal|0xdd9
block|,
literal|0xdcf
block|,
literal|0xdca
block|,
literal|0xdde
block|,
literal|0xdd9
block|,
literal|0xddf
block|,
literal|0x0
block|,
literal|0xffff
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|splitMatra
specifier|static
specifier|inline
name|void
name|splitMatra
parameter_list|(
name|unsigned
name|short
modifier|*
name|reordered
parameter_list|,
name|int
name|matra
parameter_list|,
name|int
modifier|&
name|len
parameter_list|)
block|{
name|unsigned
name|short
name|matra_uc
init|=
name|reordered
index|[
name|matra
index|]
decl_stmt|;
comment|//qDebug("matra=%d, reordered[matra]=%x", matra, reordered[matra]);
specifier|const
name|unsigned
name|short
modifier|*
name|split
init|=
name|split_matras
decl_stmt|;
while|while
condition|(
name|split
index|[
literal|0
index|]
operator|<
name|matra_uc
condition|)
name|split
operator|+=
literal|4
expr_stmt|;
name|assert
argument_list|(
operator|*
name|split
operator|==
name|matra_uc
argument_list|)
expr_stmt|;
operator|++
name|split
expr_stmt|;
name|int
name|added_chars
init|=
name|split
index|[
literal|2
index|]
operator|==
literal|0x0
condition|?
literal|1
else|:
literal|2
decl_stmt|;
name|memmove
argument_list|(
name|reordered
operator|+
name|matra
operator|+
name|added_chars
argument_list|,
name|reordered
operator|+
name|matra
argument_list|,
operator|(
name|len
operator|-
name|matra
operator|)
operator|*
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
argument_list|)
expr_stmt|;
name|reordered
index|[
name|matra
index|]
operator|=
name|split
index|[
literal|0
index|]
expr_stmt|;
name|reordered
index|[
name|matra
operator|+
literal|1
index|]
operator|=
name|split
index|[
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|added_chars
operator|==
literal|2
condition|)
name|reordered
index|[
name|matra
operator|+
literal|2
index|]
operator|=
name|split
index|[
literal|2
index|]
expr_stmt|;
name|len
operator|+=
name|added_chars
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|NO_OPENTYPE
end_ifndef
begin_decl_stmt
DECL|variable|indic_features
specifier|static
specifier|const
name|HB_OpenTypeFeature
name|indic_features
index|[]
init|=
block|{
block|{
name|HB_MAKE_TAG
argument_list|(
literal|'l'
argument_list|,
literal|'o'
argument_list|,
literal|'c'
argument_list|,
literal|'a'
argument_list|)
block|,
name|LocaProperty
block|}
block|,
block|{
name|HB_MAKE_TAG
argument_list|(
literal|'c'
argument_list|,
literal|'c'
argument_list|,
literal|'m'
argument_list|,
literal|'p'
argument_list|)
block|,
name|CcmpProperty
block|}
block|,
block|{
name|HB_MAKE_TAG
argument_list|(
literal|'i'
argument_list|,
literal|'n'
argument_list|,
literal|'i'
argument_list|,
literal|'t'
argument_list|)
block|,
name|InitProperty
block|}
block|,
block|{
name|HB_MAKE_TAG
argument_list|(
literal|'n'
argument_list|,
literal|'u'
argument_list|,
literal|'k'
argument_list|,
literal|'t'
argument_list|)
block|,
name|NuktaProperty
block|}
block|,
block|{
name|HB_MAKE_TAG
argument_list|(
literal|'a'
argument_list|,
literal|'k'
argument_list|,
literal|'h'
argument_list|,
literal|'n'
argument_list|)
block|,
name|AkhantProperty
block|}
block|,
block|{
name|HB_MAKE_TAG
argument_list|(
literal|'r'
argument_list|,
literal|'p'
argument_list|,
literal|'h'
argument_list|,
literal|'f'
argument_list|)
block|,
name|RephProperty
block|}
block|,
block|{
name|HB_MAKE_TAG
argument_list|(
literal|'b'
argument_list|,
literal|'l'
argument_list|,
literal|'w'
argument_list|,
literal|'f'
argument_list|)
block|,
name|BelowFormProperty
block|}
block|,
block|{
name|HB_MAKE_TAG
argument_list|(
literal|'h'
argument_list|,
literal|'a'
argument_list|,
literal|'l'
argument_list|,
literal|'f'
argument_list|)
block|,
name|HalfFormProperty
block|}
block|,
block|{
name|HB_MAKE_TAG
argument_list|(
literal|'p'
argument_list|,
literal|'s'
argument_list|,
literal|'t'
argument_list|,
literal|'f'
argument_list|)
block|,
name|PostFormProperty
block|}
block|,
block|{
name|HB_MAKE_TAG
argument_list|(
literal|'c'
argument_list|,
literal|'j'
argument_list|,
literal|'c'
argument_list|,
literal|'t'
argument_list|)
block|,
name|ConjunctFormProperty
block|}
block|,
block|{
name|HB_MAKE_TAG
argument_list|(
literal|'v'
argument_list|,
literal|'a'
argument_list|,
literal|'t'
argument_list|,
literal|'u'
argument_list|)
block|,
name|VattuProperty
block|}
block|,
block|{
name|HB_MAKE_TAG
argument_list|(
literal|'p'
argument_list|,
literal|'r'
argument_list|,
literal|'e'
argument_list|,
literal|'s'
argument_list|)
block|,
name|PreSubstProperty
block|}
block|,
block|{
name|HB_MAKE_TAG
argument_list|(
literal|'b'
argument_list|,
literal|'l'
argument_list|,
literal|'w'
argument_list|,
literal|'s'
argument_list|)
block|,
name|BelowSubstProperty
block|}
block|,
block|{
name|HB_MAKE_TAG
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|'v'
argument_list|,
literal|'s'
argument_list|)
block|,
name|AboveSubstProperty
block|}
block|,
block|{
name|HB_MAKE_TAG
argument_list|(
literal|'p'
argument_list|,
literal|'s'
argument_list|,
literal|'t'
argument_list|,
literal|'s'
argument_list|)
block|,
name|PostSubstProperty
block|}
block|,
block|{
name|HB_MAKE_TAG
argument_list|(
literal|'h'
argument_list|,
literal|'a'
argument_list|,
literal|'l'
argument_list|,
literal|'n'
argument_list|)
block|,
name|HalantProperty
block|}
block|,
block|{
name|HB_MAKE_TAG
argument_list|(
literal|'c'
argument_list|,
literal|'a'
argument_list|,
literal|'l'
argument_list|,
literal|'t'
argument_list|)
block|,
name|IndicCaltProperty
block|}
block|,
block|{
literal|0
block|,
literal|0
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// #define INDIC_DEBUG
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|INDIC_DEBUG
end_ifdef
begin_define
DECL|macro|IDEBUG
define|#
directive|define
name|IDEBUG
value|hb_debug
end_define
begin_include
include|#
directive|include
file|<stdarg.h>
end_include
begin_function
DECL|function|hb_debug
specifier|static
name|void
name|hb_debug
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|ap
decl_stmt|;
name|va_start
argument_list|(
name|ap
argument_list|,
name|msg
argument_list|)
expr_stmt|;
comment|// use variable arg list
name|vfprintf
argument_list|(
name|stderr
argument_list|,
name|msg
argument_list|,
name|ap
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|ap
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|IDEBUG
define|#
directive|define
name|IDEBUG
value|if(0) printf
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
comment|//def INDIC_DEBUG
end_comment
begin_endif
unit|static QString propertiesToString(int properties) {     QString res;     properties = ~properties;     if (properties& LocaProperty)         res += "Loca ";     if (properties& CcmpProperty)         res += "Ccmp ";     if (properties& InitProperty)         res += "Init ";     if (properties& NuktaProperty)         res += "Nukta ";     if (properties& AkhantProperty)         res += "Akhant ";     if (properties& RephProperty)         res += "Reph ";     if (properties& PreFormProperty)         res += "PreForm ";     if (properties& BelowFormProperty)         res += "BelowForm ";     if (properties& AboveFormProperty)         res += "AboveForm ";     if (properties& HalfFormProperty)         res += "HalfForm ";     if (properties& PostFormProperty)         res += "PostForm ";     if (properties& ConjunctFormProperty)         res += "PostForm ";     if (properties& VattuProperty)         res += "Vattu ";     if (properties& PreSubstProperty)         res += "PreSubst ";     if (properties& BelowSubstProperty)         res += "BelowSubst ";     if (properties& AboveSubstProperty)         res += "AboveSubst ";     if (properties& PostSubstProperty)         res += "PostSubst ";     if (properties& HalantProperty)         res += "Halant ";     if (properties& CligProperty)         res += "Clig ";     if (properties& IndicCaltProperty)         res += "Calt ";     return res; }
endif|#
directive|endif
end_endif
begin_function
DECL|function|indic_shape_syllable
specifier|static
name|bool
name|indic_shape_syllable
parameter_list|(
name|HB_Bool
name|openType
parameter_list|,
name|HB_ShaperItem
modifier|*
name|item
parameter_list|,
name|bool
name|invalid
parameter_list|)
block|{
name|HB_Script
name|script
init|=
name|item
operator|->
name|item
operator|.
name|script
decl_stmt|;
name|assert
argument_list|(
name|script
operator|>=
name|HB_Script_Devanagari
operator|&&
name|script
operator|<=
name|HB_Script_Sinhala
argument_list|)
expr_stmt|;
specifier|const
name|unsigned
name|short
name|script_base
init|=
literal|0x0900
operator|+
literal|0x80
operator|*
operator|(
name|script
operator|-
name|HB_Script_Devanagari
operator|)
decl_stmt|;
specifier|const
name|unsigned
name|short
name|ra
init|=
name|script_base
operator|+
literal|0x30
decl_stmt|;
specifier|const
name|unsigned
name|short
name|halant
init|=
name|script_base
operator|+
literal|0x4d
decl_stmt|;
specifier|const
name|unsigned
name|short
name|nukta
init|=
name|script_base
operator|+
literal|0x3c
decl_stmt|;
name|bool
name|control
init|=
literal|false
decl_stmt|;
name|int
name|len
init|=
operator|(
name|int
operator|)
name|item
operator|->
name|item
operator|.
name|length
decl_stmt|;
name|IDEBUG
argument_list|(
literal|">>>>> indic shape: from=%d, len=%d invalid=%d"
argument_list|,
name|item
operator|->
name|item
operator|.
name|pos
argument_list|,
name|item
operator|->
name|item
operator|.
name|length
argument_list|,
name|invalid
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|int
operator|)
name|item
operator|->
name|num_glyphs
operator|<
name|len
operator|+
literal|4
condition|)
block|{
name|item
operator|->
name|num_glyphs
operator|=
name|len
operator|+
literal|4
expr_stmt|;
return|return
literal|false
return|;
block|}
name|HB_STACKARRAY
argument_list|(
name|HB_UChar16
argument_list|,
name|reordered
argument_list|,
name|len
operator|+
literal|4
argument_list|)
expr_stmt|;
name|HB_STACKARRAY
argument_list|(
name|hb_uint8
argument_list|,
name|position
argument_list|,
name|len
operator|+
literal|4
argument_list|)
expr_stmt|;
name|unsigned
name|char
name|properties
init|=
name|scriptProperties
index|[
name|script
operator|-
name|HB_Script_Devanagari
index|]
decl_stmt|;
if|if
condition|(
name|invalid
condition|)
block|{
operator|*
name|reordered
operator|=
literal|0x25cc
expr_stmt|;
name|memcpy
argument_list|(
name|reordered
operator|+
literal|1
argument_list|,
name|item
operator|->
name|string
operator|+
name|item
operator|->
name|item
operator|.
name|pos
argument_list|,
name|len
operator|*
sizeof|sizeof
argument_list|(
name|HB_UChar16
argument_list|)
argument_list|)
expr_stmt|;
name|len
operator|++
expr_stmt|;
block|}
else|else
block|{
name|memcpy
argument_list|(
name|reordered
argument_list|,
name|item
operator|->
name|string
operator|+
name|item
operator|->
name|item
operator|.
name|pos
argument_list|,
name|len
operator|*
sizeof|sizeof
argument_list|(
name|HB_UChar16
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reordered
index|[
name|len
operator|-
literal|1
index|]
operator|==
literal|0x200c
condition|)
comment|// zero width non joiner
name|len
operator|--
expr_stmt|;
name|int
name|i
decl_stmt|;
name|int
name|base
init|=
literal|0
decl_stmt|;
name|int
name|reph
init|=
operator|-
literal|1
decl_stmt|;
ifdef|#
directive|ifdef
name|INDIC_DEBUG
name|IDEBUG
argument_list|(
literal|"original:"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|IDEBUG
argument_list|(
literal|"    %d: %4x"
argument_list|,
name|i
argument_list|,
name|reordered
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|len
operator|!=
literal|1
condition|)
block|{
name|HB_UChar16
modifier|*
name|uc
init|=
name|reordered
decl_stmt|;
name|bool
name|beginsWithRa
init|=
literal|false
decl_stmt|;
comment|// Rule 1: find base consonant
comment|//
comment|// The shaping engine finds the base consonant of the
comment|// syllable, using the following algorithm: starting from the
comment|// end of the syllable, move backwards until a consonant is
comment|// found that does not have a below-base or post-base form
comment|// (post-base forms have to follow below-base forms), or
comment|// arrive at the first consonant. The consonant stopped at
comment|// will be the base.
comment|//
comment|//  * If the syllable starts with Ra + H (in a script that has
comment|//    'Reph'), Ra is excluded from candidates for base
comment|//    consonants.
comment|//
comment|// * In Kannada and Telugu, the base consonant cannot be
comment|//   farther than 3 consonants from the end of the syllable.
comment|// #### replace the HasReph property by testing if the feature exists in the font!
if|if
condition|(
name|form
argument_list|(
operator|*
name|uc
argument_list|)
operator|==
name|Consonant
operator|||
operator|(
name|script
operator|==
name|HB_Script_Bengali
operator|&&
name|form
argument_list|(
operator|*
name|uc
argument_list|)
operator|==
name|IndependentVowel
operator|)
condition|)
block|{
if|if
condition|(
operator|(
name|properties
operator|&
name|HasReph
operator|)
operator|&&
operator|(
name|len
operator|>
literal|2
operator|)
operator|&&
operator|(
operator|*
name|uc
operator|==
name|ra
operator|||
operator|*
name|uc
operator|==
literal|0x9f0
operator|)
operator|&&
operator|*
operator|(
name|uc
operator|+
literal|1
operator|)
operator|==
name|halant
condition|)
name|beginsWithRa
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|beginsWithRa
operator|&&
name|form
argument_list|(
operator|*
operator|(
name|uc
operator|+
literal|2
operator|)
argument_list|)
operator|==
name|Control
condition|)
name|beginsWithRa
operator|=
literal|false
expr_stmt|;
name|base
operator|=
operator|(
name|beginsWithRa
condition|?
literal|2
else|:
literal|0
operator|)
expr_stmt|;
name|IDEBUG
argument_list|(
literal|"    length = %d, beginsWithRa = %d, base=%d"
argument_list|,
name|len
argument_list|,
name|beginsWithRa
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|int
name|lastConsonant
init|=
literal|0
decl_stmt|;
name|int
name|matra
init|=
operator|-
literal|1
decl_stmt|;
comment|// we remember:
comment|// * the last consonant since we need it for rule 2
comment|// * the matras position for rule 3 and 4
comment|// figure out possible base glyphs
name|memset
argument_list|(
name|position
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|script
operator|==
name|HB_Script_Devanagari
operator|||
name|script
operator|==
name|HB_Script_Gujarati
condition|)
block|{
name|bool
name|vattu
init|=
literal|false
decl_stmt|;
for|for
control|(
name|i
operator|=
name|base
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|position
index|[
name|i
index|]
operator|=
name|form
argument_list|(
name|uc
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|position
index|[
name|i
index|]
operator|==
name|Consonant
condition|)
block|{
name|lastConsonant
operator|=
name|i
expr_stmt|;
name|vattu
operator|=
operator|(
operator|!
name|vattu
operator|&&
name|uc
index|[
name|i
index|]
operator|==
name|ra
operator|)
expr_stmt|;
if|if
condition|(
name|vattu
condition|)
block|{
name|IDEBUG
argument_list|(
literal|"excluding vattu glyph at %d from base candidates"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|position
index|[
name|i
index|]
operator|=
name|Vattu
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|position
index|[
name|i
index|]
operator|==
name|Matra
condition|)
block|{
name|matra
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
name|base
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|position
index|[
name|i
index|]
operator|=
name|form
argument_list|(
name|uc
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|position
index|[
name|i
index|]
operator|==
name|Consonant
condition|)
name|lastConsonant
operator|=
name|i
expr_stmt|;
elseif|else
if|if
condition|(
name|matra
operator|<
literal|0
operator|&&
name|position
index|[
name|i
index|]
operator|==
name|Matra
condition|)
name|matra
operator|=
name|i
expr_stmt|;
block|}
block|}
name|int
name|skipped
init|=
literal|0
decl_stmt|;
name|Position
name|pos
init|=
name|Post
decl_stmt|;
for|for
control|(
name|i
operator|=
name|len
operator|-
literal|1
init|;
name|i
operator|>=
name|base
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|position
index|[
name|i
index|]
operator|!=
name|Consonant
operator|&&
operator|(
name|position
index|[
name|i
index|]
operator|!=
name|Control
operator|||
name|script
operator|==
name|HB_Script_Kannada
operator|)
condition|)
continue|continue;
if|if
condition|(
name|i
operator|<
name|len
operator|-
literal|1
operator|&&
name|position
index|[
name|i
index|]
operator|==
name|Control
operator|&&
name|position
index|[
name|i
operator|+
literal|1
index|]
operator|==
name|Consonant
condition|)
block|{
name|base
operator|=
name|i
operator|+
literal|1
expr_stmt|;
break|break;
block|}
name|Position
name|charPosition
init|=
name|indic_position
argument_list|(
name|uc
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|==
name|Post
operator|&&
name|charPosition
operator|==
name|Post
condition|)
block|{
name|pos
operator|=
name|Post
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|pos
operator|==
name|Post
operator|||
name|pos
operator|==
name|Below
operator|)
operator|&&
name|charPosition
operator|==
name|Below
condition|)
block|{
if|if
condition|(
name|script
operator|==
name|HB_Script_Devanagari
operator|||
name|script
operator|==
name|HB_Script_Gujarati
condition|)
name|base
operator|=
name|i
expr_stmt|;
name|pos
operator|=
name|Below
expr_stmt|;
block|}
else|else
block|{
name|base
operator|=
name|i
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|skipped
operator|==
literal|2
operator|&&
operator|(
name|script
operator|==
name|HB_Script_Kannada
operator|||
name|script
operator|==
name|HB_Script_Telugu
operator|)
condition|)
block|{
name|base
operator|=
name|i
expr_stmt|;
break|break;
block|}
operator|++
name|skipped
expr_stmt|;
block|}
name|IDEBUG
argument_list|(
literal|"    base consonant at %d skipped=%d, lastConsonant=%d"
argument_list|,
name|base
argument_list|,
name|skipped
argument_list|,
name|lastConsonant
argument_list|)
expr_stmt|;
comment|// Rule 2:
comment|//
comment|// If the base consonant is not the last one, Uniscribe
comment|// moves the halant from the base consonant to the last
comment|// one.
if|if
condition|(
name|lastConsonant
operator|>
name|base
condition|)
block|{
name|int
name|halantPos
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|uc
index|[
name|base
operator|+
literal|1
index|]
operator|==
name|halant
condition|)
name|halantPos
operator|=
name|base
operator|+
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|uc
index|[
name|base
operator|+
literal|1
index|]
operator|==
name|nukta
operator|&&
name|uc
index|[
name|base
operator|+
literal|2
index|]
operator|==
name|halant
condition|)
name|halantPos
operator|=
name|base
operator|+
literal|2
expr_stmt|;
if|if
condition|(
name|halantPos
operator|>
literal|0
condition|)
block|{
name|IDEBUG
argument_list|(
literal|"    moving halant from %d to %d!"
argument_list|,
name|base
operator|+
literal|1
argument_list|,
name|lastConsonant
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
name|halantPos
init|;
name|i
operator|<
name|lastConsonant
condition|;
name|i
operator|++
control|)
name|uc
index|[
name|i
index|]
operator|=
name|uc
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
name|uc
index|[
name|lastConsonant
index|]
operator|=
name|halant
expr_stmt|;
block|}
block|}
comment|// Rule 3:
comment|//
comment|// If the syllable starts with Ra + H, Uniscribe moves
comment|// this combination so that it follows either:
comment|// * the post-base 'matra' (if any) or the base consonant
comment|//   (in scripts that show similarity to Devanagari, i.e.,
comment|//   Devanagari, Gujarati, Bengali)
comment|// * the base consonant (other scripts)
comment|// * the end of the syllable (Kannada)
name|Position
name|matra_position
init|=
name|None
decl_stmt|;
if|if
condition|(
name|matra
operator|>
literal|0
condition|)
name|matra_position
operator|=
name|indic_position
argument_list|(
name|uc
index|[
name|matra
index|]
argument_list|)
expr_stmt|;
name|IDEBUG
argument_list|(
literal|"    matra at %d with form %d, base=%d"
argument_list|,
name|matra
argument_list|,
name|matra_position
argument_list|,
name|base
argument_list|)
expr_stmt|;
if|if
condition|(
name|beginsWithRa
operator|&&
name|base
operator|!=
literal|0
condition|)
block|{
name|int
name|toPos
init|=
name|base
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|toPos
operator|<
name|len
operator|&&
name|uc
index|[
name|toPos
index|]
operator|==
name|nukta
condition|)
name|toPos
operator|++
expr_stmt|;
if|if
condition|(
name|toPos
operator|<
name|len
operator|&&
name|uc
index|[
name|toPos
index|]
operator|==
name|halant
condition|)
name|toPos
operator|++
expr_stmt|;
if|if
condition|(
name|toPos
operator|<
name|len
operator|&&
name|uc
index|[
name|toPos
index|]
operator|==
literal|0x200d
condition|)
name|toPos
operator|++
expr_stmt|;
if|if
condition|(
name|toPos
operator|<
name|len
operator|-
literal|1
operator|&&
name|uc
index|[
name|toPos
index|]
operator|==
name|ra
operator|&&
name|uc
index|[
name|toPos
operator|+
literal|1
index|]
operator|==
name|halant
condition|)
name|toPos
operator|+=
literal|2
expr_stmt|;
if|if
condition|(
name|script
operator|==
name|HB_Script_Devanagari
operator|||
name|script
operator|==
name|HB_Script_Gujarati
operator|||
name|script
operator|==
name|HB_Script_Bengali
condition|)
block|{
if|if
condition|(
name|matra_position
operator|==
name|Post
operator|||
name|matra_position
operator|==
name|Split
condition|)
block|{
name|toPos
operator|=
name|matra
operator|+
literal|1
expr_stmt|;
name|matra
operator|-=
literal|2
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|script
operator|==
name|HB_Script_Kannada
condition|)
block|{
name|toPos
operator|=
name|len
expr_stmt|;
name|matra
operator|-=
literal|2
expr_stmt|;
block|}
name|IDEBUG
argument_list|(
literal|"moving leading ra+halant to position %d"
argument_list|,
name|toPos
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|2
init|;
name|i
operator|<
name|toPos
condition|;
name|i
operator|++
control|)
name|uc
index|[
name|i
operator|-
literal|2
index|]
operator|=
name|uc
index|[
name|i
index|]
expr_stmt|;
name|uc
index|[
name|toPos
operator|-
literal|2
index|]
operator|=
name|ra
expr_stmt|;
name|uc
index|[
name|toPos
operator|-
literal|1
index|]
operator|=
name|halant
expr_stmt|;
name|base
operator|-=
literal|2
expr_stmt|;
if|if
condition|(
name|properties
operator|&
name|HasReph
condition|)
name|reph
operator|=
name|toPos
operator|-
literal|2
expr_stmt|;
block|}
comment|// Rule 4:
comment|// Uniscribe splits two- or three-part matras into their
comment|// parts. This splitting is a character-to-character
comment|// operation).
comment|//
comment|//      Uniscribe describes some moving operations for these
comment|//      matras here. For shaping however all pre matras need
comment|//      to be at the beginning of the syllable, so we just move
comment|//      them there now.
if|if
condition|(
name|matra_position
operator|==
name|Split
condition|)
block|{
name|splitMatra
argument_list|(
name|uc
argument_list|,
name|matra
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|// Handle three-part matras (0xccb in Kannada)
name|matra_position
operator|=
name|indic_position
argument_list|(
name|uc
index|[
name|matra
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|matra_position
operator|==
name|Pre
condition|)
block|{
name|unsigned
name|short
name|m
init|=
name|uc
index|[
name|matra
index|]
decl_stmt|;
while|while
condition|(
name|matra
operator|--
condition|)
name|uc
index|[
name|matra
operator|+
literal|1
index|]
operator|=
name|uc
index|[
name|matra
index|]
expr_stmt|;
name|uc
index|[
literal|0
index|]
operator|=
name|m
expr_stmt|;
name|base
operator|++
expr_stmt|;
block|}
block|}
comment|// Rule 5:
comment|//
comment|// Uniscribe classifies consonants and 'matra' parts as
comment|// pre-base, above-base (Reph), below-base or post-base. This
comment|// classification exists on the character code level and is
comment|// language-dependent, not font-dependent.
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|base
condition|;
operator|++
name|i
control|)
name|position
index|[
name|i
index|]
operator|=
name|Pre
expr_stmt|;
name|position
index|[
name|base
index|]
operator|=
name|Base
expr_stmt|;
for|for
control|(
name|i
operator|=
name|base
operator|+
literal|1
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|position
index|[
name|i
index|]
operator|=
name|indic_position
argument_list|(
name|uc
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// #### replace by adjusting table
if|if
condition|(
name|uc
index|[
name|i
index|]
operator|==
name|nukta
operator|||
name|uc
index|[
name|i
index|]
operator|==
name|halant
condition|)
name|position
index|[
name|i
index|]
operator|=
name|Inherit
expr_stmt|;
block|}
if|if
condition|(
name|reph
operator|>
literal|0
condition|)
block|{
comment|// recalculate reph, it might have changed.
for|for
control|(
name|i
operator|=
name|base
operator|+
literal|1
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|uc
index|[
name|i
index|]
operator|==
name|ra
condition|)
name|reph
operator|=
name|i
expr_stmt|;
name|position
index|[
name|reph
index|]
operator|=
name|Reph
expr_stmt|;
name|position
index|[
name|reph
operator|+
literal|1
index|]
operator|=
name|Inherit
expr_stmt|;
block|}
comment|// all reordering happens now to the chars after the base
name|int
name|fixed
init|=
name|base
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|fixed
operator|<
name|len
operator|&&
name|uc
index|[
name|fixed
index|]
operator|==
name|nukta
condition|)
name|fixed
operator|++
expr_stmt|;
if|if
condition|(
name|fixed
operator|<
name|len
operator|&&
name|uc
index|[
name|fixed
index|]
operator|==
name|halant
condition|)
name|fixed
operator|++
expr_stmt|;
if|if
condition|(
name|fixed
operator|<
name|len
operator|&&
name|uc
index|[
name|fixed
index|]
operator|==
literal|0x200d
condition|)
name|fixed
operator|++
expr_stmt|;
ifdef|#
directive|ifdef
name|INDIC_DEBUG
for|for
control|(
name|i
operator|=
name|fixed
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
name|IDEBUG
argument_list|(
literal|"position[%d] = %d, form=%d uc=%x"
argument_list|,
name|i
argument_list|,
name|position
index|[
name|i
index|]
argument_list|,
name|form
argument_list|(
name|uc
index|[
name|i
index|]
argument_list|)
argument_list|,
name|uc
index|[
name|i
index|]
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// we continuosly position the matras and vowel marks and increase the fixed
comment|// until we reached the end.
specifier|const
name|IndicOrdering
modifier|*
name|finalOrder
init|=
name|indic_order
index|[
name|script
operator|-
name|HB_Script_Devanagari
index|]
decl_stmt|;
name|IDEBUG
argument_list|(
literal|"    reordering pass:"
argument_list|)
expr_stmt|;
name|IDEBUG
argument_list|(
literal|"        base=%d fixed=%d"
argument_list|,
name|base
argument_list|,
name|fixed
argument_list|)
expr_stmt|;
name|int
name|toMove
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|finalOrder
index|[
name|toMove
index|]
operator|.
name|form
operator|&&
name|fixed
operator|<
name|len
operator|-
literal|1
condition|)
block|{
name|IDEBUG
argument_list|(
literal|"        fixed = %d, toMove=%d, moving form %d with pos %d"
argument_list|,
name|fixed
argument_list|,
name|toMove
argument_list|,
name|finalOrder
index|[
name|toMove
index|]
operator|.
name|form
argument_list|,
name|finalOrder
index|[
name|toMove
index|]
operator|.
name|position
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
name|fixed
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
comment|//                IDEBUG()<< "           i="<< i<< "uc="<< hex<< uc[i]<< "form="<< form(uc[i])
comment|//<< "position="<< position[i];
if|if
condition|(
name|form
argument_list|(
name|uc
index|[
name|i
index|]
argument_list|)
operator|==
name|finalOrder
index|[
name|toMove
index|]
operator|.
name|form
operator|&&
name|position
index|[
name|i
index|]
operator|==
name|finalOrder
index|[
name|toMove
index|]
operator|.
name|position
condition|)
block|{
comment|// need to move this glyph
name|int
name|to
init|=
name|fixed
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|len
operator|-
literal|1
operator|&&
name|position
index|[
name|i
operator|+
literal|1
index|]
operator|==
name|Inherit
condition|)
block|{
name|IDEBUG
argument_list|(
literal|"         moving two chars from %d to %d"
argument_list|,
name|i
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|unsigned
name|short
name|ch
init|=
name|uc
index|[
name|i
index|]
decl_stmt|;
name|unsigned
name|short
name|ch2
init|=
name|uc
index|[
name|i
operator|+
literal|1
index|]
decl_stmt|;
name|unsigned
name|char
name|pos
init|=
name|position
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|>
name|to
operator|+
literal|1
condition|;
name|j
operator|--
control|)
block|{
name|uc
index|[
name|j
index|]
operator|=
name|uc
index|[
name|j
operator|-
literal|2
index|]
expr_stmt|;
name|position
index|[
name|j
index|]
operator|=
name|position
index|[
name|j
operator|-
literal|2
index|]
expr_stmt|;
block|}
name|uc
index|[
name|to
index|]
operator|=
name|ch
expr_stmt|;
name|uc
index|[
name|to
operator|+
literal|1
index|]
operator|=
name|ch2
expr_stmt|;
name|position
index|[
name|to
index|]
operator|=
name|pos
expr_stmt|;
name|position
index|[
name|to
operator|+
literal|1
index|]
operator|=
name|pos
expr_stmt|;
name|fixed
operator|+=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|IDEBUG
argument_list|(
literal|"         moving one char from %d to %d"
argument_list|,
name|i
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|unsigned
name|short
name|ch
init|=
name|uc
index|[
name|i
index|]
decl_stmt|;
name|unsigned
name|char
name|pos
init|=
name|position
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|>
name|to
condition|;
name|j
operator|--
control|)
block|{
name|uc
index|[
name|j
index|]
operator|=
name|uc
index|[
name|j
operator|-
literal|1
index|]
expr_stmt|;
name|position
index|[
name|j
index|]
operator|=
name|position
index|[
name|j
operator|-
literal|1
index|]
expr_stmt|;
block|}
name|uc
index|[
name|to
index|]
operator|=
name|ch
expr_stmt|;
name|position
index|[
name|to
index|]
operator|=
name|pos
expr_stmt|;
name|fixed
operator|++
expr_stmt|;
block|}
block|}
block|}
name|toMove
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|reph
operator|>
literal|0
condition|)
block|{
comment|// recalculate reph, it might have changed.
for|for
control|(
name|i
operator|=
name|base
operator|+
literal|1
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|reordered
index|[
name|i
index|]
operator|==
name|ra
condition|)
name|reph
operator|=
name|i
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|NO_OPENTYPE
specifier|const
name|int
name|availableGlyphs
init|=
name|item
operator|->
name|num_glyphs
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|item
operator|->
name|font
operator|->
name|klass
operator|->
name|convertStringToGlyphIndices
argument_list|(
name|item
operator|->
name|font
argument_list|,
name|reordered
argument_list|,
name|len
argument_list|,
name|item
operator|->
name|glyphs
argument_list|,
operator|&
name|item
operator|->
name|num_glyphs
argument_list|,
name|item
operator|->
name|item
operator|.
name|bidiLevel
operator|%
literal|2
argument_list|)
condition|)
goto|goto
name|error
goto|;
name|IDEBUG
argument_list|(
literal|"  base=%d, reph=%d"
argument_list|,
name|base
argument_list|,
name|reph
argument_list|)
expr_stmt|;
name|IDEBUG
argument_list|(
literal|"reordered:"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|item
operator|->
name|attributes
index|[
name|i
index|]
operator|.
name|mark
operator|=
literal|false
expr_stmt|;
name|item
operator|->
name|attributes
index|[
name|i
index|]
operator|.
name|clusterStart
operator|=
literal|false
expr_stmt|;
name|item
operator|->
name|attributes
index|[
name|i
index|]
operator|.
name|justification
operator|=
literal|0
expr_stmt|;
name|item
operator|->
name|attributes
index|[
name|i
index|]
operator|.
name|zeroWidth
operator|=
literal|false
expr_stmt|;
name|IDEBUG
argument_list|(
literal|"    %d: %4x"
argument_list|,
name|i
argument_list|,
name|reordered
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// now we have the syllable in the right order, and can start running it through open type.
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
name|control
operator||=
operator|(
name|form
argument_list|(
name|reordered
index|[
name|i
index|]
argument_list|)
operator|==
name|Control
operator|)
expr_stmt|;
ifndef|#
directive|ifndef
name|NO_OPENTYPE
if|if
condition|(
name|openType
condition|)
block|{
comment|// we need to keep track of where the base glyph is for some
comment|// scripts and use the cluster feature for this.  This
comment|// also means we have to correct the logCluster output from
comment|// the open type engine manually afterwards.  for indic this
comment|// is rather simple, as all chars just point to the first
comment|// glyph in the syllable.
name|HB_STACKARRAY
argument_list|(
argument|unsigned short
argument_list|,
argument|clusters
argument_list|,
argument|len
argument_list|)
empty_stmt|;
name|HB_STACKARRAY
argument_list|(
argument|unsigned int
argument_list|,
argument|properties
argument_list|,
argument|len
argument_list|)
empty_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
name|clusters
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
comment|// features we should always apply
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
name|properties
index|[
name|i
index|]
operator|=
operator|~
operator|(
name|LocaProperty
operator||
name|CcmpProperty
operator||
name|NuktaProperty
operator||
name|VattuProperty
operator||
name|ConjunctFormProperty
operator||
name|PreSubstProperty
operator||
name|BelowSubstProperty
operator||
name|AboveSubstProperty
operator||
name|PostSubstProperty
operator||
name|HalantProperty
operator||
name|IndicCaltProperty
operator||
name|PositioningProperties
operator|)
expr_stmt|;
comment|// Loca always applies
comment|// Ccmp always applies
comment|// Init
if|if
condition|(
name|item
operator|->
name|item
operator|.
name|pos
operator|==
literal|0
operator|||
operator|!
operator|(
name|isLetter
argument_list|(
name|item
operator|->
name|string
index|[
name|item
operator|->
name|item
operator|.
name|pos
operator|-
literal|1
index|]
argument_list|)
operator|||
name|isMark
argument_list|(
name|item
operator|->
name|string
index|[
name|item
operator|->
name|item
operator|.
name|pos
operator|-
literal|1
index|]
argument_list|)
operator|)
condition|)
name|properties
index|[
literal|0
index|]
operator|&=
operator|~
name|InitProperty
expr_stmt|;
comment|// Nukta always applies
comment|// Akhant
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<=
name|base
condition|;
operator|++
name|i
control|)
name|properties
index|[
name|i
index|]
operator|&=
operator|~
name|AkhantProperty
expr_stmt|;
comment|// Reph
if|if
condition|(
name|reph
operator|>=
literal|0
condition|)
block|{
name|properties
index|[
name|reph
index|]
operator|&=
operator|~
name|RephProperty
expr_stmt|;
name|properties
index|[
name|reph
operator|+
literal|1
index|]
operator|&=
operator|~
name|RephProperty
expr_stmt|;
block|}
comment|// BelowForm
for|for
control|(
name|i
operator|=
name|base
operator|+
literal|1
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
name|properties
index|[
name|i
index|]
operator|&=
operator|~
name|BelowFormProperty
expr_stmt|;
if|if
condition|(
name|script
operator|==
name|HB_Script_Devanagari
operator|||
name|script
operator|==
name|HB_Script_Gujarati
condition|)
block|{
comment|// vattu glyphs need this aswell
name|bool
name|vattu
init|=
literal|false
decl_stmt|;
for|for
control|(
name|i
operator|=
name|base
operator|-
literal|2
init|;
name|i
operator|>
literal|1
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|form
argument_list|(
name|reordered
index|[
name|i
index|]
argument_list|)
operator|==
name|Consonant
condition|)
block|{
name|vattu
operator|=
operator|(
operator|!
name|vattu
operator|&&
name|reordered
index|[
name|i
index|]
operator|==
name|ra
operator|)
expr_stmt|;
if|if
condition|(
name|vattu
condition|)
block|{
name|IDEBUG
argument_list|(
literal|"forming vattu ligature at %d"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|properties
index|[
name|i
index|]
operator|&=
operator|~
name|BelowFormProperty
expr_stmt|;
name|properties
index|[
name|i
operator|+
literal|1
index|]
operator|&=
operator|~
name|BelowFormProperty
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// HalfFormProperty
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|base
condition|;
operator|++
name|i
control|)
name|properties
index|[
name|i
index|]
operator|&=
operator|~
name|HalfFormProperty
expr_stmt|;
if|if
condition|(
name|control
condition|)
block|{
for|for
control|(
name|i
operator|=
literal|2
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|reordered
index|[
name|i
index|]
operator|==
literal|0x200d
comment|/* ZWJ */
condition|)
block|{
name|properties
index|[
name|i
operator|-
literal|1
index|]
operator|&=
operator|~
name|HalfFormProperty
expr_stmt|;
name|properties
index|[
name|i
operator|-
literal|2
index|]
operator|&=
operator|~
name|HalfFormProperty
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|reordered
index|[
name|i
index|]
operator|==
literal|0x200c
comment|/* ZWNJ */
condition|)
block|{
name|properties
index|[
name|i
operator|-
literal|1
index|]
operator|&=
operator|~
name|HalfFormProperty
expr_stmt|;
name|properties
index|[
name|i
operator|-
literal|2
index|]
operator|&=
operator|~
name|HalfFormProperty
expr_stmt|;
block|}
block|}
block|}
comment|// PostFormProperty
for|for
control|(
name|i
operator|=
name|base
operator|+
literal|1
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
name|properties
index|[
name|i
index|]
operator|&=
operator|~
name|PostFormProperty
expr_stmt|;
comment|// vattu always applies
comment|// pres always applies
comment|// blws always applies
comment|// abvs always applies
comment|// psts always applies
comment|// halant always applies
comment|// calt always applies
ifdef|#
directive|ifdef
name|INDIC_DEBUG
comment|//        {
comment|//            IDEBUG("OT properties:");
comment|//            for (int i = 0; i< len; ++i)
comment|//                qDebug("    i: %s", ::propertiesToString(properties[i]).toLatin1().data());
comment|//        }
endif|#
directive|endif
comment|// initialize
name|item
operator|->
name|log_clusters
operator|=
name|clusters
expr_stmt|;
name|HB_OpenTypeShape
argument_list|(
name|item
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|int
name|newLen
init|=
name|item
operator|->
name|face
operator|->
name|buffer
operator|->
name|in_length
decl_stmt|;
name|HB_GlyphItem
name|otl_glyphs
init|=
name|item
operator|->
name|face
operator|->
name|buffer
operator|->
name|in_string
decl_stmt|;
comment|// move the left matra back to its correct position in malayalam and tamil
if|if
condition|(
operator|(
name|script
operator|==
name|HB_Script_Malayalam
operator|||
name|script
operator|==
name|HB_Script_Tamil
operator|)
operator|&&
operator|(
name|form
argument_list|(
name|reordered
index|[
literal|0
index|]
argument_list|)
operator|==
name|Matra
operator|)
condition|)
block|{
comment|//             qDebug("reordering matra, len=%d", newLen);
comment|// need to find the base in the shaped string and move the matra there
name|int
name|basePos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|basePos
operator|<
name|newLen
operator|&&
operator|(
name|int
operator|)
name|otl_glyphs
index|[
name|basePos
index|]
operator|.
name|cluster
operator|<=
name|base
condition|)
name|basePos
operator|++
expr_stmt|;
operator|--
name|basePos
expr_stmt|;
if|if
condition|(
name|basePos
argument_list|<
name|newLen
operator|&&
name|basePos
argument_list|>
literal|1
condition|)
block|{
comment|//                 qDebug("moving prebase matra to position %d in syllable newlen=%d", basePos, newLen);
name|HB_GlyphItemRec
name|m
init|=
name|otl_glyphs
index|[
literal|0
index|]
decl_stmt|;
operator|--
name|basePos
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|basePos
condition|;
operator|++
name|i
control|)
name|otl_glyphs
index|[
name|i
index|]
operator|=
name|otl_glyphs
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
name|otl_glyphs
index|[
name|basePos
index|]
operator|=
name|m
expr_stmt|;
block|}
block|}
name|HB_Bool
name|positioned
init|=
name|HB_OpenTypePosition
argument_list|(
name|item
argument_list|,
name|availableGlyphs
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HB_FREE_STACKARRAY
argument_list|(
name|clusters
argument_list|)
expr_stmt|;
name|HB_FREE_STACKARRAY
argument_list|(
name|properties
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|positioned
condition|)
goto|goto
name|error
goto|;
if|if
condition|(
name|control
condition|)
block|{
name|IDEBUG
argument_list|(
literal|"found a control char in the syllable"
argument_list|)
expr_stmt|;
name|hb_uint32
name|i
init|=
literal|0
decl_stmt|,
name|j
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|item
operator|->
name|num_glyphs
condition|)
block|{
if|if
condition|(
name|form
argument_list|(
name|reordered
index|[
name|otl_glyphs
index|[
name|i
index|]
operator|.
name|cluster
index|]
argument_list|)
operator|==
name|Control
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|item
operator|->
name|num_glyphs
condition|)
break|break;
block|}
name|item
operator|->
name|glyphs
index|[
name|j
index|]
operator|=
name|item
operator|->
name|glyphs
index|[
name|i
index|]
expr_stmt|;
name|item
operator|->
name|attributes
index|[
name|j
index|]
operator|=
name|item
operator|->
name|attributes
index|[
name|i
index|]
expr_stmt|;
name|item
operator|->
name|advances
index|[
name|j
index|]
operator|=
name|item
operator|->
name|advances
index|[
name|i
index|]
expr_stmt|;
operator|++
name|i
expr_stmt|;
operator|++
name|j
expr_stmt|;
block|}
name|item
operator|->
name|num_glyphs
operator|=
name|j
expr_stmt|;
block|}
block|}
else|else
block|{
name|HB_HeuristicPosition
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// NO_OPENTYPE
name|item
operator|->
name|attributes
index|[
literal|0
index|]
operator|.
name|clusterStart
operator|=
literal|true
expr_stmt|;
name|HB_FREE_STACKARRAY
argument_list|(
name|reordered
argument_list|)
expr_stmt|;
name|HB_FREE_STACKARRAY
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|IDEBUG
argument_list|(
literal|"<<<<<<"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
name|error
label|:
name|HB_FREE_STACKARRAY
argument_list|(
name|reordered
argument_list|)
expr_stmt|;
name|HB_FREE_STACKARRAY
argument_list|(
name|position
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/* syllables are of the form:     (Consonant Nukta? Halant)* Consonant Matra? VowelMark? StressMark?    (Consonant Nukta? Halant)* Consonant Halant    IndependentVowel VowelMark? StressMark?     We return syllable boundaries on invalid combinations aswell */
end_comment
begin_function
DECL|function|indic_nextSyllableBoundary
specifier|static
name|int
name|indic_nextSyllableBoundary
parameter_list|(
name|HB_Script
name|script
parameter_list|,
specifier|const
name|HB_UChar16
modifier|*
name|s
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|bool
modifier|*
name|invalid
parameter_list|)
block|{
operator|*
name|invalid
operator|=
literal|false
expr_stmt|;
name|IDEBUG
argument_list|(
literal|"indic_nextSyllableBoundary: start=%d, end=%d"
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
specifier|const
name|HB_UChar16
modifier|*
name|uc
init|=
name|s
operator|+
name|start
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|Form
name|state
init|=
name|form
argument_list|(
name|uc
index|[
name|pos
index|]
argument_list|)
decl_stmt|;
name|IDEBUG
argument_list|(
literal|"state[%d]=%d (uc=%4x)"
argument_list|,
name|pos
argument_list|,
name|state
argument_list|,
name|uc
index|[
name|pos
index|]
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
if|if
condition|(
name|state
operator|!=
name|Consonant
operator|&&
name|state
operator|!=
name|IndependentVowel
condition|)
block|{
if|if
condition|(
name|state
operator|!=
name|Other
condition|)
operator|*
name|invalid
operator|=
literal|true
expr_stmt|;
goto|goto
name|finish
goto|;
block|}
while|while
condition|(
name|pos
operator|<
name|end
operator|-
name|start
condition|)
block|{
name|Form
name|newState
init|=
name|form
argument_list|(
name|uc
index|[
name|pos
index|]
argument_list|)
decl_stmt|;
name|IDEBUG
argument_list|(
literal|"state[%d]=%d (uc=%4x)"
argument_list|,
name|pos
argument_list|,
name|newState
argument_list|,
name|uc
index|[
name|pos
index|]
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|newState
condition|)
block|{
case|case
name|Control
case|:
name|newState
operator|=
name|state
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|Halant
operator|&&
name|uc
index|[
name|pos
index|]
operator|==
literal|0x200d
comment|/* ZWJ */
condition|)
break|break;
comment|// the control character should be the last char in the item
if|if
condition|(
name|state
operator|==
name|Consonant
operator|&&
name|script
operator|==
name|HB_Script_Bengali
operator|&&
name|uc
index|[
name|pos
operator|-
literal|1
index|]
operator|==
literal|0x09B0
operator|&&
name|uc
index|[
name|pos
index|]
operator|==
literal|0x200d
comment|/* ZWJ */
condition|)
break|break;
if|if
condition|(
name|state
operator|==
name|Consonant
operator|&&
name|script
operator|==
name|HB_Script_Kannada
operator|&&
name|uc
index|[
name|pos
operator|-
literal|1
index|]
operator|==
literal|0x0CB0
operator|&&
name|uc
index|[
name|pos
index|]
operator|==
literal|0x200d
comment|/* ZWJ */
condition|)
break|break;
comment|// Bengali and Kannada has a special exception for rendering yaphala with ra (to avoid reph) see http://www.unicode.org/faq/indic.html#15
operator|++
name|pos
expr_stmt|;
goto|goto
name|finish
goto|;
case|case
name|Consonant
case|:
if|if
condition|(
name|state
operator|==
name|Halant
operator|&&
operator|(
name|script
operator|!=
name|HB_Script_Sinhala
operator|||
name|uc
index|[
name|pos
operator|-
literal|1
index|]
operator|==
literal|0x200d
comment|/* ZWJ */
operator|)
condition|)
break|break;
goto|goto
name|finish
goto|;
case|case
name|Halant
case|:
if|if
condition|(
name|state
operator|==
name|Nukta
operator|||
name|state
operator|==
name|Consonant
condition|)
break|break;
comment|// Bengali has a special exception allowing the combination Vowel_A/E + Halant + Ya
if|if
condition|(
name|script
operator|==
name|HB_Script_Bengali
operator|&&
name|pos
operator|==
literal|1
operator|&&
operator|(
name|uc
index|[
literal|0
index|]
operator|==
literal|0x0985
operator|||
name|uc
index|[
literal|0
index|]
operator|==
literal|0x098f
operator|)
condition|)
break|break;
comment|// Sinhala uses the Halant as a component of certain matras. Allow these, but keep the state on Matra.
if|if
condition|(
name|script
operator|==
name|HB_Script_Sinhala
operator|&&
name|state
operator|==
name|Matra
condition|)
block|{
operator|++
name|pos
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|script
operator|==
name|HB_Script_Malayalam
operator|&&
name|state
operator|==
name|Matra
operator|&&
name|uc
index|[
name|pos
operator|-
literal|1
index|]
operator|==
literal|0x0d41
condition|)
block|{
operator|++
name|pos
expr_stmt|;
continue|continue;
block|}
goto|goto
name|finish
goto|;
case|case
name|Nukta
case|:
if|if
condition|(
name|state
operator|==
name|Consonant
condition|)
break|break;
goto|goto
name|finish
goto|;
case|case
name|StressMark
case|:
if|if
condition|(
name|state
operator|==
name|VowelMark
condition|)
break|break;
comment|// fall through
case|case
name|VowelMark
case|:
if|if
condition|(
name|state
operator|==
name|Matra
operator|||
name|state
operator|==
name|LengthMark
operator|||
name|state
operator|==
name|IndependentVowel
condition|)
break|break;
comment|// fall through
case|case
name|Matra
case|:
if|if
condition|(
name|state
operator|==
name|Consonant
operator|||
name|state
operator|==
name|Nukta
condition|)
break|break;
if|if
condition|(
name|state
operator|==
name|Matra
condition|)
block|{
comment|// ### needs proper testing for correct two/three part matras
break|break;
block|}
comment|// ### not sure if this is correct. If it is, does it apply only to Bengali or should
comment|// it work for all Indic languages?
comment|// the combination Independent_A + Vowel Sign AA is allowed.
if|if
condition|(
name|script
operator|==
name|HB_Script_Bengali
operator|&&
name|uc
index|[
name|pos
index|]
operator|==
literal|0x9be
operator|&&
name|uc
index|[
name|pos
operator|-
literal|1
index|]
operator|==
literal|0x985
condition|)
break|break;
if|if
condition|(
name|script
operator|==
name|HB_Script_Tamil
operator|&&
name|state
operator|==
name|Matra
condition|)
block|{
if|if
condition|(
name|uc
index|[
name|pos
operator|-
literal|1
index|]
operator|==
literal|0x0bc6
operator|&&
operator|(
name|uc
index|[
name|pos
index|]
operator|==
literal|0xbbe
operator|||
name|uc
index|[
name|pos
index|]
operator|==
literal|0xbd7
operator|)
condition|)
break|break;
if|if
condition|(
name|uc
index|[
name|pos
operator|-
literal|1
index|]
operator|==
literal|0x0bc7
operator|&&
name|uc
index|[
name|pos
index|]
operator|==
literal|0xbbe
condition|)
break|break;
block|}
goto|goto
name|finish
goto|;
case|case
name|LengthMark
case|:
if|if
condition|(
name|state
operator|==
name|Matra
condition|)
block|{
comment|// ### needs proper testing for correct two/three part matras
break|break;
block|}
case|case
name|IndependentVowel
case|:
case|case
name|Invalid
case|:
case|case
name|Other
case|:
goto|goto
name|finish
goto|;
block|}
name|state
operator|=
name|newState
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
name|finish
label|:
return|return
name|pos
operator|+
name|start
return|;
block|}
end_function
begin_function
DECL|function|HB_IndicShape
name|HB_Bool
name|HB_IndicShape
parameter_list|(
name|HB_ShaperItem
modifier|*
name|item
parameter_list|)
block|{
name|assert
argument_list|(
name|item
operator|->
name|item
operator|.
name|script
operator|>=
name|HB_Script_Devanagari
operator|&&
name|item
operator|->
name|item
operator|.
name|script
operator|<=
name|HB_Script_Sinhala
argument_list|)
expr_stmt|;
name|HB_Bool
name|openType
init|=
literal|false
decl_stmt|;
ifndef|#
directive|ifndef
name|NO_OPENTYPE
name|openType
operator|=
name|HB_SelectScript
argument_list|(
name|item
argument_list|,
name|indic_features
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|unsigned
name|short
modifier|*
name|logClusters
init|=
name|item
operator|->
name|log_clusters
decl_stmt|;
name|HB_ShaperItem
name|syllable
init|=
operator|*
name|item
decl_stmt|;
name|int
name|first_glyph
init|=
literal|0
decl_stmt|;
name|int
name|sstart
init|=
name|item
operator|->
name|item
operator|.
name|pos
decl_stmt|;
name|int
name|end
init|=
name|sstart
operator|+
name|item
operator|->
name|item
operator|.
name|length
decl_stmt|;
name|IDEBUG
argument_list|(
literal|"indic_shape: from %d length %d"
argument_list|,
name|item
operator|->
name|item
operator|.
name|pos
argument_list|,
name|item
operator|->
name|item
operator|.
name|length
argument_list|)
expr_stmt|;
while|while
condition|(
name|sstart
operator|<
name|end
condition|)
block|{
name|bool
name|invalid
decl_stmt|;
name|int
name|send
init|=
name|indic_nextSyllableBoundary
argument_list|(
name|item
operator|->
name|item
operator|.
name|script
argument_list|,
name|item
operator|->
name|string
argument_list|,
name|sstart
argument_list|,
name|end
argument_list|,
operator|&
name|invalid
argument_list|)
decl_stmt|;
name|IDEBUG
argument_list|(
literal|"syllable from %d, length %d, invalid=%s"
argument_list|,
name|sstart
argument_list|,
name|send
operator|-
name|sstart
argument_list|,
name|invalid
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|syllable
operator|.
name|item
operator|.
name|pos
operator|=
name|sstart
expr_stmt|;
name|syllable
operator|.
name|item
operator|.
name|length
operator|=
name|send
operator|-
name|sstart
expr_stmt|;
name|syllable
operator|.
name|glyphs
operator|=
name|item
operator|->
name|glyphs
operator|+
name|first_glyph
expr_stmt|;
name|syllable
operator|.
name|attributes
operator|=
name|item
operator|->
name|attributes
operator|+
name|first_glyph
expr_stmt|;
name|syllable
operator|.
name|offsets
operator|=
name|item
operator|->
name|offsets
operator|+
name|first_glyph
expr_stmt|;
name|syllable
operator|.
name|advances
operator|=
name|item
operator|->
name|advances
operator|+
name|first_glyph
expr_stmt|;
name|syllable
operator|.
name|num_glyphs
operator|=
name|item
operator|->
name|num_glyphs
operator|-
name|first_glyph
expr_stmt|;
if|if
condition|(
operator|!
name|indic_shape_syllable
argument_list|(
name|openType
argument_list|,
operator|&
name|syllable
argument_list|,
name|invalid
argument_list|)
condition|)
block|{
name|IDEBUG
argument_list|(
literal|"syllable shaping failed, syllable requests %d glyphs"
argument_list|,
name|syllable
operator|.
name|num_glyphs
argument_list|)
expr_stmt|;
name|item
operator|->
name|num_glyphs
operator|+=
name|syllable
operator|.
name|num_glyphs
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// fix logcluster array
name|IDEBUG
argument_list|(
literal|"syllable:"
argument_list|)
expr_stmt|;
name|hb_uint32
name|g
decl_stmt|;
for|for
control|(
name|g
operator|=
name|first_glyph
init|;
name|g
operator|<
name|first_glyph
operator|+
name|syllable
operator|.
name|num_glyphs
condition|;
operator|++
name|g
control|)
name|IDEBUG
argument_list|(
literal|"        %d -> glyph %x"
argument_list|,
name|g
argument_list|,
name|item
operator|->
name|glyphs
index|[
name|g
index|]
argument_list|)
expr_stmt|;
name|IDEBUG
argument_list|(
literal|"    logclusters:"
argument_list|)
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|sstart
init|;
name|i
operator|<
name|send
condition|;
operator|++
name|i
control|)
block|{
name|IDEBUG
argument_list|(
literal|"        %d -> glyph %d"
argument_list|,
name|i
argument_list|,
name|first_glyph
argument_list|)
expr_stmt|;
name|logClusters
index|[
name|i
operator|-
name|item
operator|->
name|item
operator|.
name|pos
index|]
operator|=
name|first_glyph
expr_stmt|;
block|}
name|sstart
operator|=
name|send
expr_stmt|;
name|first_glyph
operator|+=
name|syllable
operator|.
name|num_glyphs
expr_stmt|;
block|}
name|item
operator|->
name|num_glyphs
operator|=
name|first_glyph
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|HB_IndicAttributes
name|void
name|HB_IndicAttributes
parameter_list|(
name|HB_Script
name|script
parameter_list|,
specifier|const
name|HB_UChar16
modifier|*
name|text
parameter_list|,
name|hb_uint32
name|from
parameter_list|,
name|hb_uint32
name|len
parameter_list|,
name|HB_CharAttributes
modifier|*
name|attributes
parameter_list|)
block|{
name|int
name|end
init|=
name|from
operator|+
name|len
decl_stmt|;
specifier|const
name|HB_UChar16
modifier|*
name|uc
init|=
name|text
operator|+
name|from
decl_stmt|;
name|attributes
operator|+=
name|from
expr_stmt|;
name|hb_uint32
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|len
condition|)
block|{
name|bool
name|invalid
decl_stmt|;
name|hb_uint32
name|boundary
init|=
name|indic_nextSyllableBoundary
argument_list|(
name|script
argument_list|,
name|text
argument_list|,
name|from
operator|+
name|i
argument_list|,
name|end
argument_list|,
operator|&
name|invalid
argument_list|)
operator|-
name|from
decl_stmt|;
name|attributes
index|[
name|i
index|]
operator|.
name|graphemeBoundary
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|boundary
operator|>
name|len
operator|-
literal|1
condition|)
name|boundary
operator|=
name|len
expr_stmt|;
name|i
operator|++
expr_stmt|;
while|while
condition|(
name|i
operator|<
name|boundary
condition|)
block|{
name|attributes
index|[
name|i
index|]
operator|.
name|graphemeBoundary
operator|=
literal|false
expr_stmt|;
operator|++
name|uc
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|assert
argument_list|(
name|i
operator|==
name|boundary
argument_list|)
expr_stmt|;
block|}
block|}
end_function
end_unit
