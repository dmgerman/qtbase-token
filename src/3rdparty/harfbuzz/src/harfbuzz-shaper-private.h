begin_unit
begin_comment
comment|/*  * Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies)  *  * This is part of HarfBuzz, an OpenType Layout engine library.  *  * Permission is hereby granted, without written agreement and without  * license or royalty fees, to use, copy, modify, and distribute this  * software and its documentation for any purpose, provided that the  * above copyright notice and the following two paragraphs appear in  * all copies of this software.  *  * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR  * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES  * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN  * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH  * DAMAGE.  *  * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,  * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND  * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS  * ON AN "AS IS" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO  * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|HARFBUZZ_SHAPER_PRIVATE_H
end_ifndef
begin_define
DECL|macro|HARFBUZZ_SHAPER_PRIVATE_H
define|#
directive|define
name|HARFBUZZ_SHAPER_PRIVATE_H
end_define
begin_decl_stmt
name|HB_BEGIN_HEADER
name|enum
type|{
DECL|enumerator|C_DOTTED_CIRCLE
name|C_DOTTED_CIRCLE
init|=
literal|0x25CC
end_decl_stmt
begin_typedef
unit|};
typedef|typedef
enum|enum
block|{
DECL|enumerator|HB_Combining_BelowLeftAttached
name|HB_Combining_BelowLeftAttached
init|=
literal|200
block|,
DECL|enumerator|HB_Combining_BelowAttached
name|HB_Combining_BelowAttached
init|=
literal|202
block|,
DECL|enumerator|HB_Combining_BelowRightAttached
name|HB_Combining_BelowRightAttached
init|=
literal|204
block|,
DECL|enumerator|HB_Combining_LeftAttached
name|HB_Combining_LeftAttached
init|=
literal|208
block|,
DECL|enumerator|HB_Combining_RightAttached
name|HB_Combining_RightAttached
init|=
literal|210
block|,
DECL|enumerator|HB_Combining_AboveLeftAttached
name|HB_Combining_AboveLeftAttached
init|=
literal|212
block|,
DECL|enumerator|HB_Combining_AboveAttached
name|HB_Combining_AboveAttached
init|=
literal|214
block|,
DECL|enumerator|HB_Combining_AboveRightAttached
name|HB_Combining_AboveRightAttached
init|=
literal|216
block|,
DECL|enumerator|HB_Combining_BelowLeft
name|HB_Combining_BelowLeft
init|=
literal|218
block|,
DECL|enumerator|HB_Combining_Below
name|HB_Combining_Below
init|=
literal|220
block|,
DECL|enumerator|HB_Combining_BelowRight
name|HB_Combining_BelowRight
init|=
literal|222
block|,
DECL|enumerator|HB_Combining_Left
name|HB_Combining_Left
init|=
literal|224
block|,
DECL|enumerator|HB_Combining_Right
name|HB_Combining_Right
init|=
literal|226
block|,
DECL|enumerator|HB_Combining_AboveLeft
name|HB_Combining_AboveLeft
init|=
literal|228
block|,
DECL|enumerator|HB_Combining_Above
name|HB_Combining_Above
init|=
literal|230
block|,
DECL|enumerator|HB_Combining_AboveRight
name|HB_Combining_AboveRight
init|=
literal|232
block|,
DECL|enumerator|HB_Combining_DoubleBelow
name|HB_Combining_DoubleBelow
init|=
literal|233
block|,
DECL|enumerator|HB_Combining_DoubleAbove
name|HB_Combining_DoubleAbove
init|=
literal|234
block|,
DECL|enumerator|HB_Combining_IotaSubscript
name|HB_Combining_IotaSubscript
init|=
literal|240
block|}
DECL|typedef|HB_CombiningClass
name|HB_CombiningClass
typedef|;
end_typedef
begin_typedef
typedef|typedef
enum|enum
block|{
DECL|enumerator|LocaProperty
name|LocaProperty
init|=
literal|0x1
block|,
DECL|enumerator|CcmpProperty
name|CcmpProperty
init|=
literal|0x2
block|,
DECL|enumerator|InitProperty
name|InitProperty
init|=
literal|0x4
block|,
DECL|enumerator|IsolProperty
name|IsolProperty
init|=
literal|0x8
block|,
DECL|enumerator|FinaProperty
name|FinaProperty
init|=
literal|0x10
block|,
DECL|enumerator|MediProperty
name|MediProperty
init|=
literal|0x20
block|,
DECL|enumerator|RligProperty
name|RligProperty
init|=
literal|0x40
block|,
DECL|enumerator|CaltProperty
name|CaltProperty
init|=
literal|0x80
block|,
DECL|enumerator|LigaProperty
name|LigaProperty
init|=
literal|0x100
block|,
DECL|enumerator|DligProperty
name|DligProperty
init|=
literal|0x200
block|,
DECL|enumerator|CswhProperty
name|CswhProperty
init|=
literal|0x400
block|,
DECL|enumerator|MsetProperty
name|MsetProperty
init|=
literal|0x800
block|,
comment|/* used by indic and myanmar shaper */
DECL|enumerator|NuktaProperty
name|NuktaProperty
init|=
literal|0x8
block|,
DECL|enumerator|AkhantProperty
name|AkhantProperty
init|=
literal|0x10
block|,
DECL|enumerator|RephProperty
name|RephProperty
init|=
literal|0x20
block|,
DECL|enumerator|PreFormProperty
name|PreFormProperty
init|=
literal|0x40
block|,
DECL|enumerator|BelowFormProperty
name|BelowFormProperty
init|=
literal|0x80
block|,
DECL|enumerator|AboveFormProperty
name|AboveFormProperty
init|=
literal|0x100
block|,
DECL|enumerator|HalfFormProperty
name|HalfFormProperty
init|=
literal|0x200
block|,
DECL|enumerator|PostFormProperty
name|PostFormProperty
init|=
literal|0x400
block|,
DECL|enumerator|ConjunctFormProperty
name|ConjunctFormProperty
init|=
literal|0x800
block|,
DECL|enumerator|VattuProperty
name|VattuProperty
init|=
literal|0x1000
block|,
DECL|enumerator|PreSubstProperty
name|PreSubstProperty
init|=
literal|0x2000
block|,
DECL|enumerator|BelowSubstProperty
name|BelowSubstProperty
init|=
literal|0x4000
block|,
DECL|enumerator|AboveSubstProperty
name|AboveSubstProperty
init|=
literal|0x8000
block|,
DECL|enumerator|PostSubstProperty
name|PostSubstProperty
init|=
literal|0x10000
block|,
DECL|enumerator|HalantProperty
name|HalantProperty
init|=
literal|0x20000
block|,
DECL|enumerator|CligProperty
name|CligProperty
init|=
literal|0x40000
block|,
DECL|enumerator|IndicCaltProperty
name|IndicCaltProperty
init|=
literal|0x80000
block|}
DECL|typedef|HB_OpenTypeProperty
name|HB_OpenTypeProperty
typedef|;
end_typedef
begin_comment
comment|/* return true if ok. */
end_comment
begin_typedef
DECL|typedef|HB_ShapeFunction
typedef|typedef
name|HB_Bool
function_decl|(
modifier|*
name|HB_ShapeFunction
function_decl|)
parameter_list|(
name|HB_ShaperItem
modifier|*
name|shaper_item
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|HB_AttributeFunction
typedef|typedef
name|void
function_decl|(
modifier|*
name|HB_AttributeFunction
function_decl|)
parameter_list|(
name|HB_Script
name|script
parameter_list|,
specifier|const
name|HB_UChar16
modifier|*
name|string
parameter_list|,
name|hb_uint32
name|from
parameter_list|,
name|hb_uint32
name|len
parameter_list|,
name|HB_CharAttributes
modifier|*
name|attributes
parameter_list|)
function_decl|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|shape
name|HB_ShapeFunction
name|shape
decl_stmt|;
DECL|member|charAttributes
name|HB_AttributeFunction
name|charAttributes
decl_stmt|;
block|}
DECL|typedef|HB_ScriptEngine
name|HB_ScriptEngine
typedef|;
end_typedef
begin_decl_stmt
specifier|extern
specifier|const
name|HB_ScriptEngine
name|hb_scriptEngines
index|[]
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|extern
name|HB_Bool
name|HB_BasicShape
parameter_list|(
name|HB_ShaperItem
modifier|*
name|shaper_item
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|HB_Bool
name|HB_GreekShape
parameter_list|(
name|HB_ShaperItem
modifier|*
name|shaper_item
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|HB_Bool
name|HB_TibetanShape
parameter_list|(
name|HB_ShaperItem
modifier|*
name|shaper_item
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|HB_Bool
name|HB_HebrewShape
parameter_list|(
name|HB_ShaperItem
modifier|*
name|shaper_item
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|HB_Bool
name|HB_ArabicShape
parameter_list|(
name|HB_ShaperItem
modifier|*
name|shaper_item
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|HB_Bool
name|HB_HangulShape
parameter_list|(
name|HB_ShaperItem
modifier|*
name|shaper_item
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|HB_Bool
name|HB_MyanmarShape
parameter_list|(
name|HB_ShaperItem
modifier|*
name|shaper_item
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|HB_Bool
name|HB_KhmerShape
parameter_list|(
name|HB_ShaperItem
modifier|*
name|shaper_item
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|HB_Bool
name|HB_IndicShape
parameter_list|(
name|HB_ShaperItem
modifier|*
name|shaper_item
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|HB_TibetanAttributes
parameter_list|(
name|HB_Script
name|script
parameter_list|,
specifier|const
name|HB_UChar16
modifier|*
name|string
parameter_list|,
name|hb_uint32
name|from
parameter_list|,
name|hb_uint32
name|len
parameter_list|,
name|HB_CharAttributes
modifier|*
name|attributes
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|HB_MyanmarAttributes
parameter_list|(
name|HB_Script
name|script
parameter_list|,
specifier|const
name|HB_UChar16
modifier|*
name|string
parameter_list|,
name|hb_uint32
name|from
parameter_list|,
name|hb_uint32
name|len
parameter_list|,
name|HB_CharAttributes
modifier|*
name|attributes
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|HB_KhmerAttributes
parameter_list|(
name|HB_Script
name|script
parameter_list|,
specifier|const
name|HB_UChar16
modifier|*
name|string
parameter_list|,
name|hb_uint32
name|from
parameter_list|,
name|hb_uint32
name|len
parameter_list|,
name|HB_CharAttributes
modifier|*
name|attributes
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|HB_IndicAttributes
parameter_list|(
name|HB_Script
name|script
parameter_list|,
specifier|const
name|HB_UChar16
modifier|*
name|string
parameter_list|,
name|hb_uint32
name|from
parameter_list|,
name|hb_uint32
name|len
parameter_list|,
name|HB_CharAttributes
modifier|*
name|attributes
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|HB_ThaiAttributes
parameter_list|(
name|HB_Script
name|script
parameter_list|,
specifier|const
name|HB_UChar16
modifier|*
name|string
parameter_list|,
name|hb_uint32
name|from
parameter_list|,
name|hb_uint32
name|len
parameter_list|,
name|HB_CharAttributes
modifier|*
name|attributes
parameter_list|)
function_decl|;
end_function_decl
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|tag
name|hb_uint32
name|tag
decl_stmt|;
DECL|member|property
name|hb_uint32
name|property
decl_stmt|;
block|}
DECL|typedef|HB_OpenTypeFeature
name|HB_OpenTypeFeature
typedef|;
end_typedef
begin_define
DECL|macro|PositioningProperties
define|#
directive|define
name|PositioningProperties
value|0x80000000
end_define
begin_function_decl
name|HB_Bool
name|HB_SelectScript
parameter_list|(
name|HB_ShaperItem
modifier|*
name|item
parameter_list|,
specifier|const
name|HB_OpenTypeFeature
modifier|*
name|features
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|HB_Bool
name|HB_OpenTypeShape
parameter_list|(
name|HB_ShaperItem
modifier|*
name|item
parameter_list|,
specifier|const
name|hb_uint32
modifier|*
name|properties
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|HB_Bool
name|HB_OpenTypePosition
parameter_list|(
name|HB_ShaperItem
modifier|*
name|item
parameter_list|,
name|int
name|availableGlyphs
parameter_list|,
name|HB_Bool
name|doLogClusters
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|HB_HeuristicPosition
parameter_list|(
name|HB_ShaperItem
modifier|*
name|item
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|HB_HeuristicSetGlyphAttributes
parameter_list|(
name|HB_ShaperItem
modifier|*
name|item
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|HB_IsControlChar
define|#
directive|define
name|HB_IsControlChar
parameter_list|(
name|uc
parameter_list|)
define|\
value|((uc>= 0x200b&& uc<= 0x200f
comment|/* ZW Space, ZWNJ, ZWJ, LRM and RLM */
value|) \      || (uc>= 0x2028&& uc<= 0x202f
comment|/* LS, PS, LRE, RLE, PDF, LRO, RLO, NNBSP */
value|) \      || (uc>= 0x206a&& uc<= 0x206f
comment|/* ISS, ASS, IAFS, AFS, NADS, NODS */
value|))
end_define
begin_function_decl
name|HB_Bool
name|HB_ConvertStringToGlyphIndices
parameter_list|(
name|HB_ShaperItem
modifier|*
name|shaper_item
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|HB_GetGlyphAdvances
define|#
directive|define
name|HB_GetGlyphAdvances
parameter_list|(
name|shaper_item
parameter_list|)
define|\
value|shaper_item->font->klass->getGlyphAdvances(shaper_item->font, \                                                shaper_item->glyphs, shaper_item->num_glyphs, \                                                shaper_item->advances, \                                                shaper_item->face->current_flags);
end_define
begin_define
DECL|macro|HB_DECLARE_STACKARRAY
define|#
directive|define
name|HB_DECLARE_STACKARRAY
parameter_list|(
name|Type
parameter_list|,
name|Name
parameter_list|)
define|\
value|Type stack##Name[512]; \     Type *Name = stack##Name;
end_define
begin_define
DECL|macro|HB_INIT_STACKARRAY
define|#
directive|define
name|HB_INIT_STACKARRAY
parameter_list|(
name|Type
parameter_list|,
name|Name
parameter_list|,
name|Length
parameter_list|)
define|\
value|if ((Length)>= 512) \         Name = (Type *)malloc((Length) * sizeof(Type));
end_define
begin_define
DECL|macro|HB_STACKARRAY
define|#
directive|define
name|HB_STACKARRAY
parameter_list|(
name|Type
parameter_list|,
name|Name
parameter_list|,
name|Length
parameter_list|)
define|\
value|HB_DECLARE_STACKARRAY(Type, Name) \     HB_INIT_STACKARRAY(Type, Name, Length)
end_define
begin_define
DECL|macro|HB_FREE_STACKARRAY
define|#
directive|define
name|HB_FREE_STACKARRAY
parameter_list|(
name|Name
parameter_list|)
define|\
value|if (stack##Name != Name) \         free(Name);
end_define
begin_macro
name|HB_END_HEADER
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
