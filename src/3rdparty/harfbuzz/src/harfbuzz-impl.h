begin_unit
begin_comment
comment|/*  * Copyright (C) 1998-2004  David Turner and Werner Lemberg  * Copyright (C) 2006  Behdad Esfahbod  *  * This is part of HarfBuzz, an OpenType Layout engine library.  *  * Permission is hereby granted, without written agreement and without  * license or royalty fees, to use, copy, modify, and distribute this  * software and its documentation for any purpose, provided that the  * above copyright notice and the following two paragraphs appear in  * all copies of this software.  *  * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR  * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES  * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN  * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH  * DAMAGE.  *  * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,  * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND  * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS  * ON AN "AS IS" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO  * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|HARFBUZZ_IMPL_H
end_ifndef
begin_define
DECL|macro|HARFBUZZ_IMPL_H
define|#
directive|define
name|HARFBUZZ_IMPL_H
end_define
begin_include
include|#
directive|include
file|"harfbuzz-global.h"
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_function_decl
name|HB_BEGIN_HEADER
ifndef|#
directive|ifndef
name|HB_INTERNAL
DECL|macro|HB_INTERNAL
define|#
directive|define
name|HB_INTERNAL
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NULL
DECL|macro|NULL
define|#
directive|define
name|NULL
value|((void *)0)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|FALSE
DECL|macro|FALSE
define|#
directive|define
name|FALSE
value|0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|TRUE
DECL|macro|TRUE
define|#
directive|define
name|TRUE
value|1
endif|#
directive|endif
ifndef|#
directive|ifndef
name|TTAG_GDEF
DECL|macro|TTAG_GDEF
define|#
directive|define
name|TTAG_GDEF
value|HB_MAKE_TAG( 'G', 'D', 'E', 'F' )
endif|#
directive|endif
ifndef|#
directive|ifndef
name|TTAG_GPOS
DECL|macro|TTAG_GPOS
define|#
directive|define
name|TTAG_GPOS
value|HB_MAKE_TAG( 'G', 'P', 'O', 'S' )
endif|#
directive|endif
ifndef|#
directive|ifndef
name|TTAG_GSUB
DECL|macro|TTAG_GSUB
define|#
directive|define
name|TTAG_GSUB
value|HB_MAKE_TAG( 'G', 'S', 'U', 'B' )
endif|#
directive|endif
ifndef|#
directive|ifndef
name|HB_UNUSED
DECL|macro|HB_UNUSED
define|#
directive|define
name|HB_UNUSED
parameter_list|(
name|arg
parameter_list|)
value|((arg) = (arg))
endif|#
directive|endif
DECL|macro|HB_LIKELY
define|#
directive|define
name|HB_LIKELY
parameter_list|(
name|cond
parameter_list|)
value|(cond)
DECL|macro|HB_UNLIKELY
define|#
directive|define
name|HB_UNLIKELY
parameter_list|(
name|cond
parameter_list|)
value|(cond)
DECL|macro|ARRAY_LEN
define|#
directive|define
name|ARRAY_LEN
parameter_list|(
name|Array
parameter_list|)
value|((int)(sizeof (Array) / sizeof (Array)[0]))
DECL|macro|HB_IsHighSurrogate
define|#
directive|define
name|HB_IsHighSurrogate
parameter_list|(
name|ucs
parameter_list|)
define|\
value|(((ucs)& 0xfc00) == 0xd800)
DECL|macro|HB_IsLowSurrogate
define|#
directive|define
name|HB_IsLowSurrogate
parameter_list|(
name|ucs
parameter_list|)
define|\
value|(((ucs)& 0xfc00) == 0xdc00)
DECL|macro|HB_SurrogateToUcs4
define|#
directive|define
name|HB_SurrogateToUcs4
parameter_list|(
name|high
parameter_list|,
name|low
parameter_list|)
define|\
value|(((HB_UChar32)(high))<<10) + (low) - 0x35fdc00;
DECL|macro|ALLOC
define|#
directive|define
name|ALLOC
parameter_list|(
name|_ptr
parameter_list|,
name|_size
parameter_list|)
define|\
value|( (_ptr) = _hb_alloc( _size,&error ), error != 0 )
DECL|macro|REALLOC
define|#
directive|define
name|REALLOC
parameter_list|(
name|_ptr
parameter_list|,
name|_newsz
parameter_list|)
define|\
value|( (_ptr) = _hb_realloc( (_ptr), (_newsz),&error ), error != 0 )
DECL|macro|FREE
define|#
directive|define
name|FREE
parameter_list|(
name|_ptr
parameter_list|)
define|\
value|do {                                 \     if ( (_ptr) )                      \     {                                  \       _hb_free( _ptr );     \       _ptr = NULL;                     \     }                                  \   } while (0)
DECL|macro|ALLOC_ARRAY
define|#
directive|define
name|ALLOC_ARRAY
parameter_list|(
name|_ptr
parameter_list|,
name|_count
parameter_list|,
name|_type
parameter_list|)
define|\
value|ALLOC(_ptr,(_count)*sizeof(_type))
DECL|macro|REALLOC_ARRAY
define|#
directive|define
name|REALLOC_ARRAY
parameter_list|(
name|_ptr
parameter_list|,
name|_newcnt
parameter_list|,
name|_type
parameter_list|)
define|\
value|REALLOC(_ptr,(_newcnt)*sizeof(_type))
DECL|macro|MEM_Copy
define|#
directive|define
name|MEM_Copy
parameter_list|(
name|dest
parameter_list|,
name|source
parameter_list|,
name|count
parameter_list|)
value|memcpy( (char*)(dest), (const char*)(source), (size_t)(count) )
DECL|macro|ERR
define|#
directive|define
name|ERR
parameter_list|(
name|err
parameter_list|)
value|_hb_err (err)
name|HB_INTERNAL
name|HB_Pointer
name|_hb_alloc
parameter_list|(
name|size_t
name|size
parameter_list|,
name|HB_Error
modifier|*
name|perror_
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|HB_INTERNAL
name|HB_Pointer
name|_hb_realloc
parameter_list|(
name|HB_Pointer
name|block
parameter_list|,
name|size_t
name|new_size
parameter_list|,
name|HB_Error
modifier|*
name|perror_
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|HB_INTERNAL
name|void
name|_hb_free
parameter_list|(
name|HB_Pointer
name|block
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* helper func to set a breakpoint on */
end_comment
begin_function_decl
name|HB_INTERNAL
name|HB_Error
name|_hb_err
parameter_list|(
name|HB_Error
name|code
parameter_list|)
function_decl|;
end_function_decl
begin_macro
name|HB_END_HEADER
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* HARFBUZZ_IMPL_H */
end_comment
end_unit
