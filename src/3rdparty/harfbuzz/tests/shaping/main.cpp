begin_unit
begin_comment
comment|/*  * Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies)  *  * This is part of HarfBuzz, an OpenType Layout engine library.  *  * Permission is hereby granted, without written agreement and without  * license or royalty fees, to use, copy, modify, and distribute this  * software and its documentation for any purpose, provided that the  * above copyright notice and the following two paragraphs appear in  * all copies of this software.  *  * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR  * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES  * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN  * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH  * DAMAGE.  *  * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,  * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND  * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS  * ON AN "AS IS" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO  * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.  */
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<ft2build.h>
end_include
begin_include
include|#
directive|include
include|FT_FREETYPE_H
end_include
begin_include
include|#
directive|include
include|FT_TRUETYPE_TABLES_H
end_include
begin_include
include|#
directive|include
file|<harfbuzz-shaper.h>
end_include
begin_include
include|#
directive|include
file|<harfbuzz-global.h>
end_include
begin_include
include|#
directive|include
file|<harfbuzz-gpos.h>
end_include
begin_decl_stmt
DECL|variable|freetype
specifier|static
name|FT_Library
name|freetype
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|loadFace
specifier|static
name|FT_Face
name|loadFace
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
name|FT_Face
name|face
decl_stmt|;
name|char
name|path
index|[
literal|256
index|]
decl_stmt|;
name|strcpy
argument_list|(
name|path
argument_list|,
name|SRCDIR
argument_list|)
expr_stmt|;
name|strcat
argument_list|(
name|path
argument_list|,
literal|"/fonts/"
argument_list|)
expr_stmt|;
name|strcat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|FT_New_Face
argument_list|(
name|freetype
argument_list|,
name|path
argument_list|,
comment|/*index*/
literal|0
argument_list|,
operator|&
name|face
argument_list|)
condition|)
return|return
literal|0
return|;
return|return
name|face
return|;
block|}
end_function
begin_function
DECL|function|getChar
specifier|static
name|HB_UChar32
name|getChar
parameter_list|(
specifier|const
name|HB_UChar16
modifier|*
name|string
parameter_list|,
name|hb_uint32
name|length
parameter_list|,
name|hb_uint32
modifier|&
name|i
parameter_list|)
block|{
name|HB_UChar32
name|ch
decl_stmt|;
if|if
condition|(
name|HB_IsHighSurrogate
argument_list|(
name|string
index|[
name|i
index|]
argument_list|)
operator|&&
name|i
operator|<
name|length
operator|-
literal|1
operator|&&
name|HB_IsLowSurrogate
argument_list|(
name|string
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
condition|)
block|{
name|ch
operator|=
name|HB_SurrogateToUcs4
argument_list|(
name|string
index|[
name|i
index|]
argument_list|,
name|string
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
else|else
block|{
name|ch
operator|=
name|string
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|ch
return|;
block|}
end_function
begin_function
DECL|function|hb_stringToGlyphs
specifier|static
name|HB_Bool
name|hb_stringToGlyphs
parameter_list|(
name|HB_Font
name|font
parameter_list|,
specifier|const
name|HB_UChar16
modifier|*
name|string
parameter_list|,
name|hb_uint32
name|length
parameter_list|,
name|HB_Glyph
modifier|*
name|glyphs
parameter_list|,
name|hb_uint32
modifier|*
name|numGlyphs
parameter_list|,
name|HB_Bool
comment|/*rightToLeft*/
parameter_list|)
block|{
name|FT_Face
name|face
init|=
operator|(
name|FT_Face
operator|)
name|font
operator|->
name|userData
decl_stmt|;
if|if
condition|(
name|length
operator|>
operator|*
name|numGlyphs
condition|)
return|return
literal|false
return|;
name|int
name|glyph_pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|hb_uint32
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|glyphs
index|[
name|glyph_pos
index|]
operator|=
name|FT_Get_Char_Index
argument_list|(
name|face
argument_list|,
name|getChar
argument_list|(
name|string
argument_list|,
name|length
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|glyph_pos
expr_stmt|;
block|}
operator|*
name|numGlyphs
operator|=
name|glyph_pos
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|hb_getAdvances
specifier|static
name|void
name|hb_getAdvances
parameter_list|(
name|HB_Font
comment|/*font*/
parameter_list|,
specifier|const
name|HB_Glyph
modifier|*
comment|/*glyphs*/
parameter_list|,
name|hb_uint32
name|numGlyphs
parameter_list|,
name|HB_Fixed
modifier|*
name|advances
parameter_list|,
name|int
comment|/*flags*/
parameter_list|)
block|{
for|for
control|(
name|hb_uint32
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numGlyphs
condition|;
operator|++
name|i
control|)
name|advances
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
comment|// ### not tested right now
block|}
end_function
begin_function
DECL|function|hb_canRender
specifier|static
name|HB_Bool
name|hb_canRender
parameter_list|(
name|HB_Font
name|font
parameter_list|,
specifier|const
name|HB_UChar16
modifier|*
name|string
parameter_list|,
name|hb_uint32
name|length
parameter_list|)
block|{
name|FT_Face
name|face
init|=
operator|(
name|FT_Face
operator|)
name|font
operator|->
name|userData
decl_stmt|;
for|for
control|(
name|hb_uint32
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
if|if
condition|(
operator|!
name|FT_Get_Char_Index
argument_list|(
name|face
argument_list|,
name|getChar
argument_list|(
name|string
argument_list|,
name|length
argument_list|,
name|i
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|hb_getSFntTable
specifier|static
name|HB_Error
name|hb_getSFntTable
parameter_list|(
name|void
modifier|*
name|font
parameter_list|,
name|HB_Tag
name|tableTag
parameter_list|,
name|HB_Byte
modifier|*
name|buffer
parameter_list|,
name|HB_UInt
modifier|*
name|length
parameter_list|)
block|{
name|FT_Face
name|face
init|=
operator|(
name|FT_Face
operator|)
name|font
decl_stmt|;
name|FT_ULong
name|ftlen
init|=
operator|*
name|length
decl_stmt|;
name|FT_Error
name|error
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|FT_IS_SFNT
argument_list|(
name|face
argument_list|)
condition|)
return|return
name|HB_Err_Invalid_Argument
return|;
name|error
operator|=
name|FT_Load_Sfnt_Table
argument_list|(
name|face
argument_list|,
name|tableTag
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
operator|&
name|ftlen
argument_list|)
expr_stmt|;
operator|*
name|length
operator|=
name|ftlen
expr_stmt|;
return|return
operator|(
name|HB_Error
operator|)
name|error
return|;
block|}
end_function
begin_function
DECL|function|hb_getPointInOutline
name|HB_Error
name|hb_getPointInOutline
parameter_list|(
name|HB_Font
name|font
parameter_list|,
name|HB_Glyph
name|glyph
parameter_list|,
name|int
name|flags
parameter_list|,
name|hb_uint32
name|point
parameter_list|,
name|HB_Fixed
modifier|*
name|xpos
parameter_list|,
name|HB_Fixed
modifier|*
name|ypos
parameter_list|,
name|hb_uint32
modifier|*
name|nPoints
parameter_list|)
block|{
name|HB_Error
name|error
init|=
name|HB_Err_Ok
decl_stmt|;
name|FT_Face
name|face
init|=
operator|(
name|FT_Face
operator|)
name|font
operator|->
name|userData
decl_stmt|;
name|int
name|load_flags
init|=
operator|(
name|flags
operator|&
name|HB_ShaperFlag_UseDesignMetrics
operator|)
condition|?
name|FT_LOAD_NO_HINTING
else|:
name|FT_LOAD_DEFAULT
decl_stmt|;
if|if
condition|(
operator|(
name|error
operator|=
operator|(
name|HB_Error
operator|)
name|FT_Load_Glyph
argument_list|(
name|face
argument_list|,
name|glyph
argument_list|,
name|load_flags
argument_list|)
operator|)
condition|)
return|return
name|error
return|;
if|if
condition|(
name|face
operator|->
name|glyph
operator|->
name|format
operator|!=
name|ft_glyph_format_outline
condition|)
return|return
operator|(
name|HB_Error
operator|)
name|HB_Err_Invalid_SubTable
return|;
operator|*
name|nPoints
operator|=
name|face
operator|->
name|glyph
operator|->
name|outline
operator|.
name|n_points
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|*
name|nPoints
operator|)
condition|)
return|return
name|HB_Err_Ok
return|;
if|if
condition|(
name|point
operator|>
operator|*
name|nPoints
condition|)
return|return
operator|(
name|HB_Error
operator|)
name|HB_Err_Invalid_SubTable
return|;
operator|*
name|xpos
operator|=
name|face
operator|->
name|glyph
operator|->
name|outline
operator|.
name|points
index|[
name|point
index|]
operator|.
name|x
expr_stmt|;
operator|*
name|ypos
operator|=
name|face
operator|->
name|glyph
operator|->
name|outline
operator|.
name|points
index|[
name|point
index|]
operator|.
name|y
expr_stmt|;
return|return
name|HB_Err_Ok
return|;
block|}
end_function
begin_function
DECL|function|hb_getGlyphMetrics
name|void
name|hb_getGlyphMetrics
parameter_list|(
name|HB_Font
parameter_list|,
name|HB_Glyph
parameter_list|,
name|HB_GlyphMetrics
modifier|*
name|metrics
parameter_list|)
block|{
comment|// ###
name|metrics
operator|->
name|x
operator|=
name|metrics
operator|->
name|y
operator|=
name|metrics
operator|->
name|width
operator|=
name|metrics
operator|->
name|height
operator|=
name|metrics
operator|->
name|xOffset
operator|=
name|metrics
operator|->
name|yOffset
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hb_getFontMetric
name|HB_Fixed
name|hb_getFontMetric
parameter_list|(
name|HB_Font
parameter_list|,
name|HB_FontMetric
parameter_list|)
block|{
return|return
literal|0
return|;
comment|// ####
block|}
end_function
begin_decl_stmt
DECL|variable|hb_fontClass
specifier|const
name|HB_FontClass
name|hb_fontClass
init|=
block|{
name|hb_stringToGlyphs
block|,
name|hb_getAdvances
block|,
name|hb_canRender
block|,
name|hb_getPointInOutline
block|,
name|hb_getGlyphMetrics
block|,
name|hb_getFontMetric
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES= gui/text/qscriptengine.cpp
end_comment
begin_class
DECL|class|tst_QScriptEngine
class|class
name|tst_QScriptEngine
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QScriptEngine
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QScriptEngine
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|greek
parameter_list|()
function_decl|;
name|void
name|devanagari
parameter_list|()
function_decl|;
name|void
name|bengali
parameter_list|()
function_decl|;
name|void
name|gurmukhi
parameter_list|()
function_decl|;
comment|// gujarati missing
name|void
name|oriya
parameter_list|()
function_decl|;
name|void
name|tamil
parameter_list|()
function_decl|;
name|void
name|telugu
parameter_list|()
function_decl|;
name|void
name|kannada
parameter_list|()
function_decl|;
name|void
name|malayalam
parameter_list|()
function_decl|;
name|void
name|sinhala
parameter_list|()
function_decl|;
name|void
name|khmer
parameter_list|()
function_decl|;
name|void
name|nko
parameter_list|()
function_decl|;
name|void
name|linearB
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QScriptEngine
name|tst_QScriptEngine
operator|::
name|tst_QScriptEngine
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QScriptEngine
name|tst_QScriptEngine
operator|::
name|~
name|tst_QScriptEngine
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QScriptEngine
operator|::
name|initTestCase
parameter_list|()
block|{
name|FT_Init_FreeType
argument_list|(
operator|&
name|freetype
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QScriptEngine
operator|::
name|cleanupTestCase
parameter_list|()
block|{
name|FT_Done_FreeType
argument_list|(
name|freetype
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|Shaper
class|class
name|Shaper
block|{
public|public:
name|Shaper
parameter_list|(
name|FT_Face
name|face
parameter_list|,
name|HB_Script
name|script
parameter_list|,
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
constructor_decl|;
DECL|member|hbFont
name|HB_FontRec
name|hbFont
decl_stmt|;
DECL|member|shaper_item
name|HB_ShaperItem
name|shaper_item
decl_stmt|;
DECL|member|hb_glyphs
name|QVarLengthArray
argument_list|<
name|HB_Glyph
argument_list|>
name|hb_glyphs
decl_stmt|;
DECL|member|hb_attributes
name|QVarLengthArray
argument_list|<
name|HB_GlyphAttributes
argument_list|>
name|hb_attributes
decl_stmt|;
DECL|member|hb_advances
name|QVarLengthArray
argument_list|<
name|HB_Fixed
argument_list|>
name|hb_advances
decl_stmt|;
DECL|member|hb_offsets
name|QVarLengthArray
argument_list|<
name|HB_FixedPoint
argument_list|>
name|hb_offsets
decl_stmt|;
DECL|member|hb_logClusters
name|QVarLengthArray
argument_list|<
name|unsigned
name|short
argument_list|>
name|hb_logClusters
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|Shaper
name|Shaper
operator|::
name|Shaper
parameter_list|(
name|FT_Face
name|face
parameter_list|,
name|HB_Script
name|script
parameter_list|,
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
name|HB_Face
name|hbFace
init|=
name|HB_NewFace
argument_list|(
name|face
argument_list|,
name|hb_getSFntTable
argument_list|)
decl_stmt|;
name|hbFont
operator|.
name|klass
operator|=
operator|&
name|hb_fontClass
expr_stmt|;
name|hbFont
operator|.
name|userData
operator|=
name|face
expr_stmt|;
name|hbFont
operator|.
name|x_ppem
operator|=
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|x_ppem
expr_stmt|;
name|hbFont
operator|.
name|y_ppem
operator|=
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|y_ppem
expr_stmt|;
name|hbFont
operator|.
name|x_scale
operator|=
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|x_scale
expr_stmt|;
name|hbFont
operator|.
name|y_scale
operator|=
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|y_scale
expr_stmt|;
name|shaper_item
operator|.
name|kerning_applied
operator|=
literal|false
expr_stmt|;
name|shaper_item
operator|.
name|string
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|HB_UChar16
operator|*
argument_list|>
argument_list|(
name|str
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|shaper_item
operator|.
name|stringLength
operator|=
name|str
operator|.
name|length
argument_list|()
expr_stmt|;
name|shaper_item
operator|.
name|item
operator|.
name|script
operator|=
name|script
expr_stmt|;
name|shaper_item
operator|.
name|item
operator|.
name|pos
operator|=
literal|0
expr_stmt|;
name|shaper_item
operator|.
name|item
operator|.
name|length
operator|=
name|shaper_item
operator|.
name|stringLength
expr_stmt|;
name|shaper_item
operator|.
name|item
operator|.
name|bidiLevel
operator|=
literal|0
expr_stmt|;
comment|// ###
name|shaper_item
operator|.
name|shaperFlags
operator|=
literal|0
expr_stmt|;
name|shaper_item
operator|.
name|font
operator|=
operator|&
name|hbFont
expr_stmt|;
name|shaper_item
operator|.
name|face
operator|=
name|hbFace
expr_stmt|;
name|shaper_item
operator|.
name|num_glyphs
operator|=
name|shaper_item
operator|.
name|item
operator|.
name|length
expr_stmt|;
name|shaper_item
operator|.
name|glyphIndicesPresent
operator|=
literal|false
expr_stmt|;
name|shaper_item
operator|.
name|initialGlyphCount
operator|=
literal|0
expr_stmt|;
while|while
condition|(
literal|1
condition|)
block|{
name|hb_glyphs
operator|.
name|resize
argument_list|(
name|shaper_item
operator|.
name|num_glyphs
argument_list|)
expr_stmt|;
name|hb_attributes
operator|.
name|resize
argument_list|(
name|shaper_item
operator|.
name|num_glyphs
argument_list|)
expr_stmt|;
name|hb_advances
operator|.
name|resize
argument_list|(
name|shaper_item
operator|.
name|num_glyphs
argument_list|)
expr_stmt|;
name|hb_offsets
operator|.
name|resize
argument_list|(
name|shaper_item
operator|.
name|num_glyphs
argument_list|)
expr_stmt|;
name|hb_logClusters
operator|.
name|resize
argument_list|(
name|shaper_item
operator|.
name|num_glyphs
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|hb_glyphs
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|hb_glyphs
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|HB_Glyph
argument_list|)
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|hb_attributes
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|hb_attributes
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|HB_GlyphAttributes
argument_list|)
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|hb_advances
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|hb_advances
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|HB_Fixed
argument_list|)
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|hb_offsets
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|hb_offsets
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|HB_FixedPoint
argument_list|)
argument_list|)
expr_stmt|;
name|shaper_item
operator|.
name|glyphs
operator|=
name|hb_glyphs
operator|.
name|data
argument_list|()
expr_stmt|;
name|shaper_item
operator|.
name|attributes
operator|=
name|hb_attributes
operator|.
name|data
argument_list|()
expr_stmt|;
name|shaper_item
operator|.
name|advances
operator|=
name|hb_advances
operator|.
name|data
argument_list|()
expr_stmt|;
name|shaper_item
operator|.
name|offsets
operator|=
name|hb_offsets
operator|.
name|data
argument_list|()
expr_stmt|;
name|shaper_item
operator|.
name|log_clusters
operator|=
name|hb_logClusters
operator|.
name|data
argument_list|()
expr_stmt|;
if|if
condition|(
name|HB_ShapeItem
argument_list|(
operator|&
name|shaper_item
argument_list|)
condition|)
break|break;
block|}
name|HB_FreeFace
argument_list|(
name|hbFace
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|decomposedShaping
specifier|static
name|bool
name|decomposedShaping
parameter_list|(
name|FT_Face
name|face
parameter_list|,
name|HB_Script
name|script
parameter_list|,
specifier|const
name|QChar
modifier|&
name|ch
parameter_list|)
block|{
name|QString
name|uc
init|=
name|QString
argument_list|()
operator|.
name|append
argument_list|(
name|ch
argument_list|)
decl_stmt|;
name|Shaper
name|shaper
argument_list|(
name|face
argument_list|,
name|script
argument_list|,
name|uc
argument_list|)
decl_stmt|;
name|uc
operator|=
name|uc
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
expr_stmt|;
name|Shaper
name|decomposed
argument_list|(
name|face
argument_list|,
name|script
argument_list|,
name|uc
argument_list|)
decl_stmt|;
if|if
condition|(
name|shaper
operator|.
name|shaper_item
operator|.
name|num_glyphs
operator|!=
name|decomposed
operator|.
name|shaper_item
operator|.
name|num_glyphs
condition|)
goto|goto
name|error
goto|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shaper
operator|.
name|shaper_item
operator|.
name|num_glyphs
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
name|shaper
operator|.
name|shaper_item
operator|.
name|glyphs
index|[
name|i
index|]
operator|&
literal|0xffffff
operator|)
operator|!=
operator|(
name|decomposed
operator|.
name|shaper_item
operator|.
name|glyphs
index|[
name|i
index|]
operator|&
literal|0xffffff
operator|)
condition|)
goto|goto
name|error
goto|;
block|}
return|return
literal|true
return|;
name|error
label|:
name|QString
name|str
init|=
literal|""
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|uc
operator|.
name|length
argument_list|()
condition|)
block|{
name|str
operator|+=
name|QString
argument_list|(
literal|"%1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|uc
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
argument_list|,
literal|4
argument_list|,
literal|16
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|qDebug
argument_list|(
literal|"%s: decomposedShaping of char %4x failed\n    decomposedString: %s\n   nglyphs=%d, decomposed nglyphs %d"
argument_list|,
name|face
operator|->
name|family_name
argument_list|,
name|ch
operator|.
name|unicode
argument_list|()
argument_list|,
name|str
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|shaper
operator|.
name|shaper_item
operator|.
name|num_glyphs
argument_list|,
name|decomposed
operator|.
name|shaper_item
operator|.
name|num_glyphs
argument_list|)
expr_stmt|;
name|str
operator|=
literal|""
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|i
operator|<
name|shaper
operator|.
name|shaper_item
operator|.
name|num_glyphs
condition|)
block|{
name|str
operator|+=
name|QString
argument_list|(
literal|"%1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|shaper
operator|.
name|shaper_item
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|,
literal|4
argument_list|,
literal|16
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|qDebug
argument_list|(
literal|"    composed glyph result   = %s"
argument_list|,
name|str
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|str
operator|=
literal|""
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|i
operator|<
name|decomposed
operator|.
name|shaper_item
operator|.
name|num_glyphs
condition|)
block|{
name|str
operator|+=
name|QString
argument_list|(
literal|"%1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|decomposed
operator|.
name|shaper_item
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|,
literal|4
argument_list|,
literal|16
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|qDebug
argument_list|(
literal|"    decomposed glyph result = %s"
argument_list|,
name|str
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_struct
DECL|struct|ShapeTable
struct|struct
name|ShapeTable
block|{
DECL|member|unicode
name|unsigned
name|short
name|unicode
index|[
literal|16
index|]
decl_stmt|;
DECL|member|glyphs
name|unsigned
name|short
name|glyphs
index|[
literal|16
index|]
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|shaping
specifier|static
name|bool
name|shaping
parameter_list|(
name|FT_Face
name|face
parameter_list|,
specifier|const
name|ShapeTable
modifier|*
name|s
parameter_list|,
name|HB_Script
name|script
parameter_list|)
block|{
name|Shaper
name|shaper
argument_list|(
name|face
argument_list|,
name|script
argument_list|,
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s
operator|->
name|unicode
argument_list|)
argument_list|)
decl_stmt|;
name|hb_uint32
name|nglyphs
init|=
literal|0
decl_stmt|;
specifier|const
name|unsigned
name|short
modifier|*
name|g
init|=
name|s
operator|->
name|glyphs
decl_stmt|;
while|while
condition|(
operator|*
name|g
condition|)
block|{
name|nglyphs
operator|++
expr_stmt|;
name|g
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|nglyphs
operator|!=
name|shaper
operator|.
name|shaper_item
operator|.
name|num_glyphs
condition|)
goto|goto
name|error
goto|;
for|for
control|(
name|hb_uint32
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nglyphs
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
name|shaper
operator|.
name|shaper_item
operator|.
name|glyphs
index|[
name|i
index|]
operator|&
literal|0xffffff
operator|)
operator|!=
name|s
operator|->
name|glyphs
index|[
name|i
index|]
condition|)
goto|goto
name|error
goto|;
block|}
return|return
literal|true
return|;
name|error
label|:
name|QString
name|str
init|=
literal|""
decl_stmt|;
specifier|const
name|unsigned
name|short
modifier|*
name|uc
init|=
name|s
operator|->
name|unicode
decl_stmt|;
while|while
condition|(
operator|*
name|uc
condition|)
block|{
name|str
operator|+=
name|QString
argument_list|(
literal|"%1 "
argument_list|)
operator|.
name|arg
argument_list|(
operator|*
name|uc
argument_list|,
literal|4
argument_list|,
literal|16
argument_list|)
expr_stmt|;
operator|++
name|uc
expr_stmt|;
block|}
name|qDebug
argument_list|(
literal|"%s: shaping of string %s failed, nglyphs=%d, expected %d"
argument_list|,
name|face
operator|->
name|family_name
argument_list|,
name|str
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|shaper
operator|.
name|shaper_item
operator|.
name|num_glyphs
argument_list|,
name|nglyphs
argument_list|)
expr_stmt|;
name|str
operator|=
literal|""
expr_stmt|;
name|hb_uint32
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|shaper
operator|.
name|shaper_item
operator|.
name|num_glyphs
condition|)
block|{
name|str
operator|+=
name|QString
argument_list|(
literal|"%1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|shaper
operator|.
name|shaper_item
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|,
literal|4
argument_list|,
literal|16
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|qDebug
argument_list|(
literal|"    glyph result = %s"
argument_list|,
name|str
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|greek
name|void
name|tst_QScriptEngine
operator|::
name|greek
parameter_list|()
block|{
name|FT_Face
name|face
init|=
name|loadFace
argument_list|(
literal|"DejaVuSans.ttf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|face
condition|)
block|{
for|for
control|(
name|int
name|uc
init|=
literal|0x1f00
init|;
name|uc
operator|<=
literal|0x1fff
condition|;
operator|++
name|uc
control|)
block|{
name|QString
name|str
decl_stmt|;
name|str
operator|.
name|append
argument_list|(
name|uc
argument_list|)
expr_stmt|;
if|if
condition|(
name|str
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
operator|!=
name|str
condition|)
block|{
comment|//qDebug()<< "skipping"<< hex<< uc;
continue|continue;
block|}
if|if
condition|(
name|uc
operator|==
literal|0x1fc1
operator|||
name|uc
operator|==
literal|0x1fed
condition|)
continue|continue;
name|QVERIFY
argument_list|(
name|decomposedShaping
argument_list|(
name|face
argument_list|,
name|HB_Script_Greek
argument_list|,
name|QChar
argument_list|(
name|uc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|FT_Done_Face
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couln't find DejaVu Sans"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
name|face
operator|=
name|loadFace
argument_list|(
literal|"SBL_grk.ttf"
argument_list|)
expr_stmt|;
if|if
condition|(
name|face
condition|)
block|{
for|for
control|(
name|int
name|uc
init|=
literal|0x1f00
init|;
name|uc
operator|<=
literal|0x1fff
condition|;
operator|++
name|uc
control|)
block|{
name|QString
name|str
decl_stmt|;
name|str
operator|.
name|append
argument_list|(
name|uc
argument_list|)
expr_stmt|;
if|if
condition|(
name|str
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
operator|!=
name|str
condition|)
block|{
comment|//qDebug()<< "skipping"<< hex<< uc;
continue|continue;
block|}
if|if
condition|(
name|uc
operator|==
literal|0x1fc1
operator|||
name|uc
operator|==
literal|0x1fed
condition|)
continue|continue;
name|QVERIFY
argument_list|(
name|decomposedShaping
argument_list|(
name|face
argument_list|,
name|HB_Script_Greek
argument_list|,
name|QChar
argument_list|(
name|uc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0x3b1
block|,
literal|0x300
block|,
literal|0x313
block|,
literal|0x0
block|}
block|,
block|{
literal|0xb8
block|,
literal|0x3d3
block|,
literal|0x3c7
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x3b1
block|,
literal|0x313
block|,
literal|0x300
block|,
literal|0x0
block|}
block|,
block|{
literal|0xd4
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|face
argument_list|,
name|s
argument_list|,
name|HB_Script_Greek
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
name|FT_Done_Face
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couln't find DejaVu Sans"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|devanagari
name|void
name|tst_QScriptEngine
operator|::
name|devanagari
parameter_list|()
block|{
block|{
name|FT_Face
name|face
init|=
name|loadFace
argument_list|(
literal|"raghu.ttf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|face
condition|)
block|{
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
comment|// Ka
block|{
block|{
literal|0x0915
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0080
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant
block|{
block|{
literal|0x0915
block|,
literal|0x094d
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0080
block|,
literal|0x0051
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ka
block|{
block|{
literal|0x0915
block|,
literal|0x094d
block|,
literal|0x0915
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00c8
block|,
literal|0x0080
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka MatraI
block|{
block|{
literal|0x0915
block|,
literal|0x093f
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01d1
block|,
literal|0x0080
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ka
block|{
block|{
literal|0x0930
block|,
literal|0x094d
block|,
literal|0x0915
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0080
block|,
literal|0x005b
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ka MatraI
block|{
block|{
literal|0x0930
block|,
literal|0x094d
block|,
literal|0x0915
block|,
literal|0x093f
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01d1
block|,
literal|0x0080
block|,
literal|0x005b
block|,
literal|0x0
block|}
block|}
block|,
comment|// MatraI
block|{
block|{
literal|0x093f
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01d4
block|,
literal|0x029c
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Nukta
block|{
block|{
literal|0x0915
block|,
literal|0x093c
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00a4
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ra
block|{
block|{
literal|0x0915
block|,
literal|0x094d
block|,
literal|0x0930
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0110
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ra Halant Ka
block|{
block|{
literal|0x0915
block|,
literal|0x094d
block|,
literal|0x0930
block|,
literal|0x094d
block|,
literal|0x0915
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0158
block|,
literal|0x0080
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0930
block|,
literal|0x094d
block|,
literal|0x200d
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00e2
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0915
block|,
literal|0x094d
block|,
literal|0x0930
block|,
literal|0x094d
block|,
literal|0x200d
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0158
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|face
argument_list|,
name|s
argument_list|,
name|HB_Script_Devanagari
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
name|FT_Done_Face
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couln't find raghu.ttf"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|FT_Face
name|face
init|=
name|loadFace
argument_list|(
literal|"mangal.ttf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|face
condition|)
block|{
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
comment|// Ka
block|{
block|{
literal|0x0915
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0080
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant
block|{
block|{
literal|0x0915
block|,
literal|0x094d
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0080
block|,
literal|0x0051
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ka
block|{
block|{
literal|0x0915
block|,
literal|0x094d
block|,
literal|0x0915
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00c8
block|,
literal|0x0080
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka MatraI
block|{
block|{
literal|0x0915
block|,
literal|0x093f
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01d1
block|,
literal|0x0080
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ka
block|{
block|{
literal|0x0930
block|,
literal|0x094d
block|,
literal|0x0915
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0080
block|,
literal|0x005b
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ka MatraI
block|{
block|{
literal|0x0930
block|,
literal|0x094d
block|,
literal|0x0915
block|,
literal|0x093f
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01d1
block|,
literal|0x0080
block|,
literal|0x005b
block|,
literal|0x0
block|}
block|}
block|,
comment|// MatraI
block|{
block|{
literal|0x093f
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01d4
block|,
literal|0x029c
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Nukta
block|{
block|{
literal|0x0915
block|,
literal|0x093c
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00a4
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ra
block|{
block|{
literal|0x0915
block|,
literal|0x094d
block|,
literal|0x0930
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0110
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ra Halant Ka
block|{
block|{
literal|0x0915
block|,
literal|0x094d
block|,
literal|0x0930
block|,
literal|0x094d
block|,
literal|0x0915
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0158
block|,
literal|0x0080
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x92b
block|,
literal|0x94d
block|,
literal|0x930
block|,
literal|0x0
block|}
block|,
block|{
literal|0x125
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x92b
block|,
literal|0x93c
block|,
literal|0x94d
block|,
literal|0x930
block|,
literal|0x0
block|}
block|,
block|{
literal|0x149
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|face
argument_list|,
name|s
argument_list|,
name|HB_Script_Devanagari
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
name|FT_Done_Face
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couldn't find mangal.ttf"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|bengali
name|void
name|tst_QScriptEngine
operator|::
name|bengali
parameter_list|()
block|{
block|{
name|FT_Face
name|face
init|=
name|loadFace
argument_list|(
literal|"AkaashNormal.ttf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|face
condition|)
block|{
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
comment|// Ka
block|{
block|{
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0151
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant
block|{
block|{
literal|0x0995
block|,
literal|0x09cd
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0151
block|,
literal|0x017d
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ka
block|{
block|{
literal|0x0995
block|,
literal|0x09cd
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x019b
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka MatraI
block|{
block|{
literal|0x0995
block|,
literal|0x09bf
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0173
block|,
literal|0x0151
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ka
block|{
block|{
literal|0x09b0
block|,
literal|0x09cd
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0151
block|,
literal|0x0276
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ka MatraI
block|{
block|{
literal|0x09b0
block|,
literal|0x09cd
block|,
literal|0x0995
block|,
literal|0x09bf
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0173
block|,
literal|0x0151
block|,
literal|0x0276
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Nukta
block|{
block|{
literal|0x0995
block|,
literal|0x09bc
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0151
block|,
literal|0x0171
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ra
block|{
block|{
literal|0x0995
block|,
literal|0x09cd
block|,
literal|0x09b0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01f4
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ra Halant Ka
block|{
block|{
literal|0x0995
block|,
literal|0x09cd
block|,
literal|0x09b0
block|,
literal|0x09cd
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x025c
block|,
literal|0x0276
block|,
literal|0x0151
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ya + Halant
block|{
block|{
literal|0x09af
block|,
literal|0x09cd
block|,
literal|0x0
block|}
block|,
block|{
literal|0x016a
block|,
literal|0x017d
block|,
literal|0x0
block|}
block|}
block|,
comment|// Da Halant Ya -> Da Ya-Phala
block|{
block|{
literal|0x09a6
block|,
literal|0x09cd
block|,
literal|0x09af
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01e5
block|,
literal|0x0
block|}
block|}
block|,
comment|// A Halant Ya -> A Ya-phala
block|{
block|{
literal|0x0985
block|,
literal|0x09cd
block|,
literal|0x09af
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0145
block|,
literal|0x01cf
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant Ka
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x026f
block|,
literal|0x0151
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWNJ Ka
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200c
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0164
block|,
literal|0x017d
block|,
literal|0x0151
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWJ Ka
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200d
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x026f
block|,
literal|0x0151
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant ZWNJ Ka
block|{
block|{
literal|0x0995
block|,
literal|0x09cd
block|,
literal|0x200c
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0151
block|,
literal|0x017d
block|,
literal|0x0151
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant ZWJ Ka
block|{
block|{
literal|0x0995
block|,
literal|0x09cd
block|,
literal|0x200d
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x025c
block|,
literal|0x0151
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant Ra
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x09b0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0207
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWNJ Ra
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200c
block|,
literal|0x09b0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0164
block|,
literal|0x017d
block|,
literal|0x016b
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWJ Ra
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200d
block|,
literal|0x09b0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x026f
block|,
literal|0x016b
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant Ba
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x09ac
block|,
literal|0x0
block|}
block|,
block|{
literal|0x022f
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWNJ Ba
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200c
block|,
literal|0x09ac
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0164
block|,
literal|0x017d
block|,
literal|0x0167
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWJ Ba
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200d
block|,
literal|0x09ac
block|,
literal|0x0
block|}
block|,
block|{
literal|0x026f
block|,
literal|0x0167
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant Dha
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x09a7
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01d3
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWNJ Dha
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200c
block|,
literal|0x09a7
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0164
block|,
literal|0x017d
block|,
literal|0x0163
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWJ Dha
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200d
block|,
literal|0x09a7
block|,
literal|0x0
block|}
block|,
block|{
literal|0x026f
block|,
literal|0x0163
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ka MatraAU
block|{
block|{
literal|0x09b0
block|,
literal|0x09cd
block|,
literal|0x0995
block|,
literal|0x09cc
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0179
block|,
literal|0x0151
block|,
literal|0x0276
block|,
literal|0x017e
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ba Halant Ba
block|{
block|{
literal|0x09b0
block|,
literal|0x09cd
block|,
literal|0x09ac
block|,
literal|0x09cd
block|,
literal|0x09ac
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0232
block|,
literal|0x0276
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x9b0
block|,
literal|0x9cd
block|,
literal|0x995
block|,
literal|0x9be
block|,
literal|0x982
block|,
literal|0x0
block|}
block|,
block|{
literal|0x151
block|,
literal|0x276
block|,
literal|0x172
block|,
literal|0x143
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x9b0
block|,
literal|0x9cd
block|,
literal|0x995
block|,
literal|0x9be
block|,
literal|0x983
block|,
literal|0x0
block|}
block|,
block|{
literal|0x151
block|,
literal|0x276
block|,
literal|0x172
block|,
literal|0x144
block|,
literal|0x0
block|}
block|}
block|,
comment|// test decomposed two parts matras
block|{
block|{
literal|0x995
block|,
literal|0x9c7
block|,
literal|0x9be
block|,
literal|0x0
block|}
block|,
block|{
literal|0x179
block|,
literal|0x151
block|,
literal|0x172
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x995
block|,
literal|0x9c7
block|,
literal|0x9d7
block|,
literal|0x0
block|}
block|,
block|{
literal|0x179
block|,
literal|0x151
block|,
literal|0x17e
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x9b0
block|,
literal|0x9cd
block|,
literal|0x9ad
block|,
literal|0x0
block|}
block|,
block|{
literal|0x168
block|,
literal|0x276
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x9f0
block|,
literal|0x9cd
block|,
literal|0x9ad
block|,
literal|0x0
block|}
block|,
block|{
literal|0x168
block|,
literal|0x276
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x9f1
block|,
literal|0x9cd
block|,
literal|0x9ad
block|,
literal|0x0
block|}
block|,
block|{
literal|0x191
block|,
literal|0x17d
block|,
literal|0x168
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra ZWJ Halant Ya
block|{
block|{
literal|0x09b0
block|,
literal|0x200d
block|,
literal|0x09cd
block|,
literal|0x09af
block|,
literal|0x0
block|}
block|,
block|{
literal|0x016b
block|,
literal|0x01cf
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|face
argument_list|,
name|s
argument_list|,
name|HB_Script_Bengali
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
name|FT_Done_Face
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couln't find AkaashNormal.ttf"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|FT_Face
name|face
init|=
name|loadFace
argument_list|(
literal|"MuktiNarrow.ttf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|face
condition|)
block|{
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
comment|// Ka
block|{
block|{
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0073
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant
block|{
block|{
literal|0x0995
block|,
literal|0x09cd
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00b9
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ka
block|{
block|{
literal|0x0995
block|,
literal|0x09cd
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0109
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka MatraI
block|{
block|{
literal|0x0995
block|,
literal|0x09bf
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0095
block|,
literal|0x0073
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ka
block|{
block|{
literal|0x09b0
block|,
literal|0x09cd
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0073
block|,
literal|0x00e1
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ka MatraI
block|{
block|{
literal|0x09b0
block|,
literal|0x09cd
block|,
literal|0x0995
block|,
literal|0x09bf
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0095
block|,
literal|0x0073
block|,
literal|0x00e1
block|,
literal|0x0
block|}
block|}
block|,
comment|// MatraI
block|{
block|{
literal|0x09bf
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0095
block|,
literal|0x01c8
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Nukta
block|{
block|{
literal|0x0995
block|,
literal|0x09bc
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0073
block|,
literal|0x0093
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ra
block|{
block|{
literal|0x0995
block|,
literal|0x09cd
block|,
literal|0x09b0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00e5
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ra Halant Ka
block|{
block|{
literal|0x995
block|,
literal|0x9cd
block|,
literal|0x9b0
block|,
literal|0x9cd
block|,
literal|0x995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x234
block|,
literal|0x24e
block|,
literal|0x73
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ya + Halant
block|{
block|{
literal|0x09af
block|,
literal|0x09cd
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00d2
block|,
literal|0x0
block|}
block|}
block|,
comment|// Da Halant Ya -> Da Ya-Phala
block|{
block|{
literal|0x09a6
block|,
literal|0x09cd
block|,
literal|0x09af
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0084
block|,
literal|0x00e2
block|,
literal|0x0
block|}
block|}
block|,
comment|// A Halant Ya -> A Ya-phala
block|{
block|{
literal|0x0985
block|,
literal|0x09cd
block|,
literal|0x09af
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0067
block|,
literal|0x00e2
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant Ka
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0188
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWNJ Ka
block|{
block|{
literal|0x9a8
block|,
literal|0x9cd
block|,
literal|0x200c
block|,
literal|0x995
block|,
literal|0x0
block|}
block|,
block|{
literal|0xcc
block|,
literal|0x73
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWJ Ka
block|{
block|{
literal|0x9a8
block|,
literal|0x9cd
block|,
literal|0x200d
block|,
literal|0x995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x247
block|,
literal|0x73
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant ZWNJ Ka
block|{
block|{
literal|0x9a8
block|,
literal|0x9cd
block|,
literal|0x200d
block|,
literal|0x995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x247
block|,
literal|0x73
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant ZWJ Ka
block|{
block|{
literal|0x9a8
block|,
literal|0x9cd
block|,
literal|0x200d
block|,
literal|0x995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x247
block|,
literal|0x73
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant Ra
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x09b0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00f8
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWNJ Ra
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200c
block|,
literal|0x09b0
block|,
literal|0x0
block|}
block|,
block|{
literal|0xcc
block|,
literal|0x8d
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWJ Ra
block|{
block|{
literal|0x9a8
block|,
literal|0x9cd
block|,
literal|0x200d
block|,
literal|0x9b0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x247
block|,
literal|0x8d
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant Ba
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x09ac
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0139
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWNJ Ba
block|{
block|{
literal|0x9a8
block|,
literal|0x9cd
block|,
literal|0x200c
block|,
literal|0x9ac
block|,
literal|0x0
block|}
block|,
block|{
literal|0xcc
block|,
literal|0x89
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWJ Ba
block|{
block|{
literal|0x9a8
block|,
literal|0x9cd
block|,
literal|0x200d
block|,
literal|0x9ac
block|,
literal|0x0
block|}
block|,
block|{
literal|0x247
block|,
literal|0x89
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant Dha
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x09a7
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0145
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWNJ Dha
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200c
block|,
literal|0x09a7
block|,
literal|0x0
block|}
block|,
block|{
literal|0xcc
block|,
literal|0x85
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWJ Dha
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200d
block|,
literal|0x09a7
block|,
literal|0x0
block|}
block|,
block|{
literal|0x247
block|,
literal|0x85
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ka MatraAU
block|{
block|{
literal|0x9b0
block|,
literal|0x9cd
block|,
literal|0x995
block|,
literal|0x9cc
block|,
literal|0x0
block|}
block|,
block|{
literal|0x232
block|,
literal|0x73
block|,
literal|0xe1
block|,
literal|0xa0
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ba Halant Ba
block|{
block|{
literal|0x09b0
block|,
literal|0x09cd
block|,
literal|0x09ac
block|,
literal|0x09cd
block|,
literal|0x09ac
block|,
literal|0x0
block|}
block|,
block|{
literal|0x013b
block|,
literal|0x00e1
block|,
literal|0x0
block|}
block|}
block|,
comment|// Init feature for vowel sign E should only be
comment|// applied when it's initial character (QTBUG-13620)
block|{
block|{
literal|0x09a8
block|,
literal|0x09c7
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0232
block|,
literal|0x0086
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x09a8
block|,
literal|0x09a8
block|,
literal|0x09c7
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0086
block|,
literal|0x009b
block|,
literal|0x0086
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|face
argument_list|,
name|s
argument_list|,
name|HB_Script_Bengali
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
name|FT_Done_Face
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couln't find MuktiNarrow.ttf"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|FT_Face
name|face
init|=
name|loadFace
argument_list|(
literal|"LikhanNormal.ttf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|face
condition|)
block|{
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x09af
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01ca
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x09b8
block|,
literal|0x09cd
block|,
literal|0x09af
block|,
literal|0x0
block|}
block|,
block|{
literal|0x020e
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x09b6
block|,
literal|0x09cd
block|,
literal|0x09af
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01f4
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x09b7
block|,
literal|0x09cd
block|,
literal|0x09af
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01fe
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x09b0
block|,
literal|0x09cd
block|,
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200d
block|,
literal|0x0
block|}
block|,
block|{
literal|0x10b
block|,
literal|0x167
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x9b0
block|,
literal|0x9cd
block|,
literal|0x9ad
block|,
literal|0x0
block|}
block|,
block|{
literal|0xa1
block|,
literal|0x167
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x9f0
block|,
literal|0x9cd
block|,
literal|0x9ad
block|,
literal|0x0
block|}
block|,
block|{
literal|0xa1
block|,
literal|0x167
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x9f1
block|,
literal|0x9cd
block|,
literal|0x9ad
block|,
literal|0x0
block|}
block|,
block|{
literal|0x11c
block|,
literal|0xa1
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|face
argument_list|,
name|s
argument_list|,
name|HB_Script_Bengali
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
name|FT_Done_Face
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couln't find LikhanNormal.ttf"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|gurmukhi
name|void
name|tst_QScriptEngine
operator|::
name|gurmukhi
parameter_list|()
block|{
block|{
name|FT_Face
name|face
init|=
name|loadFace
argument_list|(
literal|"lohit_pa.ttf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|face
condition|)
block|{
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0xA15
block|,
literal|0xA4D
block|,
literal|0xa39
block|,
literal|0x0
block|}
block|,
block|{
literal|0x3b
block|,
literal|0x8b
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|face
argument_list|,
name|s
argument_list|,
name|HB_Script_Gurmukhi
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
name|FT_Done_Face
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couln't find lohit.punjabi.1.1.ttf"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|oriya
name|void
name|tst_QScriptEngine
operator|::
name|oriya
parameter_list|()
block|{
block|{
name|FT_Face
name|face
init|=
name|loadFace
argument_list|(
literal|"utkalm.ttf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|face
condition|)
block|{
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0xb15
block|,
literal|0xb4d
block|,
literal|0xb24
block|,
literal|0xb4d
block|,
literal|0xb30
block|,
literal|0x0
block|}
block|,
block|{
literal|0x150
block|,
literal|0x125
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xb24
block|,
literal|0xb4d
block|,
literal|0xb24
block|,
literal|0xb4d
block|,
literal|0xb2c
block|,
literal|0x0
block|}
block|,
block|{
literal|0x151
block|,
literal|0x120
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xb28
block|,
literal|0xb4d
block|,
literal|0xb24
block|,
literal|0xb4d
block|,
literal|0xb2c
block|,
literal|0x0
block|}
block|,
block|{
literal|0x152
block|,
literal|0x120
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xb28
block|,
literal|0xb4d
block|,
literal|0xb24
block|,
literal|0xb4d
block|,
literal|0xb2c
block|,
literal|0x0
block|}
block|,
block|{
literal|0x152
block|,
literal|0x120
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xb28
block|,
literal|0xb4d
block|,
literal|0xb24
block|,
literal|0xb4d
block|,
literal|0xb30
block|,
literal|0x0
block|}
block|,
block|{
literal|0x176
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xb38
block|,
literal|0xb4d
block|,
literal|0xb24
block|,
literal|0xb4d
block|,
literal|0xb30
block|,
literal|0x0
block|}
block|,
block|{
literal|0x177
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xb28
block|,
literal|0xb4d
block|,
literal|0xb24
block|,
literal|0xb4d
block|,
literal|0xb30
block|,
literal|0xb4d
block|,
literal|0xb2f
block|,
literal|0x0
block|}
block|,
block|{
literal|0x176
block|,
literal|0x124
block|,
literal|0x0
block|}
block|}
block|,
comment|// QTBUG-13542
block|{
block|{
literal|0x0b2c
block|,
literal|0x0b4d
block|,
literal|0x0b21
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0089
block|,
literal|0x00fc
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b36
block|,
literal|0x0b4d
block|,
literal|0x0b2b
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0092
block|,
literal|0x0105
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b36
block|,
literal|0x0b4d
block|,
literal|0x0b1f
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0092
block|,
literal|0x00fa
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b39
block|,
literal|0x0b4d
block|,
literal|0x0b1f
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0095
block|,
literal|0x00fa
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b15
block|,
literal|0x0b4d
block|,
literal|0x0b16
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0073
block|,
literal|0x00f1
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|face
argument_list|,
name|s
argument_list|,
name|HB_Script_Oriya
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
name|FT_Done_Face
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couln't find utkalm.ttf"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|tamil
name|void
name|tst_QScriptEngine
operator|::
name|tamil
parameter_list|()
block|{
block|{
name|FT_Face
name|face
init|=
name|loadFace
argument_list|(
literal|"akruti1.ttf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|face
condition|)
block|{
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0x0b95
block|,
literal|0x0bc2
block|,
literal|0x0
block|}
block|,
block|{
literal|0x004e
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0bae
block|,
literal|0x0bc2
block|,
literal|0x0
block|}
block|,
block|{
literal|0x009e
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b9a
block|,
literal|0x0bc2
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0058
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b99
block|,
literal|0x0bc2
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0053
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0bb0
block|,
literal|0x0bc2
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00a8
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0ba4
block|,
literal|0x0bc2
block|,
literal|0x0
block|}
block|,
block|{
literal|0x008e
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b9f
block|,
literal|0x0bc2
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0062
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b95
block|,
literal|0x0bc6
block|,
literal|0x0
block|}
block|,
block|{
literal|0x000a
block|,
literal|0x0031
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b95
block|,
literal|0x0bca
block|,
literal|0x0
block|}
block|,
block|{
literal|0x000a
block|,
literal|0x0031
block|,
literal|0x0007
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b95
block|,
literal|0x0bc6
block|,
literal|0x0bbe
block|,
literal|0x0
block|}
block|,
block|{
literal|0x000a
block|,
literal|0x0031
block|,
literal|0x007
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b95
block|,
literal|0x0bcd
block|,
literal|0x0bb7
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0049
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b95
block|,
literal|0x0bcd
block|,
literal|0x0bb7
block|,
literal|0x0bca
block|,
literal|0x0
block|}
block|,
block|{
literal|0x000a
block|,
literal|0x0049
block|,
literal|0x007
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b95
block|,
literal|0x0bcd
block|,
literal|0x0bb7
block|,
literal|0x0bc6
block|,
literal|0x0bbe
block|,
literal|0x0
block|}
block|,
block|{
literal|0x000a
block|,
literal|0x0049
block|,
literal|0x007
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b9f
block|,
literal|0x0bbf
block|,
literal|0x0
block|}
block|,
block|{
literal|0x005f
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b9f
block|,
literal|0x0bc0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0060
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0bb2
block|,
literal|0x0bc0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00ab
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0bb2
block|,
literal|0x0bbf
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00aa
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0bb0
block|,
literal|0x0bcd
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00a4
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0bb0
block|,
literal|0x0bbf
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00a5
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0bb0
block|,
literal|0x0bc0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00a6
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b83
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0025
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b83
block|,
literal|0x0b95
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0025
block|,
literal|0x0031
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|face
argument_list|,
name|s
argument_list|,
name|HB_Script_Tamil
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
name|FT_Done_Face
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couln't find akruti1.ttf"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|telugu
name|void
name|tst_QScriptEngine
operator|::
name|telugu
parameter_list|()
block|{
block|{
name|FT_Face
name|face
init|=
name|loadFace
argument_list|(
literal|"Pothana2000.ttf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|face
condition|)
block|{
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0xc15
block|,
literal|0xc4d
block|,
literal|0x0
block|}
block|,
block|{
literal|0xbb
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc15
block|,
literal|0xc4d
block|,
literal|0xc37
block|,
literal|0x0
block|}
block|,
block|{
literal|0x4b
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc15
block|,
literal|0xc4d
block|,
literal|0xc37
block|,
literal|0xc4d
block|,
literal|0x0
block|}
block|,
block|{
literal|0xe0
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc15
block|,
literal|0xc4d
block|,
literal|0xc37
block|,
literal|0xc4d
block|,
literal|0xc23
block|,
literal|0x0
block|}
block|,
block|{
literal|0x4b
block|,
literal|0x91
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc15
block|,
literal|0xc4d
block|,
literal|0xc30
block|,
literal|0x0
block|}
block|,
block|{
literal|0x5a
block|,
literal|0xb2
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc15
block|,
literal|0xc4d
block|,
literal|0xc30
block|,
literal|0xc4d
block|,
literal|0x0
block|}
block|,
block|{
literal|0xbb
block|,
literal|0xb2
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc15
block|,
literal|0xc4d
block|,
literal|0xc30
block|,
literal|0xc4d
block|,
literal|0xc15
block|,
literal|0x0
block|}
block|,
block|{
literal|0x5a
block|,
literal|0xb2
block|,
literal|0x83
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc15
block|,
literal|0xc4d
block|,
literal|0xc30
block|,
literal|0xc3f
block|,
literal|0x0
block|}
block|,
block|{
literal|0xe2
block|,
literal|0xb2
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc15
block|,
literal|0xc4d
block|,
literal|0xc15
block|,
literal|0xc48
block|,
literal|0x0
block|}
block|,
block|{
literal|0xe6
block|,
literal|0xb3
block|,
literal|0x83
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc15
block|,
literal|0xc4d
block|,
literal|0xc30
block|,
literal|0xc48
block|,
literal|0x0
block|}
block|,
block|{
literal|0xe6
block|,
literal|0xb3
block|,
literal|0x9f
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc15
block|,
literal|0xc46
block|,
literal|0xc56
block|,
literal|0x0
block|}
block|,
block|{
literal|0xe6
block|,
literal|0xb3
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|face
argument_list|,
name|s
argument_list|,
name|HB_Script_Telugu
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
name|FT_Done_Face
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couln't find Pothana2000.ttf"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|kannada
name|void
name|tst_QScriptEngine
operator|::
name|kannada
parameter_list|()
block|{
block|{
name|FT_Face
name|face
init|=
name|loadFace
argument_list|(
literal|"Sampige.ttf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|face
condition|)
block|{
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0x0ca8
block|,
literal|0x0ccd
block|,
literal|0x0ca8
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0049
block|,
literal|0x00ba
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0ca8
block|,
literal|0x0ccd
block|,
literal|0x0ca1
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0049
block|,
literal|0x00b3
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0caf
block|,
literal|0x0cc2
block|,
literal|0x0
block|}
block|,
block|{
literal|0x004f
block|,
literal|0x005d
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0ce0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x006a
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0ce6
block|,
literal|0x0ce7
block|,
literal|0x0ce8
block|,
literal|0x0
block|}
block|,
block|{
literal|0x006b
block|,
literal|0x006c
block|,
literal|0x006d
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0cb5
block|,
literal|0x0ccb
block|,
literal|0x0
block|}
block|,
block|{
literal|0x015f
block|,
literal|0x0067
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0cb0
block|,
literal|0x0ccd
block|,
literal|0x0cae
block|,
literal|0x0
block|}
block|,
block|{
literal|0x004e
block|,
literal|0x0082
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0cb0
block|,
literal|0x0ccd
block|,
literal|0x0c95
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0036
block|,
literal|0x0082
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0c95
block|,
literal|0x0ccd
block|,
literal|0x0cb0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0036
block|,
literal|0x00c1
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0cb0
block|,
literal|0x0ccd
block|,
literal|0x200d
block|,
literal|0x0c95
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0050
block|,
literal|0x00a7
block|,
literal|0x0
block|}
block|}
block|,
comment|// Kaphala
block|{
block|{
literal|0x0cb0
block|,
literal|0x200d
block|,
literal|0x0ccd
block|,
literal|0x0c95
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0050
block|,
literal|0x00a7
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|face
argument_list|,
name|s
argument_list|,
name|HB_Script_Kannada
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
name|FT_Done_Face
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couln't find Sampige.ttf"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|FT_Face
name|face
init|=
name|loadFace
argument_list|(
literal|"tunga.ttf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|face
condition|)
block|{
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0x0cb7
block|,
literal|0x0cc6
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00b0
block|,
literal|0x006c
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0cb7
block|,
literal|0x0ccd
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0163
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc95
block|,
literal|0xcbf
block|,
literal|0xcd5
block|,
literal|0x0
block|}
block|,
block|{
literal|0x114
block|,
literal|0x73
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc95
block|,
literal|0xcc6
block|,
literal|0xcd5
block|,
literal|0x0
block|}
block|,
block|{
literal|0x90
block|,
literal|0x6c
block|,
literal|0x73
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc95
block|,
literal|0xcc6
block|,
literal|0xcd6
block|,
literal|0x0
block|}
block|,
block|{
literal|0x90
block|,
literal|0x6c
block|,
literal|0x74
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc95
block|,
literal|0xcc6
block|,
literal|0xcc2
block|,
literal|0x0
block|}
block|,
block|{
literal|0x90
block|,
literal|0x6c
block|,
literal|0x69
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc95
block|,
literal|0xcca
block|,
literal|0xcd5
block|,
literal|0x0
block|}
block|,
block|{
literal|0x90
block|,
literal|0x6c
block|,
literal|0x69
block|,
literal|0x73
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|face
argument_list|,
name|s
argument_list|,
name|HB_Script_Kannada
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
name|FT_Done_Face
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couln't find tunga.ttf"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|malayalam
name|void
name|tst_QScriptEngine
operator|::
name|malayalam
parameter_list|()
block|{
block|{
name|FT_Face
name|face
init|=
name|loadFace
argument_list|(
literal|"AkrutiMal2Normal.ttf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|face
condition|)
block|{
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0x0d15
block|,
literal|0x0d46
block|,
literal|0x0
block|}
block|,
block|{
literal|0x005e
block|,
literal|0x0034
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d15
block|,
literal|0x0d47
block|,
literal|0x0
block|}
block|,
block|{
literal|0x005f
block|,
literal|0x0034
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d15
block|,
literal|0x0d4b
block|,
literal|0x0
block|}
block|,
block|{
literal|0x005f
block|,
literal|0x0034
block|,
literal|0x0058
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d15
block|,
literal|0x0d48
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0060
block|,
literal|0x0034
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d15
block|,
literal|0x0d4a
block|,
literal|0x0
block|}
block|,
block|{
literal|0x005e
block|,
literal|0x0034
block|,
literal|0x0058
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d30
block|,
literal|0x0d4d
block|,
literal|0x0d15
block|,
literal|0x0
block|}
block|,
block|{
literal|0x009e
block|,
literal|0x0034
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d15
block|,
literal|0x0d4d
block|,
literal|0x0d35
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0034
block|,
literal|0x007a
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d15
block|,
literal|0x0d4d
block|,
literal|0x0d2f
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0034
block|,
literal|0x00a2
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d1f
block|,
literal|0x0d4d
block|,
literal|0x0d1f
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0069
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d26
block|,
literal|0x0d4d
block|,
literal|0x0d26
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0074
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d30
block|,
literal|0x0d4d
block|,
literal|0x0
block|}
block|,
block|{
literal|0x009e
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d30
block|,
literal|0x0d4d
block|,
literal|0x200c
block|,
literal|0x0
block|}
block|,
block|{
literal|0x009e
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d30
block|,
literal|0x0d4d
block|,
literal|0x200d
block|,
literal|0x0
block|}
block|,
block|{
literal|0x009e
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd15
block|,
literal|0xd46
block|,
literal|0xd3e
block|,
literal|0x0
block|}
block|,
block|{
literal|0x5e
block|,
literal|0x34
block|,
literal|0x58
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd15
block|,
literal|0xd47
block|,
literal|0xd3e
block|,
literal|0x0
block|}
block|,
block|{
literal|0x5f
block|,
literal|0x34
block|,
literal|0x58
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd15
block|,
literal|0xd46
block|,
literal|0xd57
block|,
literal|0x0
block|}
block|,
block|{
literal|0x5e
block|,
literal|0x34
block|,
literal|0x65
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd15
block|,
literal|0xd57
block|,
literal|0x0
block|}
block|,
block|{
literal|0x34
block|,
literal|0x65
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd1f
block|,
literal|0xd4d
block|,
literal|0xd1f
block|,
literal|0xd41
block|,
literal|0xd4d
block|,
literal|0x0
block|}
block|,
block|{
literal|0x69
block|,
literal|0x5b
block|,
literal|0x64
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|face
argument_list|,
name|s
argument_list|,
name|HB_Script_Malayalam
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
name|FT_Done_Face
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couln't find AkrutiMal2Normal.ttf"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|FT_Face
name|face
init|=
name|loadFace
argument_list|(
literal|"Rachana.ttf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|face
condition|)
block|{
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0xd37
block|,
literal|0xd4d
block|,
literal|0xd1f
block|,
literal|0xd4d
block|,
literal|0xd30
block|,
literal|0xd40
block|,
literal|0x0
block|}
block|,
block|{
literal|0x385
block|,
literal|0xa3
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd2f
block|,
literal|0xd4d
block|,
literal|0xd15
block|,
literal|0xd4d
block|,
literal|0xd15
block|,
literal|0xd41
block|,
literal|0x0
block|}
block|,
block|{
literal|0x2ff
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd33
block|,
literal|0xd4d
block|,
literal|0xd33
block|,
literal|0x0
block|}
block|,
block|{
literal|0x3f8
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd2f
block|,
literal|0xd4d
block|,
literal|0xd15
block|,
literal|0xd4d
block|,
literal|0xd15
block|,
literal|0xd41
block|,
literal|0x0
block|}
block|,
block|{
literal|0x2ff
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd30
block|,
literal|0xd4d
block|,
literal|0x200d
block|,
literal|0xd35
block|,
literal|0xd4d
block|,
literal|0xd35
block|,
literal|0x0
block|}
block|,
block|{
literal|0xf3
block|,
literal|0x350
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|face
argument_list|,
name|s
argument_list|,
name|HB_Script_Malayalam
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
name|FT_Done_Face
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couln't find Rachana.ttf"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|sinhala
name|void
name|tst_QScriptEngine
operator|::
name|sinhala
parameter_list|()
block|{
block|{
name|FT_Face
name|face
init|=
name|loadFace
argument_list|(
literal|"FM-MalithiUW46.ttf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|face
condition|)
block|{
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0xd9a
block|,
literal|0xdd9
block|,
literal|0xdcf
block|,
literal|0x0
block|}
block|,
block|{
literal|0x4a
block|,
literal|0x61
block|,
literal|0x42
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd9a
block|,
literal|0xdd9
block|,
literal|0xddf
block|,
literal|0x0
block|}
block|,
block|{
literal|0x4a
block|,
literal|0x61
block|,
literal|0x50
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd9a
block|,
literal|0xdd9
block|,
literal|0xdca
block|,
literal|0x0
block|}
block|,
block|{
literal|0x4a
block|,
literal|0x62
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd9a
block|,
literal|0xddc
block|,
literal|0xdca
block|,
literal|0x0
block|}
block|,
block|{
literal|0x4a
block|,
literal|0x61
block|,
literal|0x42
block|,
literal|0x41
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd9a
block|,
literal|0xdda
block|,
literal|0x0
block|}
block|,
block|{
literal|0x4a
block|,
literal|0x62
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd9a
block|,
literal|0xddd
block|,
literal|0x0
block|}
block|,
block|{
literal|0x4a
block|,
literal|0x61
block|,
literal|0x42
block|,
literal|0x41
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|face
argument_list|,
name|s
argument_list|,
name|HB_Script_Sinhala
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
name|FT_Done_Face
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couln't find FM-MalithiUW46.ttf"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|khmer
name|void
name|tst_QScriptEngine
operator|::
name|khmer
parameter_list|()
block|{
block|{
name|FT_Face
name|face
init|=
name|loadFace
argument_list|(
literal|"KhmerOS.ttf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|face
condition|)
block|{
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0x179a
block|,
literal|0x17cd
block|,
literal|0x0
block|}
block|,
block|{
literal|0x24c
block|,
literal|0x27f
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x179f
block|,
literal|0x17c5
block|,
literal|0x0
block|}
block|,
block|{
literal|0x273
block|,
literal|0x203
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x1790
block|,
literal|0x17d2
block|,
literal|0x1784
block|,
literal|0x17c3
block|,
literal|0x0
block|}
block|,
block|{
literal|0x275
block|,
literal|0x242
block|,
literal|0x182
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x179a
block|,
literal|0x0
block|}
block|,
block|{
literal|0x24c
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x1781
block|,
literal|0x17d2
block|,
literal|0x1798
block|,
literal|0x17c2
block|,
literal|0x0
block|}
block|,
block|{
literal|0x274
block|,
literal|0x233
block|,
literal|0x197
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x1798
block|,
literal|0x17b6
block|,
literal|0x0
block|}
block|,
block|{
literal|0x1cb
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x179a
block|,
literal|0x17b8
block|,
literal|0x0
block|}
block|,
block|{
literal|0x24c
block|,
literal|0x26a
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x1787
block|,
literal|0x17b6
block|,
literal|0x0
block|}
block|,
block|{
literal|0x1ba
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x1798
block|,
literal|0x17d2
block|,
literal|0x1796
block|,
literal|0x17bb
block|,
literal|0x0
block|}
block|,
block|{
literal|0x24a
block|,
literal|0x195
block|,
literal|0x26d
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|face
argument_list|,
name|s
argument_list|,
name|HB_Script_Khmer
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
name|FT_Done_Face
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couln't find KhmerOS.ttf"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|nko
name|void
name|tst_QScriptEngine
operator|::
name|nko
parameter_list|()
block|{
block|{
name|FT_Face
name|face
init|=
name|loadFace
argument_list|(
literal|"DejaVuSans.ttf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|face
condition|)
block|{
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0x7ca
block|,
literal|0x0
block|}
block|,
block|{
literal|0x5c1
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x7ca
block|,
literal|0x7ca
block|,
literal|0x0
block|}
block|,
block|{
literal|0x14db
block|,
literal|0x14d9
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x7ca
block|,
literal|0x7fa
block|,
literal|0x7ca
block|,
literal|0x0
block|}
block|,
block|{
literal|0x14db
block|,
literal|0x5ec
block|,
literal|0x14d9
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x7ca
block|,
literal|0x7f3
block|,
literal|0x7ca
block|,
literal|0x0
block|}
block|,
block|{
literal|0x14db
block|,
literal|0x5e7
block|,
literal|0x14d9
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x7ca
block|,
literal|0x7f3
block|,
literal|0x7fa
block|,
literal|0x7ca
block|,
literal|0x0
block|}
block|,
block|{
literal|0x14db
block|,
literal|0x5e7
block|,
literal|0x5ec
block|,
literal|0x14d9
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|face
argument_list|,
name|s
argument_list|,
name|HB_Script_Nko
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
name|FT_Done_Face
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couln't find DejaVuSans.ttf"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|linearB
name|void
name|tst_QScriptEngine
operator|::
name|linearB
parameter_list|()
block|{
block|{
name|FT_Face
name|face
init|=
name|loadFace
argument_list|(
literal|"penuture.ttf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|face
condition|)
block|{
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0xd800
block|,
literal|0xdc01
block|,
literal|0xd800
block|,
literal|0xdc02
block|,
literal|0xd800
block|,
literal|0xdc03
block|,
literal|0
block|}
block|,
block|{
literal|0x5
block|,
literal|0x6
block|,
literal|0x7
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|face
argument_list|,
name|s
argument_list|,
name|HB_Script_Common
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
name|FT_Done_Face
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couln't find PENUTURE.TTF"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QScriptEngine
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
