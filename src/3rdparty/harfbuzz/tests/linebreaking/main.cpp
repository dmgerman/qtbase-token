begin_unit
begin_comment
comment|/*  * Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies)  *  * This is part of HarfBuzz, an OpenType Layout engine library.  *  * Permission is hereby granted, without written agreement and without  * license or royalty fees, to use, copy, modify, and distribute this  * software and its documentation for any purpose, provided that the  * above copyright notice and the following two paragraphs appear in  * all copies of this software.  *  * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR  * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES  * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN  * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH  * DAMAGE.  *  * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,  * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND  * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS  * ON AN "AS IS" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO  * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.  */
end_comment
begin_comment
comment|/*     !!!!!! Warning !!!!!     Please don't save this file in emacs. It contains utf8 text sequences emacs will     silently convert to a series of question marks.  */
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<harfbuzz-shaper.h>
end_include
begin_function
DECL|function|getCharAttributes
specifier|static
name|QVector
argument_list|<
name|HB_CharAttributes
argument_list|>
name|getCharAttributes
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|HB_Script
name|script
init|=
name|HB_Script_Common
parameter_list|)
block|{
name|QVector
argument_list|<
name|HB_CharAttributes
argument_list|>
name|attrs
argument_list|(
name|str
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|HB_ScriptItem
name|item
decl_stmt|;
name|item
operator|.
name|pos
operator|=
literal|0
expr_stmt|;
name|item
operator|.
name|length
operator|=
name|str
operator|.
name|length
argument_list|()
expr_stmt|;
name|item
operator|.
name|script
operator|=
name|script
expr_stmt|;
name|HB_GetCharAttributes
argument_list|(
name|str
operator|.
name|utf16
argument_list|()
argument_list|,
name|str
operator|.
name|length
argument_list|()
argument_list|,
operator|&
name|item
argument_list|,
literal|1
argument_list|,
name|attrs
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|attrs
return|;
block|}
end_function
begin_class
DECL|class|tst_CharAttributes
class|class
name|tst_CharAttributes
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_CharAttributes
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_CharAttributes
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|lineBreaking
parameter_list|()
function_decl|;
name|void
name|charWordStopOnLineSeparator
parameter_list|()
function_decl|;
name|void
name|charStopForSurrogatePairs
parameter_list|()
function_decl|;
name|void
name|thaiWordBreak
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_CharAttributes
name|tst_CharAttributes
operator|::
name|tst_CharAttributes
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_CharAttributes
name|tst_CharAttributes
operator|::
name|~
name|tst_CharAttributes
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|init
name|void
name|tst_CharAttributes
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_CharAttributes
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|lineBreaking
name|void
name|tst_CharAttributes
operator|::
name|lineBreaking
parameter_list|()
block|{
struct|struct
name|Breaks
block|{
specifier|const
name|char
modifier|*
name|utf8
decl_stmt|;
name|uchar
name|breaks
index|[
literal|32
index|]
decl_stmt|;
block|}
struct|;
name|Breaks
name|brks
index|[]
init|=
block|{
block|{
literal|"11"
block|,
block|{
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"aa"
block|,
block|{
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"++"
block|,
block|{
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"--"
block|,
block|{
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"(("
block|,
block|{
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"))"
block|,
block|{
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|".."
block|,
block|{
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"\"\""
block|,
block|{
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"$$"
block|,
block|{
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"!!"
block|,
block|{
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"??"
block|,
block|{
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|",,"
block|,
block|{
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|")()"
block|,
block|{
literal|true
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"?!?"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|".,."
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"+-+"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"+=+"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"+(+"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"+)+"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"a b"
block|,
block|{
literal|false
block|,
literal|true
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"a(b"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"a)b"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"a-b"
block|,
block|{
literal|false
block|,
literal|true
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"a.b"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"a+b"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"a?b"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"a!b"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"a$b"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"a,b"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"a/b"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"1/2"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"./."
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|",/,"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"!/!"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"\\/\\"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"1 2"
block|,
block|{
literal|false
block|,
literal|true
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"1(2"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"1)2"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"1-2"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"1.2"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"1+2"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"1?2"
block|,
block|{
literal|false
block|,
literal|true
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"1!2"
block|,
block|{
literal|false
block|,
literal|true
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"1$2"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"1,2"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"1/2"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"\330\260\331\216\331\204\331\220\331\203\331\216"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"\330\247\331\204\331\205 \330\247\331\204\331\205"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"1#2"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|"!#!"
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|0xff
block|}
block|}
block|,
block|{
literal|0
block|,
block|{}
block|}
block|}
decl_stmt|;
name|Breaks
modifier|*
name|b
init|=
name|brks
decl_stmt|;
while|while
condition|(
name|b
operator|->
name|utf8
condition|)
block|{
name|QString
name|str
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|b
operator|->
name|utf8
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|HB_CharAttributes
argument_list|>
name|attrs
init|=
name|getCharAttributes
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|str
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|b
operator|->
name|breaks
index|[
name|i
index|]
operator|!=
literal|0xff
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|attrs
index|[
name|i
index|]
operator|.
name|lineBreakType
operator|!=
name|HB_NoBreak
operator|)
operator|!=
operator|(
name|bool
operator|)
name|b
operator|->
name|breaks
index|[
name|i
index|]
condition|)
block|{
name|qDebug
argument_list|(
literal|"test case \"%s\" failed at char %d; break type: %d"
argument_list|,
name|b
operator|->
name|utf8
argument_list|,
name|i
argument_list|,
name|attrs
index|[
name|i
index|]
operator|.
name|lineBreakType
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|attrs
index|[
name|i
index|]
operator|.
name|lineBreakType
operator|!=
name|HB_NoBreak
operator|)
argument_list|,
operator|(
name|bool
operator|)
name|b
operator|->
name|breaks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|QVERIFY
argument_list|(
name|attrs
index|[
name|i
index|]
operator|.
name|lineBreakType
operator|==
name|HB_ForcedBreak
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|->
name|breaks
index|[
name|i
index|]
argument_list|,
operator|(
name|uchar
operator|)
literal|0xff
argument_list|)
expr_stmt|;
operator|++
name|b
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|charWordStopOnLineSeparator
name|void
name|tst_CharAttributes
operator|::
name|charWordStopOnLineSeparator
parameter_list|()
block|{
specifier|const
name|QChar
name|lineSeparator
argument_list|(
name|QChar
operator|::
name|LineSeparator
argument_list|)
decl_stmt|;
name|QString
name|txt
decl_stmt|;
name|txt
operator|.
name|append
argument_list|(
name|lineSeparator
argument_list|)
expr_stmt|;
name|txt
operator|.
name|append
argument_list|(
name|lineSeparator
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|HB_CharAttributes
argument_list|>
name|attrs
init|=
name|getCharAttributes
argument_list|(
name|txt
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|1
index|]
operator|.
name|charStop
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|charStopForSurrogatePairs
name|void
name|tst_CharAttributes
operator|::
name|charStopForSurrogatePairs
parameter_list|()
block|{
name|QString
name|txt
decl_stmt|;
name|txt
operator|.
name|append
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|txt
operator|.
name|append
argument_list|(
literal|0xd87e
argument_list|)
expr_stmt|;
name|txt
operator|.
name|append
argument_list|(
literal|0xdc25
argument_list|)
expr_stmt|;
name|txt
operator|.
name|append
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|HB_CharAttributes
argument_list|>
name|attrs
init|=
name|getCharAttributes
argument_list|(
name|txt
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|0
index|]
operator|.
name|charStop
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|1
index|]
operator|.
name|charStop
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|attrs
index|[
literal|2
index|]
operator|.
name|charStop
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|3
index|]
operator|.
name|charStop
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|thaiWordBreak
name|void
name|tst_CharAttributes
operator|::
name|thaiWordBreak
parameter_list|()
block|{
comment|// à¸ªà¸§à¸±à¸ªà¸à¸µà¸à¸£à¸±à¸ à¸à¸µà¹à¹à¸à¹à¸à¸à¸²à¸£à¸à¸à¸à¸ªà¸­à¸à¸à¸±à¸§à¹à¸­
name|QTextCodec
modifier|*
name|codec
init|=
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
literal|2259
argument_list|)
decl_stmt|;
name|QString
name|txt
init|=
name|codec
operator|->
name|toUnicode
argument_list|(
name|QByteArray
argument_list|(
literal|"\xca\xc7\xd1\xca\xb4\xd5\xa4\xc3\xd1\xba\x20\xb9\xd5\xe8\xe0\xbb\xe7\xb9\xa1\xd2\xc3\xb7\xb4\xca\xcd\xba\xb5\xd1\xc7\xe0\xcd\xa7"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|txt
operator|.
name|length
argument_list|()
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|HB_CharAttributes
argument_list|>
name|attrs
init|=
name|getCharAttributes
argument_list|(
name|txt
argument_list|,
name|HB_Script_Thai
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|0
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|1
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|2
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|3
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|4
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|5
index|]
operator|.
name|lineBreakType
operator|==
name|HB_Break
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|6
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|7
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|8
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|9
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|10
index|]
operator|.
name|lineBreakType
operator|==
name|HB_Break
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|11
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|12
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|13
index|]
operator|.
name|lineBreakType
operator|==
name|HB_Break
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|14
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|15
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|16
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|17
index|]
operator|.
name|lineBreakType
operator|==
name|HB_Break
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|18
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|19
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|20
index|]
operator|.
name|lineBreakType
operator|==
name|HB_Break
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|21
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|22
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|23
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|24
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|25
index|]
operator|.
name|lineBreakType
operator|==
name|HB_Break
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|26
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|27
init|;
name|i
operator|<
literal|32
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|attrs
index|[
name|i
index|]
operator|.
name|lineBreakType
operator|==
name|HB_NoBreak
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_CharAttributes
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
