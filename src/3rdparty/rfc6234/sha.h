begin_unit
begin_comment
comment|/**************************** sha.h ****************************/
end_comment
begin_comment
comment|/***************** See RFC 6234 for details. *******************/
end_comment
begin_comment
comment|/*    Copyright (c) 2011 IETF Trust and the persons identified as    authors of the code.  All rights reserved.     Redistribution and use in source and binary forms, with or    without modification, are permitted provided that the following    conditions are met:     - Redistributions of source code must retain the above      copyright notice, this list of conditions and      the following disclaimer.     - Redistributions in binary form must reproduce the above      copyright notice, this list of conditions and the following      disclaimer in the documentation and/or other materials provided      with the distribution.     - Neither the name of Internet Society, IETF or IETF Trust, nor      the names of specific contributors, may be used to endorse or      promote products derived from this software without specific      prior written permission.     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND    CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,    INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF    MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE    DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT    NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR    OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,    EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|_SHA_H_
end_ifndef
begin_define
DECL|macro|_SHA_H_
define|#
directive|define
name|_SHA_H_
end_define
begin_comment
comment|/*  *  Description:  *      This file implements the Secure Hash Algorithms  *      as defined in the U.S. National Institute of Standards  *      and Technology Federal Information Processing Standards  *      Publication (FIPS PUB) 180-3 published in October 2008  *      and formerly defined in its predecessors, FIPS PUB 180-1  *      and FIP PUB 180-2.  *  *      A combined document showing all algorithms is available at  *              http://csrc.nist.gov/publications/fips/  *                     fips180-3/fips180-3_final.pdf  *  *      The five hashes are defined in these sizes:  *              SHA-1           20 byte / 160 bit  *              SHA-224         28 byte / 224 bit  *              SHA-256         32 byte / 256 bit  *              SHA-384         48 byte / 384 bit  *              SHA-512         64 byte / 512 bit  *  *  Compilation Note:  *    These files may be compiled with two options:  *        USE_32BIT_ONLY - use 32-bit arithmetic only, for systems  *                         without 64-bit integers  *  *        USE_MODIFIED_MACROS - use alternate form of the SHA_Ch()  *                         and SHA_Maj() macros that are equivalent  *                         and potentially faster on many systems  *  */
end_comment
begin_include
include|#
directive|include
file|<stdint.h>
end_include
begin_comment
comment|/*  * If you do not have the ISO standard stdint.h header file, then you  * must typedef the following:  *    name              meaning  *  uint64_t         unsigned 64-bit integer  *  uint32_t         unsigned 32-bit integer  *  uint8_t          unsigned 8-bit integer (i.e., unsigned char)  *  int_least16_t    integer of>= 16 bits  *  * See stdint-example.h  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|_SHA_enum_
end_ifndef
begin_define
DECL|macro|_SHA_enum_
define|#
directive|define
name|_SHA_enum_
end_define
begin_comment
comment|/*  *  All SHA functions return one of these values.  */
end_comment
begin_enum
enum|enum
block|{
DECL|enumerator|shaSuccess
name|shaSuccess
init|=
literal|0
block|,
DECL|enumerator|shaNull
name|shaNull
block|,
comment|/* Null pointer parameter */
DECL|enumerator|shaInputTooLong
name|shaInputTooLong
block|,
comment|/* input data too long */
DECL|enumerator|shaStateError
name|shaStateError
block|,
comment|/* called Input after FinalBits or Result */
DECL|enumerator|shaBadParam
name|shaBadParam
comment|/* passed a bad parameter */
block|}
enum|;
end_enum
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* _SHA_enum_ */
end_comment
begin_comment
comment|/*  *  These constants hold size information for each of the SHA  *  hashing operations  */
end_comment
begin_enum
enum|enum
block|{
DECL|enumerator|SHA1_Message_Block_Size
DECL|enumerator|SHA224_Message_Block_Size
name|SHA1_Message_Block_Size
init|=
literal|64
block|,
name|SHA224_Message_Block_Size
init|=
literal|64
block|,
DECL|enumerator|SHA256_Message_Block_Size
DECL|enumerator|SHA384_Message_Block_Size
name|SHA256_Message_Block_Size
init|=
literal|64
block|,
name|SHA384_Message_Block_Size
init|=
literal|128
block|,
DECL|enumerator|SHA512_Message_Block_Size
name|SHA512_Message_Block_Size
init|=
literal|128
block|,
DECL|enumerator|USHA_Max_Message_Block_Size
name|USHA_Max_Message_Block_Size
init|=
name|SHA512_Message_Block_Size
block|,
DECL|enumerator|SHA1HashSize
DECL|enumerator|SHA224HashSize
DECL|enumerator|SHA256HashSize
name|SHA1HashSize
init|=
literal|20
block|,
name|SHA224HashSize
init|=
literal|28
block|,
name|SHA256HashSize
init|=
literal|32
block|,
DECL|enumerator|SHA384HashSize
DECL|enumerator|SHA512HashSize
name|SHA384HashSize
init|=
literal|48
block|,
name|SHA512HashSize
init|=
literal|64
block|,
DECL|enumerator|USHAMaxHashSize
name|USHAMaxHashSize
init|=
name|SHA512HashSize
block|,
DECL|enumerator|SHA1HashSizeBits
DECL|enumerator|SHA224HashSizeBits
name|SHA1HashSizeBits
init|=
literal|160
block|,
name|SHA224HashSizeBits
init|=
literal|224
block|,
DECL|enumerator|SHA256HashSizeBits
DECL|enumerator|SHA384HashSizeBits
name|SHA256HashSizeBits
init|=
literal|256
block|,
name|SHA384HashSizeBits
init|=
literal|384
block|,
DECL|enumerator|SHA512HashSizeBits
DECL|enumerator|USHAMaxHashSizeBits
name|SHA512HashSizeBits
init|=
literal|512
block|,
name|USHAMaxHashSizeBits
init|=
name|SHA512HashSizeBits
block|}
enum|;
end_enum
begin_comment
comment|/*  *  These constants are used in the USHA (Unified SHA) functions.  */
end_comment
begin_typedef
DECL|enum|SHAversion
typedef|typedef
enum|enum
name|SHAversion
block|{
DECL|enumerator|SHA1
DECL|enumerator|SHA224
DECL|enumerator|SHA256
DECL|enumerator|SHA384
DECL|enumerator|SHA512
name|SHA1
block|,
name|SHA224
block|,
name|SHA256
block|,
name|SHA384
block|,
name|SHA512
block|}
DECL|typedef|SHAversion
name|SHAversion
typedef|;
end_typedef
begin_comment
comment|/*  *  This structure will hold context information for the SHA-1  *  hashing operation.  */
end_comment
begin_typedef
DECL|struct|SHA1Context
typedef|typedef
struct|struct
name|SHA1Context
block|{
DECL|member|Intermediate_Hash
name|uint32_t
name|Intermediate_Hash
index|[
name|SHA1HashSize
operator|/
literal|4
index|]
decl_stmt|;
comment|/* Message Digest */
DECL|member|Length_High
name|uint32_t
name|Length_High
decl_stmt|;
comment|/* Message length in bits */
DECL|member|Length_Low
name|uint32_t
name|Length_Low
decl_stmt|;
comment|/* Message length in bits */
DECL|member|Message_Block_Index
name|int_least16_t
name|Message_Block_Index
decl_stmt|;
comment|/* Message_Block array index */
comment|/* 512-bit message blocks */
DECL|member|Message_Block
name|uint8_t
name|Message_Block
index|[
name|SHA1_Message_Block_Size
index|]
decl_stmt|;
DECL|member|Computed
name|int
name|Computed
decl_stmt|;
comment|/* Is the hash computed? */
DECL|member|Corrupted
name|int
name|Corrupted
decl_stmt|;
comment|/* Cumulative corruption code */
block|}
DECL|typedef|SHA1Context
name|SHA1Context
typedef|;
end_typedef
begin_comment
comment|/*  *  This structure will hold context information for the SHA-256  *  hashing operation.  */
end_comment
begin_typedef
DECL|struct|SHA256Context
typedef|typedef
struct|struct
name|SHA256Context
block|{
DECL|member|Intermediate_Hash
name|uint32_t
name|Intermediate_Hash
index|[
name|SHA256HashSize
operator|/
literal|4
index|]
decl_stmt|;
comment|/* Message Digest */
DECL|member|Length_High
name|uint32_t
name|Length_High
decl_stmt|;
comment|/* Message length in bits */
DECL|member|Length_Low
name|uint32_t
name|Length_Low
decl_stmt|;
comment|/* Message length in bits */
DECL|member|Message_Block_Index
name|int_least16_t
name|Message_Block_Index
decl_stmt|;
comment|/* Message_Block array index */
comment|/* 512-bit message blocks */
DECL|member|Message_Block
name|uint8_t
name|Message_Block
index|[
name|SHA256_Message_Block_Size
index|]
decl_stmt|;
DECL|member|Computed
name|int
name|Computed
decl_stmt|;
comment|/* Is the hash computed? */
DECL|member|Corrupted
name|int
name|Corrupted
decl_stmt|;
comment|/* Cumulative corruption code */
block|}
DECL|typedef|SHA256Context
name|SHA256Context
typedef|;
end_typedef
begin_comment
comment|/*  *  This structure will hold context information for the SHA-512  *  hashing operation.  */
end_comment
begin_typedef
DECL|struct|SHA512Context
typedef|typedef
struct|struct
name|SHA512Context
block|{
ifdef|#
directive|ifdef
name|USE_32BIT_ONLY
DECL|member|Intermediate_Hash
name|uint32_t
name|Intermediate_Hash
index|[
name|SHA512HashSize
operator|/
literal|4
index|]
decl_stmt|;
comment|/* Message Digest  */
DECL|member|Length
name|uint32_t
name|Length
index|[
literal|4
index|]
decl_stmt|;
comment|/* Message length in bits */
else|#
directive|else
comment|/* !USE_32BIT_ONLY */
name|uint64_t
name|Intermediate_Hash
index|[
name|SHA512HashSize
operator|/
literal|8
index|]
decl_stmt|;
comment|/* Message Digest */
name|uint64_t
name|Length_High
decl_stmt|,
name|Length_Low
decl_stmt|;
comment|/* Message length in bits */
endif|#
directive|endif
comment|/* USE_32BIT_ONLY */
DECL|member|Message_Block_Index
name|int_least16_t
name|Message_Block_Index
decl_stmt|;
comment|/* Message_Block array index */
comment|/* 1024-bit message blocks */
DECL|member|Message_Block
name|uint8_t
name|Message_Block
index|[
name|SHA512_Message_Block_Size
index|]
decl_stmt|;
DECL|member|Computed
name|int
name|Computed
decl_stmt|;
comment|/* Is the hash computed?*/
DECL|member|Corrupted
name|int
name|Corrupted
decl_stmt|;
comment|/* Cumulative corruption code */
block|}
DECL|typedef|SHA512Context
name|SHA512Context
typedef|;
end_typedef
begin_comment
comment|/*  *  This structure will hold context information for the SHA-224  *  hashing operation.  It uses the SHA-256 structure for computation.  */
end_comment
begin_typedef
DECL|typedef|SHA224Context
typedef|typedef
name|struct
name|SHA256Context
name|SHA224Context
typedef|;
end_typedef
begin_comment
comment|/*  *  This structure will hold context information for the SHA-384  *  hashing operation.  It uses the SHA-512 structure for computation.  */
end_comment
begin_typedef
DECL|typedef|SHA384Context
typedef|typedef
name|struct
name|SHA512Context
name|SHA384Context
typedef|;
end_typedef
begin_comment
comment|/*  *  This structure holds context information for all SHA  *  hashing operations.  */
end_comment
begin_typedef
DECL|struct|USHAContext
typedef|typedef
struct|struct
name|USHAContext
block|{
DECL|member|whichSha
name|int
name|whichSha
decl_stmt|;
comment|/* which SHA is being used */
union|union
block|{
DECL|member|sha1Context
name|SHA1Context
name|sha1Context
decl_stmt|;
DECL|member|sha224Context
DECL|member|sha256Context
name|SHA224Context
name|sha224Context
decl_stmt|;
name|SHA256Context
name|sha256Context
decl_stmt|;
DECL|member|sha384Context
DECL|member|sha512Context
name|SHA384Context
name|sha384Context
decl_stmt|;
name|SHA512Context
name|sha512Context
decl_stmt|;
block|}
DECL|member|ctx
name|ctx
union|;
block|}
DECL|typedef|USHAContext
name|USHAContext
typedef|;
end_typedef
begin_comment
comment|/*  *  This structure will hold context information for the HMAC  *  keyed-hashing operation.  */
end_comment
begin_typedef
DECL|struct|HMACContext
typedef|typedef
struct|struct
name|HMACContext
block|{
DECL|member|whichSha
name|int
name|whichSha
decl_stmt|;
comment|/* which SHA is being used */
DECL|member|hashSize
name|int
name|hashSize
decl_stmt|;
comment|/* hash size of SHA being used */
DECL|member|blockSize
name|int
name|blockSize
decl_stmt|;
comment|/* block size of SHA being used */
DECL|member|shaContext
name|USHAContext
name|shaContext
decl_stmt|;
comment|/* SHA context */
DECL|member|k_opad
name|unsigned
name|char
name|k_opad
index|[
name|USHA_Max_Message_Block_Size
index|]
decl_stmt|;
comment|/* outer padding - key XORd with opad */
DECL|member|Computed
name|int
name|Computed
decl_stmt|;
comment|/* Is the MAC computed? */
DECL|member|Corrupted
name|int
name|Corrupted
decl_stmt|;
comment|/* Cumulative corruption code */
block|}
DECL|typedef|HMACContext
name|HMACContext
typedef|;
end_typedef
begin_comment
comment|/*  *  This structure will hold context information for the HKDF  *  extract-and-expand Key Derivation Functions.  */
end_comment
begin_typedef
DECL|struct|HKDFContext
typedef|typedef
struct|struct
name|HKDFContext
block|{
DECL|member|whichSha
name|int
name|whichSha
decl_stmt|;
comment|/* which SHA is being used */
DECL|member|hmacContext
name|HMACContext
name|hmacContext
decl_stmt|;
DECL|member|hashSize
name|int
name|hashSize
decl_stmt|;
comment|/* hash size of SHA being used */
DECL|member|prk
name|unsigned
name|char
name|prk
index|[
name|USHAMaxHashSize
index|]
decl_stmt|;
comment|/* pseudo-random key - output of hkdfInput */
DECL|member|Computed
name|int
name|Computed
decl_stmt|;
comment|/* Is the key material computed? */
DECL|member|Corrupted
name|int
name|Corrupted
decl_stmt|;
comment|/* Cumulative corruption code */
block|}
DECL|typedef|HKDFContext
name|HKDFContext
typedef|;
end_typedef
begin_comment
comment|/*  *  Function Prototypes  */
end_comment
begin_comment
comment|/* SHA-1 */
end_comment
begin_function_decl
specifier|extern
name|int
name|SHA1Reset
parameter_list|(
name|SHA1Context
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|SHA1Input
parameter_list|(
name|SHA1Context
modifier|*
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|bytes
parameter_list|,
name|unsigned
name|int
name|bytecount
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|SHA1FinalBits
parameter_list|(
name|SHA1Context
modifier|*
parameter_list|,
name|uint8_t
name|bits
parameter_list|,
name|unsigned
name|int
name|bit_count
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|SHA1Result
parameter_list|(
name|SHA1Context
modifier|*
parameter_list|,
name|uint8_t
name|Message_Digest
index|[
name|SHA1HashSize
index|]
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* SHA-224 */
end_comment
begin_function_decl
specifier|extern
name|int
name|SHA224Reset
parameter_list|(
name|SHA224Context
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|SHA224Input
parameter_list|(
name|SHA224Context
modifier|*
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|bytes
parameter_list|,
name|unsigned
name|int
name|bytecount
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|SHA224FinalBits
parameter_list|(
name|SHA224Context
modifier|*
parameter_list|,
name|uint8_t
name|bits
parameter_list|,
name|unsigned
name|int
name|bit_count
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|SHA224Result
parameter_list|(
name|SHA224Context
modifier|*
parameter_list|,
name|uint8_t
name|Message_Digest
index|[
name|SHA224HashSize
index|]
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* SHA-256 */
end_comment
begin_function_decl
specifier|extern
name|int
name|SHA256Reset
parameter_list|(
name|SHA256Context
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|SHA256Input
parameter_list|(
name|SHA256Context
modifier|*
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|bytes
parameter_list|,
name|unsigned
name|int
name|bytecount
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|SHA256FinalBits
parameter_list|(
name|SHA256Context
modifier|*
parameter_list|,
name|uint8_t
name|bits
parameter_list|,
name|unsigned
name|int
name|bit_count
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|SHA256Result
parameter_list|(
name|SHA256Context
modifier|*
parameter_list|,
name|uint8_t
name|Message_Digest
index|[
name|SHA256HashSize
index|]
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* SHA-384 */
end_comment
begin_function_decl
specifier|extern
name|int
name|SHA384Reset
parameter_list|(
name|SHA384Context
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|SHA384Input
parameter_list|(
name|SHA384Context
modifier|*
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|bytes
parameter_list|,
name|unsigned
name|int
name|bytecount
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|SHA384FinalBits
parameter_list|(
name|SHA384Context
modifier|*
parameter_list|,
name|uint8_t
name|bits
parameter_list|,
name|unsigned
name|int
name|bit_count
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|SHA384Result
parameter_list|(
name|SHA384Context
modifier|*
parameter_list|,
name|uint8_t
name|Message_Digest
index|[
name|SHA384HashSize
index|]
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* SHA-512 */
end_comment
begin_function_decl
specifier|extern
name|int
name|SHA512Reset
parameter_list|(
name|SHA512Context
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|SHA512Input
parameter_list|(
name|SHA512Context
modifier|*
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|bytes
parameter_list|,
name|unsigned
name|int
name|bytecount
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|SHA512FinalBits
parameter_list|(
name|SHA512Context
modifier|*
parameter_list|,
name|uint8_t
name|bits
parameter_list|,
name|unsigned
name|int
name|bit_count
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|SHA512Result
parameter_list|(
name|SHA512Context
modifier|*
parameter_list|,
name|uint8_t
name|Message_Digest
index|[
name|SHA512HashSize
index|]
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* Unified SHA functions, chosen by whichSha */
end_comment
begin_function_decl
specifier|extern
name|int
name|USHAReset
parameter_list|(
name|USHAContext
modifier|*
name|context
parameter_list|,
name|SHAversion
name|whichSha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|USHAInput
parameter_list|(
name|USHAContext
modifier|*
name|context
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|bytes
parameter_list|,
name|unsigned
name|int
name|bytecount
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|USHAFinalBits
parameter_list|(
name|USHAContext
modifier|*
name|context
parameter_list|,
name|uint8_t
name|bits
parameter_list|,
name|unsigned
name|int
name|bit_count
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|USHAResult
parameter_list|(
name|USHAContext
modifier|*
name|context
parameter_list|,
name|uint8_t
name|Message_Digest
index|[
name|USHAMaxHashSize
index|]
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|USHABlockSize
parameter_list|(
name|enum
name|SHAversion
name|whichSha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|USHAHashSize
parameter_list|(
name|enum
name|SHAversion
name|whichSha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|USHAHashSizeBits
parameter_list|(
name|enum
name|SHAversion
name|whichSha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|USHAHashName
parameter_list|(
name|enum
name|SHAversion
name|whichSha
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*  * HMAC Keyed-Hashing for Message Authentication, RFC 2104,  * for all SHAs.  * This interface allows a fixed-length text input to be used.  */
end_comment
begin_function_decl
specifier|extern
name|int
name|hmac
parameter_list|(
name|SHAversion
name|whichSha
parameter_list|,
comment|/* which SHA algorithm to use */
specifier|const
name|unsigned
name|char
modifier|*
name|text
parameter_list|,
comment|/* pointer to data stream */
name|int
name|text_len
parameter_list|,
comment|/* length of data stream */
specifier|const
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
comment|/* pointer to authentication key */
name|int
name|key_len
parameter_list|,
comment|/* length of authentication key */
name|uint8_t
name|digest
index|[
name|USHAMaxHashSize
index|]
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* caller digest to fill in */
end_comment
begin_comment
comment|/*  * HMAC Keyed-Hashing for Message Authentication, RFC 2104,  * for all SHAs.  * This interface allows any length of text input to be used.  */
end_comment
begin_function_decl
specifier|extern
name|int
name|hmacReset
parameter_list|(
name|HMACContext
modifier|*
name|context
parameter_list|,
name|enum
name|SHAversion
name|whichSha
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
name|int
name|key_len
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|hmacInput
parameter_list|(
name|HMACContext
modifier|*
name|context
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|text
parameter_list|,
name|int
name|text_len
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|hmacFinalBits
parameter_list|(
name|HMACContext
modifier|*
name|context
parameter_list|,
name|uint8_t
name|bits
parameter_list|,
name|unsigned
name|int
name|bit_count
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|hmacResult
parameter_list|(
name|HMACContext
modifier|*
name|context
parameter_list|,
name|uint8_t
name|digest
index|[
name|USHAMaxHashSize
index|]
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*  * HKDF HMAC-based Extract-and-Expand Key Derivation Function,  * RFC 5869, for all SHAs.  */
end_comment
begin_function_decl
specifier|extern
name|int
name|hkdf
parameter_list|(
name|SHAversion
name|whichSha
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|salt
parameter_list|,
name|int
name|salt_len
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|ikm
parameter_list|,
name|int
name|ikm_len
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|info
parameter_list|,
name|int
name|info_len
parameter_list|,
name|uint8_t
name|okm
index|[ ]
parameter_list|,
name|int
name|okm_len
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|hkdfExtract
parameter_list|(
name|SHAversion
name|whichSha
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|salt
parameter_list|,
name|int
name|salt_len
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|ikm
parameter_list|,
name|int
name|ikm_len
parameter_list|,
name|uint8_t
name|prk
index|[
name|USHAMaxHashSize
index|]
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|hkdfExpand
parameter_list|(
name|SHAversion
name|whichSha
parameter_list|,
specifier|const
name|uint8_t
name|prk
index|[ ]
parameter_list|,
name|int
name|prk_len
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|info
parameter_list|,
name|int
name|info_len
parameter_list|,
name|uint8_t
name|okm
index|[ ]
parameter_list|,
name|int
name|okm_len
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*  * HKDF HMAC-based Extract-and-Expand Key Derivation Function,  * RFC 5869, for all SHAs.  * This interface allows any length of text input to be used.  */
end_comment
begin_function_decl
specifier|extern
name|int
name|hkdfReset
parameter_list|(
name|HKDFContext
modifier|*
name|context
parameter_list|,
name|enum
name|SHAversion
name|whichSha
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|salt
parameter_list|,
name|int
name|salt_len
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|hkdfInput
parameter_list|(
name|HKDFContext
modifier|*
name|context
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|ikm
parameter_list|,
name|int
name|ikm_len
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|hkdfFinalBits
parameter_list|(
name|HKDFContext
modifier|*
name|context
parameter_list|,
name|uint8_t
name|ikm_bits
parameter_list|,
name|unsigned
name|int
name|ikm_bit_count
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|hkdfResult
parameter_list|(
name|HKDFContext
modifier|*
name|context
parameter_list|,
name|uint8_t
name|prk
index|[
name|USHAMaxHashSize
index|]
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|info
parameter_list|,
name|int
name|info_len
parameter_list|,
name|uint8_t
name|okm
index|[
name|USHAMaxHashSize
index|]
parameter_list|,
name|int
name|okm_len
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* _SHA_H_ */
end_comment
end_unit
