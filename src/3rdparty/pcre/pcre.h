begin_unit
begin_comment
comment|/************************************************* *       Perl-Compatible Regular Expressions      * *************************************************/
end_comment
begin_comment
comment|/* This is the public header file for the PCRE library, to be #included by applications that call the PCRE functions.             Copyright (c) 1997-2014 University of Cambridge  ----------------------------------------------------------------------------- Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:      * Redistributions of source code must retain the above copyright notice,       this list of conditions and the following disclaimer.      * Redistributions in binary form must reproduce the above copyright       notice, this list of conditions and the following disclaimer in the       documentation and/or other materials provided with the distribution.      * Neither the name of the University of Cambridge nor the names of its       contributors may be used to endorse or promote products derived from       this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ----------------------------------------------------------------------------- */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|_PCRE_H
end_ifndef
begin_define
DECL|macro|_PCRE_H
define|#
directive|define
name|_PCRE_H
end_define
begin_comment
comment|/* The current PCRE version information. */
end_comment
begin_define
DECL|macro|PCRE_MAJOR
define|#
directive|define
name|PCRE_MAJOR
value|8
end_define
begin_define
DECL|macro|PCRE_MINOR
define|#
directive|define
name|PCRE_MINOR
value|37
end_define
begin_define
DECL|macro|PCRE_PRERELEASE
define|#
directive|define
name|PCRE_PRERELEASE
value|-RC1
end_define
begin_define
DECL|macro|PCRE_DATE
define|#
directive|define
name|PCRE_DATE
value|2015-02-03
end_define
begin_comment
comment|/* When an application links to a PCRE DLL in Windows, the symbols that are imported have to be identified as such. When building PCRE, the appropriate export setting is defined in pcre_internal.h, which includes this file. So we don't change existing definitions of PCRE_EXP_DECL and PCRECPP_EXP_DECL. */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|_WIN32
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|PCRE_STATIC
argument_list|)
end_if
begin_ifndef
ifndef|#
directive|ifndef
name|PCRE_EXP_DECL
end_ifndef
begin_define
DECL|macro|PCRE_EXP_DECL
define|#
directive|define
name|PCRE_EXP_DECL
value|extern __declspec(dllimport)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef
begin_ifndef
ifndef|#
directive|ifndef
name|PCRECPP_EXP_DECL
end_ifndef
begin_define
DECL|macro|PCRECPP_EXP_DECL
define|#
directive|define
name|PCRECPP_EXP_DECL
value|extern __declspec(dllimport)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PCRECPP_EXP_DEFN
end_ifndef
begin_define
DECL|macro|PCRECPP_EXP_DEFN
define|#
directive|define
name|PCRECPP_EXP_DEFN
value|__declspec(dllimport)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* By default, we use the standard "extern" declarations. */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PCRE_EXP_DECL
end_ifndef
begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef
begin_define
DECL|macro|PCRE_EXP_DECL
define|#
directive|define
name|PCRE_EXP_DECL
value|extern "C"
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|PCRE_EXP_DECL
define|#
directive|define
name|PCRE_EXP_DECL
value|extern
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef
begin_ifndef
ifndef|#
directive|ifndef
name|PCRECPP_EXP_DECL
end_ifndef
begin_define
DECL|macro|PCRECPP_EXP_DECL
define|#
directive|define
name|PCRECPP_EXP_DECL
value|extern
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PCRECPP_EXP_DEFN
end_ifndef
begin_define
DECL|macro|PCRECPP_EXP_DEFN
define|#
directive|define
name|PCRECPP_EXP_DEFN
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* Have to include stdlib.h in order to ensure that size_t is defined; it is needed here for malloc. */
end_comment
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_comment
comment|/* Allow for C++ users */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef
begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* Public options. Some are compile-time only, some are run-time only, and some are both. Most of the compile-time options are saved with the compiled regex so that they can be inspected during studying (and therefore JIT compiling). Note that pcre_study() has its own set of options. Originally, all the options defined here used distinct bits. However, almost all the bits in a 32-bit word are now used, so in order to conserve them, option bits that were previously only recognized at matching time (i.e. by pcre_exec() or pcre_dfa_exec()) may also be used for compile-time options that affect only compiling and are not relevant for studying or JIT compiling.  Some options for pcre_compile() change its behaviour but do not affect the behaviour of the execution functions. Other options are passed through to the execution functions and affect their behaviour, with or without affecting the behaviour of pcre_compile().  Options that can be passed to pcre_compile() are tagged Cx below, with these variants:  C1   Affects compile only C2   Does not affect compile; affects exec, dfa_exec C3   Affects compile, exec, dfa_exec C4   Affects compile, exec, dfa_exec, study C5   Affects compile, exec, study  Options that can be set for pcre_exec() and/or pcre_dfa_exec() are flagged with E and D, respectively. They take precedence over C3, C4, and C5 settings passed from pcre_compile(). Those that are compatible with JIT execution are flagged with J. */
DECL|macro|PCRE_CASELESS
define|#
directive|define
name|PCRE_CASELESS
value|0x00000001
comment|/* C1       */
DECL|macro|PCRE_MULTILINE
define|#
directive|define
name|PCRE_MULTILINE
value|0x00000002
comment|/* C1       */
DECL|macro|PCRE_DOTALL
define|#
directive|define
name|PCRE_DOTALL
value|0x00000004
comment|/* C1       */
DECL|macro|PCRE_EXTENDED
define|#
directive|define
name|PCRE_EXTENDED
value|0x00000008
comment|/* C1       */
DECL|macro|PCRE_ANCHORED
define|#
directive|define
name|PCRE_ANCHORED
value|0x00000010
comment|/* C4 E D   */
DECL|macro|PCRE_DOLLAR_ENDONLY
define|#
directive|define
name|PCRE_DOLLAR_ENDONLY
value|0x00000020
comment|/* C2       */
DECL|macro|PCRE_EXTRA
define|#
directive|define
name|PCRE_EXTRA
value|0x00000040
comment|/* C1       */
DECL|macro|PCRE_NOTBOL
define|#
directive|define
name|PCRE_NOTBOL
value|0x00000080
comment|/*    E D J */
DECL|macro|PCRE_NOTEOL
define|#
directive|define
name|PCRE_NOTEOL
value|0x00000100
comment|/*    E D J */
DECL|macro|PCRE_UNGREEDY
define|#
directive|define
name|PCRE_UNGREEDY
value|0x00000200
comment|/* C1       */
DECL|macro|PCRE_NOTEMPTY
define|#
directive|define
name|PCRE_NOTEMPTY
value|0x00000400
comment|/*    E D J */
DECL|macro|PCRE_UTF8
define|#
directive|define
name|PCRE_UTF8
value|0x00000800
comment|/* C4        )          */
DECL|macro|PCRE_UTF16
define|#
directive|define
name|PCRE_UTF16
value|0x00000800
comment|/* C4        ) Synonyms */
DECL|macro|PCRE_UTF32
define|#
directive|define
name|PCRE_UTF32
value|0x00000800
comment|/* C4        )          */
DECL|macro|PCRE_NO_AUTO_CAPTURE
define|#
directive|define
name|PCRE_NO_AUTO_CAPTURE
value|0x00001000
comment|/* C1       */
DECL|macro|PCRE_NO_UTF8_CHECK
define|#
directive|define
name|PCRE_NO_UTF8_CHECK
value|0x00002000
comment|/* C1 E D J  )          */
DECL|macro|PCRE_NO_UTF16_CHECK
define|#
directive|define
name|PCRE_NO_UTF16_CHECK
value|0x00002000
comment|/* C1 E D J  ) Synonyms */
DECL|macro|PCRE_NO_UTF32_CHECK
define|#
directive|define
name|PCRE_NO_UTF32_CHECK
value|0x00002000
comment|/* C1 E D J  )          */
DECL|macro|PCRE_AUTO_CALLOUT
define|#
directive|define
name|PCRE_AUTO_CALLOUT
value|0x00004000
comment|/* C1       */
DECL|macro|PCRE_PARTIAL_SOFT
define|#
directive|define
name|PCRE_PARTIAL_SOFT
value|0x00008000
comment|/*    E D J  ) Synonyms */
DECL|macro|PCRE_PARTIAL
define|#
directive|define
name|PCRE_PARTIAL
value|0x00008000
comment|/*    E D J  )          */
comment|/* This pair use the same bit. */
DECL|macro|PCRE_NEVER_UTF
define|#
directive|define
name|PCRE_NEVER_UTF
value|0x00010000
comment|/* C1        ) Overlaid */
DECL|macro|PCRE_DFA_SHORTEST
define|#
directive|define
name|PCRE_DFA_SHORTEST
value|0x00010000
comment|/*      D    ) Overlaid */
comment|/* This pair use the same bit. */
DECL|macro|PCRE_NO_AUTO_POSSESS
define|#
directive|define
name|PCRE_NO_AUTO_POSSESS
value|0x00020000
comment|/* C1        ) Overlaid */
DECL|macro|PCRE_DFA_RESTART
define|#
directive|define
name|PCRE_DFA_RESTART
value|0x00020000
comment|/*      D    ) Overlaid */
DECL|macro|PCRE_FIRSTLINE
define|#
directive|define
name|PCRE_FIRSTLINE
value|0x00040000
comment|/* C3       */
DECL|macro|PCRE_DUPNAMES
define|#
directive|define
name|PCRE_DUPNAMES
value|0x00080000
comment|/* C1       */
DECL|macro|PCRE_NEWLINE_CR
define|#
directive|define
name|PCRE_NEWLINE_CR
value|0x00100000
comment|/* C3 E D   */
DECL|macro|PCRE_NEWLINE_LF
define|#
directive|define
name|PCRE_NEWLINE_LF
value|0x00200000
comment|/* C3 E D   */
DECL|macro|PCRE_NEWLINE_CRLF
define|#
directive|define
name|PCRE_NEWLINE_CRLF
value|0x00300000
comment|/* C3 E D   */
DECL|macro|PCRE_NEWLINE_ANY
define|#
directive|define
name|PCRE_NEWLINE_ANY
value|0x00400000
comment|/* C3 E D   */
DECL|macro|PCRE_NEWLINE_ANYCRLF
define|#
directive|define
name|PCRE_NEWLINE_ANYCRLF
value|0x00500000
comment|/* C3 E D   */
DECL|macro|PCRE_BSR_ANYCRLF
define|#
directive|define
name|PCRE_BSR_ANYCRLF
value|0x00800000
comment|/* C3 E D   */
DECL|macro|PCRE_BSR_UNICODE
define|#
directive|define
name|PCRE_BSR_UNICODE
value|0x01000000
comment|/* C3 E D   */
DECL|macro|PCRE_JAVASCRIPT_COMPAT
define|#
directive|define
name|PCRE_JAVASCRIPT_COMPAT
value|0x02000000
comment|/* C5       */
DECL|macro|PCRE_NO_START_OPTIMIZE
define|#
directive|define
name|PCRE_NO_START_OPTIMIZE
value|0x04000000
comment|/* C2 E D    ) Synonyms */
DECL|macro|PCRE_NO_START_OPTIMISE
define|#
directive|define
name|PCRE_NO_START_OPTIMISE
value|0x04000000
comment|/* C2 E D    )          */
DECL|macro|PCRE_PARTIAL_HARD
define|#
directive|define
name|PCRE_PARTIAL_HARD
value|0x08000000
comment|/*    E D J */
DECL|macro|PCRE_NOTEMPTY_ATSTART
define|#
directive|define
name|PCRE_NOTEMPTY_ATSTART
value|0x10000000
comment|/*    E D J */
DECL|macro|PCRE_UCP
define|#
directive|define
name|PCRE_UCP
value|0x20000000
comment|/* C3       */
comment|/* Exec-time and get/set-time error codes */
DECL|macro|PCRE_ERROR_NOMATCH
define|#
directive|define
name|PCRE_ERROR_NOMATCH
value|(-1)
DECL|macro|PCRE_ERROR_NULL
define|#
directive|define
name|PCRE_ERROR_NULL
value|(-2)
DECL|macro|PCRE_ERROR_BADOPTION
define|#
directive|define
name|PCRE_ERROR_BADOPTION
value|(-3)
DECL|macro|PCRE_ERROR_BADMAGIC
define|#
directive|define
name|PCRE_ERROR_BADMAGIC
value|(-4)
DECL|macro|PCRE_ERROR_UNKNOWN_OPCODE
define|#
directive|define
name|PCRE_ERROR_UNKNOWN_OPCODE
value|(-5)
DECL|macro|PCRE_ERROR_UNKNOWN_NODE
define|#
directive|define
name|PCRE_ERROR_UNKNOWN_NODE
value|(-5)
comment|/* For backward compatibility */
DECL|macro|PCRE_ERROR_NOMEMORY
define|#
directive|define
name|PCRE_ERROR_NOMEMORY
value|(-6)
DECL|macro|PCRE_ERROR_NOSUBSTRING
define|#
directive|define
name|PCRE_ERROR_NOSUBSTRING
value|(-7)
DECL|macro|PCRE_ERROR_MATCHLIMIT
define|#
directive|define
name|PCRE_ERROR_MATCHLIMIT
value|(-8)
DECL|macro|PCRE_ERROR_CALLOUT
define|#
directive|define
name|PCRE_ERROR_CALLOUT
value|(-9)
comment|/* Never used by PCRE itself */
DECL|macro|PCRE_ERROR_BADUTF8
define|#
directive|define
name|PCRE_ERROR_BADUTF8
value|(-10)
comment|/* Same for 8/16/32 */
DECL|macro|PCRE_ERROR_BADUTF16
define|#
directive|define
name|PCRE_ERROR_BADUTF16
value|(-10)
comment|/* Same for 8/16/32 */
DECL|macro|PCRE_ERROR_BADUTF32
define|#
directive|define
name|PCRE_ERROR_BADUTF32
value|(-10)
comment|/* Same for 8/16/32 */
DECL|macro|PCRE_ERROR_BADUTF8_OFFSET
define|#
directive|define
name|PCRE_ERROR_BADUTF8_OFFSET
value|(-11)
comment|/* Same for 8/16 */
DECL|macro|PCRE_ERROR_BADUTF16_OFFSET
define|#
directive|define
name|PCRE_ERROR_BADUTF16_OFFSET
value|(-11)
comment|/* Same for 8/16 */
DECL|macro|PCRE_ERROR_PARTIAL
define|#
directive|define
name|PCRE_ERROR_PARTIAL
value|(-12)
DECL|macro|PCRE_ERROR_BADPARTIAL
define|#
directive|define
name|PCRE_ERROR_BADPARTIAL
value|(-13)
DECL|macro|PCRE_ERROR_INTERNAL
define|#
directive|define
name|PCRE_ERROR_INTERNAL
value|(-14)
DECL|macro|PCRE_ERROR_BADCOUNT
define|#
directive|define
name|PCRE_ERROR_BADCOUNT
value|(-15)
DECL|macro|PCRE_ERROR_DFA_UITEM
define|#
directive|define
name|PCRE_ERROR_DFA_UITEM
value|(-16)
DECL|macro|PCRE_ERROR_DFA_UCOND
define|#
directive|define
name|PCRE_ERROR_DFA_UCOND
value|(-17)
DECL|macro|PCRE_ERROR_DFA_UMLIMIT
define|#
directive|define
name|PCRE_ERROR_DFA_UMLIMIT
value|(-18)
DECL|macro|PCRE_ERROR_DFA_WSSIZE
define|#
directive|define
name|PCRE_ERROR_DFA_WSSIZE
value|(-19)
DECL|macro|PCRE_ERROR_DFA_RECURSE
define|#
directive|define
name|PCRE_ERROR_DFA_RECURSE
value|(-20)
DECL|macro|PCRE_ERROR_RECURSIONLIMIT
define|#
directive|define
name|PCRE_ERROR_RECURSIONLIMIT
value|(-21)
DECL|macro|PCRE_ERROR_NULLWSLIMIT
define|#
directive|define
name|PCRE_ERROR_NULLWSLIMIT
value|(-22)
comment|/* No longer actually used */
DECL|macro|PCRE_ERROR_BADNEWLINE
define|#
directive|define
name|PCRE_ERROR_BADNEWLINE
value|(-23)
DECL|macro|PCRE_ERROR_BADOFFSET
define|#
directive|define
name|PCRE_ERROR_BADOFFSET
value|(-24)
DECL|macro|PCRE_ERROR_SHORTUTF8
define|#
directive|define
name|PCRE_ERROR_SHORTUTF8
value|(-25)
DECL|macro|PCRE_ERROR_SHORTUTF16
define|#
directive|define
name|PCRE_ERROR_SHORTUTF16
value|(-25)
comment|/* Same for 8/16 */
DECL|macro|PCRE_ERROR_RECURSELOOP
define|#
directive|define
name|PCRE_ERROR_RECURSELOOP
value|(-26)
DECL|macro|PCRE_ERROR_JIT_STACKLIMIT
define|#
directive|define
name|PCRE_ERROR_JIT_STACKLIMIT
value|(-27)
DECL|macro|PCRE_ERROR_BADMODE
define|#
directive|define
name|PCRE_ERROR_BADMODE
value|(-28)
DECL|macro|PCRE_ERROR_BADENDIANNESS
define|#
directive|define
name|PCRE_ERROR_BADENDIANNESS
value|(-29)
DECL|macro|PCRE_ERROR_DFA_BADRESTART
define|#
directive|define
name|PCRE_ERROR_DFA_BADRESTART
value|(-30)
DECL|macro|PCRE_ERROR_JIT_BADOPTION
define|#
directive|define
name|PCRE_ERROR_JIT_BADOPTION
value|(-31)
DECL|macro|PCRE_ERROR_BADLENGTH
define|#
directive|define
name|PCRE_ERROR_BADLENGTH
value|(-32)
DECL|macro|PCRE_ERROR_UNSET
define|#
directive|define
name|PCRE_ERROR_UNSET
value|(-33)
comment|/* Specific error codes for UTF-8 validity checks */
DECL|macro|PCRE_UTF8_ERR0
define|#
directive|define
name|PCRE_UTF8_ERR0
value|0
DECL|macro|PCRE_UTF8_ERR1
define|#
directive|define
name|PCRE_UTF8_ERR1
value|1
DECL|macro|PCRE_UTF8_ERR2
define|#
directive|define
name|PCRE_UTF8_ERR2
value|2
DECL|macro|PCRE_UTF8_ERR3
define|#
directive|define
name|PCRE_UTF8_ERR3
value|3
DECL|macro|PCRE_UTF8_ERR4
define|#
directive|define
name|PCRE_UTF8_ERR4
value|4
DECL|macro|PCRE_UTF8_ERR5
define|#
directive|define
name|PCRE_UTF8_ERR5
value|5
DECL|macro|PCRE_UTF8_ERR6
define|#
directive|define
name|PCRE_UTF8_ERR6
value|6
DECL|macro|PCRE_UTF8_ERR7
define|#
directive|define
name|PCRE_UTF8_ERR7
value|7
DECL|macro|PCRE_UTF8_ERR8
define|#
directive|define
name|PCRE_UTF8_ERR8
value|8
DECL|macro|PCRE_UTF8_ERR9
define|#
directive|define
name|PCRE_UTF8_ERR9
value|9
DECL|macro|PCRE_UTF8_ERR10
define|#
directive|define
name|PCRE_UTF8_ERR10
value|10
DECL|macro|PCRE_UTF8_ERR11
define|#
directive|define
name|PCRE_UTF8_ERR11
value|11
DECL|macro|PCRE_UTF8_ERR12
define|#
directive|define
name|PCRE_UTF8_ERR12
value|12
DECL|macro|PCRE_UTF8_ERR13
define|#
directive|define
name|PCRE_UTF8_ERR13
value|13
DECL|macro|PCRE_UTF8_ERR14
define|#
directive|define
name|PCRE_UTF8_ERR14
value|14
DECL|macro|PCRE_UTF8_ERR15
define|#
directive|define
name|PCRE_UTF8_ERR15
value|15
DECL|macro|PCRE_UTF8_ERR16
define|#
directive|define
name|PCRE_UTF8_ERR16
value|16
DECL|macro|PCRE_UTF8_ERR17
define|#
directive|define
name|PCRE_UTF8_ERR17
value|17
DECL|macro|PCRE_UTF8_ERR18
define|#
directive|define
name|PCRE_UTF8_ERR18
value|18
DECL|macro|PCRE_UTF8_ERR19
define|#
directive|define
name|PCRE_UTF8_ERR19
value|19
DECL|macro|PCRE_UTF8_ERR20
define|#
directive|define
name|PCRE_UTF8_ERR20
value|20
DECL|macro|PCRE_UTF8_ERR21
define|#
directive|define
name|PCRE_UTF8_ERR21
value|21
DECL|macro|PCRE_UTF8_ERR22
define|#
directive|define
name|PCRE_UTF8_ERR22
value|22
comment|/* Unused (was non-character) */
comment|/* Specific error codes for UTF-16 validity checks */
DECL|macro|PCRE_UTF16_ERR0
define|#
directive|define
name|PCRE_UTF16_ERR0
value|0
DECL|macro|PCRE_UTF16_ERR1
define|#
directive|define
name|PCRE_UTF16_ERR1
value|1
DECL|macro|PCRE_UTF16_ERR2
define|#
directive|define
name|PCRE_UTF16_ERR2
value|2
DECL|macro|PCRE_UTF16_ERR3
define|#
directive|define
name|PCRE_UTF16_ERR3
value|3
DECL|macro|PCRE_UTF16_ERR4
define|#
directive|define
name|PCRE_UTF16_ERR4
value|4
comment|/* Unused (was non-character) */
comment|/* Specific error codes for UTF-32 validity checks */
DECL|macro|PCRE_UTF32_ERR0
define|#
directive|define
name|PCRE_UTF32_ERR0
value|0
DECL|macro|PCRE_UTF32_ERR1
define|#
directive|define
name|PCRE_UTF32_ERR1
value|1
DECL|macro|PCRE_UTF32_ERR2
define|#
directive|define
name|PCRE_UTF32_ERR2
value|2
comment|/* Unused (was non-character) */
DECL|macro|PCRE_UTF32_ERR3
define|#
directive|define
name|PCRE_UTF32_ERR3
value|3
comment|/* Request types for pcre_fullinfo() */
DECL|macro|PCRE_INFO_OPTIONS
define|#
directive|define
name|PCRE_INFO_OPTIONS
value|0
DECL|macro|PCRE_INFO_SIZE
define|#
directive|define
name|PCRE_INFO_SIZE
value|1
DECL|macro|PCRE_INFO_CAPTURECOUNT
define|#
directive|define
name|PCRE_INFO_CAPTURECOUNT
value|2
DECL|macro|PCRE_INFO_BACKREFMAX
define|#
directive|define
name|PCRE_INFO_BACKREFMAX
value|3
DECL|macro|PCRE_INFO_FIRSTBYTE
define|#
directive|define
name|PCRE_INFO_FIRSTBYTE
value|4
DECL|macro|PCRE_INFO_FIRSTCHAR
define|#
directive|define
name|PCRE_INFO_FIRSTCHAR
value|4
comment|/* For backwards compatibility */
DECL|macro|PCRE_INFO_FIRSTTABLE
define|#
directive|define
name|PCRE_INFO_FIRSTTABLE
value|5
DECL|macro|PCRE_INFO_LASTLITERAL
define|#
directive|define
name|PCRE_INFO_LASTLITERAL
value|6
DECL|macro|PCRE_INFO_NAMEENTRYSIZE
define|#
directive|define
name|PCRE_INFO_NAMEENTRYSIZE
value|7
DECL|macro|PCRE_INFO_NAMECOUNT
define|#
directive|define
name|PCRE_INFO_NAMECOUNT
value|8
DECL|macro|PCRE_INFO_NAMETABLE
define|#
directive|define
name|PCRE_INFO_NAMETABLE
value|9
DECL|macro|PCRE_INFO_STUDYSIZE
define|#
directive|define
name|PCRE_INFO_STUDYSIZE
value|10
DECL|macro|PCRE_INFO_DEFAULT_TABLES
define|#
directive|define
name|PCRE_INFO_DEFAULT_TABLES
value|11
DECL|macro|PCRE_INFO_OKPARTIAL
define|#
directive|define
name|PCRE_INFO_OKPARTIAL
value|12
DECL|macro|PCRE_INFO_JCHANGED
define|#
directive|define
name|PCRE_INFO_JCHANGED
value|13
DECL|macro|PCRE_INFO_HASCRORLF
define|#
directive|define
name|PCRE_INFO_HASCRORLF
value|14
DECL|macro|PCRE_INFO_MINLENGTH
define|#
directive|define
name|PCRE_INFO_MINLENGTH
value|15
DECL|macro|PCRE_INFO_JIT
define|#
directive|define
name|PCRE_INFO_JIT
value|16
DECL|macro|PCRE_INFO_JITSIZE
define|#
directive|define
name|PCRE_INFO_JITSIZE
value|17
DECL|macro|PCRE_INFO_MAXLOOKBEHIND
define|#
directive|define
name|PCRE_INFO_MAXLOOKBEHIND
value|18
DECL|macro|PCRE_INFO_FIRSTCHARACTER
define|#
directive|define
name|PCRE_INFO_FIRSTCHARACTER
value|19
DECL|macro|PCRE_INFO_FIRSTCHARACTERFLAGS
define|#
directive|define
name|PCRE_INFO_FIRSTCHARACTERFLAGS
value|20
DECL|macro|PCRE_INFO_REQUIREDCHAR
define|#
directive|define
name|PCRE_INFO_REQUIREDCHAR
value|21
DECL|macro|PCRE_INFO_REQUIREDCHARFLAGS
define|#
directive|define
name|PCRE_INFO_REQUIREDCHARFLAGS
value|22
DECL|macro|PCRE_INFO_MATCHLIMIT
define|#
directive|define
name|PCRE_INFO_MATCHLIMIT
value|23
DECL|macro|PCRE_INFO_RECURSIONLIMIT
define|#
directive|define
name|PCRE_INFO_RECURSIONLIMIT
value|24
DECL|macro|PCRE_INFO_MATCH_EMPTY
define|#
directive|define
name|PCRE_INFO_MATCH_EMPTY
value|25
comment|/* Request types for pcre_config(). Do not re-arrange, in order to remain compatible. */
DECL|macro|PCRE_CONFIG_UTF8
define|#
directive|define
name|PCRE_CONFIG_UTF8
value|0
DECL|macro|PCRE_CONFIG_NEWLINE
define|#
directive|define
name|PCRE_CONFIG_NEWLINE
value|1
DECL|macro|PCRE_CONFIG_LINK_SIZE
define|#
directive|define
name|PCRE_CONFIG_LINK_SIZE
value|2
DECL|macro|PCRE_CONFIG_POSIX_MALLOC_THRESHOLD
define|#
directive|define
name|PCRE_CONFIG_POSIX_MALLOC_THRESHOLD
value|3
DECL|macro|PCRE_CONFIG_MATCH_LIMIT
define|#
directive|define
name|PCRE_CONFIG_MATCH_LIMIT
value|4
DECL|macro|PCRE_CONFIG_STACKRECURSE
define|#
directive|define
name|PCRE_CONFIG_STACKRECURSE
value|5
DECL|macro|PCRE_CONFIG_UNICODE_PROPERTIES
define|#
directive|define
name|PCRE_CONFIG_UNICODE_PROPERTIES
value|6
DECL|macro|PCRE_CONFIG_MATCH_LIMIT_RECURSION
define|#
directive|define
name|PCRE_CONFIG_MATCH_LIMIT_RECURSION
value|7
DECL|macro|PCRE_CONFIG_BSR
define|#
directive|define
name|PCRE_CONFIG_BSR
value|8
DECL|macro|PCRE_CONFIG_JIT
define|#
directive|define
name|PCRE_CONFIG_JIT
value|9
DECL|macro|PCRE_CONFIG_UTF16
define|#
directive|define
name|PCRE_CONFIG_UTF16
value|10
DECL|macro|PCRE_CONFIG_JITTARGET
define|#
directive|define
name|PCRE_CONFIG_JITTARGET
value|11
DECL|macro|PCRE_CONFIG_UTF32
define|#
directive|define
name|PCRE_CONFIG_UTF32
value|12
DECL|macro|PCRE_CONFIG_PARENS_LIMIT
define|#
directive|define
name|PCRE_CONFIG_PARENS_LIMIT
value|13
comment|/* Request types for pcre_study(). Do not re-arrange, in order to remain compatible. */
DECL|macro|PCRE_STUDY_JIT_COMPILE
define|#
directive|define
name|PCRE_STUDY_JIT_COMPILE
value|0x0001
DECL|macro|PCRE_STUDY_JIT_PARTIAL_SOFT_COMPILE
define|#
directive|define
name|PCRE_STUDY_JIT_PARTIAL_SOFT_COMPILE
value|0x0002
DECL|macro|PCRE_STUDY_JIT_PARTIAL_HARD_COMPILE
define|#
directive|define
name|PCRE_STUDY_JIT_PARTIAL_HARD_COMPILE
value|0x0004
DECL|macro|PCRE_STUDY_EXTRA_NEEDED
define|#
directive|define
name|PCRE_STUDY_EXTRA_NEEDED
value|0x0008
comment|/* Bit flags for the pcre[16|32]_extra structure. Do not re-arrange or redefine these bits, just add new ones on the end, in order to remain compatible. */
DECL|macro|PCRE_EXTRA_STUDY_DATA
define|#
directive|define
name|PCRE_EXTRA_STUDY_DATA
value|0x0001
DECL|macro|PCRE_EXTRA_MATCH_LIMIT
define|#
directive|define
name|PCRE_EXTRA_MATCH_LIMIT
value|0x0002
DECL|macro|PCRE_EXTRA_CALLOUT_DATA
define|#
directive|define
name|PCRE_EXTRA_CALLOUT_DATA
value|0x0004
DECL|macro|PCRE_EXTRA_TABLES
define|#
directive|define
name|PCRE_EXTRA_TABLES
value|0x0008
DECL|macro|PCRE_EXTRA_MATCH_LIMIT_RECURSION
define|#
directive|define
name|PCRE_EXTRA_MATCH_LIMIT_RECURSION
value|0x0010
DECL|macro|PCRE_EXTRA_MARK
define|#
directive|define
name|PCRE_EXTRA_MARK
value|0x0020
DECL|macro|PCRE_EXTRA_EXECUTABLE_JIT
define|#
directive|define
name|PCRE_EXTRA_EXECUTABLE_JIT
value|0x0040
comment|/* Types */
struct_decl|struct
name|real_pcre
struct_decl|;
comment|/* declaration; the definition is private  */
DECL|typedef|pcre
typedef|typedef
name|struct
name|real_pcre
name|pcre
typedef|;
struct_decl|struct
name|real_pcre16
struct_decl|;
comment|/* declaration; the definition is private  */
DECL|typedef|pcre16
typedef|typedef
name|struct
name|real_pcre16
name|pcre16
typedef|;
struct_decl|struct
name|real_pcre32
struct_decl|;
comment|/* declaration; the definition is private  */
DECL|typedef|pcre32
typedef|typedef
name|struct
name|real_pcre32
name|pcre32
typedef|;
struct_decl|struct
name|real_pcre_jit_stack
struct_decl|;
comment|/* declaration; the definition is private  */
DECL|typedef|pcre_jit_stack
typedef|typedef
name|struct
name|real_pcre_jit_stack
name|pcre_jit_stack
typedef|;
struct_decl|struct
name|real_pcre16_jit_stack
struct_decl|;
comment|/* declaration; the definition is private  */
DECL|typedef|pcre16_jit_stack
typedef|typedef
name|struct
name|real_pcre16_jit_stack
name|pcre16_jit_stack
typedef|;
struct_decl|struct
name|real_pcre32_jit_stack
struct_decl|;
comment|/* declaration; the definition is private  */
DECL|typedef|pcre32_jit_stack
typedef|typedef
name|struct
name|real_pcre32_jit_stack
name|pcre32_jit_stack
typedef|;
comment|/* If PCRE is compiled with 16 bit character support, PCRE_UCHAR16 must contain a 16 bit wide signed data type. Otherwise it can be a dummy data type since pcre16 functions are not implemented. There is a check for this in pcre_internal.h. */
ifndef|#
directive|ifndef
name|PCRE_UCHAR16
DECL|macro|PCRE_UCHAR16
define|#
directive|define
name|PCRE_UCHAR16
value|unsigned short
endif|#
directive|endif
ifndef|#
directive|ifndef
name|PCRE_SPTR16
DECL|macro|PCRE_SPTR16
define|#
directive|define
name|PCRE_SPTR16
value|const PCRE_UCHAR16 *
endif|#
directive|endif
comment|/* If PCRE is compiled with 32 bit character support, PCRE_UCHAR32 must contain a 32 bit wide signed data type. Otherwise it can be a dummy data type since pcre32 functions are not implemented. There is a check for this in pcre_internal.h. */
ifndef|#
directive|ifndef
name|PCRE_UCHAR32
DECL|macro|PCRE_UCHAR32
define|#
directive|define
name|PCRE_UCHAR32
value|unsigned int
endif|#
directive|endif
ifndef|#
directive|ifndef
name|PCRE_SPTR32
DECL|macro|PCRE_SPTR32
define|#
directive|define
name|PCRE_SPTR32
value|const PCRE_UCHAR32 *
endif|#
directive|endif
comment|/* When PCRE is compiled as a C++ library, the subject pointer type can be replaced with a custom type. For conventional use, the public interface is a const char *. */
ifndef|#
directive|ifndef
name|PCRE_SPTR
DECL|macro|PCRE_SPTR
define|#
directive|define
name|PCRE_SPTR
value|const char *
endif|#
directive|endif
comment|/* The structure for passing additional data to pcre_exec(). This is defined in such as way as to be extensible. Always add new fields at the end, in order to remain compatible. */
DECL|struct|pcre_extra
typedef|typedef
struct|struct
name|pcre_extra
block|{
DECL|member|flags
name|unsigned
name|long
name|int
name|flags
decl_stmt|;
comment|/* Bits for which fields are set */
DECL|member|study_data
name|void
modifier|*
name|study_data
decl_stmt|;
comment|/* Opaque data from pcre_study() */
DECL|member|match_limit
name|unsigned
name|long
name|int
name|match_limit
decl_stmt|;
comment|/* Maximum number of calls to match() */
DECL|member|callout_data
name|void
modifier|*
name|callout_data
decl_stmt|;
comment|/* Data passed back in callouts */
DECL|member|tables
specifier|const
name|unsigned
name|char
modifier|*
name|tables
decl_stmt|;
comment|/* Pointer to character tables */
DECL|member|match_limit_recursion
name|unsigned
name|long
name|int
name|match_limit_recursion
decl_stmt|;
comment|/* Max recursive calls to match() */
DECL|member|mark
name|unsigned
name|char
modifier|*
modifier|*
name|mark
decl_stmt|;
comment|/* For passing back a mark pointer */
DECL|member|executable_jit
name|void
modifier|*
name|executable_jit
decl_stmt|;
comment|/* Contains a pointer to a compiled jit code */
block|}
DECL|typedef|pcre_extra
name|pcre_extra
typedef|;
comment|/* Same structure as above, but with 16 bit char pointers. */
DECL|struct|pcre16_extra
typedef|typedef
struct|struct
name|pcre16_extra
block|{
DECL|member|flags
name|unsigned
name|long
name|int
name|flags
decl_stmt|;
comment|/* Bits for which fields are set */
DECL|member|study_data
name|void
modifier|*
name|study_data
decl_stmt|;
comment|/* Opaque data from pcre_study() */
DECL|member|match_limit
name|unsigned
name|long
name|int
name|match_limit
decl_stmt|;
comment|/* Maximum number of calls to match() */
DECL|member|callout_data
name|void
modifier|*
name|callout_data
decl_stmt|;
comment|/* Data passed back in callouts */
DECL|member|tables
specifier|const
name|unsigned
name|char
modifier|*
name|tables
decl_stmt|;
comment|/* Pointer to character tables */
DECL|member|match_limit_recursion
name|unsigned
name|long
name|int
name|match_limit_recursion
decl_stmt|;
comment|/* Max recursive calls to match() */
DECL|member|mark
name|PCRE_UCHAR16
modifier|*
modifier|*
name|mark
decl_stmt|;
comment|/* For passing back a mark pointer */
DECL|member|executable_jit
name|void
modifier|*
name|executable_jit
decl_stmt|;
comment|/* Contains a pointer to a compiled jit code */
block|}
DECL|typedef|pcre16_extra
name|pcre16_extra
typedef|;
comment|/* Same structure as above, but with 32 bit char pointers. */
DECL|struct|pcre32_extra
typedef|typedef
struct|struct
name|pcre32_extra
block|{
DECL|member|flags
name|unsigned
name|long
name|int
name|flags
decl_stmt|;
comment|/* Bits for which fields are set */
DECL|member|study_data
name|void
modifier|*
name|study_data
decl_stmt|;
comment|/* Opaque data from pcre_study() */
DECL|member|match_limit
name|unsigned
name|long
name|int
name|match_limit
decl_stmt|;
comment|/* Maximum number of calls to match() */
DECL|member|callout_data
name|void
modifier|*
name|callout_data
decl_stmt|;
comment|/* Data passed back in callouts */
DECL|member|tables
specifier|const
name|unsigned
name|char
modifier|*
name|tables
decl_stmt|;
comment|/* Pointer to character tables */
DECL|member|match_limit_recursion
name|unsigned
name|long
name|int
name|match_limit_recursion
decl_stmt|;
comment|/* Max recursive calls to match() */
DECL|member|mark
name|PCRE_UCHAR32
modifier|*
modifier|*
name|mark
decl_stmt|;
comment|/* For passing back a mark pointer */
DECL|member|executable_jit
name|void
modifier|*
name|executable_jit
decl_stmt|;
comment|/* Contains a pointer to a compiled jit code */
block|}
DECL|typedef|pcre32_extra
name|pcre32_extra
typedef|;
comment|/* The structure for passing out data via the pcre_callout_function. We use a structure so that new fields can be added on the end in future versions, without changing the API of the function, thereby allowing old clients to work without modification. */
DECL|struct|pcre_callout_block
typedef|typedef
struct|struct
name|pcre_callout_block
block|{
DECL|member|version
name|int
name|version
decl_stmt|;
comment|/* Identifies version of block */
comment|/* ------------------------ Version 0 ------------------------------- */
DECL|member|callout_number
name|int
name|callout_number
decl_stmt|;
comment|/* Number compiled into pattern */
DECL|member|offset_vector
name|int
modifier|*
name|offset_vector
decl_stmt|;
comment|/* The offset vector */
DECL|member|subject
name|PCRE_SPTR
name|subject
decl_stmt|;
comment|/* The subject being matched */
DECL|member|subject_length
name|int
name|subject_length
decl_stmt|;
comment|/* The length of the subject */
DECL|member|start_match
name|int
name|start_match
decl_stmt|;
comment|/* Offset to start of this match attempt */
DECL|member|current_position
name|int
name|current_position
decl_stmt|;
comment|/* Where we currently are in the subject */
DECL|member|capture_top
name|int
name|capture_top
decl_stmt|;
comment|/* Max current capture */
DECL|member|capture_last
name|int
name|capture_last
decl_stmt|;
comment|/* Most recently closed capture */
DECL|member|callout_data
name|void
modifier|*
name|callout_data
decl_stmt|;
comment|/* Data passed in with the call */
comment|/* ------------------- Added for Version 1 -------------------------- */
DECL|member|pattern_position
name|int
name|pattern_position
decl_stmt|;
comment|/* Offset to next item in the pattern */
DECL|member|next_item_length
name|int
name|next_item_length
decl_stmt|;
comment|/* Length of next item in the pattern */
comment|/* ------------------- Added for Version 2 -------------------------- */
DECL|member|mark
specifier|const
name|unsigned
name|char
modifier|*
name|mark
decl_stmt|;
comment|/* Pointer to current mark or NULL    */
comment|/* ------------------------------------------------------------------ */
block|}
DECL|typedef|pcre_callout_block
name|pcre_callout_block
typedef|;
comment|/* Same structure as above, but with 16 bit char pointers. */
DECL|struct|pcre16_callout_block
typedef|typedef
struct|struct
name|pcre16_callout_block
block|{
DECL|member|version
name|int
name|version
decl_stmt|;
comment|/* Identifies version of block */
comment|/* ------------------------ Version 0 ------------------------------- */
DECL|member|callout_number
name|int
name|callout_number
decl_stmt|;
comment|/* Number compiled into pattern */
DECL|member|offset_vector
name|int
modifier|*
name|offset_vector
decl_stmt|;
comment|/* The offset vector */
DECL|member|subject
name|PCRE_SPTR16
name|subject
decl_stmt|;
comment|/* The subject being matched */
DECL|member|subject_length
name|int
name|subject_length
decl_stmt|;
comment|/* The length of the subject */
DECL|member|start_match
name|int
name|start_match
decl_stmt|;
comment|/* Offset to start of this match attempt */
DECL|member|current_position
name|int
name|current_position
decl_stmt|;
comment|/* Where we currently are in the subject */
DECL|member|capture_top
name|int
name|capture_top
decl_stmt|;
comment|/* Max current capture */
DECL|member|capture_last
name|int
name|capture_last
decl_stmt|;
comment|/* Most recently closed capture */
DECL|member|callout_data
name|void
modifier|*
name|callout_data
decl_stmt|;
comment|/* Data passed in with the call */
comment|/* ------------------- Added for Version 1 -------------------------- */
DECL|member|pattern_position
name|int
name|pattern_position
decl_stmt|;
comment|/* Offset to next item in the pattern */
DECL|member|next_item_length
name|int
name|next_item_length
decl_stmt|;
comment|/* Length of next item in the pattern */
comment|/* ------------------- Added for Version 2 -------------------------- */
DECL|member|mark
specifier|const
name|PCRE_UCHAR16
modifier|*
name|mark
decl_stmt|;
comment|/* Pointer to current mark or NULL    */
comment|/* ------------------------------------------------------------------ */
block|}
DECL|typedef|pcre16_callout_block
name|pcre16_callout_block
typedef|;
comment|/* Same structure as above, but with 32 bit char pointers. */
DECL|struct|pcre32_callout_block
typedef|typedef
struct|struct
name|pcre32_callout_block
block|{
DECL|member|version
name|int
name|version
decl_stmt|;
comment|/* Identifies version of block */
comment|/* ------------------------ Version 0 ------------------------------- */
DECL|member|callout_number
name|int
name|callout_number
decl_stmt|;
comment|/* Number compiled into pattern */
DECL|member|offset_vector
name|int
modifier|*
name|offset_vector
decl_stmt|;
comment|/* The offset vector */
DECL|member|subject
name|PCRE_SPTR32
name|subject
decl_stmt|;
comment|/* The subject being matched */
DECL|member|subject_length
name|int
name|subject_length
decl_stmt|;
comment|/* The length of the subject */
DECL|member|start_match
name|int
name|start_match
decl_stmt|;
comment|/* Offset to start of this match attempt */
DECL|member|current_position
name|int
name|current_position
decl_stmt|;
comment|/* Where we currently are in the subject */
DECL|member|capture_top
name|int
name|capture_top
decl_stmt|;
comment|/* Max current capture */
DECL|member|capture_last
name|int
name|capture_last
decl_stmt|;
comment|/* Most recently closed capture */
DECL|member|callout_data
name|void
modifier|*
name|callout_data
decl_stmt|;
comment|/* Data passed in with the call */
comment|/* ------------------- Added for Version 1 -------------------------- */
DECL|member|pattern_position
name|int
name|pattern_position
decl_stmt|;
comment|/* Offset to next item in the pattern */
DECL|member|next_item_length
name|int
name|next_item_length
decl_stmt|;
comment|/* Length of next item in the pattern */
comment|/* ------------------- Added for Version 2 -------------------------- */
DECL|member|mark
specifier|const
name|PCRE_UCHAR32
modifier|*
name|mark
decl_stmt|;
comment|/* Pointer to current mark or NULL    */
comment|/* ------------------------------------------------------------------ */
block|}
DECL|typedef|pcre32_callout_block
name|pcre32_callout_block
typedef|;
comment|/* Indirection for store get and free functions. These can be set to alternative malloc/free functions if required. Special ones are used in the non-recursive case for "frames". There is also an optional callout function that is triggered by the (?) regex item. For Virtual Pascal, these definitions have to take another form. */
ifndef|#
directive|ifndef
name|VPCOMPAT
DECL|variable|pcre_malloc
name|PCRE_EXP_DECL
name|void
modifier|*
function_decl|(
modifier|*
name|pcre_malloc
function_decl|)
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
DECL|variable|pcre_free
name|PCRE_EXP_DECL
name|void
function_decl|(
modifier|*
name|pcre_free
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
DECL|variable|pcre_stack_malloc
name|PCRE_EXP_DECL
name|void
modifier|*
function_decl|(
modifier|*
name|pcre_stack_malloc
function_decl|)
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
DECL|variable|pcre_stack_free
name|PCRE_EXP_DECL
name|void
function_decl|(
modifier|*
name|pcre_stack_free
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
DECL|variable|pcre_callout
name|PCRE_EXP_DECL
name|int
function_decl|(
modifier|*
name|pcre_callout
function_decl|)
parameter_list|(
name|pcre_callout_block
modifier|*
parameter_list|)
function_decl|;
DECL|variable|pcre_stack_guard
name|PCRE_EXP_DECL
name|int
function_decl|(
modifier|*
name|pcre_stack_guard
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
DECL|variable|pcre16_malloc
name|PCRE_EXP_DECL
name|void
modifier|*
function_decl|(
modifier|*
name|pcre16_malloc
function_decl|)
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
DECL|variable|pcre16_free
name|PCRE_EXP_DECL
name|void
function_decl|(
modifier|*
name|pcre16_free
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
DECL|variable|pcre16_stack_malloc
name|PCRE_EXP_DECL
name|void
modifier|*
function_decl|(
modifier|*
name|pcre16_stack_malloc
function_decl|)
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
DECL|variable|pcre16_stack_free
name|PCRE_EXP_DECL
name|void
function_decl|(
modifier|*
name|pcre16_stack_free
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
DECL|variable|pcre16_callout
name|PCRE_EXP_DECL
name|int
function_decl|(
modifier|*
name|pcre16_callout
function_decl|)
parameter_list|(
name|pcre16_callout_block
modifier|*
parameter_list|)
function_decl|;
DECL|variable|pcre16_stack_guard
name|PCRE_EXP_DECL
name|int
function_decl|(
modifier|*
name|pcre16_stack_guard
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
DECL|variable|pcre32_malloc
name|PCRE_EXP_DECL
name|void
modifier|*
function_decl|(
modifier|*
name|pcre32_malloc
function_decl|)
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
DECL|variable|pcre32_free
name|PCRE_EXP_DECL
name|void
function_decl|(
modifier|*
name|pcre32_free
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
DECL|variable|pcre32_stack_malloc
name|PCRE_EXP_DECL
name|void
modifier|*
function_decl|(
modifier|*
name|pcre32_stack_malloc
function_decl|)
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
DECL|variable|pcre32_stack_free
name|PCRE_EXP_DECL
name|void
function_decl|(
modifier|*
name|pcre32_stack_free
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
DECL|variable|pcre32_callout
name|PCRE_EXP_DECL
name|int
function_decl|(
modifier|*
name|pcre32_callout
function_decl|)
parameter_list|(
name|pcre32_callout_block
modifier|*
parameter_list|)
function_decl|;
DECL|variable|pcre32_stack_guard
name|PCRE_EXP_DECL
name|int
function_decl|(
modifier|*
name|pcre32_stack_guard
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
else|#
directive|else
comment|/* VPCOMPAT */
name|PCRE_EXP_DECL
name|void
modifier|*
name|pcre_malloc
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre_free
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
modifier|*
name|pcre_stack_malloc
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre_stack_free
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre_callout
parameter_list|(
name|pcre_callout_block
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre_stack_guard
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
modifier|*
name|pcre16_malloc
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre16_free
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
modifier|*
name|pcre16_stack_malloc
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre16_stack_free
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre16_callout
parameter_list|(
name|pcre16_callout_block
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre16_stack_guard
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
modifier|*
name|pcre32_malloc
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre32_free
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
modifier|*
name|pcre32_stack_malloc
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre32_stack_free
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre32_callout
parameter_list|(
name|pcre32_callout_block
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre32_stack_guard
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* VPCOMPAT */
comment|/* User defined callback which provides a stack just before the match starts. */
DECL|typedef|pcre_jit_callback
typedef|typedef
name|pcre_jit_stack
modifier|*
function_decl|(
modifier|*
name|pcre_jit_callback
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
DECL|typedef|pcre16_jit_callback
typedef|typedef
name|pcre16_jit_stack
modifier|*
function_decl|(
modifier|*
name|pcre16_jit_callback
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
DECL|typedef|pcre32_jit_callback
typedef|typedef
name|pcre32_jit_stack
modifier|*
function_decl|(
modifier|*
name|pcre32_jit_callback
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* Exported PCRE functions */
name|PCRE_EXP_DECL
name|pcre
modifier|*
name|pcre_compile
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|pcre16
modifier|*
name|pcre16_compile
parameter_list|(
name|PCRE_SPTR16
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|pcre32
modifier|*
name|pcre32_compile
parameter_list|(
name|PCRE_SPTR32
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|pcre
modifier|*
name|pcre_compile2
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|pcre16
modifier|*
name|pcre16_compile2
parameter_list|(
name|PCRE_SPTR16
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|pcre32
modifier|*
name|pcre32_compile2
parameter_list|(
name|PCRE_SPTR32
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre_config
parameter_list|(
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre16_config
parameter_list|(
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre32_config
parameter_list|(
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre_copy_named_substring
parameter_list|(
specifier|const
name|pcre
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre16_copy_named_substring
parameter_list|(
specifier|const
name|pcre16
modifier|*
parameter_list|,
name|PCRE_SPTR16
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|PCRE_SPTR16
parameter_list|,
name|PCRE_UCHAR16
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre32_copy_named_substring
parameter_list|(
specifier|const
name|pcre32
modifier|*
parameter_list|,
name|PCRE_SPTR32
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|PCRE_SPTR32
parameter_list|,
name|PCRE_UCHAR32
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre_copy_substring
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre16_copy_substring
parameter_list|(
name|PCRE_SPTR16
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|PCRE_UCHAR16
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre32_copy_substring
parameter_list|(
name|PCRE_SPTR32
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|PCRE_UCHAR32
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre_dfa_exec
parameter_list|(
specifier|const
name|pcre
modifier|*
parameter_list|,
specifier|const
name|pcre_extra
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre16_dfa_exec
parameter_list|(
specifier|const
name|pcre16
modifier|*
parameter_list|,
specifier|const
name|pcre16_extra
modifier|*
parameter_list|,
name|PCRE_SPTR16
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre32_dfa_exec
parameter_list|(
specifier|const
name|pcre32
modifier|*
parameter_list|,
specifier|const
name|pcre32_extra
modifier|*
parameter_list|,
name|PCRE_SPTR32
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre_exec
parameter_list|(
specifier|const
name|pcre
modifier|*
parameter_list|,
specifier|const
name|pcre_extra
modifier|*
parameter_list|,
name|PCRE_SPTR
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre16_exec
parameter_list|(
specifier|const
name|pcre16
modifier|*
parameter_list|,
specifier|const
name|pcre16_extra
modifier|*
parameter_list|,
name|PCRE_SPTR16
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre32_exec
parameter_list|(
specifier|const
name|pcre32
modifier|*
parameter_list|,
specifier|const
name|pcre32_extra
modifier|*
parameter_list|,
name|PCRE_SPTR32
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre_jit_exec
parameter_list|(
specifier|const
name|pcre
modifier|*
parameter_list|,
specifier|const
name|pcre_extra
modifier|*
parameter_list|,
name|PCRE_SPTR
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|pcre_jit_stack
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre16_jit_exec
parameter_list|(
specifier|const
name|pcre16
modifier|*
parameter_list|,
specifier|const
name|pcre16_extra
modifier|*
parameter_list|,
name|PCRE_SPTR16
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|pcre16_jit_stack
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre32_jit_exec
parameter_list|(
specifier|const
name|pcre32
modifier|*
parameter_list|,
specifier|const
name|pcre32_extra
modifier|*
parameter_list|,
name|PCRE_SPTR32
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|pcre32_jit_stack
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre_free_substring
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre16_free_substring
parameter_list|(
name|PCRE_SPTR16
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre32_free_substring
parameter_list|(
name|PCRE_SPTR32
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre_free_substring_list
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre16_free_substring_list
parameter_list|(
name|PCRE_SPTR16
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre32_free_substring_list
parameter_list|(
name|PCRE_SPTR32
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre_fullinfo
parameter_list|(
specifier|const
name|pcre
modifier|*
parameter_list|,
specifier|const
name|pcre_extra
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre16_fullinfo
parameter_list|(
specifier|const
name|pcre16
modifier|*
parameter_list|,
specifier|const
name|pcre16_extra
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre32_fullinfo
parameter_list|(
specifier|const
name|pcre32
modifier|*
parameter_list|,
specifier|const
name|pcre32_extra
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre_get_named_substring
parameter_list|(
specifier|const
name|pcre
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre16_get_named_substring
parameter_list|(
specifier|const
name|pcre16
modifier|*
parameter_list|,
name|PCRE_SPTR16
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|PCRE_SPTR16
parameter_list|,
name|PCRE_SPTR16
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre32_get_named_substring
parameter_list|(
specifier|const
name|pcre32
modifier|*
parameter_list|,
name|PCRE_SPTR32
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|PCRE_SPTR32
parameter_list|,
name|PCRE_SPTR32
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre_get_stringnumber
parameter_list|(
specifier|const
name|pcre
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre16_get_stringnumber
parameter_list|(
specifier|const
name|pcre16
modifier|*
parameter_list|,
name|PCRE_SPTR16
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre32_get_stringnumber
parameter_list|(
specifier|const
name|pcre32
modifier|*
parameter_list|,
name|PCRE_SPTR32
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre_get_stringtable_entries
parameter_list|(
specifier|const
name|pcre
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre16_get_stringtable_entries
parameter_list|(
specifier|const
name|pcre16
modifier|*
parameter_list|,
name|PCRE_SPTR16
parameter_list|,
name|PCRE_UCHAR16
modifier|*
modifier|*
parameter_list|,
name|PCRE_UCHAR16
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre32_get_stringtable_entries
parameter_list|(
specifier|const
name|pcre32
modifier|*
parameter_list|,
name|PCRE_SPTR32
parameter_list|,
name|PCRE_UCHAR32
modifier|*
modifier|*
parameter_list|,
name|PCRE_UCHAR32
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre_get_substring
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre16_get_substring
parameter_list|(
name|PCRE_SPTR16
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|PCRE_SPTR16
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre32_get_substring
parameter_list|(
name|PCRE_SPTR32
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|PCRE_SPTR32
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre_get_substring_list
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre16_get_substring_list
parameter_list|(
name|PCRE_SPTR16
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|PCRE_SPTR16
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre32_get_substring_list
parameter_list|(
name|PCRE_SPTR32
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|PCRE_SPTR32
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
specifier|const
name|unsigned
name|char
modifier|*
name|pcre_maketables
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
specifier|const
name|unsigned
name|char
modifier|*
name|pcre16_maketables
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
specifier|const
name|unsigned
name|char
modifier|*
name|pcre32_maketables
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre_refcount
parameter_list|(
name|pcre
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre16_refcount
parameter_list|(
name|pcre16
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre32_refcount
parameter_list|(
name|pcre32
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|pcre_extra
modifier|*
name|pcre_study
parameter_list|(
specifier|const
name|pcre
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|pcre16_extra
modifier|*
name|pcre16_study
parameter_list|(
specifier|const
name|pcre16
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|pcre32_extra
modifier|*
name|pcre32_study
parameter_list|(
specifier|const
name|pcre32
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre_free_study
parameter_list|(
name|pcre_extra
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre16_free_study
parameter_list|(
name|pcre16_extra
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre32_free_study
parameter_list|(
name|pcre32_extra
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
specifier|const
name|char
modifier|*
name|pcre_version
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
specifier|const
name|char
modifier|*
name|pcre16_version
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
specifier|const
name|char
modifier|*
name|pcre32_version
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Utility functions for byte order swaps. */
name|PCRE_EXP_DECL
name|int
name|pcre_pattern_to_host_byte_order
parameter_list|(
name|pcre
modifier|*
parameter_list|,
name|pcre_extra
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre16_pattern_to_host_byte_order
parameter_list|(
name|pcre16
modifier|*
parameter_list|,
name|pcre16_extra
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre32_pattern_to_host_byte_order
parameter_list|(
name|pcre32
modifier|*
parameter_list|,
name|pcre32_extra
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre16_utf16_to_host_byte_order
parameter_list|(
name|PCRE_UCHAR16
modifier|*
parameter_list|,
name|PCRE_SPTR16
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|int
name|pcre32_utf32_to_host_byte_order
parameter_list|(
name|PCRE_UCHAR32
modifier|*
parameter_list|,
name|PCRE_SPTR32
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/* JIT compiler related functions. */
name|PCRE_EXP_DECL
name|pcre_jit_stack
modifier|*
name|pcre_jit_stack_alloc
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|pcre16_jit_stack
modifier|*
name|pcre16_jit_stack_alloc
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|pcre32_jit_stack
modifier|*
name|pcre32_jit_stack_alloc
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre_jit_stack_free
parameter_list|(
name|pcre_jit_stack
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre16_jit_stack_free
parameter_list|(
name|pcre16_jit_stack
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre32_jit_stack_free
parameter_list|(
name|pcre32_jit_stack
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre_assign_jit_stack
parameter_list|(
name|pcre_extra
modifier|*
parameter_list|,
name|pcre_jit_callback
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre16_assign_jit_stack
parameter_list|(
name|pcre16_extra
modifier|*
parameter_list|,
name|pcre16_jit_callback
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre32_assign_jit_stack
parameter_list|(
name|pcre32_extra
modifier|*
parameter_list|,
name|pcre32_jit_callback
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre_jit_free_unused_memory
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre16_jit_free_unused_memory
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|PCRE_EXP_DECL
name|void
name|pcre32_jit_free_unused_memory
parameter_list|(
name|void
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern
begin_comment
comment|/* extern "C" */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* End of pcre.h */
end_comment
end_unit
