begin_unit
begin_comment
comment|/*!**************************************************************************** @File          pvr2d.h @Title         PVR2D external header file @Author        Imagination Technologies @Copyright     Copyright (c) by Imagination Technologies Limited. 				This specification is protected by copyright laws and contains 				material proprietary to Imagination Technologies Limited. 				You may use and distribute this specification free of charge for implementing 				the functionality therein, without altering or removing any trademark, copyright, 				or other notice from the specification. @Platform      Generic @Description   PVR2D definitions for PVR2D clients ******************************************************************************/
end_comment
begin_comment
comment|/****************************************************************************** Modifications :- $Log: pvr2d.h $ ******************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|_PVR2D_H_
end_ifndef
begin_define
DECL|macro|_PVR2D_H_
define|#
directive|define
name|_PVR2D_H_
end_define
begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef
begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* PVR2D Platform-specific definitions */
DECL|macro|PVR2D_EXPORT
define|#
directive|define
name|PVR2D_EXPORT
DECL|macro|PVR2D_IMPORT
define|#
directive|define
name|PVR2D_IMPORT
DECL|macro|PVR2D_REV_MAJOR
define|#
directive|define
name|PVR2D_REV_MAJOR
value|2
DECL|macro|PVR2D_REV_MINOR
define|#
directive|define
name|PVR2D_REV_MINOR
value|1
typedef|typedef
enum|enum
block|{
DECL|enumerator|PVR2D_FALSE
name|PVR2D_FALSE
init|=
literal|0
block|,
DECL|enumerator|PVR2D_TRUE
name|PVR2D_TRUE
block|}
DECL|typedef|PVR2D_BOOL
name|PVR2D_BOOL
typedef|;
comment|/* error codes */
typedef|typedef
enum|enum
block|{
DECL|enumerator|PVR2D_OK
name|PVR2D_OK
init|=
literal|0
block|,
DECL|enumerator|PVR2DERROR_INVALID_PARAMETER
name|PVR2DERROR_INVALID_PARAMETER
init|=
operator|-
literal|1
block|,
DECL|enumerator|PVR2DERROR_DEVICE_UNAVAILABLE
name|PVR2DERROR_DEVICE_UNAVAILABLE
init|=
operator|-
literal|2
block|,
DECL|enumerator|PVR2DERROR_INVALID_CONTEXT
name|PVR2DERROR_INVALID_CONTEXT
init|=
operator|-
literal|3
block|,
DECL|enumerator|PVR2DERROR_MEMORY_UNAVAILABLE
name|PVR2DERROR_MEMORY_UNAVAILABLE
init|=
operator|-
literal|4
block|,
DECL|enumerator|PVR2DERROR_DEVICE_NOT_PRESENT
name|PVR2DERROR_DEVICE_NOT_PRESENT
init|=
operator|-
literal|5
block|,
DECL|enumerator|PVR2DERROR_IOCTL_ERROR
name|PVR2DERROR_IOCTL_ERROR
init|=
operator|-
literal|6
block|,
DECL|enumerator|PVR2DERROR_GENERIC_ERROR
name|PVR2DERROR_GENERIC_ERROR
init|=
operator|-
literal|7
block|,
DECL|enumerator|PVR2DERROR_BLT_NOTCOMPLETE
name|PVR2DERROR_BLT_NOTCOMPLETE
init|=
operator|-
literal|8
block|,
DECL|enumerator|PVR2DERROR_HW_FEATURE_NOT_SUPPORTED
name|PVR2DERROR_HW_FEATURE_NOT_SUPPORTED
init|=
operator|-
literal|9
block|,
DECL|enumerator|PVR2DERROR_NOT_YET_IMPLEMENTED
name|PVR2DERROR_NOT_YET_IMPLEMENTED
init|=
operator|-
literal|10
block|,
DECL|enumerator|PVR2DERROR_MAPPING_FAILED
name|PVR2DERROR_MAPPING_FAILED
init|=
operator|-
literal|11
block|}
DECL|typedef|PVR2DERROR
name|PVR2DERROR
typedef|;
comment|/* pixel formats */
typedef|typedef
enum|enum
block|{
DECL|enumerator|PVR2D_1BPP
name|PVR2D_1BPP
init|=
literal|0
block|,
DECL|enumerator|PVR2D_RGB565
name|PVR2D_RGB565
block|,
DECL|enumerator|PVR2D_ARGB4444
name|PVR2D_ARGB4444
block|,
DECL|enumerator|PVR2D_RGB888
name|PVR2D_RGB888
block|,
DECL|enumerator|PVR2D_ARGB8888
name|PVR2D_ARGB8888
block|,
DECL|enumerator|PVR2D_ARGB1555
name|PVR2D_ARGB1555
block|,
DECL|enumerator|PVR2D_ALPHA8
name|PVR2D_ALPHA8
block|,
DECL|enumerator|PVR2D_ALPHA4
name|PVR2D_ALPHA4
block|,
DECL|enumerator|PVR2D_PAL2
name|PVR2D_PAL2
block|,
DECL|enumerator|PVR2D_PAL4
name|PVR2D_PAL4
block|,
DECL|enumerator|PVR2D_PAL8
name|PVR2D_PAL8
block|,
DECL|enumerator|PVR2D_VGAEMU
name|PVR2D_VGAEMU
block|}
DECL|typedef|PVR2DFORMAT
name|PVR2DFORMAT
typedef|;
comment|/* wrap surface type */
typedef|typedef
enum|enum
block|{
DECL|enumerator|PVR2D_WRAPFLAG_NONCONTIGUOUS
name|PVR2D_WRAPFLAG_NONCONTIGUOUS
init|=
literal|0
block|,
DECL|enumerator|PVR2D_WRAPFLAG_CONTIGUOUS
name|PVR2D_WRAPFLAG_CONTIGUOUS
init|=
literal|1
block|,  }
DECL|typedef|PVR2DWRAPFLAGS
name|PVR2DWRAPFLAGS
typedef|;
comment|/* flags for control information of additional blits */
typedef|typedef
enum|enum
block|{
DECL|enumerator|PVR2D_BLIT_DISABLE_ALL
name|PVR2D_BLIT_DISABLE_ALL
init|=
literal|0x0000
block|,
comment|/* disable all additional controls */
DECL|enumerator|PVR2D_BLIT_CK_ENABLE
name|PVR2D_BLIT_CK_ENABLE
init|=
literal|0x0001
block|,
comment|/* enable colour key */
DECL|enumerator|PVR2D_BLIT_GLOBAL_ALPHA_ENABLE
name|PVR2D_BLIT_GLOBAL_ALPHA_ENABLE
init|=
literal|0x0002
block|,
comment|/* enable standard global alpha */
DECL|enumerator|PVR2D_BLIT_PERPIXEL_ALPHABLEND_ENABLE
name|PVR2D_BLIT_PERPIXEL_ALPHABLEND_ENABLE
init|=
literal|0x0004
block|,
comment|/* enable per-pixel alpha bleding */
DECL|enumerator|PVR2D_BLIT_PAT_SURFACE_ENABLE
name|PVR2D_BLIT_PAT_SURFACE_ENABLE
init|=
literal|0x0008
block|,
comment|/* enable pattern surf (disable fill) */
DECL|enumerator|PVR2D_BLIT_FULLY_SPECIFIED_ALPHA_ENABLE
name|PVR2D_BLIT_FULLY_SPECIFIED_ALPHA_ENABLE
init|=
literal|0x0010
block|,
comment|/* enable fully specified alpha */
DECL|enumerator|PVR2D_BLIT_ROT_90
name|PVR2D_BLIT_ROT_90
init|=
literal|0x0020
block|,
comment|/* apply 90 degree rotation to the blt */
DECL|enumerator|PVR2D_BLIT_ROT_180
name|PVR2D_BLIT_ROT_180
init|=
literal|0x0040
block|,
comment|/* apply 180 degree rotation to the blt */
DECL|enumerator|PVR2D_BLIT_ROT_270
name|PVR2D_BLIT_ROT_270
init|=
literal|0x0080
block|,
comment|/* apply 270 degree rotation to the blt */
DECL|enumerator|PVR2D_BLIT_COPYORDER_TL2BR
name|PVR2D_BLIT_COPYORDER_TL2BR
init|=
literal|0x0100
block|,
comment|/* copy order overrides */
DECL|enumerator|PVR2D_BLIT_COPYORDER_BR2TL
name|PVR2D_BLIT_COPYORDER_BR2TL
init|=
literal|0x0200
block|,
DECL|enumerator|PVR2D_BLIT_COPYORDER_TR2BL
name|PVR2D_BLIT_COPYORDER_TR2BL
init|=
literal|0x0400
block|,
DECL|enumerator|PVR2D_BLIT_COPYORDER_BL2TR
name|PVR2D_BLIT_COPYORDER_BL2TR
init|=
literal|0x0800
block|,
DECL|enumerator|PVR2D_BLIT_COLKEY_SOURCE
name|PVR2D_BLIT_COLKEY_SOURCE
init|=
literal|0x1000
block|,
comment|/* Key colour is on the source surface */
DECL|enumerator|PVR2D_BLIT_COLKEY_DEST
name|PVR2D_BLIT_COLKEY_DEST
init|=
literal|0x2000
comment|/* Key colour is on the destination surface */
block|}
DECL|typedef|PVR2DBLITFLAGS
name|PVR2DBLITFLAGS
typedef|;
comment|/* standard alpha-blending functions, AlphaBlendingFunc field of PVR2DBLTINFO */
typedef|typedef
enum|enum
block|{
DECL|enumerator|PVR2D_ALPHA_OP_SRC_DSTINV
name|PVR2D_ALPHA_OP_SRC_DSTINV
init|=
literal|1
block|,
comment|/* source alpha : Cdst = Csrc*Asrc + Cdst*(1-Asrc) */
DECL|enumerator|PVR2D_ALPHA_OP_SRCP_DSTINV
name|PVR2D_ALPHA_OP_SRCP_DSTINV
init|=
literal|2
comment|/* premultiplied source alpha : Cdst = Csrc + Cdst*(1-Asrc) */
block|}
DECL|typedef|PVR2D_ALPHABLENDFUNC
name|PVR2D_ALPHABLENDFUNC
typedef|;
comment|/* blend ops for fully specified alpha */
typedef|typedef
enum|enum
block|{
DECL|enumerator|PVR2D_BLEND_OP_ZERO
name|PVR2D_BLEND_OP_ZERO
init|=
literal|0
block|,
DECL|enumerator|PVR2D_BLEND_OP_ONE
name|PVR2D_BLEND_OP_ONE
init|=
literal|1
block|,
DECL|enumerator|PVR2D_BLEND_OP_SRC
name|PVR2D_BLEND_OP_SRC
init|=
literal|2
block|,
DECL|enumerator|PVR2D_BLEND_OP_DST
name|PVR2D_BLEND_OP_DST
init|=
literal|3
block|,
DECL|enumerator|PVR2D_BLEND_OP_GLOBAL
name|PVR2D_BLEND_OP_GLOBAL
init|=
literal|4
block|,
DECL|enumerator|PVR2D_BLEND_OP_SRC_PLUS_GLOBAL
name|PVR2D_BLEND_OP_SRC_PLUS_GLOBAL
init|=
literal|5
block|,
DECL|enumerator|PVR2D_BLEND_OP_DST_PLUS_GLOBAL
name|PVR2D_BLEND_OP_DST_PLUS_GLOBAL
init|=
literal|6
block|}
DECL|typedef|PVR2D_BLEND_OP
name|PVR2D_BLEND_OP
typedef|;
DECL|typedef|PVR2D_HANDLE
typedef|typedef
name|void
modifier|*
name|PVR2D_HANDLE
typedef|;
comment|/* Fully specified alpha blend :	pAlpha field of PVR2DBLTINFO structure					*/
comment|/* a fully specified Alpha Blend operation is defined as									*/
comment|/* DST (ALPHA) = (ALPHA_1 * SRC (ALPHA)) + (ALPHA_3 * DST (ALPHA))							*/
comment|/* DST (RGB)   = (ALPHA_2 * SRC (RGB)) + (ALPHA_4 * DST (RGB))								*/
comment|/* if the pre-multiplication stage is enabled then the equations become the following:		*/
comment|/* PRE_MUL     = ((SRC(A)) * (Global Alpha Value))											*/
comment|/* DST (ALPHA) = (ALPHA_1 * SRC (ALPHA)) + (PRE_MUL * DST (ALPHA))							*/
comment|/* DST (RGB)   = (ALPHA_2 * SRC (RGB)) + (PRE_MUL * DST (RGB))								*/
comment|/* if the transparent source alpha stage is enabled then a source alpha of zero forces the	*/
comment|/* source to be transparent for that pixel regardless of the blend equation being used.		*/
DECL|struct|_PVR2D_ALPHABLT
typedef|typedef
struct|struct
name|_PVR2D_ALPHABLT
block|{
DECL|member|eAlpha1
name|PVR2D_BLEND_OP
name|eAlpha1
decl_stmt|;
DECL|member|bAlpha1Invert
name|PVR2D_BOOL
name|bAlpha1Invert
decl_stmt|;
DECL|member|eAlpha2
name|PVR2D_BLEND_OP
name|eAlpha2
decl_stmt|;
DECL|member|bAlpha2Invert
name|PVR2D_BOOL
name|bAlpha2Invert
decl_stmt|;
DECL|member|eAlpha3
name|PVR2D_BLEND_OP
name|eAlpha3
decl_stmt|;
DECL|member|bAlpha3Invert
name|PVR2D_BOOL
name|bAlpha3Invert
decl_stmt|;
DECL|member|eAlpha4
name|PVR2D_BLEND_OP
name|eAlpha4
decl_stmt|;
DECL|member|bAlpha4Invert
name|PVR2D_BOOL
name|bAlpha4Invert
decl_stmt|;
DECL|member|bPremulAlpha
name|PVR2D_BOOL
name|bPremulAlpha
decl_stmt|;
comment|/* enable pre-multiplication stage */
DECL|member|bTransAlpha
name|PVR2D_BOOL
name|bTransAlpha
decl_stmt|;
comment|/* enable transparent source alpha stage */
DECL|member|bUpdateAlphaLookup
name|PVR2D_BOOL
name|bUpdateAlphaLookup
decl_stmt|;
comment|/* enable and update the 1555-Lookup alpha table */
DECL|member|uAlphaLookup0
name|unsigned
name|char
name|uAlphaLookup0
decl_stmt|;
comment|/* 8 bit alpha when A=0 in a 1555-Lookup surface */
DECL|member|uAlphaLookup1
name|unsigned
name|char
name|uAlphaLookup1
decl_stmt|;
comment|/* 8 bit alpha when A=1 in a 1555-Lookup surface */
DECL|member|uGlobalRGB
name|unsigned
name|char
name|uGlobalRGB
decl_stmt|;
comment|/* Global Alpha Value for RGB, 0=transparent 255=opaque */
DECL|member|uGlobalA
name|unsigned
name|char
name|uGlobalA
decl_stmt|;
comment|/* Global Alpha Value for Alpha */
block|}
DECL|typedef|PVR2D_ALPHABLT
DECL|typedef|PPVR2D_ALPHABLT
name|PVR2D_ALPHABLT
operator|,
typedef|*
name|PPVR2D_ALPHABLT
typedef|;
comment|/* surface memory info structure */
DECL|struct|_PVR2DMEMINFO
typedef|typedef
struct|struct
name|_PVR2DMEMINFO
block|{
DECL|member|pBase
name|void
modifier|*
name|pBase
decl_stmt|;
DECL|member|ui32MemSize
name|unsigned
name|long
name|ui32MemSize
decl_stmt|;
DECL|member|ui32DevAddr
name|unsigned
name|long
name|ui32DevAddr
decl_stmt|;
DECL|member|ulFlags
name|unsigned
name|long
name|ulFlags
decl_stmt|;
DECL|member|hPrivateData
name|void
modifier|*
name|hPrivateData
decl_stmt|;
DECL|member|hPrivateMapData
name|void
modifier|*
name|hPrivateMapData
decl_stmt|;
block|}
DECL|typedef|PVR2DMEMINFO
DECL|typedef|PPVR2DMEMINFO
name|PVR2DMEMINFO
operator|,
typedef|*
name|PPVR2DMEMINFO
typedef|;
DECL|macro|PVR2D_MAX_DEVICE_NAME
define|#
directive|define
name|PVR2D_MAX_DEVICE_NAME
value|20
DECL|struct|_PVR2DDEVICEINFO
typedef|typedef
struct|struct
name|_PVR2DDEVICEINFO
block|{
DECL|member|ulDevID
name|unsigned
name|long
name|ulDevID
decl_stmt|;
DECL|member|szDeviceName
name|char
name|szDeviceName
index|[
name|PVR2D_MAX_DEVICE_NAME
index|]
decl_stmt|;
block|}
DECL|typedef|PVR2DDEVICEINFO
name|PVR2DDEVICEINFO
typedef|;
DECL|struct|_PVR2DISPLAYINFO
typedef|typedef
struct|struct
name|_PVR2DISPLAYINFO
block|{
DECL|member|ulMaxFlipChains
name|unsigned
name|long
name|ulMaxFlipChains
decl_stmt|;
DECL|member|ulMaxBuffersInChain
name|unsigned
name|long
name|ulMaxBuffersInChain
decl_stmt|;
DECL|member|eFormat
name|PVR2DFORMAT
name|eFormat
decl_stmt|;
DECL|member|ulWidth
name|unsigned
name|long
name|ulWidth
decl_stmt|;
DECL|member|ulHeight
name|unsigned
name|long
name|ulHeight
decl_stmt|;
DECL|member|lStride
name|long
name|lStride
decl_stmt|;
DECL|member|ulMinFlipInterval
name|unsigned
name|long
name|ulMinFlipInterval
decl_stmt|;
DECL|member|ulMaxFlipInterval
name|unsigned
name|long
name|ulMaxFlipInterval
decl_stmt|;
block|}
DECL|typedef|PVR2DDISPLAYINFO
name|PVR2DDISPLAYINFO
typedef|;
DECL|struct|_PVR2DBLTINFO
typedef|typedef
struct|struct
name|_PVR2DBLTINFO
block|{
DECL|member|CopyCode
name|unsigned
name|long
name|CopyCode
decl_stmt|;
comment|/* rop code  */
DECL|member|Colour
name|unsigned
name|long
name|Colour
decl_stmt|;
comment|/* fill colour */
DECL|member|ColourKey
name|unsigned
name|long
name|ColourKey
decl_stmt|;
comment|/* colour key */
DECL|member|GlobalAlphaValue
name|unsigned
name|char
name|GlobalAlphaValue
decl_stmt|;
comment|/* global alpha blending */
DECL|member|AlphaBlendingFunc
name|unsigned
name|char
name|AlphaBlendingFunc
decl_stmt|;
comment|/* per-pixel alpha-blending function */
DECL|member|BlitFlags
name|PVR2DBLITFLAGS
name|BlitFlags
decl_stmt|;
comment|/* additional blit control information */
DECL|member|pDstMemInfo
name|PVR2DMEMINFO
modifier|*
name|pDstMemInfo
decl_stmt|;
comment|/* destination memory */
DECL|member|DstOffset
name|unsigned
name|long
name|DstOffset
decl_stmt|;
comment|/* byte offset from start of allocation to destination surface pixel 0,0 */
DECL|member|DstStride
name|long
name|DstStride
decl_stmt|;
comment|/* signed stride, the number of bytes from pixel 0,0 to 0,1 */
DECL|member|DstX
DECL|member|DstY
name|long
name|DstX
decl_stmt|,
name|DstY
decl_stmt|;
comment|/* pixel offset from start of dest surface to start of blt rectangle */
DECL|member|DSizeX
DECL|member|DSizeY
name|long
name|DSizeX
decl_stmt|,
name|DSizeY
decl_stmt|;
comment|/* blt size */
DECL|member|DstFormat
name|PVR2DFORMAT
name|DstFormat
decl_stmt|;
comment|/* dest format */
DECL|member|DstSurfWidth
name|unsigned
name|long
name|DstSurfWidth
decl_stmt|;
comment|/* size of dest surface in pixels */
DECL|member|DstSurfHeight
name|unsigned
name|long
name|DstSurfHeight
decl_stmt|;
comment|/* size of dest surface in pixels */
DECL|member|pSrcMemInfo
name|PVR2DMEMINFO
modifier|*
name|pSrcMemInfo
decl_stmt|;
comment|/* source mem, (source fields are also used for patterns) */
DECL|member|SrcOffset
name|unsigned
name|long
name|SrcOffset
decl_stmt|;
comment|/* byte offset from start of allocation to src/pat surface pixel 0,0 */
DECL|member|SrcStride
name|long
name|SrcStride
decl_stmt|;
comment|/* signed stride, the number of bytes from pixel 0,0 to 0,1 */
DECL|member|SrcX
DECL|member|SrcY
name|long
name|SrcX
decl_stmt|,
name|SrcY
decl_stmt|;
comment|/* pixel offset from start of surface to start of source rectangle */
comment|/* for patterns this is the start offset within the pattern */
DECL|member|SizeX
DECL|member|SizeY
name|long
name|SizeX
decl_stmt|,
name|SizeY
decl_stmt|;
comment|/* source rectangle size or pattern size in pixels */
DECL|member|SrcFormat
name|PVR2DFORMAT
name|SrcFormat
decl_stmt|;
comment|/* source/pattern format */
DECL|member|pPalMemInfo
name|PVR2DMEMINFO
modifier|*
name|pPalMemInfo
decl_stmt|;
comment|/* source/pattern palette memory containing argb8888 colour table */
DECL|member|PalOffset
name|unsigned
name|long
name|PalOffset
decl_stmt|;
comment|/* byte offset from start of allocation to start of palette */
DECL|member|SrcSurfWidth
name|unsigned
name|long
name|SrcSurfWidth
decl_stmt|;
comment|/* size of source surface in pixels */
DECL|member|SrcSurfHeight
name|unsigned
name|long
name|SrcSurfHeight
decl_stmt|;
comment|/* size of source surface in pixels */
DECL|member|pMaskMemInfo
name|PVR2DMEMINFO
modifier|*
name|pMaskMemInfo
decl_stmt|;
comment|/* mask memory, 1bpp format implied */
DECL|member|MaskOffset
name|unsigned
name|long
name|MaskOffset
decl_stmt|;
comment|/* byte offset from start of allocation to mask surface pixel 0,0 */
DECL|member|MaskStride
name|long
name|MaskStride
decl_stmt|;
comment|/* signed stride, the number of bytes from pixel 0,0 to 0,1 */
DECL|member|MaskX
DECL|member|MaskY
name|long
name|MaskX
decl_stmt|,
name|MaskY
decl_stmt|;
comment|/* mask rect top left (mask size = blt size) */
DECL|member|MaskSurfWidth
name|unsigned
name|long
name|MaskSurfWidth
decl_stmt|;
comment|/* size of mask surface in pixels */
DECL|member|MaskSurfHeight
name|unsigned
name|long
name|MaskSurfHeight
decl_stmt|;
comment|/* size of mask surface in pixels */
DECL|member|pAlpha
name|PPVR2D_ALPHABLT
name|pAlpha
decl_stmt|;
comment|/* fully specified alpha blend */
block|}
DECL|typedef|PVR2DBLTINFO
DECL|typedef|PPVR2DBLTINFO
name|PVR2DBLTINFO
operator|,
typedef|*
name|PPVR2DBLTINFO
typedef|;
DECL|struct|_PVR2DRECT
typedef|typedef
struct|struct
name|_PVR2DRECT
block|{
DECL|member|left
DECL|member|top
name|long
name|left
decl_stmt|,
name|top
decl_stmt|;
DECL|member|right
DECL|member|bottom
name|long
name|right
decl_stmt|,
name|bottom
decl_stmt|;
block|}
DECL|typedef|PVR2DRECT
name|PVR2DRECT
typedef|;
typedef|typedef
struct|struct
block|{
DECL|member|pSurfMemInfo
name|PVR2DMEMINFO
modifier|*
name|pSurfMemInfo
decl_stmt|;
comment|/* surface memory */
DECL|member|SurfOffset
name|unsigned
name|long
name|SurfOffset
decl_stmt|;
comment|/* byte offset from start of allocation to destination surface pixel 0,0 */
DECL|member|Stride
name|long
name|Stride
decl_stmt|;
comment|/* signed stride */
DECL|member|Format
name|PVR2DFORMAT
name|Format
decl_stmt|;
DECL|member|SurfWidth
name|unsigned
name|long
name|SurfWidth
decl_stmt|;
comment|/* surface size in pixels */
DECL|member|SurfHeight
name|unsigned
name|long
name|SurfHeight
decl_stmt|;
block|}
DECL|typedef|PVR2D_SURFACE
DECL|typedef|PPVR2D_SURFACE
name|PVR2D_SURFACE
operator|,
typedef|*
name|PPVR2D_SURFACE
typedef|;
typedef|typedef
struct|struct
block|{
DECL|member|pUseCode
name|unsigned
name|long
modifier|*
name|pUseCode
decl_stmt|;
comment|/* USSE code */
DECL|member|UseCodeSize
name|unsigned
name|long
name|UseCodeSize
decl_stmt|;
comment|/* usse code size in bytes */
block|}
DECL|typedef|PVR2D_USECODE
DECL|typedef|PPVR2D_USECODE
name|PVR2D_USECODE
operator|,
typedef|*
name|PPVR2D_USECODE
typedef|;
typedef|typedef
struct|struct
block|{
DECL|member|sDst
name|PVR2D_SURFACE
name|sDst
decl_stmt|;
comment|/* destination surface */
DECL|member|sSrc
name|PVR2D_SURFACE
name|sSrc
decl_stmt|;
comment|/* source surface */
DECL|member|rcDest
name|PVR2DRECT
name|rcDest
decl_stmt|;
comment|/* destination rectangle */
DECL|member|rcSource
name|PVR2DRECT
name|rcSource
decl_stmt|;
comment|/* source rectangle */
DECL|member|hUseCode
name|PVR2D_HANDLE
name|hUseCode
decl_stmt|;
comment|/* custom USE code (NULL implies source copy) */
DECL|member|UseParams
name|unsigned
name|long
name|UseParams
index|[
literal|2
index|]
decl_stmt|;
comment|/* per-blt params for use code */
block|}
DECL|typedef|PVR2D_3DBLT
DECL|typedef|PPVR2D_3DBLT
name|PVR2D_3DBLT
operator|,
typedef|*
name|PPVR2D_3DBLT
typedef|;
DECL|macro|MAKE_COPY_BLIT
define|#
directive|define
name|MAKE_COPY_BLIT
parameter_list|(
name|src
parameter_list|,
name|soff
parameter_list|,
name|dest
parameter_list|,
name|doff
parameter_list|,
name|sx
parameter_list|,
name|sy
parameter_list|,
name|dx
parameter_list|,
name|dy
parameter_list|,
name|sz
parameter_list|)
DECL|typedef|PVR2DCONTEXTHANDLE
typedef|typedef
name|void
modifier|*
name|PVR2DCONTEXTHANDLE
typedef|;
DECL|typedef|PVR2DFLIPCHAINHANDLE
typedef|typedef
name|void
modifier|*
name|PVR2DFLIPCHAINHANDLE
typedef|;
comment|// CopyCode field of PVR2DBLTINFO structure:
comment|// the CopyCode field of the PVR2DBLTINFO structure should contain a rop3 or rop4 code.
comment|// a rop3 is an 8 bit code that describes a blt with three inputs : source dest and pattern
comment|// rop4 is a 16 bit code that describes a blt with four inputs : source dest pattern and mask
comment|// common rop3 codes are defined below
comment|// a colour fill blt is processed in the pattern channel as a constant colour with a rop code of 0xF0
comment|// PVR2D_BLIT_PAT_SURFACE_ENABLE defines whether the pattern channel is a surface or a fill colour.
comment|// a rop4 is defined by two rop3 codes, and the 1 bit-per-pixel mask surface defines which is used.
comment|// a common rop4 is 0xAAF0 which is the mask copy blt used for text glyphs.
comment|// CopyCode is taken to be a rop4 when pMaskMemInfo is non zero, otherwise it is assumed to be a rop3
comment|// use the PVR2DMASKROP4 macro below to construct a rop4 from two rop3's
comment|// rop3a is the rop used when mask pixel = 1, and rop3b when mask = 0
DECL|macro|PVR2DROP4
define|#
directive|define
name|PVR2DROP4
parameter_list|(
name|rop3b
parameter_list|,
name|rop3a
parameter_list|)
value|((rop3b<<8)|rop3a)
comment|/* common rop codes */
DECL|macro|PVR2DROPclear
define|#
directive|define
name|PVR2DROPclear
value|0x00
comment|/* 0 (whiteness) */
DECL|macro|PVR2DROPset
define|#
directive|define
name|PVR2DROPset
value|0xFF
comment|/* 1 (blackness) */
DECL|macro|PVR2DROPnoop
define|#
directive|define
name|PVR2DROPnoop
value|0xAA
comment|/* dst (used for masked blts) */
comment|/* source and  dest rop codes */
DECL|macro|PVR2DROPand
define|#
directive|define
name|PVR2DROPand
value|0x88
comment|/* src AND dst */
DECL|macro|PVR2DROPandReverse
define|#
directive|define
name|PVR2DROPandReverse
value|0x44
comment|/* src AND NOT dst */
DECL|macro|PVR2DROPcopy
define|#
directive|define
name|PVR2DROPcopy
value|0xCC
comment|/* src (used for source copy and alpha blts) */
DECL|macro|PVR2DROPandInverted
define|#
directive|define
name|PVR2DROPandInverted
value|0x22
comment|/* NOT src AND dst */
DECL|macro|PVR2DROPxor
define|#
directive|define
name|PVR2DROPxor
value|0x66
comment|/* src XOR dst */
DECL|macro|PVR2DROPor
define|#
directive|define
name|PVR2DROPor
value|0xEE
comment|/* src OR dst */
DECL|macro|PVR2DROPnor
define|#
directive|define
name|PVR2DROPnor
value|0x11
comment|/* NOT src AND NOT dst */
DECL|macro|PVR2DROPequiv
define|#
directive|define
name|PVR2DROPequiv
value|0x99
comment|/* NOT src XOR dst */
DECL|macro|PVR2DROPinvert
define|#
directive|define
name|PVR2DROPinvert
value|0x55
comment|/* NOT dst */
DECL|macro|PVR2DROPorReverse
define|#
directive|define
name|PVR2DROPorReverse
value|0xDD
comment|/* src OR NOT dst */
DECL|macro|PVR2DROPcopyInverted
define|#
directive|define
name|PVR2DROPcopyInverted
value|0x33
comment|/* NOT src */
DECL|macro|PVR2DROPorInverted
define|#
directive|define
name|PVR2DROPorInverted
value|0xBB
comment|/* NOT src OR dst */
DECL|macro|PVR2DROPnand
define|#
directive|define
name|PVR2DROPnand
value|0x77
comment|/* NOT src OR NOT dst */
comment|/* pattern rop codes */
DECL|macro|PVR2DPATROPand
define|#
directive|define
name|PVR2DPATROPand
value|0xA0
comment|/* pat AND dst */
DECL|macro|PVR2DPATROPandReverse
define|#
directive|define
name|PVR2DPATROPandReverse
value|0x50
comment|/* pat AND NOT dst */
DECL|macro|PVR2DPATROPcopy
define|#
directive|define
name|PVR2DPATROPcopy
value|0xF0
comment|/* pat (used for solid color fills and pattern blts) */
DECL|macro|PVR2DPATROPandInverted
define|#
directive|define
name|PVR2DPATROPandInverted
value|0x0A
comment|/* NOT pat AND dst */
DECL|macro|PVR2DPATROPxor
define|#
directive|define
name|PVR2DPATROPxor
value|0x5A
comment|/* pat XOR dst */
DECL|macro|PVR2DPATROPor
define|#
directive|define
name|PVR2DPATROPor
value|0xFA
comment|/* pat OR dst */
DECL|macro|PVR2DPATROPnor
define|#
directive|define
name|PVR2DPATROPnor
value|0x05
comment|/* NOT pat AND NOT dst */
DECL|macro|PVR2DPATROPequiv
define|#
directive|define
name|PVR2DPATROPequiv
value|0xA5
comment|/* NOT pat XOR dst */
DECL|macro|PVR2DPATROPinvert
define|#
directive|define
name|PVR2DPATROPinvert
value|0x55
comment|/* NOT dst */
DECL|macro|PVR2DPATROPorReverse
define|#
directive|define
name|PVR2DPATROPorReverse
value|0xF5
comment|/* pat OR NOT dst */
DECL|macro|PVR2DPATROPcopyInverted
define|#
directive|define
name|PVR2DPATROPcopyInverted
value|0x0F
comment|/* NOT pat */
DECL|macro|PVR2DPATROPorInverted
define|#
directive|define
name|PVR2DPATROPorInverted
value|0xAF
comment|/* NOT pat OR dst */
DECL|macro|PVR2DPATROPnand
define|#
directive|define
name|PVR2DPATROPnand
value|0x5F
comment|/* NOT pat OR NOT dst */
comment|/* common rop4 codes */
DECL|macro|PVR2DROP4MaskedCopy
define|#
directive|define
name|PVR2DROP4MaskedCopy
value|PVR2DROP4(PVR2DROPnoop,PVR2DROPcopy)
comment|/* masked source copy blt (used for rounded window corners etc) */
DECL|macro|PVR2DROP4MaskedFill
define|#
directive|define
name|PVR2DROP4MaskedFill
value|PVR2DROP4(PVR2DROPnoop,PVR2DPATROPcopy)
comment|/* masked colour fill blt (used for text) */
comment|/* Legacy support */
DECL|macro|PVR2DROP3_PATMASK
define|#
directive|define
name|PVR2DROP3_PATMASK
value|PVR2DPATROPcopy
DECL|macro|PVR2DROP3_SRCMASK
define|#
directive|define
name|PVR2DROP3_SRCMASK
value|PVR2DROPcopy
comment|/* pixmap memory alignment */
DECL|macro|PVR2D_ALIGNMENT_4
define|#
directive|define
name|PVR2D_ALIGNMENT_4
value|4
comment|/* DWORD alignment */
DECL|macro|PVR2D_ALIGNMENT_ANY
define|#
directive|define
name|PVR2D_ALIGNMENT_ANY
value|0
comment|/* no alignment    */
DECL|macro|PVR2D_ALIGNMENT_PALETTE
define|#
directive|define
name|PVR2D_ALIGNMENT_PALETTE
value|16
comment|/* 16 byte alignment is required for palettes */
comment|/* Heap number for PVR2DGetFrameBuffer */
DECL|macro|PVR2D_FB_PRIMARY_SURFACE
define|#
directive|define
name|PVR2D_FB_PRIMARY_SURFACE
value|0
DECL|macro|PVR2D_PRESENT_PROPERTY_SRCSTRIDE
define|#
directive|define
name|PVR2D_PRESENT_PROPERTY_SRCSTRIDE
value|(1<< 0)
DECL|macro|PVR2D_PRESENT_PROPERTY_DSTSIZE
define|#
directive|define
name|PVR2D_PRESENT_PROPERTY_DSTSIZE
value|(1<< 1)
DECL|macro|PVR2D_PRESENT_PROPERTY_DSTPOS
define|#
directive|define
name|PVR2D_PRESENT_PROPERTY_DSTPOS
value|(1<< 2)
DECL|macro|PVR2D_PRESENT_PROPERTY_CLIPRECTS
define|#
directive|define
name|PVR2D_PRESENT_PROPERTY_CLIPRECTS
value|(1<< 3)
DECL|macro|PVR2D_PRESENT_PROPERTY_INTERVAL
define|#
directive|define
name|PVR2D_PRESENT_PROPERTY_INTERVAL
value|(1<< 4)
DECL|macro|PVR2D_CREATE_FLIPCHAIN_SHARED
define|#
directive|define
name|PVR2D_CREATE_FLIPCHAIN_SHARED
value|(1<< 0)
DECL|macro|PVR2D_CREATE_FLIPCHAIN_QUERY
define|#
directive|define
name|PVR2D_CREATE_FLIPCHAIN_QUERY
value|(1<< 1)
comment|/* Functions that the library exports */
name|PVR2D_IMPORT
name|int
name|PVR2DEnumerateDevices
parameter_list|(
name|PVR2DDEVICEINFO
modifier|*
name|pDevInfo
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DCreateDeviceContext
parameter_list|(
name|unsigned
name|long
name|ulDevID
parameter_list|,
name|PVR2DCONTEXTHANDLE
modifier|*
name|phContext
parameter_list|,
name|unsigned
name|long
name|ulFlags
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DDestroyDeviceContext
parameter_list|(
name|PVR2DCONTEXTHANDLE
name|hContext
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DGetDeviceInfo
parameter_list|(
name|PVR2DCONTEXTHANDLE
name|hContext
parameter_list|,
name|PVR2DDISPLAYINFO
modifier|*
name|pDisplayInfo
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DGetScreenMode
parameter_list|(
name|PVR2DCONTEXTHANDLE
name|hContext
parameter_list|,
name|PVR2DFORMAT
modifier|*
name|pFormat
parameter_list|,
name|long
modifier|*
name|plWidth
parameter_list|,
name|long
modifier|*
name|plHeight
parameter_list|,
name|long
modifier|*
name|plStride
parameter_list|,
name|int
modifier|*
name|piRefreshRate
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DGetFrameBuffer
parameter_list|(
name|PVR2DCONTEXTHANDLE
name|hContext
parameter_list|,
name|int
name|nHeap
parameter_list|,
name|PVR2DMEMINFO
modifier|*
modifier|*
name|ppsMemInfo
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DMemAlloc
parameter_list|(
name|PVR2DCONTEXTHANDLE
name|hContext
parameter_list|,
name|unsigned
name|long
name|ulBytes
parameter_list|,
name|unsigned
name|long
name|ulAlign
parameter_list|,
name|unsigned
name|long
name|ulFlags
parameter_list|,
name|PVR2DMEMINFO
modifier|*
modifier|*
name|ppsMemInfo
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DMemWrap
parameter_list|(
name|PVR2DCONTEXTHANDLE
name|hContext
parameter_list|,
name|void
modifier|*
name|pMem
parameter_list|,
name|unsigned
name|long
name|ulFlags
parameter_list|,
name|unsigned
name|long
name|ulBytes
parameter_list|,
name|unsigned
name|long
name|alPageAddress
index|[]
parameter_list|,
name|PVR2DMEMINFO
modifier|*
modifier|*
name|ppsMemInfo
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DMemMap
parameter_list|(
name|PVR2DCONTEXTHANDLE
name|hContext
parameter_list|,
name|unsigned
name|long
name|ulFlags
parameter_list|,
name|void
modifier|*
name|hPrivateMapData
parameter_list|,
name|PVR2DMEMINFO
modifier|*
modifier|*
name|ppsDstMem
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DMemFree
parameter_list|(
name|PVR2DCONTEXTHANDLE
name|hContext
parameter_list|,
name|PVR2DMEMINFO
modifier|*
name|psMemInfo
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DBlt
parameter_list|(
name|PVR2DCONTEXTHANDLE
name|hContext
parameter_list|,
name|PVR2DBLTINFO
modifier|*
name|pBltInfo
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DBltClipped
parameter_list|(
name|PVR2DCONTEXTHANDLE
name|hContext
parameter_list|,
name|PVR2DBLTINFO
modifier|*
name|pBltInfo
parameter_list|,
name|unsigned
name|long
name|ulNumClipRects
parameter_list|,
name|PVR2DRECT
modifier|*
name|pClipRects
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DQueryBlitsComplete
parameter_list|(
name|PVR2DCONTEXTHANDLE
name|hContext
parameter_list|,
name|PVR2DMEMINFO
modifier|*
name|pMemInfo
parameter_list|,
name|unsigned
name|int
name|uiWaitForComplete
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DSetPresentBltProperties
parameter_list|(
name|PVR2DCONTEXTHANDLE
name|hContext
parameter_list|,
name|unsigned
name|long
name|ulPropertyMask
parameter_list|,
name|long
name|lSrcStride
parameter_list|,
name|unsigned
name|long
name|ulDstWidth
parameter_list|,
name|unsigned
name|long
name|ulDstHeight
parameter_list|,
name|long
name|lDstXPos
parameter_list|,
name|long
name|lDstYPos
parameter_list|,
name|unsigned
name|long
name|ulNumClipRects
parameter_list|,
name|PVR2DRECT
modifier|*
name|pClipRects
parameter_list|,
name|unsigned
name|long
name|ulSwapInterval
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DPresentBlt
parameter_list|(
name|PVR2DCONTEXTHANDLE
name|hContext
parameter_list|,
name|PVR2DMEMINFO
modifier|*
name|pMemInfo
parameter_list|,
name|long
name|lRenderID
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DCreateFlipChain
parameter_list|(
name|PVR2DCONTEXTHANDLE
name|hContext
parameter_list|,
name|unsigned
name|long
name|ulFlags
parameter_list|,
name|unsigned
name|long
name|ulNumBuffers
parameter_list|,
name|unsigned
name|long
name|ulWidth
parameter_list|,
name|unsigned
name|long
name|ulHeight
parameter_list|,
name|PVR2DFORMAT
name|eFormat
parameter_list|,
name|long
modifier|*
name|plStride
parameter_list|,
name|unsigned
name|long
modifier|*
name|pulFlipChainID
parameter_list|,
name|PVR2DFLIPCHAINHANDLE
modifier|*
name|phFlipChain
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DDestroyFlipChain
parameter_list|(
name|PVR2DCONTEXTHANDLE
name|hContext
parameter_list|,
name|PVR2DFLIPCHAINHANDLE
name|hFlipChain
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DGetFlipChainBuffers
parameter_list|(
name|PVR2DCONTEXTHANDLE
name|hContext
parameter_list|,
name|PVR2DFLIPCHAINHANDLE
name|hFlipChain
parameter_list|,
name|unsigned
name|long
modifier|*
name|pulNumBuffers
parameter_list|,
name|PVR2DMEMINFO
modifier|*
name|psMemInfo
index|[]
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DSetPresentFlipProperties
parameter_list|(
name|PVR2DCONTEXTHANDLE
name|hContext
parameter_list|,
name|PVR2DFLIPCHAINHANDLE
name|hFlipChain
parameter_list|,
name|unsigned
name|long
name|ulPropertyMask
parameter_list|,
name|long
name|lDstXPos
parameter_list|,
name|long
name|lDstYPos
parameter_list|,
name|unsigned
name|long
name|ulNumClipRects
parameter_list|,
name|PVR2DRECT
modifier|*
name|pClipRects
parameter_list|,
name|unsigned
name|long
name|ulSwapInterval
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DPresentFlip
parameter_list|(
name|PVR2DCONTEXTHANDLE
name|hContext
parameter_list|,
name|PVR2DFLIPCHAINHANDLE
name|hFlipChain
parameter_list|,
name|PVR2DMEMINFO
modifier|*
name|psMemInfo
parameter_list|,
name|long
name|lRenderID
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DGetAPIRev
parameter_list|(
name|long
modifier|*
name|lRevMajor
parameter_list|,
name|long
modifier|*
name|lRevMinor
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DLoadUseCode
parameter_list|(
specifier|const
name|PVR2DCONTEXTHANDLE
name|hContext
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|pUseCode
parameter_list|,
specifier|const
name|unsigned
name|long
name|UseCodeSize
parameter_list|,
name|PVR2D_HANDLE
modifier|*
name|pUseCodeHandle
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DFreeUseCode
parameter_list|(
specifier|const
name|PVR2DCONTEXTHANDLE
name|hContext
parameter_list|,
specifier|const
name|PVR2D_HANDLE
name|hUseCodeHandle
parameter_list|)
function_decl|;
name|PVR2D_IMPORT
name|PVR2DERROR
name|PVR2DBlt3D
parameter_list|(
specifier|const
name|PVR2DCONTEXTHANDLE
name|hContext
parameter_list|,
specifier|const
name|PPVR2D_3DBLT
name|pBlt3D
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* _PVR2D_H_ */
end_comment
begin_comment
comment|/******************************************************************************  End of file (pvr2d.h) ******************************************************************************/
end_comment
end_unit
