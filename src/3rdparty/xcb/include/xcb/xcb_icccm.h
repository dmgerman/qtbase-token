begin_unit
begin_ifndef
ifndef|#
directive|ifndef
name|__XCB_ICCCM_H__
end_ifndef
begin_define
DECL|macro|__XCB_ICCCM_H__
define|#
directive|define
name|__XCB_ICCCM_H__
end_define
begin_comment
comment|/*  * Copyright (C) 2008 Arnaud Fontaine<arnau@debian.org>  * Copyright (C) 2007-2008 Vincent Torri<vtorri@univ-evry.fr>  *  * Permission is hereby granted, free of charge, to any person  * obtaining a copy of this software and associated documentation  * files (the "Software"), to deal in the Software without  * restriction, including without limitation the rights to use, copy,  * modify, merge, publish, distribute, sublicense, and/or sell copies  * of the Software, and to permit persons to whom the Software is  * furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice shall be  * included in all copies or substantial portions of the Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY  * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF  * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  *  * Except as contained in this notice, the names of the authors or  * their institutions shall not be used in advertising or otherwise to  * promote the sale, use or other dealings in this Software without  * prior written authorization from the authors.  */
end_comment
begin_comment
comment|/**  * @defgroup xcb__icccm_t XCB ICCCM Functions  *  * These functions allow easy handling of the protocol described in the  * Inter-Client Communication Conventions Manual.  *  * @{  */
end_comment
begin_include
include|#
directive|include
file|<xcb/xcb.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef
begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/**  * @brief TextProperty reply structure.  */
typedef|typedef
struct|struct
block|{
comment|/** Store reply to avoid memory allocation, should normally not be     used directly */
DECL|member|_reply
name|xcb_get_property_reply_t
modifier|*
name|_reply
decl_stmt|;
comment|/** Encoding used */
DECL|member|encoding
name|xcb_atom_t
name|encoding
decl_stmt|;
comment|/** Length of the name field above */
DECL|member|name_len
name|uint32_t
name|name_len
decl_stmt|;
comment|/** Property value */
DECL|member|name
name|char
modifier|*
name|name
decl_stmt|;
comment|/** Format, may be 8, 16 or 32 */
DECL|member|format
name|uint8_t
name|format
decl_stmt|;
block|}
DECL|typedef|xcb_icccm_get_text_property_reply_t
name|xcb_icccm_get_text_property_reply_t
typedef|;
comment|/**  * @brief Deliver a GetProperty request to the X server.  * @param c The connection to the X server.  * @param window Window X identifier.  * @param property Property atom to get.  * @return The request cookie.  *  * Allow to get a window property, in most case you might want to use  * above functions to get an ICCCM property for a given window.  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_text_property
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|property
parameter_list|)
function_decl|;
comment|/**  * @see xcb_icccm_get_text_property()  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_text_property_unchecked
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|property
parameter_list|)
function_decl|;
comment|/**  * @brief Fill given structure with the property value of a window.  * @param c The connection to the X server.  * @param cookie TextProperty request cookie.  * @param prop TextProperty reply which is to be filled.  * @param e Error if any.  * @return Return 1 on success, 0 otherwise.  *  * If the function return 0 (failure), the content of prop is unmodified and  * therefore the structure must not be wiped.  *  * The parameter e supplied to this function must be NULL if  * xcb_icccm_get_text_property_unchecked() is used.  Otherwise, it stores  * the error if any.  prop structure members should be freed by  * xcb_icccm_get_text_property_reply_wipe().  */
name|uint8_t
name|xcb_icccm_get_text_property_reply
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_get_property_cookie_t
name|cookie
parameter_list|,
name|xcb_icccm_get_text_property_reply_t
modifier|*
name|prop
parameter_list|,
name|xcb_generic_error_t
modifier|*
modifier|*
name|e
parameter_list|)
function_decl|;
comment|/**  * @brief Wipe prop structure members previously allocated by  *        xcb_icccm_get_text_property_reply().  * @param prop prop structure whose members is going to be freed.  */
name|void
name|xcb_icccm_get_text_property_reply_wipe
parameter_list|(
name|xcb_icccm_get_text_property_reply_t
modifier|*
name|prop
parameter_list|)
function_decl|;
comment|/* WM_NAME */
comment|/**  * @brief Deliver a SetProperty request to set WM_NAME property value.  * @param c The connection to the X server.  * @param window Window X identifier.  * @param encoding Encoding used for the data passed in the name parameter, the set property will also have this encoding as its type.  * @param format Encoding format.  * @param name_len Length of name value to set.  * @param name Name value to set.  */
name|xcb_void_cookie_t
name|xcb_icccm_set_wm_name_checked
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|encoding
parameter_list|,
name|uint8_t
name|format
parameter_list|,
name|uint32_t
name|name_len
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/**  * @see xcb_icccm_set_wm_name_checked()  */
name|xcb_void_cookie_t
name|xcb_icccm_set_wm_name
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|encoding
parameter_list|,
name|uint8_t
name|format
parameter_list|,
name|uint32_t
name|name_len
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/**  * @brief Deliver a GetProperty request to the X server for WM_NAME.  * @param c The connection to the X server.  * @param window Window X identifier.  * @return The request cookie.  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_wm_name
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|)
function_decl|;
comment|/**  * @see xcb_icccm_get_wm_name()  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_wm_name_unchecked
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|)
function_decl|;
comment|/**  * @brief Fill given structure with the WM_NAME property of a window.  * @param c The connection to the X server.  * @param cookie Request cookie.  * @param prop WM_NAME property value.  * @param e Error if any.  * @see xcb_icccm_get_text_property_reply()  * @return Return 1 on success, 0 otherwise.  */
name|uint8_t
name|xcb_icccm_get_wm_name_reply
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_get_property_cookie_t
name|cookie
parameter_list|,
name|xcb_icccm_get_text_property_reply_t
modifier|*
name|prop
parameter_list|,
name|xcb_generic_error_t
modifier|*
modifier|*
name|e
parameter_list|)
function_decl|;
comment|/* WM_ICON_NAME */
comment|/**  * @brief Deliver a SetProperty request to set WM_ICON_NAME property value.  * @param c The connection to the X server.  * @param window Window X identifier.  * @param encoding Encoding used for the data passed in the name parameter, the set property will also have this encoding as its type.  * @param format Encoding format.  * @param name_len Length of name value to set.  * @param name Name value to set.  */
name|xcb_void_cookie_t
name|xcb_icccm_set_wm_icon_name_checked
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|encoding
parameter_list|,
name|uint8_t
name|format
parameter_list|,
name|uint32_t
name|name_len
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/**  * @see xcb_icccm_set_wm_icon_name_checked()  */
name|xcb_void_cookie_t
name|xcb_icccm_set_wm_icon_name
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|encoding
parameter_list|,
name|uint8_t
name|format
parameter_list|,
name|uint32_t
name|name_len
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/**  * @brief Send request to get WM_ICON_NAME property of a window.  * @param c The connection to the X server.  * @param window Window X identifier.  * @return The request cookie.  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_wm_icon_name
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|)
function_decl|;
comment|/**  * @see xcb_icccm_get_wm_icon_name()  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_wm_icon_name_unchecked
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|)
function_decl|;
comment|/**  * @brief Fill given structure with the WM_ICON_NAME property of a window.  * @param c The connection to the X server.  * @param cookie Request cookie.  * @param prop WM_ICON_NAME property value.  * @param e Error if any.  * @see xcb_icccm_get_text_property_reply()  * @return Return 1 on success, 0 otherwise.  */
name|uint8_t
name|xcb_icccm_get_wm_icon_name_reply
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_get_property_cookie_t
name|cookie
parameter_list|,
name|xcb_icccm_get_text_property_reply_t
modifier|*
name|prop
parameter_list|,
name|xcb_generic_error_t
modifier|*
modifier|*
name|e
parameter_list|)
function_decl|;
comment|/* WM_COLORMAP_WINDOWS */
comment|/**  * @brief Deliver a ChangeProperty request to set WM_COLORMAP_WINDOWS property value.  * @param c The connection to the X server.  * @param wm_colormap_windows The WM_COLORMAP_WINDOWS atom  * @param window Window X identifier.  * @param list_len Windows list len.  * @param list Windows list.  * @return The request cookie.  */
name|xcb_void_cookie_t
name|xcb_icccm_set_wm_colormap_windows_checked
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|wm_colormap_windows_atom
parameter_list|,
name|uint32_t
name|list_len
parameter_list|,
specifier|const
name|xcb_window_t
modifier|*
name|list
parameter_list|)
function_decl|;
comment|/**  * @see xcb_icccm_set_wm_colormap_windows_checked()  */
name|xcb_void_cookie_t
name|xcb_icccm_set_wm_colormap_windows
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|wm_colormap_windows_atom
parameter_list|,
name|uint32_t
name|list_len
parameter_list|,
specifier|const
name|xcb_window_t
modifier|*
name|list
parameter_list|)
function_decl|;
comment|/**  * @brief WM_COLORMAP_WINDOWS structure.  */
typedef|typedef
struct|struct
block|{
comment|/** Length of the windows list */
DECL|member|windows_len
name|uint32_t
name|windows_len
decl_stmt|;
comment|/** Windows list */
DECL|member|windows
name|xcb_window_t
modifier|*
name|windows
decl_stmt|;
comment|/** Store reply to avoid memory allocation, should normally not be     used directly */
DECL|member|_reply
name|xcb_get_property_reply_t
modifier|*
name|_reply
decl_stmt|;
block|}
DECL|typedef|xcb_icccm_get_wm_colormap_windows_reply_t
name|xcb_icccm_get_wm_colormap_windows_reply_t
typedef|;
comment|/**  * @brief Send request to get WM_COLORMAP_WINDOWS property of a given window.  * @param c The connection to the X server.  * @param window Window X identifier.  * @return The request cookie.  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_wm_colormap_windows
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|wm_colormap_windows_atom
parameter_list|)
function_decl|;
comment|/**  * @see xcb_icccm_get_wm_colormap_windows()  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_wm_colormap_windows_unchecked
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|wm_colormap_windows_atom
parameter_list|)
function_decl|;
comment|/**  * @brief Fill the given structure with the WM_COLORMAP_WINDOWS property of a window.  * @param reply The reply of the GetProperty request.  * @param colormap_windows WM_COLORMAP property value.  * @return Return 1 on success, 0 otherwise.  *  * protocols structure members should be freed by  * xcb_icccm_get_wm_protocols_reply_wipe().  */
name|uint8_t
name|xcb_icccm_get_wm_colormap_windows_from_reply
parameter_list|(
name|xcb_get_property_reply_t
modifier|*
name|reply
parameter_list|,
name|xcb_icccm_get_wm_colormap_windows_reply_t
modifier|*
name|colormap_windows
parameter_list|)
function_decl|;
comment|/**  * @brief Fill the given structure with the WM_COLORMAP_WINDOWS property of a window.  * @param c The connection to the X server.  * @param cookie Request cookie.  * @param protocols WM_COLORMAP_WINDOWS property value.  * @param e Error if any.  * @return Return 1 on success, 0 otherwise.  *  * The parameter e supplied to this function must be NULL if  * xcb_icccm_get_wm_colormap_windows_unchecked() is used.  Otherwise, it  * stores the error if any. protocols structure members should be  * freed by xcb_icccm_get_wm_colormap_windows_reply_wipe().  */
name|uint8_t
name|xcb_icccm_get_wm_colormap_windows_reply
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_get_property_cookie_t
name|cookie
parameter_list|,
name|xcb_icccm_get_wm_colormap_windows_reply_t
modifier|*
name|windows
parameter_list|,
name|xcb_generic_error_t
modifier|*
modifier|*
name|e
parameter_list|)
function_decl|;
comment|/**  * @brief Wipe protocols structure members previously allocated by  *        xcb_icccm_get_wm_colormap_windows_reply().  * @param windows windows structure whose members is going to be freed.  */
name|void
name|xcb_icccm_get_wm_colormap_windows_reply_wipe
parameter_list|(
name|xcb_icccm_get_wm_colormap_windows_reply_t
modifier|*
name|windows
parameter_list|)
function_decl|;
comment|/* WM_CLIENT_MACHINE */
comment|/**  * @brief Deliver a SetProperty request to set WM_CLIENT_MACHINE property value.  * @param c The connection to the X server.  * @param window Window X identifier.  * @param encoding Encoding used for the data passed in the name parameter, the set property will also have this encoding as its type.  * @param format Encoding format.  * @param name_len Length of name value to set.  * @param name Name value to set.  */
name|xcb_void_cookie_t
name|xcb_icccm_set_wm_client_machine_checked
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|encoding
parameter_list|,
name|uint8_t
name|format
parameter_list|,
name|uint32_t
name|name_len
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/**  * @see xcb_icccm_set_wm_client_machine_checked()  */
name|xcb_void_cookie_t
name|xcb_icccm_set_wm_client_machine
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|encoding
parameter_list|,
name|uint8_t
name|format
parameter_list|,
name|uint32_t
name|name_len
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/**  * @brief Send request to get WM_CLIENT_MACHINE property of a window.  * @param c The connection to the X server.  * @param window Window X identifier.  * @return The request cookie.  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_wm_client_machine
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|)
function_decl|;
comment|/**  * @see xcb_icccm_get_wm_client_machine()  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_wm_client_machine_unchecked
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|)
function_decl|;
comment|/**  * @brief Fill given structure with the WM_CLIENT_MACHINE property of a window.  * @param c The connection to the X server.  * @param cookie Request cookie.  * @param prop WM_CLIENT_MACHINE property value.  * @param e Error if any.  * @see xcb_icccm_get_text_property_reply()  * @return Return 1 on success, 0 otherwise.  */
name|uint8_t
name|xcb_icccm_get_wm_client_machine_reply
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_get_property_cookie_t
name|cookie
parameter_list|,
name|xcb_icccm_get_text_property_reply_t
modifier|*
name|prop
parameter_list|,
name|xcb_generic_error_t
modifier|*
modifier|*
name|e
parameter_list|)
function_decl|;
comment|/* WM_CLASS */
comment|/**  * @brief WM_CLASS hint structure  */
comment|/**  * @brief Deliver a SetProperty request to set WM_CLASS property value.  *  * WM_CLASS string is a concatenation of the instance and class name  * strings respectively (including null character).  *  * @param c The connection to the X server.  * @param window Window X identifier.  * @param class_len Length of WM_CLASS string.  * @param class_name WM_CLASS string.  * @return The request cookie.  */
name|xcb_void_cookie_t
name|xcb_icccm_set_wm_class_checked
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|uint32_t
name|class_len
parameter_list|,
specifier|const
name|char
modifier|*
name|class_name
parameter_list|)
function_decl|;
comment|/**  * @see xcb_icccm_set_wm_class_checked()  */
name|xcb_void_cookie_t
name|xcb_icccm_set_wm_class
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|uint32_t
name|class_len
parameter_list|,
specifier|const
name|char
modifier|*
name|class_name
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
block|{
comment|/** Instance name */
DECL|member|instance_name
name|char
modifier|*
name|instance_name
decl_stmt|;
comment|/** Class of application */
DECL|member|class_name
name|char
modifier|*
name|class_name
decl_stmt|;
comment|/** Store reply to avoid memory allocation, should normally not be     used directly */
DECL|member|_reply
name|xcb_get_property_reply_t
modifier|*
name|_reply
decl_stmt|;
block|}
DECL|typedef|xcb_icccm_get_wm_class_reply_t
name|xcb_icccm_get_wm_class_reply_t
typedef|;
comment|/**  * @brief Deliver a GetProperty request to the X server for WM_CLASS.  * @param c The connection to the X server.  * @param window Window X identifier.  * @return The request cookie.  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_wm_class
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|)
function_decl|;
comment|/**  * @see xcb_icccm_get_wm_class()  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_wm_class_unchecked
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|)
function_decl|;
comment|/**  * @brief Fill give structure with the WM_CLASS property of a window.  * @param prop The property structure to fill.  * @param reply The property request reply.  * @return Return 1 on success, 0 otherwise.  */
name|uint8_t
name|xcb_icccm_get_wm_class_from_reply
parameter_list|(
name|xcb_icccm_get_wm_class_reply_t
modifier|*
name|prop
parameter_list|,
name|xcb_get_property_reply_t
modifier|*
name|reply
parameter_list|)
function_decl|;
comment|/**  * @brief Fill given structure with the WM_CLASS property of a window.  * @param c The connection to the X server.  * @param cookie Request cookie.  * @param prop WM_CLASS property value.  * @param e Error if any.  * @return Return 1 on success, 0 otherwise.  *  * The parameter e supplied to this function must be NULL if  * xcb_icccm_get_wm_class_unchecked() is used.  Otherwise, it stores the  * error if any. prop structure members should be freed by  * xcb_icccm_get_wm_class_reply_wipe().  */
name|uint8_t
name|xcb_icccm_get_wm_class_reply
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_get_property_cookie_t
name|cookie
parameter_list|,
name|xcb_icccm_get_wm_class_reply_t
modifier|*
name|prop
parameter_list|,
name|xcb_generic_error_t
modifier|*
modifier|*
name|e
parameter_list|)
function_decl|;
comment|/**  * @brief Wipe prop structure members previously allocated by  *        xcb_icccm_get_wm_class_reply().  * @param prop prop structure whose members is going to be freed.  */
name|void
name|xcb_icccm_get_wm_class_reply_wipe
parameter_list|(
name|xcb_icccm_get_wm_class_reply_t
modifier|*
name|prop
parameter_list|)
function_decl|;
comment|/* WM_TRANSIENT_FOR */
comment|/**  * @brief Deliver a SetProperty request to set WM_TRANSIENT_FOR property value.  * @param c The connection to the X server.  * @param window Window X identifier.  * @param transient_for_window The WM_TRANSIENT_FOR window X identifier.  * @return The request cookie.  */
name|xcb_void_cookie_t
name|xcb_icccm_set_wm_transient_for_checked
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_window_t
name|transient_for_window
parameter_list|)
function_decl|;
comment|/**  * @see xcb_icccm_set_wm_transient_for  */
name|xcb_void_cookie_t
name|xcb_icccm_set_wm_transient_for
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_window_t
name|transient_for_window
parameter_list|)
function_decl|;
comment|/**  * @brief Send request to get WM_TRANSIENT_FOR property of a window.  * @param c The connection to the X server  * @param window Window X identifier.  * @return The request cookie.  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_wm_transient_for
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|)
function_decl|;
comment|/**  * @see xcb_icccm_get_wm_transient_for_unchecked()  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_wm_transient_for_unchecked
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|)
function_decl|;
comment|/**  * @brief Fill given window pointer with the WM_TRANSIENT_FOR property of a window.  * @param prop WM_TRANSIENT_FOR property value.  * @param reply The get property request reply.  * @return Return 1 on success, 0 otherwise.  */
name|uint8_t
name|xcb_icccm_get_wm_transient_for_from_reply
parameter_list|(
name|xcb_window_t
modifier|*
name|prop
parameter_list|,
name|xcb_get_property_reply_t
modifier|*
name|reply
parameter_list|)
function_decl|;
comment|/**  * @brief Fill given structure with the WM_TRANSIENT_FOR property of a window.  * @param c The connection to the X server.  * @param cookie Request cookie.  * @param prop WM_TRANSIENT_FOR property value.  * @param e Error if any.  * @return Return 1 on success, 0 otherwise.  *  * The parameter e supplied to this function must be NULL if  * xcb_icccm_get_wm_transient_for_unchecked() is used.  Otherwise, it stores  * the error if any.  */
name|uint8_t
name|xcb_icccm_get_wm_transient_for_reply
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_get_property_cookie_t
name|cookie
parameter_list|,
name|xcb_window_t
modifier|*
name|prop
parameter_list|,
name|xcb_generic_error_t
modifier|*
modifier|*
name|e
parameter_list|)
function_decl|;
comment|/* WM_SIZE_HINTS */
typedef|typedef
enum|enum
block|{
DECL|enumerator|XCB_ICCCM_SIZE_HINT_US_POSITION
name|XCB_ICCCM_SIZE_HINT_US_POSITION
init|=
literal|1
operator|<<
literal|0
block|,
DECL|enumerator|XCB_ICCCM_SIZE_HINT_US_SIZE
name|XCB_ICCCM_SIZE_HINT_US_SIZE
init|=
literal|1
operator|<<
literal|1
block|,
DECL|enumerator|XCB_ICCCM_SIZE_HINT_P_POSITION
name|XCB_ICCCM_SIZE_HINT_P_POSITION
init|=
literal|1
operator|<<
literal|2
block|,
DECL|enumerator|XCB_ICCCM_SIZE_HINT_P_SIZE
name|XCB_ICCCM_SIZE_HINT_P_SIZE
init|=
literal|1
operator|<<
literal|3
block|,
DECL|enumerator|XCB_ICCCM_SIZE_HINT_P_MIN_SIZE
name|XCB_ICCCM_SIZE_HINT_P_MIN_SIZE
init|=
literal|1
operator|<<
literal|4
block|,
DECL|enumerator|XCB_ICCCM_SIZE_HINT_P_MAX_SIZE
name|XCB_ICCCM_SIZE_HINT_P_MAX_SIZE
init|=
literal|1
operator|<<
literal|5
block|,
DECL|enumerator|XCB_ICCCM_SIZE_HINT_P_RESIZE_INC
name|XCB_ICCCM_SIZE_HINT_P_RESIZE_INC
init|=
literal|1
operator|<<
literal|6
block|,
DECL|enumerator|XCB_ICCCM_SIZE_HINT_P_ASPECT
name|XCB_ICCCM_SIZE_HINT_P_ASPECT
init|=
literal|1
operator|<<
literal|7
block|,
DECL|enumerator|XCB_ICCCM_SIZE_HINT_BASE_SIZE
name|XCB_ICCCM_SIZE_HINT_BASE_SIZE
init|=
literal|1
operator|<<
literal|8
block|,
DECL|enumerator|XCB_ICCCM_SIZE_HINT_P_WIN_GRAVITY
name|XCB_ICCCM_SIZE_HINT_P_WIN_GRAVITY
init|=
literal|1
operator|<<
literal|9
block|}
DECL|typedef|xcb_icccm_size_hints_flags_t
name|xcb_icccm_size_hints_flags_t
typedef|;
comment|/**  * @brief Size hints structure.  */
typedef|typedef
struct|struct
block|{
comment|/** User specified flags */
DECL|member|flags
name|uint32_t
name|flags
decl_stmt|;
comment|/** User-specified position */
DECL|member|x
DECL|member|y
name|int32_t
name|x
decl_stmt|,
name|y
decl_stmt|;
comment|/** User-specified size */
DECL|member|width
DECL|member|height
name|int32_t
name|width
decl_stmt|,
name|height
decl_stmt|;
comment|/** Program-specified minimum size */
DECL|member|min_width
DECL|member|min_height
name|int32_t
name|min_width
decl_stmt|,
name|min_height
decl_stmt|;
comment|/** Program-specified maximum size */
DECL|member|max_width
DECL|member|max_height
name|int32_t
name|max_width
decl_stmt|,
name|max_height
decl_stmt|;
comment|/** Program-specified resize increments */
DECL|member|width_inc
DECL|member|height_inc
name|int32_t
name|width_inc
decl_stmt|,
name|height_inc
decl_stmt|;
comment|/** Program-specified minimum aspect ratios */
DECL|member|min_aspect_num
DECL|member|min_aspect_den
name|int32_t
name|min_aspect_num
decl_stmt|,
name|min_aspect_den
decl_stmt|;
comment|/** Program-specified maximum aspect ratios */
DECL|member|max_aspect_num
DECL|member|max_aspect_den
name|int32_t
name|max_aspect_num
decl_stmt|,
name|max_aspect_den
decl_stmt|;
comment|/** Program-specified base size */
DECL|member|base_width
DECL|member|base_height
name|int32_t
name|base_width
decl_stmt|,
name|base_height
decl_stmt|;
comment|/** Program-specified window gravity */
DECL|member|win_gravity
name|uint32_t
name|win_gravity
decl_stmt|;
block|}
DECL|typedef|xcb_size_hints_t
name|xcb_size_hints_t
typedef|;
comment|/** Number of elements in this structure */
DECL|macro|XCB_ICCCM_NUM_WM_SIZE_HINTS_ELEMENTS
define|#
directive|define
name|XCB_ICCCM_NUM_WM_SIZE_HINTS_ELEMENTS
value|18
comment|/**  * @brief Set size hints to a given position.  * @param hints SIZE_HINTS structure.  * @param user_specified Is the size user-specified?  * @param x The X position.  * @param y The Y position.  */
name|void
name|xcb_icccm_size_hints_set_position
parameter_list|(
name|xcb_size_hints_t
modifier|*
name|hints
parameter_list|,
name|int
name|user_specified
parameter_list|,
name|int32_t
name|x
parameter_list|,
name|int32_t
name|y
parameter_list|)
function_decl|;
comment|/**  * @brief Set size hints to a given size.  * @param hints SIZE_HINTS structure.  * @param user_specified is the size user-specified?  * @param width The width.  * @param height The height.  */
name|void
name|xcb_icccm_size_hints_set_size
parameter_list|(
name|xcb_size_hints_t
modifier|*
name|hints
parameter_list|,
name|int
name|user_specified
parameter_list|,
name|int32_t
name|width
parameter_list|,
name|int32_t
name|height
parameter_list|)
function_decl|;
comment|/**  * @brief Set size hints to a given minimum size.  * @param hints SIZE_HINTS structure.  * @param width The minimum width.  * @param height The minimum height.  */
name|void
name|xcb_icccm_size_hints_set_min_size
parameter_list|(
name|xcb_size_hints_t
modifier|*
name|hints
parameter_list|,
name|int32_t
name|min_width
parameter_list|,
name|int32_t
name|min_height
parameter_list|)
function_decl|;
comment|/**  * @brief Set size hints to a given maximum size.  * @param hints SIZE_HINTS structure.  * @param width The maximum width.  * @param height The maximum height.  */
name|void
name|xcb_icccm_size_hints_set_max_size
parameter_list|(
name|xcb_size_hints_t
modifier|*
name|hints
parameter_list|,
name|int32_t
name|max_width
parameter_list|,
name|int32_t
name|max_height
parameter_list|)
function_decl|;
comment|/**  * @brief Set size hints to a given resize increments.  * @param hints SIZE_HINTS structure.  * @param width The resize increments width.  * @param height The resize increments height.  */
name|void
name|xcb_icccm_size_hints_set_resize_inc
parameter_list|(
name|xcb_size_hints_t
modifier|*
name|hints
parameter_list|,
name|int32_t
name|width_inc
parameter_list|,
name|int32_t
name|height_inc
parameter_list|)
function_decl|;
comment|/**  * @brief Set size hints to a given aspect ratios.  * @param hints SIZE_HINTS structure.  * @param min_aspect_num The minimum aspect ratios for the width.  * @param min_aspect_den The minimum aspect ratios for the height.  * @param max_aspect_num The maximum aspect ratios for the width.  * @param max_aspect_den The maximum aspect ratios for the height.  */
name|void
name|xcb_icccm_size_hints_set_aspect
parameter_list|(
name|xcb_size_hints_t
modifier|*
name|hints
parameter_list|,
name|int32_t
name|min_aspect_num
parameter_list|,
name|int32_t
name|min_aspect_den
parameter_list|,
name|int32_t
name|max_aspect_num
parameter_list|,
name|int32_t
name|max_aspect_den
parameter_list|)
function_decl|;
comment|/**  * @brief Set size hints to a given base size.  * @param hints SIZE_HINTS structure.  * @param base_width Base width.  * @param base_height Base height.  */
name|void
name|xcb_icccm_size_hints_set_base_size
parameter_list|(
name|xcb_size_hints_t
modifier|*
name|hints
parameter_list|,
name|int32_t
name|base_width
parameter_list|,
name|int32_t
name|base_height
parameter_list|)
function_decl|;
comment|/**  * @brief Set size hints to a given window gravity.  * @param hints SIZE_HINTS structure.  * @param win_gravity Window gravity value.  */
name|void
name|xcb_icccm_size_hints_set_win_gravity
parameter_list|(
name|xcb_size_hints_t
modifier|*
name|hints
parameter_list|,
name|xcb_gravity_t
name|win_gravity
parameter_list|)
function_decl|;
comment|/**  * @brief Deliver a ChangeProperty request to set a value to a given property.  * @param c The connection to the X server.  * @param window Window X identifier.  * @param property Property to set value for.  * @param hints Hints value to set.  */
name|xcb_void_cookie_t
name|xcb_icccm_set_wm_size_hints_checked
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|property
parameter_list|,
name|xcb_size_hints_t
modifier|*
name|hints
parameter_list|)
function_decl|;
comment|/**  * @see xcb_icccm_set_wm_size_hints_checked()  */
name|xcb_void_cookie_t
name|xcb_icccm_set_wm_size_hints
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|property
parameter_list|,
name|xcb_size_hints_t
modifier|*
name|hints
parameter_list|)
function_decl|;
comment|/**  * @brief Send request to get size hints structure for the named property.  * @param c The connection to the X server.  * @param window Window X identifier.  * @param property Specify the property name.  * @return The request cookie.  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_wm_size_hints
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|property
parameter_list|)
function_decl|;
comment|/**  * @see xcb_icccm_get_wm_size_hints()  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_wm_size_hints_unchecked
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|property
parameter_list|)
function_decl|;
comment|/**  * @brief Fill given structure with the size hints of the named property.  * @param c The connection to the X server.  * @param cookie Request cookie.  * @param hints Size hints structure.  * @param e Error if any.  * @return Return 1 on success, 0 otherwise.  *  * The parameter e supplied to this function must be NULL if  * xcb_icccm_get_wm_size_hints_unchecked() is used.  Otherwise, it stores  * the error if any. The returned pointer should be freed.  */
name|uint8_t
name|xcb_icccm_get_wm_size_hints_reply
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_get_property_cookie_t
name|cookie
parameter_list|,
name|xcb_size_hints_t
modifier|*
name|hints
parameter_list|,
name|xcb_generic_error_t
modifier|*
modifier|*
name|e
parameter_list|)
function_decl|;
comment|/* WM_NORMAL_HINTS */
comment|/**  * @brief Deliver a ChangeProperty request to set WM_NORMAL_HINTS property value.  * @param c The connection to the X server.  * @param window Window X identifier.  * @param hints Hints value to set.  */
name|xcb_void_cookie_t
name|xcb_icccm_set_wm_normal_hints_checked
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_size_hints_t
modifier|*
name|hints
parameter_list|)
function_decl|;
comment|/**  * @see xcb_icccm_set_wm_normal_hints_checked()  */
name|xcb_void_cookie_t
name|xcb_icccm_set_wm_normal_hints
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_size_hints_t
modifier|*
name|hints
parameter_list|)
function_decl|;
comment|/**  * @brief Send request to get WM_NORMAL_HINTS property of a window.  * @param c The connection to the X server.  * @param window Window X identifier.  * @return The request cookie.  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_wm_normal_hints
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|)
function_decl|;
comment|/**  * @see xcb_icccm_get_wm_normal_hints()  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_wm_normal_hints_unchecked
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|)
function_decl|;
comment|/**  * @brief Fill given structure with the WM_NORMAL_HINTS property of a window.  * @param hints WM_NORMAL_HINTS property value.  * @param reply The get property request reply.  * @return Return 1 on success, 0 otherwise.  */
name|uint8_t
name|xcb_icccm_get_wm_size_hints_from_reply
parameter_list|(
name|xcb_size_hints_t
modifier|*
name|hints
parameter_list|,
name|xcb_get_property_reply_t
modifier|*
name|reply
parameter_list|)
function_decl|;
comment|/**  * @brief Fill given structure with the WM_NORMAL_HINTS property of a window.  * @param c The connection to the X server.  * @param cookie Request cookie.  * @param hints WM_NORMAL_HINTS property value.  * @param e Error if any.  * @return Return 1 on success, 0 otherwise.  *  * The parameter e supplied to this function must be NULL if  * xcb_icccm_get_wm_normal_hints_unchecked() is used.  Otherwise, it stores  * the error if any. The returned pointer should be freed.  */
name|uint8_t
name|xcb_icccm_get_wm_normal_hints_reply
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_get_property_cookie_t
name|cookie
parameter_list|,
name|xcb_size_hints_t
modifier|*
name|hints
parameter_list|,
name|xcb_generic_error_t
modifier|*
modifier|*
name|e
parameter_list|)
function_decl|;
comment|/* WM_HINTS */
comment|/**  * @brief WM hints structure (may be extended in the future).  */
typedef|typedef
struct|struct
block|{
comment|/** Marks which fields in this structure are defined */
DECL|member|flags
name|int32_t
name|flags
decl_stmt|;
comment|/** Does this application rely on the window manager to get keyboard     input? */
DECL|member|input
name|uint32_t
name|input
decl_stmt|;
comment|/** See below */
DECL|member|initial_state
name|int32_t
name|initial_state
decl_stmt|;
comment|/** Pixmap to be used as icon */
DECL|member|icon_pixmap
name|xcb_pixmap_t
name|icon_pixmap
decl_stmt|;
comment|/** Window to be used as icon */
DECL|member|icon_window
name|xcb_window_t
name|icon_window
decl_stmt|;
comment|/** Initial position of icon */
DECL|member|icon_x
DECL|member|icon_y
name|int32_t
name|icon_x
decl_stmt|,
name|icon_y
decl_stmt|;
comment|/** Icon mask bitmap */
DECL|member|icon_mask
name|xcb_pixmap_t
name|icon_mask
decl_stmt|;
comment|/* Identifier of related window group */
DECL|member|window_group
name|xcb_window_t
name|window_group
decl_stmt|;
block|}
DECL|typedef|xcb_icccm_wm_hints_t
name|xcb_icccm_wm_hints_t
typedef|;
comment|/** Number of elements in this structure */
DECL|macro|XCB_ICCCM_NUM_WM_HINTS_ELEMENTS
define|#
directive|define
name|XCB_ICCCM_NUM_WM_HINTS_ELEMENTS
value|9
comment|/**  * @brief WM_HINTS window states.  */
typedef|typedef
enum|enum
block|{
DECL|enumerator|XCB_ICCCM_WM_STATE_WITHDRAWN
name|XCB_ICCCM_WM_STATE_WITHDRAWN
init|=
literal|0
block|,
DECL|enumerator|XCB_ICCCM_WM_STATE_NORMAL
name|XCB_ICCCM_WM_STATE_NORMAL
init|=
literal|1
block|,
DECL|enumerator|XCB_ICCCM_WM_STATE_ICONIC
name|XCB_ICCCM_WM_STATE_ICONIC
init|=
literal|3
block|}
DECL|typedef|xcb_icccm_wm_state_t
name|xcb_icccm_wm_state_t
typedef|;
typedef|typedef
enum|enum
block|{
DECL|enumerator|XCB_ICCCM_WM_HINT_INPUT
name|XCB_ICCCM_WM_HINT_INPUT
init|=
operator|(
literal|1L
operator|<<
literal|0
operator|)
block|,
DECL|enumerator|XCB_ICCCM_WM_HINT_STATE
name|XCB_ICCCM_WM_HINT_STATE
init|=
operator|(
literal|1L
operator|<<
literal|1
operator|)
block|,
DECL|enumerator|XCB_ICCCM_WM_HINT_ICON_PIXMAP
name|XCB_ICCCM_WM_HINT_ICON_PIXMAP
init|=
operator|(
literal|1L
operator|<<
literal|2
operator|)
block|,
DECL|enumerator|XCB_ICCCM_WM_HINT_ICON_WINDOW
name|XCB_ICCCM_WM_HINT_ICON_WINDOW
init|=
operator|(
literal|1L
operator|<<
literal|3
operator|)
block|,
DECL|enumerator|XCB_ICCCM_WM_HINT_ICON_POSITION
name|XCB_ICCCM_WM_HINT_ICON_POSITION
init|=
operator|(
literal|1L
operator|<<
literal|4
operator|)
block|,
DECL|enumerator|XCB_ICCCM_WM_HINT_ICON_MASK
name|XCB_ICCCM_WM_HINT_ICON_MASK
init|=
operator|(
literal|1L
operator|<<
literal|5
operator|)
block|,
DECL|enumerator|XCB_ICCCM_WM_HINT_WINDOW_GROUP
name|XCB_ICCCM_WM_HINT_WINDOW_GROUP
init|=
operator|(
literal|1L
operator|<<
literal|6
operator|)
block|,
DECL|enumerator|XCB_ICCCM_WM_HINT_X_URGENCY
name|XCB_ICCCM_WM_HINT_X_URGENCY
init|=
operator|(
literal|1L
operator|<<
literal|8
operator|)
block|}
DECL|typedef|xcb_icccm_wm_t
name|xcb_icccm_wm_t
typedef|;
DECL|macro|XCB_ICCCM_WM_ALL_HINTS
define|#
directive|define
name|XCB_ICCCM_WM_ALL_HINTS
value|(XCB_ICCCM_WM_HINT_INPUT | XCB_ICCCM_WM_HINT_STATE | \                                 XCB_ICCCM_WM_HINT_ICON_PIXMAP | XCB_ICCCM_WM_HINT_ICON_WINDOW | \                                 XCB_ICCCM_WM_HINT_ICON_POSITION | XCB_ICCCM_WM_HINT_ICON_MASK | \                                 XCB_ICCCM_WM_HINT_WINDOW_GROUP)
comment|/**  * @brief Get urgency hint.  * @param hints WM_HINTS structure.  * @return Urgency hint value.  */
name|uint32_t
name|xcb_icccm_wm_hints_get_urgency
parameter_list|(
name|xcb_icccm_wm_hints_t
modifier|*
name|hints
parameter_list|)
function_decl|;
comment|/**  * @brief Set input focus.  * @param hints WM_HINTS structure.  * @param input Input focus.  */
name|void
name|xcb_icccm_wm_hints_set_input
parameter_list|(
name|xcb_icccm_wm_hints_t
modifier|*
name|hints
parameter_list|,
name|uint8_t
name|input
parameter_list|)
function_decl|;
comment|/**  * @brief Set hints state to 'iconic'.  * @param hints WM_HINTS structure.  */
name|void
name|xcb_icccm_wm_hints_set_iconic
parameter_list|(
name|xcb_icccm_wm_hints_t
modifier|*
name|hints
parameter_list|)
function_decl|;
comment|/**  * @brief Set hints state to 'normal'.  * @param hints WM_HINTS structure.  */
name|void
name|xcb_icccm_wm_hints_set_normal
parameter_list|(
name|xcb_icccm_wm_hints_t
modifier|*
name|hints
parameter_list|)
function_decl|;
comment|/**  * @brief Set hints state to 'withdrawn'.  * @param hints WM_HINTS structure.  */
name|void
name|xcb_icccm_wm_hints_set_withdrawn
parameter_list|(
name|xcb_icccm_wm_hints_t
modifier|*
name|hints
parameter_list|)
function_decl|;
comment|/**  * @brief Set hints state to none.  * @param hints WM_HINTS structure.  */
name|void
name|xcb_icccm_wm_hints_set_none
parameter_list|(
name|xcb_icccm_wm_hints_t
modifier|*
name|hints
parameter_list|)
function_decl|;
comment|/**  * @brief Set pixmap to be used as icon.  * @param hints WM_HINTS structure.  * @param icon_pixmap Pixmap.  */
name|void
name|xcb_icccm_wm_hints_set_icon_pixmap
parameter_list|(
name|xcb_icccm_wm_hints_t
modifier|*
name|hints
parameter_list|,
name|xcb_pixmap_t
name|icon_pixmap
parameter_list|)
function_decl|;
comment|/**  * @brief Set icon mask bitmap.  * @param hints WM_HINTS structure.  * @param icon_mask Pixmap.  */
name|void
name|xcb_icccm_wm_hints_set_icon_mask
parameter_list|(
name|xcb_icccm_wm_hints_t
modifier|*
name|hints
parameter_list|,
name|xcb_pixmap_t
name|icon_mask
parameter_list|)
function_decl|;
comment|/**  * @brief Set window identifier to be used as icon.  * @param hints WM_HINTS structure.  * @param icon_window Window X identifier.  */
name|void
name|xcb_icccm_wm_hints_set_icon_window
parameter_list|(
name|xcb_icccm_wm_hints_t
modifier|*
name|hints
parameter_list|,
name|xcb_window_t
name|icon_window
parameter_list|)
function_decl|;
comment|/**  * @brief Set identifier of related window group.  * @param hints WM_HINTS structure.  * @param window_group Window X identifier.  */
name|void
name|xcb_icccm_wm_hints_set_window_group
parameter_list|(
name|xcb_icccm_wm_hints_t
modifier|*
name|hints
parameter_list|,
name|xcb_window_t
name|window_group
parameter_list|)
function_decl|;
comment|/**  * @brief Set urgency hints flag.  * @param hints WM_HINTS structure.  */
name|void
name|xcb_icccm_wm_hints_set_urgency
parameter_list|(
name|xcb_icccm_wm_hints_t
modifier|*
name|hints
parameter_list|)
function_decl|;
comment|/**  * @brief Deliver a SetProperty request to set WM_HINTS property value.  * @param c The connection to the X server.  * @param window Window X identifier.  * @param hints Hints value to set.  */
name|xcb_void_cookie_t
name|xcb_icccm_set_wm_hints_checked
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_icccm_wm_hints_t
modifier|*
name|hints
parameter_list|)
function_decl|;
comment|/**  * @see xcb_icccm_set_wm_hints_checked()  */
name|xcb_void_cookie_t
name|xcb_icccm_set_wm_hints
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_icccm_wm_hints_t
modifier|*
name|hints
parameter_list|)
function_decl|;
comment|/**  * @brief Send request to get WM_HINTS property of a window.  * @param c The connection to the X server.  * @param window Window X identifier.  * @return The request cookie.  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_wm_hints
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|)
function_decl|;
comment|/**  * @see xcb_icccm_get_wm_hints()  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_wm_hints_unchecked
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|)
function_decl|;
comment|/**  * @brief Fill given structure with the WM_HINTS property of a window.  * @param hints WM_HINTS property value.  * @param reply The get property request reply.  * @return Return 1 on success, 0 otherwise.  */
name|uint8_t
name|xcb_icccm_get_wm_hints_from_reply
parameter_list|(
name|xcb_icccm_wm_hints_t
modifier|*
name|hints
parameter_list|,
name|xcb_get_property_reply_t
modifier|*
name|reply
parameter_list|)
function_decl|;
comment|/**  * @brief Fill given structure with the WM_HINTS property of a window.  * @param c The connection to the X server.  * @param cookie Request cookie.  * @param hints WM_HINTS property value.  * @param e Error if any.  * @return Return 1 on success, 0 otherwise.  *  * The parameter e supplied to this function must be NULL if  * xcb_icccm_get_wm_hints_unchecked() is used.  Otherwise, it stores the  * error if any. The returned pointer should be freed.  */
name|uint8_t
name|xcb_icccm_get_wm_hints_reply
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_get_property_cookie_t
name|cookie
parameter_list|,
name|xcb_icccm_wm_hints_t
modifier|*
name|hints
parameter_list|,
name|xcb_generic_error_t
modifier|*
modifier|*
name|e
parameter_list|)
function_decl|;
comment|/* WM_PROTOCOLS */
comment|/**  * @brief Deliver a SetProperty request to set WM_PROTOCOLS property value.  * @param c The connection to the X server.  * @param wm_protocols The WM_PROTOCOLS atom.  * @param window Window X identifier.  * @param list_len Atom list len.  * @param list Atom list.  */
name|xcb_void_cookie_t
name|xcb_icccm_set_wm_protocols_checked
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|wm_protocols
parameter_list|,
name|uint32_t
name|list_len
parameter_list|,
name|xcb_atom_t
modifier|*
name|list
parameter_list|)
function_decl|;
comment|/**  * @see xcb_icccm_set_wm_protocols_checked()  */
name|xcb_void_cookie_t
name|xcb_icccm_set_wm_protocols
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|wm_protocols
parameter_list|,
name|uint32_t
name|list_len
parameter_list|,
name|xcb_atom_t
modifier|*
name|list
parameter_list|)
function_decl|;
comment|/**  * @brief WM_PROTOCOLS structure.  */
typedef|typedef
struct|struct
block|{
comment|/** Length of the atoms list */
DECL|member|atoms_len
name|uint32_t
name|atoms_len
decl_stmt|;
comment|/** Atoms list */
DECL|member|atoms
name|xcb_atom_t
modifier|*
name|atoms
decl_stmt|;
comment|/** Store reply to avoid memory allocation, should normally not be       used directly */
DECL|member|_reply
name|xcb_get_property_reply_t
modifier|*
name|_reply
decl_stmt|;
block|}
DECL|typedef|xcb_icccm_get_wm_protocols_reply_t
name|xcb_icccm_get_wm_protocols_reply_t
typedef|;
comment|/**  * @brief Send request to get WM_PROTOCOLS property of a given window.  * @param c The connection to the X server.  * @param window Window X identifier.  * @return The request cookie.  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_wm_protocols
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|wm_protocol_atom
parameter_list|)
function_decl|;
comment|/**  * @see xcb_icccm_get_wm_protocols()  */
name|xcb_get_property_cookie_t
name|xcb_icccm_get_wm_protocols_unchecked
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|wm_protocol_atom
parameter_list|)
function_decl|;
comment|/**  * @brief Fill the given structure with the WM_PROTOCOLS property of a window.  * @param reply The reply of the GetProperty request.  * @param protocols WM_PROTOCOLS property value.  * @return Return 1 on success, 0 otherwise.  *  * protocols structure members should be freed by  * xcb_icccm_get_wm_protocols_reply_wipe().  */
name|uint8_t
name|xcb_icccm_get_wm_protocols_from_reply
parameter_list|(
name|xcb_get_property_reply_t
modifier|*
name|reply
parameter_list|,
name|xcb_icccm_get_wm_protocols_reply_t
modifier|*
name|protocols
parameter_list|)
function_decl|;
comment|/**  * @brief Fill the given structure with the WM_PROTOCOLS property of a window.  * @param c The connection to the X server.  * @param cookie Request cookie.  * @param protocols WM_PROTOCOLS property value.  * @param e Error if any.  * @return Return 1 on success, 0 otherwise.  *  * The parameter e supplied to this function must be NULL if  * xcb_icccm_get_wm_protocols_unchecked() is used.  Otherwise, it stores the  * error if any. protocols structure members should be freed by  * xcb_icccm_get_wm_protocols_reply_wipe().  */
name|uint8_t
name|xcb_icccm_get_wm_protocols_reply
parameter_list|(
name|xcb_connection_t
modifier|*
name|c
parameter_list|,
name|xcb_get_property_cookie_t
name|cookie
parameter_list|,
name|xcb_icccm_get_wm_protocols_reply_t
modifier|*
name|protocols
parameter_list|,
name|xcb_generic_error_t
modifier|*
modifier|*
name|e
parameter_list|)
function_decl|;
comment|/**  * @brief Wipe protocols structure members previously allocated by  *        xcb_icccm_get_wm_protocols_reply().  * @param protocols protocols structure whose members is going to be freed.  */
name|void
name|xcb_icccm_get_wm_protocols_reply_wipe
parameter_list|(
name|xcb_icccm_get_wm_protocols_reply_t
modifier|*
name|protocols
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/**  * @}  */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* __XCB_ICCCM_H__ */
end_comment
end_unit
