begin_unit
begin_comment
comment|/* The Keccak sponge function, designed by Guido Bertoni, Joan Daemen, MichaÃ«l Peeters and Gilles Van Assche. For more information, feedback or questions, please refer to our website: http://keccak.noekeon.org/  Implementation by the designers, hereby denoted as "the implementer".  To the extent possible under law, the implementer has waived all copyright and related or neighboring rights to the source code in this file. http://creativecommons.org/publicdomain/zero/1.0/ */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|_KeccakNISTInterface_h_
end_ifndef
begin_define
DECL|macro|_KeccakNISTInterface_h_
define|#
directive|define
name|_KeccakNISTInterface_h_
end_define
begin_include
include|#
directive|include
file|"KeccakSponge.h"
end_include
begin_typedef
DECL|typedef|BitSequence
typedef|typedef
name|unsigned
name|char
name|BitSequence
typedef|;
end_typedef
begin_typedef
DECL|typedef|DataLength
typedef|typedef
name|unsigned
name|long
name|long
name|DataLength
typedef|;
end_typedef
begin_typedef
DECL|enumerator|SUCCESS
DECL|enumerator|FAIL
DECL|enumerator|BAD_HASHLEN
DECL|typedef|HashReturn
typedef|typedef
enum|enum
block|{
name|SUCCESS
init|=
literal|0
block|,
name|FAIL
init|=
literal|1
block|,
name|BAD_HASHLEN
init|=
literal|2
block|}
name|HashReturn
typedef|;
end_typedef
begin_typedef
DECL|typedef|hashState
typedef|typedef
name|spongeState
name|hashState
typedef|;
end_typedef
begin_comment
comment|/**   * Function to initialize the state of the Keccak[r, c] sponge function.   * The rate r and capacity c values are determined from @a hashbitlen.   * @param  state       Pointer to the state of the sponge function to be initialized.   * @param  hashbitlen  The desired number of output bits,    *                     or 0 for Keccak[] with default parameters   *                     and arbitrarily-long output.   * @pre    The value of hashbitlen must be one of 0, 224, 256, 384 and 512.   * @return SUCCESS if successful, BAD_HASHLEN if the value of hashbitlen is incorrect.   */
end_comment
begin_function_decl
name|HashReturn
name|Init
parameter_list|(
name|hashState
modifier|*
name|state
parameter_list|,
name|int
name|hashbitlen
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/**   * Function to give input data for the sponge function to absorb.   * @param  state       Pointer to the state of the sponge function initialized by Init().   * @param  data        Pointer to the input data.    *                     When @a databitLen is not a multiple of 8, the last bits of data must be   *                     in the most significant bits of the last byte.   * @param  databitLen  The number of input bits provided in the input data.   * @pre    In the previous call to Absorb(), databitLen was a multiple of 8.   * @return SUCCESS if successful, FAIL otherwise.   */
end_comment
begin_function_decl
name|HashReturn
name|Update
parameter_list|(
name|hashState
modifier|*
name|state
parameter_list|,
specifier|const
name|BitSequence
modifier|*
name|data
parameter_list|,
name|DataLength
name|databitlen
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/**   * Function to squeeze output data from the sponge function.   * If @a hashbitlen was not 0 in the call to Init(), the number of output bits is equal to @a hashbitlen.   * If @a hashbitlen was 0 in the call to Init(), the output bits must be extracted using the Squeeze() function.   * @param  state       Pointer to the state of the sponge function initialized by Init().   * @param  hashval     Pointer to the buffer where to store the output data.   * @return SUCCESS if successful, FAIL otherwise.   */
end_comment
begin_function_decl
name|HashReturn
name|Final
parameter_list|(
name|hashState
modifier|*
name|state
parameter_list|,
name|BitSequence
modifier|*
name|hashval
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/**   * Function to compute a hash using the Keccak[r, c] sponge function.   * The rate r and capacity c values are determined from @a hashbitlen.   * @param  hashbitlen  The desired number of output bits.   * @param  data        Pointer to the input data.    *                     When @a databitLen is not a multiple of 8, the last bits of data must be   *                     in the most significant bits of the last byte.   * @param  databitLen  The number of input bits provided in the input data.   * @param  hashval     Pointer to the buffer where to store the output data.   * @pre    The value of hashbitlen must be one of 224, 256, 384 and 512.   * @return SUCCESS if successful, BAD_HASHLEN if the value of hashbitlen is incorrect.   */
end_comment
begin_function_decl
name|HashReturn
name|Hash
parameter_list|(
name|int
name|hashbitlen
parameter_list|,
specifier|const
name|BitSequence
modifier|*
name|data
parameter_list|,
name|DataLength
name|databitlen
parameter_list|,
name|BitSequence
modifier|*
name|hashval
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
end_unit
