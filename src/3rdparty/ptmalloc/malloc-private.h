begin_unit
begin_comment
comment|/*   $Id: malloc-private.h,v 1.4 2006/03/31 12:56:52 wg Exp $   Private header file for ptmalloc3, created by Wolfram Gloger   and released to the public domain, as explained at   http://creativecommons.org/licenses/publicdomain.  */
end_comment
begin_comment
comment|/* The following file is replicated from malloc.c */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|MALLOC_PRIVATE_H
end_ifndef
begin_define
DECL|macro|MALLOC_PRIVATE_H
define|#
directive|define
name|MALLOC_PRIVATE_H
end_define
begin_ifndef
ifndef|#
directive|ifndef
name|MALLOC_ALIGNMENT
end_ifndef
begin_define
DECL|macro|MALLOC_ALIGNMENT
define|#
directive|define
name|MALLOC_ALIGNMENT
value|((size_t)8U)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|USE_LOCKS
end_ifndef
begin_define
DECL|macro|USE_LOCKS
define|#
directive|define
name|USE_LOCKS
value|0
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* The bit mask value corresponding to MALLOC_ALIGNMENT */
end_comment
begin_define
DECL|macro|CHUNK_ALIGN_MASK
define|#
directive|define
name|CHUNK_ALIGN_MASK
value|(MALLOC_ALIGNMENT - SIZE_T_ONE)
end_define
begin_comment
comment|/* the number of bytes to offset an address to align it */
end_comment
begin_define
DECL|macro|align_offset
define|#
directive|define
name|align_offset
parameter_list|(
name|A
parameter_list|)
define|\
value|((((size_t)(A)& CHUNK_ALIGN_MASK) == 0)? 0 :\   ((MALLOC_ALIGNMENT - ((size_t)(A)& CHUNK_ALIGN_MASK))& CHUNK_ALIGN_MASK))
end_define
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|MAP_ANONYMOUS
argument_list|)
operator|&&
name|defined
argument_list|(
name|MAP_ANON
argument_list|)
end_if
begin_define
DECL|macro|MAP_ANONYMOUS
define|#
directive|define
name|MAP_ANONYMOUS
value|MAP_ANON
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* MAP_ANON */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|MAP_ANONYMOUS
end_ifdef
begin_define
DECL|macro|MMAP_FLAGS
define|#
directive|define
name|MMAP_FLAGS
value|(MAP_PRIVATE|MAP_ANONYMOUS)
end_define
begin_define
DECL|macro|CALL_MMAP
define|#
directive|define
name|CALL_MMAP
parameter_list|(
name|s
parameter_list|)
value|mmap(0, (s), PROT_READ|PROT_WRITE, MMAP_FLAGS, -1, 0)
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|/* MAP_ANONYMOUS */
end_comment
begin_comment
comment|/*    Nearly all versions of mmap support MAP_ANONYMOUS, so the following    is unlikely to be needed, but is supplied just in case. */
end_comment
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_comment
comment|/* for O_RDWR */
end_comment
begin_define
DECL|macro|MMAP_FLAGS
define|#
directive|define
name|MMAP_FLAGS
value|(MAP_PRIVATE)
end_define
begin_decl_stmt
DECL|variable|dev_zero_fd
specifier|static
name|int
name|dev_zero_fd
init|=
operator|-
literal|1
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|dev_zero_fd
comment|/* Cached file descriptor for /dev/zero. */
end_comment
begin_define
DECL|macro|CALL_MMAP
define|#
directive|define
name|CALL_MMAP
parameter_list|(
name|s
parameter_list|)
value|((dev_zero_fd< 0) ? \            (dev_zero_fd = open("/dev/zero", O_RDWR), \             mmap(0, (s), PROT_READ|PROT_WRITE, MMAP_FLAGS, dev_zero_fd, 0)) : \             mmap(0, (s), PROT_READ|PROT_WRITE, MMAP_FLAGS, dev_zero_fd, 0))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* MAP_ANONYMOUS */
end_comment
begin_define
DECL|macro|CALL_MUNMAP
define|#
directive|define
name|CALL_MUNMAP
parameter_list|(
name|a
parameter_list|,
name|s
parameter_list|)
value|munmap((a), (s))
end_define
begin_struct
DECL|struct|malloc_chunk
struct|struct
name|malloc_chunk
block|{
DECL|member|prev_foot
name|size_t
name|prev_foot
decl_stmt|;
comment|/* Size of previous chunk (if free).  */
DECL|member|head
name|size_t
name|head
decl_stmt|;
comment|/* Size and inuse bits. */
DECL|member|fd
name|struct
name|malloc_chunk
modifier|*
name|fd
decl_stmt|;
comment|/* double links -- used only if free. */
DECL|member|bk
name|struct
name|malloc_chunk
modifier|*
name|bk
decl_stmt|;
block|}
struct|;
end_struct
begin_typedef
DECL|typedef|mchunk
typedef|typedef
name|struct
name|malloc_chunk
name|mchunk
typedef|;
end_typedef
begin_typedef
DECL|typedef|mchunkptr
typedef|typedef
name|struct
name|malloc_chunk
modifier|*
name|mchunkptr
typedef|;
end_typedef
begin_typedef
DECL|typedef|binmap_t
typedef|typedef
name|unsigned
name|int
name|binmap_t
typedef|;
end_typedef
begin_typedef
DECL|typedef|flag_t
typedef|typedef
name|unsigned
name|int
name|flag_t
typedef|;
end_typedef
begin_struct_decl
struct_decl|struct
name|malloc_tree_chunk
struct_decl|;
end_struct_decl
begin_typedef
DECL|typedef|tbinptr
typedef|typedef
name|struct
name|malloc_tree_chunk
modifier|*
name|tbinptr
typedef|;
end_typedef
begin_struct
DECL|struct|malloc_segment
struct|struct
name|malloc_segment
block|{
DECL|member|base
name|char
modifier|*
name|base
decl_stmt|;
comment|/* base address */
DECL|member|size
name|size_t
name|size
decl_stmt|;
comment|/* allocated size */
DECL|member|next
name|struct
name|malloc_segment
modifier|*
name|next
decl_stmt|;
comment|/* ptr to next segment */
DECL|member|sflags
name|flag_t
name|sflags
decl_stmt|;
comment|/* mmap and extern flag */
block|}
struct|;
end_struct
begin_typedef
DECL|typedef|msegment
typedef|typedef
name|struct
name|malloc_segment
name|msegment
typedef|;
end_typedef
begin_define
DECL|macro|NSMALLBINS
define|#
directive|define
name|NSMALLBINS
value|(32U)
end_define
begin_define
DECL|macro|NTREEBINS
define|#
directive|define
name|NTREEBINS
value|(32U)
end_define
begin_struct
DECL|struct|malloc_state
struct|struct
name|malloc_state
block|{
DECL|member|smallmap
name|binmap_t
name|smallmap
decl_stmt|;
DECL|member|treemap
name|binmap_t
name|treemap
decl_stmt|;
DECL|member|dvsize
name|size_t
name|dvsize
decl_stmt|;
DECL|member|topsize
name|size_t
name|topsize
decl_stmt|;
DECL|member|least_addr
name|char
modifier|*
name|least_addr
decl_stmt|;
DECL|member|dv
name|mchunkptr
name|dv
decl_stmt|;
DECL|member|top
name|mchunkptr
name|top
decl_stmt|;
DECL|member|trim_check
name|size_t
name|trim_check
decl_stmt|;
DECL|member|release_checks
name|size_t
name|release_checks
decl_stmt|;
DECL|member|magic
name|size_t
name|magic
decl_stmt|;
DECL|member|smallbins
name|mchunkptr
name|smallbins
index|[
operator|(
name|NSMALLBINS
operator|+
literal|1
operator|)
operator|*
literal|2
index|]
decl_stmt|;
DECL|member|treebins
name|tbinptr
name|treebins
index|[
name|NTREEBINS
index|]
decl_stmt|;
DECL|member|footprint
name|size_t
name|footprint
decl_stmt|;
DECL|member|max_footprint
name|size_t
name|max_footprint
decl_stmt|;
DECL|member|mflags
name|flag_t
name|mflags
decl_stmt|;
if|#
directive|if
name|USE_LOCKS
DECL|member|mutex
name|MLOCK_T
name|mutex
decl_stmt|;
endif|#
directive|endif
comment|/* USE_LOCKS */
DECL|member|seg
name|msegment
name|seg
decl_stmt|;
DECL|member|extp
name|void
modifier|*
name|extp
decl_stmt|;
DECL|member|exts
name|size_t
name|exts
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|/*   TOP_FOOT_SIZE is padding at the end of a segment, including space   that may be needed to place segment records and fenceposts when new   noncontiguous segments are added. */
end_comment
begin_define
DECL|macro|TOP_FOOT_SIZE
define|#
directive|define
name|TOP_FOOT_SIZE
define|\
value|(align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
end_define
begin_comment
comment|/* ------------------- Chunks sizes and alignments ----------------------- */
end_comment
begin_define
DECL|macro|MCHUNK_SIZE
define|#
directive|define
name|MCHUNK_SIZE
value|(sizeof(mchunk))
end_define
begin_define
DECL|macro|CHUNK_OVERHEAD
define|#
directive|define
name|CHUNK_OVERHEAD
value|(SIZE_T_SIZE)
end_define
begin_comment
comment|/* MMapped chunks need a second word of overhead ... */
end_comment
begin_define
DECL|macro|MMAP_CHUNK_OVERHEAD
define|#
directive|define
name|MMAP_CHUNK_OVERHEAD
value|(TWO_SIZE_T_SIZES)
end_define
begin_comment
comment|/* ... and additional padding for fake next-chunk at foot */
end_comment
begin_define
DECL|macro|MMAP_FOOT_PAD
define|#
directive|define
name|MMAP_FOOT_PAD
value|(FOUR_SIZE_T_SIZES)
end_define
begin_comment
comment|/* The smallest size we can malloc is an aligned minimal chunk */
end_comment
begin_define
DECL|macro|MIN_CHUNK_SIZE
define|#
directive|define
name|MIN_CHUNK_SIZE
define|\
value|((MCHUNK_SIZE + CHUNK_ALIGN_MASK)& ~CHUNK_ALIGN_MASK)
end_define
begin_comment
comment|/* conversion from malloc headers to user pointers, and back */
end_comment
begin_define
DECL|macro|chunk2mem
define|#
directive|define
name|chunk2mem
parameter_list|(
name|p
parameter_list|)
value|((void*)((char*)(p)       + TWO_SIZE_T_SIZES))
end_define
begin_define
DECL|macro|mem2chunk
define|#
directive|define
name|mem2chunk
parameter_list|(
name|mem
parameter_list|)
value|((mchunkptr)((char*)(mem) - TWO_SIZE_T_SIZES))
end_define
begin_comment
comment|/* chunk associated with aligned address A */
end_comment
begin_define
DECL|macro|align_as_chunk
define|#
directive|define
name|align_as_chunk
parameter_list|(
name|A
parameter_list|)
value|(mchunkptr)((A) + align_offset(chunk2mem(A)))
end_define
begin_comment
comment|/* pad request bytes into a usable size */
end_comment
begin_define
DECL|macro|pad_request
define|#
directive|define
name|pad_request
parameter_list|(
name|req
parameter_list|)
define|\
value|(((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK)& ~CHUNK_ALIGN_MASK)
end_define
begin_comment
comment|/* The byte and bit size of a size_t */
end_comment
begin_define
DECL|macro|SIZE_T_SIZE
define|#
directive|define
name|SIZE_T_SIZE
value|(sizeof(size_t))
end_define
begin_define
DECL|macro|SIZE_T_BITSIZE
define|#
directive|define
name|SIZE_T_BITSIZE
value|(sizeof(size_t)<< 3)
end_define
begin_comment
comment|/* Some constants coerced to size_t */
end_comment
begin_comment
comment|/* Annoying but necessary to avoid errors on some platforms */
end_comment
begin_define
DECL|macro|SIZE_T_ZERO
define|#
directive|define
name|SIZE_T_ZERO
value|((size_t)0)
end_define
begin_define
DECL|macro|SIZE_T_ONE
define|#
directive|define
name|SIZE_T_ONE
value|((size_t)1)
end_define
begin_define
DECL|macro|SIZE_T_TWO
define|#
directive|define
name|SIZE_T_TWO
value|((size_t)2)
end_define
begin_define
DECL|macro|SIZE_T_FOUR
define|#
directive|define
name|SIZE_T_FOUR
value|((size_t)4)
end_define
begin_define
DECL|macro|TWO_SIZE_T_SIZES
define|#
directive|define
name|TWO_SIZE_T_SIZES
value|(SIZE_T_SIZE<<1)
end_define
begin_define
DECL|macro|FOUR_SIZE_T_SIZES
define|#
directive|define
name|FOUR_SIZE_T_SIZES
value|(SIZE_T_SIZE<<2)
end_define
begin_define
DECL|macro|SIX_SIZE_T_SIZES
define|#
directive|define
name|SIX_SIZE_T_SIZES
value|(FOUR_SIZE_T_SIZES+TWO_SIZE_T_SIZES)
end_define
begin_define
DECL|macro|HALF_MAX_SIZE_T
define|#
directive|define
name|HALF_MAX_SIZE_T
value|(MAX_SIZE_T / 2U)
end_define
begin_define
DECL|macro|IS_MMAPPED_BIT
define|#
directive|define
name|IS_MMAPPED_BIT
value|(SIZE_T_ONE)
end_define
begin_define
DECL|macro|PINUSE_BIT
define|#
directive|define
name|PINUSE_BIT
value|(SIZE_T_ONE)
end_define
begin_define
DECL|macro|CINUSE_BIT
define|#
directive|define
name|CINUSE_BIT
value|(SIZE_T_TWO)
end_define
begin_define
DECL|macro|FLAG_BITS
define|#
directive|define
name|FLAG_BITS
value|(PINUSE_BIT|CINUSE_BIT|SIZE_T_FOUR)
end_define
begin_comment
comment|/* head field is or'ed with NON_MAIN_ARENA if the chunk was obtained    from a non-main arena.  This is only set immediately before handing    the chunk to the user, if necessary.  */
end_comment
begin_define
DECL|macro|NON_MAIN_ARENA
define|#
directive|define
name|NON_MAIN_ARENA
value|(SIZE_T_FOUR)
end_define
begin_define
DECL|macro|cinuse
define|#
directive|define
name|cinuse
parameter_list|(
name|p
parameter_list|)
value|((p)->head& CINUSE_BIT)
end_define
begin_define
DECL|macro|pinuse
define|#
directive|define
name|pinuse
parameter_list|(
name|p
parameter_list|)
value|((p)->head& PINUSE_BIT)
end_define
begin_define
DECL|macro|chunksize
define|#
directive|define
name|chunksize
parameter_list|(
name|p
parameter_list|)
value|((p)->head& ~(FLAG_BITS))
end_define
begin_define
DECL|macro|is_mmapped
define|#
directive|define
name|is_mmapped
parameter_list|(
name|p
parameter_list|)
define|\
value|(!((p)->head& PINUSE_BIT)&& ((p)->prev_foot& IS_MMAPPED_BIT))
end_define
begin_comment
comment|/* Get the internal overhead associated with chunk p */
end_comment
begin_define
DECL|macro|overhead_for
define|#
directive|define
name|overhead_for
parameter_list|(
name|p
parameter_list|)
define|\
value|(is_mmapped(p)? MMAP_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* MALLOC_PRIVATE_H */
end_comment
end_unit
