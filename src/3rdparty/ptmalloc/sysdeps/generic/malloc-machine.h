begin_unit
begin_comment
comment|/* Basic platform-independent macro definitions for mutexes,    thread-specific data and parameters for malloc.    Copyright (C) 2003 Free Software Foundation, Inc.    This file is part of the GNU C Library.     The GNU C Library is free software; you can redistribute it and/or    modify it under the terms of the GNU Lesser General Public    License as published by the Free Software Foundation; either    version 2.1 of the License, or (at your option) any later version.     The GNU C Library is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU    Lesser General Public License for more details.     You should have received a copy of the GNU Lesser General Public    License along with the GNU C Library; if not, write to the Free    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA    02111-1307 USA.  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|_GENERIC_MALLOC_MACHINE_H
end_ifndef
begin_define
DECL|macro|_GENERIC_MALLOC_MACHINE_H
define|#
directive|define
name|_GENERIC_MALLOC_MACHINE_H
end_define
begin_include
include|#
directive|include
file|<atomic.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|mutex_init
end_ifndef
begin_comment
comment|/* No threads, provide dummy macros */
end_comment
begin_define
DECL|macro|NO_THREADS
define|#
directive|define
name|NO_THREADS
end_define
begin_comment
comment|/* The mutex functions used to do absolutely nothing, i.e. lock,    trylock and unlock would always just return 0.  However, even    without any concurrently active threads, a mutex can be used    legitimately as an `in use' flag.  To make the code that is    protected by a mutex async-signal safe, these macros would have to    be based on atomic test-and-set operations, for example. */
end_comment
begin_typedef
DECL|typedef|mutex_t
typedef|typedef
name|int
name|mutex_t
typedef|;
end_typedef
begin_define
DECL|macro|mutex_init
define|#
directive|define
name|mutex_init
parameter_list|(
name|m
parameter_list|)
value|(*(m) = 0)
end_define
begin_define
DECL|macro|mutex_lock
define|#
directive|define
name|mutex_lock
parameter_list|(
name|m
parameter_list|)
value|((*(m) = 1), 0)
end_define
begin_define
DECL|macro|mutex_trylock
define|#
directive|define
name|mutex_trylock
parameter_list|(
name|m
parameter_list|)
value|(*(m) ? 1 : ((*(m) = 1), 0))
end_define
begin_define
DECL|macro|mutex_unlock
define|#
directive|define
name|mutex_unlock
parameter_list|(
name|m
parameter_list|)
value|(*(m) = 0)
end_define
begin_typedef
DECL|typedef|tsd_key_t
typedef|typedef
name|void
modifier|*
name|tsd_key_t
typedef|;
end_typedef
begin_define
DECL|macro|tsd_key_create
define|#
directive|define
name|tsd_key_create
parameter_list|(
name|key
parameter_list|,
name|destr
parameter_list|)
value|do {} while(0)
end_define
begin_define
DECL|macro|tsd_setspecific
define|#
directive|define
name|tsd_setspecific
parameter_list|(
name|key
parameter_list|,
name|data
parameter_list|)
value|((key) = (data))
end_define
begin_define
DECL|macro|tsd_getspecific
define|#
directive|define
name|tsd_getspecific
parameter_list|(
name|key
parameter_list|,
name|vptr
parameter_list|)
value|(vptr = (key))
end_define
begin_define
DECL|macro|thread_atfork
define|#
directive|define
name|thread_atfork
parameter_list|(
name|prepare
parameter_list|,
name|parent
parameter_list|,
name|child
parameter_list|)
value|do {} while(0)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* !defined mutex_init */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|atomic_full_barrier
end_ifndef
begin_define
DECL|macro|atomic_full_barrier
define|#
directive|define
name|atomic_full_barrier
parameter_list|()
value|__asm ("" ::: "memory")
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|atomic_read_barrier
end_ifndef
begin_define
DECL|macro|atomic_read_barrier
define|#
directive|define
name|atomic_read_barrier
parameter_list|()
value|atomic_full_barrier ()
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|atomic_write_barrier
end_ifndef
begin_define
DECL|macro|atomic_write_barrier
define|#
directive|define
name|atomic_write_barrier
parameter_list|()
value|atomic_full_barrier ()
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|DEFAULT_TOP_PAD
end_ifndef
begin_define
DECL|macro|DEFAULT_TOP_PAD
define|#
directive|define
name|DEFAULT_TOP_PAD
value|131072
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* !defined(_GENERIC_MALLOC_MACHINE_H) */
end_comment
end_unit
