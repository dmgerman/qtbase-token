begin_unit
begin_comment
comment|/* Basic platform-independent macro definitions for mutexes,    thread-specific data and parameters for malloc.    Solaris threads version.    Copyright (C) 2004 Wolfram Gloger<wg@malloc.de>.  Permission to use, copy, modify, distribute, and sell this software and its documentation for any purpose is hereby granted without fee, provided that (i) the above copyright notices and this permission notice appear in all copies of the software and related documentation, and (ii) the name of Wolfram Gloger may not be used in any advertising or publicity relating to the software.  THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL WOLFRAM GLOGER BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|_SOLARIS_MALLOC_MACHINE_H
end_ifndef
begin_define
DECL|macro|_SOLARIS_MALLOC_MACHINE_H
define|#
directive|define
name|_SOLARIS_MALLOC_MACHINE_H
end_define
begin_include
include|#
directive|include
file|<thread.h>
end_include
begin_typedef
DECL|typedef|thread_id
typedef|typedef
name|thread_t
name|thread_id
typedef|;
end_typedef
begin_define
DECL|macro|MUTEX_INITIALIZER
define|#
directive|define
name|MUTEX_INITIALIZER
value|{ 0 }
end_define
begin_define
DECL|macro|mutex_init
define|#
directive|define
name|mutex_init
parameter_list|(
name|m
parameter_list|)
value|mutex_init(m, USYNC_THREAD, NULL)
end_define
begin_comment
comment|/*  * Hack for thread-specific data on Solaris.  We can't use thr_setspecific  * because that function calls malloc() itself.  */
end_comment
begin_typedef
DECL|typedef|tsd_key_t
typedef|typedef
name|void
modifier|*
name|tsd_key_t
index|[
literal|256
index|]
typedef|;
end_typedef
begin_define
DECL|macro|tsd_key_create
define|#
directive|define
name|tsd_key_create
parameter_list|(
name|key
parameter_list|,
name|destr
parameter_list|)
value|do { \   int i; \   for(i=0; i<256; i++) (*key)[i] = 0; \ } while(0)
end_define
begin_define
DECL|macro|tsd_setspecific
define|#
directive|define
name|tsd_setspecific
parameter_list|(
name|key
parameter_list|,
name|data
parameter_list|)
value|(key[(unsigned)thr_self() % 256] = (data))
end_define
begin_define
DECL|macro|tsd_getspecific
define|#
directive|define
name|tsd_getspecific
parameter_list|(
name|key
parameter_list|,
name|vptr
parameter_list|)
value|(vptr = key[(unsigned)thr_self() % 256])
end_define
begin_define
DECL|macro|thread_atfork
define|#
directive|define
name|thread_atfork
parameter_list|(
name|prepare
parameter_list|,
name|parent
parameter_list|,
name|child
parameter_list|)
value|do {} while(0)
end_define
begin_include
include|#
directive|include
file|<sysdeps/generic/malloc-machine.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* !defined(_SOLARIS_MALLOC_MACHINE_H) */
end_comment
end_unit
