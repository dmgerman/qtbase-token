begin_unit
begin_comment
comment|/* Disclaimer for Robert Penner's Easing Equations license:  TERMS OF USE - EASING EQUATIONS  Open source under the BSD License.  Copyright Â© 2001 Robert Penner All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:      * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.     * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.     * Neither the name of the author nor the names of contributors may be used to endorse or promote products derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
end_comment
begin_include
include|#
directive|include
file|<QtCore/qmath.h>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|M_PI
end_ifndef
begin_define
DECL|macro|M_PI
define|#
directive|define
name|M_PI
value|3.14159265358979323846
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|M_PI_2
end_ifndef
begin_define
DECL|macro|M_PI_2
define|#
directive|define
name|M_PI_2
value|(M_PI / 2)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_USE_NAMESPACE
comment|/**  * Easing equation function for a simple linear tweening, with no easing.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
DECL|function|easeNone
specifier|static
name|qreal
name|easeNone
parameter_list|(
name|qreal
name|progress
parameter_list|)
block|{
return|return
name|progress
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a quadratic (t^2) easing in: accelerating from zero velocity.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeInQuad
specifier|static
name|qreal
name|easeInQuad
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
return|return
name|t
operator|*
name|t
return|;
block|}
end_function
begin_comment
comment|/** * Easing equation function for a quadratic (t^2) easing out: decelerating to zero velocity. * * @param t		Current time (in frames or seconds). * @return		The correct value. */
end_comment
begin_function
DECL|function|easeOutQuad
specifier|static
name|qreal
name|easeOutQuad
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
return|return
operator|-
name|t
operator|*
operator|(
name|t
operator|-
literal|2
operator|)
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a quadratic (t^2) easing in/out: acceleration until halfway, then deceleration.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeInOutQuad
specifier|static
name|qreal
name|easeInOutQuad
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
name|t
operator|*=
literal|2.0
expr_stmt|;
if|if
condition|(
name|t
operator|<
literal|1
condition|)
block|{
return|return
name|t
operator|*
name|t
operator|/
name|qreal
argument_list|(
literal|2
argument_list|)
return|;
block|}
else|else
block|{
operator|--
name|t
expr_stmt|;
return|return
operator|-
literal|0.5
operator|*
operator|(
name|t
operator|*
operator|(
name|t
operator|-
literal|2
operator|)
operator|-
literal|1
operator|)
return|;
block|}
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a quadratic (t^2) easing out/in: deceleration until halfway, then acceleration.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeOutInQuad
specifier|static
name|qreal
name|easeOutInQuad
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|<
literal|0.5
condition|)
return|return
name|easeOutQuad
argument_list|(
name|t
operator|*
literal|2
argument_list|)
operator|/
literal|2
return|;
return|return
name|easeInQuad
argument_list|(
operator|(
literal|2
operator|*
name|t
operator|)
operator|-
literal|1
argument_list|)
operator|/
literal|2
operator|+
literal|0.5
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a cubic (t^3) easing in: accelerating from zero velocity.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeInCubic
specifier|static
name|qreal
name|easeInCubic
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
return|return
name|t
operator|*
name|t
operator|*
name|t
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a cubic (t^3) easing out: decelerating from zero velocity.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeOutCubic
specifier|static
name|qreal
name|easeOutCubic
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
name|t
operator|-=
literal|1.0
expr_stmt|;
return|return
name|t
operator|*
name|t
operator|*
name|t
operator|+
literal|1
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a cubic (t^3) easing in/out: acceleration until halfway, then deceleration.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeInOutCubic
specifier|static
name|qreal
name|easeInOutCubic
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
name|t
operator|*=
literal|2.0
expr_stmt|;
if|if
condition|(
name|t
operator|<
literal|1
condition|)
block|{
return|return
literal|0.5
operator|*
name|t
operator|*
name|t
operator|*
name|t
return|;
block|}
else|else
block|{
name|t
operator|-=
name|qreal
argument_list|(
literal|2.0
argument_list|)
expr_stmt|;
return|return
literal|0.5
operator|*
operator|(
name|t
operator|*
name|t
operator|*
name|t
operator|+
literal|2
operator|)
return|;
block|}
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a cubic (t^3) easing out/in: deceleration until halfway, then acceleration.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeOutInCubic
specifier|static
name|qreal
name|easeOutInCubic
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|<
literal|0.5
condition|)
return|return
name|easeOutCubic
argument_list|(
literal|2
operator|*
name|t
argument_list|)
operator|/
literal|2
return|;
return|return
name|easeInCubic
argument_list|(
literal|2
operator|*
name|t
operator|-
literal|1
argument_list|)
operator|/
literal|2
operator|+
literal|0.5
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a quartic (t^4) easing in: accelerating from zero velocity.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeInQuart
specifier|static
name|qreal
name|easeInQuart
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
return|return
name|t
operator|*
name|t
operator|*
name|t
operator|*
name|t
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a quartic (t^4) easing out: decelerating from zero velocity.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeOutQuart
specifier|static
name|qreal
name|easeOutQuart
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
name|t
operator|-=
name|qreal
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
return|return
operator|-
operator|(
name|t
operator|*
name|t
operator|*
name|t
operator|*
name|t
operator|-
literal|1
operator|)
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a quartic (t^4) easing in/out: acceleration until halfway, then deceleration.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeInOutQuart
specifier|static
name|qreal
name|easeInOutQuart
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
name|t
operator|*=
literal|2
expr_stmt|;
if|if
condition|(
name|t
operator|<
literal|1
condition|)
return|return
literal|0.5
operator|*
name|t
operator|*
name|t
operator|*
name|t
operator|*
name|t
return|;
else|else
block|{
name|t
operator|-=
literal|2.0f
expr_stmt|;
return|return
operator|-
literal|0.5
operator|*
operator|(
name|t
operator|*
name|t
operator|*
name|t
operator|*
name|t
operator|-
literal|2
operator|)
return|;
block|}
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a quartic (t^4) easing out/in: deceleration until halfway, then acceleration.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeOutInQuart
specifier|static
name|qreal
name|easeOutInQuart
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|<
literal|0.5
condition|)
return|return
name|easeOutQuart
argument_list|(
literal|2
operator|*
name|t
argument_list|)
operator|/
literal|2
return|;
return|return
name|easeInQuart
argument_list|(
literal|2
operator|*
name|t
operator|-
literal|1
argument_list|)
operator|/
literal|2
operator|+
literal|0.5
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a quintic (t^5) easing in: accelerating from zero velocity.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeInQuint
specifier|static
name|qreal
name|easeInQuint
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
return|return
name|t
operator|*
name|t
operator|*
name|t
operator|*
name|t
operator|*
name|t
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a quintic (t^5) easing out: decelerating from zero velocity.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeOutQuint
specifier|static
name|qreal
name|easeOutQuint
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
name|t
operator|-=
literal|1.0
expr_stmt|;
return|return
name|t
operator|*
name|t
operator|*
name|t
operator|*
name|t
operator|*
name|t
operator|+
literal|1
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a quintic (t^5) easing in/out: acceleration until halfway, then deceleration.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeInOutQuint
specifier|static
name|qreal
name|easeInOutQuint
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
name|t
operator|*=
literal|2.0
expr_stmt|;
if|if
condition|(
name|t
operator|<
literal|1
condition|)
return|return
literal|0.5
operator|*
name|t
operator|*
name|t
operator|*
name|t
operator|*
name|t
operator|*
name|t
return|;
else|else
block|{
name|t
operator|-=
literal|2.0
expr_stmt|;
return|return
literal|0.5
operator|*
operator|(
name|t
operator|*
name|t
operator|*
name|t
operator|*
name|t
operator|*
name|t
operator|+
literal|2
operator|)
return|;
block|}
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a quintic (t^5) easing out/in: deceleration until halfway, then acceleration.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeOutInQuint
specifier|static
name|qreal
name|easeOutInQuint
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|<
literal|0.5
condition|)
return|return
name|easeOutQuint
argument_list|(
literal|2
operator|*
name|t
argument_list|)
operator|/
literal|2
return|;
return|return
name|easeInQuint
argument_list|(
literal|2
operator|*
name|t
operator|-
literal|1
argument_list|)
operator|/
literal|2
operator|+
literal|0.5
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a sinusoidal (sin(t)) easing in: accelerating from zero velocity.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeInSine
specifier|static
name|qreal
name|easeInSine
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
return|return
operator|(
name|t
operator|==
literal|1.0
operator|)
condition|?
literal|1.0
else|:
operator|-
operator|::
name|qCos
argument_list|(
name|t
operator|*
name|M_PI_2
argument_list|)
operator|+
literal|1.0
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a sinusoidal (sin(t)) easing out: decelerating from zero velocity.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeOutSine
specifier|static
name|qreal
name|easeOutSine
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
return|return
operator|::
name|qSin
argument_list|(
name|t
operator|*
name|M_PI_2
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a sinusoidal (sin(t)) easing in/out: acceleration until halfway, then deceleration.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeInOutSine
specifier|static
name|qreal
name|easeInOutSine
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
return|return
operator|-
literal|0.5
operator|*
operator|(
operator|::
name|qCos
argument_list|(
name|M_PI
operator|*
name|t
argument_list|)
operator|-
literal|1
operator|)
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a sinusoidal (sin(t)) easing out/in: deceleration until halfway, then acceleration.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeOutInSine
specifier|static
name|qreal
name|easeOutInSine
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|<
literal|0.5
condition|)
return|return
name|easeOutSine
argument_list|(
literal|2
operator|*
name|t
argument_list|)
operator|/
literal|2
return|;
return|return
name|easeInSine
argument_list|(
literal|2
operator|*
name|t
operator|-
literal|1
argument_list|)
operator|/
literal|2
operator|+
literal|0.5
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for an exponential (2^t) easing in: accelerating from zero velocity.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeInExpo
specifier|static
name|qreal
name|easeInExpo
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
return|return
operator|(
name|t
operator|==
literal|0
operator|||
name|t
operator|==
literal|1.0
operator|)
condition|?
name|t
else|:
operator|::
name|qPow
argument_list|(
literal|2.0
argument_list|,
literal|10
operator|*
operator|(
name|t
operator|-
literal|1
operator|)
argument_list|)
operator|-
name|qreal
argument_list|(
literal|0.001
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for an exponential (2^t) easing out: decelerating from zero velocity.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeOutExpo
specifier|static
name|qreal
name|easeOutExpo
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
return|return
operator|(
name|t
operator|==
literal|1.0
operator|)
condition|?
literal|1.0
else|:
literal|1.001
operator|*
operator|(
operator|-
operator|::
name|qPow
argument_list|(
literal|2.0f
argument_list|,
operator|-
literal|10
operator|*
name|t
argument_list|)
operator|+
literal|1
operator|)
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for an exponential (2^t) easing in/out: acceleration until halfway, then deceleration.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeInOutExpo
specifier|static
name|qreal
name|easeInOutExpo
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|==
literal|0.0
condition|)
return|return
name|qreal
argument_list|(
literal|0.0
argument_list|)
return|;
if|if
condition|(
name|t
operator|==
literal|1.0
condition|)
return|return
name|qreal
argument_list|(
literal|1.0
argument_list|)
return|;
name|t
operator|*=
literal|2.0
expr_stmt|;
if|if
condition|(
name|t
operator|<
literal|1
condition|)
return|return
literal|0.5
operator|*
operator|::
name|qPow
argument_list|(
name|qreal
argument_list|(
literal|2.0
argument_list|)
argument_list|,
literal|10
operator|*
operator|(
name|t
operator|-
literal|1
operator|)
argument_list|)
operator|-
literal|0.0005
return|;
return|return
literal|0.5
operator|*
literal|1.0005
operator|*
operator|(
operator|-
operator|::
name|qPow
argument_list|(
name|qreal
argument_list|(
literal|2.0
argument_list|)
argument_list|,
operator|-
literal|10
operator|*
operator|(
name|t
operator|-
literal|1
operator|)
argument_list|)
operator|+
literal|2
operator|)
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for an exponential (2^t) easing out/in: deceleration until halfway, then acceleration.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeOutInExpo
specifier|static
name|qreal
name|easeOutInExpo
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|<
literal|0.5
condition|)
return|return
name|easeOutExpo
argument_list|(
literal|2
operator|*
name|t
argument_list|)
operator|/
literal|2
return|;
return|return
name|easeInExpo
argument_list|(
literal|2
operator|*
name|t
operator|-
literal|1
argument_list|)
operator|/
literal|2
operator|+
literal|0.5
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a circular (sqrt(1-t^2)) easing in: accelerating from zero velocity.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeInCirc
specifier|static
name|qreal
name|easeInCirc
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
return|return
operator|-
operator|(
operator|::
name|sqrt
argument_list|(
literal|1
operator|-
name|t
operator|*
name|t
argument_list|)
operator|-
literal|1
operator|)
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a circular (sqrt(1-t^2)) easing out: decelerating from zero velocity.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeOutCirc
specifier|static
name|qreal
name|easeOutCirc
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
name|t
operator|-=
name|qreal
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
return|return
operator|::
name|sqrt
argument_list|(
literal|1
operator|-
name|t
operator|*
name|t
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a circular (sqrt(1-t^2)) easing in/out: acceleration until halfway, then deceleration.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeInOutCirc
specifier|static
name|qreal
name|easeInOutCirc
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
name|t
operator|*=
name|qreal
argument_list|(
literal|2.0
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|<
literal|1
condition|)
block|{
return|return
operator|-
literal|0.5
operator|*
operator|(
operator|::
name|sqrt
argument_list|(
literal|1
operator|-
name|t
operator|*
name|t
argument_list|)
operator|-
literal|1
operator|)
return|;
block|}
else|else
block|{
name|t
operator|-=
name|qreal
argument_list|(
literal|2.0
argument_list|)
expr_stmt|;
return|return
literal|0.5
operator|*
operator|(
operator|::
name|sqrt
argument_list|(
literal|1
operator|-
name|t
operator|*
name|t
argument_list|)
operator|+
literal|1
operator|)
return|;
block|}
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a circular (sqrt(1-t^2)) easing out/in: deceleration until halfway, then acceleration.  *  * @param t		Current time (in frames or seconds).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeOutInCirc
specifier|static
name|qreal
name|easeOutInCirc
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|<
literal|0.5
condition|)
return|return
name|easeOutCirc
argument_list|(
literal|2
operator|*
name|t
argument_list|)
operator|/
literal|2
return|;
return|return
name|easeInCirc
argument_list|(
literal|2
operator|*
name|t
operator|-
literal|1
argument_list|)
operator|/
literal|2
operator|+
literal|0.5
return|;
block|}
end_function
begin_function
DECL|function|easeInElastic_helper
specifier|static
name|qreal
name|easeInElastic_helper
parameter_list|(
name|qreal
name|t
parameter_list|,
name|qreal
name|b
parameter_list|,
name|qreal
name|c
parameter_list|,
name|qreal
name|d
parameter_list|,
name|qreal
name|a
parameter_list|,
name|qreal
name|p
parameter_list|)
block|{
if|if
condition|(
name|t
operator|==
literal|0
condition|)
return|return
name|b
return|;
name|qreal
name|t_adj
init|=
operator|(
name|qreal
operator|)
name|t
operator|/
operator|(
name|qreal
operator|)
name|d
decl_stmt|;
if|if
condition|(
name|t_adj
operator|==
literal|1
condition|)
return|return
name|b
operator|+
name|c
return|;
name|qreal
name|s
decl_stmt|;
if|if
condition|(
name|a
operator|<
operator|::
name|qFabs
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|a
operator|=
name|c
expr_stmt|;
name|s
operator|=
name|p
operator|/
literal|4.0f
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
name|p
operator|/
operator|(
literal|2
operator|*
name|M_PI
operator|)
operator|*
operator|::
name|qAsin
argument_list|(
name|c
operator|/
name|a
argument_list|)
expr_stmt|;
block|}
name|t_adj
operator|-=
literal|1.0f
expr_stmt|;
return|return
operator|-
operator|(
name|a
operator|*
operator|::
name|qPow
argument_list|(
literal|2.0f
argument_list|,
literal|10
operator|*
name|t_adj
argument_list|)
operator|*
operator|::
name|qSin
argument_list|(
operator|(
name|t_adj
operator|*
name|d
operator|-
name|s
operator|)
operator|*
operator|(
literal|2
operator|*
name|M_PI
operator|)
operator|/
name|p
argument_list|)
operator|)
operator|+
name|b
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for an elastic (exponentially decaying sine wave) easing in: accelerating from zero velocity.  *  * @param t		Current time (in frames or seconds).  * @param a		Amplitude.  * @param p		Period.  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeInElastic
specifier|static
name|qreal
name|easeInElastic
parameter_list|(
name|qreal
name|t
parameter_list|,
name|qreal
name|a
parameter_list|,
name|qreal
name|p
parameter_list|)
block|{
return|return
name|easeInElastic_helper
argument_list|(
name|t
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|a
argument_list|,
name|p
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|easeOutElastic_helper
specifier|static
name|qreal
name|easeOutElastic_helper
parameter_list|(
name|qreal
name|t
parameter_list|,
name|qreal
comment|/*b*/
parameter_list|,
name|qreal
name|c
parameter_list|,
name|qreal
comment|/*d*/
parameter_list|,
name|qreal
name|a
parameter_list|,
name|qreal
name|p
parameter_list|)
block|{
if|if
condition|(
name|t
operator|==
literal|0
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|t
operator|==
literal|1
condition|)
return|return
name|c
return|;
name|qreal
name|s
decl_stmt|;
if|if
condition|(
name|a
operator|<
name|c
condition|)
block|{
name|a
operator|=
name|c
expr_stmt|;
name|s
operator|=
name|p
operator|/
literal|4.0f
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
name|p
operator|/
operator|(
literal|2
operator|*
name|M_PI
operator|)
operator|*
operator|::
name|qAsin
argument_list|(
name|c
operator|/
name|a
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|a
operator|*
operator|::
name|qPow
argument_list|(
literal|2.0f
argument_list|,
operator|-
literal|10
operator|*
name|t
argument_list|)
operator|*
operator|::
name|qSin
argument_list|(
operator|(
name|t
operator|-
name|s
operator|)
operator|*
operator|(
literal|2
operator|*
name|M_PI
operator|)
operator|/
name|p
argument_list|)
operator|+
name|c
operator|)
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for an elastic (exponentially decaying sine wave) easing out: decelerating from zero velocity.  *  * @param t		Current time (in frames or seconds).  * @param a		Amplitude.  * @param p		Period.  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeOutElastic
specifier|static
name|qreal
name|easeOutElastic
parameter_list|(
name|qreal
name|t
parameter_list|,
name|qreal
name|a
parameter_list|,
name|qreal
name|p
parameter_list|)
block|{
return|return
name|easeOutElastic_helper
argument_list|(
name|t
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|a
argument_list|,
name|p
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for an elastic (exponentially decaying sine wave) easing in/out: acceleration until halfway, then deceleration.  *  * @param t		Current time (in frames or seconds).  * @param a		Amplitude.  * @param p		Period.  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeInOutElastic
specifier|static
name|qreal
name|easeInOutElastic
parameter_list|(
name|qreal
name|t
parameter_list|,
name|qreal
name|a
parameter_list|,
name|qreal
name|p
parameter_list|)
block|{
if|if
condition|(
name|t
operator|==
literal|0
condition|)
return|return
literal|0.0
return|;
name|t
operator|*=
literal|2.0
expr_stmt|;
if|if
condition|(
name|t
operator|==
literal|2
condition|)
return|return
literal|1.0
return|;
name|qreal
name|s
decl_stmt|;
if|if
condition|(
name|a
operator|<
literal|1.0
condition|)
block|{
name|a
operator|=
literal|1.0
expr_stmt|;
name|s
operator|=
name|p
operator|/
literal|4.0f
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
name|p
operator|/
operator|(
literal|2
operator|*
name|M_PI
operator|)
operator|*
operator|::
name|qAsin
argument_list|(
literal|1.0
operator|/
name|a
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|<
literal|1
condition|)
return|return
operator|-
literal|.5
operator|*
operator|(
name|a
operator|*
operator|::
name|qPow
argument_list|(
literal|2.0f
argument_list|,
literal|10
operator|*
operator|(
name|t
operator|-
literal|1
operator|)
argument_list|)
operator|*
operator|::
name|qSin
argument_list|(
operator|(
name|t
operator|-
literal|1
operator|-
name|s
operator|)
operator|*
operator|(
literal|2
operator|*
name|M_PI
operator|)
operator|/
name|p
argument_list|)
operator|)
return|;
return|return
name|a
operator|*
operator|::
name|qPow
argument_list|(
literal|2.0f
argument_list|,
operator|-
literal|10
operator|*
operator|(
name|t
operator|-
literal|1
operator|)
argument_list|)
operator|*
operator|::
name|qSin
argument_list|(
operator|(
name|t
operator|-
literal|1
operator|-
name|s
operator|)
operator|*
operator|(
literal|2
operator|*
name|M_PI
operator|)
operator|/
name|p
argument_list|)
operator|*
literal|.5
operator|+
literal|1.0
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for an elastic (exponentially decaying sine wave) easing out/in: deceleration until halfway, then acceleration.  *  * @param t		Current time (in frames or seconds).  * @param a		Amplitude.  * @param p		Period.  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeOutInElastic
specifier|static
name|qreal
name|easeOutInElastic
parameter_list|(
name|qreal
name|t
parameter_list|,
name|qreal
name|a
parameter_list|,
name|qreal
name|p
parameter_list|)
block|{
if|if
condition|(
name|t
operator|<
literal|0.5
condition|)
return|return
name|easeOutElastic_helper
argument_list|(
name|t
operator|*
literal|2
argument_list|,
literal|0
argument_list|,
literal|0.5
argument_list|,
literal|1.0
argument_list|,
name|a
argument_list|,
name|p
argument_list|)
return|;
return|return
name|easeInElastic_helper
argument_list|(
literal|2
operator|*
name|t
operator|-
literal|1.0
argument_list|,
literal|0.5
argument_list|,
literal|0.5
argument_list|,
literal|1.0
argument_list|,
name|a
argument_list|,
name|p
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a back (overshooting cubic easing: (s+1)*t^3 - s*t^2) easing in: accelerating from zero velocity.  *  * @param t		Current time (in frames or seconds).  * @param s		Overshoot ammount: higher s means greater overshoot (0 produces cubic easing with no overshoot, and the default value of 1.70158 produces an overshoot of 10 percent).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeInBack
specifier|static
name|qreal
name|easeInBack
parameter_list|(
name|qreal
name|t
parameter_list|,
name|qreal
name|s
parameter_list|)
block|{
return|return
name|t
operator|*
name|t
operator|*
operator|(
operator|(
name|s
operator|+
literal|1
operator|)
operator|*
name|t
operator|-
name|s
operator|)
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a back (overshooting cubic easing: (s+1)*t^3 - s*t^2) easing out: decelerating from zero velocity.  *  * @param t		Current time (in frames or seconds).  * @param s		Overshoot ammount: higher s means greater overshoot (0 produces cubic easing with no overshoot, and the default value of 1.70158 produces an overshoot of 10 percent).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeOutBack
specifier|static
name|qreal
name|easeOutBack
parameter_list|(
name|qreal
name|t
parameter_list|,
name|qreal
name|s
parameter_list|)
block|{
name|t
operator|-=
name|qreal
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
return|return
name|t
operator|*
name|t
operator|*
operator|(
operator|(
name|s
operator|+
literal|1
operator|)
operator|*
name|t
operator|+
name|s
operator|)
operator|+
literal|1
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a back (overshooting cubic easing: (s+1)*t^3 - s*t^2) easing in/out: acceleration until halfway, then deceleration.  *  * @param t		Current time (in frames or seconds).  * @param s		Overshoot ammount: higher s means greater overshoot (0 produces cubic easing with no overshoot, and the default value of 1.70158 produces an overshoot of 10 percent).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeInOutBack
specifier|static
name|qreal
name|easeInOutBack
parameter_list|(
name|qreal
name|t
parameter_list|,
name|qreal
name|s
parameter_list|)
block|{
name|t
operator|*=
literal|2.0
expr_stmt|;
if|if
condition|(
name|t
operator|<
literal|1
condition|)
block|{
name|s
operator|*=
literal|1.525f
expr_stmt|;
return|return
literal|0.5
operator|*
operator|(
name|t
operator|*
name|t
operator|*
operator|(
operator|(
name|s
operator|+
literal|1
operator|)
operator|*
name|t
operator|-
name|s
operator|)
operator|)
return|;
block|}
else|else
block|{
name|t
operator|-=
literal|2
expr_stmt|;
name|s
operator|*=
literal|1.525f
expr_stmt|;
return|return
literal|0.5
operator|*
operator|(
name|t
operator|*
name|t
operator|*
operator|(
operator|(
name|s
operator|+
literal|1
operator|)
operator|*
name|t
operator|+
name|s
operator|)
operator|+
literal|2
operator|)
return|;
block|}
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a back (overshooting cubic easing: (s+1)*t^3 - s*t^2) easing out/in: deceleration until halfway, then acceleration.  *  * @param t		Current time (in frames or seconds).  * @param s		Overshoot ammount: higher s means greater overshoot (0 produces cubic easing with no overshoot, and the default value of 1.70158 produces an overshoot of 10 percent).  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeOutInBack
specifier|static
name|qreal
name|easeOutInBack
parameter_list|(
name|qreal
name|t
parameter_list|,
name|qreal
name|s
parameter_list|)
block|{
if|if
condition|(
name|t
operator|<
literal|0.5
condition|)
return|return
name|easeOutBack
argument_list|(
literal|2
operator|*
name|t
argument_list|,
name|s
argument_list|)
operator|/
literal|2
return|;
return|return
name|easeInBack
argument_list|(
literal|2
operator|*
name|t
operator|-
literal|1
argument_list|,
name|s
argument_list|)
operator|/
literal|2
operator|+
literal|0.5
return|;
block|}
end_function
begin_function
DECL|function|easeOutBounce_helper
specifier|static
name|qreal
name|easeOutBounce_helper
parameter_list|(
name|qreal
name|t
parameter_list|,
name|qreal
name|c
parameter_list|,
name|qreal
name|a
parameter_list|)
block|{
if|if
condition|(
name|t
operator|==
literal|1.0
condition|)
return|return
name|c
return|;
if|if
condition|(
name|t
operator|<
operator|(
literal|4
operator|/
literal|11.0
operator|)
condition|)
block|{
return|return
name|c
operator|*
operator|(
literal|7.5625
operator|*
name|t
operator|*
name|t
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|t
operator|<
operator|(
literal|8
operator|/
literal|11.0
operator|)
condition|)
block|{
name|t
operator|-=
operator|(
literal|6
operator|/
literal|11.0
operator|)
expr_stmt|;
return|return
operator|-
name|a
operator|*
operator|(
literal|1.
operator|-
operator|(
literal|7.5625
operator|*
name|t
operator|*
name|t
operator|+
literal|.75
operator|)
operator|)
operator|+
name|c
return|;
block|}
elseif|else
if|if
condition|(
name|t
operator|<
operator|(
literal|10
operator|/
literal|11.0
operator|)
condition|)
block|{
name|t
operator|-=
operator|(
literal|9
operator|/
literal|11.0
operator|)
expr_stmt|;
return|return
operator|-
name|a
operator|*
operator|(
literal|1.
operator|-
operator|(
literal|7.5625
operator|*
name|t
operator|*
name|t
operator|+
literal|.9375
operator|)
operator|)
operator|+
name|c
return|;
block|}
else|else
block|{
name|t
operator|-=
operator|(
literal|21
operator|/
literal|22.0
operator|)
expr_stmt|;
return|return
operator|-
name|a
operator|*
operator|(
literal|1.
operator|-
operator|(
literal|7.5625
operator|*
name|t
operator|*
name|t
operator|+
literal|.984375
operator|)
operator|)
operator|+
name|c
return|;
block|}
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a bounce (exponentially decaying parabolic bounce) easing out: decelerating from zero velocity.  *  * @param t		Current time (in frames or seconds).  * @param a		Amplitude.  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeOutBounce
specifier|static
name|qreal
name|easeOutBounce
parameter_list|(
name|qreal
name|t
parameter_list|,
name|qreal
name|a
parameter_list|)
block|{
return|return
name|easeOutBounce_helper
argument_list|(
name|t
argument_list|,
literal|1
argument_list|,
name|a
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a bounce (exponentially decaying parabolic bounce) easing in: accelerating from zero velocity.  *  * @param t		Current time (in frames or seconds).  * @param a		Amplitude.  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeInBounce
specifier|static
name|qreal
name|easeInBounce
parameter_list|(
name|qreal
name|t
parameter_list|,
name|qreal
name|a
parameter_list|)
block|{
return|return
literal|1.0
operator|-
name|easeOutBounce_helper
argument_list|(
literal|1.0
operator|-
name|t
argument_list|,
literal|1.0
argument_list|,
name|a
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a bounce (exponentially decaying parabolic bounce) easing in/out: acceleration until halfway, then deceleration.  *  * @param t		Current time (in frames or seconds).  * @param a		Amplitude.  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeInOutBounce
specifier|static
name|qreal
name|easeInOutBounce
parameter_list|(
name|qreal
name|t
parameter_list|,
name|qreal
name|a
parameter_list|)
block|{
if|if
condition|(
name|t
operator|<
literal|0.5
condition|)
return|return
name|easeInBounce
argument_list|(
literal|2
operator|*
name|t
argument_list|,
name|a
argument_list|)
operator|/
literal|2
return|;
else|else
return|return
operator|(
name|t
operator|==
literal|1.0
operator|)
condition|?
literal|1.0
else|:
name|easeOutBounce
argument_list|(
literal|2
operator|*
name|t
operator|-
literal|1
argument_list|,
name|a
argument_list|)
operator|/
literal|2
operator|+
literal|0.5
return|;
block|}
end_function
begin_comment
comment|/**  * Easing equation function for a bounce (exponentially decaying parabolic bounce) easing out/in: deceleration until halfway, then acceleration.  *  * @param t		Current time (in frames or seconds).  * @param a		Amplitude.  * @return		The correct value.  */
end_comment
begin_function
DECL|function|easeOutInBounce
specifier|static
name|qreal
name|easeOutInBounce
parameter_list|(
name|qreal
name|t
parameter_list|,
name|qreal
name|a
parameter_list|)
block|{
if|if
condition|(
name|t
operator|<
literal|0.5
condition|)
return|return
name|easeOutBounce_helper
argument_list|(
name|t
operator|*
literal|2
argument_list|,
literal|0.5
argument_list|,
name|a
argument_list|)
return|;
return|return
literal|1.0
operator|-
name|easeOutBounce_helper
argument_list|(
literal|2.0
operator|-
literal|2
operator|*
name|t
argument_list|,
literal|0.5
argument_list|,
name|a
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_sinProgress
specifier|static
specifier|inline
name|qreal
name|qt_sinProgress
parameter_list|(
name|qreal
name|value
parameter_list|)
block|{
return|return
name|qSin
argument_list|(
operator|(
name|value
operator|*
name|M_PI
operator|)
operator|-
name|M_PI_2
argument_list|)
operator|/
literal|2
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_smoothBeginEndMixFactor
specifier|static
specifier|inline
name|qreal
name|qt_smoothBeginEndMixFactor
parameter_list|(
name|qreal
name|value
parameter_list|)
block|{
return|return
name|qMin
argument_list|(
name|qMax
argument_list|(
literal|1
operator|-
name|value
operator|*
literal|2
operator|+
name|qreal
argument_list|(
literal|0.3
argument_list|)
argument_list|,
name|qreal
argument_list|(
literal|0.0
argument_list|)
argument_list|)
argument_list|,
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// SmoothBegin blends Smooth and Linear Interpolation.
end_comment
begin_comment
comment|// Progress 0 - 0.3      : Smooth only
end_comment
begin_comment
comment|// Progress 0.3 - ~ 0.5  : Mix of Smooth and Linear
end_comment
begin_comment
comment|// Progress ~ 0.5  - 1   : Linear only
end_comment
begin_comment
comment|/**  * Easing function that starts growing slowly, then increases in speed. At the end of the curve the speed will be constant.  */
end_comment
begin_function
DECL|function|easeInCurve
specifier|static
name|qreal
name|easeInCurve
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
specifier|const
name|qreal
name|sinProgress
init|=
name|qt_sinProgress
argument_list|(
name|t
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|mix
init|=
name|qt_smoothBeginEndMixFactor
argument_list|(
name|t
argument_list|)
decl_stmt|;
return|return
name|sinProgress
operator|*
name|mix
operator|+
name|t
operator|*
operator|(
literal|1
operator|-
name|mix
operator|)
return|;
block|}
end_function
begin_comment
comment|/**  * Easing function that starts growing steadily, then ends slowly. The speed will be constant at the beginning of the curve.  */
end_comment
begin_function
DECL|function|easeOutCurve
specifier|static
name|qreal
name|easeOutCurve
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
specifier|const
name|qreal
name|sinProgress
init|=
name|qt_sinProgress
argument_list|(
name|t
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|mix
init|=
name|qt_smoothBeginEndMixFactor
argument_list|(
literal|1
operator|-
name|t
argument_list|)
decl_stmt|;
return|return
name|sinProgress
operator|*
name|mix
operator|+
name|t
operator|*
operator|(
literal|1
operator|-
name|mix
operator|)
return|;
block|}
end_function
begin_comment
comment|/**  * Easing function where the value grows sinusoidally. Note that the calculated  end value will be 0 rather than 1.  */
end_comment
begin_function
DECL|function|easeSineCurve
specifier|static
name|qreal
name|easeSineCurve
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
return|return
operator|(
name|qSin
argument_list|(
operator|(
operator|(
name|t
operator|*
name|M_PI
operator|*
literal|2
operator|)
operator|)
operator|-
name|M_PI_2
argument_list|)
operator|+
literal|1
operator|)
operator|/
literal|2
return|;
block|}
end_function
begin_comment
comment|/**  * Easing function where the value grows cosinusoidally. Note that the calculated start value will be 0.5 and the end value will be 0.5  * contrary to the usual 0 to 1 easing curve.  */
end_comment
begin_function
DECL|function|easeCosineCurve
specifier|static
name|qreal
name|easeCosineCurve
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
return|return
operator|(
name|qCos
argument_list|(
operator|(
operator|(
name|t
operator|*
name|M_PI
operator|*
literal|2
operator|)
operator|)
operator|-
name|M_PI_2
argument_list|)
operator|+
literal|1
operator|)
operator|/
literal|2
return|;
block|}
end_function
end_unit
