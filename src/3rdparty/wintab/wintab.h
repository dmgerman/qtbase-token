begin_unit
begin_comment
comment|/* -------------------------------- wintab.h -------------------------------- */
end_comment
begin_comment
comment|/* Combined 16& 32-bit version. */
end_comment
begin_comment
comment|/*------------------------------------------------------------------------------ The text and information contained in this file may be freely used, copied, or distributed without compensation or licensing restrictions.  This file is copyright 1991-1998 by LCS/Telegraphics. ------------------------------------------------------------------------------*/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|_INC_WINTAB
end_ifndef
begin_comment
comment|/* prevent multiple includes */
end_comment
begin_define
DECL|macro|_INC_WINTAB
define|#
directive|define
name|_INC_WINTAB
end_define
begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef
begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/* -------------------------------------------------------------------------- */
comment|/* Messages */
ifndef|#
directive|ifndef
name|NOWTMESSAGES
DECL|macro|WT_DEFBASE
define|#
directive|define
name|WT_DEFBASE
value|0x7FF0
DECL|macro|WT_MAXOFFSET
define|#
directive|define
name|WT_MAXOFFSET
value|0xF
DECL|macro|_WT_PACKET
define|#
directive|define
name|_WT_PACKET
parameter_list|(
name|b
parameter_list|)
value|((b)+0)
DECL|macro|_WT_CTXOPEN
define|#
directive|define
name|_WT_CTXOPEN
parameter_list|(
name|b
parameter_list|)
value|((b)+1)
DECL|macro|_WT_CTXCLOSE
define|#
directive|define
name|_WT_CTXCLOSE
parameter_list|(
name|b
parameter_list|)
value|((b)+2)
DECL|macro|_WT_CTXUPDATE
define|#
directive|define
name|_WT_CTXUPDATE
parameter_list|(
name|b
parameter_list|)
value|((b)+3)
DECL|macro|_WT_CTXOVERLAP
define|#
directive|define
name|_WT_CTXOVERLAP
parameter_list|(
name|b
parameter_list|)
value|((b)+4)
DECL|macro|_WT_PROXIMITY
define|#
directive|define
name|_WT_PROXIMITY
parameter_list|(
name|b
parameter_list|)
value|((b)+5)
DECL|macro|_WT_INFOCHANGE
define|#
directive|define
name|_WT_INFOCHANGE
parameter_list|(
name|b
parameter_list|)
value|((b)+6)
DECL|macro|_WT_CSRCHANGE
define|#
directive|define
name|_WT_CSRCHANGE
parameter_list|(
name|b
parameter_list|)
value|((b)+7)
comment|/* 1.1 */
DECL|macro|_WT_MAX
define|#
directive|define
name|_WT_MAX
parameter_list|(
name|b
parameter_list|)
value|((b)+WT_MAXOFFSET)
DECL|macro|WT_PACKET
define|#
directive|define
name|WT_PACKET
value|_WT_PACKET(WT_DEFBASE)
DECL|macro|WT_CTXOPEN
define|#
directive|define
name|WT_CTXOPEN
value|_WT_CTXOPEN(WT_DEFBASE)
DECL|macro|WT_CTXCLOSE
define|#
directive|define
name|WT_CTXCLOSE
value|_WT_CTXCLOSE(WT_DEFBASE)
DECL|macro|WT_CTXUPDATE
define|#
directive|define
name|WT_CTXUPDATE
value|_WT_CTXUPDATE(WT_DEFBASE)
DECL|macro|WT_CTXOVERLAP
define|#
directive|define
name|WT_CTXOVERLAP
value|_WT_CTXOVERLAP(WT_DEFBASE)
DECL|macro|WT_PROXIMITY
define|#
directive|define
name|WT_PROXIMITY
value|_WT_PROXIMITY(WT_DEFBASE)
DECL|macro|WT_INFOCHANGE
define|#
directive|define
name|WT_INFOCHANGE
value|_WT_INFOCHANGE(WT_DEFBASE)
DECL|macro|WT_CSRCHANGE
define|#
directive|define
name|WT_CSRCHANGE
value|_WT_CSRCHANGE(WT_DEFBASE)
comment|/* 1.1 */
DECL|macro|WT_MAX
define|#
directive|define
name|WT_MAX
value|_WT_MAX(WT_DEFBASE)
endif|#
directive|endif
comment|/* -------------------------------------------------------------------------- */
comment|/* -------------------------------------------------------------------------- */
comment|/* Data Types */
comment|/* -------------------------------------------------------------------------- */
comment|/* COMMON DATA DEFS */
DECL|variable|HMGR
name|DECLARE_HANDLE
argument_list|(
name|HMGR
argument_list|)
expr_stmt|;
comment|/* manager handle */
DECL|variable|HCTX
name|DECLARE_HANDLE
argument_list|(
name|HCTX
argument_list|)
expr_stmt|;
comment|/* context handle */
DECL|variable|HWTHOOK
name|DECLARE_HANDLE
argument_list|(
name|HWTHOOK
argument_list|)
expr_stmt|;
comment|/* hook handle */
DECL|typedef|WTPKT
typedef|typedef
name|DWORD
name|WTPKT
typedef|;
comment|/* packet mask */
ifndef|#
directive|ifndef
name|NOWTPKT
comment|/* WTPKT bits */
DECL|macro|PK_CONTEXT
define|#
directive|define
name|PK_CONTEXT
value|0x0001
comment|/* reporting context */
DECL|macro|PK_STATUS
define|#
directive|define
name|PK_STATUS
value|0x0002
comment|/* status bits */
DECL|macro|PK_TIME
define|#
directive|define
name|PK_TIME
value|0x0004
comment|/* time stamp */
DECL|macro|PK_CHANGED
define|#
directive|define
name|PK_CHANGED
value|0x0008
comment|/* change bit vector */
DECL|macro|PK_SERIAL_NUMBER
define|#
directive|define
name|PK_SERIAL_NUMBER
value|0x0010
comment|/* packet serial number */
DECL|macro|PK_CURSOR
define|#
directive|define
name|PK_CURSOR
value|0x0020
comment|/* reporting cursor */
DECL|macro|PK_BUTTONS
define|#
directive|define
name|PK_BUTTONS
value|0x0040
comment|/* button information */
DECL|macro|PK_X
define|#
directive|define
name|PK_X
value|0x0080
comment|/* x axis */
DECL|macro|PK_Y
define|#
directive|define
name|PK_Y
value|0x0100
comment|/* y axis */
DECL|macro|PK_Z
define|#
directive|define
name|PK_Z
value|0x0200
comment|/* z axis */
DECL|macro|PK_NORMAL_PRESSURE
define|#
directive|define
name|PK_NORMAL_PRESSURE
value|0x0400
comment|/* normal or tip pressure */
DECL|macro|PK_TANGENT_PRESSURE
define|#
directive|define
name|PK_TANGENT_PRESSURE
value|0x0800
comment|/* tangential or barrel pressure */
DECL|macro|PK_ORIENTATION
define|#
directive|define
name|PK_ORIENTATION
value|0x1000
comment|/* orientation info: tilts */
DECL|macro|PK_ROTATION
define|#
directive|define
name|PK_ROTATION
value|0x2000
comment|/* rotation info; 1.1 */
endif|#
directive|endif
DECL|typedef|FIX32
typedef|typedef
name|DWORD
name|FIX32
typedef|;
comment|/* fixed-point arithmetic type */
ifndef|#
directive|ifndef
name|NOFIX32
DECL|macro|INT
define|#
directive|define
name|INT
parameter_list|(
name|x
parameter_list|)
value|HIWORD(x)
DECL|macro|FRAC
define|#
directive|define
name|FRAC
parameter_list|(
name|x
parameter_list|)
value|LOWORD(x)
DECL|macro|CASTFIX32
define|#
directive|define
name|CASTFIX32
parameter_list|(
name|x
parameter_list|)
value|((FIX32)((x)*65536L))
DECL|macro|ROUND
define|#
directive|define
name|ROUND
parameter_list|(
name|x
parameter_list|)
value|(INT(x) + (FRAC(x)> (WORD)0x8000))
DECL|macro|FIX_MUL
define|#
directive|define
name|FIX_MUL
parameter_list|(
name|c
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|)
define|\
value|(c = (((DWORD)FRAC(a) * FRAC(b))>> 16) +	\ 			(DWORD)INT(a) * FRAC(b) +				\ 			(DWORD)INT(b) * FRAC(a) +				\ 			((DWORD)INT(a) * INT(b)<< 16))
ifdef|#
directive|ifdef
name|_WINDLL
DECL|macro|FIX_DIV_SC
define|#
directive|define
name|FIX_DIV_SC
value|static
else|#
directive|else
DECL|macro|FIX_DIV_SC
define|#
directive|define
name|FIX_DIV_SC
endif|#
directive|endif
DECL|macro|FIX_DIV
define|#
directive|define
name|FIX_DIV
parameter_list|(
name|c
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|)
define|\
value|{							   			\ 			FIX_DIV_SC DWORD temp, rem, btemp;	\ 									   			\
comment|/* fraction done bytewise */
value|\ 			temp = ((a / b)<< 16);				\ 			rem = a % b;			   			\ 			btemp = b;							\ 			if (INT(btemp)< 256) {				\ 				rem<<= 8;				   		\ 			}									\ 			else {								\ 				btemp>>= 8;					\ 			}									\ 			temp += ((rem / btemp)<< 8);  		\ 			rem %= btemp;			   			\ 			rem<<= 8;				   			\ 			temp += rem / btemp;		   		\ 			c = temp;				   			\ 		}
endif|#
directive|endif
comment|/* -------------------------------------------------------------------------- */
comment|/* INFO DATA DEFS */
ifndef|#
directive|ifndef
name|NOWTINFO
ifndef|#
directive|ifndef
name|NOWTAXIS
DECL|struct|tagAXIS
typedef|typedef
struct|struct
name|tagAXIS
block|{
DECL|member|axMin
name|LONG
name|axMin
decl_stmt|;
DECL|member|axMax
name|LONG
name|axMax
decl_stmt|;
DECL|member|axUnits
name|UINT
name|axUnits
decl_stmt|;
DECL|member|axResolution
name|FIX32
name|axResolution
decl_stmt|;
block|}
DECL|typedef|AXIS
DECL|typedef|PAXIS
DECL|typedef|NPAXIS
DECL|typedef|LPAXIS
name|AXIS
operator|,
typedef|*
name|PAXIS
operator|,
name|NEAR
modifier|*
name|NPAXIS
operator|,
name|FAR
modifier|*
name|LPAXIS
typedef|;
comment|/* unit specifiers */
DECL|macro|TU_NONE
define|#
directive|define
name|TU_NONE
value|0
DECL|macro|TU_INCHES
define|#
directive|define
name|TU_INCHES
value|1
DECL|macro|TU_CENTIMETERS
define|#
directive|define
name|TU_CENTIMETERS
value|2
DECL|macro|TU_CIRCLE
define|#
directive|define
name|TU_CIRCLE
value|3
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTSYSBUTTONS
comment|/* system button assignment values */
DECL|macro|SBN_NONE
define|#
directive|define
name|SBN_NONE
value|0x00
DECL|macro|SBN_LCLICK
define|#
directive|define
name|SBN_LCLICK
value|0x01
DECL|macro|SBN_LDBLCLICK
define|#
directive|define
name|SBN_LDBLCLICK
value|0x02
DECL|macro|SBN_LDRAG
define|#
directive|define
name|SBN_LDRAG
value|0x03
DECL|macro|SBN_RCLICK
define|#
directive|define
name|SBN_RCLICK
value|0x04
DECL|macro|SBN_RDBLCLICK
define|#
directive|define
name|SBN_RDBLCLICK
value|0x05
DECL|macro|SBN_RDRAG
define|#
directive|define
name|SBN_RDRAG
value|0x06
DECL|macro|SBN_MCLICK
define|#
directive|define
name|SBN_MCLICK
value|0x07
DECL|macro|SBN_MDBLCLICK
define|#
directive|define
name|SBN_MDBLCLICK
value|0x08
DECL|macro|SBN_MDRAG
define|#
directive|define
name|SBN_MDRAG
value|0x09
comment|/* for Pen Windows */
DECL|macro|SBN_PTCLICK
define|#
directive|define
name|SBN_PTCLICK
value|0x10
DECL|macro|SBN_PTDBLCLICK
define|#
directive|define
name|SBN_PTDBLCLICK
value|0x20
DECL|macro|SBN_PTDRAG
define|#
directive|define
name|SBN_PTDRAG
value|0x30
DECL|macro|SBN_PNCLICK
define|#
directive|define
name|SBN_PNCLICK
value|0x40
DECL|macro|SBN_PNDBLCLICK
define|#
directive|define
name|SBN_PNDBLCLICK
value|0x50
DECL|macro|SBN_PNDRAG
define|#
directive|define
name|SBN_PNDRAG
value|0x60
DECL|macro|SBN_P1CLICK
define|#
directive|define
name|SBN_P1CLICK
value|0x70
DECL|macro|SBN_P1DBLCLICK
define|#
directive|define
name|SBN_P1DBLCLICK
value|0x80
DECL|macro|SBN_P1DRAG
define|#
directive|define
name|SBN_P1DRAG
value|0x90
DECL|macro|SBN_P2CLICK
define|#
directive|define
name|SBN_P2CLICK
value|0xA0
DECL|macro|SBN_P2DBLCLICK
define|#
directive|define
name|SBN_P2DBLCLICK
value|0xB0
DECL|macro|SBN_P2DRAG
define|#
directive|define
name|SBN_P2DRAG
value|0xC0
DECL|macro|SBN_P3CLICK
define|#
directive|define
name|SBN_P3CLICK
value|0xD0
DECL|macro|SBN_P3DBLCLICK
define|#
directive|define
name|SBN_P3DBLCLICK
value|0xE0
DECL|macro|SBN_P3DRAG
define|#
directive|define
name|SBN_P3DRAG
value|0xF0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTCAPABILITIES
comment|/* hardware capabilities */
DECL|macro|HWC_INTEGRATED
define|#
directive|define
name|HWC_INTEGRATED
value|0x0001
DECL|macro|HWC_TOUCH
define|#
directive|define
name|HWC_TOUCH
value|0x0002
DECL|macro|HWC_HARDPROX
define|#
directive|define
name|HWC_HARDPROX
value|0x0004
DECL|macro|HWC_PHYSID_CURSORS
define|#
directive|define
name|HWC_PHYSID_CURSORS
value|0x0008
comment|/* 1.1 */
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTIFC
ifndef|#
directive|ifndef
name|NOWTCURSORS
comment|/* cursor capabilities */
DECL|macro|CRC_MULTIMODE
define|#
directive|define
name|CRC_MULTIMODE
value|0x0001
comment|/* 1.1 */
DECL|macro|CRC_AGGREGATE
define|#
directive|define
name|CRC_AGGREGATE
value|0x0002
comment|/* 1.1 */
DECL|macro|CRC_INVERT
define|#
directive|define
name|CRC_INVERT
value|0x0004
comment|/* 1.1 */
endif|#
directive|endif
comment|/* info categories */
DECL|macro|WTI_INTERFACE
define|#
directive|define
name|WTI_INTERFACE
value|1
DECL|macro|IFC_WINTABID
define|#
directive|define
name|IFC_WINTABID
value|1
DECL|macro|IFC_SPECVERSION
define|#
directive|define
name|IFC_SPECVERSION
value|2
DECL|macro|IFC_IMPLVERSION
define|#
directive|define
name|IFC_IMPLVERSION
value|3
DECL|macro|IFC_NDEVICES
define|#
directive|define
name|IFC_NDEVICES
value|4
DECL|macro|IFC_NCURSORS
define|#
directive|define
name|IFC_NCURSORS
value|5
DECL|macro|IFC_NCONTEXTS
define|#
directive|define
name|IFC_NCONTEXTS
value|6
DECL|macro|IFC_CTXOPTIONS
define|#
directive|define
name|IFC_CTXOPTIONS
value|7
DECL|macro|IFC_CTXSAVESIZE
define|#
directive|define
name|IFC_CTXSAVESIZE
value|8
DECL|macro|IFC_NEXTENSIONS
define|#
directive|define
name|IFC_NEXTENSIONS
value|9
DECL|macro|IFC_NMANAGERS
define|#
directive|define
name|IFC_NMANAGERS
value|10
DECL|macro|IFC_MAX
define|#
directive|define
name|IFC_MAX
value|10
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTSTATUS
DECL|macro|WTI_STATUS
define|#
directive|define
name|WTI_STATUS
value|2
DECL|macro|STA_CONTEXTS
define|#
directive|define
name|STA_CONTEXTS
value|1
DECL|macro|STA_SYSCTXS
define|#
directive|define
name|STA_SYSCTXS
value|2
DECL|macro|STA_PKTRATE
define|#
directive|define
name|STA_PKTRATE
value|3
DECL|macro|STA_PKTDATA
define|#
directive|define
name|STA_PKTDATA
value|4
DECL|macro|STA_MANAGERS
define|#
directive|define
name|STA_MANAGERS
value|5
DECL|macro|STA_SYSTEM
define|#
directive|define
name|STA_SYSTEM
value|6
DECL|macro|STA_BUTTONUSE
define|#
directive|define
name|STA_BUTTONUSE
value|7
DECL|macro|STA_SYSBTNUSE
define|#
directive|define
name|STA_SYSBTNUSE
value|8
DECL|macro|STA_MAX
define|#
directive|define
name|STA_MAX
value|8
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTDEFCONTEXT
DECL|macro|WTI_DEFCONTEXT
define|#
directive|define
name|WTI_DEFCONTEXT
value|3
DECL|macro|WTI_DEFSYSCTX
define|#
directive|define
name|WTI_DEFSYSCTX
value|4
DECL|macro|WTI_DDCTXS
define|#
directive|define
name|WTI_DDCTXS
value|400
comment|/* 1.1 */
DECL|macro|WTI_DSCTXS
define|#
directive|define
name|WTI_DSCTXS
value|500
comment|/* 1.1 */
DECL|macro|CTX_NAME
define|#
directive|define
name|CTX_NAME
value|1
DECL|macro|CTX_OPTIONS
define|#
directive|define
name|CTX_OPTIONS
value|2
DECL|macro|CTX_STATUS
define|#
directive|define
name|CTX_STATUS
value|3
DECL|macro|CTX_LOCKS
define|#
directive|define
name|CTX_LOCKS
value|4
DECL|macro|CTX_MSGBASE
define|#
directive|define
name|CTX_MSGBASE
value|5
DECL|macro|CTX_DEVICE
define|#
directive|define
name|CTX_DEVICE
value|6
DECL|macro|CTX_PKTRATE
define|#
directive|define
name|CTX_PKTRATE
value|7
DECL|macro|CTX_PKTDATA
define|#
directive|define
name|CTX_PKTDATA
value|8
DECL|macro|CTX_PKTMODE
define|#
directive|define
name|CTX_PKTMODE
value|9
DECL|macro|CTX_MOVEMASK
define|#
directive|define
name|CTX_MOVEMASK
value|10
DECL|macro|CTX_BTNDNMASK
define|#
directive|define
name|CTX_BTNDNMASK
value|11
DECL|macro|CTX_BTNUPMASK
define|#
directive|define
name|CTX_BTNUPMASK
value|12
DECL|macro|CTX_INORGX
define|#
directive|define
name|CTX_INORGX
value|13
DECL|macro|CTX_INORGY
define|#
directive|define
name|CTX_INORGY
value|14
DECL|macro|CTX_INORGZ
define|#
directive|define
name|CTX_INORGZ
value|15
DECL|macro|CTX_INEXTX
define|#
directive|define
name|CTX_INEXTX
value|16
DECL|macro|CTX_INEXTY
define|#
directive|define
name|CTX_INEXTY
value|17
DECL|macro|CTX_INEXTZ
define|#
directive|define
name|CTX_INEXTZ
value|18
DECL|macro|CTX_OUTORGX
define|#
directive|define
name|CTX_OUTORGX
value|19
DECL|macro|CTX_OUTORGY
define|#
directive|define
name|CTX_OUTORGY
value|20
DECL|macro|CTX_OUTORGZ
define|#
directive|define
name|CTX_OUTORGZ
value|21
DECL|macro|CTX_OUTEXTX
define|#
directive|define
name|CTX_OUTEXTX
value|22
DECL|macro|CTX_OUTEXTY
define|#
directive|define
name|CTX_OUTEXTY
value|23
DECL|macro|CTX_OUTEXTZ
define|#
directive|define
name|CTX_OUTEXTZ
value|24
DECL|macro|CTX_SENSX
define|#
directive|define
name|CTX_SENSX
value|25
DECL|macro|CTX_SENSY
define|#
directive|define
name|CTX_SENSY
value|26
DECL|macro|CTX_SENSZ
define|#
directive|define
name|CTX_SENSZ
value|27
DECL|macro|CTX_SYSMODE
define|#
directive|define
name|CTX_SYSMODE
value|28
DECL|macro|CTX_SYSORGX
define|#
directive|define
name|CTX_SYSORGX
value|29
DECL|macro|CTX_SYSORGY
define|#
directive|define
name|CTX_SYSORGY
value|30
DECL|macro|CTX_SYSEXTX
define|#
directive|define
name|CTX_SYSEXTX
value|31
DECL|macro|CTX_SYSEXTY
define|#
directive|define
name|CTX_SYSEXTY
value|32
DECL|macro|CTX_SYSSENSX
define|#
directive|define
name|CTX_SYSSENSX
value|33
DECL|macro|CTX_SYSSENSY
define|#
directive|define
name|CTX_SYSSENSY
value|34
DECL|macro|CTX_MAX
define|#
directive|define
name|CTX_MAX
value|34
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTDEVICES
DECL|macro|WTI_DEVICES
define|#
directive|define
name|WTI_DEVICES
value|100
DECL|macro|DVC_NAME
define|#
directive|define
name|DVC_NAME
value|1
DECL|macro|DVC_HARDWARE
define|#
directive|define
name|DVC_HARDWARE
value|2
DECL|macro|DVC_NCSRTYPES
define|#
directive|define
name|DVC_NCSRTYPES
value|3
DECL|macro|DVC_FIRSTCSR
define|#
directive|define
name|DVC_FIRSTCSR
value|4
DECL|macro|DVC_PKTRATE
define|#
directive|define
name|DVC_PKTRATE
value|5
DECL|macro|DVC_PKTDATA
define|#
directive|define
name|DVC_PKTDATA
value|6
DECL|macro|DVC_PKTMODE
define|#
directive|define
name|DVC_PKTMODE
value|7
DECL|macro|DVC_CSRDATA
define|#
directive|define
name|DVC_CSRDATA
value|8
DECL|macro|DVC_XMARGIN
define|#
directive|define
name|DVC_XMARGIN
value|9
DECL|macro|DVC_YMARGIN
define|#
directive|define
name|DVC_YMARGIN
value|10
DECL|macro|DVC_ZMARGIN
define|#
directive|define
name|DVC_ZMARGIN
value|11
DECL|macro|DVC_X
define|#
directive|define
name|DVC_X
value|12
DECL|macro|DVC_Y
define|#
directive|define
name|DVC_Y
value|13
DECL|macro|DVC_Z
define|#
directive|define
name|DVC_Z
value|14
DECL|macro|DVC_NPRESSURE
define|#
directive|define
name|DVC_NPRESSURE
value|15
DECL|macro|DVC_TPRESSURE
define|#
directive|define
name|DVC_TPRESSURE
value|16
DECL|macro|DVC_ORIENTATION
define|#
directive|define
name|DVC_ORIENTATION
value|17
DECL|macro|DVC_ROTATION
define|#
directive|define
name|DVC_ROTATION
value|18
comment|/* 1.1 */
DECL|macro|DVC_PNPID
define|#
directive|define
name|DVC_PNPID
value|19
comment|/* 1.1 */
DECL|macro|DVC_MAX
define|#
directive|define
name|DVC_MAX
value|19
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTCURSORS
DECL|macro|WTI_CURSORS
define|#
directive|define
name|WTI_CURSORS
value|200
DECL|macro|CSR_NAME
define|#
directive|define
name|CSR_NAME
value|1
DECL|macro|CSR_ACTIVE
define|#
directive|define
name|CSR_ACTIVE
value|2
DECL|macro|CSR_PKTDATA
define|#
directive|define
name|CSR_PKTDATA
value|3
DECL|macro|CSR_BUTTONS
define|#
directive|define
name|CSR_BUTTONS
value|4
DECL|macro|CSR_BUTTONBITS
define|#
directive|define
name|CSR_BUTTONBITS
value|5
DECL|macro|CSR_BTNNAMES
define|#
directive|define
name|CSR_BTNNAMES
value|6
DECL|macro|CSR_BUTTONMAP
define|#
directive|define
name|CSR_BUTTONMAP
value|7
DECL|macro|CSR_SYSBTNMAP
define|#
directive|define
name|CSR_SYSBTNMAP
value|8
DECL|macro|CSR_NPBUTTON
define|#
directive|define
name|CSR_NPBUTTON
value|9
DECL|macro|CSR_NPBTNMARKS
define|#
directive|define
name|CSR_NPBTNMARKS
value|10
DECL|macro|CSR_NPRESPONSE
define|#
directive|define
name|CSR_NPRESPONSE
value|11
DECL|macro|CSR_TPBUTTON
define|#
directive|define
name|CSR_TPBUTTON
value|12
DECL|macro|CSR_TPBTNMARKS
define|#
directive|define
name|CSR_TPBTNMARKS
value|13
DECL|macro|CSR_TPRESPONSE
define|#
directive|define
name|CSR_TPRESPONSE
value|14
DECL|macro|CSR_PHYSID
define|#
directive|define
name|CSR_PHYSID
value|15
comment|/* 1.1 */
DECL|macro|CSR_MODE
define|#
directive|define
name|CSR_MODE
value|16
comment|/* 1.1 */
DECL|macro|CSR_MINPKTDATA
define|#
directive|define
name|CSR_MINPKTDATA
value|17
comment|/* 1.1 */
DECL|macro|CSR_MINBUTTONS
define|#
directive|define
name|CSR_MINBUTTONS
value|18
comment|/* 1.1 */
DECL|macro|CSR_CAPABILITIES
define|#
directive|define
name|CSR_CAPABILITIES
value|19
comment|/* 1.1 */
DECL|macro|CSR_TYPE
define|#
directive|define
name|CSR_TYPE
value|20
comment|/* 1.2 */
DECL|macro|CSR_MAX
define|#
directive|define
name|CSR_MAX
value|20
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTEXTENSIONS
DECL|macro|WTI_EXTENSIONS
define|#
directive|define
name|WTI_EXTENSIONS
value|300
DECL|macro|EXT_NAME
define|#
directive|define
name|EXT_NAME
value|1
DECL|macro|EXT_TAG
define|#
directive|define
name|EXT_TAG
value|2
DECL|macro|EXT_MASK
define|#
directive|define
name|EXT_MASK
value|3
DECL|macro|EXT_SIZE
define|#
directive|define
name|EXT_SIZE
value|4
DECL|macro|EXT_AXES
define|#
directive|define
name|EXT_AXES
value|5
DECL|macro|EXT_DEFAULT
define|#
directive|define
name|EXT_DEFAULT
value|6
DECL|macro|EXT_DEFCONTEXT
define|#
directive|define
name|EXT_DEFCONTEXT
value|7
DECL|macro|EXT_DEFSYSCTX
define|#
directive|define
name|EXT_DEFSYSCTX
value|8
DECL|macro|EXT_CURSORS
define|#
directive|define
name|EXT_CURSORS
value|9
DECL|macro|EXT_MAX
define|#
directive|define
name|EXT_MAX
value|109
comment|/* Allow 100 cursors */
endif|#
directive|endif
endif|#
directive|endif
comment|/* -------------------------------------------------------------------------- */
comment|/* CONTEXT DATA DEFS */
DECL|macro|LCNAMELEN
define|#
directive|define
name|LCNAMELEN
value|40
DECL|macro|LC_NAMELEN
define|#
directive|define
name|LC_NAMELEN
value|40
ifdef|#
directive|ifdef
name|WIN32
DECL|struct|tagLOGCONTEXTA
typedef|typedef
struct|struct
name|tagLOGCONTEXTA
block|{
DECL|member|lcName
name|char
name|lcName
index|[
name|LCNAMELEN
index|]
decl_stmt|;
DECL|member|lcOptions
name|UINT
name|lcOptions
decl_stmt|;
DECL|member|lcStatus
name|UINT
name|lcStatus
decl_stmt|;
DECL|member|lcLocks
name|UINT
name|lcLocks
decl_stmt|;
DECL|member|lcMsgBase
name|UINT
name|lcMsgBase
decl_stmt|;
DECL|member|lcDevice
name|UINT
name|lcDevice
decl_stmt|;
DECL|member|lcPktRate
name|UINT
name|lcPktRate
decl_stmt|;
DECL|member|lcPktData
name|WTPKT
name|lcPktData
decl_stmt|;
DECL|member|lcPktMode
name|WTPKT
name|lcPktMode
decl_stmt|;
DECL|member|lcMoveMask
name|WTPKT
name|lcMoveMask
decl_stmt|;
DECL|member|lcBtnDnMask
name|DWORD
name|lcBtnDnMask
decl_stmt|;
DECL|member|lcBtnUpMask
name|DWORD
name|lcBtnUpMask
decl_stmt|;
DECL|member|lcInOrgX
name|LONG
name|lcInOrgX
decl_stmt|;
DECL|member|lcInOrgY
name|LONG
name|lcInOrgY
decl_stmt|;
DECL|member|lcInOrgZ
name|LONG
name|lcInOrgZ
decl_stmt|;
DECL|member|lcInExtX
name|LONG
name|lcInExtX
decl_stmt|;
DECL|member|lcInExtY
name|LONG
name|lcInExtY
decl_stmt|;
DECL|member|lcInExtZ
name|LONG
name|lcInExtZ
decl_stmt|;
DECL|member|lcOutOrgX
name|LONG
name|lcOutOrgX
decl_stmt|;
DECL|member|lcOutOrgY
name|LONG
name|lcOutOrgY
decl_stmt|;
DECL|member|lcOutOrgZ
name|LONG
name|lcOutOrgZ
decl_stmt|;
DECL|member|lcOutExtX
name|LONG
name|lcOutExtX
decl_stmt|;
DECL|member|lcOutExtY
name|LONG
name|lcOutExtY
decl_stmt|;
DECL|member|lcOutExtZ
name|LONG
name|lcOutExtZ
decl_stmt|;
DECL|member|lcSensX
name|FIX32
name|lcSensX
decl_stmt|;
DECL|member|lcSensY
name|FIX32
name|lcSensY
decl_stmt|;
DECL|member|lcSensZ
name|FIX32
name|lcSensZ
decl_stmt|;
DECL|member|lcSysMode
name|BOOL
name|lcSysMode
decl_stmt|;
DECL|member|lcSysOrgX
name|int
name|lcSysOrgX
decl_stmt|;
DECL|member|lcSysOrgY
name|int
name|lcSysOrgY
decl_stmt|;
DECL|member|lcSysExtX
name|int
name|lcSysExtX
decl_stmt|;
DECL|member|lcSysExtY
name|int
name|lcSysExtY
decl_stmt|;
DECL|member|lcSysSensX
name|FIX32
name|lcSysSensX
decl_stmt|;
DECL|member|lcSysSensY
name|FIX32
name|lcSysSensY
decl_stmt|;
block|}
DECL|typedef|LOGCONTEXTA
DECL|typedef|PLOGCONTEXTA
DECL|typedef|NPLOGCONTEXTA
DECL|typedef|LPLOGCONTEXTA
name|LOGCONTEXTA
operator|,
typedef|*
name|PLOGCONTEXTA
operator|,
name|NEAR
modifier|*
name|NPLOGCONTEXTA
operator|,
name|FAR
modifier|*
name|LPLOGCONTEXTA
typedef|;
DECL|struct|tagLOGCONTEXTW
typedef|typedef
struct|struct
name|tagLOGCONTEXTW
block|{
DECL|member|lcName
name|WCHAR
name|lcName
index|[
name|LCNAMELEN
index|]
decl_stmt|;
DECL|member|lcOptions
name|UINT
name|lcOptions
decl_stmt|;
DECL|member|lcStatus
name|UINT
name|lcStatus
decl_stmt|;
DECL|member|lcLocks
name|UINT
name|lcLocks
decl_stmt|;
DECL|member|lcMsgBase
name|UINT
name|lcMsgBase
decl_stmt|;
DECL|member|lcDevice
name|UINT
name|lcDevice
decl_stmt|;
DECL|member|lcPktRate
name|UINT
name|lcPktRate
decl_stmt|;
DECL|member|lcPktData
name|WTPKT
name|lcPktData
decl_stmt|;
DECL|member|lcPktMode
name|WTPKT
name|lcPktMode
decl_stmt|;
DECL|member|lcMoveMask
name|WTPKT
name|lcMoveMask
decl_stmt|;
DECL|member|lcBtnDnMask
name|DWORD
name|lcBtnDnMask
decl_stmt|;
DECL|member|lcBtnUpMask
name|DWORD
name|lcBtnUpMask
decl_stmt|;
DECL|member|lcInOrgX
name|LONG
name|lcInOrgX
decl_stmt|;
DECL|member|lcInOrgY
name|LONG
name|lcInOrgY
decl_stmt|;
DECL|member|lcInOrgZ
name|LONG
name|lcInOrgZ
decl_stmt|;
DECL|member|lcInExtX
name|LONG
name|lcInExtX
decl_stmt|;
DECL|member|lcInExtY
name|LONG
name|lcInExtY
decl_stmt|;
DECL|member|lcInExtZ
name|LONG
name|lcInExtZ
decl_stmt|;
DECL|member|lcOutOrgX
name|LONG
name|lcOutOrgX
decl_stmt|;
DECL|member|lcOutOrgY
name|LONG
name|lcOutOrgY
decl_stmt|;
DECL|member|lcOutOrgZ
name|LONG
name|lcOutOrgZ
decl_stmt|;
DECL|member|lcOutExtX
name|LONG
name|lcOutExtX
decl_stmt|;
DECL|member|lcOutExtY
name|LONG
name|lcOutExtY
decl_stmt|;
DECL|member|lcOutExtZ
name|LONG
name|lcOutExtZ
decl_stmt|;
DECL|member|lcSensX
name|FIX32
name|lcSensX
decl_stmt|;
DECL|member|lcSensY
name|FIX32
name|lcSensY
decl_stmt|;
DECL|member|lcSensZ
name|FIX32
name|lcSensZ
decl_stmt|;
DECL|member|lcSysMode
name|BOOL
name|lcSysMode
decl_stmt|;
DECL|member|lcSysOrgX
name|int
name|lcSysOrgX
decl_stmt|;
DECL|member|lcSysOrgY
name|int
name|lcSysOrgY
decl_stmt|;
DECL|member|lcSysExtX
name|int
name|lcSysExtX
decl_stmt|;
DECL|member|lcSysExtY
name|int
name|lcSysExtY
decl_stmt|;
DECL|member|lcSysSensX
name|FIX32
name|lcSysSensX
decl_stmt|;
DECL|member|lcSysSensY
name|FIX32
name|lcSysSensY
decl_stmt|;
block|}
DECL|typedef|LOGCONTEXTW
DECL|typedef|PLOGCONTEXTW
DECL|typedef|NPLOGCONTEXTW
DECL|typedef|LPLOGCONTEXTW
name|LOGCONTEXTW
operator|,
typedef|*
name|PLOGCONTEXTW
operator|,
name|NEAR
modifier|*
name|NPLOGCONTEXTW
operator|,
name|FAR
modifier|*
name|LPLOGCONTEXTW
typedef|;
ifdef|#
directive|ifdef
name|UNICODE
DECL|typedef|LOGCONTEXT
typedef|typedef
name|LOGCONTEXTW
name|LOGCONTEXT
typedef|;
DECL|typedef|PLOGCONTEXT
typedef|typedef
name|PLOGCONTEXTW
name|PLOGCONTEXT
typedef|;
DECL|typedef|NPLOGCONTEXT
typedef|typedef
name|NPLOGCONTEXTW
name|NPLOGCONTEXT
typedef|;
DECL|typedef|LPLOGCONTEXT
typedef|typedef
name|LPLOGCONTEXTW
name|LPLOGCONTEXT
typedef|;
else|#
directive|else
DECL|typedef|LOGCONTEXT
typedef|typedef
name|LOGCONTEXTA
name|LOGCONTEXT
typedef|;
DECL|typedef|PLOGCONTEXT
typedef|typedef
name|PLOGCONTEXTA
name|PLOGCONTEXT
typedef|;
DECL|typedef|NPLOGCONTEXT
typedef|typedef
name|NPLOGCONTEXTA
name|NPLOGCONTEXT
typedef|;
DECL|typedef|LPLOGCONTEXT
typedef|typedef
name|LPLOGCONTEXTA
name|LPLOGCONTEXT
typedef|;
endif|#
directive|endif
comment|/* UNICODE */
else|#
directive|else
comment|/* WIN32 */
DECL|struct|tagLOGCONTEXT
typedef|typedef
struct|struct
name|tagLOGCONTEXT
block|{
DECL|member|lcName
name|char
name|lcName
index|[
name|LCNAMELEN
index|]
decl_stmt|;
DECL|member|lcOptions
name|UINT
name|lcOptions
decl_stmt|;
DECL|member|lcStatus
name|UINT
name|lcStatus
decl_stmt|;
DECL|member|lcLocks
name|UINT
name|lcLocks
decl_stmt|;
DECL|member|lcMsgBase
name|UINT
name|lcMsgBase
decl_stmt|;
DECL|member|lcDevice
name|UINT
name|lcDevice
decl_stmt|;
DECL|member|lcPktRate
name|UINT
name|lcPktRate
decl_stmt|;
DECL|member|lcPktData
name|WTPKT
name|lcPktData
decl_stmt|;
DECL|member|lcPktMode
name|WTPKT
name|lcPktMode
decl_stmt|;
DECL|member|lcMoveMask
name|WTPKT
name|lcMoveMask
decl_stmt|;
DECL|member|lcBtnDnMask
name|DWORD
name|lcBtnDnMask
decl_stmt|;
DECL|member|lcBtnUpMask
name|DWORD
name|lcBtnUpMask
decl_stmt|;
DECL|member|lcInOrgX
name|LONG
name|lcInOrgX
decl_stmt|;
DECL|member|lcInOrgY
name|LONG
name|lcInOrgY
decl_stmt|;
DECL|member|lcInOrgZ
name|LONG
name|lcInOrgZ
decl_stmt|;
DECL|member|lcInExtX
name|LONG
name|lcInExtX
decl_stmt|;
DECL|member|lcInExtY
name|LONG
name|lcInExtY
decl_stmt|;
DECL|member|lcInExtZ
name|LONG
name|lcInExtZ
decl_stmt|;
DECL|member|lcOutOrgX
name|LONG
name|lcOutOrgX
decl_stmt|;
DECL|member|lcOutOrgY
name|LONG
name|lcOutOrgY
decl_stmt|;
DECL|member|lcOutOrgZ
name|LONG
name|lcOutOrgZ
decl_stmt|;
DECL|member|lcOutExtX
name|LONG
name|lcOutExtX
decl_stmt|;
DECL|member|lcOutExtY
name|LONG
name|lcOutExtY
decl_stmt|;
DECL|member|lcOutExtZ
name|LONG
name|lcOutExtZ
decl_stmt|;
DECL|member|lcSensX
name|FIX32
name|lcSensX
decl_stmt|;
DECL|member|lcSensY
name|FIX32
name|lcSensY
decl_stmt|;
DECL|member|lcSensZ
name|FIX32
name|lcSensZ
decl_stmt|;
DECL|member|lcSysMode
name|BOOL
name|lcSysMode
decl_stmt|;
DECL|member|lcSysOrgX
name|int
name|lcSysOrgX
decl_stmt|;
DECL|member|lcSysOrgY
name|int
name|lcSysOrgY
decl_stmt|;
DECL|member|lcSysExtX
name|int
name|lcSysExtX
decl_stmt|;
DECL|member|lcSysExtY
name|int
name|lcSysExtY
decl_stmt|;
DECL|member|lcSysSensX
name|FIX32
name|lcSysSensX
decl_stmt|;
DECL|member|lcSysSensY
name|FIX32
name|lcSysSensY
decl_stmt|;
block|}
DECL|typedef|LOGCONTEXT
DECL|typedef|PLOGCONTEXT
DECL|typedef|NPLOGCONTEXT
DECL|typedef|LPLOGCONTEXT
name|LOGCONTEXT
operator|,
typedef|*
name|PLOGCONTEXT
operator|,
name|NEAR
modifier|*
name|NPLOGCONTEXT
operator|,
name|FAR
modifier|*
name|LPLOGCONTEXT
typedef|;
endif|#
directive|endif
comment|/* WIN32 */
comment|/* context option values */
DECL|macro|CXO_SYSTEM
define|#
directive|define
name|CXO_SYSTEM
value|0x0001
DECL|macro|CXO_PEN
define|#
directive|define
name|CXO_PEN
value|0x0002
DECL|macro|CXO_MESSAGES
define|#
directive|define
name|CXO_MESSAGES
value|0x0004
DECL|macro|CXO_MARGIN
define|#
directive|define
name|CXO_MARGIN
value|0x8000
DECL|macro|CXO_MGNINSIDE
define|#
directive|define
name|CXO_MGNINSIDE
value|0x4000
DECL|macro|CXO_CSRMESSAGES
define|#
directive|define
name|CXO_CSRMESSAGES
value|0x0008
comment|/* 1.1 */
comment|/* context status values */
DECL|macro|CXS_DISABLED
define|#
directive|define
name|CXS_DISABLED
value|0x0001
DECL|macro|CXS_OBSCURED
define|#
directive|define
name|CXS_OBSCURED
value|0x0002
DECL|macro|CXS_ONTOP
define|#
directive|define
name|CXS_ONTOP
value|0x0004
comment|/* context lock values */
DECL|macro|CXL_INSIZE
define|#
directive|define
name|CXL_INSIZE
value|0x0001
DECL|macro|CXL_INASPECT
define|#
directive|define
name|CXL_INASPECT
value|0x0002
DECL|macro|CXL_SENSITIVITY
define|#
directive|define
name|CXL_SENSITIVITY
value|0x0004
DECL|macro|CXL_MARGIN
define|#
directive|define
name|CXL_MARGIN
value|0x0008
DECL|macro|CXL_SYSOUT
define|#
directive|define
name|CXL_SYSOUT
value|0x0010
comment|/* -------------------------------------------------------------------------- */
comment|/* EVENT DATA DEFS */
comment|/* For packet structure definition, see pktdef.h */
comment|/* packet status values */
DECL|macro|TPS_PROXIMITY
define|#
directive|define
name|TPS_PROXIMITY
value|0x0001
DECL|macro|TPS_QUEUE_ERR
define|#
directive|define
name|TPS_QUEUE_ERR
value|0x0002
DECL|macro|TPS_MARGIN
define|#
directive|define
name|TPS_MARGIN
value|0x0004
DECL|macro|TPS_GRAB
define|#
directive|define
name|TPS_GRAB
value|0x0008
DECL|macro|TPS_INVERT
define|#
directive|define
name|TPS_INVERT
value|0x0010
comment|/* 1.1 */
DECL|struct|tagORIENTATION
typedef|typedef
struct|struct
name|tagORIENTATION
block|{
DECL|member|orAzimuth
name|int
name|orAzimuth
decl_stmt|;
DECL|member|orAltitude
name|int
name|orAltitude
decl_stmt|;
DECL|member|orTwist
name|int
name|orTwist
decl_stmt|;
block|}
DECL|typedef|ORIENTATION
DECL|typedef|PORIENTATION
DECL|typedef|NPORIENTATION
DECL|typedef|LPORIENTATION
name|ORIENTATION
operator|,
typedef|*
name|PORIENTATION
operator|,
name|NEAR
modifier|*
name|NPORIENTATION
operator|,
name|FAR
modifier|*
name|LPORIENTATION
typedef|;
DECL|struct|tagROTATION
typedef|typedef
struct|struct
name|tagROTATION
block|{
comment|/* 1.1 */
DECL|member|roPitch
name|int
name|roPitch
decl_stmt|;
DECL|member|roRoll
name|int
name|roRoll
decl_stmt|;
DECL|member|roYaw
name|int
name|roYaw
decl_stmt|;
block|}
DECL|typedef|ROTATION
DECL|typedef|PROTATION
DECL|typedef|NPROTATION
DECL|typedef|LPROTATION
name|ROTATION
operator|,
typedef|*
name|PROTATION
operator|,
name|NEAR
modifier|*
name|NPROTATION
operator|,
name|FAR
modifier|*
name|LPROTATION
typedef|;
comment|// grandfather in obsolete member names.
DECL|macro|rotPitch
define|#
directive|define
name|rotPitch
value|roPitch
DECL|macro|rotRoll
define|#
directive|define
name|rotRoll
value|roRoll
DECL|macro|rotYaw
define|#
directive|define
name|rotYaw
value|roYaw
comment|/* relative buttons */
DECL|macro|TBN_NONE
define|#
directive|define
name|TBN_NONE
value|0
DECL|macro|TBN_UP
define|#
directive|define
name|TBN_UP
value|1
DECL|macro|TBN_DOWN
define|#
directive|define
name|TBN_DOWN
value|2
comment|/* -------------------------------------------------------------------------- */
comment|/* DEVICE CONFIG CONSTANTS */
ifndef|#
directive|ifndef
name|NOWTDEVCFG
DECL|macro|WTDC_NONE
define|#
directive|define
name|WTDC_NONE
value|0
DECL|macro|WTDC_CANCEL
define|#
directive|define
name|WTDC_CANCEL
value|1
DECL|macro|WTDC_OK
define|#
directive|define
name|WTDC_OK
value|2
DECL|macro|WTDC_RESTART
define|#
directive|define
name|WTDC_RESTART
value|3
endif|#
directive|endif
comment|/* -------------------------------------------------------------------------- */
comment|/* HOOK CONSTANTS */
ifndef|#
directive|ifndef
name|NOWTHOOKS
DECL|macro|WTH_PLAYBACK
define|#
directive|define
name|WTH_PLAYBACK
value|1
DECL|macro|WTH_RECORD
define|#
directive|define
name|WTH_RECORD
value|2
DECL|macro|WTHC_GETLPLPFN
define|#
directive|define
name|WTHC_GETLPLPFN
value|(-3)
DECL|macro|WTHC_LPLPFNNEXT
define|#
directive|define
name|WTHC_LPLPFNNEXT
value|(-2)
DECL|macro|WTHC_LPFNNEXT
define|#
directive|define
name|WTHC_LPFNNEXT
value|(-1)
DECL|macro|WTHC_ACTION
define|#
directive|define
name|WTHC_ACTION
value|0
DECL|macro|WTHC_GETNEXT
define|#
directive|define
name|WTHC_GETNEXT
value|1
DECL|macro|WTHC_SKIP
define|#
directive|define
name|WTHC_SKIP
value|2
endif|#
directive|endif
comment|/* -------------------------------------------------------------------------- */
comment|/* PREFERENCE FUNCTION CONSTANTS */
ifndef|#
directive|ifndef
name|NOWTPREF
DECL|macro|WTP_LPDEFAULT
define|#
directive|define
name|WTP_LPDEFAULT
value|((LPVOID)-1L)
DECL|macro|WTP_DWDEFAULT
define|#
directive|define
name|WTP_DWDEFAULT
value|((DWORD)-1L)
endif|#
directive|endif
comment|/* -------------------------------------------------------------------------- */
comment|/* EXTENSION TAGS AND CONSTANTS */
ifndef|#
directive|ifndef
name|NOWTEXTENSIONS
comment|/* constants for use with pktdef.h */
DECL|macro|PKEXT_ABSOLUTE
define|#
directive|define
name|PKEXT_ABSOLUTE
value|1
DECL|macro|PKEXT_RELATIVE
define|#
directive|define
name|PKEXT_RELATIVE
value|2
comment|/* Extension tags. */
DECL|macro|WTX_OBT
define|#
directive|define
name|WTX_OBT
value|0
comment|/* Out of bounds tracking */
DECL|macro|WTX_FKEYS
define|#
directive|define
name|WTX_FKEYS
value|1
comment|/* Function keys */
DECL|macro|WTX_TILT
define|#
directive|define
name|WTX_TILT
value|2
comment|/* Raw Cartesian tilt; 1.1 */
DECL|macro|WTX_CSRMASK
define|#
directive|define
name|WTX_CSRMASK
value|3
comment|/* select input by cursor type; 1.1 */
DECL|macro|WTX_XBTNMASK
define|#
directive|define
name|WTX_XBTNMASK
value|4
comment|/* Extended button mask; 1.1 */
DECL|struct|tagXBTNMASK
typedef|typedef
struct|struct
name|tagXBTNMASK
block|{
DECL|member|xBtnDnMask
name|BYTE
name|xBtnDnMask
index|[
literal|32
index|]
decl_stmt|;
DECL|member|xBtnUpMask
name|BYTE
name|xBtnUpMask
index|[
literal|32
index|]
decl_stmt|;
block|}
DECL|typedef|XBTNMASK
name|XBTNMASK
typedef|;
DECL|struct|tagTILT
typedef|typedef
struct|struct
name|tagTILT
block|{
comment|/* 1.1 */
DECL|member|tiltX
name|int
name|tiltX
decl_stmt|;
DECL|member|tiltY
name|int
name|tiltY
decl_stmt|;
block|}
DECL|typedef|TILT
name|TILT
typedef|;
endif|#
directive|endif
comment|/* -------------------------------------------------------------------------- */
comment|/* -------------------------------------------------------------------------- */
comment|/* Functions */
ifndef|#
directive|ifndef
name|API
ifndef|#
directive|ifndef
name|WINAPI
DECL|macro|API
define|#
directive|define
name|API
value|FAR PASCAL
else|#
directive|else
DECL|macro|API
define|#
directive|define
name|API
value|WINAPI
endif|#
directive|endif
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTCALLBACKS
ifndef|#
directive|ifndef
name|CALLBACK
DECL|macro|CALLBACK
define|#
directive|define
name|CALLBACK
value|FAR PASCAL
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTMANAGERFXNS
comment|/* callback function types */
DECL|typedef|WTENUMPROC
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|WTENUMPROC
function_decl|)
parameter_list|(
name|HCTX
parameter_list|,
name|LPARAM
parameter_list|)
function_decl|;
comment|/* changed CALLBACK->WINAPI, 1.1 */
DECL|typedef|WTCONFIGPROC
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|WTCONFIGPROC
function_decl|)
parameter_list|(
name|HCTX
parameter_list|,
name|HWND
parameter_list|)
function_decl|;
DECL|typedef|WTHOOKPROC
typedef|typedef
name|LRESULT
function_decl|(
name|WINAPI
modifier|*
name|WTHOOKPROC
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|WPARAM
parameter_list|,
name|LPARAM
parameter_list|)
function_decl|;
DECL|typedef|LPWTHOOKPROC
typedef|typedef
name|WTHOOKPROC
name|FAR
modifier|*
name|LPWTHOOKPROC
typedef|;
endif|#
directive|endif
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTFUNCTIONS
ifndef|#
directive|ifndef
name|NOWTBASICFXNS
comment|/* BASIC FUNCTIONS */
ifdef|#
directive|ifdef
name|WIN32
name|UINT
name|API
name|WTInfoA
parameter_list|(
name|UINT
parameter_list|,
name|UINT
parameter_list|,
name|LPVOID
parameter_list|)
function_decl|;
DECL|macro|ORD_WTInfoA
define|#
directive|define
name|ORD_WTInfoA
value|20
name|UINT
name|API
name|WTInfoW
parameter_list|(
name|UINT
parameter_list|,
name|UINT
parameter_list|,
name|LPVOID
parameter_list|)
function_decl|;
DECL|macro|ORD_WTInfoW
define|#
directive|define
name|ORD_WTInfoW
value|1020
ifdef|#
directive|ifdef
name|UNICODE
DECL|macro|WTInfo
define|#
directive|define
name|WTInfo
value|WTInfoW
DECL|macro|ORD_WTInfo
define|#
directive|define
name|ORD_WTInfo
value|ORD_WTInfoW
else|#
directive|else
DECL|macro|WTInfo
define|#
directive|define
name|WTInfo
value|WTInfoA
DECL|macro|ORD_WTInfo
define|#
directive|define
name|ORD_WTInfo
value|ORD_WTInfoA
endif|#
directive|endif
comment|/* !UNICODE */
else|#
directive|else
name|UINT
name|API
name|WTInfo
parameter_list|(
name|UINT
parameter_list|,
name|UINT
parameter_list|,
name|LPVOID
parameter_list|)
function_decl|;
DECL|macro|ORD_WTInfo
define|#
directive|define
name|ORD_WTInfo
value|20
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WIN32
name|HCTX
name|API
name|WTOpenA
parameter_list|(
name|HWND
parameter_list|,
name|LPLOGCONTEXTA
parameter_list|,
name|BOOL
parameter_list|)
function_decl|;
DECL|macro|ORD_WTOpenA
define|#
directive|define
name|ORD_WTOpenA
value|21
name|HCTX
name|API
name|WTOpenW
parameter_list|(
name|HWND
parameter_list|,
name|LPLOGCONTEXTW
parameter_list|,
name|BOOL
parameter_list|)
function_decl|;
DECL|macro|ORD_WTOpenW
define|#
directive|define
name|ORD_WTOpenW
value|1021
ifdef|#
directive|ifdef
name|UNICODE
DECL|macro|WTOpen
define|#
directive|define
name|WTOpen
value|WTOpenW
DECL|macro|ORD_WTOpen
define|#
directive|define
name|ORD_WTOpen
value|ORD_WTOpenW
else|#
directive|else
DECL|macro|WTOpen
define|#
directive|define
name|WTOpen
value|WTOpenA
DECL|macro|ORD_WTOpen
define|#
directive|define
name|ORD_WTOpen
value|ORD_WTOpenA
endif|#
directive|endif
comment|/* !UNICODE */
else|#
directive|else
name|HCTX
name|API
name|WTOpen
parameter_list|(
name|HWND
parameter_list|,
name|LPLOGCONTEXT
parameter_list|,
name|BOOL
parameter_list|)
function_decl|;
DECL|macro|ORD_WTOpen
define|#
directive|define
name|ORD_WTOpen
value|21
endif|#
directive|endif
name|BOOL
name|API
name|WTClose
parameter_list|(
name|HCTX
parameter_list|)
function_decl|;
DECL|macro|ORD_WTClose
define|#
directive|define
name|ORD_WTClose
value|22
name|int
name|API
name|WTPacketsGet
parameter_list|(
name|HCTX
parameter_list|,
name|int
parameter_list|,
name|LPVOID
parameter_list|)
function_decl|;
DECL|macro|ORD_WTPacketsGet
define|#
directive|define
name|ORD_WTPacketsGet
value|23
name|BOOL
name|API
name|WTPacket
parameter_list|(
name|HCTX
parameter_list|,
name|UINT
parameter_list|,
name|LPVOID
parameter_list|)
function_decl|;
DECL|macro|ORD_WTPacket
define|#
directive|define
name|ORD_WTPacket
value|24
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTVISIBILITYFXNS
comment|/* VISIBILITY FUNCTIONS */
name|BOOL
name|API
name|WTEnable
parameter_list|(
name|HCTX
parameter_list|,
name|BOOL
parameter_list|)
function_decl|;
DECL|macro|ORD_WTEnable
define|#
directive|define
name|ORD_WTEnable
value|40
name|BOOL
name|API
name|WTOverlap
parameter_list|(
name|HCTX
parameter_list|,
name|BOOL
parameter_list|)
function_decl|;
DECL|macro|ORD_WTOverlap
define|#
directive|define
name|ORD_WTOverlap
value|41
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTCTXEDITFXNS
comment|/* CONTEXT EDITING FUNCTIONS */
name|BOOL
name|API
name|WTConfig
parameter_list|(
name|HCTX
parameter_list|,
name|HWND
parameter_list|)
function_decl|;
DECL|macro|ORD_WTConfig
define|#
directive|define
name|ORD_WTConfig
value|60
ifdef|#
directive|ifdef
name|WIN32
name|BOOL
name|API
name|WTGetA
parameter_list|(
name|HCTX
parameter_list|,
name|LPLOGCONTEXTA
parameter_list|)
function_decl|;
DECL|macro|ORD_WTGetA
define|#
directive|define
name|ORD_WTGetA
value|61
name|BOOL
name|API
name|WTGetW
parameter_list|(
name|HCTX
parameter_list|,
name|LPLOGCONTEXTW
parameter_list|)
function_decl|;
DECL|macro|ORD_WTGetW
define|#
directive|define
name|ORD_WTGetW
value|1061
ifdef|#
directive|ifdef
name|UNICODE
DECL|macro|WTGet
define|#
directive|define
name|WTGet
value|WTGetW
DECL|macro|ORD_WTGet
define|#
directive|define
name|ORD_WTGet
value|ORD_WTGetW
else|#
directive|else
DECL|macro|WTGet
define|#
directive|define
name|WTGet
value|WTGetA
DECL|macro|ORD_WTGet
define|#
directive|define
name|ORD_WTGet
value|ORD_WTGetA
endif|#
directive|endif
comment|/* !UNICODE */
else|#
directive|else
name|BOOL
name|API
name|WTGet
parameter_list|(
name|HCTX
parameter_list|,
name|LPLOGCONTEXT
parameter_list|)
function_decl|;
DECL|macro|ORD_WTGet
define|#
directive|define
name|ORD_WTGet
value|61
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WIN32
name|BOOL
name|API
name|WTSetA
parameter_list|(
name|HCTX
parameter_list|,
name|LPLOGCONTEXTA
parameter_list|)
function_decl|;
DECL|macro|ORD_WTSetA
define|#
directive|define
name|ORD_WTSetA
value|62
name|BOOL
name|API
name|WTSetW
parameter_list|(
name|HCTX
parameter_list|,
name|LPLOGCONTEXTW
parameter_list|)
function_decl|;
DECL|macro|ORD_WTSetW
define|#
directive|define
name|ORD_WTSetW
value|1062
ifdef|#
directive|ifdef
name|UNICODE
DECL|macro|WTSet
define|#
directive|define
name|WTSet
value|WTSetW
DECL|macro|ORD_WTSet
define|#
directive|define
name|ORD_WTSet
value|ORD_WTSetW
else|#
directive|else
DECL|macro|WTSet
define|#
directive|define
name|WTSet
value|WTSetA
DECL|macro|ORD_WTSet
define|#
directive|define
name|ORD_WTSet
value|ORD_WTSetA
endif|#
directive|endif
comment|/* !UNICODE */
else|#
directive|else
name|BOOL
name|API
name|WTSet
parameter_list|(
name|HCTX
parameter_list|,
name|LPLOGCONTEXT
parameter_list|)
function_decl|;
DECL|macro|ORD_WTSet
define|#
directive|define
name|ORD_WTSet
value|62
endif|#
directive|endif
name|BOOL
name|API
name|WTExtGet
parameter_list|(
name|HCTX
parameter_list|,
name|UINT
parameter_list|,
name|LPVOID
parameter_list|)
function_decl|;
DECL|macro|ORD_WTExtGet
define|#
directive|define
name|ORD_WTExtGet
value|63
name|BOOL
name|API
name|WTExtSet
parameter_list|(
name|HCTX
parameter_list|,
name|UINT
parameter_list|,
name|LPVOID
parameter_list|)
function_decl|;
DECL|macro|ORD_WTExtSet
define|#
directive|define
name|ORD_WTExtSet
value|64
name|BOOL
name|API
name|WTSave
parameter_list|(
name|HCTX
parameter_list|,
name|LPVOID
parameter_list|)
function_decl|;
DECL|macro|ORD_WTSave
define|#
directive|define
name|ORD_WTSave
value|65
name|HCTX
name|API
name|WTRestore
parameter_list|(
name|HWND
parameter_list|,
name|LPVOID
parameter_list|,
name|BOOL
parameter_list|)
function_decl|;
DECL|macro|ORD_WTRestore
define|#
directive|define
name|ORD_WTRestore
value|66
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTQUEUEFXNS
comment|/* ADVANCED PACKET AND QUEUE FUNCTIONS */
name|int
name|API
name|WTPacketsPeek
parameter_list|(
name|HCTX
parameter_list|,
name|int
parameter_list|,
name|LPVOID
parameter_list|)
function_decl|;
DECL|macro|ORD_WTPacketsPeek
define|#
directive|define
name|ORD_WTPacketsPeek
value|80
name|int
name|API
name|WTDataGet
parameter_list|(
name|HCTX
parameter_list|,
name|UINT
parameter_list|,
name|UINT
parameter_list|,
name|int
parameter_list|,
name|LPVOID
parameter_list|,
name|LPINT
parameter_list|)
function_decl|;
DECL|macro|ORD_WTDataGet
define|#
directive|define
name|ORD_WTDataGet
value|81
name|int
name|API
name|WTDataPeek
parameter_list|(
name|HCTX
parameter_list|,
name|UINT
parameter_list|,
name|UINT
parameter_list|,
name|int
parameter_list|,
name|LPVOID
parameter_list|,
name|LPINT
parameter_list|)
function_decl|;
DECL|macro|ORD_WTDataPeek
define|#
directive|define
name|ORD_WTDataPeek
value|82
ifndef|#
directive|ifndef
name|WIN32
comment|/* OBSOLETE IN WIN32! */
name|DWORD
name|API
name|WTQueuePackets
parameter_list|(
name|HCTX
parameter_list|)
function_decl|;
DECL|macro|ORD_WTQueuePackets
define|#
directive|define
name|ORD_WTQueuePackets
value|83
endif|#
directive|endif
name|int
name|API
name|WTQueueSizeGet
parameter_list|(
name|HCTX
parameter_list|)
function_decl|;
DECL|macro|ORD_WTQueueSizeGet
define|#
directive|define
name|ORD_WTQueueSizeGet
value|84
name|BOOL
name|API
name|WTQueueSizeSet
parameter_list|(
name|HCTX
parameter_list|,
name|int
parameter_list|)
function_decl|;
DECL|macro|ORD_WTQueueSizeSet
define|#
directive|define
name|ORD_WTQueueSizeSet
value|85
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTHMGRFXNS
comment|/* MANAGER HANDLE FUNCTIONS */
name|HMGR
name|API
name|WTMgrOpen
parameter_list|(
name|HWND
parameter_list|,
name|UINT
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrOpen
define|#
directive|define
name|ORD_WTMgrOpen
value|100
name|BOOL
name|API
name|WTMgrClose
parameter_list|(
name|HMGR
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrClose
define|#
directive|define
name|ORD_WTMgrClose
value|101
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTMGRCTXFXNS
comment|/* MANAGER CONTEXT FUNCTIONS */
name|BOOL
name|API
name|WTMgrContextEnum
parameter_list|(
name|HMGR
parameter_list|,
name|WTENUMPROC
parameter_list|,
name|LPARAM
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrContextEnum
define|#
directive|define
name|ORD_WTMgrContextEnum
value|120
name|HWND
name|API
name|WTMgrContextOwner
parameter_list|(
name|HMGR
parameter_list|,
name|HCTX
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrContextOwner
define|#
directive|define
name|ORD_WTMgrContextOwner
value|121
name|HCTX
name|API
name|WTMgrDefContext
parameter_list|(
name|HMGR
parameter_list|,
name|BOOL
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrDefContext
define|#
directive|define
name|ORD_WTMgrDefContext
value|122
name|HCTX
name|API
name|WTMgrDefContextEx
parameter_list|(
name|HMGR
parameter_list|,
name|UINT
parameter_list|,
name|BOOL
parameter_list|)
function_decl|;
comment|/* 1.1 */
DECL|macro|ORD_WTMgrDefContextEx
define|#
directive|define
name|ORD_WTMgrDefContextEx
value|206
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTMGRCONFIGFXNS
comment|/* MANAGER CONFIG BOX  FUNCTIONS */
name|UINT
name|API
name|WTMgrDeviceConfig
parameter_list|(
name|HMGR
parameter_list|,
name|UINT
parameter_list|,
name|HWND
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrDeviceConfig
define|#
directive|define
name|ORD_WTMgrDeviceConfig
value|140
ifndef|#
directive|ifndef
name|WIN32
comment|/* OBSOLETE IN WIN32! */
name|BOOL
name|API
name|WTMgrConfigReplace
parameter_list|(
name|HMGR
parameter_list|,
name|BOOL
parameter_list|,
name|WTCONFIGPROC
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrConfigReplace
define|#
directive|define
name|ORD_WTMgrConfigReplace
value|141
endif|#
directive|endif
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTMGRHOOKFXNS
comment|/* MANAGER PACKET HOOK FUNCTIONS */
ifndef|#
directive|ifndef
name|WIN32
comment|/* OBSOLETE IN WIN32! */
name|WTHOOKPROC
name|API
name|WTMgrPacketHook
parameter_list|(
name|HMGR
parameter_list|,
name|BOOL
parameter_list|,
name|int
parameter_list|,
name|WTHOOKPROC
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrPacketHook
define|#
directive|define
name|ORD_WTMgrPacketHook
value|160
name|LRESULT
name|API
name|WTMgrPacketHookDefProc
parameter_list|(
name|int
parameter_list|,
name|WPARAM
parameter_list|,
name|LPARAM
parameter_list|,
name|LPWTHOOKPROC
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrPacketHookDefProc
define|#
directive|define
name|ORD_WTMgrPacketHookDefProc
value|161
endif|#
directive|endif
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTMGRPREFFXNS
comment|/* MANAGER PREFERENCE DATA FUNCTIONS */
name|BOOL
name|API
name|WTMgrExt
parameter_list|(
name|HMGR
parameter_list|,
name|UINT
parameter_list|,
name|LPVOID
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrExt
define|#
directive|define
name|ORD_WTMgrExt
value|180
name|BOOL
name|API
name|WTMgrCsrEnable
parameter_list|(
name|HMGR
parameter_list|,
name|UINT
parameter_list|,
name|BOOL
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrCsrEnable
define|#
directive|define
name|ORD_WTMgrCsrEnable
value|181
name|BOOL
name|API
name|WTMgrCsrButtonMap
parameter_list|(
name|HMGR
parameter_list|,
name|UINT
parameter_list|,
name|LPBYTE
parameter_list|,
name|LPBYTE
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrCsrButtonMap
define|#
directive|define
name|ORD_WTMgrCsrButtonMap
value|182
name|BOOL
name|API
name|WTMgrCsrPressureBtnMarks
parameter_list|(
name|HMGR
parameter_list|,
name|UINT
parameter_list|,
name|DWORD
parameter_list|,
name|DWORD
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrCsrPressureBtnMarks
define|#
directive|define
name|ORD_WTMgrCsrPressureBtnMarks
value|183
name|BOOL
name|API
name|WTMgrCsrPressureResponse
parameter_list|(
name|HMGR
parameter_list|,
name|UINT
parameter_list|,
name|UINT
name|FAR
modifier|*
parameter_list|,
name|UINT
name|FAR
modifier|*
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrCsrPressureResponse
define|#
directive|define
name|ORD_WTMgrCsrPressureResponse
value|184
name|BOOL
name|API
name|WTMgrCsrExt
parameter_list|(
name|HMGR
parameter_list|,
name|UINT
parameter_list|,
name|UINT
parameter_list|,
name|LPVOID
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrCsrExt
define|#
directive|define
name|ORD_WTMgrCsrExt
value|185
endif|#
directive|endif
comment|/* Win32 replacements for non-portable functions. */
ifndef|#
directive|ifndef
name|NOWTQUEUEFXNS
comment|/* ADVANCED PACKET AND QUEUE FUNCTIONS */
name|BOOL
name|API
name|WTQueuePacketsEx
parameter_list|(
name|HCTX
parameter_list|,
name|UINT
name|FAR
modifier|*
parameter_list|,
name|UINT
name|FAR
modifier|*
parameter_list|)
function_decl|;
DECL|macro|ORD_WTQueuePacketsEx
define|#
directive|define
name|ORD_WTQueuePacketsEx
value|200
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTMGRCONFIGFXNS
comment|/* MANAGER CONFIG BOX  FUNCTIONS */
ifdef|#
directive|ifdef
name|WIN32
name|BOOL
name|API
name|WTMgrConfigReplaceExA
parameter_list|(
name|HMGR
parameter_list|,
name|BOOL
parameter_list|,
name|LPSTR
parameter_list|,
name|LPSTR
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrConfigReplaceExA
define|#
directive|define
name|ORD_WTMgrConfigReplaceExA
value|202
name|BOOL
name|API
name|WTMgrConfigReplaceExW
parameter_list|(
name|HMGR
parameter_list|,
name|BOOL
parameter_list|,
name|LPWSTR
parameter_list|,
name|LPSTR
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrConfigReplaceExW
define|#
directive|define
name|ORD_WTMgrConfigReplaceExW
value|1202
ifdef|#
directive|ifdef
name|UNICODE
DECL|macro|WTMgrConfigReplaceEx
define|#
directive|define
name|WTMgrConfigReplaceEx
value|WTMgrConfigReplaceExW
DECL|macro|ORD_WTMgrConfigReplaceEx
define|#
directive|define
name|ORD_WTMgrConfigReplaceEx
value|ORD_WTMgrConfigReplaceExW
else|#
directive|else
DECL|macro|WTMgrConfigReplaceEx
define|#
directive|define
name|WTMgrConfigReplaceEx
value|WTMgrConfigReplaceExA
DECL|macro|ORD_WTMgrConfigReplaceEx
define|#
directive|define
name|ORD_WTMgrConfigReplaceEx
value|ORD_WTMgrConfigReplaceExA
endif|#
directive|endif
comment|/* !UNICODE */
else|#
directive|else
name|BOOL
name|API
name|WTMgrConfigReplaceEx
parameter_list|(
name|HMGR
parameter_list|,
name|BOOL
parameter_list|,
name|LPSTR
parameter_list|,
name|LPSTR
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrConfigReplaceEx
define|#
directive|define
name|ORD_WTMgrConfigReplaceEx
value|202
endif|#
directive|endif
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTMGRHOOKFXNS
comment|/* MANAGER PACKET HOOK FUNCTIONS */
ifdef|#
directive|ifdef
name|WIN32
name|HWTHOOK
name|API
name|WTMgrPacketHookExA
parameter_list|(
name|HMGR
parameter_list|,
name|int
parameter_list|,
name|LPSTR
parameter_list|,
name|LPSTR
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrPacketHookExA
define|#
directive|define
name|ORD_WTMgrPacketHookExA
value|203
name|HWTHOOK
name|API
name|WTMgrPacketHookExW
parameter_list|(
name|HMGR
parameter_list|,
name|int
parameter_list|,
name|LPWSTR
parameter_list|,
name|LPSTR
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrPacketHookExW
define|#
directive|define
name|ORD_WTMgrPacketHookExW
value|1203
ifdef|#
directive|ifdef
name|UNICODE
DECL|macro|WTMgrPacketHookEx
define|#
directive|define
name|WTMgrPacketHookEx
value|WTMgrPacketHookExW
DECL|macro|ORD_WTMgrPacketHookEx
define|#
directive|define
name|ORD_WTMgrPacketHookEx
value|ORD_WTMgrPacketHookExW
else|#
directive|else
DECL|macro|WTMgrPacketHookEx
define|#
directive|define
name|WTMgrPacketHookEx
value|WTMgrPacketHookExA
DECL|macro|ORD_WTMgrPacketHookEx
define|#
directive|define
name|ORD_WTMgrPacketHookEx
value|ORD_WTMgrPacketHookExA
endif|#
directive|endif
comment|/* !UNICODE */
else|#
directive|else
name|HWTHOOK
name|API
name|WTMgrPacketHookEx
parameter_list|(
name|HMGR
parameter_list|,
name|int
parameter_list|,
name|LPSTR
parameter_list|,
name|LPSTR
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrPacketHookEx
define|#
directive|define
name|ORD_WTMgrPacketHookEx
value|203
endif|#
directive|endif
name|BOOL
name|API
name|WTMgrPacketUnhook
parameter_list|(
name|HWTHOOK
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrPacketUnhook
define|#
directive|define
name|ORD_WTMgrPacketUnhook
value|204
name|LRESULT
name|API
name|WTMgrPacketHookNext
parameter_list|(
name|HWTHOOK
parameter_list|,
name|int
parameter_list|,
name|WPARAM
parameter_list|,
name|LPARAM
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrPacketHookNext
define|#
directive|define
name|ORD_WTMgrPacketHookNext
value|205
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NOWTMGRPREFFXNS
comment|/* MANAGER PREFERENCE DATA FUNCTIONS */
name|BOOL
name|API
name|WTMgrCsrPressureBtnMarksEx
parameter_list|(
name|HMGR
parameter_list|,
name|UINT
parameter_list|,
name|UINT
name|FAR
modifier|*
parameter_list|,
name|UINT
name|FAR
modifier|*
parameter_list|)
function_decl|;
DECL|macro|ORD_WTMgrCsrPressureBtnMarksEx
define|#
directive|define
name|ORD_WTMgrCsrPressureBtnMarksEx
value|201
endif|#
directive|endif
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* __cplusplus */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* #define _INC_WINTAB */
end_comment
end_unit
