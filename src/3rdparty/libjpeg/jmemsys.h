begin_unit
begin_comment
comment|/*  * jmemsys.h  *  * Copyright (C) 1992-1997, Thomas G. Lane.  * This file is part of the Independent JPEG Group's software.  * For conditions of distribution and use, see the accompanying README file.  *  * This include file defines the interface between the system-independent  * and system-dependent portions of the JPEG memory manager.  No other  * modules need include it.  (The system-independent portion is jmemmgr.c;  * there are several different versions of the system-dependent portion.)  *  * This file works as-is for the system-dependent memory managers supplied  * in the IJG distribution.  You may need to modify it if you write a  * custom memory manager.  If system-dependent changes are needed in  * this file, the best method is to #ifdef them based on a configuration  * symbol supplied in jconfig.h, as we have done with USE_MSDOS_MEMMGR  * and USE_MAC_MEMMGR.  */
end_comment
begin_comment
comment|/* Short forms of external names for systems with brain-damaged linkers. */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|NEED_SHORT_EXTERNAL_NAMES
end_ifdef
begin_define
DECL|macro|jpeg_get_small
define|#
directive|define
name|jpeg_get_small
value|jGetSmall
end_define
begin_define
DECL|macro|jpeg_free_small
define|#
directive|define
name|jpeg_free_small
value|jFreeSmall
end_define
begin_define
DECL|macro|jpeg_get_large
define|#
directive|define
name|jpeg_get_large
value|jGetLarge
end_define
begin_define
DECL|macro|jpeg_free_large
define|#
directive|define
name|jpeg_free_large
value|jFreeLarge
end_define
begin_define
DECL|macro|jpeg_mem_available
define|#
directive|define
name|jpeg_mem_available
value|jMemAvail
end_define
begin_define
DECL|macro|jpeg_open_backing_store
define|#
directive|define
name|jpeg_open_backing_store
value|jOpenBackStore
end_define
begin_define
DECL|macro|jpeg_mem_init
define|#
directive|define
name|jpeg_mem_init
value|jMemInit
end_define
begin_define
DECL|macro|jpeg_mem_term
define|#
directive|define
name|jpeg_mem_term
value|jMemTerm
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* NEED_SHORT_EXTERNAL_NAMES */
end_comment
begin_comment
comment|/*  * These two functions are used to allocate and release small chunks of  * memory.  (Typically the total amount requested through jpeg_get_small is  * no more than 20K or so; this will be requested in chunks of a few K each.)  * Behavior should be the same as for the standard library functions malloc  * and free; in particular, jpeg_get_small must return NULL on failure.  * On most systems, these ARE malloc and free.  jpeg_free_small is passed the  * size of the object being freed, just in case it's needed.  * On an 80x86 machine using small-data memory model, these manage near heap.  */
end_comment
begin_macro
name|EXTERN
argument_list|(
argument|void *
argument_list|)
end_macro
begin_decl_stmt
name|jpeg_get_small
name|JPP
argument_list|(
operator|(
name|j_common_ptr
name|cinfo
operator|,
name|size_t
name|sizeofobject
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_macro
name|EXTERN
argument_list|(
argument|void
argument_list|)
end_macro
begin_decl_stmt
name|jpeg_free_small
name|JPP
argument_list|(
operator|(
name|j_common_ptr
name|cinfo
operator|,
name|void
operator|*
name|object
operator|,
name|size_t
name|sizeofobject
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*  * These two functions are used to allocate and release large chunks of  * memory (up to the total free space designated by jpeg_mem_available).  * The interface is the same as above, except that on an 80x86 machine,  * far pointers are used.  On most other machines these are identical to  * the jpeg_get/free_small routines; but we keep them separate anyway,  * in case a different allocation strategy is desirable for large chunks.  */
end_comment
begin_macro
name|EXTERN
argument_list|(
argument|void FAR *
argument_list|)
end_macro
begin_decl_stmt
name|jpeg_get_large
name|JPP
argument_list|(
operator|(
name|j_common_ptr
name|cinfo
operator|,
name|size_t
name|sizeofobject
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_macro
name|EXTERN
argument_list|(
argument|void
argument_list|)
end_macro
begin_decl_stmt
name|jpeg_free_large
name|JPP
argument_list|(
operator|(
name|j_common_ptr
name|cinfo
operator|,
name|void
name|FAR
operator|*
name|object
operator|,
name|size_t
name|sizeofobject
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*  * The macro MAX_ALLOC_CHUNK designates the maximum number of bytes that may  * be requested in a single call to jpeg_get_large (and jpeg_get_small for that  * matter, but that case should never come into play).  This macro is needed  * to model the 64Kb-segment-size limit of far addressing on 80x86 machines.  * On those machines, we expect that jconfig.h will provide a proper value.  * On machines with 32-bit flat address spaces, any large constant may be used.  *  * NB: jmemmgr.c expects that MAX_ALLOC_CHUNK will be representable as type  * size_t and will be a multiple of sizeof(align_type).  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|MAX_ALLOC_CHUNK
end_ifndef
begin_comment
comment|/* may be overridden in jconfig.h */
end_comment
begin_define
DECL|macro|MAX_ALLOC_CHUNK
define|#
directive|define
name|MAX_ALLOC_CHUNK
value|1000000000L
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*  * This routine computes the total space still available for allocation by  * jpeg_get_large.  If more space than this is needed, backing store will be  * used.  NOTE: any memory already allocated must not be counted.  *  * There is a minimum space requirement, corresponding to the minimum  * feasible buffer sizes; jmemmgr.c will request that much space even if  * jpeg_mem_available returns zero.  The maximum space needed, enough to hold  * all working storage in memory, is also passed in case it is useful.  * Finally, the total space already allocated is passed.  If no better  * method is available, cinfo->mem->max_memory_to_use - already_allocated  * is often a suitable calculation.  *  * It is OK for jpeg_mem_available to underestimate the space available  * (that'll just lead to more backing-store access than is really necessary).  * However, an overestimate will lead to failure.  Hence it's wise to subtract  * a slop factor from the true available space.  5% should be enough.  *  * On machines with lots of virtual memory, any large constant may be returned.  * Conversely, zero may be returned to always use the minimum amount of memory.  */
end_comment
begin_macro
name|EXTERN
argument_list|(
argument|long
argument_list|)
end_macro
begin_decl_stmt
name|jpeg_mem_available
name|JPP
argument_list|(
operator|(
name|j_common_ptr
name|cinfo
operator|,
name|long
name|min_bytes_needed
operator|,
name|long
name|max_bytes_needed
operator|,
name|long
name|already_allocated
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*  * This structure holds whatever state is needed to access a single  * backing-store object.  The read/write/close method pointers are called  * by jmemmgr.c to manipulate the backing-store object; all other fields  * are private to the system-dependent backing store routines.  */
end_comment
begin_define
DECL|macro|TEMP_NAME_LENGTH
define|#
directive|define
name|TEMP_NAME_LENGTH
value|64
end_define
begin_comment
DECL|macro|TEMP_NAME_LENGTH
comment|/* max length of a temporary file's name */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|USE_MSDOS_MEMMGR
end_ifdef
begin_comment
comment|/* DOS-specific junk */
end_comment
begin_typedef
DECL|typedef|XMSH
typedef|typedef
name|unsigned
name|short
name|XMSH
typedef|;
end_typedef
begin_comment
DECL|typedef|XMSH
comment|/* type of extended-memory handles */
end_comment
begin_typedef
DECL|typedef|EMSH
typedef|typedef
name|unsigned
name|short
name|EMSH
typedef|;
end_typedef
begin_comment
DECL|typedef|EMSH
comment|/* type of expanded-memory handles */
end_comment
begin_typedef
typedef|typedef
union|union
block|{
DECL|member|file_handle
name|short
name|file_handle
decl_stmt|;
comment|/* DOS file handle if it's a temp file */
DECL|member|xms_handle
name|XMSH
name|xms_handle
decl_stmt|;
comment|/* handle if it's a chunk of XMS */
DECL|member|ems_handle
name|EMSH
name|ems_handle
decl_stmt|;
comment|/* handle if it's a chunk of EMS */
block|}
DECL|typedef|handle_union
name|handle_union
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* USE_MSDOS_MEMMGR */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|USE_MAC_MEMMGR
end_ifdef
begin_comment
comment|/* Mac-specific junk */
end_comment
begin_include
include|#
directive|include
file|<Files.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* USE_MAC_MEMMGR */
end_comment
begin_typedef
DECL|typedef|backing_store_ptr
typedef|typedef
name|struct
name|backing_store_struct
modifier|*
name|backing_store_ptr
typedef|;
end_typedef
begin_typedef
DECL|struct|backing_store_struct
typedef|typedef
struct|struct
name|backing_store_struct
block|{
comment|/* Methods for reading/writing/closing this backing-store object */
name|JMETHOD
argument_list|(
name|void
argument_list|,
name|read_backing_store
argument_list|,
operator|(
name|j_common_ptr
name|cinfo
operator|,
name|backing_store_ptr
name|info
operator|,
name|void
name|FAR
operator|*
name|buffer_address
operator|,
name|long
name|file_offset
operator|,
name|long
name|byte_count
operator|)
argument_list|)
expr_stmt|;
name|JMETHOD
argument_list|(
name|void
argument_list|,
name|write_backing_store
argument_list|,
operator|(
name|j_common_ptr
name|cinfo
operator|,
name|backing_store_ptr
name|info
operator|,
name|void
name|FAR
operator|*
name|buffer_address
operator|,
name|long
name|file_offset
operator|,
name|long
name|byte_count
operator|)
argument_list|)
expr_stmt|;
name|JMETHOD
argument_list|(
name|void
argument_list|,
name|close_backing_store
argument_list|,
operator|(
name|j_common_ptr
name|cinfo
operator|,
name|backing_store_ptr
name|info
operator|)
argument_list|)
expr_stmt|;
comment|/* Private fields for system-dependent backing-store management */
ifdef|#
directive|ifdef
name|USE_MSDOS_MEMMGR
comment|/* For the MS-DOS manager (jmemdos.c), we need: */
DECL|member|handle
name|handle_union
name|handle
decl_stmt|;
comment|/* reference to backing-store storage object */
DECL|member|temp_name
name|char
name|temp_name
index|[
name|TEMP_NAME_LENGTH
index|]
decl_stmt|;
comment|/* name if it's a file */
else|#
directive|else
ifdef|#
directive|ifdef
name|USE_MAC_MEMMGR
comment|/* For the Mac manager (jmemmac.c), we need: */
DECL|member|temp_file
name|short
name|temp_file
decl_stmt|;
comment|/* file reference number to temp file */
DECL|member|tempSpec
name|FSSpec
name|tempSpec
decl_stmt|;
comment|/* the FSSpec for the temp file */
DECL|member|temp_name
name|char
name|temp_name
index|[
name|TEMP_NAME_LENGTH
index|]
decl_stmt|;
comment|/* name if it's a file */
else|#
directive|else
comment|/* For a typical implementation with temp files, we need: */
DECL|member|temp_file
name|FILE
modifier|*
name|temp_file
decl_stmt|;
comment|/* stdio reference to temp file */
DECL|member|temp_name
name|char
name|temp_name
index|[
name|TEMP_NAME_LENGTH
index|]
decl_stmt|;
comment|/* name of temp file */
endif|#
directive|endif
endif|#
directive|endif
block|}
DECL|typedef|backing_store_info
name|backing_store_info
typedef|;
end_typedef
begin_comment
comment|/*  * Initial opening of a backing-store object.  This must fill in the  * read/write/close pointers in the object.  The read/write routines  * may take an error exit if the specified maximum file size is exceeded.  * (If jpeg_mem_available always returns a large value, this routine can  * just take an error exit.)  */
end_comment
begin_macro
name|EXTERN
argument_list|(
argument|void
argument_list|)
end_macro
begin_decl_stmt
name|jpeg_open_backing_store
name|JPP
argument_list|(
operator|(
name|j_common_ptr
name|cinfo
operator|,
name|backing_store_ptr
name|info
operator|,
name|long
name|total_bytes_needed
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*  * These routines take care of any system-dependent initialization and  * cleanup required.  jpeg_mem_init will be called before anything is  * allocated (and, therefore, nothing in cinfo is of use except the error  * manager pointer).  It should return a suitable default value for  * max_memory_to_use; this may subsequently be overridden by the surrounding  * application.  (Note that max_memory_to_use is only important if  * jpeg_mem_available chooses to consult it ... no one else will.)  * jpeg_mem_term may assume that all requested memory has been freed and that  * all opened backing-store objects have been closed.  */
end_comment
begin_macro
name|EXTERN
argument_list|(
argument|long
argument_list|)
end_macro
begin_decl_stmt
name|jpeg_mem_init
name|JPP
argument_list|(
operator|(
name|j_common_ptr
name|cinfo
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_macro
name|EXTERN
argument_list|(
argument|void
argument_list|)
end_macro
begin_decl_stmt
name|jpeg_mem_term
name|JPP
argument_list|(
operator|(
name|j_common_ptr
name|cinfo
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt
end_unit
