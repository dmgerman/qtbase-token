begin_unit
begin_comment
comment|/*  * Copyright Â© 2012 Intel Corporation  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice (including the next  * paragraph) shall be included in all copies or substantial portions of the  * Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER  * DEALINGS IN THE SOFTWARE.  *  * Author: Daniel Stone<daniel@fooishbar.org>  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|CONTEXT_H
end_ifndef
begin_define
DECL|macro|CONTEXT_H
define|#
directive|define
name|CONTEXT_H
end_define
begin_include
include|#
directive|include
file|"atom.h"
end_include
begin_function_decl
name|unsigned
name|int
name|xkb_context_num_failed_include_paths
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|char
modifier|*
name|xkb_context_failed_include_path_get
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|int
name|idx
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*  * Returns XKB_ATOM_NONE if @string was not previously interned,  * otherwise returns the atom.  */
end_comment
begin_function_decl
name|xkb_atom_t
name|xkb_atom_lookup
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|string
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|xkb_atom_t
name|xkb_atom_intern
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|string
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/**  * If @string is dynamically allocated, free'd immediately after  * being interned, and not used afterwards, use this function  * instead of xkb_atom_intern to avoid some unnecessary allocations.  * The caller should not use or free the passed in string afterwards.  */
end_comment
begin_function_decl
name|xkb_atom_t
name|xkb_atom_steal
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|,
name|char
modifier|*
name|string
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|char
modifier|*
name|xkb_atom_strdup
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|,
name|xkb_atom_t
name|atom
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|char
modifier|*
name|xkb_atom_text
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|,
name|xkb_atom_t
name|atom
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|char
modifier|*
name|xkb_context_get_buffer
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_macro
name|ATTR_PRINTF
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
end_macro
begin_function_decl
name|void
name|xkb_log
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|,
name|enum
name|xkb_log_level
name|level
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|xkb_log_cond_level
define|#
directive|define
name|xkb_log_cond_level
parameter_list|(
name|ctx
parameter_list|,
name|level
parameter_list|,
modifier|...
parameter_list|)
value|do { \     if (xkb_context_get_log_level(ctx)>= (level)) \     xkb_log((ctx), (level), __VA_ARGS__); \ } while (0)
end_define
begin_define
DECL|macro|xkb_log_cond_verbosity
define|#
directive|define
name|xkb_log_cond_verbosity
parameter_list|(
name|ctx
parameter_list|,
name|level
parameter_list|,
name|vrb
parameter_list|,
modifier|...
parameter_list|)
value|do { \     if (xkb_context_get_log_verbosity(ctx)>= (vrb)) \     xkb_log_cond_level((ctx), (level), __VA_ARGS__); \ } while (0)
end_define
begin_function_decl
specifier|const
name|char
modifier|*
name|xkb_context_get_default_rules
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|char
modifier|*
name|xkb_context_get_default_model
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|char
modifier|*
name|xkb_context_get_default_layout
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|char
modifier|*
name|xkb_context_get_default_variant
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|char
modifier|*
name|xkb_context_get_default_options
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*  * The format is not part of the argument list in order to avoid the  * "ISO C99 requires rest arguments to be used" warning when only the  * format is supplied without arguments. Not supplying it would still  * result in an error, though.  */
end_comment
begin_define
DECL|macro|log_dbg
define|#
directive|define
name|log_dbg
parameter_list|(
name|ctx
parameter_list|,
modifier|...
parameter_list|)
define|\
value|xkb_log_cond_level((ctx), XKB_LOG_LEVEL_DEBUG, __VA_ARGS__)
end_define
begin_define
DECL|macro|log_info
define|#
directive|define
name|log_info
parameter_list|(
name|ctx
parameter_list|,
modifier|...
parameter_list|)
define|\
value|xkb_log_cond_level((ctx), XKB_LOG_LEVEL_INFO, __VA_ARGS__)
end_define
begin_define
DECL|macro|log_warn
define|#
directive|define
name|log_warn
parameter_list|(
name|ctx
parameter_list|,
modifier|...
parameter_list|)
define|\
value|xkb_log_cond_level((ctx), XKB_LOG_LEVEL_WARNING, __VA_ARGS__)
end_define
begin_define
DECL|macro|log_err
define|#
directive|define
name|log_err
parameter_list|(
name|ctx
parameter_list|,
modifier|...
parameter_list|)
define|\
value|xkb_log_cond_level((ctx), XKB_LOG_LEVEL_ERROR, __VA_ARGS__)
end_define
begin_define
DECL|macro|log_wsgo
define|#
directive|define
name|log_wsgo
parameter_list|(
name|ctx
parameter_list|,
modifier|...
parameter_list|)
define|\
value|xkb_log_cond_level((ctx), XKB_LOG_LEVEL_CRITICAL, __VA_ARGS__)
end_define
begin_define
DECL|macro|log_vrb
define|#
directive|define
name|log_vrb
parameter_list|(
name|ctx
parameter_list|,
name|vrb
parameter_list|,
modifier|...
parameter_list|)
define|\
value|xkb_log_cond_verbosity((ctx), XKB_LOG_LEVEL_WARNING, (vrb), __VA_ARGS__)
end_define
begin_comment
comment|/*  * Variants which are prefixed by the name of the function they're  * called from.  * Here we must have the silly 1 variant.  */
end_comment
begin_define
DECL|macro|log_err_func
define|#
directive|define
name|log_err_func
parameter_list|(
name|ctx
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
define|\
value|log_err(ctx, "%s: " fmt, __func__, __VA_ARGS__)
end_define
begin_define
DECL|macro|log_err_func1
define|#
directive|define
name|log_err_func1
parameter_list|(
name|ctx
parameter_list|,
name|fmt
parameter_list|)
define|\
value|log_err(ctx, "%s: " fmt, __func__)
end_define
begin_endif
endif|#
directive|endif
end_endif
end_unit
