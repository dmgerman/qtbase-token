begin_unit
begin_comment
comment|/*  * Copyright Â© 2012 Ran Benita<ran234@gmail.com>  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice (including the next  * paragraph) shall be included in all copies or substantial portions of the  * Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER  * DEALINGS IN THE SOFTWARE.  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|UTILS_H
end_ifndef
begin_define
DECL|macro|UTILS_H
define|#
directive|define
name|UTILS_H
value|1
end_define
begin_include
include|#
directive|include
file|<inttypes.h>
end_include
begin_include
include|#
directive|include
file|<stdbool.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_include
include|#
directive|include
file|<strings.h>
end_include
begin_include
include|#
directive|include
file|"darray.h"
end_include
begin_comment
comment|/*  * We sometimes malloc strings and then expose them as const char*'s. This  * macro is used when we free these strings in order to avoid -Wcast-qual  * errors.  */
end_comment
begin_define
DECL|macro|UNCONSTIFY
define|#
directive|define
name|UNCONSTIFY
parameter_list|(
name|const_ptr
parameter_list|)
value|((void *) (uintptr_t) (const_ptr))
end_define
begin_function
specifier|static
specifier|inline
name|bool
DECL|function|streq
name|streq
parameter_list|(
specifier|const
name|char
modifier|*
name|s1
parameter_list|,
specifier|const
name|char
modifier|*
name|s2
parameter_list|)
block|{
return|return
name|strcmp
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
operator|==
literal|0
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|bool
DECL|function|streq_not_null
name|streq_not_null
parameter_list|(
specifier|const
name|char
modifier|*
name|s1
parameter_list|,
specifier|const
name|char
modifier|*
name|s2
parameter_list|)
block|{
if|if
condition|(
operator|!
name|s1
operator|||
operator|!
name|s2
condition|)
return|return
name|false
return|;
return|return
name|streq
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|bool
DECL|function|istreq
name|istreq
parameter_list|(
specifier|const
name|char
modifier|*
name|s1
parameter_list|,
specifier|const
name|char
modifier|*
name|s2
parameter_list|)
block|{
return|return
name|strcasecmp
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
operator|==
literal|0
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|bool
DECL|function|istreq_prefix
name|istreq_prefix
parameter_list|(
specifier|const
name|char
modifier|*
name|s1
parameter_list|,
specifier|const
name|char
modifier|*
name|s2
parameter_list|)
block|{
return|return
name|strncasecmp
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|,
name|strlen
argument_list|(
name|s1
argument_list|)
argument_list|)
operator|==
literal|0
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|char
modifier|*
DECL|function|strdup_safe
name|strdup_safe
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|)
block|{
return|return
name|s
condition|?
name|strdup
argument_list|(
name|s
argument_list|)
else|:
name|NULL
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|bool
DECL|function|isempty
name|isempty
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|)
block|{
return|return
name|s
operator|==
name|NULL
operator|||
name|s
index|[
literal|0
index|]
operator|==
literal|'\0'
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
specifier|const
name|char
modifier|*
DECL|function|strnull
name|strnull
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|)
block|{
return|return
name|s
condition|?
name|s
else|:
literal|"(null)"
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|void
modifier|*
DECL|function|memdup
name|memdup
parameter_list|(
specifier|const
name|void
modifier|*
name|mem
parameter_list|,
name|size_t
name|nmemb
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|void
modifier|*
name|p
init|=
name|malloc
argument_list|(
name|nmemb
operator|*
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
condition|)
name|memcpy
argument_list|(
name|p
argument_list|,
name|mem
argument_list|,
name|nmemb
operator|*
name|size
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
end_function
begin_define
DECL|macro|ARRAY_SIZE
define|#
directive|define
name|ARRAY_SIZE
parameter_list|(
name|arr
parameter_list|)
value|((sizeof(arr) / sizeof(*(arr))))
end_define
begin_define
DECL|macro|MIN
define|#
directive|define
name|MIN
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|((a)< (b) ? (a) : (b))
end_define
begin_define
DECL|macro|MIN3
define|#
directive|define
name|MIN3
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|MIN(MIN((a), (b)), (c))
end_define
begin_define
DECL|macro|MAX
define|#
directive|define
name|MAX
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|((a)> (b) ? (a) : (b))
end_define
begin_define
DECL|macro|MAX3
define|#
directive|define
name|MAX3
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|MAX(MAX((a), (b)), (c))
end_define
begin_comment
comment|/* Compiler Attributes */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|__GNUC__
operator|>=
literal|4
operator|)
operator|&&
operator|!
name|defined
argument_list|(
name|__CYGWIN__
argument_list|)
end_if
begin_define
DECL|macro|XKB_EXPORT
define|#
directive|define
name|XKB_EXPORT
value|__attribute__((visibility("default")))
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__SUNPRO_C
argument_list|)
operator|&&
operator|(
name|__SUNPRO_C
operator|>=
literal|0x550
operator|)
end_elif
begin_define
DECL|macro|XKB_EXPORT
define|#
directive|define
name|XKB_EXPORT
value|__global
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|/* not gcc>= 4 and not Sun Studio>= 8 */
end_comment
begin_define
DECL|macro|XKB_EXPORT
define|#
directive|define
name|XKB_EXPORT
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
operator|(
name|__GNUC__
operator|*
literal|100
operator|+
name|__GNUC_MINOR__
operator|)
operator|>=
literal|203
operator|)
end_if
begin_define
DECL|macro|ATTR_PRINTF
define|#
directive|define
name|ATTR_PRINTF
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|__attribute__((__format__(__printf__, x, y)))
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|/* not gcc>= 2.3 */
end_comment
begin_define
DECL|macro|ATTR_PRINTF
define|#
directive|define
name|ATTR_PRINTF
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
operator|(
name|__GNUC__
operator|*
literal|100
operator|+
name|__GNUC_MINOR__
operator|)
operator|>=
literal|205
operator|)
operator|)
expr|\
operator|||
operator|(
name|defined
argument_list|(
name|__SUNPRO_C
argument_list|)
operator|&&
operator|(
name|__SUNPRO_C
operator|>=
literal|0x590
operator|)
operator|)
end_if
begin_define
DECL|macro|ATTR_NORETURN
define|#
directive|define
name|ATTR_NORETURN
value|__attribute__((__noreturn__))
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|ATTR_NORETURN
define|#
directive|define
name|ATTR_NORETURN
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* GNUC  */
end_comment
begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|__GNUC__
operator|*
literal|100
operator|+
name|__GNUC_MINOR__
operator|)
operator|>=
literal|296
operator|)
end_if
begin_define
DECL|macro|ATTR_MALLOC
define|#
directive|define
name|ATTR_MALLOC
value|__attribute__((__malloc__))
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|ATTR_MALLOC
define|#
directive|define
name|ATTR_MALLOC
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|__GNUC__
operator|>=
literal|4
operator|)
end_if
begin_define
DECL|macro|ATTR_NULL_SENTINEL
define|#
directive|define
name|ATTR_NULL_SENTINEL
value|__attribute__((__sentinel__))
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|ATTR_NULL_SENTINEL
define|#
directive|define
name|ATTR_NULL_SENTINEL
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* GNUC>= 4 */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* UTILS_H */
end_comment
end_unit
