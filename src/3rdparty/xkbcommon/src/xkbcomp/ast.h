begin_unit
begin_comment
comment|/************************************************************  * Copyright (c) 1994 by Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, and distribute this  * software and its documentation for any purpose and without  * fee is hereby granted, provided that the above copyright  * notice appear in all copies and that both that copyright  * notice and this permission notice appear in supporting  * documentation, and that the name of Silicon Graphics not be  * used in advertising or publicity pertaining to distribution  * of the software without specific prior written permission.  * Silicon Graphics makes no representation about the suitability  * of this software for any purpose. It is provided "as is"  * without any express or implied warranty.  *  * SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS  * SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY  * AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON  * GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL  * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,  * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE  * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH  * THE USE OR PERFORMANCE OF THIS SOFTWARE.  *  ********************************************************/
end_comment
begin_comment
comment|/*  * Copyright Â© 2012 Ran Benita<ran234@gmail.com>  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice (including the next  * paragraph) shall be included in all copies or substantial portions of the  * Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER  * DEALINGS IN THE SOFTWARE.  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|XKBCOMP_AST_H
end_ifndef
begin_define
DECL|macro|XKBCOMP_AST_H
define|#
directive|define
name|XKBCOMP_AST_H
end_define
begin_enum
DECL|enum|xkb_file_type
enum|enum
name|xkb_file_type
block|{
comment|/* Component files, by order of compilation. */
DECL|enumerator|FILE_TYPE_KEYCODES
name|FILE_TYPE_KEYCODES
init|=
literal|0
block|,
DECL|enumerator|FILE_TYPE_TYPES
name|FILE_TYPE_TYPES
init|=
literal|1
block|,
DECL|enumerator|FILE_TYPE_COMPAT
name|FILE_TYPE_COMPAT
init|=
literal|2
block|,
DECL|enumerator|FILE_TYPE_SYMBOLS
name|FILE_TYPE_SYMBOLS
init|=
literal|3
block|,
comment|/* Geometry is not compiled any more. */
DECL|enumerator|FILE_TYPE_GEOMETRY
name|FILE_TYPE_GEOMETRY
init|=
literal|4
block|,
comment|/* A top level file which includes the above files. */
DECL|enumerator|FILE_TYPE_KEYMAP
name|FILE_TYPE_KEYMAP
block|,
comment|/* File types which must be found in a keymap file. */
DECL|macro|FIRST_KEYMAP_FILE_TYPE
define|#
directive|define
name|FIRST_KEYMAP_FILE_TYPE
value|FILE_TYPE_KEYCODES
DECL|macro|LAST_KEYMAP_FILE_TYPE
define|#
directive|define
name|LAST_KEYMAP_FILE_TYPE
value|FILE_TYPE_SYMBOLS
comment|/* This one doesn't mix with the others, but useful here as well. */
DECL|enumerator|FILE_TYPE_RULES
name|FILE_TYPE_RULES
block|,
DECL|enumerator|_FILE_TYPE_NUM_ENTRIES
name|_FILE_TYPE_NUM_ENTRIES
block|}
enum|;
end_enum
begin_enum
DECL|enum|stmt_type
enum|enum
name|stmt_type
block|{
DECL|enumerator|STMT_UNKNOWN
name|STMT_UNKNOWN
init|=
literal|0
block|,
DECL|enumerator|STMT_INCLUDE
name|STMT_INCLUDE
block|,
DECL|enumerator|STMT_KEYCODE
name|STMT_KEYCODE
block|,
DECL|enumerator|STMT_ALIAS
name|STMT_ALIAS
block|,
DECL|enumerator|STMT_EXPR
name|STMT_EXPR
block|,
DECL|enumerator|STMT_VAR
name|STMT_VAR
block|,
DECL|enumerator|STMT_TYPE
name|STMT_TYPE
block|,
DECL|enumerator|STMT_INTERP
name|STMT_INTERP
block|,
DECL|enumerator|STMT_VMOD
name|STMT_VMOD
block|,
DECL|enumerator|STMT_SYMBOLS
name|STMT_SYMBOLS
block|,
DECL|enumerator|STMT_MODMAP
name|STMT_MODMAP
block|,
DECL|enumerator|STMT_GROUP_COMPAT
name|STMT_GROUP_COMPAT
block|,
DECL|enumerator|STMT_LED_MAP
name|STMT_LED_MAP
block|,
DECL|enumerator|STMT_LED_NAME
name|STMT_LED_NAME
block|,
DECL|enumerator|_STMT_NUM_VALUES
name|_STMT_NUM_VALUES
block|}
enum|;
end_enum
begin_enum
DECL|enum|expr_value_type
enum|enum
name|expr_value_type
block|{
DECL|enumerator|EXPR_TYPE_UNKNOWN
name|EXPR_TYPE_UNKNOWN
init|=
literal|0
block|,
DECL|enumerator|EXPR_TYPE_BOOLEAN
name|EXPR_TYPE_BOOLEAN
block|,
DECL|enumerator|EXPR_TYPE_INT
name|EXPR_TYPE_INT
block|,
DECL|enumerator|EXPR_TYPE_STRING
name|EXPR_TYPE_STRING
block|,
DECL|enumerator|EXPR_TYPE_ACTION
name|EXPR_TYPE_ACTION
block|,
DECL|enumerator|EXPR_TYPE_KEYNAME
name|EXPR_TYPE_KEYNAME
block|,
DECL|enumerator|EXPR_TYPE_SYMBOLS
name|EXPR_TYPE_SYMBOLS
block|,
DECL|enumerator|_EXPR_TYPE_NUM_VALUES
name|_EXPR_TYPE_NUM_VALUES
block|}
enum|;
end_enum
begin_enum
DECL|enum|expr_op_type
enum|enum
name|expr_op_type
block|{
DECL|enumerator|EXPR_VALUE
name|EXPR_VALUE
block|,
DECL|enumerator|EXPR_IDENT
name|EXPR_IDENT
block|,
DECL|enumerator|EXPR_ACTION_DECL
name|EXPR_ACTION_DECL
block|,
DECL|enumerator|EXPR_FIELD_REF
name|EXPR_FIELD_REF
block|,
DECL|enumerator|EXPR_ARRAY_REF
name|EXPR_ARRAY_REF
block|,
DECL|enumerator|EXPR_KEYSYM_LIST
name|EXPR_KEYSYM_LIST
block|,
DECL|enumerator|EXPR_ACTION_LIST
name|EXPR_ACTION_LIST
block|,
DECL|enumerator|EXPR_ADD
name|EXPR_ADD
block|,
DECL|enumerator|EXPR_SUBTRACT
name|EXPR_SUBTRACT
block|,
DECL|enumerator|EXPR_MULTIPLY
name|EXPR_MULTIPLY
block|,
DECL|enumerator|EXPR_DIVIDE
name|EXPR_DIVIDE
block|,
DECL|enumerator|EXPR_ASSIGN
name|EXPR_ASSIGN
block|,
DECL|enumerator|EXPR_NOT
name|EXPR_NOT
block|,
DECL|enumerator|EXPR_NEGATE
name|EXPR_NEGATE
block|,
DECL|enumerator|EXPR_INVERT
name|EXPR_INVERT
block|,
DECL|enumerator|EXPR_UNARY_PLUS
name|EXPR_UNARY_PLUS
block|,
DECL|enumerator|_EXPR_NUM_VALUES
name|_EXPR_NUM_VALUES
block|}
enum|;
end_enum
begin_enum
DECL|enum|merge_mode
enum|enum
name|merge_mode
block|{
DECL|enumerator|MERGE_DEFAULT
name|MERGE_DEFAULT
block|,
DECL|enumerator|MERGE_AUGMENT
name|MERGE_AUGMENT
block|,
DECL|enumerator|MERGE_OVERRIDE
name|MERGE_OVERRIDE
block|,
DECL|enumerator|MERGE_REPLACE
name|MERGE_REPLACE
block|, }
enum|;
end_enum
begin_function_decl
specifier|const
name|char
modifier|*
name|xkb_file_type_to_string
parameter_list|(
name|enum
name|xkb_file_type
name|type
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|char
modifier|*
name|stmt_type_to_string
parameter_list|(
name|enum
name|stmt_type
name|type
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|char
modifier|*
name|expr_op_type_to_string
parameter_list|(
name|enum
name|expr_op_type
name|type
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|char
modifier|*
name|expr_value_type_to_string
parameter_list|(
name|enum
name|expr_value_type
name|type
parameter_list|)
function_decl|;
end_function_decl
begin_typedef
DECL|struct|_ParseCommon
typedef|typedef
struct|struct
name|_ParseCommon
block|{
DECL|member|next
name|struct
name|_ParseCommon
modifier|*
name|next
decl_stmt|;
DECL|member|type
name|enum
name|stmt_type
name|type
decl_stmt|;
block|}
DECL|typedef|ParseCommon
name|ParseCommon
typedef|;
end_typedef
begin_typedef
DECL|struct|_IncludeStmt
typedef|typedef
struct|struct
name|_IncludeStmt
block|{
DECL|member|common
name|ParseCommon
name|common
decl_stmt|;
DECL|member|merge
name|enum
name|merge_mode
name|merge
decl_stmt|;
DECL|member|stmt
name|char
modifier|*
name|stmt
decl_stmt|;
DECL|member|file
name|char
modifier|*
name|file
decl_stmt|;
DECL|member|map
name|char
modifier|*
name|map
decl_stmt|;
DECL|member|modifier
name|char
modifier|*
name|modifier
decl_stmt|;
DECL|member|next_incl
name|struct
name|_IncludeStmt
modifier|*
name|next_incl
decl_stmt|;
block|}
DECL|typedef|IncludeStmt
name|IncludeStmt
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|common
name|ParseCommon
name|common
decl_stmt|;
DECL|member|op
name|enum
name|expr_op_type
name|op
decl_stmt|;
DECL|member|value_type
name|enum
name|expr_value_type
name|value_type
decl_stmt|;
block|}
DECL|typedef|ExprCommon
name|ExprCommon
typedef|;
end_typedef
begin_typedef
DECL|typedef|ExprDef
typedef|typedef
name|union
name|ExprDef
name|ExprDef
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|expr
name|ExprCommon
name|expr
decl_stmt|;
DECL|member|ident
name|xkb_atom_t
name|ident
decl_stmt|;
block|}
DECL|typedef|ExprIdent
name|ExprIdent
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|expr
name|ExprCommon
name|expr
decl_stmt|;
DECL|member|str
name|xkb_atom_t
name|str
decl_stmt|;
block|}
DECL|typedef|ExprString
name|ExprString
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|expr
name|ExprCommon
name|expr
decl_stmt|;
DECL|member|set
name|bool
name|set
decl_stmt|;
block|}
DECL|typedef|ExprBoolean
name|ExprBoolean
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|expr
name|ExprCommon
name|expr
decl_stmt|;
DECL|member|ival
name|int
name|ival
decl_stmt|;
block|}
DECL|typedef|ExprInteger
name|ExprInteger
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|expr
name|ExprCommon
name|expr
decl_stmt|;
DECL|member|key_name
name|xkb_atom_t
name|key_name
decl_stmt|;
block|}
DECL|typedef|ExprKeyName
name|ExprKeyName
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|expr
name|ExprCommon
name|expr
decl_stmt|;
DECL|member|left
name|ExprDef
modifier|*
name|left
decl_stmt|;
DECL|member|right
name|ExprDef
modifier|*
name|right
decl_stmt|;
block|}
DECL|typedef|ExprBinary
name|ExprBinary
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|expr
name|ExprCommon
name|expr
decl_stmt|;
DECL|member|child
name|ExprDef
modifier|*
name|child
decl_stmt|;
block|}
DECL|typedef|ExprUnary
name|ExprUnary
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|expr
name|ExprCommon
name|expr
decl_stmt|;
DECL|member|element
name|xkb_atom_t
name|element
decl_stmt|;
DECL|member|field
name|xkb_atom_t
name|field
decl_stmt|;
block|}
DECL|typedef|ExprFieldRef
name|ExprFieldRef
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|expr
name|ExprCommon
name|expr
decl_stmt|;
DECL|member|element
name|xkb_atom_t
name|element
decl_stmt|;
DECL|member|field
name|xkb_atom_t
name|field
decl_stmt|;
DECL|member|entry
name|ExprDef
modifier|*
name|entry
decl_stmt|;
block|}
DECL|typedef|ExprArrayRef
name|ExprArrayRef
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|expr
name|ExprCommon
name|expr
decl_stmt|;
DECL|member|name
name|xkb_atom_t
name|name
decl_stmt|;
DECL|member|args
name|ExprDef
modifier|*
name|args
decl_stmt|;
block|}
DECL|typedef|ExprAction
name|ExprAction
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|expr
name|ExprCommon
name|expr
decl_stmt|;
name|darray
argument_list|(
argument|xkb_keysym_t
argument_list|)
name|syms
expr_stmt|;
DECL|member|symsMapIndex
name|darray
argument_list|(
argument|unsigned int
argument_list|)
name|symsMapIndex
expr_stmt|;
DECL|member|symsNumEntries
name|darray
argument_list|(
argument|unsigned int
argument_list|)
name|symsNumEntries
expr_stmt|;
block|}
DECL|typedef|ExprKeysymList
name|ExprKeysymList
typedef|;
end_typedef
begin_union
DECL|union|ExprDef
union|union
name|ExprDef
block|{
DECL|member|common
name|ParseCommon
name|common
decl_stmt|;
comment|/* Maybe someday we can use C11 anonymous struct for ExprCommon here. */
DECL|member|expr
name|ExprCommon
name|expr
decl_stmt|;
DECL|member|ident
name|ExprIdent
name|ident
decl_stmt|;
DECL|member|string
name|ExprString
name|string
decl_stmt|;
DECL|member|boolean
name|ExprBoolean
name|boolean
decl_stmt|;
DECL|member|integer
name|ExprInteger
name|integer
decl_stmt|;
DECL|member|key_name
name|ExprKeyName
name|key_name
decl_stmt|;
DECL|member|binary
name|ExprBinary
name|binary
decl_stmt|;
DECL|member|unary
name|ExprUnary
name|unary
decl_stmt|;
DECL|member|field_ref
name|ExprFieldRef
name|field_ref
decl_stmt|;
DECL|member|array_ref
name|ExprArrayRef
name|array_ref
decl_stmt|;
DECL|member|action
name|ExprAction
name|action
decl_stmt|;
DECL|member|keysym_list
name|ExprKeysymList
name|keysym_list
decl_stmt|;
block|}
union|;
end_union
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|common
name|ParseCommon
name|common
decl_stmt|;
DECL|member|merge
name|enum
name|merge_mode
name|merge
decl_stmt|;
DECL|member|name
name|ExprDef
modifier|*
name|name
decl_stmt|;
DECL|member|value
name|ExprDef
modifier|*
name|value
decl_stmt|;
block|}
DECL|typedef|VarDef
name|VarDef
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|common
name|ParseCommon
name|common
decl_stmt|;
DECL|member|merge
name|enum
name|merge_mode
name|merge
decl_stmt|;
DECL|member|name
name|xkb_atom_t
name|name
decl_stmt|;
DECL|member|value
name|ExprDef
modifier|*
name|value
decl_stmt|;
block|}
DECL|typedef|VModDef
name|VModDef
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|common
name|ParseCommon
name|common
decl_stmt|;
DECL|member|merge
name|enum
name|merge_mode
name|merge
decl_stmt|;
DECL|member|name
name|xkb_atom_t
name|name
decl_stmt|;
DECL|member|value
name|int64_t
name|value
decl_stmt|;
block|}
DECL|typedef|KeycodeDef
name|KeycodeDef
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|common
name|ParseCommon
name|common
decl_stmt|;
DECL|member|merge
name|enum
name|merge_mode
name|merge
decl_stmt|;
DECL|member|alias
name|xkb_atom_t
name|alias
decl_stmt|;
DECL|member|real
name|xkb_atom_t
name|real
decl_stmt|;
block|}
DECL|typedef|KeyAliasDef
name|KeyAliasDef
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|common
name|ParseCommon
name|common
decl_stmt|;
DECL|member|merge
name|enum
name|merge_mode
name|merge
decl_stmt|;
DECL|member|name
name|xkb_atom_t
name|name
decl_stmt|;
DECL|member|body
name|VarDef
modifier|*
name|body
decl_stmt|;
block|}
DECL|typedef|KeyTypeDef
name|KeyTypeDef
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|common
name|ParseCommon
name|common
decl_stmt|;
DECL|member|merge
name|enum
name|merge_mode
name|merge
decl_stmt|;
DECL|member|keyName
name|xkb_atom_t
name|keyName
decl_stmt|;
DECL|member|symbols
name|VarDef
modifier|*
name|symbols
decl_stmt|;
block|}
DECL|typedef|SymbolsDef
name|SymbolsDef
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|common
name|ParseCommon
name|common
decl_stmt|;
DECL|member|merge
name|enum
name|merge_mode
name|merge
decl_stmt|;
DECL|member|modifier
name|xkb_atom_t
name|modifier
decl_stmt|;
DECL|member|keys
name|ExprDef
modifier|*
name|keys
decl_stmt|;
block|}
DECL|typedef|ModMapDef
name|ModMapDef
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|common
name|ParseCommon
name|common
decl_stmt|;
DECL|member|merge
name|enum
name|merge_mode
name|merge
decl_stmt|;
DECL|member|group
name|unsigned
name|group
decl_stmt|;
DECL|member|def
name|ExprDef
modifier|*
name|def
decl_stmt|;
block|}
DECL|typedef|GroupCompatDef
name|GroupCompatDef
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|common
name|ParseCommon
name|common
decl_stmt|;
DECL|member|merge
name|enum
name|merge_mode
name|merge
decl_stmt|;
DECL|member|sym
name|xkb_keysym_t
name|sym
decl_stmt|;
DECL|member|match
name|ExprDef
modifier|*
name|match
decl_stmt|;
DECL|member|def
name|VarDef
modifier|*
name|def
decl_stmt|;
block|}
DECL|typedef|InterpDef
name|InterpDef
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|common
name|ParseCommon
name|common
decl_stmt|;
DECL|member|merge
name|enum
name|merge_mode
name|merge
decl_stmt|;
DECL|member|ndx
name|unsigned
name|ndx
decl_stmt|;
DECL|member|name
name|ExprDef
modifier|*
name|name
decl_stmt|;
DECL|member|virtual
name|bool
name|virtual
decl_stmt|;
block|}
DECL|typedef|LedNameDef
name|LedNameDef
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|common
name|ParseCommon
name|common
decl_stmt|;
DECL|member|merge
name|enum
name|merge_mode
name|merge
decl_stmt|;
DECL|member|name
name|xkb_atom_t
name|name
decl_stmt|;
DECL|member|body
name|VarDef
modifier|*
name|body
decl_stmt|;
block|}
DECL|typedef|LedMapDef
name|LedMapDef
typedef|;
end_typedef
begin_enum
DECL|enum|xkb_map_flags
enum|enum
name|xkb_map_flags
block|{
DECL|enumerator|MAP_IS_DEFAULT
name|MAP_IS_DEFAULT
init|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
DECL|enumerator|MAP_IS_PARTIAL
name|MAP_IS_PARTIAL
init|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|,
DECL|enumerator|MAP_IS_HIDDEN
name|MAP_IS_HIDDEN
init|=
operator|(
literal|1
operator|<<
literal|2
operator|)
block|,
DECL|enumerator|MAP_HAS_ALPHANUMERIC
name|MAP_HAS_ALPHANUMERIC
init|=
operator|(
literal|1
operator|<<
literal|3
operator|)
block|,
DECL|enumerator|MAP_HAS_MODIFIER
name|MAP_HAS_MODIFIER
init|=
operator|(
literal|1
operator|<<
literal|4
operator|)
block|,
DECL|enumerator|MAP_HAS_KEYPAD
name|MAP_HAS_KEYPAD
init|=
operator|(
literal|1
operator|<<
literal|5
operator|)
block|,
DECL|enumerator|MAP_HAS_FN
name|MAP_HAS_FN
init|=
operator|(
literal|1
operator|<<
literal|6
operator|)
block|,
DECL|enumerator|MAP_IS_ALTGR
name|MAP_IS_ALTGR
init|=
operator|(
literal|1
operator|<<
literal|7
operator|)
block|, }
enum|;
end_enum
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|common
name|ParseCommon
name|common
decl_stmt|;
DECL|member|file_type
name|enum
name|xkb_file_type
name|file_type
decl_stmt|;
DECL|member|topName
name|char
modifier|*
name|topName
decl_stmt|;
DECL|member|name
name|char
modifier|*
name|name
decl_stmt|;
DECL|member|defs
name|ParseCommon
modifier|*
name|defs
decl_stmt|;
DECL|member|flags
name|enum
name|xkb_map_flags
name|flags
decl_stmt|;
block|}
DECL|typedef|XkbFile
name|XkbFile
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
end_unit
