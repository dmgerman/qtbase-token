begin_unit
begin_comment
comment|/************************************************************  * Copyright (c) 1994 by Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, and distribute this  * software and its documentation for any purpose and without  * fee is hereby granted, provided that the above copyright  * notice appear in all copies and that both that copyright  * notice and this permission notice appear in supporting  * documentation, and that the name of Silicon Graphics not be  * used in advertising or publicity pertaining to distribution  * of the software without specific prior written permission.  * Silicon Graphics makes no representation about the suitability  * of this software for any purpose. It is provided "as is"  * without any express or implied warranty.  *  * SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS  * SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY  * AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON  * GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL  * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,  * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE  * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH  * THE USE OR PERFORMANCE OF THIS SOFTWARE.  *  ********************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|XKBCOMP_PRIV_H
end_ifndef
begin_define
DECL|macro|XKBCOMP_PRIV_H
define|#
directive|define
name|XKBCOMP_PRIV_H
end_define
begin_include
include|#
directive|include
file|"keymap.h"
end_include
begin_include
include|#
directive|include
file|"ast.h"
end_include
begin_struct
DECL|struct|xkb_component_names
struct|struct
name|xkb_component_names
block|{
DECL|member|keycodes
name|char
modifier|*
name|keycodes
decl_stmt|;
DECL|member|types
name|char
modifier|*
name|types
decl_stmt|;
DECL|member|compat
name|char
modifier|*
name|compat
decl_stmt|;
DECL|member|symbols
name|char
modifier|*
name|symbols
decl_stmt|;
block|}
struct|;
end_struct
begin_function_decl
name|char
modifier|*
name|text_v1_keymap_get_as_string
parameter_list|(
name|struct
name|xkb_keymap
modifier|*
name|keymap
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|XkbFile
modifier|*
name|XkbParseFile
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|,
name|FILE
modifier|*
name|file
parameter_list|,
specifier|const
name|char
modifier|*
name|file_name
parameter_list|,
specifier|const
name|char
modifier|*
name|map
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|XkbFile
modifier|*
name|XkbParseString
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|string
parameter_list|,
specifier|const
name|char
modifier|*
name|file_name
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|XkbFile
modifier|*
name|XkbParseBuffer
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|length
parameter_list|,
specifier|const
name|char
modifier|*
name|file_name
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|FreeXkbFile
parameter_list|(
name|XkbFile
modifier|*
name|file
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|XkbFile
modifier|*
name|XkbFileFromComponents
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|,
specifier|const
name|struct
name|xkb_component_names
modifier|*
name|kkctgs
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|CompileKeycodes
parameter_list|(
name|XkbFile
modifier|*
name|file
parameter_list|,
name|struct
name|xkb_keymap
modifier|*
name|keymap
parameter_list|,
name|enum
name|merge_mode
name|merge
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|CompileKeyTypes
parameter_list|(
name|XkbFile
modifier|*
name|file
parameter_list|,
name|struct
name|xkb_keymap
modifier|*
name|keymap
parameter_list|,
name|enum
name|merge_mode
name|merge
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|CompileCompatMap
parameter_list|(
name|XkbFile
modifier|*
name|file
parameter_list|,
name|struct
name|xkb_keymap
modifier|*
name|keymap
parameter_list|,
name|enum
name|merge_mode
name|merge
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|CompileSymbols
parameter_list|(
name|XkbFile
modifier|*
name|file
parameter_list|,
name|struct
name|xkb_keymap
modifier|*
name|keymap
parameter_list|,
name|enum
name|merge_mode
name|merge
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|CompileKeymap
parameter_list|(
name|XkbFile
modifier|*
name|file
parameter_list|,
name|struct
name|xkb_keymap
modifier|*
name|keymap
parameter_list|,
name|enum
name|merge_mode
name|merge
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|LookupKeysym
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|xkb_keysym_t
modifier|*
name|sym_rtrn
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/***====================================================================***/
end_comment
begin_function
specifier|static
specifier|inline
name|bool
DECL|function|ReportNotArray
name|ReportNotArray
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|field
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
name|log_err
argument_list|(
name|ctx
argument_list|,
literal|"The %s %s field is not an array; "
literal|"Ignoring illegal assignment in %s\n"
argument_list|,
name|type
argument_list|,
name|field
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|bool
DECL|function|ReportShouldBeArray
name|ReportShouldBeArray
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|field
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
name|log_err
argument_list|(
name|ctx
argument_list|,
literal|"Missing subscript for %s %s; "
literal|"Ignoring illegal assignment in %s\n"
argument_list|,
name|type
argument_list|,
name|field
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|bool
DECL|function|ReportBadType
name|ReportBadType
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|field
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|wanted
parameter_list|)
block|{
name|log_err
argument_list|(
name|ctx
argument_list|,
literal|"The %s %s field must be a %s; "
literal|"Ignoring illegal assignment in %s\n"
argument_list|,
name|type
argument_list|,
name|field
argument_list|,
name|wanted
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|bool
DECL|function|ReportBadField
name|ReportBadField
parameter_list|(
name|struct
name|xkb_context
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|field
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
name|log_err
argument_list|(
name|ctx
argument_list|,
literal|"Unknown %s field %s in %s; "
literal|"Ignoring assignment to unknown field in %s\n"
argument_list|,
name|type
argument_list|,
name|field
argument_list|,
name|name
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
end_unit
