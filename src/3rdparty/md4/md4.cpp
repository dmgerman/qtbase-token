begin_unit
begin_comment
comment|/*  * MD4 (RFC-1320) message digest.  * Modified from MD5 code by Andrey Panin<pazke@donpac.ru>  *  * Written by Solar Designer<solar@openwall.com> in 2001, and placed in  * the public domain.  There's absolutely no warranty.  *  * This differs from Colin Plumb's older public domain implementation in  * that no 32-bit integer data type is required, there's no compile-time  * endianness configuration, and the function prototypes match OpenSSL's.  * The primary goals are portability and ease of use.  *  * This implementation is meant to be fast, but not as fast as possible.  * Some known optimizations are not included to reduce source code size  * and avoid compile-time configuration.  */
end_comment
begin_include
include|#
directive|include
file|"md4.h"
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*  * The basic MD4 functions.  */
DECL|macro|F
define|#
directive|define
name|F
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|,
name|z
parameter_list|)
value|((z) ^ ((x)& ((y) ^ (z))))
DECL|macro|G
define|#
directive|define
name|G
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|,
name|z
parameter_list|)
value|(((x)& (y)) | ((x)& (z)) | ((y)& (z)))
DECL|macro|H
define|#
directive|define
name|H
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|,
name|z
parameter_list|)
value|((x) ^ (y) ^ (z))
comment|/*  * The MD4 transformation for all four rounds.  */
DECL|macro|STEP
define|#
directive|define
name|STEP
parameter_list|(
name|f
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|,
name|x
parameter_list|,
name|s
parameter_list|)
define|\
value|(a) += f((b), (c), (d)) + (x);	 \ 	(a) = ((a)<< (s)) | ((a)>> (32 - (s)))
comment|/*  * SET reads 4 input bytes in little-endian byte order and stores them  * in a properly aligned word in host byte order.  *  * The check for little-endian architectures which tolerate unaligned  * memory accesses is just an optimization.  Nothing will break if it  * doesn't work.  */
if|#
directive|if
name|defined
argument_list|(
name|__i386__
argument_list|)
operator|||
name|defined
argument_list|(
name|__x86_64__
argument_list|)
DECL|macro|SET
define|#
directive|define
name|SET
parameter_list|(
name|n
parameter_list|)
define|\
value|(*(const quint32 *)&ptr[(n) * 4])
DECL|macro|GET
define|#
directive|define
name|GET
parameter_list|(
name|n
parameter_list|)
define|\
value|SET(n)
else|#
directive|else
define|#
directive|define
name|SET
parameter_list|(
name|n
parameter_list|)
define|\
value|(ctx->block[(n)] = \ 	(quint32)ptr[(n) * 4] | \ 	((quint32)ptr[(n) * 4 + 1]<< 8) | \ 	((quint32)ptr[(n) * 4 + 2]<< 16) | \ 	((quint32)ptr[(n) * 4 + 3]<< 24))
define|#
directive|define
name|GET
parameter_list|(
name|n
parameter_list|)
define|\
value|(ctx->block[(n)])
endif|#
directive|endif
comment|/*  * This processes one or more 64-byte data blocks, but does NOT update  * the bit counters.  There're no alignment requirements.  */
DECL|function|body
specifier|static
specifier|const
name|unsigned
name|char
modifier|*
name|body
parameter_list|(
name|struct
name|md4_context
modifier|*
name|ctx
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|ptr
decl_stmt|;
name|quint32
name|a
decl_stmt|,
name|b
decl_stmt|,
name|c
decl_stmt|,
name|d
decl_stmt|;
name|quint32
name|saved_a
decl_stmt|,
name|saved_b
decl_stmt|,
name|saved_c
decl_stmt|,
name|saved_d
decl_stmt|;
name|ptr
operator|=
name|data
expr_stmt|;
name|a
operator|=
name|ctx
operator|->
name|a
expr_stmt|;
name|b
operator|=
name|ctx
operator|->
name|b
expr_stmt|;
name|c
operator|=
name|ctx
operator|->
name|c
expr_stmt|;
name|d
operator|=
name|ctx
operator|->
name|d
expr_stmt|;
do|do
block|{
name|saved_a
operator|=
name|a
expr_stmt|;
name|saved_b
operator|=
name|b
expr_stmt|;
name|saved_c
operator|=
name|c
expr_stmt|;
name|saved_d
operator|=
name|d
expr_stmt|;
comment|/* Round 1 */
name|STEP
argument_list|(
name|F
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|SET
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|F
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|SET
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|F
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|SET
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|F
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|SET
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|F
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|SET
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|F
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|SET
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|F
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|SET
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|F
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|SET
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|F
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|SET
argument_list|(
literal|8
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|F
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|SET
argument_list|(
literal|9
argument_list|)
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|F
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|SET
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|F
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|SET
argument_list|(
literal|11
argument_list|)
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|F
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|SET
argument_list|(
literal|12
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|F
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|SET
argument_list|(
literal|13
argument_list|)
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|F
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|SET
argument_list|(
literal|14
argument_list|)
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|F
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|SET
argument_list|(
literal|15
argument_list|)
argument_list|,
literal|19
argument_list|)
expr_stmt|;
comment|/* Round 2 */
name|STEP
argument_list|(
name|G
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|GET
argument_list|(
literal|0
argument_list|)
operator|+
literal|0x5A827999
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|G
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|GET
argument_list|(
literal|4
argument_list|)
operator|+
literal|0x5A827999
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|G
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|GET
argument_list|(
literal|8
argument_list|)
operator|+
literal|0x5A827999
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|G
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|GET
argument_list|(
literal|12
argument_list|)
operator|+
literal|0x5A827999
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|G
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|GET
argument_list|(
literal|1
argument_list|)
operator|+
literal|0x5A827999
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|G
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|GET
argument_list|(
literal|5
argument_list|)
operator|+
literal|0x5A827999
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|G
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|GET
argument_list|(
literal|9
argument_list|)
operator|+
literal|0x5A827999
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|G
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|GET
argument_list|(
literal|13
argument_list|)
operator|+
literal|0x5A827999
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|G
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|GET
argument_list|(
literal|2
argument_list|)
operator|+
literal|0x5A827999
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|G
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|GET
argument_list|(
literal|6
argument_list|)
operator|+
literal|0x5A827999
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|G
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|GET
argument_list|(
literal|10
argument_list|)
operator|+
literal|0x5A827999
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|G
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|GET
argument_list|(
literal|14
argument_list|)
operator|+
literal|0x5A827999
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|G
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|GET
argument_list|(
literal|3
argument_list|)
operator|+
literal|0x5A827999
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|G
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|GET
argument_list|(
literal|7
argument_list|)
operator|+
literal|0x5A827999
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|G
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|GET
argument_list|(
literal|11
argument_list|)
operator|+
literal|0x5A827999
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|G
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|GET
argument_list|(
literal|15
argument_list|)
operator|+
literal|0x5A827999
argument_list|,
literal|13
argument_list|)
expr_stmt|;
comment|/* Round 3 */
name|STEP
argument_list|(
name|H
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|GET
argument_list|(
literal|0
argument_list|)
operator|+
literal|0x6ED9EBA1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|H
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|GET
argument_list|(
literal|8
argument_list|)
operator|+
literal|0x6ED9EBA1
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|H
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|GET
argument_list|(
literal|4
argument_list|)
operator|+
literal|0x6ED9EBA1
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|H
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|GET
argument_list|(
literal|12
argument_list|)
operator|+
literal|0x6ED9EBA1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|H
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|GET
argument_list|(
literal|2
argument_list|)
operator|+
literal|0x6ED9EBA1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|H
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|GET
argument_list|(
literal|10
argument_list|)
operator|+
literal|0x6ED9EBA1
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|H
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|GET
argument_list|(
literal|6
argument_list|)
operator|+
literal|0x6ED9EBA1
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|H
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|GET
argument_list|(
literal|14
argument_list|)
operator|+
literal|0x6ED9EBA1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|H
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|GET
argument_list|(
literal|1
argument_list|)
operator|+
literal|0x6ED9EBA1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|H
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|GET
argument_list|(
literal|9
argument_list|)
operator|+
literal|0x6ED9EBA1
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|H
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|GET
argument_list|(
literal|5
argument_list|)
operator|+
literal|0x6ED9EBA1
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|H
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|GET
argument_list|(
literal|13
argument_list|)
operator|+
literal|0x6ED9EBA1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|H
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|GET
argument_list|(
literal|3
argument_list|)
operator|+
literal|0x6ED9EBA1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|H
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|GET
argument_list|(
literal|11
argument_list|)
operator|+
literal|0x6ED9EBA1
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|H
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|GET
argument_list|(
literal|7
argument_list|)
operator|+
literal|0x6ED9EBA1
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|STEP
argument_list|(
name|H
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|GET
argument_list|(
literal|15
argument_list|)
operator|+
literal|0x6ED9EBA1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|a
operator|+=
name|saved_a
expr_stmt|;
name|b
operator|+=
name|saved_b
expr_stmt|;
name|c
operator|+=
name|saved_c
expr_stmt|;
name|d
operator|+=
name|saved_d
expr_stmt|;
name|ptr
operator|+=
literal|64
expr_stmt|;
block|}
do|while
condition|(
name|size
operator|-=
literal|64
condition|)
do|;
name|ctx
operator|->
name|a
operator|=
name|a
expr_stmt|;
name|ctx
operator|->
name|b
operator|=
name|b
expr_stmt|;
name|ctx
operator|->
name|c
operator|=
name|c
expr_stmt|;
name|ctx
operator|->
name|d
operator|=
name|d
expr_stmt|;
return|return
name|ptr
return|;
block|}
end_function
begin_function
DECL|function|md4_init
specifier|static
name|void
name|md4_init
parameter_list|(
name|struct
name|md4_context
modifier|*
name|ctx
parameter_list|)
block|{
name|ctx
operator|->
name|a
operator|=
literal|0x67452301
expr_stmt|;
name|ctx
operator|->
name|b
operator|=
literal|0xefcdab89
expr_stmt|;
name|ctx
operator|->
name|c
operator|=
literal|0x98badcfe
expr_stmt|;
name|ctx
operator|->
name|d
operator|=
literal|0x10325476
expr_stmt|;
name|ctx
operator|->
name|lo
operator|=
literal|0
expr_stmt|;
name|ctx
operator|->
name|hi
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|md4_update
specifier|static
name|void
name|md4_update
parameter_list|(
name|struct
name|md4_context
modifier|*
name|ctx
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
comment|/* @UNSAFE */
name|quint32
name|saved_lo
decl_stmt|;
name|unsigned
name|long
name|used
decl_stmt|,
name|free
decl_stmt|;
name|saved_lo
operator|=
name|ctx
operator|->
name|lo
expr_stmt|;
if|if
condition|(
operator|(
name|ctx
operator|->
name|lo
operator|=
operator|(
name|saved_lo
operator|+
name|size
operator|)
operator|&
literal|0x1fffffff
operator|)
operator|<
name|saved_lo
condition|)
name|ctx
operator|->
name|hi
operator|++
expr_stmt|;
name|ctx
operator|->
name|hi
operator|+=
call|(
name|quint32
call|)
argument_list|(
name|size
operator|>>
literal|29
argument_list|)
expr_stmt|;
name|used
operator|=
name|saved_lo
operator|&
literal|0x3f
expr_stmt|;
if|if
condition|(
name|used
condition|)
block|{
name|free
operator|=
literal|64
operator|-
name|used
expr_stmt|;
if|if
condition|(
name|size
operator|<
name|free
condition|)
block|{
name|memcpy
argument_list|(
operator|&
name|ctx
operator|->
name|buffer
index|[
name|used
index|]
argument_list|,
name|data
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return;
block|}
name|memcpy
argument_list|(
operator|&
name|ctx
operator|->
name|buffer
index|[
name|used
index|]
argument_list|,
name|data
argument_list|,
name|free
argument_list|)
expr_stmt|;
name|data
operator|=
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
name|data
operator|+
name|free
expr_stmt|;
name|size
operator|-=
name|free
expr_stmt|;
name|body
argument_list|(
name|ctx
argument_list|,
name|ctx
operator|->
name|buffer
argument_list|,
literal|64
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|size
operator|>=
literal|64
condition|)
block|{
name|data
operator|=
name|body
argument_list|(
name|ctx
argument_list|,
name|data
argument_list|,
name|size
operator|&
operator|~
operator|(
name|unsigned
name|long
operator|)
literal|0x3f
argument_list|)
expr_stmt|;
name|size
operator|&=
literal|0x3f
expr_stmt|;
block|}
name|memcpy
argument_list|(
name|ctx
operator|->
name|buffer
argument_list|,
name|data
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|md4_final
specifier|static
name|void
name|md4_final
parameter_list|(
name|struct
name|md4_context
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
name|result
index|[
name|MD4_RESULTLEN
index|]
parameter_list|)
block|{
comment|/* @UNSAFE */
name|unsigned
name|long
name|used
decl_stmt|,
name|free
decl_stmt|;
name|used
operator|=
name|ctx
operator|->
name|lo
operator|&
literal|0x3f
expr_stmt|;
name|ctx
operator|->
name|buffer
index|[
name|used
operator|++
index|]
operator|=
literal|0x80
expr_stmt|;
name|free
operator|=
literal|64
operator|-
name|used
expr_stmt|;
if|if
condition|(
name|free
operator|<
literal|8
condition|)
block|{
name|memset
argument_list|(
operator|&
name|ctx
operator|->
name|buffer
index|[
name|used
index|]
argument_list|,
literal|0
argument_list|,
name|free
argument_list|)
expr_stmt|;
name|body
argument_list|(
name|ctx
argument_list|,
name|ctx
operator|->
name|buffer
argument_list|,
literal|64
argument_list|)
expr_stmt|;
name|used
operator|=
literal|0
expr_stmt|;
name|free
operator|=
literal|64
expr_stmt|;
block|}
name|memset
argument_list|(
operator|&
name|ctx
operator|->
name|buffer
index|[
name|used
index|]
argument_list|,
literal|0
argument_list|,
name|free
operator|-
literal|8
argument_list|)
expr_stmt|;
name|ctx
operator|->
name|lo
operator|<<=
literal|3
expr_stmt|;
name|ctx
operator|->
name|buffer
index|[
literal|56
index|]
operator|=
name|ctx
operator|->
name|lo
expr_stmt|;
name|ctx
operator|->
name|buffer
index|[
literal|57
index|]
operator|=
name|ctx
operator|->
name|lo
operator|>>
literal|8
expr_stmt|;
name|ctx
operator|->
name|buffer
index|[
literal|58
index|]
operator|=
name|ctx
operator|->
name|lo
operator|>>
literal|16
expr_stmt|;
name|ctx
operator|->
name|buffer
index|[
literal|59
index|]
operator|=
name|ctx
operator|->
name|lo
operator|>>
literal|24
expr_stmt|;
name|ctx
operator|->
name|buffer
index|[
literal|60
index|]
operator|=
name|ctx
operator|->
name|hi
expr_stmt|;
name|ctx
operator|->
name|buffer
index|[
literal|61
index|]
operator|=
name|ctx
operator|->
name|hi
operator|>>
literal|8
expr_stmt|;
name|ctx
operator|->
name|buffer
index|[
literal|62
index|]
operator|=
name|ctx
operator|->
name|hi
operator|>>
literal|16
expr_stmt|;
name|ctx
operator|->
name|buffer
index|[
literal|63
index|]
operator|=
name|ctx
operator|->
name|hi
operator|>>
literal|24
expr_stmt|;
name|body
argument_list|(
name|ctx
argument_list|,
name|ctx
operator|->
name|buffer
argument_list|,
literal|64
argument_list|)
expr_stmt|;
name|result
index|[
literal|0
index|]
operator|=
name|ctx
operator|->
name|a
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
name|ctx
operator|->
name|a
operator|>>
literal|8
expr_stmt|;
name|result
index|[
literal|2
index|]
operator|=
name|ctx
operator|->
name|a
operator|>>
literal|16
expr_stmt|;
name|result
index|[
literal|3
index|]
operator|=
name|ctx
operator|->
name|a
operator|>>
literal|24
expr_stmt|;
name|result
index|[
literal|4
index|]
operator|=
name|ctx
operator|->
name|b
expr_stmt|;
name|result
index|[
literal|5
index|]
operator|=
name|ctx
operator|->
name|b
operator|>>
literal|8
expr_stmt|;
name|result
index|[
literal|6
index|]
operator|=
name|ctx
operator|->
name|b
operator|>>
literal|16
expr_stmt|;
name|result
index|[
literal|7
index|]
operator|=
name|ctx
operator|->
name|b
operator|>>
literal|24
expr_stmt|;
name|result
index|[
literal|8
index|]
operator|=
name|ctx
operator|->
name|c
expr_stmt|;
name|result
index|[
literal|9
index|]
operator|=
name|ctx
operator|->
name|c
operator|>>
literal|8
expr_stmt|;
name|result
index|[
literal|10
index|]
operator|=
name|ctx
operator|->
name|c
operator|>>
literal|16
expr_stmt|;
name|result
index|[
literal|11
index|]
operator|=
name|ctx
operator|->
name|c
operator|>>
literal|24
expr_stmt|;
name|result
index|[
literal|12
index|]
operator|=
name|ctx
operator|->
name|d
expr_stmt|;
name|result
index|[
literal|13
index|]
operator|=
name|ctx
operator|->
name|d
operator|>>
literal|8
expr_stmt|;
name|result
index|[
literal|14
index|]
operator|=
name|ctx
operator|->
name|d
operator|>>
literal|16
expr_stmt|;
name|result
index|[
literal|15
index|]
operator|=
name|ctx
operator|->
name|d
operator|>>
literal|24
expr_stmt|;
name|memset
argument_list|(
name|ctx
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_undef
DECL|macro|F
undef|#
directive|undef
name|F
end_undef
begin_undef
DECL|macro|G
undef|#
directive|undef
name|G
end_undef
begin_undef
DECL|macro|H
undef|#
directive|undef
name|H
end_undef
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
