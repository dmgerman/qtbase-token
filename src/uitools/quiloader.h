begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the Qt Designer of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QUILOADER_H
end_ifndef
begin_define
DECL|macro|QUILOADER_H
define|#
directive|define
name|QUILOADER_H
end_define
begin_include
include|#
directive|include
file|<QtCore/QObject>
end_include
begin_include
include|#
directive|include
file|<QtCore/QScopedPointer>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|variable|QWidget
name|class
name|QWidget
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QLayout
name|class
name|QLayout
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QAction
name|class
name|QAction
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QActionGroup
name|class
name|QActionGroup
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QString
name|class
name|QString
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QIODevice
name|class
name|QIODevice
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDir
name|class
name|QDir
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QUiLoaderPrivate
name|class
name|QUiLoaderPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QUiLoader
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
operator|:
name|QUiLoader
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|virtual
operator|~
name|QUiLoader
argument_list|()
block|;
name|QStringList
name|pluginPaths
argument_list|()
specifier|const
block|;
name|void
name|clearPluginPaths
argument_list|()
block|;
name|void
name|addPluginPath
argument_list|(
specifier|const
name|QString
operator|&
name|path
argument_list|)
block|;
name|QWidget
operator|*
name|load
argument_list|(
name|QIODevice
operator|*
name|device
argument_list|,
name|QWidget
operator|*
name|parentWidget
operator|=
literal|0
argument_list|)
block|;
name|QStringList
name|availableWidgets
argument_list|()
specifier|const
block|;
name|QStringList
name|availableLayouts
argument_list|()
specifier|const
block|;
name|virtual
name|QWidget
operator|*
name|createWidget
argument_list|(
specifier|const
name|QString
operator|&
name|className
argument_list|,
name|QWidget
operator|*
name|parent
operator|=
literal|0
argument_list|,
specifier|const
name|QString
operator|&
name|name
operator|=
name|QString
argument_list|()
argument_list|)
block|;
name|virtual
name|QLayout
operator|*
name|createLayout
argument_list|(
specifier|const
name|QString
operator|&
name|className
argument_list|,
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|,
specifier|const
name|QString
operator|&
name|name
operator|=
name|QString
argument_list|()
argument_list|)
block|;
name|virtual
name|QActionGroup
operator|*
name|createActionGroup
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|,
specifier|const
name|QString
operator|&
name|name
operator|=
name|QString
argument_list|()
argument_list|)
block|;
name|virtual
name|QAction
operator|*
name|createAction
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|,
specifier|const
name|QString
operator|&
name|name
operator|=
name|QString
argument_list|()
argument_list|)
block|;
name|void
name|setWorkingDirectory
argument_list|(
specifier|const
name|QDir
operator|&
name|dir
argument_list|)
block|;
name|QDir
name|workingDirectory
argument_list|()
specifier|const
block|;
name|void
name|setScriptingEnabled
argument_list|(
argument|bool enabled
argument_list|)
block|;
name|bool
name|isScriptingEnabled
argument_list|()
specifier|const
block|;
name|void
name|setLanguageChangeEnabled
argument_list|(
argument|bool enabled
argument_list|)
block|;
name|bool
name|isLanguageChangeEnabled
argument_list|()
specifier|const
block|;
name|void
name|setTranslationEnabled
argument_list|(
argument|bool enabled
argument_list|)
block|;
name|bool
name|isTranslationEnabled
argument_list|()
specifier|const
block|;
name|QString
name|errorString
argument_list|()
specifier|const
block|;
name|private
operator|:
name|QScopedPointer
operator|<
name|QUiLoaderPrivate
operator|>
name|d_ptr
block|;
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QUiLoader
argument_list|)
name|Q_DISABLE_COPY
argument_list|(
argument|QUiLoader
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QUILOADER_H
end_comment
end_unit
