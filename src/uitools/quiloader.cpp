begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the Qt Designer of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"quiloader.h"
end_include
begin_include
include|#
directive|include
file|"quiloader_p.h"
end_include
begin_include
include|#
directive|include
file|"customwidget.h"
end_include
begin_include
include|#
directive|include
file|<formbuilder.h>
end_include
begin_include
include|#
directive|include
file|<formbuilderextra_p.h>
end_include
begin_include
include|#
directive|include
file|<textbuilder_p.h>
end_include
begin_include
include|#
directive|include
file|<ui4_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QAction>
end_include
begin_include
include|#
directive|include
file|<QtGui/QActionGroup>
end_include
begin_include
include|#
directive|include
file|<QtGui/QApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDir>
end_include
begin_include
include|#
directive|include
file|<QtCore/QLibraryInfo>
end_include
begin_include
include|#
directive|include
file|<QtGui/QLayout>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWidget>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMap>
end_include
begin_include
include|#
directive|include
file|<QtGui/QTabWidget>
end_include
begin_include
include|#
directive|include
file|<QtGui/QTreeWidget>
end_include
begin_include
include|#
directive|include
file|<QtGui/QListWidget>
end_include
begin_include
include|#
directive|include
file|<QtGui/QTableWidget>
end_include
begin_include
include|#
directive|include
file|<QtGui/QToolBox>
end_include
begin_include
include|#
directive|include
file|<QtGui/QComboBox>
end_include
begin_include
include|#
directive|include
file|<QtGui/QFontComboBox>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_typedef
DECL|typedef|widget_map
typedef|typedef
name|QMap
argument_list|<
name|QString
argument_list|,
name|bool
argument_list|>
name|widget_map
typedef|;
end_typedef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|widget_map
argument_list|,
argument|g_widgets
argument_list|)
end_macro
begin_class_decl
class_decl|class
name|QUiLoader
class_decl|;
end_class_decl
begin_class_decl
class_decl|class
name|QUiLoaderPrivate
class_decl|;
end_class_decl
begin_ifdef
ifdef|#
directive|ifdef
name|QFORMINTERNAL_NAMESPACE
end_ifdef
begin_namespace
DECL|namespace|QFormInternal
namespace|namespace
name|QFormInternal
block|{
endif|#
directive|endif
DECL|class|TranslatingTextBuilder
class|class
name|TranslatingTextBuilder
super|:
specifier|public
name|QTextBuilder
block|{
public|public:
DECL|function|TranslatingTextBuilder
name|TranslatingTextBuilder
parameter_list|(
name|bool
name|trEnabled
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|className
parameter_list|)
member_init_list|:
name|m_trEnabled
argument_list|(
name|trEnabled
argument_list|)
member_init_list|,
name|m_className
argument_list|(
name|className
argument_list|)
block|{}
specifier|virtual
name|QVariant
name|loadText
parameter_list|(
specifier|const
name|DomProperty
modifier|*
name|icon
parameter_list|)
specifier|const
function_decl|;
specifier|virtual
name|QVariant
name|toNativeValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
specifier|const
function_decl|;
private|private:
DECL|member|m_trEnabled
name|bool
name|m_trEnabled
decl_stmt|;
DECL|member|m_className
name|QByteArray
name|m_className
decl_stmt|;
block|}
class|;
DECL|function|loadText
name|QVariant
name|TranslatingTextBuilder
operator|::
name|loadText
parameter_list|(
specifier|const
name|DomProperty
modifier|*
name|text
parameter_list|)
specifier|const
block|{
specifier|const
name|DomString
modifier|*
name|str
init|=
name|text
operator|->
name|elementString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|str
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|str
operator|->
name|hasAttributeNotr
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|notr
init|=
name|str
operator|->
name|attributeNotr
argument_list|()
decl_stmt|;
if|if
condition|(
name|notr
operator|==
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
operator|||
name|notr
operator|==
name|QLatin1String
argument_list|(
literal|"yes"
argument_list|)
condition|)
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|str
operator|->
name|text
argument_list|()
argument_list|)
return|;
block|}
name|QUiTranslatableStringValue
name|strVal
decl_stmt|;
name|strVal
operator|.
name|setValue
argument_list|(
name|str
operator|->
name|text
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|str
operator|->
name|hasAttributeComment
argument_list|()
condition|)
name|strVal
operator|.
name|setComment
argument_list|(
name|str
operator|->
name|attributeComment
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|strVal
argument_list|)
return|;
block|}
DECL|function|toNativeValue
name|QVariant
name|TranslatingTextBuilder
operator|::
name|toNativeValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|value
operator|.
name|canConvert
argument_list|<
name|QUiTranslatableStringValue
argument_list|>
argument_list|()
condition|)
block|{
name|QUiTranslatableStringValue
name|tsv
init|=
name|qvariant_cast
argument_list|<
name|QUiTranslatableStringValue
argument_list|>
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_trEnabled
condition|)
return|return
name|QString
operator|::
name|fromUtf8
argument_list|(
name|tsv
operator|.
name|value
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
return|;
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QApplication
operator|::
name|translate
argument_list|(
name|m_className
argument_list|,
name|tsv
operator|.
name|value
argument_list|()
argument_list|,
name|tsv
operator|.
name|comment
argument_list|()
argument_list|,
name|QCoreApplication
operator|::
name|UnicodeUTF8
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|value
operator|.
name|canConvert
argument_list|<
name|QString
argument_list|>
argument_list|()
condition|)
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
return|return
name|value
return|;
block|}
comment|// This is "exported" to linguist
DECL|member|qUiItemRoles
specifier|const
name|QUiItemRolePair
name|qUiItemRoles
index|[]
init|=
block|{
block|{
name|Qt
operator|::
name|DisplayRole
block|,
name|Qt
operator|::
name|DisplayPropertyRole
block|}
block|,
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
block|{
name|Qt
operator|::
name|ToolTipRole
block|,
name|Qt
operator|::
name|ToolTipPropertyRole
block|}
block|,
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_STATUSTIP
block|{
name|Qt
operator|::
name|StatusTipRole
block|,
name|Qt
operator|::
name|StatusTipPropertyRole
block|}
block|,
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
block|{
name|Qt
operator|::
name|WhatsThisRole
block|,
name|Qt
operator|::
name|WhatsThisPropertyRole
block|}
block|,
endif|#
directive|endif
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|}
decl_stmt|;
DECL|function|recursiveReTranslate
specifier|static
name|void
name|recursiveReTranslate
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|class_name
parameter_list|)
block|{
specifier|const
name|QUiItemRolePair
modifier|*
name|irs
init|=
name|qUiItemRoles
decl_stmt|;
name|int
name|cnt
init|=
name|item
operator|->
name|columnCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|unsigned
name|j
init|=
literal|0
init|;
name|irs
index|[
name|j
index|]
operator|.
name|shadowRole
operator|>=
literal|0
condition|;
name|j
operator|++
control|)
block|{
name|QVariant
name|v
init|=
name|item
operator|->
name|data
argument_list|(
name|i
argument_list|,
name|irs
index|[
name|j
index|]
operator|.
name|shadowRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QUiTranslatableStringValue
name|tsv
init|=
name|qvariant_cast
argument_list|<
name|QUiTranslatableStringValue
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|text
init|=
name|QApplication
operator|::
name|translate
argument_list|(
name|class_name
argument_list|,
name|tsv
operator|.
name|value
argument_list|()
argument_list|,
name|tsv
operator|.
name|comment
argument_list|()
argument_list|,
name|QCoreApplication
operator|::
name|UnicodeUTF8
argument_list|)
decl_stmt|;
name|item
operator|->
name|setData
argument_list|(
name|i
argument_list|,
name|irs
index|[
name|j
index|]
operator|.
name|realRole
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|cnt
operator|=
name|item
operator|->
name|childCount
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
operator|++
name|i
control|)
name|recursiveReTranslate
argument_list|(
name|item
operator|->
name|child
argument_list|(
name|i
argument_list|)
argument_list|,
name|class_name
argument_list|)
expr_stmt|;
block|}
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|reTranslateWidgetItem
specifier|static
name|void
name|reTranslateWidgetItem
parameter_list|(
name|T
modifier|*
name|item
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|class_name
parameter_list|)
block|{
specifier|const
name|QUiItemRolePair
modifier|*
name|irs
init|=
name|qUiItemRoles
decl_stmt|;
for|for
control|(
name|unsigned
name|j
init|=
literal|0
init|;
name|irs
index|[
name|j
index|]
operator|.
name|shadowRole
operator|>=
literal|0
condition|;
name|j
operator|++
control|)
block|{
name|QVariant
name|v
init|=
name|item
operator|->
name|data
argument_list|(
name|irs
index|[
name|j
index|]
operator|.
name|shadowRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QUiTranslatableStringValue
name|tsv
init|=
name|qvariant_cast
argument_list|<
name|QUiTranslatableStringValue
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|text
init|=
name|QApplication
operator|::
name|translate
argument_list|(
name|class_name
argument_list|,
name|tsv
operator|.
name|value
argument_list|()
argument_list|,
name|tsv
operator|.
name|comment
argument_list|()
argument_list|,
name|QCoreApplication
operator|::
name|UnicodeUTF8
argument_list|)
decl_stmt|;
name|item
operator|->
name|setData
argument_list|(
name|irs
index|[
name|j
index|]
operator|.
name|realRole
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|reTranslateTableItem
specifier|static
name|void
name|reTranslateTableItem
parameter_list|(
name|QTableWidgetItem
modifier|*
name|item
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|class_name
parameter_list|)
block|{
if|if
condition|(
name|item
condition|)
name|reTranslateWidgetItem
argument_list|(
name|item
argument_list|,
name|class_name
argument_list|)
expr_stmt|;
block|}
DECL|macro|RETRANSLATE_SUBWIDGET_PROP
define|#
directive|define
name|RETRANSLATE_SUBWIDGET_PROP
parameter_list|(
name|mainWidget
parameter_list|,
name|setter
parameter_list|,
name|propName
parameter_list|)
define|\
value|do { \         QVariant v = mainWidget->widget(i)->property(propName); \         if (v.isValid()) { \             QUiTranslatableStringValue tsv = qvariant_cast<QUiTranslatableStringValue>(v); \             const QString text = QApplication::translate(m_className, \                                                          tsv.value(), tsv.comment(), \                                                          QCoreApplication::UnicodeUTF8); \             mainWidget->setter(i, text); \         } \     } while (0)
DECL|class|TranslationWatcher
class|class
name|TranslationWatcher
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|TranslationWatcher
name|TranslationWatcher
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|className
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_className
argument_list|(
name|className
argument_list|)
block|{     }
DECL|function|eventFilter
specifier|virtual
name|bool
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|LanguageChange
condition|)
block|{
foreach|foreach
control|(
specifier|const
name|QByteArray
modifier|&
name|prop
decl|,
name|o
operator|->
name|dynamicPropertyNames
argument_list|()
control|)
block|{
if|if
condition|(
name|prop
operator|.
name|startsWith
argument_list|(
name|PROP_GENERIC_PREFIX
argument_list|)
condition|)
block|{
specifier|const
name|QByteArray
name|propName
init|=
name|prop
operator|.
name|mid
argument_list|(
sizeof|sizeof
argument_list|(
name|PROP_GENERIC_PREFIX
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QUiTranslatableStringValue
name|tsv
init|=
name|qvariant_cast
argument_list|<
name|QUiTranslatableStringValue
argument_list|>
argument_list|(
name|o
operator|->
name|property
argument_list|(
name|prop
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|text
init|=
name|QApplication
operator|::
name|translate
argument_list|(
name|m_className
argument_list|,
name|tsv
operator|.
name|value
argument_list|()
argument_list|,
name|tsv
operator|.
name|comment
argument_list|()
argument_list|,
name|QCoreApplication
operator|::
name|UnicodeUTF8
argument_list|)
decl_stmt|;
name|o
operator|->
name|setProperty
argument_list|(
name|propName
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|0
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
block|}
elseif|else
if|if
condition|(
name|QTabWidget
modifier|*
name|tabw
init|=
name|qobject_cast
argument_list|<
name|QTabWidget
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
condition|)
block|{
specifier|const
name|int
name|cnt
init|=
name|tabw
operator|->
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
operator|++
name|i
control|)
block|{
name|RETRANSLATE_SUBWIDGET_PROP
argument_list|(
name|tabw
argument_list|,
name|setTabText
argument_list|,
name|PROP_TABPAGETEXT
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
name|RETRANSLATE_SUBWIDGET_PROP
argument_list|(
name|tabw
argument_list|,
name|setTabToolTip
argument_list|,
name|PROP_TABPAGETOOLTIP
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
name|RETRANSLATE_SUBWIDGET_PROP
argument_list|(
name|tabw
argument_list|,
name|setTabWhatsThis
argument_list|,
name|PROP_TABPAGEWHATSTHIS
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_LISTWIDGET
block|}
elseif|else
if|if
condition|(
name|QListWidget
modifier|*
name|listw
init|=
name|qobject_cast
argument_list|<
name|QListWidget
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
condition|)
block|{
specifier|const
name|int
name|cnt
init|=
name|listw
operator|->
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
operator|++
name|i
control|)
name|reTranslateWidgetItem
argument_list|(
name|listw
operator|->
name|item
argument_list|(
name|i
argument_list|)
argument_list|,
name|m_className
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TREEWIDGET
block|}
elseif|else
if|if
condition|(
name|QTreeWidget
modifier|*
name|treew
init|=
name|qobject_cast
argument_list|<
name|QTreeWidget
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
condition|)
block|{
if|if
condition|(
name|QTreeWidgetItem
modifier|*
name|item
init|=
name|treew
operator|->
name|headerItem
argument_list|()
condition|)
name|recursiveReTranslate
argument_list|(
name|item
argument_list|,
name|m_className
argument_list|)
expr_stmt|;
specifier|const
name|int
name|cnt
init|=
name|treew
operator|->
name|topLevelItemCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
operator|++
name|i
control|)
block|{
name|QTreeWidgetItem
modifier|*
name|item
init|=
name|treew
operator|->
name|topLevelItem
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|recursiveReTranslate
argument_list|(
name|item
argument_list|,
name|m_className
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TABLEWIDGET
block|}
elseif|else
if|if
condition|(
name|QTableWidget
modifier|*
name|tablew
init|=
name|qobject_cast
argument_list|<
name|QTableWidget
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
condition|)
block|{
specifier|const
name|int
name|row_cnt
init|=
name|tablew
operator|->
name|rowCount
argument_list|()
decl_stmt|;
specifier|const
name|int
name|col_cnt
init|=
name|tablew
operator|->
name|columnCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|col_cnt
condition|;
operator|++
name|j
control|)
name|reTranslateTableItem
argument_list|(
name|tablew
operator|->
name|horizontalHeaderItem
argument_list|(
name|j
argument_list|)
argument_list|,
name|m_className
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|row_cnt
condition|;
operator|++
name|i
control|)
block|{
name|reTranslateTableItem
argument_list|(
name|tablew
operator|->
name|verticalHeaderItem
argument_list|(
name|i
argument_list|)
argument_list|,
name|m_className
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|col_cnt
condition|;
operator|++
name|j
control|)
name|reTranslateTableItem
argument_list|(
name|tablew
operator|->
name|item
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|,
name|m_className
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
block|}
elseif|else
if|if
condition|(
name|QComboBox
modifier|*
name|combow
init|=
name|qobject_cast
argument_list|<
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|qobject_cast
argument_list|<
name|QFontComboBox
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
condition|)
block|{
specifier|const
name|int
name|cnt
init|=
name|combow
operator|->
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QVariant
name|v
init|=
name|combow
operator|->
name|itemData
argument_list|(
name|i
argument_list|,
name|Qt
operator|::
name|DisplayPropertyRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QUiTranslatableStringValue
name|tsv
init|=
name|qvariant_cast
argument_list|<
name|QUiTranslatableStringValue
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|text
init|=
name|QApplication
operator|::
name|translate
argument_list|(
name|m_className
argument_list|,
name|tsv
operator|.
name|value
argument_list|()
argument_list|,
name|tsv
operator|.
name|comment
argument_list|()
argument_list|,
name|QCoreApplication
operator|::
name|UnicodeUTF8
argument_list|)
decl_stmt|;
name|combow
operator|->
name|setItemText
argument_list|(
name|i
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TOOLBOX
block|}
elseif|else
if|if
condition|(
name|QToolBox
modifier|*
name|toolw
init|=
name|qobject_cast
argument_list|<
name|QToolBox
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
condition|)
block|{
specifier|const
name|int
name|cnt
init|=
name|toolw
operator|->
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
operator|++
name|i
control|)
block|{
name|RETRANSLATE_SUBWIDGET_PROP
argument_list|(
name|toolw
argument_list|,
name|setItemText
argument_list|,
name|PROP_TOOLITEMTEXT
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
name|RETRANSLATE_SUBWIDGET_PROP
argument_list|(
name|toolw
argument_list|,
name|setItemToolTip
argument_list|,
name|PROP_TOOLITEMTOOLTIP
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
endif|#
directive|endif
block|}
block|}
return|return
literal|false
return|;
block|}
private|private:
DECL|member|m_className
name|QByteArray
name|m_className
decl_stmt|;
block|}
class|;
DECL|class|FormBuilderPrivate
class|class
name|FormBuilderPrivate
super|:
specifier|public
name|QFormBuilder
block|{
friend|friend
name|class
name|QT_PREPEND_NAMESPACE
function_decl|(
name|QUiLoader
function_decl|);
friend|friend
name|class
name|QT_PREPEND_NAMESPACE
function_decl|(
name|QUiLoaderPrivate
function_decl|);
DECL|typedef|ParentClass
typedef|typedef
name|QFormBuilder
name|ParentClass
typedef|;
public|public:
DECL|member|loader
name|QUiLoader
modifier|*
name|loader
decl_stmt|;
DECL|member|dynamicTr
name|bool
name|dynamicTr
decl_stmt|;
DECL|member|trEnabled
name|bool
name|trEnabled
decl_stmt|;
DECL|function|FormBuilderPrivate
name|FormBuilderPrivate
parameter_list|()
member_init_list|:
name|loader
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|dynamicTr
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|trEnabled
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|m_trwatch
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|defaultCreateWidget
name|QWidget
modifier|*
name|defaultCreateWidget
parameter_list|(
specifier|const
name|QString
modifier|&
name|className
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
return|return
name|ParentClass
operator|::
name|createWidget
argument_list|(
name|className
argument_list|,
name|parent
argument_list|,
name|name
argument_list|)
return|;
block|}
DECL|function|defaultCreateLayout
name|QLayout
modifier|*
name|defaultCreateLayout
parameter_list|(
specifier|const
name|QString
modifier|&
name|className
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
return|return
name|ParentClass
operator|::
name|createLayout
argument_list|(
name|className
argument_list|,
name|parent
argument_list|,
name|name
argument_list|)
return|;
block|}
DECL|function|defaultCreateAction
name|QAction
modifier|*
name|defaultCreateAction
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
return|return
name|ParentClass
operator|::
name|createAction
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
return|;
block|}
DECL|function|defaultCreateActionGroup
name|QActionGroup
modifier|*
name|defaultCreateActionGroup
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
return|return
name|ParentClass
operator|::
name|createActionGroup
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
return|;
block|}
DECL|function|createWidget
specifier|virtual
name|QWidget
modifier|*
name|createWidget
parameter_list|(
specifier|const
name|QString
modifier|&
name|className
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
name|QWidget
modifier|*
name|widget
init|=
name|loader
operator|->
name|createWidget
argument_list|(
name|className
argument_list|,
name|parent
argument_list|,
name|name
argument_list|)
condition|)
block|{
name|widget
operator|->
name|setObjectName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|widget
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|createLayout
specifier|virtual
name|QLayout
modifier|*
name|createLayout
parameter_list|(
specifier|const
name|QString
modifier|&
name|className
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
name|QLayout
modifier|*
name|layout
init|=
name|loader
operator|->
name|createLayout
argument_list|(
name|className
argument_list|,
name|parent
argument_list|,
name|name
argument_list|)
condition|)
block|{
name|layout
operator|->
name|setObjectName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|layout
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|createActionGroup
specifier|virtual
name|QActionGroup
modifier|*
name|createActionGroup
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
name|QActionGroup
modifier|*
name|actionGroup
init|=
name|loader
operator|->
name|createActionGroup
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
condition|)
block|{
name|actionGroup
operator|->
name|setObjectName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|actionGroup
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|createAction
specifier|virtual
name|QAction
modifier|*
name|createAction
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
name|QAction
modifier|*
name|action
init|=
name|loader
operator|->
name|createAction
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
condition|)
block|{
name|action
operator|->
name|setObjectName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|action
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|virtual
name|void
name|applyProperties
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|properties
parameter_list|)
function_decl|;
specifier|virtual
name|QWidget
modifier|*
name|create
parameter_list|(
name|DomUI
modifier|*
name|ui
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
function_decl|;
specifier|virtual
name|QWidget
modifier|*
name|create
parameter_list|(
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
function_decl|;
specifier|virtual
name|bool
name|addItem
parameter_list|(
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
function_decl|;
private|private:
DECL|member|m_class
name|QByteArray
name|m_class
decl_stmt|;
DECL|member|m_trwatch
name|TranslationWatcher
modifier|*
name|m_trwatch
decl_stmt|;
block|}
class|;
DECL|function|convertTranslatable
specifier|static
name|QString
name|convertTranslatable
parameter_list|(
specifier|const
name|DomProperty
modifier|*
name|p
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|className
parameter_list|,
name|QUiTranslatableStringValue
modifier|*
name|strVal
parameter_list|)
block|{
if|if
condition|(
name|p
operator|->
name|kind
argument_list|()
operator|!=
name|DomProperty
operator|::
name|String
condition|)
return|return
name|QString
argument_list|()
return|;
specifier|const
name|DomString
modifier|*
name|dom_str
init|=
name|p
operator|->
name|elementString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dom_str
condition|)
return|return
name|QString
argument_list|()
return|;
if|if
condition|(
name|dom_str
operator|->
name|hasAttributeNotr
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|notr
init|=
name|dom_str
operator|->
name|attributeNotr
argument_list|()
decl_stmt|;
if|if
condition|(
name|notr
operator|==
name|QLatin1String
argument_list|(
literal|"yes"
argument_list|)
operator|||
name|notr
operator|==
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
condition|)
return|return
name|QString
argument_list|()
return|;
block|}
name|strVal
operator|->
name|setValue
argument_list|(
name|dom_str
operator|->
name|text
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|strVal
operator|->
name|setComment
argument_list|(
name|dom_str
operator|->
name|attributeComment
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|strVal
operator|->
name|value
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|strVal
operator|->
name|comment
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
return|return
name|QApplication
operator|::
name|translate
argument_list|(
name|className
argument_list|,
name|strVal
operator|->
name|value
argument_list|()
argument_list|,
name|strVal
operator|->
name|comment
argument_list|()
argument_list|,
name|QCoreApplication
operator|::
name|UnicodeUTF8
argument_list|)
return|;
block|}
DECL|function|applyProperties
name|void
name|FormBuilderPrivate
operator|::
name|applyProperties
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|properties
parameter_list|)
block|{
typedef|typedef
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|DomPropertyList
typedef|;
name|QFormBuilder
operator|::
name|applyProperties
argument_list|(
name|o
argument_list|,
name|properties
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_trwatch
condition|)
name|m_trwatch
operator|=
operator|new
name|TranslationWatcher
argument_list|(
name|o
argument_list|,
name|m_class
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|.
name|empty
argument_list|()
condition|)
return|return;
comment|// Unlike string item roles, string properties are not loaded via the textBuilder
comment|// (as they are "shadowed" by the property sheets in designer). So do the initial
comment|// translation here.
name|bool
name|anyTrs
init|=
literal|false
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|DomProperty
modifier|*
name|p
decl|,
name|properties
control|)
block|{
name|QUiTranslatableStringValue
name|strVal
decl_stmt|;
specifier|const
name|QString
name|text
init|=
name|convertTranslatable
argument_list|(
name|p
argument_list|,
name|m_class
argument_list|,
operator|&
name|strVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
specifier|const
name|QByteArray
name|name
init|=
name|p
operator|->
name|attributeName
argument_list|()
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
if|if
condition|(
name|dynamicTr
condition|)
block|{
name|o
operator|->
name|setProperty
argument_list|(
name|PROP_GENERIC_PREFIX
operator|+
name|name
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|strVal
argument_list|)
argument_list|)
expr_stmt|;
name|anyTrs
operator|=
name|trEnabled
expr_stmt|;
block|}
name|o
operator|->
name|setProperty
argument_list|(
name|name
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|anyTrs
condition|)
name|o
operator|->
name|installEventFilter
argument_list|(
name|m_trwatch
argument_list|)
expr_stmt|;
block|}
DECL|function|create
name|QWidget
modifier|*
name|FormBuilderPrivate
operator|::
name|create
parameter_list|(
name|DomUI
modifier|*
name|ui
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
block|{
name|m_class
operator|=
name|ui
operator|->
name|elementClass
argument_list|()
operator|.
name|toUtf8
argument_list|()
expr_stmt|;
name|m_trwatch
operator|=
literal|0
expr_stmt|;
name|setTextBuilder
argument_list|(
operator|new
name|TranslatingTextBuilder
argument_list|(
name|trEnabled
argument_list|,
name|m_class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QFormBuilder
operator|::
name|create
argument_list|(
name|ui
argument_list|,
name|parentWidget
argument_list|)
return|;
block|}
DECL|function|create
name|QWidget
modifier|*
name|FormBuilderPrivate
operator|::
name|create
parameter_list|(
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|QFormBuilder
operator|::
name|create
argument_list|(
name|ui_widget
argument_list|,
name|parentWidget
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|==
literal|0
condition|)
return|return
literal|0
return|;
if|if
condition|(
literal|0
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QTabWidget
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_LISTWIDGET
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QListWidget
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TREEWIDGET
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QTreeWidget
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TABLEWIDGET
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QTableWidget
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
if|if
condition|(
name|qobject_cast
argument_list|<
name|QFontComboBox
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
return|return
name|w
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TOOLBOX
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QToolBox
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
endif|#
directive|endif
block|}
else|else
block|{
return|return
name|w
return|;
block|}
if|if
condition|(
name|dynamicTr
operator|&&
name|trEnabled
condition|)
name|w
operator|->
name|installEventFilter
argument_list|(
name|m_trwatch
argument_list|)
expr_stmt|;
return|return
name|w
return|;
block|}
DECL|macro|TRANSLATE_SUBWIDGET_PROP
define|#
directive|define
name|TRANSLATE_SUBWIDGET_PROP
parameter_list|(
name|mainWidget
parameter_list|,
name|attribute
parameter_list|,
name|setter
parameter_list|,
name|propName
parameter_list|)
define|\
value|do { \         if (const DomProperty *p##attribute = attributes.value(strings.attribute)) { \             QUiTranslatableStringValue strVal; \             const QString text = convertTranslatable(p##attribute, m_class,&strVal); \             if (!text.isEmpty()) { \                 if (dynamicTr) \                     mainWidget->widget(i)->setProperty(propName, QVariant::fromValue(strVal)); \                 mainWidget->setter(i, text); \             } \         } \     } while (0)
DECL|function|addItem
name|bool
name|FormBuilderPrivate
operator|::
name|addItem
parameter_list|(
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
block|{
if|if
condition|(
name|parentWidget
operator|==
literal|0
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|ParentClass
operator|::
name|addItem
argument_list|(
name|ui_widget
argument_list|,
name|widget
argument_list|,
name|parentWidget
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// Check special cases. First: Custom container
specifier|const
name|QString
name|className
init|=
name|QLatin1String
argument_list|(
name|parentWidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QFormBuilderExtra
operator|::
name|instance
argument_list|(
name|this
argument_list|)
operator|->
name|customWidgetAddPageMethod
argument_list|(
name|className
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
block|}
elseif|else
if|if
condition|(
name|QTabWidget
modifier|*
name|tabWidget
init|=
name|qobject_cast
argument_list|<
name|QTabWidget
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
condition|)
block|{
specifier|const
name|DomPropertyHash
name|attributes
init|=
name|propertyMap
argument_list|(
name|ui_widget
operator|->
name|elementAttribute
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|i
init|=
name|tabWidget
operator|->
name|count
argument_list|()
operator|-
literal|1
decl_stmt|;
name|TRANSLATE_SUBWIDGET_PROP
argument_list|(
name|tabWidget
argument_list|,
name|titleAttribute
argument_list|,
name|setTabText
argument_list|,
name|PROP_TABPAGETEXT
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
name|TRANSLATE_SUBWIDGET_PROP
argument_list|(
name|tabWidget
argument_list|,
name|toolTipAttribute
argument_list|,
name|setTabToolTip
argument_list|,
name|PROP_TABPAGETOOLTIP
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
name|TRANSLATE_SUBWIDGET_PROP
argument_list|(
name|tabWidget
argument_list|,
name|whatsThisAttribute
argument_list|,
name|setTabWhatsThis
argument_list|,
name|PROP_TABPAGEWHATSTHIS
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TOOLBOX
block|}
elseif|else
if|if
condition|(
name|QToolBox
modifier|*
name|toolBox
init|=
name|qobject_cast
argument_list|<
name|QToolBox
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
condition|)
block|{
specifier|const
name|DomPropertyHash
name|attributes
init|=
name|propertyMap
argument_list|(
name|ui_widget
operator|->
name|elementAttribute
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|i
init|=
name|toolBox
operator|->
name|count
argument_list|()
operator|-
literal|1
decl_stmt|;
name|TRANSLATE_SUBWIDGET_PROP
argument_list|(
name|toolBox
argument_list|,
name|labelAttribute
argument_list|,
name|setItemText
argument_list|,
name|PROP_TOOLITEMTEXT
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
name|TRANSLATE_SUBWIDGET_PROP
argument_list|(
name|toolBox
argument_list|,
name|toolTipAttribute
argument_list|,
name|setItemToolTip
argument_list|,
name|PROP_TOOLITEMTOOLTIP
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
block|}
return|return
literal|true
return|;
block|}
ifdef|#
directive|ifdef
name|QFORMINTERNAL_NAMESPACE
block|}
end_namespace
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|QUiLoaderPrivate
class|class
name|QUiLoaderPrivate
block|{
public|public:
ifdef|#
directive|ifdef
name|QFORMINTERNAL_NAMESPACE
DECL|member|builder
name|QFormInternal
operator|::
name|FormBuilderPrivate
name|builder
decl_stmt|;
else|#
directive|else
name|FormBuilderPrivate
name|builder
decl_stmt|;
endif|#
directive|endif
name|void
name|setupWidgetMap
parameter_list|()
specifier|const
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|setupWidgetMap
name|void
name|QUiLoaderPrivate
operator|::
name|setupWidgetMap
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|g_widgets
argument_list|()
operator|->
name|isEmpty
argument_list|()
condition|)
return|return;
DECL|macro|DECLARE_WIDGET
define|#
directive|define
name|DECLARE_WIDGET
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|g_widgets()->insert(QLatin1String(#a), true);
DECL|macro|DECLARE_LAYOUT
define|#
directive|define
name|DECLARE_LAYOUT
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
include|#
directive|include
file|"widgets.table"
DECL|macro|DECLARE_WIDGET
undef|#
directive|undef
name|DECLARE_WIDGET
DECL|macro|DECLARE_WIDGET_1
undef|#
directive|undef
name|DECLARE_WIDGET_1
DECL|macro|DECLARE_LAYOUT
undef|#
directive|undef
name|DECLARE_LAYOUT
block|}
end_function
begin_comment
comment|/*!     \class QUiLoader     \inmodule QtUiTools      \brief The QUiLoader class enables standalone applications to     dynamically create user interfaces at run-time using the     information stored in UI files or specified in plugin paths.      In addition, you can customize or create your own user interface by     deriving your own loader class.      If you have a custom component or an application that embeds \QD, you can     also use the QFormBuilder class provided by the QtDesigner module to create     user interfaces from UI files.      The QUiLoader class provides a collection of functions allowing you to     create widgets based on the information stored in UI files (created     with \QD) or available in the specified plugin paths. The specified plugin     paths can be retrieved using the pluginPaths() function. Similarly, the     contents of a UI file can be retrieved using the load() function. For     example:      \snippet doc/src/snippets/quiloader/mywidget.cpp 0      By including the user interface in the form's resources (\c myform.qrc), we     ensure that it will be present at run-time:      \quotefile doc/src/snippets/quiloader/mywidget.qrc      The availableWidgets() function returns a QStringList with the class names     of the widgets available in the specified plugin paths. To create these     widgets, simply use the createWidget() function. For example:      \snippet doc/src/snippets/quiloader/main.cpp 0      To make a custom widget available to the loader, you can use the     addPluginPath() function; to remove all available widgets, you can call     the clearPluginPaths() function.      The createAction(), createActionGroup(), createLayout(), and createWidget()     functions are used internally by the QUiLoader class whenever it has to     create an action, action group, layout, or widget respectively. For that     reason, you can subclass the QUiLoader class and reimplement these     functions to intervene the process of constructing a user interface. For     example, you might want to have a list of the actions created when loading     a form or creating a custom widget.      For a complete example using the QUiLoader class, see the     \l{Calculator Builder Example}.      \sa QtUiTools, QFormBuilder */
end_comment
begin_comment
comment|/*!     Creates a form loader with the given \a parent. */
end_comment
begin_constructor
DECL|function|QUiLoader
name|QUiLoader
operator|::
name|QUiLoader
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|d_ptr
argument_list|(
operator|new
name|QUiLoaderPrivate
argument_list|)
block|{
name|Q_D
argument_list|(
name|QUiLoader
argument_list|)
expr_stmt|;
name|d
operator|->
name|builder
operator|.
name|loader
operator|=
name|this
expr_stmt|;
name|QStringList
name|paths
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|path
decl|,
name|QApplication
operator|::
name|libraryPaths
argument_list|()
control|)
block|{
name|QString
name|libPath
init|=
name|path
decl_stmt|;
name|libPath
operator|+=
name|QDir
operator|::
name|separator
argument_list|()
expr_stmt|;
name|libPath
operator|+=
name|QLatin1String
argument_list|(
literal|"designer"
argument_list|)
expr_stmt|;
name|paths
operator|.
name|append
argument_list|(
name|libPath
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|builder
operator|.
name|setPluginPath
argument_list|(
name|paths
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the loader. */
end_comment
begin_destructor
DECL|function|~QUiLoader
name|QUiLoader
operator|::
name|~
name|QUiLoader
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Loads a form from the given \a device and creates a new widget with the     given \a parentWidget to hold its contents.      \sa createWidget() */
end_comment
begin_function
DECL|function|load
name|QWidget
modifier|*
name|QUiLoader
operator|::
name|load
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QUiLoader
argument_list|)
expr_stmt|;
comment|// QXmlStreamReader will report errors on open failure.
if|if
condition|(
operator|!
name|device
operator|->
name|isOpen
argument_list|()
condition|)
name|device
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|builder
operator|.
name|load
argument_list|(
name|device
argument_list|,
name|parentWidget
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list naming the paths in which the loader will search when     locating custom widget plugins.      \sa addPluginPath(), clearPluginPaths() */
end_comment
begin_function
DECL|function|pluginPaths
name|QStringList
name|QUiLoader
operator|::
name|pluginPaths
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QUiLoader
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|builder
operator|.
name|pluginPaths
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Clears the list of paths in which the loader will search when locating     plugins.      \sa addPluginPath(), pluginPaths() */
end_comment
begin_function
DECL|function|clearPluginPaths
name|void
name|QUiLoader
operator|::
name|clearPluginPaths
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QUiLoader
argument_list|)
expr_stmt|;
name|d
operator|->
name|builder
operator|.
name|clearPluginPaths
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Adds the given \a path to the list of paths in which the loader will search     when locating plugins.      \sa pluginPaths(), clearPluginPaths() */
end_comment
begin_function
DECL|function|addPluginPath
name|void
name|QUiLoader
operator|::
name|addPluginPath
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QUiLoader
argument_list|)
expr_stmt|;
name|d
operator|->
name|builder
operator|.
name|addPluginPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Creates a new widget with the given \a parent and \a name using the class     specified by \a className. You can use this function to create any of the     widgets returned by the availableWidgets() function.      The function is also used internally by the QUiLoader class whenever it     creates a widget. Hence, you can subclass QUiLoader and reimplement this     function to intervene process of constructing a user interface or widget.     However, in your implementation, ensure that you call QUiLoader's version     first.      \sa availableWidgets(), load() */
end_comment
begin_function
DECL|function|createWidget
name|QWidget
modifier|*
name|QUiLoader
operator|::
name|createWidget
parameter_list|(
specifier|const
name|QString
modifier|&
name|className
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QUiLoader
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|builder
operator|.
name|defaultCreateWidget
argument_list|(
name|className
argument_list|,
name|parent
argument_list|,
name|name
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Creates a new layout with the given \a parent and \a name using the class     specified by \a className.      The function is also used internally by the QUiLoader class whenever it     creates a widget. Hence, you can subclass QUiLoader and reimplement this     function to intervene process of constructing a user interface or widget.     However, in your implementation, ensure that you call QUiLoader's version     first.      \sa createWidget(), load() */
end_comment
begin_function
DECL|function|createLayout
name|QLayout
modifier|*
name|QUiLoader
operator|::
name|createLayout
parameter_list|(
specifier|const
name|QString
modifier|&
name|className
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QUiLoader
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|builder
operator|.
name|defaultCreateLayout
argument_list|(
name|className
argument_list|,
name|parent
argument_list|,
name|name
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Creates a new action group with the given \a parent and \a name.      The function is also used internally by the QUiLoader class whenever it     creates a widget. Hence, you can subclass QUiLoader and reimplement this     function to intervene process of constructing a user interface or widget.     However, in your implementation, ensure that you call QUiLoader's version     first.      \sa createAction(), createWidget(), load()  */
end_comment
begin_function
DECL|function|createActionGroup
name|QActionGroup
modifier|*
name|QUiLoader
operator|::
name|createActionGroup
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QUiLoader
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|builder
operator|.
name|defaultCreateActionGroup
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Creates a new action with the given \a parent and \a name.      The function is also used internally by the QUiLoader class whenever it     creates a widget. Hence, you can subclass QUiLoader and reimplement this     function to intervene process of constructing a user interface or widget.     However, in your implementation, ensure that you call QUiLoader's version     first.      \sa createActionGroup(), createWidget(), load() */
end_comment
begin_function
DECL|function|createAction
name|QAction
modifier|*
name|QUiLoader
operator|::
name|createAction
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QUiLoader
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|builder
operator|.
name|defaultCreateAction
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list naming all available widgets that can be built using the     createWidget() function, i.e all the widgets specified within the given     plugin paths.      \sa pluginPaths(), createWidget()  */
end_comment
begin_function
DECL|function|availableWidgets
name|QStringList
name|QUiLoader
operator|::
name|availableWidgets
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QUiLoader
argument_list|)
expr_stmt|;
name|d
operator|->
name|setupWidgetMap
argument_list|()
expr_stmt|;
name|widget_map
name|available
init|=
operator|*
name|g_widgets
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|QDesignerCustomWidgetInterface
modifier|*
name|plugin
decl|,
name|d
operator|->
name|builder
operator|.
name|customWidgets
argument_list|()
control|)
block|{
name|available
operator|.
name|insert
argument_list|(
name|plugin
operator|->
name|name
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|available
operator|.
name|keys
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5     Returns a list naming all available layouts that can be built using the     createLayout() function      \sa createLayout() */
end_comment
begin_function
DECL|function|availableLayouts
name|QStringList
name|QUiLoader
operator|::
name|availableLayouts
parameter_list|()
specifier|const
block|{
name|QStringList
name|rc
decl_stmt|;
DECL|macro|DECLARE_WIDGET
define|#
directive|define
name|DECLARE_WIDGET
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
DECL|macro|DECLARE_LAYOUT
define|#
directive|define
name|DECLARE_LAYOUT
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|rc.push_back(QLatin1String(#a));
include|#
directive|include
file|"widgets.table"
DECL|macro|DECLARE_WIDGET
undef|#
directive|undef
name|DECLARE_WIDGET
DECL|macro|DECLARE_LAYOUT
undef|#
directive|undef
name|DECLARE_LAYOUT
return|return
name|rc
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the working directory of the loader to \a dir. The loader will look     for other resources, such as icons and resource files, in paths relative to     this directory.      \sa workingDirectory() */
end_comment
begin_function
DECL|function|setWorkingDirectory
name|void
name|QUiLoader
operator|::
name|setWorkingDirectory
parameter_list|(
specifier|const
name|QDir
modifier|&
name|dir
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QUiLoader
argument_list|)
expr_stmt|;
name|d
operator|->
name|builder
operator|.
name|setWorkingDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the working directory of the loader.      \sa setWorkingDirectory() */
end_comment
begin_function
DECL|function|workingDirectory
name|QDir
name|QUiLoader
operator|::
name|workingDirectory
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QUiLoader
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|builder
operator|.
name|workingDirectory
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     \since 4.3      If \a enabled is true, the loader will be able to execute scripts.     Otherwise, execution of scripts will be disabled.      \sa isScriptingEnabled() */
end_comment
begin_function
DECL|function|setScriptingEnabled
name|void
name|QUiLoader
operator|::
name|setScriptingEnabled
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QUiLoader
argument_list|)
expr_stmt|;
name|d
operator|->
name|builder
operator|.
name|setScriptingEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal     \since 4.3      Returns true if execution of scripts is enabled; returns false otherwise.      \sa setScriptingEnabled() */
end_comment
begin_function
DECL|function|isScriptingEnabled
name|bool
name|QUiLoader
operator|::
name|isScriptingEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QUiLoader
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|builder
operator|.
name|isScriptingEnabled
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      If \a enabled is true, user interfaces loaded by this loader will     automatically retranslate themselves upon receiving a language change     event. Otherwise, the user interfaces will not be retranslated.      \sa isLanguageChangeEnabled() */
end_comment
begin_function
DECL|function|setLanguageChangeEnabled
name|void
name|QUiLoader
operator|::
name|setLanguageChangeEnabled
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QUiLoader
argument_list|)
expr_stmt|;
name|d
operator|->
name|builder
operator|.
name|dynamicTr
operator|=
name|enabled
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      Returns true if dynamic retranslation on language change is enabled;     returns false otherwise.      \sa setLanguageChangeEnabled() */
end_comment
begin_function
DECL|function|isLanguageChangeEnabled
name|bool
name|QUiLoader
operator|::
name|isLanguageChangeEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QUiLoader
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|builder
operator|.
name|dynamicTr
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     \since 4.5      If \a enabled is true, user interfaces loaded by this loader will be     translated. Otherwise, the user interfaces will not be translated.      \note This is orthogonal to languageChangeEnabled.      \sa isLanguageChangeEnabled(), setLanguageChangeEnabled() */
end_comment
begin_function
DECL|function|setTranslationEnabled
name|void
name|QUiLoader
operator|::
name|setTranslationEnabled
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QUiLoader
argument_list|)
expr_stmt|;
name|d
operator|->
name|builder
operator|.
name|trEnabled
operator|=
name|enabled
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal     \since 4.5      Returns true if translation is enabled; returns false otherwise.      \sa setTranslationEnabled() */
end_comment
begin_function
DECL|function|isTranslationEnabled
name|bool
name|QUiLoader
operator|::
name|isTranslationEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QUiLoader
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|builder
operator|.
name|trEnabled
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"quiloader.moc"
end_include
end_unit
