begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtDBus module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
end_ifndef
begin_include
include|#
directive|include
file|<QtCore/qlibrary.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtCore/qmutex.h>
end_include
begin_include
include|#
directive|include
file|<private/qmutexpool_p.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DBUS
end_ifndef
begin_extern
extern|extern
literal|"C"
name|void
name|dbus_shutdown
parameter_list|()
function_decl|;
end_extern
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|void
argument_list|(
operator|*
name|qdbus_resolve_me
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|)
argument_list|)
argument_list|()
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
operator|!
name|defined
name|QT_LINKED_LIBDBUS
end_if
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
end_ifndef
begin_decl_stmt
DECL|variable|qdbus_libdbus
specifier|static
name|QLibrary
modifier|*
name|qdbus_libdbus
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qdbus_unloadLibDBus
name|void
name|qdbus_unloadLibDBus
parameter_list|()
block|{
if|if
condition|(
name|qdbus_libdbus
condition|)
block|{
if|if
condition|(
name|qEnvironmentVariableIsSet
argument_list|(
literal|"QDBUS_FORCE_SHUTDOWN"
argument_list|)
condition|)
name|qdbus_libdbus
operator|->
name|resolve
argument_list|(
literal|"dbus_shutdown"
argument_list|)
argument_list|()
expr_stmt|;
name|qdbus_libdbus
operator|->
name|unload
argument_list|()
expr_stmt|;
block|}
operator|delete
name|qdbus_libdbus
expr_stmt|;
name|qdbus_libdbus
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qdbus_loadLibDBus
name|bool
name|qdbus_loadLibDBus
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
comment|// this is to simulate a library load failure for our autotest suite.
if|if
condition|(
operator|!
name|qEnvironmentVariableIsEmpty
argument_list|(
literal|"QT_SIMULATE_DBUS_LIBFAIL"
argument_list|)
condition|)
return|return
literal|false
return|;
endif|#
directive|endif
specifier|static
name|bool
name|triedToLoadLibrary
init|=
literal|false
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_THREAD
name|QMutexLocker
name|locker
argument_list|(
name|QMutexPool
operator|::
name|globalInstanceGet
argument_list|(
operator|(
name|void
operator|*
operator|)
operator|&
name|qdbus_resolve_me
argument_list|)
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QLibrary
modifier|*
modifier|&
name|lib
init|=
name|qdbus_libdbus
decl_stmt|;
if|if
condition|(
name|triedToLoadLibrary
condition|)
return|return
name|lib
operator|&&
name|lib
operator|->
name|isLoaded
argument_list|()
return|;
name|lib
operator|=
operator|new
name|QLibrary
expr_stmt|;
name|lib
operator|->
name|setLoadHints
argument_list|(
name|QLibrary
operator|::
name|ExportExternalSymbolsHint
argument_list|)
expr_stmt|;
comment|// make libdbus symbols available for apps that need more advanced control over the dbus
name|triedToLoadLibrary
operator|=
literal|true
expr_stmt|;
specifier|static
name|int
name|majorversions
index|[]
init|=
block|{
literal|3
block|,
literal|2
block|,
operator|-
literal|1
block|}
decl_stmt|;
specifier|const
name|QString
name|baseNames
index|[]
init|=
block|{
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QLatin1String
argument_list|(
literal|"dbus-1"
argument_list|)
block|,
endif|#
directive|endif
name|QLatin1String
argument_list|(
literal|"libdbus-1"
argument_list|)
block|}
decl_stmt|;
name|lib
operator|->
name|unload
argument_list|()
expr_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|majorversions
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|majorversions
index|[
literal|0
index|]
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|uint
name|j
init|=
literal|0
init|;
name|j
operator|<
sizeof|sizeof
argument_list|(
name|baseNames
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|baseNames
index|[
literal|0
index|]
argument_list|)
condition|;
operator|++
name|j
control|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QString
name|suffix
decl_stmt|;
if|if
condition|(
name|majorversions
index|[
name|i
index|]
operator|!=
operator|-
literal|1
condition|)
name|suffix
operator|=
name|QString
operator|::
name|number
argument_list|(
operator|-
name|majorversions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// negative so it prepends the dash
name|lib
operator|->
name|setFileName
argument_list|(
name|baseNames
index|[
name|j
index|]
operator|+
name|suffix
argument_list|)
expr_stmt|;
else|#
directive|else
name|lib
operator|->
name|setFileNameAndVersion
argument_list|(
name|baseNames
index|[
name|j
index|]
argument_list|,
name|majorversions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|lib
operator|->
name|load
argument_list|()
operator|&&
name|lib
operator|->
name|resolve
argument_list|(
literal|"dbus_connection_open_private"
argument_list|)
condition|)
return|return
literal|true
return|;
name|lib
operator|->
name|unload
argument_list|()
expr_stmt|;
block|}
block|}
operator|delete
name|lib
expr_stmt|;
name|lib
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
else|#
directive|else
return|return
literal|true
return|;
endif|#
directive|endif
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
end_ifndef
begin_macro
DECL|function|qdbus_resolve_conditionally
name|void
argument_list|(
argument|*qdbus_resolve_conditionally(const char *name)
argument_list|)
end_macro
begin_expr_stmt
DECL|function|qdbus_resolve_conditionally
operator|(
operator|)
block|{
if|if
condition|(
name|qdbus_loadLibDBus
argument_list|()
condition|)
return|return
name|qdbus_libdbus
operator|->
name|resolve
argument_list|(
name|name
argument_list|)
return|;
end_expr_stmt
begin_return
return|return
literal|0
return|;
end_return
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|void
DECL|function|qdbus_resolve_me
operator|(
operator|*
name|qdbus_resolve_me
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|)
operator|)
operator|(
operator|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
if|if
condition|(
operator|!
name|qdbus_loadLibDBus
argument_list|()
condition|)
name|qFatal
argument_list|(
literal|"Cannot find libdbus-1 in your system to resolve symbol '%s'."
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QFunctionPointer
name|ptr
operator|=
name|qdbus_libdbus
operator|->
name|resolve
argument_list|(
name|name
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
operator|!
name|ptr
condition|)
name|qFatal
argument_list|(
literal|"Cannot resolve '%s' in your libdbus-1."
argument_list|,
name|name
argument_list|)
expr_stmt|;
end_if
begin_return
return|return
name|ptr
return|;
end_return
begin_else
else|#
directive|else
end_else
begin_expr_stmt
name|Q_UNUSED
argument_list|(
name|name
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
literal|0
return|;
end_return
begin_endif
endif|#
directive|endif
end_endif
begin_else
unit|}
else|#
directive|else
end_else
begin_comment
comment|// QT_LINKED_LIBDBUS
end_comment
begin_function
unit|static
DECL|function|qdbus_unloadLibDBus
name|void
name|qdbus_unloadLibDBus
parameter_list|()
block|{
if|if
condition|(
name|qEnvironmentVariableIsSet
argument_list|(
literal|"QDBUS_FORCE_SHUTDOWN"
argument_list|)
condition|)
name|dbus_shutdown
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_LINKED_LIBDBUS
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
end_ifndef
begin_macro
name|Q_DESTRUCTOR_FUNCTION
argument_list|(
argument|qdbus_unloadLibDBus
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DBUS
end_comment
end_unit
