begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtDBus module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QDBUSARGUMENT_H
end_ifndef
begin_define
DECL|macro|QDBUSARGUMENT_H
define|#
directive|define
name|QDBUSARGUMENT_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qhash.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmap.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvariant.h>
end_include
begin_include
include|#
directive|include
file|<QtDBus/qdbusextratypes.h>
end_include
begin_include
include|#
directive|include
file|<QtDBus/qdbusmacros.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DBUS
end_ifndef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QDBusUnixFileDescriptor
name|class
name|QDBusUnixFileDescriptor
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDBusArgumentPrivate
name|class
name|QDBusArgumentPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDBusDemarshaller
name|class
name|QDBusDemarshaller
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDBusMarshaller
name|class
name|QDBusMarshaller
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_DBUS_EXPORT
name|QDBusArgument
block|{
name|public
label|:
enum|enum
name|ElementType
block|{
name|BasicType
block|,
name|VariantType
block|,
name|ArrayType
block|,
name|StructureType
block|,
name|MapType
block|,
name|MapEntryType
block|,
name|UnknownType
init|=
operator|-
literal|1
block|}
enum|;
name|QDBusArgument
argument_list|()
expr_stmt|;
name|QDBusArgument
argument_list|(
specifier|const
name|QDBusArgument
operator|&
name|other
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
name|QDBusArgument
argument_list|(
argument|QDBusArgument&&other
argument_list|)
name|Q_DECL_NOTHROW
label|:
name|d
argument_list|(
argument|other.d
argument_list|)
block|{
name|other
operator|.
name|d
operator|=
name|Q_NULLPTR
expr_stmt|;
block|}
name|QDBusArgument
modifier|&
name|operator
init|=
operator|(
name|QDBusArgument
operator|&&
name|other
operator|)
name|Q_DECL_NOTHROW
block|{
name|swap
argument_list|(
name|other
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
endif|#
directive|endif
name|QDBusArgument
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QDBusArgument
operator|&
name|other
operator|)
decl_stmt|;
operator|~
name|QDBusArgument
argument_list|()
expr_stmt|;
name|void
name|swap
parameter_list|(
name|QDBusArgument
modifier|&
name|other
parameter_list|)
function|Q_DECL_NOTHROW
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
block|}
comment|// used for marshalling (Qt -> D-BUS)
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|uchar
name|arg
operator|)
expr_stmt|;
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|bool
name|arg
operator|)
expr_stmt|;
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|short
name|arg
operator|)
expr_stmt|;
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|ushort
name|arg
operator|)
expr_stmt|;
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|int
name|arg
operator|)
expr_stmt|;
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|uint
name|arg
operator|)
expr_stmt|;
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|qlonglong
name|arg
operator|)
expr_stmt|;
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|qulonglong
name|arg
operator|)
expr_stmt|;
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|double
name|arg
operator|)
expr_stmt|;
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|QString
operator|&
name|arg
operator|)
expr_stmt|;
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|QDBusVariant
operator|&
name|arg
operator|)
expr_stmt|;
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|QDBusObjectPath
operator|&
name|arg
operator|)
expr_stmt|;
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|QDBusSignature
operator|&
name|arg
operator|)
expr_stmt|;
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|QDBusUnixFileDescriptor
operator|&
name|arg
operator|)
expr_stmt|;
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|QStringList
operator|&
name|arg
operator|)
expr_stmt|;
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|QByteArray
operator|&
name|arg
operator|)
expr_stmt|;
name|void
name|beginStructure
parameter_list|()
function_decl|;
name|void
name|endStructure
parameter_list|()
function_decl|;
name|void
name|beginArray
parameter_list|(
name|int
name|elementMetaTypeId
parameter_list|)
function_decl|;
name|void
name|endArray
parameter_list|()
function_decl|;
name|void
name|beginMap
parameter_list|(
name|int
name|keyMetaTypeId
parameter_list|,
name|int
name|valueMetaTypeId
parameter_list|)
function_decl|;
name|void
name|endMap
parameter_list|()
function_decl|;
name|void
name|beginMapEntry
parameter_list|()
function_decl|;
name|void
name|endMapEntry
parameter_list|()
function_decl|;
name|void
name|appendVariant
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|v
parameter_list|)
function_decl|;
comment|// used for de-marshalling (D-BUS -> Qt)
name|QString
name|currentSignature
argument_list|()
specifier|const
expr_stmt|;
name|ElementType
name|currentType
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
name|uchar
operator|&
name|arg
operator|)
specifier|const
expr_stmt|;
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
name|bool
operator|&
name|arg
operator|)
specifier|const
expr_stmt|;
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
name|short
operator|&
name|arg
operator|)
specifier|const
expr_stmt|;
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
name|ushort
operator|&
name|arg
operator|)
specifier|const
expr_stmt|;
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
name|int
operator|&
name|arg
operator|)
specifier|const
expr_stmt|;
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
name|uint
operator|&
name|arg
operator|)
specifier|const
expr_stmt|;
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
name|qlonglong
operator|&
name|arg
operator|)
specifier|const
expr_stmt|;
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
name|qulonglong
operator|&
name|arg
operator|)
specifier|const
expr_stmt|;
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
name|double
operator|&
name|arg
operator|)
specifier|const
expr_stmt|;
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
name|QString
operator|&
name|arg
operator|)
specifier|const
expr_stmt|;
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
name|QDBusVariant
operator|&
name|arg
operator|)
specifier|const
expr_stmt|;
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
name|QDBusObjectPath
operator|&
name|arg
operator|)
specifier|const
expr_stmt|;
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
name|QDBusSignature
operator|&
name|arg
operator|)
specifier|const
expr_stmt|;
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
name|QDBusUnixFileDescriptor
operator|&
name|arg
operator|)
specifier|const
expr_stmt|;
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
name|QStringList
operator|&
name|arg
operator|)
specifier|const
expr_stmt|;
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
name|QByteArray
operator|&
name|arg
operator|)
specifier|const
expr_stmt|;
name|void
name|beginStructure
argument_list|()
specifier|const
expr_stmt|;
name|void
name|endStructure
argument_list|()
specifier|const
expr_stmt|;
name|void
name|beginArray
argument_list|()
specifier|const
expr_stmt|;
name|void
name|endArray
argument_list|()
specifier|const
expr_stmt|;
name|void
name|beginMap
argument_list|()
specifier|const
expr_stmt|;
name|void
name|endMap
argument_list|()
specifier|const
expr_stmt|;
name|void
name|beginMapEntry
argument_list|()
specifier|const
expr_stmt|;
name|void
name|endMapEntry
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|atEnd
argument_list|()
specifier|const
expr_stmt|;
name|QVariant
name|asVariant
argument_list|()
specifier|const
expr_stmt|;
name|protected
label|:
name|QDBusArgument
argument_list|(
name|QDBusArgumentPrivate
operator|*
name|d
argument_list|)
expr_stmt|;
name|friend
name|class
name|QDBusArgumentPrivate
decl_stmt|;
name|mutable
name|QDBusArgumentPrivate
modifier|*
name|d
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
DECL|function|Q_DECLARE_SHARED_NOT_MOVABLE_UNTIL_QT6
name|Q_DECLARE_SHARED_NOT_MOVABLE_UNTIL_QT6
argument_list|(
argument|QDBusArgument
argument_list|)
end_macro
begin_decl_stmt
name|QT_END_NAMESPACE
name|Q_DECLARE_METATYPE
argument_list|(
name|QDBusArgument
argument_list|)
name|QT_BEGIN_NAMESPACE
name|template
decl|<
name|typename
name|T
decl|>
specifier|inline
namespace|T
name|qdbus_cast
namespace|(const
name|QDBusArgument
namespace|&
name|arg
ifndef|#
directive|ifndef
name|Q_QDOC
operator|,
name|T
modifier|*
namespace|=
name|Q_NULLPTR
endif|#
directive|endif
decl_stmt|)
block|{
name|T
name|item
decl_stmt|;
name|arg
operator|>>
name|item
expr_stmt|;
return|return
name|item
return|;
block|}
end_decl_stmt
begin_expr_stmt
DECL|function|qdbus_cast
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|qdbus_cast
argument_list|(
argument|const QVariant&v
ifndef|#
directive|ifndef
name|Q_QDOC
argument_list|,
argument|T * = Q_NULLPTR
endif|#
directive|endif
argument_list|)
block|{
name|int
name|id
operator|=
name|v
operator|.
name|userType
argument_list|()
block|;
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QDBusArgument
operator|>
operator|(
operator|)
condition|)
return|return
name|qdbus_cast
operator|<
name|T
operator|>
operator|(
name|qvariant_cast
operator|<
name|QDBusArgument
operator|>
operator|(
name|v
operator|)
operator|)
return|;
else|else
return|return
name|qvariant_cast
operator|<
name|T
operator|>
operator|(
name|v
operator|)
return|;
block|}
end_expr_stmt
begin_comment
comment|// specialize for QVariant, allowing it to be used in place of QDBusVariant
end_comment
begin_expr_stmt
DECL|function|QVariant
name|template
operator|<
operator|>
specifier|inline
name|QVariant
name|qdbus_cast
operator|<
name|QVariant
operator|>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|arg
operator|,
name|QVariant
operator|*
operator|)
block|{
name|QDBusVariant
name|item
block|;
name|arg
operator|>>
name|item
block|;
return|return
name|item
operator|.
name|variant
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|QVariant
name|template
operator|<
operator|>
specifier|inline
name|QVariant
name|qdbus_cast
operator|<
name|QVariant
operator|>
operator|(
specifier|const
name|QVariant
operator|&
name|v
operator|,
name|QVariant
operator|*
operator|)
block|{
return|return
name|qdbus_cast
operator|<
name|QDBusVariant
operator|>
operator|(
name|v
operator|)
operator|.
name|variant
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|a
operator|,
name|QVariant
operator|&
name|v
operator|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// QVariant types
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QDBUS_NO_SPECIALTYPES
end_ifndef
begin_expr_stmt
name|Q_DBUS_EXPORT
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|a
operator|,
name|QDate
operator|&
name|date
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|a
operator|,
specifier|const
name|QDate
operator|&
name|date
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|a
operator|,
name|QTime
operator|&
name|time
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|a
operator|,
specifier|const
name|QTime
operator|&
name|time
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|a
operator|,
name|QDateTime
operator|&
name|dt
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|a
operator|,
specifier|const
name|QDateTime
operator|&
name|dt
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|a
operator|,
name|QRect
operator|&
name|rect
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|a
operator|,
specifier|const
name|QRect
operator|&
name|rect
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|a
operator|,
name|QRectF
operator|&
name|rect
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|a
operator|,
specifier|const
name|QRectF
operator|&
name|rect
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|a
operator|,
name|QSize
operator|&
name|size
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|a
operator|,
specifier|const
name|QSize
operator|&
name|size
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|a
operator|,
name|QSizeF
operator|&
name|size
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|a
operator|,
specifier|const
name|QSizeF
operator|&
name|size
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|a
operator|,
name|QPoint
operator|&
name|pt
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|a
operator|,
specifier|const
name|QPoint
operator|&
name|pt
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|a
operator|,
name|QPointF
operator|&
name|pt
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|a
operator|,
specifier|const
name|QPointF
operator|&
name|pt
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|a
operator|,
name|QLine
operator|&
name|line
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|a
operator|,
specifier|const
name|QLine
operator|&
name|line
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|a
operator|,
name|QLineF
operator|&
name|line
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DBUS_EXPORT
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|a
operator|,
specifier|const
name|QLineF
operator|&
name|line
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
DECL|variable|Container
name|template
operator|<
name|template
operator|<
name|typename
operator|>
name|class
name|Container
operator|,
name|typename
name|T
operator|>
DECL|function|operator
specifier|inline
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|arg
operator|,
specifier|const
name|Container
operator|<
name|T
operator|>
operator|&
name|list
operator|)
block|{
name|int
name|id
operator|=
name|qMetaTypeId
operator|<
name|T
operator|>
operator|(
operator|)
block|;
name|arg
operator|.
name|beginArray
argument_list|(
name|id
argument_list|)
block|;
name|typename
name|Container
operator|<
name|T
operator|>
operator|::
name|const_iterator
name|it
operator|=
name|list
operator|.
name|begin
argument_list|()
block|;
name|typename
name|Container
operator|<
name|T
operator|>
operator|::
name|const_iterator
name|end
operator|=
name|list
operator|.
name|end
argument_list|()
block|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
name|arg
operator|<<
operator|*
name|it
expr_stmt|;
name|arg
operator|.
name|endArray
argument_list|()
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|arg
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|Container
operator|<
name|template
operator|<
name|typename
operator|>
name|class
name|Container
operator|,
name|typename
name|T
operator|>
DECL|function|operator
specifier|inline
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|arg
operator|,
name|Container
operator|<
name|T
operator|>
operator|&
name|list
operator|)
block|{
name|arg
operator|.
name|beginArray
argument_list|()
block|;
name|list
operator|.
name|clear
argument_list|()
block|;
while|while
condition|(
operator|!
name|arg
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|T
name|item
decl_stmt|;
name|arg
operator|>>
name|item
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|arg
operator|.
name|endArray
argument_list|()
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|arg
return|;
end_return
begin_comment
unit|}
comment|// QList specializations
end_comment
begin_expr_stmt
unit|template
operator|<
name|typename
name|T
operator|>
DECL|function|operator
specifier|inline
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|arg
operator|,
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|list
operator|)
block|{
name|int
name|id
operator|=
name|qMetaTypeId
operator|<
name|T
operator|>
operator|(
operator|)
block|;
name|arg
operator|.
name|beginArray
argument_list|(
name|id
argument_list|)
block|;
name|typename
name|QList
operator|<
name|T
operator|>
operator|::
name|ConstIterator
name|it
operator|=
name|list
operator|.
name|constBegin
argument_list|()
block|;
name|typename
name|QList
operator|<
name|T
operator|>
operator|::
name|ConstIterator
name|end
operator|=
name|list
operator|.
name|constEnd
argument_list|()
block|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
name|arg
operator|<<
operator|*
name|it
expr_stmt|;
name|arg
operator|.
name|endArray
argument_list|()
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|arg
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
DECL|function|operator
specifier|inline
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|arg
operator|,
name|QList
operator|<
name|T
operator|>
operator|&
name|list
operator|)
block|{
name|arg
operator|.
name|beginArray
argument_list|()
block|;
name|list
operator|.
name|clear
argument_list|()
block|;
while|while
condition|(
operator|!
name|arg
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|T
name|item
decl_stmt|;
name|arg
operator|>>
name|item
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|arg
operator|.
name|endArray
argument_list|()
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|arg
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|operator
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|arg
operator|,
specifier|const
name|QVariantList
operator|&
name|list
operator|)
block|{
name|int
name|id
operator|=
name|qMetaTypeId
operator|<
name|QDBusVariant
operator|>
operator|(
operator|)
block|;
name|arg
operator|.
name|beginArray
argument_list|(
name|id
argument_list|)
block|;
name|QVariantList
operator|::
name|ConstIterator
name|it
operator|=
name|list
operator|.
name|constBegin
argument_list|()
block|;
name|QVariantList
operator|::
name|ConstIterator
name|end
operator|=
name|list
operator|.
name|constEnd
argument_list|()
block|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
name|arg
operator|<<
name|QDBusVariant
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
name|arg
operator|.
name|endArray
argument_list|()
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|arg
return|;
end_return
begin_comment
unit|}
comment|// QMap specializations
end_comment
begin_expr_stmt
unit|template
DECL|variable|Key
operator|<
name|typename
name|Key
operator|,
name|typename
name|T
operator|>
DECL|function|operator
specifier|inline
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|arg
operator|,
specifier|const
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|map
operator|)
block|{
name|int
name|kid
operator|=
name|qMetaTypeId
operator|<
name|Key
operator|>
operator|(
operator|)
block|;
name|int
name|vid
operator|=
name|qMetaTypeId
operator|<
name|T
operator|>
operator|(
operator|)
block|;
name|arg
operator|.
name|beginMap
argument_list|(
name|kid
argument_list|,
name|vid
argument_list|)
block|;
name|typename
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|ConstIterator
name|it
operator|=
name|map
operator|.
name|constBegin
argument_list|()
block|;
name|typename
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|ConstIterator
name|end
operator|=
name|map
operator|.
name|constEnd
argument_list|()
block|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
name|arg
operator|.
name|beginMapEntry
argument_list|()
expr_stmt|;
name|arg
operator|<<
name|it
operator|.
name|key
argument_list|()
operator|<<
name|it
operator|.
name|value
argument_list|()
expr_stmt|;
name|arg
operator|.
name|endMapEntry
argument_list|()
expr_stmt|;
block|}
name|arg
operator|.
name|endMap
argument_list|()
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|arg
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|typename
name|Key
operator|,
name|typename
name|T
operator|>
DECL|function|operator
specifier|inline
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|arg
operator|,
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|map
operator|)
block|{
name|arg
operator|.
name|beginMap
argument_list|()
block|;
name|map
operator|.
name|clear
argument_list|()
block|;
while|while
condition|(
operator|!
name|arg
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|Key
name|key
decl_stmt|;
name|T
name|value
decl_stmt|;
name|arg
operator|.
name|beginMapEntry
argument_list|()
expr_stmt|;
name|arg
operator|>>
name|key
operator|>>
name|value
expr_stmt|;
name|map
operator|.
name|insertMulti
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|arg
operator|.
name|endMapEntry
argument_list|()
expr_stmt|;
block|}
name|arg
operator|.
name|endMap
argument_list|()
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|arg
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|operator
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|arg
operator|,
specifier|const
name|QVariantMap
operator|&
name|map
operator|)
block|{
name|arg
operator|.
name|beginMap
argument_list|(
name|QVariant
operator|::
name|String
argument_list|,
name|qMetaTypeId
operator|<
name|QDBusVariant
operator|>
operator|(
operator|)
argument_list|)
block|;
name|QVariantMap
operator|::
name|ConstIterator
name|it
operator|=
name|map
operator|.
name|constBegin
argument_list|()
block|;
name|QVariantMap
operator|::
name|ConstIterator
name|end
operator|=
name|map
operator|.
name|constEnd
argument_list|()
block|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
name|arg
operator|.
name|beginMapEntry
argument_list|()
expr_stmt|;
name|arg
operator|<<
name|it
operator|.
name|key
argument_list|()
operator|<<
name|QDBusVariant
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|arg
operator|.
name|endMapEntry
argument_list|()
expr_stmt|;
block|}
name|arg
operator|.
name|endMap
argument_list|()
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|arg
return|;
end_return
begin_comment
unit|}
comment|// QHash specializations
end_comment
begin_expr_stmt
unit|template
DECL|variable|Key
operator|<
name|typename
name|Key
operator|,
name|typename
name|T
operator|>
DECL|function|operator
specifier|inline
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|arg
operator|,
specifier|const
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|map
operator|)
block|{
name|int
name|kid
operator|=
name|qMetaTypeId
operator|<
name|Key
operator|>
operator|(
operator|)
block|;
name|int
name|vid
operator|=
name|qMetaTypeId
operator|<
name|T
operator|>
operator|(
operator|)
block|;
name|arg
operator|.
name|beginMap
argument_list|(
name|kid
argument_list|,
name|vid
argument_list|)
block|;
name|typename
name|QHash
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|ConstIterator
name|it
operator|=
name|map
operator|.
name|constBegin
argument_list|()
block|;
name|typename
name|QHash
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|ConstIterator
name|end
operator|=
name|map
operator|.
name|constEnd
argument_list|()
block|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
name|arg
operator|.
name|beginMapEntry
argument_list|()
expr_stmt|;
name|arg
operator|<<
name|it
operator|.
name|key
argument_list|()
operator|<<
name|it
operator|.
name|value
argument_list|()
expr_stmt|;
name|arg
operator|.
name|endMapEntry
argument_list|()
expr_stmt|;
block|}
name|arg
operator|.
name|endMap
argument_list|()
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|arg
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|typename
name|Key
operator|,
name|typename
name|T
operator|>
DECL|function|operator
specifier|inline
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|arg
operator|,
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|map
operator|)
block|{
name|arg
operator|.
name|beginMap
argument_list|()
block|;
name|map
operator|.
name|clear
argument_list|()
block|;
while|while
condition|(
operator|!
name|arg
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|Key
name|key
decl_stmt|;
name|T
name|value
decl_stmt|;
name|arg
operator|.
name|beginMapEntry
argument_list|()
expr_stmt|;
name|arg
operator|>>
name|key
operator|>>
name|value
expr_stmt|;
name|map
operator|.
name|insertMulti
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|arg
operator|.
name|endMapEntry
argument_list|()
expr_stmt|;
block|}
name|arg
operator|.
name|endMap
argument_list|()
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|arg
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|operator
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|arg
operator|,
specifier|const
name|QVariantHash
operator|&
name|map
operator|)
block|{
name|arg
operator|.
name|beginMap
argument_list|(
name|QVariant
operator|::
name|String
argument_list|,
name|qMetaTypeId
operator|<
name|QDBusVariant
operator|>
operator|(
operator|)
argument_list|)
block|;
name|QVariantHash
operator|::
name|ConstIterator
name|it
operator|=
name|map
operator|.
name|constBegin
argument_list|()
block|;
name|QVariantHash
operator|::
name|ConstIterator
name|end
operator|=
name|map
operator|.
name|constEnd
argument_list|()
block|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
name|arg
operator|.
name|beginMapEntry
argument_list|()
expr_stmt|;
name|arg
operator|<<
name|it
operator|.
name|key
argument_list|()
operator|<<
name|QDBusVariant
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|arg
operator|.
name|endMapEntry
argument_list|()
expr_stmt|;
block|}
name|arg
operator|.
name|endMap
argument_list|()
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|arg
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|T1
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|>
DECL|function|operator
specifier|inline
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|arg
operator|,
specifier|const
name|QPair
operator|<
name|T1
operator|,
name|T2
operator|>
operator|&
name|pair
operator|)
block|{
name|arg
operator|.
name|beginStructure
argument_list|()
block|;
name|arg
operator|<<
name|pair
operator|.
name|first
operator|<<
name|pair
operator|.
name|second
block|;
name|arg
operator|.
name|endStructure
argument_list|()
block|;
return|return
name|arg
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|T1
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|>
DECL|function|operator
specifier|inline
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|arg
operator|,
name|QPair
operator|<
name|T1
operator|,
name|T2
operator|>
operator|&
name|pair
operator|)
block|{
name|arg
operator|.
name|beginStructure
argument_list|()
block|;
name|arg
operator|>>
name|pair
operator|.
name|first
operator|>>
name|pair
operator|.
name|second
block|;
name|arg
operator|.
name|endStructure
argument_list|()
block|;
return|return
name|arg
return|;
block|}
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DBUS
end_comment
begin_endif
endif|#
directive|endif
end_endif
end_unit
