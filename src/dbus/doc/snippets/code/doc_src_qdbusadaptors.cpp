begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//! [0]
end_comment
begin_class
DECL|class|MainApplicationAdaptor
class|class
name|MainApplicationAdaptor
super|:
specifier|public
name|QDBusAbstractAdaptor
block|{
name|Q_OBJECT
name|Q_CLASSINFO
argument_list|(
literal|"D-Bus Interface"
argument_list|,
literal|"org.kde.DBus.MainApplication"
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QString
name|caption
name|READ
name|caption
name|WRITE
name|setCaption
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QString
name|organizationName
name|READ
name|organizationName
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QString
name|organizationDomain
name|READ
name|organizationDomain
argument_list|)
decl|private
range|:
DECL|member|app
name|QApplication
operator|*
name|app
decl_stmt|;
public|public:
DECL|function|MainApplicationAdaptor
name|MainApplicationAdaptor
parameter_list|(
name|QApplication
modifier|*
name|application
parameter_list|)
member_init_list|:
name|QDBusAbstractAdaptor
argument_list|(
name|application
argument_list|)
member_init_list|,
name|app
argument_list|(
name|application
argument_list|)
block|{
name|connect
argument_list|(
name|application
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToQuit
argument_list|()
argument_list|)
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToQuit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|application
argument_list|,
name|SIGNAL
argument_list|(
name|focusChanged
argument_list|(
name|QWidget
operator|*
argument_list|,
name|QWidget
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|focusChangedSlot
argument_list|(
name|QWidget
operator|*
argument_list|,
name|QWidget
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|caption
name|QString
name|caption
parameter_list|()
block|{
if|if
condition|(
name|app
operator|->
name|hasMainWindow
argument_list|()
condition|)
return|return
name|app
operator|->
name|mainWindow
argument_list|()
operator|->
name|caption
argument_list|()
return|;
return|return
name|QString
argument_list|(
literal|""
argument_list|)
return|;
comment|// must not return a null QString
block|}
DECL|function|setCaption
name|void
name|setCaption
parameter_list|(
specifier|const
name|QString
modifier|&
name|newCaption
parameter_list|)
block|{
if|if
condition|(
name|app
operator|->
name|hasMainWindow
argument_list|()
condition|)
name|app
operator|->
name|mainWindow
argument_list|()
operator|->
name|setCaption
argument_list|(
name|newCaption
argument_list|)
expr_stmt|;
block|}
DECL|function|organizationName
name|QString
name|organizationName
parameter_list|()
block|{
return|return
name|app
operator|->
name|organizationName
argument_list|()
return|;
block|}
DECL|function|organizationDomain
name|QString
name|organizationDomain
parameter_list|()
block|{
return|return
name|app
operator|->
name|organizationDomain
argument_list|()
return|;
block|}
public|public
name|slots
public|:
DECL|function|quit
name|Q_NOREPLY
name|void
name|quit
parameter_list|()
block|{
name|app
operator|->
name|quit
argument_list|()
expr_stmt|;
block|}
DECL|function|reparseConfiguration
name|void
name|reparseConfiguration
parameter_list|()
block|{
name|app
operator|->
name|reparseConfiguration
argument_list|()
expr_stmt|;
block|}
DECL|function|mainWindowObject
name|QString
name|mainWindowObject
parameter_list|()
block|{
if|if
condition|(
name|app
operator|->
name|hasMainWindow
argument_list|()
condition|)
return|return
name|QString
argument_list|(
literal|"/%1/mainwindow"
argument_list|)
operator|.
name|arg
argument_list|(
name|app
operator|->
name|applicationName
argument_list|()
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
DECL|function|setSessionManagement
name|void
name|setSessionManagement
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
if|if
condition|(
name|enable
condition|)
name|app
operator|->
name|enableSessionManagement
argument_list|()
expr_stmt|;
else|else
name|app
operator|->
name|disableSessionManagement
argument_list|()
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|focusChangedSlot
name|void
name|focusChangedSlot
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
name|QWidget
modifier|*
name|now
parameter_list|)
block|{
if|if
condition|(
name|now
operator|==
name|app
operator|->
name|mainWindow
argument_list|()
condition|)
emit|emit
name|mainWindowHasFocus
argument_list|()
emit|;
block|}
signals|signals:
name|void
name|aboutToQuit
parameter_list|()
function_decl|;
name|void
name|mainWindowHasFocus
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_decl_stmt
name|interface
name|org
operator|.
name|kde
operator|.
name|DBus
operator|.
name|MainApplication
argument_list|{
name|property
name|readwrite
name|STRING
name|caption
name|property
name|read
name|STRING
name|organizationName
name|property
name|read
name|STRING
name|organizationDomain
name|method
name|quit
argument_list|()
name|annotation
argument_list|(
literal|"org.freedesktop.DBus.Method.NoReply"
argument_list|,
literal|"true"
argument_list|)
name|method
name|reparseConfiguration
argument_list|()
name|method
name|mainWindowObject
argument_list|(
argument|out STRING
argument_list|)
name|method
name|disableSessionManagement
argument_list|(
argument|in BOOLEAN enable
argument_list|)
name|signal
name|aboutToQuit
argument_list|()
name|signal
name|mainWindowHasFocus
argument_list|()
argument_list|}
comment|//! [1]
comment|//! [2]
DECL|function|main
name|int
decl|main
argument_list|(
name|int
name|argc
argument_list|,
name|char
operator|*
operator|*
name|argv
argument_list|)
argument_list|{
comment|// create the QApplication object
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
argument_list|;
comment|// create the MainApplication adaptor:
operator|new
name|MainApplicationAdaptor
argument_list|(
name|app
argument_list|)
argument_list|;
comment|// connect to D-Bus and register as an object:
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|registerObject
argument_list|(
literal|"/MainApplication"
argument_list|,
name|app
argument_list|)
argument_list|;
comment|// add main window, etc.
index|[
operator|...
index|]
name|app
operator|.
name|exec
argument_list|()
argument_list|; }
comment|//! [2]
comment|//! [3]
DECL|class|MainApplicationAdaptor
name|class
name|MainApplicationAdaptor
range|:
specifier|public
name|QDBusAbstractAdaptor
block|{
name|Q_OBJECT
name|Q_CLASSINFO
argument_list|(
literal|"D-Bus Interface"
argument_list|,
literal|"org.kde.DBus.MainApplication"
argument_list|)
comment|//! [3]
comment|//! [4]
name|Q_PROPERTY
argument_list|(
argument|QString caption READ caption WRITE setCaption
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QString organizationName READ organizationName
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QString organizationDomain READ organizationDomain
argument_list|)
comment|//! [4]
comment|//! [5]
DECL|function|caption
name|QString
name|caption
argument_list|()
block|{
if|if
condition|(
name|app
operator|->
name|hasMainWindow
argument_list|()
condition|)
return|return
name|app
operator|->
name|mainWindow
argument_list|()
operator|->
name|caption
argument_list|()
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_decl_stmt
begin_function
DECL|function|setCaption
name|void
name|setCaption
parameter_list|(
specifier|const
name|QString
modifier|&
name|newCaption
parameter_list|)
block|{
if|if
condition|(
name|app
operator|->
name|hasMainWindow
argument_list|()
condition|)
name|app
operator|->
name|mainWindow
argument_list|()
operator|->
name|setCaption
argument_list|(
name|newCaption
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|organizationName
name|QString
name|organizationName
parameter_list|()
block|{
return|return
name|app
operator|->
name|organizationName
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|organizationDomain
name|QString
name|organizationDomain
parameter_list|()
block|{
return|return
name|app
operator|->
name|organizationDomain
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|//! [6]
end_comment
begin_expr_stmt
DECL|function|MyInterfaceAdaptor
name|MyInterfaceAdaptor
argument_list|(
name|QApplication
operator|*
name|application
argument_list|)
operator|:
name|QDBusAbstractAdaptor
argument_list|(
name|application
argument_list|)
operator|,
name|app
argument_list|(
argument|application
argument_list|)
block|{
name|connect
argument_list|(
argument|application
argument_list|,
argument|SIGNAL(aboutToQuit())
argument_list|,
argument|SIGNAL(aboutToQuit());     connect(application, SIGNAL(focusChanged(QWidget*, QWidget*)),             SLOT(focusChangedSlot(QWidget*, QWidget*))); }
comment|//! [6]
comment|//! [7]
argument|public slots:     Q_NOREPLY void quit()     { app->quit(); }      void reparseConfiguration()     { app->reparseConfiguration(); }      QString mainWindowObject()     {         if (app->hasMainWindow())             return QString(
literal|"/%1/mainwindow"
argument|).arg(app->applicationName());         return QString();     }      void setSessionManagement(bool enable)     {         if (enable)            app->enableSessionManagement();         else            app->disableSessionManagement();     }
comment|//! [7]
comment|//! [8]
argument|signals:     void aboutToQuit();     void mainWindowHasFocus();
comment|//! [8]
comment|//! [9]
argument|private slots:     void focusChangedSlot(QWidget *, QWidget *now)     {         if (now == app->mainWindow())             emit mainWindowHasFocus();     }
comment|//! [9]
comment|//! [10]
argument|struct RequestData {     QString request;     QString processedData;     QDBusMessage reply; };  QString processRequest(const QString&request, const QDBusMessage&message) {     RequestData *data = new RequestData;     data->request = request;     message.setDelayedReply(
literal|true
argument|);     data->reply = message.createReply();     QDBusConnection::sessionBus().send(data->reply);      appendRequest(data);     return QString(); }
comment|//! [10]
comment|//! [11]
argument|void sendReply(RequestData *data) {
comment|// data->processedData has been initialized with the request's reply
argument|QDBusMessage&reply =&data->reply;
comment|// send the reply over D-Bus:
argument|reply<< data->processedData;     QDBusConnection::sessionBus().send(reply);
comment|// dispose of the transaction data
argument|delete data; }
comment|//! [11]
comment|//! [12]
argument|Q_NOREPLY void myMethod();
end_expr_stmt
begin_comment
comment|//! [12]
end_comment
end_unit
