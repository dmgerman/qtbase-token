begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtDBus module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdbusconnection_p.h"
end_include
begin_include
include|#
directive|include
file|"qdbus_symbols_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmetaobject.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qthread.h>
end_include
begin_include
include|#
directive|include
file|"qdbusabstractadaptor.h"
end_include
begin_include
include|#
directive|include
file|"qdbusabstractadaptor_p.h"
end_include
begin_include
include|#
directive|include
file|"qdbusconnection.h"
end_include
begin_include
include|#
directive|include
file|"qdbusextratypes.h"
end_include
begin_include
include|#
directive|include
file|"qdbusmessage.h"
end_include
begin_include
include|#
directive|include
file|"qdbusmetatype.h"
end_include
begin_include
include|#
directive|include
file|"qdbusmetatype_p.h"
end_include
begin_include
include|#
directive|include
file|"qdbusmessage_p.h"
end_include
begin_include
include|#
directive|include
file|"qdbusutil_p.h"
end_include
begin_include
include|#
directive|include
file|"qdbusvirtualobject.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DBUS
end_ifndef
begin_function_decl
name|QT_BEGIN_NAMESPACE
comment|// defined in qdbusxmlgenerator.cpp
specifier|extern
name|QString
name|qDBusGenerateMetaObjectXml
parameter_list|(
name|QString
name|interface
parameter_list|,
specifier|const
name|QMetaObject
modifier|*
name|mo
parameter_list|,
specifier|const
name|QMetaObject
modifier|*
name|base
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|introspectableInterfaceXml
specifier|static
specifier|const
name|char
name|introspectableInterfaceXml
index|[]
init|=
literal|"<interface name=\"org.freedesktop.DBus.Introspectable\">\n"
literal|"<method name=\"Introspect\">\n"
literal|"<arg name=\"xml_data\" type=\"s\" direction=\"out\"/>\n"
literal|"</method>\n"
literal|"</interface>\n"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|propertiesInterfaceXml
specifier|static
specifier|const
name|char
name|propertiesInterfaceXml
index|[]
init|=
literal|"<interface name=\"org.freedesktop.DBus.Properties\">\n"
literal|"<method name=\"Get\">\n"
literal|"<arg name=\"interface_name\" type=\"s\" direction=\"in\"/>\n"
literal|"<arg name=\"property_name\" type=\"s\" direction=\"in\"/>\n"
literal|"<arg name=\"value\" type=\"v\" direction=\"out\"/>\n"
literal|"</method>\n"
literal|"<method name=\"Set\">\n"
literal|"<arg name=\"interface_name\" type=\"s\" direction=\"in\"/>\n"
literal|"<arg name=\"property_name\" type=\"s\" direction=\"in\"/>\n"
literal|"<arg name=\"value\" type=\"v\" direction=\"in\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetAll\">\n"
literal|"<arg name=\"interface_name\" type=\"s\" direction=\"in\"/>\n"
literal|"<arg name=\"values\" type=\"a{sv}\" direction=\"out\"/>\n"
literal|"<annotation name=\"com.trolltech.QtDBus.QtTypeName.Out0\" value=\"QVariantMap\"/>\n"
literal|"</method>\n"
literal|"</interface>\n"
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|generateSubObjectXml
specifier|static
name|QString
name|generateSubObjectXml
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
block|{
name|QString
name|retval
decl_stmt|;
specifier|const
name|QObjectList
modifier|&
name|objs
init|=
name|object
operator|->
name|children
argument_list|()
decl_stmt|;
name|QObjectList
operator|::
name|ConstIterator
name|it
init|=
name|objs
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QObjectList
operator|::
name|ConstIterator
name|end
init|=
name|objs
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|name
init|=
operator|(
operator|*
name|it
operator|)
operator|->
name|objectName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
operator|&&
name|QDBusUtil
operator|::
name|isValidPartOfObjectPath
argument_list|(
name|name
argument_list|)
condition|)
name|retval
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<node name=\"%1\"/>\n"
argument_list|)
operator|.
name|arg
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
end_function
begin_comment
comment|// declared as extern in qdbusconnection_p.h
end_comment
begin_function
DECL|function|qDBusIntrospectObject
name|QString
name|qDBusIntrospectObject
parameter_list|(
specifier|const
name|QDBusConnectionPrivate
operator|::
name|ObjectTreeNode
modifier|&
name|node
parameter_list|,
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
comment|// object may be null
name|QString
name|xml_data
argument_list|(
name|QLatin1String
argument_list|(
name|DBUS_INTROSPECT_1_0_XML_DOCTYPE_DECL_NODE
argument_list|)
argument_list|)
decl_stmt|;
name|xml_data
operator|+=
name|QLatin1String
argument_list|(
literal|"<node>\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|obj
condition|)
block|{
name|Q_ASSERT_X
argument_list|(
name|QThread
operator|::
name|currentThread
argument_list|()
operator|==
name|node
operator|.
name|obj
operator|->
name|thread
argument_list|()
argument_list|,
literal|"QDBusConnection: internal threading error"
argument_list|,
literal|"function called for an object that is in another thread!!"
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|flags
operator|&
operator|(
name|QDBusConnection
operator|::
name|ExportScriptableContents
operator||
name|QDBusConnection
operator|::
name|ExportNonScriptableContents
operator|)
condition|)
block|{
comment|// create XML for the object itself
specifier|const
name|QMetaObject
modifier|*
name|mo
init|=
name|node
operator|.
name|obj
operator|->
name|metaObject
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|mo
operator|!=
operator|&
name|QObject
operator|::
name|staticMetaObject
condition|;
name|mo
operator|=
name|mo
operator|->
name|superClass
argument_list|()
control|)
name|xml_data
operator|+=
name|qDBusGenerateMetaObjectXml
argument_list|(
name|QString
argument_list|()
argument_list|,
name|mo
argument_list|,
name|mo
operator|->
name|superClass
argument_list|()
argument_list|,
name|node
operator|.
name|flags
argument_list|)
expr_stmt|;
block|}
comment|// does this object have adaptors?
name|QDBusAdaptorConnector
modifier|*
name|connector
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|flags
operator|&
name|QDBusConnection
operator|::
name|ExportAdaptors
operator|&&
operator|(
name|connector
operator|=
name|qDBusFindAdaptorConnector
argument_list|(
name|node
operator|.
name|obj
argument_list|)
operator|)
condition|)
block|{
comment|// trasverse every adaptor in this object
name|QDBusAdaptorConnector
operator|::
name|AdaptorMap
operator|::
name|ConstIterator
name|it
init|=
name|connector
operator|->
name|adaptors
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QDBusAdaptorConnector
operator|::
name|AdaptorMap
operator|::
name|ConstIterator
name|end
init|=
name|connector
operator|->
name|adaptors
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
comment|// add the interface:
name|QString
name|ifaceXml
init|=
name|QDBusAbstractAdaptorPrivate
operator|::
name|retrieveIntrospectionXml
argument_list|(
name|it
operator|->
name|adaptor
argument_list|)
decl_stmt|;
if|if
condition|(
name|ifaceXml
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// add the interface's contents:
name|ifaceXml
operator|+=
name|qDBusGenerateMetaObjectXml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|it
operator|->
name|interface
argument_list|)
argument_list|,
name|it
operator|->
name|adaptor
operator|->
name|metaObject
argument_list|()
argument_list|,
operator|&
name|QDBusAbstractAdaptor
operator|::
name|staticMetaObject
argument_list|,
name|QDBusConnection
operator|::
name|ExportScriptableContents
operator||
name|QDBusConnection
operator|::
name|ExportNonScriptableContents
argument_list|)
expr_stmt|;
name|QDBusAbstractAdaptorPrivate
operator|::
name|saveIntrospectionXml
argument_list|(
name|it
operator|->
name|adaptor
argument_list|,
name|ifaceXml
argument_list|)
expr_stmt|;
block|}
name|xml_data
operator|+=
name|ifaceXml
expr_stmt|;
block|}
block|}
comment|// is it a virtual node that handles introspection itself?
if|if
condition|(
name|node
operator|.
name|flags
operator|&
name|QDBusConnectionPrivate
operator|::
name|VirtualObject
condition|)
block|{
name|xml_data
operator|+=
name|node
operator|.
name|treeNode
operator|->
name|introspect
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|xml_data
operator|+=
name|QLatin1String
argument_list|(
name|propertiesInterfaceXml
argument_list|)
expr_stmt|;
block|}
name|xml_data
operator|+=
name|QLatin1String
argument_list|(
name|introspectableInterfaceXml
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|flags
operator|&
name|QDBusConnection
operator|::
name|ExportChildObjects
condition|)
block|{
name|xml_data
operator|+=
name|generateSubObjectXml
argument_list|(
name|node
operator|.
name|obj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// generate from the object tree
name|QDBusConnectionPrivate
operator|::
name|ObjectTreeNode
operator|::
name|DataList
operator|::
name|ConstIterator
name|it
init|=
name|node
operator|.
name|children
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QDBusConnectionPrivate
operator|::
name|ObjectTreeNode
operator|::
name|DataList
operator|::
name|ConstIterator
name|end
init|=
name|node
operator|.
name|children
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
if|if
condition|(
name|it
operator|->
name|obj
operator|||
operator|!
name|it
operator|->
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
name|xml_data
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<node name=\"%1\"/>\n"
argument_list|)
operator|.
name|arg
argument_list|(
name|it
operator|->
name|name
argument_list|)
expr_stmt|;
block|}
name|xml_data
operator|+=
name|QLatin1String
argument_list|(
literal|"</node>\n"
argument_list|)
expr_stmt|;
return|return
name|xml_data
return|;
block|}
end_function
begin_comment
comment|// implement the D-Bus interface org.freedesktop.DBus.Properties
end_comment
begin_function
DECL|function|interfaceNotFoundError
specifier|static
specifier|inline
name|QDBusMessage
name|interfaceNotFoundError
parameter_list|(
specifier|const
name|QDBusMessage
modifier|&
name|msg
parameter_list|,
specifier|const
name|QString
modifier|&
name|interface_name
parameter_list|)
block|{
return|return
name|msg
operator|.
name|createErrorReply
argument_list|(
name|QDBusError
operator|::
name|UnknownInterface
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Interface %1 was not found in object %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|interface_name
argument_list|)
operator|.
name|arg
argument_list|(
name|msg
operator|.
name|path
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|QDBusMessage
DECL|function|propertyNotFoundError
name|propertyNotFoundError
parameter_list|(
specifier|const
name|QDBusMessage
modifier|&
name|msg
parameter_list|,
specifier|const
name|QString
modifier|&
name|interface_name
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|property_name
parameter_list|)
block|{
return|return
name|msg
operator|.
name|createErrorReply
argument_list|(
name|QDBusError
operator|::
name|InvalidArgs
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Property %1%2%3 was not found in object %4"
argument_list|)
operator|.
name|arg
argument_list|(
name|interface_name
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|interface_name
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"."
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|property_name
argument_list|)
argument_list|,
name|msg
operator|.
name|path
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qDBusPropertyGet
name|QDBusMessage
name|qDBusPropertyGet
parameter_list|(
specifier|const
name|QDBusConnectionPrivate
operator|::
name|ObjectTreeNode
modifier|&
name|node
parameter_list|,
specifier|const
name|QDBusMessage
modifier|&
name|msg
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|msg
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
operator|!
name|node
operator|.
name|obj
operator|||
name|QThread
operator|::
name|currentThread
argument_list|()
operator|==
name|node
operator|.
name|obj
operator|->
name|thread
argument_list|()
argument_list|,
literal|"QDBusConnection: internal threading error"
argument_list|,
literal|"function called for an object that is in another thread!!"
argument_list|)
expr_stmt|;
name|QString
name|interface_name
init|=
name|msg
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QByteArray
name|property_name
init|=
name|msg
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|QDBusAdaptorConnector
modifier|*
name|connector
decl_stmt|;
name|QVariant
name|value
decl_stmt|;
name|bool
name|interfaceFound
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|flags
operator|&
name|QDBusConnection
operator|::
name|ExportAdaptors
operator|&&
operator|(
name|connector
operator|=
name|qDBusFindAdaptorConnector
argument_list|(
name|node
operator|.
name|obj
argument_list|)
operator|)
condition|)
block|{
comment|// find the class that implements interface_name or try until we've found the property
comment|// in case of an empty interface
if|if
condition|(
name|interface_name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|QDBusAdaptorConnector
operator|::
name|AdaptorMap
operator|::
name|ConstIterator
name|it
init|=
name|connector
operator|->
name|adaptors
operator|.
name|constBegin
argument_list|()
init|,
name|end
init|=
name|connector
operator|->
name|adaptors
operator|.
name|constEnd
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|QMetaObject
modifier|*
name|mo
init|=
name|it
operator|->
name|adaptor
operator|->
name|metaObject
argument_list|()
decl_stmt|;
name|int
name|pidx
init|=
name|mo
operator|->
name|indexOfProperty
argument_list|(
name|property_name
argument_list|)
decl_stmt|;
if|if
condition|(
name|pidx
operator|!=
operator|-
literal|1
condition|)
block|{
name|value
operator|=
name|mo
operator|->
name|property
argument_list|(
name|pidx
argument_list|)
operator|.
name|read
argument_list|(
name|it
operator|->
name|adaptor
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|QDBusAdaptorConnector
operator|::
name|AdaptorMap
operator|::
name|ConstIterator
name|it
decl_stmt|;
name|it
operator|=
name|qLowerBound
argument_list|(
name|connector
operator|->
name|adaptors
operator|.
name|constBegin
argument_list|()
argument_list|,
name|connector
operator|->
name|adaptors
operator|.
name|constEnd
argument_list|()
argument_list|,
name|interface_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|!=
name|connector
operator|->
name|adaptors
operator|.
name|constEnd
argument_list|()
operator|&&
name|interface_name
operator|==
name|QLatin1String
argument_list|(
name|it
operator|->
name|interface
argument_list|)
condition|)
block|{
name|interfaceFound
operator|=
literal|true
expr_stmt|;
name|value
operator|=
name|it
operator|->
name|adaptor
operator|->
name|property
argument_list|(
name|property_name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|interfaceFound
operator|&&
operator|!
name|value
operator|.
name|isValid
argument_list|()
operator|&&
name|node
operator|.
name|flags
operator|&
operator|(
name|QDBusConnection
operator|::
name|ExportAllProperties
operator||
name|QDBusConnection
operator|::
name|ExportNonScriptableProperties
operator|)
condition|)
block|{
comment|// try the object itself
if|if
condition|(
operator|!
name|interface_name
operator|.
name|isEmpty
argument_list|()
condition|)
name|interfaceFound
operator|=
name|qDBusInterfaceInObject
argument_list|(
name|node
operator|.
name|obj
argument_list|,
name|interface_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|interfaceFound
condition|)
block|{
name|int
name|pidx
init|=
name|node
operator|.
name|obj
operator|->
name|metaObject
argument_list|()
operator|->
name|indexOfProperty
argument_list|(
name|property_name
argument_list|)
decl_stmt|;
if|if
condition|(
name|pidx
operator|!=
operator|-
literal|1
condition|)
block|{
name|QMetaProperty
name|mp
init|=
name|node
operator|.
name|obj
operator|->
name|metaObject
argument_list|()
operator|->
name|property
argument_list|(
name|pidx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|mp
operator|.
name|isScriptable
argument_list|()
operator|&&
operator|(
name|node
operator|.
name|flags
operator|&
name|QDBusConnection
operator|::
name|ExportScriptableProperties
operator|)
operator|)
operator|||
operator|(
operator|!
name|mp
operator|.
name|isScriptable
argument_list|()
operator|&&
operator|(
name|node
operator|.
name|flags
operator|&
name|QDBusConnection
operator|::
name|ExportNonScriptableProperties
operator|)
operator|)
condition|)
name|value
operator|=
name|mp
operator|.
name|read
argument_list|(
name|node
operator|.
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|value
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// the property was not found
if|if
condition|(
operator|!
name|interfaceFound
condition|)
return|return
name|interfaceNotFoundError
argument_list|(
name|msg
argument_list|,
name|interface_name
argument_list|)
return|;
return|return
name|propertyNotFoundError
argument_list|(
name|msg
argument_list|,
name|interface_name
argument_list|,
name|property_name
argument_list|)
return|;
block|}
return|return
name|msg
operator|.
name|createReply
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_enum
DECL|enum|PropertyWriteResult
enum|enum
name|PropertyWriteResult
block|{
DECL|enumerator|PropertyWriteSuccess
name|PropertyWriteSuccess
init|=
literal|0
block|,
DECL|enumerator|PropertyNotFound
name|PropertyNotFound
block|,
DECL|enumerator|PropertyTypeMismatch
name|PropertyTypeMismatch
block|,
DECL|enumerator|PropertyWriteFailed
name|PropertyWriteFailed
block|}
enum|;
end_enum
begin_function
DECL|function|propertyWriteReply
specifier|static
name|QDBusMessage
name|propertyWriteReply
parameter_list|(
specifier|const
name|QDBusMessage
modifier|&
name|msg
parameter_list|,
specifier|const
name|QString
modifier|&
name|interface_name
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|property_name
parameter_list|,
name|int
name|status
parameter_list|)
block|{
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|PropertyNotFound
case|:
return|return
name|propertyNotFoundError
argument_list|(
name|msg
argument_list|,
name|interface_name
argument_list|,
name|property_name
argument_list|)
return|;
case|case
name|PropertyTypeMismatch
case|:
return|return
name|msg
operator|.
name|createErrorReply
argument_list|(
name|QDBusError
operator|::
name|InvalidArgs
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Invalid arguments for writing to property %1%2%3"
argument_list|)
operator|.
name|arg
argument_list|(
name|interface_name
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|interface_name
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"."
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|property_name
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|PropertyWriteFailed
case|:
return|return
name|msg
operator|.
name|createErrorReply
argument_list|(
name|QDBusError
operator|::
name|InternalError
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Internal error"
argument_list|)
argument_list|)
return|;
case|case
name|PropertyWriteSuccess
case|:
return|return
name|msg
operator|.
name|createReply
argument_list|()
return|;
block|}
name|Q_ASSERT_X
argument_list|(
literal|false
argument_list|,
literal|""
argument_list|,
literal|"Should not be reached"
argument_list|)
expr_stmt|;
return|return
name|QDBusMessage
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|writeProperty
specifier|static
name|int
name|writeProperty
parameter_list|(
name|QObject
modifier|*
name|obj
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|property_name
parameter_list|,
name|QVariant
name|value
parameter_list|,
name|int
name|propFlags
init|=
name|QDBusConnection
operator|::
name|ExportAllProperties
parameter_list|)
block|{
specifier|const
name|QMetaObject
modifier|*
name|mo
init|=
name|obj
operator|->
name|metaObject
argument_list|()
decl_stmt|;
name|int
name|pidx
init|=
name|mo
operator|->
name|indexOfProperty
argument_list|(
name|property_name
argument_list|)
decl_stmt|;
if|if
condition|(
name|pidx
operator|==
operator|-
literal|1
condition|)
block|{
comment|// this object has no property by that name
return|return
name|PropertyNotFound
return|;
block|}
name|QMetaProperty
name|mp
init|=
name|mo
operator|->
name|property
argument_list|(
name|pidx
argument_list|)
decl_stmt|;
comment|// check if this property is exported
name|bool
name|isScriptable
init|=
name|mp
operator|.
name|isScriptable
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|propFlags
operator|&
name|QDBusConnection
operator|::
name|ExportScriptableProperties
operator|)
operator|&&
name|isScriptable
condition|)
return|return
name|PropertyNotFound
return|;
if|if
condition|(
operator|!
operator|(
name|propFlags
operator|&
name|QDBusConnection
operator|::
name|ExportNonScriptableProperties
operator|)
operator|&&
operator|!
name|isScriptable
condition|)
return|return
name|PropertyNotFound
return|;
comment|// we found our property
comment|// do we have the right type?
name|int
name|id
init|=
name|mp
operator|.
name|type
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
name|QVariant
operator|::
name|UserType
condition|)
block|{
comment|// dynamic type
name|id
operator|=
name|qDBusNameToTypeId
argument_list|(
name|mp
operator|.
name|typeName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|==
operator|-
literal|1
condition|)
block|{
comment|// type not registered?
name|qWarning
argument_list|(
literal|"QDBusConnection: Unable to handle unregistered datatype '%s' for property '%s::%s'"
argument_list|,
name|mp
operator|.
name|typeName
argument_list|()
argument_list|,
name|mo
operator|->
name|className
argument_list|()
argument_list|,
name|property_name
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|PropertyWriteFailed
return|;
block|}
block|}
if|if
condition|(
name|id
operator|!=
literal|0xff
operator|&&
name|value
operator|.
name|userType
argument_list|()
operator|==
name|QDBusMetaTypeId
operator|::
name|argument
condition|)
block|{
comment|// we have to demarshall before writing
name|void
modifier|*
name|null
init|=
literal|0
decl_stmt|;
name|QVariant
name|other
argument_list|(
name|id
argument_list|,
name|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QDBusMetaType
operator|::
name|demarshall
argument_list|(
name|qvariant_cast
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|(
name|value
argument_list|)
argument_list|,
name|id
argument_list|,
name|other
operator|.
name|data
argument_list|()
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDBusConnection: type `%s' (%d) is not registered with QtDBus. "
literal|"Use qDBusRegisterMetaType to register it"
argument_list|,
name|mp
operator|.
name|typeName
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|PropertyWriteFailed
return|;
block|}
name|value
operator|=
name|other
expr_stmt|;
block|}
comment|// the property type here should match
return|return
name|mp
operator|.
name|write
argument_list|(
name|obj
argument_list|,
name|value
argument_list|)
condition|?
name|PropertyWriteSuccess
else|:
name|PropertyWriteFailed
return|;
block|}
end_function
begin_function
DECL|function|qDBusPropertySet
name|QDBusMessage
name|qDBusPropertySet
parameter_list|(
specifier|const
name|QDBusConnectionPrivate
operator|::
name|ObjectTreeNode
modifier|&
name|node
parameter_list|,
specifier|const
name|QDBusMessage
modifier|&
name|msg
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|msg
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
operator|!
name|node
operator|.
name|obj
operator|||
name|QThread
operator|::
name|currentThread
argument_list|()
operator|==
name|node
operator|.
name|obj
operator|->
name|thread
argument_list|()
argument_list|,
literal|"QDBusConnection: internal threading error"
argument_list|,
literal|"function called for an object that is in another thread!!"
argument_list|)
expr_stmt|;
name|QString
name|interface_name
init|=
name|msg
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QByteArray
name|property_name
init|=
name|msg
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|QVariant
name|value
init|=
name|qvariant_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|msg
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|variant
argument_list|()
decl_stmt|;
name|QDBusAdaptorConnector
modifier|*
name|connector
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|flags
operator|&
name|QDBusConnection
operator|::
name|ExportAdaptors
operator|&&
operator|(
name|connector
operator|=
name|qDBusFindAdaptorConnector
argument_list|(
name|node
operator|.
name|obj
argument_list|)
operator|)
condition|)
block|{
comment|// find the class that implements interface_name or try until we've found the property
comment|// in case of an empty interface
if|if
condition|(
name|interface_name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|QDBusAdaptorConnector
operator|::
name|AdaptorMap
operator|::
name|ConstIterator
name|it
init|=
name|connector
operator|->
name|adaptors
operator|.
name|constBegin
argument_list|()
init|,
name|end
init|=
name|connector
operator|->
name|adaptors
operator|.
name|constEnd
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
name|int
name|status
init|=
name|writeProperty
argument_list|(
name|it
operator|->
name|adaptor
argument_list|,
name|property_name
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|PropertyNotFound
condition|)
continue|continue;
return|return
name|propertyWriteReply
argument_list|(
name|msg
argument_list|,
name|interface_name
argument_list|,
name|property_name
argument_list|,
name|status
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|QDBusAdaptorConnector
operator|::
name|AdaptorMap
operator|::
name|ConstIterator
name|it
decl_stmt|;
name|it
operator|=
name|qLowerBound
argument_list|(
name|connector
operator|->
name|adaptors
operator|.
name|constBegin
argument_list|()
argument_list|,
name|connector
operator|->
name|adaptors
operator|.
name|constEnd
argument_list|()
argument_list|,
name|interface_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|!=
name|connector
operator|->
name|adaptors
operator|.
name|end
argument_list|()
operator|&&
name|interface_name
operator|==
name|QLatin1String
argument_list|(
name|it
operator|->
name|interface
argument_list|)
condition|)
block|{
return|return
name|propertyWriteReply
argument_list|(
name|msg
argument_list|,
name|interface_name
argument_list|,
name|property_name
argument_list|,
name|writeProperty
argument_list|(
name|it
operator|->
name|adaptor
argument_list|,
name|property_name
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
if|if
condition|(
name|node
operator|.
name|flags
operator|&
operator|(
name|QDBusConnection
operator|::
name|ExportScriptableProperties
operator||
name|QDBusConnection
operator|::
name|ExportNonScriptableProperties
operator|)
condition|)
block|{
comment|// try the object itself
name|bool
name|interfaceFound
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|interface_name
operator|.
name|isEmpty
argument_list|()
condition|)
name|interfaceFound
operator|=
name|qDBusInterfaceInObject
argument_list|(
name|node
operator|.
name|obj
argument_list|,
name|interface_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|interfaceFound
condition|)
block|{
return|return
name|propertyWriteReply
argument_list|(
name|msg
argument_list|,
name|interface_name
argument_list|,
name|property_name
argument_list|,
name|writeProperty
argument_list|(
name|node
operator|.
name|obj
argument_list|,
name|property_name
argument_list|,
name|value
argument_list|,
name|node
operator|.
name|flags
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|// the property was not found
if|if
condition|(
operator|!
name|interface_name
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|interfaceNotFoundError
argument_list|(
name|msg
argument_list|,
name|interface_name
argument_list|)
return|;
return|return
name|propertyWriteReply
argument_list|(
name|msg
argument_list|,
name|interface_name
argument_list|,
name|property_name
argument_list|,
name|PropertyNotFound
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// unite two QVariantMaps, but don't generate duplicate keys
end_comment
begin_function
DECL|function|operator +=
specifier|static
name|QVariantMap
modifier|&
name|operator
name|+=
parameter_list|(
name|QVariantMap
modifier|&
name|lhs
parameter_list|,
specifier|const
name|QVariantMap
modifier|&
name|rhs
parameter_list|)
block|{
name|QVariantMap
operator|::
name|ConstIterator
name|it
init|=
name|rhs
operator|.
name|constBegin
argument_list|()
decl_stmt|,
name|end
init|=
name|rhs
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
name|lhs
operator|.
name|insert
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|,
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|lhs
return|;
block|}
end_function
begin_function
DECL|function|readAllProperties
specifier|static
name|QVariantMap
name|readAllProperties
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|QVariantMap
name|result
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|mo
init|=
name|object
operator|->
name|metaObject
argument_list|()
decl_stmt|;
comment|// QObject has properties, so don't start from 0
for|for
control|(
name|int
name|i
init|=
name|QObject
operator|::
name|staticMetaObject
operator|.
name|propertyCount
argument_list|()
init|;
name|i
operator|<
name|mo
operator|->
name|propertyCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QMetaProperty
name|mp
init|=
name|mo
operator|->
name|property
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// is it readable?
if|if
condition|(
operator|!
name|mp
operator|.
name|isReadable
argument_list|()
condition|)
continue|continue;
comment|// is it a registered property?
name|int
name|typeId
init|=
name|qDBusNameToTypeId
argument_list|(
name|mp
operator|.
name|typeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|typeId
condition|)
continue|continue;
specifier|const
name|char
modifier|*
name|signature
init|=
name|QDBusMetaType
operator|::
name|typeToSignature
argument_list|(
name|typeId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|signature
condition|)
continue|continue;
comment|// is this property visible from the outside?
if|if
condition|(
operator|(
name|mp
operator|.
name|isScriptable
argument_list|()
operator|&&
name|flags
operator|&
name|QDBusConnection
operator|::
name|ExportScriptableProperties
operator|)
operator|||
operator|(
operator|!
name|mp
operator|.
name|isScriptable
argument_list|()
operator|&&
name|flags
operator|&
name|QDBusConnection
operator|::
name|ExportNonScriptableProperties
operator|)
condition|)
block|{
comment|// yes, it's visible
name|QVariant
name|value
init|=
name|mp
operator|.
name|read
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|isValid
argument_list|()
condition|)
name|result
operator|.
name|insert
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|mp
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|qDBusPropertyGetAll
name|QDBusMessage
name|qDBusPropertyGetAll
parameter_list|(
specifier|const
name|QDBusConnectionPrivate
operator|::
name|ObjectTreeNode
modifier|&
name|node
parameter_list|,
specifier|const
name|QDBusMessage
modifier|&
name|msg
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|msg
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
operator|!
name|node
operator|.
name|obj
operator|||
name|QThread
operator|::
name|currentThread
argument_list|()
operator|==
name|node
operator|.
name|obj
operator|->
name|thread
argument_list|()
argument_list|,
literal|"QDBusConnection: internal threading error"
argument_list|,
literal|"function called for an object that is in another thread!!"
argument_list|)
expr_stmt|;
name|QString
name|interface_name
init|=
name|msg
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|bool
name|interfaceFound
init|=
literal|false
decl_stmt|;
name|QVariantMap
name|result
decl_stmt|;
name|QDBusAdaptorConnector
modifier|*
name|connector
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|flags
operator|&
name|QDBusConnection
operator|::
name|ExportAdaptors
operator|&&
operator|(
name|connector
operator|=
name|qDBusFindAdaptorConnector
argument_list|(
name|node
operator|.
name|obj
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|interface_name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// iterate over all interfaces
for|for
control|(
name|QDBusAdaptorConnector
operator|::
name|AdaptorMap
operator|::
name|ConstIterator
name|it
init|=
name|connector
operator|->
name|adaptors
operator|.
name|constBegin
argument_list|()
init|,
name|end
init|=
name|connector
operator|->
name|adaptors
operator|.
name|constEnd
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
name|result
operator|+=
name|readAllProperties
argument_list|(
name|it
operator|->
name|adaptor
argument_list|,
name|QDBusConnection
operator|::
name|ExportAllProperties
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// find the class that implements interface_name
name|QDBusAdaptorConnector
operator|::
name|AdaptorMap
operator|::
name|ConstIterator
name|it
decl_stmt|;
name|it
operator|=
name|qLowerBound
argument_list|(
name|connector
operator|->
name|adaptors
operator|.
name|constBegin
argument_list|()
argument_list|,
name|connector
operator|->
name|adaptors
operator|.
name|constEnd
argument_list|()
argument_list|,
name|interface_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|!=
name|connector
operator|->
name|adaptors
operator|.
name|constEnd
argument_list|()
operator|&&
name|interface_name
operator|==
name|QLatin1String
argument_list|(
name|it
operator|->
name|interface
argument_list|)
condition|)
block|{
name|interfaceFound
operator|=
literal|true
expr_stmt|;
name|result
operator|=
name|readAllProperties
argument_list|(
name|it
operator|->
name|adaptor
argument_list|,
name|QDBusConnection
operator|::
name|ExportAllProperties
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|node
operator|.
name|flags
operator|&
name|QDBusConnection
operator|::
name|ExportAllProperties
operator|&&
operator|(
operator|!
name|interfaceFound
operator|||
name|interface_name
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
comment|// try the object itself
name|result
operator|+=
name|readAllProperties
argument_list|(
name|node
operator|.
name|obj
argument_list|,
name|node
operator|.
name|flags
argument_list|)
expr_stmt|;
name|interfaceFound
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|interfaceFound
operator|&&
operator|!
name|interface_name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// the interface was not found
return|return
name|interfaceNotFoundError
argument_list|(
name|msg
argument_list|,
name|interface_name
argument_list|)
return|;
block|}
return|return
name|msg
operator|.
name|createReply
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|result
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DBUS
end_comment
end_unit
