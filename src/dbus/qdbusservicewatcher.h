begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtDBus module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QDBUSSERVICEWATCHER_H
end_ifndef
begin_define
DECL|macro|QDBUSSERVICEWATCHER_H
define|#
directive|define
name|QDBUSSERVICEWATCHER_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qobject.h>
end_include
begin_include
include|#
directive|include
file|<QtDBus/qdbusmacros.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DBUS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_QOBJECT
argument_list|)
end_if
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QDBusConnection
name|class
name|QDBusConnection
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDBusServiceWatcherPrivate
name|class
name|QDBusServiceWatcherPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_DBUS_EXPORT
name|QDBusServiceWatcher
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
argument|QStringList watchedServices READ watchedServices WRITE setWatchedServices
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|WatchMode watchMode READ watchMode WRITE setWatchMode
argument_list|)
name|public
operator|:
expr|enum
name|WatchModeFlag
block|{
name|WatchForRegistration
operator|=
literal|0x01
block|,
name|WatchForUnregistration
operator|=
literal|0x02
block|,
name|WatchForOwnerChange
operator|=
literal|0x03
block|}
block|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|WatchMode
argument_list|,
argument|WatchModeFlag
argument_list|)
name|explicit
name|QDBusServiceWatcher
argument_list|(
name|QObject
operator|*
name|parent
operator|=
name|Q_NULLPTR
argument_list|)
block|;
name|QDBusServiceWatcher
argument_list|(
argument|const QString&service
argument_list|,
argument|const QDBusConnection&connection
argument_list|,
argument|WatchMode watchMode = WatchForOwnerChange
argument_list|,
argument|QObject *parent = Q_NULLPTR
argument_list|)
block|;
operator|~
name|QDBusServiceWatcher
argument_list|()
block|;
name|QStringList
name|watchedServices
argument_list|()
specifier|const
block|;
name|void
name|setWatchedServices
argument_list|(
specifier|const
name|QStringList
operator|&
name|services
argument_list|)
block|;
name|void
name|addWatchedService
argument_list|(
specifier|const
name|QString
operator|&
name|newService
argument_list|)
block|;
name|bool
name|removeWatchedService
argument_list|(
specifier|const
name|QString
operator|&
name|service
argument_list|)
block|;
name|WatchMode
name|watchMode
argument_list|()
specifier|const
block|;
name|void
name|setWatchMode
argument_list|(
argument|WatchMode mode
argument_list|)
block|;
name|QDBusConnection
name|connection
argument_list|()
specifier|const
block|;
name|void
name|setConnection
argument_list|(
specifier|const
name|QDBusConnection
operator|&
name|connection
argument_list|)
block|;
name|Q_SIGNALS
operator|:
name|void
name|serviceRegistered
argument_list|(
specifier|const
name|QString
operator|&
name|service
argument_list|)
block|;
name|void
name|serviceUnregistered
argument_list|(
specifier|const
name|QString
operator|&
name|service
argument_list|)
block|;
name|void
name|serviceOwnerChanged
argument_list|(
specifier|const
name|QString
operator|&
name|service
argument_list|,
specifier|const
name|QString
operator|&
name|oldOwner
argument_list|,
specifier|const
name|QString
operator|&
name|newOwner
argument_list|)
block|;
name|private
operator|:
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_serviceOwnerChanged(QString,QString,QString)
argument_list|)
name|Q_DISABLE_COPY
argument_list|(
argument|QDBusServiceWatcher
argument_list|)
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QDBusServiceWatcher
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QDBusServiceWatcher::WatchMode
argument_list|)
end_macro
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DBUS || QT_NO_QOBJECT
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QDBUSSERVICEWATCHER_H
end_comment
end_unit
