begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtDBus module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdbusxmlparser_p.h"
end_include
begin_include
include|#
directive|include
file|"qdbusinterface.h"
end_include
begin_include
include|#
directive|include
file|"qdbusinterface_p.h"
end_include
begin_include
include|#
directive|include
file|"qdbusconnection_p.h"
end_include
begin_include
include|#
directive|include
file|"qdbusutil_p.h"
end_include
begin_include
include|#
directive|include
file|<QtXml/qdom.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmap.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvariant.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qtextstream.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DBUS
end_ifndef
begin_comment
comment|//#define QDBUS_PARSER_DEBUG
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QDBUS_PARSER_DEBUG
end_ifdef
begin_define
DECL|macro|qDBusParserError
define|#
directive|define
name|qDBusParserError
value|qWarning
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|qDBusParserError
define|#
directive|define
name|qDBusParserError
value|if (true) {} else qDebug
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
specifier|static
name|QDBusIntrospection
operator|::
name|Annotations
DECL|function|parseAnnotations
name|parseAnnotations
parameter_list|(
specifier|const
name|QDomElement
modifier|&
name|elem
parameter_list|)
block|{
name|QDBusIntrospection
operator|::
name|Annotations
name|retval
decl_stmt|;
name|QDomNodeList
name|list
init|=
name|elem
operator|.
name|elementsByTagName
argument_list|(
name|QLatin1String
argument_list|(
literal|"annotation"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QDomElement
name|ann
init|=
name|list
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|toElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|ann
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
name|QString
name|name
init|=
name|ann
operator|.
name|attribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|,
name|value
init|=
name|ann
operator|.
name|attribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QDBusUtil
operator|::
name|isValidInterfaceName
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|qDBusParserError
argument_list|(
literal|"Invalid D-BUS annotation '%s' found while parsing introspection"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|retval
operator|.
name|insert
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
end_function
begin_function
specifier|static
name|QDBusIntrospection
operator|::
name|Arguments
DECL|function|parseArgs
name|parseArgs
parameter_list|(
specifier|const
name|QDomElement
modifier|&
name|elem
parameter_list|,
specifier|const
name|QLatin1String
modifier|&
name|direction
parameter_list|,
name|bool
name|acceptEmpty
parameter_list|)
block|{
name|QDBusIntrospection
operator|::
name|Arguments
name|retval
decl_stmt|;
name|QDomNodeList
name|list
init|=
name|elem
operator|.
name|elementsByTagName
argument_list|(
name|QLatin1String
argument_list|(
literal|"arg"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QDomElement
name|arg
init|=
name|list
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|toElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|arg
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|(
name|acceptEmpty
operator|&&
operator|!
name|arg
operator|.
name|hasAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"direction"
argument_list|)
argument_list|)
operator|)
operator|||
name|arg
operator|.
name|attribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"direction"
argument_list|)
argument_list|)
operator|==
name|direction
condition|)
block|{
name|QDBusIntrospection
operator|::
name|Argument
name|argData
decl_stmt|;
if|if
condition|(
name|arg
operator|.
name|hasAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
argument_list|)
condition|)
name|argData
operator|.
name|name
operator|=
name|arg
operator|.
name|attribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
comment|// can be empty
name|argData
operator|.
name|type
operator|=
name|arg
operator|.
name|attribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QDBusUtil
operator|::
name|isValidSingleSignature
argument_list|(
name|argData
operator|.
name|type
argument_list|)
condition|)
block|{
name|qDBusParserError
argument_list|(
literal|"Invalid D-BUS type signature '%s' found while parsing introspection"
argument_list|,
name|qPrintable
argument_list|(
name|argData
operator|.
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|retval
operator|<<
name|argData
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
end_function
begin_constructor
DECL|function|QDBusXmlParser
name|QDBusXmlParser
operator|::
name|QDBusXmlParser
parameter_list|(
specifier|const
name|QString
modifier|&
name|service
parameter_list|,
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
specifier|const
name|QString
modifier|&
name|xmlData
parameter_list|)
member_init_list|:
name|m_service
argument_list|(
name|service
argument_list|)
member_init_list|,
name|m_path
argument_list|(
name|path
argument_list|)
block|{
name|QDomDocument
name|doc
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|xmlData
argument_list|)
expr_stmt|;
name|m_node
operator|=
name|doc
operator|.
name|firstChildElement
argument_list|(
name|QLatin1String
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QDBusXmlParser
name|QDBusXmlParser
operator|::
name|QDBusXmlParser
parameter_list|(
specifier|const
name|QString
modifier|&
name|service
parameter_list|,
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
specifier|const
name|QDomElement
modifier|&
name|node
parameter_list|)
member_init_list|:
name|m_service
argument_list|(
name|service
argument_list|)
member_init_list|,
name|m_path
argument_list|(
name|path
argument_list|)
member_init_list|,
name|m_node
argument_list|(
name|node
argument_list|)
block|{ }
end_constructor
begin_function
name|QDBusIntrospection
operator|::
name|Interfaces
DECL|function|interfaces
name|QDBusXmlParser
operator|::
name|interfaces
parameter_list|()
specifier|const
block|{
name|QDBusIntrospection
operator|::
name|Interfaces
name|retval
decl_stmt|;
if|if
condition|(
name|m_node
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|retval
return|;
name|QDomNodeList
name|interfaceList
init|=
name|m_node
operator|.
name|elementsByTagName
argument_list|(
name|QLatin1String
argument_list|(
literal|"interface"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interfaceList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QDomElement
name|iface
init|=
name|interfaceList
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|toElement
argument_list|()
decl_stmt|;
name|QString
name|ifaceName
init|=
name|iface
operator|.
name|attribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|iface
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
comment|// for whatever reason
if|if
condition|(
operator|!
name|QDBusUtil
operator|::
name|isValidInterfaceName
argument_list|(
name|ifaceName
argument_list|)
condition|)
block|{
name|qDBusParserError
argument_list|(
literal|"Invalid D-BUS interface name '%s' found while parsing introspection"
argument_list|,
name|qPrintable
argument_list|(
name|ifaceName
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QDBusIntrospection
operator|::
name|Interface
modifier|*
name|ifaceData
init|=
operator|new
name|QDBusIntrospection
operator|::
name|Interface
decl_stmt|;
name|ifaceData
operator|->
name|name
operator|=
name|ifaceName
expr_stmt|;
block|{
comment|// save the data
name|QTextStream
name|ts
argument_list|(
operator|&
name|ifaceData
operator|->
name|introspection
argument_list|)
decl_stmt|;
name|iface
operator|.
name|save
argument_list|(
name|ts
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// parse annotations
name|ifaceData
operator|->
name|annotations
operator|=
name|parseAnnotations
argument_list|(
name|iface
argument_list|)
expr_stmt|;
comment|// parse methods
name|QDomNodeList
name|list
init|=
name|iface
operator|.
name|elementsByTagName
argument_list|(
name|QLatin1String
argument_list|(
literal|"method"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|QDomElement
name|method
init|=
name|list
operator|.
name|item
argument_list|(
name|j
argument_list|)
operator|.
name|toElement
argument_list|()
decl_stmt|;
name|QString
name|methodName
init|=
name|method
operator|.
name|attribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|QDBusUtil
operator|::
name|isValidMemberName
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
name|qDBusParserError
argument_list|(
literal|"Invalid D-BUS member name '%s' found in interface '%s' while parsing introspection"
argument_list|,
name|qPrintable
argument_list|(
name|methodName
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|ifaceName
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QDBusIntrospection
operator|::
name|Method
name|methodData
decl_stmt|;
name|methodData
operator|.
name|name
operator|=
name|methodName
expr_stmt|;
comment|// parse arguments
name|methodData
operator|.
name|inputArgs
operator|=
name|parseArgs
argument_list|(
name|method
argument_list|,
name|QLatin1String
argument_list|(
literal|"in"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|methodData
operator|.
name|outputArgs
operator|=
name|parseArgs
argument_list|(
name|method
argument_list|,
name|QLatin1String
argument_list|(
literal|"out"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|methodData
operator|.
name|annotations
operator|=
name|parseAnnotations
argument_list|(
name|method
argument_list|)
expr_stmt|;
comment|// add it
name|ifaceData
operator|->
name|methods
operator|.
name|insert
argument_list|(
name|methodName
argument_list|,
name|methodData
argument_list|)
expr_stmt|;
block|}
comment|// parse signals
name|list
operator|=
name|iface
operator|.
name|elementsByTagName
argument_list|(
name|QLatin1String
argument_list|(
literal|"signal"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|QDomElement
name|signal
init|=
name|list
operator|.
name|item
argument_list|(
name|j
argument_list|)
operator|.
name|toElement
argument_list|()
decl_stmt|;
name|QString
name|signalName
init|=
name|signal
operator|.
name|attribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|signal
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|QDBusUtil
operator|::
name|isValidMemberName
argument_list|(
name|signalName
argument_list|)
condition|)
block|{
name|qDBusParserError
argument_list|(
literal|"Invalid D-BUS member name '%s' found in interface '%s' while parsing introspection"
argument_list|,
name|qPrintable
argument_list|(
name|signalName
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|ifaceName
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QDBusIntrospection
operator|::
name|Signal
name|signalData
decl_stmt|;
name|signalData
operator|.
name|name
operator|=
name|signalName
expr_stmt|;
comment|// parse data
name|signalData
operator|.
name|outputArgs
operator|=
name|parseArgs
argument_list|(
name|signal
argument_list|,
name|QLatin1String
argument_list|(
literal|"out"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|signalData
operator|.
name|annotations
operator|=
name|parseAnnotations
argument_list|(
name|signal
argument_list|)
expr_stmt|;
comment|// add it
name|ifaceData
operator|->
name|signals_
operator|.
name|insert
argument_list|(
name|signalName
argument_list|,
name|signalData
argument_list|)
expr_stmt|;
block|}
comment|// parse properties
name|list
operator|=
name|iface
operator|.
name|elementsByTagName
argument_list|(
name|QLatin1String
argument_list|(
literal|"property"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|QDomElement
name|property
init|=
name|list
operator|.
name|item
argument_list|(
name|j
argument_list|)
operator|.
name|toElement
argument_list|()
decl_stmt|;
name|QString
name|propertyName
init|=
name|property
operator|.
name|attribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|QDBusUtil
operator|::
name|isValidMemberName
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|qDBusParserError
argument_list|(
literal|"Invalid D-BUS member name '%s' found in interface '%s' while parsing introspection"
argument_list|,
name|qPrintable
argument_list|(
name|propertyName
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|ifaceName
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QDBusIntrospection
operator|::
name|Property
name|propertyData
decl_stmt|;
comment|// parse data
name|propertyData
operator|.
name|name
operator|=
name|propertyName
expr_stmt|;
name|propertyData
operator|.
name|type
operator|=
name|property
operator|.
name|attribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|propertyData
operator|.
name|annotations
operator|=
name|parseAnnotations
argument_list|(
name|property
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QDBusUtil
operator|::
name|isValidSingleSignature
argument_list|(
name|propertyData
operator|.
name|type
argument_list|)
condition|)
block|{
comment|// cannot be!
name|qDBusParserError
argument_list|(
literal|"Invalid D-BUS type signature '%s' found in property '%s.%s' while parsing introspection"
argument_list|,
name|qPrintable
argument_list|(
name|propertyData
operator|.
name|type
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|ifaceName
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|propertyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QString
name|access
init|=
name|property
operator|.
name|attribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"access"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|access
operator|==
name|QLatin1String
argument_list|(
literal|"read"
argument_list|)
condition|)
name|propertyData
operator|.
name|access
operator|=
name|QDBusIntrospection
operator|::
name|Property
operator|::
name|Read
expr_stmt|;
elseif|else
if|if
condition|(
name|access
operator|==
name|QLatin1String
argument_list|(
literal|"write"
argument_list|)
condition|)
name|propertyData
operator|.
name|access
operator|=
name|QDBusIntrospection
operator|::
name|Property
operator|::
name|Write
expr_stmt|;
elseif|else
if|if
condition|(
name|access
operator|==
name|QLatin1String
argument_list|(
literal|"readwrite"
argument_list|)
condition|)
name|propertyData
operator|.
name|access
operator|=
name|QDBusIntrospection
operator|::
name|Property
operator|::
name|ReadWrite
expr_stmt|;
else|else
block|{
name|qDBusParserError
argument_list|(
literal|"Invalid D-BUS property access '%s' found in property '%s.%s' while parsing introspection"
argument_list|,
name|qPrintable
argument_list|(
name|access
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|ifaceName
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|propertyName
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
comment|// invalid one!
block|}
comment|// add it
name|ifaceData
operator|->
name|properties
operator|.
name|insert
argument_list|(
name|propertyName
argument_list|,
name|propertyData
argument_list|)
expr_stmt|;
block|}
comment|// add it
name|retval
operator|.
name|insert
argument_list|(
name|ifaceName
argument_list|,
name|QSharedDataPointer
argument_list|<
name|QDBusIntrospection
operator|::
name|Interface
argument_list|>
argument_list|(
name|ifaceData
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
end_function
begin_function
name|QSharedDataPointer
argument_list|<
name|QDBusIntrospection
operator|::
name|Object
argument_list|>
DECL|function|object
name|QDBusXmlParser
operator|::
name|object
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_node
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QSharedDataPointer
argument_list|<
name|QDBusIntrospection
operator|::
name|Object
argument_list|>
argument_list|()
return|;
name|QDBusIntrospection
operator|::
name|Object
modifier|*
name|objData
decl_stmt|;
name|objData
operator|=
operator|new
name|QDBusIntrospection
operator|::
name|Object
expr_stmt|;
name|objData
operator|->
name|service
operator|=
name|m_service
expr_stmt|;
name|objData
operator|->
name|path
operator|=
name|m_path
expr_stmt|;
comment|// check if we have anything to process
if|if
condition|(
name|objData
operator|->
name|introspection
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|m_node
operator|.
name|firstChild
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// yes, introspect this object
name|QTextStream
name|ts
argument_list|(
operator|&
name|objData
operator|->
name|introspection
argument_list|)
decl_stmt|;
name|m_node
operator|.
name|save
argument_list|(
name|ts
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QDomNodeList
name|objects
init|=
name|m_node
operator|.
name|elementsByTagName
argument_list|(
name|QLatin1String
argument_list|(
literal|"node"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objects
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QDomElement
name|obj
init|=
name|objects
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|toElement
argument_list|()
decl_stmt|;
name|QString
name|objName
init|=
name|obj
operator|.
name|attribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
comment|// for whatever reason
if|if
condition|(
operator|!
name|QDBusUtil
operator|::
name|isValidObjectPath
argument_list|(
name|m_path
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|objName
argument_list|)
condition|)
block|{
name|qDBusParserError
argument_list|(
literal|"Invalid D-BUS object path '%s/%s' found while parsing introspection"
argument_list|,
name|qPrintable
argument_list|(
name|m_path
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|objName
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|objData
operator|->
name|childObjects
operator|.
name|append
argument_list|(
name|objName
argument_list|)
expr_stmt|;
block|}
name|QDomNodeList
name|interfaceList
init|=
name|m_node
operator|.
name|elementsByTagName
argument_list|(
name|QLatin1String
argument_list|(
literal|"interface"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interfaceList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QDomElement
name|iface
init|=
name|interfaceList
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|toElement
argument_list|()
decl_stmt|;
name|QString
name|ifaceName
init|=
name|iface
operator|.
name|attribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|iface
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|QDBusUtil
operator|::
name|isValidInterfaceName
argument_list|(
name|ifaceName
argument_list|)
condition|)
block|{
name|qDBusParserError
argument_list|(
literal|"Invalid D-BUS interface name '%s' found while parsing introspection"
argument_list|,
name|qPrintable
argument_list|(
name|ifaceName
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|objData
operator|->
name|interfaces
operator|.
name|append
argument_list|(
name|ifaceName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|objData
operator|->
name|introspection
operator|=
name|QLatin1String
argument_list|(
literal|"<node/>\n"
argument_list|)
expr_stmt|;
block|}
name|QSharedDataPointer
argument_list|<
name|QDBusIntrospection
operator|::
name|Object
argument_list|>
name|retval
decl_stmt|;
name|retval
operator|=
name|objData
expr_stmt|;
return|return
name|retval
return|;
block|}
end_function
begin_function
name|QSharedDataPointer
argument_list|<
name|QDBusIntrospection
operator|::
name|ObjectTree
argument_list|>
DECL|function|objectTree
name|QDBusXmlParser
operator|::
name|objectTree
parameter_list|()
specifier|const
block|{
name|QSharedDataPointer
argument_list|<
name|QDBusIntrospection
operator|::
name|ObjectTree
argument_list|>
name|retval
decl_stmt|;
if|if
condition|(
name|m_node
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|retval
return|;
name|retval
operator|=
operator|new
name|QDBusIntrospection
operator|::
name|ObjectTree
expr_stmt|;
name|retval
operator|->
name|service
operator|=
name|m_service
expr_stmt|;
name|retval
operator|->
name|path
operator|=
name|m_path
expr_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|retval
operator|->
name|introspection
argument_list|)
decl_stmt|;
name|m_node
operator|.
name|save
argument_list|(
name|ts
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// interfaces are easy:
name|retval
operator|->
name|interfaceData
operator|=
name|interfaces
argument_list|()
expr_stmt|;
name|retval
operator|->
name|interfaces
operator|=
name|retval
operator|->
name|interfaceData
operator|.
name|keys
argument_list|()
expr_stmt|;
comment|// sub-objects are slightly more difficult:
name|QDomNodeList
name|objects
init|=
name|m_node
operator|.
name|elementsByTagName
argument_list|(
name|QLatin1String
argument_list|(
literal|"node"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objects
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QDomElement
name|obj
init|=
name|objects
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|toElement
argument_list|()
decl_stmt|;
name|QString
name|objName
init|=
name|obj
operator|.
name|attribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|.
name|isNull
argument_list|()
operator|||
name|objName
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
comment|// for whatever reason
comment|// check if we have anything to process
if|if
condition|(
operator|!
name|obj
operator|.
name|firstChild
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// yes, introspect this object
name|QString
name|xml
decl_stmt|;
name|QTextStream
name|ts2
argument_list|(
operator|&
name|xml
argument_list|)
decl_stmt|;
name|obj
operator|.
name|save
argument_list|(
name|ts2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// parse it
name|QString
name|objAbsName
init|=
name|m_path
decl_stmt|;
if|if
condition|(
operator|!
name|objAbsName
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|objAbsName
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
name|objAbsName
operator|+=
name|objName
expr_stmt|;
name|QDBusXmlParser
name|parser
argument_list|(
name|m_service
argument_list|,
name|objAbsName
argument_list|,
name|obj
argument_list|)
decl_stmt|;
name|retval
operator|->
name|childObjectData
operator|.
name|insert
argument_list|(
name|objName
argument_list|,
name|parser
operator|.
name|objectTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|retval
operator|->
name|childObjects
operator|<<
name|objName
expr_stmt|;
block|}
return|return
name|QSharedDataPointer
argument_list|<
name|QDBusIntrospection
operator|::
name|ObjectTree
argument_list|>
argument_list|(
name|retval
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DBUS
end_comment
end_unit
