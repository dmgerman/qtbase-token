begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtDBus module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdbusargument_p.h"
end_include
begin_include
include|#
directive|include
file|"qdbusconnection.h"
end_include
begin_include
include|#
directive|include
file|"qdbusmetatype_p.h"
end_include
begin_include
include|#
directive|include
file|"qdbusutil_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DBUS
end_ifndef
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|qIterAppend
specifier|static
name|void
name|qIterAppend
parameter_list|(
name|DBusMessageIter
modifier|*
name|it
parameter_list|,
name|QByteArray
modifier|*
name|ba
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|arg
parameter_list|)
block|{
if|if
condition|(
name|ba
condition|)
operator|*
name|ba
operator|+=
name|char
argument_list|(
name|type
argument_list|)
expr_stmt|;
else|else
name|q_dbus_message_iter_append_basic
argument_list|(
name|it
argument_list|,
name|type
argument_list|,
name|arg
argument_list|)
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~QDBusMarshaller
name|QDBusMarshaller
operator|::
name|~
name|QDBusMarshaller
parameter_list|()
block|{
name|close
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|currentSignature
specifier|inline
name|QString
name|QDBusMarshaller
operator|::
name|currentSignature
parameter_list|()
block|{
if|if
condition|(
name|message
condition|)
return|return
name|QString
operator|::
name|fromUtf8
argument_list|(
name|q_dbus_message_get_signature
argument_list|(
name|message
argument_list|)
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|append
specifier|inline
name|void
name|QDBusMarshaller
operator|::
name|append
parameter_list|(
name|uchar
name|arg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|skipSignature
condition|)
name|qIterAppend
argument_list|(
operator|&
name|iterator
argument_list|,
name|ba
argument_list|,
name|DBUS_TYPE_BYTE
argument_list|,
operator|&
name|arg
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|append
specifier|inline
name|void
name|QDBusMarshaller
operator|::
name|append
parameter_list|(
name|bool
name|arg
parameter_list|)
block|{
name|dbus_bool_t
name|cast
init|=
name|arg
decl_stmt|;
if|if
condition|(
operator|!
name|skipSignature
condition|)
name|qIterAppend
argument_list|(
operator|&
name|iterator
argument_list|,
name|ba
argument_list|,
name|DBUS_TYPE_BOOLEAN
argument_list|,
operator|&
name|cast
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|append
specifier|inline
name|void
name|QDBusMarshaller
operator|::
name|append
parameter_list|(
name|short
name|arg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|skipSignature
condition|)
name|qIterAppend
argument_list|(
operator|&
name|iterator
argument_list|,
name|ba
argument_list|,
name|DBUS_TYPE_INT16
argument_list|,
operator|&
name|arg
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|append
specifier|inline
name|void
name|QDBusMarshaller
operator|::
name|append
parameter_list|(
name|ushort
name|arg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|skipSignature
condition|)
name|qIterAppend
argument_list|(
operator|&
name|iterator
argument_list|,
name|ba
argument_list|,
name|DBUS_TYPE_UINT16
argument_list|,
operator|&
name|arg
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|append
specifier|inline
name|void
name|QDBusMarshaller
operator|::
name|append
parameter_list|(
name|int
name|arg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|skipSignature
condition|)
name|qIterAppend
argument_list|(
operator|&
name|iterator
argument_list|,
name|ba
argument_list|,
name|DBUS_TYPE_INT32
argument_list|,
operator|&
name|arg
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|append
specifier|inline
name|void
name|QDBusMarshaller
operator|::
name|append
parameter_list|(
name|uint
name|arg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|skipSignature
condition|)
name|qIterAppend
argument_list|(
operator|&
name|iterator
argument_list|,
name|ba
argument_list|,
name|DBUS_TYPE_UINT32
argument_list|,
operator|&
name|arg
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|append
specifier|inline
name|void
name|QDBusMarshaller
operator|::
name|append
parameter_list|(
name|qlonglong
name|arg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|skipSignature
condition|)
name|qIterAppend
argument_list|(
operator|&
name|iterator
argument_list|,
name|ba
argument_list|,
name|DBUS_TYPE_INT64
argument_list|,
operator|&
name|arg
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|append
specifier|inline
name|void
name|QDBusMarshaller
operator|::
name|append
parameter_list|(
name|qulonglong
name|arg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|skipSignature
condition|)
name|qIterAppend
argument_list|(
operator|&
name|iterator
argument_list|,
name|ba
argument_list|,
name|DBUS_TYPE_UINT64
argument_list|,
operator|&
name|arg
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|append
specifier|inline
name|void
name|QDBusMarshaller
operator|::
name|append
parameter_list|(
name|double
name|arg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|skipSignature
condition|)
name|qIterAppend
argument_list|(
operator|&
name|iterator
argument_list|,
name|ba
argument_list|,
name|DBUS_TYPE_DOUBLE
argument_list|,
operator|&
name|arg
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|append
name|void
name|QDBusMarshaller
operator|::
name|append
parameter_list|(
specifier|const
name|QString
modifier|&
name|arg
parameter_list|)
block|{
name|QByteArray
name|data
init|=
name|arg
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
specifier|const
name|char
modifier|*
name|cdata
init|=
name|data
operator|.
name|constData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|skipSignature
condition|)
name|qIterAppend
argument_list|(
operator|&
name|iterator
argument_list|,
name|ba
argument_list|,
name|DBUS_TYPE_STRING
argument_list|,
operator|&
name|cdata
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|append
specifier|inline
name|void
name|QDBusMarshaller
operator|::
name|append
parameter_list|(
specifier|const
name|QDBusObjectPath
modifier|&
name|arg
parameter_list|)
block|{
name|QByteArray
name|data
init|=
name|arg
operator|.
name|path
argument_list|()
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ba
operator|&&
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|error
argument_list|(
name|QLatin1String
argument_list|(
literal|"Invalid object path passed in arguments"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|char
modifier|*
name|cdata
init|=
name|data
operator|.
name|constData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|skipSignature
condition|)
name|qIterAppend
argument_list|(
operator|&
name|iterator
argument_list|,
name|ba
argument_list|,
name|DBUS_TYPE_OBJECT_PATH
argument_list|,
operator|&
name|cdata
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|append
specifier|inline
name|void
name|QDBusMarshaller
operator|::
name|append
parameter_list|(
specifier|const
name|QDBusSignature
modifier|&
name|arg
parameter_list|)
block|{
name|QByteArray
name|data
init|=
name|arg
operator|.
name|signature
argument_list|()
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ba
operator|&&
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|error
argument_list|(
name|QLatin1String
argument_list|(
literal|"Invalid signature passed in arguments"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|char
modifier|*
name|cdata
init|=
name|data
operator|.
name|constData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|skipSignature
condition|)
name|qIterAppend
argument_list|(
operator|&
name|iterator
argument_list|,
name|ba
argument_list|,
name|DBUS_TYPE_SIGNATURE
argument_list|,
operator|&
name|cdata
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|append
specifier|inline
name|void
name|QDBusMarshaller
operator|::
name|append
parameter_list|(
specifier|const
name|QDBusUnixFileDescriptor
modifier|&
name|arg
parameter_list|)
block|{
name|int
name|fd
init|=
name|arg
operator|.
name|fileDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ba
operator|&&
name|fd
operator|==
operator|-
literal|1
condition|)
block|{
name|error
argument_list|(
name|QLatin1String
argument_list|(
literal|"Invalid file descriptor passed in arguments"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|skipSignature
condition|)
name|qIterAppend
argument_list|(
operator|&
name|iterator
argument_list|,
name|ba
argument_list|,
name|DBUS_TYPE_UNIX_FD
argument_list|,
operator|&
name|fd
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|append
specifier|inline
name|void
name|QDBusMarshaller
operator|::
name|append
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|arg
parameter_list|)
block|{
if|if
condition|(
name|ba
condition|)
block|{
if|if
condition|(
operator|!
name|skipSignature
condition|)
operator|*
name|ba
operator|+=
name|DBUS_TYPE_ARRAY_AS_STRING
name|DBUS_TYPE_BYTE_AS_STRING
expr_stmt|;
return|return;
block|}
specifier|const
name|char
modifier|*
name|cdata
init|=
name|arg
operator|.
name|constData
argument_list|()
decl_stmt|;
name|DBusMessageIter
name|subiterator
decl_stmt|;
name|q_dbus_message_iter_open_container
argument_list|(
operator|&
name|iterator
argument_list|,
name|DBUS_TYPE_ARRAY
argument_list|,
name|DBUS_TYPE_BYTE_AS_STRING
argument_list|,
operator|&
name|subiterator
argument_list|)
expr_stmt|;
name|q_dbus_message_iter_append_fixed_array
argument_list|(
operator|&
name|subiterator
argument_list|,
name|DBUS_TYPE_BYTE
argument_list|,
operator|&
name|cdata
argument_list|,
name|arg
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|q_dbus_message_iter_close_container
argument_list|(
operator|&
name|iterator
argument_list|,
operator|&
name|subiterator
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|append
specifier|inline
name|bool
name|QDBusMarshaller
operator|::
name|append
parameter_list|(
specifier|const
name|QDBusVariant
modifier|&
name|arg
parameter_list|)
block|{
if|if
condition|(
name|ba
condition|)
block|{
if|if
condition|(
operator|!
name|skipSignature
condition|)
operator|*
name|ba
operator|+=
name|DBUS_TYPE_VARIANT_AS_STRING
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|const
name|QVariant
modifier|&
name|value
init|=
name|arg
operator|.
name|variant
argument_list|()
decl_stmt|;
name|int
name|id
init|=
name|value
operator|.
name|userType
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
name|QVariant
operator|::
name|Invalid
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDBusMarshaller: cannot add a null QDBusVariant"
argument_list|)
expr_stmt|;
name|error
argument_list|(
name|QLatin1String
argument_list|(
literal|"Variant containing QVariant::Invalid passed in arguments"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QByteArray
name|tmpSignature
decl_stmt|;
specifier|const
name|char
modifier|*
name|signature
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|id
operator|==
name|QDBusMetaTypeId
operator|::
name|argument
argument_list|()
condition|)
block|{
comment|// take the signature from the QDBusArgument object we're marshalling
name|tmpSignature
operator|=
name|qvariant_cast
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|(
name|value
argument_list|)
operator|.
name|currentSignature
argument_list|()
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
name|signature
operator|=
name|tmpSignature
operator|.
name|constData
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// take the signatuer from the metatype we're marshalling
name|signature
operator|=
name|QDBusMetaType
operator|::
name|typeToSignature
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|signature
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDBusMarshaller: type `%s' (%d) is not registered with D-BUS. "
literal|"Use qDBusRegisterMetaType to register it"
argument_list|,
name|QMetaType
operator|::
name|typeName
argument_list|(
name|id
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|error
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Unregistered type %1 passed in arguments"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|QMetaType
operator|::
name|typeName
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QDBusMarshaller
name|sub
argument_list|(
name|capabilities
argument_list|)
decl_stmt|;
name|open
argument_list|(
name|sub
argument_list|,
name|DBUS_TYPE_VARIANT
argument_list|,
name|signature
argument_list|)
expr_stmt|;
name|bool
name|isOk
init|=
name|sub
operator|.
name|appendVariantInternal
argument_list|(
name|value
argument_list|)
decl_stmt|;
comment|// don't call sub.close(): it auto-closes
return|return
name|isOk
return|;
block|}
end_function
begin_function
DECL|function|append
specifier|inline
name|void
name|QDBusMarshaller
operator|::
name|append
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|arg
parameter_list|)
block|{
if|if
condition|(
name|ba
condition|)
block|{
if|if
condition|(
operator|!
name|skipSignature
condition|)
operator|*
name|ba
operator|+=
name|DBUS_TYPE_ARRAY_AS_STRING
name|DBUS_TYPE_STRING_AS_STRING
expr_stmt|;
return|return;
block|}
name|QDBusMarshaller
name|sub
argument_list|(
name|capabilities
argument_list|)
decl_stmt|;
name|open
argument_list|(
name|sub
argument_list|,
name|DBUS_TYPE_ARRAY
argument_list|,
name|DBUS_TYPE_STRING_AS_STRING
argument_list|)
expr_stmt|;
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|arg
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QStringList
operator|::
name|ConstIterator
name|end
init|=
name|arg
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
name|sub
operator|.
name|append
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
comment|// don't call sub.close(): it auto-closes
block|}
end_function
begin_function
DECL|function|beginStructure
specifier|inline
name|QDBusMarshaller
modifier|*
name|QDBusMarshaller
operator|::
name|beginStructure
parameter_list|()
block|{
return|return
name|beginCommon
argument_list|(
name|DBUS_TYPE_STRUCT
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|beginArray
specifier|inline
name|QDBusMarshaller
modifier|*
name|QDBusMarshaller
operator|::
name|beginArray
parameter_list|(
name|int
name|id
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|signature
init|=
name|QDBusMetaType
operator|::
name|typeToSignature
argument_list|(
name|QVariant
operator|::
name|Type
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|signature
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDBusMarshaller: type `%s' (%d) is not registered with D-BUS. "
literal|"Use qDBusRegisterMetaType to register it"
argument_list|,
name|QMetaType
operator|::
name|typeName
argument_list|(
name|id
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|error
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Unregistered type %1 passed in arguments"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|QMetaType
operator|::
name|typeName
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
return|return
name|beginCommon
argument_list|(
name|DBUS_TYPE_ARRAY
argument_list|,
name|signature
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|beginMap
specifier|inline
name|QDBusMarshaller
modifier|*
name|QDBusMarshaller
operator|::
name|beginMap
parameter_list|(
name|int
name|kid
parameter_list|,
name|int
name|vid
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|ksignature
init|=
name|QDBusMetaType
operator|::
name|typeToSignature
argument_list|(
name|QVariant
operator|::
name|Type
argument_list|(
name|kid
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ksignature
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDBusMarshaller: type `%s' (%d) is not registered with D-BUS. "
literal|"Use qDBusRegisterMetaType to register it"
argument_list|,
name|QMetaType
operator|::
name|typeName
argument_list|(
name|kid
argument_list|)
argument_list|,
name|kid
argument_list|)
expr_stmt|;
name|error
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Unregistered type %1 passed in arguments"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|QMetaType
operator|::
name|typeName
argument_list|(
name|kid
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
name|ksignature
index|[
literal|1
index|]
operator|!=
literal|0
operator|||
operator|!
name|QDBusUtil
operator|::
name|isValidBasicType
argument_list|(
operator|*
name|ksignature
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDBusMarshaller: type '%s' (%d) cannot be used as the key type in a D-BUS map."
argument_list|,
name|QMetaType
operator|::
name|typeName
argument_list|(
name|kid
argument_list|)
argument_list|,
name|kid
argument_list|)
expr_stmt|;
name|error
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Type %1 passed in arguments cannot be used as a key in a map"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|QMetaType
operator|::
name|typeName
argument_list|(
name|kid
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|const
name|char
modifier|*
name|vsignature
init|=
name|QDBusMetaType
operator|::
name|typeToSignature
argument_list|(
name|QVariant
operator|::
name|Type
argument_list|(
name|vid
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|vsignature
condition|)
block|{
specifier|const
name|char
modifier|*
name|typeName
init|=
name|QMetaType
operator|::
name|typeName
argument_list|(
name|vid
argument_list|)
decl_stmt|;
name|qWarning
argument_list|(
literal|"QDBusMarshaller: type `%s' (%d) is not registered with D-BUS. "
literal|"Use qDBusRegisterMetaType to register it"
argument_list|,
name|typeName
argument_list|,
name|vid
argument_list|)
expr_stmt|;
name|error
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Unregistered type %1 passed in arguments"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|typeName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|QByteArray
name|signature
decl_stmt|;
name|signature
operator|=
name|DBUS_DICT_ENTRY_BEGIN_CHAR_AS_STRING
expr_stmt|;
name|signature
operator|+=
name|ksignature
expr_stmt|;
name|signature
operator|+=
name|vsignature
expr_stmt|;
name|signature
operator|+=
name|DBUS_DICT_ENTRY_END_CHAR_AS_STRING
expr_stmt|;
return|return
name|beginCommon
argument_list|(
name|DBUS_TYPE_ARRAY
argument_list|,
name|signature
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|beginMapEntry
specifier|inline
name|QDBusMarshaller
modifier|*
name|QDBusMarshaller
operator|::
name|beginMapEntry
parameter_list|()
block|{
return|return
name|beginCommon
argument_list|(
name|DBUS_TYPE_DICT_ENTRY
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|open
name|void
name|QDBusMarshaller
operator|::
name|open
parameter_list|(
name|QDBusMarshaller
modifier|&
name|sub
parameter_list|,
name|int
name|code
parameter_list|,
specifier|const
name|char
modifier|*
name|signature
parameter_list|)
block|{
name|sub
operator|.
name|parent
operator|=
name|this
expr_stmt|;
name|sub
operator|.
name|ba
operator|=
name|ba
expr_stmt|;
name|sub
operator|.
name|ok
operator|=
literal|true
expr_stmt|;
name|sub
operator|.
name|capabilities
operator|=
name|capabilities
expr_stmt|;
name|sub
operator|.
name|skipSignature
operator|=
name|skipSignature
expr_stmt|;
if|if
condition|(
name|ba
condition|)
block|{
if|if
condition|(
operator|!
name|skipSignature
condition|)
block|{
switch|switch
condition|(
name|code
condition|)
block|{
case|case
name|DBUS_TYPE_ARRAY
case|:
operator|*
name|ba
operator|+=
name|char
argument_list|(
name|code
argument_list|)
expr_stmt|;
operator|*
name|ba
operator|+=
name|signature
expr_stmt|;
comment|// fall through
case|case
name|DBUS_TYPE_DICT_ENTRY
case|:
name|sub
operator|.
name|closeCode
operator|=
literal|0
expr_stmt|;
name|sub
operator|.
name|skipSignature
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|DBUS_TYPE_STRUCT
case|:
operator|*
name|ba
operator|+=
name|DBUS_STRUCT_BEGIN_CHAR
expr_stmt|;
name|sub
operator|.
name|closeCode
operator|=
name|DBUS_STRUCT_END_CHAR
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|q_dbus_message_iter_open_container
argument_list|(
operator|&
name|iterator
argument_list|,
name|code
argument_list|,
name|signature
argument_list|,
operator|&
name|sub
operator|.
name|iterator
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|beginCommon
name|QDBusMarshaller
modifier|*
name|QDBusMarshaller
operator|::
name|beginCommon
parameter_list|(
name|int
name|code
parameter_list|,
specifier|const
name|char
modifier|*
name|signature
parameter_list|)
block|{
name|QDBusMarshaller
modifier|*
name|d
init|=
operator|new
name|QDBusMarshaller
argument_list|(
name|capabilities
argument_list|)
decl_stmt|;
name|open
argument_list|(
operator|*
name|d
argument_list|,
name|code
argument_list|,
name|signature
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_function
DECL|function|endStructure
specifier|inline
name|QDBusMarshaller
modifier|*
name|QDBusMarshaller
operator|::
name|endStructure
parameter_list|()
block|{
return|return
name|endCommon
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|endArray
specifier|inline
name|QDBusMarshaller
modifier|*
name|QDBusMarshaller
operator|::
name|endArray
parameter_list|()
block|{
return|return
name|endCommon
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|endMap
specifier|inline
name|QDBusMarshaller
modifier|*
name|QDBusMarshaller
operator|::
name|endMap
parameter_list|()
block|{
return|return
name|endCommon
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|endMapEntry
specifier|inline
name|QDBusMarshaller
modifier|*
name|QDBusMarshaller
operator|::
name|endMapEntry
parameter_list|()
block|{
return|return
name|endCommon
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|endCommon
name|QDBusMarshaller
modifier|*
name|QDBusMarshaller
operator|::
name|endCommon
parameter_list|()
block|{
name|QDBusMarshaller
modifier|*
name|retval
init|=
name|parent
decl_stmt|;
operator|delete
name|this
expr_stmt|;
return|return
name|retval
return|;
block|}
end_function
begin_function
DECL|function|close
name|void
name|QDBusMarshaller
operator|::
name|close
parameter_list|()
block|{
if|if
condition|(
name|ba
condition|)
block|{
if|if
condition|(
operator|!
name|skipSignature
operator|&&
name|closeCode
condition|)
operator|*
name|ba
operator|+=
name|closeCode
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parent
condition|)
block|{
name|q_dbus_message_iter_close_container
argument_list|(
operator|&
name|parent
operator|->
name|iterator
argument_list|,
operator|&
name|iterator
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|error
name|void
name|QDBusMarshaller
operator|::
name|error
parameter_list|(
specifier|const
name|QString
modifier|&
name|msg
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|parent
condition|)
name|parent
operator|->
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
else|else
name|errorString
operator|=
name|msg
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendVariantInternal
name|bool
name|QDBusMarshaller
operator|::
name|appendVariantInternal
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|arg
parameter_list|)
block|{
name|int
name|id
init|=
name|arg
operator|.
name|userType
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
name|QVariant
operator|::
name|Invalid
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDBusMarshaller: cannot add an invalid QVariant"
argument_list|)
expr_stmt|;
name|error
argument_list|(
name|QLatin1String
argument_list|(
literal|"Variant containing QVariant::Invalid passed in arguments"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// intercept QDBusArgument parameters here
if|if
condition|(
name|id
operator|==
name|QDBusMetaTypeId
operator|::
name|argument
argument_list|()
condition|)
block|{
name|QDBusArgument
name|dbusargument
init|=
name|qvariant_cast
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|(
name|arg
argument_list|)
decl_stmt|;
name|QDBusArgumentPrivate
modifier|*
name|d
init|=
name|QDBusArgumentPrivate
operator|::
name|d
argument_list|(
name|dbusargument
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|message
condition|)
return|return
literal|false
return|;
comment|// can't append this one...
name|QDBusDemarshaller
name|demarshaller
argument_list|(
name|capabilities
argument_list|)
decl_stmt|;
name|demarshaller
operator|.
name|message
operator|=
name|q_dbus_message_ref
argument_list|(
name|d
operator|->
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|direction
operator|==
name|Demarshalling
condition|)
block|{
comment|// it's demarshalling; just copy
name|demarshaller
operator|.
name|iterator
operator|=
cast|static_cast
argument_list|<
name|QDBusDemarshaller
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|iterator
expr_stmt|;
block|}
else|else
block|{
comment|// it's marshalling; start over
if|if
condition|(
operator|!
name|q_dbus_message_iter_init
argument_list|(
name|demarshaller
operator|.
name|message
argument_list|,
operator|&
name|demarshaller
operator|.
name|iterator
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// error!
block|}
return|return
name|appendCrossMarshalling
argument_list|(
operator|&
name|demarshaller
argument_list|)
return|;
block|}
specifier|const
name|char
modifier|*
name|signature
init|=
name|QDBusMetaType
operator|::
name|typeToSignature
argument_list|(
name|QVariant
operator|::
name|Type
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|signature
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDBusMarshaller: type `%s' (%d) is not registered with D-BUS. "
literal|"Use qDBusRegisterMetaType to register it"
argument_list|,
name|QMetaType
operator|::
name|typeName
argument_list|(
name|id
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|error
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Unregistered type %1 passed in arguments"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|QMetaType
operator|::
name|typeName
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
switch|switch
condition|(
operator|*
name|signature
condition|)
block|{
ifdef|#
directive|ifdef
name|__OPTIMIZE__
case|case
name|DBUS_TYPE_BYTE
case|:
case|case
name|DBUS_TYPE_INT16
case|:
case|case
name|DBUS_TYPE_UINT16
case|:
case|case
name|DBUS_TYPE_INT32
case|:
case|case
name|DBUS_TYPE_UINT32
case|:
case|case
name|DBUS_TYPE_INT64
case|:
case|case
name|DBUS_TYPE_UINT64
case|:
case|case
name|DBUS_TYPE_DOUBLE
case|:
name|qIterAppend
argument_list|(
operator|&
name|iterator
argument_list|,
name|ba
argument_list|,
operator|*
name|signature
argument_list|,
name|arg
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|DBUS_TYPE_BOOLEAN
case|:
name|append
argument_list|(
name|arg
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
else|#
directive|else
case|case
name|DBUS_TYPE_BYTE
case|:
name|append
argument_list|(
name|qvariant_cast
argument_list|<
name|uchar
argument_list|>
argument_list|(
name|arg
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|DBUS_TYPE_BOOLEAN
case|:
name|append
argument_list|(
name|arg
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|DBUS_TYPE_INT16
case|:
name|append
argument_list|(
name|qvariant_cast
argument_list|<
name|short
argument_list|>
argument_list|(
name|arg
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|DBUS_TYPE_UINT16
case|:
name|append
argument_list|(
name|qvariant_cast
argument_list|<
name|ushort
argument_list|>
argument_list|(
name|arg
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|DBUS_TYPE_INT32
case|:
name|append
argument_list|(
cast|static_cast
argument_list|<
name|dbus_int32_t
argument_list|>
argument_list|(
name|arg
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|DBUS_TYPE_UINT32
case|:
name|append
argument_list|(
cast|static_cast
argument_list|<
name|dbus_uint32_t
argument_list|>
argument_list|(
name|arg
operator|.
name|toUInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|DBUS_TYPE_INT64
case|:
name|append
argument_list|(
name|arg
operator|.
name|toLongLong
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|DBUS_TYPE_UINT64
case|:
name|append
argument_list|(
name|arg
operator|.
name|toULongLong
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|DBUS_TYPE_DOUBLE
case|:
name|append
argument_list|(
name|arg
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
endif|#
directive|endif
case|case
name|DBUS_TYPE_STRING
case|:
name|append
argument_list|(
name|arg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|DBUS_TYPE_OBJECT_PATH
case|:
name|append
argument_list|(
name|qvariant_cast
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|(
name|arg
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|DBUS_TYPE_SIGNATURE
case|:
name|append
argument_list|(
name|qvariant_cast
argument_list|<
name|QDBusSignature
argument_list|>
argument_list|(
name|arg
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
comment|// compound types:
case|case
name|DBUS_TYPE_VARIANT
case|:
comment|// nested QVariant
return|return
name|append
argument_list|(
name|qvariant_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|arg
argument_list|)
argument_list|)
return|;
case|case
name|DBUS_TYPE_ARRAY
case|:
comment|// could be many things
comment|// find out what kind of array it is
switch|switch
condition|(
name|arg
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|StringList
case|:
name|append
argument_list|(
name|arg
operator|.
name|toStringList
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|ByteArray
case|:
name|append
argument_list|(
name|arg
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
default|default:
empty_stmt|;
comment|// fall through
block|}
comment|// fall through
case|case
name|DBUS_TYPE_STRUCT
case|:
case|case
name|DBUS_STRUCT_BEGIN_CHAR
case|:
return|return
name|appendRegisteredType
argument_list|(
name|arg
argument_list|)
return|;
case|case
name|DBUS_TYPE_DICT_ENTRY
case|:
case|case
name|DBUS_DICT_ENTRY_BEGIN_CHAR
case|:
name|qFatal
argument_list|(
literal|"QDBusMarshaller::appendVariantInternal got a DICT_ENTRY!"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
case|case
name|DBUS_TYPE_UNIX_FD
case|:
if|if
condition|(
name|capabilities
operator|&
name|QDBusConnection
operator|::
name|UnixFileDescriptorPassing
operator|||
name|ba
condition|)
block|{
name|append
argument_list|(
name|qvariant_cast
argument_list|<
name|QDBusUnixFileDescriptor
argument_list|>
argument_list|(
name|arg
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// fall through
default|default:
name|qWarning
argument_list|(
literal|"QDBusMarshaller::appendVariantInternal: Found unknown D-BUS type '%s'"
argument_list|,
name|signature
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|appendRegisteredType
name|bool
name|QDBusMarshaller
operator|::
name|appendRegisteredType
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|arg
parameter_list|)
block|{
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
comment|// reference up
name|QDBusArgument
name|self
argument_list|(
name|QDBusArgumentPrivate
operator|::
name|create
argument_list|(
name|this
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QDBusMetaType
operator|::
name|marshall
argument_list|(
name|self
argument_list|,
name|arg
operator|.
name|userType
argument_list|()
argument_list|,
name|arg
operator|.
name|constData
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|appendCrossMarshalling
name|bool
name|QDBusMarshaller
operator|::
name|appendCrossMarshalling
parameter_list|(
name|QDBusDemarshaller
modifier|*
name|demarshaller
parameter_list|)
block|{
name|int
name|code
init|=
name|q_dbus_message_iter_get_arg_type
argument_list|(
operator|&
name|demarshaller
operator|->
name|iterator
argument_list|)
decl_stmt|;
if|if
condition|(
name|QDBusUtil
operator|::
name|isValidBasicType
argument_list|(
name|code
argument_list|)
condition|)
block|{
comment|// easy: just append
comment|// do exactly like the D-BUS docs suggest
comment|// (see apidocs for q_dbus_message_iter_get_basic)
name|qlonglong
name|value
decl_stmt|;
name|q_dbus_message_iter_get_basic
argument_list|(
operator|&
name|demarshaller
operator|->
name|iterator
argument_list|,
operator|&
name|value
argument_list|)
expr_stmt|;
name|q_dbus_message_iter_next
argument_list|(
operator|&
name|demarshaller
operator|->
name|iterator
argument_list|)
expr_stmt|;
name|q_dbus_message_iter_append_basic
argument_list|(
operator|&
name|iterator
argument_list|,
name|code
argument_list|,
operator|&
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|code
operator|==
name|DBUS_TYPE_ARRAY
condition|)
block|{
name|int
name|element
init|=
name|q_dbus_message_iter_get_element_type
argument_list|(
operator|&
name|demarshaller
operator|->
name|iterator
argument_list|)
decl_stmt|;
if|if
condition|(
name|QDBusUtil
operator|::
name|isValidFixedType
argument_list|(
name|element
argument_list|)
operator|&&
name|element
operator|!=
name|DBUS_TYPE_UNIX_FD
condition|)
block|{
comment|// another optimization: fixed size arrays
comment|// code is exactly like QDBusDemarshaller::toByteArray
name|DBusMessageIter
name|sub
decl_stmt|;
name|q_dbus_message_iter_recurse
argument_list|(
operator|&
name|demarshaller
operator|->
name|iterator
argument_list|,
operator|&
name|sub
argument_list|)
expr_stmt|;
name|q_dbus_message_iter_next
argument_list|(
operator|&
name|demarshaller
operator|->
name|iterator
argument_list|)
expr_stmt|;
name|int
name|len
decl_stmt|;
name|void
modifier|*
name|data
decl_stmt|;
name|q_dbus_message_iter_get_fixed_array
argument_list|(
operator|&
name|sub
argument_list|,
operator|&
name|data
argument_list|,
operator|&
name|len
argument_list|)
expr_stmt|;
name|char
name|signature
index|[
literal|2
index|]
init|=
block|{
name|char
argument_list|(
name|element
argument_list|)
block|,
literal|0
block|}
decl_stmt|;
name|q_dbus_message_iter_open_container
argument_list|(
operator|&
name|iterator
argument_list|,
name|DBUS_TYPE_ARRAY
argument_list|,
name|signature
argument_list|,
operator|&
name|sub
argument_list|)
expr_stmt|;
name|q_dbus_message_iter_append_fixed_array
argument_list|(
operator|&
name|sub
argument_list|,
name|element
argument_list|,
operator|&
name|data
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|q_dbus_message_iter_close_container
argument_list|(
operator|&
name|iterator
argument_list|,
operator|&
name|sub
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// We have to recurse
name|QDBusDemarshaller
modifier|*
name|drecursed
init|=
name|demarshaller
operator|->
name|beginCommon
argument_list|()
decl_stmt|;
name|QDBusMarshaller
name|mrecursed
argument_list|(
name|capabilities
argument_list|)
decl_stmt|;
comment|// create on the stack makes it autoclose
name|QByteArray
name|subSignature
decl_stmt|;
specifier|const
name|char
modifier|*
name|sig
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|code
operator|==
name|DBUS_TYPE_VARIANT
operator|||
name|code
operator|==
name|DBUS_TYPE_ARRAY
condition|)
block|{
name|subSignature
operator|=
name|drecursed
operator|->
name|currentSignature
argument_list|()
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|subSignature
operator|.
name|isEmpty
argument_list|()
condition|)
name|sig
operator|=
name|subSignature
operator|.
name|constData
argument_list|()
expr_stmt|;
block|}
name|open
argument_list|(
name|mrecursed
argument_list|,
name|code
argument_list|,
name|sig
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|drecursed
operator|->
name|atEnd
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|mrecursed
operator|.
name|appendCrossMarshalling
argument_list|(
name|drecursed
argument_list|)
condition|)
block|{
operator|delete
name|drecursed
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
operator|delete
name|drecursed
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DBUS
end_comment
end_unit
