begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtDBus module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QDBUSERROR_H
end_ifndef
begin_define
DECL|macro|QDBUSERROR_H
define|#
directive|define
name|QDBUSERROR_H
end_define
begin_include
include|#
directive|include
file|<QtDBus/qdbusmacros.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DBUS
end_ifndef
begin_macro
name|QT_BEGIN_HEADER
end_macro
begin_struct_decl
struct_decl|struct
name|DBusError
struct_decl|;
end_struct_decl
begin_function
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
parameter_list|(
name|DBus
parameter_list|)
name|class
name|QDBusMessage
decl_stmt|;
name|class
name|Q_DBUS_EXPORT
name|QDBusError
decl_stmt|{ public:     enum ErrorType
block|{
name|NoError
operator|=
literal|0
operator|,
name|Other
operator|=
literal|1
operator|,
name|Failed
operator|,
name|NoMemory
operator|,
name|ServiceUnknown
operator|,
name|NoReply
operator|,
name|BadAddress
operator|,
name|NotSupported
operator|,
name|LimitsExceeded
operator|,
name|AccessDenied
operator|,
name|NoServer
operator|,
name|Timeout
operator|,
name|NoNetwork
operator|,
name|AddressInUse
operator|,
name|Disconnected
operator|,
name|InvalidArgs
operator|,
name|UnknownMethod
operator|,
name|TimedOut
operator|,
name|InvalidSignature
operator|,
name|UnknownInterface
operator|,
name|InternalError
operator|,
name|UnknownObject
operator|,
name|InvalidService
operator|,
name|InvalidObjectPath
operator|,
name|InvalidInterface
operator|,
name|InvalidMember
operator|,
ifndef|#
directive|ifndef
name|Q_QDOC
comment|// don't use this one!
name|LastErrorType
operator|=
name|InvalidMember
endif|#
directive|endif
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|QDBusError
argument_list|(
specifier|const
name|DBusError
operator|*
name|error
operator|=
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QDBusError
argument_list|(
specifier|const
name|QDBusMessage
operator|&
name|msg
argument_list|)
expr_stmt|;
end_expr_stmt
begin_macro
name|QDBusError
argument_list|(
argument|ErrorType error
argument_list|,
argument|const QString&message
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|QDBusError
argument_list|(
specifier|const
name|QDBusError
operator|&
name|other
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QDBusError
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QDBusError
operator|&
name|other
operator|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|ErrorType
name|type
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|name
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|message
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|bool
name|isValid
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|static
name|QString
name|errorString
parameter_list|(
name|ErrorType
name|error
parameter_list|)
function_decl|;
end_function_decl
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|ErrorType
name|code
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|msg
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|nm
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|void
modifier|*
name|unused
decl_stmt|;
end_decl_stmt
begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_DBUS_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QDBusError
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DBUS
end_comment
begin_endif
endif|#
directive|endif
end_endif
end_unit
