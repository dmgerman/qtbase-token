begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtDBus module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QDBUSEXTRATYPES_H
end_ifndef
begin_define
DECL|macro|QDBUSEXTRATYPES_H
define|#
directive|define
name|QDBUSEXTRATYPES_H
end_define
begin_comment
comment|// define some useful types for D-BUS
end_comment
begin_include
include|#
directive|include
file|<QtCore/qvariant.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_include
include|#
directive|include
file|<QtDBus/qdbusmacros.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DBUS
end_ifndef
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|DBus
argument_list|)
comment|// defined in qhash.cpp
name|Q_CORE_EXPORT
name|uint
name|qHash
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_DBUS_EXPORT
name|QDBusObjectPath
range|:
name|private
name|QString
block|{
name|public
operator|:
specifier|inline
name|QDBusObjectPath
argument_list|()
block|{ }
specifier|inline
name|explicit
name|QDBusObjectPath
argument_list|(
specifier|const
name|char
operator|*
name|path
argument_list|)
block|;
specifier|inline
name|explicit
name|QDBusObjectPath
argument_list|(
specifier|const
name|QLatin1String
operator|&
name|path
argument_list|)
block|;
specifier|inline
name|explicit
name|QDBusObjectPath
argument_list|(
specifier|const
name|QString
operator|&
name|path
argument_list|)
block|;
specifier|inline
name|QDBusObjectPath
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QDBusObjectPath
operator|&
name|path
operator|)
block|;
specifier|inline
name|void
name|setPath
argument_list|(
specifier|const
name|QString
operator|&
name|path
argument_list|)
block|;
specifier|inline
name|QString
name|path
argument_list|()
specifier|const
block|{
return|return
operator|*
name|this
return|;
block|}
name|private
operator|:
name|void
name|check
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|function|QDBusObjectPath
specifier|inline
name|QDBusObjectPath
operator|::
name|QDBusObjectPath
argument_list|(
specifier|const
name|char
operator|*
name|objectPath
argument_list|)
operator|:
name|QString
argument_list|(
argument|QString::fromLatin1(objectPath)
argument_list|)
block|{
name|check
argument_list|()
block|; }
DECL|function|QDBusObjectPath
specifier|inline
name|QDBusObjectPath
operator|::
name|QDBusObjectPath
argument_list|(
specifier|const
name|QLatin1String
operator|&
name|objectPath
argument_list|)
operator|:
name|QString
argument_list|(
argument|objectPath
argument_list|)
block|{
name|check
argument_list|()
block|; }
DECL|function|QDBusObjectPath
specifier|inline
name|QDBusObjectPath
operator|::
name|QDBusObjectPath
argument_list|(
specifier|const
name|QString
operator|&
name|objectPath
argument_list|)
operator|:
name|QString
argument_list|(
argument|objectPath
argument_list|)
block|{
name|check
argument_list|()
block|; }
DECL|member|operator
specifier|inline
name|QDBusObjectPath
operator|&
name|QDBusObjectPath
operator|::
name|operator
operator|=
operator|(
specifier|const
name|QDBusObjectPath
operator|&
name|_path
operator|)
block|{
name|QString
operator|::
name|operator
operator|=
operator|(
name|_path
operator|)
block|;
name|check
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|void
name|QDBusObjectPath
operator|::
name|setPath
argument_list|(
argument|const QString&objectPath
argument_list|)
block|{
name|QString
operator|::
name|operator
operator|=
operator|(
name|objectPath
operator|)
block|;
name|check
argument_list|()
block|; }
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QDBusObjectPath
operator|&
name|lhs
operator|,
specifier|const
name|QDBusObjectPath
operator|&
name|rhs
operator|)
block|{
return|return
name|lhs
operator|.
name|path
argument_list|()
operator|==
name|rhs
operator|.
name|path
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QDBusObjectPath
operator|&
name|lhs
operator|,
specifier|const
name|QDBusObjectPath
operator|&
name|rhs
operator|)
block|{
return|return
name|lhs
operator|.
name|path
argument_list|()
operator|!=
name|rhs
operator|.
name|path
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|QDBusObjectPath
operator|&
name|lhs
operator|,
specifier|const
name|QDBusObjectPath
operator|&
name|rhs
operator|)
block|{
return|return
name|lhs
operator|.
name|path
argument_list|()
operator|<
name|rhs
operator|.
name|path
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|uint
name|qHash
parameter_list|(
specifier|const
name|QDBusObjectPath
modifier|&
name|objectPath
parameter_list|)
block|{
return|return
name|qHash
argument_list|(
name|objectPath
operator|.
name|path
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
name|class
name|Q_DBUS_EXPORT
name|QDBusSignature
range|:
name|private
name|QString
block|{
name|public
operator|:
specifier|inline
name|QDBusSignature
argument_list|()
block|{ }
specifier|inline
name|explicit
name|QDBusSignature
argument_list|(
specifier|const
name|char
operator|*
name|signature
argument_list|)
block|;
specifier|inline
name|explicit
name|QDBusSignature
argument_list|(
specifier|const
name|QLatin1String
operator|&
name|signature
argument_list|)
block|;
specifier|inline
name|explicit
name|QDBusSignature
argument_list|(
specifier|const
name|QString
operator|&
name|signature
argument_list|)
block|;
specifier|inline
name|QDBusSignature
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QDBusSignature
operator|&
name|signature
operator|)
block|;
specifier|inline
name|void
name|setSignature
argument_list|(
specifier|const
name|QString
operator|&
name|signature
argument_list|)
block|;
specifier|inline
name|QString
name|signature
argument_list|()
specifier|const
block|{
return|return
operator|*
name|this
return|;
block|}
name|private
operator|:
name|void
name|check
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|function|QDBusSignature
specifier|inline
name|QDBusSignature
operator|::
name|QDBusSignature
argument_list|(
specifier|const
name|char
operator|*
name|dBusSignature
argument_list|)
operator|:
name|QString
argument_list|(
argument|QString::fromAscii(dBusSignature)
argument_list|)
block|{
name|check
argument_list|()
block|; }
DECL|function|QDBusSignature
specifier|inline
name|QDBusSignature
operator|::
name|QDBusSignature
argument_list|(
specifier|const
name|QLatin1String
operator|&
name|dBusSignature
argument_list|)
operator|:
name|QString
argument_list|(
argument|dBusSignature
argument_list|)
block|{
name|check
argument_list|()
block|; }
DECL|function|QDBusSignature
specifier|inline
name|QDBusSignature
operator|::
name|QDBusSignature
argument_list|(
specifier|const
name|QString
operator|&
name|dBusSignature
argument_list|)
operator|:
name|QString
argument_list|(
argument|dBusSignature
argument_list|)
block|{
name|check
argument_list|()
block|; }
DECL|member|operator
specifier|inline
name|QDBusSignature
operator|&
name|QDBusSignature
operator|::
name|operator
operator|=
operator|(
specifier|const
name|QDBusSignature
operator|&
name|dbusSignature
operator|)
block|{
name|QString
operator|::
name|operator
operator|=
operator|(
name|dbusSignature
operator|)
block|;
name|check
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|void
name|QDBusSignature
operator|::
name|setSignature
argument_list|(
argument|const QString&dBusSignature
argument_list|)
block|{
name|QString
operator|::
name|operator
operator|=
operator|(
name|dBusSignature
operator|)
block|;
name|check
argument_list|()
block|; }
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QDBusSignature
operator|&
name|lhs
operator|,
specifier|const
name|QDBusSignature
operator|&
name|rhs
operator|)
block|{
return|return
name|lhs
operator|.
name|signature
argument_list|()
operator|==
name|rhs
operator|.
name|signature
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QDBusSignature
operator|&
name|lhs
operator|,
specifier|const
name|QDBusSignature
operator|&
name|rhs
operator|)
block|{
return|return
name|lhs
operator|.
name|signature
argument_list|()
operator|!=
name|rhs
operator|.
name|signature
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|QDBusSignature
operator|&
name|lhs
operator|,
specifier|const
name|QDBusSignature
operator|&
name|rhs
operator|)
block|{
return|return
name|lhs
operator|.
name|signature
argument_list|()
operator|<
name|rhs
operator|.
name|signature
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|uint
name|qHash
parameter_list|(
specifier|const
name|QDBusSignature
modifier|&
name|signature
parameter_list|)
block|{
return|return
name|qHash
argument_list|(
name|signature
operator|.
name|signature
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
name|class
name|QDBusVariant
range|:
name|private
name|QVariant
block|{
name|public
operator|:
specifier|inline
name|QDBusVariant
argument_list|()
block|{ }
specifier|inline
name|explicit
name|QDBusVariant
argument_list|(
specifier|const
name|QVariant
operator|&
name|variant
argument_list|)
block|;
specifier|inline
name|void
name|setVariant
argument_list|(
specifier|const
name|QVariant
operator|&
name|variant
argument_list|)
block|;
specifier|inline
name|QVariant
name|variant
argument_list|()
specifier|const
block|{
return|return
operator|*
name|this
return|;
block|}
expr|}
block|;
DECL|function|QDBusVariant
specifier|inline
name|QDBusVariant
operator|::
name|QDBusVariant
argument_list|(
specifier|const
name|QVariant
operator|&
name|dBusVariant
argument_list|)
operator|:
name|QVariant
argument_list|(
argument|dBusVariant
argument_list|)
block|{ }
DECL|function|setVariant
specifier|inline
name|void
name|QDBusVariant
operator|::
name|setVariant
argument_list|(
argument|const QVariant&dBusVariant
argument_list|)
block|{
name|QVariant
operator|::
name|operator
operator|=
operator|(
name|dBusVariant
operator|)
block|; }
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QDBusVariant
operator|&
name|v1
expr|,
specifier|const
name|QDBusVariant
operator|&
name|v2
operator|)
block|{
return|return
name|v1
operator|.
name|variant
argument_list|()
operator|==
name|v2
operator|.
name|variant
argument_list|()
return|;
block|}
name|QT_END_NAMESPACE
name|Q_DECLARE_METATYPE
argument_list|(
argument|QDBusVariant
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
argument|QDBusObjectPath
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QDBusObjectPath>
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
argument|QDBusSignature
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QDBusSignature>
argument_list|)
name|QT_END_HEADER
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DBUS
end_comment
begin_endif
endif|#
directive|endif
end_endif
end_unit
