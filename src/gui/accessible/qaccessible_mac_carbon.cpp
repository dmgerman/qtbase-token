begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_function_decl
specifier|static
name|OSStatus
name|applicationEventHandler
parameter_list|(
name|EventHandlerCallRef
name|next_ref
parameter_list|,
name|EventRef
name|event
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|applicationEventHandlerUPP
specifier|static
name|EventHandlerUPP
name|applicationEventHandlerUPP
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|application_events
specifier|static
name|EventTypeSpec
name|application_events
index|[]
init|=
block|{
block|{
name|kEventClassAccessibility
block|,
name|kEventAccessibleGetChildAtPoint
block|}
block|,
block|{
name|kEventClassAccessibility
block|,
name|kEventAccessibleGetNamedAttribute
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|kObjectQtAccessibility
specifier|static
name|CFStringRef
name|kObjectQtAccessibility
init|=
name|CFSTR
argument_list|(
literal|"com.trolltech.qt.accessibility"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|objectCreateEventHandlerUPP
specifier|static
name|EventHandlerUPP
name|objectCreateEventHandlerUPP
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|objectCreateEvents
specifier|static
name|EventTypeSpec
name|objectCreateEvents
index|[]
init|=
block|{
block|{
name|kEventClassHIObject
block|,
name|kEventHIObjectConstruct
block|}
block|,
block|{
name|kEventClassHIObject
block|,
name|kEventHIObjectInitialize
block|}
block|,
block|{
name|kEventClassHIObject
block|,
name|kEventHIObjectDestruct
block|}
block|,
block|{
name|kEventClassHIObject
block|,
name|kEventHIObjectPrintDebugInfo
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|static
name|OSStatus
name|accessibilityEventHandler
parameter_list|(
name|EventHandlerCallRef
name|next_ref
parameter_list|,
name|EventRef
name|event
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|accessibilityEventHandlerUPP
specifier|static
name|EventHandlerUPP
name|accessibilityEventHandlerUPP
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|accessibilityEvents
specifier|static
name|EventTypeSpec
name|accessibilityEvents
index|[]
init|=
block|{
block|{
name|kEventClassAccessibility
block|,
name|kEventAccessibleGetChildAtPoint
block|}
block|,
block|{
name|kEventClassAccessibility
block|,
name|kEventAccessibleGetFocusedChild
block|}
block|,
block|{
name|kEventClassAccessibility
block|,
name|kEventAccessibleGetAllAttributeNames
block|}
block|,
block|{
name|kEventClassAccessibility
block|,
name|kEventAccessibleGetNamedAttribute
block|}
block|,
block|{
name|kEventClassAccessibility
block|,
name|kEventAccessibleSetNamedAttribute
block|}
block|,
block|{
name|kEventClassAccessibility
block|,
name|kEventAccessibleIsNamedAttributeSettable
block|}
block|,
block|{
name|kEventClassAccessibility
block|,
name|kEventAccessibleGetAllActionNames
block|}
block|,
block|{
name|kEventClassAccessibility
block|,
name|kEventAccessiblePerformNamedAction
block|}
block|,
block|{
name|kEventClassAccessibility
block|,
name|kEventAccessibleGetNamedActionDescription
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|installAcessibilityEventHandler
specifier|static
name|void
name|installAcessibilityEventHandler
parameter_list|(
name|HIObjectRef
name|hiObject
parameter_list|)
block|{
if|if
condition|(
operator|!
name|accessibilityEventHandlerUPP
condition|)
name|accessibilityEventHandlerUPP
operator|=
name|NewEventHandlerUPP
argument_list|(
name|accessibilityEventHandler
argument_list|)
expr_stmt|;
name|InstallHIObjectEventHandler
argument_list|(
name|hiObject
argument_list|,
name|accessibilityEventHandlerUPP
argument_list|,
name|GetEventTypeCount
argument_list|(
name|accessibilityEvents
argument_list|)
argument_list|,
name|accessibilityEvents
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|objectCreateEventHandler
specifier|static
name|OSStatus
name|objectCreateEventHandler
parameter_list|(
name|EventHandlerCallRef
name|next_ref
parameter_list|,
name|EventRef
name|event
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|data
argument_list|)
name|Q_UNUSED
argument_list|(
argument|event
argument_list|)
name|Q_UNUSED
argument_list|(
argument|next_ref
argument_list|)
return|return
name|noErr
return|;
block|}
end_function
begin_function
DECL|function|registerQtAccessibilityHIObjectSubclass
specifier|static
name|void
name|registerQtAccessibilityHIObjectSubclass
parameter_list|()
block|{
if|if
condition|(
operator|!
name|objectCreateEventHandlerUPP
condition|)
name|objectCreateEventHandlerUPP
operator|=
name|NewEventHandlerUPP
argument_list|(
name|objectCreateEventHandler
argument_list|)
expr_stmt|;
name|OSStatus
name|err
init|=
name|HIObjectRegisterSubclass
argument_list|(
name|kObjectQtAccessibility
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|objectCreateEventHandlerUPP
argument_list|,
name|GetEventTypeCount
argument_list|(
name|objectCreateEvents
argument_list|)
argument_list|,
name|objectCreateEvents
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|&&
name|err
operator|!=
name|hiObjectClassExistsErr
condition|)
name|qWarning
argument_list|(
literal|"qaccessible_mac internal error: Could not register accessibility HIObject subclass"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|installApplicationEventhandler
specifier|static
name|void
name|installApplicationEventhandler
parameter_list|()
block|{
if|if
condition|(
operator|!
name|applicationEventHandlerUPP
condition|)
name|applicationEventHandlerUPP
operator|=
name|NewEventHandlerUPP
argument_list|(
name|applicationEventHandler
argument_list|)
expr_stmt|;
name|OSStatus
name|err
init|=
name|InstallApplicationEventHandler
argument_list|(
name|applicationEventHandlerUPP
argument_list|,
name|GetEventTypeCount
argument_list|(
name|application_events
argument_list|)
argument_list|,
name|application_events
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|&&
name|err
operator|!=
name|eventHandlerAlreadyInstalledErr
condition|)
name|qWarning
argument_list|(
literal|"qaccessible_mac internal error: Could not install application accessibility event handler"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeEventhandler
specifier|static
name|void
name|removeEventhandler
parameter_list|(
name|EventHandlerUPP
name|eventHandler
parameter_list|)
block|{
if|if
condition|(
name|eventHandler
condition|)
block|{
name|DisposeEventHandlerUPP
argument_list|(
name|eventHandler
argument_list|)
expr_stmt|;
name|eventHandler
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
end_unit
