begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qaccessible.h"
end_include
begin_include
include|#
directive|include
file|"qaccessiblecache_p.h"
end_include
begin_include
include|#
directive|include
file|"qaccessibleplugin.h"
end_include
begin_include
include|#
directive|include
file|"qaccessibleobject.h"
end_include
begin_include
include|#
directive|include
file|"qaccessiblebridge.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qtextboundaryfinder.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qclipboard.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qguiapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qtextcursor.h>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformaccessibility.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformintegration.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmetaobject.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qhash.h>
end_include
begin_include
include|#
directive|include
file|<private/qfactoryloader_p.h>
end_include
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
comment|/*!     \class QAccessible     \brief The QAccessible class provides enums and static functions     related to accessibility.      \ingroup accessibility     \inmodule QtGui      This class is part of \l {Accessibility for QWidget Applications}.      Accessible applications can be used by people who are not able to     use applications by conventional means.      The functions in this class are used for communication between     accessible applications (also called AT Servers) and     accessibility tools (AT Clients), such as screen readers and     braille displays. Clients and servers communicate in the following way:      \list     \li  \e{AT Servers} notify the clients about events through calls to the         updateAccessibility() function.      \li  \e{AT Clients} request information about the objects in the server.         The QAccessibleInterface class is the core interface, and encapsulates         this information in a pure virtual API. Implementations of the interface         are provided by Qt through the queryAccessibleInterface() API.     \endlist      The communication between servers and clients is initialized by     the setRootObject() function. Function pointers can be installed     to replace or extend the default behavior of the static functions     in QAccessible.      Qt supports Microsoft Active Accessibility (MSAA), Mac OS X     Accessibility, and the Unix/X11 AT-SPI standard. Other backends     can be supported using QAccessibleBridge.      In the Unix/X11 AT-SPI implementation, applications become accessible     when two conditions are met:     \list     \li org.a11y.Status.IsEnabled DBus property is true     \li org.a11y.Status.ScreenReaderEnabled DBus property is true     \endlist     An alternative to setting the DBus AT-SPI properties is to set     the QT_LINUX_ACCESSIBILITY_ALWAYS_ON environment variable.      In addition to QAccessible's static functions, Qt offers one     generic interface, QAccessibleInterface, that can be used to wrap     all widgets and objects (e.g., QPushButton). This single     interface provides all the metadata necessary for the assistive     technologies. Qt provides implementations of this interface for     its built-in widgets as plugins.      When you develop custom widgets, you can create custom subclasses     of QAccessibleInterface and distribute them as plugins (using     QAccessiblePlugin) or compile them into the application.     Likewise, Qt's predefined accessibility support can be built as     plugin (the default) or directly into the Qt library. The main     advantage of using plugins is that the accessibility classes are     only loaded into memory if they are actually used; they don't     slow down the common case where no assistive technology is being     used.      Qt also includes two convenience classes, QAccessibleObject and     QAccessibleWidget, that inherit from QAccessibleInterface and     provide the lowest common denominator of metadata (e.g., widget     geometry, window title, basic help text). You can use them as     base classes when wrapping your custom QObject or QWidget     subclasses.      \sa QAccessibleInterface */
comment|/*!     \class QAccessible::State      \inmodule QtGui      This structure defines bit flags that indicate     the state of an accessible object. The values are:      \value active                  The object is the active window or the active sub-element in a container (that would get focus when focusing the container).     \value adjustable              The object represents an adjustable value, e.g. sliders.     \value animated                The object's appearance changes frequently.     \value busy                    The object cannot accept input at the moment.     \value checkable               The object is checkable.     \value checked                 The object's check box is checked.     \value checkStateMixed         The third state of checkboxes (half checked in tri-state check boxes).     \value collapsed               The object is collapsed, e.g. a closed listview item, or an iconified window.     \value defaultButton           The object represents the default button in a dialog.     \value defunct                 The object no longer exists.     \value editable                The object has a text carret (and often implements the text interface).     \value expandable              The object is expandable, mostly used for cells in a tree view.     \value expanded                The object is expanded, currently its children are visible.     \value extSelectable           The object supports extended selection.     \value focusable               The object can receive focus. Only objects in the active window can receive focus.     \value focused                 The object has keyboard focus.     \value hasPopup                The object opens a popup.     \value hotTracked              The object's appearance is sensitive to the mouse cursor position.     \value invalid                 The object is no longer valid (because it has been deleted).     \value invalidEntry            Input validation current input invalid.     \value invisible               The object is not visible to the user.     \value linked                  The object is linked to another object, e.g. a hyperlink.     \value marqueed                The object displays scrolling contents, e.g. a log view.     \value modal                   The object blocks input from other objects.     \value movable                 The object can be moved.     \value multiLine               The object has multiple lines of text (word wrap), as opposed to a single line.     \value multiSelectable         The object supports multiple selected items.     \value offscreen               The object is clipped by the visible area. Objects that are off screen are also invisible.     \value passwordEdit            The object is a password field, e.g. a line edit for entering a Password.     \value playsSound              The object produces sound when interacted with.     \value pressed                 The object is pressed.     \value readOnly                The object can usually be edited, but is explicitly set to read-only.     \value searchEdit              The object is a line edit that is the input for search queries.     \value selectable              The object is selectable.     \value selectableText          The object has text which can be selected. This is different from selectable which refers to the object's children.     \value selected                The object is selected, this is independent of text selection.     \value selfVoicing             The object describes itself through speech or sound.     \value sizeable                The object can be resized, e.g. top-level windows.     \value summaryElement          The object summarizes the state of the window and should be treated with priority.     \value supportsAutoCompletion  The object has auto-completion, for example in line edits or combo boxes.     \value traversed               The object is linked and has been visited.     \value updatesFrequently       The object changes frequently and needs to be refreshed when accessing it.     \value disabled                The object is unavailable to the user, e.g. a disabled widget.      Implementations of QAccessibleInterface::state() return a combination     of these flags. */
comment|/*!     \fn QAccessible::State::State()      Constructs a new QAccessible::State with all states set to false. */
comment|/*!     \enum QAccessible::Event      This enum type defines accessible event types.      \omitvalue InvalidEvent                 Internal: Used when creating subclasses of QAccessibleEvent.     \value AcceleratorChanged               The keyboard accelerator for an action has been changed.     \value ActionChanged                    An action has been changed.     \value ActiveDescendantChanged     \value Alert                            A system alert (e.g., a message from a QMessageBox)     \value AttributeChanged     \value ContextHelpEnd                   Context help (QWhatsThis) for an object is finished.     \value ContextHelpStart                 Context help (QWhatsThis) for an object is initiated.     \value DefaultActionChanged             The default QAccessible::Action for the accessible                                             object has changed.     \value DescriptionChanged               The object's QAccessible::Description changed.     \value DialogEnd                        A dialog (QDialog) has been hidden     \value DialogStart                      A dialog (QDialog) has been set visible.     \value DocumentContentChanged           The contents of a text document have changed.     \value DocumentLoadComplete             A document has been loaded.     \value DocumentLoadStopped              A document load has been stopped.     \value DocumentReload                   A document reload has been initiated.     \value DragDropEnd                      A drag and drop operation is about to finished.     \value DragDropStart                    A drag and drop operation is about to be initiated.     \value Focus                            An object has gained keyboard focus.     \value ForegroundChanged                A window has been activated (i.e., a new window has                                             gained focus on the desktop).     \value HelpChanged                      The QAccessible::Help text property of an object has                                             changed.     \value HyperlinkEndIndexChanged         The end position of the display text for a hypertext                                             link has changed.     \value HyperlinkNumberOfAnchorsChanged  The number of anchors in a hypertext link has changed,                                             perhaps because the display text has been split to                                             provide more than one link.     \value HyperlinkSelectedLinkChanged     The link for the selected hypertext link has changed.     \value HyperlinkStartIndexChanged       The start position of the display text for a hypertext                                             link has changed.     \value HypertextChanged                 The display text for a hypertext link has changed.     \value HypertextLinkActivated           A hypertext link has been activated, perhaps by being                                             clicked or via a key press.     \value HypertextLinkSelected            A hypertext link has been selected.     \value HypertextNLinksChanged     \value LocationChanged                  An object's location on the screen has changed.     \value MenuCommand                      A menu item is triggered.     \value MenuEnd                          A menu has been closed (Qt uses PopupMenuEnd for all                                             menus).     \value MenuStart                        A menu has been opened on the menubar (Qt uses                                             PopupMenuStart for all menus).     \value NameChanged                      The QAccessible::Name property of an object has changed.     \value ObjectAttributeChanged     \value ObjectCreated                    A new object is created.     \value ObjectDestroyed                  An object is deleted.     \value ObjectHide                       An object is hidden; for example, with QWidget::hide().                                             Any children the object that is hidden has do not send                                             this event. It is not sent when an object is hidden as                                             it is being obcured by others.     \value ObjectReorder                    A layout or item view  has added, removed, or moved an                                             object (Qt does not use this event).     \value ObjectShow                       An object is displayed; for example, with                                             QWidget::show().     \value PageChanged     \value ParentChanged                    An object's parent object changed.     \value PopupMenuEnd                     A pop-up menu has closed.     \value PopupMenuStart                   A pop-up menu has opened.     \value ScrollingEnd                     A scrollbar scroll operation has ended (the mouse has                                             released the slider handle).     \value ScrollingStart                   A scrollbar scroll operation is about to start; this may                                             be caused by a mouse press on the slider handle, for                                             example.     \value SectionChanged     \value SelectionAdd                     An item has been added to the selection in an item view.     \value SelectionRemove                  An item has been removed from an item view selection.     \value Selection                        The selection has changed in a menu or item view.     \value SelectionWithin                  Several changes to a selection has occurred in an item                                             view.     \value SoundPlayed                      A sound has been played by an object     \omitvalue StateChanged                 The QAccessible::State of an object has changed.                                             This value is used internally for the QAccessibleStateChangeEvent.     \value TableCaptionChanged              A table caption has been changed.     \value TableColumnDescriptionChanged    The description of a table column, typically found in                                             the column's header, has been changed.     \value TableColumnHeaderChanged         A table column header has been changed.     \omitvalue TableModelChanged                The model providing data for a table has been changed.     \value TableRowDescriptionChanged       The description of a table row, typically found in the                                             row's header, has been changed.     \value TableRowHeaderChanged            A table row header has been changed.     \value TableSummaryChanged              The summary of a table has been changed.     \omitvalue TextAttributeChanged     \omitvalue TextCaretMoved                   The caret has moved in an editable widget.                                             The caret represents the cursor position in an editable                                             widget with the input focus.     \value TextColumnChanged                A text column has been changed.     \omitvalue TextInserted                     Text has been inserted into an editable widget.     \omitvalue TextRemoved                      Text has been removed from an editable widget.     \omitvalue TextSelectionChanged             The selected text has changed in an editable widget.     \omitvalue TextUpdated                      The text has been update in an editable widget.     \omitvalue ValueChanged                     The QAccessible::Value of an object has changed.     \value VisibleDataChanged      The values for this enum are defined to be the same as those defined in the     \l{AccessibleEventID.idl File Reference}{IAccessible2} and     \l{Microsoft Active Accessibility Event Constants}{MSAA} specifications. */
comment|/*!     \enum QAccessible::Role      This enum defines the role of an accessible object. The roles are:      \value AlertMessage     An object that is used to alert the user.     \value Animation        An object that displays an animation.     \value Application      The application's main window.     \value Assistant        An object that provids interactive help.     \value Border           An object that represents a border.     \value ButtonDropDown   A button that drops down a list of items.     \value ButtonDropGrid   A button that drops down a grid.     \value ButtonMenu       A button that drops down a menu.     \value Canvas           An object that displays graphics that the user can interact with.     \value Caret            An object that represents the system caret (text cursor).     \value Cell             A cell in a table.     \value Chart            An object that displays a graphical representation of data.     \value CheckBox         An object that represents an option that can be checked or unchecked. Some options provide a "mixed" state, e.g. neither checked nor unchecked.     \value Client           The client area in a window.     \value Clock            A clock displaying time.     \value ColorChooser     A dialog that lets the user choose a color.     \value Column           A column of cells, usually within a table.     \value ColumnHeader     A header for a column of data.     \value ComboBox         A list of choices that the user can select from.     \value ComplementaryContent A part of the document or web page that is complementary to the main content, usually a landmark (see WAI-ARIA).     \value Cursor           An object that represents the mouse cursor.     \value Desktop          The object represents the desktop or workspace.     \value Dial             An object that represents a dial or knob.     \value Dialog           A dialog box.     \value Document         A document, for example in an office application.     \value EditableText     Editable text such as a line or text edit.     \value Equation         An object that represents a mathematical equation.     \value Footer           A footer in a page (usually in documents).     \value Form             A web form containing controls.     \value Graphic          A graphic or picture, e.g. an icon.     \value Grip             A grip that the user can drag to change the size of widgets.     \value Grouping         An object that represents a logical grouping of other objects.     \value Heading          A heading in a document.     \value HelpBalloon      An object that displays help in a separate, short lived window.     \value HotkeyField      A hotkey field that allows the user to enter a key sequence.     \value Indicator        An indicator that represents a current value or item.     \value LayeredPane      An object that can contain layered children, e.g. in a stack.     \value Link             A link to something else.     \value List             A list of items, from which the user can select one or more items.     \value ListItem         An item in a list of items.     \value MenuBar          A menu bar from which menus are opened by the user.     \value MenuItem         An item in a menu or menu bar.     \value NoRole           The object has no role. This usually indicates an invalid object.     \value Note             A section whose content is parenthetic or ancillary to the main content of the resource.     \value PageTab          A page tab that the user can select to switch to a different page in a dialog.     \value PageTabList      A list of page tabs.     \value Paragraph        A paragraph of text (usually found in documents).     \value Pane             A generic container.     \value PopupMenu        A menu which lists options that the user can select to perform an action.     \value ProgressBar      The object displays the progress of an operation in progress.     \value PropertyPage     A property page where the user can change options and settings.     \value Button           A button.     \value RadioButton      An object that represents an option that is mutually exclusive with other options.     \value Row              A row of cells, usually within a table.     \value RowHeader        A header for a row of data.     \value ScrollBar        A scroll bar, which allows the user to scroll the visible area.     \value Section          A section (in a document).     \value Separator        A separator that divides space into logical areas.     \value Slider           A slider that allows the user to select a value within a given range.     \value Sound            An object that represents a sound.     \value SpinBox          A spin box widget that allows the user to enter a value within a given range.     \value Splitter         A splitter distributing available space between its child widgets.     \value StaticText       Static text, such as labels for other widgets.     \value StatusBar        A status bar.     \value Table            A table representing data in a grid of rows and columns.     \value Terminal         A terminal or command line interface.     \value TitleBar         The title bar caption of a window.     \value ToolBar          A tool bar, which groups widgets that the user accesses frequently.     \value ToolTip          A tool tip which provides information about other objects.     \value Tree             A list of items in a tree structure.     \value TreeItem         An item in a tree structure.     \value UserRole         The first value to be used for user defined roles.     \value WebDocument      HTML document, usually in a browser.     \value Whitespace       Blank space between other objects.     \value Window           A top level window. */
comment|/*!     \enum QAccessible::RelationFlag      This enum type defines bit flags that can be combined to indicate     the relationship between two accessible objects.      \value Label            The first object is the label of the second object.     \value Labelled         The first object is labelled by the second object.     \value Controller       The first object controls the second object.     \value Controlled       The first object is controlled by the second object.     \value AllRelations     Used as a mask to specify that we are interesting in information                             about all relations      Implementations of relations() return a combination of these flags.     Some values are mutually exclusive. */
comment|/*!     \enum QAccessible::Text      This enum specifies string information that an accessible object     returns.      \value Name         The name of the object. This can be used both                         as an identifier or a short description by                         accessible clients.     \value Description  A short text describing the object.     \value Value        The value of the object.     \value Help         A longer text giving information about how to use the object.     \value Accelerator  The keyboard shortcut that executes the object's default action.     \value UserText     The first value to be used for user defined text.     \omitvalue DebugDescription */
comment|/*! \enum QAccessible::TextBoundaryType     This enum describes different types of text boundaries. It follows the IAccessible2 API and is used in the \l QAccessibleTextInterface.      \value CharBoundary         Use individual characters as boundary.     \value WordBoundary         Use words as boundaries.     \value SentenceBoundary     Use sentences as boundary.     \value ParagraphBoundary    Use paragraphs as boundary.     \value LineBoundary         Use newlines as boundary.     \value NoBoundary           No boundary (use the whole text).      \sa QAccessibleTextInterface */
comment|/*!     \enum QAccessible::InterfaceType      \l QAccessibleInterface supports several sub interfaces.     In order to provide more information about some objects, their accessible     representation should implement one or more of these interfaces.      \note When subclassing one of these interfaces, \l QAccessibleInterface::interface_cast() needs to be implemented.      \value TextInterface            For text that supports selections or is more than one line. Simple labels do not need to implement this interface.     \omitvalue EditableTextInterface    For text that can be edited by the user.     \value ValueInterface           For objects that are used to manipulate a value, for example slider or scroll bar.     \value ActionInterface          For interactive objects that allow the user to trigger an action. Basically everything that allows for example mouse interaction.     \omitvalue ImageInterface       For objects that represent an image. This interface is generally less important.     \value TableInterface           For lists, tables and trees.     \value TableCellInterface       For cells in a TableInterface object.      \sa QAccessibleInterface::interface_cast(), QAccessibleTextInterface, QAccessibleValueInterface, QAccessibleActionInterface, QAccessibleTableInterface, QAccessibleTableCellInterface */
comment|/*!     Destroys the QAccessibleInterface. */
DECL|function|~QAccessibleInterface
name|QAccessibleInterface
operator|::
name|~
name|QAccessibleInterface
operator|(
operator|)
block|{ }
comment|/*!     \typedef QAccessible::Id     \relates QAccessible      Synonym for unsigned, used by the QAccessibleInterface cache. */
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
comment|/* accessible widgets plugin discovery stuff */
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
name|Q_GLOBAL_STATIC_WITH_ARGS
argument_list|(
argument|QFactoryLoader
argument_list|,
argument|loader
argument_list|,
argument|(QAccessibleFactoryInterface_iid, QLatin1String(
literal|"/accessible"
argument|))
argument_list|)
endif|#
directive|endif
comment|// FIXME turn this into one global static struct
name|Q_GLOBAL_STATIC
argument_list|(
argument|QList<QAccessible::InterfaceFactory>
argument_list|,
argument|qAccessibleFactories
argument_list|)
end_expr_stmt
begin_typedef
DECL|typedef|QAccessiblePluginsHash
typedef|typedef
name|QHash
argument_list|<
name|QString
argument_list|,
name|QAccessiblePlugin
modifier|*
argument_list|>
name|QAccessiblePluginsHash
typedef|;
end_typedef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QAccessiblePluginsHash
argument_list|,
argument|qAccessiblePlugins
argument_list|)
end_macro
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QList<QAccessible::ActivationObserver *>
argument_list|,
argument|qAccessibleActivationObservers
argument_list|)
end_macro
begin_decl_stmt
DECL|member|updateHandler
name|QAccessible
operator|::
name|UpdateHandler
name|QAccessible
operator|::
name|updateHandler
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|rootObjectHandler
name|QAccessible
operator|::
name|RootObjectHandler
name|QAccessible
operator|::
name|rootObjectHandler
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cleanupAdded
specifier|static
name|bool
name|cleanupAdded
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|platformAccessibility
specifier|static
name|QPlatformAccessibility
modifier|*
name|platformAccessibility
parameter_list|()
block|{
name|QPlatformIntegration
modifier|*
name|pfIntegration
init|=
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
decl_stmt|;
return|return
name|pfIntegration
condition|?
name|pfIntegration
operator|->
name|accessibility
argument_list|()
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QAccessible::QAccessible()     \internal      This class is purely a collection of enums and static functions,     it is not supposed to be instantiated. */
end_comment
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|cleanup
name|void
name|QAccessible
operator|::
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|QPlatformAccessibility
modifier|*
name|pfAccessibility
init|=
name|platformAccessibility
argument_list|()
condition|)
name|pfAccessibility
operator|->
name|cleanup
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qAccessibleCleanup
specifier|static
name|void
name|qAccessibleCleanup
parameter_list|()
block|{
name|qAccessibleActivationObservers
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
name|qAccessibleFactories
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \typedef QAccessible::InterfaceFactory      This is a typedef for a pointer to a function with the following     signature:      \snippet code/src_gui_accessible_qaccessible.cpp 1      The function receives a QString and a QObject pointer, where the     QString is the key identifying the interface. The QObject is used     to pass on to the QAccessibleInterface so that it can hold a reference     to it.      If the key and the QObject does not have a corresponding     QAccessibleInterface, a null-pointer will be returned.      Installed factories are called by queryAccessibilityInterface() until     one provides an interface. */
end_comment
begin_comment
comment|/*!     \typedef QAccessible::UpdateHandler      \internal      A function pointer type. Use a function with this prototype to install     your own update function.      The function is called by updateAccessibility(). */
end_comment
begin_comment
comment|/*!     \typedef QAccessible::RootObjectHandler      \internal      A function pointer type. Use a function with this prototype to install     your own root object handler.      The function is called by setRootObject(). */
end_comment
begin_comment
comment|/*!     Installs the InterfaceFactory \a factory. The last factory added     is the first one used by queryAccessibleInterface(). */
end_comment
begin_function
DECL|function|installFactory
name|void
name|QAccessible
operator|::
name|installFactory
parameter_list|(
name|InterfaceFactory
name|factory
parameter_list|)
block|{
if|if
condition|(
operator|!
name|factory
condition|)
return|return;
if|if
condition|(
operator|!
name|cleanupAdded
condition|)
block|{
name|qAddPostRoutine
argument_list|(
name|qAccessibleCleanup
argument_list|)
expr_stmt|;
name|cleanupAdded
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|qAccessibleFactories
argument_list|()
operator|->
name|contains
argument_list|(
name|factory
argument_list|)
condition|)
return|return;
name|qAccessibleFactories
argument_list|()
operator|->
name|append
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Removes \a factory from the list of installed InterfaceFactories. */
end_comment
begin_function
DECL|function|removeFactory
name|void
name|QAccessible
operator|::
name|removeFactory
parameter_list|(
name|InterfaceFactory
name|factory
parameter_list|)
block|{
name|qAccessibleFactories
argument_list|()
operator|->
name|removeAll
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Installs the given \a handler as the function to be used by     updateAccessibility(), and returns the previously installed     handler. */
end_comment
begin_function
DECL|function|installUpdateHandler
name|QAccessible
operator|::
name|UpdateHandler
name|QAccessible
operator|::
name|installUpdateHandler
parameter_list|(
name|UpdateHandler
name|handler
parameter_list|)
block|{
name|UpdateHandler
name|old
init|=
name|updateHandler
decl_stmt|;
name|updateHandler
operator|=
name|handler
expr_stmt|;
return|return
name|old
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Installs the given \a handler as the function to be used by setRootObject(),     and returns the previously installed handler. */
end_comment
begin_function
DECL|function|installRootObjectHandler
name|QAccessible
operator|::
name|RootObjectHandler
name|QAccessible
operator|::
name|installRootObjectHandler
parameter_list|(
name|RootObjectHandler
name|handler
parameter_list|)
block|{
name|RootObjectHandler
name|old
init|=
name|rootObjectHandler
decl_stmt|;
name|rootObjectHandler
operator|=
name|handler
expr_stmt|;
return|return
name|old
return|;
block|}
end_function
begin_comment
comment|/*!     \class QAccessible::ActivationObserver     \internal      Interface to listen to activation or deactivation of the accessibility framework.     \sa installActivationObserver() */
end_comment
begin_destructor
DECL|function|~ActivationObserver
name|QAccessible
operator|::
name|ActivationObserver
operator|::
name|~
name|ActivationObserver
parameter_list|()
block|{
comment|// must be empty until ### Qt 6
block|}
end_destructor
begin_comment
comment|/*!     \internal      Install \a observer to get notified of activation or deactivation (global accessibility has been enabled or disabled). */
end_comment
begin_function
DECL|function|installActivationObserver
name|void
name|QAccessible
operator|::
name|installActivationObserver
parameter_list|(
name|QAccessible
operator|::
name|ActivationObserver
modifier|*
name|observer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|observer
condition|)
return|return;
if|if
condition|(
operator|!
name|cleanupAdded
condition|)
block|{
name|qAddPostRoutine
argument_list|(
name|qAccessibleCleanup
argument_list|)
expr_stmt|;
name|cleanupAdded
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|qAccessibleActivationObservers
argument_list|()
operator|->
name|contains
argument_list|(
name|observer
argument_list|)
condition|)
return|return;
name|qAccessibleActivationObservers
argument_list|()
operator|->
name|append
argument_list|(
name|observer
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Remove an \a observer to no longer get notified of state changes.     \sa installActivationObserver() */
end_comment
begin_function
DECL|function|removeActivationObserver
name|void
name|QAccessible
operator|::
name|removeActivationObserver
parameter_list|(
name|ActivationObserver
modifier|*
name|observer
parameter_list|)
block|{
name|qAccessibleActivationObservers
argument_list|()
operator|->
name|removeAll
argument_list|(
name|observer
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     If a QAccessibleInterface implementation exists for the given \a object,     this function returns a pointer to the implementation; otherwise it     returns 0.      The function calls all installed factory functions (from most     recently installed to least recently installed) until one is found     that provides an interface for the class of \a object. If no     factory can provide an accessibility implementation for the class     the function loads installed accessibility plugins, and tests if     any of the plugins can provide the implementation.      If no implementation for the object's class is available, the     function tries to find an implementation for the object's parent     class, using the above strategy.      All interfaces are managed by an internal cache and should not be deleted. */
end_comment
begin_function
DECL|function|queryAccessibleInterface
name|QAccessibleInterface
modifier|*
name|QAccessible
operator|::
name|queryAccessibleInterface
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
block|{
if|if
condition|(
operator|!
name|object
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|Id
name|id
init|=
name|QAccessibleCache
operator|::
name|instance
argument_list|()
operator|->
name|objectToId
operator|.
name|value
argument_list|(
name|object
argument_list|)
condition|)
return|return
name|QAccessibleCache
operator|::
name|instance
argument_list|()
operator|->
name|interfaceForId
argument_list|(
name|id
argument_list|)
return|;
comment|// Create a QAccessibleInterface for the object class. Start by the most
comment|// derived class and walk up the class hierarchy.
specifier|const
name|QMetaObject
modifier|*
name|mo
init|=
name|object
operator|->
name|metaObject
argument_list|()
decl_stmt|;
while|while
condition|(
name|mo
condition|)
block|{
specifier|const
name|QString
name|cn
init|=
name|QLatin1String
argument_list|(
name|mo
operator|->
name|className
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check if the class has a InterfaceFactory installed.
for|for
control|(
name|int
name|i
init|=
name|qAccessibleFactories
argument_list|()
operator|->
name|count
argument_list|()
init|;
name|i
operator|>
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|InterfaceFactory
name|factory
init|=
name|qAccessibleFactories
argument_list|()
operator|->
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|factory
argument_list|(
name|cn
argument_list|,
name|object
argument_list|)
condition|)
block|{
name|QAccessibleCache
operator|::
name|instance
argument_list|()
operator|->
name|insert
argument_list|(
name|object
argument_list|,
name|iface
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|QAccessibleCache
operator|::
name|instance
argument_list|()
operator|->
name|objectToId
operator|.
name|contains
argument_list|(
name|object
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|iface
return|;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
comment|// Find a QAccessiblePlugin (factory) for the class name. If there's
comment|// no entry in the cache try to create it using the plugin loader.
if|if
condition|(
operator|!
name|qAccessiblePlugins
argument_list|()
operator|->
name|contains
argument_list|(
name|cn
argument_list|)
condition|)
block|{
name|QAccessiblePlugin
modifier|*
name|factory
init|=
literal|0
decl_stmt|;
comment|// 0 means "no plugin found". This is cached as well.
specifier|const
name|int
name|index
init|=
name|loader
argument_list|()
operator|->
name|indexOf
argument_list|(
name|cn
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
name|factory
operator|=
name|qobject_cast
argument_list|<
name|QAccessiblePlugin
operator|*
argument_list|>
argument_list|(
name|loader
argument_list|()
operator|->
name|instance
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|qAccessiblePlugins
argument_list|()
operator|->
name|insert
argument_list|(
name|cn
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
comment|// At this point the cache should contain a valid factory pointer or 0:
name|Q_ASSERT
argument_list|(
name|qAccessiblePlugins
argument_list|()
operator|->
name|contains
argument_list|(
name|cn
argument_list|)
argument_list|)
expr_stmt|;
name|QAccessiblePlugin
modifier|*
name|factory
init|=
name|qAccessiblePlugins
argument_list|()
operator|->
name|value
argument_list|(
name|cn
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|result
init|=
name|factory
operator|->
name|create
argument_list|(
name|cn
argument_list|,
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
comment|// Need this condition because of QDesktopScreenWidget
name|QAccessibleCache
operator|::
name|instance
argument_list|()
operator|->
name|insert
argument_list|(
name|object
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|QAccessibleCache
operator|::
name|instance
argument_list|()
operator|->
name|objectToId
operator|.
name|contains
argument_list|(
name|object
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
endif|#
directive|endif
name|mo
operator|=
name|mo
operator|->
name|superClass
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|object
operator|==
name|qApp
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|appInterface
init|=
operator|new
name|QAccessibleApplication
decl_stmt|;
name|QAccessibleCache
operator|::
name|instance
argument_list|()
operator|->
name|insert
argument_list|(
name|object
argument_list|,
name|appInterface
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|QAccessibleCache
operator|::
name|instance
argument_list|()
operator|->
name|objectToId
operator|.
name|contains
argument_list|(
name|qApp
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|appInterface
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \brief Call this function to ensure that manually created interfaces     are properly memory managed.      Must only be called exactly once per interface \a iface.     This is implicitly called when calling queryAccessibleInterface,     calling this function is only required when QAccessibleInterfaces     are instantiated with the "new" operator. This is not recommended,     whenever possible use the default functions and let \l queryAccessibleInterface()     take care of this.      When it is necessary to reimplement the QAccessibleInterface::child() function     and returning the child after constructing it, this function needs to be called.  */
end_comment
begin_function
DECL|function|registerAccessibleInterface
name|QAccessible
operator|::
name|Id
name|QAccessible
operator|::
name|registerAccessibleInterface
parameter_list|(
name|QAccessibleInterface
modifier|*
name|iface
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|iface
argument_list|)
expr_stmt|;
return|return
name|QAccessibleCache
operator|::
name|instance
argument_list|()
operator|->
name|insert
argument_list|(
name|iface
operator|->
name|object
argument_list|()
argument_list|,
name|iface
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Removes the interface belonging to this \a id from the cache and     deletes it. The id becomes invalid an may be re-used by the     cache. */
end_comment
begin_function
DECL|function|deleteAccessibleInterface
name|void
name|QAccessible
operator|::
name|deleteAccessibleInterface
parameter_list|(
name|Id
name|id
parameter_list|)
block|{
name|QAccessibleCache
operator|::
name|instance
argument_list|()
operator|->
name|deleteInterface
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the unique ID for the QAccessibleInterface \a iface. */
end_comment
begin_function
DECL|function|uniqueId
name|QAccessible
operator|::
name|Id
name|QAccessible
operator|::
name|uniqueId
parameter_list|(
name|QAccessibleInterface
modifier|*
name|iface
parameter_list|)
block|{
name|Id
name|id
init|=
name|QAccessibleCache
operator|::
name|instance
argument_list|()
operator|->
name|idToInterface
operator|.
name|key
argument_list|(
name|iface
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|id
condition|)
name|id
operator|=
name|registerAccessibleInterface
argument_list|(
name|iface
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the QAccessibleInterface belonging to the \a id.      Returns 0 if the id is invalid. */
end_comment
begin_function
DECL|function|accessibleInterface
name|QAccessibleInterface
modifier|*
name|QAccessible
operator|::
name|accessibleInterface
parameter_list|(
name|Id
name|id
parameter_list|)
block|{
return|return
name|QAccessibleCache
operator|::
name|instance
argument_list|()
operator|->
name|idToInterface
operator|.
name|value
argument_list|(
name|id
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the platform requested accessibility information.      This function will return false until a tool such as a screen reader     accessed the accessibility framework. It is still possible to use     \l QAccessible::queryAccessibleInterface() even if accessibility is not     active. But there will be no notifications sent to the platform.      It is recommended to use this function to prevent expensive notifications     via updateAccessibility() when they are not needed. */
end_comment
begin_function
DECL|function|isActive
name|bool
name|QAccessible
operator|::
name|isActive
parameter_list|()
block|{
if|if
condition|(
name|QPlatformAccessibility
modifier|*
name|pfAccessibility
init|=
name|platformAccessibility
argument_list|()
condition|)
return|return
name|pfAccessibility
operator|->
name|isActive
argument_list|()
return|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setActive
name|void
name|QAccessible
operator|::
name|setActive
parameter_list|(
name|bool
name|active
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qAccessibleActivationObservers
argument_list|()
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|qAccessibleActivationObservers
argument_list|()
operator|->
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|accessibilityActiveChanged
argument_list|(
name|active
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Sets the root object of the accessible objects of this application   to \a object.  All other accessible objects are reachable using object   navigation from the root object.    Normally, it isn't necessary to call this function, because Qt sets   the QApplication object as the root object immediately before the   event loop is entered in QApplication::exec().    Use QAccessible::installRootObjectHandler() to redirect the function   call to a customized handler function.    \sa queryAccessibleInterface() */
end_comment
begin_function
DECL|function|setRootObject
name|void
name|QAccessible
operator|::
name|setRootObject
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
block|{
if|if
condition|(
name|rootObjectHandler
condition|)
block|{
name|rootObjectHandler
argument_list|(
name|object
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|QPlatformAccessibility
modifier|*
name|pfAccessibility
init|=
name|platformAccessibility
argument_list|()
condition|)
name|pfAccessibility
operator|->
name|setRootObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Notifies about a change that might be relevant for accessibility clients.    \a event provides details about the change. These include the source   of the change and the nature of the change.  The \a event should   contain enough information give meaningful notifications.    For example, the type \c ValueChange indicates that the position of   a slider has been changed.    Call this function whenever the state of your accessible object or   one of its sub-elements has been changed either programmatically   (e.g. by calling QLabel::setText()) or by user interaction.    If there are no accessibility tools listening to this event, the   performance penalty for calling this function is small, but if   determining the parameters of the call is expensive you can test   QAccessible::isActive() to avoid unnecessary computation. */
end_comment
begin_function
DECL|function|updateAccessibility
name|void
name|QAccessible
operator|::
name|updateAccessibility
parameter_list|(
name|QAccessibleEvent
modifier|*
name|event
parameter_list|)
block|{
comment|// NOTE: Querying for the accessibleInterface below will result in
comment|// resolving and caching the interface, which in some cases will
comment|// cache the wrong information as updateAccessibility is called
comment|// during construction of widgets. If you see cases where the
comment|// cache seems wrong, this call is "to blame", but the code that
comment|// caches dynamic data should be updated to handle change events.
if|if
condition|(
operator|!
name|isActive
argument_list|()
operator|||
operator|!
name|event
operator|->
name|accessibleInterface
argument_list|()
condition|)
return|return;
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QAccessible
operator|::
name|TableModelChanged
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|event
operator|->
name|accessibleInterface
argument_list|()
decl_stmt|;
if|if
condition|(
name|iface
operator|&&
name|iface
operator|->
name|tableInterface
argument_list|()
condition|)
name|iface
operator|->
name|tableInterface
argument_list|()
operator|->
name|modelChange
argument_list|(
cast|static_cast
argument_list|<
name|QAccessibleTableModelChangeEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updateHandler
condition|)
block|{
name|updateHandler
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|QPlatformAccessibility
modifier|*
name|pfAccessibility
init|=
name|platformAccessibility
argument_list|()
condition|)
name|pfAccessibility
operator|->
name|notifyAccessibilityUpdate
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|QT_DEPRECATED_SINCE
argument_list|(
literal|5
operator|,
literal|0
argument_list|)
end_if
begin_comment
comment|/*!     \obsolete     \fn void QAccessible::updateAccessibility(QObject *object, int child, Event reason);      \brief Use QAccessible::updateAccessibility(QAccessibleEvent*) instead. */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \internal     \brief getBoundaries is a helper function to find the accessible text boundaries for QTextCursor based documents.     \param documentCursor a valid cursor bound to the document (not null). It needs to ba at the position to look for the boundary     \param boundaryType the type of boundary to find     \return the boundaries as pair */
end_comment
begin_function
DECL|function|qAccessibleTextBoundaryHelper
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|QAccessible
operator|::
name|qAccessibleTextBoundaryHelper
parameter_list|(
specifier|const
name|QTextCursor
modifier|&
name|offsetCursor
parameter_list|,
name|TextBoundaryType
name|boundaryType
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|offsetCursor
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QTextCursor
name|endCursor
init|=
name|offsetCursor
decl_stmt|;
name|endCursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|int
name|characterCount
init|=
name|endCursor
operator|.
name|position
argument_list|()
decl_stmt|;
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|result
decl_stmt|;
name|QTextCursor
name|cursor
init|=
name|offsetCursor
decl_stmt|;
switch|switch
condition|(
name|boundaryType
condition|)
block|{
case|case
name|CharBoundary
case|:
name|result
operator|.
name|first
operator|=
name|cursor
operator|.
name|position
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|result
operator|.
name|second
operator|=
name|cursor
operator|.
name|position
argument_list|()
expr_stmt|;
break|break;
case|case
name|WordBoundary
case|:
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|StartOfWord
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|)
expr_stmt|;
name|result
operator|.
name|first
operator|=
name|cursor
operator|.
name|position
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfWord
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|result
operator|.
name|second
operator|=
name|cursor
operator|.
name|position
argument_list|()
expr_stmt|;
break|break;
case|case
name|SentenceBoundary
case|:
block|{
comment|// QCursor does not provide functionality to move to next sentence.
comment|// We therefore find the current block, then go through the block using
comment|// QTextBoundaryFinder and find the sentence the \offset represents
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|StartOfBlock
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|)
expr_stmt|;
name|result
operator|.
name|first
operator|=
name|cursor
operator|.
name|position
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|result
operator|.
name|second
operator|=
name|cursor
operator|.
name|position
argument_list|()
expr_stmt|;
name|QString
name|blockText
init|=
name|cursor
operator|.
name|selectedText
argument_list|()
decl_stmt|;
specifier|const
name|int
name|offsetWithinBlockText
init|=
name|offsetCursor
operator|.
name|position
argument_list|()
operator|-
name|result
operator|.
name|first
decl_stmt|;
name|QTextBoundaryFinder
name|sentenceFinder
argument_list|(
name|QTextBoundaryFinder
operator|::
name|Sentence
argument_list|,
name|blockText
argument_list|)
decl_stmt|;
name|sentenceFinder
operator|.
name|setPosition
argument_list|(
name|offsetWithinBlockText
argument_list|)
expr_stmt|;
name|int
name|prevBoundary
init|=
name|offsetWithinBlockText
decl_stmt|;
name|int
name|nextBoundary
init|=
name|offsetWithinBlockText
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|sentenceFinder
operator|.
name|boundaryReasons
argument_list|()
operator|&
name|QTextBoundaryFinder
operator|::
name|StartOfItem
operator|)
condition|)
name|prevBoundary
operator|=
name|sentenceFinder
operator|.
name|toPreviousBoundary
argument_list|()
expr_stmt|;
name|nextBoundary
operator|=
name|sentenceFinder
operator|.
name|toNextBoundary
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextBoundary
operator|!=
operator|-
literal|1
condition|)
name|result
operator|.
name|second
operator|=
name|result
operator|.
name|first
operator|+
name|nextBoundary
expr_stmt|;
if|if
condition|(
name|prevBoundary
operator|!=
operator|-
literal|1
condition|)
name|result
operator|.
name|first
operator|+=
name|prevBoundary
expr_stmt|;
break|break;
block|}
case|case
name|LineBoundary
case|:
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|StartOfLine
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|)
expr_stmt|;
name|result
operator|.
name|first
operator|=
name|cursor
operator|.
name|position
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfLine
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|result
operator|.
name|second
operator|=
name|cursor
operator|.
name|position
argument_list|()
expr_stmt|;
break|break;
case|case
name|ParagraphBoundary
case|:
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|StartOfBlock
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|)
expr_stmt|;
name|result
operator|.
name|first
operator|=
name|cursor
operator|.
name|position
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|result
operator|.
name|second
operator|=
name|cursor
operator|.
name|position
argument_list|()
expr_stmt|;
break|break;
case|case
name|NoBoundary
case|:
name|result
operator|.
name|first
operator|=
literal|0
expr_stmt|;
name|result
operator|.
name|second
operator|=
name|characterCount
expr_stmt|;
break|break;
block|}
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     \class QAccessibleInterface     \brief The QAccessibleInterface class defines an interface that exposes information     about accessible objects.      \ingroup accessibility     \inmodule QtGui      This class is part of \l {Accessibility for QWidget Applications}.      Accessibility tools (also called AT Clients), such as screen readers     or braille displays, require high-level information about     accessible objects in an application. Accessible objects provide     specialized input and output methods, making it possible for users     to use accessibility tools with enabled applications (AT Servers).      Every element that the user needs to interact with or react to is     an accessible object, and should provide this information. These     are mainly visual objects, such as widgets and widget elements, but     can also be content, such as sounds.      The AT client uses three basic concepts to acquire information     about any accessible object in an application:     \list     \li \e Properties The client can read information about     accessible objects. In some cases the client can also modify these     properties; such as text in a line edit.     \li \e Actions The client can invoke actions like pressing a button     or .     \li \e{Relationships and Navigation} The client can traverse from one     accessible object to another, using the relationships between objects.     \endlist      The QAccessibleInterface defines the API for these three concepts.      \section1 Relationships and Navigation      The functions childCount() and indexOfChild() return the number of     children of an accessible object and the index a child object has     in its parent. The childAt() function returns a child QAccessibleInterface     that is found at a position. The child does not have to be a direct     child. This allows bypassing intermediate layers when the parent already knows the     top-most child. childAt() is used for hit testing (finding the object     under the mouse).      The relations() function provides information about the relations an     object has to other objects, and parent() and child() allows     traversing from one object to another object.      \section1 Properties      The central property of an accessible objects is what role() it     has. Different objects can have the same role, e.g. both the "Add     line" element in a scroll bar and the \c OK button in a dialog have     the same role, "button". The role implies what kind of     interaction the user can perform with the user interface element.      An object's state() property is a combination of different state     flags and can describe both how the object's state differs from a     "normal" state, e.g. it might be unavailable, and also how it     behaves, e.g. it might be selectable.      The text() property provides textual information about the object.     An object usually has a name, but can provide extended information     such as a description, help text, or information about any     keyboard accelerators it provides. Some objects allow changing the     text() property through the setText() function, but this     information is in most cases read-only.      The rect() property provides information about the geometry of an     accessible object. This information is usually only available for     visual objects.      \section1 Interfaces      To enable the user to interact with an accessible object the     object must implement QAccessibleActionInterface in addition to     QAccessibleInterface.     Objects that support selections can define actions to change the selection.      There are several other interfaces that should be implemented as required.     QAccessibleTextInterface should be used for bigger texts edits such as document views.     This interface should not be implemented for labels/single line edits.      For sliders, scrollbars and other numerical value selectors QAccessibleValueInterface     should be implemented.      Lists, tables and trees should implement QAccessibleTableInterface.      \sa QAccessible, QAccessibleActionInterface, QAccessibleTextInterface, QAccessibleValueInterface, QAccessibleTableInterface */
end_comment
begin_comment
comment|/*!     \fn bool QAccessibleInterface::isValid() const      Returns \c true if all the data necessary to use this interface     implementation is valid (e.g. all pointers are non-null);     otherwise returns \c false.      \sa object() */
end_comment
begin_comment
comment|/*!     \fn QObject *QAccessibleInterface::object() const      Returns a pointer to the QObject this interface implementation provides     information for.      \sa isValid() */
end_comment
begin_comment
comment|/*!     \fn int QAccessibleInterface::childCount() const      Returns the number of children that belong to this object. A child     can provide accessibility information on its own (e.g. a child     widget), or be a sub-element of this accessible object.      All objects provide this information.      \sa indexOfChild() */
end_comment
begin_comment
comment|/*!     \fn int QAccessibleInterface::indexOfChild(const QAccessibleInterface *child) const      Returns the 0-based index of the object \a child in this object's     children list, or -1 if \a child is not a child of this object.      All objects provide this information about their children.      \sa childCount() */
end_comment
begin_comment
comment|/*!     Returns the meaningful relations to other widgets. Usually this will not return parent/child     relations, unless they are handled in a specific way such as in tree views.     It will typically return the labelled-by and label relations.      It is possible to filter the relations by using \a match.     It should never return itself.      \sa parent(), child() */
end_comment
begin_function
name|QVector
argument_list|<
name|QPair
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|,
name|QAccessible
operator|::
name|Relation
argument_list|>
argument_list|>
DECL|function|relations
name|QAccessibleInterface
operator|::
name|relations
parameter_list|(
name|QAccessible
operator|::
name|Relation
comment|/*match = QAccessible::AllRelations*/
parameter_list|)
specifier|const
block|{
return|return
name|QVector
argument_list|<
name|QPair
argument_list|<
name|QAccessibleInterface
operator|*
argument_list|,
name|QAccessible
operator|::
name|Relation
argument_list|>
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the object that has the keyboard focus.      The object returned can be any descendant, including itself. */
end_comment
begin_function
DECL|function|focusChild
name|QAccessibleInterface
modifier|*
name|QAccessibleInterface
operator|::
name|focusChild
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QAccessibleInterface *QAccessibleInterface::childAt(int x, int y) const      Returns the QAccessibleInterface of a child that contains the screen coordinates (\a x, \a y).     If there are no children at this position this function returns 0.     The returned accessible must be a child, but not necessarily a direct child.      This function is only relyable for visible objects (invisible     object might not be laid out correctly).      All visual objects provide this information.      A default implementation is provided for objects inheriting QAccessibleObject. This will iterate     over all children. If the widget manages its children (e.g. a table) it will be more efficient     to write a specialized implementation.      \sa rect() */
end_comment
begin_comment
comment|/*!     \fn QAccessibleInterface* QAccessibleInterface::parent() const      Returns the QAccessibleInterface of the parent in the accessible object hierarchy.      Returns 0 if no parent exists (e.g. for the top level application object).      \sa child() */
end_comment
begin_comment
comment|/*!     \fn QAccessibleInterface* QAccessibleInterface::child(int index) const      Returns the accessible child with index \a index.     0-based index. The number of children of an object can be checked with childCount.      Returns 0 when asking for an invalid child (e.g. when the child became invalid in the meantime).      \sa childCount(), parent() */
end_comment
begin_comment
comment|/*!     \fn QString QAccessibleInterface::text(QAccessible::Text t) const      Returns the value of the text property \a t of the object.      The \l QAccessible::Name is a string used by clients to identify, find, or     announce an accessible object for the user. All objects must have     a name that is unique within their container. The name can be     used differently by clients, so the name should both give a     short description of the object and be unique.      An accessible object's \l QAccessible::Description provides textual information     about an object's visual appearance. The description is primarily     used to provide greater context for vision-impaired users, but is     also used for context searching or other applications. Not all     objects have a description. An "OK" button would not need a     description, but a tool button that shows a picture of a smiley     would.      The \l QAccessible::Value of an accessible object represents visual information     contained by the object, e.g. the text in a line edit. Usually,     the value can be modified by the user. Not all objects have a     value, e.g. static text labels don't, and some objects have a     state that already is the value, e.g. toggle buttons.      The \l QAccessible::Help text provides information about the function and     usage of an accessible object. Not all objects provide this     information.      The \l QAccessible::Accelerator is a keyboard shortcut that activates the     object's default action. A keyboard shortcut is the underlined     character in the text of a menu, menu item or widget, and is     either the character itself, or a combination of this character     and a modifier key like Alt, Ctrl or Shift. Command controls like     tool buttons also have shortcut keys and usually display them in     their tooltip.      All objects provide a string for \l QAccessible::Name.      \sa role(), state() */
end_comment
begin_comment
comment|/*!     \fn void QAccessibleInterface::setText(QAccessible::Text t, const QString&text)      Sets the text property \a t of the object to \a text.      Note that the text properties of most objects are read-only     so calling this function might have no effect.      \sa text() */
end_comment
begin_comment
comment|/*!     \fn QRect QAccessibleInterface::rect() const      Returns the geometry of the object. The geometry is in screen coordinates.      This function is only reliable for visible objects (invisible     objects might not be laid out correctly).      All visual objects provide this information.      \sa childAt() */
end_comment
begin_comment
comment|/*!     \fn QAccessible::Role QAccessibleInterface::role() const      Returns the role of the object.     The role of an object is usually static.      All accessible objects have a role.      \sa text(), state() */
end_comment
begin_comment
comment|/*!     \fn QAccessible::State QAccessibleInterface::state() const      Returns the current state of the object.     The returned value is a combination of the flags in     the QAccessible::StateFlag enumeration.      All accessible objects have a state.      \sa text(), role() */
end_comment
begin_comment
comment|/*!     Returns the accessible's foreground color if applicable or an invalid QColor.      \sa backgroundColor() */
end_comment
begin_function
DECL|function|foregroundColor
name|QColor
name|QAccessibleInterface
operator|::
name|foregroundColor
parameter_list|()
specifier|const
block|{
return|return
name|QColor
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the accessible's background color if applicable or an invalid QColor.      \sa foregroundColor() */
end_comment
begin_function
DECL|function|backgroundColor
name|QColor
name|QAccessibleInterface
operator|::
name|backgroundColor
parameter_list|()
specifier|const
block|{
return|return
name|QColor
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QAccessibleTextInterface *QAccessibleInterface::textInterface() */
end_comment
begin_comment
comment|/*!     \fn QAccessibleTextInterface *QAccessibleInterface::editableTextInterface()     \internal */
end_comment
begin_comment
comment|/*!     \fn QAccessibleValueInterface *QAccessibleInterface::valueInterface() */
end_comment
begin_comment
comment|/*!     \fn QAccessibleTableInterface *QAccessibleInterface::tableInterface() */
end_comment
begin_comment
comment|/*!     \fn QAccessibleTableCellInterface *QAccessibleInterface::tableCellInterface() */
end_comment
begin_comment
comment|/*!     \fn QAccessibleActionInterface *QAccessibleInterface::actionInterface() */
end_comment
begin_comment
comment|/*!     \fn QAccessibleImageInterface *QAccessibleInterface::imageInterface()     \internal */
end_comment
begin_comment
comment|/*!     \class QAccessibleEvent     \ingroup accessibility     \inmodule QtGui      \brief The QAccessibleEvent class is the base class for accessibility notifications.      This class is used with \l QAccessible::updateAccessibility().      The event type is one of the values of \l QAccessible::Event.     There are a number of subclasses that should be used to provide more details about the     event.      For example to notify about a focus change when re-implementing QWidget::setFocus,     the event could be used as follows:     \code     void MyWidget::setFocus(Qt::FocusReason reason)     {         // handle custom focus setting...         QAccessibleEvent event(f, QAccessible::Focus);         QAccessible::updateAccessibility(&event);     }     \endcode      To enable in process screen readers, all events must be sent after the change has happened. */
end_comment
begin_comment
comment|/*! \fn QAccessibleEvent::QAccessibleEvent(QObject *object, QAccessible::Event type)      Constructs a QAccessibleEvent to notify that \a object has changed.     The event \a type describes what changed. */
end_comment
begin_comment
comment|/*! \fn QAccessibleEvent::QAccessibleEvent(QAccessibleInterface *interface, QAccessible::Event type)      Constructs a QAccessibleEvent to notify that \a interface has changed.     The event \a type describes what changed.     Use this function if you already have a QAccessibleInterface or no QObject, otherwise consider     the overload taking a \l QObject parameter as it might be cheaper. */
end_comment
begin_comment
comment|/*!   Destroys the event. */
end_comment
begin_destructor
DECL|function|~QAccessibleEvent
name|QAccessibleEvent
operator|::
name|~
name|QAccessibleEvent
parameter_list|()
block|{
comment|// must be empty until ### Qt 6
block|}
end_destructor
begin_comment
comment|/*! \fn QAccessible::Event QAccessibleEvent::type() const   Returns the event type. */
end_comment
begin_comment
comment|/*! \fn QObject* QAccessibleEvent::object() const   Returns the event object. */
end_comment
begin_comment
comment|/*! \fn void QAccessibleEvent::setChild(int child)   Sets the child index to \a child. */
end_comment
begin_comment
comment|/*! \fn int QAccessibleEvent::child() const   Returns the child index. */
end_comment
begin_comment
comment|/*!     \internal     Returns the uniqueId of the QAccessibleInterface represented by this event.      In case the object() function returns 0 this is the only way to access the     interface. */
end_comment
begin_function
DECL|function|uniqueId
name|QAccessible
operator|::
name|Id
name|QAccessibleEvent
operator|::
name|uniqueId
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|m_object
condition|)
return|return
name|m_uniqueId
return|;
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|m_object
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|iface
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|m_child
operator|!=
operator|-
literal|1
condition|)
name|iface
operator|=
name|iface
operator|->
name|child
argument_list|(
name|m_child
argument_list|)
expr_stmt|;
return|return
name|QAccessible
operator|::
name|uniqueId
argument_list|(
name|iface
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \class QAccessibleValueChangeEvent     \ingroup accessibility     \inmodule QtGui      \brief The QAccessibleValueChangeEvent describes a change in value for an accessible object.      It contains the new value.      This class is used with \l QAccessible::updateAccessibility(). */
end_comment
begin_comment
comment|/*! \fn QAccessibleValueChangeEvent::QAccessibleValueChangeEvent(QObject *object, const QVariant&value)     Constructs a new QAccessibleValueChangeEvent for \a object.     The event contains the new \a value. */
end_comment
begin_comment
comment|/*! \fn void QAccessibleValueChangeEvent::setValue(const QVariant& value)     Sets the new \a value for this event. */
end_comment
begin_comment
comment|/*!     \fn QVariant QAccessibleValueChangeEvent::value() const      Returns the new value of the accessible object of this event. */
end_comment
begin_comment
comment|/*!     \internal */
end_comment
begin_destructor
DECL|function|~QAccessibleValueChangeEvent
name|QAccessibleValueChangeEvent
operator|::
name|~
name|QAccessibleValueChangeEvent
parameter_list|()
block|{
comment|// must be empty until ### Qt 6
block|}
end_destructor
begin_comment
comment|/*!     \class QAccessibleStateChangeEvent     \ingroup accessibility     \inmodule QtGui      \brief The QAccessibleStateChangeEvent notfies the accessibility framework     that the state of an object has changed.      This class is used with \l QAccessible::updateAccessibility().      \sa QAccessibleInterface::state() */
end_comment
begin_comment
comment|/*! \fn QAccessibleStateChangeEvent::QAccessibleStateChangeEvent(QObject *object, QAccessible::State state)     Constructs a new QAccessibleStateChangeEvent for \a object.     The difference to the object's previous state is in \a state. */
end_comment
begin_comment
comment|/*!     \fn QAccessibleStateChangeEvent::QAccessibleStateChangeEvent(QAccessibleInterface *iface, QAccessible::State state)     Constructs a new QAccessibleStateChangeEvent.     \a iface is the interface associated with the event     \a state is the state of the accessible object. */
end_comment
begin_comment
comment|/*!     \fn QAccessible::State QAccessibleStateChangeEvent::changedStates() const     \brief Returns the states that have been changed.      Be aware that the returned states are the ones that have changed,     to find out about the state of an object, use QAccessibleInterface::state().      For example, if an object used to have the focus but loses it,     the object's state will have focused set to \c false. This event on the     other hand tells about the change and has focused set to \c true since     the focus state is changed from \c true to \c false. */
end_comment
begin_comment
comment|/*!     \internal */
end_comment
begin_destructor
DECL|function|~QAccessibleStateChangeEvent
name|QAccessibleStateChangeEvent
operator|::
name|~
name|QAccessibleStateChangeEvent
parameter_list|()
block|{
comment|// must be empty until ### Qt 6
block|}
end_destructor
begin_comment
comment|/*!     \class QAccessibleTableModelChangeEvent     \ingroup accessibility     \inmodule QtGui      \brief The QAccessibleTableModelChangeEvent signifies a change in a table, list, or tree where cells     are added or removed.     If the change affected a number of rows, firstColumn and lastColumn will return -1.     Likewise for columns, the row functions may return -1.      This class is used with \l QAccessible::updateAccessibility(). */
end_comment
begin_comment
comment|/*! \enum QAccessibleTableModelChangeEvent::ModelChangeType     This enum describes different types of changes in the table model.     \value ModelReset      The model has been reset, all previous knowledge about the model is now invalid.     \value DataChanged     No cells have been added or removed, but the data of the specified cell range is invalid.     \value RowsInserted    New rows have been inserted.     \value ColumnsInserted New columns have been inserted.     \value RowsRemoved     Rows have been removed.     \value ColumnsRemoved  Columns have been removed. */
end_comment
begin_comment
comment|/*! \fn QAccessibleTableModelChangeEvent::QAccessibleTableModelChangeEvent(QObject *object, ModelChangeType changeType)     Constructs a new QAccessibleTableModelChangeEvent for \a object of with \a changeType. */
end_comment
begin_comment
comment|/*! \fn int QAccessibleTableModelChangeEvent::firstColumn() const     Returns the first changed column. */
end_comment
begin_comment
comment|/*! \fn int QAccessibleTableModelChangeEvent::firstRow() const     Returns the first changed row. */
end_comment
begin_comment
comment|/*! \fn int QAccessibleTableModelChangeEvent::lastColumn() const     Returns the last changed column. */
end_comment
begin_comment
comment|/*! \fn int QAccessibleTableModelChangeEvent::lastRow() const     Returns the last changed row. */
end_comment
begin_comment
comment|/*! \fn QAccessibleTableModelChangeEvent::ModelChangeType QAccessibleTableModelChangeEvent::modelChangeType() const     Returns the type of change. */
end_comment
begin_comment
comment|/*! \fn void QAccessibleTableModelChangeEvent::setFirstColumn(int column)     Sets the first changed \a column. */
end_comment
begin_comment
comment|/*! \fn void QAccessibleTableModelChangeEvent::setFirstRow(int row)     Sets the first changed \a row. */
end_comment
begin_comment
comment|/*! \fn void QAccessibleTableModelChangeEvent::setLastColumn(int column)     Sets the last changed \a column. */
end_comment
begin_comment
comment|/*! \fn void QAccessibleTableModelChangeEvent::setLastRow(int row)     Sets the last changed \a row. */
end_comment
begin_comment
comment|/*! \fn void QAccessibleTableModelChangeEvent::setModelChangeType(ModelChangeType changeType)     Sets the type of change to \a changeType. */
end_comment
begin_comment
comment|/*!     \internal */
end_comment
begin_destructor
DECL|function|~QAccessibleTableModelChangeEvent
name|QAccessibleTableModelChangeEvent
operator|::
name|~
name|QAccessibleTableModelChangeEvent
parameter_list|()
block|{
comment|// must be empty until ### Qt 6
block|}
end_destructor
begin_comment
comment|/*!     \class QAccessibleTextCursorEvent     \ingroup accessibility     \inmodule QtGui      \brief The QAccessibleTextCursorEvent class notifies of cursor movements.      This class is used with \l QAccessible::updateAccessibility(). */
end_comment
begin_comment
comment|/*! \fn QAccessibleTextCursorEvent::QAccessibleTextCursorEvent(QObject *object, int cursorPosition)     Create a new QAccessibleTextCursorEvent for \a object.     The \a cursorPosition is the new cursor position. */
end_comment
begin_comment
comment|/*! \fn int QAccessibleTextCursorEvent::cursorPosition() const     Returns the cursor position. */
end_comment
begin_comment
comment|/*! \fn void QAccessibleTextCursorEvent::setCursorPosition(int position)     Sets the cursor \a position for this event. */
end_comment
begin_comment
comment|/*!     \internal */
end_comment
begin_destructor
DECL|function|~QAccessibleTextCursorEvent
name|QAccessibleTextCursorEvent
operator|::
name|~
name|QAccessibleTextCursorEvent
parameter_list|()
block|{
comment|// must be empty until ### Qt 6
block|}
end_destructor
begin_comment
comment|/*!     \class QAccessibleTextInsertEvent     \ingroup accessibility     \inmodule QtGui      \brief The QAccessibleTextInsertEvent class notifies of text being inserted.      This class is used with \l QAccessible::updateAccessibility(). */
end_comment
begin_comment
comment|/*! \fn QAccessibleTextInsertEvent::QAccessibleTextInsertEvent(QObject *object, int position, const QString&text)     Constructs a new QAccessibleTextInsertEvent event for \a object.     The \a text has been inserted at \a position.     By default, it is assumed that the cursor has moved to the end     of the selection. If that is not the case, one needs to manually     set it with \l QAccessibleTextCursorEvent::setCursorPosition() for this event. */
end_comment
begin_comment
comment|/*! \fn int QAccessibleTextInsertEvent::changePosition() const     Returns the position where the text was inserted. */
end_comment
begin_comment
comment|/*! \fn QString QAccessibleTextInsertEvent::textInserted() const     Returns the text that has been inserted. */
end_comment
begin_comment
comment|/*!     \internal */
end_comment
begin_destructor
DECL|function|~QAccessibleTextInsertEvent
name|QAccessibleTextInsertEvent
operator|::
name|~
name|QAccessibleTextInsertEvent
parameter_list|()
block|{
comment|// must be empty until ### Qt 6
block|}
end_destructor
begin_comment
comment|/*!     \class QAccessibleTextRemoveEvent     \ingroup accessibility     \inmodule QtGui      \brief The QAccessibleTextRemoveEvent class notifies of text being deleted.      This class is used with \l QAccessible::updateAccessibility(). */
end_comment
begin_comment
comment|/*! \fn QAccessibleTextRemoveEvent::QAccessibleTextRemoveEvent(QObject *object, int position, const QString&text)     Constructs a new QAccessibleTextRemoveEvent event for \a object.     The \a text has been removed at \a position.     By default it is assumed that the cursor has moved to \a position.     If that is not the case, one needs to manually     set it with \l QAccessibleTextCursorEvent::setCursorPosition() for this event. */
end_comment
begin_comment
comment|/*! \fn int QAccessibleTextRemoveEvent::changePosition() const     Returns the position where the text was removed. */
end_comment
begin_comment
comment|/*! \fn QString QAccessibleTextRemoveEvent::textRemoved() const     Returns the text that has been removed. */
end_comment
begin_comment
comment|/*!     \internal */
end_comment
begin_destructor
DECL|function|~QAccessibleTextRemoveEvent
name|QAccessibleTextRemoveEvent
operator|::
name|~
name|QAccessibleTextRemoveEvent
parameter_list|()
block|{
comment|// must be empty until ### Qt 6
block|}
end_destructor
begin_comment
comment|/*!     \class QAccessibleTextUpdateEvent     \ingroup accessibility     \inmodule QtGui      \brief The QAccessibleTextUpdateEvent class notifies about text changes.     This is for accessibles that support editable text such as line edits.     This event occurs for example when a portion of selected text     gets replaced by pasting a new text or in override mode of editors.      This class is used with \l QAccessible::updateAccessibility(). */
end_comment
begin_comment
comment|/*! \fn QAccessibleTextUpdateEvent::QAccessibleTextUpdateEvent(QObject *object, int position, const QString&oldText, const QString&text)     Constructs a new QAccessibleTextUpdateEvent for \a object.     The text change takes place at \a position where the \a oldText was removed and \a text inserted instead. */
end_comment
begin_comment
comment|/*! \fn int QAccessibleTextUpdateEvent::changePosition() const     Returns where the change took place. */
end_comment
begin_comment
comment|/*! \fn QString QAccessibleTextUpdateEvent::textInserted() const     Returns the inserted text. */
end_comment
begin_comment
comment|/*! \fn QString QAccessibleTextUpdateEvent::textRemoved() const     Returns the removed text. */
end_comment
begin_comment
comment|/*!     \internal */
end_comment
begin_destructor
DECL|function|~QAccessibleTextUpdateEvent
name|QAccessibleTextUpdateEvent
operator|::
name|~
name|QAccessibleTextUpdateEvent
parameter_list|()
block|{
comment|// must be empty until ### Qt 6
block|}
end_destructor
begin_comment
comment|/*!     \class QAccessibleTextSelectionEvent     \ingroup accessibility     \inmodule QtGui      \brief QAccessibleTextSelectionEvent signals a change in the text selection of an object.      This class is used with \l QAccessible::updateAccessibility(). */
end_comment
begin_comment
comment|/*! \fn QAccessibleTextSelectionEvent::QAccessibleTextSelectionEvent(QObject *object, int start, int end)     Constructs a new QAccessibleTextSelectionEvent for \a object.     The new selection this event notifies about is from position \a start to \a end. */
end_comment
begin_comment
comment|/*! \fn int QAccessibleTextSelectionEvent::selectionEnd() const     Returns the position of the last selected character. */
end_comment
begin_comment
comment|/*! \fn int QAccessibleTextSelectionEvent::selectionStart() const     Returns the position of the first selected character. */
end_comment
begin_comment
comment|/*! \fn void QAccessibleTextSelectionEvent::setSelection(int start, int end)     Sets the selection for this event from position \a start to \a end. */
end_comment
begin_comment
comment|/*!     \internal */
end_comment
begin_destructor
DECL|function|~QAccessibleTextSelectionEvent
name|QAccessibleTextSelectionEvent
operator|::
name|~
name|QAccessibleTextSelectionEvent
parameter_list|()
block|{
comment|// must be empty until ### Qt 6
block|}
end_destructor
begin_comment
comment|/*!     Returns the QAccessibleInterface associated with the event.     The caller of this function takes ownership of the returned interface. */
end_comment
begin_function
DECL|function|accessibleInterface
name|QAccessibleInterface
modifier|*
name|QAccessibleEvent
operator|::
name|accessibleInterface
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_object
operator|==
literal|0
condition|)
return|return
name|QAccessible
operator|::
name|accessibleInterface
argument_list|(
name|m_uniqueId
argument_list|)
return|;
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|m_object
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|iface
operator|||
operator|!
name|iface
operator|->
name|isValid
argument_list|()
condition|)
block|{
specifier|static
name|bool
name|hasWarned
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|iface
operator|&&
operator|!
name|hasWarned
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Problem creating accessible interface for: "
operator|<<
name|m_object
operator|<<
name|endl
operator|<<
literal|"Make sure to deploy Qt with accessibility plugins."
expr_stmt|;
name|hasWarned
operator|=
literal|true
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
if|if
condition|(
name|m_child
operator|>=
literal|0
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|child
init|=
name|iface
operator|->
name|child
argument_list|(
name|m_child
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
condition|)
block|{
name|iface
operator|=
name|child
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Cannot creat accessible child interface for object: "
operator|<<
name|m_object
operator|<<
literal|" index: "
operator|<<
name|m_child
expr_stmt|;
block|}
block|}
return|return
name|iface
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the window associated with the underlying object.     For instance, QAccessibleWidget reimplements this and returns     the windowHandle() of the QWidget.      It is used on some platforms to be able to notify the AT client about     state changes.     The backend will traverse up all ancestors until it finds a window.     (This means that at least one interface among the ancestors should     return a valid QWindow pointer).      The default implementation returns 0.   */
end_comment
begin_function
DECL|function|window
name|QWindow
modifier|*
name|QAccessibleInterface
operator|::
name|window
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Method to allow extending this class without breaking binary compatibility.     The actual behavior and format of \a data depends on \a id argument     which must be defined if the class is to be extended with another virtual     function.     Currently, this is unused. */
end_comment
begin_function
DECL|function|virtual_hook
name|void
name|QAccessibleInterface
operator|::
name|virtual_hook
parameter_list|(
name|int
comment|/*id*/
parameter_list|,
name|void
modifier|*
comment|/*data*/
parameter_list|)
block|{ }
end_function
begin_comment
comment|/*!     \fn void *QAccessibleInterface::interface_cast(QAccessible::InterfaceType type)      Returns a specialized accessibility interface \a type from the     generic QAccessibleInterface.      This function must be reimplemented when providing more     information about a widget or object through the specialized     interfaces. For example a line edit should implement the     QAccessibleTextInterface.      Qt's QLineEdit for example has its accessibility support     implemented in QAccessibleLineEdit.      \code void *QAccessibleLineEdit::interface_cast(QAccessible::InterfaceType t) {     if (t == QAccessible::TextInterface)         return static_cast<QAccessibleTextInterface*>(this);     return QAccessibleWidget::interface_cast(t); }     \endcode      \sa QAccessible::InterfaceType, QAccessibleTextInterface,     QAccessibleValueInterface, QAccessibleActionInterface,     QAccessibleTableInterface, QAccessibleTableCellInterface */
end_comment
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|qAccessibleRoleString
specifier|const
name|char
modifier|*
name|qAccessibleRoleString
parameter_list|(
name|QAccessible
operator|::
name|Role
name|role
parameter_list|)
block|{
if|if
condition|(
name|role
operator|>=
name|QAccessible
operator|::
name|UserRole
condition|)
name|role
operator|=
name|QAccessible
operator|::
name|UserRole
expr_stmt|;
specifier|static
name|int
name|roleEnum
init|=
name|QAccessible
operator|::
name|staticMetaObject
operator|.
name|indexOfEnumerator
argument_list|(
literal|"Role"
argument_list|)
decl_stmt|;
return|return
name|QAccessible
operator|::
name|staticMetaObject
operator|.
name|enumerator
argument_list|(
name|roleEnum
argument_list|)
operator|.
name|valueToKey
argument_list|(
name|role
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|qAccessibleEventString
specifier|const
name|char
modifier|*
name|qAccessibleEventString
parameter_list|(
name|QAccessible
operator|::
name|Event
name|event
parameter_list|)
block|{
specifier|static
name|int
name|eventEnum
init|=
name|QAccessible
operator|::
name|staticMetaObject
operator|.
name|indexOfEnumerator
argument_list|(
literal|"Event"
argument_list|)
decl_stmt|;
return|return
name|QAccessible
operator|::
name|staticMetaObject
operator|.
name|enumerator
argument_list|(
name|eventEnum
argument_list|)
operator|.
name|valueToKey
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|QAccessible
operator|::
name|State
modifier|&
name|first
parameter_list|,
specifier|const
name|QAccessible
operator|::
name|State
modifier|&
name|second
parameter_list|)
block|{
return|return
name|memcmp
argument_list|(
operator|&
name|first
argument_list|,
operator|&
name|second
argument_list|,
sizeof|sizeof
argument_list|(
name|QAccessible
operator|::
name|State
argument_list|)
argument_list|)
operator|==
literal|0
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|operator <<
name|Q_GUI_EXPORT
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|d
parameter_list|,
specifier|const
name|QAccessibleInterface
modifier|*
name|iface
parameter_list|)
block|{
name|QDebugStateSaver
name|saver
argument_list|(
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|iface
condition|)
block|{
name|d
operator|<<
literal|"QAccessibleInterface(null)"
expr_stmt|;
return|return
name|d
return|;
block|}
name|d
operator|.
name|nospace
argument_list|()
expr_stmt|;
name|d
operator|<<
literal|"QAccessibleInterface("
operator|<<
name|hex
operator|<<
operator|(
specifier|const
name|void
operator|*
operator|)
name|iface
operator|<<
name|dec
expr_stmt|;
if|if
condition|(
name|iface
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|<<
literal|" name="
operator|<<
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
operator|<<
literal|' '
expr_stmt|;
name|d
operator|<<
literal|"role="
operator|<<
name|qAccessibleRoleString
argument_list|(
name|iface
operator|->
name|role
argument_list|()
argument_list|)
operator|<<
literal|' '
expr_stmt|;
if|if
condition|(
name|iface
operator|->
name|childCount
argument_list|()
condition|)
name|d
operator|<<
literal|"childc="
operator|<<
name|iface
operator|->
name|childCount
argument_list|()
operator|<<
literal|' '
expr_stmt|;
if|if
condition|(
name|iface
operator|->
name|object
argument_list|()
condition|)
block|{
name|d
operator|<<
literal|"obj="
operator|<<
name|iface
operator|->
name|object
argument_list|()
expr_stmt|;
block|}
name|QStringList
name|stateStrings
decl_stmt|;
name|QAccessible
operator|::
name|State
name|st
init|=
name|iface
operator|->
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|focusable
condition|)
name|stateStrings
operator|<<
name|QLatin1String
argument_list|(
literal|"focusable"
argument_list|)
expr_stmt|;
if|if
condition|(
name|st
operator|.
name|focused
condition|)
name|stateStrings
operator|<<
name|QLatin1String
argument_list|(
literal|"focused"
argument_list|)
expr_stmt|;
if|if
condition|(
name|st
operator|.
name|selected
condition|)
name|stateStrings
operator|<<
name|QLatin1String
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
if|if
condition|(
name|st
operator|.
name|invisible
condition|)
name|stateStrings
operator|<<
name|QLatin1String
argument_list|(
literal|"invisible"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|stateStrings
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|<<
name|stateStrings
operator|.
name|join
argument_list|(
name|QLatin1Char
argument_list|(
literal|'|'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|st
operator|.
name|invisible
condition|)
name|d
operator|<<
literal|"rect="
operator|<<
name|iface
operator|->
name|rect
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|d
operator|<<
literal|" invalid"
expr_stmt|;
block|}
name|d
operator|<<
literal|')'
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|d
parameter_list|,
specifier|const
name|QAccessibleEvent
modifier|&
name|ev
parameter_list|)
block|{
name|QDebugStateSaver
name|saver
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|d
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QAccessibleEvent("
expr_stmt|;
if|if
condition|(
name|ev
operator|.
name|object
argument_list|()
condition|)
block|{
name|d
operator|.
name|nospace
argument_list|()
operator|<<
literal|"object="
operator|<<
name|hex
operator|<<
name|ev
operator|.
name|object
argument_list|()
operator|<<
name|dec
expr_stmt|;
name|d
operator|.
name|nospace
argument_list|()
operator|<<
literal|"child="
operator|<<
name|ev
operator|.
name|child
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|d
operator|.
name|nospace
argument_list|()
operator|<<
literal|"no object, uniqueId="
operator|<<
name|ev
operator|.
name|uniqueId
argument_list|()
expr_stmt|;
block|}
name|d
operator|<<
literal|" event="
operator|<<
name|qAccessibleEventString
argument_list|(
name|ev
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ev
operator|.
name|type
argument_list|()
operator|==
name|QAccessible
operator|::
name|StateChanged
condition|)
block|{
name|QAccessible
operator|::
name|State
name|changed
init|=
cast|static_cast
argument_list|<
specifier|const
name|QAccessibleStateChangeEvent
operator|*
argument_list|>
argument_list|(
operator|&
name|ev
argument_list|)
operator|->
name|changedStates
argument_list|()
decl_stmt|;
name|d
operator|<<
literal|"State changed:"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|disabled
condition|)
name|d
operator|<<
literal|"disabled"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|selected
condition|)
name|d
operator|<<
literal|"selected"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|focusable
condition|)
name|d
operator|<<
literal|"focusable"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|focused
condition|)
name|d
operator|<<
literal|"focused"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|pressed
condition|)
name|d
operator|<<
literal|"pressed"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|checkable
condition|)
name|d
operator|<<
literal|"checkable"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|checked
condition|)
name|d
operator|<<
literal|"checked"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|checkStateMixed
condition|)
name|d
operator|<<
literal|"checkStateMixed"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|readOnly
condition|)
name|d
operator|<<
literal|"readOnly"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|hotTracked
condition|)
name|d
operator|<<
literal|"hotTracked"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|defaultButton
condition|)
name|d
operator|<<
literal|"defaultButton"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|expanded
condition|)
name|d
operator|<<
literal|"expanded"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|collapsed
condition|)
name|d
operator|<<
literal|"collapsed"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|busy
condition|)
name|d
operator|<<
literal|"busy"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|expandable
condition|)
name|d
operator|<<
literal|"expandable"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|marqueed
condition|)
name|d
operator|<<
literal|"marqueed"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|animated
condition|)
name|d
operator|<<
literal|"animated"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|invisible
condition|)
name|d
operator|<<
literal|"invisible"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|offscreen
condition|)
name|d
operator|<<
literal|"offscreen"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|sizeable
condition|)
name|d
operator|<<
literal|"sizeable"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|movable
condition|)
name|d
operator|<<
literal|"movable"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|selfVoicing
condition|)
name|d
operator|<<
literal|"selfVoicing"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|selectable
condition|)
name|d
operator|<<
literal|"selectable"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|linked
condition|)
name|d
operator|<<
literal|"linked"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|traversed
condition|)
name|d
operator|<<
literal|"traversed"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|multiSelectable
condition|)
name|d
operator|<<
literal|"multiSelectable"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|extSelectable
condition|)
name|d
operator|<<
literal|"extSelectable"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|passwordEdit
condition|)
name|d
operator|<<
literal|"passwordEdit"
expr_stmt|;
comment|// used to be Protected
if|if
condition|(
name|changed
operator|.
name|hasPopup
condition|)
name|d
operator|<<
literal|"hasPopup"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|modal
condition|)
name|d
operator|<<
literal|"modal"
expr_stmt|;
comment|// IA2 - we chose to not add some IA2 states for now
comment|// Below the ones that seem helpful
if|if
condition|(
name|changed
operator|.
name|active
condition|)
name|d
operator|<<
literal|"active"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|invalid
condition|)
name|d
operator|<<
literal|"invalid"
expr_stmt|;
comment|// = defunct
if|if
condition|(
name|changed
operator|.
name|editable
condition|)
name|d
operator|<<
literal|"editable"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|multiLine
condition|)
name|d
operator|<<
literal|"multiLine"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|selectableText
condition|)
name|d
operator|<<
literal|"selectableText"
expr_stmt|;
if|if
condition|(
name|changed
operator|.
name|supportsAutoCompletion
condition|)
name|d
operator|<<
literal|"supportsAutoCompletion"
expr_stmt|;
block|}
name|d
operator|<<
literal|')'
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DEBUGSTREAM
end_comment
begin_comment
comment|/*!     \class QAccessibleTextInterface     \inmodule QtGui      \ingroup accessibility      \brief The QAccessibleTextInterface class implements support for text handling.      This interface corresponds to the IAccessibleText interface.     It should be implemented for widgets that display more text than a plain label.     Labels should be represented by only \l QAccessibleInterface     and return their text as name (\l QAccessibleInterface::text() with \l QAccessible::Name as type).     The QAccessibleTextInterface is typically for text that a screen reader     might want to read line by line, and for widgets that support text selection and input.     This interface is, for example, implemented for QLineEdit.      \l{IAccessible2 Specification} */
end_comment
begin_comment
comment|/*!     Destroys the QAccessibleTextInterface. */
end_comment
begin_destructor
DECL|function|~QAccessibleTextInterface
name|QAccessibleTextInterface
operator|::
name|~
name|QAccessibleTextInterface
parameter_list|()
block|{
comment|// must be empty until ### Qt 6
block|}
end_destructor
begin_comment
comment|/*!     \fn void QAccessibleTextInterface::addSelection(int startOffset, int endOffset)     Select the text from \a startOffset to \a endOffset.     The \a startOffset is the first character that will be selected.     The \a endOffset is the first character that will not be selected.      When the object supports multiple selections (e.g. in a word processor),     this adds a new selection, otherwise it replaces the previous selection.      The selection will be \a endOffset - \a startOffset characters long. */
end_comment
begin_comment
comment|/*!     \fn QString QAccessibleTextInterface::attributes(int offset, int *startOffset, int *endOffset) const     Returns the text attributes at the position \a offset.     In addition the range of the attributes is returned in \a startOffset and \a endOffset. */
end_comment
begin_comment
comment|/*!     \fn int QAccessibleTextInterface::cursorPosition() const      Returns the current cursor position. */
end_comment
begin_comment
comment|/*!     \fn QRect QAccessibleTextInterface::characterRect(int offset) const     Returns the position and size of the character at position \a offset in screen coordinates. */
end_comment
begin_comment
comment|/*!     \fn int QAccessibleTextInterface::selectionCount() const      Returns the number of selections in this text. */
end_comment
begin_comment
comment|/*!     \fn int QAccessibleTextInterface::offsetAtPoint(const QPoint&point) const      Returns the offset of the character at the \a point in screen coordinates. */
end_comment
begin_comment
comment|/*!     \fn void QAccessibleTextInterface::selection(int selectionIndex, int *startOffset, int *endOffset) const      Returns a selection. The size of the selection is returned in \a startOffset and \a endOffset.     If there is no selection both \a startOffset and \a endOffset are 0.      The accessibility APIs support multiple selections. For most widgets though, only one selection     is supported with \a selectionIndex equal to 0. */
end_comment
begin_comment
comment|/*!     \fn QString QAccessibleTextInterface::text(int startOffset, int endOffset) const      Returns the text from \a startOffset to \a endOffset.     The \a startOffset is the first character that will be returned.     The \a endOffset is the first character that will not be returned. */
end_comment
begin_comment
comment|/*!     \internal     Helper for finding line breaks in textBeforeOffset/textAtOffset/textAfterOffset.     \a beforeAtAfter is the line we look for. -1 for before, 0 for at and 1 for after. */
end_comment
begin_function
DECL|function|textLineBoundary
specifier|static
name|QString
name|textLineBoundary
parameter_list|(
name|int
name|beforeAtAfter
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
modifier|*
name|startOffset
parameter_list|,
name|int
modifier|*
name|endOffset
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|beforeAtAfter
operator|>=
operator|-
literal|1
operator|&&
name|beforeAtAfter
operator|<=
literal|1
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|*
name|startOffset
operator|==
operator|-
literal|1
operator|&&
operator|*
name|endOffset
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|offset
operator|>=
literal|0
operator|&&
name|offset
operator|<=
name|length
argument_list|)
expr_stmt|;
comment|// move offset into the right range (if asking for line before or after
if|if
condition|(
name|beforeAtAfter
operator|==
literal|1
condition|)
block|{
name|offset
operator|=
name|text
operator|.
name|indexOf
argument_list|(
name|QChar
operator|::
name|LineFeed
argument_list|,
name|qMin
argument_list|(
name|offset
argument_list|,
name|length
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|offset
operator|<
literal|0
condition|)
return|return
name|QString
argument_list|()
return|;
comment|// after the last line comes nothing
operator|++
name|offset
expr_stmt|;
comment|// move after the newline
block|}
elseif|else
if|if
condition|(
name|beforeAtAfter
operator|==
operator|-
literal|1
condition|)
block|{
name|offset
operator|=
name|text
operator|.
name|lastIndexOf
argument_list|(
name|QChar
operator|::
name|LineFeed
argument_list|,
name|qMax
argument_list|(
name|offset
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|offset
operator|<
literal|0
condition|)
return|return
name|QString
argument_list|()
return|;
comment|// before first line comes nothing
block|}
if|if
condition|(
name|offset
operator|>
literal|0
condition|)
operator|*
name|startOffset
operator|=
name|text
operator|.
name|lastIndexOf
argument_list|(
name|QChar
operator|::
name|LineFeed
argument_list|,
name|offset
operator|-
literal|1
argument_list|)
expr_stmt|;
operator|++
operator|*
name|startOffset
expr_stmt|;
comment|// move to the char after the newline (0 if lastIndexOf returned -1)
operator|*
name|endOffset
operator|=
name|text
operator|.
name|indexOf
argument_list|(
name|QChar
operator|::
name|LineFeed
argument_list|,
name|qMin
argument_list|(
name|offset
argument_list|,
name|length
operator|-
literal|1
argument_list|)
argument_list|)
operator|+
literal|1
expr_stmt|;
comment|// include newline char
if|if
condition|(
operator|*
name|endOffset
operator|<=
literal|0
operator|||
operator|*
name|endOffset
operator|>
name|length
condition|)
operator|*
name|endOffset
operator|=
name|length
expr_stmt|;
comment|// if the text doesn't end with a newline it ends at length
return|return
name|text
operator|.
name|mid
argument_list|(
operator|*
name|startOffset
argument_list|,
operator|*
name|endOffset
operator|-
operator|*
name|startOffset
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the text item of type \a boundaryType that is close to offset \a offset     and sets \a startOffset and \a endOffset values to the start and end positions     of that item; returns an empty string if there is no such an item.     Sets \a startOffset and \a endOffset values to -1 on error.      This default implementation is provided for small text edits. A word processor or     text editor should provide their own efficient implementations. This function makes no     distinction between paragraphs and lines.      \note this function can not take the cursor position into account. By convention     an \a offset of -2 means that this function should use the cursor position as offset.     Thus an offset of -2 must be converted to the cursor position before calling this     function.     An offset of -1 is used for the text length and custom implementations of this function     have to return the result as if the length was passed in as offset. */
end_comment
begin_function
DECL|function|textBeforeOffset
name|QString
name|QAccessibleTextInterface
operator|::
name|textBeforeOffset
parameter_list|(
name|int
name|offset
parameter_list|,
name|QAccessible
operator|::
name|TextBoundaryType
name|boundaryType
parameter_list|,
name|int
modifier|*
name|startOffset
parameter_list|,
name|int
modifier|*
name|endOffset
parameter_list|)
specifier|const
block|{
specifier|const
name|QString
name|txt
init|=
name|text
argument_list|(
literal|0
argument_list|,
name|characterCount
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|==
operator|-
literal|1
condition|)
name|offset
operator|=
name|txt
operator|.
name|length
argument_list|()
expr_stmt|;
operator|*
name|startOffset
operator|=
operator|*
name|endOffset
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|txt
operator|.
name|isEmpty
argument_list|()
operator|||
name|offset
operator|<=
literal|0
operator|||
name|offset
operator|>
name|txt
operator|.
name|length
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
comment|// type initialized just to silence a compiler warning [-Werror=maybe-uninitialized]
name|QTextBoundaryFinder
operator|::
name|BoundaryType
name|type
init|=
name|QTextBoundaryFinder
operator|::
name|Grapheme
decl_stmt|;
switch|switch
condition|(
name|boundaryType
condition|)
block|{
case|case
name|QAccessible
operator|::
name|CharBoundary
case|:
name|type
operator|=
name|QTextBoundaryFinder
operator|::
name|Grapheme
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|WordBoundary
case|:
name|type
operator|=
name|QTextBoundaryFinder
operator|::
name|Word
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|SentenceBoundary
case|:
name|type
operator|=
name|QTextBoundaryFinder
operator|::
name|Sentence
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|LineBoundary
case|:
case|case
name|QAccessible
operator|::
name|ParagraphBoundary
case|:
comment|// Lines can not use QTextBoundaryFinder since Line there means any potential line-break.
return|return
name|textLineBoundary
argument_list|(
operator|-
literal|1
argument_list|,
name|txt
argument_list|,
name|offset
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
return|;
case|case
name|QAccessible
operator|::
name|NoBoundary
case|:
comment|// return empty, this function currently only supports single lines, so there can be no line before
return|return
name|QString
argument_list|()
return|;
default|default:
name|Q_UNREACHABLE
argument_list|()
expr_stmt|;
block|}
comment|// keep behavior in sync with QTextCursor::movePosition()!
name|QTextBoundaryFinder
name|boundary
argument_list|(
name|type
argument_list|,
name|txt
argument_list|)
decl_stmt|;
name|boundary
operator|.
name|setPosition
argument_list|(
name|offset
argument_list|)
expr_stmt|;
do|do
block|{
if|if
condition|(
operator|(
name|boundary
operator|.
name|boundaryReasons
argument_list|()
operator|&
operator|(
name|QTextBoundaryFinder
operator|::
name|StartOfItem
operator||
name|QTextBoundaryFinder
operator|::
name|EndOfItem
operator|)
operator|)
condition|)
break|break;
block|}
do|while
condition|(
name|boundary
operator|.
name|toPreviousBoundary
argument_list|()
operator|>
literal|0
condition|)
do|;
name|Q_ASSERT
argument_list|(
name|boundary
operator|.
name|position
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
operator|*
name|endOffset
operator|=
name|boundary
operator|.
name|position
argument_list|()
expr_stmt|;
while|while
condition|(
name|boundary
operator|.
name|toPreviousBoundary
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|(
name|boundary
operator|.
name|boundaryReasons
argument_list|()
operator|&
operator|(
name|QTextBoundaryFinder
operator|::
name|StartOfItem
operator||
name|QTextBoundaryFinder
operator|::
name|EndOfItem
operator|)
operator|)
condition|)
break|break;
block|}
name|Q_ASSERT
argument_list|(
name|boundary
operator|.
name|position
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
operator|*
name|startOffset
operator|=
name|boundary
operator|.
name|position
argument_list|()
expr_stmt|;
return|return
name|txt
operator|.
name|mid
argument_list|(
operator|*
name|startOffset
argument_list|,
operator|*
name|endOffset
operator|-
operator|*
name|startOffset
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the text item of type \a boundaryType that is right after offset \a offset     and sets \a startOffset and \a endOffset values to the start and end positions     of that item; returns an empty string if there is no such an item.     Sets \a startOffset and \a endOffset values to -1 on error.      This default implementation is provided for small text edits. A word processor or     text editor should provide their own efficient implementations. This function makes no     distinction between paragraphs and lines.      \note this function can not take the cursor position into account. By convention     an \a offset of -2 means that this function should use the cursor position as offset.     Thus an offset of -2 must be converted to the cursor position before calling this     function.     An offset of -1 is used for the text length and custom implementations of this function     have to return the result as if the length was passed in as offset. */
end_comment
begin_function
DECL|function|textAfterOffset
name|QString
name|QAccessibleTextInterface
operator|::
name|textAfterOffset
parameter_list|(
name|int
name|offset
parameter_list|,
name|QAccessible
operator|::
name|TextBoundaryType
name|boundaryType
parameter_list|,
name|int
modifier|*
name|startOffset
parameter_list|,
name|int
modifier|*
name|endOffset
parameter_list|)
specifier|const
block|{
specifier|const
name|QString
name|txt
init|=
name|text
argument_list|(
literal|0
argument_list|,
name|characterCount
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|==
operator|-
literal|1
condition|)
name|offset
operator|=
name|txt
operator|.
name|length
argument_list|()
expr_stmt|;
operator|*
name|startOffset
operator|=
operator|*
name|endOffset
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|txt
operator|.
name|isEmpty
argument_list|()
operator|||
name|offset
operator|<
literal|0
operator|||
name|offset
operator|>=
name|txt
operator|.
name|length
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
comment|// type initialized just to silence a compiler warning [-Werror=maybe-uninitialized]
name|QTextBoundaryFinder
operator|::
name|BoundaryType
name|type
init|=
name|QTextBoundaryFinder
operator|::
name|Grapheme
decl_stmt|;
switch|switch
condition|(
name|boundaryType
condition|)
block|{
case|case
name|QAccessible
operator|::
name|CharBoundary
case|:
name|type
operator|=
name|QTextBoundaryFinder
operator|::
name|Grapheme
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|WordBoundary
case|:
name|type
operator|=
name|QTextBoundaryFinder
operator|::
name|Word
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|SentenceBoundary
case|:
name|type
operator|=
name|QTextBoundaryFinder
operator|::
name|Sentence
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|LineBoundary
case|:
case|case
name|QAccessible
operator|::
name|ParagraphBoundary
case|:
comment|// Lines can not use QTextBoundaryFinder since Line there means any potential line-break.
return|return
name|textLineBoundary
argument_list|(
literal|1
argument_list|,
name|txt
argument_list|,
name|offset
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
return|;
case|case
name|QAccessible
operator|::
name|NoBoundary
case|:
comment|// return empty, this function currently only supports single lines, so there can be no line after
return|return
name|QString
argument_list|()
return|;
default|default:
name|Q_UNREACHABLE
argument_list|()
expr_stmt|;
block|}
comment|// keep behavior in sync with QTextCursor::movePosition()!
name|QTextBoundaryFinder
name|boundary
argument_list|(
name|type
argument_list|,
name|txt
argument_list|)
decl_stmt|;
name|boundary
operator|.
name|setPosition
argument_list|(
name|offset
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|toNext
init|=
name|boundary
operator|.
name|toNextBoundary
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|boundary
operator|.
name|boundaryReasons
argument_list|()
operator|&
operator|(
name|QTextBoundaryFinder
operator|::
name|StartOfItem
operator||
name|QTextBoundaryFinder
operator|::
name|EndOfItem
operator|)
operator|)
condition|)
break|break;
if|if
condition|(
name|toNext
operator|<
literal|0
operator|||
name|toNext
operator|>=
name|txt
operator|.
name|length
argument_list|()
condition|)
break|break;
comment|// not found, the boundary might not exist
block|}
name|Q_ASSERT
argument_list|(
name|boundary
operator|.
name|position
argument_list|()
operator|<=
name|txt
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
operator|*
name|startOffset
operator|=
name|boundary
operator|.
name|position
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|toNext
init|=
name|boundary
operator|.
name|toNextBoundary
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|boundary
operator|.
name|boundaryReasons
argument_list|()
operator|&
operator|(
name|QTextBoundaryFinder
operator|::
name|StartOfItem
operator||
name|QTextBoundaryFinder
operator|::
name|EndOfItem
operator|)
operator|)
condition|)
break|break;
if|if
condition|(
name|toNext
operator|<
literal|0
operator|||
name|toNext
operator|>=
name|txt
operator|.
name|length
argument_list|()
condition|)
break|break;
comment|// not found, the boundary might not exist
block|}
name|Q_ASSERT
argument_list|(
name|boundary
operator|.
name|position
argument_list|()
operator|<=
name|txt
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
operator|*
name|endOffset
operator|=
name|boundary
operator|.
name|position
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
operator|*
name|startOffset
operator|==
operator|-
literal|1
operator|)
operator|||
operator|(
operator|*
name|endOffset
operator|==
operator|-
literal|1
operator|)
operator|||
operator|(
operator|*
name|startOffset
operator|==
operator|*
name|endOffset
operator|)
condition|)
block|{
operator|*
name|endOffset
operator|=
operator|-
literal|1
expr_stmt|;
operator|*
name|startOffset
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|txt
operator|.
name|mid
argument_list|(
operator|*
name|startOffset
argument_list|,
operator|*
name|endOffset
operator|-
operator|*
name|startOffset
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the text item of type \a boundaryType at offset \a offset     and sets \a startOffset and \a endOffset values to the start and end positions     of that item; returns an empty string if there is no such an item.     Sets \a startOffset and \a endOffset values to -1 on error.      This default implementation is provided for small text edits. A word processor or     text editor should provide their own efficient implementations. This function makes no     distinction between paragraphs and lines.      \note this function can not take the cursor position into account. By convention     an \a offset of -2 means that this function should use the cursor position as offset.     Thus an offset of -2 must be converted to the cursor position before calling this     function.     An offset of -1 is used for the text length and custom implementations of this function     have to return the result as if the length was passed in as offset. */
end_comment
begin_function
DECL|function|textAtOffset
name|QString
name|QAccessibleTextInterface
operator|::
name|textAtOffset
parameter_list|(
name|int
name|offset
parameter_list|,
name|QAccessible
operator|::
name|TextBoundaryType
name|boundaryType
parameter_list|,
name|int
modifier|*
name|startOffset
parameter_list|,
name|int
modifier|*
name|endOffset
parameter_list|)
specifier|const
block|{
specifier|const
name|QString
name|txt
init|=
name|text
argument_list|(
literal|0
argument_list|,
name|characterCount
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|==
operator|-
literal|1
condition|)
name|offset
operator|=
name|txt
operator|.
name|length
argument_list|()
expr_stmt|;
operator|*
name|startOffset
operator|=
operator|*
name|endOffset
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|txt
operator|.
name|isEmpty
argument_list|()
operator|||
name|offset
argument_list|<
literal|0
operator|||
name|offset
argument_list|>
name|txt
operator|.
name|length
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
if|if
condition|(
name|offset
operator|==
name|txt
operator|.
name|length
argument_list|()
operator|&&
name|boundaryType
operator|==
name|QAccessible
operator|::
name|CharBoundary
condition|)
return|return
name|QString
argument_list|()
return|;
comment|// type initialized just to silence a compiler warning [-Werror=maybe-uninitialized]
name|QTextBoundaryFinder
operator|::
name|BoundaryType
name|type
init|=
name|QTextBoundaryFinder
operator|::
name|Grapheme
decl_stmt|;
switch|switch
condition|(
name|boundaryType
condition|)
block|{
case|case
name|QAccessible
operator|::
name|CharBoundary
case|:
name|type
operator|=
name|QTextBoundaryFinder
operator|::
name|Grapheme
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|WordBoundary
case|:
name|type
operator|=
name|QTextBoundaryFinder
operator|::
name|Word
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|SentenceBoundary
case|:
name|type
operator|=
name|QTextBoundaryFinder
operator|::
name|Sentence
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|LineBoundary
case|:
case|case
name|QAccessible
operator|::
name|ParagraphBoundary
case|:
comment|// Lines can not use QTextBoundaryFinder since Line there means any potential line-break.
return|return
name|textLineBoundary
argument_list|(
literal|0
argument_list|,
name|txt
argument_list|,
name|offset
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
return|;
case|case
name|QAccessible
operator|::
name|NoBoundary
case|:
operator|*
name|startOffset
operator|=
literal|0
expr_stmt|;
operator|*
name|endOffset
operator|=
name|txt
operator|.
name|length
argument_list|()
expr_stmt|;
return|return
name|txt
return|;
default|default:
name|Q_UNREACHABLE
argument_list|()
expr_stmt|;
block|}
comment|// keep behavior in sync with QTextCursor::movePosition()!
name|QTextBoundaryFinder
name|boundary
argument_list|(
name|type
argument_list|,
name|txt
argument_list|)
decl_stmt|;
name|boundary
operator|.
name|setPosition
argument_list|(
name|offset
argument_list|)
expr_stmt|;
do|do
block|{
if|if
condition|(
operator|(
name|boundary
operator|.
name|boundaryReasons
argument_list|()
operator|&
operator|(
name|QTextBoundaryFinder
operator|::
name|StartOfItem
operator||
name|QTextBoundaryFinder
operator|::
name|EndOfItem
operator|)
operator|)
condition|)
break|break;
block|}
do|while
condition|(
name|boundary
operator|.
name|toPreviousBoundary
argument_list|()
operator|>
literal|0
condition|)
do|;
name|Q_ASSERT
argument_list|(
name|boundary
operator|.
name|position
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
operator|*
name|startOffset
operator|=
name|boundary
operator|.
name|position
argument_list|()
expr_stmt|;
while|while
condition|(
name|boundary
operator|.
name|toNextBoundary
argument_list|()
operator|<
name|txt
operator|.
name|length
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|boundary
operator|.
name|boundaryReasons
argument_list|()
operator|&
operator|(
name|QTextBoundaryFinder
operator|::
name|StartOfItem
operator||
name|QTextBoundaryFinder
operator|::
name|EndOfItem
operator|)
operator|)
condition|)
break|break;
block|}
name|Q_ASSERT
argument_list|(
name|boundary
operator|.
name|position
argument_list|()
operator|<=
name|txt
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
operator|*
name|endOffset
operator|=
name|boundary
operator|.
name|position
argument_list|()
expr_stmt|;
return|return
name|txt
operator|.
name|mid
argument_list|(
operator|*
name|startOffset
argument_list|,
operator|*
name|endOffset
operator|-
operator|*
name|startOffset
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QAccessibleTextInterface::removeSelection(int selectionIndex)      Clears the selection with index \a selectionIndex. */
end_comment
begin_comment
comment|/*!     \fn void QAccessibleTextInterface::setCursorPosition(int position)      Moves the cursor to \a position. */
end_comment
begin_comment
comment|/*!     \fn void QAccessibleTextInterface::setSelection(int selectionIndex, int startOffset, int endOffset)      Set the selection \a selectionIndex to the range from \a startOffset to \a endOffset.      \sa addSelection(), removeSelection() */
end_comment
begin_comment
comment|/*!     \fn int QAccessibleTextInterface::characterCount() const      Returns the length of the text (total size including spaces). */
end_comment
begin_comment
comment|/*!     \fn void QAccessibleTextInterface::scrollToSubstring(int startIndex, int endIndex)      Ensures that the text between \a startIndex and \a endIndex is visible. */
end_comment
begin_comment
comment|/*!     \class QAccessibleEditableTextInterface     \ingroup accessibility     \inmodule QtGui      \brief The QAccessibleEditableTextInterface class implements support for objects with editable text.      When implementing this interface you will almost certainly also want to implement \l QAccessibleTextInterface.      \sa QAccessibleInterface      \l{IAccessible2 Specification} */
end_comment
begin_comment
comment|/*!     Destroys the QAccessibleEditableTextInterface. */
end_comment
begin_destructor
DECL|function|~QAccessibleEditableTextInterface
name|QAccessibleEditableTextInterface
operator|::
name|~
name|QAccessibleEditableTextInterface
parameter_list|()
block|{
comment|// must be empty until ### Qt 6
block|}
end_destructor
begin_comment
comment|/*!     \fn void QAccessibleEditableTextInterface::deleteText(int startOffset, int endOffset)      Deletes the text from \a startOffset to \a endOffset. */
end_comment
begin_comment
comment|/*!     \fn void QAccessibleEditableTextInterface::insertText(int offset, const QString&text)      Inserts \a text at position \a offset. */
end_comment
begin_comment
comment|/*!     \fn void QAccessibleEditableTextInterface::replaceText(int startOffset, int endOffset, const QString&text)      Removes the text from \a startOffset to \a endOffset and instead inserts \a text. */
end_comment
begin_comment
comment|/*!     \class QAccessibleValueInterface     \inmodule QtGui     \ingroup accessibility      \brief The QAccessibleValueInterface class implements support for objects that manipulate a value.      This interface should be implemented by accessible objects that represent a value.     Examples are spinner, slider, dial and scroll bar.      Instead of forcing the user to deal with the individual parts of the widgets, this interface     gives an easier approach to the kind of widget it represents.      Usually this interface is implemented by classes that also implement \l QAccessibleInterface.      \l{IAccessible2 Specification} */
end_comment
begin_comment
comment|/*!     Destroys the QAccessibleValueInterface. */
end_comment
begin_destructor
DECL|function|~QAccessibleValueInterface
name|QAccessibleValueInterface
operator|::
name|~
name|QAccessibleValueInterface
parameter_list|()
block|{
comment|// must be empty until ### Qt 6
block|}
end_destructor
begin_comment
comment|/*!     \fn QVariant QAccessibleValueInterface::currentValue() const      Returns the current value of the widget. This is usually a double or int.     \sa setCurrentValue() */
end_comment
begin_comment
comment|/*!     \fn void QAccessibleValueInterface::setCurrentValue(const QVariant&value)      Sets the \a value. If the desired \a value is out of the range of permissible values,     this call will be ignored.      \sa currentValue(), minimumValue(), maximumValue() */
end_comment
begin_comment
comment|/*!     \fn QVariant QAccessibleValueInterface::maximumValue() const      Returns the maximum value this object accepts.     \sa minimumValue(), currentValue() */
end_comment
begin_comment
comment|/*!     \fn QVariant QAccessibleValueInterface::minimumValue() const      Returns the minimum value this object accepts.     \sa maximumValue(), currentValue() */
end_comment
begin_comment
comment|/*!     \fn QVariant QAccessibleValueInterface::minimumStepSize() const      Returns the minimum step size for the accessible.     This is the smalles increment that makes sense when changing the value.     When programatically changing the value it should always be a multiple     of the minimum step size.      Some tools use this value even when the setCurrentValue does not     perform any action. Progress bars for example are read-only but     should return their range divided by 100. */
end_comment
begin_comment
comment|/*!     \class QAccessibleImageInterface     \inmodule QtGui     \ingroup accessibility     \internal     \preliminary      \brief The QAccessibleImageInterface class implements support for     the IAccessibleImage interface.      \l{IAccessible2 Specification} */
end_comment
begin_comment
comment|/*!     Destroys the QAccessibleImageInterface. */
end_comment
begin_destructor
DECL|function|~QAccessibleImageInterface
name|QAccessibleImageInterface
operator|::
name|~
name|QAccessibleImageInterface
parameter_list|()
block|{
comment|// must be empty until ### Qt 6
block|}
end_destructor
begin_comment
comment|/*!     \class QAccessibleTableCellInterface     \inmodule QtGui     \ingroup accessibility      \brief The QAccessibleTableCellInterface class implements support for     the IAccessibleTable2 Cell interface.      \l{IAccessible2 Specification} */
end_comment
begin_comment
comment|/*!     Destroys the QAccessibleTableCellInterface. */
end_comment
begin_destructor
DECL|function|~QAccessibleTableCellInterface
name|QAccessibleTableCellInterface
operator|::
name|~
name|QAccessibleTableCellInterface
parameter_list|()
block|{
comment|// must be empty until ### Qt 6
block|}
end_destructor
begin_comment
comment|/*!     \fn virtual int QAccessibleTableCellInterface::columnExtent() const     Returns the number of columns occupied by this cell accessible. */
end_comment
begin_comment
comment|/*!     \fn virtual QList<QAccessibleInterface*> QAccessibleTableCellInterface::columnHeaderCells() const     Returns the column headers as an array of cell accessibles. */
end_comment
begin_comment
comment|/*!     \fn virtual int QAccessibleTableCellInterface::columnIndex() const     Translates this cell accessible into the corresponding column index. */
end_comment
begin_comment
comment|/*!     \fn virtual int QAccessibleTableCellInterface::rowExtent() const     Returns the number of rows occupied by this cell accessible. */
end_comment
begin_comment
comment|/*!     \fn virtual QList<QAccessibleInterface*> QAccessibleTableCellInterface::rowHeaderCells() const     Returns the row headers as an array of cell accessibles. */
end_comment
begin_comment
comment|/*!     \fn virtual int QAccessibleTableCellInterface::rowIndex() const     Translates this cell accessible into the corresponding row index. */
end_comment
begin_comment
comment|/*!     \fn virtual bool QAccessibleTableCellInterface::isSelected() const     Returns a boolean value indicating whether this cell is selected. */
end_comment
begin_comment
comment|/*!     \fn virtual QAccessibleInterface *QAccessibleTableCellInterface::table() const     Returns the QAccessibleInterface of the table containing this cell. */
end_comment
begin_comment
comment|/*!     \class QAccessibleTableInterface     \ingroup accessibility      \brief The QAccessibleTableInterface class implements support for     the IAccessibleTable2 interface.      \l{IAccessible2 Specification} */
end_comment
begin_comment
comment|/*!     Destroys the QAccessibleTableInterface. */
end_comment
begin_destructor
DECL|function|~QAccessibleTableInterface
name|QAccessibleTableInterface
operator|::
name|~
name|QAccessibleTableInterface
parameter_list|()
block|{
comment|// must be empty until ### Qt 6
block|}
end_destructor
begin_comment
comment|/*!     \fn virtual QAccessibleInterface *QAccessibleTableInterface::cellAt(int row, int column) const     Returns the cell at the specified \a row and \a column in the table. */
end_comment
begin_comment
comment|/*!     \fn virtual QAccessibleInterface *QAccessibleTableInterface::caption() const     Returns the caption for the table. */
end_comment
begin_comment
comment|/*!     \fn virtual QString QAccessibleTableInterface::columnDescription(int column) const     Returns the description text of the specified \a column in the table. */
end_comment
begin_comment
comment|/*!     \fn virtual int QAccessibleTableInterface::columnCount() const     Returns the total number of columns in table. */
end_comment
begin_comment
comment|/*!     \fn virtual int QAccessibleTableInterface::rowCount() const     Returns the total number of rows in table. */
end_comment
begin_comment
comment|/*!     \fn virtual int QAccessibleTableInterface::selectedCellCount() const     Returns the total number of selected cells. */
end_comment
begin_comment
comment|/*!     \fn virtual int QAccessibleTableInterface::selectedColumnCount() const     Returns the total number of selected columns. */
end_comment
begin_comment
comment|/*!     \fn virtual int QAccessibleTableInterface::selectedRowCount() const     Returns the total number of selected rows. */
end_comment
begin_comment
comment|/*!     \fn virtual QString QAccessibleTableInterface::rowDescription(int row) const     Returns the description text of the specified \a row in the table. */
end_comment
begin_comment
comment|/*!     \fn virtual QList<int> QAccessibleTableInterface::selectedCells() const     Returns the list of selected cell (by their index as \l QAccessibleInterface::child() accepts). */
end_comment
begin_comment
comment|/*!     \fn virtual QList<int> QAccessibleTableInterface::selectedColumns() const     Returns the list of currently selected columns. */
end_comment
begin_comment
comment|/*!     \fn virtual QList<int> QAccessibleTableInterface::selectedRows() const     Returns the list of currently selected columns. */
end_comment
begin_comment
comment|/*!     \fn virtual QAccessibleInterface *QAccessibleTableInterface::summary() const     Returns a QAccessibleInterface that represents a summary of the table.     This function may return 0 if no such interface exists. */
end_comment
begin_comment
comment|/*!     \fn virtual bool QAccessibleTableInterface::isColumnSelected(int column) const     Returns a boolean value indicating whether the specified \a column is completely selected. */
end_comment
begin_comment
comment|/*!     \fn virtual bool QAccessibleTableInterface::isRowSelected(int row) const     Returns a boolean value indicating whether the specified \a row is completely selected. */
end_comment
begin_comment
comment|/*!     \fn virtual bool QAccessibleTableInterface::selectRow(int row)     Selects \a row. This function might unselect all previously selected rows.     Returns \c true if the selection was successful. */
end_comment
begin_comment
comment|/*!     \fn virtual bool QAccessibleTableInterface::selectColumn(int column)     Selects \a column. This function might unselect all previously selected columns.     Returns \c true if the selection was successful. */
end_comment
begin_comment
comment|/*!     \fn virtual bool QAccessibleTableInterface::unselectRow(int row)     Unselects \a row, leaving other selected rows selected (if any).     Returns \c true if the selection was successful. */
end_comment
begin_comment
comment|/*!     \fn virtual bool QAccessibleTableInterface::unselectColumn(int column)     Unselects \a column, leaving other selected columns selected (if any).     Returns \c true if the selection was successful. */
end_comment
begin_comment
comment|/*!     \fn virtual void QAccessibleTableInterface::modelChange(QAccessibleTableModelChangeEvent *event)      Informs about a change in the model's layout.     The \a event contains the details.     \sa QAccessibleTableModelChangeEvent */
end_comment
begin_comment
comment|/*!     \class QAccessibleActionInterface     \ingroup accessibility      \brief The QAccessibleActionInterface class implements support for     invocable actions in the interface.      Accessible objects should implement the action interface if they support user interaction.     Usually this interface is implemented by classes that also implement \l QAccessibleInterface.      The supported actions should use the predefined actions offered in this class unless they do not     fit a predefined action. In that case a custom action can be added.      When subclassing QAccessibleActionInterface you need to provide a list of actionNames which     is the primary means to discover the available actions. Action names are never localized.     In order to present actions to the user there are two functions that need to return localized versions     of the name and give a description of the action. For the predefined action names use     \l QAccessibleActionInterface::localizedActionName() and \l QAccessibleActionInterface::localizedActionDescription()     to return their localized counterparts.      In general you should use one of the predefined action names, unless describing an action that does not fit these:     \table     \header \li Action name         \li Description     \row    \li \l toggleAction()   \li toggles the item (checkbox, radio button, switch, ...)     \row    \li \l decreaseAction() \li decrease the value of the accessible (e.g. spinbox)     \row    \li \l increaseAction() \li increase the value of the accessible (e.g. spinbox)     \row    \li \l pressAction()    \li press or click or activate the accessible (should correspont to clicking the object with the mouse)     \row    \li \l setFocusAction() \li set the focus to this accessible     \row    \li \l showMenuAction() \li show a context menu, corresponds to right-clicks     \endtable      In order to invoke the action, \l doAction() is called with an action name.      Most widgets will simply implement \l pressAction(). This is what happens when the widget is activated by     being clicked, space pressed or similar.      \l{IAccessible2 Specification} */
end_comment
begin_comment
comment|/*!     Destroys the QAccessibleActionInterface. */
end_comment
begin_destructor
DECL|function|~QAccessibleActionInterface
name|QAccessibleActionInterface
operator|::
name|~
name|QAccessibleActionInterface
parameter_list|()
block|{
comment|// must be empty until ### Qt 6
block|}
end_destructor
begin_comment
comment|/*!     \fn QStringList QAccessibleActionInterface::actionNames() const      Returns the list of actions supported by this accessible object.     The actions returned should be in preferred order,     i.e. the action that the user most likely wants to trigger should be returned first,     while the least likely action should be returned last.      The list does only contain actions that can be invoked.     It won't return disabled actions, or actions associated with disabled UI controls.      The list can be empty.      Note that this list is not localized. For a localized representation re-implement \l localizedActionName()     and \l localizedActionDescription()      \sa doAction(), localizedActionName(), localizedActionDescription() */
end_comment
begin_comment
comment|/*!     \fn QString QAccessibleActionInterface::localizedActionName(const QString&actionName) const      Returns a localized action name of \a actionName.      For custom actions this function has to be re-implemented.     When using one of the default names, you can call this function in QAccessibleActionInterface     to get the localized string.      \sa actionNames(), localizedActionDescription() */
end_comment
begin_comment
comment|/*!     \fn QString QAccessibleActionInterface::localizedActionDescription(const QString&actionName) const      Returns a localized action description of the action \a actionName.      When using one of the default names, you can call this function in QAccessibleActionInterface     to get the localized string.      \sa actionNames(), localizedActionName() */
end_comment
begin_comment
comment|/*!     \fn void QAccessibleActionInterface::doAction(const QString&actionName)      Invokes the action specified by \a actionName.     Note that \a actionName is the non-localized name as returned by \l actionNames()     This function is usually implemented by calling the same functions     that other user interaction, such as clicking the object, would trigger.      \sa actionNames() */
end_comment
begin_comment
comment|/*!     \fn QStringList QAccessibleActionInterface::keyBindingsForAction(const QString&actionName) const      Returns a list of the keyboard shortcuts available for invoking the action named \a actionName.      This is important to let users learn alternative ways of using the application by emphasizing the keyboard.      \sa actionNames() */
end_comment
begin_struct
DECL|struct|QAccessibleActionStrings
struct|struct
name|QAccessibleActionStrings
block|{
DECL|function|QAccessibleActionStrings
name|QAccessibleActionStrings
parameter_list|()
member_init_list|:
name|pressAction
argument_list|(
name|QStringLiteral
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QAccessibleActionInterface"
argument_list|,
literal|"Press"
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|increaseAction
argument_list|(
name|QStringLiteral
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QAccessibleActionInterface"
argument_list|,
literal|"Increase"
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|decreaseAction
argument_list|(
name|QStringLiteral
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QAccessibleActionInterface"
argument_list|,
literal|"Decrease"
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|showMenuAction
argument_list|(
name|QStringLiteral
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QAccessibleActionInterface"
argument_list|,
literal|"ShowMenu"
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|setFocusAction
argument_list|(
name|QStringLiteral
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QAccessibleActionInterface"
argument_list|,
literal|"SetFocus"
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|toggleAction
argument_list|(
name|QStringLiteral
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QAccessibleActionInterface"
argument_list|,
literal|"Toggle"
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|scrollLeftAction
argument_list|(
name|QStringLiteral
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QAccessibleActionInterface"
argument_list|,
literal|"Scroll Left"
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|scrollRightAction
argument_list|(
name|QStringLiteral
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QAccessibleActionInterface"
argument_list|,
literal|"Scroll Right"
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|scrollUpAction
argument_list|(
name|QStringLiteral
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QAccessibleActionInterface"
argument_list|,
literal|"Scroll Up"
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|scrollDownAction
argument_list|(
name|QStringLiteral
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QAccessibleActionInterface"
argument_list|,
literal|"Scroll Down"
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|previousPageAction
argument_list|(
name|QStringLiteral
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QAccessibleActionInterface"
argument_list|,
literal|"Previous Page"
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|nextPageAction
argument_list|(
name|QStringLiteral
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QAccessibleActionInterface"
argument_list|,
literal|"Next Page"
argument_list|)
argument_list|)
argument_list|)
block|{}
DECL|member|pressAction
specifier|const
name|QString
name|pressAction
decl_stmt|;
DECL|member|increaseAction
specifier|const
name|QString
name|increaseAction
decl_stmt|;
DECL|member|decreaseAction
specifier|const
name|QString
name|decreaseAction
decl_stmt|;
DECL|member|showMenuAction
specifier|const
name|QString
name|showMenuAction
decl_stmt|;
DECL|member|setFocusAction
specifier|const
name|QString
name|setFocusAction
decl_stmt|;
DECL|member|toggleAction
specifier|const
name|QString
name|toggleAction
decl_stmt|;
DECL|member|scrollLeftAction
specifier|const
name|QString
name|scrollLeftAction
decl_stmt|;
DECL|member|scrollRightAction
specifier|const
name|QString
name|scrollRightAction
decl_stmt|;
DECL|member|scrollUpAction
specifier|const
name|QString
name|scrollUpAction
decl_stmt|;
DECL|member|scrollDownAction
specifier|const
name|QString
name|scrollDownAction
decl_stmt|;
DECL|member|previousPageAction
specifier|const
name|QString
name|previousPageAction
decl_stmt|;
DECL|member|nextPageAction
specifier|const
name|QString
name|nextPageAction
decl_stmt|;
DECL|function|localizedDescription
name|QString
name|localizedDescription
parameter_list|(
specifier|const
name|QString
modifier|&
name|actionName
parameter_list|)
block|{
if|if
condition|(
name|actionName
operator|==
name|pressAction
condition|)
return|return
name|QAccessibleActionInterface
operator|::
name|tr
argument_list|(
literal|"Triggers the action"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|actionName
operator|==
name|increaseAction
condition|)
return|return
name|QAccessibleActionInterface
operator|::
name|tr
argument_list|(
literal|"Increase the value"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|actionName
operator|==
name|decreaseAction
condition|)
return|return
name|QAccessibleActionInterface
operator|::
name|tr
argument_list|(
literal|"Decrease the value"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|actionName
operator|==
name|showMenuAction
condition|)
return|return
name|QAccessibleActionInterface
operator|::
name|tr
argument_list|(
literal|"Shows the menu"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|actionName
operator|==
name|setFocusAction
condition|)
return|return
name|QAccessibleActionInterface
operator|::
name|tr
argument_list|(
literal|"Sets the focus"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|actionName
operator|==
name|toggleAction
condition|)
return|return
name|QAccessibleActionInterface
operator|::
name|tr
argument_list|(
literal|"Toggles the state"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|actionName
operator|==
name|scrollLeftAction
condition|)
return|return
name|QAccessibleActionInterface
operator|::
name|tr
argument_list|(
literal|"Scrolls to the left"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|actionName
operator|==
name|scrollRightAction
condition|)
return|return
name|QAccessibleActionInterface
operator|::
name|tr
argument_list|(
literal|"Scrolls to the right"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|actionName
operator|==
name|scrollUpAction
condition|)
return|return
name|QAccessibleActionInterface
operator|::
name|tr
argument_list|(
literal|"Scrolls up"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|actionName
operator|==
name|scrollDownAction
condition|)
return|return
name|QAccessibleActionInterface
operator|::
name|tr
argument_list|(
literal|"Scrolls down"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|actionName
operator|==
name|previousPageAction
condition|)
return|return
name|QAccessibleActionInterface
operator|::
name|tr
argument_list|(
literal|"Goes back a page"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|actionName
operator|==
name|nextPageAction
condition|)
return|return
name|QAccessibleActionInterface
operator|::
name|tr
argument_list|(
literal|"Goes to the next page"
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
block|}
struct|;
end_struct
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QAccessibleActionStrings
argument_list|,
argument|accessibleActionStrings
argument_list|)
end_macro
begin_function
DECL|function|localizedActionName
name|QString
name|QAccessibleActionInterface
operator|::
name|localizedActionName
parameter_list|(
specifier|const
name|QString
modifier|&
name|actionName
parameter_list|)
specifier|const
block|{
return|return
name|QAccessibleActionInterface
operator|::
name|tr
argument_list|(
name|qPrintable
argument_list|(
name|actionName
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|localizedActionDescription
name|QString
name|QAccessibleActionInterface
operator|::
name|localizedActionDescription
parameter_list|(
specifier|const
name|QString
modifier|&
name|actionName
parameter_list|)
specifier|const
block|{
return|return
name|accessibleActionStrings
argument_list|()
operator|->
name|localizedDescription
argument_list|(
name|actionName
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the name of the press default action.     \sa actionNames(), localizedActionName()   */
end_comment
begin_function
DECL|function|pressAction
specifier|const
name|QString
modifier|&
name|QAccessibleActionInterface
operator|::
name|pressAction
parameter_list|()
block|{
return|return
name|accessibleActionStrings
argument_list|()
operator|->
name|pressAction
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the name of the increase default action.     \sa actionNames(), localizedActionName()   */
end_comment
begin_function
DECL|function|increaseAction
specifier|const
name|QString
modifier|&
name|QAccessibleActionInterface
operator|::
name|increaseAction
parameter_list|()
block|{
return|return
name|accessibleActionStrings
argument_list|()
operator|->
name|increaseAction
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the name of the decrease default action.     \sa actionNames(), localizedActionName()   */
end_comment
begin_function
DECL|function|decreaseAction
specifier|const
name|QString
modifier|&
name|QAccessibleActionInterface
operator|::
name|decreaseAction
parameter_list|()
block|{
return|return
name|accessibleActionStrings
argument_list|()
operator|->
name|decreaseAction
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the name of the show menu default action.     \sa actionNames(), localizedActionName()   */
end_comment
begin_function
DECL|function|showMenuAction
specifier|const
name|QString
modifier|&
name|QAccessibleActionInterface
operator|::
name|showMenuAction
parameter_list|()
block|{
return|return
name|accessibleActionStrings
argument_list|()
operator|->
name|showMenuAction
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the name of the set focus default action.     \sa actionNames(), localizedActionName()   */
end_comment
begin_function
DECL|function|setFocusAction
specifier|const
name|QString
modifier|&
name|QAccessibleActionInterface
operator|::
name|setFocusAction
parameter_list|()
block|{
return|return
name|accessibleActionStrings
argument_list|()
operator|->
name|setFocusAction
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the name of the toggle default action.     \sa actionNames(), localizedActionName()   */
end_comment
begin_function
DECL|function|toggleAction
specifier|const
name|QString
modifier|&
name|QAccessibleActionInterface
operator|::
name|toggleAction
parameter_list|()
block|{
return|return
name|accessibleActionStrings
argument_list|()
operator|->
name|toggleAction
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the name of the scroll left default action.     \sa actionNames(), localizedActionName()   */
end_comment
begin_function
DECL|function|scrollLeftAction
specifier|const
name|QString
modifier|&
name|QAccessibleActionInterface
operator|::
name|scrollLeftAction
parameter_list|()
block|{
return|return
name|accessibleActionStrings
argument_list|()
operator|->
name|scrollLeftAction
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the name of the scroll right default action.     \sa actionNames(), localizedActionName()   */
end_comment
begin_function
DECL|function|scrollRightAction
specifier|const
name|QString
modifier|&
name|QAccessibleActionInterface
operator|::
name|scrollRightAction
parameter_list|()
block|{
return|return
name|accessibleActionStrings
argument_list|()
operator|->
name|scrollRightAction
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the name of the scroll up default action.     \sa actionNames(), localizedActionName()   */
end_comment
begin_function
DECL|function|scrollUpAction
specifier|const
name|QString
modifier|&
name|QAccessibleActionInterface
operator|::
name|scrollUpAction
parameter_list|()
block|{
return|return
name|accessibleActionStrings
argument_list|()
operator|->
name|scrollUpAction
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the name of the scroll down default action.     \sa actionNames(), localizedActionName()   */
end_comment
begin_function
DECL|function|scrollDownAction
specifier|const
name|QString
modifier|&
name|QAccessibleActionInterface
operator|::
name|scrollDownAction
parameter_list|()
block|{
return|return
name|accessibleActionStrings
argument_list|()
operator|->
name|scrollDownAction
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the name of the previous page default action.     \sa actionNames(), localizedActionName()   */
end_comment
begin_function
DECL|function|previousPageAction
specifier|const
name|QString
modifier|&
name|QAccessibleActionInterface
operator|::
name|previousPageAction
parameter_list|()
block|{
return|return
name|accessibleActionStrings
argument_list|()
operator|->
name|previousPageAction
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the name of the next page default action.     \sa actionNames(), localizedActionName()   */
end_comment
begin_function
DECL|function|nextPageAction
specifier|const
name|QString
modifier|&
name|QAccessibleActionInterface
operator|::
name|nextPageAction
parameter_list|()
block|{
return|return
name|accessibleActionStrings
argument_list|()
operator|->
name|nextPageAction
return|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|qAccessibleLocalizedActionDescription
name|QString
name|qAccessibleLocalizedActionDescription
parameter_list|(
specifier|const
name|QString
modifier|&
name|actionName
parameter_list|)
block|{
return|return
name|accessibleActionStrings
argument_list|()
operator|->
name|localizedDescription
argument_list|(
name|actionName
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ACCESSIBILITY
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
