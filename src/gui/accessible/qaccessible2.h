begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QACCESSIBLE2_H
end_ifndef
begin_define
DECL|macro|QACCESSIBLE2_H
define|#
directive|define
name|QACCESSIBLE2_H
end_define
begin_include
include|#
directive|include
file|<QtGui/qaccessible.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qcoreapplication.h>
end_include
begin_function
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
parameter_list|(
name|Gui
parameter_list|)
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|class
name|QModelIndex
decl_stmt|;
name|namespace
name|QAccessible2
decl_stmt|{     enum CoordinateType
block|{
name|RelativeToScreen
operator|=
literal|0
operator|,
name|RelativeToParent
operator|=
literal|1
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_enum
enum|enum
name|BoundaryType
block|{
name|CharBoundary
block|,
name|WordBoundary
block|,
name|SentenceBoundary
block|,
name|ParagraphBoundary
block|,
name|LineBoundary
block|,
name|NoBoundary
block|}
enum|;
end_enum
begin_enum
enum|enum
name|TableModelChangeType
block|{
name|TableModelChangeInsert
block|,
name|TableModelChangeDelete
block|,
name|TableModelChangeUpdate
block|}
enum|;
end_enum
begin_struct
struct|struct
name|TableModelChange
block|{
name|int
name|firstColumn
decl_stmt|;
name|int
name|firstRow
decl_stmt|;
name|int
name|lastColumn
decl_stmt|;
name|int
name|lastRow
decl_stmt|;
name|TableModelChangeType
name|type
decl_stmt|;
name|TableModelChange
argument_list|()
operator|:
name|firstColumn
argument_list|(
literal|0
argument_list|)
operator|,
name|firstRow
argument_list|(
literal|0
argument_list|)
operator|,
name|lastColumn
argument_list|(
literal|0
argument_list|)
operator|,
name|lastRow
argument_list|(
literal|0
argument_list|)
operator|,
name|type
argument_list|(
argument|TableModelChangeUpdate
argument_list|)
block|{}
block|}
struct|;
end_struct
begin_decl_stmt
unit|}  class
name|Q_GUI_EXPORT
name|QAccessibleTextInterface
block|{
name|public
label|:
name|virtual
operator|~
name|QAccessibleTextInterface
argument_list|()
block|{}
name|virtual
name|void
name|addSelection
argument_list|(
argument|int startOffset
argument_list|,
argument|int endOffset
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|QString
name|attributes
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
modifier|*
name|startOffset
parameter_list|,
name|int
modifier|*
name|endOffset
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|int
name|cursorPosition
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|QRect
name|characterRect
argument_list|(
name|int
name|offset
argument_list|,
name|QAccessible2
operator|::
name|CoordinateType
name|coordType
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|int
name|selectionCount
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|int
name|offsetAtPoint
argument_list|(
specifier|const
name|QPoint
operator|&
name|point
argument_list|,
name|QAccessible2
operator|::
name|CoordinateType
name|coordType
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|void
name|selection
parameter_list|(
name|int
name|selectionIndex
parameter_list|,
name|int
modifier|*
name|startOffset
parameter_list|,
name|int
modifier|*
name|endOffset
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|text
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|textBeforeOffset
argument_list|(
name|int
name|offset
argument_list|,
name|QAccessible2
operator|::
name|BoundaryType
name|boundaryType
argument_list|,
name|int
operator|*
name|startOffset
argument_list|,
name|int
operator|*
name|endOffset
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|QString
name|textAfterOffset
argument_list|(
name|int
name|offset
argument_list|,
name|QAccessible2
operator|::
name|BoundaryType
name|boundaryType
argument_list|,
name|int
operator|*
name|startOffset
argument_list|,
name|int
operator|*
name|endOffset
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|QString
name|textAtOffset
argument_list|(
name|int
name|offset
argument_list|,
name|QAccessible2
operator|::
name|BoundaryType
name|boundaryType
argument_list|,
name|int
operator|*
name|startOffset
argument_list|,
name|int
operator|*
name|endOffset
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|void
name|removeSelection
parameter_list|(
name|int
name|selectionIndex
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|setCursorPosition
parameter_list|(
name|int
name|position
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|setSelection
parameter_list|(
name|int
name|selectionIndex
parameter_list|,
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|int
name|characterCount
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|void
name|scrollToSubstring
parameter_list|(
name|int
name|startIndex
parameter_list|,
name|int
name|endIndex
parameter_list|)
init|=
literal|0
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QAccessibleEditableTextInterface
block|{
name|public
label|:
name|virtual
operator|~
name|QAccessibleEditableTextInterface
argument_list|()
block|{}
name|virtual
name|void
name|copyText
argument_list|(
argument|int startOffset
argument_list|,
argument|int endOffset
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|void
name|deleteText
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|insertText
parameter_list|(
name|int
name|offset
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|cutText
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|pasteText
parameter_list|(
name|int
name|offset
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|replaceText
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|setAttributes
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|,
specifier|const
name|QString
modifier|&
name|attributes
parameter_list|)
init|=
literal|0
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QAccessibleSimpleEditableTextInterface
range|:
name|public
name|QAccessibleEditableTextInterface
block|{
name|public
operator|:
name|QAccessibleSimpleEditableTextInterface
argument_list|(
name|QAccessibleInterface
operator|*
name|accessibleInterface
argument_list|)
block|;
comment|//###
name|void
name|copyText
argument_list|(
argument|int startOffset
argument_list|,
argument|int endOffset
argument_list|)
block|;
name|void
name|deleteText
argument_list|(
argument|int startOffset
argument_list|,
argument|int endOffset
argument_list|)
block|;
name|void
name|insertText
argument_list|(
argument|int offset
argument_list|,
argument|const QString&text
argument_list|)
block|;
name|void
name|cutText
argument_list|(
argument|int startOffset
argument_list|,
argument|int endOffset
argument_list|)
block|;
name|void
name|pasteText
argument_list|(
argument|int offset
argument_list|)
block|;
name|void
name|replaceText
argument_list|(
argument|int startOffset
argument_list|,
argument|int endOffset
argument_list|,
argument|const QString&text
argument_list|)
block|;
specifier|inline
name|void
name|setAttributes
argument_list|(
argument|int
argument_list|,
argument|int
argument_list|,
argument|const QString&
argument_list|)
block|{}
name|private
operator|:
name|QAccessibleInterface
operator|*
name|iface
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QAccessibleValueInterface
block|{
name|public
label|:
name|virtual
operator|~
name|QAccessibleValueInterface
argument_list|()
block|{}
name|virtual
name|QVariant
name|currentValue
argument_list|()
operator|=
literal|0
expr_stmt|;
name|virtual
name|void
name|setCurrentValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QVariant
name|maximumValue
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|QVariant
name|minimumValue
parameter_list|()
init|=
literal|0
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QAccessibleTableInterface
block|{
name|public
label|:
name|virtual
name|QAccessibleInterface
modifier|*
name|accessibleAt
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QAccessibleInterface
modifier|*
name|caption
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|int
name|childIndex
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|columnDescription
parameter_list|(
name|int
name|column
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|int
name|columnSpan
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QAccessibleInterface
modifier|*
name|columnHeader
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|int
name|columnIndex
parameter_list|(
name|int
name|childIndex
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|int
name|columnCount
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|int
name|rowCount
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|int
name|selectedColumnCount
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|int
name|selectedRowCount
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|rowDescription
parameter_list|(
name|int
name|row
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|int
name|rowSpan
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QAccessibleInterface
modifier|*
name|rowHeader
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|int
name|rowIndex
parameter_list|(
name|int
name|childIndex
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|int
name|selectedRows
argument_list|(
name|int
name|maxRows
argument_list|,
name|QList
operator|<
name|int
operator|>
operator|*
name|rows
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|int
name|selectedColumns
argument_list|(
name|int
name|maxColumns
argument_list|,
name|QList
operator|<
name|int
operator|>
operator|*
name|columns
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|QAccessibleInterface
modifier|*
name|summary
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|isColumnSelected
parameter_list|(
name|int
name|column
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|isRowSelected
parameter_list|(
name|int
name|row
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|isSelected
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|selectRow
parameter_list|(
name|int
name|row
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|selectColumn
parameter_list|(
name|int
name|column
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|unselectRow
parameter_list|(
name|int
name|row
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|unselectColumn
parameter_list|(
name|int
name|column
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|cellAtIndex
parameter_list|(
name|int
name|index
parameter_list|,
name|int
modifier|*
name|row
parameter_list|,
name|int
modifier|*
name|column
parameter_list|,
name|int
modifier|*
name|rowSpan
parameter_list|,
name|int
modifier|*
name|columnSpan
parameter_list|,
name|bool
modifier|*
name|isSelected
parameter_list|)
init|=
literal|0
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QAccessibleTable2CellInterface
range|:
name|public
name|QAccessibleInterface
block|{
name|public
operator|:
comment|//            Returns the number of columns occupied by this cell accessible.
name|virtual
name|int
name|columnExtent
argument_list|()
specifier|const
operator|=
literal|0
block|;
comment|//            Returns the column headers as an array of cell accessibles.
name|virtual
name|QList
operator|<
name|QAccessibleInterface
operator|*
operator|>
name|columnHeaderCells
argument_list|()
specifier|const
operator|=
literal|0
block|;
comment|//            Translates this cell accessible into the corresponding column index.
name|virtual
name|int
name|columnIndex
argument_list|()
specifier|const
operator|=
literal|0
block|;
comment|//            Returns the number of rows occupied by this cell accessible.
name|virtual
name|int
name|rowExtent
argument_list|()
specifier|const
operator|=
literal|0
block|;
comment|//            Returns the row headers as an array of cell accessibles.
name|virtual
name|QList
operator|<
name|QAccessibleInterface
operator|*
operator|>
name|rowHeaderCells
argument_list|()
specifier|const
operator|=
literal|0
block|;
comment|//            Translates this cell accessible into the corresponding row index.
name|virtual
name|int
name|rowIndex
argument_list|()
specifier|const
operator|=
literal|0
block|;
comment|//            Returns a boolean value indicating whether this cell is selected.
name|virtual
name|bool
name|isSelected
argument_list|()
specifier|const
operator|=
literal|0
block|;
comment|//            Gets the row and column indexes and extents of this cell accessible and whether or not it is selected.
name|virtual
name|void
name|rowColumnExtents
argument_list|(
argument|int *row
argument_list|,
argument|int *column
argument_list|,
argument|int *rowExtents
argument_list|,
argument|int *columnExtents
argument_list|,
argument|bool *selected
argument_list|)
specifier|const
operator|=
literal|0
block|;
comment|//            Returns a reference to the accessbile of the containing table.
name|virtual
name|QAccessibleTable2Interface
operator|*
name|table
argument_list|()
specifier|const
operator|=
literal|0
block|;
comment|// #### Qt5 this should not be here but part of the state
name|virtual
name|bool
name|isExpandable
argument_list|()
specifier|const
operator|=
literal|0
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QAccessibleTable2Interface
block|{
name|public
label|:
comment|// Returns the cell at the specified row and column in the table.
name|virtual
name|QAccessibleTable2CellInterface
modifier|*
name|cellAt
argument_list|(
name|int
name|row
argument_list|,
name|int
name|column
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
comment|// Returns the caption for the table.
name|virtual
name|QAccessibleInterface
operator|*
name|caption
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|// Returns the description text of the specified column in the table.
name|virtual
name|QString
name|columnDescription
argument_list|(
name|int
name|column
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
comment|// Returns the total number of columns in table.
name|virtual
name|int
name|columnCount
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|// Returns the total number of rows in table.
name|virtual
name|int
name|rowCount
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|// Returns the total number of selected cells.
name|virtual
name|int
name|selectedCellCount
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|// Returns the total number of selected columns.
name|virtual
name|int
name|selectedColumnCount
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|// Returns the total number of selected rows.
name|virtual
name|int
name|selectedRowCount
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|// Returns the description text of the specified row in the table.
name|virtual
name|QString
name|rowDescription
argument_list|(
name|int
name|row
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
comment|// Returns a list of accessibles currently selected.
name|virtual
name|QList
operator|<
name|QAccessibleTable2CellInterface
operator|*
operator|>
name|selectedCells
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|// Returns a list of column indexes currently selected (0 based).
name|virtual
name|QList
operator|<
name|int
operator|>
name|selectedColumns
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|// Returns a list of row indexes currently selected (0 based).
name|virtual
name|QList
operator|<
name|int
operator|>
name|selectedRows
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|// Returns the summary description of the table.
name|virtual
name|QAccessibleInterface
operator|*
name|summary
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|// Returns a boolean value indicating whether the specified column is completely selected.
name|virtual
name|bool
name|isColumnSelected
argument_list|(
name|int
name|column
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
comment|// Returns a boolean value indicating whether the specified row is completely selected.
name|virtual
name|bool
name|isRowSelected
argument_list|(
name|int
name|row
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
comment|// Selects a row and unselects all previously selected rows.
name|virtual
name|bool
name|selectRow
parameter_list|(
name|int
name|row
parameter_list|)
init|=
literal|0
function_decl|;
comment|// Selects a column and unselects all previously selected columns.
name|virtual
name|bool
name|selectColumn
parameter_list|(
name|int
name|column
parameter_list|)
init|=
literal|0
function_decl|;
comment|// Unselects one row, leaving other selected rows selected (if any).
name|virtual
name|bool
name|unselectRow
parameter_list|(
name|int
name|row
parameter_list|)
init|=
literal|0
function_decl|;
comment|// Unselects one column, leaving other selected columns selected (if any).
name|virtual
name|bool
name|unselectColumn
parameter_list|(
name|int
name|column
parameter_list|)
init|=
literal|0
function_decl|;
comment|// Returns the type and extents describing how a table changed.
name|virtual
name|QAccessible2
operator|::
name|TableModelChange
name|modelChange
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|protected
label|:
comment|// These functions are called when the model changes.
name|virtual
name|void
name|modelReset
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|void
name|rowsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|rowsRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|columnsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|columnsRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|rowsMoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|destination
parameter_list|,
name|int
name|row
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|columnsMoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|destination
parameter_list|,
name|int
name|column
parameter_list|)
init|=
literal|0
function_decl|;
name|friend
name|class
name|QAbstractItemView
decl_stmt|;
name|friend
name|class
name|QAbstractItemViewPrivate
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QAccessibleActionInterface
block|{
name|Q_DECLARE_TR_FUNCTIONS
argument_list|(
argument|QAccessibleActionInterface
argument_list|)
name|public
label|:
name|virtual
name|QStringList
name|actionNames
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|QString
name|localizedActionName
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QString
name|localizedActionDescription
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|doAction
parameter_list|(
specifier|const
name|QString
modifier|&
name|actionName
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QStringList
name|keyBindingsForAction
argument_list|(
specifier|const
name|QString
operator|&
name|actionName
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|QString
modifier|&
name|pressAction
parameter_list|()
function_decl|;
specifier|static
specifier|const
name|QString
modifier|&
name|increaseAction
parameter_list|()
function_decl|;
specifier|static
specifier|const
name|QString
modifier|&
name|decreaseAction
parameter_list|()
function_decl|;
specifier|static
specifier|const
name|QString
modifier|&
name|showMenuAction
parameter_list|()
function_decl|;
specifier|static
specifier|const
name|QString
modifier|&
name|setFocusAction
parameter_list|()
function_decl|;
specifier|static
specifier|const
name|QString
modifier|&
name|checkAction
parameter_list|()
function_decl|;
specifier|static
specifier|const
name|QString
modifier|&
name|uncheckAction
parameter_list|()
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QAccessibleImageInterface
block|{
name|public
label|:
name|virtual
name|QString
name|imageDescription
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|QSize
name|imageSize
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|QRect
name|imagePosition
argument_list|(
name|QAccessible2
operator|::
name|CoordinateType
name|coordType
argument_list|)
init|=
literal|0
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ACCESSIBILITY
end_comment
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
