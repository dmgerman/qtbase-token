begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qaccessible.h"
end_include
begin_include
include|#
directive|include
file|"qaccessiblebridge.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|"qcoreapplication.h"
end_include
begin_include
include|#
directive|include
file|"qmutex.h"
end_include
begin_include
include|#
directive|include
file|"qvector.h"
end_include
begin_include
include|#
directive|include
file|"private/qfactoryloader_p.h"
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
name|Q_GLOBAL_STATIC_WITH_ARGS
argument_list|(
name|QFactoryLoader
argument_list|,
name|loader
argument_list|,
operator|(
name|QAccessibleBridgeFactoryInterface_iid
operator|,
name|QLatin1String
argument_list|(
literal|"/accessiblebridge"
argument_list|)
operator|)
argument_list|)
endif|#
directive|endif
name|Q_GLOBAL_STATIC
argument_list|(
name|QVector
argument_list|<
name|QAccessibleBridge
operator|*
argument_list|>
argument_list|,
name|bridges
argument_list|)
decl|static
DECL|variable|isInit
name|bool
name|isInit
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|initialize
name|void
name|QAccessible
operator|::
name|initialize
parameter_list|()
block|{
if|if
condition|(
name|isInit
condition|)
return|return;
name|isInit
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|qgetenv
argument_list|(
literal|"QT_ACCESSIBILITY"
argument_list|)
operator|!=
literal|"1"
condition|)
return|return;
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
specifier|const
name|QStringList
name|l
init|=
name|loader
argument_list|()
operator|->
name|keys
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|QAccessibleBridgeFactoryInterface
modifier|*
name|factory
init|=
name|qobject_cast
argument_list|<
name|QAccessibleBridgeFactoryInterface
operator|*
argument_list|>
argument_list|(
name|loader
argument_list|()
operator|->
name|instance
argument_list|(
name|l
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|QAccessibleBridge
modifier|*
name|bridge
init|=
name|factory
operator|->
name|create
argument_list|(
name|l
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bridge
condition|)
name|bridges
argument_list|()
operator|->
name|append
argument_list|(
name|bridge
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|QAccessible
operator|::
name|cleanup
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
operator|*
name|bridges
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateAccessibility
name|void
name|QAccessible
operator|::
name|updateAccessibility
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|int
name|who
parameter_list|,
name|Event
name|reason
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|o
argument_list|)
expr_stmt|;
if|if
condition|(
name|updateHandler
condition|)
block|{
name|updateHandler
argument_list|(
name|o
argument_list|,
name|who
argument_list|,
name|reason
argument_list|)
expr_stmt|;
return|return;
block|}
name|initialize
argument_list|()
expr_stmt|;
if|if
condition|(
name|bridges
argument_list|()
operator|->
name|isEmpty
argument_list|()
condition|)
return|return;
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|iface
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bridges
argument_list|()
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|bridges
argument_list|()
operator|->
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|notifyAccessibilityUpdate
argument_list|(
name|reason
argument_list|,
name|iface
argument_list|,
name|who
argument_list|)
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setRootObject
name|void
name|QAccessible
operator|::
name|setRootObject
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|)
block|{
if|if
condition|(
name|rootObjectHandler
condition|)
block|{
name|rootObjectHandler
argument_list|(
name|o
argument_list|)
expr_stmt|;
return|return;
block|}
name|initialize
argument_list|()
expr_stmt|;
if|if
condition|(
name|bridges
argument_list|()
operator|->
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|o
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bridges
argument_list|()
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|bridges
argument_list|()
operator|->
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|setRootObject
argument_list|(
name|iface
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ACCESSIBILITY
end_comment
end_unit
