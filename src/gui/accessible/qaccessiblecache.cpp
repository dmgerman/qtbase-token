begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qaccessiblecache_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|/*!     \class QAccessibleCache     \internal     \brief Maintains a cache of accessible interfaces. */
name|Q_GLOBAL_STATIC
argument_list|(
name|QAccessibleCache
argument_list|,
name|qAccessibleCache
argument_list|)
DECL|function|instance
name|QAccessibleCache
modifier|*
name|QAccessibleCache
operator|::
name|instance
argument_list|()
argument_list|{     return
name|qAccessibleCache
argument_list|; }
comment|/*   The ID is always in the range [INT_MAX+1, UINT_MAX].   This makes it easy on windows to reserve the positive integer range   for the index of a child and not clash with the unique ids. */
DECL|function|acquireId
name|QAccessible
operator|::
name|Id
name|QAccessibleCache
operator|::
name|acquireId
argument_list|()
decl|const
argument_list|{
specifier|static
specifier|const
name|QAccessible
operator|::
name|Id
name|FirstId
operator|=
name|QAccessible
operator|::
name|Id
argument_list|(
name|INT_MAX
argument_list|)
operator|+
literal|1
argument_list|;
specifier|static
name|QAccessible
operator|::
name|Id
name|lastUsedId
operator|=
name|FirstId
argument_list|;      while
operator|(
name|idToInterface
operator|.
name|contains
argument_list|(
name|lastUsedId
argument_list|)
operator|)
block|{
comment|// (wrap back when when we reach UINT_MAX - 1)
comment|// -1 because on Android -1 is taken for the "View" so just avoid it completely for consistency
if|if
condition|(
name|lastUsedId
operator|==
name|UINT_MAX
operator|-
literal|1
condition|)
name|lastUsedId
operator|=
name|FirstId
expr_stmt|;
else|else
operator|++
name|lastUsedId
expr_stmt|;
block|}
return|return
name|lastUsedId
return|;
end_decl_stmt
begin_expr_stmt
unit|}  QAccessibleInterface
DECL|function|interfaceForId
operator|*
name|QAccessibleCache
operator|::
name|interfaceForId
operator|(
name|QAccessible
operator|::
name|Id
name|id
operator|)
specifier|const
block|{
return|return
name|idToInterface
operator|.
name|value
argument_list|(
name|id
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
DECL|function|insert
name|QAccessible
operator|::
name|Id
name|QAccessibleCache
operator|::
name|insert
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|,
name|QAccessibleInterface
modifier|*
name|iface
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|iface
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
argument|object
argument_list|)
comment|// object might be 0
name|Q_ASSERT
argument_list|(
operator|!
name|objectToId
operator|.
name|contains
argument_list|(
name|object
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
operator|!
name|idToInterface
operator|.
name|values
argument_list|()
operator|.
name|contains
argument_list|(
name|iface
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|"Accessible interface inserted into cache twice!"
argument_list|)
expr_stmt|;
name|QAccessible
operator|::
name|Id
name|id
init|=
name|acquireId
argument_list|()
decl_stmt|;
name|QObject
modifier|*
name|obj
init|=
name|iface
operator|->
name|object
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|object
operator|==
name|obj
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
condition|)
block|{
name|objectToId
operator|.
name|insert
argument_list|(
name|obj
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|obj
argument_list|,
operator|&
name|QObject
operator|::
name|destroyed
argument_list|,
name|this
argument_list|,
operator|&
name|QAccessibleCache
operator|::
name|objectDestroyed
argument_list|)
expr_stmt|;
block|}
name|idToInterface
operator|.
name|insert
argument_list|(
name|id
argument_list|,
name|iface
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
end_function
begin_function
DECL|function|objectDestroyed
name|void
name|QAccessibleCache
operator|::
name|objectDestroyed
parameter_list|(
name|QObject
modifier|*
name|obj
parameter_list|)
block|{
name|QAccessible
operator|::
name|Id
name|id
init|=
name|objectToId
operator|.
name|value
argument_list|(
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|Q_ASSERT_X
argument_list|(
name|idToInterface
operator|.
name|contains
argument_list|(
name|id
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|"QObject with accessible interface deleted, where interface not in cache!"
argument_list|)
expr_stmt|;
name|deleteInterface
argument_list|(
name|id
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|deleteInterface
name|void
name|QAccessibleCache
operator|::
name|deleteInterface
parameter_list|(
name|QAccessible
operator|::
name|Id
name|id
parameter_list|,
name|QObject
modifier|*
name|obj
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|idToInterface
operator|.
name|take
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|obj
condition|)
name|obj
operator|=
name|iface
operator|->
name|object
argument_list|()
expr_stmt|;
if|if
condition|(
name|obj
condition|)
name|objectToId
operator|.
name|remove
argument_list|(
name|obj
argument_list|)
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|removeCocoaElement
argument_list|(
name|id
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
