begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qaccessible2.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|"qclipboard.h"
end_include
begin_include
include|#
directive|include
file|"qtextboundaryfinder.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*!     \namespace QAccessible2     \ingroup accessibility     \internal     \preliminary      \brief The QAccessible2 namespace defines constants relating to     IAccessible2-based interfaces      \link http://www.linux-foundation.org/en/Accessibility/IAccessible2 IAccessible2 Specification \endlink */
comment|/*!     \class QAccessibleTextInterface      \ingroup accessibility     \internal     \preliminary      \brief The QAccessibleTextInterface class implements support for     the IAccessibleText interface.      \link http://www.linux-foundation.org/en/Accessibility/IAccessible2 IAccessible2 Specification \endlink */
comment|/*!     \class QAccessibleEditableTextInterface     \ingroup accessibility     \internal     \preliminary      \brief The QAccessibleEditableTextInterface class implements support for     the IAccessibleEditableText interface.      \link http://www.linux-foundation.org/en/Accessibility/IAccessible2 IAccessible2 Specification \endlink */
comment|/*!     \class QAccessibleSimpleEditableTextInterface     \ingroup accessibility     \internal     \preliminary      \brief The QAccessibleSimpleEditableTextInterface class is a convenience class for     text-based widgets.      \link http://www.linux-foundation.org/en/Accessibility/IAccessible2 IAccessible2 Specification \endlink */
comment|/*!     \class QAccessibleValueInterface     \ingroup accessibility     \internal     \preliminary      \brief The QAccessibleValueInterface class implements support for     the IAccessibleValue interface.      \link http://www.linux-foundation.org/en/Accessibility/IAccessible2 IAccessible2 Specification \endlink */
comment|/*!     \class QAccessibleActionInterface     \ingroup accessibility     \internal     \preliminary      \brief The QAccessibleActionInterface class implements support for     the IAccessibleAction interface.      \link http://www.linux-foundation.org/en/Accessibility/IAccessible2 IAccessible2 Specification \endlink */
comment|/*!     \class QAccessibleImageInterface     \ingroup accessibility     \internal     \preliminary      \brief The QAccessibleImageInterface class implements support for     the IAccessibleImage interface.      \link http://www.linux-foundation.org/en/Accessibility/IAccessible2 IAccessible2 Specification \endlink */
comment|/*!   \internal */
DECL|function|qTextBeforeOffsetFromString
name|QString
name|Q_GUI_EXPORT
name|qTextBeforeOffsetFromString
parameter_list|(
name|int
name|offset
parameter_list|,
name|QAccessible2
operator|::
name|BoundaryType
name|boundaryType
parameter_list|,
name|int
modifier|*
name|startOffset
parameter_list|,
name|int
modifier|*
name|endOffset
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QTextBoundaryFinder
operator|::
name|BoundaryType
name|type
decl_stmt|;
switch|switch
condition|(
name|boundaryType
condition|)
block|{
case|case
name|QAccessible2
operator|::
name|CharBoundary
case|:
name|type
operator|=
name|QTextBoundaryFinder
operator|::
name|Grapheme
expr_stmt|;
break|break;
case|case
name|QAccessible2
operator|::
name|WordBoundary
case|:
name|type
operator|=
name|QTextBoundaryFinder
operator|::
name|Word
expr_stmt|;
break|break;
case|case
name|QAccessible2
operator|::
name|SentenceBoundary
case|:
name|type
operator|=
name|QTextBoundaryFinder
operator|::
name|Sentence
expr_stmt|;
break|break;
default|default:
comment|// in any other case return the whole line
operator|*
name|startOffset
operator|=
literal|0
expr_stmt|;
operator|*
name|endOffset
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
return|return
name|text
return|;
block|}
name|QTextBoundaryFinder
name|boundary
argument_list|(
name|type
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|boundary
operator|.
name|setPosition
argument_list|(
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|boundary
operator|.
name|isAtBoundary
argument_list|()
condition|)
block|{
name|boundary
operator|.
name|toPreviousBoundary
argument_list|()
expr_stmt|;
block|}
name|boundary
operator|.
name|toPreviousBoundary
argument_list|()
expr_stmt|;
operator|*
name|startOffset
operator|=
name|boundary
operator|.
name|position
argument_list|()
expr_stmt|;
name|boundary
operator|.
name|toNextBoundary
argument_list|()
expr_stmt|;
operator|*
name|endOffset
operator|=
name|boundary
operator|.
name|position
argument_list|()
expr_stmt|;
return|return
name|text
operator|.
name|mid
argument_list|(
operator|*
name|startOffset
argument_list|,
operator|*
name|endOffset
operator|-
operator|*
name|startOffset
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|qTextAfterOffsetFromString
name|QString
name|Q_GUI_EXPORT
name|qTextAfterOffsetFromString
parameter_list|(
name|int
name|offset
parameter_list|,
name|QAccessible2
operator|::
name|BoundaryType
name|boundaryType
parameter_list|,
name|int
modifier|*
name|startOffset
parameter_list|,
name|int
modifier|*
name|endOffset
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QTextBoundaryFinder
operator|::
name|BoundaryType
name|type
decl_stmt|;
switch|switch
condition|(
name|boundaryType
condition|)
block|{
case|case
name|QAccessible2
operator|::
name|CharBoundary
case|:
name|type
operator|=
name|QTextBoundaryFinder
operator|::
name|Grapheme
expr_stmt|;
break|break;
case|case
name|QAccessible2
operator|::
name|WordBoundary
case|:
name|type
operator|=
name|QTextBoundaryFinder
operator|::
name|Word
expr_stmt|;
break|break;
case|case
name|QAccessible2
operator|::
name|SentenceBoundary
case|:
name|type
operator|=
name|QTextBoundaryFinder
operator|::
name|Sentence
expr_stmt|;
break|break;
default|default:
comment|// in any other case return the whole line
operator|*
name|startOffset
operator|=
literal|0
expr_stmt|;
operator|*
name|endOffset
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
return|return
name|text
return|;
block|}
name|QTextBoundaryFinder
name|boundary
argument_list|(
name|type
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|boundary
operator|.
name|setPosition
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|boundary
operator|.
name|toNextBoundary
argument_list|()
expr_stmt|;
operator|*
name|startOffset
operator|=
name|boundary
operator|.
name|position
argument_list|()
expr_stmt|;
name|boundary
operator|.
name|toNextBoundary
argument_list|()
expr_stmt|;
operator|*
name|endOffset
operator|=
name|boundary
operator|.
name|position
argument_list|()
expr_stmt|;
return|return
name|text
operator|.
name|mid
argument_list|(
operator|*
name|startOffset
argument_list|,
operator|*
name|endOffset
operator|-
operator|*
name|startOffset
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|qTextAtOffsetFromString
name|QString
name|Q_GUI_EXPORT
name|qTextAtOffsetFromString
parameter_list|(
name|int
name|offset
parameter_list|,
name|QAccessible2
operator|::
name|BoundaryType
name|boundaryType
parameter_list|,
name|int
modifier|*
name|startOffset
parameter_list|,
name|int
modifier|*
name|endOffset
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QTextBoundaryFinder
operator|::
name|BoundaryType
name|type
decl_stmt|;
switch|switch
condition|(
name|boundaryType
condition|)
block|{
case|case
name|QAccessible2
operator|::
name|CharBoundary
case|:
name|type
operator|=
name|QTextBoundaryFinder
operator|::
name|Grapheme
expr_stmt|;
break|break;
case|case
name|QAccessible2
operator|::
name|WordBoundary
case|:
name|type
operator|=
name|QTextBoundaryFinder
operator|::
name|Word
expr_stmt|;
break|break;
case|case
name|QAccessible2
operator|::
name|SentenceBoundary
case|:
name|type
operator|=
name|QTextBoundaryFinder
operator|::
name|Sentence
expr_stmt|;
break|break;
default|default:
comment|// in any other case return the whole line
operator|*
name|startOffset
operator|=
literal|0
expr_stmt|;
operator|*
name|endOffset
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
return|return
name|text
return|;
block|}
name|QTextBoundaryFinder
name|boundary
argument_list|(
name|type
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|boundary
operator|.
name|setPosition
argument_list|(
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|boundary
operator|.
name|isAtBoundary
argument_list|()
condition|)
block|{
name|boundary
operator|.
name|toPreviousBoundary
argument_list|()
expr_stmt|;
block|}
operator|*
name|startOffset
operator|=
name|boundary
operator|.
name|position
argument_list|()
expr_stmt|;
name|boundary
operator|.
name|toNextBoundary
argument_list|()
expr_stmt|;
operator|*
name|endOffset
operator|=
name|boundary
operator|.
name|position
argument_list|()
expr_stmt|;
return|return
name|text
operator|.
name|mid
argument_list|(
operator|*
name|startOffset
argument_list|,
operator|*
name|endOffset
operator|-
operator|*
name|startOffset
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QAccessibleSimpleEditableTextInterface
name|QAccessibleSimpleEditableTextInterface
operator|::
name|QAccessibleSimpleEditableTextInterface
parameter_list|(
name|QAccessibleInterface
modifier|*
name|accessibleInterface
parameter_list|)
member_init_list|:
name|iface
argument_list|(
name|accessibleInterface
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|iface
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_function
DECL|function|textForRange
specifier|static
name|QString
name|textForRange
parameter_list|(
name|QAccessibleInterface
modifier|*
name|iface
parameter_list|,
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
return|return
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|,
literal|0
argument_list|)
operator|.
name|mid
argument_list|(
name|startOffset
argument_list|,
name|endOffset
operator|-
name|startOffset
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|copyText
name|void
name|QAccessibleSimpleEditableTextInterface
operator|::
name|copyText
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_CLIPBOARD
name|Q_UNUSED
argument_list|(
name|startOffset
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|endOffset
argument_list|)
expr_stmt|;
else|#
directive|else
name|QGuiApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setText
argument_list|(
name|textForRange
argument_list|(
name|iface
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|deleteText
name|void
name|QAccessibleSimpleEditableTextInterface
operator|::
name|deleteText
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
name|QString
name|txt
init|=
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|txt
operator|.
name|remove
argument_list|(
name|startOffset
argument_list|,
name|endOffset
operator|-
name|startOffset
argument_list|)
expr_stmt|;
name|iface
operator|->
name|setText
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|,
literal|0
argument_list|,
name|txt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertText
name|void
name|QAccessibleSimpleEditableTextInterface
operator|::
name|insertText
parameter_list|(
name|int
name|offset
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QString
name|txt
init|=
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|txt
operator|.
name|insert
argument_list|(
name|offset
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|iface
operator|->
name|setText
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|,
literal|0
argument_list|,
name|txt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cutText
name|void
name|QAccessibleSimpleEditableTextInterface
operator|::
name|cutText
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_CLIPBOARD
name|Q_UNUSED
argument_list|(
name|startOffset
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|endOffset
argument_list|)
expr_stmt|;
else|#
directive|else
name|QString
name|sub
init|=
name|textForRange
argument_list|(
name|iface
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
decl_stmt|;
name|deleteText
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setText
argument_list|(
name|sub
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|pasteText
name|void
name|QAccessibleSimpleEditableTextInterface
operator|::
name|pasteText
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_CLIPBOARD
name|Q_UNUSED
argument_list|(
name|offset
argument_list|)
expr_stmt|;
else|#
directive|else
name|QString
name|txt
init|=
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|txt
operator|.
name|insert
argument_list|(
name|offset
argument_list|,
name|QGuiApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|iface
operator|->
name|setText
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|,
literal|0
argument_list|,
name|txt
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|replaceText
name|void
name|QAccessibleSimpleEditableTextInterface
operator|::
name|replaceText
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QString
name|txt
init|=
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|txt
operator|.
name|replace
argument_list|(
name|startOffset
argument_list|,
name|endOffset
operator|-
name|startOffset
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|iface
operator|->
name|setText
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|,
literal|0
argument_list|,
name|txt
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ACCESSIBILITY
end_comment
end_unit
