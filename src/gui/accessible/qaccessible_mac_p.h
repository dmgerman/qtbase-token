begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QACCESSIBLE_MAC_P_H
end_ifndef
begin_define
DECL|macro|QACCESSIBLE_MAC_P_H
define|#
directive|define
name|QACCESSIBLE_MAC_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_include
include|#
directive|include
file|<private/qt_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<qaccessible.h>
end_include
begin_include
include|#
directive|include
file|<qwidget.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_comment
comment|//#define Q_ACCESSIBLE_MAC_DEBUG
end_comment
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|/*     QAccessibleInterfaceWrapper wraps QAccessibleInterface and adds     a ref count. QAccessibleInterfaceWrapper is a "by-value" class. */
name|class
name|Q_AUTOTEST_EXPORT
name|QAccessibleInterfaceWrapper
block|{
name|public
label|:
name|QAccessibleInterfaceWrapper
argument_list|()
operator|:
name|interface
argument_list|(
literal|0
argument_list|)
operator|,
name|childrenIsRegistered
argument_list|(
argument|new bool(false)
argument_list|)
operator|,
name|refCount
argument_list|(
argument|new int(
literal|1
argument|)
argument_list|)
block|{ }
name|QAccessibleInterfaceWrapper
argument_list|(
name|QAccessibleInterface
operator|*
name|interface
argument_list|)
operator|:
name|interface
argument_list|(
name|interface
argument_list|)
operator|,
name|childrenIsRegistered
argument_list|(
argument|new bool(false)
argument_list|)
operator|,
name|refCount
argument_list|(
argument|new int(
literal|1
argument|)
argument_list|)
block|{ }
operator|~
name|QAccessibleInterfaceWrapper
argument_list|()
block|{
if|if
condition|(
operator|--
operator|(
operator|*
name|refCount
operator|)
operator|==
literal|0
condition|)
block|{
name|delete
name|interface
decl_stmt|;
name|delete
name|refCount
decl_stmt|;
name|delete
name|childrenIsRegistered
decl_stmt|;
block|}
block|}
name|QAccessibleInterfaceWrapper
argument_list|(
specifier|const
name|QAccessibleInterfaceWrapper
operator|&
name|other
argument_list|)
operator|:
name|interface
argument_list|(
name|other
operator|.
name|interface
argument_list|)
operator|,
name|childrenIsRegistered
argument_list|(
name|other
operator|.
name|childrenIsRegistered
argument_list|)
operator|,
name|refCount
argument_list|(
argument|other.refCount
argument_list|)
block|{
operator|++
operator|(
operator|*
name|refCount
operator|)
block|;     }
name|void
name|operator
operator|=
operator|(
specifier|const
name|QAccessibleInterfaceWrapper
operator|&
name|other
operator|)
block|{
if|if
condition|(
name|other
operator|.
name|interface
operator|==
name|interface
condition|)
return|return;
if|if
condition|(
operator|--
operator|(
operator|*
name|refCount
operator|)
operator|==
literal|0
condition|)
block|{
name|delete
name|interface
decl_stmt|;
name|delete
name|refCount
decl_stmt|;
name|delete
name|childrenIsRegistered
decl_stmt|;
block|}
name|interface
operator|=
name|other
operator|.
name|interface
expr_stmt|;
name|childrenIsRegistered
operator|=
name|other
operator|.
name|childrenIsRegistered
expr_stmt|;
name|refCount
operator|=
name|other
operator|.
name|refCount
expr_stmt|;
operator|++
operator|(
operator|*
name|refCount
operator|)
expr_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|QAccessibleInterface
modifier|*
name|interface
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
modifier|*
name|childrenIsRegistered
decl_stmt|;
end_decl_stmt
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|int
modifier|*
name|refCount
decl_stmt|;
end_decl_stmt
begin_comment
unit|};
comment|/*     QAInterface represents one accessiblity item. It hides the fact that     one QAccessibleInterface may represent more than one item, and it also     automates the memory management for QAccessibleInterfaces using the     QAccessibleInterfaceWrapper wrapper class.      It has the same API as QAccessibleInterface, minus the child parameter     in the functions. */
end_comment
begin_decl_stmt
name|class
name|Q_AUTOTEST_EXPORT
name|QAInterface
range|:
name|public
name|QAccessible
block|{
name|public
operator|:
name|QAInterface
argument_list|()
operator|:
name|base
argument_list|(
argument|QAccessibleInterfaceWrapper()
argument_list|)
block|{ }
name|QAInterface
argument_list|(
argument|QAccessibleInterface *interface
argument_list|,
argument|int child =
literal|0
argument_list|)
block|{
if|if
condition|(
name|interface
operator|==
literal|0
operator|||
name|child
operator|>
name|interface
operator|->
name|childCount
argument_list|()
condition|)
block|{
name|base
operator|=
name|QAccessibleInterfaceWrapper
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|base
operator|=
name|QAccessibleInterfaceWrapper
argument_list|(
name|interface
argument_list|)
expr_stmt|;
name|m_cachedObject
operator|=
name|interface
operator|->
name|object
argument_list|()
expr_stmt|;
name|this
operator|->
name|child
operator|=
name|child
expr_stmt|;
block|}
block|}
name|QAInterface
argument_list|(
argument|QAccessibleInterfaceWrapper wrapper
argument_list|,
argument|int child =
literal|0
argument_list|)
operator|:
name|base
argument_list|(
name|wrapper
argument_list|)
block|,
name|m_cachedObject
argument_list|(
name|wrapper
operator|.
name|interface
operator|->
name|object
argument_list|()
argument_list|)
block|,
name|child
argument_list|(
argument|child
argument_list|)
block|{ }
name|QAInterface
argument_list|(
argument|const QAInterface&other
argument_list|,
argument|int child
argument_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isValid
argument_list|()
operator|==
name|false
operator|||
name|child
operator|>
name|other
operator|.
name|childCount
argument_list|()
condition|)
block|{
name|base
operator|=
name|QAccessibleInterfaceWrapper
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|base
operator|=
name|other
operator|.
name|base
expr_stmt|;
name|m_cachedObject
operator|=
name|other
operator|.
name|m_cachedObject
expr_stmt|;
name|this
operator|->
name|child
operator|=
name|child
expr_stmt|;
block|}
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QAInterface
operator|&
name|other
operator|)
specifier|const
block|;
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QAInterface
operator|&
name|other
operator|)
specifier|const
block|;
specifier|inline
name|QString
name|actionText
argument_list|(
argument|int action
argument_list|,
argument|Text text
argument_list|)
specifier|const
block|{
return|return
name|base
operator|.
name|interface
operator|->
name|actionText
argument_list|(
name|action
argument_list|,
name|text
argument_list|,
name|child
argument_list|)
return|;
block|}
name|QAInterface
name|childAt
argument_list|(
argument|int x
argument_list|,
argument|int y
argument_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|checkValid
argument_list|()
condition|)
return|return
name|QAInterface
argument_list|()
return|;
specifier|const
name|int
name|foundChild
operator|=
name|base
operator|.
name|interface
operator|->
name|childAt
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
block|;
if|if
condition|(
name|foundChild
operator|==
operator|-
literal|1
condition|)
return|return
name|QAInterface
argument_list|()
return|;
end_decl_stmt
begin_if
if|if
condition|(
name|child
operator|==
literal|0
condition|)
return|return
name|navigate
argument_list|(
name|QAccessible
operator|::
name|Child
argument_list|,
name|foundChild
argument_list|)
return|;
end_if
begin_if
if|if
condition|(
name|foundChild
operator|==
name|child
condition|)
return|return
operator|*
name|this
return|;
end_if
begin_return
return|return
name|QAInterface
argument_list|()
return|;
end_return
begin_macro
unit|}      int
name|indexOfChild
argument_list|(
argument|const QAInterface&child
argument_list|)
end_macro
begin_expr_stmt
specifier|const
block|{
if|if
condition|(
operator|!
name|checkValid
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
end_expr_stmt
begin_if
if|if
condition|(
operator|*
name|this
operator|!=
name|child
operator|.
name|parent
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
end_if
begin_if
if|if
condition|(
name|object
argument_list|()
operator|==
name|child
operator|.
name|object
argument_list|()
condition|)
return|return
name|child
operator|.
name|id
argument_list|()
return|;
end_if
begin_return
return|return
name|base
operator|.
name|interface
operator|->
name|indexOfChild
argument_list|(
name|child
operator|.
name|base
operator|.
name|interface
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}      inline
name|int
name|childCount
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|checkValid
argument_list|()
condition|)
return|return
literal|0
return|;
end_expr_stmt
begin_if
if|if
condition|(
name|child
operator|!=
literal|0
condition|)
return|return
literal|0
return|;
end_if
begin_return
return|return
name|base
operator|.
name|interface
operator|->
name|childCount
argument_list|()
return|;
end_return
begin_expr_stmt
unit|}      QList
operator|<
name|QAInterface
operator|>
name|children
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|checkValid
argument_list|()
condition|)
return|return
name|QList
operator|<
name|QAInterface
operator|>
operator|(
operator|)
return|;
name|QList
operator|<
name|QAInterface
operator|>
name|children
expr_stmt|;
end_expr_stmt
begin_for
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|childCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|children
operator|.
name|append
argument_list|(
name|navigate
argument_list|(
name|QAccessible
operator|::
name|Child
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_for
begin_return
return|return
name|children
return|;
end_return
begin_macro
unit|}      QAInterface
name|childAt
argument_list|(
argument|int index
argument_list|)
end_macro
begin_expr_stmt
specifier|const
block|{
return|return
name|navigate
argument_list|(
name|QAccessible
operator|::
name|Child
argument_list|,
name|index
argument_list|)
return|;
block|}
end_expr_stmt
begin_decl_stmt
specifier|inline
name|void
name|doAction
argument_list|(
name|int
name|action
argument_list|,
specifier|const
name|QVariantList
operator|&
name|params
operator|=
name|QVariantList
argument_list|()
argument_list|)
decl|const
block|{
if|if
condition|(
operator|!
name|checkValid
argument_list|()
condition|)
return|return;
name|base
operator|.
name|interface
operator|->
name|doAction
argument_list|(
name|action
argument_list|,
name|child
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|QAInterface
name|navigate
argument_list|(
name|RelationFlag
name|relation
argument_list|,
name|int
name|entry
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
specifier|inline
name|QObject
operator|*
name|object
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|checkValid
argument_list|()
condition|)
return|return
literal|0
return|;
end_expr_stmt
begin_return
return|return
name|base
operator|.
name|interface
operator|->
name|object
argument_list|()
return|;
end_return
begin_macro
unit|}      QAInterface
name|objectInterface
argument_list|()
end_macro
begin_expr_stmt
specifier|const
block|{
if|if
condition|(
operator|!
name|checkValid
argument_list|()
condition|)
return|return
name|QAInterface
argument_list|()
return|;
name|QObject
operator|*
name|obj
operator|=
name|object
argument_list|()
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QAInterface
name|current
init|=
operator|*
name|this
decl_stmt|;
end_decl_stmt
begin_while
while|while
condition|(
name|obj
operator|==
literal|0
condition|)
block|{
name|QAInterface
name|parent
init|=
name|current
operator|.
name|parent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|.
name|isValid
argument_list|()
operator|==
name|false
condition|)
break|break;
name|obj
operator|=
name|parent
operator|.
name|object
argument_list|()
expr_stmt|;
name|current
operator|=
name|parent
expr_stmt|;
block|}
end_while
begin_return
return|return
name|current
return|;
end_return
begin_expr_stmt
unit|}      inline
name|HIObjectRef
name|hiObject
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|checkValid
argument_list|()
condition|)
return|return
literal|0
return|;
name|QWidget
operator|*
specifier|const
name|widget
operator|=
name|qobject_cast
operator|<
name|QWidget
operator|*
specifier|const
operator|>
operator|(
name|object
argument_list|()
operator|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|widget
condition|)
return|return
operator|(
name|HIObjectRef
operator|)
name|widget
operator|->
name|winId
argument_list|()
return|;
else|else
return|return
literal|0
return|;
end_if
begin_expr_stmt
unit|}      inline
name|QObject
operator|*
name|cachedObject
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|checkValid
argument_list|()
condition|)
return|return
literal|0
return|;
end_expr_stmt
begin_return
return|return
name|m_cachedObject
return|;
end_return
begin_expr_stmt
unit|}      inline
name|QRect
name|rect
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|checkValid
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
end_expr_stmt
begin_return
return|return
name|base
operator|.
name|interface
operator|->
name|rect
argument_list|(
name|child
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}      inline
name|Role
name|role
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|checkValid
argument_list|()
condition|)
return|return
name|QAccessible
operator|::
name|NoRole
return|;
end_expr_stmt
begin_return
return|return
name|base
operator|.
name|interface
operator|->
name|role
argument_list|(
name|child
argument_list|)
return|;
end_return
begin_decl_stmt
unit|}      inline
name|void
name|setText
argument_list|(
name|Text
name|t
argument_list|,
specifier|const
name|QString
operator|&
name|text
argument_list|)
decl|const
block|{
if|if
condition|(
operator|!
name|checkValid
argument_list|()
condition|)
return|return;
name|base
operator|.
name|interface
operator|->
name|setText
argument_list|(
name|t
argument_list|,
name|child
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|State
name|state
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|checkValid
argument_list|()
condition|)
return|return
literal|0
return|;
end_expr_stmt
begin_return
return|return
name|base
operator|.
name|interface
operator|->
name|state
argument_list|(
name|child
argument_list|)
return|;
end_return
begin_decl_stmt
unit|}      inline
name|QString
name|text
argument_list|(
name|Text
name|text
argument_list|)
decl|const
block|{
if|if
condition|(
operator|!
name|checkValid
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
return|return
name|base
operator|.
name|interface
operator|->
name|text
argument_list|(
name|text
argument_list|,
name|child
argument_list|)
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|QString
name|value
argument_list|()
specifier|const
block|{
return|return
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
name|name
argument_list|()
specifier|const
block|{
return|return
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|userActionCount
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|checkValid
argument_list|()
condition|)
return|return
literal|0
return|;
end_expr_stmt
begin_return
return|return
name|base
operator|.
name|interface
operator|->
name|userActionCount
argument_list|(
name|child
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}      inline
name|QString
name|className
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|checkValid
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
end_expr_stmt
begin_return
return|return
name|QLatin1String
argument_list|(
name|base
operator|.
name|interface
operator|->
name|object
argument_list|()
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}      inline
name|bool
name|isHIView
argument_list|()
specifier|const
block|{
return|return
operator|(
name|child
operator|==
literal|0
operator|&&
name|object
argument_list|()
operator|!=
literal|0
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|id
argument_list|()
specifier|const
block|{
return|return
name|child
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
operator|(
name|base
operator|.
name|interface
operator|!=
literal|0
operator|&&
name|base
operator|.
name|interface
operator|->
name|isValid
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QAInterface
name|parent
argument_list|()
specifier|const
block|{
return|return
name|navigate
argument_list|(
name|QAccessible
operator|::
name|Ancestor
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QAccessibleInterfaceWrapper
name|interfaceWrapper
argument_list|()
specifier|const
block|{
return|return
name|base
return|;
block|}
end_expr_stmt
begin_label
name|protected
label|:
end_label
begin_expr_stmt
name|bool
name|checkValid
argument_list|()
specifier|const
block|{
specifier|const
name|bool
name|valid
operator|=
name|isValid
argument_list|()
block|;
ifdef|#
directive|ifdef
name|Q_ACCESSIBLE_MAC_DEBUG
if|if
condition|(
operator|!
name|valid
condition|)
name|qFatal
argument_list|(
literal|"QAccessible_mac: tried to use invalid interface."
argument_list|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_return
return|return
name|valid
return|;
end_return
begin_expr_stmt
unit|}      QAccessibleInterfaceWrapper
name|base
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QObject
modifier|*
name|m_cachedObject
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|child
decl_stmt|;
end_decl_stmt
begin_expr_stmt
unit|};
name|Q_AUTOTEST_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
name|debug
operator|,
specifier|const
name|QAInterface
operator|&
name|interface
operator|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|/*     QAElement is a thin wrapper around an AXUIElementRef that automates     the ref-counting. */
end_comment
begin_decl_stmt
name|class
name|Q_AUTOTEST_EXPORT
name|QAElement
block|{
name|public
label|:
name|QAElement
argument_list|()
expr_stmt|;
name|explicit
name|QAElement
parameter_list|(
name|AXUIElementRef
name|elementRef
parameter_list|)
function_decl|;
name|QAElement
argument_list|(
specifier|const
name|QAElement
operator|&
name|element
argument_list|)
expr_stmt|;
name|QAElement
argument_list|(
argument|HIObjectRef
argument_list|,
argument|int child
argument_list|)
empty_stmt|;
operator|~
name|QAElement
argument_list|()
expr_stmt|;
specifier|inline
name|HIObjectRef
name|object
argument_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|Q_WS_MAC64
return|return
name|AXUIElementGetHIObject
argument_list|(
name|elementRef
argument_list|)
return|;
else|#
directive|else
return|return
literal|0
return|;
endif|#
directive|endif
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|int
name|id
argument_list|()
specifier|const
block|{
name|UInt64
name|theId
block|;
ifndef|#
directive|ifndef
name|QT_MAC_USE_COCOA
name|AXUIElementGetIdentifier
argument_list|(
name|elementRef
argument_list|,
operator|&
name|theId
argument_list|)
block|;
else|#
directive|else
name|theId
operator|=
literal|0
block|;
endif|#
directive|endif
return|return
name|theId
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|AXUIElementRef
name|element
argument_list|()
specifier|const
block|{
return|return
name|elementRef
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
operator|(
name|elementRef
operator|!=
literal|0
operator|)
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|void
name|operator
init|=
operator|(
specifier|const
name|QAElement
operator|&
name|other
operator|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QAElement
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|AXUIElementRef
name|elementRef
decl_stmt|;
end_decl_stmt
begin_decl_stmt
unit|};
name|class
name|QInterfaceFactory
block|{
name|public
label|:
name|virtual
name|QAInterface
name|interface
parameter_list|(
name|UInt64
name|identifier
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QAElement
name|element
parameter_list|(
name|int
name|id
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QAElement
name|element
parameter_list|(
specifier|const
name|QAInterface
modifier|&
name|interface
parameter_list|)
block|{
return|return
name|element
argument_list|(
name|interface
operator|.
name|id
argument_list|()
argument_list|)
return|;
block|}
name|virtual
name|void
name|registerChildren
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
operator|~
name|QInterfaceFactory
argument_list|()
block|{}
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|/*     QAccessibleHierarchyManager bridges the Mac and Qt accessibility hierarchies.     There is a one-to-one relationship between QAElements on the Mac side     and QAInterfaces on the Qt side, and this class provides lookup functions     that translates between these to items.      The identity of a QAInterface is determined by its QAccessibleInterface and     child identifier, and the identity of a QAElement is determined by its     HIObjectRef and identifier.      QAccessibleHierarchyManager receives QObject::destroyed() signals and deletes     the accessibility objects for destroyed objects. */
end_comment
begin_decl_stmt
name|class
name|Q_AUTOTEST_EXPORT
name|QAccessibleHierarchyManager
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
operator|:
operator|~
name|QAccessibleHierarchyManager
argument_list|()
block|{
name|reset
argument_list|()
block|; }
specifier|static
name|QAccessibleHierarchyManager
operator|*
name|instance
argument_list|()
block|;
name|void
name|reset
argument_list|()
block|;
name|QAElement
name|registerInterface
argument_list|(
argument|QObject *object
argument_list|,
argument|int child
argument_list|)
block|;
name|QAElement
name|registerInterface
argument_list|(
specifier|const
name|QAInterface
operator|&
name|interface
argument_list|)
block|;
name|void
name|registerInterface
argument_list|(
argument|QObject *object
argument_list|,
argument|HIObjectRef hiobject
argument_list|,
argument|QInterfaceFactory *interfaceFactory
argument_list|)
block|;
name|void
name|registerChildren
argument_list|(
specifier|const
name|QAInterface
operator|&
name|interface
argument_list|)
block|;
name|QAInterface
name|lookup
argument_list|(
specifier|const
name|AXUIElementRef
operator|&
name|element
argument_list|)
block|;
name|QAInterface
name|lookup
argument_list|(
specifier|const
name|QAElement
operator|&
name|element
argument_list|)
block|;
name|QAElement
name|lookup
argument_list|(
specifier|const
name|QAInterface
operator|&
name|interface
argument_list|)
block|;
name|QAElement
name|lookup
argument_list|(
argument|QObject * const object
argument_list|,
argument|int id
argument_list|)
block|;
name|private
name|slots
operator|:
name|void
name|objectDestroyed
argument_list|(
name|QObject
operator|*
argument_list|)
block|;
name|private
operator|:
typedef|typedef
name|QHash
operator|<
name|QObject
operator|*
operator|,
name|QInterfaceFactory
operator|*
operator|>
name|QObjectElementHash
expr_stmt|;
end_decl_stmt
begin_typedef
typedef|typedef
name|QHash
operator|<
name|HIObjectRef
operator|,
name|QInterfaceFactory
operator|*
operator|>
name|HIObjectInterfaceHash
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|QHash
operator|<
name|QObject
operator|*
operator|,
name|HIObjectRef
operator|>
name|QObjectHIObjectHash
expr_stmt|;
end_typedef
begin_decl_stmt
name|QObjectElementHash
name|qobjectElementHash
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|HIObjectInterfaceHash
name|hiobjectInterfaceHash
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QObjectHIObjectHash
name|qobjectHiobjectHash
decl_stmt|;
end_decl_stmt
begin_function_decl
unit|};
name|Q_AUTOTEST_EXPORT
name|bool
name|isItInteresting
parameter_list|(
specifier|const
name|QAInterface
modifier|&
name|interface
parameter_list|)
function_decl|;
end_function_decl
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
