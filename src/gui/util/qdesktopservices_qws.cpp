begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|launchWebBrowser
specifier|static
name|bool
name|launchWebBrowser
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"QDesktopServices::launchWebBrowser not implemented"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|openDocument
specifier|static
name|bool
name|openDocument
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|file
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"QDesktopServices::openDocument not implemented"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|storageLocation
name|QString
name|QDesktopServices
operator|::
name|storageLocation
parameter_list|(
name|StandardLocation
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|DataLocation
condition|)
block|{
name|QString
name|qwsDataHome
init|=
name|QLatin1String
argument_list|(
name|qgetenv
argument_list|(
literal|"QWS_DATA_HOME"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|qwsDataHome
operator|.
name|isEmpty
argument_list|()
condition|)
name|qwsDataHome
operator|=
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/.qws/share"
argument_list|)
expr_stmt|;
name|qwsDataHome
operator|+=
name|QLatin1String
argument_list|(
literal|"/data/"
argument_list|)
operator|+
name|QCoreApplication
operator|::
name|organizationName
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|QCoreApplication
operator|::
name|applicationName
argument_list|()
expr_stmt|;
return|return
name|qwsDataHome
return|;
block|}
if|if
condition|(
name|type
operator|==
name|QDesktopServices
operator|::
name|CacheLocation
condition|)
block|{
name|QString
name|qwsCacheHome
init|=
name|QLatin1String
argument_list|(
name|qgetenv
argument_list|(
literal|"QWS_CACHE_HOME"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|qwsCacheHome
operator|.
name|isEmpty
argument_list|()
condition|)
name|qwsCacheHome
operator|=
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/.qws/cache/"
argument_list|)
expr_stmt|;
name|qwsCacheHome
operator|+=
name|QCoreApplication
operator|::
name|organizationName
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|QCoreApplication
operator|::
name|applicationName
argument_list|()
expr_stmt|;
return|return
name|qwsCacheHome
return|;
block|}
name|qWarning
argument_list|(
literal|"QDesktopServices::storageLocation %d not implemented"
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|displayName
name|QString
name|QDesktopServices
operator|::
name|displayName
parameter_list|(
name|StandardLocation
name|type
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"QDesktopServices::displayName not implemented"
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
