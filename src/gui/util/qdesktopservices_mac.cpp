begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DESKTOPSERVICES
end_ifndef
begin_include
include|#
directive|include
file|<qprocess.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qurl.h>
end_include
begin_include
include|#
directive|include
file|<private/qcore_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<ApplicationServices/ApplicationServices.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*     Translates a QDesktopServices::StandardLocation into the mac equivalent. */
DECL|function|translateLocation
name|OSType
name|translateLocation
parameter_list|(
name|QDesktopServices
operator|::
name|StandardLocation
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QDesktopServices
operator|::
name|DesktopLocation
case|:
return|return
name|kDesktopFolderType
return|;
break|break;
case|case
name|QDesktopServices
operator|::
name|DocumentsLocation
case|:
return|return
name|kDocumentsFolderType
return|;
break|break;
case|case
name|QDesktopServices
operator|::
name|FontsLocation
case|:
comment|// There are at least two different font directories on the mac: /Library/Fonts and ~/Library/Fonts.
comment|// To select a specific one we have to specify a different first parameter when calling FSFindFolder.
return|return
name|kFontsFolderType
return|;
break|break;
case|case
name|QDesktopServices
operator|::
name|ApplicationsLocation
case|:
return|return
name|kApplicationsFolderType
return|;
break|break;
case|case
name|QDesktopServices
operator|::
name|MusicLocation
case|:
return|return
name|kMusicDocumentsFolderType
return|;
break|break;
case|case
name|QDesktopServices
operator|::
name|MoviesLocation
case|:
return|return
name|kMovieDocumentsFolderType
return|;
break|break;
case|case
name|QDesktopServices
operator|::
name|PicturesLocation
case|:
return|return
name|kPictureDocumentsFolderType
return|;
break|break;
case|case
name|QDesktopServices
operator|::
name|TempLocation
case|:
return|return
name|kTemporaryFolderType
return|;
break|break;
case|case
name|QDesktopServices
operator|::
name|DataLocation
case|:
return|return
name|kApplicationSupportFolderType
return|;
break|break;
case|case
name|QDesktopServices
operator|::
name|CacheLocation
case|:
return|return
name|kCachedDataFolderType
return|;
break|break;
default|default:
return|return
name|kDesktopFolderType
return|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|lsOpen
specifier|static
name|bool
name|lsOpen
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
if|if
condition|(
operator|!
name|url
operator|.
name|isValid
argument_list|()
operator|||
name|url
operator|.
name|scheme
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|QCFType
argument_list|<
name|CFURLRef
argument_list|>
name|cfUrl
init|=
name|CFURLCreateWithString
argument_list|(
literal|0
argument_list|,
name|QCFString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|url
operator|.
name|toEncoded
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|cfUrl
operator|==
literal|0
condition|)
return|return
literal|false
return|;
specifier|const
name|OSStatus
name|err
init|=
name|LSOpenCFURLRef
argument_list|(
name|cfUrl
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
operator|(
name|err
operator|==
name|noErr
operator|)
return|;
block|}
end_function
begin_function
DECL|function|launchWebBrowser
specifier|static
name|bool
name|launchWebBrowser
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
return|return
name|lsOpen
argument_list|(
name|url
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|openDocument
specifier|static
name|bool
name|openDocument
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|file
parameter_list|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// LSOpen does not work in this case, use QProcess open instead.
return|return
name|QProcess
operator|::
name|startDetached
argument_list|(
name|QLatin1String
argument_list|(
literal|"open"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|file
operator|.
name|toLocalFile
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DESKTOPSERVICES
end_comment
end_unit
