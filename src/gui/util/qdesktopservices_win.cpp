begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qsettings.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_include
include|#
directive|include
file|<qurl.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qprocess.h>
end_include
begin_include
include|#
directive|include
file|<qtemporaryfile.h>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_include
include|#
directive|include
file|<shlobj.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<intshcut.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<qguifunctions_wince.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|STANDARDSHELL_UI_MODEL
argument_list|)
end_if
begin_include
include|#
directive|include
file|<winx.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|CSIDL_MYMUSIC
end_ifndef
begin_define
DECL|macro|CSIDL_MYMUSIC
define|#
directive|define
name|CSIDL_MYMUSIC
value|13
end_define
begin_define
DECL|macro|CSIDL_MYVIDEO
define|#
directive|define
name|CSIDL_MYVIDEO
value|14
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DESKTOPSERVICES
end_ifndef
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|openDocument
specifier|static
name|bool
name|openDocument
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|file
parameter_list|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|QString
name|filePath
init|=
name|file
operator|.
name|toLocalFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|filePath
operator|.
name|isEmpty
argument_list|()
condition|)
name|filePath
operator|=
name|file
operator|.
name|toString
argument_list|()
expr_stmt|;
name|quintptr
name|returnValue
init|=
operator|(
name|quintptr
operator|)
name|ShellExecute
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|filePath
operator|.
name|utf16
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SW_SHOWNORMAL
argument_list|)
decl_stmt|;
return|return
operator|(
name|returnValue
operator|>
literal|32
operator|)
return|;
comment|//ShellExecute returns a value greater than 32 if successful
block|}
end_function
begin_function
DECL|function|expandEnvStrings
specifier|static
name|QString
name|expandEnvStrings
parameter_list|(
specifier|const
name|QString
modifier|&
name|command
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
return|return
name|command
return|;
else|#
directive|else
name|wchar_t
name|buffer
index|[
name|MAX_PATH
index|]
decl_stmt|;
if|if
condition|(
name|ExpandEnvironmentStrings
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|command
operator|.
name|utf16
argument_list|()
argument_list|,
name|buffer
argument_list|,
name|MAX_PATH
argument_list|)
condition|)
return|return
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|buffer
argument_list|)
return|;
else|else
return|return
name|command
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|launchWebBrowser
specifier|static
name|bool
name|launchWebBrowser
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
if|if
condition|(
name|url
operator|.
name|scheme
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"mailto"
argument_list|)
condition|)
block|{
comment|//Retrieve the commandline for the default mail client
comment|//the default key used below is the command line for the mailto: shell command
name|DWORD
name|bufferSize
init|=
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
operator|*
name|MAX_PATH
decl_stmt|;
name|long
name|returnValue
init|=
operator|-
literal|1
decl_stmt|;
name|QString
name|command
decl_stmt|;
name|HKEY
name|handle
decl_stmt|;
name|LONG
name|res
decl_stmt|;
name|wchar_t
name|keyValue
index|[
name|MAX_PATH
index|]
init|=
block|{
literal|0
block|}
decl_stmt|;
name|QString
name|keyName
argument_list|(
name|QLatin1String
argument_list|(
literal|"mailto"
argument_list|)
argument_list|)
decl_stmt|;
comment|//Check if user has set preference, otherwise use default.
name|res
operator|=
name|RegOpenKeyEx
argument_list|(
name|HKEY_CURRENT_USER
argument_list|,
literal|L"Software\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\mailto\\UserChoice"
argument_list|,
literal|0
argument_list|,
name|KEY_READ
argument_list|,
operator|&
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|==
name|ERROR_SUCCESS
condition|)
block|{
name|returnValue
operator|=
name|RegQueryValueEx
argument_list|(
name|handle
argument_list|,
literal|L"Progid"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
cast|reinterpret_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|keyValue
argument_list|)
argument_list|,
operator|&
name|bufferSize
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|returnValue
condition|)
name|keyName
operator|=
name|QString
operator|::
name|fromUtf16
argument_list|(
operator|(
specifier|const
name|ushort
operator|*
operator|)
name|keyValue
argument_list|)
expr_stmt|;
name|RegCloseKey
argument_list|(
name|handle
argument_list|)
expr_stmt|;
block|}
name|keyName
operator|+=
name|QLatin1String
argument_list|(
literal|"\\Shell\\Open\\Command"
argument_list|)
expr_stmt|;
name|res
operator|=
name|RegOpenKeyExW
argument_list|(
name|HKEY_CLASSES_ROOT
argument_list|,
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|keyName
operator|.
name|utf16
argument_list|()
argument_list|,
literal|0
argument_list|,
name|KEY_READ
argument_list|,
operator|&
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|!=
name|ERROR_SUCCESS
condition|)
return|return
literal|false
return|;
name|bufferSize
operator|=
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
operator|*
name|MAX_PATH
expr_stmt|;
name|returnValue
operator|=
name|RegQueryValueEx
argument_list|(
name|handle
argument_list|,
literal|L""
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
cast|reinterpret_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|keyValue
argument_list|)
argument_list|,
operator|&
name|bufferSize
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|returnValue
condition|)
name|command
operator|=
name|QString
operator|::
name|fromRawData
argument_list|(
operator|(
name|QChar
operator|*
operator|)
name|keyValue
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|RegCloseKey
argument_list|(
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|returnValue
condition|)
return|return
literal|false
return|;
name|command
operator|=
name|expandEnvStrings
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|command
operator|=
name|command
operator|.
name|trimmed
argument_list|()
expr_stmt|;
comment|//Make sure the path for the process is in quotes
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|command
index|[
literal|0
index|]
operator|!=
name|QLatin1Char
argument_list|(
literal|'\"'
argument_list|)
condition|)
block|{
name|index
operator|=
name|command
operator|.
name|indexOf
argument_list|(
name|QLatin1String
argument_list|(
literal|".exe "
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|command
operator|.
name|insert
argument_list|(
name|index
operator|+
literal|4
argument_list|,
name|QLatin1Char
argument_list|(
literal|'\"'
argument_list|)
argument_list|)
expr_stmt|;
name|command
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|QLatin1Char
argument_list|(
literal|'\"'
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//pass the url as the parameter
name|index
operator|=
name|command
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1String
argument_list|(
literal|"%1"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|command
operator|.
name|replace
argument_list|(
name|index
argument_list|,
literal|2
argument_list|,
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//start the process
name|PROCESS_INFORMATION
name|pi
decl_stmt|;
name|ZeroMemory
argument_list|(
operator|&
name|pi
argument_list|,
sizeof|sizeof
argument_list|(
name|pi
argument_list|)
argument_list|)
expr_stmt|;
name|STARTUPINFO
name|si
decl_stmt|;
name|ZeroMemory
argument_list|(
operator|&
name|si
argument_list|,
sizeof|sizeof
argument_list|(
name|si
argument_list|)
argument_list|)
expr_stmt|;
name|si
operator|.
name|cb
operator|=
sizeof|sizeof
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|returnValue
operator|=
name|CreateProcess
argument_list|(
name|NULL
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|command
operator|.
name|utf16
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|FALSE
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
operator|&
name|si
argument_list|,
operator|&
name|pi
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|returnValue
condition|)
return|return
literal|false
return|;
name|CloseHandle
argument_list|(
name|pi
operator|.
name|hProcess
argument_list|)
expr_stmt|;
name|CloseHandle
argument_list|(
name|pi
operator|.
name|hThread
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|url
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|url
operator|.
name|scheme
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|openDocument
argument_list|(
name|url
argument_list|)
return|;
name|quintptr
name|returnValue
init|=
operator|(
name|quintptr
operator|)
name|ShellExecute
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|QString
operator|::
name|fromUtf8
argument_list|(
name|url
operator|.
name|toEncoded
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|.
name|utf16
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SW_SHOWNORMAL
argument_list|)
decl_stmt|;
return|return
operator|(
name|returnValue
operator|>
literal|32
operator|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DESKTOPSERVICES
end_comment
end_unit
