begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qglobal.h"
end_include
begin_include
include|#
directive|include
file|"qgridlayoutengine_p.h"
end_include
begin_include
include|#
directive|include
file|"qvarlengtharray.h"
end_include
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmath.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
specifier|template
type|<
typename|typename
name|T
type|>
DECL|function|insertOrRemoveItems
specifier|static
name|void
name|insertOrRemoveItems
parameter_list|(
name|QVector
argument_list|<
name|T
argument_list|>
modifier|&
name|items
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|delta
parameter_list|)
block|{
name|int
name|count
init|=
name|items
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|<
name|count
condition|)
block|{
if|if
condition|(
name|delta
operator|>
literal|0
condition|)
block|{
name|items
operator|.
name|insert
argument_list|(
name|index
argument_list|,
name|delta
argument_list|,
name|T
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delta
operator|<
literal|0
condition|)
block|{
name|items
operator|.
name|remove
argument_list|(
name|index
argument_list|,
name|qMin
argument_list|(
operator|-
name|delta
argument_list|,
name|count
operator|-
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|growthFactorBelowPreferredSize
specifier|static
name|qreal
name|growthFactorBelowPreferredSize
parameter_list|(
name|qreal
name|desired
parameter_list|,
name|qreal
name|sumAvailable
parameter_list|,
name|qreal
name|sumDesired
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|sumDesired
operator|!=
literal|0.0
argument_list|)
expr_stmt|;
return|return
name|desired
operator|*
name|qPow
argument_list|(
name|sumAvailable
operator|/
name|sumDesired
argument_list|,
name|desired
operator|/
name|sumDesired
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fixedDescent
specifier|static
name|qreal
name|fixedDescent
parameter_list|(
name|qreal
name|descent
parameter_list|,
name|qreal
name|ascent
parameter_list|,
name|qreal
name|targetSize
parameter_list|)
block|{
if|if
condition|(
name|descent
operator|<
literal|0.0
condition|)
return|return
operator|-
literal|1.0
return|;
name|Q_ASSERT
argument_list|(
name|descent
operator|>=
literal|0.0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|ascent
operator|>=
literal|0.0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|targetSize
operator|>=
name|ascent
operator|+
name|descent
argument_list|)
expr_stmt|;
name|qreal
name|extra
init|=
name|targetSize
operator|-
operator|(
name|ascent
operator|+
name|descent
operator|)
decl_stmt|;
return|return
name|descent
operator|+
operator|(
name|extra
operator|/
literal|2.0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|compare
specifier|static
name|qreal
name|compare
parameter_list|(
specifier|const
name|QGridLayoutBox
modifier|&
name|box1
parameter_list|,
specifier|const
name|QGridLayoutBox
modifier|&
name|box2
parameter_list|,
name|int
name|which
parameter_list|)
block|{
name|qreal
name|size1
init|=
name|box1
operator|.
name|q_sizes
argument_list|(
name|which
argument_list|)
decl_stmt|;
name|qreal
name|size2
init|=
name|box2
operator|.
name|q_sizes
argument_list|(
name|which
argument_list|)
decl_stmt|;
if|if
condition|(
name|which
operator|==
name|MaximumSize
condition|)
block|{
return|return
name|size2
operator|-
name|size1
return|;
block|}
else|else
block|{
return|return
name|size1
operator|-
name|size2
return|;
block|}
block|}
end_function
begin_function
DECL|function|add
name|void
name|QGridLayoutBox
operator|::
name|add
parameter_list|(
specifier|const
name|QGridLayoutBox
modifier|&
name|other
parameter_list|,
name|int
name|stretch
parameter_list|,
name|qreal
name|spacing
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|q_minimumDescent
operator|<
literal|0.0
argument_list|)
expr_stmt|;
name|q_minimumSize
operator|+=
name|other
operator|.
name|q_minimumSize
operator|+
name|spacing
expr_stmt|;
name|q_preferredSize
operator|+=
name|other
operator|.
name|q_preferredSize
operator|+
name|spacing
expr_stmt|;
name|q_maximumSize
operator|+=
operator|(
operator|(
name|stretch
operator|==
literal|0
operator|)
condition|?
name|other
operator|.
name|q_preferredSize
else|:
name|other
operator|.
name|q_maximumSize
operator|)
operator|+
name|spacing
expr_stmt|;
block|}
end_function
begin_function
DECL|function|combine
name|void
name|QGridLayoutBox
operator|::
name|combine
parameter_list|(
specifier|const
name|QGridLayoutBox
modifier|&
name|other
parameter_list|)
block|{
name|q_minimumDescent
operator|=
name|qMax
argument_list|(
name|q_minimumDescent
argument_list|,
name|other
operator|.
name|q_minimumDescent
argument_list|)
expr_stmt|;
name|q_minimumAscent
operator|=
name|qMax
argument_list|(
name|q_minimumAscent
argument_list|,
name|other
operator|.
name|q_minimumAscent
argument_list|)
expr_stmt|;
name|q_minimumSize
operator|=
name|qMax
argument_list|(
name|q_minimumAscent
operator|+
name|q_minimumDescent
argument_list|,
name|qMax
argument_list|(
name|q_minimumSize
argument_list|,
name|other
operator|.
name|q_minimumSize
argument_list|)
argument_list|)
expr_stmt|;
name|qreal
name|maxMax
decl_stmt|;
if|if
condition|(
name|q_maximumSize
operator|==
name|FLT_MAX
operator|&&
name|other
operator|.
name|q_maximumSize
operator|!=
name|FLT_MAX
condition|)
name|maxMax
operator|=
name|other
operator|.
name|q_maximumSize
expr_stmt|;
elseif|else
if|if
condition|(
name|other
operator|.
name|q_maximumSize
operator|==
name|FLT_MAX
operator|&&
name|q_maximumSize
operator|!=
name|FLT_MAX
condition|)
name|maxMax
operator|=
name|q_maximumSize
expr_stmt|;
else|else
name|maxMax
operator|=
name|qMax
argument_list|(
name|q_maximumSize
argument_list|,
name|other
operator|.
name|q_maximumSize
argument_list|)
expr_stmt|;
name|q_maximumSize
operator|=
name|qMax
argument_list|(
name|q_minimumSize
argument_list|,
name|maxMax
argument_list|)
expr_stmt|;
name|q_preferredSize
operator|=
name|qBound
argument_list|(
name|q_minimumSize
argument_list|,
name|qMax
argument_list|(
name|q_preferredSize
argument_list|,
name|other
operator|.
name|q_preferredSize
argument_list|)
argument_list|,
name|q_maximumSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|normalize
name|void
name|QGridLayoutBox
operator|::
name|normalize
parameter_list|()
block|{
name|q_maximumSize
operator|=
name|qMax
argument_list|(
name|qreal
argument_list|(
literal|0.0
argument_list|)
argument_list|,
name|q_maximumSize
argument_list|)
expr_stmt|;
name|q_minimumSize
operator|=
name|qBound
argument_list|(
name|qreal
argument_list|(
literal|0.0
argument_list|)
argument_list|,
name|q_minimumSize
argument_list|,
name|q_maximumSize
argument_list|)
expr_stmt|;
name|q_preferredSize
operator|=
name|qBound
argument_list|(
name|q_minimumSize
argument_list|,
name|q_preferredSize
argument_list|,
name|q_maximumSize
argument_list|)
expr_stmt|;
name|q_minimumDescent
operator|=
name|qMin
argument_list|(
name|q_minimumDescent
argument_list|,
name|q_minimumSize
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|(
name|q_minimumDescent
operator|<
literal|0.0
operator|)
operator|==
operator|(
name|q_minimumAscent
operator|<
literal|0.0
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QGRIDLAYOUTENGINE_DEBUG
end_ifdef
begin_function
DECL|function|dump
name|void
name|QGridLayoutBox
operator|::
name|dump
parameter_list|(
name|int
name|indent
parameter_list|)
specifier|const
block|{
name|qDebug
argument_list|(
literal|"%*sBox (%g<= %g<= %g [%g/%g])"
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|,
name|q_minimumSize
argument_list|,
name|q_preferredSize
argument_list|,
name|q_maximumSize
argument_list|,
name|q_minimumAscent
argument_list|,
name|q_minimumDescent
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|QGridLayoutBox
modifier|&
name|box1
parameter_list|,
specifier|const
name|QGridLayoutBox
modifier|&
name|box2
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NSizes
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|box1
operator|.
name|q_sizes
argument_list|(
name|i
argument_list|)
operator|!=
name|box2
operator|.
name|q_sizes
argument_list|(
name|i
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
name|box1
operator|.
name|q_minimumDescent
operator|==
name|box2
operator|.
name|q_minimumDescent
operator|&&
name|box1
operator|.
name|q_minimumAscent
operator|==
name|box2
operator|.
name|q_minimumAscent
return|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|QGridLayoutRowData
operator|::
name|reset
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|ignore
operator|.
name|fill
argument_list|(
literal|false
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|boxes
operator|.
name|fill
argument_list|(
name|QGridLayoutBox
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|multiCellMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|stretches
operator|.
name|fill
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|spacings
operator|.
name|fill
argument_list|(
literal|0.0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|hasIgnoreFlag
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|distributeMultiCells
name|void
name|QGridLayoutRowData
operator|::
name|distributeMultiCells
parameter_list|(
specifier|const
name|QGridLayoutRowInfo
modifier|&
name|rowInfo
parameter_list|,
name|bool
name|snapToPixelGrid
parameter_list|)
block|{
name|MultiCellMap
operator|::
name|const_iterator
name|i
init|=
name|multiCellMap
operator|.
name|constBegin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|i
operator|!=
name|multiCellMap
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|start
init|=
name|i
operator|.
name|key
argument_list|()
operator|.
name|first
decl_stmt|;
name|int
name|span
init|=
name|i
operator|.
name|key
argument_list|()
operator|.
name|second
decl_stmt|;
name|int
name|end
init|=
name|start
operator|+
name|span
decl_stmt|;
specifier|const
name|QGridLayoutBox
modifier|&
name|box
init|=
name|i
operator|.
name|value
argument_list|()
operator|.
name|q_box
decl_stmt|;
name|int
name|stretch
init|=
name|i
operator|.
name|value
argument_list|()
operator|.
name|q_stretch
decl_stmt|;
name|QGridLayoutBox
name|totalBox
init|=
name|this
operator|->
name|totalBox
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QGridLayoutBox
argument_list|>
name|extras
argument_list|(
name|span
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|qreal
argument_list|>
name|dummy
argument_list|(
name|span
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|qreal
argument_list|>
name|newSizes
argument_list|(
name|span
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NSizes
condition|;
operator|++
name|j
control|)
block|{
name|qreal
name|extra
init|=
name|compare
argument_list|(
name|box
argument_list|,
name|totalBox
argument_list|,
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|extra
operator|>
literal|0.0
condition|)
block|{
name|calculateGeometries
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|box
operator|.
name|q_sizes
argument_list|(
name|j
argument_list|)
argument_list|,
name|dummy
operator|.
name|data
argument_list|()
argument_list|,
name|newSizes
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|totalBox
argument_list|,
name|rowInfo
argument_list|,
name|snapToPixelGrid
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|span
condition|;
operator|++
name|k
control|)
name|extras
index|[
name|k
index|]
operator|.
name|q_sizes
argument_list|(
name|j
argument_list|)
operator|=
name|newSizes
index|[
name|k
index|]
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|span
condition|;
operator|++
name|k
control|)
block|{
name|boxes
index|[
name|start
operator|+
name|k
index|]
operator|.
name|combine
argument_list|(
name|extras
index|[
name|k
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|stretch
operator|!=
literal|0
condition|)
name|stretches
index|[
name|start
operator|+
name|k
index|]
operator|=
name|qMax
argument_list|(
name|stretches
index|[
name|start
operator|+
name|k
index|]
argument_list|,
name|stretch
argument_list|)
expr_stmt|;
block|}
block|}
name|multiCellMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_namespace
namespace|namespace
block|{
comment|// does not return int
DECL|function|qround
specifier|static
specifier|inline
name|qreal
name|qround
parameter_list|(
name|qreal
name|f
parameter_list|)
block|{
return|return
name|std
operator|::
name|floor
argument_list|(
name|f
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
argument_list|)
return|;
block|}
block|}
end_namespace
begin_function
DECL|function|calculateGeometries
name|void
name|QGridLayoutRowData
operator|::
name|calculateGeometries
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|qreal
name|targetSize
parameter_list|,
name|qreal
modifier|*
name|positions
parameter_list|,
name|qreal
modifier|*
name|sizes
parameter_list|,
name|qreal
modifier|*
name|descents
parameter_list|,
specifier|const
name|QGridLayoutBox
modifier|&
name|totalBox
parameter_list|,
specifier|const
name|QGridLayoutRowInfo
modifier|&
name|rowInfo
parameter_list|,
name|bool
name|snapToPixelGrid
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|end
operator|>
name|start
argument_list|)
expr_stmt|;
name|targetSize
operator|=
name|qMax
argument_list|(
name|totalBox
operator|.
name|q_minimumSize
argument_list|,
name|targetSize
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|end
operator|-
name|start
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|qreal
argument_list|>
name|newSizes
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|qreal
argument_list|>
name|factors
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|qreal
name|sumFactors
init|=
literal|0.0
decl_stmt|;
name|int
name|sumStretches
init|=
literal|0
decl_stmt|;
name|qreal
name|sumAvailable
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|stretches
index|[
name|start
operator|+
name|i
index|]
operator|>
literal|0
condition|)
name|sumStretches
operator|+=
name|stretches
index|[
name|start
operator|+
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|targetSize
operator|<
name|totalBox
operator|.
name|q_preferredSize
condition|)
block|{
name|stealBox
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|MinimumSize
argument_list|,
name|positions
argument_list|,
name|sizes
argument_list|)
expr_stmt|;
name|sumAvailable
operator|=
name|targetSize
operator|-
name|totalBox
operator|.
name|q_minimumSize
expr_stmt|;
if|if
condition|(
name|sumAvailable
operator|>
literal|0.0
condition|)
block|{
name|qreal
name|sumDesired
init|=
name|totalBox
operator|.
name|q_preferredSize
operator|-
name|totalBox
operator|.
name|q_minimumSize
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|ignore
operator|.
name|testBit
argument_list|(
name|start
operator|+
name|i
argument_list|)
condition|)
block|{
name|factors
index|[
name|i
index|]
operator|=
literal|0.0
expr_stmt|;
continue|continue;
block|}
specifier|const
name|QGridLayoutBox
modifier|&
name|box
init|=
name|boxes
operator|.
name|at
argument_list|(
name|start
operator|+
name|i
argument_list|)
decl_stmt|;
name|qreal
name|desired
init|=
name|box
operator|.
name|q_preferredSize
operator|-
name|box
operator|.
name|q_minimumSize
decl_stmt|;
name|factors
index|[
name|i
index|]
operator|=
name|growthFactorBelowPreferredSize
argument_list|(
name|desired
argument_list|,
name|sumAvailable
argument_list|,
name|sumDesired
argument_list|)
expr_stmt|;
name|sumFactors
operator|+=
name|factors
index|[
name|i
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|Q_ASSERT
argument_list|(
name|sumFactors
operator|>
literal|0.0
argument_list|)
expr_stmt|;
name|qreal
name|delta
init|=
name|sumAvailable
operator|*
name|factors
index|[
name|i
index|]
operator|/
name|sumFactors
decl_stmt|;
name|newSizes
index|[
name|i
index|]
operator|=
name|sizes
index|[
name|i
index|]
operator|+
name|delta
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|bool
name|isLargerThanMaximum
init|=
operator|(
name|targetSize
operator|>
name|totalBox
operator|.
name|q_maximumSize
operator|)
decl_stmt|;
if|if
condition|(
name|isLargerThanMaximum
condition|)
block|{
name|stealBox
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|MaximumSize
argument_list|,
name|positions
argument_list|,
name|sizes
argument_list|)
expr_stmt|;
name|sumAvailable
operator|=
name|targetSize
operator|-
name|totalBox
operator|.
name|q_maximumSize
expr_stmt|;
block|}
else|else
block|{
name|stealBox
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|PreferredSize
argument_list|,
name|positions
argument_list|,
name|sizes
argument_list|)
expr_stmt|;
name|sumAvailable
operator|=
name|targetSize
operator|-
name|totalBox
operator|.
name|q_preferredSize
expr_stmt|;
block|}
if|if
condition|(
name|sumAvailable
operator|>
literal|0.0
condition|)
block|{
name|qreal
name|sumCurrentAvailable
init|=
name|sumAvailable
decl_stmt|;
name|bool
name|somethingHasAMaximumSize
init|=
literal|false
decl_stmt|;
name|qreal
name|sumSizes
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
name|sumSizes
operator|+=
name|sizes
index|[
name|i
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|ignore
operator|.
name|testBit
argument_list|(
name|start
operator|+
name|i
argument_list|)
condition|)
block|{
name|newSizes
index|[
name|i
index|]
operator|=
literal|0.0
expr_stmt|;
name|factors
index|[
name|i
index|]
operator|=
literal|0.0
expr_stmt|;
continue|continue;
block|}
specifier|const
name|QGridLayoutBox
modifier|&
name|box
init|=
name|boxes
operator|.
name|at
argument_list|(
name|start
operator|+
name|i
argument_list|)
decl_stmt|;
name|qreal
name|boxSize
decl_stmt|;
name|qreal
name|desired
decl_stmt|;
if|if
condition|(
name|isLargerThanMaximum
condition|)
block|{
name|boxSize
operator|=
name|box
operator|.
name|q_maximumSize
expr_stmt|;
name|desired
operator|=
name|rowInfo
operator|.
name|boxes
operator|.
name|value
argument_list|(
name|start
operator|+
name|i
argument_list|)
operator|.
name|q_maximumSize
operator|-
name|boxSize
expr_stmt|;
block|}
else|else
block|{
name|boxSize
operator|=
name|box
operator|.
name|q_preferredSize
expr_stmt|;
name|desired
operator|=
name|box
operator|.
name|q_maximumSize
operator|-
name|boxSize
expr_stmt|;
block|}
if|if
condition|(
name|desired
operator|==
literal|0.0
condition|)
block|{
name|newSizes
index|[
name|i
index|]
operator|=
name|sizes
index|[
name|i
index|]
expr_stmt|;
name|factors
index|[
name|i
index|]
operator|=
literal|0.0
expr_stmt|;
block|}
else|else
block|{
name|Q_ASSERT
argument_list|(
name|desired
operator|>
literal|0.0
argument_list|)
expr_stmt|;
name|int
name|stretch
init|=
name|stretches
index|[
name|start
operator|+
name|i
index|]
decl_stmt|;
if|if
condition|(
name|sumStretches
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|hasIgnoreFlag
operator|||
name|sizes
index|[
name|i
index|]
operator|==
literal|0.0
condition|)
block|{
name|factors
index|[
name|i
index|]
operator|=
operator|(
name|stretch
operator|<
literal|0
operator|)
condition|?
literal|1.0
else|:
literal|0.0
expr_stmt|;
block|}
else|else
block|{
name|factors
index|[
name|i
index|]
operator|=
operator|(
name|stretch
operator|<
literal|0
operator|)
condition|?
name|sizes
index|[
name|i
index|]
else|:
literal|0.0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|stretch
operator|==
name|sumStretches
condition|)
block|{
name|factors
index|[
name|i
index|]
operator|=
literal|1.0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stretch
operator|<=
literal|0
condition|)
block|{
name|factors
index|[
name|i
index|]
operator|=
literal|0.0
expr_stmt|;
block|}
else|else
block|{
name|qreal
name|ultimateSize
decl_stmt|;
name|qreal
name|ultimateSumSizes
decl_stmt|;
name|qreal
name|x
init|=
operator|(
operator|(
name|stretch
operator|*
name|sumSizes
operator|)
operator|-
operator|(
name|sumStretches
operator|*
name|boxSize
operator|)
operator|)
operator|/
operator|(
name|sumStretches
operator|-
name|stretch
operator|)
decl_stmt|;
if|if
condition|(
name|x
operator|>=
literal|0.0
condition|)
block|{
name|ultimateSize
operator|=
name|boxSize
operator|+
name|x
expr_stmt|;
name|ultimateSumSizes
operator|=
name|sumSizes
operator|+
name|x
expr_stmt|;
block|}
else|else
block|{
name|ultimateSize
operator|=
name|boxSize
expr_stmt|;
name|ultimateSumSizes
operator|=
operator|(
name|sumStretches
operator|*
name|boxSize
operator|)
operator|/
name|stretch
expr_stmt|;
block|}
comment|/*                             We multiply these by 1.5 to give some space for a smooth transition                             (at the expense of the stretch factors, which are not fully respected                             during the transition).                         */
name|ultimateSize
operator|=
name|ultimateSize
operator|*
literal|3
operator|/
literal|2
expr_stmt|;
name|ultimateSumSizes
operator|=
name|ultimateSumSizes
operator|*
literal|3
operator|/
literal|2
expr_stmt|;
name|qreal
name|beta
init|=
name|ultimateSumSizes
operator|-
name|sumSizes
decl_stmt|;
if|if
condition|(
operator|!
name|beta
condition|)
block|{
name|factors
index|[
name|i
index|]
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|qreal
name|alpha
init|=
name|qMin
argument_list|(
name|sumCurrentAvailable
argument_list|,
name|beta
argument_list|)
decl_stmt|;
name|qreal
name|ultimateFactor
init|=
operator|(
name|stretch
operator|*
name|ultimateSumSizes
operator|/
name|sumStretches
operator|)
operator|-
operator|(
name|boxSize
operator|)
decl_stmt|;
name|qreal
name|transitionalFactor
init|=
name|sumCurrentAvailable
operator|*
operator|(
name|ultimateSize
operator|-
name|boxSize
operator|)
operator|/
name|beta
decl_stmt|;
name|factors
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|alpha
operator|*
name|ultimateFactor
operator|)
operator|+
operator|(
operator|(
name|beta
operator|-
name|alpha
operator|)
operator|*
name|transitionalFactor
operator|)
operator|)
operator|/
name|beta
expr_stmt|;
block|}
block|}
name|sumFactors
operator|+=
name|factors
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|desired
operator|<
name|sumCurrentAvailable
condition|)
name|somethingHasAMaximumSize
operator|=
literal|true
expr_stmt|;
name|newSizes
index|[
name|i
index|]
operator|=
operator|-
literal|1.0
expr_stmt|;
block|}
block|}
name|bool
name|keepGoing
init|=
name|somethingHasAMaximumSize
decl_stmt|;
while|while
condition|(
name|keepGoing
condition|)
block|{
comment|//sumCurrentAvailable is so large that something *might* reach its maximum size
name|keepGoing
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|newSizes
index|[
name|i
index|]
operator|>=
literal|0.0
condition|)
continue|continue;
specifier|const
name|QVector
argument_list|<
name|QGridLayoutBox
argument_list|>
modifier|&
name|rBoxes
init|=
name|isLargerThanMaximum
condition|?
name|rowInfo
operator|.
name|boxes
else|:
name|boxes
decl_stmt|;
specifier|const
name|QGridLayoutBox
modifier|&
name|box
init|=
name|rBoxes
operator|.
name|value
argument_list|(
name|start
operator|+
name|i
argument_list|)
decl_stmt|;
name|qreal
name|maxBoxSize
init|=
name|box
operator|.
name|q_maximumSize
decl_stmt|;
if|if
condition|(
name|snapToPixelGrid
condition|)
name|maxBoxSize
operator|=
name|qMax
argument_list|(
name|box
operator|.
name|q_minimumSize
argument_list|,
name|std
operator|::
name|floor
argument_list|(
name|maxBoxSize
argument_list|)
argument_list|)
expr_stmt|;
name|qreal
name|avail
init|=
name|sumCurrentAvailable
operator|*
name|factors
index|[
name|i
index|]
operator|/
name|sumFactors
decl_stmt|;
if|if
condition|(
name|sizes
index|[
name|i
index|]
operator|+
name|avail
operator|>=
name|maxBoxSize
condition|)
block|{
name|newSizes
index|[
name|i
index|]
operator|=
name|maxBoxSize
expr_stmt|;
name|sumCurrentAvailable
operator|-=
name|maxBoxSize
operator|-
name|sizes
index|[
name|i
index|]
expr_stmt|;
name|sumFactors
operator|-=
name|factors
index|[
name|i
index|]
expr_stmt|;
name|keepGoing
operator|=
operator|(
name|sumCurrentAvailable
operator|>
literal|0.0
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|keepGoing
condition|)
break|break;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|newSizes
index|[
name|i
index|]
operator|<
literal|0.0
condition|)
block|{
name|qreal
name|delta
init|=
operator|(
name|sumFactors
operator|==
literal|0.0
operator|)
condition|?
literal|0.0
else|:
name|sumCurrentAvailable
operator|*
name|factors
index|[
name|i
index|]
operator|/
name|sumFactors
decl_stmt|;
name|newSizes
index|[
name|i
index|]
operator|=
name|sizes
index|[
name|i
index|]
operator|+
name|delta
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|sumAvailable
operator|>
literal|0
condition|)
block|{
name|qreal
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|delta
init|=
name|newSizes
index|[
name|i
index|]
operator|-
name|sizes
index|[
name|i
index|]
decl_stmt|;
name|positions
index|[
name|i
index|]
operator|+=
name|offset
expr_stmt|;
name|sizes
index|[
name|i
index|]
operator|+=
name|delta
expr_stmt|;
name|offset
operator|+=
name|delta
expr_stmt|;
block|}
if|#
directive|if
literal|0
comment|// some "pixel allocation"
block|int surplus = targetSize - (positions[n - 1] + sizes[n - 1]);         Q_ASSERT(surplus>= 0&& surplus<= n);          int prevSurplus = -1;         while (surplus> 0&& surplus != prevSurplus) {             prevSurplus = surplus;              int offset = 0;             for (int i = 0; i< n; ++i) {                 const QGridLayoutBox&box = boxes.at(start + i);                 int delta = (!ignore.testBit(start + i)&& surplus> 0&& factors[i]> 0&& sizes[i]< box.q_maximumSize)                     ? 1 : 0;                  positions[i] += offset;                 sizes[i] += delta;                 offset += delta;                 surplus -= delta;             }         }         Q_ASSERT(surplus == 0);
endif|#
directive|endif
block|}
if|if
condition|(
name|snapToPixelGrid
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
name|positions
index|[
name|i
index|]
operator|=
name|qround
argument_list|(
name|positions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|descents
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|ignore
operator|.
name|testBit
argument_list|(
name|start
operator|+
name|i
argument_list|)
condition|)
continue|continue;
specifier|const
name|QGridLayoutBox
modifier|&
name|box
init|=
name|boxes
operator|.
name|at
argument_list|(
name|start
operator|+
name|i
argument_list|)
decl_stmt|;
name|descents
index|[
name|i
index|]
operator|=
name|fixedDescent
argument_list|(
name|box
operator|.
name|q_minimumDescent
argument_list|,
name|box
operator|.
name|q_minimumAscent
argument_list|,
name|sizes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|totalBox
name|QGridLayoutBox
name|QGridLayoutRowData
operator|::
name|totalBox
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
specifier|const
block|{
name|QGridLayoutBox
name|result
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|end
condition|)
block|{
name|result
operator|.
name|q_maximumSize
operator|=
literal|0.0
expr_stmt|;
name|qreal
name|nextSpacing
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|ignore
operator|.
name|testBit
argument_list|(
name|i
argument_list|)
condition|)
continue|continue;
name|result
operator|.
name|add
argument_list|(
name|boxes
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|stretches
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|nextSpacing
argument_list|)
expr_stmt|;
name|nextSpacing
operator|=
name|spacings
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|stealBox
name|void
name|QGridLayoutRowData
operator|::
name|stealBox
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|which
parameter_list|,
name|qreal
modifier|*
name|positions
parameter_list|,
name|qreal
modifier|*
name|sizes
parameter_list|)
block|{
name|qreal
name|offset
init|=
literal|0.0
decl_stmt|;
name|qreal
name|nextSpacing
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|avail
init|=
literal|0.0
decl_stmt|;
if|if
condition|(
operator|!
name|ignore
operator|.
name|testBit
argument_list|(
name|i
argument_list|)
condition|)
block|{
specifier|const
name|QGridLayoutBox
modifier|&
name|box
init|=
name|boxes
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|avail
operator|=
name|box
operator|.
name|q_sizes
argument_list|(
name|which
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|nextSpacing
expr_stmt|;
name|nextSpacing
operator|=
name|spacings
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
operator|*
name|positions
operator|++
operator|=
name|offset
expr_stmt|;
operator|*
name|sizes
operator|++
operator|=
name|avail
expr_stmt|;
name|offset
operator|+=
name|avail
expr_stmt|;
block|}
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QGRIDLAYOUTENGINE_DEBUG
end_ifdef
begin_function
DECL|function|dump
name|void
name|QGridLayoutRowData
operator|::
name|dump
parameter_list|(
name|int
name|indent
parameter_list|)
specifier|const
block|{
name|qDebug
argument_list|(
literal|"%*sData"
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ignore
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|qDebug
argument_list|(
literal|"%*s Row %d (stretch %d, spacing %g)"
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|,
name|i
argument_list|,
name|stretches
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|spacings
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ignore
operator|.
name|testBit
argument_list|(
name|i
argument_list|)
condition|)
name|qDebug
argument_list|(
literal|"%*s  Ignored"
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|boxes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|dump
argument_list|(
name|indent
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
name|MultiCellMap
operator|::
name|const_iterator
name|it
init|=
name|multiCellMap
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|multiCellMap
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|qDebug
argument_list|(
literal|"%*s Multi-cell entry<%d, %d> (stretch %d)"
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|,
name|it
operator|.
name|key
argument_list|()
operator|.
name|first
argument_list|,
name|it
operator|.
name|key
argument_list|()
operator|.
name|second
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|q_stretch
argument_list|)
expr_stmt|;
name|it
operator|.
name|value
argument_list|()
operator|.
name|q_box
operator|.
name|dump
argument_list|(
name|indent
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QGridLayoutItem
name|QGridLayoutItem
operator|::
name|QGridLayoutItem
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
name|int
name|rowSpan
parameter_list|,
name|int
name|columnSpan
parameter_list|,
name|Qt
operator|::
name|Alignment
name|alignment
parameter_list|)
member_init_list|:
name|q_alignment
argument_list|(
name|alignment
argument_list|)
block|{
name|q_firstRows
index|[
name|Hor
index|]
operator|=
name|column
expr_stmt|;
name|q_firstRows
index|[
name|Ver
index|]
operator|=
name|row
expr_stmt|;
name|q_rowSpans
index|[
name|Hor
index|]
operator|=
name|columnSpan
expr_stmt|;
name|q_rowSpans
index|[
name|Ver
index|]
operator|=
name|rowSpan
expr_stmt|;
name|q_stretches
index|[
name|Hor
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|q_stretches
index|[
name|Ver
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|firstRow
name|int
name|QGridLayoutItem
operator|::
name|firstRow
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
specifier|const
block|{
return|return
name|q_firstRows
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
return|;
block|}
end_function
begin_function
DECL|function|firstColumn
name|int
name|QGridLayoutItem
operator|::
name|firstColumn
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
specifier|const
block|{
return|return
name|q_firstRows
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
index|]
return|;
block|}
end_function
begin_function
DECL|function|lastRow
name|int
name|QGridLayoutItem
operator|::
name|lastRow
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
specifier|const
block|{
return|return
name|firstRow
argument_list|(
name|orientation
argument_list|)
operator|+
name|rowSpan
argument_list|(
name|orientation
argument_list|)
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|lastColumn
name|int
name|QGridLayoutItem
operator|::
name|lastColumn
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
specifier|const
block|{
return|return
name|firstColumn
argument_list|(
name|orientation
argument_list|)
operator|+
name|columnSpan
argument_list|(
name|orientation
argument_list|)
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|rowSpan
name|int
name|QGridLayoutItem
operator|::
name|rowSpan
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
specifier|const
block|{
return|return
name|q_rowSpans
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
return|;
block|}
end_function
begin_function
DECL|function|columnSpan
name|int
name|QGridLayoutItem
operator|::
name|columnSpan
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
specifier|const
block|{
return|return
name|q_rowSpans
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
index|]
return|;
block|}
end_function
begin_function
DECL|function|setFirstRow
name|void
name|QGridLayoutItem
operator|::
name|setFirstRow
parameter_list|(
name|int
name|row
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|q_firstRows
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
operator|=
name|row
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setRowSpan
name|void
name|QGridLayoutItem
operator|::
name|setRowSpan
parameter_list|(
name|int
name|rowSpan
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|q_rowSpans
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
operator|=
name|rowSpan
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stretchFactor
name|int
name|QGridLayoutItem
operator|::
name|stretchFactor
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
specifier|const
block|{
name|int
name|stretch
init|=
name|q_stretches
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
decl_stmt|;
if|if
condition|(
name|stretch
operator|>=
literal|0
condition|)
return|return
name|stretch
return|;
name|QLayoutPolicy
operator|::
name|Policy
name|policy
init|=
name|sizePolicy
argument_list|(
name|orientation
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|&
name|QLayoutPolicy
operator|::
name|ExpandFlag
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|policy
operator|&
name|QLayoutPolicy
operator|::
name|GrowFlag
condition|)
block|{
return|return
operator|-
literal|1
return|;
comment|// because we max it up
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
end_function
begin_function
DECL|function|setStretchFactor
name|void
name|QGridLayoutItem
operator|::
name|setStretchFactor
parameter_list|(
name|int
name|stretch
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|stretch
operator|>=
literal|0
argument_list|)
expr_stmt|;
comment|// ### deal with too big stretches
name|q_stretches
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
operator|=
name|stretch
expr_stmt|;
block|}
end_function
begin_function
DECL|function|controlTypes
name|QLayoutPolicy
operator|::
name|ControlTypes
name|QGridLayoutItem
operator|::
name|controlTypes
parameter_list|(
name|LayoutSide
comment|/*side*/
parameter_list|)
specifier|const
block|{
return|return
name|QLayoutPolicy
operator|::
name|DefaultType
return|;
block|}
end_function
begin_function
DECL|function|box
name|QGridLayoutBox
name|QGridLayoutItem
operator|::
name|box
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|qreal
name|constraint
parameter_list|)
specifier|const
block|{
name|QGridLayoutBox
name|result
decl_stmt|;
name|QLayoutPolicy
operator|::
name|Policy
name|policy
init|=
name|sizePolicy
argument_list|(
name|orientation
argument_list|)
decl_stmt|;
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|QSizeF
name|constraintSize
argument_list|(
operator|-
literal|1.0
argument_list|,
name|constraint
argument_list|)
decl_stmt|;
name|result
operator|.
name|q_preferredSize
operator|=
name|sizeHint
argument_list|(
name|Qt
operator|::
name|PreferredSize
argument_list|,
name|constraintSize
argument_list|)
operator|.
name|width
argument_list|()
expr_stmt|;
if|if
condition|(
name|policy
operator|&
name|QLayoutPolicy
operator|::
name|ShrinkFlag
condition|)
block|{
name|result
operator|.
name|q_minimumSize
operator|=
name|sizeHint
argument_list|(
name|Qt
operator|::
name|MinimumSize
argument_list|,
name|constraintSize
argument_list|)
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|q_minimumSize
operator|=
name|result
operator|.
name|q_preferredSize
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|&
operator|(
name|QLayoutPolicy
operator|::
name|GrowFlag
operator||
name|QLayoutPolicy
operator|::
name|ExpandFlag
operator|)
condition|)
block|{
name|result
operator|.
name|q_maximumSize
operator|=
name|sizeHint
argument_list|(
name|Qt
operator|::
name|MaximumSize
argument_list|,
name|constraintSize
argument_list|)
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|q_maximumSize
operator|=
name|result
operator|.
name|q_preferredSize
expr_stmt|;
block|}
block|}
else|else
block|{
name|QSizeF
name|constraintSize
argument_list|(
name|constraint
argument_list|,
operator|-
literal|1.0
argument_list|)
decl_stmt|;
name|result
operator|.
name|q_preferredSize
operator|=
name|sizeHint
argument_list|(
name|Qt
operator|::
name|PreferredSize
argument_list|,
name|constraintSize
argument_list|)
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|policy
operator|&
name|QLayoutPolicy
operator|::
name|ShrinkFlag
condition|)
block|{
name|result
operator|.
name|q_minimumSize
operator|=
name|sizeHint
argument_list|(
name|Qt
operator|::
name|MinimumSize
argument_list|,
name|constraintSize
argument_list|)
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|q_minimumSize
operator|=
name|result
operator|.
name|q_preferredSize
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|&
operator|(
name|QLayoutPolicy
operator|::
name|GrowFlag
operator||
name|QLayoutPolicy
operator|::
name|ExpandFlag
operator|)
condition|)
block|{
name|result
operator|.
name|q_maximumSize
operator|=
name|sizeHint
argument_list|(
name|Qt
operator|::
name|MaximumSize
argument_list|,
name|constraintSize
argument_list|)
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|q_maximumSize
operator|=
name|result
operator|.
name|q_preferredSize
expr_stmt|;
block|}
if|if
condition|(
name|alignment
argument_list|()
operator|&
name|Qt
operator|::
name|AlignBaseline
condition|)
block|{
name|result
operator|.
name|q_minimumDescent
operator|=
name|sizeHint
argument_list|(
name|Qt
operator|::
name|MinimumDescent
argument_list|,
name|constraintSize
argument_list|)
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|q_minimumDescent
operator|!=
operator|-
literal|1.0
condition|)
block|{
specifier|const
name|qreal
name|minSizeHint
init|=
name|sizeHint
argument_list|(
name|Qt
operator|::
name|MinimumSize
argument_list|,
name|constraintSize
argument_list|)
operator|.
name|height
argument_list|()
decl_stmt|;
name|result
operator|.
name|q_minimumDescent
operator|-=
operator|(
name|minSizeHint
operator|-
name|result
operator|.
name|q_minimumSize
operator|)
expr_stmt|;
name|result
operator|.
name|q_minimumAscent
operator|=
name|result
operator|.
name|q_minimumSize
operator|-
name|result
operator|.
name|q_minimumDescent
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|policy
operator|&
name|QLayoutPolicy
operator|::
name|IgnoreFlag
condition|)
name|result
operator|.
name|q_preferredSize
operator|=
name|result
operator|.
name|q_minimumSize
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|geometryWithin
name|QRectF
name|QGridLayoutItem
operator|::
name|geometryWithin
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|,
name|qreal
name|width
parameter_list|,
name|qreal
name|height
parameter_list|,
name|qreal
name|rowDescent
parameter_list|,
name|Qt
operator|::
name|Alignment
name|align
parameter_list|)
specifier|const
block|{
specifier|const
name|qreal
name|cellWidth
init|=
name|width
decl_stmt|;
specifier|const
name|qreal
name|cellHeight
init|=
name|height
decl_stmt|;
name|QSizeF
name|size
init|=
name|effectiveMaxSize
argument_list|(
name|QSizeF
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasDynamicConstraint
argument_list|()
condition|)
block|{
if|if
condition|(
name|dynamicConstraintOrientation
argument_list|()
operator|==
name|Qt
operator|::
name|Vertical
condition|)
block|{
if|if
condition|(
name|size
operator|.
name|width
argument_list|()
operator|>
name|cellWidth
condition|)
name|size
operator|=
name|effectiveMaxSize
argument_list|(
name|QSizeF
argument_list|(
name|cellWidth
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|.
name|height
argument_list|()
operator|>
name|cellHeight
condition|)
block|{
name|size
operator|=
name|effectiveMaxSize
argument_list|(
name|QSizeF
argument_list|(
operator|-
literal|1
argument_list|,
name|cellHeight
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|size
operator|=
name|size
operator|.
name|boundedTo
argument_list|(
name|QSizeF
argument_list|(
name|cellWidth
argument_list|,
name|cellHeight
argument_list|)
argument_list|)
expr_stmt|;
name|width
operator|=
name|size
operator|.
name|width
argument_list|()
expr_stmt|;
name|height
operator|=
name|size
operator|.
name|height
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|align
operator|&
name|Qt
operator|::
name|AlignHorizontal_Mask
condition|)
block|{
case|case
name|Qt
operator|::
name|AlignHCenter
case|:
name|x
operator|+=
operator|(
name|cellWidth
operator|-
name|width
operator|)
operator|/
literal|2
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|AlignRight
case|:
name|x
operator|+=
name|cellWidth
operator|-
name|width
expr_stmt|;
break|break;
default|default:
break|break;
block|}
switch|switch
condition|(
name|align
operator|&
name|Qt
operator|::
name|AlignVertical_Mask
condition|)
block|{
case|case
name|Qt
operator|::
name|AlignVCenter
case|:
name|y
operator|+=
operator|(
name|cellHeight
operator|-
name|height
operator|)
operator|/
literal|2
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|AlignBottom
case|:
name|y
operator|+=
name|cellHeight
operator|-
name|height
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|AlignBaseline
case|:
block|{
name|width
operator|=
name|qMin
argument_list|(
name|effectiveMaxSize
argument_list|(
name|QSizeF
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|width
argument_list|()
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|QGridLayoutBox
name|vBox
init|=
name|box
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|descent
init|=
name|vBox
operator|.
name|q_minimumDescent
decl_stmt|;
specifier|const
name|qreal
name|ascent
init|=
name|vBox
operator|.
name|q_minimumSize
operator|-
name|descent
decl_stmt|;
name|y
operator|+=
operator|(
name|cellHeight
operator|-
name|rowDescent
operator|-
name|ascent
operator|)
expr_stmt|;
name|height
operator|=
name|ascent
operator|+
name|descent
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
return|return
name|QRectF
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|transpose
name|void
name|QGridLayoutItem
operator|::
name|transpose
parameter_list|()
block|{
name|qSwap
argument_list|(
name|q_firstRows
index|[
name|Hor
index|]
argument_list|,
name|q_firstRows
index|[
name|Ver
index|]
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|q_rowSpans
index|[
name|Hor
index|]
argument_list|,
name|q_rowSpans
index|[
name|Ver
index|]
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|q_stretches
index|[
name|Hor
index|]
argument_list|,
name|q_stretches
index|[
name|Ver
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertOrRemoveRows
name|void
name|QGridLayoutItem
operator|::
name|insertOrRemoveRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|delta
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|int
name|oldFirstRow
init|=
name|firstRow
argument_list|(
name|orientation
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldFirstRow
operator|>=
name|row
condition|)
block|{
name|setFirstRow
argument_list|(
name|oldFirstRow
operator|+
name|delta
argument_list|,
name|orientation
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastRow
argument_list|(
name|orientation
argument_list|)
operator|>=
name|row
condition|)
block|{
name|setRowSpan
argument_list|(
name|rowSpan
argument_list|(
name|orientation
argument_list|)
operator|+
name|delta
argument_list|,
name|orientation
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal     returns the effective maximumSize, will take the sizepolicy into     consideration. (i.e. if sizepolicy does not have QLayoutPolicy::Grow, then     maxSizeHint will be the preferredSize)     Note that effectiveSizeHint does not take sizePolicy into consideration,     (since it only evaluates the hints, as the name implies) */
end_comment
begin_function
DECL|function|effectiveMaxSize
name|QSizeF
name|QGridLayoutItem
operator|::
name|effectiveMaxSize
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|constraint
parameter_list|)
specifier|const
block|{
name|QSizeF
name|size
init|=
name|constraint
decl_stmt|;
name|bool
name|vGrow
init|=
operator|(
name|sizePolicy
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|)
operator|&
name|QLayoutPolicy
operator|::
name|GrowFlag
operator|)
operator|==
name|QLayoutPolicy
operator|::
name|GrowFlag
decl_stmt|;
name|bool
name|hGrow
init|=
operator|(
name|sizePolicy
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|&
name|QLayoutPolicy
operator|::
name|GrowFlag
operator|)
operator|==
name|QLayoutPolicy
operator|::
name|GrowFlag
decl_stmt|;
if|if
condition|(
operator|!
name|vGrow
operator|||
operator|!
name|hGrow
condition|)
block|{
name|QSizeF
name|pref
init|=
name|sizeHint
argument_list|(
name|Qt
operator|::
name|PreferredSize
argument_list|,
name|constraint
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|vGrow
condition|)
name|size
operator|.
name|setHeight
argument_list|(
name|pref
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hGrow
condition|)
name|size
operator|.
name|setWidth
argument_list|(
name|pref
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|size
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QSizeF
name|maxSize
init|=
name|sizeHint
argument_list|(
name|Qt
operator|::
name|MaximumSize
argument_list|,
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|.
name|width
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|size
operator|.
name|setWidth
argument_list|(
name|maxSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|.
name|height
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|size
operator|.
name|setHeight
argument_list|(
name|maxSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QGRIDLAYOUTENGINE_DEBUG
end_ifdef
begin_function
DECL|function|dump
name|void
name|QGridLayoutItem
operator|::
name|dump
parameter_list|(
name|int
name|indent
parameter_list|)
specifier|const
block|{
name|qDebug
argument_list|(
literal|"%*s (%d, %d) %d x %d"
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|,
name|firstRow
argument_list|()
argument_list|,
name|firstColumn
argument_list|()
argument_list|,
comment|//###
name|rowSpan
argument_list|()
argument_list|,
name|columnSpan
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|q_stretches
index|[
name|Hor
index|]
operator|>=
literal|0
condition|)
name|qDebug
argument_list|(
literal|"%*s Horizontal stretch: %d"
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|,
name|q_stretches
index|[
name|Hor
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|q_stretches
index|[
name|Ver
index|]
operator|>=
literal|0
condition|)
name|qDebug
argument_list|(
literal|"%*s Vertical stretch: %d"
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|,
name|q_stretches
index|[
name|Ver
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|q_alignment
operator|!=
literal|0
condition|)
name|qDebug
argument_list|(
literal|"%*s Alignment: %x"
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|,
name|uint
argument_list|(
name|q_alignment
argument_list|)
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"%*s Horizontal size policy: %x Vertical size policy: %x"
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|,
name|sizePolicy
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
argument_list|,
name|sizePolicy
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|insertOrRemoveRows
name|void
name|QGridLayoutRowInfo
operator|::
name|insertOrRemoveRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|delta
parameter_list|)
block|{
name|count
operator|+=
name|delta
expr_stmt|;
name|insertOrRemoveItems
argument_list|(
name|stretches
argument_list|,
name|row
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|insertOrRemoveItems
argument_list|(
name|spacings
argument_list|,
name|row
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|insertOrRemoveItems
argument_list|(
name|alignments
argument_list|,
name|row
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|insertOrRemoveItems
argument_list|(
name|boxes
argument_list|,
name|row
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QGRIDLAYOUTENGINE_DEBUG
end_ifdef
begin_function
DECL|function|dump
name|void
name|QGridLayoutRowInfo
operator|::
name|dump
parameter_list|(
name|int
name|indent
parameter_list|)
specifier|const
block|{
name|qDebug
argument_list|(
literal|"%*sInfo (count: %d)"
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|,
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|message
decl_stmt|;
if|if
condition|(
name|stretches
operator|.
name|value
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|()
operator|>=
literal|0
condition|)
name|message
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" stretch %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|stretches
operator|.
name|value
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|spacings
operator|.
name|value
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|()
operator|>=
literal|0.0
condition|)
name|message
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" spacing %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|spacings
operator|.
name|value
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|alignments
operator|.
name|value
argument_list|(
name|i
argument_list|)
operator|!=
literal|0
condition|)
name|message
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" alignment %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|int
argument_list|(
name|alignments
operator|.
name|value
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|message
operator|.
name|isEmpty
argument_list|()
operator|||
name|boxes
operator|.
name|value
argument_list|(
name|i
argument_list|)
operator|!=
name|QGridLayoutBox
argument_list|()
condition|)
block|{
name|qDebug
argument_list|(
literal|"%*s Row %d:%s"
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|,
name|i
argument_list|,
name|qPrintable
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|boxes
operator|.
name|value
argument_list|(
name|i
argument_list|)
operator|!=
name|QGridLayoutBox
argument_list|()
condition|)
name|boxes
operator|.
name|value
argument_list|(
name|i
argument_list|)
operator|.
name|dump
argument_list|(
name|indent
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QGridLayoutEngine
name|QGridLayoutEngine
operator|::
name|QGridLayoutEngine
parameter_list|(
name|Qt
operator|::
name|Alignment
name|defaultAlignment
parameter_list|,
name|bool
name|snapToPixelGrid
parameter_list|)
block|{
name|m_visualDirection
operator|=
name|Qt
operator|::
name|LeftToRight
expr_stmt|;
name|m_defaultAlignment
operator|=
name|defaultAlignment
expr_stmt|;
name|m_snapToPixelGrid
operator|=
name|snapToPixelGrid
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|rowCount
name|int
name|QGridLayoutEngine
operator|::
name|rowCount
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
specifier|const
block|{
return|return
name|q_infos
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
operator|.
name|count
return|;
block|}
end_function
begin_function
DECL|function|columnCount
name|int
name|QGridLayoutEngine
operator|::
name|columnCount
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
specifier|const
block|{
return|return
name|q_infos
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
index|]
operator|.
name|count
return|;
block|}
end_function
begin_function
DECL|function|itemCount
name|int
name|QGridLayoutEngine
operator|::
name|itemCount
parameter_list|()
specifier|const
block|{
return|return
name|q_items
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|itemAt
name|QGridLayoutItem
modifier|*
name|QGridLayoutEngine
operator|::
name|itemAt
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|itemCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|q_items
operator|.
name|at
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|effectiveFirstRow
name|int
name|QGridLayoutEngine
operator|::
name|effectiveFirstRow
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
specifier|const
block|{
name|ensureEffectiveFirstAndLastRows
argument_list|()
expr_stmt|;
return|return
name|q_cachedEffectiveFirstRows
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
return|;
block|}
end_function
begin_function
DECL|function|effectiveLastRow
name|int
name|QGridLayoutEngine
operator|::
name|effectiveLastRow
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
specifier|const
block|{
name|ensureEffectiveFirstAndLastRows
argument_list|()
expr_stmt|;
return|return
name|q_cachedEffectiveLastRows
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
return|;
block|}
end_function
begin_function
DECL|function|setSpacing
name|void
name|QGridLayoutEngine
operator|::
name|setSpacing
parameter_list|(
name|qreal
name|spacing
parameter_list|,
name|Qt
operator|::
name|Orientations
name|orientations
parameter_list|)
block|{
if|if
condition|(
name|orientations
operator|&
name|Qt
operator|::
name|Horizontal
condition|)
name|q_defaultSpacings
index|[
name|Hor
index|]
operator|.
name|setUserValue
argument_list|(
name|spacing
argument_list|)
expr_stmt|;
if|if
condition|(
name|orientations
operator|&
name|Qt
operator|::
name|Vertical
condition|)
name|q_defaultSpacings
index|[
name|Ver
index|]
operator|.
name|setUserValue
argument_list|(
name|spacing
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|spacing
name|qreal
name|QGridLayoutEngine
operator|::
name|spacing
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
specifier|const
name|QAbstractLayoutStyleInfo
modifier|*
name|styleInfo
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|q_defaultSpacings
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
operator|.
name|isUser
argument_list|()
condition|)
block|{
name|qreal
name|defaultSpacing
init|=
name|styleInfo
operator|->
name|spacing
argument_list|(
name|orientation
argument_list|)
decl_stmt|;
name|q_defaultSpacings
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
operator|.
name|setCachedValue
argument_list|(
name|defaultSpacing
argument_list|)
expr_stmt|;
block|}
return|return
name|q_defaultSpacings
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
operator|.
name|value
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setRowSpacing
name|void
name|QGridLayoutEngine
operator|::
name|setRowSpacing
parameter_list|(
name|int
name|row
parameter_list|,
name|qreal
name|spacing
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|row
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QGridLayoutRowInfo
modifier|&
name|rowInfo
init|=
name|q_infos
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
decl_stmt|;
if|if
condition|(
name|row
operator|>=
name|rowInfo
operator|.
name|spacings
operator|.
name|count
argument_list|()
condition|)
name|rowInfo
operator|.
name|spacings
operator|.
name|resize
argument_list|(
name|row
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|spacing
operator|>=
literal|0
condition|)
name|rowInfo
operator|.
name|spacings
index|[
name|row
index|]
operator|.
name|setUserValue
argument_list|(
name|spacing
argument_list|)
expr_stmt|;
else|else
name|rowInfo
operator|.
name|spacings
index|[
name|row
index|]
operator|=
name|QLayoutParameter
argument_list|<
name|qreal
argument_list|>
argument_list|()
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rowSpacing
name|qreal
name|QGridLayoutEngine
operator|::
name|rowSpacing
parameter_list|(
name|int
name|row
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
specifier|const
block|{
name|QLayoutParameter
argument_list|<
name|qreal
argument_list|>
name|spacing
init|=
name|q_infos
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
operator|.
name|spacings
operator|.
name|value
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|spacing
operator|.
name|isDefault
argument_list|()
condition|)
return|return
name|spacing
operator|.
name|value
argument_list|()
return|;
return|return
name|q_defaultSpacings
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
operator|.
name|value
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setRowStretchFactor
name|void
name|QGridLayoutEngine
operator|::
name|setRowStretchFactor
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|stretch
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|row
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|stretch
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|maybeExpandGrid
argument_list|(
name|row
argument_list|,
operator|-
literal|1
argument_list|,
name|orientation
argument_list|)
expr_stmt|;
name|QGridLayoutRowInfo
modifier|&
name|rowInfo
init|=
name|q_infos
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
decl_stmt|;
if|if
condition|(
name|row
operator|>=
name|rowInfo
operator|.
name|stretches
operator|.
name|count
argument_list|()
condition|)
name|rowInfo
operator|.
name|stretches
operator|.
name|resize
argument_list|(
name|row
operator|+
literal|1
argument_list|)
expr_stmt|;
name|rowInfo
operator|.
name|stretches
index|[
name|row
index|]
operator|.
name|setUserValue
argument_list|(
name|stretch
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rowStretchFactor
name|int
name|QGridLayoutEngine
operator|::
name|rowStretchFactor
parameter_list|(
name|int
name|row
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
specifier|const
block|{
name|QStretchParameter
name|stretch
init|=
name|q_infos
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
operator|.
name|stretches
operator|.
name|value
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|stretch
operator|.
name|isDefault
argument_list|()
condition|)
return|return
name|stretch
operator|.
name|value
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|setRowSizeHint
name|void
name|QGridLayoutEngine
operator|::
name|setRowSizeHint
parameter_list|(
name|Qt
operator|::
name|SizeHint
name|which
parameter_list|,
name|int
name|row
parameter_list|,
name|qreal
name|size
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|row
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|size
operator|>=
literal|0.0
argument_list|)
expr_stmt|;
name|maybeExpandGrid
argument_list|(
name|row
argument_list|,
operator|-
literal|1
argument_list|,
name|orientation
argument_list|)
expr_stmt|;
name|QGridLayoutRowInfo
modifier|&
name|rowInfo
init|=
name|q_infos
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
decl_stmt|;
if|if
condition|(
name|row
operator|>=
name|rowInfo
operator|.
name|boxes
operator|.
name|count
argument_list|()
condition|)
name|rowInfo
operator|.
name|boxes
operator|.
name|resize
argument_list|(
name|row
operator|+
literal|1
argument_list|)
expr_stmt|;
name|rowInfo
operator|.
name|boxes
index|[
name|row
index|]
operator|.
name|q_sizes
argument_list|(
name|which
argument_list|)
operator|=
name|size
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rowSizeHint
name|qreal
name|QGridLayoutEngine
operator|::
name|rowSizeHint
parameter_list|(
name|Qt
operator|::
name|SizeHint
name|which
parameter_list|,
name|int
name|row
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
specifier|const
block|{
return|return
name|q_infos
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
operator|.
name|boxes
operator|.
name|value
argument_list|(
name|row
argument_list|)
operator|.
name|q_sizes
argument_list|(
name|which
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setRowAlignment
name|void
name|QGridLayoutEngine
operator|::
name|setRowAlignment
parameter_list|(
name|int
name|row
parameter_list|,
name|Qt
operator|::
name|Alignment
name|alignment
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|row
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|maybeExpandGrid
argument_list|(
name|row
argument_list|,
operator|-
literal|1
argument_list|,
name|orientation
argument_list|)
expr_stmt|;
name|QGridLayoutRowInfo
modifier|&
name|rowInfo
init|=
name|q_infos
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
decl_stmt|;
if|if
condition|(
name|row
operator|>=
name|rowInfo
operator|.
name|alignments
operator|.
name|count
argument_list|()
condition|)
name|rowInfo
operator|.
name|alignments
operator|.
name|resize
argument_list|(
name|row
operator|+
literal|1
argument_list|)
expr_stmt|;
name|rowInfo
operator|.
name|alignments
index|[
name|row
index|]
operator|=
name|alignment
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rowAlignment
name|Qt
operator|::
name|Alignment
name|QGridLayoutEngine
operator|::
name|rowAlignment
parameter_list|(
name|int
name|row
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|row
operator|>=
literal|0
argument_list|)
expr_stmt|;
return|return
name|q_infos
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
operator|.
name|alignments
operator|.
name|value
argument_list|(
name|row
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|effectiveAlignment
name|Qt
operator|::
name|Alignment
name|QGridLayoutEngine
operator|::
name|effectiveAlignment
parameter_list|(
specifier|const
name|QGridLayoutItem
modifier|*
name|layoutItem
parameter_list|)
specifier|const
block|{
name|Qt
operator|::
name|Alignment
name|align
init|=
name|layoutItem
operator|->
name|alignment
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|align
operator|&
name|Qt
operator|::
name|AlignVertical_Mask
operator|)
condition|)
block|{
comment|// no vertical alignment, respect the row alignment
name|int
name|y
init|=
name|layoutItem
operator|->
name|firstRow
argument_list|()
decl_stmt|;
name|align
operator||=
operator|(
name|rowAlignment
argument_list|(
name|y
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
operator|&
name|Qt
operator|::
name|AlignVertical_Mask
operator|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|align
operator|&
name|Qt
operator|::
name|AlignVertical_Mask
operator|)
condition|)
name|align
operator||=
operator|(
name|m_defaultAlignment
operator|&
name|Qt
operator|::
name|AlignVertical_Mask
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|align
operator|&
name|Qt
operator|::
name|AlignHorizontal_Mask
operator|)
condition|)
block|{
comment|// no horizontal alignment, respect the column alignment
name|int
name|x
init|=
name|layoutItem
operator|->
name|firstColumn
argument_list|()
decl_stmt|;
name|align
operator||=
operator|(
name|rowAlignment
argument_list|(
name|x
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|&
name|Qt
operator|::
name|AlignHorizontal_Mask
operator|)
expr_stmt|;
block|}
return|return
name|align
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     The \a index is only used by QGraphicsLinearLayout to ensure that itemAt() reflects the order     of visual arrangement. Strictly speaking it does not have to, but most people expect it to.     (And if it didn't we would have to add itemArrangedAt(int index) or something..)  */
end_comment
begin_function
DECL|function|insertItem
name|void
name|QGridLayoutEngine
operator|::
name|insertItem
parameter_list|(
name|QGridLayoutItem
modifier|*
name|item
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|maybeExpandGrid
argument_list|(
name|item
operator|->
name|lastRow
argument_list|()
argument_list|,
name|item
operator|->
name|lastColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
name|q_items
operator|.
name|append
argument_list|(
name|item
argument_list|)
expr_stmt|;
else|else
name|q_items
operator|.
name|insert
argument_list|(
name|index
argument_list|,
name|item
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|item
operator|->
name|firstRow
argument_list|()
init|;
name|i
operator|<=
name|item
operator|->
name|lastRow
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|item
operator|->
name|firstColumn
argument_list|()
init|;
name|j
operator|<=
name|item
operator|->
name|lastColumn
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|itemAt
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"QGridLayoutEngine::addItem: Cell (%d, %d) already taken"
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|setItemAt
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|addItem
name|void
name|QGridLayoutEngine
operator|::
name|addItem
parameter_list|(
name|QGridLayoutItem
modifier|*
name|item
parameter_list|)
block|{
name|insertItem
argument_list|(
name|item
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeItem
name|void
name|QGridLayoutEngine
operator|::
name|removeItem
parameter_list|(
name|QGridLayoutItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|q_items
operator|.
name|contains
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|item
operator|->
name|firstRow
argument_list|()
init|;
name|i
operator|<=
name|item
operator|->
name|lastRow
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|item
operator|->
name|firstColumn
argument_list|()
init|;
name|j
operator|<=
name|item
operator|->
name|lastColumn
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|itemAt
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
operator|==
name|item
condition|)
name|setItemAt
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|q_items
operator|.
name|removeAll
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|itemAt
name|QGridLayoutItem
modifier|*
name|QGridLayoutEngine
operator|::
name|itemAt
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|qSwap
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|uint
argument_list|(
name|row
argument_list|)
operator|>=
name|uint
argument_list|(
name|rowCount
argument_list|()
argument_list|)
operator|||
name|uint
argument_list|(
name|column
argument_list|)
operator|>=
name|uint
argument_list|(
name|columnCount
argument_list|()
argument_list|)
condition|)
return|return
literal|0
return|;
return|return
name|q_grid
operator|.
name|at
argument_list|(
operator|(
name|row
operator|*
name|internalGridColumnCount
argument_list|()
operator|)
operator|+
name|column
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|invalidate
name|void
name|QGridLayoutEngine
operator|::
name|invalidate
parameter_list|()
block|{
name|q_cachedEffectiveFirstRows
index|[
name|Hor
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|q_cachedEffectiveFirstRows
index|[
name|Ver
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|q_cachedEffectiveLastRows
index|[
name|Hor
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|q_cachedEffectiveLastRows
index|[
name|Ver
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|q_totalBoxCachedConstraints
index|[
name|Hor
index|]
operator|=
name|NotCached
expr_stmt|;
name|q_totalBoxCachedConstraints
index|[
name|Ver
index|]
operator|=
name|NotCached
expr_stmt|;
name|q_cachedSize
operator|=
name|QSizeF
argument_list|()
expr_stmt|;
name|q_cachedConstraintOrientation
operator|=
name|UnknownConstraint
expr_stmt|;
block|}
end_function
begin_function
DECL|function|visualRect
specifier|static
name|void
name|visualRect
parameter_list|(
name|QRectF
modifier|*
name|geom
parameter_list|,
name|Qt
operator|::
name|LayoutDirection
name|dir
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|contentsRect
parameter_list|)
block|{
if|if
condition|(
name|dir
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|geom
operator|->
name|moveRight
argument_list|(
name|contentsRect
operator|.
name|right
argument_list|()
operator|-
operator|(
name|geom
operator|->
name|left
argument_list|()
operator|-
name|contentsRect
operator|.
name|left
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setGeometries
name|void
name|QGridLayoutEngine
operator|::
name|setGeometries
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|contentsGeometry
parameter_list|,
specifier|const
name|QAbstractLayoutStyleInfo
modifier|*
name|styleInfo
parameter_list|)
block|{
if|if
condition|(
name|rowCount
argument_list|()
operator|<
literal|1
operator|||
name|columnCount
argument_list|()
operator|<
literal|1
condition|)
return|return;
name|ensureGeometries
argument_list|(
name|contentsGeometry
operator|.
name|size
argument_list|()
argument_list|,
name|styleInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|q_items
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QGridLayoutItem
modifier|*
name|item
init|=
name|q_items
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|qreal
name|x
init|=
name|q_xx
index|[
name|item
operator|->
name|firstColumn
argument_list|()
index|]
decl_stmt|;
name|qreal
name|y
init|=
name|q_yy
index|[
name|item
operator|->
name|firstRow
argument_list|()
index|]
decl_stmt|;
name|qreal
name|width
init|=
name|q_widths
index|[
name|item
operator|->
name|lastColumn
argument_list|()
index|]
decl_stmt|;
name|qreal
name|height
init|=
name|q_heights
index|[
name|item
operator|->
name|lastRow
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|item
operator|->
name|columnSpan
argument_list|()
operator|!=
literal|1
condition|)
name|width
operator|+=
name|q_xx
index|[
name|item
operator|->
name|lastColumn
argument_list|()
index|]
operator|-
name|x
expr_stmt|;
if|if
condition|(
name|item
operator|->
name|rowSpan
argument_list|()
operator|!=
literal|1
condition|)
name|height
operator|+=
name|q_yy
index|[
name|item
operator|->
name|lastRow
argument_list|()
index|]
operator|-
name|y
expr_stmt|;
specifier|const
name|Qt
operator|::
name|Alignment
name|align
init|=
name|effectiveAlignment
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|QRectF
name|geom
init|=
name|item
operator|->
name|geometryWithin
argument_list|(
name|contentsGeometry
operator|.
name|x
argument_list|()
operator|+
name|x
argument_list|,
name|contentsGeometry
operator|.
name|y
argument_list|()
operator|+
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|q_descents
index|[
name|item
operator|->
name|lastRow
argument_list|()
index|]
argument_list|,
name|align
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_snapToPixelGrid
condition|)
block|{
comment|// x and y should already be rounded, but the call to geometryWithin() above might
comment|// result in a geom with x,y at half-pixels (due to centering within the cell)
name|geom
operator|.
name|setX
argument_list|(
name|qround
argument_list|(
name|geom
operator|.
name|x
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Do not snap baseline aligned items, since that might cause the baselines to not be aligned.
if|if
condition|(
name|align
operator|!=
name|Qt
operator|::
name|AlignBaseline
condition|)
name|geom
operator|.
name|setY
argument_list|(
name|qround
argument_list|(
name|geom
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|visualRect
argument_list|(
operator|&
name|geom
argument_list|,
name|visualDirection
argument_list|()
argument_list|,
name|contentsGeometry
argument_list|)
expr_stmt|;
name|item
operator|->
name|setGeometry
argument_list|(
name|geom
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// ### candidate for deletion
end_comment
begin_function
DECL|function|cellRect
name|QRectF
name|QGridLayoutEngine
operator|::
name|cellRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|contentsGeometry
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
name|int
name|rowSpan
parameter_list|,
name|int
name|columnSpan
parameter_list|,
specifier|const
name|QAbstractLayoutStyleInfo
modifier|*
name|styleInfo
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|uint
argument_list|(
name|row
argument_list|)
operator|>=
name|uint
argument_list|(
name|rowCount
argument_list|()
argument_list|)
operator|||
name|uint
argument_list|(
name|column
argument_list|)
operator|>=
name|uint
argument_list|(
name|columnCount
argument_list|()
argument_list|)
operator|||
name|rowSpan
operator|<
literal|1
operator|||
name|columnSpan
operator|<
literal|1
condition|)
return|return
name|QRectF
argument_list|()
return|;
name|ensureGeometries
argument_list|(
name|contentsGeometry
operator|.
name|size
argument_list|()
argument_list|,
name|styleInfo
argument_list|)
expr_stmt|;
name|int
name|lastColumn
init|=
name|qMax
argument_list|(
name|column
operator|+
name|columnSpan
argument_list|,
name|columnCount
argument_list|()
argument_list|)
operator|-
literal|1
decl_stmt|;
name|int
name|lastRow
init|=
name|qMax
argument_list|(
name|row
operator|+
name|rowSpan
argument_list|,
name|rowCount
argument_list|()
argument_list|)
operator|-
literal|1
decl_stmt|;
name|qreal
name|x
init|=
name|q_xx
index|[
name|column
index|]
decl_stmt|;
name|qreal
name|y
init|=
name|q_yy
index|[
name|row
index|]
decl_stmt|;
name|qreal
name|width
init|=
name|q_widths
index|[
name|lastColumn
index|]
decl_stmt|;
name|qreal
name|height
init|=
name|q_heights
index|[
name|lastRow
index|]
decl_stmt|;
if|if
condition|(
name|columnSpan
operator|!=
literal|1
condition|)
name|width
operator|+=
name|q_xx
index|[
name|lastColumn
index|]
operator|-
name|x
expr_stmt|;
if|if
condition|(
name|rowSpan
operator|!=
literal|1
condition|)
name|height
operator|+=
name|q_yy
index|[
name|lastRow
index|]
operator|-
name|y
expr_stmt|;
return|return
name|QRectF
argument_list|(
name|contentsGeometry
operator|.
name|x
argument_list|()
operator|+
name|x
argument_list|,
name|contentsGeometry
operator|.
name|y
argument_list|()
operator|+
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|sizeHint
name|QSizeF
name|QGridLayoutEngine
operator|::
name|sizeHint
parameter_list|(
name|Qt
operator|::
name|SizeHint
name|which
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|constraint
parameter_list|,
specifier|const
name|QAbstractLayoutStyleInfo
modifier|*
name|styleInfo
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|hasDynamicConstraint
argument_list|()
operator|&&
name|rowCount
argument_list|()
operator|>
literal|0
operator|&&
name|columnCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|QGridLayoutBox
name|sizehint_totalBoxes
index|[
name|NOrientations
index|]
decl_stmt|;
name|bool
name|sizeHintCalculated
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|constraintOrientation
argument_list|()
operator|==
name|Qt
operator|::
name|Vertical
condition|)
block|{
comment|//We have items whose height depends on their width
if|if
condition|(
name|constraint
operator|.
name|width
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|ensureColumnAndRowData
argument_list|(
operator|&
name|q_columnData
argument_list|,
operator|&
name|sizehint_totalBoxes
index|[
name|Hor
index|]
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|styleInfo
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|qreal
argument_list|>
name|sizehint_xx
decl_stmt|;
name|QVector
argument_list|<
name|qreal
argument_list|>
name|sizehint_widths
decl_stmt|;
name|sizehint_xx
operator|.
name|resize
argument_list|(
name|columnCount
argument_list|()
argument_list|)
expr_stmt|;
name|sizehint_widths
operator|.
name|resize
argument_list|(
name|columnCount
argument_list|()
argument_list|)
expr_stmt|;
name|qreal
name|width
init|=
name|constraint
operator|.
name|width
argument_list|()
decl_stmt|;
comment|//Calculate column widths and positions, and put results in q_xx.data() and q_widths.data() so that we can use this information as
comment|//constraints to find the row heights
name|q_columnData
operator|.
name|calculateGeometries
argument_list|(
literal|0
argument_list|,
name|columnCount
argument_list|()
argument_list|,
name|width
argument_list|,
name|sizehint_xx
operator|.
name|data
argument_list|()
argument_list|,
name|sizehint_widths
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|sizehint_totalBoxes
index|[
name|Hor
index|]
argument_list|,
name|q_infos
index|[
name|Hor
index|]
argument_list|,
name|m_snapToPixelGrid
argument_list|)
expr_stmt|;
name|ensureColumnAndRowData
argument_list|(
operator|&
name|q_rowData
argument_list|,
operator|&
name|sizehint_totalBoxes
index|[
name|Ver
index|]
argument_list|,
name|sizehint_xx
operator|.
name|data
argument_list|()
argument_list|,
name|sizehint_widths
operator|.
name|data
argument_list|()
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|styleInfo
argument_list|)
expr_stmt|;
name|sizeHintCalculated
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|constraint
operator|.
name|height
argument_list|()
operator|>=
literal|0
condition|)
block|{
comment|//We have items whose width depends on their height
name|ensureColumnAndRowData
argument_list|(
operator|&
name|q_rowData
argument_list|,
operator|&
name|sizehint_totalBoxes
index|[
name|Ver
index|]
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|styleInfo
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|qreal
argument_list|>
name|sizehint_yy
decl_stmt|;
name|QVector
argument_list|<
name|qreal
argument_list|>
name|sizehint_heights
decl_stmt|;
name|sizehint_yy
operator|.
name|resize
argument_list|(
name|rowCount
argument_list|()
argument_list|)
expr_stmt|;
name|sizehint_heights
operator|.
name|resize
argument_list|(
name|rowCount
argument_list|()
argument_list|)
expr_stmt|;
name|qreal
name|height
init|=
name|constraint
operator|.
name|height
argument_list|()
decl_stmt|;
comment|//Calculate row heights and positions, and put results in q_yy.data() and q_heights.data() so that we can use this information as
comment|//constraints to find the column widths
name|q_rowData
operator|.
name|calculateGeometries
argument_list|(
literal|0
argument_list|,
name|rowCount
argument_list|()
argument_list|,
name|height
argument_list|,
name|sizehint_yy
operator|.
name|data
argument_list|()
argument_list|,
name|sizehint_heights
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|sizehint_totalBoxes
index|[
name|Ver
index|]
argument_list|,
name|q_infos
index|[
name|Ver
index|]
argument_list|,
name|m_snapToPixelGrid
argument_list|)
expr_stmt|;
name|ensureColumnAndRowData
argument_list|(
operator|&
name|q_columnData
argument_list|,
operator|&
name|sizehint_totalBoxes
index|[
name|Hor
index|]
argument_list|,
name|sizehint_yy
operator|.
name|data
argument_list|()
argument_list|,
name|sizehint_heights
operator|.
name|data
argument_list|()
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|styleInfo
argument_list|)
expr_stmt|;
name|sizeHintCalculated
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sizeHintCalculated
condition|)
return|return
name|QSizeF
argument_list|(
name|sizehint_totalBoxes
index|[
name|Hor
index|]
operator|.
name|q_sizes
argument_list|(
name|which
argument_list|)
argument_list|,
name|sizehint_totalBoxes
index|[
name|Ver
index|]
operator|.
name|q_sizes
argument_list|(
name|which
argument_list|)
argument_list|)
return|;
block|}
comment|//No items with height for width, so it doesn't matter which order we do these in
name|ensureColumnAndRowData
argument_list|(
operator|&
name|q_columnData
argument_list|,
operator|&
name|q_totalBoxes
index|[
name|Hor
index|]
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|styleInfo
argument_list|)
expr_stmt|;
name|ensureColumnAndRowData
argument_list|(
operator|&
name|q_rowData
argument_list|,
operator|&
name|q_totalBoxes
index|[
name|Ver
index|]
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|styleInfo
argument_list|)
expr_stmt|;
return|return
name|QSizeF
argument_list|(
name|q_totalBoxes
index|[
name|Hor
index|]
operator|.
name|q_sizes
argument_list|(
name|which
argument_list|)
argument_list|,
name|q_totalBoxes
index|[
name|Ver
index|]
operator|.
name|q_sizes
argument_list|(
name|which
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|controlTypes
name|QLayoutPolicy
operator|::
name|ControlTypes
name|QGridLayoutEngine
operator|::
name|controlTypes
parameter_list|(
name|LayoutSide
name|side
parameter_list|)
specifier|const
block|{
name|Qt
operator|::
name|Orientation
name|orientation
init|=
operator|(
name|side
operator|==
name|Top
operator|||
name|side
operator|==
name|Bottom
operator|)
condition|?
name|Qt
operator|::
name|Vertical
else|:
name|Qt
operator|::
name|Horizontal
decl_stmt|;
name|int
name|row
init|=
operator|(
name|side
operator|==
name|Top
operator|||
name|side
operator|==
name|Left
operator|)
condition|?
name|effectiveFirstRow
argument_list|(
name|orientation
argument_list|)
else|:
name|effectiveLastRow
argument_list|(
name|orientation
argument_list|)
decl_stmt|;
name|QLayoutPolicy
operator|::
name|ControlTypes
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
name|columnCount
argument_list|(
name|orientation
argument_list|)
operator|-
literal|1
init|;
name|column
operator|>=
literal|0
condition|;
operator|--
name|column
control|)
block|{
if|if
condition|(
name|QGridLayoutItem
modifier|*
name|item
init|=
name|itemAt
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|orientation
argument_list|)
condition|)
name|result
operator||=
name|item
operator|->
name|controlTypes
argument_list|(
name|side
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|transpose
name|void
name|QGridLayoutEngine
operator|::
name|transpose
parameter_list|()
block|{
name|invalidate
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|q_items
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
name|q_items
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|transpose
argument_list|()
expr_stmt|;
name|qSwap
argument_list|(
name|q_defaultSpacings
index|[
name|Hor
index|]
argument_list|,
name|q_defaultSpacings
index|[
name|Ver
index|]
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|q_infos
index|[
name|Hor
index|]
argument_list|,
name|q_infos
index|[
name|Ver
index|]
argument_list|)
expr_stmt|;
name|regenerateGrid
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setVisualDirection
name|void
name|QGridLayoutEngine
operator|::
name|setVisualDirection
parameter_list|(
name|Qt
operator|::
name|LayoutDirection
name|direction
parameter_list|)
block|{
name|m_visualDirection
operator|=
name|direction
expr_stmt|;
block|}
end_function
begin_function
DECL|function|visualDirection
name|Qt
operator|::
name|LayoutDirection
name|QGridLayoutEngine
operator|::
name|visualDirection
parameter_list|()
specifier|const
block|{
return|return
name|m_visualDirection
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QGRIDLAYOUTENGINE_DEBUG
end_ifdef
begin_function
DECL|function|dump
name|void
name|QGridLayoutEngine
operator|::
name|dump
parameter_list|(
name|int
name|indent
parameter_list|)
specifier|const
block|{
name|qDebug
argument_list|(
literal|"%*sEngine"
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"%*s Items (%d)"
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|,
name|q_items
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|q_items
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|q_items
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|dump
argument_list|(
name|indent
operator|+
literal|2
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"%*s Grid (%d x %d)"
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|,
name|internalGridRowCount
argument_list|()
argument_list|,
name|internalGridColumnCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|internalGridRowCount
argument_list|()
condition|;
operator|++
name|row
control|)
block|{
name|QString
name|message
init|=
name|QLatin1String
argument_list|(
literal|"[ "
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|internalGridColumnCount
argument_list|()
condition|;
operator|++
name|column
control|)
block|{
name|message
operator|+=
name|QString
operator|::
name|number
argument_list|(
name|q_items
operator|.
name|indexOf
argument_list|(
name|itemAt
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
argument_list|)
argument_list|)
operator|.
name|rightJustified
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|message
operator|+=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|message
operator|+=
name|QLatin1Char
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"%*s  %s"
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|,
name|qPrintable
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q_defaultSpacings
index|[
name|Hor
index|]
operator|.
name|value
argument_list|()
operator|>=
literal|0.0
operator|||
name|q_defaultSpacings
index|[
name|Ver
index|]
operator|.
name|value
argument_list|()
operator|>=
literal|0.0
condition|)
name|qDebug
argument_list|(
literal|"%*s Default spacings: %g %g"
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|,
name|q_defaultSpacings
index|[
name|Hor
index|]
operator|.
name|value
argument_list|()
argument_list|,
name|q_defaultSpacings
index|[
name|Ver
index|]
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"%*s Column and row info"
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|q_infos
index|[
name|Hor
index|]
operator|.
name|dump
argument_list|(
name|indent
operator|+
literal|2
argument_list|)
expr_stmt|;
name|q_infos
index|[
name|Ver
index|]
operator|.
name|dump
argument_list|(
name|indent
operator|+
literal|2
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"%*s Column and row data"
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|q_columnData
operator|.
name|dump
argument_list|(
name|indent
operator|+
literal|2
argument_list|)
expr_stmt|;
name|q_rowData
operator|.
name|dump
argument_list|(
name|indent
operator|+
literal|2
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"%*s Geometries output"
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|qreal
argument_list|>
modifier|*
name|cellPos
init|=
operator|&
name|q_yy
decl_stmt|;
for|for
control|(
name|int
name|pass
init|=
literal|0
init|;
name|pass
operator|<
literal|2
condition|;
operator|++
name|pass
control|)
block|{
name|QString
name|message
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|cellPos
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|message
operator|+=
name|QLatin1String
argument_list|(
operator|(
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"["
else|:
literal|", "
operator|)
argument_list|)
expr_stmt|;
name|message
operator|+=
name|QString
operator|::
name|number
argument_list|(
name|cellPos
operator|->
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|message
operator|+=
name|QLatin1Char
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"%*s %s %s"
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|,
operator|(
name|pass
operator|==
literal|0
condition|?
literal|"rows:"
else|:
literal|"columns:"
operator|)
argument_list|,
name|qPrintable
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|cellPos
operator|=
operator|&
name|q_xx
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|maybeExpandGrid
name|void
name|QGridLayoutEngine
operator|::
name|maybeExpandGrid
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|invalidate
argument_list|()
expr_stmt|;
comment|// ### move out of here?
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|qSwap
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|<
name|rowCount
argument_list|()
operator|&&
name|column
operator|<
name|columnCount
argument_list|()
condition|)
return|return;
name|int
name|oldGridRowCount
init|=
name|internalGridRowCount
argument_list|()
decl_stmt|;
name|int
name|oldGridColumnCount
init|=
name|internalGridColumnCount
argument_list|()
decl_stmt|;
name|q_infos
index|[
name|Ver
index|]
operator|.
name|count
operator|=
name|qMax
argument_list|(
name|row
operator|+
literal|1
argument_list|,
name|rowCount
argument_list|()
argument_list|)
expr_stmt|;
name|q_infos
index|[
name|Hor
index|]
operator|.
name|count
operator|=
name|qMax
argument_list|(
name|column
operator|+
literal|1
argument_list|,
name|columnCount
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|newGridRowCount
init|=
name|internalGridRowCount
argument_list|()
decl_stmt|;
name|int
name|newGridColumnCount
init|=
name|internalGridColumnCount
argument_list|()
decl_stmt|;
name|int
name|newGridSize
init|=
name|newGridRowCount
operator|*
name|newGridColumnCount
decl_stmt|;
if|if
condition|(
name|newGridSize
operator|!=
name|q_grid
operator|.
name|count
argument_list|()
condition|)
block|{
name|q_grid
operator|.
name|resize
argument_list|(
name|newGridSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|newGridColumnCount
operator|!=
name|oldGridColumnCount
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|oldGridRowCount
operator|-
literal|1
init|;
name|i
operator|>=
literal|1
condition|;
operator|--
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|oldGridColumnCount
operator|-
literal|1
init|;
name|j
operator|>=
literal|0
condition|;
operator|--
name|j
control|)
block|{
name|int
name|oldIndex
init|=
operator|(
name|i
operator|*
name|oldGridColumnCount
operator|)
operator|+
name|j
decl_stmt|;
name|int
name|newIndex
init|=
operator|(
name|i
operator|*
name|newGridColumnCount
operator|)
operator|+
name|j
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|newIndex
operator|>
name|oldIndex
argument_list|)
expr_stmt|;
name|q_grid
index|[
name|newIndex
index|]
operator|=
name|q_grid
index|[
name|oldIndex
index|]
expr_stmt|;
name|q_grid
index|[
name|oldIndex
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|regenerateGrid
name|void
name|QGridLayoutEngine
operator|::
name|regenerateGrid
parameter_list|()
block|{
name|q_grid
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|q_items
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QGridLayoutItem
modifier|*
name|item
init|=
name|q_items
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|item
operator|->
name|firstRow
argument_list|()
init|;
name|j
operator|<=
name|item
operator|->
name|lastRow
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
for|for
control|(
name|int
name|k
init|=
name|item
operator|->
name|firstColumn
argument_list|()
init|;
name|k
operator|<=
name|item
operator|->
name|lastColumn
argument_list|()
condition|;
operator|++
name|k
control|)
block|{
name|setItemAt
argument_list|(
name|j
argument_list|,
name|k
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|setItemAt
name|void
name|QGridLayoutEngine
operator|::
name|setItemAt
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
name|QGridLayoutItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|row
operator|>=
literal|0
operator|&&
name|row
operator|<
name|rowCount
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|column
operator|>=
literal|0
operator|&&
name|column
operator|<
name|columnCount
argument_list|()
argument_list|)
expr_stmt|;
name|q_grid
index|[
operator|(
name|row
operator|*
name|internalGridColumnCount
argument_list|()
operator|)
operator|+
name|column
index|]
operator|=
name|item
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertOrRemoveRows
name|void
name|QGridLayoutEngine
operator|::
name|insertOrRemoveRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|delta
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|int
name|oldRowCount
init|=
name|rowCount
argument_list|(
name|orientation
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|uint
argument_list|(
name|row
argument_list|)
operator|<=
name|uint
argument_list|(
name|oldRowCount
argument_list|)
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
comment|// appending rows (or columns) is easy
if|if
condition|(
name|row
operator|==
name|oldRowCount
operator|&&
name|delta
operator|>
literal|0
condition|)
block|{
name|maybeExpandGrid
argument_list|(
name|oldRowCount
operator|+
name|delta
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|orientation
argument_list|)
expr_stmt|;
return|return;
block|}
name|q_infos
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
operator|.
name|insertOrRemoveRows
argument_list|(
name|row
argument_list|,
name|delta
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|q_items
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
name|q_items
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|insertOrRemoveRows
argument_list|(
name|row
argument_list|,
name|delta
argument_list|,
name|orientation
argument_list|)
expr_stmt|;
name|q_grid
operator|.
name|resize
argument_list|(
name|internalGridRowCount
argument_list|()
operator|*
name|internalGridColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|regenerateGrid
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillRowData
name|void
name|QGridLayoutEngine
operator|::
name|fillRowData
parameter_list|(
name|QGridLayoutRowData
modifier|*
name|rowData
parameter_list|,
specifier|const
name|qreal
modifier|*
name|colPositions
parameter_list|,
specifier|const
name|qreal
modifier|*
name|colSizes
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
specifier|const
name|QAbstractLayoutStyleInfo
modifier|*
name|styleInfo
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|ButtonMask
init|=
name|QLayoutPolicy
operator|::
name|ButtonBox
operator||
name|QLayoutPolicy
operator|::
name|PushButton
decl_stmt|;
specifier|const
name|QGridLayoutRowInfo
modifier|&
name|rowInfo
init|=
name|q_infos
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
decl_stmt|;
specifier|const
name|QGridLayoutRowInfo
modifier|&
name|columnInfo
init|=
name|q_infos
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
index|]
decl_stmt|;
name|LayoutSide
name|top
init|=
operator|(
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|)
condition|?
name|Top
else|:
name|Left
decl_stmt|;
name|LayoutSide
name|bottom
init|=
operator|(
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|)
condition|?
name|Bottom
else|:
name|Right
decl_stmt|;
specifier|const
name|QLayoutParameter
argument_list|<
name|qreal
argument_list|>
modifier|&
name|defaultSpacing
init|=
name|q_defaultSpacings
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
decl_stmt|;
name|qreal
name|innerSpacing
init|=
name|styleInfo
operator|->
name|spacing
argument_list|(
name|orientation
argument_list|)
decl_stmt|;
if|if
condition|(
name|innerSpacing
operator|>=
literal|0.0
condition|)
name|defaultSpacing
operator|.
name|setCachedValue
argument_list|(
name|innerSpacing
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|rowInfo
operator|.
name|count
condition|;
operator|++
name|row
control|)
block|{
name|bool
name|rowIsEmpty
init|=
literal|true
decl_stmt|;
name|bool
name|rowIsIdenticalToPrevious
init|=
operator|(
name|row
operator|>
literal|0
operator|)
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|columnInfo
operator|.
name|count
condition|;
operator|++
name|column
control|)
block|{
name|QGridLayoutItem
modifier|*
name|item
init|=
name|itemAt
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|orientation
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowIsIdenticalToPrevious
operator|&&
name|item
operator|!=
name|itemAt
argument_list|(
name|row
operator|-
literal|1
argument_list|,
name|column
argument_list|,
name|orientation
argument_list|)
condition|)
name|rowIsIdenticalToPrevious
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|item
operator|&&
operator|!
name|item
operator|->
name|isIgnored
argument_list|()
condition|)
name|rowIsEmpty
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|rowIsEmpty
operator|||
name|rowIsIdenticalToPrevious
operator|)
operator|&&
name|rowInfo
operator|.
name|spacings
operator|.
name|value
argument_list|(
name|row
argument_list|)
operator|.
name|isDefault
argument_list|()
operator|&&
name|rowInfo
operator|.
name|stretches
operator|.
name|value
argument_list|(
name|row
argument_list|)
operator|.
name|isDefault
argument_list|()
operator|&&
name|rowInfo
operator|.
name|boxes
operator|.
name|value
argument_list|(
name|row
argument_list|)
operator|==
name|QGridLayoutBox
argument_list|()
condition|)
name|rowData
operator|->
name|ignore
operator|.
name|setBit
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|rowInfo
operator|.
name|spacings
operator|.
name|value
argument_list|(
name|row
argument_list|)
operator|.
name|isUser
argument_list|()
condition|)
block|{
name|rowData
operator|->
name|spacings
index|[
name|row
index|]
operator|=
name|rowInfo
operator|.
name|spacings
operator|.
name|at
argument_list|(
name|row
argument_list|)
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|defaultSpacing
operator|.
name|isDefault
argument_list|()
condition|)
block|{
name|rowData
operator|->
name|spacings
index|[
name|row
index|]
operator|=
name|defaultSpacing
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|rowData
operator|->
name|stretches
index|[
name|row
index|]
operator|=
name|rowInfo
operator|.
name|stretches
operator|.
name|value
argument_list|(
name|row
argument_list|)
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
struct|struct
name|RowAdHocData
block|{
name|int
name|q_row
decl_stmt|;
name|unsigned
name|int
name|q_hasButtons
range|:
literal|8
decl_stmt|;
name|unsigned
name|int
name|q_hasNonButtons
range|:
literal|8
decl_stmt|;
specifier|inline
name|RowAdHocData
parameter_list|()
member_init_list|:
name|q_row
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|q_hasButtons
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|q_hasNonButtons
argument_list|(
literal|false
argument_list|)
block|{}
specifier|inline
name|void
name|init
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|this
operator|->
name|q_row
operator|=
name|row
expr_stmt|;
name|q_hasButtons
operator|=
literal|false
expr_stmt|;
name|q_hasNonButtons
operator|=
literal|false
expr_stmt|;
block|}
specifier|inline
name|bool
name|hasOnlyButtons
parameter_list|()
specifier|const
block|{
return|return
name|q_hasButtons
operator|&&
operator|!
name|q_hasNonButtons
return|;
block|}
specifier|inline
name|bool
name|hasOnlyNonButtons
parameter_list|()
specifier|const
block|{
return|return
name|q_hasNonButtons
operator|&&
operator|!
name|q_hasButtons
return|;
block|}
block|}
struct|;
name|RowAdHocData
name|lastRowAdHocData
decl_stmt|;
name|RowAdHocData
name|nextToLastRowAdHocData
decl_stmt|;
name|RowAdHocData
name|nextToNextToLastRowAdHocData
decl_stmt|;
name|rowData
operator|->
name|hasIgnoreFlag
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|rowInfo
operator|.
name|count
condition|;
operator|++
name|row
control|)
block|{
if|if
condition|(
name|rowData
operator|->
name|ignore
operator|.
name|testBit
argument_list|(
name|row
argument_list|)
condition|)
continue|continue;
name|QGridLayoutBox
modifier|&
name|rowBox
init|=
name|rowData
operator|->
name|boxes
index|[
name|row
index|]
decl_stmt|;
if|if
condition|(
name|styleInfo
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|nextToNextToLastRowAdHocData
operator|=
name|nextToLastRowAdHocData
expr_stmt|;
name|nextToLastRowAdHocData
operator|=
name|lastRowAdHocData
expr_stmt|;
name|lastRowAdHocData
operator|.
name|init
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|bool
name|userRowStretch
init|=
name|rowInfo
operator|.
name|stretches
operator|.
name|value
argument_list|(
name|row
argument_list|)
operator|.
name|isUser
argument_list|()
decl_stmt|;
name|int
modifier|&
name|rowStretch
init|=
name|rowData
operator|->
name|stretches
index|[
name|row
index|]
decl_stmt|;
name|bool
name|hasIgnoreFlag
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|columnInfo
operator|.
name|count
condition|;
operator|++
name|column
control|)
block|{
name|QGridLayoutItem
modifier|*
name|item
init|=
name|itemAt
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|orientation
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
condition|)
block|{
name|int
name|itemRow
init|=
name|item
operator|->
name|firstRow
argument_list|(
name|orientation
argument_list|)
decl_stmt|;
name|int
name|itemColumn
init|=
name|item
operator|->
name|firstColumn
argument_list|(
name|orientation
argument_list|)
decl_stmt|;
if|if
condition|(
name|itemRow
operator|==
name|row
operator|&&
name|itemColumn
operator|==
name|column
condition|)
block|{
name|int
name|itemStretch
init|=
name|item
operator|->
name|stretchFactor
argument_list|(
name|orientation
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|item
operator|->
name|sizePolicy
argument_list|(
name|orientation
argument_list|)
operator|&
name|QLayoutPolicy
operator|::
name|IgnoreFlag
operator|)
condition|)
name|hasIgnoreFlag
operator|=
literal|false
expr_stmt|;
name|int
name|itemRowSpan
init|=
name|item
operator|->
name|rowSpan
argument_list|(
name|orientation
argument_list|)
decl_stmt|;
name|int
name|effectiveRowSpan
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|itemRowSpan
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|rowData
operator|->
name|ignore
operator|.
name|testBit
argument_list|(
name|i
operator|+
name|itemRow
argument_list|)
condition|)
operator|++
name|effectiveRowSpan
expr_stmt|;
block|}
name|QGridLayoutBox
modifier|*
name|box
decl_stmt|;
if|if
condition|(
name|effectiveRowSpan
operator|==
literal|1
condition|)
block|{
name|box
operator|=
operator|&
name|rowBox
expr_stmt|;
if|if
condition|(
operator|!
name|userRowStretch
operator|&&
name|itemStretch
operator|!=
literal|0
condition|)
name|rowStretch
operator|=
name|qMax
argument_list|(
name|rowStretch
argument_list|,
name|itemStretch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QGridLayoutMultiCellData
modifier|&
name|multiCell
init|=
name|rowData
operator|->
name|multiCellMap
index|[
name|qMakePair
argument_list|(
name|row
argument_list|,
name|itemRowSpan
argument_list|)
index|]
decl_stmt|;
name|box
operator|=
operator|&
name|multiCell
operator|.
name|q_box
expr_stmt|;
name|multiCell
operator|.
name|q_stretch
operator|=
name|itemStretch
expr_stmt|;
block|}
comment|// Items with constraints need to be passed the constraint
if|if
condition|(
name|colSizes
operator|&&
name|colPositions
operator|&&
name|item
operator|->
name|hasDynamicConstraint
argument_list|()
operator|&&
name|orientation
operator|==
name|item
operator|->
name|dynamicConstraintOrientation
argument_list|()
condition|)
block|{
comment|/* Get the width of the item by summing up the widths of the columns that it spans.                          * We need to have already calculated the widths of the columns by calling                          * q_columns->calculateGeometries() before hand and passing the value in the colSizes                          * and colPositions parameters.                          * The variable name is still colSizes even when it actually has the row sizes                          */
name|qreal
name|length
init|=
name|colSizes
index|[
name|item
operator|->
name|lastColumn
argument_list|(
name|orientation
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|item
operator|->
name|columnSpan
argument_list|(
name|orientation
argument_list|)
operator|!=
literal|1
condition|)
name|length
operator|+=
name|colPositions
index|[
name|item
operator|->
name|lastColumn
argument_list|(
name|orientation
argument_list|)
index|]
operator|-
name|colPositions
index|[
name|item
operator|->
name|firstColumn
argument_list|(
name|orientation
argument_list|)
index|]
expr_stmt|;
name|box
operator|->
name|combine
argument_list|(
name|item
operator|->
name|box
argument_list|(
name|orientation
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|box
operator|->
name|combine
argument_list|(
name|item
operator|->
name|box
argument_list|(
name|orientation
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|effectiveRowSpan
operator|==
literal|1
condition|)
block|{
name|QLayoutPolicy
operator|::
name|ControlTypes
name|controls
init|=
name|item
operator|->
name|controlTypes
argument_list|(
name|top
argument_list|)
decl_stmt|;
if|if
condition|(
name|controls
operator|&
name|ButtonMask
condition|)
name|lastRowAdHocData
operator|.
name|q_hasButtons
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|controls
operator|&
operator|~
name|ButtonMask
condition|)
name|lastRowAdHocData
operator|.
name|q_hasNonButtons
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|row
operator|<
name|rowInfo
operator|.
name|boxes
operator|.
name|count
argument_list|()
condition|)
block|{
name|QGridLayoutBox
name|rowBoxInfo
init|=
name|rowInfo
operator|.
name|boxes
operator|.
name|at
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|rowBoxInfo
operator|.
name|normalize
argument_list|()
expr_stmt|;
name|rowBox
operator|.
name|q_minimumSize
operator|=
name|qMax
argument_list|(
name|rowBox
operator|.
name|q_minimumSize
argument_list|,
name|rowBoxInfo
operator|.
name|q_minimumSize
argument_list|)
expr_stmt|;
name|rowBox
operator|.
name|q_maximumSize
operator|=
name|qMax
argument_list|(
name|rowBox
operator|.
name|q_minimumSize
argument_list|,
operator|(
name|rowBoxInfo
operator|.
name|q_maximumSize
operator|!=
name|FLT_MAX
condition|?
name|rowBoxInfo
operator|.
name|q_maximumSize
else|:
name|rowBox
operator|.
name|q_maximumSize
operator|)
argument_list|)
expr_stmt|;
name|rowBox
operator|.
name|q_preferredSize
operator|=
name|qBound
argument_list|(
name|rowBox
operator|.
name|q_minimumSize
argument_list|,
name|qMax
argument_list|(
name|rowBox
operator|.
name|q_preferredSize
argument_list|,
name|rowBoxInfo
operator|.
name|q_preferredSize
argument_list|)
argument_list|,
name|rowBox
operator|.
name|q_maximumSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasIgnoreFlag
condition|)
name|rowData
operator|->
name|hasIgnoreFlag
operator|=
literal|true
expr_stmt|;
block|}
comment|/*         Heuristic: Detect button boxes that don't use QLayoutPolicy::ButtonBox.         This is somewhat ad hoc but it usually does the trick.     */
name|bool
name|lastRowIsButtonBox
init|=
operator|(
name|lastRowAdHocData
operator|.
name|hasOnlyButtons
argument_list|()
operator|&&
name|nextToLastRowAdHocData
operator|.
name|hasOnlyNonButtons
argument_list|()
operator|)
decl_stmt|;
name|bool
name|lastTwoRowsIsButtonBox
init|=
operator|(
name|lastRowAdHocData
operator|.
name|hasOnlyButtons
argument_list|()
operator|&&
name|nextToLastRowAdHocData
operator|.
name|hasOnlyButtons
argument_list|()
operator|&&
name|nextToNextToLastRowAdHocData
operator|.
name|hasOnlyNonButtons
argument_list|()
operator|&&
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|)
decl_stmt|;
if|if
condition|(
name|defaultSpacing
operator|.
name|isDefault
argument_list|()
condition|)
block|{
name|int
name|prevRow
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|rowInfo
operator|.
name|count
condition|;
operator|++
name|row
control|)
block|{
if|if
condition|(
name|rowData
operator|->
name|ignore
operator|.
name|testBit
argument_list|(
name|row
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|prevRow
operator|!=
operator|-
literal|1
operator|&&
operator|!
name|rowInfo
operator|.
name|spacings
operator|.
name|value
argument_list|(
name|prevRow
argument_list|)
operator|.
name|isUser
argument_list|()
condition|)
block|{
name|qreal
modifier|&
name|rowSpacing
init|=
name|rowData
operator|->
name|spacings
index|[
name|prevRow
index|]
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|columnInfo
operator|.
name|count
condition|;
operator|++
name|column
control|)
block|{
name|QGridLayoutItem
modifier|*
name|item1
init|=
name|itemAt
argument_list|(
name|prevRow
argument_list|,
name|column
argument_list|,
name|orientation
argument_list|)
decl_stmt|;
name|QGridLayoutItem
modifier|*
name|item2
init|=
name|itemAt
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|orientation
argument_list|)
decl_stmt|;
if|if
condition|(
name|item1
operator|&&
name|item2
operator|&&
name|item1
operator|!=
name|item2
condition|)
block|{
name|QLayoutPolicy
operator|::
name|ControlTypes
name|controls1
init|=
name|item1
operator|->
name|controlTypes
argument_list|(
name|bottom
argument_list|)
decl_stmt|;
name|QLayoutPolicy
operator|::
name|ControlTypes
name|controls2
init|=
name|item2
operator|->
name|controlTypes
argument_list|(
name|top
argument_list|)
decl_stmt|;
if|if
condition|(
name|controls2
operator|&
name|QLayoutPolicy
operator|::
name|PushButton
condition|)
block|{
if|if
condition|(
operator|(
name|row
operator|==
name|nextToLastRowAdHocData
operator|.
name|q_row
operator|&&
name|lastTwoRowsIsButtonBox
operator|)
operator|||
operator|(
name|row
operator|==
name|lastRowAdHocData
operator|.
name|q_row
operator|&&
name|lastRowIsButtonBox
operator|)
condition|)
block|{
name|controls2
operator|&=
operator|~
name|QLayoutPolicy
operator|::
name|PushButton
expr_stmt|;
name|controls2
operator||=
name|QLayoutPolicy
operator|::
name|ButtonBox
expr_stmt|;
block|}
block|}
name|qreal
name|spacing
init|=
name|styleInfo
operator|->
name|combinedLayoutSpacing
argument_list|(
name|controls1
argument_list|,
name|controls2
argument_list|,
name|orientation
argument_list|)
decl_stmt|;
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|qreal
name|width1
init|=
name|rowData
operator|->
name|boxes
operator|.
name|at
argument_list|(
name|prevRow
argument_list|)
operator|.
name|q_minimumSize
decl_stmt|;
name|qreal
name|width2
init|=
name|rowData
operator|->
name|boxes
operator|.
name|at
argument_list|(
name|row
argument_list|)
operator|.
name|q_minimumSize
decl_stmt|;
name|QRectF
name|rect1
init|=
name|item1
operator|->
name|geometryWithin
argument_list|(
literal|0.0
argument_list|,
literal|0.0
argument_list|,
name|width1
argument_list|,
name|FLT_MAX
argument_list|,
operator|-
literal|1.0
argument_list|,
name|effectiveAlignment
argument_list|(
name|item1
argument_list|)
argument_list|)
decl_stmt|;
name|QRectF
name|rect2
init|=
name|item2
operator|->
name|geometryWithin
argument_list|(
literal|0.0
argument_list|,
literal|0.0
argument_list|,
name|width2
argument_list|,
name|FLT_MAX
argument_list|,
operator|-
literal|1.0
argument_list|,
name|effectiveAlignment
argument_list|(
name|item2
argument_list|)
argument_list|)
decl_stmt|;
name|spacing
operator|-=
operator|(
name|width1
operator|-
operator|(
name|rect1
operator|.
name|x
argument_list|()
operator|+
name|rect1
operator|.
name|width
argument_list|()
operator|)
operator|)
operator|+
name|rect2
operator|.
name|x
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QGridLayoutBox
modifier|&
name|box1
init|=
name|rowData
operator|->
name|boxes
operator|.
name|at
argument_list|(
name|prevRow
argument_list|)
decl_stmt|;
specifier|const
name|QGridLayoutBox
modifier|&
name|box2
init|=
name|rowData
operator|->
name|boxes
operator|.
name|at
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|qreal
name|height1
init|=
name|box1
operator|.
name|q_minimumSize
decl_stmt|;
name|qreal
name|height2
init|=
name|box2
operator|.
name|q_minimumSize
decl_stmt|;
name|qreal
name|rowDescent1
init|=
name|fixedDescent
argument_list|(
name|box1
operator|.
name|q_minimumDescent
argument_list|,
name|box1
operator|.
name|q_minimumAscent
argument_list|,
name|height1
argument_list|)
decl_stmt|;
name|qreal
name|rowDescent2
init|=
name|fixedDescent
argument_list|(
name|box2
operator|.
name|q_minimumDescent
argument_list|,
name|box2
operator|.
name|q_minimumAscent
argument_list|,
name|height2
argument_list|)
decl_stmt|;
name|QRectF
name|rect1
init|=
name|item1
operator|->
name|geometryWithin
argument_list|(
literal|0.0
argument_list|,
literal|0.0
argument_list|,
name|FLT_MAX
argument_list|,
name|height1
argument_list|,
name|rowDescent1
argument_list|,
name|effectiveAlignment
argument_list|(
name|item1
argument_list|)
argument_list|)
decl_stmt|;
name|QRectF
name|rect2
init|=
name|item2
operator|->
name|geometryWithin
argument_list|(
literal|0.0
argument_list|,
literal|0.0
argument_list|,
name|FLT_MAX
argument_list|,
name|height2
argument_list|,
name|rowDescent2
argument_list|,
name|effectiveAlignment
argument_list|(
name|item2
argument_list|)
argument_list|)
decl_stmt|;
name|spacing
operator|-=
operator|(
name|height1
operator|-
operator|(
name|rect1
operator|.
name|y
argument_list|()
operator|+
name|rect1
operator|.
name|height
argument_list|()
operator|)
operator|)
operator|+
name|rect2
operator|.
name|y
argument_list|()
expr_stmt|;
block|}
name|rowSpacing
operator|=
name|qMax
argument_list|(
name|spacing
argument_list|,
name|rowSpacing
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|prevRow
operator|=
name|row
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|lastRowIsButtonBox
operator|||
name|lastTwoRowsIsButtonBox
condition|)
block|{
comment|/*             Even for styles that define a uniform spacing, we cheat a             bit and use the window margin as the spacing. This             significantly improves the look of dialogs.         */
name|int
name|prevRow
init|=
name|lastRowIsButtonBox
condition|?
name|nextToLastRowAdHocData
operator|.
name|q_row
else|:
name|nextToNextToLastRowAdHocData
operator|.
name|q_row
decl_stmt|;
if|if
condition|(
operator|!
name|defaultSpacing
operator|.
name|isUser
argument_list|()
operator|&&
operator|!
name|rowInfo
operator|.
name|spacings
operator|.
name|value
argument_list|(
name|prevRow
argument_list|)
operator|.
name|isUser
argument_list|()
condition|)
block|{
name|qreal
name|windowMargin
init|=
name|styleInfo
operator|->
name|windowMargin
argument_list|(
name|orientation
argument_list|)
decl_stmt|;
name|qreal
modifier|&
name|rowSpacing
init|=
name|rowData
operator|->
name|spacings
index|[
name|prevRow
index|]
decl_stmt|;
name|rowSpacing
operator|=
name|qMax
argument_list|(
name|windowMargin
argument_list|,
name|rowSpacing
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|ensureEffectiveFirstAndLastRows
name|void
name|QGridLayoutEngine
operator|::
name|ensureEffectiveFirstAndLastRows
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|q_cachedEffectiveFirstRows
index|[
name|Hor
index|]
operator|==
operator|-
literal|1
operator|&&
operator|!
name|q_items
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|rowCount
init|=
name|this
operator|->
name|rowCount
argument_list|()
decl_stmt|;
name|int
name|columnCount
init|=
name|this
operator|->
name|columnCount
argument_list|()
decl_stmt|;
name|q_cachedEffectiveFirstRows
index|[
name|Ver
index|]
operator|=
name|rowCount
expr_stmt|;
name|q_cachedEffectiveFirstRows
index|[
name|Hor
index|]
operator|=
name|columnCount
expr_stmt|;
name|q_cachedEffectiveLastRows
index|[
name|Ver
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|q_cachedEffectiveLastRows
index|[
name|Hor
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|q_items
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
specifier|const
name|QGridLayoutItem
modifier|*
name|item
init|=
name|q_items
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NOrientations
condition|;
operator|++
name|j
control|)
block|{
name|Qt
operator|::
name|Orientation
name|orientation
init|=
operator|(
name|j
operator|==
name|Hor
operator|)
condition|?
name|Qt
operator|::
name|Horizontal
else|:
name|Qt
operator|::
name|Vertical
decl_stmt|;
if|if
condition|(
name|item
operator|->
name|firstRow
argument_list|(
name|orientation
argument_list|)
operator|<
name|q_cachedEffectiveFirstRows
index|[
name|j
index|]
condition|)
name|q_cachedEffectiveFirstRows
index|[
name|j
index|]
operator|=
name|item
operator|->
name|firstRow
argument_list|(
name|orientation
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|->
name|lastRow
argument_list|(
name|orientation
argument_list|)
operator|>
name|q_cachedEffectiveLastRows
index|[
name|j
index|]
condition|)
name|q_cachedEffectiveLastRows
index|[
name|j
index|]
operator|=
name|item
operator|->
name|lastRow
argument_list|(
name|orientation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|ensureColumnAndRowData
name|void
name|QGridLayoutEngine
operator|::
name|ensureColumnAndRowData
parameter_list|(
name|QGridLayoutRowData
modifier|*
name|rowData
parameter_list|,
name|QGridLayoutBox
modifier|*
name|totalBox
parameter_list|,
specifier|const
name|qreal
modifier|*
name|colPositions
parameter_list|,
specifier|const
name|qreal
modifier|*
name|colSizes
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
specifier|const
name|QAbstractLayoutStyleInfo
modifier|*
name|styleInfo
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|o
init|=
operator|(
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
condition|?
name|Ver
else|:
name|Hor
operator|)
decl_stmt|;
specifier|const
name|int
name|cc
init|=
name|columnCount
argument_list|(
name|orientation
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|constraint
init|=
operator|(
name|colPositions
operator|&&
name|colSizes
operator|&&
name|hasDynamicConstraint
argument_list|()
operator|)
condition|?
operator|(
name|colPositions
index|[
name|cc
operator|-
literal|1
index|]
operator|+
name|colSizes
index|[
name|cc
operator|-
literal|1
index|]
operator|)
else|:
name|qreal
argument_list|(
name|CachedWithNoConstraint
argument_list|)
decl_stmt|;
name|qreal
modifier|&
name|cachedConstraint
init|=
name|q_totalBoxCachedConstraints
index|[
name|o
index|]
decl_stmt|;
if|if
condition|(
name|cachedConstraint
operator|==
name|constraint
condition|)
block|{
if|if
condition|(
name|totalBox
operator|!=
operator|&
name|q_totalBoxes
index|[
name|o
index|]
condition|)
operator|*
name|totalBox
operator|=
name|q_totalBoxes
index|[
name|o
index|]
expr_stmt|;
return|return;
block|}
name|rowData
operator|->
name|reset
argument_list|(
name|rowCount
argument_list|(
name|orientation
argument_list|)
argument_list|)
expr_stmt|;
name|fillRowData
argument_list|(
name|rowData
argument_list|,
name|colPositions
argument_list|,
name|colSizes
argument_list|,
name|orientation
argument_list|,
name|styleInfo
argument_list|)
expr_stmt|;
specifier|const
name|QGridLayoutRowInfo
modifier|&
name|rowInfo
init|=
name|q_infos
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
decl_stmt|;
name|rowData
operator|->
name|distributeMultiCells
argument_list|(
name|rowInfo
argument_list|,
name|m_snapToPixelGrid
argument_list|)
expr_stmt|;
operator|*
name|totalBox
operator|=
name|rowData
operator|->
name|totalBox
argument_list|(
literal|0
argument_list|,
name|rowCount
argument_list|(
name|orientation
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalBox
operator|!=
operator|&
name|q_totalBoxes
index|[
name|o
index|]
condition|)
name|q_totalBoxes
index|[
name|o
index|]
operator|=
operator|*
name|totalBox
expr_stmt|;
name|cachedConstraint
operator|=
name|constraint
expr_stmt|;
block|}
end_function
begin_comment
comment|/**    returns false if the layout has contradicting constraints (i.e. some items with a horizontal    constraint and other items with a vertical constraint)  */
end_comment
begin_function
DECL|function|ensureDynamicConstraint
name|bool
name|QGridLayoutEngine
operator|::
name|ensureDynamicConstraint
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|q_cachedConstraintOrientation
operator|==
name|UnknownConstraint
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|q_items
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QGridLayoutItem
modifier|*
name|item
init|=
name|q_items
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|->
name|hasDynamicConstraint
argument_list|()
condition|)
block|{
name|Qt
operator|::
name|Orientation
name|itemConstraintOrientation
init|=
name|item
operator|->
name|dynamicConstraintOrientation
argument_list|()
decl_stmt|;
if|if
condition|(
name|q_cachedConstraintOrientation
operator|==
name|UnknownConstraint
condition|)
block|{
name|q_cachedConstraintOrientation
operator|=
name|itemConstraintOrientation
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|q_cachedConstraintOrientation
operator|!=
name|itemConstraintOrientation
condition|)
block|{
name|q_cachedConstraintOrientation
operator|=
name|UnfeasibleConstraint
expr_stmt|;
name|qWarning
argument_list|(
literal|"QGridLayoutEngine: Unfeasible, cannot mix horizontal and"
literal|" vertical constraint in the same layout"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
if|if
condition|(
name|q_cachedConstraintOrientation
operator|==
name|UnknownConstraint
condition|)
name|q_cachedConstraintOrientation
operator|=
name|NoConstraint
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|hasDynamicConstraint
name|bool
name|QGridLayoutEngine
operator|::
name|hasDynamicConstraint
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|ensureDynamicConstraint
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
name|q_cachedConstraintOrientation
operator|!=
name|NoConstraint
return|;
block|}
end_function
begin_comment
comment|/*  * return value is only valid if hasConstraint() returns \c true  */
end_comment
begin_function
DECL|function|constraintOrientation
name|Qt
operator|::
name|Orientation
name|QGridLayoutEngine
operator|::
name|constraintOrientation
parameter_list|()
specifier|const
block|{
operator|(
name|void
operator|)
name|ensureDynamicConstraint
argument_list|()
expr_stmt|;
return|return
operator|(
name|Qt
operator|::
name|Orientation
operator|)
name|q_cachedConstraintOrientation
return|;
block|}
end_function
begin_function
DECL|function|ensureGeometries
name|void
name|QGridLayoutEngine
operator|::
name|ensureGeometries
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|,
specifier|const
name|QAbstractLayoutStyleInfo
modifier|*
name|styleInfo
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|q_cachedSize
operator|==
name|size
condition|)
return|return;
name|q_cachedSize
operator|=
name|size
expr_stmt|;
name|q_xx
operator|.
name|resize
argument_list|(
name|columnCount
argument_list|()
argument_list|)
expr_stmt|;
name|q_widths
operator|.
name|resize
argument_list|(
name|columnCount
argument_list|()
argument_list|)
expr_stmt|;
name|q_yy
operator|.
name|resize
argument_list|(
name|rowCount
argument_list|()
argument_list|)
expr_stmt|;
name|q_heights
operator|.
name|resize
argument_list|(
name|rowCount
argument_list|()
argument_list|)
expr_stmt|;
name|q_descents
operator|.
name|resize
argument_list|(
name|rowCount
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|constraintOrientation
argument_list|()
operator|!=
name|Qt
operator|::
name|Horizontal
condition|)
block|{
comment|//We might have items whose height depends on their width (HFW)
name|ensureColumnAndRowData
argument_list|(
operator|&
name|q_columnData
argument_list|,
operator|&
name|q_totalBoxes
index|[
name|Hor
index|]
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|styleInfo
argument_list|)
expr_stmt|;
comment|//Calculate column widths and positions, and put results in q_xx.data() and q_widths.data() so that we can use this information as
comment|//constraints to find the row heights
name|q_columnData
operator|.
name|calculateGeometries
argument_list|(
literal|0
argument_list|,
name|columnCount
argument_list|()
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|q_xx
operator|.
name|data
argument_list|()
argument_list|,
name|q_widths
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|q_totalBoxes
index|[
name|Hor
index|]
argument_list|,
name|q_infos
index|[
name|Hor
index|]
argument_list|,
name|m_snapToPixelGrid
argument_list|)
expr_stmt|;
name|ensureColumnAndRowData
argument_list|(
operator|&
name|q_rowData
argument_list|,
operator|&
name|q_totalBoxes
index|[
name|Ver
index|]
argument_list|,
name|q_xx
operator|.
name|data
argument_list|()
argument_list|,
name|q_widths
operator|.
name|data
argument_list|()
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|styleInfo
argument_list|)
expr_stmt|;
comment|//Calculate row heights and positions, and put results in q_yy.data() and q_heights.data()
name|q_rowData
operator|.
name|calculateGeometries
argument_list|(
literal|0
argument_list|,
name|rowCount
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|q_yy
operator|.
name|data
argument_list|()
argument_list|,
name|q_heights
operator|.
name|data
argument_list|()
argument_list|,
name|q_descents
operator|.
name|data
argument_list|()
argument_list|,
name|q_totalBoxes
index|[
name|Ver
index|]
argument_list|,
name|q_infos
index|[
name|Ver
index|]
argument_list|,
name|m_snapToPixelGrid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//We have items whose width depends on their height (WFH)
name|ensureColumnAndRowData
argument_list|(
operator|&
name|q_rowData
argument_list|,
operator|&
name|q_totalBoxes
index|[
name|Ver
index|]
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|styleInfo
argument_list|)
expr_stmt|;
comment|//Calculate row heights and positions, and put results in q_yy.data() and q_heights.data() so that we can use this information as
comment|//constraints to find the column widths
name|q_rowData
operator|.
name|calculateGeometries
argument_list|(
literal|0
argument_list|,
name|rowCount
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|q_yy
operator|.
name|data
argument_list|()
argument_list|,
name|q_heights
operator|.
name|data
argument_list|()
argument_list|,
name|q_descents
operator|.
name|data
argument_list|()
argument_list|,
name|q_totalBoxes
index|[
name|Ver
index|]
argument_list|,
name|q_infos
index|[
name|Ver
index|]
argument_list|,
name|m_snapToPixelGrid
argument_list|)
expr_stmt|;
name|ensureColumnAndRowData
argument_list|(
operator|&
name|q_columnData
argument_list|,
operator|&
name|q_totalBoxes
index|[
name|Hor
index|]
argument_list|,
name|q_yy
operator|.
name|data
argument_list|()
argument_list|,
name|q_heights
operator|.
name|data
argument_list|()
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|styleInfo
argument_list|)
expr_stmt|;
comment|//Calculate row heights and positions, and put results in q_yy.data() and q_heights.data()
name|q_columnData
operator|.
name|calculateGeometries
argument_list|(
literal|0
argument_list|,
name|columnCount
argument_list|()
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|q_xx
operator|.
name|data
argument_list|()
argument_list|,
name|q_widths
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|q_totalBoxes
index|[
name|Hor
index|]
argument_list|,
name|q_infos
index|[
name|Hor
index|]
argument_list|,
name|m_snapToPixelGrid
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
