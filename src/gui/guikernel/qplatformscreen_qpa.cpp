begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformscreen_qpa.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/qapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qdesktopwidget.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qplatformintegration_qpa.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qwidget.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qwidget_p.h>
end_include
begin_comment
comment|/*!     Return the given top level widget for a given position.      Default implementation retrieves a list of all top level widgets and finds the first widget     which contains point \a pos */
end_comment
begin_function
DECL|function|topLevelAt
name|QWidget
modifier|*
name|QPlatformScreen
operator|::
name|topLevelAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|QWidgetList
name|list
init|=
name|QApplication
operator|::
name|topLevelWidgets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|list
index|[
name|i
index|]
decl_stmt|;
comment|//### mask is ignored
if|if
condition|(
name|w
operator|!=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|&&
name|w
operator|->
name|isVisible
argument_list|()
operator|&&
name|w
operator|->
name|geometry
argument_list|()
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
condition|)
return|return
name|w
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*! \fn physicalSize() const     Reimplement in subclass to return the physical size of the screen. This function is used by     QFont to convert point sizes to pixel sizes.      Default implementation takes the pixel size of the screen, considers a dpi of 100 and returns     the calculated (and probably wrong) physical size */
end_comment
begin_function
DECL|function|physicalSize
name|QSize
name|QPlatformScreen
operator|::
name|physicalSize
parameter_list|()
specifier|const
block|{
specifier|static
specifier|const
name|int
name|dpi
init|=
literal|100
decl_stmt|;
name|int
name|width
init|=
name|geometry
argument_list|()
operator|.
name|width
argument_list|()
operator|/
name|dpi
operator|*
name|qreal
argument_list|(
literal|25.4
argument_list|)
decl_stmt|;
name|int
name|height
init|=
name|geometry
argument_list|()
operator|.
name|height
argument_list|()
operator|/
name|dpi
operator|*
name|qreal
argument_list|(
literal|25.4
argument_list|)
decl_stmt|;
return|return
name|QSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
return|;
block|}
end_function
begin_function_decl
name|Q_GUI_EXPORT
specifier|extern
name|QWidgetPrivate
modifier|*
name|qt_widget_private
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|platformScreenForWidget
name|QPlatformScreen
modifier|*
name|QPlatformScreen
operator|::
name|platformScreenForWidget
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|int
name|screenIndex
init|=
literal|0
decl_stmt|;
name|QWidget
modifier|*
name|window
init|=
name|widget
operator|->
name|window
argument_list|()
decl_stmt|;
name|QWidgetPrivate
modifier|*
name|windowPrivate
init|=
name|qt_widget_private
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|QTLWExtra
modifier|*
name|topData
init|=
name|windowPrivate
operator|->
name|maybeTopData
argument_list|()
decl_stmt|;
if|if
condition|(
name|topData
condition|)
name|screenIndex
operator|=
name|topData
operator|->
name|screenIndex
expr_stmt|;
name|QPlatformIntegration
modifier|*
name|integration
init|=
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
decl_stmt|;
return|return
name|integration
operator|->
name|screens
argument_list|()
index|[
name|screenIndex
index|]
return|;
block|}
end_function
begin_function
DECL|function|platformScreenForWindow
name|QPlatformScreen
modifier|*
name|QPlatformScreen
operator|::
name|platformScreenForWindow
parameter_list|(
specifier|const
name|QWindow
modifier|*
parameter_list|)
block|{
return|return
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|screens
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \class QPlatformScreen     \since 4.8     \internal     \preliminary     \ingroup qpa      \brief The QPlatformScreen class provides an abstraction for visual displays.      Many window systems has support for retrieving information on the attached displays. To be able     to query the display QPA uses QPlatformScreen. Qt its self is most dependent on the     physicalSize() function, since this is the function it uses to calculate the dpi to use when     converting point sizes to pixels sizes. However, this is unfortunate on some systems, as the     native system fakes its dpi size.      QPlatformScreen is also used by the public api QDesktopWidget for information about the desktop.  */
end_comment
begin_comment
comment|/*! \fn geometry() const     Reimplement in subclass to return the pixel geometry of the screen */
end_comment
begin_comment
comment|/*! \fn availableGeometry() const     Reimplement in subclass to return the pixel geometry of the available space     This normally is the desktop screen minus the task manager, global menubar etc. */
end_comment
begin_comment
comment|/*! \fn depth() const     Reimplement in subclass to return current depth of the screen */
end_comment
begin_comment
comment|/*! \fn format() const     Reimplement in subclass to return the image format which corresponds to the screen format */
end_comment
end_unit
