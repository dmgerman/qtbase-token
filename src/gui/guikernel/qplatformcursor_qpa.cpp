begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenVG module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformcursor_qpa.h"
end_include
begin_include
include|#
directive|include
file|<QWidget>
end_include
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_include
include|#
directive|include
file|<QBitmap>
end_include
begin_include
include|#
directive|include
file|<QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|member|instances
name|QList
argument_list|<
name|QWeakPointer
argument_list|<
name|QPlatformCursor
argument_list|>
argument_list|>
name|QPlatformCursorPrivate
operator|::
name|instances
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*!     \class QGraphicsSystemCursor      \brief The QGraphicsSystemCursor class provides information about     pointer device events (movement, buttons), and requests to change     the currently displayed cursor.      Note that QGraphicsSystemCursor does not include any graphics for     display. An application that sets a QCursor may provide its own     graphics.      \sa QGraphicsSystemCursorImage */
end_comment
begin_comment
comment|/*!     \fn virtual void QGraphicsSystemCursor::pointerEvent(const QMouseEvent& event)      This method is called by Qt whenever a QMouseEvent is generated by the     underlying pointer input. \a event is a reference to the QMouseEvent in     question. A default do-nothing implementation is provided.      \sa QApplicationPrivate::handleMouseEvent() */
end_comment
begin_comment
comment|/*!     \fn virtual void QGraphicsSystemCursor::changeCursor(QCursor * widgetCursor, QWidget * widget)      \brief This method is called by Qt whenever the cursor graphic should be changed.      Implementation of this method is mandatory for a subclass of QGraphicsSystemCursor.      \a widgetCursor is a pointer to the QCursor that should be displayed.      \a widget is a pointer to the widget currently displayed at QCursor::pos(). Note     that this may be 0 if the current position is not occupied by a displayed widget.      \sa QApplicationPrivate::handleMouseEvent(), QCursor::pos() */
end_comment
begin_comment
comment|/*!     \fn QGraphicsSystemCursor::QGraphicsSystemCursor()      \brief Constructs a QGraphicsSystemCursor */
end_comment
begin_constructor
DECL|function|QPlatformCursor
name|QPlatformCursor
operator|::
name|QPlatformCursor
parameter_list|(
name|QPlatformScreen
modifier|*
name|scr
parameter_list|)
member_init_list|:
name|screen
argument_list|(
name|scr
argument_list|)
block|{
name|QPlatformCursorPrivate
operator|::
name|instances
operator|.
name|append
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|// End of display and pointer event handling code
end_comment
begin_comment
comment|// Beginning of built-in cursor graphics
end_comment
begin_comment
comment|// from src/gui/embedded/QGraphicsSystemCursorImage_qws.cpp
end_comment
begin_comment
comment|/*!     \class QGraphicsSystemCursorImage      \brief The QGraphicsSystemCursorImage class provides a set of graphics     intended to be used as cursors.      \sa QGraphicsSystemCursor */
end_comment
begin_decl_stmt
DECL|variable|systemCursorTable
specifier|static
name|QPlatformCursorImage
modifier|*
name|systemCursorTable
index|[
name|Qt
operator|::
name|LastCursor
operator|+
literal|1
index|]
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|systemCursorTableInit
specifier|static
name|bool
name|systemCursorTableInit
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_comment
comment|// 16 x 16
end_comment
begin_decl_stmt
DECL|variable|cur_arrow_bits
specifier|static
specifier|const
name|uchar
name|cur_arrow_bits
index|[]
init|=
block|{
literal|0x07
block|,
literal|0x00
block|,
literal|0x39
block|,
literal|0x00
block|,
literal|0xc1
block|,
literal|0x01
block|,
literal|0x02
block|,
literal|0x0e
block|,
literal|0x02
block|,
literal|0x10
block|,
literal|0x02
block|,
literal|0x08
block|,
literal|0x04
block|,
literal|0x04
block|,
literal|0x04
block|,
literal|0x02
block|,
literal|0x04
block|,
literal|0x04
block|,
literal|0x88
block|,
literal|0x08
block|,
literal|0x48
block|,
literal|0x11
block|,
literal|0x28
block|,
literal|0x22
block|,
literal|0x10
block|,
literal|0x44
block|,
literal|0x00
block|,
literal|0x28
block|,
literal|0x00
block|,
literal|0x10
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mcur_arrow_bits
specifier|static
specifier|const
name|uchar
name|mcur_arrow_bits
index|[]
init|=
block|{
literal|0x07
block|,
literal|0x00
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0x01
block|,
literal|0xfe
block|,
literal|0x0f
block|,
literal|0xfe
block|,
literal|0x1f
block|,
literal|0xfe
block|,
literal|0x0f
block|,
literal|0xfc
block|,
literal|0x07
block|,
literal|0xfc
block|,
literal|0x03
block|,
literal|0xfc
block|,
literal|0x07
block|,
literal|0xf8
block|,
literal|0x0f
block|,
literal|0x78
block|,
literal|0x1f
block|,
literal|0x38
block|,
literal|0x3e
block|,
literal|0x10
block|,
literal|0x7c
block|,
literal|0x00
block|,
literal|0x38
block|,
literal|0x00
block|,
literal|0x10
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cur_up_arrow_bits
specifier|static
specifier|const
name|unsigned
name|char
name|cur_up_arrow_bits
index|[]
init|=
block|{
literal|0x80
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x01
block|,
literal|0x40
block|,
literal|0x01
block|,
literal|0x20
block|,
literal|0x02
block|,
literal|0x20
block|,
literal|0x02
block|,
literal|0x10
block|,
literal|0x04
block|,
literal|0x10
block|,
literal|0x04
block|,
literal|0x08
block|,
literal|0x08
block|,
literal|0x78
block|,
literal|0x0f
block|,
literal|0x40
block|,
literal|0x01
block|,
literal|0x40
block|,
literal|0x01
block|,
literal|0x40
block|,
literal|0x01
block|,
literal|0x40
block|,
literal|0x01
block|,
literal|0x40
block|,
literal|0x01
block|,
literal|0x40
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mcur_up_arrow_bits
specifier|static
specifier|const
name|unsigned
name|char
name|mcur_up_arrow_bits
index|[]
init|=
block|{
literal|0x80
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0xf8
block|,
literal|0x0f
block|,
literal|0xf8
block|,
literal|0x0f
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cur_cross_bits
specifier|static
specifier|const
name|unsigned
name|char
name|cur_cross_bits
index|[]
init|=
block|{
literal|0xc0
block|,
literal|0x01
block|,
literal|0x40
block|,
literal|0x01
block|,
literal|0x40
block|,
literal|0x01
block|,
literal|0x40
block|,
literal|0x01
block|,
literal|0x40
block|,
literal|0x01
block|,
literal|0x40
block|,
literal|0x01
block|,
literal|0x7f
block|,
literal|0x7f
block|,
literal|0x01
block|,
literal|0x40
block|,
literal|0x7f
block|,
literal|0x7f
block|,
literal|0x40
block|,
literal|0x01
block|,
literal|0x40
block|,
literal|0x01
block|,
literal|0x40
block|,
literal|0x01
block|,
literal|0x40
block|,
literal|0x01
block|,
literal|0x40
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mcur_cross_bits
specifier|static
specifier|const
name|unsigned
name|char
name|mcur_cross_bits
index|[]
init|=
block|{
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xff
block|,
literal|0x7f
block|,
literal|0xff
block|,
literal|0x7f
block|,
literal|0xff
block|,
literal|0x7f
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cur_ibeam_bits
specifier|static
specifier|const
name|uchar
name|cur_ibeam_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mcur_ibeam_bits
specifier|static
specifier|const
name|uchar
name|mcur_ibeam_bits
index|[]
init|=
block|{
literal|0xf0
block|,
literal|0x07
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cur_ver_bits
specifier|static
specifier|const
name|uchar
name|cur_ver_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x03
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0xf0
block|,
literal|0x0f
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0xf0
block|,
literal|0x0f
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0xc0
block|,
literal|0x03
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mcur_ver_bits
specifier|static
specifier|const
name|uchar
name|mcur_ver_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x03
block|,
literal|0xc0
block|,
literal|0x07
block|,
literal|0xe0
block|,
literal|0x0f
block|,
literal|0xf0
block|,
literal|0x1f
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xc0
block|,
literal|0x07
block|,
literal|0xc0
block|,
literal|0x07
block|,
literal|0xc0
block|,
literal|0x07
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0xf0
block|,
literal|0x1f
block|,
literal|0xe0
block|,
literal|0x0f
block|,
literal|0xc0
block|,
literal|0x07
block|,
literal|0x80
block|,
literal|0x03
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cur_hor_bits
specifier|static
specifier|const
name|uchar
name|cur_hor_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x20
block|,
literal|0x08
block|,
literal|0x30
block|,
literal|0x18
block|,
literal|0x38
block|,
literal|0x38
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0x38
block|,
literal|0x38
block|,
literal|0x30
block|,
literal|0x18
block|,
literal|0x20
block|,
literal|0x08
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mcur_hor_bits
specifier|static
specifier|const
name|uchar
name|mcur_hor_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x60
block|,
literal|0x0c
block|,
literal|0x70
block|,
literal|0x1c
block|,
literal|0x78
block|,
literal|0x3c
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xfe
block|,
literal|0xff
block|,
literal|0xfe
block|,
literal|0xff
block|,
literal|0xfe
block|,
literal|0xff
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0x78
block|,
literal|0x3c
block|,
literal|0x70
block|,
literal|0x1c
block|,
literal|0x60
block|,
literal|0x0c
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cur_bdiag_bits
specifier|static
specifier|const
name|uchar
name|cur_bdiag_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0x3e
block|,
literal|0x00
block|,
literal|0x3c
block|,
literal|0x00
block|,
literal|0x3e
block|,
literal|0x00
block|,
literal|0x37
block|,
literal|0x88
block|,
literal|0x23
block|,
literal|0xd8
block|,
literal|0x01
block|,
literal|0xf8
block|,
literal|0x00
block|,
literal|0x78
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mcur_bdiag_bits
specifier|static
specifier|const
name|uchar
name|mcur_bdiag_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x7f
block|,
literal|0x80
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x7e
block|,
literal|0x04
block|,
literal|0x7f
block|,
literal|0x8c
block|,
literal|0x7f
block|,
literal|0xdc
block|,
literal|0x77
block|,
literal|0xfc
block|,
literal|0x63
block|,
literal|0xfc
block|,
literal|0x41
block|,
literal|0xfc
block|,
literal|0x00
block|,
literal|0xfc
block|,
literal|0x01
block|,
literal|0xfc
block|,
literal|0x03
block|,
literal|0xfc
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cur_fdiag_bits
specifier|static
specifier|const
name|uchar
name|cur_fdiag_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x01
block|,
literal|0xf8
block|,
literal|0x00
block|,
literal|0x78
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x00
block|,
literal|0xd8
block|,
literal|0x01
block|,
literal|0x88
block|,
literal|0x23
block|,
literal|0x00
block|,
literal|0x37
block|,
literal|0x00
block|,
literal|0x3e
block|,
literal|0x00
block|,
literal|0x3c
block|,
literal|0x00
block|,
literal|0x3e
block|,
literal|0x00
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mcur_fdiag_bits
specifier|static
specifier|const
name|uchar
name|mcur_fdiag_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xfc
block|,
literal|0x07
block|,
literal|0xfc
block|,
literal|0x03
block|,
literal|0xfc
block|,
literal|0x01
block|,
literal|0xfc
block|,
literal|0x00
block|,
literal|0xfc
block|,
literal|0x41
block|,
literal|0xfc
block|,
literal|0x63
block|,
literal|0xdc
block|,
literal|0x77
block|,
literal|0x8c
block|,
literal|0x7f
block|,
literal|0x04
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x7e
block|,
literal|0x00
block|,
literal|0x7f
block|,
literal|0x80
block|,
literal|0x7f
block|,
literal|0xc0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|// 20 x 20
end_comment
begin_decl_stmt
DECL|variable|forbidden_bits
specifier|static
specifier|const
name|uchar
name|forbidden_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0xf0
block|,
literal|0xf0
block|,
literal|0x00
block|,
literal|0x38
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x7c
block|,
literal|0x80
block|,
literal|0x03
block|,
literal|0xec
block|,
literal|0x00
block|,
literal|0x03
block|,
literal|0xce
block|,
literal|0x01
block|,
literal|0x07
block|,
literal|0x86
block|,
literal|0x03
block|,
literal|0x06
block|,
literal|0x06
block|,
literal|0x07
block|,
literal|0x06
block|,
literal|0x06
block|,
literal|0x0e
block|,
literal|0x06
block|,
literal|0x06
block|,
literal|0x1c
block|,
literal|0x06
block|,
literal|0x0e
block|,
literal|0x38
block|,
literal|0x07
block|,
literal|0x0c
block|,
literal|0x70
block|,
literal|0x03
block|,
literal|0x1c
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x38
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xf0
block|,
literal|0xe0
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|forbiddenm_bits
specifier|static
specifier|const
name|uchar
name|forbiddenm_bits
index|[]
init|=
block|{
literal|0x80
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0xf0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0xff
block|,
literal|0x01
block|,
literal|0xfc
block|,
literal|0xf0
block|,
literal|0x03
block|,
literal|0xfe
block|,
literal|0xc0
block|,
literal|0x07
block|,
literal|0xfe
block|,
literal|0x81
block|,
literal|0x07
block|,
literal|0xff
block|,
literal|0x83
block|,
literal|0x0f
block|,
literal|0xcf
block|,
literal|0x07
block|,
literal|0x0f
block|,
literal|0x8f
block|,
literal|0x0f
block|,
literal|0x0f
block|,
literal|0x0f
block|,
literal|0x1f
block|,
literal|0x0f
block|,
literal|0x0f
block|,
literal|0x3e
block|,
literal|0x0f
block|,
literal|0x1f
block|,
literal|0xfc
block|,
literal|0x0f
block|,
literal|0x1e
block|,
literal|0xf8
block|,
literal|0x07
block|,
literal|0x3e
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0xfc
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0xf8
block|,
literal|0xff
block|,
literal|0x01
block|,
literal|0xf0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x1f
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|// 32 x 32
end_comment
begin_decl_stmt
DECL|variable|wait_data_bits
specifier|static
specifier|const
name|uchar
name|wait_data_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x04
block|,
literal|0x40
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x08
block|,
literal|0x20
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x08
block|,
literal|0x20
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x08
block|,
literal|0x20
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x08
block|,
literal|0x20
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x50
block|,
literal|0x15
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xa0
block|,
literal|0x0a
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x05
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x20
block|,
literal|0x08
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x10
block|,
literal|0x10
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x08
block|,
literal|0x21
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x88
block|,
literal|0x22
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x48
block|,
literal|0x25
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xa8
block|,
literal|0x2a
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x04
block|,
literal|0x40
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|wait_mask_bits
specifier|static
specifier|const
name|uchar
name|wait_mask_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf0
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf0
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|hsplit_bits
specifier|static
specifier|const
name|uchar
name|hsplit_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x41
block|,
literal|0x82
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x41
block|,
literal|0x82
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x7f
block|,
literal|0xfe
block|,
literal|0x03
block|,
literal|0x80
block|,
literal|0x41
block|,
literal|0x82
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x41
block|,
literal|0x82
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|hsplitm_bits
specifier|static
specifier|const
name|uchar
name|hsplitm_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe2
block|,
literal|0x47
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe3
block|,
literal|0xc7
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xe3
block|,
literal|0xc7
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x03
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x07
block|,
literal|0xc0
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x03
block|,
literal|0x80
block|,
literal|0xe3
block|,
literal|0xc7
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0xe3
block|,
literal|0xc7
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe2
block|,
literal|0x47
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|vsplit_bits
specifier|static
specifier|const
name|uchar
name|vsplit_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|vsplitm_bits
specifier|static
specifier|const
name|uchar
name|vsplitm_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|phand_bits
specifier|static
specifier|const
name|uchar
name|phand_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xfe
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x01
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x7e
block|,
literal|0x04
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x08
block|,
literal|0x08
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x70
block|,
literal|0x08
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x08
block|,
literal|0x08
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x70
block|,
literal|0x14
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x08
block|,
literal|0x22
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x30
block|,
literal|0x41
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x20
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x12
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x08
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x05
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|phandm_bits
specifier|static
specifier|const
name|uchar
name|phandm_bits
index|[]
init|=
block|{
literal|0xfe
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xfe
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xfc
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|size_all_data_bits
specifier|static
specifier|const
name|uchar
name|size_all_data_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x81
block|,
literal|0x40
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x81
block|,
literal|0xc0
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x01
block|,
literal|0x80
block|,
literal|0x81
block|,
literal|0xc0
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x81
block|,
literal|0x40
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|size_all_mask_bits
specifier|static
specifier|const
name|uchar
name|size_all_mask_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc2
block|,
literal|0x21
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc3
block|,
literal|0x61
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xc3
block|,
literal|0xe1
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x01
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x03
block|,
literal|0xc0
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x01
block|,
literal|0x80
block|,
literal|0xc3
block|,
literal|0xe1
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc3
block|,
literal|0x61
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc2
block|,
literal|0x21
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|whatsthis_bits
specifier|static
specifier|const
name|uchar
name|whatsthis_bits
index|[]
init|=
block|{
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x05
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x09
block|,
literal|0x18
block|,
literal|0x0e
block|,
literal|0x00
block|,
literal|0x11
block|,
literal|0x1c
block|,
literal|0x0e
block|,
literal|0x00
block|,
literal|0x21
block|,
literal|0x1c
block|,
literal|0x0e
block|,
literal|0x00
block|,
literal|0x41
block|,
literal|0x1c
block|,
literal|0x0e
block|,
literal|0x00
block|,
literal|0x81
block|,
literal|0x1c
block|,
literal|0x0e
block|,
literal|0x00
block|,
literal|0x01
block|,
literal|0x01
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x01
block|,
literal|0x82
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0xc1
block|,
literal|0xc7
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x49
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x95
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x93
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x21
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x20
block|,
literal|0xc1
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0xc2
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|, }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|whatsthism_bits
specifier|static
specifier|const
name|uchar
name|whatsthism_bits
index|[]
init|=
block|{
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x03
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x07
block|,
literal|0xf8
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x0f
block|,
literal|0xfc
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x1f
block|,
literal|0x3e
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x3f
block|,
literal|0x3e
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x7f
block|,
literal|0x3e
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0x3e
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0x9d
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0xc3
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0xe7
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x7f
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0xf7
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0xf3
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0xe1
block|,
literal|0xe1
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0xe1
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0xe3
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0xe3
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|, }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|busy_bits
specifier|static
specifier|const
name|uchar
name|busy_bits
index|[]
init|=
block|{
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x05
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x09
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x11
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x21
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x41
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x81
block|,
literal|0x20
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x01
block|,
literal|0xe1
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x01
block|,
literal|0x42
block|,
literal|0x40
block|,
literal|0x00
block|,
literal|0xc1
block|,
literal|0x47
block|,
literal|0x40
block|,
literal|0x00
block|,
literal|0x49
block|,
literal|0x40
block|,
literal|0x55
block|,
literal|0x00
block|,
literal|0x95
block|,
literal|0x80
block|,
literal|0x2a
block|,
literal|0x00
block|,
literal|0x93
block|,
literal|0x00
block|,
literal|0x15
block|,
literal|0x00
block|,
literal|0x21
block|,
literal|0x01
block|,
literal|0x0a
block|,
literal|0x00
block|,
literal|0x20
block|,
literal|0x01
block|,
literal|0x11
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x82
block|,
literal|0x20
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x42
block|,
literal|0x44
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x41
block|,
literal|0x4a
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x55
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x20
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|busym_bits
specifier|static
specifier|const
name|uchar
name|busym_bits
index|[]
init|=
block|{
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x7f
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0xe1
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0xc3
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0xc7
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x7f
block|,
literal|0xc0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0xf7
block|,
literal|0x80
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0xf3
block|,
literal|0x00
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0xe1
block|,
literal|0x01
block|,
literal|0x0e
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x01
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x83
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0xc3
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xc1
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|// 16 x 16
end_comment
begin_decl_stmt
DECL|variable|openhand_bits
specifier|static
specifier|const
name|uchar
name|openhand_bits
index|[]
init|=
block|{
literal|0x80
block|,
literal|0x01
block|,
literal|0x58
block|,
literal|0x0e
block|,
literal|0x64
block|,
literal|0x12
block|,
literal|0x64
block|,
literal|0x52
block|,
literal|0x48
block|,
literal|0xb2
block|,
literal|0x48
block|,
literal|0x92
block|,
literal|0x16
block|,
literal|0x90
block|,
literal|0x19
block|,
literal|0x80
block|,
literal|0x11
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x20
block|,
literal|0x08
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x10
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|openhandm_bits
specifier|static
specifier|const
name|uchar
name|openhandm_bits
index|[]
init|=
block|{
literal|0x80
block|,
literal|0x01
block|,
literal|0xd8
block|,
literal|0x0f
block|,
literal|0xfc
block|,
literal|0x1f
block|,
literal|0xfc
block|,
literal|0x5f
block|,
literal|0xf8
block|,
literal|0xff
block|,
literal|0xf8
block|,
literal|0xff
block|,
literal|0xfe
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x7f
block|,
literal|0xfe
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x3f
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0xf0
block|,
literal|0x1f
block|,
literal|0xe0
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|closedhand_bits
specifier|static
specifier|const
name|uchar
name|closedhand_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xb0
block|,
literal|0x0d
block|,
literal|0x48
block|,
literal|0x32
block|,
literal|0x08
block|,
literal|0x50
block|,
literal|0x10
block|,
literal|0x40
block|,
literal|0x18
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x20
block|,
literal|0x08
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x10
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|closedhandm_bits
specifier|static
specifier|const
name|uchar
name|closedhandm_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xb0
block|,
literal|0x0d
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0xf8
block|,
literal|0x7f
block|,
literal|0xf0
block|,
literal|0x7f
block|,
literal|0xf8
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x3f
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0xf0
block|,
literal|0x1f
block|,
literal|0xe0
block|,
literal|0x1f
block|,
literal|0xe0
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|createSystemCursor
name|void
name|QPlatformCursorImage
operator|::
name|createSystemCursor
parameter_list|(
name|int
name|id
parameter_list|)
block|{
if|if
condition|(
operator|!
name|systemCursorTableInit
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|Qt
operator|::
name|LastCursor
condition|;
name|i
operator|++
control|)
name|systemCursorTable
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|systemCursorTableInit
operator|=
literal|true
expr_stmt|;
block|}
switch|switch
condition|(
name|id
condition|)
block|{
comment|// 16x16 cursors
case|case
name|Qt
operator|::
name|ArrowCursor
case|:
name|systemCursorTable
index|[
name|Qt
operator|::
name|ArrowCursor
index|]
operator|=
operator|new
name|QPlatformCursorImage
argument_list|(
name|cur_arrow_bits
argument_list|,
name|mcur_arrow_bits
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UpArrowCursor
case|:
name|systemCursorTable
index|[
name|Qt
operator|::
name|UpArrowCursor
index|]
operator|=
operator|new
name|QPlatformCursorImage
argument_list|(
name|cur_up_arrow_bits
argument_list|,
name|mcur_up_arrow_bits
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|CrossCursor
case|:
name|systemCursorTable
index|[
name|Qt
operator|::
name|CrossCursor
index|]
operator|=
operator|new
name|QPlatformCursorImage
argument_list|(
name|cur_cross_bits
argument_list|,
name|mcur_cross_bits
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|7
argument_list|,
literal|7
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|IBeamCursor
case|:
name|systemCursorTable
index|[
name|Qt
operator|::
name|IBeamCursor
index|]
operator|=
operator|new
name|QPlatformCursorImage
argument_list|(
name|cur_ibeam_bits
argument_list|,
name|mcur_ibeam_bits
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|7
argument_list|,
literal|7
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeVerCursor
case|:
name|systemCursorTable
index|[
name|Qt
operator|::
name|SizeVerCursor
index|]
operator|=
operator|new
name|QPlatformCursorImage
argument_list|(
name|cur_ver_bits
argument_list|,
name|mcur_ver_bits
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|7
argument_list|,
literal|7
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeHorCursor
case|:
name|systemCursorTable
index|[
name|Qt
operator|::
name|SizeHorCursor
index|]
operator|=
operator|new
name|QPlatformCursorImage
argument_list|(
name|cur_hor_bits
argument_list|,
name|mcur_hor_bits
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|7
argument_list|,
literal|7
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeBDiagCursor
case|:
name|systemCursorTable
index|[
name|Qt
operator|::
name|SizeBDiagCursor
index|]
operator|=
operator|new
name|QPlatformCursorImage
argument_list|(
name|cur_bdiag_bits
argument_list|,
name|mcur_bdiag_bits
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|7
argument_list|,
literal|7
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeFDiagCursor
case|:
name|systemCursorTable
index|[
name|Qt
operator|::
name|SizeFDiagCursor
index|]
operator|=
operator|new
name|QPlatformCursorImage
argument_list|(
name|cur_fdiag_bits
argument_list|,
name|mcur_fdiag_bits
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|7
argument_list|,
literal|7
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|BlankCursor
case|:
name|systemCursorTable
index|[
name|Qt
operator|::
name|BlankCursor
index|]
operator|=
operator|new
name|QPlatformCursorImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
comment|// 20x20 cursors
case|case
name|Qt
operator|::
name|ForbiddenCursor
case|:
name|systemCursorTable
index|[
name|Qt
operator|::
name|ForbiddenCursor
index|]
operator|=
operator|new
name|QPlatformCursorImage
argument_list|(
name|forbidden_bits
argument_list|,
name|forbiddenm_bits
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
break|break;
comment|// 32x32 cursors
case|case
name|Qt
operator|::
name|WaitCursor
case|:
name|systemCursorTable
index|[
name|Qt
operator|::
name|WaitCursor
index|]
operator|=
operator|new
name|QPlatformCursorImage
argument_list|(
name|wait_data_bits
argument_list|,
name|wait_mask_bits
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SplitVCursor
case|:
name|systemCursorTable
index|[
name|Qt
operator|::
name|SplitVCursor
index|]
operator|=
operator|new
name|QPlatformCursorImage
argument_list|(
name|vsplit_bits
argument_list|,
name|vsplitm_bits
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SplitHCursor
case|:
name|systemCursorTable
index|[
name|Qt
operator|::
name|SplitHCursor
index|]
operator|=
operator|new
name|QPlatformCursorImage
argument_list|(
name|hsplit_bits
argument_list|,
name|hsplitm_bits
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeAllCursor
case|:
name|systemCursorTable
index|[
name|Qt
operator|::
name|SizeAllCursor
index|]
operator|=
operator|new
name|QPlatformCursorImage
argument_list|(
name|size_all_data_bits
argument_list|,
name|size_all_mask_bits
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|PointingHandCursor
case|:
name|systemCursorTable
index|[
name|Qt
operator|::
name|PointingHandCursor
index|]
operator|=
operator|new
name|QPlatformCursorImage
argument_list|(
name|phand_bits
argument_list|,
name|phandm_bits
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WhatsThisCursor
case|:
name|systemCursorTable
index|[
name|Qt
operator|::
name|WhatsThisCursor
index|]
operator|=
operator|new
name|QPlatformCursorImage
argument_list|(
name|whatsthis_bits
argument_list|,
name|whatsthism_bits
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|BusyCursor
case|:
name|systemCursorTable
index|[
name|Qt
operator|::
name|BusyCursor
index|]
operator|=
operator|new
name|QPlatformCursorImage
argument_list|(
name|busy_bits
argument_list|,
name|busym_bits
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|OpenHandCursor
case|:
name|systemCursorTable
index|[
name|Qt
operator|::
name|OpenHandCursor
index|]
operator|=
operator|new
name|QPlatformCursorImage
argument_list|(
name|openhand_bits
argument_list|,
name|openhandm_bits
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|ClosedHandCursor
case|:
name|systemCursorTable
index|[
name|Qt
operator|::
name|ClosedHandCursor
index|]
operator|=
operator|new
name|QPlatformCursorImage
argument_list|(
name|closedhand_bits
argument_list|,
name|closedhandm_bits
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"Unknown system cursor %d"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \fn void QGraphicsSystemCursorImage::set(Qt::CursorShape id)      \brief Calling this method sets the cursor image to the specified shape      \a id is one of the defined Qt::CursorShape values.      If id is invalid, Qt::BitmapCursor, or unknown by the implementation,     Qt::ArrowCursor is used instead. */
end_comment
begin_function
DECL|function|set
name|void
name|QPlatformCursorImage
operator|::
name|set
parameter_list|(
name|Qt
operator|::
name|CursorShape
name|id
parameter_list|)
block|{
name|QPlatformCursorImage
modifier|*
name|cursor
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|id
operator|>=
literal|0
operator|&&
name|id
operator|<=
name|Qt
operator|::
name|LastCursor
condition|)
block|{
if|if
condition|(
operator|!
name|systemCursorTable
index|[
name|id
index|]
condition|)
name|createSystemCursor
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|systemCursorTable
index|[
name|id
index|]
expr_stmt|;
block|}
if|if
condition|(
name|cursor
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|systemCursorTable
index|[
name|Qt
operator|::
name|ArrowCursor
index|]
condition|)
name|createSystemCursor
argument_list|(
name|Qt
operator|::
name|ArrowCursor
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|systemCursorTable
index|[
name|Qt
operator|::
name|ArrowCursor
index|]
expr_stmt|;
block|}
name|cursorImage
operator|=
name|cursor
operator|->
name|cursorImage
expr_stmt|;
name|hot
operator|=
name|cursor
operator|->
name|hot
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QGraphicsSystemCursorImage::set(const QImage * image, int hx, int hy)      \brief Set the cursor image to the specified QImage, with the hotsport at (hx, hy)      \a image A pointer to a QImage      \a hx The x coordinate of the cursor's hotspot      \a hy the y coordinate of the cursor's hotspot */
end_comment
begin_function
DECL|function|set
name|void
name|QPlatformCursorImage
operator|::
name|set
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|int
name|hx
parameter_list|,
name|int
name|hy
parameter_list|)
block|{
name|hot
operator|.
name|setX
argument_list|(
name|hx
argument_list|)
expr_stmt|;
name|hot
operator|.
name|setY
argument_list|(
name|hy
argument_list|)
expr_stmt|;
name|cursorImage
operator|=
name|image
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QGraphicsSystemCursorImage::set(const uchar *data, const uchar *mask, int width, int height, int hx, int hy)      \brief set the cursor image to the graphic represented by the combination of data, mask,     width, and height      \a data The pixel data of the graphic      \a mask Mask data for the graphic. pixels in data with a corresponding mask bit of 0 are not drawn      \a width The width of the graphic in pixels      \a height The height of the graphic in pixels      \a hx The X hotspot of the cursor graphic      \a hy The Y hotspot of the cursor graphic */
end_comment
begin_function
DECL|function|set
name|void
name|QPlatformCursorImage
operator|::
name|set
parameter_list|(
specifier|const
name|uchar
modifier|*
name|data
parameter_list|,
specifier|const
name|uchar
modifier|*
name|mask
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|hx
parameter_list|,
name|int
name|hy
parameter_list|)
block|{
name|hot
operator|.
name|setX
argument_list|(
name|hx
argument_list|)
expr_stmt|;
name|hot
operator|.
name|setY
argument_list|(
name|hy
argument_list|)
expr_stmt|;
name|cursorImage
operator|=
name|QImage
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|width
operator|||
operator|!
name|height
operator|||
operator|!
name|data
operator|||
operator|!
name|mask
operator|||
name|cursorImage
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|cursorImage
operator|.
name|setNumColors
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|cursorImage
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
literal|0xff000000
argument_list|)
expr_stmt|;
name|cursorImage
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
literal|0xffffffff
argument_list|)
expr_stmt|;
name|cursorImage
operator|.
name|setColor
argument_list|(
literal|2
argument_list|,
literal|0x00000000
argument_list|)
expr_stmt|;
name|int
name|bytesPerLine
init|=
operator|(
name|width
operator|+
literal|7
operator|)
operator|/
literal|8
decl_stmt|;
name|int
name|p
init|=
literal|0
decl_stmt|;
name|int
name|d
decl_stmt|,
name|m
decl_stmt|;
name|int
name|x
init|=
operator|-
literal|1
decl_stmt|,
name|w
init|=
literal|0
decl_stmt|;
name|uchar
modifier|*
name|cursor_data
init|=
name|cursorImage
operator|.
name|bits
argument_list|()
decl_stmt|;
name|int
name|bpl
init|=
name|cursorImage
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|height
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|bytesPerLine
condition|;
name|j
operator|++
operator|,
name|data
operator|++
operator|,
name|mask
operator|++
control|)
block|{
for|for
control|(
name|int
name|b
init|=
literal|0
init|;
name|b
operator|<
literal|8
operator|&&
name|j
operator|*
literal|8
operator|+
name|b
operator|<
name|width
condition|;
name|b
operator|++
control|)
block|{
name|d
operator|=
operator|*
name|data
operator|&
operator|(
literal|1
operator|<<
name|b
operator|)
expr_stmt|;
name|m
operator|=
operator|*
name|mask
operator|&
operator|(
literal|1
operator|<<
name|b
operator|)
expr_stmt|;
if|if
condition|(
name|d
operator|&&
name|m
condition|)
name|p
operator|=
literal|0
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|d
operator|&&
name|m
condition|)
name|p
operator|=
literal|1
expr_stmt|;
else|else
name|p
operator|=
literal|2
expr_stmt|;
name|cursor_data
index|[
name|j
operator|*
literal|8
operator|+
name|b
index|]
operator|=
name|p
expr_stmt|;
comment|// calc region
if|if
condition|(
name|x
operator|<
literal|0
operator|&&
name|m
condition|)
name|x
operator|=
name|j
operator|*
literal|8
operator|+
name|b
expr_stmt|;
elseif|else
if|if
condition|(
name|x
operator|>=
literal|0
operator|&&
operator|!
name|m
condition|)
block|{
name|x
operator|=
operator|-
literal|1
expr_stmt|;
name|w
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|m
condition|)
name|w
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|x
operator|>=
literal|0
condition|)
block|{
name|x
operator|=
operator|-
literal|1
expr_stmt|;
name|w
operator|=
literal|0
expr_stmt|;
block|}
name|cursor_data
operator|+=
name|bpl
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \fn QGraphicsSystemCursorImage::QGraphicsSystemCursorImage(const uchar *data, const uchar *mask, int width, int height, int hotX, int hotY)      \brief set the cursor image to the graphic represented by the combination of data, mask,     width, and height      \a data The pixel data of the graphic      \a mask Mask data for the graphic. pixels in data with a corresponding mask bit of 0 are not drawn      \a width The width of the graphic in pixels      \a height The height of the graphic in pixels      \a hotX The X hotspot of the cursor graphic      \a hotY The Y hotspot of the cursor graphic      \sa set */
end_comment
begin_comment
comment|/*!   \fn QImage *QGraphicsSystemCursorImage::image()    \brief Return the cursor graphic as a pointer to a QImage */
end_comment
begin_comment
comment|/*!     \fn QPoint QGraphicsSystemCursorImage::hotspot()      \brief Return the cursor's hotspot */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
