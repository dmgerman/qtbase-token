begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qcursor.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qdnd_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|QT_USE_NAMESPACE
DECL|variable|defaultPm
specifier|static
name|QPixmap
modifier|*
name|defaultPm
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|default_pm_hotx
specifier|static
specifier|const
name|int
name|default_pm_hotx
init|=
operator|-
literal|2
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|default_pm_hoty
specifier|static
specifier|const
name|int
name|default_pm_hoty
init|=
operator|-
literal|16
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|default_pm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|default_pm
index|[]
init|=
block|{
literal|"13 9 3 1"
block|,
literal|".      c None"
block|,
literal|"       c #000000"
block|,
literal|"X      c #FFFFFF"
block|,
literal|"X X X X X X X"
block|,
literal|" X X X X X X "
block|,
literal|"X ......... X"
block|,
literal|" X.........X "
block|,
literal|"X ......... X"
block|,
literal|" X.........X "
block|,
literal|"X ......... X"
block|,
literal|" X X X X X X "
block|,
literal|"X X X X X X X"
block|, }
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Shift/Ctrl handling, and final drop status
end_comment
begin_decl_stmt
DECL|variable|global_accepted_action
specifier|static
name|Qt
operator|::
name|DropAction
name|global_accepted_action
init|=
name|Qt
operator|::
name|CopyAction
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|possible_actions
specifier|static
name|Qt
operator|::
name|DropActions
name|possible_actions
init|=
name|Qt
operator|::
name|IgnoreAction
decl_stmt|;
end_decl_stmt
begin_comment
comment|// static variables in place of a proper cross-process solution
end_comment
begin_decl_stmt
DECL|variable|drag_object
specifier|static
name|QDrag
modifier|*
name|drag_object
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_qws_dnd_dragging
specifier|static
name|bool
name|qt_qws_dnd_dragging
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|oldstate
specifier|static
name|Qt
operator|::
name|KeyboardModifiers
name|oldstate
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QShapedPixmapWidget
class|class
name|QShapedPixmapWidget
super|:
specifier|public
name|QWidget
block|{
DECL|member|pixmap
name|QPixmap
name|pixmap
decl_stmt|;
public|public:
DECL|function|QShapedPixmapWidget
name|QShapedPixmapWidget
parameter_list|()
member_init_list|:
name|QWidget
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Tool
operator||
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|X11BypassWindowManagerHint
argument_list|)
block|{
comment|// ### Temporary workaround for 4.2-rc1!!! To prevent flickering when
comment|// using drag'n drop in a client application. (task 126956)
comment|// setAttribute() should be done unconditionally!
if|if
condition|(
name|QApplication
operator|::
name|type
argument_list|()
operator|==
name|QApplication
operator|::
name|GuiServer
condition|)
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_TransparentForMouseEvents
argument_list|)
expr_stmt|;
block|}
DECL|function|setPixmap
name|void
name|setPixmap
parameter_list|(
name|QPixmap
name|pm
parameter_list|)
block|{
name|pixmap
operator|=
name|pm
expr_stmt|;
if|if
condition|(
operator|!
name|pixmap
operator|.
name|mask
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|setMask
argument_list|(
name|pixmap
operator|.
name|mask
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clearMask
argument_list|()
expr_stmt|;
block|}
name|resize
argument_list|(
name|pm
operator|.
name|width
argument_list|()
argument_list|,
name|pm
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|qt_qws_dnd_deco
specifier|static
name|QShapedPixmapWidget
modifier|*
name|qt_qws_dnd_deco
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|updatePixmap
name|void
name|QDragManager
operator|::
name|updatePixmap
parameter_list|()
block|{
if|if
condition|(
name|qt_qws_dnd_deco
condition|)
block|{
name|QPixmap
name|pm
decl_stmt|;
name|QPoint
name|pm_hot
argument_list|(
name|default_pm_hotx
argument_list|,
name|default_pm_hoty
argument_list|)
decl_stmt|;
if|if
condition|(
name|drag_object
condition|)
block|{
name|pm
operator|=
name|drag_object
operator|->
name|pixmap
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|pm
operator|.
name|isNull
argument_list|()
condition|)
name|pm_hot
operator|=
name|drag_object
operator|->
name|hotSpot
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pm
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|defaultPm
condition|)
name|defaultPm
operator|=
operator|new
name|QPixmap
argument_list|(
name|default_pm
argument_list|)
expr_stmt|;
name|pm
operator|=
operator|*
name|defaultPm
expr_stmt|;
block|}
name|qt_qws_dnd_deco
operator|->
name|setPixmap
argument_list|(
name|pm
argument_list|)
expr_stmt|;
name|qt_qws_dnd_deco
operator|->
name|move
argument_list|(
name|QCursor
operator|::
name|pos
argument_list|()
operator|-
name|pm_hot
argument_list|)
expr_stmt|;
if|if
condition|(
name|willDrop
condition|)
block|{
name|qt_qws_dnd_deco
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qt_qws_dnd_deco
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|QDragManager
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|move
name|void
name|QDragManager
operator|::
name|move
parameter_list|(
specifier|const
name|QPoint
modifier|&
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|updateCursor
name|void
name|QDragManager
operator|::
name|updateCursor
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
if|if
condition|(
name|willDrop
condition|)
block|{
if|if
condition|(
name|qt_qws_dnd_deco
condition|)
name|qt_qws_dnd_deco
operator|->
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentActionForOverrideCursor
operator|!=
name|global_accepted_action
condition|)
block|{
name|QApplication
operator|::
name|changeOverrideCursor
argument_list|(
name|QCursor
argument_list|(
name|dragCursor
argument_list|(
name|global_accepted_action
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|currentActionForOverrideCursor
operator|=
name|global_accepted_action
expr_stmt|;
block|}
block|}
else|else
block|{
name|QCursor
modifier|*
name|overrideCursor
init|=
name|QApplication
operator|::
name|overrideCursor
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|overrideCursor
operator|||
name|overrideCursor
operator|->
name|shape
argument_list|()
operator|!=
name|Qt
operator|::
name|ForbiddenCursor
condition|)
block|{
name|QApplication
operator|::
name|changeOverrideCursor
argument_list|(
name|QCursor
argument_list|(
name|Qt
operator|::
name|ForbiddenCursor
argument_list|)
argument_list|)
expr_stmt|;
name|currentActionForOverrideCursor
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
block|}
if|if
condition|(
name|qt_qws_dnd_deco
condition|)
name|qt_qws_dnd_deco
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|eventFilter
name|bool
name|QDragManager
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|beingCancelled
condition|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|KeyRelease
operator|&&
cast|static_cast
argument_list|<
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Escape
condition|)
block|{
name|qApp
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|object
operator|==
literal|0
argument_list|)
expr_stmt|;
name|beingCancelled
operator|=
literal|false
expr_stmt|;
name|eventLoop
operator|->
name|exit
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
comment|// block the key release
block|}
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|o
operator|->
name|isWidgetType
argument_list|()
condition|)
return|return
literal|false
return|;
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|ShortcutOverride
case|:
comment|// prevent accelerators from firing while dragging
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QEvent
operator|::
name|KeyPress
case|:
case|case
name|QEvent
operator|::
name|KeyRelease
case|:
block|{
name|QKeyEvent
modifier|*
name|ke
init|=
operator|(
operator|(
name|QKeyEvent
operator|*
operator|)
name|e
operator|)
decl_stmt|;
if|if
condition|(
name|ke
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Escape
operator|&&
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|KeyPress
condition|)
block|{
name|cancel
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|beingCancelled
operator|=
literal|false
expr_stmt|;
name|eventLoop
operator|->
name|exit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|updateCursor
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
comment|// Eat all key events
block|}
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|MouseMove
case|:
block|{
if|if
condition|(
operator|!
name|object
condition|)
block|{
comment|//#### this should not happen
name|qWarning
argument_list|(
literal|"QDragManager::eventFilter: No object"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|QMimeData
modifier|*
name|dropData
init|=
name|manager
operator|->
name|object
condition|?
name|manager
operator|->
name|dragPrivate
argument_list|()
operator|->
name|data
else|:
name|manager
operator|->
name|dropData
decl_stmt|;
if|if
condition|(
name|manager
operator|->
name|object
condition|)
name|possible_actions
operator|=
name|manager
operator|->
name|dragPrivate
argument_list|()
operator|->
name|possible_actions
expr_stmt|;
else|else
name|possible_actions
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
name|QMouseEvent
modifier|*
name|me
init|=
operator|(
name|QMouseEvent
operator|*
operator|)
name|e
decl_stmt|;
if|if
condition|(
name|me
operator|->
name|buttons
argument_list|()
condition|)
block|{
name|Qt
operator|::
name|DropAction
name|prevAction
init|=
name|global_accepted_action
decl_stmt|;
name|QWidget
modifier|*
name|cw
init|=
name|QApplication
operator|::
name|widgetAt
argument_list|(
name|me
operator|->
name|globalPos
argument_list|()
argument_list|)
decl_stmt|;
comment|// Fix for when we move mouse on to the deco widget
if|if
condition|(
name|qt_qws_dnd_deco
operator|&&
name|cw
operator|==
name|qt_qws_dnd_deco
condition|)
name|cw
operator|=
name|object
operator|->
name|target
argument_list|()
expr_stmt|;
while|while
condition|(
name|cw
operator|&&
operator|!
name|cw
operator|->
name|acceptDrops
argument_list|()
operator|&&
operator|!
name|cw
operator|->
name|isWindow
argument_list|()
condition|)
name|cw
operator|=
name|cw
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
if|if
condition|(
name|object
operator|->
name|target
argument_list|()
operator|!=
name|cw
condition|)
block|{
if|if
condition|(
name|object
operator|->
name|target
argument_list|()
condition|)
block|{
name|QDragLeaveEvent
name|dle
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|object
operator|->
name|target
argument_list|()
argument_list|,
operator|&
name|dle
argument_list|)
expr_stmt|;
name|willDrop
operator|=
literal|false
expr_stmt|;
name|global_accepted_action
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
name|updateCursor
argument_list|()
expr_stmt|;
name|restoreCursor
operator|=
literal|true
expr_stmt|;
name|object
operator|->
name|d_func
argument_list|()
operator|->
name|target
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|cw
operator|&&
name|cw
operator|->
name|acceptDrops
argument_list|()
condition|)
block|{
name|object
operator|->
name|d_func
argument_list|()
operator|->
name|target
operator|=
name|cw
expr_stmt|;
name|QDragEnterEvent
name|dee
argument_list|(
name|cw
operator|->
name|mapFromGlobal
argument_list|(
name|me
operator|->
name|globalPos
argument_list|()
argument_list|)
argument_list|,
name|possible_actions
argument_list|,
name|dropData
argument_list|,
name|me
operator|->
name|buttons
argument_list|()
argument_list|,
name|me
operator|->
name|modifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|object
operator|->
name|target
argument_list|()
argument_list|,
operator|&
name|dee
argument_list|)
expr_stmt|;
name|willDrop
operator|=
name|dee
operator|.
name|isAccepted
argument_list|()
operator|&&
name|dee
operator|.
name|dropAction
argument_list|()
operator|!=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
name|global_accepted_action
operator|=
name|willDrop
condition|?
name|dee
operator|.
name|dropAction
argument_list|()
else|:
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
name|updateCursor
argument_list|()
expr_stmt|;
name|restoreCursor
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|cw
condition|)
block|{
name|QDragMoveEvent
name|dme
argument_list|(
name|cw
operator|->
name|mapFromGlobal
argument_list|(
name|me
operator|->
name|globalPos
argument_list|()
argument_list|)
argument_list|,
name|possible_actions
argument_list|,
name|dropData
argument_list|,
name|me
operator|->
name|buttons
argument_list|()
argument_list|,
name|me
operator|->
name|modifiers
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|global_accepted_action
operator|!=
name|Qt
operator|::
name|IgnoreAction
condition|)
block|{
name|dme
operator|.
name|setDropAction
argument_list|(
name|global_accepted_action
argument_list|)
expr_stmt|;
name|dme
operator|.
name|accept
argument_list|()
expr_stmt|;
block|}
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|cw
argument_list|,
operator|&
name|dme
argument_list|)
expr_stmt|;
name|willDrop
operator|=
name|dme
operator|.
name|isAccepted
argument_list|()
expr_stmt|;
name|global_accepted_action
operator|=
name|willDrop
condition|?
name|dme
operator|.
name|dropAction
argument_list|()
else|:
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
name|updatePixmap
argument_list|()
expr_stmt|;
name|updateCursor
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|global_accepted_action
operator|!=
name|prevAction
condition|)
name|emitActionChanged
argument_list|(
name|global_accepted_action
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
comment|// Eat all mouse events
block|}
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
block|{
name|qApp
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|restoreCursor
condition|)
block|{
name|willDrop
operator|=
literal|false
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QApplication
operator|::
name|restoreOverrideCursor
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|restoreCursor
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|object
operator|&&
name|object
operator|->
name|target
argument_list|()
condition|)
block|{
name|QMouseEvent
modifier|*
name|me
init|=
operator|(
name|QMouseEvent
operator|*
operator|)
name|e
decl_stmt|;
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|QMimeData
modifier|*
name|dropData
init|=
name|manager
operator|->
name|object
condition|?
name|manager
operator|->
name|dragPrivate
argument_list|()
operator|->
name|data
else|:
name|manager
operator|->
name|dropData
decl_stmt|;
name|QDropEvent
name|de
argument_list|(
name|object
operator|->
name|target
argument_list|()
operator|->
name|mapFromGlobal
argument_list|(
name|me
operator|->
name|globalPos
argument_list|()
argument_list|)
argument_list|,
name|possible_actions
argument_list|,
name|dropData
argument_list|,
name|me
operator|->
name|buttons
argument_list|()
argument_list|,
name|me
operator|->
name|modifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|object
operator|->
name|target
argument_list|()
argument_list|,
operator|&
name|de
argument_list|)
expr_stmt|;
if|if
condition|(
name|de
operator|.
name|isAccepted
argument_list|()
condition|)
name|global_accepted_action
operator|=
name|de
operator|.
name|dropAction
argument_list|()
expr_stmt|;
else|else
name|global_accepted_action
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
if|if
condition|(
name|object
condition|)
name|object
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|drag_object
operator|=
name|object
operator|=
literal|0
expr_stmt|;
block|}
name|eventLoop
operator|->
name|exit
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
comment|// Eat all mouse events
block|}
default|default:
break|break;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|drag
name|Qt
operator|::
name|DropAction
name|QDragManager
operator|::
name|drag
parameter_list|(
name|QDrag
modifier|*
name|o
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
name|o
operator|||
operator|!
name|o
operator|||
operator|!
name|o
operator|->
name|source
argument_list|()
condition|)
return|return
name|Qt
operator|::
name|IgnoreAction
return|;
if|if
condition|(
name|object
condition|)
block|{
name|cancel
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|beingCancelled
operator|=
literal|false
expr_stmt|;
block|}
name|object
operator|=
name|drag_object
operator|=
name|o
expr_stmt|;
name|qt_qws_dnd_deco
operator|=
operator|new
name|QShapedPixmapWidget
argument_list|()
expr_stmt|;
name|oldstate
operator|=
name|Qt
operator|::
name|NoModifier
expr_stmt|;
comment|// #### Should use state that caused the drag
comment|//    drag_mode = mode;
name|willDrop
operator|=
literal|false
expr_stmt|;
name|updatePixmap
argument_list|()
expr_stmt|;
name|updateCursor
argument_list|()
expr_stmt|;
name|restoreCursor
operator|=
literal|true
expr_stmt|;
name|object
operator|->
name|d_func
argument_list|()
operator|->
name|target
operator|=
literal|0
expr_stmt|;
name|qApp
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|global_accepted_action
operator|=
name|Qt
operator|::
name|CopyAction
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|qApp
operator|->
name|setOverrideCursor
argument_list|(
name|Qt
operator|::
name|ArrowCursor
argument_list|)
expr_stmt|;
name|restoreCursor
operator|=
literal|true
expr_stmt|;
name|updateCursor
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|qt_qws_dnd_dragging
operator|=
literal|true
expr_stmt|;
name|eventLoop
operator|=
operator|new
name|QEventLoop
expr_stmt|;
operator|(
name|void
operator|)
name|eventLoop
operator|->
name|exec
argument_list|()
expr_stmt|;
operator|delete
name|eventLoop
expr_stmt|;
name|eventLoop
operator|=
literal|0
expr_stmt|;
operator|delete
name|qt_qws_dnd_deco
expr_stmt|;
name|qt_qws_dnd_deco
operator|=
literal|0
expr_stmt|;
name|qt_qws_dnd_dragging
operator|=
literal|false
expr_stmt|;
return|return
name|global_accepted_action
return|;
block|}
end_function
begin_function
DECL|function|cancel
name|void
name|QDragManager
operator|::
name|cancel
parameter_list|(
name|bool
name|deleteSource
parameter_list|)
block|{
comment|//    qDebug("QDragManager::cancel");
name|beingCancelled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|object
operator|->
name|target
argument_list|()
condition|)
block|{
name|QDragLeaveEvent
name|dle
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|object
operator|->
name|target
argument_list|()
argument_list|,
operator|&
name|dle
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
if|if
condition|(
name|restoreCursor
condition|)
block|{
name|QApplication
operator|::
name|restoreOverrideCursor
argument_list|()
expr_stmt|;
name|restoreCursor
operator|=
literal|false
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|drag_object
condition|)
block|{
if|if
condition|(
name|deleteSource
condition|)
name|object
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|drag_object
operator|=
name|object
operator|=
literal|0
expr_stmt|;
block|}
operator|delete
name|qt_qws_dnd_deco
expr_stmt|;
name|qt_qws_dnd_deco
operator|=
literal|0
expr_stmt|;
name|global_accepted_action
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drop
name|void
name|QDragManager
operator|::
name|drop
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|retrieveData_sys
name|QVariant
name|QDropData
operator|::
name|retrieveData_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimetype
parameter_list|,
name|QVariant
operator|::
name|Type
name|type
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|drag_object
condition|)
return|return
name|QVariant
argument_list|()
return|;
name|QByteArray
name|data
init|=
name|drag_object
operator|->
name|mimeData
argument_list|()
operator|->
name|data
argument_list|(
name|mimetype
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|QVariant
operator|::
name|String
condition|)
return|return
name|QString
operator|::
name|fromUtf8
argument_list|(
name|data
argument_list|)
return|;
return|return
name|data
return|;
block|}
end_function
begin_function
DECL|function|hasFormat_sys
name|bool
name|QDropData
operator|::
name|hasFormat_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|format
parameter_list|)
specifier|const
block|{
return|return
name|formats
argument_list|()
operator|.
name|contains
argument_list|(
name|format
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|formats_sys
name|QStringList
name|QDropData
operator|::
name|formats_sys
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|drag_object
condition|)
return|return
name|drag_object
operator|->
name|mimeData
argument_list|()
operator|->
name|formats
argument_list|()
return|;
return|return
name|QStringList
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
