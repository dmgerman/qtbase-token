begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qkeymapper_p.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qtextcodec.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"qevent_p.h"
end_include
begin_include
include|#
directive|include
file|"qt_x11_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_XKB
end_ifndef
begin_include
include|#
directive|include
file|<X11/XKBlib.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|XK_MISCELLANY
define|#
directive|define
name|XK_MISCELLANY
end_define
begin_define
DECL|macro|XK_LATIN1
define|#
directive|define
name|XK_LATIN1
end_define
begin_define
DECL|macro|XK_KOREAN
define|#
directive|define
name|XK_KOREAN
end_define
begin_define
DECL|macro|XK_XKB_KEYS
define|#
directive|define
name|XK_XKB_KEYS
end_define
begin_include
include|#
directive|include
file|<X11/keysymdef.h>
end_include
begin_include
include|#
directive|include
file|<ctype.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_LINUXBASE
end_ifdef
begin_comment
comment|// LSB's IsKeypadKey define is wrong - see
end_comment
begin_comment
comment|// http://bugs.linuxbase.org/show_bug.cgi?id=2521
end_comment
begin_undef
DECL|macro|IsKeypadKey
undef|#
directive|undef
name|IsKeypadKey
end_undef
begin_define
DECL|macro|IsKeypadKey
define|#
directive|define
name|IsKeypadKey
parameter_list|(
name|keysym
parameter_list|)
define|\
value|(((KeySym)(keysym)>= XK_KP_Space)&& ((KeySym)(keysym)<= XK_KP_Equal))
end_define
begin_undef
DECL|macro|IsPrivateKeypadKey
undef|#
directive|undef
name|IsPrivateKeypadKey
end_undef
begin_define
DECL|macro|IsPrivateKeypadKey
define|#
directive|define
name|IsPrivateKeypadKey
parameter_list|(
name|keysym
parameter_list|)
define|\
value|(((KeySym)(keysym)>= 0x11000000)&& ((KeySym)(keysym)<= 0x1100FFFF))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_XKB
comment|// bring in the auto-generated xkbLayoutData
include|#
directive|include
file|"qkeymapper_x11_p.cpp"
DECL|function|q_getKeyboardLocale
name|QLocale
name|q_getKeyboardLocale
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|layoutName
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|variantName
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|xkbLayoutData
index|[
name|i
index|]
operator|.
name|layout
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|layoutName
operator|==
name|xkbLayoutData
index|[
name|i
index|]
operator|.
name|layout
operator|&&
name|variantName
operator|==
name|xkbLayoutData
index|[
name|i
index|]
operator|.
name|variant
condition|)
return|return
name|QLocale
argument_list|(
name|xkbLayoutData
index|[
name|i
index|]
operator|.
name|language
argument_list|,
name|xkbLayoutData
index|[
name|i
index|]
operator|.
name|country
argument_list|)
return|;
operator|++
name|i
expr_stmt|;
block|}
return|return
name|QLocale
operator|::
name|c
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_XKB
end_comment
begin_comment
comment|// from qapplication_x11.cpp
end_comment
begin_decl_stmt
specifier|extern
name|uchar
name|qt_alt_mask
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|uchar
name|qt_meta_mask
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|uchar
name|qt_super_mask
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|uchar
name|qt_hyper_mask
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|uchar
name|qt_mode_switch_mask
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_num_lock_mask
name|uchar
name|qt_num_lock_mask
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|extern
name|bool
name|qt_sendSpontaneousEvent
parameter_list|(
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// ### we should really resolve conflicts with other masks by
end_comment
begin_comment
comment|// ### decomposing the Qt::KeyboardModifers in possibleKeys()
end_comment
begin_define
DECL|macro|SETMASK
define|#
directive|define
name|SETMASK
parameter_list|(
name|sym
parameter_list|,
name|mask
parameter_list|)
define|\
value|do {                                                                \         if (qt_alt_mask == 0                                            \&& qt_meta_mask != mask                                     \&& qt_super_mask != mask                                    \&& qt_hyper_mask != mask                                    \&& (sym == XK_Alt_L || sym == XK_Alt_R)) {                  \             qt_alt_mask = mask;                                         \         }                                                               \         if (qt_meta_mask == 0                                           \&& qt_alt_mask != mask                                      \&& qt_super_mask != mask                                    \&& qt_hyper_mask != mask                                    \&& (sym == XK_Meta_L || sym == XK_Meta_R)) {                \             qt_meta_mask = mask;                                        \         }                                                               \         if (qt_super_mask == 0                                          \&& qt_alt_mask != mask                                      \&& qt_meta_mask != mask                                     \&& qt_hyper_mask != mask                                    \&& (sym == XK_Super_L || sym == XK_Super_R)) {              \             qt_super_mask = mask;                                       \         }                                                               \         if (qt_hyper_mask == 0                                          \&& qt_alt_mask != mask                                      \&& qt_meta_mask != mask                                     \&& qt_super_mask != mask                                    \&& (sym == XK_Hyper_L || sym == XK_Hyper_R)) {              \             qt_hyper_mask = mask;                                       \         }                                                               \         if (qt_mode_switch_mask == 0                                    \&& qt_alt_mask != mask                                      \&& qt_meta_mask != mask                                     \&& qt_super_mask != mask                                    \&& qt_hyper_mask != mask                                    \&& sym == XK_Mode_switch) {                                 \             qt_mode_switch_mask = mask;                                 \         }                                                               \         if (qt_num_lock_mask == 0                                       \&& sym == XK_Num_Lock) {                                    \             qt_num_lock_mask = mask;                                    \         }                                                               \     } while(false)
end_define
begin_comment
comment|// qt_XTranslateKey() is based on _XTranslateKey() taken from:
end_comment
begin_comment
comment|/* $Xorg: KeyBind.c,v 1.4 2001/02/09 02:03:34 xorgcvs Exp $ */
end_comment
begin_comment
comment|/*  Copyright 1985, 1987, 1998  The Open Group  Permission to use, copy, modify, distribute, and sell this software and its documentation for any purpose is hereby granted without fee, provided that the above copyright notice appear in all copies and that both that copyright notice and this permission notice appear in supporting documentation.  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  Except as contained in this notice, the name of The Open Group shall not be used in advertising or otherwise to promote the sale, use or other dealings in this Software without prior written authorization from The Open Group.  */
end_comment
begin_function
specifier|static
name|int
DECL|function|qt_XTranslateKey
name|qt_XTranslateKey
parameter_list|(
specifier|register
name|QXCoreDesc
modifier|*
name|dpy
parameter_list|,
name|KeyCode
name|keycode
parameter_list|,
specifier|register
name|unsigned
name|int
name|modifiers
parameter_list|,
name|unsigned
name|int
modifier|*
name|modifiers_return
parameter_list|,
name|KeySym
modifier|*
name|keysym_return
parameter_list|)
block|{
name|int
name|per
decl_stmt|;
specifier|register
name|KeySym
modifier|*
name|syms
decl_stmt|;
name|KeySym
name|sym
decl_stmt|,
name|lsym
decl_stmt|,
name|usym
decl_stmt|;
if|if
condition|(
operator|!
name|dpy
operator|->
name|keysyms
condition|)
return|return
literal|0
return|;
operator|*
name|modifiers_return
operator|=
operator|(
operator|(
name|ShiftMask
operator||
name|LockMask
operator|)
operator||
name|dpy
operator|->
name|mode_switch
operator||
name|dpy
operator|->
name|num_lock
operator|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|int
operator|)
name|keycode
operator|<
name|dpy
operator|->
name|min_keycode
operator|)
operator|||
operator|(
operator|(
name|int
operator|)
name|keycode
operator|>
name|dpy
operator|->
name|max_keycode
operator|)
condition|)
block|{
operator|*
name|keysym_return
operator|=
name|NoSymbol
expr_stmt|;
return|return
literal|1
return|;
block|}
name|per
operator|=
name|dpy
operator|->
name|keysyms_per_keycode
expr_stmt|;
name|syms
operator|=
operator|&
name|dpy
operator|->
name|keysyms
index|[
operator|(
name|keycode
operator|-
name|dpy
operator|->
name|min_keycode
operator|)
operator|*
name|per
index|]
expr_stmt|;
while|while
condition|(
operator|(
name|per
operator|>
literal|2
operator|)
operator|&&
operator|(
name|syms
index|[
name|per
operator|-
literal|1
index|]
operator|==
name|NoSymbol
operator|)
condition|)
name|per
operator|--
expr_stmt|;
if|if
condition|(
operator|(
name|per
operator|>
literal|2
operator|)
operator|&&
operator|(
name|modifiers
operator|&
name|dpy
operator|->
name|mode_switch
operator|)
condition|)
block|{
name|syms
operator|+=
literal|2
expr_stmt|;
name|per
operator|-=
literal|2
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|modifiers
operator|&
name|dpy
operator|->
name|num_lock
operator|)
operator|&&
operator|(
name|per
operator|>
literal|1
operator|&&
operator|(
name|IsKeypadKey
argument_list|(
name|syms
index|[
literal|1
index|]
argument_list|)
operator|||
name|IsPrivateKeypadKey
argument_list|(
name|syms
index|[
literal|1
index|]
argument_list|)
operator|)
operator|)
condition|)
block|{
if|if
condition|(
operator|(
name|modifiers
operator|&
name|ShiftMask
operator|)
operator|||
operator|(
operator|(
name|modifiers
operator|&
name|LockMask
operator|)
operator|&&
operator|(
name|dpy
operator|->
name|lock_meaning
operator|==
name|XK_Shift_Lock
operator|)
operator|)
condition|)
operator|*
name|keysym_return
operator|=
name|syms
index|[
literal|0
index|]
expr_stmt|;
else|else
operator|*
name|keysym_return
operator|=
name|syms
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|modifiers
operator|&
name|ShiftMask
operator|)
operator|&&
operator|(
operator|!
operator|(
name|modifiers
operator|&
name|LockMask
operator|)
operator|||
operator|(
name|dpy
operator|->
name|lock_meaning
operator|==
name|NoSymbol
operator|)
operator|)
condition|)
block|{
if|if
condition|(
operator|(
name|per
operator|==
literal|1
operator|)
operator|||
operator|(
name|syms
index|[
literal|1
index|]
operator|==
name|NoSymbol
operator|)
condition|)
name|XConvertCase
argument_list|(
name|syms
index|[
literal|0
index|]
argument_list|,
name|keysym_return
argument_list|,
operator|&
name|usym
argument_list|)
expr_stmt|;
else|else
operator|*
name|keysym_return
operator|=
name|syms
index|[
literal|0
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|modifiers
operator|&
name|LockMask
operator|)
operator|||
operator|(
name|dpy
operator|->
name|lock_meaning
operator|!=
name|XK_Caps_Lock
operator|)
condition|)
block|{
if|if
condition|(
operator|(
name|per
operator|==
literal|1
operator|)
operator|||
operator|(
operator|(
name|usym
operator|=
name|syms
index|[
literal|1
index|]
operator|)
operator|==
name|NoSymbol
operator|)
condition|)
name|XConvertCase
argument_list|(
name|syms
index|[
literal|0
index|]
argument_list|,
operator|&
name|lsym
argument_list|,
operator|&
name|usym
argument_list|)
expr_stmt|;
operator|*
name|keysym_return
operator|=
name|usym
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|per
operator|==
literal|1
operator|)
operator|||
operator|(
operator|(
name|sym
operator|=
name|syms
index|[
literal|1
index|]
operator|)
operator|==
name|NoSymbol
operator|)
condition|)
name|sym
operator|=
name|syms
index|[
literal|0
index|]
expr_stmt|;
name|XConvertCase
argument_list|(
name|sym
argument_list|,
operator|&
name|lsym
argument_list|,
operator|&
name|usym
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|modifiers
operator|&
name|ShiftMask
operator|)
operator|&&
operator|(
name|sym
operator|!=
name|syms
index|[
literal|0
index|]
operator|)
operator|&&
operator|(
operator|(
name|sym
operator|!=
name|usym
operator|)
operator|||
operator|(
name|lsym
operator|==
name|usym
operator|)
operator|)
condition|)
name|XConvertCase
argument_list|(
name|syms
index|[
literal|0
index|]
argument_list|,
operator|&
name|lsym
argument_list|,
operator|&
name|usym
argument_list|)
expr_stmt|;
operator|*
name|keysym_return
operator|=
name|usym
expr_stmt|;
block|}
if|if
condition|(
operator|*
name|keysym_return
operator|==
name|XK_VoidSymbol
condition|)
operator|*
name|keysym_return
operator|=
name|NoSymbol
expr_stmt|;
return|return
literal|1
return|;
block|}
end_function
begin_constructor
DECL|function|QKeyMapperPrivate
name|QKeyMapperPrivate
operator|::
name|QKeyMapperPrivate
parameter_list|()
member_init_list|:
name|keyboardInputDirection
argument_list|(
name|Qt
operator|::
name|LeftToRight
argument_list|)
member_init_list|,
name|xkb_currentGroup
argument_list|(
literal|0
argument_list|)
block|{
name|memset
argument_list|(
operator|&
name|coreDesc
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|coreDesc
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XKB
if|if
condition|(
name|X11
operator|->
name|use_xkb
condition|)
block|{
comment|// get the current group
name|XkbStateRec
name|xkbState
decl_stmt|;
if|if
condition|(
name|XkbGetState
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|XkbUseCoreKbd
argument_list|,
operator|&
name|xkbState
argument_list|)
operator|==
name|Success
condition|)
name|xkb_currentGroup
operator|=
name|xkbState
operator|.
name|group
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QKeyMapperPrivate
name|QKeyMapperPrivate
operator|::
name|~
name|QKeyMapperPrivate
parameter_list|()
block|{
if|if
condition|(
name|coreDesc
operator|.
name|keysyms
condition|)
name|XFree
argument_list|(
name|coreDesc
operator|.
name|keysyms
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|possibleKeys
name|QList
argument_list|<
name|int
argument_list|>
name|QKeyMapperPrivate
operator|::
name|possibleKeys
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_XKB
if|if
condition|(
name|X11
operator|->
name|use_xkb
condition|)
return|return
name|possibleKeysXKB
argument_list|(
name|event
argument_list|)
return|;
endif|#
directive|endif
return|return
name|possibleKeysCore
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_enum
DECL|enumerator|MaxBits
enum|enum
block|{
name|MaxBits
init|=
sizeof|sizeof
argument_list|(
name|uint
argument_list|)
operator|*
literal|8
block|}
enum|;
end_enum
begin_function_decl
specifier|static
name|QString
name|translateKeySym
parameter_list|(
name|KeySym
name|keysym
parameter_list|,
name|uint
name|xmodifiers
parameter_list|,
name|int
modifier|&
name|code
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
modifier|&
name|modifiers
parameter_list|,
name|QByteArray
modifier|&
name|chars
parameter_list|,
name|int
modifier|&
name|count
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|possibleKeysXKB
name|QList
argument_list|<
name|int
argument_list|>
name|QKeyMapperPrivate
operator|::
name|possibleKeysXKB
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_XKB
specifier|const
name|int
name|xkeycode
init|=
name|event
operator|->
name|nativeScanCode
argument_list|()
decl_stmt|;
specifier|const
name|uint
name|xmodifiers
init|=
name|event
operator|->
name|nativeModifiers
argument_list|()
decl_stmt|;
comment|// first, translate key only using lock modifiers (there are no Qt equivalents for these, so we must
comment|// always use them when determining the baseKeySym)
name|KeySym
name|baseKeySym
decl_stmt|;
name|uint
name|consumedModifiers
decl_stmt|;
if|if
condition|(
operator|!
name|XkbLookupKeySym
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|xkeycode
argument_list|,
operator|(
name|xmodifiers
operator|&
operator|(
name|LockMask
operator||
name|qt_num_lock_mask
operator|)
operator|)
argument_list|,
operator|&
name|consumedModifiers
argument_list|,
operator|&
name|baseKeySym
argument_list|)
condition|)
return|return
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
return|;
name|QList
argument_list|<
name|int
argument_list|>
name|result
decl_stmt|;
comment|// translate sym -> code
name|Qt
operator|::
name|KeyboardModifiers
name|baseModifiers
init|=
literal|0
decl_stmt|;
name|int
name|baseCode
init|=
operator|-
literal|1
decl_stmt|;
name|QByteArray
name|chars
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|QString
name|text
init|=
name|translateKeySym
argument_list|(
name|baseKeySym
argument_list|,
name|xmodifiers
argument_list|,
name|baseCode
argument_list|,
name|baseModifiers
argument_list|,
name|chars
argument_list|,
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseCode
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
return|;
name|baseCode
operator|=
name|text
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|baseCode
operator|&&
name|baseCode
operator|<
literal|0xfffe
condition|)
name|baseCode
operator|=
name|QChar
argument_list|(
name|baseCode
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
expr_stmt|;
name|result
operator|+=
operator|(
name|baseCode
operator||
name|baseModifiers
operator|)
expr_stmt|;
name|int
name|pos1Bits
index|[
name|MaxBits
index|]
decl_stmt|;
name|int
name|num1Bits
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MaxBits
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|consumedModifiers
operator|&
operator|(
literal|1
operator|<<
name|i
operator|)
condition|)
name|pos1Bits
index|[
name|num1Bits
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
specifier|const
name|int
name|numPerms
init|=
operator|(
literal|1
operator|<<
name|num1Bits
operator|)
decl_stmt|;
comment|// translate the key again using each permutation of consumedModifiers
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numPerms
condition|;
operator|++
name|i
control|)
block|{
name|uint
name|val
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|num1Bits
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|i
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
condition|)
name|val
operator||=
operator|(
literal|1
operator|<<
name|pos1Bits
index|[
name|j
index|]
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|xmodifiers
operator|&
name|val
operator|)
operator|!=
name|val
condition|)
continue|continue;
name|KeySym
name|sym
decl_stmt|;
name|uint
name|mods
decl_stmt|;
if|if
condition|(
operator|!
name|XkbLookupKeySym
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|xkeycode
argument_list|,
name|val
argument_list|,
operator|&
name|mods
argument_list|,
operator|&
name|sym
argument_list|)
condition|)
continue|continue;
comment|// translate sym -> code
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
init|=
literal|0
decl_stmt|;
name|int
name|code
init|=
operator|-
literal|1
decl_stmt|;
name|chars
operator|.
name|clear
argument_list|()
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
comment|// mask out the modifiers needed to translate keycode
name|text
operator|=
name|translateKeySym
argument_list|(
name|sym
argument_list|,
name|xmodifiers
operator|&
operator|~
name|val
argument_list|,
name|code
argument_list|,
name|modifiers
argument_list|,
name|chars
argument_list|,
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|code
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|code
operator|=
name|text
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|code
operator|&&
name|code
operator|<
literal|0xfffe
condition|)
name|code
operator|=
name|QChar
argument_list|(
name|code
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
expr_stmt|;
if|if
condition|(
name|code
operator|==
name|Qt
operator|::
name|Key_Tab
operator|&&
operator|(
name|baseModifiers
operator|&
name|Qt
operator|::
name|ShiftModifier
operator|)
condition|)
block|{
comment|// map shift+tab to shift+backtab
name|code
operator|=
name|Qt
operator|::
name|Key_Backtab
expr_stmt|;
name|text
operator|=
name|QString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|code
operator|==
name|baseCode
condition|)
continue|continue;
name|result
operator|+=
operator|(
name|code
operator||
name|modifiers
operator|)
expr_stmt|;
block|}
if|#
directive|if
literal|0
block|qDebug()<< "possibleKeysXKB()"<< hex<< result;
endif|#
directive|endif
return|return
name|result
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
return|;
endif|#
directive|endif
comment|// QT_NO_XKB
block|}
end_function
begin_function
DECL|function|possibleKeysCore
name|QList
argument_list|<
name|int
argument_list|>
name|QKeyMapperPrivate
operator|::
name|possibleKeysCore
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
specifier|const
name|int
name|xkeycode
init|=
name|event
operator|->
name|nativeScanCode
argument_list|()
decl_stmt|;
specifier|const
name|uint
name|xmodifiers
init|=
name|event
operator|->
name|nativeModifiers
argument_list|()
decl_stmt|;
comment|// first, translate key only using lock modifiers (there are no Qt equivalents for these, so we must
comment|// always use them when determining the baseKeySym)
name|KeySym
name|baseKeySym
decl_stmt|;
name|uint
name|consumedModifiers
decl_stmt|;
if|if
condition|(
operator|!
name|qt_XTranslateKey
argument_list|(
operator|&
name|coreDesc
argument_list|,
name|xkeycode
argument_list|,
operator|(
name|xmodifiers
operator|&
operator|(
name|LockMask
operator||
name|qt_num_lock_mask
operator|)
operator|)
argument_list|,
operator|&
name|consumedModifiers
argument_list|,
operator|&
name|baseKeySym
argument_list|)
condition|)
return|return
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
return|;
name|QList
argument_list|<
name|int
argument_list|>
name|result
decl_stmt|;
comment|// translate sym -> code
name|Qt
operator|::
name|KeyboardModifiers
name|baseModifiers
init|=
literal|0
decl_stmt|;
name|int
name|baseCode
init|=
operator|-
literal|1
decl_stmt|;
name|QByteArray
name|chars
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|QString
name|text
init|=
name|translateKeySym
argument_list|(
name|baseKeySym
argument_list|,
name|xmodifiers
argument_list|,
name|baseCode
argument_list|,
name|baseModifiers
argument_list|,
name|chars
argument_list|,
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseCode
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
return|;
name|baseCode
operator|=
name|text
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|baseCode
operator|&&
name|baseCode
operator|<
literal|0xfffe
condition|)
name|baseCode
operator|=
name|QChar
argument_list|(
name|baseCode
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
expr_stmt|;
name|result
operator|+=
operator|(
name|baseCode
operator||
name|baseModifiers
operator|)
expr_stmt|;
name|int
name|pos1Bits
index|[
name|MaxBits
index|]
decl_stmt|;
name|int
name|num1Bits
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MaxBits
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|consumedModifiers
operator|&
operator|(
literal|1
operator|<<
name|i
operator|)
condition|)
name|pos1Bits
index|[
name|num1Bits
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
specifier|const
name|int
name|numPerms
init|=
operator|(
literal|1
operator|<<
name|num1Bits
operator|)
decl_stmt|;
comment|// translate the key again using each permutation of consumedModifiers
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numPerms
condition|;
operator|++
name|i
control|)
block|{
name|uint
name|val
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|num1Bits
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|i
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
condition|)
name|val
operator||=
operator|(
literal|1
operator|<<
name|pos1Bits
index|[
name|j
index|]
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|xmodifiers
operator|&
name|val
operator|)
operator|!=
name|val
condition|)
continue|continue;
name|KeySym
name|sym
decl_stmt|;
name|uint
name|mods
decl_stmt|;
if|if
condition|(
operator|!
name|qt_XTranslateKey
argument_list|(
operator|&
name|coreDesc
argument_list|,
name|xkeycode
argument_list|,
name|val
argument_list|,
operator|&
name|mods
argument_list|,
operator|&
name|sym
argument_list|)
condition|)
continue|continue;
comment|// translate sym -> code
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
init|=
literal|0
decl_stmt|;
name|int
name|code
init|=
operator|-
literal|1
decl_stmt|;
name|chars
operator|.
name|clear
argument_list|()
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
comment|// mask out the modifiers needed to translate keycode
name|text
operator|=
name|translateKeySym
argument_list|(
name|sym
argument_list|,
name|xmodifiers
operator|&
operator|~
name|val
argument_list|,
name|code
argument_list|,
name|modifiers
argument_list|,
name|chars
argument_list|,
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|code
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|code
operator|=
name|text
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|code
operator|&&
name|code
operator|<
literal|0xfffe
condition|)
name|code
operator|=
name|QChar
argument_list|(
name|code
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
expr_stmt|;
if|if
condition|(
name|code
operator|==
name|Qt
operator|::
name|Key_Tab
operator|&&
operator|(
name|baseModifiers
operator|&
name|Qt
operator|::
name|ShiftModifier
operator|)
condition|)
block|{
comment|// map shift+tab to shift+backtab
name|code
operator|=
name|Qt
operator|::
name|Key_Backtab
expr_stmt|;
name|text
operator|=
name|QString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|code
operator|==
name|baseCode
condition|)
continue|continue;
name|result
operator|+=
operator|(
name|code
operator||
name|modifiers
operator|)
expr_stmt|;
block|}
if|#
directive|if
literal|0
block|qDebug()<< "possibleKeysCore()"<< hex<< result;
endif|#
directive|endif
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|// for parsing the _XKB_RULES_NAMES property
end_comment
begin_enum
enum|enum
block|{
DECL|enumerator|RulesFileIndex
name|RulesFileIndex
init|=
literal|0
block|,
DECL|enumerator|ModelIndex
name|ModelIndex
init|=
literal|1
block|,
DECL|enumerator|LayoutIndex
name|LayoutIndex
init|=
literal|2
block|,
DECL|enumerator|VariantIndex
name|VariantIndex
init|=
literal|3
block|,
DECL|enumerator|OptionsIndex
name|OptionsIndex
init|=
literal|4
block|}
enum|;
end_enum
begin_function
DECL|function|clearMappings
name|void
name|QKeyMapperPrivate
operator|::
name|clearMappings
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_XKB
if|if
condition|(
name|X11
operator|->
name|use_xkb
condition|)
block|{
comment|// try to determine the layout name and input direction by reading the _XKB_RULES_NAMES property off
comment|// the root window
name|QByteArray
name|layoutName
decl_stmt|;
name|QByteArray
name|variantName
decl_stmt|;
name|Atom
name|type
init|=
name|XNone
decl_stmt|;
name|int
name|format
init|=
literal|0
decl_stmt|;
name|ulong
name|nitems
init|=
literal|0
decl_stmt|;
name|ulong
name|bytesAfter
init|=
literal|0
decl_stmt|;
name|uchar
modifier|*
name|data
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|RootWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
literal|0
argument_list|)
argument_list|,
name|ATOM
argument_list|(
name|_XKB_RULES_NAMES
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|XA_STRING
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|nitems
argument_list|,
operator|&
name|bytesAfter
argument_list|,
operator|&
name|data
argument_list|)
operator|==
name|Success
operator|&&
name|type
operator|==
name|XA_STRING
operator|&&
name|format
operator|==
literal|8
operator|&&
name|nitems
operator|>
literal|2
condition|)
block|{
comment|/*               index 0 == rules file name               index 1 == model name               index 2 == layout name               index 3 == variant name               index 4 == options             */
name|char
modifier|*
name|names
index|[
literal|5
index|]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|char
modifier|*
name|p
init|=
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|,
modifier|*
name|end
init|=
name|p
operator|+
name|nitems
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
do|do
block|{
name|names
index|[
name|i
operator|++
index|]
operator|=
name|p
expr_stmt|;
name|p
operator|+=
name|qstrlen
argument_list|(
name|p
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
do|while
condition|(
name|p
operator|<
name|end
condition|)
do|;
comment|// the layout names and variants are saved in the _XKB_RULES_NAMES property as a comma separated list
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|layoutNames
init|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|names
index|[
literal|2
index|]
argument_list|,
name|qstrlen
argument_list|(
name|names
index|[
literal|2
index|]
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
decl_stmt|;
if|if
condition|(
name|uint
argument_list|(
name|xkb_currentGroup
argument_list|)
operator|<
name|uint
argument_list|(
name|layoutNames
operator|.
name|count
argument_list|()
argument_list|)
condition|)
name|layoutName
operator|=
name|layoutNames
operator|.
name|at
argument_list|(
name|xkb_currentGroup
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|variantNames
init|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|names
index|[
literal|3
index|]
argument_list|,
name|qstrlen
argument_list|(
name|names
index|[
literal|3
index|]
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
decl_stmt|;
if|if
condition|(
name|uint
argument_list|(
name|xkb_currentGroup
argument_list|)
operator|<
name|uint
argument_list|(
name|variantNames
operator|.
name|count
argument_list|()
argument_list|)
condition|)
name|variantName
operator|=
name|variantNames
operator|.
name|at
argument_list|(
name|xkb_currentGroup
argument_list|)
expr_stmt|;
block|}
comment|// ### ???
comment|// if (keyboardLayoutName.isEmpty())
comment|//     qWarning("Qt: unable to determine keyboard layout, please talk to qt-bugs@trolltech.com"); ?
name|keyboardInputLocale
operator|=
name|q_getKeyboardLocale
argument_list|(
name|layoutName
argument_list|,
name|variantName
argument_list|)
expr_stmt|;
name|keyboardInputDirection
operator|=
name|keyboardInputLocale
operator|.
name|textDirection
argument_list|()
expr_stmt|;
if|#
directive|if
literal|0
block|qDebug()<< "keyboard input locale ="<< keyboardInputLocale.name()<< "direction ="<< keyboardInputDirection;
endif|#
directive|endif
if|if
condition|(
name|data
condition|)
name|XFree
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
comment|// QT_NO_XKB
block|{
if|if
condition|(
name|coreDesc
operator|.
name|keysyms
condition|)
name|XFree
argument_list|(
name|coreDesc
operator|.
name|keysyms
argument_list|)
expr_stmt|;
name|coreDesc
operator|.
name|min_keycode
operator|=
literal|8
expr_stmt|;
name|coreDesc
operator|.
name|max_keycode
operator|=
literal|255
expr_stmt|;
name|XDisplayKeycodes
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|coreDesc
operator|.
name|min_keycode
argument_list|,
operator|&
name|coreDesc
operator|.
name|max_keycode
argument_list|)
expr_stmt|;
name|coreDesc
operator|.
name|keysyms_per_keycode
operator|=
literal|0
expr_stmt|;
name|coreDesc
operator|.
name|keysyms
operator|=
name|XGetKeyboardMapping
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|coreDesc
operator|.
name|min_keycode
argument_list|,
name|coreDesc
operator|.
name|max_keycode
operator|-
name|coreDesc
operator|.
name|min_keycode
operator|+
literal|1
argument_list|,
operator|&
name|coreDesc
operator|.
name|keysyms_per_keycode
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
block|qDebug()<< "min_keycode ="<< coreDesc.min_keycode;             qDebug()<< "max_keycode ="<< coreDesc.max_keycode;             qDebug()<< "keysyms_per_keycode ="<< coreDesc.keysyms_per_keycode;             qDebug()<< "keysyms ="<< coreDesc.keysyms;
endif|#
directive|endif
comment|// ### cannot get/guess the locale with the core protocol
name|keyboardInputLocale
operator|=
name|QLocale
operator|::
name|c
argument_list|()
expr_stmt|;
comment|// ### could examine group 0 for RTL keys
name|keyboardInputDirection
operator|=
name|Qt
operator|::
name|LeftToRight
expr_stmt|;
block|}
name|qt_alt_mask
operator|=
literal|0
expr_stmt|;
name|qt_meta_mask
operator|=
literal|0
expr_stmt|;
name|qt_super_mask
operator|=
literal|0
expr_stmt|;
name|qt_hyper_mask
operator|=
literal|0
expr_stmt|;
name|qt_mode_switch_mask
operator|=
literal|0
expr_stmt|;
comment|// look at the modifier mapping, and get the correct masks for alt, meta, super, hyper, and mode_switch
ifndef|#
directive|ifndef
name|QT_NO_XKB
if|if
condition|(
name|X11
operator|->
name|use_xkb
condition|)
block|{
name|XkbDescPtr
name|xkbDesc
init|=
name|XkbGetMap
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|XkbAllClientInfoMask
argument_list|,
name|XkbUseCoreKbd
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|xkbDesc
operator|->
name|min_key_code
init|;
name|i
operator|<
name|xkbDesc
operator|->
name|max_key_code
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|uint
name|mask
init|=
name|xkbDesc
operator|->
name|map
operator|->
name|modmap
condition|?
name|xkbDesc
operator|->
name|map
operator|->
name|modmap
index|[
name|i
index|]
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|mask
operator|==
literal|0
condition|)
block|{
comment|// key is not bound to a modifier
continue|continue;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|XkbKeyGroupsWidth
argument_list|(
name|xkbDesc
argument_list|,
name|i
argument_list|)
condition|;
operator|++
name|j
control|)
block|{
name|KeySym
name|keySym
init|=
name|XkbKeySym
argument_list|(
name|xkbDesc
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|keySym
operator|==
name|NoSymbol
condition|)
continue|continue;
name|SETMASK
argument_list|(
name|keySym
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
block|}
name|XkbFreeKeyboard
argument_list|(
name|xkbDesc
argument_list|,
name|XkbAllComponentsMask
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
comment|// QT_NO_XKB
block|{
name|coreDesc
operator|.
name|lock_meaning
operator|=
name|NoSymbol
expr_stmt|;
name|XModifierKeymap
modifier|*
name|map
init|=
name|XGetModifierMapping
argument_list|(
name|X11
operator|->
name|display
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
condition|)
block|{
name|int
name|i
decl_stmt|,
name|maskIndex
init|=
literal|0
decl_stmt|,
name|mapIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|maskIndex
operator|=
literal|0
init|;
name|maskIndex
operator|<
literal|8
condition|;
name|maskIndex
operator|++
control|)
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|map
operator|->
name|max_keypermod
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|map
operator|->
name|modifiermap
index|[
name|mapIndex
index|]
condition|)
block|{
name|KeySym
name|sym
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
do|do
block|{
name|sym
operator|=
name|XKeycodeToKeysym
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|map
operator|->
name|modifiermap
index|[
name|mapIndex
index|]
argument_list|,
name|x
operator|++
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|sym
operator|==
name|NoSymbol
operator|&&
name|x
operator|<
name|coreDesc
operator|.
name|keysyms_per_keycode
condition|)
do|;
specifier|const
name|uchar
name|mask
init|=
literal|1
operator|<<
name|maskIndex
decl_stmt|;
name|SETMASK
argument_list|(
name|sym
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
name|mapIndex
operator|++
expr_stmt|;
block|}
block|}
comment|// determine the meaning of the Lock modifier
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|map
operator|->
name|max_keypermod
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|coreDesc
operator|.
name|keysyms_per_keycode
condition|;
operator|++
name|x
control|)
block|{
name|KeySym
name|sym
init|=
name|XKeycodeToKeysym
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|map
operator|->
name|modifiermap
index|[
name|LockMapIndex
index|]
argument_list|,
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|sym
operator|==
name|XK_Caps_Lock
operator|||
name|sym
operator|==
name|XK_ISO_Lock
condition|)
block|{
name|coreDesc
operator|.
name|lock_meaning
operator|=
name|XK_Caps_Lock
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|sym
operator|==
name|XK_Shift_Lock
condition|)
block|{
name|coreDesc
operator|.
name|lock_meaning
operator|=
name|XK_Shift_Lock
expr_stmt|;
block|}
block|}
block|}
name|XFreeModifiermap
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|// for qt_XTranslateKey()
name|coreDesc
operator|.
name|num_lock
operator|=
name|qt_num_lock_mask
expr_stmt|;
name|coreDesc
operator|.
name|mode_switch
operator|=
name|qt_mode_switch_mask
expr_stmt|;
if|#
directive|if
literal|0
block|qDebug()<< "lock_meaning ="<< coreDesc.lock_meaning;             qDebug()<< "num_lock ="<< coreDesc.num_lock;             qDebug()<< "mode_switch ="<< coreDesc.mode_switch;
endif|#
directive|endif
block|}
comment|// set default modifier masks if needed
if|if
condition|(
name|qt_alt_mask
operator|==
literal|0
condition|)
name|qt_alt_mask
operator|=
name|Mod1Mask
expr_stmt|;
if|if
condition|(
name|qt_meta_mask
operator|==
literal|0
condition|)
name|qt_meta_mask
operator|=
name|Mod4Mask
expr_stmt|;
comment|// if we don't have a meta key (or it's hidden behind alt), use super or hyper to generate
comment|// Qt::Key_Meta and Qt::MetaModifier, since most newer XFree86/Xorg installations map the Windows
comment|// key to Super
if|if
condition|(
name|qt_meta_mask
operator|==
literal|0
operator|||
name|qt_meta_mask
operator|==
name|qt_alt_mask
condition|)
block|{
comment|// no meta keys... s,meta,super,
name|qt_meta_mask
operator|=
name|qt_super_mask
expr_stmt|;
if|if
condition|(
name|qt_meta_mask
operator|==
literal|0
operator|||
name|qt_meta_mask
operator|==
name|qt_alt_mask
condition|)
block|{
comment|// no super keys either? guess we'll use hyper then
name|qt_meta_mask
operator|=
name|qt_hyper_mask
expr_stmt|;
block|}
block|}
if|#
directive|if
literal|0
block|qDebug()<< "qt_alt_mask ="<< hex<< qt_alt_mask;     qDebug()<< "qt_meta_mask ="<< hex<< qt_meta_mask;     qDebug()<< "qt_super_mask ="<< hex<< qt_super_mask;     qDebug()<< "qt_hyper_mask ="<< hex<< qt_hyper_mask;     qDebug()<< "qt_mode_switch_mask ="<< hex<< qt_mode_switch_mask;     qDebug()<< "qt_num_lock_mask ="<< hex<< qt_num_lock_mask;
endif|#
directive|endif
block|}
end_function
begin_decl_stmt
specifier|extern
name|bool
name|qt_sm_blockUserInput
decl_stmt|;
end_decl_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// Keyboard event translation
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|XK_ISO_Left_Tab
end_ifndef
begin_define
DECL|macro|XK_ISO_Left_Tab
define|#
directive|define
name|XK_ISO_Left_Tab
value|0xFE20
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_dead_hook
end_ifndef
begin_define
DECL|macro|XK_dead_hook
define|#
directive|define
name|XK_dead_hook
value|0xFE61
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_dead_horn
end_ifndef
begin_define
DECL|macro|XK_dead_horn
define|#
directive|define
name|XK_dead_horn
value|0xFE62
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_Codeinput
end_ifndef
begin_define
DECL|macro|XK_Codeinput
define|#
directive|define
name|XK_Codeinput
value|0xFF37
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_Kanji_Bangou
end_ifndef
begin_define
DECL|macro|XK_Kanji_Bangou
define|#
directive|define
name|XK_Kanji_Bangou
value|0xFF37
end_define
begin_comment
DECL|macro|XK_Kanji_Bangou
comment|/* same as codeinput */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Fix old X libraries
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Home
end_ifndef
begin_define
DECL|macro|XK_KP_Home
define|#
directive|define
name|XK_KP_Home
value|0xFF95
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Left
end_ifndef
begin_define
DECL|macro|XK_KP_Left
define|#
directive|define
name|XK_KP_Left
value|0xFF96
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Up
end_ifndef
begin_define
DECL|macro|XK_KP_Up
define|#
directive|define
name|XK_KP_Up
value|0xFF97
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Right
end_ifndef
begin_define
DECL|macro|XK_KP_Right
define|#
directive|define
name|XK_KP_Right
value|0xFF98
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Down
end_ifndef
begin_define
DECL|macro|XK_KP_Down
define|#
directive|define
name|XK_KP_Down
value|0xFF99
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Prior
end_ifndef
begin_define
DECL|macro|XK_KP_Prior
define|#
directive|define
name|XK_KP_Prior
value|0xFF9A
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Next
end_ifndef
begin_define
DECL|macro|XK_KP_Next
define|#
directive|define
name|XK_KP_Next
value|0xFF9B
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_End
end_ifndef
begin_define
DECL|macro|XK_KP_End
define|#
directive|define
name|XK_KP_End
value|0xFF9C
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Insert
end_ifndef
begin_define
DECL|macro|XK_KP_Insert
define|#
directive|define
name|XK_KP_Insert
value|0xFF9E
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Delete
end_ifndef
begin_define
DECL|macro|XK_KP_Delete
define|#
directive|define
name|XK_KP_Delete
value|0xFF9F
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// the next lines are taken on 10/2009 from X.org (X11/XF86keysym.h), defining some special
end_comment
begin_comment
comment|// multimedia keys. They are included here as not every system has them.
end_comment
begin_define
DECL|macro|XF86XK_MonBrightnessUp
define|#
directive|define
name|XF86XK_MonBrightnessUp
value|0x1008FF02
end_define
begin_define
DECL|macro|XF86XK_MonBrightnessDown
define|#
directive|define
name|XF86XK_MonBrightnessDown
value|0x1008FF03
end_define
begin_define
DECL|macro|XF86XK_KbdLightOnOff
define|#
directive|define
name|XF86XK_KbdLightOnOff
value|0x1008FF04
end_define
begin_define
DECL|macro|XF86XK_KbdBrightnessUp
define|#
directive|define
name|XF86XK_KbdBrightnessUp
value|0x1008FF05
end_define
begin_define
DECL|macro|XF86XK_KbdBrightnessDown
define|#
directive|define
name|XF86XK_KbdBrightnessDown
value|0x1008FF06
end_define
begin_define
DECL|macro|XF86XK_Standby
define|#
directive|define
name|XF86XK_Standby
value|0x1008FF10
end_define
begin_define
DECL|macro|XF86XK_AudioLowerVolume
define|#
directive|define
name|XF86XK_AudioLowerVolume
value|0x1008FF11
end_define
begin_define
DECL|macro|XF86XK_AudioMute
define|#
directive|define
name|XF86XK_AudioMute
value|0x1008FF12
end_define
begin_define
DECL|macro|XF86XK_AudioRaiseVolume
define|#
directive|define
name|XF86XK_AudioRaiseVolume
value|0x1008FF13
end_define
begin_define
DECL|macro|XF86XK_AudioPlay
define|#
directive|define
name|XF86XK_AudioPlay
value|0x1008FF14
end_define
begin_define
DECL|macro|XF86XK_AudioStop
define|#
directive|define
name|XF86XK_AudioStop
value|0x1008FF15
end_define
begin_define
DECL|macro|XF86XK_AudioPrev
define|#
directive|define
name|XF86XK_AudioPrev
value|0x1008FF16
end_define
begin_define
DECL|macro|XF86XK_AudioNext
define|#
directive|define
name|XF86XK_AudioNext
value|0x1008FF17
end_define
begin_define
DECL|macro|XF86XK_HomePage
define|#
directive|define
name|XF86XK_HomePage
value|0x1008FF18
end_define
begin_define
DECL|macro|XF86XK_Mail
define|#
directive|define
name|XF86XK_Mail
value|0x1008FF19
end_define
begin_define
DECL|macro|XF86XK_Start
define|#
directive|define
name|XF86XK_Start
value|0x1008FF1A
end_define
begin_define
DECL|macro|XF86XK_Search
define|#
directive|define
name|XF86XK_Search
value|0x1008FF1B
end_define
begin_define
DECL|macro|XF86XK_AudioRecord
define|#
directive|define
name|XF86XK_AudioRecord
value|0x1008FF1C
end_define
begin_define
DECL|macro|XF86XK_Calculator
define|#
directive|define
name|XF86XK_Calculator
value|0x1008FF1D
end_define
begin_define
DECL|macro|XF86XK_Memo
define|#
directive|define
name|XF86XK_Memo
value|0x1008FF1E
end_define
begin_define
DECL|macro|XF86XK_ToDoList
define|#
directive|define
name|XF86XK_ToDoList
value|0x1008FF1F
end_define
begin_define
DECL|macro|XF86XK_Calendar
define|#
directive|define
name|XF86XK_Calendar
value|0x1008FF20
end_define
begin_define
DECL|macro|XF86XK_PowerDown
define|#
directive|define
name|XF86XK_PowerDown
value|0x1008FF21
end_define
begin_define
DECL|macro|XF86XK_ContrastAdjust
define|#
directive|define
name|XF86XK_ContrastAdjust
value|0x1008FF22
end_define
begin_define
DECL|macro|XF86XK_Back
define|#
directive|define
name|XF86XK_Back
value|0x1008FF26
end_define
begin_define
DECL|macro|XF86XK_Forward
define|#
directive|define
name|XF86XK_Forward
value|0x1008FF27
end_define
begin_define
DECL|macro|XF86XK_Stop
define|#
directive|define
name|XF86XK_Stop
value|0x1008FF28
end_define
begin_define
DECL|macro|XF86XK_Refresh
define|#
directive|define
name|XF86XK_Refresh
value|0x1008FF29
end_define
begin_define
DECL|macro|XF86XK_PowerOff
define|#
directive|define
name|XF86XK_PowerOff
value|0x1008FF2A
end_define
begin_define
DECL|macro|XF86XK_WakeUp
define|#
directive|define
name|XF86XK_WakeUp
value|0x1008FF2B
end_define
begin_define
DECL|macro|XF86XK_Eject
define|#
directive|define
name|XF86XK_Eject
value|0x1008FF2C
end_define
begin_define
DECL|macro|XF86XK_ScreenSaver
define|#
directive|define
name|XF86XK_ScreenSaver
value|0x1008FF2D
end_define
begin_define
DECL|macro|XF86XK_WWW
define|#
directive|define
name|XF86XK_WWW
value|0x1008FF2E
end_define
begin_define
DECL|macro|XF86XK_Sleep
define|#
directive|define
name|XF86XK_Sleep
value|0x1008FF2F
end_define
begin_define
DECL|macro|XF86XK_Favorites
define|#
directive|define
name|XF86XK_Favorites
value|0x1008FF30
end_define
begin_define
DECL|macro|XF86XK_AudioPause
define|#
directive|define
name|XF86XK_AudioPause
value|0x1008FF31
end_define
begin_define
DECL|macro|XF86XK_AudioMedia
define|#
directive|define
name|XF86XK_AudioMedia
value|0x1008FF32
end_define
begin_define
DECL|macro|XF86XK_MyComputer
define|#
directive|define
name|XF86XK_MyComputer
value|0x1008FF33
end_define
begin_define
DECL|macro|XF86XK_LightBulb
define|#
directive|define
name|XF86XK_LightBulb
value|0x1008FF35
end_define
begin_define
DECL|macro|XF86XK_Shop
define|#
directive|define
name|XF86XK_Shop
value|0x1008FF36
end_define
begin_define
DECL|macro|XF86XK_History
define|#
directive|define
name|XF86XK_History
value|0x1008FF37
end_define
begin_define
DECL|macro|XF86XK_OpenURL
define|#
directive|define
name|XF86XK_OpenURL
value|0x1008FF38
end_define
begin_define
DECL|macro|XF86XK_AddFavorite
define|#
directive|define
name|XF86XK_AddFavorite
value|0x1008FF39
end_define
begin_define
DECL|macro|XF86XK_HotLinks
define|#
directive|define
name|XF86XK_HotLinks
value|0x1008FF3A
end_define
begin_define
DECL|macro|XF86XK_BrightnessAdjust
define|#
directive|define
name|XF86XK_BrightnessAdjust
value|0x1008FF3B
end_define
begin_define
DECL|macro|XF86XK_Finance
define|#
directive|define
name|XF86XK_Finance
value|0x1008FF3C
end_define
begin_define
DECL|macro|XF86XK_Community
define|#
directive|define
name|XF86XK_Community
value|0x1008FF3D
end_define
begin_define
DECL|macro|XF86XK_AudioRewind
define|#
directive|define
name|XF86XK_AudioRewind
value|0x1008FF3E
end_define
begin_define
DECL|macro|XF86XK_BackForward
define|#
directive|define
name|XF86XK_BackForward
value|0x1008FF3F
end_define
begin_define
DECL|macro|XF86XK_Launch0
define|#
directive|define
name|XF86XK_Launch0
value|0x1008FF40
end_define
begin_define
DECL|macro|XF86XK_Launch1
define|#
directive|define
name|XF86XK_Launch1
value|0x1008FF41
end_define
begin_define
DECL|macro|XF86XK_Launch2
define|#
directive|define
name|XF86XK_Launch2
value|0x1008FF42
end_define
begin_define
DECL|macro|XF86XK_Launch3
define|#
directive|define
name|XF86XK_Launch3
value|0x1008FF43
end_define
begin_define
DECL|macro|XF86XK_Launch4
define|#
directive|define
name|XF86XK_Launch4
value|0x1008FF44
end_define
begin_define
DECL|macro|XF86XK_Launch5
define|#
directive|define
name|XF86XK_Launch5
value|0x1008FF45
end_define
begin_define
DECL|macro|XF86XK_Launch6
define|#
directive|define
name|XF86XK_Launch6
value|0x1008FF46
end_define
begin_define
DECL|macro|XF86XK_Launch7
define|#
directive|define
name|XF86XK_Launch7
value|0x1008FF47
end_define
begin_define
DECL|macro|XF86XK_Launch8
define|#
directive|define
name|XF86XK_Launch8
value|0x1008FF48
end_define
begin_define
DECL|macro|XF86XK_Launch9
define|#
directive|define
name|XF86XK_Launch9
value|0x1008FF49
end_define
begin_define
DECL|macro|XF86XK_LaunchA
define|#
directive|define
name|XF86XK_LaunchA
value|0x1008FF4A
end_define
begin_define
DECL|macro|XF86XK_LaunchB
define|#
directive|define
name|XF86XK_LaunchB
value|0x1008FF4B
end_define
begin_define
DECL|macro|XF86XK_LaunchC
define|#
directive|define
name|XF86XK_LaunchC
value|0x1008FF4C
end_define
begin_define
DECL|macro|XF86XK_LaunchD
define|#
directive|define
name|XF86XK_LaunchD
value|0x1008FF4D
end_define
begin_define
DECL|macro|XF86XK_LaunchE
define|#
directive|define
name|XF86XK_LaunchE
value|0x1008FF4E
end_define
begin_define
DECL|macro|XF86XK_LaunchF
define|#
directive|define
name|XF86XK_LaunchF
value|0x1008FF4F
end_define
begin_define
DECL|macro|XF86XK_ApplicationLeft
define|#
directive|define
name|XF86XK_ApplicationLeft
value|0x1008FF50
end_define
begin_define
DECL|macro|XF86XK_ApplicationRight
define|#
directive|define
name|XF86XK_ApplicationRight
value|0x1008FF51
end_define
begin_define
DECL|macro|XF86XK_Book
define|#
directive|define
name|XF86XK_Book
value|0x1008FF52
end_define
begin_define
DECL|macro|XF86XK_CD
define|#
directive|define
name|XF86XK_CD
value|0x1008FF53
end_define
begin_define
DECL|macro|XF86XK_Calculater
define|#
directive|define
name|XF86XK_Calculater
value|0x1008FF54
end_define
begin_define
DECL|macro|XF86XK_Clear
define|#
directive|define
name|XF86XK_Clear
value|0x1008FF55
end_define
begin_define
DECL|macro|XF86XK_ClearGrab
define|#
directive|define
name|XF86XK_ClearGrab
value|0x1008FE21
end_define
begin_define
DECL|macro|XF86XK_Close
define|#
directive|define
name|XF86XK_Close
value|0x1008FF56
end_define
begin_define
DECL|macro|XF86XK_Copy
define|#
directive|define
name|XF86XK_Copy
value|0x1008FF57
end_define
begin_define
DECL|macro|XF86XK_Cut
define|#
directive|define
name|XF86XK_Cut
value|0x1008FF58
end_define
begin_define
DECL|macro|XF86XK_Display
define|#
directive|define
name|XF86XK_Display
value|0x1008FF59
end_define
begin_define
DECL|macro|XF86XK_DOS
define|#
directive|define
name|XF86XK_DOS
value|0x1008FF5A
end_define
begin_define
DECL|macro|XF86XK_Documents
define|#
directive|define
name|XF86XK_Documents
value|0x1008FF5B
end_define
begin_define
DECL|macro|XF86XK_Excel
define|#
directive|define
name|XF86XK_Excel
value|0x1008FF5C
end_define
begin_define
DECL|macro|XF86XK_Explorer
define|#
directive|define
name|XF86XK_Explorer
value|0x1008FF5D
end_define
begin_define
DECL|macro|XF86XK_Game
define|#
directive|define
name|XF86XK_Game
value|0x1008FF5E
end_define
begin_define
DECL|macro|XF86XK_Go
define|#
directive|define
name|XF86XK_Go
value|0x1008FF5F
end_define
begin_define
DECL|macro|XF86XK_iTouch
define|#
directive|define
name|XF86XK_iTouch
value|0x1008FF60
end_define
begin_define
DECL|macro|XF86XK_LogOff
define|#
directive|define
name|XF86XK_LogOff
value|0x1008FF61
end_define
begin_define
DECL|macro|XF86XK_Market
define|#
directive|define
name|XF86XK_Market
value|0x1008FF62
end_define
begin_define
DECL|macro|XF86XK_Meeting
define|#
directive|define
name|XF86XK_Meeting
value|0x1008FF63
end_define
begin_define
DECL|macro|XF86XK_MenuKB
define|#
directive|define
name|XF86XK_MenuKB
value|0x1008FF65
end_define
begin_define
DECL|macro|XF86XK_MenuPB
define|#
directive|define
name|XF86XK_MenuPB
value|0x1008FF66
end_define
begin_define
DECL|macro|XF86XK_MySites
define|#
directive|define
name|XF86XK_MySites
value|0x1008FF67
end_define
begin_define
DECL|macro|XF86XK_News
define|#
directive|define
name|XF86XK_News
value|0x1008FF69
end_define
begin_define
DECL|macro|XF86XK_OfficeHome
define|#
directive|define
name|XF86XK_OfficeHome
value|0x1008FF6A
end_define
begin_define
DECL|macro|XF86XK_Option
define|#
directive|define
name|XF86XK_Option
value|0x1008FF6C
end_define
begin_define
DECL|macro|XF86XK_Paste
define|#
directive|define
name|XF86XK_Paste
value|0x1008FF6D
end_define
begin_define
DECL|macro|XF86XK_Phone
define|#
directive|define
name|XF86XK_Phone
value|0x1008FF6E
end_define
begin_define
DECL|macro|XF86XK_Reply
define|#
directive|define
name|XF86XK_Reply
value|0x1008FF72
end_define
begin_define
DECL|macro|XF86XK_Reload
define|#
directive|define
name|XF86XK_Reload
value|0x1008FF73
end_define
begin_define
DECL|macro|XF86XK_RotateWindows
define|#
directive|define
name|XF86XK_RotateWindows
value|0x1008FF74
end_define
begin_define
DECL|macro|XF86XK_RotationPB
define|#
directive|define
name|XF86XK_RotationPB
value|0x1008FF75
end_define
begin_define
DECL|macro|XF86XK_RotationKB
define|#
directive|define
name|XF86XK_RotationKB
value|0x1008FF76
end_define
begin_define
DECL|macro|XF86XK_Save
define|#
directive|define
name|XF86XK_Save
value|0x1008FF77
end_define
begin_define
DECL|macro|XF86XK_Send
define|#
directive|define
name|XF86XK_Send
value|0x1008FF7B
end_define
begin_define
DECL|macro|XF86XK_Spell
define|#
directive|define
name|XF86XK_Spell
value|0x1008FF7C
end_define
begin_define
DECL|macro|XF86XK_SplitScreen
define|#
directive|define
name|XF86XK_SplitScreen
value|0x1008FF7D
end_define
begin_define
DECL|macro|XF86XK_Support
define|#
directive|define
name|XF86XK_Support
value|0x1008FF7E
end_define
begin_define
DECL|macro|XF86XK_TaskPane
define|#
directive|define
name|XF86XK_TaskPane
value|0x1008FF7F
end_define
begin_define
DECL|macro|XF86XK_Terminal
define|#
directive|define
name|XF86XK_Terminal
value|0x1008FF80
end_define
begin_define
DECL|macro|XF86XK_Tools
define|#
directive|define
name|XF86XK_Tools
value|0x1008FF81
end_define
begin_define
DECL|macro|XF86XK_Travel
define|#
directive|define
name|XF86XK_Travel
value|0x1008FF82
end_define
begin_define
DECL|macro|XF86XK_Video
define|#
directive|define
name|XF86XK_Video
value|0x1008FF87
end_define
begin_define
DECL|macro|XF86XK_Word
define|#
directive|define
name|XF86XK_Word
value|0x1008FF89
end_define
begin_define
DECL|macro|XF86XK_Xfer
define|#
directive|define
name|XF86XK_Xfer
value|0x1008FF8A
end_define
begin_define
DECL|macro|XF86XK_ZoomIn
define|#
directive|define
name|XF86XK_ZoomIn
value|0x1008FF8B
end_define
begin_define
DECL|macro|XF86XK_ZoomOut
define|#
directive|define
name|XF86XK_ZoomOut
value|0x1008FF8C
end_define
begin_define
DECL|macro|XF86XK_Away
define|#
directive|define
name|XF86XK_Away
value|0x1008FF8D
end_define
begin_define
DECL|macro|XF86XK_Messenger
define|#
directive|define
name|XF86XK_Messenger
value|0x1008FF8E
end_define
begin_define
DECL|macro|XF86XK_WebCam
define|#
directive|define
name|XF86XK_WebCam
value|0x1008FF8F
end_define
begin_define
DECL|macro|XF86XK_MailForward
define|#
directive|define
name|XF86XK_MailForward
value|0x1008FF90
end_define
begin_define
DECL|macro|XF86XK_Pictures
define|#
directive|define
name|XF86XK_Pictures
value|0x1008FF91
end_define
begin_define
DECL|macro|XF86XK_Music
define|#
directive|define
name|XF86XK_Music
value|0x1008FF92
end_define
begin_define
DECL|macro|XF86XK_Battery
define|#
directive|define
name|XF86XK_Battery
value|0x1008FF93
end_define
begin_define
DECL|macro|XF86XK_Bluetooth
define|#
directive|define
name|XF86XK_Bluetooth
value|0x1008FF94
end_define
begin_define
DECL|macro|XF86XK_WLAN
define|#
directive|define
name|XF86XK_WLAN
value|0x1008FF95
end_define
begin_define
DECL|macro|XF86XK_UWB
define|#
directive|define
name|XF86XK_UWB
value|0x1008FF96
end_define
begin_define
DECL|macro|XF86XK_AudioForward
define|#
directive|define
name|XF86XK_AudioForward
value|0x1008FF97
end_define
begin_define
DECL|macro|XF86XK_AudioRepeat
define|#
directive|define
name|XF86XK_AudioRepeat
value|0x1008FF98
end_define
begin_define
DECL|macro|XF86XK_AudioRandomPlay
define|#
directive|define
name|XF86XK_AudioRandomPlay
value|0x1008FF99
end_define
begin_define
DECL|macro|XF86XK_Subtitle
define|#
directive|define
name|XF86XK_Subtitle
value|0x1008FF9A
end_define
begin_define
DECL|macro|XF86XK_AudioCycleTrack
define|#
directive|define
name|XF86XK_AudioCycleTrack
value|0x1008FF9B
end_define
begin_define
DECL|macro|XF86XK_Time
define|#
directive|define
name|XF86XK_Time
value|0x1008FF9F
end_define
begin_define
DECL|macro|XF86XK_Select
define|#
directive|define
name|XF86XK_Select
value|0x1008FFA0
end_define
begin_define
DECL|macro|XF86XK_View
define|#
directive|define
name|XF86XK_View
value|0x1008FFA1
end_define
begin_define
DECL|macro|XF86XK_TopMenu
define|#
directive|define
name|XF86XK_TopMenu
value|0x1008FFA2
end_define
begin_define
DECL|macro|XF86XK_Suspend
define|#
directive|define
name|XF86XK_Suspend
value|0x1008FFA7
end_define
begin_define
DECL|macro|XF86XK_Hibernate
define|#
directive|define
name|XF86XK_Hibernate
value|0x1008FFA8
end_define
begin_comment
comment|// end of XF86keysyms.h
end_comment
begin_comment
comment|// Special keys used by Qtopia, mapped into the X11 private keypad range.
end_comment
begin_define
DECL|macro|QTOPIAXK_Select
define|#
directive|define
name|QTOPIAXK_Select
value|0x11000601
end_define
begin_define
DECL|macro|QTOPIAXK_Yes
define|#
directive|define
name|QTOPIAXK_Yes
value|0x11000602
end_define
begin_define
DECL|macro|QTOPIAXK_No
define|#
directive|define
name|QTOPIAXK_No
value|0x11000603
end_define
begin_define
DECL|macro|QTOPIAXK_Cancel
define|#
directive|define
name|QTOPIAXK_Cancel
value|0x11000604
end_define
begin_define
DECL|macro|QTOPIAXK_Printer
define|#
directive|define
name|QTOPIAXK_Printer
value|0x11000605
end_define
begin_define
DECL|macro|QTOPIAXK_Execute
define|#
directive|define
name|QTOPIAXK_Execute
value|0x11000606
end_define
begin_define
DECL|macro|QTOPIAXK_Sleep
define|#
directive|define
name|QTOPIAXK_Sleep
value|0x11000607
end_define
begin_define
DECL|macro|QTOPIAXK_Play
define|#
directive|define
name|QTOPIAXK_Play
value|0x11000608
end_define
begin_define
DECL|macro|QTOPIAXK_Zoom
define|#
directive|define
name|QTOPIAXK_Zoom
value|0x11000609
end_define
begin_define
DECL|macro|QTOPIAXK_Context1
define|#
directive|define
name|QTOPIAXK_Context1
value|0x1100060A
end_define
begin_define
DECL|macro|QTOPIAXK_Context2
define|#
directive|define
name|QTOPIAXK_Context2
value|0x1100060B
end_define
begin_define
DECL|macro|QTOPIAXK_Context3
define|#
directive|define
name|QTOPIAXK_Context3
value|0x1100060C
end_define
begin_define
DECL|macro|QTOPIAXK_Context4
define|#
directive|define
name|QTOPIAXK_Context4
value|0x1100060D
end_define
begin_define
DECL|macro|QTOPIAXK_Call
define|#
directive|define
name|QTOPIAXK_Call
value|0x1100060E
end_define
begin_define
DECL|macro|QTOPIAXK_Hangup
define|#
directive|define
name|QTOPIAXK_Hangup
value|0x1100060F
end_define
begin_define
DECL|macro|QTOPIAXK_Flip
define|#
directive|define
name|QTOPIAXK_Flip
value|0x11000610
end_define
begin_comment
comment|// keyboard mapping table
end_comment
begin_decl_stmt
DECL|variable|KeyTbl
specifier|static
specifier|const
name|unsigned
name|int
name|KeyTbl
index|[]
init|=
block|{
comment|// misc keys
name|XK_Escape
block|,
name|Qt
operator|::
name|Key_Escape
block|,
name|XK_Tab
block|,
name|Qt
operator|::
name|Key_Tab
block|,
name|XK_ISO_Left_Tab
block|,
name|Qt
operator|::
name|Key_Backtab
block|,
name|XK_BackSpace
block|,
name|Qt
operator|::
name|Key_Backspace
block|,
name|XK_Return
block|,
name|Qt
operator|::
name|Key_Return
block|,
name|XK_Insert
block|,
name|Qt
operator|::
name|Key_Insert
block|,
name|XK_Delete
block|,
name|Qt
operator|::
name|Key_Delete
block|,
name|XK_Clear
block|,
name|Qt
operator|::
name|Key_Delete
block|,
name|XK_Pause
block|,
name|Qt
operator|::
name|Key_Pause
block|,
name|XK_Print
block|,
name|Qt
operator|::
name|Key_Print
block|,
literal|0x1005FF60
block|,
name|Qt
operator|::
name|Key_SysReq
block|,
comment|// hardcoded Sun SysReq
literal|0x1007ff00
block|,
name|Qt
operator|::
name|Key_SysReq
block|,
comment|// hardcoded X386 SysReq
comment|// cursor movement
name|XK_Home
block|,
name|Qt
operator|::
name|Key_Home
block|,
name|XK_End
block|,
name|Qt
operator|::
name|Key_End
block|,
name|XK_Left
block|,
name|Qt
operator|::
name|Key_Left
block|,
name|XK_Up
block|,
name|Qt
operator|::
name|Key_Up
block|,
name|XK_Right
block|,
name|Qt
operator|::
name|Key_Right
block|,
name|XK_Down
block|,
name|Qt
operator|::
name|Key_Down
block|,
name|XK_Prior
block|,
name|Qt
operator|::
name|Key_PageUp
block|,
name|XK_Next
block|,
name|Qt
operator|::
name|Key_PageDown
block|,
comment|// modifiers
name|XK_Shift_L
block|,
name|Qt
operator|::
name|Key_Shift
block|,
name|XK_Shift_R
block|,
name|Qt
operator|::
name|Key_Shift
block|,
name|XK_Shift_Lock
block|,
name|Qt
operator|::
name|Key_Shift
block|,
name|XK_Control_L
block|,
name|Qt
operator|::
name|Key_Control
block|,
name|XK_Control_R
block|,
name|Qt
operator|::
name|Key_Control
block|,
name|XK_Meta_L
block|,
name|Qt
operator|::
name|Key_Meta
block|,
name|XK_Meta_R
block|,
name|Qt
operator|::
name|Key_Meta
block|,
name|XK_Alt_L
block|,
name|Qt
operator|::
name|Key_Alt
block|,
name|XK_Alt_R
block|,
name|Qt
operator|::
name|Key_Alt
block|,
name|XK_Caps_Lock
block|,
name|Qt
operator|::
name|Key_CapsLock
block|,
name|XK_Num_Lock
block|,
name|Qt
operator|::
name|Key_NumLock
block|,
name|XK_Scroll_Lock
block|,
name|Qt
operator|::
name|Key_ScrollLock
block|,
name|XK_Super_L
block|,
name|Qt
operator|::
name|Key_Super_L
block|,
name|XK_Super_R
block|,
name|Qt
operator|::
name|Key_Super_R
block|,
name|XK_Menu
block|,
name|Qt
operator|::
name|Key_Menu
block|,
name|XK_Hyper_L
block|,
name|Qt
operator|::
name|Key_Hyper_L
block|,
name|XK_Hyper_R
block|,
name|Qt
operator|::
name|Key_Hyper_R
block|,
name|XK_Help
block|,
name|Qt
operator|::
name|Key_Help
block|,
literal|0x1000FF74
block|,
name|Qt
operator|::
name|Key_Backtab
block|,
comment|// hardcoded HP backtab
literal|0x1005FF10
block|,
name|Qt
operator|::
name|Key_F11
block|,
comment|// hardcoded Sun F36 (labeled F11)
literal|0x1005FF11
block|,
name|Qt
operator|::
name|Key_F12
block|,
comment|// hardcoded Sun F37 (labeled F12)
comment|// numeric and function keypad keys
name|XK_KP_Space
block|,
name|Qt
operator|::
name|Key_Space
block|,
name|XK_KP_Tab
block|,
name|Qt
operator|::
name|Key_Tab
block|,
name|XK_KP_Enter
block|,
name|Qt
operator|::
name|Key_Enter
block|,
comment|//XK_KP_F1,                 Qt::Key_F1,
comment|//XK_KP_F2,                 Qt::Key_F2,
comment|//XK_KP_F3,                 Qt::Key_F3,
comment|//XK_KP_F4,                 Qt::Key_F4,
name|XK_KP_Home
block|,
name|Qt
operator|::
name|Key_Home
block|,
name|XK_KP_Left
block|,
name|Qt
operator|::
name|Key_Left
block|,
name|XK_KP_Up
block|,
name|Qt
operator|::
name|Key_Up
block|,
name|XK_KP_Right
block|,
name|Qt
operator|::
name|Key_Right
block|,
name|XK_KP_Down
block|,
name|Qt
operator|::
name|Key_Down
block|,
name|XK_KP_Prior
block|,
name|Qt
operator|::
name|Key_PageUp
block|,
name|XK_KP_Next
block|,
name|Qt
operator|::
name|Key_PageDown
block|,
name|XK_KP_End
block|,
name|Qt
operator|::
name|Key_End
block|,
name|XK_KP_Begin
block|,
name|Qt
operator|::
name|Key_Clear
block|,
name|XK_KP_Insert
block|,
name|Qt
operator|::
name|Key_Insert
block|,
name|XK_KP_Delete
block|,
name|Qt
operator|::
name|Key_Delete
block|,
name|XK_KP_Equal
block|,
name|Qt
operator|::
name|Key_Equal
block|,
name|XK_KP_Multiply
block|,
name|Qt
operator|::
name|Key_Asterisk
block|,
name|XK_KP_Add
block|,
name|Qt
operator|::
name|Key_Plus
block|,
name|XK_KP_Separator
block|,
name|Qt
operator|::
name|Key_Comma
block|,
name|XK_KP_Subtract
block|,
name|Qt
operator|::
name|Key_Minus
block|,
name|XK_KP_Decimal
block|,
name|Qt
operator|::
name|Key_Period
block|,
name|XK_KP_Divide
block|,
name|Qt
operator|::
name|Key_Slash
block|,
comment|// International input method support keys
comment|// International& multi-key character composition
name|XK_ISO_Level3_Shift
block|,
name|Qt
operator|::
name|Key_AltGr
block|,
name|XK_Multi_key
block|,
name|Qt
operator|::
name|Key_Multi_key
block|,
name|XK_Codeinput
block|,
name|Qt
operator|::
name|Key_Codeinput
block|,
name|XK_SingleCandidate
block|,
name|Qt
operator|::
name|Key_SingleCandidate
block|,
name|XK_MultipleCandidate
block|,
name|Qt
operator|::
name|Key_MultipleCandidate
block|,
name|XK_PreviousCandidate
block|,
name|Qt
operator|::
name|Key_PreviousCandidate
block|,
comment|// Misc Functions
name|XK_Mode_switch
block|,
name|Qt
operator|::
name|Key_Mode_switch
block|,
name|XK_script_switch
block|,
name|Qt
operator|::
name|Key_Mode_switch
block|,
comment|// Japanese keyboard support
name|XK_Kanji
block|,
name|Qt
operator|::
name|Key_Kanji
block|,
name|XK_Muhenkan
block|,
name|Qt
operator|::
name|Key_Muhenkan
block|,
comment|//XK_Henkan_Mode,		Qt::Key_Henkan_Mode,
name|XK_Henkan_Mode
block|,
name|Qt
operator|::
name|Key_Henkan
block|,
name|XK_Henkan
block|,
name|Qt
operator|::
name|Key_Henkan
block|,
name|XK_Romaji
block|,
name|Qt
operator|::
name|Key_Romaji
block|,
name|XK_Hiragana
block|,
name|Qt
operator|::
name|Key_Hiragana
block|,
name|XK_Katakana
block|,
name|Qt
operator|::
name|Key_Katakana
block|,
name|XK_Hiragana_Katakana
block|,
name|Qt
operator|::
name|Key_Hiragana_Katakana
block|,
name|XK_Zenkaku
block|,
name|Qt
operator|::
name|Key_Zenkaku
block|,
name|XK_Hankaku
block|,
name|Qt
operator|::
name|Key_Hankaku
block|,
name|XK_Zenkaku_Hankaku
block|,
name|Qt
operator|::
name|Key_Zenkaku_Hankaku
block|,
name|XK_Touroku
block|,
name|Qt
operator|::
name|Key_Touroku
block|,
name|XK_Massyo
block|,
name|Qt
operator|::
name|Key_Massyo
block|,
name|XK_Kana_Lock
block|,
name|Qt
operator|::
name|Key_Kana_Lock
block|,
name|XK_Kana_Shift
block|,
name|Qt
operator|::
name|Key_Kana_Shift
block|,
name|XK_Eisu_Shift
block|,
name|Qt
operator|::
name|Key_Eisu_Shift
block|,
name|XK_Eisu_toggle
block|,
name|Qt
operator|::
name|Key_Eisu_toggle
block|,
comment|//XK_Kanji_Bangou,		Qt::Key_Kanji_Bangou,
comment|//XK_Zen_Koho,		Qt::Key_Zen_Koho,
comment|//XK_Mae_Koho,		Qt::Key_Mae_Koho,
name|XK_Kanji_Bangou
block|,
name|Qt
operator|::
name|Key_Codeinput
block|,
name|XK_Zen_Koho
block|,
name|Qt
operator|::
name|Key_MultipleCandidate
block|,
name|XK_Mae_Koho
block|,
name|Qt
operator|::
name|Key_PreviousCandidate
block|,
ifdef|#
directive|ifdef
name|XK_KOREAN
comment|// Korean keyboard support
name|XK_Hangul
block|,
name|Qt
operator|::
name|Key_Hangul
block|,
name|XK_Hangul_Start
block|,
name|Qt
operator|::
name|Key_Hangul_Start
block|,
name|XK_Hangul_End
block|,
name|Qt
operator|::
name|Key_Hangul_End
block|,
name|XK_Hangul_Hanja
block|,
name|Qt
operator|::
name|Key_Hangul_Hanja
block|,
name|XK_Hangul_Jamo
block|,
name|Qt
operator|::
name|Key_Hangul_Jamo
block|,
name|XK_Hangul_Romaja
block|,
name|Qt
operator|::
name|Key_Hangul_Romaja
block|,
comment|//XK_Hangul_Codeinput,	Qt::Key_Hangul_Codeinput,
name|XK_Hangul_Codeinput
block|,
name|Qt
operator|::
name|Key_Codeinput
block|,
name|XK_Hangul_Jeonja
block|,
name|Qt
operator|::
name|Key_Hangul_Jeonja
block|,
name|XK_Hangul_Banja
block|,
name|Qt
operator|::
name|Key_Hangul_Banja
block|,
name|XK_Hangul_PreHanja
block|,
name|Qt
operator|::
name|Key_Hangul_PreHanja
block|,
name|XK_Hangul_PostHanja
block|,
name|Qt
operator|::
name|Key_Hangul_PostHanja
block|,
comment|//XK_Hangul_SingleCandidate,Qt::Key_Hangul_SingleCandidate,
comment|//XK_Hangul_MultipleCandidate,Qt::Key_Hangul_MultipleCandidate,
comment|//XK_Hangul_PreviousCandidate,Qt::Key_Hangul_PreviousCandidate,
name|XK_Hangul_SingleCandidate
block|,
name|Qt
operator|::
name|Key_SingleCandidate
block|,
name|XK_Hangul_MultipleCandidate
block|,
name|Qt
operator|::
name|Key_MultipleCandidate
block|,
name|XK_Hangul_PreviousCandidate
block|,
name|Qt
operator|::
name|Key_PreviousCandidate
block|,
name|XK_Hangul_Special
block|,
name|Qt
operator|::
name|Key_Hangul_Special
block|,
comment|//XK_Hangul_switch,		Qt::Key_Hangul_switch,
name|XK_Hangul_switch
block|,
name|Qt
operator|::
name|Key_Mode_switch
block|,
endif|#
directive|endif
comment|// XK_KOREAN
comment|// dead keys
name|XK_dead_grave
block|,
name|Qt
operator|::
name|Key_Dead_Grave
block|,
name|XK_dead_acute
block|,
name|Qt
operator|::
name|Key_Dead_Acute
block|,
name|XK_dead_circumflex
block|,
name|Qt
operator|::
name|Key_Dead_Circumflex
block|,
name|XK_dead_tilde
block|,
name|Qt
operator|::
name|Key_Dead_Tilde
block|,
name|XK_dead_macron
block|,
name|Qt
operator|::
name|Key_Dead_Macron
block|,
name|XK_dead_breve
block|,
name|Qt
operator|::
name|Key_Dead_Breve
block|,
name|XK_dead_abovedot
block|,
name|Qt
operator|::
name|Key_Dead_Abovedot
block|,
name|XK_dead_diaeresis
block|,
name|Qt
operator|::
name|Key_Dead_Diaeresis
block|,
name|XK_dead_abovering
block|,
name|Qt
operator|::
name|Key_Dead_Abovering
block|,
name|XK_dead_doubleacute
block|,
name|Qt
operator|::
name|Key_Dead_Doubleacute
block|,
name|XK_dead_caron
block|,
name|Qt
operator|::
name|Key_Dead_Caron
block|,
name|XK_dead_cedilla
block|,
name|Qt
operator|::
name|Key_Dead_Cedilla
block|,
name|XK_dead_ogonek
block|,
name|Qt
operator|::
name|Key_Dead_Ogonek
block|,
name|XK_dead_iota
block|,
name|Qt
operator|::
name|Key_Dead_Iota
block|,
name|XK_dead_voiced_sound
block|,
name|Qt
operator|::
name|Key_Dead_Voiced_Sound
block|,
name|XK_dead_semivoiced_sound
block|,
name|Qt
operator|::
name|Key_Dead_Semivoiced_Sound
block|,
name|XK_dead_belowdot
block|,
name|Qt
operator|::
name|Key_Dead_Belowdot
block|,
name|XK_dead_hook
block|,
name|Qt
operator|::
name|Key_Dead_Hook
block|,
name|XK_dead_horn
block|,
name|Qt
operator|::
name|Key_Dead_Horn
block|,
comment|// Special keys from X.org - This include multimedia keys,
comment|// wireless/bluetooth/uwb keys, special launcher keys, etc.
name|XF86XK_Back
block|,
name|Qt
operator|::
name|Key_Back
block|,
name|XF86XK_Forward
block|,
name|Qt
operator|::
name|Key_Forward
block|,
name|XF86XK_Stop
block|,
name|Qt
operator|::
name|Key_Stop
block|,
name|XF86XK_Refresh
block|,
name|Qt
operator|::
name|Key_Refresh
block|,
name|XF86XK_Favorites
block|,
name|Qt
operator|::
name|Key_Favorites
block|,
name|XF86XK_AudioMedia
block|,
name|Qt
operator|::
name|Key_LaunchMedia
block|,
name|XF86XK_OpenURL
block|,
name|Qt
operator|::
name|Key_OpenUrl
block|,
name|XF86XK_HomePage
block|,
name|Qt
operator|::
name|Key_HomePage
block|,
name|XF86XK_Search
block|,
name|Qt
operator|::
name|Key_Search
block|,
name|XF86XK_AudioLowerVolume
block|,
name|Qt
operator|::
name|Key_VolumeDown
block|,
name|XF86XK_AudioMute
block|,
name|Qt
operator|::
name|Key_VolumeMute
block|,
name|XF86XK_AudioRaiseVolume
block|,
name|Qt
operator|::
name|Key_VolumeUp
block|,
name|XF86XK_AudioPlay
block|,
name|Qt
operator|::
name|Key_MediaPlay
block|,
name|XF86XK_AudioStop
block|,
name|Qt
operator|::
name|Key_MediaStop
block|,
name|XF86XK_AudioPrev
block|,
name|Qt
operator|::
name|Key_MediaPrevious
block|,
name|XF86XK_AudioNext
block|,
name|Qt
operator|::
name|Key_MediaNext
block|,
name|XF86XK_AudioRecord
block|,
name|Qt
operator|::
name|Key_MediaRecord
block|,
name|XF86XK_Mail
block|,
name|Qt
operator|::
name|Key_LaunchMail
block|,
name|XF86XK_MyComputer
block|,
name|Qt
operator|::
name|Key_Launch0
block|,
comment|// ### Qt 5: remap properly
name|XF86XK_Calculator
block|,
name|Qt
operator|::
name|Key_Launch1
block|,
name|XF86XK_Memo
block|,
name|Qt
operator|::
name|Key_Memo
block|,
name|XF86XK_ToDoList
block|,
name|Qt
operator|::
name|Key_ToDoList
block|,
name|XF86XK_Calendar
block|,
name|Qt
operator|::
name|Key_Calendar
block|,
name|XF86XK_PowerDown
block|,
name|Qt
operator|::
name|Key_PowerDown
block|,
name|XF86XK_ContrastAdjust
block|,
name|Qt
operator|::
name|Key_ContrastAdjust
block|,
name|XF86XK_Standby
block|,
name|Qt
operator|::
name|Key_Standby
block|,
name|XF86XK_MonBrightnessUp
block|,
name|Qt
operator|::
name|Key_MonBrightnessUp
block|,
name|XF86XK_MonBrightnessDown
block|,
name|Qt
operator|::
name|Key_MonBrightnessDown
block|,
name|XF86XK_KbdLightOnOff
block|,
name|Qt
operator|::
name|Key_KeyboardLightOnOff
block|,
name|XF86XK_KbdBrightnessUp
block|,
name|Qt
operator|::
name|Key_KeyboardBrightnessUp
block|,
name|XF86XK_KbdBrightnessDown
block|,
name|Qt
operator|::
name|Key_KeyboardBrightnessDown
block|,
name|XF86XK_PowerOff
block|,
name|Qt
operator|::
name|Key_PowerOff
block|,
name|XF86XK_WakeUp
block|,
name|Qt
operator|::
name|Key_WakeUp
block|,
name|XF86XK_Eject
block|,
name|Qt
operator|::
name|Key_Eject
block|,
name|XF86XK_ScreenSaver
block|,
name|Qt
operator|::
name|Key_ScreenSaver
block|,
name|XF86XK_WWW
block|,
name|Qt
operator|::
name|Key_WWW
block|,
name|XF86XK_Sleep
block|,
name|Qt
operator|::
name|Key_Sleep
block|,
name|XF86XK_LightBulb
block|,
name|Qt
operator|::
name|Key_LightBulb
block|,
name|XF86XK_Shop
block|,
name|Qt
operator|::
name|Key_Shop
block|,
name|XF86XK_History
block|,
name|Qt
operator|::
name|Key_History
block|,
name|XF86XK_AddFavorite
block|,
name|Qt
operator|::
name|Key_AddFavorite
block|,
name|XF86XK_HotLinks
block|,
name|Qt
operator|::
name|Key_HotLinks
block|,
name|XF86XK_BrightnessAdjust
block|,
name|Qt
operator|::
name|Key_BrightnessAdjust
block|,
name|XF86XK_Finance
block|,
name|Qt
operator|::
name|Key_Finance
block|,
name|XF86XK_Community
block|,
name|Qt
operator|::
name|Key_Community
block|,
name|XF86XK_AudioRewind
block|,
name|Qt
operator|::
name|Key_AudioRewind
block|,
name|XF86XK_BackForward
block|,
name|Qt
operator|::
name|Key_BackForward
block|,
name|XF86XK_ApplicationLeft
block|,
name|Qt
operator|::
name|Key_ApplicationLeft
block|,
name|XF86XK_ApplicationRight
block|,
name|Qt
operator|::
name|Key_ApplicationRight
block|,
name|XF86XK_Book
block|,
name|Qt
operator|::
name|Key_Book
block|,
name|XF86XK_CD
block|,
name|Qt
operator|::
name|Key_CD
block|,
name|XF86XK_Calculater
block|,
name|Qt
operator|::
name|Key_Calculator
block|,
name|XF86XK_Clear
block|,
name|Qt
operator|::
name|Key_Clear
block|,
name|XF86XK_ClearGrab
block|,
name|Qt
operator|::
name|Key_ClearGrab
block|,
name|XF86XK_Close
block|,
name|Qt
operator|::
name|Key_Close
block|,
name|XF86XK_Copy
block|,
name|Qt
operator|::
name|Key_Copy
block|,
name|XF86XK_Cut
block|,
name|Qt
operator|::
name|Key_Cut
block|,
name|XF86XK_Display
block|,
name|Qt
operator|::
name|Key_Display
block|,
name|XF86XK_DOS
block|,
name|Qt
operator|::
name|Key_DOS
block|,
name|XF86XK_Documents
block|,
name|Qt
operator|::
name|Key_Documents
block|,
name|XF86XK_Excel
block|,
name|Qt
operator|::
name|Key_Excel
block|,
name|XF86XK_Explorer
block|,
name|Qt
operator|::
name|Key_Explorer
block|,
name|XF86XK_Game
block|,
name|Qt
operator|::
name|Key_Game
block|,
name|XF86XK_Go
block|,
name|Qt
operator|::
name|Key_Go
block|,
name|XF86XK_iTouch
block|,
name|Qt
operator|::
name|Key_iTouch
block|,
name|XF86XK_LogOff
block|,
name|Qt
operator|::
name|Key_LogOff
block|,
name|XF86XK_Market
block|,
name|Qt
operator|::
name|Key_Market
block|,
name|XF86XK_Meeting
block|,
name|Qt
operator|::
name|Key_Meeting
block|,
name|XF86XK_MenuKB
block|,
name|Qt
operator|::
name|Key_MenuKB
block|,
name|XF86XK_MenuPB
block|,
name|Qt
operator|::
name|Key_MenuPB
block|,
name|XF86XK_MySites
block|,
name|Qt
operator|::
name|Key_MySites
block|,
name|XF86XK_News
block|,
name|Qt
operator|::
name|Key_News
block|,
name|XF86XK_OfficeHome
block|,
name|Qt
operator|::
name|Key_OfficeHome
block|,
name|XF86XK_Option
block|,
name|Qt
operator|::
name|Key_Option
block|,
name|XF86XK_Paste
block|,
name|Qt
operator|::
name|Key_Paste
block|,
name|XF86XK_Phone
block|,
name|Qt
operator|::
name|Key_Phone
block|,
name|XF86XK_Reply
block|,
name|Qt
operator|::
name|Key_Reply
block|,
name|XF86XK_Reload
block|,
name|Qt
operator|::
name|Key_Reload
block|,
name|XF86XK_RotateWindows
block|,
name|Qt
operator|::
name|Key_RotateWindows
block|,
name|XF86XK_RotationPB
block|,
name|Qt
operator|::
name|Key_RotationPB
block|,
name|XF86XK_RotationKB
block|,
name|Qt
operator|::
name|Key_RotationKB
block|,
name|XF86XK_Save
block|,
name|Qt
operator|::
name|Key_Save
block|,
name|XF86XK_Send
block|,
name|Qt
operator|::
name|Key_Send
block|,
name|XF86XK_Spell
block|,
name|Qt
operator|::
name|Key_Spell
block|,
name|XF86XK_SplitScreen
block|,
name|Qt
operator|::
name|Key_SplitScreen
block|,
name|XF86XK_Support
block|,
name|Qt
operator|::
name|Key_Support
block|,
name|XF86XK_TaskPane
block|,
name|Qt
operator|::
name|Key_TaskPane
block|,
name|XF86XK_Terminal
block|,
name|Qt
operator|::
name|Key_Terminal
block|,
name|XF86XK_Tools
block|,
name|Qt
operator|::
name|Key_Tools
block|,
name|XF86XK_Travel
block|,
name|Qt
operator|::
name|Key_Travel
block|,
name|XF86XK_Video
block|,
name|Qt
operator|::
name|Key_Video
block|,
name|XF86XK_Word
block|,
name|Qt
operator|::
name|Key_Word
block|,
name|XF86XK_Xfer
block|,
name|Qt
operator|::
name|Key_Xfer
block|,
name|XF86XK_ZoomIn
block|,
name|Qt
operator|::
name|Key_ZoomIn
block|,
name|XF86XK_ZoomOut
block|,
name|Qt
operator|::
name|Key_ZoomOut
block|,
name|XF86XK_Away
block|,
name|Qt
operator|::
name|Key_Away
block|,
name|XF86XK_Messenger
block|,
name|Qt
operator|::
name|Key_Messenger
block|,
name|XF86XK_WebCam
block|,
name|Qt
operator|::
name|Key_WebCam
block|,
name|XF86XK_MailForward
block|,
name|Qt
operator|::
name|Key_MailForward
block|,
name|XF86XK_Pictures
block|,
name|Qt
operator|::
name|Key_Pictures
block|,
name|XF86XK_Music
block|,
name|Qt
operator|::
name|Key_Music
block|,
name|XF86XK_Battery
block|,
name|Qt
operator|::
name|Key_Battery
block|,
name|XF86XK_Bluetooth
block|,
name|Qt
operator|::
name|Key_Bluetooth
block|,
name|XF86XK_WLAN
block|,
name|Qt
operator|::
name|Key_WLAN
block|,
name|XF86XK_UWB
block|,
name|Qt
operator|::
name|Key_UWB
block|,
name|XF86XK_AudioForward
block|,
name|Qt
operator|::
name|Key_AudioForward
block|,
name|XF86XK_AudioRepeat
block|,
name|Qt
operator|::
name|Key_AudioRepeat
block|,
name|XF86XK_AudioRandomPlay
block|,
name|Qt
operator|::
name|Key_AudioRandomPlay
block|,
name|XF86XK_Subtitle
block|,
name|Qt
operator|::
name|Key_Subtitle
block|,
name|XF86XK_AudioCycleTrack
block|,
name|Qt
operator|::
name|Key_AudioCycleTrack
block|,
name|XF86XK_Time
block|,
name|Qt
operator|::
name|Key_Time
block|,
name|XF86XK_Select
block|,
name|Qt
operator|::
name|Key_Select
block|,
name|XF86XK_View
block|,
name|Qt
operator|::
name|Key_View
block|,
name|XF86XK_TopMenu
block|,
name|Qt
operator|::
name|Key_TopMenu
block|,
name|XF86XK_Bluetooth
block|,
name|Qt
operator|::
name|Key_Bluetooth
block|,
name|XF86XK_Suspend
block|,
name|Qt
operator|::
name|Key_Suspend
block|,
name|XF86XK_Hibernate
block|,
name|Qt
operator|::
name|Key_Hibernate
block|,
name|XF86XK_Launch0
block|,
name|Qt
operator|::
name|Key_Launch2
block|,
comment|// ### Qt 5: remap properly
name|XF86XK_Launch1
block|,
name|Qt
operator|::
name|Key_Launch3
block|,
name|XF86XK_Launch2
block|,
name|Qt
operator|::
name|Key_Launch4
block|,
name|XF86XK_Launch3
block|,
name|Qt
operator|::
name|Key_Launch5
block|,
name|XF86XK_Launch4
block|,
name|Qt
operator|::
name|Key_Launch6
block|,
name|XF86XK_Launch5
block|,
name|Qt
operator|::
name|Key_Launch7
block|,
name|XF86XK_Launch6
block|,
name|Qt
operator|::
name|Key_Launch8
block|,
name|XF86XK_Launch7
block|,
name|Qt
operator|::
name|Key_Launch9
block|,
name|XF86XK_Launch8
block|,
name|Qt
operator|::
name|Key_LaunchA
block|,
name|XF86XK_Launch9
block|,
name|Qt
operator|::
name|Key_LaunchB
block|,
name|XF86XK_LaunchA
block|,
name|Qt
operator|::
name|Key_LaunchC
block|,
name|XF86XK_LaunchB
block|,
name|Qt
operator|::
name|Key_LaunchD
block|,
name|XF86XK_LaunchC
block|,
name|Qt
operator|::
name|Key_LaunchE
block|,
name|XF86XK_LaunchD
block|,
name|Qt
operator|::
name|Key_LaunchF
block|,
name|XF86XK_LaunchE
block|,
name|Qt
operator|::
name|Key_LaunchG
block|,
name|XF86XK_LaunchF
block|,
name|Qt
operator|::
name|Key_LaunchH
block|,
comment|// Qtopia keys
name|QTOPIAXK_Select
block|,
name|Qt
operator|::
name|Key_Select
block|,
name|QTOPIAXK_Yes
block|,
name|Qt
operator|::
name|Key_Yes
block|,
name|QTOPIAXK_No
block|,
name|Qt
operator|::
name|Key_No
block|,
name|QTOPIAXK_Cancel
block|,
name|Qt
operator|::
name|Key_Cancel
block|,
name|QTOPIAXK_Printer
block|,
name|Qt
operator|::
name|Key_Printer
block|,
name|QTOPIAXK_Execute
block|,
name|Qt
operator|::
name|Key_Execute
block|,
name|QTOPIAXK_Sleep
block|,
name|Qt
operator|::
name|Key_Sleep
block|,
name|QTOPIAXK_Play
block|,
name|Qt
operator|::
name|Key_Play
block|,
name|QTOPIAXK_Zoom
block|,
name|Qt
operator|::
name|Key_Zoom
block|,
name|QTOPIAXK_Context1
block|,
name|Qt
operator|::
name|Key_Context1
block|,
name|QTOPIAXK_Context2
block|,
name|Qt
operator|::
name|Key_Context2
block|,
name|QTOPIAXK_Context3
block|,
name|Qt
operator|::
name|Key_Context3
block|,
name|QTOPIAXK_Context4
block|,
name|Qt
operator|::
name|Key_Context4
block|,
name|QTOPIAXK_Call
block|,
name|Qt
operator|::
name|Key_Call
block|,
name|QTOPIAXK_Hangup
block|,
name|Qt
operator|::
name|Key_Hangup
block|,
name|QTOPIAXK_Flip
block|,
name|Qt
operator|::
name|Key_Flip
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|translateKeySym
specifier|static
name|int
name|translateKeySym
parameter_list|(
name|uint
name|key
parameter_list|)
block|{
name|int
name|code
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|// any other keys
while|while
condition|(
name|KeyTbl
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|key
operator|==
name|KeyTbl
index|[
name|i
index|]
condition|)
block|{
name|code
operator|=
operator|(
name|int
operator|)
name|KeyTbl
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
break|break;
block|}
name|i
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|qt_meta_mask
condition|)
block|{
comment|// translate Super/Hyper keys to Meta if we're using them as the MetaModifier
if|if
condition|(
name|qt_meta_mask
operator|==
name|qt_super_mask
operator|&&
operator|(
name|code
operator|==
name|Qt
operator|::
name|Key_Super_L
operator|||
name|code
operator|==
name|Qt
operator|::
name|Key_Super_R
operator|)
condition|)
block|{
name|code
operator|=
name|Qt
operator|::
name|Key_Meta
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qt_meta_mask
operator|==
name|qt_hyper_mask
operator|&&
operator|(
name|code
operator|==
name|Qt
operator|::
name|Key_Hyper_L
operator|||
name|code
operator|==
name|Qt
operator|::
name|Key_Hyper_R
operator|)
condition|)
block|{
name|code
operator|=
name|Qt
operator|::
name|Key_Meta
expr_stmt|;
block|}
block|}
return|return
name|code
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XIM
argument_list|)
end_if
begin_decl_stmt
DECL|variable|katakanaKeysymsToUnicode
specifier|static
specifier|const
name|unsigned
name|short
name|katakanaKeysymsToUnicode
index|[]
init|=
block|{
literal|0x0000
block|,
literal|0x3002
block|,
literal|0x300C
block|,
literal|0x300D
block|,
literal|0x3001
block|,
literal|0x30FB
block|,
literal|0x30F2
block|,
literal|0x30A1
block|,
literal|0x30A3
block|,
literal|0x30A5
block|,
literal|0x30A7
block|,
literal|0x30A9
block|,
literal|0x30E3
block|,
literal|0x30E5
block|,
literal|0x30E7
block|,
literal|0x30C3
block|,
literal|0x30FC
block|,
literal|0x30A2
block|,
literal|0x30A4
block|,
literal|0x30A6
block|,
literal|0x30A8
block|,
literal|0x30AA
block|,
literal|0x30AB
block|,
literal|0x30AD
block|,
literal|0x30AF
block|,
literal|0x30B1
block|,
literal|0x30B3
block|,
literal|0x30B5
block|,
literal|0x30B7
block|,
literal|0x30B9
block|,
literal|0x30BB
block|,
literal|0x30BD
block|,
literal|0x30BF
block|,
literal|0x30C1
block|,
literal|0x30C4
block|,
literal|0x30C6
block|,
literal|0x30C8
block|,
literal|0x30CA
block|,
literal|0x30CB
block|,
literal|0x30CC
block|,
literal|0x30CD
block|,
literal|0x30CE
block|,
literal|0x30CF
block|,
literal|0x30D2
block|,
literal|0x30D5
block|,
literal|0x30D8
block|,
literal|0x30DB
block|,
literal|0x30DE
block|,
literal|0x30DF
block|,
literal|0x30E0
block|,
literal|0x30E1
block|,
literal|0x30E2
block|,
literal|0x30E4
block|,
literal|0x30E6
block|,
literal|0x30E8
block|,
literal|0x30E9
block|,
literal|0x30EA
block|,
literal|0x30EB
block|,
literal|0x30EC
block|,
literal|0x30ED
block|,
literal|0x30EF
block|,
literal|0x30F3
block|,
literal|0x309B
block|,
literal|0x309C
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cyrillicKeysymsToUnicode
specifier|static
specifier|const
name|unsigned
name|short
name|cyrillicKeysymsToUnicode
index|[]
init|=
block|{
literal|0x0000
block|,
literal|0x0452
block|,
literal|0x0453
block|,
literal|0x0451
block|,
literal|0x0454
block|,
literal|0x0455
block|,
literal|0x0456
block|,
literal|0x0457
block|,
literal|0x0458
block|,
literal|0x0459
block|,
literal|0x045a
block|,
literal|0x045b
block|,
literal|0x045c
block|,
literal|0x0000
block|,
literal|0x045e
block|,
literal|0x045f
block|,
literal|0x2116
block|,
literal|0x0402
block|,
literal|0x0403
block|,
literal|0x0401
block|,
literal|0x0404
block|,
literal|0x0405
block|,
literal|0x0406
block|,
literal|0x0407
block|,
literal|0x0408
block|,
literal|0x0409
block|,
literal|0x040a
block|,
literal|0x040b
block|,
literal|0x040c
block|,
literal|0x0000
block|,
literal|0x040e
block|,
literal|0x040f
block|,
literal|0x044e
block|,
literal|0x0430
block|,
literal|0x0431
block|,
literal|0x0446
block|,
literal|0x0434
block|,
literal|0x0435
block|,
literal|0x0444
block|,
literal|0x0433
block|,
literal|0x0445
block|,
literal|0x0438
block|,
literal|0x0439
block|,
literal|0x043a
block|,
literal|0x043b
block|,
literal|0x043c
block|,
literal|0x043d
block|,
literal|0x043e
block|,
literal|0x043f
block|,
literal|0x044f
block|,
literal|0x0440
block|,
literal|0x0441
block|,
literal|0x0442
block|,
literal|0x0443
block|,
literal|0x0436
block|,
literal|0x0432
block|,
literal|0x044c
block|,
literal|0x044b
block|,
literal|0x0437
block|,
literal|0x0448
block|,
literal|0x044d
block|,
literal|0x0449
block|,
literal|0x0447
block|,
literal|0x044a
block|,
literal|0x042e
block|,
literal|0x0410
block|,
literal|0x0411
block|,
literal|0x0426
block|,
literal|0x0414
block|,
literal|0x0415
block|,
literal|0x0424
block|,
literal|0x0413
block|,
literal|0x0425
block|,
literal|0x0418
block|,
literal|0x0419
block|,
literal|0x041a
block|,
literal|0x041b
block|,
literal|0x041c
block|,
literal|0x041d
block|,
literal|0x041e
block|,
literal|0x041f
block|,
literal|0x042f
block|,
literal|0x0420
block|,
literal|0x0421
block|,
literal|0x0422
block|,
literal|0x0423
block|,
literal|0x0416
block|,
literal|0x0412
block|,
literal|0x042c
block|,
literal|0x042b
block|,
literal|0x0417
block|,
literal|0x0428
block|,
literal|0x042d
block|,
literal|0x0429
block|,
literal|0x0427
block|,
literal|0x042a
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|greekKeysymsToUnicode
specifier|static
specifier|const
name|unsigned
name|short
name|greekKeysymsToUnicode
index|[]
init|=
block|{
literal|0x0000
block|,
literal|0x0386
block|,
literal|0x0388
block|,
literal|0x0389
block|,
literal|0x038a
block|,
literal|0x03aa
block|,
literal|0x0000
block|,
literal|0x038c
block|,
literal|0x038e
block|,
literal|0x03ab
block|,
literal|0x0000
block|,
literal|0x038f
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0385
block|,
literal|0x2015
block|,
literal|0x0000
block|,
literal|0x03ac
block|,
literal|0x03ad
block|,
literal|0x03ae
block|,
literal|0x03af
block|,
literal|0x03ca
block|,
literal|0x0390
block|,
literal|0x03cc
block|,
literal|0x03cd
block|,
literal|0x03cb
block|,
literal|0x03b0
block|,
literal|0x03ce
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0391
block|,
literal|0x0392
block|,
literal|0x0393
block|,
literal|0x0394
block|,
literal|0x0395
block|,
literal|0x0396
block|,
literal|0x0397
block|,
literal|0x0398
block|,
literal|0x0399
block|,
literal|0x039a
block|,
literal|0x039b
block|,
literal|0x039c
block|,
literal|0x039d
block|,
literal|0x039e
block|,
literal|0x039f
block|,
literal|0x03a0
block|,
literal|0x03a1
block|,
literal|0x03a3
block|,
literal|0x0000
block|,
literal|0x03a4
block|,
literal|0x03a5
block|,
literal|0x03a6
block|,
literal|0x03a7
block|,
literal|0x03a8
block|,
literal|0x03a9
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x03b1
block|,
literal|0x03b2
block|,
literal|0x03b3
block|,
literal|0x03b4
block|,
literal|0x03b5
block|,
literal|0x03b6
block|,
literal|0x03b7
block|,
literal|0x03b8
block|,
literal|0x03b9
block|,
literal|0x03ba
block|,
literal|0x03bb
block|,
literal|0x03bc
block|,
literal|0x03bd
block|,
literal|0x03be
block|,
literal|0x03bf
block|,
literal|0x03c0
block|,
literal|0x03c1
block|,
literal|0x03c3
block|,
literal|0x03c2
block|,
literal|0x03c4
block|,
literal|0x03c5
block|,
literal|0x03c6
block|,
literal|0x03c7
block|,
literal|0x03c8
block|,
literal|0x03c9
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|technicalKeysymsToUnicode
specifier|static
specifier|const
name|unsigned
name|short
name|technicalKeysymsToUnicode
index|[]
init|=
block|{
literal|0x0000
block|,
literal|0x23B7
block|,
literal|0x250C
block|,
literal|0x2500
block|,
literal|0x2320
block|,
literal|0x2321
block|,
literal|0x2502
block|,
literal|0x23A1
block|,
literal|0x23A3
block|,
literal|0x23A4
block|,
literal|0x23A6
block|,
literal|0x239B
block|,
literal|0x239D
block|,
literal|0x239E
block|,
literal|0x23A0
block|,
literal|0x23A8
block|,
literal|0x23AC
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2264
block|,
literal|0x2260
block|,
literal|0x2265
block|,
literal|0x222B
block|,
literal|0x2234
block|,
literal|0x221D
block|,
literal|0x221E
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2207
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x223C
block|,
literal|0x2243
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x21D4
block|,
literal|0x21D2
block|,
literal|0x2261
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x221A
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2282
block|,
literal|0x2283
block|,
literal|0x2229
block|,
literal|0x222A
block|,
literal|0x2227
block|,
literal|0x2228
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2202
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0192
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2190
block|,
literal|0x2191
block|,
literal|0x2192
block|,
literal|0x2193
block|,
literal|0x0000
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|specialKeysymsToUnicode
specifier|static
specifier|const
name|unsigned
name|short
name|specialKeysymsToUnicode
index|[]
init|=
block|{
literal|0x25C6
block|,
literal|0x2592
block|,
literal|0x2409
block|,
literal|0x240C
block|,
literal|0x240D
block|,
literal|0x240A
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2424
block|,
literal|0x240B
block|,
literal|0x2518
block|,
literal|0x2510
block|,
literal|0x250C
block|,
literal|0x2514
block|,
literal|0x253C
block|,
literal|0x23BA
block|,
literal|0x23BB
block|,
literal|0x2500
block|,
literal|0x23BC
block|,
literal|0x23BD
block|,
literal|0x251C
block|,
literal|0x2524
block|,
literal|0x2534
block|,
literal|0x252C
block|,
literal|0x2502
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|publishingKeysymsToUnicode
specifier|static
specifier|const
name|unsigned
name|short
name|publishingKeysymsToUnicode
index|[]
init|=
block|{
literal|0x0000
block|,
literal|0x2003
block|,
literal|0x2002
block|,
literal|0x2004
block|,
literal|0x2005
block|,
literal|0x2007
block|,
literal|0x2008
block|,
literal|0x2009
block|,
literal|0x200a
block|,
literal|0x2014
block|,
literal|0x2013
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2026
block|,
literal|0x2025
block|,
literal|0x2153
block|,
literal|0x2154
block|,
literal|0x2155
block|,
literal|0x2156
block|,
literal|0x2157
block|,
literal|0x2158
block|,
literal|0x2159
block|,
literal|0x215a
block|,
literal|0x2105
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2012
block|,
literal|0x2329
block|,
literal|0x0000
block|,
literal|0x232a
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x215b
block|,
literal|0x215c
block|,
literal|0x215d
block|,
literal|0x215e
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2122
block|,
literal|0x2613
block|,
literal|0x0000
block|,
literal|0x25c1
block|,
literal|0x25b7
block|,
literal|0x25cb
block|,
literal|0x25af
block|,
literal|0x2018
block|,
literal|0x2019
block|,
literal|0x201c
block|,
literal|0x201d
block|,
literal|0x211e
block|,
literal|0x0000
block|,
literal|0x2032
block|,
literal|0x2033
block|,
literal|0x0000
block|,
literal|0x271d
block|,
literal|0x0000
block|,
literal|0x25ac
block|,
literal|0x25c0
block|,
literal|0x25b6
block|,
literal|0x25cf
block|,
literal|0x25ae
block|,
literal|0x25e6
block|,
literal|0x25ab
block|,
literal|0x25ad
block|,
literal|0x25b3
block|,
literal|0x25bd
block|,
literal|0x2606
block|,
literal|0x2022
block|,
literal|0x25aa
block|,
literal|0x25b2
block|,
literal|0x25bc
block|,
literal|0x261c
block|,
literal|0x261e
block|,
literal|0x2663
block|,
literal|0x2666
block|,
literal|0x2665
block|,
literal|0x0000
block|,
literal|0x2720
block|,
literal|0x2020
block|,
literal|0x2021
block|,
literal|0x2713
block|,
literal|0x2717
block|,
literal|0x266f
block|,
literal|0x266d
block|,
literal|0x2642
block|,
literal|0x2640
block|,
literal|0x260e
block|,
literal|0x2315
block|,
literal|0x2117
block|,
literal|0x2038
block|,
literal|0x201a
block|,
literal|0x201e
block|,
literal|0x0000
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|aplKeysymsToUnicode
specifier|static
specifier|const
name|unsigned
name|short
name|aplKeysymsToUnicode
index|[]
init|=
block|{
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x003c
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x003e
block|,
literal|0x0000
block|,
literal|0x2228
block|,
literal|0x2227
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x00af
block|,
literal|0x0000
block|,
literal|0x22a5
block|,
literal|0x2229
block|,
literal|0x230a
block|,
literal|0x0000
block|,
literal|0x005f
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2218
block|,
literal|0x0000
block|,
literal|0x2395
block|,
literal|0x0000
block|,
literal|0x22a4
block|,
literal|0x25cb
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2308
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x222a
block|,
literal|0x0000
block|,
literal|0x2283
block|,
literal|0x0000
block|,
literal|0x2282
block|,
literal|0x0000
block|,
literal|0x22a2
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x22a3
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|koreanKeysymsToUnicode
specifier|static
specifier|const
name|unsigned
name|short
name|koreanKeysymsToUnicode
index|[]
init|=
block|{
literal|0x0000
block|,
literal|0x3131
block|,
literal|0x3132
block|,
literal|0x3133
block|,
literal|0x3134
block|,
literal|0x3135
block|,
literal|0x3136
block|,
literal|0x3137
block|,
literal|0x3138
block|,
literal|0x3139
block|,
literal|0x313a
block|,
literal|0x313b
block|,
literal|0x313c
block|,
literal|0x313d
block|,
literal|0x313e
block|,
literal|0x313f
block|,
literal|0x3140
block|,
literal|0x3141
block|,
literal|0x3142
block|,
literal|0x3143
block|,
literal|0x3144
block|,
literal|0x3145
block|,
literal|0x3146
block|,
literal|0x3147
block|,
literal|0x3148
block|,
literal|0x3149
block|,
literal|0x314a
block|,
literal|0x314b
block|,
literal|0x314c
block|,
literal|0x314d
block|,
literal|0x314e
block|,
literal|0x314f
block|,
literal|0x3150
block|,
literal|0x3151
block|,
literal|0x3152
block|,
literal|0x3153
block|,
literal|0x3154
block|,
literal|0x3155
block|,
literal|0x3156
block|,
literal|0x3157
block|,
literal|0x3158
block|,
literal|0x3159
block|,
literal|0x315a
block|,
literal|0x315b
block|,
literal|0x315c
block|,
literal|0x315d
block|,
literal|0x315e
block|,
literal|0x315f
block|,
literal|0x3160
block|,
literal|0x3161
block|,
literal|0x3162
block|,
literal|0x3163
block|,
literal|0x11a8
block|,
literal|0x11a9
block|,
literal|0x11aa
block|,
literal|0x11ab
block|,
literal|0x11ac
block|,
literal|0x11ad
block|,
literal|0x11ae
block|,
literal|0x11af
block|,
literal|0x11b0
block|,
literal|0x11b1
block|,
literal|0x11b2
block|,
literal|0x11b3
block|,
literal|0x11b4
block|,
literal|0x11b5
block|,
literal|0x11b6
block|,
literal|0x11b7
block|,
literal|0x11b8
block|,
literal|0x11b9
block|,
literal|0x11ba
block|,
literal|0x11bb
block|,
literal|0x11bc
block|,
literal|0x11bd
block|,
literal|0x11be
block|,
literal|0x11bf
block|,
literal|0x11c0
block|,
literal|0x11c1
block|,
literal|0x11c2
block|,
literal|0x316d
block|,
literal|0x3171
block|,
literal|0x3178
block|,
literal|0x317f
block|,
literal|0x3181
block|,
literal|0x3184
block|,
literal|0x3186
block|,
literal|0x318d
block|,
literal|0x318e
block|,
literal|0x11eb
block|,
literal|0x11f0
block|,
literal|0x11f9
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x20a9
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|keysymToUnicode
specifier|static
name|QChar
name|keysymToUnicode
parameter_list|(
name|unsigned
name|char
name|byte3
parameter_list|,
name|unsigned
name|char
name|byte4
parameter_list|)
block|{
switch|switch
condition|(
name|byte3
condition|)
block|{
case|case
literal|0x04
case|:
comment|// katakana
if|if
condition|(
name|byte4
operator|>
literal|0xa0
operator|&&
name|byte4
operator|<
literal|0xe0
condition|)
return|return
name|QChar
argument_list|(
name|katakanaKeysymsToUnicode
index|[
name|byte4
operator|-
literal|0xa0
index|]
argument_list|)
return|;
elseif|else
if|if
condition|(
name|byte4
operator|==
literal|0x7e
condition|)
return|return
name|QChar
argument_list|(
literal|0x203e
argument_list|)
return|;
comment|// Overline
break|break;
case|case
literal|0x06
case|:
comment|// russian, use lookup table
if|if
condition|(
name|byte4
operator|>
literal|0xa0
condition|)
return|return
name|QChar
argument_list|(
name|cyrillicKeysymsToUnicode
index|[
name|byte4
operator|-
literal|0xa0
index|]
argument_list|)
return|;
break|break;
case|case
literal|0x07
case|:
comment|// greek
if|if
condition|(
name|byte4
operator|>
literal|0xa0
condition|)
return|return
name|QChar
argument_list|(
name|greekKeysymsToUnicode
index|[
name|byte4
operator|-
literal|0xa0
index|]
argument_list|)
return|;
break|break;
case|case
literal|0x08
case|:
comment|// technical
if|if
condition|(
name|byte4
operator|>
literal|0xa0
condition|)
return|return
name|QChar
argument_list|(
name|technicalKeysymsToUnicode
index|[
name|byte4
operator|-
literal|0xa0
index|]
argument_list|)
return|;
break|break;
case|case
literal|0x09
case|:
comment|// special
if|if
condition|(
name|byte4
operator|>=
literal|0xe0
condition|)
return|return
name|QChar
argument_list|(
name|specialKeysymsToUnicode
index|[
name|byte4
operator|-
literal|0xe0
index|]
argument_list|)
return|;
break|break;
case|case
literal|0x0a
case|:
comment|// publishing
if|if
condition|(
name|byte4
operator|>
literal|0xa0
condition|)
return|return
name|QChar
argument_list|(
name|publishingKeysymsToUnicode
index|[
name|byte4
operator|-
literal|0xa0
index|]
argument_list|)
return|;
break|break;
case|case
literal|0x0b
case|:
comment|// APL
if|if
condition|(
name|byte4
operator|>
literal|0xa0
condition|)
return|return
name|QChar
argument_list|(
name|aplKeysymsToUnicode
index|[
name|byte4
operator|-
literal|0xa0
index|]
argument_list|)
return|;
break|break;
case|case
literal|0x0e
case|:
comment|// Korean
if|if
condition|(
name|byte4
operator|>
literal|0xa0
condition|)
return|return
name|QChar
argument_list|(
name|koreanKeysymsToUnicode
index|[
name|byte4
operator|-
literal|0xa0
index|]
argument_list|)
return|;
break|break;
default|default:
break|break;
block|}
return|return
name|QChar
argument_list|(
literal|0x0
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|translateKeySym
specifier|static
name|QString
name|translateKeySym
parameter_list|(
name|KeySym
name|keysym
parameter_list|,
name|uint
name|xmodifiers
parameter_list|,
name|int
modifier|&
name|code
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
modifier|&
name|modifiers
parameter_list|,
name|QByteArray
modifier|&
name|chars
parameter_list|,
name|int
modifier|&
name|count
parameter_list|)
block|{
comment|// all keysyms smaller than 0xff00 are actally keys that can be mapped to unicode chars
specifier|extern
name|QTextCodec
modifier|*
name|qt_input_mapper
decl_stmt|;
comment|// from qapplication_x11.cpp
name|QTextCodec
modifier|*
name|mapper
init|=
name|qt_input_mapper
decl_stmt|;
name|QChar
name|converted
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
operator|&&
name|keysym
operator|<
literal|0xff00
condition|)
block|{
name|unsigned
name|char
name|byte3
init|=
call|(
name|unsigned
name|char
call|)
argument_list|(
name|keysym
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|int
name|mib
init|=
operator|-
literal|1
decl_stmt|;
switch|switch
condition|(
name|byte3
condition|)
block|{
case|case
literal|0
case|:
comment|// Latin 1
case|case
literal|1
case|:
comment|// Latin 2
case|case
literal|2
case|:
comment|//latin 3
case|case
literal|3
case|:
comment|// latin4
name|mib
operator|=
name|byte3
operator|+
literal|4
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// arabic
name|mib
operator|=
literal|82
expr_stmt|;
break|break;
case|case
literal|12
case|:
comment|// Hebrew
name|mib
operator|=
literal|85
expr_stmt|;
break|break;
case|case
literal|13
case|:
comment|// Thai
name|mib
operator|=
literal|2259
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// kana
case|case
literal|6
case|:
comment|// cyrillic
case|case
literal|7
case|:
comment|// greek
case|case
literal|8
case|:
comment|// technical, no mapping here at the moment
case|case
literal|9
case|:
comment|// Special
case|case
literal|10
case|:
comment|// Publishing
case|case
literal|11
case|:
comment|// APL
case|case
literal|14
case|:
comment|// Korean, no mapping
name|mib
operator|=
operator|-
literal|1
expr_stmt|;
comment|// manual conversion
name|mapper
operator|=
literal|0
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XIM
argument_list|)
name|converted
operator|=
name|keysymToUnicode
argument_list|(
name|byte3
argument_list|,
name|keysym
operator|&
literal|0xff
argument_list|)
expr_stmt|;
endif|#
directive|endif
case|case
literal|0x20
case|:
comment|// currency symbols
if|if
condition|(
name|keysym
operator|>=
literal|0x20a0
operator|&&
name|keysym
operator|<=
literal|0x20ac
condition|)
block|{
name|mib
operator|=
operator|-
literal|1
expr_stmt|;
comment|// manual conversion
name|mapper
operator|=
literal|0
expr_stmt|;
name|converted
operator|=
operator|(
name|uint
operator|)
name|keysym
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|mib
operator|!=
operator|-
literal|1
condition|)
block|{
name|mapper
operator|=
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
name|mib
argument_list|)
expr_stmt|;
if|if
condition|(
name|chars
operator|.
name|isEmpty
argument_list|()
condition|)
name|chars
operator|.
name|resize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|chars
index|[
literal|0
index|]
operator|=
call|(
name|unsigned
name|char
call|)
argument_list|(
name|keysym
operator|&
literal|0xff
argument_list|)
expr_stmt|;
comment|// get only the fourth bit for conversion later
name|count
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|keysym
operator|>=
literal|0x1000000
operator|&&
name|keysym
operator|<=
literal|0x100ffff
condition|)
block|{
name|converted
operator|=
call|(
name|ushort
call|)
argument_list|(
name|keysym
operator|-
literal|0x1000000
argument_list|)
expr_stmt|;
name|mapper
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|<
operator|(
name|int
operator|)
name|chars
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
name|chars
index|[
name|count
index|]
operator|=
literal|'\0'
expr_stmt|;
name|QString
name|text
decl_stmt|;
if|if
condition|(
operator|!
name|mapper
operator|&&
name|converted
operator|.
name|unicode
argument_list|()
operator|!=
literal|0x0
condition|)
block|{
name|text
operator|=
name|converted
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|chars
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// convert chars (8bit) to text (unicode).
if|if
condition|(
name|mapper
condition|)
name|text
operator|=
name|mapper
operator|->
name|toUnicode
argument_list|(
name|chars
operator|.
name|data
argument_list|()
argument_list|,
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no mapper, or codec couldn't convert to unicode (this
comment|// can happen when running in the C locale or with no LANG
comment|// set). try converting from latin-1
name|text
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|chars
argument_list|)
expr_stmt|;
block|}
block|}
name|modifiers
operator|=
name|X11
operator|->
name|translateModifiers
argument_list|(
name|xmodifiers
argument_list|)
expr_stmt|;
comment|// Commentary in X11/keysymdef says that X codes match ASCII, so it
comment|// is safe to use the locale functions to process X codes in ISO8859-1.
comment|//
comment|// This is mainly for compatibility - applications should not use the
comment|// Qt keycodes between 128 and 255, but should rather use the
comment|// QKeyEvent::text().
comment|//
specifier|extern
name|QTextCodec
modifier|*
name|qt_input_mapper
decl_stmt|;
comment|// from qapplication_x11.cpp
if|if
condition|(
name|keysym
operator|<
literal|128
operator|||
operator|(
name|keysym
operator|<
literal|256
operator|&&
operator|(
operator|!
name|qt_input_mapper
operator|||
name|qt_input_mapper
operator|->
name|mibEnum
argument_list|()
operator|==
literal|4
operator|)
operator|)
condition|)
block|{
comment|// upper-case key, if known
name|code
operator|=
name|isprint
argument_list|(
operator|(
name|int
operator|)
name|keysym
argument_list|)
condition|?
name|toupper
argument_list|(
operator|(
name|int
operator|)
name|keysym
argument_list|)
else|:
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keysym
operator|>=
name|XK_F1
operator|&&
name|keysym
operator|<=
name|XK_F35
condition|)
block|{
comment|// function keys
name|code
operator|=
name|Qt
operator|::
name|Key_F1
operator|+
operator|(
operator|(
name|int
operator|)
name|keysym
operator|-
name|XK_F1
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keysym
operator|>=
name|XK_KP_Space
operator|&&
name|keysym
operator|<=
name|XK_KP_9
condition|)
block|{
if|if
condition|(
name|keysym
operator|>=
name|XK_KP_0
condition|)
block|{
comment|// numeric keypad keys
name|code
operator|=
name|Qt
operator|::
name|Key_0
operator|+
operator|(
operator|(
name|int
operator|)
name|keysym
operator|-
name|XK_KP_0
operator|)
expr_stmt|;
block|}
else|else
block|{
name|code
operator|=
name|translateKeySym
argument_list|(
name|keysym
argument_list|)
expr_stmt|;
block|}
name|modifiers
operator||=
name|Qt
operator|::
name|KeypadModifier
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|text
operator|.
name|unicode
argument_list|()
operator|->
name|unicode
argument_list|()
operator|>
literal|0x1f
operator|&&
name|text
operator|.
name|unicode
argument_list|()
operator|->
name|unicode
argument_list|()
operator|!=
literal|0x7f
operator|&&
operator|!
operator|(
name|keysym
operator|>=
name|XK_dead_grave
operator|&&
name|keysym
operator|<=
name|XK_dead_horn
operator|)
condition|)
block|{
name|code
operator|=
name|text
operator|.
name|unicode
argument_list|()
operator|->
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// any other keys
name|code
operator|=
name|translateKeySym
argument_list|(
name|keysym
argument_list|)
expr_stmt|;
if|if
condition|(
name|code
operator|==
name|Qt
operator|::
name|Key_Tab
operator|&&
operator|(
name|modifiers
operator|&
name|Qt
operator|::
name|ShiftModifier
operator|)
condition|)
block|{
comment|// map shift+tab to shift+backtab, QShortcutMap knows about it
comment|// and will handle it.
name|code
operator|=
name|Qt
operator|::
name|Key_Backtab
expr_stmt|;
name|text
operator|=
name|QString
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|text
return|;
block|}
end_function
begin_decl_stmt
specifier|extern
name|bool
name|qt_use_rtl_extensions
decl_stmt|;
end_decl_stmt
begin_comment
comment|// from qapplication_x11.cpp
end_comment
begin_function
DECL|function|translateKeyEventInternal
name|bool
name|QKeyMapperPrivate
operator|::
name|translateKeyEventInternal
parameter_list|(
name|QWidget
modifier|*
name|keyWidget
parameter_list|,
specifier|const
name|XEvent
modifier|*
name|event
parameter_list|,
name|KeySym
modifier|&
name|keysym
parameter_list|,
name|int
modifier|&
name|count
parameter_list|,
name|QString
modifier|&
name|text
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
modifier|&
name|modifiers
parameter_list|,
name|int
modifier|&
name|code
parameter_list|,
name|QEvent
operator|::
name|Type
modifier|&
name|type
parameter_list|,
name|bool
name|statefulTranslation
parameter_list|)
block|{
name|XKeyEvent
name|xkeyevent
init|=
name|event
operator|->
name|xkey
decl_stmt|;
name|int
name|keycode
init|=
name|event
operator|->
name|xkey
operator|.
name|keycode
decl_stmt|;
comment|// save the modifier state, we will use the keystate uint later by passing
comment|// it to translateButtonState
name|uint
name|keystate
init|=
name|event
operator|->
name|xkey
operator|.
name|state
decl_stmt|;
name|type
operator|=
operator|(
name|event
operator|->
name|type
operator|==
name|XKeyPress
operator|)
condition|?
name|QEvent
operator|::
name|KeyPress
else|:
name|QEvent
operator|::
name|KeyRelease
expr_stmt|;
specifier|static
name|int
name|directionKeyEvent
init|=
literal|0
decl_stmt|;
specifier|static
name|unsigned
name|int
name|lastWinId
init|=
literal|0
decl_stmt|;
comment|// translate pending direction change
if|if
condition|(
name|statefulTranslation
operator|&&
name|qt_use_rtl_extensions
operator|&&
name|type
operator|==
name|QEvent
operator|::
name|KeyRelease
condition|)
block|{
if|if
condition|(
name|directionKeyEvent
operator|==
name|Qt
operator|::
name|Key_Direction_R
operator|||
name|directionKeyEvent
operator|==
name|Qt
operator|::
name|Key_Direction_L
condition|)
block|{
name|type
operator|=
name|QEvent
operator|::
name|KeyPress
expr_stmt|;
name|code
operator|=
name|directionKeyEvent
expr_stmt|;
name|text
operator|=
name|QString
argument_list|()
expr_stmt|;
name|directionKeyEvent
operator|=
literal|0
expr_stmt|;
name|lastWinId
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|directionKeyEvent
operator|=
literal|0
expr_stmt|;
name|lastWinId
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|// some XmbLookupString implementations don't return buffer overflow correctly,
comment|// so we increase the input buffer to allow for long strings...
comment|// 256 chars * 2 bytes + 1 null-term == 513 bytes
name|QByteArray
name|chars
decl_stmt|;
name|chars
operator|.
name|resize
argument_list|(
literal|513
argument_list|)
expr_stmt|;
name|count
operator|=
name|XLookupString
argument_list|(
operator|&
name|xkeyevent
argument_list|,
name|chars
operator|.
name|data
argument_list|()
argument_list|,
name|chars
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|keysym
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|&&
operator|!
name|keycode
condition|)
block|{
specifier|extern
name|int
name|qt_ximComposingKeycode
decl_stmt|;
comment|// from qapplication_x11.cpp
name|keycode
operator|=
name|qt_ximComposingKeycode
expr_stmt|;
name|qt_ximComposingKeycode
operator|=
literal|0
expr_stmt|;
block|}
comment|// translate the keysym + xmodifiers to Qt::Key_* + Qt::KeyboardModifiers
name|text
operator|=
name|translateKeySym
argument_list|(
name|keysym
argument_list|,
name|keystate
argument_list|,
name|code
argument_list|,
name|modifiers
argument_list|,
name|chars
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Watch for keypresses and if its a key belonging to the Ctrl-Shift
comment|// direction-changing accel, remember it.
comment|// We keep track of those keys instead of using the event's state
comment|// (to figure out whether the Ctrl modifier is held while Shift is pressed,
comment|// or Shift is held while Ctrl is pressed) since the 'state' doesn't tell
comment|// us whether the modifier held is Left or Right.
if|if
condition|(
name|statefulTranslation
operator|&&
name|qt_use_rtl_extensions
operator|&&
name|type
operator|==
name|QEvent
operator|::
name|KeyPress
condition|)
block|{
if|if
condition|(
name|keysym
operator|==
name|XK_Control_L
operator|||
name|keysym
operator|==
name|XK_Control_R
operator|||
name|keysym
operator|==
name|XK_Shift_L
operator|||
name|keysym
operator|==
name|XK_Shift_R
condition|)
block|{
if|if
condition|(
operator|!
name|directionKeyEvent
condition|)
block|{
name|directionKeyEvent
operator|=
name|keysym
expr_stmt|;
comment|// This code exists in order to check that
comment|// the event is occurred in the same widget.
name|lastWinId
operator|=
name|keyWidget
operator|->
name|internalWinId
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// this can no longer be a direction-changing accel.
comment|// if any other key was pressed.
name|directionKeyEvent
operator|=
name|Qt
operator|::
name|Key_Space
expr_stmt|;
block|}
if|if
condition|(
name|directionKeyEvent
operator|&&
name|lastWinId
operator|==
name|keyWidget
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|keysym
operator|==
name|XK_Shift_L
operator|&&
name|directionKeyEvent
operator|==
name|XK_Control_L
operator|)
operator|||
operator|(
name|keysym
operator|==
name|XK_Control_L
operator|&&
name|directionKeyEvent
operator|==
name|XK_Shift_L
operator|)
condition|)
block|{
name|directionKeyEvent
operator|=
name|Qt
operator|::
name|Key_Direction_L
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|keysym
operator|==
name|XK_Shift_R
operator|&&
name|directionKeyEvent
operator|==
name|XK_Control_R
operator|)
operator|||
operator|(
name|keysym
operator|==
name|XK_Control_R
operator|&&
name|directionKeyEvent
operator|==
name|XK_Shift_R
operator|)
condition|)
block|{
name|directionKeyEvent
operator|=
name|Qt
operator|::
name|Key_Direction_R
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|directionKeyEvent
operator|==
name|Qt
operator|::
name|Key_Direction_L
operator|||
name|directionKeyEvent
operator|==
name|Qt
operator|::
name|Key_Direction_R
condition|)
block|{
name|directionKeyEvent
operator|=
name|Qt
operator|::
name|Key_Space
expr_stmt|;
comment|// invalid
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_struct
DECL|struct|qt_auto_repeat_data
struct|struct
name|qt_auto_repeat_data
block|{
comment|// match the window and keycode with timestamp delta of 10 ms
DECL|member|window
name|Window
name|window
decl_stmt|;
DECL|member|keycode
name|KeyCode
name|keycode
decl_stmt|;
DECL|member|timestamp
name|Time
name|timestamp
decl_stmt|;
comment|// queue scanner state
DECL|member|release
name|bool
name|release
decl_stmt|;
DECL|member|error
name|bool
name|error
decl_stmt|;
block|}
struct|;
end_struct
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_C_CALLBACKS
argument_list|)
end_if
begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
DECL|function|qt_keypress_scanner
specifier|static
name|Bool
name|qt_keypress_scanner
parameter_list|(
name|Display
modifier|*
parameter_list|,
name|XEvent
modifier|*
name|event
parameter_list|,
name|XPointer
name|arg
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
operator|!=
name|XKeyPress
operator|&&
name|event
operator|->
name|type
operator|!=
name|XKeyRelease
condition|)
return|return
literal|false
return|;
name|qt_auto_repeat_data
modifier|*
name|data
init|=
operator|(
name|qt_auto_repeat_data
operator|*
operator|)
name|arg
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|error
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|event
operator|->
name|xkey
operator|.
name|window
operator|!=
name|data
operator|->
name|window
operator|||
name|event
operator|->
name|xkey
operator|.
name|keycode
operator|!=
name|data
operator|->
name|keycode
condition|)
block|{
comment|// deal breakers: key events in a different window or an event
comment|// with a different key code
name|data
operator|->
name|error
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|XKeyPress
condition|)
block|{
name|data
operator|->
name|error
operator|=
operator|(
operator|!
name|data
operator|->
name|release
operator|||
name|event
operator|->
name|xkey
operator|.
name|time
operator|-
name|data
operator|->
name|timestamp
operator|>
literal|10
operator|)
expr_stmt|;
return|return
operator|(
operator|!
name|data
operator|->
name|error
operator|)
return|;
block|}
comment|// must be XKeyRelease event
if|if
condition|(
name|data
operator|->
name|release
condition|)
block|{
comment|// found a second release
name|data
operator|->
name|error
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// found a single release
name|data
operator|->
name|release
operator|=
literal|true
expr_stmt|;
name|data
operator|->
name|timestamp
operator|=
name|event
operator|->
name|xkey
operator|.
name|time
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|function|qt_keyrelease_scanner
specifier|static
name|Bool
name|qt_keyrelease_scanner
parameter_list|(
name|Display
modifier|*
parameter_list|,
name|XEvent
modifier|*
name|event
parameter_list|,
name|XPointer
name|arg
parameter_list|)
block|{
specifier|const
name|qt_auto_repeat_data
modifier|*
name|data
init|=
operator|(
specifier|const
name|qt_auto_repeat_data
operator|*
operator|)
name|arg
decl_stmt|;
return|return
operator|(
name|event
operator|->
name|type
operator|==
name|XKeyRelease
operator|&&
name|event
operator|->
name|xkey
operator|.
name|window
operator|==
name|data
operator|->
name|window
operator|&&
name|event
operator|->
name|xkey
operator|.
name|keycode
operator|==
name|data
operator|->
name|keycode
operator|)
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_C_CALLBACKS
argument_list|)
block|}
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|translateKeyEvent
name|bool
name|QKeyMapperPrivate
operator|::
name|translateKeyEvent
parameter_list|(
name|QWidget
modifier|*
name|keyWidget
parameter_list|,
specifier|const
name|XEvent
modifier|*
name|event
parameter_list|,
name|bool
name|grab
parameter_list|)
block|{
name|int
name|code
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
decl_stmt|;
if|if
condition|(
name|qt_sm_blockUserInput
condition|)
comment|// block user interaction during session management
return|return
literal|true
return|;
name|Display
modifier|*
name|dpy
init|=
name|X11
operator|->
name|display
decl_stmt|;
if|if
condition|(
operator|!
name|keyWidget
operator|->
name|isEnabled
argument_list|()
condition|)
return|return
literal|true
return|;
name|QEvent
operator|::
name|Type
name|type
decl_stmt|;
name|bool
name|autor
init|=
literal|false
decl_stmt|;
name|QString
name|text
decl_stmt|;
name|KeySym
name|keysym
init|=
literal|0
decl_stmt|;
name|translateKeyEventInternal
argument_list|(
name|keyWidget
argument_list|,
name|event
argument_list|,
name|keysym
argument_list|,
name|count
argument_list|,
name|text
argument_list|,
name|modifiers
argument_list|,
name|code
argument_list|,
name|type
argument_list|)
expr_stmt|;
comment|// was this the last auto-repeater?
name|qt_auto_repeat_data
name|auto_repeat_data
decl_stmt|;
name|auto_repeat_data
operator|.
name|window
operator|=
name|event
operator|->
name|xkey
operator|.
name|window
expr_stmt|;
name|auto_repeat_data
operator|.
name|keycode
operator|=
name|event
operator|->
name|xkey
operator|.
name|keycode
expr_stmt|;
name|auto_repeat_data
operator|.
name|timestamp
operator|=
name|event
operator|->
name|xkey
operator|.
name|time
expr_stmt|;
specifier|static
name|uint
name|curr_autorep
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|XKeyPress
condition|)
block|{
if|if
condition|(
name|curr_autorep
operator|==
name|event
operator|->
name|xkey
operator|.
name|keycode
condition|)
block|{
name|autor
operator|=
literal|true
expr_stmt|;
name|curr_autorep
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// look ahead for auto-repeat
name|XEvent
name|nextpress
decl_stmt|;
name|auto_repeat_data
operator|.
name|release
operator|=
literal|true
expr_stmt|;
name|auto_repeat_data
operator|.
name|error
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|XCheckIfEvent
argument_list|(
name|dpy
argument_list|,
operator|&
name|nextpress
argument_list|,
operator|&
name|qt_keypress_scanner
argument_list|,
operator|(
name|XPointer
operator|)
operator|&
name|auto_repeat_data
argument_list|)
condition|)
block|{
name|autor
operator|=
literal|true
expr_stmt|;
comment|// Put it back... we COULD send the event now and not need
comment|// the static curr_autorep variable.
name|XPutBackEvent
argument_list|(
name|dpy
argument_list|,
operator|&
name|nextpress
argument_list|)
expr_stmt|;
block|}
name|curr_autorep
operator|=
name|autor
condition|?
name|event
operator|->
name|xkey
operator|.
name|keycode
else|:
literal|0
expr_stmt|;
block|}
if|#
directive|if
name|defined
name|QT3_SUPPORT
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_SHORTCUT
argument_list|)
comment|// process accelerators before doing key compression
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|KeyPress
operator|&&
operator|!
name|grab
operator|&&
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|use_compat
argument_list|()
condition|)
block|{
comment|// send accel events if the keyboard is not grabbed
name|QKeyEventEx
name|a
argument_list|(
name|type
argument_list|,
name|code
argument_list|,
name|modifiers
argument_list|,
name|text
argument_list|,
name|autor
argument_list|,
name|qMax
argument_list|(
name|qMax
argument_list|(
name|count
argument_list|,
literal|1
argument_list|)
argument_list|,
name|int
argument_list|(
name|text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|event
operator|->
name|xkey
operator|.
name|keycode
argument_list|,
name|keysym
argument_list|,
name|event
operator|->
name|xkey
operator|.
name|state
argument_list|)
decl_stmt|;
if|if
condition|(
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|qt_tryAccelEvent
argument_list|(
name|keyWidget
argument_list|,
operator|&
name|a
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_IM
name|QInputContext
modifier|*
name|qic
init|=
name|keyWidget
operator|->
name|inputContext
argument_list|()
decl_stmt|;
endif|#
directive|endif
comment|// compress keys
if|if
condition|(
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
operator|&&
name|keyWidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_KeyCompression
argument_list|)
operator|&&
ifndef|#
directive|ifndef
name|QT_NO_IM
comment|// Ordinary input methods require discrete key events to work
comment|// properly, so key compression has to be disabled when input
comment|// context exists.
comment|//
comment|// And further consideration, some complex input method
comment|// require all key press/release events discretely even if
comment|// the input method awares of key compression and compressed
comment|// keys are ordinary alphabets. For example, the uim project
comment|// is planning to implement "combinational shift" feature for
comment|// a Japanese input method, uim-skk. It will work as follows.
comment|//
comment|// 1. press "r"
comment|// 2. press "u"
comment|// 3. release both "r" and "u" in arbitrary order
comment|// 4. above key sequence generates "Ru"
comment|//
comment|// Of course further consideration about other participants
comment|// such as key repeat mechanism is required to implement such
comment|// feature.
operator|!
name|qic
operator|&&
endif|#
directive|endif
comment|// QT_NO_IM
comment|// do not compress keys if the key event we just got above matches
comment|// one of the key ranges used to compute stopCompression
operator|!
operator|(
operator|(
name|code
operator|>=
name|Qt
operator|::
name|Key_Escape
operator|&&
name|code
operator|<=
name|Qt
operator|::
name|Key_SysReq
operator|)
operator|||
operator|(
name|code
operator|>=
name|Qt
operator|::
name|Key_Home
operator|&&
name|code
operator|<=
name|Qt
operator|::
name|Key_PageDown
operator|)
operator|||
operator|(
name|code
operator|>=
name|Qt
operator|::
name|Key_Super_L
operator|&&
name|code
operator|<=
name|Qt
operator|::
name|Key_Direction_R
operator|)
operator|||
operator|(
name|code
operator|==
literal|0
operator|)
operator|||
operator|(
name|text
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|text
operator|.
name|unicode
argument_list|()
operator|->
name|unicode
argument_list|()
operator|==
literal|'\n'
operator|)
operator|)
condition|)
block|{
comment|// the widget wants key compression so it gets it
comment|// sync the event queue, this makes key compress work better
name|XSync
argument_list|(
name|dpy
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|XEvent
name|evRelease
decl_stmt|;
name|XEvent
name|evPress
decl_stmt|;
if|if
condition|(
operator|!
name|XCheckTypedWindowEvent
argument_list|(
name|dpy
argument_list|,
name|event
operator|->
name|xkey
operator|.
name|window
argument_list|,
name|XKeyRelease
argument_list|,
operator|&
name|evRelease
argument_list|)
condition|)
break|break;
if|if
condition|(
operator|!
name|XCheckTypedWindowEvent
argument_list|(
name|dpy
argument_list|,
name|event
operator|->
name|xkey
operator|.
name|window
argument_list|,
name|XKeyPress
argument_list|,
operator|&
name|evPress
argument_list|)
condition|)
block|{
name|XPutBackEvent
argument_list|(
name|dpy
argument_list|,
operator|&
name|evRelease
argument_list|)
expr_stmt|;
break|break;
block|}
name|QString
name|textIntern
decl_stmt|;
name|int
name|codeIntern
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|countIntern
init|=
literal|0
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|modifiersIntern
decl_stmt|;
name|QEvent
operator|::
name|Type
name|t
decl_stmt|;
name|KeySym
name|keySymIntern
decl_stmt|;
name|translateKeyEventInternal
argument_list|(
name|keyWidget
argument_list|,
operator|&
name|evPress
argument_list|,
name|keySymIntern
argument_list|,
name|countIntern
argument_list|,
name|textIntern
argument_list|,
name|modifiersIntern
argument_list|,
name|codeIntern
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|// use stopCompression to stop key compression for the following
comment|// key event ranges:
name|bool
name|stopCompression
init|=
comment|// 1) misc keys
operator|(
name|codeIntern
operator|>=
name|Qt
operator|::
name|Key_Escape
operator|&&
name|codeIntern
operator|<=
name|Qt
operator|::
name|Key_SysReq
operator|)
comment|// 2) cursor movement
operator|||
operator|(
name|codeIntern
operator|>=
name|Qt
operator|::
name|Key_Home
operator|&&
name|codeIntern
operator|<=
name|Qt
operator|::
name|Key_PageDown
operator|)
comment|// 3) extra keys
operator|||
operator|(
name|codeIntern
operator|>=
name|Qt
operator|::
name|Key_Super_L
operator|&&
name|codeIntern
operator|<=
name|Qt
operator|::
name|Key_Direction_R
operator|)
comment|// 4) something that a) doesn't translate to text or b) translates
comment|//    to newline text
operator|||
operator|(
name|codeIntern
operator|==
literal|0
operator|)
operator|||
operator|(
name|textIntern
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|textIntern
operator|.
name|unicode
argument_list|()
operator|->
name|unicode
argument_list|()
operator|==
literal|'\n'
operator|)
operator|||
operator|(
name|codeIntern
operator|==
name|Qt
operator|::
name|Key_unknown
operator|)
decl_stmt|;
if|if
condition|(
name|modifiersIntern
operator|==
name|modifiers
operator|&&
operator|!
name|textIntern
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|stopCompression
condition|)
block|{
name|text
operator|+=
name|textIntern
expr_stmt|;
name|count
operator|+=
name|countIntern
expr_stmt|;
block|}
else|else
block|{
name|XPutBackEvent
argument_list|(
name|dpy
argument_list|,
operator|&
name|evPress
argument_list|)
expr_stmt|;
name|XPutBackEvent
argument_list|(
name|dpy
argument_list|,
operator|&
name|evRelease
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// autorepeat compression makes sense for all widgets (Windows
comment|// does it automatically ....)
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|XKeyPress
operator|&&
name|text
operator|.
name|length
argument_list|()
operator|<=
literal|1
ifndef|#
directive|ifndef
name|QT_NO_IM
comment|// input methods need discrete key events
operator|&&
operator|!
name|qic
endif|#
directive|endif
comment|// QT_NO_IM
condition|)
block|{
name|XEvent
name|dummy
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|auto_repeat_data
operator|.
name|release
operator|=
literal|false
expr_stmt|;
name|auto_repeat_data
operator|.
name|error
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|XCheckIfEvent
argument_list|(
name|dpy
argument_list|,
operator|&
name|dummy
argument_list|,
operator|&
name|qt_keypress_scanner
argument_list|,
operator|(
name|XPointer
operator|)
operator|&
name|auto_repeat_data
argument_list|)
condition|)
break|break;
if|if
condition|(
operator|!
name|XCheckIfEvent
argument_list|(
name|dpy
argument_list|,
operator|&
name|dummy
argument_list|,
operator|&
name|qt_keyrelease_scanner
argument_list|,
operator|(
name|XPointer
operator|)
operator|&
name|auto_repeat_data
argument_list|)
condition|)
break|break;
name|count
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|text
operator|+=
name|text
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
return|return
name|QKeyMapper
operator|::
name|sendKeyEvent
argument_list|(
name|keyWidget
argument_list|,
name|grab
argument_list|,
name|type
argument_list|,
name|code
argument_list|,
name|modifiers
argument_list|,
name|text
argument_list|,
name|autor
argument_list|,
name|qMax
argument_list|(
name|qMax
argument_list|(
name|count
argument_list|,
literal|1
argument_list|)
argument_list|,
name|int
argument_list|(
name|text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|event
operator|->
name|xkey
operator|.
name|keycode
argument_list|,
name|keysym
argument_list|,
name|event
operator|->
name|xkey
operator|.
name|state
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|sendKeyEvent
name|bool
name|QKeyMapper
operator|::
name|sendKeyEvent
parameter_list|(
name|QWidget
modifier|*
name|keyWidget
parameter_list|,
name|bool
name|grab
parameter_list|,
name|QEvent
operator|::
name|Type
name|type
parameter_list|,
name|int
name|code
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorepeat
parameter_list|,
name|int
name|count
parameter_list|,
name|quint32
name|nativeScanCode
parameter_list|,
name|quint32
name|nativeVirtualKey
parameter_list|,
name|quint32
name|nativeModifiers
parameter_list|,
name|bool
modifier|*
parameter_list|)
block|{
comment|// try the menukey first
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|KeyPress
operator|&&
name|code
operator|==
name|Qt
operator|::
name|Key_Menu
condition|)
block|{
name|QVariant
name|v
init|=
name|keyWidget
operator|->
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImMicroFocus
argument_list|)
decl_stmt|;
name|QPoint
name|globalPos
decl_stmt|;
name|QPoint
name|pos
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|globalPos
operator|=
name|QCursor
operator|::
name|pos
argument_list|()
expr_stmt|;
name|pos
operator|=
name|keyWidget
operator|->
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pos
operator|=
name|v
operator|.
name|toRect
argument_list|()
operator|.
name|center
argument_list|()
expr_stmt|;
name|globalPos
operator|=
name|keyWidget
operator|->
name|mapToGlobal
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
name|QContextMenuEvent
name|e
argument_list|(
name|QContextMenuEvent
operator|::
name|Keyboard
argument_list|,
name|pos
argument_list|,
name|globalPos
argument_list|)
decl_stmt|;
name|qt_sendSpontaneousEvent
argument_list|(
name|keyWidget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|isAccepted
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
name|Q_UNUSED
argument_list|(
name|grab
argument_list|)
expr_stmt|;
name|QKeyEventEx
name|e
argument_list|(
name|type
argument_list|,
name|code
argument_list|,
name|modifiers
argument_list|,
name|text
argument_list|,
name|autorepeat
argument_list|,
name|qMax
argument_list|(
name|qMax
argument_list|(
name|count
argument_list|,
literal|1
argument_list|)
argument_list|,
name|int
argument_list|(
name|text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|nativeScanCode
argument_list|,
name|nativeVirtualKey
argument_list|,
name|nativeModifiers
argument_list|)
decl_stmt|;
return|return
name|qt_sendSpontaneousEvent
argument_list|(
name|keyWidget
argument_list|,
operator|&
name|e
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
