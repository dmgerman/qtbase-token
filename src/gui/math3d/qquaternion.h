begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QQUATERNION_H
end_ifndef
begin_define
DECL|macro|QQUATERNION_H
define|#
directive|define
name|QQUATERNION_H
end_define
begin_include
include|#
directive|include
file|<QtGui/qvector3d.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qvector4d.h>
end_include
begin_function
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
parameter_list|(
name|Gui
parameter_list|)
ifndef|#
directive|ifndef
name|QT_NO_QUATERNION
name|class
name|QMatrix4x4
decl_stmt|;
DECL|variable|QVariant
name|class
name|QVariant
decl_stmt|;
name|class
name|Q_GUI_EXPORT
name|QQuaternion
decl_stmt|{ public:     QQuaternion(
end_function
begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt
begin_macro
name|QQuaternion
argument_list|(
argument|qreal scalar
argument_list|,
argument|qreal xpos
argument_list|,
argument|qreal ypos
argument_list|,
argument|qreal zpos
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_VECTOR3D
end_ifndef
begin_macro
name|QQuaternion
argument_list|(
argument|qreal scalar
argument_list|,
argument|const QVector3D& vector
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_VECTOR4D
end_ifndef
begin_function_decl
name|explicit
name|QQuaternion
parameter_list|(
specifier|const
name|QVector4D
modifier|&
name|vector
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|bool
name|isNull
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|bool
name|isIdentity
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_VECTOR3D
end_ifndef
begin_expr_stmt
name|QVector3D
name|vector
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setVector
parameter_list|(
specifier|const
name|QVector3D
modifier|&
name|vector
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|void
name|setVector
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|,
name|qreal
name|z
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|qreal
name|x
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|qreal
name|y
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|qreal
name|z
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|qreal
name|scalar
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setX
parameter_list|(
name|qreal
name|x
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setY
parameter_list|(
name|qreal
name|y
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setZ
parameter_list|(
name|qreal
name|z
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setScalar
parameter_list|(
name|qreal
name|scalar
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|qreal
name|length
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|qreal
name|lengthSquared
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QQuaternion
name|normalized
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|normalize
parameter_list|()
function_decl|;
end_function_decl
begin_expr_stmt
name|QQuaternion
name|conjugate
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QVector3D
name|rotatedVector
argument_list|(
specifier|const
name|QVector3D
operator|&
name|vector
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QQuaternion
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QQuaternion
operator|&
name|quaternion
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QQuaternion
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|QQuaternion
operator|&
name|quaternion
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QQuaternion
operator|&
name|operator
operator|*=
operator|(
name|qreal
name|factor
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QQuaternion
operator|&
name|operator
operator|*=
operator|(
specifier|const
name|QQuaternion
operator|&
name|quaternion
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QQuaternion
operator|&
name|operator
operator|/=
operator|(
name|qreal
name|divisor
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|friend
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QQuaternion
operator|&
name|q1
operator|,
specifier|const
name|QQuaternion
operator|&
name|q2
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|friend
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QQuaternion
operator|&
name|q1
operator|,
specifier|const
name|QQuaternion
operator|&
name|q2
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|friend
specifier|inline
specifier|const
name|QQuaternion
name|operator
operator|+
operator|(
specifier|const
name|QQuaternion
operator|&
name|q1
operator|,
specifier|const
name|QQuaternion
operator|&
name|q2
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|friend
specifier|inline
specifier|const
name|QQuaternion
name|operator
operator|-
operator|(
specifier|const
name|QQuaternion
operator|&
name|q1
operator|,
specifier|const
name|QQuaternion
operator|&
name|q2
operator|)
expr_stmt|;
end_expr_stmt
begin_function_decl
name|friend
specifier|inline
specifier|const
name|QQuaternion
name|operator
modifier|*
parameter_list|(
name|qreal
name|factor
parameter_list|,
specifier|const
name|QQuaternion
modifier|&
name|quaternion
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|friend
specifier|inline
specifier|const
name|QQuaternion
name|operator
modifier|*
parameter_list|(
specifier|const
name|QQuaternion
modifier|&
name|quaternion
parameter_list|,
name|qreal
name|factor
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|friend
specifier|inline
specifier|const
name|QQuaternion
name|operator
modifier|*
parameter_list|(
specifier|const
name|QQuaternion
modifier|&
name|q1
parameter_list|,
specifier|const
name|QQuaternion
modifier|&
name|q2
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|friend
specifier|inline
specifier|const
name|QQuaternion
name|operator
operator|-
operator|(
specifier|const
name|QQuaternion
operator|&
name|quaternion
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|friend
specifier|inline
specifier|const
name|QQuaternion
name|operator
operator|/
operator|(
specifier|const
name|QQuaternion
operator|&
name|quaternion
operator|,
name|qreal
name|divisor
operator|)
expr_stmt|;
end_expr_stmt
begin_function_decl
name|friend
specifier|inline
name|bool
name|qFuzzyCompare
parameter_list|(
specifier|const
name|QQuaternion
modifier|&
name|q1
parameter_list|,
specifier|const
name|QQuaternion
modifier|&
name|q2
parameter_list|)
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_VECTOR4D
end_ifndef
begin_expr_stmt
name|QVector4D
name|toVector4D
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|operator
name|QVariant
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_VECTOR3D
end_ifndef
begin_function_decl
specifier|static
name|QQuaternion
name|fromAxisAndAngle
parameter_list|(
specifier|const
name|QVector3D
modifier|&
name|axis
parameter_list|,
name|qreal
name|angle
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
specifier|static
name|QQuaternion
name|fromAxisAndAngle
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|,
name|qreal
name|z
parameter_list|,
name|qreal
name|angle
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QQuaternion
name|slerp
parameter_list|(
specifier|const
name|QQuaternion
modifier|&
name|q1
parameter_list|,
specifier|const
name|QQuaternion
modifier|&
name|q2
parameter_list|,
name|qreal
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QQuaternion
name|nlerp
parameter_list|(
specifier|const
name|QQuaternion
modifier|&
name|q1
parameter_list|,
specifier|const
name|QQuaternion
modifier|&
name|q2
parameter_list|,
name|qreal
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|qreal
name|wp
decl_stmt|,
name|xp
decl_stmt|,
name|yp
decl_stmt|,
name|zp
decl_stmt|;
end_decl_stmt
begin_expr_stmt
unit|};
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QQuaternion
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|function|QQuaternion
specifier|inline
name|QQuaternion
operator|::
name|QQuaternion
argument_list|()
operator|:
name|wp
argument_list|(
literal|1.0f
argument_list|)
operator|,
name|xp
argument_list|(
literal|0.0f
argument_list|)
operator|,
name|yp
argument_list|(
literal|0.0f
argument_list|)
operator|,
name|zp
argument_list|(
literal|0.0f
argument_list|)
block|{}
DECL|function|QQuaternion
specifier|inline
name|QQuaternion
operator|::
name|QQuaternion
argument_list|(
argument|qreal aScalar
argument_list|,
argument|qreal xpos
argument_list|,
argument|qreal ypos
argument_list|,
argument|qreal zpos
argument_list|)
operator|:
name|wp
argument_list|(
name|aScalar
argument_list|)
operator|,
name|xp
argument_list|(
name|xpos
argument_list|)
operator|,
name|yp
argument_list|(
name|ypos
argument_list|)
operator|,
name|zp
argument_list|(
argument|zpos
argument_list|)
block|{}
DECL|function|isNull
specifier|inline
name|bool
name|QQuaternion
operator|::
name|isNull
argument_list|()
specifier|const
block|{
return|return
name|qIsNull
argument_list|(
name|xp
argument_list|)
operator|&&
name|qIsNull
argument_list|(
name|yp
argument_list|)
operator|&&
name|qIsNull
argument_list|(
name|zp
argument_list|)
operator|&&
name|qIsNull
argument_list|(
name|wp
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isIdentity
specifier|inline
name|bool
name|QQuaternion
operator|::
name|isIdentity
argument_list|()
specifier|const
block|{
return|return
name|qIsNull
argument_list|(
name|xp
argument_list|)
operator|&&
name|qIsNull
argument_list|(
name|yp
argument_list|)
operator|&&
name|qIsNull
argument_list|(
name|zp
argument_list|)
operator|&&
name|wp
operator|==
literal|1.0f
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|x
specifier|inline
name|qreal
name|QQuaternion
operator|::
name|x
argument_list|()
specifier|const
block|{
return|return
name|qreal
argument_list|(
name|xp
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|y
specifier|inline
name|qreal
name|QQuaternion
operator|::
name|y
argument_list|()
specifier|const
block|{
return|return
name|qreal
argument_list|(
name|yp
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|z
specifier|inline
name|qreal
name|QQuaternion
operator|::
name|z
argument_list|()
specifier|const
block|{
return|return
name|qreal
argument_list|(
name|zp
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|scalar
specifier|inline
name|qreal
name|QQuaternion
operator|::
name|scalar
argument_list|()
specifier|const
block|{
return|return
name|qreal
argument_list|(
name|wp
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|setX
specifier|inline
name|void
name|QQuaternion
operator|::
name|setX
argument_list|(
argument|qreal aX
argument_list|)
block|{
name|xp
operator|=
name|aX
block|; }
DECL|function|setY
specifier|inline
name|void
name|QQuaternion
operator|::
name|setY
argument_list|(
argument|qreal aY
argument_list|)
block|{
name|yp
operator|=
name|aY
block|; }
DECL|function|setZ
specifier|inline
name|void
name|QQuaternion
operator|::
name|setZ
argument_list|(
argument|qreal aZ
argument_list|)
block|{
name|zp
operator|=
name|aZ
block|; }
DECL|function|setScalar
specifier|inline
name|void
name|QQuaternion
operator|::
name|setScalar
argument_list|(
argument|qreal aScalar
argument_list|)
block|{
name|wp
operator|=
name|aScalar
block|; }
DECL|function|conjugate
specifier|inline
name|QQuaternion
name|QQuaternion
operator|::
name|conjugate
argument_list|()
specifier|const
block|{
return|return
name|QQuaternion
argument_list|(
name|wp
argument_list|,
operator|-
name|xp
argument_list|,
operator|-
name|yp
argument_list|,
operator|-
name|zp
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|operator
specifier|inline
name|QQuaternion
operator|&
name|QQuaternion
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|QQuaternion
operator|&
name|quaternion
operator|)
block|{
name|xp
operator|+=
name|quaternion
operator|.
name|xp
block|;
name|yp
operator|+=
name|quaternion
operator|.
name|yp
block|;
name|zp
operator|+=
name|quaternion
operator|.
name|zp
block|;
name|wp
operator|+=
name|quaternion
operator|.
name|wp
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QQuaternion
operator|&
name|QQuaternion
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|QQuaternion
operator|&
name|quaternion
operator|)
block|{
name|xp
operator|-=
name|quaternion
operator|.
name|xp
block|;
name|yp
operator|-=
name|quaternion
operator|.
name|yp
block|;
name|zp
operator|-=
name|quaternion
operator|.
name|zp
block|;
name|wp
operator|-=
name|quaternion
operator|.
name|wp
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QQuaternion
operator|&
name|QQuaternion
operator|::
name|operator
operator|*=
operator|(
name|qreal
name|factor
operator|)
block|{
name|xp
operator|*=
name|factor
block|;
name|yp
operator|*=
name|factor
block|;
name|zp
operator|*=
name|factor
block|;
name|wp
operator|*=
name|factor
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
specifier|const
name|QQuaternion
name|operator
modifier|*
parameter_list|(
specifier|const
name|QQuaternion
modifier|&
name|q1
parameter_list|,
specifier|const
name|QQuaternion
modifier|&
name|q2
parameter_list|)
block|{
name|qreal
name|ww
init|=
operator|(
name|q1
operator|.
name|zp
operator|+
name|q1
operator|.
name|xp
operator|)
operator|*
operator|(
name|q2
operator|.
name|xp
operator|+
name|q2
operator|.
name|yp
operator|)
decl_stmt|;
name|qreal
name|yy
init|=
operator|(
name|q1
operator|.
name|wp
operator|-
name|q1
operator|.
name|yp
operator|)
operator|*
operator|(
name|q2
operator|.
name|wp
operator|+
name|q2
operator|.
name|zp
operator|)
decl_stmt|;
name|qreal
name|zz
init|=
operator|(
name|q1
operator|.
name|wp
operator|+
name|q1
operator|.
name|yp
operator|)
operator|*
operator|(
name|q2
operator|.
name|wp
operator|-
name|q2
operator|.
name|zp
operator|)
decl_stmt|;
name|qreal
name|xx
init|=
name|ww
operator|+
name|yy
operator|+
name|zz
decl_stmt|;
name|qreal
name|qq
init|=
literal|0.5
operator|*
operator|(
name|xx
operator|+
operator|(
name|q1
operator|.
name|zp
operator|-
name|q1
operator|.
name|xp
operator|)
operator|*
operator|(
name|q2
operator|.
name|xp
operator|-
name|q2
operator|.
name|yp
operator|)
operator|)
decl_stmt|;
name|qreal
name|w
init|=
name|qq
operator|-
name|ww
operator|+
operator|(
name|q1
operator|.
name|zp
operator|-
name|q1
operator|.
name|yp
operator|)
operator|*
operator|(
name|q2
operator|.
name|yp
operator|-
name|q2
operator|.
name|zp
operator|)
decl_stmt|;
name|qreal
name|x
init|=
name|qq
operator|-
name|xx
operator|+
operator|(
name|q1
operator|.
name|xp
operator|+
name|q1
operator|.
name|wp
operator|)
operator|*
operator|(
name|q2
operator|.
name|xp
operator|+
name|q2
operator|.
name|wp
operator|)
decl_stmt|;
name|qreal
name|y
init|=
name|qq
operator|-
name|yy
operator|+
operator|(
name|q1
operator|.
name|wp
operator|-
name|q1
operator|.
name|xp
operator|)
operator|*
operator|(
name|q2
operator|.
name|yp
operator|+
name|q2
operator|.
name|zp
operator|)
decl_stmt|;
name|qreal
name|z
init|=
name|qq
operator|-
name|zz
operator|+
operator|(
name|q1
operator|.
name|zp
operator|+
name|q1
operator|.
name|yp
operator|)
operator|*
operator|(
name|q2
operator|.
name|wp
operator|-
name|q2
operator|.
name|xp
operator|)
decl_stmt|;
return|return
name|QQuaternion
argument_list|(
name|w
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|QQuaternion
operator|&
name|QQuaternion
operator|::
name|operator
operator|*=
operator|(
specifier|const
name|QQuaternion
operator|&
name|quaternion
operator|)
block|{
operator|*
name|this
operator|=
operator|*
name|this
operator|*
name|quaternion
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QQuaternion
operator|&
name|QQuaternion
operator|::
name|operator
operator|/=
operator|(
name|qreal
name|divisor
operator|)
block|{
name|xp
operator|/=
name|divisor
block|;
name|yp
operator|/=
name|divisor
block|;
name|zp
operator|/=
name|divisor
block|;
name|wp
operator|/=
name|divisor
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QQuaternion
operator|&
name|q1
operator|,
specifier|const
name|QQuaternion
operator|&
name|q2
operator|)
block|{
return|return
name|q1
operator|.
name|xp
operator|==
name|q2
operator|.
name|xp
operator|&&
name|q1
operator|.
name|yp
operator|==
name|q2
operator|.
name|yp
operator|&&
name|q1
operator|.
name|zp
operator|==
name|q2
operator|.
name|zp
operator|&&
name|q1
operator|.
name|wp
operator|==
name|q2
operator|.
name|wp
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QQuaternion
operator|&
name|q1
operator|,
specifier|const
name|QQuaternion
operator|&
name|q2
operator|)
block|{
return|return
name|q1
operator|.
name|xp
operator|!=
name|q2
operator|.
name|xp
operator|||
name|q1
operator|.
name|yp
operator|!=
name|q2
operator|.
name|yp
operator|||
name|q1
operator|.
name|zp
operator|!=
name|q2
operator|.
name|zp
operator|||
name|q1
operator|.
name|wp
operator|!=
name|q2
operator|.
name|wp
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
specifier|const
name|QQuaternion
name|operator
operator|+
operator|(
specifier|const
name|QQuaternion
operator|&
name|q1
operator|,
specifier|const
name|QQuaternion
operator|&
name|q2
operator|)
block|{
return|return
name|QQuaternion
argument_list|(
name|q1
operator|.
name|wp
operator|+
name|q2
operator|.
name|wp
argument_list|,
name|q1
operator|.
name|xp
operator|+
name|q2
operator|.
name|xp
argument_list|,
name|q1
operator|.
name|yp
operator|+
name|q2
operator|.
name|yp
argument_list|,
name|q1
operator|.
name|zp
operator|+
name|q2
operator|.
name|zp
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
specifier|const
name|QQuaternion
name|operator
operator|-
operator|(
specifier|const
name|QQuaternion
operator|&
name|q1
operator|,
specifier|const
name|QQuaternion
operator|&
name|q2
operator|)
block|{
return|return
name|QQuaternion
argument_list|(
name|q1
operator|.
name|wp
operator|-
name|q2
operator|.
name|wp
argument_list|,
name|q1
operator|.
name|xp
operator|-
name|q2
operator|.
name|xp
argument_list|,
name|q1
operator|.
name|yp
operator|-
name|q2
operator|.
name|yp
argument_list|,
name|q1
operator|.
name|zp
operator|-
name|q2
operator|.
name|zp
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
specifier|const
name|QQuaternion
name|operator
modifier|*
parameter_list|(
name|qreal
name|factor
parameter_list|,
specifier|const
name|QQuaternion
modifier|&
name|quaternion
parameter_list|)
block|{
return|return
name|QQuaternion
argument_list|(
name|quaternion
operator|.
name|wp
operator|*
name|factor
argument_list|,
name|quaternion
operator|.
name|xp
operator|*
name|factor
argument_list|,
name|quaternion
operator|.
name|yp
operator|*
name|factor
argument_list|,
name|quaternion
operator|.
name|zp
operator|*
name|factor
argument_list|)
return|;
block|}
end_function
begin_function
specifier|inline
specifier|const
name|QQuaternion
name|operator
modifier|*
parameter_list|(
specifier|const
name|QQuaternion
modifier|&
name|quaternion
parameter_list|,
name|qreal
name|factor
parameter_list|)
block|{
return|return
name|QQuaternion
argument_list|(
name|quaternion
operator|.
name|wp
operator|*
name|factor
argument_list|,
name|quaternion
operator|.
name|xp
operator|*
name|factor
argument_list|,
name|quaternion
operator|.
name|yp
operator|*
name|factor
argument_list|,
name|quaternion
operator|.
name|zp
operator|*
name|factor
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
specifier|const
name|QQuaternion
name|operator
operator|-
operator|(
specifier|const
name|QQuaternion
operator|&
name|quaternion
operator|)
block|{
return|return
name|QQuaternion
argument_list|(
operator|-
name|quaternion
operator|.
name|wp
argument_list|,
operator|-
name|quaternion
operator|.
name|xp
argument_list|,
operator|-
name|quaternion
operator|.
name|yp
argument_list|,
operator|-
name|quaternion
operator|.
name|zp
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
specifier|const
name|QQuaternion
name|operator
operator|/
operator|(
specifier|const
name|QQuaternion
operator|&
name|quaternion
operator|,
name|qreal
name|divisor
operator|)
block|{
return|return
name|QQuaternion
argument_list|(
name|quaternion
operator|.
name|wp
operator|/
name|divisor
argument_list|,
name|quaternion
operator|.
name|xp
operator|/
name|divisor
argument_list|,
name|quaternion
operator|.
name|yp
operator|/
name|divisor
argument_list|,
name|quaternion
operator|.
name|zp
operator|/
name|divisor
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|bool
name|qFuzzyCompare
parameter_list|(
specifier|const
name|QQuaternion
modifier|&
name|q1
parameter_list|,
specifier|const
name|QQuaternion
modifier|&
name|q2
parameter_list|)
block|{
return|return
name|qFuzzyCompare
argument_list|(
name|q1
operator|.
name|xp
argument_list|,
name|q2
operator|.
name|xp
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|q1
operator|.
name|yp
argument_list|,
name|q2
operator|.
name|yp
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|q1
operator|.
name|zp
argument_list|,
name|q2
operator|.
name|zp
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|q1
operator|.
name|wp
argument_list|,
name|q2
operator|.
name|wp
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_VECTOR3D
end_ifndef
begin_expr_stmt
specifier|inline
name|QQuaternion
operator|::
name|QQuaternion
argument_list|(
argument|qreal aScalar
argument_list|,
argument|const QVector3D& aVector
argument_list|)
DECL|function|zp
operator|:
name|wp
argument_list|(
name|aScalar
argument_list|)
operator|,
name|xp
argument_list|(
name|aVector
operator|.
name|x
argument_list|()
argument_list|)
operator|,
name|yp
argument_list|(
name|aVector
operator|.
name|y
argument_list|()
argument_list|)
operator|,
name|zp
argument_list|(
argument|aVector.z()
argument_list|)
block|{}
DECL|function|setVector
specifier|inline
name|void
name|QQuaternion
operator|::
name|setVector
argument_list|(
argument|const QVector3D& aVector
argument_list|)
block|{
name|xp
operator|=
name|aVector
operator|.
name|x
argument_list|()
block|;
name|yp
operator|=
name|aVector
operator|.
name|y
argument_list|()
block|;
name|zp
operator|=
name|aVector
operator|.
name|z
argument_list|()
block|; }
DECL|function|vector
specifier|inline
name|QVector3D
name|QQuaternion
operator|::
name|vector
argument_list|()
specifier|const
block|{
return|return
name|QVector3D
argument_list|(
name|xp
argument_list|,
name|yp
argument_list|,
name|zp
argument_list|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
DECL|function|setVector
specifier|inline
name|void
name|QQuaternion
operator|::
name|setVector
argument_list|(
argument|qreal aX
argument_list|,
argument|qreal aY
argument_list|,
argument|qreal aZ
argument_list|)
block|{
name|xp
operator|=
name|aX
block|;
name|yp
operator|=
name|aY
block|;
name|zp
operator|=
name|aZ
block|; }
ifndef|#
directive|ifndef
name|QT_NO_VECTOR4D
DECL|function|QQuaternion
specifier|inline
name|QQuaternion
operator|::
name|QQuaternion
argument_list|(
specifier|const
name|QVector4D
operator|&
name|aVector
argument_list|)
operator|:
name|wp
argument_list|(
name|aVector
operator|.
name|w
argument_list|()
argument_list|)
operator|,
name|xp
argument_list|(
name|aVector
operator|.
name|x
argument_list|()
argument_list|)
operator|,
name|yp
argument_list|(
name|aVector
operator|.
name|y
argument_list|()
argument_list|)
operator|,
name|zp
argument_list|(
argument|aVector.z()
argument_list|)
block|{}
DECL|function|toVector4D
specifier|inline
name|QVector4D
name|QQuaternion
operator|::
name|toVector4D
argument_list|()
specifier|const
block|{
return|return
name|QVector4D
argument_list|(
name|xp
argument_list|,
name|yp
argument_list|,
name|zp
argument_list|,
name|wp
argument_list|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_GUI_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
name|dbg
operator|,
specifier|const
name|QQuaternion
operator|&
name|q
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_expr_stmt
name|Q_GUI_EXPORT
name|QDataStream
operator|&
name|operator
operator|<<
operator|(
name|QDataStream
operator|&
operator|,
specifier|const
name|QQuaternion
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_GUI_EXPORT
name|QDataStream
operator|&
name|operator
operator|>>
operator|(
name|QDataStream
operator|&
operator|,
name|QQuaternion
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
