begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QMATRIX4X4_H
end_ifndef
begin_define
DECL|macro|QMATRIX4X4_H
define|#
directive|define
name|QMATRIX4X4_H
end_define
begin_include
include|#
directive|include
file|<QtGui/qvector3d.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qvector4d.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qquaternion.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qgenericmatrix.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qrect.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_MATRIX4X4
DECL|variable|QMatrix
name|class
name|QMatrix
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTransform
name|class
name|QTransform
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QVariant
name|class
name|QVariant
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QMatrix4x4
block|{
name|public
label|:
specifier|inline
name|QMatrix4x4
argument_list|()
block|{
name|setToIdentity
argument_list|()
block|; }
name|explicit
name|QMatrix4x4
argument_list|(
specifier|const
name|float
operator|*
name|values
argument_list|)
expr_stmt|;
specifier|inline
name|QMatrix4x4
argument_list|(
argument|float m11
argument_list|,
argument|float m12
argument_list|,
argument|float m13
argument_list|,
argument|float m14
argument_list|,
argument|float m21
argument_list|,
argument|float m22
argument_list|,
argument|float m23
argument_list|,
argument|float m24
argument_list|,
argument|float m31
argument_list|,
argument|float m32
argument_list|,
argument|float m33
argument_list|,
argument|float m34
argument_list|,
argument|float m41
argument_list|,
argument|float m42
argument_list|,
argument|float m43
argument_list|,
argument|float m44
argument_list|)
expr_stmt|;
name|template
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|>
name|explicit
name|QMatrix4x4
argument_list|(
specifier|const
name|QGenericMatrix
operator|<
name|N
argument_list|,
name|M
argument_list|,
name|float
operator|>
operator|&
name|matrix
argument_list|)
expr_stmt|;
name|QMatrix4x4
argument_list|(
argument|const float *values
argument_list|,
argument|int cols
argument_list|,
argument|int rows
argument_list|)
empty_stmt|;
name|QMatrix4x4
argument_list|(
specifier|const
name|QTransform
operator|&
name|transform
argument_list|)
expr_stmt|;
name|QMatrix4x4
argument_list|(
specifier|const
name|QMatrix
operator|&
name|matrix
argument_list|)
expr_stmt|;
specifier|inline
specifier|const
name|float
operator|&
name|operator
argument_list|()
operator|(
name|int
name|row
operator|,
name|int
name|column
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|float
operator|&
name|operator
argument_list|()
operator|(
name|int
name|row
operator|,
name|int
name|column
operator|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_VECTOR4D
specifier|inline
name|QVector4D
name|column
argument_list|(
name|int
name|index
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|void
name|setColumn
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QVector4D
modifier|&
name|value
parameter_list|)
function_decl|;
specifier|inline
name|QVector4D
name|row
argument_list|(
name|int
name|index
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|void
name|setRow
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QVector4D
modifier|&
name|value
parameter_list|)
function_decl|;
endif|#
directive|endif
specifier|inline
name|bool
name|isIdentity
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|void
name|setToIdentity
parameter_list|()
function_decl|;
specifier|inline
name|void
name|fill
parameter_list|(
name|float
name|value
parameter_list|)
function_decl|;
name|double
name|determinant
argument_list|()
specifier|const
expr_stmt|;
name|QMatrix4x4
name|inverted
argument_list|(
name|bool
operator|*
name|invertible
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|QMatrix4x4
name|transposed
argument_list|()
specifier|const
expr_stmt|;
name|QMatrix3x3
name|normalMatrix
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QMatrix4x4
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QMatrix4x4
operator|&
name|other
operator|)
expr_stmt|;
specifier|inline
name|QMatrix4x4
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|QMatrix4x4
operator|&
name|other
operator|)
expr_stmt|;
specifier|inline
name|QMatrix4x4
operator|&
name|operator
operator|*=
operator|(
specifier|const
name|QMatrix4x4
operator|&
name|other
operator|)
expr_stmt|;
specifier|inline
name|QMatrix4x4
operator|&
name|operator
operator|*=
operator|(
name|float
name|factor
operator|)
expr_stmt|;
name|QMatrix4x4
operator|&
name|operator
operator|/=
operator|(
name|float
name|divisor
operator|)
expr_stmt|;
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QMatrix4x4
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QMatrix4x4
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
name|friend
name|QMatrix4x4
name|operator
operator|+
operator|(
specifier|const
name|QMatrix4x4
operator|&
name|m1
operator|,
specifier|const
name|QMatrix4x4
operator|&
name|m2
operator|)
expr_stmt|;
name|friend
name|QMatrix4x4
name|operator
operator|-
operator|(
specifier|const
name|QMatrix4x4
operator|&
name|m1
operator|,
specifier|const
name|QMatrix4x4
operator|&
name|m2
operator|)
expr_stmt|;
name|friend
name|QMatrix4x4
name|operator
modifier|*
parameter_list|(
specifier|const
name|QMatrix4x4
modifier|&
name|m1
parameter_list|,
specifier|const
name|QMatrix4x4
modifier|&
name|m2
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_VECTOR3D
name|friend
name|QVector3D
name|operator
modifier|*
parameter_list|(
specifier|const
name|QMatrix4x4
modifier|&
name|matrix
parameter_list|,
specifier|const
name|QVector3D
modifier|&
name|vector
parameter_list|)
function_decl|;
name|friend
name|QVector3D
name|operator
modifier|*
parameter_list|(
specifier|const
name|QVector3D
modifier|&
name|vector
parameter_list|,
specifier|const
name|QMatrix4x4
modifier|&
name|matrix
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_VECTOR4D
name|friend
name|QVector4D
name|operator
modifier|*
parameter_list|(
specifier|const
name|QVector4D
modifier|&
name|vector
parameter_list|,
specifier|const
name|QMatrix4x4
modifier|&
name|matrix
parameter_list|)
function_decl|;
name|friend
name|QVector4D
name|operator
modifier|*
parameter_list|(
specifier|const
name|QMatrix4x4
modifier|&
name|matrix
parameter_list|,
specifier|const
name|QVector4D
modifier|&
name|vector
parameter_list|)
function_decl|;
endif|#
directive|endif
name|friend
name|QPoint
name|operator
modifier|*
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|point
parameter_list|,
specifier|const
name|QMatrix4x4
modifier|&
name|matrix
parameter_list|)
function_decl|;
name|friend
name|QPointF
name|operator
modifier|*
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|point
parameter_list|,
specifier|const
name|QMatrix4x4
modifier|&
name|matrix
parameter_list|)
function_decl|;
name|friend
name|QMatrix4x4
name|operator
operator|-
operator|(
specifier|const
name|QMatrix4x4
operator|&
name|matrix
operator|)
expr_stmt|;
name|friend
name|QPoint
name|operator
modifier|*
parameter_list|(
specifier|const
name|QMatrix4x4
modifier|&
name|matrix
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|point
parameter_list|)
function_decl|;
name|friend
name|QPointF
name|operator
modifier|*
parameter_list|(
specifier|const
name|QMatrix4x4
modifier|&
name|matrix
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|point
parameter_list|)
function_decl|;
name|friend
name|QMatrix4x4
name|operator
modifier|*
parameter_list|(
name|float
name|factor
parameter_list|,
specifier|const
name|QMatrix4x4
modifier|&
name|matrix
parameter_list|)
function_decl|;
name|friend
name|QMatrix4x4
name|operator
modifier|*
parameter_list|(
specifier|const
name|QMatrix4x4
modifier|&
name|matrix
parameter_list|,
name|float
name|factor
parameter_list|)
function_decl|;
name|friend
name|Q_GUI_EXPORT
name|QMatrix4x4
name|operator
operator|/
operator|(
specifier|const
name|QMatrix4x4
operator|&
name|matrix
operator|,
name|float
name|divisor
operator|)
expr_stmt|;
name|friend
specifier|inline
name|bool
name|qFuzzyCompare
parameter_list|(
specifier|const
name|QMatrix4x4
modifier|&
name|m1
parameter_list|,
specifier|const
name|QMatrix4x4
modifier|&
name|m2
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_VECTOR3D
name|void
name|scale
parameter_list|(
specifier|const
name|QVector3D
modifier|&
name|vector
parameter_list|)
function_decl|;
name|void
name|translate
parameter_list|(
specifier|const
name|QVector3D
modifier|&
name|vector
parameter_list|)
function_decl|;
name|void
name|rotate
parameter_list|(
name|float
name|angle
parameter_list|,
specifier|const
name|QVector3D
modifier|&
name|vector
parameter_list|)
function_decl|;
endif|#
directive|endif
name|void
name|scale
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
function_decl|;
name|void
name|scale
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|float
name|z
parameter_list|)
function_decl|;
name|void
name|scale
parameter_list|(
name|float
name|factor
parameter_list|)
function_decl|;
name|void
name|translate
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
function_decl|;
name|void
name|translate
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|float
name|z
parameter_list|)
function_decl|;
name|void
name|rotate
parameter_list|(
name|float
name|angle
parameter_list|,
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|float
name|z
init|=
literal|0.0f
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_QUATERNION
name|void
name|rotate
parameter_list|(
specifier|const
name|QQuaternion
modifier|&
name|quaternion
parameter_list|)
function_decl|;
endif|#
directive|endif
name|void
name|ortho
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
function_decl|;
name|void
name|ortho
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
function_decl|;
name|void
name|ortho
parameter_list|(
name|float
name|left
parameter_list|,
name|float
name|right
parameter_list|,
name|float
name|bottom
parameter_list|,
name|float
name|top
parameter_list|,
name|float
name|nearPlane
parameter_list|,
name|float
name|farPlane
parameter_list|)
function_decl|;
name|void
name|frustum
parameter_list|(
name|float
name|left
parameter_list|,
name|float
name|right
parameter_list|,
name|float
name|bottom
parameter_list|,
name|float
name|top
parameter_list|,
name|float
name|nearPlane
parameter_list|,
name|float
name|farPlane
parameter_list|)
function_decl|;
name|void
name|perspective
parameter_list|(
name|float
name|verticalAngle
parameter_list|,
name|float
name|aspectRatio
parameter_list|,
name|float
name|nearPlane
parameter_list|,
name|float
name|farPlane
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_VECTOR3D
name|void
name|lookAt
parameter_list|(
specifier|const
name|QVector3D
modifier|&
name|eye
parameter_list|,
specifier|const
name|QVector3D
modifier|&
name|center
parameter_list|,
specifier|const
name|QVector3D
modifier|&
name|up
parameter_list|)
function_decl|;
endif|#
directive|endif
name|void
name|flipCoordinates
parameter_list|()
function_decl|;
name|void
name|copyDataTo
argument_list|(
name|float
operator|*
name|values
argument_list|)
decl|const
decl_stmt|;
name|QMatrix
name|toAffine
argument_list|()
specifier|const
expr_stmt|;
name|QTransform
name|toTransform
argument_list|()
specifier|const
expr_stmt|;
name|QTransform
name|toTransform
argument_list|(
name|float
name|distanceToPlane
argument_list|)
decl|const
decl_stmt|;
name|QPoint
name|map
argument_list|(
specifier|const
name|QPoint
operator|&
name|point
argument_list|)
decl|const
decl_stmt|;
name|QPointF
name|map
argument_list|(
specifier|const
name|QPointF
operator|&
name|point
argument_list|)
decl|const
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_VECTOR3D
name|QVector3D
name|map
argument_list|(
specifier|const
name|QVector3D
operator|&
name|point
argument_list|)
decl|const
decl_stmt|;
name|QVector3D
name|mapVector
argument_list|(
specifier|const
name|QVector3D
operator|&
name|vector
argument_list|)
decl|const
decl_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_VECTOR4D
name|QVector4D
name|map
argument_list|(
specifier|const
name|QVector4D
operator|&
name|point
argument_list|)
decl|const
decl_stmt|;
endif|#
directive|endif
name|QRect
name|mapRect
argument_list|(
specifier|const
name|QRect
operator|&
name|rect
argument_list|)
decl|const
decl_stmt|;
name|QRectF
name|mapRect
argument_list|(
specifier|const
name|QRectF
operator|&
name|rect
argument_list|)
decl|const
decl_stmt|;
name|template
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|>
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|float
operator|>
name|toGenericMatrix
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|float
modifier|*
name|data
parameter_list|()
function_decl|;
specifier|inline
specifier|const
name|float
operator|*
name|data
argument_list|()
specifier|const
block|{
return|return
operator|*
name|m
return|;
block|}
specifier|inline
specifier|const
name|float
operator|*
name|constData
argument_list|()
specifier|const
block|{
return|return
operator|*
name|m
return|;
block|}
name|void
name|optimize
parameter_list|()
function_decl|;
name|operator
name|QVariant
argument_list|()
specifier|const
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
name|friend
name|Q_GUI_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
name|dbg
operator|,
specifier|const
name|QMatrix4x4
operator|&
name|m
operator|)
expr_stmt|;
endif|#
directive|endif
name|private
label|:
name|float
name|m
index|[
literal|4
index|]
index|[
literal|4
index|]
decl_stmt|;
comment|// Column-major order to match OpenGL.
name|int
name|flagBits
decl_stmt|;
comment|// Flag bits from the enum below.
comment|// When matrices are multiplied, the flag bits are or-ed together.
enum|enum
block|{
name|Identity
init|=
literal|0x0000
block|,
comment|// Identity matrix
name|Translation
init|=
literal|0x0001
block|,
comment|// Contains a translation
name|Scale
init|=
literal|0x0002
block|,
comment|// Contains a scale
name|Rotation2D
init|=
literal|0x0004
block|,
comment|// Contains a rotation about the Z axis
name|Rotation
init|=
literal|0x0008
block|,
comment|// Contains an arbitrary rotation
name|Perspective
init|=
literal|0x0010
block|,
comment|// Last row is different from (0, 0, 0, 1)
name|General
init|=
literal|0x001f
comment|// General matrix, unknown contents
block|}
enum|;
comment|// Construct without initializing identity matrix.
name|explicit
name|QMatrix4x4
parameter_list|(
name|int
parameter_list|)
block|{ }
name|QMatrix4x4
name|orthonormalInverse
argument_list|()
specifier|const
expr_stmt|;
name|void
name|projectedRotate
parameter_list|(
name|float
name|angle
parameter_list|,
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|float
name|z
parameter_list|)
function_decl|;
name|friend
name|class
name|QGraphicsRotation
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QMatrix4x4
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|function|QMatrix4x4
specifier|inline
name|QMatrix4x4
operator|::
name|QMatrix4x4
argument_list|(
argument|float m11
argument_list|,
argument|float m12
argument_list|,
argument|float m13
argument_list|,
argument|float m14
argument_list|,
argument|float m21
argument_list|,
argument|float m22
argument_list|,
argument|float m23
argument_list|,
argument|float m24
argument_list|,
argument|float m31
argument_list|,
argument|float m32
argument_list|,
argument|float m33
argument_list|,
argument|float m34
argument_list|,
argument|float m41
argument_list|,
argument|float m42
argument_list|,
argument|float m43
argument_list|,
argument|float m44
argument_list|)
block|{
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|=
name|m11
block|;
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|=
name|m21
block|;
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|=
name|m31
block|;
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|=
name|m41
block|;
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|=
name|m12
block|;
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|=
name|m22
block|;
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|=
name|m32
block|;
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|=
name|m42
block|;
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|=
name|m13
block|;
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|=
name|m23
block|;
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|=
name|m33
block|;
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|=
name|m43
block|;
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|=
name|m14
block|;
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|=
name|m24
block|;
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|=
name|m34
block|;
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|=
name|m44
block|;
name|flagBits
operator|=
name|General
block|; }
DECL|variable|N
name|template
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|>
DECL|function|QMatrix4x4
name|Q_INLINE_TEMPLATE
name|QMatrix4x4
operator|::
name|QMatrix4x4
argument_list|(
argument|const QGenericMatrix<N
argument_list|,
argument|M
argument_list|,
argument|float>& matrix
argument_list|)
block|{
specifier|const
name|float
operator|*
name|values
operator|=
name|matrix
operator|.
name|constData
argument_list|()
block|;
for|for
control|(
name|int
name|matrixCol
init|=
literal|0
init|;
name|matrixCol
operator|<
literal|4
condition|;
operator|++
name|matrixCol
control|)
block|{
for|for
control|(
name|int
name|matrixRow
init|=
literal|0
init|;
name|matrixRow
operator|<
literal|4
condition|;
operator|++
name|matrixRow
control|)
block|{
if|if
condition|(
name|matrixCol
operator|<
name|N
operator|&&
name|matrixRow
operator|<
name|M
condition|)
name|m
index|[
name|matrixCol
index|]
index|[
name|matrixRow
index|]
operator|=
name|values
index|[
name|matrixCol
operator|*
name|M
operator|+
name|matrixRow
index|]
expr_stmt|;
elseif|else
if|if
condition|(
name|matrixCol
operator|==
name|matrixRow
condition|)
name|m
index|[
name|matrixCol
index|]
index|[
name|matrixRow
index|]
operator|=
literal|1.0f
expr_stmt|;
else|else
name|m
index|[
name|matrixCol
index|]
index|[
name|matrixRow
index|]
operator|=
literal|0.0f
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
unit|}     flagBits
operator|=
name|General
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
DECL|variable|N
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|>
DECL|variable|N
DECL|variable|M
DECL|function|toGenericMatrix
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|float
operator|>
name|QMatrix4x4
operator|::
name|toGenericMatrix
argument_list|()
specifier|const
block|{
name|QGenericMatrix
operator|<
name|N
block|,
name|M
block|,
name|float
operator|>
name|result
block|;
name|float
operator|*
name|values
operator|=
name|result
operator|.
name|data
argument_list|()
block|;
for|for
control|(
name|int
name|matrixCol
init|=
literal|0
init|;
name|matrixCol
operator|<
name|N
condition|;
operator|++
name|matrixCol
control|)
block|{
for|for
control|(
name|int
name|matrixRow
init|=
literal|0
init|;
name|matrixRow
operator|<
name|M
condition|;
operator|++
name|matrixRow
control|)
block|{
if|if
condition|(
name|matrixCol
operator|<
literal|4
operator|&&
name|matrixRow
operator|<
literal|4
condition|)
name|values
index|[
name|matrixCol
operator|*
name|M
operator|+
name|matrixRow
index|]
operator|=
name|m
index|[
name|matrixCol
index|]
index|[
name|matrixRow
index|]
expr_stmt|;
elseif|else
if|if
condition|(
name|matrixCol
operator|==
name|matrixRow
condition|)
name|values
index|[
name|matrixCol
operator|*
name|M
operator|+
name|matrixRow
index|]
operator|=
literal|1.0f
expr_stmt|;
else|else
name|values
index|[
name|matrixCol
operator|*
name|M
operator|+
name|matrixRow
index|]
operator|=
literal|0.0f
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
unit|}     return
name|result
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  inline
DECL|function|operator
specifier|const
name|float
operator|&
name|QMatrix4x4
operator|::
name|operator
argument_list|()
operator|(
name|int
name|aRow
operator|,
name|int
name|aColumn
operator|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|aRow
operator|>=
literal|0
operator|&&
name|aRow
operator|<
literal|4
operator|&&
name|aColumn
operator|>=
literal|0
operator|&&
name|aColumn
operator|<
literal|4
argument_list|)
block|;
return|return
name|m
index|[
name|aColumn
index|]
index|[
name|aRow
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|float
operator|&
name|QMatrix4x4
operator|::
name|operator
argument_list|()
operator|(
name|int
name|aRow
operator|,
name|int
name|aColumn
operator|)
block|{
name|Q_ASSERT
argument_list|(
name|aRow
operator|>=
literal|0
operator|&&
name|aRow
operator|<
literal|4
operator|&&
name|aColumn
operator|>=
literal|0
operator|&&
name|aColumn
operator|<
literal|4
argument_list|)
block|;
name|flagBits
operator|=
name|General
block|;
return|return
name|m
index|[
name|aColumn
index|]
index|[
name|aRow
index|]
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_VECTOR4D
end_ifndef
begin_expr_stmt
DECL|function|column
specifier|inline
name|QVector4D
name|QMatrix4x4
operator|::
name|column
argument_list|(
argument|int index
argument_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
literal|4
argument_list|)
block|;
return|return
name|QVector4D
argument_list|(
name|m
index|[
name|index
index|]
index|[
literal|0
index|]
argument_list|,
name|m
index|[
name|index
index|]
index|[
literal|1
index|]
argument_list|,
name|m
index|[
name|index
index|]
index|[
literal|2
index|]
argument_list|,
name|m
index|[
name|index
index|]
index|[
literal|3
index|]
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|setColumn
specifier|inline
name|void
name|QMatrix4x4
operator|::
name|setColumn
argument_list|(
argument|int index
argument_list|,
argument|const QVector4D& value
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
literal|4
argument_list|)
block|;
name|m
index|[
name|index
index|]
index|[
literal|0
index|]
operator|=
name|value
operator|.
name|x
argument_list|()
block|;
name|m
index|[
name|index
index|]
index|[
literal|1
index|]
operator|=
name|value
operator|.
name|y
argument_list|()
block|;
name|m
index|[
name|index
index|]
index|[
literal|2
index|]
operator|=
name|value
operator|.
name|z
argument_list|()
block|;
name|m
index|[
name|index
index|]
index|[
literal|3
index|]
operator|=
name|value
operator|.
name|w
argument_list|()
block|;
name|flagBits
operator|=
name|General
block|; }
DECL|function|row
specifier|inline
name|QVector4D
name|QMatrix4x4
operator|::
name|row
argument_list|(
argument|int index
argument_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
literal|4
argument_list|)
block|;
return|return
name|QVector4D
argument_list|(
name|m
index|[
literal|0
index|]
index|[
name|index
index|]
argument_list|,
name|m
index|[
literal|1
index|]
index|[
name|index
index|]
argument_list|,
name|m
index|[
literal|2
index|]
index|[
name|index
index|]
argument_list|,
name|m
index|[
literal|3
index|]
index|[
name|index
index|]
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|setRow
specifier|inline
name|void
name|QMatrix4x4
operator|::
name|setRow
argument_list|(
argument|int index
argument_list|,
argument|const QVector4D& value
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
literal|4
argument_list|)
block|;
name|m
index|[
literal|0
index|]
index|[
name|index
index|]
operator|=
name|value
operator|.
name|x
argument_list|()
block|;
name|m
index|[
literal|1
index|]
index|[
name|index
index|]
operator|=
name|value
operator|.
name|y
argument_list|()
block|;
name|m
index|[
literal|2
index|]
index|[
name|index
index|]
operator|=
name|value
operator|.
name|z
argument_list|()
block|;
name|m
index|[
literal|3
index|]
index|[
name|index
index|]
operator|=
name|value
operator|.
name|w
argument_list|()
block|;
name|flagBits
operator|=
name|General
block|; }
endif|#
directive|endif
name|Q_GUI_EXPORT
name|QMatrix4x4
name|operator
operator|/
operator|(
specifier|const
name|QMatrix4x4
operator|&
name|matrix
operator|,
name|float
name|divisor
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|function|isIdentity
specifier|inline
name|bool
name|QMatrix4x4
operator|::
name|isIdentity
argument_list|()
specifier|const
block|{
if|if
condition|(
name|flagBits
operator|==
name|Identity
condition|)
return|return
name|true
return|;
end_expr_stmt
begin_if
if|if
condition|(
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|!=
literal|1.0f
operator|||
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|!=
literal|0.0f
operator|||
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|!=
literal|0.0f
condition|)
return|return
name|false
return|;
end_if
begin_if
if|if
condition|(
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|!=
literal|0.0f
operator|||
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|!=
literal|0.0f
operator|||
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|!=
literal|1.0f
condition|)
return|return
name|false
return|;
end_if
begin_if
if|if
condition|(
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|!=
literal|0.0f
operator|||
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|!=
literal|0.0f
operator|||
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|!=
literal|0.0f
condition|)
return|return
name|false
return|;
end_if
begin_if
if|if
condition|(
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|!=
literal|0.0f
operator|||
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|!=
literal|1.0f
operator|||
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|!=
literal|0.0f
condition|)
return|return
name|false
return|;
end_if
begin_if
if|if
condition|(
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|!=
literal|0.0f
operator|||
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|!=
literal|0.0f
operator|||
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|!=
literal|0.0f
condition|)
return|return
name|false
return|;
end_if
begin_return
return|return
operator|(
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|==
literal|1.0f
operator|)
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|setToIdentity
name|void
name|QMatrix4x4
operator|::
name|setToIdentity
argument_list|()
block|{
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|=
literal|1.0f
block|;
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|=
literal|0.0f
block|;
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|=
literal|0.0f
block|;
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|=
literal|0.0f
block|;
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|=
literal|0.0f
block|;
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|=
literal|1.0f
block|;
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|=
literal|0.0f
block|;
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|=
literal|0.0f
block|;
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|=
literal|0.0f
block|;
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|=
literal|0.0f
block|;
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|=
literal|1.0f
block|;
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|=
literal|0.0f
block|;
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|=
literal|0.0f
block|;
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|=
literal|0.0f
block|;
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|=
literal|0.0f
block|;
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|=
literal|1.0f
block|;
name|flagBits
operator|=
name|Identity
block|; }
DECL|function|fill
specifier|inline
name|void
name|QMatrix4x4
operator|::
name|fill
argument_list|(
argument|float value
argument_list|)
block|{
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|=
name|value
block|;
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|=
name|value
block|;
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|=
name|value
block|;
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|=
name|value
block|;
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|=
name|value
block|;
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|=
name|value
block|;
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|=
name|value
block|;
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|=
name|value
block|;
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|=
name|value
block|;
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|=
name|value
block|;
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|=
name|value
block|;
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|=
name|value
block|;
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|=
name|value
block|;
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|=
name|value
block|;
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|=
name|value
block|;
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|=
name|value
block|;
name|flagBits
operator|=
name|General
block|; }
DECL|member|operator
specifier|inline
name|QMatrix4x4
operator|&
name|QMatrix4x4
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|QMatrix4x4
operator|&
name|other
operator|)
block|{
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+=
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
block|;
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+=
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
block|;
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|+=
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
block|;
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|+=
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
block|;
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+=
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
block|;
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+=
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
block|;
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|+=
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
block|;
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|+=
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
block|;
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|+=
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
block|;
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|+=
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
block|;
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|+=
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
block|;
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|+=
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
block|;
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|+=
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
block|;
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|+=
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
block|;
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|+=
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
block|;
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|+=
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
block|;
name|flagBits
operator|=
name|General
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMatrix4x4
operator|&
name|QMatrix4x4
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|QMatrix4x4
operator|&
name|other
operator|)
block|{
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|-=
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
block|;
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|-=
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
block|;
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|-=
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
block|;
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|-=
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
block|;
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|-=
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
block|;
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|-=
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
block|;
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|-=
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
block|;
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|-=
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
block|;
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|-=
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
block|;
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|-=
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
block|;
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|-=
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
block|;
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|-=
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
block|;
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|-=
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
block|;
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|-=
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
block|;
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|-=
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
block|;
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|-=
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
block|;
name|flagBits
operator|=
name|General
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMatrix4x4
operator|&
name|QMatrix4x4
operator|::
name|operator
operator|*=
operator|(
specifier|const
name|QMatrix4x4
operator|&
name|other
operator|)
block|{
name|flagBits
operator||=
name|other
operator|.
name|flagBits
block|;
if|if
condition|(
name|flagBits
operator|<
name|Rotation2D
condition|)
block|{
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|+=
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
expr_stmt|;
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|+=
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
expr_stmt|;
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|+=
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
expr_stmt|;
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|*=
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
expr_stmt|;
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|*=
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
expr_stmt|;
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|*=
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|float
name|m0
operator|,
name|m1
operator|,
name|m2
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m0
operator|=
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|+
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m1
operator|=
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|+
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m2
operator|=
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|+
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|+
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|+
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|=
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|+
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|+
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|+
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|=
name|m0
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|=
name|m1
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|=
name|m2
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m0
operator|=
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|+
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m1
operator|=
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|+
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m2
operator|=
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|+
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|+
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|+
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|=
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|+
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|+
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|+
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|=
name|m0
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|=
name|m1
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|=
name|m2
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m0
operator|=
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|+
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m1
operator|=
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|+
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m2
operator|=
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|+
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|+
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|+
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|=
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|+
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|+
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|+
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|=
name|m0
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|=
name|m1
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|=
name|m2
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m0
operator|=
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|+
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m1
operator|=
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|+
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m2
operator|=
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|+
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|+
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|+
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|=
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|+
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|+
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|+
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|*
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|=
name|m0
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|=
name|m1
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|=
name|m2
expr_stmt|;
end_expr_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}  inline
name|QMatrix4x4
operator|&
name|QMatrix4x4
operator|::
name|operator
operator|*=
operator|(
name|float
name|factor
operator|)
block|{
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|*=
name|factor
block|;
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|*=
name|factor
block|;
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|*=
name|factor
block|;
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|*=
name|factor
block|;
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|*=
name|factor
block|;
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|*=
name|factor
block|;
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|*=
name|factor
block|;
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|*=
name|factor
block|;
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|*=
name|factor
block|;
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|*=
name|factor
block|;
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|*=
name|factor
block|;
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|*=
name|factor
block|;
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|*=
name|factor
block|;
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|*=
name|factor
block|;
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|*=
name|factor
block|;
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|*=
name|factor
block|;
name|flagBits
operator|=
name|General
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QMatrix4x4
operator|::
name|operator
operator|==
operator|(
specifier|const
name|QMatrix4x4
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|==
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|&&
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|==
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|&&
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|==
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|&&
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|==
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|&&
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|==
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|&&
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|==
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|&&
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|==
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|&&
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|==
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|&&
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|==
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|&&
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|==
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|&&
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|==
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|&&
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|==
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|&&
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|==
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|&&
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|==
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|&&
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|==
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|&&
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|==
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QMatrix4x4
operator|::
name|operator
operator|!=
operator|(
specifier|const
name|QMatrix4x4
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|!=
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|||
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|!=
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|||
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|!=
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|||
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|!=
name|other
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|||
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|!=
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|||
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|!=
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|||
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|!=
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|||
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|!=
name|other
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|||
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|!=
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|||
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|!=
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|||
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|!=
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|||
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|!=
name|other
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|||
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|!=
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|||
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|!=
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|||
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|!=
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|||
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|!=
name|other
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMatrix4x4
name|operator
operator|+
operator|(
specifier|const
name|QMatrix4x4
operator|&
name|m1
operator|,
specifier|const
name|QMatrix4x4
operator|&
name|m2
operator|)
block|{
name|QMatrix4x4
name|m
argument_list|(
literal|1
argument_list|)
block|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
block|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
block|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|+
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
block|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|+
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
block|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
block|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
block|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|+
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
block|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|+
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
block|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|+
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
block|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|+
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
block|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|+
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
block|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|+
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
block|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|+
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
block|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|+
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
block|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|+
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
block|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|+
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
block|;
name|m
operator|.
name|flagBits
operator|=
name|QMatrix4x4
operator|::
name|General
block|;
return|return
name|m
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMatrix4x4
name|operator
operator|-
operator|(
specifier|const
name|QMatrix4x4
operator|&
name|m1
operator|,
specifier|const
name|QMatrix4x4
operator|&
name|m2
operator|)
block|{
name|QMatrix4x4
name|m
argument_list|(
literal|1
argument_list|)
block|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|-
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
block|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|-
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
block|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|-
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
block|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|-
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
block|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|-
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
block|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|-
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
block|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|-
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
block|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|-
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
block|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|-
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
block|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|-
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
block|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|-
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
block|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|-
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
block|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|-
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
block|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|-
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
block|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|-
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
block|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|-
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
block|;
name|m
operator|.
name|flagBits
operator|=
name|QMatrix4x4
operator|::
name|General
block|;
return|return
name|m
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|QMatrix4x4
name|operator
modifier|*
parameter_list|(
specifier|const
name|QMatrix4x4
modifier|&
name|m1
parameter_list|,
specifier|const
name|QMatrix4x4
modifier|&
name|m2
parameter_list|)
block|{
name|int
name|flagBits
init|=
name|m1
operator|.
name|flagBits
operator||
name|m2
operator|.
name|flagBits
decl_stmt|;
if|if
condition|(
name|flagBits
operator|<
name|QMatrix4x4
operator|::
name|Rotation2D
condition|)
block|{
name|QMatrix4x4
name|m
init|=
name|m1
decl_stmt|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|+=
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|+=
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|+=
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|*=
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|*=
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|*=
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
expr_stmt|;
name|m
operator|.
name|flagBits
operator|=
name|flagBits
expr_stmt|;
return|return
name|m
return|;
block|}
name|QMatrix4x4
name|m
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|=
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|+
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|*
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
expr_stmt|;
name|m
operator|.
name|flagBits
operator|=
name|flagBits
expr_stmt|;
return|return
name|m
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_VECTOR3D
end_ifndef
begin_function
specifier|inline
name|QVector3D
name|operator
modifier|*
parameter_list|(
specifier|const
name|QVector3D
modifier|&
name|vector
parameter_list|,
specifier|const
name|QMatrix4x4
modifier|&
name|matrix
parameter_list|)
block|{
name|float
name|x
decl_stmt|,
name|y
decl_stmt|,
name|z
decl_stmt|,
name|w
decl_stmt|;
name|x
operator|=
name|vector
operator|.
name|x
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|vector
operator|.
name|y
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|vector
operator|.
name|z
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
expr_stmt|;
name|y
operator|=
name|vector
operator|.
name|x
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|vector
operator|.
name|y
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|vector
operator|.
name|z
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
expr_stmt|;
name|z
operator|=
name|vector
operator|.
name|x
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|+
name|vector
operator|.
name|y
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|+
name|vector
operator|.
name|z
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
expr_stmt|;
name|w
operator|=
name|vector
operator|.
name|x
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|+
name|vector
operator|.
name|y
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|+
name|vector
operator|.
name|z
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
expr_stmt|;
if|if
condition|(
name|w
operator|==
literal|1.0f
condition|)
return|return
name|QVector3D
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
return|;
else|else
return|return
name|QVector3D
argument_list|(
name|x
operator|/
name|w
argument_list|,
name|y
operator|/
name|w
argument_list|,
name|z
operator|/
name|w
argument_list|)
return|;
block|}
end_function
begin_function
specifier|inline
name|QVector3D
name|operator
modifier|*
parameter_list|(
specifier|const
name|QMatrix4x4
modifier|&
name|matrix
parameter_list|,
specifier|const
name|QVector3D
modifier|&
name|vector
parameter_list|)
block|{
name|float
name|x
decl_stmt|,
name|y
decl_stmt|,
name|z
decl_stmt|,
name|w
decl_stmt|;
if|if
condition|(
name|matrix
operator|.
name|flagBits
operator|==
name|QMatrix4x4
operator|::
name|Identity
condition|)
block|{
return|return
name|vector
return|;
block|}
elseif|else
if|if
condition|(
name|matrix
operator|.
name|flagBits
operator|<
name|QMatrix4x4
operator|::
name|Rotation2D
condition|)
block|{
comment|// Translation | Scale
return|return
name|QVector3D
argument_list|(
name|vector
operator|.
name|x
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
argument_list|,
name|vector
operator|.
name|y
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
argument_list|,
name|vector
operator|.
name|z
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|matrix
operator|.
name|flagBits
operator|<
name|QMatrix4x4
operator|::
name|Rotation
condition|)
block|{
comment|// Translation | Scale | Rotation2D
return|return
name|QVector3D
argument_list|(
name|vector
operator|.
name|x
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|vector
operator|.
name|y
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
argument_list|,
name|vector
operator|.
name|x
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|vector
operator|.
name|y
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
argument_list|,
name|vector
operator|.
name|z
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
argument_list|)
return|;
block|}
else|else
block|{
name|x
operator|=
name|vector
operator|.
name|x
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|vector
operator|.
name|y
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|vector
operator|.
name|z
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
expr_stmt|;
name|y
operator|=
name|vector
operator|.
name|x
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|vector
operator|.
name|y
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|vector
operator|.
name|z
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
expr_stmt|;
name|z
operator|=
name|vector
operator|.
name|x
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|+
name|vector
operator|.
name|y
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|+
name|vector
operator|.
name|z
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
expr_stmt|;
name|w
operator|=
name|vector
operator|.
name|x
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|+
name|vector
operator|.
name|y
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|+
name|vector
operator|.
name|z
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
expr_stmt|;
if|if
condition|(
name|w
operator|==
literal|1.0f
condition|)
return|return
name|QVector3D
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
return|;
else|else
return|return
name|QVector3D
argument_list|(
name|x
operator|/
name|w
argument_list|,
name|y
operator|/
name|w
argument_list|,
name|z
operator|/
name|w
argument_list|)
return|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_VECTOR4D
end_ifndef
begin_function
specifier|inline
name|QVector4D
name|operator
modifier|*
parameter_list|(
specifier|const
name|QVector4D
modifier|&
name|vector
parameter_list|,
specifier|const
name|QMatrix4x4
modifier|&
name|matrix
parameter_list|)
block|{
name|float
name|x
decl_stmt|,
name|y
decl_stmt|,
name|z
decl_stmt|,
name|w
decl_stmt|;
name|x
operator|=
name|vector
operator|.
name|x
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|vector
operator|.
name|y
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|vector
operator|.
name|z
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|+
name|vector
operator|.
name|w
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
expr_stmt|;
name|y
operator|=
name|vector
operator|.
name|x
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|vector
operator|.
name|y
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|vector
operator|.
name|z
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|+
name|vector
operator|.
name|w
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
expr_stmt|;
name|z
operator|=
name|vector
operator|.
name|x
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|+
name|vector
operator|.
name|y
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|+
name|vector
operator|.
name|z
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|+
name|vector
operator|.
name|w
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
expr_stmt|;
name|w
operator|=
name|vector
operator|.
name|x
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|+
name|vector
operator|.
name|y
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|+
name|vector
operator|.
name|z
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|+
name|vector
operator|.
name|w
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
expr_stmt|;
return|return
name|QVector4D
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
return|;
block|}
end_function
begin_function
specifier|inline
name|QVector4D
name|operator
modifier|*
parameter_list|(
specifier|const
name|QMatrix4x4
modifier|&
name|matrix
parameter_list|,
specifier|const
name|QVector4D
modifier|&
name|vector
parameter_list|)
block|{
name|float
name|x
decl_stmt|,
name|y
decl_stmt|,
name|z
decl_stmt|,
name|w
decl_stmt|;
name|x
operator|=
name|vector
operator|.
name|x
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|vector
operator|.
name|y
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|vector
operator|.
name|z
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|+
name|vector
operator|.
name|w
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
expr_stmt|;
name|y
operator|=
name|vector
operator|.
name|x
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|vector
operator|.
name|y
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|vector
operator|.
name|z
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|+
name|vector
operator|.
name|w
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
expr_stmt|;
name|z
operator|=
name|vector
operator|.
name|x
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|+
name|vector
operator|.
name|y
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|+
name|vector
operator|.
name|z
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|+
name|vector
operator|.
name|w
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
expr_stmt|;
name|w
operator|=
name|vector
operator|.
name|x
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|+
name|vector
operator|.
name|y
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|+
name|vector
operator|.
name|z
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|+
name|vector
operator|.
name|w
argument_list|()
operator|*
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
expr_stmt|;
return|return
name|QVector4D
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
specifier|inline
name|QPoint
name|operator
modifier|*
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|point
parameter_list|,
specifier|const
name|QMatrix4x4
modifier|&
name|matrix
parameter_list|)
block|{
name|float
name|xin
decl_stmt|,
name|yin
decl_stmt|;
name|float
name|x
decl_stmt|,
name|y
decl_stmt|,
name|w
decl_stmt|;
name|xin
operator|=
name|point
operator|.
name|x
argument_list|()
expr_stmt|;
name|yin
operator|=
name|point
operator|.
name|y
argument_list|()
expr_stmt|;
name|x
operator|=
name|xin
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|yin
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
expr_stmt|;
name|y
operator|=
name|xin
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|yin
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
expr_stmt|;
name|w
operator|=
name|xin
operator|*
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|+
name|yin
operator|*
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
expr_stmt|;
if|if
condition|(
name|w
operator|==
literal|1.0f
condition|)
return|return
name|QPoint
argument_list|(
name|qRound
argument_list|(
name|x
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|y
argument_list|)
argument_list|)
return|;
else|else
return|return
name|QPoint
argument_list|(
name|qRound
argument_list|(
name|x
operator|/
name|w
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|y
operator|/
name|w
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
specifier|inline
name|QPointF
name|operator
modifier|*
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|point
parameter_list|,
specifier|const
name|QMatrix4x4
modifier|&
name|matrix
parameter_list|)
block|{
name|float
name|xin
decl_stmt|,
name|yin
decl_stmt|;
name|float
name|x
decl_stmt|,
name|y
decl_stmt|,
name|w
decl_stmt|;
name|xin
operator|=
name|point
operator|.
name|x
argument_list|()
expr_stmt|;
name|yin
operator|=
name|point
operator|.
name|y
argument_list|()
expr_stmt|;
name|x
operator|=
name|xin
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|yin
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
expr_stmt|;
name|y
operator|=
name|xin
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|yin
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
expr_stmt|;
name|w
operator|=
name|xin
operator|*
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|+
name|yin
operator|*
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
expr_stmt|;
if|if
condition|(
name|w
operator|==
literal|1.0f
condition|)
block|{
return|return
name|QPointF
argument_list|(
name|float
argument_list|(
name|x
argument_list|)
argument_list|,
name|float
argument_list|(
name|y
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|QPointF
argument_list|(
name|float
argument_list|(
name|x
operator|/
name|w
argument_list|)
argument_list|,
name|float
argument_list|(
name|y
operator|/
name|w
argument_list|)
argument_list|)
return|;
block|}
block|}
end_function
begin_function
specifier|inline
name|QPoint
name|operator
modifier|*
parameter_list|(
specifier|const
name|QMatrix4x4
modifier|&
name|matrix
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|point
parameter_list|)
block|{
name|float
name|xin
decl_stmt|,
name|yin
decl_stmt|;
name|float
name|x
decl_stmt|,
name|y
decl_stmt|,
name|w
decl_stmt|;
name|xin
operator|=
name|point
operator|.
name|x
argument_list|()
expr_stmt|;
name|yin
operator|=
name|point
operator|.
name|y
argument_list|()
expr_stmt|;
if|if
condition|(
name|matrix
operator|.
name|flagBits
operator|==
name|QMatrix4x4
operator|::
name|Identity
condition|)
block|{
return|return
name|point
return|;
block|}
elseif|else
if|if
condition|(
name|matrix
operator|.
name|flagBits
operator|<
name|QMatrix4x4
operator|::
name|Rotation2D
condition|)
block|{
comment|// Translation | Scale
return|return
name|QPoint
argument_list|(
name|qRound
argument_list|(
name|xin
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|yin
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|matrix
operator|.
name|flagBits
operator|<
name|QMatrix4x4
operator|::
name|Perspective
condition|)
block|{
return|return
name|QPoint
argument_list|(
name|qRound
argument_list|(
name|xin
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|yin
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|xin
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|yin
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|x
operator|=
name|xin
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|yin
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
expr_stmt|;
name|y
operator|=
name|xin
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|yin
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
expr_stmt|;
name|w
operator|=
name|xin
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|+
name|yin
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
expr_stmt|;
if|if
condition|(
name|w
operator|==
literal|1.0f
condition|)
return|return
name|QPoint
argument_list|(
name|qRound
argument_list|(
name|x
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|y
argument_list|)
argument_list|)
return|;
else|else
return|return
name|QPoint
argument_list|(
name|qRound
argument_list|(
name|x
operator|/
name|w
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|y
operator|/
name|w
argument_list|)
argument_list|)
return|;
block|}
block|}
end_function
begin_function
specifier|inline
name|QPointF
name|operator
modifier|*
parameter_list|(
specifier|const
name|QMatrix4x4
modifier|&
name|matrix
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|point
parameter_list|)
block|{
name|float
name|xin
decl_stmt|,
name|yin
decl_stmt|;
name|float
name|x
decl_stmt|,
name|y
decl_stmt|,
name|w
decl_stmt|;
name|xin
operator|=
name|point
operator|.
name|x
argument_list|()
expr_stmt|;
name|yin
operator|=
name|point
operator|.
name|y
argument_list|()
expr_stmt|;
if|if
condition|(
name|matrix
operator|.
name|flagBits
operator|==
name|QMatrix4x4
operator|::
name|Identity
condition|)
block|{
return|return
name|point
return|;
block|}
elseif|else
if|if
condition|(
name|matrix
operator|.
name|flagBits
operator|<
name|QMatrix4x4
operator|::
name|Rotation2D
condition|)
block|{
comment|// Translation | Scale
return|return
name|QPointF
argument_list|(
name|xin
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
argument_list|,
name|yin
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|matrix
operator|.
name|flagBits
operator|<
name|QMatrix4x4
operator|::
name|Perspective
condition|)
block|{
return|return
name|QPointF
argument_list|(
name|xin
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|yin
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
argument_list|,
name|xin
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|yin
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
argument_list|)
return|;
block|}
else|else
block|{
name|x
operator|=
name|xin
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|yin
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
expr_stmt|;
name|y
operator|=
name|xin
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|yin
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
expr_stmt|;
name|w
operator|=
name|xin
operator|*
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|+
name|yin
operator|*
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|+
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
expr_stmt|;
if|if
condition|(
name|w
operator|==
literal|1.0f
condition|)
block|{
return|return
name|QPointF
argument_list|(
name|float
argument_list|(
name|x
argument_list|)
argument_list|,
name|float
argument_list|(
name|y
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|QPointF
argument_list|(
name|float
argument_list|(
name|x
operator|/
name|w
argument_list|)
argument_list|,
name|float
argument_list|(
name|y
operator|/
name|w
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_function
begin_expr_stmt
specifier|inline
name|QMatrix4x4
name|operator
operator|-
operator|(
specifier|const
name|QMatrix4x4
operator|&
name|matrix
operator|)
block|{
name|QMatrix4x4
name|m
argument_list|(
literal|1
argument_list|)
block|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|=
operator|-
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
block|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|=
operator|-
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
block|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|=
operator|-
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
block|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|=
operator|-
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
block|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|=
operator|-
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
block|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|=
operator|-
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
block|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|=
operator|-
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
block|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|=
operator|-
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
block|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|=
operator|-
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
block|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|=
operator|-
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
block|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|=
operator|-
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
block|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|=
operator|-
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
block|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|=
operator|-
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
block|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|=
operator|-
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
block|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|=
operator|-
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
block|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|=
operator|-
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
block|;
name|m
operator|.
name|flagBits
operator|=
name|QMatrix4x4
operator|::
name|General
block|;
return|return
name|m
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|QMatrix4x4
name|operator
modifier|*
parameter_list|(
name|float
name|factor
parameter_list|,
specifier|const
name|QMatrix4x4
modifier|&
name|matrix
parameter_list|)
block|{
name|QMatrix4x4
name|m
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|flagBits
operator|=
name|QMatrix4x4
operator|::
name|General
expr_stmt|;
return|return
name|m
return|;
block|}
end_function
begin_function
specifier|inline
name|QMatrix4x4
name|operator
modifier|*
parameter_list|(
specifier|const
name|QMatrix4x4
modifier|&
name|matrix
parameter_list|,
name|float
name|factor
parameter_list|)
block|{
name|QMatrix4x4
name|m
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|=
name|matrix
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|*
name|factor
expr_stmt|;
name|m
operator|.
name|flagBits
operator|=
name|QMatrix4x4
operator|::
name|General
expr_stmt|;
return|return
name|m
return|;
block|}
end_function
begin_function
specifier|inline
name|bool
name|qFuzzyCompare
parameter_list|(
specifier|const
name|QMatrix4x4
modifier|&
name|m1
parameter_list|,
specifier|const
name|QMatrix4x4
modifier|&
name|m2
parameter_list|)
block|{
return|return
name|qFuzzyCompare
argument_list|(
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|,
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
argument_list|,
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
argument_list|,
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|m1
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
argument_list|,
name|m2
operator|.
name|m
index|[
literal|0
index|]
index|[
literal|3
index|]
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
argument_list|,
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
argument_list|,
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
argument_list|,
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|m1
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
argument_list|,
name|m2
operator|.
name|m
index|[
literal|1
index|]
index|[
literal|3
index|]
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
argument_list|,
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
argument_list|,
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
argument_list|,
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|m1
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
argument_list|,
name|m2
operator|.
name|m
index|[
literal|2
index|]
index|[
literal|3
index|]
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
argument_list|,
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|0
index|]
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
argument_list|,
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|1
index|]
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
argument_list|,
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|2
index|]
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|m1
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
argument_list|,
name|m2
operator|.
name|m
index|[
literal|3
index|]
index|[
literal|3
index|]
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|QPoint
name|QMatrix4x4
operator|::
name|map
argument_list|(
argument|const QPoint& point
argument_list|)
specifier|const
block|{
return|return
operator|*
name|this
operator|*
name|point
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QPointF
name|QMatrix4x4
operator|::
name|map
argument_list|(
argument|const QPointF& point
argument_list|)
specifier|const
block|{
return|return
operator|*
name|this
operator|*
name|point
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_VECTOR3D
end_ifndef
begin_expr_stmt
specifier|inline
name|QVector3D
name|QMatrix4x4
operator|::
name|map
argument_list|(
argument|const QVector3D& point
argument_list|)
specifier|const
block|{
return|return
operator|*
name|this
operator|*
name|point
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QVector3D
name|QMatrix4x4
operator|::
name|mapVector
argument_list|(
argument|const QVector3D& vector
argument_list|)
specifier|const
block|{
if|if
condition|(
name|flagBits
operator|<
name|Scale
condition|)
block|{
comment|// Translation
return|return
name|vector
return|;
block|}
end_expr_stmt
begin_elseif
elseif|else
if|if
condition|(
name|flagBits
operator|<
name|Rotation2D
condition|)
block|{
comment|// Translation | Scale
return|return
name|QVector3D
argument_list|(
name|vector
operator|.
name|x
argument_list|()
operator|*
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|,
name|vector
operator|.
name|y
argument_list|()
operator|*
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
argument_list|,
name|vector
operator|.
name|z
argument_list|()
operator|*
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
argument_list|)
return|;
block|}
end_elseif
begin_else
else|else
block|{
return|return
name|QVector3D
argument_list|(
name|vector
operator|.
name|x
argument_list|()
operator|*
name|m
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|vector
operator|.
name|y
argument_list|()
operator|*
name|m
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|vector
operator|.
name|z
argument_list|()
operator|*
name|m
index|[
literal|2
index|]
index|[
literal|0
index|]
argument_list|,
name|vector
operator|.
name|x
argument_list|()
operator|*
name|m
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|vector
operator|.
name|y
argument_list|()
operator|*
name|m
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|vector
operator|.
name|z
argument_list|()
operator|*
name|m
index|[
literal|2
index|]
index|[
literal|1
index|]
argument_list|,
name|vector
operator|.
name|x
argument_list|()
operator|*
name|m
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|+
name|vector
operator|.
name|y
argument_list|()
operator|*
name|m
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|+
name|vector
operator|.
name|z
argument_list|()
operator|*
name|m
index|[
literal|2
index|]
index|[
literal|2
index|]
argument_list|)
return|;
block|}
end_else
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_VECTOR4D
end_ifndef
begin_expr_stmt
unit|inline
name|QVector4D
name|QMatrix4x4
operator|::
name|map
argument_list|(
argument|const QVector4D& point
argument_list|)
specifier|const
block|{
return|return
operator|*
name|this
operator|*
name|point
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
specifier|inline
name|float
operator|*
name|QMatrix4x4
operator|::
name|data
argument_list|()
block|{
comment|// We have to assume that the caller will modify the matrix elements,
comment|// so we flip it over to "General" mode.
name|flagBits
operator|=
name|General
block|;
return|return
operator|*
name|m
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_GUI_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
name|dbg
operator|,
specifier|const
name|QMatrix4x4
operator|&
name|m
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_expr_stmt
name|Q_GUI_EXPORT
name|QDataStream
operator|&
name|operator
operator|<<
operator|(
name|QDataStream
operator|&
operator|,
specifier|const
name|QMatrix4x4
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_GUI_EXPORT
name|QDataStream
operator|&
name|operator
operator|>>
operator|(
name|QDataStream
operator|&
operator|,
name|QMatrix4x4
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|QT_DEPRECATED_SINCE
argument_list|(
literal|5
operator|,
literal|0
argument_list|)
end_if
begin_expr_stmt
DECL|variable|N
name|template
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|>
DECL|function|qGenericMatrixToMatrix4x4
name|QT_DEPRECATED
name|QMatrix4x4
name|qGenericMatrixToMatrix4x4
argument_list|(
argument|const QGenericMatrix<N
argument_list|,
argument|M
argument_list|,
argument|float>& matrix
argument_list|)
block|{
return|return
name|QMatrix4x4
argument_list|(
name|matrix
operator|.
name|constData
argument_list|()
argument_list|,
name|N
argument_list|,
name|M
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|N
name|template
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|>
DECL|variable|N
DECL|variable|M
DECL|function|qGenericMatrixFromMatrix4x4
name|QT_DEPRECATED
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|float
operator|>
name|qGenericMatrixFromMatrix4x4
argument_list|(
argument|const QMatrix4x4& matrix
argument_list|)
block|{
name|QGenericMatrix
operator|<
name|N
block|,
name|M
block|,
name|float
operator|>
name|result
block|;
specifier|const
name|float
operator|*
name|m
operator|=
name|matrix
operator|.
name|constData
argument_list|()
block|;
name|float
operator|*
name|values
operator|=
name|result
operator|.
name|data
argument_list|()
block|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
block|{
if|if
condition|(
name|col
operator|<
literal|4
operator|&&
name|row
operator|<
literal|4
condition|)
name|values
index|[
name|col
operator|*
name|M
operator|+
name|row
index|]
operator|=
name|m
index|[
name|col
operator|*
literal|4
operator|+
name|row
index|]
expr_stmt|;
elseif|else
if|if
condition|(
name|col
operator|==
name|row
condition|)
name|values
index|[
name|col
operator|*
name|M
operator|+
name|row
index|]
operator|=
literal|1.0f
expr_stmt|;
else|else
name|values
index|[
name|col
operator|*
name|M
operator|+
name|row
index|]
operator|=
literal|0.0f
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
unit|}     return
name|result
expr_stmt|;
end_expr_stmt
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_macro
unit|QT_END_NAMESPACE
name|QT_END_HEADER
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
