begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QGENERICMATRIX_H
end_ifndef
begin_define
DECL|macro|QGENERICMATRIX_H
define|#
directive|define
name|QGENERICMATRIX_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qmetatype.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdatastream.h>
end_include
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|N
DECL|variable|M
name|template
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
name|class
name|QGenericMatrix
block|{
name|public
operator|:
name|QGenericMatrix
argument_list|()
block|;
name|explicit
name|QGenericMatrix
argument_list|(
argument|Qt::Initialization
argument_list|)
block|{}
name|explicit
name|QGenericMatrix
argument_list|(
specifier|const
name|T
operator|*
name|values
argument_list|)
block|;
specifier|const
name|T
operator|&
name|operator
argument_list|()
operator|(
name|int
name|row
operator|,
name|int
name|column
operator|)
specifier|const
block|;
name|T
operator|&
name|operator
argument_list|()
operator|(
name|int
name|row
operator|,
name|int
name|column
operator|)
block|;
name|bool
name|isIdentity
argument_list|()
specifier|const
block|;
name|void
name|setToIdentity
argument_list|()
block|;
name|void
name|fill
argument_list|(
argument|T value
argument_list|)
block|;
name|QGenericMatrix
operator|<
name|M
block|,
name|N
block|,
name|T
operator|>
name|transposed
argument_list|()
specifier|const
name|Q_REQUIRED_RESULT
block|;
name|QGenericMatrix
operator|<
name|N
block|,
name|M
block|,
name|T
operator|>
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|other
operator|)
block|;
name|QGenericMatrix
operator|<
name|N
block|,
name|M
block|,
name|T
operator|>
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|other
operator|)
block|;
name|QGenericMatrix
operator|<
name|N
block|,
name|M
block|,
name|T
operator|>
operator|&
name|operator
operator|*=
operator|(
name|T
name|factor
operator|)
block|;
name|QGenericMatrix
operator|<
name|N
block|,
name|M
block|,
name|T
operator|>
operator|&
name|operator
operator|/=
operator|(
name|T
name|divisor
operator|)
block|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|other
operator|)
specifier|const
block|;
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|other
operator|)
specifier|const
block|;
name|void
name|copyDataTo
argument_list|(
argument|T *values
argument_list|)
specifier|const
block|;
name|T
operator|*
name|data
argument_list|()
block|{
return|return
operator|*
name|m
return|;
block|}
specifier|const
name|T
operator|*
name|data
argument_list|()
specifier|const
block|{
return|return
operator|*
name|m
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|const
name|T
operator|*
name|constData
argument_list|()
specifier|const
block|{
return|return
operator|*
name|m
return|;
block|}
end_expr_stmt
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_NO_TEMPLATE_FRIENDS
argument_list|)
end_if
begin_expr_stmt
name|template
operator|<
name|int
name|NN
operator|,
name|int
name|MM
operator|,
name|typename
name|TT
operator|>
name|friend
name|QGenericMatrix
operator|<
name|NN
operator|,
name|MM
operator|,
name|TT
operator|>
name|operator
operator|+
operator|(
specifier|const
name|QGenericMatrix
operator|<
name|NN
operator|,
name|MM
operator|,
name|TT
operator|>
operator|&
name|m1
operator|,
specifier|const
name|QGenericMatrix
operator|<
name|NN
operator|,
name|MM
operator|,
name|TT
operator|>
operator|&
name|m2
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|int
name|NN
operator|,
name|int
name|MM
operator|,
name|typename
name|TT
operator|>
name|friend
name|QGenericMatrix
operator|<
name|NN
operator|,
name|MM
operator|,
name|TT
operator|>
name|operator
operator|-
operator|(
specifier|const
name|QGenericMatrix
operator|<
name|NN
operator|,
name|MM
operator|,
name|TT
operator|>
operator|&
name|m1
operator|,
specifier|const
name|QGenericMatrix
operator|<
name|NN
operator|,
name|MM
operator|,
name|TT
operator|>
operator|&
name|m2
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|int
name|NN
operator|,
name|int
name|M1
operator|,
name|int
name|M2
operator|,
name|typename
name|TT
operator|>
name|friend
name|QGenericMatrix
operator|<
name|M1
operator|,
name|M2
operator|,
name|TT
operator|>
name|operator
operator|*
operator|(
specifier|const
name|QGenericMatrix
operator|<
name|NN
operator|,
name|M2
operator|,
name|TT
operator|>
operator|&
name|m1
operator|,
specifier|const
name|QGenericMatrix
operator|<
name|M1
operator|,
name|NN
operator|,
name|TT
operator|>
operator|&
name|m2
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|int
name|NN
operator|,
name|int
name|MM
operator|,
name|typename
name|TT
operator|>
name|friend
name|QGenericMatrix
operator|<
name|NN
operator|,
name|MM
operator|,
name|TT
operator|>
name|operator
operator|-
operator|(
specifier|const
name|QGenericMatrix
operator|<
name|NN
operator|,
name|MM
operator|,
name|TT
operator|>
operator|&
name|matrix
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|int
name|NN
operator|,
name|int
name|MM
operator|,
name|typename
name|TT
operator|>
name|friend
name|QGenericMatrix
operator|<
name|NN
operator|,
name|MM
operator|,
name|TT
operator|>
name|operator
operator|*
operator|(
name|TT
name|factor
operator|,
specifier|const
name|QGenericMatrix
operator|<
name|NN
operator|,
name|MM
operator|,
name|TT
operator|>
operator|&
name|matrix
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|int
name|NN
operator|,
name|int
name|MM
operator|,
name|typename
name|TT
operator|>
name|friend
name|QGenericMatrix
operator|<
name|NN
operator|,
name|MM
operator|,
name|TT
operator|>
name|operator
operator|*
operator|(
specifier|const
name|QGenericMatrix
operator|<
name|NN
operator|,
name|MM
operator|,
name|TT
operator|>
operator|&
name|matrix
operator|,
name|TT
name|factor
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|int
name|NN
operator|,
name|int
name|MM
operator|,
name|typename
name|TT
operator|>
name|friend
name|QGenericMatrix
operator|<
name|NN
operator|,
name|MM
operator|,
name|TT
operator|>
name|operator
operator|/
operator|(
specifier|const
name|QGenericMatrix
operator|<
name|NN
operator|,
name|MM
operator|,
name|TT
operator|>
operator|&
name|matrix
operator|,
name|TT
name|divisor
operator|)
expr_stmt|;
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|T
name|m
index|[
name|N
index|]
index|[
name|M
index|]
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Column-major order to match OpenGL.
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_NO_TEMPLATE_FRIENDS
argument_list|)
end_if
begin_expr_stmt
name|template
operator|<
name|int
name|NN
operator|,
name|int
name|MM
operator|,
name|typename
name|TT
operator|>
name|friend
name|class
name|QGenericMatrix
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|};
DECL|variable|N
DECL|variable|M
name|template
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|N
DECL|variable|M
name|class
name|QTypeInfo
operator|<
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
expr|>
DECL|variable|N
DECL|variable|M
DECL|variable|T
operator|:
name|public
name|QTypeInfoMerger
operator|<
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|,
name|T
operator|>
block|{
if|#
directive|if
name|QT_VERSION
operator|<
name|QT_VERSION_CHECK
argument_list|(
literal|6
operator|,
literal|0
operator|,
literal|0
argument_list|)
name|public
operator|:
expr|enum
block|{
name|isStatic
operator|=
name|true
block|,     }
block|;
comment|// at least Q_RELOCATABLE_TYPE, for BC during Qt 5
endif|#
directive|endif
block|}
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|N
DECL|variable|M
name|template
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|N
DECL|variable|M
DECL|function|QGenericMatrix
name|Q_INLINE_TEMPLATE
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|::
name|QGenericMatrix
argument_list|()
block|{
name|setToIdentity
argument_list|()
block|; }
DECL|variable|N
DECL|variable|M
name|template
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|N
DECL|variable|M
DECL|function|QGenericMatrix
name|Q_OUTOFLINE_TEMPLATE
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|::
name|QGenericMatrix
argument_list|(
argument|const T *values
argument_list|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|=
name|values
index|[
name|row
operator|*
name|N
operator|+
name|col
index|]
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|N
DECL|variable|M
name|template
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|N
DECL|variable|M
DECL|function|operator
name|Q_INLINE_TEMPLATE
specifier|const
name|T
operator|&
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|::
name|operator
argument_list|()
operator|(
name|int
name|row
operator|,
name|int
name|column
operator|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|row
operator|>=
literal|0
operator|&&
name|row
operator|<
name|M
operator|&&
name|column
operator|>=
literal|0
operator|&&
name|column
operator|<
name|N
argument_list|)
block|;
return|return
name|m
index|[
name|column
index|]
index|[
name|row
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|N
DECL|variable|M
name|template
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|N
DECL|variable|M
DECL|function|operator
name|Q_INLINE_TEMPLATE
name|T
operator|&
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|::
name|operator
argument_list|()
operator|(
name|int
name|row
operator|,
name|int
name|column
operator|)
block|{
name|Q_ASSERT
argument_list|(
name|row
operator|>=
literal|0
operator|&&
name|row
operator|<
name|M
operator|&&
name|column
operator|>=
literal|0
operator|&&
name|column
operator|<
name|N
argument_list|)
block|;
return|return
name|m
index|[
name|column
index|]
index|[
name|row
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|N
DECL|variable|M
name|template
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|N
DECL|variable|M
DECL|function|isIdentity
name|Q_OUTOFLINE_TEMPLATE
name|bool
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|::
name|isIdentity
argument_list|()
specifier|const
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
block|{
if|if
condition|(
name|row
operator|==
name|col
condition|)
block|{
if|if
condition|(
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|!=
literal|1.0f
condition|)
return|return
name|false
return|;
block|}
end_expr_stmt
begin_else
else|else
block|{
if|if
condition|(
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|!=
literal|0.0f
condition|)
return|return
name|false
return|;
block|}
end_else
begin_return
unit|}     }
return|return
name|true
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|N
DECL|variable|M
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|N
DECL|variable|M
DECL|function|setToIdentity
name|Q_OUTOFLINE_TEMPLATE
name|void
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|::
name|setToIdentity
argument_list|()
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
block|{
if|if
condition|(
name|row
operator|==
name|col
condition|)
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|=
literal|1.0f
expr_stmt|;
else|else
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|=
literal|0.0f
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
unit|} }
DECL|variable|N
DECL|variable|M
name|template
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|N
DECL|variable|M
DECL|function|fill
name|Q_OUTOFLINE_TEMPLATE
name|void
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|::
name|fill
argument_list|(
argument|T value
argument_list|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|=
name|value
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|N
DECL|variable|M
name|template
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|M
DECL|variable|N
DECL|variable|N
DECL|variable|M
DECL|function|transposed
name|Q_OUTOFLINE_TEMPLATE
name|QGenericMatrix
operator|<
name|M
operator|,
name|N
operator|,
name|T
operator|>
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|::
name|transposed
argument_list|()
specifier|const
block|{
name|QGenericMatrix
operator|<
name|M
block|,
name|N
block|,
name|T
operator|>
name|result
argument_list|(
name|Qt
operator|::
name|Uninitialized
argument_list|)
block|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
name|result
operator|.
name|m
index|[
name|row
index|]
index|[
name|col
index|]
operator|=
name|m
index|[
name|col
index|]
index|[
name|row
index|]
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|result
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|N
DECL|variable|M
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|N
DECL|variable|M
DECL|variable|N
DECL|variable|M
DECL|member|operator
name|Q_OUTOFLINE_TEMPLATE
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|other
operator|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|+=
name|other
operator|.
name|m
index|[
name|col
index|]
index|[
name|row
index|]
expr_stmt|;
end_expr_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|M
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|N
DECL|variable|M
DECL|variable|N
DECL|variable|M
name|Q_OUTOFLINE_TEMPLATE
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|other
operator|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|-=
name|other
operator|.
name|m
index|[
name|col
index|]
index|[
name|row
index|]
expr_stmt|;
end_expr_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|M
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|N
DECL|variable|M
DECL|variable|N
DECL|variable|M
DECL|member|operator
name|Q_OUTOFLINE_TEMPLATE
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|::
name|operator
operator|*=
operator|(
name|T
name|factor
operator|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|*=
name|factor
expr_stmt|;
end_expr_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|M
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|N
DECL|variable|M
DECL|function|operator
name|Q_OUTOFLINE_TEMPLATE
name|bool
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|::
name|operator
operator|==
operator|(
specifier|const
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|other
operator|)
specifier|const
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
block|{
if|if
condition|(
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|!=
name|other
operator|.
name|m
index|[
name|col
index|]
index|[
name|row
index|]
condition|)
return|return
name|false
return|;
block|}
end_expr_stmt
begin_return
return|return
name|true
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|N
DECL|variable|M
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|N
DECL|variable|M
DECL|function|operator
name|Q_OUTOFLINE_TEMPLATE
name|bool
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|::
name|operator
operator|!=
operator|(
specifier|const
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|other
operator|)
specifier|const
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
block|{
if|if
condition|(
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|!=
name|other
operator|.
name|m
index|[
name|col
index|]
index|[
name|row
index|]
condition|)
return|return
name|true
return|;
block|}
end_expr_stmt
begin_return
return|return
name|false
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|N
DECL|variable|M
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|N
DECL|variable|M
DECL|variable|N
DECL|variable|M
DECL|member|operator
name|Q_OUTOFLINE_TEMPLATE
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|::
name|operator
operator|/=
operator|(
name|T
name|divisor
operator|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|/=
name|divisor
expr_stmt|;
end_expr_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|M
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|N
DECL|variable|M
DECL|function|operator
name|Q_OUTOFLINE_TEMPLATE
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
name|operator
operator|+
operator|(
specifier|const
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|m1
operator|,
specifier|const
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|m2
operator|)
block|{
name|QGenericMatrix
operator|<
name|N
block|,
name|M
block|,
name|T
operator|>
name|result
argument_list|(
name|Qt
operator|::
name|Uninitialized
argument_list|)
block|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
name|result
operator|.
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|=
name|m1
operator|.
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|+
name|m2
operator|.
name|m
index|[
name|col
index|]
index|[
name|row
index|]
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|result
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|N
DECL|variable|M
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|N
DECL|variable|M
DECL|function|operator
name|Q_OUTOFLINE_TEMPLATE
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
name|operator
operator|-
operator|(
specifier|const
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|m1
operator|,
specifier|const
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|m2
operator|)
block|{
name|QGenericMatrix
operator|<
name|N
block|,
name|M
block|,
name|T
operator|>
name|result
argument_list|(
name|Qt
operator|::
name|Uninitialized
argument_list|)
block|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
name|result
operator|.
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|=
name|m1
operator|.
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|-
name|m2
operator|.
name|m
index|[
name|col
index|]
index|[
name|row
index|]
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|result
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|N
DECL|variable|M1
DECL|variable|M2
operator|<
name|int
name|N
operator|,
name|int
name|M1
operator|,
name|int
name|M2
operator|,
name|typename
name|T
operator|>
DECL|variable|M1
DECL|variable|M2
name|Q_OUTOFLINE_TEMPLATE
name|QGenericMatrix
operator|<
name|M1
operator|,
name|M2
operator|,
name|T
operator|>
name|operator
operator|*
operator|(
specifier|const
name|QGenericMatrix
operator|<
name|N
operator|,
name|M2
operator|,
name|T
operator|>
operator|&
name|m1
operator|,
specifier|const
name|QGenericMatrix
operator|<
name|M1
operator|,
name|N
operator|,
name|T
operator|>
operator|&
name|m2
operator|)
block|{
name|QGenericMatrix
operator|<
name|M1
block|,
name|M2
block|,
name|T
operator|>
name|result
argument_list|(
name|Qt
operator|::
name|Uninitialized
argument_list|)
block|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M2
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|M1
condition|;
operator|++
name|col
control|)
block|{
name|T
name|sum
argument_list|(
literal|0.0f
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|N
condition|;
operator|++
name|j
control|)
name|sum
operator|+=
name|m1
operator|.
name|m
index|[
name|j
index|]
index|[
name|row
index|]
operator|*
name|m2
operator|.
name|m
index|[
name|col
index|]
index|[
name|j
index|]
expr_stmt|;
name|result
operator|.
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|=
name|sum
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
unit|}     return
name|result
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
DECL|variable|N
DECL|variable|M
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|N
DECL|variable|M
DECL|function|operator
name|Q_OUTOFLINE_TEMPLATE
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
name|operator
operator|-
operator|(
specifier|const
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|matrix
operator|)
block|{
name|QGenericMatrix
operator|<
name|N
block|,
name|M
block|,
name|T
operator|>
name|result
argument_list|(
name|Qt
operator|::
name|Uninitialized
argument_list|)
block|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
name|result
operator|.
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|=
operator|-
name|matrix
operator|.
name|m
index|[
name|col
index|]
index|[
name|row
index|]
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|result
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|N
DECL|variable|M
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|N
DECL|variable|M
name|Q_OUTOFLINE_TEMPLATE
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
name|operator
operator|*
operator|(
name|T
name|factor
operator|,
specifier|const
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|matrix
operator|)
block|{
name|QGenericMatrix
operator|<
name|N
block|,
name|M
block|,
name|T
operator|>
name|result
argument_list|(
name|Qt
operator|::
name|Uninitialized
argument_list|)
block|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
name|result
operator|.
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|=
name|matrix
operator|.
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|*
name|factor
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|result
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|N
DECL|variable|M
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|N
DECL|variable|M
name|Q_OUTOFLINE_TEMPLATE
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
name|operator
operator|*
operator|(
specifier|const
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|matrix
operator|,
name|T
name|factor
operator|)
block|{
name|QGenericMatrix
operator|<
name|N
block|,
name|M
block|,
name|T
operator|>
name|result
argument_list|(
name|Qt
operator|::
name|Uninitialized
argument_list|)
block|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
name|result
operator|.
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|=
name|matrix
operator|.
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|*
name|factor
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|result
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|N
DECL|variable|M
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|N
DECL|variable|M
DECL|function|operator
name|Q_OUTOFLINE_TEMPLATE
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
name|operator
operator|/
operator|(
specifier|const
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|matrix
operator|,
name|T
name|divisor
operator|)
block|{
name|QGenericMatrix
operator|<
name|N
block|,
name|M
block|,
name|T
operator|>
name|result
argument_list|(
name|Qt
operator|::
name|Uninitialized
argument_list|)
block|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
name|result
operator|.
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|=
name|matrix
operator|.
name|m
index|[
name|col
index|]
index|[
name|row
index|]
operator|/
name|divisor
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|result
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|N
DECL|variable|M
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|variable|N
DECL|variable|M
DECL|function|copyDataTo
name|Q_OUTOFLINE_TEMPLATE
name|void
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|::
name|copyDataTo
argument_list|(
argument|T *values
argument_list|)
specifier|const
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
name|values
index|[
name|row
operator|*
name|N
operator|+
name|col
index|]
operator|=
name|T
argument_list|(
name|m
index|[
name|col
index|]
index|[
name|row
index|]
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_comment
comment|// Define aliases for the useful variants of QGenericMatrix.
end_comment
begin_typedef
DECL|typedef|QGenericMatrix
DECL|typedef|QMatrix2x2
typedef|typedef
name|QGenericMatrix
operator|<
literal|2
operator|,
literal|2
operator|,
name|float
operator|>
name|QMatrix2x2
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QGenericMatrix
DECL|typedef|QMatrix2x3
typedef|typedef
name|QGenericMatrix
operator|<
literal|2
operator|,
literal|3
operator|,
name|float
operator|>
name|QMatrix2x3
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QGenericMatrix
DECL|typedef|QMatrix2x4
typedef|typedef
name|QGenericMatrix
operator|<
literal|2
operator|,
literal|4
operator|,
name|float
operator|>
name|QMatrix2x4
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QGenericMatrix
DECL|typedef|QMatrix3x2
typedef|typedef
name|QGenericMatrix
operator|<
literal|3
operator|,
literal|2
operator|,
name|float
operator|>
name|QMatrix3x2
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QGenericMatrix
DECL|typedef|QMatrix3x3
typedef|typedef
name|QGenericMatrix
operator|<
literal|3
operator|,
literal|3
operator|,
name|float
operator|>
name|QMatrix3x3
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QGenericMatrix
DECL|typedef|QMatrix3x4
typedef|typedef
name|QGenericMatrix
operator|<
literal|3
operator|,
literal|4
operator|,
name|float
operator|>
name|QMatrix3x4
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QGenericMatrix
DECL|typedef|QMatrix4x2
typedef|typedef
name|QGenericMatrix
operator|<
literal|4
operator|,
literal|2
operator|,
name|float
operator|>
name|QMatrix4x2
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QGenericMatrix
DECL|typedef|QMatrix4x3
typedef|typedef
name|QGenericMatrix
operator|<
literal|4
operator|,
literal|3
operator|,
name|float
operator|>
name|QMatrix4x3
expr_stmt|;
end_typedef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
DECL|variable|N
DECL|variable|M
name|template
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|function|operator
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
name|dbg
operator|,
specifier|const
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|m
operator|)
block|{
name|QDebugStateSaver
name|saver
argument_list|(
name|dbg
argument_list|)
block|;
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QGenericMatrix<"
operator|<<
name|N
operator|<<
literal|", "
operator|<<
name|M
operator|<<
literal|", "
operator|<<
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|name
argument_list|()
operator|<<
literal|">("
operator|<<
name|endl
operator|<<
name|qSetFieldWidth
argument_list|(
literal|10
argument_list|)
block|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
name|dbg
operator|<<
name|m
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|dbg
operator|<<
name|endl
expr_stmt|;
block|}
name|dbg
operator|<<
name|qSetFieldWidth
argument_list|(
literal|0
argument_list|)
operator|<<
literal|')'
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|dbg
return|;
end_return
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_expr_stmt
unit|template
DECL|variable|N
DECL|variable|M
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|function|operator
name|QDataStream
operator|&
name|operator
operator|<<
operator|(
name|QDataStream
operator|&
name|stream
operator|,
specifier|const
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|matrix
operator|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
name|stream
operator|<<
name|double
argument_list|(
name|matrix
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|stream
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|N
DECL|variable|M
operator|<
name|int
name|N
operator|,
name|int
name|M
operator|,
name|typename
name|T
operator|>
DECL|function|operator
name|QDataStream
operator|&
name|operator
operator|>>
operator|(
name|QDataStream
operator|&
name|stream
operator|,
name|QGenericMatrix
operator|<
name|N
operator|,
name|M
operator|,
name|T
operator|>
operator|&
name|matrix
operator|)
block|{
name|double
name|x
block|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|M
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|N
condition|;
operator|++
name|col
control|)
block|{
name|stream
operator|>>
name|x
expr_stmt|;
name|matrix
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
operator|=
name|T
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
unit|}     return
name|stream
expr_stmt|;
end_expr_stmt
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_macro
unit|QT_END_NAMESPACE
name|Q_DECLARE_METATYPE
argument_list|(
argument|QMatrix2x2
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QMatrix2x3
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QMatrix2x4
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QMatrix3x2
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QMatrix3x3
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QMatrix3x4
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QMatrix4x2
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QMatrix4x3
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
