begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd and its Subsidiary(-ies) nor the **     names of its contributors may be used to endorse or promote products **     derived from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_include
include|#
directive|include
file|"window.h"
end_include
begin_constructor
DECL|function|Window
name|Window
operator|::
name|Window
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|text
operator|=
name|QString
argument_list|(
literal|"Support for text rendering and layout in Qt 4 has been "
literal|"redesigned around a system that allows textual content to "
literal|"be represented in a more flexible way than was possible "
literal|"with Qt 3. Qt 4 also provides a more convenient "
literal|"programming interface for editing documents. These "
literal|"improvements are made available through a reimplementation "
literal|"of the existing text rendering engine, and the "
literal|"introduction of several new classes. "
literal|"See the relevant module overview for a detailed discussion "
literal|"of this framework. The following sections provide a brief "
literal|"overview of the main concepts behind Scribe."
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Plain Text Layout"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|paintEvent
name|void
name|Window
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|event
parameter_list|)
block|{
comment|//! [0]
name|QTextLayout
name|textLayout
argument_list|(
name|text
argument_list|,
name|font
argument_list|)
decl_stmt|;
name|qreal
name|margin
init|=
literal|10
decl_stmt|;
name|qreal
name|radius
init|=
name|qMin
argument_list|(
name|width
argument_list|()
operator|/
literal|2.0
argument_list|,
name|height
argument_list|()
operator|/
literal|2.0
argument_list|)
operator|-
name|margin
decl_stmt|;
name|QFontMetrics
name|fm
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|qreal
name|lineHeight
init|=
name|fm
operator|.
name|height
argument_list|()
decl_stmt|;
name|qreal
name|y
init|=
literal|0
decl_stmt|;
name|textLayout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
while|while
condition|(
literal|1
condition|)
block|{
comment|// create a new line
name|QTextLine
name|line
init|=
name|textLayout
operator|.
name|createLine
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|line
operator|.
name|isValid
argument_list|()
condition|)
break|break;
name|qreal
name|x1
init|=
name|qMax
argument_list|(
literal|0.0
argument_list|,
name|pow
argument_list|(
name|pow
argument_list|(
name|radius
argument_list|,
literal|2
argument_list|)
operator|-
name|pow
argument_list|(
name|radius
operator|-
name|y
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0.5
argument_list|)
argument_list|)
decl_stmt|;
name|qreal
name|x2
init|=
name|qMax
argument_list|(
literal|0.0
argument_list|,
name|pow
argument_list|(
name|pow
argument_list|(
name|radius
argument_list|,
literal|2
argument_list|)
operator|-
name|pow
argument_list|(
name|radius
operator|-
operator|(
name|y
operator|+
name|lineHeight
operator|)
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0.5
argument_list|)
argument_list|)
decl_stmt|;
name|qreal
name|x
init|=
name|qMax
argument_list|(
name|x1
argument_list|,
name|x2
argument_list|)
operator|+
name|margin
decl_stmt|;
name|qreal
name|lineWidth
init|=
operator|(
name|width
argument_list|()
operator|-
name|margin
operator|)
operator|-
name|x
decl_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
name|lineWidth
argument_list|)
expr_stmt|;
name|line
operator|.
name|setPosition
argument_list|(
name|QPointF
argument_list|(
name|x
argument_list|,
name|margin
operator|+
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|y
operator|+=
name|line
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|textLayout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QPainter
name|painter
decl_stmt|;
name|painter
operator|.
name|begin
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
name|painter
operator|.
name|fillRect
argument_list|(
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setBrush
argument_list|(
name|QBrush
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
argument_list|)
expr_stmt|;
name|textLayout
operator|.
name|draw
argument_list|(
operator|&
name|painter
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setBrush
argument_list|(
name|QBrush
argument_list|(
name|QColor
argument_list|(
literal|"#a6ce39"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawEllipse
argument_list|(
name|QRectF
argument_list|(
operator|-
name|radius
argument_list|,
name|margin
argument_list|,
literal|2
operator|*
name|radius
argument_list|,
literal|2
operator|*
name|radius
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
comment|//! [0]
block|}
end_function
end_unit
