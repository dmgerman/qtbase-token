begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd and its Subsidiary(-ies) nor the **     names of its contributors may be used to endorse or promote products **     derived from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/* screenwidget.cpp  A widget to display colour components from an image using independently selected colors. Controls are provided to allow the image to be inverted, and the color to be selection via a standard dialog. The image is displayed in a label widget. */
end_comment
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QColorDialog>
end_include
begin_include
include|#
directive|include
file|<QGridLayout>
end_include
begin_include
include|#
directive|include
file|<QImage>
end_include
begin_include
include|#
directive|include
file|<QLabel>
end_include
begin_include
include|#
directive|include
file|<QMenu>
end_include
begin_include
include|#
directive|include
file|<QMimeData>
end_include
begin_include
include|#
directive|include
file|<QMouseEvent>
end_include
begin_include
include|#
directive|include
file|<QPixmap>
end_include
begin_include
include|#
directive|include
file|<QPushButton>
end_include
begin_include
include|#
directive|include
file|<QWidget>
end_include
begin_include
include|#
directive|include
file|"screenwidget.h"
end_include
begin_comment
comment|/*! Initializes the paint color, the mask color (cyan, magenta, or yellow), connects the color selector and invert checkbox to functions, and creates a two-by-two grid layout. */
end_comment
begin_constructor
DECL|function|ScreenWidget
name|ScreenWidget
operator|::
name|ScreenWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|QColor
name|initialColor
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|Separation
name|mask
parameter_list|,
specifier|const
name|QSize
modifier|&
name|labelSize
parameter_list|)
member_init_list|:
name|QFrame
argument_list|(
name|parent
argument_list|)
block|{
name|paintColor
operator|=
name|initialColor
expr_stmt|;
name|maskColor
operator|=
name|mask
expr_stmt|;
name|inverted
operator|=
literal|false
expr_stmt|;
name|imageLabel
operator|=
operator|new
name|QLabel
expr_stmt|;
name|imageLabel
operator|->
name|setFrameShadow
argument_list|(
name|QFrame
operator|::
name|Sunken
argument_list|)
expr_stmt|;
name|imageLabel
operator|->
name|setFrameShape
argument_list|(
name|QFrame
operator|::
name|StyledPanel
argument_list|)
expr_stmt|;
name|imageLabel
operator|->
name|setMinimumSize
argument_list|(
name|labelSize
argument_list|)
expr_stmt|;
name|nameLabel
operator|=
operator|new
name|QLabel
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|colorButton
operator|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"Modify..."
argument_list|)
argument_list|)
expr_stmt|;
name|colorButton
operator|->
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|colorButton
operator|->
name|setMinimumSize
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|QPalette
name|palette
argument_list|(
name|colorButton
operator|->
name|palette
argument_list|()
argument_list|)
decl_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|initialColor
argument_list|)
expr_stmt|;
name|colorButton
operator|->
name|setPalette
argument_list|(
name|palette
argument_list|)
expr_stmt|;
name|invertButton
operator|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"Invert"
argument_list|)
argument_list|)
expr_stmt|;
comment|//invertButton->setToggleButton(true);
comment|//invertButton->setOn(inverted);
name|invertButton
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|colorButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|setColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|invertButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|invertImage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QGridLayout
modifier|*
name|gridLayout
init|=
operator|new
name|QGridLayout
decl_stmt|;
name|gridLayout
operator|->
name|addWidget
argument_list|(
name|imageLabel
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|gridLayout
operator|->
name|addWidget
argument_list|(
name|nameLabel
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gridLayout
operator|->
name|addWidget
argument_list|(
name|colorButton
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|gridLayout
operator|->
name|addWidget
argument_list|(
name|invertButton
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|setLayout
argument_list|(
name|gridLayout
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Creates a new image by separating out the cyan, magenta, or yellow     component, depending on the mask color specified in the constructor.      The amount of the component found in each pixel of the image is used     to determine how much of a user-selected ink is used for each pixel     in the new image for the label widget. */
end_comment
begin_function
DECL|function|createImage
name|void
name|ScreenWidget
operator|::
name|createImage
parameter_list|()
block|{
name|newImage
operator|=
name|originalImage
operator|.
name|copy
argument_list|()
expr_stmt|;
comment|// Create CMY components for the ink being used.
name|float
name|cyanInk
init|=
operator|(
literal|255
operator|-
name|paintColor
operator|.
name|red
argument_list|()
operator|)
operator|/
literal|255.0
decl_stmt|;
name|float
name|magentaInk
init|=
operator|(
literal|255
operator|-
name|paintColor
operator|.
name|green
argument_list|()
operator|)
operator|/
literal|255.0
decl_stmt|;
name|float
name|yellowInk
init|=
operator|(
literal|255
operator|-
name|paintColor
operator|.
name|blue
argument_list|()
operator|)
operator|/
literal|255.0
decl_stmt|;
name|int
function_decl|(
modifier|*
name|convert
function_decl|)
parameter_list|(
name|QRgb
parameter_list|)
function_decl|;
switch|switch
condition|(
name|maskColor
condition|)
block|{
case|case
name|Cyan
case|:
name|convert
operator|=
name|qRed
expr_stmt|;
break|break;
case|case
name|Magenta
case|:
name|convert
operator|=
name|qGreen
expr_stmt|;
break|break;
case|case
name|Yellow
case|:
name|convert
operator|=
name|qBlue
expr_stmt|;
break|break;
block|}
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|newImage
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|newImage
operator|.
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
name|QRgb
name|p
argument_list|(
name|originalImage
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
decl_stmt|;
comment|// Separate the source pixel into its cyan component.
name|int
name|amount
decl_stmt|;
if|if
condition|(
name|inverted
condition|)
name|amount
operator|=
name|convert
argument_list|(
name|p
argument_list|)
expr_stmt|;
else|else
name|amount
operator|=
literal|255
operator|-
name|convert
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|QColor
name|newColor
argument_list|(
literal|255
operator|-
name|qMin
argument_list|(
name|int
argument_list|(
name|amount
operator|*
name|cyanInk
argument_list|)
argument_list|,
literal|255
argument_list|)
argument_list|,
literal|255
operator|-
name|qMin
argument_list|(
name|int
argument_list|(
name|amount
operator|*
name|magentaInk
argument_list|)
argument_list|,
literal|255
argument_list|)
argument_list|,
literal|255
operator|-
name|qMin
argument_list|(
name|int
argument_list|(
name|amount
operator|*
name|yellowInk
argument_list|)
argument_list|,
literal|255
argument_list|)
argument_list|)
decl_stmt|;
name|newImage
operator|.
name|setPixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|newColor
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|imageLabel
operator|->
name|setPixmap
argument_list|(
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|newImage
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns a pointer to the modified image. */
end_comment
begin_function
DECL|function|image
name|QImage
modifier|*
name|ScreenWidget
operator|::
name|image
parameter_list|()
block|{
return|return
operator|&
name|newImage
return|;
block|}
end_function
begin_comment
comment|/*!     Sets whether the amount of ink applied to the canvas is to be inverted     (subtracted from the maximum value) before the ink is applied. */
end_comment
begin_function
DECL|function|invertImage
name|void
name|ScreenWidget
operator|::
name|invertImage
parameter_list|()
block|{
comment|//inverted = invertButton->isOn();
name|inverted
operator|=
operator|!
name|inverted
expr_stmt|;
name|createImage
argument_list|()
expr_stmt|;
emit|emit
name|imageChanged
argument_list|()
emit|;
block|}
end_function
begin_comment
comment|/*!     Separate the current image into cyan, magenta, and yellow components.     Create a representation of how each component might appear when applied     to a blank white piece of paper. */
end_comment
begin_function
DECL|function|setColor
name|void
name|ScreenWidget
operator|::
name|setColor
parameter_list|()
block|{
name|QColor
name|newColor
init|=
name|QColorDialog
operator|::
name|getColor
argument_list|(
name|paintColor
argument_list|)
decl_stmt|;
if|if
condition|(
name|newColor
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|paintColor
operator|=
name|newColor
expr_stmt|;
name|QPalette
name|palette
argument_list|(
name|colorButton
operator|->
name|palette
argument_list|()
argument_list|)
decl_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|paintColor
argument_list|)
expr_stmt|;
name|colorButton
operator|->
name|setPalette
argument_list|(
name|palette
argument_list|)
expr_stmt|;
name|createImage
argument_list|()
expr_stmt|;
emit|emit
name|imageChanged
argument_list|()
emit|;
block|}
block|}
end_function
begin_comment
comment|/*!     Records the original image selected by the user, creates a color     separation, and enables the invert image checkbox. */
end_comment
begin_function
DECL|function|setImage
name|void
name|ScreenWidget
operator|::
name|setImage
parameter_list|(
name|QImage
modifier|&
name|image
parameter_list|)
block|{
name|originalImage
operator|=
name|image
expr_stmt|;
name|createImage
argument_list|()
expr_stmt|;
name|invertButton
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
