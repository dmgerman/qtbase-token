begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui>
end_include
begin_function
DECL|function|tr
name|QString
name|tr
parameter_list|(
specifier|const
name|char
modifier|*
name|text
parameter_list|)
block|{
return|return
name|QApplication
operator|::
name|translate
argument_list|(
name|text
argument_list|,
name|text
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QTextEdit
modifier|*
name|editor
init|=
operator|new
name|QTextEdit
decl_stmt|;
comment|//! [0]
name|QTextDocument
modifier|*
name|document
init|=
name|editor
operator|->
name|document
argument_list|()
decl_stmt|;
name|QTextCursor
name|redCursor
argument_list|(
name|document
argument_list|)
decl_stmt|;
comment|//! [0] //! [1]
name|QTextCursor
name|blueCursor
argument_list|(
name|document
argument_list|)
decl_stmt|;
comment|//! [1]
name|QTextCharFormat
name|redFormat
argument_list|(
name|redCursor
operator|.
name|charFormat
argument_list|()
argument_list|)
decl_stmt|;
name|redFormat
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|blueFormat
argument_list|(
name|blueCursor
operator|.
name|charFormat
argument_list|()
argument_list|)
decl_stmt|;
name|blueFormat
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|redCursor
operator|.
name|setCharFormat
argument_list|(
name|redFormat
argument_list|)
expr_stmt|;
name|blueCursor
operator|.
name|setCharFormat
argument_list|(
name|blueFormat
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
name|redCursor
operator|.
name|insertText
argument_list|(
name|tr
argument_list|(
literal|"%1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|,
name|redFormat
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|5
operator|==
literal|0
condition|)
name|blueCursor
operator|.
name|insertText
argument_list|(
name|tr
argument_list|(
literal|"%1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|,
name|blueFormat
argument_list|)
expr_stmt|;
block|}
name|editor
operator|->
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Text Document Cursors"
argument_list|)
argument_list|)
expr_stmt|;
name|editor
operator|->
name|resize
argument_list|(
literal|320
argument_list|,
literal|480
argument_list|)
expr_stmt|;
name|editor
operator|->
name|show
argument_list|()
expr_stmt|;
return|return
name|app
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
end_unit
