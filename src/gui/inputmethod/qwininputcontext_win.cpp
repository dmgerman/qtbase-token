begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwininputcontext_p.h"
end_include
begin_include
include|#
directive|include
file|"qinputcontext_p.h"
end_include
begin_include
include|#
directive|include
file|"qfont.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qtextformat.h"
end_include
begin_include
include|#
directive|include
file|"qtextboundaryfinder.h"
end_include
begin_comment
comment|//#define Q_IME_DEBUG
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_IME_DEBUG
end_ifdef
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
end_if
begin_function_decl
specifier|extern
name|void
name|qt_wince_show_SIP
parameter_list|(
name|bool
name|show
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// defined in qguifunctions_wince.cpp
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|bool
name|qt_sendSpontaneousEvent
parameter_list|(
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|DEFINE_GUID
argument_list|(
name|IID_IActiveIMMApp
argument_list|,
literal|0x08c0e040
argument_list|,
literal|0x62d1
argument_list|,
literal|0x11d1
argument_list|,
literal|0x93
argument_list|,
literal|0x26
argument_list|,
literal|0x0
argument_list|,
literal|0x60
argument_list|,
literal|0xb0
argument_list|,
literal|0x67
argument_list|,
literal|0xb8
argument_list|,
literal|0x6e
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|DEFINE_GUID
argument_list|(
name|CLSID_CActiveIMM
argument_list|,
literal|0x4955DD33
argument_list|,
literal|0xB159
argument_list|,
literal|0x11d0
argument_list|,
literal|0x8F
argument_list|,
literal|0xCF
argument_list|,
literal|0x0
argument_list|,
literal|0xAA
argument_list|,
literal|0x00
argument_list|,
literal|0x6B
argument_list|,
literal|0xCC
argument_list|,
literal|0x59
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|DEFINE_GUID
argument_list|(
name|IID_IActiveIMMMessagePumpOwner
argument_list|,
literal|0xb5cf2cfa
argument_list|,
literal|0x8aeb
argument_list|,
literal|0x11d1
argument_list|,
literal|0x93
argument_list|,
literal|0x64
argument_list|,
literal|0x0
argument_list|,
literal|0x60
argument_list|,
literal|0xb0
argument_list|,
literal|0x67
argument_list|,
literal|0xb8
argument_list|,
literal|0x6e
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|IEnumRegisterWordW
name|interface
name|IEnumRegisterWordW
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|IEnumInputContext
name|interface
name|IEnumInputContext
decl_stmt|;
end_decl_stmt
begin_function_decl
name|bool
name|qt_sendSpontaneousEvent
parameter_list|(
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|IFMETHOD
define|#
directive|define
name|IFMETHOD
value|HRESULT STDMETHODCALLTYPE
end_define
begin_decl_stmt
name|interface
name|IActiveIMMApp
range|:
specifier|public
name|IUnknown
block|{
specifier|public
operator|:
specifier|virtual
name|IFMETHOD
name|AssociateContext
argument_list|(
argument|HWND hWnd
argument_list|,
argument|HIMC hIME
argument_list|,
argument|HIMC __RPC_FAR *phPrev
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|dummy_ConfigureIMEA
argument_list|()
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|ConfigureIMEW
argument_list|(
argument|HKL hKL
argument_list|,
argument|HWND hWnd
argument_list|,
argument|DWORD dwMode
argument_list|,
argument|REGISTERWORDW __RPC_FAR *pData
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|CreateContext
argument_list|(
argument|HIMC __RPC_FAR *phIMC
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|DestroyContext
argument_list|(
argument|HIMC hIME
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|dummy_EnumRegisterWordA
argument_list|()
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|EnumRegisterWordW
argument_list|(
argument|HKL hKL
argument_list|,
argument|LPWSTR szReading
argument_list|,
argument|DWORD dwStyle
argument_list|,
argument|LPWSTR szRegister
argument_list|,
argument|LPVOID pData
argument_list|,
argument|IEnumRegisterWordW __RPC_FAR *__RPC_FAR *pEnum
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|dummy_EscapeA
argument_list|()
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|EscapeW
argument_list|(
argument|HKL hKL
argument_list|,
argument|HIMC hIMC
argument_list|,
argument|UINT uEscape
argument_list|,
argument|LPVOID pData
argument_list|,
argument|LRESULT __RPC_FAR *plResult
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|dummy_GetCandidateListA
argument_list|()
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|GetCandidateListW
argument_list|(
argument|HIMC hIMC
argument_list|,
argument|DWORD dwIndex
argument_list|,
argument|UINT uBufLen
argument_list|,
argument|CANDIDATELIST __RPC_FAR *pCandList
argument_list|,
argument|UINT __RPC_FAR *puCopied
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|dummy_GetCandidateListCountA
argument_list|()
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|GetCandidateListCountW
argument_list|(
argument|HIMC hIMC
argument_list|,
argument|DWORD __RPC_FAR *pdwListSize
argument_list|,
argument|DWORD __RPC_FAR *pdwBufLen
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|GetCandidateWindow
argument_list|(
argument|HIMC hIMC
argument_list|,
argument|DWORD dwIndex
argument_list|,
argument|CANDIDATEFORM __RPC_FAR *pCandidate
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|dummy_GetCompositionFontA
argument_list|()
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|GetCompositionFontW
argument_list|(
argument|HIMC hIMC
argument_list|,
argument|LOGFONTW __RPC_FAR *plf
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|dummy_GetCompositionStringA
argument_list|()
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|GetCompositionStringW
argument_list|(
argument|HIMC hIMC
argument_list|,
argument|DWORD dwIndex
argument_list|,
argument|DWORD dwBufLen
argument_list|,
argument|LONG __RPC_FAR *plCopied
argument_list|,
argument|LPVOID pBuf
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|GetCompositionWindow
argument_list|(
argument|HIMC hIMC
argument_list|,
argument|COMPOSITIONFORM __RPC_FAR *pCompForm
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|GetContext
argument_list|(
argument|HWND hWnd
argument_list|,
argument|HIMC __RPC_FAR *phIMC
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|dummy_GetConversionListA
argument_list|()
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|GetConversionListW
argument_list|(
argument|HKL hKL
argument_list|,
argument|HIMC hIMC
argument_list|,
argument|LPWSTR pSrc
argument_list|,
argument|UINT uBufLen
argument_list|,
argument|UINT uFlag
argument_list|,
argument|CANDIDATELIST __RPC_FAR *pDst
argument_list|,
argument|UINT __RPC_FAR *puCopied
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|GetConversionStatus
argument_list|(
argument|HIMC hIMC
argument_list|,
argument|DWORD __RPC_FAR *pfdwConversion
argument_list|,
argument|DWORD __RPC_FAR *pfdwSentence
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|GetDefaultIMEWnd
argument_list|(
argument|HWND hWnd
argument_list|,
argument|HWND __RPC_FAR *phDefWnd
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|dummy_GetDescriptionA
argument_list|()
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|GetDescriptionW
argument_list|(
argument|HKL hKL
argument_list|,
argument|UINT uBufLen
argument_list|,
argument|LPWSTR szDescription
argument_list|,
argument|UINT __RPC_FAR *puCopied
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|dummy_GetGuideLineA
argument_list|()
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|GetGuideLineW
argument_list|(
argument|HIMC hIMC
argument_list|,
argument|DWORD dwIndex
argument_list|,
argument|DWORD dwBufLen
argument_list|,
argument|LPWSTR pBuf
argument_list|,
argument|DWORD __RPC_FAR *pdwResult
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|dummy_GetIMEFileNameA
argument_list|()
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|GetIMEFileNameW
argument_list|(
argument|HKL hKL
argument_list|,
argument|UINT uBufLen
argument_list|,
argument|LPWSTR szFileName
argument_list|,
argument|UINT __RPC_FAR *puCopied
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|GetOpenStatus
argument_list|(
argument|HIMC hIMC
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|GetProperty
argument_list|(
argument|HKL hKL
argument_list|,
argument|DWORD fdwIndex
argument_list|,
argument|DWORD __RPC_FAR *pdwProperty
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|dummy_GetRegisterWordStyleA
argument_list|()
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|GetRegisterWordStyleW
argument_list|(
argument|HKL hKL
argument_list|,
argument|UINT nItem
argument_list|,
argument|STYLEBUFW __RPC_FAR *pStyleBuf
argument_list|,
argument|UINT __RPC_FAR *puCopied
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|GetStatusWindowPos
argument_list|(
argument|HIMC hIMC
argument_list|,
argument|POINT __RPC_FAR *pptPos
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|GetVirtualKey
argument_list|(
argument|HWND hWnd
argument_list|,
argument|UINT __RPC_FAR *puVirtualKey
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|dummy_InstallIMEA
argument_list|()
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|InstallIMEW
argument_list|(
argument|LPWSTR szIMEFileName
argument_list|,
argument|LPWSTR szLayoutText
argument_list|,
argument|HKL __RPC_FAR *phKL
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|IsIME
argument_list|(
argument|HKL hKL
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|dummy_IsUIMessageA
argument_list|()
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|IsUIMessageW
argument_list|(
argument|HWND hWndIME
argument_list|,
argument|UINT msg
argument_list|,
argument|WPARAM wParam
argument_list|,
argument|LPARAM lParam
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|NotifyIME
argument_list|(
argument|HIMC hIMC
argument_list|,
argument|DWORD dwAction
argument_list|,
argument|DWORD dwIndex
argument_list|,
argument|DWORD dwValue
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|dummy_RegisterWordA
argument_list|()
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|RegisterWordW
argument_list|(
argument|HKL hKL
argument_list|,
argument|LPWSTR szReading
argument_list|,
argument|DWORD dwStyle
argument_list|,
argument|LPWSTR szRegister
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|ReleaseContext
argument_list|(
argument|HWND hWnd
argument_list|,
argument|HIMC hIMC
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|SetCandidateWindow
argument_list|(
argument|HIMC hIMC
argument_list|,
argument|CANDIDATEFORM __RPC_FAR *pCandidate
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|SetCompositionFontA
argument_list|(
argument|HIMC hIMC
argument_list|,
argument|LOGFONTA __RPC_FAR *plf
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|SetCompositionFontW
argument_list|(
argument|HIMC hIMC
argument_list|,
argument|LOGFONTW __RPC_FAR *plf
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|dummy_SetCompositionStringA
argument_list|()
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|SetCompositionStringW
argument_list|(
argument|HIMC hIMC
argument_list|,
argument|DWORD dwIndex
argument_list|,
argument|LPVOID pComp
argument_list|,
argument|DWORD dwCompLen
argument_list|,
argument|LPVOID pRead
argument_list|,
argument|DWORD dwReadLen
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|SetCompositionWindow
argument_list|(
argument|HIMC hIMC
argument_list|,
argument|COMPOSITIONFORM __RPC_FAR *pCompForm
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|SetConversionStatus
argument_list|(
argument|HIMC hIMC
argument_list|,
argument|DWORD fdwConversion
argument_list|,
argument|DWORD fdwSentence
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|SetOpenStatus
argument_list|(
argument|HIMC hIMC
argument_list|,
argument|BOOL fOpen
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|SetStatusWindowPos
argument_list|(
argument|HIMC hIMC
argument_list|,
argument|POINT __RPC_FAR *pptPos
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|SimulateHotKey
argument_list|(
argument|HWND hWnd
argument_list|,
argument|DWORD dwHotKeyID
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|dummy_UnregisterWordA
argument_list|()
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|UnregisterWordW
argument_list|(
argument|HKL hKL
argument_list|,
argument|LPWSTR szReading
argument_list|,
argument|DWORD dwStyle
argument_list|,
argument|LPWSTR szUnregister
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|Activate
argument_list|(
argument|BOOL fRestoreLayout
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|Deactivate
argument_list|(
name|void
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|OnDefWindowProc
argument_list|(
argument|HWND hWnd
argument_list|,
argument|UINT Msg
argument_list|,
argument|WPARAM wParam
argument_list|,
argument|LPARAM lParam
argument_list|,
argument|LRESULT __RPC_FAR *plResult
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|FilterClientWindows
argument_list|(
argument|ATOM __RPC_FAR *aaClassList
argument_list|,
argument|UINT uSize
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|dummy_GetCodePageA
argument_list|()
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|GetLangId
argument_list|(
argument|HKL hKL
argument_list|,
argument|LANGID __RPC_FAR *plid
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|AssociateContextEx
argument_list|(
argument|HWND hWnd
argument_list|,
argument|HIMC hIMC
argument_list|,
argument|DWORD dwFlags
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|DisableIME
argument_list|(
argument|DWORD idThread
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|dummy_GetImeMenuItemsA
argument_list|()
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|GetImeMenuItemsW
argument_list|(
argument|HIMC hIMC
argument_list|,
argument|DWORD dwFlags
argument_list|,
argument|DWORD dwType
argument_list|,
comment|/*IMEMENUITEMINFOW*/
argument|void __RPC_FAR *pImeParentMenu
argument_list|,
comment|/*IMEMENUITEMINFOW*/
argument|void __RPC_FAR *pImeMenu
argument_list|,
argument|DWORD dwSize
argument_list|,
argument|DWORD __RPC_FAR *pdwResult
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|EnumInputContext
argument_list|(
argument|DWORD idThread
argument_list|,
argument|IEnumInputContext __RPC_FAR *__RPC_FAR *ppEnum
argument_list|)
operator|=
literal|0
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|interface
name|IActiveIMMMessagePumpOwner
range|:
specifier|public
name|IUnknown
block|{
specifier|public
operator|:
specifier|virtual
name|IFMETHOD
name|Start
argument_list|(
name|void
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|End
argument_list|(
name|void
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|OnTranslateMessage
argument_list|(
argument|const MSG __RPC_FAR *pMsg
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|Pause
argument_list|(
argument|DWORD __RPC_FAR *pdwCookie
argument_list|)
operator|=
literal|0
block|;
specifier|virtual
name|IFMETHOD
name|Resume
argument_list|(
argument|DWORD dwCookie
argument_list|)
operator|=
literal|0
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|aimm
specifier|static
name|IActiveIMMApp
modifier|*
name|aimm
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|aimmpump
specifier|static
name|IActiveIMMMessagePumpOwner
modifier|*
name|aimmpump
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|imeComposition
specifier|static
name|QString
modifier|*
name|imeComposition
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|imePosition
specifier|static
name|int
name|imePosition
init|=
operator|-
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_use_rtl_extensions
name|bool
name|qt_use_rtl_extensions
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|haveCaret
specifier|static
name|bool
name|haveCaret
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|LGRPID_INSTALLED
end_ifndef
begin_define
DECL|macro|LGRPID_INSTALLED
define|#
directive|define
name|LGRPID_INSTALLED
value|0x00000001
end_define
begin_comment
DECL|macro|LGRPID_INSTALLED
comment|// installed language group ids
end_comment
begin_define
DECL|macro|LGRPID_SUPPORTED
define|#
directive|define
name|LGRPID_SUPPORTED
value|0x00000002
end_define
begin_comment
DECL|macro|LGRPID_SUPPORTED
comment|// supported language group ids
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|LGRPID_ARABIC
end_ifndef
begin_define
DECL|macro|LGRPID_WESTERN_EUROPE
define|#
directive|define
name|LGRPID_WESTERN_EUROPE
value|0x0001
end_define
begin_comment
DECL|macro|LGRPID_WESTERN_EUROPE
comment|// Western Europe& U.S.
end_comment
begin_define
DECL|macro|LGRPID_CENTRAL_EUROPE
define|#
directive|define
name|LGRPID_CENTRAL_EUROPE
value|0x0002
end_define
begin_comment
DECL|macro|LGRPID_CENTRAL_EUROPE
comment|// Central Europe
end_comment
begin_define
DECL|macro|LGRPID_BALTIC
define|#
directive|define
name|LGRPID_BALTIC
value|0x0003
end_define
begin_comment
DECL|macro|LGRPID_BALTIC
comment|// Baltic
end_comment
begin_define
DECL|macro|LGRPID_GREEK
define|#
directive|define
name|LGRPID_GREEK
value|0x0004
end_define
begin_comment
DECL|macro|LGRPID_GREEK
comment|// Greek
end_comment
begin_define
DECL|macro|LGRPID_CYRILLIC
define|#
directive|define
name|LGRPID_CYRILLIC
value|0x0005
end_define
begin_comment
DECL|macro|LGRPID_CYRILLIC
comment|// Cyrillic
end_comment
begin_define
DECL|macro|LGRPID_TURKISH
define|#
directive|define
name|LGRPID_TURKISH
value|0x0006
end_define
begin_comment
DECL|macro|LGRPID_TURKISH
comment|// Turkish
end_comment
begin_define
DECL|macro|LGRPID_JAPANESE
define|#
directive|define
name|LGRPID_JAPANESE
value|0x0007
end_define
begin_comment
DECL|macro|LGRPID_JAPANESE
comment|// Japanese
end_comment
begin_define
DECL|macro|LGRPID_KOREAN
define|#
directive|define
name|LGRPID_KOREAN
value|0x0008
end_define
begin_comment
DECL|macro|LGRPID_KOREAN
comment|// Korean
end_comment
begin_define
DECL|macro|LGRPID_TRADITIONAL_CHINESE
define|#
directive|define
name|LGRPID_TRADITIONAL_CHINESE
value|0x0009
end_define
begin_comment
DECL|macro|LGRPID_TRADITIONAL_CHINESE
comment|// Traditional Chinese
end_comment
begin_define
DECL|macro|LGRPID_SIMPLIFIED_CHINESE
define|#
directive|define
name|LGRPID_SIMPLIFIED_CHINESE
value|0x000a
end_define
begin_comment
DECL|macro|LGRPID_SIMPLIFIED_CHINESE
comment|// Simplified Chinese
end_comment
begin_define
DECL|macro|LGRPID_THAI
define|#
directive|define
name|LGRPID_THAI
value|0x000b
end_define
begin_comment
DECL|macro|LGRPID_THAI
comment|// Thai
end_comment
begin_define
DECL|macro|LGRPID_HEBREW
define|#
directive|define
name|LGRPID_HEBREW
value|0x000c
end_define
begin_comment
DECL|macro|LGRPID_HEBREW
comment|// Hebrew
end_comment
begin_define
DECL|macro|LGRPID_ARABIC
define|#
directive|define
name|LGRPID_ARABIC
value|0x000d
end_define
begin_comment
DECL|macro|LGRPID_ARABIC
comment|// Arabic
end_comment
begin_define
DECL|macro|LGRPID_VIETNAMESE
define|#
directive|define
name|LGRPID_VIETNAMESE
value|0x000e
end_define
begin_comment
DECL|macro|LGRPID_VIETNAMESE
comment|// Vietnamese
end_comment
begin_define
DECL|macro|LGRPID_INDIC
define|#
directive|define
name|LGRPID_INDIC
value|0x000f
end_define
begin_comment
DECL|macro|LGRPID_INDIC
comment|// Indic
end_comment
begin_define
DECL|macro|LGRPID_GEORGIAN
define|#
directive|define
name|LGRPID_GEORGIAN
value|0x0010
end_define
begin_comment
DECL|macro|LGRPID_GEORGIAN
comment|// Georgian
end_comment
begin_define
DECL|macro|LGRPID_ARMENIAN
define|#
directive|define
name|LGRPID_ARMENIAN
value|0x0011
end_define
begin_comment
DECL|macro|LGRPID_ARMENIAN
comment|// Armenian
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|WM_MSIME_MOUSE
specifier|static
name|DWORD
name|WM_MSIME_MOUSE
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QWinInputContext
name|QWinInputContext
operator|::
name|QWinInputContext
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QInputContext
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|recursionGuard
argument_list|(
literal|false
argument_list|)
block|{
ifndef|#
directive|ifndef
name|Q_WS_WINCE
name|QSysInfo
operator|::
name|WinVersion
name|ver
init|=
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|ver
operator|&
name|QSysInfo
operator|::
name|WV_NT_based
operator|&&
name|ver
operator|>=
name|QSysInfo
operator|::
name|WV_VISTA
condition|)
block|{
comment|// Since the IsValidLanguageGroup/IsValidLocale functions always return true on
comment|// Vista, check the Keyboard Layouts for enabling RTL.
name|UINT
name|nLayouts
init|=
name|GetKeyboardLayoutList
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|nLayouts
condition|)
block|{
name|HKL
modifier|*
name|lpList
init|=
operator|new
name|HKL
index|[
name|nLayouts
index|]
decl_stmt|;
name|GetKeyboardLayoutList
argument_list|(
name|nLayouts
argument_list|,
name|lpList
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|nLayouts
condition|;
name|i
operator|++
control|)
block|{
name|WORD
name|plangid
init|=
name|PRIMARYLANGID
argument_list|(
operator|(
name|quintptr
operator|)
name|lpList
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|plangid
operator|==
name|LANG_ARABIC
operator|||
name|plangid
operator|==
name|LANG_HEBREW
operator|||
name|plangid
operator|==
name|LANG_FARSI
ifdef|#
directive|ifdef
name|LANG_SYRIAC
operator|||
name|plangid
operator|==
name|LANG_SYRIAC
endif|#
directive|endif
condition|)
block|{
name|qt_use_rtl_extensions
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
operator|delete
index|[]
name|lpList
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// figure out whether a RTL language is installed
name|qt_use_rtl_extensions
operator|=
name|IsValidLanguageGroup
argument_list|(
name|LGRPID_ARABIC
argument_list|,
name|LGRPID_INSTALLED
argument_list|)
operator|||
name|IsValidLanguageGroup
argument_list|(
name|LGRPID_HEBREW
argument_list|,
name|LGRPID_INSTALLED
argument_list|)
operator|||
name|IsValidLocale
argument_list|(
name|MAKELCID
argument_list|(
name|MAKELANGID
argument_list|(
name|LANG_ARABIC
argument_list|,
name|SUBLANG_DEFAULT
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
argument_list|,
name|LCID_INSTALLED
argument_list|)
operator|||
name|IsValidLocale
argument_list|(
name|MAKELCID
argument_list|(
name|MAKELANGID
argument_list|(
name|LANG_HEBREW
argument_list|,
name|SUBLANG_DEFAULT
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
argument_list|,
name|LCID_INSTALLED
argument_list|)
ifdef|#
directive|ifdef
name|LANG_SYRIAC
operator|||
name|IsValidLocale
argument_list|(
name|MAKELCID
argument_list|(
name|MAKELANGID
argument_list|(
name|LANG_SYRIAC
argument_list|,
name|SUBLANG_DEFAULT
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
argument_list|,
name|LCID_INSTALLED
argument_list|)
endif|#
directive|endif
operator|||
name|IsValidLocale
argument_list|(
name|MAKELCID
argument_list|(
name|MAKELANGID
argument_list|(
name|LANG_FARSI
argument_list|,
name|SUBLANG_DEFAULT
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
argument_list|,
name|LCID_INSTALLED
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|qt_use_rtl_extensions
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
name|WM_MSIME_MOUSE
operator|=
name|RegisterWindowMessage
argument_list|(
literal|L"MSIMEMouseOperation"
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWinInputContext
name|QWinInputContext
operator|::
name|~
name|QWinInputContext
parameter_list|()
block|{
comment|// release active input method if we have one
if|if
condition|(
name|aimm
condition|)
block|{
name|aimmpump
operator|->
name|End
argument_list|()
expr_stmt|;
name|aimmpump
operator|->
name|Release
argument_list|()
expr_stmt|;
name|aimm
operator|->
name|Deactivate
argument_list|()
expr_stmt|;
name|aimm
operator|->
name|Release
argument_list|()
expr_stmt|;
name|aimm
operator|=
literal|0
expr_stmt|;
name|aimmpump
operator|=
literal|0
expr_stmt|;
block|}
operator|delete
name|imeComposition
expr_stmt|;
name|imeComposition
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|getDefaultIMEWnd
specifier|static
name|HWND
name|getDefaultIMEWnd
parameter_list|(
name|HWND
name|wnd
parameter_list|)
block|{
name|HWND
name|ime_wnd
decl_stmt|;
if|if
condition|(
name|aimm
condition|)
name|aimm
operator|->
name|GetDefaultIMEWnd
argument_list|(
name|wnd
argument_list|,
operator|&
name|ime_wnd
argument_list|)
expr_stmt|;
else|else
name|ime_wnd
operator|=
name|ImmGetDefaultIMEWnd
argument_list|(
name|wnd
argument_list|)
expr_stmt|;
return|return
name|ime_wnd
return|;
block|}
end_function
begin_function
DECL|function|getContext
specifier|static
name|HIMC
name|getContext
parameter_list|(
name|HWND
name|wnd
parameter_list|)
block|{
name|HIMC
name|imc
decl_stmt|;
if|if
condition|(
name|aimm
condition|)
name|aimm
operator|->
name|GetContext
argument_list|(
name|wnd
argument_list|,
operator|&
name|imc
argument_list|)
expr_stmt|;
else|else
name|imc
operator|=
name|ImmGetContext
argument_list|(
name|wnd
argument_list|)
expr_stmt|;
return|return
name|imc
return|;
block|}
end_function
begin_function
DECL|function|releaseContext
specifier|static
name|void
name|releaseContext
parameter_list|(
name|HWND
name|wnd
parameter_list|,
name|HIMC
name|imc
parameter_list|)
block|{
if|if
condition|(
name|aimm
condition|)
name|aimm
operator|->
name|ReleaseContext
argument_list|(
name|wnd
argument_list|,
name|imc
argument_list|)
expr_stmt|;
else|else
name|ImmReleaseContext
argument_list|(
name|wnd
argument_list|,
name|imc
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|notifyIME
specifier|static
name|void
name|notifyIME
parameter_list|(
name|HIMC
name|imc
parameter_list|,
name|DWORD
name|dwAction
parameter_list|,
name|DWORD
name|dwIndex
parameter_list|,
name|DWORD
name|dwValue
parameter_list|)
block|{
if|if
condition|(
operator|!
name|imc
condition|)
return|return;
if|if
condition|(
name|aimm
condition|)
name|aimm
operator|->
name|NotifyIME
argument_list|(
name|imc
argument_list|,
name|dwAction
argument_list|,
name|dwIndex
argument_list|,
name|dwValue
argument_list|)
expr_stmt|;
else|else
name|ImmNotifyIME
argument_list|(
name|imc
argument_list|,
name|dwAction
argument_list|,
name|dwIndex
argument_list|,
name|dwValue
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getCompositionString
specifier|static
name|LONG
name|getCompositionString
parameter_list|(
name|HIMC
name|himc
parameter_list|,
name|DWORD
name|dwIndex
parameter_list|,
name|LPVOID
name|lpbuf
parameter_list|,
name|DWORD
name|dBufLen
parameter_list|)
block|{
name|LONG
name|len
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|aimm
condition|)
name|aimm
operator|->
name|GetCompositionStringW
argument_list|(
name|himc
argument_list|,
name|dwIndex
argument_list|,
name|dBufLen
argument_list|,
operator|&
name|len
argument_list|,
name|lpbuf
argument_list|)
expr_stmt|;
else|else
name|len
operator|=
name|ImmGetCompositionString
argument_list|(
name|himc
argument_list|,
name|dwIndex
argument_list|,
name|lpbuf
argument_list|,
name|dBufLen
argument_list|)
expr_stmt|;
return|return
name|len
return|;
block|}
end_function
begin_function
DECL|function|getCursorPosition
specifier|static
name|int
name|getCursorPosition
parameter_list|(
name|HIMC
name|himc
parameter_list|)
block|{
return|return
name|getCompositionString
argument_list|(
name|himc
argument_list|,
name|GCS_CURSORPOS
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getString
specifier|static
name|QString
name|getString
parameter_list|(
name|HIMC
name|himc
parameter_list|,
name|DWORD
name|dwindex
parameter_list|,
name|int
modifier|*
name|selStart
init|=
literal|0
parameter_list|,
name|int
modifier|*
name|selLength
init|=
literal|0
parameter_list|)
block|{
specifier|const
name|int
name|bufferSize
init|=
literal|256
decl_stmt|;
name|wchar_t
name|buffer
index|[
name|bufferSize
index|]
decl_stmt|;
name|int
name|len
init|=
name|getCompositionString
argument_list|(
name|himc
argument_list|,
name|dwindex
argument_list|,
name|buffer
argument_list|,
name|bufferSize
operator|*
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|selStart
condition|)
block|{
name|char
name|attrbuffer
index|[
name|bufferSize
index|]
decl_stmt|;
name|int
name|attrlen
init|=
name|getCompositionString
argument_list|(
name|himc
argument_list|,
name|GCS_COMPATTR
argument_list|,
name|attrbuffer
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
operator|*
name|selStart
operator|=
name|attrlen
operator|+
literal|1
expr_stmt|;
operator|*
name|selLength
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrlen
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|attrbuffer
index|[
name|i
index|]
operator|&
name|ATTR_TARGET_CONVERTED
condition|)
block|{
operator|*
name|selStart
operator|=
name|qMin
argument_list|(
operator|*
name|selStart
argument_list|,
name|i
argument_list|)
expr_stmt|;
operator|*
name|selLength
operator|=
name|qMax
argument_list|(
operator|*
name|selLength
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
operator|*
name|selLength
operator|=
name|qMax
argument_list|(
literal|0
argument_list|,
operator|*
name|selLength
operator|-
operator|*
name|selStart
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|len
operator|<=
literal|0
condition|)
return|return
name|QString
argument_list|()
return|;
return|return
name|QString
argument_list|(
operator|(
name|QChar
operator|*
operator|)
name|buffer
argument_list|,
name|len
operator|/
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|TranslateMessage
name|void
name|QWinInputContext
operator|::
name|TranslateMessage
parameter_list|(
specifier|const
name|MSG
modifier|*
name|msg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|aimmpump
operator|||
name|aimmpump
operator|->
name|OnTranslateMessage
argument_list|(
name|msg
argument_list|)
operator|!=
name|S_OK
condition|)
operator|::
name|TranslateMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|DefWindowProc
name|LRESULT
name|QWinInputContext
operator|::
name|DefWindowProc
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|UINT
name|msg
parameter_list|,
name|WPARAM
name|wParam
parameter_list|,
name|LPARAM
name|lParam
parameter_list|)
block|{
name|LRESULT
name|retval
decl_stmt|;
if|if
condition|(
operator|!
name|aimm
operator|||
name|aimm
operator|->
name|OnDefWindowProc
argument_list|(
name|hwnd
argument_list|,
name|msg
argument_list|,
name|wParam
argument_list|,
name|lParam
argument_list|,
operator|&
name|retval
argument_list|)
operator|!=
name|S_OK
condition|)
block|{
name|retval
operator|=
operator|::
name|DefWindowProc
argument_list|(
name|hwnd
argument_list|,
name|msg
argument_list|,
name|wParam
argument_list|,
name|lParam
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
end_function
begin_function
DECL|function|update
name|void
name|QWinInputContext
operator|::
name|update
parameter_list|()
block|{
name|QWidget
modifier|*
name|w
init|=
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
return|return;
name|Q_ASSERT
argument_list|(
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|HIMC
name|imc
init|=
name|getContext
argument_list|(
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|imc
condition|)
return|return;
name|QFont
name|f
init|=
name|qvariant_cast
argument_list|<
name|QFont
argument_list|>
argument_list|(
name|w
operator|->
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImFont
argument_list|)
argument_list|)
decl_stmt|;
name|HFONT
name|hf
decl_stmt|;
name|hf
operator|=
name|f
operator|.
name|handle
argument_list|()
expr_stmt|;
name|LOGFONT
name|lf
decl_stmt|;
if|if
condition|(
name|GetObject
argument_list|(
name|hf
argument_list|,
sizeof|sizeof
argument_list|(
name|lf
argument_list|)
argument_list|,
operator|&
name|lf
argument_list|)
condition|)
block|{
if|if
condition|(
name|aimm
condition|)
name|aimm
operator|->
name|SetCompositionFontW
argument_list|(
name|imc
argument_list|,
operator|&
name|lf
argument_list|)
expr_stmt|;
else|else
name|ImmSetCompositionFont
argument_list|(
name|imc
argument_list|,
operator|&
name|lf
argument_list|)
expr_stmt|;
block|}
name|QRect
name|r
init|=
name|w
operator|->
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImMicroFocus
argument_list|)
operator|.
name|toRect
argument_list|()
decl_stmt|;
comment|// The ime window positions are based on the WinId with active focus.
name|QWidget
modifier|*
name|imeWnd
init|=
name|QWidget
operator|::
name|find
argument_list|(
operator|::
name|GetFocus
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|imeWnd
operator|&&
operator|!
name|aimm
condition|)
block|{
name|QPoint
name|pt
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|)
decl_stmt|;
name|pt
operator|=
name|w
operator|->
name|mapToGlobal
argument_list|(
name|pt
argument_list|)
expr_stmt|;
name|pt
operator|=
name|imeWnd
operator|->
name|mapFromGlobal
argument_list|(
name|pt
argument_list|)
expr_stmt|;
name|r
operator|.
name|moveTo
argument_list|(
name|pt
argument_list|)
expr_stmt|;
block|}
name|COMPOSITIONFORM
name|cf
decl_stmt|;
comment|// ### need X-like inputStyle config settings
name|cf
operator|.
name|dwStyle
operator|=
name|CFS_FORCE_POSITION
expr_stmt|;
name|cf
operator|.
name|ptCurrentPos
operator|.
name|x
operator|=
name|r
operator|.
name|x
argument_list|()
expr_stmt|;
name|cf
operator|.
name|ptCurrentPos
operator|.
name|y
operator|=
name|r
operator|.
name|y
argument_list|()
expr_stmt|;
name|CANDIDATEFORM
name|candf
decl_stmt|;
name|candf
operator|.
name|dwIndex
operator|=
literal|0
expr_stmt|;
name|candf
operator|.
name|dwStyle
operator|=
name|CFS_EXCLUDE
expr_stmt|;
name|candf
operator|.
name|ptCurrentPos
operator|.
name|x
operator|=
name|r
operator|.
name|x
argument_list|()
expr_stmt|;
name|candf
operator|.
name|ptCurrentPos
operator|.
name|y
operator|=
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
expr_stmt|;
name|candf
operator|.
name|rcArea
operator|.
name|left
operator|=
name|r
operator|.
name|x
argument_list|()
expr_stmt|;
name|candf
operator|.
name|rcArea
operator|.
name|top
operator|=
name|r
operator|.
name|y
argument_list|()
expr_stmt|;
name|candf
operator|.
name|rcArea
operator|.
name|right
operator|=
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
expr_stmt|;
name|candf
operator|.
name|rcArea
operator|.
name|bottom
operator|=
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|haveCaret
condition|)
name|SetCaretPos
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|aimm
condition|)
block|{
name|aimm
operator|->
name|SetCompositionWindow
argument_list|(
name|imc
argument_list|,
operator|&
name|cf
argument_list|)
expr_stmt|;
name|aimm
operator|->
name|SetCandidateWindow
argument_list|(
name|imc
argument_list|,
operator|&
name|candf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ImmSetCompositionWindow
argument_list|(
name|imc
argument_list|,
operator|&
name|cf
argument_list|)
expr_stmt|;
name|ImmSetCandidateWindow
argument_list|(
name|imc
argument_list|,
operator|&
name|candf
argument_list|)
expr_stmt|;
block|}
name|releaseContext
argument_list|(
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
name|imc
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endComposition
name|bool
name|QWinInputContext
operator|::
name|endComposition
parameter_list|()
block|{
name|QWidget
modifier|*
name|fw
init|=
name|focusWidget
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_IME_DEBUG
name|qDebug
argument_list|(
literal|"endComposition! fw = %s"
argument_list|,
name|fw
condition|?
name|fw
operator|->
name|className
argument_list|()
else|:
literal|"(null)"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|bool
name|result
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|imePosition
operator|==
operator|-
literal|1
operator|||
name|recursionGuard
condition|)
return|return
name|result
return|;
comment|// Googles Pinyin Input Method likes to call endComposition again
comment|// when we call notifyIME with CPS_CANCEL, so protect ourselves
comment|// against that.
name|recursionGuard
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|fw
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|fw
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|HIMC
name|imc
init|=
name|getContext
argument_list|(
name|fw
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
decl_stmt|;
name|notifyIME
argument_list|(
name|imc
argument_list|,
name|NI_COMPOSITIONSTR
argument_list|,
name|CPS_CANCEL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|releaseContext
argument_list|(
name|fw
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
name|imc
argument_list|)
expr_stmt|;
if|if
condition|(
name|haveCaret
condition|)
block|{
name|DestroyCaret
argument_list|()
expr_stmt|;
name|haveCaret
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|fw
condition|)
name|fw
operator|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
expr_stmt|;
if|if
condition|(
name|fw
condition|)
block|{
name|QInputMethodEvent
name|e
decl_stmt|;
name|result
operator|=
name|qt_sendSpontaneousEvent
argument_list|(
name|fw
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|imeComposition
condition|)
name|imeComposition
operator|->
name|clear
argument_list|()
expr_stmt|;
name|imePosition
operator|=
operator|-
literal|1
expr_stmt|;
name|recursionGuard
operator|=
literal|false
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|QWinInputContext
operator|::
name|reset
parameter_list|()
block|{
name|QWidget
modifier|*
name|fw
init|=
name|focusWidget
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_IME_DEBUG
name|qDebug
argument_list|(
literal|"sending accept to focus widget %s"
argument_list|,
name|fw
condition|?
name|fw
operator|->
name|className
argument_list|()
else|:
literal|"(null)"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|fw
operator|&&
name|imePosition
operator|!=
operator|-
literal|1
condition|)
block|{
name|QInputMethodEvent
name|e
decl_stmt|;
if|if
condition|(
name|imeComposition
condition|)
name|e
operator|.
name|setCommitString
argument_list|(
operator|*
name|imeComposition
argument_list|)
expr_stmt|;
name|imePosition
operator|=
operator|-
literal|1
expr_stmt|;
name|qt_sendSpontaneousEvent
argument_list|(
name|fw
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|imeComposition
condition|)
name|imeComposition
operator|->
name|clear
argument_list|()
expr_stmt|;
name|imePosition
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|fw
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|fw
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|HIMC
name|imc
init|=
name|getContext
argument_list|(
name|fw
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
decl_stmt|;
name|notifyIME
argument_list|(
name|imc
argument_list|,
name|NI_COMPOSITIONSTR
argument_list|,
name|CPS_CANCEL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|releaseContext
argument_list|(
name|fw
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
name|imc
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|startComposition
name|bool
name|QWinInputContext
operator|::
name|startComposition
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_IME_DEBUG
name|qDebug
argument_list|(
literal|"startComposition"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|imeComposition
condition|)
name|imeComposition
operator|=
operator|new
name|QString
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|fw
init|=
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|fw
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|fw
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|imePosition
operator|=
literal|0
expr_stmt|;
name|haveCaret
operator|=
name|CreateCaret
argument_list|(
name|fw
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|HideCaret
argument_list|(
name|fw
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
return|return
name|fw
operator|!=
literal|0
return|;
block|}
end_function
begin_enum
DECL|enum|StandardFormat
enum|enum
name|StandardFormat
block|{
DECL|enumerator|PreeditFormat
name|PreeditFormat
block|,
DECL|enumerator|SelectionFormat
name|SelectionFormat
block|}
enum|;
end_enum
begin_function
DECL|function|composition
name|bool
name|QWinInputContext
operator|::
name|composition
parameter_list|(
name|LPARAM
name|lParam
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_IME_DEBUG
name|QString
name|str
decl_stmt|;
if|if
condition|(
name|lParam
operator|&
name|GCS_RESULTSTR
condition|)
name|str
operator|+=
literal|"RESULTSTR "
expr_stmt|;
if|if
condition|(
name|lParam
operator|&
name|GCS_COMPSTR
condition|)
name|str
operator|+=
literal|"COMPSTR "
expr_stmt|;
if|if
condition|(
name|lParam
operator|&
name|GCS_COMPATTR
condition|)
name|str
operator|+=
literal|"COMPATTR "
expr_stmt|;
if|if
condition|(
name|lParam
operator|&
name|GCS_CURSORPOS
condition|)
name|str
operator|+=
literal|"CURSORPOS "
expr_stmt|;
if|if
condition|(
name|lParam
operator|&
name|GCS_COMPCLAUSE
condition|)
name|str
operator|+=
literal|"COMPCLAUSE "
expr_stmt|;
if|if
condition|(
name|lParam
operator|&
name|CS_INSERTCHAR
condition|)
name|str
operator|+=
literal|"INSERTCHAR "
expr_stmt|;
if|if
condition|(
name|lParam
operator|&
name|CS_NOMOVECARET
condition|)
name|str
operator|+=
literal|"NOMOVECARET "
expr_stmt|;
name|qDebug
argument_list|(
literal|"composition, lParam=(%x) %s imePosition=%d"
argument_list|,
name|lParam
argument_list|,
name|str
operator|.
name|latin1
argument_list|()
argument_list|,
name|imePosition
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|bool
name|result
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|lParam
condition|)
comment|// bogus event
return|return
literal|true
return|;
name|QWidget
modifier|*
name|fw
init|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|fw
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|fw
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|HIMC
name|imc
init|=
name|getContext
argument_list|(
name|fw
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
decl_stmt|;
name|QInputMethodEvent
name|e
decl_stmt|;
if|if
condition|(
name|lParam
operator|&
operator|(
name|GCS_COMPSTR
operator||
name|GCS_COMPATTR
operator||
name|GCS_CURSORPOS
operator|)
condition|)
block|{
if|if
condition|(
name|imePosition
operator|==
operator|-
literal|1
condition|)
comment|// need to send a start event
name|startComposition
argument_list|()
expr_stmt|;
comment|// some intermediate composition result
name|int
name|selStart
decl_stmt|,
name|selLength
decl_stmt|;
operator|*
name|imeComposition
operator|=
name|getString
argument_list|(
name|imc
argument_list|,
name|GCS_COMPSTR
argument_list|,
operator|&
name|selStart
argument_list|,
operator|&
name|selLength
argument_list|)
expr_stmt|;
name|imePosition
operator|=
name|getCursorPosition
argument_list|(
name|imc
argument_list|)
expr_stmt|;
if|if
condition|(
name|lParam
operator|&
name|CS_INSERTCHAR
operator|&&
name|lParam
operator|&
name|CS_NOMOVECARET
condition|)
block|{
comment|// make korean work correctly. Hope this is correct for all IMEs
name|selStart
operator|=
literal|0
expr_stmt|;
name|selLength
operator|=
name|imeComposition
operator|->
name|length
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|selLength
operator|==
literal|0
condition|)
name|selStart
operator|=
literal|0
expr_stmt|;
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attrs
decl_stmt|;
if|if
condition|(
name|selStart
operator|>
literal|0
condition|)
name|attrs
operator|<<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|TextFormat
argument_list|,
literal|0
argument_list|,
name|selStart
argument_list|,
name|standardFormat
argument_list|(
name|PreeditFormat
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|selLength
condition|)
name|attrs
operator|<<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|TextFormat
argument_list|,
name|selStart
argument_list|,
name|selLength
argument_list|,
name|standardFormat
argument_list|(
name|SelectionFormat
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|selStart
operator|+
name|selLength
operator|<
name|imeComposition
operator|->
name|length
argument_list|()
condition|)
name|attrs
operator|<<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|TextFormat
argument_list|,
name|selStart
operator|+
name|selLength
argument_list|,
name|imeComposition
operator|->
name|length
argument_list|()
operator|-
name|selStart
operator|-
name|selLength
argument_list|,
name|standardFormat
argument_list|(
name|PreeditFormat
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|imePosition
operator|>=
literal|0
condition|)
name|attrs
operator|<<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|Cursor
argument_list|,
name|imePosition
argument_list|,
name|selLength
condition|?
literal|0
else|:
literal|1
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|QInputMethodEvent
argument_list|(
operator|*
name|imeComposition
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lParam
operator|&
name|GCS_RESULTSTR
condition|)
block|{
if|if
condition|(
name|imePosition
operator|==
operator|-
literal|1
condition|)
name|startComposition
argument_list|()
expr_stmt|;
comment|// a fixed result, return the converted string
operator|*
name|imeComposition
operator|=
name|getString
argument_list|(
name|imc
argument_list|,
name|GCS_RESULTSTR
argument_list|)
expr_stmt|;
name|imePosition
operator|=
operator|-
literal|1
expr_stmt|;
name|e
operator|.
name|setCommitString
argument_list|(
operator|*
name|imeComposition
argument_list|)
expr_stmt|;
name|imeComposition
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
name|result
operator|=
name|qt_sendSpontaneousEvent
argument_list|(
name|fw
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
name|releaseContext
argument_list|(
name|fw
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
name|imc
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|Q_IME_DEBUG
name|qDebug
argument_list|(
literal|"imecomposition: cursor pos at %d, str=%x"
argument_list|,
name|imePosition
argument_list|,
name|str
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|result
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|defaultContext
specifier|static
name|HIMC
name|defaultContext
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
comment|// checks whether widget is a popup
end_comment
begin_function
DECL|function|isPopup
specifier|inline
name|bool
name|isPopup
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
if|if
condition|(
name|w
operator|&&
operator|(
name|w
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|Popup
operator|)
operator|==
name|Qt
operator|::
name|Popup
condition|)
return|return
literal|true
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|// checks whether widget is in a popup
end_comment
begin_function
DECL|function|isInPopup
specifier|inline
name|bool
name|isInPopup
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
if|if
condition|(
name|w
operator|&&
operator|(
name|isPopup
argument_list|(
name|w
argument_list|)
operator|||
name|isPopup
argument_list|(
name|w
operator|->
name|window
argument_list|()
argument_list|)
operator|)
condition|)
return|return
literal|true
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|// find the parent widget, which is a non popup toplevel
end_comment
begin_comment
comment|// this is valid only if the widget is/in a popup
end_comment
begin_function
DECL|function|findParentforPopup
specifier|inline
name|QWidget
modifier|*
name|findParentforPopup
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|QWidget
modifier|*
name|e
init|=
name|QWidget
operator|::
name|find
argument_list|(
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
decl_stmt|;
comment|// check if this or its parent is a popup
while|while
condition|(
name|isInPopup
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|e
operator|=
name|e
operator|->
name|window
argument_list|()
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|e
condition|)
break|break;
name|e
operator|=
name|QWidget
operator|::
name|find
argument_list|(
name|e
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
condition|)
return|return
name|e
operator|->
name|window
argument_list|()
return|;
else|else
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|// enables or disables the ime
end_comment
begin_function
DECL|function|enableIme
specifier|inline
name|void
name|enableIme
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|bool
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
block|{
comment|// enable ime
if|if
condition|(
name|defaultContext
condition|)
name|ImmAssociateContext
argument_list|(
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
name|defaultContext
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_WINCE
if|if
condition|(
name|qApp
operator|->
name|autoSipEnabled
argument_list|()
condition|)
name|qt_wince_show_SIP
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
comment|// disable ime
name|HIMC
name|oldimc
init|=
name|ImmAssociateContext
argument_list|(
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|defaultContext
condition|)
name|defaultContext
operator|=
name|oldimc
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_WINCE
if|if
condition|(
name|qApp
operator|->
name|autoSipEnabled
argument_list|()
condition|)
name|qt_wince_show_SIP
argument_list|(
literal|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|updateImeStatus
name|void
name|QWinInputContext
operator|::
name|updateImeStatus
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|bool
name|hasFocus
parameter_list|)
block|{
if|if
condition|(
operator|!
name|w
condition|)
return|return;
comment|// It's always the proxy that carries the hints.
name|QWidget
modifier|*
name|focusProxyWidget
init|=
name|w
operator|->
name|focusProxy
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|focusProxyWidget
condition|)
name|focusProxyWidget
operator|=
name|w
expr_stmt|;
name|bool
name|e
init|=
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
operator|&&
name|w
operator|->
name|isEnabled
argument_list|()
operator|&&
operator|!
operator|(
name|focusProxyWidget
operator|->
name|inputMethodHints
argument_list|()
operator|&
operator|(
name|Qt
operator|::
name|ImhExclusiveInputMask
operator||
name|Qt
operator|::
name|ImhHiddenText
operator|)
operator|)
decl_stmt|;
name|bool
name|hasIme
init|=
name|e
operator|&&
name|hasFocus
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_IME_DEBUG
name|qDebug
argument_list|(
literal|"%s HasFocus = %d hasIme = %d e = %d "
argument_list|,
name|w
operator|->
name|className
argument_list|()
argument_list|,
name|hasFocus
argument_list|,
name|hasIme
argument_list|,
name|e
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|hasFocus
operator|||
name|e
condition|)
block|{
if|if
condition|(
name|isInPopup
argument_list|(
name|w
argument_list|)
condition|)
name|QWinInputContext
operator|::
name|enablePopupChild
argument_list|(
name|w
argument_list|,
name|hasIme
argument_list|)
expr_stmt|;
else|else
name|QWinInputContext
operator|::
name|enable
argument_list|(
name|w
argument_list|,
name|hasIme
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|enablePopupChild
name|void
name|QWinInputContext
operator|::
name|enablePopupChild
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|bool
name|e
parameter_list|)
block|{
if|if
condition|(
name|aimm
condition|)
block|{
name|enable
argument_list|(
name|w
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|w
operator|||
operator|!
name|isInPopup
argument_list|(
name|w
argument_list|)
condition|)
return|return;
ifdef|#
directive|ifdef
name|Q_IME_DEBUG
name|qDebug
argument_list|(
literal|"enablePopupChild: w=%s, enable = %s"
argument_list|,
name|w
condition|?
name|w
operator|->
name|className
argument_list|()
else|:
literal|"(null)"
argument_list|,
name|e
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QWidget
modifier|*
name|parent
init|=
name|findParentforPopup
argument_list|(
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
condition|)
block|{
comment|// update ime status of the normal toplevel parent of the popup
name|enableIme
argument_list|(
name|parent
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|QWidget
modifier|*
name|toplevel
init|=
name|w
operator|->
name|window
argument_list|()
decl_stmt|;
if|if
condition|(
name|toplevel
condition|)
block|{
comment|// update ime status of the toplevel popup
name|enableIme
argument_list|(
name|toplevel
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|enable
name|void
name|QWinInputContext
operator|::
name|enable
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|bool
name|e
parameter_list|)
block|{
if|if
condition|(
name|w
condition|)
block|{
ifdef|#
directive|ifdef
name|Q_IME_DEBUG
name|qDebug
argument_list|(
literal|"enable: w=%s, enable = %s"
argument_list|,
name|w
condition|?
name|w
operator|->
name|className
argument_list|()
else|:
literal|"(null)"
argument_list|,
name|e
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
return|return;
if|if
condition|(
name|aimm
condition|)
block|{
name|HIMC
name|oldimc
decl_stmt|;
if|if
condition|(
operator|!
name|e
condition|)
block|{
name|aimm
operator|->
name|AssociateContext
argument_list|(
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|&
name|oldimc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|defaultContext
condition|)
name|defaultContext
operator|=
name|oldimc
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|defaultContext
condition|)
block|{
name|aimm
operator|->
name|AssociateContext
argument_list|(
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
name|defaultContext
argument_list|,
operator|&
name|oldimc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// update ime status on the widget
name|QWidget
modifier|*
name|p
init|=
name|QWidget
operator|::
name|find
argument_list|(
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
condition|)
name|enableIme
argument_list|(
name|p
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setFocusWidget
name|void
name|QWinInputContext
operator|::
name|setFocusWidget
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|QWidget
modifier|*
name|oldFocus
init|=
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldFocus
operator|==
name|w
condition|)
return|return;
if|if
condition|(
name|w
condition|)
block|{
name|QWinInputContext
operator|::
name|updateImeStatus
argument_list|(
name|w
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|oldFocus
condition|)
name|QWinInputContext
operator|::
name|updateImeStatus
argument_list|(
name|oldFocus
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|QInputContext
operator|::
name|setFocusWidget
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isComposing
name|bool
name|QWinInputContext
operator|::
name|isComposing
parameter_list|()
specifier|const
block|{
return|return
name|imeComposition
operator|&&
operator|!
name|imeComposition
operator|->
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|mouseHandler
name|void
name|QWinInputContext
operator|::
name|mouseHandler
parameter_list|(
name|int
name|pos
parameter_list|,
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|!=
name|QEvent
operator|::
name|MouseButtonPress
condition|)
return|return;
if|if
condition|(
name|pos
argument_list|<
literal|0
operator|||
name|pos
argument_list|>
name|imeComposition
operator|->
name|length
argument_list|()
condition|)
name|reset
argument_list|()
expr_stmt|;
comment|// Probably should pass the correct button, but it seems to work fine like this.
name|DWORD
name|button
init|=
name|MK_LBUTTON
decl_stmt|;
name|QWidget
modifier|*
name|fw
init|=
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|fw
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|fw
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|HIMC
name|himc
init|=
name|getContext
argument_list|(
name|fw
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
decl_stmt|;
name|HWND
name|ime_wnd
init|=
name|getDefaultIMEWnd
argument_list|(
name|fw
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
decl_stmt|;
name|SendMessage
argument_list|(
name|ime_wnd
argument_list|,
name|WM_MSIME_MOUSE
argument_list|,
name|MAKELONG
argument_list|(
name|MAKEWORD
argument_list|(
name|button
argument_list|,
name|pos
operator|==
literal|0
condition|?
literal|2
else|:
literal|1
argument_list|)
argument_list|,
name|pos
argument_list|)
argument_list|,
operator|(
name|LPARAM
operator|)
name|himc
argument_list|)
expr_stmt|;
name|releaseContext
argument_list|(
name|fw
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
name|himc
argument_list|)
expr_stmt|;
block|}
comment|//qDebug("mouseHandler: got value %d pos=%d", ret,pos);
block|}
end_function
begin_function
DECL|function|language
name|QString
name|QWinInputContext
operator|::
name|language
parameter_list|()
block|{
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|reconvertString
name|int
name|QWinInputContext
operator|::
name|reconvertString
parameter_list|(
name|RECONVERTSTRING
modifier|*
name|reconv
parameter_list|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
return|return
operator|-
literal|1
return|;
name|Q_ASSERT
argument_list|(
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|surroundingText
init|=
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|w
operator|->
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|memSize
init|=
sizeof|sizeof
argument_list|(
name|RECONVERTSTRING
argument_list|)
operator|+
operator|(
name|surroundingText
operator|.
name|length
argument_list|()
operator|+
literal|1
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|ushort
argument_list|)
decl_stmt|;
comment|// If memory is not allocated, return the required size.
if|if
condition|(
operator|!
name|reconv
condition|)
block|{
if|if
condition|(
name|surroundingText
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
else|else
return|return
name|memSize
return|;
block|}
name|int
name|pos
init|=
name|qvariant_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|w
operator|->
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
argument_list|)
decl_stmt|;
comment|// find the word in the surrounding text.
name|QTextBoundaryFinder
name|bounds
argument_list|(
name|QTextBoundaryFinder
operator|::
name|Word
argument_list|,
name|surroundingText
argument_list|)
decl_stmt|;
name|bounds
operator|.
name|setPosition
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|bounds
operator|.
name|isAtBoundary
argument_list|()
condition|)
block|{
if|if
condition|(
name|QTextBoundaryFinder
operator|::
name|EndWord
operator|==
name|bounds
operator|.
name|boundaryReasons
argument_list|()
condition|)
name|bounds
operator|.
name|toPreviousBoundary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bounds
operator|.
name|toPreviousBoundary
argument_list|()
expr_stmt|;
block|}
name|int
name|startPos
init|=
name|bounds
operator|.
name|position
argument_list|()
decl_stmt|;
name|bounds
operator|.
name|toNextBoundary
argument_list|()
expr_stmt|;
name|int
name|endPos
init|=
name|bounds
operator|.
name|position
argument_list|()
decl_stmt|;
comment|// select the text, this will be overwritten by following ime events.
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attrs
decl_stmt|;
name|attrs
operator|<<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|Selection
argument_list|,
name|startPos
argument_list|,
name|endPos
operator|-
name|startPos
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QInputMethodEvent
name|e
argument_list|(
name|QString
argument_list|()
argument_list|,
name|attrs
argument_list|)
decl_stmt|;
name|qt_sendSpontaneousEvent
argument_list|(
name|w
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
name|reconv
operator|->
name|dwSize
operator|=
name|memSize
expr_stmt|;
name|reconv
operator|->
name|dwVersion
operator|=
literal|0
expr_stmt|;
name|reconv
operator|->
name|dwStrLen
operator|=
name|surroundingText
operator|.
name|length
argument_list|()
expr_stmt|;
name|reconv
operator|->
name|dwStrOffset
operator|=
sizeof|sizeof
argument_list|(
name|RECONVERTSTRING
argument_list|)
expr_stmt|;
name|reconv
operator|->
name|dwCompStrLen
operator|=
name|endPos
operator|-
name|startPos
expr_stmt|;
name|reconv
operator|->
name|dwCompStrOffset
operator|=
name|startPos
operator|*
sizeof|sizeof
argument_list|(
name|ushort
argument_list|)
expr_stmt|;
name|reconv
operator|->
name|dwTargetStrLen
operator|=
name|reconv
operator|->
name|dwCompStrLen
expr_stmt|;
name|reconv
operator|->
name|dwTargetStrOffset
operator|=
name|reconv
operator|->
name|dwCompStrOffset
expr_stmt|;
name|memcpy
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|(
name|reconv
operator|+
literal|1
operator|)
argument_list|,
name|surroundingText
operator|.
name|utf16
argument_list|()
argument_list|,
name|surroundingText
operator|.
name|length
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|ushort
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|memSize
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
