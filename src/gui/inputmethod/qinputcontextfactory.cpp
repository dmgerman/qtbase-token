begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/**************************************************************************** ** ** Implementation of QInputContextFactory class ** ** Copyright (C) 2003-2004 immodule for Qt Project.  All rights reserved. ** ** This file is written to contribute to Nokia Corporation and/or its subsidiary(-ies) under their own ** license. You may use this file under your Qt license. Following ** description is copied from their original file headers. Contact ** immodule-qt@freedesktop.org if any conditions of this licensing are ** not clear to you. ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qinputcontextfactory.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_IM
end_ifndef
begin_include
include|#
directive|include
file|"qcoreapplication.h"
end_include
begin_include
include|#
directive|include
file|"qinputcontext.h"
end_include
begin_include
include|#
directive|include
file|"qinputcontextplugin.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_include
include|#
directive|include
file|"private/qt_x11_p.h"
end_include
begin_include
include|#
directive|include
file|"qximinputcontext_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WIN
end_ifdef
begin_include
include|#
directive|include
file|"qwininputcontext_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_MAC
end_ifdef
begin_include
include|#
directive|include
file|"qmacinputcontext_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_S60
end_ifdef
begin_include
include|#
directive|include
file|"qcoefepinputcontext_p.h"
end_include
begin_include
include|#
directive|include
file|"AknInputLanguageInfo.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"private/qfactoryloader_p.h"
end_include
begin_include
include|#
directive|include
file|"qmutex.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
name|Q_GLOBAL_STATIC_WITH_ARGS
argument_list|(
name|QFactoryLoader
argument_list|,
name|loader
argument_list|,
operator|(
name|QInputContextFactoryInterface_iid
operator|,
name|QLatin1String
argument_list|(
literal|"/inputmethods"
argument_list|)
operator|)
argument_list|)
endif|#
directive|endif
comment|/*!     \class QInputContextFactory     \brief The QInputContextFactory class creates QInputContext objects.       The input context factory creates a QInputContext object for a     given key with QInputContextFactory::create().      The input contexts are either built-in or dynamically loaded from     an input context plugin (see QInputContextPlugin).      keys() returns a list of valid keys. The     keys are the names used, for example, to identify and specify     input methods for the input method switching mechanism. The names     have to be consistent with QInputContext::identifierName(), and     may only contain ASCII characters.      A key can be used to retrieve the associated input context's     supported languages using languages(). You     can retrieve the input context's description using     description() and finally you can get a user     friendly internationalized name of the QInputContext object     specified by the key using displayName().      \legalese     Copyright (C) 2003-2004 immodule for Qt Project.  All rights reserved.      This file is written to contribute to Nokia Corporation and/or its subsidiary(-ies) under their own     license. You may use this file under your Qt license. Following     description is copied from their original file headers. Contact     immodule-qt@freedesktop.org if any conditions of this licensing are     not clear to you.     \endlegalese      \sa QInputContext, QInputContextPlugin */
comment|/*!     Creates and returns a QInputContext object for the input context     specified by \a key with the given \a parent. Keys are case     sensitive.      \sa keys() */
DECL|function|create
name|QInputContext
modifier|*
name|QInputContextFactory
operator|::
name|create
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|,
name|QObject
operator|*
name|parent
argument_list|)
argument_list|{
name|QInputContext
operator|*
name|result
operator|=
literal|0
argument_list|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_XIM
argument_list|)
argument_list|if
operator|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"xim"
argument_list|)
operator|)
block|{
name|result
operator|=
operator|new
name|QXIMInputContext
block|;     }
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"win"
argument_list|)
condition|)
block|{
name|result
operator|=
operator|new
name|QWinInputContext
block|;     }
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
end_if
begin_if
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"mac"
argument_list|)
condition|)
block|{
name|result
operator|=
operator|new
name|QMacInputContext
expr_stmt|;
block|}
end_if
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
end_if
begin_if
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"coefep"
argument_list|)
condition|)
block|{
name|result
operator|=
operator|new
name|QCoeFepInputContext
expr_stmt|;
block|}
end_if
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_LIBRARY
end_ifdef
begin_expr_stmt
name|Q_UNUSED
argument_list|(
name|key
argument_list|)
expr_stmt|;
end_expr_stmt
begin_else
else|#
directive|else
end_else
begin_if
if|if
condition|(
name|QInputContextFactoryInterface
modifier|*
name|factory
init|=
name|qobject_cast
argument_list|<
name|QInputContextFactoryInterface
operator|*
argument_list|>
argument_list|(
name|loader
argument_list|()
operator|->
name|instance
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|=
name|factory
operator|->
name|create
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
end_if
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|if
condition|(
name|result
condition|)
name|result
operator|->
name|setParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
end_if
begin_return
return|return
name|result
return|;
end_return
begin_comment
unit|}
comment|/*!     Returns the list of keys this factory can create input contexts     for.      The keys are the names used, for example, to identify and specify     input methods for the input method switching mechanism.  The names     have to be consistent with QInputContext::identifierName(), and     may only contain ASCII characters.      \sa create(), displayName(), QInputContext::identifierName() */
end_comment
begin_macro
unit|QStringList
DECL|function|keys
name|QInputContextFactory
end_macro
begin_expr_stmt
DECL|function|keys
operator|::
name|keys
operator|(
operator|)
block|{
name|QStringList
name|result
block|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_XIM
argument_list|)
name|result
operator|<<
name|QLatin1String
argument_list|(
literal|"xim"
argument_list|)
block|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_XIM
argument_list|)
name|result
operator|<<
name|QLatin1String
argument_list|(
literal|"win"
argument_list|)
block|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
name|result
operator|<<
name|QLatin1String
argument_list|(
literal|"mac"
argument_list|)
block|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
name|result
operator|<<
name|QLatin1String
argument_list|(
literal|"coefep"
argument_list|)
block|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
name|result
operator|+=
name|loader
argument_list|()
operator|->
name|keys
argument_list|()
block|;
endif|#
directive|endif
comment|// QT_NO_LIBRARY
return|return
name|result
return|;
block|}
end_expr_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
end_if
begin_comment
comment|/*!     \internal      This function contains pure Symbian exception handling code for     getting S60 language list.     Returned object ownership is transferred to caller. */
end_comment
begin_function
DECL|function|s60LangListL
specifier|static
name|CAknInputLanguageList
modifier|*
name|s60LangListL
parameter_list|()
block|{
name|CAknInputLanguageInfo
modifier|*
name|langInfo
init|=
name|AknInputLanguageInfoFactory
operator|::
name|CreateInputLanguageInfoL
argument_list|()
decl_stmt|;
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|langInfo
argument_list|)
expr_stmt|;
comment|// In rare phone there is more than 7 languages installed -> use 7 as an array granularity
name|CAknInputLanguageList
modifier|*
name|langList
init|=
operator|new
operator|(
name|ELeave
operator|)
name|CAknInputLanguageList
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|langList
argument_list|)
expr_stmt|;
name|langInfo
operator|->
name|AppendAvailableLanguagesL
argument_list|(
name|langList
argument_list|)
expr_stmt|;
name|CleanupStack
operator|::
name|Pop
argument_list|(
name|langList
argument_list|)
expr_stmt|;
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
name|langInfo
argument_list|)
expr_stmt|;
return|return
name|langList
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      This function utility function return S60 language list.     Returned object ownership is transferred to caller. */
end_comment
begin_function
DECL|function|s60LangList
specifier|static
name|CAknInputLanguageList
modifier|*
name|s60LangList
parameter_list|()
block|{
name|CAknInputLanguageList
modifier|*
name|langList
init|=
name|NULL
decl_stmt|;
name|TRAP_IGNORE
argument_list|(
name|langList
operator|=
name|s60LangListL
argument_list|()
argument_list|)
expr_stmt|;
name|q_check_ptr
argument_list|(
name|langList
argument_list|)
expr_stmt|;
return|return
name|langList
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     Returns the languages supported by the QInputContext object     specified by \a key.      The languages are expressed as language code (e.g. "zh_CN",     "zh_TW", "zh_HK", "ja", "ko", ...). An input context that supports     multiple languages can return all supported languages as a     QStringList. The name has to be consistent with     QInputContext::language().      This information may be used to optimize a user interface.      \sa keys(), QInputContext::language(), QLocale */
end_comment
begin_function
DECL|function|languages
name|QStringList
name|QInputContextFactory
operator|::
name|languages
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
block|{
name|QStringList
name|result
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_XIM
argument_list|)
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"xim"
argument_list|)
condition|)
return|return
name|QStringList
argument_list|(
name|QString
argument_list|()
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"win"
argument_list|)
condition|)
return|return
name|QStringList
argument_list|(
name|QString
argument_list|()
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"mac"
argument_list|)
condition|)
return|return
name|QStringList
argument_list|(
name|QString
argument_list|()
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"coefep"
argument_list|)
condition|)
block|{
name|CAknInputLanguageList
modifier|*
name|langList
init|=
name|s60LangList
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|langList
operator|->
name|Count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|.
name|append
argument_list|(
name|QString
argument_list|(
name|qt_symbianLocaleName
argument_list|(
name|langList
operator|->
name|At
argument_list|(
name|i
argument_list|)
operator|->
name|LanguageCode
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|delete
name|langList
expr_stmt|;
block|}
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_NO_SETTINGS
argument_list|)
name|Q_UNUSED
argument_list|(
name|key
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|QInputContextFactoryInterface
modifier|*
name|factory
init|=
name|qobject_cast
argument_list|<
name|QInputContextFactoryInterface
operator|*
argument_list|>
argument_list|(
name|loader
argument_list|()
operator|->
name|instance
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
name|result
operator|=
name|factory
operator|->
name|languages
argument_list|(
name|key
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_LIBRARY
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a user friendly internationalized name of the     QInputContext object specified by \a key. You can, for example,     use this name in a menu.      \sa keys(), QInputContext::identifierName() */
end_comment
begin_function
DECL|function|displayName
name|QString
name|QInputContextFactory
operator|::
name|displayName
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_XIM
argument_list|)
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"xim"
argument_list|)
condition|)
return|return
name|QInputContext
operator|::
name|tr
argument_list|(
literal|"XIM"
argument_list|)
return|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_WS_S60
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"coefep"
argument_list|)
condition|)
return|return
name|QInputContext
operator|::
name|tr
argument_list|(
literal|"FEP"
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_NO_SETTINGS
argument_list|)
name|Q_UNUSED
argument_list|(
name|key
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|QInputContextFactoryInterface
modifier|*
name|factory
init|=
name|qobject_cast
argument_list|<
name|QInputContextFactoryInterface
operator|*
argument_list|>
argument_list|(
name|loader
argument_list|()
operator|->
name|instance
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
return|return
name|factory
operator|->
name|displayName
argument_list|(
name|key
argument_list|)
return|;
endif|#
directive|endif
comment|// QT_NO_LIBRARY
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns an internationalized brief description of the QInputContext     object specified by \a key. You can, for example, use this     description in a user interface.      \sa keys(), displayName() */
end_comment
begin_function
DECL|function|description
name|QString
name|QInputContextFactory
operator|::
name|description
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_XIM
argument_list|)
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"xim"
argument_list|)
condition|)
return|return
name|QInputContext
operator|::
name|tr
argument_list|(
literal|"XIM input method"
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_XIM
argument_list|)
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"win"
argument_list|)
condition|)
return|return
name|QInputContext
operator|::
name|tr
argument_list|(
literal|"Windows input method"
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"mac"
argument_list|)
condition|)
return|return
name|QInputContext
operator|::
name|tr
argument_list|(
literal|"Mac OS X input method"
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"coefep"
argument_list|)
condition|)
return|return
name|QInputContext
operator|::
name|tr
argument_list|(
literal|"S60 FEP input method"
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_NO_SETTINGS
argument_list|)
name|Q_UNUSED
argument_list|(
name|key
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|QInputContextFactoryInterface
modifier|*
name|factory
init|=
name|qobject_cast
argument_list|<
name|QInputContextFactoryInterface
operator|*
argument_list|>
argument_list|(
name|loader
argument_list|()
operator|->
name|instance
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
return|return
name|factory
operator|->
name|description
argument_list|(
name|key
argument_list|)
return|;
endif|#
directive|endif
comment|// QT_NO_LIBRARY
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_IM
end_comment
end_unit
