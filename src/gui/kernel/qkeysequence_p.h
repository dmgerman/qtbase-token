begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QKEYSEQUENCE_P_H
end_ifndef
begin_define
DECL|macro|QKEYSEQUENCE_P_H
define|#
directive|define
name|QKEYSEQUENCE_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of qapplication_*.cpp, qwidget*.cpp and qfiledialog.cpp.  This header
end_comment
begin_comment
comment|// file may change from version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qkeysequence.h"
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
end_ifndef
begin_struct
DECL|struct|QKeyBinding
struct|struct
name|Q_AUTOTEST_EXPORT
name|QKeyBinding
block|{
DECL|member|standardKey
name|QKeySequence
operator|::
name|StandardKey
name|standardKey
expr_stmt|;
DECL|member|priority
name|uchar
name|priority
decl_stmt|;
DECL|member|shortcut
name|uint
name|shortcut
decl_stmt|;
DECL|member|platform
name|uint
name|platform
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
name|class
name|Q_AUTOTEST_EXPORT
name|QKeySequencePrivate
block|{
name|public
label|:
enum|enum
block|{
name|MaxKeyCount
init|=
literal|4
block|}
enum|;
comment|// also used in QKeySequenceEdit
specifier|inline
name|QKeySequencePrivate
argument_list|()
operator|:
name|ref
argument_list|(
literal|1
argument_list|)
block|{
name|std
operator|::
name|fill_n
argument_list|(
name|key
argument_list|,
name|uint
argument_list|(
name|MaxKeyCount
argument_list|)
argument_list|,
literal|0
argument_list|)
block|;     }
specifier|inline
name|QKeySequencePrivate
argument_list|(
specifier|const
name|QKeySequencePrivate
operator|&
name|copy
argument_list|)
operator|:
name|ref
argument_list|(
literal|1
argument_list|)
block|{
name|std
operator|::
name|copy
argument_list|(
name|copy
operator|.
name|key
argument_list|,
name|copy
operator|.
name|key
operator|+
name|MaxKeyCount
argument_list|,
name|key
argument_list|)
block|;     }
name|QAtomicInt
name|ref
expr_stmt|;
name|int
name|key
index|[
name|MaxKeyCount
index|]
decl_stmt|;
specifier|static
name|QString
name|encodeString
argument_list|(
name|int
name|key
argument_list|,
name|QKeySequence
operator|::
name|SequenceFormat
name|format
argument_list|)
decl_stmt|;
specifier|static
name|int
name|decodeString
argument_list|(
specifier|const
name|QString
operator|&
name|keyStr
argument_list|,
name|QKeySequence
operator|::
name|SequenceFormat
name|format
argument_list|)
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SHORTCUT
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QKEYSEQUENCE_P_H
end_comment
end_unit
