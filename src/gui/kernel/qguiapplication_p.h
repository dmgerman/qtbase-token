begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QGUIAPPLICATION_QPA_P_H
end_ifndef
begin_define
DECL|macro|QGUIAPPLICATION_QPA_P_H
define|#
directive|define
name|QGUIAPPLICATION_QPA_P_H
end_define
begin_include
include|#
directive|include
file|<QtGui/qguiapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QPointF>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qcoreapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qthread_p.h>
end_include
begin_include
include|#
directive|include
file|<QWindowSystemInterface>
end_include
begin_include
include|#
directive|include
file|"private/qwindowsysteminterface_qpa_p.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/qplatformintegration_qpa.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qplatformtheme_qpa.h>
end_include
begin_include
include|#
directive|include
file|"private/qshortcutmap_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|class
name|Q_GUI_EXPORT
name|QGuiApplicationPrivate
range|:
name|public
name|QCoreApplicationPrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QGuiApplication
argument_list|)
name|public
operator|:
name|QGuiApplicationPrivate
argument_list|(
argument|int&argc
argument_list|,
argument|char **argv
argument_list|,
argument|int flags
argument_list|)
block|;
operator|~
name|QGuiApplicationPrivate
argument_list|()
block|;
name|void
name|createPlatformIntegration
argument_list|()
block|;
name|void
name|createEventDispatcher
argument_list|()
block|;
name|void
name|setEventDispatcher
argument_list|(
name|QAbstractEventDispatcher
operator|*
name|eventDispatcher
argument_list|)
block|;
name|virtual
name|void
name|notifyLayoutDirectionChange
argument_list|()
block|;
name|virtual
name|void
name|notifyActiveWindowChange
argument_list|(
name|QWindow
operator|*
name|previous
argument_list|)
block|;
specifier|static
name|Qt
operator|::
name|KeyboardModifiers
name|modifier_buttons
block|;
specifier|static
name|Qt
operator|::
name|MouseButtons
name|mouse_buttons
block|;
specifier|static
name|QPlatformIntegration
operator|*
name|platform_integration
block|;
specifier|static
name|QPlatformIntegration
operator|*
name|platformIntegration
argument_list|()
block|{
return|return
name|platform_integration
return|;
block|}
specifier|static
name|QPlatformTheme
operator|*
name|platform_theme
block|;
specifier|static
name|QPlatformTheme
operator|*
name|platformTheme
argument_list|()
block|{
return|return
name|platform_theme
return|;
block|}
expr|enum
name|KeyPlatform
block|{
name|KB_Win
operator|=
literal|1
block|,
name|KB_Mac
operator|=
literal|2
block|,
name|KB_X11
operator|=
literal|4
block|,
name|KB_KDE
operator|=
literal|8
block|,
name|KB_Gnome
operator|=
literal|16
block|,
name|KB_CDE
operator|=
literal|32
block|,
name|KB_All
operator|=
literal|0xffff
block|}
block|;
specifier|static
name|uint
name|currentKeyPlatform
argument_list|()
block|;
specifier|static
name|QAbstractEventDispatcher
operator|*
name|qt_qpa_core_dispatcher
argument_list|()
block|{
return|return
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|threadData
operator|->
name|eventDispatcher
return|;
block|}
specifier|static
name|void
name|processMouseEvent
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|MouseEvent
operator|*
name|e
argument_list|)
block|;
specifier|static
name|void
name|processKeyEvent
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|KeyEvent
operator|*
name|e
argument_list|)
block|;
specifier|static
name|void
name|processWheelEvent
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|WheelEvent
operator|*
name|e
argument_list|)
block|;
specifier|static
name|void
name|processTouchEvent
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|TouchEvent
operator|*
name|e
argument_list|)
block|;
specifier|static
name|void
name|processCloseEvent
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|CloseEvent
operator|*
name|e
argument_list|)
block|;
specifier|static
name|void
name|processGeometryChangeEvent
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|GeometryChangeEvent
operator|*
name|e
argument_list|)
block|;
specifier|static
name|void
name|processEnterEvent
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|EnterEvent
operator|*
name|e
argument_list|)
block|;
specifier|static
name|void
name|processLeaveEvent
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|LeaveEvent
operator|*
name|e
argument_list|)
block|;
specifier|static
name|void
name|processActivatedEvent
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|ActivatedWindowEvent
operator|*
name|e
argument_list|)
block|;
specifier|static
name|void
name|processWindowStateChangedEvent
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|WindowStateChangedEvent
operator|*
name|e
argument_list|)
block|;
specifier|static
name|void
name|processWindowSystemEvent
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|WindowSystemEvent
operator|*
name|e
argument_list|)
block|;
specifier|static
name|void
name|reportScreenOrientationChange
argument_list|(
name|QScreen
operator|*
name|screen
argument_list|)
block|;
specifier|static
name|void
name|reportScreenOrientationChange
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenOrientationEvent
operator|*
name|e
argument_list|)
block|;
specifier|static
name|void
name|reportGeometryChange
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenGeometryEvent
operator|*
name|e
argument_list|)
block|;
specifier|static
name|void
name|reportAvailableGeometryChange
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenAvailableGeometryEvent
operator|*
name|e
argument_list|)
block|;
specifier|static
name|void
name|reportLogicalDotsPerInchChange
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenLogicalDotsPerInchEvent
operator|*
name|e
argument_list|)
block|;
specifier|static
name|void
name|processMapEvent
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|MapEvent
operator|*
name|e
argument_list|)
block|;
specifier|static
name|void
name|processUnmapEvent
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|UnmapEvent
operator|*
name|e
argument_list|)
block|;
specifier|static
name|void
name|processExposeEvent
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|ExposeEvent
operator|*
name|e
argument_list|)
block|;
specifier|static
name|Qt
operator|::
name|DropAction
name|processDrag
argument_list|(
name|QWindow
operator|*
name|w
argument_list|,
name|QMimeData
operator|*
name|dropData
argument_list|,
specifier|const
name|QPoint
operator|&
name|p
argument_list|)
block|;
specifier|static
name|Qt
operator|::
name|DropAction
name|processDrop
argument_list|(
name|QWindow
operator|*
name|w
argument_list|,
name|QMimeData
operator|*
name|dropData
argument_list|,
specifier|const
name|QPoint
operator|&
name|p
argument_list|)
block|;
specifier|static
name|bool
name|processNativeEvent
argument_list|(
name|QWindow
operator|*
name|window
argument_list|,
specifier|const
name|QByteArray
operator|&
name|eventType
argument_list|,
name|void
operator|*
name|message
argument_list|,
name|long
operator|*
name|result
argument_list|)
block|;
specifier|static
specifier|inline
name|Qt
operator|::
name|Alignment
name|visualAlignment
argument_list|(
argument|Qt::LayoutDirection direction
argument_list|,
argument|Qt::Alignment alignment
argument_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|alignment
operator|&
name|Qt
operator|::
name|AlignHorizontal_Mask
operator|)
condition|)
name|alignment
operator||=
name|Qt
operator|::
name|AlignLeft
expr_stmt|;
if|if
condition|(
operator|(
name|alignment
operator|&
name|Qt
operator|::
name|AlignAbsolute
operator|)
operator|==
literal|0
operator|&&
operator|(
name|alignment
operator|&
operator|(
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignRight
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|alignment
operator|^=
operator|(
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignRight
operator|)
expr_stmt|;
name|alignment
operator||=
name|Qt
operator|::
name|AlignAbsolute
expr_stmt|;
block|}
return|return
name|alignment
return|;
block|}
end_decl_stmt
begin_function_decl
specifier|static
name|void
name|emitLastWindowClosed
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
name|QPixmap
name|getPixmapCursor
argument_list|(
name|Qt
operator|::
name|CursorShape
name|cshape
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function
specifier|static
name|QGuiApplicationPrivate
modifier|*
name|instance
parameter_list|()
block|{
return|return
name|self
return|;
block|}
end_function
begin_decl_stmt
specifier|static
name|bool
name|app_do_modal
decl_stmt|;
end_decl_stmt
begin_expr_stmt
specifier|static
name|Qt
operator|::
name|MouseButtons
name|buttons
expr_stmt|;
end_expr_stmt
begin_decl_stmt
specifier|static
name|ulong
name|mousePressTime
decl_stmt|;
end_decl_stmt
begin_expr_stmt
specifier|static
name|Qt
operator|::
name|MouseButton
name|mousePressButton
expr_stmt|;
end_expr_stmt
begin_decl_stmt
specifier|static
name|int
name|mousePressX
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|int
name|mousePressY
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|int
name|mouse_double_click_distance
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QPointF
name|lastCursorPosition
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_decl_stmt
specifier|static
name|QClipboard
modifier|*
name|qt_clipboard
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
specifier|static
name|QPalette
modifier|*
name|app_pal
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QWindowList
name|window_list
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QWindow
modifier|*
name|focus_window
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_expr_stmt
name|QList
operator|<
name|QCursor
operator|>
name|cursor_list
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
specifier|static
name|QList
operator|<
name|QScreen
operator|*
operator|>
name|screen_list
expr_stmt|;
end_expr_stmt
begin_decl_stmt
specifier|static
name|QFont
modifier|*
name|app_font
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QStyleHints
modifier|*
name|styleHints
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QInputPanel
modifier|*
name|inputPanel
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|bool
name|quitOnLastWindowClosed
decl_stmt|;
end_decl_stmt
begin_expr_stmt
specifier|static
name|QList
operator|<
name|QObject
operator|*
operator|>
name|generic_plugin_list
expr_stmt|;
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
end_ifndef
begin_decl_stmt
name|QShortcutMap
name|shortcutMap
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_struct
struct|struct
name|ActiveTouchPointsKey
block|{
name|ActiveTouchPointsKey
argument_list|(
argument|QTouchDevice *dev
argument_list|,
argument|int id
argument_list|)
block|:
name|device
argument_list|(
name|dev
argument_list|)
operator|,
name|touchPointId
argument_list|(
argument|id
argument_list|)
block|{ }
name|QTouchDevice
operator|*
name|device
expr_stmt|;
name|int
name|touchPointId
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
struct|struct
name|ActiveTouchPointsValue
block|{
name|QWeakPointer
operator|<
name|QWindow
operator|>
name|window
expr_stmt|;
name|QWeakPointer
operator|<
name|QObject
operator|>
name|target
expr_stmt|;
name|QTouchEvent
operator|::
name|TouchPoint
name|touchPoint
expr_stmt|;
block|}
struct|;
end_struct
begin_expr_stmt
name|QHash
operator|<
name|ActiveTouchPointsKey
operator|,
name|ActiveTouchPointsValue
operator|>
name|activeTouchPoints
expr_stmt|;
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_function_decl
name|void
name|init
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
specifier|static
name|QGuiApplicationPrivate
modifier|*
name|self
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QTouchDevice
modifier|*
name|m_fakeTouchDevice
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|int
name|m_fakeMouseSourcePointId
decl_stmt|;
end_decl_stmt
begin_decl_stmt
unit|};
name|Q_GUI_EXPORT
name|uint
name|qHash
argument_list|(
specifier|const
name|QGuiApplicationPrivate
operator|::
name|ActiveTouchPointsKey
operator|&
name|k
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Q_GUI_EXPORT
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QGuiApplicationPrivate
operator|::
name|ActiveTouchPointsKey
operator|&
name|a
operator|,
specifier|const
name|QGuiApplicationPrivate
operator|::
name|ActiveTouchPointsKey
operator|&
name|b
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QGUIAPPLICATION_QPA_P_H
end_comment
end_unit
