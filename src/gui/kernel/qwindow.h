begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QWINDOW_QPA_H
end_ifndef
begin_define
DECL|macro|QWINDOW_QPA_H
define|#
directive|define
name|QWINDOW_QPA_H
end_define
begin_include
include|#
directive|include
file|<QtCore/QObject>
end_include
begin_include
include|#
directive|include
file|<QtCore/QEvent>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMargins>
end_include
begin_include
include|#
directive|include
file|<QtGui/qsurfaceformat.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qwindowdefs.h>
end_include
begin_function
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
parameter_list|(
name|Gui
parameter_list|)
name|class
name|QWindowPrivate
decl_stmt|;
DECL|variable|QResizeEvent
name|class
name|QResizeEvent
decl_stmt|;
DECL|variable|QShowEvent
name|class
name|QShowEvent
decl_stmt|;
DECL|variable|QHideEvent
name|class
name|QHideEvent
decl_stmt|;
DECL|variable|QKeyEvent
name|class
name|QKeyEvent
decl_stmt|;
DECL|variable|QInputMethodEvent
name|class
name|QInputMethodEvent
decl_stmt|;
DECL|variable|QMouseEvent
name|class
name|QMouseEvent
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
DECL|variable|QWheelEvent
name|class
name|QWheelEvent
decl_stmt|;
endif|#
directive|endif
DECL|variable|QPlatformSurface
name|class
name|QPlatformSurface
decl_stmt|;
DECL|variable|QPlatformWindow
name|class
name|QPlatformWindow
decl_stmt|;
DECL|variable|QBackingStore
name|class
name|QBackingStore
decl_stmt|;
name|class
name|Q_GUI_EXPORT
name|QSurface
decl_stmt|{ public:     enum SurfaceType
block|{
name|Window
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|SurfaceType
name|surfaceType
argument_list|()
specifier|const
block|{
return|return
name|m_type
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|virtual
name|QSurfaceFormat
name|format
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|virtual
name|QPlatformSurface
operator|*
name|surfaceHandle
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_macro
name|QSurface
argument_list|(
argument|SurfaceType type
argument_list|)
end_macro
begin_macro
unit|:
name|m_type
argument_list|(
argument|type
argument_list|)
end_macro
begin_block
block|{}
end_block
begin_decl_stmt
name|SurfaceType
name|m_type
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QWindow
decl_stmt|;
end_decl_stmt
begin_decl_stmt
unit|};
DECL|variable|QObject
name|class
name|Q_GUI_EXPORT
name|QWindow
range|:
name|public
name|QObject
decl_stmt|,
name|public
name|QSurface
block|{
name|Q_OBJECT
name|Q_DECLARE_PRIVATE
argument_list|(
name|QWindow
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QString
name|windowTitle
name|READ
name|windowTitle
name|WRITE
name|setWindowTitle
argument_list|)
name|public
range|:
name|QWindow
argument_list|(
name|QWindow
operator|*
name|parent
operator|=
literal|0
argument_list|)
decl_stmt|;
name|virtual
operator|~
name|QWindow
argument_list|()
expr_stmt|;
name|void
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
function_decl|;
name|bool
name|visible
argument_list|()
specifier|const
expr_stmt|;
name|void
name|create
parameter_list|()
function_decl|;
name|WId
name|winId
argument_list|()
specifier|const
expr_stmt|;
name|QWindow
operator|*
name|parent
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setParent
parameter_list|(
name|QWindow
modifier|*
name|parent
parameter_list|)
function_decl|;
name|bool
name|isTopLevel
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isModal
argument_list|()
specifier|const
expr_stmt|;
name|Qt
operator|::
name|WindowModality
name|windowModality
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setWindowModality
argument_list|(
name|Qt
operator|::
name|WindowModality
name|windowModality
argument_list|)
decl_stmt|;
name|void
name|setFormat
parameter_list|(
specifier|const
name|QSurfaceFormat
modifier|&
name|format
parameter_list|)
function_decl|;
name|QSurfaceFormat
name|format
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setWindowFlags
argument_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|WindowFlags
name|windowFlags
argument_list|()
specifier|const
expr_stmt|;
name|Qt
operator|::
name|WindowType
name|windowType
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|windowTitle
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setOpacity
parameter_list|(
name|qreal
name|level
parameter_list|)
function_decl|;
name|void
name|requestActivateWindow
parameter_list|()
function_decl|;
name|Qt
operator|::
name|WindowState
name|windowState
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowState
name|state
argument_list|)
decl_stmt|;
name|void
name|setTransientParent
parameter_list|(
name|QWindow
modifier|*
name|parent
parameter_list|)
function_decl|;
name|QWindow
operator|*
name|transientParent
argument_list|()
specifier|const
expr_stmt|;
name|QSize
name|minimumSize
argument_list|()
specifier|const
expr_stmt|;
name|QSize
name|maximumSize
argument_list|()
specifier|const
expr_stmt|;
name|QSize
name|baseSize
argument_list|()
specifier|const
expr_stmt|;
name|QSize
name|sizeIncrement
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setMinimumSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
function_decl|;
name|void
name|setMaximumSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
function_decl|;
name|void
name|setBaseSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
function_decl|;
name|void
name|setSizeIncrement
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
function_decl|;
name|void
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
function_decl|;
name|QRect
name|geometry
argument_list|()
specifier|const
expr_stmt|;
name|QMargins
name|frameMargins
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setWindowIcon
argument_list|(
specifier|const
name|QImage
operator|&
name|icon
argument_list|)
decl|const
decl_stmt|;
name|void
name|destroy
parameter_list|()
function_decl|;
name|QPlatformWindow
operator|*
name|handle
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|setKeyboardGrabEnabled
parameter_list|(
name|bool
name|grab
parameter_list|)
function_decl|;
name|bool
name|setMouseGrabEnabled
parameter_list|(
name|bool
name|grab
parameter_list|)
function_decl|;
name|public
name|Q_SLOTS
range|:
specifier|inline
name|void
name|show
argument_list|()
block|{
name|setVisible
argument_list|(
name|true
argument_list|)
block|; }
specifier|inline
name|void
name|hide
argument_list|()
block|{
name|setVisible
argument_list|(
name|false
argument_list|)
block|; }
name|void
name|showMinimized
argument_list|()
decl_stmt|;
name|void
name|showMaximized
parameter_list|()
function_decl|;
name|void
name|showFullScreen
parameter_list|()
function_decl|;
name|void
name|showNormal
parameter_list|()
function_decl|;
name|bool
name|close
parameter_list|()
function_decl|;
name|void
name|raise
parameter_list|()
function_decl|;
name|void
name|lower
parameter_list|()
function_decl|;
name|void
name|setWindowTitle
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
name|Q_SIGNALS
label|:
name|void
name|backBufferReady
parameter_list|()
function_decl|;
name|protected
label|:
name|virtual
name|void
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|hideEvent
parameter_list|(
name|QHideEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|keyReleaseEvent
parameter_list|(
name|QKeyEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|inputMethodEvent
parameter_list|(
name|QInputMethodEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|mouseDoubleClickEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
name|virtual
name|void
name|wheelEvent
parameter_list|(
name|QWheelEvent
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
name|private
label|:
name|QPlatformSurface
operator|*
name|surfaceHandle
argument_list|()
specifier|const
expr_stmt|;
name|Q_DISABLE_COPY
argument_list|(
argument|QWindow
argument_list|)
name|friend
name|class
name|QGuiApplication
decl_stmt|;
name|friend
name|class
name|QGuiApplicationPrivate
decl_stmt|;
name|friend
name|Q_GUI_EXPORT
name|QWindowPrivate
modifier|*
name|qt_window_private
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QWINDOW_QPA_H
end_comment
end_unit
