begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qscreen.h"
end_include
begin_include
include|#
directive|include
file|"qplatformscreen_qpa.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qobject_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QScreenPrivate
class|class
name|QScreenPrivate
super|:
specifier|public
name|QObjectPrivate
block|{
public|public:
DECL|function|QScreenPrivate
name|QScreenPrivate
parameter_list|(
name|QPlatformScreen
modifier|*
name|screen
parameter_list|)
member_init_list|:
name|platformScreen
argument_list|(
name|screen
argument_list|)
block|{     }
DECL|member|platformScreen
name|QPlatformScreen
modifier|*
name|platformScreen
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QScreen
name|QScreen
operator|::
name|QScreen
parameter_list|(
name|QPlatformScreen
modifier|*
name|screen
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QScreenPrivate
argument_list|(
name|screen
argument_list|)
argument_list|,
literal|0
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!   Get the platform screen handle. */
end_comment
begin_function
DECL|function|handle
name|QPlatformScreen
modifier|*
name|QScreen
operator|::
name|handle
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QScreen
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|platformScreen
return|;
block|}
end_function
begin_comment
comment|/*!   Get the platform dependent screen name.    For example, on an X11 platform this should typically be   the DISPLAY environment variable corresponding to the screen. */
end_comment
begin_function
DECL|function|name
name|QString
name|QScreen
operator|::
name|name
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QScreen
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|platformScreen
operator|->
name|name
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Get the screen's color depth. */
end_comment
begin_function
DECL|function|depth
name|int
name|QScreen
operator|::
name|depth
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QScreen
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|platformScreen
operator|->
name|depth
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Get the screen's size. */
end_comment
begin_function
DECL|function|size
name|QSize
name|QScreen
operator|::
name|size
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QScreen
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|platformScreen
operator|->
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Get the screen's available size.    The available size is the size excluding window manager reserved areas   such as task bars and system menus. */
end_comment
begin_function
DECL|function|availableSize
name|QSize
name|QScreen
operator|::
name|availableSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QScreen
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|platformScreen
operator|->
name|availableGeometry
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Get the screen's geometry. */
end_comment
begin_function
DECL|function|geometry
name|QRect
name|QScreen
operator|::
name|geometry
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QScreen
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|platformScreen
operator|->
name|geometry
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Get the screen's available geometry.    The available geometry is the geometry excluding window manager reserved areas   such as task bars and system menus. */
end_comment
begin_function
DECL|function|availableGeometry
name|QRect
name|QScreen
operator|::
name|availableGeometry
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QScreen
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|platformScreen
operator|->
name|availableGeometry
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Get the screen's virtual siblings.    The virtual siblings are the screen instances sharing the same virtual desktop.   They share a common coordinate system, and windows can freely be moved or   positioned across them without having to be re-created. */
end_comment
begin_function
DECL|function|virtualSiblings
name|QList
argument_list|<
name|QScreen
modifier|*
argument_list|>
name|QScreen
operator|::
name|virtualSiblings
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QScreen
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPlatformScreen
modifier|*
argument_list|>
name|platformScreens
init|=
name|d
operator|->
name|platformScreen
operator|->
name|virtualSiblings
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QScreen
modifier|*
argument_list|>
name|screens
decl_stmt|;
foreach|foreach
control|(
name|QPlatformScreen
modifier|*
name|platformScreen
decl|,
name|platformScreens
control|)
name|screens
operator|<<
name|platformScreen
operator|->
name|screen
argument_list|()
expr_stmt|;
return|return
name|screens
return|;
block|}
end_function
begin_comment
comment|/*!   Get the size of the virtual desktop corresponding to this screen.    This is the combined size of the virtual siblings' individual geometries.    \sa virtualSiblings() */
end_comment
begin_function
DECL|function|virtualSize
name|QSize
name|QScreen
operator|::
name|virtualSize
parameter_list|()
specifier|const
block|{
return|return
name|virtualGeometry
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Get the geometry of the virtual desktop corresponding to this screen.    This is the union of the virtual siblings' individual geometries.    \sa virtualSiblings() */
end_comment
begin_function
DECL|function|virtualGeometry
name|QRect
name|QScreen
operator|::
name|virtualGeometry
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QScreen
argument_list|)
expr_stmt|;
name|QRect
name|result
decl_stmt|;
foreach|foreach
control|(
name|QPlatformScreen
modifier|*
name|platformScreen
decl|,
name|d
operator|->
name|platformScreen
operator|->
name|virtualSiblings
argument_list|()
control|)
name|result
operator||=
name|platformScreen
operator|->
name|geometry
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!   Get the available size of the virtual desktop corresponding to this screen.    This is the combined size of the virtual siblings' individual available geometries.    \sa availableSize()   \sa virtualSiblings() */
end_comment
begin_function
DECL|function|availableVirtualSize
name|QSize
name|QScreen
operator|::
name|availableVirtualSize
parameter_list|()
specifier|const
block|{
return|return
name|availableVirtualGeometry
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Get the available size of the virtual desktop corresponding to this screen.    This is the union of the virtual siblings' individual available geometries.    \sa availableGeometry()   \sa virtualSiblings() */
end_comment
begin_function
DECL|function|availableVirtualGeometry
name|QRect
name|QScreen
operator|::
name|availableVirtualGeometry
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QScreen
argument_list|)
expr_stmt|;
name|QRect
name|result
decl_stmt|;
foreach|foreach
control|(
name|QPlatformScreen
modifier|*
name|platformScreen
decl|,
name|d
operator|->
name|platformScreen
operator|->
name|virtualSiblings
argument_list|()
control|)
name|result
operator||=
name|platformScreen
operator|->
name|availableGeometry
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
