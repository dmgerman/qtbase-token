begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qbuffer.h"
end_include
begin_include
include|#
directive|include
file|"qdatastream.h"
end_include
begin_include
include|#
directive|include
file|"qcursor.h"
end_include
begin_include
include|#
directive|include
file|"qt_windows.h"
end_include
begin_include
include|#
directive|include
file|<shlobj.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|"qaccessible.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qdnd_p.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qguifunctions_wince.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// support for xbuttons
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|MK_XBUTTON1
end_ifndef
begin_define
DECL|macro|MK_XBUTTON1
define|#
directive|define
name|MK_XBUTTON1
value|0x0020
end_define
begin_define
DECL|macro|MK_XBUTTON2
define|#
directive|define
name|MK_XBUTTON2
value|0x0040
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|QT_NO_DRAGANDDROP
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_NO_CLIPBOARD
argument_list|)
operator|)
comment|//---------------------------------------------------------------------
comment|//                    QOleDataObject Constructor
comment|//---------------------------------------------------------------------
DECL|function|QOleDataObject
name|QOleDataObject
operator|::
name|QOleDataObject
parameter_list|(
name|QMimeData
modifier|*
name|mimeData
parameter_list|)
block|{
name|m_refs
operator|=
literal|1
expr_stmt|;
name|data
operator|=
name|mimeData
expr_stmt|;
name|CF_PERFORMEDDROPEFFECT
operator|=
name|RegisterClipboardFormat
argument_list|(
name|CFSTR_PERFORMEDDROPEFFECT
argument_list|)
expr_stmt|;
name|performedEffect
operator|=
name|DROPEFFECT_NONE
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~QOleDataObject
name|QOleDataObject
operator|::
name|~
name|QOleDataObject
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|releaseQt
name|void
name|QOleDataObject
operator|::
name|releaseQt
parameter_list|()
block|{
name|data
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mimeData
specifier|const
name|QMimeData
modifier|*
name|QOleDataObject
operator|::
name|mimeData
parameter_list|()
specifier|const
block|{
return|return
name|data
return|;
block|}
end_function
begin_function
DECL|function|reportedPerformedEffect
name|DWORD
name|QOleDataObject
operator|::
name|reportedPerformedEffect
parameter_list|()
specifier|const
block|{
return|return
name|performedEffect
return|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------
end_comment
begin_comment
comment|//                    IUnknown Methods
end_comment
begin_comment
comment|//---------------------------------------------------------------------
end_comment
begin_function
name|STDMETHODIMP
DECL|function|QueryInterface
name|QOleDataObject
operator|::
name|QueryInterface
parameter_list|(
name|REFIID
name|iid
parameter_list|,
name|void
name|FAR
modifier|*
name|FAR
modifier|*
name|ppv
parameter_list|)
block|{
if|if
condition|(
name|iid
operator|==
name|IID_IUnknown
operator|||
name|iid
operator|==
name|IID_IDataObject
condition|)
block|{
operator|*
name|ppv
operator|=
name|this
expr_stmt|;
name|AddRef
argument_list|()
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
operator|*
name|ppv
operator|=
name|NULL
expr_stmt|;
return|return
name|ResultFromScode
argument_list|(
name|E_NOINTERFACE
argument_list|)
return|;
block|}
end_function
begin_macro
name|STDMETHODIMP_
argument_list|(
argument|ULONG
argument_list|)
end_macro
begin_macro
DECL|function|AddRef
name|QOleDataObject
end_macro
begin_expr_stmt
DECL|function|AddRef
operator|::
name|AddRef
operator|(
name|void
operator|)
block|{
return|return
operator|++
name|m_refs
return|;
block|}
end_expr_stmt
begin_macro
name|STDMETHODIMP_
argument_list|(
argument|ULONG
argument_list|)
end_macro
begin_macro
DECL|function|Release
name|QOleDataObject
end_macro
begin_expr_stmt
DECL|function|Release
operator|::
name|Release
operator|(
name|void
operator|)
block|{
if|if
condition|(
operator|--
name|m_refs
operator|==
literal|0
condition|)
block|{
name|releaseQt
argument_list|()
expr_stmt|;
operator|delete
name|this
expr_stmt|;
return|return
literal|0
return|;
block|}
end_expr_stmt
begin_return
return|return
name|m_refs
return|;
end_return
begin_comment
unit|}
comment|//---------------------------------------------------------------------
end_comment
begin_comment
comment|//                    IDataObject Methods
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// The following methods are NOT supported for data transfer using the
end_comment
begin_comment
comment|// clipboard or drag-drop:
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//      IDataObject::SetData    -- return E_NOTIMPL
end_comment
begin_comment
comment|//      IDataObject::DAdvise    -- return OLE_E_ADVISENOTSUPPORTED
end_comment
begin_comment
comment|//                 ::DUnadvise
end_comment
begin_comment
comment|//                 ::EnumDAdvise
end_comment
begin_comment
comment|//      IDataObject::GetCanonicalFormatEtc -- return E_NOTIMPL
end_comment
begin_comment
comment|//                     (NOTE: must set pformatetcOut->ptd = NULL)
end_comment
begin_comment
comment|//---------------------------------------------------------------------
end_comment
begin_macro
unit|STDMETHODIMP
DECL|function|GetData
name|QOleDataObject
end_macro
begin_expr_stmt
DECL|function|GetData
operator|::
name|GetData
operator|(
name|LPFORMATETC
name|pformatetc
operator|,
name|LPSTGMEDIUM
name|pmedium
operator|)
block|{
ifdef|#
directive|ifdef
name|QDND_DEBUG
name|qDebug
argument_list|(
literal|"QOleDataObject::GetData(LPFORMATETC pformatetc, LPSTGMEDIUM pmedium)"
argument_list|)
block|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|wchar_t
name|buf
index|[
literal|256
index|]
operator|=
block|{
literal|0
block|}
block|;
name|GetClipboardFormatName
argument_list|(
name|pformatetc
operator|->
name|cfFormat
argument_list|,
name|buf
argument_list|,
literal|255
argument_list|)
block|;
name|qDebug
argument_list|(
literal|"CF = %d : %s"
argument_list|,
name|pformatetc
operator|->
name|cfFormat
argument_list|,
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|buf
argument_list|)
argument_list|)
block|;
endif|#
directive|endif
endif|#
directive|endif
if|if
condition|(
operator|!
name|data
condition|)
return|return
name|ResultFromScode
argument_list|(
name|DATA_E_FORMATETC
argument_list|)
return|;
name|QWindowsMime
operator|*
name|converter
operator|=
name|QWindowsMime
operator|::
name|converterFromMime
argument_list|(
operator|*
name|pformatetc
argument_list|,
name|data
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|converter
operator|&&
name|converter
operator|->
name|convertFromMime
argument_list|(
operator|*
name|pformatetc
argument_list|,
name|data
argument_list|,
name|pmedium
argument_list|)
condition|)
return|return
name|ResultFromScode
argument_list|(
name|S_OK
argument_list|)
return|;
else|else
return|return
name|ResultFromScode
argument_list|(
name|DATA_E_FORMATETC
argument_list|)
return|;
end_if
begin_macro
unit|}  STDMETHODIMP
DECL|function|GetDataHere
name|QOleDataObject
end_macro
begin_expr_stmt
DECL|function|GetDataHere
operator|::
name|GetDataHere
operator|(
name|LPFORMATETC
operator|,
name|LPSTGMEDIUM
operator|)
block|{
return|return
name|ResultFromScode
argument_list|(
name|DATA_E_FORMATETC
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
name|STDMETHODIMP
DECL|function|QueryGetData
name|QOleDataObject
operator|::
name|QueryGetData
parameter_list|(
name|LPFORMATETC
name|pformatetc
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QDND_DEBUG
name|qDebug
argument_list|(
literal|"QOleDataObject::QueryGetData(LPFORMATETC pformatetc)"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|data
condition|)
return|return
name|ResultFromScode
argument_list|(
name|DATA_E_FORMATETC
argument_list|)
return|;
if|if
condition|(
name|QWindowsMime
operator|::
name|converterFromMime
argument_list|(
operator|*
name|pformatetc
argument_list|,
name|data
argument_list|)
condition|)
return|return
name|ResultFromScode
argument_list|(
name|S_OK
argument_list|)
return|;
return|return
name|ResultFromScode
argument_list|(
name|S_FALSE
argument_list|)
return|;
block|}
end_function
begin_function
name|STDMETHODIMP
DECL|function|GetCanonicalFormatEtc
name|QOleDataObject
operator|::
name|GetCanonicalFormatEtc
parameter_list|(
name|LPFORMATETC
parameter_list|,
name|LPFORMATETC
name|pformatetcOut
parameter_list|)
block|{
name|pformatetcOut
operator|->
name|ptd
operator|=
name|NULL
expr_stmt|;
return|return
name|ResultFromScode
argument_list|(
name|E_NOTIMPL
argument_list|)
return|;
block|}
end_function
begin_function
name|STDMETHODIMP
DECL|function|SetData
name|QOleDataObject
operator|::
name|SetData
parameter_list|(
name|LPFORMATETC
name|pFormatetc
parameter_list|,
name|STGMEDIUM
modifier|*
name|pMedium
parameter_list|,
name|BOOL
name|fRelease
parameter_list|)
block|{
if|if
condition|(
name|pFormatetc
operator|->
name|cfFormat
operator|==
name|CF_PERFORMEDDROPEFFECT
operator|&&
name|pMedium
operator|->
name|tymed
operator|==
name|TYMED_HGLOBAL
condition|)
block|{
name|DWORD
modifier|*
name|val
init|=
operator|(
name|DWORD
operator|*
operator|)
name|GlobalLock
argument_list|(
name|pMedium
operator|->
name|hGlobal
argument_list|)
decl_stmt|;
name|performedEffect
operator|=
operator|*
name|val
expr_stmt|;
name|GlobalUnlock
argument_list|(
name|pMedium
operator|->
name|hGlobal
argument_list|)
expr_stmt|;
if|if
condition|(
name|fRelease
condition|)
name|ReleaseStgMedium
argument_list|(
name|pMedium
argument_list|)
expr_stmt|;
return|return
name|ResultFromScode
argument_list|(
name|S_OK
argument_list|)
return|;
block|}
return|return
name|ResultFromScode
argument_list|(
name|E_NOTIMPL
argument_list|)
return|;
block|}
end_function
begin_function
name|STDMETHODIMP
DECL|function|EnumFormatEtc
name|QOleDataObject
operator|::
name|EnumFormatEtc
parameter_list|(
name|DWORD
name|dwDirection
parameter_list|,
name|LPENUMFORMATETC
name|FAR
modifier|*
name|ppenumFormatEtc
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QDND_DEBUG
name|qDebug
argument_list|(
literal|"QOleDataObject::EnumFormatEtc(DWORD dwDirection, LPENUMFORMATETC FAR* ppenumFormatEtc)"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|data
condition|)
return|return
name|ResultFromScode
argument_list|(
name|DATA_E_FORMATETC
argument_list|)
return|;
name|SCODE
name|sc
init|=
name|S_OK
decl_stmt|;
name|QVector
argument_list|<
name|FORMATETC
argument_list|>
name|fmtetcs
decl_stmt|;
if|if
condition|(
name|dwDirection
operator|==
name|DATADIR_GET
condition|)
block|{
name|fmtetcs
operator|=
name|QWindowsMime
operator|::
name|allFormatsForMime
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FORMATETC
name|formatetc
decl_stmt|;
name|formatetc
operator|.
name|cfFormat
operator|=
name|CF_PERFORMEDDROPEFFECT
expr_stmt|;
name|formatetc
operator|.
name|dwAspect
operator|=
name|DVASPECT_CONTENT
expr_stmt|;
name|formatetc
operator|.
name|lindex
operator|=
operator|-
literal|1
expr_stmt|;
name|formatetc
operator|.
name|ptd
operator|=
name|NULL
expr_stmt|;
name|formatetc
operator|.
name|tymed
operator|=
name|TYMED_HGLOBAL
expr_stmt|;
name|fmtetcs
operator|.
name|append
argument_list|(
name|formatetc
argument_list|)
expr_stmt|;
block|}
name|QOleEnumFmtEtc
modifier|*
name|enumFmtEtc
init|=
operator|new
name|QOleEnumFmtEtc
argument_list|(
name|fmtetcs
argument_list|)
decl_stmt|;
operator|*
name|ppenumFormatEtc
operator|=
name|enumFmtEtc
expr_stmt|;
if|if
condition|(
name|enumFmtEtc
operator|->
name|isNull
argument_list|()
condition|)
block|{
operator|delete
name|enumFmtEtc
expr_stmt|;
operator|*
name|ppenumFormatEtc
operator|=
name|NULL
expr_stmt|;
name|sc
operator|=
name|E_OUTOFMEMORY
expr_stmt|;
block|}
return|return
name|ResultFromScode
argument_list|(
name|sc
argument_list|)
return|;
block|}
end_function
begin_function
name|STDMETHODIMP
DECL|function|DAdvise
name|QOleDataObject
operator|::
name|DAdvise
parameter_list|(
name|FORMATETC
name|FAR
modifier|*
parameter_list|,
name|DWORD
parameter_list|,
name|LPADVISESINK
parameter_list|,
name|DWORD
name|FAR
modifier|*
parameter_list|)
block|{
return|return
name|ResultFromScode
argument_list|(
name|OLE_E_ADVISENOTSUPPORTED
argument_list|)
return|;
block|}
end_function
begin_function
name|STDMETHODIMP
DECL|function|DUnadvise
name|QOleDataObject
operator|::
name|DUnadvise
parameter_list|(
name|DWORD
parameter_list|)
block|{
return|return
name|ResultFromScode
argument_list|(
name|OLE_E_ADVISENOTSUPPORTED
argument_list|)
return|;
block|}
end_function
begin_function
name|STDMETHODIMP
DECL|function|EnumDAdvise
name|QOleDataObject
operator|::
name|EnumDAdvise
parameter_list|(
name|LPENUMSTATDATA
name|FAR
modifier|*
parameter_list|)
block|{
return|return
name|ResultFromScode
argument_list|(
name|OLE_E_ADVISENOTSUPPORTED
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP&& QT_NO_CLIPBOARD
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_comment
comment|//#define QDND_DEBUG
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QDND_DEBUG
end_ifdef
begin_function_decl
specifier|extern
name|QString
name|dragActionsToString
parameter_list|(
name|Qt
operator|::
name|DropActions
name|actions
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|translateToQDragDropActions
name|Qt
operator|::
name|DropActions
name|translateToQDragDropActions
parameter_list|(
name|DWORD
name|pdwEffects
parameter_list|)
block|{
name|Qt
operator|::
name|DropActions
name|actions
init|=
name|Qt
operator|::
name|IgnoreAction
decl_stmt|;
if|if
condition|(
name|pdwEffects
operator|&
name|DROPEFFECT_LINK
condition|)
name|actions
operator||=
name|Qt
operator|::
name|LinkAction
expr_stmt|;
if|if
condition|(
name|pdwEffects
operator|&
name|DROPEFFECT_COPY
condition|)
name|actions
operator||=
name|Qt
operator|::
name|CopyAction
expr_stmt|;
if|if
condition|(
name|pdwEffects
operator|&
name|DROPEFFECT_MOVE
condition|)
name|actions
operator||=
name|Qt
operator|::
name|MoveAction
expr_stmt|;
return|return
name|actions
return|;
block|}
end_function
begin_function
DECL|function|translateToQDragDropAction
name|Qt
operator|::
name|DropAction
name|translateToQDragDropAction
parameter_list|(
name|DWORD
name|pdwEffect
parameter_list|)
block|{
if|if
condition|(
name|pdwEffect
operator|&
name|DROPEFFECT_LINK
condition|)
return|return
name|Qt
operator|::
name|LinkAction
return|;
if|if
condition|(
name|pdwEffect
operator|&
name|DROPEFFECT_COPY
condition|)
return|return
name|Qt
operator|::
name|CopyAction
return|;
if|if
condition|(
name|pdwEffect
operator|&
name|DROPEFFECT_MOVE
condition|)
return|return
name|Qt
operator|::
name|MoveAction
return|;
return|return
name|Qt
operator|::
name|IgnoreAction
return|;
block|}
end_function
begin_function
DECL|function|translateToWinDragEffects
name|DWORD
name|translateToWinDragEffects
parameter_list|(
name|Qt
operator|::
name|DropActions
name|action
parameter_list|)
block|{
name|DWORD
name|effect
init|=
name|DROPEFFECT_NONE
decl_stmt|;
if|if
condition|(
name|action
operator|&
name|Qt
operator|::
name|LinkAction
condition|)
name|effect
operator||=
name|DROPEFFECT_LINK
expr_stmt|;
if|if
condition|(
name|action
operator|&
name|Qt
operator|::
name|CopyAction
condition|)
name|effect
operator||=
name|DROPEFFECT_COPY
expr_stmt|;
if|if
condition|(
name|action
operator|&
name|Qt
operator|::
name|MoveAction
condition|)
name|effect
operator||=
name|DROPEFFECT_MOVE
expr_stmt|;
return|return
name|effect
return|;
block|}
end_function
begin_function
DECL|function|toQtKeyboardModifiers
name|Qt
operator|::
name|KeyboardModifiers
name|toQtKeyboardModifiers
parameter_list|(
name|DWORD
name|keyState
parameter_list|)
block|{
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
init|=
name|Qt
operator|::
name|NoModifier
decl_stmt|;
if|if
condition|(
name|keyState
operator|&
name|MK_SHIFT
condition|)
name|modifiers
operator||=
name|Qt
operator|::
name|ShiftModifier
expr_stmt|;
if|if
condition|(
name|keyState
operator|&
name|MK_CONTROL
condition|)
name|modifiers
operator||=
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
if|if
condition|(
name|keyState
operator|&
name|MK_ALT
condition|)
name|modifiers
operator||=
name|Qt
operator|::
name|AltModifier
expr_stmt|;
return|return
name|modifiers
return|;
block|}
end_function
begin_function
DECL|function|toQtMouseButtons
name|Qt
operator|::
name|MouseButtons
name|toQtMouseButtons
parameter_list|(
name|DWORD
name|keyState
parameter_list|)
block|{
name|Qt
operator|::
name|MouseButtons
name|buttons
init|=
name|Qt
operator|::
name|NoButton
decl_stmt|;
if|if
condition|(
name|keyState
operator|&
name|MK_LBUTTON
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
if|if
condition|(
name|keyState
operator|&
name|MK_RBUTTON
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|RightButton
expr_stmt|;
if|if
condition|(
name|keyState
operator|&
name|MK_MBUTTON
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|MidButton
expr_stmt|;
return|return
name|buttons
return|;
block|}
end_function
begin_class
DECL|class|QOleDropSource
class|class
name|QOleDropSource
super|:
specifier|public
name|IDropSource
block|{
public|public:
name|QOleDropSource
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|QOleDropSource
parameter_list|()
destructor_decl|;
name|void
name|createCursors
parameter_list|()
function_decl|;
comment|// IUnknown methods
name|STDMETHOD
function_decl|(
name|QueryInterface
function_decl|)
parameter_list|(
name|REFIID
name|riid
parameter_list|,
name|void
modifier|*
modifier|*
name|ppvObj
parameter_list|)
function_decl|;
name|STDMETHOD_
argument_list|(
argument|ULONG
argument_list|,
argument|AddRef
argument_list|)
operator|(
name|void
operator|)
expr_stmt|;
name|STDMETHOD_
argument_list|(
argument|ULONG
argument_list|,
argument|Release
argument_list|)
operator|(
name|void
operator|)
expr_stmt|;
comment|// IDropSource methods
name|STDMETHOD
function_decl|(
name|QueryContinueDrag
function_decl|)
parameter_list|(
name|BOOL
name|fEscapePressed
parameter_list|,
name|DWORD
name|grfKeyState
parameter_list|)
function_decl|;
name|STDMETHOD
function_decl|(
name|GiveFeedback
function_decl|)
parameter_list|(
name|DWORD
name|dwEffect
parameter_list|)
function_decl|;
private|private:
DECL|member|currentButtons
name|Qt
operator|::
name|MouseButtons
name|currentButtons
decl_stmt|;
DECL|member|currentAction
name|Qt
operator|::
name|DropAction
name|currentAction
decl_stmt|;
DECL|member|cursors
name|QMap
argument_list|<
name|Qt
operator|::
name|DropAction
argument_list|,
name|QCursor
argument_list|>
name|cursors
decl_stmt|;
DECL|member|m_refs
name|ULONG
name|m_refs
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QOleDropSource
name|QOleDropSource
operator|::
name|QOleDropSource
parameter_list|()
block|{
name|currentButtons
operator|=
name|Qt
operator|::
name|NoButton
expr_stmt|;
name|m_refs
operator|=
literal|1
expr_stmt|;
name|currentAction
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QOleDropSource
name|QOleDropSource
operator|::
name|~
name|QOleDropSource
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|createCursors
name|void
name|QOleDropSource
operator|::
name|createCursors
parameter_list|()
block|{
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
if|if
condition|(
name|manager
operator|&&
name|manager
operator|->
name|object
operator|&&
operator|(
operator|!
name|manager
operator|->
name|object
operator|->
name|pixmap
argument_list|()
operator|.
name|isNull
argument_list|()
operator|||
name|manager
operator|->
name|hasCustomDragCursors
argument_list|()
operator|)
condition|)
block|{
name|QPixmap
name|pm
init|=
name|manager
operator|->
name|object
operator|->
name|pixmap
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|Qt
operator|::
name|DropAction
argument_list|>
name|actions
decl_stmt|;
name|actions
operator|<<
name|Qt
operator|::
name|MoveAction
operator|<<
name|Qt
operator|::
name|CopyAction
operator|<<
name|Qt
operator|::
name|LinkAction
expr_stmt|;
if|if
condition|(
operator|!
name|manager
operator|->
name|object
operator|->
name|pixmap
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
name|actions
operator|<<
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
name|QPoint
name|hotSpot
init|=
name|manager
operator|->
name|object
operator|->
name|hotSpot
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|cnum
init|=
literal|0
init|;
name|cnum
operator|<
name|actions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|cnum
control|)
block|{
name|QPixmap
name|cpm
init|=
name|manager
operator|->
name|dragCursor
argument_list|(
name|actions
operator|.
name|at
argument_list|(
name|cnum
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|cpm
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|cpm
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pm
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|int
name|x1
init|=
name|qMin
argument_list|(
operator|-
name|hotSpot
operator|.
name|x
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|x2
init|=
name|qMax
argument_list|(
name|pm
operator|.
name|width
argument_list|()
operator|-
name|hotSpot
operator|.
name|x
argument_list|()
argument_list|,
name|cpm
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|y1
init|=
name|qMin
argument_list|(
operator|-
name|hotSpot
operator|.
name|y
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|y2
init|=
name|qMax
argument_list|(
name|pm
operator|.
name|height
argument_list|()
operator|-
name|hotSpot
operator|.
name|y
argument_list|()
argument_list|,
name|cpm
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|w
operator|=
name|x2
operator|-
name|x1
operator|+
literal|1
expr_stmt|;
name|h
operator|=
name|y2
operator|-
name|y1
operator|+
literal|1
expr_stmt|;
block|}
name|QRect
name|srcRect
init|=
name|pm
operator|.
name|rect
argument_list|()
decl_stmt|;
name|QPoint
name|pmDest
init|=
name|QPoint
argument_list|(
name|qMax
argument_list|(
literal|0
argument_list|,
operator|-
name|hotSpot
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|qMax
argument_list|(
literal|0
argument_list|,
operator|-
name|hotSpot
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QPoint
name|newHotSpot
init|=
name|hotSpot
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|// Limited cursor size
name|int
name|reqw
init|=
name|GetSystemMetrics
argument_list|(
name|SM_CXCURSOR
argument_list|)
decl_stmt|;
name|int
name|reqh
init|=
name|GetSystemMetrics
argument_list|(
name|SM_CYCURSOR
argument_list|)
decl_stmt|;
name|QPoint
name|hotspotInPM
init|=
name|newHotSpot
operator|-
name|pmDest
decl_stmt|;
if|if
condition|(
name|reqw
operator|<
name|w
condition|)
block|{
comment|// Not wide enough - move objectpm right
name|qreal
name|r
init|=
name|qreal
argument_list|(
name|newHotSpot
operator|.
name|x
argument_list|()
argument_list|)
operator|/
name|w
decl_stmt|;
name|newHotSpot
operator|=
name|QPoint
argument_list|(
name|int
argument_list|(
name|r
operator|*
name|reqw
argument_list|)
argument_list|,
name|newHotSpot
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|newHotSpot
operator|.
name|x
argument_list|()
operator|+
name|cpm
operator|.
name|width
argument_list|()
operator|>
name|reqw
condition|)
name|newHotSpot
operator|.
name|setX
argument_list|(
name|reqw
operator|-
name|cpm
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|srcRect
operator|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
name|hotspotInPM
operator|.
name|x
argument_list|()
operator|-
name|newHotSpot
operator|.
name|x
argument_list|()
argument_list|,
name|srcRect
operator|.
name|top
argument_list|()
argument_list|)
argument_list|,
name|QSize
argument_list|(
name|reqw
argument_list|,
name|srcRect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reqh
operator|<
name|h
condition|)
block|{
name|qreal
name|r
init|=
name|qreal
argument_list|(
name|newHotSpot
operator|.
name|y
argument_list|()
argument_list|)
operator|/
name|h
decl_stmt|;
name|newHotSpot
operator|=
name|QPoint
argument_list|(
name|newHotSpot
operator|.
name|x
argument_list|()
argument_list|,
name|int
argument_list|(
name|r
operator|*
name|reqh
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|newHotSpot
operator|.
name|y
argument_list|()
operator|+
name|cpm
operator|.
name|height
argument_list|()
operator|>
name|reqh
condition|)
name|newHotSpot
operator|.
name|setY
argument_list|(
name|reqh
operator|-
name|cpm
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|srcRect
operator|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
name|srcRect
operator|.
name|left
argument_list|()
argument_list|,
name|hotspotInPM
operator|.
name|y
argument_list|()
operator|-
name|newHotSpot
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|QSize
argument_list|(
name|srcRect
operator|.
name|width
argument_list|()
argument_list|,
name|reqh
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Always use system cursor size
name|w
operator|=
name|reqw
expr_stmt|;
name|h
operator|=
name|reqh
expr_stmt|;
endif|#
directive|endif
name|QPixmap
name|newCursor
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pm
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|newCursor
operator|.
name|fill
argument_list|(
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|newCursor
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|pmDest
argument_list|,
name|pm
argument_list|,
name|srcRect
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|qMax
argument_list|(
literal|0
argument_list|,
name|newHotSpot
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|qMax
argument_list|(
literal|0
argument_list|,
name|newHotSpot
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|cpm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newCursor
operator|=
name|cpm
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|cursors
index|[
name|actions
operator|.
name|at
argument_list|(
name|cnum
argument_list|)
index|]
operator|=
name|QCursor
argument_list|(
name|newCursor
argument_list|,
name|pm
operator|.
name|isNull
argument_list|()
condition|?
literal|0
else|:
name|qMax
argument_list|(
literal|0
argument_list|,
name|newHotSpot
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|pm
operator|.
name|isNull
argument_list|()
condition|?
literal|0
else|:
name|qMax
argument_list|(
literal|0
argument_list|,
name|newHotSpot
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------
end_comment
begin_comment
comment|//                    IUnknown Methods
end_comment
begin_comment
comment|//---------------------------------------------------------------------
end_comment
begin_function
name|STDMETHODIMP
DECL|function|QueryInterface
name|QOleDropSource
operator|::
name|QueryInterface
parameter_list|(
name|REFIID
name|iid
parameter_list|,
name|void
name|FAR
modifier|*
name|FAR
modifier|*
name|ppv
parameter_list|)
block|{
if|if
condition|(
name|iid
operator|==
name|IID_IUnknown
operator|||
name|iid
operator|==
name|IID_IDropSource
condition|)
block|{
operator|*
name|ppv
operator|=
name|this
expr_stmt|;
operator|++
name|m_refs
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
operator|*
name|ppv
operator|=
name|NULL
expr_stmt|;
return|return
name|ResultFromScode
argument_list|(
name|E_NOINTERFACE
argument_list|)
return|;
block|}
end_function
begin_macro
name|STDMETHODIMP_
argument_list|(
argument|ULONG
argument_list|)
end_macro
begin_macro
DECL|function|AddRef
name|QOleDropSource
end_macro
begin_expr_stmt
DECL|function|AddRef
operator|::
name|AddRef
operator|(
name|void
operator|)
block|{
return|return
operator|++
name|m_refs
return|;
block|}
end_expr_stmt
begin_macro
name|STDMETHODIMP_
argument_list|(
argument|ULONG
argument_list|)
end_macro
begin_macro
DECL|function|Release
name|QOleDropSource
end_macro
begin_expr_stmt
DECL|function|Release
operator|::
name|Release
operator|(
name|void
operator|)
block|{
if|if
condition|(
operator|--
name|m_refs
operator|==
literal|0
condition|)
block|{
operator|delete
name|this
expr_stmt|;
return|return
literal|0
return|;
block|}
end_expr_stmt
begin_return
return|return
name|m_refs
return|;
end_return
begin_function
unit|}  static
DECL|function|keystate_to_mousebutton
specifier|inline
name|Qt
operator|::
name|MouseButtons
name|keystate_to_mousebutton
parameter_list|(
name|DWORD
name|grfKeyState
parameter_list|)
block|{
name|Qt
operator|::
name|MouseButtons
name|result
decl_stmt|;
if|if
condition|(
name|grfKeyState
operator|&
name|MK_LBUTTON
condition|)
name|result
operator||=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
if|if
condition|(
name|grfKeyState
operator|&
name|MK_MBUTTON
condition|)
name|result
operator||=
name|Qt
operator|::
name|MidButton
expr_stmt|;
if|if
condition|(
name|grfKeyState
operator|&
name|MK_RBUTTON
condition|)
name|result
operator||=
name|Qt
operator|::
name|RightButton
expr_stmt|;
if|if
condition|(
name|grfKeyState
operator|&
name|MK_XBUTTON1
condition|)
name|result
operator||=
name|Qt
operator|::
name|XButton1
expr_stmt|;
if|if
condition|(
name|grfKeyState
operator|&
name|MK_XBUTTON2
condition|)
name|result
operator||=
name|Qt
operator|::
name|XButton2
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------
end_comment
begin_comment
comment|//                    IDropSource Methods
end_comment
begin_comment
comment|//---------------------------------------------------------------------
end_comment
begin_function
name|QT_ENSURE_STACK_ALIGNED_FOR_SSE
name|STDMETHODIMP
DECL|function|QueryContinueDrag
name|QOleDropSource
operator|::
name|QueryContinueDrag
parameter_list|(
name|BOOL
name|fEscapePressed
parameter_list|,
name|DWORD
name|grfKeyState
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QDND_DEBUG
name|qDebug
argument_list|(
literal|"QOleDropSource::QueryContinueDrag(fEscapePressed %d, grfKeyState %d)"
argument_list|,
name|fEscapePressed
argument_list|,
name|grfKeyState
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|fEscapePressed
condition|)
block|{
return|return
name|ResultFromScode
argument_list|(
name|DRAGDROP_S_CANCEL
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|GetAsyncKeyState
argument_list|(
name|VK_LBUTTON
argument_list|)
operator|==
literal|0
operator|)
operator|&&
operator|(
name|GetAsyncKeyState
argument_list|(
name|VK_MBUTTON
argument_list|)
operator|==
literal|0
operator|)
operator|&&
operator|(
name|GetAsyncKeyState
argument_list|(
name|VK_RBUTTON
argument_list|)
operator|==
literal|0
operator|)
condition|)
block|{
comment|// grfKeyState is broken on CE& some Windows XP versions,
comment|// therefore we need to check the state manually
return|return
name|ResultFromScode
argument_list|(
name|DRAGDROP_S_DROP
argument_list|)
return|;
block|}
else|else
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|if
condition|(
name|currentButtons
operator|==
name|Qt
operator|::
name|NoButton
condition|)
block|{
name|currentButtons
operator|=
name|keystate_to_mousebutton
argument_list|(
name|grfKeyState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Qt
operator|::
name|MouseButtons
name|buttons
init|=
name|keystate_to_mousebutton
argument_list|(
name|grfKeyState
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|currentButtons
operator|&
name|buttons
operator|)
condition|)
return|return
name|ResultFromScode
argument_list|(
name|DRAGDROP_S_DROP
argument_list|)
return|;
block|}
endif|#
directive|endif
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
block|}
end_function
begin_function
name|QT_ENSURE_STACK_ALIGNED_FOR_SSE
name|STDMETHODIMP
DECL|function|GiveFeedback
name|QOleDropSource
operator|::
name|GiveFeedback
parameter_list|(
name|DWORD
name|dwEffect
parameter_list|)
block|{
name|Qt
operator|::
name|DropAction
name|action
init|=
name|translateToQDragDropAction
argument_list|(
name|dwEffect
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QDND_DEBUG
name|qDebug
argument_list|(
literal|"QOleDropSource::GiveFeedback(DWORD dwEffect)"
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"dwEffect = %s"
argument_list|,
name|dragActionsToString
argument_list|(
name|action
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|currentAction
operator|!=
name|action
condition|)
block|{
name|currentAction
operator|=
name|action
expr_stmt|;
name|QDragManager
operator|::
name|self
argument_list|()
operator|->
name|emitActionChanged
argument_list|(
name|currentAction
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cursors
operator|.
name|contains
argument_list|(
name|currentAction
argument_list|)
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|SetCursor
argument_list|(
name|cursors
index|[
name|currentAction
index|]
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|ResultFromScode
argument_list|(
name|S_OK
argument_list|)
return|;
block|}
return|return
name|ResultFromScode
argument_list|(
name|DRAGDROP_S_USEDEFAULTCURSORS
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------
end_comment
begin_comment
comment|//                    QOleDropTarget
end_comment
begin_comment
comment|//---------------------------------------------------------------------
end_comment
begin_constructor
DECL|function|QOleDropTarget
name|QOleDropTarget
operator|::
name|QOleDropTarget
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
member_init_list|:
name|widget
argument_list|(
name|w
argument_list|)
block|{
name|m_refs
operator|=
literal|1
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|releaseQt
name|void
name|QOleDropTarget
operator|::
name|releaseQt
parameter_list|()
block|{
name|widget
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------
end_comment
begin_comment
comment|//                    IUnknown Methods
end_comment
begin_comment
comment|//---------------------------------------------------------------------
end_comment
begin_function
name|STDMETHODIMP
DECL|function|QueryInterface
name|QOleDropTarget
operator|::
name|QueryInterface
parameter_list|(
name|REFIID
name|iid
parameter_list|,
name|void
name|FAR
modifier|*
name|FAR
modifier|*
name|ppv
parameter_list|)
block|{
if|if
condition|(
name|iid
operator|==
name|IID_IUnknown
operator|||
name|iid
operator|==
name|IID_IDropTarget
condition|)
block|{
operator|*
name|ppv
operator|=
name|this
expr_stmt|;
name|AddRef
argument_list|()
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
operator|*
name|ppv
operator|=
name|NULL
expr_stmt|;
return|return
name|ResultFromScode
argument_list|(
name|E_NOINTERFACE
argument_list|)
return|;
block|}
end_function
begin_macro
name|STDMETHODIMP_
argument_list|(
argument|ULONG
argument_list|)
end_macro
begin_macro
DECL|function|AddRef
name|QOleDropTarget
end_macro
begin_expr_stmt
DECL|function|AddRef
operator|::
name|AddRef
operator|(
name|void
operator|)
block|{
return|return
operator|++
name|m_refs
return|;
block|}
end_expr_stmt
begin_macro
name|STDMETHODIMP_
argument_list|(
argument|ULONG
argument_list|)
end_macro
begin_macro
DECL|function|Release
name|QOleDropTarget
end_macro
begin_expr_stmt
DECL|function|Release
operator|::
name|Release
operator|(
name|void
operator|)
block|{
if|if
condition|(
operator|--
name|m_refs
operator|==
literal|0
condition|)
block|{
operator|delete
name|this
expr_stmt|;
return|return
literal|0
return|;
block|}
end_expr_stmt
begin_return
return|return
name|m_refs
return|;
end_return
begin_comment
unit|}
comment|//---------------------------------------------------------------------
end_comment
begin_comment
comment|//                    IDropTarget Methods
end_comment
begin_comment
comment|//---------------------------------------------------------------------
end_comment
begin_function
unit|QT_ENSURE_STACK_ALIGNED_FOR_SSE
name|STDMETHODIMP
DECL|function|DragEnter
name|QOleDropTarget
operator|::
name|DragEnter
parameter_list|(
name|LPDATAOBJECT
name|pDataObj
parameter_list|,
name|DWORD
name|grfKeyState
parameter_list|,
name|POINTL
name|pt
parameter_list|,
name|LPDWORD
name|pdwEffect
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QDND_DEBUG
name|qDebug
argument_list|(
literal|"QOleDropTarget::DragEnter(LPDATAOBJECT pDataObj, DWORD grfKeyState, POINTL pt, LPDWORD pdwEffect)"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|QApplicationPrivate
operator|::
name|tryModalHelper
argument_list|(
name|widget
argument_list|)
condition|)
block|{
operator|*
name|pdwEffect
operator|=
name|DROPEFFECT_NONE
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|manager
operator|->
name|dropData
operator|->
name|currentDataObject
operator|=
name|pDataObj
expr_stmt|;
name|manager
operator|->
name|dropData
operator|->
name|currentDataObject
operator|->
name|AddRef
argument_list|()
expr_stmt|;
name|sendDragEnterEvent
argument_list|(
name|widget
argument_list|,
name|grfKeyState
argument_list|,
name|pt
argument_list|,
name|pdwEffect
argument_list|)
expr_stmt|;
operator|*
name|pdwEffect
operator|=
name|chosenEffect
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
end_function
begin_function
DECL|function|sendDragEnterEvent
name|void
name|QOleDropTarget
operator|::
name|sendDragEnterEvent
parameter_list|(
name|QWidget
modifier|*
name|dragEnterWidget
parameter_list|,
name|DWORD
name|grfKeyState
parameter_list|,
name|POINTL
name|pt
parameter_list|,
name|LPDWORD
name|pdwEffect
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|dragEnterWidget
argument_list|)
expr_stmt|;
name|lastPoint
operator|=
name|dragEnterWidget
operator|->
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
name|pt
operator|.
name|x
argument_list|,
name|pt
operator|.
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|lastKeyState
operator|=
name|grfKeyState
expr_stmt|;
name|chosenEffect
operator|=
name|DROPEFFECT_NONE
expr_stmt|;
name|currentWidget
operator|=
name|dragEnterWidget
expr_stmt|;
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|QMimeData
modifier|*
name|md
init|=
name|manager
operator|->
name|source
argument_list|()
condition|?
name|manager
operator|->
name|dragPrivate
argument_list|()
operator|->
name|data
else|:
name|manager
operator|->
name|dropData
decl_stmt|;
name|QDragEnterEvent
name|enterEvent
argument_list|(
name|lastPoint
argument_list|,
name|translateToQDragDropActions
argument_list|(
operator|*
name|pdwEffect
argument_list|)
argument_list|,
name|md
argument_list|,
name|toQtMouseButtons
argument_list|(
name|grfKeyState
argument_list|)
argument_list|,
name|toQtKeyboardModifiers
argument_list|(
name|grfKeyState
argument_list|)
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|dragEnterWidget
argument_list|,
operator|&
name|enterEvent
argument_list|)
expr_stmt|;
name|answerRect
operator|=
name|enterEvent
operator|.
name|answerRect
argument_list|()
expr_stmt|;
if|if
condition|(
name|enterEvent
operator|.
name|isAccepted
argument_list|()
condition|)
block|{
name|chosenEffect
operator|=
name|translateToWinDragEffects
argument_list|(
name|enterEvent
operator|.
name|dropAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Documentation states that a drag move event is sendt immidiatly after
comment|// a drag enter event. This will honor widgets overriding dragMoveEvent only:
if|if
condition|(
name|enterEvent
operator|.
name|isAccepted
argument_list|()
condition|)
block|{
name|QDragMoveEvent
name|moveEvent
argument_list|(
name|lastPoint
argument_list|,
name|translateToQDragDropActions
argument_list|(
operator|*
name|pdwEffect
argument_list|)
argument_list|,
name|md
argument_list|,
name|toQtMouseButtons
argument_list|(
name|grfKeyState
argument_list|)
argument_list|,
name|toQtKeyboardModifiers
argument_list|(
name|grfKeyState
argument_list|)
argument_list|)
decl_stmt|;
name|answerRect
operator|=
name|enterEvent
operator|.
name|answerRect
argument_list|()
expr_stmt|;
name|moveEvent
operator|.
name|setDropAction
argument_list|(
name|enterEvent
operator|.
name|dropAction
argument_list|()
argument_list|)
expr_stmt|;
name|moveEvent
operator|.
name|accept
argument_list|()
expr_stmt|;
comment|// accept by default, since enter event was accepted.
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|dragEnterWidget
argument_list|,
operator|&
name|moveEvent
argument_list|)
expr_stmt|;
if|if
condition|(
name|moveEvent
operator|.
name|isAccepted
argument_list|()
condition|)
block|{
name|answerRect
operator|=
name|moveEvent
operator|.
name|answerRect
argument_list|()
expr_stmt|;
name|chosenEffect
operator|=
name|translateToWinDragEffects
argument_list|(
name|moveEvent
operator|.
name|dropAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|chosenEffect
operator|=
name|DROPEFFECT_NONE
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
name|QT_ENSURE_STACK_ALIGNED_FOR_SSE
name|STDMETHODIMP
DECL|function|DragOver
name|QOleDropTarget
operator|::
name|DragOver
parameter_list|(
name|DWORD
name|grfKeyState
parameter_list|,
name|POINTL
name|pt
parameter_list|,
name|LPDWORD
name|pdwEffect
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QDND_DEBUG
name|qDebug
argument_list|(
literal|"QOleDropTarget::DragOver(grfKeyState %d, pt (%d,%d), pdwEffect %d)"
argument_list|,
name|grfKeyState
argument_list|,
name|pt
operator|.
name|x
argument_list|,
name|pt
operator|.
name|y
argument_list|,
name|pdwEffect
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QWidget
modifier|*
name|dragOverWidget
init|=
name|widget
operator|->
name|childAt
argument_list|(
name|widget
operator|->
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
name|pt
operator|.
name|x
argument_list|,
name|pt
operator|.
name|y
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dragOverWidget
condition|)
name|dragOverWidget
operator|=
name|widget
expr_stmt|;
if|if
condition|(
operator|!
name|QApplicationPrivate
operator|::
name|tryModalHelper
argument_list|(
name|dragOverWidget
argument_list|)
operator|||
operator|!
name|dragOverWidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DropSiteRegistered
argument_list|)
condition|)
block|{
operator|*
name|pdwEffect
operator|=
name|DROPEFFECT_NONE
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
name|QPoint
name|tmpPoint
init|=
name|dragOverWidget
operator|->
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
name|pt
operator|.
name|x
argument_list|,
name|pt
operator|.
name|y
argument_list|)
argument_list|)
decl_stmt|;
comment|// see if we should compress this event
if|if
condition|(
operator|(
name|tmpPoint
operator|==
name|lastPoint
operator|||
name|answerRect
operator|.
name|contains
argument_list|(
name|tmpPoint
argument_list|)
operator|)
operator|&&
name|lastKeyState
operator|==
name|grfKeyState
condition|)
block|{
operator|*
name|pdwEffect
operator|=
name|chosenEffect
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
if|if
condition|(
operator|!
name|dragOverWidget
operator|->
name|internalWinId
argument_list|()
operator|&&
name|dragOverWidget
operator|!=
name|currentWidget
condition|)
block|{
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|dragOverWidgetGuard
argument_list|(
name|dragOverWidget
argument_list|)
decl_stmt|;
comment|// Send drag leave event to the previous drag widget.
name|QDragLeaveEvent
name|dragLeave
decl_stmt|;
if|if
condition|(
name|currentWidget
condition|)
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|currentWidget
argument_list|,
operator|&
name|dragLeave
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dragOverWidgetGuard
condition|)
block|{
name|dragOverWidget
operator|=
name|widget
operator|->
name|childAt
argument_list|(
name|widget
operator|->
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
name|pt
operator|.
name|x
argument_list|,
name|pt
operator|.
name|y
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dragOverWidget
condition|)
name|dragOverWidget
operator|=
name|widget
expr_stmt|;
block|}
comment|// Send drag enter event to the current drag widget.
name|sendDragEnterEvent
argument_list|(
name|dragOverWidget
argument_list|,
name|grfKeyState
argument_list|,
name|pt
argument_list|,
name|pdwEffect
argument_list|)
expr_stmt|;
block|}
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|QMimeData
modifier|*
name|md
init|=
name|manager
operator|->
name|source
argument_list|()
condition|?
name|manager
operator|->
name|dragPrivate
argument_list|()
operator|->
name|data
else|:
name|manager
operator|->
name|dropData
decl_stmt|;
name|QDragMoveEvent
name|oldEvent
argument_list|(
name|lastPoint
argument_list|,
name|translateToQDragDropActions
argument_list|(
operator|*
name|pdwEffect
argument_list|)
argument_list|,
name|md
argument_list|,
name|toQtMouseButtons
argument_list|(
name|lastKeyState
argument_list|)
argument_list|,
name|toQtKeyboardModifiers
argument_list|(
name|lastKeyState
argument_list|)
argument_list|)
decl_stmt|;
name|lastPoint
operator|=
name|tmpPoint
expr_stmt|;
name|lastKeyState
operator|=
name|grfKeyState
expr_stmt|;
name|QDragMoveEvent
name|e
argument_list|(
name|lastPoint
argument_list|,
name|translateToQDragDropActions
argument_list|(
operator|*
name|pdwEffect
argument_list|)
argument_list|,
name|md
argument_list|,
name|toQtMouseButtons
argument_list|(
name|grfKeyState
argument_list|)
argument_list|,
name|toQtKeyboardModifiers
argument_list|(
name|grfKeyState
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|chosenEffect
operator|!=
name|DROPEFFECT_NONE
condition|)
block|{
if|if
condition|(
name|oldEvent
operator|.
name|dropAction
argument_list|()
operator|==
name|e
operator|.
name|dropAction
argument_list|()
operator|&&
name|oldEvent
operator|.
name|keyboardModifiers
argument_list|()
operator|==
name|e
operator|.
name|keyboardModifiers
argument_list|()
condition|)
name|e
operator|.
name|setDropAction
argument_list|(
name|translateToQDragDropAction
argument_list|(
name|chosenEffect
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|accept
argument_list|()
expr_stmt|;
block|}
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|dragOverWidget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
name|answerRect
operator|=
name|e
operator|.
name|answerRect
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|isAccepted
argument_list|()
condition|)
name|chosenEffect
operator|=
name|translateToWinDragEffects
argument_list|(
name|e
operator|.
name|dropAction
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|chosenEffect
operator|=
name|DROPEFFECT_NONE
expr_stmt|;
operator|*
name|pdwEffect
operator|=
name|chosenEffect
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
end_function
begin_function
name|QT_ENSURE_STACK_ALIGNED_FOR_SSE
name|STDMETHODIMP
DECL|function|DragLeave
name|QOleDropTarget
operator|::
name|DragLeave
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QDND_DEBUG
name|qDebug
argument_list|(
literal|"QOleDropTarget::DragLeave()"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|QApplicationPrivate
operator|::
name|tryModalHelper
argument_list|(
name|widget
argument_list|)
condition|)
block|{
return|return
name|NOERROR
return|;
block|}
name|currentWidget
operator|=
literal|0
expr_stmt|;
name|QDragLeaveEvent
name|e
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
if|if
condition|(
name|manager
operator|->
name|dropData
operator|->
name|currentDataObject
condition|)
block|{
comment|// Sanity
name|manager
operator|->
name|dropData
operator|->
name|currentDataObject
operator|->
name|Release
argument_list|()
expr_stmt|;
name|manager
operator|->
name|dropData
operator|->
name|currentDataObject
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|NOERROR
return|;
block|}
end_function
begin_define
DECL|macro|KEY_STATE_BUTTON_MASK
define|#
directive|define
name|KEY_STATE_BUTTON_MASK
value|(MK_LBUTTON | MK_MBUTTON | MK_RBUTTON)
end_define
begin_function
name|QT_ENSURE_STACK_ALIGNED_FOR_SSE
name|STDMETHODIMP
DECL|function|Drop
name|QOleDropTarget
operator|::
name|Drop
parameter_list|(
name|LPDATAOBJECT
comment|/*pDataObj*/
parameter_list|,
name|DWORD
name|grfKeyState
parameter_list|,
name|POINTL
name|pt
parameter_list|,
name|LPDWORD
name|pdwEffect
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QDND_DEBUG
name|qDebug
argument_list|(
literal|"QOleDropTarget::Drop(LPDATAOBJECT /*pDataObj*/, grfKeyState %d, POINTL pt, LPDWORD pdwEffect)"
argument_list|,
name|grfKeyState
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QWidget
modifier|*
name|dropWidget
init|=
name|widget
operator|->
name|childAt
argument_list|(
name|widget
operator|->
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
name|pt
operator|.
name|x
argument_list|,
name|pt
operator|.
name|y
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dropWidget
condition|)
name|dropWidget
operator|=
name|widget
expr_stmt|;
if|if
condition|(
operator|!
name|QApplicationPrivate
operator|::
name|tryModalHelper
argument_list|(
name|dropWidget
argument_list|)
operator|||
operator|!
name|dropWidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DropSiteRegistered
argument_list|)
condition|)
block|{
operator|*
name|pdwEffect
operator|=
name|DROPEFFECT_NONE
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
name|lastPoint
operator|=
name|dropWidget
operator|->
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
name|pt
operator|.
name|x
argument_list|,
name|pt
operator|.
name|y
argument_list|)
argument_list|)
expr_stmt|;
comment|// grfKeyState does not all ways contain button state in the drop so if
comment|// it doesn't then use the last known button state;
if|if
condition|(
operator|(
name|grfKeyState
operator|&
name|KEY_STATE_BUTTON_MASK
operator|)
operator|==
literal|0
condition|)
name|grfKeyState
operator||=
name|lastKeyState
operator|&
name|KEY_STATE_BUTTON_MASK
expr_stmt|;
name|lastKeyState
operator|=
name|grfKeyState
expr_stmt|;
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|QMimeData
modifier|*
name|md
init|=
name|manager
operator|->
name|source
argument_list|()
condition|?
name|manager
operator|->
name|dragPrivate
argument_list|()
operator|->
name|data
else|:
name|manager
operator|->
name|dropData
decl_stmt|;
name|QDropEvent
name|e
argument_list|(
name|lastPoint
argument_list|,
name|translateToQDragDropActions
argument_list|(
operator|*
name|pdwEffect
argument_list|)
argument_list|,
name|md
argument_list|,
name|toQtMouseButtons
argument_list|(
name|grfKeyState
argument_list|)
argument_list|,
name|toQtKeyboardModifiers
argument_list|(
name|grfKeyState
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|chosenEffect
operator|!=
name|DROPEFFECT_NONE
condition|)
block|{
name|e
operator|.
name|setDropAction
argument_list|(
name|translateToQDragDropAction
argument_list|(
name|chosenEffect
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|dropWidget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|chosenEffect
operator|!=
name|DROPEFFECT_NONE
condition|)
block|{
name|e
operator|.
name|accept
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|.
name|isAccepted
argument_list|()
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|dropAction
argument_list|()
operator|==
name|Qt
operator|::
name|MoveAction
operator|||
name|e
operator|.
name|dropAction
argument_list|()
operator|==
name|Qt
operator|::
name|TargetMoveAction
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|dropAction
argument_list|()
operator|==
name|Qt
operator|::
name|MoveAction
condition|)
name|chosenEffect
operator|=
name|DROPEFFECT_MOVE
expr_stmt|;
else|else
name|chosenEffect
operator|=
name|DROPEFFECT_COPY
expr_stmt|;
name|HGLOBAL
name|hData
init|=
name|GlobalAlloc
argument_list|(
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|DWORD
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|hData
condition|)
block|{
name|DWORD
modifier|*
name|moveEffect
init|=
operator|(
name|DWORD
operator|*
operator|)
name|GlobalLock
argument_list|(
name|hData
argument_list|)
decl_stmt|;
empty_stmt|;
operator|*
name|moveEffect
operator|=
name|DROPEFFECT_MOVE
expr_stmt|;
name|GlobalUnlock
argument_list|(
name|hData
argument_list|)
expr_stmt|;
name|STGMEDIUM
name|medium
decl_stmt|;
name|memset
argument_list|(
operator|&
name|medium
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|STGMEDIUM
argument_list|)
argument_list|)
expr_stmt|;
name|medium
operator|.
name|tymed
operator|=
name|TYMED_HGLOBAL
expr_stmt|;
name|medium
operator|.
name|hGlobal
operator|=
name|hData
expr_stmt|;
name|FORMATETC
name|format
decl_stmt|;
name|format
operator|.
name|cfFormat
operator|=
name|RegisterClipboardFormat
argument_list|(
name|CFSTR_PERFORMEDDROPEFFECT
argument_list|)
expr_stmt|;
name|format
operator|.
name|tymed
operator|=
name|TYMED_HGLOBAL
expr_stmt|;
name|format
operator|.
name|ptd
operator|=
literal|0
expr_stmt|;
name|format
operator|.
name|dwAspect
operator|=
literal|1
expr_stmt|;
name|format
operator|.
name|lindex
operator|=
operator|-
literal|1
expr_stmt|;
name|manager
operator|->
name|dropData
operator|->
name|currentDataObject
operator|->
name|SetData
argument_list|(
operator|&
name|format
argument_list|,
operator|&
name|medium
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|chosenEffect
operator|=
name|translateToWinDragEffects
argument_list|(
name|e
operator|.
name|dropAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|chosenEffect
operator|=
name|DROPEFFECT_NONE
expr_stmt|;
block|}
operator|*
name|pdwEffect
operator|=
name|chosenEffect
expr_stmt|;
if|if
condition|(
name|manager
operator|->
name|dropData
operator|->
name|currentDataObject
condition|)
block|{
name|manager
operator|->
name|dropData
operator|->
name|currentDataObject
operator|->
name|Release
argument_list|()
expr_stmt|;
name|manager
operator|->
name|dropData
operator|->
name|currentDataObject
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|NOERROR
return|;
comment|// We won't get any mouserelease-event, so manually adjust qApp state:
comment|///### test this        QApplication::winMouseButtonUp();
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------
end_comment
begin_comment
comment|//                    QDropData
end_comment
begin_comment
comment|//---------------------------------------------------------------------
end_comment
begin_function
DECL|function|hasFormat_sys
name|bool
name|QDropData
operator|::
name|hasFormat_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|currentDataObject
condition|)
comment|// Sanity
return|return
literal|false
return|;
return|return
name|QWindowsMime
operator|::
name|converterToMime
argument_list|(
name|mimeType
argument_list|,
name|currentDataObject
argument_list|)
operator|!=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|formats_sys
name|QStringList
name|QDropData
operator|::
name|formats_sys
parameter_list|()
specifier|const
block|{
name|QStringList
name|fmts
decl_stmt|;
if|if
condition|(
operator|!
name|currentDataObject
condition|)
comment|// Sanity
return|return
name|fmts
return|;
name|fmts
operator|=
name|QWindowsMime
operator|::
name|allMimesForFormats
argument_list|(
name|currentDataObject
argument_list|)
expr_stmt|;
return|return
name|fmts
return|;
block|}
end_function
begin_function
DECL|function|retrieveData_sys
name|QVariant
name|QDropData
operator|::
name|retrieveData_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|,
name|QVariant
operator|::
name|Type
name|type
parameter_list|)
specifier|const
block|{
name|QVariant
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|currentDataObject
condition|)
comment|// Sanity
return|return
name|result
return|;
name|QWindowsMime
modifier|*
name|converter
init|=
name|QWindowsMime
operator|::
name|converterToMime
argument_list|(
name|mimeType
argument_list|,
name|currentDataObject
argument_list|)
decl_stmt|;
if|if
condition|(
name|converter
condition|)
name|result
operator|=
name|converter
operator|->
name|convertToMime
argument_list|(
name|mimeType
argument_list|,
name|currentDataObject
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|drag
name|Qt
operator|::
name|DropAction
name|QDragManager
operator|::
name|drag
parameter_list|(
name|QDrag
modifier|*
name|o
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QDND_DEBUG
name|qDebug
argument_list|(
literal|"QDragManager::drag(QDrag *drag)"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|object
operator|==
name|o
operator|||
operator|!
name|o
operator|||
operator|!
name|o
operator|->
name|d_func
argument_list|()
operator|->
name|source
condition|)
return|return
name|Qt
operator|::
name|IgnoreAction
return|;
if|if
condition|(
name|object
condition|)
block|{
name|cancel
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|beingCancelled
operator|=
literal|false
expr_stmt|;
block|}
name|object
operator|=
name|o
expr_stmt|;
ifdef|#
directive|ifdef
name|QDND_DEBUG
name|qDebug
argument_list|(
literal|"actions = %s"
argument_list|,
name|dragActionsToString
argument_list|(
name|dragPrivate
argument_list|()
operator|->
name|possible_actions
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|dragPrivate
argument_list|()
operator|->
name|target
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|QAccessible
operator|::
name|DragDropStart
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|DWORD
name|resultEffect
decl_stmt|;
name|QOleDropSource
modifier|*
name|src
init|=
operator|new
name|QOleDropSource
argument_list|()
decl_stmt|;
name|src
operator|->
name|createCursors
argument_list|()
expr_stmt|;
name|QOleDataObject
modifier|*
name|obj
init|=
operator|new
name|QOleDataObject
argument_list|(
name|o
operator|->
name|mimeData
argument_list|()
argument_list|)
decl_stmt|;
name|DWORD
name|allowedEffects
init|=
name|translateToWinDragEffects
argument_list|(
name|dragPrivate
argument_list|()
operator|->
name|possible_actions
argument_list|)
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|GWES_ICONCURS
argument_list|)
name|HRESULT
name|r
init|=
name|DoDragDrop
argument_list|(
name|obj
argument_list|,
name|src
argument_list|,
name|allowedEffects
argument_list|,
operator|&
name|resultEffect
argument_list|)
decl_stmt|;
else|#
directive|else
name|HRESULT
name|r
init|=
name|DRAGDROP_S_CANCEL
decl_stmt|;
name|resultEffect
operator|=
name|DROPEFFECT_MOVE
expr_stmt|;
endif|#
directive|endif
name|Qt
operator|::
name|DropAction
name|ret
init|=
name|Qt
operator|::
name|IgnoreAction
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|DRAGDROP_S_DROP
condition|)
block|{
if|if
condition|(
name|obj
operator|->
name|reportedPerformedEffect
argument_list|()
operator|==
name|DROPEFFECT_MOVE
operator|&&
name|resultEffect
operator|!=
name|DROPEFFECT_MOVE
condition|)
block|{
name|ret
operator|=
name|Qt
operator|::
name|TargetMoveAction
expr_stmt|;
name|resultEffect
operator|=
name|DROPEFFECT_MOVE
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|translateToQDragDropAction
argument_list|(
name|resultEffect
argument_list|)
expr_stmt|;
block|}
comment|// Force it to be a copy if an unsupported operation occurred.
comment|// This indicates a bug in the drop target.
if|if
condition|(
name|resultEffect
operator|!=
name|DROPEFFECT_NONE
operator|&&
operator|!
operator|(
name|resultEffect
operator|&
name|allowedEffects
operator|)
condition|)
name|ret
operator|=
name|Qt
operator|::
name|CopyAction
expr_stmt|;
block|}
else|else
block|{
name|dragPrivate
argument_list|()
operator|->
name|target
operator|=
literal|0
expr_stmt|;
block|}
comment|// clean up
name|obj
operator|->
name|releaseQt
argument_list|()
expr_stmt|;
name|obj
operator|->
name|Release
argument_list|()
expr_stmt|;
comment|// Will delete obj if refcount becomes 0
name|src
operator|->
name|Release
argument_list|()
expr_stmt|;
comment|// Will delete src if refcount becomes 0
name|object
operator|=
literal|0
expr_stmt|;
name|o
operator|->
name|setMimeData
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|o
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|QAccessible
operator|::
name|DragDropEnd
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|cancel
name|void
name|QDragManager
operator|::
name|cancel
parameter_list|(
name|bool
comment|/* deleteSource */
parameter_list|)
block|{
if|if
condition|(
name|object
condition|)
block|{
name|beingCancelled
operator|=
literal|true
expr_stmt|;
name|object
operator|=
literal|0
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
comment|// insert cancel code here ######## todo
if|if
condition|(
name|restoreCursor
condition|)
block|{
name|QApplication
operator|::
name|restoreOverrideCursor
argument_list|()
expr_stmt|;
name|restoreCursor
operator|=
literal|false
expr_stmt|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|QAccessible
operator|::
name|DragDropEnd
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|updatePixmap
name|void
name|QDragManager
operator|::
name|updatePixmap
parameter_list|()
block|{
comment|// not used in windows implementation
block|}
end_function
begin_function
DECL|function|eventFilter
name|bool
name|QDragManager
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
parameter_list|)
block|{
comment|// not used in windows implementation
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|QDragManager
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
parameter_list|)
block|{
comment|// not used in windows implementation
block|}
end_function
begin_function
DECL|function|move
name|void
name|QDragManager
operator|::
name|move
parameter_list|(
specifier|const
name|QPoint
modifier|&
parameter_list|)
block|{
comment|// not used in windows implementation
block|}
end_function
begin_function
DECL|function|drop
name|void
name|QDragManager
operator|::
name|drop
parameter_list|()
block|{
comment|// not used in windows implementation
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
end_unit
