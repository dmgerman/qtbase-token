begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwidget_p.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qbackingstore_p.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qt_s60_p.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"private/qwindowsurface_s60_p.h"
end_include
begin_include
include|#
directive|include
file|<qinputcontext.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_S60
end_ifdef
begin_include
include|#
directive|include
file|<aknappui.h>
end_include
begin_include
include|#
directive|include
file|<eikbtgpc.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// This is necessary in order to be able to perform delayed invocation on slots
end_comment
begin_comment
comment|// which take arguments of type WId.  One example is
end_comment
begin_comment
comment|// QWidgetPrivate::_q_delayedDestroy, which is used to delay destruction of
end_comment
begin_comment
comment|// CCoeControl objects until after the CONE event handler has finished running.
end_comment
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|WId
argument_list|)
end_macro
begin_comment
comment|// Workaround for the fact that S60 SDKs 3.x do not contain the akntoolbar.h
end_comment
begin_comment
comment|// header, even though the documentation says that it should be there, and indeed
end_comment
begin_comment
comment|// it is present in the library.
end_comment
begin_class
DECL|class|CAknToolbar
class|class
name|CAknToolbar
super|:
specifier|public
name|CAknControl
super|,
specifier|public
name|MCoeControlObserver
super|,
specifier|public
name|MCoeControlBackground
super|,
specifier|public
name|MEikCommandObserver
super|,
specifier|public
name|MAknFadedComponent
block|{
public|public:
name|IMPORT_C
name|void
name|SetToolbarVisibility
parameter_list|(
specifier|const
name|TBool
name|visible
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|bool
name|qt_nograb
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
DECL|member|mouseGrabber
name|QWidget
modifier|*
name|QWidgetPrivate
operator|::
name|mouseGrabber
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|keyboardGrabber
name|QWidget
modifier|*
name|QWidgetPrivate
operator|::
name|keyboardGrabber
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|cba
name|CEikButtonGroupContainer
modifier|*
name|QS60Data
operator|::
name|cba
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_symbian_create_desktop_on_screen
name|int
name|qt_symbian_create_desktop_on_screen
init|=
operator|-
literal|1
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|isEqual
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
modifier|&
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|count
argument_list|()
operator|!=
name|b
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|a
operator|.
name|count
argument_list|()
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|->
name|softKeyRole
argument_list|()
operator|!=
name|b
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|->
name|softKeyRole
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|a
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|->
name|text
argument_list|()
operator|.
name|compare
argument_list|(
name|b
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|->
name|text
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
name|index
operator|++
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setWSGeometry
name|void
name|QWidgetPrivate
operator|::
name|setWSGeometry
parameter_list|(
name|bool
name|dontShow
parameter_list|,
specifier|const
name|QRect
modifier|&
parameter_list|)
block|{
comment|// Note: based on x11 implementation
specifier|static
specifier|const
name|int
name|XCOORD_MAX
init|=
literal|16383
decl_stmt|;
specifier|static
specifier|const
name|int
name|WRECT_MAX
init|=
literal|16383
decl_stmt|;
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
comment|/*       There are up to four different coordinate systems here:       Qt coordinate system for this widget.       Symbian coordinate system for this widget (relative to wrect).       Qt coordinate system for parent       Symbian coordinate system for parent (relative to parent's wrect).      */
name|QRect
name|validRange
argument_list|(
operator|-
name|XCOORD_MAX
argument_list|,
operator|-
name|XCOORD_MAX
argument_list|,
literal|2
operator|*
name|XCOORD_MAX
argument_list|,
literal|2
operator|*
name|XCOORD_MAX
argument_list|)
decl_stmt|;
name|QRect
name|wrectRange
argument_list|(
operator|-
name|WRECT_MAX
argument_list|,
operator|-
name|WRECT_MAX
argument_list|,
literal|2
operator|*
name|WRECT_MAX
argument_list|,
literal|2
operator|*
name|WRECT_MAX
argument_list|)
decl_stmt|;
name|QRect
name|wrect
decl_stmt|;
comment|//xrect is the Symbian geometry of my widget. (starts out in parent's Qt coord sys, and ends up in parent's Symbian coord sys)
name|QRect
name|xrect
init|=
name|data
operator|.
name|crect
decl_stmt|;
specifier|const
name|QWidget
modifier|*
specifier|const
name|parent
init|=
name|q
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
name|QRect
name|parentWRect
init|=
name|parent
operator|->
name|data
operator|->
name|wrect
decl_stmt|;
if|if
condition|(
name|parentWRect
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// parent is clipped, and we have to clip to the same limit as parent
if|if
condition|(
operator|!
name|parentWRect
operator|.
name|contains
argument_list|(
name|xrect
argument_list|)
condition|)
block|{
name|xrect
operator|&=
name|parentWRect
expr_stmt|;
name|wrect
operator|=
name|xrect
expr_stmt|;
comment|//translate from parent's to my Qt coord sys
name|wrect
operator|.
name|translate
argument_list|(
operator|-
name|data
operator|.
name|crect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//translate from parent's Qt coords to parent's X coords
name|xrect
operator|.
name|translate
argument_list|(
operator|-
name|parentWRect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// parent is not clipped, we may or may not have to clip
if|if
condition|(
name|data
operator|.
name|wrect
operator|.
name|isValid
argument_list|()
operator|&&
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|data
operator|.
name|crect
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|data
operator|.
name|wrect
argument_list|)
condition|)
block|{
comment|// This is where the main optimization is: we are already
comment|// clipped, and if our clip is still valid, we can just
comment|// move our window, and do not need to move or clip
comment|// children
name|QRect
name|vrect
init|=
name|xrect
operator|&
name|parent
operator|->
name|rect
argument_list|()
decl_stmt|;
name|vrect
operator|.
name|translate
argument_list|(
operator|-
name|data
operator|.
name|crect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
comment|//the part of me that's visible through parent, in my Qt coords
if|if
condition|(
name|data
operator|.
name|wrect
operator|.
name|contains
argument_list|(
name|vrect
argument_list|)
condition|)
block|{
name|xrect
operator|=
name|data
operator|.
name|wrect
expr_stmt|;
name|xrect
operator|.
name|translate
argument_list|(
name|data
operator|.
name|crect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|winid
condition|)
name|data
operator|.
name|winid
operator|->
name|SetExtent
argument_list|(
name|TPoint
argument_list|(
name|xrect
operator|.
name|x
argument_list|()
argument_list|,
name|xrect
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|TSize
argument_list|(
name|xrect
operator|.
name|width
argument_list|()
argument_list|,
name|xrect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
operator|!
name|validRange
operator|.
name|contains
argument_list|(
name|xrect
argument_list|)
condition|)
block|{
comment|// we are too big, and must clip
name|xrect
operator|&=
name|wrectRange
expr_stmt|;
name|wrect
operator|=
name|xrect
expr_stmt|;
name|wrect
operator|.
name|translate
argument_list|(
operator|-
name|data
operator|.
name|crect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
comment|//parent's X coord system is equal to parent's Qt coord
comment|//sys, so we don't need to map xrect.
block|}
block|}
comment|// unmap if we are outside the valid window system coord system
name|bool
name|outsideRange
init|=
operator|!
name|xrect
operator|.
name|isValid
argument_list|()
decl_stmt|;
name|bool
name|mapWindow
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|)
operator|!=
name|outsideRange
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|,
name|outsideRange
argument_list|)
expr_stmt|;
if|if
condition|(
name|outsideRange
condition|)
block|{
if|if
condition|(
name|data
operator|.
name|winid
condition|)
name|data
operator|.
name|winid
operator|->
name|DrawableWindow
argument_list|()
operator|->
name|SetVisible
argument_list|(
name|EFalse
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|q
operator|->
name|isHidden
argument_list|()
condition|)
block|{
name|mapWindow
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|outsideRange
condition|)
return|return;
name|bool
name|jump
init|=
operator|(
name|data
operator|.
name|wrect
operator|!=
name|wrect
operator|)
decl_stmt|;
name|data
operator|.
name|wrect
operator|=
name|wrect
expr_stmt|;
comment|// and now recursively for all children...
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QObject
modifier|*
name|object
init|=
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|->
name|isWidgetType
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|isWindow
argument_list|()
operator|&&
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|setWSGeometry
argument_list|(
name|jump
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|data
operator|.
name|winid
condition|)
block|{
comment|// move ourselves to the new position and map (if necessary) after
comment|// the movement. Rationale: moving unmapped windows is much faster
comment|// than moving mapped windows
if|if
condition|(
operator|!
name|parent
operator|->
name|internalWinId
argument_list|()
condition|)
name|xrect
operator|.
name|translate
argument_list|(
name|parent
operator|->
name|mapTo
argument_list|(
name|q
operator|->
name|nativeParentWidget
argument_list|()
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|winid
operator|->
name|SetExtent
argument_list|(
name|TPoint
argument_list|(
name|xrect
operator|.
name|x
argument_list|()
argument_list|,
name|xrect
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|TSize
argument_list|(
name|xrect
operator|.
name|width
argument_list|()
argument_list|,
name|xrect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapWindow
operator|and
operator|!
name|dontShow
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
name|q
operator|->
name|internalWinId
argument_list|()
operator|->
name|DrawableWindow
argument_list|()
operator|->
name|SetVisible
argument_list|(
name|ETrue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jump
operator|&&
name|data
operator|.
name|winid
condition|)
block|{
name|RWindow
modifier|*
specifier|const
name|window
init|=
cast|static_cast
argument_list|<
name|RWindow
operator|*
argument_list|>
argument_list|(
name|data
operator|.
name|winid
operator|->
name|DrawableWindow
argument_list|()
argument_list|)
decl_stmt|;
name|window
operator|->
name|Invalidate
argument_list|(
name|TRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|wrect
operator|.
name|width
argument_list|()
argument_list|,
name|wrect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setGeometry_sys
name|void
name|QWidgetPrivate
operator|::
name|setGeometry_sys
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|bool
name|isMove
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|q
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
return|return;
name|QPoint
name|oldPos
argument_list|(
name|q
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
name|QSize
name|oldSize
argument_list|(
name|q
operator|->
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QRect
name|oldGeom
argument_list|(
name|data
operator|.
name|crect
argument_list|)
decl_stmt|;
comment|// Lose maximized status if deliberate resize
if|if
condition|(
name|w
operator|!=
name|oldSize
operator|.
name|width
argument_list|()
operator|||
name|h
operator|!=
name|oldSize
operator|.
name|height
argument_list|()
condition|)
name|data
operator|.
name|window_state
operator|&=
operator|~
name|Qt
operator|::
name|WindowMaximized
expr_stmt|;
if|if
condition|(
name|extra
condition|)
block|{
comment|// any size restrictions?
name|w
operator|=
name|qMin
argument_list|(
name|w
argument_list|,
name|extra
operator|->
name|maxw
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMin
argument_list|(
name|h
argument_list|,
name|extra
operator|->
name|maxh
argument_list|)
expr_stmt|;
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|extra
operator|->
name|minw
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMax
argument_list|(
name|h
argument_list|,
name|extra
operator|->
name|minh
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
name|topData
argument_list|()
operator|->
name|normalGeometry
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
else|else
block|{
name|uint
name|s
init|=
name|data
operator|.
name|window_state
decl_stmt|;
name|s
operator|&=
operator|~
operator|(
name|Qt
operator|::
name|WindowMaximized
operator||
name|Qt
operator|::
name|WindowFullScreen
operator|)
expr_stmt|;
name|data
operator|.
name|window_state
operator|=
name|s
expr_stmt|;
block|}
name|bool
name|isResize
init|=
name|w
operator|!=
name|oldSize
operator|.
name|width
argument_list|()
operator|||
name|h
operator|!=
name|oldSize
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isMove
operator|&&
operator|!
name|isResize
condition|)
return|return;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
if|if
condition|(
name|w
operator|==
literal|0
operator|||
name|h
operator|==
literal|0
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
condition|)
name|hide_sys
argument_list|()
expr_stmt|;
name|data
operator|.
name|crect
operator|=
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|data
operator|.
name|window_state
operator|&=
operator|~
name|Qt
operator|::
name|WindowFullScreen
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|)
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// put the window in its place and show it
name|q
operator|->
name|internalWinId
argument_list|()
operator|->
name|SetRect
argument_list|(
name|TRect
argument_list|(
name|TPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|TSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|crect
operator|.
name|setRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|show_sys
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QRect
name|r
init|=
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|data
operator|.
name|crect
operator|=
name|r
expr_stmt|;
name|q
operator|->
name|internalWinId
argument_list|()
operator|->
name|SetRect
argument_list|(
name|TRect
argument_list|(
name|TPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|TSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|topData
argument_list|()
operator|->
name|normalGeometry
operator|=
name|data
operator|.
name|crect
expr_stmt|;
block|}
name|QSymbianControl
modifier|*
name|window
init|=
cast|static_cast
argument_list|<
name|QSymbianControl
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
decl_stmt|;
name|window
operator|->
name|ensureFixNativeOrientation
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|data
operator|.
name|crect
operator|.
name|setRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|QTLWExtra
modifier|*
name|tlwExtra
init|=
name|q
operator|->
name|window
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|maybeTopData
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|inTopLevelResize
init|=
name|tlwExtra
condition|?
name|tlwExtra
operator|->
name|inTopLevelResize
else|:
literal|false
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
operator|&&
operator|(
operator|!
name|inTopLevelResize
operator|||
name|q
operator|->
name|internalWinId
argument_list|()
operator|)
condition|)
block|{
comment|// Top-level resize optimization does not work for native child widgets;
comment|// disable it for this particular widget.
if|if
condition|(
name|inTopLevelResize
condition|)
name|tlwExtra
operator|->
name|inTopLevelResize
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|isResize
operator|&&
name|maybeBackingStore
argument_list|()
condition|)
name|moveRect
argument_list|(
name|QRect
argument_list|(
name|oldPos
argument_list|,
name|oldSize
argument_list|)
argument_list|,
name|x
operator|-
name|oldPos
operator|.
name|x
argument_list|()
argument_list|,
name|y
operator|-
name|oldPos
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|invalidateBuffer_resizeHelper
argument_list|(
name|oldPos
argument_list|,
name|oldSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|inTopLevelResize
condition|)
name|tlwExtra
operator|->
name|inTopLevelResize
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
name|setWSGeometry
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
condition|)
block|{
if|if
condition|(
name|isMove
operator|&&
name|q
operator|->
name|pos
argument_list|()
operator|!=
name|oldPos
condition|)
block|{
name|QMoveEvent
name|e
argument_list|(
name|q
operator|->
name|pos
argument_list|()
argument_list|,
name|oldPos
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|q
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isResize
condition|)
block|{
name|bool
name|slowResize
init|=
name|qgetenv
argument_list|(
literal|"QT_SLOW_TOPLEVEL_RESIZE"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|setTopLevelResize
init|=
operator|!
name|slowResize
operator|&&
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
name|extra
operator|&&
name|extra
operator|->
name|topextra
operator|&&
operator|!
name|extra
operator|->
name|topextra
operator|->
name|inTopLevelResize
decl_stmt|;
if|if
condition|(
name|setTopLevelResize
condition|)
name|extra
operator|->
name|topextra
operator|->
name|inTopLevelResize
operator|=
literal|true
expr_stmt|;
name|QResizeEvent
name|e
argument_list|(
name|q
operator|->
name|size
argument_list|()
argument_list|,
name|oldSize
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|q
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_StaticContents
argument_list|)
operator|&&
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
name|q
operator|->
name|internalWinId
argument_list|()
operator|->
name|DrawDeferred
argument_list|()
expr_stmt|;
if|if
condition|(
name|setTopLevelResize
condition|)
name|extra
operator|->
name|topextra
operator|->
name|inTopLevelResize
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isMove
operator|&&
name|q
operator|->
name|pos
argument_list|()
operator|!=
name|oldPos
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_PendingMoveEvent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|isResize
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_PendingResizeEvent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|create_sys
name|void
name|QWidgetPrivate
operator|::
name|create_sys
parameter_list|(
name|WId
name|window
parameter_list|,
name|bool
comment|/* initializeWindow */
parameter_list|,
name|bool
name|destroyOldWindow
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|WindowType
name|type
init|=
name|q
operator|->
name|windowType
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|WindowFlags
modifier|&
name|flags
init|=
name|data
operator|.
name|window_flags
decl_stmt|;
name|QWidget
modifier|*
name|parentWidget
init|=
name|q
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
name|bool
name|topLevel
init|=
operator|(
name|flags
operator|&
name|Qt
operator|::
name|Window
operator|)
decl_stmt|;
name|bool
name|popup
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Popup
operator|)
decl_stmt|;
name|bool
name|dialog
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Dialog
operator|||
name|type
operator|==
name|Qt
operator|::
name|Sheet
operator|||
operator|(
name|flags
operator|&
name|Qt
operator|::
name|MSWindowsFixedSizeDialogHint
operator|)
operator|)
decl_stmt|;
name|bool
name|desktop
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Desktop
operator|)
decl_stmt|;
comment|//bool tool = (type == Qt::Tool || type == Qt::Drawer);
if|if
condition|(
name|popup
condition|)
name|flags
operator||=
name|Qt
operator|::
name|WindowStaysOnTopHint
expr_stmt|;
comment|// a popup stays on top
name|TRect
name|clientRect
init|=
cast|static_cast
argument_list|<
name|CEikAppUi
operator|*
argument_list|>
argument_list|(
name|S60
operator|->
name|appUi
argument_list|()
argument_list|)
operator|->
name|ClientRect
argument_list|()
decl_stmt|;
name|int
name|sw
init|=
name|clientRect
operator|.
name|Width
argument_list|()
decl_stmt|;
name|int
name|sh
init|=
name|clientRect
operator|.
name|Height
argument_list|()
decl_stmt|;
if|if
condition|(
name|desktop
condition|)
block|{
name|symbianScreenNumber
operator|=
name|qMax
argument_list|(
name|qt_symbian_create_desktop_on_screen
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|TSize
name|screenSize
init|=
name|S60
operator|->
name|screenDevice
argument_list|(
name|symbianScreenNumber
argument_list|)
operator|->
name|SizeInPixels
argument_list|()
decl_stmt|;
name|data
operator|.
name|crect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|screenSize
operator|.
name|iWidth
argument_list|,
name|screenSize
operator|.
name|iHeight
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topLevel
operator|&&
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
condition|)
block|{
name|int
name|width
init|=
name|sw
decl_stmt|;
name|int
name|height
init|=
name|sh
decl_stmt|;
if|if
condition|(
name|symbianScreenNumber
operator|>
literal|0
condition|)
block|{
name|TSize
name|screenSize
init|=
name|S60
operator|->
name|screenDevice
argument_list|(
name|symbianScreenNumber
argument_list|)
operator|->
name|SizeInPixels
argument_list|()
decl_stmt|;
name|width
operator|=
name|screenSize
operator|.
name|iWidth
expr_stmt|;
name|height
operator|=
name|screenSize
operator|.
name|iHeight
expr_stmt|;
block|}
if|if
condition|(
name|extra
condition|)
block|{
name|width
operator|=
name|qMax
argument_list|(
name|qMin
argument_list|(
name|width
argument_list|,
name|extra
operator|->
name|maxw
argument_list|)
argument_list|,
name|extra
operator|->
name|minw
argument_list|)
expr_stmt|;
name|height
operator|=
name|qMax
argument_list|(
name|qMin
argument_list|(
name|height
argument_list|,
name|extra
operator|->
name|maxh
argument_list|)
argument_list|,
name|extra
operator|->
name|minh
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|crect
operator|.
name|setSize
argument_list|(
name|QSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CCoeControl
modifier|*
specifier|const
name|destroyw
init|=
name|destroyOldWindow
condition|?
name|data
operator|.
name|winid
else|:
literal|0
decl_stmt|;
name|createExtra
argument_list|()
expr_stmt|;
if|if
condition|(
name|window
condition|)
block|{
name|setWinId
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|TRect
name|tr
init|=
name|window
operator|->
name|Rect
argument_list|()
decl_stmt|;
name|data
operator|.
name|crect
operator|.
name|setRect
argument_list|(
name|tr
operator|.
name|iTl
operator|.
name|iX
argument_list|,
name|tr
operator|.
name|iTl
operator|.
name|iY
argument_list|,
name|tr
operator|.
name|Width
argument_list|()
argument_list|,
name|tr
operator|.
name|Height
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topLevel
condition|)
block|{
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Moved
argument_list|)
operator|&&
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
name|data
operator|.
name|crect
operator|.
name|moveTopLeft
argument_list|(
name|QPoint
argument_list|(
name|clientRect
operator|.
name|iTl
operator|.
name|iX
argument_list|,
name|clientRect
operator|.
name|iTl
operator|.
name|iY
argument_list|)
argument_list|)
expr_stmt|;
name|QScopedPointer
argument_list|<
name|QSymbianControl
argument_list|>
name|control
argument_list|(
operator|new
name|QSymbianControl
argument_list|(
name|q
argument_list|)
argument_list|)
decl_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|control
argument_list|)
expr_stmt|;
name|QT_TRAP_THROWING
argument_list|(
name|control
operator|->
name|ConstructL
argument_list|(
literal|true
argument_list|,
name|desktop
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|->
name|SetMopParent
argument_list|(
cast|static_cast
argument_list|<
name|CEikAppUi
operator|*
argument_list|>
argument_list|(
name|S60
operator|->
name|appUi
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Symbian windows are always created in an inactive state
comment|// We perform this assignment for the case where the window is being re-created
comment|// as a result of a call to setParent_sys, on either this widget or one of its
comment|// ancestors.
name|extra
operator|->
name|activated
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|desktop
condition|)
block|{
name|TInt
name|stackingFlags
decl_stmt|;
if|if
condition|(
operator|(
name|q
operator|->
name|windowType
argument_list|()
operator|&
name|Qt
operator|::
name|Popup
operator|)
operator|==
name|Qt
operator|::
name|Popup
condition|)
block|{
name|stackingFlags
operator|=
name|ECoeStackFlagRefusesAllKeys
operator||
name|ECoeStackFlagRefusesFocus
expr_stmt|;
block|}
else|else
block|{
name|stackingFlags
operator|=
name|ECoeStackFlagStandard
expr_stmt|;
block|}
name|control
operator|->
name|MakeVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QT_TRAP_THROWING
argument_list|(
name|control
operator|->
name|ControlEnv
argument_list|()
operator|->
name|AppUi
argument_list|()
operator|->
name|AddToStackL
argument_list|(
name|control
operator|.
name|data
argument_list|()
argument_list|,
name|ECoeStackPriorityDefault
argument_list|,
name|stackingFlags
argument_list|)
argument_list|)
expr_stmt|;
comment|// Avoid keyboard focus to a hidden window.
name|control
operator|->
name|setFocusSafely
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|RDrawableWindow
modifier|*
specifier|const
name|drawableWindow
init|=
name|control
operator|->
name|DrawableWindow
argument_list|()
decl_stmt|;
comment|// Request mouse move events.
name|drawableWindow
operator|->
name|PointerFilter
argument_list|(
name|EPointerFilterEnterExit
operator||
name|EPointerFilterMove
operator||
name|EPointerFilterDrag
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|drawableWindow
operator|->
name|EnableVisibilityChangeEvents
argument_list|()
expr_stmt|;
block|}
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
expr_stmt|;
name|int
name|x
decl_stmt|,
name|y
decl_stmt|,
name|w
decl_stmt|,
name|h
decl_stmt|;
name|data
operator|.
name|crect
operator|.
name|getRect
argument_list|(
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|,
operator|&
name|w
argument_list|,
operator|&
name|h
argument_list|)
expr_stmt|;
name|control
operator|->
name|SetRect
argument_list|(
name|TRect
argument_list|(
name|TPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|TSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// We wait until the control is fully constructed before calling setWinId, because
comment|// this generates a WinIdChanged event.
name|setWinId
argument_list|(
name|control
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|desktop
condition|)
name|s60UpdateIsOpaque
argument_list|()
expr_stmt|;
comment|// must be called after setWinId()
block|}
elseif|else
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
operator|||
name|paintOnScreen
argument_list|()
condition|)
block|{
comment|// create native child widget
name|QScopedPointer
argument_list|<
name|QSymbianControl
argument_list|>
name|control
argument_list|(
operator|new
name|QSymbianControl
argument_list|(
name|q
argument_list|)
argument_list|)
decl_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|control
argument_list|)
expr_stmt|;
name|QT_TRAP_THROWING
argument_list|(
name|control
operator|->
name|ConstructL
argument_list|(
operator|!
name|parentWidget
argument_list|)
argument_list|)
expr_stmt|;
comment|// Symbian windows are always created in an inactive state
comment|// We perform this assignment for the case where the window is being re-created
comment|// as a result of a call to setParent_sys, on either this widget or one of its
comment|// ancestors.
name|extra
operator|->
name|activated
operator|=
literal|0
expr_stmt|;
name|TInt
name|stackingFlags
decl_stmt|;
if|if
condition|(
operator|(
name|q
operator|->
name|windowType
argument_list|()
operator|&
name|Qt
operator|::
name|Popup
operator|)
operator|==
name|Qt
operator|::
name|Popup
condition|)
block|{
name|stackingFlags
operator|=
name|ECoeStackFlagRefusesAllKeys
operator||
name|ECoeStackFlagRefusesFocus
expr_stmt|;
block|}
else|else
block|{
name|stackingFlags
operator|=
name|ECoeStackFlagStandard
expr_stmt|;
block|}
name|control
operator|->
name|MakeVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QT_TRAP_THROWING
argument_list|(
name|control
operator|->
name|ControlEnv
argument_list|()
operator|->
name|AppUi
argument_list|()
operator|->
name|AddToStackL
argument_list|(
name|control
operator|.
name|data
argument_list|()
argument_list|,
name|ECoeStackPriorityDefault
argument_list|,
name|stackingFlags
argument_list|)
argument_list|)
expr_stmt|;
comment|// Avoid keyboard focus to a hidden window.
name|control
operator|->
name|setFocusSafely
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
expr_stmt|;
name|int
name|x
decl_stmt|,
name|y
decl_stmt|,
name|w
decl_stmt|,
name|h
decl_stmt|;
name|data
operator|.
name|crect
operator|.
name|getRect
argument_list|(
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|,
operator|&
name|w
argument_list|,
operator|&
name|h
argument_list|)
expr_stmt|;
name|control
operator|->
name|SetRect
argument_list|(
name|TRect
argument_list|(
name|TPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|TSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RDrawableWindow
modifier|*
specifier|const
name|drawableWindow
init|=
name|control
operator|->
name|DrawableWindow
argument_list|()
decl_stmt|;
comment|// Request mouse move events.
name|drawableWindow
operator|->
name|PointerFilter
argument_list|(
name|EPointerFilterEnterExit
operator||
name|EPointerFilterMove
operator||
name|EPointerFilterDrag
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|drawableWindow
operator|->
name|EnableVisibilityChangeEvents
argument_list|()
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
condition|)
block|{
name|activateSymbianWindow
argument_list|(
name|control
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|->
name|MakeVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// We wait until the control is fully constructed before calling setWinId, because
comment|// this generates a WinIdChanged event.
name|setWinId
argument_list|(
name|control
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|destroyw
condition|)
block|{
name|destroyw
operator|->
name|ControlEnv
argument_list|()
operator|->
name|AppUi
argument_list|()
operator|->
name|RemoveFromStack
argument_list|(
name|destroyw
argument_list|)
expr_stmt|;
comment|// Delay deletion of the control in case this function is called in the
comment|// context of a CONE event handler such as
comment|// CCoeControl::ProcessPointerEventL
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|q
argument_list|,
literal|"_q_delayedDestroy"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|,
name|Q_ARG
argument_list|(
name|WId
argument_list|,
name|destroyw
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_AcceptTouchEvents
argument_list|)
condition|)
name|registerTouchWindow
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|show_sys
name|void
name|QWidgetPrivate
operator|::
name|show_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|)
condition|)
return|return;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
block|{
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|extra
operator|->
name|activated
condition|)
name|activateSymbianWindow
argument_list|()
expr_stmt|;
name|QSymbianControl
modifier|*
name|id
init|=
cast|static_cast
argument_list|<
name|QSymbianControl
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|isFullscreen
init|=
name|q
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowFullScreen
decl_stmt|;
specifier|const
name|TBool
name|cbaRequested
init|=
name|q
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowSoftkeysVisibleHint
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_S60
comment|// Lazily initialize the S60 screen furniture when the first window is shown.
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
operator|!
name|QApplication
operator|::
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_S60DontConstructApplicationPanes
argument_list|)
operator|&&
operator|!
name|S60
operator|->
name|buttonGroupContainer
argument_list|()
operator|&&
operator|!
name|S60
operator|->
name|statusPane
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
block|{
comment|// Create the status pane and CBA here
name|CEikAppUi
modifier|*
name|ui
init|=
cast|static_cast
argument_list|<
name|CEikAppUi
operator|*
argument_list|>
argument_list|(
name|S60
operator|->
name|appUi
argument_list|()
argument_list|)
decl_stmt|;
name|MEikAppUiFactory
modifier|*
name|factory
init|=
name|CEikonEnv
operator|::
name|Static
argument_list|()
operator|->
name|AppUiFactory
argument_list|()
decl_stmt|;
name|QT_TRAP_THROWING
argument_list|(
argument|factory->CreateResourceIndependentFurnitureL(ui);                      TRect boundingRect = static_cast<CEikAppUi*>(S60->appUi())->ClientRect();                      CEikButtonGroupContainer *cba = CEikButtonGroupContainer::NewL(CEikButtonGroupContainer::ECba,                         CEikButtonGroupContainer::EHorizontal,ui,R_AVKON_SOFTKEYS_EMPTY_WITH_IDS);                     if (isFullscreen&& !cbaRequested)                         cba->MakeVisible(
literal|false
argument|);                      CEikButtonGroupContainer *oldCba = factory->SwapButtonGroup(cba);                     Q_ASSERT(!oldCba);                     S60->setButtonGroupContainer(cba);
comment|// If the creation of the first widget is delayed, for example by doing it
comment|// inside the event loop, S60 somehow "forgets" to set the visibility of the
comment|// toolbar (the three middle softkeys) when you flip the phone over, so we
comment|// need to do it ourselves to avoid a "hole" in the application, even though
comment|// Qt itself does not use the toolbar directly..
argument|CAknAppUi *appui = dynamic_cast<CAknAppUi *>(CEikonEnv::Static()->AppUi());                     if (appui) {                         CAknToolbar *toolbar = appui->PopupToolbar();                         if (toolbar&& !toolbar->IsVisible())                             toolbar->SetToolbarVisibility(ETrue);                     }                      CEikMenuBar *menuBar = new(ELeave) CEikMenuBar;                     menuBar->ConstructL(ui,
literal|0
argument|, R_AVKON_MENUPANE_EMPTY);                     menuBar->SetMenuType(CEikMenuBar::EMenuOptions);                     S60->appUi()->AddToStackL(menuBar,ECoeStackPriorityMenu,ECoeStackFlagRefusesFocus);                      CEikMenuBar *oldMenu = factory->SwapMenuBar(menuBar);                     Q_ASSERT(!oldMenu);
argument_list|)
if|if
condition|(
name|S60
operator|->
name|statusPane
argument_list|()
condition|)
block|{
comment|// Use QDesktopWidget as the status pane observer to proxy for the AppUi.
comment|// Can't use AppUi directly because it privately inherits from MEikStatusPaneObserver.
name|QSymbianControl
modifier|*
name|desktopControl
init|=
cast|static_cast
argument_list|<
name|QSymbianControl
operator|*
argument_list|>
argument_list|(
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|winId
argument_list|()
argument_list|)
decl_stmt|;
name|S60
operator|->
name|statusPane
argument_list|()
operator|->
name|SetObserver
argument_list|(
name|desktopControl
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFullscreen
condition|)
block|{
specifier|const
name|bool
name|cbaVisible
init|=
name|S60
operator|->
name|buttonGroupContainer
argument_list|()
operator|&&
name|S60
operator|->
name|buttonGroupContainer
argument_list|()
operator|->
name|IsVisible
argument_list|()
decl_stmt|;
name|S60
operator|->
name|setStatusPaneAndButtonGroupVisibility
argument_list|(
literal|false
argument_list|,
name|cbaVisible
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
endif|#
directive|endif
comment|// Fill client area if maximized OR
comment|// Put window below status pane unless the window has an explicit position.
if|if
condition|(
operator|!
name|isFullscreen
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
block|{
name|TRect
name|r
init|=
cast|static_cast
argument_list|<
name|CEikAppUi
operator|*
argument_list|>
argument_list|(
name|S60
operator|->
name|appUi
argument_list|()
argument_list|)
operator|->
name|ClientRect
argument_list|()
decl_stmt|;
name|id
operator|->
name|SetExtent
argument_list|(
name|r
operator|.
name|iTl
argument_list|,
name|r
operator|.
name|Size
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Moved
argument_list|)
operator|&&
name|q
operator|->
name|windowType
argument_list|()
operator|!=
name|Qt
operator|::
name|Dialog
condition|)
block|{
name|id
operator|->
name|SetPosition
argument_list|(
cast|static_cast
argument_list|<
name|CEikAppUi
operator|*
argument_list|>
argument_list|(
name|S60
operator|->
name|appUi
argument_list|()
argument_list|)
operator|->
name|ClientRect
argument_list|()
operator|.
name|iTl
argument_list|)
expr_stmt|;
block|}
block|}
name|id
operator|->
name|MakeVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_ShowWithoutActivating
argument_list|)
condition|)
name|id
operator|->
name|setFocusSafely
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|activateSymbianWindow
name|void
name|QWidgetPrivate
operator|::
name|activateSymbianWindow
parameter_list|(
name|WId
name|wid
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|extra
operator|->
name|activated
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wid
condition|)
name|wid
operator|=
name|q
operator|->
name|internalWinId
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|wid
argument_list|)
expr_stmt|;
name|QT_TRAP_THROWING
argument_list|(
name|wid
operator|->
name|ActivateL
argument_list|()
argument_list|)
expr_stmt|;
name|extra
operator|->
name|activated
operator|=
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hide_sys
name|void
name|QWidgetPrivate
operator|::
name|hide_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|deactivateWidgetCleanup
argument_list|()
expr_stmt|;
name|QSymbianControl
modifier|*
name|id
init|=
cast|static_cast
argument_list|<
name|QSymbianControl
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
comment|//Incorrect optimization - for popup windows, Qt's focus is moved before
comment|//hide_sys is called, resulting in the popup window keeping its elevated
comment|//position in the CONE control stack.
comment|//This can result in keyboard focus being in an invisible widget in some
comment|//conditions - e.g. QTBUG-4733
comment|//if(id->IsFocused()) // Avoid unnecessary calls to FocusChanged()
name|id
operator|->
name|setFocusSafely
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|id
operator|->
name|MakeVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWidgetBackingStore
modifier|*
name|bs
init|=
name|maybeBackingStore
argument_list|()
condition|)
name|bs
operator|->
name|releaseBuffer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFocus_sys
name|void
name|QWidgetPrivate
operator|::
name|setFocus_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
operator|&&
name|q
operator|->
name|window
argument_list|()
operator|->
name|windowType
argument_list|()
operator|!=
name|Qt
operator|::
name|Popup
condition|)
if|if
condition|(
operator|!
name|q
operator|->
name|effectiveWinId
argument_list|()
operator|->
name|IsFocused
argument_list|()
condition|)
comment|// Avoid unnecessry calls to FocusChanged()
cast|static_cast
argument_list|<
name|QSymbianControl
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
operator|->
name|setFocusSafely
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|raise_sys
name|void
name|QWidgetPrivate
operator|::
name|raise_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
name|q
operator|->
name|internalWinId
argument_list|()
operator|->
name|DrawableWindow
argument_list|()
operator|->
name|SetOrdinalPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// If toplevel widget, raise app to foreground
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
name|S60
operator|->
name|wsSession
argument_list|()
operator|.
name|SetWindowGroupOrdinalPosition
argument_list|(
name|S60
operator|->
name|windowGroup
argument_list|(
name|q
argument_list|)
operator|.
name|Identifier
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|lower_sys
name|void
name|QWidgetPrivate
operator|::
name|lower_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
comment|// If toplevel widget, lower app to background
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
name|S60
operator|->
name|wsSession
argument_list|()
operator|.
name|SetWindowGroupOrdinalPosition
argument_list|(
name|S60
operator|->
name|windowGroup
argument_list|(
name|q
argument_list|)
operator|.
name|Identifier
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
else|else
name|q
operator|->
name|internalWinId
argument_list|()
operator|->
name|DrawableWindow
argument_list|()
operator|->
name|SetOrdinalPosition
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
condition|)
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setModal_sys
name|void
name|QWidgetPrivate
operator|::
name|setModal_sys
parameter_list|()
block|{  }
end_function
begin_function
DECL|function|stackUnder_sys
name|void
name|QWidgetPrivate
operator|::
name|stackUnder_sys
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
operator|&&
name|w
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
name|RDrawableWindow
modifier|*
specifier|const
name|thisWindow
init|=
name|q
operator|->
name|internalWinId
argument_list|()
operator|->
name|DrawableWindow
argument_list|()
decl_stmt|;
name|RDrawableWindow
modifier|*
specifier|const
name|otherWindow
init|=
name|w
operator|->
name|internalWinId
argument_list|()
operator|->
name|DrawableWindow
argument_list|()
decl_stmt|;
name|thisWindow
operator|->
name|SetOrdinalPosition
argument_list|(
name|otherWindow
operator|->
name|OrdinalPosition
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
operator|||
operator|!
name|w
operator|->
name|internalWinId
argument_list|()
condition|)
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reparentChildren
name|void
name|QWidgetPrivate
operator|::
name|reparentChildren
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|QObjectList
name|chlist
init|=
name|q
operator|->
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chlist
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
comment|// reparent children
name|QObject
modifier|*
name|obj
init|=
name|chlist
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|->
name|isWidgetType
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
operator|(
name|QWidget
operator|*
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|w
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateBuffer
argument_list|(
name|w
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|WId
name|parent
init|=
name|q
operator|->
name|effectiveWinId
argument_list|()
decl_stmt|;
name|WId
name|child
init|=
name|w
operator|->
name|effectiveWinId
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
name|child
condition|)
block|{
comment|// Child widget is native.  Because Symbian windows cannot be
comment|// re-parented, we must re-create the window.
specifier|const
name|WId
name|window
init|=
literal|0
decl_stmt|;
specifier|const
name|bool
name|initializeWindow
init|=
literal|false
decl_stmt|;
specifier|const
name|bool
name|destroyOldWindow
init|=
literal|true
decl_stmt|;
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|create_sys
argument_list|(
name|window
argument_list|,
name|initializeWindow
argument_list|,
name|destroyOldWindow
argument_list|)
expr_stmt|;
block|}
comment|// ### TODO: We probably also need to update the component array here
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|reparentChildren
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bool
name|showIt
init|=
name|w
operator|->
name|isVisible
argument_list|()
decl_stmt|;
name|QPoint
name|old_pos
init|=
name|w
operator|->
name|pos
argument_list|()
decl_stmt|;
name|w
operator|->
name|setParent
argument_list|(
name|q
argument_list|,
name|w
operator|->
name|windowFlags
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|->
name|move
argument_list|(
name|old_pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|showIt
condition|)
name|w
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|setParent_sys
name|void
name|QWidgetPrivate
operator|::
name|setParent_sys
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|f
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|&&
name|parent
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
condition|)
block|{
name|symbianScreenNumber
operator|=
name|qt_widget_private
argument_list|(
name|parent
argument_list|)
operator|->
name|symbianScreenNumber
expr_stmt|;
name|parent
operator|=
literal|0
expr_stmt|;
block|}
name|bool
name|wasCreated
init|=
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
operator|&&
name|q
operator|->
name|parentWidget
argument_list|()
operator|&&
name|parent
operator|!=
name|q
operator|->
name|parentWidget
argument_list|()
condition|)
name|q
operator|->
name|parentWidget
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|geometry
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DropSiteRegistered
argument_list|)
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DropSiteRegistered
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QSymbianControl
modifier|*
name|old_winid
init|=
cast|static_cast
argument_list|<
name|QSymbianControl
operator|*
argument_list|>
argument_list|(
name|wasCreated
condition|?
name|data
operator|.
name|winid
else|:
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|q
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
name|old_winid
operator|=
literal|0
expr_stmt|;
comment|// old_winid may not have received a 'not visible' visibility
comment|// changed event before being destroyed; make sure that it is
comment|// removed from the backing store's list of visible windows.
if|if
condition|(
name|old_winid
condition|)
name|S60
operator|->
name|controlVisibilityChanged
argument_list|(
name|old_winid
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setWinId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// hide and reparent our own window away. Otherwise we might get
comment|// destroyed when emitting the child remove event below. See QWorkspace.
if|if
condition|(
name|wasCreated
operator|&&
name|old_winid
condition|)
block|{
name|old_winid
operator|->
name|MakeVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|old_winid
operator|->
name|IsFocused
argument_list|()
condition|)
comment|// Avoid unnecessary calls to FocusChanged()
name|old_winid
operator|->
name|setFocusSafely
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|old_winid
operator|->
name|SetParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|QObjectPrivate
operator|::
name|setParent_helper
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|bool
name|explicitlyHidden
init|=
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|)
decl_stmt|;
name|data
operator|.
name|window_flags
operator|=
name|f
expr_stmt|;
name|data
operator|.
name|fstrut_dirty
operator|=
literal|true
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|adjustFlags
argument_list|(
name|data
operator|.
name|window_flags
argument_list|,
name|q
argument_list|)
expr_stmt|;
comment|// keep compatibility with previous versions, we need to preserve the created state
comment|// (but we recreate the winId for the widget being reparented, again for compatibility)
if|if
condition|(
name|wasCreated
operator|||
operator|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
name|parent
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
operator|)
condition|)
name|createWinId
argument_list|()
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
operator|||
operator|(
operator|!
name|parent
operator|||
name|parent
operator|->
name|isVisible
argument_list|()
operator|)
operator|||
name|explicitlyHidden
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|,
name|explicitlyHidden
argument_list|)
expr_stmt|;
if|if
condition|(
name|wasCreated
condition|)
name|reparentChildren
argument_list|()
expr_stmt|;
if|if
condition|(
name|old_winid
condition|)
block|{
name|CBase
operator|::
name|Delete
argument_list|(
name|old_winid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_AcceptDrops
argument_list|)
operator|||
operator|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
name|q
operator|->
name|parentWidget
argument_list|()
operator|&&
name|q
operator|->
name|parentWidget
argument_list|()
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DropSiteRegistered
argument_list|)
operator|)
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DropSiteRegistered
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setConstraints_sys
name|void
name|QWidgetPrivate
operator|::
name|setConstraints_sys
parameter_list|()
block|{  }
end_function
begin_function
DECL|function|s60UpdateIsOpaque
name|void
name|QWidgetPrivate
operator|::
name|s60UpdateIsOpaque
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
return|return;
specifier|const
name|bool
name|writeAlpha
init|=
name|extraData
argument_list|()
operator|->
name|nativePaintMode
operator|==
name|QWExtra
operator|::
name|BlitWriteAlpha
decl_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_TranslucentBackground
argument_list|)
operator|&&
operator|!
name|writeAlpha
condition|)
return|return;
specifier|const
name|bool
name|requireAlphaChannel
init|=
operator|!
name|isOpaque
operator|||
name|writeAlpha
decl_stmt|;
name|createTLExtra
argument_list|()
expr_stmt|;
name|RWindow
modifier|*
specifier|const
name|window
init|=
cast|static_cast
argument_list|<
name|RWindow
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|effectiveWinId
argument_list|()
operator|->
name|DrawableWindow
argument_list|()
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_SYMBIAN_SEMITRANSPARENT_BG_SURFACE
if|if
condition|(
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|useTranslucentEGLSurfaces
condition|)
block|{
name|window
operator|->
name|SetSurfaceTransparency
argument_list|(
operator|!
name|isOpaque
argument_list|)
expr_stmt|;
name|extra
operator|->
name|topextra
operator|->
name|nativeWindowTransparencyEnabled
operator|=
operator|!
name|isOpaque
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
if|if
condition|(
name|requireAlphaChannel
condition|)
block|{
specifier|const
name|TDisplayMode
name|displayMode
init|=
cast|static_cast
argument_list|<
name|TDisplayMode
argument_list|>
argument_list|(
name|window
operator|->
name|SetRequiredDisplayMode
argument_list|(
name|EColor16MA
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|window
operator|->
name|SetTransparencyAlphaChannel
argument_list|()
operator|==
name|KErrNone
condition|)
block|{
name|window
operator|->
name|SetBackgroundColor
argument_list|(
name|TRgb
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|extra
operator|->
name|topextra
operator|->
name|nativeWindowTransparencyEnabled
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|extra
operator|->
name|topextra
operator|->
name|backingStore
operator|.
name|data
argument_list|()
operator|&&
operator|(
name|QApplicationPrivate
operator|::
name|graphics_system_name
operator|==
name|QLatin1String
argument_list|(
literal|"openvg"
argument_list|)
operator|||
name|QApplicationPrivate
operator|::
name|graphics_system_name
operator|==
name|QLatin1String
argument_list|(
literal|"opengl"
argument_list|)
operator|)
condition|)
block|{
comment|// Semi-transparent EGL surfaces aren't supported. We need to
comment|// recreate backing store to get translucent surface (raster surface).
name|extra
operator|->
name|topextra
operator|->
name|backingStore
operator|.
name|create
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|extra
operator|->
name|topextra
operator|->
name|backingStore
operator|.
name|registerWidget
argument_list|(
name|q
argument_list|)
expr_stmt|;
comment|// FixNativeOrientation() will not work without an EGL surface.
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_SymbianNoSystemRotation
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|extra
operator|->
name|topextra
operator|->
name|nativeWindowTransparencyEnabled
condition|)
block|{
name|window
operator|->
name|SetTransparentRegion
argument_list|(
name|TRegionFix
argument_list|<
literal|1
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|extra
operator|->
name|topextra
operator|->
name|nativeWindowTransparencyEnabled
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setWindowIcon_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowIcon_sys
parameter_list|(
name|bool
name|forceReset
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_S60
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
operator|||
operator|!
name|q
operator|->
name|isWindow
argument_list|()
condition|)
return|return;
name|QTLWExtra
modifier|*
name|topData
init|=
name|this
operator|->
name|topData
argument_list|()
decl_stmt|;
if|if
condition|(
name|topData
operator|->
name|iconPixmap
operator|&&
operator|!
name|forceReset
condition|)
comment|// already been set
return|return;
name|TRect
name|cPaneRect
decl_stmt|;
name|TBool
name|found
init|=
name|AknLayoutUtils
operator|::
name|LayoutMetricsRect
argument_list|(
name|AknLayoutUtils
operator|::
name|EContextPane
argument_list|,
name|cPaneRect
argument_list|)
decl_stmt|;
name|CAknContextPane
modifier|*
name|contextPane
init|=
name|S60
operator|->
name|contextPane
argument_list|()
decl_stmt|;
if|if
condition|(
name|found
operator|&&
name|contextPane
condition|)
block|{
comment|// We have context pane with valid metrics
name|QIcon
name|icon
init|=
name|q
operator|->
name|windowIcon
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// Valid icon -> set it as an context pane picture
name|QSize
name|size
init|=
name|icon
operator|.
name|actualSize
argument_list|(
name|QSize
argument_list|(
name|cPaneRect
operator|.
name|Size
argument_list|()
operator|.
name|iWidth
argument_list|,
name|cPaneRect
operator|.
name|Size
argument_list|()
operator|.
name|iHeight
argument_list|)
argument_list|)
decl_stmt|;
name|QPixmap
name|pm
init|=
name|icon
operator|.
name|pixmap
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|QBitmap
name|mask
init|=
name|pm
operator|.
name|mask
argument_list|()
decl_stmt|;
if|if
condition|(
name|mask
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|mask
operator|=
name|QBitmap
argument_list|(
name|pm
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|mask
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
block|}
name|CFbsBitmap
modifier|*
name|nBitmap
init|=
name|pm
operator|.
name|toSymbianCFbsBitmap
argument_list|()
decl_stmt|;
name|CFbsBitmap
modifier|*
name|nMask
init|=
name|mask
operator|.
name|toSymbianCFbsBitmap
argument_list|()
decl_stmt|;
name|contextPane
operator|->
name|SetPicture
argument_list|(
name|nBitmap
argument_list|,
name|nMask
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Icon set to null -> set context pane picture to default
name|QT_TRAP_THROWING
argument_list|(
name|contextPane
operator|->
name|SetPictureToDefaultL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Context pane does not exist, try setting small icon to title pane
name|TRect
name|titlePaneRect
decl_stmt|;
name|TBool
name|found
init|=
name|AknLayoutUtils
operator|::
name|LayoutMetricsRect
argument_list|(
name|AknLayoutUtils
operator|::
name|ETitlePane
argument_list|,
name|titlePaneRect
argument_list|)
decl_stmt|;
name|CAknTitlePane
modifier|*
name|titlePane
init|=
name|S60
operator|->
name|titlePane
argument_list|()
decl_stmt|;
if|if
condition|(
name|found
operator|&&
name|titlePane
condition|)
block|{
comment|// We have title pane with valid metrics
comment|// The API to get title_pane graphics size is not public -> assume square space based
comment|// on titlebar font height. CAknBitmap would be optimum, wihtout setting the size, since
comment|// then title pane would automatically scale the bitmap. Unfortunately it is not public API
comment|// Also this function is leaving, although it is not named as such.
specifier|const
name|CFont
modifier|*
name|font
decl_stmt|;
name|QT_TRAP_THROWING
argument_list|(
name|font
operator|=
name|AknLayoutUtils
operator|::
name|FontFromId
argument_list|(
name|EAknLogicalFontTitleFont
argument_list|)
argument_list|)
expr_stmt|;
name|TSize
name|iconSize
argument_list|(
name|font
operator|->
name|HeightInPixels
argument_list|()
argument_list|,
name|font
operator|->
name|HeightInPixels
argument_list|()
argument_list|)
decl_stmt|;
name|QIcon
name|icon
init|=
name|q
operator|->
name|windowIcon
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// Valid icon -> set it as an title pane small picture
name|QSize
name|size
init|=
name|icon
operator|.
name|actualSize
argument_list|(
name|QSize
argument_list|(
name|iconSize
operator|.
name|iWidth
argument_list|,
name|iconSize
operator|.
name|iHeight
argument_list|)
argument_list|)
decl_stmt|;
name|QPixmap
name|pm
init|=
name|icon
operator|.
name|pixmap
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|QBitmap
name|mask
init|=
name|pm
operator|.
name|mask
argument_list|()
decl_stmt|;
if|if
condition|(
name|mask
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|mask
operator|=
name|QBitmap
argument_list|(
name|pm
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|mask
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
block|}
name|CFbsBitmap
modifier|*
name|nBitmap
init|=
name|pm
operator|.
name|toSymbianCFbsBitmap
argument_list|()
decl_stmt|;
name|CFbsBitmap
modifier|*
name|nMask
init|=
name|mask
operator|.
name|toSymbianCFbsBitmap
argument_list|()
decl_stmt|;
name|titlePane
operator|->
name|SetSmallPicture
argument_list|(
name|nBitmap
argument_list|,
name|nMask
argument_list|,
name|ETrue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Icon set to null -> set context pane picture to default
name|titlePane
operator|->
name|SetSmallPicture
argument_list|(
name|NULL
argument_list|,
name|NULL
argument_list|,
name|EFalse
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|forceReset
argument_list|)
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setWindowTitle_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowTitle_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|caption
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_S60
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|CAknTitlePane
modifier|*
name|titlePane
init|=
name|S60
operator|->
name|titlePane
argument_list|()
decl_stmt|;
if|if
condition|(
name|titlePane
condition|)
block|{
if|if
condition|(
name|caption
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QT_TRAP_THROWING
argument_list|(
name|titlePane
operator|->
name|SetTextToDefaultL
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QT_TRAP_THROWING
argument_list|(
name|titlePane
operator|->
name|SetTextL
argument_list|(
name|qt_QString2TPtrC
argument_list|(
name|caption
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|caption
argument_list|)
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setWindowIconText_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowIconText_sys
parameter_list|(
specifier|const
name|QString
modifier|&
comment|/*iconText */
parameter_list|)
block|{  }
end_function
begin_function
DECL|function|scroll_sys
name|void
name|QWidgetPrivate
operator|::
name|scroll_sys
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|scrollChildren
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|paintOnScreen
argument_list|()
operator|||
operator|!
name|q
operator|->
name|internalWinId
argument_list|()
operator|||
operator|!
name|q
operator|->
name|internalWinId
argument_list|()
operator|->
name|OwnsWindow
argument_list|()
condition|)
block|{
name|scrollRect
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|RDrawableWindow
modifier|*
specifier|const
name|window
init|=
name|q
operator|->
name|internalWinId
argument_list|()
operator|->
name|DrawableWindow
argument_list|()
decl_stmt|;
name|window
operator|->
name|Scroll
argument_list|(
name|TPoint
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|scroll_sys
name|void
name|QWidgetPrivate
operator|::
name|scroll_sys
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|paintOnScreen
argument_list|()
operator|||
operator|!
name|q
operator|->
name|internalWinId
argument_list|()
operator|||
operator|!
name|q
operator|->
name|internalWinId
argument_list|()
operator|->
name|OwnsWindow
argument_list|()
condition|)
block|{
name|scrollRect
argument_list|(
name|r
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|RDrawableWindow
modifier|*
specifier|const
name|window
init|=
name|q
operator|->
name|internalWinId
argument_list|()
operator|->
name|DrawableWindow
argument_list|()
decl_stmt|;
name|window
operator|->
name|Scroll
argument_list|(
name|TPoint
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
argument_list|,
name|qt_QRect2TRect
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     For this function to work in the emulator, you must add:        TRANSPARENCY     To a line in the wsini.ini file. */
end_comment
begin_function
DECL|function|setWindowOpacity_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowOpacity_sys
parameter_list|(
name|qreal
parameter_list|)
block|{
comment|// ### TODO: Implement uniform window transparency
block|}
end_function
begin_function
DECL|function|updateFrameStrut
name|void
name|QWidgetPrivate
operator|::
name|updateFrameStrut
parameter_list|()
block|{  }
end_function
begin_function
DECL|function|updateSystemBackground
name|void
name|QWidgetPrivate
operator|::
name|updateSystemBackground
parameter_list|()
block|{  }
end_function
begin_function
DECL|function|registerDropSite
name|void
name|QWidgetPrivate
operator|::
name|registerDropSite
parameter_list|(
name|bool
comment|/* on */
parameter_list|)
block|{  }
end_function
begin_function
DECL|function|createTLSysExtra
name|void
name|QWidgetPrivate
operator|::
name|createTLSysExtra
parameter_list|()
block|{
name|extra
operator|->
name|topextra
operator|->
name|inExpose
operator|=
literal|0
expr_stmt|;
name|extra
operator|->
name|topextra
operator|->
name|nativeWindowTransparencyEnabled
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deleteTLSysExtra
name|void
name|QWidgetPrivate
operator|::
name|deleteTLSysExtra
parameter_list|()
block|{
name|extra
operator|->
name|topextra
operator|->
name|backingStore
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createSysExtra
name|void
name|QWidgetPrivate
operator|::
name|createSysExtra
parameter_list|()
block|{
name|extra
operator|->
name|activated
operator|=
literal|0
expr_stmt|;
name|extra
operator|->
name|nativePaintMode
operator|=
name|QWExtra
operator|::
name|Default
expr_stmt|;
name|extra
operator|->
name|receiveNativePaintEvents
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deleteSysExtra
name|void
name|QWidgetPrivate
operator|::
name|deleteSysExtra
parameter_list|()
block|{
comment|// this should only be non-zero if destroy() has not run due to constructor fail
if|if
condition|(
name|data
operator|.
name|winid
condition|)
block|{
name|data
operator|.
name|winid
operator|->
name|ControlEnv
argument_list|()
operator|->
name|AppUi
argument_list|()
operator|->
name|RemoveFromStack
argument_list|(
name|data
operator|.
name|winid
argument_list|)
expr_stmt|;
operator|delete
name|data
operator|.
name|winid
expr_stmt|;
name|data
operator|.
name|winid
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|createDefaultWindowSurface_sys
name|QWindowSurface
modifier|*
name|QWidgetPrivate
operator|::
name|createDefaultWindowSurface_sys
parameter_list|()
block|{
return|return
operator|new
name|QS60WindowSurface
argument_list|(
name|q_func
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setMask_sys
name|void
name|QWidgetPrivate
operator|::
name|setMask_sys
parameter_list|(
specifier|const
name|QRegion
modifier|&
comment|/* region */
parameter_list|)
block|{  }
end_function
begin_function
DECL|function|registerTouchWindow
name|void
name|QWidgetPrivate
operator|::
name|registerTouchWindow
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_SYMBIAN_SUPPORTS_ADVANCED_POINTER
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
operator|&&
name|q
operator|->
name|windowType
argument_list|()
operator|!=
name|Qt
operator|::
name|Desktop
condition|)
block|{
name|RWindow
modifier|*
name|rwindow
init|=
cast|static_cast
argument_list|<
name|RWindow
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|effectiveWinId
argument_list|()
operator|->
name|DrawableWindow
argument_list|()
argument_list|)
decl_stmt|;
name|QSymbianControl
modifier|*
name|window
init|=
cast|static_cast
argument_list|<
name|QSymbianControl
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
decl_stmt|;
comment|//Enabling advanced pointer events for controls that already have active windows causes a panic.
if|if
condition|(
operator|!
name|window
operator|->
name|isControlActive
argument_list|()
condition|)
name|rwindow
operator|->
name|EnableAdvancedPointers
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|metric
name|int
name|QWidget
operator|::
name|metric
parameter_list|(
name|PaintDeviceMetric
name|m
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
name|int
name|val
decl_stmt|;
if|if
condition|(
name|m
operator|==
name|PdmWidth
condition|)
block|{
name|val
operator|=
name|data
operator|->
name|crect
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|PdmHeight
condition|)
block|{
name|val
operator|=
name|data
operator|->
name|crect
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|CWsScreenDevice
modifier|*
name|scr
init|=
name|S60
operator|->
name|screenDevice
argument_list|(
name|this
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|m
condition|)
block|{
case|case
name|PdmDpiX
case|:
case|case
name|PdmPhysicalDpiX
case|:
if|if
condition|(
name|d
operator|->
name|extra
operator|&&
name|d
operator|->
name|extra
operator|->
name|customDpiX
condition|)
block|{
name|val
operator|=
name|d
operator|->
name|extra
operator|->
name|customDpiX
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QWidgetPrivate
modifier|*
name|p
init|=
name|d
decl_stmt|;
while|while
condition|(
name|p
operator|->
name|parent
condition|)
block|{
name|p
operator|=
cast|static_cast
argument_list|<
specifier|const
name|QWidget
operator|*
argument_list|>
argument_list|(
name|p
operator|->
name|parent
argument_list|)
operator|->
name|d_func
argument_list|()
expr_stmt|;
if|if
condition|(
name|p
operator|->
name|extra
operator|&&
name|p
operator|->
name|extra
operator|->
name|customDpiX
condition|)
block|{
name|val
operator|=
name|p
operator|->
name|extra
operator|->
name|customDpiX
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|p
operator|==
name|d
operator|||
operator|!
operator|(
name|p
operator|->
name|extra
operator|&&
name|p
operator|->
name|extra
operator|->
name|customDpiX
operator|)
condition|)
name|val
operator|=
name|S60
operator|->
name|defaultDpiX
expr_stmt|;
block|}
break|break;
case|case
name|PdmDpiY
case|:
case|case
name|PdmPhysicalDpiY
case|:
if|if
condition|(
name|d
operator|->
name|extra
operator|&&
name|d
operator|->
name|extra
operator|->
name|customDpiY
condition|)
block|{
name|val
operator|=
name|d
operator|->
name|extra
operator|->
name|customDpiY
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QWidgetPrivate
modifier|*
name|p
init|=
name|d
decl_stmt|;
while|while
condition|(
name|p
operator|->
name|parent
condition|)
block|{
name|p
operator|=
cast|static_cast
argument_list|<
specifier|const
name|QWidget
operator|*
argument_list|>
argument_list|(
name|p
operator|->
name|parent
argument_list|)
operator|->
name|d_func
argument_list|()
expr_stmt|;
if|if
condition|(
name|p
operator|->
name|extra
operator|&&
name|p
operator|->
name|extra
operator|->
name|customDpiY
condition|)
block|{
name|val
operator|=
name|p
operator|->
name|extra
operator|->
name|customDpiY
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|p
operator|==
name|d
operator|||
operator|!
operator|(
name|p
operator|->
name|extra
operator|&&
name|p
operator|->
name|extra
operator|->
name|customDpiY
operator|)
condition|)
name|val
operator|=
name|S60
operator|->
name|defaultDpiY
expr_stmt|;
block|}
break|break;
case|case
name|PdmWidthMM
case|:
block|{
name|TInt
name|twips
init|=
name|scr
operator|->
name|HorizontalPixelsToTwips
argument_list|(
name|data
operator|->
name|crect
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|val
operator|=
call|(
name|int
call|)
argument_list|(
name|twips
operator|*
operator|(
literal|25.4
operator|/
name|KTwipsPerInch
operator|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PdmHeightMM
case|:
block|{
name|TInt
name|twips
init|=
name|scr
operator|->
name|VerticalPixelsToTwips
argument_list|(
name|data
operator|->
name|crect
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|val
operator|=
call|(
name|int
call|)
argument_list|(
name|twips
operator|*
operator|(
literal|25.4
operator|/
name|KTwipsPerInch
operator|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PdmNumColors
case|:
name|val
operator|=
name|TDisplayModeUtils
operator|::
name|NumDisplayModeColors
argument_list|(
name|scr
operator|->
name|DisplayMode
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PdmDepth
case|:
name|val
operator|=
name|TDisplayModeUtils
operator|::
name|NumDisplayModeBitsPerPixel
argument_list|(
name|scr
operator|->
name|DisplayMode
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|val
operator|=
literal|0
expr_stmt|;
name|qWarning
argument_list|(
literal|"QWidget::metric: Invalid metric command"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|val
return|;
block|}
end_function
begin_function
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|QWidget
operator|::
name|paintEngine
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|mapToGlobal
name|QPoint
name|QWidget
operator|::
name|mapToGlobal
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
operator|||
operator|!
name|internalWinId
argument_list|()
condition|)
block|{
name|QPoint
name|p
init|=
name|pos
operator|+
name|data
operator|->
name|crect
operator|.
name|topLeft
argument_list|()
decl_stmt|;
return|return
operator|(
name|isWindow
argument_list|()
operator|||
operator|!
name|parentWidget
argument_list|()
operator|)
condition|?
name|p
else|:
name|parentWidget
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|p
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|d
operator|->
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|Window
operator|)
operator|&&
name|internalWinId
argument_list|()
condition|)
block|{
comment|//toplevel
name|QPoint
name|tp
init|=
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
return|return
name|pos
operator|+
name|tp
return|;
block|}
comment|// Native window case
specifier|const
name|TPoint
name|widgetScreenOffset
init|=
name|internalWinId
argument_list|()
operator|->
name|PositionRelativeToScreen
argument_list|()
decl_stmt|;
specifier|const
name|QPoint
name|globalPos
init|=
name|QPoint
argument_list|(
name|widgetScreenOffset
operator|.
name|iX
argument_list|,
name|widgetScreenOffset
operator|.
name|iY
argument_list|)
operator|+
name|pos
decl_stmt|;
return|return
name|globalPos
return|;
block|}
end_function
begin_function
DECL|function|mapFromGlobal
name|QPoint
name|QWidget
operator|::
name|mapFromGlobal
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
operator|||
operator|!
name|internalWinId
argument_list|()
condition|)
block|{
name|QPoint
name|p
init|=
operator|(
name|isWindow
argument_list|()
operator|||
operator|!
name|parentWidget
argument_list|()
operator|)
condition|?
name|pos
else|:
name|parentWidget
argument_list|()
operator|->
name|mapFromGlobal
argument_list|(
name|pos
argument_list|)
decl_stmt|;
return|return
name|p
operator|-
name|data
operator|->
name|crect
operator|.
name|topLeft
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|d
operator|->
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|Window
operator|)
operator|&&
name|internalWinId
argument_list|()
condition|)
block|{
comment|//toplevel
name|QPoint
name|tp
init|=
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
return|return
name|pos
operator|-
name|tp
return|;
block|}
comment|// Native window case
specifier|const
name|TPoint
name|widgetScreenOffset
init|=
name|internalWinId
argument_list|()
operator|->
name|PositionRelativeToScreen
argument_list|()
decl_stmt|;
specifier|const
name|QPoint
name|widgetPos
init|=
name|pos
operator|-
name|QPoint
argument_list|(
name|widgetScreenOffset
operator|.
name|iX
argument_list|,
name|widgetScreenOffset
operator|.
name|iY
argument_list|)
decl_stmt|;
return|return
name|widgetPos
return|;
block|}
end_function
begin_function
DECL|function|effectiveState
specifier|static
name|Qt
operator|::
name|WindowStates
name|effectiveState
parameter_list|(
name|Qt
operator|::
name|WindowStates
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|&
name|Qt
operator|::
name|WindowMinimized
condition|)
return|return
name|Qt
operator|::
name|WindowMinimized
return|;
elseif|else
if|if
condition|(
name|state
operator|&
name|Qt
operator|::
name|WindowFullScreen
condition|)
return|return
name|Qt
operator|::
name|WindowFullScreen
return|;
elseif|else
if|if
condition|(
name|state
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
return|return
name|Qt
operator|::
name|WindowMaximized
return|;
return|return
name|Qt
operator|::
name|WindowNoState
return|;
block|}
end_function
begin_function
DECL|function|setWindowState
name|void
name|QWidget
operator|::
name|setWindowState
parameter_list|(
name|Qt
operator|::
name|WindowStates
name|newstate
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|WindowStates
name|oldstate
init|=
name|windowState
argument_list|()
decl_stmt|;
specifier|const
name|TBool
name|isFullscreen
init|=
name|newstate
operator|&
name|Qt
operator|::
name|WindowFullScreen
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_S60
specifier|const
name|TBool
name|cbaRequested
init|=
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowSoftkeysVisibleHint
decl_stmt|;
specifier|const
name|TBool
name|cbaVisible
init|=
name|CEikButtonGroupContainer
operator|::
name|Current
argument_list|()
condition|?
literal|true
else|:
literal|false
decl_stmt|;
specifier|const
name|TBool
name|softkeyVisibilityChange
init|=
name|isFullscreen
operator|&&
operator|(
name|cbaRequested
operator|!=
name|cbaVisible
operator|)
decl_stmt|;
if|if
condition|(
name|oldstate
operator|==
name|newstate
operator|&&
operator|!
name|softkeyVisibilityChange
condition|)
return|return;
endif|#
directive|endif
comment|// Q_WS_S60
if|if
condition|(
name|isWindow
argument_list|()
condition|)
block|{
name|createWinId
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|wasResized
init|=
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|wasMoved
init|=
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Moved
argument_list|)
decl_stmt|;
name|QSymbianControl
modifier|*
name|window
init|=
cast|static_cast
argument_list|<
name|QSymbianControl
operator|*
argument_list|>
argument_list|(
name|effectiveWinId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|window
operator|&&
name|newstate
operator|&
name|Qt
operator|::
name|WindowMinimized
condition|)
block|{
name|window
operator|->
name|setFocusSafely
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|window
operator|->
name|MakeVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|window
operator|&&
name|oldstate
operator|&
name|Qt
operator|::
name|WindowMinimized
condition|)
block|{
name|window
operator|->
name|setFocusSafely
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|window
operator|->
name|MakeVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|Q_WS_S60
comment|// The window decoration visibility has to be changed before doing actual window state
comment|// change since in that order the availableGeometry will return directly the right size and
comment|// we will avoid unnecessary redraws
name|bool
name|decorationsVisible
init|=
name|S60
operator|->
name|setRecursiveDecorationsVisibility
argument_list|(
name|this
argument_list|,
name|newstate
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|// Q_WS_S60
comment|// Ensure the initial size is valid, since we store it as normalGeometry below.
if|if
condition|(
operator|!
name|wasResized
operator|&&
operator|!
name|isVisible
argument_list|()
condition|)
name|adjustSize
argument_list|()
expr_stmt|;
name|QTLWExtra
modifier|*
name|top
init|=
name|d
operator|->
name|topData
argument_list|()
decl_stmt|;
name|QRect
name|normalGeometry
init|=
operator|(
name|top
operator|->
name|normalGeometry
operator|.
name|width
argument_list|()
operator|<
literal|0
operator|)
condition|?
name|geometry
argument_list|()
else|:
name|top
operator|->
name|normalGeometry
decl_stmt|;
specifier|const
name|bool
name|cbaVisibilityHint
init|=
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowSoftkeysVisibleHint
decl_stmt|;
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowFullScreen
operator|&&
operator|!
name|cbaVisibilityHint
condition|)
block|{
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|symbianScreenNumber
operator|>
literal|0
condition|)
block|{
name|int
name|w
init|=
name|S60
operator|->
name|screenWidthInPixelsForScreen
index|[
name|d
operator|->
name|symbianScreenNumber
index|]
decl_stmt|;
name|int
name|h
init|=
name|S60
operator|->
name|screenHeightInPixelsForScreen
index|[
name|d
operator|->
name|symbianScreenNumber
index|]
decl_stmt|;
if|if
condition|(
name|w
operator|<=
literal|0
operator|||
name|h
operator|<=
literal|0
condition|)
name|window
operator|->
name|SetExtentToWholeScreen
argument_list|()
expr_stmt|;
else|else
name|window
operator|->
name|SetExtent
argument_list|(
name|TPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|TSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|window
operator|->
name|SetExtentToWholeScreen
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|||
operator|(
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowFullScreen
operator|)
operator|&&
name|cbaVisibilityHint
operator|)
condition|)
block|{
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TRect
name|maxExtent
init|=
name|qt_QRect2TRect
argument_list|(
name|qApp
operator|->
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|this
argument_list|)
argument_list|)
decl_stmt|;
name|window
operator|->
name|SetExtent
argument_list|(
name|maxExtent
operator|.
name|iTl
argument_list|,
name|maxExtent
operator|.
name|Size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
ifdef|#
directive|ifdef
name|Q_WS_S60
comment|// With delayed creation of S60 app panes, the normalGeometry calculated above is not
comment|// accurate because it did not consider the status pane. This means that when returning
comment|// normal mode after showing the status pane, the geometry would overlap so we should
comment|// move it if it never had an explicit position.
if|if
condition|(
operator|!
name|wasMoved
operator|&&
name|S60
operator|->
name|statusPane
argument_list|()
operator|&&
name|decorationsVisible
condition|)
block|{
name|TPoint
name|tl
init|=
cast|static_cast
argument_list|<
name|CEikAppUi
operator|*
argument_list|>
argument_list|(
name|S60
operator|->
name|appUi
argument_list|()
argument_list|)
operator|->
name|ClientRect
argument_list|()
operator|.
name|iTl
decl_stmt|;
name|normalGeometry
operator|.
name|setTopLeft
argument_list|(
name|QPoint
argument_list|(
name|tl
operator|.
name|iX
argument_list|,
name|tl
operator|.
name|iY
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|setGeometry
argument_list|(
name|normalGeometry
argument_list|)
expr_stmt|;
block|}
comment|//restore normal geometry
name|top
operator|->
name|normalGeometry
operator|=
name|normalGeometry
expr_stmt|;
comment|// FixMe QTBUG-8977
comment|// In some platforms, WA_Resized and WA_Moved are also not set when application window state is
comment|// anything else than normal. In Symbian we can restore them only for normal window state since
comment|// restoring for other modes, will make fluidlauncher to be launched in wrong size (200x100)
if|if
condition|(
name|effectiveState
argument_list|(
name|newstate
argument_list|)
operator|==
name|Qt
operator|::
name|WindowNoState
condition|)
block|{
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|,
name|wasResized
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Moved
argument_list|,
name|wasMoved
argument_list|)
expr_stmt|;
block|}
block|}
name|data
operator|->
name|window_state
operator|=
name|newstate
expr_stmt|;
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowActive
condition|)
name|activateWindow
argument_list|()
expr_stmt|;
if|if
condition|(
name|isWindow
argument_list|()
condition|)
block|{
comment|// Now that the new state is set, fix the display memory layout, if needed.
name|QSymbianControl
modifier|*
name|window
init|=
cast|static_cast
argument_list|<
name|QSymbianControl
operator|*
argument_list|>
argument_list|(
name|effectiveWinId
argument_list|()
argument_list|)
decl_stmt|;
name|window
operator|->
name|ensureFixNativeOrientation
argument_list|()
expr_stmt|;
block|}
name|QWindowStateChangeEvent
name|e
argument_list|(
name|oldstate
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|this
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|destroy
name|void
name|QWidget
operator|::
name|destroy
parameter_list|(
name|bool
name|destroyWindow
parameter_list|,
name|bool
name|destroySubWindows
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|aboutToDestroy
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isWindow
argument_list|()
operator|&&
name|parentWidget
argument_list|()
condition|)
name|parentWidget
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateBuffer
argument_list|(
name|geometry
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|deactivateWidgetCleanup
argument_list|()
expr_stmt|;
name|QSymbianControl
modifier|*
name|id
init|=
cast|static_cast
argument_list|<
name|QSymbianControl
operator|*
argument_list|>
argument_list|(
name|internalWinId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_IM
if|if
condition|(
name|d
operator|->
name|ic
condition|)
block|{
operator|delete
name|d
operator|->
name|ic
expr_stmt|;
block|}
else|else
block|{
name|QInputContext
modifier|*
name|ic
init|=
name|QApplicationPrivate
operator|::
name|inputContext
decl_stmt|;
if|if
condition|(
name|ic
condition|)
block|{
name|ic
operator|->
name|widgetDestroyed
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
if|if
condition|(
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|==
name|this
condition|)
name|releaseMouse
argument_list|()
expr_stmt|;
if|if
condition|(
name|QWidgetPrivate
operator|::
name|keyboardGrabber
operator|==
name|this
condition|)
name|releaseKeyboard
argument_list|()
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QObjectList
name|childList
init|=
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
comment|// destroy all widget children
specifier|register
name|QObject
modifier|*
name|obj
init|=
name|childList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|->
name|isWidgetType
argument_list|()
condition|)
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|obj
argument_list|)
operator|->
name|destroy
argument_list|(
name|destroySubWindows
argument_list|,
name|destroySubWindows
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|destroyWindow
operator|&&
operator|!
operator|(
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
operator|&&
name|id
condition|)
block|{
if|if
condition|(
name|id
operator|->
name|IsFocused
argument_list|()
condition|)
comment|// Avoid unnecessry calls to FocusChanged()
name|id
operator|->
name|setFocusSafely
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|id
operator|->
name|ControlEnv
argument_list|()
operator|->
name|AppUi
argument_list|()
operator|->
name|RemoveFromStack
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|QT_TRY
block|{
name|d
operator|->
name|setWinId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|const std::bad_alloc&
argument_list|)
block|{
comment|// swallow - destructors must not throw
block|}
if|if
condition|(
name|destroyWindow
condition|)
block|{
operator|delete
name|id
expr_stmt|;
comment|// At this point the backing store should already be destroyed
comment|// so we flush the command buffer to ensure that the freeing of
comment|// those resources and deleting the window can happen "atomically"
if|if
condition|(
name|qApp
condition|)
name|S60
operator|->
name|wsSession
argument_list|()
operator|.
name|Flush
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mouseGrabber
name|QWidget
modifier|*
name|QWidget
operator|::
name|mouseGrabber
parameter_list|()
block|{
return|return
name|QWidgetPrivate
operator|::
name|mouseGrabber
return|;
block|}
end_function
begin_function
DECL|function|keyboardGrabber
name|QWidget
modifier|*
name|QWidget
operator|::
name|keyboardGrabber
parameter_list|()
block|{
return|return
name|QWidgetPrivate
operator|::
name|keyboardGrabber
return|;
block|}
end_function
begin_function
DECL|function|grabKeyboard
name|void
name|QWidget
operator|::
name|grabKeyboard
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qt_nograb
argument_list|()
condition|)
block|{
if|if
condition|(
name|QWidgetPrivate
operator|::
name|keyboardGrabber
operator|&&
name|QWidgetPrivate
operator|::
name|keyboardGrabber
operator|!=
name|this
condition|)
name|QWidgetPrivate
operator|::
name|keyboardGrabber
operator|->
name|releaseKeyboard
argument_list|()
expr_stmt|;
comment|// ### TODO: Native keyboard grab
name|QWidgetPrivate
operator|::
name|keyboardGrabber
operator|=
name|this
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|releaseKeyboard
name|void
name|QWidget
operator|::
name|releaseKeyboard
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qt_nograb
argument_list|()
operator|&&
name|QWidgetPrivate
operator|::
name|keyboardGrabber
operator|==
name|this
condition|)
block|{
comment|// ### TODO: Native keyboard release
name|QWidgetPrivate
operator|::
name|keyboardGrabber
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|grabMouse
name|void
name|QWidget
operator|::
name|grabMouse
parameter_list|()
block|{
if|if
condition|(
name|isVisible
argument_list|()
operator|&&
operator|!
name|qt_nograb
argument_list|()
condition|)
block|{
if|if
condition|(
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|&&
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|!=
name|this
condition|)
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|->
name|releaseMouse
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|WId
name|id
init|=
name|effectiveWinId
argument_list|()
decl_stmt|;
name|id
operator|->
name|SetPointerCapture
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|=
name|this
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QApplication
operator|::
name|setOverrideCursor
argument_list|(
name|cursor
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|grabMouse
name|void
name|QWidget
operator|::
name|grabMouse
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|)
block|{
if|if
condition|(
name|isVisible
argument_list|()
operator|&&
operator|!
name|qt_nograb
argument_list|()
condition|)
block|{
if|if
condition|(
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|&&
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|!=
name|this
condition|)
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|->
name|releaseMouse
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|WId
name|id
init|=
name|effectiveWinId
argument_list|()
decl_stmt|;
name|id
operator|->
name|SetPointerCapture
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|=
name|this
expr_stmt|;
name|QApplication
operator|::
name|setOverrideCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|releaseMouse
name|void
name|QWidget
operator|::
name|releaseMouse
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qt_nograb
argument_list|()
operator|&&
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|==
name|this
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|window
argument_list|()
operator|->
name|isModal
argument_list|()
condition|)
block|{
name|WId
name|id
init|=
name|effectiveWinId
argument_list|()
decl_stmt|;
name|id
operator|->
name|SetPointerCapture
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QApplication
operator|::
name|restoreOverrideCursor
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|activateWindow
name|void
name|QWidget
operator|::
name|activateWindow
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|tlw
init|=
name|window
argument_list|()
decl_stmt|;
if|if
condition|(
name|tlw
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|window
argument_list|()
operator|->
name|createWinId
argument_list|()
expr_stmt|;
name|QSymbianControl
modifier|*
name|id
init|=
cast|static_cast
argument_list|<
name|QSymbianControl
operator|*
argument_list|>
argument_list|(
name|tlw
operator|->
name|internalWinId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|id
operator|->
name|IsFocused
argument_list|()
condition|)
name|id
operator|->
name|setFocusSafely
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|setCursor_sys
name|void
name|QWidgetPrivate
operator|::
name|setCursor_sys
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|qt_symbian_set_cursor
argument_list|(
name|q
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unsetCursor_sys
name|void
name|QWidgetPrivate
operator|::
name|unsetCursor_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|qt_symbian_set_cursor
argument_list|(
name|q
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
