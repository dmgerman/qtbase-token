begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformwindowformat_qpa.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QPlatformWindowFormat
argument_list|,
name|q_platformwindow_default_format
argument_list|)
expr_stmt|;
end_expr_stmt
begin_class
DECL|class|QPlatformWindowFormatPrivate
class|class
name|QPlatformWindowFormatPrivate
block|{
public|public:
DECL|function|QPlatformWindowFormatPrivate
name|QPlatformWindowFormatPrivate
parameter_list|()
member_init_list|:
name|ref
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|opts
argument_list|(
name|QPlatformWindowFormat
operator|::
name|DoubleBuffer
operator||
name|QPlatformWindowFormat
operator|::
name|DepthBuffer
operator||
name|QPlatformWindowFormat
operator|::
name|Rgba
operator||
name|QPlatformWindowFormat
operator|::
name|DirectRendering
operator||
name|QPlatformWindowFormat
operator|::
name|StencilBuffer
operator||
name|QPlatformWindowFormat
operator|::
name|DeprecatedFunctions
operator||
name|QPlatformWindowFormat
operator|::
name|HasWindowSurface
argument_list|)
member_init_list|,
name|depthSize
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|accumSize
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|stencilSize
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|redSize
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|greenSize
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|blueSize
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|alphaSize
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|numSamples
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|swapInterval
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|windowApi
argument_list|(
name|QPlatformWindowFormat
operator|::
name|Raster
argument_list|)
member_init_list|,
name|sharedContext
argument_list|(
literal|0
argument_list|)
block|{     }
DECL|function|QPlatformWindowFormatPrivate
name|QPlatformWindowFormatPrivate
parameter_list|(
specifier|const
name|QPlatformWindowFormatPrivate
modifier|*
name|other
parameter_list|)
member_init_list|:
name|ref
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|opts
argument_list|(
name|other
operator|->
name|opts
argument_list|)
member_init_list|,
name|depthSize
argument_list|(
name|other
operator|->
name|depthSize
argument_list|)
member_init_list|,
name|accumSize
argument_list|(
name|other
operator|->
name|accumSize
argument_list|)
member_init_list|,
name|stencilSize
argument_list|(
name|other
operator|->
name|stencilSize
argument_list|)
member_init_list|,
name|redSize
argument_list|(
name|other
operator|->
name|redSize
argument_list|)
member_init_list|,
name|greenSize
argument_list|(
name|other
operator|->
name|greenSize
argument_list|)
member_init_list|,
name|blueSize
argument_list|(
name|other
operator|->
name|blueSize
argument_list|)
member_init_list|,
name|alphaSize
argument_list|(
name|other
operator|->
name|alphaSize
argument_list|)
member_init_list|,
name|numSamples
argument_list|(
name|other
operator|->
name|numSamples
argument_list|)
member_init_list|,
name|swapInterval
argument_list|(
name|other
operator|->
name|swapInterval
argument_list|)
member_init_list|,
name|windowApi
argument_list|(
name|other
operator|->
name|windowApi
argument_list|)
member_init_list|,
name|sharedContext
argument_list|(
name|other
operator|->
name|sharedContext
argument_list|)
block|{     }
DECL|member|ref
name|QAtomicInt
name|ref
decl_stmt|;
DECL|member|opts
name|QPlatformWindowFormat
operator|::
name|FormatOptions
name|opts
decl_stmt|;
DECL|member|depthSize
name|int
name|depthSize
decl_stmt|;
DECL|member|accumSize
name|int
name|accumSize
decl_stmt|;
DECL|member|stencilSize
name|int
name|stencilSize
decl_stmt|;
DECL|member|redSize
name|int
name|redSize
decl_stmt|;
DECL|member|greenSize
name|int
name|greenSize
decl_stmt|;
DECL|member|blueSize
name|int
name|blueSize
decl_stmt|;
DECL|member|alphaSize
name|int
name|alphaSize
decl_stmt|;
DECL|member|numSamples
name|int
name|numSamples
decl_stmt|;
DECL|member|swapInterval
name|int
name|swapInterval
decl_stmt|;
DECL|member|windowApi
name|QPlatformWindowFormat
operator|::
name|WindowApi
name|windowApi
decl_stmt|;
DECL|member|sharedContext
name|QPlatformGLContext
modifier|*
name|sharedContext
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     \class QPlatformWindowFormat     \brief The QPlatformWindowFormat class specifies the display format of an OpenGL     rendering context and if possible attributes of the corresponding QPlatformWindow.      \ingroup painting      QWidget has a setter and getter function for QPlatformWindowFormat. These functions can be used     by the application programmer to signal what kind of format he wants to the window and glcontext     should have. However, it is not always possible to fulfill these requirements. The application     programmer should therefore check the resulting QPlatformWindowFormat from QPlatformGLContext     to see the format that was actually created.      A display format has several characteristics:     \list     \i \link setDoubleBuffer() Double or single buffering.\endlink     \i \link setDepth() Depth buffer.\endlink     \i \link setRgba() RGBA or color index mode.\endlink     \i \link setAlpha() Alpha channel.\endlink     \i \link setAccum() Accumulation buffer.\endlink     \i \link setStencil() Stencil buffer.\endlink     \i \link setStereo() Stereo buffers.\endlink     \i \link setDirectRendering() Direct rendering.\endlink     \i \link setOverlay() Presence of an overlay.\endlink     \i \link setPlane() Plane of an overlay.\endlink     \i \link setSampleBuffers() Multisample buffers.\endlink     \endlist      You can also specify preferred bit depths for the color buffer,     depth buffer, alpha buffer, accumulation buffer and the stencil     buffer with the functions: setRedBufferSize(), setGreenBufferSize(),     setBlueBufferSize(), setDepthBufferSize(), setAlphaBufferSize(),     setAccumBufferSize() and setStencilBufferSize().      Note that even if you specify that you prefer a 32 bit depth     buffer (e.g. with setDepthBufferSize(32)), the format that is     chosen may not have a 32 bit depth buffer, even if there is a     format available with a 32 bit depth buffer. The main reason for     this is how the system dependant picking algorithms work on the     different platforms, and some format options may have higher     precedence than others.      You create and tell a QPlatformWindowFormat object what rendering options you     want from an OpenGL rendering context.      OpenGL drivers or accelerated hardware may or may not support     advanced features such as alpha channel or stereographic viewing.     If you request some features that the driver/hardware does not     provide when you create a QGLWidget, you will get a rendering     context with the nearest subset of features.      There are different ways to define the display characteristics of     a rendering context. One is to create a QPlatformWindowFormat and make it the     default for the entire application:     \snippet doc/src/snippets/code/src_opengl_qgl.cpp 0      Or you can specify the desired format when creating an object of     your QGLWidget subclass:     \snippet doc/src/snippets/code/src_opengl_qgl.cpp 1      After the widget has been created, you can find out which of the     requested features the system was able to provide:     \snippet doc/src/snippets/code/src_opengl_qgl.cpp 2      \legalese         OpenGL is a trademark of Silicon Graphics, Inc. in the         United States and other countries.     \endlegalese      \sa QPlatformContext, QWidget */
end_comment
begin_comment
comment|/*!     Constructs a QPlatformWindowFormat object with the following default settings:     \list     \i \link setDoubleBuffer() Double buffer:\endlink Enabled.     \i \link setDepth() Depth buffer:\endlink Enabled.     \i \link setRgba() RGBA:\endlink Enabled (i.e., color index disabled).     \i \link setAlpha() Alpha channel:\endlink Disabled.     \i \link setAccum() Accumulator buffer:\endlink Disabled.     \i \link setStencil() Stencil buffer:\endlink Enabled.     \i \link setStereo() Stereo:\endlink Disabled.     \i \link setDirectRendering() Direct rendering:\endlink Enabled.     \i \link setOverlay() Overlay:\endlink Disabled.     \i \link setPlane() Plane:\endlink 0 (i.e., normal plane).     \i \link setSampleBuffers() Multisample buffers:\endlink Disabled.     \endlist */
end_comment
begin_constructor
DECL|function|QPlatformWindowFormat
name|QPlatformWindowFormat
operator|::
name|QPlatformWindowFormat
parameter_list|()
block|{
name|d
operator|=
operator|new
name|QPlatformWindowFormatPrivate
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Creates a QPlatformWindowFormat object that is a copy of the current     defaultFormat().      If \a options is not 0, the default format is modified by the     specified format options. The \a options parameter should be     QGL::FormatOption values OR'ed together.      This constructor makes it easy to specify a certain desired format     in classes derived from QGLWidget, for example:     \snippet doc/src/snippets/code/src_opengl_qgl.cpp 3      Note that there are QGL::FormatOption values to turn format settings     both on and off, e.g. QGL::DepthBuffer and QGL::NoDepthBuffer,     QGL::DirectRendering and QGL::IndirectRendering, etc.      The \a plane parameter defaults to 0 and is the plane which this     format should be associated with. Not all OpenGL implementations     supports overlay/underlay rendering planes.      \sa defaultFormat(), setOption(), setPlane() */
end_comment
begin_constructor
DECL|function|QPlatformWindowFormat
name|QPlatformWindowFormat
operator|::
name|QPlatformWindowFormat
parameter_list|(
name|QPlatformWindowFormat
operator|::
name|FormatOptions
name|options
parameter_list|)
block|{
name|d
operator|=
operator|new
name|QPlatformWindowFormatPrivate
expr_stmt|;
name|QPlatformWindowFormat
operator|::
name|FormatOptions
name|newOpts
init|=
name|options
decl_stmt|;
name|d
operator|->
name|opts
operator|=
name|defaultFormat
argument_list|()
operator|.
name|d
operator|->
name|opts
expr_stmt|;
name|d
operator|->
name|opts
operator||=
operator|(
name|newOpts
operator|&
literal|0xffff
operator|)
expr_stmt|;
name|d
operator|->
name|opts
operator|&=
operator|~
operator|(
name|newOpts
operator|>>
literal|16
operator|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|detach
name|void
name|QPlatformWindowFormat
operator|::
name|detach
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|!=
literal|1
condition|)
block|{
name|QPlatformWindowFormatPrivate
modifier|*
name|newd
init|=
operator|new
name|QPlatformWindowFormatPrivate
argument_list|(
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|d
expr_stmt|;
name|d
operator|=
name|newd
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Constructs a copy of \a other. */
end_comment
begin_constructor
DECL|function|QPlatformWindowFormat
name|QPlatformWindowFormat
operator|::
name|QPlatformWindowFormat
parameter_list|(
specifier|const
name|QPlatformWindowFormat
modifier|&
name|other
parameter_list|)
block|{
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
name|d
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
end_constructor
begin_comment
comment|/*!     Assigns \a other to this object. */
end_comment
begin_function
DECL|function|operator =
name|QPlatformWindowFormat
modifier|&
name|QPlatformWindowFormat
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QPlatformWindowFormat
modifier|&
name|other
parameter_list|)
block|{
if|if
condition|(
name|d
operator|!=
name|other
operator|.
name|d
condition|)
block|{
name|other
operator|.
name|d
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|d
expr_stmt|;
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     Destroys the QPlatformWindowFormat. */
end_comment
begin_destructor
DECL|function|~QPlatformWindowFormat
name|QPlatformWindowFormat
operator|::
name|~
name|QPlatformWindowFormat
parameter_list|()
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \fn bool QPlatformWindowFormat::doubleBuffer() const      Returns true if double buffering is enabled; otherwise returns     false. Double buffering is enabled by default.      \sa setDoubleBuffer() */
end_comment
begin_comment
comment|/*!     If \a enable is true sets double buffering; otherwise sets single     buffering.      Double buffering is enabled by default.      Double buffering is a technique where graphics are rendered on an     off-screen buffer and not directly to the screen. When the drawing     has been completed, the program calls a swapBuffers() function to     exchange the screen contents with the buffer. The result is     flicker-free drawing and often better performance.      \sa doubleBuffer(), QGLContext::swapBuffers(),     QGLWidget::swapBuffers() */
end_comment
begin_function
DECL|function|setDoubleBuffer
name|void
name|QPlatformWindowFormat
operator|::
name|setDoubleBuffer
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|setOption
argument_list|(
name|enable
condition|?
name|QPlatformWindowFormat
operator|::
name|DoubleBuffer
else|:
name|QPlatformWindowFormat
operator|::
name|SingleBuffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QPlatformWindowFormat::depth() const      Returns true if the depth buffer is enabled; otherwise returns     false. The depth buffer is enabled by default.      \sa setDepth(), setDepthBufferSize() */
end_comment
begin_comment
comment|/*!     If \a enable is true enables the depth buffer; otherwise disables     the depth buffer.      The depth buffer is enabled by default.      The purpose of a depth buffer (or Z-buffering) is to remove hidden     surfaces. Pixels are assigned Z values based on the distance to     the viewer. A pixel with a high Z value is closer to the viewer     than a pixel with a low Z value. This information is used to     decide whether to draw a pixel or not.      \sa depth(), setDepthBufferSize() */
end_comment
begin_function
DECL|function|setDepth
name|void
name|QPlatformWindowFormat
operator|::
name|setDepth
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|setOption
argument_list|(
name|enable
condition|?
name|QPlatformWindowFormat
operator|::
name|DepthBuffer
else|:
name|QPlatformWindowFormat
operator|::
name|NoDepthBuffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QPlatformWindowFormat::rgba() const      Returns true if RGBA color mode is set. Returns false if color     index mode is set. The default color mode is RGBA.      \sa setRgba() */
end_comment
begin_comment
comment|/*!     If \a enable is true sets RGBA mode. If \a enable is false sets     color index mode.      The default color mode is RGBA.      RGBA is the preferred mode for most OpenGL applications. In RGBA     color mode you specify colors as red + green + blue + alpha     quadruplets.      In color index mode you specify an index into a color lookup     table.      \sa rgba() */
end_comment
begin_function
DECL|function|setRgba
name|void
name|QPlatformWindowFormat
operator|::
name|setRgba
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|setOption
argument_list|(
name|enable
condition|?
name|QPlatformWindowFormat
operator|::
name|Rgba
else|:
name|QPlatformWindowFormat
operator|::
name|ColorIndex
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QPlatformWindowFormat::alpha() const      Returns true if the alpha buffer in the framebuffer is enabled;     otherwise returns false. The alpha buffer is disabled by default.      \sa setAlpha(), setAlphaBufferSize() */
end_comment
begin_comment
comment|/*!     If \a enable is true enables the alpha buffer; otherwise disables     the alpha buffer.      The alpha buffer is disabled by default.      The alpha buffer is typically used for implementing transparency     or translucency. The A in RGBA specifies the transparency of a     pixel.      \sa alpha(), setAlphaBufferSize() */
end_comment
begin_function
DECL|function|setAlpha
name|void
name|QPlatformWindowFormat
operator|::
name|setAlpha
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|setOption
argument_list|(
name|enable
condition|?
name|QPlatformWindowFormat
operator|::
name|AlphaChannel
else|:
name|QPlatformWindowFormat
operator|::
name|NoAlphaChannel
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QPlatformWindowFormat::accum() const      Returns true if the accumulation buffer is enabled; otherwise     returns false. The accumulation buffer is disabled by default.      \sa setAccum(), setAccumBufferSize() */
end_comment
begin_comment
comment|/*!     If \a enable is true enables the accumulation buffer; otherwise     disables the accumulation buffer.      The accumulation buffer is disabled by default.      The accumulation buffer is used to create blur effects and     multiple exposures.      \sa accum(), setAccumBufferSize() */
end_comment
begin_function
DECL|function|setAccum
name|void
name|QPlatformWindowFormat
operator|::
name|setAccum
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|setOption
argument_list|(
name|enable
condition|?
name|QPlatformWindowFormat
operator|::
name|AccumBuffer
else|:
name|QPlatformWindowFormat
operator|::
name|NoAccumBuffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QPlatformWindowFormat::stencil() const      Returns true if the stencil buffer is enabled; otherwise returns     false. The stencil buffer is enabled by default.      \sa setStencil(), setStencilBufferSize() */
end_comment
begin_comment
comment|/*!     If \a enable is true enables the stencil buffer; otherwise     disables the stencil buffer.      The stencil buffer is enabled by default.      The stencil buffer masks certain parts of the drawing area so that     masked parts are not drawn on.      \sa stencil(), setStencilBufferSize() */
end_comment
begin_function
DECL|function|setStencil
name|void
name|QPlatformWindowFormat
operator|::
name|setStencil
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|setOption
argument_list|(
name|enable
condition|?
name|QPlatformWindowFormat
operator|::
name|StencilBuffer
else|:
name|QPlatformWindowFormat
operator|::
name|NoStencilBuffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QPlatformWindowFormat::stereo() const      Returns true if stereo buffering is enabled; otherwise returns     false. Stereo buffering is disabled by default.      \sa setStereo() */
end_comment
begin_comment
comment|/*!     If \a enable is true enables stereo buffering; otherwise disables     stereo buffering.      Stereo buffering is disabled by default.      Stereo buffering provides extra color buffers to generate left-eye     and right-eye images.      \sa stereo() */
end_comment
begin_function
DECL|function|setStereo
name|void
name|QPlatformWindowFormat
operator|::
name|setStereo
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|setOption
argument_list|(
name|enable
condition|?
name|QPlatformWindowFormat
operator|::
name|StereoBuffers
else|:
name|QPlatformWindowFormat
operator|::
name|NoStereoBuffers
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QPlatformWindowFormat::directRendering() const      Returns true if direct rendering is enabled; otherwise returns     false.      Direct rendering is enabled by default.      \sa setDirectRendering() */
end_comment
begin_comment
comment|/*!     If \a enable is true enables direct rendering; otherwise disables     direct rendering.      Direct rendering is enabled by default.      Enabling this option will make OpenGL bypass the underlying window     system and render directly from hardware to the screen, if this is     supported by the system.      \sa directRendering() */
end_comment
begin_function
DECL|function|setDirectRendering
name|void
name|QPlatformWindowFormat
operator|::
name|setDirectRendering
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|setOption
argument_list|(
name|enable
condition|?
name|QPlatformWindowFormat
operator|::
name|DirectRendering
else|:
name|QPlatformWindowFormat
operator|::
name|IndirectRendering
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QPlatformWindowFormat::sampleBuffers() const      Returns true if multisample buffer support is enabled; otherwise     returns false.      The multisample buffer is disabled by default.      \sa setSampleBuffers() */
end_comment
begin_comment
comment|/*!     If \a enable is true, a GL context with multisample buffer support     is picked; otherwise ignored.      \sa sampleBuffers(), setSamples(), samples() */
end_comment
begin_function
DECL|function|setSampleBuffers
name|void
name|QPlatformWindowFormat
operator|::
name|setSampleBuffers
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|setOption
argument_list|(
name|enable
condition|?
name|QPlatformWindowFormat
operator|::
name|SampleBuffers
else|:
name|QPlatformWindowFormat
operator|::
name|NoSampleBuffers
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of samples per pixel when multisampling is     enabled. By default, the highest number of samples that is     available is used.      \sa setSampleBuffers(), sampleBuffers(), setSamples() */
end_comment
begin_function
DECL|function|samples
name|int
name|QPlatformWindowFormat
operator|::
name|samples
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|numSamples
return|;
block|}
end_function
begin_comment
comment|/*!     Set the preferred number of samples per pixel when multisampling     is enabled to \a numSamples. By default, the highest number of     samples available is used.      \sa setSampleBuffers(), sampleBuffers(), samples() */
end_comment
begin_function
DECL|function|setSamples
name|void
name|QPlatformWindowFormat
operator|::
name|setSamples
parameter_list|(
name|int
name|numSamples
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
name|numSamples
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPlatformWindowFormat::setSamples: Cannot have negative number of samples per pixel %d"
argument_list|,
name|numSamples
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|numSamples
operator|=
name|numSamples
expr_stmt|;
name|setSampleBuffers
argument_list|(
name|numSamples
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Set the preferred swap interval. This can be used to sync the GL     drawing into a system window to the vertical refresh of the screen.     Setting an \a interval value of 0 will turn the vertical refresh syncing     off, any value higher than 0 will turn the vertical syncing on.      Under Windows and under X11, where the \c{WGL_EXT_swap_control}     and \c{GLX_SGI_video_sync} extensions are used, the \a interval     parameter can be used to set the minimum number of video frames     that are displayed before a buffer swap will occur. In effect,     setting the \a interval to 10, means there will be 10 vertical     retraces between every buffer swap.      Under Windows the \c{WGL_EXT_swap_control} extension has to be present,     and under X11 the \c{GLX_SGI_video_sync} extension has to be present. */
end_comment
begin_function
DECL|function|setSwapInterval
name|void
name|QPlatformWindowFormat
operator|::
name|setSwapInterval
parameter_list|(
name|int
name|interval
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|swapInterval
operator|=
name|interval
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the currently set swap interval. -1 is returned if setting     the swap interval isn't supported in the system GL implementation. */
end_comment
begin_function
DECL|function|swapInterval
name|int
name|QPlatformWindowFormat
operator|::
name|swapInterval
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|swapInterval
return|;
block|}
end_function
begin_function
DECL|function|setWindowApi
name|void
name|QPlatformWindowFormat
operator|::
name|setWindowApi
parameter_list|(
name|QPlatformWindowFormat
operator|::
name|WindowApi
name|api
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|windowApi
operator|=
name|api
expr_stmt|;
block|}
end_function
begin_function
DECL|function|windowApi
name|QPlatformWindowFormat
operator|::
name|WindowApi
name|QPlatformWindowFormat
operator|::
name|windowApi
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|windowApi
return|;
block|}
end_function
begin_function
DECL|function|setSharedContext
name|void
name|QPlatformWindowFormat
operator|::
name|setSharedContext
parameter_list|(
name|QPlatformGLContext
modifier|*
name|context
parameter_list|)
block|{
name|d
operator|->
name|sharedContext
operator|=
name|context
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sharedGLContext
name|QPlatformGLContext
modifier|*
name|QPlatformWindowFormat
operator|::
name|sharedGLContext
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|sharedContext
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QPlatformWindowFormat::hasWindowSurface() const      Returns true if the corresponding widget has an instance of QWindowSurface.      Otherwise returns false.      WindowSurface is enabled by default.      \sa setOverlay() */
end_comment
begin_comment
comment|/*!     If \a enable is true a top level QWidget will create a QWindowSurface at creation;      otherwise the QWidget will only have a QPlatformWindow.      This is useful for ie. QGLWidget where the QPlatformGLContext controls the surface.      \sa hasOverlay() */
end_comment
begin_function
DECL|function|setWindowSurface
name|void
name|QPlatformWindowFormat
operator|::
name|setWindowSurface
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|setOption
argument_list|(
name|enable
condition|?
name|QPlatformWindowFormat
operator|::
name|HasWindowSurface
else|:
name|QPlatformWindowFormat
operator|::
name|NoWindowSurface
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the format option to \a opt.      \sa testOption() */
end_comment
begin_function
DECL|function|setOption
name|void
name|QPlatformWindowFormat
operator|::
name|setOption
parameter_list|(
name|QPlatformWindowFormat
operator|::
name|FormatOptions
name|opt
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
name|opt
operator|&
literal|0xffff
condition|)
name|d
operator|->
name|opts
operator||=
name|opt
expr_stmt|;
else|else
name|d
operator|->
name|opts
operator|&=
operator|~
operator|(
name|opt
operator|>>
literal|16
operator|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns true if format option \a opt is set; otherwise returns false.      \sa setOption() */
end_comment
begin_function
DECL|function|testOption
name|bool
name|QPlatformWindowFormat
operator|::
name|testOption
parameter_list|(
name|QPlatformWindowFormat
operator|::
name|FormatOptions
name|opt
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|opt
operator|&
literal|0xffff
condition|)
return|return
operator|(
name|d
operator|->
name|opts
operator|&
name|opt
operator|)
operator|!=
literal|0
return|;
else|else
return|return
operator|(
name|d
operator|->
name|opts
operator|&
operator|(
name|opt
operator|>>
literal|16
operator|)
operator|)
operator|==
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Set the minimum depth buffer size to \a size.      \sa depthBufferSize(), setDepth(), depth() */
end_comment
begin_function
DECL|function|setDepthBufferSize
name|void
name|QPlatformWindowFormat
operator|::
name|setDepthBufferSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPlatformWindowFormat::setDepthBufferSize: Cannot set negative depth buffer size %d"
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|depthSize
operator|=
name|size
expr_stmt|;
name|setDepth
argument_list|(
name|size
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the depth buffer size.      \sa depth(), setDepth(), setDepthBufferSize() */
end_comment
begin_function
DECL|function|depthBufferSize
name|int
name|QPlatformWindowFormat
operator|::
name|depthBufferSize
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|depthSize
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Set the preferred red buffer size to \a size.      \sa setGreenBufferSize(), setBlueBufferSize(), setAlphaBufferSize() */
end_comment
begin_function
DECL|function|setRedBufferSize
name|void
name|QPlatformWindowFormat
operator|::
name|setRedBufferSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPlatformWindowFormat::setRedBufferSize: Cannot set negative red buffer size %d"
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|redSize
operator|=
name|size
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the red buffer size.      \sa setRedBufferSize() */
end_comment
begin_function
DECL|function|redBufferSize
name|int
name|QPlatformWindowFormat
operator|::
name|redBufferSize
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|redSize
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Set the preferred green buffer size to \a size.      \sa setRedBufferSize(), setBlueBufferSize(), setAlphaBufferSize() */
end_comment
begin_function
DECL|function|setGreenBufferSize
name|void
name|QPlatformWindowFormat
operator|::
name|setGreenBufferSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPlatformWindowFormat::setGreenBufferSize: Cannot set negative green buffer size %d"
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|greenSize
operator|=
name|size
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the green buffer size.      \sa setGreenBufferSize() */
end_comment
begin_function
DECL|function|greenBufferSize
name|int
name|QPlatformWindowFormat
operator|::
name|greenBufferSize
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|greenSize
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Set the preferred blue buffer size to \a size.      \sa setRedBufferSize(), setGreenBufferSize(), setAlphaBufferSize() */
end_comment
begin_function
DECL|function|setBlueBufferSize
name|void
name|QPlatformWindowFormat
operator|::
name|setBlueBufferSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPlatformWindowFormat::setBlueBufferSize: Cannot set negative blue buffer size %d"
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|blueSize
operator|=
name|size
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the blue buffer size.      \sa setBlueBufferSize() */
end_comment
begin_function
DECL|function|blueBufferSize
name|int
name|QPlatformWindowFormat
operator|::
name|blueBufferSize
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|blueSize
return|;
block|}
end_function
begin_comment
comment|/*!     Set the preferred alpha buffer size to \a size.     This function implicitly enables the alpha channel.      \sa setRedBufferSize(), setGreenBufferSize(), alphaBufferSize() */
end_comment
begin_function
DECL|function|setAlphaBufferSize
name|void
name|QPlatformWindowFormat
operator|::
name|setAlphaBufferSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPlatformWindowFormat::setAlphaBufferSize: Cannot set negative alpha buffer size %d"
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|alphaSize
operator|=
name|size
expr_stmt|;
name|setAlpha
argument_list|(
name|size
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the alpha buffer size.      \sa alpha(), setAlpha(), setAlphaBufferSize() */
end_comment
begin_function
DECL|function|alphaBufferSize
name|int
name|QPlatformWindowFormat
operator|::
name|alphaBufferSize
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|alphaSize
return|;
block|}
end_function
begin_comment
comment|/*!     Set the preferred accumulation buffer size, where \a size is the     bit depth for each RGBA component.      \sa accum(), setAccum(), accumBufferSize() */
end_comment
begin_function
DECL|function|setAccumBufferSize
name|void
name|QPlatformWindowFormat
operator|::
name|setAccumBufferSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPlatformWindowFormat::setAccumBufferSize: Cannot set negative accumulate buffer size %d"
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|accumSize
operator|=
name|size
expr_stmt|;
name|setAccum
argument_list|(
name|size
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the accumulation buffer size.      \sa setAccumBufferSize(), accum(), setAccum() */
end_comment
begin_function
DECL|function|accumBufferSize
name|int
name|QPlatformWindowFormat
operator|::
name|accumBufferSize
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|accumSize
return|;
block|}
end_function
begin_comment
comment|/*!     Set the preferred stencil buffer size to \a size.      \sa stencilBufferSize(), setStencil(), stencil() */
end_comment
begin_function
DECL|function|setStencilBufferSize
name|void
name|QPlatformWindowFormat
operator|::
name|setStencilBufferSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPlatformWindowFormat::setStencilBufferSize: Cannot set negative stencil buffer size %d"
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|stencilSize
operator|=
name|size
expr_stmt|;
name|setStencil
argument_list|(
name|size
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the stencil buffer size.      \sa stencil(), setStencil(), setStencilBufferSize() */
end_comment
begin_function
DECL|function|stencilBufferSize
name|int
name|QPlatformWindowFormat
operator|::
name|stencilBufferSize
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|stencilSize
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the default QPlatformWindowFormat for the application. All QGLWidget     objects that are created use this format unless another format is     specified, e.g. when they are constructed.      If no special default format has been set using     setDefaultFormat(), the default format is the same as that created     with QPlatformWindowFormat().      \sa setDefaultFormat() */
end_comment
begin_function
DECL|function|defaultFormat
name|QPlatformWindowFormat
name|QPlatformWindowFormat
operator|::
name|defaultFormat
parameter_list|()
block|{
return|return
operator|*
name|q_platformwindow_default_format
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets a new default QPlatformWindowFormat for the application to \a f. For     example, to set single buffering as the default instead of double     buffering, your main() might contain code like this:     \snippet doc/src/snippets/code/src_opengl_qgl.cpp 4      \sa defaultFormat() */
end_comment
begin_function
DECL|function|setDefaultFormat
name|void
name|QPlatformWindowFormat
operator|::
name|setDefaultFormat
parameter_list|(
specifier|const
name|QPlatformWindowFormat
modifier|&
name|f
parameter_list|)
block|{
operator|*
name|q_platformwindow_default_format
argument_list|()
operator|=
name|f
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the default QPlatformWindowFormat for overlay contexts.      The default overlay format is:     \list     \i \link setDoubleBuffer() Double buffer:\endlink Disabled.     \i \link setDepth() Depth buffer:\endlink Disabled.     \i \link setRgba() RGBA:\endlink Disabled (i.e., color index enabled).     \i \link setAlpha() Alpha channel:\endlink Disabled.     \i \link setAccum() Accumulator buffer:\endlink Disabled.     \i \link setStencil() Stencil buffer:\endlink Disabled.     \i \link setStereo() Stereo:\endlink Disabled.     \i \link setDirectRendering() Direct rendering:\endlink Enabled.     \i \link setOverlay() Overlay:\endlink Disabled.     \i \link setSampleBuffers() Multisample buffers:\endlink Disabled.     \i \link setPlane() Plane:\endlink 1 (i.e., first overlay plane).     \endlist      \sa setDefaultFormat() */
end_comment
begin_comment
comment|//QPlatformWindowFormat QPlatformWindowFormat::defaultOverlayFormat()
end_comment
begin_comment
comment|//{
end_comment
begin_comment
comment|//    return *defaultOverlayFormatInstance();
end_comment
begin_comment
comment|//}
end_comment
begin_comment
comment|///*!
end_comment
begin_comment
comment|//    Sets a new default QPlatformWindowFormat for overlay contexts to \a f. This
end_comment
begin_comment
comment|//    format is used whenever a QGLWidget is created with a format that
end_comment
begin_comment
comment|//    hasOverlay() enabled.
end_comment
begin_comment
comment|//    For example, to get a double buffered overlay context (if
end_comment
begin_comment
comment|//    available), use code like this:
end_comment
begin_comment
comment|//    \snippet doc/src/snippets/code/src_opengl_qgl.cpp 5
end_comment
begin_comment
comment|//    As usual, you can find out after widget creation whether the
end_comment
begin_comment
comment|//    underlying OpenGL system was able to provide the requested
end_comment
begin_comment
comment|//    specification:
end_comment
begin_comment
comment|//    \snippet doc/src/snippets/code/src_opengl_qgl.cpp 6
end_comment
begin_comment
comment|//    \sa defaultOverlayFormat()
end_comment
begin_comment
comment|//*/
end_comment
begin_comment
comment|//void QPlatformWindowFormat::setDefaultOverlayFormat(const QPlatformWindowFormat&f)
end_comment
begin_comment
comment|//{
end_comment
begin_comment
comment|//    QPlatformWindowFormat *defaultFormat = defaultOverlayFormatInstance();
end_comment
begin_comment
comment|//    *defaultFormat = f;
end_comment
begin_comment
comment|//    // Make sure the user doesn't request that the overlays themselves
end_comment
begin_comment
comment|//    // have overlays, since it is unlikely that the system supports
end_comment
begin_comment
comment|//    // infinitely many planes...
end_comment
begin_comment
comment|//    defaultFormat->setOverlay(false);
end_comment
begin_comment
comment|//}
end_comment
begin_comment
comment|/*!     Returns true if all the options of the two QPlatformWindowFormat objects     \a a and \a b are equal; otherwise returns false.      \relates QPlatformWindowFormat */
end_comment
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|QPlatformWindowFormat
modifier|&
name|a
parameter_list|,
specifier|const
name|QPlatformWindowFormat
modifier|&
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|.
name|d
operator|==
name|b
operator|.
name|d
operator|)
operator|||
operator|(
operator|(
name|int
operator|)
name|a
operator|.
name|d
operator|->
name|opts
operator|==
operator|(
name|int
operator|)
name|b
operator|.
name|d
operator|->
name|opts
operator|&&
name|a
operator|.
name|d
operator|->
name|alphaSize
operator|==
name|b
operator|.
name|d
operator|->
name|alphaSize
operator|&&
name|a
operator|.
name|d
operator|->
name|accumSize
operator|==
name|b
operator|.
name|d
operator|->
name|accumSize
operator|&&
name|a
operator|.
name|d
operator|->
name|stencilSize
operator|==
name|b
operator|.
name|d
operator|->
name|stencilSize
operator|&&
name|a
operator|.
name|d
operator|->
name|depthSize
operator|==
name|b
operator|.
name|d
operator|->
name|depthSize
operator|&&
name|a
operator|.
name|d
operator|->
name|redSize
operator|==
name|b
operator|.
name|d
operator|->
name|redSize
operator|&&
name|a
operator|.
name|d
operator|->
name|greenSize
operator|==
name|b
operator|.
name|d
operator|->
name|greenSize
operator|&&
name|a
operator|.
name|d
operator|->
name|blueSize
operator|==
name|b
operator|.
name|d
operator|->
name|blueSize
operator|&&
name|a
operator|.
name|d
operator|->
name|numSamples
operator|==
name|b
operator|.
name|d
operator|->
name|numSamples
operator|&&
name|a
operator|.
name|d
operator|->
name|swapInterval
operator|==
name|b
operator|.
name|d
operator|->
name|swapInterval
operator|&&
name|a
operator|.
name|d
operator|->
name|windowApi
operator|==
name|b
operator|.
name|d
operator|->
name|windowApi
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns false if all the options of the two QPlatformWindowFormat objects     \a a and \a b are equal; otherwise returns true.      \relates QPlatformWindowFormat */
end_comment
begin_function
DECL|function|operator !=
name|bool
name|operator
name|!=
parameter_list|(
specifier|const
name|QPlatformWindowFormat
modifier|&
name|a
parameter_list|,
specifier|const
name|QPlatformWindowFormat
modifier|&
name|b
parameter_list|)
block|{
return|return
operator|!
operator|(
name|a
operator|==
name|b
operator|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
specifier|const
name|QPlatformWindowFormat
modifier|&
name|f
parameter_list|)
block|{
specifier|const
name|QPlatformWindowFormatPrivate
modifier|*
specifier|const
name|d
init|=
name|f
operator|.
name|d
decl_stmt|;
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QGLFormat("
operator|<<
literal|"options "
operator|<<
name|d
operator|->
name|opts
operator|<<
literal|", depthBufferSize "
operator|<<
name|d
operator|->
name|depthSize
operator|<<
literal|", accumBufferSize "
operator|<<
name|d
operator|->
name|accumSize
operator|<<
literal|", stencilBufferSize "
operator|<<
name|d
operator|->
name|stencilSize
operator|<<
literal|", redBufferSize "
operator|<<
name|d
operator|->
name|redSize
operator|<<
literal|", greenBufferSize "
operator|<<
name|d
operator|->
name|greenSize
operator|<<
literal|", blueBufferSize "
operator|<<
name|d
operator|->
name|blueSize
operator|<<
literal|", alphaBufferSize "
operator|<<
name|d
operator|->
name|alphaSize
operator|<<
literal|", samples "
operator|<<
name|d
operator|->
name|numSamples
operator|<<
literal|", swapInterval "
operator|<<
name|d
operator|->
name|swapInterval
operator|<<
literal|')'
expr_stmt|;
return|return
name|dbg
operator|.
name|space
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
end_unit
