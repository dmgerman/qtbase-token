begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qeventdispatcher_qpa_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qeventdispatcher_unix_p.h"
end_include
begin_include
include|#
directive|include
file|"qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"qplatformeventloopintegration_qpa.h"
end_include
begin_include
include|#
directive|include
file|<QWindowSystemInterface>
end_include
begin_include
include|#
directive|include
file|<QtCore/QElapsedTimer>
end_include
begin_include
include|#
directive|include
file|<QtCore/QAtomicInt>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSemaphore>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
name|QT_USE_NAMESPACE
DECL|class|Rendezvous
name|class
name|Rendezvous
block|{
specifier|public
operator|:
DECL|function|checkpoint
name|void
name|checkpoint
argument_list|()
block|{
if|if
condition|(
name|state
operator|.
name|testAndSetOrdered
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
condition|)
block|{
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|.
name|testAndSetAcquire
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|qWarning
argument_list|(
literal|"Barrier internal error"
argument_list|)
expr_stmt|;
block|}
end_else
begin_decl_stmt
unit|} private:
DECL|member|semaphore
name|QSemaphore
name|semaphore
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|state
name|QAtomicInt
name|state
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|SelectWorker
unit|};
class|class
name|SelectWorker
super|:
specifier|public
name|QThread
block|{
public|public:
DECL|function|SelectWorker
name|SelectWorker
parameter_list|(
name|QEventDispatcherQPAPrivate
modifier|*
name|eventDispatcherPrivate
parameter_list|)
member_init_list|:
name|QThread
argument_list|()
member_init_list|,
name|m_edPrivate
argument_list|(
name|eventDispatcherPrivate
argument_list|)
member_init_list|,
name|m_retVal
argument_list|(
literal|0
argument_list|)
block|{     }
DECL|function|setSelectValues
name|void
name|setSelectValues
parameter_list|(
name|int
name|nfds
parameter_list|,
name|fd_set
modifier|*
name|readfds
parameter_list|,
name|fd_set
modifier|*
name|writefds
parameter_list|,
name|fd_set
modifier|*
name|exceptfds
parameter_list|)
block|{
name|m_nfds
operator|=
name|nfds
expr_stmt|;
name|m_readfds
operator|=
name|readfds
expr_stmt|;
name|m_writefds
operator|=
name|writefds
expr_stmt|;
name|m_exceptfds
operator|=
name|exceptfds
expr_stmt|;
block|}
DECL|function|retVal
name|int
name|retVal
parameter_list|()
specifier|const
block|{
return|return
name|m_retVal
return|;
block|}
protected|protected:
name|void
name|run
parameter_list|()
function_decl|;
private|private:
DECL|member|m_edPrivate
name|QEventDispatcherQPAPrivate
modifier|*
name|m_edPrivate
decl_stmt|;
DECL|member|m_retVal
name|int
name|m_retVal
decl_stmt|;
DECL|member|m_nfds
name|int
name|m_nfds
decl_stmt|;
DECL|member|m_readfds
DECL|member|m_writefds
DECL|member|m_exceptfds
name|fd_set
modifier|*
name|m_readfds
decl_stmt|,
modifier|*
name|m_writefds
decl_stmt|,
modifier|*
name|m_exceptfds
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QEventDispatcherQPAPrivate
class|class
name|QEventDispatcherQPAPrivate
super|:
specifier|public
name|QEventDispatcherUNIXPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QEventDispatcherQPA
parameter_list|)
specifier|public
private|:
DECL|function|QEventDispatcherQPAPrivate
name|QEventDispatcherQPAPrivate
parameter_list|()
member_init_list|:
name|eventLoopIntegration
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|barrierBeforeBlocking
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|barrierReturnValue
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|selectReturnMutex
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|selectWorkerNeedsSync
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|selectWorkerHasResult
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_integrationInitialised
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_hasIntegration
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_isEventLoopIntegrationRunning
argument_list|(
literal|false
argument_list|)
block|{      }
DECL|function|~QEventDispatcherQPAPrivate
name|~
name|QEventDispatcherQPAPrivate
parameter_list|()
block|{
operator|delete
name|selectWorker
expr_stmt|;
operator|delete
name|eventLoopIntegration
expr_stmt|;
operator|delete
name|barrierBeforeBlocking
expr_stmt|;
operator|delete
name|barrierReturnValue
expr_stmt|;
operator|delete
name|selectReturnMutex
expr_stmt|;
block|}
DECL|function|hasIntegration
name|bool
name|hasIntegration
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|m_integrationInitialised
condition|)
block|{
name|QEventDispatcherQPAPrivate
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QEventDispatcherQPAPrivate
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|qApp
operator|&&
operator|(
name|qApp
operator|->
name|thread
argument_list|()
operator|==
name|QThread
operator|::
name|currentThread
argument_list|()
operator|)
condition|)
block|{
comment|// guiThread
if|if
condition|(
name|QApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
condition|)
block|{
name|that
operator|->
name|eventLoopIntegration
operator|=
name|QApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|createEventLoopIntegration
argument_list|()
expr_stmt|;
if|if
condition|(
name|that
operator|->
name|eventLoopIntegration
condition|)
block|{
name|that
operator|->
name|selectWorker
operator|=
operator|new
name|SelectWorker
argument_list|(
name|that
argument_list|)
expr_stmt|;
name|that
operator|->
name|barrierBeforeBlocking
operator|=
operator|new
name|Rendezvous
expr_stmt|;
name|that
operator|->
name|barrierReturnValue
operator|=
operator|new
name|Rendezvous
expr_stmt|;
name|that
operator|->
name|selectReturnMutex
operator|=
operator|new
name|QMutex
expr_stmt|;
name|that
operator|->
name|selectWorker
operator|->
name|start
argument_list|()
expr_stmt|;
name|that
operator|->
name|m_hasIntegration
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|QElapsedTimer
operator|::
name|isMonotonic
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"Having eventloop integration without monotonic timers can lead to undefined behaviour"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|that
operator|->
name|m_integrationInitialised
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|m_hasIntegration
return|;
block|}
DECL|function|isEventLoopIntegrationRunning
name|bool
name|isEventLoopIntegrationRunning
parameter_list|()
specifier|const
block|{
return|return
name|m_isEventLoopIntegrationRunning
return|;
block|}
DECL|function|runEventLoopIntegration
name|void
name|runEventLoopIntegration
parameter_list|()
block|{
if|if
condition|(
name|qApp
operator|&&
operator|(
name|qApp
operator|->
name|thread
argument_list|()
operator|==
name|QThread
operator|::
name|currentThread
argument_list|()
operator|)
condition|)
block|{
name|m_isEventLoopIntegrationRunning
operator|=
literal|true
expr_stmt|;
name|eventLoopIntegration
operator|->
name|startEventLoop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|member|eventLoopIntegration
name|QPlatformEventLoopIntegration
modifier|*
name|eventLoopIntegration
decl_stmt|;
DECL|member|barrierBeforeBlocking
name|Rendezvous
modifier|*
name|barrierBeforeBlocking
decl_stmt|;
DECL|member|barrierReturnValue
name|Rendezvous
modifier|*
name|barrierReturnValue
decl_stmt|;
DECL|member|selectReturnMutex
name|QMutex
modifier|*
name|selectReturnMutex
decl_stmt|;
DECL|member|selectWorkerNeedsSync
name|bool
name|selectWorkerNeedsSync
decl_stmt|;
DECL|member|selectWorkerHasResult
name|bool
name|selectWorkerHasResult
decl_stmt|;
DECL|member|selectWorker
name|SelectWorker
modifier|*
name|selectWorker
decl_stmt|;
private|private:
DECL|member|m_integrationInitialised
name|bool
name|m_integrationInitialised
decl_stmt|;
DECL|member|m_hasIntegration
name|bool
name|m_hasIntegration
decl_stmt|;
DECL|member|m_isEventLoopIntegrationRunning
name|bool
name|m_isEventLoopIntegrationRunning
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QEventDispatcherQPA
name|QEventDispatcherQPA
operator|::
name|QEventDispatcherQPA
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QEventDispatcherUNIX
argument_list|(
operator|*
operator|new
name|QEventDispatcherQPAPrivate
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QEventDispatcherQPA
name|QEventDispatcherQPA
operator|::
name|~
name|QEventDispatcherQPA
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|processEvents
name|bool
name|QEventDispatcherQPA
operator|::
name|processEvents
parameter_list|(
name|QEventLoop
operator|::
name|ProcessEventsFlags
name|flags
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QEventDispatcherQPA
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hasIntegration
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|isEventLoopIntegrationRunning
argument_list|()
condition|)
block|{
name|d
operator|->
name|runEventLoopIntegration
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|threadData
operator|->
name|quitNow
condition|)
block|{
name|d
operator|->
name|eventLoopIntegration
operator|->
name|quitEventLoop
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|int
name|nevents
init|=
literal|0
decl_stmt|;
comment|// handle gui and posted events
name|d
operator|->
name|interrupt
operator|=
literal|false
expr_stmt|;
name|QApplication
operator|::
name|sendPostedEvents
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|d
operator|->
name|interrupt
condition|)
block|{
comment|// also flushes output buffer ###can be optimized
name|QWindowSystemInterfacePrivate
operator|::
name|WindowSystemEvent
modifier|*
name|event
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|QEventLoop
operator|::
name|ExcludeUserInputEvents
operator|)
operator|&&
name|QWindowSystemInterfacePrivate
operator|::
name|windowSystemEventsQueued
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// process a pending user input event
name|event
operator|=
name|QWindowSystemInterfacePrivate
operator|::
name|getWindowSystemEvent
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|event
condition|)
break|break;
block|}
else|else
block|{
break|break;
block|}
if|if
condition|(
name|filterEvent
argument_list|(
name|event
argument_list|)
condition|)
block|{
operator|delete
name|event
expr_stmt|;
continue|continue;
block|}
name|nevents
operator|++
expr_stmt|;
name|QGuiApplicationPrivate
operator|::
name|processWindowSystemEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
operator|delete
name|event
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|interrupt
condition|)
block|{
if|if
condition|(
name|QEventDispatcherUNIX
operator|::
name|processEvents
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|QEventDispatcherUNIX
operator|::
name|processEvents
argument_list|(
name|flags
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
operator|(
name|nevents
operator|>
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|hasPendingEvents
name|bool
name|QEventDispatcherQPA
operator|::
name|hasPendingEvents
parameter_list|()
block|{
specifier|extern
name|uint
name|qGlobalPostedEventsCount
argument_list|()
decl_stmt|;
comment|// from qapplication.cpp
return|return
name|qGlobalPostedEventsCount
argument_list|()
operator|||
name|QWindowSystemInterfacePrivate
operator|::
name|windowSystemEventsQueued
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|registerSocketNotifier
name|void
name|QEventDispatcherQPA
operator|::
name|registerSocketNotifier
parameter_list|(
name|QSocketNotifier
modifier|*
name|notifier
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QEventDispatcherQPA
argument_list|)
expr_stmt|;
name|QEventDispatcherUNIX
operator|::
name|registerSocketNotifier
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hasIntegration
argument_list|()
condition|)
name|wakeUp
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unregisterSocketNotifier
name|void
name|QEventDispatcherQPA
operator|::
name|unregisterSocketNotifier
parameter_list|(
name|QSocketNotifier
modifier|*
name|notifier
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QEventDispatcherQPA
argument_list|)
expr_stmt|;
name|QEventDispatcherUNIX
operator|::
name|unregisterSocketNotifier
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hasIntegration
argument_list|()
condition|)
name|wakeUp
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|flush
name|void
name|QEventDispatcherQPA
operator|::
name|flush
parameter_list|()
block|{
if|if
condition|(
name|qApp
condition|)
name|qApp
operator|->
name|sendPostedEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|select
name|int
name|QEventDispatcherQPA
operator|::
name|select
parameter_list|(
name|int
name|nfds
parameter_list|,
name|fd_set
modifier|*
name|readfds
parameter_list|,
name|fd_set
modifier|*
name|writefds
parameter_list|,
name|fd_set
modifier|*
name|exceptfds
parameter_list|,
name|timeval
modifier|*
name|timeout
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QEventDispatcherQPA
argument_list|)
expr_stmt|;
name|int
name|retVal
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|hasIntegration
argument_list|()
condition|)
block|{
name|qint64
name|timeoutmsec
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|timeout
condition|)
name|timeoutmsec
operator|=
name|timeout
operator|->
name|tv_sec
operator|*
literal|1000
operator|+
operator|(
name|timeout
operator|->
name|tv_usec
operator|/
literal|1000
operator|)
expr_stmt|;
name|d
operator|->
name|selectReturnMutex
operator|->
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|selectWorkerNeedsSync
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|selectWorkerHasResult
condition|)
block|{
name|retVal
operator|=
name|d
operator|->
name|selectWorker
operator|->
name|retVal
argument_list|()
expr_stmt|;
name|d
operator|->
name|selectWorkerHasResult
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|selectReturnMutex
operator|->
name|unlock
argument_list|()
expr_stmt|;
name|d
operator|->
name|barrierReturnValue
operator|->
name|checkpoint
argument_list|()
expr_stmt|;
name|d
operator|->
name|eventLoopIntegration
operator|->
name|setNextTimerEvent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|retVal
return|;
block|}
else|else
block|{
name|d
operator|->
name|selectWorkerNeedsSync
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|selectWorker
operator|->
name|setSelectValues
argument_list|(
name|nfds
argument_list|,
name|readfds
argument_list|,
name|writefds
argument_list|,
name|exceptfds
argument_list|)
expr_stmt|;
name|d
operator|->
name|barrierBeforeBlocking
operator|->
name|checkpoint
argument_list|()
expr_stmt|;
block|}
block|}
name|d
operator|->
name|selectReturnMutex
operator|->
name|unlock
argument_list|()
expr_stmt|;
name|d
operator|->
name|eventLoopIntegration
operator|->
name|setNextTimerEvent
argument_list|(
name|timeoutmsec
argument_list|)
expr_stmt|;
name|retVal
operator|=
literal|0
expr_stmt|;
comment|//is 0 if select has not returned
block|}
else|else
block|{
name|retVal
operator|=
name|QEventDispatcherUNIX
operator|::
name|select
argument_list|(
name|nfds
argument_list|,
name|readfds
argument_list|,
name|writefds
argument_list|,
name|exceptfds
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
end_function
begin_function
DECL|function|run
name|void
name|SelectWorker
operator|::
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|m_retVal
operator|=
literal|0
expr_stmt|;
name|m_edPrivate
operator|->
name|barrierBeforeBlocking
operator|->
name|checkpoint
argument_list|()
expr_stmt|;
comment|// wait for mainthread
name|int
name|tmpRet
init|=
name|qt_safe_select
argument_list|(
name|m_nfds
argument_list|,
name|m_readfds
argument_list|,
name|m_writefds
argument_list|,
name|m_exceptfds
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|m_edPrivate
operator|->
name|selectReturnMutex
operator|->
name|lock
argument_list|()
expr_stmt|;
name|m_edPrivate
operator|->
name|eventLoopIntegration
operator|->
name|qtNeedsToProcessEvents
argument_list|()
expr_stmt|;
name|m_edPrivate
operator|->
name|selectWorkerNeedsSync
operator|=
literal|true
expr_stmt|;
name|m_edPrivate
operator|->
name|selectWorkerHasResult
operator|=
literal|true
expr_stmt|;
name|m_retVal
operator|=
name|tmpRet
expr_stmt|;
name|m_edPrivate
operator|->
name|selectReturnMutex
operator|->
name|unlock
argument_list|()
expr_stmt|;
name|m_edPrivate
operator|->
name|barrierReturnValue
operator|->
name|checkpoint
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
