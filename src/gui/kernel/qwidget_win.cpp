begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qcursor.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qimage.h"
end_include
begin_include
include|#
directive|include
file|"qlayout.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qstack.h"
end_include
begin_include
include|#
directive|include
file|"qt_windows.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qwidget_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qbackingstore_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qwindowsurface_raster_p.h"
end_include
begin_include
include|#
directive|include
file|"qscrollbar.h"
end_include
begin_include
include|#
directive|include
file|"qabstractscrollarea.h"
end_include
begin_include
include|#
directive|include
file|<private/qabstractscrollarea_p.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwininputcontext_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qguifunctions_wince.h"
end_include
begin_function_decl
name|QT_USE_NAMESPACE
specifier|extern
name|void
name|qt_wince_maximize
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//defined in qguifunctions_wince.cpp
end_comment
begin_function_decl
specifier|extern
name|void
name|qt_wince_unmaximize
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//defined in qguifunctions_wince.cpp
end_comment
begin_function_decl
specifier|extern
name|void
name|qt_wince_minimize
parameter_list|(
name|HWND
name|hwnd
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//defined in qguifunctions_wince.cpp
end_comment
begin_function_decl
specifier|extern
name|void
name|qt_wince_full_screen
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|bool
name|fullScreen
parameter_list|,
name|UINT
name|swpf
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//defined in qguifunctions_wince.cpp
end_comment
begin_function_decl
specifier|extern
name|bool
name|qt_wince_is_mobile
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|//defined in qguifunctions_wince.cpp
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|PtrSetLayeredWindowAttributes
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|PtrSetLayeredWindowAttributes
function_decl|)
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|COLORREF
name|crKey
parameter_list|,
name|BYTE
name|bAlpha
parameter_list|,
name|DWORD
name|dwFlags
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrSetLayeredWindowAttributes
specifier|static
name|PtrSetLayeredWindowAttributes
name|ptrSetLayeredWindowAttributes
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DIRECTDRAW
end_ifndef
begin_include
include|#
directive|include
file|<ddraw.h>
end_include
begin_include
include|#
directive|include
file|<private/qimage_p.h>
end_include
begin_decl_stmt
DECL|variable|qt_ddraw_object
specifier|static
name|IDirectDraw
modifier|*
name|qt_ddraw_object
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_ddraw_primary
specifier|static
name|IDirectDrawSurface
modifier|*
name|qt_ddraw_primary
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_NON_COMMERCIAL
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qnc_win.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|WS_EX_TOOLWINDOW
argument_list|)
end_if
begin_define
DECL|macro|WS_EX_TOOLWINDOW
define|#
directive|define
name|WS_EX_TOOLWINDOW
value|0x00000080
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|GWLP_WNDPROC
argument_list|)
end_if
begin_define
DECL|macro|GWLP_WNDPROC
define|#
directive|define
name|GWLP_WNDPROC
value|GWL_WNDPROC
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//#define TABLET_DEBUG
end_comment
begin_define
DECL|macro|PACKETDATA
define|#
directive|define
name|PACKETDATA
value|(PK_X | PK_Y | PK_BUTTONS | PK_NORMAL_PRESSURE | PK_TANGENT_PRESSURE \                      | PK_ORIENTATION | PK_CURSOR | PK_Z)
end_define
begin_define
DECL|macro|PACKETMODE
define|#
directive|define
name|PACKETMODE
value|0
end_define
begin_include
include|#
directive|include
file|<wintab.h>
end_include
begin_include
include|#
directive|include
file|<pktdef.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_typedef
DECL|typedef|PtrWTOpen
typedef|typedef
name|HCTX
function_decl|(
name|API
modifier|*
name|PtrWTOpen
function_decl|)
parameter_list|(
name|HWND
parameter_list|,
name|LPLOGCONTEXT
parameter_list|,
name|BOOL
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTClose
typedef|typedef
name|BOOL
function_decl|(
name|API
modifier|*
name|PtrWTClose
function_decl|)
parameter_list|(
name|HCTX
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTInfo
typedef|typedef
name|UINT
function_decl|(
name|API
modifier|*
name|PtrWTInfo
function_decl|)
parameter_list|(
name|UINT
parameter_list|,
name|UINT
parameter_list|,
name|LPVOID
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTEnable
typedef|typedef
name|BOOL
function_decl|(
name|API
modifier|*
name|PtrWTEnable
function_decl|)
parameter_list|(
name|HCTX
parameter_list|,
name|BOOL
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTOverlap
typedef|typedef
name|BOOL
function_decl|(
name|API
modifier|*
name|PtrWTOverlap
function_decl|)
parameter_list|(
name|HCTX
parameter_list|,
name|BOOL
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTPacketsGet
typedef|typedef
name|int
function_decl|(
name|API
modifier|*
name|PtrWTPacketsGet
function_decl|)
parameter_list|(
name|HCTX
parameter_list|,
name|int
parameter_list|,
name|LPVOID
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTGet
typedef|typedef
name|BOOL
function_decl|(
name|API
modifier|*
name|PtrWTGet
function_decl|)
parameter_list|(
name|HCTX
parameter_list|,
name|LPLOGCONTEXT
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTQueueSizeGet
typedef|typedef
name|int
function_decl|(
name|API
modifier|*
name|PtrWTQueueSizeGet
function_decl|)
parameter_list|(
name|HCTX
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTQueueSizeSet
typedef|typedef
name|BOOL
function_decl|(
name|API
modifier|*
name|PtrWTQueueSizeSet
function_decl|)
parameter_list|(
name|HCTX
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrWTOpen
specifier|static
name|PtrWTOpen
name|ptrWTOpen
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrWTClose
specifier|static
name|PtrWTClose
name|ptrWTClose
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrWTInfo
specifier|static
name|PtrWTInfo
name|ptrWTInfo
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrWTQueueSizeGet
specifier|static
name|PtrWTQueueSizeGet
name|ptrWTQueueSizeGet
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrWTQueueSizeSet
specifier|static
name|PtrWTQueueSizeSet
name|ptrWTQueueSizeSet
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
end_ifndef
begin_function_decl
specifier|static
name|void
name|init_wintab_functions
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|qt_tablet_init
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|qt_tablet_cleanup
parameter_list|()
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TABLETEVENT
end_comment
begin_decl_stmt
specifier|extern
name|HCTX
name|qt_tablet_context
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|bool
name|qt_tablet_tilt_support
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_tablet_widget
specifier|static
name|QWidget
modifier|*
name|qt_tablet_widget
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_get_tablet_widget
name|QWidget
modifier|*
name|qt_get_tablet_widget
parameter_list|()
block|{
return|return
name|qt_tablet_widget
return|;
block|}
end_function
begin_decl_stmt
specifier|extern
name|bool
name|qt_is_gui_used
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
end_ifndef
begin_function
DECL|function|init_wintab_functions
specifier|static
name|void
name|init_wintab_functions
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
return|return;
else|#
directive|else
if|if
condition|(
operator|!
name|qt_is_gui_used
condition|)
return|return;
name|QSystemLibrary
name|library
argument_list|(
name|QLatin1String
argument_list|(
literal|"wintab32"
argument_list|)
argument_list|)
decl_stmt|;
name|ptrWTOpen
operator|=
operator|(
name|PtrWTOpen
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"WTOpenW"
argument_list|)
expr_stmt|;
name|ptrWTInfo
operator|=
operator|(
name|PtrWTInfo
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"WTInfoW"
argument_list|)
expr_stmt|;
name|ptrWTClose
operator|=
operator|(
name|PtrWTClose
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"WTClose"
argument_list|)
expr_stmt|;
name|ptrWTQueueSizeGet
operator|=
operator|(
name|PtrWTQueueSizeGet
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"WTQueueSizeGet"
argument_list|)
expr_stmt|;
name|ptrWTQueueSizeSet
operator|=
operator|(
name|PtrWTQueueSizeSet
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"WTQueueSizeSet"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_WINCE
block|}
end_function
begin_function
DECL|function|qt_tablet_init
specifier|static
name|void
name|qt_tablet_init
parameter_list|()
block|{
specifier|static
name|bool
name|firstTime
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|firstTime
condition|)
return|return;
name|firstTime
operator|=
literal|false
expr_stmt|;
name|qt_tablet_widget
operator|=
operator|new
name|QWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|qt_tablet_widget
operator|->
name|createWinId
argument_list|()
expr_stmt|;
name|qt_tablet_widget
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"Qt internal tablet widget"
argument_list|)
argument_list|)
expr_stmt|;
comment|// We don't need this internal widget to appear in QApplication::topLevelWidgets()
if|if
condition|(
name|QWidgetPrivate
operator|::
name|allWidgets
condition|)
name|QWidgetPrivate
operator|::
name|allWidgets
operator|->
name|remove
argument_list|(
name|qt_tablet_widget
argument_list|)
expr_stmt|;
name|LOGCONTEXT
name|lcMine
decl_stmt|;
name|qAddPostRoutine
argument_list|(
name|qt_tablet_cleanup
argument_list|)
expr_stmt|;
name|struct
name|tagAXIS
name|tpOri
index|[
literal|3
index|]
decl_stmt|;
name|init_wintab_functions
argument_list|()
expr_stmt|;
if|if
condition|(
name|ptrWTInfo
operator|&&
name|ptrWTOpen
operator|&&
name|ptrWTQueueSizeGet
operator|&&
name|ptrWTQueueSizeSet
condition|)
block|{
comment|// make sure we have WinTab
if|if
condition|(
operator|!
name|ptrWTInfo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|)
condition|)
block|{
ifdef|#
directive|ifdef
name|TABLET_DEBUG
name|qWarning
argument_list|(
literal|"QWidget: Wintab services not available"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
comment|// some tablets don't support tilt, check if it is possible,
name|qt_tablet_tilt_support
operator|=
name|ptrWTInfo
argument_list|(
name|WTI_DEVICES
argument_list|,
name|DVC_ORIENTATION
argument_list|,
operator|&
name|tpOri
argument_list|)
expr_stmt|;
if|if
condition|(
name|qt_tablet_tilt_support
condition|)
block|{
comment|// check for azimuth and altitude
name|qt_tablet_tilt_support
operator|=
name|tpOri
index|[
literal|0
index|]
operator|.
name|axResolution
operator|&&
name|tpOri
index|[
literal|1
index|]
operator|.
name|axResolution
expr_stmt|;
block|}
comment|// build our context from the default context
name|ptrWTInfo
argument_list|(
name|WTI_DEFSYSCTX
argument_list|,
literal|0
argument_list|,
operator|&
name|lcMine
argument_list|)
expr_stmt|;
comment|// Go for the raw coordinates, the tablet event will return good stuff
name|lcMine
operator|.
name|lcOptions
operator||=
name|CXO_MESSAGES
operator||
name|CXO_CSRMESSAGES
expr_stmt|;
name|lcMine
operator|.
name|lcPktData
operator|=
name|PACKETDATA
expr_stmt|;
name|lcMine
operator|.
name|lcPktMode
operator|=
name|PACKETMODE
expr_stmt|;
name|lcMine
operator|.
name|lcMoveMask
operator|=
name|PACKETDATA
expr_stmt|;
name|lcMine
operator|.
name|lcOutOrgX
operator|=
literal|0
expr_stmt|;
name|lcMine
operator|.
name|lcOutExtX
operator|=
name|lcMine
operator|.
name|lcInExtX
expr_stmt|;
name|lcMine
operator|.
name|lcOutOrgY
operator|=
literal|0
expr_stmt|;
name|lcMine
operator|.
name|lcOutExtY
operator|=
operator|-
name|lcMine
operator|.
name|lcInExtY
expr_stmt|;
name|qt_tablet_context
operator|=
name|ptrWTOpen
argument_list|(
name|qt_tablet_widget
operator|->
name|winId
argument_list|()
argument_list|,
operator|&
name|lcMine
argument_list|,
literal|true
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|TABLET_DEBUG
name|qDebug
argument_list|(
literal|"Tablet is %p"
argument_list|,
name|qt_tablet_context
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|qt_tablet_context
condition|)
block|{
ifdef|#
directive|ifdef
name|TABLET_DEBUG
name|qWarning
argument_list|(
literal|"QWidget: Failed to open the tablet"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
comment|// Set the size of the Packet Queue to the correct size...
name|int
name|currSize
init|=
name|ptrWTQueueSizeGet
argument_list|(
name|qt_tablet_context
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ptrWTQueueSizeSet
argument_list|(
name|qt_tablet_context
argument_list|,
name|QT_TABLET_NPACKETQSIZE
argument_list|)
condition|)
block|{
comment|// Ideally one might want to use a smaller
comment|// multiple, but for now, since we managed to destroy
comment|// the existing Q with the previous call, set it back
comment|// to the other size, which should work.  If not,
comment|// there will be trouble.
if|if
condition|(
operator|!
name|ptrWTQueueSizeSet
argument_list|(
name|qt_tablet_context
argument_list|,
name|currSize
argument_list|)
condition|)
block|{
name|Q_ASSERT_X
argument_list|(
literal|0
argument_list|,
literal|"Qt::Internal"
argument_list|,
literal|"There is no packet queue for"
literal|" the tablet. The tablet will not work"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|qt_tablet_cleanup
specifier|static
name|void
name|qt_tablet_cleanup
parameter_list|()
block|{
if|if
condition|(
name|ptrWTClose
condition|)
name|ptrWTClose
argument_list|(
name|qt_tablet_context
argument_list|)
expr_stmt|;
operator|delete
name|qt_tablet_widget
expr_stmt|;
name|qt_tablet_widget
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TABLETEVENT
end_comment
begin_function_decl
specifier|const
name|QString
name|qt_reg_winclass
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// defined in qapplication_win.cpp
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_function_decl
name|void
name|qt_olednd_unregister
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QOleDropTarget
modifier|*
name|dst
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// dnd_win
end_comment
begin_function_decl
name|QOleDropTarget
modifier|*
name|qt_olednd_register
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
specifier|extern
name|bool
name|qt_nograb
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|HRGN
name|qt_win_bitmapToRegion
parameter_list|(
specifier|const
name|QBitmap
modifier|&
name|bitmap
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|mouseGrb
specifier|static
name|QWidget
modifier|*
name|mouseGrb
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mouseGrbCur
specifier|static
name|QCursor
modifier|*
name|mouseGrbCur
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|keyboardGrb
specifier|static
name|QWidget
modifier|*
name|keyboardGrb
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|journalRec
specifier|static
name|HHOOK
name|journalRec
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_extern
extern|extern
literal|"C"
name|LRESULT
name|QT_WIN_CALLBACK
name|QtWndProc
parameter_list|(
name|HWND
parameter_list|,
name|UINT
parameter_list|,
name|WPARAM
parameter_list|,
name|LPARAM
parameter_list|)
function_decl|;
end_extern
begin_define
DECL|macro|XCOORD_MAX
define|#
directive|define
name|XCOORD_MAX
value|16383
end_define
begin_define
DECL|macro|WRECT_MAX
define|#
directive|define
name|WRECT_MAX
value|16383
end_define
begin_comment
comment|/*****************************************************************************   QWidget member functions  *****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_WS_WINCE
end_ifndef
begin_function
DECL|function|create_sys
name|void
name|QWidgetPrivate
operator|::
name|create_sys
parameter_list|(
name|WId
name|window
parameter_list|,
name|bool
name|initializeWindow
parameter_list|,
name|bool
name|destroyOldWindow
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
specifier|static
name|int
name|sw
init|=
operator|-
literal|1
decl_stmt|,
name|sh
init|=
operator|-
literal|1
decl_stmt|;
name|Qt
operator|::
name|WindowType
name|type
init|=
name|q
operator|->
name|windowType
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|data
operator|.
name|window_flags
decl_stmt|;
name|bool
name|topLevel
init|=
operator|(
name|flags
operator|&
name|Qt
operator|::
name|Window
operator|)
decl_stmt|;
name|bool
name|popup
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Popup
operator|)
decl_stmt|;
name|bool
name|dialog
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Dialog
operator|||
name|type
operator|==
name|Qt
operator|::
name|Sheet
operator|||
operator|(
name|flags
operator|&
name|Qt
operator|::
name|MSWindowsFixedSizeDialogHint
operator|)
operator|)
decl_stmt|;
name|bool
name|desktop
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Desktop
operator|)
decl_stmt|;
name|bool
name|tool
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Tool
operator|||
name|type
operator|==
name|Qt
operator|::
name|Drawer
operator|)
decl_stmt|;
name|HINSTANCE
name|appinst
init|=
name|qWinAppInst
argument_list|()
decl_stmt|;
name|HWND
name|parentw
decl_stmt|,
name|destroyw
init|=
literal|0
decl_stmt|;
name|WId
name|id
init|=
literal|0
decl_stmt|;
name|QString
name|windowClassName
init|=
name|qt_reg_winclass
argument_list|(
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|window
condition|)
comment|// always initialize
name|initializeWindow
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|popup
condition|)
name|flags
operator||=
name|Qt
operator|::
name|WindowStaysOnTopHint
expr_stmt|;
comment|// a popup stays on top
if|if
condition|(
name|sw
operator|<
literal|0
condition|)
block|{
comment|// get the (primary) screen size
name|sw
operator|=
name|GetSystemMetrics
argument_list|(
name|SM_CXSCREEN
argument_list|)
expr_stmt|;
name|sh
operator|=
name|GetSystemMetrics
argument_list|(
name|SM_CYSCREEN
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|desktop
operator|&&
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
block|{
comment|// desktop widget
name|popup
operator|=
literal|false
expr_stmt|;
comment|// force this flags off
name|data
operator|.
name|crect
operator|.
name|setRect
argument_list|(
name|GetSystemMetrics
argument_list|(
literal|76
comment|/* SM_XVIRTUALSCREEN  */
argument_list|)
argument_list|,
name|GetSystemMetrics
argument_list|(
literal|77
comment|/* SM_YVIRTUALSCREEN  */
argument_list|)
argument_list|,
name|GetSystemMetrics
argument_list|(
literal|78
comment|/* SM_CXVIRTUALSCREEN */
argument_list|)
argument_list|,
name|GetSystemMetrics
argument_list|(
literal|79
comment|/* SM_CYVIRTUALSCREEN */
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parentw
operator|=
name|q
operator|->
name|parentWidget
argument_list|()
condition|?
name|q
operator|->
name|parentWidget
argument_list|()
operator|->
name|effectiveWinId
argument_list|()
else|:
literal|0
expr_stmt|;
name|QString
name|title
decl_stmt|;
name|int
name|style
init|=
name|WS_CHILD
decl_stmt|;
name|int
name|exsty
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|window
condition|)
block|{
name|style
operator|=
name|GetWindowLong
argument_list|(
name|window
argument_list|,
name|GWL_STYLE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|style
condition|)
name|qErrnoWarning
argument_list|(
literal|"QWidget::create: GetWindowLong failed"
argument_list|)
expr_stmt|;
name|topLevel
operator|=
literal|false
expr_stmt|;
comment|// #### needed for some IE plugins??
block|}
elseif|else
if|if
condition|(
name|popup
operator|||
operator|(
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|)
operator|||
operator|(
name|type
operator|==
name|Qt
operator|::
name|SplashScreen
operator|)
condition|)
block|{
name|style
operator|=
name|WS_POPUP
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topLevel
operator|&&
operator|!
name|desktop
condition|)
block|{
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
condition|)
name|style
operator|=
name|WS_POPUP
expr_stmt|;
comment|// no border
elseif|else
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
condition|)
name|style
operator|=
name|WS_OVERLAPPED
expr_stmt|;
else|else
name|style
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|desktop
condition|)
block|{
comment|// if (!testAttribute(Qt::WA_PaintUnclipped))
comment|// ### Commented out for now as it causes some problems, but
comment|// this should be correct anyway, so dig some more into this
ifndef|#
directive|ifndef
name|Q_FLATTEN_EXPOSE
name|style
operator||=
name|WS_CLIPSIBLINGS
operator||
name|WS_CLIPCHILDREN
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|topLevel
condition|)
block|{
if|if
condition|(
operator|(
name|type
operator|==
name|Qt
operator|::
name|Window
operator|||
name|dialog
operator|||
name|tool
operator|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
condition|)
block|{
name|style
operator||=
name|WS_POPUP
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|MSWindowsFixedSizeDialogHint
operator|)
condition|)
name|style
operator||=
name|WS_THICKFRAME
expr_stmt|;
else|else
name|style
operator||=
name|WS_DLGFRAME
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
condition|)
name|style
operator||=
name|WS_CAPTION
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
name|style
operator||=
name|WS_SYSMENU
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
condition|)
name|style
operator||=
name|WS_MINIMIZEBOX
expr_stmt|;
if|if
condition|(
name|shouldShowMaximizeButton
argument_list|()
condition|)
name|style
operator||=
name|WS_MAXIMIZEBOX
expr_stmt|;
if|if
condition|(
name|tool
condition|)
name|exsty
operator||=
name|WS_EX_TOOLWINDOW
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
condition|)
name|exsty
operator||=
name|WS_EX_CONTEXTHELP
expr_stmt|;
block|}
else|else
block|{
name|exsty
operator||=
name|WS_EX_TOOLWINDOW
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
condition|)
block|{
name|title
operator|=
name|q
operator|->
name|isWindow
argument_list|()
condition|?
name|qAppName
argument_list|()
else|:
name|q
operator|->
name|objectName
argument_list|()
expr_stmt|;
block|}
comment|// The Qt::WA_WState_Created flag is checked by translateConfigEvent() in
comment|// qapplication_win.cpp. We switch it off temporarily to avoid move
comment|// and resize events during creationt
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|window
condition|)
block|{
comment|// override the old window
if|if
condition|(
name|destroyOldWindow
condition|)
name|destroyw
operator|=
name|data
operator|.
name|winid
expr_stmt|;
name|id
operator|=
name|window
expr_stmt|;
name|setWinId
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|LONG
name|res
init|=
name|SetWindowLong
argument_list|(
name|window
argument_list|,
name|GWL_STYLE
argument_list|,
name|style
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
condition|)
name|qErrnoWarning
argument_list|(
literal|"QWidget::create: Failed to set window style"
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|_WIN64
name|res
operator|=
name|SetWindowLongPtr
argument_list|(
name|window
argument_list|,
name|GWLP_WNDPROC
argument_list|,
operator|(
name|LONG_PTR
operator|)
name|QtWndProc
argument_list|)
expr_stmt|;
else|#
directive|else
name|res
operator|=
name|SetWindowLong
argument_list|(
name|window
argument_list|,
name|GWL_WNDPROC
argument_list|,
operator|(
name|LONG
operator|)
name|QtWndProc
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|res
condition|)
name|qErrnoWarning
argument_list|(
literal|"QWidget::create: Failed to set window procedure"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|desktop
condition|)
block|{
comment|// desktop widget
name|id
operator|=
name|GetDesktopWindow
argument_list|()
expr_stmt|;
comment|//         QWidget *otherDesktop = QWidget::find(id);        // is there another desktop?
comment|//         if (otherDesktop&& otherDesktop->testWFlags(Qt::WPaintDesktop)) {
comment|//             otherDesktop->d_func()->setWinId(0);        // remove id from widget mapper
comment|//             d->setWinId(id);                     // make sure otherDesktop is
comment|//             otherDesktop->d_func()->setWinId(id);       //   found first
comment|//         } else {
name|setWinId
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|//         }
block|}
elseif|else
if|if
condition|(
name|topLevel
condition|)
block|{
comment|// create top-level widget
if|if
condition|(
name|popup
condition|)
name|parentw
operator|=
literal|0
expr_stmt|;
specifier|const
name|bool
name|wasMoved
init|=
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Moved
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|wasMoved
condition|?
name|data
operator|.
name|crect
operator|.
name|left
argument_list|()
else|:
name|CW_USEDEFAULT
decl_stmt|;
name|int
name|y
init|=
name|wasMoved
condition|?
name|data
operator|.
name|crect
operator|.
name|top
argument_list|()
else|:
name|CW_USEDEFAULT
decl_stmt|;
name|int
name|w
init|=
name|CW_USEDEFAULT
decl_stmt|;
name|int
name|h
init|=
name|CW_USEDEFAULT
decl_stmt|;
comment|// Adjust for framestrut when needed
name|RECT
name|rect
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|bool
name|isVisibleOnScreen
init|=
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
decl_stmt|;
if|if
condition|(
name|isVisibleOnScreen
operator|&&
name|AdjustWindowRectEx
argument_list|(
operator|&
name|rect
argument_list|,
name|style
operator|&
operator|~
name|WS_OVERLAPPED
argument_list|,
name|FALSE
argument_list|,
name|exsty
argument_list|)
condition|)
block|{
name|QTLWExtra
modifier|*
name|td
init|=
name|maybeTopData
argument_list|()
decl_stmt|;
if|if
condition|(
name|wasMoved
operator|&&
operator|(
name|td
operator|&&
operator|!
name|td
operator|->
name|posFromMove
operator|)
condition|)
block|{
name|x
operator|=
name|data
operator|.
name|crect
operator|.
name|x
argument_list|()
operator|+
name|rect
operator|.
name|left
expr_stmt|;
name|y
operator|=
name|data
operator|.
name|crect
operator|.
name|y
argument_list|()
operator|+
name|rect
operator|.
name|top
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
condition|)
block|{
name|w
operator|=
name|data
operator|.
name|crect
operator|.
name|width
argument_list|()
operator|+
operator|(
name|rect
operator|.
name|right
operator|-
name|rect
operator|.
name|left
operator|)
expr_stmt|;
name|h
operator|=
name|data
operator|.
name|crect
operator|.
name|height
argument_list|()
operator|+
operator|(
name|rect
operator|.
name|bottom
operator|-
name|rect
operator|.
name|top
operator|)
expr_stmt|;
block|}
block|}
comment|//update position& initial size of POPUP window
if|if
condition|(
name|isVisibleOnScreen
operator|&&
name|topLevel
operator|&&
name|initializeWindow
operator|&&
operator|(
name|style
operator|&
name|WS_POPUP
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
condition|)
block|{
name|w
operator|=
name|sw
operator|/
literal|2
expr_stmt|;
name|h
operator|=
literal|4
operator|*
name|sh
operator|/
literal|10
expr_stmt|;
if|if
condition|(
name|extra
condition|)
block|{
name|int
name|dx
init|=
name|rect
operator|.
name|right
operator|-
name|rect
operator|.
name|left
decl_stmt|;
name|int
name|dy
init|=
name|rect
operator|.
name|bottom
operator|-
name|rect
operator|.
name|top
decl_stmt|;
name|w
operator|=
name|qMin
argument_list|(
name|w
argument_list|,
name|extra
operator|->
name|maxw
operator|+
name|dx
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMin
argument_list|(
name|h
argument_list|,
name|extra
operator|->
name|maxh
operator|+
name|dy
argument_list|)
expr_stmt|;
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|extra
operator|->
name|minw
operator|+
name|dx
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMax
argument_list|(
name|h
argument_list|,
name|extra
operator|->
name|minh
operator|+
name|dy
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|wasMoved
condition|)
block|{
name|x
operator|=
name|sw
operator|/
literal|2
operator|-
name|w
operator|/
literal|2
expr_stmt|;
name|y
operator|=
name|sh
operator|/
literal|2
operator|-
name|h
operator|/
literal|2
expr_stmt|;
block|}
block|}
name|id
operator|=
name|CreateWindowEx
argument_list|(
name|exsty
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|windowClassName
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|title
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|style
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|parentw
argument_list|,
name|NULL
argument_list|,
name|appinst
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|id
condition|)
name|qErrnoWarning
argument_list|(
literal|"QWidget::create: Failed to create window"
argument_list|)
expr_stmt|;
name|setWinId
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
operator|)
operator|||
operator|(
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|)
condition|)
block|{
name|SetWindowPos
argument_list|(
name|id
argument_list|,
name|HWND_TOPMOST
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_NOACTIVATE
operator||
name|SWP_NOMOVE
operator||
name|SWP_NOSIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowStaysOnBottomHint
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"QWidget: Incompatible window flags: the window can't be on top and on bottom at the same time"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowStaysOnBottomHint
condition|)
name|SetWindowPos
argument_list|(
name|id
argument_list|,
name|HWND_BOTTOM
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_NOACTIVATE
operator||
name|SWP_NOMOVE
operator||
name|SWP_NOSIZE
argument_list|)
expr_stmt|;
name|winUpdateIsOpaque
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
operator|||
name|paintOnScreen
argument_list|()
condition|)
block|{
comment|// create child widget
name|id
operator|=
name|CreateWindowEx
argument_list|(
name|exsty
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|windowClassName
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|title
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|style
argument_list|,
name|data
operator|.
name|crect
operator|.
name|left
argument_list|()
argument_list|,
name|data
operator|.
name|crect
operator|.
name|top
argument_list|()
argument_list|,
name|data
operator|.
name|crect
operator|.
name|width
argument_list|()
argument_list|,
name|data
operator|.
name|crect
operator|.
name|height
argument_list|()
argument_list|,
name|parentw
argument_list|,
name|NULL
argument_list|,
name|appinst
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|id
condition|)
name|qErrnoWarning
argument_list|(
literal|"QWidget::create: Failed to create window"
argument_list|)
expr_stmt|;
name|SetWindowPos
argument_list|(
name|id
argument_list|,
name|HWND_TOP
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_NOMOVE
operator||
name|SWP_NOSIZE
argument_list|)
expr_stmt|;
name|setWinId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|desktop
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topLevel
operator|&&
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
block|{
name|RECT
name|cr
decl_stmt|;
name|GetClientRect
argument_list|(
name|id
argument_list|,
operator|&
name|cr
argument_list|)
expr_stmt|;
comment|// one cannot trust cr.left and cr.top, use a correction POINT instead
name|POINT
name|pt
decl_stmt|;
name|pt
operator|.
name|x
operator|=
literal|0
expr_stmt|;
name|pt
operator|.
name|y
operator|=
literal|0
expr_stmt|;
name|ClientToScreen
argument_list|(
name|id
argument_list|,
operator|&
name|pt
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|crect
operator|.
name|width
argument_list|()
operator|==
literal|0
operator|||
name|data
operator|.
name|crect
operator|.
name|height
argument_list|()
operator|==
literal|0
condition|)
block|{
name|data
operator|.
name|crect
operator|=
name|QRect
argument_list|(
name|pt
operator|.
name|x
argument_list|,
name|pt
operator|.
name|y
argument_list|,
name|data
operator|.
name|crect
operator|.
name|width
argument_list|()
argument_list|,
name|data
operator|.
name|crect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|data
operator|.
name|crect
operator|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
name|pt
operator|.
name|x
argument_list|,
name|pt
operator|.
name|y
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|pt
operator|.
name|x
operator|+
name|cr
operator|.
name|right
operator|-
literal|1
argument_list|,
name|pt
operator|.
name|y
operator|+
name|cr
operator|.
name|bottom
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|.
name|fstrut_dirty
condition|)
block|{
comment|// be nice to activeqt
name|updateFrameStrut
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|topLevel
condition|)
block|{
if|if
condition|(
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|CustomizeWindowHint
operator|&&
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
condition|)
block|{
name|HMENU
name|systemMenu
init|=
name|GetSystemMenu
argument_list|(
operator|(
name|HWND
operator|)
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|FALSE
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|WindowCloseButtonHint
condition|)
name|EnableMenuItem
argument_list|(
name|systemMenu
argument_list|,
name|SC_CLOSE
argument_list|,
name|MF_BYCOMMAND
operator||
name|MF_ENABLED
argument_list|)
expr_stmt|;
else|else
name|EnableMenuItem
argument_list|(
name|systemMenu
argument_list|,
name|SC_CLOSE
argument_list|,
name|MF_BYCOMMAND
operator||
name|MF_GRAYED
argument_list|)
expr_stmt|;
block|}
block|}
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
expr_stmt|;
comment|// accept move/resize events
name|hd
operator|=
literal|0
expr_stmt|;
comment|// no display context
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_AcceptTouchEvents
argument_list|)
condition|)
name|registerTouchWindow
argument_list|()
expr_stmt|;
if|if
condition|(
name|window
condition|)
block|{
comment|// got window from outside
if|if
condition|(
name|IsWindowVisible
argument_list|(
name|window
argument_list|)
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|)
expr_stmt|;
else|else
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extra
operator|&&
operator|!
name|extra
operator|->
name|mask
operator|.
name|isEmpty
argument_list|()
condition|)
name|setMask_sys
argument_list|(
name|extra
operator|->
name|mask
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_NON_COMMERCIAL
argument_list|)
name|QT_NC_WIDGET_CREATE
endif|#
directive|endif
if|if
condition|(
name|q
operator|->
name|hasFocus
argument_list|()
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
condition|)
name|q
operator|->
name|inputContext
argument_list|()
operator|->
name|setFocusWidget
argument_list|(
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|destroyw
condition|)
block|{
name|DestroyWindow
argument_list|(
name|destroyw
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
if|if
condition|(
name|q
operator|!=
name|qt_tablet_widget
operator|&&
name|QWidgetPrivate
operator|::
name|mapper
condition|)
name|qt_tablet_init
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_TABLETEVENT
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DropSiteRegistered
argument_list|)
condition|)
name|registerDropSite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|maybeTopData
argument_list|()
operator|&&
name|maybeTopData
argument_list|()
operator|->
name|opacity
operator|!=
literal|255
condition|)
name|q
operator|->
name|setWindowOpacity
argument_list|(
name|maybeTopData
argument_list|()
operator|->
name|opacity
operator|/
literal|255.
argument_list|)
expr_stmt|;
if|if
condition|(
name|topLevel
operator|&&
operator|(
name|data
operator|.
name|crect
operator|.
name|width
argument_list|()
operator|==
literal|0
operator|||
name|data
operator|.
name|crect
operator|.
name|height
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|topLevel
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
name|ShowWindow
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|SW_SHOW
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//Q_WS_WINCE
end_comment
begin_function
DECL|function|destroy
name|void
name|QWidget
operator|::
name|destroy
parameter_list|(
name|bool
name|destroyWindow
parameter_list|,
name|bool
name|destroySubWindows
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|aboutToDestroy
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isWindow
argument_list|()
operator|&&
name|parentWidget
argument_list|()
condition|)
name|parentWidget
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateBuffer
argument_list|(
name|d
operator|->
name|effectiveRectFor
argument_list|(
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|deactivateWidgetCleanup
argument_list|()
expr_stmt|;
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
block|{
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
comment|// destroy all widget children
specifier|register
name|QObject
modifier|*
name|obj
init|=
name|d
operator|->
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|->
name|isWidgetType
argument_list|()
condition|)
operator|(
operator|(
name|QWidget
operator|*
operator|)
name|obj
operator|)
operator|->
name|destroy
argument_list|(
name|destroySubWindows
argument_list|,
name|destroySubWindows
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mouseGrb
operator|==
name|this
condition|)
name|releaseMouse
argument_list|()
expr_stmt|;
if|if
condition|(
name|keyboardGrb
operator|==
name|this
condition|)
name|releaseKeyboard
argument_list|()
expr_stmt|;
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_ShowModal
argument_list|)
condition|)
comment|// just be sure we leave modal
name|QApplicationPrivate
operator|::
name|leaveModal
argument_list|(
name|this
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
operator|)
condition|)
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|closePopup
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|destroyWindow
operator|&&
operator|!
operator|(
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
operator|&&
name|internalWinId
argument_list|()
condition|)
block|{
name|DestroyWindow
argument_list|(
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|Q_WS_WINCE
if|if
condition|(
name|destroyWindow
operator|&&
operator|(
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
operator|&&
operator|!
name|GetDesktopWindow
argument_list|()
condition|)
block|{
name|DestroyWindow
argument_list|(
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|QT_TRY
block|{
name|d
operator|->
name|setWinId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|const std::bad_alloc&
argument_list|)
block|{
comment|// swallow - destructors must not throw
block|}
block|}
block|}
end_function
begin_function
DECL|function|reparentChildren
name|void
name|QWidgetPrivate
operator|::
name|reparentChildren
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|QObjectList
name|chlist
init|=
name|q
operator|->
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chlist
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
comment|// reparent children
name|QObject
modifier|*
name|obj
init|=
name|chlist
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|->
name|isWidgetType
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
operator|(
name|QWidget
operator|*
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|(
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
operator|)
condition|)
block|{
empty_stmt|;
block|}
elseif|else
if|if
condition|(
name|w
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|bool
name|showIt
init|=
name|w
operator|->
name|isVisible
argument_list|()
decl_stmt|;
name|QPoint
name|old_pos
init|=
name|w
operator|->
name|pos
argument_list|()
decl_stmt|;
name|w
operator|->
name|setParent
argument_list|(
name|q
argument_list|,
name|w
operator|->
name|windowFlags
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|->
name|move
argument_list|(
name|old_pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|showIt
condition|)
name|w
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateBuffer
argument_list|(
name|w
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|SetParent
argument_list|(
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
name|q
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|reparentChildren
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|setParent_sys
name|void
name|QWidgetPrivate
operator|::
name|setParent_sys
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|f
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|bool
name|wasCreated
init|=
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
operator|&&
name|q
operator|->
name|parentWidget
argument_list|()
operator|&&
name|parent
operator|!=
name|q
operator|->
name|parentWidget
argument_list|()
condition|)
name|q
operator|->
name|parentWidget
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateBuffer
argument_list|(
name|effectiveRectFor
argument_list|(
name|q
operator|->
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|WId
name|old_winid
init|=
name|data
operator|.
name|winid
decl_stmt|;
comment|// hide and reparent our own window away. Otherwise we might get
comment|// destroyed when emitting the child remove event below. See QWorkspace.
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
operator|&&
name|data
operator|.
name|winid
condition|)
block|{
name|ShowWindow
argument_list|(
name|data
operator|.
name|winid
argument_list|,
name|SW_HIDE
argument_list|)
expr_stmt|;
name|SetParent
argument_list|(
name|data
operator|.
name|winid
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|bool
name|dropSiteWasRegistered
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DropSiteRegistered
argument_list|)
condition|)
block|{
name|dropSiteWasRegistered
operator|=
literal|true
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DropSiteRegistered
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// ole dnd unregister (we will register again below)
block|}
if|if
condition|(
operator|(
name|q
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
name|old_winid
operator|=
literal|0
expr_stmt|;
name|setWinId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QObjectPrivate
operator|::
name|setParent_helper
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|bool
name|explicitlyHidden
init|=
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|)
decl_stmt|;
name|data
operator|.
name|window_flags
operator|=
name|f
expr_stmt|;
name|data
operator|.
name|fstrut_dirty
operator|=
literal|true
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|adjustFlags
argument_list|(
name|data
operator|.
name|window_flags
argument_list|,
name|q
argument_list|)
expr_stmt|;
comment|// keep compatibility with previous versions, we need to preserve the created state
comment|// (but we recreate the winId for the widget being reparented, again for compatibility)
if|if
condition|(
name|wasCreated
operator|||
operator|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
name|parent
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
operator|)
condition|)
name|createWinId
argument_list|()
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
operator|||
operator|(
operator|!
name|parent
operator|||
name|parent
operator|->
name|isVisible
argument_list|()
operator|)
operator|||
name|explicitlyHidden
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|,
name|explicitlyHidden
argument_list|)
expr_stmt|;
if|if
condition|(
name|wasCreated
condition|)
block|{
name|reparentChildren
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|extra
operator|&&
operator|!
name|extra
operator|->
name|mask
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QRegion
name|r
init|=
name|extra
operator|->
name|mask
decl_stmt|;
name|extra
operator|->
name|mask
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|q
operator|->
name|setMask
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extra
operator|&&
name|extra
operator|->
name|topextra
operator|&&
operator|!
name|extra
operator|->
name|topextra
operator|->
name|caption
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setWindowIcon_sys
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setWindowTitle_helper
argument_list|(
name|extra
operator|->
name|topextra
operator|->
name|caption
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|old_winid
condition|)
name|DestroyWindow
argument_list|(
name|old_winid
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_AcceptDrops
argument_list|)
operator|||
name|dropSiteWasRegistered
operator|||
operator|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
name|q
operator|->
name|parentWidget
argument_list|()
operator|&&
name|q
operator|->
name|parentWidget
argument_list|()
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DropSiteRegistered
argument_list|)
operator|)
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DropSiteRegistered
argument_list|,
literal|true
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_WINCE
comment|// Show borderless toplevel windows in tasklist& NavBar
if|if
condition|(
operator|!
name|parent
condition|)
block|{
name|QString
name|txt
init|=
name|q
operator|->
name|windowTitle
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|qAppName
argument_list|()
else|:
name|q
operator|->
name|windowTitle
argument_list|()
decl_stmt|;
name|SetWindowText
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|txt
operator|.
name|utf16
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mapToGlobal
name|QPoint
name|QWidget
operator|::
name|mapToGlobal
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|parentWindow
init|=
name|window
argument_list|()
decl_stmt|;
name|QWExtra
modifier|*
name|extra
init|=
name|parentWindow
operator|->
name|d_func
argument_list|()
operator|->
name|extra
decl_stmt|;
if|if
condition|(
operator|!
name|isVisible
argument_list|()
operator|||
name|parentWindow
operator|->
name|isMinimized
argument_list|()
operator|||
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
operator|||
operator|!
name|internalWinId
argument_list|()
operator|||
operator|(
name|extra
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
operator|&&
name|extra
operator|->
name|proxyWidget
endif|#
directive|endif
comment|//QT_NO_GRAPHICSVIEW
operator|)
condition|)
block|{
if|if
condition|(
name|extra
operator|&&
name|extra
operator|->
name|topextra
operator|&&
name|extra
operator|->
name|topextra
operator|->
name|embedded
condition|)
block|{
name|QPoint
name|pt
init|=
name|mapTo
argument_list|(
name|parentWindow
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|POINT
name|p
init|=
block|{
name|pt
operator|.
name|x
argument_list|()
block|,
name|pt
operator|.
name|y
argument_list|()
block|}
decl_stmt|;
name|ClientToScreen
argument_list|(
name|parentWindow
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
operator|&
name|p
argument_list|)
expr_stmt|;
return|return
name|QPoint
argument_list|(
name|p
operator|.
name|x
argument_list|,
name|p
operator|.
name|y
argument_list|)
return|;
block|}
else|else
block|{
name|QPoint
name|toGlobal
init|=
name|mapTo
argument_list|(
name|parentWindow
argument_list|,
name|pos
argument_list|)
operator|+
name|parentWindow
operator|->
name|pos
argument_list|()
decl_stmt|;
comment|// Adjust for window decorations
name|toGlobal
operator|+=
name|parentWindow
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
operator|-
name|parentWindow
operator|->
name|frameGeometry
argument_list|()
operator|.
name|topLeft
argument_list|()
expr_stmt|;
return|return
name|toGlobal
return|;
block|}
block|}
name|POINT
name|p
decl_stmt|;
name|QPoint
name|tmp
init|=
name|d
operator|->
name|mapToWS
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|p
operator|.
name|x
operator|=
name|tmp
operator|.
name|x
argument_list|()
expr_stmt|;
name|p
operator|.
name|y
operator|=
name|tmp
operator|.
name|y
argument_list|()
expr_stmt|;
name|ClientToScreen
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
operator|&
name|p
argument_list|)
expr_stmt|;
return|return
name|QPoint
argument_list|(
name|p
operator|.
name|x
argument_list|,
name|p
operator|.
name|y
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mapFromGlobal
name|QPoint
name|QWidget
operator|::
name|mapFromGlobal
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|parentWindow
init|=
name|window
argument_list|()
decl_stmt|;
name|QWExtra
modifier|*
name|extra
init|=
name|parentWindow
operator|->
name|d_func
argument_list|()
operator|->
name|extra
decl_stmt|;
if|if
condition|(
operator|!
name|isVisible
argument_list|()
operator|||
name|parentWindow
operator|->
name|isMinimized
argument_list|()
operator|||
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
operator|||
operator|!
name|internalWinId
argument_list|()
operator|||
operator|(
name|extra
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
operator|&&
name|extra
operator|->
name|proxyWidget
endif|#
directive|endif
comment|//QT_NO_GRAPHICSVIEW
operator|)
condition|)
block|{
if|if
condition|(
name|extra
operator|&&
name|extra
operator|->
name|topextra
operator|&&
name|extra
operator|->
name|topextra
operator|->
name|embedded
condition|)
block|{
name|POINT
name|p
init|=
block|{
name|pos
operator|.
name|x
argument_list|()
block|,
name|pos
operator|.
name|y
argument_list|()
block|}
decl_stmt|;
name|ScreenToClient
argument_list|(
name|parentWindow
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
operator|&
name|p
argument_list|)
expr_stmt|;
return|return
name|mapFrom
argument_list|(
name|parentWindow
argument_list|,
name|QPoint
argument_list|(
name|p
operator|.
name|x
argument_list|,
name|p
operator|.
name|y
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|QPoint
name|fromGlobal
init|=
name|mapFrom
argument_list|(
name|parentWindow
argument_list|,
name|pos
operator|-
name|parentWindow
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
comment|// Adjust for window decorations
name|fromGlobal
operator|-=
name|parentWindow
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
operator|-
name|parentWindow
operator|->
name|frameGeometry
argument_list|()
operator|.
name|topLeft
argument_list|()
expr_stmt|;
return|return
name|fromGlobal
return|;
block|}
block|}
name|POINT
name|p
decl_stmt|;
name|p
operator|.
name|x
operator|=
name|pos
operator|.
name|x
argument_list|()
expr_stmt|;
name|p
operator|.
name|y
operator|=
name|pos
operator|.
name|y
argument_list|()
expr_stmt|;
name|ScreenToClient
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
operator|&
name|p
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|mapFromWS
argument_list|(
name|QPoint
argument_list|(
name|p
operator|.
name|x
argument_list|,
name|p
operator|.
name|y
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|updateSystemBackground
name|void
name|QWidgetPrivate
operator|::
name|updateSystemBackground
parameter_list|()
block|{}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|setCursor_sys
name|void
name|QWidgetPrivate
operator|::
name|setCursor_sys
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|qt_win_set_cursor
argument_list|(
name|q
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unsetCursor_sys
name|void
name|QWidgetPrivate
operator|::
name|unsetCursor_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|qt_win_set_cursor
argument_list|(
name|q
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setWindowTitle_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowTitle_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|caption
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
condition|)
return|return;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|SetWindowText
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|caption
operator|.
name|utf16
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_createIcon
name|HICON
name|qt_createIcon
parameter_list|(
name|QIcon
name|icon
parameter_list|,
name|int
name|xSize
parameter_list|,
name|int
name|ySize
parameter_list|,
name|QPixmap
modifier|*
modifier|*
name|cache
parameter_list|)
block|{
name|HICON
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// valid icon
name|QSize
name|size
init|=
name|icon
operator|.
name|actualSize
argument_list|(
name|QSize
argument_list|(
name|xSize
argument_list|,
name|ySize
argument_list|)
argument_list|)
decl_stmt|;
name|QPixmap
name|pm
init|=
name|icon
operator|.
name|pixmap
argument_list|(
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|pm
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|0
return|;
name|result
operator|=
name|pm
operator|.
name|toWinHICON
argument_list|()
expr_stmt|;
if|if
condition|(
name|cache
condition|)
block|{
operator|delete
operator|*
name|cache
expr_stmt|;
operator|*
name|cache
operator|=
operator|new
name|QPixmap
argument_list|(
name|pm
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|setWindowIcon_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowIcon_sys
parameter_list|(
name|bool
name|forceReset
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
operator|||
operator|!
name|q
operator|->
name|isWindow
argument_list|()
condition|)
return|return;
name|QTLWExtra
modifier|*
name|x
init|=
name|topData
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|->
name|iconPixmap
operator|&&
operator|!
name|forceReset
condition|)
comment|// already been set
return|return;
if|if
condition|(
name|x
operator|->
name|winIconBig
condition|)
block|{
name|DestroyIcon
argument_list|(
name|x
operator|->
name|winIconBig
argument_list|)
expr_stmt|;
name|x
operator|->
name|winIconBig
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|x
operator|->
name|winIconSmall
condition|)
block|{
name|DestroyIcon
argument_list|(
name|x
operator|->
name|winIconSmall
argument_list|)
expr_stmt|;
name|x
operator|->
name|winIconSmall
operator|=
literal|0
expr_stmt|;
block|}
name|x
operator|->
name|winIconSmall
operator|=
name|qt_createIcon
argument_list|(
name|q
operator|->
name|windowIcon
argument_list|()
argument_list|,
name|GetSystemMetrics
argument_list|(
name|SM_CXSMICON
argument_list|)
argument_list|,
name|GetSystemMetrics
argument_list|(
name|SM_CYSMICON
argument_list|)
argument_list|,
operator|&
operator|(
name|x
operator|->
name|iconPixmap
operator|)
argument_list|)
expr_stmt|;
name|x
operator|->
name|winIconBig
operator|=
name|qt_createIcon
argument_list|(
name|q
operator|->
name|windowIcon
argument_list|()
argument_list|,
name|GetSystemMetrics
argument_list|(
name|SM_CXICON
argument_list|)
argument_list|,
name|GetSystemMetrics
argument_list|(
name|SM_CYICON
argument_list|)
argument_list|,
operator|&
operator|(
name|x
operator|->
name|iconPixmap
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|->
name|winIconBig
condition|)
block|{
name|SendMessage
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|WM_SETICON
argument_list|,
literal|0
comment|/* ICON_SMALL */
argument_list|,
operator|(
name|LPARAM
operator|)
name|x
operator|->
name|winIconSmall
argument_list|)
expr_stmt|;
name|SendMessage
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|WM_SETICON
argument_list|,
literal|1
comment|/* ICON_BIG */
argument_list|,
operator|(
name|LPARAM
operator|)
name|x
operator|->
name|winIconBig
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SendMessage
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|WM_SETICON
argument_list|,
literal|0
comment|/* ICON_SMALL */
argument_list|,
operator|(
name|LPARAM
operator|)
name|x
operator|->
name|winIconSmall
argument_list|)
expr_stmt|;
name|SendMessage
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|WM_SETICON
argument_list|,
literal|1
comment|/* ICON_BIG */
argument_list|,
operator|(
name|LPARAM
operator|)
name|x
operator|->
name|winIconSmall
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setWindowIconText_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowIconText_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|iconText
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|iconText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_grab_cursor
name|QCursor
modifier|*
name|qt_grab_cursor
parameter_list|()
block|{
return|return
name|mouseGrbCur
return|;
block|}
end_function
begin_comment
comment|// The procedure does nothing, but is required for mousegrabbing to work
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_WS_WINCE
end_ifndef
begin_function
DECL|function|qJournalRecordProc
name|LRESULT
name|QT_WIN_CALLBACK
name|qJournalRecordProc
parameter_list|(
name|int
name|nCode
parameter_list|,
name|WPARAM
name|wParam
parameter_list|,
name|LPARAM
name|lParam
parameter_list|)
block|{
return|return
name|CallNextHookEx
argument_list|(
name|journalRec
argument_list|,
name|nCode
argument_list|,
name|wParam
argument_list|,
name|lParam
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//Q_WS_WINCE
end_comment
begin_comment
comment|/* Works only as long as pointer is inside the application's window,    which is good enough for QDockWidget.     Doesn't call SetWindowsHookEx() - this function causes a system-wide    freeze if any other app on the system installs a hook and fails to    process events. */
end_comment
begin_function
DECL|function|grabMouseWhileInWindow
name|void
name|QWidgetPrivate
operator|::
name|grabMouseWhileInWindow
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qt_nograb
argument_list|()
condition|)
block|{
if|if
condition|(
name|mouseGrb
condition|)
name|mouseGrb
operator|->
name|releaseMouse
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|SetCapture
argument_list|(
name|q
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
expr_stmt|;
name|mouseGrb
operator|=
name|q
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|mouseGrbCur
operator|=
operator|new
name|QCursor
argument_list|(
name|mouseGrb
operator|->
name|cursor
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|Q_WS_WINCE
end_ifndef
begin_function
DECL|function|grabMouse
name|void
name|QWidget
operator|::
name|grabMouse
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qt_nograb
argument_list|()
condition|)
block|{
if|if
condition|(
name|mouseGrb
condition|)
name|mouseGrb
operator|->
name|releaseMouse
argument_list|()
expr_stmt|;
name|journalRec
operator|=
name|SetWindowsHookEx
argument_list|(
name|WH_JOURNALRECORD
argument_list|,
operator|(
name|HOOKPROC
operator|)
name|qJournalRecordProc
argument_list|,
name|GetModuleHandle
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|SetCapture
argument_list|(
name|effectiveWinId
argument_list|()
argument_list|)
expr_stmt|;
name|mouseGrb
operator|=
name|this
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|mouseGrbCur
operator|=
operator|new
name|QCursor
argument_list|(
name|mouseGrb
operator|->
name|cursor
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|grabMouse
name|void
name|QWidget
operator|::
name|grabMouse
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|)
block|{
if|if
condition|(
operator|!
name|qt_nograb
argument_list|()
condition|)
block|{
if|if
condition|(
name|mouseGrb
condition|)
name|mouseGrb
operator|->
name|releaseMouse
argument_list|()
expr_stmt|;
name|journalRec
operator|=
name|SetWindowsHookEx
argument_list|(
name|WH_JOURNALRECORD
argument_list|,
operator|(
name|HOOKPROC
operator|)
name|qJournalRecordProc
argument_list|,
name|GetModuleHandle
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|SetCapture
argument_list|(
name|effectiveWinId
argument_list|()
argument_list|)
expr_stmt|;
name|mouseGrbCur
operator|=
operator|new
name|QCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|SetCursor
argument_list|(
name|mouseGrbCur
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|mouseGrb
operator|=
name|this
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|releaseMouse
name|void
name|QWidget
operator|::
name|releaseMouse
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qt_nograb
argument_list|()
operator|&&
name|mouseGrb
operator|==
name|this
condition|)
block|{
name|ReleaseCapture
argument_list|()
expr_stmt|;
if|if
condition|(
name|journalRec
condition|)
block|{
name|UnhookWindowsHookEx
argument_list|(
name|journalRec
argument_list|)
expr_stmt|;
name|journalRec
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|mouseGrbCur
condition|)
block|{
operator|delete
name|mouseGrbCur
expr_stmt|;
name|mouseGrbCur
operator|=
literal|0
expr_stmt|;
block|}
name|mouseGrb
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|grabKeyboard
name|void
name|QWidget
operator|::
name|grabKeyboard
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qt_nograb
argument_list|()
condition|)
block|{
if|if
condition|(
name|keyboardGrb
condition|)
name|keyboardGrb
operator|->
name|releaseKeyboard
argument_list|()
expr_stmt|;
name|keyboardGrb
operator|=
name|this
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|releaseKeyboard
name|void
name|QWidget
operator|::
name|releaseKeyboard
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qt_nograb
argument_list|()
operator|&&
name|keyboardGrb
operator|==
name|this
condition|)
name|keyboardGrb
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseGrabber
name|QWidget
modifier|*
name|QWidget
operator|::
name|mouseGrabber
parameter_list|()
block|{
return|return
name|mouseGrb
return|;
block|}
end_function
begin_function
DECL|function|keyboardGrabber
name|QWidget
modifier|*
name|QWidget
operator|::
name|keyboardGrabber
parameter_list|()
block|{
return|return
name|keyboardGrb
return|;
block|}
end_function
begin_function
DECL|function|activateWindow
name|void
name|QWidget
operator|::
name|activateWindow
parameter_list|()
block|{
name|window
argument_list|()
operator|->
name|createWinId
argument_list|()
expr_stmt|;
name|SetForegroundWindow
argument_list|(
name|window
argument_list|()
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|Q_WS_WINCE
end_ifndef
begin_function
DECL|function|setWindowState
name|void
name|QWidget
operator|::
name|setWindowState
parameter_list|(
name|Qt
operator|::
name|WindowStates
name|newstate
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|WindowStates
name|oldstate
init|=
name|windowState
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldstate
operator|==
name|newstate
condition|)
return|return;
name|int
name|max
init|=
name|SW_MAXIMIZE
decl_stmt|;
name|int
name|min
init|=
name|SW_MINIMIZE
decl_stmt|;
name|int
name|normal
init|=
name|SW_SHOWNOACTIVATE
decl_stmt|;
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowActive
condition|)
block|{
name|max
operator|=
name|SW_SHOWMAXIMIZED
expr_stmt|;
name|min
operator|=
name|SW_SHOWMINIMIZED
expr_stmt|;
name|normal
operator|=
name|SW_SHOWNORMAL
expr_stmt|;
block|}
if|if
condition|(
name|isWindow
argument_list|()
condition|)
block|{
name|createWinId
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure the initial size is valid, since we store it as normalGeometry below.
if|if
condition|(
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
operator|&&
operator|!
name|isVisible
argument_list|()
condition|)
name|adjustSize
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|oldstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
operator|!=
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|)
block|{
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|&&
operator|!
operator|(
name|oldstate
operator|&
name|Qt
operator|::
name|WindowFullScreen
operator|)
condition|)
name|d
operator|->
name|topData
argument_list|()
operator|->
name|normalGeometry
operator|=
name|geometry
argument_list|()
expr_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
operator|&&
operator|!
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
condition|)
block|{
name|ShowWindow
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|?
name|max
else|:
name|normal
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowFullScreen
operator|)
condition|)
block|{
name|QRect
name|r
init|=
name|d
operator|->
name|topData
argument_list|()
operator|->
name|normalGeometry
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
operator|&&
name|r
operator|.
name|width
argument_list|()
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|pos
argument_list|()
operator|!=
name|r
operator|.
name|topLeft
argument_list|()
operator|||
name|size
argument_list|()
operator|!=
name|r
operator|.
name|size
argument_list|()
condition|)
block|{
name|d
operator|->
name|topData
argument_list|()
operator|->
name|normalGeometry
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|setGeometry
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|d
operator|->
name|updateFrameStrut
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|(
name|oldstate
operator|&
name|Qt
operator|::
name|WindowFullScreen
operator|)
operator|!=
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowFullScreen
operator|)
condition|)
block|{
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowFullScreen
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|topData
argument_list|()
operator|->
name|normalGeometry
operator|.
name|width
argument_list|()
operator|<
literal|0
operator|&&
operator|!
operator|(
name|oldstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|)
name|d
operator|->
name|topData
argument_list|()
operator|->
name|normalGeometry
operator|=
name|geometry
argument_list|()
expr_stmt|;
name|d
operator|->
name|topData
argument_list|()
operator|->
name|savedFlags
operator|=
name|Qt
operator|::
name|WindowFlags
argument_list|(
name|GetWindowLong
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
name|GWL_STYLE
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_FLATTEN_EXPOSE
name|UINT
name|style
init|=
name|WS_CLIPCHILDREN
operator||
name|WS_CLIPSIBLINGS
operator||
name|WS_POPUP
decl_stmt|;
else|#
directive|else
name|UINT
name|style
init|=
name|WS_POPUP
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|ulong
argument_list|(
name|d
operator|->
name|topData
argument_list|()
operator|->
name|savedFlags
argument_list|)
operator|&
name|WS_SYSMENU
condition|)
name|style
operator||=
name|WS_SYSMENU
expr_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
condition|)
name|style
operator||=
name|WS_VISIBLE
expr_stmt|;
name|SetWindowLong
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
name|GWL_STYLE
argument_list|,
name|style
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|UINT
name|swpf
init|=
name|SWP_FRAMECHANGED
decl_stmt|;
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowActive
condition|)
name|swpf
operator||=
name|SWP_NOACTIVATE
expr_stmt|;
name|SetWindowPos
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
name|HWND_TOP
argument_list|,
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|,
name|swpf
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateFrameStrut
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|UINT
name|style
init|=
name|d
operator|->
name|topData
argument_list|()
operator|->
name|savedFlags
decl_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
condition|)
name|style
operator||=
name|WS_VISIBLE
expr_stmt|;
name|SetWindowLong
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
name|GWL_STYLE
argument_list|,
name|style
argument_list|)
expr_stmt|;
name|UINT
name|swpf
init|=
name|SWP_FRAMECHANGED
operator||
name|SWP_NOZORDER
operator||
name|SWP_NOSIZE
operator||
name|SWP_NOMOVE
decl_stmt|;
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowActive
condition|)
name|swpf
operator||=
name|SWP_NOACTIVATE
expr_stmt|;
name|SetWindowPos
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|swpf
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateFrameStrut
argument_list|()
expr_stmt|;
comment|// preserve maximized state
if|if
condition|(
name|isVisible
argument_list|()
condition|)
name|ShowWindow
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|?
name|max
else|:
name|normal
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|)
block|{
name|QRect
name|r
init|=
name|d
operator|->
name|topData
argument_list|()
operator|->
name|normalGeometry
decl_stmt|;
name|d
operator|->
name|topData
argument_list|()
operator|->
name|normalGeometry
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|isValid
argument_list|()
condition|)
name|setGeometry
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|(
name|oldstate
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
operator|!=
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
condition|)
block|{
if|if
condition|(
name|isVisible
argument_list|()
condition|)
name|ShowWindow
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
condition|?
name|min
else|:
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|?
name|max
else|:
name|normal
argument_list|)
expr_stmt|;
block|}
block|}
name|data
operator|->
name|window_state
operator|=
name|newstate
expr_stmt|;
name|QWindowStateChangeEvent
name|e
argument_list|(
name|oldstate
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|this
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//Q_WS_WINCE
end_comment
begin_comment
comment|/*   \internal   Platform-specific part of QWidget::hide(). */
end_comment
begin_function
DECL|function|hide_sys
name|void
name|QWidgetPrivate
operator|::
name|hide_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|deactivateWidgetCleanup
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_WINCE
if|if
condition|(
operator|!
name|qt_wince_is_mobile
argument_list|()
operator|&&
name|q
operator|->
name|isFullScreen
argument_list|()
condition|)
block|{
name|HWND
name|handle
init|=
name|FindWindow
argument_list|(
literal|L"HHTaskBar"
argument_list|,
literal|L""
argument_list|)
decl_stmt|;
if|if
condition|(
name|handle
condition|)
block|{
name|ShowWindow
argument_list|(
name|handle
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|EnableWindow
argument_list|(
name|handle
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
if|if
condition|(
name|q
operator|->
name|windowFlags
argument_list|()
operator|!=
name|Qt
operator|::
name|Desktop
condition|)
block|{
if|if
condition|(
operator|(
name|q
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|Popup
operator|)
operator|&&
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
name|ShowWindow
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|SW_HIDE
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
name|SetWindowPos
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_HIDEWINDOW
operator||
name|SWP_NOSIZE
operator||
name|SWP_NOMOVE
operator||
name|SWP_NOZORDER
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
if|if
condition|(
name|QWidgetBackingStore
modifier|*
name|bs
init|=
name|maybeBackingStore
argument_list|()
condition|)
name|bs
operator|->
name|releaseBuffer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   \internal   Platform-specific part of QWidget::show(). */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_WS_WINCE
end_ifndef
begin_function
DECL|function|show_sys
name|void
name|QWidgetPrivate
operator|::
name|show_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_NON_COMMERCIAL
argument_list|)
name|QT_NC_SHOW_WINDOW
endif|#
directive|endif
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|)
condition|)
return|return;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
block|{
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|Window
condition|)
block|{
name|QTLWExtra
modifier|*
name|extra
init|=
name|topData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|extra
operator|->
name|hotkeyRegistered
condition|)
block|{
comment|// Try to set the hotkey using information from STARTUPINFO
name|STARTUPINFO
name|startupInfo
decl_stmt|;
name|GetStartupInfo
argument_list|(
operator|&
name|startupInfo
argument_list|)
expr_stmt|;
comment|// If STARTF_USEHOTKEY is set, hStdInput is the virtual keycode
if|if
condition|(
name|startupInfo
operator|.
name|dwFlags
operator|&
literal|0x00000200
condition|)
block|{
name|WPARAM
name|hotKey
init|=
operator|(
name|WPARAM
operator|)
name|startupInfo
operator|.
name|hStdInput
decl_stmt|;
name|SendMessage
argument_list|(
name|data
operator|.
name|winid
argument_list|,
name|WM_SETHOTKEY
argument_list|,
name|hotKey
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|extra
operator|->
name|hotkeyRegistered
operator|=
literal|1
expr_stmt|;
block|}
block|}
name|int
name|sm
init|=
name|SW_SHOWNORMAL
decl_stmt|;
name|bool
name|fakedMaximize
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|isMinimized
argument_list|()
condition|)
block|{
name|sm
operator|=
name|SW_SHOWMINIMIZED
expr_stmt|;
if|if
condition|(
operator|!
name|IsWindowVisible
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
condition|)
name|sm
operator|=
name|SW_SHOWMINNOACTIVE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|q
operator|->
name|isMaximized
argument_list|()
condition|)
block|{
name|sm
operator|=
name|SW_SHOWMAXIMIZED
expr_stmt|;
comment|// Windows will not behave correctly when we try to maximize a window which does not
comment|// have minimize nor maximize buttons in the window frame. Windows would then ignore
comment|// non-available geometry, and rather maximize the widget to the full screen, minus the
comment|// window frame (caption). So, we do a trick here, by adding a maximize button before
comment|// maximizing the widget, and then remove the maximize button afterwards.
name|Qt
operator|::
name|WindowFlags
modifier|&
name|flags
init|=
name|data
operator|.
name|window_flags
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
operator|&&
operator|!
operator|(
name|flags
operator|&
operator|(
name|Qt
operator|::
name|WindowMinMaxButtonsHint
operator||
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|)
condition|)
block|{
name|fakedMaximize
operator|=
name|TRUE
expr_stmt|;
name|int
name|style
init|=
name|GetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_STYLE
argument_list|)
decl_stmt|;
name|SetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_STYLE
argument_list|,
name|style
operator||
name|WS_MAXIMIZEBOX
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_ShowWithoutActivating
argument_list|)
operator|||
operator|(
name|q
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
operator|)
operator|||
operator|(
name|q
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|ToolTip
operator|)
operator|||
operator|(
name|q
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Tool
operator|)
condition|)
block|{
name|sm
operator|=
name|SW_SHOWNOACTIVATE
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
name|ShowWindow
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|sm
argument_list|)
expr_stmt|;
if|if
condition|(
name|fakedMaximize
condition|)
block|{
name|int
name|style
init|=
name|GetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_STYLE
argument_list|)
decl_stmt|;
name|SetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_STYLE
argument_list|,
name|style
operator|&
operator|~
name|WS_MAXIMIZEBOX
argument_list|)
expr_stmt|;
name|SetWindowPos
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_NOACTIVATE
operator||
name|SWP_NOMOVE
operator||
name|SWP_NOSIZE
operator||
name|SWP_NOZORDER
operator||
name|SWP_NOOWNERZORDER
operator||
name|SWP_FRAMECHANGED
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
if|if
condition|(
name|IsIconic
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
condition|)
name|data
operator|.
name|window_state
operator||=
name|Qt
operator|::
name|WindowMinimized
expr_stmt|;
if|if
condition|(
name|IsZoomed
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
condition|)
name|data
operator|.
name|window_state
operator||=
name|Qt
operator|::
name|WindowMaximized
expr_stmt|;
comment|// This is to resolve the problem where popups are opened from the
comment|// system tray and not being implicitly activated
if|if
condition|(
name|q
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
operator|&&
operator|!
name|q
operator|->
name|parentWidget
argument_list|()
operator|&&
operator|!
name|qApp
operator|->
name|activeWindow
argument_list|()
condition|)
name|q
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
block|}
name|winSetupGestures
argument_list|()
expr_stmt|;
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//Q_WS_WINCE
end_comment
begin_function
DECL|function|setFocus_sys
name|void
name|QWidgetPrivate
operator|::
name|setFocus_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
operator|&&
name|q
operator|->
name|window
argument_list|()
operator|->
name|windowType
argument_list|()
operator|!=
name|Qt
operator|::
name|Popup
condition|)
name|SetFocus
argument_list|(
name|q
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|raise_sys
name|void
name|QWidgetPrivate
operator|::
name|raise_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
name|SetWindowPos
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|HWND_TOP
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_NOACTIVATE
operator||
name|SWP_NOMOVE
operator||
name|SWP_NOSIZE
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lower_sys
name|void
name|QWidgetPrivate
operator|::
name|lower_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
name|SetWindowPos
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|HWND_BOTTOM
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_NOACTIVATE
operator||
name|SWP_NOMOVE
operator||
name|SWP_NOSIZE
argument_list|)
expr_stmt|;
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stackUnder_sys
name|void
name|QWidgetPrivate
operator|::
name|stackUnder_sys
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
operator|&&
name|w
operator|->
name|internalWinId
argument_list|()
condition|)
name|SetWindowPos
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|w
operator|->
name|internalWinId
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_NOMOVE
operator||
name|SWP_NOSIZE
argument_list|)
expr_stmt|;
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   Helper function for non-toplevel widgets. Helps to map Qt's 32bit   coordinate system to Windpws's 16bit coordinate system.    This code is duplicated from the X11 code, so any changes there   should also (most likely) be reflected here.    (In all comments below: s/X/Windows/g)  */
end_comment
begin_function
DECL|function|setWSGeometry
name|void
name|QWidgetPrivate
operator|::
name|setWSGeometry
parameter_list|(
name|bool
name|dontShow
parameter_list|,
specifier|const
name|QRect
modifier|&
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
comment|/*       There are up to four different coordinate systems here:       Qt coordinate system for this widget.       X coordinate system for this widget (relative to wrect).       Qt coordinate system for parent       X coordinate system for parent (relative to parent's wrect).      */
name|QRect
name|validRange
argument_list|(
operator|-
name|XCOORD_MAX
argument_list|,
operator|-
name|XCOORD_MAX
argument_list|,
literal|2
operator|*
name|XCOORD_MAX
argument_list|,
literal|2
operator|*
name|XCOORD_MAX
argument_list|)
decl_stmt|;
name|QRect
name|wrectRange
argument_list|(
operator|-
name|WRECT_MAX
argument_list|,
operator|-
name|WRECT_MAX
argument_list|,
literal|2
operator|*
name|WRECT_MAX
argument_list|,
literal|2
operator|*
name|WRECT_MAX
argument_list|)
decl_stmt|;
name|QRect
name|wrect
decl_stmt|;
comment|//xrect is the X geometry of my X widget. (starts out in  parent's Qt coord sys, and ends up in parent's X coord sys)
name|QRect
name|xrect
init|=
name|data
operator|.
name|crect
decl_stmt|;
specifier|const
name|QWidget
modifier|*
specifier|const
name|parent
init|=
name|q
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
name|QRect
name|parentWRect
init|=
name|parent
operator|->
name|data
operator|->
name|wrect
decl_stmt|;
if|if
condition|(
name|parentWRect
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// parent is clipped, and we have to clip to the same limit as parent
if|if
condition|(
operator|!
name|parentWRect
operator|.
name|contains
argument_list|(
name|xrect
argument_list|)
condition|)
block|{
name|xrect
operator|&=
name|parentWRect
expr_stmt|;
name|wrect
operator|=
name|xrect
expr_stmt|;
comment|//translate from parent's to my Qt coord sys
name|wrect
operator|.
name|translate
argument_list|(
operator|-
name|data
operator|.
name|crect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//translate from parent's Qt coords to parent's X coords
name|xrect
operator|.
name|translate
argument_list|(
operator|-
name|parentWRect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// parent is not clipped, we may or may not have to clip
if|if
condition|(
name|data
operator|.
name|wrect
operator|.
name|isValid
argument_list|()
operator|&&
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|data
operator|.
name|crect
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|data
operator|.
name|wrect
argument_list|)
condition|)
block|{
comment|// This is where the main optimization is: we are already
comment|// clipped, and if our clip is still valid, we can just
comment|// move our window, and do not need to move or clip
comment|// children
name|QRect
name|vrect
init|=
name|xrect
operator|&
name|parent
operator|->
name|rect
argument_list|()
decl_stmt|;
name|vrect
operator|.
name|translate
argument_list|(
operator|-
name|data
operator|.
name|crect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
comment|//the part of me that's visible through parent, in my Qt coords
if|if
condition|(
name|data
operator|.
name|wrect
operator|.
name|contains
argument_list|(
name|vrect
argument_list|)
condition|)
block|{
name|xrect
operator|=
name|data
operator|.
name|wrect
expr_stmt|;
name|xrect
operator|.
name|translate
argument_list|(
name|data
operator|.
name|crect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
name|MoveWindow
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|xrect
operator|.
name|x
argument_list|()
argument_list|,
name|xrect
operator|.
name|y
argument_list|()
argument_list|,
name|xrect
operator|.
name|width
argument_list|()
argument_list|,
name|xrect
operator|.
name|height
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
operator|!
name|validRange
operator|.
name|contains
argument_list|(
name|xrect
argument_list|)
condition|)
block|{
comment|// we are too big, and must clip
name|xrect
operator|&=
name|wrectRange
expr_stmt|;
name|wrect
operator|=
name|xrect
expr_stmt|;
name|wrect
operator|.
name|translate
argument_list|(
operator|-
name|data
operator|.
name|crect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
comment|//parent's X coord system is equal to parent's Qt coord
comment|//sys, so we don't need to map xrect.
block|}
block|}
comment|// unmap if we are outside the valid window system coord system
name|bool
name|outsideRange
init|=
operator|!
name|xrect
operator|.
name|isValid
argument_list|()
decl_stmt|;
name|bool
name|mapWindow
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|)
operator|!=
name|outsideRange
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|,
name|outsideRange
argument_list|)
expr_stmt|;
if|if
condition|(
name|outsideRange
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
name|ShowWindow
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|SW_HIDE
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|q
operator|->
name|isHidden
argument_list|()
condition|)
block|{
name|mapWindow
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|outsideRange
condition|)
return|return;
name|bool
name|jump
init|=
operator|(
name|data
operator|.
name|wrect
operator|!=
name|wrect
operator|)
decl_stmt|;
name|data
operator|.
name|wrect
operator|=
name|wrect
expr_stmt|;
comment|// and now recursively for all children...
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QObject
modifier|*
name|object
init|=
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|->
name|isWidgetType
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|isWindow
argument_list|()
operator|&&
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|setWSGeometry
argument_list|()
expr_stmt|;
block|}
block|}
comment|// move ourselves to the new position and map (if necessary) after
comment|// the movement. Rationale: moving unmapped windows is much faster
comment|// than moving mapped windows
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|parent
operator|->
name|internalWinId
argument_list|()
condition|)
name|xrect
operator|.
name|translate
argument_list|(
name|parent
operator|->
name|mapTo
argument_list|(
name|q
operator|->
name|nativeParentWidget
argument_list|()
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|MoveWindow
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|xrect
operator|.
name|x
argument_list|()
argument_list|,
name|xrect
operator|.
name|y
argument_list|()
argument_list|,
name|xrect
operator|.
name|width
argument_list|()
argument_list|,
name|xrect
operator|.
name|height
argument_list|()
argument_list|,
operator|!
name|jump
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapWindow
operator|&&
operator|!
name|dontShow
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
name|ShowWindow
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|SW_SHOWNOACTIVATE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jump
operator|&&
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
name|InvalidateRect
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// The internal qWinRequestConfig, defined in qapplication_win.cpp, stores move,
end_comment
begin_comment
comment|// resize and setGeometry requests for a widget that is already
end_comment
begin_comment
comment|// processing a config event. The purpose is to avoid recursion.
end_comment
begin_comment
comment|//
end_comment
begin_function_decl
name|void
name|qWinRequestConfig
parameter_list|(
name|WId
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|setGeometry_sys
name|void
name|QWidgetPrivate
operator|::
name|setGeometry_sys
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|bool
name|isMove
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|extra
condition|)
block|{
comment|// any size restrictions?
name|w
operator|=
name|qMin
argument_list|(
name|w
argument_list|,
name|extra
operator|->
name|maxw
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMin
argument_list|(
name|h
argument_list|,
name|extra
operator|->
name|maxh
argument_list|)
expr_stmt|;
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|extra
operator|->
name|minw
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMax
argument_list|(
name|h
argument_list|,
name|extra
operator|->
name|minh
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
name|topData
argument_list|()
operator|->
name|normalGeometry
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QSize
name|oldSize
argument_list|(
name|q
operator|->
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QPoint
name|oldPos
argument_list|(
name|q
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
condition|)
name|isMove
operator|=
operator|(
name|data
operator|.
name|crect
operator|.
name|topLeft
argument_list|()
operator|!=
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|)
expr_stmt|;
name|bool
name|isResize
init|=
name|w
operator|!=
name|oldSize
operator|.
name|width
argument_list|()
operator|||
name|h
operator|!=
name|oldSize
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isMove
operator|&&
operator|!
name|isResize
condition|)
return|return;
if|if
condition|(
name|isResize
operator|&&
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_StaticContents
argument_list|)
operator|&&
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
name|ValidateRgn
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_WINCE
comment|// On Windows CE we can't just fiddle around with the window state.
comment|// Too much magic in setWindowState.
if|if
condition|(
name|isResize
operator|&&
name|q
operator|->
name|isMaximized
argument_list|()
condition|)
name|q
operator|->
name|setWindowState
argument_list|(
name|q
operator|->
name|windowState
argument_list|()
operator|&
operator|~
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|isResize
condition|)
name|data
operator|.
name|window_state
operator|&=
operator|~
name|Qt
operator|::
name|WindowMaximized
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|data
operator|.
name|window_state
operator|&
name|Qt
operator|::
name|WindowFullScreen
condition|)
block|{
name|QTLWExtra
modifier|*
name|top
init|=
name|topData
argument_list|()
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
comment|// We need to update these flags when we remove the full screen state
comment|// or the frame will not be updated
name|UINT
name|style
init|=
name|top
operator|->
name|savedFlags
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
condition|)
name|style
operator||=
name|WS_VISIBLE
expr_stmt|;
name|SetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_STYLE
argument_list|,
name|style
argument_list|)
expr_stmt|;
name|UINT
name|swpf
init|=
name|SWP_FRAMECHANGED
operator||
name|SWP_NOZORDER
operator||
name|SWP_NOSIZE
operator||
name|SWP_NOMOVE
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|window_state
operator|&
name|Qt
operator|::
name|WindowActive
condition|)
name|swpf
operator||=
name|SWP_NOACTIVATE
expr_stmt|;
name|SetWindowPos
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|swpf
argument_list|)
expr_stmt|;
name|updateFrameStrut
argument_list|()
expr_stmt|;
block|}
name|data
operator|.
name|window_state
operator|&=
operator|~
name|Qt
operator|::
name|WindowFullScreen
expr_stmt|;
name|topData
argument_list|()
operator|->
name|savedFlags
operator|=
literal|0
expr_stmt|;
block|}
name|QTLWExtra
modifier|*
name|tlwExtra
init|=
name|q
operator|->
name|window
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|maybeTopData
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|inTopLevelResize
init|=
name|tlwExtra
condition|?
name|tlwExtra
operator|->
name|inTopLevelResize
else|:
literal|false
decl_stmt|;
specifier|const
name|bool
name|isTranslucentWindow
init|=
operator|!
name|isOpaque
operator|&&
name|ptrUpdateLayeredWindowIndirect
operator|&&
operator|(
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|&&
name|GetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_EXSTYLE
argument_list|)
operator|&
name|Q_WS_EX_LAYERED
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ConfigPending
argument_list|)
condition|)
block|{
comment|// processing config event
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
name|qWinRequestConfig
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|isMove
condition|?
literal|2
else|:
literal|1
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ConfigPending
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
condition|)
block|{
name|data
operator|.
name|crect
operator|.
name|setRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|QRect
name|fs
argument_list|(
name|frameStrut
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|extra
condition|)
block|{
name|fs
operator|.
name|setLeft
argument_list|(
name|x
operator|-
name|fs
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setTop
argument_list|(
name|y
operator|-
name|fs
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setRight
argument_list|(
operator|(
name|x
operator|+
name|w
operator|-
literal|1
operator|)
operator|+
name|fs
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setBottom
argument_list|(
operator|(
name|y
operator|+
name|h
operator|-
literal|1
operator|)
operator|+
name|fs
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|w
operator|==
literal|0
operator|||
name|h
operator|==
literal|0
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
condition|)
name|hide_sys
argument_list|()
expr_stmt|;
name|data
operator|.
name|crect
operator|=
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|)
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// put the window in its place and show it
name|MoveWindow
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|fs
operator|.
name|x
argument_list|()
argument_list|,
name|fs
operator|.
name|y
argument_list|()
argument_list|,
name|fs
operator|.
name|width
argument_list|()
argument_list|,
name|fs
operator|.
name|height
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RECT
name|rect
decl_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
block|{
name|GetClientRect
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
operator|&
name|rect
argument_list|)
expr_stmt|;
name|data
operator|.
name|crect
operator|.
name|setRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|rect
operator|.
name|right
operator|-
name|rect
operator|.
name|left
argument_list|,
name|rect
operator|.
name|bottom
operator|-
name|rect
operator|.
name|top
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|data
operator|.
name|crect
operator|.
name|setRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
name|show_sys
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|,
literal|false
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
comment|// If the window is hidden and in maximized state or minimized, instead of moving the
comment|// window, set the normal position of the window.
name|WINDOWPLACEMENT
name|wndpl
decl_stmt|;
name|GetWindowPlacement
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
operator|&
name|wndpl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|wndpl
operator|.
name|showCmd
operator|==
name|SW_MAXIMIZE
operator|&&
operator|!
name|IsWindowVisible
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
operator|)
operator|||
name|wndpl
operator|.
name|showCmd
operator|==
name|SW_SHOWMINIMIZED
condition|)
block|{
name|RECT
name|normal
init|=
block|{
name|fs
operator|.
name|x
argument_list|()
block|,
name|fs
operator|.
name|y
argument_list|()
block|,
name|fs
operator|.
name|x
argument_list|()
operator|+
name|fs
operator|.
name|width
argument_list|()
block|,
name|fs
operator|.
name|y
argument_list|()
operator|+
name|fs
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|wndpl
operator|.
name|rcNormalPosition
operator|=
name|normal
expr_stmt|;
name|wndpl
operator|.
name|showCmd
operator|=
name|wndpl
operator|.
name|showCmd
operator|==
name|SW_SHOWMINIMIZED
condition|?
name|SW_SHOWMINIMIZED
else|:
name|SW_HIDE
expr_stmt|;
name|SetWindowPlacement
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
operator|&
name|wndpl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
else|#
directive|else
if|if
condition|(
name|data
operator|.
name|window_state
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
block|{
name|qt_wince_maximize
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
else|else
block|{
endif|#
directive|endif
name|MoveWindow
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|fs
operator|.
name|x
argument_list|()
argument_list|,
name|fs
operator|.
name|y
argument_list|()
argument_list|,
name|fs
operator|.
name|width
argument_list|()
argument_list|,
name|fs
operator|.
name|height
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|q
operator|->
name|isVisible
argument_list|()
condition|)
name|InvalidateRect
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
literal|0
argument_list|,
name|FALSE
argument_list|)
expr_stmt|;
name|RECT
name|rect
decl_stmt|;
comment|// If the layout has heightForWidth, the MoveWindow() above can
comment|// change the size/position, so refresh them.
if|if
condition|(
name|isTranslucentWindow
condition|)
block|{
name|data
operator|.
name|crect
operator|.
name|setRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|GetClientRect
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
operator|&
name|rect
argument_list|)
expr_stmt|;
name|RECT
name|rcNormalPosition
init|=
block|{
literal|0
block|}
decl_stmt|;
comment|// Use (0,0) as window position for embedded ActiveQt controls.
if|if
condition|(
operator|!
name|tlwExtra
operator|||
operator|!
name|tlwExtra
operator|->
name|embedded
condition|)
name|GetWindowRect
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
operator|&
name|rcNormalPosition
argument_list|)
expr_stmt|;
name|QRect
name|fStrut
argument_list|(
name|frameStrut
argument_list|()
argument_list|)
decl_stmt|;
name|data
operator|.
name|crect
operator|.
name|setRect
argument_list|(
name|rcNormalPosition
operator|.
name|left
operator|+
name|fStrut
operator|.
name|left
argument_list|()
argument_list|,
name|rcNormalPosition
operator|.
name|top
operator|+
name|fStrut
operator|.
name|top
argument_list|()
argument_list|,
name|rect
operator|.
name|right
operator|-
name|rect
operator|.
name|left
argument_list|,
name|rect
operator|.
name|bottom
operator|-
name|rect
operator|.
name|top
argument_list|)
expr_stmt|;
name|isResize
operator|=
name|data
operator|.
name|crect
operator|.
name|size
argument_list|()
operator|!=
name|oldSize
expr_stmt|;
block|}
block|}
else|else
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|data
operator|.
name|crect
operator|.
name|setRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QRect
name|oldGeom
argument_list|(
name|data
operator|.
name|crect
argument_list|)
decl_stmt|;
name|data
operator|.
name|crect
operator|.
name|setRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
operator|&&
operator|(
operator|!
name|inTopLevelResize
operator|||
name|q
operator|->
name|internalWinId
argument_list|()
operator|)
condition|)
block|{
comment|// Top-level resize optimization does not work for native child widgets;
comment|// disable it for this particular widget.
if|if
condition|(
name|inTopLevelResize
condition|)
name|tlwExtra
operator|->
name|inTopLevelResize
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|isResize
condition|)
name|moveRect
argument_list|(
name|QRect
argument_list|(
name|oldPos
argument_list|,
name|oldSize
argument_list|)
argument_list|,
name|x
operator|-
name|oldPos
operator|.
name|x
argument_list|()
argument_list|,
name|y
operator|-
name|oldPos
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|invalidateBuffer_resizeHelper
argument_list|(
name|oldPos
argument_list|,
name|oldSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|inTopLevelResize
condition|)
name|tlwExtra
operator|->
name|inTopLevelResize
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
name|setWSGeometry
argument_list|()
expr_stmt|;
block|}
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ConfigPending
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
name|q
operator|->
name|isVisible
argument_list|()
operator|&&
name|isResize
operator|&&
operator|!
name|inTopLevelResize
condition|)
block|{
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
comment|//after the resize
block|}
comment|// Process events immediately rather than in translateConfigEvent to
comment|// avoid windows message process delay.
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
condition|)
block|{
if|if
condition|(
name|isMove
operator|&&
name|q
operator|->
name|pos
argument_list|()
operator|!=
name|oldPos
condition|)
block|{
name|QMoveEvent
name|e
argument_list|(
name|q
operator|->
name|pos
argument_list|()
argument_list|,
name|oldPos
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|q
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isResize
condition|)
block|{
specifier|static
name|bool
name|slowResize
init|=
name|qgetenv
argument_list|(
literal|"QT_SLOW_TOPLEVEL_RESIZE"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
comment|// If we have a backing store with static contents, we have to disable the top-level
comment|// resize optimization in order to get invalidated regions for resized widgets.
comment|// The optimization discards all invalidateBuffer() calls since we're going to
comment|// repaint everything anyways, but that's not the case with static contents.
specifier|const
name|bool
name|setTopLevelResize
init|=
operator|!
name|slowResize
operator|&&
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
name|extra
operator|&&
name|extra
operator|->
name|topextra
operator|&&
operator|!
name|extra
operator|->
name|topextra
operator|->
name|inTopLevelResize
operator|&&
operator|(
operator|!
name|extra
operator|->
name|topextra
operator|->
name|backingStore
operator|||
operator|!
name|extra
operator|->
name|topextra
operator|->
name|backingStore
operator|->
name|hasStaticContents
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|setTopLevelResize
condition|)
name|extra
operator|->
name|topextra
operator|->
name|inTopLevelResize
operator|=
literal|true
expr_stmt|;
name|QResizeEvent
name|e
argument_list|(
name|q
operator|->
name|size
argument_list|()
argument_list|,
name|oldSize
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|q
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|setTopLevelResize
condition|)
name|extra
operator|->
name|topextra
operator|->
name|inTopLevelResize
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isMove
operator|&&
name|q
operator|->
name|pos
argument_list|()
operator|!=
name|oldPos
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_PendingMoveEvent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|isResize
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_PendingResizeEvent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|shouldShowMaximizeButton
name|bool
name|QWidgetPrivate
operator|::
name|shouldShowMaximizeButton
parameter_list|()
block|{
if|if
condition|(
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|MSWindowsFixedSizeDialogHint
condition|)
return|return
literal|false
return|;
comment|// if the user explicitly asked for the maximize button, we try to add
comment|// it even if the window has fixed size.
if|if
condition|(
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|CustomizeWindowHint
operator|&&
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|extra
condition|)
block|{
if|if
condition|(
operator|(
name|extra
operator|->
name|maxw
operator|&&
name|extra
operator|->
name|maxw
operator|!=
name|QWIDGETSIZE_MAX
operator|&&
name|extra
operator|->
name|maxw
operator|!=
name|QLAYOUTSIZE_MAX
operator|)
operator|||
operator|(
name|extra
operator|->
name|maxh
operator|&&
name|extra
operator|->
name|maxh
operator|!=
name|QWIDGETSIZE_MAX
operator|&&
name|extra
operator|->
name|maxh
operator|!=
name|QLAYOUTSIZE_MAX
operator|)
condition|)
return|return
literal|false
return|;
block|}
return|return
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
return|;
block|}
DECL|function|winUpdateIsOpaque
name|void
name|QWidgetPrivate
operator|::
name|winUpdateIsOpaque
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_WS_WINCE
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
operator|||
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_TranslucentBackground
argument_list|)
condition|)
return|return;
if|if
condition|(
operator|(
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|==
literal|0
condition|)
return|return;
if|if
condition|(
operator|!
name|isOpaque
operator|&&
name|ptrUpdateLayeredWindowIndirect
condition|)
block|{
name|SetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_EXSTYLE
argument_list|,
name|GetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_EXSTYLE
argument_list|)
operator||
name|Q_WS_EX_LAYERED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_EXSTYLE
argument_list|,
name|GetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_EXSTYLE
argument_list|)
operator|&
operator|~
name|Q_WS_EX_LAYERED
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
DECL|function|setConstraints_sys
name|void
name|QWidgetPrivate
operator|::
name|setConstraints_sys
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_WS_WINCE_WM
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
block|{
name|int
name|style
init|=
name|GetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_STYLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldShowMaximizeButton
argument_list|()
condition|)
name|style
operator||=
name|WS_MAXIMIZEBOX
expr_stmt|;
else|else
name|style
operator|&=
operator|~
name|WS_MAXIMIZEBOX
expr_stmt|;
name|SetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_STYLE
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
DECL|function|scroll_sys
name|void
name|QWidgetPrivate
operator|::
name|scroll_sys
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|scrollChildren
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|paintOnScreen
argument_list|()
condition|)
block|{
name|scrollRect
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|UINT
name|flags
init|=
name|SW_INVALIDATE
decl_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OpaquePaintEvent
argument_list|)
condition|)
name|flags
operator||=
name|SW_ERASE
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|ScrollWindowEx
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|UpdateWindow
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|scroll_sys
name|void
name|QWidgetPrivate
operator|::
name|scroll_sys
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|paintOnScreen
argument_list|()
condition|)
block|{
name|scrollRect
argument_list|(
name|r
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RECT
name|wr
decl_stmt|;
name|wr
operator|.
name|top
operator|=
name|r
operator|.
name|top
argument_list|()
expr_stmt|;
name|wr
operator|.
name|left
operator|=
name|r
operator|.
name|left
argument_list|()
expr_stmt|;
name|wr
operator|.
name|bottom
operator|=
name|r
operator|.
name|bottom
argument_list|()
operator|+
literal|1
expr_stmt|;
name|wr
operator|.
name|right
operator|=
name|r
operator|.
name|right
argument_list|()
operator|+
literal|1
expr_stmt|;
name|UINT
name|flags
init|=
name|SW_INVALIDATE
decl_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OpaquePaintEvent
argument_list|)
condition|)
name|flags
operator||=
name|SW_ERASE
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|ScrollWindowEx
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
operator|&
name|wr
argument_list|,
operator|&
name|wr
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|UpdateWindow
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|metric
name|int
name|QWidget
operator|::
name|metric
parameter_list|(
name|PaintDeviceMetric
name|m
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
name|int
name|val
decl_stmt|;
if|if
condition|(
name|m
operator|==
name|PdmWidth
condition|)
block|{
name|val
operator|=
name|data
operator|->
name|crect
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|PdmHeight
condition|)
block|{
name|val
operator|=
name|data
operator|->
name|crect
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|HDC
name|gdc
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|m
condition|)
block|{
case|case
name|PdmDpiX
case|:
case|case
name|PdmPhysicalDpiX
case|:
if|if
condition|(
name|d
operator|->
name|extra
operator|&&
name|d
operator|->
name|extra
operator|->
name|customDpiX
condition|)
name|val
operator|=
name|d
operator|->
name|extra
operator|->
name|customDpiX
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|parent
condition|)
name|val
operator|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|parent
argument_list|)
operator|->
name|metric
argument_list|(
name|m
argument_list|)
expr_stmt|;
else|else
name|val
operator|=
name|GetDeviceCaps
argument_list|(
name|gdc
argument_list|,
name|LOGPIXELSX
argument_list|)
expr_stmt|;
break|break;
case|case
name|PdmDpiY
case|:
case|case
name|PdmPhysicalDpiY
case|:
if|if
condition|(
name|d
operator|->
name|extra
operator|&&
name|d
operator|->
name|extra
operator|->
name|customDpiY
condition|)
name|val
operator|=
name|d
operator|->
name|extra
operator|->
name|customDpiY
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|parent
condition|)
name|val
operator|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|parent
argument_list|)
operator|->
name|metric
argument_list|(
name|m
argument_list|)
expr_stmt|;
else|else
name|val
operator|=
name|GetDeviceCaps
argument_list|(
name|gdc
argument_list|,
name|LOGPIXELSY
argument_list|)
expr_stmt|;
break|break;
case|case
name|PdmWidthMM
case|:
name|val
operator|=
name|data
operator|->
name|crect
operator|.
name|width
argument_list|()
operator|*
name|GetDeviceCaps
argument_list|(
name|gdc
argument_list|,
name|HORZSIZE
argument_list|)
operator|/
name|GetDeviceCaps
argument_list|(
name|gdc
argument_list|,
name|HORZRES
argument_list|)
expr_stmt|;
break|break;
case|case
name|PdmHeightMM
case|:
name|val
operator|=
name|data
operator|->
name|crect
operator|.
name|height
argument_list|()
operator|*
name|GetDeviceCaps
argument_list|(
name|gdc
argument_list|,
name|VERTSIZE
argument_list|)
operator|/
name|GetDeviceCaps
argument_list|(
name|gdc
argument_list|,
name|VERTRES
argument_list|)
expr_stmt|;
break|break;
case|case
name|PdmNumColors
case|:
if|if
condition|(
name|GetDeviceCaps
argument_list|(
name|gdc
argument_list|,
name|RASTERCAPS
argument_list|)
operator|&
name|RC_PALETTE
condition|)
name|val
operator|=
name|GetDeviceCaps
argument_list|(
name|gdc
argument_list|,
name|SIZEPALETTE
argument_list|)
expr_stmt|;
else|else
block|{
name|HDC
name|hd
init|=
name|d
operator|->
name|hd
condition|?
name|HDC
argument_list|(
name|d
operator|->
name|hd
argument_list|)
else|:
name|gdc
decl_stmt|;
name|int
name|bpp
init|=
name|GetDeviceCaps
argument_list|(
name|hd
argument_list|,
name|BITSPIXEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|bpp
operator|==
literal|32
condition|)
name|val
operator|=
name|INT_MAX
expr_stmt|;
comment|// ### this is bogus, it should be 2^24 colors for 32 bit as well
elseif|else
if|if
condition|(
name|bpp
operator|<=
literal|8
condition|)
name|val
operator|=
name|GetDeviceCaps
argument_list|(
name|hd
argument_list|,
name|NUMCOLORS
argument_list|)
expr_stmt|;
else|else
name|val
operator|=
literal|1
operator|<<
operator|(
name|bpp
operator|*
name|GetDeviceCaps
argument_list|(
name|hd
argument_list|,
name|PLANES
argument_list|)
operator|)
expr_stmt|;
block|}
break|break;
case|case
name|PdmDepth
case|:
name|val
operator|=
name|GetDeviceCaps
argument_list|(
name|gdc
argument_list|,
name|BITSPIXEL
argument_list|)
expr_stmt|;
break|break;
default|default:
name|val
operator|=
literal|0
expr_stmt|;
name|qWarning
argument_list|(
literal|"QWidget::metric: Invalid metric command"
argument_list|)
expr_stmt|;
block|}
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|gdc
argument_list|)
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
DECL|function|createSysExtra
name|void
name|QWidgetPrivate
operator|::
name|createSysExtra
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|extra
operator|->
name|dropTarget
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
ifndef|#
directive|ifndef
name|Q_WS_WINCE
DECL|function|deleteSysExtra
name|void
name|QWidgetPrivate
operator|::
name|deleteSysExtra
parameter_list|()
block|{ }
endif|#
directive|endif
comment|//Q_WS_WINCE
DECL|function|createTLSysExtra
name|void
name|QWidgetPrivate
operator|::
name|createTLSysExtra
parameter_list|()
block|{
name|extra
operator|->
name|topextra
operator|->
name|hotkeyRegistered
operator|=
literal|0
expr_stmt|;
name|extra
operator|->
name|topextra
operator|->
name|savedFlags
operator|=
literal|0
expr_stmt|;
name|extra
operator|->
name|topextra
operator|->
name|winIconBig
operator|=
literal|0
expr_stmt|;
name|extra
operator|->
name|topextra
operator|->
name|winIconSmall
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|deleteTLSysExtra
name|void
name|QWidgetPrivate
operator|::
name|deleteTLSysExtra
parameter_list|()
block|{
if|if
condition|(
name|extra
operator|->
name|topextra
operator|->
name|winIconSmall
condition|)
name|DestroyIcon
argument_list|(
name|extra
operator|->
name|topextra
operator|->
name|winIconSmall
argument_list|)
expr_stmt|;
if|if
condition|(
name|extra
operator|->
name|topextra
operator|->
name|winIconBig
condition|)
name|DestroyIcon
argument_list|(
name|extra
operator|->
name|topextra
operator|->
name|winIconBig
argument_list|)
expr_stmt|;
block|}
DECL|function|registerDropSite
name|void
name|QWidgetPrivate
operator|::
name|registerDropSite
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
return|return;
comment|// Enablement is defined by d->extra->dropTarget != 0.
if|if
condition|(
name|on
condition|)
block|{
comment|// Turn on.
name|createExtra
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
if|if
condition|(
operator|!
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
name|q
operator|->
name|nativeParentWidget
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|createExtra
argument_list|()
expr_stmt|;
name|QWExtra
modifier|*
name|extra
init|=
name|extraData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|extra
operator|->
name|dropTarget
condition|)
name|extra
operator|->
name|dropTarget
operator|=
name|registerOleDnd
argument_list|(
name|q
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
comment|// Turn off.
name|QWExtra
modifier|*
name|extra
init|=
name|extraData
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
if|if
condition|(
name|extra
operator|&&
name|extra
operator|->
name|dropTarget
condition|)
block|{
name|unregisterOleDnd
argument_list|(
name|q
argument_list|,
name|extra
operator|->
name|dropTarget
argument_list|)
expr_stmt|;
name|extra
operator|->
name|dropTarget
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
DECL|function|registerOleDnd
name|QOleDropTarget
modifier|*
name|QWidgetPrivate
operator|::
name|registerOleDnd
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QOleDropTarget
modifier|*
name|dropTarget
init|=
operator|new
name|QOleDropTarget
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|widget
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|nativeParent
init|=
name|widget
operator|->
name|nativeParentWidget
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|nativeParent
argument_list|)
expr_stmt|;
name|QWExtra
modifier|*
name|nativeExtra
init|=
name|nativeParent
operator|->
name|d_func
argument_list|()
operator|->
name|extra
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|nativeExtra
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nativeParent
operator|->
name|acceptDrops
argument_list|()
condition|)
name|nativeParent
operator|->
name|setAcceptDrops
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nativeExtra
operator|->
name|oleDropWidgets
operator|.
name|contains
argument_list|(
name|widget
argument_list|)
condition|)
name|nativeExtra
operator|->
name|oleDropWidgets
operator|.
name|append
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nativeExtra
operator|->
name|dropTarget
condition|)
block|{
name|nativeExtra
operator|->
name|dropTarget
operator|=
name|registerOleDnd
argument_list|(
name|nativeParent
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|nativeExtra
operator|->
name|dropTarget
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|CoLockObjectExternal
argument_list|(
name|nativeExtra
operator|->
name|dropTarget
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|RegisterDragDrop
argument_list|(
name|nativeParent
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|nativeExtra
operator|->
name|dropTarget
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|RegisterDragDrop
argument_list|(
name|widget
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|dropTarget
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|CoLockObjectExternal
argument_list|(
name|dropTarget
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|dropTarget
return|;
block|}
DECL|function|unregisterOleDnd
name|void
name|QWidgetPrivate
operator|::
name|unregisterOleDnd
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QOleDropTarget
modifier|*
name|dropTarget
parameter_list|)
block|{
name|dropTarget
operator|->
name|releaseQt
argument_list|()
expr_stmt|;
name|dropTarget
operator|->
name|Release
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|widget
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|nativeParent
init|=
name|widget
operator|->
name|nativeParentWidget
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|nativeParent
argument_list|)
expr_stmt|;
name|QWExtra
modifier|*
name|nativeExtra
init|=
name|nativeParent
operator|->
name|d_func
argument_list|()
operator|->
name|extra
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|nativeExtra
argument_list|)
expr_stmt|;
name|nativeExtra
operator|->
name|oleDropWidgets
operator|.
name|removeAll
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|nativeExtra
operator|->
name|oleDropWidgets
operator|.
name|removeAll
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|nativeExtra
operator|->
name|oleDropWidgets
operator|.
name|isEmpty
argument_list|()
operator|&&
name|nativeExtra
operator|->
name|dropTarget
operator|&&
operator|!
name|nativeParent
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DropSiteRegistered
argument_list|)
condition|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|CoLockObjectExternal
argument_list|(
name|nativeExtra
operator|->
name|dropTarget
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|RevokeDragDrop
argument_list|(
name|nativeParent
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
name|nativeExtra
operator|->
name|dropTarget
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|CoLockObjectExternal
argument_list|(
name|dropTarget
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|RevokeDragDrop
argument_list|(
name|widget
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|//QT_NO_DRAGANDDROP
comment|// from qregion_win.cpp
specifier|extern
name|HRGN
name|qt_tryCreateRegion
argument_list|(
name|QRegion
operator|::
name|RegionType
name|type
argument_list|,
name|int
name|left
argument_list|,
name|int
name|top
argument_list|,
name|int
name|right
argument_list|,
name|int
name|bottom
argument_list|)
decl_stmt|;
DECL|function|setMask_sys
name|void
name|QWidgetPrivate
operator|::
name|setMask_sys
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
return|return;
if|if
condition|(
name|region
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SetWindowRgn
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Since SetWindowRegion takes ownership, and we need to translate,
comment|// we take a copy.
name|HRGN
name|wr
init|=
name|qt_tryCreateRegion
argument_list|(
name|QRegion
operator|::
name|Rectangle
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|CombineRgn
argument_list|(
name|wr
argument_list|,
name|region
operator|.
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|RGN_COPY
argument_list|)
expr_stmt|;
name|QPoint
name|offset
init|=
operator|(
name|q
operator|->
name|isWindow
argument_list|()
condition|?
name|frameStrut
argument_list|()
operator|.
name|topLeft
argument_list|()
else|:
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|)
decl_stmt|;
name|OffsetRgn
argument_list|(
name|wr
argument_list|,
name|offset
operator|.
name|x
argument_list|()
argument_list|,
name|offset
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|SetWindowRgn
argument_list|(
name|data
operator|.
name|winid
argument_list|,
name|wr
argument_list|,
literal|true
argument_list|)
condition|)
name|DeleteObject
argument_list|(
name|wr
argument_list|)
expr_stmt|;
block|}
DECL|function|updateFrameStrut
name|void
name|QWidgetPrivate
operator|::
name|updateFrameStrut
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
return|return;
if|if
condition|(
operator|!
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
name|data
operator|.
name|fstrut_dirty
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|RECT
name|rect
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|QTLWExtra
modifier|*
name|top
init|=
name|topData
argument_list|()
decl_stmt|;
name|uint
name|exstyle
init|=
name|GetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_EXSTYLE
argument_list|)
decl_stmt|;
name|uint
name|style
init|=
name|GetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_STYLE
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
if|if
condition|(
name|AdjustWindowRectEx
argument_list|(
operator|&
name|rect
argument_list|,
name|style
operator|&
operator|~
operator|(
name|WS_OVERLAPPED
operator|)
argument_list|,
name|FALSE
argument_list|,
name|exstyle
argument_list|)
condition|)
block|{
else|#
directive|else
if|if
condition|(
name|AdjustWindowRectEx
argument_list|(
operator|&
name|rect
argument_list|,
name|style
argument_list|,
name|FALSE
argument_list|,
name|exstyle
argument_list|)
condition|)
block|{
endif|#
directive|endif
name|top
operator|->
name|frameStrut
operator|.
name|setCoords
argument_list|(
operator|-
name|rect
operator|.
name|left
argument_list|,
operator|-
name|rect
operator|.
name|top
argument_list|,
name|rect
operator|.
name|right
argument_list|,
name|rect
operator|.
name|bottom
argument_list|)
expr_stmt|;
name|data
operator|.
name|fstrut_dirty
operator|=
literal|false
expr_stmt|;
block|}
block|}
ifndef|#
directive|ifndef
name|Q_WS_WINCE
DECL|function|setWindowOpacity_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowOpacity_sys
parameter_list|(
name|qreal
name|level
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isOpaque
operator|&&
name|ptrUpdateLayeredWindow
operator|&&
operator|(
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
condition|)
block|{
if|if
condition|(
name|GetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_EXSTYLE
argument_list|)
operator|&
name|Q_WS_EX_LAYERED
condition|)
block|{
name|BLENDFUNCTION
name|blend
init|=
block|{
name|AC_SRC_OVER
block|,
literal|0
block|,
call|(
name|int
call|)
argument_list|(
literal|255.0
operator|*
name|level
argument_list|)
block|,
name|AC_SRC_ALPHA
block|}
decl_stmt|;
name|ptrUpdateLayeredWindow
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
operator|&
name|blend
argument_list|,
name|Q_ULW_ALPHA
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
specifier|static
name|bool
name|function_resolved
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|function_resolved
condition|)
block|{
name|ptrSetLayeredWindowAttributes
operator|=
operator|(
name|PtrSetLayeredWindowAttributes
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"user32"
argument_list|)
argument_list|,
literal|"SetLayeredWindowAttributes"
argument_list|)
expr_stmt|;
name|function_resolved
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ptrSetLayeredWindowAttributes
condition|)
return|return;
name|int
name|wl
init|=
name|GetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_EXSTYLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|level
operator|!=
literal|1.0
condition|)
block|{
if|if
condition|(
operator|(
name|wl
operator|&
name|Q_WS_EX_LAYERED
operator|)
operator|==
literal|0
condition|)
name|SetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_EXSTYLE
argument_list|,
name|wl
operator||
name|Q_WS_EX_LAYERED
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|wl
operator|&
name|Q_WS_EX_LAYERED
condition|)
block|{
name|SetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_EXSTYLE
argument_list|,
name|wl
operator|&
operator|~
name|Q_WS_EX_LAYERED
argument_list|)
expr_stmt|;
block|}
name|ptrSetLayeredWindowAttributes
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
literal|0
argument_list|,
call|(
name|int
call|)
argument_list|(
name|level
operator|*
literal|255
argument_list|)
argument_list|,
name|Q_LWA_ALPHA
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|//Q_WS_WINCE
comment|// class QGlobalRasterPaintEngine: public QRasterPaintEngine
comment|// {
comment|// public:
comment|//     inline QGlobalRasterPaintEngine() : QRasterPaintEngine() { setFlushOnEnd(false); }
comment|// };
comment|// Q_GLOBAL_STATIC(QGlobalRasterPaintEngine, globalRasterPaintEngine)
ifndef|#
directive|ifndef
name|QT_NO_DIRECTDRAW
DECL|variable|qt_primary_surface_bits
specifier|static
name|uchar
modifier|*
name|qt_primary_surface_bits
decl_stmt|;
DECL|variable|qt_primary_surface_stride
specifier|static
name|int
name|qt_primary_surface_stride
decl_stmt|;
DECL|variable|qt_primary_surface_format
specifier|static
name|QImage
operator|::
name|Format
name|qt_primary_surface_format
decl_stmt|;
DECL|function|qt_win_initialize_directdraw
name|void
name|qt_win_initialize_directdraw
parameter_list|()
block|{
name|HRESULT
name|res
decl_stmt|;
comment|// Some initialization...
if|if
condition|(
operator|!
name|qt_ddraw_object
condition|)
block|{
name|res
operator|=
name|DirectDrawCreate
argument_list|(
literal|0
argument_list|,
operator|&
name|qt_ddraw_object
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|!=
name|DD_OK
condition|)
name|qWarning
argument_list|(
literal|"DirectDrawCreate failed: %d"
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|qt_ddraw_object
operator|->
name|SetCooperativeLevel
argument_list|(
literal|0
argument_list|,
name|DDSCL_NORMAL
argument_list|)
expr_stmt|;
name|DDSURFACEDESC
name|surfaceDesc
decl_stmt|;
name|memset
argument_list|(
operator|&
name|surfaceDesc
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|DDSURFACEDESC
argument_list|)
argument_list|)
expr_stmt|;
name|surfaceDesc
operator|.
name|dwSize
operator|=
sizeof|sizeof
argument_list|(
name|DDSURFACEDESC
argument_list|)
expr_stmt|;
name|surfaceDesc
operator|.
name|dwFlags
operator|=
name|DDSD_CAPS
expr_stmt|;
name|surfaceDesc
operator|.
name|ddsCaps
operator|.
name|dwCaps
operator|=
name|DDSCAPS_PRIMARYSURFACE
expr_stmt|;
name|res
operator|=
name|qt_ddraw_object
operator|->
name|CreateSurface
argument_list|(
operator|&
name|surfaceDesc
argument_list|,
operator|&
name|qt_ddraw_primary
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|!=
name|DD_OK
condition|)
name|qWarning
argument_list|(
literal|"CreateSurface failed: %d"
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|memset
argument_list|(
operator|&
name|surfaceDesc
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|DDSURFACEDESC
argument_list|)
argument_list|)
expr_stmt|;
name|surfaceDesc
operator|.
name|dwSize
operator|=
sizeof|sizeof
argument_list|(
name|DDSURFACEDESC
argument_list|)
expr_stmt|;
name|res
operator|=
name|qt_ddraw_primary
operator|->
name|Lock
argument_list|(
literal|0
argument_list|,
operator|&
name|surfaceDesc
argument_list|,
name|DDLOCK_WAIT
operator||
name|DDLOCK_SURFACEMEMORYPTR
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|!=
name|DD_OK
condition|)
name|qWarning
argument_list|(
literal|"Locking surface failed: %d"
argument_list|,
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|surfaceDesc
operator|.
name|ddpfPixelFormat
operator|.
name|dwFlags
operator|==
name|DDPF_RGB
condition|)
block|{
name|qt_primary_surface_bits
operator|=
operator|(
name|uchar
operator|*
operator|)
name|surfaceDesc
operator|.
name|lpSurface
expr_stmt|;
name|qt_primary_surface_stride
operator|=
name|surfaceDesc
operator|.
name|lPitch
expr_stmt|;
name|qt_primary_surface_format
operator|=
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QWidget painting: unsupported device depth for onscreen painting...\n"
argument_list|)
expr_stmt|;
block|}
name|qt_ddraw_primary
operator|->
name|Unlock
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|QOnScreenRasterPaintEngine
class|class
name|QOnScreenRasterPaintEngine
super|:
specifier|public
name|QRasterPaintEngine
block|{
public|public:
comment|// The image allocated here leaks... Fix if this code is ifdef'ed
comment|// in
DECL|function|QOnScreenRasterPaintEngine
name|QOnScreenRasterPaintEngine
parameter_list|()
member_init_list|:
name|QRasterPaintEngine
argument_list|(
operator|new
name|QImage
argument_list|(
name|qt_primary_surface_bits
argument_list|,
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|width
argument_list|()
argument_list|,
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|height
argument_list|()
argument_list|,
name|qt_primary_surface_stride
argument_list|,
name|qt_primary_surface_format
argument_list|)
argument_list|)
block|{
name|device
operator|=
cast|static_cast
argument_list|<
name|QImage
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
operator|->
name|device
argument_list|)
expr_stmt|;
block|}
DECL|function|begin
name|bool
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
parameter_list|)
block|{
name|QRegion
name|clip
init|=
name|systemClip
argument_list|()
decl_stmt|;
name|originalSystemClip
operator|=
name|clip
expr_stmt|;
name|clip
operator|.
name|translate
argument_list|(
name|widget
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setSystemClip
argument_list|(
name|clip
argument_list|)
expr_stmt|;
name|QRect
name|bounds
init|=
name|clip
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
name|DDSURFACEDESC
name|surface
decl_stmt|;
name|surface
operator|.
name|dwSize
operator|=
sizeof|sizeof
argument_list|(
name|DDSURFACEDESC
argument_list|)
expr_stmt|;
name|HRESULT
name|res
init|=
name|qt_ddraw_primary
operator|->
name|Lock
argument_list|(
operator|(
name|RECT
operator|*
operator|)
operator|&
name|bounds
argument_list|,
operator|&
name|surface
argument_list|,
name|DDLOCK_WAIT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
name|DD_OK
condition|)
block|{
name|qWarning
argument_list|(
literal|"QWidget painting: locking onscreen bits failed: %d\n"
argument_list|,
name|res
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|surface
operator|.
name|lpSurface
operator|==
name|qt_primary_surface_bits
condition|)
block|{
name|qt_primary_surface_bits
operator|=
operator|(
name|uchar
operator|*
operator|)
name|surface
operator|.
name|lpSurface
expr_stmt|;
name|device
operator|->
name|data_ptr
argument_list|()
operator|->
name|data
operator|=
name|qt_primary_surface_bits
expr_stmt|;
block|}
return|return
name|QRasterPaintEngine
operator|::
name|begin
argument_list|(
name|device
argument_list|)
return|;
block|}
DECL|function|end
name|bool
name|end
parameter_list|()
block|{
name|HRESULT
name|res
init|=
name|qt_ddraw_primary
operator|->
name|Unlock
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
name|DD_OK
condition|)
name|qWarning
argument_list|(
literal|"QWidget::paint, failed to unlock DirectDraw surface: %d"
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|bool
name|ok
init|=
name|QRasterPaintEngine
operator|::
name|end
argument_list|()
decl_stmt|;
name|setSystemClip
argument_list|(
name|originalSystemClip
argument_list|)
expr_stmt|;
return|return
name|ok
return|;
block|}
DECL|function|coordinateOffset
name|QPoint
name|coordinateOffset
parameter_list|()
specifier|const
block|{
return|return
operator|-
name|widget
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
DECL|member|widget
specifier|const
name|QWidget
modifier|*
name|widget
decl_stmt|;
DECL|member|device
name|QImage
modifier|*
name|device
decl_stmt|;
DECL|member|originalSystemClip
name|QRegion
name|originalSystemClip
decl_stmt|;
block|}
class|;
name|Q_GLOBAL_STATIC
argument_list|(
argument|QOnScreenRasterPaintEngine
argument_list|,
argument|onScreenPaintEngine
argument_list|)
else|#
directive|else
name|void
name|qt_win_initialize_directdraw
parameter_list|()
block|{ }
endif|#
directive|endif
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|QWidget
operator|::
name|paintEngine
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_DIRECTDRAW
name|QOnScreenRasterPaintEngine
modifier|*
name|pe
init|=
name|onScreenPaintEngine
argument_list|()
decl_stmt|;
name|pe
operator|->
name|widget
operator|=
name|this
expr_stmt|;
return|return
name|pe
return|;
endif|#
directive|endif
comment|// We set this bit which is checked in setAttribute for
comment|// Qt::WA_PaintOnScreen. We do this to allow these two scenarios:
comment|//
comment|// 1. Users accidentally set Qt::WA_PaintOnScreen on X and port to
comment|// windows which would mean suddenly their widgets stop working.
comment|//
comment|// 2. Users set paint on screen and subclass paintEngine() to
comment|// return 0, in which case we have a "hole" in the backingstore
comment|// allowing use of GDI or DirectX directly.
comment|//
comment|// 1 is WRONG, but to minimize silent failures, we have set this
comment|// bit to ignore the setAttribute call. 2. needs to be
comment|// supported because its our only means of embeddeding native
comment|// graphics stuff.
cast|const_cast
argument_list|<
name|QWidgetPrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
operator|->
name|noPaintOnScreen
operator|=
literal|1
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|createDefaultWindowSurface_sys
name|QWindowSurface
modifier|*
name|QWidgetPrivate
operator|::
name|createDefaultWindowSurface_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
return|return
operator|new
name|QRasterWindowSurface
argument_list|(
name|q
argument_list|)
return|;
block|}
DECL|function|setModal_sys
name|void
name|QWidgetPrivate
operator|::
name|setModal_sys
parameter_list|()
block|{ }
DECL|function|registerTouchWindow
name|void
name|QWidgetPrivate
operator|::
name|registerTouchWindow
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
comment|// enable WM_TOUCH* messages on our window
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
operator|&&
name|QApplicationPrivate
operator|::
name|RegisterTouchWindow
operator|&&
name|q
operator|->
name|windowType
argument_list|()
operator|!=
name|Qt
operator|::
name|Desktop
condition|)
name|QApplicationPrivate
operator|::
name|RegisterTouchWindow
argument_list|(
name|q
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|function|winSetupGestures
name|void
name|QWidgetPrivate
operator|::
name|winSetupGestures
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_GESTURES
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_NATIVE_GESTURES
argument_list|)
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|||
operator|!
name|q
operator|->
name|isVisible
argument_list|()
operator|||
operator|!
name|nativeGesturePanEnabled
condition|)
return|return;
if|if
condition|(
operator|!
name|QApplicationPrivate
operator|::
name|HasTouchSupport
condition|)
return|return;
name|QApplicationPrivate
modifier|*
name|qAppPriv
init|=
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qAppPriv
operator|->
name|SetGestureConfig
condition|)
return|return;
name|WId
name|winid
init|=
name|q
operator|->
name|internalWinId
argument_list|()
decl_stmt|;
name|bool
name|needh
init|=
literal|false
decl_stmt|;
name|bool
name|needv
init|=
literal|false
decl_stmt|;
name|bool
name|singleFingerPanEnabled
init|=
literal|false
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SCROLLAREA
if|if
condition|(
name|QAbstractScrollArea
modifier|*
name|asa
init|=
name|qobject_cast
argument_list|<
name|QAbstractScrollArea
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|parent
argument_list|()
argument_list|)
condition|)
block|{
name|QScrollBar
modifier|*
name|hbar
init|=
name|asa
operator|->
name|horizontalScrollBar
argument_list|()
decl_stmt|;
name|QScrollBar
modifier|*
name|vbar
init|=
name|asa
operator|->
name|verticalScrollBar
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|ScrollBarPolicy
name|hbarpolicy
init|=
name|asa
operator|->
name|horizontalScrollBarPolicy
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|ScrollBarPolicy
name|vbarpolicy
init|=
name|asa
operator|->
name|verticalScrollBarPolicy
argument_list|()
decl_stmt|;
name|needh
operator|=
operator|(
name|hbarpolicy
operator|==
name|Qt
operator|::
name|ScrollBarAlwaysOn
operator|||
operator|(
name|hbarpolicy
operator|==
name|Qt
operator|::
name|ScrollBarAsNeeded
operator|&&
name|hbar
operator|->
name|minimum
argument_list|()
operator|<
name|hbar
operator|->
name|maximum
argument_list|()
operator|)
operator|)
expr_stmt|;
name|needv
operator|=
operator|(
name|vbarpolicy
operator|==
name|Qt
operator|::
name|ScrollBarAlwaysOn
operator|||
operator|(
name|vbarpolicy
operator|==
name|Qt
operator|::
name|ScrollBarAsNeeded
operator|&&
name|vbar
operator|->
name|minimum
argument_list|()
operator|<
name|vbar
operator|->
name|maximum
argument_list|()
operator|)
operator|)
expr_stmt|;
name|singleFingerPanEnabled
operator|=
name|asa
operator|->
name|d_func
argument_list|()
operator|->
name|singleFingerPanEnabled
expr_stmt|;
if|if
condition|(
operator|!
name|winid
condition|)
block|{
name|winid
operator|=
name|q
operator|->
name|winId
argument_list|()
expr_stmt|;
comment|// enforces the native winid on the viewport
block|}
block|}
endif|#
directive|endif
comment|//QT_NO_SCROLLAREA
if|if
condition|(
name|winid
condition|)
block|{
name|GESTURECONFIG
name|gc
index|[
literal|1
index|]
decl_stmt|;
name|memset
argument_list|(
name|gc
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|gc
argument_list|)
argument_list|)
expr_stmt|;
name|gc
index|[
literal|0
index|]
operator|.
name|dwID
operator|=
name|GID_PAN
expr_stmt|;
if|if
condition|(
name|nativeGesturePanEnabled
condition|)
block|{
name|gc
index|[
literal|0
index|]
operator|.
name|dwWant
operator|=
name|GC_PAN
expr_stmt|;
if|if
condition|(
name|needv
operator|&&
name|singleFingerPanEnabled
condition|)
name|gc
index|[
literal|0
index|]
operator|.
name|dwWant
operator||=
name|GC_PAN_WITH_SINGLE_FINGER_VERTICALLY
expr_stmt|;
else|else
name|gc
index|[
literal|0
index|]
operator|.
name|dwBlock
operator||=
name|GC_PAN_WITH_SINGLE_FINGER_VERTICALLY
expr_stmt|;
if|if
condition|(
name|needh
operator|&&
name|singleFingerPanEnabled
condition|)
name|gc
index|[
literal|0
index|]
operator|.
name|dwWant
operator||=
name|GC_PAN_WITH_SINGLE_FINGER_HORIZONTALLY
expr_stmt|;
else|else
name|gc
index|[
literal|0
index|]
operator|.
name|dwBlock
operator||=
name|GC_PAN_WITH_SINGLE_FINGER_HORIZONTALLY
expr_stmt|;
block|}
else|else
block|{
name|gc
index|[
literal|0
index|]
operator|.
name|dwBlock
operator|=
name|GC_PAN
expr_stmt|;
block|}
name|qAppPriv
operator|->
name|SetGestureConfig
argument_list|(
name|winid
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|gc
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|gc
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|gc
argument_list|,
sizeof|sizeof
argument_list|(
name|gc
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
name|QT_END_NAMESPACE
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WINCE
end_ifdef
begin_include
include|#
directive|include
file|"qwidget_wince.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
end_unit
