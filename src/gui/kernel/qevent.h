begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QEVENT_H
end_ifndef
begin_define
DECL|macro|QEVENT_H
define|#
directive|define
name|QEVENT_H
end_define
begin_include
include|#
directive|include
file|<QtGui/qwindowdefs.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qobject.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qregion.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qnamespace.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qkeysequence.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qcoreevent.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qmime.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qdrag.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvariant.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmap.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qset.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qfile.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
end_ifdef
begin_decl_stmt
DECL|variable|RFile
name|class
name|RFile
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Gui
argument_list|)
name|class
name|QAction
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
end_ifndef
begin_decl_stmt
DECL|variable|QGesture
name|class
name|QGesture
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QInputEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QInputEvent
argument_list|(
argument|Type type
argument_list|,
argument|Qt::KeyboardModifiers modifiers = Qt::NoModifier
argument_list|)
block|;
operator|~
name|QInputEvent
argument_list|()
block|;
specifier|inline
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
argument_list|()
specifier|const
block|{
return|return
name|modState
return|;
block|}
specifier|inline
name|void
name|setModifiers
argument_list|(
argument|Qt::KeyboardModifiers amodifiers
argument_list|)
block|{
name|modState
operator|=
name|amodifiers
block|; }
name|protected
operator|:
name|Qt
operator|::
name|KeyboardModifiers
name|modState
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QMouseEvent
range|:
name|public
name|QInputEvent
block|{
name|public
operator|:
name|QMouseEvent
argument_list|(
argument|Type type
argument_list|,
argument|const QPoint&pos
argument_list|,
argument|Qt::MouseButton button
argument_list|,
argument|Qt::MouseButtons buttons
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|)
block|;
name|QMouseEvent
argument_list|(
argument|Type type
argument_list|,
argument|const QPoint&pos
argument_list|,
argument|const QPoint&globalPos
argument_list|,
argument|Qt::MouseButton button
argument_list|,
argument|Qt::MouseButtons buttons
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|)
block|;
operator|~
name|QMouseEvent
argument_list|()
block|;
specifier|inline
specifier|const
name|QPoint
operator|&
name|pos
argument_list|()
specifier|const
block|{
return|return
name|p
return|;
block|}
specifier|inline
specifier|const
name|QPoint
operator|&
name|globalPos
argument_list|()
specifier|const
block|{
return|return
name|g
return|;
block|}
specifier|inline
name|int
name|x
argument_list|()
specifier|const
block|{
return|return
name|p
operator|.
name|x
argument_list|()
return|;
block|}
specifier|inline
name|int
name|y
argument_list|()
specifier|const
block|{
return|return
name|p
operator|.
name|y
argument_list|()
return|;
block|}
specifier|inline
name|int
name|globalX
argument_list|()
specifier|const
block|{
return|return
name|g
operator|.
name|x
argument_list|()
return|;
block|}
specifier|inline
name|int
name|globalY
argument_list|()
specifier|const
block|{
return|return
name|g
operator|.
name|y
argument_list|()
return|;
block|}
specifier|inline
name|Qt
operator|::
name|MouseButton
name|button
argument_list|()
specifier|const
block|{
return|return
name|b
return|;
block|}
specifier|inline
name|Qt
operator|::
name|MouseButtons
name|buttons
argument_list|()
specifier|const
block|{
return|return
name|mouseState
return|;
block|}
specifier|static
name|QMouseEvent
operator|*
name|createExtendedMouseEvent
argument_list|(
argument|Type type
argument_list|,
argument|const QPointF&pos
argument_list|,
argument|const QPoint&globalPos
argument_list|,
argument|Qt::MouseButton button
argument_list|,
argument|Qt::MouseButtons buttons
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|)
block|;
specifier|inline
name|bool
name|hasExtendedInfo
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|QMouseEvent
operator|*
operator|>
operator|(
name|d
operator|)
operator|==
name|this
return|;
block|}
name|QPointF
name|posF
argument_list|()
specifier|const
block|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
name|QT3_SUPPORT_CONSTRUCTOR
name|QMouseEvent
argument_list|(
argument|Type type
argument_list|,
argument|const QPoint&pos
argument_list|,
argument|Qt::ButtonState button
argument_list|,
argument|int state
argument_list|)
block|;
name|QT3_SUPPORT_CONSTRUCTOR
name|QMouseEvent
argument_list|(
argument|Type type
argument_list|,
argument|const QPoint&pos
argument_list|,
argument|const QPoint&globalPos
argument_list|,
argument|Qt::ButtonState button
argument_list|,
argument|int state
argument_list|)
block|;
specifier|inline
name|QT3_SUPPORT
name|Qt
operator|::
name|ButtonState
name|state
argument_list|()
specifier|const
block|{
return|return
name|Qt
operator|::
name|ButtonState
argument_list|(
operator|(
name|mouseState
operator|^
name|b
operator|)
operator||
name|int
argument_list|(
name|modifiers
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|inline
name|QT3_SUPPORT
name|Qt
operator|::
name|ButtonState
name|stateAfter
argument_list|()
specifier|const
block|{
return|return
name|Qt
operator|::
name|ButtonState
argument_list|(
name|int
argument_list|(
name|mouseState
argument_list|)
operator||
name|int
argument_list|(
name|modifiers
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
endif|#
directive|endif
name|protected
operator|:
name|QPoint
name|p
block|,
name|g
block|;
name|Qt
operator|::
name|MouseButton
name|b
block|;
name|Qt
operator|::
name|MouseButtons
name|mouseState
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QHoverEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QHoverEvent
argument_list|(
argument|Type type
argument_list|,
argument|const QPoint&pos
argument_list|,
argument|const QPoint&oldPos
argument_list|)
block|;
operator|~
name|QHoverEvent
argument_list|()
block|;
specifier|inline
specifier|const
name|QPoint
operator|&
name|pos
argument_list|()
specifier|const
block|{
return|return
name|p
return|;
block|}
specifier|inline
specifier|const
name|QPoint
operator|&
name|oldPos
argument_list|()
specifier|const
block|{
return|return
name|op
return|;
block|}
name|protected
operator|:
name|QPoint
name|p
block|,
name|op
block|; }
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
end_ifndef
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWheelEvent
range|:
name|public
name|QInputEvent
block|{
name|public
operator|:
name|QWheelEvent
argument_list|(
argument|const QPoint&pos
argument_list|,
argument|int delta
argument_list|,
argument|Qt::MouseButtons buttons
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|,
argument|Qt::Orientation orient = Qt::Vertical
argument_list|)
block|;
name|QWheelEvent
argument_list|(
argument|const QPoint&pos
argument_list|,
argument|const QPoint& globalPos
argument_list|,
argument|int delta
argument_list|,
argument|Qt::MouseButtons buttons
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|,
argument|Qt::Orientation orient = Qt::Vertical
argument_list|)
block|;
operator|~
name|QWheelEvent
argument_list|()
block|;
specifier|inline
name|int
name|delta
argument_list|()
specifier|const
block|{
return|return
name|d
return|;
block|}
specifier|inline
specifier|const
name|QPoint
operator|&
name|pos
argument_list|()
specifier|const
block|{
return|return
name|p
return|;
block|}
specifier|inline
specifier|const
name|QPoint
operator|&
name|globalPos
argument_list|()
specifier|const
block|{
return|return
name|g
return|;
block|}
specifier|inline
name|int
name|x
argument_list|()
specifier|const
block|{
return|return
name|p
operator|.
name|x
argument_list|()
return|;
block|}
specifier|inline
name|int
name|y
argument_list|()
specifier|const
block|{
return|return
name|p
operator|.
name|y
argument_list|()
return|;
block|}
specifier|inline
name|int
name|globalX
argument_list|()
specifier|const
block|{
return|return
name|g
operator|.
name|x
argument_list|()
return|;
block|}
specifier|inline
name|int
name|globalY
argument_list|()
specifier|const
block|{
return|return
name|g
operator|.
name|y
argument_list|()
return|;
block|}
specifier|inline
name|Qt
operator|::
name|MouseButtons
name|buttons
argument_list|()
specifier|const
block|{
return|return
name|mouseState
return|;
block|}
name|Qt
operator|::
name|Orientation
name|orientation
argument_list|()
specifier|const
block|{
return|return
name|o
return|;
block|}
ifdef|#
directive|ifdef
name|QT3_SUPPORT
name|QT3_SUPPORT_CONSTRUCTOR
name|QWheelEvent
argument_list|(
argument|const QPoint&pos
argument_list|,
argument|int delta
argument_list|,
argument|int state
argument_list|,
argument|Qt::Orientation orient = Qt::Vertical
argument_list|)
block|;
name|QT3_SUPPORT_CONSTRUCTOR
name|QWheelEvent
argument_list|(
argument|const QPoint&pos
argument_list|,
argument|const QPoint& globalPos
argument_list|,
argument|int delta
argument_list|,
argument|int state
argument_list|,
argument|Qt::Orientation orient = Qt::Vertical
argument_list|)
block|;
specifier|inline
name|QT3_SUPPORT
name|Qt
operator|::
name|ButtonState
name|state
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|Qt
operator|::
name|ButtonState
operator|>
operator|(
name|int
argument_list|(
name|buttons
argument_list|()
argument_list|)
operator||
name|int
argument_list|(
name|modifiers
argument_list|()
argument_list|)
operator|)
return|;
block|}
endif|#
directive|endif
name|protected
operator|:
name|QPoint
name|p
block|;
name|QPoint
name|g
block|;
name|int
name|d
block|;
name|Qt
operator|::
name|MouseButtons
name|mouseState
block|;
name|Qt
operator|::
name|Orientation
name|o
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
end_ifndef
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QTabletEvent
range|:
name|public
name|QInputEvent
block|{
name|public
operator|:
expr|enum
name|TabletDevice
block|{
name|NoDevice
block|,
name|Puck
block|,
name|Stylus
block|,
name|Airbrush
block|,
name|FourDMouse
block|,
name|XFreeEraser
comment|/*internal*/
block|,
name|RotationStylus
block|}
block|;     enum
name|PointerType
block|{
name|UnknownPointer
block|,
name|Pen
block|,
name|Cursor
block|,
name|Eraser
block|}
block|;
name|QTabletEvent
argument_list|(
argument|Type t
argument_list|,
argument|const QPoint&pos
argument_list|,
argument|const QPoint&globalPos
argument_list|,
argument|const QPointF&hiResGlobalPos
argument_list|,
argument|int device
argument_list|,
argument|int pointerType
argument_list|,
argument|qreal pressure
argument_list|,
argument|int xTilt
argument_list|,
argument|int yTilt
argument_list|,
argument|qreal tangentialPressure
argument_list|,
argument|qreal rotation
argument_list|,
argument|int z
argument_list|,
argument|Qt::KeyboardModifiers keyState
argument_list|,
argument|qint64 uniqueID
argument_list|)
block|;
operator|~
name|QTabletEvent
argument_list|()
block|;
specifier|inline
specifier|const
name|QPoint
operator|&
name|pos
argument_list|()
specifier|const
block|{
return|return
name|mPos
return|;
block|}
specifier|inline
specifier|const
name|QPoint
operator|&
name|globalPos
argument_list|()
specifier|const
block|{
return|return
name|mGPos
return|;
block|}
specifier|inline
specifier|const
name|QPointF
operator|&
name|hiResGlobalPos
argument_list|()
specifier|const
block|{
return|return
name|mHiResGlobalPos
return|;
block|}
specifier|inline
name|int
name|x
argument_list|()
specifier|const
block|{
return|return
name|mPos
operator|.
name|x
argument_list|()
return|;
block|}
specifier|inline
name|int
name|y
argument_list|()
specifier|const
block|{
return|return
name|mPos
operator|.
name|y
argument_list|()
return|;
block|}
specifier|inline
name|int
name|globalX
argument_list|()
specifier|const
block|{
return|return
name|mGPos
operator|.
name|x
argument_list|()
return|;
block|}
specifier|inline
name|int
name|globalY
argument_list|()
specifier|const
block|{
return|return
name|mGPos
operator|.
name|y
argument_list|()
return|;
block|}
specifier|inline
name|qreal
name|hiResGlobalX
argument_list|()
specifier|const
block|{
return|return
name|mHiResGlobalPos
operator|.
name|x
argument_list|()
return|;
block|}
specifier|inline
name|qreal
name|hiResGlobalY
argument_list|()
specifier|const
block|{
return|return
name|mHiResGlobalPos
operator|.
name|y
argument_list|()
return|;
block|}
specifier|inline
name|TabletDevice
name|device
argument_list|()
specifier|const
block|{
return|return
name|TabletDevice
argument_list|(
name|mDev
argument_list|)
return|;
block|}
specifier|inline
name|PointerType
name|pointerType
argument_list|()
specifier|const
block|{
return|return
name|PointerType
argument_list|(
name|mPointerType
argument_list|)
return|;
block|}
specifier|inline
name|qint64
name|uniqueId
argument_list|()
specifier|const
block|{
return|return
name|mUnique
return|;
block|}
specifier|inline
name|qreal
name|pressure
argument_list|()
specifier|const
block|{
return|return
name|mPress
return|;
block|}
specifier|inline
name|int
name|z
argument_list|()
specifier|const
block|{
return|return
name|mZ
return|;
block|}
specifier|inline
name|qreal
name|tangentialPressure
argument_list|()
specifier|const
block|{
return|return
name|mTangential
return|;
block|}
specifier|inline
name|qreal
name|rotation
argument_list|()
specifier|const
block|{
return|return
name|mRot
return|;
block|}
specifier|inline
name|int
name|xTilt
argument_list|()
specifier|const
block|{
return|return
name|mXT
return|;
block|}
specifier|inline
name|int
name|yTilt
argument_list|()
specifier|const
block|{
return|return
name|mYT
return|;
block|}
name|protected
operator|:
name|QPoint
name|mPos
block|,
name|mGPos
block|;
name|QPointF
name|mHiResGlobalPos
block|;
name|int
name|mDev
block|,
name|mPointerType
block|,
name|mXT
block|,
name|mYT
block|,
name|mZ
block|;
name|qreal
name|mPress
block|,
name|mTangential
block|,
name|mRot
block|;
name|qint64
name|mUnique
block|;
comment|// I don't know what the future holds for tablets but there could be some
comment|// new devices coming along, and there seem to be "holes" in the
comment|// OS-specific events for this.
name|void
operator|*
name|mExtra
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TABLETEVENT
end_comment
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QKeyEvent
range|:
name|public
name|QInputEvent
block|{
name|public
operator|:
name|QKeyEvent
argument_list|(
argument|Type type
argument_list|,
argument|int key
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|,
argument|const QString& text = QString()
argument_list|,
argument|bool autorep = false
argument_list|,
argument|ushort count =
literal|1
argument_list|)
block|;
operator|~
name|QKeyEvent
argument_list|()
block|;
name|int
name|key
argument_list|()
specifier|const
block|{
return|return
name|k
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|bool
name|matches
argument_list|(
argument|QKeySequence::StandardKey key
argument_list|)
specifier|const
block|;
endif|#
directive|endif
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
argument_list|()
specifier|const
block|;
specifier|inline
name|QString
name|text
argument_list|()
specifier|const
block|{
return|return
name|txt
return|;
block|}
specifier|inline
name|bool
name|isAutoRepeat
argument_list|()
specifier|const
block|{
return|return
name|autor
return|;
block|}
specifier|inline
name|int
name|count
argument_list|()
specifier|const
block|{
return|return
name|int
argument_list|(
name|c
argument_list|)
return|;
block|}
comment|// Functions for the extended key event information
specifier|static
name|QKeyEvent
operator|*
name|createExtendedKeyEvent
argument_list|(
argument|Type type
argument_list|,
argument|int key
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|,
argument|quint32 nativeScanCode
argument_list|,
argument|quint32 nativeVirtualKey
argument_list|,
argument|quint32 nativeModifiers
argument_list|,
argument|const QString& text = QString()
argument_list|,
argument|bool autorep = false
argument_list|,
argument|ushort count =
literal|1
argument_list|)
block|;
specifier|inline
name|bool
name|hasExtendedInfo
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|QKeyEvent
operator|*
operator|>
operator|(
name|d
operator|)
operator|==
name|this
return|;
block|}
name|quint32
name|nativeScanCode
argument_list|()
specifier|const
block|;
name|quint32
name|nativeVirtualKey
argument_list|()
specifier|const
block|;
name|quint32
name|nativeModifiers
argument_list|()
specifier|const
block|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
specifier|inline
name|QT3_SUPPORT_CONSTRUCTOR
name|QKeyEvent
argument_list|(
argument|Type type
argument_list|,
argument|int key
argument_list|,
argument|int
comment|/*ascii*/
argument_list|,
argument|int modifiers
argument_list|,
argument|const QString& text = QString()
argument_list|,
argument|bool autorep = false
argument_list|,
argument|ushort count =
literal|1
argument_list|)
operator|:
name|QInputEvent
argument_list|(
name|type
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
argument_list|(
name|modifiers
operator|&
operator|(
name|int
operator|)
name|Qt
operator|::
name|KeyButtonMask
argument_list|)
argument_list|)
block|,
name|txt
argument_list|(
name|text
argument_list|)
block|,
name|k
argument_list|(
name|key
argument_list|)
block|,
name|c
argument_list|(
name|count
argument_list|)
block|,
name|autor
argument_list|(
argument|autorep
argument_list|)
block|{
if|if
condition|(
name|key
operator|>=
name|Qt
operator|::
name|Key_Back
operator|&&
name|key
operator|<=
name|Qt
operator|::
name|Key_MediaLast
condition|)
name|ignore
argument_list|()
expr_stmt|;
block|}
specifier|inline
name|QT3_SUPPORT
name|int
name|ascii
argument_list|()
specifier|const
block|{
return|return
operator|(
name|txt
operator|.
name|length
argument_list|()
operator|?
name|txt
operator|.
name|unicode
argument_list|()
operator|->
name|toLatin1
argument_list|()
operator|:
literal|0
operator|)
return|;
block|}
specifier|inline
name|QT3_SUPPORT
name|Qt
operator|::
name|ButtonState
name|state
argument_list|()
specifier|const
block|{
return|return
name|Qt
operator|::
name|ButtonState
argument_list|(
name|QInputEvent
operator|::
name|modifiers
argument_list|()
argument_list|)
return|;
block|}
specifier|inline
name|QT3_SUPPORT
name|Qt
operator|::
name|ButtonState
name|stateAfter
argument_list|()
specifier|const
block|{
return|return
name|Qt
operator|::
name|ButtonState
argument_list|(
name|modifiers
argument_list|()
argument_list|)
return|;
block|}
endif|#
directive|endif
name|protected
operator|:
name|QString
name|txt
block|;
name|int
name|k
block|;
name|ushort
name|c
block|;
name|uint
name|autor
operator|:
literal|1
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QFocusEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QFocusEvent
argument_list|(
argument|Type type
argument_list|,
argument|Qt::FocusReason reason=Qt::OtherFocusReason
argument_list|)
block|;
operator|~
name|QFocusEvent
argument_list|()
block|;
specifier|inline
name|bool
name|gotFocus
argument_list|()
specifier|const
block|{
return|return
name|type
argument_list|()
operator|==
name|FocusIn
return|;
block|}
specifier|inline
name|bool
name|lostFocus
argument_list|()
specifier|const
block|{
return|return
name|type
argument_list|()
operator|==
name|FocusOut
return|;
block|}
ifdef|#
directive|ifdef
name|QT3_SUPPORT
expr|enum
name|Reason
block|{
name|Mouse
operator|=
name|Qt
operator|::
name|MouseFocusReason
block|,
name|Tab
operator|=
name|Qt
operator|::
name|TabFocusReason
block|,
name|Backtab
operator|=
name|Qt
operator|::
name|BacktabFocusReason
block|,
name|MenuBar
operator|=
name|Qt
operator|::
name|MenuBarFocusReason
block|,
name|ActiveWindow
operator|=
name|Qt
operator|::
name|ActiveWindowFocusReason
block|,
name|Other
operator|=
name|Qt
operator|::
name|OtherFocusReason
block|,
name|Popup
operator|=
name|Qt
operator|::
name|PopupFocusReason
block|,
name|Shortcut
operator|=
name|Qt
operator|::
name|ShortcutFocusReason
block|}
block|;
endif|#
directive|endif
name|Qt
operator|::
name|FocusReason
name|reason
argument_list|()
block|;
name|Qt
operator|::
name|FocusReason
name|reason
argument_list|()
specifier|const
block|;
name|private
operator|:
name|Qt
operator|::
name|FocusReason
name|m_reason
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QPaintEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QPaintEvent
argument_list|(
specifier|const
name|QRegion
operator|&
name|paintRegion
argument_list|)
block|;
name|QPaintEvent
argument_list|(
specifier|const
name|QRect
operator|&
name|paintRect
argument_list|)
block|;
operator|~
name|QPaintEvent
argument_list|()
block|;
specifier|inline
specifier|const
name|QRect
operator|&
name|rect
argument_list|()
specifier|const
block|{
return|return
name|m_rect
return|;
block|}
specifier|inline
specifier|const
name|QRegion
operator|&
name|region
argument_list|()
specifier|const
block|{
return|return
name|m_region
return|;
block|}
ifdef|#
directive|ifdef
name|QT3_SUPPORT
name|QT3_SUPPORT_CONSTRUCTOR
name|QPaintEvent
argument_list|(
specifier|const
name|QRegion
operator|&
name|paintRegion
argument_list|,
specifier|const
name|QRect
operator|&
name|paintRect
argument_list|)
block|;
specifier|inline
name|QT3_SUPPORT
name|bool
name|erased
argument_list|()
specifier|const
block|{
return|return
name|m_erased
return|;
block|}
specifier|inline
name|QT3_SUPPORT
name|void
name|setErased
argument_list|(
argument|bool b
argument_list|)
block|{
name|m_erased
operator|=
name|b
block|; }
endif|#
directive|endif
name|protected
operator|:
name|friend
name|class
name|QApplication
block|;
name|friend
name|class
name|QCoreApplication
block|;
name|QRect
name|m_rect
block|;
name|QRegion
name|m_region
block|;
name|bool
name|m_erased
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QUpdateLaterEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QUpdateLaterEvent
argument_list|(
specifier|const
name|QRegion
operator|&
name|paintRegion
argument_list|)
block|;
operator|~
name|QUpdateLaterEvent
argument_list|()
block|;
specifier|inline
specifier|const
name|QRegion
operator|&
name|region
argument_list|()
specifier|const
block|{
return|return
name|m_region
return|;
block|}
name|protected
operator|:
name|QRegion
name|m_region
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QMoveEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QMoveEvent
argument_list|(
specifier|const
name|QPoint
operator|&
name|pos
argument_list|,
specifier|const
name|QPoint
operator|&
name|oldPos
argument_list|)
block|;
operator|~
name|QMoveEvent
argument_list|()
block|;
specifier|inline
specifier|const
name|QPoint
operator|&
name|pos
argument_list|()
specifier|const
block|{
return|return
name|p
return|;
block|}
specifier|inline
specifier|const
name|QPoint
operator|&
name|oldPos
argument_list|()
specifier|const
block|{
return|return
name|oldp
return|;
block|}
name|protected
operator|:
name|QPoint
name|p
block|,
name|oldp
block|;
name|friend
name|class
name|QApplication
block|;
name|friend
name|class
name|QCoreApplication
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QResizeEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QResizeEvent
argument_list|(
specifier|const
name|QSize
operator|&
name|size
argument_list|,
specifier|const
name|QSize
operator|&
name|oldSize
argument_list|)
block|;
operator|~
name|QResizeEvent
argument_list|()
block|;
specifier|inline
specifier|const
name|QSize
operator|&
name|size
argument_list|()
specifier|const
block|{
return|return
name|s
return|;
block|}
specifier|inline
specifier|const
name|QSize
operator|&
name|oldSize
argument_list|()
specifier|const
block|{
return|return
name|olds
return|;
block|}
name|protected
operator|:
name|QSize
name|s
block|,
name|olds
block|;
name|friend
name|class
name|QApplication
block|;
name|friend
name|class
name|QCoreApplication
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QCloseEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QCloseEvent
argument_list|()
block|;
operator|~
name|QCloseEvent
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QIconDragEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QIconDragEvent
argument_list|()
block|;
operator|~
name|QIconDragEvent
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QShowEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QShowEvent
argument_list|()
block|;
operator|~
name|QShowEvent
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QHideEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QHideEvent
argument_list|()
block|;
operator|~
name|QHideEvent
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
end_ifndef
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QContextMenuEvent
range|:
name|public
name|QInputEvent
block|{
name|public
operator|:
expr|enum
name|Reason
block|{
name|Mouse
block|,
name|Keyboard
block|,
name|Other
block|}
block|;
name|QContextMenuEvent
argument_list|(
argument|Reason reason
argument_list|,
argument|const QPoint&pos
argument_list|,
argument|const QPoint&globalPos
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|)
block|;
name|QContextMenuEvent
argument_list|(
argument|Reason reason
argument_list|,
argument|const QPoint&pos
argument_list|,
argument|const QPoint&globalPos
argument_list|)
block|;
name|QContextMenuEvent
argument_list|(
argument|Reason reason
argument_list|,
argument|const QPoint&pos
argument_list|)
block|;
operator|~
name|QContextMenuEvent
argument_list|()
block|;
specifier|inline
name|int
name|x
argument_list|()
specifier|const
block|{
return|return
name|p
operator|.
name|x
argument_list|()
return|;
block|}
specifier|inline
name|int
name|y
argument_list|()
specifier|const
block|{
return|return
name|p
operator|.
name|y
argument_list|()
return|;
block|}
specifier|inline
name|int
name|globalX
argument_list|()
specifier|const
block|{
return|return
name|gp
operator|.
name|x
argument_list|()
return|;
block|}
specifier|inline
name|int
name|globalY
argument_list|()
specifier|const
block|{
return|return
name|gp
operator|.
name|y
argument_list|()
return|;
block|}
specifier|inline
specifier|const
name|QPoint
operator|&
name|pos
argument_list|()
specifier|const
block|{
return|return
name|p
return|;
block|}
specifier|inline
specifier|const
name|QPoint
operator|&
name|globalPos
argument_list|()
specifier|const
block|{
return|return
name|gp
return|;
block|}
specifier|inline
name|Reason
name|reason
argument_list|()
specifier|const
block|{
return|return
name|Reason
argument_list|(
name|reas
argument_list|)
return|;
block|}
ifdef|#
directive|ifdef
name|QT3_SUPPORT
name|QT3_SUPPORT_CONSTRUCTOR
name|QContextMenuEvent
argument_list|(
argument|Reason reason
argument_list|,
argument|const QPoint&pos
argument_list|,
argument|const QPoint&globalPos
argument_list|,
argument|int
argument_list|)
block|;
name|QT3_SUPPORT_CONSTRUCTOR
name|QContextMenuEvent
argument_list|(
argument|Reason reason
argument_list|,
argument|const QPoint&pos
argument_list|,
argument|int
argument_list|)
block|;
name|QT3_SUPPORT
name|Qt
operator|::
name|ButtonState
name|state
argument_list|()
specifier|const
block|;
endif|#
directive|endif
name|protected
operator|:
name|QPoint
name|p
block|;
name|QPoint
name|gp
block|;
name|uint
name|reas
operator|:
literal|8
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CONTEXTMENU
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_INPUTMETHOD
end_ifndef
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QInputMethodEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
expr|enum
name|AttributeType
block|{
name|TextFormat
block|,
name|Cursor
block|,
name|Language
block|,
name|Ruby
block|,
name|Selection
block|}
block|;
name|class
name|Attribute
block|{
name|public
operator|:
name|Attribute
argument_list|(
argument|AttributeType t
argument_list|,
argument|int s
argument_list|,
argument|int l
argument_list|,
argument|QVariant val
argument_list|)
operator|:
name|type
argument_list|(
name|t
argument_list|)
block|,
name|start
argument_list|(
name|s
argument_list|)
block|,
name|length
argument_list|(
name|l
argument_list|)
block|,
name|value
argument_list|(
argument|val
argument_list|)
block|{}
name|AttributeType
name|type
block|;
name|int
name|start
block|;
name|int
name|length
block|;
name|QVariant
name|value
block|;     }
block|;
name|QInputMethodEvent
argument_list|()
block|;
name|QInputMethodEvent
argument_list|(
specifier|const
name|QString
operator|&
name|preeditText
argument_list|,
specifier|const
name|QList
operator|<
name|Attribute
operator|>
operator|&
name|attributes
argument_list|)
block|;
name|void
name|setCommitString
argument_list|(
argument|const QString&commitString
argument_list|,
argument|int replaceFrom =
literal|0
argument_list|,
argument|int replaceLength =
literal|0
argument_list|)
block|;
specifier|inline
specifier|const
name|QList
operator|<
name|Attribute
operator|>
operator|&
name|attributes
argument_list|()
specifier|const
block|{
return|return
name|attrs
return|;
block|}
specifier|inline
specifier|const
name|QString
operator|&
name|preeditString
argument_list|()
specifier|const
block|{
return|return
name|preedit
return|;
block|}
specifier|inline
specifier|const
name|QString
operator|&
name|commitString
argument_list|()
specifier|const
block|{
return|return
name|commit
return|;
block|}
specifier|inline
name|int
name|replacementStart
argument_list|()
specifier|const
block|{
return|return
name|replace_from
return|;
block|}
specifier|inline
name|int
name|replacementLength
argument_list|()
specifier|const
block|{
return|return
name|replace_length
return|;
block|}
name|QInputMethodEvent
argument_list|(
specifier|const
name|QInputMethodEvent
operator|&
name|other
argument_list|)
block|;
name|private
operator|:
name|QString
name|preedit
block|;
name|QList
operator|<
name|Attribute
operator|>
name|attrs
block|;
name|QString
name|commit
block|;
name|int
name|replace_from
block|;
name|int
name|replace_length
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_INPUTMETHOD
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_decl_stmt
DECL|variable|QMimeData
name|class
name|QMimeData
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QEvent
name|class
name|Q_GUI_EXPORT
name|QDropEvent
range|:
name|public
name|QEvent
comment|// QT3_SUPPORT
decl_stmt|,
name|public
name|QMimeSource
comment|// END QT3_SUPPORT
block|{
name|public
label|:
name|QDropEvent
argument_list|(
argument|const QPoint& pos
argument_list|,
argument|Qt::DropActions actions
argument_list|,
argument|const QMimeData *data
argument_list|,
argument|Qt::MouseButtons buttons
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|,
argument|Type type = Drop
argument_list|)
empty_stmt|;
operator|~
name|QDropEvent
argument_list|()
expr_stmt|;
specifier|inline
specifier|const
name|QPoint
operator|&
name|pos
argument_list|()
specifier|const
block|{
return|return
name|p
return|;
block|}
specifier|inline
name|Qt
operator|::
name|MouseButtons
name|mouseButtons
argument_list|()
specifier|const
block|{
return|return
name|mouseState
return|;
block|}
specifier|inline
name|Qt
operator|::
name|KeyboardModifiers
name|keyboardModifiers
argument_list|()
specifier|const
block|{
return|return
name|modState
return|;
block|}
specifier|inline
name|Qt
operator|::
name|DropActions
name|possibleActions
argument_list|()
specifier|const
block|{
return|return
name|act
return|;
block|}
specifier|inline
name|Qt
operator|::
name|DropAction
name|proposedAction
argument_list|()
specifier|const
block|{
return|return
name|default_action
return|;
block|}
specifier|inline
name|void
name|acceptProposedAction
parameter_list|()
block|{
name|drop_action
operator|=
name|default_action
expr_stmt|;
name|accept
argument_list|()
expr_stmt|;
block|}
specifier|inline
name|Qt
operator|::
name|DropAction
name|dropAction
argument_list|()
specifier|const
block|{
return|return
name|drop_action
return|;
block|}
name|void
name|setDropAction
argument_list|(
name|Qt
operator|::
name|DropAction
name|action
argument_list|)
decl_stmt|;
name|QWidget
operator|*
name|source
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
specifier|const
name|QMimeData
operator|*
name|mimeData
argument_list|()
specifier|const
block|{
return|return
name|mdata
return|;
block|}
comment|// QT3_SUPPORT
specifier|const
name|char
modifier|*
name|format
argument_list|(
name|int
name|n
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|QByteArray
name|encodedData
argument_list|(
specifier|const
name|char
operator|*
argument_list|)
decl|const
decl_stmt|;
name|bool
name|provides
argument_list|(
specifier|const
name|char
operator|*
argument_list|)
decl|const
decl_stmt|;
comment|// END QT3_SUPPORT
ifdef|#
directive|ifdef
name|QT3_SUPPORT
specifier|inline
name|void
name|accept
parameter_list|()
block|{
name|QEvent
operator|::
name|accept
argument_list|()
expr_stmt|;
block|}
specifier|inline
name|QT3_SUPPORT
name|void
name|accept
parameter_list|(
name|bool
name|y
parameter_list|)
block|{
name|setAccepted
argument_list|(
name|y
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|QT3_SUPPORT
name|QByteArray
name|data
argument_list|(
specifier|const
name|char
operator|*
name|f
argument_list|)
decl|const
block|{
return|return
name|encodedData
argument_list|(
name|f
argument_list|)
return|;
block|}
enum|enum
name|Action
block|{
name|Copy
block|,
name|Link
block|,
name|Move
block|,
name|Private
block|,
name|UserAction
init|=
name|Private
block|}
enum|;
name|QT3_SUPPORT
name|Action
name|action
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QT3_SUPPORT
name|void
name|acceptAction
parameter_list|(
name|bool
name|y
init|=
name|true
parameter_list|)
block|{
if|if
condition|(
name|y
condition|)
block|{
name|drop_action
operator|=
name|default_action
expr_stmt|;
name|accept
argument_list|()
expr_stmt|;
block|}
block|}
specifier|inline
name|QT3_SUPPORT
name|void
name|setPoint
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|np
parameter_list|)
block|{
name|p
operator|=
name|np
expr_stmt|;
block|}
endif|#
directive|endif
name|protected
label|:
name|friend
name|class
name|QApplication
decl_stmt|;
name|QPoint
name|p
decl_stmt|;
name|Qt
operator|::
name|MouseButtons
name|mouseState
expr_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|modState
expr_stmt|;
name|Qt
operator|::
name|DropActions
name|act
expr_stmt|;
name|Qt
operator|::
name|DropAction
name|drop_action
expr_stmt|;
name|Qt
operator|::
name|DropAction
name|default_action
expr_stmt|;
specifier|const
name|QMimeData
modifier|*
name|mdata
decl_stmt|;
name|mutable
name|QList
operator|<
name|QByteArray
operator|>
name|fmts
expr_stmt|;
comment|// only used for QT3_SUPPORT
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QDragMoveEvent
range|:
name|public
name|QDropEvent
block|{
name|public
operator|:
name|QDragMoveEvent
argument_list|(
argument|const QPoint&pos
argument_list|,
argument|Qt::DropActions actions
argument_list|,
argument|const QMimeData *data
argument_list|,
argument|Qt::MouseButtons buttons
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|,
argument|Type type = DragMove
argument_list|)
block|;
operator|~
name|QDragMoveEvent
argument_list|()
block|;
specifier|inline
name|QRect
name|answerRect
argument_list|()
specifier|const
block|{
return|return
name|rect
return|;
block|}
specifier|inline
name|void
name|accept
argument_list|()
block|{
name|QDropEvent
operator|::
name|accept
argument_list|()
block|; }
specifier|inline
name|void
name|ignore
argument_list|()
block|{
name|QDropEvent
operator|::
name|ignore
argument_list|()
block|; }
specifier|inline
name|void
name|accept
argument_list|(
argument|const QRect& r
argument_list|)
block|{
name|accept
argument_list|()
block|;
name|rect
operator|=
name|r
block|; }
specifier|inline
name|void
name|ignore
argument_list|(
argument|const QRect& r
argument_list|)
block|{
name|ignore
argument_list|()
block|;
name|rect
operator|=
name|r
block|; }
ifdef|#
directive|ifdef
name|QT3_SUPPORT
specifier|inline
name|QT3_SUPPORT
name|void
name|accept
argument_list|(
argument|bool y
argument_list|)
block|{
name|setAccepted
argument_list|(
name|y
argument_list|)
block|; }
endif|#
directive|endif
name|protected
operator|:
name|friend
name|class
name|QApplication
block|;
name|QRect
name|rect
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QDragEnterEvent
range|:
name|public
name|QDragMoveEvent
block|{
name|public
operator|:
name|QDragEnterEvent
argument_list|(
argument|const QPoint&pos
argument_list|,
argument|Qt::DropActions actions
argument_list|,
argument|const QMimeData *data
argument_list|,
argument|Qt::MouseButtons buttons
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|)
block|;
operator|~
name|QDragEnterEvent
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* An internal class */
end_comment
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QDragResponseEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QDragResponseEvent
argument_list|(
argument|bool accepted
argument_list|)
block|;
operator|~
name|QDragResponseEvent
argument_list|()
block|;
specifier|inline
name|bool
name|dragAccepted
argument_list|()
specifier|const
block|{
return|return
name|a
return|;
block|}
name|protected
operator|:
name|bool
name|a
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QDragLeaveEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QDragLeaveEvent
argument_list|()
block|;
operator|~
name|QDragLeaveEvent
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QHelpEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QHelpEvent
argument_list|(
argument|Type type
argument_list|,
argument|const QPoint&pos
argument_list|,
argument|const QPoint&globalPos
argument_list|)
block|;
operator|~
name|QHelpEvent
argument_list|()
block|;
specifier|inline
name|int
name|x
argument_list|()
specifier|const
block|{
return|return
name|p
operator|.
name|x
argument_list|()
return|;
block|}
specifier|inline
name|int
name|y
argument_list|()
specifier|const
block|{
return|return
name|p
operator|.
name|y
argument_list|()
return|;
block|}
specifier|inline
name|int
name|globalX
argument_list|()
specifier|const
block|{
return|return
name|gp
operator|.
name|x
argument_list|()
return|;
block|}
specifier|inline
name|int
name|globalY
argument_list|()
specifier|const
block|{
return|return
name|gp
operator|.
name|y
argument_list|()
return|;
block|}
specifier|inline
specifier|const
name|QPoint
operator|&
name|pos
argument_list|()
specifier|const
block|{
return|return
name|p
return|;
block|}
specifier|inline
specifier|const
name|QPoint
operator|&
name|globalPos
argument_list|()
specifier|const
block|{
return|return
name|gp
return|;
block|}
name|private
operator|:
name|QPoint
name|p
block|;
name|QPoint
name|gp
block|; }
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STATUSTIP
end_ifndef
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QStatusTipEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QStatusTipEvent
argument_list|(
specifier|const
name|QString
operator|&
name|tip
argument_list|)
block|;
operator|~
name|QStatusTipEvent
argument_list|()
block|;
specifier|inline
name|QString
name|tip
argument_list|()
specifier|const
block|{
return|return
name|s
return|;
block|}
name|private
operator|:
name|QString
name|s
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
end_ifndef
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWhatsThisClickedEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QWhatsThisClickedEvent
argument_list|(
specifier|const
name|QString
operator|&
name|href
argument_list|)
block|;
operator|~
name|QWhatsThisClickedEvent
argument_list|()
block|;
specifier|inline
name|QString
name|href
argument_list|()
specifier|const
block|{
return|return
name|s
return|;
block|}
name|private
operator|:
name|QString
name|s
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACTION
end_ifndef
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QActionEvent
range|:
name|public
name|QEvent
block|{
name|QAction
operator|*
name|act
block|,
operator|*
name|bef
block|;
name|public
operator|:
name|QActionEvent
argument_list|(
argument|int type
argument_list|,
argument|QAction *action
argument_list|,
argument|QAction *before =
literal|0
argument_list|)
block|;
operator|~
name|QActionEvent
argument_list|()
block|;
specifier|inline
name|QAction
operator|*
name|action
argument_list|()
specifier|const
block|{
return|return
name|act
return|;
block|}
specifier|inline
name|QAction
operator|*
name|before
argument_list|()
specifier|const
block|{
return|return
name|bef
return|;
block|}
expr|}
block|;
endif|#
directive|endif
name|class
name|Q_GUI_EXPORT
name|QFileOpenEvent
operator|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QFileOpenEvent
argument_list|(
specifier|const
name|QString
operator|&
name|file
argument_list|)
block|;
name|QFileOpenEvent
argument_list|(
specifier|const
name|QUrl
operator|&
name|url
argument_list|)
block|;
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|QFileOpenEvent
argument_list|(
specifier|const
name|RFile
operator|&
name|fileHandle
argument_list|)
block|;
endif|#
directive|endif
operator|~
name|QFileOpenEvent
argument_list|()
block|;
specifier|inline
name|QString
name|file
argument_list|()
specifier|const
block|{
return|return
name|f
return|;
block|}
name|QUrl
name|url
argument_list|()
specifier|const
block|;
name|bool
name|openFile
argument_list|(
argument|QFile&file
argument_list|,
argument|QIODevice::OpenMode flags
argument_list|)
specifier|const
block|;
name|private
operator|:
name|QString
name|f
block|; }
block|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
name|class
name|Q_GUI_EXPORT
name|QToolBarChangeEvent
operator|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QToolBarChangeEvent
argument_list|(
argument|bool t
argument_list|)
block|;
operator|~
name|QToolBarChangeEvent
argument_list|()
block|;
specifier|inline
name|bool
name|toggle
argument_list|()
specifier|const
block|{
return|return
name|tog
return|;
block|}
name|private
operator|:
name|uint
name|tog
operator|:
literal|1
block|; }
block|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|class
name|Q_GUI_EXPORT
name|QShortcutEvent
operator|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QShortcutEvent
argument_list|(
argument|const QKeySequence&key
argument_list|,
argument|int id
argument_list|,
argument|bool ambiguous = false
argument_list|)
block|;
operator|~
name|QShortcutEvent
argument_list|()
block|;
specifier|inline
specifier|const
name|QKeySequence
operator|&
name|key
argument_list|()
block|{
return|return
name|sequence
return|;
block|}
specifier|inline
specifier|const
name|QKeySequence
operator|&
name|key
argument_list|()
specifier|const
block|{
return|return
name|sequence
return|;
block|}
specifier|inline
name|int
name|shortcutId
argument_list|()
block|{
return|return
name|sid
return|;
block|}
specifier|inline
name|int
name|shortcutId
argument_list|()
specifier|const
block|{
return|return
name|sid
return|;
block|}
specifier|inline
name|bool
name|isAmbiguous
argument_list|()
block|{
return|return
name|ambig
return|;
block|}
specifier|inline
name|bool
name|isAmbiguous
argument_list|()
specifier|const
block|{
return|return
name|ambig
return|;
block|}
name|protected
operator|:
name|QKeySequence
name|sequence
block|;
name|bool
name|ambig
block|;
name|int
name|sid
block|; }
block|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|class
name|Q_GUI_EXPORT
name|QClipboardEvent
operator|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QClipboardEvent
argument_list|(
name|QEventPrivate
operator|*
name|data
argument_list|)
block|;
operator|~
name|QClipboardEvent
argument_list|()
block|;
name|QEventPrivate
operator|*
name|data
argument_list|()
block|{
return|return
name|d
return|;
block|}
expr|}
block|;
endif|#
directive|endif
name|class
name|Q_GUI_EXPORT
name|QWindowStateChangeEvent
operator|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QWindowStateChangeEvent
argument_list|(
argument|Qt::WindowStates aOldState
argument_list|)
block|;
name|QWindowStateChangeEvent
argument_list|(
argument|Qt::WindowStates aOldState
argument_list|,
argument|bool isOverride
argument_list|)
block|;
operator|~
name|QWindowStateChangeEvent
argument_list|()
block|;
specifier|inline
name|Qt
operator|::
name|WindowStates
name|oldState
argument_list|()
specifier|const
block|{
return|return
name|ostate
return|;
block|}
name|bool
name|isOverride
argument_list|()
specifier|const
block|;
name|private
operator|:
name|Qt
operator|::
name|WindowStates
name|ostate
block|; }
block|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
DECL|variable|QMenuBar
name|class
name|QMenuBar
block|;
name|class
name|Q_GUI_EXPORT
name|QMenubarUpdatedEvent
operator|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QMenubarUpdatedEvent
argument_list|(
name|QMenuBar
operator|*
specifier|const
name|menBar
argument_list|)
block|;
specifier|inline
name|QMenuBar
operator|*
name|menuBar
argument_list|()
block|{
return|return
name|m_menuBar
return|;
block|}
name|private
operator|:
name|QMenuBar
operator|*
name|m_menuBar
block|; }
block|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
name|Q_GUI_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
expr|,
specifier|const
name|QEvent
operator|*
operator|)
block|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|==
operator|(
name|QKeyEvent
operator|*
name|e
expr|,
name|QKeySequence
operator|::
name|StandardKey
name|key
operator|)
block|{
return|return
operator|(
name|e
operator|?
name|e
operator|->
name|matches
argument_list|(
name|key
argument_list|)
operator|:
name|false
operator|)
return|;
block|}
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|==
operator|(
name|QKeySequence
operator|::
name|StandardKey
name|key
expr|,
name|QKeyEvent
operator|*
name|e
operator|)
block|{
return|return
operator|(
name|e
condition|?
name|e
operator|->
name|matches
argument_list|(
name|key
argument_list|)
else|:
name|false
operator|)
return|;
block|}
endif|#
directive|endif
comment|// QT_NO_SHORTCUT
DECL|variable|QTouchEventTouchPointPrivate
name|class
name|QTouchEventTouchPointPrivate
block|;
name|class
name|Q_GUI_EXPORT
name|QTouchEvent
operator|:
name|public
name|QInputEvent
block|{
name|public
operator|:
name|class
name|Q_GUI_EXPORT
name|TouchPoint
block|{
name|public
operator|:
name|TouchPoint
argument_list|(
argument|int id = -
literal|1
argument_list|)
block|;
name|TouchPoint
argument_list|(
specifier|const
name|QTouchEvent
operator|::
name|TouchPoint
operator|&
name|other
argument_list|)
block|;
operator|~
name|TouchPoint
argument_list|()
block|;
name|int
name|id
argument_list|()
specifier|const
block|;
name|Qt
operator|::
name|TouchPointState
name|state
argument_list|()
specifier|const
block|;
name|bool
name|isPrimary
argument_list|()
specifier|const
block|;
name|QPointF
name|pos
argument_list|()
specifier|const
block|;
name|QPointF
name|startPos
argument_list|()
specifier|const
block|;
name|QPointF
name|lastPos
argument_list|()
specifier|const
block|;
name|QPointF
name|scenePos
argument_list|()
specifier|const
block|;
name|QPointF
name|startScenePos
argument_list|()
specifier|const
block|;
name|QPointF
name|lastScenePos
argument_list|()
specifier|const
block|;
name|QPointF
name|screenPos
argument_list|()
specifier|const
block|;
name|QPointF
name|startScreenPos
argument_list|()
specifier|const
block|;
name|QPointF
name|lastScreenPos
argument_list|()
specifier|const
block|;
name|QPointF
name|normalizedPos
argument_list|()
specifier|const
block|;
name|QPointF
name|startNormalizedPos
argument_list|()
specifier|const
block|;
name|QPointF
name|lastNormalizedPos
argument_list|()
specifier|const
block|;
name|QRectF
name|rect
argument_list|()
specifier|const
block|;
name|QRectF
name|sceneRect
argument_list|()
specifier|const
block|;
name|QRectF
name|screenRect
argument_list|()
specifier|const
block|;
name|qreal
name|pressure
argument_list|()
specifier|const
block|;
comment|// internal
name|void
name|setId
argument_list|(
argument|int id
argument_list|)
block|;
name|void
name|setState
argument_list|(
argument|Qt::TouchPointStates state
argument_list|)
block|;
name|void
name|setPos
argument_list|(
specifier|const
name|QPointF
operator|&
name|pos
argument_list|)
block|;
name|void
name|setScenePos
argument_list|(
specifier|const
name|QPointF
operator|&
name|scenePos
argument_list|)
block|;
name|void
name|setScreenPos
argument_list|(
specifier|const
name|QPointF
operator|&
name|screenPos
argument_list|)
block|;
name|void
name|setNormalizedPos
argument_list|(
specifier|const
name|QPointF
operator|&
name|normalizedPos
argument_list|)
block|;
name|void
name|setStartPos
argument_list|(
specifier|const
name|QPointF
operator|&
name|startPos
argument_list|)
block|;
name|void
name|setStartScenePos
argument_list|(
specifier|const
name|QPointF
operator|&
name|startScenePos
argument_list|)
block|;
name|void
name|setStartScreenPos
argument_list|(
specifier|const
name|QPointF
operator|&
name|startScreenPos
argument_list|)
block|;
name|void
name|setStartNormalizedPos
argument_list|(
specifier|const
name|QPointF
operator|&
name|startNormalizedPos
argument_list|)
block|;
name|void
name|setLastPos
argument_list|(
specifier|const
name|QPointF
operator|&
name|lastPos
argument_list|)
block|;
name|void
name|setLastScenePos
argument_list|(
specifier|const
name|QPointF
operator|&
name|lastScenePos
argument_list|)
block|;
name|void
name|setLastScreenPos
argument_list|(
specifier|const
name|QPointF
operator|&
name|lastScreenPos
argument_list|)
block|;
name|void
name|setLastNormalizedPos
argument_list|(
specifier|const
name|QPointF
operator|&
name|lastNormalizedPos
argument_list|)
block|;
name|void
name|setRect
argument_list|(
specifier|const
name|QRectF
operator|&
name|rect
argument_list|)
block|;
name|void
name|setSceneRect
argument_list|(
specifier|const
name|QRectF
operator|&
name|sceneRect
argument_list|)
block|;
name|void
name|setScreenRect
argument_list|(
specifier|const
name|QRectF
operator|&
name|screenRect
argument_list|)
block|;
name|void
name|setPressure
argument_list|(
argument|qreal pressure
argument_list|)
block|;
name|QTouchEvent
operator|::
name|TouchPoint
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QTouchEvent
operator|::
name|TouchPoint
operator|&
name|other
operator|)
block|;
name|private
operator|:
name|QTouchEventTouchPointPrivate
operator|*
name|d
block|;
name|friend
name|class
name|QApplication
block|;
name|friend
name|class
name|QApplicationPrivate
block|;     }
block|;      enum
name|DeviceType
block|{
name|TouchScreen
block|,
name|TouchPad
block|}
block|;
name|QTouchEvent
argument_list|(
argument|QEvent::Type eventType
argument_list|,
argument|QTouchEvent::DeviceType deviceType = TouchScreen
argument_list|,
argument|Qt::KeyboardModifiers modifiers = Qt::NoModifier
argument_list|,
argument|Qt::TouchPointStates touchPointStates =
literal|0
argument_list|,
argument|const QList<QTouchEvent::TouchPoint>&touchPoints = QList<QTouchEvent::TouchPoint>()
argument_list|)
block|;
operator|~
name|QTouchEvent
argument_list|()
block|;
specifier|inline
name|QWidget
operator|*
name|widget
argument_list|()
specifier|const
block|{
return|return
name|_widget
return|;
block|}
specifier|inline
name|QTouchEvent
operator|::
name|DeviceType
name|deviceType
argument_list|()
specifier|const
block|{
return|return
name|_deviceType
return|;
block|}
specifier|inline
name|Qt
operator|::
name|TouchPointStates
name|touchPointStates
argument_list|()
specifier|const
block|{
return|return
name|_touchPointStates
return|;
block|}
specifier|inline
specifier|const
name|QList
operator|<
name|QTouchEvent
operator|::
name|TouchPoint
operator|>
operator|&
name|touchPoints
argument_list|()
specifier|const
block|{
return|return
name|_touchPoints
return|;
block|}
comment|// internal
specifier|inline
name|void
name|setWidget
argument_list|(
argument|QWidget *awidget
argument_list|)
block|{
name|_widget
operator|=
name|awidget
block|; }
specifier|inline
name|void
name|setDeviceType
argument_list|(
argument|DeviceType adeviceType
argument_list|)
block|{
name|_deviceType
operator|=
name|adeviceType
block|; }
specifier|inline
name|void
name|setTouchPointStates
argument_list|(
argument|Qt::TouchPointStates aTouchPointStates
argument_list|)
block|{
name|_touchPointStates
operator|=
name|aTouchPointStates
block|; }
specifier|inline
name|void
name|setTouchPoints
argument_list|(
argument|const QList<QTouchEvent::TouchPoint>&atouchPoints
argument_list|)
block|{
name|_touchPoints
operator|=
name|atouchPoints
block|; }
name|protected
operator|:
name|QWidget
operator|*
name|_widget
block|;
name|QTouchEvent
operator|::
name|DeviceType
name|_deviceType
block|;
name|Qt
operator|::
name|TouchPointStates
name|_touchPointStates
block|;
name|QList
operator|<
name|QTouchEvent
operator|::
name|TouchPoint
operator|>
name|_touchPoints
block|;
name|friend
name|class
name|QApplication
block|;
name|friend
name|class
name|QApplicationPrivate
block|; }
block|;
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
DECL|variable|QGesture
name|class
name|QGesture
block|;
DECL|variable|QGestureEventPrivate
name|class
name|QGestureEventPrivate
block|;
name|class
name|Q_GUI_EXPORT
name|QGestureEvent
operator|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QGestureEvent
argument_list|(
specifier|const
name|QList
operator|<
name|QGesture
operator|*
operator|>
operator|&
name|gestures
argument_list|)
block|;
operator|~
name|QGestureEvent
argument_list|()
block|;
name|QList
operator|<
name|QGesture
operator|*
operator|>
name|gestures
argument_list|()
specifier|const
block|;
name|QGesture
operator|*
name|gesture
argument_list|(
argument|Qt::GestureType type
argument_list|)
specifier|const
block|;
name|QList
operator|<
name|QGesture
operator|*
operator|>
name|activeGestures
argument_list|()
specifier|const
block|;
name|QList
operator|<
name|QGesture
operator|*
operator|>
name|canceledGestures
argument_list|()
specifier|const
block|;
ifdef|#
directive|ifdef
name|Q_NO_USING_KEYWORD
specifier|inline
name|void
name|setAccepted
argument_list|(
argument|bool accepted
argument_list|)
block|{
name|QEvent
operator|::
name|setAccepted
argument_list|(
name|accepted
argument_list|)
block|; }
specifier|inline
name|bool
name|isAccepted
argument_list|()
specifier|const
block|{
return|return
name|QEvent
operator|::
name|isAccepted
argument_list|()
return|;
block|}
specifier|inline
name|void
name|accept
argument_list|()
block|{
name|QEvent
operator|::
name|accept
argument_list|()
block|; }
specifier|inline
name|void
name|ignore
argument_list|()
block|{
name|QEvent
operator|::
name|ignore
argument_list|()
block|; }
else|#
directive|else
name|using
name|QEvent
operator|::
name|setAccepted
block|;
name|using
name|QEvent
operator|::
name|isAccepted
block|;
name|using
name|QEvent
operator|::
name|accept
block|;
name|using
name|QEvent
operator|::
name|ignore
block|;
endif|#
directive|endif
name|void
name|setAccepted
argument_list|(
name|QGesture
operator|*
argument_list|,
name|bool
argument_list|)
block|;
name|void
name|accept
argument_list|(
name|QGesture
operator|*
argument_list|)
block|;
name|void
name|ignore
argument_list|(
name|QGesture
operator|*
argument_list|)
block|;
name|bool
name|isAccepted
argument_list|(
argument|QGesture *
argument_list|)
specifier|const
block|;
name|void
name|setAccepted
argument_list|(
name|Qt
operator|::
name|GestureType
argument_list|,
name|bool
argument_list|)
block|;
name|void
name|accept
argument_list|(
name|Qt
operator|::
name|GestureType
argument_list|)
block|;
name|void
name|ignore
argument_list|(
name|Qt
operator|::
name|GestureType
argument_list|)
block|;
name|bool
name|isAccepted
argument_list|(
argument|Qt::GestureType
argument_list|)
specifier|const
block|;
name|void
name|setWidget
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|)
block|;
name|QWidget
operator|*
name|widget
argument_list|()
specifier|const
block|;
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
name|QPointF
name|mapToGraphicsScene
argument_list|(
argument|const QPointF&gesturePoint
argument_list|)
specifier|const
block|;
endif|#
directive|endif
name|private
operator|:
name|QGestureEventPrivate
operator|*
name|d_func
argument_list|()
block|;
specifier|const
name|QGestureEventPrivate
operator|*
name|d_func
argument_list|()
specifier|const
block|;
name|friend
name|class
name|QApplication
block|;
name|friend
name|class
name|QGestureManager
block|; }
block|;
endif|#
directive|endif
comment|// QT_NO_GESTURES
DECL|variable|QScrollPrepareEventPrivate
name|class
name|QScrollPrepareEventPrivate
block|;
name|class
name|Q_GUI_EXPORT
name|QScrollPrepareEvent
operator|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QScrollPrepareEvent
argument_list|(
specifier|const
name|QPointF
operator|&
name|startPos
argument_list|)
block|;
operator|~
name|QScrollPrepareEvent
argument_list|()
block|;
name|QPointF
name|startPos
argument_list|()
specifier|const
block|;
name|QSizeF
name|viewportSize
argument_list|()
specifier|const
block|;
name|QRectF
name|contentPosRange
argument_list|()
specifier|const
block|;
name|QPointF
name|contentPos
argument_list|()
specifier|const
block|;
name|void
name|setViewportSize
argument_list|(
specifier|const
name|QSizeF
operator|&
name|size
argument_list|)
block|;
name|void
name|setContentPosRange
argument_list|(
specifier|const
name|QRectF
operator|&
name|rect
argument_list|)
block|;
name|void
name|setContentPos
argument_list|(
specifier|const
name|QPointF
operator|&
name|pos
argument_list|)
block|;
name|private
operator|:
name|QScrollPrepareEventPrivate
operator|*
name|d_func
argument_list|()
block|;
specifier|const
name|QScrollPrepareEventPrivate
operator|*
name|d_func
argument_list|()
specifier|const
block|; }
block|;
DECL|variable|QScrollEventPrivate
name|class
name|QScrollEventPrivate
block|;
name|class
name|Q_GUI_EXPORT
name|QScrollEvent
operator|:
name|public
name|QEvent
block|{
name|public
operator|:
expr|enum
name|ScrollState
block|{
name|ScrollStarted
block|,
name|ScrollUpdated
block|,
name|ScrollFinished
block|}
block|;
name|QScrollEvent
argument_list|(
argument|const QPointF&contentPos
argument_list|,
argument|const QPointF&overshoot
argument_list|,
argument|ScrollState scrollState
argument_list|)
block|;
operator|~
name|QScrollEvent
argument_list|()
block|;
name|QPointF
name|contentPos
argument_list|()
specifier|const
block|;
name|QPointF
name|overshootDistance
argument_list|()
specifier|const
block|;
name|ScrollState
name|scrollState
argument_list|()
specifier|const
block|;
name|private
operator|:
name|QScrollEventPrivate
operator|*
name|d_func
argument_list|()
block|;
specifier|const
name|QScrollEventPrivate
operator|*
name|d_func
argument_list|()
specifier|const
block|; }
block|;
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QEVENT_H
end_comment
end_unit
