begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QEVENT_H
end_ifndef
begin_define
DECL|macro|QEVENT_H
define|#
directive|define
name|QEVENT_H
end_define
begin_include
include|#
directive|include
file|<QtGui/qwindowdefs.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qobject.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qregion.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qnamespace.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qkeysequence.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qcoreevent.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvariant.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmap.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvector.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qset.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qurl.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qfile.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qvector2d.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qtouchdevice.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QAction
name|class
name|QAction
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
end_ifndef
begin_decl_stmt
DECL|variable|QGesture
name|class
name|QGesture
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|QScreen
name|class
name|QScreen
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QInputEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|explicit
name|QInputEvent
argument_list|(
argument|Type type
argument_list|,
argument|Qt::KeyboardModifiers modifiers = Qt::NoModifier
argument_list|)
block|;
operator|~
name|QInputEvent
argument_list|()
block|;
specifier|inline
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
argument_list|()
specifier|const
block|{
return|return
name|modState
return|;
block|}
specifier|inline
name|void
name|setModifiers
argument_list|(
argument|Qt::KeyboardModifiers amodifiers
argument_list|)
block|{
name|modState
operator|=
name|amodifiers
block|; }
specifier|inline
name|ulong
name|timestamp
argument_list|()
specifier|const
block|{
return|return
name|ts
return|;
block|}
specifier|inline
name|void
name|setTimestamp
argument_list|(
argument|ulong atimestamp
argument_list|)
block|{
name|ts
operator|=
name|atimestamp
block|; }
name|protected
operator|:
name|Qt
operator|::
name|KeyboardModifiers
name|modState
block|;
name|ulong
name|ts
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QEnterEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QEnterEvent
argument_list|(
specifier|const
name|QPointF
operator|&
name|localPos
argument_list|,
specifier|const
name|QPointF
operator|&
name|windowPos
argument_list|,
specifier|const
name|QPointF
operator|&
name|screenPos
argument_list|)
block|;
operator|~
name|QEnterEvent
argument_list|()
block|;
ifndef|#
directive|ifndef
name|QT_NO_INTEGER_EVENT_COORDINATES
specifier|inline
name|QPoint
name|pos
argument_list|()
specifier|const
block|{
return|return
name|l
operator|.
name|toPoint
argument_list|()
return|;
block|}
specifier|inline
name|QPoint
name|globalPos
argument_list|()
specifier|const
block|{
return|return
name|s
operator|.
name|toPoint
argument_list|()
return|;
block|}
specifier|inline
name|int
name|x
argument_list|()
specifier|const
block|{
return|return
name|qRound
argument_list|(
name|l
operator|.
name|x
argument_list|()
argument_list|)
return|;
block|}
specifier|inline
name|int
name|y
argument_list|()
specifier|const
block|{
return|return
name|qRound
argument_list|(
name|l
operator|.
name|y
argument_list|()
argument_list|)
return|;
block|}
specifier|inline
name|int
name|globalX
argument_list|()
specifier|const
block|{
return|return
name|qRound
argument_list|(
name|s
operator|.
name|x
argument_list|()
argument_list|)
return|;
block|}
specifier|inline
name|int
name|globalY
argument_list|()
specifier|const
block|{
return|return
name|qRound
argument_list|(
name|s
operator|.
name|y
argument_list|()
argument_list|)
return|;
block|}
endif|#
directive|endif
specifier|const
name|QPointF
operator|&
name|localPos
argument_list|()
specifier|const
block|{
return|return
name|l
return|;
block|}
specifier|const
name|QPointF
operator|&
name|windowPos
argument_list|()
specifier|const
block|{
return|return
name|w
return|;
block|}
specifier|const
name|QPointF
operator|&
name|screenPos
argument_list|()
specifier|const
block|{
return|return
name|s
return|;
block|}
name|protected
operator|:
name|QPointF
name|l
block|,
name|w
block|,
name|s
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QMouseEvent
range|:
name|public
name|QInputEvent
block|{
name|public
operator|:
name|QMouseEvent
argument_list|(
argument|Type type
argument_list|,
argument|const QPointF&localPos
argument_list|,
argument|Qt::MouseButton button
argument_list|,
argument|Qt::MouseButtons buttons
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|)
block|;
name|QMouseEvent
argument_list|(
argument|Type type
argument_list|,
argument|const QPointF&localPos
argument_list|,
argument|const QPointF&screenPos
argument_list|,
argument|Qt::MouseButton button
argument_list|,
argument|Qt::MouseButtons buttons
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|)
block|;
name|QMouseEvent
argument_list|(
argument|Type type
argument_list|,
argument|const QPointF&localPos
argument_list|,
argument|const QPointF&windowPos
argument_list|,
argument|const QPointF&screenPos
argument_list|,
argument|Qt::MouseButton button
argument_list|,
argument|Qt::MouseButtons buttons
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|)
block|;
operator|~
name|QMouseEvent
argument_list|()
block|;
ifndef|#
directive|ifndef
name|QT_NO_INTEGER_EVENT_COORDINATES
specifier|inline
name|QPoint
name|pos
argument_list|()
specifier|const
block|{
return|return
name|l
operator|.
name|toPoint
argument_list|()
return|;
block|}
specifier|inline
name|QPoint
name|globalPos
argument_list|()
specifier|const
block|{
return|return
name|s
operator|.
name|toPoint
argument_list|()
return|;
block|}
specifier|inline
name|int
name|x
argument_list|()
specifier|const
block|{
return|return
name|qRound
argument_list|(
name|l
operator|.
name|x
argument_list|()
argument_list|)
return|;
block|}
specifier|inline
name|int
name|y
argument_list|()
specifier|const
block|{
return|return
name|qRound
argument_list|(
name|l
operator|.
name|y
argument_list|()
argument_list|)
return|;
block|}
specifier|inline
name|int
name|globalX
argument_list|()
specifier|const
block|{
return|return
name|qRound
argument_list|(
name|s
operator|.
name|x
argument_list|()
argument_list|)
return|;
block|}
specifier|inline
name|int
name|globalY
argument_list|()
specifier|const
block|{
return|return
name|qRound
argument_list|(
name|s
operator|.
name|y
argument_list|()
argument_list|)
return|;
block|}
endif|#
directive|endif
specifier|const
name|QPointF
operator|&
name|localPos
argument_list|()
specifier|const
block|{
return|return
name|l
return|;
block|}
specifier|const
name|QPointF
operator|&
name|windowPos
argument_list|()
specifier|const
block|{
return|return
name|w
return|;
block|}
specifier|const
name|QPointF
operator|&
name|screenPos
argument_list|()
specifier|const
block|{
return|return
name|s
return|;
block|}
specifier|inline
name|Qt
operator|::
name|MouseButton
name|button
argument_list|()
specifier|const
block|{
return|return
name|b
return|;
block|}
specifier|inline
name|Qt
operator|::
name|MouseButtons
name|buttons
argument_list|()
specifier|const
block|{
return|return
name|mouseState
return|;
block|}
if|#
directive|if
name|QT_DEPRECATED_SINCE
argument_list|(
literal|5
operator|,
literal|0
argument_list|)
name|QT_DEPRECATED
specifier|inline
name|QPointF
name|posF
argument_list|()
specifier|const
block|{
return|return
name|l
return|;
block|}
endif|#
directive|endif
name|protected
operator|:
name|QPointF
name|l
block|,
name|w
block|,
name|s
block|;
name|Qt
operator|::
name|MouseButton
name|b
block|;
name|Qt
operator|::
name|MouseButtons
name|mouseState
block|;
name|int
name|caps
block|;
name|QVector2D
name|velocity
block|;
name|friend
name|class
name|QGuiApplicationPrivate
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QHoverEvent
range|:
name|public
name|QInputEvent
block|{
name|public
operator|:
name|QHoverEvent
argument_list|(
argument|Type type
argument_list|,
argument|const QPointF&pos
argument_list|,
argument|const QPointF&oldPos
argument_list|,
argument|Qt::KeyboardModifiers modifiers = Qt::NoModifier
argument_list|)
block|;
operator|~
name|QHoverEvent
argument_list|()
block|;
ifndef|#
directive|ifndef
name|QT_NO_INTEGER_EVENT_COORDINATES
specifier|inline
name|QPoint
name|pos
argument_list|()
specifier|const
block|{
return|return
name|p
operator|.
name|toPoint
argument_list|()
return|;
block|}
specifier|inline
name|QPoint
name|oldPos
argument_list|()
specifier|const
block|{
return|return
name|op
operator|.
name|toPoint
argument_list|()
return|;
block|}
endif|#
directive|endif
specifier|inline
specifier|const
name|QPointF
operator|&
name|posF
argument_list|()
specifier|const
block|{
return|return
name|p
return|;
block|}
specifier|inline
specifier|const
name|QPointF
operator|&
name|oldPosF
argument_list|()
specifier|const
block|{
return|return
name|op
return|;
block|}
name|protected
operator|:
name|QPointF
name|p
block|,
name|op
block|; }
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
end_ifndef
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWheelEvent
range|:
name|public
name|QInputEvent
block|{
name|public
operator|:
name|QWheelEvent
argument_list|(
argument|const QPointF&pos
argument_list|,
argument|int delta
argument_list|,
argument|Qt::MouseButtons buttons
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|,
argument|Qt::Orientation orient = Qt::Vertical
argument_list|)
block|;
name|QWheelEvent
argument_list|(
argument|const QPointF&pos
argument_list|,
argument|const QPointF& globalPos
argument_list|,
argument|int delta
argument_list|,
argument|Qt::MouseButtons buttons
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|,
argument|Qt::Orientation orient = Qt::Vertical
argument_list|)
block|;
name|QWheelEvent
argument_list|(
argument|const QPointF&pos
argument_list|,
argument|const QPointF& globalPos
argument_list|,
argument|QPoint pixelDelta
argument_list|,
argument|QPoint angleDelta
argument_list|,
argument|int qt4Delta
argument_list|,
argument|Qt::Orientation qt4Orientation
argument_list|,
argument|Qt::MouseButtons buttons
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|)
block|;
name|QWheelEvent
argument_list|(
argument|const QPointF&pos
argument_list|,
argument|const QPointF& globalPos
argument_list|,
argument|QPoint pixelDelta
argument_list|,
argument|QPoint angleDelta
argument_list|,
argument|int qt4Delta
argument_list|,
argument|Qt::Orientation qt4Orientation
argument_list|,
argument|Qt::MouseButtons buttons
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|,
argument|Qt::ScrollPhase phase
argument_list|)
block|;
operator|~
name|QWheelEvent
argument_list|()
block|;
specifier|inline
name|QPoint
name|pixelDelta
argument_list|()
specifier|const
block|{
return|return
name|pixelD
return|;
block|}
specifier|inline
name|QPoint
name|angleDelta
argument_list|()
specifier|const
block|{
return|return
name|angleD
return|;
block|}
specifier|inline
name|int
name|delta
argument_list|()
specifier|const
block|{
return|return
name|qt4D
return|;
block|}
specifier|inline
name|Qt
operator|::
name|Orientation
name|orientation
argument_list|()
specifier|const
block|{
return|return
name|qt4O
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_INTEGER_EVENT_COORDINATES
specifier|inline
name|QPoint
name|pos
argument_list|()
specifier|const
block|{
return|return
name|p
operator|.
name|toPoint
argument_list|()
return|;
block|}
specifier|inline
name|QPoint
name|globalPos
argument_list|()
specifier|const
block|{
return|return
name|g
operator|.
name|toPoint
argument_list|()
return|;
block|}
specifier|inline
name|int
name|x
argument_list|()
specifier|const
block|{
return|return
name|p
operator|.
name|x
argument_list|()
return|;
block|}
specifier|inline
name|int
name|y
argument_list|()
specifier|const
block|{
return|return
name|p
operator|.
name|y
argument_list|()
return|;
block|}
specifier|inline
name|int
name|globalX
argument_list|()
specifier|const
block|{
return|return
name|g
operator|.
name|x
argument_list|()
return|;
block|}
specifier|inline
name|int
name|globalY
argument_list|()
specifier|const
block|{
return|return
name|g
operator|.
name|y
argument_list|()
return|;
block|}
endif|#
directive|endif
specifier|inline
specifier|const
name|QPointF
operator|&
name|posF
argument_list|()
specifier|const
block|{
return|return
name|p
return|;
block|}
specifier|inline
specifier|const
name|QPointF
operator|&
name|globalPosF
argument_list|()
specifier|const
block|{
return|return
name|g
return|;
block|}
specifier|inline
name|Qt
operator|::
name|MouseButtons
name|buttons
argument_list|()
specifier|const
block|{
return|return
name|mouseState
return|;
block|}
specifier|inline
name|Qt
operator|::
name|ScrollPhase
name|phase
argument_list|()
specifier|const
block|{
return|return
name|Qt
operator|::
name|ScrollPhase
argument_list|(
name|ph
argument_list|)
return|;
block|}
name|protected
operator|:
name|QPointF
name|p
block|;
name|QPointF
name|g
block|;
name|QPoint
name|pixelD
block|;
name|QPoint
name|angleD
block|;
name|int
name|qt4D
block|;
name|Qt
operator|::
name|Orientation
name|qt4O
block|;
name|Qt
operator|::
name|MouseButtons
name|mouseState
block|;
name|uint
name|ph
operator|:
literal|2
block|;
name|int
name|reserved
operator|:
literal|30
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
end_ifndef
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QTabletEvent
range|:
name|public
name|QInputEvent
block|{
name|public
operator|:
expr|enum
name|TabletDevice
block|{
name|NoDevice
block|,
name|Puck
block|,
name|Stylus
block|,
name|Airbrush
block|,
name|FourDMouse
block|,
name|XFreeEraser
comment|/*internal*/
block|,
name|RotationStylus
block|}
block|;     enum
name|PointerType
block|{
name|UnknownPointer
block|,
name|Pen
block|,
name|Cursor
block|,
name|Eraser
block|}
block|;
name|QTabletEvent
argument_list|(
argument|Type t
argument_list|,
argument|const QPointF&pos
argument_list|,
argument|const QPointF&globalPos
argument_list|,
argument|int device
argument_list|,
argument|int pointerType
argument_list|,
argument|qreal pressure
argument_list|,
argument|int xTilt
argument_list|,
argument|int yTilt
argument_list|,
argument|qreal tangentialPressure
argument_list|,
argument|qreal rotation
argument_list|,
argument|int z
argument_list|,
argument|Qt::KeyboardModifiers keyState
argument_list|,
argument|qint64 uniqueID
argument_list|)
block|;
operator|~
name|QTabletEvent
argument_list|()
block|;
specifier|inline
name|QPoint
name|pos
argument_list|()
specifier|const
block|{
return|return
name|mPos
operator|.
name|toPoint
argument_list|()
return|;
block|}
specifier|inline
name|QPoint
name|globalPos
argument_list|()
specifier|const
block|{
return|return
name|mGPos
operator|.
name|toPoint
argument_list|()
return|;
block|}
if|#
directive|if
name|QT_DEPRECATED_SINCE
argument_list|(
literal|5
operator|,
literal|0
argument_list|)
name|QT_DEPRECATED
specifier|inline
specifier|const
name|QPointF
operator|&
name|hiResGlobalPos
argument_list|()
specifier|const
block|{
return|return
name|mPos
return|;
block|}
endif|#
directive|endif
specifier|inline
specifier|const
name|QPointF
operator|&
name|posF
argument_list|()
specifier|const
block|{
return|return
name|mPos
return|;
block|}
specifier|inline
specifier|const
name|QPointF
operator|&
name|globalPosF
argument_list|()
specifier|const
block|{
return|return
name|mGPos
return|;
block|}
specifier|inline
name|int
name|x
argument_list|()
specifier|const
block|{
return|return
name|qRound
argument_list|(
name|mPos
operator|.
name|x
argument_list|()
argument_list|)
return|;
block|}
specifier|inline
name|int
name|y
argument_list|()
specifier|const
block|{
return|return
name|qRound
argument_list|(
name|mPos
operator|.
name|y
argument_list|()
argument_list|)
return|;
block|}
specifier|inline
name|int
name|globalX
argument_list|()
specifier|const
block|{
return|return
name|qRound
argument_list|(
name|mGPos
operator|.
name|x
argument_list|()
argument_list|)
return|;
block|}
specifier|inline
name|int
name|globalY
argument_list|()
specifier|const
block|{
return|return
name|qRound
argument_list|(
name|mGPos
operator|.
name|y
argument_list|()
argument_list|)
return|;
block|}
specifier|inline
name|qreal
name|hiResGlobalX
argument_list|()
specifier|const
block|{
return|return
name|mGPos
operator|.
name|x
argument_list|()
return|;
block|}
specifier|inline
name|qreal
name|hiResGlobalY
argument_list|()
specifier|const
block|{
return|return
name|mGPos
operator|.
name|y
argument_list|()
return|;
block|}
specifier|inline
name|TabletDevice
name|device
argument_list|()
specifier|const
block|{
return|return
name|TabletDevice
argument_list|(
name|mDev
argument_list|)
return|;
block|}
specifier|inline
name|PointerType
name|pointerType
argument_list|()
specifier|const
block|{
return|return
name|PointerType
argument_list|(
name|mPointerType
argument_list|)
return|;
block|}
specifier|inline
name|qint64
name|uniqueId
argument_list|()
specifier|const
block|{
return|return
name|mUnique
return|;
block|}
specifier|inline
name|qreal
name|pressure
argument_list|()
specifier|const
block|{
return|return
name|mPress
return|;
block|}
specifier|inline
name|int
name|z
argument_list|()
specifier|const
block|{
return|return
name|mZ
return|;
block|}
specifier|inline
name|qreal
name|tangentialPressure
argument_list|()
specifier|const
block|{
return|return
name|mTangential
return|;
block|}
specifier|inline
name|qreal
name|rotation
argument_list|()
specifier|const
block|{
return|return
name|mRot
return|;
block|}
specifier|inline
name|int
name|xTilt
argument_list|()
specifier|const
block|{
return|return
name|mXT
return|;
block|}
specifier|inline
name|int
name|yTilt
argument_list|()
specifier|const
block|{
return|return
name|mYT
return|;
block|}
name|protected
operator|:
name|QPointF
name|mPos
block|,
name|mGPos
block|;
name|int
name|mDev
block|,
name|mPointerType
block|,
name|mXT
block|,
name|mYT
block|,
name|mZ
block|;
name|qreal
name|mPress
block|,
name|mTangential
block|,
name|mRot
block|;
name|qint64
name|mUnique
block|;
comment|// I don't know what the future holds for tablets but there could be some
comment|// new devices coming along, and there seem to be "holes" in the
comment|// OS-specific events for this.
name|void
operator|*
name|mExtra
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TABLETEVENT
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
end_ifndef
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QNativeGestureEvent
range|:
name|public
name|QInputEvent
block|{
name|public
operator|:
name|QNativeGestureEvent
argument_list|(
argument|Qt::NativeGestureType type
argument_list|,
argument|const QPointF&localPos
argument_list|,
argument|const QPointF&windowPos
argument_list|,
argument|const QPointF&screenPos
argument_list|,
argument|qreal value
argument_list|,
argument|ulong sequenceId
argument_list|,
argument|quint64 intArgument
argument_list|)
block|;
name|Qt
operator|::
name|NativeGestureType
name|gestureType
argument_list|()
specifier|const
block|{
return|return
name|mGestureType
return|;
block|}
name|qreal
name|value
argument_list|()
specifier|const
block|{
return|return
name|mRealValue
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_INTEGER_EVENT_COORDINATES
specifier|inline
specifier|const
name|QPoint
name|pos
argument_list|()
specifier|const
block|{
return|return
name|mLocalPos
operator|.
name|toPoint
argument_list|()
return|;
block|}
specifier|inline
specifier|const
name|QPoint
name|globalPos
argument_list|()
specifier|const
block|{
return|return
name|mScreenPos
operator|.
name|toPoint
argument_list|()
return|;
block|}
endif|#
directive|endif
specifier|const
name|QPointF
operator|&
name|localPos
argument_list|()
specifier|const
block|{
return|return
name|mLocalPos
return|;
block|}
specifier|const
name|QPointF
operator|&
name|windowPos
argument_list|()
specifier|const
block|{
return|return
name|mWindowPos
return|;
block|}
specifier|const
name|QPointF
operator|&
name|screenPos
argument_list|()
specifier|const
block|{
return|return
name|mScreenPos
return|;
block|}
name|protected
operator|:
name|Qt
operator|::
name|NativeGestureType
name|mGestureType
block|;
name|QPointF
name|mLocalPos
block|;
name|QPointF
name|mWindowPos
block|;
name|QPointF
name|mScreenPos
block|;
name|qreal
name|mRealValue
block|;
name|ulong
name|mSequenceId
block|;
name|quint64
name|mIntValue
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_GESTURES
end_comment
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QKeyEvent
range|:
name|public
name|QInputEvent
block|{
name|public
operator|:
name|QKeyEvent
argument_list|(
argument|Type type
argument_list|,
argument|int key
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|,
argument|const QString& text = QString()
argument_list|,
argument|bool autorep = false
argument_list|,
argument|ushort count =
literal|1
argument_list|)
block|;
name|QKeyEvent
argument_list|(
argument|Type type
argument_list|,
argument|int key
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|,
argument|quint32 nativeScanCode
argument_list|,
argument|quint32 nativeVirtualKey
argument_list|,
argument|quint32 nativeModifiers
argument_list|,
argument|const QString&text = QString()
argument_list|,
argument|bool autorep = false
argument_list|,
argument|ushort count =
literal|1
argument_list|)
block|;
operator|~
name|QKeyEvent
argument_list|()
block|;
name|int
name|key
argument_list|()
specifier|const
block|{
return|return
name|k
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|bool
name|matches
argument_list|(
argument|QKeySequence::StandardKey key
argument_list|)
specifier|const
block|;
endif|#
directive|endif
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
argument_list|()
specifier|const
block|;
specifier|inline
name|QString
name|text
argument_list|()
specifier|const
block|{
return|return
name|txt
return|;
block|}
specifier|inline
name|bool
name|isAutoRepeat
argument_list|()
specifier|const
block|{
return|return
name|autor
return|;
block|}
specifier|inline
name|int
name|count
argument_list|()
specifier|const
block|{
return|return
name|int
argument_list|(
name|c
argument_list|)
return|;
block|}
specifier|inline
name|quint32
name|nativeScanCode
argument_list|()
specifier|const
block|{
return|return
name|nScanCode
return|;
block|}
specifier|inline
name|quint32
name|nativeVirtualKey
argument_list|()
specifier|const
block|{
return|return
name|nVirtualKey
return|;
block|}
specifier|inline
name|quint32
name|nativeModifiers
argument_list|()
specifier|const
block|{
return|return
name|nModifiers
return|;
block|}
comment|// Functions for the extended key event information
if|#
directive|if
name|QT_DEPRECATED_SINCE
argument_list|(
literal|5
operator|,
literal|0
argument_list|)
specifier|static
specifier|inline
name|QKeyEvent
operator|*
name|createExtendedKeyEvent
argument_list|(
argument|Type type
argument_list|,
argument|int key
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|,
argument|quint32 nativeScanCode
argument_list|,
argument|quint32 nativeVirtualKey
argument_list|,
argument|quint32 nativeModifiers
argument_list|,
argument|const QString& text = QString()
argument_list|,
argument|bool autorep = false
argument_list|,
argument|ushort count =
literal|1
argument_list|)
block|{
return|return
name|new
name|QKeyEvent
argument_list|(
name|type
argument_list|,
name|key
argument_list|,
name|modifiers
argument_list|,
name|nativeScanCode
argument_list|,
name|nativeVirtualKey
argument_list|,
name|nativeModifiers
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|hasExtendedInfo
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
endif|#
directive|endif
name|protected
operator|:
name|QString
name|txt
block|;
name|int
name|k
block|;
name|quint32
name|nScanCode
block|;
name|quint32
name|nVirtualKey
block|;
name|quint32
name|nModifiers
block|;
name|ushort
name|c
block|;
name|ushort
name|autor
operator|:
literal|1
block|;
comment|// ushort reserved:15;
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QFocusEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|explicit
name|QFocusEvent
argument_list|(
argument|Type type
argument_list|,
argument|Qt::FocusReason reason=Qt::OtherFocusReason
argument_list|)
block|;
operator|~
name|QFocusEvent
argument_list|()
block|;
specifier|inline
name|bool
name|gotFocus
argument_list|()
specifier|const
block|{
return|return
name|type
argument_list|()
operator|==
name|FocusIn
return|;
block|}
specifier|inline
name|bool
name|lostFocus
argument_list|()
specifier|const
block|{
return|return
name|type
argument_list|()
operator|==
name|FocusOut
return|;
block|}
name|Qt
operator|::
name|FocusReason
name|reason
argument_list|()
specifier|const
block|;
name|private
operator|:
name|Qt
operator|::
name|FocusReason
name|m_reason
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QPaintEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|explicit
name|QPaintEvent
argument_list|(
specifier|const
name|QRegion
operator|&
name|paintRegion
argument_list|)
block|;
name|explicit
name|QPaintEvent
argument_list|(
specifier|const
name|QRect
operator|&
name|paintRect
argument_list|)
block|;
operator|~
name|QPaintEvent
argument_list|()
block|;
specifier|inline
specifier|const
name|QRect
operator|&
name|rect
argument_list|()
specifier|const
block|{
return|return
name|m_rect
return|;
block|}
specifier|inline
specifier|const
name|QRegion
operator|&
name|region
argument_list|()
specifier|const
block|{
return|return
name|m_region
return|;
block|}
name|protected
operator|:
name|friend
name|class
name|QApplication
block|;
name|friend
name|class
name|QCoreApplication
block|;
name|QRect
name|m_rect
block|;
name|QRegion
name|m_region
block|;
name|bool
name|m_erased
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QMoveEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QMoveEvent
argument_list|(
specifier|const
name|QPoint
operator|&
name|pos
argument_list|,
specifier|const
name|QPoint
operator|&
name|oldPos
argument_list|)
block|;
operator|~
name|QMoveEvent
argument_list|()
block|;
specifier|inline
specifier|const
name|QPoint
operator|&
name|pos
argument_list|()
specifier|const
block|{
return|return
name|p
return|;
block|}
specifier|inline
specifier|const
name|QPoint
operator|&
name|oldPos
argument_list|()
specifier|const
block|{
return|return
name|oldp
return|;
block|}
name|protected
operator|:
name|QPoint
name|p
block|,
name|oldp
block|;
name|friend
name|class
name|QApplication
block|;
name|friend
name|class
name|QCoreApplication
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QExposeEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|explicit
name|QExposeEvent
argument_list|(
specifier|const
name|QRegion
operator|&
name|rgn
argument_list|)
block|;
operator|~
name|QExposeEvent
argument_list|()
block|;
specifier|inline
specifier|const
name|QRegion
operator|&
name|region
argument_list|()
specifier|const
block|{
return|return
name|rgn
return|;
block|}
name|protected
operator|:
name|QRegion
name|rgn
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QResizeEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QResizeEvent
argument_list|(
specifier|const
name|QSize
operator|&
name|size
argument_list|,
specifier|const
name|QSize
operator|&
name|oldSize
argument_list|)
block|;
operator|~
name|QResizeEvent
argument_list|()
block|;
specifier|inline
specifier|const
name|QSize
operator|&
name|size
argument_list|()
specifier|const
block|{
return|return
name|s
return|;
block|}
specifier|inline
specifier|const
name|QSize
operator|&
name|oldSize
argument_list|()
specifier|const
block|{
return|return
name|olds
return|;
block|}
name|protected
operator|:
name|QSize
name|s
block|,
name|olds
block|;
name|friend
name|class
name|QApplication
block|;
name|friend
name|class
name|QCoreApplication
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QCloseEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QCloseEvent
argument_list|()
block|;
operator|~
name|QCloseEvent
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QIconDragEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QIconDragEvent
argument_list|()
block|;
operator|~
name|QIconDragEvent
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QShowEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QShowEvent
argument_list|()
block|;
operator|~
name|QShowEvent
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QHideEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QHideEvent
argument_list|()
block|;
operator|~
name|QHideEvent
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
end_ifndef
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QContextMenuEvent
range|:
name|public
name|QInputEvent
block|{
name|public
operator|:
expr|enum
name|Reason
block|{
name|Mouse
block|,
name|Keyboard
block|,
name|Other
block|}
block|;
name|QContextMenuEvent
argument_list|(
argument|Reason reason
argument_list|,
argument|const QPoint&pos
argument_list|,
argument|const QPoint&globalPos
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|)
block|;
name|QContextMenuEvent
argument_list|(
argument|Reason reason
argument_list|,
argument|const QPoint&pos
argument_list|,
argument|const QPoint&globalPos
argument_list|)
block|;
name|QContextMenuEvent
argument_list|(
argument|Reason reason
argument_list|,
argument|const QPoint&pos
argument_list|)
block|;
operator|~
name|QContextMenuEvent
argument_list|()
block|;
specifier|inline
name|int
name|x
argument_list|()
specifier|const
block|{
return|return
name|p
operator|.
name|x
argument_list|()
return|;
block|}
specifier|inline
name|int
name|y
argument_list|()
specifier|const
block|{
return|return
name|p
operator|.
name|y
argument_list|()
return|;
block|}
specifier|inline
name|int
name|globalX
argument_list|()
specifier|const
block|{
return|return
name|gp
operator|.
name|x
argument_list|()
return|;
block|}
specifier|inline
name|int
name|globalY
argument_list|()
specifier|const
block|{
return|return
name|gp
operator|.
name|y
argument_list|()
return|;
block|}
specifier|inline
specifier|const
name|QPoint
operator|&
name|pos
argument_list|()
specifier|const
block|{
return|return
name|p
return|;
block|}
specifier|inline
specifier|const
name|QPoint
operator|&
name|globalPos
argument_list|()
specifier|const
block|{
return|return
name|gp
return|;
block|}
specifier|inline
name|Reason
name|reason
argument_list|()
specifier|const
block|{
return|return
name|Reason
argument_list|(
name|reas
argument_list|)
return|;
block|}
name|protected
operator|:
name|QPoint
name|p
block|;
name|QPoint
name|gp
block|;
name|uint
name|reas
operator|:
literal|8
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CONTEXTMENU
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_INPUTMETHOD
end_ifndef
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QInputMethodEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
expr|enum
name|AttributeType
block|{
name|TextFormat
block|,
name|Cursor
block|,
name|Language
block|,
name|Ruby
block|,
name|Selection
block|}
block|;
name|class
name|Attribute
block|{
name|public
operator|:
name|Attribute
argument_list|(
argument|AttributeType t
argument_list|,
argument|int s
argument_list|,
argument|int l
argument_list|,
argument|QVariant val
argument_list|)
operator|:
name|type
argument_list|(
name|t
argument_list|)
block|,
name|start
argument_list|(
name|s
argument_list|)
block|,
name|length
argument_list|(
name|l
argument_list|)
block|,
name|value
argument_list|(
argument|val
argument_list|)
block|{}
name|AttributeType
name|type
block|;
name|int
name|start
block|;
name|int
name|length
block|;
name|QVariant
name|value
block|;     }
block|;
name|QInputMethodEvent
argument_list|()
block|;
name|QInputMethodEvent
argument_list|(
specifier|const
name|QString
operator|&
name|preeditText
argument_list|,
specifier|const
name|QList
operator|<
name|Attribute
operator|>
operator|&
name|attributes
argument_list|)
block|;
name|void
name|setCommitString
argument_list|(
argument|const QString&commitString
argument_list|,
argument|int replaceFrom =
literal|0
argument_list|,
argument|int replaceLength =
literal|0
argument_list|)
block|;
specifier|inline
specifier|const
name|QList
operator|<
name|Attribute
operator|>
operator|&
name|attributes
argument_list|()
specifier|const
block|{
return|return
name|attrs
return|;
block|}
specifier|inline
specifier|const
name|QString
operator|&
name|preeditString
argument_list|()
specifier|const
block|{
return|return
name|preedit
return|;
block|}
specifier|inline
specifier|const
name|QString
operator|&
name|commitString
argument_list|()
specifier|const
block|{
return|return
name|commit
return|;
block|}
specifier|inline
name|int
name|replacementStart
argument_list|()
specifier|const
block|{
return|return
name|replace_from
return|;
block|}
specifier|inline
name|int
name|replacementLength
argument_list|()
specifier|const
block|{
return|return
name|replace_length
return|;
block|}
name|QInputMethodEvent
argument_list|(
specifier|const
name|QInputMethodEvent
operator|&
name|other
argument_list|)
block|;
name|private
operator|:
name|QString
name|preedit
block|;
name|QList
operator|<
name|Attribute
operator|>
name|attrs
block|;
name|QString
name|commit
block|;
name|int
name|replace_from
block|;
name|int
name|replace_length
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QInputMethodQueryEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|explicit
name|QInputMethodQueryEvent
argument_list|(
argument|Qt::InputMethodQueries queries
argument_list|)
block|;
operator|~
name|QInputMethodQueryEvent
argument_list|()
block|;
name|Qt
operator|::
name|InputMethodQueries
name|queries
argument_list|()
specifier|const
block|{
return|return
name|m_queries
return|;
block|}
name|void
name|setValue
argument_list|(
argument|Qt::InputMethodQuery query
argument_list|,
argument|const QVariant&value
argument_list|)
block|;
name|QVariant
name|value
argument_list|(
argument|Qt::InputMethodQuery query
argument_list|)
specifier|const
block|;
name|private
operator|:
name|Qt
operator|::
name|InputMethodQueries
name|m_queries
block|;     struct
name|QueryPair
block|{
name|Qt
operator|::
name|InputMethodQuery
name|query
block|;
name|QVariant
name|value
block|;     }
block|;
name|QVector
operator|<
name|QueryPair
operator|>
name|m_values
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_INPUTMETHOD
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_decl_stmt
DECL|variable|QMimeData
name|class
name|QMimeData
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QDropEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QDropEvent
argument_list|(
argument|const QPointF& pos
argument_list|,
argument|Qt::DropActions actions
argument_list|,
argument|const QMimeData *data
argument_list|,
argument|Qt::MouseButtons buttons
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|,
argument|Type type = Drop
argument_list|)
block|;
operator|~
name|QDropEvent
argument_list|()
block|;
specifier|inline
name|QPoint
name|pos
argument_list|()
specifier|const
block|{
return|return
name|p
operator|.
name|toPoint
argument_list|()
return|;
block|}
specifier|inline
specifier|const
name|QPointF
operator|&
name|posF
argument_list|()
specifier|const
block|{
return|return
name|p
return|;
block|}
specifier|inline
name|Qt
operator|::
name|MouseButtons
name|mouseButtons
argument_list|()
specifier|const
block|{
return|return
name|mouseState
return|;
block|}
specifier|inline
name|Qt
operator|::
name|KeyboardModifiers
name|keyboardModifiers
argument_list|()
specifier|const
block|{
return|return
name|modState
return|;
block|}
specifier|inline
name|Qt
operator|::
name|DropActions
name|possibleActions
argument_list|()
specifier|const
block|{
return|return
name|act
return|;
block|}
specifier|inline
name|Qt
operator|::
name|DropAction
name|proposedAction
argument_list|()
specifier|const
block|{
return|return
name|default_action
return|;
block|}
specifier|inline
name|void
name|acceptProposedAction
argument_list|()
block|{
name|drop_action
operator|=
name|default_action
block|;
name|accept
argument_list|()
block|; }
specifier|inline
name|Qt
operator|::
name|DropAction
name|dropAction
argument_list|()
specifier|const
block|{
return|return
name|drop_action
return|;
block|}
name|void
name|setDropAction
argument_list|(
argument|Qt::DropAction action
argument_list|)
block|;
name|QObject
operator|*
name|source
argument_list|()
specifier|const
block|;
specifier|inline
specifier|const
name|QMimeData
operator|*
name|mimeData
argument_list|()
specifier|const
block|{
return|return
name|mdata
return|;
block|}
name|protected
operator|:
name|friend
name|class
name|QApplication
block|;
name|QPointF
name|p
block|;
name|Qt
operator|::
name|MouseButtons
name|mouseState
block|;
name|Qt
operator|::
name|KeyboardModifiers
name|modState
block|;
name|Qt
operator|::
name|DropActions
name|act
block|;
name|Qt
operator|::
name|DropAction
name|drop_action
block|;
name|Qt
operator|::
name|DropAction
name|default_action
block|;
specifier|const
name|QMimeData
operator|*
name|mdata
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QDragMoveEvent
range|:
name|public
name|QDropEvent
block|{
name|public
operator|:
name|QDragMoveEvent
argument_list|(
argument|const QPoint&pos
argument_list|,
argument|Qt::DropActions actions
argument_list|,
argument|const QMimeData *data
argument_list|,
argument|Qt::MouseButtons buttons
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|,
argument|Type type = DragMove
argument_list|)
block|;
operator|~
name|QDragMoveEvent
argument_list|()
block|;
specifier|inline
name|QRect
name|answerRect
argument_list|()
specifier|const
block|{
return|return
name|rect
return|;
block|}
specifier|inline
name|void
name|accept
argument_list|()
block|{
name|QDropEvent
operator|::
name|accept
argument_list|()
block|; }
specifier|inline
name|void
name|ignore
argument_list|()
block|{
name|QDropEvent
operator|::
name|ignore
argument_list|()
block|; }
specifier|inline
name|void
name|accept
argument_list|(
argument|const QRect& r
argument_list|)
block|{
name|accept
argument_list|()
block|;
name|rect
operator|=
name|r
block|; }
specifier|inline
name|void
name|ignore
argument_list|(
argument|const QRect& r
argument_list|)
block|{
name|ignore
argument_list|()
block|;
name|rect
operator|=
name|r
block|; }
name|protected
operator|:
name|friend
name|class
name|QApplication
block|;
name|QRect
name|rect
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QDragEnterEvent
range|:
name|public
name|QDragMoveEvent
block|{
name|public
operator|:
name|QDragEnterEvent
argument_list|(
argument|const QPoint&pos
argument_list|,
argument|Qt::DropActions actions
argument_list|,
argument|const QMimeData *data
argument_list|,
argument|Qt::MouseButtons buttons
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|)
block|;
operator|~
name|QDragEnterEvent
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QDragLeaveEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QDragLeaveEvent
argument_list|()
block|;
operator|~
name|QDragLeaveEvent
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QHelpEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QHelpEvent
argument_list|(
argument|Type type
argument_list|,
argument|const QPoint&pos
argument_list|,
argument|const QPoint&globalPos
argument_list|)
block|;
operator|~
name|QHelpEvent
argument_list|()
block|;
specifier|inline
name|int
name|x
argument_list|()
specifier|const
block|{
return|return
name|p
operator|.
name|x
argument_list|()
return|;
block|}
specifier|inline
name|int
name|y
argument_list|()
specifier|const
block|{
return|return
name|p
operator|.
name|y
argument_list|()
return|;
block|}
specifier|inline
name|int
name|globalX
argument_list|()
specifier|const
block|{
return|return
name|gp
operator|.
name|x
argument_list|()
return|;
block|}
specifier|inline
name|int
name|globalY
argument_list|()
specifier|const
block|{
return|return
name|gp
operator|.
name|y
argument_list|()
return|;
block|}
specifier|inline
specifier|const
name|QPoint
operator|&
name|pos
argument_list|()
specifier|const
block|{
return|return
name|p
return|;
block|}
specifier|inline
specifier|const
name|QPoint
operator|&
name|globalPos
argument_list|()
specifier|const
block|{
return|return
name|gp
return|;
block|}
name|private
operator|:
name|QPoint
name|p
block|;
name|QPoint
name|gp
block|; }
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STATUSTIP
end_ifndef
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QStatusTipEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|explicit
name|QStatusTipEvent
argument_list|(
specifier|const
name|QString
operator|&
name|tip
argument_list|)
block|;
operator|~
name|QStatusTipEvent
argument_list|()
block|;
specifier|inline
name|QString
name|tip
argument_list|()
specifier|const
block|{
return|return
name|s
return|;
block|}
name|private
operator|:
name|QString
name|s
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
end_ifndef
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWhatsThisClickedEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|explicit
name|QWhatsThisClickedEvent
argument_list|(
specifier|const
name|QString
operator|&
name|href
argument_list|)
block|;
operator|~
name|QWhatsThisClickedEvent
argument_list|()
block|;
specifier|inline
name|QString
name|href
argument_list|()
specifier|const
block|{
return|return
name|s
return|;
block|}
name|private
operator|:
name|QString
name|s
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACTION
end_ifndef
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QActionEvent
range|:
name|public
name|QEvent
block|{
name|QAction
operator|*
name|act
block|,
operator|*
name|bef
block|;
name|public
operator|:
name|QActionEvent
argument_list|(
argument|int type
argument_list|,
argument|QAction *action
argument_list|,
argument|QAction *before =
literal|0
argument_list|)
block|;
operator|~
name|QActionEvent
argument_list|()
block|;
specifier|inline
name|QAction
operator|*
name|action
argument_list|()
specifier|const
block|{
return|return
name|act
return|;
block|}
specifier|inline
name|QAction
operator|*
name|before
argument_list|()
specifier|const
block|{
return|return
name|bef
return|;
block|}
expr|}
block|;
endif|#
directive|endif
name|class
name|Q_GUI_EXPORT
name|QFileOpenEvent
operator|:
name|public
name|QEvent
block|{
name|public
operator|:
name|explicit
name|QFileOpenEvent
argument_list|(
specifier|const
name|QString
operator|&
name|file
argument_list|)
block|;
name|explicit
name|QFileOpenEvent
argument_list|(
specifier|const
name|QUrl
operator|&
name|url
argument_list|)
block|;
operator|~
name|QFileOpenEvent
argument_list|()
block|;
specifier|inline
name|QString
name|file
argument_list|()
specifier|const
block|{
return|return
name|f
return|;
block|}
name|QUrl
name|url
argument_list|()
specifier|const
block|{
return|return
name|m_url
return|;
block|}
name|bool
name|openFile
argument_list|(
argument|QFile&file
argument_list|,
argument|QIODevice::OpenMode flags
argument_list|)
specifier|const
block|;
name|private
operator|:
name|QString
name|f
block|;
name|QUrl
name|m_url
block|; }
block|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
name|class
name|Q_GUI_EXPORT
name|QToolBarChangeEvent
operator|:
name|public
name|QEvent
block|{
name|public
operator|:
name|explicit
name|QToolBarChangeEvent
argument_list|(
argument|bool t
argument_list|)
block|;
operator|~
name|QToolBarChangeEvent
argument_list|()
block|;
specifier|inline
name|bool
name|toggle
argument_list|()
specifier|const
block|{
return|return
name|tog
return|;
block|}
name|private
operator|:
name|uint
name|tog
operator|:
literal|1
block|; }
block|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|class
name|Q_GUI_EXPORT
name|QShortcutEvent
operator|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QShortcutEvent
argument_list|(
argument|const QKeySequence&key
argument_list|,
argument|int id
argument_list|,
argument|bool ambiguous = false
argument_list|)
block|;
operator|~
name|QShortcutEvent
argument_list|()
block|;
specifier|inline
specifier|const
name|QKeySequence
operator|&
name|key
argument_list|()
specifier|const
block|{
return|return
name|sequence
return|;
block|}
specifier|inline
name|int
name|shortcutId
argument_list|()
specifier|const
block|{
return|return
name|sid
return|;
block|}
specifier|inline
name|bool
name|isAmbiguous
argument_list|()
specifier|const
block|{
return|return
name|ambig
return|;
block|}
name|protected
operator|:
name|QKeySequence
name|sequence
block|;
name|bool
name|ambig
block|;
name|int
name|sid
block|; }
block|;
endif|#
directive|endif
name|class
name|Q_GUI_EXPORT
name|QWindowStateChangeEvent
operator|:
name|public
name|QEvent
block|{
name|public
operator|:
name|explicit
name|QWindowStateChangeEvent
argument_list|(
argument|Qt::WindowStates aOldState
argument_list|,
argument|bool isOverride = false
argument_list|)
block|;
operator|~
name|QWindowStateChangeEvent
argument_list|()
block|;
specifier|inline
name|Qt
operator|::
name|WindowStates
name|oldState
argument_list|()
specifier|const
block|{
return|return
name|ostate
return|;
block|}
name|bool
name|isOverride
argument_list|()
specifier|const
block|;
name|private
operator|:
name|Qt
operator|::
name|WindowStates
name|ostate
block|;
name|bool
name|m_override
block|; }
block|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
name|Q_GUI_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
expr|,
specifier|const
name|QEvent
operator|*
operator|)
block|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|==
operator|(
name|QKeyEvent
operator|*
name|e
expr|,
name|QKeySequence
operator|::
name|StandardKey
name|key
operator|)
block|{
return|return
operator|(
name|e
operator|?
name|e
operator|->
name|matches
argument_list|(
name|key
argument_list|)
operator|:
name|false
operator|)
return|;
block|}
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|==
operator|(
name|QKeySequence
operator|::
name|StandardKey
name|key
expr|,
name|QKeyEvent
operator|*
name|e
operator|)
block|{
return|return
operator|(
name|e
condition|?
name|e
operator|->
name|matches
argument_list|(
name|key
argument_list|)
else|:
name|false
operator|)
return|;
block|}
endif|#
directive|endif
comment|// QT_NO_SHORTCUT
DECL|variable|QTouchEventTouchPointPrivate
name|class
name|QTouchEventTouchPointPrivate
block|;
name|class
name|Q_GUI_EXPORT
name|QTouchEvent
operator|:
name|public
name|QInputEvent
block|{
name|public
operator|:
name|class
name|Q_GUI_EXPORT
name|TouchPoint
block|{
name|public
operator|:
expr|enum
name|InfoFlag
block|{
name|Pen
operator|=
literal|0x0001
block|}
block|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|InfoFlags
argument_list|,
argument|InfoFlag
argument_list|)
name|explicit
name|TouchPoint
argument_list|(
argument|int id = -
literal|1
argument_list|)
block|;
name|TouchPoint
argument_list|(
specifier|const
name|TouchPoint
operator|&
name|other
argument_list|)
block|;
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
name|TouchPoint
argument_list|(
name|TouchPoint
operator|&&
name|other
argument_list|)
operator|:
name|d
argument_list|(
argument|other.d
argument_list|)
block|{
name|other
operator|.
name|d
operator|=
literal|0
block|; }
name|TouchPoint
operator|&
name|operator
operator|=
operator|(
name|TouchPoint
operator|&&
name|other
operator|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
endif|#
directive|endif
operator|~
name|TouchPoint
argument_list|()
block|;
name|TouchPoint
operator|&
name|operator
operator|=
operator|(
specifier|const
name|TouchPoint
operator|&
name|other
operator|)
block|{
if|if
condition|(
name|d
operator|!=
name|other
operator|.
name|d
condition|)
block|{
name|TouchPoint
name|copy
parameter_list|(
name|other
parameter_list|)
function_decl|;
name|swap
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
name|void
name|swap
argument_list|(
argument|TouchPoint&other
argument_list|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
block|; }
name|int
name|id
argument_list|()
specifier|const
block|;
name|Qt
operator|::
name|TouchPointState
name|state
argument_list|()
specifier|const
block|;
name|QPointF
name|pos
argument_list|()
specifier|const
block|;
name|QPointF
name|startPos
argument_list|()
specifier|const
block|;
name|QPointF
name|lastPos
argument_list|()
specifier|const
block|;
name|QPointF
name|scenePos
argument_list|()
specifier|const
block|;
name|QPointF
name|startScenePos
argument_list|()
specifier|const
block|;
name|QPointF
name|lastScenePos
argument_list|()
specifier|const
block|;
name|QPointF
name|screenPos
argument_list|()
specifier|const
block|;
name|QPointF
name|startScreenPos
argument_list|()
specifier|const
block|;
name|QPointF
name|lastScreenPos
argument_list|()
specifier|const
block|;
name|QPointF
name|normalizedPos
argument_list|()
specifier|const
block|;
name|QPointF
name|startNormalizedPos
argument_list|()
specifier|const
block|;
name|QPointF
name|lastNormalizedPos
argument_list|()
specifier|const
block|;
name|QRectF
name|rect
argument_list|()
specifier|const
block|;
name|QRectF
name|sceneRect
argument_list|()
specifier|const
block|;
name|QRectF
name|screenRect
argument_list|()
specifier|const
block|;
name|qreal
name|pressure
argument_list|()
specifier|const
block|;
name|QVector2D
name|velocity
argument_list|()
specifier|const
block|;
name|InfoFlags
name|flags
argument_list|()
specifier|const
block|;
name|QVector
operator|<
name|QPointF
operator|>
name|rawScreenPositions
argument_list|()
specifier|const
block|;
comment|// internal
name|void
name|setId
argument_list|(
argument|int id
argument_list|)
block|;
name|void
name|setState
argument_list|(
argument|Qt::TouchPointStates state
argument_list|)
block|;
name|void
name|setPos
argument_list|(
specifier|const
name|QPointF
operator|&
name|pos
argument_list|)
block|;
name|void
name|setScenePos
argument_list|(
specifier|const
name|QPointF
operator|&
name|scenePos
argument_list|)
block|;
name|void
name|setScreenPos
argument_list|(
specifier|const
name|QPointF
operator|&
name|screenPos
argument_list|)
block|;
name|void
name|setNormalizedPos
argument_list|(
specifier|const
name|QPointF
operator|&
name|normalizedPos
argument_list|)
block|;
name|void
name|setStartPos
argument_list|(
specifier|const
name|QPointF
operator|&
name|startPos
argument_list|)
block|;
name|void
name|setStartScenePos
argument_list|(
specifier|const
name|QPointF
operator|&
name|startScenePos
argument_list|)
block|;
name|void
name|setStartScreenPos
argument_list|(
specifier|const
name|QPointF
operator|&
name|startScreenPos
argument_list|)
block|;
name|void
name|setStartNormalizedPos
argument_list|(
specifier|const
name|QPointF
operator|&
name|startNormalizedPos
argument_list|)
block|;
name|void
name|setLastPos
argument_list|(
specifier|const
name|QPointF
operator|&
name|lastPos
argument_list|)
block|;
name|void
name|setLastScenePos
argument_list|(
specifier|const
name|QPointF
operator|&
name|lastScenePos
argument_list|)
block|;
name|void
name|setLastScreenPos
argument_list|(
specifier|const
name|QPointF
operator|&
name|lastScreenPos
argument_list|)
block|;
name|void
name|setLastNormalizedPos
argument_list|(
specifier|const
name|QPointF
operator|&
name|lastNormalizedPos
argument_list|)
block|;
name|void
name|setRect
argument_list|(
specifier|const
name|QRectF
operator|&
name|rect
argument_list|)
block|;
name|void
name|setSceneRect
argument_list|(
specifier|const
name|QRectF
operator|&
name|sceneRect
argument_list|)
block|;
name|void
name|setScreenRect
argument_list|(
specifier|const
name|QRectF
operator|&
name|screenRect
argument_list|)
block|;
name|void
name|setPressure
argument_list|(
argument|qreal pressure
argument_list|)
block|;
name|void
name|setVelocity
argument_list|(
specifier|const
name|QVector2D
operator|&
name|v
argument_list|)
block|;
name|void
name|setFlags
argument_list|(
argument|InfoFlags flags
argument_list|)
block|;
name|void
name|setRawScreenPositions
argument_list|(
specifier|const
name|QVector
operator|<
name|QPointF
operator|>
operator|&
name|positions
argument_list|)
block|;
name|private
operator|:
name|QTouchEventTouchPointPrivate
operator|*
name|d
block|;
name|friend
name|class
name|QGuiApplication
block|;
name|friend
name|class
name|QGuiApplicationPrivate
block|;
name|friend
name|class
name|QApplication
block|;
name|friend
name|class
name|QApplicationPrivate
block|;     }
block|;
if|#
directive|if
name|QT_DEPRECATED_SINCE
argument_list|(
literal|5
operator|,
literal|0
argument_list|)
block|enum
name|DeviceType
block|{
name|TouchScreen
block|,
name|TouchPad
block|}
block|;
endif|#
directive|endif
name|explicit
name|QTouchEvent
argument_list|(
argument|QEvent::Type eventType
argument_list|,
argument|QTouchDevice *device =
literal|0
argument_list|,
argument|Qt::KeyboardModifiers modifiers = Qt::NoModifier
argument_list|,
argument|Qt::TouchPointStates touchPointStates =
literal|0
argument_list|,
argument|const QList<QTouchEvent::TouchPoint>&touchPoints = QList<QTouchEvent::TouchPoint>()
argument_list|)
block|;
operator|~
name|QTouchEvent
argument_list|()
block|;
specifier|inline
name|QWindow
operator|*
name|window
argument_list|()
specifier|const
block|{
return|return
name|_window
return|;
block|}
specifier|inline
name|QObject
operator|*
name|target
argument_list|()
specifier|const
block|{
return|return
name|_target
return|;
block|}
if|#
directive|if
name|QT_DEPRECATED_SINCE
argument_list|(
literal|5
operator|,
literal|0
argument_list|)
name|QT_DEPRECATED
specifier|inline
name|QTouchEvent
operator|::
name|DeviceType
name|deviceType
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|DeviceType
operator|>
operator|(
name|int
argument_list|(
name|_device
operator|->
name|type
argument_list|()
argument_list|)
operator|)
return|;
block|}
endif|#
directive|endif
specifier|inline
name|Qt
operator|::
name|TouchPointStates
name|touchPointStates
argument_list|()
specifier|const
block|{
return|return
name|_touchPointStates
return|;
block|}
specifier|inline
specifier|const
name|QList
operator|<
name|QTouchEvent
operator|::
name|TouchPoint
operator|>
operator|&
name|touchPoints
argument_list|()
specifier|const
block|{
return|return
name|_touchPoints
return|;
block|}
specifier|inline
name|QTouchDevice
operator|*
name|device
argument_list|()
specifier|const
block|{
return|return
name|_device
return|;
block|}
comment|// internal
specifier|inline
name|void
name|setWindow
argument_list|(
argument|QWindow *awindow
argument_list|)
block|{
name|_window
operator|=
name|awindow
block|; }
specifier|inline
name|void
name|setTarget
argument_list|(
argument|QObject *atarget
argument_list|)
block|{
name|_target
operator|=
name|atarget
block|; }
specifier|inline
name|void
name|setTouchPointStates
argument_list|(
argument|Qt::TouchPointStates aTouchPointStates
argument_list|)
block|{
name|_touchPointStates
operator|=
name|aTouchPointStates
block|; }
specifier|inline
name|void
name|setTouchPoints
argument_list|(
argument|const QList<QTouchEvent::TouchPoint>&atouchPoints
argument_list|)
block|{
name|_touchPoints
operator|=
name|atouchPoints
block|; }
specifier|inline
name|void
name|setDevice
argument_list|(
argument|QTouchDevice *adevice
argument_list|)
block|{
name|_device
operator|=
name|adevice
block|; }
name|protected
operator|:
name|QWindow
operator|*
name|_window
block|;
name|QObject
operator|*
name|_target
block|;
name|QTouchDevice
operator|*
name|_device
block|;
name|Qt
operator|::
name|TouchPointStates
name|_touchPointStates
block|;
name|QList
operator|<
name|QTouchEvent
operator|::
name|TouchPoint
operator|>
name|_touchPoints
block|;
name|friend
name|class
name|QGuiApplication
block|;
name|friend
name|class
name|QGuiApplicationPrivate
block|;
name|friend
name|class
name|QApplication
block|;
name|friend
name|class
name|QApplicationPrivate
block|; }
block|;
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
block|;
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QTouchEvent::TouchPoint::InfoFlags
argument_list|)
name|class
name|Q_GUI_EXPORT
name|QScrollPrepareEvent
operator|:
name|public
name|QEvent
block|{
name|public
operator|:
name|explicit
name|QScrollPrepareEvent
argument_list|(
specifier|const
name|QPointF
operator|&
name|startPos
argument_list|)
block|;
operator|~
name|QScrollPrepareEvent
argument_list|()
block|;
name|QPointF
name|startPos
argument_list|()
specifier|const
block|;
name|QSizeF
name|viewportSize
argument_list|()
specifier|const
block|;
name|QRectF
name|contentPosRange
argument_list|()
specifier|const
block|;
name|QPointF
name|contentPos
argument_list|()
specifier|const
block|;
name|void
name|setViewportSize
argument_list|(
specifier|const
name|QSizeF
operator|&
name|size
argument_list|)
block|;
name|void
name|setContentPosRange
argument_list|(
specifier|const
name|QRectF
operator|&
name|rect
argument_list|)
block|;
name|void
name|setContentPos
argument_list|(
specifier|const
name|QPointF
operator|&
name|pos
argument_list|)
block|;
name|private
operator|:
name|QObject
operator|*
name|m_target
block|;
comment|// Qt 6 remove.
name|QPointF
name|m_startPos
block|;
name|QSizeF
name|m_viewportSize
block|;
name|QRectF
name|m_contentPosRange
block|;
name|QPointF
name|m_contentPos
block|; }
block|;
name|class
name|Q_GUI_EXPORT
name|QScrollEvent
operator|:
name|public
name|QEvent
block|{
name|public
operator|:
expr|enum
name|ScrollState
block|{
name|ScrollStarted
block|,
name|ScrollUpdated
block|,
name|ScrollFinished
block|}
block|;
name|QScrollEvent
argument_list|(
argument|const QPointF&contentPos
argument_list|,
argument|const QPointF&overshoot
argument_list|,
argument|ScrollState scrollState
argument_list|)
block|;
operator|~
name|QScrollEvent
argument_list|()
block|;
name|QPointF
name|contentPos
argument_list|()
specifier|const
block|;
name|QPointF
name|overshootDistance
argument_list|()
specifier|const
block|;
name|ScrollState
name|scrollState
argument_list|()
specifier|const
block|;
name|private
operator|:
name|QPointF
name|m_contentPos
block|;
name|QPointF
name|m_overshoot
block|;
name|QScrollEvent
operator|::
name|ScrollState
name|m_state
block|; }
block|;
name|class
name|Q_GUI_EXPORT
name|QScreenOrientationChangeEvent
operator|:
name|public
name|QEvent
block|{
name|public
operator|:
name|QScreenOrientationChangeEvent
argument_list|(
argument|QScreen *screen
argument_list|,
argument|Qt::ScreenOrientation orientation
argument_list|)
block|;
operator|~
name|QScreenOrientationChangeEvent
argument_list|()
block|;
name|QScreen
operator|*
name|screen
argument_list|()
specifier|const
block|;
name|Qt
operator|::
name|ScreenOrientation
name|orientation
argument_list|()
specifier|const
block|;
name|private
operator|:
name|QScreen
operator|*
name|m_screen
block|;
name|Qt
operator|::
name|ScreenOrientation
name|m_orientation
block|; }
block|;
name|class
name|Q_GUI_EXPORT
name|QApplicationStateChangeEvent
operator|:
name|public
name|QEvent
block|{
name|public
operator|:
name|explicit
name|QApplicationStateChangeEvent
argument_list|(
argument|Qt::ApplicationState state
argument_list|)
block|;
name|Qt
operator|::
name|ApplicationState
name|applicationState
argument_list|()
specifier|const
block|;
name|private
operator|:
name|Qt
operator|::
name|ApplicationState
name|m_applicationState
block|; }
block|;
name|QT_END_NAMESPACE
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QEVENT_H
end_comment
end_unit
