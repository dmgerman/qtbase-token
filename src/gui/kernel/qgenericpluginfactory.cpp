begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qgenericpluginfactory.h"
end_include
begin_include
include|#
directive|include
file|"qguiapplication.h"
end_include
begin_include
include|#
directive|include
file|"private/qfactoryloader_p.h"
end_include
begin_include
include|#
directive|include
file|"qgenericplugin.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_SHARED
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
name|Q_GLOBAL_STATIC_WITH_ARGS
argument_list|(
name|QFactoryLoader
argument_list|,
name|loader
argument_list|,
operator|(
name|QGenericPluginFactoryInterface_iid
operator|,
name|QLatin1String
argument_list|(
literal|"/generic"
argument_list|)
operator|,
name|Qt
operator|::
name|CaseInsensitive
operator|)
argument_list|)
endif|#
directive|endif
comment|//QT_NO_LIBRARY
endif|#
directive|endif
comment|//QT_SHARED
comment|/*!     \class QGenericPluginFactory     \ingroup plugins     \inmodule QtGui      \brief The QGenericPluginFactory class creates plugin drivers.      \sa QGenericPlugin */
comment|/*!     Creates the driver specified by \a key, using the given \a specification.      Note that the keys are case-insensitive.      \sa keys() */
DECL|function|create
name|QObject
modifier|*
name|QGenericPluginFactory
operator|::
name|create
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|,
specifier|const
name|QString
operator|&
name|specification
argument_list|)
argument_list|{
specifier|const
name|QString
name|driver
operator|=
name|key
operator|.
name|toLower
argument_list|()
argument_list|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_SHARED
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
argument_list|if
operator|(
name|QObject
operator|*
name|object
operator|=
name|qLoadPlugin1
argument_list|<
name|QObject
argument_list|,
name|QGenericPlugin
argument_list|>
argument_list|(
name|loader
argument_list|()
argument_list|,
name|driver
argument_list|,
name|specification
argument_list|)
operator|)
return|return
name|object
return|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_return
return|return
literal|0
return|;
end_return
begin_comment
unit|}
comment|/*!     Returns the list of valid keys, i.e. the available mouse drivers.      \sa create() */
end_comment
begin_macro
unit|QStringList
DECL|function|keys
name|QGenericPluginFactory
end_macro
begin_expr_stmt
DECL|function|keys
operator|::
name|keys
operator|(
operator|)
block|{
name|QStringList
name|list
block|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_SHARED
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
typedef|typedef
name|QMultiMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|PluginKeyMap
typedef|;
end_expr_stmt
begin_typedef
typedef|typedef
name|PluginKeyMap
operator|::
name|const_iterator
name|PluginKeyMapConstIterator
typedef|;
end_typedef
begin_decl_stmt
specifier|const
name|PluginKeyMap
name|keyMap
init|=
name|loader
argument_list|()
operator|->
name|keyMap
argument_list|()
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|const
name|PluginKeyMapConstIterator
name|cend
init|=
name|keyMap
operator|.
name|constEnd
argument_list|()
decl_stmt|;
end_decl_stmt
begin_for
for|for
control|(
name|PluginKeyMapConstIterator
name|it
init|=
name|keyMap
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|cend
condition|;
operator|++
name|it
control|)
if|if
condition|(
operator|!
name|list
operator|.
name|contains
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
condition|)
name|list
operator|+=
name|it
operator|.
name|value
argument_list|()
expr_stmt|;
end_for
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_LIBRARY
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_return
return|return
name|list
return|;
end_return
unit|}  QT_END_NAMESPACE
end_unit
