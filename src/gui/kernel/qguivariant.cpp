begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qvariant.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qbrush.h"
end_include
begin_include
include|#
directive|include
file|"qcolor.h"
end_include
begin_include
include|#
directive|include
file|"qcursor.h"
end_include
begin_include
include|#
directive|include
file|"qdatastream.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qfont.h"
end_include
begin_include
include|#
directive|include
file|"qimage.h"
end_include
begin_include
include|#
directive|include
file|"qkeysequence.h"
end_include
begin_include
include|#
directive|include
file|"qtransform.h"
end_include
begin_include
include|#
directive|include
file|"qmatrix.h"
end_include
begin_include
include|#
directive|include
file|"qpalette.h"
end_include
begin_include
include|#
directive|include
file|"qpen.h"
end_include
begin_include
include|#
directive|include
file|"qpixmap.h"
end_include
begin_include
include|#
directive|include
file|"qpolygon.h"
end_include
begin_include
include|#
directive|include
file|"qregion.h"
end_include
begin_include
include|#
directive|include
file|"qtextformat.h"
end_include
begin_include
include|#
directive|include
file|"qmatrix4x4.h"
end_include
begin_include
include|#
directive|include
file|"qvector2d.h"
end_include
begin_include
include|#
directive|include
file|"qvector3d.h"
end_include
begin_include
include|#
directive|include
file|"qvector4d.h"
end_include
begin_include
include|#
directive|include
file|"qquaternion.h"
end_include
begin_include
include|#
directive|include
file|"private/qvariant_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|qt_widgets_variant_handler
name|Q_GUI_EXPORT
specifier|const
name|QVariant
operator|::
name|Handler
modifier|*
name|qt_widgets_variant_handler
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function_decl
name|Q_CORE_EXPORT
specifier|const
name|QVariant
operator|::
name|Handler
modifier|*
name|qcoreVariantHandler
parameter_list|()
function_decl|;
end_function_decl
begin_function
DECL|function|construct
specifier|static
name|void
name|construct
parameter_list|(
name|QVariant
operator|::
name|Private
modifier|*
name|x
parameter_list|,
specifier|const
name|void
modifier|*
name|copy
parameter_list|)
block|{
switch|switch
condition|(
name|x
operator|->
name|type
condition|)
block|{
case|case
name|QVariant
operator|::
name|Bitmap
case|:
name|v_construct
argument_list|<
name|QBitmap
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Region
case|:
name|v_construct
argument_list|<
name|QRegion
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Polygon
case|:
name|v_construct
argument_list|<
name|QPolygon
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Font
case|:
name|v_construct
argument_list|<
name|QFont
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Pixmap
case|:
name|v_construct
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Image
case|:
name|v_construct
argument_list|<
name|QImage
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Brush
case|:
name|v_construct
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Color
case|:
name|v_construct
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Palette
case|:
name|v_construct
argument_list|<
name|QPalette
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Matrix
case|:
name|v_construct
argument_list|<
name|QMatrix
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Transform
case|:
name|v_construct
argument_list|<
name|QTransform
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|TextFormat
case|:
name|v_construct
argument_list|<
name|QTextFormat
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|TextLength
case|:
name|v_construct
argument_list|<
name|QTextLength
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
case|case
name|QVariant
operator|::
name|KeySequence
case|:
name|v_construct
argument_list|<
name|QKeySequence
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QVariant
operator|::
name|Pen
case|:
name|v_construct
argument_list|<
name|QPen
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
case|case
name|QVariant
operator|::
name|Cursor
case|:
name|v_construct
argument_list|<
name|QCursor
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
literal|62
case|:
block|{
comment|// small 'trick' to let a QVariant(Qt::blue) create a variant
comment|// of type QColor
name|x
operator|->
name|type
operator|=
name|QVariant
operator|::
name|Color
expr_stmt|;
name|QColor
name|color
argument_list|(
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|Qt
operator|::
name|GlobalColor
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
decl_stmt|;
name|v_construct
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|x
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
break|break;
block|}
ifndef|#
directive|ifndef
name|QT_NO_MATRIX4X4
case|case
name|QVariant
operator|::
name|Matrix4x4
case|:
name|v_construct
argument_list|<
name|QMatrix4x4
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_VECTOR2D
case|case
name|QVariant
operator|::
name|Vector2D
case|:
name|v_construct
argument_list|<
name|QVector2D
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_VECTOR3D
case|case
name|QVariant
operator|::
name|Vector3D
case|:
name|v_construct
argument_list|<
name|QVector3D
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_VECTOR4D
case|case
name|QVariant
operator|::
name|Vector4D
case|:
name|v_construct
argument_list|<
name|QVector4D
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QUATERNION
case|case
name|QVariant
operator|::
name|Quaternion
case|:
name|v_construct
argument_list|<
name|QQuaternion
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QVariant
operator|::
name|SizePolicy
case|:
case|case
name|QVariant
operator|::
name|Icon
case|:
if|if
condition|(
name|qt_widgets_variant_handler
condition|)
block|{
name|qt_widgets_variant_handler
operator|->
name|construct
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|qcoreVariantHandler
argument_list|()
operator|->
name|construct
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
return|return;
block|}
name|x
operator|->
name|is_null
operator|=
operator|!
name|copy
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
specifier|static
name|void
name|clear
parameter_list|(
name|QVariant
operator|::
name|Private
modifier|*
name|d
parameter_list|)
block|{
switch|switch
condition|(
name|d
operator|->
name|type
condition|)
block|{
case|case
name|QVariant
operator|::
name|Bitmap
case|:
name|v_clear
argument_list|<
name|QBitmap
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Cursor
case|:
name|v_clear
argument_list|<
name|QCursor
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Region
case|:
name|v_clear
argument_list|<
name|QRegion
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Polygon
case|:
name|v_clear
argument_list|<
name|QPolygon
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Font
case|:
name|v_clear
argument_list|<
name|QFont
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Pixmap
case|:
name|v_clear
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Image
case|:
name|v_clear
argument_list|<
name|QImage
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Brush
case|:
name|v_clear
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Color
case|:
name|v_clear
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Palette
case|:
name|v_clear
argument_list|<
name|QPalette
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Matrix
case|:
name|v_clear
argument_list|<
name|QMatrix
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Transform
case|:
name|v_clear
argument_list|<
name|QTransform
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|TextFormat
case|:
name|v_clear
argument_list|<
name|QTextFormat
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|TextLength
case|:
name|v_clear
argument_list|<
name|QTextLength
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
case|case
name|QVariant
operator|::
name|KeySequence
case|:
name|v_clear
argument_list|<
name|QKeySequence
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QVariant
operator|::
name|Pen
case|:
name|v_clear
argument_list|<
name|QPen
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_MATRIX4X4
case|case
name|QVariant
operator|::
name|Matrix4x4
case|:
name|v_clear
argument_list|<
name|QMatrix4x4
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_VECTOR2D
case|case
name|QVariant
operator|::
name|Vector2D
case|:
name|v_clear
argument_list|<
name|QVector2D
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_VECTOR3D
case|case
name|QVariant
operator|::
name|Vector3D
case|:
name|v_clear
argument_list|<
name|QVector3D
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_VECTOR4D
case|case
name|QVariant
operator|::
name|Vector4D
case|:
name|v_clear
argument_list|<
name|QVector4D
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QUATERNION
case|case
name|QVariant
operator|::
name|Quaternion
case|:
name|v_clear
argument_list|<
name|QVector4D
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QVariant
operator|::
name|SizePolicy
case|:
case|case
name|QVariant
operator|::
name|Icon
case|:
if|if
condition|(
name|qt_widgets_variant_handler
condition|)
block|{
name|qt_widgets_variant_handler
operator|->
name|clear
argument_list|(
name|d
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|qcoreVariantHandler
argument_list|()
operator|->
name|clear
argument_list|(
name|d
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|type
operator|=
name|QVariant
operator|::
name|Invalid
expr_stmt|;
name|d
operator|->
name|is_null
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|is_shared
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isNull
specifier|static
name|bool
name|isNull
parameter_list|(
specifier|const
name|QVariant
operator|::
name|Private
modifier|*
name|d
parameter_list|)
block|{
switch|switch
condition|(
name|d
operator|->
name|type
condition|)
block|{
case|case
name|QVariant
operator|::
name|Bitmap
case|:
return|return
name|v_cast
argument_list|<
name|QBitmap
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|isNull
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|Region
case|:
return|return
name|v_cast
argument_list|<
name|QRegion
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|isEmpty
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|Polygon
case|:
return|return
name|v_cast
argument_list|<
name|QPolygon
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|isEmpty
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|Pixmap
case|:
return|return
name|v_cast
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|isNull
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|Image
case|:
return|return
name|v_cast
argument_list|<
name|QImage
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|isNull
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|Matrix
case|:
case|case
name|QVariant
operator|::
name|TextFormat
case|:
case|case
name|QVariant
operator|::
name|TextLength
case|:
case|case
name|QVariant
operator|::
name|Cursor
case|:
case|case
name|QVariant
operator|::
name|StringList
case|:
case|case
name|QVariant
operator|::
name|Font
case|:
case|case
name|QVariant
operator|::
name|Brush
case|:
case|case
name|QVariant
operator|::
name|Color
case|:
case|case
name|QVariant
operator|::
name|Palette
case|:
case|case
name|QVariant
operator|::
name|SizePolicy
case|:
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
case|case
name|QVariant
operator|::
name|KeySequence
case|:
endif|#
directive|endif
case|case
name|QVariant
operator|::
name|Pen
case|:
ifndef|#
directive|ifndef
name|QT_NO_MATRIX4X4
case|case
name|QVariant
operator|::
name|Matrix4x4
case|:
endif|#
directive|endif
break|break;
ifndef|#
directive|ifndef
name|QT_NO_VECTOR2D
case|case
name|QVariant
operator|::
name|Vector2D
case|:
return|return
name|v_cast
argument_list|<
name|QVector2D
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|isNull
argument_list|()
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_VECTOR3D
case|case
name|QVariant
operator|::
name|Vector3D
case|:
return|return
name|v_cast
argument_list|<
name|QVector3D
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|isNull
argument_list|()
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_VECTOR4D
case|case
name|QVariant
operator|::
name|Vector4D
case|:
return|return
name|v_cast
argument_list|<
name|QVector4D
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|isNull
argument_list|()
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QUATERNION
case|case
name|QVariant
operator|::
name|Quaternion
case|:
return|return
name|v_cast
argument_list|<
name|QQuaternion
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|isNull
argument_list|()
return|;
endif|#
directive|endif
case|case
name|QVariant
operator|::
name|Icon
case|:
if|if
condition|(
name|qt_widgets_variant_handler
condition|)
return|return
name|qt_widgets_variant_handler
operator|->
name|isNull
argument_list|(
name|d
argument_list|)
return|;
break|break;
default|default:
return|return
name|qcoreVariantHandler
argument_list|()
operator|->
name|isNull
argument_list|(
name|d
argument_list|)
return|;
block|}
return|return
name|d
operator|->
name|is_null
return|;
block|}
end_function
begin_function
DECL|function|compare
specifier|static
name|bool
name|compare
parameter_list|(
specifier|const
name|QVariant
operator|::
name|Private
modifier|*
name|a
parameter_list|,
specifier|const
name|QVariant
operator|::
name|Private
modifier|*
name|b
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|a
operator|->
name|type
operator|==
name|b
operator|->
name|type
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|a
operator|->
name|type
condition|)
block|{
case|case
name|QVariant
operator|::
name|Cursor
case|:
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
return|return
name|v_cast
argument_list|<
name|QCursor
argument_list|>
argument_list|(
name|a
argument_list|)
operator|->
name|shape
argument_list|()
operator|==
name|v_cast
argument_list|<
name|QCursor
argument_list|>
argument_list|(
name|b
argument_list|)
operator|->
name|shape
argument_list|()
return|;
endif|#
directive|endif
case|case
name|QVariant
operator|::
name|Bitmap
case|:
return|return
name|v_cast
argument_list|<
name|QBitmap
argument_list|>
argument_list|(
name|a
argument_list|)
operator|->
name|cacheKey
argument_list|()
operator|==
name|v_cast
argument_list|<
name|QBitmap
argument_list|>
argument_list|(
name|b
argument_list|)
operator|->
name|cacheKey
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|Polygon
case|:
return|return
operator|*
name|v_cast
argument_list|<
name|QPolygon
argument_list|>
argument_list|(
name|a
argument_list|)
operator|==
operator|*
name|v_cast
argument_list|<
name|QPolygon
argument_list|>
argument_list|(
name|b
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|Region
case|:
return|return
operator|*
name|v_cast
argument_list|<
name|QRegion
argument_list|>
argument_list|(
name|a
argument_list|)
operator|==
operator|*
name|v_cast
argument_list|<
name|QRegion
argument_list|>
argument_list|(
name|b
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|Font
case|:
return|return
operator|*
name|v_cast
argument_list|<
name|QFont
argument_list|>
argument_list|(
name|a
argument_list|)
operator|==
operator|*
name|v_cast
argument_list|<
name|QFont
argument_list|>
argument_list|(
name|b
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|Pixmap
case|:
return|return
name|v_cast
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
name|a
argument_list|)
operator|->
name|cacheKey
argument_list|()
operator|==
name|v_cast
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
name|b
argument_list|)
operator|->
name|cacheKey
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|Image
case|:
return|return
operator|*
name|v_cast
argument_list|<
name|QImage
argument_list|>
argument_list|(
name|a
argument_list|)
operator|==
operator|*
name|v_cast
argument_list|<
name|QImage
argument_list|>
argument_list|(
name|b
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|Brush
case|:
return|return
operator|*
name|v_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|a
argument_list|)
operator|==
operator|*
name|v_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|b
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|Color
case|:
return|return
operator|*
name|v_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|a
argument_list|)
operator|==
operator|*
name|v_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|b
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|Palette
case|:
return|return
operator|*
name|v_cast
argument_list|<
name|QPalette
argument_list|>
argument_list|(
name|a
argument_list|)
operator|==
operator|*
name|v_cast
argument_list|<
name|QPalette
argument_list|>
argument_list|(
name|b
argument_list|)
return|;
ifndef|#
directive|ifndef
name|QT_NO_ICON
case|case
name|QVariant
operator|::
name|Icon
case|:
comment|/* QIcon::operator==() cannot be reasonably implemented for QIcon,          * so we always return false. */
return|return
literal|false
return|;
endif|#
directive|endif
case|case
name|QVariant
operator|::
name|Matrix
case|:
return|return
operator|*
name|v_cast
argument_list|<
name|QMatrix
argument_list|>
argument_list|(
name|a
argument_list|)
operator|==
operator|*
name|v_cast
argument_list|<
name|QMatrix
argument_list|>
argument_list|(
name|b
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|Transform
case|:
return|return
operator|*
name|v_cast
argument_list|<
name|QTransform
argument_list|>
argument_list|(
name|a
argument_list|)
operator|==
operator|*
name|v_cast
argument_list|<
name|QTransform
argument_list|>
argument_list|(
name|b
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|TextFormat
case|:
return|return
operator|*
name|v_cast
argument_list|<
name|QTextFormat
argument_list|>
argument_list|(
name|a
argument_list|)
operator|==
operator|*
name|v_cast
argument_list|<
name|QTextFormat
argument_list|>
argument_list|(
name|b
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|TextLength
case|:
return|return
operator|*
name|v_cast
argument_list|<
name|QTextLength
argument_list|>
argument_list|(
name|a
argument_list|)
operator|==
operator|*
name|v_cast
argument_list|<
name|QTextLength
argument_list|>
argument_list|(
name|b
argument_list|)
return|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
case|case
name|QVariant
operator|::
name|KeySequence
case|:
return|return
operator|*
name|v_cast
argument_list|<
name|QKeySequence
argument_list|>
argument_list|(
name|a
argument_list|)
operator|==
operator|*
name|v_cast
argument_list|<
name|QKeySequence
argument_list|>
argument_list|(
name|b
argument_list|)
return|;
endif|#
directive|endif
case|case
name|QVariant
operator|::
name|Pen
case|:
return|return
operator|*
name|v_cast
argument_list|<
name|QPen
argument_list|>
argument_list|(
name|a
argument_list|)
operator|==
operator|*
name|v_cast
argument_list|<
name|QPen
argument_list|>
argument_list|(
name|b
argument_list|)
return|;
ifndef|#
directive|ifndef
name|QT_NO_MATRIX4X4
case|case
name|QVariant
operator|::
name|Matrix4x4
case|:
return|return
operator|*
name|v_cast
argument_list|<
name|QMatrix4x4
argument_list|>
argument_list|(
name|a
argument_list|)
operator|==
operator|*
name|v_cast
argument_list|<
name|QMatrix4x4
argument_list|>
argument_list|(
name|b
argument_list|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_VECTOR2D
case|case
name|QVariant
operator|::
name|Vector2D
case|:
return|return
operator|*
name|v_cast
argument_list|<
name|QVector2D
argument_list|>
argument_list|(
name|a
argument_list|)
operator|==
operator|*
name|v_cast
argument_list|<
name|QVector2D
argument_list|>
argument_list|(
name|b
argument_list|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_VECTOR3D
case|case
name|QVariant
operator|::
name|Vector3D
case|:
return|return
operator|*
name|v_cast
argument_list|<
name|QVector3D
argument_list|>
argument_list|(
name|a
argument_list|)
operator|==
operator|*
name|v_cast
argument_list|<
name|QVector3D
argument_list|>
argument_list|(
name|b
argument_list|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_VECTOR4D
case|case
name|QVariant
operator|::
name|Vector4D
case|:
return|return
operator|*
name|v_cast
argument_list|<
name|QVector4D
argument_list|>
argument_list|(
name|a
argument_list|)
operator|==
operator|*
name|v_cast
argument_list|<
name|QVector4D
argument_list|>
argument_list|(
name|b
argument_list|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QUATERNION
case|case
name|QVariant
operator|::
name|Quaternion
case|:
return|return
operator|*
name|v_cast
argument_list|<
name|QQuaternion
argument_list|>
argument_list|(
name|a
argument_list|)
operator|==
operator|*
name|v_cast
argument_list|<
name|QQuaternion
argument_list|>
argument_list|(
name|b
argument_list|)
return|;
endif|#
directive|endif
case|case
name|QVariant
operator|::
name|SizePolicy
case|:
if|if
condition|(
name|qt_widgets_variant_handler
condition|)
return|return
name|qt_widgets_variant_handler
operator|->
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
break|break;
default|default:
break|break;
block|}
return|return
name|qcoreVariantHandler
argument_list|()
operator|->
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|convert
specifier|static
name|bool
name|convert
parameter_list|(
specifier|const
name|QVariant
operator|::
name|Private
modifier|*
name|d
parameter_list|,
name|QVariant
operator|::
name|Type
name|t
parameter_list|,
name|void
modifier|*
name|result
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|)
block|{
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|QVariant
operator|::
name|ByteArray
case|:
if|if
condition|(
name|d
operator|->
name|type
operator|==
name|QVariant
operator|::
name|Color
condition|)
block|{
operator|*
cast|static_cast
argument_list|<
name|QByteArray
operator|*
argument_list|>
argument_list|(
name|result
argument_list|)
operator|=
name|v_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|name
argument_list|()
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
break|break;
case|case
name|QVariant
operator|::
name|String
case|:
block|{
name|QString
modifier|*
name|str
init|=
cast|static_cast
argument_list|<
name|QString
operator|*
argument_list|>
argument_list|(
name|result
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|d
operator|->
name|type
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
case|case
name|QVariant
operator|::
name|KeySequence
case|:
operator|*
name|str
operator|=
name|QString
argument_list|(
operator|*
name|v_cast
argument_list|<
name|QKeySequence
argument_list|>
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
endif|#
directive|endif
case|case
name|QVariant
operator|::
name|Font
case|:
operator|*
name|str
operator|=
name|v_cast
argument_list|<
name|QFont
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|toString
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|Color
case|:
operator|*
name|str
operator|=
name|v_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|name
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
default|default:
break|break;
block|}
break|break;
block|}
case|case
name|QVariant
operator|::
name|Pixmap
case|:
if|if
condition|(
name|d
operator|->
name|type
operator|==
name|QVariant
operator|::
name|Image
condition|)
block|{
operator|*
cast|static_cast
argument_list|<
name|QPixmap
operator|*
argument_list|>
argument_list|(
name|result
argument_list|)
operator|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
operator|*
name|v_cast
argument_list|<
name|QImage
argument_list|>
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|type
operator|==
name|QVariant
operator|::
name|Bitmap
condition|)
block|{
operator|*
cast|static_cast
argument_list|<
name|QPixmap
operator|*
argument_list|>
argument_list|(
name|result
argument_list|)
operator|=
operator|*
name|v_cast
argument_list|<
name|QBitmap
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|type
operator|==
name|QVariant
operator|::
name|Brush
condition|)
block|{
if|if
condition|(
name|v_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|TexturePattern
condition|)
block|{
operator|*
cast|static_cast
argument_list|<
name|QPixmap
operator|*
argument_list|>
argument_list|(
name|result
argument_list|)
operator|=
name|v_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|texture
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
break|break;
case|case
name|QVariant
operator|::
name|Image
case|:
if|if
condition|(
name|d
operator|->
name|type
operator|==
name|QVariant
operator|::
name|Pixmap
condition|)
block|{
operator|*
cast|static_cast
argument_list|<
name|QImage
operator|*
argument_list|>
argument_list|(
name|result
argument_list|)
operator|=
name|v_cast
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|toImage
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|type
operator|==
name|QVariant
operator|::
name|Bitmap
condition|)
block|{
operator|*
cast|static_cast
argument_list|<
name|QImage
operator|*
argument_list|>
argument_list|(
name|result
argument_list|)
operator|=
name|v_cast
argument_list|<
name|QBitmap
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|toImage
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
break|break;
case|case
name|QVariant
operator|::
name|Bitmap
case|:
if|if
condition|(
name|d
operator|->
name|type
operator|==
name|QVariant
operator|::
name|Pixmap
condition|)
block|{
operator|*
cast|static_cast
argument_list|<
name|QBitmap
operator|*
argument_list|>
argument_list|(
name|result
argument_list|)
operator|=
operator|*
name|v_cast
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|type
operator|==
name|QVariant
operator|::
name|Image
condition|)
block|{
operator|*
cast|static_cast
argument_list|<
name|QBitmap
operator|*
argument_list|>
argument_list|(
name|result
argument_list|)
operator|=
name|QBitmap
operator|::
name|fromImage
argument_list|(
operator|*
name|v_cast
argument_list|<
name|QImage
argument_list|>
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
case|case
name|QVariant
operator|::
name|Int
case|:
if|if
condition|(
name|d
operator|->
name|type
operator|==
name|QVariant
operator|::
name|KeySequence
condition|)
block|{
operator|*
cast|static_cast
argument_list|<
name|int
operator|*
argument_list|>
argument_list|(
name|result
argument_list|)
operator|=
call|(
name|int
call|)
argument_list|(
operator|*
operator|(
name|v_cast
argument_list|<
name|QKeySequence
argument_list|>
argument_list|(
name|d
argument_list|)
operator|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
break|break;
endif|#
directive|endif
case|case
name|QVariant
operator|::
name|Font
case|:
if|if
condition|(
name|d
operator|->
name|type
operator|==
name|QVariant
operator|::
name|String
condition|)
block|{
name|QFont
modifier|*
name|f
init|=
cast|static_cast
argument_list|<
name|QFont
operator|*
argument_list|>
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|f
operator|->
name|fromString
argument_list|(
operator|*
name|v_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
break|break;
case|case
name|QVariant
operator|::
name|Color
case|:
if|if
condition|(
name|d
operator|->
name|type
operator|==
name|QVariant
operator|::
name|String
condition|)
block|{
cast|static_cast
argument_list|<
name|QColor
operator|*
argument_list|>
argument_list|(
name|result
argument_list|)
operator|->
name|setNamedColor
argument_list|(
operator|*
name|v_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|QColor
operator|*
argument_list|>
argument_list|(
name|result
argument_list|)
operator|->
name|isValid
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|type
operator|==
name|QVariant
operator|::
name|ByteArray
condition|)
block|{
cast|static_cast
argument_list|<
name|QColor
operator|*
argument_list|>
argument_list|(
name|result
argument_list|)
operator|->
name|setNamedColor
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
operator|*
name|v_cast
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
name|d
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|type
operator|==
name|QVariant
operator|::
name|Brush
condition|)
block|{
if|if
condition|(
name|v_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidPattern
condition|)
block|{
operator|*
cast|static_cast
argument_list|<
name|QColor
operator|*
argument_list|>
argument_list|(
name|result
argument_list|)
operator|=
name|v_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|color
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
break|break;
case|case
name|QVariant
operator|::
name|Brush
case|:
if|if
condition|(
name|d
operator|->
name|type
operator|==
name|QVariant
operator|::
name|Color
condition|)
block|{
operator|*
cast|static_cast
argument_list|<
name|QBrush
operator|*
argument_list|>
argument_list|(
name|result
argument_list|)
operator|=
name|QBrush
argument_list|(
operator|*
name|v_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|type
operator|==
name|QVariant
operator|::
name|Pixmap
condition|)
block|{
operator|*
cast|static_cast
argument_list|<
name|QBrush
operator|*
argument_list|>
argument_list|(
name|result
argument_list|)
operator|=
name|QBrush
argument_list|(
operator|*
name|v_cast
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
case|case
name|QVariant
operator|::
name|KeySequence
case|:
block|{
name|QKeySequence
modifier|*
name|seq
init|=
cast|static_cast
argument_list|<
name|QKeySequence
operator|*
argument_list|>
argument_list|(
name|result
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|d
operator|->
name|type
condition|)
block|{
case|case
name|QVariant
operator|::
name|String
case|:
operator|*
name|seq
operator|=
name|QKeySequence
argument_list|(
operator|*
name|v_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|Int
case|:
operator|*
name|seq
operator|=
name|QKeySequence
argument_list|(
name|d
operator|->
name|data
operator|.
name|i
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
default|default:
break|break;
block|}
block|}
endif|#
directive|endif
default|default:
break|break;
block|}
return|return
name|qcoreVariantHandler
argument_list|()
operator|->
name|convert
argument_list|(
name|d
argument_list|,
name|t
argument_list|,
name|result
argument_list|,
name|ok
argument_list|)
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DEBUG_STREAM
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_BROKEN_DEBUG_STREAM
argument_list|)
end_if
begin_function
DECL|function|streamDebug
specifier|static
name|void
name|streamDebug
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|v
parameter_list|)
block|{
switch|switch
condition|(
name|v
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Cursor
case|:
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
comment|//        dbg.nospace()<< qvariant_cast<QCursor>(v); //FIXME
endif|#
directive|endif
break|break;
case|case
name|QVariant
operator|::
name|Bitmap
case|:
comment|//        dbg.nospace()<< qvariant_cast<QBitmap>(v); //FIXME
break|break;
case|case
name|QVariant
operator|::
name|Polygon
case|:
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
name|qvariant_cast
argument_list|<
name|QPolygon
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Region
case|:
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
name|qvariant_cast
argument_list|<
name|QRegion
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Font
case|:
comment|//        dbg.nospace()<< qvariant_cast<QFont>(v);  //FIXME
break|break;
case|case
name|QVariant
operator|::
name|Matrix
case|:
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
name|qvariant_cast
argument_list|<
name|QMatrix
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Transform
case|:
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
name|qvariant_cast
argument_list|<
name|QTransform
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Pixmap
case|:
comment|//        dbg.nospace()<< qvariant_cast<QPixmap>(v); //FIXME
break|break;
case|case
name|QVariant
operator|::
name|Image
case|:
comment|//        dbg.nospace()<< qvariant_cast<QImage>(v); //FIXME
break|break;
case|case
name|QVariant
operator|::
name|Brush
case|:
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Color
case|:
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Palette
case|:
comment|//        dbg.nospace()<< qvariant_cast<QPalette>(v); //FIXME
break|break;
ifndef|#
directive|ifndef
name|QT_NO_ICON
case|case
name|QVariant
operator|::
name|Icon
case|:
comment|//        dbg.nospace()<< qvariant_cast<QIcon>(v); // FIXME
break|break;
endif|#
directive|endif
case|case
name|QVariant
operator|::
name|SizePolicy
case|:
comment|//        dbg.nospace()<< qvariant_cast<QSizePolicy>(v); //FIXME
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
case|case
name|QVariant
operator|::
name|KeySequence
case|:
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
name|qvariant_cast
argument_list|<
name|QKeySequence
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QVariant
operator|::
name|Pen
case|:
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
name|qvariant_cast
argument_list|<
name|QPen
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_MATRIX4X4
case|case
name|QVariant
operator|::
name|Matrix4x4
case|:
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
name|qvariant_cast
argument_list|<
name|QMatrix4x4
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_VECTOR2D
case|case
name|QVariant
operator|::
name|Vector2D
case|:
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
name|qvariant_cast
argument_list|<
name|QVector2D
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_VECTOR3D
case|case
name|QVariant
operator|::
name|Vector3D
case|:
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
name|qvariant_cast
argument_list|<
name|QVector3D
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_VECTOR4D
case|case
name|QVariant
operator|::
name|Vector4D
case|:
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
name|qvariant_cast
argument_list|<
name|QVector4D
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QUATERNION
case|case
name|QVariant
operator|::
name|Quaternion
case|:
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
name|qvariant_cast
argument_list|<
name|QQuaternion
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
default|default:
name|qcoreVariantHandler
argument_list|()
operator|->
name|debugStream
argument_list|(
name|dbg
argument_list|,
name|v
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|qt_gui_variant_handler
specifier|const
name|QVariant
operator|::
name|Handler
name|qt_gui_variant_handler
init|=
block|{
name|construct
block|,
name|clear
block|,
name|isNull
block|,
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
literal|0
block|,
literal|0
block|,
endif|#
directive|endif
name|compare
block|,
name|convert
block|,
literal|0
block|,
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DEBUG_STREAM
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_BROKEN_DEBUG_STREAM
argument_list|)
name|streamDebug
else|#
directive|else
literal|0
endif|#
directive|endif
block|}
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|QMetaTypeGuiHelper
struct|struct
name|QMetaTypeGuiHelper
block|{
DECL|member|creator
name|QMetaType
operator|::
name|Creator
name|creator
decl_stmt|;
DECL|member|deleter
name|QMetaType
operator|::
name|Deleter
name|deleter
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
DECL|member|saveOp
name|QMetaType
operator|::
name|SaveOperator
name|saveOp
decl_stmt|;
DECL|member|loadOp
name|QMetaType
operator|::
name|LoadOperator
name|loadOp
decl_stmt|;
endif|#
directive|endif
DECL|member|constructor
name|QMetaType
operator|::
name|Constructor
name|constructor
decl_stmt|;
DECL|member|destructor
name|QMetaType
operator|::
name|Destructor
name|destructor
decl_stmt|;
DECL|member|size
name|int
name|size
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
specifier|extern
name|Q_CORE_EXPORT
specifier|const
name|QMetaTypeGuiHelper
modifier|*
name|qMetaTypeGuiHelper
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_DATASTREAM
end_ifdef
begin_define
DECL|macro|Q_DECL_METATYPE_HELPER
define|#
directive|define
name|Q_DECL_METATYPE_HELPER
parameter_list|(
name|TYPE
parameter_list|)
define|\
value|typedef void *(*QCreate##TYPE)(const TYPE *); \      static const QCreate##TYPE qCreate##TYPE = qMetaTypeCreateHelper<TYPE>; \      typedef void (*QDelete##TYPE)(TYPE *); \      static const QDelete##TYPE qDelete##TYPE = qMetaTypeDeleteHelper<TYPE>; \      typedef void *(*QConstruct##TYPE)(void *, const TYPE *); \      static const QConstruct##TYPE qConstruct##TYPE = qMetaTypeConstructHelper<TYPE>; \      typedef void (*QDestruct##TYPE)(TYPE *); \      static const QDestruct##TYPE qDestruct##TYPE = qMetaTypeDestructHelper<TYPE>;
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|Q_DECL_METATYPE_HELPER
define|#
directive|define
name|Q_DECL_METATYPE_HELPER
parameter_list|(
name|TYPE
parameter_list|)
define|\
value|typedef void *(*QCreate##TYPE)(const TYPE *); \      static const QCreate##TYPE qCreate##TYPE = qMetaTypeCreateHelper<TYPE>; \      typedef void (*QDelete##TYPE)(TYPE *); \      static const QDelete##TYPE qDelete##TYPE = qMetaTypeDeleteHelper<TYPE>; \      typedef void *(*QConstruct##TYPE)(void *, const TYPE *); \      static const QConstruct##TYPE qConstruct##TYPE = qMetaTypeConstructHelper<TYPE>; \      typedef void (*QDestruct##TYPE)(TYPE *); \      static const QDestruct##TYPE qDestruct##TYPE = qMetaTypeDestructHelper<TYPE>; \      typedef void (*QSave##TYPE)(QDataStream&, const TYPE *); \      static const QSave##TYPE qSave##TYPE = qMetaTypeSaveHelper<TYPE>; \      typedef void (*QLoad##TYPE)(QDataStream&, TYPE *); \      static const QLoad##TYPE qLoad##TYPE = qMetaTypeLoadHelper<TYPE>;
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QFont
argument_list|)
end_macro
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QPixmap
argument_list|)
end_macro
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QBrush
argument_list|)
end_macro
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QColor
argument_list|)
end_macro
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QPalette
argument_list|)
end_macro
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QImage
argument_list|)
end_macro
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QPolygon
argument_list|)
end_macro
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QRegion
argument_list|)
end_macro
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QBitmap
argument_list|)
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QCursor
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
end_ifndef
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QKeySequence
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QPen
argument_list|)
end_macro
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QTextLength
argument_list|)
end_macro
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QTextFormat
argument_list|)
end_macro
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QMatrix
argument_list|)
end_macro
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QTransform
argument_list|)
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MATRIX4X4
end_ifndef
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QMatrix4x4
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_VECTOR2D
end_ifndef
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QVector2D
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_VECTOR3D
end_ifndef
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QVector3D
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_VECTOR4D
end_ifndef
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QVector4D
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QUATERNION
end_ifndef
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QQuaternion
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_DATASTREAM
end_ifdef
begin_define
DECL|macro|Q_IMPL_METATYPE_HELPER
define|#
directive|define
name|Q_IMPL_METATYPE_HELPER
parameter_list|(
name|TYPE
parameter_list|)
define|\
value|{ reinterpret_cast<QMetaType::Creator>(qCreate##TYPE), \        reinterpret_cast<QMetaType::Deleter>(qDelete##TYPE), \        reinterpret_cast<QMetaType::Constructor>(qConstruct##TYPE), \        reinterpret_cast<QMetaType::Destructor>(qDestruct##TYPE), \        sizeof(TYPE) \      }
end_define
begin_else
else|#
directive|else
end_else
begin_define
define|#
directive|define
name|Q_IMPL_METATYPE_HELPER
parameter_list|(
name|TYPE
parameter_list|)
define|\
value|{ reinterpret_cast<QMetaType::Creator>(qCreate##TYPE), \        reinterpret_cast<QMetaType::Deleter>(qDelete##TYPE), \        reinterpret_cast<QMetaType::SaveOperator>(qSave##TYPE), \        reinterpret_cast<QMetaType::LoadOperator>(qLoad##TYPE), \        reinterpret_cast<QMetaType::Constructor>(qConstruct##TYPE), \        reinterpret_cast<QMetaType::Destructor>(qDestruct##TYPE), \        sizeof(TYPE) \      }
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|qVariantGuiHelper
specifier|static
specifier|const
name|QMetaTypeGuiHelper
name|qVariantGuiHelper
index|[]
init|=
block|{
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QFont
argument_list|)
block|,
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QPixmap
argument_list|)
block|,
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QBrush
argument_list|)
block|,
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QColor
argument_list|)
block|,
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QPalette
argument_list|)
block|,
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QImage
argument_list|)
block|,
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QPolygon
argument_list|)
block|,
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QRegion
argument_list|)
block|,
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QBitmap
argument_list|)
block|,
ifdef|#
directive|ifdef
name|QT_NO_CURSOR
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
else|#
directive|else
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QCursor
argument_list|)
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_NO_SHORTCUT
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
else|#
directive|else
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QKeySequence
argument_list|)
block|,
endif|#
directive|endif
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QPen
argument_list|)
block|,
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QTextLength
argument_list|)
block|,
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QTextFormat
argument_list|)
block|,
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QMatrix
argument_list|)
block|,
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QTransform
argument_list|)
block|,
ifndef|#
directive|ifndef
name|QT_NO_MATRIX4X4
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QMatrix4x4
argument_list|)
block|,
else|#
directive|else
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_VECTOR2D
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QVector2D
argument_list|)
block|,
else|#
directive|else
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_VECTOR3D
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QVector3D
argument_list|)
block|,
else|#
directive|else
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_VECTOR4D
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QVector4D
argument_list|)
block|,
else|#
directive|else
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QUATERNION
name|Q_IMPL_METATYPE_HELPER
argument_list|(
argument|QQuaternion
argument_list|)
else|#
directive|else
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
endif|#
directive|endif
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_guivariant_last_handler
specifier|static
specifier|const
name|QVariant
operator|::
name|Handler
modifier|*
name|qt_guivariant_last_handler
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qRegisterGuiVariant
name|int
name|qRegisterGuiVariant
parameter_list|()
block|{
name|qt_guivariant_last_handler
operator|=
name|QVariant
operator|::
name|handler
expr_stmt|;
name|QVariant
operator|::
name|handler
operator|=
operator|&
name|qt_gui_variant_handler
expr_stmt|;
name|qMetaTypeGuiHelper
operator|=
name|qVariantGuiHelper
expr_stmt|;
return|return
literal|1
return|;
block|}
end_function
begin_macro
name|Q_CONSTRUCTOR_FUNCTION
argument_list|(
argument|qRegisterGuiVariant
argument_list|)
end_macro
begin_function
DECL|function|qUnregisterGuiVariant
name|int
name|qUnregisterGuiVariant
parameter_list|()
block|{
name|QVariant
operator|::
name|handler
operator|=
name|qt_guivariant_last_handler
expr_stmt|;
name|qMetaTypeGuiHelper
operator|=
literal|0
expr_stmt|;
return|return
literal|1
return|;
block|}
end_function
begin_macro
name|Q_DESTRUCTOR_FUNCTION
argument_list|(
argument|qUnregisterGuiVariant
argument_list|)
end_macro
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
