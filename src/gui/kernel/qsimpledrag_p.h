begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSIMPLEDRAG_P_H
end_ifndef
begin_define
DECL|macro|QSIMPLEDRAG_P_H
define|#
directive|define
name|QSIMPLEDRAG_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<qpa/qplatformdrag.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QObject>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
DECL|variable|QMouseEvent
name|class
name|QMouseEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWindow
name|class
name|QWindow
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QEventLoop
name|class
name|QEventLoop
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDropData
name|class
name|QDropData
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QShapedPixmapWindow
name|class
name|QShapedPixmapWindow
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QScreen
name|class
name|QScreen
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPlatformDrag
name|class
name|Q_GUI_EXPORT
name|QBasicDrag
range|:
name|public
name|QPlatformDrag
decl_stmt|,
name|public
name|QObject
block|{
name|public
label|:
name|virtual
operator|~
name|QBasicDrag
argument_list|()
expr_stmt|;
name|virtual
name|Qt
operator|::
name|DropAction
name|drag
argument_list|(
argument|QDrag *drag
argument_list|)
name|Q_DECL_OVERRIDE
expr_stmt|;
name|virtual
name|bool
name|eventFilter
argument_list|(
name|QObject
operator|*
name|o
argument_list|,
name|QEvent
operator|*
name|e
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|protected
label|:
name|QBasicDrag
argument_list|()
expr_stmt|;
name|virtual
name|void
name|startDrag
parameter_list|()
function_decl|;
name|virtual
name|void
name|cancel
parameter_list|()
function_decl|;
name|virtual
name|void
name|move
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|globalPos
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|drop
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|globalPos
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|endDrag
parameter_list|()
function_decl|;
name|void
name|moveShapedPixmapWindow
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|deviceIndependentPosition
parameter_list|)
function_decl|;
name|QShapedPixmapWindow
operator|*
name|shapedPixmapWindow
argument_list|()
specifier|const
block|{
return|return
name|m_drag_icon_window
return|;
block|}
name|void
name|recreateShapedPixmapWindow
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
function_decl|;
name|void
name|updateCursor
argument_list|(
name|Qt
operator|::
name|DropAction
name|action
argument_list|)
decl_stmt|;
name|bool
name|canDrop
argument_list|()
specifier|const
block|{
return|return
name|m_can_drop
return|;
block|}
name|void
name|setCanDrop
parameter_list|(
name|bool
name|c
parameter_list|)
block|{
name|m_can_drop
operator|=
name|c
expr_stmt|;
block|}
name|bool
name|useCompositing
argument_list|()
specifier|const
block|{
return|return
name|m_useCompositing
return|;
block|}
name|void
name|setUseCompositing
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
name|m_useCompositing
operator|=
name|on
expr_stmt|;
block|}
name|void
name|setScreen
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|)
block|{
name|m_screen
operator|=
name|screen
expr_stmt|;
block|}
name|Qt
operator|::
name|DropAction
name|executedDropAction
argument_list|()
specifier|const
block|{
return|return
name|m_executed_drop_action
return|;
block|}
name|void
name|setExecutedDropAction
argument_list|(
name|Qt
operator|::
name|DropAction
name|da
argument_list|)
block|{
name|m_executed_drop_action
operator|=
name|da
expr_stmt|;
block|}
name|QDrag
operator|*
name|drag
argument_list|()
specifier|const
block|{
return|return
name|m_drag
return|;
block|}
name|private
label|:
name|void
name|enableEventFilter
parameter_list|()
function_decl|;
name|void
name|disableEventFilter
parameter_list|()
function_decl|;
name|void
name|restoreCursor
parameter_list|()
function_decl|;
name|void
name|exitDndEventLoop
parameter_list|()
function_decl|;
name|bool
name|m_restoreCursor
decl_stmt|;
name|QEventLoop
modifier|*
name|m_eventLoop
decl_stmt|;
name|Qt
operator|::
name|DropAction
name|m_executed_drop_action
expr_stmt|;
name|bool
name|m_can_drop
decl_stmt|;
name|QDrag
modifier|*
name|m_drag
decl_stmt|;
name|QShapedPixmapWindow
modifier|*
name|m_drag_icon_window
decl_stmt|;
name|bool
name|m_useCompositing
decl_stmt|;
name|QScreen
modifier|*
name|m_screen
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QSimpleDrag
range|:
name|public
name|QBasicDrag
block|{
name|public
operator|:
name|QSimpleDrag
argument_list|()
block|;
name|virtual
name|QMimeData
operator|*
name|platformDropData
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|protected
operator|:
name|virtual
name|void
name|startDrag
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|void
name|cancel
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|void
name|move
argument_list|(
argument|const QPoint&globalPos
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|void
name|drop
argument_list|(
argument|const QPoint&globalPos
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|private
operator|:
name|QWindow
operator|*
name|m_current_window
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
