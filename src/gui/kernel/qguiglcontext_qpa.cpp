begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformglcontext_qpa.h"
end_include
begin_include
include|#
directive|include
file|"qguiglcontext_qpa.h"
end_include
begin_include
include|#
directive|include
file|"qguiglcontext_qpa_p.h"
end_include
begin_include
include|#
directive|include
file|"qwindow.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QThreadStorage>
end_include
begin_include
include|#
directive|include
file|<QtCore/QThread>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QScreen>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_class
DECL|class|QGuiGLThreadContext
class|class
name|QGuiGLThreadContext
block|{
public|public:
DECL|function|~QGuiGLThreadContext
name|~
name|QGuiGLThreadContext
parameter_list|()
block|{
if|if
condition|(
name|context
condition|)
name|context
operator|->
name|doneCurrent
argument_list|()
expr_stmt|;
block|}
DECL|member|context
name|QGuiGLContext
modifier|*
name|context
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|qwindow_context_storage
specifier|static
name|QThreadStorage
argument_list|<
name|QGuiGLThreadContext
modifier|*
argument_list|>
name|qwindow_context_storage
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|setCurrentContext
name|void
name|QGuiGLContextPrivate
operator|::
name|setCurrentContext
parameter_list|(
name|QGuiGLContext
modifier|*
name|context
parameter_list|)
block|{
name|QGuiGLThreadContext
modifier|*
name|threadContext
init|=
name|qwindow_context_storage
operator|.
name|localData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|threadContext
condition|)
block|{
if|if
condition|(
operator|!
name|QThread
operator|::
name|currentThread
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"No QTLS available. currentContext wont work"
argument_list|)
expr_stmt|;
return|return;
block|}
name|threadContext
operator|=
operator|new
name|QGuiGLThreadContext
expr_stmt|;
name|qwindow_context_storage
operator|.
name|setLocalData
argument_list|(
name|threadContext
argument_list|)
expr_stmt|;
block|}
name|threadContext
operator|->
name|context
operator|=
name|context
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the last context which called makeCurrent. This function is thread aware. */
end_comment
begin_function
DECL|function|currentContext
name|QGuiGLContext
modifier|*
name|QGuiGLContext
operator|::
name|currentContext
parameter_list|()
block|{
name|QGuiGLThreadContext
modifier|*
name|threadContext
init|=
name|qwindow_context_storage
operator|.
name|localData
argument_list|()
decl_stmt|;
if|if
condition|(
name|threadContext
condition|)
block|{
return|return
name|threadContext
operator|->
name|context
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|areSharing
name|bool
name|QGuiGLContext
operator|::
name|areSharing
parameter_list|(
name|QGuiGLContext
modifier|*
name|first
parameter_list|,
name|QGuiGLContext
modifier|*
name|second
parameter_list|)
block|{
return|return
name|first
operator|->
name|shareGroup
argument_list|()
operator|==
name|second
operator|->
name|shareGroup
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|handle
name|QPlatformGLContext
modifier|*
name|QGuiGLContext
operator|::
name|handle
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGuiGLContext
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|platformGLContext
return|;
block|}
end_function
begin_function
DECL|function|shareHandle
name|QPlatformGLContext
modifier|*
name|QGuiGLContext
operator|::
name|shareHandle
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGuiGLContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|shareContext
condition|)
return|return
name|d
operator|->
name|shareContext
operator|->
name|handle
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!   Creates a new GL context instance, you need to call create() before it can be used. */
end_comment
begin_constructor
DECL|function|QGuiGLContext
name|QGuiGLContext
operator|::
name|QGuiGLContext
parameter_list|()
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QGuiGLContextPrivate
argument_list|()
argument_list|)
block|{
name|Q_D
argument_list|(
name|QGuiGLContext
argument_list|)
expr_stmt|;
name|d
operator|->
name|screen
operator|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   Sets the format the GL context should be compatible with. You need to call create() before it takes effect. */
end_comment
begin_function
DECL|function|setFormat
name|void
name|QGuiGLContext
operator|::
name|setFormat
parameter_list|(
specifier|const
name|QSurfaceFormat
modifier|&
name|format
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGuiGLContext
argument_list|)
expr_stmt|;
name|d
operator|->
name|requestedFormat
operator|=
name|format
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Sets the context to share textures, shaders, and other GL resources with. You need to call create() before it takes effect. */
end_comment
begin_function
DECL|function|setShareContext
name|void
name|QGuiGLContext
operator|::
name|setShareContext
parameter_list|(
name|QGuiGLContext
modifier|*
name|shareContext
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGuiGLContext
argument_list|)
expr_stmt|;
name|d
operator|->
name|shareContext
operator|=
name|shareContext
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Sets the screen the GL context should be valid for. You need to call create() before it takes effect. */
end_comment
begin_function
DECL|function|setScreen
name|void
name|QGuiGLContext
operator|::
name|setScreen
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGuiGLContext
argument_list|)
expr_stmt|;
name|d
operator|->
name|screen
operator|=
name|screen
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|screen
condition|)
name|d
operator|->
name|screen
operator|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Attempts to create the GL context with the desired parameters.    Returns true if the native context was successfully created and is ready to be used. */
end_comment
begin_function
DECL|function|create
name|bool
name|QGuiGLContext
operator|::
name|create
parameter_list|()
block|{
name|destroy
argument_list|()
expr_stmt|;
name|Q_D
argument_list|(
name|QGuiGLContext
argument_list|)
expr_stmt|;
name|d
operator|->
name|platformGLContext
operator|=
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|createPlatformGLContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|platformGLContext
operator|->
name|setContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|shareGroup
operator|=
name|d
operator|->
name|shareContext
condition|?
name|d
operator|->
name|shareContext
operator|->
name|shareGroup
argument_list|()
else|:
operator|new
name|QGuiGLContextGroup
expr_stmt|;
name|d
operator|->
name|shareGroup
operator|->
name|d_func
argument_list|()
operator|->
name|addContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|platformGLContext
return|;
block|}
end_function
begin_function
DECL|function|destroy
name|void
name|QGuiGLContext
operator|::
name|destroy
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGuiGLContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|QGuiGLContext
operator|::
name|currentContext
argument_list|()
operator|==
name|this
condition|)
name|doneCurrent
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|shareGroup
condition|)
name|d
operator|->
name|shareGroup
operator|->
name|d_func
argument_list|()
operator|->
name|removeContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|shareGroup
operator|=
literal|0
expr_stmt|;
operator|delete
name|d
operator|->
name|platformGLContext
expr_stmt|;
name|d
operator|->
name|platformGLContext
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   If this is the current context for the thread, doneCurrent is called */
end_comment
begin_destructor
DECL|function|~QGuiGLContext
name|QGuiGLContext
operator|::
name|~
name|QGuiGLContext
parameter_list|()
block|{
name|destroy
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!   Returns if this context is valid, i.e. has been successfully created. */
end_comment
begin_function
DECL|function|isValid
name|bool
name|QGuiGLContext
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGuiGLContext
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|platformGLContext
operator|!=
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!   If surface is 0 this is equivalent to calling doneCurrent(). */
end_comment
begin_function
DECL|function|makeCurrent
name|bool
name|QGuiGLContext
operator|::
name|makeCurrent
parameter_list|(
name|QSurface
modifier|*
name|surface
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGuiGLContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|platformGLContext
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|surface
condition|)
block|{
name|doneCurrent
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|surface
operator|->
name|surfaceHandle
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|platformGLContext
operator|->
name|makeCurrent
argument_list|(
name|surface
operator|->
name|surfaceHandle
argument_list|()
argument_list|)
condition|)
block|{
name|QGuiGLContextPrivate
operator|::
name|setCurrentContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|surface
operator|=
name|surface
expr_stmt|;
name|d
operator|->
name|shareGroup
operator|->
name|d_func
argument_list|()
operator|->
name|deletePendingResources
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Convenience function for calling makeCurrent with a 0 surface. */
end_comment
begin_function
DECL|function|doneCurrent
name|void
name|QGuiGLContext
operator|::
name|doneCurrent
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGuiGLContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|platformGLContext
condition|)
return|return;
if|if
condition|(
name|QGuiGLContext
operator|::
name|currentContext
argument_list|()
operator|==
name|this
condition|)
name|d
operator|->
name|shareGroup
operator|->
name|d_func
argument_list|()
operator|->
name|deletePendingResources
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|platformGLContext
operator|->
name|doneCurrent
argument_list|()
expr_stmt|;
name|QGuiGLContextPrivate
operator|::
name|setCurrentContext
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|surface
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the surface the context is current for. */
end_comment
begin_function
DECL|function|surface
name|QSurface
modifier|*
name|QGuiGLContext
operator|::
name|surface
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGuiGLContext
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|surface
return|;
block|}
end_function
begin_function
DECL|function|swapBuffers
name|void
name|QGuiGLContext
operator|::
name|swapBuffers
parameter_list|(
name|QSurface
modifier|*
name|surface
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGuiGLContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|platformGLContext
condition|)
return|return;
if|if
condition|(
operator|!
name|surface
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QGuiGLContext::swapBuffers() called with null argument"
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|platformGLContext
operator|->
name|swapBuffers
argument_list|(
name|surface
operator|->
name|surfaceHandle
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
DECL|function|getProcAddress
name|void
argument_list|(
argument|*QGuiGLContext::getProcAddress(const QByteArray&procName)
argument_list|)
end_macro
begin_expr_stmt
DECL|function|getProcAddress
operator|(
operator|)
block|{
name|Q_D
argument_list|(
name|QGuiGLContext
argument_list|)
block|;
if|if
condition|(
operator|!
name|d
operator|->
name|platformGLContext
condition|)
return|return
literal|0
return|;
end_expr_stmt
begin_return
return|return
name|d
operator|->
name|platformGLContext
operator|->
name|getProcAddress
argument_list|(
name|procName
argument_list|)
return|;
end_return
begin_macro
unit|}  QSurfaceFormat
DECL|function|format
name|QGuiGLContext
end_macro
begin_expr_stmt
DECL|function|format
operator|::
name|format
operator|(
operator|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGuiGLContext
argument_list|)
block|;
if|if
condition|(
operator|!
name|d
operator|->
name|platformGLContext
condition|)
return|return
name|d
operator|->
name|requestedFormat
return|;
end_expr_stmt
begin_return
return|return
name|d
operator|->
name|platformGLContext
operator|->
name|format
argument_list|()
return|;
end_return
begin_expr_stmt
unit|}  QGuiGLContextGroup
DECL|function|shareGroup
operator|*
name|QGuiGLContext
operator|::
name|shareGroup
operator|(
operator|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGuiGLContext
argument_list|)
block|;
return|return
name|d
operator|->
name|shareGroup
return|;
block|}
end_expr_stmt
begin_function
DECL|function|shareContext
name|QGuiGLContext
modifier|*
name|QGuiGLContext
operator|::
name|shareContext
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGuiGLContext
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|shareContext
return|;
block|}
end_function
begin_function
DECL|function|screen
name|QScreen
modifier|*
name|QGuiGLContext
operator|::
name|screen
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGuiGLContext
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|screen
return|;
block|}
end_function
begin_comment
comment|/*   internal: Needs to have a pointer to qGLContext. But since this is in QtGui we cant   have any type information. */
end_comment
begin_function
DECL|function|qGLContextHandle
name|void
modifier|*
name|QGuiGLContext
operator|::
name|qGLContextHandle
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGuiGLContext
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|qGLContextHandle
return|;
block|}
end_function
begin_function
DECL|function|setQGLContextHandle
name|void
name|QGuiGLContext
operator|::
name|setQGLContextHandle
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
name|void
function_decl|(
modifier|*
name|qGLContextDeleteFunction
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGuiGLContext
argument_list|)
expr_stmt|;
name|d
operator|->
name|qGLContextHandle
operator|=
name|handle
expr_stmt|;
name|d
operator|->
name|qGLContextDeleteFunction
operator|=
name|qGLContextDeleteFunction
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deleteQGLContext
name|void
name|QGuiGLContext
operator|::
name|deleteQGLContext
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGuiGLContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|qGLContextDeleteFunction
operator|&&
name|d
operator|->
name|qGLContextHandle
condition|)
block|{
name|d
operator|->
name|qGLContextDeleteFunction
argument_list|(
name|d
operator|->
name|qGLContextHandle
argument_list|)
expr_stmt|;
name|d
operator|->
name|qGLContextDeleteFunction
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|qGLContextHandle
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|QGuiGLContextGroup
name|QGuiGLContextGroup
operator|::
name|QGuiGLContextGroup
parameter_list|()
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QGuiGLContextGroupPrivate
argument_list|()
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QGuiGLContextGroup
name|QGuiGLContextGroup
operator|::
name|~
name|QGuiGLContextGroup
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGuiGLContextGroup
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QGLSharedResource
modifier|*
argument_list|>
operator|::
name|iterator
name|it
init|=
name|d
operator|->
name|m_sharedResources
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QGLSharedResource
modifier|*
argument_list|>
operator|::
name|iterator
name|end
init|=
name|d
operator|->
name|m_sharedResources
operator|.
name|end
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|end
condition|)
block|{
operator|(
operator|*
name|it
operator|)
operator|->
name|invalidateResource
argument_list|()
expr_stmt|;
operator|(
operator|*
name|it
operator|)
operator|->
name|m_group
operator|=
literal|0
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
name|qDeleteAll
argument_list|(
name|d
operator|->
name|m_pendingDeletion
operator|.
name|begin
argument_list|()
argument_list|,
name|d
operator|->
name|m_pendingDeletion
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|shares
name|QList
argument_list|<
name|QGuiGLContext
modifier|*
argument_list|>
name|QGuiGLContextGroup
operator|::
name|shares
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGuiGLContextGroup
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_shares
return|;
block|}
end_function
begin_function
DECL|function|currentContextGroup
name|QGuiGLContextGroup
modifier|*
name|QGuiGLContextGroup
operator|::
name|currentContextGroup
parameter_list|()
block|{
name|QGuiGLContext
modifier|*
name|current
init|=
name|QGuiGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
return|return
name|current
condition|?
name|current
operator|->
name|shareGroup
argument_list|()
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|addContext
name|void
name|QGuiGLContextGroupPrivate
operator|::
name|addContext
parameter_list|(
name|QGuiGLContext
modifier|*
name|ctx
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|m_mutex
argument_list|)
decl_stmt|;
name|m_refs
operator|.
name|ref
argument_list|()
expr_stmt|;
name|m_shares
operator|<<
name|ctx
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeContext
name|void
name|QGuiGLContextGroupPrivate
operator|::
name|removeContext
parameter_list|(
name|QGuiGLContext
modifier|*
name|ctx
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGuiGLContextGroup
argument_list|)
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|m_mutex
argument_list|)
decl_stmt|;
name|m_shares
operator|.
name|removeOne
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|==
name|m_context
operator|&&
operator|!
name|m_shares
operator|.
name|isEmpty
argument_list|()
condition|)
name|m_context
operator|=
name|m_shares
operator|.
name|first
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|m_refs
operator|.
name|deref
argument_list|()
condition|)
name|q
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deletePendingResources
name|void
name|QGuiGLContextGroupPrivate
operator|::
name|deletePendingResources
parameter_list|(
name|QGuiGLContext
modifier|*
name|ctx
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|m_mutex
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QGLSharedResource
modifier|*
argument_list|>
operator|::
name|iterator
name|it
init|=
name|m_pendingDeletion
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QGLSharedResource
modifier|*
argument_list|>
operator|::
name|iterator
name|end
init|=
name|m_pendingDeletion
operator|.
name|end
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|end
condition|)
block|{
operator|(
operator|*
name|it
operator|)
operator|->
name|freeResource
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
operator|delete
operator|*
name|it
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
name|m_pendingDeletion
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QGLSharedResource
name|QGLSharedResource
operator|::
name|QGLSharedResource
parameter_list|(
name|QGuiGLContextGroup
modifier|*
name|group
parameter_list|)
member_init_list|:
name|m_group
argument_list|(
name|group
argument_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|m_group
operator|->
name|d_func
argument_list|()
operator|->
name|m_mutex
argument_list|)
decl_stmt|;
name|m_group
operator|->
name|d_func
argument_list|()
operator|->
name|m_sharedResources
operator|<<
name|this
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QGLSharedResource
name|QGLSharedResource
operator|::
name|~
name|QGLSharedResource
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|// schedule the resource for deletion at an appropriate time
end_comment
begin_function
DECL|function|free
name|void
name|QGLSharedResource
operator|::
name|free
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_group
condition|)
block|{
operator|delete
name|this
expr_stmt|;
return|return;
block|}
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|m_group
operator|->
name|d_func
argument_list|()
operator|->
name|m_mutex
argument_list|)
decl_stmt|;
name|m_group
operator|->
name|d_func
argument_list|()
operator|->
name|m_sharedResources
operator|.
name|removeOne
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|m_group
operator|->
name|d_func
argument_list|()
operator|->
name|m_pendingDeletion
operator|<<
name|this
expr_stmt|;
comment|// can we delete right away?
name|QGuiGLContext
modifier|*
name|current
init|=
name|QGuiGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|&&
name|current
operator|->
name|shareGroup
argument_list|()
operator|==
name|m_group
condition|)
block|{
name|m_group
operator|->
name|d_func
argument_list|()
operator|->
name|deletePendingResources
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|QGLMultiGroupSharedResource
name|QGLMultiGroupSharedResource
operator|::
name|QGLMultiGroupSharedResource
parameter_list|()
member_init_list|:
name|active
argument_list|(
literal|0
argument_list|)
block|{
ifdef|#
directive|ifdef
name|QT_GL_CONTEXT_RESOURCE_DEBUG
name|qDebug
argument_list|(
literal|"Creating context group resource object %p."
argument_list|,
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QGLMultiGroupSharedResource
name|QGLMultiGroupSharedResource
operator|::
name|~
name|QGLMultiGroupSharedResource
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_GL_CONTEXT_RESOURCE_DEBUG
name|qDebug
argument_list|(
literal|"Deleting context group resource %p. Group size: %d."
argument_list|,
name|this
argument_list|,
name|m_groups
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_groups
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QGuiGLContext
modifier|*
name|context
init|=
name|m_groups
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|shares
argument_list|()
operator|.
name|first
argument_list|()
decl_stmt|;
name|QGLSharedResource
modifier|*
name|resource
init|=
name|value
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
condition|)
name|resource
operator|->
name|free
argument_list|()
expr_stmt|;
name|m_groups
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|d_func
argument_list|()
operator|->
name|m_resources
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|active
operator|.
name|deref
argument_list|()
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
if|if
condition|(
name|active
operator|!=
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QtOpenGL: Resources are still available at program shutdown.\n"
literal|"          This is possibly caused by a leaked QGLWidget, \n"
literal|"          QGLFramebufferObject or QGLPixelBuffer."
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_destructor
begin_function
DECL|function|insert
name|void
name|QGLMultiGroupSharedResource
operator|::
name|insert
parameter_list|(
name|QGuiGLContext
modifier|*
name|context
parameter_list|,
name|QGLSharedResource
modifier|*
name|value
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_GL_CONTEXT_RESOURCE_DEBUG
name|qDebug
argument_list|(
literal|"Inserting context group resource %p for context %p, managed by %p."
argument_list|,
name|value
argument_list|,
name|context
argument_list|,
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QGuiGLContextGroup
modifier|*
name|group
init|=
name|context
operator|->
name|shareGroup
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|group
operator|->
name|d_func
argument_list|()
operator|->
name|m_resources
operator|.
name|contains
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|->
name|d_func
argument_list|()
operator|->
name|m_resources
operator|.
name|insert
argument_list|(
name|this
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|m_groups
operator|.
name|append
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|active
operator|.
name|ref
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|value
name|QGLSharedResource
modifier|*
name|QGLMultiGroupSharedResource
operator|::
name|value
parameter_list|(
name|QGuiGLContext
modifier|*
name|context
parameter_list|)
block|{
name|QGuiGLContextGroup
modifier|*
name|group
init|=
name|context
operator|->
name|shareGroup
argument_list|()
decl_stmt|;
return|return
name|group
operator|->
name|d_func
argument_list|()
operator|->
name|m_resources
operator|.
name|value
argument_list|(
name|this
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|QGLMultiGroupSharedResource
operator|::
name|cleanup
parameter_list|(
name|QGuiGLContext
modifier|*
name|ctx
parameter_list|)
block|{
name|QGLSharedResource
modifier|*
name|resource
init|=
name|value
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|0
condition|)
block|{
name|resource
operator|->
name|free
argument_list|()
expr_stmt|;
name|QGuiGLContextGroup
modifier|*
name|group
init|=
name|ctx
operator|->
name|shareGroup
argument_list|()
decl_stmt|;
name|group
operator|->
name|d_func
argument_list|()
operator|->
name|m_resources
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|m_groups
operator|.
name|removeOne
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|active
operator|.
name|deref
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|QGLMultiGroupSharedResource
operator|::
name|cleanup
parameter_list|(
name|QGuiGLContext
modifier|*
name|ctx
parameter_list|,
name|QGLSharedResource
modifier|*
name|value
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_GL_CONTEXT_RESOURCE_DEBUG
name|qDebug
argument_list|(
literal|"Cleaning up context group resource %p, for context %p in thread %p."
argument_list|,
name|this
argument_list|,
name|ctx
argument_list|,
name|QThread
operator|::
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|value
operator|->
name|free
argument_list|()
expr_stmt|;
name|active
operator|.
name|deref
argument_list|()
expr_stmt|;
name|QGuiGLContextGroup
modifier|*
name|group
init|=
name|ctx
operator|->
name|shareGroup
argument_list|()
decl_stmt|;
name|m_groups
operator|.
name|removeOne
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
