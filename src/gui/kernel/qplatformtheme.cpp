begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformtheme.h"
end_include
begin_include
include|#
directive|include
file|"qplatformtheme_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QVariant>
end_include
begin_include
include|#
directive|include
file|<QtCore/QStringList>
end_include
begin_include
include|#
directive|include
file|<QtCore/qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<qpalette.h>
end_include
begin_include
include|#
directive|include
file|<qtextformat.h>
end_include
begin_include
include|#
directive|include
file|<private/qiconloader_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformintegration.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformdialoghelper.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|/*!     \class QPlatformTheme     \since 5.0     \internal     \preliminary     \ingroup qpa     \brief The QPlatformTheme class allows customizing the UI based on themes.  */
comment|/*!     \enum QPlatformTheme::ThemeHint      This enum describes the available theme hints.      \value CursorFlashTime (int) Cursor flash time in ms, overriding                                  QPlatformIntegration::styleHint.      \value KeyboardInputInterval (int) Keyboard input interval in ms, overriding                                  QPlatformIntegration::styleHint.      \value MouseDoubleClickInterval (int) Mouse double click interval in ms,                                     overriding QPlatformIntegration::styleHint.      \value MousePressAndHoldInterval (int) Mouse press and hold interval in ms,                                     overriding QPlatformIntegration::styleHint.      \value StartDragDistance (int) Start drag distance,                              overriding QPlatformIntegration::styleHint.      \value StartDragTime (int) Start drag time in ms,                                overriding QPlatformIntegration::styleHint.      \value KeyboardAutoRepeatRate (int) Keyboard auto repeat rate,                                   overriding QPlatformIntegration::styleHint.      \value PasswordMaskDelay (int) Pass word mask delay in ms,                                    overriding QPlatformIntegration::styleHint.      \value StartDragVelocity (int) Velocity of a drag,                                    overriding QPlatformIntegration::styleHint.      \value TextCursorWidth  (int) Determines the width of the text cursor.      \value DropShadow       (bool) Determines whether the drop shadow effect for                             tooltips or whatsthis is enabled.      \value MaximumScrollBarDragDistance (int) Determines the value returned by                             QStyle::pixelMetric(PM_MaximumDragDistance)      \value ToolButtonStyle (int) A value representing a Qt::ToolButtonStyle.      \value ToolBarIconSize Icon size for tool bars.      \value SystemIconThemeName (QString) Name of the icon theme.      \value SystemIconFallbackThemeName (QString) Name of the fallback icon theme.      \value IconThemeSearchPaths (QStringList) Search paths for icons.      \value ItemViewActivateItemOnSingleClick (bool) Activate items by single click.      \value StyleNames (QStringList) A list of preferred style names.      \value WindowAutoPlacement (bool) A boolean value indicating whether Windows                                (particularly dialogs) are placed by the system                                (see _NET_WM_FULL_PLACEMENT in X11).      \value DialogButtonBoxLayout (int) An integer representing a                                  QDialogButtonBox::ButtonLayout value.      \value DialogButtonBoxButtonsHaveIcons (bool) A boolean value indicating whether                                             the buttons of a QDialogButtonBox should have icons.      \value UseFullScreenForPopupMenu (bool) Pop menus can cover the full screen including task bar.      \value KeyboardScheme (int) An integer value (enum KeyboardSchemes) specifying the                            keyboard scheme.      \value UiEffects (int) A flag value consisting of UiEffect values specifying the enabled UI animations.      \value SpellCheckUnderlineStyle (int) A QTextCharFormat::UnderlineStyle specifying                                     the underline style used misspelled words when spell checking.      \value TabAllWidgets (bool) Whether tab navigation should go through all the widgets or components,                          or just through text boxes and list views. This is mostly a Mac feature.      \value DialogSnapToDefaultButton (bool) Whether the mouse should snap to the default button when a dialog                                      becomes visible.      \value ContextMenuOnMouseRelease (bool) Whether the context menu should be shown on mouse release.      \sa themeHint(), QStyle::pixelMetric() */
comment|// Table of key bindings. It must be sorted on key sequence:
comment|// The integer value of VK_KEY | Modifier Keys (e.g., VK_META, and etc.)
comment|// A priority of 1 indicates that this is the primary key binding when multiple are defined.
DECL|enum|KeyPlatform
name|enum
name|KeyPlatform
argument_list|{
DECL|enumerator|KB_Win
name|KB_Win
operator|=
operator|(
literal|1
operator|<<
name|QPlatformTheme
operator|::
name|WindowsKeyboardScheme
operator|)
argument_list|,
DECL|enumerator|KB_Mac
name|KB_Mac
operator|=
operator|(
literal|1
operator|<<
name|QPlatformTheme
operator|::
name|MacKeyboardScheme
operator|)
argument_list|,
DECL|enumerator|KB_X11
name|KB_X11
operator|=
operator|(
literal|1
operator|<<
name|QPlatformTheme
operator|::
name|X11KeyboardScheme
operator|)
argument_list|,
DECL|enumerator|KB_KDE
name|KB_KDE
operator|=
operator|(
literal|1
operator|<<
name|QPlatformTheme
operator|::
name|KdeKeyboardScheme
operator|)
argument_list|,
DECL|enumerator|KB_Gnome
name|KB_Gnome
operator|=
operator|(
literal|1
operator|<<
name|QPlatformTheme
operator|::
name|GnomeKeyboardScheme
operator|)
argument_list|,
DECL|enumerator|KB_CDE
name|KB_CDE
operator|=
operator|(
literal|1
operator|<<
name|QPlatformTheme
operator|::
name|CdeKeyboardScheme
operator|)
argument_list|,
DECL|enumerator|KB_All
name|KB_All
operator|=
literal|0xffff
argument_list|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|keyBindings
specifier|const
name|QKeyBinding
name|QPlatformThemePrivate
operator|::
name|keyBindings
index|[]
init|=
block|{
comment|//   StandardKey                            Priority    Key Sequence                            Platforms
block|{
name|QKeySequence
operator|::
name|HelpContents
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Question
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|HelpContents
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_F1
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|WhatsThis
block|,
literal|1
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_F1
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Open
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_O
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Close
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_F4
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Close
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_F4
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Close
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_W
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Close
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_W
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Save
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_S
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|New
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_N
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Delete
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_D
block|,
name|KB_X11
block|}
block|,
comment|//emacs (line edit only)
block|{
name|QKeySequence
operator|::
name|Delete
block|,
literal|1
block|,
name|Qt
operator|::
name|Key_Delete
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Delete
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_D
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Cut
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_X
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Cut
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Delete
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
comment|//## Check if this should work on mac
block|{
name|QKeySequence
operator|::
name|Cut
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_F20
block|,
name|KB_X11
block|}
block|,
comment|//Cut on sun keyboards
block|{
name|QKeySequence
operator|::
name|Cut
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_K
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Copy
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Insert
block|,
name|KB_X11
operator||
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Copy
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_C
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Copy
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_F16
block|,
name|KB_X11
block|}
block|,
comment|//Copy on sun keyboards
block|{
name|QKeySequence
operator|::
name|Paste
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Insert
block|,
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Paste
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_V
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Paste
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Insert
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Paste
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_F18
block|,
name|KB_X11
block|}
block|,
comment|//Paste on sun keyboards
block|{
name|QKeySequence
operator|::
name|Paste
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_Y
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Undo
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_Backspace
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Undo
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Z
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Undo
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_F14
block|,
name|KB_X11
block|}
block|,
comment|//Undo on sun keyboards
block|{
name|QKeySequence
operator|::
name|Redo
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Backspace
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Redo
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Z
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Redo
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Z
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Redo
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Y
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Back
block|,
literal|1
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Back
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Back
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_BracketLeft
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Back
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_Backspace
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Forward
block|,
literal|1
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Forward
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Forward
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_BracketRight
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Forward
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Backspace
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Refresh
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_R
block|,
name|KB_Gnome
operator||
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Refresh
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_F5
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|ZoomIn
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Plus
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|ZoomOut
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Minus
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Print
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_P
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|AddTab
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_N
block|,
name|KB_KDE
block|}
block|,
block|{
name|QKeySequence
operator|::
name|AddTab
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_T
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|NextChild
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_F6
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|NextChild
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Tab
block|,
name|KB_Mac
block|}
block|,
comment|//different priority from above
block|{
name|QKeySequence
operator|::
name|NextChild
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Tab
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|NextChild
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_BraceRight
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|NextChild
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Comma
block|,
name|KB_KDE
block|}
block|,
block|{
name|QKeySequence
operator|::
name|NextChild
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_Forward
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|PreviousChild
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_F6
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|PreviousChild
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Backtab
block|,
name|KB_Mac
block|}
block|,
comment|//different priority from above
block|{
name|QKeySequence
operator|::
name|PreviousChild
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Backtab
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|PreviousChild
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_BraceLeft
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|PreviousChild
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Period
block|,
name|KB_KDE
block|}
block|,
block|{
name|QKeySequence
operator|::
name|PreviousChild
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_Back
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Find
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_F
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|FindNext
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_G
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|FindNext
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_G
block|,
name|KB_Gnome
operator||
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|FindNext
block|,
literal|1
block|,
name|Qt
operator|::
name|Key_F3
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|FindNext
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_F3
block|,
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|FindPrevious
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_G
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|FindPrevious
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_G
block|,
name|KB_Gnome
operator||
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|FindPrevious
block|,
literal|1
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_F3
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|FindPrevious
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_F3
block|,
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Replace
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_R
block|,
name|KB_KDE
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Replace
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_H
block|,
name|KB_Gnome
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Replace
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_H
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectAll
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_A
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Bold
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_B
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Italic
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_I
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Underline
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_U
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToNextChar
block|,
literal|1
block|,
name|Qt
operator|::
name|Key_Right
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToNextChar
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_F
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToPreviousChar
block|,
literal|1
block|,
name|Qt
operator|::
name|Key_Left
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToPreviousChar
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_B
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToNextWord
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToNextWord
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToPreviousWord
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToPreviousWord
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToNextLine
block|,
literal|1
block|,
name|Qt
operator|::
name|Key_Down
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToNextLine
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_N
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToPreviousLine
block|,
literal|1
block|,
name|Qt
operator|::
name|Key_Up
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToPreviousLine
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_P
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToNextPage
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_PageDown
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToNextPage
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_Down
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToNextPage
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_V
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToNextPage
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_PageDown
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToNextPage
block|,
literal|1
block|,
name|Qt
operator|::
name|Key_PageDown
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToPreviousPage
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_PageUp
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToPreviousPage
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_Up
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToPreviousPage
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_PageUp
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToPreviousPage
block|,
literal|1
block|,
name|Qt
operator|::
name|Key_PageUp
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToStartOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToStartOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToStartOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_Home
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToEndOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToEndOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToEndOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_End
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToEndOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_E
block|,
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToStartOfBlock
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_A
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToStartOfBlock
block|,
literal|1
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_Up
block|,
name|KB_Mac
block|}
block|,
comment|//mac only
block|{
name|QKeySequence
operator|::
name|MoveToEndOfBlock
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_E
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToEndOfBlock
block|,
literal|1
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_Down
block|,
name|KB_Mac
block|}
block|,
comment|//mac only
block|{
name|QKeySequence
operator|::
name|MoveToStartOfDocument
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Up
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToStartOfDocument
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Home
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToStartOfDocument
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_Home
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToEndOfDocument
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Down
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToEndOfDocument
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_End
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToEndOfDocument
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_End
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectNextChar
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectPreviousChar
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectNextWord
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectNextWord
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectPreviousWord
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectPreviousWord
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectNextLine
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Down
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectPreviousLine
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Up
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectNextPage
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_PageDown
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectPreviousPage
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_PageUp
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectStartOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectStartOfLine
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectStartOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Home
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectEndOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectEndOfLine
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectEndOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_End
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectStartOfBlock
block|,
literal|1
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Up
block|,
name|KB_Mac
block|}
block|,
comment|//mac only
block|{
name|QKeySequence
operator|::
name|SelectStartOfBlock
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_A
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectEndOfBlock
block|,
literal|1
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Down
block|,
name|KB_Mac
block|}
block|,
comment|//mac only
block|{
name|QKeySequence
operator|::
name|SelectEndOfBlock
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_E
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectStartOfDocument
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Up
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectStartOfDocument
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Home
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectStartOfDocument
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Home
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectEndOfDocument
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Down
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectEndOfDocument
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_End
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectEndOfDocument
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_End
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|DeleteStartOfWord
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_Backspace
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|DeleteStartOfWord
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Backspace
block|,
name|KB_X11
operator||
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|DeleteEndOfWord
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_Delete
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|DeleteEndOfWord
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Delete
block|,
name|KB_X11
operator||
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|DeleteEndOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_K
block|,
name|KB_X11
block|}
block|,
comment|//emacs (line edit only)
block|{
name|QKeySequence
operator|::
name|InsertParagraphSeparator
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_Enter
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|InsertParagraphSeparator
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_Return
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|InsertLineSeparator
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_Enter
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|InsertLineSeparator
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_Return
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|InsertLineSeparator
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Enter
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|InsertLineSeparator
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Return
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|InsertLineSeparator
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_O
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SaveAs
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_S
block|,
name|KB_Gnome
operator||
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Preferences
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Comma
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Quit
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Q
block|,
name|KB_Gnome
operator||
name|KB_KDE
operator||
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|FullScreen
block|,
literal|1
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_F
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|FullScreen
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_Enter
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|FullScreen
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_F
block|,
name|KB_KDE
block|}
block|,
block|{
name|QKeySequence
operator|::
name|FullScreen
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_F11
block|,
name|KB_Gnome
block|}
block|,
block|{
name|QKeySequence
operator|::
name|FullScreen
block|,
literal|1
block|,
name|Qt
operator|::
name|Key_F11
block|,
name|KB_Win
operator||
name|KB_KDE
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Deselect
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_A
block|,
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|DeleteCompleteLine
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_U
block|,
name|KB_X11
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|numberOfKeyBindings
specifier|const
name|uint
name|QPlatformThemePrivate
operator|::
name|numberOfKeyBindings
init|=
sizeof|sizeof
argument_list|(
name|QPlatformThemePrivate
operator|::
name|keyBindings
argument_list|)
operator|/
operator|(
sizeof|sizeof
argument_list|(
name|QKeyBinding
argument_list|)
operator|)
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QPlatformThemePrivate
name|QPlatformThemePrivate
operator|::
name|QPlatformThemePrivate
parameter_list|()
member_init_list|:
name|systemPalette
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QPlatformThemePrivate
name|QPlatformThemePrivate
operator|::
name|~
name|QPlatformThemePrivate
parameter_list|()
block|{
operator|delete
name|systemPalette
expr_stmt|;
block|}
end_destructor
begin_function_decl
name|Q_GUI_EXPORT
name|QPalette
name|qt_fusionPalette
parameter_list|()
function_decl|;
end_function_decl
begin_function
DECL|function|initializeSystemPalette
name|void
name|QPlatformThemePrivate
operator|::
name|initializeSystemPalette
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|systemPalette
argument_list|)
expr_stmt|;
name|systemPalette
operator|=
operator|new
name|QPalette
argument_list|(
name|qt_fusionPalette
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QPlatformTheme
name|QPlatformTheme
operator|::
name|QPlatformTheme
parameter_list|()
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QPlatformThemePrivate
argument_list|)
block|{  }
end_constructor
begin_constructor
DECL|function|QPlatformTheme
name|QPlatformTheme
operator|::
name|QPlatformTheme
parameter_list|(
name|QPlatformThemePrivate
modifier|*
name|priv
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
name|priv
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QPlatformTheme
name|QPlatformTheme
operator|::
name|~
name|QPlatformTheme
parameter_list|()
block|{  }
end_destructor
begin_function
DECL|function|usePlatformNativeDialog
name|bool
name|QPlatformTheme
operator|::
name|usePlatformNativeDialog
parameter_list|(
name|DialogType
name|type
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|createPlatformDialogHelper
name|QPlatformDialogHelper
modifier|*
name|QPlatformTheme
operator|::
name|createPlatformDialogHelper
parameter_list|(
name|DialogType
name|type
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|palette
specifier|const
name|QPalette
modifier|*
name|QPlatformTheme
operator|::
name|palette
parameter_list|(
name|Palette
name|type
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlatformTheme
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|QPlatformTheme
operator|::
name|SystemPalette
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|systemPalette
condition|)
cast|const_cast
argument_list|<
name|QPlatformTheme
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|d_ptr
operator|->
name|initializeSystemPalette
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|systemPalette
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|font
specifier|const
name|QFont
modifier|*
name|QPlatformTheme
operator|::
name|font
parameter_list|(
name|Font
name|type
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
argument|type
argument_list|)
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|standardPixmap
name|QPixmap
name|QPlatformTheme
operator|::
name|standardPixmap
parameter_list|(
name|StandardPixmap
name|sp
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|sp
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|size
argument_list|)
expr_stmt|;
comment|// TODO Should return QCommonStyle pixmaps?
return|return
name|QPixmap
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|fileIconPixmap
name|QPixmap
name|QPlatformTheme
operator|::
name|fileIconPixmap
parameter_list|(
specifier|const
name|QFileInfo
modifier|&
name|fileInfo
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|,
name|QPlatformTheme
operator|::
name|IconOptions
name|iconOptions
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|fileInfo
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|iconOptions
argument_list|)
expr_stmt|;
comment|// TODO Should return QCommonStyle pixmaps?
return|return
name|QPixmap
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|themeHint
name|QVariant
name|QPlatformTheme
operator|::
name|themeHint
parameter_list|(
name|ThemeHint
name|hint
parameter_list|)
specifier|const
block|{
comment|// For theme hints which mirror platform integration style hints, query
comment|// the platform integration. The base QPlatformIntegration::styleHint()
comment|// function will in turn query QPlatformTheme::defaultThemeHint() if there
comment|// is no custom value.
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|QPlatformTheme
operator|::
name|CursorFlashTime
case|:
return|return
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QPlatformIntegration
operator|::
name|CursorFlashTime
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|KeyboardInputInterval
case|:
return|return
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QPlatformIntegration
operator|::
name|KeyboardInputInterval
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|KeyboardAutoRepeatRate
case|:
return|return
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QPlatformIntegration
operator|::
name|KeyboardAutoRepeatRate
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|MouseDoubleClickInterval
case|:
return|return
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QPlatformIntegration
operator|::
name|MouseDoubleClickInterval
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|StartDragDistance
case|:
return|return
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QPlatformIntegration
operator|::
name|StartDragDistance
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|StartDragTime
case|:
return|return
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QPlatformIntegration
operator|::
name|StartDragTime
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|StartDragVelocity
case|:
return|return
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QPlatformIntegration
operator|::
name|StartDragVelocity
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|PasswordMaskDelay
case|:
return|return
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QPlatformIntegration
operator|::
name|PasswordMaskDelay
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|PasswordMaskCharacter
case|:
return|return
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QPlatformIntegration
operator|::
name|PasswordMaskCharacter
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|MousePressAndHoldInterval
case|:
return|return
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QPlatformIntegration
operator|::
name|MousePressAndHoldInterval
argument_list|)
return|;
default|default:
return|return
name|QPlatformTheme
operator|::
name|defaultThemeHint
argument_list|(
name|hint
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|defaultThemeHint
name|QVariant
name|QPlatformTheme
operator|::
name|defaultThemeHint
parameter_list|(
name|ThemeHint
name|hint
parameter_list|)
block|{
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|QPlatformTheme
operator|::
name|CursorFlashTime
case|:
return|return
name|QVariant
argument_list|(
literal|1000
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|KeyboardInputInterval
case|:
return|return
name|QVariant
argument_list|(
literal|400
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|KeyboardAutoRepeatRate
case|:
return|return
name|QVariant
argument_list|(
literal|30
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|MouseDoubleClickInterval
case|:
return|return
name|QVariant
argument_list|(
literal|400
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|StartDragDistance
case|:
return|return
name|QVariant
argument_list|(
literal|10
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|StartDragTime
case|:
return|return
name|QVariant
argument_list|(
literal|500
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|PasswordMaskDelay
case|:
return|return
name|QVariant
argument_list|(
name|int
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|PasswordMaskCharacter
case|:
return|return
name|QVariant
argument_list|(
name|QChar
argument_list|(
literal|0x25CF
argument_list|)
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|StartDragVelocity
case|:
return|return
name|QVariant
argument_list|(
name|int
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
comment|// no limit
case|case
name|QPlatformTheme
operator|::
name|UseFullScreenForPopupMenu
case|:
return|return
name|QVariant
argument_list|(
literal|false
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|WindowAutoPlacement
case|:
return|return
name|QVariant
argument_list|(
literal|false
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|DialogButtonBoxLayout
case|:
return|return
name|QVariant
argument_list|(
name|int
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|DialogButtonBoxButtonsHaveIcons
case|:
return|return
name|QVariant
argument_list|(
literal|false
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|ItemViewActivateItemOnSingleClick
case|:
return|return
name|QVariant
argument_list|(
literal|false
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|ToolButtonStyle
case|:
return|return
name|QVariant
argument_list|(
name|int
argument_list|(
name|Qt
operator|::
name|ToolButtonIconOnly
argument_list|)
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|ToolBarIconSize
case|:
return|return
name|QVariant
argument_list|(
name|int
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|SystemIconThemeName
case|:
case|case
name|QPlatformTheme
operator|::
name|SystemIconFallbackThemeName
case|:
return|return
name|QVariant
argument_list|(
name|QString
argument_list|()
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|IconThemeSearchPaths
case|:
return|return
name|QVariant
argument_list|(
name|QStringList
argument_list|()
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|StyleNames
case|:
return|return
name|QVariant
argument_list|(
name|QStringList
argument_list|()
argument_list|)
return|;
case|case
name|TextCursorWidth
case|:
return|return
name|QVariant
argument_list|(
literal|1
argument_list|)
return|;
case|case
name|DropShadow
case|:
return|return
name|QVariant
argument_list|(
literal|false
argument_list|)
return|;
case|case
name|MaximumScrollBarDragDistance
case|:
return|return
name|QVariant
argument_list|(
operator|-
literal|1
argument_list|)
return|;
case|case
name|KeyboardScheme
case|:
return|return
name|QVariant
argument_list|(
name|int
argument_list|(
name|WindowsKeyboardScheme
argument_list|)
argument_list|)
return|;
case|case
name|UiEffects
case|:
return|return
name|QVariant
argument_list|(
name|int
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
case|case
name|SpellCheckUnderlineStyle
case|:
return|return
name|QVariant
argument_list|(
name|int
argument_list|(
name|QTextCharFormat
operator|::
name|SpellCheckUnderline
argument_list|)
argument_list|)
return|;
case|case
name|TabAllWidgets
case|:
return|return
name|QVariant
argument_list|(
literal|true
argument_list|)
return|;
case|case
name|IconPixmapSizes
case|:
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
return|;
case|case
name|DialogSnapToDefaultButton
case|:
case|case
name|ContextMenuOnMouseRelease
case|:
return|return
name|QVariant
argument_list|(
literal|false
argument_list|)
return|;
case|case
name|MousePressAndHoldInterval
case|:
return|return
name|QVariant
argument_list|(
literal|800
argument_list|)
return|;
case|case
name|MouseDoubleClickDistance
case|:
block|{
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|int
name|dist
init|=
name|qgetenv
argument_list|(
literal|"QT_DBL_CLICK_DIST"
argument_list|)
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
return|return
name|QVariant
argument_list|(
name|ok
condition|?
name|dist
else|:
literal|5
argument_list|)
return|;
block|}
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|createPlatformMenuItem
name|QPlatformMenuItem
modifier|*
name|QPlatformTheme
operator|::
name|createPlatformMenuItem
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|createPlatformMenu
name|QPlatformMenu
modifier|*
name|QPlatformTheme
operator|::
name|createPlatformMenu
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|createPlatformMenuBar
name|QPlatformMenuBar
modifier|*
name|QPlatformTheme
operator|::
name|createPlatformMenuBar
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMTRAYICON
end_ifndef
begin_comment
comment|/*!    Factory function for QSystemTrayIcon. This function will return 0 if the platform    integration does not support creating any system tray icon. */
end_comment
begin_function
DECL|function|createPlatformSystemTrayIcon
name|QPlatformSystemTrayIcon
modifier|*
name|QPlatformTheme
operator|::
name|createPlatformSystemTrayIcon
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!    Factory function for the QIconEngine used by QIcon::fromTheme(). By default this    function returns a QIconLoaderEngine, but subclasses can reimplement it to    provide their own.     It is especially useful to benefit from some platform specific facilities or    optimizations like an inter-process cache in systems mostly built with Qt.     \since 5.1 */
end_comment
begin_function
DECL|function|createIconEngine
name|QIconEngine
modifier|*
name|QPlatformTheme
operator|::
name|createIconEngine
parameter_list|(
specifier|const
name|QString
modifier|&
name|iconName
parameter_list|)
specifier|const
block|{
return|return
operator|new
name|QIconLoaderEngine
argument_list|(
name|iconName
argument_list|)
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MACX
argument_list|)
end_if
begin_function
DECL|function|maybeSwapShortcut
specifier|static
specifier|inline
name|int
name|maybeSwapShortcut
parameter_list|(
name|int
name|shortcut
parameter_list|)
block|{
if|if
condition|(
name|qApp
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_MacDontSwapCtrlAndMeta
argument_list|)
condition|)
block|{
name|uint
name|oldshortcut
init|=
name|shortcut
decl_stmt|;
name|shortcut
operator|&=
operator|~
operator|(
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|META
operator|)
expr_stmt|;
if|if
condition|(
name|oldshortcut
operator|&
name|Qt
operator|::
name|CTRL
condition|)
name|shortcut
operator||=
name|Qt
operator|::
name|META
expr_stmt|;
if|if
condition|(
name|oldshortcut
operator|&
name|Qt
operator|::
name|META
condition|)
name|shortcut
operator||=
name|Qt
operator|::
name|CTRL
expr_stmt|;
block|}
return|return
name|shortcut
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!    Returns the key sequence that should be used for a standard action.    \since 5.2  */
end_comment
begin_function
DECL|function|keyBindings
name|QList
argument_list|<
name|QKeySequence
argument_list|>
name|QPlatformTheme
operator|::
name|keyBindings
parameter_list|(
name|QKeySequence
operator|::
name|StandardKey
name|key
parameter_list|)
specifier|const
block|{
specifier|const
name|uint
name|platform
init|=
name|QPlatformThemePrivate
operator|::
name|currentKeyPlatforms
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QKeySequence
argument_list|>
name|list
decl_stmt|;
name|uint
name|N
init|=
name|QPlatformThemePrivate
operator|::
name|numberOfKeyBindings
decl_stmt|;
name|int
name|first
init|=
literal|0
decl_stmt|;
name|int
name|last
init|=
name|N
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|first
operator|<=
name|last
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|first
operator|+
name|last
operator|)
operator|/
literal|2
decl_stmt|;
specifier|const
name|QKeyBinding
modifier|&
name|midVal
init|=
name|QPlatformThemePrivate
operator|::
name|keyBindings
index|[
name|mid
index|]
decl_stmt|;
if|if
condition|(
name|key
operator|>
name|midVal
operator|.
name|standardKey
condition|)
block|{
name|first
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
comment|// Search in top half
block|}
elseif|else
if|if
condition|(
name|key
operator|<
name|midVal
operator|.
name|standardKey
condition|)
block|{
name|last
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
comment|// Search in bottom half
block|}
else|else
block|{
comment|//We may have several equal values for different platforms, so we must search in both directions
comment|//search forward including current location
for|for
control|(
name|unsigned
name|int
name|i
init|=
name|mid
init|;
name|i
operator|<
name|N
condition|;
operator|++
name|i
control|)
block|{
name|QKeyBinding
name|current
init|=
name|QPlatformThemePrivate
operator|::
name|keyBindings
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|standardKey
operator|!=
name|key
condition|)
break|break;
elseif|else
if|if
condition|(
name|current
operator|.
name|platform
operator|&
name|platform
operator|&&
name|current
operator|.
name|standardKey
operator|==
name|key
condition|)
block|{
name|uint
name|shortcut
init|=
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MACX
argument_list|)
name|maybeSwapShortcut
argument_list|(
name|current
operator|.
name|shortcut
argument_list|)
decl_stmt|;
else|#
directive|else
name|current
operator|.
name|shortcut
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|current
operator|.
name|priority
operator|>
literal|0
condition|)
name|list
operator|.
name|prepend
argument_list|(
name|QKeySequence
argument_list|(
name|shortcut
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|list
operator|.
name|append
argument_list|(
name|QKeySequence
argument_list|(
name|shortcut
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//search back
for|for
control|(
name|int
name|i
init|=
name|mid
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QKeyBinding
name|current
init|=
name|QPlatformThemePrivate
operator|::
name|keyBindings
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|standardKey
operator|!=
name|key
condition|)
break|break;
elseif|else
if|if
condition|(
name|current
operator|.
name|platform
operator|&
name|platform
operator|&&
name|current
operator|.
name|standardKey
operator|==
name|key
condition|)
block|{
name|uint
name|shortcut
init|=
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MACX
argument_list|)
name|maybeSwapShortcut
argument_list|(
name|current
operator|.
name|shortcut
argument_list|)
decl_stmt|;
else|#
directive|else
name|current
operator|.
name|shortcut
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|current
operator|.
name|priority
operator|>
literal|0
condition|)
name|list
operator|.
name|prepend
argument_list|(
name|QKeySequence
argument_list|(
name|shortcut
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|list
operator|.
name|append
argument_list|(
name|QKeySequence
argument_list|(
name|shortcut
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
return|return
name|list
return|;
block|}
end_function
begin_comment
comment|/*!    Returns the text of a standard \a button.    \since 5.3   \sa QPlatformDialogHelper::StandardButton  */
end_comment
begin_function
DECL|function|standardButtonText
name|QString
name|QPlatformTheme
operator|::
name|standardButtonText
parameter_list|(
name|int
name|button
parameter_list|)
specifier|const
block|{
return|return
name|QPlatformTheme
operator|::
name|defaultStandardButtonText
argument_list|(
name|button
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|defaultStandardButtonText
name|QString
name|QPlatformTheme
operator|::
name|defaultStandardButtonText
parameter_list|(
name|int
name|button
parameter_list|)
block|{
switch|switch
condition|(
name|button
condition|)
block|{
case|case
name|QPlatformDialogHelper
operator|::
name|Ok
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPlatformTheme"
argument_list|,
literal|"OK"
argument_list|)
return|;
case|case
name|QPlatformDialogHelper
operator|::
name|Save
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPlatformTheme"
argument_list|,
literal|"Save"
argument_list|)
return|;
case|case
name|QPlatformDialogHelper
operator|::
name|SaveAll
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPlatformTheme"
argument_list|,
literal|"Save All"
argument_list|)
return|;
case|case
name|QPlatformDialogHelper
operator|::
name|Open
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPlatformTheme"
argument_list|,
literal|"Open"
argument_list|)
return|;
case|case
name|QPlatformDialogHelper
operator|::
name|Yes
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPlatformTheme"
argument_list|,
literal|"&Yes"
argument_list|)
return|;
case|case
name|QPlatformDialogHelper
operator|::
name|YesToAll
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPlatformTheme"
argument_list|,
literal|"Yes to&All"
argument_list|)
return|;
case|case
name|QPlatformDialogHelper
operator|::
name|No
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPlatformTheme"
argument_list|,
literal|"&No"
argument_list|)
return|;
case|case
name|QPlatformDialogHelper
operator|::
name|NoToAll
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPlatformTheme"
argument_list|,
literal|"N&o to All"
argument_list|)
return|;
case|case
name|QPlatformDialogHelper
operator|::
name|Abort
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPlatformTheme"
argument_list|,
literal|"Abort"
argument_list|)
return|;
case|case
name|QPlatformDialogHelper
operator|::
name|Retry
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPlatformTheme"
argument_list|,
literal|"Retry"
argument_list|)
return|;
case|case
name|QPlatformDialogHelper
operator|::
name|Ignore
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPlatformTheme"
argument_list|,
literal|"Ignore"
argument_list|)
return|;
case|case
name|QPlatformDialogHelper
operator|::
name|Close
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPlatformTheme"
argument_list|,
literal|"Close"
argument_list|)
return|;
case|case
name|QPlatformDialogHelper
operator|::
name|Cancel
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPlatformTheme"
argument_list|,
literal|"Cancel"
argument_list|)
return|;
case|case
name|QPlatformDialogHelper
operator|::
name|Discard
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPlatformTheme"
argument_list|,
literal|"Discard"
argument_list|)
return|;
case|case
name|QPlatformDialogHelper
operator|::
name|Help
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPlatformTheme"
argument_list|,
literal|"Help"
argument_list|)
return|;
case|case
name|QPlatformDialogHelper
operator|::
name|Apply
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPlatformTheme"
argument_list|,
literal|"Apply"
argument_list|)
return|;
case|case
name|QPlatformDialogHelper
operator|::
name|Reset
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPlatformTheme"
argument_list|,
literal|"Reset"
argument_list|)
return|;
case|case
name|QPlatformDialogHelper
operator|::
name|RestoreDefaults
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPlatformTheme"
argument_list|,
literal|"Restore Defaults"
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|currentKeyPlatforms
name|unsigned
name|QPlatformThemePrivate
operator|::
name|currentKeyPlatforms
parameter_list|()
block|{
specifier|const
name|uint
name|keyboardScheme
init|=
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
operator|->
name|themeHint
argument_list|(
name|QPlatformTheme
operator|::
name|KeyboardScheme
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|unsigned
name|result
init|=
literal|1u
operator|<<
name|keyboardScheme
decl_stmt|;
if|if
condition|(
name|keyboardScheme
operator|==
name|QPlatformTheme
operator|::
name|KdeKeyboardScheme
operator|||
name|keyboardScheme
operator|==
name|QPlatformTheme
operator|::
name|GnomeKeyboardScheme
operator|||
name|keyboardScheme
operator|==
name|QPlatformTheme
operator|::
name|CdeKeyboardScheme
condition|)
name|result
operator||=
name|KB_X11
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
