begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qclipboard.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"qeventloop.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qmime.h"
end_include
begin_include
include|#
directive|include
file|"qt_windows.h"
end_include
begin_include
include|#
directive|include
file|"qdnd_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|"qguifunctions_wince.h"
name|QT_END_INCLUDE_NAMESPACE
name|HRESULT
name|QtCeGetClipboard
parameter_list|(
name|IDataObject
modifier|*
modifier|*
name|obj
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|HRESULT
name|QtCeSetClipboard
parameter_list|(
name|IDataObject
modifier|*
name|obj
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QtCeFlushClipboard
parameter_list|()
function_decl|;
end_function_decl
begin_define
DECL|macro|OleGetClipboard
define|#
directive|define
name|OleGetClipboard
value|QtCeGetClipboard
end_define
begin_define
DECL|macro|OleSetClipboard
define|#
directive|define
name|OleSetClipboard
value|QtCeSetClipboard
end_define
begin_define
DECL|macro|OleFlushClipboard
define|#
directive|define
name|OleFlushClipboard
value|QtCeFlushClipboard
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|PtrIsHungAppWindow
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|PtrIsHungAppWindow
function_decl|)
parameter_list|(
name|HWND
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrIsHungAppWindow
specifier|static
name|PtrIsHungAppWindow
name|ptrIsHungAppWindow
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QClipboardWatcher
class|class
name|QClipboardWatcher
super|:
specifier|public
name|QInternalMimeData
block|{
public|public:
DECL|function|QClipboardWatcher
name|QClipboardWatcher
parameter_list|()
member_init_list|:
name|QInternalMimeData
argument_list|()
block|{     }
name|bool
name|hasFormat_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimetype
parameter_list|)
specifier|const
function_decl|;
name|QStringList
name|formats_sys
parameter_list|()
specifier|const
function_decl|;
name|QVariant
name|retrieveData_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimetype
parameter_list|,
name|QVariant
operator|::
name|Type
name|preferredType
parameter_list|)
specifier|const
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|hasFormat_sys
name|bool
name|QClipboardWatcher
operator|::
name|hasFormat_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
specifier|const
block|{
name|IDataObject
modifier|*
name|pDataObj
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|OleGetClipboard
argument_list|(
operator|&
name|pDataObj
argument_list|)
operator|!=
name|S_OK
operator|&&
operator|!
name|pDataObj
condition|)
comment|// Sanity
return|return
literal|false
return|;
name|bool
name|has
init|=
name|QWindowsMime
operator|::
name|converterToMime
argument_list|(
name|mime
argument_list|,
name|pDataObj
argument_list|)
operator|!=
literal|0
decl_stmt|;
name|pDataObj
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return
name|has
return|;
block|}
end_function
begin_function
DECL|function|formats_sys
name|QStringList
name|QClipboardWatcher
operator|::
name|formats_sys
parameter_list|()
specifier|const
block|{
name|QStringList
name|fmts
decl_stmt|;
name|IDataObject
modifier|*
name|pDataObj
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|OleGetClipboard
argument_list|(
operator|&
name|pDataObj
argument_list|)
operator|!=
name|S_OK
operator|&&
operator|!
name|pDataObj
condition|)
comment|// Sanity
return|return
name|QStringList
argument_list|()
return|;
name|fmts
operator|=
name|QWindowsMime
operator|::
name|allMimesForFormats
argument_list|(
name|pDataObj
argument_list|)
expr_stmt|;
name|pDataObj
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return
name|fmts
return|;
block|}
end_function
begin_function
DECL|function|retrieveData_sys
name|QVariant
name|QClipboardWatcher
operator|::
name|retrieveData_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|,
name|QVariant
operator|::
name|Type
name|type
parameter_list|)
specifier|const
block|{
name|QVariant
name|result
decl_stmt|;
name|IDataObject
modifier|*
name|pDataObj
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|OleGetClipboard
argument_list|(
operator|&
name|pDataObj
argument_list|)
operator|!=
name|S_OK
operator|&&
operator|!
name|pDataObj
condition|)
comment|// Sanity
return|return
name|result
return|;
name|QWindowsMime
modifier|*
name|converter
init|=
name|QWindowsMime
operator|::
name|converterToMime
argument_list|(
name|mimeType
argument_list|,
name|pDataObj
argument_list|)
decl_stmt|;
if|if
condition|(
name|converter
condition|)
name|result
operator|=
name|converter
operator|->
name|convertToMime
argument_list|(
name|mimeType
argument_list|,
name|pDataObj
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|pDataObj
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_class
DECL|class|QClipboardData
class|class
name|QClipboardData
block|{
public|public:
DECL|function|QClipboardData
name|QClipboardData
parameter_list|()
member_init_list|:
name|iData
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|nextClipboardViewer
argument_list|(
literal|0
argument_list|)
block|{
name|clipBoardViewer
operator|=
operator|new
name|QWidget
argument_list|()
expr_stmt|;
name|clipBoardViewer
operator|->
name|createWinId
argument_list|()
expr_stmt|;
name|clipBoardViewer
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"internal clipboard owner"
argument_list|)
argument_list|)
expr_stmt|;
comment|// We don't need this internal widget to appear in QApplication::topLevelWidgets()
if|if
condition|(
name|QWidgetPrivate
operator|::
name|allWidgets
condition|)
name|QWidgetPrivate
operator|::
name|allWidgets
operator|->
name|remove
argument_list|(
name|clipBoardViewer
argument_list|)
expr_stmt|;
block|}
DECL|function|~QClipboardData
name|~
name|QClipboardData
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|clipBoardViewer
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeClipboardChain
argument_list|(
name|clipBoardViewer
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|nextClipboardViewer
argument_list|)
expr_stmt|;
operator|delete
name|clipBoardViewer
expr_stmt|;
name|releaseIData
argument_list|()
expr_stmt|;
block|}
DECL|function|releaseIData
name|void
name|releaseIData
parameter_list|()
block|{
if|if
condition|(
name|iData
condition|)
block|{
operator|delete
name|iData
operator|->
name|mimeData
argument_list|()
expr_stmt|;
name|iData
operator|->
name|releaseQt
argument_list|()
expr_stmt|;
name|iData
operator|->
name|Release
argument_list|()
expr_stmt|;
name|iData
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|member|iData
name|QOleDataObject
modifier|*
name|iData
decl_stmt|;
DECL|member|clipBoardViewer
name|QWidget
modifier|*
name|clipBoardViewer
decl_stmt|;
DECL|member|nextClipboardViewer
name|HWND
name|nextClipboardViewer
decl_stmt|;
DECL|member|watcher
name|QClipboardWatcher
name|watcher
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|ptrClipboardData
specifier|static
name|QClipboardData
modifier|*
name|ptrClipboardData
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|clipboardData
specifier|static
name|QClipboardData
modifier|*
name|clipboardData
parameter_list|()
block|{
if|if
condition|(
name|ptrClipboardData
operator|==
literal|0
condition|)
block|{
name|ptrClipboardData
operator|=
operator|new
name|QClipboardData
expr_stmt|;
comment|// this needs to be done here to avoid recursion
name|Q_ASSERT
argument_list|(
name|ptrClipboardData
operator|->
name|clipBoardViewer
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|ptrClipboardData
operator|->
name|nextClipboardViewer
operator|=
name|SetClipboardViewer
argument_list|(
name|ptrClipboardData
operator|->
name|clipBoardViewer
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ptrClipboardData
return|;
block|}
end_function
begin_function
DECL|function|cleanupClipboardData
specifier|static
name|void
name|cleanupClipboardData
parameter_list|()
block|{
operator|delete
name|ptrClipboardData
expr_stmt|;
name|ptrClipboardData
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_function
DECL|function|QtCeGetClipboard
name|HRESULT
name|QtCeGetClipboard
parameter_list|(
name|IDataObject
modifier|*
modifier|*
name|obj
parameter_list|)
block|{
name|HWND
name|owner
init|=
name|ptrClipboardData
operator|->
name|clipBoardViewer
operator|->
name|internalWinId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|OpenClipboard
argument_list|(
name|owner
argument_list|)
condition|)
return|return
operator|!
name|S_OK
return|;
if|if
condition|(
operator|!
name|IsClipboardFormatAvailable
argument_list|(
name|CF_TEXT
argument_list|)
operator|&&
operator|!
name|IsClipboardFormatAvailable
argument_list|(
name|CF_UNICODETEXT
argument_list|)
condition|)
return|return
operator|!
name|S_OK
return|;
name|HANDLE
name|clipData
init|=
name|GetClipboardData
argument_list|(
name|CF_TEXT
argument_list|)
decl_stmt|;
name|QString
name|clipText
decl_stmt|;
if|if
condition|(
name|clipData
operator|==
literal|0
condition|)
block|{
name|clipData
operator|=
name|GetClipboardData
argument_list|(
name|CF_UNICODETEXT
argument_list|)
expr_stmt|;
if|if
condition|(
name|clipData
operator|!=
literal|0
condition|)
name|clipText
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|clipData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clipText
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|clipData
argument_list|)
expr_stmt|;
block|}
name|QMimeData
modifier|*
name|mimeData
init|=
operator|new
name|QMimeData
argument_list|()
decl_stmt|;
name|mimeData
operator|->
name|setText
argument_list|(
name|clipText
argument_list|)
expr_stmt|;
name|QOleDataObject
modifier|*
name|data
init|=
operator|new
name|QOleDataObject
argument_list|(
name|mimeData
argument_list|)
decl_stmt|;
operator|*
name|obj
operator|=
name|data
expr_stmt|;
name|CloseClipboard
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|QtCeSetClipboard
name|HRESULT
name|QtCeSetClipboard
parameter_list|(
name|IDataObject
modifier|*
name|obj
parameter_list|)
block|{
name|HWND
name|owner
init|=
name|ptrClipboardData
operator|->
name|clipBoardViewer
operator|->
name|internalWinId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|OpenClipboard
argument_list|(
name|owner
argument_list|)
condition|)
return|return
operator|!
name|S_OK
return|;
name|bool
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|0
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
name|EmptyClipboard
argument_list|()
expr_stmt|;
name|CloseClipboard
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QOleDataObject
modifier|*
name|qobj
init|=
cast|static_cast
argument_list|<
name|QOleDataObject
operator|*
argument_list|>
argument_list|(
name|obj
argument_list|)
decl_stmt|;
specifier|const
name|QMimeData
modifier|*
name|data
init|=
name|qobj
operator|->
name|mimeData
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|hasText
argument_list|()
condition|)
block|{
name|EmptyClipboard
argument_list|()
expr_stmt|;
name|result
operator|=
name|SetClipboardData
argument_list|(
name|CF_UNICODETEXT
argument_list|,
name|wcsdup
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|data
operator|->
name|text
argument_list|()
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|!=
name|NULL
expr_stmt|;
name|CloseClipboard
argument_list|()
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|result
condition|?
name|S_OK
else|:
operator|!
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|QtCeFlushClipboard
name|void
name|QtCeFlushClipboard
parameter_list|()
block|{ }
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_destructor
DECL|function|~QClipboard
name|QClipboard
operator|::
name|~
name|QClipboard
parameter_list|()
block|{
name|cleanupClipboardData
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setMimeData
name|void
name|QClipboard
operator|::
name|setMimeData
parameter_list|(
name|QMimeData
modifier|*
name|src
parameter_list|,
name|Mode
name|mode
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|!=
name|Clipboard
condition|)
return|return;
name|QClipboardData
modifier|*
name|d
init|=
name|clipboardData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|iData
operator|&&
name|d
operator|->
name|iData
operator|->
name|mimeData
argument_list|()
operator|==
name|src
operator|)
condition|)
block|{
name|d
operator|->
name|releaseIData
argument_list|()
expr_stmt|;
name|d
operator|->
name|iData
operator|=
operator|new
name|QOleDataObject
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|OleSetClipboard
argument_list|(
name|d
operator|->
name|iData
argument_list|)
operator|!=
name|S_OK
condition|)
block|{
name|d
operator|->
name|releaseIData
argument_list|()
expr_stmt|;
name|qErrnoWarning
argument_list|(
literal|"QClipboard::setMimeData: Failed to set data on clipboard"
argument_list|)
expr_stmt|;
return|return;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|// As WinCE does not support notifications we send the signal here
comment|// We will get no event when the clipboard changes outside...
emit|emit
name|dataChanged
argument_list|()
emit|;
emit|emit
name|changed
argument_list|(
name|Clipboard
argument_list|)
emit|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|clear
name|void
name|QClipboard
operator|::
name|clear
parameter_list|(
name|Mode
name|mode
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|!=
name|Clipboard
condition|)
return|return;
name|QClipboardData
modifier|*
name|d
init|=
name|clipboardData
argument_list|()
decl_stmt|;
name|d
operator|->
name|releaseIData
argument_list|()
expr_stmt|;
if|if
condition|(
name|OleSetClipboard
argument_list|(
literal|0
argument_list|)
operator|!=
name|S_OK
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"QClipboard::clear: Failed to clear data on clipboard"
argument_list|)
expr_stmt|;
return|return;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|// As WinCE does not support notifications we send the signal here
comment|// We will get no event when the clipboard changes outside...
emit|emit
name|dataChanged
argument_list|()
emit|;
emit|emit
name|changed
argument_list|(
name|Clipboard
argument_list|)
emit|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|event
name|bool
name|QClipboard
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|!=
name|QEvent
operator|::
name|Clipboard
condition|)
return|return
name|QObject
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
name|QClipboardData
modifier|*
name|d
init|=
name|clipboardData
argument_list|()
decl_stmt|;
name|MSG
modifier|*
name|m
init|=
operator|(
name|MSG
operator|*
operator|)
operator|(
operator|(
name|QClipboardEvent
operator|*
operator|)
name|e
operator|)
operator|->
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|m
condition|)
block|{
comment|// this is sent to render all formats at app shut down
if|if
condition|(
name|ownsClipboard
argument_list|()
condition|)
block|{
name|OleFlushClipboard
argument_list|()
expr_stmt|;
name|d
operator|->
name|releaseIData
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
name|bool
name|propagate
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|m
operator|->
name|message
operator|==
name|WM_CHANGECBCHAIN
condition|)
block|{
if|if
condition|(
operator|(
name|HWND
operator|)
name|m
operator|->
name|wParam
operator|==
name|d
operator|->
name|nextClipboardViewer
condition|)
name|d
operator|->
name|nextClipboardViewer
operator|=
operator|(
name|HWND
operator|)
name|m
operator|->
name|lParam
expr_stmt|;
else|else
name|propagate
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|->
name|message
operator|==
name|WM_DRAWCLIPBOARD
condition|)
block|{
name|emitChanged
argument_list|(
name|QClipboard
operator|::
name|Clipboard
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ownsClipboard
argument_list|()
operator|&&
name|d
operator|->
name|iData
condition|)
comment|// clean up the clipboard object if we no longer own the clipboard
name|d
operator|->
name|releaseIData
argument_list|()
expr_stmt|;
name|propagate
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|propagate
operator|&&
name|d
operator|->
name|nextClipboardViewer
condition|)
block|{
if|if
condition|(
name|ptrIsHungAppWindow
operator|==
literal|0
condition|)
block|{
name|QSystemLibrary
name|library
argument_list|(
name|QLatin1String
argument_list|(
literal|"User32"
argument_list|)
argument_list|)
decl_stmt|;
name|ptrIsHungAppWindow
operator|=
operator|(
name|PtrIsHungAppWindow
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"IsHungAppWindow"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ptrIsHungAppWindow
operator|&&
name|ptrIsHungAppWindow
argument_list|(
name|d
operator|->
name|nextClipboardViewer
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Cowardly refusing to send clipboard message to hung application..."
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SendMessage
argument_list|(
name|d
operator|->
name|nextClipboardViewer
argument_list|,
name|m
operator|->
name|message
argument_list|,
name|m
operator|->
name|wParam
argument_list|,
name|m
operator|->
name|lParam
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|connectNotify
name|void
name|QClipboard
operator|::
name|connectNotify
parameter_list|(
specifier|const
name|char
modifier|*
name|signal
parameter_list|)
block|{
if|if
condition|(
name|qstrcmp
argument_list|(
name|signal
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|()
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// ensure we are up and running but block signals so the dataChange signal
comment|// is not emitted while being connected to.
name|bool
name|blocked
init|=
name|blockSignals
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|QClipboardData
modifier|*
name|d
init|=
name|clipboardData
argument_list|()
decl_stmt|;
name|blockSignals
argument_list|(
name|blocked
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mimeData
specifier|const
name|QMimeData
modifier|*
name|QClipboard
operator|::
name|mimeData
parameter_list|(
name|Mode
name|mode
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|mode
operator|!=
name|Clipboard
condition|)
return|return
literal|0
return|;
name|QClipboardData
modifier|*
name|data
init|=
name|clipboardData
argument_list|()
decl_stmt|;
comment|// sort cut for local copy / paste
if|if
condition|(
name|ownsClipboard
argument_list|()
operator|&&
name|data
operator|->
name|iData
operator|->
name|mimeData
argument_list|()
condition|)
return|return
name|data
operator|->
name|iData
operator|->
name|mimeData
argument_list|()
return|;
return|return
operator|&
name|data
operator|->
name|watcher
return|;
block|}
end_function
begin_function
DECL|function|supportsMode
name|bool
name|QClipboard
operator|::
name|supportsMode
parameter_list|(
name|Mode
name|mode
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|mode
operator|==
name|Clipboard
operator|)
return|;
block|}
end_function
begin_function
DECL|function|ownsMode
name|bool
name|QClipboard
operator|::
name|ownsMode
parameter_list|(
name|Mode
name|mode
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|mode
operator|==
name|Clipboard
condition|)
block|{
name|QClipboardData
modifier|*
name|d
init|=
name|clipboardData
argument_list|()
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
return|return
name|d
operator|->
name|iData
operator|&&
name|OleIsCurrentClipboard
argument_list|(
name|d
operator|->
name|iData
argument_list|)
operator|==
name|S_OK
return|;
else|#
directive|else
return|return
name|d
operator|->
name|iData
operator|&&
name|GetClipboardOwner
argument_list|()
operator|==
name|d
operator|->
name|clipBoardViewer
operator|->
name|internalWinId
argument_list|()
return|;
endif|#
directive|endif
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|ownerDestroyed
name|void
name|QClipboard
operator|::
name|ownerDestroyed
parameter_list|()
block|{ }
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CLIPBOARD
end_comment
end_unit
