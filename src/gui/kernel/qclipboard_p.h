begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QCLIPBOARD_P_H
end_ifndef
begin_define
DECL|macro|QCLIPBOARD_P_H
define|#
directive|define
name|QCLIPBOARD_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"private/qobject_p.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qmime.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qclipboard.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QClipboardPrivate
name|class
name|QClipboardPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QMimeDataWrapper
range|:
name|public
name|QMimeSource
block|{
name|public
operator|:
name|QMimeDataWrapper
argument_list|()
block|{}
specifier|const
name|char
operator|*
name|format
argument_list|(
argument|int n
argument_list|)
specifier|const
block|;
name|QByteArray
name|encodedData
argument_list|(
argument|const char*
argument_list|)
specifier|const
block|;
name|mutable
name|QList
operator|<
name|QByteArray
operator|>
name|formats
block|;
specifier|const
name|QMimeData
operator|*
name|data
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QMimeSourceWrapper
range|:
name|public
name|QMimeData
block|{
name|public
operator|:
name|QMimeSourceWrapper
argument_list|(
argument|QClipboardPrivate *priv
argument_list|,
argument|QClipboard::Mode m
argument_list|)
block|;
operator|~
name|QMimeSourceWrapper
argument_list|()
block|;
name|bool
name|hasFormat
argument_list|(
argument|const QString&mimetype
argument_list|)
specifier|const
block|;
name|QStringList
name|formats
argument_list|()
specifier|const
block|;
name|protected
operator|:
name|QVariant
name|retrieveData
argument_list|(
argument|const QString&mimetype
argument_list|,
argument|QVariant::Type
argument_list|)
specifier|const
block|;
name|private
operator|:
name|QClipboardPrivate
operator|*
name|d
block|;
name|QClipboard
operator|::
name|Mode
name|mode
block|;
name|QMimeSource
operator|*
name|source
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QClipboardPrivate
range|:
name|public
name|QObjectPrivate
block|{
name|public
operator|:
name|QClipboardPrivate
argument_list|()
operator|:
name|QObjectPrivate
argument_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|QClipboard
operator|::
name|LastMode
condition|;
operator|++
name|i
control|)
block|{
name|compat_data
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|wrapper
index|[
name|i
index|]
operator|=
name|new
name|QMimeDataWrapper
argument_list|()
expr_stmt|;
block|}
block|}
operator|~
name|QClipboardPrivate
argument_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|QClipboard
operator|::
name|LastMode
condition|;
operator|++
name|i
control|)
block|{
name|delete
name|wrapper
index|[
name|i
index|]
decl_stmt|;
name|delete
name|compat_data
index|[
name|i
index|]
decl_stmt|;
block|}
block|}
name|mutable
name|QMimeDataWrapper
operator|*
name|wrapper
index|[
name|QClipboard
operator|::
name|LastMode
operator|+
literal|1
index|]
block|;
name|mutable
name|QMimeSource
operator|*
name|compat_data
index|[
name|QClipboard
operator|::
name|LastMode
operator|+
literal|1
index|]
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|function|QMimeSourceWrapper
specifier|inline
name|QMimeSourceWrapper
operator|::
name|QMimeSourceWrapper
argument_list|(
argument|QClipboardPrivate *priv
argument_list|,
argument|QClipboard::Mode m
argument_list|)
operator|:
name|QMimeData
argument_list|()
block|{
name|d
operator|=
name|priv
block|;
name|mode
operator|=
name|m
block|;
name|source
operator|=
name|d
operator|->
name|compat_data
index|[
name|mode
index|]
block|; }
DECL|function|~QMimeSourceWrapper
specifier|inline
name|QMimeSourceWrapper
operator|::
operator|~
name|QMimeSourceWrapper
argument_list|()
block|{
if|if
condition|(
name|d
operator|->
name|compat_data
index|[
name|mode
index|]
operator|==
name|source
condition|)
name|d
operator|->
name|compat_data
index|[
name|mode
index|]
operator|=
literal|0
expr_stmt|;
name|delete
name|source
expr_stmt|;
end_expr_stmt
begin_endif
unit|}  QT_END_NAMESPACE
endif|#
directive|endif
end_endif
begin_comment
comment|// QCLIPBOARD_P_H
end_comment
end_unit
