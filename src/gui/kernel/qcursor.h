begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QCURSOR_H
end_ifndef
begin_define
DECL|macro|QCURSOR_H
define|#
directive|define
name|QCURSOR_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qpoint.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qwindowdefs.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|variable|QVariant
name|class
name|QVariant
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QScreen
name|class
name|QScreen
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*   ### The fake cursor has to go first with old qdoc. */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_CURSOR
end_ifdef
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QCursor
block|{
name|public
label|:
specifier|static
name|QPoint
name|pos
parameter_list|()
function_decl|;
specifier|static
name|QPoint
name|pos
parameter_list|(
specifier|const
name|QScreen
modifier|*
name|screen
parameter_list|)
function_decl|;
specifier|static
name|void
name|setPos
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
specifier|static
name|void
name|setPos
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
specifier|inline
specifier|static
name|void
name|setPos
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
block|{
name|setPos
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|private
label|:
name|QCursor
argument_list|()
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CURSOR
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_decl_stmt
DECL|variable|QCursorData
name|class
name|QCursorData
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QBitmap
name|class
name|QBitmap
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPixmap
name|class
name|QPixmap
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QCursor
block|{
name|public
label|:
name|QCursor
argument_list|()
expr_stmt|;
name|QCursor
argument_list|(
argument|Qt::CursorShape shape
argument_list|)
empty_stmt|;
name|QCursor
argument_list|(
argument|const QBitmap&bitmap
argument_list|,
argument|const QBitmap&mask
argument_list|,
argument|int hotX=-
literal|1
argument_list|,
argument|int hotY=-
literal|1
argument_list|)
empty_stmt|;
name|QCursor
argument_list|(
argument|const QPixmap&pixmap
argument_list|,
argument|int hotX=-
literal|1
argument_list|,
argument|int hotY=-
literal|1
argument_list|)
empty_stmt|;
name|QCursor
argument_list|(
specifier|const
name|QCursor
operator|&
name|cursor
argument_list|)
expr_stmt|;
operator|~
name|QCursor
argument_list|()
expr_stmt|;
name|QCursor
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QCursor
operator|&
name|cursor
operator|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
specifier|inline
name|QCursor
modifier|&
name|operator
init|=
operator|(
name|QCursor
operator|&&
name|other
operator|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
endif|#
directive|endif
name|operator
name|QVariant
argument_list|()
specifier|const
expr_stmt|;
name|Qt
operator|::
name|CursorShape
name|shape
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setShape
argument_list|(
name|Qt
operator|::
name|CursorShape
name|newShape
argument_list|)
decl_stmt|;
specifier|const
name|QBitmap
operator|*
name|bitmap
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|QBitmap
operator|*
name|mask
argument_list|()
specifier|const
expr_stmt|;
name|QPixmap
name|pixmap
argument_list|()
specifier|const
expr_stmt|;
name|QPoint
name|hotSpot
argument_list|()
specifier|const
expr_stmt|;
specifier|static
name|QPoint
name|pos
parameter_list|()
function_decl|;
specifier|static
name|QPoint
name|pos
parameter_list|(
specifier|const
name|QScreen
modifier|*
name|screen
parameter_list|)
function_decl|;
specifier|static
name|void
name|setPos
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
specifier|static
name|void
name|setPos
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
specifier|inline
specifier|static
name|void
name|setPos
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
block|{
name|setPos
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|inline
specifier|static
name|void
name|setPos
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
block|{
name|setPos
argument_list|(
name|screen
argument_list|,
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|private
label|:
name|QCursorData
modifier|*
name|d
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|/*****************************************************************************   QCursor stream functions  *****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_expr_stmt
name|Q_GUI_EXPORT
name|QDataStream
operator|&
name|operator
operator|<<
operator|(
name|QDataStream
operator|&
name|outS
operator|,
specifier|const
name|QCursor
operator|&
name|cursor
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_GUI_EXPORT
name|QDataStream
operator|&
name|operator
operator|>>
operator|(
name|QDataStream
operator|&
name|inS
operator|,
name|QCursor
operator|&
name|cursor
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_GUI_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QCursor
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CURSOR
end_comment
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QCURSOR_H
end_comment
end_unit
