begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qpixmap.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qiodevice.h"
end_include
begin_include
include|#
directive|include
file|"qpointer.h"
end_include
begin_include
include|#
directive|include
file|"qcursor.h"
end_include
begin_include
include|#
directive|include
file|"qelapsedtimer.h"
end_include
begin_include
include|#
directive|include
file|"qvariant.h"
end_include
begin_include
include|#
directive|include
file|"qvector.h"
end_include
begin_include
include|#
directive|include
file|"qurl.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qimagewriter.h"
end_include
begin_include
include|#
directive|include
file|"qbuffer.h"
end_include
begin_include
include|#
directive|include
file|"qtextcodec.h"
end_include
begin_include
include|#
directive|include
file|"qdnd_p.h"
end_include
begin_include
include|#
directive|include
file|"qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"qt_x11_p.h"
end_include
begin_include
include|#
directive|include
file|"qx11info_x11.h"
end_include
begin_include
include|#
directive|include
file|"qwidget_p.h"
end_include
begin_include
include|#
directive|include
file|"qcursor_p.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|// #define DND_DEBUG
ifdef|#
directive|ifdef
name|DND_DEBUG
DECL|macro|DEBUG
define|#
directive|define
name|DEBUG
value|qDebug
else|#
directive|else
define|#
directive|define
name|DEBUG
value|if(0) qDebug
endif|#
directive|endif
ifdef|#
directive|ifdef
name|DND_DEBUG
DECL|macro|DNDDEBUG
define|#
directive|define
name|DNDDEBUG
value|qDebug()
else|#
directive|else
define|#
directive|define
name|DNDDEBUG
value|if(0) qDebug()
endif|#
directive|endif
DECL|function|findXdndDropTransactionByWindow
specifier|static
name|int
name|findXdndDropTransactionByWindow
parameter_list|(
name|Window
name|window
parameter_list|)
block|{
name|int
name|at
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|X11
operator|->
name|dndDropTransactions
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QXdndDropTransaction
modifier|&
name|t
init|=
name|X11
operator|->
name|dndDropTransactions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|target
operator|==
name|window
operator|||
name|t
operator|.
name|proxy_target
operator|==
name|window
condition|)
block|{
name|at
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
return|return
name|at
return|;
block|}
end_function
begin_function
DECL|function|findXdndDropTransactionByTime
specifier|static
name|int
name|findXdndDropTransactionByTime
parameter_list|(
name|Time
name|timestamp
parameter_list|)
block|{
name|int
name|at
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|X11
operator|->
name|dndDropTransactions
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QXdndDropTransaction
modifier|&
name|t
init|=
name|X11
operator|->
name|dndDropTransactions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|timestamp
operator|==
name|timestamp
condition|)
block|{
name|at
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
return|return
name|at
return|;
block|}
end_function
begin_comment
comment|// timer used to discard old XdndDrop transactions
end_comment
begin_decl_stmt
DECL|variable|transaction_expiry_timer
specifier|static
name|int
name|transaction_expiry_timer
init|=
operator|-
literal|1
decl_stmt|;
end_decl_stmt
begin_enum
DECL|enumerator|XdndDropTransactionTimeout
enum|enum
block|{
name|XdndDropTransactionTimeout
init|=
literal|5000
block|}
enum|;
end_enum
begin_comment
DECL|enumerator|XdndDropTransactionTimeout
comment|// 5 seconds
end_comment
begin_function
DECL|function|restartXdndDropExpiryTimer
specifier|static
name|void
name|restartXdndDropExpiryTimer
parameter_list|()
block|{
if|if
condition|(
name|transaction_expiry_timer
operator|!=
operator|-
literal|1
condition|)
name|QDragManager
operator|::
name|self
argument_list|()
operator|->
name|killTimer
argument_list|(
name|transaction_expiry_timer
argument_list|)
expr_stmt|;
name|transaction_expiry_timer
operator|=
name|QDragManager
operator|::
name|self
argument_list|()
operator|->
name|startTimer
argument_list|(
name|XdndDropTransactionTimeout
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// find an ancestor with XdndAware on it
end_comment
begin_function
DECL|function|findXdndAwareParent
specifier|static
name|Window
name|findXdndAwareParent
parameter_list|(
name|Window
name|window
parameter_list|)
block|{
name|Window
name|target
init|=
literal|0
decl_stmt|;
forever|forever
block|{
comment|// check if window has XdndAware
name|Atom
name|type
init|=
literal|0
decl_stmt|;
name|int
name|f
decl_stmt|;
name|unsigned
name|long
name|n
decl_stmt|,
name|a
decl_stmt|;
name|unsigned
name|char
modifier|*
name|data
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|window
argument_list|,
name|ATOM
argument_list|(
name|XdndAware
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|False
argument_list|,
name|AnyPropertyType
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|f
argument_list|,
operator|&
name|n
argument_list|,
operator|&
name|a
argument_list|,
operator|&
name|data
argument_list|)
operator|==
name|Success
condition|)
block|{
if|if
condition|(
name|data
condition|)
name|XFree
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
condition|)
block|{
name|target
operator|=
name|window
expr_stmt|;
break|break;
block|}
block|}
comment|// try window's parent
name|Window
name|root
decl_stmt|;
name|Window
name|parent
decl_stmt|;
name|Window
modifier|*
name|children
decl_stmt|;
name|uint
name|unused
decl_stmt|;
if|if
condition|(
operator|!
name|XQueryTree
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|window
argument_list|,
operator|&
name|root
argument_list|,
operator|&
name|parent
argument_list|,
operator|&
name|children
argument_list|,
operator|&
name|unused
argument_list|)
condition|)
break|break;
if|if
condition|(
name|children
condition|)
name|XFree
argument_list|(
name|children
argument_list|)
expr_stmt|;
if|if
condition|(
name|window
operator|==
name|root
condition|)
break|break;
name|window
operator|=
name|parent
expr_stmt|;
block|}
return|return
name|target
return|;
block|}
end_function
begin_comment
comment|// and all this stuff is copied -into- qapp_x11.cpp
end_comment
begin_function_decl
specifier|static
name|void
name|handle_xdnd_position
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
specifier|const
name|XEvent
modifier|*
parameter_list|,
name|bool
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|handle_xdnd_status
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|XEvent
modifier|*
name|xe
parameter_list|,
name|bool
comment|/*passive*/
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|xdnd_version
specifier|const
name|int
name|xdnd_version
init|=
literal|5
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|xdndaction_to_qtaction
specifier|static
name|Qt
operator|::
name|DropAction
name|xdndaction_to_qtaction
parameter_list|(
name|Atom
name|atom
parameter_list|)
block|{
if|if
condition|(
name|atom
operator|==
name|ATOM
argument_list|(
name|XdndActionCopy
argument_list|)
operator|||
name|atom
operator|==
literal|0
condition|)
return|return
name|Qt
operator|::
name|CopyAction
return|;
if|if
condition|(
name|atom
operator|==
name|ATOM
argument_list|(
name|XdndActionLink
argument_list|)
condition|)
return|return
name|Qt
operator|::
name|LinkAction
return|;
if|if
condition|(
name|atom
operator|==
name|ATOM
argument_list|(
name|XdndActionMove
argument_list|)
condition|)
return|return
name|Qt
operator|::
name|MoveAction
return|;
return|return
name|Qt
operator|::
name|CopyAction
return|;
block|}
end_function
begin_function
DECL|function|qtaction_to_xdndaction
specifier|static
name|int
name|qtaction_to_xdndaction
parameter_list|(
name|Qt
operator|::
name|DropAction
name|a
parameter_list|)
block|{
switch|switch
condition|(
name|a
condition|)
block|{
case|case
name|Qt
operator|::
name|CopyAction
case|:
return|return
name|ATOM
argument_list|(
name|XdndActionCopy
argument_list|)
return|;
case|case
name|Qt
operator|::
name|LinkAction
case|:
return|return
name|ATOM
argument_list|(
name|XdndActionLink
argument_list|)
return|;
case|case
name|Qt
operator|::
name|MoveAction
case|:
case|case
name|Qt
operator|::
name|TargetMoveAction
case|:
return|return
name|ATOM
argument_list|(
name|XdndActionMove
argument_list|)
return|;
case|case
name|Qt
operator|::
name|IgnoreAction
case|:
return|return
name|XNone
return|;
default|default:
return|return
name|ATOM
argument_list|(
name|XdndActionCopy
argument_list|)
return|;
block|}
block|}
end_function
begin_comment
comment|// clean up the stuff used.
end_comment
begin_function_decl
specifier|static
name|void
name|qt_xdnd_cleanup
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|qt_xdnd_send_leave
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|// real variables:
end_comment
begin_comment
comment|// xid of current drag source
end_comment
begin_decl_stmt
DECL|variable|qt_xdnd_dragsource_xid
specifier|static
name|Atom
name|qt_xdnd_dragsource_xid
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
comment|// the types in this drop. 100 is no good, but at least it's big.
end_comment
begin_decl_stmt
DECL|variable|qt_xdnd_max_type
specifier|const
name|int
name|qt_xdnd_max_type
init|=
literal|100
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_xdnd_types
specifier|static
name|Atom
name|qt_xdnd_types
index|[
name|qt_xdnd_max_type
operator|+
literal|1
index|]
decl_stmt|;
end_decl_stmt
begin_comment
comment|// timer used when target wants "continuous" move messages (eg. scroll)
end_comment
begin_decl_stmt
DECL|variable|heartbeat
specifier|static
name|int
name|heartbeat
init|=
operator|-
literal|1
decl_stmt|;
end_decl_stmt
begin_comment
comment|// rectangle in which the answer will be the same
end_comment
begin_decl_stmt
DECL|variable|qt_xdnd_source_sameanswer
specifier|static
name|QRect
name|qt_xdnd_source_sameanswer
decl_stmt|;
end_decl_stmt
begin_comment
comment|// top-level window we sent position to last.
end_comment
begin_decl_stmt
DECL|variable|qt_xdnd_current_target
specifier|static
name|Window
name|qt_xdnd_current_target
decl_stmt|;
end_decl_stmt
begin_comment
comment|// window to send events to (always valid if qt_xdnd_current_target)
end_comment
begin_decl_stmt
DECL|variable|qt_xdnd_current_proxy_target
specifier|static
name|Window
name|qt_xdnd_current_proxy_target
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_xdnd_source_current_time
specifier|static
name|Time
name|qt_xdnd_source_current_time
decl_stmt|;
end_decl_stmt
begin_comment
comment|// widget we forwarded position to last, and local position
end_comment
begin_decl_stmt
DECL|variable|qt_xdnd_current_widget
specifier|static
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|qt_xdnd_current_widget
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_xdnd_current_position
specifier|static
name|QPoint
name|qt_xdnd_current_position
decl_stmt|;
end_decl_stmt
begin_comment
comment|// timestamp from the XdndPosition and XdndDrop
end_comment
begin_decl_stmt
DECL|variable|qt_xdnd_target_current_time
specifier|static
name|Time
name|qt_xdnd_target_current_time
decl_stmt|;
end_decl_stmt
begin_comment
comment|// screen number containing the pointer... -1 means default
end_comment
begin_decl_stmt
DECL|variable|qt_xdnd_current_screen
specifier|static
name|int
name|qt_xdnd_current_screen
init|=
operator|-
literal|1
decl_stmt|;
end_decl_stmt
begin_comment
comment|// state of dragging... true if dragging, false if not
end_comment
begin_decl_stmt
DECL|variable|qt_xdnd_dragging
name|bool
name|qt_xdnd_dragging
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|waiting_for_status
specifier|static
name|bool
name|waiting_for_status
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_comment
comment|// used to preset each new QDragMoveEvent
end_comment
begin_decl_stmt
DECL|variable|last_target_accepted_action
specifier|static
name|Qt
operator|::
name|DropAction
name|last_target_accepted_action
init|=
name|Qt
operator|::
name|IgnoreAction
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Shift/Ctrl handling, and final drop status
end_comment
begin_decl_stmt
DECL|variable|global_accepted_action
specifier|static
name|Qt
operator|::
name|DropAction
name|global_accepted_action
init|=
name|Qt
operator|::
name|CopyAction
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|possible_actions
specifier|static
name|Qt
operator|::
name|DropActions
name|possible_actions
init|=
name|Qt
operator|::
name|IgnoreAction
decl_stmt|;
end_decl_stmt
begin_comment
comment|// for embedding only
end_comment
begin_decl_stmt
DECL|variable|current_embedding_widget
specifier|static
name|QWidget
modifier|*
name|current_embedding_widget
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|last_enter_event
specifier|static
name|XEvent
name|last_enter_event
decl_stmt|;
end_decl_stmt
begin_comment
comment|// cursors
end_comment
begin_decl_stmt
DECL|variable|noDropCursor
specifier|static
name|QCursor
modifier|*
name|noDropCursor
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|moveCursor
specifier|static
name|QCursor
modifier|*
name|moveCursor
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|copyCursor
specifier|static
name|QCursor
modifier|*
name|copyCursor
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|linkCursor
specifier|static
name|QCursor
modifier|*
name|linkCursor
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|defaultPm
specifier|static
name|QPixmap
modifier|*
name|defaultPm
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|default_pm_hotx
specifier|static
specifier|const
name|int
name|default_pm_hotx
init|=
operator|-
literal|2
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|default_pm_hoty
specifier|static
specifier|const
name|int
name|default_pm_hoty
init|=
operator|-
literal|16
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|default_pm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|default_pm
index|[]
init|=
block|{
literal|"13 9 3 1"
block|,
literal|".      c None"
block|,
literal|"       c #000000"
block|,
literal|"X      c #FFFFFF"
block|,
literal|"X X X X X X X"
block|,
literal|" X X X X X X "
block|,
literal|"X ......... X"
block|,
literal|" X.........X "
block|,
literal|"X ......... X"
block|,
literal|" X.........X "
block|,
literal|"X ......... X"
block|,
literal|" X X X X X X "
block|,
literal|"X X X X X X X"
block|}
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QShapedPixmapWidget
class|class
name|QShapedPixmapWidget
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
DECL|function|QShapedPixmapWidget
name|QShapedPixmapWidget
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|w
argument_list|,
name|Qt
operator|::
name|Tool
operator||
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|X11BypassWindowManagerHint
operator||
name|Qt
operator|::
name|BypassGraphicsProxyWidget
argument_list|)
block|{
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11NetWmWindowTypeDND
argument_list|)
expr_stmt|;
block|}
DECL|function|setPixmap
name|void
name|setPixmap
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|)
block|{
name|QBitmap
name|mask
init|=
name|pm
operator|.
name|mask
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|mask
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|setMask
argument_list|(
name|mask
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clearMask
argument_list|()
expr_stmt|;
block|}
name|resize
argument_list|(
name|pm
operator|.
name|width
argument_list|()
argument_list|,
name|pm
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|pixmap
operator|=
name|pm
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
DECL|member|pm_hot
name|QPoint
name|pm_hot
decl_stmt|;
protected|protected:
DECL|member|pixmap
name|QPixmap
name|pixmap
decl_stmt|;
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_include
include|#
directive|include
file|"qdnd_x11.moc"
end_include
begin_struct
DECL|struct|XdndData
struct|struct
name|XdndData
block|{
DECL|member|deco
name|QShapedPixmapWidget
modifier|*
name|deco
decl_stmt|;
DECL|member|desktop_proxy
name|QWidget
modifier|*
name|desktop_proxy
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|xdnd_data
specifier|static
name|XdndData
name|xdnd_data
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QExtraWidget
class|class
name|QExtraWidget
super|:
specifier|public
name|QWidget
block|{
name|Q_DECLARE_PRIVATE
parameter_list|(
name|QWidget
parameter_list|)
specifier|public
private|:
specifier|inline
name|QWExtra
modifier|*
name|extraData
parameter_list|()
function_decl|;
specifier|inline
name|QTLWExtra
modifier|*
name|topData
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|extraData
specifier|inline
name|QWExtra
modifier|*
name|QExtraWidget
operator|::
name|extraData
parameter_list|()
block|{
return|return
name|d_func
argument_list|()
operator|->
name|extraData
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|topData
specifier|inline
name|QTLWExtra
modifier|*
name|QExtraWidget
operator|::
name|topData
parameter_list|()
block|{
return|return
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|xdndProxy
specifier|static
name|WId
name|xdndProxy
parameter_list|(
name|WId
name|w
parameter_list|)
block|{
name|Atom
name|type
init|=
name|XNone
decl_stmt|;
name|int
name|f
decl_stmt|;
name|unsigned
name|long
name|n
decl_stmt|,
name|a
decl_stmt|;
name|unsigned
name|char
modifier|*
name|retval
init|=
literal|0
decl_stmt|;
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|w
argument_list|,
name|ATOM
argument_list|(
name|XdndProxy
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|False
argument_list|,
name|XA_WINDOW
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|f
argument_list|,
operator|&
name|n
argument_list|,
operator|&
name|a
argument_list|,
operator|&
name|retval
argument_list|)
expr_stmt|;
name|WId
modifier|*
name|proxy_id_ptr
init|=
operator|(
name|WId
operator|*
operator|)
name|retval
decl_stmt|;
name|WId
name|proxy_id
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|XA_WINDOW
operator|&&
name|proxy_id_ptr
condition|)
block|{
name|proxy_id
operator|=
operator|*
name|proxy_id_ptr
expr_stmt|;
name|XFree
argument_list|(
name|proxy_id_ptr
argument_list|)
expr_stmt|;
name|proxy_id_ptr
operator|=
literal|0
expr_stmt|;
comment|// Already exists. Real?
name|X11
operator|->
name|ignoreBadwindow
argument_list|()
expr_stmt|;
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|proxy_id
argument_list|,
name|ATOM
argument_list|(
name|XdndProxy
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|False
argument_list|,
name|XA_WINDOW
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|f
argument_list|,
operator|&
name|n
argument_list|,
operator|&
name|a
argument_list|,
operator|&
name|retval
argument_list|)
expr_stmt|;
name|proxy_id_ptr
operator|=
operator|(
name|WId
operator|*
operator|)
name|retval
expr_stmt|;
if|if
condition|(
name|X11
operator|->
name|badwindow
argument_list|()
operator|||
name|type
operator|!=
name|XA_WINDOW
operator|||
operator|!
name|proxy_id_ptr
operator|||
operator|*
name|proxy_id_ptr
operator|!=
name|proxy_id
condition|)
comment|// Bogus - we will overwrite.
name|proxy_id
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|proxy_id_ptr
condition|)
name|XFree
argument_list|(
name|proxy_id_ptr
argument_list|)
expr_stmt|;
return|return
name|proxy_id
return|;
block|}
end_function
begin_function
DECL|function|xdndEnable
specifier|static
name|bool
name|xdndEnable
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|bool
name|on
parameter_list|)
block|{
name|DNDDEBUG
operator|<<
literal|"xdndEnable"
operator|<<
name|w
operator|<<
name|on
expr_stmt|;
if|if
condition|(
name|on
condition|)
block|{
name|QWidget
modifier|*
name|xdnd_widget
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
block|{
if|if
condition|(
name|xdnd_data
operator|.
name|desktop_proxy
condition|)
comment|// *WE* already have one.
return|return
literal|false
return|;
comment|// As per Xdnd4, use XdndProxy
name|XGrabServer
argument_list|(
name|X11
operator|->
name|display
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|WId
name|proxy_id
init|=
name|xdndProxy
argument_list|(
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|proxy_id
condition|)
block|{
name|xdnd_widget
operator|=
name|xdnd_data
operator|.
name|desktop_proxy
operator|=
operator|new
name|QWidget
expr_stmt|;
name|proxy_id
operator|=
name|xdnd_data
operator|.
name|desktop_proxy
operator|->
name|effectiveWinId
argument_list|()
expr_stmt|;
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|XdndProxy
argument_list|)
argument_list|,
name|XA_WINDOW
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|&
name|proxy_id
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|proxy_id
argument_list|,
name|ATOM
argument_list|(
name|XdndProxy
argument_list|)
argument_list|,
name|XA_WINDOW
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|&
name|proxy_id
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|XUngrabServer
argument_list|(
name|X11
operator|->
name|display
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xdnd_widget
operator|=
name|w
operator|->
name|window
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|xdnd_widget
condition|)
block|{
name|DNDDEBUG
operator|<<
literal|"setting XdndAware for"
operator|<<
name|xdnd_widget
operator|<<
name|xdnd_widget
operator|->
name|effectiveWinId
argument_list|()
expr_stmt|;
name|Atom
name|atm
init|=
operator|(
name|Atom
operator|)
name|xdnd_version
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|xdnd_widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|xdnd_widget
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|XdndAware
argument_list|)
argument_list|,
name|XA_ATOM
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|&
name|atm
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|(
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
block|{
name|XDeleteProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|w
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|XdndProxy
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|xdnd_data
operator|.
name|desktop_proxy
expr_stmt|;
name|xdnd_data
operator|.
name|desktop_proxy
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|DNDDEBUG
operator|<<
literal|"not deleting XDndAware"
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_function
begin_function
DECL|function|xdndAtomToString
name|QByteArray
name|QX11Data
operator|::
name|xdndAtomToString
parameter_list|(
name|Atom
name|a
parameter_list|)
block|{
if|if
condition|(
operator|!
name|a
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|a
operator|==
name|XA_STRING
operator|||
name|a
operator|==
name|ATOM
argument_list|(
name|UTF8_STRING
argument_list|)
condition|)
block|{
return|return
literal|"text/plain"
return|;
comment|// some Xdnd clients are dumb
block|}
name|char
modifier|*
name|atom
init|=
name|XGetAtomName
argument_list|(
name|display
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|QByteArray
name|result
init|=
name|atom
decl_stmt|;
name|XFree
argument_list|(
name|atom
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|xdndStringToAtom
name|Atom
name|QX11Data
operator|::
name|xdndStringToAtom
parameter_list|(
specifier|const
name|char
modifier|*
name|mimeType
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mimeType
operator|||
operator|!
operator|*
name|mimeType
condition|)
return|return
literal|0
return|;
return|return
name|XInternAtom
argument_list|(
name|display
argument_list|,
name|mimeType
argument_list|,
name|False
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//$$$
end_comment
begin_function
DECL|function|xdndMimeAtomToString
name|QString
name|QX11Data
operator|::
name|xdndMimeAtomToString
parameter_list|(
name|Atom
name|a
parameter_list|)
block|{
name|QString
name|atomName
decl_stmt|;
if|if
condition|(
name|a
condition|)
block|{
name|char
modifier|*
name|atom
init|=
name|XGetAtomName
argument_list|(
name|display
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|atomName
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|atom
argument_list|)
expr_stmt|;
name|XFree
argument_list|(
name|atom
argument_list|)
expr_stmt|;
block|}
return|return
name|atomName
return|;
block|}
end_function
begin_comment
comment|//$$$
end_comment
begin_function
DECL|function|xdndMimeStringToAtom
name|Atom
name|QX11Data
operator|::
name|xdndMimeStringToAtom
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|)
block|{
if|if
condition|(
name|mimeType
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|XInternAtom
argument_list|(
name|display
argument_list|,
name|mimeType
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|False
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//$$$ replace ccxdndAtomToString()
end_comment
begin_function
DECL|function|xdndMimeFormatsForAtom
name|QStringList
name|QX11Data
operator|::
name|xdndMimeFormatsForAtom
parameter_list|(
name|Atom
name|a
parameter_list|)
block|{
name|QStringList
name|formats
decl_stmt|;
if|if
condition|(
name|a
condition|)
block|{
name|QString
name|atomName
init|=
name|xdndMimeAtomToString
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|formats
operator|.
name|append
argument_list|(
name|atomName
argument_list|)
expr_stmt|;
comment|// special cases for string type
if|if
condition|(
name|a
operator|==
name|ATOM
argument_list|(
name|UTF8_STRING
argument_list|)
operator|||
name|a
operator|==
name|XA_STRING
operator|||
name|a
operator|==
name|ATOM
argument_list|(
name|TEXT
argument_list|)
operator|||
name|a
operator|==
name|ATOM
argument_list|(
name|COMPOUND_TEXT
argument_list|)
condition|)
name|formats
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
comment|// special cases for uris
if|if
condition|(
name|atomName
operator|==
name|QLatin1String
argument_list|(
literal|"text/x-moz-url"
argument_list|)
condition|)
name|formats
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/uri-list"
argument_list|)
argument_list|)
expr_stmt|;
comment|// special case for images
if|if
condition|(
name|a
operator|==
name|XA_PIXMAP
condition|)
name|formats
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"image/ppm"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|formats
return|;
block|}
end_function
begin_comment
comment|//$$$
end_comment
begin_function
DECL|function|xdndMimeDataForAtom
name|bool
name|QX11Data
operator|::
name|xdndMimeDataForAtom
parameter_list|(
name|Atom
name|a
parameter_list|,
name|QMimeData
modifier|*
name|mimeData
parameter_list|,
name|QByteArray
modifier|*
name|data
parameter_list|,
name|Atom
modifier|*
name|atomFormat
parameter_list|,
name|int
modifier|*
name|dataFormat
parameter_list|)
block|{
name|bool
name|ret
init|=
literal|false
decl_stmt|;
operator|*
name|atomFormat
operator|=
name|a
expr_stmt|;
operator|*
name|dataFormat
operator|=
literal|8
expr_stmt|;
name|QString
name|atomName
init|=
name|xdndMimeAtomToString
argument_list|(
name|a
argument_list|)
decl_stmt|;
if|if
condition|(
name|QInternalMimeData
operator|::
name|hasFormatHelper
argument_list|(
name|atomName
argument_list|,
name|mimeData
argument_list|)
condition|)
block|{
operator|*
name|data
operator|=
name|QInternalMimeData
operator|::
name|renderDataHelper
argument_list|(
name|atomName
argument_list|,
name|mimeData
argument_list|)
expr_stmt|;
if|if
condition|(
name|atomName
operator|==
name|QLatin1String
argument_list|(
literal|"application/x-color"
argument_list|)
condition|)
operator|*
name|dataFormat
operator|=
literal|16
expr_stmt|;
name|ret
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|a
operator|==
name|ATOM
argument_list|(
name|UTF8_STRING
argument_list|)
operator|||
name|a
operator|==
name|XA_STRING
operator|||
name|a
operator|==
name|ATOM
argument_list|(
name|TEXT
argument_list|)
operator|||
name|a
operator|==
name|ATOM
argument_list|(
name|COMPOUND_TEXT
argument_list|)
operator|)
operator|&&
name|QInternalMimeData
operator|::
name|hasFormatHelper
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|,
name|mimeData
argument_list|)
condition|)
block|{
if|if
condition|(
name|a
operator|==
name|ATOM
argument_list|(
name|UTF8_STRING
argument_list|)
condition|)
block|{
operator|*
name|data
operator|=
name|QInternalMimeData
operator|::
name|renderDataHelper
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|,
name|mimeData
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|a
operator|==
name|XA_STRING
condition|)
block|{
operator|*
name|data
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|QInternalMimeData
operator|::
name|renderDataHelper
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|,
name|mimeData
argument_list|)
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
name|ret
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|a
operator|==
name|ATOM
argument_list|(
name|TEXT
argument_list|)
operator|||
name|a
operator|==
name|ATOM
argument_list|(
name|COMPOUND_TEXT
argument_list|)
condition|)
block|{
comment|// the ICCCM states that TEXT and COMPOUND_TEXT are in the
comment|// encoding of choice, so we choose the encoding of the locale
name|QByteArray
name|strData
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|QInternalMimeData
operator|::
name|renderDataHelper
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|,
name|mimeData
argument_list|)
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
decl_stmt|;
name|char
modifier|*
name|list
index|[]
init|=
block|{
name|strData
operator|.
name|data
argument_list|()
block|,
name|NULL
block|}
decl_stmt|;
name|XICCEncodingStyle
name|style
init|=
operator|(
name|a
operator|==
name|ATOM
argument_list|(
name|COMPOUND_TEXT
argument_list|)
operator|)
condition|?
name|XCompoundTextStyle
else|:
name|XStdICCTextStyle
decl_stmt|;
name|XTextProperty
name|textprop
decl_stmt|;
if|if
condition|(
name|list
index|[
literal|0
index|]
operator|!=
name|NULL
operator|&&
name|XmbTextListToTextProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|list
argument_list|,
literal|1
argument_list|,
name|style
argument_list|,
operator|&
name|textprop
argument_list|)
operator|==
name|Success
condition|)
block|{
operator|*
name|atomFormat
operator|=
name|textprop
operator|.
name|encoding
expr_stmt|;
operator|*
name|dataFormat
operator|=
name|textprop
operator|.
name|format
expr_stmt|;
operator|*
name|data
operator|=
name|QByteArray
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|textprop
operator|.
name|value
argument_list|,
name|textprop
operator|.
name|nitems
operator|*
name|textprop
operator|.
name|format
operator|/
literal|8
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|true
expr_stmt|;
name|DEBUG
argument_list|(
literal|"    textprop type %lx\n"
literal|"    textprop name '%s'\n"
literal|"    format %d\n"
literal|"    %ld items\n"
literal|"    %d bytes\n"
argument_list|,
name|textprop
operator|.
name|encoding
argument_list|,
name|X11
operator|->
name|xdndMimeAtomToString
argument_list|(
name|textprop
operator|.
name|encoding
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|textprop
operator|.
name|format
argument_list|,
name|textprop
operator|.
name|nitems
argument_list|,
name|data
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|XFree
argument_list|(
name|textprop
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|atomName
operator|==
name|QLatin1String
argument_list|(
literal|"text/x-moz-url"
argument_list|)
operator|&&
name|QInternalMimeData
operator|::
name|hasFormatHelper
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/uri-list"
argument_list|)
argument_list|,
name|mimeData
argument_list|)
condition|)
block|{
name|QByteArray
name|uri
init|=
name|QInternalMimeData
operator|::
name|renderDataHelper
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/uri-list"
argument_list|)
argument_list|,
name|mimeData
argument_list|)
operator|.
name|split
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
name|QString
name|mozUri
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|uri
argument_list|,
name|uri
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|mozUri
operator|+=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
operator|*
name|data
operator|=
name|QByteArray
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|mozUri
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|mozUri
operator|.
name|length
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|a
operator|==
name|XA_PIXMAP
operator|||
name|a
operator|==
name|XA_BITMAP
operator|)
operator|&&
name|mimeData
operator|->
name|hasImage
argument_list|()
condition|)
block|{
name|QPixmap
name|pm
init|=
name|qvariant_cast
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
name|mimeData
operator|->
name|imageData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
name|XA_BITMAP
operator|&&
name|pm
operator|.
name|depth
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|QImage
name|img
init|=
name|pm
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|img
operator|=
name|img
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_MonoLSB
argument_list|)
expr_stmt|;
name|pm
operator|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|img
argument_list|)
expr_stmt|;
block|}
name|QDragManager
modifier|*
name|dm
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
if|if
condition|(
name|dm
condition|)
block|{
name|Pixmap
name|handle
init|=
name|pm
operator|.
name|handle
argument_list|()
decl_stmt|;
operator|*
name|data
operator|=
name|QByteArray
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|handle
argument_list|,
sizeof|sizeof
argument_list|(
name|Pixmap
argument_list|)
argument_list|)
expr_stmt|;
name|dm
operator|->
name|xdndMimeTransferedPixmap
index|[
name|dm
operator|->
name|xdndMimeTransferedPixmapIndex
index|]
operator|=
name|pm
expr_stmt|;
name|dm
operator|->
name|xdndMimeTransferedPixmapIndex
operator|=
operator|(
name|dm
operator|->
name|xdndMimeTransferedPixmapIndex
operator|+
literal|1
operator|)
operator|%
literal|2
expr_stmt|;
name|ret
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|DEBUG
argument_list|(
literal|"QClipboard: xdndMimeDataForAtom(): converting to type '%s' is not supported"
argument_list|,
name|qPrintable
argument_list|(
name|atomName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
operator|&&
name|data
operator|!=
literal|0
return|;
block|}
end_function
begin_comment
comment|//$$$
end_comment
begin_function
DECL|function|xdndMimeAtomsForFormat
name|QList
argument_list|<
name|Atom
argument_list|>
name|QX11Data
operator|::
name|xdndMimeAtomsForFormat
parameter_list|(
specifier|const
name|QString
modifier|&
name|format
parameter_list|)
block|{
name|QList
argument_list|<
name|Atom
argument_list|>
name|atoms
decl_stmt|;
name|atoms
operator|.
name|append
argument_list|(
name|xdndMimeStringToAtom
argument_list|(
name|format
argument_list|)
argument_list|)
expr_stmt|;
comment|// special cases for strings
if|if
condition|(
name|format
operator|==
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
condition|)
block|{
name|atoms
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|UTF8_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|atoms
operator|.
name|append
argument_list|(
name|XA_STRING
argument_list|)
expr_stmt|;
name|atoms
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|TEXT
argument_list|)
argument_list|)
expr_stmt|;
name|atoms
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|COMPOUND_TEXT
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// special cases for uris
if|if
condition|(
name|format
operator|==
name|QLatin1String
argument_list|(
literal|"text/uri-list"
argument_list|)
condition|)
block|{
name|atoms
operator|.
name|append
argument_list|(
name|xdndMimeStringToAtom
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/x-moz-url"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//special cases for images
if|if
condition|(
name|format
operator|==
name|QLatin1String
argument_list|(
literal|"image/ppm"
argument_list|)
condition|)
name|atoms
operator|.
name|append
argument_list|(
name|XA_PIXMAP
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|==
name|QLatin1String
argument_list|(
literal|"image/pbm"
argument_list|)
condition|)
name|atoms
operator|.
name|append
argument_list|(
name|XA_BITMAP
argument_list|)
expr_stmt|;
return|return
name|atoms
return|;
block|}
end_function
begin_comment
comment|//$$$
end_comment
begin_function
DECL|function|xdndMimeConvertToFormat
name|QVariant
name|QX11Data
operator|::
name|xdndMimeConvertToFormat
parameter_list|(
name|Atom
name|a
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|,
specifier|const
name|QString
modifier|&
name|format
parameter_list|,
name|QVariant
operator|::
name|Type
name|requestedType
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|encoding
parameter_list|)
block|{
name|QString
name|atomName
init|=
name|xdndMimeAtomToString
argument_list|(
name|a
argument_list|)
decl_stmt|;
if|if
condition|(
name|atomName
operator|==
name|format
condition|)
return|return
name|data
return|;
if|if
condition|(
operator|!
name|encoding
operator|.
name|isEmpty
argument_list|()
operator|&&
name|atomName
operator|==
name|format
operator|+
name|QLatin1String
argument_list|(
literal|";charset="
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
name|encoding
argument_list|)
condition|)
block|{
if|if
condition|(
name|requestedType
operator|==
name|QVariant
operator|::
name|String
condition|)
block|{
name|QTextCodec
modifier|*
name|codec
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
name|encoding
argument_list|)
decl_stmt|;
if|if
condition|(
name|codec
condition|)
return|return
name|codec
operator|->
name|toUnicode
argument_list|(
name|data
argument_list|)
return|;
block|}
return|return
name|data
return|;
block|}
comment|// special cases for string types
if|if
condition|(
name|format
operator|==
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
condition|)
block|{
if|if
condition|(
name|a
operator|==
name|ATOM
argument_list|(
name|UTF8_STRING
argument_list|)
condition|)
return|return
name|QString
operator|::
name|fromUtf8
argument_list|(
name|data
argument_list|)
return|;
if|if
condition|(
name|a
operator|==
name|XA_STRING
condition|)
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
name|data
argument_list|)
return|;
if|if
condition|(
name|a
operator|==
name|ATOM
argument_list|(
name|TEXT
argument_list|)
operator|||
name|a
operator|==
name|ATOM
argument_list|(
name|COMPOUND_TEXT
argument_list|)
condition|)
comment|// #### might be wrong for COMPUND_TEXT
return|return
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
comment|// special case for uri types
if|if
condition|(
name|format
operator|==
name|QLatin1String
argument_list|(
literal|"text/uri-list"
argument_list|)
condition|)
block|{
if|if
condition|(
name|atomName
operator|==
name|QLatin1String
argument_list|(
literal|"text/x-moz-url"
argument_list|)
condition|)
block|{
comment|// we expect this as utf16<url><space><title>
comment|// the first part is a url that should only contain ascci char
comment|// so it should be safe to check that the second char is 0
comment|// to verify that it is utf16
if|if
condition|(
name|data
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|data
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|==
literal|0
condition|)
return|return
name|QString
operator|::
name|fromRawData
argument_list|(
operator|(
specifier|const
name|QChar
operator|*
operator|)
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
operator|.
name|toLatin1
argument_list|()
return|;
block|}
block|}
comment|// special cas for images
if|if
condition|(
name|format
operator|==
name|QLatin1String
argument_list|(
literal|"image/ppm"
argument_list|)
condition|)
block|{
if|if
condition|(
name|a
operator|==
name|XA_PIXMAP
operator|&&
name|data
operator|.
name|size
argument_list|()
operator|==
sizeof|sizeof
argument_list|(
name|Pixmap
argument_list|)
condition|)
block|{
name|Pixmap
name|xpm
init|=
operator|*
operator|(
operator|(
name|Pixmap
operator|*
operator|)
name|data
operator|.
name|data
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|xpm
condition|)
return|return
name|QByteArray
argument_list|()
return|;
name|QPixmap
name|qpm
init|=
name|QPixmap
operator|::
name|fromX11Pixmap
argument_list|(
name|xpm
argument_list|)
decl_stmt|;
name|QImageWriter
name|imageWriter
decl_stmt|;
name|imageWriter
operator|.
name|setFormat
argument_list|(
literal|"PPMRAW"
argument_list|)
expr_stmt|;
name|QImage
name|imageToWrite
init|=
name|qpm
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|QBuffer
name|buf
decl_stmt|;
name|buf
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|imageWriter
operator|.
name|setDevice
argument_list|(
operator|&
name|buf
argument_list|)
expr_stmt|;
name|imageWriter
operator|.
name|write
argument_list|(
name|imageToWrite
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|buffer
argument_list|()
return|;
block|}
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//$$$ middle of xdndObtainData
end_comment
begin_function
DECL|function|xdndMimeAtomForFormat
name|Atom
name|QX11Data
operator|::
name|xdndMimeAtomForFormat
parameter_list|(
specifier|const
name|QString
modifier|&
name|format
parameter_list|,
name|QVariant
operator|::
name|Type
name|requestedType
parameter_list|,
specifier|const
name|QList
argument_list|<
name|Atom
argument_list|>
modifier|&
name|atoms
parameter_list|,
name|QByteArray
modifier|*
name|encoding
parameter_list|)
block|{
name|encoding
operator|->
name|clear
argument_list|()
expr_stmt|;
comment|// find matches for string types
if|if
condition|(
name|format
operator|==
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
condition|)
block|{
if|if
condition|(
name|atoms
operator|.
name|contains
argument_list|(
name|ATOM
argument_list|(
name|UTF8_STRING
argument_list|)
argument_list|)
condition|)
return|return
name|ATOM
argument_list|(
name|UTF8_STRING
argument_list|)
return|;
if|if
condition|(
name|atoms
operator|.
name|contains
argument_list|(
name|ATOM
argument_list|(
name|COMPOUND_TEXT
argument_list|)
argument_list|)
condition|)
return|return
name|ATOM
argument_list|(
name|COMPOUND_TEXT
argument_list|)
return|;
if|if
condition|(
name|atoms
operator|.
name|contains
argument_list|(
name|ATOM
argument_list|(
name|TEXT
argument_list|)
argument_list|)
condition|)
return|return
name|ATOM
argument_list|(
name|TEXT
argument_list|)
return|;
if|if
condition|(
name|atoms
operator|.
name|contains
argument_list|(
name|XA_STRING
argument_list|)
condition|)
return|return
name|XA_STRING
return|;
block|}
comment|// find matches for uri types
if|if
condition|(
name|format
operator|==
name|QLatin1String
argument_list|(
literal|"text/uri-list"
argument_list|)
condition|)
block|{
name|Atom
name|a
init|=
name|xdndMimeStringToAtom
argument_list|(
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|&&
name|atoms
operator|.
name|contains
argument_list|(
name|a
argument_list|)
condition|)
return|return
name|a
return|;
name|a
operator|=
name|xdndMimeStringToAtom
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/x-moz-url"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|&&
name|atoms
operator|.
name|contains
argument_list|(
name|a
argument_list|)
condition|)
return|return
name|a
return|;
block|}
comment|// find match for image
if|if
condition|(
name|format
operator|==
name|QLatin1String
argument_list|(
literal|"image/ppm"
argument_list|)
condition|)
block|{
if|if
condition|(
name|atoms
operator|.
name|contains
argument_list|(
name|XA_PIXMAP
argument_list|)
condition|)
return|return
name|XA_PIXMAP
return|;
block|}
comment|// for string/text requests try to use a format with a well-defined charset
comment|// first to avoid encoding problems
if|if
condition|(
name|requestedType
operator|==
name|QVariant
operator|::
name|String
operator|&&
name|format
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/"
argument_list|)
argument_list|)
operator|&&
operator|!
name|format
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"charset="
argument_list|)
argument_list|)
condition|)
block|{
name|QString
name|formatWithCharset
init|=
name|format
decl_stmt|;
name|formatWithCharset
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|";charset=utf-8"
argument_list|)
argument_list|)
expr_stmt|;
name|Atom
name|a
init|=
name|xdndMimeStringToAtom
argument_list|(
name|formatWithCharset
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|&&
name|atoms
operator|.
name|contains
argument_list|(
name|a
argument_list|)
condition|)
block|{
operator|*
name|encoding
operator|=
literal|"utf-8"
expr_stmt|;
return|return
name|a
return|;
block|}
block|}
name|Atom
name|a
init|=
name|xdndMimeStringToAtom
argument_list|(
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|&&
name|atoms
operator|.
name|contains
argument_list|(
name|a
argument_list|)
condition|)
return|return
name|a
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|xdndSetup
name|void
name|QX11Data
operator|::
name|xdndSetup
parameter_list|()
block|{
name|QCursorData
operator|::
name|initialize
argument_list|()
expr_stmt|;
name|qAddPostRoutine
argument_list|(
name|qt_xdnd_cleanup
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_xdnd_cleanup
name|void
name|qt_xdnd_cleanup
parameter_list|()
block|{
operator|delete
name|noDropCursor
expr_stmt|;
name|noDropCursor
operator|=
literal|0
expr_stmt|;
operator|delete
name|copyCursor
expr_stmt|;
name|copyCursor
operator|=
literal|0
expr_stmt|;
operator|delete
name|moveCursor
expr_stmt|;
name|moveCursor
operator|=
literal|0
expr_stmt|;
operator|delete
name|linkCursor
expr_stmt|;
name|linkCursor
operator|=
literal|0
expr_stmt|;
operator|delete
name|defaultPm
expr_stmt|;
name|defaultPm
operator|=
literal|0
expr_stmt|;
operator|delete
name|xdnd_data
operator|.
name|desktop_proxy
expr_stmt|;
name|xdnd_data
operator|.
name|desktop_proxy
operator|=
literal|0
expr_stmt|;
operator|delete
name|xdnd_data
operator|.
name|deco
expr_stmt|;
name|xdnd_data
operator|.
name|deco
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|find_child
specifier|static
name|QWidget
modifier|*
name|find_child
parameter_list|(
name|QWidget
modifier|*
name|tlw
parameter_list|,
name|QPoint
modifier|&
name|p
parameter_list|)
block|{
name|QWidget
modifier|*
name|widget
init|=
name|tlw
decl_stmt|;
name|p
operator|=
name|widget
operator|->
name|mapFromGlobal
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|bool
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|QExtraWidget
operator|*
operator|)
name|widget
operator|)
operator|->
name|extraData
argument_list|()
operator|&&
operator|(
operator|(
name|QExtraWidget
operator|*
operator|)
name|widget
operator|)
operator|->
name|extraData
argument_list|()
operator|->
name|xDndProxy
operator|!=
literal|0
condition|)
break|break;
comment|// stop searching for widgets under the mouse cursor if found widget is a proxy.
name|QObjectList
name|children
init|=
name|widget
operator|->
name|children
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|children
operator|.
name|size
argument_list|()
init|;
name|i
operator|>
literal|0
condition|;
control|)
block|{
operator|--
name|i
expr_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
continue|continue;
if|if
condition|(
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_TransparentForMouseEvents
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|w
operator|->
name|isVisible
argument_list|()
operator|&&
name|w
operator|->
name|geometry
argument_list|()
operator|.
name|contains
argument_list|(
name|p
argument_list|)
operator|&&
operator|!
name|w
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|widget
operator|=
name|w
expr_stmt|;
name|done
operator|=
literal|false
expr_stmt|;
name|p
operator|=
name|widget
operator|->
name|mapFromParent
argument_list|(
name|p
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|widget
return|;
block|}
end_function
begin_function
DECL|function|checkEmbedded
specifier|static
name|bool
name|checkEmbedded
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|XEvent
modifier|*
name|xe
parameter_list|)
block|{
if|if
condition|(
operator|!
name|w
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|current_embedding_widget
operator|!=
literal|0
operator|&&
name|current_embedding_widget
operator|!=
name|w
condition|)
block|{
name|qt_xdnd_current_target
operator|=
operator|(
operator|(
name|QExtraWidget
operator|*
operator|)
name|current_embedding_widget
operator|)
operator|->
name|extraData
argument_list|()
operator|->
name|xDndProxy
expr_stmt|;
name|qt_xdnd_current_proxy_target
operator|=
name|qt_xdnd_current_target
expr_stmt|;
name|qt_xdnd_send_leave
argument_list|()
expr_stmt|;
name|qt_xdnd_current_target
operator|=
literal|0
expr_stmt|;
name|qt_xdnd_current_proxy_target
operator|=
literal|0
expr_stmt|;
name|current_embedding_widget
operator|=
literal|0
expr_stmt|;
block|}
name|QWExtra
modifier|*
name|extra
init|=
operator|(
operator|(
name|QExtraWidget
operator|*
operator|)
name|w
operator|)
operator|->
name|extraData
argument_list|()
decl_stmt|;
if|if
condition|(
name|extra
operator|&&
name|extra
operator|->
name|xDndProxy
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|current_embedding_widget
operator|!=
name|w
condition|)
block|{
name|last_enter_event
operator|.
name|xany
operator|.
name|window
operator|=
name|extra
operator|->
name|xDndProxy
expr_stmt|;
name|XSendEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|extra
operator|->
name|xDndProxy
argument_list|,
name|False
argument_list|,
name|NoEventMask
argument_list|,
operator|&
name|last_enter_event
argument_list|)
expr_stmt|;
name|current_embedding_widget
operator|=
name|w
expr_stmt|;
block|}
operator|(
operator|(
name|XEvent
operator|*
operator|)
name|xe
operator|)
operator|->
name|xany
operator|.
name|window
operator|=
name|extra
operator|->
name|xDndProxy
expr_stmt|;
name|XSendEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|extra
operator|->
name|xDndProxy
argument_list|,
name|False
argument_list|,
name|NoEventMask
argument_list|,
operator|(
name|XEvent
operator|*
operator|)
name|xe
argument_list|)
expr_stmt|;
if|if
condition|(
name|qt_xdnd_current_widget
operator|!=
name|w
condition|)
block|{
name|qt_xdnd_current_widget
operator|=
name|w
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
name|current_embedding_widget
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|xdndHandleEnter
name|void
name|QX11Data
operator|::
name|xdndHandleEnter
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
specifier|const
name|XEvent
modifier|*
name|xe
parameter_list|,
name|bool
comment|/*passive*/
parameter_list|)
block|{
name|motifdnd_active
operator|=
literal|false
expr_stmt|;
name|last_enter_event
operator|.
name|xclient
operator|=
name|xe
operator|->
name|xclient
expr_stmt|;
specifier|const
name|long
modifier|*
name|l
init|=
name|xe
operator|->
name|xclient
operator|.
name|data
operator|.
name|l
decl_stmt|;
name|int
name|version
init|=
call|(
name|int
call|)
argument_list|(
operator|(
call|(
name|unsigned
name|long
call|)
argument_list|(
name|l
index|[
literal|1
index|]
argument_list|)
operator|)
operator|>>
literal|24
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|>
name|xdnd_version
condition|)
return|return;
name|qt_xdnd_dragsource_xid
operator|=
name|l
index|[
literal|0
index|]
expr_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|l
index|[
literal|1
index|]
operator|&
literal|1
condition|)
block|{
comment|// get the types from XdndTypeList
name|Atom
name|type
init|=
name|XNone
decl_stmt|;
name|int
name|f
decl_stmt|;
name|unsigned
name|long
name|n
decl_stmt|,
name|a
decl_stmt|;
name|unsigned
name|char
modifier|*
name|retval
init|=
literal|0
decl_stmt|;
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|qt_xdnd_dragsource_xid
argument_list|,
name|ATOM
argument_list|(
name|XdndTypelist
argument_list|)
argument_list|,
literal|0
argument_list|,
name|qt_xdnd_max_type
argument_list|,
name|False
argument_list|,
name|XA_ATOM
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|f
argument_list|,
operator|&
name|n
argument_list|,
operator|&
name|a
argument_list|,
operator|&
name|retval
argument_list|)
expr_stmt|;
if|if
condition|(
name|retval
condition|)
block|{
name|Atom
modifier|*
name|data
init|=
operator|(
name|Atom
operator|*
operator|)
name|retval
decl_stmt|;
for|for
control|(
init|;
name|j
operator|<
name|qt_xdnd_max_type
operator|&&
name|j
operator|<
operator|(
name|int
operator|)
name|n
condition|;
name|j
operator|++
control|)
block|{
name|qt_xdnd_types
index|[
name|j
index|]
operator|=
name|data
index|[
name|j
index|]
expr_stmt|;
block|}
name|XFree
argument_list|(
operator|(
name|uchar
operator|*
operator|)
name|data
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// get the types from the message
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|2
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|qt_xdnd_types
index|[
name|j
operator|++
index|]
operator|=
name|l
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
name|qt_xdnd_types
index|[
name|j
index|]
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handle_xdnd_position
specifier|static
name|void
name|handle_xdnd_position
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|XEvent
modifier|*
name|xe
parameter_list|,
name|bool
name|passive
parameter_list|)
block|{
specifier|const
name|unsigned
name|long
modifier|*
name|l
init|=
operator|(
specifier|const
name|unsigned
name|long
operator|*
operator|)
name|xe
operator|->
name|xclient
operator|.
name|data
operator|.
name|l
decl_stmt|;
name|QPoint
name|p
argument_list|(
operator|(
name|l
index|[
literal|2
index|]
operator|&
literal|0xffff0000
operator|)
operator|>>
literal|16
argument_list|,
name|l
index|[
literal|2
index|]
operator|&
literal|0x0000ffff
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|c
init|=
name|find_child
argument_list|(
name|w
argument_list|,
name|p
argument_list|)
decl_stmt|;
comment|// changes p to to c-local coordinates
if|if
condition|(
operator|!
name|passive
operator|&&
name|checkEmbedded
argument_list|(
name|c
argument_list|,
name|xe
argument_list|)
condition|)
return|return;
if|if
condition|(
operator|!
name|c
operator|||
operator|(
operator|!
name|c
operator|->
name|acceptDrops
argument_list|()
operator|&&
operator|(
name|c
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
operator|)
condition|)
return|return;
if|if
condition|(
name|l
index|[
literal|0
index|]
operator|!=
name|qt_xdnd_dragsource_xid
condition|)
block|{
name|DEBUG
argument_list|(
literal|"xdnd drag position from unexpected source (%08lx not %08lx)"
argument_list|,
name|l
index|[
literal|0
index|]
argument_list|,
name|qt_xdnd_dragsource_xid
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// timestamp from the source
if|if
condition|(
name|l
index|[
literal|3
index|]
operator|!=
literal|0
condition|)
block|{
comment|// Some X server/client combination swallow the first 32 bit and
comment|// interpret a set bit 31 as negative sign.
name|qt_xdnd_target_current_time
operator|=
name|X11
operator|->
name|userTime
operator|=
operator|(
operator|(
sizeof|sizeof
argument_list|(
name|Time
argument_list|)
operator|==
literal|8
operator|&&
name|xe
operator|->
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|3
index|]
operator|<
literal|0
operator|)
condition|?
name|uint
argument_list|(
name|l
index|[
literal|3
index|]
argument_list|)
else|:
name|l
index|[
literal|3
index|]
operator|)
expr_stmt|;
block|}
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|QMimeData
modifier|*
name|dropData
init|=
name|manager
operator|->
name|object
condition|?
name|manager
operator|->
name|dragPrivate
argument_list|()
operator|->
name|data
else|:
name|manager
operator|->
name|dropData
decl_stmt|;
name|XClientMessageEvent
name|response
decl_stmt|;
name|response
operator|.
name|type
operator|=
name|ClientMessage
expr_stmt|;
name|response
operator|.
name|window
operator|=
name|qt_xdnd_dragsource_xid
expr_stmt|;
name|response
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|response
operator|.
name|message_type
operator|=
name|ATOM
argument_list|(
name|XdndStatus
argument_list|)
expr_stmt|;
name|response
operator|.
name|data
operator|.
name|l
index|[
literal|0
index|]
operator|=
name|w
operator|->
name|effectiveWinId
argument_list|()
expr_stmt|;
name|response
operator|.
name|data
operator|.
name|l
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
comment|// flags
name|response
operator|.
name|data
operator|.
name|l
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
comment|// x, y
name|response
operator|.
name|data
operator|.
name|l
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
comment|// w, h
name|response
operator|.
name|data
operator|.
name|l
index|[
literal|4
index|]
operator|=
literal|0
expr_stmt|;
comment|// action
if|if
condition|(
operator|!
name|passive
condition|)
block|{
comment|// otherwise just reject
while|while
condition|(
name|c
operator|&&
operator|!
name|c
operator|->
name|acceptDrops
argument_list|()
operator|&&
operator|!
name|c
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|p
operator|=
name|c
operator|->
name|mapToParent
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|c
operator|=
name|c
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
name|QWidget
modifier|*
name|target_widget
init|=
name|c
operator|&&
name|c
operator|->
name|acceptDrops
argument_list|()
condition|?
name|c
else|:
literal|0
decl_stmt|;
name|QRect
name|answerRect
argument_list|(
name|c
operator|->
name|mapToGlobal
argument_list|(
name|p
argument_list|)
argument_list|,
name|QSize
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|manager
operator|->
name|object
condition|)
block|{
name|possible_actions
operator|=
name|manager
operator|->
name|dragPrivate
argument_list|()
operator|->
name|possible_actions
expr_stmt|;
block|}
else|else
block|{
name|possible_actions
operator|=
name|Qt
operator|::
name|DropActions
argument_list|(
name|xdndaction_to_qtaction
argument_list|(
name|l
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|//             possible_actions |= Qt::CopyAction;
block|}
name|QDragMoveEvent
name|me
argument_list|(
name|p
argument_list|,
name|possible_actions
argument_list|,
name|dropData
argument_list|,
name|QApplication
operator|::
name|mouseButtons
argument_list|()
argument_list|,
name|QApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|DropAction
name|accepted_action
init|=
name|Qt
operator|::
name|IgnoreAction
decl_stmt|;
if|if
condition|(
name|target_widget
operator|!=
name|qt_xdnd_current_widget
condition|)
block|{
if|if
condition|(
name|qt_xdnd_current_widget
condition|)
block|{
name|QDragLeaveEvent
name|e
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|qt_xdnd_current_widget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|qt_xdnd_current_widget
operator|!=
name|target_widget
condition|)
block|{
name|qt_xdnd_current_widget
operator|=
name|target_widget
expr_stmt|;
block|}
if|if
condition|(
name|target_widget
condition|)
block|{
name|qt_xdnd_current_position
operator|=
name|p
expr_stmt|;
name|last_target_accepted_action
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
name|QDragEnterEvent
name|de
argument_list|(
name|p
argument_list|,
name|possible_actions
argument_list|,
name|dropData
argument_list|,
name|QApplication
operator|::
name|mouseButtons
argument_list|()
argument_list|,
name|QApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|target_widget
argument_list|,
operator|&
name|de
argument_list|)
expr_stmt|;
if|if
condition|(
name|de
operator|.
name|isAccepted
argument_list|()
operator|&&
name|de
operator|.
name|dropAction
argument_list|()
operator|!=
name|Qt
operator|::
name|IgnoreAction
condition|)
name|last_target_accepted_action
operator|=
name|de
operator|.
name|dropAction
argument_list|()
expr_stmt|;
block|}
block|}
name|DEBUG
argument_list|()
operator|<<
literal|"qt_handle_xdnd_position action="
operator|<<
name|X11
operator|->
name|xdndAtomToString
argument_list|(
name|l
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|target_widget
condition|)
block|{
name|answerRect
operator|=
name|QRect
argument_list|(
name|p
argument_list|,
name|QSize
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qt_xdnd_current_widget
operator|=
name|c
expr_stmt|;
name|qt_xdnd_current_position
operator|=
name|p
expr_stmt|;
if|if
condition|(
name|last_target_accepted_action
operator|!=
name|Qt
operator|::
name|IgnoreAction
condition|)
block|{
name|me
operator|.
name|setDropAction
argument_list|(
name|last_target_accepted_action
argument_list|)
expr_stmt|;
name|me
operator|.
name|accept
argument_list|()
expr_stmt|;
block|}
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|c
argument_list|,
operator|&
name|me
argument_list|)
expr_stmt|;
if|if
condition|(
name|me
operator|.
name|isAccepted
argument_list|()
condition|)
block|{
name|response
operator|.
name|data
operator|.
name|l
index|[
literal|1
index|]
operator|=
literal|1
expr_stmt|;
comment|// yes
name|accepted_action
operator|=
name|me
operator|.
name|dropAction
argument_list|()
expr_stmt|;
name|last_target_accepted_action
operator|=
name|accepted_action
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|data
operator|.
name|l
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|last_target_accepted_action
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
block|}
name|answerRect
operator|=
name|me
operator|.
name|answerRect
argument_list|()
operator|.
name|intersected
argument_list|(
name|c
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|answerRect
operator|=
name|QRect
argument_list|(
name|c
operator|->
name|mapToGlobal
argument_list|(
name|answerRect
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|,
name|answerRect
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|answerRect
operator|.
name|left
argument_list|()
operator|<
literal|0
condition|)
name|answerRect
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|answerRect
operator|.
name|right
argument_list|()
operator|>
literal|4096
condition|)
name|answerRect
operator|.
name|setRight
argument_list|(
literal|4096
argument_list|)
expr_stmt|;
if|if
condition|(
name|answerRect
operator|.
name|top
argument_list|()
operator|<
literal|0
condition|)
name|answerRect
operator|.
name|setTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|answerRect
operator|.
name|bottom
argument_list|()
operator|>
literal|4096
condition|)
name|answerRect
operator|.
name|setBottom
argument_list|(
literal|4096
argument_list|)
expr_stmt|;
if|if
condition|(
name|answerRect
operator|.
name|width
argument_list|()
operator|<
literal|0
condition|)
name|answerRect
operator|.
name|setWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|answerRect
operator|.
name|height
argument_list|()
operator|<
literal|0
condition|)
name|answerRect
operator|.
name|setHeight
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|response
operator|.
name|data
operator|.
name|l
index|[
literal|2
index|]
operator|=
operator|(
name|answerRect
operator|.
name|x
argument_list|()
operator|<<
literal|16
operator|)
operator|+
name|answerRect
operator|.
name|y
argument_list|()
expr_stmt|;
name|response
operator|.
name|data
operator|.
name|l
index|[
literal|3
index|]
operator|=
operator|(
name|answerRect
operator|.
name|width
argument_list|()
operator|<<
literal|16
operator|)
operator|+
name|answerRect
operator|.
name|height
argument_list|()
expr_stmt|;
name|response
operator|.
name|data
operator|.
name|l
index|[
literal|4
index|]
operator|=
name|qtaction_to_xdndaction
argument_list|(
name|accepted_action
argument_list|)
expr_stmt|;
block|}
comment|// reset
name|qt_xdnd_target_current_time
operator|=
name|CurrentTime
expr_stmt|;
name|QWidget
modifier|*
name|source
init|=
name|QWidget
operator|::
name|find
argument_list|(
name|qt_xdnd_dragsource_xid
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|&&
operator|(
name|source
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
operator|&&
operator|!
name|source
operator|->
name|acceptDrops
argument_list|()
condition|)
name|source
operator|=
literal|0
expr_stmt|;
name|DEBUG
argument_list|()
operator|<<
literal|"sending XdndStatus"
expr_stmt|;
if|if
condition|(
name|source
condition|)
name|handle_xdnd_status
argument_list|(
name|source
argument_list|,
operator|(
specifier|const
name|XEvent
operator|*
operator|)
operator|&
name|response
argument_list|,
name|passive
argument_list|)
expr_stmt|;
else|else
name|XSendEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|qt_xdnd_dragsource_xid
argument_list|,
name|False
argument_list|,
name|NoEventMask
argument_list|,
operator|(
name|XEvent
operator|*
operator|)
operator|&
name|response
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|xdnd_position_scanner
specifier|static
name|Bool
name|xdnd_position_scanner
parameter_list|(
name|Display
modifier|*
parameter_list|,
name|XEvent
modifier|*
name|event
parameter_list|,
name|XPointer
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
operator|!=
name|ClientMessage
condition|)
return|return
literal|false
return|;
name|XClientMessageEvent
modifier|*
name|ev
init|=
operator|&
name|event
operator|->
name|xclient
decl_stmt|;
if|if
condition|(
name|ev
operator|->
name|message_type
operator|==
name|ATOM
argument_list|(
name|XdndPosition
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|xdndHandlePosition
name|void
name|QX11Data
operator|::
name|xdndHandlePosition
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|XEvent
modifier|*
name|xe
parameter_list|,
name|bool
name|passive
parameter_list|)
block|{
name|DEBUG
argument_list|(
literal|"xdndHandlePosition"
argument_list|)
expr_stmt|;
while|while
condition|(
name|XCheckIfEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|(
name|XEvent
operator|*
operator|)
name|xe
argument_list|,
name|xdnd_position_scanner
argument_list|,
literal|0
argument_list|)
condition|)
empty_stmt|;
name|handle_xdnd_position
argument_list|(
name|w
argument_list|,
name|xe
argument_list|,
name|passive
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handle_xdnd_status
specifier|static
name|void
name|handle_xdnd_status
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
specifier|const
name|XEvent
modifier|*
name|xe
parameter_list|,
name|bool
parameter_list|)
block|{
specifier|const
name|unsigned
name|long
modifier|*
name|l
init|=
operator|(
specifier|const
name|unsigned
name|long
operator|*
operator|)
name|xe
operator|->
name|xclient
operator|.
name|data
operator|.
name|l
decl_stmt|;
comment|// ignore late status messages
if|if
condition|(
name|l
index|[
literal|0
index|]
operator|&&
name|l
index|[
literal|0
index|]
operator|!=
name|qt_xdnd_current_proxy_target
condition|)
return|return;
name|Qt
operator|::
name|DropAction
name|newAction
init|=
operator|(
name|l
index|[
literal|1
index|]
operator|&
literal|0x1
operator|)
condition|?
name|xdndaction_to_qtaction
argument_list|(
name|l
index|[
literal|4
index|]
argument_list|)
else|:
name|Qt
operator|::
name|IgnoreAction
decl_stmt|;
if|if
condition|(
call|(
name|int
call|)
argument_list|(
name|l
index|[
literal|1
index|]
operator|&
literal|2
argument_list|)
operator|==
literal|0
condition|)
block|{
name|QPoint
name|p
argument_list|(
operator|(
name|l
index|[
literal|2
index|]
operator|&
literal|0xffff0000
operator|)
operator|>>
literal|16
argument_list|,
name|l
index|[
literal|2
index|]
operator|&
literal|0x0000ffff
argument_list|)
decl_stmt|;
name|QSize
name|s
argument_list|(
operator|(
name|l
index|[
literal|3
index|]
operator|&
literal|0xffff0000
operator|)
operator|>>
literal|16
argument_list|,
name|l
index|[
literal|3
index|]
operator|&
literal|0x0000ffff
argument_list|)
decl_stmt|;
name|qt_xdnd_source_sameanswer
operator|=
name|QRect
argument_list|(
name|p
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qt_xdnd_source_sameanswer
operator|=
name|QRect
argument_list|()
expr_stmt|;
block|}
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|manager
operator|->
name|willDrop
operator|=
operator|(
name|l
index|[
literal|1
index|]
operator|&
literal|0x1
operator|)
expr_stmt|;
if|if
condition|(
name|global_accepted_action
operator|!=
name|newAction
condition|)
name|manager
operator|->
name|emitActionChanged
argument_list|(
name|newAction
argument_list|)
expr_stmt|;
name|global_accepted_action
operator|=
name|newAction
expr_stmt|;
name|manager
operator|->
name|updateCursor
argument_list|()
expr_stmt|;
name|waiting_for_status
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|xdnd_status_scanner
specifier|static
name|Bool
name|xdnd_status_scanner
parameter_list|(
name|Display
modifier|*
parameter_list|,
name|XEvent
modifier|*
name|event
parameter_list|,
name|XPointer
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
operator|!=
name|ClientMessage
condition|)
return|return
literal|false
return|;
name|XClientMessageEvent
modifier|*
name|ev
init|=
operator|&
name|event
operator|->
name|xclient
decl_stmt|;
if|if
condition|(
name|ev
operator|->
name|message_type
operator|==
name|ATOM
argument_list|(
name|XdndStatus
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|xdndHandleStatus
name|void
name|QX11Data
operator|::
name|xdndHandleStatus
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|XEvent
modifier|*
name|xe
parameter_list|,
name|bool
name|passive
parameter_list|)
block|{
name|DEBUG
argument_list|(
literal|"xdndHandleStatus"
argument_list|)
expr_stmt|;
while|while
condition|(
name|XCheckIfEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|(
name|XEvent
operator|*
operator|)
name|xe
argument_list|,
name|xdnd_status_scanner
argument_list|,
literal|0
argument_list|)
condition|)
empty_stmt|;
name|handle_xdnd_status
argument_list|(
name|w
argument_list|,
name|xe
argument_list|,
name|passive
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|(
literal|"xdndHandleStatus end"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|xdndHandleLeave
name|void
name|QX11Data
operator|::
name|xdndHandleLeave
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|XEvent
modifier|*
name|xe
parameter_list|,
name|bool
comment|/*passive*/
parameter_list|)
block|{
name|DEBUG
argument_list|(
literal|"xdnd leave"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qt_xdnd_current_widget
operator|||
name|w
operator|->
name|window
argument_list|()
operator|!=
name|qt_xdnd_current_widget
operator|->
name|window
argument_list|()
condition|)
block|{
return|return;
comment|// sanity
block|}
if|if
condition|(
name|checkEmbedded
argument_list|(
name|current_embedding_widget
argument_list|,
name|xe
argument_list|)
condition|)
block|{
name|current_embedding_widget
operator|=
literal|0
expr_stmt|;
name|qt_xdnd_current_widget
operator|=
literal|0
expr_stmt|;
return|return;
block|}
specifier|const
name|unsigned
name|long
modifier|*
name|l
init|=
operator|(
specifier|const
name|unsigned
name|long
operator|*
operator|)
name|xe
operator|->
name|xclient
operator|.
name|data
operator|.
name|l
decl_stmt|;
name|QDragLeaveEvent
name|e
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|qt_xdnd_current_widget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
index|[
literal|0
index|]
operator|!=
name|qt_xdnd_dragsource_xid
condition|)
block|{
comment|// This often happens - leave other-process window quickly
name|DEBUG
argument_list|(
literal|"xdnd drag leave from unexpected source (%08lx not %08lx"
argument_list|,
name|l
index|[
literal|0
index|]
argument_list|,
name|qt_xdnd_dragsource_xid
argument_list|)
expr_stmt|;
name|qt_xdnd_current_widget
operator|=
literal|0
expr_stmt|;
return|return;
block|}
name|qt_xdnd_dragsource_xid
operator|=
literal|0
expr_stmt|;
name|qt_xdnd_types
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|qt_xdnd_current_widget
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_xdnd_send_leave
name|void
name|qt_xdnd_send_leave
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qt_xdnd_current_target
condition|)
return|return;
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|XClientMessageEvent
name|leave
decl_stmt|;
name|leave
operator|.
name|type
operator|=
name|ClientMessage
expr_stmt|;
name|leave
operator|.
name|window
operator|=
name|qt_xdnd_current_target
expr_stmt|;
name|leave
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|leave
operator|.
name|message_type
operator|=
name|ATOM
argument_list|(
name|XdndLeave
argument_list|)
expr_stmt|;
name|leave
operator|.
name|data
operator|.
name|l
index|[
literal|0
index|]
operator|=
name|manager
operator|->
name|dragPrivate
argument_list|()
operator|->
name|source
operator|->
name|effectiveWinId
argument_list|()
expr_stmt|;
name|leave
operator|.
name|data
operator|.
name|l
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
comment|// flags
name|leave
operator|.
name|data
operator|.
name|l
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
comment|// x, y
name|leave
operator|.
name|data
operator|.
name|l
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
comment|// w, h
name|leave
operator|.
name|data
operator|.
name|l
index|[
literal|4
index|]
operator|=
literal|0
expr_stmt|;
comment|// just null
name|QWidget
modifier|*
name|w
init|=
name|QWidget
operator|::
name|find
argument_list|(
name|qt_xdnd_current_proxy_target
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|&&
operator|(
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
operator|&&
operator|!
name|w
operator|->
name|acceptDrops
argument_list|()
condition|)
name|w
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|w
condition|)
name|X11
operator|->
name|xdndHandleLeave
argument_list|(
name|w
argument_list|,
operator|(
specifier|const
name|XEvent
operator|*
operator|)
operator|&
name|leave
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
name|XSendEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|qt_xdnd_current_proxy_target
argument_list|,
name|False
argument_list|,
name|NoEventMask
argument_list|,
operator|(
name|XEvent
operator|*
operator|)
operator|&
name|leave
argument_list|)
expr_stmt|;
comment|// reset the drag manager state
name|manager
operator|->
name|willDrop
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|global_accepted_action
operator|!=
name|Qt
operator|::
name|IgnoreAction
condition|)
name|manager
operator|->
name|emitActionChanged
argument_list|(
name|Qt
operator|::
name|IgnoreAction
argument_list|)
expr_stmt|;
name|global_accepted_action
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
name|manager
operator|->
name|updateCursor
argument_list|()
expr_stmt|;
name|qt_xdnd_current_target
operator|=
literal|0
expr_stmt|;
name|qt_xdnd_current_proxy_target
operator|=
literal|0
expr_stmt|;
name|qt_xdnd_source_current_time
operator|=
literal|0
expr_stmt|;
name|waiting_for_status
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_comment
comment|// TODO: remove and use QApplication::currentKeyboardModifiers() in Qt 4.8.
end_comment
begin_function
DECL|function|currentKeyboardModifiers
specifier|static
name|Qt
operator|::
name|KeyboardModifiers
name|currentKeyboardModifiers
parameter_list|()
block|{
name|Window
name|root
decl_stmt|;
name|Window
name|child
decl_stmt|;
name|int
name|root_x
decl_stmt|,
name|root_y
decl_stmt|,
name|win_x
decl_stmt|,
name|win_y
decl_stmt|;
name|uint
name|keybstate
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ScreenCount
argument_list|(
name|X11
operator|->
name|display
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|XQueryPointer
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|(
name|i
argument_list|)
argument_list|,
operator|&
name|root
argument_list|,
operator|&
name|child
argument_list|,
operator|&
name|root_x
argument_list|,
operator|&
name|root_y
argument_list|,
operator|&
name|win_x
argument_list|,
operator|&
name|win_y
argument_list|,
operator|&
name|keybstate
argument_list|)
condition|)
return|return
name|X11
operator|->
name|translateModifiers
argument_list|(
name|keybstate
operator|&
literal|0x00ff
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|xdndHandleDrop
name|void
name|QX11Data
operator|::
name|xdndHandleDrop
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
specifier|const
name|XEvent
modifier|*
name|xe
parameter_list|,
name|bool
name|passive
parameter_list|)
block|{
name|DEBUG
argument_list|(
literal|"xdndHandleDrop"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qt_xdnd_current_widget
condition|)
block|{
name|qt_xdnd_dragsource_xid
operator|=
literal|0
expr_stmt|;
return|return;
comment|// sanity
block|}
if|if
condition|(
operator|!
name|passive
operator|&&
name|checkEmbedded
argument_list|(
name|qt_xdnd_current_widget
argument_list|,
name|xe
argument_list|)
condition|)
block|{
name|current_embedding_widget
operator|=
literal|0
expr_stmt|;
name|qt_xdnd_dragsource_xid
operator|=
literal|0
expr_stmt|;
name|qt_xdnd_current_widget
operator|=
literal|0
expr_stmt|;
return|return;
block|}
specifier|const
name|unsigned
name|long
modifier|*
name|l
init|=
operator|(
specifier|const
name|unsigned
name|long
operator|*
operator|)
name|xe
operator|->
name|xclient
operator|.
name|data
operator|.
name|l
decl_stmt|;
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|DEBUG
argument_list|(
literal|"xdnd drop"
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
index|[
literal|0
index|]
operator|!=
name|qt_xdnd_dragsource_xid
condition|)
block|{
name|DEBUG
argument_list|(
literal|"xdnd drop from unexpected source (%08lx not %08lx"
argument_list|,
name|l
index|[
literal|0
index|]
argument_list|,
name|qt_xdnd_dragsource_xid
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// update the "user time" from the timestamp in the event.
if|if
condition|(
name|l
index|[
literal|2
index|]
operator|!=
literal|0
condition|)
block|{
comment|// Some X server/client combination swallow the first 32 bit and
comment|// interpret a set bit 31 as negative sign.
name|qt_xdnd_target_current_time
operator|=
name|X11
operator|->
name|userTime
operator|=
operator|(
operator|(
sizeof|sizeof
argument_list|(
name|Time
argument_list|)
operator|==
literal|8
operator|&&
name|xe
operator|->
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|2
index|]
operator|<
literal|0
operator|)
condition|?
name|uint
argument_list|(
name|l
index|[
literal|2
index|]
argument_list|)
else|:
name|l
index|[
literal|2
index|]
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|passive
condition|)
block|{
comment|// this could be a same-application drop, just proxied due to
comment|// some XEMBEDding, so try to find the real QMimeData used
comment|// based on the timestamp for this drop.
name|QMimeData
modifier|*
name|dropData
init|=
literal|0
decl_stmt|;
name|int
name|at
init|=
name|findXdndDropTransactionByTime
argument_list|(
name|qt_xdnd_target_current_time
argument_list|)
decl_stmt|;
if|if
condition|(
name|at
operator|!=
operator|-
literal|1
condition|)
name|dropData
operator|=
name|QDragManager
operator|::
name|dragPrivate
argument_list|(
name|X11
operator|->
name|dndDropTransactions
operator|.
name|at
argument_list|(
name|at
argument_list|)
operator|.
name|object
argument_list|)
operator|->
name|data
expr_stmt|;
comment|// if we can't find it, then use the data in the drag manager
if|if
condition|(
operator|!
name|dropData
condition|)
name|dropData
operator|=
operator|(
name|manager
operator|->
name|object
operator|)
condition|?
name|manager
operator|->
name|dragPrivate
argument_list|()
operator|->
name|data
else|:
name|manager
operator|->
name|dropData
expr_stmt|;
comment|// Drop coming from another app? Update keyboard modifiers.
if|if
condition|(
operator|!
name|qt_xdnd_dragging
condition|)
block|{
name|QApplicationPrivate
operator|::
name|modifier_buttons
operator|=
name|currentKeyboardModifiers
argument_list|()
expr_stmt|;
block|}
name|QDropEvent
name|de
argument_list|(
name|qt_xdnd_current_position
argument_list|,
name|possible_actions
argument_list|,
name|dropData
argument_list|,
name|QApplication
operator|::
name|mouseButtons
argument_list|()
argument_list|,
name|QApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|qt_xdnd_current_widget
argument_list|,
operator|&
name|de
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|de
operator|.
name|isAccepted
argument_list|()
condition|)
block|{
comment|// Ignore a failed drag
name|global_accepted_action
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
block|}
else|else
block|{
name|global_accepted_action
operator|=
name|de
operator|.
name|dropAction
argument_list|()
expr_stmt|;
block|}
name|XClientMessageEvent
name|finished
decl_stmt|;
name|finished
operator|.
name|type
operator|=
name|ClientMessage
expr_stmt|;
name|finished
operator|.
name|window
operator|=
name|qt_xdnd_dragsource_xid
expr_stmt|;
name|finished
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|finished
operator|.
name|message_type
operator|=
name|ATOM
argument_list|(
name|XdndFinished
argument_list|)
expr_stmt|;
name|DNDDEBUG
operator|<<
literal|"xdndHandleDrop"
operator|<<
literal|"qt_xdnd_current_widget"
operator|<<
name|qt_xdnd_current_widget
operator|<<
operator|(
name|qt_xdnd_current_widget
condition|?
name|qt_xdnd_current_widget
operator|->
name|effectiveWinId
argument_list|()
else|:
literal|0
operator|)
operator|<<
literal|"t_xdnd_current_widget->window()"
operator|<<
operator|(
name|qt_xdnd_current_widget
condition|?
name|qt_xdnd_current_widget
operator|->
name|window
argument_list|()
else|:
literal|0
operator|)
operator|<<
operator|(
name|qt_xdnd_current_widget
condition|?
name|qt_xdnd_current_widget
operator|->
name|window
argument_list|()
operator|->
name|internalWinId
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|finished
operator|.
name|data
operator|.
name|l
index|[
literal|0
index|]
operator|=
name|qt_xdnd_current_widget
condition|?
name|qt_xdnd_current_widget
operator|->
name|window
argument_list|()
operator|->
name|internalWinId
argument_list|()
else|:
literal|0
expr_stmt|;
name|finished
operator|.
name|data
operator|.
name|l
index|[
literal|1
index|]
operator|=
name|de
operator|.
name|isAccepted
argument_list|()
condition|?
literal|1
else|:
literal|0
expr_stmt|;
comment|// flags
name|finished
operator|.
name|data
operator|.
name|l
index|[
literal|2
index|]
operator|=
name|qtaction_to_xdndaction
argument_list|(
name|global_accepted_action
argument_list|)
expr_stmt|;
name|XSendEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|qt_xdnd_dragsource_xid
argument_list|,
name|False
argument_list|,
name|NoEventMask
argument_list|,
operator|(
name|XEvent
operator|*
operator|)
operator|&
name|finished
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QDragLeaveEvent
name|e
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|qt_xdnd_current_widget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
name|qt_xdnd_dragsource_xid
operator|=
literal|0
expr_stmt|;
name|qt_xdnd_current_widget
operator|=
literal|0
expr_stmt|;
name|waiting_for_status
operator|=
literal|false
expr_stmt|;
comment|// reset
name|qt_xdnd_target_current_time
operator|=
name|CurrentTime
expr_stmt|;
block|}
end_function
begin_function
DECL|function|xdndHandleFinished
name|void
name|QX11Data
operator|::
name|xdndHandleFinished
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
specifier|const
name|XEvent
modifier|*
name|xe
parameter_list|,
name|bool
name|passive
parameter_list|)
block|{
name|DEBUG
argument_list|(
literal|"xdndHandleFinished"
argument_list|)
expr_stmt|;
specifier|const
name|unsigned
name|long
modifier|*
name|l
init|=
operator|(
specifier|const
name|unsigned
name|long
operator|*
operator|)
name|xe
operator|->
name|xclient
operator|.
name|data
operator|.
name|l
decl_stmt|;
name|DNDDEBUG
operator|<<
literal|"xdndHandleFinished, l[0]"
operator|<<
name|l
index|[
literal|0
index|]
operator|<<
literal|"qt_xdnd_current_target"
operator|<<
name|qt_xdnd_current_target
operator|<<
literal|"qt_xdnd_current_proxy_targe"
operator|<<
name|qt_xdnd_current_proxy_target
expr_stmt|;
if|if
condition|(
name|l
index|[
literal|0
index|]
condition|)
block|{
name|int
name|at
init|=
name|findXdndDropTransactionByWindow
argument_list|(
name|l
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|at
operator|!=
operator|-
literal|1
condition|)
block|{
name|restartXdndDropExpiryTimer
argument_list|()
expr_stmt|;
name|QXdndDropTransaction
name|t
init|=
name|X11
operator|->
name|dndDropTransactions
operator|.
name|takeAt
argument_list|(
name|at
argument_list|)
decl_stmt|;
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|Window
name|target
init|=
name|qt_xdnd_current_target
decl_stmt|;
name|Window
name|proxy_target
init|=
name|qt_xdnd_current_proxy_target
decl_stmt|;
name|QWidget
modifier|*
name|embedding_widget
init|=
name|current_embedding_widget
decl_stmt|;
name|QDrag
modifier|*
name|currentObject
init|=
name|manager
operator|->
name|object
decl_stmt|;
name|qt_xdnd_current_target
operator|=
name|t
operator|.
name|target
expr_stmt|;
name|qt_xdnd_current_proxy_target
operator|=
name|t
operator|.
name|proxy_target
expr_stmt|;
name|current_embedding_widget
operator|=
name|t
operator|.
name|embedding_widget
expr_stmt|;
name|manager
operator|->
name|object
operator|=
name|t
operator|.
name|object
expr_stmt|;
if|if
condition|(
operator|!
name|passive
condition|)
operator|(
name|void
operator|)
name|checkEmbedded
argument_list|(
name|qt_xdnd_current_widget
argument_list|,
name|xe
argument_list|)
expr_stmt|;
name|current_embedding_widget
operator|=
literal|0
expr_stmt|;
name|qt_xdnd_current_target
operator|=
literal|0
expr_stmt|;
name|qt_xdnd_current_proxy_target
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|object
condition|)
name|t
operator|.
name|object
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|qt_xdnd_current_target
operator|=
name|target
expr_stmt|;
name|qt_xdnd_current_proxy_target
operator|=
name|proxy_target
expr_stmt|;
name|current_embedding_widget
operator|=
name|embedding_widget
expr_stmt|;
name|manager
operator|->
name|object
operator|=
name|currentObject
expr_stmt|;
block|}
block|}
name|waiting_for_status
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|QDragManager
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|timerId
argument_list|()
operator|==
name|heartbeat
operator|&&
name|qt_xdnd_source_sameanswer
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|move
argument_list|(
name|QCursor
operator|::
name|pos
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|timerId
argument_list|()
operator|==
name|transaction_expiry_timer
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|X11
operator|->
name|dndDropTransactions
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QXdndDropTransaction
modifier|&
name|t
init|=
name|X11
operator|->
name|dndDropTransactions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|targetWidget
condition|)
block|{
comment|// dnd within the same process, don't delete these
continue|continue;
block|}
name|t
operator|.
name|object
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|X11
operator|->
name|dndDropTransactions
operator|.
name|removeAt
argument_list|(
name|i
operator|--
argument_list|)
expr_stmt|;
block|}
name|killTimer
argument_list|(
name|transaction_expiry_timer
argument_list|)
expr_stmt|;
name|transaction_expiry_timer
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|eventFilter
name|bool
name|QDragManager
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|beingCancelled
condition|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|KeyRelease
operator|&&
operator|(
operator|(
name|QKeyEvent
operator|*
operator|)
name|e
operator|)
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Escape
condition|)
block|{
name|qApp
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|object
operator|==
literal|0
argument_list|)
expr_stmt|;
name|beingCancelled
operator|=
literal|false
expr_stmt|;
name|eventLoop
operator|->
name|exit
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
comment|// block the key release
block|}
return|return
literal|false
return|;
block|}
name|Q_ASSERT
argument_list|(
name|object
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|o
operator|->
name|isWidgetType
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseMove
condition|)
block|{
name|QMouseEvent
modifier|*
name|me
init|=
operator|(
name|QMouseEvent
operator|*
operator|)
name|e
decl_stmt|;
name|move
argument_list|(
name|me
operator|->
name|globalPos
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonRelease
condition|)
block|{
name|DEBUG
argument_list|(
literal|"pre drop"
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|willDrop
condition|)
name|drop
argument_list|()
expr_stmt|;
else|else
name|cancel
argument_list|()
expr_stmt|;
name|DEBUG
argument_list|(
literal|"drop, resetting object"
argument_list|)
expr_stmt|;
name|beingCancelled
operator|=
literal|false
expr_stmt|;
name|eventLoop
operator|->
name|exit
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ShortcutOverride
condition|)
block|{
comment|// prevent accelerators from firing while dragging
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|KeyPress
operator|||
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|KeyRelease
condition|)
block|{
name|QKeyEvent
modifier|*
name|ke
init|=
operator|(
operator|(
name|QKeyEvent
operator|*
operator|)
name|e
operator|)
decl_stmt|;
if|if
condition|(
name|ke
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Escape
operator|&&
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|KeyPress
condition|)
block|{
name|cancel
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|beingCancelled
operator|=
literal|false
expr_stmt|;
name|eventLoop
operator|->
name|exit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qt_xdnd_source_sameanswer
operator|=
name|QRect
argument_list|()
expr_stmt|;
comment|// force move
name|move
argument_list|(
name|QCursor
operator|::
name|pos
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
comment|// Eat all key events
block|}
comment|// ### We bind modality to widgets, so we have to do this
comment|// ###  "manually".
comment|// DnD is modal - eat all other interactive events
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
case|case
name|QEvent
operator|::
name|MouseButtonDblClick
case|:
case|case
name|QEvent
operator|::
name|MouseMove
case|:
case|case
name|QEvent
operator|::
name|KeyPress
case|:
case|case
name|QEvent
operator|::
name|KeyRelease
case|:
case|case
name|QEvent
operator|::
name|Wheel
case|:
case|case
name|QEvent
operator|::
name|ShortcutOverride
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|updateCursor
name|void
name|QDragManager
operator|::
name|updateCursor
parameter_list|()
block|{
if|if
condition|(
operator|!
name|noDropCursor
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|noDropCursor
operator|=
operator|new
name|QCursor
argument_list|(
name|Qt
operator|::
name|ForbiddenCursor
argument_list|)
expr_stmt|;
name|moveCursor
operator|=
operator|new
name|QCursor
argument_list|(
name|Qt
operator|::
name|DragMoveCursor
argument_list|)
expr_stmt|;
name|copyCursor
operator|=
operator|new
name|QCursor
argument_list|(
name|Qt
operator|::
name|DragCopyCursor
argument_list|)
expr_stmt|;
name|linkCursor
operator|=
operator|new
name|QCursor
argument_list|(
name|Qt
operator|::
name|DragLinkCursor
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|QCursor
modifier|*
name|c
decl_stmt|;
if|if
condition|(
name|willDrop
condition|)
block|{
if|if
condition|(
name|global_accepted_action
operator|==
name|Qt
operator|::
name|CopyAction
condition|)
block|{
name|c
operator|=
name|copyCursor
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|global_accepted_action
operator|==
name|Qt
operator|::
name|LinkAction
condition|)
block|{
name|c
operator|=
name|linkCursor
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
name|moveCursor
expr_stmt|;
block|}
if|if
condition|(
name|xdnd_data
operator|.
name|deco
condition|)
block|{
name|xdnd_data
operator|.
name|deco
operator|->
name|show
argument_list|()
expr_stmt|;
name|xdnd_data
operator|.
name|deco
operator|->
name|raise
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|c
operator|=
name|noDropCursor
expr_stmt|;
comment|//if (qt_xdnd_deco)
comment|//    qt_xdnd_deco->hide();
block|}
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
if|if
condition|(
name|c
condition|)
name|qApp
operator|->
name|changeOverrideCursor
argument_list|(
operator|*
name|c
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|cancel
name|void
name|QDragManager
operator|::
name|cancel
parameter_list|(
name|bool
name|deleteSource
parameter_list|)
block|{
name|DEBUG
argument_list|(
literal|"QDragManager::cancel"
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|heartbeat
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|killTimer
argument_list|(
name|heartbeat
argument_list|)
expr_stmt|;
name|heartbeat
operator|=
operator|-
literal|1
expr_stmt|;
name|beingCancelled
operator|=
literal|true
expr_stmt|;
name|qt_xdnd_dragging
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|qt_xdnd_current_target
condition|)
name|qt_xdnd_send_leave
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
if|if
condition|(
name|restoreCursor
condition|)
block|{
name|QApplication
operator|::
name|restoreOverrideCursor
argument_list|()
expr_stmt|;
name|restoreCursor
operator|=
literal|false
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|deleteSource
operator|&&
name|object
condition|)
name|object
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|object
operator|=
literal|0
expr_stmt|;
name|qDeleteInEventHandler
argument_list|(
name|xdnd_data
operator|.
name|deco
argument_list|)
expr_stmt|;
name|xdnd_data
operator|.
name|deco
operator|=
literal|0
expr_stmt|;
name|global_accepted_action
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
block|}
end_function
begin_function
specifier|static
DECL|function|findRealWindow
name|Window
name|findRealWindow
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|,
name|Window
name|w
parameter_list|,
name|int
name|md
parameter_list|)
block|{
if|if
condition|(
name|xdnd_data
operator|.
name|deco
operator|&&
name|w
operator|==
name|xdnd_data
operator|.
name|deco
operator|->
name|effectiveWinId
argument_list|()
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|md
condition|)
block|{
name|X11
operator|->
name|ignoreBadwindow
argument_list|()
expr_stmt|;
name|XWindowAttributes
name|attr
decl_stmt|;
name|XGetWindowAttributes
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|w
argument_list|,
operator|&
name|attr
argument_list|)
expr_stmt|;
if|if
condition|(
name|X11
operator|->
name|badwindow
argument_list|()
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|attr
operator|.
name|map_state
operator|==
name|IsViewable
operator|&&
name|QRect
argument_list|(
name|attr
operator|.
name|x
argument_list|,
name|attr
operator|.
name|y
argument_list|,
name|attr
operator|.
name|width
argument_list|,
name|attr
operator|.
name|height
argument_list|)
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
condition|)
block|{
block|{
name|Atom
name|type
init|=
name|XNone
decl_stmt|;
name|int
name|f
decl_stmt|;
name|unsigned
name|long
name|n
decl_stmt|,
name|a
decl_stmt|;
name|unsigned
name|char
modifier|*
name|data
decl_stmt|;
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|w
argument_list|,
name|ATOM
argument_list|(
name|XdndAware
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|False
argument_list|,
name|AnyPropertyType
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|f
argument_list|,
operator|&
name|n
argument_list|,
operator|&
name|a
argument_list|,
operator|&
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
condition|)
name|XFree
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
condition|)
return|return
name|w
return|;
block|}
name|Window
name|r
decl_stmt|,
name|p
decl_stmt|;
name|Window
modifier|*
name|c
decl_stmt|;
name|uint
name|nc
decl_stmt|;
if|if
condition|(
name|XQueryTree
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|w
argument_list|,
operator|&
name|r
argument_list|,
operator|&
name|p
argument_list|,
operator|&
name|c
argument_list|,
operator|&
name|nc
argument_list|)
condition|)
block|{
name|r
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|uint
name|i
init|=
name|nc
init|;
operator|!
name|r
operator|&&
name|i
operator|--
condition|;
control|)
block|{
name|r
operator|=
name|findRealWindow
argument_list|(
name|pos
operator|-
name|QPoint
argument_list|(
name|attr
operator|.
name|x
argument_list|,
name|attr
operator|.
name|y
argument_list|)
argument_list|,
name|c
index|[
name|i
index|]
argument_list|,
name|md
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|XFree
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
condition|)
return|return
name|r
return|;
comment|// We didn't find a client window!  Just use the
comment|// innermost window.
block|}
comment|// No children!
return|return
name|w
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|move
name|void
name|QDragManager
operator|::
name|move
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|globalPos
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_CURSOR
name|Q_UNUSED
argument_list|(
name|globalPos
argument_list|)
expr_stmt|;
return|return;
else|#
directive|else
name|DEBUG
argument_list|()
operator|<<
literal|"QDragManager::move enter"
expr_stmt|;
if|if
condition|(
operator|!
name|object
condition|)
block|{
comment|// perhaps the target crashed?
return|return;
block|}
name|int
name|screen
init|=
name|QCursor
operator|::
name|x11Screen
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|qt_xdnd_current_screen
operator|==
operator|-
literal|1
operator|&&
name|screen
operator|!=
name|X11
operator|->
name|defaultScreen
operator|)
operator|||
operator|(
name|screen
operator|!=
name|qt_xdnd_current_screen
operator|)
condition|)
block|{
comment|// recreate the pixmap on the new screen...
operator|delete
name|xdnd_data
operator|.
name|deco
expr_stmt|;
name|QWidget
modifier|*
name|parent
init|=
name|object
operator|->
name|source
argument_list|()
operator|->
name|window
argument_list|()
operator|->
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
operator|==
name|screen
condition|?
name|object
operator|->
name|source
argument_list|()
operator|->
name|window
argument_list|()
else|:
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screen
argument_list|(
name|screen
argument_list|)
decl_stmt|;
name|xdnd_data
operator|.
name|deco
operator|=
operator|new
name|QShapedPixmapWidget
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
condition|)
block|{
name|updatePixmap
argument_list|()
expr_stmt|;
name|xdnd_data
operator|.
name|deco
operator|->
name|grabMouse
argument_list|()
expr_stmt|;
block|}
block|}
name|xdnd_data
operator|.
name|deco
operator|->
name|move
argument_list|(
name|QCursor
operator|::
name|pos
argument_list|()
operator|-
name|xdnd_data
operator|.
name|deco
operator|->
name|pm_hot
argument_list|)
expr_stmt|;
if|if
condition|(
name|qt_xdnd_source_sameanswer
operator|.
name|contains
argument_list|(
name|globalPos
argument_list|)
operator|&&
name|qt_xdnd_source_sameanswer
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|qt_xdnd_current_screen
operator|=
name|screen
expr_stmt|;
name|Window
name|rootwin
init|=
name|QX11Info
operator|::
name|appRootWindow
argument_list|(
name|qt_xdnd_current_screen
argument_list|)
decl_stmt|;
name|Window
name|target
init|=
literal|0
decl_stmt|;
name|int
name|lx
init|=
literal|0
decl_stmt|,
name|ly
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|XTranslateCoordinates
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|rootwin
argument_list|,
name|rootwin
argument_list|,
name|globalPos
operator|.
name|x
argument_list|()
argument_list|,
name|globalPos
operator|.
name|y
argument_list|()
argument_list|,
operator|&
name|lx
argument_list|,
operator|&
name|ly
argument_list|,
operator|&
name|target
argument_list|)
condition|)
comment|// some weird error...
return|return;
if|if
condition|(
name|target
operator|==
name|rootwin
condition|)
block|{
comment|// Ok.
block|}
elseif|else
if|if
condition|(
name|target
condition|)
block|{
comment|//me
name|Window
name|src
init|=
name|rootwin
decl_stmt|;
while|while
condition|(
name|target
operator|!=
literal|0
condition|)
block|{
name|DNDDEBUG
operator|<<
literal|"checking target for XdndAware"
operator|<<
name|QWidget
operator|::
name|find
argument_list|(
name|target
argument_list|)
operator|<<
name|target
expr_stmt|;
name|int
name|lx2
decl_stmt|,
name|ly2
decl_stmt|;
name|Window
name|t
decl_stmt|;
comment|// translate coordinates
if|if
condition|(
operator|!
name|XTranslateCoordinates
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|src
argument_list|,
name|target
argument_list|,
name|lx
argument_list|,
name|ly
argument_list|,
operator|&
name|lx2
argument_list|,
operator|&
name|ly2
argument_list|,
operator|&
name|t
argument_list|)
condition|)
block|{
name|target
operator|=
literal|0
expr_stmt|;
break|break;
block|}
name|lx
operator|=
name|lx2
expr_stmt|;
name|ly
operator|=
name|ly2
expr_stmt|;
name|src
operator|=
name|target
expr_stmt|;
comment|// check if it has XdndAware
name|Atom
name|type
init|=
literal|0
decl_stmt|;
name|int
name|f
decl_stmt|;
name|unsigned
name|long
name|n
decl_stmt|,
name|a
decl_stmt|;
name|unsigned
name|char
modifier|*
name|data
init|=
literal|0
decl_stmt|;
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|target
argument_list|,
name|ATOM
argument_list|(
name|XdndAware
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|False
argument_list|,
name|AnyPropertyType
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|f
argument_list|,
operator|&
name|n
argument_list|,
operator|&
name|a
argument_list|,
operator|&
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
condition|)
name|XFree
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
condition|)
block|{
name|DNDDEBUG
operator|<<
literal|"Found XdndAware on "
operator|<<
name|QWidget
operator|::
name|find
argument_list|(
name|target
argument_list|)
operator|<<
name|target
expr_stmt|;
break|break;
block|}
comment|// find child at the coordinates
if|if
condition|(
operator|!
name|XTranslateCoordinates
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|src
argument_list|,
name|src
argument_list|,
name|lx
argument_list|,
name|ly
argument_list|,
operator|&
name|lx2
argument_list|,
operator|&
name|ly2
argument_list|,
operator|&
name|target
argument_list|)
condition|)
block|{
name|target
operator|=
literal|0
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|xdnd_data
operator|.
name|deco
operator|&&
operator|(
operator|!
name|target
operator|||
name|target
operator|==
name|xdnd_data
operator|.
name|deco
operator|->
name|effectiveWinId
argument_list|()
operator|)
condition|)
block|{
name|DNDDEBUG
operator|<<
literal|"need to find real window"
expr_stmt|;
name|target
operator|=
name|findRealWindow
argument_list|(
name|globalPos
argument_list|,
name|rootwin
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|DNDDEBUG
operator|<<
literal|"real window found"
operator|<<
name|QWidget
operator|::
name|find
argument_list|(
name|target
argument_list|)
operator|<<
name|target
expr_stmt|;
block|}
block|}
name|QWidget
modifier|*
name|w
decl_stmt|;
if|if
condition|(
name|target
condition|)
block|{
name|w
operator|=
name|QWidget
operator|::
name|find
argument_list|(
operator|(
name|WId
operator|)
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|&&
operator|(
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
operator|&&
operator|!
name|w
operator|->
name|acceptDrops
argument_list|()
condition|)
name|w
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|w
operator|=
literal|0
expr_stmt|;
name|target
operator|=
name|rootwin
expr_stmt|;
block|}
name|DNDDEBUG
operator|<<
literal|"and the final target is "
operator|<<
name|QWidget
operator|::
name|find
argument_list|(
name|target
argument_list|)
operator|<<
name|target
expr_stmt|;
name|DNDDEBUG
operator|<<
literal|"the widget w is"
operator|<<
name|w
expr_stmt|;
name|WId
name|proxy_target
init|=
name|xdndProxy
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|proxy_target
condition|)
name|proxy_target
operator|=
name|target
expr_stmt|;
name|int
name|target_version
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|proxy_target
condition|)
block|{
name|Atom
name|type
init|=
name|XNone
decl_stmt|;
name|int
name|r
decl_stmt|,
name|f
decl_stmt|;
name|unsigned
name|long
name|n
decl_stmt|,
name|a
decl_stmt|;
name|unsigned
name|char
modifier|*
name|retval
decl_stmt|;
name|X11
operator|->
name|ignoreBadwindow
argument_list|()
expr_stmt|;
name|r
operator|=
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|proxy_target
argument_list|,
name|ATOM
argument_list|(
name|XdndAware
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|False
argument_list|,
name|AnyPropertyType
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|f
argument_list|,
operator|&
name|n
argument_list|,
operator|&
name|a
argument_list|,
operator|&
name|retval
argument_list|)
expr_stmt|;
name|int
modifier|*
name|tv
init|=
operator|(
name|int
operator|*
operator|)
name|retval
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|Success
operator|||
name|X11
operator|->
name|badwindow
argument_list|()
condition|)
block|{
name|target
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|target_version
operator|=
name|qMin
argument_list|(
name|xdnd_version
argument_list|,
name|tv
condition|?
operator|*
name|tv
else|:
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|tv
condition|)
name|XFree
argument_list|(
name|tv
argument_list|)
expr_stmt|;
comment|//             if (!(!X11->badwindow()&& type))
comment|//                 target = 0;
block|}
block|}
if|if
condition|(
name|target
operator|!=
name|qt_xdnd_current_target
condition|)
block|{
if|if
condition|(
name|qt_xdnd_current_target
condition|)
name|qt_xdnd_send_leave
argument_list|()
expr_stmt|;
name|qt_xdnd_current_target
operator|=
name|target
expr_stmt|;
name|qt_xdnd_current_proxy_target
operator|=
name|proxy_target
expr_stmt|;
if|if
condition|(
name|target
condition|)
block|{
name|QVector
argument_list|<
name|Atom
argument_list|>
name|types
decl_stmt|;
name|int
name|flags
init|=
name|target_version
operator|<<
literal|24
decl_stmt|;
name|QStringList
name|fmts
init|=
name|QInternalMimeData
operator|::
name|formatsHelper
argument_list|(
name|dragPrivate
argument_list|()
operator|->
name|data
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fmts
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QList
argument_list|<
name|Atom
argument_list|>
name|atoms
init|=
name|X11
operator|->
name|xdndMimeAtomsForFormat
argument_list|(
name|fmts
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|atoms
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
operator|!
name|types
operator|.
name|contains
argument_list|(
name|atoms
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
name|types
operator|.
name|append
argument_list|(
name|atoms
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|types
operator|.
name|size
argument_list|()
operator|>
literal|3
condition|)
block|{
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|dragPrivate
argument_list|()
operator|->
name|source
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|XdndTypelist
argument_list|)
argument_list|,
name|XA_ATOM
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|types
operator|.
name|data
argument_list|()
argument_list|,
name|types
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|flags
operator||=
literal|0x0001
expr_stmt|;
block|}
name|XClientMessageEvent
name|enter
decl_stmt|;
name|enter
operator|.
name|type
operator|=
name|ClientMessage
expr_stmt|;
name|enter
operator|.
name|window
operator|=
name|target
expr_stmt|;
name|enter
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|enter
operator|.
name|message_type
operator|=
name|ATOM
argument_list|(
name|XdndEnter
argument_list|)
expr_stmt|;
name|enter
operator|.
name|data
operator|.
name|l
index|[
literal|0
index|]
operator|=
name|dragPrivate
argument_list|()
operator|->
name|source
operator|->
name|effectiveWinId
argument_list|()
expr_stmt|;
name|enter
operator|.
name|data
operator|.
name|l
index|[
literal|1
index|]
operator|=
name|flags
expr_stmt|;
name|enter
operator|.
name|data
operator|.
name|l
index|[
literal|2
index|]
operator|=
name|types
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|types
operator|.
name|at
argument_list|(
literal|0
argument_list|)
else|:
literal|0
expr_stmt|;
name|enter
operator|.
name|data
operator|.
name|l
index|[
literal|3
index|]
operator|=
name|types
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|types
operator|.
name|at
argument_list|(
literal|1
argument_list|)
else|:
literal|0
expr_stmt|;
name|enter
operator|.
name|data
operator|.
name|l
index|[
literal|4
index|]
operator|=
name|types
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|?
name|types
operator|.
name|at
argument_list|(
literal|2
argument_list|)
else|:
literal|0
expr_stmt|;
comment|// provisionally set the rectangle to 5x5 pixels...
name|qt_xdnd_source_sameanswer
operator|=
name|QRect
argument_list|(
name|globalPos
operator|.
name|x
argument_list|()
operator|-
literal|2
argument_list|,
name|globalPos
operator|.
name|y
argument_list|()
operator|-
literal|2
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|(
literal|"sending Xdnd enter"
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
condition|)
name|X11
operator|->
name|xdndHandleEnter
argument_list|(
name|w
argument_list|,
operator|(
specifier|const
name|XEvent
operator|*
operator|)
operator|&
name|enter
argument_list|,
literal|false
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|target
condition|)
name|XSendEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|proxy_target
argument_list|,
name|False
argument_list|,
name|NoEventMask
argument_list|,
operator|(
name|XEvent
operator|*
operator|)
operator|&
name|enter
argument_list|)
expr_stmt|;
name|waiting_for_status
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|waiting_for_status
condition|)
return|return;
if|if
condition|(
name|target
condition|)
block|{
name|waiting_for_status
operator|=
literal|true
expr_stmt|;
name|XClientMessageEvent
name|move
decl_stmt|;
name|move
operator|.
name|type
operator|=
name|ClientMessage
expr_stmt|;
name|move
operator|.
name|window
operator|=
name|target
expr_stmt|;
name|move
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|move
operator|.
name|message_type
operator|=
name|ATOM
argument_list|(
name|XdndPosition
argument_list|)
expr_stmt|;
name|move
operator|.
name|window
operator|=
name|target
expr_stmt|;
name|move
operator|.
name|data
operator|.
name|l
index|[
literal|0
index|]
operator|=
name|dragPrivate
argument_list|()
operator|->
name|source
operator|->
name|effectiveWinId
argument_list|()
expr_stmt|;
name|move
operator|.
name|data
operator|.
name|l
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
comment|// flags
name|move
operator|.
name|data
operator|.
name|l
index|[
literal|2
index|]
operator|=
operator|(
name|globalPos
operator|.
name|x
argument_list|()
operator|<<
literal|16
operator|)
operator|+
name|globalPos
operator|.
name|y
argument_list|()
expr_stmt|;
name|move
operator|.
name|data
operator|.
name|l
index|[
literal|3
index|]
operator|=
name|X11
operator|->
name|time
expr_stmt|;
name|move
operator|.
name|data
operator|.
name|l
index|[
literal|4
index|]
operator|=
name|qtaction_to_xdndaction
argument_list|(
name|defaultAction
argument_list|(
name|dragPrivate
argument_list|()
operator|->
name|possible_actions
argument_list|,
name|QApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|(
literal|"sending Xdnd position"
argument_list|)
expr_stmt|;
name|qt_xdnd_source_current_time
operator|=
name|X11
operator|->
name|time
expr_stmt|;
if|if
condition|(
name|w
condition|)
name|handle_xdnd_position
argument_list|(
name|w
argument_list|,
operator|(
specifier|const
name|XEvent
operator|*
operator|)
operator|&
name|move
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
name|XSendEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|proxy_target
argument_list|,
name|False
argument_list|,
name|NoEventMask
argument_list|,
operator|(
name|XEvent
operator|*
operator|)
operator|&
name|move
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|willDrop
condition|)
block|{
name|willDrop
operator|=
literal|false
expr_stmt|;
name|updateCursor
argument_list|()
expr_stmt|;
block|}
block|}
name|DEBUG
argument_list|()
operator|<<
literal|"QDragManager::move leave"
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|drop
name|void
name|QDragManager
operator|::
name|drop
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|heartbeat
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|killTimer
argument_list|(
name|heartbeat
argument_list|)
expr_stmt|;
name|heartbeat
operator|=
operator|-
literal|1
expr_stmt|;
name|qt_xdnd_dragging
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|qt_xdnd_current_target
condition|)
return|return;
name|qDeleteInEventHandler
argument_list|(
name|xdnd_data
operator|.
name|deco
argument_list|)
expr_stmt|;
name|xdnd_data
operator|.
name|deco
operator|=
literal|0
expr_stmt|;
name|XClientMessageEvent
name|drop
decl_stmt|;
name|drop
operator|.
name|type
operator|=
name|ClientMessage
expr_stmt|;
name|drop
operator|.
name|window
operator|=
name|qt_xdnd_current_target
expr_stmt|;
name|drop
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|drop
operator|.
name|message_type
operator|=
name|ATOM
argument_list|(
name|XdndDrop
argument_list|)
expr_stmt|;
name|drop
operator|.
name|data
operator|.
name|l
index|[
literal|0
index|]
operator|=
name|dragPrivate
argument_list|()
operator|->
name|source
operator|->
name|effectiveWinId
argument_list|()
expr_stmt|;
name|drop
operator|.
name|data
operator|.
name|l
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
comment|// flags
name|drop
operator|.
name|data
operator|.
name|l
index|[
literal|2
index|]
operator|=
name|X11
operator|->
name|time
expr_stmt|;
name|drop
operator|.
name|data
operator|.
name|l
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
name|drop
operator|.
name|data
operator|.
name|l
index|[
literal|4
index|]
operator|=
literal|0
expr_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|QWidget
operator|::
name|find
argument_list|(
name|qt_xdnd_current_proxy_target
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|&&
operator|(
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
operator|&&
operator|!
name|w
operator|->
name|acceptDrops
argument_list|()
condition|)
name|w
operator|=
literal|0
expr_stmt|;
name|QXdndDropTransaction
name|t
init|=
block|{
name|X11
operator|->
name|time
block|,
name|qt_xdnd_current_target
block|,
name|qt_xdnd_current_proxy_target
block|,
name|w
block|,
name|current_embedding_widget
block|,
name|object
block|}
decl_stmt|;
name|X11
operator|->
name|dndDropTransactions
operator|.
name|append
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|restartXdndDropExpiryTimer
argument_list|()
expr_stmt|;
if|if
condition|(
name|w
condition|)
name|X11
operator|->
name|xdndHandleDrop
argument_list|(
name|w
argument_list|,
operator|(
specifier|const
name|XEvent
operator|*
operator|)
operator|&
name|drop
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
name|XSendEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|qt_xdnd_current_proxy_target
argument_list|,
name|False
argument_list|,
name|NoEventMask
argument_list|,
operator|(
name|XEvent
operator|*
operator|)
operator|&
name|drop
argument_list|)
expr_stmt|;
name|qt_xdnd_current_target
operator|=
literal|0
expr_stmt|;
name|qt_xdnd_current_proxy_target
operator|=
literal|0
expr_stmt|;
name|qt_xdnd_source_current_time
operator|=
literal|0
expr_stmt|;
name|current_embedding_widget
operator|=
literal|0
expr_stmt|;
name|object
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
if|if
condition|(
name|restoreCursor
condition|)
block|{
name|QApplication
operator|::
name|restoreOverrideCursor
argument_list|()
expr_stmt|;
name|restoreCursor
operator|=
literal|false
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|xdndHandleBadwindow
name|bool
name|QX11Data
operator|::
name|xdndHandleBadwindow
parameter_list|()
block|{
if|if
condition|(
name|qt_xdnd_current_target
condition|)
block|{
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
if|if
condition|(
name|manager
operator|->
name|object
condition|)
block|{
name|qt_xdnd_current_target
operator|=
literal|0
expr_stmt|;
name|qt_xdnd_current_proxy_target
operator|=
literal|0
expr_stmt|;
name|manager
operator|->
name|object
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|manager
operator|->
name|object
operator|=
literal|0
expr_stmt|;
operator|delete
name|xdnd_data
operator|.
name|deco
expr_stmt|;
name|xdnd_data
operator|.
name|deco
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|qt_xdnd_dragsource_xid
condition|)
block|{
name|qt_xdnd_dragsource_xid
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|qt_xdnd_current_widget
condition|)
block|{
name|QApplication
operator|::
name|postEvent
argument_list|(
name|qt_xdnd_current_widget
argument_list|,
operator|new
name|QDragLeaveEvent
argument_list|)
expr_stmt|;
name|qt_xdnd_current_widget
operator|=
literal|0
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|xdndHandleSelectionRequest
name|void
name|QX11Data
operator|::
name|xdndHandleSelectionRequest
parameter_list|(
specifier|const
name|XSelectionRequestEvent
modifier|*
name|req
parameter_list|)
block|{
if|if
condition|(
operator|!
name|req
condition|)
return|return;
name|XEvent
name|evt
decl_stmt|;
name|evt
operator|.
name|xselection
operator|.
name|type
operator|=
name|SelectionNotify
expr_stmt|;
name|evt
operator|.
name|xselection
operator|.
name|display
operator|=
name|req
operator|->
name|display
expr_stmt|;
name|evt
operator|.
name|xselection
operator|.
name|requestor
operator|=
name|req
operator|->
name|requestor
expr_stmt|;
name|evt
operator|.
name|xselection
operator|.
name|selection
operator|=
name|req
operator|->
name|selection
expr_stmt|;
name|evt
operator|.
name|xselection
operator|.
name|target
operator|=
name|XNone
expr_stmt|;
name|evt
operator|.
name|xselection
operator|.
name|property
operator|=
name|XNone
expr_stmt|;
name|evt
operator|.
name|xselection
operator|.
name|time
operator|=
name|req
operator|->
name|time
expr_stmt|;
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|QDrag
modifier|*
name|currentObject
init|=
name|manager
operator|->
name|object
decl_stmt|;
comment|// which transaction do we use? (note: -2 means use current manager->object)
name|int
name|at
init|=
operator|-
literal|1
decl_stmt|;
comment|// figure out which data the requestor is really interested in
if|if
condition|(
name|manager
operator|->
name|object
operator|&&
name|req
operator|->
name|time
operator|==
name|qt_xdnd_source_current_time
condition|)
block|{
comment|// requestor wants the current drag data
name|at
operator|=
operator|-
literal|2
expr_stmt|;
block|}
else|else
block|{
comment|// if someone has requested data in response to XdndDrop, find the corresponding transaction. the
comment|// spec says to call XConvertSelection() using the timestamp from the XdndDrop
name|at
operator|=
name|findXdndDropTransactionByTime
argument_list|(
name|req
operator|->
name|time
argument_list|)
expr_stmt|;
if|if
condition|(
name|at
operator|==
operator|-
literal|1
condition|)
block|{
comment|// no dice, perhaps the client was nice enough to use the same window id in XConvertSelection()
comment|// that we sent the XdndDrop event to.
name|at
operator|=
name|findXdndDropTransactionByWindow
argument_list|(
name|req
operator|->
name|requestor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|at
operator|==
operator|-
literal|1
operator|&&
name|req
operator|->
name|time
operator|==
name|CurrentTime
condition|)
block|{
comment|// previous Qt versions always requested the data on a child of the target window
comment|// using CurrentTime... but it could be asking for either drop data or the current drag's data
name|Window
name|target
init|=
name|findXdndAwareParent
argument_list|(
name|req
operator|->
name|requestor
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
condition|)
block|{
if|if
condition|(
name|qt_xdnd_current_target
operator|&&
name|qt_xdnd_current_target
operator|==
name|target
condition|)
name|at
operator|=
operator|-
literal|2
expr_stmt|;
else|else
name|at
operator|=
name|findXdndDropTransactionByWindow
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|at
operator|>=
literal|0
condition|)
block|{
name|restartXdndDropExpiryTimer
argument_list|()
expr_stmt|;
comment|// use the drag object from an XdndDrop tansaction
name|manager
operator|->
name|object
operator|=
name|X11
operator|->
name|dndDropTransactions
operator|.
name|at
argument_list|(
name|at
argument_list|)
operator|.
name|object
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|at
operator|!=
operator|-
literal|2
condition|)
block|{
comment|// no transaction found, we'll have to reject the request
name|manager
operator|->
name|object
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|manager
operator|->
name|object
condition|)
block|{
name|Atom
name|atomFormat
init|=
name|req
operator|->
name|target
decl_stmt|;
name|int
name|dataFormat
init|=
literal|0
decl_stmt|;
name|QByteArray
name|data
decl_stmt|;
if|if
condition|(
name|X11
operator|->
name|xdndMimeDataForAtom
argument_list|(
name|req
operator|->
name|target
argument_list|,
name|manager
operator|->
name|dragPrivate
argument_list|()
operator|->
name|data
argument_list|,
operator|&
name|data
argument_list|,
operator|&
name|atomFormat
argument_list|,
operator|&
name|dataFormat
argument_list|)
condition|)
block|{
name|int
name|dataSize
init|=
name|data
operator|.
name|size
argument_list|()
operator|/
operator|(
name|dataFormat
operator|/
literal|8
operator|)
decl_stmt|;
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|req
operator|->
name|requestor
argument_list|,
name|req
operator|->
name|property
argument_list|,
name|atomFormat
argument_list|,
name|dataFormat
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|data
operator|.
name|data
argument_list|()
argument_list|,
name|dataSize
argument_list|)
expr_stmt|;
name|evt
operator|.
name|xselection
operator|.
name|property
operator|=
name|req
operator|->
name|property
expr_stmt|;
name|evt
operator|.
name|xselection
operator|.
name|target
operator|=
name|atomFormat
expr_stmt|;
block|}
block|}
comment|// reset manager->object in case we modified it above
name|manager
operator|->
name|object
operator|=
name|currentObject
expr_stmt|;
comment|// ### this can die if req->requestor crashes at the wrong
comment|// ### moment
name|XSendEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|req
operator|->
name|requestor
argument_list|,
name|False
argument_list|,
literal|0
argument_list|,
operator|&
name|evt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|xdndObtainData
specifier|static
name|QVariant
name|xdndObtainData
parameter_list|(
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|QVariant
operator|::
name|Type
name|requestedType
parameter_list|)
block|{
name|QByteArray
name|result
decl_stmt|;
name|QWidget
modifier|*
name|w
decl_stmt|;
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
if|if
condition|(
name|qt_xdnd_dragsource_xid
operator|&&
name|manager
operator|->
name|object
operator|&&
operator|(
name|w
operator|=
name|QWidget
operator|::
name|find
argument_list|(
name|qt_xdnd_dragsource_xid
argument_list|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
operator|||
name|w
operator|->
name|acceptDrops
argument_list|()
operator|)
condition|)
block|{
name|QDragPrivate
modifier|*
name|o
init|=
name|QDragManager
operator|::
name|self
argument_list|()
operator|->
name|dragPrivate
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|->
name|data
operator|->
name|hasFormat
argument_list|(
name|QLatin1String
argument_list|(
name|format
argument_list|)
argument_list|)
condition|)
name|result
operator|=
name|o
operator|->
name|data
operator|->
name|data
argument_list|(
name|QLatin1String
argument_list|(
name|format
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|QList
argument_list|<
name|Atom
argument_list|>
name|atoms
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|qt_xdnd_types
index|[
name|i
index|]
operator|)
condition|)
block|{
name|atoms
operator|.
name|append
argument_list|(
name|qt_xdnd_types
index|[
name|i
index|]
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|QByteArray
name|encoding
decl_stmt|;
name|Atom
name|a
init|=
name|X11
operator|->
name|xdndMimeAtomForFormat
argument_list|(
name|QLatin1String
argument_list|(
name|format
argument_list|)
argument_list|,
name|requestedType
argument_list|,
name|atoms
argument_list|,
operator|&
name|encoding
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|a
condition|)
return|return
name|result
return|;
if|if
condition|(
name|XGetSelectionOwner
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|ATOM
argument_list|(
name|XdndSelection
argument_list|)
argument_list|)
operator|==
name|XNone
condition|)
return|return
name|result
return|;
comment|// should never happen?
name|QWidget
modifier|*
name|tw
init|=
name|qt_xdnd_current_widget
decl_stmt|;
if|if
condition|(
operator|!
name|qt_xdnd_current_widget
operator|||
operator|(
name|qt_xdnd_current_widget
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
name|tw
operator|=
operator|new
name|QWidget
expr_stmt|;
name|XConvertSelection
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|ATOM
argument_list|(
name|XdndSelection
argument_list|)
argument_list|,
name|a
argument_list|,
name|ATOM
argument_list|(
name|XdndSelection
argument_list|)
argument_list|,
name|tw
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
name|qt_xdnd_target_current_time
argument_list|)
expr_stmt|;
name|XFlush
argument_list|(
name|X11
operator|->
name|display
argument_list|)
expr_stmt|;
name|XEvent
name|xevent
decl_stmt|;
name|bool
name|got
init|=
name|X11
operator|->
name|clipboardWaitForEvent
argument_list|(
name|tw
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
name|SelectionNotify
argument_list|,
operator|&
name|xevent
argument_list|,
literal|5000
argument_list|)
decl_stmt|;
if|if
condition|(
name|got
condition|)
block|{
name|Atom
name|type
decl_stmt|;
if|if
condition|(
name|X11
operator|->
name|clipboardReadProperty
argument_list|(
name|tw
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|XdndSelection
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|&
name|result
argument_list|,
literal|0
argument_list|,
operator|&
name|type
argument_list|,
literal|0
argument_list|)
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|ATOM
argument_list|(
name|INCR
argument_list|)
condition|)
block|{
name|int
name|nbytes
init|=
name|result
operator|.
name|size
argument_list|()
operator|>=
literal|4
condition|?
operator|*
operator|(
operator|(
name|int
operator|*
operator|)
name|result
operator|.
name|data
argument_list|()
operator|)
else|:
literal|0
decl_stmt|;
name|result
operator|=
name|X11
operator|->
name|clipboardReadIncrementalProperty
argument_list|(
name|tw
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|XdndSelection
argument_list|)
argument_list|,
name|nbytes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|!=
name|a
operator|&&
name|type
operator|!=
name|XNone
condition|)
block|{
name|DEBUG
argument_list|(
literal|"Qt clipboard: unknown atom %ld"
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|qt_xdnd_current_widget
operator|||
operator|(
name|qt_xdnd_current_widget
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
operator|delete
name|tw
expr_stmt|;
return|return
name|X11
operator|->
name|xdndMimeConvertToFormat
argument_list|(
name|a
argument_list|,
name|result
argument_list|,
name|QLatin1String
argument_list|(
name|format
argument_list|)
argument_list|,
name|requestedType
argument_list|,
name|encoding
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*   Enable drag and drop for widget w by installing the proper   properties on w's toplevel widget. */
end_comment
begin_function
DECL|function|dndEnable
name|bool
name|QX11Data
operator|::
name|dndEnable
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|bool
name|on
parameter_list|)
block|{
name|w
operator|=
name|w
operator|->
name|window
argument_list|()
expr_stmt|;
if|if
condition|(
name|bool
argument_list|(
operator|(
operator|(
name|QExtraWidget
operator|*
operator|)
name|w
operator|)
operator|->
name|topData
argument_list|()
operator|->
name|dnd
argument_list|)
operator|==
name|on
condition|)
return|return
literal|true
return|;
comment|// been there, done that
operator|(
operator|(
name|QExtraWidget
operator|*
operator|)
name|w
operator|)
operator|->
name|topData
argument_list|()
operator|->
name|dnd
operator|=
name|on
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|motifdndEnable
argument_list|(
name|w
argument_list|,
name|on
argument_list|)
expr_stmt|;
return|return
name|xdndEnable
argument_list|(
name|w
argument_list|,
name|on
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|drag
name|Qt
operator|::
name|DropAction
name|QDragManager
operator|::
name|drag
parameter_list|(
name|QDrag
modifier|*
name|o
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
name|o
operator|||
operator|!
name|o
operator|||
operator|!
name|o
operator|->
name|d_func
argument_list|()
operator|->
name|source
condition|)
return|return
name|Qt
operator|::
name|IgnoreAction
return|;
if|if
condition|(
name|object
condition|)
block|{
name|cancel
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|beingCancelled
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|object
condition|)
block|{
comment|// the last drag and drop operation hasn't finished, so we are going to wait
comment|// for one second to see if it does... if the finish message comes after this,
comment|// then we could still have problems, but this is highly unlikely
name|QApplication
operator|::
name|flush
argument_list|()
expr_stmt|;
name|QElapsedTimer
name|timer
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
do|do
block|{
name|XEvent
name|event
decl_stmt|;
if|if
condition|(
name|XCheckTypedEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|ClientMessage
argument_list|,
operator|&
name|event
argument_list|)
condition|)
name|qApp
operator|->
name|x11ProcessEvent
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
comment|// sleep 50 ms, so we don't use up CPU cycles all the time.
name|struct
name|timeval
name|usleep_tv
decl_stmt|;
name|usleep_tv
operator|.
name|tv_sec
operator|=
literal|0
expr_stmt|;
name|usleep_tv
operator|.
name|tv_usec
operator|=
literal|50000
expr_stmt|;
name|select
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|usleep_tv
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|object
operator|&&
name|timer
operator|.
name|hasExpired
argument_list|(
literal|1000
argument_list|)
condition|)
do|;
block|}
name|object
operator|=
name|o
expr_stmt|;
name|object
operator|->
name|d_func
argument_list|()
operator|->
name|target
operator|=
literal|0
expr_stmt|;
name|xdnd_data
operator|.
name|deco
operator|=
operator|new
name|QShapedPixmapWidget
argument_list|(
name|object
operator|->
name|source
argument_list|()
operator|->
name|window
argument_list|()
argument_list|)
expr_stmt|;
name|willDrop
operator|=
literal|false
expr_stmt|;
name|updatePixmap
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|XSetSelectionOwner
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|ATOM
argument_list|(
name|XdndSelection
argument_list|)
argument_list|,
name|dragPrivate
argument_list|()
operator|->
name|source
operator|->
name|window
argument_list|()
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|X11
operator|->
name|time
argument_list|)
expr_stmt|;
name|global_accepted_action
operator|=
name|Qt
operator|::
name|CopyAction
expr_stmt|;
name|qt_xdnd_source_sameanswer
operator|=
name|QRect
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
comment|// set the override cursor (must be done here, since it is updated
comment|// in the call to move() below)
name|qApp
operator|->
name|setOverrideCursor
argument_list|(
name|Qt
operator|::
name|ArrowCursor
argument_list|)
expr_stmt|;
name|restoreCursor
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
name|move
argument_list|(
name|QCursor
operator|::
name|pos
argument_list|()
argument_list|)
expr_stmt|;
name|heartbeat
operator|=
name|startTimer
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|qt_xdnd_dragging
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
condition|)
name|xdnd_data
operator|.
name|deco
operator|->
name|grabMouse
argument_list|()
expr_stmt|;
name|eventLoop
operator|=
operator|new
name|QEventLoop
expr_stmt|;
operator|(
name|void
operator|)
name|eventLoop
operator|->
name|exec
argument_list|()
expr_stmt|;
operator|delete
name|eventLoop
expr_stmt|;
name|eventLoop
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
if|if
condition|(
name|restoreCursor
condition|)
block|{
name|qApp
operator|->
name|restoreOverrideCursor
argument_list|()
expr_stmt|;
name|restoreCursor
operator|=
literal|false
expr_stmt|;
block|}
endif|#
directive|endif
comment|// delete cursors as they may be different next drag.
operator|delete
name|noDropCursor
expr_stmt|;
name|noDropCursor
operator|=
literal|0
expr_stmt|;
operator|delete
name|copyCursor
expr_stmt|;
name|copyCursor
operator|=
literal|0
expr_stmt|;
operator|delete
name|moveCursor
expr_stmt|;
name|moveCursor
operator|=
literal|0
expr_stmt|;
operator|delete
name|linkCursor
expr_stmt|;
name|linkCursor
operator|=
literal|0
expr_stmt|;
operator|delete
name|xdnd_data
operator|.
name|deco
expr_stmt|;
name|xdnd_data
operator|.
name|deco
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|heartbeat
operator|!=
operator|-
literal|1
condition|)
name|killTimer
argument_list|(
name|heartbeat
argument_list|)
expr_stmt|;
name|heartbeat
operator|=
operator|-
literal|1
expr_stmt|;
name|qt_xdnd_current_screen
operator|=
operator|-
literal|1
expr_stmt|;
name|qt_xdnd_dragging
operator|=
literal|false
expr_stmt|;
return|return
name|global_accepted_action
return|;
comment|// object persists until we get an xdnd_finish message
block|}
end_function
begin_function
DECL|function|updatePixmap
name|void
name|QDragManager
operator|::
name|updatePixmap
parameter_list|()
block|{
if|if
condition|(
name|xdnd_data
operator|.
name|deco
condition|)
block|{
name|QPixmap
name|pm
decl_stmt|;
name|QPoint
name|pm_hot
argument_list|(
name|default_pm_hotx
argument_list|,
name|default_pm_hoty
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
condition|)
block|{
name|pm
operator|=
name|dragPrivate
argument_list|()
operator|->
name|pixmap
expr_stmt|;
if|if
condition|(
operator|!
name|pm
operator|.
name|isNull
argument_list|()
condition|)
name|pm_hot
operator|=
name|dragPrivate
argument_list|()
operator|->
name|hotspot
expr_stmt|;
block|}
if|if
condition|(
name|pm
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|defaultPm
condition|)
name|defaultPm
operator|=
operator|new
name|QPixmap
argument_list|(
name|default_pm
argument_list|)
expr_stmt|;
name|pm
operator|=
operator|*
name|defaultPm
expr_stmt|;
block|}
name|xdnd_data
operator|.
name|deco
operator|->
name|pm_hot
operator|=
name|pm_hot
expr_stmt|;
name|xdnd_data
operator|.
name|deco
operator|->
name|setPixmap
argument_list|(
name|pm
argument_list|)
expr_stmt|;
name|xdnd_data
operator|.
name|deco
operator|->
name|move
argument_list|(
name|QCursor
operator|::
name|pos
argument_list|()
operator|-
name|pm_hot
argument_list|)
expr_stmt|;
name|xdnd_data
operator|.
name|deco
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|retrieveData_sys
name|QVariant
name|QDropData
operator|::
name|retrieveData_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimetype
parameter_list|,
name|QVariant
operator|::
name|Type
name|requestedType
parameter_list|)
specifier|const
block|{
name|QByteArray
name|mime
init|=
name|mimetype
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QVariant
name|data
init|=
name|X11
operator|->
name|motifdnd_active
condition|?
name|X11
operator|->
name|motifdndObtainData
argument_list|(
name|mime
argument_list|)
else|:
name|xdndObtainData
argument_list|(
name|mime
argument_list|,
name|requestedType
argument_list|)
decl_stmt|;
return|return
name|data
return|;
block|}
end_function
begin_function
DECL|function|hasFormat_sys
name|bool
name|QDropData
operator|::
name|hasFormat_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|format
parameter_list|)
specifier|const
block|{
return|return
name|formats
argument_list|()
operator|.
name|contains
argument_list|(
name|format
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|formats_sys
name|QStringList
name|QDropData
operator|::
name|formats_sys
parameter_list|()
specifier|const
block|{
name|QStringList
name|formats
decl_stmt|;
if|if
condition|(
name|X11
operator|->
name|motifdnd_active
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|QByteArray
name|fmt
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|fmt
operator|=
name|X11
operator|->
name|motifdndFormat
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|formats
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
name|fmt
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|qt_xdnd_types
index|[
name|i
index|]
operator|)
condition|)
block|{
name|QStringList
name|formatsForAtom
init|=
name|X11
operator|->
name|xdndMimeFormatsForAtom
argument_list|(
name|qt_xdnd_types
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|formatsForAtom
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
operator|!
name|formats
operator|.
name|contains
argument_list|(
name|formatsForAtom
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
name|formats
operator|.
name|append
argument_list|(
name|formatsForAtom
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
block|}
block|}
return|return
name|formats
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
end_unit
