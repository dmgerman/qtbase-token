begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qguiapplication.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_include
include|#
directive|include
file|"qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qcursor.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qdnd_p.h"
end_include
begin_include
include|#
directive|include
file|"qwindow.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|QT_USE_NAMESPACE
DECL|variable|defaultPm
specifier|static
name|QPixmap
modifier|*
name|defaultPm
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|default_pm_hotx
specifier|static
specifier|const
name|int
name|default_pm_hotx
init|=
operator|-
literal|2
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|default_pm_hoty
specifier|static
specifier|const
name|int
name|default_pm_hoty
init|=
operator|-
literal|16
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|default_pm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|default_pm
index|[]
init|=
block|{
literal|"13 9 3 1"
block|,
literal|".      c None"
block|,
literal|"       c #000000"
block|,
literal|"X      c #FFFFFF"
block|,
literal|"X X X X X X X"
block|,
literal|" X X X X X X "
block|,
literal|"X ......... X"
block|,
literal|" X.........X "
block|,
literal|"X ......... X"
block|,
literal|" X.........X "
block|,
literal|"X ......... X"
block|,
literal|" X X X X X X "
block|,
literal|"X X X X X X X"
block|, }
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Shift/Ctrl handling, and final drop status
end_comment
begin_decl_stmt
DECL|variable|global_accepted_action
specifier|static
name|Qt
operator|::
name|DropAction
name|global_accepted_action
init|=
name|Qt
operator|::
name|CopyAction
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|possible_actions
specifier|static
name|Qt
operator|::
name|DropActions
name|possible_actions
init|=
name|Qt
operator|::
name|IgnoreAction
decl_stmt|;
end_decl_stmt
begin_comment
comment|// static variables in place of a proper cross-process solution
end_comment
begin_decl_stmt
DECL|variable|drag_object
specifier|static
name|QDrag
modifier|*
name|drag_object
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_qws_dnd_dragging
specifier|static
name|bool
name|qt_qws_dnd_dragging
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|oldstate
specifier|static
name|Qt
operator|::
name|KeyboardModifiers
name|oldstate
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QShapedPixmapWindow
class|class
name|QShapedPixmapWindow
super|:
specifier|public
name|QWindow
block|{
DECL|member|pixmap
name|QPixmap
name|pixmap
decl_stmt|;
public|public:
DECL|function|QShapedPixmapWindow
name|QShapedPixmapWindow
parameter_list|()
member_init_list|:
name|QWindow
argument_list|(
literal|0
argument_list|)
block|{
name|setWindowFlags
argument_list|(
name|Qt
operator|::
name|Tool
operator||
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|X11BypassWindowManagerHint
argument_list|)
expr_stmt|;
comment|// ### Should we set the surface type to raster?
comment|// ### FIXME
comment|//            setAttribute(Qt::WA_TransparentForMouseEvents);
block|}
DECL|function|move
name|void
name|move
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
block|{
name|QRect
name|g
init|=
name|geometry
argument_list|()
decl_stmt|;
name|g
operator|.
name|setTopLeft
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|setGeometry
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
DECL|function|setPixmap
name|void
name|setPixmap
parameter_list|(
name|QPixmap
name|pm
parameter_list|)
block|{
name|pixmap
operator|=
name|pm
expr_stmt|;
comment|// ###
comment|//        if (!pixmap.mask().isNull()) {
comment|//            setMask(pixmap.mask());
comment|//        } else {
comment|//            clearMask();
comment|//        }
comment|//        resize(pm.width(),pm.height());
block|}
comment|// ### Get it painted again!
comment|//    void paintEvent(QPaintEvent*)
comment|//    {
comment|//        QPainter p(this);
comment|//        p.drawPixmap(0,0,pixmap);
comment|//    }
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|qt_qws_dnd_deco
specifier|static
name|QShapedPixmapWindow
modifier|*
name|qt_qws_dnd_deco
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|updatePixmap
name|void
name|QDragManager
operator|::
name|updatePixmap
parameter_list|()
block|{
if|if
condition|(
name|qt_qws_dnd_deco
condition|)
block|{
name|QPixmap
name|pm
decl_stmt|;
name|QPoint
name|pm_hot
argument_list|(
name|default_pm_hotx
argument_list|,
name|default_pm_hoty
argument_list|)
decl_stmt|;
if|if
condition|(
name|drag_object
condition|)
block|{
name|pm
operator|=
name|drag_object
operator|->
name|pixmap
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|pm
operator|.
name|isNull
argument_list|()
condition|)
name|pm_hot
operator|=
name|drag_object
operator|->
name|hotSpot
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pm
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|defaultPm
condition|)
name|defaultPm
operator|=
operator|new
name|QPixmap
argument_list|(
name|default_pm
argument_list|)
expr_stmt|;
name|pm
operator|=
operator|*
name|defaultPm
expr_stmt|;
block|}
name|qt_qws_dnd_deco
operator|->
name|setPixmap
argument_list|(
name|pm
argument_list|)
expr_stmt|;
name|qt_qws_dnd_deco
operator|->
name|move
argument_list|(
name|QCursor
operator|::
name|pos
argument_list|()
operator|-
name|pm_hot
argument_list|)
expr_stmt|;
if|if
condition|(
name|willDrop
condition|)
block|{
name|qt_qws_dnd_deco
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qt_qws_dnd_deco
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|QDragManager
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|move
name|void
name|QDragManager
operator|::
name|move
parameter_list|(
specifier|const
name|QPoint
modifier|&
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|updateCursor
name|void
name|QDragManager
operator|::
name|updateCursor
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
if|if
condition|(
name|willDrop
condition|)
block|{
if|if
condition|(
name|qt_qws_dnd_deco
condition|)
name|qt_qws_dnd_deco
operator|->
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentActionForOverrideCursor
operator|!=
name|global_accepted_action
condition|)
block|{
name|QGuiApplication
operator|::
name|changeOverrideCursor
argument_list|(
name|QCursor
argument_list|(
name|dragCursor
argument_list|(
name|global_accepted_action
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|currentActionForOverrideCursor
operator|=
name|global_accepted_action
expr_stmt|;
block|}
block|}
else|else
block|{
name|QCursor
modifier|*
name|overrideCursor
init|=
name|QGuiApplication
operator|::
name|overrideCursor
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|overrideCursor
operator|||
name|overrideCursor
operator|->
name|shape
argument_list|()
operator|!=
name|Qt
operator|::
name|ForbiddenCursor
condition|)
block|{
name|QGuiApplication
operator|::
name|changeOverrideCursor
argument_list|(
name|QCursor
argument_list|(
name|Qt
operator|::
name|ForbiddenCursor
argument_list|)
argument_list|)
expr_stmt|;
name|currentActionForOverrideCursor
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
block|}
if|if
condition|(
name|qt_qws_dnd_deco
condition|)
name|qt_qws_dnd_deco
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|eventFilter
name|bool
name|QDragManager
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|#
directive|if
literal|0
comment|// ###
block|if (beingCancelled) {      if (e->type() == QEvent::KeyRelease&& static_cast<QKeyEvent*>(e)->key() == Qt::Key_Escape) {             qApp->removeEventFilter(this);             Q_ASSERT(object == 0);             beingCancelled = false;             eventLoop->exit();             return true;
comment|// block the key release
block|}         return false;     }        if (!o->isWidgetType())         return false;      switch(e->type()) {         case QEvent::ShortcutOverride:
comment|// prevent accelerators from firing while dragging
block|e->accept();             return true;          case QEvent::KeyPress:         case QEvent::KeyRelease:         {             QKeyEvent *ke = ((QKeyEvent*)e);             if (ke->key() == Qt::Key_Escape&& e->type() == QEvent::KeyPress) {                 cancel();                 qApp->removeEventFilter(this);                 beingCancelled = false;                 eventLoop->exit();             } else {                 updateCursor();             }             return true;
comment|// Eat all key events
block|}          case QEvent::MouseButtonPress:         case QEvent::MouseMove:         {             if (!object) {
comment|//#### this should not happen
block|qWarning("QDragManager::eventFilter: No object");                 return true;             }              QDragManager *manager = QDragManager::self();             QMimeData *dropData = manager->object ? manager->dragPrivate()->data : manager->dropData;             if (manager->object)                 possible_actions =  manager->dragPrivate()->possible_actions;             else                 possible_actions = Qt::IgnoreAction;              QMouseEvent *me = (QMouseEvent *)e;             if (me->buttons()) {                 Qt::DropAction prevAction = global_accepted_action;                 QWidget *cw = QApplication::widgetAt(me->globalPos());
comment|// Fix for when we move mouse on to the deco widget
block|if (qt_qws_dnd_deco&& cw == qt_qws_dnd_deco)                     cw = object->target();                  while (cw&& !cw->acceptDrops()&& !cw->isWindow())                     cw = cw->parentWidget();                  if (object->target() != cw) {                     if (object->target()) {                         QDragLeaveEvent dle;                         QCoreApplication::sendEvent(object->target(),&dle);                         willDrop = false;                         global_accepted_action = Qt::IgnoreAction;                         updateCursor();                         restoreCursor = true;                         object->d_func()->target = 0;                     }                     if (cw&& cw->acceptDrops()) {                         object->d_func()->target = cw;                         QDragEnterEvent dee(cw->mapFromGlobal(me->globalPos()), possible_actions, dropData,                                             me->buttons(), me->modifiers());                         QCoreApplication::sendEvent(object->target(),&dee);                         willDrop = dee.isAccepted()&& dee.dropAction() != Qt::IgnoreAction;                         global_accepted_action = willDrop ? dee.dropAction() : Qt::IgnoreAction;                         updateCursor();                         restoreCursor = true;                     }                 } else if (cw) {                     QDragMoveEvent dme(cw->mapFromGlobal(me->globalPos()), possible_actions, dropData,                                        me->buttons(), me->modifiers());                     if (global_accepted_action != Qt::IgnoreAction) {                         dme.setDropAction(global_accepted_action);                         dme.accept();                     }                     QCoreApplication::sendEvent(cw,&dme);                     willDrop = dme.isAccepted();                     global_accepted_action = willDrop ? dme.dropAction() : Qt::IgnoreAction;                     updatePixmap();                     updateCursor();                 }                 if (global_accepted_action != prevAction)                     emitActionChanged(global_accepted_action);             }             return true;
comment|// Eat all mouse events
block|}          case QEvent::MouseButtonRelease:         {             qApp->removeEventFilter(this);             if (restoreCursor) {                 willDrop = false;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
block|QGuiApplication::restoreOverrideCursor();
endif|#
directive|endif
block|restoreCursor = false;             }             if (object&& object->target()) {                 QMouseEvent *me = (QMouseEvent *)e;                  QDragManager *manager = QDragManager::self();                 QMimeData *dropData = manager->object ? manager->dragPrivate()->data : manager->dropData;                  QDropEvent de(object->target()->mapFromGlobal(me->globalPos()), possible_actions, dropData,                               me->buttons(), me->modifiers());                 QCoreApplication::sendEvent(object->target(),&de);                 if (de.isAccepted())                     global_accepted_action = de.dropAction();                 else                     global_accepted_action = Qt::IgnoreAction;                  if (object)                     object->deleteLater();                 drag_object = object = 0;             }             eventLoop->exit();             return true;
comment|// Eat all mouse events
block|}          default:              break;     }
endif|#
directive|endif
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|drag
name|Qt
operator|::
name|DropAction
name|QDragManager
operator|::
name|drag
parameter_list|(
name|QDrag
modifier|*
name|o
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
name|o
operator|||
operator|!
name|o
operator|||
operator|!
name|o
operator|->
name|source
argument_list|()
condition|)
return|return
name|Qt
operator|::
name|IgnoreAction
return|;
if|if
condition|(
name|object
condition|)
block|{
name|cancel
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|beingCancelled
operator|=
literal|false
expr_stmt|;
block|}
name|object
operator|=
name|drag_object
operator|=
name|o
expr_stmt|;
name|qt_qws_dnd_deco
operator|=
operator|new
name|QShapedPixmapWindow
argument_list|()
expr_stmt|;
name|oldstate
operator|=
name|Qt
operator|::
name|NoModifier
expr_stmt|;
comment|// #### Should use state that caused the drag
comment|//    drag_mode = mode;
name|willDrop
operator|=
literal|false
expr_stmt|;
name|updatePixmap
argument_list|()
expr_stmt|;
name|updateCursor
argument_list|()
expr_stmt|;
name|restoreCursor
operator|=
literal|true
expr_stmt|;
name|object
operator|->
name|d_func
argument_list|()
operator|->
name|target
operator|=
literal|0
expr_stmt|;
name|qApp
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|global_accepted_action
operator|=
name|Qt
operator|::
name|CopyAction
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|qApp
operator|->
name|setOverrideCursor
argument_list|(
name|Qt
operator|::
name|ArrowCursor
argument_list|)
expr_stmt|;
name|restoreCursor
operator|=
literal|true
expr_stmt|;
name|updateCursor
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|qt_qws_dnd_dragging
operator|=
literal|true
expr_stmt|;
name|eventLoop
operator|=
operator|new
name|QEventLoop
expr_stmt|;
operator|(
name|void
operator|)
name|eventLoop
operator|->
name|exec
argument_list|()
expr_stmt|;
operator|delete
name|eventLoop
expr_stmt|;
name|eventLoop
operator|=
literal|0
expr_stmt|;
operator|delete
name|qt_qws_dnd_deco
expr_stmt|;
name|qt_qws_dnd_deco
operator|=
literal|0
expr_stmt|;
name|qt_qws_dnd_dragging
operator|=
literal|false
expr_stmt|;
return|return
name|global_accepted_action
return|;
block|}
end_function
begin_function
DECL|function|cancel
name|void
name|QDragManager
operator|::
name|cancel
parameter_list|(
name|bool
name|deleteSource
parameter_list|)
block|{
comment|//    qDebug("QDragManager::cancel");
name|beingCancelled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|object
operator|->
name|target
argument_list|()
condition|)
block|{
name|QDragLeaveEvent
name|dle
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|object
operator|->
name|target
argument_list|()
argument_list|,
operator|&
name|dle
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
if|if
condition|(
name|restoreCursor
condition|)
block|{
name|QGuiApplication
operator|::
name|restoreOverrideCursor
argument_list|()
expr_stmt|;
name|restoreCursor
operator|=
literal|false
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|drag_object
condition|)
block|{
if|if
condition|(
name|deleteSource
condition|)
name|object
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|drag_object
operator|=
name|object
operator|=
literal|0
expr_stmt|;
block|}
operator|delete
name|qt_qws_dnd_deco
expr_stmt|;
name|qt_qws_dnd_deco
operator|=
literal|0
expr_stmt|;
name|global_accepted_action
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drop
name|void
name|QDragManager
operator|::
name|drop
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|retrieveData_sys
name|QVariant
name|QDropData
operator|::
name|retrieveData_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimetype
parameter_list|,
name|QVariant
operator|::
name|Type
name|type
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|drag_object
condition|)
return|return
name|QVariant
argument_list|()
return|;
name|QByteArray
name|data
init|=
name|drag_object
operator|->
name|mimeData
argument_list|()
operator|->
name|data
argument_list|(
name|mimetype
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|QVariant
operator|::
name|String
condition|)
return|return
name|QString
operator|::
name|fromUtf8
argument_list|(
name|data
argument_list|)
return|;
return|return
name|data
return|;
block|}
end_function
begin_function
DECL|function|hasFormat_sys
name|bool
name|QDropData
operator|::
name|hasFormat_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|format
parameter_list|)
specifier|const
block|{
return|return
name|formats
argument_list|()
operator|.
name|contains
argument_list|(
name|format
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|formats_sys
name|QStringList
name|QDropData
operator|::
name|formats_sys
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|drag_object
condition|)
return|return
name|drag_object
operator|->
name|mimeData
argument_list|()
operator|->
name|formats
argument_list|()
return|;
return|return
name|QStringList
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
