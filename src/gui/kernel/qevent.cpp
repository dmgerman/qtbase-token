begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qcursor.h"
end_include
begin_include
include|#
directive|include
file|"private/qguiapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qevent_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qkeysequence_p.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qmimedata.h"
end_include
begin_include
include|#
directive|include
file|"private/qdnd_p.h"
end_include
begin_include
include|#
directive|include
file|"qevent_p.h"
end_include
begin_include
include|#
directive|include
file|"qmath.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QInputEvent     \ingroup events      \brief The QInputEvent class is the base class for events that     describe user input. */
end_comment
begin_comment
comment|/*!   \internal */
end_comment
begin_constructor
DECL|function|QInputEvent
name|QInputEvent
operator|::
name|QInputEvent
parameter_list|(
name|Type
name|type
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|type
argument_list|)
member_init_list|,
name|modState
argument_list|(
name|modifiers
argument_list|)
member_init_list|,
name|ts
argument_list|(
literal|0
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*!   \internal */
end_comment
begin_destructor
DECL|function|~QInputEvent
name|QInputEvent
operator|::
name|~
name|QInputEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \fn Qt::KeyboardModifiers QInputEvent::modifiers() const      Returns the keyboard modifier flags that existed immediately     before the event occurred.      \sa QApplication::keyboardModifiers() */
end_comment
begin_comment
comment|/*! \fn void QInputEvent::setModifiers(Qt::KeyboardModifiers modifiers)      \internal      Sets the keyboard modifiers flags for this event. */
end_comment
begin_comment
comment|/*!     \class QMouseEvent     \ingroup events      \brief The QMouseEvent class contains parameters that describe a mouse event.      Mouse events occur when a mouse button is pressed or released     inside a widget, or when the mouse cursor is moved.      Mouse move events will occur only when a mouse button is pressed     down, unless mouse tracking has been enabled with     QWidget::setMouseTracking().      Qt automatically grabs the mouse when a mouse button is pressed     inside a widget; the widget will continue to receive mouse events     until the last mouse button is released.      A mouse event contains a special accept flag that indicates     whether the receiver wants the event. You should call ignore() if     the mouse event is not handled by your widget. A mouse event is     propagated up the parent widget chain until a widget accepts it     with accept(), or an event filter consumes it.      \note If a mouse event is propagated to a \l{QWidget}{widget} for     which Qt::WA_NoMousePropagation has been set, that mouse event     will not be propagated further up the parent widget chain.      The state of the keyboard modifier keys can be found by calling the     \l{QInputEvent::modifiers()}{modifiers()} function, inherited from     QInputEvent.      The functions pos(), x(), and y() give the cursor position     relative to the widget that receives the mouse event. If you     move the widget as a result of the mouse event, use the global     position returned by globalPos() to avoid a shaking motion.      The QWidget::setEnabled() function can be used to enable or     disable mouse and keyboard events for a widget.      Reimplement the QWidget event handlers, QWidget::mousePressEvent(),     QWidget::mouseReleaseEvent(), QWidget::mouseDoubleClickEvent(),     and QWidget::mouseMoveEvent() to receive mouse events in your own     widgets.      \sa QWidget::setMouseTracking() QWidget::grabMouse()     QCursor::pos() */
end_comment
begin_comment
comment|/*!     Constructs a mouse event object.      The \a type parameter must be one of QEvent::MouseButtonPress,     QEvent::MouseButtonRelease, QEvent::MouseButtonDblClick,     or QEvent::MouseMove.      The \a localPos is the mouse cursor's position relative to the     receiving widget or item. The window position is set to the same value     as \a localPos.     The \a button that caused the event is given as a value from     the Qt::MouseButton enum. If the event \a type is     \l MouseMove, the appropriate button for this event is Qt::NoButton.     The mouse and keyboard states at the time of the event are specified by     \a buttons and \a modifiers.      The screenPos() is initialized to QCursor::pos(), which may not     be appropriate. Use the other constructor to specify the global     position explicitly. */
end_comment
begin_constructor
DECL|function|QMouseEvent
name|QMouseEvent
operator|::
name|QMouseEvent
parameter_list|(
name|Type
name|type
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|localPos
parameter_list|,
name|Qt
operator|::
name|MouseButton
name|button
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
member_init_list|:
name|QInputEvent
argument_list|(
name|type
argument_list|,
name|modifiers
argument_list|)
member_init_list|,
name|l
argument_list|(
name|localPos
argument_list|)
member_init_list|,
name|w
argument_list|(
name|localPos
argument_list|)
member_init_list|,
name|b
argument_list|(
name|button
argument_list|)
member_init_list|,
name|mouseState
argument_list|(
name|buttons
argument_list|)
block|{
name|s
operator|=
name|QCursor
operator|::
name|pos
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a mouse event object.      The \a type parameter must be QEvent::MouseButtonPress,     QEvent::MouseButtonRelease, QEvent::MouseButtonDblClick,     or QEvent::MouseMove.      The \a localPos is the mouse cursor's position relative to the     receiving widget or item. The cursor's position in screen coordinates is     specified by \a screenPos. The window position is set to the same value     as \a localPos. The \a button that caused the event is     given as a value from the \l Qt::MouseButton enum. If the event \a     type is \l MouseMove, the appropriate button for this event is     Qt::NoButton. \a buttons is the state of all buttons at the     time of the event, \a modifiers the state of all keyboard     modifiers.  */
end_comment
begin_constructor
DECL|function|QMouseEvent
name|QMouseEvent
operator|::
name|QMouseEvent
parameter_list|(
name|Type
name|type
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|localPos
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|screenPos
parameter_list|,
name|Qt
operator|::
name|MouseButton
name|button
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
member_init_list|:
name|QInputEvent
argument_list|(
name|type
argument_list|,
name|modifiers
argument_list|)
member_init_list|,
name|l
argument_list|(
name|localPos
argument_list|)
member_init_list|,
name|w
argument_list|(
name|localPos
argument_list|)
member_init_list|,
name|s
argument_list|(
name|screenPos
argument_list|)
member_init_list|,
name|b
argument_list|(
name|button
argument_list|)
member_init_list|,
name|mouseState
argument_list|(
name|buttons
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*!     Constructs a mouse event object.      The \a type parameter must be QEvent::MouseButtonPress,     QEvent::MouseButtonRelease, QEvent::MouseButtonDblClick,     or QEvent::MouseMove.      The \a pos is the mouse cursor's position relative to the     receiving widget. The cursor's position in global coordinates is     specified by \a globalPos.  The \a button that caused the event is     given as a value from the \l Qt::MouseButton enum. If the event \a     type is \l MouseMove, the appropriate button for this event is     Qt::NoButton. \a buttons is the state of all buttons at the     time of the event, \a modifiers the state of all keyboard     modifiers.  */
end_comment
begin_constructor
DECL|function|QMouseEvent
name|QMouseEvent
operator|::
name|QMouseEvent
parameter_list|(
name|Type
name|type
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|localPos
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|windowPos
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|screenPos
parameter_list|,
name|Qt
operator|::
name|MouseButton
name|button
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
member_init_list|:
name|QInputEvent
argument_list|(
name|type
argument_list|,
name|modifiers
argument_list|)
member_init_list|,
name|l
argument_list|(
name|localPos
argument_list|)
member_init_list|,
name|w
argument_list|(
name|windowPos
argument_list|)
member_init_list|,
name|s
argument_list|(
name|screenPos
argument_list|)
member_init_list|,
name|b
argument_list|(
name|button
argument_list|)
member_init_list|,
name|mouseState
argument_list|(
name|buttons
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_destructor
DECL|function|~QMouseEvent
name|QMouseEvent
operator|::
name|~
name|QMouseEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \fn QPointF QMouseEvent::localPos() const      \since 5.0      Returns the position of the mouse cursor as a QPointF, relative to the     widget or item that received the event.      If you move the widget as a result of the mouse event, use the     screen position returned by screenPos() to avoid a shaking     motion.      \sa x() y() windowPos() screenPos() */
end_comment
begin_comment
comment|/*!     \fn QPointF QMouseEvent::windowPos() const      \since 5.0      Returns the position of the mouse cursor as a QPointF, relative to the     window that received the event.      If you move the widget as a result of the mouse event, use the     global position returned by globalPos() to avoid a shaking     motion.      \sa x() y() pos() localPos() screenPos() */
end_comment
begin_comment
comment|/*!     \fn QPointF QMouseEvent::screenPos() const      \since 5.0      Returns the position of the mouse cursor as a QPointF, relative to the     screen that received the event.      \sa x() y() pos() localPos() screenPos() */
end_comment
begin_comment
comment|/*!     \fn const QPoint&QMouseEvent::pos() const      Returns the position of the mouse cursor, relative to the widget     that received the event.      If you move the widget as a result of the mouse event, use the     global position returned by globalPos() to avoid a shaking     motion.      \sa x() y() globalPos() */
end_comment
begin_comment
comment|/*!     \fn const QPoint&QMouseEvent::globalPos() const      Returns the global position of the mouse cursor \e{at the time     of the event}. This is important on asynchronous window systems     like X11. Whenever you move your widgets around in response to     mouse events, globalPos() may differ a lot from the current     pointer position QCursor::pos(), and from     QWidget::mapToGlobal(pos()).      \sa globalX() globalY() */
end_comment
begin_comment
comment|/*!     \fn int QMouseEvent::x() const      Returns the x position of the mouse cursor, relative to the     widget that received the event.      \sa y() pos() */
end_comment
begin_comment
comment|/*!     \fn int QMouseEvent::y() const      Returns the y position of the mouse cursor, relative to the     widget that received the event.      \sa x() pos() */
end_comment
begin_comment
comment|/*!     \fn int QMouseEvent::globalX() const      Returns the global x position of the mouse cursor at the time of     the event.      \sa globalY() globalPos() */
end_comment
begin_comment
comment|/*!     \fn int QMouseEvent::globalY() const      Returns the global y position of the mouse cursor at the time of     the event.      \sa globalX() globalPos() */
end_comment
begin_comment
comment|/*!     \fn Qt::MouseButton QMouseEvent::button() const      Returns the button that caused the event.      Note that the returned value is always Qt::NoButton for mouse     move events.      \sa buttons() Qt::MouseButton */
end_comment
begin_comment
comment|/*!     \fn Qt::MouseButton QMouseEvent::buttons() const      Returns the button state when the event was generated. The button     state is a combination of Qt::LeftButton, Qt::RightButton,     Qt::MidButton using the OR operator. For mouse move events,     this is all buttons that are pressed down. For mouse press and     double click events this includes the button that caused the     event. For mouse release events this excludes the button that     caused the event.      \sa button() Qt::MouseButton */
end_comment
begin_comment
comment|/*!     \class QHoverEvent     \ingroup events      \brief The QHoverEvent class contains parameters that describe a mouse event.      Mouse events occur when a mouse cursor is moved into, out of, or within a     widget, and if the widget has the Qt::WA_Hover attribute.      The function pos() gives the current cursor position, while oldPos() gives     the old mouse position.      There are a few similarities between the events QEvent::HoverEnter     and QEvent::HoverLeave, and the events QEvent::Enter and QEvent::Leave.     However, they are slightly different because we do an update() in the event     handler of HoverEnter and HoverLeave.      QEvent::HoverMove is also slightly different from QEvent::MouseMove. Let us     consider a top-level window A containing a child B which in turn contains a     child C (all with mouse tracking enabled):      \image hoverevents.png      Now, if you move the cursor from the top to the bottom in the middle of A,     you will get the following QEvent::MouseMove events:      \list 1         \o A::MouseMove         \o B::MouseMove         \o C::MouseMove     \endlist      You will get the same events for QEvent::HoverMove, except that the event     always propagates to the top-level regardless whether the event is accepted     or not. It will only stop propagating with the Qt::WA_NoMousePropagation     attribute.      In this case the events will occur in the following way:      \list 1         \o A::HoverMove         \o A::HoverMove, B::HoverMove         \o A::HoverMove, B::HoverMove, C::HoverMove     \endlist  */
end_comment
begin_comment
comment|/*!     \fn const QPoint&QHoverEvent::pos() const      Returns the position of the mouse cursor, relative to the widget     that received the event.      On QEvent::HoverLeave events, this position will always be     QPoint(-1, -1).      \sa oldPos() */
end_comment
begin_comment
comment|/*!     \fn const QPoint&QHoverEvent::oldPos() const      Returns the previous position of the mouse cursor, relative to the widget     that received the event. If there is no previous position, oldPos() will     return the same position as pos().      On QEvent::HoverEnter events, this position will always be     QPoint(-1, -1).      \sa pos() */
end_comment
begin_comment
comment|/*!     Constructs a hover event object.      The \a type parameter must be QEvent::HoverEnter,     QEvent::HoverLeave, or QEvent::HoverMove.      The \a pos is the current mouse cursor's position relative to the     receiving widget, while \a oldPos is the previous mouse cursor's     position relative to the receiving widget. */
end_comment
begin_constructor
DECL|function|QHoverEvent
name|QHoverEvent
operator|::
name|QHoverEvent
parameter_list|(
name|Type
name|type
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|oldPos
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
member_init_list|:
name|QInputEvent
argument_list|(
name|type
argument_list|,
name|modifiers
argument_list|)
member_init_list|,
name|p
argument_list|(
name|pos
argument_list|)
member_init_list|,
name|op
argument_list|(
name|oldPos
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_destructor
DECL|function|~QHoverEvent
name|QHoverEvent
operator|::
name|~
name|QHoverEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \class QWheelEvent     \brief The QWheelEvent class contains parameters that describe a wheel event.      \ingroup events      Wheel events are sent to the widget under the mouse cursor, but     if that widget does not handle the event they are sent to the     focus widget. The rotation distance is provided by delta().     The functions pos() and globalPos() return the mouse cursor's     location at the time of the event.      A wheel event contains a special accept flag that indicates     whether the receiver wants the event. You should call ignore() if     you do not handle the wheel event; this ensures that it will be     sent to the parent widget.      The QWidget::setEnabled() function can be used to enable or     disable mouse and keyboard events for a widget.      The event handler QWidget::wheelEvent() receives wheel events.      \sa QMouseEvent QWidget::grabMouse() */
end_comment
begin_comment
comment|/*!     \fn Qt::MouseButtons QWheelEvent::buttons() const      Returns the mouse state when the event occurred. */
end_comment
begin_comment
comment|/*!     \fn Qt::Orientation QWheelEvent::orientation() const      Returns the wheel's orientation. */
end_comment
begin_comment
comment|/*!     Constructs a wheel event object.      The position, \a pos, is the location of the mouse cursor within     the widget. The globalPos() is initialized to QCursor::pos()     which is usually, but not always, correct.     Use the other constructor if you need to specify the global     position explicitly.      The \a buttons describe the state of the mouse buttons at the time     of the event, \a delta contains the rotation distance,     \a modifiers holds the keyboard modifier flags at the time of the     event, and \a orient holds the wheel's orientation.      \sa pos() delta() state() */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
end_ifndef
begin_constructor
DECL|function|QWheelEvent
name|QWheelEvent
operator|::
name|QWheelEvent
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
name|int
name|delta
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|)
member_init_list|:
name|QInputEvent
argument_list|(
name|Wheel
argument_list|,
name|modifiers
argument_list|)
member_init_list|,
name|p
argument_list|(
name|pos
argument_list|)
member_init_list|,
name|d
argument_list|(
name|delta
argument_list|)
member_init_list|,
name|mouseState
argument_list|(
name|buttons
argument_list|)
member_init_list|,
name|o
argument_list|(
name|orient
argument_list|)
block|{
name|g
operator|=
name|QCursor
operator|::
name|pos
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   \internal */
end_comment
begin_destructor
DECL|function|~QWheelEvent
name|QWheelEvent
operator|::
name|~
name|QWheelEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Constructs a wheel event object.      The \a pos provides the location of the mouse cursor     within the widget. The position in global coordinates is specified     by \a globalPos. \a delta contains the rotation distance, \a modifiers     holds the keyboard modifier flags at the time of the event, and     \a orient holds the wheel's orientation.      \sa pos() globalPos() delta() state() */
end_comment
begin_constructor
DECL|function|QWheelEvent
name|QWheelEvent
operator|::
name|QWheelEvent
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|globalPos
parameter_list|,
name|int
name|delta
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|)
member_init_list|:
name|QInputEvent
argument_list|(
name|Wheel
argument_list|,
name|modifiers
argument_list|)
member_init_list|,
name|p
argument_list|(
name|pos
argument_list|)
member_init_list|,
name|g
argument_list|(
name|globalPos
argument_list|)
member_init_list|,
name|d
argument_list|(
name|delta
argument_list|)
member_init_list|,
name|mouseState
argument_list|(
name|buttons
argument_list|)
member_init_list|,
name|o
argument_list|(
name|orient
argument_list|)
block|{}
end_constructor
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_WHEELEVENT
end_comment
begin_comment
comment|/*!     \fn int QWheelEvent::delta() const      Returns the distance that the wheel is rotated, in eighths of a     degree. A positive value indicates that the wheel was rotated     forwards away from the user; a negative value indicates that the     wheel was rotated backwards toward the user.      Most mouse types work in steps of 15 degrees, in which case the     delta value is a multiple of 120; i.e., 120 units * 1/8 = 15 degrees.      However, some mice have finer-resolution wheels and send delta values     that are less than 120 units (less than 15 degrees). To support this     possibility, you can either cumulatively add the delta values from events     until the value of 120 is reached, then scroll the widget, or you can     partially scroll the widget in response to each wheel event.      Example:      \snippet doc/src/snippets/code/src_gui_kernel_qevent.cpp 0 */
end_comment
begin_comment
comment|/*!     \fn const QPoint&QWheelEvent::pos() const      Returns the position of the mouse cursor relative to the widget     that received the event.      If you move your widgets around in response to mouse events,     use globalPos() instead of this function.      \sa x() y() globalPos() */
end_comment
begin_comment
comment|/*!     \fn int QWheelEvent::x() const      Returns the x position of the mouse cursor, relative to the     widget that received the event.      \sa y() pos() */
end_comment
begin_comment
comment|/*!     \fn int QWheelEvent::y() const      Returns the y position of the mouse cursor, relative to the     widget that received the event.      \sa x() pos() */
end_comment
begin_comment
comment|/*!     \fn const QPoint&QWheelEvent::globalPos() const      Returns the global position of the mouse pointer \e{at the time     of the event}. This is important on asynchronous window systems     such as X11; whenever you move your widgets around in response to     mouse events, globalPos() can differ a lot from the current     cursor position returned by QCursor::pos().      \sa globalX() globalY() */
end_comment
begin_comment
comment|/*!     \fn int QWheelEvent::globalX() const      Returns the global x position of the mouse cursor at the time of     the event.      \sa globalY() globalPos() */
end_comment
begin_comment
comment|/*!     \fn int QWheelEvent::globalY() const      Returns the global y position of the mouse cursor at the time of     the event.      \sa globalX() globalPos() */
end_comment
begin_comment
comment|/*!     \class QKeyEvent     \brief The QKeyEvent class describes a key event.      \ingroup events      Key events are sent to the widget with keyboard input focus     when keys are pressed or released.      A key event contains a special accept flag that indicates whether     the receiver will handle the key event. You should call ignore()     if the key press or release event is not handled by your widget.     A key event is propagated up the parent widget chain until a     widget accepts it with accept() or an event filter consumes it.     Key events for multimedia keys are ignored by default. You should     call accept() if your widget handles those events.      The QWidget::setEnable() function can be used to enable or disable     mouse and keyboard events for a widget.      The event handlers QWidget::keyPressEvent(), QWidget::keyReleaseEvent(),     QGraphicsItem::keyPressEvent() and QGraphicsItem::keyReleaseEvent()     receive key events.      \sa QFocusEvent, QWidget::grabKeyboard() */
end_comment
begin_comment
comment|/*!     Constructs a key event object.      The \a type parameter must be QEvent::KeyPress, QEvent::KeyRelease,     or QEvent::ShortcutOverride.      Int \a key is the code for the Qt::Key that the event loop should listen     for. If \a key is 0, the event is not a result of a known key; for     example, it may be the result of a compose sequence or keyboard macro.     The \a modifiers holds the keyboard modifiers, and the given \a text     is the Unicode text that the key generated. If \a autorep is true,     isAutoRepeat() will be true. \a count is the number of keys involved     in the event. */
end_comment
begin_constructor
DECL|function|QKeyEvent
name|QKeyEvent
operator|::
name|QKeyEvent
parameter_list|(
name|Type
name|type
parameter_list|,
name|int
name|key
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorep
parameter_list|,
name|ushort
name|count
parameter_list|)
member_init_list|:
name|QInputEvent
argument_list|(
name|type
argument_list|,
name|modifiers
argument_list|)
member_init_list|,
name|txt
argument_list|(
name|text
argument_list|)
member_init_list|,
name|k
argument_list|(
name|key
argument_list|)
member_init_list|,
name|c
argument_list|(
name|count
argument_list|)
member_init_list|,
name|autor
argument_list|(
name|autorep
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!   \internal */
end_comment
begin_destructor
DECL|function|~QKeyEvent
name|QKeyEvent
operator|::
name|~
name|QKeyEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|createExtendedKeyEvent
name|QKeyEvent
modifier|*
name|QKeyEvent
operator|::
name|createExtendedKeyEvent
parameter_list|(
name|Type
name|type
parameter_list|,
name|int
name|key
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
name|quint32
name|nativeScanCode
parameter_list|,
name|quint32
name|nativeVirtualKey
parameter_list|,
name|quint32
name|nativeModifiers
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorep
parameter_list|,
name|ushort
name|count
parameter_list|)
block|{
return|return
operator|new
name|QKeyEventEx
argument_list|(
name|type
argument_list|,
name|key
argument_list|,
name|modifiers
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|,
name|nativeScanCode
argument_list|,
name|nativeVirtualKey
argument_list|,
name|nativeModifiers
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QKeyEvent::hasExtendedInfo() const     \internal */
end_comment
begin_comment
comment|/*!   \since 4.2    Returns the native scan code of the key event.  If the key event   does not contain this data 0 is returned.    Note: The native scan code may be 0, even if the key event contains   extended information.    Note: On Mac OS/X, this function is not useful, because there is no   way to get the scan code from Carbon or Cocoa. The function always   returns 1 (or 0 in the case explained above). */
end_comment
begin_function
DECL|function|nativeScanCode
name|quint32
name|QKeyEvent
operator|::
name|nativeScanCode
parameter_list|()
specifier|const
block|{
return|return
operator|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
operator|!=
name|this
condition|?
literal|0
else|:
cast|reinterpret_cast
argument_list|<
specifier|const
name|QKeyEventEx
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|nScanCode
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the native virtual key, or key sym of the key event.     If the key event does not contain this data 0 is returned.      Note: The native virtual key may be 0, even if the key event contains extended information. */
end_comment
begin_function
DECL|function|nativeVirtualKey
name|quint32
name|QKeyEvent
operator|::
name|nativeVirtualKey
parameter_list|()
specifier|const
block|{
return|return
operator|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
operator|!=
name|this
condition|?
literal|0
else|:
cast|reinterpret_cast
argument_list|<
specifier|const
name|QKeyEventEx
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|nVirtualKey
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the native modifiers of a key event.     If the key event does not contain this data 0 is returned.      Note: The native modifiers may be 0, even if the key event contains extended information. */
end_comment
begin_function
DECL|function|nativeModifiers
name|quint32
name|QKeyEvent
operator|::
name|nativeModifiers
parameter_list|()
specifier|const
block|{
return|return
operator|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
operator|!=
name|this
condition|?
literal|0
else|:
cast|reinterpret_cast
argument_list|<
specifier|const
name|QKeyEventEx
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|nModifiers
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Creates an extended key event object, which in addition to the normal key event data, also     contains the native scan code, virtual key and modifiers. This extra data is used by the     shortcut system, to determine which shortcuts to trigger. */
end_comment
begin_constructor
DECL|function|QKeyEventEx
name|QKeyEventEx
operator|::
name|QKeyEventEx
parameter_list|(
name|Type
name|type
parameter_list|,
name|int
name|key
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorep
parameter_list|,
name|ushort
name|count
parameter_list|,
name|quint32
name|nativeScanCode
parameter_list|,
name|quint32
name|nativeVirtualKey
parameter_list|,
name|quint32
name|nativeModifiers
parameter_list|)
member_init_list|:
name|QKeyEvent
argument_list|(
name|type
argument_list|,
name|key
argument_list|,
name|modifiers
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
member_init_list|,
name|nScanCode
argument_list|(
name|nativeScanCode
argument_list|)
member_init_list|,
name|nVirtualKey
argument_list|(
name|nativeVirtualKey
argument_list|)
member_init_list|,
name|nModifiers
argument_list|(
name|nativeModifiers
argument_list|)
block|{
name|d
operator|=
cast|reinterpret_cast
argument_list|<
name|QEventPrivate
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal     Creates a copy of an other extended key event. */
end_comment
begin_constructor
DECL|function|QKeyEventEx
name|QKeyEventEx
operator|::
name|QKeyEventEx
parameter_list|(
specifier|const
name|QKeyEventEx
modifier|&
name|other
parameter_list|)
member_init_list|:
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|other
operator|.
name|t
argument_list|)
argument_list|,
name|other
operator|.
name|k
argument_list|,
name|other
operator|.
name|modState
argument_list|,
name|other
operator|.
name|txt
argument_list|,
name|other
operator|.
name|autor
argument_list|,
name|other
operator|.
name|c
argument_list|)
member_init_list|,
name|nScanCode
argument_list|(
name|other
operator|.
name|nScanCode
argument_list|)
member_init_list|,
name|nVirtualKey
argument_list|(
name|other
operator|.
name|nVirtualKey
argument_list|)
member_init_list|,
name|nModifiers
argument_list|(
name|other
operator|.
name|nModifiers
argument_list|)
block|{
name|d
operator|=
cast|reinterpret_cast
argument_list|<
name|QEventPrivate
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_destructor
DECL|function|~QKeyEventEx
name|QKeyEventEx
operator|::
name|~
name|QKeyEventEx
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \fn int QKeyEvent::key() const      Returns the code of the key that was pressed or released.      See \l Qt::Key for the list of keyboard codes. These codes are     independent of the underlying window system. Note that this     function does not distinguish between capital and non-capital     letters, use the text() function (returning the Unicode text the     key generated) for this purpose.      A value of either 0 or Qt::Key_unknown means that the event is not     the result of a known key; for example, it may be the result of     a compose sequence, a keyboard macro, or due to key event     compression.      \sa Qt::WA_KeyCompression */
end_comment
begin_comment
comment|/*!     \fn QString QKeyEvent::text() const      Returns the Unicode text that this key generated. The text     returned can be an empty string in cases     where modifier keys, such as Shift, Control, Alt, and Meta,     are being pressed or released. In such cases key() will contain     a valid value.      \sa Qt::WA_KeyCompression */
end_comment
begin_comment
comment|/*!     Returns the keyboard modifier flags that existed immediately     after the event occurred.      \warning This function cannot always be trusted. The user can     confuse it by pressing both \key{Shift} keys simultaneously and     releasing one of them, for example.      \sa QApplication::keyboardModifiers() */
end_comment
begin_comment
comment|//###### We must check with XGetModifierMapping
end_comment
begin_function
DECL|function|modifiers
name|Qt
operator|::
name|KeyboardModifiers
name|QKeyEvent
operator|::
name|modifiers
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Shift
condition|)
return|return
name|Qt
operator|::
name|KeyboardModifiers
argument_list|(
name|QInputEvent
operator|::
name|modifiers
argument_list|()
operator|^
name|Qt
operator|::
name|ShiftModifier
argument_list|)
return|;
if|if
condition|(
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Control
condition|)
return|return
name|Qt
operator|::
name|KeyboardModifiers
argument_list|(
name|QInputEvent
operator|::
name|modifiers
argument_list|()
operator|^
name|Qt
operator|::
name|ControlModifier
argument_list|)
return|;
if|if
condition|(
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Alt
condition|)
return|return
name|Qt
operator|::
name|KeyboardModifiers
argument_list|(
name|QInputEvent
operator|::
name|modifiers
argument_list|()
operator|^
name|Qt
operator|::
name|AltModifier
argument_list|)
return|;
if|if
condition|(
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Meta
condition|)
return|return
name|Qt
operator|::
name|KeyboardModifiers
argument_list|(
name|QInputEvent
operator|::
name|modifiers
argument_list|()
operator|^
name|Qt
operator|::
name|MetaModifier
argument_list|)
return|;
return|return
name|QInputEvent
operator|::
name|modifiers
argument_list|()
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
end_ifndef
begin_comment
comment|/*!     \fn bool QKeyEvent::matches(QKeySequence::StandardKey key) const     \since 4.2      Returns true if the key event matches the given standard \a key;     otherwise returns false. */
end_comment
begin_function
DECL|function|matches
name|bool
name|QKeyEvent
operator|::
name|matches
parameter_list|(
name|QKeySequence
operator|::
name|StandardKey
name|matchKey
parameter_list|)
specifier|const
block|{
name|uint
name|searchkey
init|=
operator|(
name|modifiers
argument_list|()
operator||
name|key
argument_list|()
operator|)
operator|&
operator|~
operator|(
name|Qt
operator|::
name|KeypadModifier
operator|)
decl_stmt|;
comment|//The keypad modifier should not make a difference
name|uint
name|platform
init|=
name|QGuiApplicationPrivate
operator|::
name|currentKeyPlatform
argument_list|()
decl_stmt|;
name|uint
name|N
init|=
name|QKeySequencePrivate
operator|::
name|numberOfKeyBindings
decl_stmt|;
name|int
name|first
init|=
literal|0
decl_stmt|;
name|int
name|last
init|=
name|N
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|first
operator|<=
name|last
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|first
operator|+
name|last
operator|)
operator|/
literal|2
decl_stmt|;
name|QKeyBinding
name|midVal
init|=
name|QKeySequencePrivate
operator|::
name|keyBindings
index|[
name|mid
index|]
decl_stmt|;
if|if
condition|(
name|searchkey
operator|>
name|midVal
operator|.
name|shortcut
condition|)
block|{
name|first
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
comment|// Search in top half
block|}
elseif|else
if|if
condition|(
name|searchkey
operator|<
name|midVal
operator|.
name|shortcut
condition|)
block|{
name|last
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
comment|// Search in bottom half
block|}
else|else
block|{
comment|//found correct shortcut value, now we must check for platform match
if|if
condition|(
operator|(
name|midVal
operator|.
name|platform
operator|&
name|platform
operator|)
operator|&&
operator|(
name|midVal
operator|.
name|standardKey
operator|==
name|matchKey
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
comment|//We may have several equal values for different platforms, so we must search in both directions
comment|//search forward
for|for
control|(
name|unsigned
name|int
name|i
init|=
name|mid
operator|+
literal|1
init|;
name|i
operator|<
name|N
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|QKeyBinding
name|current
init|=
name|QKeySequencePrivate
operator|::
name|keyBindings
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|shortcut
operator|!=
name|searchkey
condition|)
break|break;
elseif|else
if|if
condition|(
name|current
operator|.
name|platform
operator|&
name|platform
operator|&&
name|current
operator|.
name|standardKey
operator|==
name|matchKey
condition|)
return|return
literal|true
return|;
block|}
comment|//search back
for|for
control|(
name|int
name|i
init|=
name|mid
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QKeyBinding
name|current
init|=
name|QKeySequencePrivate
operator|::
name|keyBindings
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|shortcut
operator|!=
name|searchkey
condition|)
break|break;
elseif|else
if|if
condition|(
name|current
operator|.
name|platform
operator|&
name|platform
operator|&&
name|current
operator|.
name|standardKey
operator|==
name|matchKey
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
comment|//we could not find it among the matching keySequences
block|}
block|}
block|}
return|return
literal|false
return|;
comment|//we could not find matching keySequences at all
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SHORTCUT
end_comment
begin_comment
comment|/*!     \fn bool QKeyEvent::isAutoRepeat() const      Returns true if this event comes from an auto-repeating key;     returns false if it comes from an initial key press.      Note that if the event is a multiple-key compressed event that is     partly due to auto-repeat, this function could return either true     or false indeterminately. */
end_comment
begin_comment
comment|/*!     \fn int QKeyEvent::count() const      Returns the number of keys involved in this event. If text()     is not empty, this is simply the length of the string.      \sa Qt::WA_KeyCompression */
end_comment
begin_comment
comment|/*!     \class QFocusEvent     \brief The QFocusEvent class contains event parameters for widget focus     events.      \ingroup events      Focus events are sent to widgets when the keyboard input focus     changes. Focus events occur due to mouse actions, key presses     (such as \gui{Tab} or \gui{Backtab}), the window system, popup     menus, keyboard shortcuts, or other application-specific reasons.     The reason for a particular focus event is returned by reason()     in the appropriate event handler.      The event handlers QWidget::focusInEvent(),     QWidget::focusOutEvent(), QGraphicsItem::focusInEvent and     QGraphicsItem::focusOutEvent() receive focus events.      \sa QWidget::setFocus(), QWidget::setFocusPolicy(), {Keyboard Focus} */
end_comment
begin_comment
comment|/*!     Constructs a focus event object.      The \a type parameter must be either QEvent::FocusIn or     QEvent::FocusOut. The \a reason describes the cause of the change     in focus. */
end_comment
begin_constructor
DECL|function|QFocusEvent
name|QFocusEvent
operator|::
name|QFocusEvent
parameter_list|(
name|Type
name|type
parameter_list|,
name|Qt
operator|::
name|FocusReason
name|reason
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|type
argument_list|)
member_init_list|,
name|m_reason
argument_list|(
name|reason
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_destructor
DECL|function|~QFocusEvent
name|QFocusEvent
operator|::
name|~
name|QFocusEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the reason for this focus event.  */
end_comment
begin_function
DECL|function|reason
name|Qt
operator|::
name|FocusReason
name|QFocusEvent
operator|::
name|reason
parameter_list|()
specifier|const
block|{
return|return
name|m_reason
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QFocusEvent::gotFocus() const      Returns true if type() is QEvent::FocusIn; otherwise returns     false. */
end_comment
begin_comment
comment|/*!     \fn bool QFocusEvent::lostFocus() const      Returns true if type() is QEvent::FocusOut; otherwise returns     false. */
end_comment
begin_comment
comment|/*!     \class QPaintEvent     \brief The QPaintEvent class contains event parameters for paint events.      \ingroup events      Paint events are sent to widgets that need to update themselves,     for instance when part of a widget is exposed because a covering     widget was moved.      The event contains a region() that needs to be updated, and a     rect() that is the bounding rectangle of that region. Both are     provided because many widgets can't make much use of region(),     and rect() can be much faster than region().boundingRect().      \section1 Automatic Clipping      Painting is clipped to region() during the processing of a paint     event. This clipping is performed by Qt's paint system and is     independent of any clipping that may be applied to a QPainter used to     draw on the paint device.      As a result, the value returned by QPainter::clipRegion() on     a newly-constructed QPainter will not reflect the clip region that is     used by the paint system.      \sa QPainter, QWidget::update(), QWidget::repaint(),         QWidget::paintEvent() */
end_comment
begin_comment
comment|/*!     Constructs a paint event object with the region that needs to     be updated. The region is specified by \a paintRegion. */
end_comment
begin_constructor
DECL|function|QPaintEvent
name|QPaintEvent
operator|::
name|QPaintEvent
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|paintRegion
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|Paint
argument_list|)
member_init_list|,
name|m_rect
argument_list|(
name|paintRegion
operator|.
name|boundingRect
argument_list|()
argument_list|)
member_init_list|,
name|m_region
argument_list|(
name|paintRegion
argument_list|)
member_init_list|,
name|m_erased
argument_list|(
literal|false
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*!     Constructs a paint event object with the rectangle that needs     to be updated. The region is specified by \a paintRect. */
end_comment
begin_constructor
DECL|function|QPaintEvent
name|QPaintEvent
operator|::
name|QPaintEvent
parameter_list|(
specifier|const
name|QRect
modifier|&
name|paintRect
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|Paint
argument_list|)
member_init_list|,
name|m_rect
argument_list|(
name|paintRect
argument_list|)
member_init_list|,
name|m_region
argument_list|(
name|paintRect
argument_list|)
member_init_list|,
name|m_erased
argument_list|(
literal|false
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*!   \internal */
end_comment
begin_destructor
DECL|function|~QPaintEvent
name|QPaintEvent
operator|::
name|~
name|QPaintEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \fn const QRect&QPaintEvent::rect() const      Returns the rectangle that needs to be updated.      \sa region() QPainter::setClipRect() */
end_comment
begin_comment
comment|/*!     \fn const QRegion&QPaintEvent::region() const      Returns the region that needs to be updated.      \sa rect() QPainter::setClipRegion() */
end_comment
begin_constructor
DECL|function|QUpdateLaterEvent
name|QUpdateLaterEvent
operator|::
name|QUpdateLaterEvent
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|paintRegion
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|UpdateLater
argument_list|)
member_init_list|,
name|m_region
argument_list|(
name|paintRegion
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QUpdateLaterEvent
name|QUpdateLaterEvent
operator|::
name|~
name|QUpdateLaterEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \class QMoveEvent     \brief The QMoveEvent class contains event parameters for move events.      \ingroup events      Move events are sent to widgets that have been moved to a new     position relative to their parent.      The event handler QWidget::moveEvent() receives move events.      \sa QWidget::move(), QWidget::setGeometry() */
end_comment
begin_comment
comment|/*!     Constructs a move event with the new and old widget positions,     \a pos and \a oldPos respectively. */
end_comment
begin_constructor
DECL|function|QMoveEvent
name|QMoveEvent
operator|::
name|QMoveEvent
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|oldPos
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|Move
argument_list|)
member_init_list|,
name|p
argument_list|(
name|pos
argument_list|)
member_init_list|,
name|oldp
argument_list|(
name|oldPos
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*!   \internal */
end_comment
begin_destructor
DECL|function|~QMoveEvent
name|QMoveEvent
operator|::
name|~
name|QMoveEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \fn const QPoint&QMoveEvent::pos() const      Returns the new position of the widget. This excludes the window     frame for top level widgets. */
end_comment
begin_comment
comment|/*!     \fn const QPoint&QMoveEvent::oldPos() const      Returns the old position of the widget. */
end_comment
begin_comment
comment|/*!     \class QExposeEvent     \brief The QExposeEvent class contains event parameters for expose events.      \ingroup events      Expose events are sent to widgets when an area of the widget is invalidated     and needs to be flushed from the backing store.      The event handler QWindow::exposeEvent() receives expose events. */
end_comment
begin_constructor
DECL|function|QExposeEvent
name|QExposeEvent
operator|::
name|QExposeEvent
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|exposeRegion
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|Expose
argument_list|)
member_init_list|,
name|rgn
argument_list|(
name|exposeRegion
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!   \internal */
end_comment
begin_destructor
DECL|function|~QExposeEvent
name|QExposeEvent
operator|::
name|~
name|QExposeEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \class QResizeEvent     \brief The QResizeEvent class contains event parameters for resize events.      \ingroup events      Resize events are sent to widgets that have been resized.      The event handler QWidget::resizeEvent() receives resize events.      \sa QWidget::resize() QWidget::setGeometry() */
end_comment
begin_comment
comment|/*!     Constructs a resize event with the new and old widget sizes, \a     size and \a oldSize respectively. */
end_comment
begin_constructor
DECL|function|QResizeEvent
name|QResizeEvent
operator|::
name|QResizeEvent
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QSize
modifier|&
name|oldSize
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|Resize
argument_list|)
member_init_list|,
name|s
argument_list|(
name|size
argument_list|)
member_init_list|,
name|olds
argument_list|(
name|oldSize
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*!   \internal */
end_comment
begin_destructor
DECL|function|~QResizeEvent
name|QResizeEvent
operator|::
name|~
name|QResizeEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \fn const QSize&QResizeEvent::size() const      Returns the new size of the widget. This is the same as     QWidget::size(). */
end_comment
begin_comment
comment|/*!     \fn const QSize&QResizeEvent::oldSize() const      Returns the old size of the widget. */
end_comment
begin_comment
comment|/*!     \class QCloseEvent     \brief The QCloseEvent class contains parameters that describe a close event.      \ingroup events      Close events are sent to widgets that the user wants to close,     usually by choosing "Close" from the window menu, or by clicking     the \gui{X} title bar button. They are also sent when you call     QWidget::close() to close a widget programmatically.      Close events contain a flag that indicates whether the receiver     wants the widget to be closed or not. When a widget accepts the     close event, it is hidden (and destroyed if it was created with     the Qt::WA_DeleteOnClose flag). If it refuses to accept the close     event nothing happens. (Under X11 it is possible that the window     manager will forcibly close the window; but at the time of writing     we are not aware of any window manager that does this.)      The event handler QWidget::closeEvent() receives close events. The     default implementation of this event handler accepts the close     event. If you do not want your widget to be hidden, or want some     special handing, you should reimplement the event handler and     ignore() the event.      The \l{mainwindows/application#close event handler}{closeEvent() in the     Application example} shows a close event handler that     asks whether to save a document before closing.      If you want the widget to be deleted when it is closed, create it     with the Qt::WA_DeleteOnClose flag. This is very useful for     independent top-level windows in a multi-window application.      \l{QObject}s emits the \l{QObject::destroyed()}{destroyed()}     signal when they are deleted.      If the last top-level window is closed, the     QApplication::lastWindowClosed() signal is emitted.      The isAccepted() function returns true if the event's receiver has     agreed to close the widget; call accept() to agree to close the     widget and call ignore() if the receiver of this event does not     want the widget to be closed.      \sa QWidget::close(), QWidget::hide(), QObject::destroyed(),         QCoreApplication::exec(), QCoreApplication::quit(),         QApplication::lastWindowClosed() */
end_comment
begin_comment
comment|/*!     Constructs a close event object.      \sa accept() */
end_comment
begin_constructor
DECL|function|QCloseEvent
name|QCloseEvent
operator|::
name|QCloseEvent
parameter_list|()
member_init_list|:
name|QEvent
argument_list|(
name|Close
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*! \internal */
end_comment
begin_destructor
DECL|function|~QCloseEvent
name|QCloseEvent
operator|::
name|~
name|QCloseEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!    \class QIconDragEvent    \brief The QIconDragEvent class indicates that a main icon drag has begun.     \ingroup events     Icon drag events are sent to widgets when the main icon of a window    has been dragged away. On Mac OS X, this happens when the proxy    icon of a window is dragged off the title bar.     It is normal to begin using drag and drop in response to this    event.     \sa {Drag and Drop}, QMimeData, QDrag */
end_comment
begin_comment
comment|/*!     Constructs an icon drag event object with the accept flag set to     false.      \sa accept() */
end_comment
begin_constructor
DECL|function|QIconDragEvent
name|QIconDragEvent
operator|::
name|QIconDragEvent
parameter_list|()
member_init_list|:
name|QEvent
argument_list|(
name|IconDrag
argument_list|)
block|{
name|ignore
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*! \internal */
end_comment
begin_destructor
DECL|function|~QIconDragEvent
name|QIconDragEvent
operator|::
name|~
name|QIconDragEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \class QContextMenuEvent     \brief The QContextMenuEvent class contains parameters that describe a context menu event.      \ingroup events      Context menu events are sent to widgets when a user performs     an action associated with opening a context menu.     The actions required to open context menus vary between platforms;     for example, on Windows, pressing the menu button or clicking the     right mouse button will cause this event to be sent.      When this event occurs it is customary to show a QMenu with a     context menu, if this is relevant to the context.      Context menu events contain a special accept flag that indicates     whether the receiver accepted the event. If the event handler does     not accept the event then, if possible, whatever triggered the event will be     handled as a regular input event. */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
end_ifndef
begin_comment
comment|/*!     Constructs a context menu event object with the accept parameter     flag set to false.      The \a reason parameter must be QContextMenuEvent::Mouse or     QContextMenuEvent::Keyboard.      The \a pos parameter specifies the mouse position relative to the     receiving widget. \a globalPos is the mouse position in absolute     coordinates. */
end_comment
begin_constructor
DECL|function|QContextMenuEvent
name|QContextMenuEvent
operator|::
name|QContextMenuEvent
parameter_list|(
name|Reason
name|reason
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|globalPos
parameter_list|)
member_init_list|:
name|QInputEvent
argument_list|(
name|ContextMenu
argument_list|)
member_init_list|,
name|p
argument_list|(
name|pos
argument_list|)
member_init_list|,
name|gp
argument_list|(
name|globalPos
argument_list|)
member_init_list|,
name|reas
argument_list|(
name|reason
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*!     Constructs a context menu event object with the accept parameter     flag set to false.      The \a reason parameter must be QContextMenuEvent::Mouse or     QContextMenuEvent::Keyboard.      The \a pos parameter specifies the mouse position relative to the     receiving widget. \a globalPos is the mouse position in absolute     coordinates. The \a modifiers holds the keyboard modifiers. */
end_comment
begin_constructor
DECL|function|QContextMenuEvent
name|QContextMenuEvent
operator|::
name|QContextMenuEvent
parameter_list|(
name|Reason
name|reason
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|globalPos
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
member_init_list|:
name|QInputEvent
argument_list|(
name|ContextMenu
argument_list|,
name|modifiers
argument_list|)
member_init_list|,
name|p
argument_list|(
name|pos
argument_list|)
member_init_list|,
name|gp
argument_list|(
name|globalPos
argument_list|)
member_init_list|,
name|reas
argument_list|(
name|reason
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*! \internal */
end_comment
begin_destructor
DECL|function|~QContextMenuEvent
name|QContextMenuEvent
operator|::
name|~
name|QContextMenuEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Constructs a context menu event object with the accept parameter     flag set to false.      The \a reason parameter must be QContextMenuEvent::Mouse or     QContextMenuEvent::Keyboard.      The \a pos parameter specifies the mouse position relative to the     receiving widget.      The globalPos() is initialized to QCursor::pos(), which may not be     appropriate. Use the other constructor to specify the global     position explicitly. */
end_comment
begin_constructor
DECL|function|QContextMenuEvent
name|QContextMenuEvent
operator|::
name|QContextMenuEvent
parameter_list|(
name|Reason
name|reason
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
member_init_list|:
name|QInputEvent
argument_list|(
name|ContextMenu
argument_list|)
member_init_list|,
name|p
argument_list|(
name|pos
argument_list|)
member_init_list|,
name|reas
argument_list|(
name|reason
argument_list|)
block|{
name|gp
operator|=
name|QCursor
operator|::
name|pos
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \fn const QPoint&QContextMenuEvent::pos() const      Returns the position of the mouse pointer relative to the widget     that received the event.      \sa x(), y(), globalPos() */
end_comment
begin_comment
comment|/*!     \fn int QContextMenuEvent::x() const      Returns the x position of the mouse pointer, relative to the     widget that received the event.      \sa y(), pos() */
end_comment
begin_comment
comment|/*!     \fn int QContextMenuEvent::y() const      Returns the y position of the mouse pointer, relative to the     widget that received the event.      \sa x(), pos() */
end_comment
begin_comment
comment|/*!     \fn const QPoint&QContextMenuEvent::globalPos() const      Returns the global position of the mouse pointer at the time of     the event.      \sa x(), y(), pos() */
end_comment
begin_comment
comment|/*!     \fn int QContextMenuEvent::globalX() const      Returns the global x position of the mouse pointer at the time of     the event.      \sa globalY(), globalPos() */
end_comment
begin_comment
comment|/*!     \fn int QContextMenuEvent::globalY() const      Returns the global y position of the mouse pointer at the time of     the event.      \sa globalX(), globalPos() */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CONTEXTMENU
end_comment
begin_comment
comment|/*!     \enum QContextMenuEvent::Reason      This enum describes the reason why the event was sent.      \value Mouse The mouse caused the event to be sent. Normally this     means the right mouse button was clicked, but this is platform     dependent.      \value Keyboard The keyboard caused this event to be sent. On     Windows, this means the menu button was pressed.      \value Other The event was sent by some other means (i.e. not by     the mouse or keyboard). */
end_comment
begin_comment
comment|/*!     \fn QContextMenuEvent::Reason QContextMenuEvent::reason() const      Returns the reason for this context event. */
end_comment
begin_comment
comment|/*!     \class QInputMethodEvent     \brief The QInputMethodEvent class provides parameters for input method events.      \ingroup events      Input method events are sent to widgets when an input method is     used to enter text into a widget. Input methods are widely used     to enter text for languages with non-Latin alphabets.      Note that when creating custom text editing widgets, the     Qt::WA_InputMethodEnabled window attribute must be set explicitly     (using the QWidget::setAttribute() function) in order to receive     input method events.      The events are of interest to authors of keyboard entry widgets     who want to be able to correctly handle languages with complex     character input. Text input in such languages is usually a three     step process:      \list 1     \o \bold{Starting to Compose}         When the user presses the first key on a keyboard, an input        context is created. This input context will contain a string        of the typed characters.      \o \bold{Composing}         With every new key pressed, the input method will try to create a        matching string for the text typed so far called preedit        string. While the input context is active, the user can only move        the cursor inside the string belonging to this input context.      \o \bold{Completing}         At some point, the user will activate a user interface component        (perhaps using a particular key) where they can choose from a        number of strings matching the text they have typed so far. The        user can either confirm their choice cancel the input; in either        case the input context will be closed.     \endlist      QInputMethodEvent models these three stages, and transfers the     information needed to correctly render the intermediate result. A     QInputMethodEvent has two main parameters: preeditString() and     commitString(). The preeditString() parameter gives the currently     active preedit string. The commitString() parameter gives a text     that should get added to (or replace parts of) the text of the     editor widget. It usually is a result of the input operations and     has to be inserted to the widgets text directly before the preedit     string.      If the commitString() should replace parts of the of the text in     the editor, replacementLength() will contain the number of     characters to be replaced. replacementStart() contains the position     at which characters are to be replaced relative from the start of     the preedit string.      A number of attributes control the visual appearance of the     preedit string (the visual appearance of text outside the preedit     string is controlled by the widget only). The AttributeType enum     describes the different attributes that can be set.      A class implementing QWidget::inputMethodEvent() or     QGraphicsItem::inputMethodEvent() should at least understand and     honor the \l TextFormat and \l Cursor attributes.      Since input methods need to be able to query certain properties     from the widget or graphics item, subclasses must also implement     QWidget::inputMethodQuery() and QGraphicsItem::inputMethodQuery(),     respectively.      When receiving an input method event, the text widget has to performs the     following steps:      \list 1     \o If the widget has selected text, the selected text should get        removed.      \o Remove the text starting at replacementStart() with length        replacementLength() and replace it by the commitString(). If        replacementLength() is 0, replacementStart() gives the insertion        position for the commitString().         When doing replacement the area of the preedit        string is ignored, thus a replacement starting at -1 with a length        of 2 will remove the last character before the preedit string and        the first character afterwards, and insert the commit string        directly before the preedit string.         If the widget implements undo/redo, this operation gets added to        the undo stack.      \o If there is no current preedit string, insert the        preeditString() at the current cursor position; otherwise replace        the previous preeditString with the one received from this event.         If the widget implements undo/redo, the preeditString() should not        influence the undo/redo stack in any way.         The widget should examine the list of attributes to apply to the        preedit string. It has to understand at least the TextFormat and        Cursor attributes and render them as specified.     \endlist      \sa QInputMethod */
end_comment
begin_comment
comment|/*!     \enum QInputMethodEvent::AttributeType      \value TextFormat     A QTextCharFormat for the part of the preedit string specified by     start and length. value contains a QVariant of type QTextFormat     specifying rendering of this part of the preedit string. There     should be at most one format for every part of the preedit     string. If several are specified for any character in the string the     behaviour is undefined. A conforming implementation has to at least     honor the backgroundColor, textColor and fontUnderline properties     of the format.      \value Cursor If set, a cursor should be shown inside the preedit     string at position start. The length variable determines whether     the cursor is visible or not. If the length is 0 the cursor is     invisible. If value is a QVariant of type QColor this color will     be used for rendering the cursor, otherwise the color of the     surrounding text will be used. There should be at most one Cursor     attribute per event. If several are specified the behaviour is     undefined.      \value Language     The variant contains a QLocale object specifying the language of a     certain part of the preedit string. There should be at most one     language set for every part of the preedit string. If several are     specified for any character in the string the behavior is undefined.      \value Ruby     The ruby text for a part of the preedit string. There should be at     most one ruby text set for every part of the preedit string. If     several are specified for any character in the string the behaviour     is undefined.      \value Selection     If set, the edit cursor should be moved to the specified position     in the editor text contents. In contrast with \c Cursor, this     attribute does not work on the preedit text, but on the surrounding     text. The cursor will be moved after the commit string has been     committed, and the preedit string will be located at the new edit     position.     The start position specifies the new position and the length     variable can be used to set a selection starting from that point.     The value is unused.      \sa Attribute */
end_comment
begin_comment
comment|/*!     \class QInputMethodEvent::Attribute     \brief The QInputMethodEvent::Attribute class stores an input method attribute. */
end_comment
begin_comment
comment|/*!     \fn QInputMethodEvent::Attribute::Attribute(AttributeType type, int start, int length, QVariant value)      Constructs an input method attribute. \a type specifies the type     of attribute, \a start and \a length the position of the     attribute, and \a value the value of the attribute. */
end_comment
begin_comment
comment|/*!     Constructs an event of type QEvent::InputMethod. The     attributes(), preeditString(), commitString(), replacementStart(),     and replacementLength() are initialized to default values.      \sa setCommitString() */
end_comment
begin_constructor
DECL|function|QInputMethodEvent
name|QInputMethodEvent
operator|::
name|QInputMethodEvent
parameter_list|()
member_init_list|:
name|QEvent
argument_list|(
name|QEvent
operator|::
name|InputMethod
argument_list|)
member_init_list|,
name|replace_from
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|replace_length
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Construcs an event of type QEvent::InputMethod. The     preedit text is set to \a preeditText, the attributes to     \a attributes.      The commitString(), replacementStart(), and replacementLength()     values can be set using setCommitString().      \sa preeditString(), attributes() */
end_comment
begin_constructor
DECL|function|QInputMethodEvent
name|QInputMethodEvent
operator|::
name|QInputMethodEvent
parameter_list|(
specifier|const
name|QString
modifier|&
name|preeditText
parameter_list|,
specifier|const
name|QList
argument_list|<
name|Attribute
argument_list|>
modifier|&
name|attributes
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|QEvent
operator|::
name|InputMethod
argument_list|)
member_init_list|,
name|preedit
argument_list|(
name|preeditText
argument_list|)
member_init_list|,
name|attrs
argument_list|(
name|attributes
argument_list|)
member_init_list|,
name|replace_from
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|replace_length
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a copy of \a other. */
end_comment
begin_constructor
DECL|function|QInputMethodEvent
name|QInputMethodEvent
operator|::
name|QInputMethodEvent
parameter_list|(
specifier|const
name|QInputMethodEvent
modifier|&
name|other
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|QEvent
operator|::
name|InputMethod
argument_list|)
member_init_list|,
name|preedit
argument_list|(
name|other
operator|.
name|preedit
argument_list|)
member_init_list|,
name|attrs
argument_list|(
name|other
operator|.
name|attrs
argument_list|)
member_init_list|,
name|commit
argument_list|(
name|other
operator|.
name|commit
argument_list|)
member_init_list|,
name|replace_from
argument_list|(
name|other
operator|.
name|replace_from
argument_list|)
member_init_list|,
name|replace_length
argument_list|(
name|other
operator|.
name|replace_length
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Sets the commit string to \a commitString.      The commit string is the text that should get added to (or     replace parts of) the text of the editor widget. It usually is a     result of the input operations and has to be inserted to the     widgets text directly before the preedit string.      If the commit string should replace parts of the of the text in     the editor, \a replaceLength specifies the number of     characters to be replaced. \a replaceFrom specifies the position     at which characters are to be replaced relative from the start of     the preedit string.      \sa commitString(), replacementStart(), replacementLength() */
end_comment
begin_function
DECL|function|setCommitString
name|void
name|QInputMethodEvent
operator|::
name|setCommitString
parameter_list|(
specifier|const
name|QString
modifier|&
name|commitString
parameter_list|,
name|int
name|replaceFrom
parameter_list|,
name|int
name|replaceLength
parameter_list|)
block|{
name|commit
operator|=
name|commitString
expr_stmt|;
name|replace_from
operator|=
name|replaceFrom
expr_stmt|;
name|replace_length
operator|=
name|replaceLength
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the tentative commit string to \a tentativeCommitString.      The tentative commit string is what the preedit string is expected to be committed as.     The string can be used within the editor to trigger code that reacts on text changes such as validators. */
end_comment
begin_function
DECL|function|setTentativeCommitString
name|void
name|QInputMethodEvent
operator|::
name|setTentativeCommitString
parameter_list|(
specifier|const
name|QString
modifier|&
name|tentativeCommitString
parameter_list|)
block|{
name|tentativeCommit
operator|=
name|tentativeCommitString
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn const QList<Attribute>&QInputMethodEvent::attributes() const      Returns the list of attributes passed to the QInputMethodEvent     constructor. The attributes control the visual appearance of the     preedit string (the visual appearance of text outside the preedit     string is controlled by the widget only).      \sa preeditString(), Attribute */
end_comment
begin_comment
comment|/*!     \fn const QString&QInputMethodEvent::preeditString() const      Returns the preedit text, i.e. the text before the user started     editing it.      \sa commitString(), attributes() */
end_comment
begin_comment
comment|/*!     \fn const QString&QInputMethodEvent::commitString() const      Returns the text that should get added to (or replace parts of)     the text of the editor widget. It usually is a result of the     input operations and has to be inserted to the widgets text     directly before the preedit string.      \sa setCommitString(), preeditString(), replacementStart(), replacementLength() */
end_comment
begin_comment
comment|/*!     \fn int QInputMethodEvent::replacementStart() const      Returns the position at which characters are to be replaced relative     from the start of the preedit string.      \sa replacementLength(), setCommitString() */
end_comment
begin_comment
comment|/*!     \fn int QInputMethodEvent::replacementLength() const      Returns the number of characters to be replaced in the preedit     string.      \sa replacementStart(), setCommitString() */
end_comment
begin_comment
comment|/*!     \fn const QString&tentativeCommitString() const      Returns the text as which preedit string is expected to be committed as.     The string can be used within the editor to trigger code that reacts on text changes such as validators.      \sa setTentativeCommitString() */
end_comment
begin_comment
comment|/*! \class QInputMethodQueryEvent      This event is sent by the input context to input objects.      It is used by the     input method to query a set of properties of the object to be     able to support complex input method operations as support for     surrounding text and reconversions.      queries() specifies which properties are queried.      The object should call setValue() on the event to fill in the requested     data before calling accept(). */
end_comment
begin_comment
comment|/*!     \fn Qt::InputMethodQueries QInputMethodQueryEvent::queries() const      Returns the properties queried by the event.  */
end_comment
begin_comment
comment|/*!     Constructs a query event for properties given by \a queries.  */
end_comment
begin_constructor
DECL|function|QInputMethodQueryEvent
name|QInputMethodQueryEvent
operator|::
name|QInputMethodQueryEvent
parameter_list|(
name|Qt
operator|::
name|InputMethodQueries
name|queries
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|InputMethodQuery
argument_list|)
member_init_list|,
name|m_queries
argument_list|(
name|queries
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \internal  */
end_comment
begin_destructor
DECL|function|~QInputMethodQueryEvent
name|QInputMethodQueryEvent
operator|::
name|~
name|QInputMethodQueryEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Sets query property to given value.  */
end_comment
begin_function
DECL|function|setValue
name|void
name|QInputMethodQueryEvent
operator|::
name|setValue
parameter_list|(
name|Qt
operator|::
name|InputMethodQuery
name|query
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_values
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|m_values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|query
operator|==
name|query
condition|)
block|{
name|m_values
index|[
name|i
index|]
operator|.
name|value
operator|=
name|value
expr_stmt|;
return|return;
block|}
block|}
name|QueryPair
name|pair
init|=
block|{
name|query
block|,
name|value
block|}
decl_stmt|;
name|m_values
operator|.
name|append
argument_list|(
name|pair
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns value of a query property.  */
end_comment
begin_function
DECL|function|value
name|QVariant
name|QInputMethodQueryEvent
operator|::
name|value
parameter_list|(
name|Qt
operator|::
name|InputMethodQuery
name|query
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_values
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|m_values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|query
operator|==
name|query
condition|)
return|return
name|m_values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
return|;
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
end_ifndef
begin_comment
comment|/*!     \class QTabletEvent     \brief The QTabletEvent class contains parameters that describe a Tablet event.      \ingroup events      Tablet Events are generated from a Wacom tablet. Most of the time you will     want to deal with events from the tablet as if they were events from a     mouse; for example, you would retrieve the cursor position with x(), y(),     pos(), globalX(), globalY(), and globalPos(). In some situations you may     wish to retrieve the extra information provided by the tablet device     driver; for example, you might want to do subpixeling with higher     resolution coordinates or you may want to adjust color brightness based on     pressure.  QTabletEvent allows you to read the pressure(), the xTilt(), and     yTilt(), as well as the type of device being used with device() (see     \l{TabletDevice}). It can also give you the minimum and maximum values for     each device's pressure and high resolution coordinates.      A tablet event contains a special accept flag that indicates whether the     receiver wants the event. You should call QTabletEvent::accept() if you     handle the tablet event; otherwise it will be sent to the parent widget.     The exception are TabletEnterProximity and TabletLeaveProximity events,     these are only sent to QApplication and don't check whether or not they are     accepted.      The QWidget::setEnabled() function can be used to enable or     disable mouse and keyboard events for a widget.      The event handler QWidget::tabletEvent() receives all three types of     tablet events. Qt will first send a tabletEvent then, if it is not     accepted, it will send a mouse event. This allows applications that     don't utilize tablets to use a tablet like a mouse, while also     enabling those who want to use both tablets and mouses differently.      \section1 Notes for X11 Users      Qt uses the following hard-coded names to identify tablet     devices from the xorg.conf file on X11 (apart from IRIX):     'stylus', 'pen', and 'eraser'. If the devices have other names,     they will not be picked up Qt. */
end_comment
begin_comment
comment|/*!     \enum QTabletEvent::TabletDevice      This enum defines what type of device is generating the event.      \value NoDevice    No device, or an unknown device.     \value Puck    A Puck (a device that is similar to a flat mouse with     a transparent circle with cross-hairs).     \value Stylus  A Stylus.     \value Airbrush An airbrush     \value FourDMouse A 4D Mouse.     \value RotationStylus A special stylus that also knows about rotation            (a 6D stylus). \since 4.1     \omitvalue XFreeEraser */
end_comment
begin_comment
comment|/*!     \enum QTabletEvent::PointerType      This enum defines what type of point is generating the event.      \value UnknownPointer    An unknown device.     \value Pen    Tip end of a stylus-like device (the narrow end of the pen).     \value Cursor  Any puck-like device.     \value Eraser  Eraser end of a stylus-like device (the broad end of the pen).      \sa pointerType() */
end_comment
begin_comment
comment|/*!   Construct a tablet event of the given \a type.    The \a pos parameter indicates where the event occurred in the   widget; \a globalPos is the corresponding position in absolute   coordinates. The \a hiResGlobalPos contains a high resolution   measurement of the position.    \a pressure contains the pressure exerted on the \a device.    \a pointerType describes the type of pen that is being used.    \a xTilt and \a yTilt contain the device's degree of tilt from the   x and y axes respectively.    \a keyState specifies which keyboard modifiers are pressed (e.g.,   \key{Ctrl}).    The \a uniqueID parameter contains the unique ID for the current device.    The \a z parameter contains the coordinate of the device on the tablet, this   is usually given by a wheel on 4D mouse. If the device does not support a   Z-axis, pass zero here.    The \a tangentialPressure parameter contins the tangential pressure of an air   brush. If the device does not support tangential pressure, pass 0 here.    \a rotation contains the device's rotation in degrees. 4D mice support   rotation. If the device does not support rotation, pass 0 here.    \sa pos() globalPos() device() pressure() xTilt() yTilt() uniqueId(), rotation(), tangentialPressure(), z() */
end_comment
begin_constructor
DECL|function|QTabletEvent
name|QTabletEvent
operator|::
name|QTabletEvent
parameter_list|(
name|Type
name|type
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|globalPos
parameter_list|,
name|int
name|device
parameter_list|,
name|int
name|pointerType
parameter_list|,
name|qreal
name|pressure
parameter_list|,
name|int
name|xTilt
parameter_list|,
name|int
name|yTilt
parameter_list|,
name|qreal
name|tangentialPressure
parameter_list|,
name|qreal
name|rotation
parameter_list|,
name|int
name|z
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|keyState
parameter_list|,
name|qint64
name|uniqueID
parameter_list|)
member_init_list|:
name|QInputEvent
argument_list|(
name|type
argument_list|,
name|keyState
argument_list|)
member_init_list|,
name|mPos
argument_list|(
name|pos
argument_list|)
member_init_list|,
name|mGPos
argument_list|(
name|globalPos
argument_list|)
member_init_list|,
name|mDev
argument_list|(
name|device
argument_list|)
member_init_list|,
name|mPointerType
argument_list|(
name|pointerType
argument_list|)
member_init_list|,
name|mXT
argument_list|(
name|xTilt
argument_list|)
member_init_list|,
name|mYT
argument_list|(
name|yTilt
argument_list|)
member_init_list|,
name|mZ
argument_list|(
name|z
argument_list|)
member_init_list|,
name|mPress
argument_list|(
name|pressure
argument_list|)
member_init_list|,
name|mTangential
argument_list|(
name|tangentialPressure
argument_list|)
member_init_list|,
name|mRot
argument_list|(
name|rotation
argument_list|)
member_init_list|,
name|mUnique
argument_list|(
name|uniqueID
argument_list|)
member_init_list|,
name|mExtra
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_destructor
DECL|function|~QTabletEvent
name|QTabletEvent
operator|::
name|~
name|QTabletEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \fn TabletDevices QTabletEvent::device() const      Returns the type of device that generated the event.      \sa TabletDevice */
end_comment
begin_comment
comment|/*!     \fn PointerType QTabletEvent::pointerType() const      Returns the type of point that generated the event. */
end_comment
begin_comment
comment|/*!     \fn qreal QTabletEvent::tangentialPressure() const      Returns the tangential pressure for the device.  This is typically given by a finger     wheel on an airbrush tool.  The range is from -1.0 to 1.0. 0.0 indicates a     neutral position.  Current airbrushes can only move in the positive     direction from the neutrual position. If the device does not support     tangential pressure, this value is always 0.0.      \sa pressure() */
end_comment
begin_comment
comment|/*!     \fn qreal QTabletEvent::rotation() const      Returns the rotation of the current device in degress. This is usually     given by a 4D Mouse. If the device doesn't support rotation this value is     always 0.0.  */
end_comment
begin_comment
comment|/*!     \fn qreal QTabletEvent::pressure() const      Returns the pressure for the device. 0.0 indicates that the stylus is not     on the tablet, 1.0 indicates the maximum amount of pressure for the stylus.      \sa tangentialPressure() */
end_comment
begin_comment
comment|/*!     \fn int QTabletEvent::xTilt() const      Returns the angle between the device (a pen, for example) and the     perpendicular in the direction of the x axis.     Positive values are towards the tablet's physical right. The angle     is in the range -60 to +60 degrees.      \img qtabletevent-tilt.png      \sa yTilt() */
end_comment
begin_comment
comment|/*!     \fn int QTabletEvent::yTilt() const      Returns the angle between the device (a pen, for example) and the     perpendicular in the direction of the y axis.     Positive values are towards the bottom of the tablet. The angle is     within the range -60 to +60 degrees.      \sa xTilt() */
end_comment
begin_comment
comment|/*!     \fn const QPoint&QTabletEvent::pos() const      Returns the position of the device, relative to the widget that     received the event.      If you move widgets around in response to mouse events, use     globalPos() instead of this function.      \sa x() y() globalPos() */
end_comment
begin_comment
comment|/*!     \fn int QTabletEvent::x() const      Returns the x position of the device, relative to the widget that     received the event.      \sa y() pos() */
end_comment
begin_comment
comment|/*!     \fn int QTabletEvent::y() const      Returns the y position of the device, relative to the widget that     received the event.      \sa x() pos() */
end_comment
begin_comment
comment|/*!     \fn int QTabletEvent::z() const      Returns the z position of the device. Typically this is represented by a     wheel on a 4D Mouse. If the device does not support a Z-axis, this value is     always zero. This is \bold not the same as pressure.      \sa pressure() */
end_comment
begin_comment
comment|/*!     \fn const QPoint&QTabletEvent::globalPos() const      Returns the global position of the device \e{at the time of the     event}. This is important on asynchronous windows systems like X11;     whenever you move your widgets around in response to mouse events,     globalPos() can differ significantly from the current position     QCursor::pos().      \sa globalX() globalY() hiResGlobalPos() */
end_comment
begin_comment
comment|/*!     \fn int QTabletEvent::globalX() const      Returns the global x position of the mouse pointer at the time of     the event.      \sa globalY() globalPos() hiResGlobalX() */
end_comment
begin_comment
comment|/*!     \fn int QTabletEvent::globalY() const      Returns the global y position of the tablet device at the time of     the event.      \sa globalX() globalPos() hiResGlobalY() */
end_comment
begin_comment
comment|/*!     \fn qint64 QTabletEvent::uniqueId() const      Returns a unique ID for the current device, making it possible     to differentiate between multiple devices being used at the same     time on the tablet.      Support of this feature is dependent on the tablet.      Values for the same device may vary from OS to OS.      Later versions of the Wacom driver for Linux will now report     the ID information. If you have a tablet that supports unique ID     and are not getting the information on Linux, consider upgrading     your driver.      As of Qt 4.2, the unique ID is the same regardless of the orientation     of the pen. Earlier versions would report a different value when using     the eraser-end versus the pen-end of the stylus on some OS's.      \sa pointerType() */
end_comment
begin_comment
comment|/*!     \fn const QPointF&QTabletEvent::hiResGlobalPos() const      The high precision coordinates delivered from the tablet expressed.     Sub pixeling information is in the fractional part of the QPointF.      \sa globalPos() hiResGlobalX() hiResGlobalY() */
end_comment
begin_comment
comment|/*!     \fn qreal&QTabletEvent::hiResGlobalX() const      The high precision x position of the tablet device. */
end_comment
begin_comment
comment|/*!     \fn qreal&QTabletEvent::hiResGlobalY() const      The high precision y position of the tablet device. */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TABLETEVENT
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_comment
comment|/*!     Creates a QDragMoveEvent of the required \a type indicating     that the mouse is at position \a pos given within a widget.      The mouse and keyboard states are specified by \a buttons and     \a modifiers, and the \a actions describe the types of drag     and drop operation that are possible.     The drag data is passed as MIME-encoded information in \a data.      \warning Do not attempt to create a QDragMoveEvent yourself.     These objects rely on Qt's internal state. */
end_comment
begin_constructor
DECL|function|QDragMoveEvent
name|QDragMoveEvent
operator|::
name|QDragMoveEvent
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|,
name|Qt
operator|::
name|DropActions
name|actions
parameter_list|,
specifier|const
name|QMimeData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
name|Type
name|type
parameter_list|)
member_init_list|:
name|QDropEvent
argument_list|(
name|pos
argument_list|,
name|actions
argument_list|,
name|data
argument_list|,
name|buttons
argument_list|,
name|modifiers
argument_list|,
name|type
argument_list|)
member_init_list|,
name|rect
argument_list|(
name|pos
argument_list|,
name|QSize
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*!     Destroys the event. */
end_comment
begin_destructor
DECL|function|~QDragMoveEvent
name|QDragMoveEvent
operator|::
name|~
name|QDragMoveEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \fn void QDragMoveEvent::accept(const QRect&rectangle)      The same as accept(), but also notifies that future moves will     also be acceptable if they remain within the \a rectangle     given on the widget. This can improve performance, but may     also be ignored by the underlying system.      If the rectangle is empty, drag move events will be sent     continuously. This is useful if the source is scrolling in a     timer event. */
end_comment
begin_comment
comment|/*!     \fn void QDragMoveEvent::accept()      \overload      Calls QDropEvent::accept(). */
end_comment
begin_comment
comment|/*!     \fn void QDragMoveEvent::ignore()      \overload      Calls QDropEvent::ignore(). */
end_comment
begin_comment
comment|/*!     \fn void QDragMoveEvent::ignore(const QRect&rectangle)      The opposite of the accept(const QRect&) function.     Moves within the \a rectangle are not acceptable, and will be     ignored. */
end_comment
begin_comment
comment|/*!     \fn QRect QDragMoveEvent::answerRect() const      Returns the rectangle in the widget where the drop will occur if accepted.     You can use this information to restrict drops to certain places on the     widget. */
end_comment
begin_comment
comment|/*!     \class QDropEvent     \ingroup events     \ingroup draganddrop      \brief The QDropEvent class provides an event which is sent when a     drag and drop action is completed.      When a widget \l{QWidget::setAcceptDrops()}{accepts drop events}, it will     receive this event if it has accepted the most recent QDragEnterEvent or     QDragMoveEvent sent to it.      The drop event contains a proposed action, available from proposedAction(), for     the widget to either accept or ignore. If the action can be handled by the     widget, you should call the acceptProposedAction() function. Since the     proposed action can be a combination of \l Qt::DropAction values, it may be     useful to either select one of these values as a default action or ask     the user to select their preferred action.      If the proposed drop action is not suitable, perhaps because your custom     widget does not support that action, you can replace it with any of the     \l{possibleActions()}{possible drop actions} by calling setDropAction()     with your preferred action. If you set a value that is not present in the     bitwise OR combination of values returned by possibleActions(), the default     copy action will be used. Once a replacement drop action has been set, call     accept() instead of acceptProposedAction() to complete the drop operation.      The mimeData() function provides the data dropped on the widget in a QMimeData     object. This contains information about the MIME type of the data in addition to     the data itself.      \sa QMimeData, QDrag, {Drag and Drop} */
end_comment
begin_comment
comment|/*!     \fn const QMimeData *QDropEvent::mimeData() const      Returns the data that was dropped on the widget and its associated MIME     type information. */
end_comment
begin_comment
comment|/*!     Constructs a drop event of a certain \a type corresponding to a     drop at the point specified by \a pos in the destination widget's     coordinate system.      The \a actions indicate which types of drag and drop operation can     be performed, and the drag data is stored as MIME-encoded data in \a data.      The states of the mouse buttons and keyboard modifiers at the time of     the drop are specified by \a buttons and \a modifiers. */
end_comment
begin_comment
comment|// ### pos is in which coordinate system?
end_comment
begin_constructor
DECL|function|QDropEvent
name|QDropEvent
operator|::
name|QDropEvent
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
name|Qt
operator|::
name|DropActions
name|actions
parameter_list|,
specifier|const
name|QMimeData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
name|Type
name|type
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|type
argument_list|)
member_init_list|,
name|p
argument_list|(
name|pos
argument_list|)
member_init_list|,
name|mouseState
argument_list|(
name|buttons
argument_list|)
member_init_list|,
name|modState
argument_list|(
name|modifiers
argument_list|)
member_init_list|,
name|act
argument_list|(
name|actions
argument_list|)
member_init_list|,
name|mdata
argument_list|(
name|data
argument_list|)
block|{
name|default_action
operator|=
name|Qt
operator|::
name|CopyAction
expr_stmt|;
comment|// ### Qt5: QDragManager::self()->defaultAction(act, modifiers);
name|drop_action
operator|=
name|default_action
expr_stmt|;
name|ignore
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*! \internal */
end_comment
begin_destructor
DECL|function|~QDropEvent
name|QDropEvent
operator|::
name|~
name|QDropEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     If the source of the drag operation is a widget in this     application, this function returns that source; otherwise it     returns 0. The source of the operation is the first parameter to     the QDrag object used instantiate the drag.      This is useful if your widget needs special behavior when dragging     to itself.      \sa QDrag::QDrag() */
end_comment
begin_function
DECL|function|source
name|QObject
modifier|*
name|QDropEvent
operator|::
name|source
parameter_list|()
specifier|const
block|{
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
return|return
operator|(
name|manager
operator|&&
name|manager
operator|->
name|object
operator|)
condition|?
name|manager
operator|->
name|object
operator|->
name|source
argument_list|()
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|setDropAction
name|void
name|QDropEvent
operator|::
name|setDropAction
parameter_list|(
name|Qt
operator|::
name|DropAction
name|action
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|action
operator|&
name|act
operator|)
operator|&&
name|action
operator|!=
name|Qt
operator|::
name|IgnoreAction
condition|)
name|action
operator|=
name|default_action
expr_stmt|;
name|drop_action
operator|=
name|action
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn const QPoint& QDropEvent::pos() const      Returns the position where the drop was made. */
end_comment
begin_comment
comment|/*!     \fn Qt::MouseButtons QDropEvent::mouseButtons() const      Returns the mouse buttons that are pressed.. */
end_comment
begin_comment
comment|/*!     \fn Qt::KeyboardModifiers QDropEvent::keyboardModifiers() const      Returns the modifier keys that are pressed. */
end_comment
begin_comment
comment|/*!     \fn void QDropEvent::setDropAction(Qt::DropAction action)      Sets the \a action to be performed on the data by the target.     Use this to override the \l{proposedAction()}{proposed action}     with one of the \l{possibleActions()}{possible actions}.      If you set a drop action that is not one of the possible actions, the     drag and drop operation will default to a copy operation.      Once you have supplied a replacement drop action, call accept()     instead of acceptProposedAction().      \sa dropAction() */
end_comment
begin_comment
comment|/*!     \fn Qt::DropAction QDropEvent::dropAction() const      Returns the action to be performed on the data by the target. This may be     different from the action supplied in proposedAction() if you have called     setDropAction() to explicitly choose a drop action.      \sa setDropAction() */
end_comment
begin_comment
comment|/*!     \fn Qt::DropActions QDropEvent::possibleActions() const      Returns an OR-combination of possible drop actions.      \sa dropAction() */
end_comment
begin_comment
comment|/*!     \fn Qt::DropAction QDropEvent::proposedAction() const      Returns the proposed drop action.      \sa dropAction() */
end_comment
begin_comment
comment|/*!     \fn void QDropEvent::acceptProposedAction()      Sets the drop action to be the proposed action.      \sa setDropAction(), proposedAction(), {QEvent::accept()}{accept()} */
end_comment
begin_comment
comment|/*!     \class QDragEnterEvent     \brief The QDragEnterEvent class provides an event which is sent     to a widget when a drag and drop action enters it.      \ingroup events     \ingroup draganddrop      A widget must accept this event in order to receive the \l     {QDragMoveEvent}{drag move events} that are sent while the drag     and drop action is in progress. The drag enter event is always     immediately followed by a drag move event.      QDragEnterEvent inherits most of its functionality from     QDragMoveEvent, which in turn inherits most of its functionality     from QDropEvent.      \sa QDragLeaveEvent, QDragMoveEvent, QDropEvent */
end_comment
begin_comment
comment|/*!     Constructs a QDragEnterEvent that represents a drag entering a     widget at the given \a point with mouse and keyboard states specified by     \a buttons and \a modifiers.      The drag data is passed as MIME-encoded information in \a data, and the     specified \a actions describe the possible types of drag and drop     operation that can be performed.      \warning Do not create a QDragEnterEvent yourself since these     objects rely on Qt's internal state. */
end_comment
begin_constructor
DECL|function|QDragEnterEvent
name|QDragEnterEvent
operator|::
name|QDragEnterEvent
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|point
parameter_list|,
name|Qt
operator|::
name|DropActions
name|actions
parameter_list|,
specifier|const
name|QMimeData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
member_init_list|:
name|QDragMoveEvent
argument_list|(
name|point
argument_list|,
name|actions
argument_list|,
name|data
argument_list|,
name|buttons
argument_list|,
name|modifiers
argument_list|,
name|DragEnter
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*! \internal */
end_comment
begin_destructor
DECL|function|~QDragEnterEvent
name|QDragEnterEvent
operator|::
name|~
name|QDragEnterEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \class QDragMoveEvent     \brief The QDragMoveEvent class provides an event which is sent while a drag and drop action is in progress.      \ingroup events     \ingroup draganddrop      A widget will receive drag move events repeatedly while the drag     is within its boundaries, if it accepts     \l{QWidget::setAcceptDrops()}{drop events} and \l     {QWidget::dragEnterEvent()}{enter events}. The widget should     examine the event to see what kind of data it     \l{QDragMoveEvent::provides()}{provides}, and call the accept()     function to accept the drop if appropriate.      The rectangle supplied by the answerRect() function can be used to restrict     drops to certain parts of the widget. For example, we can check whether the     rectangle intersects with the geometry of a certain child widget and only     call \l{QDropEvent::acceptProposedAction()}{acceptProposedAction()} if that     is the case.      Note that this class inherits most of its functionality from     QDropEvent.      \sa QDragEnterEvent, QDragLeaveEvent, QDropEvent */
end_comment
begin_comment
comment|/*!     \class QDragLeaveEvent     \brief The QDragLeaveEvent class provides an event that is sent to a widget when a drag and drop action leaves it.      \ingroup events     \ingroup draganddrop      This event is always preceded by a QDragEnterEvent and a series     of \l{QDragMoveEvent}s. It is not sent if a QDropEvent is sent     instead.      \sa QDragEnterEvent, QDragMoveEvent, QDropEvent */
end_comment
begin_comment
comment|/*!     Constructs a QDragLeaveEvent.      \warning Do not create a QDragLeaveEvent yourself since these     objects rely on Qt's internal state. */
end_comment
begin_constructor
DECL|function|QDragLeaveEvent
name|QDragLeaveEvent
operator|::
name|QDragLeaveEvent
parameter_list|()
member_init_list|:
name|QEvent
argument_list|(
name|DragLeave
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*! \internal */
end_comment
begin_destructor
DECL|function|~QDragLeaveEvent
name|QDragLeaveEvent
operator|::
name|~
name|QDragLeaveEvent
parameter_list|()
block|{ }
end_destructor
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
begin_comment
comment|/*!     \class QHelpEvent     \brief The QHelpEvent class provides an event that is used to request helpful information     about a particular point in a widget.      \ingroup events     \ingroup helpsystem      This event can be intercepted in applications to provide tooltips     or "What's This?" help for custom widgets. The type() can be     either QEvent::ToolTip or QEvent::WhatsThis.      \sa QToolTip, QWhatsThis, QStatusTipEvent, QWhatsThisClickedEvent */
end_comment
begin_comment
comment|/*!     Constructs a help event with the given \a type corresponding to the     widget-relative position specified by \a pos and the global position     specified by \a globalPos.      \a type must be either QEvent::ToolTip or QEvent::WhatsThis.      \sa pos(), globalPos() */
end_comment
begin_constructor
DECL|function|QHelpEvent
name|QHelpEvent
operator|::
name|QHelpEvent
parameter_list|(
name|Type
name|type
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|globalPos
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|type
argument_list|)
member_init_list|,
name|p
argument_list|(
name|pos
argument_list|)
member_init_list|,
name|gp
argument_list|(
name|globalPos
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*!     \fn int QHelpEvent::x() const      Same as pos().x().      \sa y(), pos(), globalPos() */
end_comment
begin_comment
comment|/*!     \fn int QHelpEvent::y() const      Same as pos().y().      \sa x(), pos(), globalPos() */
end_comment
begin_comment
comment|/*!     \fn int QHelpEvent::globalX() const      Same as globalPos().x().      \sa x(), globalY(), globalPos() */
end_comment
begin_comment
comment|/*!     \fn int QHelpEvent::globalY() const      Same as globalPos().y().      \sa y(), globalX(), globalPos() */
end_comment
begin_comment
comment|/*!     \fn const QPoint&QHelpEvent::pos()  const      Returns the mouse cursor position when the event was generated,     relative to the widget to which the event is dispatched.      \sa globalPos(), x(), y() */
end_comment
begin_comment
comment|/*!     \fn const QPoint&QHelpEvent::globalPos() const      Returns the mouse cursor position when the event was generated     in global coordinates.      \sa pos(), globalX(), globalY() */
end_comment
begin_comment
comment|/*! \internal */
end_comment
begin_destructor
DECL|function|~QHelpEvent
name|QHelpEvent
operator|::
name|~
name|QHelpEvent
parameter_list|()
block|{ }
end_destructor
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STATUSTIP
end_ifndef
begin_comment
comment|/*!     \class QStatusTipEvent     \brief The QStatusTipEvent class provides an event that is used to show messages in a status bar.      \ingroup events     \ingroup helpsystem      Status tips can be set on a widget using the     QWidget::setStatusTip() function.  They are shown in the status     bar when the mouse cursor enters the widget. For example:      \table 100%     \row     \o     \snippet doc/src/snippets/qstatustipevent/main.cpp 1     \dots     \snippet doc/src/snippets/qstatustipevent/main.cpp 3     \o     \image qstatustipevent-widget.png Widget with status tip.     \endtable      Status tips can also be set on actions using the     QAction::setStatusTip() function:      \table 100%     \row     \o     \snippet doc/src/snippets/qstatustipevent/main.cpp 0     \snippet doc/src/snippets/qstatustipevent/main.cpp 2     \dots     \snippet doc/src/snippets/qstatustipevent/main.cpp 3     \o     \image qstatustipevent-action.png Action with status tip.     \endtable      Finally, status tips are supported for the item view classes     through the Qt::StatusTipRole enum value.      \sa QStatusBar, QHelpEvent, QWhatsThisClickedEvent */
end_comment
begin_comment
comment|/*!     Constructs a status tip event with the text specified by \a tip.      \sa tip() */
end_comment
begin_constructor
DECL|function|QStatusTipEvent
name|QStatusTipEvent
operator|::
name|QStatusTipEvent
parameter_list|(
specifier|const
name|QString
modifier|&
name|tip
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|StatusTip
argument_list|)
member_init_list|,
name|s
argument_list|(
name|tip
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*! \internal */
end_comment
begin_destructor
DECL|function|~QStatusTipEvent
name|QStatusTipEvent
operator|::
name|~
name|QStatusTipEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \fn QString QStatusTipEvent::tip() const      Returns the message to show in the status bar.      \sa QStatusBar::showMessage() */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_STATUSTIP
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
end_ifndef
begin_comment
comment|/*!     \class QWhatsThisClickedEvent     \brief The QWhatsThisClickedEvent class provides an event that     can be used to handle hyperlinks in a "What's This?" text.      \ingroup events     \ingroup helpsystem      \sa QWhatsThis, QHelpEvent, QStatusTipEvent */
end_comment
begin_comment
comment|/*!     Constructs an event containing a URL specified by \a href when a link     is clicked in a "What's This?" message.      \sa href() */
end_comment
begin_constructor
DECL|function|QWhatsThisClickedEvent
name|QWhatsThisClickedEvent
operator|::
name|QWhatsThisClickedEvent
parameter_list|(
specifier|const
name|QString
modifier|&
name|href
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|WhatsThisClicked
argument_list|)
member_init_list|,
name|s
argument_list|(
name|href
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*! \internal */
end_comment
begin_destructor
DECL|function|~QWhatsThisClickedEvent
name|QWhatsThisClickedEvent
operator|::
name|~
name|QWhatsThisClickedEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \fn QString QWhatsThisClickedEvent::href() const      Returns the URL that was clicked by the user in the "What's     This?" text. */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_WHATSTHIS
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACTION
end_ifndef
begin_comment
comment|/*!     \class QActionEvent     \brief The QActionEvent class provides an event that is generated     when a QAction is added, removed, or changed.      \ingroup events      Actions can be added to widgets using QWidget::addAction(). This     generates an \l ActionAdded event, which you can handle to provide     custom behavior. For example, QToolBar reimplements     QWidget::actionEvent() to create \l{QToolButton}s for the     actions.      \sa QAction, QWidget::addAction(), QWidget::removeAction(), QWidget::actions() */
end_comment
begin_comment
comment|/*!     Constructs an action event. The \a type can be \l ActionChanged,     \l ActionAdded, or \l ActionRemoved.      \a action is the action that is changed, added, or removed. If \a     type is ActionAdded, the action is to be inserted before the     action \a before. If \a before is 0, the action is appended. */
end_comment
begin_constructor
DECL|function|QActionEvent
name|QActionEvent
operator|::
name|QActionEvent
parameter_list|(
name|int
name|type
parameter_list|,
name|QAction
modifier|*
name|action
parameter_list|,
name|QAction
modifier|*
name|before
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
cast|static_cast
argument_list|<
name|QEvent
operator|::
name|Type
argument_list|>
argument_list|(
name|type
argument_list|)
argument_list|)
member_init_list|,
name|act
argument_list|(
name|action
argument_list|)
member_init_list|,
name|bef
argument_list|(
name|before
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*! \internal */
end_comment
begin_destructor
DECL|function|~QActionEvent
name|QActionEvent
operator|::
name|~
name|QActionEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \fn QAction *QActionEvent::action() const      Returns the action that is changed, added, or removed.      \sa before() */
end_comment
begin_comment
comment|/*!     \fn QAction *QActionEvent::before() const      If type() is \l ActionAdded, returns the action that should     appear before action(). If this function returns 0, the action     should be appended to already existing actions on the same     widget.      \sa action(), QWidget::actions() */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ACTION
end_comment
begin_comment
comment|/*!     \class QHideEvent     \brief The QHideEvent class provides an event which is sent after a widget is hidden.      \ingroup events      This event is sent just before QWidget::hide() returns, and also     when a top-level window has been hidden (iconified) by the user.      If spontaneous() is true, the event originated outside the     application. In this case, the user hid the window using the     window manager controls, either by iconifying the window or by     switching to another virtual desktop where the window isn't     visible. The window will become hidden but not withdrawn. If the     window was iconified, QWidget::isMinimized() returns true.      \sa QShowEvent */
end_comment
begin_comment
comment|/*!     Constructs a QHideEvent. */
end_comment
begin_constructor
DECL|function|QHideEvent
name|QHideEvent
operator|::
name|QHideEvent
parameter_list|()
member_init_list|:
name|QEvent
argument_list|(
name|Hide
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*! \internal */
end_comment
begin_destructor
DECL|function|~QHideEvent
name|QHideEvent
operator|::
name|~
name|QHideEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \class QShowEvent     \brief The QShowEvent class provides an event that is sent when a widget is shown.      \ingroup events      There are two kinds of show events: show events caused by the     window system (spontaneous), and internal show events. Spontaneous (QEvent::spontaneous())     show events are sent just after the window system shows the     window; they are also sent when a top-level window is redisplayed     after being iconified. Internal show events are delivered just     before the widget becomes visible.      \sa QHideEvent */
end_comment
begin_comment
comment|/*!     Constructs a QShowEvent. */
end_comment
begin_constructor
DECL|function|QShowEvent
name|QShowEvent
operator|::
name|QShowEvent
parameter_list|()
member_init_list|:
name|QEvent
argument_list|(
name|Show
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*! \internal */
end_comment
begin_destructor
DECL|function|~QShowEvent
name|QShowEvent
operator|::
name|~
name|QShowEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \class QFileOpenEvent     \brief The QFileOpenEvent class provides an event that will be     sent when there is a request to open a file or a URL.      \ingroup events      File open events will be sent to the QApplication::instance()     when the operating system requests that a file or URL should be opened.     This is a high-level event that can be caused by different user actions     depending on the user's desktop environment; for example, double     clicking on an file icon in the Finder on Mac OS X.      This event is only used to notify the application of a request.     It may be safely ignored.      \note This class is currently supported for Mac OS X only. */
end_comment
begin_destructor
DECL|function|~QFileOpenEventPrivate
name|QFileOpenEventPrivate
operator|::
name|~
name|QFileOpenEventPrivate
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \internal      Constructs a file open event for the given \a file. */
end_comment
begin_constructor
DECL|function|QFileOpenEvent
name|QFileOpenEvent
operator|::
name|QFileOpenEvent
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|FileOpen
argument_list|)
member_init_list|,
name|f
argument_list|(
name|file
argument_list|)
block|{
name|d
operator|=
cast|reinterpret_cast
argument_list|<
name|QEventPrivate
operator|*
argument_list|>
argument_list|(
operator|new
name|QFileOpenEventPrivate
argument_list|(
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal      Constructs a file open event for the given \a url. */
end_comment
begin_constructor
DECL|function|QFileOpenEvent
name|QFileOpenEvent
operator|::
name|QFileOpenEvent
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|FileOpen
argument_list|)
block|{
name|d
operator|=
cast|reinterpret_cast
argument_list|<
name|QEventPrivate
operator|*
argument_list|>
argument_list|(
operator|new
name|QFileOpenEventPrivate
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|=
name|url
operator|.
name|toLocalFile
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*! \internal */
end_comment
begin_destructor
DECL|function|~QFileOpenEvent
name|QFileOpenEvent
operator|::
name|~
name|QFileOpenEvent
parameter_list|()
block|{
operator|delete
cast|reinterpret_cast
argument_list|<
name|QFileOpenEventPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \fn QString QFileOpenEvent::file() const      Returns the file that is being opened. */
end_comment
begin_comment
comment|/*!     \fn QUrl QFileOpenEvent::url() const      Returns the url that is being opened.      \since 4.6 */
end_comment
begin_function
DECL|function|url
name|QUrl
name|QFileOpenEvent
operator|::
name|url
parameter_list|()
specifier|const
block|{
return|return
cast|reinterpret_cast
argument_list|<
specifier|const
name|QFileOpenEventPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|url
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QFileOpenEvent::openFile(QFile&file, QIODevice::OpenMode flags) const      Opens a QFile on the \a file referenced by this event in the mode specified     by \a flags. Returns true if successful; otherwise returns false.      This is necessary as some files cannot be opened by name, but require specific     information stored in this event.      \since 4.8 */
end_comment
begin_function
DECL|function|openFile
name|bool
name|QFileOpenEvent
operator|::
name|openFile
parameter_list|(
name|QFile
modifier|&
name|file
parameter_list|,
name|QIODevice
operator|::
name|OpenMode
name|flags
parameter_list|)
specifier|const
block|{
name|file
operator|.
name|setFileName
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
name|file
operator|.
name|open
argument_list|(
name|flags
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
end_ifndef
begin_comment
comment|/*!     \internal     \class QToolBarChangeEvent     \brief The QToolBarChangeEvent class provides an event that is     sent whenever a the toolbar button is clicked on Mac OS X.      \ingroup events      The QToolBarChangeEvent is sent when the toolbar button is clicked. On Mac     OS X, this is the long oblong button on the right side of the window     title bar. The default implementation is to toggle the appearance (hidden or     shown) of the associated toolbars for the window. */
end_comment
begin_comment
comment|/*!     \internal      Construct a QToolBarChangeEvent given the current button state in \a state. */
end_comment
begin_constructor
DECL|function|QToolBarChangeEvent
name|QToolBarChangeEvent
operator|::
name|QToolBarChangeEvent
parameter_list|(
name|bool
name|t
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|ToolBarChange
argument_list|)
member_init_list|,
name|tog
argument_list|(
name|t
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*! \internal */
end_comment
begin_destructor
DECL|function|~QToolBarChangeEvent
name|QToolBarChangeEvent
operator|::
name|~
name|QToolBarChangeEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \fn bool QToolBarChangeEvent::toggle() const     \internal */
end_comment
begin_comment
comment|/*     \fn Qt::ButtonState QToolBarChangeEvent::state() const      Returns the keyboard modifier flags at the time of the event.      The returned value is a selection of the following values,     combined using the OR operator:     Qt::ShiftButton, Qt::ControlButton, Qt::MetaButton, and Qt::AltButton. */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TOOLBAR
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
end_ifndef
begin_comment
comment|/*!     Constructs a shortcut event for the given \a key press,     associated with the QShortcut ID \a id.      \a ambiguous specifies whether there is more than one QShortcut     for the same key sequence. */
end_comment
begin_constructor
DECL|function|QShortcutEvent
name|QShortcutEvent
operator|::
name|QShortcutEvent
parameter_list|(
specifier|const
name|QKeySequence
modifier|&
name|key
parameter_list|,
name|int
name|id
parameter_list|,
name|bool
name|ambiguous
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|Shortcut
argument_list|)
member_init_list|,
name|sequence
argument_list|(
name|key
argument_list|)
member_init_list|,
name|ambig
argument_list|(
name|ambiguous
argument_list|)
member_init_list|,
name|sid
argument_list|(
name|id
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the event object. */
end_comment
begin_destructor
DECL|function|~QShortcutEvent
name|QShortcutEvent
operator|::
name|~
name|QShortcutEvent
parameter_list|()
block|{ }
end_destructor
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SHORTCUT
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
specifier|const
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_BROKEN_DEBUG_STREAM
comment|// More useful event output could be added here
if|if
condition|(
operator|!
name|e
condition|)
return|return
name|dbg
operator|<<
literal|"QEvent(this = 0x0)"
return|;
specifier|const
name|char
modifier|*
name|n
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|Timer
case|:
name|n
operator|=
literal|"Timer"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|MouseMove
case|:
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
case|case
name|QEvent
operator|::
name|MouseButtonDblClick
case|:
block|{
specifier|const
name|QMouseEvent
modifier|*
name|me
init|=
cast|static_cast
argument_list|<
specifier|const
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|me
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
name|n
operator|=
literal|"MouseButtonPress"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|MouseMove
case|:
name|n
operator|=
literal|"MouseMove"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
name|n
operator|=
literal|"MouseButtonRelease"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|MouseButtonDblClick
case|:
default|default:
name|n
operator|=
literal|"MouseButtonDblClick"
expr_stmt|;
break|break;
block|}
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QMouseEvent("
operator|<<
name|n
operator|<<
literal|", "
operator|<<
name|me
operator|->
name|button
argument_list|()
operator|<<
literal|", "
operator|<<
name|hex
operator|<<
operator|(
name|int
operator|)
name|me
operator|->
name|buttons
argument_list|()
operator|<<
literal|", "
operator|<<
name|hex
operator|<<
operator|(
name|int
operator|)
name|me
operator|->
name|modifiers
argument_list|()
operator|<<
literal|')'
expr_stmt|;
block|}
return|return
name|dbg
operator|.
name|space
argument_list|()
return|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
case|case
name|QEvent
operator|::
name|ToolTip
case|:
name|n
operator|=
literal|"ToolTip"
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QEvent
operator|::
name|WindowActivate
case|:
name|n
operator|=
literal|"WindowActivate"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|WindowDeactivate
case|:
name|n
operator|=
literal|"WindowDeactivate"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|ActivationChange
case|:
name|n
operator|=
literal|"ActivationChange"
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
case|case
name|QEvent
operator|::
name|Wheel
case|:
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QWheelEvent("
operator|<<
cast|static_cast
argument_list|<
specifier|const
name|QWheelEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
operator|->
name|delta
argument_list|()
operator|<<
literal|')'
expr_stmt|;
return|return
name|dbg
operator|.
name|space
argument_list|()
return|;
endif|#
directive|endif
case|case
name|QEvent
operator|::
name|KeyPress
case|:
case|case
name|QEvent
operator|::
name|KeyRelease
case|:
case|case
name|QEvent
operator|::
name|ShortcutOverride
case|:
block|{
specifier|const
name|QKeyEvent
modifier|*
name|ke
init|=
cast|static_cast
argument_list|<
specifier|const
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ke
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|ShortcutOverride
case|:
name|n
operator|=
literal|"ShortcutOverride"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|KeyRelease
case|:
name|n
operator|=
literal|"KeyRelease"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|KeyPress
case|:
default|default:
name|n
operator|=
literal|"KeyPress"
expr_stmt|;
break|break;
block|}
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QKeyEvent("
operator|<<
name|n
operator|<<
literal|", "
operator|<<
name|hex
operator|<<
name|ke
operator|->
name|key
argument_list|()
operator|<<
literal|", "
operator|<<
name|hex
operator|<<
operator|(
name|int
operator|)
name|ke
operator|->
name|modifiers
argument_list|()
operator|<<
literal|", \""
operator|<<
name|ke
operator|->
name|text
argument_list|()
operator|<<
literal|"\", "
operator|<<
name|ke
operator|->
name|isAutoRepeat
argument_list|()
operator|<<
literal|", "
operator|<<
name|ke
operator|->
name|count
argument_list|()
operator|<<
literal|')'
expr_stmt|;
block|}
return|return
name|dbg
operator|.
name|space
argument_list|()
return|;
case|case
name|QEvent
operator|::
name|FocusIn
case|:
name|n
operator|=
literal|"FocusIn"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|FocusOut
case|:
name|n
operator|=
literal|"FocusOut"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Enter
case|:
name|n
operator|=
literal|"Enter"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Leave
case|:
name|n
operator|=
literal|"Leave"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|PaletteChange
case|:
name|n
operator|=
literal|"PaletteChange"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|PolishRequest
case|:
name|n
operator|=
literal|"PolishRequest"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Polish
case|:
name|n
operator|=
literal|"Polish"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|UpdateRequest
case|:
name|n
operator|=
literal|"UpdateRequest"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Paint
case|:
name|n
operator|=
literal|"Paint"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Move
case|:
name|n
operator|=
literal|"Move"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Resize
case|:
name|n
operator|=
literal|"Resize"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Create
case|:
name|n
operator|=
literal|"Create"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Destroy
case|:
name|n
operator|=
literal|"Destroy"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Close
case|:
name|n
operator|=
literal|"Close"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Quit
case|:
name|n
operator|=
literal|"Quit"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|FileOpen
case|:
name|n
operator|=
literal|"FileOpen"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Show
case|:
name|n
operator|=
literal|"Show"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|ShowToParent
case|:
name|n
operator|=
literal|"ShowToParent"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Hide
case|:
name|n
operator|=
literal|"Hide"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|HideToParent
case|:
name|n
operator|=
literal|"HideToParent"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|None
case|:
name|n
operator|=
literal|"None"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|ParentChange
case|:
name|n
operator|=
literal|"ParentChange"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|ParentAboutToChange
case|:
name|n
operator|=
literal|"ParentAboutToChange"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|HoverEnter
case|:
name|n
operator|=
literal|"HoverEnter"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|HoverMove
case|:
name|n
operator|=
literal|"HoverMove"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|HoverLeave
case|:
name|n
operator|=
literal|"HoverLeave"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|ZOrderChange
case|:
name|n
operator|=
literal|"ZOrderChange"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|StyleChange
case|:
name|n
operator|=
literal|"StyleChange"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|DragEnter
case|:
name|n
operator|=
literal|"DragEnter"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|DragMove
case|:
name|n
operator|=
literal|"DragMove"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|DragLeave
case|:
name|n
operator|=
literal|"DragLeave"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Drop
case|:
name|n
operator|=
literal|"Drop"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GraphicsSceneMouseMove
case|:
name|n
operator|=
literal|"GraphicsSceneMouseMove"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GraphicsSceneMousePress
case|:
name|n
operator|=
literal|"GraphicsSceneMousePress"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GraphicsSceneMouseRelease
case|:
name|n
operator|=
literal|"GraphicsSceneMouseRelease"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GraphicsSceneMouseDoubleClick
case|:
name|n
operator|=
literal|"GraphicsSceneMouseDoubleClick"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GraphicsSceneContextMenu
case|:
name|n
operator|=
literal|"GraphicsSceneContextMenu"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GraphicsSceneHoverEnter
case|:
name|n
operator|=
literal|"GraphicsSceneHoverEnter"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GraphicsSceneHoverMove
case|:
name|n
operator|=
literal|"GraphicsSceneHoverMove"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GraphicsSceneHoverLeave
case|:
name|n
operator|=
literal|"GraphicsSceneHoverLeave"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GraphicsSceneHelp
case|:
name|n
operator|=
literal|"GraphicsSceneHelp"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GraphicsSceneDragEnter
case|:
name|n
operator|=
literal|"GraphicsSceneDragEnter"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GraphicsSceneDragMove
case|:
name|n
operator|=
literal|"GraphicsSceneDragMove"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GraphicsSceneDragLeave
case|:
name|n
operator|=
literal|"GraphicsSceneDragLeave"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GraphicsSceneDrop
case|:
name|n
operator|=
literal|"GraphicsSceneDrop"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GraphicsSceneWheel
case|:
name|n
operator|=
literal|"GraphicsSceneWheel"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GraphicsSceneResize
case|:
name|n
operator|=
literal|"GraphicsSceneResize"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GraphicsSceneMove
case|:
name|n
operator|=
literal|"GraphicsSceneMove"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|CursorChange
case|:
name|n
operator|=
literal|"CursorChange"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|ToolTipChange
case|:
name|n
operator|=
literal|"ToolTipChange"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|StatusTip
case|:
name|n
operator|=
literal|"StatusTip"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|WhatsThis
case|:
name|n
operator|=
literal|"WhatsThis"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|FontChange
case|:
name|n
operator|=
literal|"FontChange"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Style
case|:
name|n
operator|=
literal|"Style"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|KeyboardLayoutChange
case|:
name|n
operator|=
literal|"KeyboardLayoutChange"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|DynamicPropertyChange
case|:
name|n
operator|=
literal|"DynamicPropertyChange"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GrabMouse
case|:
name|n
operator|=
literal|"GrabMouse"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|UngrabMouse
case|:
name|n
operator|=
literal|"UngrabMouse"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GrabKeyboard
case|:
name|n
operator|=
literal|"GrabKeyboard"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|UngrabKeyboard
case|:
name|n
operator|=
literal|"UngrabKeyboard"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|ChildAdded
case|:
name|n
operator|=
name|n
condition|?
name|n
else|:
literal|"ChildAdded"
expr_stmt|;
case|case
name|QEvent
operator|::
name|ChildPolished
case|:
name|n
operator|=
name|n
condition|?
name|n
else|:
literal|"ChildPolished"
expr_stmt|;
case|case
name|QEvent
operator|::
name|ChildRemoved
case|:
name|n
operator|=
name|n
condition|?
name|n
else|:
literal|"ChildRemoved"
expr_stmt|;
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QChildEvent("
operator|<<
name|n
operator|<<
literal|", "
operator|<<
operator|(
cast|static_cast
argument_list|<
specifier|const
name|QChildEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
operator|)
operator|->
name|child
argument_list|()
expr_stmt|;
return|return
name|dbg
operator|.
name|space
argument_list|()
return|;
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
case|case
name|QEvent
operator|::
name|Gesture
case|:
name|n
operator|=
literal|"Gesture"
expr_stmt|;
break|break;
endif|#
directive|endif
default|default:
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QEvent("
operator|<<
operator|(
specifier|const
name|void
operator|*
operator|)
name|e
operator|<<
literal|", type = "
operator|<<
name|e
operator|->
name|type
argument_list|()
operator|<<
literal|')'
expr_stmt|;
return|return
name|dbg
operator|.
name|space
argument_list|()
return|;
block|}
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|'Q'
operator|<<
name|n
operator|<<
literal|"Event("
operator|<<
operator|(
specifier|const
name|void
operator|*
operator|)
name|e
operator|<<
literal|')'
expr_stmt|;
return|return
name|dbg
operator|.
name|space
argument_list|()
return|;
else|#
directive|else
name|qWarning
argument_list|(
literal|"This compiler doesn't support streaming QEvent to QDebug"
argument_list|)
expr_stmt|;
return|return
name|dbg
return|;
name|Q_UNUSED
argument_list|(
name|e
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_comment
comment|/*!     \class QClipboardEvent     \ingroup events     \internal      \brief The QClipboardEvent class provides the parameters used in a clipboard event.      This class is for internal use only, and exists to aid the clipboard on various     platforms to get all the information it needs. Use QEvent::Clipboard instead.      \sa QClipboard */
end_comment
begin_constructor
DECL|function|QClipboardEvent
name|QClipboardEvent
operator|::
name|QClipboardEvent
parameter_list|(
name|QEventPrivate
modifier|*
name|data
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Clipboard
argument_list|)
block|{
name|d
operator|=
name|data
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QClipboardEvent
name|QClipboardEvent
operator|::
name|~
name|QClipboardEvent
parameter_list|()
block|{ }
end_destructor
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CLIPBOARD
end_comment
begin_comment
comment|/*!     \class QShortcutEvent     \brief The QShortcutEvent class provides an event which is generated when     the user presses a key combination.      \ingroup events      Normally you don't need to use this class directly; QShortcut     provides a higher-level interface to handle shortcut keys.      \sa QShortcut */
end_comment
begin_comment
comment|/*!     \fn const QKeySequence&QShortcutEvent::key() const      Returns the key sequence that triggered the event. */
end_comment
begin_comment
comment|/*!     \fn int QShortcutEvent::shortcutId() const      Returns the ID of the QShortcut object for which this event was     generated.      \sa QShortcut::id() */
end_comment
begin_comment
comment|/*!     \fn bool QShortcutEvent::isAmbiguous() const      Returns true if the key sequence that triggered the event is     ambiguous.      \sa QShortcut::activatedAmbiguously() */
end_comment
begin_comment
comment|/*!     \class QWindowStateChangeEvent     \ingroup events      \brief The QWindowStateChangeEvent class provides the window state before a     window state change. */
end_comment
begin_comment
comment|/*! \fn Qt::WindowStates QWindowStateChangeEvent::oldState() const      Returns the state of the window before the change. */
end_comment
begin_comment
comment|/*! \internal  */
end_comment
begin_constructor
DECL|function|QWindowStateChangeEvent
name|QWindowStateChangeEvent
operator|::
name|QWindowStateChangeEvent
parameter_list|(
name|Qt
operator|::
name|WindowStates
name|s
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|WindowStateChange
argument_list|)
member_init_list|,
name|ostate
argument_list|(
name|s
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*! \internal  */
end_comment
begin_constructor
DECL|function|QWindowStateChangeEvent
name|QWindowStateChangeEvent
operator|::
name|QWindowStateChangeEvent
parameter_list|(
name|Qt
operator|::
name|WindowStates
name|s
parameter_list|,
name|bool
name|isOverride
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|WindowStateChange
argument_list|)
member_init_list|,
name|ostate
argument_list|(
name|s
argument_list|)
block|{
if|if
condition|(
name|isOverride
condition|)
name|d
operator|=
operator|(
name|QEventPrivate
operator|*
operator|)
operator|(
name|this
operator|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*! \internal  */
end_comment
begin_function
DECL|function|isOverride
name|bool
name|QWindowStateChangeEvent
operator|::
name|isOverride
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|d
operator|!=
literal|0
operator|)
return|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_destructor
DECL|function|~QWindowStateChangeEvent
name|QWindowStateChangeEvent
operator|::
name|~
name|QWindowStateChangeEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \class QTouchEvent     \brief The QTouchEvent class contains parameters that describe a touch event.     \since 4.6     \ingroup events     \ingroup touch      \section1 Enabling Touch Events      Touch events occur when pressing, releasing, or moving one or more touch points on a touch     device (such as a touch-screen or track-pad). To receive touch events, widgets have to have the     Qt::WA_AcceptTouchEvents attribute set and graphics items need to have the     \l{QGraphicsItem::setAcceptTouchEvents()}{acceptTouchEvents} attribute set to true.      When using QAbstractScrollArea based widgets, you should enable the Qt::WA_AcceptTouchEvents     attribute on the scroll area's \l{QAbstractScrollArea::viewport()}{viewport}.      Similarly to QMouseEvent, Qt automatically grabs each touch point on the first press inside a     widget, and the widget will receive all updates for the touch point until it is released.     Note that it is possible for a widget to receive events for numerous touch points, and that     multiple widgets may be receiving touch events at the same time.      \section1 Event Handling      All touch events are of type QEvent::TouchBegin, QEvent::TouchUpdate, or QEvent::TouchEnd.     Reimplement QWidget::event() or QAbstractScrollArea::viewportEvent() for widgets and     QGraphicsItem::sceneEvent() for items in a graphics view to receive touch events.      The QEvent::TouchUpdate and QEvent::TouchEnd events are sent to the widget or item that     accepted the QEvent::TouchBegin event. If the QEvent::TouchBegin event is not accepted and not     filtered by an event filter, then no further touch events are sent until the next     QEvent::TouchBegin.      The touchPoints() function returns a list of all touch points contained in the event.     Information about each touch point can be retrieved using the QTouchEvent::TouchPoint class.     The Qt::TouchPointState enum describes the different states that a touch point may have.      \section1 Event Delivery and Propagation      By default, QGuiApplication translates the first touch point in a QTouchEvent into     a QMouseEvent. This makes it possible to enable touch events on existing widgets that do not     normally handle QTouchEvent. See below for information on some special considerations needed     when doing this.      QEvent::TouchBegin is the first touch event sent to a widget. The QEvent::TouchBegin event     contains a special accept flag that indicates whether the receiver wants the event. By default,     the event is accepted. You should call ignore() if the touch event is not handled by your     widget. The QEvent::TouchBegin event is propagated up the parent widget chain until a widget     accepts it with accept(), or an event filter consumes it. For QGraphicsItems, the     QEvent::TouchBegin event is propagated to items under the mouse (similar to mouse event     propagation for QGraphicsItems).      \section1 Touch Point Grouping      As mentioned above, it is possible that several widgets can be receiving QTouchEvents at the     same time. However, Qt makes sure to never send duplicate QEvent::TouchBegin events to the same     widget, which could theoretically happen during propagation if, for example, the user touched 2     separate widgets in a QGroupBox and both widgets ignored the QEvent::TouchBegin event.      To avoid this, Qt will group new touch points together using the following rules:      \list      \i When the first touch point is detected, the destination widget is determined firstly by the     location on screen and secondly by the propagation rules.      \i When additional touch points are detected, Qt first looks to see if there are any active     touch points on any ancestor or descendent of the widget under the new touch point. If there     are, the new touch point is grouped with the first, and the new touch point will be sent in a     single QTouchEvent to the widget that handled the first touch point. (The widget under the new     touch point will not receive an event).      \endlist      This makes it possible for sibling widgets to handle touch events independently while making     sure that the sequence of QTouchEvents is always correct.      \section1 Mouse Events and Touch Event synthesizing      QTouchEvent delivery is independent from that of QMouseEvent. The application flags     Qt::AA_SynthesizeTouchForUnhandledMouseEvents and Qt::AA_SynthesizeMouseForUnhandledTouchEvents     can be used to enable or disable automatic synthesizing of touch events to mouse events and     mouse events to touch events.      \section1 Caveats      \list      \i As mentioned above, enabling touch events means multiple widgets can be receiving touch     events simultaneously. Combined with the default QWidget::event() handling for QTouchEvents,     this gives you great flexibility in designing touch user interfaces. Be aware of the     implications. For example, it is possible that the user is moving a QSlider with one finger and     pressing a QPushButton with another. The signals emitted by these widgets will be     interleaved.      \i Recursion into the event loop using one of the exec() methods (e.g., QDialog::exec() or     QMenu::exec()) in a QTouchEvent event handler is not supported. Since there are multiple event     recipients, recursion may cause problems, including but not limited to lost events     and unexpected infinite recursion.      \i QTouchEvents are not affected by a \l{QWidget::grabMouse()}{mouse grab} or an     \l{QApplication::activePopupWidget()}{active pop-up widget}. The behavior of QTouchEvents is     undefined when opening a pop-up or grabbing the mouse while there are more than one active touch     points.      \endlist      \sa QTouchEvent::TouchPoint, Qt::TouchPointState, Qt::WA_AcceptTouchEvents,     QGraphicsItem::acceptTouchEvents() */
end_comment
begin_comment
comment|/*! \enum Qt::TouchPointState     \since 4.6      This enum represents the state of a touch point at the time the     QTouchEvent occurred.      \value TouchPointPressed The touch point is now pressed.     \value TouchPointMoved The touch point moved.     \value TouchPointStationary The touch point did not move.     \value TouchPointReleased The touch point was released. */
end_comment
begin_comment
comment|/*! \enum QTouchEvent::DeviceType      This enum represents the type of device that generated a QTouchEvent.      This enum has been deprecated. Use QTouchDevice::DeviceType instead.      \sa QTouchDevice::DeviceType, QTouchDevice::type(), QTouchEvent::device() */
end_comment
begin_comment
comment|/*!     Constructs a QTouchEvent with the given \a eventType, \a deviceType, \a     touchPoints and \a device. The \a touchPointStates and \a modifiers     are the current touch point states and keyboard modifiers at the time of     the event. */
end_comment
begin_constructor
DECL|function|QTouchEvent
name|QTouchEvent
operator|::
name|QTouchEvent
parameter_list|(
name|QEvent
operator|::
name|Type
name|eventType
parameter_list|,
name|QTouchDevice
modifier|*
name|device
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
name|Qt
operator|::
name|TouchPointStates
name|touchPointStates
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
modifier|&
name|touchPoints
parameter_list|)
member_init_list|:
name|QInputEvent
argument_list|(
name|eventType
argument_list|,
name|modifiers
argument_list|)
member_init_list|,
name|_window
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|_target
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|_device
argument_list|(
name|device
argument_list|)
member_init_list|,
name|_touchPointStates
argument_list|(
name|touchPointStates
argument_list|)
member_init_list|,
name|_touchPoints
argument_list|(
name|touchPoints
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the QTouchEvent. */
end_comment
begin_destructor
DECL|function|~QTouchEvent
name|QTouchEvent
operator|::
name|~
name|QTouchEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*! \fn QWindow *QTouchEvent::window() const      Returns the window on which the event occurred. Useful for doing     global-local mapping on data like rawScreenPositions() which,     for performance reasons, only stores the global positions in the     touch event. */
end_comment
begin_comment
comment|/*! \fn QObject *QTouchEvent::target() const      Returns the target object within the window on which the event occurred.     This is typically a QWidget or a QQuickItem. May be 0 when no specific target is available. */
end_comment
begin_comment
comment|/*! \fn QTouchEvent::DeviceType QTouchEvent::deviceType() const      Returns the touch device Type, which is of type \l {QTouchEvent::DeviceType} {DeviceType}.      This function has been deprecated. Use QTouchDevice::type() instead.      \sa QTouchDevice::type(), QTouchEvent::device() */
end_comment
begin_comment
comment|/*! \fn Qt::TouchPointStates QTouchEvent::touchPointStates() const      Returns a bitwise OR of all the touch point states for this event. */
end_comment
begin_comment
comment|/*! \fn const QList<QTouchEvent::TouchPoint>&QTouchEvent::touchPoints() const      Returns the list of touch points contained in the touch event. */
end_comment
begin_comment
comment|/*! \fn QTouchEvent::DeviceType QTouchEvent::deviceType() const      Returns the touch device Type, which is of type \l {QTouchEvent::DeviceType} {DeviceType}. */
end_comment
begin_comment
comment|/*! \fn QTouchDevice* QTouchEvent::device() const      Returns the touch device from which this touch event originates. */
end_comment
begin_comment
comment|/*! \fn void QTouchEvent::setWindow(QWindow *window)      \internal      Sets the window for this event. */
end_comment
begin_comment
comment|/*! \fn void QTouchEvent::setTarget(QObject *target)      \internal      Sets the target within the window (typically a widget) for this event. */
end_comment
begin_comment
comment|/*! \fn void QTouchEvent::setTouchPointStates(Qt::TouchPointStates touchPointStates)      \internal      Sets a bitwise OR of all the touch point states for this event. */
end_comment
begin_comment
comment|/*! \fn void QTouchEvent::setTouchPoints(const QList<QTouchEvent::TouchPoint>&touchPoints)      \internal      Sets the list of touch points for this event. */
end_comment
begin_comment
comment|/*! \fn void QTouchEvent::setDeviceType(DeviceType deviceType)      \internal      Sets the device type to \a deviceType, which is of type \l {QTouchEvent::DeviceType}     {DeviceType}. */
end_comment
begin_comment
comment|/*! \fn void QTouchEvent::setTouchDevice(QTouchDevice *device)      \internal      Sets the touch event's device to the given one. */
end_comment
begin_comment
comment|/*! \class QTouchEvent::TouchPoint     \brief The TouchPoint class provides information about a touch point in a QTouchEvent.     \since 4.6 */
end_comment
begin_comment
comment|/*! \enum QTouchEvent::TouchPoint::InfoFlags      The values of this enum describe additional information about a touch point.      \value Pen Indicates that the contact has been made by a designated pointing device (e.g. a pen) instead of a finger. */
end_comment
begin_comment
comment|/*! \internal      Constructs a QTouchEvent::TouchPoint for use in a QTouchEvent. */
end_comment
begin_constructor
DECL|function|TouchPoint
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|TouchPoint
parameter_list|(
name|int
name|id
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QTouchEventTouchPointPrivate
argument_list|(
name|id
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*! \internal      Constructs a copy of \a other. */
end_comment
begin_constructor
DECL|function|TouchPoint
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|TouchPoint
parameter_list|(
specifier|const
name|QTouchEvent
operator|::
name|TouchPoint
modifier|&
name|other
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|other
operator|.
name|d
argument_list|)
block|{
name|d
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
end_constructor
begin_comment
comment|/*! \internal      Destroys the QTouchEvent::TouchPoint. */
end_comment
begin_destructor
DECL|function|~TouchPoint
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|~
name|TouchPoint
parameter_list|()
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     Returns the id number of this touch point.      Do not assume that id numbers start at zero or that they are sequential.     Such an assumption is often false due to the way the underlying drivers work. */
end_comment
begin_function
DECL|function|id
name|int
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|id
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|id
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the current state of this touch point. */
end_comment
begin_function
DECL|function|state
name|Qt
operator|::
name|TouchPointState
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|state
parameter_list|()
specifier|const
block|{
return|return
name|Qt
operator|::
name|TouchPointState
argument_list|(
name|int
argument_list|(
name|d
operator|->
name|state
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the position of this touch point, relative to the widget     or QGraphicsItem that received the event.      \sa startPos(), lastPos(), screenPos(), scenePos(), normalizedPos() */
end_comment
begin_function
DECL|function|pos
name|QPointF
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|pos
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|rect
operator|.
name|center
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the scene position of this touch point.      The scene position is the position in QGraphicsScene coordinates     if the QTouchEvent is handled by a QGraphicsItem::touchEvent()     reimplementation, and identical to the screen position for     widgets.      \sa startScenePos(), lastScenePos(), pos() */
end_comment
begin_function
DECL|function|scenePos
name|QPointF
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|scenePos
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|sceneRect
operator|.
name|center
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the screen position of this touch point.      \sa startScreenPos(), lastScreenPos(), pos() */
end_comment
begin_function
DECL|function|screenPos
name|QPointF
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|screenPos
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|screenRect
operator|.
name|center
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the normalized position of this touch point.      The coordinates are normalized to the size of the touch device,     i.e. (0,0) is the top-left corner and (1,1) is the bottom-right corner.      \sa startNormalizedPos(), lastNormalizedPos(), pos() */
end_comment
begin_function
DECL|function|normalizedPos
name|QPointF
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|normalizedPos
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|normalizedPos
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the starting position of this touch point, relative to the     widget or QGraphicsItem that received the event.      \sa pos(), lastPos() */
end_comment
begin_function
DECL|function|startPos
name|QPointF
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|startPos
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|startPos
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the starting scene position of this touch point.      The scene position is the position in QGraphicsScene coordinates     if the QTouchEvent is handled by a QGraphicsItem::touchEvent()     reimplementation, and identical to the screen position for     widgets.      \sa scenePos(), lastScenePos() */
end_comment
begin_function
DECL|function|startScenePos
name|QPointF
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|startScenePos
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|startScenePos
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the starting screen position of this touch point.      \sa screenPos(), lastScreenPos() */
end_comment
begin_function
DECL|function|startScreenPos
name|QPointF
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|startScreenPos
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|startScreenPos
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the normalized starting position of this touch point.      The coordinates are normalized to the size of the touch device,     i.e. (0,0) is the top-left corner and (1,1) is the bottom-right corner.      \sa normalizedPos(), lastNormalizedPos() */
end_comment
begin_function
DECL|function|startNormalizedPos
name|QPointF
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|startNormalizedPos
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|startNormalizedPos
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the position of this touch point from the previous touch     event, relative to the widget or QGraphicsItem that received the event.      \sa pos(), startPos() */
end_comment
begin_function
DECL|function|lastPos
name|QPointF
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|lastPos
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|lastPos
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the scene position of this touch point from the previous     touch event.      The scene position is the position in QGraphicsScene coordinates     if the QTouchEvent is handled by a QGraphicsItem::touchEvent()     reimplementation, and identical to the screen position for     widgets.      \sa scenePos(), startScenePos() */
end_comment
begin_function
DECL|function|lastScenePos
name|QPointF
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|lastScenePos
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|lastScenePos
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the screen position of this touch point from the previous     touch event.      \sa screenPos(), startScreenPos() */
end_comment
begin_function
DECL|function|lastScreenPos
name|QPointF
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|lastScreenPos
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|lastScreenPos
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the normalized position of this touch point from the     previous touch event.      The coordinates are normalized to the size of the touch device,     i.e. (0,0) is the top-left corner and (1,1) is the bottom-right corner.      \sa normalizedPos(), startNormalizedPos() */
end_comment
begin_function
DECL|function|lastNormalizedPos
name|QPointF
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|lastNormalizedPos
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|lastNormalizedPos
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the rect for this touch point, relative to the widget     or QGraphicsItem that received the event. The rect is centered     around the point returned by pos().      \note This function returns an empty rect if the device does not report touch point sizes. */
end_comment
begin_function
DECL|function|rect
name|QRectF
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|rect
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|rect
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the rect for this touch point in scene coordinates.      \note This function returns an empty rect if the device does not report touch point sizes.      \sa scenePos(), rect() */
end_comment
begin_function
DECL|function|sceneRect
name|QRectF
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|sceneRect
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|sceneRect
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the rect for this touch point in screen coordinates.      \note This function returns an empty rect if the device does not report touch point sizes.      \sa screenPos(), rect() */
end_comment
begin_function
DECL|function|screenRect
name|QRectF
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|screenRect
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|screenRect
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the pressure of this touch point. The return value is in     the range 0.0 to 1.0. */
end_comment
begin_function
DECL|function|pressure
name|qreal
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|pressure
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|pressure
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a velocity vector for this touch point.     The vector is in the screen's coordinate system, using pixels per seconds for the magnitude.      \note The returned vector is only valid if the touch device's capabilities include QTouchDevice::Velocity.      \sa QTouchDevice::capabilities(), device() */
end_comment
begin_function
DECL|function|velocity
name|QVector2D
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|velocity
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|velocity
return|;
block|}
end_function
begin_comment
comment|/*!   Returns additional information about the touch point.    \sa QTouchEvent::TouchPoint::InfoFlags   */
end_comment
begin_function
DECL|function|flags
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|InfoFlags
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|flags
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|flags
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the raw, unfiltered positions for the touch point. The positions are in screen coordinates.   To get local coordinates you can use mapFromGlobal() of the QWindow returned by QTouchEvent::window().    \note Returns an empty list if the touch device's capabilities do not include QTouchDevice::RawPositions.    \sa QTouchDevice::capabilities(), device(), window()   */
end_comment
begin_function
DECL|function|rawScreenPositions
name|QList
argument_list|<
name|QPointF
argument_list|>
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|rawScreenPositions
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|rawScreenPositions
return|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|setId
name|void
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|setId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
name|d
operator|=
name|d
operator|->
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|id
operator|=
name|id
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|setState
name|void
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|setState
parameter_list|(
name|Qt
operator|::
name|TouchPointStates
name|state
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
name|d
operator|=
name|d
operator|->
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|state
operator|=
name|state
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|setPos
name|void
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|setPos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
name|d
operator|=
name|d
operator|->
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|rect
operator|.
name|moveCenter
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|setScenePos
name|void
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|setScenePos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|scenePos
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
name|d
operator|=
name|d
operator|->
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|sceneRect
operator|.
name|moveCenter
argument_list|(
name|scenePos
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|setScreenPos
name|void
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|setScreenPos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|screenPos
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
name|d
operator|=
name|d
operator|->
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|screenRect
operator|.
name|moveCenter
argument_list|(
name|screenPos
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|setNormalizedPos
name|void
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|setNormalizedPos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|normalizedPos
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
name|d
operator|=
name|d
operator|->
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|normalizedPos
operator|=
name|normalizedPos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|setStartPos
name|void
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|setStartPos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|startPos
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
name|d
operator|=
name|d
operator|->
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|startPos
operator|=
name|startPos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|setStartScenePos
name|void
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|setStartScenePos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|startScenePos
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
name|d
operator|=
name|d
operator|->
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|startScenePos
operator|=
name|startScenePos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|setStartScreenPos
name|void
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|setStartScreenPos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|startScreenPos
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
name|d
operator|=
name|d
operator|->
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|startScreenPos
operator|=
name|startScreenPos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|setStartNormalizedPos
name|void
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|setStartNormalizedPos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|startNormalizedPos
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
name|d
operator|=
name|d
operator|->
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|startNormalizedPos
operator|=
name|startNormalizedPos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|setLastPos
name|void
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|setLastPos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|lastPos
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
name|d
operator|=
name|d
operator|->
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|lastPos
operator|=
name|lastPos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|setLastScenePos
name|void
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|setLastScenePos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|lastScenePos
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
name|d
operator|=
name|d
operator|->
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|lastScenePos
operator|=
name|lastScenePos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|setLastScreenPos
name|void
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|setLastScreenPos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|lastScreenPos
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
name|d
operator|=
name|d
operator|->
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|lastScreenPos
operator|=
name|lastScreenPos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|setLastNormalizedPos
name|void
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|setLastNormalizedPos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|lastNormalizedPos
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
name|d
operator|=
name|d
operator|->
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|lastNormalizedPos
operator|=
name|lastNormalizedPos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|setRect
name|void
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|setRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
name|d
operator|=
name|d
operator|->
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|rect
operator|=
name|rect
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|setSceneRect
name|void
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|setSceneRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|sceneRect
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
name|d
operator|=
name|d
operator|->
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|sceneRect
operator|=
name|sceneRect
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|setScreenRect
name|void
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|setScreenRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|screenRect
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
name|d
operator|=
name|d
operator|->
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|screenRect
operator|=
name|screenRect
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|setPressure
name|void
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|setPressure
parameter_list|(
name|qreal
name|pressure
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
name|d
operator|=
name|d
operator|->
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|pressure
operator|=
name|pressure
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|setVelocity
name|void
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|setVelocity
parameter_list|(
specifier|const
name|QVector2D
modifier|&
name|v
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
name|d
operator|=
name|d
operator|->
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|velocity
operator|=
name|v
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|setRawScreenPositions
name|void
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|setRawScreenPositions
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QPointF
argument_list|>
modifier|&
name|positions
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
name|d
operator|=
name|d
operator|->
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|rawScreenPositions
operator|=
name|positions
expr_stmt|;
block|}
end_function
begin_comment
comment|/* \internal */
end_comment
begin_function
DECL|function|setFlags
name|void
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|setFlags
parameter_list|(
name|InfoFlags
name|flags
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
name|d
operator|=
name|d
operator|->
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|flags
operator|=
name|flags
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|operator =
name|QTouchEvent
operator|::
name|TouchPoint
modifier|&
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QTouchEvent
operator|::
name|TouchPoint
modifier|&
name|other
parameter_list|)
block|{
name|other
operator|.
name|d
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|d
expr_stmt|;
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     \class QScrollPrepareEvent     \since 4.8     \ingroup events      \brief The QScrollPrepareEvent class is send in preparation of a scrolling.      The scroll prepare event is send before scrolling (usually by QScroller) is started.     The object receiving this event should set viewportSize, maxContentPos and contentPos.     It also should accept this event to indicate that scrolling should be started.      It is not guaranteed that a QScrollEvent will be send after an acceepted     QScrollPrepareEvent, e.g. in a case where the maximum content position is (0,0).      \sa QScrollEvent, QScroller */
end_comment
begin_comment
comment|/*!     Creates new QScrollPrepareEvent     The \a startPos is the position of a touch or mouse event that started the scrolling. */
end_comment
begin_constructor
DECL|function|QScrollPrepareEvent
name|QScrollPrepareEvent
operator|::
name|QScrollPrepareEvent
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|startPos
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|QEvent
operator|::
name|ScrollPrepare
argument_list|)
block|{
name|d
operator|=
cast|reinterpret_cast
argument_list|<
name|QEventPrivate
operator|*
argument_list|>
argument_list|(
operator|new
name|QScrollPrepareEventPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|d_func
argument_list|()
operator|->
name|startPos
operator|=
name|startPos
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys QScrollEvent. */
end_comment
begin_destructor
DECL|function|~QScrollPrepareEvent
name|QScrollPrepareEvent
operator|::
name|~
name|QScrollPrepareEvent
parameter_list|()
block|{
operator|delete
cast|reinterpret_cast
argument_list|<
name|QScrollPrepareEventPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     Returns the position of the touch or mouse event that started the scrolling. */
end_comment
begin_function
DECL|function|startPos
name|QPointF
name|QScrollPrepareEvent
operator|::
name|startPos
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|startPos
return|;
block|}
end_function
begin_comment
comment|/*!     Returns size of the area that is to be scrolled as set by setViewportSize      \sa setViewportSize() */
end_comment
begin_function
DECL|function|viewportSize
name|QSizeF
name|QScrollPrepareEvent
operator|::
name|viewportSize
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|viewportSize
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the range of coordinates for the content as set by setContentPosRange(). */
end_comment
begin_function
DECL|function|contentPosRange
name|QRectF
name|QScrollPrepareEvent
operator|::
name|contentPosRange
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|contentPosRange
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the current position of the content as set by setContentPos. */
end_comment
begin_function
DECL|function|contentPos
name|QPointF
name|QScrollPrepareEvent
operator|::
name|contentPos
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|contentPos
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the size of the area that is to be scrolled to \a size.      \sa viewportSize() */
end_comment
begin_function
DECL|function|setViewportSize
name|void
name|QScrollPrepareEvent
operator|::
name|setViewportSize
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|viewportSize
operator|=
name|size
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the range of content coordinates to \a rect.      \sa contentPosRange() */
end_comment
begin_function
DECL|function|setContentPosRange
name|void
name|QScrollPrepareEvent
operator|::
name|setContentPosRange
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|contentPosRange
operator|=
name|rect
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the current content position to \a pos.      \sa contentPos() */
end_comment
begin_function
DECL|function|setContentPos
name|void
name|QScrollPrepareEvent
operator|::
name|setContentPos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|contentPos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|d_func
name|QScrollPrepareEventPrivate
modifier|*
name|QScrollPrepareEvent
operator|::
name|d_func
parameter_list|()
block|{
return|return
cast|reinterpret_cast
argument_list|<
name|QScrollPrepareEventPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|d_func
specifier|const
name|QScrollPrepareEventPrivate
modifier|*
name|QScrollPrepareEvent
operator|::
name|d_func
parameter_list|()
specifier|const
block|{
return|return
cast|reinterpret_cast
argument_list|<
specifier|const
name|QScrollPrepareEventPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \class QScrollEvent     \since 4.8     \ingroup events      \brief The QScrollEvent class is send when scrolling.      The scroll event is send to indicate that the receiver should be scrolled.     Usually the receiver should be something visual like QWidget or QGraphicsObject.      Some care should be taken that no conflicting QScrollEvents are sent from two     sources. Using QScroller::scrollTo is save however.      \sa QScrollPrepareEvent, QScroller */
end_comment
begin_comment
comment|/*!     \enum QScrollEvent::ScrollState      This enum describes the states a scroll event can have.      \value ScrollStarted Set for the first scroll event of a scroll activity.      \value ScrollUpdated Set for all but the first and the last scroll event of a scroll activity.      \value ScrollFinished Set for the last scroll event of a scroll activity.      \sa QScrollEvent::scrollState() */
end_comment
begin_comment
comment|/*!     Creates a new QScrollEvent     \a contentPos is the new content position, \a overshootDistance is the     new overshoot distance while \a scrollState indicates if this scroll     event is the first one, the last one or some event in between. */
end_comment
begin_constructor
DECL|function|QScrollEvent
name|QScrollEvent
operator|::
name|QScrollEvent
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|contentPos
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|overshootDistance
parameter_list|,
name|ScrollState
name|scrollState
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Scroll
argument_list|)
block|{
name|d
operator|=
cast|reinterpret_cast
argument_list|<
name|QEventPrivate
operator|*
argument_list|>
argument_list|(
operator|new
name|QScrollEventPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|d_func
argument_list|()
operator|->
name|contentPos
operator|=
name|contentPos
expr_stmt|;
name|d_func
argument_list|()
operator|->
name|overshoot
operator|=
name|overshootDistance
expr_stmt|;
name|d_func
argument_list|()
operator|->
name|state
operator|=
name|scrollState
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys QScrollEvent. */
end_comment
begin_destructor
DECL|function|~QScrollEvent
name|QScrollEvent
operator|::
name|~
name|QScrollEvent
parameter_list|()
block|{
operator|delete
cast|reinterpret_cast
argument_list|<
name|QScrollEventPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     Returns the new scroll position. */
end_comment
begin_function
DECL|function|contentPos
name|QPointF
name|QScrollEvent
operator|::
name|contentPos
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|contentPos
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the new overshoot distance.     See QScroller for an explanation of the term overshoot.      \sa QScroller */
end_comment
begin_function
DECL|function|overshootDistance
name|QPointF
name|QScrollEvent
operator|::
name|overshootDistance
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|overshoot
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the current scroll state as a combination of ScrollStateFlag values.     ScrollStarted (or ScrollFinished) will be set, if this scroll event is the first (or last) event in a scrolling activity.     Please note that both values can be set at the same time, if the activity consists of a single QScrollEvent.     All other scroll events in between will have their state set to ScrollUpdated.      A widget could for example revert selections when scrolling is started and stopped. */
end_comment
begin_function
DECL|function|scrollState
name|QScrollEvent
operator|::
name|ScrollState
name|QScrollEvent
operator|::
name|scrollState
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|state
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|d_func
name|QScrollEventPrivate
modifier|*
name|QScrollEvent
operator|::
name|d_func
parameter_list|()
block|{
return|return
cast|reinterpret_cast
argument_list|<
name|QScrollEventPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|d_func
specifier|const
name|QScrollEventPrivate
modifier|*
name|QScrollEvent
operator|::
name|d_func
parameter_list|()
specifier|const
block|{
return|return
cast|reinterpret_cast
argument_list|<
specifier|const
name|QScrollEventPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Creates a new QScreenOrientationChangeEvent     \a orientation is the new orientation of the screen. */
end_comment
begin_constructor
DECL|function|QScreenOrientationChangeEvent
name|QScreenOrientationChangeEvent
operator|::
name|QScreenOrientationChangeEvent
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
name|Qt
operator|::
name|ScreenOrientation
name|screenOrientation
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|QEvent
operator|::
name|OrientationChange
argument_list|)
block|{
name|d
operator|=
cast|reinterpret_cast
argument_list|<
name|QEventPrivate
operator|*
argument_list|>
argument_list|(
operator|new
name|QScreenOrientationChangeEventPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|d_func
argument_list|()
operator|->
name|screen
operator|=
name|screen
expr_stmt|;
name|d_func
argument_list|()
operator|->
name|orientation
operator|=
name|screenOrientation
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys QScreenOrientationChangeEvent. */
end_comment
begin_destructor
DECL|function|~QScreenOrientationChangeEvent
name|QScreenOrientationChangeEvent
operator|::
name|~
name|QScreenOrientationChangeEvent
parameter_list|()
block|{
operator|delete
cast|reinterpret_cast
argument_list|<
name|QScrollEventPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     Returns the screen whose orientation changed. */
end_comment
begin_function
DECL|function|screen
name|QScreen
modifier|*
name|QScreenOrientationChangeEvent
operator|::
name|screen
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|screen
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the orientation of the screen. */
end_comment
begin_function
DECL|function|orientation
name|Qt
operator|::
name|ScreenOrientation
name|QScreenOrientationChangeEvent
operator|::
name|orientation
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|orientation
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|d_func
name|QScreenOrientationChangeEventPrivate
modifier|*
name|QScreenOrientationChangeEvent
operator|::
name|d_func
parameter_list|()
block|{
return|return
cast|reinterpret_cast
argument_list|<
name|QScreenOrientationChangeEventPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|d_func
specifier|const
name|QScreenOrientationChangeEventPrivate
modifier|*
name|QScreenOrientationChangeEvent
operator|::
name|d_func
parameter_list|()
specifier|const
block|{
return|return
cast|reinterpret_cast
argument_list|<
specifier|const
name|QScreenOrientationChangeEventPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
