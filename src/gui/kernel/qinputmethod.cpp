begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qinputmethod.h>
end_include
begin_include
include|#
directive|include
file|<private/qinputmethod_p.h>
end_include
begin_include
include|#
directive|include
file|<qguiapplication.h>
end_include
begin_include
include|#
directive|include
file|<qtimer.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatforminputcontext_p.h>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \internal */
end_comment
begin_constructor
DECL|function|QInputMethod
name|QInputMethod
operator|::
name|QInputMethod
parameter_list|()
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QInputMethodPrivate
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_destructor
DECL|function|~QInputMethod
name|QInputMethod
operator|::
name|~
name|QInputMethod
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \class QInputMethod     \brief The QInputMethod class provides access to the active text input method.     \inmodule QtGui      QInputMethod is used by the text editors for integrating to the platform text input     methods and more commonly by application views for querying various text input method-related     information like virtual keyboard visibility and keyboard dimensions.      Qt Quick also provides access to QInputMethod in QML through \l{QmlGlobalQtObject}{Qt global object}     as \c Qt.inputMethod property. */
end_comment
begin_comment
comment|/*!     Returns the transformation from input item coordinates to the window coordinates. */
end_comment
begin_function
DECL|function|inputItemTransform
name|QTransform
name|QInputMethod
operator|::
name|inputItemTransform
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputMethod
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|inputItemTransform
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the transformation from input item coordinates to window coordinates to be \a transform.     Item transform needs to be updated by the focused window like QQuickCanvas whenever     item is moved inside the scene. */
end_comment
begin_function
DECL|function|setInputItemTransform
name|void
name|QInputMethod
operator|::
name|setInputItemTransform
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputMethod
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|inputItemTransform
operator|==
name|transform
condition|)
return|return;
name|d
operator|->
name|inputItemTransform
operator|=
name|transform
expr_stmt|;
emit|emit
name|cursorRectangleChanged
argument_list|()
emit|;
block|}
end_function
begin_comment
comment|/*!     \since 5.1      Returns the input item's geometry in input item coordinates.      \sa setInputItemRectangle() */
end_comment
begin_function
DECL|function|inputItemRectangle
name|QRectF
name|QInputMethod
operator|::
name|inputItemRectangle
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputMethod
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|inputRectangle
return|;
block|}
end_function
begin_comment
comment|/*!     \since 5.1      Sets the input item's geometry to be \a rect, in input item coordinates.     This needs to be updated by the focused window like QQuickCanvas whenever     item is moved inside the scene, or focus is changed. */
end_comment
begin_function
DECL|function|setInputItemRectangle
name|void
name|QInputMethod
operator|::
name|setInputItemRectangle
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputMethod
argument_list|)
expr_stmt|;
name|d
operator|->
name|inputRectangle
operator|=
name|rect
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QInputMethod::cursorRectangle     \brief Input item's cursor rectangle in window coordinates.      Cursor rectangle is often used by various text editing controls     like text prediction popups for following the text being typed. */
end_comment
begin_function
DECL|function|cursorRectangle
name|QRectF
name|QInputMethod
operator|::
name|cursorRectangle
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputMethod
argument_list|)
expr_stmt|;
name|QObject
modifier|*
name|focusObject
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|focusObject
condition|)
return|return
name|QRectF
argument_list|()
return|;
name|QInputMethodQueryEvent
name|query
argument_list|(
name|Qt
operator|::
name|ImCursorRectangle
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|sendEvent
argument_list|(
name|focusObject
argument_list|,
operator|&
name|query
argument_list|)
expr_stmt|;
name|QRectF
name|r
init|=
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorRectangle
argument_list|)
operator|.
name|toRectF
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QRectF
argument_list|()
return|;
return|return
name|d
operator|->
name|inputItemTransform
operator|.
name|mapRect
argument_list|(
name|r
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QInputMethod::keyboardRectangle     \brief Virtual keyboard's geometry in window coordinates. */
end_comment
begin_function
DECL|function|keyboardRectangle
name|QRectF
name|QInputMethod
operator|::
name|keyboardRectangle
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputMethod
argument_list|)
expr_stmt|;
name|QPlatformInputContext
modifier|*
name|ic
init|=
name|d
operator|->
name|platformInputContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ic
condition|)
return|return
name|ic
operator|->
name|keyboardRect
argument_list|()
return|;
return|return
name|QRectF
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Requests virtual keyboard to open. If the platform     doesn't provide virtual keyboard the visibility     remains false.      Normally applications should not need to call this     function, keyboard should automatically open when     the text editor gains focus. */
end_comment
begin_function
DECL|function|show
name|void
name|QInputMethod
operator|::
name|show
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QInputMethod
argument_list|)
expr_stmt|;
name|QPlatformInputContext
modifier|*
name|ic
init|=
name|d
operator|->
name|platformInputContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ic
condition|)
name|ic
operator|->
name|showInputPanel
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Requests virtual keyboard to close.      Normally applications should not need to call this function,     keyboard should automatically close when the text editor loses     focus, for example when the parent view is closed. */
end_comment
begin_function
DECL|function|hide
name|void
name|QInputMethod
operator|::
name|hide
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QInputMethod
argument_list|)
expr_stmt|;
name|QPlatformInputContext
modifier|*
name|ic
init|=
name|d
operator|->
name|platformInputContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ic
condition|)
name|ic
operator|->
name|hideInputPanel
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QInputMethod::visible     \brief Virtual keyboard's visibility on the screen      Input method visibility remains false for devices     with no virtual keyboards.      \sa show(), hide() */
end_comment
begin_function
DECL|function|isVisible
name|bool
name|QInputMethod
operator|::
name|isVisible
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputMethod
argument_list|)
expr_stmt|;
name|QPlatformInputContext
modifier|*
name|ic
init|=
name|d
operator|->
name|platformInputContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ic
condition|)
return|return
name|ic
operator|->
name|isInputPanelVisible
argument_list|()
return|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Controls the keyboard visibility. Equivalent     to calling show() (if \a visible is \c true)     or hide() (if \a visible is \c false).      \sa show(), hide() */
end_comment
begin_function
DECL|function|setVisible
name|void
name|QInputMethod
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
name|visible
condition|?
name|show
argument_list|()
else|:
name|hide
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QInputMethod::animating     \brief True when the virtual keyboard is being opened or closed.      Animating is false when keyboard is fully open or closed.     When \c animating is \c true and \c visibility is \c true keyboard     is being opened. When \c animating is \c true and \c visibility is     false keyboard is being closed. */
end_comment
begin_function
DECL|function|isAnimating
name|bool
name|QInputMethod
operator|::
name|isAnimating
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputMethod
argument_list|)
expr_stmt|;
name|QPlatformInputContext
modifier|*
name|ic
init|=
name|d
operator|->
name|platformInputContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ic
condition|)
return|return
name|ic
operator|->
name|isAnimating
argument_list|()
return|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     \property QInputMethod::locale     \brief Current input locale. */
end_comment
begin_function
DECL|function|locale
name|QLocale
name|QInputMethod
operator|::
name|locale
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputMethod
argument_list|)
expr_stmt|;
name|QPlatformInputContext
modifier|*
name|ic
init|=
name|d
operator|->
name|platformInputContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ic
condition|)
return|return
name|ic
operator|->
name|locale
argument_list|()
return|;
return|return
name|QLocale
operator|::
name|c
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QInputMethod::inputDirection     \brief Current input direction. */
end_comment
begin_function
DECL|function|inputDirection
name|Qt
operator|::
name|LayoutDirection
name|QInputMethod
operator|::
name|inputDirection
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputMethod
argument_list|)
expr_stmt|;
name|QPlatformInputContext
modifier|*
name|ic
init|=
name|d
operator|->
name|platformInputContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ic
condition|)
return|return
name|ic
operator|->
name|inputDirection
argument_list|()
return|;
return|return
name|Qt
operator|::
name|LeftToRight
return|;
block|}
end_function
begin_comment
comment|/*!     Called by the input item to inform the platform input methods when there has been     state changes in editor's input method query attributes. When calling the function     \a queries parameter has to be used to tell what has changes, which input method     can use to make queries for attributes it's interested with QInputMethodQueryEvent.      In particular calling update whenever the cursor position changes is important as     that often causes other query attributes like surrounding text and text selection     to change as well. The attributes that often change together with cursor position     have been grouped in Qt::ImQueryInput value for convenience. */
end_comment
begin_function
DECL|function|update
name|void
name|QInputMethod
operator|::
name|update
parameter_list|(
name|Qt
operator|::
name|InputMethodQueries
name|queries
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputMethod
argument_list|)
expr_stmt|;
if|if
condition|(
name|queries
operator|&
name|Qt
operator|::
name|ImEnabled
condition|)
block|{
name|QObject
modifier|*
name|focus
init|=
name|qApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
name|bool
name|enabled
init|=
name|d
operator|->
name|objectAcceptsInputMethod
argument_list|(
name|focus
argument_list|)
decl_stmt|;
name|QPlatformInputContextPrivate
operator|::
name|setInputMethodAccepted
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
name|QPlatformInputContext
modifier|*
name|ic
init|=
name|d
operator|->
name|platformInputContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ic
condition|)
name|ic
operator|->
name|update
argument_list|(
name|queries
argument_list|)
expr_stmt|;
if|if
condition|(
name|queries
operator|&
name|Qt
operator|::
name|ImCursorRectangle
condition|)
emit|emit
name|cursorRectangleChanged
argument_list|()
emit|;
block|}
end_function
begin_comment
comment|/*!     Resets the input method state. For example, a text editor normally calls     this method before inserting a text to make widget ready to accept a text.      Input method resets automatically when the focused editor changes. */
end_comment
begin_function
DECL|function|reset
name|void
name|QInputMethod
operator|::
name|reset
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QInputMethod
argument_list|)
expr_stmt|;
name|QPlatformInputContext
modifier|*
name|ic
init|=
name|d
operator|->
name|platformInputContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ic
condition|)
name|ic
operator|->
name|reset
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Commits the word user is currently composing to the editor. The function is     mostly needed by the input methods with text prediction features and by the     methods where the script used for typing characters is different from the     script that actually gets appended to the editor. Any kind of action that     interrupts the text composing needs to flush the composing state by calling the     commit() function, for example when the cursor is moved elsewhere. */
end_comment
begin_function
DECL|function|commit
name|void
name|QInputMethod
operator|::
name|commit
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QInputMethod
argument_list|)
expr_stmt|;
name|QPlatformInputContext
modifier|*
name|ic
init|=
name|d
operator|->
name|platformInputContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ic
condition|)
name|ic
operator|->
name|commit
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \enum QInputMethod::Action      Indicates the kind of action performed by the user.      \value Click        A normal click/tap     \value ContextMenu  A context menu click/tap (e.g. right-button or tap-and-hold)      \sa invokeAction() */
end_comment
begin_comment
comment|/*!     Called by the input item when the word currently being composed is tapped by     the user, as indicated by the action \a a and the given \a cursorPosition.     Input methods often use this information to offer more word suggestions to the user. */
end_comment
begin_function
DECL|function|invokeAction
name|void
name|QInputMethod
operator|::
name|invokeAction
parameter_list|(
name|Action
name|a
parameter_list|,
name|int
name|cursorPosition
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputMethod
argument_list|)
expr_stmt|;
name|QPlatformInputContext
modifier|*
name|ic
init|=
name|d
operator|->
name|platformInputContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ic
condition|)
name|ic
operator|->
name|invokeAction
argument_list|(
name|a
argument_list|,
name|cursorPosition
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|objectAcceptsInputMethod
name|bool
name|QInputMethodPrivate
operator|::
name|objectAcceptsInputMethod
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
block|{
name|bool
name|enabled
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|object
condition|)
block|{
name|QInputMethodQueryEvent
name|query
argument_list|(
name|Qt
operator|::
name|ImEnabled
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|sendEvent
argument_list|(
name|object
argument_list|,
operator|&
name|query
argument_list|)
expr_stmt|;
name|enabled
operator|=
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImEnabled
argument_list|)
operator|.
name|toBool
argument_list|()
expr_stmt|;
block|}
return|return
name|enabled
return|;
block|}
end_function
begin_comment
comment|/*!   Send \a query to the current focus object with parameters \a argument and return the result.  */
end_comment
begin_function
DECL|function|queryFocusObject
name|QVariant
name|QInputMethod
operator|::
name|queryFocusObject
parameter_list|(
name|Qt
operator|::
name|InputMethodQuery
name|query
parameter_list|,
name|QVariant
name|argument
parameter_list|)
block|{
name|QVariant
name|retval
decl_stmt|;
name|QObject
modifier|*
name|focusObject
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|focusObject
condition|)
return|return
name|retval
return|;
name|bool
name|newMethodWorks
init|=
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|focusObject
argument_list|,
literal|"inputMethodQuery"
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|QVariant
argument_list|,
name|retval
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|Qt
operator|::
name|InputMethodQuery
argument_list|,
name|query
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QVariant
argument_list|,
name|argument
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|newMethodWorks
condition|)
return|return
name|retval
return|;
name|QInputMethodQueryEvent
name|queryEvent
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|focusObject
argument_list|,
operator|&
name|queryEvent
argument_list|)
expr_stmt|;
return|return
name|queryEvent
operator|.
name|value
argument_list|(
name|query
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qinputmethod.cpp"
end_include
end_unit
