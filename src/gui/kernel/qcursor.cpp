begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qcursor.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qbitmap.h>
end_include
begin_include
include|#
directive|include
file|<qimage.h>
end_include
begin_include
include|#
directive|include
file|<qdatastream.h>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<private/qcursor_p.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*!     \class QCursor      \brief The QCursor class provides a mouse cursor with an arbitrary     shape.      \ingroup appearance     \ingroup shared       This class is mainly used to create mouse cursors that are     associated with particular widgets and to get and set the position     of the mouse cursor.      Qt has a number of standard cursor shapes, but you can also make     custom cursor shapes based on a QBitmap, a mask and a hotspot.      To associate a cursor with a widget, use QWidget::setCursor(). To     associate a cursor with all widgets (normally for a short period     of time), use QGuiApplication::setOverrideCursor().      To set a cursor shape use QCursor::setShape() or use the QCursor     constructor which takes the shape as argument, or you can use one     of the predefined cursors defined in the \l Qt::CursorShape enum.      If you want to create a cursor with your own bitmap, either use     the QCursor constructor which takes a bitmap and a mask or the     constructor which takes a pixmap as arguments.      To set or get the position of the mouse cursor use the static     methods QCursor::pos() and QCursor::setPos().      \bold{Note:} It is possible to create a QCursor before     QGuiApplication, but it is not useful except as a place-holder for a     real QCursor created after QGuiApplication. Attempting to use a     QCursor that was created before QGuiApplication will result in a     crash.      \section1 A Note for X11 Users      On X11, Qt supports the \link     http://www.xfree86.org/4.3.0/Xcursor.3.html Xcursor\endlink     library, which allows for full color icon themes. The table below     shows the cursor name used for each Qt::CursorShape value. If a     cursor cannot be found using the name shown below, a standard X11     cursor will be used instead. Note: X11 does not provide     appropriate cursors for all possible Qt::CursorShape values. It     is possible that some cursors will be taken from the Xcursor     theme, while others will use an internal bitmap cursor.      \table     \header \o Shape \o Qt::CursorShape Value \o Cursor Name             \o Shape \o Qt::CursorShape Value \o Cursor Name     \row \o \inlineimage cursor-arrow.png          \o Qt::ArrowCursor   \o \c left_ptr          \o \inlineimage      cursor-sizev.png          \o Qt::SizeVerCursor \o \c size_ver     \row \o \inlineimage      cursor-uparrow.png          \o Qt::UpArrowCursor \o \c up_arrow          \o \inlineimage      cursor-sizeh.png          \o Qt::SizeHorCursor \o \c size_hor     \row \o \inlineimage      cursor-cross.png          \o Qt::CrossCursor   \o \c cross          \o \inlineimage      cursor-sizeb.png          \o Qt::SizeBDiagCursor \o \c size_bdiag     \row \o \inlineimage      cursor-ibeam.png          \o Qt::IBeamCursor   \o \c ibeam          \o \inlineimage      cursor-sizef.png          \o Qt::SizeFDiagCursor \o \c size_fdiag     \row \o \inlineimage      cursor-wait.png          \o Qt::WaitCursor    \o \c wait          \o \inlineimage      cursor-sizeall.png          \o Qt::SizeAllCursor \o \c size_all     \row \o \inlineimage      cursor-busy.png          \o Qt::BusyCursor    \o \c left_ptr_watch          \o \inlineimage      cursor-vsplit.png          \o Qt::SplitVCursor  \o \c split_v     \row \o \inlineimage      cursor-forbidden.png          \o Qt::ForbiddenCursor \o \c forbidden          \o \inlineimage      cursor-hsplit.png          \o Qt::SplitHCursor  \o \c split_h     \row \o \inlineimage      cursor-hand.png          \o Qt::PointingHandCursor \o \c pointing_hand          \o \inlineimage      cursor-openhand.png          \o Qt::OpenHandCursor  \o \c openhand     \row \o \inlineimage      cursor-whatsthis.png          \o Qt::WhatsThisCursor \o \c whats_this          \o \inlineimage      cursor-closedhand.png          \o Qt::ClosedHandCursor \o \c closedhand     \row \o          \o Qt::DragMoveCursor      \o \c dnd-move or \c move          \o          \o Qt::DragCopyCursor      \o \c dnd-copy or \c copy     \row \o          \o Qt::DragLinkCursor      \o \c dnd-link or \c link     \endtable      \sa QWidget, {fowler}{GUI Design Handbook: Cursors} */
comment|/*!     \fn HCURSOR_or_HANDLE QCursor::handle() const      Returns a platform-specific cursor handle. The \c     HCURSOR_or_HANDLE type is \c HCURSOR on Windows and Qt::HANDLE on X11     and Mac OS X. On \l{Qt for Embedded Linux} it is an integer.      \warning Using the value returned by this function is not     portable. */
comment|/*!     \fn QCursor::QCursor(HCURSOR cursor)      Constructs a Qt cursor from the given Windows \a cursor.      \warning This function is only available on Windows.      \sa handle() */
comment|/*!     \fn QCursor::QCursor(Qt::HANDLE handle)      Constructs a Qt cursor from the given \a handle.      \warning This function is only available on X11.      \sa handle() */
comment|/*!     \fn QPoint QCursor::pos()      Returns the position of the cursor (hot spot) in global screen     coordinates.      You can call QWidget::mapFromGlobal() to translate it to widget     coordinates.      \sa setPos(), QWidget::mapFromGlobal(), QWidget::mapToGlobal() */
comment|/*!     \fn void QCursor::setPos(int x, int y)      Moves the cursor (hot spot) to the global screen position (\a x,     \a y).      You can call QWidget::mapToGlobal() to translate widget     coordinates to global screen coordinates.      \sa pos(), QWidget::mapFromGlobal(), QWidget::mapToGlobal() */
comment|/*!     \fn void QCursor::setPos (const QPoint&p)      \overload      Moves the cursor (hot spot) to the global screen position at point     \a p. */
comment|/*****************************************************************************   QCursor stream functions  *****************************************************************************/
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
comment|/*!     \fn QDataStream&operator<<(QDataStream&stream, const QCursor&cursor)     \relates QCursor      Writes the \a cursor to the \a stream.      \sa {Serializing Qt Data Types} */
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
specifier|const
name|QCursor
modifier|&
name|c
parameter_list|)
block|{
name|s
operator|<<
operator|(
name|qint16
operator|)
name|c
operator|.
name|shape
argument_list|()
expr_stmt|;
comment|// write shape id to stream
if|if
condition|(
name|c
operator|.
name|shape
argument_list|()
operator|==
name|Qt
operator|::
name|BitmapCursor
condition|)
block|{
comment|// bitmap cursor
name|bool
name|isPixmap
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|>=
literal|7
condition|)
block|{
name|isPixmap
operator|=
operator|!
name|c
operator|.
name|pixmap
argument_list|()
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|s
operator|<<
name|isPixmap
expr_stmt|;
block|}
if|if
condition|(
name|isPixmap
condition|)
name|s
operator|<<
name|c
operator|.
name|pixmap
argument_list|()
expr_stmt|;
else|else
name|s
operator|<<
operator|*
name|c
operator|.
name|bitmap
argument_list|()
operator|<<
operator|*
name|c
operator|.
name|mask
argument_list|()
expr_stmt|;
name|s
operator|<<
name|c
operator|.
name|hotSpot
argument_list|()
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QDataStream&operator>>(QDataStream&stream, QCursor&cursor)     \relates QCursor      Reads the \a cursor from the \a stream.      \sa {Serializing Qt Data Types} */
end_comment
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
name|QCursor
modifier|&
name|c
parameter_list|)
block|{
name|qint16
name|shape
decl_stmt|;
name|s
operator|>>
name|shape
expr_stmt|;
comment|// read shape id from stream
if|if
condition|(
name|shape
operator|==
name|Qt
operator|::
name|BitmapCursor
condition|)
block|{
comment|// read bitmap cursor
name|bool
name|isPixmap
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|>=
literal|7
condition|)
name|s
operator|>>
name|isPixmap
expr_stmt|;
if|if
condition|(
name|isPixmap
condition|)
block|{
name|QPixmap
name|pm
decl_stmt|;
name|QPoint
name|hot
decl_stmt|;
name|s
operator|>>
name|pm
operator|>>
name|hot
expr_stmt|;
name|c
operator|=
name|QCursor
argument_list|(
name|pm
argument_list|,
name|hot
operator|.
name|x
argument_list|()
argument_list|,
name|hot
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QBitmap
name|bm
decl_stmt|,
name|bmm
decl_stmt|;
name|QPoint
name|hot
decl_stmt|;
name|s
operator|>>
name|bm
operator|>>
name|bmm
operator|>>
name|hot
expr_stmt|;
name|c
operator|=
name|QCursor
argument_list|(
name|bm
argument_list|,
name|bmm
argument_list|,
name|hot
operator|.
name|x
argument_list|()
argument_list|,
name|hot
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|c
operator|.
name|setShape
argument_list|(
operator|(
name|Qt
operator|::
name|CursorShape
operator|)
name|shape
argument_list|)
expr_stmt|;
comment|// create cursor with shape
block|}
return|return
name|s
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_comment
comment|/*!     Constructs a custom pixmap cursor.      \a pixmap is the image. It is usual to give it a mask (set using     QPixmap::setMask()). \a hotX and \a hotY define the cursor's hot     spot.      If \a hotX is negative, it is set to the \c{pixmap().width()/2}.     If \a hotY is negative, it is set to the \c{pixmap().height()/2}.      Valid cursor sizes depend on the display hardware (or the     underlying window system). We recommend using 32 x 32 cursors,     because this size is supported on all platforms. Some platforms     also support 16 x 16, 48 x 48, and 64 x 64 cursors.      \note On Windows CE, the cursor size is fixed. If the pixmap     is bigger than the system size, it will be scaled.      \sa QPixmap::QPixmap(), QPixmap::setMask() */
end_comment
begin_constructor
DECL|function|QCursor
name|QCursor
operator|::
name|QCursor
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
name|int
name|hotX
parameter_list|,
name|int
name|hotY
parameter_list|)
member_init_list|:
name|d
argument_list|(
literal|0
argument_list|)
block|{
name|QImage
name|img
init|=
name|pixmap
operator|.
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Indexed8
argument_list|,
name|Qt
operator|::
name|ThresholdDither
operator||
name|Qt
operator|::
name|AvoidDither
argument_list|)
decl_stmt|;
name|QBitmap
name|bm
init|=
name|QBitmap
operator|::
name|fromImage
argument_list|(
name|img
argument_list|,
name|Qt
operator|::
name|ThresholdDither
operator||
name|Qt
operator|::
name|AvoidDither
argument_list|)
decl_stmt|;
name|QBitmap
name|bmm
init|=
name|pixmap
operator|.
name|mask
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|bmm
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QBitmap
name|nullBm
decl_stmt|;
name|bm
operator|.
name|setMask
argument_list|(
name|nullBm
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|pixmap
operator|.
name|mask
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QImage
name|mimg
init|=
name|pixmap
operator|.
name|mask
argument_list|()
operator|.
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Indexed8
argument_list|,
name|Qt
operator|::
name|ThresholdDither
operator||
name|Qt
operator|::
name|AvoidDither
argument_list|)
decl_stmt|;
name|bmm
operator|=
name|QBitmap
operator|::
name|fromImage
argument_list|(
name|mimg
argument_list|,
name|Qt
operator|::
name|ThresholdDither
operator||
name|Qt
operator|::
name|AvoidDither
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bmm
operator|=
name|QBitmap
argument_list|(
name|bm
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|bmm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
block|}
name|d
operator|=
name|QCursorData
operator|::
name|setBitmap
argument_list|(
name|bm
argument_list|,
name|bmm
argument_list|,
name|hotX
argument_list|,
name|hotY
argument_list|)
expr_stmt|;
name|d
operator|->
name|pixmap
operator|=
name|pixmap
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a custom bitmap cursor.      \a bitmap and     \a mask make up the bitmap.     \a hotX and     \a hotY define the cursor's hot spot.      If \a hotX is negative, it is set to the \c{bitmap().width()/2}.     If \a hotY is negative, it is set to the \c{bitmap().height()/2}.      The cursor \a bitmap (B) and \a mask (M) bits are combined like this:     \list     \o B=1 and M=1 gives black.     \o B=0 and M=1 gives white.     \o B=0 and M=0 gives transparent.     \o B=1 and M=0 gives an XOR'd result under Windows, undefined     results on all other platforms.     \endlist      Use the global Qt color Qt::color0 to draw 0-pixels and Qt::color1 to     draw 1-pixels in the bitmaps.      Valid cursor sizes depend on the display hardware (or the     underlying window system). We recommend using 32 x 32 cursors,     because this size is supported on all platforms. Some platforms     also support 16 x 16, 48 x 48, and 64 x 64 cursors.      \note On Windows CE, the cursor size is fixed. If the pixmap     is bigger than the system size, it will be scaled.      \sa QBitmap::QBitmap(), QBitmap::setMask() */
end_comment
begin_constructor
DECL|function|QCursor
name|QCursor
operator|::
name|QCursor
parameter_list|(
specifier|const
name|QBitmap
modifier|&
name|bitmap
parameter_list|,
specifier|const
name|QBitmap
modifier|&
name|mask
parameter_list|,
name|int
name|hotX
parameter_list|,
name|int
name|hotY
parameter_list|)
member_init_list|:
name|d
argument_list|(
literal|0
argument_list|)
block|{
name|d
operator|=
name|QCursorData
operator|::
name|setBitmap
argument_list|(
name|bitmap
argument_list|,
name|mask
argument_list|,
name|hotX
argument_list|,
name|hotY
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_decl_stmt
DECL|variable|qt_cursorTable
name|QCursorData
modifier|*
name|qt_cursorTable
index|[
name|Qt
operator|::
name|LastCursor
operator|+
literal|1
index|]
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|initialized
name|bool
name|QCursorData
operator|::
name|initialized
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|cleanup
name|void
name|QCursorData
operator|::
name|cleanup
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QCursorData
operator|::
name|initialized
condition|)
return|return;
for|for
control|(
name|int
name|shape
init|=
literal|0
init|;
name|shape
operator|<=
name|Qt
operator|::
name|LastCursor
condition|;
operator|++
name|shape
control|)
block|{
comment|// In case someone has a static QCursor defined with this shape
if|if
condition|(
operator|!
name|qt_cursorTable
index|[
name|shape
index|]
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|qt_cursorTable
index|[
name|shape
index|]
expr_stmt|;
name|qt_cursorTable
index|[
name|shape
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|QCursorData
operator|::
name|initialized
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|initialize
name|void
name|QCursorData
operator|::
name|initialize
parameter_list|()
block|{
if|if
condition|(
name|QCursorData
operator|::
name|initialized
condition|)
return|return;
for|for
control|(
name|int
name|shape
init|=
literal|0
init|;
name|shape
operator|<=
name|Qt
operator|::
name|LastCursor
condition|;
operator|++
name|shape
control|)
name|qt_cursorTable
index|[
name|shape
index|]
operator|=
operator|new
name|QCursorData
argument_list|(
operator|(
name|Qt
operator|::
name|CursorShape
operator|)
name|shape
argument_list|)
expr_stmt|;
name|QCursorData
operator|::
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Constructs a cursor with the default arrow shape. */
end_comment
begin_constructor
DECL|function|QCursor
name|QCursor
operator|::
name|QCursor
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QCursorData
operator|::
name|initialized
condition|)
block|{
if|if
condition|(
name|QCoreApplication
operator|::
name|startingUp
argument_list|()
condition|)
block|{
name|d
operator|=
literal|0
expr_stmt|;
return|return;
block|}
name|QCursorData
operator|::
name|initialize
argument_list|()
expr_stmt|;
block|}
name|QCursorData
modifier|*
name|c
init|=
name|qt_cursorTable
index|[
literal|0
index|]
decl_stmt|;
name|c
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|d
operator|=
name|c
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a cursor with the specified \a shape.      See \l Qt::CursorShape for a list of shapes.      \sa setShape() */
end_comment
begin_constructor
DECL|function|QCursor
name|QCursor
operator|::
name|QCursor
parameter_list|(
name|Qt
operator|::
name|CursorShape
name|shape
parameter_list|)
member_init_list|:
name|d
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
operator|!
name|QCursorData
operator|::
name|initialized
condition|)
name|QCursorData
operator|::
name|initialize
argument_list|()
expr_stmt|;
name|setShape
argument_list|(
name|shape
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Returns the cursor shape identifier. The return value is one of     the \l Qt::CursorShape enum values (cast to an int).      \sa setShape() */
end_comment
begin_function
DECL|function|shape
name|Qt
operator|::
name|CursorShape
name|QCursor
operator|::
name|shape
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|QCursorData
operator|::
name|initialized
condition|)
name|QCursorData
operator|::
name|initialize
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|cshape
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the cursor to the shape identified by \a shape.      See \l Qt::CursorShape for the list of cursor shapes.      \sa shape() */
end_comment
begin_function
DECL|function|setShape
name|void
name|QCursor
operator|::
name|setShape
parameter_list|(
name|Qt
operator|::
name|CursorShape
name|shape
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QCursorData
operator|::
name|initialized
condition|)
name|QCursorData
operator|::
name|initialize
argument_list|()
expr_stmt|;
name|QCursorData
modifier|*
name|c
init|=
name|uint
argument_list|(
name|shape
argument_list|)
operator|<=
name|Qt
operator|::
name|LastCursor
condition|?
name|qt_cursorTable
index|[
name|shape
index|]
else|:
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|c
condition|)
name|c
operator|=
name|qt_cursorTable
index|[
literal|0
index|]
expr_stmt|;
name|c
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
if|if
condition|(
operator|!
name|d
condition|)
block|{
name|d
operator|=
name|c
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|d
expr_stmt|;
name|d
operator|=
name|c
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the cursor bitmap, or 0 if it is one of the standard     cursors. */
end_comment
begin_function
DECL|function|bitmap
specifier|const
name|QBitmap
modifier|*
name|QCursor
operator|::
name|bitmap
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|QCursorData
operator|::
name|initialized
condition|)
name|QCursorData
operator|::
name|initialize
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|bm
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the cursor bitmap mask, or 0 if it is one of the standard     cursors. */
end_comment
begin_function
DECL|function|mask
specifier|const
name|QBitmap
modifier|*
name|QCursor
operator|::
name|mask
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|QCursorData
operator|::
name|initialized
condition|)
name|QCursorData
operator|::
name|initialize
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|bmm
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the cursor pixmap. This is only valid if the cursor is a     pixmap cursor. */
end_comment
begin_function
DECL|function|pixmap
name|QPixmap
name|QCursor
operator|::
name|pixmap
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|QCursorData
operator|::
name|initialized
condition|)
name|QCursorData
operator|::
name|initialize
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|pixmap
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the cursor hot spot, or (0, 0) if it is one of the     standard cursors. */
end_comment
begin_function
DECL|function|hotSpot
name|QPoint
name|QCursor
operator|::
name|hotSpot
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|QCursorData
operator|::
name|initialized
condition|)
name|QCursorData
operator|::
name|initialize
argument_list|()
expr_stmt|;
return|return
name|QPoint
argument_list|(
name|d
operator|->
name|hx
argument_list|,
name|d
operator|->
name|hy
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Constructs a copy of the cursor \a c. */
end_comment
begin_constructor
DECL|function|QCursor
name|QCursor
operator|::
name|QCursor
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|c
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QCursorData
operator|::
name|initialized
condition|)
name|QCursorData
operator|::
name|initialize
argument_list|()
expr_stmt|;
name|d
operator|=
name|c
operator|.
name|d
expr_stmt|;
name|d
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the cursor. */
end_comment
begin_destructor
DECL|function|~QCursor
name|QCursor
operator|::
name|~
name|QCursor
parameter_list|()
block|{
if|if
condition|(
name|d
operator|&&
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     Assigns \a c to this cursor and returns a reference to this     cursor. */
end_comment
begin_function
DECL|function|operator =
name|QCursor
modifier|&
name|QCursor
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|c
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QCursorData
operator|::
name|initialized
condition|)
name|QCursorData
operator|::
name|initialize
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|d
condition|)
name|c
operator|.
name|d
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
if|if
condition|(
name|d
operator|&&
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|d
expr_stmt|;
name|d
operator|=
name|c
operator|.
name|d
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!    Returns the cursor as a QVariant. */
end_comment
begin_function
DECL|function|operator QVariant
name|QCursor
operator|::
name|operator
name|QVariant
parameter_list|()
specifier|const
block|{
return|return
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Cursor
argument_list|,
name|this
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
specifier|const
name|QCursor
modifier|&
name|c
parameter_list|)
block|{
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QCursor(Qt::CursorShape("
operator|<<
name|c
operator|.
name|shape
argument_list|()
operator|<<
literal|"))"
expr_stmt|;
return|return
name|dbg
operator|.
name|space
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CURSOR
end_comment
end_unit
