begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SOUND
end_ifndef
begin_include
include|#
directive|include
file|"qsound.h"
end_include
begin_include
include|#
directive|include
file|"qpaintdevice.h"
end_include
begin_include
include|#
directive|include
file|"qwsdisplay_qws.h"
end_include
begin_include
include|#
directive|include
file|"qsound_p.h"
end_include
begin_include
include|#
directive|include
file|"qsoundqss_qws.h"
end_include
begin_include
include|#
directive|include
file|"qhash.h"
end_include
begin_include
include|#
directive|include
file|"qfileinfo.h"
end_include
begin_include
include|#
directive|include
file|"qbytearray.h"
end_include
begin_include
include|#
directive|include
file|"quuid.h"
end_include
begin_include
include|#
directive|include
file|"qdatastream.h"
end_include
begin_include
include|#
directive|include
file|"qcopchannel_qws.h"
end_include
begin_include
include|#
directive|include
file|"qbuffer.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_ifdef
ifdef|#
directive|ifdef
name|MEDIA_SERVER
end_ifdef
begin_define
DECL|macro|SERVER_CHANNEL
define|#
directive|define
name|SERVER_CHANNEL
value|"QPE/MediaServer"
end_define
begin_class
DECL|class|QCopMessage
class|class
name|QCopMessage
super|:
specifier|public
name|QDataStream
block|{
public|public:
DECL|function|QCopMessage
name|QCopMessage
parameter_list|(
specifier|const
name|QString
modifier|&
name|channel
parameter_list|,
specifier|const
name|QString
modifier|&
name|message
parameter_list|)
member_init_list|:
name|QDataStream
argument_list|(
operator|new
name|QBuffer
argument_list|)
member_init_list|,
name|m_channel
argument_list|(
name|channel
argument_list|)
member_init_list|,
name|m_message
argument_list|(
name|message
argument_list|)
block|{
name|device
argument_list|()
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
block|}
DECL|function|~QCopMessage
name|~
name|QCopMessage
parameter_list|()
block|{
name|QCopChannel
operator|::
name|send
argument_list|(
name|m_channel
argument_list|,
name|m_message
argument_list|,
operator|(
operator|(
name|QBuffer
operator|*
operator|)
name|device
argument_list|()
operator|)
operator|->
name|buffer
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|device
argument_list|()
expr_stmt|;
block|}
private|private:
DECL|member|m_channel
name|QString
name|m_channel
decl_stmt|;
DECL|member|m_message
name|QString
name|m_message
decl_stmt|;
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// MEDIA_SERVER
end_comment
begin_class_decl
class_decl|class
name|QAuServerQWS
class_decl|;
end_class_decl
begin_class
DECL|class|QAuBucketQWS
class|class
name|QAuBucketQWS
super|:
specifier|public
name|QObject
super|,
specifier|public
name|QAuBucket
block|{
name|Q_OBJECT
public|public:
name|QAuBucketQWS
parameter_list|(
name|QAuServerQWS
modifier|*
parameter_list|,
name|QSound
modifier|*
parameter_list|,
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
constructor_decl|;
name|~
name|QAuBucketQWS
parameter_list|()
destructor_decl|;
ifndef|#
directive|ifndef
name|MEDIA_SERVER
DECL|function|id
name|int
name|id
parameter_list|()
specifier|const
block|{
return|return
name|id_
return|;
block|}
endif|#
directive|endif
DECL|function|sound
name|QSound
modifier|*
name|sound
parameter_list|()
specifier|const
block|{
return|return
name|sound_
return|;
block|}
ifdef|#
directive|ifdef
name|MEDIA_SERVER
name|void
name|play
parameter_list|()
function_decl|;
name|void
name|stop
parameter_list|()
function_decl|;
endif|#
directive|endif
signals|signals:
comment|// Only for Media Server
name|void
name|done
parameter_list|(
name|QAuBucketQWS
modifier|*
parameter_list|)
function_decl|;
private|private
name|slots
private|:
comment|// Only for Media Server
name|void
name|processMessage
parameter_list|(
specifier|const
name|QString
modifier|&
name|msg
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
function_decl|;
private|private:
ifdef|#
directive|ifdef
name|MEDIA_SERVER
DECL|member|m_channel
name|QCopChannel
modifier|*
name|m_channel
decl_stmt|;
DECL|member|m_id
name|QUuid
name|m_id
decl_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|MEDIA_SERVER
DECL|member|id_
name|int
name|id_
decl_stmt|;
endif|#
directive|endif
DECL|member|sound_
name|QSound
modifier|*
name|sound_
decl_stmt|;
DECL|member|server_
name|QAuServerQWS
modifier|*
name|server_
decl_stmt|;
DECL|member|next
specifier|static
name|int
name|next
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|next
name|int
name|QAuBucketQWS
operator|::
name|next
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QAuServerQWS
class|class
name|QAuServerQWS
super|:
specifier|public
name|QAuServer
block|{
name|Q_OBJECT
public|public:
name|QAuServerQWS
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
constructor_decl|;
DECL|function|init
name|void
name|init
parameter_list|(
name|QSound
modifier|*
name|s
parameter_list|)
block|{
name|QAuBucketQWS
modifier|*
name|bucket
init|=
operator|new
name|QAuBucketQWS
argument_list|(
name|this
argument_list|,
name|s
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|MEDIA_SERVER
name|connect
argument_list|(
name|bucket
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|QAuBucketQWS
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|complete
argument_list|(
name|QAuBucketQWS
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|setBucket
argument_list|(
name|s
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|MEDIA_SERVER
comment|// Register bucket
DECL|function|insert
name|void
name|insert
parameter_list|(
name|QAuBucketQWS
modifier|*
name|bucket
parameter_list|)
block|{
name|buckets
operator|.
name|insert
argument_list|(
name|bucket
operator|->
name|id
argument_list|()
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
block|}
comment|// Remove bucket from register
DECL|function|remove
name|void
name|remove
parameter_list|(
name|QAuBucketQWS
modifier|*
name|bucket
parameter_list|)
block|{
name|buckets
operator|.
name|remove
argument_list|(
name|bucket
operator|->
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
DECL|function|play
name|void
name|play
parameter_list|(
name|QSound
modifier|*
name|s
parameter_list|)
block|{
name|QString
name|filepath
init|=
name|QFileInfo
argument_list|(
name|s
operator|->
name|fileName
argument_list|()
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_QWS_SOUNDSERVER
argument_list|)
name|server
operator|->
name|playFile
argument_list|(
name|bucket
argument_list|(
name|s
argument_list|)
operator|->
name|id
argument_list|()
argument_list|,
name|filepath
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|MEDIA_SERVER
argument_list|)
name|bucket
argument_list|(
name|s
argument_list|)
operator|->
name|play
argument_list|()
expr_stmt|;
else|#
directive|else
name|client
operator|->
name|play
argument_list|(
name|bucket
argument_list|(
name|s
argument_list|)
operator|->
name|id
argument_list|()
argument_list|,
name|filepath
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|stop
name|void
name|stop
parameter_list|(
name|QSound
modifier|*
name|s
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_QWS_SOUNDSERVER
argument_list|)
name|server
operator|->
name|stopFile
argument_list|(
name|bucket
argument_list|(
name|s
argument_list|)
operator|->
name|id
argument_list|()
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|MEDIA_SERVER
argument_list|)
name|bucket
argument_list|(
name|s
argument_list|)
operator|->
name|stop
argument_list|()
expr_stmt|;
else|#
directive|else
name|client
operator|->
name|stop
argument_list|(
name|bucket
argument_list|(
name|s
argument_list|)
operator|->
name|id
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|okay
name|bool
name|okay
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
private|private
name|slots
private|:
comment|// Continue playing sound if loops remain
DECL|function|complete
name|void
name|complete
parameter_list|(
name|int
name|id
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|MEDIA_SERVER
name|QAuBucketQWS
modifier|*
name|bucket
init|=
name|find
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucket
condition|)
block|{
name|QSound
modifier|*
name|sound
init|=
name|bucket
operator|->
name|sound
argument_list|()
decl_stmt|;
if|if
condition|(
name|decLoop
argument_list|(
name|sound
argument_list|)
condition|)
block|{
name|play
argument_list|(
name|sound
argument_list|)
expr_stmt|;
block|}
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|id
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
comment|// Only for Media Server
DECL|function|complete
name|void
name|complete
parameter_list|(
name|QAuBucketQWS
modifier|*
name|bucket
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|MEDIA_SERVER
name|Q_UNUSED
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSound
modifier|*
name|sound
init|=
name|bucket
operator|->
name|sound
argument_list|()
decl_stmt|;
if|if
condition|(
name|decLoop
argument_list|(
name|sound
argument_list|)
condition|)
block|{
name|play
argument_list|(
name|sound
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
protected|protected:
DECL|function|bucket
name|QAuBucketQWS
modifier|*
name|bucket
parameter_list|(
name|QSound
modifier|*
name|s
parameter_list|)
block|{
return|return
operator|(
name|QAuBucketQWS
operator|*
operator|)
name|QAuServer
operator|::
name|bucket
argument_list|(
name|s
argument_list|)
return|;
block|}
private|private:
ifndef|#
directive|ifndef
name|MEDIA_SERVER
comment|// Find registered bucket with given id, return null if none found
DECL|function|find
name|QAuBucketQWS
modifier|*
name|find
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|QAuBucketQWS
modifier|*
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|buckets
operator|.
name|find
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|buckets
operator|.
name|end
argument_list|()
condition|)
block|{
return|return
name|it
operator|.
name|value
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|member|buckets
name|QHash
argument_list|<
name|int
argument_list|,
name|QAuBucketQWS
modifier|*
argument_list|>
name|buckets
decl_stmt|;
comment|// ### possible problem with overlapping keys
ifdef|#
directive|ifdef
name|QT_NO_QWS_SOUNDSERVER
DECL|member|server
name|QWSSoundServer
modifier|*
name|server
decl_stmt|;
else|#
directive|else
DECL|member|client
name|QWSSoundClient
modifier|*
name|client
decl_stmt|;
endif|#
directive|endif
endif|#
directive|endif
comment|// MEDIA_SERVER
block|}
class|;
end_class
begin_constructor
DECL|function|QAuServerQWS
name|QAuServerQWS
operator|::
name|QAuServerQWS
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAuServer
argument_list|(
name|parent
argument_list|)
block|{
ifndef|#
directive|ifndef
name|MEDIA_SERVER
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qauserverqws"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_QWS_SOUNDSERVER
name|server
operator|=
operator|new
name|QWSSoundServer
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// ### only suitable for single application
name|connect
argument_list|(
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|soundCompleted
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|complete
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|client
operator|=
operator|new
name|QWSSoundClient
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// ### requires successful connection
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|soundCompleted
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|complete
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
comment|// MEDIA_SERVER
block|}
end_constructor
begin_constructor
DECL|function|QAuBucketQWS
name|QAuBucketQWS
operator|::
name|QAuBucketQWS
parameter_list|(
name|QAuServerQWS
modifier|*
name|server
parameter_list|,
name|QSound
modifier|*
name|sound
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|sound_
argument_list|(
name|sound
argument_list|)
member_init_list|,
name|server_
argument_list|(
name|server
argument_list|)
block|{
ifdef|#
directive|ifdef
name|MEDIA_SERVER
name|m_id
operator|=
name|QUuid
operator|::
name|createUuid
argument_list|()
expr_stmt|;
name|sound
operator|->
name|setObjectName
argument_list|(
name|m_id
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|m_channel
operator|=
operator|new
name|QCopChannel
argument_list|(
name|QLatin1String
argument_list|(
literal|"QPE/QSound/"
argument_list|)
operator|+
name|m_id
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_channel
argument_list|,
name|SIGNAL
argument_list|(
name|received
argument_list|(
name|QString
argument_list|,
name|QByteArray
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|processMessage
argument_list|(
name|QString
argument_list|,
name|QByteArray
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QCopMessage
name|message
argument_list|(
name|QLatin1String
argument_list|(
name|SERVER_CHANNEL
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"subscribe(QUuid)"
argument_list|)
argument_list|)
decl_stmt|;
name|message
operator|<<
name|m_id
expr_stmt|;
block|}
block|{
name|QString
name|filepath
init|=
name|QFileInfo
argument_list|(
name|sound_
operator|->
name|fileName
argument_list|()
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
decl_stmt|;
name|QCopMessage
name|message
argument_list|(
name|QLatin1String
argument_list|(
name|SERVER_CHANNEL
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"open(QUuid,QString)"
argument_list|)
argument_list|)
decl_stmt|;
name|message
operator|<<
name|m_id
operator|<<
name|filepath
expr_stmt|;
block|}
else|#
directive|else
name|id_
operator|=
name|next
operator|++
expr_stmt|;
name|server_
operator|->
name|insert
argument_list|(
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_ifdef
ifdef|#
directive|ifdef
name|MEDIA_SERVER
end_ifdef
begin_function
DECL|function|play
name|void
name|QAuBucketQWS
operator|::
name|play
parameter_list|()
block|{
name|QString
name|filepath
init|=
name|QFileInfo
argument_list|(
name|sound_
operator|->
name|fileName
argument_list|()
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
decl_stmt|;
name|QCopMessage
name|message
argument_list|(
name|QLatin1String
argument_list|(
name|SERVER_CHANNEL
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"play(QUuid)"
argument_list|)
argument_list|)
decl_stmt|;
name|message
operator|<<
name|m_id
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stop
name|void
name|QAuBucketQWS
operator|::
name|stop
parameter_list|()
block|{
name|QCopMessage
name|message
argument_list|(
name|QLatin1String
argument_list|(
name|SERVER_CHANNEL
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"stop(QUuid)"
argument_list|)
argument_list|)
decl_stmt|;
name|message
operator|<<
name|m_id
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// MEDIA_SERVER
end_comment
begin_function
DECL|function|processMessage
name|void
name|QAuBucketQWS
operator|::
name|processMessage
parameter_list|(
specifier|const
name|QString
modifier|&
name|msg
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|data
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|MEDIA_SERVER
name|Q_UNUSED
argument_list|(
name|msg
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|msg
operator|==
name|QLatin1String
argument_list|(
literal|"done()"
argument_list|)
condition|)
block|{
emit|emit
name|done
argument_list|(
name|this
argument_list|)
emit|;
block|}
endif|#
directive|endif
block|}
end_function
begin_destructor
DECL|function|~QAuBucketQWS
name|QAuBucketQWS
operator|::
name|~
name|QAuBucketQWS
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|MEDIA_SERVER
name|QCopMessage
name|message
argument_list|(
name|QLatin1String
argument_list|(
name|SERVER_CHANNEL
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"revoke(QUuid)"
argument_list|)
argument_list|)
decl_stmt|;
name|message
operator|<<
name|m_id
expr_stmt|;
else|#
directive|else
name|server_
operator|->
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_function
DECL|function|qt_new_audio_server
name|QAuServer
modifier|*
name|qt_new_audio_server
parameter_list|()
block|{
return|return
operator|new
name|QAuServerQWS
argument_list|(
name|qApp
argument_list|)
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"qsound_qws.moc"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SOUND
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
