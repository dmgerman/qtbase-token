begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qguiapplication.h"
end_include
begin_include
include|#
directive|include
file|"private/qguiapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qplatformintegrationfactory_qpa_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qevent_p.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_GLIB
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qeventdispatcher_glib_qpa_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qeventdispatcher_qpa_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QAbstractEventDispatcher>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qcoreapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qabstracteventdispatcher_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmutex.h>
end_include
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPlatformIntegration>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGenericPluginFactory>
end_include
begin_include
include|#
directive|include
file|<QWindowSystemInterface>
end_include
begin_include
include|#
directive|include
file|"private/qwindowsysteminterface_qpa_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qwindow_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_include
include|#
directive|include
file|<QtGui/QClipboard>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|member|mouse_buttons
name|Qt
operator|::
name|MouseButtons
name|QGuiApplicationPrivate
operator|::
name|mouse_buttons
init|=
name|Qt
operator|::
name|NoButton
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|modifier_buttons
name|Qt
operator|::
name|KeyboardModifiers
name|QGuiApplicationPrivate
operator|::
name|modifier_buttons
init|=
name|Qt
operator|::
name|NoModifier
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|keyboard_input_time
name|int
name|QGuiApplicationPrivate
operator|::
name|keyboard_input_time
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|mouse_double_click_time
name|int
name|QGuiApplicationPrivate
operator|::
name|mouse_double_click_time
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|platform_integration
name|QPlatformIntegration
modifier|*
name|QGuiApplicationPrivate
operator|::
name|platform_integration
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_button_down
name|QWidget
modifier|*
name|qt_button_down
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|qt_button_down
comment|// widget got last button-down
end_comment
begin_decl_stmt
DECL|member|app_do_modal
name|bool
name|QGuiApplicationPrivate
operator|::
name|app_do_modal
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_last_x
name|int
name|qt_last_x
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_last_y
name|int
name|qt_last_y
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|qt_last_mouse_receiver
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|QGuiApplicationPrivate
operator|::
name|qt_last_mouse_receiver
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|qt_modal_stack
name|QWidgetList
name|QGuiApplicationPrivate
operator|::
name|qt_modal_stack
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|buttons
name|Qt
operator|::
name|MouseButtons
name|QGuiApplicationPrivate
operator|::
name|buttons
init|=
name|Qt
operator|::
name|NoButton
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|mousePressTime
name|ulong
name|QGuiApplicationPrivate
operator|::
name|mousePressTime
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|mousePressButton
name|Qt
operator|::
name|MouseButton
name|QGuiApplicationPrivate
operator|::
name|mousePressButton
init|=
name|Qt
operator|::
name|NoButton
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|mousePressX
name|int
name|QGuiApplicationPrivate
operator|::
name|mousePressX
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|mousePressY
name|int
name|QGuiApplicationPrivate
operator|::
name|mousePressY
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|mouse_double_click_distance
name|int
name|QGuiApplicationPrivate
operator|::
name|mouse_double_click_distance
init|=
literal|5
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|layout_direction
specifier|static
name|Qt
operator|::
name|LayoutDirection
name|layout_direction
init|=
name|Qt
operator|::
name|LeftToRight
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|force_reverse
specifier|static
name|bool
name|force_reverse
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|self
name|QGuiApplicationPrivate
modifier|*
name|QGuiApplicationPrivate
operator|::
name|self
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_decl_stmt
DECL|member|qt_clipboard
name|QClipboard
modifier|*
name|QGuiApplicationPrivate
operator|::
name|qt_clipboard
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QMutex
argument_list|,
argument|applicationFontMutex
argument_list|)
end_macro
begin_decl_stmt
DECL|member|app_font
name|QFont
modifier|*
name|QGuiApplicationPrivate
operator|::
name|app_font
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_detectRTLLanguage
specifier|static
name|bool
name|qt_detectRTLLanguage
parameter_list|()
block|{
return|return
name|force_reverse
operator|^
operator|(
name|QApplication
operator|::
name|tr
argument_list|(
literal|"QT_LAYOUT_DIRECTION"
argument_list|,
literal|"Translate this string to the string 'LTR' in left-to-right"
literal|" languages or to 'RTL' in right-to-left languages (such as Hebrew"
literal|" and Arabic) to get proper widget layout."
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"RTL"
argument_list|)
operator|)
return|;
block|}
end_function
begin_constructor
DECL|function|QGuiApplication
name|QGuiApplication
operator|::
name|QGuiApplication
parameter_list|(
name|int
modifier|&
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|,
name|int
name|flags
parameter_list|)
member_init_list|:
name|QCoreApplication
argument_list|(
operator|*
operator|new
name|QGuiApplicationPrivate
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|,
name|flags
argument_list|)
argument_list|)
block|{
name|d_func
argument_list|()
operator|->
name|init
argument_list|()
expr_stmt|;
name|QCoreApplicationPrivate
operator|::
name|eventDispatcher
operator|->
name|startingUp
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QGuiApplication
name|QGuiApplication
operator|::
name|QGuiApplication
parameter_list|(
name|QGuiApplicationPrivate
modifier|&
name|p
parameter_list|)
member_init_list|:
name|QCoreApplication
argument_list|(
name|p
argument_list|)
block|{
name|d_func
argument_list|()
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QGuiApplication
name|QGuiApplication
operator|::
name|~
name|QGuiApplication
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGuiApplication
argument_list|)
expr_stmt|;
comment|// flush clipboard contents
if|if
condition|(
name|QGuiApplicationPrivate
operator|::
name|qt_clipboard
condition|)
block|{
name|QEvent
name|event
argument_list|(
name|QEvent
operator|::
name|Clipboard
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|sendEvent
argument_list|(
name|QGuiApplicationPrivate
operator|::
name|qt_clipboard
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|eventDispatcher
operator|->
name|closingDown
argument_list|()
expr_stmt|;
name|d
operator|->
name|eventDispatcher
operator|=
literal|0
expr_stmt|;
operator|delete
name|QGuiApplicationPrivate
operator|::
name|qt_clipboard
expr_stmt|;
name|QGuiApplicationPrivate
operator|::
name|qt_clipboard
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_constructor
DECL|function|QGuiApplicationPrivate
name|QGuiApplicationPrivate
operator|::
name|QGuiApplicationPrivate
parameter_list|(
name|int
modifier|&
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|,
name|int
name|flags
parameter_list|)
member_init_list|:
name|QCoreApplicationPrivate
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|,
name|flags
argument_list|)
block|{
name|self
operator|=
name|this
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|init_platform
specifier|static
name|void
name|init_platform
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QString
modifier|&
name|platformPluginPath
parameter_list|)
block|{
name|QGuiApplicationPrivate
operator|::
name|platform_integration
operator|=
name|QPlatformIntegrationFactory
operator|::
name|create
argument_list|(
name|name
argument_list|,
name|platformPluginPath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QGuiApplicationPrivate
operator|::
name|platform_integration
condition|)
block|{
name|QStringList
name|keys
init|=
name|QPlatformIntegrationFactory
operator|::
name|keys
argument_list|(
name|platformPluginPath
argument_list|)
decl_stmt|;
name|QString
name|fatalMessage
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Failed to load platform plugin \"%1\". Available platforms are: \n"
argument_list|)
operator|.
name|arg
argument_list|(
name|name
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QString
name|key
decl|,
name|keys
control|)
block|{
name|fatalMessage
operator|.
name|append
argument_list|(
name|key
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|qFatal
argument_list|(
literal|"%s"
argument_list|,
name|fatalMessage
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|init_plugins
specifier|static
name|void
name|init_plugins
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|pluginList
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pluginList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QByteArray
name|pluginSpec
init|=
name|pluginList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"init_plugins"
operator|<<
name|i
operator|<<
name|pluginSpec
expr_stmt|;
name|int
name|colonPos
init|=
name|pluginSpec
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|QObject
modifier|*
name|plugin
decl_stmt|;
if|if
condition|(
name|colonPos
operator|<
literal|0
condition|)
name|plugin
operator|=
name|QGenericPluginFactory
operator|::
name|create
argument_list|(
name|QLatin1String
argument_list|(
name|pluginSpec
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|plugin
operator|=
name|QGenericPluginFactory
operator|::
name|create
argument_list|(
name|QLatin1String
argument_list|(
name|pluginSpec
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|colonPos
argument_list|)
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|pluginSpec
operator|.
name|mid
argument_list|(
name|colonPos
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"	created"
operator|<<
name|plugin
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|createEventDispatcher
name|void
name|QGuiApplicationPrivate
operator|::
name|createEventDispatcher
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QGuiApplication
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_GLIB
argument_list|)
if|if
condition|(
name|qgetenv
argument_list|(
literal|"QT_NO_GLIB"
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|&&
name|QEventDispatcherGlib
operator|::
name|versionSupported
argument_list|()
condition|)
name|eventDispatcher
operator|=
operator|new
name|QPAEventDispatcherGlib
argument_list|(
name|q
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
name|eventDispatcher
operator|=
operator|new
name|QEventDispatcherQPA
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|QGuiApplicationPrivate
operator|::
name|init
parameter_list|()
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|pluginList
decl_stmt|;
name|QString
name|platformPluginPath
init|=
name|QLatin1String
argument_list|(
name|qgetenv
argument_list|(
literal|"QT_QPA_PLATFORM_PLUGIN_PATH"
argument_list|)
argument_list|)
decl_stmt|;
name|QByteArray
name|platformName
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_QPA_DEFAULT_PLATFORM_NAME
name|platformName
operator|=
name|QT_QPA_DEFAULT_PLATFORM_NAME
expr_stmt|;
endif|#
directive|endif
name|QByteArray
name|platformNameEnv
init|=
name|qgetenv
argument_list|(
literal|"QT_QPA_PLATFORM"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|platformNameEnv
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|platformName
operator|=
name|platformNameEnv
expr_stmt|;
block|}
comment|// Get command line params
name|int
name|j
init|=
name|argc
condition|?
literal|1
else|:
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|argc
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|argv
index|[
name|i
index|]
operator|&&
operator|*
name|argv
index|[
name|i
index|]
operator|!=
literal|'-'
condition|)
block|{
name|argv
index|[
name|j
operator|++
index|]
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
continue|continue;
block|}
name|QByteArray
name|arg
init|=
name|argv
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|arg
operator|==
literal|"-platformpluginpath"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|platformPluginPath
operator|=
name|QLatin1String
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-platform"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|platformName
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-plugin"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|pluginList
operator|<<
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-reverse"
condition|)
block|{
name|force_reverse
operator|=
literal|true
expr_stmt|;
name|QGuiApplication
operator|::
name|setLayoutDirection
argument_list|(
name|Qt
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|argv
index|[
name|j
operator|++
index|]
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
name|argv
index|[
name|j
index|]
operator|=
literal|0
expr_stmt|;
name|argc
operator|=
name|j
expr_stmt|;
if|#
directive|if
literal|0
block|QByteArray pluginEnv = qgetenv("QT_QPA_PLUGINS");     if (!pluginEnv.isEmpty()) {         pluginList.append(pluginEnv.split(';'));     }
endif|#
directive|endif
name|init_platform
argument_list|(
name|QLatin1String
argument_list|(
name|platformName
argument_list|)
argument_list|,
name|platformPluginPath
argument_list|)
expr_stmt|;
name|init_plugins
argument_list|(
name|pluginList
argument_list|)
expr_stmt|;
name|QFont
operator|::
name|initialize
argument_list|()
expr_stmt|;
name|is_app_running
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~QGuiApplicationPrivate
name|QGuiApplicationPrivate
operator|::
name|~
name|QGuiApplicationPrivate
parameter_list|()
block|{
operator|delete
name|platform_integration
expr_stmt|;
name|platform_integration
operator|=
literal|0
expr_stmt|;
name|is_app_closing
operator|=
literal|true
expr_stmt|;
name|is_app_running
operator|=
literal|false
expr_stmt|;
name|QFont
operator|::
name|cleanup
argument_list|()
expr_stmt|;
name|layout_direction
operator|=
name|Qt
operator|::
name|LeftToRight
expr_stmt|;
block|}
end_destructor
begin_if
if|#
directive|if
literal|0
end_if
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_endif
unit|QCursor *overrideCursor(); void setOverrideCursor(const QCursor&); void changeOverrideCursor(const QCursor&); void restoreOverrideCursor();
endif|#
directive|endif
end_endif
begin_ifndef
unit|static QFont font(); static QFont font(const QWidget*); static QFont font(const char *className); static void setFont(const QFont&, const char* className = 0); static QFontMetrics fontMetrics();
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_endif
unit|static QClipboard *clipboard();
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|keyboardModifiers
name|Qt
operator|::
name|KeyboardModifiers
name|QGuiApplication
operator|::
name|keyboardModifiers
parameter_list|()
block|{
return|return
name|QGuiApplicationPrivate
operator|::
name|modifier_buttons
return|;
block|}
end_function
begin_function
DECL|function|mouseButtons
name|Qt
operator|::
name|MouseButtons
name|QGuiApplication
operator|::
name|mouseButtons
parameter_list|()
block|{
return|return
name|QGuiApplicationPrivate
operator|::
name|mouse_buttons
return|;
block|}
end_function
begin_function
DECL|function|setDoubleClickInterval
name|void
name|QGuiApplication
operator|::
name|setDoubleClickInterval
parameter_list|(
name|int
name|ms
parameter_list|)
block|{
name|QGuiApplicationPrivate
operator|::
name|mouse_double_click_time
operator|=
name|ms
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doubleClickInterval
name|int
name|QGuiApplication
operator|::
name|doubleClickInterval
parameter_list|()
block|{
return|return
name|QGuiApplicationPrivate
operator|::
name|mouse_double_click_time
return|;
block|}
end_function
begin_function
DECL|function|setKeyboardInputInterval
name|void
name|QGuiApplication
operator|::
name|setKeyboardInputInterval
parameter_list|(
name|int
name|ms
parameter_list|)
block|{
name|QGuiApplicationPrivate
operator|::
name|keyboard_input_time
operator|=
name|ms
expr_stmt|;
block|}
end_function
begin_function
DECL|function|keyboardInputInterval
name|int
name|QGuiApplication
operator|::
name|keyboardInputInterval
parameter_list|()
block|{
return|return
name|QGuiApplicationPrivate
operator|::
name|keyboard_input_time
return|;
block|}
end_function
begin_function
DECL|function|platformNativeInterface
name|QPlatformNativeInterface
modifier|*
name|QGuiApplication
operator|::
name|platformNativeInterface
parameter_list|()
block|{
name|QPlatformIntegration
modifier|*
name|pi
init|=
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
decl_stmt|;
return|return
name|pi
operator|->
name|nativeInterface
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|exec
name|int
name|QGuiApplication
operator|::
name|exec
parameter_list|()
block|{
return|return
name|QCoreApplication
operator|::
name|exec
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|notify
name|bool
name|QGuiApplication
operator|::
name|notify
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
return|return
name|QCoreApplication
operator|::
name|notify
argument_list|(
name|object
argument_list|,
name|event
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|event
name|bool
name|QGuiApplication
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|LanguageChange
condition|)
block|{
name|setLayoutDirection
argument_list|(
name|qt_detectRTLLanguage
argument_list|()
condition|?
name|Qt
operator|::
name|RightToLeft
else|:
name|Qt
operator|::
name|LeftToRight
argument_list|)
expr_stmt|;
block|}
return|return
name|QCoreApplication
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|compressEvent
name|bool
name|QGuiApplication
operator|::
name|compressEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|,
name|QObject
modifier|*
name|receiver
parameter_list|,
name|QPostEventList
modifier|*
name|postedEvents
parameter_list|)
block|{
return|return
name|QCoreApplication
operator|::
name|compressEvent
argument_list|(
name|event
argument_list|,
name|receiver
argument_list|,
name|postedEvents
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|processWindowSystemEvent
name|void
name|QGuiApplicationPrivate
operator|::
name|processWindowSystemEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|WindowSystemEvent
modifier|*
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|->
name|type
condition|)
block|{
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|Mouse
case|:
name|QGuiApplicationPrivate
operator|::
name|processMouseEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|MouseEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|Wheel
case|:
name|QGuiApplicationPrivate
operator|::
name|processWheelEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|WheelEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|Key
case|:
name|QGuiApplicationPrivate
operator|::
name|processKeyEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|KeyEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|Touch
case|:
name|QGuiApplicationPrivate
operator|::
name|processTouchEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|TouchEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|GeometryChange
case|:
name|QGuiApplicationPrivate
operator|::
name|processGeometryChangeEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|GeometryChangeEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|Enter
case|:
name|QGuiApplicationPrivate
operator|::
name|processEnterEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|EnterEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|Leave
case|:
name|QGuiApplicationPrivate
operator|::
name|processLeaveEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|LeaveEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|ActivatedWindow
case|:
name|QGuiApplicationPrivate
operator|::
name|processActivatedEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|ActivatedWindowEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|Close
case|:
name|QGuiApplicationPrivate
operator|::
name|processCloseEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|CloseEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenCountChange
case|:
name|QGuiApplicationPrivate
operator|::
name|reportScreenCount
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenCountEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenGeometry
case|:
name|QGuiApplicationPrivate
operator|::
name|reportGeometryChange
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenGeometryEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenAvailableGeometry
case|:
name|QGuiApplicationPrivate
operator|::
name|reportAvailableGeometryChange
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenAvailableGeometryEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|()
operator|<<
literal|"Unknown user input event type:"
operator|<<
name|e
operator|->
name|type
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|processMouseEvent
name|void
name|QGuiApplicationPrivate
operator|::
name|processMouseEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|MouseEvent
modifier|*
name|e
parameter_list|)
block|{
comment|// qDebug()<< "handleMouseEvent"<< tlw<< ev.pos()<< ev.globalPos()<< hex<< ev.buttons();
specifier|static
name|QWeakPointer
argument_list|<
name|QWidget
argument_list|>
name|implicit_mouse_grabber
decl_stmt|;
name|QEvent
operator|::
name|Type
name|type
decl_stmt|;
comment|// move first
name|Qt
operator|::
name|MouseButtons
name|stateChange
init|=
name|e
operator|->
name|buttons
operator|^
name|buttons
decl_stmt|;
if|if
condition|(
name|e
operator|->
name|globalPos
operator|!=
name|QPoint
argument_list|(
name|qt_last_x
argument_list|,
name|qt_last_y
argument_list|)
operator|&&
operator|(
name|stateChange
operator|!=
name|Qt
operator|::
name|NoButton
operator|)
condition|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|MouseEvent
modifier|*
name|newMouseEvent
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|MouseEvent
argument_list|(
name|e
operator|->
name|window
operator|.
name|data
argument_list|()
argument_list|,
name|e
operator|->
name|timestamp
argument_list|,
name|e
operator|->
name|localPos
argument_list|,
name|e
operator|->
name|globalPos
argument_list|,
name|e
operator|->
name|buttons
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|windowSystemEventQueue
operator|.
name|prepend
argument_list|(
name|newMouseEvent
argument_list|)
expr_stmt|;
comment|// just in case the move triggers a new event loop
name|stateChange
operator|=
name|Qt
operator|::
name|NoButton
expr_stmt|;
block|}
name|QWindow
modifier|*
name|window
init|=
name|e
operator|->
name|window
operator|.
name|data
argument_list|()
decl_stmt|;
name|QWidget
modifier|*
name|tlw
init|=
literal|0
decl_stmt|;
comment|//window ? window->widget() : 0;
name|QPoint
name|localPoint
init|=
name|e
operator|->
name|localPos
decl_stmt|;
name|QPoint
name|globalPoint
init|=
name|e
operator|->
name|globalPos
decl_stmt|;
name|QWidget
modifier|*
name|mouseWindow
init|=
name|tlw
decl_stmt|;
name|Qt
operator|::
name|MouseButton
name|button
init|=
name|Qt
operator|::
name|NoButton
decl_stmt|;
if|if
condition|(
name|qt_last_x
operator|!=
name|globalPoint
operator|.
name|x
argument_list|()
operator|||
name|qt_last_y
operator|!=
name|globalPoint
operator|.
name|y
argument_list|()
condition|)
block|{
name|type
operator|=
name|QEvent
operator|::
name|MouseMove
expr_stmt|;
name|qt_last_x
operator|=
name|globalPoint
operator|.
name|x
argument_list|()
expr_stmt|;
name|qt_last_y
operator|=
name|globalPoint
operator|.
name|y
argument_list|()
expr_stmt|;
if|if
condition|(
name|qAbs
argument_list|(
name|globalPoint
operator|.
name|x
argument_list|()
operator|-
name|mousePressX
argument_list|)
operator|>
name|mouse_double_click_distance
operator|||
name|qAbs
argument_list|(
name|globalPoint
operator|.
name|y
argument_list|()
operator|-
name|mousePressY
argument_list|)
operator|>
name|mouse_double_click_distance
condition|)
name|mousePressButton
operator|=
name|Qt
operator|::
name|NoButton
expr_stmt|;
block|}
else|else
block|{
comment|// check to see if a new button has been pressed/released
for|for
control|(
name|int
name|check
init|=
name|Qt
operator|::
name|LeftButton
init|;
name|check
operator|<=
name|Qt
operator|::
name|XButton2
condition|;
name|check
operator|=
name|check
operator|<<
literal|1
control|)
block|{
if|if
condition|(
name|check
operator|&
name|stateChange
condition|)
block|{
name|button
operator|=
name|Qt
operator|::
name|MouseButton
argument_list|(
name|check
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|NoButton
condition|)
block|{
comment|// Ignore mouse events that don't change the current state
return|return;
block|}
name|buttons
operator|=
name|e
operator|->
name|buttons
expr_stmt|;
if|if
condition|(
name|button
operator|&
name|e
operator|->
name|buttons
condition|)
block|{
if|if
condition|(
operator|(
name|e
operator|->
name|timestamp
operator|-
name|mousePressTime
operator|)
operator|<
cast|static_cast
argument_list|<
name|ulong
argument_list|>
argument_list|(
name|QGuiApplication
operator|::
name|doubleClickInterval
argument_list|()
argument_list|)
operator|&&
name|button
operator|==
name|mousePressButton
condition|)
block|{
name|type
operator|=
name|QEvent
operator|::
name|MouseButtonDblClick
expr_stmt|;
name|mousePressButton
operator|=
name|Qt
operator|::
name|NoButton
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|QEvent
operator|::
name|MouseButtonPress
expr_stmt|;
name|mousePressTime
operator|=
name|e
operator|->
name|timestamp
expr_stmt|;
name|mousePressButton
operator|=
name|button
expr_stmt|;
name|mousePressX
operator|=
name|qt_last_x
expr_stmt|;
name|mousePressY
operator|=
name|qt_last_y
expr_stmt|;
block|}
block|}
else|else
name|type
operator|=
name|QEvent
operator|::
name|MouseButtonRelease
expr_stmt|;
block|}
if|if
condition|(
name|window
operator|&&
operator|!
name|tlw
condition|)
block|{
name|QMouseEvent
name|ev
argument_list|(
name|type
argument_list|,
name|localPoint
argument_list|,
name|globalPoint
argument_list|,
name|button
argument_list|,
name|buttons
argument_list|,
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|window
argument_list|,
operator|&
name|ev
argument_list|)
expr_stmt|;
return|return;
block|}
if|#
directive|if
literal|0
block|if (self->inPopupMode()) {
comment|//popup mouse handling is magical...
block|mouseWindow = qApp->activePopupWidget();          implicit_mouse_grabber.clear();
comment|//### how should popup mode and implicit mouse grab interact?
block|} else if (tlw&& app_do_modal&& !qt_try_modal(tlw, QEvent::MouseButtonRelease) ) {
comment|//even if we're blocked by modality, we should deliver the mouse release event..
comment|//### this code is not completely correct: multiple buttons can be pressed simultaneously
block|if (!(implicit_mouse_grabber&& buttons == Qt::NoButton)) {
comment|//qDebug()<< "modal blocked mouse event to"<< tlw;
block|return;         }     }
endif|#
directive|endif
if|#
directive|if
literal|0
comment|// find the tlw if we didn't get it from the plugin
block|if (!mouseWindow) {         mouseWindow = QGuiApplication::topLevelAt(globalPoint);     }      if (!mouseWindow&& !implicit_mouse_grabber)         mouseWindow = QGuiApplication::desktop();      if (mouseWindow&& mouseWindow != tlw) {
comment|//we did not get a sensible localPoint from the window system, so let's calculate it
block|localPoint = mouseWindow->mapFromGlobal(globalPoint);     }
endif|#
directive|endif
comment|// which child should have it?
name|QWidget
modifier|*
name|mouseWidget
init|=
name|mouseWindow
decl_stmt|;
if|if
condition|(
name|mouseWindow
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|mouseWindow
operator|->
name|childAt
argument_list|(
name|localPoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
condition|)
block|{
name|mouseWidget
operator|=
name|w
expr_stmt|;
block|}
block|}
comment|//handle implicit mouse grab
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonPress
operator|&&
operator|!
name|implicit_mouse_grabber
condition|)
block|{
name|implicit_mouse_grabber
operator|=
name|mouseWidget
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|mouseWindow
argument_list|)
expr_stmt|;
name|mouseWindow
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
comment|//focus
block|}
elseif|else
if|if
condition|(
name|implicit_mouse_grabber
condition|)
block|{
name|mouseWidget
operator|=
name|implicit_mouse_grabber
operator|.
name|data
argument_list|()
expr_stmt|;
name|mouseWindow
operator|=
name|mouseWidget
operator|->
name|window
argument_list|()
expr_stmt|;
if|#
directive|if
literal|0
block|if (mouseWindow != tlw)             localPoint = mouseWindow->mapFromGlobal(globalPoint);
endif|#
directive|endif
block|}
if|if
condition|(
operator|!
name|mouseWidget
condition|)
return|return;
name|Q_ASSERT
argument_list|(
name|mouseWidget
argument_list|)
expr_stmt|;
comment|//localPoint is local to mouseWindow, but it needs to be local to mouseWidget
name|localPoint
operator|=
name|mouseWidget
operator|->
name|mapFrom
argument_list|(
name|mouseWindow
argument_list|,
name|localPoint
argument_list|)
expr_stmt|;
if|if
condition|(
name|buttons
operator|==
name|Qt
operator|::
name|NoButton
condition|)
block|{
comment|//qDebug()<< "resetting mouse grabber";
name|implicit_mouse_grabber
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|#
directive|if
literal|0
block|if (mouseWidget != qt_last_mouse_receiver) {
comment|//        dispatchEnterLeave(mouseWidget, qt_last_mouse_receiver);
block|qt_last_mouse_receiver = mouseWidget;     }
endif|#
directive|endif
comment|// Remember, we might enter a modal event loop when sending the event,
comment|// so think carefully before adding code below this point.
comment|// qDebug()<< "sending mouse ev."<< ev.type()<< localPoint<< globalPoint<< ev.button()<< ev.buttons()<< mouseWidget<< "mouse grabber"<< implicit_mouse_grabber;
name|QMouseEvent
name|ev
argument_list|(
name|type
argument_list|,
name|localPoint
argument_list|,
name|globalPoint
argument_list|,
name|button
argument_list|,
name|buttons
argument_list|,
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
decl_stmt|;
if|#
directive|if
literal|0
block|QList<QWeakPointer<QPlatformCursor>> cursors = QPlatformCursorPrivate::getInstances();     foreach (QWeakPointer<QPlatformCursor> cursor, cursors) {         if (cursor)             cursor.data()->pointerEvent(ev);     }
endif|#
directive|endif
comment|//    int oldOpenPopupCount = openPopupCount;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|mouseWidget
argument_list|,
operator|&
name|ev
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
block|if (type == QEvent::MouseButtonPress&& button == Qt::RightButton&& (openPopupCount == oldOpenPopupCount)) {         QContextMenuEvent e(QContextMenuEvent::Mouse, localPoint, globalPoint, QGuiApplication::keyboardModifiers());         QGuiApplication::sendSpontaneousEvent(mouseWidget,&e);     }
endif|#
directive|endif
comment|// QT_NO_CONTEXTMENU
endif|#
directive|endif
block|}
end_function
begin_comment
comment|//### there's a lot of duplicated logic here -- refactoring required!
end_comment
begin_function
DECL|function|processWheelEvent
name|void
name|QGuiApplicationPrivate
operator|::
name|processWheelEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|WheelEvent
modifier|*
name|e
parameter_list|)
block|{
comment|//    QPoint localPoint = ev.pos();
name|QPoint
name|globalPoint
init|=
name|e
operator|->
name|globalPos
decl_stmt|;
comment|//    bool trustLocalPoint = !!tlw; //is there something the local point can be local to?
name|qt_last_x
operator|=
name|globalPoint
operator|.
name|x
argument_list|()
expr_stmt|;
name|qt_last_y
operator|=
name|globalPoint
operator|.
name|y
argument_list|()
expr_stmt|;
name|QWindow
modifier|*
name|window
init|=
name|e
operator|->
name|window
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|window
condition|)
return|return;
name|QWidget
modifier|*
name|mouseWidget
init|=
literal|0
decl_stmt|;
comment|//window ? window->widget() : 0;
comment|// find the tlw if we didn't get it from the plugin
if|#
directive|if
literal|0
block|if (!mouseWindow) {          mouseWindow = QGuiApplication::topLevelAt(globalPoint);      }
endif|#
directive|endif
if|if
condition|(
operator|!
name|mouseWidget
condition|)
block|{
name|QWheelEvent
name|ev
argument_list|(
name|e
operator|->
name|localPos
argument_list|,
name|e
operator|->
name|globalPos
argument_list|,
name|e
operator|->
name|delta
argument_list|,
name|buttons
argument_list|,
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|e
operator|->
name|orient
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|window
argument_list|,
operator|&
name|ev
argument_list|)
expr_stmt|;
return|return;
block|}
if|#
directive|if
literal|0
block|if (app_do_modal&& !qt_try_modal(mouseWindow, QEvent::Wheel) ) {          qDebug()<< "modal blocked wheel event"<< mouseWindow;          return;      }      QPoint p = mouseWindow->mapFromGlobal(globalPoint);      QWidget *w = mouseWindow->childAt(p);      if (w) {          mouseWidget = w;          p = mouseWidget->mapFromGlobal(globalPoint);      }
endif|#
directive|endif
name|QWheelEvent
name|ev
argument_list|(
name|e
operator|->
name|localPos
argument_list|,
name|e
operator|->
name|globalPos
argument_list|,
name|e
operator|->
name|delta
argument_list|,
name|buttons
argument_list|,
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|e
operator|->
name|orient
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|mouseWidget
argument_list|,
operator|&
name|ev
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Remember, Qt convention is:  keyboard state is state *before*
end_comment
begin_function
DECL|function|processKeyEvent
name|void
name|QGuiApplicationPrivate
operator|::
name|processKeyEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|KeyEvent
modifier|*
name|e
parameter_list|)
block|{
name|QWindow
modifier|*
name|window
init|=
name|e
operator|->
name|window
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|window
condition|)
return|return;
name|QObject
modifier|*
name|target
init|=
name|window
decl_stmt|;
comment|//window->widget() ? static_cast<QObject *>(window->widget()) : static_cast<QObject *>(window);
if|#
directive|if
literal|0
block|QWidget *focusW = 0;     if (self->inPopupMode()) {         QWidget *popupW = qApp->activePopupWidget();         focusW = popupW->focusWidget() ? popupW->focusWidget() : popupW;     }     if (!focusW)         focusW = QGuiApplication::focusWidget();     if (!focusW)         focusW = window->widget();     if (!focusW)         focusW = QGuiApplication::activeWindow();
endif|#
directive|endif
comment|//qDebug()<< "handleKeyEvent"<< hex<< e->key()<< e->modifiers()<< e->text()<< "widget"<< focusW;
if|#
directive|if
literal|0
block|if (!focusW)         return;     if (app_do_modal&& !qt_try_modal(focusW, e->keyType))         return;
endif|#
directive|endif
if|if
condition|(
name|e
operator|->
name|nativeScanCode
operator|||
name|e
operator|->
name|nativeVirtualKey
operator|||
name|e
operator|->
name|nativeModifiers
condition|)
block|{
name|QKeyEventEx
name|ev
argument_list|(
name|e
operator|->
name|keyType
argument_list|,
name|e
operator|->
name|key
argument_list|,
name|e
operator|->
name|modifiers
argument_list|,
name|e
operator|->
name|unicode
argument_list|,
name|e
operator|->
name|repeat
argument_list|,
name|e
operator|->
name|repeatCount
argument_list|,
name|e
operator|->
name|nativeScanCode
argument_list|,
name|e
operator|->
name|nativeVirtualKey
argument_list|,
name|e
operator|->
name|nativeModifiers
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|target
argument_list|,
operator|&
name|ev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QKeyEvent
name|ev
argument_list|(
name|e
operator|->
name|keyType
argument_list|,
name|e
operator|->
name|key
argument_list|,
name|e
operator|->
name|modifiers
argument_list|,
name|e
operator|->
name|unicode
argument_list|,
name|e
operator|->
name|repeat
argument_list|,
name|e
operator|->
name|repeatCount
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|target
argument_list|,
operator|&
name|ev
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|processEnterEvent
name|void
name|QGuiApplicationPrivate
operator|::
name|processEnterEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|EnterEvent
modifier|*
parameter_list|)
block|{
comment|//    QGuiApplicationPrivate::dispatchEnterLeave(e->enter.data(),0);
comment|//    qt_last_mouse_receiver = e->enter.data();
block|}
end_function
begin_function
DECL|function|processLeaveEvent
name|void
name|QGuiApplicationPrivate
operator|::
name|processLeaveEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|LeaveEvent
modifier|*
parameter_list|)
block|{
comment|//    QGuiApplicationPrivate::dispatchEnterLeave(0,qt_last_mouse_receiver);
if|#
directive|if
literal|0
block|if (e->leave.data()&& !e->leave.data()->isAncestorOf(qt_last_mouse_receiver))
comment|//(???) this should not happen
block|QGuiApplicationPrivate::dispatchEnterLeave(0, e->leave.data());
endif|#
directive|endif
name|qt_last_mouse_receiver
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processActivatedEvent
name|void
name|QGuiApplicationPrivate
operator|::
name|processActivatedEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|ActivatedWindowEvent
modifier|*
parameter_list|)
block|{
comment|//    QGuiApplication::setActiveWindow(e->activated.data());
block|}
end_function
begin_function
DECL|function|processGeometryChangeEvent
name|void
name|QGuiApplicationPrivate
operator|::
name|processGeometryChangeEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|GeometryChangeEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|tlw
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|QWindow
modifier|*
name|window
init|=
name|e
operator|->
name|tlw
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|window
condition|)
return|return;
name|QWidget
modifier|*
name|tlw
init|=
literal|0
decl_stmt|;
comment|//window->widget();
name|QObject
modifier|*
name|target
init|=
name|tlw
condition|?
cast|static_cast
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
name|tlw
argument_list|)
else|:
cast|static_cast
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|QRect
name|newRect
init|=
name|e
operator|->
name|newGeometry
decl_stmt|;
name|QRect
name|cr
init|=
name|tlw
condition|?
name|tlw
operator|->
name|geometry
argument_list|()
else|:
name|window
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|bool
name|isResize
init|=
name|cr
operator|.
name|size
argument_list|()
operator|!=
name|newRect
operator|.
name|size
argument_list|()
decl_stmt|;
name|bool
name|isMove
init|=
name|cr
operator|.
name|topLeft
argument_list|()
operator|!=
name|newRect
operator|.
name|topLeft
argument_list|()
decl_stmt|;
if|if
condition|(
name|tlw
operator|&&
operator|!
name|tlw
operator|->
name|isWindow
argument_list|()
condition|)
return|return;
comment|//geo of native child widgets is controlled by lighthouse
comment|//so we already have sent the events; besides this new rect
comment|//is not mapped to parent
if|if
condition|(
name|tlw
condition|)
name|tlw
operator|->
name|data
operator|->
name|crect
operator|=
name|newRect
expr_stmt|;
else|else
name|window
operator|->
name|d_func
argument_list|()
operator|->
name|geometry
operator|=
name|newRect
expr_stmt|;
if|if
condition|(
name|isResize
condition|)
block|{
name|QResizeEvent
name|e
argument_list|(
name|newRect
operator|.
name|size
argument_list|()
argument_list|,
name|cr
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|target
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|tlw
condition|)
name|tlw
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isMove
condition|)
block|{
comment|//### frame geometry
name|QMoveEvent
name|e
argument_list|(
name|newRect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|cr
operator|.
name|topLeft
argument_list|()
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|target
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|processCloseEvent
name|void
name|QGuiApplicationPrivate
operator|::
name|processCloseEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|CloseEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|window
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|QCloseEvent
name|event
decl_stmt|;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|e
operator|->
name|window
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processTouchEvent
name|void
name|QGuiApplicationPrivate
operator|::
name|processTouchEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|TouchEvent
modifier|*
parameter_list|)
block|{
comment|//    translateRawTouchEvent(e->widget.data(), e->devType, e->points);
block|}
end_function
begin_function
DECL|function|reportScreenCount
name|void
name|QGuiApplicationPrivate
operator|::
name|reportScreenCount
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenCountEvent
modifier|*
parameter_list|)
block|{
comment|// This operation only makes sense after the QGuiApplication constructor runs
if|if
condition|(
name|QCoreApplication
operator|::
name|startingUp
argument_list|()
condition|)
return|return;
comment|//QGuiApplication::desktop()->d_func()->updateScreenList();
comment|// signal anything listening for creation or deletion of screens
comment|//QDesktopWidget *desktop = QGuiApplication::desktop();
comment|//emit desktop->screenCountChanged(e->count);
block|}
end_function
begin_function
DECL|function|reportGeometryChange
name|void
name|QGuiApplicationPrivate
operator|::
name|reportGeometryChange
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenGeometryEvent
modifier|*
parameter_list|)
block|{
comment|// This operation only makes sense after the QGuiApplication constructor runs
if|if
condition|(
name|QCoreApplication
operator|::
name|startingUp
argument_list|()
condition|)
return|return;
if|#
directive|if
literal|0
block|QGuiApplication::desktop()->d_func()->updateScreenList();
comment|// signal anything listening for screen geometry changes
block|QDesktopWidget *desktop = QGuiApplication::desktop();     emit desktop->resized(e->index);
comment|// make sure maximized and fullscreen windows are updated
block|QWidgetList list = QGuiApplication::topLevelWidgets();     for (int i = list.size() - 1; i>= 0; --i) {         QWidget *w = list.at(i);         if (w->isFullScreen())             w->d_func()->setFullScreenSize_helper();         else if (w->isMaximized())             w->d_func()->setMaxWindowState_helper();     }
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|reportAvailableGeometryChange
name|void
name|QGuiApplicationPrivate
operator|::
name|reportAvailableGeometryChange
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenAvailableGeometryEvent
modifier|*
parameter_list|)
block|{
comment|// This operation only makes sense after the QGuiApplication constructor runs
if|if
condition|(
name|QCoreApplication
operator|::
name|startingUp
argument_list|()
condition|)
return|return;
if|#
directive|if
literal|0
block|QGuiApplication::desktop()->d_func()->updateScreenList();
comment|// signal anything listening for screen geometry changes
block|QDesktopWidget *desktop = QGuiApplication::desktop();     emit desktop->workAreaResized(e->index);
comment|// make sure maximized and fullscreen windows are updated
block|QWidgetList list = QGuiApplication::topLevelWidgets();     for (int i = list.size() - 1; i>= 0; --i) {         QWidget *w = list.at(i);         if (w->isFullScreen())             w->d_func()->setFullScreenSize_helper();         else if (w->isMaximized())             w->d_func()->setMaxWindowState_helper();     }
endif|#
directive|endif
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_function
DECL|function|clipboard
name|QClipboard
modifier|*
name|QGuiApplication
operator|::
name|clipboard
parameter_list|()
block|{
if|if
condition|(
name|QGuiApplicationPrivate
operator|::
name|qt_clipboard
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|qApp
condition|)
block|{
name|qWarning
argument_list|(
literal|"QApplication: Must construct a QApplication before accessing a QClipboard"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|QGuiApplicationPrivate
operator|::
name|qt_clipboard
operator|=
operator|new
name|QClipboard
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|QGuiApplicationPrivate
operator|::
name|qt_clipboard
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|font
name|QFont
name|QGuiApplication
operator|::
name|font
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
name|applicationFontMutex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QGuiApplicationPrivate
operator|::
name|app_font
condition|)
name|QGuiApplicationPrivate
operator|::
name|app_font
operator|=
operator|new
name|QFont
argument_list|(
name|QLatin1String
argument_list|(
literal|"Helvetica"
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|*
name|QGuiApplicationPrivate
operator|::
name|app_font
return|;
block|}
end_function
begin_function
DECL|function|setFont
name|void
name|QGuiApplication
operator|::
name|setFont
parameter_list|(
specifier|const
name|QFont
modifier|&
name|font
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
name|applicationFontMutex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QGuiApplicationPrivate
operator|::
name|app_font
condition|)
name|QGuiApplicationPrivate
operator|::
name|app_font
operator|=
operator|new
name|QFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
else|else
operator|*
name|QGuiApplicationPrivate
operator|::
name|app_font
operator|=
name|font
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QGuiApplication::isRightToLeft()      Returns true if the application's layout direction is     Qt::RightToLeft; otherwise returns false.      \sa layoutDirection(), isLeftToRight() */
end_comment
begin_comment
comment|/*!     \fn bool QGuiApplication::isLeftToRight()      Returns true if the application's layout direction is     Qt::LeftToRight; otherwise returns false.      \sa layoutDirection(), isRightToLeft() */
end_comment
begin_function
DECL|function|notifyLayoutDirectionChange
name|void
name|QGuiApplicationPrivate
operator|::
name|notifyLayoutDirectionChange
parameter_list|()
block|{ }
end_function
begin_comment
comment|/*!     \property QGuiApplication::layoutDirection     \brief the default layout direction for this application      On system start-up, the default layout direction depends on the     application's language.      \sa QWidget::layoutDirection, isLeftToRight(), isRightToLeft()  */
end_comment
begin_function
DECL|function|setLayoutDirection
name|void
name|QGuiApplication
operator|::
name|setLayoutDirection
parameter_list|(
name|Qt
operator|::
name|LayoutDirection
name|direction
parameter_list|)
block|{
if|if
condition|(
name|layout_direction
operator|==
name|direction
operator|||
name|direction
operator|==
name|Qt
operator|::
name|LayoutDirectionAuto
condition|)
return|return;
name|layout_direction
operator|=
name|direction
expr_stmt|;
name|QGuiApplicationPrivate
operator|::
name|self
operator|->
name|notifyLayoutDirectionChange
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|layoutDirection
name|Qt
operator|::
name|LayoutDirection
name|QGuiApplication
operator|::
name|layoutDirection
parameter_list|()
block|{
return|return
name|layout_direction
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5     \fn void QGuiApplication::fontDatabaseChanged()      This signal is emitted when application fonts are loaded or removed.      \sa QFontDatabase::addApplicationFont(),     QFontDatabase::addApplicationFontFromData(),     QFontDatabase::removeAllApplicationFonts(),     QFontDatabase::removeApplicationFont() */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
