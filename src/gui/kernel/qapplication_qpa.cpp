begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"qcolormap.h"
end_include
begin_include
include|#
directive|include
file|"qpixmapcache.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_GLIB
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qeventdispatcher_glib_qpa_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qeventdispatcher_qpa_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_include
include|#
directive|include
file|"private/qcursor_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"private/qwidget_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qevent_p.h"
end_include
begin_include
include|#
directive|include
file|"qgenericpluginfactory_qpa.h"
end_include
begin_include
include|#
directive|include
file|"qplatformintegrationfactory_qpa_p.h"
end_include
begin_include
include|#
directive|include
file|<qdesktopwidget.h>
end_include
begin_include
include|#
directive|include
file|<qinputcontext.h>
end_include
begin_include
include|#
directive|include
file|<QPlatformCursor>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QWindowSystemInterface>
end_include
begin_include
include|#
directive|include
file|"qwindowsysteminterface_qpa_p.h"
end_include
begin_include
include|#
directive|include
file|<QPlatformIntegration>
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget_qpa_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|appName
specifier|static
name|QString
name|appName
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|appFont
specifier|static
name|QString
name|appFont
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_button_down
name|QWidget
modifier|*
name|qt_button_down
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|qt_button_down
comment|// widget got last button-down
end_comment
begin_decl_stmt
DECL|variable|app_do_modal
specifier|static
name|bool
name|app_do_modal
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|QWidgetList
modifier|*
name|qt_modal_stack
decl_stmt|;
end_decl_stmt
begin_comment
comment|// stack of modal widgets
end_comment
begin_decl_stmt
DECL|variable|qt_last_x
name|qreal
name|qt_last_x
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_last_y
name|qreal
name|qt_last_y
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_last_mouse_receiver
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|qt_last_mouse_receiver
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|buttons
specifier|static
name|Qt
operator|::
name|MouseButtons
name|buttons
init|=
name|Qt
operator|::
name|NoButton
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mousePressTime
specifier|static
name|ulong
name|mousePressTime
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mousePressButton
specifier|static
name|Qt
operator|::
name|MouseButton
name|mousePressButton
init|=
name|Qt
operator|::
name|NoButton
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mousePressX
specifier|static
name|int
name|mousePressX
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mousePressY
specifier|static
name|int
name|mousePressY
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mouse_double_click_distance
specifier|static
name|int
name|mouse_double_click_distance
init|=
literal|5
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|processWindowSystemEvent
name|void
name|QApplicationPrivate
operator|::
name|processWindowSystemEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|WindowSystemEvent
modifier|*
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|->
name|type
condition|)
block|{
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|Mouse
case|:
name|QApplicationPrivate
operator|::
name|processMouseEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|MouseEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|Wheel
case|:
name|QApplicationPrivate
operator|::
name|processWheelEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|WheelEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|Key
case|:
name|QApplicationPrivate
operator|::
name|processKeyEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|KeyEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|Touch
case|:
name|QApplicationPrivate
operator|::
name|processTouchEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|TouchEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|GeometryChange
case|:
name|QApplicationPrivate
operator|::
name|processGeometryChangeEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|GeometryChangeEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|Enter
case|:
name|QApplicationPrivate
operator|::
name|processEnterEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|EnterEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|Leave
case|:
name|QApplicationPrivate
operator|::
name|processLeaveEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|LeaveEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|ActivatedWindow
case|:
name|QApplicationPrivate
operator|::
name|processActivatedEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|ActivatedWindowEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|Close
case|:
name|QApplicationPrivate
operator|::
name|processCloseEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|CloseEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenCountChange
case|:
name|QApplicationPrivate
operator|::
name|reportScreenCount
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenCountEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenGeometry
case|:
name|QApplicationPrivate
operator|::
name|reportGeometryChange
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenGeometryEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenAvailableGeometry
case|:
name|QApplicationPrivate
operator|::
name|reportAvailableGeometryChange
argument_list|(
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenAvailableGeometryEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|()
operator|<<
literal|"Unknown user input event type:"
operator|<<
name|e
operator|->
name|type
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|appName
name|QString
name|QApplicationPrivate
operator|::
name|appName
parameter_list|()
specifier|const
block|{
return|return
name|QT_PREPEND_NAMESPACE
argument_list|(
name|appName
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createEventDispatcher
name|void
name|QApplicationPrivate
operator|::
name|createEventDispatcher
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QApplication
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_GLIB
argument_list|)
if|if
condition|(
name|qgetenv
argument_list|(
literal|"QT_NO_GLIB"
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|&&
name|QEventDispatcherGlib
operator|::
name|versionSupported
argument_list|()
condition|)
name|eventDispatcher
operator|=
operator|new
name|QPAEventDispatcherGlib
argument_list|(
name|q
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
name|eventDispatcher
operator|=
operator|new
name|QEventDispatcherQPA
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_try_modal
specifier|static
name|bool
name|qt_try_modal
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QEvent
operator|::
name|Type
name|type
parameter_list|)
block|{
name|QWidget
modifier|*
name|top
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|QApplicationPrivate
operator|::
name|tryModalHelper
argument_list|(
name|widget
argument_list|,
operator|&
name|top
argument_list|)
condition|)
return|return
literal|true
return|;
name|bool
name|block_event
init|=
literal|false
decl_stmt|;
name|bool
name|paint_event
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
if|#
directive|if
literal|0
block|case QEvent::Focus:         if (!static_cast<QWSFocusEvent*>(event)->simpleData.get_focus)             break;
comment|// drop through
endif|#
directive|endif
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
comment|// disallow mouse/key events
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
case|case
name|QEvent
operator|::
name|MouseMove
case|:
case|case
name|QEvent
operator|::
name|KeyPress
case|:
case|case
name|QEvent
operator|::
name|KeyRelease
case|:
name|block_event
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
operator|(
name|block_event
operator|||
name|paint_event
operator|)
operator|&&
name|top
operator|->
name|parentWidget
argument_list|()
operator|==
literal|0
condition|)
name|top
operator|->
name|raise
argument_list|()
expr_stmt|;
return|return
operator|!
name|block_event
return|;
block|}
end_function
begin_function
DECL|function|enterModal_sys
name|void
name|QApplicationPrivate
operator|::
name|enterModal_sys
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
operator|!
name|qt_modal_stack
condition|)
name|qt_modal_stack
operator|=
operator|new
name|QWidgetList
expr_stmt|;
name|qt_modal_stack
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|app_do_modal
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|leaveModal_sys
name|void
name|QApplicationPrivate
operator|::
name|leaveModal_sys
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
name|qt_modal_stack
operator|&&
name|qt_modal_stack
operator|->
name|removeAll
argument_list|(
name|widget
argument_list|)
condition|)
block|{
if|if
condition|(
name|qt_modal_stack
operator|->
name|isEmpty
argument_list|()
condition|)
block|{
operator|delete
name|qt_modal_stack
expr_stmt|;
name|qt_modal_stack
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|app_do_modal
operator|=
name|qt_modal_stack
operator|!=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|modalState
name|bool
name|QApplicationPrivate
operator|::
name|modalState
parameter_list|()
block|{
return|return
name|app_do_modal
return|;
block|}
end_function
begin_function
DECL|function|closePopup
name|void
name|QApplicationPrivate
operator|::
name|closePopup
parameter_list|(
name|QWidget
modifier|*
name|popup
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QApplication
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|popupWidgets
condition|)
return|return;
name|popupWidgets
operator|->
name|removeAll
argument_list|(
name|popup
argument_list|)
expr_stmt|;
comment|//###
comment|//     if (popup == qt_popup_down) {
comment|//         qt_button_down = 0;
comment|//         qt_popup_down = 0;
comment|//     }
if|if
condition|(
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|->
name|count
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// this was the last popup
operator|delete
name|QApplicationPrivate
operator|::
name|popupWidgets
expr_stmt|;
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|=
literal|0
expr_stmt|;
comment|//### replay mouse event?
comment|//### transfer/release mouse grab
comment|//### transfer/release keyboard grab
comment|//give back focus
if|if
condition|(
name|active_window
condition|)
block|{
if|if
condition|(
name|QWidget
modifier|*
name|fw
init|=
name|active_window
operator|->
name|focusWidget
argument_list|()
condition|)
block|{
if|if
condition|(
name|fw
operator|!=
name|QApplication
operator|::
name|focusWidget
argument_list|()
condition|)
block|{
name|fw
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|PopupFocusReason
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QFocusEvent
name|e
argument_list|(
name|QEvent
operator|::
name|FocusIn
argument_list|,
name|Qt
operator|::
name|PopupFocusReason
argument_list|)
decl_stmt|;
name|q
operator|->
name|sendEvent
argument_list|(
name|fw
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// A popup was closed, so the previous popup gets the focus.
name|QWidget
modifier|*
name|aw
init|=
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|->
name|last
argument_list|()
decl_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|fw
init|=
name|aw
operator|->
name|focusWidget
argument_list|()
condition|)
name|fw
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|PopupFocusReason
argument_list|)
expr_stmt|;
comment|//### regrab the keyboard and mouse in case 'popup' lost the grab
block|}
block|}
end_function
begin_decl_stmt
DECL|variable|openPopupCount
specifier|static
name|int
name|openPopupCount
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|openPopup
name|void
name|QApplicationPrivate
operator|::
name|openPopup
parameter_list|(
name|QWidget
modifier|*
name|popup
parameter_list|)
block|{
name|openPopupCount
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|popupWidgets
condition|)
block|{
comment|// create list
name|popupWidgets
operator|=
operator|new
name|QWidgetList
expr_stmt|;
comment|/* only grab if you are the first/parent popup */
comment|//####   ->grabMouse(popup,true);
comment|//####   ->grabKeyboard(popup,true);
comment|//### popupGrabOk = true;
block|}
name|popupWidgets
operator|->
name|append
argument_list|(
name|popup
argument_list|)
expr_stmt|;
comment|// add to end of list
comment|// popups are not focus-handled by the window system (the first
comment|// popup grabbed the keyboard), so we have to do that manually: A
comment|// new popup gets the focus
if|if
condition|(
name|popup
operator|->
name|focusWidget
argument_list|()
condition|)
block|{
name|popup
operator|->
name|focusWidget
argument_list|()
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|PopupFocusReason
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|popupWidgets
operator|->
name|count
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// this was the first popup
if|if
condition|(
name|QWidget
modifier|*
name|fw
init|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
condition|)
block|{
name|QFocusEvent
name|e
argument_list|(
name|QEvent
operator|::
name|FocusOut
argument_list|,
name|Qt
operator|::
name|PopupFocusReason
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|fw
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|initializeMultitouch_sys
name|void
name|QApplicationPrivate
operator|::
name|initializeMultitouch_sys
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanupMultitouch_sys
name|void
name|QApplicationPrivate
operator|::
name|cleanupMultitouch_sys
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|initializeWidgetPaletteHash
name|void
name|QApplicationPrivate
operator|::
name|initializeWidgetPaletteHash
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|setCursorFlashTime
name|void
name|QApplication
operator|::
name|setCursorFlashTime
parameter_list|(
name|int
name|msecs
parameter_list|)
block|{
name|QApplicationPrivate
operator|::
name|cursor_flash_time
operator|=
name|msecs
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorFlashTime
name|int
name|QApplication
operator|::
name|cursorFlashTime
parameter_list|()
block|{
return|return
name|QApplicationPrivate
operator|::
name|cursor_flash_time
return|;
block|}
end_function
begin_function
DECL|function|setDoubleClickInterval
name|void
name|QApplication
operator|::
name|setDoubleClickInterval
parameter_list|(
name|int
name|ms
parameter_list|)
block|{
name|QApplicationPrivate
operator|::
name|mouse_double_click_time
operator|=
name|ms
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doubleClickInterval
name|int
name|QApplication
operator|::
name|doubleClickInterval
parameter_list|()
block|{
return|return
name|QApplicationPrivate
operator|::
name|mouse_double_click_time
return|;
block|}
end_function
begin_function
DECL|function|setKeyboardInputInterval
name|void
name|QApplication
operator|::
name|setKeyboardInputInterval
parameter_list|(
name|int
name|ms
parameter_list|)
block|{
name|QApplicationPrivate
operator|::
name|keyboard_input_time
operator|=
name|ms
expr_stmt|;
block|}
end_function
begin_function
DECL|function|keyboardInputInterval
name|int
name|QApplication
operator|::
name|keyboardInputInterval
parameter_list|()
block|{
return|return
name|QApplicationPrivate
operator|::
name|keyboard_input_time
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
end_ifndef
begin_function
DECL|function|setWheelScrollLines
name|void
name|QApplication
operator|::
name|setWheelScrollLines
parameter_list|(
name|int
name|lines
parameter_list|)
block|{
name|QApplicationPrivate
operator|::
name|wheel_scroll_lines
operator|=
name|lines
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wheelScrollLines
name|int
name|QApplication
operator|::
name|wheelScrollLines
parameter_list|()
block|{
return|return
name|QApplicationPrivate
operator|::
name|wheel_scroll_lines
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setEffectEnabled
name|void
name|QApplication
operator|::
name|setEffectEnabled
parameter_list|(
name|Qt
operator|::
name|UIEffect
name|effect
parameter_list|,
name|bool
name|enable
parameter_list|)
block|{
switch|switch
condition|(
name|effect
condition|)
block|{
case|case
name|Qt
operator|::
name|UI_AnimateMenu
case|:
name|QApplicationPrivate
operator|::
name|animate_menu
operator|=
name|enable
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_FadeMenu
case|:
if|if
condition|(
name|enable
condition|)
name|QApplicationPrivate
operator|::
name|animate_menu
operator|=
literal|true
expr_stmt|;
name|QApplicationPrivate
operator|::
name|fade_menu
operator|=
name|enable
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_AnimateCombo
case|:
name|QApplicationPrivate
operator|::
name|animate_combo
operator|=
name|enable
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_AnimateTooltip
case|:
name|QApplicationPrivate
operator|::
name|animate_tooltip
operator|=
name|enable
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_FadeTooltip
case|:
if|if
condition|(
name|enable
condition|)
name|QApplicationPrivate
operator|::
name|animate_tooltip
operator|=
literal|true
expr_stmt|;
name|QApplicationPrivate
operator|::
name|fade_tooltip
operator|=
name|enable
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_AnimateToolBox
case|:
name|QApplicationPrivate
operator|::
name|animate_toolbox
operator|=
name|enable
expr_stmt|;
break|break;
default|default:
name|QApplicationPrivate
operator|::
name|animate_ui
operator|=
name|enable
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|isEffectEnabled
name|bool
name|QApplication
operator|::
name|isEffectEnabled
parameter_list|(
name|Qt
operator|::
name|UIEffect
name|effect
parameter_list|)
block|{
if|if
condition|(
name|QColormap
operator|::
name|instance
argument_list|()
operator|.
name|depth
argument_list|()
operator|<
literal|16
operator|||
operator|!
name|QApplicationPrivate
operator|::
name|animate_ui
condition|)
return|return
literal|false
return|;
switch|switch
condition|(
name|effect
condition|)
block|{
case|case
name|Qt
operator|::
name|UI_AnimateMenu
case|:
return|return
name|QApplicationPrivate
operator|::
name|animate_menu
return|;
case|case
name|Qt
operator|::
name|UI_FadeMenu
case|:
return|return
name|QApplicationPrivate
operator|::
name|fade_menu
return|;
case|case
name|Qt
operator|::
name|UI_AnimateCombo
case|:
return|return
name|QApplicationPrivate
operator|::
name|animate_combo
return|;
case|case
name|Qt
operator|::
name|UI_AnimateTooltip
case|:
return|return
name|QApplicationPrivate
operator|::
name|animate_tooltip
return|;
case|case
name|Qt
operator|::
name|UI_FadeTooltip
case|:
return|return
name|QApplicationPrivate
operator|::
name|fade_tooltip
return|;
case|case
name|Qt
operator|::
name|UI_AnimateToolBox
case|:
return|return
name|QApplicationPrivate
operator|::
name|animate_toolbox
return|;
default|default:
return|return
name|QApplicationPrivate
operator|::
name|animate_ui
return|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|setOverrideCursor
name|void
name|QApplication
operator|::
name|setOverrideCursor
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|)
block|{
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|cursor_list
operator|.
name|prepend
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|qt_qpa_set_cursor
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|restoreOverrideCursor
name|void
name|QApplication
operator|::
name|restoreOverrideCursor
parameter_list|()
block|{
if|if
condition|(
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|cursor_list
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|cursor_list
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|qt_qpa_set_cursor
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CURSOR
end_comment
begin_function
DECL|function|topLevelAt
name|QWidget
modifier|*
name|QApplication
operator|::
name|topLevelAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|QPlatformIntegration
modifier|*
name|pi
init|=
name|QApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QPlatformScreen
modifier|*
argument_list|>
name|screens
init|=
name|pi
operator|->
name|screens
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QPlatformScreen
modifier|*
argument_list|>
operator|::
name|const_iterator
name|screen
init|=
name|screens
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QPlatformScreen
modifier|*
argument_list|>
operator|::
name|const_iterator
name|end
init|=
name|screens
operator|.
name|constEnd
argument_list|()
decl_stmt|;
comment|// The first screen in a virtual environment should know about all top levels
if|if
condition|(
name|pi
operator|->
name|isVirtualDesktop
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
operator|(
operator|*
name|screen
operator|)
operator|->
name|topLevelAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
return|return
name|w
return|;
block|}
while|while
condition|(
name|screen
operator|!=
name|end
condition|)
block|{
if|if
condition|(
operator|(
operator|*
name|screen
operator|)
operator|->
name|geometry
argument_list|()
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
condition|)
return|return
operator|(
operator|*
name|screen
operator|)
operator|->
name|topLevelAt
argument_list|(
name|pos
argument_list|)
return|;
operator|++
name|screen
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|beep
name|void
name|QApplication
operator|::
name|beep
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|alert
name|void
name|QApplication
operator|::
name|alert
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
name|int
parameter_list|)
block|{ }
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|platformNativeInterface
name|QPlatformNativeInterface
modifier|*
name|QApplication
operator|::
name|platformNativeInterface
parameter_list|()
block|{
name|QPlatformIntegration
modifier|*
name|pi
init|=
name|QApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
decl_stmt|;
return|return
name|pi
operator|->
name|nativeInterface
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|init_platform
specifier|static
name|void
name|init_platform
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QString
modifier|&
name|platformPluginPath
parameter_list|)
block|{
name|QApplicationPrivate
operator|::
name|platform_integration
operator|=
name|QPlatformIntegrationFactory
operator|::
name|create
argument_list|(
name|name
argument_list|,
name|platformPluginPath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QApplicationPrivate
operator|::
name|platform_integration
condition|)
block|{
name|QStringList
name|keys
init|=
name|QPlatformIntegrationFactory
operator|::
name|keys
argument_list|(
name|platformPluginPath
argument_list|)
decl_stmt|;
name|QString
name|fatalMessage
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Failed to load platform plugin \"%1\". Available platforms are: \n"
argument_list|)
operator|.
name|arg
argument_list|(
name|name
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QString
name|key
decl|,
name|keys
control|)
block|{
name|fatalMessage
operator|.
name|append
argument_list|(
name|key
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|qFatal
argument_list|(
literal|"%s"
argument_list|,
name|fatalMessage
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cleanup_platform
specifier|static
name|void
name|cleanup_platform
parameter_list|()
block|{
operator|delete
name|QApplicationPrivate
operator|::
name|platform_integration
expr_stmt|;
name|QApplicationPrivate
operator|::
name|platform_integration
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init_plugins
specifier|static
name|void
name|init_plugins
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|pluginList
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pluginList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QByteArray
name|pluginSpec
init|=
name|pluginList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"init_plugins"
operator|<<
name|i
operator|<<
name|pluginSpec
expr_stmt|;
name|int
name|colonPos
init|=
name|pluginSpec
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|QObject
modifier|*
name|plugin
decl_stmt|;
if|if
condition|(
name|colonPos
operator|<
literal|0
condition|)
name|plugin
operator|=
name|QGenericPluginFactory
operator|::
name|create
argument_list|(
name|QLatin1String
argument_list|(
name|pluginSpec
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|plugin
operator|=
name|QGenericPluginFactory
operator|::
name|create
argument_list|(
name|QLatin1String
argument_list|(
name|pluginSpec
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|colonPos
argument_list|)
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|pluginSpec
operator|.
name|mid
argument_list|(
name|colonPos
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"	created"
operator|<<
name|plugin
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_INPUTMETHODS
end_ifndef
begin_class
DECL|class|QDummyInputContext
class|class
name|QDummyInputContext
super|:
specifier|public
name|QInputContext
block|{
public|public:
DECL|function|QDummyInputContext
specifier|explicit
name|QDummyInputContext
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QInputContext
argument_list|(
name|parent
argument_list|)
block|{}
DECL|function|~QDummyInputContext
name|~
name|QDummyInputContext
parameter_list|()
block|{}
DECL|function|identifierName
name|QString
name|identifierName
parameter_list|()
block|{
return|return
name|QString
argument_list|()
return|;
block|}
DECL|function|language
name|QString
name|language
parameter_list|()
block|{
return|return
name|QString
argument_list|()
return|;
block|}
DECL|function|reset
name|void
name|reset
parameter_list|()
block|{}
DECL|function|isComposing
name|bool
name|isComposing
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_INPUTMETHODS
end_comment
begin_function
DECL|function|qt_init
name|void
name|qt_init
parameter_list|(
name|QApplicationPrivate
modifier|*
name|priv
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_DontCreateNativeWidgetSiblings
argument_list|)
expr_stmt|;
name|char
modifier|*
name|p
decl_stmt|;
name|char
modifier|*
modifier|*
name|argv
init|=
name|priv
operator|->
name|argv
decl_stmt|;
name|int
name|argc
init|=
name|priv
operator|->
name|argc
decl_stmt|;
if|if
condition|(
name|argv
operator|&&
operator|*
name|argv
condition|)
block|{
comment|//apparently, we allow people to pass 0 on the other platforms
name|p
operator|=
name|strrchr
argument_list|(
name|argv
index|[
literal|0
index|]
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|appName
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|p
condition|?
name|p
operator|+
literal|1
else|:
name|argv
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|pluginList
decl_stmt|;
name|QString
name|platformPluginPath
init|=
name|QLatin1String
argument_list|(
name|qgetenv
argument_list|(
literal|"QT_QPA_PLATFORM_PLUGIN_PATH"
argument_list|)
argument_list|)
decl_stmt|;
name|QByteArray
name|platformName
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_QPA_DEFAULT_PLATFORM_NAME
name|platformName
operator|=
name|QT_QPA_DEFAULT_PLATFORM_NAME
expr_stmt|;
endif|#
directive|endif
name|QByteArray
name|platformNameEnv
init|=
name|qgetenv
argument_list|(
literal|"QT_QPA_PLATFORM"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|platformNameEnv
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|platformName
operator|=
name|platformNameEnv
expr_stmt|;
block|}
comment|// Get command line params
name|int
name|j
init|=
name|argc
condition|?
literal|1
else|:
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|argc
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|argv
index|[
name|i
index|]
operator|&&
operator|*
name|argv
index|[
name|i
index|]
operator|!=
literal|'-'
condition|)
block|{
name|argv
index|[
name|j
operator|++
index|]
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
continue|continue;
block|}
name|QByteArray
name|arg
init|=
name|argv
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|arg
operator|==
literal|"-fn"
operator|||
name|arg
operator|==
literal|"-font"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|appFont
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-platformpluginpath"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|platformPluginPath
operator|=
name|QLatin1String
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-platform"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|platformName
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-plugin"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|pluginList
operator|<<
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|argv
index|[
name|j
operator|++
index|]
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
if|if
condition|(
name|j
operator|<
name|priv
operator|->
name|argc
condition|)
block|{
name|priv
operator|->
name|argv
index|[
name|j
index|]
operator|=
literal|0
expr_stmt|;
name|priv
operator|->
name|argc
operator|=
name|j
expr_stmt|;
block|}
if|#
directive|if
literal|0
block|QByteArray pluginEnv = qgetenv("QT_QPA_PLUGINS");     if (!pluginEnv.isEmpty()) {         pluginList.append(pluginEnv.split(';'));     }
endif|#
directive|endif
name|init_platform
argument_list|(
name|QLatin1String
argument_list|(
name|platformName
argument_list|)
argument_list|,
name|platformPluginPath
argument_list|)
expr_stmt|;
name|init_plugins
argument_list|(
name|pluginList
argument_list|)
expr_stmt|;
name|QColormap
operator|::
name|initialize
argument_list|()
expr_stmt|;
name|QFont
operator|::
name|initialize
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
comment|//    QCursorData::initialize();
endif|#
directive|endif
name|qApp
operator|->
name|setObjectName
argument_list|(
name|appName
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_INPUTMETHODS
name|qApp
operator|->
name|setInputContext
argument_list|(
operator|new
name|QDummyInputContext
argument_list|(
name|qApp
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|qt_cleanup
name|void
name|qt_cleanup
parameter_list|()
block|{
name|cleanup_platform
argument_list|()
expr_stmt|;
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QCursorData
operator|::
name|cleanup
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QFont
operator|::
name|cleanup
argument_list|()
expr_stmt|;
name|QColormap
operator|::
name|cleanup
argument_list|()
expr_stmt|;
operator|delete
name|QApplicationPrivate
operator|::
name|inputContext
expr_stmt|;
name|QApplicationPrivate
operator|::
name|inputContext
operator|=
literal|0
expr_stmt|;
name|QApplicationPrivate
operator|::
name|active_window
operator|=
literal|0
expr_stmt|;
comment|//### this should not be necessary
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_function
DECL|function|setMainWidget
name|void
name|QApplication
operator|::
name|setMainWidget
parameter_list|(
name|QWidget
modifier|*
name|mainWidget
parameter_list|)
block|{
name|QApplicationPrivate
operator|::
name|main_widget
operator|=
name|mainWidget
expr_stmt|;
if|if
condition|(
name|QApplicationPrivate
operator|::
name|main_widget
operator|&&
name|windowIcon
argument_list|()
operator|.
name|isNull
argument_list|()
operator|&&
name|QApplicationPrivate
operator|::
name|main_widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetWindowIcon
argument_list|)
condition|)
name|setWindowIcon
argument_list|(
name|QApplicationPrivate
operator|::
name|main_widget
operator|->
name|windowIcon
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|processMouseEvent
name|void
name|QApplicationPrivate
operator|::
name|processMouseEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|MouseEvent
modifier|*
name|e
parameter_list|)
block|{
comment|// qDebug()<< "handleMouseEvent"<< tlw<< ev.pos()<< ev.globalPos()<< hex<< ev.buttons();
specifier|static
name|QWeakPointer
argument_list|<
name|QWidget
argument_list|>
name|implicit_mouse_grabber
decl_stmt|;
name|QEvent
operator|::
name|Type
name|type
decl_stmt|;
comment|// move first
name|Qt
operator|::
name|MouseButtons
name|stateChange
init|=
name|e
operator|->
name|buttons
operator|^
name|buttons
decl_stmt|;
if|if
condition|(
name|e
operator|->
name|globalPos
operator|!=
name|QPointF
argument_list|(
name|qt_last_x
argument_list|,
name|qt_last_y
argument_list|)
operator|&&
operator|(
name|stateChange
operator|!=
name|Qt
operator|::
name|NoButton
operator|)
condition|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|MouseEvent
modifier|*
name|newMouseEvent
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|MouseEvent
argument_list|(
name|e
operator|->
name|widget
operator|.
name|data
argument_list|()
argument_list|,
name|e
operator|->
name|timestamp
argument_list|,
name|e
operator|->
name|localPos
argument_list|,
name|e
operator|->
name|globalPos
argument_list|,
name|e
operator|->
name|buttons
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|windowSystemEventQueue
operator|.
name|prepend
argument_list|(
name|newMouseEvent
argument_list|)
expr_stmt|;
comment|// just in case the move triggers a new event loop
name|stateChange
operator|=
name|Qt
operator|::
name|NoButton
expr_stmt|;
block|}
name|QWidget
modifier|*
name|tlw
init|=
name|e
operator|->
name|widget
operator|.
name|data
argument_list|()
decl_stmt|;
name|QPointF
name|localPoint
init|=
name|e
operator|->
name|localPos
decl_stmt|;
name|QPointF
name|globalPoint
init|=
name|e
operator|->
name|globalPos
decl_stmt|;
name|QWidget
modifier|*
name|mouseWindow
init|=
name|tlw
decl_stmt|;
name|Qt
operator|::
name|MouseButton
name|button
init|=
name|Qt
operator|::
name|NoButton
decl_stmt|;
if|if
condition|(
name|qt_last_x
operator|!=
name|globalPoint
operator|.
name|x
argument_list|()
operator|||
name|qt_last_y
operator|!=
name|globalPoint
operator|.
name|y
argument_list|()
condition|)
block|{
name|type
operator|=
name|QEvent
operator|::
name|MouseMove
expr_stmt|;
name|qt_last_x
operator|=
name|globalPoint
operator|.
name|x
argument_list|()
expr_stmt|;
name|qt_last_y
operator|=
name|globalPoint
operator|.
name|y
argument_list|()
expr_stmt|;
if|if
condition|(
name|qAbs
argument_list|(
name|globalPoint
operator|.
name|x
argument_list|()
operator|-
name|mousePressX
argument_list|)
operator|>
name|mouse_double_click_distance
operator|||
name|qAbs
argument_list|(
name|globalPoint
operator|.
name|y
argument_list|()
operator|-
name|mousePressY
argument_list|)
operator|>
name|mouse_double_click_distance
condition|)
name|mousePressButton
operator|=
name|Qt
operator|::
name|NoButton
expr_stmt|;
block|}
else|else
block|{
comment|// check to see if a new button has been pressed/released
for|for
control|(
name|int
name|check
init|=
name|Qt
operator|::
name|LeftButton
init|;
name|check
operator|<=
name|Qt
operator|::
name|XButton2
condition|;
name|check
operator|=
name|check
operator|<<
literal|1
control|)
block|{
if|if
condition|(
name|check
operator|&
name|stateChange
condition|)
block|{
name|button
operator|=
name|Qt
operator|::
name|MouseButton
argument_list|(
name|check
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|NoButton
condition|)
block|{
comment|// Ignore mouse events that don't change the current state
return|return;
block|}
name|buttons
operator|=
name|e
operator|->
name|buttons
expr_stmt|;
if|if
condition|(
name|button
operator|&
name|e
operator|->
name|buttons
condition|)
block|{
if|if
condition|(
operator|(
name|e
operator|->
name|timestamp
operator|-
name|mousePressTime
operator|)
operator|<
cast|static_cast
argument_list|<
name|ulong
argument_list|>
argument_list|(
name|QApplication
operator|::
name|doubleClickInterval
argument_list|()
argument_list|)
operator|&&
name|button
operator|==
name|mousePressButton
condition|)
block|{
name|type
operator|=
name|QEvent
operator|::
name|MouseButtonDblClick
expr_stmt|;
name|mousePressButton
operator|=
name|Qt
operator|::
name|NoButton
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|QEvent
operator|::
name|MouseButtonPress
expr_stmt|;
name|mousePressTime
operator|=
name|e
operator|->
name|timestamp
expr_stmt|;
name|mousePressButton
operator|=
name|button
expr_stmt|;
name|mousePressX
operator|=
name|qt_last_x
expr_stmt|;
name|mousePressY
operator|=
name|qt_last_y
expr_stmt|;
block|}
block|}
else|else
name|type
operator|=
name|QEvent
operator|::
name|MouseButtonRelease
expr_stmt|;
block|}
if|if
condition|(
name|self
operator|->
name|inPopupMode
argument_list|()
condition|)
block|{
comment|//popup mouse handling is magical...
name|mouseWindow
operator|=
name|qApp
operator|->
name|activePopupWidget
argument_list|()
expr_stmt|;
name|implicit_mouse_grabber
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//### how should popup mode and implicit mouse grab interact?
block|}
elseif|else
if|if
condition|(
name|tlw
operator|&&
name|app_do_modal
operator|&&
operator|!
name|qt_try_modal
argument_list|(
name|tlw
argument_list|,
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|)
condition|)
block|{
comment|//even if we're blocked by modality, we should deliver the mouse release event..
comment|//### this code is not completely correct: multiple buttons can be pressed simultaneously
if|if
condition|(
operator|!
operator|(
name|implicit_mouse_grabber
operator|&&
name|buttons
operator|==
name|Qt
operator|::
name|NoButton
operator|)
condition|)
block|{
comment|//qDebug()<< "modal blocked mouse event to"<< tlw;
return|return;
block|}
block|}
comment|// find the tlw if we didn't get it from the plugin
if|if
condition|(
operator|!
name|mouseWindow
condition|)
block|{
name|mouseWindow
operator|=
name|QApplication
operator|::
name|topLevelAt
argument_list|(
name|globalPoint
operator|.
name|toPoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|mouseWindow
operator|&&
operator|!
name|implicit_mouse_grabber
condition|)
name|mouseWindow
operator|=
name|QApplication
operator|::
name|desktop
argument_list|()
expr_stmt|;
if|if
condition|(
name|mouseWindow
operator|&&
name|mouseWindow
operator|!=
name|tlw
condition|)
block|{
comment|//we did not get a sensible localPoint from the window system, so let's calculate it
name|localPoint
operator|=
name|mouseWindow
operator|->
name|mapFromGlobal
argument_list|(
name|globalPoint
operator|.
name|toPoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// which child should have it?
name|QWidget
modifier|*
name|mouseWidget
init|=
name|mouseWindow
decl_stmt|;
if|if
condition|(
name|mouseWindow
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|mouseWindow
operator|->
name|childAt
argument_list|(
name|localPoint
operator|.
name|toPoint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
condition|)
block|{
name|mouseWidget
operator|=
name|w
expr_stmt|;
block|}
block|}
comment|//handle implicit mouse grab
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonPress
operator|&&
operator|!
name|implicit_mouse_grabber
condition|)
block|{
name|implicit_mouse_grabber
operator|=
name|mouseWidget
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|mouseWindow
argument_list|)
expr_stmt|;
name|mouseWindow
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
comment|//focus
block|}
elseif|else
if|if
condition|(
name|implicit_mouse_grabber
condition|)
block|{
name|mouseWidget
operator|=
name|implicit_mouse_grabber
operator|.
name|data
argument_list|()
expr_stmt|;
name|mouseWindow
operator|=
name|mouseWidget
operator|->
name|window
argument_list|()
expr_stmt|;
if|if
condition|(
name|mouseWindow
operator|!=
name|tlw
condition|)
name|localPoint
operator|=
name|mouseWindow
operator|->
name|mapFromGlobal
argument_list|(
name|globalPoint
operator|.
name|toPoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|mouseWidget
argument_list|)
expr_stmt|;
comment|//localPoint is local to mouseWindow, but it needs to be local to mouseWidget
name|localPoint
operator|=
name|mouseWidget
operator|->
name|mapFrom
argument_list|(
name|mouseWindow
argument_list|,
name|localPoint
operator|.
name|toPoint
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|buttons
operator|==
name|Qt
operator|::
name|NoButton
condition|)
block|{
comment|//qDebug()<< "resetting mouse grabber";
name|implicit_mouse_grabber
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mouseWidget
operator|!=
name|qt_last_mouse_receiver
condition|)
block|{
name|dispatchEnterLeave
argument_list|(
name|mouseWidget
argument_list|,
name|qt_last_mouse_receiver
argument_list|)
expr_stmt|;
name|qt_last_mouse_receiver
operator|=
name|mouseWidget
expr_stmt|;
block|}
comment|// Remember, we might enter a modal event loop when sending the event,
comment|// so think carefully before adding code below this point.
comment|// qDebug()<< "sending mouse ev."<< ev.type()<< localPoint<< globalPoint<< ev.button()<< ev.buttons()<< mouseWidget<< "mouse grabber"<< implicit_mouse_grabber;
name|QMouseEvent
name|ev
argument_list|(
name|type
argument_list|,
name|localPoint
argument_list|,
name|globalPoint
argument_list|,
name|button
argument_list|,
name|buttons
argument_list|,
name|QApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QWeakPointer
argument_list|<
name|QPlatformCursor
argument_list|>
argument_list|>
name|cursors
init|=
name|QPlatformCursorPrivate
operator|::
name|getInstances
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|QWeakPointer
argument_list|<
name|QPlatformCursor
argument_list|>
name|cursor
decl|,
name|cursors
control|)
block|{
if|if
condition|(
name|cursor
condition|)
name|cursor
operator|.
name|data
argument_list|()
operator|->
name|pointerEvent
argument_list|(
name|ev
argument_list|)
expr_stmt|;
block|}
name|int
name|oldOpenPopupCount
init|=
name|openPopupCount
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|mouseWidget
argument_list|,
operator|&
name|ev
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonPress
operator|&&
name|button
operator|==
name|Qt
operator|::
name|RightButton
operator|&&
operator|(
name|openPopupCount
operator|==
name|oldOpenPopupCount
operator|)
condition|)
block|{
name|QContextMenuEvent
name|e
argument_list|(
name|QContextMenuEvent
operator|::
name|Mouse
argument_list|,
name|localPoint
operator|.
name|toPoint
argument_list|()
argument_list|,
name|globalPoint
operator|.
name|toPoint
argument_list|()
argument_list|,
name|QApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|mouseWidget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_CONTEXTMENU
block|}
end_function
begin_comment
comment|//### there's a lot of duplicated logic here -- refactoring required!
end_comment
begin_function
DECL|function|processWheelEvent
name|void
name|QApplicationPrivate
operator|::
name|processWheelEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|WheelEvent
modifier|*
name|e
parameter_list|)
block|{
comment|//    QPoint localPoint = ev.pos();
name|QPointF
name|globalPoint
init|=
name|e
operator|->
name|globalPos
decl_stmt|;
comment|//    bool trustLocalPoint = !!tlw; //is there something the local point can be local to?
name|QWidget
modifier|*
name|mouseWidget
decl_stmt|;
name|qt_last_x
operator|=
name|globalPoint
operator|.
name|x
argument_list|()
expr_stmt|;
name|qt_last_y
operator|=
name|globalPoint
operator|.
name|y
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|mouseWindow
init|=
name|e
operator|->
name|widget
operator|.
name|data
argument_list|()
decl_stmt|;
comment|// find the tlw if we didn't get it from the plugin
if|if
condition|(
operator|!
name|mouseWindow
condition|)
block|{
name|mouseWindow
operator|=
name|QApplication
operator|::
name|topLevelAt
argument_list|(
name|globalPoint
operator|.
name|toPoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|mouseWindow
condition|)
return|return;
name|mouseWidget
operator|=
name|mouseWindow
expr_stmt|;
if|if
condition|(
name|app_do_modal
operator|&&
operator|!
name|qt_try_modal
argument_list|(
name|mouseWindow
argument_list|,
name|QEvent
operator|::
name|Wheel
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"modal blocked wheel event"
operator|<<
name|mouseWindow
expr_stmt|;
return|return;
block|}
name|QPointF
name|p
init|=
name|mouseWindow
operator|->
name|mapFromGlobal
argument_list|(
name|globalPoint
operator|.
name|toPoint
argument_list|()
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|mouseWindow
operator|->
name|childAt
argument_list|(
name|p
operator|.
name|toPoint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
condition|)
block|{
name|mouseWidget
operator|=
name|w
expr_stmt|;
name|p
operator|=
name|mouseWidget
operator|->
name|mapFromGlobal
argument_list|(
name|globalPoint
operator|.
name|toPoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QWheelEvent
name|ev
argument_list|(
name|p
argument_list|,
name|globalPoint
argument_list|,
name|e
operator|->
name|delta
argument_list|,
name|buttons
argument_list|,
name|QApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|e
operator|->
name|orient
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|mouseWidget
argument_list|,
operator|&
name|ev
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Remember, Qt convention is:  keyboard state is state *before*
end_comment
begin_function
DECL|function|processKeyEvent
name|void
name|QApplicationPrivate
operator|::
name|processKeyEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|KeyEvent
modifier|*
name|e
parameter_list|)
block|{
name|QWidget
modifier|*
name|focusW
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|self
operator|->
name|inPopupMode
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|popupW
init|=
name|qApp
operator|->
name|activePopupWidget
argument_list|()
decl_stmt|;
name|focusW
operator|=
name|popupW
operator|->
name|focusWidget
argument_list|()
condition|?
name|popupW
operator|->
name|focusWidget
argument_list|()
else|:
name|popupW
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|focusW
condition|)
name|focusW
operator|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|focusW
condition|)
block|{
name|focusW
operator|=
name|e
operator|->
name|widget
operator|.
name|data
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|focusW
condition|)
name|focusW
operator|=
name|QApplication
operator|::
name|activeWindow
argument_list|()
expr_stmt|;
comment|//qDebug()<< "handleKeyEvent"<< hex<< e->key()<< e->modifiers()<< e->text()<< "widget"<< focusW;
if|if
condition|(
operator|!
name|focusW
condition|)
return|return;
if|if
condition|(
name|app_do_modal
operator|&&
operator|!
name|qt_try_modal
argument_list|(
name|focusW
argument_list|,
name|e
operator|->
name|keyType
argument_list|)
condition|)
return|return;
if|if
condition|(
name|e
operator|->
name|nativeScanCode
operator|||
name|e
operator|->
name|nativeVirtualKey
operator|||
name|e
operator|->
name|nativeModifiers
condition|)
block|{
name|QKeyEventEx
name|ev
argument_list|(
name|e
operator|->
name|keyType
argument_list|,
name|e
operator|->
name|key
argument_list|,
name|e
operator|->
name|modifiers
argument_list|,
name|e
operator|->
name|unicode
argument_list|,
name|e
operator|->
name|repeat
argument_list|,
name|e
operator|->
name|repeatCount
argument_list|,
name|e
operator|->
name|nativeScanCode
argument_list|,
name|e
operator|->
name|nativeVirtualKey
argument_list|,
name|e
operator|->
name|nativeModifiers
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|focusW
argument_list|,
operator|&
name|ev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QKeyEvent
name|ev
argument_list|(
name|e
operator|->
name|keyType
argument_list|,
name|e
operator|->
name|key
argument_list|,
name|e
operator|->
name|modifiers
argument_list|,
name|e
operator|->
name|unicode
argument_list|,
name|e
operator|->
name|repeat
argument_list|,
name|e
operator|->
name|repeatCount
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|focusW
argument_list|,
operator|&
name|ev
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|processEnterEvent
name|void
name|QApplicationPrivate
operator|::
name|processEnterEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|EnterEvent
modifier|*
name|e
parameter_list|)
block|{
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
name|e
operator|->
name|enter
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|qt_last_mouse_receiver
operator|=
name|e
operator|->
name|enter
operator|.
name|data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processLeaveEvent
name|void
name|QApplicationPrivate
operator|::
name|processLeaveEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|LeaveEvent
modifier|*
name|e
parameter_list|)
block|{
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
literal|0
argument_list|,
name|qt_last_mouse_receiver
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|leave
operator|.
name|data
argument_list|()
operator|&&
operator|!
name|e
operator|->
name|leave
operator|.
name|data
argument_list|()
operator|->
name|isAncestorOf
argument_list|(
name|qt_last_mouse_receiver
argument_list|)
condition|)
comment|//(???) this should not happen
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
literal|0
argument_list|,
name|e
operator|->
name|leave
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|qt_last_mouse_receiver
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processActivatedEvent
name|void
name|QApplicationPrivate
operator|::
name|processActivatedEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|ActivatedWindowEvent
modifier|*
name|e
parameter_list|)
block|{
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
name|e
operator|->
name|activated
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processGeometryChangeEvent
name|void
name|QApplicationPrivate
operator|::
name|processGeometryChangeEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|GeometryChangeEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|tlw
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|QWidget
modifier|*
name|tlw
init|=
name|e
operator|->
name|tlw
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tlw
operator|->
name|isWindow
argument_list|()
condition|)
return|return;
comment|//geo of native child widgets is controlled by lighthouse
comment|//so we already have sent the events; besides this new rect
comment|//is not mapped to parent
name|QRect
name|newRect
init|=
name|e
operator|->
name|newGeometry
decl_stmt|;
name|QRect
name|cr
argument_list|(
name|tlw
operator|->
name|geometry
argument_list|()
argument_list|)
decl_stmt|;
name|bool
name|isResize
init|=
name|cr
operator|.
name|size
argument_list|()
operator|!=
name|newRect
operator|.
name|size
argument_list|()
decl_stmt|;
name|bool
name|isMove
init|=
name|cr
operator|.
name|topLeft
argument_list|()
operator|!=
name|newRect
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|tlw
operator|->
name|data
operator|->
name|crect
operator|=
name|newRect
expr_stmt|;
if|if
condition|(
name|isResize
condition|)
block|{
name|QResizeEvent
name|e
argument_list|(
name|tlw
operator|->
name|data
operator|->
name|crect
operator|.
name|size
argument_list|()
argument_list|,
name|cr
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|tlw
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
name|tlw
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isMove
condition|)
block|{
comment|//### frame geometry
name|QMoveEvent
name|e
argument_list|(
name|tlw
operator|->
name|data
operator|->
name|crect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|cr
operator|.
name|topLeft
argument_list|()
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|tlw
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|processCloseEvent
name|void
name|QApplicationPrivate
operator|::
name|processCloseEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|CloseEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|topLevel
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|//qDebug()<< "QApplicationPrivate::processCloseEvent NULL";
return|return;
block|}
name|e
operator|->
name|topLevel
operator|.
name|data
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|close_helper
argument_list|(
name|QWidgetPrivate
operator|::
name|CloseWithSpontaneousEvent
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processTouchEvent
name|void
name|QApplicationPrivate
operator|::
name|processTouchEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|TouchEvent
modifier|*
name|e
parameter_list|)
block|{
name|translateRawTouchEvent
argument_list|(
name|e
operator|->
name|widget
operator|.
name|data
argument_list|()
argument_list|,
name|e
operator|->
name|devType
argument_list|,
name|e
operator|->
name|points
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reportScreenCount
name|void
name|QApplicationPrivate
operator|::
name|reportScreenCount
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenCountEvent
modifier|*
name|e
parameter_list|)
block|{
comment|// This operation only makes sense after the QApplication constructor runs
if|if
condition|(
name|QCoreApplication
operator|::
name|startingUp
argument_list|()
condition|)
return|return;
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|updateScreenList
argument_list|()
expr_stmt|;
comment|// signal anything listening for creation or deletion of screens
name|QDesktopWidget
modifier|*
name|desktop
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
decl_stmt|;
emit|emit
name|desktop
operator|->
name|screenCountChanged
argument_list|(
name|e
operator|->
name|count
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|reportGeometryChange
name|void
name|QApplicationPrivate
operator|::
name|reportGeometryChange
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenGeometryEvent
modifier|*
name|e
parameter_list|)
block|{
comment|// This operation only makes sense after the QApplication constructor runs
if|if
condition|(
name|QCoreApplication
operator|::
name|startingUp
argument_list|()
condition|)
return|return;
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|updateScreenList
argument_list|()
expr_stmt|;
comment|// signal anything listening for screen geometry changes
name|QDesktopWidget
modifier|*
name|desktop
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
decl_stmt|;
emit|emit
name|desktop
operator|->
name|resized
argument_list|(
name|e
operator|->
name|index
argument_list|)
emit|;
comment|// make sure maximized and fullscreen windows are updated
name|QWidgetList
name|list
init|=
name|QApplication
operator|::
name|topLevelWidgets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|isFullScreen
argument_list|()
condition|)
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|setFullScreenSize_helper
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|w
operator|->
name|isMaximized
argument_list|()
condition|)
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|setMaxWindowState_helper
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|reportAvailableGeometryChange
name|void
name|QApplicationPrivate
operator|::
name|reportAvailableGeometryChange
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenAvailableGeometryEvent
modifier|*
name|e
parameter_list|)
block|{
comment|// This operation only makes sense after the QApplication constructor runs
if|if
condition|(
name|QCoreApplication
operator|::
name|startingUp
argument_list|()
condition|)
return|return;
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|updateScreenList
argument_list|()
expr_stmt|;
comment|// signal anything listening for screen geometry changes
name|QDesktopWidget
modifier|*
name|desktop
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
decl_stmt|;
emit|emit
name|desktop
operator|->
name|workAreaResized
argument_list|(
name|e
operator|->
name|index
argument_list|)
emit|;
comment|// make sure maximized and fullscreen windows are updated
name|QWidgetList
name|list
init|=
name|QApplication
operator|::
name|topLevelWidgets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|isFullScreen
argument_list|()
condition|)
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|setFullScreenSize_helper
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|w
operator|->
name|isMaximized
argument_list|()
condition|)
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|setMaxWindowState_helper
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
