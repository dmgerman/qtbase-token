begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|// #define QCLIPBOARD_DEBUG
end_comment
begin_comment
comment|// #define QCLIPBOARD_DEBUG_VERBOSE
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QCLIPBOARD_DEBUG
end_ifdef
begin_define
DECL|macro|DEBUG
define|#
directive|define
name|DEBUG
value|qDebug
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|DEBUG
define|#
directive|define
name|DEBUG
value|if (false) qDebug
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QCLIPBOARD_DEBUG_VERBOSE
end_ifdef
begin_define
DECL|macro|VDEBUG
define|#
directive|define
name|VDEBUG
value|qDebug
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|VDEBUG
define|#
directive|define
name|VDEBUG
value|if (false) qDebug
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qclipboard.h"
end_include
begin_include
include|#
directive|include
file|"qclipboard_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_include
include|#
directive|include
file|"qabstracteventdispatcher.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qiodevice.h"
end_include
begin_include
include|#
directive|include
file|"qbuffer.h"
end_include
begin_include
include|#
directive|include
file|"qtextcodec.h"
end_include
begin_include
include|#
directive|include
file|"qlist.h"
end_include
begin_include
include|#
directive|include
file|"qmap.h"
end_include
begin_include
include|#
directive|include
file|"qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qt_x11_p.h"
end_include
begin_include
include|#
directive|include
file|"qx11info_x11.h"
end_include
begin_include
include|#
directive|include
file|"qimagewriter.h"
end_include
begin_include
include|#
directive|include
file|"qelapsedtimer.h"
end_include
begin_include
include|#
directive|include
file|"qvariant.h"
end_include
begin_include
include|#
directive|include
file|"qdnd_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_XFIXES
end_ifndef
begin_include
include|#
directive|include
file|<X11/extensions/Xfixes.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_XFIXES
end_comment
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|/*****************************************************************************   Internal QClipboard functions for X11.  *****************************************************************************/
DECL|variable|clipboard_timeout
specifier|static
name|int
name|clipboard_timeout
init|=
literal|5000
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|clipboard_timeout
comment|// 5s timeout on clipboard operations
end_comment
begin_decl_stmt
DECL|variable|owner
specifier|static
name|QWidget
modifier|*
name|owner
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|requestor
specifier|static
name|QWidget
modifier|*
name|requestor
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|timer_event_clear
specifier|static
name|bool
name|timer_event_clear
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|timer_id
specifier|static
name|int
name|timer_id
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pending_timer_id
specifier|static
name|int
name|pending_timer_id
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pending_clipboard_changed
specifier|static
name|bool
name|pending_clipboard_changed
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pending_selection_changed
specifier|static
name|bool
name|pending_selection_changed
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_comment
comment|// event capture mechanism for qt_xclb_wait_for_event
end_comment
begin_decl_stmt
DECL|variable|waiting_for_data
specifier|static
name|bool
name|waiting_for_data
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|has_captured_event
specifier|static
name|bool
name|has_captured_event
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|capture_event_win
specifier|static
name|Window
name|capture_event_win
init|=
name|XNone
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|capture_event_type
specifier|static
name|int
name|capture_event_type
init|=
operator|-
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|captured_event
specifier|static
name|XEvent
name|captured_event
decl_stmt|;
end_decl_stmt
begin_class_decl
class_decl|class
name|QClipboardWatcher
class_decl|;
end_class_decl
begin_comment
comment|// forward decl
end_comment
begin_decl_stmt
DECL|variable|selection_watcher
specifier|static
name|QClipboardWatcher
modifier|*
name|selection_watcher
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|clipboard_watcher
specifier|static
name|QClipboardWatcher
modifier|*
name|clipboard_watcher
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|cleanup
specifier|static
name|void
name|cleanup
parameter_list|()
block|{
operator|delete
name|owner
expr_stmt|;
operator|delete
name|requestor
expr_stmt|;
name|owner
operator|=
literal|0
expr_stmt|;
name|requestor
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
specifier|static
DECL|function|setupOwner
name|void
name|setupOwner
parameter_list|()
block|{
if|if
condition|(
name|owner
condition|)
return|return;
name|owner
operator|=
operator|new
name|QWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|owner
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"internal clipboard owner"
argument_list|)
argument_list|)
expr_stmt|;
name|owner
operator|->
name|createWinId
argument_list|()
expr_stmt|;
name|requestor
operator|=
operator|new
name|QWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|requestor
operator|->
name|createWinId
argument_list|()
expr_stmt|;
name|requestor
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"internal clipboard requestor"
argument_list|)
argument_list|)
expr_stmt|;
comment|// We don't need this internal widgets to appear in QApplication::topLevelWidgets()
if|if
condition|(
name|QWidgetPrivate
operator|::
name|allWidgets
condition|)
block|{
name|QWidgetPrivate
operator|::
name|allWidgets
operator|->
name|remove
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|QWidgetPrivate
operator|::
name|allWidgets
operator|->
name|remove
argument_list|(
name|requestor
argument_list|)
expr_stmt|;
block|}
name|qAddPostRoutine
argument_list|(
name|cleanup
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QClipboardWatcher
class|class
name|QClipboardWatcher
super|:
specifier|public
name|QInternalMimeData
block|{
public|public:
name|QClipboardWatcher
parameter_list|(
name|QClipboard
operator|::
name|Mode
name|mode
parameter_list|)
constructor_decl|;
name|~
name|QClipboardWatcher
parameter_list|()
destructor_decl|;
name|bool
name|empty
parameter_list|()
specifier|const
function_decl|;
specifier|virtual
name|bool
name|hasFormat_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimetype
parameter_list|)
specifier|const
function_decl|;
specifier|virtual
name|QStringList
name|formats_sys
parameter_list|()
specifier|const
function_decl|;
name|QVariant
name|retrieveData_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimetype
parameter_list|,
name|QVariant
operator|::
name|Type
name|type
parameter_list|)
specifier|const
function_decl|;
name|QByteArray
name|getDataInFormat
parameter_list|(
name|Atom
name|fmtatom
parameter_list|)
specifier|const
function_decl|;
DECL|member|atom
name|Atom
name|atom
decl_stmt|;
DECL|member|formatList
specifier|mutable
name|QStringList
name|formatList
decl_stmt|;
DECL|member|format_atoms
specifier|mutable
name|QByteArray
name|format_atoms
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QClipboardData
class|class
name|QClipboardData
block|{
private|private:
DECL|function|mimeDataRef
name|QMimeData
modifier|*
modifier|&
name|mimeDataRef
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|mode
operator|==
name|QClipboard
operator|::
name|Selection
condition|)
return|return
name|selectionData
return|;
return|return
name|clipboardData
return|;
block|}
public|public:
name|QClipboardData
parameter_list|(
name|QClipboard
operator|::
name|Mode
name|mode
parameter_list|)
constructor_decl|;
name|~
name|QClipboardData
parameter_list|()
destructor_decl|;
DECL|function|setSource
name|void
name|setSource
parameter_list|(
name|QMimeData
modifier|*
name|s
parameter_list|)
block|{
if|if
condition|(
operator|(
name|mode
operator|==
name|QClipboard
operator|::
name|Selection
operator|&&
name|selectionData
operator|==
name|s
operator|)
operator|||
name|clipboardData
operator|==
name|s
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|selectionData
operator|!=
name|clipboardData
condition|)
block|{
operator|delete
name|mimeDataRef
argument_list|()
expr_stmt|;
block|}
name|mimeDataRef
argument_list|()
operator|=
name|s
expr_stmt|;
block|}
DECL|function|source
name|QMimeData
modifier|*
name|source
parameter_list|()
specifier|const
block|{
return|return
name|mimeDataRef
argument_list|()
return|;
block|}
DECL|function|clear
name|void
name|clear
parameter_list|()
block|{
name|timestamp
operator|=
name|CurrentTime
expr_stmt|;
if|if
condition|(
name|selectionData
operator|==
name|clipboardData
condition|)
block|{
name|mimeDataRef
argument_list|()
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|QMimeData
modifier|*
modifier|&
name|src
init|=
name|mimeDataRef
argument_list|()
decl_stmt|;
operator|delete
name|src
expr_stmt|;
name|src
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|member|selectionData
specifier|static
name|QMimeData
modifier|*
name|selectionData
decl_stmt|;
DECL|member|clipboardData
specifier|static
name|QMimeData
modifier|*
name|clipboardData
decl_stmt|;
DECL|member|timestamp
name|Time
name|timestamp
decl_stmt|;
DECL|member|mode
name|QClipboard
operator|::
name|Mode
name|mode
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|selectionData
name|QMimeData
modifier|*
name|QClipboardData
operator|::
name|selectionData
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|clipboardData
name|QMimeData
modifier|*
name|QClipboardData
operator|::
name|clipboardData
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QClipboardData
name|QClipboardData
operator|::
name|QClipboardData
parameter_list|(
name|QClipboard
operator|::
name|Mode
name|clipboardMode
parameter_list|)
block|{
name|timestamp
operator|=
name|CurrentTime
expr_stmt|;
name|mode
operator|=
name|clipboardMode
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QClipboardData
name|QClipboardData
operator|::
name|~
name|QClipboardData
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_decl_stmt
DECL|variable|internalCbData
specifier|static
name|QClipboardData
modifier|*
name|internalCbData
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|internalSelData
specifier|static
name|QClipboardData
modifier|*
name|internalSelData
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|cleanupClipboardData
specifier|static
name|void
name|cleanupClipboardData
parameter_list|()
block|{
operator|delete
name|internalCbData
expr_stmt|;
name|internalCbData
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clipboardData
specifier|static
name|QClipboardData
modifier|*
name|clipboardData
parameter_list|()
block|{
if|if
condition|(
name|internalCbData
operator|==
literal|0
condition|)
block|{
name|internalCbData
operator|=
operator|new
name|QClipboardData
argument_list|(
name|QClipboard
operator|::
name|Clipboard
argument_list|)
expr_stmt|;
name|qAddPostRoutine
argument_list|(
name|cleanupClipboardData
argument_list|)
expr_stmt|;
block|}
return|return
name|internalCbData
return|;
block|}
end_function
begin_function
DECL|function|cleanupSelectionData
specifier|static
name|void
name|cleanupSelectionData
parameter_list|()
block|{
operator|delete
name|internalSelData
expr_stmt|;
name|internalSelData
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectionData
specifier|static
name|QClipboardData
modifier|*
name|selectionData
parameter_list|()
block|{
if|if
condition|(
name|internalSelData
operator|==
literal|0
condition|)
block|{
name|internalSelData
operator|=
operator|new
name|QClipboardData
argument_list|(
name|QClipboard
operator|::
name|Selection
argument_list|)
expr_stmt|;
name|qAddPostRoutine
argument_list|(
name|cleanupSelectionData
argument_list|)
expr_stmt|;
block|}
return|return
name|internalSelData
return|;
block|}
end_function
begin_class
DECL|class|QClipboardINCRTransaction
class|class
name|QClipboardINCRTransaction
block|{
public|public:
name|QClipboardINCRTransaction
parameter_list|(
name|Window
name|w
parameter_list|,
name|Atom
name|p
parameter_list|,
name|Atom
name|t
parameter_list|,
name|int
name|f
parameter_list|,
name|QByteArray
name|d
parameter_list|,
name|unsigned
name|int
name|i
parameter_list|)
constructor_decl|;
name|~
name|QClipboardINCRTransaction
parameter_list|(
name|void
parameter_list|)
destructor_decl|;
name|int
name|x11Event
parameter_list|(
name|XEvent
modifier|*
name|event
parameter_list|)
function_decl|;
DECL|member|window
name|Window
name|window
decl_stmt|;
DECL|member|property
DECL|member|target
name|Atom
name|property
decl_stmt|,
name|target
decl_stmt|;
DECL|member|format
name|int
name|format
decl_stmt|;
DECL|member|data
name|QByteArray
name|data
decl_stmt|;
DECL|member|increment
name|unsigned
name|int
name|increment
decl_stmt|;
DECL|member|offset
name|unsigned
name|int
name|offset
decl_stmt|;
block|}
class|;
end_class
begin_typedef
DECL|typedef|TransactionMap
typedef|typedef
name|QMap
argument_list|<
name|Window
argument_list|,
name|QClipboardINCRTransaction
modifier|*
argument_list|>
name|TransactionMap
typedef|;
end_typedef
begin_decl_stmt
DECL|variable|transactions
specifier|static
name|TransactionMap
modifier|*
name|transactions
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|prev_event_filter
specifier|static
name|QApplication
operator|::
name|EventFilter
name|prev_event_filter
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|incr_timer_id
specifier|static
name|int
name|incr_timer_id
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_x11_incr_event_filter
specifier|static
name|bool
name|qt_x11_incr_event_filter
parameter_list|(
name|void
modifier|*
name|message
parameter_list|,
name|long
modifier|*
name|result
parameter_list|)
block|{
name|XEvent
modifier|*
name|event
init|=
cast|reinterpret_cast
argument_list|<
name|XEvent
operator|*
argument_list|>
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|TransactionMap
operator|::
name|Iterator
name|it
init|=
name|transactions
operator|->
name|find
argument_list|(
name|event
operator|->
name|xany
operator|.
name|window
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|transactions
operator|->
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|->
name|x11Event
argument_list|(
name|event
argument_list|)
operator|!=
literal|0
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|prev_event_filter
condition|)
return|return
name|prev_event_filter
argument_list|(
name|event
argument_list|,
name|result
argument_list|)
return|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*   called when no INCR activity has happened for 'clipboard_timeout'   milliseconds... we assume that all unfinished transactions have   timed out and remove everything from the transaction map */
end_comment
begin_function
DECL|function|qt_xclb_incr_timeout
specifier|static
name|void
name|qt_xclb_incr_timeout
parameter_list|(
name|void
parameter_list|)
block|{
name|qWarning
argument_list|(
literal|"QClipboard: Timed out while sending data"
argument_list|)
expr_stmt|;
while|while
condition|(
name|transactions
condition|)
operator|delete
operator|*
name|transactions
operator|->
name|begin
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QClipboardINCRTransaction
name|QClipboardINCRTransaction
operator|::
name|QClipboardINCRTransaction
parameter_list|(
name|Window
name|w
parameter_list|,
name|Atom
name|p
parameter_list|,
name|Atom
name|t
parameter_list|,
name|int
name|f
parameter_list|,
name|QByteArray
name|d
parameter_list|,
name|unsigned
name|int
name|i
parameter_list|)
member_init_list|:
name|window
argument_list|(
name|w
argument_list|)
member_init_list|,
name|property
argument_list|(
name|p
argument_list|)
member_init_list|,
name|target
argument_list|(
name|t
argument_list|)
member_init_list|,
name|format
argument_list|(
name|f
argument_list|)
member_init_list|,
name|data
argument_list|(
name|d
argument_list|)
member_init_list|,
name|increment
argument_list|(
name|i
argument_list|)
member_init_list|,
name|offset
argument_list|(
literal|0u
argument_list|)
block|{
name|DEBUG
argument_list|(
literal|"QClipboard: sending %d bytes (INCR transaction %p)"
argument_list|,
name|d
operator|.
name|size
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|XSelectInput
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|window
argument_list|,
name|PropertyChangeMask
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|transactions
condition|)
block|{
name|VDEBUG
argument_list|(
literal|"QClipboard: created INCR transaction map"
argument_list|)
expr_stmt|;
name|transactions
operator|=
operator|new
name|TransactionMap
expr_stmt|;
name|prev_event_filter
operator|=
name|qApp
operator|->
name|setEventFilter
argument_list|(
name|qt_x11_incr_event_filter
argument_list|)
expr_stmt|;
name|incr_timer_id
operator|=
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|startTimer
argument_list|(
name|clipboard_timeout
argument_list|)
expr_stmt|;
block|}
name|transactions
operator|->
name|insert
argument_list|(
name|window
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QClipboardINCRTransaction
name|QClipboardINCRTransaction
operator|::
name|~
name|QClipboardINCRTransaction
parameter_list|(
name|void
parameter_list|)
block|{
name|VDEBUG
argument_list|(
literal|"QClipboard: destroyed INCR transacton %p"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|XSelectInput
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|window
argument_list|,
name|NoEventMask
argument_list|)
expr_stmt|;
name|transactions
operator|->
name|remove
argument_list|(
name|window
argument_list|)
expr_stmt|;
if|if
condition|(
name|transactions
operator|->
name|isEmpty
argument_list|()
condition|)
block|{
name|VDEBUG
argument_list|(
literal|"QClipboard: no more INCR transactions"
argument_list|)
expr_stmt|;
operator|delete
name|transactions
expr_stmt|;
name|transactions
operator|=
literal|0
expr_stmt|;
operator|(
name|void
operator|)
name|qApp
operator|->
name|setEventFilter
argument_list|(
name|prev_event_filter
argument_list|)
expr_stmt|;
if|if
condition|(
name|incr_timer_id
operator|!=
literal|0
condition|)
block|{
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|killTimer
argument_list|(
name|incr_timer_id
argument_list|)
expr_stmt|;
name|incr_timer_id
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
end_destructor
begin_function
DECL|function|x11Event
name|int
name|QClipboardINCRTransaction
operator|::
name|x11Event
parameter_list|(
name|XEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
operator|!=
name|PropertyNotify
operator|||
operator|(
name|event
operator|->
name|xproperty
operator|.
name|state
operator|!=
name|PropertyDelete
operator|||
name|event
operator|->
name|xproperty
operator|.
name|atom
operator|!=
name|property
operator|)
condition|)
return|return
literal|0
return|;
comment|// restart the INCR timer
if|if
condition|(
name|incr_timer_id
condition|)
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|killTimer
argument_list|(
name|incr_timer_id
argument_list|)
expr_stmt|;
name|incr_timer_id
operator|=
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|startTimer
argument_list|(
name|clipboard_timeout
argument_list|)
expr_stmt|;
name|unsigned
name|int
name|bytes_left
init|=
name|data
operator|.
name|size
argument_list|()
operator|-
name|offset
decl_stmt|;
if|if
condition|(
name|bytes_left
operator|>
literal|0
condition|)
block|{
name|unsigned
name|int
name|xfer
init|=
name|qMin
argument_list|(
name|increment
argument_list|,
name|bytes_left
argument_list|)
decl_stmt|;
name|VDEBUG
argument_list|(
literal|"QClipboard: sending %d bytes, %d remaining (INCR transaction %p)"
argument_list|,
name|xfer
argument_list|,
name|bytes_left
operator|-
name|xfer
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|window
argument_list|,
name|property
argument_list|,
name|target
argument_list|,
name|format
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|uchar
operator|*
operator|)
name|data
operator|.
name|data
argument_list|()
operator|+
name|offset
argument_list|,
name|xfer
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|xfer
expr_stmt|;
block|}
else|else
block|{
comment|// INCR transaction finished...
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|window
argument_list|,
name|property
argument_list|,
name|target
argument_list|,
name|format
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|uchar
operator|*
operator|)
name|data
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|this
expr_stmt|;
block|}
return|return
literal|1
return|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   QClipboard member functions for X11.  *****************************************************************************/
end_comment
begin_struct
DECL|struct|qt_init_timestamp_data
struct|struct
name|qt_init_timestamp_data
block|{
DECL|member|timestamp
name|Time
name|timestamp
decl_stmt|;
block|}
struct|;
end_struct
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_C_CALLBACKS
argument_list|)
end_if
begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
DECL|function|qt_init_timestamp_scanner
specifier|static
name|Bool
name|qt_init_timestamp_scanner
parameter_list|(
name|Display
modifier|*
parameter_list|,
name|XEvent
modifier|*
name|event
parameter_list|,
name|XPointer
name|arg
parameter_list|)
block|{
name|qt_init_timestamp_data
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|qt_init_timestamp_data
operator|*
argument_list|>
argument_list|(
name|arg
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
condition|)
block|{
case|case
name|ButtonPress
case|:
case|case
name|ButtonRelease
case|:
name|data
operator|->
name|timestamp
operator|=
name|event
operator|->
name|xbutton
operator|.
name|time
expr_stmt|;
break|break;
case|case
name|MotionNotify
case|:
name|data
operator|->
name|timestamp
operator|=
name|event
operator|->
name|xmotion
operator|.
name|time
expr_stmt|;
break|break;
case|case
name|XKeyPress
case|:
case|case
name|XKeyRelease
case|:
name|data
operator|->
name|timestamp
operator|=
name|event
operator|->
name|xkey
operator|.
name|time
expr_stmt|;
break|break;
case|case
name|PropertyNotify
case|:
name|data
operator|->
name|timestamp
operator|=
name|event
operator|->
name|xproperty
operator|.
name|time
expr_stmt|;
break|break;
case|case
name|EnterNotify
case|:
case|case
name|LeaveNotify
case|:
name|data
operator|->
name|timestamp
operator|=
name|event
operator|->
name|xcrossing
operator|.
name|time
expr_stmt|;
break|break;
case|case
name|SelectionClear
case|:
name|data
operator|->
name|timestamp
operator|=
name|event
operator|->
name|xselectionclear
operator|.
name|time
expr_stmt|;
break|break;
default|default:
break|break;
block|}
ifndef|#
directive|ifndef
name|QT_NO_XFIXES
if|if
condition|(
name|X11
operator|->
name|use_xfixes
operator|&&
name|event
operator|->
name|type
operator|==
operator|(
name|X11
operator|->
name|xfixes_eventbase
operator|+
name|XFixesSelectionNotify
operator|)
condition|)
block|{
name|XFixesSelectionNotifyEvent
modifier|*
name|req
init|=
cast|reinterpret_cast
argument_list|<
name|XFixesSelectionNotifyEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|data
operator|->
name|timestamp
operator|=
name|req
operator|->
name|selection_timestamp
expr_stmt|;
block|}
endif|#
directive|endif
return|return
literal|false
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_C_CALLBACKS
argument_list|)
block|}
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QClipboard
name|QClipboard
operator|::
name|QClipboard
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QClipboardPrivate
argument_list|,
name|parent
argument_list|)
block|{
comment|// create desktop widget since we need it to get PropertyNotify or
comment|// XFixesSelectionNotify events when someone changes the
comment|// clipboard.
operator|(
name|void
operator|)
name|QApplication
operator|::
name|desktop
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XFIXES
if|if
condition|(
name|X11
operator|->
name|use_xfixes
operator|&&
name|X11
operator|->
name|ptrXFixesSelectSelectionInput
condition|)
block|{
specifier|const
name|unsigned
name|long
name|eventMask
init|=
name|XFixesSetSelectionOwnerNotifyMask
operator||
name|XFixesSelectionWindowDestroyNotifyMask
operator||
name|XFixesSelectionClientCloseNotifyMask
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|X11
operator|->
name|screenCount
condition|;
operator|++
name|i
control|)
block|{
name|X11
operator|->
name|ptrXFixesSelectSelectionInput
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|(
name|i
argument_list|)
argument_list|,
name|XA_PRIMARY
argument_list|,
name|eventMask
argument_list|)
expr_stmt|;
name|X11
operator|->
name|ptrXFixesSelectSelectionInput
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|(
name|i
argument_list|)
argument_list|,
name|ATOM
argument_list|(
name|CLIPBOARD
argument_list|)
argument_list|,
name|eventMask
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_XFIXES
if|if
condition|(
name|X11
operator|->
name|time
operator|==
name|CurrentTime
condition|)
block|{
comment|// send a dummy event to myself to get the timestamp from X11.
name|qt_init_timestamp_data
name|data
decl_stmt|;
name|data
operator|.
name|timestamp
operator|=
name|CurrentTime
expr_stmt|;
name|XEvent
name|ev
decl_stmt|;
name|XCheckIfEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|ev
argument_list|,
operator|&
name|qt_init_timestamp_scanner
argument_list|,
operator|(
name|XPointer
operator|)
operator|&
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|timestamp
operator|==
name|CurrentTime
condition|)
block|{
name|setupOwner
argument_list|()
expr_stmt|;
comment|// We need this value just for completeness, we don't use it.
name|long
name|dummy
init|=
literal|0
decl_stmt|;
name|Window
name|ownerId
init|=
name|owner
operator|->
name|internalWinId
argument_list|()
decl_stmt|;
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|ownerId
argument_list|,
name|ATOM
argument_list|(
name|CLIP_TEMPORARY
argument_list|)
argument_list|,
name|XA_INTEGER
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|uchar
operator|*
operator|)
operator|&
name|dummy
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|XWindowEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|ownerId
argument_list|,
name|PropertyChangeMask
argument_list|,
operator|&
name|ev
argument_list|)
expr_stmt|;
name|data
operator|.
name|timestamp
operator|=
name|ev
operator|.
name|xproperty
operator|.
name|time
expr_stmt|;
name|XDeleteProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|ownerId
argument_list|,
name|ATOM
argument_list|(
name|CLIP_TEMPORARY
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|X11
operator|->
name|time
operator|=
name|data
operator|.
name|timestamp
expr_stmt|;
block|}
block|}
end_constructor
begin_function
DECL|function|clear
name|void
name|QClipboard
operator|::
name|clear
parameter_list|(
name|Mode
name|mode
parameter_list|)
block|{
name|setMimeData
argument_list|(
literal|0
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|supportsMode
name|bool
name|QClipboard
operator|::
name|supportsMode
parameter_list|(
name|Mode
name|mode
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|mode
operator|==
name|Clipboard
operator|||
name|mode
operator|==
name|Selection
operator|)
return|;
block|}
end_function
begin_function
DECL|function|ownsMode
name|bool
name|QClipboard
operator|::
name|ownsMode
parameter_list|(
name|Mode
name|mode
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|mode
operator|==
name|Clipboard
condition|)
return|return
name|clipboardData
argument_list|()
operator|->
name|timestamp
operator|!=
name|CurrentTime
return|;
elseif|else
if|if
condition|(
name|mode
operator|==
name|Selection
condition|)
return|return
name|selectionData
argument_list|()
operator|->
name|timestamp
operator|!=
name|CurrentTime
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|// event filter function... captures interesting events while
end_comment
begin_comment
comment|// qt_xclb_wait_for_event is running the event loop
end_comment
begin_function
DECL|function|qt_x11_clipboard_event_filter
specifier|static
name|bool
name|qt_x11_clipboard_event_filter
parameter_list|(
name|void
modifier|*
name|message
parameter_list|,
name|long
modifier|*
parameter_list|)
block|{
name|XEvent
modifier|*
name|event
init|=
cast|reinterpret_cast
argument_list|<
name|XEvent
operator|*
argument_list|>
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|xany
operator|.
name|type
operator|==
name|capture_event_type
operator|&&
name|event
operator|->
name|xany
operator|.
name|window
operator|==
name|capture_event_win
condition|)
block|{
name|VDEBUG
argument_list|(
literal|"QClipboard: event_filter(): caught event type %d"
argument_list|,
name|event
operator|->
name|type
argument_list|)
expr_stmt|;
name|has_captured_event
operator|=
literal|true
expr_stmt|;
name|captured_event
operator|=
operator|*
name|event
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|checkForClipboardEvents
specifier|static
name|Bool
name|checkForClipboardEvents
parameter_list|(
name|Display
modifier|*
parameter_list|,
name|XEvent
modifier|*
name|e
parameter_list|,
name|XPointer
parameter_list|)
block|{
return|return
operator|(
operator|(
name|e
operator|->
name|type
operator|==
name|SelectionRequest
operator|&&
operator|(
name|e
operator|->
name|xselectionrequest
operator|.
name|selection
operator|==
name|XA_PRIMARY
operator|||
name|e
operator|->
name|xselectionrequest
operator|.
name|selection
operator|==
name|ATOM
argument_list|(
name|CLIPBOARD
argument_list|)
operator|)
operator|)
operator|||
operator|(
name|e
operator|->
name|type
operator|==
name|SelectionClear
operator|&&
operator|(
name|e
operator|->
name|xselectionclear
operator|.
name|selection
operator|==
name|XA_PRIMARY
operator|||
name|e
operator|->
name|xselectionclear
operator|.
name|selection
operator|==
name|ATOM
argument_list|(
name|CLIPBOARD
argument_list|)
operator|)
operator|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|clipboardWaitForEvent
name|bool
name|QX11Data
operator|::
name|clipboardWaitForEvent
parameter_list|(
name|Window
name|win
parameter_list|,
name|int
name|type
parameter_list|,
name|XEvent
modifier|*
name|event
parameter_list|,
name|int
name|timeout
parameter_list|)
block|{
name|QElapsedTimer
name|started
decl_stmt|;
name|started
operator|.
name|start
argument_list|()
expr_stmt|;
name|QElapsedTimer
name|now
init|=
name|started
decl_stmt|;
if|if
condition|(
name|QAbstractEventDispatcher
operator|::
name|instance
argument_list|()
operator|->
name|inherits
argument_list|(
literal|"QtMotif"
argument_list|)
operator|||
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|property
argument_list|(
literal|"useEventLoopWhenWaiting"
argument_list|)
operator|.
name|toBool
argument_list|()
condition|)
block|{
if|if
condition|(
name|waiting_for_data
condition|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
literal|"QClipboard: internal error, qt_xclb_wait_for_event recursed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|waiting_for_data
operator|=
literal|true
expr_stmt|;
name|has_captured_event
operator|=
literal|false
expr_stmt|;
name|capture_event_win
operator|=
name|win
expr_stmt|;
name|capture_event_type
operator|=
name|type
expr_stmt|;
name|QApplication
operator|::
name|EventFilter
name|old_event_filter
init|=
name|qApp
operator|->
name|setEventFilter
argument_list|(
name|qt_x11_clipboard_event_filter
argument_list|)
decl_stmt|;
do|do
block|{
if|if
condition|(
name|XCheckTypedWindowEvent
argument_list|(
name|display
argument_list|,
name|win
argument_list|,
name|type
argument_list|,
name|event
argument_list|)
condition|)
block|{
name|waiting_for_data
operator|=
literal|false
expr_stmt|;
name|qApp
operator|->
name|setEventFilter
argument_list|(
name|old_event_filter
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|XSync
argument_list|(
name|X11
operator|->
name|display
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|usleep
argument_list|(
literal|50000
argument_list|)
expr_stmt|;
name|now
operator|.
name|start
argument_list|()
expr_stmt|;
name|QEventLoop
operator|::
name|ProcessEventsFlags
name|flags
argument_list|(
name|QEventLoop
operator|::
name|ExcludeUserInputEvents
operator||
name|QEventLoop
operator|::
name|ExcludeSocketNotifiers
operator||
name|QEventLoop
operator|::
name|WaitForMoreEvents
operator||
name|QEventLoop
operator|::
name|X11ExcludeTimers
argument_list|)
decl_stmt|;
name|QAbstractEventDispatcher
modifier|*
name|eventDispatcher
init|=
name|QAbstractEventDispatcher
operator|::
name|instance
argument_list|()
decl_stmt|;
name|eventDispatcher
operator|->
name|processEvents
argument_list|(
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
name|has_captured_event
condition|)
block|{
name|waiting_for_data
operator|=
literal|false
expr_stmt|;
operator|*
name|event
operator|=
name|captured_event
expr_stmt|;
name|qApp
operator|->
name|setEventFilter
argument_list|(
name|old_event_filter
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
do|while
condition|(
name|started
operator|.
name|msecsTo
argument_list|(
name|now
argument_list|)
operator|<
name|timeout
condition|)
do|;
name|waiting_for_data
operator|=
literal|false
expr_stmt|;
name|qApp
operator|->
name|setEventFilter
argument_list|(
name|old_event_filter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
do|do
block|{
if|if
condition|(
name|XCheckTypedWindowEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|win
argument_list|,
name|type
argument_list|,
name|event
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// process other clipboard events, since someone is probably requesting data from us
name|XEvent
name|e
decl_stmt|;
if|if
condition|(
name|XCheckIfEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|e
argument_list|,
name|checkForClipboardEvents
argument_list|,
literal|0
argument_list|)
condition|)
name|qApp
operator|->
name|x11ProcessEvent
argument_list|(
operator|&
name|e
argument_list|)
expr_stmt|;
name|now
operator|.
name|start
argument_list|()
expr_stmt|;
name|XFlush
argument_list|(
name|X11
operator|->
name|display
argument_list|)
expr_stmt|;
comment|// sleep 50 ms, so we don't use up CPU cycles all the time.
name|struct
name|timeval
name|usleep_tv
decl_stmt|;
name|usleep_tv
operator|.
name|tv_sec
operator|=
literal|0
expr_stmt|;
name|usleep_tv
operator|.
name|tv_usec
operator|=
literal|50000
expr_stmt|;
name|select
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|usleep_tv
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|started
operator|.
name|msecsTo
argument_list|(
name|now
argument_list|)
operator|<
name|timeout
condition|)
do|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|maxSelectionIncr
specifier|static
specifier|inline
name|int
name|maxSelectionIncr
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|)
block|{
return|return
name|XMaxRequestSize
argument_list|(
name|dpy
argument_list|)
operator|>
literal|65536
condition|?
literal|65536
operator|*
literal|4
else|:
name|XMaxRequestSize
argument_list|(
name|dpy
argument_list|)
operator|*
literal|4
operator|-
literal|100
return|;
block|}
end_function
begin_function
DECL|function|clipboardReadProperty
name|bool
name|QX11Data
operator|::
name|clipboardReadProperty
parameter_list|(
name|Window
name|win
parameter_list|,
name|Atom
name|property
parameter_list|,
name|bool
name|deleteProperty
parameter_list|,
name|QByteArray
modifier|*
name|buffer
parameter_list|,
name|int
modifier|*
name|size
parameter_list|,
name|Atom
modifier|*
name|type
parameter_list|,
name|int
modifier|*
name|format
parameter_list|)
block|{
name|int
name|maxsize
init|=
name|maxSelectionIncr
argument_list|(
name|display
argument_list|)
decl_stmt|;
name|ulong
name|bytes_left
decl_stmt|;
comment|// bytes_after
name|ulong
name|length
decl_stmt|;
comment|// nitems
name|uchar
modifier|*
name|data
decl_stmt|;
name|Atom
name|dummy_type
decl_stmt|;
name|int
name|dummy_format
decl_stmt|;
name|int
name|r
decl_stmt|;
if|if
condition|(
operator|!
name|type
condition|)
comment|// allow null args
name|type
operator|=
operator|&
name|dummy_type
expr_stmt|;
if|if
condition|(
operator|!
name|format
condition|)
name|format
operator|=
operator|&
name|dummy_format
expr_stmt|;
comment|// Don't read anything, just get the size of the property data
name|r
operator|=
name|XGetWindowProperty
argument_list|(
name|display
argument_list|,
name|win
argument_list|,
name|property
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|False
argument_list|,
name|AnyPropertyType
argument_list|,
name|type
argument_list|,
name|format
argument_list|,
operator|&
name|length
argument_list|,
operator|&
name|bytes_left
argument_list|,
operator|&
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|Success
operator|||
operator|(
name|type
operator|&&
operator|*
name|type
operator|==
name|XNone
operator|)
condition|)
block|{
name|buffer
operator|->
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|data
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|,
name|buffer_offset
init|=
literal|0
decl_stmt|,
name|format_inc
init|=
literal|1
decl_stmt|,
name|proplen
init|=
name|bytes_left
decl_stmt|;
name|VDEBUG
argument_list|(
literal|"QClipboard: read_property(): initial property length: %d"
argument_list|,
name|proplen
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|*
name|format
condition|)
block|{
case|case
literal|8
case|:
default|default:
name|format_inc
operator|=
sizeof|sizeof
argument_list|(
name|char
argument_list|)
operator|/
literal|1
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|format_inc
operator|=
sizeof|sizeof
argument_list|(
name|short
argument_list|)
operator|/
literal|2
expr_stmt|;
name|proplen
operator|*=
sizeof|sizeof
argument_list|(
name|short
argument_list|)
operator|/
literal|2
expr_stmt|;
break|break;
case|case
literal|32
case|:
name|format_inc
operator|=
sizeof|sizeof
argument_list|(
name|long
argument_list|)
operator|/
literal|4
expr_stmt|;
name|proplen
operator|*=
sizeof|sizeof
argument_list|(
name|long
argument_list|)
operator|/
literal|4
expr_stmt|;
break|break;
block|}
name|int
name|newSize
init|=
name|proplen
decl_stmt|;
name|buffer
operator|->
name|resize
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
name|bool
name|ok
init|=
operator|(
name|buffer
operator|->
name|size
argument_list|()
operator|==
name|newSize
operator|)
decl_stmt|;
name|VDEBUG
argument_list|(
literal|"QClipboard: read_property(): buffer resized to %d"
argument_list|,
name|buffer
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
operator|&&
name|newSize
condition|)
block|{
comment|// could allocate buffer
while|while
condition|(
name|bytes_left
condition|)
block|{
comment|// more to read...
name|r
operator|=
name|XGetWindowProperty
argument_list|(
name|display
argument_list|,
name|win
argument_list|,
name|property
argument_list|,
name|offset
argument_list|,
name|maxsize
operator|/
literal|4
argument_list|,
name|False
argument_list|,
name|AnyPropertyType
argument_list|,
name|type
argument_list|,
name|format
argument_list|,
operator|&
name|length
argument_list|,
operator|&
name|bytes_left
argument_list|,
operator|&
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|Success
operator|||
operator|(
name|type
operator|&&
operator|*
name|type
operator|==
name|XNone
operator|)
condition|)
break|break;
name|offset
operator|+=
name|length
operator|/
operator|(
literal|32
operator|/
operator|*
name|format
operator|)
expr_stmt|;
name|length
operator|*=
name|format_inc
operator|*
operator|(
operator|*
name|format
operator|)
operator|/
literal|8
expr_stmt|;
comment|// Here we check if we get a buffer overflow and tries to
comment|// recover -- this shouldn't normally happen, but it doesn't
comment|// hurt to be defensive
if|if
condition|(
call|(
name|int
call|)
argument_list|(
name|buffer_offset
operator|+
name|length
argument_list|)
operator|>
name|buffer
operator|->
name|size
argument_list|()
condition|)
block|{
name|length
operator|=
name|buffer
operator|->
name|size
argument_list|()
operator|-
name|buffer_offset
expr_stmt|;
comment|// escape loop
name|bytes_left
operator|=
literal|0
expr_stmt|;
block|}
name|memcpy
argument_list|(
name|buffer
operator|->
name|data
argument_list|()
operator|+
name|buffer_offset
argument_list|,
name|data
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|buffer_offset
operator|+=
name|length
expr_stmt|;
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|data
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|*
name|format
operator|==
literal|8
operator|&&
operator|*
name|type
operator|==
name|ATOM
argument_list|(
name|COMPOUND_TEXT
argument_list|)
condition|)
block|{
comment|// convert COMPOUND_TEXT to a multibyte string
name|XTextProperty
name|textprop
decl_stmt|;
name|textprop
operator|.
name|encoding
operator|=
operator|*
name|type
expr_stmt|;
name|textprop
operator|.
name|format
operator|=
operator|*
name|format
expr_stmt|;
name|textprop
operator|.
name|nitems
operator|=
name|buffer_offset
expr_stmt|;
name|textprop
operator|.
name|value
operator|=
operator|(
name|unsigned
name|char
operator|*
operator|)
name|buffer
operator|->
name|data
argument_list|()
expr_stmt|;
name|char
modifier|*
modifier|*
name|list_ret
init|=
literal|0
decl_stmt|;
name|int
name|count
decl_stmt|;
if|if
condition|(
name|XmbTextPropertyToTextList
argument_list|(
name|display
argument_list|,
operator|&
name|textprop
argument_list|,
operator|&
name|list_ret
argument_list|,
operator|&
name|count
argument_list|)
operator|==
name|Success
operator|&&
name|count
operator|&&
name|list_ret
condition|)
block|{
name|offset
operator|=
name|buffer_offset
operator|=
name|strlen
argument_list|(
name|list_ret
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|buffer
operator|->
name|resize
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|buffer
operator|->
name|data
argument_list|()
argument_list|,
name|list_ret
index|[
literal|0
index|]
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|list_ret
condition|)
name|XFreeStringList
argument_list|(
name|list_ret
argument_list|)
expr_stmt|;
block|}
block|}
comment|// correct size, not 0-term.
if|if
condition|(
name|size
condition|)
operator|*
name|size
operator|=
name|buffer_offset
expr_stmt|;
name|VDEBUG
argument_list|(
literal|"QClipboard: read_property(): buffer size %d, buffer offset %d, offset %d"
argument_list|,
name|buffer
operator|->
name|size
argument_list|()
argument_list|,
name|buffer_offset
argument_list|,
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|deleteProperty
condition|)
name|XDeleteProperty
argument_list|(
name|display
argument_list|,
name|win
argument_list|,
name|property
argument_list|)
expr_stmt|;
name|XFlush
argument_list|(
name|display
argument_list|)
expr_stmt|;
return|return
name|ok
return|;
block|}
end_function
begin_function
DECL|function|clipboardReadIncrementalProperty
name|QByteArray
name|QX11Data
operator|::
name|clipboardReadIncrementalProperty
parameter_list|(
name|Window
name|win
parameter_list|,
name|Atom
name|property
parameter_list|,
name|int
name|nbytes
parameter_list|,
name|bool
name|nullterm
parameter_list|)
block|{
name|XEvent
name|event
decl_stmt|;
name|QByteArray
name|buf
decl_stmt|;
name|QByteArray
name|tmp_buf
decl_stmt|;
name|bool
name|alloc_error
init|=
literal|false
decl_stmt|;
name|int
name|length
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|nbytes
operator|>
literal|0
condition|)
block|{
comment|// Reserve buffer + zero-terminator (for text data)
comment|// We want to complete the INCR transfer even if we cannot
comment|// allocate more memory
name|buf
operator|.
name|resize
argument_list|(
name|nbytes
operator|+
literal|1
argument_list|)
expr_stmt|;
name|alloc_error
operator|=
name|buf
operator|.
name|size
argument_list|()
operator|!=
name|nbytes
operator|+
literal|1
expr_stmt|;
block|}
for|for
control|(
init|;
condition|;
control|)
block|{
name|XFlush
argument_list|(
name|display
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|clipboardWaitForEvent
argument_list|(
name|win
argument_list|,
name|PropertyNotify
argument_list|,
operator|&
name|event
argument_list|,
name|clipboard_timeout
argument_list|)
condition|)
break|break;
if|if
condition|(
name|event
operator|.
name|xproperty
operator|.
name|atom
operator|!=
name|property
operator|||
name|event
operator|.
name|xproperty
operator|.
name|state
operator|!=
name|PropertyNewValue
condition|)
continue|continue;
if|if
condition|(
name|X11
operator|->
name|clipboardReadProperty
argument_list|(
name|win
argument_list|,
name|property
argument_list|,
literal|true
argument_list|,
operator|&
name|tmp_buf
argument_list|,
operator|&
name|length
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
condition|)
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
comment|// no more data, we're done
if|if
condition|(
name|nullterm
condition|)
block|{
name|buf
operator|.
name|resize
argument_list|(
name|offset
operator|+
literal|1
argument_list|)
expr_stmt|;
name|buf
index|[
name|offset
index|]
operator|=
literal|'\0'
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|resize
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|alloc_error
condition|)
block|{
if|if
condition|(
name|offset
operator|+
name|length
operator|>
operator|(
name|int
operator|)
name|buf
operator|.
name|size
argument_list|()
condition|)
block|{
name|buf
operator|.
name|resize
argument_list|(
name|offset
operator|+
name|length
operator|+
literal|65535
argument_list|)
expr_stmt|;
if|if
condition|(
name|buf
operator|.
name|size
argument_list|()
operator|!=
name|offset
operator|+
name|length
operator|+
literal|65535
condition|)
block|{
name|alloc_error
operator|=
literal|true
expr_stmt|;
name|length
operator|=
name|buf
operator|.
name|size
argument_list|()
operator|-
name|offset
expr_stmt|;
block|}
block|}
name|memcpy
argument_list|(
name|buf
operator|.
name|data
argument_list|()
operator|+
name|offset
argument_list|,
name|tmp_buf
operator|.
name|constData
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|tmp_buf
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|length
expr_stmt|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
comment|// timed out ... create a new requestor window, otherwise the requestor
comment|// could consider next request to be still part of this timed out request
operator|delete
name|requestor
expr_stmt|;
name|requestor
operator|=
operator|new
name|QWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|requestor
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"internal clipboard requestor"
argument_list|)
argument_list|)
expr_stmt|;
comment|// We don't need this internal widget to appear in QApplication::topLevelWidgets()
if|if
condition|(
name|QWidgetPrivate
operator|::
name|allWidgets
condition|)
name|QWidgetPrivate
operator|::
name|allWidgets
operator|->
name|remove
argument_list|(
name|requestor
argument_list|)
expr_stmt|;
return|return
name|QByteArray
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|send_targets_selection
specifier|static
name|Atom
name|send_targets_selection
parameter_list|(
name|QClipboardData
modifier|*
name|d
parameter_list|,
name|Window
name|window
parameter_list|,
name|Atom
name|property
parameter_list|)
block|{
name|QVector
argument_list|<
name|Atom
argument_list|>
name|types
decl_stmt|;
name|QStringList
name|formats
init|=
name|QInternalMimeData
operator|::
name|formatsHelper
argument_list|(
name|d
operator|->
name|source
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|formats
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QList
argument_list|<
name|Atom
argument_list|>
name|atoms
init|=
name|X11
operator|->
name|xdndMimeAtomsForFormat
argument_list|(
name|formats
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|atoms
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
operator|!
name|types
operator|.
name|contains
argument_list|(
name|atoms
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
name|types
operator|.
name|append
argument_list|(
name|atoms
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|types
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|TARGETS
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|MULTIPLE
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|TIMESTAMP
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|SAVE_TARGETS
argument_list|)
argument_list|)
expr_stmt|;
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|window
argument_list|,
name|property
argument_list|,
name|XA_ATOM
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|uchar
operator|*
operator|)
name|types
operator|.
name|data
argument_list|()
argument_list|,
name|types
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|property
return|;
block|}
end_function
begin_function
DECL|function|send_selection
specifier|static
name|Atom
name|send_selection
parameter_list|(
name|QClipboardData
modifier|*
name|d
parameter_list|,
name|Atom
name|target
parameter_list|,
name|Window
name|window
parameter_list|,
name|Atom
name|property
parameter_list|)
block|{
name|Atom
name|atomFormat
init|=
name|target
decl_stmt|;
name|int
name|dataFormat
init|=
literal|0
decl_stmt|;
name|QByteArray
name|data
decl_stmt|;
name|QByteArray
name|fmt
init|=
name|X11
operator|->
name|xdndAtomToString
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|fmt
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Not a MIME type we have
name|DEBUG
argument_list|(
literal|"QClipboard: send_selection(): converting to type '%s' is not supported"
argument_list|,
name|fmt
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|XNone
return|;
block|}
name|DEBUG
argument_list|(
literal|"QClipboard: send_selection(): converting to type '%s'"
argument_list|,
name|fmt
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|X11
operator|->
name|xdndMimeDataForAtom
argument_list|(
name|target
argument_list|,
name|d
operator|->
name|source
argument_list|()
argument_list|,
operator|&
name|data
argument_list|,
operator|&
name|atomFormat
argument_list|,
operator|&
name|dataFormat
argument_list|)
condition|)
block|{
name|VDEBUG
argument_list|(
literal|"QClipboard: send_selection():\n"
literal|"    property type %lx\n"
literal|"    property name '%s'\n"
literal|"    format %d\n"
literal|"    %d bytes\n"
argument_list|,
name|target
argument_list|,
name|X11
operator|->
name|xdndMimeAtomToString
argument_list|(
name|atomFormat
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|dataFormat
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// don't allow INCR transfers when using MULTIPLE or to
comment|// Motif clients (since Motif doesn't support INCR)
specifier|static
name|Atom
name|motif_clip_temporary
init|=
name|ATOM
argument_list|(
name|CLIP_TEMPORARY
argument_list|)
decl_stmt|;
name|bool
name|allow_incr
init|=
name|property
operator|!=
name|motif_clip_temporary
decl_stmt|;
comment|// X_ChangeProperty protocol request is 24 bytes
specifier|const
name|int
name|increment
init|=
operator|(
name|XMaxRequestSize
argument_list|(
name|X11
operator|->
name|display
argument_list|)
operator|*
literal|4
operator|)
operator|-
literal|24
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|size
argument_list|()
operator|>
name|increment
operator|&&
name|allow_incr
condition|)
block|{
name|long
name|bytes
init|=
name|data
operator|.
name|size
argument_list|()
decl_stmt|;
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|window
argument_list|,
name|property
argument_list|,
name|ATOM
argument_list|(
name|INCR
argument_list|)
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|uchar
operator|*
operator|)
operator|&
name|bytes
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
operator|new
name|QClipboardINCRTransaction
argument_list|(
name|window
argument_list|,
name|property
argument_list|,
name|atomFormat
argument_list|,
name|dataFormat
argument_list|,
name|data
argument_list|,
name|increment
argument_list|)
expr_stmt|;
return|return
name|property
return|;
block|}
comment|// make sure we can perform the XChangeProperty in a single request
if|if
condition|(
name|data
operator|.
name|size
argument_list|()
operator|>
name|increment
condition|)
return|return
name|XNone
return|;
comment|// ### perhaps use several XChangeProperty calls w/ PropModeAppend?
name|int
name|dataSize
init|=
name|data
operator|.
name|size
argument_list|()
operator|/
operator|(
name|dataFormat
operator|/
literal|8
operator|)
decl_stmt|;
comment|// use a single request to transfer data
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|window
argument_list|,
name|property
argument_list|,
name|atomFormat
argument_list|,
name|dataFormat
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|uchar
operator|*
operator|)
name|data
operator|.
name|data
argument_list|()
argument_list|,
name|dataSize
argument_list|)
expr_stmt|;
block|}
return|return
name|property
return|;
block|}
end_function
begin_comment
comment|/*! \internal     Internal cleanup for Windows. */
end_comment
begin_function
DECL|function|ownerDestroyed
name|void
name|QClipboard
operator|::
name|ownerDestroyed
parameter_list|()
block|{ }
end_function
begin_comment
comment|/*! \internal     Internal optimization for Windows. */
end_comment
begin_function
DECL|function|connectNotify
name|void
name|QClipboard
operator|::
name|connectNotify
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|event
name|bool
name|QClipboard
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Timer
condition|)
block|{
name|QTimerEvent
modifier|*
name|te
init|=
operator|(
name|QTimerEvent
operator|*
operator|)
name|e
decl_stmt|;
if|if
condition|(
name|waiting_for_data
condition|)
comment|// should never happen
return|return
literal|false
return|;
if|if
condition|(
name|te
operator|->
name|timerId
argument_list|()
operator|==
name|timer_id
condition|)
block|{
name|killTimer
argument_list|(
name|timer_id
argument_list|)
expr_stmt|;
name|timer_id
operator|=
literal|0
expr_stmt|;
name|timer_event_clear
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|selection_watcher
condition|)
comment|// clear selection
name|selectionData
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clipboard_watcher
condition|)
comment|// clear clipboard
name|clipboardData
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
name|timer_event_clear
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|te
operator|->
name|timerId
argument_list|()
operator|==
name|pending_timer_id
condition|)
block|{
comment|// I hate klipper
name|killTimer
argument_list|(
name|pending_timer_id
argument_list|)
expr_stmt|;
name|pending_timer_id
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|pending_clipboard_changed
condition|)
block|{
name|pending_clipboard_changed
operator|=
literal|false
expr_stmt|;
name|clipboardData
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
name|emitChanged
argument_list|(
name|QClipboard
operator|::
name|Clipboard
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pending_selection_changed
condition|)
block|{
name|pending_selection_changed
operator|=
literal|false
expr_stmt|;
name|selectionData
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
name|emitChanged
argument_list|(
name|QClipboard
operator|::
name|Selection
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|te
operator|->
name|timerId
argument_list|()
operator|==
name|incr_timer_id
condition|)
block|{
name|killTimer
argument_list|(
name|incr_timer_id
argument_list|)
expr_stmt|;
name|incr_timer_id
operator|=
literal|0
expr_stmt|;
name|qt_xclb_incr_timeout
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|QObject
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|!=
name|QEvent
operator|::
name|Clipboard
condition|)
block|{
return|return
name|QObject
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
name|XEvent
modifier|*
name|xevent
init|=
operator|(
name|XEvent
operator|*
operator|)
operator|(
operator|(
operator|(
name|QClipboardEvent
operator|*
operator|)
name|e
operator|)
operator|->
name|data
argument_list|()
operator|)
decl_stmt|;
name|Display
modifier|*
name|dpy
init|=
name|X11
operator|->
name|display
decl_stmt|;
if|if
condition|(
operator|!
name|xevent
condition|)
block|{
comment|// That means application exits and we need to give clipboard
comment|// content to the clipboard manager.
comment|// First we check if there is a clipboard manager.
if|if
condition|(
name|XGetSelectionOwner
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|ATOM
argument_list|(
name|CLIPBOARD_MANAGER
argument_list|)
argument_list|)
operator|==
name|XNone
operator|||
operator|!
name|owner
condition|)
return|return
literal|true
return|;
name|Window
name|ownerId
init|=
name|owner
operator|->
name|internalWinId
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|ownerId
argument_list|)
expr_stmt|;
comment|// we delete the property so the manager saves all TARGETS.
name|XDeleteProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|ownerId
argument_list|,
name|ATOM
argument_list|(
name|_QT_SELECTION
argument_list|)
argument_list|)
expr_stmt|;
name|XConvertSelection
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|ATOM
argument_list|(
name|CLIPBOARD_MANAGER
argument_list|)
argument_list|,
name|ATOM
argument_list|(
name|SAVE_TARGETS
argument_list|)
argument_list|,
name|ATOM
argument_list|(
name|_QT_SELECTION
argument_list|)
argument_list|,
name|ownerId
argument_list|,
name|X11
operator|->
name|time
argument_list|)
expr_stmt|;
name|XSync
argument_list|(
name|dpy
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|XEvent
name|event
decl_stmt|;
comment|// waiting until the clipboard manager fetches the content.
if|if
condition|(
operator|!
name|X11
operator|->
name|clipboardWaitForEvent
argument_list|(
name|ownerId
argument_list|,
name|SelectionNotify
argument_list|,
operator|&
name|event
argument_list|,
literal|10000
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QClipboard: Unable to receive an event from the "
literal|"clipboard manager in a reasonable time"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
switch|switch
condition|(
name|xevent
operator|->
name|type
condition|)
block|{
case|case
name|SelectionClear
case|:
comment|// new selection owner
if|if
condition|(
name|xevent
operator|->
name|xselectionclear
operator|.
name|selection
operator|==
name|XA_PRIMARY
condition|)
block|{
name|QClipboardData
modifier|*
name|d
init|=
name|selectionData
argument_list|()
decl_stmt|;
comment|// ignore the event if it was generated before we gained selection ownership
if|if
condition|(
name|d
operator|->
name|timestamp
operator|!=
name|CurrentTime
operator|&&
name|xevent
operator|->
name|xselectionclear
operator|.
name|time
operator|<=
name|d
operator|->
name|timestamp
condition|)
break|break;
name|DEBUG
argument_list|(
literal|"QClipboard: new selection owner 0x%lx at time %lx (ours %lx)"
argument_list|,
name|XGetSelectionOwner
argument_list|(
name|dpy
argument_list|,
name|XA_PRIMARY
argument_list|)
argument_list|,
name|xevent
operator|->
name|xselectionclear
operator|.
name|time
argument_list|,
name|d
operator|->
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|waiting_for_data
condition|)
block|{
name|d
operator|->
name|clear
argument_list|()
expr_stmt|;
name|emitChanged
argument_list|(
name|QClipboard
operator|::
name|Selection
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pending_selection_changed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|pending_timer_id
condition|)
name|pending_timer_id
operator|=
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|startTimer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|xevent
operator|->
name|xselectionclear
operator|.
name|selection
operator|==
name|ATOM
argument_list|(
name|CLIPBOARD
argument_list|)
condition|)
block|{
name|QClipboardData
modifier|*
name|d
init|=
name|clipboardData
argument_list|()
decl_stmt|;
comment|// ignore the event if it was generated before we gained selection ownership
if|if
condition|(
name|d
operator|->
name|timestamp
operator|!=
name|CurrentTime
operator|&&
name|xevent
operator|->
name|xselectionclear
operator|.
name|time
operator|<=
name|d
operator|->
name|timestamp
condition|)
break|break;
name|DEBUG
argument_list|(
literal|"QClipboard: new clipboard owner 0x%lx at time %lx (%lx)"
argument_list|,
name|XGetSelectionOwner
argument_list|(
name|dpy
argument_list|,
name|ATOM
argument_list|(
name|CLIPBOARD
argument_list|)
argument_list|)
argument_list|,
name|xevent
operator|->
name|xselectionclear
operator|.
name|time
argument_list|,
name|d
operator|->
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|waiting_for_data
condition|)
block|{
name|d
operator|->
name|clear
argument_list|()
expr_stmt|;
name|emitChanged
argument_list|(
name|QClipboard
operator|::
name|Clipboard
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pending_clipboard_changed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|pending_timer_id
condition|)
name|pending_timer_id
operator|=
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|startTimer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QClipboard: Unknown SelectionClear event received"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|SelectionNotify
case|:
comment|/*           Something has delivered data to us, but this was not caught           by QClipboardWatcher::getDataInFormat()            Just skip the event to prevent Bad Things (tm) from           happening later on...         */
break|break;
case|case
name|SelectionRequest
case|:
block|{
comment|// someone wants our data
name|XSelectionRequestEvent
modifier|*
name|req
init|=
operator|&
name|xevent
operator|->
name|xselectionrequest
decl_stmt|;
if|if
condition|(
name|requestor
operator|&&
name|req
operator|->
name|requestor
operator|==
name|requestor
operator|->
name|internalWinId
argument_list|()
condition|)
break|break;
name|XEvent
name|event
decl_stmt|;
name|event
operator|.
name|xselection
operator|.
name|type
operator|=
name|SelectionNotify
expr_stmt|;
name|event
operator|.
name|xselection
operator|.
name|display
operator|=
name|req
operator|->
name|display
expr_stmt|;
name|event
operator|.
name|xselection
operator|.
name|requestor
operator|=
name|req
operator|->
name|requestor
expr_stmt|;
name|event
operator|.
name|xselection
operator|.
name|selection
operator|=
name|req
operator|->
name|selection
expr_stmt|;
name|event
operator|.
name|xselection
operator|.
name|target
operator|=
name|req
operator|->
name|target
expr_stmt|;
name|event
operator|.
name|xselection
operator|.
name|property
operator|=
name|XNone
expr_stmt|;
name|event
operator|.
name|xselection
operator|.
name|time
operator|=
name|req
operator|->
name|time
expr_stmt|;
name|DEBUG
argument_list|(
literal|"QClipboard: SelectionRequest from %lx\n"
literal|"    selection 0x%lx (%s) target 0x%lx (%s)"
argument_list|,
name|req
operator|->
name|requestor
argument_list|,
name|req
operator|->
name|selection
argument_list|,
name|X11
operator|->
name|xdndAtomToString
argument_list|(
name|req
operator|->
name|selection
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
name|req
operator|->
name|target
argument_list|,
name|X11
operator|->
name|xdndAtomToString
argument_list|(
name|req
operator|->
name|target
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QClipboardData
modifier|*
name|d
decl_stmt|;
if|if
condition|(
name|req
operator|->
name|selection
operator|==
name|XA_PRIMARY
condition|)
block|{
name|d
operator|=
name|selectionData
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|req
operator|->
name|selection
operator|==
name|ATOM
argument_list|(
name|CLIPBOARD
argument_list|)
condition|)
block|{
name|d
operator|=
name|clipboardData
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QClipboard: Unknown selection '%lx'"
argument_list|,
name|req
operator|->
name|selection
argument_list|)
expr_stmt|;
name|XSendEvent
argument_list|(
name|dpy
argument_list|,
name|req
operator|->
name|requestor
argument_list|,
name|False
argument_list|,
name|NoEventMask
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|source
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QClipboard: Cannot transfer data, no data available"
argument_list|)
expr_stmt|;
name|XSendEvent
argument_list|(
name|dpy
argument_list|,
name|req
operator|->
name|requestor
argument_list|,
name|False
argument_list|,
name|NoEventMask
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
break|break;
block|}
name|DEBUG
argument_list|(
literal|"QClipboard: SelectionRequest at time %lx (ours %lx)"
argument_list|,
name|req
operator|->
name|time
argument_list|,
name|d
operator|->
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|timestamp
operator|==
name|CurrentTime
comment|// we don't own the selection anymore
operator|||
operator|(
name|req
operator|->
name|time
operator|!=
name|CurrentTime
operator|&&
name|req
operator|->
name|time
operator|<
name|d
operator|->
name|timestamp
operator|)
condition|)
block|{
name|DEBUG
argument_list|(
literal|"QClipboard: SelectionRequest too old"
argument_list|)
expr_stmt|;
name|XSendEvent
argument_list|(
name|dpy
argument_list|,
name|req
operator|->
name|requestor
argument_list|,
name|False
argument_list|,
name|NoEventMask
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
break|break;
block|}
name|Atom
name|xa_targets
init|=
name|ATOM
argument_list|(
name|TARGETS
argument_list|)
decl_stmt|;
name|Atom
name|xa_multiple
init|=
name|ATOM
argument_list|(
name|MULTIPLE
argument_list|)
decl_stmt|;
name|Atom
name|xa_timestamp
init|=
name|ATOM
argument_list|(
name|TIMESTAMP
argument_list|)
decl_stmt|;
struct|struct
name|AtomPair
block|{
name|Atom
name|target
decl_stmt|;
name|Atom
name|property
decl_stmt|;
block|}
modifier|*
name|multi
init|=
literal|0
struct|;
name|Atom
name|multi_type
init|=
name|XNone
decl_stmt|;
name|int
name|multi_format
init|=
literal|0
decl_stmt|;
name|int
name|nmulti
init|=
literal|0
decl_stmt|;
name|int
name|imulti
init|=
operator|-
literal|1
decl_stmt|;
name|bool
name|multi_writeback
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|req
operator|->
name|target
operator|==
name|xa_multiple
condition|)
block|{
name|QByteArray
name|multi_data
decl_stmt|;
if|if
condition|(
name|req
operator|->
name|property
operator|==
name|XNone
operator|||
operator|!
name|X11
operator|->
name|clipboardReadProperty
argument_list|(
name|req
operator|->
name|requestor
argument_list|,
name|req
operator|->
name|property
argument_list|,
literal|false
argument_list|,
operator|&
name|multi_data
argument_list|,
literal|0
argument_list|,
operator|&
name|multi_type
argument_list|,
operator|&
name|multi_format
argument_list|)
operator|||
name|multi_format
operator|!=
literal|32
condition|)
block|{
comment|// MULTIPLE property not formatted correctly
name|XSendEvent
argument_list|(
name|dpy
argument_list|,
name|req
operator|->
name|requestor
argument_list|,
name|False
argument_list|,
name|NoEventMask
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
break|break;
block|}
name|nmulti
operator|=
name|multi_data
operator|.
name|size
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
operator|*
name|multi
argument_list|)
expr_stmt|;
name|multi
operator|=
operator|new
name|AtomPair
index|[
name|nmulti
index|]
expr_stmt|;
name|memcpy
argument_list|(
name|multi
argument_list|,
name|multi_data
operator|.
name|data
argument_list|()
argument_list|,
name|multi_data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|imulti
operator|=
literal|0
expr_stmt|;
block|}
for|for
control|(
init|;
name|imulti
operator|<
name|nmulti
condition|;
operator|++
name|imulti
control|)
block|{
name|Atom
name|target
decl_stmt|;
name|Atom
name|property
decl_stmt|;
if|if
condition|(
name|multi
condition|)
block|{
name|target
operator|=
name|multi
index|[
name|imulti
index|]
operator|.
name|target
expr_stmt|;
name|property
operator|=
name|multi
index|[
name|imulti
index|]
operator|.
name|property
expr_stmt|;
block|}
else|else
block|{
name|target
operator|=
name|req
operator|->
name|target
expr_stmt|;
name|property
operator|=
name|req
operator|->
name|property
expr_stmt|;
if|if
condition|(
name|property
operator|==
name|XNone
condition|)
comment|// obsolete client
name|property
operator|=
name|target
expr_stmt|;
block|}
name|Atom
name|ret
init|=
name|XNone
decl_stmt|;
if|if
condition|(
name|target
operator|==
name|XNone
operator|||
name|property
operator|==
name|XNone
condition|)
block|{
empty_stmt|;
block|}
elseif|else
if|if
condition|(
name|target
operator|==
name|xa_timestamp
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|timestamp
operator|!=
name|CurrentTime
condition|)
block|{
name|XChangeProperty
argument_list|(
name|dpy
argument_list|,
name|req
operator|->
name|requestor
argument_list|,
name|property
argument_list|,
name|XA_INTEGER
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|uchar
operator|*
operator|)
operator|&
name|d
operator|->
name|timestamp
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ret
operator|=
name|property
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QClipboard: Invalid data timestamp"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|target
operator|==
name|xa_targets
condition|)
block|{
name|ret
operator|=
name|send_targets_selection
argument_list|(
name|d
argument_list|,
name|req
operator|->
name|requestor
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|send_selection
argument_list|(
name|d
argument_list|,
name|target
argument_list|,
name|req
operator|->
name|requestor
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nmulti
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|ret
operator|==
name|XNone
condition|)
block|{
name|multi
index|[
name|imulti
index|]
operator|.
name|property
operator|=
name|XNone
expr_stmt|;
name|multi_writeback
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|event
operator|.
name|xselection
operator|.
name|property
operator|=
name|ret
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|nmulti
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|multi_writeback
condition|)
block|{
comment|// according to ICCCM 2.6.2 says to put None back
comment|// into the original property on the requestor window
name|XChangeProperty
argument_list|(
name|dpy
argument_list|,
name|req
operator|->
name|requestor
argument_list|,
name|req
operator|->
name|property
argument_list|,
name|multi_type
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|uchar
operator|*
operator|)
name|multi
argument_list|,
name|nmulti
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
operator|delete
index|[]
name|multi
expr_stmt|;
name|event
operator|.
name|xselection
operator|.
name|property
operator|=
name|req
operator|->
name|property
expr_stmt|;
block|}
comment|// send selection notify to requestor
name|XSendEvent
argument_list|(
name|dpy
argument_list|,
name|req
operator|->
name|requestor
argument_list|,
name|False
argument_list|,
name|NoEventMask
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|(
literal|"QClipboard: SelectionNotify to 0x%lx\n"
literal|"    property 0x%lx (%s)"
argument_list|,
name|req
operator|->
name|requestor
argument_list|,
name|event
operator|.
name|xselection
operator|.
name|property
argument_list|,
name|X11
operator|->
name|xdndAtomToString
argument_list|(
name|event
operator|.
name|xselection
operator|.
name|property
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_constructor
DECL|function|QClipboardWatcher
name|QClipboardWatcher
operator|::
name|QClipboardWatcher
parameter_list|(
name|QClipboard
operator|::
name|Mode
name|mode
parameter_list|)
member_init_list|:
name|QInternalMimeData
argument_list|()
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|QClipboard
operator|::
name|Selection
case|:
name|atom
operator|=
name|XA_PRIMARY
expr_stmt|;
break|break;
case|case
name|QClipboard
operator|::
name|Clipboard
case|:
name|atom
operator|=
name|ATOM
argument_list|(
name|CLIPBOARD
argument_list|)
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"QClipboardWatcher: Internal error: Unsupported clipboard mode"
argument_list|)
expr_stmt|;
break|break;
block|}
name|setupOwner
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QClipboardWatcher
name|QClipboardWatcher
operator|::
name|~
name|QClipboardWatcher
parameter_list|()
block|{
if|if
condition|(
name|selection_watcher
operator|==
name|this
condition|)
name|selection_watcher
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|clipboard_watcher
operator|==
name|this
condition|)
name|clipboard_watcher
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|empty
name|bool
name|QClipboardWatcher
operator|::
name|empty
parameter_list|()
specifier|const
block|{
name|Display
modifier|*
name|dpy
init|=
name|X11
operator|->
name|display
decl_stmt|;
name|Window
name|win
init|=
name|XGetSelectionOwner
argument_list|(
name|dpy
argument_list|,
name|atom
argument_list|)
decl_stmt|;
if|if
condition|(
name|win
operator|==
name|requestor
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QClipboardWatcher::empty: Internal error: Application owns the selection"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
name|win
operator|==
name|XNone
return|;
block|}
end_function
begin_function
DECL|function|formats_sys
name|QStringList
name|QClipboardWatcher
operator|::
name|formats_sys
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|empty
argument_list|()
condition|)
return|return
name|QStringList
argument_list|()
return|;
if|if
condition|(
operator|!
name|formatList
operator|.
name|count
argument_list|()
condition|)
block|{
comment|// get the list of targets from the current clipboard owner - we do this
comment|// once so that multiple calls to this function don't require multiple
comment|// server round trips...
name|format_atoms
operator|=
name|getDataInFormat
argument_list|(
name|ATOM
argument_list|(
name|TARGETS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format_atoms
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Atom
modifier|*
name|targets
init|=
operator|(
name|Atom
operator|*
operator|)
name|format_atoms
operator|.
name|data
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|format_atoms
operator|.
name|size
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|Atom
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|targets
index|[
name|i
index|]
operator|==
literal|0
condition|)
continue|continue;
name|QStringList
name|formatsForAtom
init|=
name|X11
operator|->
name|xdndMimeFormatsForAtom
argument_list|(
name|targets
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|formatsForAtom
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
operator|!
name|formatList
operator|.
name|contains
argument_list|(
name|formatsForAtom
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
name|formatList
operator|.
name|append
argument_list|(
name|formatsForAtom
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|VDEBUG
argument_list|(
literal|"    format: %s"
argument_list|,
name|X11
operator|->
name|xdndAtomToString
argument_list|(
name|targets
index|[
name|i
index|]
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|VDEBUG
argument_list|(
literal|"    data:\n%s\n"
argument_list|,
name|getDataInFormat
argument_list|(
name|targets
index|[
name|i
index|]
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DEBUG
argument_list|(
literal|"QClipboardWatcher::format: %d formats available"
argument_list|,
name|formatList
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|formatList
return|;
block|}
end_function
begin_function
DECL|function|hasFormat_sys
name|bool
name|QClipboardWatcher
operator|::
name|hasFormat_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|format
parameter_list|)
specifier|const
block|{
name|QStringList
name|list
init|=
name|formats
argument_list|()
decl_stmt|;
return|return
name|list
operator|.
name|contains
argument_list|(
name|format
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|retrieveData_sys
name|QVariant
name|QClipboardWatcher
operator|::
name|retrieveData_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|fmt
parameter_list|,
name|QVariant
operator|::
name|Type
name|requestedType
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|fmt
operator|.
name|isEmpty
argument_list|()
operator|||
name|empty
argument_list|()
condition|)
return|return
name|QByteArray
argument_list|()
return|;
operator|(
name|void
operator|)
name|formats
argument_list|()
expr_stmt|;
comment|// trigger update of format list
name|DEBUG
argument_list|(
literal|"QClipboardWatcher::data: fetching format '%s'"
argument_list|,
name|fmt
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|Atom
argument_list|>
name|atoms
decl_stmt|;
name|Atom
modifier|*
name|targets
init|=
operator|(
name|Atom
operator|*
operator|)
name|format_atoms
operator|.
name|data
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|format_atoms
operator|.
name|size
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|Atom
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
name|atoms
operator|.
name|append
argument_list|(
name|targets
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QByteArray
name|encoding
decl_stmt|;
name|Atom
name|fmtatom
init|=
name|X11
operator|->
name|xdndMimeAtomForFormat
argument_list|(
name|fmt
argument_list|,
name|requestedType
argument_list|,
name|atoms
argument_list|,
operator|&
name|encoding
argument_list|)
decl_stmt|;
if|if
condition|(
name|fmtatom
operator|==
literal|0
condition|)
return|return
name|QVariant
argument_list|()
return|;
return|return
name|X11
operator|->
name|xdndMimeConvertToFormat
argument_list|(
name|fmtatom
argument_list|,
name|getDataInFormat
argument_list|(
name|fmtatom
argument_list|)
argument_list|,
name|fmt
argument_list|,
name|requestedType
argument_list|,
name|encoding
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getDataInFormat
name|QByteArray
name|QClipboardWatcher
operator|::
name|getDataInFormat
parameter_list|(
name|Atom
name|fmtatom
parameter_list|)
specifier|const
block|{
name|QByteArray
name|buf
decl_stmt|;
name|Display
modifier|*
name|dpy
init|=
name|X11
operator|->
name|display
decl_stmt|;
name|requestor
operator|->
name|createWinId
argument_list|()
expr_stmt|;
name|Window
name|win
init|=
name|requestor
operator|->
name|internalWinId
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|requestor
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|(
literal|"QClipboardWatcher::getDataInFormat: selection '%s' format '%s'"
argument_list|,
name|X11
operator|->
name|xdndAtomToString
argument_list|(
name|atom
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
name|X11
operator|->
name|xdndAtomToString
argument_list|(
name|fmtatom
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|XSelectInput
argument_list|(
name|dpy
argument_list|,
name|win
argument_list|,
name|NoEventMask
argument_list|)
expr_stmt|;
comment|// don't listen for any events
name|XDeleteProperty
argument_list|(
name|dpy
argument_list|,
name|win
argument_list|,
name|ATOM
argument_list|(
name|_QT_SELECTION
argument_list|)
argument_list|)
expr_stmt|;
name|XConvertSelection
argument_list|(
name|dpy
argument_list|,
name|atom
argument_list|,
name|fmtatom
argument_list|,
name|ATOM
argument_list|(
name|_QT_SELECTION
argument_list|)
argument_list|,
name|win
argument_list|,
name|X11
operator|->
name|time
argument_list|)
expr_stmt|;
name|XSync
argument_list|(
name|dpy
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|VDEBUG
argument_list|(
literal|"QClipboardWatcher::getDataInFormat: waiting for SelectionNotify event"
argument_list|)
expr_stmt|;
name|XEvent
name|xevent
decl_stmt|;
if|if
condition|(
operator|!
name|X11
operator|->
name|clipboardWaitForEvent
argument_list|(
name|win
argument_list|,
name|SelectionNotify
argument_list|,
operator|&
name|xevent
argument_list|,
name|clipboard_timeout
argument_list|)
operator|||
name|xevent
operator|.
name|xselection
operator|.
name|property
operator|==
name|XNone
condition|)
block|{
name|DEBUG
argument_list|(
literal|"QClipboardWatcher::getDataInFormat: format not available"
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
name|VDEBUG
argument_list|(
literal|"QClipboardWatcher::getDataInFormat: fetching data..."
argument_list|)
expr_stmt|;
name|Atom
name|type
decl_stmt|;
name|XSelectInput
argument_list|(
name|dpy
argument_list|,
name|win
argument_list|,
name|PropertyChangeMask
argument_list|)
expr_stmt|;
if|if
condition|(
name|X11
operator|->
name|clipboardReadProperty
argument_list|(
name|win
argument_list|,
name|ATOM
argument_list|(
name|_QT_SELECTION
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|&
name|buf
argument_list|,
literal|0
argument_list|,
operator|&
name|type
argument_list|,
literal|0
argument_list|)
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|ATOM
argument_list|(
name|INCR
argument_list|)
condition|)
block|{
name|int
name|nbytes
init|=
name|buf
operator|.
name|size
argument_list|()
operator|>=
literal|4
condition|?
operator|*
operator|(
operator|(
name|int
operator|*
operator|)
name|buf
operator|.
name|data
argument_list|()
operator|)
else|:
literal|0
decl_stmt|;
name|buf
operator|=
name|X11
operator|->
name|clipboardReadIncrementalProperty
argument_list|(
name|win
argument_list|,
name|ATOM
argument_list|(
name|_QT_SELECTION
argument_list|)
argument_list|,
name|nbytes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|XSelectInput
argument_list|(
name|dpy
argument_list|,
name|win
argument_list|,
name|NoEventMask
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|(
literal|"QClipboardWatcher::getDataInFormat: %d bytes received"
argument_list|,
name|buf
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
end_function
begin_function
DECL|function|mimeData
specifier|const
name|QMimeData
modifier|*
name|QClipboard
operator|::
name|mimeData
parameter_list|(
name|Mode
name|mode
parameter_list|)
specifier|const
block|{
name|QClipboardData
modifier|*
name|d
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|Selection
case|:
name|d
operator|=
name|selectionData
argument_list|()
expr_stmt|;
break|break;
case|case
name|Clipboard
case|:
name|d
operator|=
name|clipboardData
argument_list|()
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"QClipboard::mimeData: unsupported mode '%d'"
argument_list|,
name|mode
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|source
argument_list|()
operator|&&
operator|!
name|timer_event_clear
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|Selection
condition|)
block|{
if|if
condition|(
operator|!
name|selection_watcher
condition|)
name|selection_watcher
operator|=
operator|new
name|QClipboardWatcher
argument_list|(
name|mode
argument_list|)
expr_stmt|;
name|d
operator|->
name|setSource
argument_list|(
name|selection_watcher
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|clipboard_watcher
condition|)
name|clipboard_watcher
operator|=
operator|new
name|QClipboardWatcher
argument_list|(
name|mode
argument_list|)
expr_stmt|;
name|d
operator|->
name|setSource
argument_list|(
name|clipboard_watcher
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|timer_id
condition|)
block|{
comment|// start a zero timer - we will clear cached data when the timer
comment|// times out, which will be the next time we hit the event loop...
comment|// that way, the data is cached long enough for calls within a single
comment|// loop/function, but the data doesn't linger around in case the selection
comment|// changes
name|QClipboard
modifier|*
name|that
init|=
operator|(
operator|(
name|QClipboard
operator|*
operator|)
name|this
operator|)
decl_stmt|;
name|timer_id
operator|=
name|that
operator|->
name|startTimer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|d
operator|->
name|source
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setMimeData
name|void
name|QClipboard
operator|::
name|setMimeData
parameter_list|(
name|QMimeData
modifier|*
name|src
parameter_list|,
name|Mode
name|mode
parameter_list|)
block|{
name|Atom
name|atom
decl_stmt|,
name|sentinel_atom
decl_stmt|;
name|QClipboardData
modifier|*
name|d
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|Selection
case|:
name|atom
operator|=
name|XA_PRIMARY
expr_stmt|;
name|sentinel_atom
operator|=
name|ATOM
argument_list|(
name|_QT_SELECTION_SENTINEL
argument_list|)
expr_stmt|;
name|d
operator|=
name|selectionData
argument_list|()
expr_stmt|;
break|break;
case|case
name|Clipboard
case|:
name|atom
operator|=
name|ATOM
argument_list|(
name|CLIPBOARD
argument_list|)
expr_stmt|;
name|sentinel_atom
operator|=
name|ATOM
argument_list|(
name|_QT_CLIPBOARD_SENTINEL
argument_list|)
expr_stmt|;
name|d
operator|=
name|clipboardData
argument_list|()
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"QClipboard::setMimeData: unsupported mode '%d'"
argument_list|,
name|mode
argument_list|)
expr_stmt|;
return|return;
block|}
name|Display
modifier|*
name|dpy
init|=
name|X11
operator|->
name|display
decl_stmt|;
name|Window
name|newOwner
decl_stmt|;
if|if
condition|(
operator|!
name|src
condition|)
block|{
comment|// no data, clear clipboard contents
name|newOwner
operator|=
name|XNone
expr_stmt|;
name|d
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setupOwner
argument_list|()
expr_stmt|;
name|newOwner
operator|=
name|owner
operator|->
name|internalWinId
argument_list|()
expr_stmt|;
name|d
operator|->
name|setSource
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|d
operator|->
name|timestamp
operator|=
name|X11
operator|->
name|time
expr_stmt|;
block|}
name|Window
name|prevOwner
init|=
name|XGetSelectionOwner
argument_list|(
name|dpy
argument_list|,
name|atom
argument_list|)
decl_stmt|;
comment|// use X11->time, since d->timestamp == CurrentTime when clearing
name|XSetSelectionOwner
argument_list|(
name|dpy
argument_list|,
name|atom
argument_list|,
name|newOwner
argument_list|,
name|X11
operator|->
name|time
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|Selection
condition|)
name|emitChanged
argument_list|(
name|QClipboard
operator|::
name|Selection
argument_list|)
expr_stmt|;
else|else
name|emitChanged
argument_list|(
name|QClipboard
operator|::
name|Clipboard
argument_list|)
expr_stmt|;
if|if
condition|(
name|XGetSelectionOwner
argument_list|(
name|dpy
argument_list|,
name|atom
argument_list|)
operator|!=
name|newOwner
condition|)
block|{
name|qWarning
argument_list|(
literal|"QClipboard::setData: Cannot set X11 selection owner for %s"
argument_list|,
name|X11
operator|->
name|xdndAtomToString
argument_list|(
name|atom
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|clear
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// Signal to other Qt processes that the selection has changed
name|Window
name|owners
index|[
literal|2
index|]
decl_stmt|;
name|owners
index|[
literal|0
index|]
operator|=
name|newOwner
expr_stmt|;
name|owners
index|[
literal|1
index|]
operator|=
name|prevOwner
expr_stmt|;
name|XChangeProperty
argument_list|(
name|dpy
argument_list|,
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screen
argument_list|(
literal|0
argument_list|)
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|sentinel_atom
argument_list|,
name|XA_WINDOW
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|&
name|owners
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   Called by the main event loop in qapplication_x11.cpp when either   the _QT_SELECTION_SENTINEL property has been changed (i.e. when some   Qt process has performed QClipboard::setData()) or when Xfixes told   us that an other application changed the selection. If it returns   true, the QClipBoard dataChanged() signal should be emitted. */
end_comment
begin_function
DECL|function|qt_check_selection_sentinel
name|bool
name|qt_check_selection_sentinel
parameter_list|()
block|{
name|bool
name|doIt
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|owner
operator|&&
operator|!
name|X11
operator|->
name|use_xfixes
condition|)
block|{
comment|/*           Since the X selection mechanism cannot give any signal when           the selection has changed, we emulate it (for Qt processes) here.           The notification should be ignored in case of either           a) This is the process that did setData (because setData()           then has already emitted dataChanged())           b) This is the process that owned the selection when dataChanged()           was called (because we have then received a SelectionClear event,           and have already emitted dataChanged() as a result of that)         */
name|unsigned
name|char
modifier|*
name|retval
decl_stmt|;
name|Atom
name|actualType
decl_stmt|;
name|int
name|actualFormat
decl_stmt|;
name|ulong
name|nitems
decl_stmt|;
name|ulong
name|bytesLeft
decl_stmt|;
if|if
condition|(
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screen
argument_list|(
literal|0
argument_list|)
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_QT_SELECTION_SENTINEL
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|False
argument_list|,
name|XA_WINDOW
argument_list|,
operator|&
name|actualType
argument_list|,
operator|&
name|actualFormat
argument_list|,
operator|&
name|nitems
argument_list|,
operator|&
name|bytesLeft
argument_list|,
operator|&
name|retval
argument_list|)
operator|==
name|Success
condition|)
block|{
name|Window
modifier|*
name|owners
init|=
operator|(
name|Window
operator|*
operator|)
name|retval
decl_stmt|;
if|if
condition|(
name|actualType
operator|==
name|XA_WINDOW
operator|&&
name|actualFormat
operator|==
literal|32
operator|&&
name|nitems
operator|==
literal|2
condition|)
block|{
name|Window
name|win
init|=
name|owner
operator|->
name|internalWinId
argument_list|()
decl_stmt|;
if|if
condition|(
name|owners
index|[
literal|0
index|]
operator|==
name|win
operator|||
name|owners
index|[
literal|1
index|]
operator|==
name|win
condition|)
name|doIt
operator|=
literal|false
expr_stmt|;
block|}
name|XFree
argument_list|(
name|owners
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doIt
condition|)
block|{
if|if
condition|(
name|waiting_for_data
condition|)
block|{
name|pending_selection_changed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|pending_timer_id
condition|)
name|pending_timer_id
operator|=
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|startTimer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|doIt
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|selectionData
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|doIt
return|;
block|}
end_function
begin_function
DECL|function|qt_check_clipboard_sentinel
name|bool
name|qt_check_clipboard_sentinel
parameter_list|()
block|{
name|bool
name|doIt
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|owner
operator|&&
operator|!
name|X11
operator|->
name|use_xfixes
condition|)
block|{
name|unsigned
name|char
modifier|*
name|retval
decl_stmt|;
name|Atom
name|actualType
decl_stmt|;
name|int
name|actualFormat
decl_stmt|;
name|unsigned
name|long
name|nitems
decl_stmt|,
name|bytesLeft
decl_stmt|;
if|if
condition|(
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screen
argument_list|(
literal|0
argument_list|)
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_QT_CLIPBOARD_SENTINEL
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|False
argument_list|,
name|XA_WINDOW
argument_list|,
operator|&
name|actualType
argument_list|,
operator|&
name|actualFormat
argument_list|,
operator|&
name|nitems
argument_list|,
operator|&
name|bytesLeft
argument_list|,
operator|&
name|retval
argument_list|)
operator|==
name|Success
condition|)
block|{
name|Window
modifier|*
name|owners
init|=
operator|(
name|Window
operator|*
operator|)
name|retval
decl_stmt|;
if|if
condition|(
name|actualType
operator|==
name|XA_WINDOW
operator|&&
name|actualFormat
operator|==
literal|32
operator|&&
name|nitems
operator|==
literal|2
condition|)
block|{
name|Window
name|win
init|=
name|owner
operator|->
name|internalWinId
argument_list|()
decl_stmt|;
if|if
condition|(
name|owners
index|[
literal|0
index|]
operator|==
name|win
operator|||
name|owners
index|[
literal|1
index|]
operator|==
name|win
condition|)
name|doIt
operator|=
literal|false
expr_stmt|;
block|}
name|XFree
argument_list|(
name|owners
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doIt
condition|)
block|{
if|if
condition|(
name|waiting_for_data
condition|)
block|{
name|pending_clipboard_changed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|pending_timer_id
condition|)
name|pending_timer_id
operator|=
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|startTimer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|doIt
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|clipboardData
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|doIt
return|;
block|}
end_function
begin_function
DECL|function|qt_xfixes_selection_changed
name|bool
name|qt_xfixes_selection_changed
parameter_list|(
name|Window
name|selectionOwner
parameter_list|,
name|Time
name|timestamp
parameter_list|)
block|{
name|QClipboardData
modifier|*
name|d
init|=
name|selectionData
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QCLIPBOARD_DEBUG
name|DEBUG
argument_list|(
literal|"qt_xfixes_selection_changed: owner = %u; selectionOwner = %u; internal timestamp = %u; external timestamp = %u"
argument_list|,
call|(
name|unsigned
name|int
call|)
argument_list|(
name|owner
condition|?
operator|(
name|int
operator|)
name|owner
operator|->
name|internalWinId
argument_list|()
else|:
literal|0
argument_list|)
argument_list|,
operator|(
name|unsigned
name|int
operator|)
name|selectionOwner
argument_list|,
call|(
name|unsigned
name|int
call|)
argument_list|(
name|d
condition|?
name|d
operator|->
name|timestamp
else|:
literal|0
argument_list|)
argument_list|,
operator|(
name|unsigned
name|int
operator|)
name|timestamp
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|owner
operator|||
operator|(
name|selectionOwner
operator|&&
name|selectionOwner
operator|!=
name|owner
operator|->
name|internalWinId
argument_list|()
operator|)
operator|||
operator|(
operator|!
name|selectionOwner
operator|&&
operator|(
name|d
operator|->
name|timestamp
operator|==
name|CurrentTime
operator|||
name|d
operator|->
name|timestamp
operator|<
name|timestamp
operator|)
operator|)
condition|)
return|return
name|qt_check_selection_sentinel
argument_list|()
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|qt_xfixes_clipboard_changed
name|bool
name|qt_xfixes_clipboard_changed
parameter_list|(
name|Window
name|clipboardOwner
parameter_list|,
name|Time
name|timestamp
parameter_list|)
block|{
name|QClipboardData
modifier|*
name|d
init|=
name|clipboardData
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QCLIPBOARD_DEBUG
name|DEBUG
argument_list|(
literal|"qt_xfixes_clipboard_changed: owner = %u; clipboardOwner = %u; internal timestamp = %u; external timestamp = %u"
argument_list|,
call|(
name|unsigned
name|int
call|)
argument_list|(
name|owner
condition|?
operator|(
name|int
operator|)
name|owner
operator|->
name|internalWinId
argument_list|()
else|:
literal|0
argument_list|)
argument_list|,
operator|(
name|unsigned
name|int
operator|)
name|clipboardOwner
argument_list|,
call|(
name|unsigned
name|int
call|)
argument_list|(
name|d
condition|?
name|d
operator|->
name|timestamp
else|:
literal|0
argument_list|)
argument_list|,
operator|(
name|unsigned
name|int
operator|)
name|timestamp
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|owner
operator|||
operator|(
name|clipboardOwner
operator|&&
name|clipboardOwner
operator|!=
name|owner
operator|->
name|internalWinId
argument_list|()
operator|)
operator|||
operator|(
operator|!
name|clipboardOwner
operator|&&
operator|(
name|d
operator|->
name|timestamp
operator|==
name|CurrentTime
operator|||
name|d
operator|->
name|timestamp
operator|<
name|timestamp
operator|)
operator|)
condition|)
return|return
name|qt_check_clipboard_sentinel
argument_list|()
return|;
return|return
literal|false
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CLIPBOARD
end_comment
end_unit
