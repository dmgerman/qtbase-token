begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qclipboard.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"qbuffer.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|<qwsdisplay_qws.h>
end_include
begin_include
include|#
directive|include
file|<qwsproperty_qws.h>
end_include
begin_include
include|#
directive|include
file|<qwsevent_qws.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|QT_USE_NAMESPACE
comment|/*****************************************************************************   Internal QClipboard functions for Qt for Embedded Linux  *****************************************************************************/
DECL|variable|TextClipboard
specifier|static
specifier|const
name|int
name|TextClipboard
init|=
literal|424242
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|init
specifier|static
name|bool
name|init
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qwsInitClipboard
specifier|static
specifier|inline
name|void
name|qwsInitClipboard
parameter_list|()
block|{
comment|//### this should go into QWSServer; it only needs to happen once.
if|if
condition|(
operator|!
name|init
condition|)
block|{
name|QPaintDevice
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|addProperty
argument_list|(
literal|0
argument_list|,
name|TextClipboard
argument_list|)
expr_stmt|;
name|init
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qwsClipboardText
specifier|static
name|QString
name|qwsClipboardText
parameter_list|()
block|{
name|char
modifier|*
name|data
decl_stmt|;
name|int
name|len
decl_stmt|;
name|qwsInitClipboard
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|QPaintDevice
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|getProperty
argument_list|(
literal|0
argument_list|,
name|TextClipboard
argument_list|,
name|data
argument_list|,
name|len
argument_list|)
condition|)
block|{
comment|//        qDebug("Property received: %d bytes", len);
block|}
name|QString
name|s
argument_list|(
operator|(
specifier|const
name|QChar
operator|*
operator|)
name|data
argument_list|,
name|len
operator|/
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
decl_stmt|;
comment|//       qDebug("Property received: '%s'", s.toAscii().constData());
operator|delete
index|[]
name|data
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_function
DECL|function|qwsSetClipboardText
specifier|static
name|void
name|qwsSetClipboardText
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
block|{
name|qwsInitClipboard
argument_list|()
expr_stmt|;
comment|//  qDebug("qwsSetClipboardText( %s )", s.toAscii().data());
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
decl_stmt|;
name|QByteArray
name|ba
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|s
operator|.
name|unicode
argument_list|()
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|QPaintDevice
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|setProperty
argument_list|(
literal|0
argument_list|,
name|TextClipboard
argument_list|,
name|QWSPropertyManager
operator|::
name|PropReplace
argument_list|,
name|ba
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QClipboardData
class|class
name|QClipboardData
block|{
public|public:
name|QClipboardData
parameter_list|()
constructor_decl|;
name|~
name|QClipboardData
parameter_list|()
destructor_decl|;
DECL|function|setSource
name|void
name|setSource
parameter_list|(
name|QMimeData
modifier|*
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
name|src
condition|)
return|return;
operator|delete
name|src
expr_stmt|;
name|src
operator|=
name|s
expr_stmt|;
block|}
DECL|function|source
name|QMimeData
modifier|*
name|source
parameter_list|()
block|{
return|return
name|src
return|;
block|}
if|#
directive|if
literal|0
public|void addTransferredPixmap(QPixmap pm)         {
comment|/* TODO: queue them */
public|transferred[tindex] = pm;             tindex=(tindex+1)%2;         }     void clearTransfers()         {             transferred[0] = QPixmap();             transferred[1] = QPixmap();         }
endif|#
directive|endif
name|void
name|clear
parameter_list|()
function_decl|;
private|private:
DECL|member|src
name|QMimeData
modifier|*
name|src
decl_stmt|;
if|#
directive|if
literal|0
private|QPixmap transferred[2];     int tindex;
endif|#
directive|endif
block|}
class|;
end_class
begin_constructor
DECL|function|QClipboardData
name|QClipboardData
operator|::
name|QClipboardData
parameter_list|()
block|{
name|src
operator|=
literal|0
expr_stmt|;
if|#
directive|if
literal|0
block|tindex=0;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QClipboardData
name|QClipboardData
operator|::
name|~
name|QClipboardData
parameter_list|()
block|{
operator|delete
name|src
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|clear
name|void
name|QClipboardData
operator|::
name|clear
parameter_list|()
block|{
operator|delete
name|src
expr_stmt|;
name|src
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|internalCbData
specifier|static
name|QClipboardData
modifier|*
name|internalCbData
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|cleanupClipboardData
specifier|static
name|void
name|cleanupClipboardData
parameter_list|()
block|{
operator|delete
name|internalCbData
expr_stmt|;
name|internalCbData
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clipboardData
specifier|static
name|QClipboardData
modifier|*
name|clipboardData
parameter_list|()
block|{
if|if
condition|(
name|internalCbData
operator|==
literal|0
condition|)
block|{
name|internalCbData
operator|=
operator|new
name|QClipboardData
expr_stmt|;
name|qAddPostRoutine
argument_list|(
name|cleanupClipboardData
argument_list|)
expr_stmt|;
block|}
return|return
name|internalCbData
return|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   QClipboard member functions for FB.  *****************************************************************************/
end_comment
begin_if
if|#
directive|if
literal|0
end_if
begin_endif
unit|QString QClipboard::text() const {     return qwsClipboardText(); }  void QClipboard::setText(const QString&text) {     qwsSetClipboardText(text); }  QString QClipboard::text(QString& subtype) const {     QString r;     if (subtype == "plain")         r = text();     return r; }
endif|#
directive|endif
end_endif
begin_function
DECL|function|clear
name|void
name|QClipboard
operator|::
name|clear
parameter_list|(
name|Mode
name|mode
parameter_list|)
block|{
name|setText
argument_list|(
name|QString
argument_list|()
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|event
name|bool
name|QClipboard
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
specifier|static
name|bool
name|recursionWatch
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|!=
name|QEvent
operator|::
name|Clipboard
operator|||
name|recursionWatch
condition|)
return|return
name|QObject
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
name|recursionWatch
operator|=
literal|true
expr_stmt|;
name|QWSPropertyNotifyEvent
modifier|*
name|event
init|=
operator|(
name|QWSPropertyNotifyEvent
operator|*
operator|)
operator|(
operator|(
operator|(
name|QClipboardEvent
operator|*
operator|)
name|e
operator|)
operator|->
name|data
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|event
operator|&&
name|event
operator|->
name|simpleData
operator|.
name|state
operator|==
name|QWSPropertyNotifyEvent
operator|::
name|PropertyNewValue
condition|)
block|{
name|QClipboardData
modifier|*
name|d
init|=
name|clipboardData
argument_list|()
decl_stmt|;
name|QString
name|t
init|=
name|qwsClipboardText
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|d
operator|->
name|source
argument_list|()
operator|==
literal|0
operator|&&
operator|!
name|t
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|d
operator|->
name|source
argument_list|()
operator|!=
literal|0
operator|&&
name|d
operator|->
name|source
argument_list|()
operator|->
name|text
argument_list|()
operator|!=
name|t
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|source
argument_list|()
condition|)
name|d
operator|->
name|setSource
argument_list|(
operator|new
name|QMimeData
argument_list|)
expr_stmt|;
name|d
operator|->
name|source
argument_list|()
operator|->
name|setText
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|emitChanged
argument_list|(
name|QClipboard
operator|::
name|Clipboard
argument_list|)
expr_stmt|;
block|}
block|}
name|recursionWatch
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|mimeData
specifier|const
name|QMimeData
modifier|*
name|QClipboard
operator|::
name|mimeData
parameter_list|(
name|Mode
name|mode
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|mode
operator|!=
name|Clipboard
condition|)
return|return
literal|0
return|;
name|QClipboardData
modifier|*
name|d
init|=
name|clipboardData
argument_list|()
decl_stmt|;
comment|// Try and get data from QWSProperty if no mime data has been set on us.
if|if
condition|(
operator|!
name|d
operator|->
name|source
argument_list|()
condition|)
block|{
name|QString
name|t
init|=
name|qwsClipboardText
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QMimeData
modifier|*
name|nd
init|=
operator|new
name|QMimeData
decl_stmt|;
name|nd
operator|->
name|setText
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|d
operator|->
name|setSource
argument_list|(
name|nd
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|d
operator|->
name|source
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setMimeData
name|void
name|QClipboard
operator|::
name|setMimeData
parameter_list|(
name|QMimeData
modifier|*
name|src
parameter_list|,
name|Mode
name|mode
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|!=
name|Clipboard
condition|)
return|return;
name|QClipboardData
modifier|*
name|d
init|=
name|clipboardData
argument_list|()
decl_stmt|;
comment|/* Propagate text data to other QWSClients */
name|QString
name|newText
decl_stmt|;
if|if
condition|(
name|src
operator|!=
literal|0
condition|)
name|newText
operator|=
name|src
operator|->
name|text
argument_list|()
expr_stmt|;
name|QString
name|oldText
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|source
argument_list|()
operator|!=
literal|0
condition|)
name|oldText
operator|=
name|d
operator|->
name|source
argument_list|()
operator|->
name|text
argument_list|()
expr_stmt|;
name|d
operator|->
name|setSource
argument_list|(
name|src
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldText
operator|!=
name|newText
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|source
argument_list|()
operator|==
literal|0
condition|)
block|{
name|qwsSetClipboardText
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qwsSetClipboardText
argument_list|(
name|d
operator|->
name|source
argument_list|()
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|emitChanged
argument_list|(
name|QClipboard
operator|::
name|Clipboard
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|supportsMode
name|bool
name|QClipboard
operator|::
name|supportsMode
parameter_list|(
name|Mode
name|mode
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|mode
operator|==
name|Clipboard
operator|)
return|;
block|}
end_function
begin_function
DECL|function|ownsMode
name|bool
name|QClipboard
operator|::
name|ownsMode
parameter_list|(
name|Mode
name|mode
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|mode
operator|==
name|Clipboard
condition|)
name|qWarning
argument_list|(
literal|"QClipboard::ownsClipboard: UNIMPLEMENTED!"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|connectNotify
name|void
name|QClipboard
operator|::
name|connectNotify
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|ownerDestroyed
name|void
name|QClipboard
operator|::
name|ownerDestroyed
parameter_list|()
block|{ }
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CLIPBOARD
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
