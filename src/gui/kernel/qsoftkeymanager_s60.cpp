begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qstyle.h"
end_include
begin_include
include|#
directive|include
file|"qmenubar.h"
end_include
begin_include
include|#
directive|include
file|"private/qt_s60_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qmenu_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qaction_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qsoftkeymanager_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qsoftkeymanager_s60_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qobject_p.h"
end_include
begin_include
include|#
directive|include
file|<eiksoftkeyimage.h>
end_include
begin_include
include|#
directive|include
file|<eikcmbut.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SOFTKEYMANAGER
end_ifndef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|S60_COMMAND_START
specifier|const
name|int
name|S60_COMMAND_START
init|=
literal|6000
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|LSK_POSITION
specifier|const
name|int
name|LSK_POSITION
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|MSK_POSITION
specifier|const
name|int
name|MSK_POSITION
init|=
literal|3
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|RSK_POSITION
specifier|const
name|int
name|RSK_POSITION
init|=
literal|2
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QSoftKeyManagerPrivateS60
name|QSoftKeyManagerPrivateS60
operator|::
name|QSoftKeyManagerPrivateS60
parameter_list|()
member_init_list|:
name|cbaHasImage
argument_list|(
literal|4
argument_list|)
comment|// 4 since MSK position index is 3
block|{
name|cachedCbaIconSize
index|[
literal|0
index|]
operator|=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cachedCbaIconSize
index|[
literal|1
index|]
operator|=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cachedCbaIconSize
index|[
literal|2
index|]
operator|=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cachedCbaIconSize
index|[
literal|3
index|]
operator|=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|skipCbaUpdate
name|bool
name|QSoftKeyManagerPrivateS60
operator|::
name|skipCbaUpdate
parameter_list|()
block|{
comment|// Lets not update softkeys if
comment|// 1. We don't have application panes, i.e. cba
comment|// 2. Our CBA is not active, i.e. S60 native dialog or menu with custom CBA is shown
comment|//    2.1. Except if thre is no current CBA at all and WindowSoftkeysRespondHint is set
comment|// Note: Cannot use IsDisplayingMenuOrDialog since CBA update can be triggered before
comment|// menu/dialog CBA is actually displayed i.e. it is being costructed.
name|CEikButtonGroupContainer
modifier|*
name|appUiCba
init|=
name|S60
operator|->
name|buttonGroupContainer
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|appUiCba
condition|)
return|return
literal|true
return|;
comment|// CEikButtonGroupContainer::Current returns 0 if CBA is not visible at all
name|CEikButtonGroupContainer
modifier|*
name|currentCba
init|=
name|CEikButtonGroupContainer
operator|::
name|Current
argument_list|()
decl_stmt|;
comment|// Check if softkey need to be update even they are not visible
name|bool
name|cbaRespondsWhenInvisible
init|=
literal|false
decl_stmt|;
name|QWidget
modifier|*
name|window
init|=
name|QApplication
operator|::
name|activeWindow
argument_list|()
decl_stmt|;
if|if
condition|(
name|window
operator|&&
operator|(
name|window
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowSoftkeysRespondHint
operator|)
condition|)
name|cbaRespondsWhenInvisible
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_S60DontConstructApplicationPanes
argument_list|)
operator|||
operator|(
name|appUiCba
operator|!=
name|currentCba
operator|&&
operator|!
name|cbaRespondsWhenInvisible
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|ensureCbaVisibilityAndResponsiviness
name|void
name|QSoftKeyManagerPrivateS60
operator|::
name|ensureCbaVisibilityAndResponsiviness
parameter_list|(
name|CEikButtonGroupContainer
modifier|&
name|cba
parameter_list|)
block|{
name|RDrawableWindow
modifier|*
name|cbaWindow
init|=
name|cba
operator|.
name|DrawableWindow
argument_list|()
decl_stmt|;
name|Q_ASSERT_X
argument_list|(
name|cbaWindow
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"Native CBA does not have window!"
argument_list|)
expr_stmt|;
comment|// Make sure CBA is visible, i.e. CBA window is on top
name|cbaWindow
operator|->
name|SetOrdinalPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Qt shares same CBA instance between top-level widgets,
comment|// make sure we are not faded by underlying window.
name|cbaWindow
operator|->
name|SetFaded
argument_list|(
name|EFalse
argument_list|,
name|RWindowTreeNode
operator|::
name|EFadeIncludeChildren
argument_list|)
expr_stmt|;
comment|// Modal dialogs capture pointer events, but shared cba instance
comment|// shall stay responsive. Raise pointer capture priority to keep
comment|// softkeys responsive in modal dialogs
name|cbaWindow
operator|->
name|SetPointerCapturePriority
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearSoftkeys
name|void
name|QSoftKeyManagerPrivateS60
operator|::
name|clearSoftkeys
parameter_list|(
name|CEikButtonGroupContainer
modifier|&
name|cba
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|SYMBIAN_VERSION_SYMBIAN3
name|QT_TRAP_THROWING
argument_list|(
comment|//EAknSoftkeyEmpty is used, because using -1 adds softkeys without actions on Symbian3
argument|cba.SetCommandL(
literal|0
argument|, EAknSoftkeyEmpty, KNullDesC);         cba.SetCommandL(
literal|2
argument|, EAknSoftkeyEmpty, KNullDesC);
argument_list|)
empty_stmt|;
else|#
directive|else
name|QT_TRAP_THROWING
argument_list|(
comment|//Using -1 instead of EAknSoftkeyEmpty to avoid flickering.
argument|cba.SetCommandL(
literal|0
argument|, -
literal|1
argument|, KNullDesC);
comment|// TODO: Should we clear also middle SK?
argument|cba.SetCommandL(
literal|2
argument|, -
literal|1
argument|, KNullDesC);
argument_list|)
empty_stmt|;
endif|#
directive|endif
name|realSoftKeyActions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|softkeyText
name|QString
name|QSoftKeyManagerPrivateS60
operator|::
name|softkeyText
parameter_list|(
name|QAction
modifier|&
name|softkeyAction
parameter_list|)
block|{
comment|// In S60 softkeys and menu items do not support key accelerators (i.e.
comment|// CTRL+X). Therefore, removing the accelerator characters from both softkey
comment|// and menu item texts.
specifier|const
name|int
name|underlineShortCut
init|=
name|QApplication
operator|::
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_UnderlineShortcut
argument_list|)
decl_stmt|;
name|QString
name|iconText
init|=
name|softkeyAction
operator|.
name|iconText
argument_list|()
decl_stmt|;
return|return
name|underlineShortCut
condition|?
name|softkeyAction
operator|.
name|text
argument_list|()
else|:
name|iconText
return|;
block|}
end_function
begin_function
DECL|function|highestPrioritySoftkey
name|QAction
modifier|*
name|QSoftKeyManagerPrivateS60
operator|::
name|highestPrioritySoftkey
parameter_list|(
name|QAction
operator|::
name|SoftKeyRole
name|role
parameter_list|)
block|{
name|QAction
modifier|*
name|ret
init|=
name|NULL
decl_stmt|;
comment|// Priority look up is two level
comment|// 1. First widget with softkeys always has highest priority
for|for
control|(
name|int
name|level
init|=
literal|0
init|;
operator|!
name|ret
condition|;
name|level
operator|++
control|)
block|{
comment|// 2. Highest priority action within widget
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|actions
init|=
name|requestedSoftKeyActions
operator|.
name|values
argument_list|(
name|level
argument_list|)
decl_stmt|;
if|if
condition|(
name|actions
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
name|qSort
argument_list|(
name|actions
operator|.
name|begin
argument_list|()
argument_list|,
name|actions
operator|.
name|end
argument_list|()
argument_list|,
name|QSoftKeyManagerPrivateS60
operator|::
name|actionPriorityMoreThan
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QAction
modifier|*
name|action
decl|,
name|actions
control|)
block|{
if|if
condition|(
name|action
operator|->
name|softKeyRole
argument_list|()
operator|==
name|role
condition|)
block|{
name|ret
operator|=
name|action
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|actionPriorityMoreThan
name|bool
name|QSoftKeyManagerPrivateS60
operator|::
name|actionPriorityMoreThan
parameter_list|(
specifier|const
name|QAction
modifier|*
name|firstItem
parameter_list|,
specifier|const
name|QAction
modifier|*
name|secondItem
parameter_list|)
block|{
return|return
name|firstItem
operator|->
name|priority
argument_list|()
operator|>
name|secondItem
operator|->
name|priority
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setNativeSoftkey
name|void
name|QSoftKeyManagerPrivateS60
operator|::
name|setNativeSoftkey
parameter_list|(
name|CEikButtonGroupContainer
modifier|&
name|cba
parameter_list|,
name|TInt
name|position
parameter_list|,
name|TInt
name|command
parameter_list|,
specifier|const
name|TDesC
modifier|&
name|text
parameter_list|)
block|{
comment|// Calling SetCommandL causes CBA redraw
name|QT_TRAP_THROWING
argument_list|(
name|cba
operator|.
name|SetCommandL
argument_list|(
name|position
argument_list|,
name|command
argument_list|,
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|softkeyIconPosition
name|QPoint
name|QSoftKeyManagerPrivateS60
operator|::
name|softkeyIconPosition
parameter_list|(
name|int
name|position
parameter_list|,
name|QSize
name|sourceSize
parameter_list|,
name|QSize
name|targetSize
parameter_list|)
block|{
name|QPoint
name|iconPosition
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|AknLayoutUtils
operator|::
name|CbaLocation
argument_list|()
condition|)
block|{
case|case
name|AknLayoutUtils
operator|::
name|EAknCbaLocationBottom
case|:
comment|// RSK must be moved to right, LSK in on correct position by default
if|if
condition|(
name|position
operator|==
name|RSK_POSITION
condition|)
name|iconPosition
operator|.
name|setX
argument_list|(
name|targetSize
operator|.
name|width
argument_list|()
operator|-
name|sourceSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|AknLayoutUtils
operator|::
name|EAknCbaLocationRight
case|:
case|case
name|AknLayoutUtils
operator|::
name|EAknCbaLocationLeft
case|:
comment|// Already in correct position
default|default:
break|break;
block|}
comment|// Align horizontally to center
name|iconPosition
operator|.
name|setY
argument_list|(
operator|(
name|targetSize
operator|.
name|height
argument_list|()
operator|-
name|sourceSize
operator|.
name|height
argument_list|()
operator|)
operator|>>
literal|1
argument_list|)
expr_stmt|;
return|return
name|iconPosition
return|;
block|}
end_function
begin_function
DECL|function|prepareSoftkeyPixmap
name|QPixmap
name|QSoftKeyManagerPrivateS60
operator|::
name|prepareSoftkeyPixmap
parameter_list|(
name|QPixmap
name|src
parameter_list|,
name|int
name|position
parameter_list|,
name|QSize
name|targetSize
parameter_list|)
block|{
name|QPixmap
name|target
argument_list|(
name|targetSize
argument_list|)
decl_stmt|;
name|target
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QPainter
name|p
decl_stmt|;
name|p
operator|.
name|begin
argument_list|(
operator|&
name|target
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|softkeyIconPosition
argument_list|(
name|position
argument_list|,
name|src
operator|.
name|size
argument_list|()
argument_list|,
name|targetSize
argument_list|)
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
return|return
name|target
return|;
block|}
end_function
begin_function
DECL|function|isOrientationLandscape
name|bool
name|QSoftKeyManagerPrivateS60
operator|::
name|isOrientationLandscape
parameter_list|()
block|{
comment|// Hard to believe that there is no public API in S60 to
comment|// get current orientation. This workaround works with currently supported resolutions
return|return
name|S60
operator|->
name|screenHeightInPixels
operator|<
name|S60
operator|->
name|screenWidthInPixels
return|;
block|}
end_function
begin_function
DECL|function|cbaIconSize
name|QSize
name|QSoftKeyManagerPrivateS60
operator|::
name|cbaIconSize
parameter_list|(
name|CEikButtonGroupContainer
modifier|*
name|cba
parameter_list|,
name|int
name|position
parameter_list|)
block|{
name|int
name|index
init|=
name|position
decl_stmt|;
name|index
operator|+=
name|isOrientationLandscape
argument_list|()
condition|?
literal|0
else|:
literal|1
expr_stmt|;
if|if
condition|(
name|cachedCbaIconSize
index|[
name|index
index|]
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// Only way I figured out to get CBA icon size without RnD SDK, was
comment|// to set some dummy icon to CBA first and then ask CBA button CCoeControl::Size()
comment|// The returned value is cached to avoid unnecessary icon setting every time.
specifier|const
name|bool
name|left
init|=
operator|(
name|position
operator|==
name|LSK_POSITION
operator|)
decl_stmt|;
if|if
condition|(
name|position
operator|==
name|LSK_POSITION
operator|||
name|position
operator|==
name|RSK_POSITION
condition|)
block|{
name|CEikImage
modifier|*
name|tmpImage
init|=
name|NULL
decl_stmt|;
name|QT_TRAP_THROWING
argument_list|(
name|tmpImage
operator|=
operator|new
operator|(
name|ELeave
operator|)
name|CEikImage
argument_list|)
expr_stmt|;
name|EikSoftkeyImage
operator|::
name|SetImage
argument_list|(
name|cba
argument_list|,
operator|*
name|tmpImage
argument_list|,
name|left
argument_list|)
expr_stmt|;
comment|// Takes myimage ownership
name|int
name|command
init|=
name|S60_COMMAND_START
operator|+
name|position
decl_stmt|;
name|setNativeSoftkey
argument_list|(
operator|*
name|cba
argument_list|,
name|position
argument_list|,
name|command
argument_list|,
name|KNullDesC
argument_list|()
argument_list|)
expr_stmt|;
name|cachedCbaIconSize
index|[
name|index
index|]
operator|=
name|qt_TSize2QSize
argument_list|(
name|cba
operator|->
name|ControlOrNull
argument_list|(
name|command
argument_list|)
operator|->
name|Size
argument_list|()
argument_list|)
expr_stmt|;
name|EikSoftkeyImage
operator|::
name|SetLabel
argument_list|(
name|cba
argument_list|,
name|left
argument_list|)
expr_stmt|;
if|if
condition|(
name|cachedCbaIconSize
index|[
name|index
index|]
operator|==
name|QSize
argument_list|(
literal|138
argument_list|,
literal|72
argument_list|)
condition|)
block|{
comment|// Hack for S60 5.0 (5800) landscape orientation, which return wrong icon size
name|cachedCbaIconSize
index|[
name|index
index|]
operator|=
name|QSize
argument_list|(
literal|60
argument_list|,
literal|60
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|cachedCbaIconSize
index|[
name|index
index|]
return|;
block|}
end_function
begin_function
DECL|function|setSoftkeyImage
name|bool
name|QSoftKeyManagerPrivateS60
operator|::
name|setSoftkeyImage
parameter_list|(
name|CEikButtonGroupContainer
modifier|*
name|cba
parameter_list|,
name|QAction
modifier|&
name|action
parameter_list|,
name|int
name|position
parameter_list|)
block|{
name|bool
name|ret
init|=
literal|false
decl_stmt|;
specifier|const
name|bool
name|left
init|=
operator|(
name|position
operator|==
name|LSK_POSITION
operator|)
decl_stmt|;
if|if
condition|(
name|position
operator|==
name|LSK_POSITION
operator|||
name|position
operator|==
name|RSK_POSITION
condition|)
block|{
name|QIcon
name|icon
init|=
name|action
operator|.
name|icon
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// Get size of CBA icon area based on button position and orientation
name|QSize
name|requiredIconSize
init|=
name|cbaIconSize
argument_list|(
name|cba
argument_list|,
name|position
argument_list|)
decl_stmt|;
comment|// Get pixmap out of icon based on preferred size, the aspect ratio is kept
name|QPixmap
name|pmWihtAspectRatio
init|=
name|icon
operator|.
name|pixmap
argument_list|(
name|requiredIconSize
argument_list|)
decl_stmt|;
comment|// Native softkeys require that pixmap size is exactly the same as requiredIconSize
comment|// prepareSoftkeyPixmap creates a new pixmap with requiredIconSize and blits the 'pmWihtAspectRatio'
comment|// to correct location of it
name|QPixmap
name|softkeyPixmap
init|=
name|prepareSoftkeyPixmap
argument_list|(
name|pmWihtAspectRatio
argument_list|,
name|position
argument_list|,
name|requiredIconSize
argument_list|)
decl_stmt|;
name|QPixmap
name|softkeyAlpha
init|=
name|softkeyPixmap
operator|.
name|alphaChannel
argument_list|()
decl_stmt|;
comment|// Alpha channel in 5.1 and older devices need to be inverted
comment|// TODO: Switch to use toSymbianCFbsBitmap with invert when available
if|if
condition|(
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|<=
name|QSysInfo
operator|::
name|SV_S60_5_1
condition|)
block|{
name|QImage
name|alphaImage
init|=
name|softkeyAlpha
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|alphaImage
operator|.
name|invertPixels
argument_list|()
expr_stmt|;
name|softkeyAlpha
operator|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|alphaImage
argument_list|)
expr_stmt|;
block|}
name|CFbsBitmap
modifier|*
name|nBitmap
init|=
name|softkeyPixmap
operator|.
name|toSymbianCFbsBitmap
argument_list|()
decl_stmt|;
name|CFbsBitmap
modifier|*
name|nMask
init|=
name|softkeyAlpha
operator|.
name|toSymbianCFbsBitmap
argument_list|()
decl_stmt|;
name|CEikImage
modifier|*
name|myimage
init|=
operator|new
operator|(
name|ELeave
operator|)
name|CEikImage
decl_stmt|;
name|myimage
operator|->
name|SetPicture
argument_list|(
name|nBitmap
argument_list|,
name|nMask
argument_list|)
expr_stmt|;
comment|// nBitmap and nMask ownership transferred
name|EikSoftkeyImage
operator|::
name|SetImage
argument_list|(
name|cba
argument_list|,
operator|*
name|myimage
argument_list|,
name|left
argument_list|)
expr_stmt|;
comment|// Takes myimage ownership
name|cbaHasImage
index|[
name|position
index|]
operator|=
literal|true
expr_stmt|;
name|ret
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Restore softkey to text based
if|if
condition|(
name|cbaHasImage
index|[
name|position
index|]
condition|)
block|{
name|EikSoftkeyImage
operator|::
name|SetLabel
argument_list|(
name|cba
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|cbaHasImage
index|[
name|position
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|setSoftkey
name|bool
name|QSoftKeyManagerPrivateS60
operator|::
name|setSoftkey
parameter_list|(
name|CEikButtonGroupContainer
modifier|&
name|cba
parameter_list|,
name|QAction
operator|::
name|SoftKeyRole
name|role
parameter_list|,
name|int
name|position
parameter_list|)
block|{
name|QAction
modifier|*
name|action
init|=
name|highestPrioritySoftkey
argument_list|(
name|role
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
condition|)
block|{
name|setSoftkeyImage
argument_list|(
operator|&
name|cba
argument_list|,
operator|*
name|action
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|QString
name|text
init|=
name|softkeyText
argument_list|(
operator|*
name|action
argument_list|)
decl_stmt|;
name|TPtrC
name|nativeText
init|=
name|qt_QString2TPtrC
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|int
name|command
init|=
name|S60_COMMAND_START
operator|+
name|position
decl_stmt|;
ifdef|#
directive|ifdef
name|SYMBIAN_VERSION_SYMBIAN3
if|if
condition|(
name|softKeyCommandActions
operator|.
name|contains
argument_list|(
name|action
argument_list|)
condition|)
name|command
operator|=
name|softKeyCommandActions
operator|.
name|value
argument_list|(
name|action
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|setNativeSoftkey
argument_list|(
name|cba
argument_list|,
name|position
argument_list|,
name|command
argument_list|,
name|nativeText
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|dimmed
init|=
operator|!
name|action
operator|->
name|isEnabled
argument_list|()
operator|&&
operator|!
name|QSoftKeyManager
operator|::
name|isForceEnabledInSofkeys
argument_list|(
name|action
argument_list|)
decl_stmt|;
name|cba
operator|.
name|DimCommand
argument_list|(
name|command
argument_list|,
name|dimmed
argument_list|)
expr_stmt|;
name|realSoftKeyActions
operator|.
name|insert
argument_list|(
name|command
argument_list|,
name|action
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|setLeftSoftkey
name|bool
name|QSoftKeyManagerPrivateS60
operator|::
name|setLeftSoftkey
parameter_list|(
name|CEikButtonGroupContainer
modifier|&
name|cba
parameter_list|)
block|{
return|return
name|setSoftkey
argument_list|(
name|cba
argument_list|,
name|QAction
operator|::
name|PositiveSoftKey
argument_list|,
name|LSK_POSITION
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setMiddleSoftkey
name|bool
name|QSoftKeyManagerPrivateS60
operator|::
name|setMiddleSoftkey
parameter_list|(
name|CEikButtonGroupContainer
modifier|&
name|cba
parameter_list|)
block|{
comment|// Note: In order to get MSK working, application has to have EAknEnableMSK flag set
comment|// Currently it is not possible very easily)
comment|// For more information see: http://wiki.forum.nokia.com/index.php/Middle_softkey_usage
return|return
name|setSoftkey
argument_list|(
name|cba
argument_list|,
name|QAction
operator|::
name|SelectSoftKey
argument_list|,
name|MSK_POSITION
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setRightSoftkey
name|bool
name|QSoftKeyManagerPrivateS60
operator|::
name|setRightSoftkey
parameter_list|(
name|CEikButtonGroupContainer
modifier|&
name|cba
parameter_list|)
block|{
if|if
condition|(
operator|!
name|setSoftkey
argument_list|(
name|cba
argument_list|,
name|QAction
operator|::
name|NegativeSoftKey
argument_list|,
name|RSK_POSITION
argument_list|)
condition|)
block|{
specifier|const
name|Qt
operator|::
name|WindowType
name|windowType
init|=
name|initialSoftKeySource
condition|?
name|initialSoftKeySource
operator|->
name|window
argument_list|()
operator|->
name|windowType
argument_list|()
else|:
name|Qt
operator|::
name|Window
decl_stmt|;
if|if
condition|(
name|windowType
operator|!=
name|Qt
operator|::
name|Dialog
operator|&&
name|windowType
operator|!=
name|Qt
operator|::
name|Popup
condition|)
block|{
name|QString
name|text
argument_list|(
name|QSoftKeyManager
operator|::
name|tr
argument_list|(
literal|"Exit"
argument_list|)
argument_list|)
decl_stmt|;
name|TPtrC
name|nativeText
init|=
name|qt_QString2TPtrC
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|cbaHasImage
index|[
name|RSK_POSITION
index|]
condition|)
block|{
name|EikSoftkeyImage
operator|::
name|SetLabel
argument_list|(
operator|&
name|cba
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cbaHasImage
index|[
name|RSK_POSITION
index|]
operator|=
literal|false
expr_stmt|;
block|}
name|setNativeSoftkey
argument_list|(
name|cba
argument_list|,
name|RSK_POSITION
argument_list|,
name|EAknSoftkeyExit
argument_list|,
name|nativeText
argument_list|)
expr_stmt|;
name|cba
operator|.
name|DimCommand
argument_list|(
name|EAknSoftkeyExit
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|setSoftkeys
name|void
name|QSoftKeyManagerPrivateS60
operator|::
name|setSoftkeys
parameter_list|(
name|CEikButtonGroupContainer
modifier|&
name|cba
parameter_list|)
block|{
name|int
name|requestedSoftkeyCount
init|=
name|requestedSoftKeyActions
operator|.
name|count
argument_list|()
decl_stmt|;
specifier|const
name|int
name|maxSoftkeyCount
init|=
literal|2
decl_stmt|;
comment|// TODO: differs based on orientation ans S60 versions (some have MSK)
if|if
condition|(
name|requestedSoftkeyCount
operator|>
name|maxSoftkeyCount
condition|)
block|{
comment|// We have more softkeys than available slots
comment|// Put highest priority negative action to RSK and Options menu with rest of softkey actions to LSK
comment|// TODO: Build menu
name|setLeftSoftkey
argument_list|(
name|cba
argument_list|)
expr_stmt|;
if|if
condition|(
name|AknLayoutUtils
operator|::
name|MSKEnabled
argument_list|()
condition|)
name|setMiddleSoftkey
argument_list|(
name|cba
argument_list|)
expr_stmt|;
name|setRightSoftkey
argument_list|(
name|cba
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We have less softkeys than available slots
comment|// Put softkeys to request slots based on role
name|setLeftSoftkey
argument_list|(
name|cba
argument_list|)
expr_stmt|;
if|if
condition|(
name|AknLayoutUtils
operator|::
name|MSKEnabled
argument_list|()
condition|)
name|setMiddleSoftkey
argument_list|(
name|cba
argument_list|)
expr_stmt|;
name|setRightSoftkey
argument_list|(
name|cba
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateSoftKeys_sys
name|void
name|QSoftKeyManagerPrivateS60
operator|::
name|updateSoftKeys_sys
parameter_list|()
block|{
if|if
condition|(
name|skipCbaUpdate
argument_list|()
condition|)
return|return;
name|CEikButtonGroupContainer
modifier|*
name|nativeContainer
init|=
name|S60
operator|->
name|buttonGroupContainer
argument_list|()
decl_stmt|;
name|Q_ASSERT_X
argument_list|(
name|nativeContainer
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"Native CBA does not exist!"
argument_list|)
expr_stmt|;
name|ensureCbaVisibilityAndResponsiviness
argument_list|(
operator|*
name|nativeContainer
argument_list|)
expr_stmt|;
name|clearSoftkeys
argument_list|(
operator|*
name|nativeContainer
argument_list|)
expr_stmt|;
name|setSoftkeys
argument_list|(
operator|*
name|nativeContainer
argument_list|)
expr_stmt|;
name|nativeContainer
operator|->
name|DrawDeferred
argument_list|()
expr_stmt|;
comment|// 3.1 needs an extra invitation
block|}
end_function
begin_function
DECL|function|resetMenuBeingConstructed
specifier|static
name|void
name|resetMenuBeingConstructed
parameter_list|(
name|TAny
modifier|*
comment|/*aAny*/
parameter_list|)
block|{
name|S60
operator|->
name|menuBeingConstructed
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tryDisplayMenuBarL
name|void
name|QSoftKeyManagerPrivateS60
operator|::
name|tryDisplayMenuBarL
parameter_list|()
block|{
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|TCleanupItem
argument_list|(
name|resetMenuBeingConstructed
argument_list|,
name|NULL
argument_list|)
argument_list|)
expr_stmt|;
name|S60
operator|->
name|menuBeingConstructed
operator|=
literal|true
expr_stmt|;
name|S60
operator|->
name|menuBar
argument_list|()
operator|->
name|TryDisplayMenuBarL
argument_list|()
expr_stmt|;
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|()
expr_stmt|;
comment|// Reset menuBeingConstructed to false in all cases
block|}
end_function
begin_function
DECL|function|handleCommand
name|bool
name|QSoftKeyManagerPrivateS60
operator|::
name|handleCommand
parameter_list|(
name|int
name|command
parameter_list|)
block|{
name|QAction
modifier|*
name|action
init|=
name|realSoftKeyActions
operator|.
name|value
argument_list|(
name|command
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
condition|)
block|{
name|bool
name|property
init|=
name|QActionPrivate
operator|::
name|get
argument_list|(
name|action
argument_list|)
operator|->
name|menuActionSoftkeys
decl_stmt|;
if|if
condition|(
name|property
condition|)
block|{
name|QT_TRAP_THROWING
argument_list|(
name|tryDisplayMenuBarL
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|->
name|menu
argument_list|()
condition|)
block|{
comment|// TODO: This is hack, in order to use exising QMenuBar implementation for Symbian
comment|// menubar needs to have widget to which it is associated. Since we want to associate
comment|// menubar to action (which is inherited from QObject), we create and associate QWidget
comment|// to action and pass that for QMenuBar. This associates the menubar to action, and we
comment|// can have own menubar for each action.
name|QWidget
modifier|*
name|actionContainer
init|=
name|action
operator|->
name|property
argument_list|(
literal|"_q_action_widget"
argument_list|)
operator|.
name|value
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|actionContainer
condition|)
block|{
name|actionContainer
operator|=
operator|new
name|QWidget
argument_list|(
name|action
operator|->
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QMenuBar
modifier|*
name|menuBar
init|=
operator|new
name|QMenuBar
argument_list|(
name|actionContainer
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QAction
modifier|*
name|menuAction
decl|,
name|action
operator|->
name|menu
argument_list|()
operator|->
name|actions
argument_list|()
control|)
block|{
name|QMenu
modifier|*
name|menu
init|=
name|menuAction
operator|->
name|menu
argument_list|()
decl_stmt|;
if|if
condition|(
name|menu
condition|)
name|menuBar
operator|->
name|addMenu
argument_list|(
name|menu
argument_list|)
expr_stmt|;
else|else
name|menuBar
operator|->
name|addAction
argument_list|(
name|menuAction
argument_list|)
expr_stmt|;
block|}
name|QVariant
name|v
decl_stmt|;
name|v
operator|.
name|setValue
argument_list|(
name|actionContainer
argument_list|)
expr_stmt|;
name|action
operator|->
name|setProperty
argument_list|(
literal|"_q_action_widget"
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|qt_symbian_next_menu_from_action
argument_list|(
name|actionContainer
argument_list|)
expr_stmt|;
name|QT_TRAP_THROWING
argument_list|(
name|tryDisplayMenuBarL
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|action
operator|->
name|softKeyRole
argument_list|()
operator|!=
name|QAction
operator|::
name|NoSoftKey
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|actionParent
init|=
name|action
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
name|Q_ASSERT_X
argument_list|(
name|actionParent
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"No parent set for softkey action!"
argument_list|)
expr_stmt|;
if|if
condition|(
name|actionParent
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|action
operator|->
name|activate
argument_list|(
name|QAction
operator|::
name|Trigger
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_SOFTKEYMANAGER
end_comment
end_unit
