begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdnd_p.h"
end_include
begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|QT_NO_DRAGANDDROP
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_NO_CLIPBOARD
argument_list|)
operator|)
end_if
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<shlobj.h>
end_include
begin_include
include|#
directive|include
file|"qguifunctions_wince.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|QOleEnumFmtEtc
name|QOleEnumFmtEtc
operator|::
name|QOleEnumFmtEtc
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|FORMATETC
argument_list|>
modifier|&
name|fmtetcs
parameter_list|)
block|{
name|m_isNull
operator|=
literal|false
expr_stmt|;
name|m_dwRefs
operator|=
literal|1
expr_stmt|;
name|m_nIndex
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|fmtetcs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|idx
control|)
block|{
name|LPFORMATETC
name|destetc
init|=
operator|new
name|FORMATETC
argument_list|()
decl_stmt|;
if|if
condition|(
name|copyFormatEtc
argument_list|(
name|destetc
argument_list|,
operator|(
name|LPFORMATETC
operator|)
operator|&
operator|(
name|fmtetcs
operator|.
name|at
argument_list|(
name|idx
argument_list|)
operator|)
argument_list|)
condition|)
block|{
name|m_lpfmtetcs
operator|.
name|append
argument_list|(
name|destetc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_isNull
operator|=
literal|true
expr_stmt|;
operator|delete
name|destetc
expr_stmt|;
break|break;
block|}
block|}
block|}
end_function
begin_constructor
DECL|function|QOleEnumFmtEtc
name|QOleEnumFmtEtc
operator|::
name|QOleEnumFmtEtc
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|LPFORMATETC
argument_list|>
modifier|&
name|lpfmtetcs
parameter_list|)
block|{
name|m_isNull
operator|=
literal|false
expr_stmt|;
name|m_dwRefs
operator|=
literal|1
expr_stmt|;
name|m_nIndex
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|lpfmtetcs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|idx
control|)
block|{
name|LPFORMATETC
name|srcetc
init|=
name|lpfmtetcs
operator|.
name|at
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|LPFORMATETC
name|destetc
init|=
operator|new
name|FORMATETC
argument_list|()
decl_stmt|;
if|if
condition|(
name|copyFormatEtc
argument_list|(
name|destetc
argument_list|,
name|srcetc
argument_list|)
condition|)
block|{
name|m_lpfmtetcs
operator|.
name|append
argument_list|(
name|destetc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_isNull
operator|=
literal|true
expr_stmt|;
operator|delete
name|destetc
expr_stmt|;
break|break;
block|}
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QOleEnumFmtEtc
name|QOleEnumFmtEtc
operator|::
name|~
name|QOleEnumFmtEtc
parameter_list|()
block|{
name|LPMALLOC
name|pmalloc
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|if
condition|(
name|CoGetMalloc
argument_list|(
name|MEMCTX_TASK
argument_list|,
operator|&
name|pmalloc
argument_list|)
operator|==
name|NOERROR
condition|)
block|{
else|#
directive|else
if|if
condition|(
name|SHGetMalloc
argument_list|(
operator|&
name|pmalloc
argument_list|)
operator|==
name|NOERROR
condition|)
block|{
endif|#
directive|endif
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|m_lpfmtetcs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|idx
control|)
block|{
name|LPFORMATETC
name|tmpetc
init|=
name|m_lpfmtetcs
operator|.
name|at
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpetc
operator|->
name|ptd
condition|)
name|pmalloc
operator|->
name|Free
argument_list|(
name|tmpetc
operator|->
name|ptd
argument_list|)
expr_stmt|;
operator|delete
name|tmpetc
expr_stmt|;
block|}
name|pmalloc
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
name|m_lpfmtetcs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|isNull
name|bool
name|QOleEnumFmtEtc
operator|::
name|isNull
parameter_list|()
specifier|const
block|{
return|return
name|m_isNull
return|;
block|}
comment|// IUnknown methods
name|STDMETHODIMP
DECL|function|QueryInterface
name|QOleEnumFmtEtc
operator|::
name|QueryInterface
parameter_list|(
name|REFIID
name|riid
parameter_list|,
name|void
name|FAR
modifier|*
name|FAR
modifier|*
name|ppvObj
parameter_list|)
block|{
if|if
condition|(
name|riid
operator|==
name|IID_IUnknown
operator|||
name|riid
operator|==
name|IID_IEnumFORMATETC
condition|)
block|{
operator|*
name|ppvObj
operator|=
name|this
expr_stmt|;
name|AddRef
argument_list|()
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
operator|*
name|ppvObj
operator|=
name|NULL
expr_stmt|;
return|return
name|ResultFromScode
argument_list|(
name|E_NOINTERFACE
argument_list|)
return|;
block|}
name|STDMETHODIMP_
argument_list|(
argument|ULONG
argument_list|)
DECL|function|AddRef
name|QOleEnumFmtEtc
operator|::
name|AddRef
operator|(
name|void
operator|)
block|{
return|return
operator|++
name|m_dwRefs
return|;
block|}
name|STDMETHODIMP_
argument_list|(
argument|ULONG
argument_list|)
DECL|function|Release
name|QOleEnumFmtEtc
operator|::
name|Release
operator|(
name|void
operator|)
block|{
if|if
condition|(
operator|--
name|m_dwRefs
operator|==
literal|0
condition|)
block|{
operator|delete
name|this
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|m_dwRefs
return|;
block|}
end_destructor
begin_comment
comment|// IEnumFORMATETC methods
end_comment
begin_function
name|STDMETHODIMP
DECL|function|Next
name|QOleEnumFmtEtc
operator|::
name|Next
parameter_list|(
name|ULONG
name|celt
parameter_list|,
name|LPFORMATETC
name|rgelt
parameter_list|,
name|ULONG
name|FAR
modifier|*
name|pceltFetched
parameter_list|)
block|{
name|ULONG
name|i
init|=
literal|0
decl_stmt|;
name|ULONG
name|nOffset
decl_stmt|;
if|if
condition|(
name|rgelt
operator|==
name|NULL
condition|)
return|return
name|ResultFromScode
argument_list|(
name|E_INVALIDARG
argument_list|)
return|;
while|while
condition|(
name|i
operator|<
name|celt
condition|)
block|{
name|nOffset
operator|=
name|m_nIndex
operator|+
name|i
expr_stmt|;
if|if
condition|(
name|nOffset
operator|<
name|ULONG
argument_list|(
name|m_lpfmtetcs
operator|.
name|count
argument_list|()
argument_list|)
condition|)
block|{
name|copyFormatEtc
argument_list|(
operator|(
name|LPFORMATETC
operator|)
operator|&
operator|(
name|rgelt
index|[
name|i
index|]
operator|)
argument_list|,
name|m_lpfmtetcs
operator|.
name|at
argument_list|(
name|nOffset
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|m_nIndex
operator|+=
operator|(
name|WORD
operator|)
name|i
expr_stmt|;
if|if
condition|(
name|pceltFetched
operator|!=
name|NULL
condition|)
operator|*
name|pceltFetched
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|celt
condition|)
return|return
name|ResultFromScode
argument_list|(
name|S_FALSE
argument_list|)
return|;
return|return
name|NOERROR
return|;
block|}
end_function
begin_function
name|STDMETHODIMP
DECL|function|Skip
name|QOleEnumFmtEtc
operator|::
name|Skip
parameter_list|(
name|ULONG
name|celt
parameter_list|)
block|{
name|ULONG
name|i
init|=
literal|0
decl_stmt|;
name|ULONG
name|nOffset
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|celt
condition|)
block|{
name|nOffset
operator|=
name|m_nIndex
operator|+
name|i
expr_stmt|;
if|if
condition|(
name|nOffset
operator|<
name|ULONG
argument_list|(
name|m_lpfmtetcs
operator|.
name|count
argument_list|()
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|m_nIndex
operator|+=
operator|(
name|WORD
operator|)
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|celt
condition|)
return|return
name|ResultFromScode
argument_list|(
name|S_FALSE
argument_list|)
return|;
return|return
name|NOERROR
return|;
block|}
end_function
begin_function
name|STDMETHODIMP
DECL|function|Reset
name|QOleEnumFmtEtc
operator|::
name|Reset
parameter_list|()
block|{
name|m_nIndex
operator|=
literal|0
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
end_function
begin_function
name|STDMETHODIMP
DECL|function|Clone
name|QOleEnumFmtEtc
operator|::
name|Clone
parameter_list|(
name|LPENUMFORMATETC
name|FAR
modifier|*
name|newEnum
parameter_list|)
block|{
if|if
condition|(
name|newEnum
operator|==
name|NULL
condition|)
return|return
name|ResultFromScode
argument_list|(
name|E_INVALIDARG
argument_list|)
return|;
name|QOleEnumFmtEtc
modifier|*
name|result
init|=
operator|new
name|QOleEnumFmtEtc
argument_list|(
name|m_lpfmtetcs
argument_list|)
decl_stmt|;
name|result
operator|->
name|m_nIndex
operator|=
name|m_nIndex
expr_stmt|;
if|if
condition|(
name|result
operator|->
name|isNull
argument_list|()
condition|)
block|{
operator|delete
name|result
expr_stmt|;
return|return
name|ResultFromScode
argument_list|(
name|E_OUTOFMEMORY
argument_list|)
return|;
block|}
else|else
block|{
operator|*
name|newEnum
operator|=
name|result
expr_stmt|;
block|}
return|return
name|NOERROR
return|;
block|}
end_function
begin_function
DECL|function|copyFormatEtc
name|bool
name|QOleEnumFmtEtc
operator|::
name|copyFormatEtc
parameter_list|(
name|LPFORMATETC
name|dest
parameter_list|,
name|LPFORMATETC
name|src
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|dest
operator|==
name|NULL
operator|||
name|src
operator|==
name|NULL
condition|)
return|return
literal|false
return|;
operator|*
name|dest
operator|=
operator|*
name|src
expr_stmt|;
if|if
condition|(
name|src
operator|->
name|ptd
condition|)
block|{
name|LPVOID
name|pout
decl_stmt|;
name|LPMALLOC
name|pmalloc
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|if
condition|(
name|CoGetMalloc
argument_list|(
name|MEMCTX_TASK
argument_list|,
operator|&
name|pmalloc
argument_list|)
operator|!=
name|NOERROR
condition|)
else|#
directive|else
if|if
condition|(
name|SHGetMalloc
argument_list|(
operator|&
name|pmalloc
argument_list|)
operator|!=
name|NOERROR
condition|)
endif|#
directive|endif
return|return
literal|false
return|;
name|pout
operator|=
operator|(
name|LPVOID
operator|)
name|pmalloc
operator|->
name|Alloc
argument_list|(
name|src
operator|->
name|ptd
operator|->
name|tdSize
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|dest
operator|->
name|ptd
argument_list|,
name|src
operator|->
name|ptd
argument_list|,
name|size_t
argument_list|(
name|src
operator|->
name|ptd
operator|->
name|tdSize
argument_list|)
argument_list|)
expr_stmt|;
name|pmalloc
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP&& QT_NO_CLIPBOARD
end_comment
end_unit
