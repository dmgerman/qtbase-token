begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"private/qwinnativepangesturerecognizer_win_p.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qgraphicsitem.h"
end_include
begin_include
include|#
directive|include
file|"qgesture.h"
end_include
begin_include
include|#
directive|include
file|"private/qgesture_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qevent_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qwidget_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
end_ifndef
begin_function
name|QT_BEGIN_NAMESPACE
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_NATIVE_GESTURES
argument_list|)
DECL|function|QWinNativePanGestureRecognizer
name|QWinNativePanGestureRecognizer
operator|::
name|QWinNativePanGestureRecognizer
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|create
name|QGesture
modifier|*
name|QWinNativePanGestureRecognizer
operator|::
name|create
parameter_list|(
name|QObject
modifier|*
name|target
parameter_list|)
block|{
if|if
condition|(
operator|!
name|target
condition|)
return|return
operator|new
name|QPanGesture
return|;
comment|// a special case
if|if
condition|(
operator|!
name|target
operator|->
name|isWidgetType
argument_list|()
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|qobject_cast
argument_list|<
name|QGraphicsObject
operator|*
argument_list|>
argument_list|(
name|target
argument_list|)
condition|)
return|return
literal|0
return|;
name|QWidget
modifier|*
name|q
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|QWidgetPrivate
modifier|*
name|d
init|=
name|q
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|d
operator|->
name|nativeGesturePanEnabled
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|winSetupGestures
argument_list|()
expr_stmt|;
return|return
operator|new
name|QPanGesture
return|;
block|}
end_function
begin_function
DECL|function|recognize
name|QGestureRecognizer
operator|::
name|Result
name|QWinNativePanGestureRecognizer
operator|::
name|recognize
parameter_list|(
name|QGesture
modifier|*
name|state
parameter_list|,
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|QPanGesture
modifier|*
name|q
init|=
cast|static_cast
argument_list|<
name|QPanGesture
operator|*
argument_list|>
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|QPanGesturePrivate
modifier|*
name|d
init|=
name|q
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|QGestureRecognizer
operator|::
name|Result
name|result
init|=
name|QGestureRecognizer
operator|::
name|Ignore
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|NativeGesture
condition|)
block|{
name|QNativeGestureEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QNativeGestureEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ev
operator|->
name|gestureType
condition|)
block|{
case|case
name|QNativeGestureEvent
operator|::
name|GestureBegin
case|:
break|break;
case|case
name|QNativeGestureEvent
operator|::
name|Pan
case|:
name|result
operator|=
name|QGestureRecognizer
operator|::
name|TriggerGesture
expr_stmt|;
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
break|break;
case|case
name|QNativeGestureEvent
operator|::
name|GestureEnd
case|:
if|if
condition|(
name|q
operator|->
name|state
argument_list|()
operator|==
name|Qt
operator|::
name|NoGesture
condition|)
return|return
name|QGestureRecognizer
operator|::
name|Ignore
return|;
comment|// some other gesture has ended
name|result
operator|=
name|QGestureRecognizer
operator|::
name|FinishGesture
expr_stmt|;
break|break;
default|default:
return|return
name|QGestureRecognizer
operator|::
name|Ignore
return|;
block|}
if|if
condition|(
name|q
operator|->
name|state
argument_list|()
operator|==
name|Qt
operator|::
name|NoGesture
condition|)
block|{
name|d
operator|->
name|lastOffset
operator|=
name|d
operator|->
name|offset
operator|=
name|QPointF
argument_list|()
expr_stmt|;
name|d
operator|->
name|startPosition
operator|=
name|ev
operator|->
name|position
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|lastOffset
operator|=
name|d
operator|->
name|offset
expr_stmt|;
name|d
operator|->
name|offset
operator|=
name|QPointF
argument_list|(
name|ev
operator|->
name|position
operator|.
name|x
argument_list|()
operator|-
name|d
operator|->
name|startPosition
operator|.
name|x
argument_list|()
argument_list|,
name|ev
operator|->
name|position
operator|.
name|y
argument_list|()
operator|-
name|d
operator|->
name|startPosition
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|QWinNativePanGestureRecognizer
operator|::
name|reset
parameter_list|(
name|QGesture
modifier|*
name|state
parameter_list|)
block|{
name|QPanGesture
modifier|*
name|pan
init|=
cast|static_cast
argument_list|<
name|QPanGesture
operator|*
argument_list|>
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|QPanGesturePrivate
modifier|*
name|d
init|=
name|pan
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|d
operator|->
name|lastOffset
operator|=
name|d
operator|->
name|offset
operator|=
name|QPointF
argument_list|()
expr_stmt|;
name|d
operator|->
name|startPosition
operator|=
name|QPoint
argument_list|()
expr_stmt|;
name|d
operator|->
name|acceleration
operator|=
literal|0
expr_stmt|;
name|QGestureRecognizer
operator|::
name|reset
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_NATIVE_GESTURES
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_GESTURES
end_comment
end_unit
