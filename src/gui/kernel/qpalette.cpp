begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qpalette.h"
end_include
begin_include
include|#
directive|include
file|"qguiapplication.h"
end_include
begin_include
include|#
directive|include
file|"qguiapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"qdatastream.h"
end_include
begin_include
include|#
directive|include
file|"qvariant.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|qt_palette_count
specifier|static
name|int
name|qt_palette_count
init|=
literal|1
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QPalettePrivate
class|class
name|QPalettePrivate
block|{
public|public:
DECL|function|QPalettePrivate
name|QPalettePrivate
parameter_list|()
member_init_list|:
name|ref
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|ser_no
argument_list|(
name|qt_palette_count
operator|++
argument_list|)
member_init_list|,
name|detach_no
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|member|ref
name|QAtomicInt
name|ref
decl_stmt|;
DECL|member|br
name|QBrush
name|br
index|[
name|QPalette
operator|::
name|NColorGroups
index|]
index|[
name|QPalette
operator|::
name|NColorRoles
index|]
decl_stmt|;
DECL|member|ser_no
name|int
name|ser_no
decl_stmt|;
DECL|member|detach_no
name|int
name|detach_no
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|qt_mix_colors
specifier|static
name|QColor
name|qt_mix_colors
parameter_list|(
name|QColor
name|a
parameter_list|,
name|QColor
name|b
parameter_list|)
block|{
return|return
name|QColor
argument_list|(
operator|(
name|a
operator|.
name|red
argument_list|()
operator|+
name|b
operator|.
name|red
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|a
operator|.
name|green
argument_list|()
operator|+
name|b
operator|.
name|green
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|a
operator|.
name|blue
argument_list|()
operator|+
name|b
operator|.
name|blue
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|a
operator|.
name|alpha
argument_list|()
operator|+
name|b
operator|.
name|alpha
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_palette_from_color
specifier|static
name|void
name|qt_palette_from_color
parameter_list|(
name|QPalette
modifier|&
name|pal
parameter_list|,
specifier|const
name|QColor
modifier|&
name|button
parameter_list|)
block|{
name|int
name|h
decl_stmt|,
name|s
decl_stmt|,
name|v
decl_stmt|;
name|button
operator|.
name|getHsv
argument_list|(
operator|&
name|h
argument_list|,
operator|&
name|s
argument_list|,
operator|&
name|v
argument_list|)
expr_stmt|;
comment|// inactive and active are the same..
specifier|const
name|QBrush
name|whiteBrush
init|=
name|QBrush
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
decl_stmt|;
specifier|const
name|QBrush
name|blackBrush
init|=
name|QBrush
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
decl_stmt|;
specifier|const
name|QBrush
name|baseBrush
init|=
name|v
operator|>
literal|128
condition|?
name|whiteBrush
else|:
name|blackBrush
decl_stmt|;
specifier|const
name|QBrush
name|foregroundBrush
init|=
name|v
operator|>
literal|128
condition|?
name|blackBrush
else|:
name|whiteBrush
decl_stmt|;
specifier|const
name|QBrush
name|buttonBrush
init|=
name|QBrush
argument_list|(
name|button
argument_list|)
decl_stmt|;
specifier|const
name|QBrush
name|buttonBrushDark
init|=
name|QBrush
argument_list|(
name|button
operator|.
name|darker
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QBrush
name|buttonBrushDark150
init|=
name|QBrush
argument_list|(
name|button
operator|.
name|darker
argument_list|(
literal|150
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QBrush
name|buttonBrushLight150
init|=
name|QBrush
argument_list|(
name|button
operator|.
name|lighter
argument_list|(
literal|150
argument_list|)
argument_list|)
decl_stmt|;
name|pal
operator|.
name|setColorGroup
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|foregroundBrush
argument_list|,
name|buttonBrush
argument_list|,
name|buttonBrushLight150
argument_list|,
name|buttonBrushDark
argument_list|,
name|buttonBrushDark150
argument_list|,
name|foregroundBrush
argument_list|,
name|whiteBrush
argument_list|,
name|baseBrush
argument_list|,
name|buttonBrush
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColorGroup
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|foregroundBrush
argument_list|,
name|buttonBrush
argument_list|,
name|buttonBrushLight150
argument_list|,
name|buttonBrushDark
argument_list|,
name|buttonBrushDark150
argument_list|,
name|foregroundBrush
argument_list|,
name|whiteBrush
argument_list|,
name|baseBrush
argument_list|,
name|buttonBrush
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColorGroup
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|buttonBrushDark
argument_list|,
name|buttonBrush
argument_list|,
name|buttonBrushLight150
argument_list|,
name|buttonBrushDark
argument_list|,
name|buttonBrushDark150
argument_list|,
name|buttonBrushDark
argument_list|,
name|whiteBrush
argument_list|,
name|buttonBrush
argument_list|,
name|buttonBrush
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!    \fn const QColor&QPalette::color(ColorRole role) const     \overload      Returns the color that has been set for the given color \a role in     the current ColorGroup.      \sa brush(), ColorRole  */
end_comment
begin_comment
comment|/*!     \fn const QBrush&QPalette::brush(ColorRole role) const      \overload      Returns the brush that has been set for the given color \a role in     the current ColorGroup.      \sa color(), setBrush(), ColorRole */
end_comment
begin_comment
comment|/*!     \fn void QPalette::setColor(ColorRole role, const QColor&color)      \overload      Sets the color used for the given color \a role, in all color     groups, to the specified solid \a color.      \sa brush(), setColor(), ColorRole */
end_comment
begin_comment
comment|/*!     \fn void QPalette::setBrush(ColorRole role, const QBrush&brush)      Sets the brush for the given color \a role to the specified \a     brush for all groups in the palette.      \sa brush(), setColor(), ColorRole */
end_comment
begin_comment
comment|/*!     \fn const QBrush& QPalette::foreground() const     \obsolete      Use windowText() instead. */
end_comment
begin_comment
comment|/*!     \fn const QBrush& QPalette::windowText() const      Returns the window text (general foreground) brush of the     current color group.      \sa ColorRole, brush() */
end_comment
begin_comment
comment|/*!     \fn const QBrush& QPalette::button() const      Returns the button brush of the current color group.      \sa ColorRole, brush() */
end_comment
begin_comment
comment|/*!     \fn const QBrush& QPalette::light() const      Returns the light brush of the current color group.      \sa ColorRole, brush() */
end_comment
begin_comment
comment|/*!     \fn const QBrush& QPalette::midlight() const      Returns the midlight brush of the current color group.      \sa ColorRole, brush() */
end_comment
begin_comment
comment|/*!     \fn const QBrush& QPalette::dark() const      Returns the dark brush of the current color group.      \sa ColorRole, brush() */
end_comment
begin_comment
comment|/*!     \fn const QBrush& QPalette::mid() const      Returns the mid brush of the current color group.      \sa ColorRole, brush() */
end_comment
begin_comment
comment|/*!     \fn const QBrush& QPalette::text() const      Returns the text foreground brush of the current color group.      \sa ColorRole, brush() */
end_comment
begin_comment
comment|/*!     \fn const QBrush& QPalette::brightText() const      Returns the bright text foreground brush of the current color group.      \sa ColorRole, brush() */
end_comment
begin_comment
comment|/*!     \fn const QBrush& QPalette::buttonText() const      Returns the button text foreground brush of the current color group.      \sa ColorRole, brush() */
end_comment
begin_comment
comment|/*!     \fn const QBrush& QPalette::base() const      Returns the base brush of the current color group.      \sa ColorRole, brush() */
end_comment
begin_comment
comment|/*!     \fn const QBrush& QPalette::alternateBase() const      Returns the alternate base brush of the current color group.      \sa ColorRole, brush() */
end_comment
begin_comment
comment|/*!     \fn const QBrush& QPalette::toolTipBase() const     \since 4.4      Returns the tool tip base brush of the current color group. This brush is     used by QToolTip and QWhatsThis.      \note Tool tips use the Inactive color group of QPalette, because tool     tips are not active windows.      \sa ColorRole, brush() */
end_comment
begin_comment
comment|/*!     \fn const QBrush& QPalette::toolTipText() const     \since 4.4      Returns the tool tip text brush of the current color group. This brush is     used by QToolTip and QWhatsThis.      \note Tool tips use the Inactive color group of QPalette, because tool     tips are not active windows.      \sa ColorRole, brush() */
end_comment
begin_comment
comment|/*!     \fn const QBrush& QPalette::background() const     \obsolete      Use window() instead. */
end_comment
begin_comment
comment|/*!     \fn const QBrush& QPalette::window() const      Returns the window (general background) brush of the current     color group.      \sa ColorRole, brush() */
end_comment
begin_comment
comment|/*!     \fn const QBrush& QPalette::shadow() const      Returns the shadow brush of the current color group.      \sa ColorRole, brush() */
end_comment
begin_comment
comment|/*!     \fn const QBrush& QPalette::highlight() const      Returns the highlight brush of the current color group.      \sa ColorRole, brush() */
end_comment
begin_comment
comment|/*!     \fn const QBrush& QPalette::highlightedText() const      Returns the highlighted text brush of the current color group.      \sa ColorRole, brush() */
end_comment
begin_comment
comment|/*!     \fn const QBrush& QPalette::link() const      Returns the unvisited link text brush of the current color group.      \sa ColorRole, brush() */
end_comment
begin_comment
comment|/*!     \fn const QBrush& QPalette::linkVisited() const      Returns the visited link text brush of the current color group.      \sa ColorRole, brush() */
end_comment
begin_comment
comment|/*!     \fn ColorGroup QPalette::currentColorGroup() const      Returns the palette's current color group. */
end_comment
begin_comment
comment|/*!     \fn void QPalette::setCurrentColorGroup(ColorGroup cg)      Set the palette's current color group to \a cg. */
end_comment
begin_comment
comment|/*!     \class QPalette      \brief The QPalette class contains color groups for each widget state.      \inmodule QtGui     \ingroup appearance     \ingroup shared      A palette consists of three color groups: \e Active, \e Disabled,     and \e Inactive. All widgets in Qt contain a palette and     use their palette to draw themselves. This makes the user     interface easily configurable and easier to keep consistent.       If you create a new widget we strongly recommend that you use the     colors in the palette rather than hard-coding specific colors.      The color groups:     \list     \li The Active group is used for the window that has keyboard focus.     \li The Inactive group is used for other windows.     \li The Disabled group is used for widgets (not windows) that are     disabled for some reason.     \endlist      Both active and inactive windows can contain disabled widgets.     (Disabled widgets are often called \e inaccessible or \e{grayed     out}.)      In most styles, Active and Inactive look the same.      Colors and brushes can be set for particular roles in any of a palette's     color groups with setColor() and setBrush().  A color group contains a     group of colors used by widgets for drawing themselves. We recommend that     widgets use color group roles from the palette such as "foreground" and     "base" rather than literal colors like "red" or "turquoise". The color     roles are enumerated and defined in the \l ColorRole documentation.      We strongly recommend that you use the default palette of the     current style (returned by QGuiApplication::palette()) and     modify that as necessary. This is done by Qt's widgets when they     are drawn.      To modify a color group you call the functions     setColor() and setBrush(), depending on whether you want a pure     color or a pixmap pattern.      There are also corresponding color() and brush() getters, and a     commonly used convenience function to get the ColorRole for the current ColorGroup:     window(), windowText(), base(), etc.       You can copy a palette using the copy constructor and test to see     if two palettes are \e identical using isCopyOf().      QPalette is optimized by the use of \l{implicit sharing},     so it is very efficient to pass QPalette objects as arguments.      \warning Some styles do not use the palette for all drawing, for     instance, if they make use of native theme engines. This is the     case for both the Windows XP, Windows Vista, and the Mac OS X     styles.      \sa QApplication::setPalette(), QWidget::setPalette(), QColor */
end_comment
begin_comment
comment|/*!     \enum QPalette::ColorGroup      \value Disabled     \value Active     \value Inactive     \value Normal synonym for Active      \omitvalue All     \omitvalue NColorGroups     \omitvalue Current */
end_comment
begin_comment
comment|/*!     \enum QPalette::ColorRole      \image palette.png Color Roles      The ColorRole enum defines the different symbolic color roles used     in current GUIs.      The central roles are:      \value Window  A general background color.      \value Background  This value is obsolete. Use Window instead.      \value WindowText  A general foreground color.      \value Foreground  This value is obsolete. Use WindowText instead.      \value Base  Used mostly as the background color for text entry widgets,                  but can also be used for other painting - such as the                  background of combobox drop down lists and toolbar handles.                  It is usually white or another light color.      \value AlternateBase  Used as the alternate background color in views with                           alternating row colors (see                           QAbstractItemView::setAlternatingRowColors()).      \value ToolTipBase Used as the background color for QToolTip and                           QWhatsThis. Tool tips use the Inactive color group                           of QPalette, because tool tips are not active                           windows.      \value ToolTipText Used as the foreground color for QToolTip and                           QWhatsThis. Tool tips use the Inactive color group                           of QPalette, because tool tips are not active                           windows.      \value Text  The foreground color used with \c Base. This is usually                  the same as the \c WindowText, in which case it must provide                  good contrast with \c Window and \c Base.      \value Button The general button background color. This background can be different from                   \c Window as some styles require a different background color for buttons.      \value ButtonText  A foreground color used with the \c Button color.      \value BrightText  A text color that is very different from                        \c WindowText, and contrasts well with e.g. \c                        Dark. Typically used for text that needs to be                        drawn where \c Text or \c WindowText would give                        poor contrast, such as on pressed push buttons.                        Note that text colors can be used for things                        other than just words; text colors are \e                        usually used for text, but it's quite common to                        use the text color roles for lines, icons, etc.       There are some color roles used mostly for 3D bevel and shadow effects.     All of these are normally derived from \c Window, and used in ways that     depend on that relationship. For example, buttons depend on it to make the     bevels look attractive, and Motif scroll bars depend on \c Mid to be     slightly different from \c Window.      \value Light  Lighter than \c Button color.      \value Midlight  Between \c Button and \c Light.      \value Dark  Darker than \c Button.      \value Mid  Between \c Button and \c Dark.      \value Shadow  A very dark color. By default, the shadow color is                    Qt::black.       Selected (marked) items have two roles:      \value Highlight   A color to indicate a selected item or the current                        item. By default, the highlight color is                        Qt::darkBlue.      \value HighlightedText  A text color that contrasts with \c Highlight.                             By default, the highlighted text color is Qt::white.      There are two color roles related to hyperlinks:      \value Link  A text color used for unvisited hyperlinks.                  By default, the link color is Qt::blue.      \value LinkVisited  A text color used for already visited hyperlinks.                         By default, the linkvisited color is Qt::magenta.      Note that we do not use the \c Link and \c LinkVisited roles when     rendering rich text in Qt, and that we recommend that you use CSS     and the QTextDocument::setDefaultStyleSheet() function to alter     the appearance of links. For example:      \snippet textdocument-css/main.cpp 0      \value NoRole No role; this special role is often used to indicate that a     role has not been assigned.      \omitvalue NColorRoles */
end_comment
begin_comment
comment|/*!     Constructs a palette object that uses the application's default palette.      \sa QApplication::setPalette(), QApplication::palette() */
end_comment
begin_constructor
DECL|function|QPalette
name|QPalette
operator|::
name|QPalette
parameter_list|()
member_init_list|:
name|d
argument_list|(
literal|0
argument_list|)
block|{
name|data
operator|.
name|current_group
operator|=
name|Active
expr_stmt|;
name|data
operator|.
name|resolve_mask
operator|=
literal|0
expr_stmt|;
comment|// Initialize to application palette if present, else default to black.
comment|// This makes it possible to instantiate QPalette outside QGuiApplication,
comment|// for example in the platform plugins.
if|if
condition|(
name|QGuiApplicationPrivate
operator|::
name|app_pal
condition|)
block|{
name|d
operator|=
name|QGuiApplicationPrivate
operator|::
name|app_pal
operator|->
name|d
expr_stmt|;
name|d
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
else|else
block|{
name|init
argument_list|()
expr_stmt|;
name|qt_palette_from_color
argument_list|(
operator|*
name|this
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|data
operator|.
name|resolve_mask
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_constructor
begin_comment
comment|/*!   Constructs a palette from the \a button color. The other colors are   automatically calculated, based on this color. \c Window will be   the button color as well. */
end_comment
begin_constructor
DECL|function|QPalette
name|QPalette
operator|::
name|QPalette
parameter_list|(
specifier|const
name|QColor
modifier|&
name|button
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|qt_palette_from_color
argument_list|(
operator|*
name|this
argument_list|,
name|button
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   Constructs a palette from the \a button color. The other colors are   automatically calculated, based on this color. \c Window will be   the button color as well. */
end_comment
begin_constructor
DECL|function|QPalette
name|QPalette
operator|::
name|QPalette
parameter_list|(
name|Qt
operator|::
name|GlobalColor
name|button
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|qt_palette_from_color
argument_list|(
operator|*
name|this
argument_list|,
name|button
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a palette. You can pass either brushes, pixmaps or     plain colors for \a windowText, \a button, \a light, \a dark, \a     mid, \a text, \a bright_text, \a base and \a window.      \sa QBrush */
end_comment
begin_constructor
DECL|function|QPalette
name|QPalette
operator|::
name|QPalette
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|windowText
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|button
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|light
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|dark
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|mid
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|text
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|bright_text
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|base
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|window
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|setColorGroup
argument_list|(
name|All
argument_list|,
name|windowText
argument_list|,
name|button
argument_list|,
name|light
argument_list|,
name|dark
argument_list|,
name|mid
argument_list|,
name|text
argument_list|,
name|bright_text
argument_list|,
name|base
argument_list|,
name|window
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!\obsolete    Constructs a palette with the specified \a windowText, \a   window, \a light, \a dark, \a mid, \a text, and \a base colors.   The button color will be set to the window color. */
end_comment
begin_constructor
DECL|function|QPalette
name|QPalette
operator|::
name|QPalette
parameter_list|(
specifier|const
name|QColor
modifier|&
name|windowText
parameter_list|,
specifier|const
name|QColor
modifier|&
name|window
parameter_list|,
specifier|const
name|QColor
modifier|&
name|light
parameter_list|,
specifier|const
name|QColor
modifier|&
name|dark
parameter_list|,
specifier|const
name|QColor
modifier|&
name|mid
parameter_list|,
specifier|const
name|QColor
modifier|&
name|text
parameter_list|,
specifier|const
name|QColor
modifier|&
name|base
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
specifier|const
name|QBrush
name|windowBrush
argument_list|(
name|window
argument_list|)
decl_stmt|;
specifier|const
name|QBrush
name|lightBrush
argument_list|(
name|light
argument_list|)
decl_stmt|;
name|setColorGroup
argument_list|(
name|All
argument_list|,
name|QBrush
argument_list|(
name|windowText
argument_list|)
argument_list|,
name|windowBrush
argument_list|,
name|lightBrush
argument_list|,
name|QBrush
argument_list|(
name|dark
argument_list|)
argument_list|,
name|QBrush
argument_list|(
name|mid
argument_list|)
argument_list|,
name|QBrush
argument_list|(
name|text
argument_list|)
argument_list|,
name|lightBrush
argument_list|,
name|QBrush
argument_list|(
name|base
argument_list|)
argument_list|,
name|windowBrush
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a palette from a \a button color and a \a window.     The other colors are automatically calculated, based on these     colors. */
end_comment
begin_constructor
DECL|function|QPalette
name|QPalette
operator|::
name|QPalette
parameter_list|(
specifier|const
name|QColor
modifier|&
name|button
parameter_list|,
specifier|const
name|QColor
modifier|&
name|window
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|int
name|h
decl_stmt|,
name|s
decl_stmt|,
name|v
decl_stmt|;
name|window
operator|.
name|getHsv
argument_list|(
operator|&
name|h
argument_list|,
operator|&
name|s
argument_list|,
operator|&
name|v
argument_list|)
expr_stmt|;
specifier|const
name|QBrush
name|windowBrush
init|=
name|QBrush
argument_list|(
name|window
argument_list|)
decl_stmt|;
specifier|const
name|QBrush
name|whiteBrush
init|=
name|QBrush
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
decl_stmt|;
specifier|const
name|QBrush
name|blackBrush
init|=
name|QBrush
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
decl_stmt|;
specifier|const
name|QBrush
name|baseBrush
init|=
name|v
operator|>
literal|128
condition|?
name|whiteBrush
else|:
name|blackBrush
decl_stmt|;
specifier|const
name|QBrush
name|foregroundBrush
init|=
name|v
operator|>
literal|128
condition|?
name|blackBrush
else|:
name|whiteBrush
decl_stmt|;
specifier|const
name|QBrush
name|disabledForeground
init|=
name|QBrush
argument_list|(
name|Qt
operator|::
name|darkGray
argument_list|)
decl_stmt|;
specifier|const
name|QBrush
name|buttonBrush
init|=
name|QBrush
argument_list|(
name|button
argument_list|)
decl_stmt|;
specifier|const
name|QBrush
name|buttonBrushDark
init|=
name|QBrush
argument_list|(
name|button
operator|.
name|darker
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QBrush
name|buttonBrushDark150
init|=
name|QBrush
argument_list|(
name|button
operator|.
name|darker
argument_list|(
literal|150
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QBrush
name|buttonBrushLight150
init|=
name|QBrush
argument_list|(
name|button
operator|.
name|lighter
argument_list|(
literal|150
argument_list|)
argument_list|)
decl_stmt|;
comment|//inactive and active are identical
name|setColorGroup
argument_list|(
name|Inactive
argument_list|,
name|foregroundBrush
argument_list|,
name|buttonBrush
argument_list|,
name|buttonBrushLight150
argument_list|,
name|buttonBrushDark
argument_list|,
name|buttonBrushDark150
argument_list|,
name|foregroundBrush
argument_list|,
name|whiteBrush
argument_list|,
name|baseBrush
argument_list|,
name|windowBrush
argument_list|)
expr_stmt|;
name|setColorGroup
argument_list|(
name|Active
argument_list|,
name|foregroundBrush
argument_list|,
name|buttonBrush
argument_list|,
name|buttonBrushLight150
argument_list|,
name|buttonBrushDark
argument_list|,
name|buttonBrushDark150
argument_list|,
name|foregroundBrush
argument_list|,
name|whiteBrush
argument_list|,
name|baseBrush
argument_list|,
name|windowBrush
argument_list|)
expr_stmt|;
name|setColorGroup
argument_list|(
name|Disabled
argument_list|,
name|disabledForeground
argument_list|,
name|buttonBrush
argument_list|,
name|buttonBrushLight150
argument_list|,
name|buttonBrushDark
argument_list|,
name|buttonBrushDark150
argument_list|,
name|disabledForeground
argument_list|,
name|whiteBrush
argument_list|,
name|baseBrush
argument_list|,
name|windowBrush
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a copy of \a p.      This constructor is fast thanks to \l{implicit sharing}. */
end_comment
begin_constructor
DECL|function|QPalette
name|QPalette
operator|::
name|QPalette
parameter_list|(
specifier|const
name|QPalette
modifier|&
name|p
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|p
operator|.
name|d
argument_list|)
member_init_list|,
name|data
argument_list|(
name|p
operator|.
name|data
argument_list|)
block|{
name|d
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the palette. */
end_comment
begin_destructor
DECL|function|~QPalette
name|QPalette
operator|::
name|~
name|QPalette
parameter_list|()
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!\internal*/
end_comment
begin_function
DECL|function|init
name|void
name|QPalette
operator|::
name|init
parameter_list|()
block|{
name|d
operator|=
operator|new
name|QPalettePrivate
expr_stmt|;
name|data
operator|.
name|resolve_mask
operator|=
literal|0
expr_stmt|;
name|data
operator|.
name|current_group
operator|=
name|Active
expr_stmt|;
comment|//as a default..
block|}
end_function
begin_comment
comment|/*!     Assigns \a p to this palette and returns a reference to this     palette.      This operation is fast thanks to \l{implicit sharing}. */
end_comment
begin_function
DECL|function|operator =
name|QPalette
modifier|&
name|QPalette
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QPalette
modifier|&
name|p
parameter_list|)
block|{
name|p
operator|.
name|d
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|data
operator|=
name|p
operator|.
name|data
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|d
expr_stmt|;
name|d
operator|=
name|p
operator|.
name|d
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QPalette::swap(QPalette&other)     \since 5.0      Swaps this palette instance with \a other. This function is very     fast and never fails. */
end_comment
begin_comment
comment|/*!    Returns the palette as a QVariant */
end_comment
begin_function
DECL|function|operator QVariant
name|QPalette
operator|::
name|operator
name|QVariant
parameter_list|()
specifier|const
block|{
return|return
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Palette
argument_list|,
name|this
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn const QColor&QPalette::color(ColorGroup group, ColorRole role) const      Returns the color in the specified color \a group, used for the     given color \a role.      \sa brush(), setColor(), ColorRole */
end_comment
begin_comment
comment|/*!     \fn const QBrush&QPalette::brush(ColorGroup group, ColorRole role) const      Returns the brush in the specified color \a group, used for the     given color \a role.      \sa color(), setBrush(), ColorRole */
end_comment
begin_function
DECL|function|brush
specifier|const
name|QBrush
modifier|&
name|QPalette
operator|::
name|brush
parameter_list|(
name|ColorGroup
name|gr
parameter_list|,
name|ColorRole
name|cr
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|cr
operator|<
name|NColorRoles
argument_list|)
expr_stmt|;
if|if
condition|(
name|gr
operator|>=
operator|(
name|int
operator|)
name|NColorGroups
condition|)
block|{
if|if
condition|(
name|gr
operator|==
name|Current
condition|)
block|{
name|gr
operator|=
operator|(
name|ColorGroup
operator|)
name|data
operator|.
name|current_group
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QPalette::brush: Unknown ColorGroup: %d"
argument_list|,
operator|(
name|int
operator|)
name|gr
argument_list|)
expr_stmt|;
name|gr
operator|=
name|Active
expr_stmt|;
block|}
block|}
return|return
name|d
operator|->
name|br
index|[
name|gr
index|]
index|[
name|cr
index|]
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QPalette::setColor(ColorGroup group, ColorRole role, const QColor&color)      Sets the color in the specified color \a group, used for the given     color \a role, to the specified solid \a color.      \sa setBrush(), color(), ColorRole */
end_comment
begin_comment
comment|/*!     \fn void QPalette::setBrush(ColorGroup group, ColorRole role, const QBrush&brush)     \overload      Sets the brush in the specified color \a group, used for the given     color \a role, to \a brush.      \sa brush(), setColor(), ColorRole */
end_comment
begin_function
DECL|function|setBrush
name|void
name|QPalette
operator|::
name|setBrush
parameter_list|(
name|ColorGroup
name|cg
parameter_list|,
name|ColorRole
name|cr
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|b
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|cr
operator|<
name|NColorRoles
argument_list|)
expr_stmt|;
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
name|cg
operator|>=
operator|(
name|int
operator|)
name|NColorGroups
condition|)
block|{
if|if
condition|(
name|cg
operator|==
name|All
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|NColorGroups
condition|;
name|i
operator|++
control|)
name|d
operator|->
name|br
index|[
name|i
index|]
index|[
name|cr
index|]
operator|=
name|b
expr_stmt|;
name|data
operator|.
name|resolve_mask
operator||=
operator|(
literal|1
operator|<<
name|cr
operator|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|cg
operator|==
name|Current
condition|)
block|{
name|cg
operator|=
operator|(
name|ColorGroup
operator|)
name|data
operator|.
name|current_group
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QPalette::setBrush: Unknown ColorGroup: %d"
argument_list|,
operator|(
name|int
operator|)
name|cg
argument_list|)
expr_stmt|;
name|cg
operator|=
name|Active
expr_stmt|;
block|}
block|}
name|d
operator|->
name|br
index|[
name|cg
index|]
index|[
name|cr
index|]
operator|=
name|b
expr_stmt|;
name|data
operator|.
name|resolve_mask
operator||=
operator|(
literal|1
operator|<<
name|cr
operator|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns true if the ColorGroup \a cg and ColorRole \a cr has been     set previously on this palette; otherwise returns false.      \sa setBrush() */
end_comment
begin_function
DECL|function|isBrushSet
name|bool
name|QPalette
operator|::
name|isBrushSet
parameter_list|(
name|ColorGroup
name|cg
parameter_list|,
name|ColorRole
name|cr
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|cg
argument_list|)
expr_stmt|;
return|return
operator|(
name|data
operator|.
name|resolve_mask
operator|&
operator|(
literal|1
operator|<<
name|cr
operator|)
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|detach
name|void
name|QPalette
operator|::
name|detach
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|QPalettePrivate
modifier|*
name|x
init|=
operator|new
name|QPalettePrivate
decl_stmt|;
for|for
control|(
name|int
name|grp
init|=
literal|0
init|;
name|grp
operator|<
operator|(
name|int
operator|)
name|NColorGroups
condition|;
name|grp
operator|++
control|)
block|{
for|for
control|(
name|int
name|role
init|=
literal|0
init|;
name|role
operator|<
operator|(
name|int
operator|)
name|NColorRoles
condition|;
name|role
operator|++
control|)
name|x
operator|->
name|br
index|[
name|grp
index|]
index|[
name|role
index|]
operator|=
name|d
operator|->
name|br
index|[
name|grp
index|]
index|[
name|role
index|]
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|d
expr_stmt|;
name|d
operator|=
name|x
expr_stmt|;
block|}
operator|++
name|d
operator|->
name|detach_no
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QPalette::operator!=(const QPalette&p) const      Returns true (slowly) if this palette is different from \a p;     otherwise returns false (usually quickly).      \note The current ColorGroup is not taken into account when     comparing palettes      \sa operator==() */
end_comment
begin_comment
comment|/*!     Returns true (usually quickly) if this palette is equal to \a p;     otherwise returns false (slowly).      \note The current ColorGroup is not taken into account when     comparing palettes      \sa operator!=() */
end_comment
begin_function
DECL|function|operator ==
name|bool
name|QPalette
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|QPalette
modifier|&
name|p
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isCopyOf
argument_list|(
name|p
argument_list|)
condition|)
return|return
literal|true
return|;
for|for
control|(
name|int
name|grp
init|=
literal|0
init|;
name|grp
operator|<
operator|(
name|int
operator|)
name|NColorGroups
condition|;
name|grp
operator|++
control|)
block|{
for|for
control|(
name|int
name|role
init|=
literal|0
init|;
name|role
operator|<
operator|(
name|int
operator|)
name|NColorRoles
condition|;
name|role
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|->
name|br
index|[
name|grp
index|]
index|[
name|role
index|]
operator|!=
name|p
operator|.
name|d
operator|->
name|br
index|[
name|grp
index|]
index|[
name|role
index|]
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QPalette::isEqual(ColorGroup cg1, ColorGroup cg2) const      Returns true (usually quickly) if color group \a cg1 is equal to     \a cg2; otherwise returns false. */
end_comment
begin_function
DECL|function|isEqual
name|bool
name|QPalette
operator|::
name|isEqual
parameter_list|(
name|QPalette
operator|::
name|ColorGroup
name|group1
parameter_list|,
name|QPalette
operator|::
name|ColorGroup
name|group2
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|group1
operator|>=
operator|(
name|int
operator|)
name|NColorGroups
condition|)
block|{
if|if
condition|(
name|group1
operator|==
name|Current
condition|)
block|{
name|group1
operator|=
operator|(
name|ColorGroup
operator|)
name|data
operator|.
name|current_group
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QPalette::brush: Unknown ColorGroup(1): %d"
argument_list|,
operator|(
name|int
operator|)
name|group1
argument_list|)
expr_stmt|;
name|group1
operator|=
name|Active
expr_stmt|;
block|}
block|}
if|if
condition|(
name|group2
operator|>=
operator|(
name|int
operator|)
name|NColorGroups
condition|)
block|{
if|if
condition|(
name|group2
operator|==
name|Current
condition|)
block|{
name|group2
operator|=
operator|(
name|ColorGroup
operator|)
name|data
operator|.
name|current_group
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QPalette::brush: Unknown ColorGroup(2): %d"
argument_list|,
operator|(
name|int
operator|)
name|group2
argument_list|)
expr_stmt|;
name|group2
operator|=
name|Active
expr_stmt|;
block|}
block|}
if|if
condition|(
name|group1
operator|==
name|group2
condition|)
return|return
literal|true
return|;
for|for
control|(
name|int
name|role
init|=
literal|0
init|;
name|role
operator|<
operator|(
name|int
operator|)
name|NColorRoles
condition|;
name|role
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|->
name|br
index|[
name|group1
index|]
index|[
name|role
index|]
operator|!=
name|d
operator|->
name|br
index|[
name|group2
index|]
index|[
name|role
index|]
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*! \fn int QPalette::serialNumber() const     \obsolete      Returns a number that identifies the contents of this QPalette     object. Distinct QPalette objects can only have the same serial     number if they refer to the same contents (but they don't have     to). Also, the serial number of a QPalette may change during the     lifetime of the object.      Use cacheKey() instead.      \warning The serial number doesn't necessarily change when the     palette is altered. This means that it may be dangerous to use it     as a cache key.      \sa operator==() */
end_comment
begin_comment
comment|/*!     Returns a number that identifies the contents of this QPalette     object. Distinct QPalette objects can have the same key if     they refer to the same contents.      The cacheKey() will change when the palette is altered. */
end_comment
begin_function
DECL|function|cacheKey
name|qint64
name|QPalette
operator|::
name|cacheKey
parameter_list|()
specifier|const
block|{
return|return
operator|(
operator|(
operator|(
name|qint64
operator|)
name|d
operator|->
name|ser_no
operator|)
operator|<<
literal|32
operator|)
operator||
operator|(
call|(
name|qint64
call|)
argument_list|(
name|d
operator|->
name|detach_no
argument_list|)
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a new QPalette that has attributes copied from \a other. */
end_comment
begin_function
DECL|function|resolve
name|QPalette
name|QPalette
operator|::
name|resolve
parameter_list|(
specifier|const
name|QPalette
modifier|&
name|other
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|(
operator|*
name|this
operator|==
name|other
operator|&&
name|data
operator|.
name|resolve_mask
operator|==
name|other
operator|.
name|data
operator|.
name|resolve_mask
operator|)
operator|||
name|data
operator|.
name|resolve_mask
operator|==
literal|0
condition|)
block|{
name|QPalette
name|o
init|=
name|other
decl_stmt|;
name|o
operator|.
name|data
operator|.
name|resolve_mask
operator|=
name|data
operator|.
name|resolve_mask
expr_stmt|;
return|return
name|o
return|;
block|}
name|QPalette
name|palette
argument_list|(
operator|*
name|this
argument_list|)
decl_stmt|;
name|palette
operator|.
name|detach
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|role
init|=
literal|0
init|;
name|role
operator|<
operator|(
name|int
operator|)
name|NColorRoles
condition|;
name|role
operator|++
control|)
if|if
condition|(
operator|!
operator|(
name|data
operator|.
name|resolve_mask
operator|&
operator|(
literal|1
operator|<<
name|role
operator|)
operator|)
condition|)
for|for
control|(
name|int
name|grp
init|=
literal|0
init|;
name|grp
operator|<
operator|(
name|int
operator|)
name|NColorGroups
condition|;
name|grp
operator|++
control|)
name|palette
operator|.
name|d
operator|->
name|br
index|[
name|grp
index|]
index|[
name|role
index|]
operator|=
name|other
operator|.
name|d
operator|->
name|br
index|[
name|grp
index|]
index|[
name|role
index|]
expr_stmt|;
return|return
name|palette
return|;
block|}
end_function
begin_comment
comment|/*!     \fn uint QPalette::resolve() const     \internal */
end_comment
begin_comment
comment|/*!     \fn void QPalette::resolve(uint mask)     \internal */
end_comment
begin_comment
comment|/*****************************************************************************   QPalette stream functions  *****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_decl_stmt
DECL|variable|NumOldRoles
specifier|static
specifier|const
name|int
name|NumOldRoles
init|=
literal|7
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|oldRoles
specifier|static
specifier|const
name|int
name|oldRoles
index|[
literal|7
index|]
init|=
block|{
name|QPalette
operator|::
name|Foreground
block|,
name|QPalette
operator|::
name|Background
block|,
name|QPalette
operator|::
name|Light
block|,
name|QPalette
operator|::
name|Dark
block|,
name|QPalette
operator|::
name|Mid
block|,
name|QPalette
operator|::
name|Text
block|,
name|QPalette
operator|::
name|Base
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*!     \relates QPalette      Writes the palette, \a p to the stream \a s and returns a     reference to the stream.      \sa{Serializing Qt Data Types}{Format of the QDataStream operators} */
end_comment
begin_function
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
specifier|const
name|QPalette
modifier|&
name|p
parameter_list|)
block|{
for|for
control|(
name|int
name|grp
init|=
literal|0
init|;
name|grp
operator|<
operator|(
name|int
operator|)
name|QPalette
operator|::
name|NColorGroups
condition|;
name|grp
operator|++
control|)
block|{
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// Qt 1.x
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumOldRoles
condition|;
operator|++
name|i
control|)
name|s
operator|<<
name|p
operator|.
name|d
operator|->
name|br
index|[
name|grp
index|]
index|[
name|oldRoles
index|[
name|i
index|]
index|]
operator|.
name|color
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|int
name|max
init|=
name|QPalette
operator|::
name|ToolTipText
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|<=
name|QDataStream
operator|::
name|Qt_2_1
condition|)
name|max
operator|=
name|QPalette
operator|::
name|HighlightedText
operator|+
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|<=
name|QDataStream
operator|::
name|Qt_4_3
condition|)
name|max
operator|=
name|QPalette
operator|::
name|AlternateBase
operator|+
literal|1
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|max
condition|;
name|r
operator|++
control|)
name|s
operator|<<
name|p
operator|.
name|d
operator|->
name|br
index|[
name|grp
index|]
index|[
name|r
index|]
expr_stmt|;
block|}
block|}
return|return
name|s
return|;
block|}
end_function
begin_function
DECL|function|readV1ColorGroup
specifier|static
name|void
name|readV1ColorGroup
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
name|QPalette
modifier|&
name|pal
parameter_list|,
name|QPalette
operator|::
name|ColorGroup
name|grp
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumOldRoles
condition|;
operator|++
name|i
control|)
block|{
name|QColor
name|col
decl_stmt|;
name|s
operator|>>
name|col
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|grp
argument_list|,
operator|(
name|QPalette
operator|::
name|ColorRole
operator|)
name|oldRoles
index|[
name|i
index|]
argument_list|,
name|col
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \relates QPalette      Reads a palette from the stream, \a s into the palette \a p, and     returns a reference to the stream.      \sa{Serializing Qt Data Types}{Format of the QDataStream operators} */
end_comment
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
name|QPalette
modifier|&
name|p
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|==
literal|1
condition|)
block|{
name|p
operator|=
name|QPalette
argument_list|()
expr_stmt|;
name|readV1ColorGroup
argument_list|(
name|s
argument_list|,
name|p
argument_list|,
name|QPalette
operator|::
name|Active
argument_list|)
expr_stmt|;
name|readV1ColorGroup
argument_list|(
name|s
argument_list|,
name|p
argument_list|,
name|QPalette
operator|::
name|Disabled
argument_list|)
expr_stmt|;
name|readV1ColorGroup
argument_list|(
name|s
argument_list|,
name|p
argument_list|,
name|QPalette
operator|::
name|Inactive
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|max
init|=
name|QPalette
operator|::
name|NColorRoles
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|<=
name|QDataStream
operator|::
name|Qt_2_1
condition|)
block|{
name|p
operator|=
name|QPalette
argument_list|()
expr_stmt|;
name|max
operator|=
name|QPalette
operator|::
name|HighlightedText
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|<=
name|QDataStream
operator|::
name|Qt_4_3
condition|)
block|{
name|p
operator|=
name|QPalette
argument_list|()
expr_stmt|;
name|max
operator|=
name|QPalette
operator|::
name|AlternateBase
operator|+
literal|1
expr_stmt|;
block|}
name|QBrush
name|tmp
decl_stmt|;
for|for
control|(
name|int
name|grp
init|=
literal|0
init|;
name|grp
operator|<
operator|(
name|int
operator|)
name|QPalette
operator|::
name|NColorGroups
condition|;
operator|++
name|grp
control|)
block|{
for|for
control|(
name|int
name|role
init|=
literal|0
init|;
name|role
operator|<
name|max
condition|;
operator|++
name|role
control|)
block|{
name|s
operator|>>
name|tmp
expr_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
operator|(
name|QPalette
operator|::
name|ColorRole
operator|)
name|role
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|s
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_DATASTREAM
end_comment
begin_comment
comment|/*!     Returns true if this palette and \a p are copies of each other,     i.e. one of them was created as a copy of the other and neither     was subsequently modified; otherwise returns false. This is much     stricter than equality.      \sa operator=(), operator==() */
end_comment
begin_function
DECL|function|isCopyOf
name|bool
name|QPalette
operator|::
name|isCopyOf
parameter_list|(
specifier|const
name|QPalette
modifier|&
name|p
parameter_list|)
specifier|const
block|{
return|return
name|d
operator|==
name|p
operator|.
name|d
return|;
block|}
end_function
begin_comment
comment|/*!      Sets a the group at \a cg. You can pass either brushes, pixmaps or     plain colors for \a windowText, \a button, \a light, \a dark, \a     mid, \a text, \a bright_text, \a base and \a window.      \sa QBrush */
end_comment
begin_function
DECL|function|setColorGroup
name|void
name|QPalette
operator|::
name|setColorGroup
parameter_list|(
name|ColorGroup
name|cg
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|windowText
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|button
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|light
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|dark
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|mid
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|text
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|bright_text
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|base
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|window
parameter_list|)
block|{
name|QBrush
name|alt_base
init|=
name|QBrush
argument_list|(
name|qt_mix_colors
argument_list|(
name|base
operator|.
name|color
argument_list|()
argument_list|,
name|button
operator|.
name|color
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QBrush
name|mid_light
init|=
name|QBrush
argument_list|(
name|qt_mix_colors
argument_list|(
name|button
operator|.
name|color
argument_list|()
argument_list|,
name|light
operator|.
name|color
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QColor
name|toolTipBase
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|220
argument_list|)
decl_stmt|;
name|QColor
name|toolTipText
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|setColorGroup
argument_list|(
name|cg
argument_list|,
name|windowText
argument_list|,
name|button
argument_list|,
name|light
argument_list|,
name|dark
argument_list|,
name|mid
argument_list|,
name|text
argument_list|,
name|bright_text
argument_list|,
name|base
argument_list|,
name|alt_base
argument_list|,
name|window
argument_list|,
name|mid_light
argument_list|,
name|text
argument_list|,
name|QBrush
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
argument_list|,
name|QBrush
argument_list|(
name|Qt
operator|::
name|darkBlue
argument_list|)
argument_list|,
name|QBrush
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
argument_list|,
name|QBrush
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|,
name|QBrush
argument_list|(
name|Qt
operator|::
name|magenta
argument_list|)
argument_list|,
name|QBrush
argument_list|(
name|toolTipBase
argument_list|)
argument_list|,
name|QBrush
argument_list|(
name|toolTipText
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|resolve_mask
operator|&=
operator|~
operator|(
literal|1
operator|<<
name|Highlight
operator|)
expr_stmt|;
name|data
operator|.
name|resolve_mask
operator|&=
operator|~
operator|(
literal|1
operator|<<
name|HighlightedText
operator|)
expr_stmt|;
name|data
operator|.
name|resolve_mask
operator|&=
operator|~
operator|(
literal|1
operator|<<
name|LinkVisited
operator|)
expr_stmt|;
name|data
operator|.
name|resolve_mask
operator|&=
operator|~
operator|(
literal|1
operator|<<
name|Link
operator|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!\internal*/
end_comment
begin_function
name|void
DECL|function|setColorGroup
name|QPalette
operator|::
name|setColorGroup
parameter_list|(
name|ColorGroup
name|cg
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|foreground
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|button
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|light
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|dark
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|mid
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|text
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|bright_text
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|base
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|alternate_base
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|background
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|midlight
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|button_text
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|shadow
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|highlight
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|highlighted_text
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|link
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|link_visited
parameter_list|)
block|{
name|setColorGroup
argument_list|(
name|cg
argument_list|,
name|foreground
argument_list|,
name|button
argument_list|,
name|light
argument_list|,
name|dark
argument_list|,
name|mid
argument_list|,
name|text
argument_list|,
name|bright_text
argument_list|,
name|base
argument_list|,
name|alternate_base
argument_list|,
name|background
argument_list|,
name|midlight
argument_list|,
name|button_text
argument_list|,
name|shadow
argument_list|,
name|highlight
argument_list|,
name|highlighted_text
argument_list|,
name|link
argument_list|,
name|link_visited
argument_list|,
name|background
argument_list|,
name|foreground
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!\internal*/
end_comment
begin_function
DECL|function|setColorGroup
name|void
name|QPalette
operator|::
name|setColorGroup
parameter_list|(
name|ColorGroup
name|cg
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|foreground
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|button
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|light
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|dark
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|mid
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|text
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|bright_text
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|base
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|alternate_base
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|background
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|midlight
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|button_text
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|shadow
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|highlight
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|highlighted_text
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|link
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|link_visited
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|toolTipBase
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|toolTipText
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|setBrush
argument_list|(
name|cg
argument_list|,
name|WindowText
argument_list|,
name|foreground
argument_list|)
expr_stmt|;
name|setBrush
argument_list|(
name|cg
argument_list|,
name|Button
argument_list|,
name|button
argument_list|)
expr_stmt|;
name|setBrush
argument_list|(
name|cg
argument_list|,
name|Light
argument_list|,
name|light
argument_list|)
expr_stmt|;
name|setBrush
argument_list|(
name|cg
argument_list|,
name|Dark
argument_list|,
name|dark
argument_list|)
expr_stmt|;
name|setBrush
argument_list|(
name|cg
argument_list|,
name|Mid
argument_list|,
name|mid
argument_list|)
expr_stmt|;
name|setBrush
argument_list|(
name|cg
argument_list|,
name|Text
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|setBrush
argument_list|(
name|cg
argument_list|,
name|BrightText
argument_list|,
name|bright_text
argument_list|)
expr_stmt|;
name|setBrush
argument_list|(
name|cg
argument_list|,
name|Base
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|setBrush
argument_list|(
name|cg
argument_list|,
name|AlternateBase
argument_list|,
name|alternate_base
argument_list|)
expr_stmt|;
name|setBrush
argument_list|(
name|cg
argument_list|,
name|Window
argument_list|,
name|background
argument_list|)
expr_stmt|;
name|setBrush
argument_list|(
name|cg
argument_list|,
name|Midlight
argument_list|,
name|midlight
argument_list|)
expr_stmt|;
name|setBrush
argument_list|(
name|cg
argument_list|,
name|ButtonText
argument_list|,
name|button_text
argument_list|)
expr_stmt|;
name|setBrush
argument_list|(
name|cg
argument_list|,
name|Shadow
argument_list|,
name|shadow
argument_list|)
expr_stmt|;
name|setBrush
argument_list|(
name|cg
argument_list|,
name|Highlight
argument_list|,
name|highlight
argument_list|)
expr_stmt|;
name|setBrush
argument_list|(
name|cg
argument_list|,
name|HighlightedText
argument_list|,
name|highlighted_text
argument_list|)
expr_stmt|;
name|setBrush
argument_list|(
name|cg
argument_list|,
name|Link
argument_list|,
name|link
argument_list|)
expr_stmt|;
name|setBrush
argument_list|(
name|cg
argument_list|,
name|LinkVisited
argument_list|,
name|link_visited
argument_list|)
expr_stmt|;
name|setBrush
argument_list|(
name|cg
argument_list|,
name|ToolTipBase
argument_list|,
name|toolTipBase
argument_list|)
expr_stmt|;
name|setBrush
argument_list|(
name|cg
argument_list|,
name|ToolTipText
argument_list|,
name|toolTipText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_fusionPalette
name|Q_GUI_EXPORT
name|QPalette
name|qt_fusionPalette
parameter_list|()
block|{
name|QColor
name|backGround
argument_list|(
literal|239
argument_list|,
literal|235
argument_list|,
literal|231
argument_list|)
decl_stmt|;
name|QColor
name|light
init|=
name|backGround
operator|.
name|lighter
argument_list|(
literal|150
argument_list|)
decl_stmt|;
name|QColor
name|mid
argument_list|(
name|backGround
operator|.
name|darker
argument_list|(
literal|130
argument_list|)
argument_list|)
decl_stmt|;
name|QColor
name|midLight
init|=
name|mid
operator|.
name|lighter
argument_list|(
literal|110
argument_list|)
decl_stmt|;
name|QColor
name|base
init|=
name|Qt
operator|::
name|white
decl_stmt|;
name|QColor
name|disabledBase
argument_list|(
name|backGround
argument_list|)
decl_stmt|;
name|QColor
name|dark
init|=
name|backGround
operator|.
name|darker
argument_list|(
literal|150
argument_list|)
decl_stmt|;
name|QColor
name|darkDisabled
init|=
name|QColor
argument_list|(
literal|209
argument_list|,
literal|200
argument_list|,
literal|191
argument_list|)
operator|.
name|darker
argument_list|(
literal|110
argument_list|)
decl_stmt|;
name|QColor
name|text
init|=
name|Qt
operator|::
name|black
decl_stmt|;
name|QColor
name|hightlightedText
init|=
name|Qt
operator|::
name|white
decl_stmt|;
name|QColor
name|disabledText
init|=
name|QColor
argument_list|(
literal|190
argument_list|,
literal|190
argument_list|,
literal|190
argument_list|)
decl_stmt|;
name|QColor
name|button
init|=
name|backGround
decl_stmt|;
name|QColor
name|shadow
init|=
name|dark
operator|.
name|darker
argument_list|(
literal|135
argument_list|)
decl_stmt|;
name|QColor
name|disabledShadow
init|=
name|shadow
operator|.
name|lighter
argument_list|(
literal|150
argument_list|)
decl_stmt|;
name|QPalette
name|fusionPalette
argument_list|(
name|Qt
operator|::
name|black
argument_list|,
name|backGround
argument_list|,
name|light
argument_list|,
name|dark
argument_list|,
name|mid
argument_list|,
name|text
argument_list|,
name|base
argument_list|)
decl_stmt|;
name|fusionPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|midLight
argument_list|)
expr_stmt|;
name|fusionPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|button
argument_list|)
expr_stmt|;
name|fusionPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Shadow
argument_list|,
name|shadow
argument_list|)
expr_stmt|;
name|fusionPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|hightlightedText
argument_list|)
expr_stmt|;
name|fusionPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|disabledText
argument_list|)
expr_stmt|;
name|fusionPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|disabledBase
argument_list|)
expr_stmt|;
name|fusionPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Dark
argument_list|,
name|darkDisabled
argument_list|)
expr_stmt|;
name|fusionPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Shadow
argument_list|,
name|disabledShadow
argument_list|)
expr_stmt|;
name|fusionPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|QColor
argument_list|(
literal|48
argument_list|,
literal|140
argument_list|,
literal|198
argument_list|)
argument_list|)
expr_stmt|;
name|fusionPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|QColor
argument_list|(
literal|145
argument_list|,
literal|141
argument_list|,
literal|126
argument_list|)
argument_list|)
expr_stmt|;
name|fusionPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|QColor
argument_list|(
literal|145
argument_list|,
literal|141
argument_list|,
literal|126
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fusionPalette
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
specifier|const
name|QPalette
modifier|&
parameter_list|)
block|{
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QPalette()"
expr_stmt|;
return|return
name|dbg
operator|.
name|space
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
