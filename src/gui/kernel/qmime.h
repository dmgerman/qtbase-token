begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QMIME_H
end_ifndef
begin_define
DECL|macro|QMIME_H
define|#
directive|define
name|QMIME_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qmimedata.h>
end_include
begin_function
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|function|QT_MODULE
name|QT_MODULE
parameter_list|(
name|Gui
parameter_list|)
name|class
name|Q_GUI_EXPORT
name|QMimeSource
decl_stmt|{ public:     virtual ~QMimeSource(
end_function
begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|virtual
specifier|const
name|char
modifier|*
name|format
argument_list|(
name|int
name|n
operator|=
literal|0
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|virtual
name|bool
name|provides
argument_list|(
specifier|const
name|char
operator|*
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|virtual
name|QByteArray
name|encodedData
argument_list|(
specifier|const
name|char
operator|*
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_if
unit|};
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
end_if
begin_macro
name|QT_BEGIN_INCLUDE_NAMESPACE
end_macro
begin_typedef
DECL|typedef|FORMATETC
typedef|typedef
name|struct
name|tagFORMATETC
name|FORMATETC
typedef|;
end_typedef
begin_typedef
DECL|typedef|STGMEDIUM
typedef|typedef
name|struct
name|tagSTGMEDIUM
name|STGMEDIUM
typedef|;
end_typedef
begin_struct_decl
struct_decl|struct
name|IDataObject
struct_decl|;
end_struct_decl
begin_include
include|#
directive|include
file|<QtCore/qvariant.h>
end_include
begin_decl_stmt
name|QT_END_INCLUDE_NAMESPACE
comment|/*   Encapsulation of conversion between MIME and Windows CLIPFORMAT.   Not need on X11, as the underlying protocol uses the MIME standard   directly. */
name|class
name|Q_GUI_EXPORT
name|QWindowsMime
block|{
name|public
label|:
name|QWindowsMime
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|QWindowsMime
argument_list|()
expr_stmt|;
comment|// for converting from Qt
name|virtual
name|bool
name|canConvertFromMime
argument_list|(
specifier|const
name|FORMATETC
operator|&
name|formatetc
argument_list|,
specifier|const
name|QMimeData
operator|*
name|mimeData
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|bool
name|convertFromMime
argument_list|(
specifier|const
name|FORMATETC
operator|&
name|formatetc
argument_list|,
specifier|const
name|QMimeData
operator|*
name|mimeData
argument_list|,
name|STGMEDIUM
operator|*
name|pmedium
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|QVector
operator|<
name|FORMATETC
operator|>
name|formatsForMime
argument_list|(
argument|const QString&mimeType
argument_list|,
argument|const QMimeData *mimeData
argument_list|)
specifier|const
operator|=
literal|0
expr_stmt|;
comment|// for converting to Qt
name|virtual
name|bool
name|canConvertToMime
argument_list|(
specifier|const
name|QString
operator|&
name|mimeType
argument_list|,
name|IDataObject
operator|*
name|pDataObj
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|QVariant
name|convertToMime
argument_list|(
specifier|const
name|QString
operator|&
name|mimeType
argument_list|,
name|IDataObject
operator|*
name|pDataObj
argument_list|,
name|QVariant
operator|::
name|Type
name|preferredType
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|QString
name|mimeForFormat
argument_list|(
specifier|const
name|FORMATETC
operator|&
name|formatetc
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
specifier|static
name|int
name|registerMimeType
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
function_decl|;
name|private
label|:
name|friend
name|class
name|QClipboardWatcher
decl_stmt|;
name|friend
name|class
name|QDragManager
decl_stmt|;
name|friend
name|class
name|QDropData
decl_stmt|;
name|friend
name|class
name|QOleDataObject
decl_stmt|;
specifier|static
name|QWindowsMime
modifier|*
name|converterToMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|,
name|IDataObject
modifier|*
name|pDataObj
parameter_list|)
function_decl|;
specifier|static
name|QStringList
name|allMimesForFormats
parameter_list|(
name|IDataObject
modifier|*
name|pDataObj
parameter_list|)
function_decl|;
specifier|static
name|QWindowsMime
modifier|*
name|converterFromMime
parameter_list|(
specifier|const
name|FORMATETC
modifier|&
name|formatetc
parameter_list|,
specifier|const
name|QMimeData
modifier|*
name|mimeData
parameter_list|)
function_decl|;
specifier|static
name|QVector
operator|<
name|FORMATETC
operator|>
name|allFormatsForMime
argument_list|(
specifier|const
name|QMimeData
operator|*
name|mimeData
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
end_if
begin_comment
comment|/*   Encapsulation of conversion between MIME and Mac flavor.   Not needed on X11, as the underlying protocol uses the MIME standard   directly. */
end_comment
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QMacMime
block|{
comment|//Obsolete
name|char
name|type
decl_stmt|;
name|public
label|:
enum|enum
name|QMacMimeType
block|{
name|MIME_DND
init|=
literal|0x01
block|,
name|MIME_CLIP
init|=
literal|0x02
block|,
name|MIME_QT_CONVERTOR
init|=
literal|0x04
block|,
name|MIME_ALL
init|=
name|MIME_DND
operator||
name|MIME_CLIP
block|}
enum|;
name|explicit
name|QMacMime
parameter_list|(
name|char
parameter_list|)
block|{ }
name|virtual
operator|~
name|QMacMime
argument_list|()
block|{ }
specifier|static
name|void
name|initialize
argument_list|()
block|{ }
specifier|static
name|QList
operator|<
name|QMacMime
operator|*
operator|>
name|all
argument_list|(
argument|QMacMimeType
argument_list|)
block|{
return|return
name|QList
operator|<
name|QMacMime
operator|*
operator|>
operator|(
operator|)
return|;
block|}
specifier|static
name|QMacMime
modifier|*
name|convertor
parameter_list|(
name|QMacMimeType
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
name|int
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
specifier|static
name|QString
name|flavorToMime
parameter_list|(
name|QMacMimeType
parameter_list|,
name|int
parameter_list|)
block|{
return|return
name|QString
argument_list|()
return|;
block|}
name|virtual
name|QString
name|convertorName
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|int
name|countFlavors
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|int
name|flavor
parameter_list|(
name|int
name|index
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|int
name|flav
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|mimeFor
parameter_list|(
name|int
name|flav
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|int
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QVariant
name|convertToMime
argument_list|(
specifier|const
name|QString
operator|&
name|mime
argument_list|,
name|QList
operator|<
name|QByteArray
operator|>
name|data
argument_list|,
name|int
name|flav
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|QList
operator|<
name|QByteArray
operator|>
name|convertFromMime
argument_list|(
argument|const QString&mime
argument_list|,
argument|QVariant data
argument_list|,
argument|int flav
argument_list|)
operator|=
literal|0
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QMacPasteboardMime
block|{
name|char
name|type
decl_stmt|;
name|public
label|:
enum|enum
name|QMacPasteboardMimeType
block|{
name|MIME_DND
init|=
literal|0x01
block|,
name|MIME_CLIP
init|=
literal|0x02
block|,
name|MIME_QT_CONVERTOR
init|=
literal|0x04
block|,
name|MIME_QT3_CONVERTOR
init|=
literal|0x08
block|,
name|MIME_ALL
init|=
name|MIME_DND
operator||
name|MIME_CLIP
block|}
enum|;
name|explicit
name|QMacPasteboardMime
parameter_list|(
name|char
parameter_list|)
function_decl|;
name|virtual
operator|~
name|QMacPasteboardMime
argument_list|()
expr_stmt|;
specifier|static
name|void
name|initialize
parameter_list|()
function_decl|;
specifier|static
name|QList
operator|<
name|QMacPasteboardMime
operator|*
operator|>
name|all
argument_list|(
name|uchar
argument_list|)
expr_stmt|;
specifier|static
name|QMacPasteboardMime
modifier|*
name|convertor
parameter_list|(
name|uchar
parameter_list|,
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
specifier|static
name|QString
name|flavorToMime
parameter_list|(
name|uchar
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|virtual
name|QString
name|convertorName
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|mimeFor
parameter_list|(
name|QString
name|flav
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QVariant
name|convertToMime
argument_list|(
specifier|const
name|QString
operator|&
name|mime
argument_list|,
name|QList
operator|<
name|QByteArray
operator|>
name|data
argument_list|,
name|QString
name|flav
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|QList
operator|<
name|QByteArray
operator|>
name|convertFromMime
argument_list|(
argument|const QString&mime
argument_list|,
argument|QVariant data
argument_list|,
argument|QString flav
argument_list|)
operator|=
literal|0
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|// ### Qt 5: Add const QStringList& QMacPasteboardMime::supportedFlavours()
end_comment
begin_function_decl
name|Q_GUI_EXPORT
name|void
name|qRegisterDraggedTypes
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|types
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_WS_MAC
end_comment
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QMIME_H
end_comment
end_unit
