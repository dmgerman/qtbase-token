begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qscreen_qws.h"
end_include
begin_include
include|#
directive|include
file|"private/qapplication_p.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_macro
name|QT_USE_NAMESPACE
end_macro
begin_constructor
DECL|function|QDesktopWidget
name|QDesktopWidget
operator|::
name|QDesktopWidget
parameter_list|()
member_init_list|:
name|QWidget
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Desktop
argument_list|)
block|{
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"desktop"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QDesktopWidget
name|QDesktopWidget
operator|::
name|~
name|QDesktopWidget
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|isVirtualDesktop
name|bool
name|QDesktopWidget
operator|::
name|isVirtualDesktop
parameter_list|()
specifier|const
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|primaryScreen
name|int
name|QDesktopWidget
operator|::
name|primaryScreen
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|numScreens
name|int
name|QDesktopWidget
operator|::
name|numScreens
parameter_list|()
specifier|const
block|{
name|QScreen
modifier|*
name|screen
init|=
name|QScreen
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|screen
condition|)
return|return
literal|0
return|;
specifier|const
name|QList
argument_list|<
name|QScreen
modifier|*
argument_list|>
name|subScreens
init|=
name|screen
operator|->
name|subScreens
argument_list|()
decl_stmt|;
return|return
name|qMax
argument_list|(
name|subScreens
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|screen
name|QWidget
modifier|*
name|QDesktopWidget
operator|::
name|screen
parameter_list|(
name|int
parameter_list|)
block|{
return|return
name|this
return|;
block|}
end_function
begin_function
DECL|function|availableGeometry
specifier|const
name|QRect
name|QDesktopWidget
operator|::
name|availableGeometry
parameter_list|(
name|int
name|screenNo
parameter_list|)
specifier|const
block|{
specifier|const
name|QScreen
modifier|*
name|screen
init|=
name|QScreen
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
name|screenNo
operator|==
operator|-
literal|1
condition|)
name|screenNo
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|screen
operator|||
name|screenNo
operator|<
literal|0
condition|)
return|return
name|QRect
argument_list|()
return|;
specifier|const
name|QList
argument_list|<
name|QScreen
modifier|*
argument_list|>
name|subScreens
init|=
name|screen
operator|->
name|subScreens
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|subScreens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|screenNo
operator|>=
name|subScreens
operator|.
name|size
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
name|screen
operator|=
name|subScreens
operator|.
name|at
argument_list|(
name|screenNo
argument_list|)
expr_stmt|;
block|}
name|QApplicationPrivate
modifier|*
name|ap
init|=
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|r
init|=
name|ap
operator|->
name|maxWindowRect
argument_list|(
name|screen
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|r
return|;
return|return
name|screen
operator|->
name|region
argument_list|()
operator|.
name|boundingRect
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|screenGeometry
specifier|const
name|QRect
name|QDesktopWidget
operator|::
name|screenGeometry
parameter_list|(
name|int
name|screenNo
parameter_list|)
specifier|const
block|{
specifier|const
name|QScreen
modifier|*
name|screen
init|=
name|QScreen
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
name|screenNo
operator|==
operator|-
literal|1
condition|)
name|screenNo
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|screen
operator|||
name|screenNo
operator|<
literal|0
condition|)
return|return
name|QRect
argument_list|()
return|;
specifier|const
name|QList
argument_list|<
name|QScreen
modifier|*
argument_list|>
name|subScreens
init|=
name|screen
operator|->
name|subScreens
argument_list|()
decl_stmt|;
if|if
condition|(
name|subScreens
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|screenNo
operator|==
literal|0
condition|)
return|return
name|screen
operator|->
name|region
argument_list|()
operator|.
name|boundingRect
argument_list|()
return|;
if|if
condition|(
name|screenNo
operator|>=
name|subScreens
operator|.
name|size
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
return|return
name|subScreens
operator|.
name|at
argument_list|(
name|screenNo
argument_list|)
operator|->
name|region
argument_list|()
operator|.
name|boundingRect
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|screenNumber
name|int
name|QDesktopWidget
operator|::
name|screenNumber
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|w
condition|)
return|return
literal|0
return|;
name|QRect
name|frame
init|=
name|w
operator|->
name|frameGeometry
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|isWindow
argument_list|()
condition|)
name|frame
operator|.
name|moveTopLeft
argument_list|(
name|w
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QPoint
name|midpoint
init|=
operator|(
name|frame
operator|.
name|topLeft
argument_list|()
operator|+
name|frame
operator|.
name|bottomRight
argument_list|()
operator|)
operator|/
literal|2
decl_stmt|;
return|return
name|screenNumber
argument_list|(
name|midpoint
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|screenNumber
name|int
name|QDesktopWidget
operator|::
name|screenNumber
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
specifier|const
block|{
specifier|const
name|QScreen
modifier|*
name|screen
init|=
name|QScreen
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|screen
operator|||
operator|!
name|screen
operator|->
name|region
argument_list|()
operator|.
name|contains
argument_list|(
name|p
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
specifier|const
name|QList
argument_list|<
name|QScreen
modifier|*
argument_list|>
name|subScreens
init|=
name|screen
operator|->
name|subScreens
argument_list|()
decl_stmt|;
if|if
condition|(
name|subScreens
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|0
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subScreens
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|subScreens
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|region
argument_list|()
operator|.
name|contains
argument_list|(
name|p
argument_list|)
condition|)
return|return
name|i
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|resizeEvent
name|void
name|QDesktopWidget
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
parameter_list|)
block|{ }
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
