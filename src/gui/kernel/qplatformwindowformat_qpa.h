begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPLATFORMWINDOWFORMAT_QPA_H
end_ifndef
begin_define
DECL|macro|QPLATFORMWINDOWFORMAT_QPA_H
define|#
directive|define
name|QPLATFORMWINDOWFORMAT_QPA_H
end_define
begin_include
include|#
directive|include
file|<QtGui/QPlatformWindow>
end_include
begin_function
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
parameter_list|(
name|Gui
parameter_list|)
name|class
name|QPlatformWindowFormatPrivate
decl_stmt|;
name|class
name|Q_GUI_EXPORT
name|QPlatformWindowFormat
decl_stmt|{ public:     enum FormatOption
block|{
name|DoubleBuffer
operator|=
literal|0x0001
operator|,
name|DepthBuffer
operator|=
literal|0x0002
operator|,
name|Rgba
operator|=
literal|0x0004
operator|,
name|AlphaChannel
operator|=
literal|0x0008
operator|,
name|AccumBuffer
operator|=
literal|0x0010
operator|,
name|StencilBuffer
operator|=
literal|0x0020
operator|,
name|StereoBuffers
operator|=
literal|0x0040
operator|,
name|DirectRendering
operator|=
literal|0x0080
operator|,
name|HasOverlay
operator|=
literal|0x0100
operator|,
name|SampleBuffers
operator|=
literal|0x0200
operator|,
name|DeprecatedFunctions
operator|=
literal|0x0400
operator|,
name|HasWindowSurface
operator|=
literal|0x0800
operator|,
name|SingleBuffer
operator|=
name|DoubleBuffer
operator|<<
literal|16
operator|,
name|NoDepthBuffer
operator|=
name|DepthBuffer
operator|<<
literal|16
operator|,
name|ColorIndex
operator|=
name|Rgba
operator|<<
literal|16
operator|,
name|NoAlphaChannel
operator|=
name|AlphaChannel
operator|<<
literal|16
operator|,
name|NoAccumBuffer
operator|=
name|AccumBuffer
operator|<<
literal|16
operator|,
name|NoStencilBuffer
operator|=
name|StencilBuffer
operator|<<
literal|16
operator|,
name|NoStereoBuffers
operator|=
name|StereoBuffers
operator|<<
literal|16
operator|,
name|IndirectRendering
operator|=
name|DirectRendering
operator|<<
literal|16
operator|,
name|NoOverlay
operator|=
name|HasOverlay
operator|<<
literal|16
operator|,
name|NoSampleBuffers
operator|=
name|SampleBuffers
operator|<<
literal|16
operator|,
name|NoDeprecatedFunctions
operator|=
name|DeprecatedFunctions
operator|<<
literal|16
operator|,
name|NoWindowSurface
operator|=
name|HasWindowSurface
operator|<<
literal|16
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|Q_DECLARE_FLAGS
argument_list|(
name|FormatOptions
argument_list|,
name|FormatOption
argument_list|)
expr|enum
name|WindowApi
block|{
name|Raster
block|,
name|OpenGL
block|,
name|OpenVG
block|}
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QPlatformWindowFormat
argument_list|()
expr_stmt|;
end_expr_stmt
begin_macro
name|QPlatformWindowFormat
argument_list|(
argument|FormatOptions options
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|QPlatformWindowFormat
argument_list|(
specifier|const
name|QPlatformWindowFormat
operator|&
name|other
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QPlatformWindowFormat
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QPlatformWindowFormat
operator|&
name|other
operator|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
operator|~
name|QPlatformWindowFormat
argument_list|()
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setDepthBufferSize
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|int
name|depthBufferSize
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setAccumBufferSize
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|int
name|accumBufferSize
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setRedBufferSize
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|int
name|redBufferSize
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setGreenBufferSize
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|int
name|greenBufferSize
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setBlueBufferSize
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|int
name|blueBufferSize
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setAlphaBufferSize
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|int
name|alphaBufferSize
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setStencilBufferSize
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|int
name|stencilBufferSize
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setSampleBuffers
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|sampleBuffers
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setSamples
parameter_list|(
name|int
name|numSamples
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|int
name|samples
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setSwapInterval
parameter_list|(
name|int
name|interval
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|int
name|swapInterval
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|void
name|setWindowApi
argument_list|(
name|QPlatformWindowFormat
operator|::
name|WindowApi
name|api
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|WindowApi
name|windowApi
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setSharedContext
parameter_list|(
name|QPlatformGLContext
modifier|*
name|context
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|QPlatformGLContext
operator|*
name|sharedGLContext
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|bool
name|doubleBuffer
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setDoubleBuffer
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|depth
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setDepth
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|rgba
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setRgba
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|alpha
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setAlpha
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|accum
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setAccum
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|stencil
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setStencil
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|stereo
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setStereo
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|directRendering
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setDirectRendering
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|hasWindowSurface
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setWindowSurface
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|void
name|setOption
argument_list|(
name|QPlatformWindowFormat
operator|::
name|FormatOptions
name|opt
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|testOption
argument_list|(
name|QPlatformWindowFormat
operator|::
name|FormatOptions
name|opt
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|static
name|QPlatformWindowFormat
name|defaultFormat
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|setDefaultFormat
parameter_list|(
specifier|const
name|QPlatformWindowFormat
modifier|&
name|f
parameter_list|)
function_decl|;
end_function_decl
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|QPlatformWindowFormatPrivate
modifier|*
name|d
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|detach
parameter_list|()
function_decl|;
end_function_decl
begin_expr_stmt
name|friend
name|Q_GUI_EXPORT
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QPlatformWindowFormat
operator|&
operator|,
specifier|const
name|QPlatformWindowFormat
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|friend
name|Q_GUI_EXPORT
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QPlatformWindowFormat
operator|&
operator|,
specifier|const
name|QPlatformWindowFormat
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|friend
name|Q_GUI_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QPlatformWindowFormat
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|};
name|Q_GUI_EXPORT
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QPlatformWindowFormat
operator|&
operator|,
specifier|const
name|QPlatformWindowFormat
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_GUI_EXPORT
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QPlatformWindowFormat
operator|&
operator|,
specifier|const
name|QPlatformWindowFormat
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_OPENGL_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QPlatformWindowFormat
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QPlatformWindowFormat::FormatOptions
argument_list|)
end_macro
begin_expr_stmt
DECL|function|doubleBuffer
specifier|inline
name|bool
name|QPlatformWindowFormat
operator|::
name|doubleBuffer
argument_list|()
specifier|const
block|{
return|return
name|testOption
argument_list|(
name|QPlatformWindowFormat
operator|::
name|DoubleBuffer
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|depth
specifier|inline
name|bool
name|QPlatformWindowFormat
operator|::
name|depth
argument_list|()
specifier|const
block|{
return|return
name|testOption
argument_list|(
name|QPlatformWindowFormat
operator|::
name|DepthBuffer
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|rgba
specifier|inline
name|bool
name|QPlatformWindowFormat
operator|::
name|rgba
argument_list|()
specifier|const
block|{
return|return
name|testOption
argument_list|(
name|QPlatformWindowFormat
operator|::
name|Rgba
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|alpha
specifier|inline
name|bool
name|QPlatformWindowFormat
operator|::
name|alpha
argument_list|()
specifier|const
block|{
return|return
name|testOption
argument_list|(
name|QPlatformWindowFormat
operator|::
name|AlphaChannel
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|accum
specifier|inline
name|bool
name|QPlatformWindowFormat
operator|::
name|accum
argument_list|()
specifier|const
block|{
return|return
name|testOption
argument_list|(
name|QPlatformWindowFormat
operator|::
name|AccumBuffer
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|stencil
specifier|inline
name|bool
name|QPlatformWindowFormat
operator|::
name|stencil
argument_list|()
specifier|const
block|{
return|return
name|testOption
argument_list|(
name|QPlatformWindowFormat
operator|::
name|StencilBuffer
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|stereo
specifier|inline
name|bool
name|QPlatformWindowFormat
operator|::
name|stereo
argument_list|()
specifier|const
block|{
return|return
name|testOption
argument_list|(
name|QPlatformWindowFormat
operator|::
name|StereoBuffers
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|directRendering
specifier|inline
name|bool
name|QPlatformWindowFormat
operator|::
name|directRendering
argument_list|()
specifier|const
block|{
return|return
name|testOption
argument_list|(
name|QPlatformWindowFormat
operator|::
name|DirectRendering
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|hasWindowSurface
specifier|inline
name|bool
name|QPlatformWindowFormat
operator|::
name|hasWindowSurface
argument_list|()
specifier|const
block|{
return|return
name|testOption
argument_list|(
name|QPlatformWindowFormat
operator|::
name|HasWindowSurface
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|sampleBuffers
specifier|inline
name|bool
name|QPlatformWindowFormat
operator|::
name|sampleBuffers
argument_list|()
specifier|const
block|{
return|return
name|testOption
argument_list|(
name|QPlatformWindowFormat
operator|::
name|SampleBuffers
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QPLATFORMWINDOWFORMAT_QPA_H
end_comment
end_unit
