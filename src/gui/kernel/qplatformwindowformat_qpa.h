begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPLATFORMWINDOWFORMAT_QPA_H
end_ifndef
begin_define
DECL|macro|QPLATFORMWINDOWFORMAT_QPA_H
define|#
directive|define
name|QPLATFORMWINDOWFORMAT_QPA_H
end_define
begin_include
include|#
directive|include
file|<QtGui/QPlatformWindow>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Gui
argument_list|)
name|class
name|QWindowFormatPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWindowPrivate
name|class
name|QWindowPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWindow
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QWindow
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QString windowTitle READ windowTitle WRITE setWindowTitle
argument_list|)
name|public
operator|:
name|void
name|setVisible
argument_list|(
argument|bool visible
argument_list|)
block|;
name|WId
name|winId
argument_list|()
specifier|const
block|;
name|void
name|setParent
argument_list|(
specifier|const
name|QWindow
operator|*
name|window
argument_list|)
block|;
name|void
name|setWindowTitle
argument_list|(
specifier|const
name|QString
operator|&
name|title
argument_list|)
block|;
name|void
name|raise
argument_list|()
block|;
name|void
name|lower
argument_list|()
block|;
name|void
name|setOpacity
argument_list|(
argument|qreal level
argument_list|)
block|;
name|void
name|requestActivateWindow
argument_list|()
block|;
name|Qt
operator|::
name|WindowStates
name|windowState
argument_list|()
specifier|const
block|;
name|void
name|setWindowState
argument_list|(
argument|Qt::WindowStates state
argument_list|)
block|;
name|QSize
name|minimumSize
argument_list|()
specifier|const
block|;
name|QSize
name|maximumSize
argument_list|()
specifier|const
block|;
name|void
name|setMinimumSize
argument_list|(
argument|const QSize&size
argument_list|)
specifier|const
block|;
name|void
name|setMaximumSize
argument_list|(
argument|const QSize&size
argument_list|)
specifier|const
block|;
name|void
name|setGeometry
argument_list|(
specifier|const
name|QRect
operator|&
name|rect
argument_list|)
block|;
name|QRect
name|geometry
argument_list|()
specifier|const
block|;
name|QString
name|windowTitle
argument_list|()
specifier|const
block|;
name|void
name|setWindowIcon
argument_list|(
argument|const QImage&icon
argument_list|)
specifier|const
block|;
name|QGLContext
operator|*
name|glContext
argument_list|()
specifier|const
block|;
name|public
name|Q_SLOTS
operator|:
specifier|inline
name|void
name|show
argument_list|()
block|{
name|setVisible
argument_list|(
name|true
argument_list|)
block|; }
specifier|inline
name|void
name|hide
argument_list|()
block|{
name|setVisible
argument_list|(
name|false
argument_list|)
block|; }
name|void
name|showMinimized
argument_list|()
block|;
name|void
name|showMaximized
argument_list|()
block|;
name|void
name|showFullScreen
argument_list|()
block|;
name|void
name|showNormal
argument_list|()
block|;
name|bool
name|close
argument_list|()
block|;
name|void
name|raise
argument_list|()
block|;
name|void
name|lower
argument_list|()
block|;
name|void
name|setWindowTitle
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
block|;
name|Q_SIGNALS
operator|:
name|void
name|backBufferReady
argument_list|()
block|;
name|protected
operator|:
name|virtual
name|void
name|resizeEvent
argument_list|(
name|QResizeEvent
operator|*
argument_list|)
block|;
name|virtual
name|void
name|showEvent
argument_list|(
name|QShowEvent
operator|*
argument_list|)
block|;
name|virtual
name|void
name|hideEvent
argument_list|(
name|QHideEvent
operator|*
argument_list|)
block|;
name|virtual
name|bool
name|event
argument_list|(
name|QEvent
operator|*
argument_list|)
block|;
name|virtual
name|void
name|keyPressEvent
argument_list|(
name|QKeyEvent
operator|*
argument_list|)
block|;
name|virtual
name|void
name|keyReleaseEvent
argument_list|(
name|QKeyEvent
operator|*
argument_list|)
block|;
name|virtual
name|void
name|inputMethodEvent
argument_list|(
name|QInputMethodEvent
operator|*
argument_list|)
block|;
name|virtual
name|void
name|mousePressEvent
argument_list|(
name|QMouseEvent
operator|*
argument_list|)
block|;
name|virtual
name|void
name|mouseReleaseEvent
argument_list|(
name|QMouseEvent
operator|*
argument_list|)
block|;
name|virtual
name|void
name|mouseDoubleClickEvent
argument_list|(
name|QMouseEvent
operator|*
argument_list|)
block|;
name|virtual
name|void
name|mouseMoveEvent
argument_list|(
name|QMouseEvent
operator|*
argument_list|)
block|;
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
name|virtual
name|void
name|wheelEvent
argument_list|(
name|QWheelEvent
operator|*
argument_list|)
block|;
endif|#
directive|endif
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QWindow
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWindowFormat
block|{
name|public
label|:
enum|enum
name|FormatOption
block|{
name|StereoBuffers
init|=
literal|0x0001
block|,
name|WindowSurface
init|=
literal|0x0002
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
name|FormatOptions
argument_list|,
name|FormatOption
argument_list|)
if|#
directive|if
literal|0
expr|enum WindowType {         Window = 0x00000001,         Dialog = 0x00000002,         Popup = 0x00000004,         ToolTip = 0x00000008     };     Q_DECLARE_FLAGS(WindowTypes, WindowType)
endif|#
directive|endif
expr|enum
name|ColorFormat
block|{
name|InvalidColorFormat
block|,
name|RGB565
block|,
name|RGBA5658
block|,
name|RGBA5551
block|,
name|RGB888
block|,
name|RGBA5658
block|,     }
expr_stmt|;
enum|enum
name|SwapBehavior
block|{
name|DefaultSwapBehavior
block|,
name|SingleBuffer
block|,
name|DoubleBuffer
block|,
name|TripleBuffer
block|}
enum|;
enum|enum
name|OpenGLContextProfile
block|{
name|NoProfile
block|,
name|CoreProfile
block|,
name|CompatibilityProfile
block|}
enum|;
name|QWindowFormat
argument_list|()
expr_stmt|;
name|QWindowFormat
argument_list|(
argument|FormatOptions options
argument_list|)
empty_stmt|;
name|QWindowFormat
argument_list|(
specifier|const
name|QWindowFormat
operator|&
name|other
argument_list|)
expr_stmt|;
name|QWindowFormat
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QWindowFormat
operator|&
name|other
operator|)
decl_stmt|;
operator|~
name|QWindowFormat
argument_list|()
expr_stmt|;
name|void
name|setDepthBufferSize
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
name|int
name|depthBufferSize
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setStencilBufferSize
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
name|int
name|stencilBufferSize
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setSamples
parameter_list|(
name|int
name|numSamples
parameter_list|)
function_decl|;
name|int
name|samples
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setSwapBehavior
parameter_list|(
name|SwapBehavior
name|behavior
parameter_list|)
function_decl|;
name|SwapBehavior
name|swapBehavior
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setColorFormat
parameter_list|(
name|ColorFormat
name|format
parameter_list|)
function_decl|;
name|ColorFormat
name|colorFormat
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setProfile
parameter_list|(
name|OpenGLContextProfile
name|profile
parameter_list|)
function_decl|;
name|OpenGLContextProfile
name|profile
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setSharedContext
parameter_list|(
name|QPlatformGLContext
modifier|*
name|context
parameter_list|)
function_decl|;
name|QPlatformGLContext
operator|*
name|sharedGLContext
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|depth
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setDepth
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
name|bool
name|stencil
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setStencil
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
name|bool
name|stereo
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setStereo
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
name|bool
name|hasWindowSurface
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setWindowSurface
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
name|void
name|setOption
argument_list|(
name|QWindowFormat
operator|::
name|FormatOptions
name|opt
argument_list|)
decl_stmt|;
name|bool
name|testOption
argument_list|(
name|QWindowFormat
operator|::
name|FormatOptions
name|opt
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
name|QWindowFormatPrivate
modifier|*
name|d
decl_stmt|;
name|void
name|detach
parameter_list|()
function_decl|;
name|friend
name|Q_GUI_EXPORT
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QWindowFormat
operator|&
operator|,
specifier|const
name|QWindowFormat
operator|&
operator|)
expr_stmt|;
name|friend
name|Q_GUI_EXPORT
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QWindowFormat
operator|&
operator|,
specifier|const
name|QWindowFormat
operator|&
operator|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
name|friend
name|Q_GUI_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QWindowFormat
operator|&
operator|)
expr_stmt|;
endif|#
directive|endif
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|Q_GUI_EXPORT
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QWindowFormat
operator|&
operator|,
specifier|const
name|QWindowFormat
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_GUI_EXPORT
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QWindowFormat
operator|&
operator|,
specifier|const
name|QWindowFormat
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_OPENGL_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QWindowFormat
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QWindowFormat::FormatOptions
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QWindowFormat::WindowTypes
argument_list|)
end_macro
begin_expr_stmt
DECL|function|doubleBuffer
specifier|inline
name|bool
name|QWindowFormat
operator|::
name|doubleBuffer
argument_list|()
specifier|const
block|{
return|return
name|testOption
argument_list|(
name|QWindowFormat
operator|::
name|DoubleBuffer
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|depth
specifier|inline
name|bool
name|QWindowFormat
operator|::
name|depth
argument_list|()
specifier|const
block|{
return|return
name|testOption
argument_list|(
name|QWindowFormat
operator|::
name|DepthBuffer
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|rgba
specifier|inline
name|bool
name|QWindowFormat
operator|::
name|rgba
argument_list|()
specifier|const
block|{
return|return
name|testOption
argument_list|(
name|QWindowFormat
operator|::
name|Rgba
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|alpha
specifier|inline
name|bool
name|QWindowFormat
operator|::
name|alpha
argument_list|()
specifier|const
block|{
return|return
name|testOption
argument_list|(
name|QWindowFormat
operator|::
name|AlphaChannel
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|accum
specifier|inline
name|bool
name|QWindowFormat
operator|::
name|accum
argument_list|()
specifier|const
block|{
return|return
name|testOption
argument_list|(
name|QWindowFormat
operator|::
name|AccumBuffer
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|stencil
specifier|inline
name|bool
name|QWindowFormat
operator|::
name|stencil
argument_list|()
specifier|const
block|{
return|return
name|testOption
argument_list|(
name|QWindowFormat
operator|::
name|StencilBuffer
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|stereo
specifier|inline
name|bool
name|QWindowFormat
operator|::
name|stereo
argument_list|()
specifier|const
block|{
return|return
name|testOption
argument_list|(
name|QWindowFormat
operator|::
name|StereoBuffers
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|directRendering
specifier|inline
name|bool
name|QWindowFormat
operator|::
name|directRendering
argument_list|()
specifier|const
block|{
return|return
name|testOption
argument_list|(
name|QWindowFormat
operator|::
name|DirectRendering
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|hasWindowSurface
specifier|inline
name|bool
name|QWindowFormat
operator|::
name|hasWindowSurface
argument_list|()
specifier|const
block|{
return|return
name|testOption
argument_list|(
name|QWindowFormat
operator|::
name|HasWindowSurface
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|sampleBuffers
specifier|inline
name|bool
name|QWindowFormat
operator|::
name|sampleBuffers
argument_list|()
specifier|const
block|{
return|return
name|testOption
argument_list|(
name|QWindowFormat
operator|::
name|SampleBuffers
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QPLATFORMWINDOWFORMAT_QPA_H
end_comment
end_unit
