begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPIXELFORMAT_H
end_ifndef
begin_define
DECL|macro|QPIXELFORMAT_H
define|#
directive|define
name|QPIXELFORMAT_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|QPixelFormat
block|{
name|public
label|:
enum|enum
name|ColorModel
block|{
name|RGB
block|,
name|BGR
block|,
name|Indexed
block|,
name|Grayscale
block|,
name|CMYK
block|,
name|HSL
block|,
name|HSV
block|,
name|YUV
block|}
enum|;
enum|enum
name|AlphaUsage
block|{
name|UsesAlpha
block|,
name|IgnoresAlpha
block|}
enum|;
enum|enum
name|AlphaPosition
block|{
name|AtBeginning
block|,
name|AtEnd
block|}
enum|;
enum|enum
name|AlphaPremultiplied
block|{
name|NotPremultiplied
block|,
name|Premultiplied
block|}
enum|;
enum|enum
name|TypeInterpretation
block|{
name|UnsignedInteger
block|,
name|UnsignedShort
block|,
name|UnsignedByte
block|,
name|FloatingPoint
block|}
enum|;
enum|enum
name|YUVLayout
block|{
name|YUV444
block|,
name|YUV422
block|,
name|YUV411
block|,
name|YUV420P
block|,
name|YUV420SP
block|,
name|YV12
block|,
name|UYVY
block|,
name|YUYV
block|,
name|NV12
block|,
name|NV21
block|,
name|IMC1
block|,
name|IMC2
block|,
name|IMC3
block|,
name|IMC4
block|,
name|Y8
block|,
name|Y16
block|}
enum|;
enum|enum
name|ByteOrder
block|{
name|LittleEndian
block|,
name|BigEndian
block|,
name|CurrentSystemEndian
block|}
enum|;
name|Q_DECL_CONSTEXPR
specifier|inline
name|QPixelFormat
argument_list|()
name|Q_DECL_NOTHROW
expr_stmt|;
name|Q_DECL_CONSTEXPR
specifier|inline
name|QPixelFormat
argument_list|(
name|ColorModel
name|colorModel
argument_list|,
name|uchar
name|firstSize
argument_list|,
name|uchar
name|secondSize
argument_list|,
name|uchar
name|thirdSize
argument_list|,
name|uchar
name|fourthSize
argument_list|,
name|uchar
name|fifthSize
argument_list|,
name|uchar
name|alphaSize
argument_list|,
name|AlphaUsage
name|alphaUsage
argument_list|,
name|AlphaPosition
name|alphaPosition
argument_list|,
name|AlphaPremultiplied
name|premultiplied
argument_list|,
name|TypeInterpretation
name|typeInterpretation
argument_list|,
name|ByteOrder
name|byteOrder
operator|=
name|CurrentSystemEndian
argument_list|,
name|uchar
name|subEnum
operator|=
literal|0
argument_list|)
name|Q_DECL_NOTHROW
decl_stmt|;
name|Q_DECL_CONSTEXPR
specifier|inline
name|ColorModel
name|colorModel
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|ColorModel
argument_list|(
name|model
argument_list|)
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|uchar
name|channelCount
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
operator|(
name|first
operator|>
literal|0
operator|)
operator|+
operator|(
name|second
operator|>
literal|0
operator|)
operator|+
operator|(
name|third
operator|>
literal|0
operator|)
operator|+
operator|(
name|fourth
operator|>
literal|0
operator|)
operator|+
operator|(
name|fifth
operator|>
literal|0
operator|)
operator|+
operator|(
name|alpha
operator|>
literal|0
operator|)
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|uchar
name|redSize
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|first
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|uchar
name|greenSize
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|second
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|uchar
name|blueSize
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|third
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|uchar
name|cyanSize
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|first
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|uchar
name|magentaSize
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|second
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|uchar
name|yellowSize
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|third
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|uchar
name|blackSize
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|fourth
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|uchar
name|hueSize
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|first
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|uchar
name|saturationSize
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|second
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|uchar
name|lightnessSize
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|third
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|uchar
name|brightnessSize
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|third
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|uchar
name|alphaSize
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|alpha
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|uchar
name|bitsPerPixel
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|first
operator|+
name|second
operator|+
name|third
operator|+
name|fourth
operator|+
name|fifth
operator|+
name|alpha
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|AlphaUsage
name|alphaUsage
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|AlphaUsage
argument_list|(
name|alpha_usage
argument_list|)
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|AlphaPosition
name|alphaPosition
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|AlphaPosition
argument_list|(
name|alpha_position
argument_list|)
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|AlphaPremultiplied
name|premultiplied
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|AlphaPremultiplied
argument_list|(
name|premul
argument_list|)
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|TypeInterpretation
name|typeInterpretation
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|TypeInterpretation
argument_list|(
name|type_interpretation
argument_list|)
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|ByteOrder
name|byteOrder
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|ByteOrder
argument_list|(
name|byte_order
argument_list|)
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|YUVLayout
name|yuvLayout
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|YUVLayout
argument_list|(
name|sub_enum
argument_list|)
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|uchar
name|subEnum
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|sub_enum
return|;
block|}
name|private
label|:
name|quint64
name|model
range|:
literal|4
decl_stmt|;
name|quint64
name|first
range|:
literal|6
decl_stmt|;
name|quint64
name|second
range|:
literal|6
decl_stmt|;
name|quint64
name|third
range|:
literal|6
decl_stmt|;
name|quint64
name|fourth
range|:
literal|6
decl_stmt|;
name|quint64
name|fifth
range|:
literal|6
decl_stmt|;
name|quint64
name|alpha
range|:
literal|6
decl_stmt|;
name|quint64
name|alpha_usage
range|:
literal|1
decl_stmt|;
name|quint64
name|alpha_position
range|:
literal|1
decl_stmt|;
name|quint64
name|premul
range|:
literal|1
decl_stmt|;
name|quint64
name|type_interpretation
range|:
literal|4
decl_stmt|;
name|quint64
name|byte_order
range|:
literal|2
decl_stmt|;
name|quint64
name|sub_enum
range|:
literal|6
decl_stmt|;
name|quint64
name|unused
range|:
literal|8
decl_stmt|;
name|friend
name|Q_DECL_CONST_FUNCTION
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QPixelFormat
operator|&
name|fmt1
operator|,
specifier|const
name|QPixelFormat
operator|&
name|fmt2
operator|)
expr_stmt|;
name|friend
name|Q_DECL_CONST_FUNCTION
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QPixelFormat
operator|&
name|fmt1
operator|,
specifier|const
name|QPixelFormat
operator|&
name|fmt2
operator|)
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QPixelFormat
argument_list|,
name|Q_PRIMITIVE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|class
name|QPixelFormatRgb
range|:
name|public
name|QPixelFormat
block|{
name|public
operator|:
name|Q_DECL_CONSTEXPR
specifier|inline
name|QPixelFormatRgb
argument_list|(
argument|uchar redSize
argument_list|,
argument|uchar greenSize
argument_list|,
argument|uchar blueSize
argument_list|,
argument|uchar alphaSize
argument_list|,
argument|AlphaUsage alphaUsage
argument_list|,
argument|AlphaPosition alphaPosition
argument_list|,
argument|AlphaPremultiplied premultiplied = NotPremultiplied
argument_list|,
argument|TypeInterpretation typeInterpretation = UnsignedInteger
argument_list|)
name|Q_DECL_NOTHROW
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QPixelFormatGrayScale
range|:
name|public
name|QPixelFormat
block|{
name|public
operator|:
name|Q_DECL_CONSTEXPR
specifier|inline
name|QPixelFormatGrayScale
argument_list|(
argument|uchar bufferSize
argument_list|,
argument|TypeInterpretation typeInterpretation = UnsignedInteger
argument_list|)
name|Q_DECL_NOTHROW
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QPixelFormatCmyk
range|:
name|public
name|QPixelFormat
block|{
name|public
operator|:
name|Q_DECL_CONSTEXPR
specifier|inline
name|QPixelFormatCmyk
argument_list|(
argument|uchar channelSize
argument_list|,
argument|uchar alphaSize =
literal|0
argument_list|,
argument|AlphaUsage alphaUsage = IgnoresAlpha
argument_list|,
argument|AlphaPosition alphaPosition = AtBeginning
argument_list|,
argument|TypeInterpretation typeInterpretation = UnsignedInteger
argument_list|)
name|Q_DECL_NOTHROW
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QPixelFormatHsl
range|:
name|public
name|QPixelFormat
block|{
name|public
operator|:
name|Q_DECL_CONSTEXPR
specifier|inline
name|QPixelFormatHsl
argument_list|(
argument|uchar channelSize
argument_list|,
argument|uchar alphaSize =
literal|0
argument_list|,
argument|AlphaUsage alphaUsage = IgnoresAlpha
argument_list|,
argument|AlphaPosition alphaPosition = AtBeginning
argument_list|,
argument|TypeInterpretation typeInterpretation = FloatingPoint
argument_list|)
name|Q_DECL_NOTHROW
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QPixelFormatHsv
range|:
name|public
name|QPixelFormat
block|{
name|public
operator|:
name|Q_DECL_CONSTEXPR
specifier|inline
name|QPixelFormatHsv
argument_list|(
argument|uchar channelSize
argument_list|,
argument|uchar alphaSize =
literal|0
argument_list|,
argument|AlphaUsage alphaUsage = IgnoresAlpha
argument_list|,
argument|AlphaPosition alphaPosition = AtBeginning
argument_list|,
argument|TypeInterpretation typeInterpretation = FloatingPoint
argument_list|)
name|Q_DECL_NOTHROW
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|namespace
name|QtPrivate
block|{
name|QPixelFormat
name|Q_GUI_EXPORT
name|QPixelFormat_createYUV
argument_list|(
name|QPixelFormat
operator|::
name|YUVLayout
name|yuvLayout
argument_list|,
name|uchar
name|alphaSize
argument_list|,
name|QPixelFormat
operator|::
name|AlphaUsage
name|alphaUsage
argument_list|,
name|QPixelFormat
operator|::
name|AlphaPosition
name|alphaPosition
argument_list|,
name|QPixelFormat
operator|::
name|AlphaPremultiplied
name|premultiplied
argument_list|,
name|QPixelFormat
operator|::
name|TypeInterpretation
name|typeInterpretation
argument_list|,
name|QPixelFormat
operator|::
name|ByteOrder
name|byteOrder
argument_list|)
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|class
name|QPixelFormatYuv
range|:
name|public
name|QPixelFormat
block|{
name|public
operator|:
specifier|inline
name|QPixelFormatYuv
argument_list|(
argument|YUVLayout yuvLayout
argument_list|,
argument|uchar alphaSize =
literal|0
argument_list|,
argument|AlphaUsage alphaUsage = IgnoresAlpha
argument_list|,
argument|AlphaPosition alphaPosition = AtBeginning
argument_list|,
argument|AlphaPremultiplied premultiplied = NotPremultiplied
argument_list|,
argument|TypeInterpretation typeInterpretation = UnsignedByte
argument_list|,
argument|ByteOrder byteOrder = LittleEndian
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
name|QPixelFormat
operator|::
name|QPixelFormat
argument_list|()
name|Q_DECL_NOTHROW
operator|:
name|model
argument_list|(
literal|0
argument_list|)
operator|,
name|first
argument_list|(
literal|0
argument_list|)
operator|,
name|second
argument_list|(
literal|0
argument_list|)
operator|,
name|third
argument_list|(
literal|0
argument_list|)
operator|,
name|fourth
argument_list|(
literal|0
argument_list|)
operator|,
name|fifth
argument_list|(
literal|0
argument_list|)
operator|,
name|alpha
argument_list|(
literal|0
argument_list|)
operator|,
name|alpha_usage
argument_list|(
literal|0
argument_list|)
operator|,
name|alpha_position
argument_list|(
literal|0
argument_list|)
operator|,
name|premul
argument_list|(
literal|0
argument_list|)
operator|,
name|type_interpretation
argument_list|(
literal|0
argument_list|)
operator|,
name|byte_order
argument_list|(
literal|0
argument_list|)
operator|,
name|sub_enum
argument_list|(
literal|0
argument_list|)
operator|,
name|unused
argument_list|(
literal|0
argument_list|)
block|{ }
name|Q_DECL_CONSTEXPR
name|QPixelFormat
operator|::
name|QPixelFormat
argument_list|(
argument|ColorModel mdl
argument_list|,
argument|uchar firstSize
argument_list|,
argument|uchar secondSize
argument_list|,
argument|uchar thirdSize
argument_list|,
argument|uchar fourthSize
argument_list|,
argument|uchar fifthSize
argument_list|,
argument|uchar alfa
argument_list|,
argument|AlphaUsage usage
argument_list|,
argument|AlphaPosition position
argument_list|,
argument|AlphaPremultiplied premult
argument_list|,
argument|TypeInterpretation typeInterp
argument_list|,
argument|ByteOrder b_order
argument_list|,
argument|uchar s_enum
argument_list|)
name|Q_DECL_NOTHROW
operator|:
name|model
argument_list|(
name|mdl
argument_list|)
operator|,
name|first
argument_list|(
name|firstSize
argument_list|)
operator|,
name|second
argument_list|(
name|secondSize
argument_list|)
operator|,
name|third
argument_list|(
name|thirdSize
argument_list|)
operator|,
name|fourth
argument_list|(
name|fourthSize
argument_list|)
operator|,
name|fifth
argument_list|(
name|fifthSize
argument_list|)
operator|,
name|alpha
argument_list|(
name|alfa
argument_list|)
operator|,
name|alpha_usage
argument_list|(
name|usage
argument_list|)
operator|,
name|alpha_position
argument_list|(
name|position
argument_list|)
operator|,
name|premul
argument_list|(
name|premult
argument_list|)
operator|,
name|type_interpretation
argument_list|(
name|typeInterp
argument_list|)
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_LITTLE_ENDIAN
operator|,
name|byte_order
argument_list|(
name|b_order
operator|==
name|CurrentSystemEndian
operator|?
name|LittleEndian
operator|:
name|b_order
argument_list|)
else|#
directive|else
operator|,
name|byte_order
argument_list|(
name|b_order
operator|==
name|CurrentSystemEndian
operator|?
name|BigEndian
operator|:
name|b_order
argument_list|)
endif|#
directive|endif
operator|,
name|sub_enum
argument_list|(
name|s_enum
argument_list|)
operator|,
name|unused
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|operator
name|Q_DECL_CONST_FUNCTION
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QPixelFormat
operator|&
name|fmt1
operator|,
specifier|const
name|QPixelFormat
operator|&
name|fmt2
operator|)
block|{
return|return
name|fmt1
operator|.
name|model
operator|==
name|fmt2
operator|.
name|model
operator|&&
name|fmt1
operator|.
name|first
operator|==
name|fmt2
operator|.
name|first
operator|&&
name|fmt1
operator|.
name|second
operator|==
name|fmt2
operator|.
name|second
operator|&&
name|fmt1
operator|.
name|third
operator|==
name|fmt2
operator|.
name|third
operator|&&
name|fmt1
operator|.
name|fourth
operator|==
name|fmt2
operator|.
name|fourth
operator|&&
name|fmt1
operator|.
name|fifth
operator|==
name|fmt2
operator|.
name|fifth
operator|&&
name|fmt1
operator|.
name|alpha
operator|==
name|fmt2
operator|.
name|alpha
operator|&&
name|fmt1
operator|.
name|alpha_usage
operator|==
name|fmt2
operator|.
name|alpha_usage
operator|&&
name|fmt1
operator|.
name|alpha_position
operator|==
name|fmt2
operator|.
name|alpha_position
operator|&&
name|fmt1
operator|.
name|premul
operator|==
name|fmt2
operator|.
name|premul
operator|&&
name|fmt1
operator|.
name|type_interpretation
operator|==
name|fmt2
operator|.
name|type_interpretation
operator|&&
name|fmt1
operator|.
name|byte_order
operator|==
name|fmt2
operator|.
name|byte_order
operator|&&
name|fmt1
operator|.
name|sub_enum
operator|==
name|fmt2
operator|.
name|sub_enum
operator|&&
name|fmt1
operator|.
name|unused
operator|==
name|fmt2
operator|.
name|unused
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|Q_DECL_CONST_FUNCTION
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QPixelFormat
operator|&
name|fmt1
operator|,
specifier|const
name|QPixelFormat
operator|&
name|fmt2
operator|)
block|{
return|return
operator|!
operator|(
name|fmt1
operator|==
name|fmt2
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
name|QPixelFormatRgb
operator|::
name|QPixelFormatRgb
argument_list|(
argument|uchar red
argument_list|,
argument|uchar green
argument_list|,
argument|uchar blue
argument_list|,
argument|uchar alfa
argument_list|,
argument|AlphaUsage usage
argument_list|,
argument|AlphaPosition position
argument_list|,
argument|AlphaPremultiplied pmul
argument_list|,
argument|TypeInterpretation typeInt
argument_list|)
name|Q_DECL_NOTHROW
operator|:
name|QPixelFormat
argument_list|(
argument|RGB
argument_list|,
argument|red
argument_list|,
argument|green
argument_list|,
argument|blue
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
argument|alfa
argument_list|,
argument|usage
argument_list|,
argument|position
argument_list|,
argument|pmul
argument_list|,
argument|typeInt
argument_list|)
block|{ }
name|Q_DECL_CONSTEXPR
name|QPixelFormatGrayScale
operator|::
name|QPixelFormatGrayScale
argument_list|(
argument|uchar channelSize
argument_list|,
argument|TypeInterpretation typeInt
argument_list|)
name|Q_DECL_NOTHROW
operator|:
name|QPixelFormat
argument_list|(
argument|Grayscale
argument_list|,
argument|channelSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
argument|IgnoresAlpha
argument_list|,
argument|AtBeginning
argument_list|,
argument|NotPremultiplied
argument_list|,
argument|typeInt
argument_list|)
block|{ }
name|Q_DECL_CONSTEXPR
name|QPixelFormatCmyk
operator|::
name|QPixelFormatCmyk
argument_list|(
argument|uchar channelSize
argument_list|,
argument|uchar alfa
argument_list|,
argument|AlphaUsage usage
argument_list|,
argument|AlphaPosition position
argument_list|,
argument|TypeInterpretation typeInt
argument_list|)
name|Q_DECL_NOTHROW
operator|:
name|QPixelFormat
argument_list|(
argument|CMYK
argument_list|,
argument|channelSize
argument_list|,
argument|channelSize
argument_list|,
argument|channelSize
argument_list|,
argument|channelSize
argument_list|,
literal|0
argument_list|,
argument|alfa
argument_list|,
argument|usage
argument_list|,
argument|position
argument_list|,
argument|NotPremultiplied
argument_list|,
argument|typeInt
argument_list|)
block|{ }
name|Q_DECL_CONSTEXPR
name|QPixelFormatHsl
operator|::
name|QPixelFormatHsl
argument_list|(
argument|uchar channelSize
argument_list|,
argument|uchar alfa
argument_list|,
argument|AlphaUsage usage
argument_list|,
argument|AlphaPosition position
argument_list|,
argument|TypeInterpretation typeInt
argument_list|)
name|Q_DECL_NOTHROW
operator|:
name|QPixelFormat
argument_list|(
argument|HSL
argument_list|,
argument|channelSize
argument_list|,
argument|channelSize
argument_list|,
argument|channelSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
argument|alfa
argument_list|,
argument|usage
argument_list|,
argument|position
argument_list|,
argument|NotPremultiplied
argument_list|,
argument|typeInt
argument_list|)
block|{ }
name|Q_DECL_CONSTEXPR
name|QPixelFormatHsv
operator|::
name|QPixelFormatHsv
argument_list|(
argument|uchar channelSize
argument_list|,
argument|uchar alfa
argument_list|,
argument|AlphaUsage usage
argument_list|,
argument|AlphaPosition position
argument_list|,
argument|TypeInterpretation typeInt
argument_list|)
name|Q_DECL_NOTHROW
operator|:
name|QPixelFormat
argument_list|(
argument|HSV
argument_list|,
argument|channelSize
argument_list|,
argument|channelSize
argument_list|,
argument|channelSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
argument|alfa
argument_list|,
argument|usage
argument_list|,
argument|position
argument_list|,
argument|NotPremultiplied
argument_list|,
argument|typeInt
argument_list|)
block|{ }
DECL|function|QPixelFormatYuv
name|QPixelFormatYuv
operator|::
name|QPixelFormatYuv
argument_list|(
argument|YUVLayout layout
argument_list|,
argument|uchar alfa
argument_list|,
argument|AlphaUsage usage
argument_list|,
argument|AlphaPosition position
argument_list|,
argument|AlphaPremultiplied p_mul
argument_list|,
argument|TypeInterpretation typeInt
argument_list|,
argument|ByteOrder b_order
argument_list|)
operator|:
name|QPixelFormat
argument_list|(
argument|QtPrivate::QPixelFormat_createYUV(layout,                                                      alfa,                                                      usage,                                                      position,                                                      p_mul,                                                      typeInt,                                                      b_order)
argument_list|)
block|{ }
name|QT_END_NAMESPACE
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QPIXELFORMAT_H
end_comment
end_unit
