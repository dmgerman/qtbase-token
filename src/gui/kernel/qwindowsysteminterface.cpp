begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsysteminterface.h"
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformwindow.h>
end_include
begin_include
include|#
directive|include
file|"qwindowsysteminterface_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qguiapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qevent_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qtouchdevice_p.h"
end_include
begin_include
include|#
directive|include
file|<QAbstractEventDispatcher>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformdrag.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformintegration.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|"qhighdpiscaling_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|member|eventTime
name|QElapsedTimer
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|synchronousWindowSystemEvents
name|bool
name|QWindowSystemInterfacePrivate
operator|::
name|synchronousWindowSystemEvents
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|eventsFlushed
name|QWaitCondition
name|QWindowSystemInterfacePrivate
operator|::
name|eventsFlushed
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|flushEventMutex
name|QMutex
name|QWindowSystemInterfacePrivate
operator|::
name|flushEventMutex
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|eventAccepted
name|QAtomicInt
name|QWindowSystemInterfacePrivate
operator|::
name|eventAccepted
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|eventHandler
name|QWindowSystemEventHandler
modifier|*
name|QWindowSystemInterfacePrivate
operator|::
name|eventHandler
decl_stmt|;
end_decl_stmt
begin_comment
comment|//------------------------------------------------------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Callback functions for plugins:
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
DECL|member|windowSystemEventQueue
name|QWindowSystemInterfacePrivate
operator|::
name|WindowSystemEventList
name|QWindowSystemInterfacePrivate
operator|::
name|windowSystemEventQueue
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|QPointer
argument_list|<
name|QWindow
argument_list|>
name|qt_last_mouse_receiver
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*!     \class QWindowSystemInterface     \since 5.0     \internal     \preliminary     \ingroup qpa     \brief The QWindowSystemInterface provides an event queue for the QPA platform.      The platform plugins call the various functions to notify about events. The events are queued     until sendWindowSystemEvents() is called by the event dispatcher. */
end_comment
begin_function
DECL|function|handleEnterEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleEnterEvent
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|)
block|{
if|if
condition|(
name|tlw
condition|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|EnterEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|EnterEvent
argument_list|(
name|tlw
argument_list|,
name|local
argument_list|,
name|global
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleLeaveEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleLeaveEvent
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|LeaveEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|LeaveEvent
argument_list|(
name|tlw
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This method can be used to ensure leave and enter events are both in queue when moving from     one QWindow to another. This allows QWindow subclasses to check for a queued enter event     when handling the leave event (\c QWindowSystemInterfacePrivate::peekWindowSystemEvent) to     determine where mouse went and act accordingly. E.g. QWidgetWindow needs to know if mouse     cursor moves between windows in same window hierarchy. */
end_comment
begin_function
DECL|function|handleEnterLeaveEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleEnterLeaveEvent
parameter_list|(
name|QWindow
modifier|*
name|enter
parameter_list|,
name|QWindow
modifier|*
name|leave
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|)
block|{
name|bool
name|wasSynchronous
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|synchronousWindowSystemEvents
decl_stmt|;
if|if
condition|(
name|wasSynchronous
condition|)
name|setSynchronousWindowSystemEvents
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|handleLeaveEvent
argument_list|(
name|leave
argument_list|)
expr_stmt|;
name|handleEnterEvent
argument_list|(
name|enter
argument_list|,
name|local
argument_list|,
name|global
argument_list|)
expr_stmt|;
if|if
condition|(
name|wasSynchronous
condition|)
block|{
name|flushWindowSystemEvents
argument_list|()
expr_stmt|;
name|setSynchronousWindowSystemEvents
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleWindowActivated
name|void
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
name|Qt
operator|::
name|FocusReason
name|r
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|ActivatedWindowEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|ActivatedWindowEvent
argument_list|(
name|tlw
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleWindowStateChanged
name|void
name|QWindowSystemInterface
operator|::
name|handleWindowStateChanged
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
name|Qt
operator|::
name|WindowState
name|newState
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|WindowStateChangedEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|WindowStateChangedEvent
argument_list|(
name|tlw
argument_list|,
name|newState
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleWindowScreenChanged
name|void
name|QWindowSystemInterface
operator|::
name|handleWindowScreenChanged
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
name|QScreen
modifier|*
name|screen
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|WindowScreenChangedEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|WindowScreenChangedEvent
argument_list|(
name|tlw
argument_list|,
name|screen
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleApplicationStateChanged
name|void
name|QWindowSystemInterface
operator|::
name|handleApplicationStateChanged
parameter_list|(
name|Qt
operator|::
name|ApplicationState
name|newState
parameter_list|,
name|bool
name|forcePropagate
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|hasCapability
argument_list|(
name|QPlatformIntegration
operator|::
name|ApplicationState
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|ApplicationStateChangedEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|ApplicationStateChangedEvent
argument_list|(
name|newState
argument_list|,
name|forcePropagate
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   If \a oldRect is null, Qt will use the previously reported geometry instead.  */
end_comment
begin_function
DECL|function|handleGeometryChange
name|void
name|QWindowSystemInterface
operator|::
name|handleGeometryChange
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
specifier|const
name|QRect
modifier|&
name|newRect
parameter_list|,
specifier|const
name|QRect
modifier|&
name|oldRect
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|GeometryChangeEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|GeometryChangeEvent
argument_list|(
name|tlw
argument_list|,
name|QHighDpi
operator|::
name|fromNativePixels
argument_list|(
name|newRect
argument_list|,
name|tlw
argument_list|)
argument_list|,
name|QHighDpi
operator|::
name|fromNativePixels
argument_list|(
name|oldRect
argument_list|,
name|tlw
argument_list|)
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleCloseEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleCloseEvent
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
name|bool
modifier|*
name|accepted
parameter_list|)
block|{
if|if
condition|(
name|tlw
condition|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|CloseEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|CloseEvent
argument_list|(
name|tlw
argument_list|,
name|accepted
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!  \a w == 0 means that the event is in global coords only, \a local will be ignored in this case  */
end_comment
begin_function
DECL|function|handleMouseEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|b
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
name|Qt
operator|::
name|MouseEventSource
name|source
parameter_list|)
block|{
name|unsigned
name|long
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|handleMouseEvent
argument_list|(
name|w
argument_list|,
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|b
argument_list|,
name|mods
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleMouseEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|b
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
name|Qt
operator|::
name|MouseEventSource
name|source
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|MouseEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|MouseEvent
argument_list|(
name|w
argument_list|,
name|timestamp
argument_list|,
name|QHighDpi
operator|::
name|fromNativeLocalPosition
argument_list|(
name|local
argument_list|,
name|w
argument_list|)
argument_list|,
name|QHighDpi
operator|::
name|fromNativePixels
argument_list|(
name|global
argument_list|,
name|w
argument_list|)
argument_list|,
name|b
argument_list|,
name|mods
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleFrameStrutMouseEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleFrameStrutMouseEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|b
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
name|Qt
operator|::
name|MouseEventSource
name|source
parameter_list|)
block|{
specifier|const
name|unsigned
name|long
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|handleFrameStrutMouseEvent
argument_list|(
name|w
argument_list|,
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|b
argument_list|,
name|mods
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleFrameStrutMouseEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleFrameStrutMouseEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|b
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
name|Qt
operator|::
name|MouseEventSource
name|source
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|MouseEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|MouseEvent
argument_list|(
name|w
argument_list|,
name|timestamp
argument_list|,
name|QWindowSystemInterfacePrivate
operator|::
name|FrameStrutMouse
argument_list|,
name|QHighDpi
operator|::
name|fromNativeLocalPosition
argument_list|(
name|local
argument_list|,
name|w
argument_list|)
argument_list|,
name|QHighDpi
operator|::
name|fromNativePixels
argument_list|(
name|global
argument_list|,
name|w
argument_list|)
argument_list|,
name|b
argument_list|,
name|mods
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tryHandleShortcutEvent
name|bool
name|QWindowSystemInterface
operator|::
name|tryHandleShortcutEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|int
name|k
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorep
parameter_list|,
name|ushort
name|count
parameter_list|)
block|{
name|unsigned
name|long
name|timestamp
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
return|return
name|tryHandleShortcutEvent
argument_list|(
name|w
argument_list|,
name|timestamp
argument_list|,
name|k
argument_list|,
name|mods
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|tryHandleShortcutEvent
name|bool
name|QWindowSystemInterface
operator|::
name|tryHandleShortcutEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
name|int
name|k
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorep
parameter_list|,
name|ushort
name|count
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|QGuiApplicationPrivate
operator|::
name|modifier_buttons
operator|=
name|mods
expr_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
name|w
operator|=
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
return|return
literal|false
return|;
name|QObject
modifier|*
name|focus
init|=
name|w
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|focus
condition|)
name|focus
operator|=
name|w
expr_stmt|;
name|QKeyEvent
name|qevent
argument_list|(
name|QEvent
operator|::
name|ShortcutOverride
argument_list|,
name|k
argument_list|,
name|mods
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|qevent
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|QGuiApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|shortcutMap
operator|.
name|tryShortcutEvent
argument_list|(
name|focus
argument_list|,
operator|&
name|qevent
argument_list|)
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|w
argument_list|)
name|Q_UNUSED
argument_list|(
argument|timestamp
argument_list|)
name|Q_UNUSED
argument_list|(
argument|k
argument_list|)
name|Q_UNUSED
argument_list|(
argument|mods
argument_list|)
name|Q_UNUSED
argument_list|(
argument|text
argument_list|)
name|Q_UNUSED
argument_list|(
argument|autorep
argument_list|)
name|Q_UNUSED
argument_list|(
argument|count
argument_list|)
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|tryHandleShortcutOverrideEvent
name|bool
name|QWindowSystemInterface
operator|::
name|tryHandleShortcutOverrideEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|QKeyEvent
modifier|*
name|ev
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|Q_ASSERT
argument_list|(
name|ev
operator|->
name|type
argument_list|()
operator|==
name|QKeyEvent
operator|::
name|ShortcutOverride
argument_list|)
expr_stmt|;
name|QGuiApplicationPrivate
operator|::
name|modifier_buttons
operator|=
name|ev
operator|->
name|modifiers
argument_list|()
expr_stmt|;
name|QObject
modifier|*
name|focus
init|=
name|w
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|focus
condition|)
name|focus
operator|=
name|w
expr_stmt|;
return|return
name|QGuiApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|shortcutMap
operator|.
name|tryShortcutEvent
argument_list|(
name|focus
argument_list|,
name|ev
argument_list|)
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|w
argument_list|)
name|Q_UNUSED
argument_list|(
argument|ev
argument_list|)
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|// used by QTestLib to directly send shortcuts to objects
end_comment
begin_function
DECL|function|tryHandleShortcutEventToObject
name|bool
name|QWindowSystemInterface
operator|::
name|tryHandleShortcutEventToObject
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
name|int
name|k
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorep
parameter_list|,
name|ushort
name|count
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|QGuiApplicationPrivate
operator|::
name|modifier_buttons
operator|=
name|mods
expr_stmt|;
name|QKeyEvent
name|qevent
argument_list|(
name|QEvent
operator|::
name|ShortcutOverride
argument_list|,
name|k
argument_list|,
name|mods
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|qevent
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|QGuiApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|shortcutMap
operator|.
name|tryShortcutEvent
argument_list|(
name|o
argument_list|,
operator|&
name|qevent
argument_list|)
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|w
argument_list|)
name|Q_UNUSED
argument_list|(
argument|timestamp
argument_list|)
name|Q_UNUSED
argument_list|(
argument|k
argument_list|)
name|Q_UNUSED
argument_list|(
argument|mods
argument_list|)
name|Q_UNUSED
argument_list|(
argument|text
argument_list|)
name|Q_UNUSED
argument_list|(
argument|autorep
argument_list|)
name|Q_UNUSED
argument_list|(
argument|count
argument_list|)
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|tryHandleExtendedShortcutEvent
name|bool
name|QWindowSystemInterface
operator|::
name|tryHandleExtendedShortcutEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|int
name|k
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
name|quint32
name|nativeScanCode
parameter_list|,
name|quint32
name|nativeVirtualKey
parameter_list|,
name|quint32
name|nativeModifiers
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorep
parameter_list|,
name|ushort
name|count
parameter_list|)
block|{
name|unsigned
name|long
name|timestamp
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
return|return
name|tryHandleExtendedShortcutEvent
argument_list|(
name|w
argument_list|,
name|timestamp
argument_list|,
name|k
argument_list|,
name|mods
argument_list|,
name|nativeScanCode
argument_list|,
name|nativeVirtualKey
argument_list|,
name|nativeModifiers
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|tryHandleExtendedShortcutEvent
name|bool
name|QWindowSystemInterface
operator|::
name|tryHandleExtendedShortcutEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
name|int
name|k
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
name|quint32
name|nativeScanCode
parameter_list|,
name|quint32
name|nativeVirtualKey
parameter_list|,
name|quint32
name|nativeModifiers
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorep
parameter_list|,
name|ushort
name|count
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|QGuiApplicationPrivate
operator|::
name|modifier_buttons
operator|=
name|mods
expr_stmt|;
name|QObject
modifier|*
name|focus
init|=
name|w
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|focus
condition|)
name|focus
operator|=
name|w
expr_stmt|;
name|QKeyEvent
name|qevent
argument_list|(
name|QEvent
operator|::
name|ShortcutOverride
argument_list|,
name|k
argument_list|,
name|mods
argument_list|,
name|nativeScanCode
argument_list|,
name|nativeVirtualKey
argument_list|,
name|nativeModifiers
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|qevent
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|QGuiApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|shortcutMap
operator|.
name|tryShortcutEvent
argument_list|(
name|focus
argument_list|,
operator|&
name|qevent
argument_list|)
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|w
argument_list|)
name|Q_UNUSED
argument_list|(
argument|timestamp
argument_list|)
name|Q_UNUSED
argument_list|(
argument|k
argument_list|)
name|Q_UNUSED
argument_list|(
argument|mods
argument_list|)
name|Q_UNUSED
argument_list|(
argument|nativeScanCode
argument_list|)
name|Q_UNUSED
argument_list|(
argument|nativeVirtualKey
argument_list|)
name|Q_UNUSED
argument_list|(
argument|nativeModifiers
argument_list|)
name|Q_UNUSED
argument_list|(
argument|text
argument_list|)
name|Q_UNUSED
argument_list|(
argument|autorep
argument_list|)
name|Q_UNUSED
argument_list|(
argument|count
argument_list|)
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|handleKeyEvent
name|bool
name|QWindowSystemInterface
operator|::
name|handleKeyEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|QEvent
operator|::
name|Type
name|t
parameter_list|,
name|int
name|k
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorep
parameter_list|,
name|ushort
name|count
parameter_list|)
block|{
name|unsigned
name|long
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
return|return
name|handleKeyEvent
argument_list|(
name|w
argument_list|,
name|time
argument_list|,
name|t
argument_list|,
name|k
argument_list|,
name|mods
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|handleKeyEvent
name|bool
name|QWindowSystemInterface
operator|::
name|handleKeyEvent
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
name|QEvent
operator|::
name|Type
name|t
parameter_list|,
name|int
name|k
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorep
parameter_list|,
name|ushort
name|count
parameter_list|)
block|{
comment|// This is special handling needed for OS X which eventually will call sendEvent(), on other platforms
comment|// this might not be safe, e.g., on Android. See: QGuiApplicationPrivate::processKeyEvent() for
comment|// shortcut overriding on other platforms.
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_OSX
argument_list|)
if|if
condition|(
name|t
operator|==
name|QEvent
operator|::
name|KeyPress
operator|&&
name|QWindowSystemInterface
operator|::
name|tryHandleShortcutEvent
argument_list|(
name|tlw
argument_list|,
name|timestamp
argument_list|,
name|k
argument_list|,
name|mods
argument_list|,
name|text
argument_list|)
condition|)
return|return
literal|true
return|;
endif|#
directive|endif
comment|// Q_OS_OSX
name|QWindowSystemInterfacePrivate
operator|::
name|KeyEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|KeyEvent
argument_list|(
name|tlw
argument_list|,
name|timestamp
argument_list|,
name|t
argument_list|,
name|k
argument_list|,
name|mods
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
decl_stmt|;
return|return
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|handleExtendedKeyEvent
name|bool
name|QWindowSystemInterface
operator|::
name|handleExtendedKeyEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|QEvent
operator|::
name|Type
name|type
parameter_list|,
name|int
name|key
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
name|quint32
name|nativeScanCode
parameter_list|,
name|quint32
name|nativeVirtualKey
parameter_list|,
name|quint32
name|nativeModifiers
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorep
parameter_list|,
name|ushort
name|count
parameter_list|)
block|{
name|unsigned
name|long
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
return|return
name|handleExtendedKeyEvent
argument_list|(
name|w
argument_list|,
name|time
argument_list|,
name|type
argument_list|,
name|key
argument_list|,
name|modifiers
argument_list|,
name|nativeScanCode
argument_list|,
name|nativeVirtualKey
argument_list|,
name|nativeModifiers
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|handleExtendedKeyEvent
name|bool
name|QWindowSystemInterface
operator|::
name|handleExtendedKeyEvent
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
name|QEvent
operator|::
name|Type
name|type
parameter_list|,
name|int
name|key
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
name|quint32
name|nativeScanCode
parameter_list|,
name|quint32
name|nativeVirtualKey
parameter_list|,
name|quint32
name|nativeModifiers
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorep
parameter_list|,
name|ushort
name|count
parameter_list|,
name|bool
name|tryShortcutOverride
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|tryShortcutOverride
argument_list|)
name|QWindowSystemInterfacePrivate
operator|::
name|KeyEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|KeyEvent
argument_list|(
name|tlw
argument_list|,
name|timestamp
argument_list|,
name|type
argument_list|,
name|key
argument_list|,
name|modifiers
argument_list|,
name|nativeScanCode
argument_list|,
name|nativeVirtualKey
argument_list|,
name|nativeModifiers
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
decl_stmt|;
return|return
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|handleWheelEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|int
name|d
parameter_list|,
name|Qt
operator|::
name|Orientation
name|o
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|)
block|{
name|unsigned
name|long
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|handleWheelEvent
argument_list|(
name|w
argument_list|,
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|d
argument_list|,
name|o
argument_list|,
name|mods
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleWheelEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|int
name|d
parameter_list|,
name|Qt
operator|::
name|Orientation
name|o
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|)
block|{
name|QPoint
name|point
init|=
operator|(
name|o
operator|==
name|Qt
operator|::
name|Vertical
operator|)
condition|?
name|QPoint
argument_list|(
literal|0
argument_list|,
name|d
argument_list|)
else|:
name|QPoint
argument_list|(
name|d
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|handleWheelEvent
argument_list|(
name|tlw
argument_list|,
name|timestamp
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|QPoint
argument_list|()
argument_list|,
name|point
argument_list|,
name|mods
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleWheelEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|QPoint
name|pixelDelta
parameter_list|,
name|QPoint
name|angleDelta
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
name|Qt
operator|::
name|ScrollPhase
name|phase
parameter_list|,
name|Qt
operator|::
name|MouseEventSource
name|source
parameter_list|)
block|{
name|unsigned
name|long
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|handleWheelEvent
argument_list|(
name|w
argument_list|,
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|pixelDelta
argument_list|,
name|angleDelta
argument_list|,
name|mods
argument_list|,
name|phase
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleWheelEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|QPoint
name|pixelDelta
parameter_list|,
name|QPoint
name|angleDelta
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
name|Qt
operator|::
name|ScrollPhase
name|phase
parameter_list|,
name|Qt
operator|::
name|MouseEventSource
name|source
parameter_list|)
block|{
comment|// Qt 4 sends two separate wheel events for horizontal and vertical
comment|// deltas. For Qt 5 we want to send the deltas in one event, but at the
comment|// same time preserve source and behavior compatibility with Qt 4.
comment|//
comment|// In addition high-resolution pixel-based deltas are also supported.
comment|// Platforms that does not support these may pass a null point here.
comment|// Angle deltas must always be sent in addition to pixel deltas.
name|QWindowSystemInterfacePrivate
operator|::
name|WheelEvent
modifier|*
name|e
decl_stmt|;
comment|// Pass Qt::ScrollBegin and Qt::ScrollEnd through
comment|// even if the wheel delta is null.
if|if
condition|(
name|angleDelta
operator|.
name|isNull
argument_list|()
operator|&&
name|phase
operator|==
name|Qt
operator|::
name|ScrollUpdate
condition|)
return|return;
comment|// Simple case: vertical deltas only:
if|if
condition|(
name|angleDelta
operator|.
name|y
argument_list|()
operator|!=
literal|0
operator|&&
name|angleDelta
operator|.
name|x
argument_list|()
operator|==
literal|0
condition|)
block|{
name|e
operator|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|WheelEvent
argument_list|(
name|tlw
argument_list|,
name|timestamp
argument_list|,
name|QHighDpi
operator|::
name|fromNativeLocalPosition
argument_list|(
name|local
argument_list|,
name|tlw
argument_list|)
argument_list|,
name|QHighDpi
operator|::
name|fromNativePixels
argument_list|(
name|global
argument_list|,
name|tlw
argument_list|)
argument_list|,
name|pixelDelta
argument_list|,
name|angleDelta
argument_list|,
name|angleDelta
operator|.
name|y
argument_list|()
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|mods
argument_list|,
name|phase
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Simple case: horizontal deltas only:
if|if
condition|(
name|angleDelta
operator|.
name|y
argument_list|()
operator|==
literal|0
operator|&&
name|angleDelta
operator|.
name|x
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|e
operator|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|WheelEvent
argument_list|(
name|tlw
argument_list|,
name|timestamp
argument_list|,
name|QHighDpi
operator|::
name|fromNativeLocalPosition
argument_list|(
name|local
argument_list|,
name|tlw
argument_list|)
argument_list|,
name|QHighDpi
operator|::
name|fromNativePixels
argument_list|(
name|global
argument_list|,
name|tlw
argument_list|)
argument_list|,
name|pixelDelta
argument_list|,
name|angleDelta
argument_list|,
name|angleDelta
operator|.
name|x
argument_list|()
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|mods
argument_list|,
name|phase
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Both horizontal and vertical deltas: Send two wheel events.
comment|// The first event contains the Qt 5 pixel and angle delta as points,
comment|// and in addition the Qt 4 compatibility vertical angle delta.
name|e
operator|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|WheelEvent
argument_list|(
name|tlw
argument_list|,
name|timestamp
argument_list|,
name|QHighDpi
operator|::
name|fromNativeLocalPosition
argument_list|(
name|local
argument_list|,
name|tlw
argument_list|)
argument_list|,
name|QHighDpi
operator|::
name|fromNativePixels
argument_list|(
name|global
argument_list|,
name|tlw
argument_list|)
argument_list|,
name|pixelDelta
argument_list|,
name|angleDelta
argument_list|,
name|angleDelta
operator|.
name|y
argument_list|()
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|mods
argument_list|,
name|phase
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|// The second event contains null pixel and angle points and the
comment|// Qt 4 compatibility horizontal angle delta.
name|e
operator|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|WheelEvent
argument_list|(
name|tlw
argument_list|,
name|timestamp
argument_list|,
name|QHighDpi
operator|::
name|fromNativeLocalPosition
argument_list|(
name|local
argument_list|,
name|tlw
argument_list|)
argument_list|,
name|QHighDpi
operator|::
name|fromNativePixels
argument_list|(
name|global
argument_list|,
name|tlw
argument_list|)
argument_list|,
name|QPoint
argument_list|()
argument_list|,
name|QPoint
argument_list|()
argument_list|,
name|angleDelta
operator|.
name|x
argument_list|()
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|mods
argument_list|,
name|phase
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|ExposeEvent
name|QWindowSystemInterfacePrivate
operator|::
name|ExposeEvent
operator|::
name|ExposeEvent
parameter_list|(
name|QWindow
modifier|*
name|exposed
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
member_init_list|:
name|WindowSystemEvent
argument_list|(
name|Expose
argument_list|)
member_init_list|,
name|exposed
argument_list|(
name|exposed
argument_list|)
member_init_list|,
name|isExposed
argument_list|(
name|exposed
operator|&&
name|exposed
operator|->
name|handle
argument_list|()
condition|?
name|exposed
operator|->
name|handle
argument_list|()
operator|->
name|isExposed
argument_list|()
else|:
literal|false
argument_list|)
member_init_list|,
name|region
argument_list|(
name|region
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|windowSystemEventsQueued
name|int
name|QWindowSystemInterfacePrivate
operator|::
name|windowSystemEventsQueued
parameter_list|()
block|{
return|return
name|windowSystemEventQueue
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getWindowSystemEvent
name|QWindowSystemInterfacePrivate
operator|::
name|WindowSystemEvent
modifier|*
name|QWindowSystemInterfacePrivate
operator|::
name|getWindowSystemEvent
parameter_list|()
block|{
return|return
name|windowSystemEventQueue
operator|.
name|takeFirstOrReturnNull
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getNonUserInputWindowSystemEvent
name|QWindowSystemInterfacePrivate
operator|::
name|WindowSystemEvent
modifier|*
name|QWindowSystemInterfacePrivate
operator|::
name|getNonUserInputWindowSystemEvent
parameter_list|()
block|{
return|return
name|windowSystemEventQueue
operator|.
name|takeFirstNonUserInputOrReturnNull
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|peekWindowSystemEvent
name|QWindowSystemInterfacePrivate
operator|::
name|WindowSystemEvent
modifier|*
name|QWindowSystemInterfacePrivate
operator|::
name|peekWindowSystemEvent
parameter_list|(
name|EventType
name|t
parameter_list|)
block|{
return|return
name|windowSystemEventQueue
operator|.
name|peekAtFirstOfType
argument_list|(
name|t
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|removeWindowSystemEvent
name|void
name|QWindowSystemInterfacePrivate
operator|::
name|removeWindowSystemEvent
parameter_list|(
name|WindowSystemEvent
modifier|*
name|event
parameter_list|)
block|{
name|windowSystemEventQueue
operator|.
name|remove
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|postWindowSystemEvent
name|void
name|QWindowSystemInterfacePrivate
operator|::
name|postWindowSystemEvent
parameter_list|(
name|WindowSystemEvent
modifier|*
name|ev
parameter_list|)
block|{
name|windowSystemEventQueue
operator|.
name|append
argument_list|(
name|ev
argument_list|)
expr_stmt|;
name|QAbstractEventDispatcher
modifier|*
name|dispatcher
init|=
name|QGuiApplicationPrivate
operator|::
name|qt_qpa_core_dispatcher
argument_list|()
decl_stmt|;
if|if
condition|(
name|dispatcher
condition|)
name|dispatcher
operator|->
name|wakeUp
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Handles a window system event.      By default this function posts the event on the window system event queue and     wakes the Gui event dispatcher. Qt Gui will then handle the event asynchonously     at a later point. The return value is not used in asynchronous mode and will     always be true.      In synchronous mode Qt Gui will process the event immediately. The return value     indicates if Qt accepted the event.      \sa flushWindowSystemEvents(), setSynchronousWindowSystemEvents() */
end_comment
begin_function
DECL|function|handleWindowSystemEvent
name|bool
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|WindowSystemEvent
modifier|*
name|ev
parameter_list|)
block|{
name|bool
name|accepted
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|synchronousWindowSystemEvents
condition|)
block|{
if|if
condition|(
name|QThread
operator|::
name|currentThread
argument_list|()
operator|==
name|QGuiApplication
operator|::
name|instance
argument_list|()
operator|->
name|thread
argument_list|()
condition|)
block|{
comment|// Process the event immediately on the current thread and return the accepted state.
name|QGuiApplicationPrivate
operator|::
name|processWindowSystemEvent
argument_list|(
name|ev
argument_list|)
expr_stmt|;
name|accepted
operator|=
name|ev
operator|->
name|eventAccepted
expr_stmt|;
operator|delete
name|ev
expr_stmt|;
block|}
else|else
block|{
comment|// Post the event on the Qt main thread queue and flush the queue.
comment|// This will wake up the Gui thread which will process the event.
comment|// Return the accepted state for the last event on the queue,
comment|// which is the event posted by this function.
name|postWindowSystemEvent
argument_list|(
name|ev
argument_list|)
expr_stmt|;
name|accepted
operator|=
name|QWindowSystemInterface
operator|::
name|flushWindowSystemEvents
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|postWindowSystemEvent
argument_list|(
name|ev
argument_list|)
expr_stmt|;
block|}
return|return
name|accepted
return|;
block|}
end_function
begin_function
DECL|function|registerTouchDevice
name|void
name|QWindowSystemInterface
operator|::
name|registerTouchDevice
parameter_list|(
specifier|const
name|QTouchDevice
modifier|*
name|device
parameter_list|)
block|{
name|QTouchDevicePrivate
operator|::
name|registerDevice
argument_list|(
name|device
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unregisterTouchDevice
name|void
name|QWindowSystemInterface
operator|::
name|unregisterTouchDevice
parameter_list|(
specifier|const
name|QTouchDevice
modifier|*
name|device
parameter_list|)
block|{
name|QTouchDevicePrivate
operator|::
name|unregisterDevice
argument_list|(
name|device
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTouchEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|QTouchDevice
modifier|*
name|device
parameter_list|,
specifier|const
name|QList
argument_list|<
name|TouchPoint
argument_list|>
modifier|&
name|points
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|)
block|{
name|unsigned
name|long
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|handleTouchEvent
argument_list|(
name|w
argument_list|,
name|time
argument_list|,
name|device
argument_list|,
name|points
argument_list|,
name|mods
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
DECL|function|fromNativeTouchPoints
name|QWindowSystemInterfacePrivate
operator|::
name|fromNativeTouchPoints
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
modifier|&
name|points
parameter_list|,
specifier|const
name|QWindow
modifier|*
name|window
parameter_list|,
name|QEvent
operator|::
name|Type
modifier|*
name|type
parameter_list|)
block|{
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
name|touchPoints
decl_stmt|;
name|Qt
operator|::
name|TouchPointStates
name|states
decl_stmt|;
name|QTouchEvent
operator|::
name|TouchPoint
name|p
decl_stmt|;
name|touchPoints
operator|.
name|reserve
argument_list|(
name|points
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
operator|::
name|const_iterator
name|point
init|=
name|points
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
operator|::
name|const_iterator
name|end
init|=
name|points
operator|.
name|constEnd
argument_list|()
decl_stmt|;
while|while
condition|(
name|point
operator|!=
name|end
condition|)
block|{
name|p
operator|.
name|setId
argument_list|(
name|point
operator|->
name|id
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPressure
argument_list|(
name|point
operator|->
name|pressure
argument_list|)
expr_stmt|;
name|states
operator||=
name|point
operator|->
name|state
expr_stmt|;
name|p
operator|.
name|setState
argument_list|(
name|point
operator|->
name|state
argument_list|)
expr_stmt|;
specifier|const
name|QPointF
name|screenPos
init|=
name|point
operator|->
name|area
operator|.
name|center
argument_list|()
decl_stmt|;
name|p
operator|.
name|setScreenPos
argument_list|(
name|QHighDpi
operator|::
name|fromNativePixels
argument_list|(
name|screenPos
argument_list|,
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setScreenRect
argument_list|(
name|QHighDpi
operator|::
name|fromNativePixels
argument_list|(
name|point
operator|->
name|area
argument_list|,
name|window
argument_list|)
argument_list|)
expr_stmt|;
comment|// The local pos and rect are not set, they will be calculated
comment|// when the event gets processed by QGuiApplication.
name|p
operator|.
name|setNormalizedPos
argument_list|(
name|QHighDpi
operator|::
name|fromNativePixels
argument_list|(
name|point
operator|->
name|normalPosition
argument_list|,
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setVelocity
argument_list|(
name|QHighDpi
operator|::
name|fromNativePixels
argument_list|(
name|point
operator|->
name|velocity
argument_list|,
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setFlags
argument_list|(
name|point
operator|->
name|flags
argument_list|)
expr_stmt|;
name|p
operator|.
name|setRawScreenPositions
argument_list|(
name|QHighDpi
operator|::
name|fromNativePixels
argument_list|(
name|point
operator|->
name|rawPositions
argument_list|,
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|touchPoints
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
operator|++
name|point
expr_stmt|;
block|}
comment|// Determine the event type based on the combined point states.
if|if
condition|(
name|type
condition|)
block|{
operator|*
name|type
operator|=
name|QEvent
operator|::
name|TouchUpdate
expr_stmt|;
if|if
condition|(
name|states
operator|==
name|Qt
operator|::
name|TouchPointPressed
condition|)
operator|*
name|type
operator|=
name|QEvent
operator|::
name|TouchBegin
expr_stmt|;
elseif|else
if|if
condition|(
name|states
operator|==
name|Qt
operator|::
name|TouchPointReleased
condition|)
operator|*
name|type
operator|=
name|QEvent
operator|::
name|TouchEnd
expr_stmt|;
block|}
return|return
name|touchPoints
return|;
block|}
end_function
begin_function
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
DECL|function|toNativeTouchPoints
name|QWindowSystemInterfacePrivate
operator|::
name|toNativeTouchPoints
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
modifier|&
name|pointList
parameter_list|,
specifier|const
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
name|newList
decl_stmt|;
name|newList
operator|.
name|reserve
argument_list|(
name|pointList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QTouchEvent
operator|::
name|TouchPoint
modifier|&
name|pt
decl|,
name|pointList
control|)
block|{
name|QWindowSystemInterface
operator|::
name|TouchPoint
name|p
decl_stmt|;
name|p
operator|.
name|id
operator|=
name|pt
operator|.
name|id
argument_list|()
expr_stmt|;
name|p
operator|.
name|flags
operator|=
name|pt
operator|.
name|flags
argument_list|()
expr_stmt|;
name|p
operator|.
name|normalPosition
operator|=
name|QHighDpi
operator|::
name|toNativeLocalPosition
argument_list|(
name|pt
operator|.
name|normalizedPos
argument_list|()
argument_list|,
name|window
argument_list|)
expr_stmt|;
name|p
operator|.
name|area
operator|=
name|QHighDpi
operator|::
name|toNativePixels
argument_list|(
name|pt
operator|.
name|screenRect
argument_list|()
argument_list|,
name|window
argument_list|)
expr_stmt|;
name|p
operator|.
name|pressure
operator|=
name|pt
operator|.
name|pressure
argument_list|()
expr_stmt|;
name|p
operator|.
name|state
operator|=
name|pt
operator|.
name|state
argument_list|()
expr_stmt|;
name|p
operator|.
name|velocity
operator|=
name|pt
operator|.
name|velocity
argument_list|()
expr_stmt|;
name|p
operator|.
name|rawPositions
operator|=
name|pt
operator|.
name|rawScreenPositions
argument_list|()
expr_stmt|;
name|newList
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|newList
return|;
block|}
end_function
begin_function
DECL|function|handleTouchEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
name|QTouchDevice
modifier|*
name|device
parameter_list|,
specifier|const
name|QList
argument_list|<
name|TouchPoint
argument_list|>
modifier|&
name|points
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|)
block|{
if|if
condition|(
operator|!
name|points
operator|.
name|size
argument_list|()
condition|)
comment|// Touch events must have at least one point
return|return;
if|if
condition|(
operator|!
name|QTouchDevicePrivate
operator|::
name|isRegistered
argument_list|(
name|device
argument_list|)
condition|)
comment|// Disallow passing bogus, non-registered devices.
return|return;
name|QEvent
operator|::
name|Type
name|type
decl_stmt|;
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
name|touchPoints
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|fromNativeTouchPoints
argument_list|(
name|points
argument_list|,
name|tlw
argument_list|,
operator|&
name|type
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|TouchEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|TouchEvent
argument_list|(
name|tlw
argument_list|,
name|timestamp
argument_list|,
name|type
argument_list|,
name|device
argument_list|,
name|touchPoints
argument_list|,
name|mods
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTouchCancelEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTouchCancelEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|QTouchDevice
modifier|*
name|device
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|)
block|{
name|unsigned
name|long
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|handleTouchCancelEvent
argument_list|(
name|w
argument_list|,
name|time
argument_list|,
name|device
argument_list|,
name|mods
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTouchCancelEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTouchCancelEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
name|QTouchDevice
modifier|*
name|device
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|TouchEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|TouchEvent
argument_list|(
name|w
argument_list|,
name|timestamp
argument_list|,
name|QEvent
operator|::
name|TouchCancel
argument_list|,
name|device
argument_list|,
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
argument_list|()
argument_list|,
name|mods
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleScreenOrientationChange
name|void
name|QWindowSystemInterface
operator|::
name|handleScreenOrientationChange
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
name|Qt
operator|::
name|ScreenOrientation
name|orientation
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenOrientationEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenOrientationEvent
argument_list|(
name|screen
argument_list|,
name|orientation
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleScreenGeometryChange
name|void
name|QWindowSystemInterface
operator|::
name|handleScreenGeometryChange
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
specifier|const
name|QRect
modifier|&
name|geometry
parameter_list|,
specifier|const
name|QRect
modifier|&
name|availableGeometry
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenGeometryEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenGeometryEvent
argument_list|(
name|screen
argument_list|,
name|QHighDpi
operator|::
name|fromNativeScreenGeometry
argument_list|(
name|geometry
argument_list|,
name|screen
argument_list|)
argument_list|,
name|QHighDpi
operator|::
name|fromNative
argument_list|(
name|availableGeometry
argument_list|,
name|screen
argument_list|,
name|geometry
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleScreenLogicalDotsPerInchChange
name|void
name|QWindowSystemInterface
operator|::
name|handleScreenLogicalDotsPerInchChange
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
name|qreal
name|dpiX
parameter_list|,
name|qreal
name|dpiY
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenLogicalDotsPerInchEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenLogicalDotsPerInchEvent
argument_list|(
name|screen
argument_list|,
name|dpiX
argument_list|,
name|dpiY
argument_list|)
decl_stmt|;
comment|// ### tja
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleScreenRefreshRateChange
name|void
name|QWindowSystemInterface
operator|::
name|handleScreenRefreshRateChange
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
name|qreal
name|newRefreshRate
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenRefreshRateEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenRefreshRateEvent
argument_list|(
name|screen
argument_list|,
name|newRefreshRate
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleThemeChange
name|void
name|QWindowSystemInterface
operator|::
name|handleThemeChange
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|ThemeChangeEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|ThemeChangeEvent
argument_list|(
name|tlw
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleExposeEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|ExposeEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|ExposeEvent
argument_list|(
name|tlw
argument_list|,
name|QHighDpi
operator|::
name|fromNativeLocalRegion
argument_list|(
name|region
argument_list|,
name|tlw
argument_list|)
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deferredFlushWindowSystemEvents
name|void
name|QWindowSystemInterface
operator|::
name|deferredFlushWindowSystemEvents
parameter_list|(
name|QEventLoop
operator|::
name|ProcessEventsFlags
name|flags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|QThread
operator|::
name|currentThread
argument_list|()
operator|==
name|QGuiApplication
operator|::
name|instance
argument_list|()
operator|->
name|thread
argument_list|()
argument_list|)
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|QWindowSystemInterfacePrivate
operator|::
name|flushEventMutex
argument_list|)
decl_stmt|;
name|sendWindowSystemEvents
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|eventsFlushed
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Make Qt Gui process all events on the event queue immediately. Return the     accepted state for the last event on the queue. */
end_comment
begin_function
DECL|function|flushWindowSystemEvents
name|bool
name|QWindowSystemInterface
operator|::
name|flushWindowSystemEvents
parameter_list|(
name|QEventLoop
operator|::
name|ProcessEventsFlags
name|flags
parameter_list|)
block|{
specifier|const
name|int
name|count
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|windowSystemEventQueue
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|count
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|QGuiApplication
operator|::
name|instance
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QWindowSystemInterface::flushWindowSystemEvents() invoked after "
literal|"QGuiApplication destruction, discarding "
operator|<<
name|count
operator|<<
literal|" events."
expr_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|windowSystemEventQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|QThread
operator|::
name|currentThread
argument_list|()
operator|!=
name|QGuiApplication
operator|::
name|instance
argument_list|()
operator|->
name|thread
argument_list|()
condition|)
block|{
comment|// Post a FlushEvents event which will trigger a call back to
comment|// deferredFlushWindowSystemEvents from the Gui thread.
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|QWindowSystemInterfacePrivate
operator|::
name|flushEventMutex
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|FlushEventsEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|FlushEventsEvent
argument_list|(
name|flags
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|postWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|eventsFlushed
operator|.
name|wait
argument_list|(
operator|&
name|QWindowSystemInterfacePrivate
operator|::
name|flushEventMutex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sendWindowSystemEvents
argument_list|(
name|flags
argument_list|)
expr_stmt|;
block|}
return|return
name|QWindowSystemInterfacePrivate
operator|::
name|eventAccepted
operator|.
name|load
argument_list|()
operator|>
literal|0
return|;
block|}
end_function
begin_function
DECL|function|sendWindowSystemEvents
name|bool
name|QWindowSystemInterface
operator|::
name|sendWindowSystemEvents
parameter_list|(
name|QEventLoop
operator|::
name|ProcessEventsFlags
name|flags
parameter_list|)
block|{
name|int
name|nevents
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|QWindowSystemInterfacePrivate
operator|::
name|windowSystemEventsQueued
argument_list|()
condition|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|WindowSystemEvent
modifier|*
name|event
init|=
operator|(
name|flags
operator|&
name|QEventLoop
operator|::
name|ExcludeUserInputEvents
operator|)
condition|?
name|QWindowSystemInterfacePrivate
operator|::
name|getNonUserInputWindowSystemEvent
argument_list|()
else|:
name|QWindowSystemInterfacePrivate
operator|::
name|getWindowSystemEvent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|event
condition|)
break|break;
if|if
condition|(
name|QWindowSystemInterfacePrivate
operator|::
name|eventHandler
condition|)
block|{
if|if
condition|(
name|QWindowSystemInterfacePrivate
operator|::
name|eventHandler
operator|->
name|sendEvent
argument_list|(
name|event
argument_list|)
condition|)
name|nevents
operator|++
expr_stmt|;
block|}
else|else
block|{
name|nevents
operator|++
expr_stmt|;
name|QGuiApplicationPrivate
operator|::
name|processWindowSystemEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
comment|// Record the accepted state for the processed event
comment|// (excluding flush events). This state can then be
comment|// returned by flushWindowSystemEvents().
if|if
condition|(
name|event
operator|->
name|type
operator|!=
name|QWindowSystemInterfacePrivate
operator|::
name|FlushEvents
condition|)
name|QWindowSystemInterfacePrivate
operator|::
name|eventAccepted
operator|.
name|store
argument_list|(
name|event
operator|->
name|eventAccepted
argument_list|)
expr_stmt|;
operator|delete
name|event
expr_stmt|;
block|}
return|return
operator|(
name|nevents
operator|>
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|installWindowSystemEventHandler
name|void
name|QWindowSystemInterfacePrivate
operator|::
name|installWindowSystemEventHandler
parameter_list|(
name|QWindowSystemEventHandler
modifier|*
name|handler
parameter_list|)
block|{
if|if
condition|(
operator|!
name|eventHandler
condition|)
name|eventHandler
operator|=
name|handler
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeWindowSystemEventhandler
name|void
name|QWindowSystemInterfacePrivate
operator|::
name|removeWindowSystemEventhandler
parameter_list|(
name|QWindowSystemEventHandler
modifier|*
name|handler
parameter_list|)
block|{
if|if
condition|(
name|eventHandler
operator|==
name|handler
condition|)
name|eventHandler
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSynchronousWindowSystemEvents
name|void
name|QWindowSystemInterface
operator|::
name|setSynchronousWindowSystemEvents
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|synchronousWindowSystemEvents
operator|=
name|enable
expr_stmt|;
block|}
end_function
begin_function
DECL|function|windowSystemEventsQueued
name|int
name|QWindowSystemInterface
operator|::
name|windowSystemEventsQueued
parameter_list|()
block|{
return|return
name|QWindowSystemInterfacePrivate
operator|::
name|windowSystemEventsQueued
argument_list|()
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_function
DECL|function|handleDrag
name|QPlatformDragQtResponse
name|QWindowSystemInterface
operator|::
name|handleDrag
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|QMimeData
modifier|*
name|dropData
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|,
name|Qt
operator|::
name|DropActions
name|supportedActions
parameter_list|)
block|{
return|return
name|QGuiApplicationPrivate
operator|::
name|processDrag
argument_list|(
name|w
argument_list|,
name|dropData
argument_list|,
name|QHighDpi
operator|::
name|fromNativeLocalPosition
argument_list|(
name|p
argument_list|,
name|w
argument_list|)
argument_list|,
name|supportedActions
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|handleDrop
name|QPlatformDropQtResponse
name|QWindowSystemInterface
operator|::
name|handleDrop
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|QMimeData
modifier|*
name|dropData
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|,
name|Qt
operator|::
name|DropActions
name|supportedActions
parameter_list|)
block|{
return|return
name|QGuiApplicationPrivate
operator|::
name|processDrop
argument_list|(
name|w
argument_list|,
name|dropData
argument_list|,
name|QHighDpi
operator|::
name|fromNativeLocalPosition
argument_list|(
name|p
argument_list|,
name|w
argument_list|)
argument_list|,
name|supportedActions
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
begin_comment
comment|/*!     \fn static QWindowSystemInterface::handleNativeEvent(QWindow *window, const QByteArray&eventType, void *message, long *result)     \brief Passes a native event identified by \a eventType to the \a window.      \note This function can only be called from the GUI thread. */
end_comment
begin_function
DECL|function|handleNativeEvent
name|bool
name|QWindowSystemInterface
operator|::
name|handleNativeEvent
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|eventType
parameter_list|,
name|void
modifier|*
name|message
parameter_list|,
name|long
modifier|*
name|result
parameter_list|)
block|{
return|return
name|QGuiApplicationPrivate
operator|::
name|processNativeEvent
argument_list|(
name|window
argument_list|,
name|eventType
argument_list|,
name|message
argument_list|,
name|result
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|handleFileOpenEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleFileOpenEvent
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|FileOpenEvent
name|e
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QGuiApplicationPrivate
operator|::
name|processWindowSystemEvent
argument_list|(
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleFileOpenEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleFileOpenEvent
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|FileOpenEvent
name|e
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|QGuiApplicationPrivate
operator|::
name|processWindowSystemEvent
argument_list|(
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTabletEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTabletEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|int
name|device
parameter_list|,
name|int
name|pointerType
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|,
name|qreal
name|pressure
parameter_list|,
name|int
name|xTilt
parameter_list|,
name|int
name|yTilt
parameter_list|,
name|qreal
name|tangentialPressure
parameter_list|,
name|qreal
name|rotation
parameter_list|,
name|int
name|z
parameter_list|,
name|qint64
name|uid
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|TabletEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|TabletEvent
argument_list|(
name|w
argument_list|,
name|timestamp
argument_list|,
name|QHighDpi
operator|::
name|fromNativeLocalPosition
argument_list|(
name|local
argument_list|,
name|w
argument_list|)
argument_list|,
name|QHighDpi
operator|::
name|fromNativePixels
argument_list|(
name|global
argument_list|,
name|w
argument_list|)
argument_list|,
name|device
argument_list|,
name|pointerType
argument_list|,
name|buttons
argument_list|,
name|pressure
argument_list|,
name|xTilt
argument_list|,
name|yTilt
argument_list|,
name|tangentialPressure
argument_list|,
name|rotation
argument_list|,
name|z
argument_list|,
name|uid
argument_list|,
name|modifiers
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTabletEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTabletEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|int
name|device
parameter_list|,
name|int
name|pointerType
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|,
name|qreal
name|pressure
parameter_list|,
name|int
name|xTilt
parameter_list|,
name|int
name|yTilt
parameter_list|,
name|qreal
name|tangentialPressure
parameter_list|,
name|qreal
name|rotation
parameter_list|,
name|int
name|z
parameter_list|,
name|qint64
name|uid
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
block|{
name|ulong
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|handleTabletEvent
argument_list|(
name|w
argument_list|,
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|device
argument_list|,
name|pointerType
argument_list|,
name|buttons
argument_list|,
name|pressure
argument_list|,
name|xTilt
argument_list|,
name|yTilt
argument_list|,
name|tangentialPressure
argument_list|,
name|rotation
argument_list|,
name|z
argument_list|,
name|uid
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTabletEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTabletEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
name|bool
name|down
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|int
name|device
parameter_list|,
name|int
name|pointerType
parameter_list|,
name|qreal
name|pressure
parameter_list|,
name|int
name|xTilt
parameter_list|,
name|int
name|yTilt
parameter_list|,
name|qreal
name|tangentialPressure
parameter_list|,
name|qreal
name|rotation
parameter_list|,
name|int
name|z
parameter_list|,
name|qint64
name|uid
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
block|{
name|handleTabletEvent
argument_list|(
name|w
argument_list|,
name|timestamp
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|device
argument_list|,
name|pointerType
argument_list|,
operator|(
name|down
condition|?
name|Qt
operator|::
name|LeftButton
else|:
name|Qt
operator|::
name|NoButton
operator|)
argument_list|,
name|pressure
argument_list|,
name|xTilt
argument_list|,
name|yTilt
argument_list|,
name|tangentialPressure
argument_list|,
name|rotation
argument_list|,
name|z
argument_list|,
name|uid
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTabletEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTabletEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|bool
name|down
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|int
name|device
parameter_list|,
name|int
name|pointerType
parameter_list|,
name|qreal
name|pressure
parameter_list|,
name|int
name|xTilt
parameter_list|,
name|int
name|yTilt
parameter_list|,
name|qreal
name|tangentialPressure
parameter_list|,
name|qreal
name|rotation
parameter_list|,
name|int
name|z
parameter_list|,
name|qint64
name|uid
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
block|{
name|handleTabletEvent
argument_list|(
name|w
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|device
argument_list|,
name|pointerType
argument_list|,
operator|(
name|down
condition|?
name|Qt
operator|::
name|LeftButton
else|:
name|Qt
operator|::
name|NoButton
operator|)
argument_list|,
name|pressure
argument_list|,
name|xTilt
argument_list|,
name|yTilt
argument_list|,
name|tangentialPressure
argument_list|,
name|rotation
argument_list|,
name|z
argument_list|,
name|uid
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTabletEnterProximityEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTabletEnterProximityEvent
parameter_list|(
name|ulong
name|timestamp
parameter_list|,
name|int
name|device
parameter_list|,
name|int
name|pointerType
parameter_list|,
name|qint64
name|uid
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|TabletEnterProximityEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|TabletEnterProximityEvent
argument_list|(
name|timestamp
argument_list|,
name|device
argument_list|,
name|pointerType
argument_list|,
name|uid
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTabletEnterProximityEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTabletEnterProximityEvent
parameter_list|(
name|int
name|device
parameter_list|,
name|int
name|pointerType
parameter_list|,
name|qint64
name|uid
parameter_list|)
block|{
name|ulong
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|handleTabletEnterProximityEvent
argument_list|(
name|time
argument_list|,
name|device
argument_list|,
name|pointerType
argument_list|,
name|uid
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTabletLeaveProximityEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTabletLeaveProximityEvent
parameter_list|(
name|ulong
name|timestamp
parameter_list|,
name|int
name|device
parameter_list|,
name|int
name|pointerType
parameter_list|,
name|qint64
name|uid
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|TabletLeaveProximityEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|TabletLeaveProximityEvent
argument_list|(
name|timestamp
argument_list|,
name|device
argument_list|,
name|pointerType
argument_list|,
name|uid
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTabletLeaveProximityEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTabletLeaveProximityEvent
parameter_list|(
name|int
name|device
parameter_list|,
name|int
name|pointerType
parameter_list|,
name|qint64
name|uid
parameter_list|)
block|{
name|ulong
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|handleTabletLeaveProximityEvent
argument_list|(
name|time
argument_list|,
name|device
argument_list|,
name|pointerType
argument_list|,
name|uid
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
end_ifndef
begin_function
DECL|function|handleGestureEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleGestureEvent
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
name|Qt
operator|::
name|NativeGestureType
name|type
parameter_list|,
name|QPointF
modifier|&
name|local
parameter_list|,
name|QPointF
modifier|&
name|global
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|GestureEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|GestureEvent
argument_list|(
name|window
argument_list|,
name|timestamp
argument_list|,
name|type
argument_list|,
name|local
argument_list|,
name|global
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleGestureEventWithRealValue
name|void
name|QWindowSystemInterface
operator|::
name|handleGestureEventWithRealValue
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
name|Qt
operator|::
name|NativeGestureType
name|type
parameter_list|,
name|qreal
name|value
parameter_list|,
name|QPointF
modifier|&
name|local
parameter_list|,
name|QPointF
modifier|&
name|global
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|GestureEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|GestureEvent
argument_list|(
name|window
argument_list|,
name|timestamp
argument_list|,
name|type
argument_list|,
name|local
argument_list|,
name|global
argument_list|)
decl_stmt|;
name|e
operator|->
name|realValue
operator|=
name|value
expr_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleGestureEventWithSequenceIdAndValue
name|void
name|QWindowSystemInterface
operator|::
name|handleGestureEventWithSequenceIdAndValue
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
name|Qt
operator|::
name|NativeGestureType
name|type
parameter_list|,
name|ulong
name|sequenceId
parameter_list|,
name|quint64
name|value
parameter_list|,
name|QPointF
modifier|&
name|local
parameter_list|,
name|QPointF
modifier|&
name|global
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|GestureEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|GestureEvent
argument_list|(
name|window
argument_list|,
name|timestamp
argument_list|,
name|type
argument_list|,
name|local
argument_list|,
name|global
argument_list|)
decl_stmt|;
name|e
operator|->
name|sequenceId
operator|=
name|sequenceId
expr_stmt|;
name|e
operator|->
name|intValue
operator|=
name|value
expr_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_GESTURES
end_comment
begin_function
DECL|function|handlePlatformPanelEvent
name|void
name|QWindowSystemInterface
operator|::
name|handlePlatformPanelEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|PlatformPanelEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|PlatformPanelEvent
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
end_ifndef
begin_function
DECL|function|handleContextMenuEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleContextMenuEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|bool
name|mouseTriggered
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|globalPos
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|ContextMenuEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|ContextMenuEvent
argument_list|(
name|w
argument_list|,
name|mouseTriggered
argument_list|,
name|pos
argument_list|,
name|globalPos
argument_list|,
name|modifiers
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
end_ifndef
begin_function
DECL|function|handleEnterWhatsThisEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleEnterWhatsThisEvent
parameter_list|()
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|WindowSystemEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|WindowSystemEvent
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|EnterWhatsThisMode
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|handleWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|operator <<
name|Q_GUI_EXPORT
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
specifier|const
name|QWindowSystemInterface
operator|::
name|TouchPoint
modifier|&
name|p
parameter_list|)
block|{
name|QDebugStateSaver
name|saver
argument_list|(
name|dbg
argument_list|)
decl_stmt|;
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"TouchPoint("
operator|<<
name|p
operator|.
name|id
operator|<<
literal|" @"
operator|<<
name|p
operator|.
name|area
operator|<<
literal|" normalized "
operator|<<
name|p
operator|.
name|normalPosition
operator|<<
literal|" press "
operator|<<
name|p
operator|.
name|pressure
operator|<<
literal|" vel "
operator|<<
name|p
operator|.
name|velocity
operator|<<
literal|" state "
operator|<<
operator|(
name|int
operator|)
name|p
operator|.
name|state
expr_stmt|;
return|return
name|dbg
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// The following functions are used by testlib, and need to be synchronous to avoid
end_comment
begin_comment
comment|// race conditions with plugins delivering native events from secondary threads.
end_comment
begin_function
DECL|function|qt_handleMouseEvent
name|Q_GUI_EXPORT
name|void
name|qt_handleMouseEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|b
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
name|int
name|timestamp
parameter_list|)
block|{
name|bool
name|wasSynchronous
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|synchronousWindowSystemEvents
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|setSynchronousWindowSystemEvents
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
name|w
argument_list|,
name|timestamp
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|b
argument_list|,
name|mods
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|setSynchronousWindowSystemEvents
argument_list|(
name|wasSynchronous
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_handleKeyEvent
name|Q_GUI_EXPORT
name|void
name|qt_handleKeyEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|QEvent
operator|::
name|Type
name|t
parameter_list|,
name|int
name|k
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
init|=
name|QString
argument_list|()
parameter_list|,
name|bool
name|autorep
init|=
literal|false
parameter_list|,
name|ushort
name|count
init|=
literal|1
parameter_list|)
block|{
name|bool
name|wasSynchronous
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|synchronousWindowSystemEvents
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|setSynchronousWindowSystemEvents
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleKeyEvent
argument_list|(
name|w
argument_list|,
name|t
argument_list|,
name|k
argument_list|,
name|mods
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|setSynchronousWindowSystemEvents
argument_list|(
name|wasSynchronous
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_sendShortcutOverrideEvent
name|Q_GUI_EXPORT
name|bool
name|qt_sendShortcutOverrideEvent
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
name|int
name|k
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
init|=
name|QString
argument_list|()
parameter_list|,
name|bool
name|autorep
init|=
literal|false
parameter_list|,
name|ushort
name|count
init|=
literal|1
parameter_list|)
block|{
return|return
name|QWindowSystemInterface
operator|::
name|tryHandleShortcutEventToObject
argument_list|(
name|o
argument_list|,
name|timestamp
argument_list|,
name|k
argument_list|,
name|mods
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|touchPoint
specifier|static
name|QWindowSystemInterface
operator|::
name|TouchPoint
name|touchPoint
parameter_list|(
specifier|const
name|QTouchEvent
operator|::
name|TouchPoint
modifier|&
name|pt
parameter_list|)
block|{
name|QWindowSystemInterface
operator|::
name|TouchPoint
name|p
decl_stmt|;
name|p
operator|.
name|id
operator|=
name|pt
operator|.
name|id
argument_list|()
expr_stmt|;
name|p
operator|.
name|flags
operator|=
name|pt
operator|.
name|flags
argument_list|()
expr_stmt|;
name|p
operator|.
name|normalPosition
operator|=
name|pt
operator|.
name|normalizedPos
argument_list|()
expr_stmt|;
name|p
operator|.
name|area
operator|=
name|pt
operator|.
name|screenRect
argument_list|()
expr_stmt|;
name|p
operator|.
name|pressure
operator|=
name|pt
operator|.
name|pressure
argument_list|()
expr_stmt|;
name|p
operator|.
name|state
operator|=
name|pt
operator|.
name|state
argument_list|()
expr_stmt|;
name|p
operator|.
name|velocity
operator|=
name|pt
operator|.
name|velocity
argument_list|()
expr_stmt|;
name|p
operator|.
name|rawPositions
operator|=
name|pt
operator|.
name|rawScreenPositions
argument_list|()
expr_stmt|;
return|return
name|p
return|;
block|}
end_function
begin_function
DECL|function|touchPointList
specifier|static
name|QList
argument_list|<
expr|struct
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
name|touchPointList
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
modifier|&
name|pointList
parameter_list|)
block|{
name|QList
argument_list|<
expr|struct
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
name|newList
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|QTouchEvent::TouchPoint p
argument_list|,
argument|pointList
argument_list|)
name|newList
operator|.
name|append
argument_list|(
name|touchPoint
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|newList
return|;
block|}
end_function
begin_function
DECL|function|qt_handleTouchEvent
name|Q_GUI_EXPORT
name|void
name|qt_handleTouchEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|QTouchDevice
modifier|*
name|device
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
modifier|&
name|points
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
init|=
name|Qt
operator|::
name|NoModifier
parameter_list|)
block|{
name|bool
name|wasSynchronous
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|synchronousWindowSystemEvents
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|setSynchronousWindowSystemEvents
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|w
argument_list|,
name|device
argument_list|,
name|touchPointList
argument_list|(
name|points
argument_list|)
argument_list|,
name|mods
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|setSynchronousWindowSystemEvents
argument_list|(
name|wasSynchronous
argument_list|)
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~QWindowSystemEventHandler
name|QWindowSystemEventHandler
operator|::
name|~
name|QWindowSystemEventHandler
parameter_list|()
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|removeWindowSystemEventhandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|sendEvent
name|bool
name|QWindowSystemEventHandler
operator|::
name|sendEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|WindowSystemEvent
modifier|*
name|e
parameter_list|)
block|{
name|QGuiApplicationPrivate
operator|::
name|processWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
