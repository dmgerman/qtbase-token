begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsysteminterface.h"
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformwindow.h>
end_include
begin_include
include|#
directive|include
file|"qwindowsysteminterface_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qguiapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qevent_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qtouchdevice_p.h"
end_include
begin_include
include|#
directive|include
file|<QAbstractEventDispatcher>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformdrag.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|member|eventTime
name|QElapsedTimer
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
decl_stmt|;
end_decl_stmt
begin_comment
comment|//------------------------------------------------------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Callback functions for plugins:
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
DECL|member|windowSystemEventQueue
name|QWindowSystemInterfacePrivate
operator|::
name|WindowSystemEventList
name|QWindowSystemInterfacePrivate
operator|::
name|windowSystemEventQueue
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|QPointer
argument_list|<
name|QWindow
argument_list|>
name|qt_last_mouse_receiver
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*!     \class QWindowSystemInterface     \since 5.0     \internal     \preliminary     \ingroup qpa     \brief The QWindowSystemInterface provides an event queue for the QPA platform.      The platform plugins call the various functions to notify about events. The events are queued     until sendWindowSystemEvents() is called by the event dispatcher. */
end_comment
begin_function
DECL|function|handleEnterEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleEnterEvent
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|)
block|{
if|if
condition|(
name|tlw
condition|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|EnterEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|EnterEvent
argument_list|(
name|tlw
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleLeaveEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleLeaveEvent
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|LeaveEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|LeaveEvent
argument_list|(
name|tlw
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleWindowActivated
name|void
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|ActivatedWindowEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|ActivatedWindowEvent
argument_list|(
name|tlw
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleWindowStateChanged
name|void
name|QWindowSystemInterface
operator|::
name|handleWindowStateChanged
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
name|Qt
operator|::
name|WindowState
name|newState
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|WindowStateChangedEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|WindowStateChangedEvent
argument_list|(
name|tlw
argument_list|,
name|newState
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleGeometryChange
name|void
name|QWindowSystemInterface
operator|::
name|handleGeometryChange
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
specifier|const
name|QRect
modifier|&
name|newRect
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|GeometryChangeEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|GeometryChangeEvent
argument_list|(
name|tlw
argument_list|,
name|newRect
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleSynchronousGeometryChange
name|void
name|QWindowSystemInterface
operator|::
name|handleSynchronousGeometryChange
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
specifier|const
name|QRect
modifier|&
name|newRect
parameter_list|)
block|{
name|handleGeometryChange
argument_list|(
name|tlw
argument_list|,
name|newRect
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|flushWindowSystemEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleCloseEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleCloseEvent
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|)
block|{
if|if
condition|(
name|tlw
condition|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|CloseEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|CloseEvent
argument_list|(
name|tlw
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleSynchronousCloseEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleSynchronousCloseEvent
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|)
block|{
if|if
condition|(
name|tlw
condition|)
block|{
name|handleCloseEvent
argument_list|(
name|tlw
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|flushWindowSystemEvents
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!  \a w == 0 means that the event is in global coords only, \a local will be ignored in this case  */
end_comment
begin_function
DECL|function|handleMouseEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|b
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|)
block|{
name|unsigned
name|long
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|handleMouseEvent
argument_list|(
name|w
argument_list|,
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|b
argument_list|,
name|mods
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleMouseEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|b
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|MouseEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|MouseEvent
argument_list|(
name|w
argument_list|,
name|timestamp
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|b
argument_list|,
name|mods
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleFrameStrutMouseEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleFrameStrutMouseEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|b
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|)
block|{
specifier|const
name|unsigned
name|long
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|handleFrameStrutMouseEvent
argument_list|(
name|w
argument_list|,
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|b
argument_list|,
name|mods
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleFrameStrutMouseEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleFrameStrutMouseEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|b
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|MouseEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|MouseEvent
argument_list|(
name|w
argument_list|,
name|timestamp
argument_list|,
name|QWindowSystemInterfacePrivate
operator|::
name|FrameStrutMouse
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|b
argument_list|,
name|mods
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tryHandleSynchronousShortcutEvent
name|bool
name|QWindowSystemInterface
operator|::
name|tryHandleSynchronousShortcutEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|int
name|k
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorep
parameter_list|,
name|ushort
name|count
parameter_list|)
block|{
name|unsigned
name|long
name|timestamp
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
return|return
name|tryHandleSynchronousShortcutEvent
argument_list|(
name|w
argument_list|,
name|timestamp
argument_list|,
name|k
argument_list|,
name|mods
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|tryHandleSynchronousShortcutEvent
name|bool
name|QWindowSystemInterface
operator|::
name|tryHandleSynchronousShortcutEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
name|int
name|k
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorep
parameter_list|,
name|ushort
name|count
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|QGuiApplicationPrivate
operator|::
name|modifier_buttons
operator|=
name|mods
expr_stmt|;
name|QKeyEvent
name|qevent
argument_list|(
name|QEvent
operator|::
name|ShortcutOverride
argument_list|,
name|k
argument_list|,
name|mods
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|qevent
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|QGuiApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|shortcutMap
operator|.
name|tryShortcutEvent
argument_list|(
name|w
argument_list|,
operator|&
name|qevent
argument_list|)
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|w
argument_list|)
name|Q_UNUSED
argument_list|(
argument|timestamp
argument_list|)
name|Q_UNUSED
argument_list|(
argument|k
argument_list|)
name|Q_UNUSED
argument_list|(
argument|mods
argument_list|)
name|Q_UNUSED
argument_list|(
argument|text
argument_list|)
name|Q_UNUSED
argument_list|(
argument|autorep
argument_list|)
name|Q_UNUSED
argument_list|(
argument|count
argument_list|)
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|tryHandleSynchronousExtendedShortcutEvent
name|bool
name|QWindowSystemInterface
operator|::
name|tryHandleSynchronousExtendedShortcutEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|int
name|k
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
name|quint32
name|nativeScanCode
parameter_list|,
name|quint32
name|nativeVirtualKey
parameter_list|,
name|quint32
name|nativeModifiers
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorep
parameter_list|,
name|ushort
name|count
parameter_list|)
block|{
name|unsigned
name|long
name|timestamp
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
return|return
name|tryHandleSynchronousExtendedShortcutEvent
argument_list|(
name|w
argument_list|,
name|timestamp
argument_list|,
name|k
argument_list|,
name|mods
argument_list|,
name|nativeScanCode
argument_list|,
name|nativeVirtualKey
argument_list|,
name|nativeModifiers
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|tryHandleSynchronousExtendedShortcutEvent
name|bool
name|QWindowSystemInterface
operator|::
name|tryHandleSynchronousExtendedShortcutEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
name|int
name|k
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
name|quint32
name|nativeScanCode
parameter_list|,
name|quint32
name|nativeVirtualKey
parameter_list|,
name|quint32
name|nativeModifiers
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorep
parameter_list|,
name|ushort
name|count
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|QGuiApplicationPrivate
operator|::
name|modifier_buttons
operator|=
name|mods
expr_stmt|;
name|QKeyEvent
name|qevent
argument_list|(
name|QEvent
operator|::
name|ShortcutOverride
argument_list|,
name|k
argument_list|,
name|mods
argument_list|,
name|nativeScanCode
argument_list|,
name|nativeVirtualKey
argument_list|,
name|nativeModifiers
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|qevent
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|QGuiApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|shortcutMap
operator|.
name|tryShortcutEvent
argument_list|(
name|w
argument_list|,
operator|&
name|qevent
argument_list|)
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|w
argument_list|)
name|Q_UNUSED
argument_list|(
argument|timestamp
argument_list|)
name|Q_UNUSED
argument_list|(
argument|k
argument_list|)
name|Q_UNUSED
argument_list|(
argument|mods
argument_list|)
name|Q_UNUSED
argument_list|(
argument|nativeScanCode
argument_list|)
name|Q_UNUSED
argument_list|(
argument|nativeVirtualKey
argument_list|)
name|Q_UNUSED
argument_list|(
argument|nativeModifiers
argument_list|)
name|Q_UNUSED
argument_list|(
argument|text
argument_list|)
name|Q_UNUSED
argument_list|(
argument|autorep
argument_list|)
name|Q_UNUSED
argument_list|(
argument|count
argument_list|)
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|handleKeyEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleKeyEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|QEvent
operator|::
name|Type
name|t
parameter_list|,
name|int
name|k
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorep
parameter_list|,
name|ushort
name|count
parameter_list|)
block|{
name|unsigned
name|long
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|handleKeyEvent
argument_list|(
name|w
argument_list|,
name|time
argument_list|,
name|t
argument_list|,
name|k
argument_list|,
name|mods
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleKeyEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleKeyEvent
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
name|QEvent
operator|::
name|Type
name|t
parameter_list|,
name|int
name|k
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorep
parameter_list|,
name|ushort
name|count
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|KeyEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|KeyEvent
argument_list|(
name|tlw
argument_list|,
name|timestamp
argument_list|,
name|t
argument_list|,
name|k
argument_list|,
name|mods
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleExtendedKeyEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleExtendedKeyEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|QEvent
operator|::
name|Type
name|type
parameter_list|,
name|int
name|key
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
name|quint32
name|nativeScanCode
parameter_list|,
name|quint32
name|nativeVirtualKey
parameter_list|,
name|quint32
name|nativeModifiers
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorep
parameter_list|,
name|ushort
name|count
parameter_list|)
block|{
name|unsigned
name|long
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|handleExtendedKeyEvent
argument_list|(
name|w
argument_list|,
name|time
argument_list|,
name|type
argument_list|,
name|key
argument_list|,
name|modifiers
argument_list|,
name|nativeScanCode
argument_list|,
name|nativeVirtualKey
argument_list|,
name|nativeModifiers
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleExtendedKeyEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleExtendedKeyEvent
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
name|QEvent
operator|::
name|Type
name|type
parameter_list|,
name|int
name|key
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
name|quint32
name|nativeScanCode
parameter_list|,
name|quint32
name|nativeVirtualKey
parameter_list|,
name|quint32
name|nativeModifiers
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorep
parameter_list|,
name|ushort
name|count
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|KeyEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|KeyEvent
argument_list|(
name|tlw
argument_list|,
name|timestamp
argument_list|,
name|type
argument_list|,
name|key
argument_list|,
name|modifiers
argument_list|,
name|nativeScanCode
argument_list|,
name|nativeVirtualKey
argument_list|,
name|nativeModifiers
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleWheelEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|int
name|d
parameter_list|,
name|Qt
operator|::
name|Orientation
name|o
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|)
block|{
name|unsigned
name|long
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|handleWheelEvent
argument_list|(
name|w
argument_list|,
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|d
argument_list|,
name|o
argument_list|,
name|mods
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleWheelEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|int
name|d
parameter_list|,
name|Qt
operator|::
name|Orientation
name|o
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|)
block|{
name|QPoint
name|point
init|=
operator|(
name|o
operator|==
name|Qt
operator|::
name|Vertical
operator|)
condition|?
name|QPoint
argument_list|(
literal|0
argument_list|,
name|d
argument_list|)
else|:
name|QPoint
argument_list|(
name|d
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|handleWheelEvent
argument_list|(
name|tlw
argument_list|,
name|timestamp
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|QPoint
argument_list|()
argument_list|,
name|point
argument_list|,
name|mods
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleWheelEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|QPoint
name|pixelDelta
parameter_list|,
name|QPoint
name|angleDelta
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|)
block|{
name|unsigned
name|long
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|handleWheelEvent
argument_list|(
name|w
argument_list|,
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|pixelDelta
argument_list|,
name|angleDelta
argument_list|,
name|mods
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleWheelEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|QPoint
name|pixelDelta
parameter_list|,
name|QPoint
name|angleDelta
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|)
block|{
comment|// Qt 4 sends two separate wheel events for horizontal and vertical
comment|// deltas. For Qt 5 we want to send the deltas in one event, but at the
comment|// same time preserve source and behavior compatibility with Qt 4.
comment|//
comment|// In addition high-resolution pixel-based deltas are also supported.
comment|// Platforms that does not support these may pass a null point here.
comment|// Angle deltas must always be sent in addition to pixel deltas.
name|QWindowSystemInterfacePrivate
operator|::
name|WheelEvent
modifier|*
name|e
decl_stmt|;
if|if
condition|(
name|angleDelta
operator|.
name|isNull
argument_list|()
condition|)
return|return;
comment|// Simple case: vertical deltas only:
if|if
condition|(
name|angleDelta
operator|.
name|y
argument_list|()
operator|!=
literal|0
operator|&&
name|angleDelta
operator|.
name|x
argument_list|()
operator|==
literal|0
condition|)
block|{
name|e
operator|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|WheelEvent
argument_list|(
name|tlw
argument_list|,
name|timestamp
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|pixelDelta
argument_list|,
name|angleDelta
argument_list|,
name|angleDelta
operator|.
name|y
argument_list|()
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|mods
argument_list|)
expr_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Simple case: horizontal deltas only:
if|if
condition|(
name|angleDelta
operator|.
name|y
argument_list|()
operator|==
literal|0
operator|&&
name|angleDelta
operator|.
name|x
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|e
operator|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|WheelEvent
argument_list|(
name|tlw
argument_list|,
name|timestamp
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|pixelDelta
argument_list|,
name|angleDelta
argument_list|,
name|angleDelta
operator|.
name|x
argument_list|()
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|mods
argument_list|)
expr_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Both horizontal and vertical deltas: Send two wheel events.
comment|// The first event contains the Qt 5 pixel and angle delta as points,
comment|// and in addition the Qt 4 compatibility vertical angle delta.
name|e
operator|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|WheelEvent
argument_list|(
name|tlw
argument_list|,
name|timestamp
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|pixelDelta
argument_list|,
name|angleDelta
argument_list|,
name|angleDelta
operator|.
name|y
argument_list|()
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|mods
argument_list|)
expr_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|// The second event contains null pixel and angle points and the
comment|// Qt 4 compatibility horizontal angle delta.
name|e
operator|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|WheelEvent
argument_list|(
name|tlw
argument_list|,
name|timestamp
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|QPoint
argument_list|()
argument_list|,
name|QPoint
argument_list|()
argument_list|,
name|angleDelta
operator|.
name|x
argument_list|()
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|mods
argument_list|)
expr_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|ExposeEvent
name|QWindowSystemInterfacePrivate
operator|::
name|ExposeEvent
operator|::
name|ExposeEvent
parameter_list|(
name|QWindow
modifier|*
name|exposed
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
member_init_list|:
name|WindowSystemEvent
argument_list|(
name|Expose
argument_list|)
member_init_list|,
name|exposed
argument_list|(
name|exposed
argument_list|)
member_init_list|,
name|isExposed
argument_list|(
name|exposed
operator|&&
name|exposed
operator|->
name|handle
argument_list|()
condition|?
name|exposed
operator|->
name|handle
argument_list|()
operator|->
name|isExposed
argument_list|()
else|:
literal|false
argument_list|)
member_init_list|,
name|region
argument_list|(
name|region
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|windowSystemEventsQueued
name|int
name|QWindowSystemInterfacePrivate
operator|::
name|windowSystemEventsQueued
parameter_list|()
block|{
return|return
name|windowSystemEventQueue
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getWindowSystemEvent
name|QWindowSystemInterfacePrivate
operator|::
name|WindowSystemEvent
modifier|*
name|QWindowSystemInterfacePrivate
operator|::
name|getWindowSystemEvent
parameter_list|()
block|{
return|return
name|windowSystemEventQueue
operator|.
name|takeFirstOrReturnNull
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|queueWindowSystemEvent
name|void
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
parameter_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|WindowSystemEvent
modifier|*
name|ev
parameter_list|)
block|{
name|windowSystemEventQueue
operator|.
name|append
argument_list|(
name|ev
argument_list|)
expr_stmt|;
name|QAbstractEventDispatcher
modifier|*
name|dispatcher
init|=
name|QGuiApplicationPrivate
operator|::
name|qt_qpa_core_dispatcher
argument_list|()
decl_stmt|;
if|if
condition|(
name|dispatcher
condition|)
name|dispatcher
operator|->
name|wakeUp
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|registerTouchDevice
name|void
name|QWindowSystemInterface
operator|::
name|registerTouchDevice
parameter_list|(
name|QTouchDevice
modifier|*
name|device
parameter_list|)
block|{
name|QTouchDevicePrivate
operator|::
name|registerDevice
argument_list|(
name|device
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTouchEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|QTouchDevice
modifier|*
name|device
parameter_list|,
specifier|const
name|QList
argument_list|<
name|TouchPoint
argument_list|>
modifier|&
name|points
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|)
block|{
name|unsigned
name|long
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|handleTouchEvent
argument_list|(
name|w
argument_list|,
name|time
argument_list|,
name|device
argument_list|,
name|points
argument_list|,
name|mods
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convertTouchPoints
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
name|QWindowSystemInterfacePrivate
operator|::
name|convertTouchPoints
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
modifier|&
name|points
parameter_list|,
name|QEvent
operator|::
name|Type
modifier|*
name|type
parameter_list|)
block|{
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
name|touchPoints
decl_stmt|;
name|Qt
operator|::
name|TouchPointStates
name|states
decl_stmt|;
name|QTouchEvent
operator|::
name|TouchPoint
name|p
decl_stmt|;
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
operator|::
name|const_iterator
name|point
init|=
name|points
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
operator|::
name|const_iterator
name|end
init|=
name|points
operator|.
name|constEnd
argument_list|()
decl_stmt|;
while|while
condition|(
name|point
operator|!=
name|end
condition|)
block|{
name|p
operator|.
name|setId
argument_list|(
name|point
operator|->
name|id
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPressure
argument_list|(
name|point
operator|->
name|pressure
argument_list|)
expr_stmt|;
name|states
operator||=
name|point
operator|->
name|state
expr_stmt|;
name|p
operator|.
name|setState
argument_list|(
name|point
operator|->
name|state
argument_list|)
expr_stmt|;
specifier|const
name|QPointF
name|screenPos
init|=
name|point
operator|->
name|area
operator|.
name|center
argument_list|()
decl_stmt|;
name|p
operator|.
name|setScreenPos
argument_list|(
name|screenPos
argument_list|)
expr_stmt|;
name|p
operator|.
name|setScreenRect
argument_list|(
name|point
operator|->
name|area
argument_list|)
expr_stmt|;
comment|// The local pos and rect are not set, they will be calculated
comment|// when the event gets processed by QGuiApplication.
name|p
operator|.
name|setNormalizedPos
argument_list|(
name|point
operator|->
name|normalPosition
argument_list|)
expr_stmt|;
name|p
operator|.
name|setVelocity
argument_list|(
name|point
operator|->
name|velocity
argument_list|)
expr_stmt|;
name|p
operator|.
name|setFlags
argument_list|(
name|point
operator|->
name|flags
argument_list|)
expr_stmt|;
name|p
operator|.
name|setRawScreenPositions
argument_list|(
name|point
operator|->
name|rawPositions
argument_list|)
expr_stmt|;
name|touchPoints
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
operator|++
name|point
expr_stmt|;
block|}
comment|// Determine the event type based on the combined point states.
if|if
condition|(
name|type
condition|)
block|{
operator|*
name|type
operator|=
name|QEvent
operator|::
name|TouchUpdate
expr_stmt|;
if|if
condition|(
name|states
operator|==
name|Qt
operator|::
name|TouchPointPressed
condition|)
operator|*
name|type
operator|=
name|QEvent
operator|::
name|TouchBegin
expr_stmt|;
elseif|else
if|if
condition|(
name|states
operator|==
name|Qt
operator|::
name|TouchPointReleased
condition|)
operator|*
name|type
operator|=
name|QEvent
operator|::
name|TouchEnd
expr_stmt|;
block|}
return|return
name|touchPoints
return|;
block|}
end_function
begin_function
DECL|function|handleTouchEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
name|QTouchDevice
modifier|*
name|device
parameter_list|,
specifier|const
name|QList
argument_list|<
name|TouchPoint
argument_list|>
modifier|&
name|points
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|)
block|{
if|if
condition|(
operator|!
name|points
operator|.
name|size
argument_list|()
condition|)
comment|// Touch events must have at least one point
return|return;
if|if
condition|(
operator|!
name|QTouchDevicePrivate
operator|::
name|isRegistered
argument_list|(
name|device
argument_list|)
condition|)
comment|// Disallow passing bogus, non-registered devices.
return|return;
name|QEvent
operator|::
name|Type
name|type
decl_stmt|;
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
name|touchPoints
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|convertTouchPoints
argument_list|(
name|points
argument_list|,
operator|&
name|type
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|TouchEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|TouchEvent
argument_list|(
name|tlw
argument_list|,
name|timestamp
argument_list|,
name|type
argument_list|,
name|device
argument_list|,
name|touchPoints
argument_list|,
name|mods
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTouchCancelEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTouchCancelEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|QTouchDevice
modifier|*
name|device
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|)
block|{
name|unsigned
name|long
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|handleTouchCancelEvent
argument_list|(
name|w
argument_list|,
name|time
argument_list|,
name|device
argument_list|,
name|mods
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTouchCancelEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTouchCancelEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
name|QTouchDevice
modifier|*
name|device
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|TouchEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|TouchEvent
argument_list|(
name|w
argument_list|,
name|timestamp
argument_list|,
name|QEvent
operator|::
name|TouchCancel
argument_list|,
name|device
argument_list|,
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
argument_list|()
argument_list|,
name|mods
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleScreenOrientationChange
name|void
name|QWindowSystemInterface
operator|::
name|handleScreenOrientationChange
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
name|Qt
operator|::
name|ScreenOrientation
name|orientation
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenOrientationEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenOrientationEvent
argument_list|(
name|screen
argument_list|,
name|orientation
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleScreenGeometryChange
name|void
name|QWindowSystemInterface
operator|::
name|handleScreenGeometryChange
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
specifier|const
name|QRect
modifier|&
name|geometry
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenGeometryEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenGeometryEvent
argument_list|(
name|screen
argument_list|,
name|geometry
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleScreenAvailableGeometryChange
name|void
name|QWindowSystemInterface
operator|::
name|handleScreenAvailableGeometryChange
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
specifier|const
name|QRect
modifier|&
name|availableGeometry
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenAvailableGeometryEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenAvailableGeometryEvent
argument_list|(
name|screen
argument_list|,
name|availableGeometry
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleScreenLogicalDotsPerInchChange
name|void
name|QWindowSystemInterface
operator|::
name|handleScreenLogicalDotsPerInchChange
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
name|qreal
name|dpiX
parameter_list|,
name|qreal
name|dpiY
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenLogicalDotsPerInchEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenLogicalDotsPerInchEvent
argument_list|(
name|screen
argument_list|,
name|dpiX
argument_list|,
name|dpiY
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleScreenRefreshRateChange
name|void
name|QWindowSystemInterface
operator|::
name|handleScreenRefreshRateChange
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
name|qreal
name|newRefreshRate
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenRefreshRateEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|ScreenRefreshRateEvent
argument_list|(
name|screen
argument_list|,
name|newRefreshRate
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleThemeChange
name|void
name|QWindowSystemInterface
operator|::
name|handleThemeChange
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|ThemeChangeEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|ThemeChangeEvent
argument_list|(
name|tlw
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleExposeEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|ExposeEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|ExposeEvent
argument_list|(
name|tlw
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleSynchronousExposeEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleSynchronousExposeEvent
parameter_list|(
name|QWindow
modifier|*
name|tlw
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
name|tlw
argument_list|,
name|region
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|flushWindowSystemEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|flushWindowSystemEvents
name|void
name|QWindowSystemInterface
operator|::
name|flushWindowSystemEvents
parameter_list|()
block|{
name|sendWindowSystemEventsImplementation
argument_list|(
name|QEventLoop
operator|::
name|AllEvents
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendWindowSystemEvents
name|bool
name|QWindowSystemInterface
operator|::
name|sendWindowSystemEvents
parameter_list|(
name|QEventLoop
operator|::
name|ProcessEventsFlags
name|flags
parameter_list|)
block|{
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|()
expr_stmt|;
comment|// handle gui and posted events
return|return
name|sendWindowSystemEventsImplementation
argument_list|(
name|flags
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|sendWindowSystemEventsImplementation
name|bool
name|QWindowSystemInterface
operator|::
name|sendWindowSystemEventsImplementation
parameter_list|(
name|QEventLoop
operator|::
name|ProcessEventsFlags
name|flags
parameter_list|)
block|{
name|int
name|nevents
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|WindowSystemEvent
modifier|*
name|event
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|QEventLoop
operator|::
name|ExcludeUserInputEvents
operator|)
operator|&&
name|QWindowSystemInterfacePrivate
operator|::
name|windowSystemEventsQueued
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// process a pending user input event
name|event
operator|=
name|QWindowSystemInterfacePrivate
operator|::
name|getWindowSystemEvent
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|event
condition|)
break|break;
block|}
else|else
block|{
break|break;
block|}
name|nevents
operator|++
expr_stmt|;
name|QGuiApplicationPrivate
operator|::
name|processWindowSystemEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
operator|delete
name|event
expr_stmt|;
block|}
return|return
operator|(
name|nevents
operator|>
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|windowSystemEventsQueued
name|int
name|QWindowSystemInterface
operator|::
name|windowSystemEventsQueued
parameter_list|()
block|{
return|return
name|QWindowSystemInterfacePrivate
operator|::
name|windowSystemEventsQueued
argument_list|()
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_function
DECL|function|handleDrag
name|QPlatformDragQtResponse
name|QWindowSystemInterface
operator|::
name|handleDrag
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|QMimeData
modifier|*
name|dropData
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|,
name|Qt
operator|::
name|DropActions
name|supportedActions
parameter_list|)
block|{
return|return
name|QGuiApplicationPrivate
operator|::
name|processDrag
argument_list|(
name|w
argument_list|,
name|dropData
argument_list|,
name|p
argument_list|,
name|supportedActions
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|handleDrop
name|QPlatformDropQtResponse
name|QWindowSystemInterface
operator|::
name|handleDrop
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|QMimeData
modifier|*
name|dropData
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|,
name|Qt
operator|::
name|DropActions
name|supportedActions
parameter_list|)
block|{
return|return
name|QGuiApplicationPrivate
operator|::
name|processDrop
argument_list|(
name|w
argument_list|,
name|dropData
argument_list|,
name|p
argument_list|,
name|supportedActions
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
begin_comment
comment|/*!     \fn static QWindowSystemInterface::handleNativeEvent(QWindow *window, const QByteArray&eventType, void *message, long *result)     \brief Passes a native event identified by \a eventType to the \a window.      \note This function can only be called from the GUI thread. */
end_comment
begin_function
DECL|function|handleNativeEvent
name|bool
name|QWindowSystemInterface
operator|::
name|handleNativeEvent
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|eventType
parameter_list|,
name|void
modifier|*
name|message
parameter_list|,
name|long
modifier|*
name|result
parameter_list|)
block|{
return|return
name|QGuiApplicationPrivate
operator|::
name|processNativeEvent
argument_list|(
name|window
argument_list|,
name|eventType
argument_list|,
name|message
argument_list|,
name|result
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|handleFileOpenEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleFileOpenEvent
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|FileOpenEvent
name|e
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QGuiApplicationPrivate
operator|::
name|processWindowSystemEvent
argument_list|(
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTabletEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTabletEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|ulong
name|timestamp
parameter_list|,
name|bool
name|down
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|int
name|device
parameter_list|,
name|int
name|pointerType
parameter_list|,
name|qreal
name|pressure
parameter_list|,
name|int
name|xTilt
parameter_list|,
name|int
name|yTilt
parameter_list|,
name|qreal
name|tangentialPressure
parameter_list|,
name|qreal
name|rotation
parameter_list|,
name|int
name|z
parameter_list|,
name|qint64
name|uid
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|TabletEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|TabletEvent
argument_list|(
name|w
argument_list|,
name|timestamp
argument_list|,
name|down
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|device
argument_list|,
name|pointerType
argument_list|,
name|pressure
argument_list|,
name|xTilt
argument_list|,
name|yTilt
argument_list|,
name|tangentialPressure
argument_list|,
name|rotation
argument_list|,
name|z
argument_list|,
name|uid
argument_list|,
name|modifiers
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTabletEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTabletEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|bool
name|down
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|int
name|device
parameter_list|,
name|int
name|pointerType
parameter_list|,
name|qreal
name|pressure
parameter_list|,
name|int
name|xTilt
parameter_list|,
name|int
name|yTilt
parameter_list|,
name|qreal
name|tangentialPressure
parameter_list|,
name|qreal
name|rotation
parameter_list|,
name|int
name|z
parameter_list|,
name|qint64
name|uid
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
block|{
name|ulong
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|handleTabletEvent
argument_list|(
name|w
argument_list|,
name|time
argument_list|,
name|down
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|device
argument_list|,
name|pointerType
argument_list|,
name|pressure
argument_list|,
name|xTilt
argument_list|,
name|yTilt
argument_list|,
name|tangentialPressure
argument_list|,
name|rotation
argument_list|,
name|z
argument_list|,
name|uid
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTabletEnterProximityEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTabletEnterProximityEvent
parameter_list|(
name|ulong
name|timestamp
parameter_list|,
name|int
name|device
parameter_list|,
name|int
name|pointerType
parameter_list|,
name|qint64
name|uid
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|TabletEnterProximityEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|TabletEnterProximityEvent
argument_list|(
name|timestamp
argument_list|,
name|device
argument_list|,
name|pointerType
argument_list|,
name|uid
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTabletEnterProximityEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTabletEnterProximityEvent
parameter_list|(
name|int
name|device
parameter_list|,
name|int
name|pointerType
parameter_list|,
name|qint64
name|uid
parameter_list|)
block|{
name|ulong
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|handleTabletEnterProximityEvent
argument_list|(
name|time
argument_list|,
name|device
argument_list|,
name|pointerType
argument_list|,
name|uid
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTabletLeaveProximityEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTabletLeaveProximityEvent
parameter_list|(
name|ulong
name|timestamp
parameter_list|,
name|int
name|device
parameter_list|,
name|int
name|pointerType
parameter_list|,
name|qint64
name|uid
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|TabletLeaveProximityEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|TabletLeaveProximityEvent
argument_list|(
name|timestamp
argument_list|,
name|device
argument_list|,
name|pointerType
argument_list|,
name|uid
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTabletLeaveProximityEvent
name|void
name|QWindowSystemInterface
operator|::
name|handleTabletLeaveProximityEvent
parameter_list|(
name|int
name|device
parameter_list|,
name|int
name|pointerType
parameter_list|,
name|qint64
name|uid
parameter_list|)
block|{
name|ulong
name|time
init|=
name|QWindowSystemInterfacePrivate
operator|::
name|eventTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|handleTabletLeaveProximityEvent
argument_list|(
name|time
argument_list|,
name|device
argument_list|,
name|pointerType
argument_list|,
name|uid
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handlePlatformPanelEvent
name|void
name|QWindowSystemInterface
operator|::
name|handlePlatformPanelEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|)
block|{
name|QWindowSystemInterfacePrivate
operator|::
name|PlatformPanelEvent
modifier|*
name|e
init|=
operator|new
name|QWindowSystemInterfacePrivate
operator|::
name|PlatformPanelEvent
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|queueWindowSystemEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_handleMouseEvent
name|Q_GUI_EXPORT
name|void
name|qt_handleMouseEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|local
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|global
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|b
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
init|=
name|Qt
operator|::
name|NoModifier
parameter_list|)
block|{
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
name|w
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|b
argument_list|,
name|mods
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_handleKeyEvent
name|Q_GUI_EXPORT
name|void
name|qt_handleKeyEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|QEvent
operator|::
name|Type
name|t
parameter_list|,
name|int
name|k
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
init|=
name|QString
argument_list|()
parameter_list|,
name|bool
name|autorep
init|=
literal|false
parameter_list|,
name|ushort
name|count
init|=
literal|1
parameter_list|)
block|{
name|QWindowSystemInterface
operator|::
name|handleKeyEvent
argument_list|(
name|w
argument_list|,
name|t
argument_list|,
name|k
argument_list|,
name|mods
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|touchPoint
specifier|static
name|QWindowSystemInterface
operator|::
name|TouchPoint
name|touchPoint
parameter_list|(
specifier|const
name|QTouchEvent
operator|::
name|TouchPoint
modifier|&
name|pt
parameter_list|)
block|{
name|QWindowSystemInterface
operator|::
name|TouchPoint
name|p
decl_stmt|;
name|p
operator|.
name|id
operator|=
name|pt
operator|.
name|id
argument_list|()
expr_stmt|;
name|p
operator|.
name|flags
operator|=
name|pt
operator|.
name|flags
argument_list|()
expr_stmt|;
name|p
operator|.
name|normalPosition
operator|=
name|pt
operator|.
name|normalizedPos
argument_list|()
expr_stmt|;
name|p
operator|.
name|area
operator|=
name|pt
operator|.
name|screenRect
argument_list|()
expr_stmt|;
name|p
operator|.
name|pressure
operator|=
name|pt
operator|.
name|pressure
argument_list|()
expr_stmt|;
name|p
operator|.
name|state
operator|=
name|pt
operator|.
name|state
argument_list|()
expr_stmt|;
name|p
operator|.
name|velocity
operator|=
name|pt
operator|.
name|velocity
argument_list|()
expr_stmt|;
name|p
operator|.
name|rawPositions
operator|=
name|pt
operator|.
name|rawScreenPositions
argument_list|()
expr_stmt|;
return|return
name|p
return|;
block|}
end_function
begin_function
DECL|function|touchPointList
specifier|static
name|QList
argument_list|<
expr|struct
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
name|touchPointList
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
modifier|&
name|pointList
parameter_list|)
block|{
name|QList
argument_list|<
expr|struct
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
name|newList
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|QTouchEvent::TouchPoint p
argument_list|,
argument|pointList
argument_list|)
block|{
name|newList
operator|.
name|append
argument_list|(
name|touchPoint
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|newList
return|;
block|}
end_function
begin_function
DECL|function|qt_handleTouchEvent
name|Q_GUI_EXPORT
name|void
name|qt_handleTouchEvent
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|QTouchDevice
modifier|*
name|device
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
modifier|&
name|points
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
init|=
name|Qt
operator|::
name|NoModifier
parameter_list|)
block|{
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|w
argument_list|,
name|device
argument_list|,
name|touchPointList
argument_list|(
name|points
argument_list|)
argument_list|,
name|mods
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
