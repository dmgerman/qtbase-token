begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QINPUTMETHOD_H
end_ifndef
begin_define
DECL|macro|QINPUTMETHOD_H
define|#
directive|define
name|QINPUTMETHOD_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qobject.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QInputMethodPrivate
name|class
name|QInputMethodPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWindow
name|class
name|QWindow
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QRectF
name|class
name|QRectF
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTransform
name|class
name|QTransform
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QInputMethodQueryEvent
name|class
name|QInputMethodQueryEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QInputMethod
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QInputMethod
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QRectF cursorRectangle READ cursorRectangle NOTIFY cursorRectangleChanged
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QRectF anchorRectangle READ anchorRectangle NOTIFY anchorRectangleChanged
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QRectF keyboardRectangle READ keyboardRectangle NOTIFY keyboardRectangleChanged
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool visible READ isVisible NOTIFY visibleChanged
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool animating READ isAnimating NOTIFY animatingChanged
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QLocale locale READ locale NOTIFY localeChanged
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|Qt::LayoutDirection inputDirection READ inputDirection NOTIFY inputDirectionChanged
argument_list|)
name|public
operator|:
name|QTransform
name|inputItemTransform
argument_list|()
specifier|const
block|;
name|void
name|setInputItemTransform
argument_list|(
specifier|const
name|QTransform
operator|&
name|transform
argument_list|)
block|;
name|QRectF
name|inputItemRectangle
argument_list|()
specifier|const
block|;
name|void
name|setInputItemRectangle
argument_list|(
specifier|const
name|QRectF
operator|&
name|rect
argument_list|)
block|;
comment|// in window coordinates
name|QRectF
name|cursorRectangle
argument_list|()
specifier|const
block|;
comment|// ### what if we have rotations for the item?
name|QRectF
name|anchorRectangle
argument_list|()
specifier|const
block|;
comment|// ### ditto
comment|// keyboard geometry in window coords
name|QRectF
name|keyboardRectangle
argument_list|()
specifier|const
block|;      enum
name|Action
block|{
name|Click
block|,
name|ContextMenu
block|}
block|;
name|Q_ENUM
argument_list|(
argument|Action
argument_list|)
name|bool
name|isVisible
argument_list|()
specifier|const
block|;
name|void
name|setVisible
argument_list|(
argument|bool visible
argument_list|)
block|;
name|bool
name|isAnimating
argument_list|()
specifier|const
block|;
name|QLocale
name|locale
argument_list|()
specifier|const
block|;
name|Qt
operator|::
name|LayoutDirection
name|inputDirection
argument_list|()
specifier|const
block|;
specifier|static
name|QVariant
name|queryFocusObject
argument_list|(
argument|Qt::InputMethodQuery query
argument_list|,
argument|QVariant argument
argument_list|)
block|;
comment|// ### Qt 6: QVariant by const-ref
name|public
name|Q_SLOTS
operator|:
name|void
name|show
argument_list|()
block|;
name|void
name|hide
argument_list|()
block|;
name|void
name|update
argument_list|(
argument|Qt::InputMethodQueries queries
argument_list|)
block|;
name|void
name|reset
argument_list|()
block|;
name|void
name|commit
argument_list|()
block|;
name|void
name|invokeAction
argument_list|(
argument|Action a
argument_list|,
argument|int cursorPosition
argument_list|)
block|;
name|Q_SIGNALS
operator|:
name|void
name|cursorRectangleChanged
argument_list|()
block|;
name|void
name|anchorRectangleChanged
argument_list|()
block|;
name|void
name|keyboardRectangleChanged
argument_list|()
block|;
name|void
name|visibleChanged
argument_list|()
block|;
name|void
name|animatingChanged
argument_list|()
block|;
name|void
name|localeChanged
argument_list|()
block|;
name|void
name|inputDirectionChanged
argument_list|(
argument|Qt::LayoutDirection newDirection
argument_list|)
block|;
name|private
operator|:
name|friend
name|class
name|QGuiApplication
block|;
name|friend
name|class
name|QGuiApplicationPrivate
block|;
name|friend
name|class
name|QPlatformInputContext
block|;
name|QInputMethod
argument_list|()
block|;
operator|~
name|QInputMethod
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
