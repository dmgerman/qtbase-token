begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsound.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SOUND
end_ifndef
begin_include
include|#
directive|include
file|"qhash.h"
end_include
begin_include
include|#
directive|include
file|"qsocketnotifier.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qsound_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_NAS
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|<audio/audiolib.h>
include|#
directive|include
file|<audio/soundlib.h>
name|QT_END_INCLUDE_NAMESPACE
DECL|variable|nas
specifier|static
name|AuServer
modifier|*
name|nas
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|eventPred
specifier|static
name|AuBool
name|eventPred
parameter_list|(
name|AuServer
modifier|*
parameter_list|,
name|AuEvent
modifier|*
name|e
parameter_list|,
name|AuPointer
name|p
parameter_list|)
block|{
if|if
condition|(
name|e
operator|&&
operator|(
name|e
operator|->
name|type
operator|==
name|AuEventTypeElementNotify
operator|)
condition|)
block|{
if|if
condition|(
name|e
operator|->
name|auelementnotify
operator|.
name|flow
operator|==
operator|*
operator|(
operator|(
name|AuFlowID
operator|*
operator|)
name|p
operator|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_class
DECL|class|QAuBucketNAS
class|class
name|QAuBucketNAS
super|:
specifier|public
name|QAuBucket
block|{
public|public:
DECL|function|QAuBucketNAS
name|QAuBucketNAS
parameter_list|(
name|AuBucketID
name|b
parameter_list|,
name|AuFlowID
name|f
init|=
literal|0
parameter_list|)
member_init_list|:
name|id
argument_list|(
name|b
argument_list|)
member_init_list|,
name|flow
argument_list|(
name|f
argument_list|)
member_init_list|,
name|stopped
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|numplaying
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|~QAuBucketNAS
name|~
name|QAuBucketNAS
parameter_list|()
block|{
if|if
condition|(
name|nas
condition|)
block|{
name|AuSync
argument_list|(
name|nas
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|AuDestroyBucket
argument_list|(
name|nas
argument_list|,
name|id
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|AuEvent
name|ev
decl_stmt|;
while|while
condition|(
name|AuScanEvents
argument_list|(
name|nas
argument_list|,
name|AuEventsQueuedAfterFlush
argument_list|,
literal|true
argument_list|,
name|eventPred
argument_list|,
operator|&
name|flow
argument_list|,
operator|&
name|ev
argument_list|)
condition|)
empty_stmt|;
block|}
block|}
DECL|member|id
name|AuBucketID
name|id
decl_stmt|;
DECL|member|flow
name|AuFlowID
name|flow
decl_stmt|;
DECL|member|stopped
name|bool
name|stopped
decl_stmt|;
DECL|member|numplaying
name|int
name|numplaying
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QAuServerNAS
class|class
name|QAuServerNAS
super|:
specifier|public
name|QAuServer
block|{
name|Q_OBJECT
DECL|member|sn
name|QSocketNotifier
modifier|*
name|sn
decl_stmt|;
public|public:
name|QAuServerNAS
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
constructor_decl|;
name|~
name|QAuServerNAS
parameter_list|()
destructor_decl|;
name|void
name|init
parameter_list|(
name|QSound
modifier|*
parameter_list|)
function_decl|;
name|void
name|play
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|)
function_decl|;
name|void
name|play
parameter_list|(
name|QSound
modifier|*
parameter_list|)
function_decl|;
name|void
name|stop
parameter_list|(
name|QSound
modifier|*
parameter_list|)
function_decl|;
name|bool
name|okay
parameter_list|()
function_decl|;
name|void
name|setDone
parameter_list|(
name|QSound
modifier|*
parameter_list|)
function_decl|;
public|public
name|slots
public|:
name|void
name|dataReceived
parameter_list|()
function_decl|;
name|void
name|soundDestroyed
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|)
function_decl|;
private|private:
DECL|function|bucket
name|QAuBucketNAS
modifier|*
name|bucket
parameter_list|(
name|QSound
modifier|*
name|s
parameter_list|)
block|{
return|return
operator|(
name|QAuBucketNAS
operator|*
operator|)
name|QAuServer
operator|::
name|bucket
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_constructor
DECL|function|QAuServerNAS
name|QAuServerNAS
operator|::
name|QAuServerNAS
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAuServer
argument_list|(
name|parent
argument_list|)
block|{
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"Network Audio System"
argument_list|)
argument_list|)
expr_stmt|;
name|nas
operator|=
name|AuOpenServer
argument_list|(
name|NULL
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|nas
condition|)
block|{
name|AuSetCloseDownMode
argument_list|(
name|nas
argument_list|,
name|AuCloseDownDestroy
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
comment|// Ask Qt for async messages...
name|sn
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|AuServerConnectionNumber
argument_list|(
name|nas
argument_list|)
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|sn
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|dataReceived
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sn
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QAuServerNAS
name|QAuServerNAS
operator|::
name|~
name|QAuServerNAS
parameter_list|()
block|{
if|if
condition|(
name|nas
condition|)
name|AuCloseServer
argument_list|(
name|nas
argument_list|)
expr_stmt|;
operator|delete
name|sn
expr_stmt|;
name|nas
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_typedef
DECL|typedef|AuServerHash
typedef|typedef
name|QHash
argument_list|<
name|void
modifier|*
argument_list|,
name|QAuServerNAS
modifier|*
argument_list|>
name|AuServerHash
typedef|;
end_typedef
begin_decl_stmt
DECL|variable|inprogress
specifier|static
name|AuServerHash
modifier|*
name|inprogress
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|soundDestroyed
name|void
name|QAuServerNAS
operator|::
name|soundDestroyed
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|)
block|{
if|if
condition|(
name|inprogress
condition|)
block|{
name|QSound
modifier|*
name|so
init|=
cast|static_cast
argument_list|<
name|QSound
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
decl_stmt|;
while|while
condition|(
name|inprogress
operator|->
name|remove
argument_list|(
name|so
argument_list|)
condition|)
empty_stmt|;
comment|// Loop while remove returns true
block|}
block|}
end_function
begin_function
DECL|function|play
name|void
name|QAuServerNAS
operator|::
name|play
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|)
block|{
if|if
condition|(
name|nas
condition|)
block|{
name|int
name|iv
init|=
literal|100
decl_stmt|;
name|AuFixedPoint
name|volume
init|=
name|AuFixedPointFromFraction
argument_list|(
name|iv
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|AuSoundPlayFromFile
argument_list|(
name|nas
argument_list|,
name|filename
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|AuNone
argument_list|,
name|volume
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|AuFlush
argument_list|(
name|nas
argument_list|)
expr_stmt|;
name|dataReceived
argument_list|()
expr_stmt|;
name|AuFlush
argument_list|(
name|nas
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|callback
specifier|static
name|void
name|callback
parameter_list|(
name|AuServer
modifier|*
parameter_list|,
name|AuEventHandlerRec
modifier|*
parameter_list|,
name|AuEvent
modifier|*
name|e
parameter_list|,
name|AuPointer
name|p
parameter_list|)
block|{
if|if
condition|(
name|inprogress
operator|->
name|contains
argument_list|(
name|p
argument_list|)
operator|&&
name|e
condition|)
block|{
if|if
condition|(
name|e
operator|->
name|type
operator|==
name|AuEventTypeElementNotify
operator|&&
name|e
operator|->
name|auelementnotify
operator|.
name|kind
operator|==
name|AuElementNotifyKindState
condition|)
block|{
if|if
condition|(
name|e
operator|->
name|auelementnotify
operator|.
name|cur_state
operator|==
name|AuStateStop
condition|)
block|{
name|AuServerHash
operator|::
name|Iterator
name|it
init|=
name|inprogress
operator|->
name|find
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|inprogress
operator|->
name|end
argument_list|()
condition|)
operator|(
operator|*
name|it
operator|)
operator|->
name|setDone
argument_list|(
operator|(
name|QSound
operator|*
operator|)
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|setDone
name|void
name|QAuServerNAS
operator|::
name|setDone
parameter_list|(
name|QSound
modifier|*
name|s
parameter_list|)
block|{
if|if
condition|(
name|nas
condition|)
block|{
name|decLoop
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|->
name|loopsRemaining
argument_list|()
operator|&&
operator|!
name|bucket
argument_list|(
name|s
argument_list|)
operator|->
name|stopped
condition|)
block|{
name|bucket
argument_list|(
name|s
argument_list|)
operator|->
name|stopped
operator|=
literal|true
expr_stmt|;
name|play
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|--
operator|(
name|bucket
argument_list|(
name|s
argument_list|)
operator|->
name|numplaying
operator|)
operator|==
literal|0
condition|)
name|bucket
argument_list|(
name|s
argument_list|)
operator|->
name|stopped
operator|=
literal|true
expr_stmt|;
name|inprogress
operator|->
name|remove
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|play
name|void
name|QAuServerNAS
operator|::
name|play
parameter_list|(
name|QSound
modifier|*
name|s
parameter_list|)
block|{
if|if
condition|(
name|nas
condition|)
block|{
operator|++
operator|(
name|bucket
argument_list|(
name|s
argument_list|)
operator|->
name|numplaying
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|bucket
argument_list|(
name|s
argument_list|)
operator|->
name|stopped
condition|)
block|{
name|stop
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|bucket
argument_list|(
name|s
argument_list|)
operator|->
name|stopped
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|inprogress
condition|)
name|inprogress
operator|=
operator|new
name|AuServerHash
expr_stmt|;
name|inprogress
operator|->
name|insert
argument_list|(
name|s
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|int
name|iv
init|=
literal|100
decl_stmt|;
name|AuFixedPoint
name|volume
init|=
name|AuFixedPointFromFraction
argument_list|(
name|iv
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|QAuBucketNAS
modifier|*
name|b
init|=
name|bucket
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|AuSoundPlayFromBucket
argument_list|(
name|nas
argument_list|,
name|b
operator|->
name|id
argument_list|,
name|AuNone
argument_list|,
name|volume
argument_list|,
name|callback
argument_list|,
name|s
argument_list|,
literal|0
argument_list|,
operator|&
name|b
operator|->
name|flow
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|AuFlush
argument_list|(
name|nas
argument_list|)
expr_stmt|;
name|dataReceived
argument_list|()
expr_stmt|;
name|AuFlush
argument_list|(
name|nas
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|stop
name|void
name|QAuServerNAS
operator|::
name|stop
parameter_list|(
name|QSound
modifier|*
name|s
parameter_list|)
block|{
if|if
condition|(
name|nas
operator|&&
operator|!
name|bucket
argument_list|(
name|s
argument_list|)
operator|->
name|stopped
condition|)
block|{
name|bucket
argument_list|(
name|s
argument_list|)
operator|->
name|stopped
operator|=
literal|true
expr_stmt|;
name|AuStopFlow
argument_list|(
name|nas
argument_list|,
name|bucket
argument_list|(
name|s
argument_list|)
operator|->
name|flow
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|AuFlush
argument_list|(
name|nas
argument_list|)
expr_stmt|;
name|dataReceived
argument_list|()
expr_stmt|;
name|AuFlush
argument_list|(
name|nas
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|init
name|void
name|QAuServerNAS
operator|::
name|init
parameter_list|(
name|QSound
modifier|*
name|s
parameter_list|)
block|{
name|connect
argument_list|(
name|s
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|soundDestroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|nas
condition|)
block|{
name|AuBucketID
name|b_id
init|=
name|AuSoundCreateBucketFromFile
argument_list|(
name|nas
argument_list|,
name|s
operator|->
name|fileName
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|0
comment|/*AuAccessAllMasks*/
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|setBucket
argument_list|(
name|s
argument_list|,
operator|new
name|QAuBucketNAS
argument_list|(
name|b_id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|okay
name|bool
name|QAuServerNAS
operator|::
name|okay
parameter_list|()
block|{
return|return
operator|!
operator|!
name|nas
return|;
block|}
end_function
begin_function
DECL|function|dataReceived
name|void
name|QAuServerNAS
operator|::
name|dataReceived
parameter_list|()
block|{
name|AuHandleEvents
argument_list|(
name|nas
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|"qsound_x11.moc"
name|QT_END_INCLUDE_NAMESPACE
endif|#
directive|endif
DECL|class|QAuServerNull
name|class
name|QAuServerNull
operator|:
specifier|public
name|QAuServer
block|{
specifier|public
operator|:
name|QAuServerNull
argument_list|(
name|QObject
operator|*
name|parent
argument_list|)
block|;
DECL|function|play
name|void
name|play
argument_list|(
argument|const QString&
argument_list|)
block|{ }
DECL|function|play
name|void
name|play
argument_list|(
argument|QSound*s
argument_list|)
block|{
while|while
condition|(
name|decLoop
argument_list|(
name|s
argument_list|)
operator|>
literal|0
condition|)
comment|/* nothing */
empty_stmt|;
block|}
DECL|function|stop
name|void
name|stop
argument_list|(
argument|QSound*
argument_list|)
block|{ }
DECL|function|okay
name|bool
name|okay
argument_list|()
block|{
return|return
literal|false
return|;
block|}
end_expr_stmt
begin_constructor
DECL|function|okay
unit|};
DECL|function|QAuServerNull
name|QAuServerNull
operator|::
name|QAuServerNull
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAuServer
argument_list|(
name|parent
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|qt_new_audio_server
name|QAuServer
modifier|*
name|qt_new_audio_server
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_NAS
name|QAuServer
modifier|*
name|s
init|=
operator|new
name|QAuServerNAS
argument_list|(
name|qApp
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|->
name|okay
argument_list|()
condition|)
return|return
name|s
return|;
else|else
operator|delete
name|s
expr_stmt|;
endif|#
directive|endif
return|return
operator|new
name|QAuServerNull
argument_list|(
name|qApp
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SOUND
end_comment
end_unit
