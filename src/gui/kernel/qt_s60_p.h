begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_S60_P_H
end_ifndef
begin_define
DECL|macro|QT_S60_P_H
define|#
directive|define
name|QT_S60_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtGui/qwindowdefs.h"
end_include
begin_include
include|#
directive|include
file|"private/qcore_symbian_p.h"
end_include
begin_include
include|#
directive|include
file|"qhash.h"
end_include
begin_include
include|#
directive|include
file|"qpoint.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qfont.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qimage.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qevent.h"
end_include
begin_include
include|#
directive|include
file|"qpointer.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qelapsedtimer.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qthreadstorage.h"
end_include
begin_include
include|#
directive|include
file|"qwidget_p.h"
end_include
begin_include
include|#
directive|include
file|<w32std.h>
end_include
begin_include
include|#
directive|include
file|<coecntrl.h>
end_include
begin_include
include|#
directive|include
file|<eikenv.h>
end_include
begin_include
include|#
directive|include
file|<eikappui.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_S60
end_ifdef
begin_include
include|#
directive|include
file|<AknUtils.h>
end_include
begin_comment
comment|// AknLayoutUtils
end_comment
begin_include
include|#
directive|include
file|<avkon.hrh>
end_include
begin_comment
comment|// EEikStatusPaneUidTitle
end_comment
begin_include
include|#
directive|include
file|<akntitle.h>
end_include
begin_comment
comment|// CAknTitlePane
end_comment
begin_include
include|#
directive|include
file|<akncontext.h>
end_include
begin_comment
comment|// CAknContextPane
end_comment
begin_include
include|#
directive|include
file|<eikspane.h>
end_include
begin_comment
comment|// CEikStatusPane
end_comment
begin_include
include|#
directive|include
file|<AknPopupFader.h>
end_include
begin_comment
comment|// MAknFadedComponent and TAknPopupFader
end_comment
begin_include
include|#
directive|include
file|<gfxtranseffect/gfxtranseffect.h>
end_include
begin_comment
comment|// BeginFullScreen
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_SYMBIAN_HAVE_AKNTRANSEFFECT_H
end_ifdef
begin_include
include|#
directive|include
file|<akntranseffect.h>
end_include
begin_comment
comment|// BeginFullScreen
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// Application internal HandleResourceChangeL events,
comment|// system events seems to start with 0x10
DECL|variable|KInternalStatusPaneChange
specifier|const
name|TInt
name|KInternalStatusPaneChange
init|=
literal|0x50000000
decl_stmt|;
end_decl_stmt
begin_comment
comment|// For BeginFullScreen().
end_comment
begin_decl_stmt
DECL|variable|KQtAppExitFlag
specifier|const
name|TUint
name|KQtAppExitFlag
init|=
literal|0x400
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_symbian_max_screens
specifier|static
specifier|const
name|int
name|qt_symbian_max_screens
init|=
literal|4
decl_stmt|;
end_decl_stmt
begin_comment
comment|//this macro exists because EColor16MAP enum value doesn't exist in Symbian OS 9.2
end_comment
begin_define
DECL|macro|Q_SYMBIAN_ECOLOR16MAP
define|#
directive|define
name|Q_SYMBIAN_ECOLOR16MAP
value|TDisplayMode(13)
end_define
begin_decl_stmt
DECL|variable|QSymbianTypeFaceExtras
name|class
name|QSymbianTypeFaceExtras
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|QString
DECL|typedef|QSymbianTypeFaceExtrasHash
typedef|typedef
name|QHash
operator|<
name|QString
operator|,
specifier|const
name|QSymbianTypeFaceExtras
operator|*
operator|>
name|QSymbianTypeFaceExtrasHash
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QThreadLocalReleaseFunc
typedef|typedef
name|void
function_decl|(
modifier|*
name|QThreadLocalReleaseFunc
function_decl|)
parameter_list|()
function_decl|;
end_typedef
begin_decl_stmt
name|class
name|Q_AUTOTEST_EXPORT
name|QS60ThreadLocalData
block|{
name|public
label|:
name|QS60ThreadLocalData
argument_list|()
expr_stmt|;
operator|~
name|QS60ThreadLocalData
argument_list|()
expr_stmt|;
name|bool
name|usingCONEinstances
decl_stmt|;
name|RWsSession
name|wsSession
decl_stmt|;
name|CWsScreenDevice
modifier|*
name|screenDevice
decl_stmt|;
name|QSymbianTypeFaceExtrasHash
name|fontData
decl_stmt|;
name|QVector
operator|<
name|QThreadLocalReleaseFunc
operator|>
name|releaseFuncs
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|QS60Data
block|{
name|public
label|:
name|QS60Data
argument_list|()
expr_stmt|;
name|QThreadStorage
operator|<
name|QS60ThreadLocalData
operator|*
operator|>
name|tls
expr_stmt|;
name|TUid
name|uid
decl_stmt|;
name|int
name|screenDepth
decl_stmt|;
name|QPoint
name|lastCursorPos
decl_stmt|;
name|QPoint
name|lastPointerEventPos
decl_stmt|;
name|QPointer
operator|<
name|QWidget
operator|>
name|lastPointerEventTarget
expr_stmt|;
name|QPointer
operator|<
name|QWidget
operator|>
name|mousePressTarget
expr_stmt|;
name|int
name|screenWidthInPixels
decl_stmt|;
name|int
name|screenHeightInPixels
decl_stmt|;
name|int
name|screenWidthInTwips
decl_stmt|;
name|int
name|screenHeightInTwips
decl_stmt|;
name|int
name|defaultDpiX
decl_stmt|;
name|int
name|defaultDpiY
decl_stmt|;
name|WId
name|curWin
decl_stmt|;
enum|enum
name|PressedKeys
block|{
name|Select
init|=
literal|0x1
block|,
name|Right
init|=
literal|0x2
block|,
name|Down
init|=
literal|0x4
block|,
name|Left
init|=
literal|0x8
block|,
name|Up
init|=
literal|0x10
block|,
name|LeftUp
init|=
literal|0x20
block|,
name|RightUp
init|=
literal|0x40
block|,
name|RightDown
init|=
literal|0x80
block|,
name|LeftDown
init|=
literal|0x100
block|}
enum|;
name|int
name|virtualMousePressedKeys
decl_stmt|;
comment|// of the above type, but avoids casting problems
name|int
name|virtualMouseAccelDX
decl_stmt|;
name|int
name|virtualMouseAccelDY
decl_stmt|;
name|QElapsedTimer
name|virtualMouseAccelTimeout
decl_stmt|;
name|int
name|virtualMouseMaxAccel
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_SYMBIAN_FIXED_POINTER_CURSORS
name|int
name|brokenPointerCursors
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
name|int
name|hasTouchscreen
range|:
literal|1
decl_stmt|;
name|int
name|mouseInteractionEnabled
range|:
literal|1
decl_stmt|;
name|int
name|virtualMouseRequired
range|:
literal|1
decl_stmt|;
name|int
name|qtOwnsS60Environment
range|:
literal|1
decl_stmt|;
name|int
name|supportsPremultipliedAlpha
range|:
literal|1
decl_stmt|;
name|int
name|avkonComponentsSupportTransparency
range|:
literal|1
decl_stmt|;
name|int
name|menuBeingConstructed
range|:
literal|1
decl_stmt|;
name|int
name|orientationSet
range|:
literal|1
decl_stmt|;
name|int
name|partial_keyboard
range|:
literal|1
decl_stmt|;
name|QApplication
operator|::
name|QS60MainApplicationFactory
name|s60ApplicationFactory
expr_stmt|;
comment|// typedef'ed pointer type
name|QPointer
operator|<
name|QWidget
operator|>
name|splitViewLastWidget
expr_stmt|;
specifier|static
name|CEikButtonGroupContainer
modifier|*
name|cba
decl_stmt|;
enum|enum
name|ScanCodeState
block|{
name|Unpressed
block|,
name|KeyDown
block|,
name|KeyDownAndKey
block|}
enum|;
name|QHash
operator|<
name|TInt
operator|,
name|ScanCodeState
operator|>
name|scanCodeStates
expr_stmt|;
specifier|static
specifier|inline
name|void
name|updateScreenSize
parameter_list|()
function_decl|;
specifier|inline
name|RWsSession
modifier|&
name|wsSession
parameter_list|()
function_decl|;
specifier|static
specifier|inline
name|int
name|screenCount
parameter_list|()
function_decl|;
specifier|static
specifier|inline
name|RWindowGroup
modifier|&
name|windowGroup
parameter_list|()
function_decl|;
specifier|static
specifier|inline
name|RWindowGroup
modifier|&
name|windowGroup
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|RWindowGroup
modifier|&
name|windowGroup
parameter_list|(
name|int
name|screenNumber
parameter_list|)
function_decl|;
specifier|inline
name|CWsScreenDevice
modifier|*
name|screenDevice
parameter_list|()
function_decl|;
specifier|inline
name|CWsScreenDevice
modifier|*
name|screenDevice
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
function_decl|;
specifier|inline
name|CWsScreenDevice
modifier|*
name|screenDevice
parameter_list|(
name|int
name|screenNumber
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|int
name|screenNumberForWidget
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
function_decl|;
specifier|inline
name|QSymbianTypeFaceExtrasHash
modifier|&
name|fontData
parameter_list|()
function_decl|;
specifier|inline
name|void
name|addThreadLocalReleaseFunc
parameter_list|(
name|QThreadLocalReleaseFunc
name|func
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|CCoeAppUi
modifier|*
name|appUi
parameter_list|()
function_decl|;
specifier|static
specifier|inline
name|CEikMenuBar
modifier|*
name|menuBar
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|Q_WS_S60
specifier|static
specifier|inline
name|CEikStatusPane
modifier|*
name|statusPane
parameter_list|()
function_decl|;
specifier|static
specifier|inline
name|CCoeControl
modifier|*
name|statusPaneSubPane
parameter_list|(
name|TInt
name|aPaneId
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|CAknTitlePane
modifier|*
name|titlePane
parameter_list|()
function_decl|;
specifier|static
specifier|inline
name|CAknContextPane
modifier|*
name|contextPane
parameter_list|()
function_decl|;
specifier|static
specifier|inline
name|CEikButtonGroupContainer
modifier|*
name|buttonGroupContainer
parameter_list|()
function_decl|;
specifier|static
specifier|inline
name|void
name|setButtonGroupContainer
parameter_list|(
name|CEikButtonGroupContainer
modifier|*
name|newCba
parameter_list|)
function_decl|;
specifier|static
name|void
name|setStatusPaneAndButtonGroupVisibility
parameter_list|(
name|bool
name|statusPaneVisible
parameter_list|,
name|bool
name|buttonGroupVisible
parameter_list|)
function_decl|;
specifier|static
name|bool
name|setRecursiveDecorationsVisibility
argument_list|(
name|QWidget
operator|*
name|window
argument_list|,
name|Qt
operator|::
name|WindowStates
name|newState
argument_list|)
decl_stmt|;
endif|#
directive|endif
specifier|static
name|void
name|controlVisibilityChanged
parameter_list|(
name|CCoeControl
modifier|*
name|control
parameter_list|,
name|bool
name|visible
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|TTrapHandler
modifier|*
name|s60InstalledTrapHandler
decl_stmt|;
endif|#
directive|endif
name|int
name|screenWidthInPixelsForScreen
index|[
name|qt_symbian_max_screens
index|]
decl_stmt|;
name|int
name|screenHeightInPixelsForScreen
index|[
name|qt_symbian_max_screens
index|]
decl_stmt|;
name|int
name|screenWidthInTwipsForScreen
index|[
name|qt_symbian_max_screens
index|]
decl_stmt|;
name|int
name|screenHeightInTwipsForScreen
index|[
name|qt_symbian_max_screens
index|]
decl_stmt|;
name|int
name|nativeScreenWidthInPixels
decl_stmt|;
name|int
name|nativeScreenHeightInPixels
decl_stmt|;
name|int
name|beginFullScreenCalled
range|:
literal|1
decl_stmt|;
name|int
name|endFullScreenCalled
range|:
literal|1
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_function_decl
name|Q_AUTOTEST_EXPORT
name|QS60Data
modifier|*
name|qGlobalS60Data
parameter_list|()
function_decl|;
end_function_decl
begin_define
DECL|macro|S60
define|#
directive|define
name|S60
value|qGlobalS60Data()
end_define
begin_decl_stmt
name|class
name|QAbstractLongTapObserver
block|{
name|public
label|:
name|virtual
name|void
name|HandleLongTapEventL
parameter_list|(
specifier|const
name|TPoint
modifier|&
name|aPenEventLocation
parameter_list|,
specifier|const
name|TPoint
modifier|&
name|aPenEventScreenLocation
parameter_list|)
init|=
literal|0
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
DECL|variable|QLongTapTimer
name|class
name|QLongTapTimer
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|CCoeControl
DECL|variable|QAbstractLongTapObserver
name|class
name|QSymbianControl
range|:
name|public
name|CCoeControl
decl_stmt|,
name|public
name|QAbstractLongTapObserver
ifdef|#
directive|ifdef
name|Q_WS_S60
decl_stmt|,
DECL|variable|MAknFadedComponent
name|public
name|MAknFadedComponent
decl_stmt|,
name|public
name|MEikStatusPaneObserver
endif|#
directive|endif
block|{
name|public
label|:
name|DECLARE_TYPE_ID
argument_list|(
literal|0x51740000
argument_list|)
comment|// Fun fact: the two first values are "Qt" in ASCII.
name|public
label|:
name|QSymbianControl
argument_list|(
name|QWidget
operator|*
name|w
argument_list|)
expr_stmt|;
name|void
name|ConstructL
parameter_list|(
name|bool
name|isWindowOwning
init|=
name|false
parameter_list|,
name|bool
name|desktop
init|=
name|false
parameter_list|)
function_decl|;
operator|~
name|QSymbianControl
argument_list|()
expr_stmt|;
name|void
name|HandleResourceChange
parameter_list|(
name|int
name|resourceType
parameter_list|)
function_decl|;
name|void
name|HandlePointerEventL
parameter_list|(
specifier|const
name|TPointerEvent
modifier|&
name|aPointerEvent
parameter_list|)
function_decl|;
name|TKeyResponse
name|OfferKeyEventL
parameter_list|(
specifier|const
name|TKeyEvent
modifier|&
name|aKeyEvent
parameter_list|,
name|TEventCode
name|aType
parameter_list|)
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_IM
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
name|TCoeInputCapabilities
name|InputCapabilities
argument_list|()
specifier|const
expr_stmt|;
endif|#
directive|endif
name|TTypeUid
operator|::
name|Ptr
name|MopSupplyObject
argument_list|(
argument|TTypeUid id
argument_list|)
expr_stmt|;
specifier|inline
name|QWidget
operator|*
name|widget
argument_list|()
specifier|const
block|{
return|return
name|qwidget
return|;
block|}
name|void
name|setWidget
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
function_decl|;
name|void
name|sendInputEvent
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QInputEvent
modifier|*
name|inputEvent
parameter_list|)
function_decl|;
name|void
name|setIgnoreFocusChanged
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
name|m_ignoreFocusChanged
operator|=
name|enabled
expr_stmt|;
block|}
name|void
name|CancelLongTapTimer
parameter_list|()
function_decl|;
name|void
name|setFocusSafely
parameter_list|(
name|bool
name|focus
parameter_list|)
function_decl|;
name|bool
name|isControlActive
parameter_list|()
function_decl|;
name|void
name|ensureFixNativeOrientation
parameter_list|()
function_decl|;
name|QPoint
name|translatePointForFixedNativeOrientation
argument_list|(
specifier|const
name|TPoint
operator|&
name|pointerEventPos
argument_list|)
decl|const
decl_stmt|;
name|TRect
name|translateRectForFixedNativeOrientation
argument_list|(
specifier|const
name|TRect
operator|&
name|controlRect
argument_list|)
decl|const
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_S60
name|void
name|FadeBehindPopup
parameter_list|(
name|bool
name|fade
parameter_list|)
block|{
name|popupFader
operator|.
name|FadeBehindPopup
argument_list|(
name|this
argument_list|,
name|this
argument_list|,
name|fade
argument_list|)
expr_stmt|;
block|}
name|void
name|HandleStatusPaneSizeChange
parameter_list|()
function_decl|;
name|protected
label|:
comment|// from MAknFadedComponent
name|TInt
name|CountFadedComponents
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
name|CCoeControl
modifier|*
name|FadedComponent
parameter_list|(
name|TInt
comment|/*aIndex*/
parameter_list|)
block|{
return|return
name|this
return|;
block|}
else|#
directive|else
comment|// #warning No fallback implementation for QSymbianControl::FadeBehindPopup
name|void
name|FadeBehindPopup
parameter_list|(
name|bool
comment|/*fade*/
parameter_list|)
block|{ }
endif|#
directive|endif
name|protected
label|:
name|void
name|Draw
argument_list|(
specifier|const
name|TRect
operator|&
name|aRect
argument_list|)
decl|const
decl_stmt|;
name|void
name|SizeChanged
parameter_list|()
function_decl|;
name|void
name|PositionChanged
parameter_list|()
function_decl|;
name|void
name|FocusChanged
parameter_list|(
name|TDrawNow
name|aDrawNow
parameter_list|)
function_decl|;
name|protected
label|:
name|void
name|qwidgetResize_helper
parameter_list|(
specifier|const
name|QSize
modifier|&
name|newSize
parameter_list|)
function_decl|;
name|private
label|:
name|void
name|HandlePointerEvent
parameter_list|(
specifier|const
name|TPointerEvent
modifier|&
name|aPointerEvent
parameter_list|)
function_decl|;
name|TKeyResponse
name|OfferKeyEvent
parameter_list|(
specifier|const
name|TKeyEvent
modifier|&
name|aKeyEvent
parameter_list|,
name|TEventCode
name|aType
parameter_list|)
function_decl|;
name|TKeyResponse
name|sendSymbianKeyEvent
argument_list|(
specifier|const
name|TKeyEvent
operator|&
name|keyEvent
argument_list|,
name|QEvent
operator|::
name|Type
name|type
argument_list|)
decl_stmt|;
name|TKeyResponse
name|sendKeyEvent
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QKeyEvent
modifier|*
name|keyEvent
parameter_list|)
function_decl|;
name|TKeyResponse
name|handleVirtualMouse
parameter_list|(
specifier|const
name|TKeyEvent
modifier|&
name|keyEvent
parameter_list|,
name|TEventCode
name|type
parameter_list|)
function_decl|;
name|bool
name|sendMouseEvent
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QMouseEvent
modifier|*
name|mEvent
parameter_list|)
function_decl|;
name|void
name|sendMouseEvent
argument_list|(
name|QWidget
operator|*
name|receiver
argument_list|,
name|QEvent
operator|::
name|Type
name|type
argument_list|,
specifier|const
name|QPoint
operator|&
name|globalPos
argument_list|,
name|Qt
operator|::
name|MouseButton
name|button
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
argument_list|)
decl_stmt|;
name|void
name|processTouchEvent
argument_list|(
name|int
name|pointerNumber
argument_list|,
name|TPointerEvent
operator|::
name|TType
name|type
argument_list|,
name|QPointF
name|screenPos
argument_list|,
name|qreal
name|pressure
argument_list|)
decl_stmt|;
name|void
name|HandleLongTapEventL
parameter_list|(
specifier|const
name|TPoint
modifier|&
name|aPenEventLocation
parameter_list|,
specifier|const
name|TPoint
modifier|&
name|aPenEventScreenLocation
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|QT_SYMBIAN_SUPPORTS_ADVANCED_POINTER
name|void
name|translateAdvancedPointerEvent
parameter_list|(
specifier|const
name|TAdvancedPointerEvent
modifier|*
name|event
parameter_list|)
function_decl|;
endif|#
directive|endif
name|bool
name|isSplitViewWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
function_decl|;
name|public
label|:
name|void
name|handleClientAreaChange
parameter_list|()
function_decl|;
name|private
label|:
specifier|static
name|QSymbianControl
modifier|*
name|lastFocusedControl
decl_stmt|;
name|private
label|:
name|QWidget
modifier|*
name|qwidget
decl_stmt|;
name|QLongTapTimer
modifier|*
name|m_longTapDetector
decl_stmt|;
name|QElapsedTimer
name|m_doubleClickTimer
decl_stmt|;
name|bool
name|m_ignoreFocusChanged
range|:
literal|1
decl_stmt|;
name|bool
name|m_symbianPopupIsOpen
range|:
literal|1
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_S60
comment|// Fader object used to fade everything except this menu and the CBA.
name|TAknPopupFader
name|popupFader
decl_stmt|;
endif|#
directive|endif
name|bool
name|m_inExternalScreenOverride
range|:
literal|1
decl_stmt|;
name|bool
name|m_lastStatusPaneVisibility
range|:
literal|1
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
DECL|function|QS60Data
specifier|inline
name|QS60Data
operator|::
name|QS60Data
argument_list|()
operator|:
name|uid
argument_list|(
name|TUid
operator|::
name|Null
argument_list|()
argument_list|)
operator|,
name|screenDepth
argument_list|(
literal|0
argument_list|)
operator|,
name|screenWidthInPixels
argument_list|(
literal|0
argument_list|)
operator|,
name|screenHeightInPixels
argument_list|(
literal|0
argument_list|)
operator|,
name|screenWidthInTwips
argument_list|(
literal|0
argument_list|)
operator|,
name|screenHeightInTwips
argument_list|(
literal|0
argument_list|)
operator|,
name|defaultDpiX
argument_list|(
literal|0
argument_list|)
operator|,
name|defaultDpiY
argument_list|(
literal|0
argument_list|)
operator|,
name|curWin
argument_list|(
literal|0
argument_list|)
operator|,
name|virtualMousePressedKeys
argument_list|(
literal|0
argument_list|)
operator|,
name|virtualMouseAccelDX
argument_list|(
literal|0
argument_list|)
operator|,
name|virtualMouseAccelDY
argument_list|(
literal|0
argument_list|)
operator|,
name|virtualMouseMaxAccel
argument_list|(
literal|0
argument_list|)
operator|,
ifndef|#
directive|ifndef
name|Q_SYMBIAN_FIXED_POINTER_CURSORS
name|brokenPointerCursors
argument_list|(
literal|0
argument_list|)
operator|,
endif|#
directive|endif
name|hasTouchscreen
argument_list|(
literal|0
argument_list|)
operator|,
name|mouseInteractionEnabled
argument_list|(
literal|0
argument_list|)
operator|,
name|virtualMouseRequired
argument_list|(
literal|0
argument_list|)
operator|,
name|qtOwnsS60Environment
argument_list|(
literal|0
argument_list|)
operator|,
name|supportsPremultipliedAlpha
argument_list|(
literal|0
argument_list|)
operator|,
name|avkonComponentsSupportTransparency
argument_list|(
literal|0
argument_list|)
operator|,
name|menuBeingConstructed
argument_list|(
literal|0
argument_list|)
operator|,
name|orientationSet
argument_list|(
literal|0
argument_list|)
operator|,
name|partial_keyboard
argument_list|(
literal|0
argument_list|)
operator|,
name|s60ApplicationFactory
argument_list|(
literal|0
argument_list|)
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
operator|,
name|s60InstalledTrapHandler
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
operator|,
name|beginFullScreenCalled
argument_list|(
literal|0
argument_list|)
operator|,
name|endFullScreenCalled
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|updateScreenSize
specifier|inline
name|void
name|QS60Data
operator|::
name|updateScreenSize
argument_list|()
block|{
name|CWsScreenDevice
operator|*
name|dev
operator|=
name|S60
operator|->
name|screenDevice
argument_list|()
block|;
name|int
name|screenModeCount
operator|=
name|dev
operator|->
name|NumScreenModes
argument_list|()
block|;
name|int
name|mode
operator|=
name|dev
operator|->
name|CurrentScreenMode
argument_list|()
block|;
name|TPixelsTwipsAndRotation
name|params
block|;
name|dev
operator|->
name|GetScreenModeSizeAndRotation
argument_list|(
name|mode
argument_list|,
name|params
argument_list|)
block|;
name|S60
operator|->
name|screenWidthInPixels
operator|=
name|params
operator|.
name|iPixelSize
operator|.
name|iWidth
block|;
name|S60
operator|->
name|screenHeightInPixels
operator|=
name|params
operator|.
name|iPixelSize
operator|.
name|iHeight
block|;
name|S60
operator|->
name|screenWidthInTwips
operator|=
name|params
operator|.
name|iTwipsSize
operator|.
name|iWidth
block|;
name|S60
operator|->
name|screenHeightInTwips
operator|=
name|params
operator|.
name|iTwipsSize
operator|.
name|iHeight
block|;
name|S60
operator|->
name|virtualMouseMaxAccel
operator|=
name|qMax
argument_list|(
name|S60
operator|->
name|screenHeightInPixels
argument_list|,
name|S60
operator|->
name|screenWidthInPixels
argument_list|)
operator|/
literal|10
block|;
name|TReal
name|inches
operator|=
name|S60
operator|->
name|screenHeightInTwips
operator|/
operator|(
name|TReal
operator|)
name|KTwipsPerInch
block|;
name|S60
operator|->
name|defaultDpiY
operator|=
name|S60
operator|->
name|screenHeightInPixels
operator|/
name|inches
block|;
name|inches
operator|=
name|S60
operator|->
name|screenWidthInTwips
operator|/
operator|(
name|TReal
operator|)
name|KTwipsPerInch
block|;
name|S60
operator|->
name|defaultDpiX
operator|=
name|S60
operator|->
name|screenWidthInPixels
operator|/
name|inches
block|;
name|int
name|screens
operator|=
name|S60
operator|->
name|screenCount
argument_list|()
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|screens
condition|;
operator|++
name|i
control|)
block|{
name|CWsScreenDevice
modifier|*
name|dev
init|=
name|S60
operator|->
name|screenDevice
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|mode
operator|=
name|dev
operator|->
name|CurrentScreenMode
argument_list|()
expr_stmt|;
name|dev
operator|->
name|GetScreenModeSizeAndRotation
argument_list|(
name|mode
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|S60
operator|->
name|screenWidthInPixelsForScreen
index|[
name|i
index|]
operator|=
name|params
operator|.
name|iPixelSize
operator|.
name|iWidth
expr_stmt|;
name|S60
operator|->
name|screenHeightInPixelsForScreen
index|[
name|i
index|]
operator|=
name|params
operator|.
name|iPixelSize
operator|.
name|iHeight
expr_stmt|;
name|S60
operator|->
name|screenWidthInTwipsForScreen
index|[
name|i
index|]
operator|=
name|params
operator|.
name|iTwipsSize
operator|.
name|iWidth
expr_stmt|;
name|S60
operator|->
name|screenHeightInTwipsForScreen
index|[
name|i
index|]
operator|=
name|params
operator|.
name|iTwipsSize
operator|.
name|iHeight
expr_stmt|;
block|}
end_expr_stmt
begin_comment
comment|// Look for a screen mode with rotation 0
end_comment
begin_comment
comment|// in order to decide what the native orientation is.
end_comment
begin_for
for|for
control|(
name|mode
operator|=
literal|0
init|;
name|mode
operator|<
name|screenModeCount
condition|;
operator|++
name|mode
control|)
block|{
name|TPixelsAndRotation
name|sizeAndRotation
decl_stmt|;
name|dev
operator|->
name|GetScreenModeSizeAndRotation
argument_list|(
name|mode
argument_list|,
name|sizeAndRotation
argument_list|)
expr_stmt|;
if|if
condition|(
name|sizeAndRotation
operator|.
name|iRotation
operator|==
name|CFbsBitGc
operator|::
name|EGraphicsOrientationNormal
condition|)
block|{
name|S60
operator|->
name|nativeScreenWidthInPixels
operator|=
name|sizeAndRotation
operator|.
name|iPixelSize
operator|.
name|iWidth
expr_stmt|;
name|S60
operator|->
name|nativeScreenHeightInPixels
operator|=
name|sizeAndRotation
operator|.
name|iPixelSize
operator|.
name|iHeight
expr_stmt|;
break|break;
block|}
block|}
end_for
begin_expr_stmt
unit|}  inline
DECL|function|wsSession
name|RWsSession
operator|&
name|QS60Data
operator|::
name|wsSession
argument_list|()
block|{
if|if
condition|(
operator|!
name|tls
operator|.
name|hasLocalData
argument_list|()
condition|)
block|{
name|tls
operator|.
name|setLocalData
argument_list|(
argument|new QS60ThreadLocalData
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|tls
operator|.
name|localData
argument_list|()
operator|->
name|wsSession
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|screenCount
name|int
name|QS60Data
operator|::
name|screenCount
argument_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_SYMBIAN_SUPPORTS_MULTIPLE_SCREENS
argument_list|)
name|CCoeEnv
operator|*
name|env
operator|=
name|CCoeEnv
operator|::
name|Static
argument_list|()
block|;
if|if
condition|(
name|env
condition|)
block|{
return|return
name|qMin
argument_list|(
name|env
operator|->
name|WsSession
argument_list|()
operator|.
name|NumberOfScreens
argument_list|()
argument_list|,
name|qt_symbian_max_screens
argument_list|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_return
return|return
literal|1
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|windowGroup
name|RWindowGroup
operator|&
name|QS60Data
operator|::
name|windowGroup
argument_list|()
block|{
return|return
name|CCoeEnv
operator|::
name|Static
argument_list|()
operator|->
name|RootWin
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|windowGroup
specifier|inline
name|RWindowGroup
operator|&
name|QS60Data
operator|::
name|windowGroup
argument_list|(
argument|const QWidget *widget
argument_list|)
block|{
return|return
name|windowGroup
argument_list|(
name|screenNumberForWidget
argument_list|(
name|widget
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|windowGroup
specifier|inline
name|RWindowGroup
operator|&
name|QS60Data
operator|::
name|windowGroup
argument_list|(
argument|int screenNumber
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_SYMBIAN_SUPPORTS_MULTIPLE_SCREENS
argument_list|)
name|RWindowGroup
operator|*
name|wg
operator|=
name|CCoeEnv
operator|::
name|Static
argument_list|()
operator|->
name|RootWin
argument_list|(
name|screenNumber
argument_list|)
block|;
return|return
name|wg
condition|?
operator|*
name|wg
else|:
name|windowGroup
argument_list|()
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|screenNumber
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|windowGroup
argument_list|()
return|;
end_return
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|}  inline
DECL|function|screenDevice
name|CWsScreenDevice
operator|*
name|QS60Data
operator|::
name|screenDevice
argument_list|()
block|{
if|if
condition|(
operator|!
name|tls
operator|.
name|hasLocalData
argument_list|()
condition|)
block|{
name|tls
operator|.
name|setLocalData
argument_list|(
argument|new QS60ThreadLocalData
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|tls
operator|.
name|localData
argument_list|()
operator|->
name|screenDevice
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|screenDevice
name|CWsScreenDevice
operator|*
name|QS60Data
operator|::
name|screenDevice
argument_list|(
argument|const QWidget *widget
argument_list|)
block|{
return|return
name|screenDevice
argument_list|(
name|screenNumberForWidget
argument_list|(
name|widget
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|screenDevice
specifier|inline
name|CWsScreenDevice
operator|*
name|QS60Data
operator|::
name|screenDevice
argument_list|(
argument|int screenNumber
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_SYMBIAN_SUPPORTS_MULTIPLE_SCREENS
argument_list|)
name|CCoeEnv
operator|*
name|env
operator|=
name|CCoeEnv
operator|::
name|Static
argument_list|()
block|;
if|if
condition|(
name|env
condition|)
block|{
name|CWsScreenDevice
modifier|*
name|dev
init|=
name|env
operator|->
name|ScreenDevice
argument_list|(
name|screenNumber
argument_list|)
decl_stmt|;
return|return
name|dev
condition|?
name|dev
else|:
name|screenDevice
argument_list|()
return|;
block|}
end_expr_stmt
begin_else
else|else
block|{
return|return
name|screenDevice
argument_list|()
return|;
block|}
end_else
begin_else
else|#
directive|else
end_else
begin_return
return|return
name|screenDevice
argument_list|()
return|;
end_return
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|}  inline
DECL|function|screenNumberForWidget
name|int
name|QS60Data
operator|::
name|screenNumberForWidget
argument_list|(
argument|const QWidget *widget
argument_list|)
block|{
if|if
condition|(
operator|!
name|widget
condition|)
return|return
literal|0
return|;
specifier|const
name|QWidget
operator|*
name|w
operator|=
name|widget
expr_stmt|;
end_expr_stmt
begin_while
while|while
condition|(
name|w
operator|->
name|parentWidget
argument_list|()
condition|)
name|w
operator|=
name|w
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
end_while
begin_return
return|return
name|qt_widget_private
argument_list|(
name|const_cast
operator|<
name|QWidget
operator|*
operator|>
operator|(
name|w
operator|)
argument_list|)
operator|->
name|symbianScreenNumber
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|fontData
name|QSymbianTypeFaceExtrasHash
operator|&
name|QS60Data
operator|::
name|fontData
argument_list|()
block|{
if|if
condition|(
operator|!
name|tls
operator|.
name|hasLocalData
argument_list|()
condition|)
block|{
name|tls
operator|.
name|setLocalData
argument_list|(
argument|new QS60ThreadLocalData
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|tls
operator|.
name|localData
argument_list|()
operator|->
name|fontData
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|addThreadLocalReleaseFunc
name|void
name|QS60Data
operator|::
name|addThreadLocalReleaseFunc
argument_list|(
argument|QThreadLocalReleaseFunc func
argument_list|)
block|{
if|if
condition|(
operator|!
name|tls
operator|.
name|hasLocalData
argument_list|()
condition|)
block|{
name|tls
operator|.
name|setLocalData
argument_list|(
argument|new QS60ThreadLocalData
argument_list|)
expr_stmt|;
block|}
name|QS60ThreadLocalData
operator|*
name|data
operator|=
name|tls
operator|.
name|localData
argument_list|()
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
operator|!
name|data
operator|->
name|releaseFuncs
operator|.
name|contains
argument_list|(
name|func
argument_list|)
condition|)
name|data
operator|->
name|releaseFuncs
operator|.
name|append
argument_list|(
name|func
argument_list|)
expr_stmt|;
end_if
begin_expr_stmt
unit|}  inline
DECL|function|appUi
name|CCoeAppUi
operator|*
name|QS60Data
operator|::
name|appUi
argument_list|()
block|{
return|return
name|CCoeEnv
operator|::
name|Static
argument_list|()
operator|->
name|AppUi
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|menuBar
specifier|inline
name|CEikMenuBar
operator|*
name|QS60Data
operator|::
name|menuBar
argument_list|()
block|{
return|return
name|CEikonEnv
operator|::
name|Static
argument_list|()
operator|->
name|AppUiFactory
argument_list|()
operator|->
name|MenuBar
argument_list|()
return|;
block|}
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_S60
end_ifdef
begin_expr_stmt
DECL|function|statusPane
specifier|inline
name|CEikStatusPane
operator|*
name|QS60Data
operator|::
name|statusPane
argument_list|()
block|{
return|return
name|CEikonEnv
operator|::
name|Static
argument_list|()
operator|->
name|AppUiFactory
argument_list|()
operator|->
name|StatusPane
argument_list|()
return|;
block|}
end_expr_stmt
begin_comment
comment|// Returns the application's status pane control, if not present returns NULL.
end_comment
begin_expr_stmt
DECL|function|statusPaneSubPane
specifier|inline
name|CCoeControl
operator|*
name|QS60Data
operator|::
name|statusPaneSubPane
argument_list|(
argument|TInt aPaneId
argument_list|)
block|{
specifier|const
name|TUid
name|paneUid
operator|=
block|{
name|aPaneId
block|}
block|;
name|CEikStatusPane
operator|*
name|statusPane
operator|=
name|S60
operator|->
name|statusPane
argument_list|()
block|;
if|if
condition|(
name|statusPane
operator|&&
name|statusPane
operator|->
name|PaneCapabilities
argument_list|(
name|paneUid
argument_list|)
operator|.
name|IsPresent
argument_list|()
condition|)
block|{
name|CCoeControl
modifier|*
name|control
init|=
name|NULL
decl_stmt|;
comment|// ControlL shouldn't leave because the pane is present
name|TRAPD
argument_list|(
name|err
argument_list|,
name|control
operator|=
name|statusPane
operator|->
name|ControlL
argument_list|(
name|paneUid
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|err
operator|!=
name|KErrNone
condition|?
name|NULL
else|:
name|control
return|;
block|}
end_expr_stmt
begin_return
return|return
name|NULL
return|;
end_return
begin_comment
unit|}
comment|// Returns the application's title pane, if not present returns NULL.
end_comment
begin_expr_stmt
unit|inline
DECL|function|titlePane
name|CAknTitlePane
operator|*
name|QS60Data
operator|::
name|titlePane
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|CAknTitlePane
operator|*
operator|>
operator|(
name|S60
operator|->
name|statusPaneSubPane
argument_list|(
name|EEikStatusPaneUidTitle
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_comment
comment|// Returns the application's title pane, if not present returns NULL.
end_comment
begin_expr_stmt
DECL|function|contextPane
specifier|inline
name|CAknContextPane
operator|*
name|QS60Data
operator|::
name|contextPane
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|CAknContextPane
operator|*
operator|>
operator|(
name|S60
operator|->
name|statusPaneSubPane
argument_list|(
name|EEikStatusPaneUidContext
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|buttonGroupContainer
specifier|inline
name|CEikButtonGroupContainer
operator|*
name|QS60Data
operator|::
name|buttonGroupContainer
argument_list|()
block|{
return|return
name|QS60Data
operator|::
name|cba
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|setButtonGroupContainer
specifier|inline
name|void
name|QS60Data
operator|::
name|setButtonGroupContainer
argument_list|(
argument|CEikButtonGroupContainer *newCba
argument_list|)
block|{
name|QS60Data
operator|::
name|cba
operator|=
name|newCba
block|; }
endif|#
directive|endif
comment|// Q_WS_S60
DECL|function|qt_TFontSpec2QFontL
specifier|static
specifier|inline
name|QFont
name|qt_TFontSpec2QFontL
argument_list|(
argument|const TFontSpec&fontSpec
argument_list|)
block|{
return|return
name|QFont
argument_list|(
name|qt_TDesC2QString
argument_list|(
name|fontSpec
operator|.
name|iTypeface
operator|.
name|iName
argument_list|)
argument_list|,
name|fontSpec
operator|.
name|iHeight
operator|/
name|KTwipsPerPoint
argument_list|,
name|fontSpec
operator|.
name|iFontStyle
operator|.
name|StrokeWeight
argument_list|()
operator|==
name|EStrokeWeightNormal
operator|?
name|QFont
operator|::
name|Normal
operator|:
name|QFont
operator|::
name|Bold
argument_list|,
name|fontSpec
operator|.
name|iFontStyle
operator|.
name|Posture
argument_list|()
operator|==
name|EPostureItalic
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|qt_TDisplayMode2Format
specifier|static
specifier|inline
name|QImage
operator|::
name|Format
name|qt_TDisplayMode2Format
argument_list|(
argument|TDisplayMode mode
argument_list|)
block|{
name|QImage
operator|::
name|Format
name|format
block|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|EGray2
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_MonoLSB
expr_stmt|;
break|break;
case|case
name|EColor256
case|:
case|case
name|EGray256
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_Indexed8
expr_stmt|;
break|break;
case|case
name|EColor4K
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_RGB444
expr_stmt|;
break|break;
case|case
name|EColor64K
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_RGB16
expr_stmt|;
break|break;
case|case
name|EColor16M
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_RGB888
expr_stmt|;
break|break;
case|case
name|EColor16MU
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
break|break;
case|case
name|EColor16MA
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_ARGB32
expr_stmt|;
break|break;
case|case
name|Q_SYMBIAN_ECOLOR16MAP
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
expr_stmt|;
break|break;
default|default:
name|format
operator|=
name|QImage
operator|::
name|Format_Invalid
expr_stmt|;
break|break;
block|}
end_expr_stmt
begin_return
return|return
name|format
return|;
end_return
begin_ifndef
unit|}
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_expr_stmt
unit|void
name|qt_symbian_setWindowCursor
argument_list|(
specifier|const
name|QCursor
operator|&
name|cursor
argument_list|,
specifier|const
name|CCoeControl
operator|*
name|wid
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|qt_symbian_setWindowGroupCursor
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|,
name|RWindowTreeNode
modifier|&
name|node
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|qt_symbian_setGlobalCursor
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|qt_symbian_set_cursor_visible
parameter_list|(
name|bool
name|visible
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|qt_symbian_is_cursor_visible
parameter_list|()
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qt_beginFullScreenEffect
specifier|static
specifier|inline
name|bool
name|qt_beginFullScreenEffect
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_SYMBIAN_HAVE_AKNTRANSEFFECT_H
argument_list|)
comment|// Only for post-S^3. On earlier versions the system transition effects
comment|// may not be able to capture the non-Avkon content, leading to confusing
comment|// looking effects, so just skip the whole thing.
if|if
condition|(
name|S60
operator|->
name|beginFullScreenCalled
operator|||
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|<=
name|QSysInfo
operator|::
name|SV_S60_5_2
condition|)
return|return
name|false
return|;
name|S60
operator|->
name|beginFullScreenCalled
operator|=
name|true
expr_stmt|;
comment|// For Avkon apps the app-exit effect is triggered from CAknAppUi::PrepareToExit().
comment|// That is good for Avkon apps, but in case of Qt the RWindows are destroyed earlier.
comment|// Therefore we call BeginFullScreen() ourselves.
name|GfxTransEffect
operator|::
name|BeginFullScreen
argument_list|(
name|AknTransEffect
operator|::
name|EApplicationExit
argument_list|,
name|TRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|AknTransEffect
operator|::
name|EParameterType
argument_list|,
name|AknTransEffect
operator|::
name|GfxTransParam
argument_list|(
name|S60
operator|->
name|uid
argument_list|,
name|AknTransEffect
operator|::
name|TParameter
operator|::
name|EAvkonCheck
operator||
name|KQtAppExitFlag
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|true
return|;
else|#
directive|else
return|return
name|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|qt_abortFullScreenEffect
specifier|static
specifier|inline
name|void
name|qt_abortFullScreenEffect
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_SYMBIAN_HAVE_AKNTRANSEFFECT_H
argument_list|)
if|if
condition|(
operator|!
name|S60
operator|->
name|beginFullScreenCalled
operator|||
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|<=
name|QSysInfo
operator|::
name|SV_S60_5_2
condition|)
return|return;
name|GfxTransEffect
operator|::
name|AbortFullScreen
argument_list|()
expr_stmt|;
name|S60
operator|->
name|beginFullScreenCalled
operator|=
name|S60
operator|->
name|endFullScreenCalled
operator|=
name|false
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|qt_endFullScreenEffect
specifier|static
specifier|inline
name|void
name|qt_endFullScreenEffect
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_SYMBIAN_HAVE_AKNTRANSEFFECT_H
argument_list|)
if|if
condition|(
name|S60
operator|->
name|endFullScreenCalled
operator|||
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|<=
name|QSysInfo
operator|::
name|SV_S60_5_2
condition|)
return|return;
name|S60
operator|->
name|endFullScreenCalled
operator|=
name|true
expr_stmt|;
name|GfxTransEffect
operator|::
name|EndFullScreen
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_S60_P_H
end_comment
end_unit
