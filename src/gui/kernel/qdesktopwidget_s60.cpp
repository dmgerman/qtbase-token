begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"qwidget_p.h"
end_include
begin_include
include|#
directive|include
file|"qt_s60_p.h"
end_include
begin_include
include|#
directive|include
file|<w32std.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_SYMBIAN_SUPPORTS_MULTIPLE_SCREENS
argument_list|)
end_if
begin_include
include|#
directive|include
file|<graphics/displaycontrol.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
specifier|extern
name|int
name|qt_symbian_create_desktop_on_screen
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QSingleDesktopWidget
class|class
name|QSingleDesktopWidget
super|:
specifier|public
name|QWidget
block|{
public|public:
name|QSingleDesktopWidget
parameter_list|()
constructor_decl|;
name|~
name|QSingleDesktopWidget
parameter_list|()
destructor_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|QSingleDesktopWidget
name|QSingleDesktopWidget
operator|::
name|QSingleDesktopWidget
parameter_list|()
member_init_list|:
name|QWidget
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Desktop
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QSingleDesktopWidget
name|QSingleDesktopWidget
operator|::
name|~
name|QSingleDesktopWidget
parameter_list|()
block|{
specifier|const
name|QObjectList
modifier|&
name|childList
init|=
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|childList
operator|.
name|size
argument_list|()
init|;
name|i
operator|>
literal|0
condition|;
control|)
block|{
operator|--
name|i
expr_stmt|;
name|childList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_destructor
begin_class
DECL|class|QDesktopWidgetPrivate
class|class
name|QDesktopWidgetPrivate
super|:
specifier|public
name|QWidgetPrivate
block|{
public|public:
name|QDesktopWidgetPrivate
parameter_list|()
constructor_decl|;
name|~
name|QDesktopWidgetPrivate
parameter_list|()
destructor_decl|;
specifier|static
name|void
name|init
parameter_list|(
name|QDesktopWidget
modifier|*
name|that
parameter_list|)
function_decl|;
specifier|static
name|void
name|cleanup
parameter_list|()
function_decl|;
specifier|static
name|void
name|init_sys
parameter_list|()
function_decl|;
DECL|member|screenCount
specifier|static
name|int
name|screenCount
decl_stmt|;
DECL|member|primaryScreen
specifier|static
name|int
name|primaryScreen
decl_stmt|;
DECL|member|rects
specifier|static
name|QVector
argument_list|<
name|QRect
argument_list|>
modifier|*
name|rects
decl_stmt|;
DECL|member|workrects
specifier|static
name|QVector
argument_list|<
name|QRect
argument_list|>
modifier|*
name|workrects
decl_stmt|;
DECL|member|screens
specifier|static
name|QVector
argument_list|<
name|QWidget
modifier|*
argument_list|>
modifier|*
name|screens
decl_stmt|;
DECL|member|refcount
specifier|static
name|int
name|refcount
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_SYMBIAN_SUPPORTS_MULTIPLE_SCREENS
argument_list|)
DECL|member|displayControl
specifier|static
name|MDisplayControl
modifier|*
name|displayControl
decl_stmt|;
endif|#
directive|endif
block|}
class|;
end_class
begin_decl_stmt
DECL|member|screenCount
name|int
name|QDesktopWidgetPrivate
operator|::
name|screenCount
init|=
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|primaryScreen
name|int
name|QDesktopWidgetPrivate
operator|::
name|primaryScreen
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|rects
name|QVector
argument_list|<
name|QRect
argument_list|>
modifier|*
name|QDesktopWidgetPrivate
operator|::
name|rects
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|workrects
name|QVector
argument_list|<
name|QRect
argument_list|>
modifier|*
name|QDesktopWidgetPrivate
operator|::
name|workrects
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|screens
name|QVector
argument_list|<
name|QWidget
modifier|*
argument_list|>
modifier|*
name|QDesktopWidgetPrivate
operator|::
name|screens
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|refcount
name|int
name|QDesktopWidgetPrivate
operator|::
name|refcount
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_SYMBIAN_SUPPORTS_MULTIPLE_SCREENS
argument_list|)
end_if
begin_decl_stmt
DECL|member|displayControl
name|MDisplayControl
modifier|*
name|QDesktopWidgetPrivate
operator|::
name|displayControl
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QDesktopWidgetPrivate
name|QDesktopWidgetPrivate
operator|::
name|QDesktopWidgetPrivate
parameter_list|()
block|{
operator|++
name|refcount
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QDesktopWidgetPrivate
name|QDesktopWidgetPrivate
operator|::
name|~
name|QDesktopWidgetPrivate
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|--
name|refcount
condition|)
name|cleanup
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|init
name|void
name|QDesktopWidgetPrivate
operator|::
name|init
parameter_list|(
name|QDesktopWidget
modifier|*
name|that
parameter_list|)
block|{
comment|// Note that on S^3 devices the screen count retrieved via RWsSession
comment|// will always be 2 but the width and height for screen number 1 will
comment|// be 0 as long as TV-out is not connected.
comment|//
comment|// On the other hand a valid size for screen 1 will be reported even
comment|// after the cable is disconnected. In order to overcome this, we use
comment|// MDisplayControl::NumberOfResolutions() to check if the display is
comment|// valid or not.
name|screenCount
operator|=
name|S60
operator|->
name|screenCount
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_SYMBIAN_SUPPORTS_MULTIPLE_SCREENS
argument_list|)
if|if
condition|(
name|displayControl
condition|)
block|{
if|if
condition|(
name|displayControl
operator|->
name|NumberOfResolutions
argument_list|()
operator|<
literal|1
condition|)
name|screenCount
operator|=
literal|1
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|screenCount
operator|<
literal|1
condition|)
block|{
name|qWarning
argument_list|(
literal|"No screen available"
argument_list|)
expr_stmt|;
name|screenCount
operator|=
literal|1
expr_stmt|;
block|}
name|rects
operator|=
operator|new
name|QVector
argument_list|<
name|QRect
argument_list|>
argument_list|()
expr_stmt|;
name|workrects
operator|=
operator|new
name|QVector
argument_list|<
name|QRect
argument_list|>
argument_list|()
expr_stmt|;
name|screens
operator|=
operator|new
name|QVector
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|()
expr_stmt|;
name|rects
operator|->
name|resize
argument_list|(
name|screenCount
argument_list|)
expr_stmt|;
name|workrects
operator|->
name|resize
argument_list|(
name|screenCount
argument_list|)
expr_stmt|;
name|screens
operator|->
name|resize
argument_list|(
name|screenCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|screenCount
condition|;
operator|++
name|i
control|)
block|{
comment|// All screens will have a position of (0, 0) as there is no true virtual desktop
comment|// or pointer event support for multiple screens on Symbian.
name|QRect
name|r
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|S60
operator|->
name|screenWidthInPixelsForScreen
index|[
name|i
index|]
argument_list|,
name|S60
operator|->
name|screenHeightInPixelsForScreen
index|[
name|i
index|]
argument_list|)
decl_stmt|;
comment|// Stop here if empty and ignore this screen.
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|screenCount
operator|=
name|i
expr_stmt|;
break|break;
block|}
operator|(
operator|*
name|rects
operator|)
index|[
name|i
index|]
operator|=
name|r
expr_stmt|;
name|QRect
name|wr
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|wr
operator|=
name|qt_TRect2QRect
argument_list|(
cast|static_cast
argument_list|<
name|CEikAppUi
operator|*
argument_list|>
argument_list|(
name|S60
operator|->
name|appUi
argument_list|()
argument_list|)
operator|->
name|ClientRect
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|wr
operator|=
name|rects
operator|->
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|(
operator|*
name|workrects
operator|)
index|[
name|i
index|]
operator|.
name|setRect
argument_list|(
name|wr
operator|.
name|x
argument_list|()
argument_list|,
name|wr
operator|.
name|y
argument_list|()
argument_list|,
name|wr
operator|.
name|width
argument_list|()
argument_list|,
name|wr
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|*
name|screens
operator|)
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
operator|(
operator|*
name|screens
operator|)
index|[
literal|0
index|]
operator|=
name|that
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|QDesktopWidgetPrivate
operator|::
name|cleanup
parameter_list|()
block|{
operator|delete
name|rects
expr_stmt|;
name|rects
operator|=
literal|0
expr_stmt|;
operator|delete
name|workrects
expr_stmt|;
name|workrects
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|screens
condition|)
block|{
comment|// First item is the QDesktopWidget so skip it.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|screens
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
operator|delete
name|screens
operator|->
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
operator|delete
name|screens
expr_stmt|;
name|screens
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init_sys
name|void
name|QDesktopWidgetPrivate
operator|::
name|init_sys
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_SYMBIAN_SUPPORTS_MULTIPLE_SCREENS
argument_list|)
if|if
condition|(
name|S60
operator|->
name|screenCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|CWsScreenDevice
modifier|*
name|dev
init|=
name|S60
operator|->
name|screenDevice
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|dev
condition|)
block|{
name|displayControl
operator|=
cast|static_cast
argument_list|<
name|MDisplayControl
operator|*
argument_list|>
argument_list|(
name|dev
operator|->
name|GetInterface
argument_list|(
name|MDisplayControl
operator|::
name|ETypeId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|displayControl
condition|)
block|{
name|displayControl
operator|->
name|EnableDisplayChangeEvents
argument_list|(
name|ETrue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
endif|#
directive|endif
block|}
end_function
begin_constructor
DECL|function|QDesktopWidget
name|QDesktopWidget
operator|::
name|QDesktopWidget
parameter_list|()
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QDesktopWidgetPrivate
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|Desktop
argument_list|)
block|{
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"desktop"
argument_list|)
argument_list|)
expr_stmt|;
name|QDesktopWidgetPrivate
operator|::
name|init_sys
argument_list|()
expr_stmt|;
name|QDesktopWidgetPrivate
operator|::
name|init
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QDesktopWidget
name|QDesktopWidget
operator|::
name|~
name|QDesktopWidget
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|isVirtualDesktop
name|bool
name|QDesktopWidget
operator|::
name|isVirtualDesktop
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|primaryScreen
name|int
name|QDesktopWidget
operator|::
name|primaryScreen
parameter_list|()
specifier|const
block|{
return|return
name|QDesktopWidgetPrivate
operator|::
name|primaryScreen
return|;
block|}
end_function
begin_function
DECL|function|numScreens
name|int
name|QDesktopWidget
operator|::
name|numScreens
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDesktopWidget
argument_list|)
expr_stmt|;
return|return
name|QDesktopWidgetPrivate
operator|::
name|screenCount
return|;
block|}
end_function
begin_function
DECL|function|newSingleDesktopWidget
specifier|static
specifier|inline
name|QWidget
modifier|*
name|newSingleDesktopWidget
parameter_list|(
name|int
name|screen
parameter_list|)
block|{
name|qt_symbian_create_desktop_on_screen
operator|=
name|screen
expr_stmt|;
name|QWidget
modifier|*
name|w
init|=
operator|new
name|QSingleDesktopWidget
decl_stmt|;
name|qt_symbian_create_desktop_on_screen
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|w
return|;
block|}
end_function
begin_function
DECL|function|screen
name|QWidget
modifier|*
name|QDesktopWidget
operator|::
name|screen
parameter_list|(
name|int
name|screen
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDesktopWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|screen
operator|<
literal|0
operator|||
name|screen
operator|>=
name|d
operator|->
name|screenCount
condition|)
name|screen
operator|=
name|d
operator|->
name|primaryScreen
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|screens
operator|->
name|at
argument_list|(
name|screen
argument_list|)
operator|||
name|d
operator|->
name|screens
operator|->
name|at
argument_list|(
name|screen
argument_list|)
operator|->
name|windowType
argument_list|()
operator|!=
name|Qt
operator|::
name|Desktop
condition|)
operator|(
operator|*
name|d
operator|->
name|screens
operator|)
index|[
name|screen
index|]
operator|=
name|newSingleDesktopWidget
argument_list|(
name|screen
argument_list|)
expr_stmt|;
return|return
operator|(
operator|*
name|d
operator|->
name|screens
operator|)
index|[
name|screen
index|]
return|;
block|}
end_function
begin_function
DECL|function|availableGeometry
specifier|const
name|QRect
name|QDesktopWidget
operator|::
name|availableGeometry
parameter_list|(
name|int
name|screen
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDesktopWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|screen
operator|<
literal|0
operator|||
name|screen
operator|>=
name|d
operator|->
name|screenCount
condition|)
name|screen
operator|=
name|d
operator|->
name|primaryScreen
expr_stmt|;
return|return
name|d
operator|->
name|workrects
operator|->
name|at
argument_list|(
name|screen
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|screenGeometry
specifier|const
name|QRect
name|QDesktopWidget
operator|::
name|screenGeometry
parameter_list|(
name|int
name|screen
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDesktopWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|screen
operator|<
literal|0
operator|||
name|screen
operator|>=
name|d
operator|->
name|screenCount
condition|)
name|screen
operator|=
name|d
operator|->
name|primaryScreen
expr_stmt|;
return|return
name|d
operator|->
name|rects
operator|->
name|at
argument_list|(
name|screen
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|screenNumber
name|int
name|QDesktopWidget
operator|::
name|screenNumber
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDesktopWidget
argument_list|)
expr_stmt|;
return|return
name|widget
condition|?
name|S60
operator|->
name|screenNumberForWidget
argument_list|(
name|widget
argument_list|)
else|:
name|d
operator|->
name|primaryScreen
return|;
block|}
end_function
begin_function
DECL|function|screenNumber
name|int
name|QDesktopWidget
operator|::
name|screenNumber
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|point
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|point
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
specifier|const
name|QDesktopWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|primaryScreen
return|;
block|}
end_function
begin_function
DECL|function|resizeEvent
name|void
name|QDesktopWidget
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDesktopWidget
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QRect
argument_list|>
name|oldrects
decl_stmt|;
name|oldrects
operator|=
operator|*
name|d
operator|->
name|rects
expr_stmt|;
name|QVector
argument_list|<
name|QRect
argument_list|>
name|oldworkrects
decl_stmt|;
name|oldworkrects
operator|=
operator|*
name|d
operator|->
name|workrects
expr_stmt|;
name|int
name|oldscreencount
init|=
name|d
operator|->
name|screenCount
decl_stmt|;
name|QDesktopWidgetPrivate
operator|::
name|cleanup
argument_list|()
expr_stmt|;
name|QDesktopWidgetPrivate
operator|::
name|init
argument_list|(
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qMin
argument_list|(
name|oldscreencount
argument_list|,
name|d
operator|->
name|screenCount
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|QRect
name|oldrect
init|=
name|oldrects
index|[
name|i
index|]
decl_stmt|;
name|QRect
name|newrect
init|=
name|d
operator|->
name|rects
operator|->
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldrect
operator|!=
name|newrect
condition|)
emit|emit
name|resized
argument_list|(
name|i
argument_list|)
emit|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|qMin
argument_list|(
name|oldscreencount
argument_list|,
name|d
operator|->
name|screenCount
argument_list|)
condition|;
operator|++
name|j
control|)
block|{
name|QRect
name|oldrect
init|=
name|oldworkrects
index|[
name|j
index|]
decl_stmt|;
name|QRect
name|newrect
init|=
name|d
operator|->
name|workrects
operator|->
name|at
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldrect
operator|!=
name|newrect
condition|)
emit|emit
name|workAreaResized
argument_list|(
name|j
argument_list|)
emit|;
block|}
if|if
condition|(
name|oldscreencount
operator|!=
name|d
operator|->
name|screenCount
condition|)
block|{
emit|emit
name|screenCountChanged
argument_list|(
name|d
operator|->
name|screenCount
argument_list|)
emit|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
