begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qlibrary.h"
end_include
begin_include
include|#
directive|include
file|"qt_x11_p.h"
end_include
begin_include
include|#
directive|include
file|"qvariant.h"
end_include
begin_include
include|#
directive|include
file|"qwidget_p.h"
end_include
begin_include
include|#
directive|include
file|"qx11info_x11.h"
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// defined in qwidget_x11.cpp
specifier|extern
name|int
name|qt_x11_create_desktop_on_screen
decl_stmt|;
end_decl_stmt
begin_comment
comment|// function to update the workarea of the screen
end_comment
begin_decl_stmt
DECL|variable|qt_desktopwidget_workarea_dirty
specifier|static
name|bool
name|qt_desktopwidget_workarea_dirty
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_desktopwidget_update_workarea
name|void
name|qt_desktopwidget_update_workarea
parameter_list|()
block|{
name|qt_desktopwidget_workarea_dirty
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QSingleDesktopWidget
class|class
name|QSingleDesktopWidget
super|:
specifier|public
name|QWidget
block|{
public|public:
name|QSingleDesktopWidget
parameter_list|()
constructor_decl|;
name|~
name|QSingleDesktopWidget
parameter_list|()
destructor_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|QSingleDesktopWidget
name|QSingleDesktopWidget
operator|::
name|QSingleDesktopWidget
parameter_list|()
member_init_list|:
name|QWidget
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Desktop
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QSingleDesktopWidget
name|QSingleDesktopWidget
operator|::
name|~
name|QSingleDesktopWidget
parameter_list|()
block|{
specifier|const
name|QObjectList
modifier|&
name|childList
init|=
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|childList
operator|.
name|size
argument_list|()
init|;
name|i
operator|>
literal|0
condition|;
control|)
block|{
operator|--
name|i
expr_stmt|;
name|childList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_destructor
begin_class
DECL|class|QDesktopWidgetPrivate
class|class
name|QDesktopWidgetPrivate
super|:
specifier|public
name|QWidgetPrivate
block|{
public|public:
name|QDesktopWidgetPrivate
parameter_list|()
constructor_decl|;
name|~
name|QDesktopWidgetPrivate
parameter_list|()
destructor_decl|;
name|void
name|init
parameter_list|()
function_decl|;
DECL|member|use_xinerama
name|bool
name|use_xinerama
decl_stmt|;
DECL|member|defaultScreen
name|int
name|defaultScreen
decl_stmt|;
DECL|member|screenCount
name|int
name|screenCount
decl_stmt|;
DECL|member|screens
name|QWidget
modifier|*
modifier|*
name|screens
decl_stmt|;
DECL|member|rects
name|QRect
modifier|*
name|rects
decl_stmt|;
DECL|member|workareas
name|QRect
modifier|*
name|workareas
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QDesktopWidgetPrivate
name|QDesktopWidgetPrivate
operator|::
name|QDesktopWidgetPrivate
parameter_list|()
member_init_list|:
name|use_xinerama
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|defaultScreen
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|screenCount
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|screens
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|rects
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|workareas
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QDesktopWidgetPrivate
name|QDesktopWidgetPrivate
operator|::
name|~
name|QDesktopWidgetPrivate
parameter_list|()
block|{
if|if
condition|(
name|screens
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|screenCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|==
name|defaultScreen
condition|)
continue|continue;
operator|delete
name|screens
index|[
name|i
index|]
expr_stmt|;
name|screens
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|free
argument_list|(
name|screens
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rects
condition|)
operator|delete
index|[]
name|rects
expr_stmt|;
if|if
condition|(
name|workareas
condition|)
operator|delete
index|[]
name|workareas
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|init
name|void
name|QDesktopWidgetPrivate
operator|::
name|init
parameter_list|()
block|{
comment|// get the screen count
name|int
name|newScreenCount
init|=
name|ScreenCount
argument_list|(
name|X11
operator|->
name|display
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XINERAMA
name|XineramaScreenInfo
modifier|*
name|xinerama_screeninfo
init|=
literal|0
decl_stmt|;
comment|// we ignore the Xinerama extension when using the display is
comment|// using traditional multi-screen (with multiple root windows)
if|if
condition|(
name|newScreenCount
operator|==
literal|1
operator|&&
name|X11
operator|->
name|ptrXineramaQueryExtension
operator|&&
name|X11
operator|->
name|ptrXineramaIsActive
operator|&&
name|X11
operator|->
name|ptrXineramaQueryScreens
condition|)
block|{
name|int
name|unused
decl_stmt|;
name|use_xinerama
operator|=
operator|(
name|X11
operator|->
name|ptrXineramaQueryExtension
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|unused
argument_list|,
operator|&
name|unused
argument_list|)
operator|&&
name|X11
operator|->
name|ptrXineramaIsActive
argument_list|(
name|X11
operator|->
name|display
argument_list|)
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|use_xinerama
condition|)
block|{
name|xinerama_screeninfo
operator|=
name|X11
operator|->
name|ptrXineramaQueryScreens
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|newScreenCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|xinerama_screeninfo
condition|)
block|{
name|defaultScreen
operator|=
literal|0
expr_stmt|;
block|}
else|else
endif|#
directive|endif
comment|// QT_NO_XINERAMA
block|{
name|defaultScreen
operator|=
name|DefaultScreen
argument_list|(
name|X11
operator|->
name|display
argument_list|)
expr_stmt|;
name|newScreenCount
operator|=
name|ScreenCount
argument_list|(
name|X11
operator|->
name|display
argument_list|)
expr_stmt|;
name|use_xinerama
operator|=
literal|false
expr_stmt|;
block|}
operator|delete
index|[]
name|rects
expr_stmt|;
name|rects
operator|=
operator|new
name|QRect
index|[
name|newScreenCount
index|]
expr_stmt|;
operator|delete
index|[]
name|workareas
expr_stmt|;
name|workareas
operator|=
operator|new
name|QRect
index|[
name|newScreenCount
index|]
expr_stmt|;
comment|// get the geometry of each screen
name|int
name|i
decl_stmt|,
name|j
decl_stmt|,
name|x
decl_stmt|,
name|y
decl_stmt|,
name|w
decl_stmt|,
name|h
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
operator|,
name|j
operator|=
literal|0
init|;
name|i
operator|<
name|newScreenCount
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_XINERAMA
if|if
condition|(
name|use_xinerama
condition|)
block|{
name|x
operator|=
name|xinerama_screeninfo
index|[
name|i
index|]
operator|.
name|x_org
expr_stmt|;
name|y
operator|=
name|xinerama_screeninfo
index|[
name|i
index|]
operator|.
name|y_org
expr_stmt|;
name|w
operator|=
name|xinerama_screeninfo
index|[
name|i
index|]
operator|.
name|width
expr_stmt|;
name|h
operator|=
name|xinerama_screeninfo
index|[
name|i
index|]
operator|.
name|height
expr_stmt|;
block|}
else|else
endif|#
directive|endif
comment|// QT_NO_XINERAMA
block|{
name|x
operator|=
literal|0
expr_stmt|;
name|y
operator|=
literal|0
expr_stmt|;
name|w
operator|=
name|WidthOfScreen
argument_list|(
name|ScreenOfDisplay
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|h
operator|=
name|HeightOfScreen
argument_list|(
name|ScreenOfDisplay
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rects
index|[
name|j
index|]
operator|.
name|setRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
if|if
condition|(
name|use_xinerama
operator|&&
name|j
operator|>
literal|0
operator|&&
name|rects
index|[
name|j
operator|-
literal|1
index|]
operator|.
name|intersects
argument_list|(
name|rects
index|[
name|j
index|]
argument_list|)
condition|)
block|{
comment|// merge a "cloned" screen with the previous, hiding all crtcs
comment|// that are currently showing a sub-rect of the previous screen
if|if
condition|(
operator|(
name|rects
index|[
name|j
index|]
operator|.
name|width
argument_list|()
operator|*
name|rects
index|[
name|j
index|]
operator|.
name|height
argument_list|()
operator|)
operator|>
operator|(
name|rects
index|[
name|j
operator|-
literal|1
index|]
operator|.
name|width
argument_list|()
operator|*
name|rects
index|[
name|j
operator|-
literal|1
index|]
operator|.
name|height
argument_list|()
operator|)
condition|)
name|rects
index|[
name|j
operator|-
literal|1
index|]
operator|=
name|rects
index|[
name|j
index|]
expr_stmt|;
name|j
operator|--
expr_stmt|;
block|}
name|workareas
index|[
name|i
index|]
operator|=
name|QRect
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|screens
condition|)
block|{
comment|// leaks QWidget* pointers on purpose, can't delete them as pointer escapes
name|screens
operator|=
name|q_check_ptr
argument_list|(
operator|(
name|QWidget
operator|*
operator|*
operator|)
name|realloc
argument_list|(
name|screens
argument_list|,
name|j
operator|*
sizeof|sizeof
argument_list|(
name|QWidget
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|>
name|screenCount
condition|)
name|memset
argument_list|(
operator|&
name|screens
index|[
name|screenCount
index|]
argument_list|,
literal|0
argument_list|,
operator|(
name|j
operator|-
name|screenCount
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|QWidget
operator|*
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|screenCount
operator|=
name|j
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XINERAMA
if|if
condition|(
name|use_xinerama
operator|&&
name|screenCount
operator|==
literal|1
condition|)
name|use_xinerama
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|xinerama_screeninfo
condition|)
name|XFree
argument_list|(
name|xinerama_screeninfo
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_XINERAMA
block|}
end_function
begin_comment
comment|// the QDesktopWidget itself will be created on the default screen
end_comment
begin_comment
comment|// as qt_x11_create_desktop_on_screen defaults to -1
end_comment
begin_constructor
DECL|function|QDesktopWidget
name|QDesktopWidget
operator|::
name|QDesktopWidget
parameter_list|()
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QDesktopWidgetPrivate
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|Desktop
argument_list|)
block|{
name|Q_D
argument_list|(
name|QDesktopWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QDesktopWidget
name|QDesktopWidget
operator|::
name|~
name|QDesktopWidget
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|isVirtualDesktop
name|bool
name|QDesktopWidget
operator|::
name|isVirtualDesktop
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDesktopWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|use_xinerama
return|;
block|}
end_function
begin_function
DECL|function|primaryScreen
name|int
name|QDesktopWidget
operator|::
name|primaryScreen
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDesktopWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|defaultScreen
return|;
block|}
end_function
begin_function
DECL|function|numScreens
name|int
name|QDesktopWidget
operator|::
name|numScreens
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDesktopWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|screenCount
return|;
block|}
end_function
begin_function
DECL|function|screen
name|QWidget
modifier|*
name|QDesktopWidget
operator|::
name|screen
parameter_list|(
name|int
name|screen
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDesktopWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|use_xinerama
condition|)
return|return
name|this
return|;
if|if
condition|(
name|screen
operator|<
literal|0
operator|||
name|screen
operator|>=
name|d
operator|->
name|screenCount
condition|)
name|screen
operator|=
name|d
operator|->
name|defaultScreen
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|screens
condition|)
block|{
name|d
operator|->
name|screens
operator|=
operator|(
name|QWidget
operator|*
operator|*
operator|)
name|calloc
argument_list|(
name|d
operator|->
name|screenCount
argument_list|,
sizeof|sizeof
argument_list|(
name|QWidget
operator|*
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|screens
index|[
name|d
operator|->
name|defaultScreen
index|]
operator|=
name|this
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|screens
index|[
name|screen
index|]
operator|||
comment|// not created yet
operator|!
operator|(
name|d
operator|->
name|screens
index|[
name|screen
index|]
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
block|{
comment|// reparented away
name|qt_x11_create_desktop_on_screen
operator|=
name|screen
expr_stmt|;
name|d
operator|->
name|screens
index|[
name|screen
index|]
operator|=
operator|new
name|QSingleDesktopWidget
expr_stmt|;
name|qt_x11_create_desktop_on_screen
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|d
operator|->
name|screens
index|[
name|screen
index|]
return|;
block|}
end_function
begin_function
DECL|function|availableGeometry
specifier|const
name|QRect
name|QDesktopWidget
operator|::
name|availableGeometry
parameter_list|(
name|int
name|screen
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDesktopWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|qt_desktopwidget_workarea_dirty
condition|)
block|{
comment|// the workareas are dirty, invalidate them
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|screenCount
condition|;
operator|++
name|i
control|)
name|d
operator|->
name|workareas
index|[
name|i
index|]
operator|=
name|QRect
argument_list|()
expr_stmt|;
name|qt_desktopwidget_workarea_dirty
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|screen
operator|<
literal|0
operator|||
name|screen
operator|>=
name|d
operator|->
name|screenCount
condition|)
name|screen
operator|=
name|d
operator|->
name|defaultScreen
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|workareas
index|[
name|screen
index|]
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|d
operator|->
name|workareas
index|[
name|screen
index|]
return|;
if|if
condition|(
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_WORKAREA
argument_list|)
argument_list|)
condition|)
block|{
name|int
name|x11Screen
init|=
name|isVirtualDesktop
argument_list|()
condition|?
name|DefaultScreen
argument_list|(
name|X11
operator|->
name|display
argument_list|)
else|:
name|screen
decl_stmt|;
name|Atom
name|ret
decl_stmt|;
name|int
name|format
decl_stmt|,
name|e
decl_stmt|;
name|unsigned
name|char
modifier|*
name|data
init|=
literal|0
decl_stmt|;
name|unsigned
name|long
name|nitems
decl_stmt|,
name|after
decl_stmt|;
name|e
operator|=
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|(
name|x11Screen
argument_list|)
argument_list|,
name|ATOM
argument_list|(
name|_NET_WORKAREA
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
name|False
argument_list|,
name|XA_CARDINAL
argument_list|,
operator|&
name|ret
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|nitems
argument_list|,
operator|&
name|after
argument_list|,
operator|&
name|data
argument_list|)
expr_stmt|;
name|QRect
name|workArea
decl_stmt|;
if|if
condition|(
name|e
operator|==
name|Success
operator|&&
name|ret
operator|==
name|XA_CARDINAL
operator|&&
name|format
operator|==
literal|32
operator|&&
name|nitems
operator|==
literal|4
condition|)
block|{
name|long
modifier|*
name|workarea
init|=
operator|(
name|long
operator|*
operator|)
name|data
decl_stmt|;
name|workArea
operator|=
name|QRect
argument_list|(
name|workarea
index|[
literal|0
index|]
argument_list|,
name|workarea
index|[
literal|1
index|]
argument_list|,
name|workarea
index|[
literal|2
index|]
argument_list|,
name|workarea
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|workArea
operator|=
name|screenGeometry
argument_list|(
name|screen
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isVirtualDesktop
argument_list|()
condition|)
block|{
comment|// intersect the workarea (which spawns all Xinerama screens) with the rect for the
comment|// requested screen
name|workArea
operator|&=
name|screenGeometry
argument_list|(
name|screen
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|workareas
index|[
name|screen
index|]
operator|=
name|workArea
expr_stmt|;
if|if
condition|(
name|data
condition|)
name|XFree
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|workareas
index|[
name|screen
index|]
operator|=
name|screenGeometry
argument_list|(
name|screen
argument_list|)
expr_stmt|;
block|}
return|return
name|d
operator|->
name|workareas
index|[
name|screen
index|]
return|;
block|}
end_function
begin_function
DECL|function|screenGeometry
specifier|const
name|QRect
name|QDesktopWidget
operator|::
name|screenGeometry
parameter_list|(
name|int
name|screen
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDesktopWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|screen
operator|<
literal|0
operator|||
name|screen
operator|>=
name|d
operator|->
name|screenCount
condition|)
name|screen
operator|=
name|d
operator|->
name|defaultScreen
expr_stmt|;
return|return
name|d
operator|->
name|rects
index|[
name|screen
index|]
return|;
block|}
end_function
begin_function
DECL|function|screenNumber
name|int
name|QDesktopWidget
operator|::
name|screenNumber
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDesktopWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
return|return
name|d
operator|->
name|defaultScreen
return|;
ifndef|#
directive|ifndef
name|QT_NO_XINERAMA
if|if
condition|(
name|d
operator|->
name|use_xinerama
condition|)
block|{
comment|// this is how we do it for xinerama
name|QRect
name|frame
init|=
name|widget
operator|->
name|frameGeometry
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
name|frame
operator|.
name|moveTopLeft
argument_list|(
name|widget
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|maxSize
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|maxScreen
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|screenCount
condition|;
operator|++
name|i
control|)
block|{
name|QRect
name|sect
init|=
name|d
operator|->
name|rects
index|[
name|i
index|]
operator|.
name|intersected
argument_list|(
name|frame
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|sect
operator|.
name|width
argument_list|()
operator|*
name|sect
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|maxSize
operator|&&
name|sect
operator|.
name|width
argument_list|()
operator|>
literal|0
operator|&&
name|sect
operator|.
name|height
argument_list|()
operator|>
literal|0
condition|)
block|{
name|maxSize
operator|=
name|size
expr_stmt|;
name|maxScreen
operator|=
name|i
expr_stmt|;
block|}
block|}
return|return
name|maxScreen
return|;
block|}
endif|#
directive|endif
comment|// QT_NO_XINERAMA
return|return
name|widget
operator|->
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|screenNumber
name|int
name|QDesktopWidget
operator|::
name|screenNumber
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|point
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDesktopWidget
argument_list|)
expr_stmt|;
name|int
name|closestScreen
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|shortestDistance
init|=
name|INT_MAX
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|screenCount
condition|;
operator|++
name|i
control|)
block|{
name|int
name|thisDistance
init|=
name|d
operator|->
name|pointToRect
argument_list|(
name|point
argument_list|,
name|d
operator|->
name|rects
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|thisDistance
operator|<
name|shortestDistance
condition|)
block|{
name|shortestDistance
operator|=
name|thisDistance
expr_stmt|;
name|closestScreen
operator|=
name|i
expr_stmt|;
block|}
block|}
return|return
name|closestScreen
return|;
block|}
end_function
begin_function
DECL|function|resizeEvent
name|void
name|QDesktopWidget
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDesktopWidget
argument_list|)
expr_stmt|;
name|int
name|oldScreenCount
init|=
name|d
operator|->
name|screenCount
decl_stmt|;
name|QVector
argument_list|<
name|QRect
argument_list|>
name|oldRects
argument_list|(
name|oldScreenCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldScreenCount
condition|;
operator|++
name|i
control|)
block|{
name|oldRects
index|[
name|i
index|]
operator|=
name|d
operator|->
name|rects
index|[
name|i
index|]
expr_stmt|;
block|}
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qMin
argument_list|(
name|oldScreenCount
argument_list|,
name|d
operator|->
name|screenCount
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|oldRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|!=
name|d
operator|->
name|rects
index|[
name|i
index|]
condition|)
emit|emit
name|resized
argument_list|(
name|i
argument_list|)
emit|;
block|}
if|if
condition|(
name|oldScreenCount
operator|!=
name|d
operator|->
name|screenCount
condition|)
block|{
emit|emit
name|screenCountChanged
argument_list|(
name|d
operator|->
name|screenCount
argument_list|)
emit|;
block|}
name|qt_desktopwidget_workarea_dirty
operator|=
literal|true
expr_stmt|;
name|QWidget
operator|::
name|resizeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
