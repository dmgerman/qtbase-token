begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QCLIPBOARD_H
end_ifndef
begin_define
DECL|macro|QCLIPBOARD_H
define|#
directive|define
name|QCLIPBOARD_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qobject.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
DECL|variable|QMimeData
name|class
name|QMimeData
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QImage
name|class
name|QImage
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPixmap
name|class
name|QPixmap
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QClipboard
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|private
operator|:
name|explicit
name|QClipboard
argument_list|(
name|QObject
operator|*
name|parent
argument_list|)
block|;
operator|~
name|QClipboard
argument_list|()
block|;
name|public
operator|:
expr|enum
name|Mode
block|{
name|Clipboard
block|,
name|Selection
block|,
name|FindBuffer
block|,
name|LastMode
operator|=
name|FindBuffer
block|}
block|;
name|void
name|clear
argument_list|(
argument|Mode mode = Clipboard
argument_list|)
block|;
name|bool
name|supportsSelection
argument_list|()
specifier|const
block|;
name|bool
name|supportsFindBuffer
argument_list|()
specifier|const
block|;
name|bool
name|ownsSelection
argument_list|()
specifier|const
block|;
name|bool
name|ownsClipboard
argument_list|()
specifier|const
block|;
name|bool
name|ownsFindBuffer
argument_list|()
specifier|const
block|;
name|QString
name|text
argument_list|(
argument|Mode mode = Clipboard
argument_list|)
specifier|const
block|;
name|QString
name|text
argument_list|(
argument|QString& subtype
argument_list|,
argument|Mode mode = Clipboard
argument_list|)
specifier|const
block|;
name|void
name|setText
argument_list|(
argument|const QString&
argument_list|,
argument|Mode mode = Clipboard
argument_list|)
block|;
specifier|const
name|QMimeData
operator|*
name|mimeData
argument_list|(
argument|Mode mode = Clipboard
argument_list|)
specifier|const
block|;
name|void
name|setMimeData
argument_list|(
argument|QMimeData *data
argument_list|,
argument|Mode mode = Clipboard
argument_list|)
block|;
name|QImage
name|image
argument_list|(
argument|Mode mode = Clipboard
argument_list|)
specifier|const
block|;
name|QPixmap
name|pixmap
argument_list|(
argument|Mode mode = Clipboard
argument_list|)
specifier|const
block|;
name|void
name|setImage
argument_list|(
argument|const QImage&
argument_list|,
argument|Mode mode  = Clipboard
argument_list|)
block|;
name|void
name|setPixmap
argument_list|(
argument|const QPixmap&
argument_list|,
argument|Mode mode  = Clipboard
argument_list|)
block|;
name|Q_SIGNALS
operator|:
name|void
name|changed
argument_list|(
argument|QClipboard::Mode mode
argument_list|)
block|;
name|void
name|selectionChanged
argument_list|()
block|;
name|void
name|findBufferChanged
argument_list|()
block|;
name|void
name|dataChanged
argument_list|()
block|;
name|private
name|Q_SLOTS
operator|:
name|void
name|ownerDestroyed
argument_list|()
block|;
name|protected
operator|:
name|void
name|connectNotify
argument_list|(
specifier|const
name|char
operator|*
argument_list|)
block|;
name|bool
name|event
argument_list|(
name|QEvent
operator|*
argument_list|)
block|;
name|friend
name|class
name|QApplication
block|;
name|friend
name|class
name|QApplicationPrivate
block|;
name|friend
name|class
name|QGuiApplication
block|;
name|friend
name|class
name|QBaseApplication
block|;
name|friend
name|class
name|QDragManager
block|;
name|friend
name|class
name|QPlatformClipboard
block|;
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QClipboard
argument_list|)
name|bool
name|supportsMode
argument_list|(
argument|Mode mode
argument_list|)
specifier|const
block|;
name|bool
name|ownsMode
argument_list|(
argument|Mode mode
argument_list|)
specifier|const
block|;
name|void
name|emitChanged
argument_list|(
argument|Mode mode
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CLIPBOARD
end_comment
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QCLIPBOARD_H
end_comment
end_unit
