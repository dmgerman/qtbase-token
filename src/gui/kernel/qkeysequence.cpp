begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qkeysequence.h"
end_include
begin_include
include|#
directive|include
file|"qkeysequence_p.h"
end_include
begin_include
include|#
directive|include
file|"qplatformtheme_qpa.h"
end_include
begin_include
include|#
directive|include
file|"private/qguiapplication_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
end_ifndef
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
end_ifndef
begin_include
include|#
directive|include
file|"qregexp.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_include
include|#
directive|include
file|"qdatastream.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qvariant.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_MAC
end_ifdef
begin_include
include|#
directive|include
file|<QtCore/private/qcore_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<Carbon/Carbon.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifdef|#
directive|ifdef
name|Q_OS_MAC
DECL|variable|qt_sequence_no_mnemonics
specifier|static
name|bool
name|qt_sequence_no_mnemonics
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|MacSpecialKey
struct|struct
name|MacSpecialKey
block|{
DECL|member|key
name|int
name|key
decl_stmt|;
DECL|member|macSymbol
name|ushort
name|macSymbol
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|NumEntries
specifier|static
specifier|const
name|int
name|NumEntries
init|=
literal|21
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|entries
specifier|static
specifier|const
name|MacSpecialKey
name|entries
index|[
name|NumEntries
index|]
init|=
block|{
block|{
name|Qt
operator|::
name|Key_Escape
block|,
literal|0x238B
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Tab
block|,
literal|0x21E5
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Backtab
block|,
literal|0x21E4
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Backspace
block|,
literal|0x232B
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Return
block|,
literal|0x21B5
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Enter
block|,
literal|0x2324
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Delete
block|,
literal|0x2326
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Home
block|,
literal|0x2196
block|}
block|,
block|{
name|Qt
operator|::
name|Key_End
block|,
literal|0x2198
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Left
block|,
literal|0x2190
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Up
block|,
literal|0x2191
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Right
block|,
literal|0x2192
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Down
block|,
literal|0x2193
block|}
block|,
block|{
name|Qt
operator|::
name|Key_PageUp
block|,
literal|0x21DE
block|}
block|,
block|{
name|Qt
operator|::
name|Key_PageDown
block|,
literal|0x21DF
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Shift
block|,
name|kShiftUnicode
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Control
block|,
name|kCommandUnicode
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Meta
block|,
name|kControlUnicode
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Alt
block|,
name|kOptionUnicode
block|}
block|,
block|{
name|Qt
operator|::
name|Key_CapsLock
block|,
literal|0x21EA
block|}
block|, }
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|operator <
specifier|static
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|MacSpecialKey
modifier|&
name|entry
parameter_list|,
name|int
name|key
parameter_list|)
block|{
return|return
name|entry
operator|.
name|key
operator|<
name|key
return|;
block|}
end_function
begin_function
DECL|function|operator <
specifier|static
name|bool
name|operator
name|<
parameter_list|(
name|int
name|key
parameter_list|,
specifier|const
name|MacSpecialKey
modifier|&
name|entry
parameter_list|)
block|{
return|return
name|key
operator|<
name|entry
operator|.
name|key
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|MacSpecialKeyEntriesEnd
specifier|static
specifier|const
name|MacSpecialKey
modifier|*
specifier|const
name|MacSpecialKeyEntriesEnd
init|=
name|entries
operator|+
name|NumEntries
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_macSymbolForQtKey
name|QChar
name|qt_macSymbolForQtKey
parameter_list|(
name|int
name|key
parameter_list|)
block|{
specifier|const
name|MacSpecialKey
modifier|*
name|i
init|=
name|qBinaryFind
argument_list|(
name|entries
argument_list|,
name|MacSpecialKeyEntriesEnd
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|MacSpecialKeyEntriesEnd
condition|)
return|return
name|QChar
argument_list|()
return|;
name|ushort
name|macSymbol
init|=
name|i
operator|->
name|macSymbol
decl_stmt|;
if|if
condition|(
name|qApp
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_MacDontSwapCtrlAndMeta
argument_list|)
operator|&&
operator|(
name|macSymbol
operator|==
name|kControlUnicode
operator|||
name|macSymbol
operator|==
name|kCommandUnicode
operator|)
condition|)
block|{
if|if
condition|(
name|macSymbol
operator|==
name|kControlUnicode
condition|)
name|macSymbol
operator|=
name|kCommandUnicode
expr_stmt|;
else|else
name|macSymbol
operator|=
name|kControlUnicode
expr_stmt|;
block|}
return|return
name|QChar
argument_list|(
name|macSymbol
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qtkeyForMacSymbol
specifier|static
name|int
name|qtkeyForMacSymbol
parameter_list|(
specifier|const
name|QChar
name|ch
parameter_list|)
block|{
specifier|const
name|ushort
name|unicode
init|=
name|ch
operator|.
name|unicode
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumEntries
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|MacSpecialKey
modifier|&
name|entry
init|=
name|entries
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|macSymbol
operator|==
name|unicode
condition|)
block|{
name|int
name|key
init|=
name|entry
operator|.
name|key
decl_stmt|;
if|if
condition|(
name|qApp
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_MacDontSwapCtrlAndMeta
argument_list|)
operator|&&
operator|(
name|unicode
operator|==
name|kControlUnicode
operator|||
name|unicode
operator|==
name|kCommandUnicode
operator|)
condition|)
block|{
if|if
condition|(
name|unicode
operator|==
name|kControlUnicode
condition|)
name|key
operator|=
name|Qt
operator|::
name|Key_Control
expr_stmt|;
else|else
name|key
operator|=
name|Qt
operator|::
name|Key_Meta
expr_stmt|;
block|}
return|return
name|key
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_decl_stmt
specifier|static
name|bool
name|qt_sequence_no_mnemonics
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qt_set_sequence_auto_mnemonic
name|void
name|Q_GUI_EXPORT
name|qt_set_sequence_auto_mnemonic
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|qt_sequence_no_mnemonics
operator|=
operator|!
name|b
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QKeySequence     \brief The QKeySequence class encapsulates a key sequence as used     by shortcuts.      \ingroup shared       In its most common form, a key sequence describes a combination of     keys that must be used together to perform some action. Key sequences     are used with QAction objects to specify which keyboard shortcuts can     be used to trigger actions.      Key sequences can be constructed for use as keyboard shortcuts in     three different ways:      \list     \li For standard shortcuts, a \l{QKeySequence::StandardKey}{standard key}        can be used to request the platform-specific key sequence associated        with each shortcut.     \li For custom shortcuts, human-readable strings such as "Ctrl+X" can        be used, and these can be translated into the appropriate shortcuts        for users of different languages. Translations are made in the        "QShortcut" context.     \li For hard-coded shortcuts, integer key codes can be specified with        a combination of values defined by the Qt::Key and Qt::Modifier enum        values. Each key code consists of a single Qt::Key value and zero or        more modifiers, such as Qt::SHIFT, Qt::CTRL, Qt::ALT and Qt::META.     \endlist      For example, \gui{Ctrl P} might be a sequence used as a shortcut for     printing a document, and can be specified in any of the following     ways:      \snippet doc/src/snippets/code/src_gui_kernel_qkeysequence.cpp 0      Note that, for letters, the case used in the specification string     does not matter. In the above examples, the user does not need to     hold down the \key{Shift} key to activate a shortcut specified     with "Ctrl+P". However, for other keys, the use of \key{Shift} as     an unspecified extra modifier key can lead to confusion for users     of an application whose keyboards have different layouts to those     used by the developers. See the \l{Keyboard Layout Issues} section     below for more details.      It is preferable to use standard shortcuts where possible.     When creating key sequences for non-standard shortcuts, you should use     human-readable strings in preference to hard-coded integer values.      QKeySequence objects can be cast to a QString to obtain a human-readable     translated version of the sequence. Similarly, the toString() function     produces human-readable strings for use in menus. On Mac OS X, the     appropriate symbols are used to describe keyboard shortcuts using special     keys on the Macintosh keyboard.      An alternative way to specify hard-coded key codes is to use the Unicode     code point of the character; for example, 'A' gives the same key sequence     as Qt::Key_A.      \b{Note:} On Mac OS X, references to "Ctrl", Qt::CTRL, Qt::Control     and Qt::ControlModifier correspond to the \key Command keys on the     Macintosh keyboard, and references to "Meta", Qt::META, Qt::Meta and     Qt::MetaModifier correspond to the \key Control keys. Developers on     Mac OS X can use the same shortcut descriptions across all platforms,     and their applications will automatically work as expected on Mac OS X.      \section1 Standard Shortcuts      QKeySequence defines many \l{QKeySequence::StandardKey} {standard     keyboard shortcuts} to reduce the amount of effort required when     setting up actions in a typical application. The table below shows     some common key sequences that are often used for these standard     shortcuts by applications on four widely-used platforms.  Note     that on Mac OS X, the \key Ctrl value corresponds to the \key     Command keys on the Macintosh keyboard, and the \key Meta value     corresponds to the \key Control keys.      \table     \header \li StandardKey      \li Windows                              \li Mac OS X                 \li KDE          \li GNOME     \row    \li HelpContents     \li F1                                   \li Ctrl+?                   \li F1           \li F1     \row    \li WhatsThis        \li Shift+F1                             \li Shift+F1                 \li Shift+F1     \li Shift+F1     \row    \li Open             \li Ctrl+O                               \li Ctrl+O                   \li Ctrl+O       \li Ctrl+O     \row    \li Close            \li Ctrl+F4, Ctrl+W                      \li Ctrl+W, Ctrl+F4          \li Ctrl+W       \li Ctrl+W     \row    \li Save             \li Ctrl+S                               \li Ctrl+S                   \li Ctrl+S       \li Ctrl+S     \row    \li Quit             \li                                      \li Ctrl+Q                   \li Qtrl+Q       \li Qtrl+Q     \row    \li SaveAs           \li                                      \li Ctrl+Shift+S             \li              \li Ctrl+Shift+S     \row    \li New              \li Ctrl+N                               \li Ctrl+N                   \li Ctrl+N       \li Ctrl+N     \row    \li Delete           \li Del                                  \li Del, Meta+D              \li Del, Ctrl+D  \li Del, Ctrl+D     \row    \li Cut              \li Ctrl+X, Shift+Del                    \li Ctrl+X                   \li Ctrl+X, F20, Shift+Del \li Ctrl+X, F20, Shift+Del     \row    \li Copy             \li Ctrl+C, Ctrl+Ins                     \li Ctrl+C                   \li Ctrl+C, F16, Ctrl+Ins  \li Ctrl+C, F16, Ctrl+Ins     \row    \li Paste            \li Ctrl+V, Shift+Ins                    \li Ctrl+V                   \li Ctrl+V, F18, Shift+Ins \li Ctrl+V, F18, Shift+Ins     \row    \li Preferences      \li                                      \li Ctrl+,                   \li              \li     \row    \li Undo             \li Ctrl+Z, Alt+Backspace                \li Ctrl+Z                   \li Ctrl+Z, F14  \li Ctrl+Z, F14     \row    \li Redo             \li Ctrl+Y, Shift+Ctrl+Z, Alt+Shift+Backspace \li Ctrl+Shift+Z        \li Ctrl+Shift+Z \li Ctrl+Shift+Z     \row    \li Back             \li Alt+Left, Backspace                  \li Ctrl+[                   \li Alt+Left     \li Alt+Left     \row    \li Forward          \li Alt+Right, Shift+Backspace           \li Ctrl+]                   \li Alt+Right    \li Alt+Right     \row    \li Refresh          \li F5                                   \li F5                       \li F5           \li Ctrl+R, F5     \row    \li ZoomIn           \li Ctrl+Plus                            \li Ctrl+Plus                \li Ctrl+Plus    \li Ctrl+Plus     \row    \li ZoomOut          \li Ctrl+Minus                           \li Ctrl+Minus               \li Ctrl+Minus   \li Ctrl+Minus     \row    \li Print            \li Ctrl+P                               \li Ctrl+P                   \li Ctrl+P       \li Ctrl+P     \row    \li AddTab           \li Ctrl+T                               \li Ctrl+T                   \li Ctrl+Shift+N, Ctrl+T \li Ctrl+T     \row    \li NextChild        \li Ctrl+Tab, Forward, Ctrl+F6           \li Ctrl+}, Forward, Ctrl+Tab \li Ctrl+Tab, Forward, Ctrl+Comma \li Ctrl+Tab, Forward     \row    \li PreviousChild    \li Ctrl+Shift+Tab, Back, Ctrl+Shift+F6  \li Ctrl+{, Back, Ctrl+Shift+Tab \li Ctrl+Shift+Tab, Back, Ctrl+Period \li Ctrl+Shift+Tab, Back     \row    \li Find             \li Ctrl+F                               \li Ctrl+F                   \li Ctrl+F         \li Ctrl+F     \row    \li FindNext         \li F3, Ctrl+G                           \li Ctrl+G                   \li F3             \li Ctrl+G, F3     \row    \li FindPrevious     \li Shift+F3, Ctrl+Shift+G               \li Ctrl+Shift+G             \li Shift+F3       \li Ctrl+Shift+G, Shift+F3     \row    \li Replace          \li Ctrl+H                               \li (none)                   \li Ctrl+R         \li Ctrl+H     \row    \li SelectAll        \li Ctrl+A                               \li Ctrl+A                   \li Ctrl+A         \li Ctrl+A     \row    \li Bold             \li Ctrl+B                               \li Ctrl+B                   \li Ctrl+B         \li Ctrl+B     \row    \li Italic           \li Ctrl+I                               \li Ctrl+I                   \li Ctrl+I         \li Ctrl+I     \row    \li Underline        \li Ctrl+U                               \li Ctrl+U                   \li Ctrl+U         \li Ctrl+U     \row    \li MoveToNextChar       \li Right                            \li Right                    \li Right          \li Right     \row    \li MoveToPreviousChar   \li Left                             \li Left                     \li Left           \li Left     \row    \li MoveToNextWord       \li Ctrl+Right                       \li Alt+Right                \li Ctrl+Right     \li Ctrl+Right     \row    \li MoveToPreviousWord   \li Ctrl+Left                        \li Alt+Left                 \li Ctrl+Left      \li Ctrl+Left     \row    \li MoveToNextLine       \li Down                             \li Down                     \li Down           \li Down     \row    \li MoveToPreviousLine   \li Up                               \li Up                       \li Up             \li Up     \row    \li MoveToNextPage       \li PgDown                           \li PgDown, Alt+PgDown, Meta+Down, Meta+PgDown\li PgDown \li PgDown     \row    \li MoveToPreviousPage   \li PgUp                             \li PgUp, Alt+PgUp, Meta+Up, Meta+PgUp        \li PgUp   \li PgUp     \row    \li MoveToStartOfLine    \li Home                             \li Ctrl+Left, Meta+Left   \li Home            \li Home     \row    \li MoveToEndOfLine      \li End                              \li Ctrl+Right, Meta+Right \li End             \li End     \row    \li MoveToStartOfBlock   \li (none)                           \li Alt+Up, Meta+A         \li (none)          \li (none)     \row    \li MoveToEndOfBlock     \li (none)                           \li Alt+Down, Meta+E       \li (none)          \li (none)     \row    \li MoveToStartOfDocument\li Ctrl+Home                        \li Ctrl+Up, Home          \li Ctrl+Home       \li Ctrl+Home     \row    \li MoveToEndOfDocument  \li Ctrl+End                         \li Ctrl+Down, End         \li Ctrl+End        \li Ctrl+End     \row    \li SelectNextChar       \li Shift+Right                      \li Shift+Right            \li Shift+Right     \li Shift+Right     \row    \li SelectPreviousChar   \li Shift+Left                       \li Shift+Left             \li Shift+Left      \li Shift+Left     \row    \li SelectNextWord       \li Ctrl+Shift+Right                 \li Alt+Shift+Right        \li Ctrl+Shift+Right \li Ctrl+Shift+Right     \row    \li SelectPreviousWord   \li Ctrl+Shift+Left                  \li Alt+Shift+Left         \li Ctrl+Shift+Left \li Ctrl+Shift+Left     \row    \li SelectNextLine       \li Shift+Down                       \li Shift+Down             \li Shift+Down     \li Shift+Down     \row    \li SelectPreviousLine   \li Shift+Up                         \li Shift+Up               \li Shift+Up       \li Shift+Up     \row    \li SelectNextPage       \li Shift+PgDown                     \li Shift+PgDown           \li Shift+PgDown   \li Shift+PgDown     \row    \li SelectPreviousPage   \li Shift+PgUp                       \li Shift+PgUp             \li Shift+PgUp     \li Shift+PgUp     \row    \li SelectStartOfLine    \li Shift+Home                       \li Ctrl+Shift+Left        \li Shift+Home     \li Shift+Home     \row    \li SelectEndOfLine      \li Shift+End                        \li Ctrl+Shift+Right       \li Shift+End      \li Shift+End     \row    \li SelectStartOfBlock   \li (none)                           \li Alt+Shift+Up, Meta+Shift+A \li (none)     \li (none)     \row    \li SelectEndOfBlock     \li (none)                           \li Alt+Shift+Down, Meta+Shift+E \li (none)   \li (none)     \row    \li SelectStartOfDocument\li Ctrl+Shift+Home                  \li Ctrl+Shift+Up, Shift+Home          \li Ctrl+Shift+Home\li Ctrl+Shift+Home     \row    \li SelectEndOfDocument  \li Ctrl+Shift+End                   \li Ctrl+Shift+Down, Shift+End        \li Ctrl+Shift+End \li Ctrl+Shift+End     \row    \li DeleteStartOfWord    \li Ctrl+Backspace                   \li Alt+Backspace          \li Ctrl+Backspace \li Ctrl+Backspace     \row    \li DeleteEndOfWord      \li Ctrl+Del                         \li (none)                 \li Ctrl+Del       \li Ctrl+Del     \row    \li DeleteEndOfLine      \li (none)                           \li (none)                 \li Ctrl+K         \li Ctrl+K     \row    \li InsertParagraphSeparator     \li Enter                    \li Enter                  \li Enter          \li Enter     \row    \li InsertLineSeparator          \li Shift+Enter              \li Meta+Enter             \li Shift+Enter    \li Shift+Enter     \endtable      Note that, since the key sequences used for the standard shortcuts differ     between platforms, you still need to test your shortcuts on each platform     to ensure that you do not unintentionally assign the same key sequence to     many actions.      \section1 Keyboard Layout Issues      Many key sequence specifications are chosen by developers based on the     layout of certain types of keyboard, rather than choosing keys that     represent the first letter of an action's name, such as \key{Ctrl S}     ("Ctrl+S") or \key{Ctrl C} ("Ctrl+C").     Additionally, because certain symbols can only be entered with the     help of modifier keys on certain keyboard layouts, key sequences intended     for use with one keyboard layout may map to a different key, map to no     keys at all, or require an additional modifier key to be used on     different keyboard layouts.      For example, the shortcuts, \key{Ctrl plus} and \key{Ctrl minus}, are often     used as shortcuts for zoom operations in graphics applications, and these     may be specified as "Ctrl++" and "Ctrl+-" respectively. However, the way     these shortcuts are specified and interpreted depends on the keyboard layout.     Users of Norwegian keyboards will note that the \key{+} and \key{-} keys     are not adjacent on the keyboard, but will still be able to activate both     shortcuts without needing to press the \key{Shift} key. However, users     with British keyboards will need to hold down the \key{Shift} key     to enter the \key{+} symbol, making the shortcut effectively the same as     "Ctrl+Shift+=".      Although some developers might resort to fully specifying all the modifiers     they use on their keyboards to activate a shortcut, this will also result     in unexpected behavior for users of different keyboard layouts.      For example, a developer using a British keyboard may decide to specify     "Ctrl+Shift+=" as the key sequence in order to create a shortcut that     coincidentally behaves in the same way as \key{Ctrl plus}. However, the     \key{=} key needs to be accessed using the \key{Shift} key on Norwegian     keyboard, making the required shortcut effectively \key{Ctrl Shift Shift =}     (an impossible key combination).      As a result, both human-readable strings and hard-coded key codes     can both be problematic to use when specifying a key sequence that     can be used on a variety of different keyboard layouts. Only the     use of \l{QKeySequence::StandardKey} {standard shortcuts}     guarantees that the user will be able to use the shortcuts that     the developer intended.      Despite this, we can address this issue by ensuring that human-readable     strings are used, making it possible for translations of key sequences to     be made for users of different languages. This approach will be successful     for users whose keyboards have the most typical layout for the language     they are using.      \section1 GNU Emacs Style Key Sequences      Key sequences similar to those used in \l{GNU Emacs}, allowing up to four     key codes, can be created by using the multiple argument constructor,     or by passing a human-readable string of comma-separated key sequences.      For example, the key sequence, \key{Ctrl X} followed by \key{Ctrl C}, can     be specified using either of the following ways:      \snippet doc/src/snippets/code/src_gui_kernel_qkeysequence.cpp 1      \warning A QApplication instance must have been constructed before a              QKeySequence is created; otherwise, your application may crash.      \sa QShortcut */
end_comment
begin_comment
comment|/*!     \enum QKeySequence::SequenceMatch      \value NoMatch The key sequences are different; not even partially     matching.     \value PartialMatch The key sequences match partially, but are not     the same.     \value ExactMatch The key sequences are the same.     \omitvalue Identical */
end_comment
begin_comment
comment|/*!     \enum QKeySequence::SequenceFormat      \value NativeText The key sequence as a platform specific string.     This means that it will be shown translated and on the Mac it will     resemble a key sequence from the menu bar. This enum is best used when you     want to display the string to the user.      \value PortableText The key sequence is given in a "portable" format,     suitable for reading and writing to a file. In many cases, it will look     similar to the native text on Windows and X11. */
end_comment
begin_struct
specifier|static
specifier|const
struct|struct
block|{
DECL|member|key
name|int
name|key
decl_stmt|;
DECL|member|name
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
block|}
DECL|variable|keyname
name|keyname
index|[]
init|=
block|{
comment|//: This and all following "incomprehensible" strings in QShortcut context
comment|//: are key names. Please use the localized names appearing on actual
comment|//: keyboards or whatever is commonly used.
block|{
name|Qt
operator|::
name|Key_Space
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Space"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Escape
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Esc"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Tab
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Tab"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Backtab
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Backtab"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Backspace
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Backspace"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Return
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Return"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Enter
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Enter"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Insert
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Ins"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Delete
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Del"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Pause
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Pause"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Print
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Print"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_SysReq
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"SysReq"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Home
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Home"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_End
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"End"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Left
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Left"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Up
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Up"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Right
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Right"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Down
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Down"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_PageUp
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"PgUp"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_PageDown
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"PgDown"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_CapsLock
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"CapsLock"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_NumLock
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"NumLock"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_ScrollLock
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"ScrollLock"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Menu
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Menu"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Help
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Help"
argument_list|)
block|}
block|,
comment|// Special keys
comment|// Includes multimedia, launcher, lan keys ( bluetooth, wireless )
comment|// window navigation
block|{
name|Qt
operator|::
name|Key_Back
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Back"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Forward
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Forward"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Stop
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Stop"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Refresh
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Refresh"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_VolumeDown
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Volume Down"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_VolumeMute
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Volume Mute"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_VolumeUp
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Volume Up"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_BassBoost
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Bass Boost"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_BassUp
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Bass Up"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_BassDown
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Bass Down"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_TrebleUp
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Treble Up"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_TrebleDown
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Treble Down"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_MediaPlay
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Media Play"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_MediaStop
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Media Stop"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_MediaPrevious
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Media Previous"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_MediaNext
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Media Next"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_MediaRecord
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Media Record"
argument_list|)
block|}
block|,
comment|//: Media player pause button
block|{
name|Qt
operator|::
name|Key_MediaPause
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Media Pause"
argument_list|)
block|}
block|,
comment|//: Media player button to toggle between playing and paused
block|{
name|Qt
operator|::
name|Key_MediaTogglePlayPause
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Toggle Media Play/Pause"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_HomePage
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Home Page"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Favorites
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Favorites"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Search
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Search"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Standby
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Standby"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_OpenUrl
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Open URL"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_LaunchMail
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Launch Mail"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_LaunchMedia
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Launch Media"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Launch0
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Launch (0)"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Launch1
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Launch (1)"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Launch2
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Launch (2)"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Launch3
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Launch (3)"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Launch4
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Launch (4)"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Launch5
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Launch (5)"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Launch6
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Launch (6)"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Launch7
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Launch (7)"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Launch8
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Launch (8)"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Launch9
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Launch (9)"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_LaunchA
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Launch (A)"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_LaunchB
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Launch (B)"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_LaunchC
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Launch (C)"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_LaunchD
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Launch (D)"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_LaunchE
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Launch (E)"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_LaunchF
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Launch (F)"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_MonBrightnessUp
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Monitor Brightness Up"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_MonBrightnessDown
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Monitor Brightness Down"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_KeyboardLightOnOff
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Keyboard Light On/Off"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_KeyboardBrightnessUp
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Keyboard Brightness Up"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_KeyboardBrightnessDown
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Keyboard Brightness Down"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_PowerOff
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Power Off"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_WakeUp
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Wake Up"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Eject
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Eject"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_ScreenSaver
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Screensaver"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_WWW
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"WWW"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Sleep
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Sleep"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_LightBulb
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"LightBulb"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Shop
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Shop"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_History
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"History"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_AddFavorite
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Add Favorite"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_HotLinks
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Hot Links"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_BrightnessAdjust
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Adjust Brightness"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Finance
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Finance"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Community
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Community"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_AudioRewind
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Audio Rewind"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_BackForward
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Back Forward"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_ApplicationLeft
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Application Left"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_ApplicationRight
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Application Right"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Book
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Book"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_CD
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"CD"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Calculator
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Calculator"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Clear
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Clear"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_ClearGrab
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Clear Grab"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Close
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Close"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Copy
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Copy"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Cut
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Cut"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Display
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Display"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_DOS
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"DOS"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Documents
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Documents"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Excel
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Spreadsheet"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Explorer
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Browser"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Game
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Game"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Go
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Go"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_iTouch
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"iTouch"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_LogOff
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Logoff"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Market
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Market"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Meeting
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Meeting"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_MenuKB
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Keyboard Menu"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_MenuPB
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Menu PB"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_MySites
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"My Sites"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_News
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"News"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_OfficeHome
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Home Office"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Option
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Option"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Paste
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Paste"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Phone
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Phone"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Reply
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Reply"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Reload
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Reload"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_RotateWindows
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Rotate Windows"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_RotationPB
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Rotation PB"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_RotationKB
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Rotation KB"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Save
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Save"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Send
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Send"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Spell
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Spellchecker"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_SplitScreen
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Split Screen"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Support
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Support"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_TaskPane
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Task Panel"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Terminal
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Terminal"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Tools
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Tools"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Travel
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Travel"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Video
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Video"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Word
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Word Processor"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Xfer
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"XFer"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_ZoomIn
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Zoom In"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_ZoomOut
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Zoom Out"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Away
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Away"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Messenger
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Messenger"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_WebCam
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"WebCam"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_MailForward
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Mail Forward"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Pictures
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Pictures"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Music
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Music"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Battery
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Battery"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Bluetooth
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Bluetooth"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_WLAN
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Wireless"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_UWB
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Ultra Wide Band"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_AudioForward
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Audio Forward"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_AudioRepeat
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Audio Repeat"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_AudioRandomPlay
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Audio Random Play"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Subtitle
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Subtitle"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_AudioCycleTrack
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Audio Cycle Track"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Time
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Time"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Select
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Select"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_View
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"View"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_TopMenu
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Top Menu"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Suspend
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Suspend"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Hibernate
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Hibernate"
argument_list|)
block|}
block|,
comment|// --------------------------------------------------------------
comment|// More consistent namings
block|{
name|Qt
operator|::
name|Key_Print
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Print Screen"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_PageUp
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Page Up"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_PageDown
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Page Down"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_CapsLock
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Caps Lock"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_NumLock
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Num Lock"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_NumLock
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Number Lock"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_ScrollLock
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Scroll Lock"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Insert
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Insert"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Delete
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Delete"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Escape
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Escape"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_SysReq
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"System Request"
argument_list|)
block|}
block|,
comment|// --------------------------------------------------------------
comment|// Keypad navigation keys
block|{
name|Qt
operator|::
name|Key_Select
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Select"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Yes
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Yes"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_No
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"No"
argument_list|)
block|}
block|,
comment|// --------------------------------------------------------------
comment|// Device keys
block|{
name|Qt
operator|::
name|Key_Context1
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Context1"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Context2
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Context2"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Context3
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Context3"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Context4
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Context4"
argument_list|)
block|}
block|,
comment|//: Button to start a call (note: a separate button is used to end the call)
block|{
name|Qt
operator|::
name|Key_Call
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Call"
argument_list|)
block|}
block|,
comment|//: Button to end a call (note: a separate button is used to start the call)
block|{
name|Qt
operator|::
name|Key_Hangup
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Hangup"
argument_list|)
block|}
block|,
comment|//: Button that will hang up if we're in call, or make a call if we're not.
block|{
name|Qt
operator|::
name|Key_ToggleCallHangup
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Toggle Call/Hangup"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Flip
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Flip"
argument_list|)
block|}
block|,
comment|//: Button to trigger voice dialing
block|{
name|Qt
operator|::
name|Key_VoiceDial
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Voice Dial"
argument_list|)
block|}
block|,
comment|//: Button to redial the last number called
block|{
name|Qt
operator|::
name|Key_LastNumberRedial
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Last Number Redial"
argument_list|)
block|}
block|,
comment|//: Button to trigger the camera shutter (take a picture)
block|{
name|Qt
operator|::
name|Key_Camera
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Camera Shutter"
argument_list|)
block|}
block|,
comment|//: Button to focus the camera
block|{
name|Qt
operator|::
name|Key_CameraFocus
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Camera Focus"
argument_list|)
block|}
block|,
comment|// --------------------------------------------------------------
comment|// Japanese keyboard support
block|{
name|Qt
operator|::
name|Key_Kanji
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Kanji"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Muhenkan
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Muhenkan"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Henkan
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Henkan"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Romaji
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Romaji"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Hiragana
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Hiragana"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Katakana
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Katakana"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Hiragana_Katakana
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Hiragana Katakana"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Zenkaku
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Zenkaku"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Hankaku
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Hankaku"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Zenkaku_Hankaku
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Zenkaku Hankaku"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Touroku
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Touroku"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Massyo
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Massyo"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Kana_Lock
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Kana Lock"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Kana_Shift
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Kana Shift"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Eisu_Shift
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Eisu Shift"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Eisu_toggle
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Eisu toggle"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Codeinput
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Code input"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_MultipleCandidate
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Multiple Candidate"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_PreviousCandidate
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Previous Candidate"
argument_list|)
block|}
block|,
comment|// --------------------------------------------------------------
comment|// Korean keyboard support
block|{
name|Qt
operator|::
name|Key_Hangul
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Hangul"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Hangul_Start
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Hangul Start"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Hangul_End
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Hangul End"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Hangul_Hanja
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Hangul Hanja"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Hangul_Jamo
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Hangul Jamo"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Hangul_Romaja
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Hangul Romaja"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Hangul_Jeonja
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Hangul Jeonja"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Hangul_Banja
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Hangul Banja"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Hangul_PreHanja
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Hangul PreHanja"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Hangul_PostHanja
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Hangul PostHanja"
argument_list|)
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Hangul_Special
block|,
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Hangul Special"
argument_list|)
block|}
block|,
block|{
literal|0
block|,
literal|0
block|}
block|}
struct|;
end_struct
begin_comment
comment|//Table of key bindings. It must be sorted on key sequence.
end_comment
begin_comment
comment|//A priority of 1 indicates that this is the primary key binding when multiple are defined.
end_comment
begin_enum
DECL|enum|KeyPlatform
enum|enum
name|KeyPlatform
block|{
DECL|enumerator|KB_Win
name|KB_Win
init|=
operator|(
literal|1
operator|<<
name|QPlatformTheme
operator|::
name|WindowsKeyboardScheme
operator|)
block|,
DECL|enumerator|KB_Mac
name|KB_Mac
init|=
operator|(
literal|1
operator|<<
name|QPlatformTheme
operator|::
name|MacKeyboardScheme
operator|)
block|,
DECL|enumerator|KB_X11
name|KB_X11
init|=
operator|(
literal|1
operator|<<
name|QPlatformTheme
operator|::
name|X11KeyboardScheme
operator|)
block|,
DECL|enumerator|KB_KDE
name|KB_KDE
init|=
operator|(
literal|1
operator|<<
name|QPlatformTheme
operator|::
name|KdeKeyboardScheme
operator|)
block|,
DECL|enumerator|KB_Gnome
name|KB_Gnome
init|=
operator|(
literal|1
operator|<<
name|QPlatformTheme
operator|::
name|GnomeKeyboardScheme
operator|)
block|,
DECL|enumerator|KB_CDE
name|KB_CDE
init|=
operator|(
literal|1
operator|<<
name|QPlatformTheme
operator|::
name|CdeKeyboardScheme
operator|)
block|,
DECL|enumerator|KB_All
name|KB_All
init|=
literal|0xffff
block|}
enum|;
end_enum
begin_decl_stmt
DECL|member|keyBindings
specifier|const
name|QKeyBinding
name|QKeySequencePrivate
operator|::
name|keyBindings
index|[]
init|=
block|{
comment|//   StandardKey                            Priority    Key Sequence                            Platforms
block|{
name|QKeySequence
operator|::
name|Back
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_Backspace
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|InsertParagraphSeparator
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_Return
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|InsertParagraphSeparator
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_Enter
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Delete
block|,
literal|1
block|,
name|Qt
operator|::
name|Key_Delete
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToStartOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_Home
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToStartOfDocument
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_Home
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToEndOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_End
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToEndOfDocument
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_End
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToPreviousChar
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_Left
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToPreviousLine
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_Up
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToNextChar
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_Right
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToNextLine
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_Down
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToPreviousPage
block|,
literal|1
block|,
name|Qt
operator|::
name|Key_PageUp
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToNextPage
block|,
literal|1
block|,
name|Qt
operator|::
name|Key_PageDown
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|HelpContents
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_F1
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|FindNext
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_F3
block|,
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|FindNext
block|,
literal|1
block|,
name|Qt
operator|::
name|Key_F3
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Refresh
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_F5
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Undo
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_F14
block|,
name|KB_X11
block|}
block|,
comment|//Undo on sun keyboards
block|{
name|QKeySequence
operator|::
name|Copy
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_F16
block|,
name|KB_X11
block|}
block|,
comment|//Copy on sun keyboards
block|{
name|QKeySequence
operator|::
name|Paste
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_F18
block|,
name|KB_X11
block|}
block|,
comment|//Paste on sun keyboards
block|{
name|QKeySequence
operator|::
name|Cut
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_F20
block|,
name|KB_X11
block|}
block|,
comment|//Cut on sun keyboards
block|{
name|QKeySequence
operator|::
name|PreviousChild
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_Back
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|NextChild
block|,
literal|0
block|,
name|Qt
operator|::
name|Key_Forward
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Forward
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Backspace
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|InsertLineSeparator
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Return
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|InsertLineSeparator
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Enter
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Paste
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Insert
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Cut
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Delete
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
comment|//## Check if this should work on mac
block|{
name|QKeySequence
operator|::
name|SelectStartOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Home
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectStartOfDocument
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Home
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectEndOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_End
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectEndOfDocument
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_End
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectPreviousChar
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectPreviousLine
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Up
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectNextChar
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectNextLine
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Down
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectPreviousPage
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_PageUp
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectNextPage
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_PageDown
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|WhatsThis
block|,
literal|1
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_F1
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|FindPrevious
block|,
literal|0
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_F3
block|,
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|FindPrevious
block|,
literal|1
block|,
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_F3
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|ZoomIn
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Plus
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|NextChild
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Comma
block|,
name|KB_KDE
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Preferences
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Comma
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|ZoomOut
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Minus
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|PreviousChild
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Period
block|,
name|KB_KDE
block|}
block|,
block|{
name|QKeySequence
operator|::
name|HelpContents
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Question
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectAll
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_A
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Bold
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_B
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Copy
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_C
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Delete
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_D
block|,
name|KB_X11
block|}
block|,
comment|//emacs (line edit only)
block|{
name|QKeySequence
operator|::
name|Find
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_F
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|FindNext
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_G
block|,
name|KB_Gnome
operator||
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|FindNext
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_G
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Replace
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_H
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Replace
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_H
block|,
name|KB_Gnome
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Italic
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_I
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|DeleteEndOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_K
block|,
name|KB_X11
block|}
block|,
comment|//emacs (line edit only)
block|{
name|QKeySequence
operator|::
name|New
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_N
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Open
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_O
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Print
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_P
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Quit
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Q
block|,
name|KB_Gnome
operator||
name|KB_KDE
operator||
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Refresh
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_R
block|,
name|KB_Gnome
operator||
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Replace
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_R
block|,
name|KB_KDE
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Save
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_S
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|AddTab
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_T
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Underline
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_U
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Paste
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_V
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Close
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_W
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Close
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_W
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Cut
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_X
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Redo
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Y
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Undo
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Z
block|,
name|KB_All
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Back
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_BracketLeft
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Forward
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_BracketRight
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|PreviousChild
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_BraceLeft
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|NextChild
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_BraceRight
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|NextChild
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Tab
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|NextChild
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Tab
block|,
name|KB_Mac
block|}
block|,
comment|//different priority from above
block|{
name|QKeySequence
operator|::
name|DeleteStartOfWord
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Backspace
block|,
name|KB_X11
operator||
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Copy
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Insert
block|,
name|KB_X11
operator||
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|DeleteEndOfWord
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Delete
block|,
name|KB_X11
operator||
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToStartOfDocument
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Home
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToEndOfDocument
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_End
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Back
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToPreviousWord
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToStartOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToStartOfDocument
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Up
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Forward
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToEndOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToNextWord
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToEndOfDocument
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_Down
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Close
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_F4
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Close
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_F4
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|NextChild
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_F6
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|FindPrevious
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_G
block|,
name|KB_Gnome
operator||
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|FindPrevious
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_G
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|AddTab
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_N
block|,
name|KB_KDE
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SaveAs
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_S
block|,
name|KB_Gnome
operator||
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Redo
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Z
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Redo
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Z
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|PreviousChild
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Backtab
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|PreviousChild
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Backtab
block|,
name|KB_Mac
block|}
block|,
comment|//different priority from above
block|{
name|QKeySequence
operator|::
name|Paste
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Insert
block|,
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectStartOfDocument
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Home
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectEndOfDocument
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_End
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectPreviousWord
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectStartOfLine
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectStartOfDocument
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Up
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectNextWord
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectEndOfLine
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectEndOfDocument
block|,
literal|1
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Down
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|PreviousChild
block|,
literal|0
block|,
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_F6
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Undo
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_Backspace
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|DeleteStartOfWord
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_Backspace
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|DeleteEndOfWord
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_Delete
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Back
block|,
literal|1
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToPreviousWord
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToStartOfBlock
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_Up
block|,
name|KB_Mac
block|}
block|,
comment|//mac only
block|{
name|QKeySequence
operator|::
name|MoveToNextWord
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Forward
block|,
literal|1
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_Win
operator||
name|KB_X11
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToEndOfBlock
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_Down
block|,
name|KB_Mac
block|}
block|,
comment|//mac only
block|{
name|QKeySequence
operator|::
name|MoveToPreviousPage
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_PageUp
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToNextPage
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_PageDown
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Redo
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Backspace
block|,
name|KB_Win
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectPreviousWord
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectStartOfBlock
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Up
block|,
name|KB_Mac
block|}
block|,
comment|//mac only
block|{
name|QKeySequence
operator|::
name|SelectNextWord
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectEndOfBlock
block|,
literal|0
block|,
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Down
block|,
name|KB_Mac
block|}
block|,
comment|//mac only
block|{
name|QKeySequence
operator|::
name|MoveToStartOfBlock
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_A
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|Delete
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_D
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToEndOfBlock
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_E
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|InsertLineSeparator
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_Return
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|InsertLineSeparator
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_Enter
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToStartOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToPreviousPage
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_Up
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToEndOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToNextPage
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_Down
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToPreviousPage
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_PageUp
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|MoveToNextPage
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|Key_PageDown
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectStartOfBlock
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_A
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectEndOfBlock
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_E
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectStartOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Left
block|,
name|KB_Mac
block|}
block|,
block|{
name|QKeySequence
operator|::
name|SelectEndOfLine
block|,
literal|0
block|,
name|Qt
operator|::
name|META
operator||
name|Qt
operator|::
name|SHIFT
operator||
name|Qt
operator|::
name|Key_Right
block|,
name|KB_Mac
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|numberOfKeyBindings
specifier|const
name|uint
name|QKeySequencePrivate
operator|::
name|numberOfKeyBindings
init|=
sizeof|sizeof
argument_list|(
name|QKeySequencePrivate
operator|::
name|keyBindings
argument_list|)
operator|/
operator|(
sizeof|sizeof
argument_list|(
name|QKeyBinding
argument_list|)
operator|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*!     \enum QKeySequence::StandardKey     \since 4.2      This enum represent standard key bindings. They can be used to     assign platform dependent keyboard shortcuts to a QAction.      Note that the key bindings are platform dependent. The currently     bound shortcuts can be queried using keyBindings().      \value AddTab           Add new tab.     \value Back             Navigate back.     \value Bold             Bold text.     \value Close            Close document/tab.     \value Copy             Copy.     \value Cut              Cut.     \value Delete           Delete.     \value DeleteEndOfLine          Delete end of line.     \value DeleteEndOfWord          Delete word from the end of the cursor.     \value DeleteStartOfWord        Delete the beginning of a word up to the cursor.     \value Find             Find in document.     \value FindNext         Find next result.     \value FindPrevious     Find previous result.     \value Forward          Navigate forward.     \value HelpContents     Open help contents.     \value InsertLineSeparator      Insert a new line.     \value InsertParagraphSeparator Insert a new paragraph.     \value Italic           Italic text.     \value MoveToEndOfBlock         Move cursor to end of block. This shortcut is only used on the OS X.     \value MoveToEndOfDocument      Move cursor to end of document.     \value MoveToEndOfLine          Move cursor to end of line.     \value MoveToNextChar           Move cursor to next character.     \value MoveToNextLine           Move cursor to next line.     \value MoveToNextPage           Move cursor to next page.     \value MoveToNextWord           Move cursor to next word.     \value MoveToPreviousChar       Move cursor to previous character.     \value MoveToPreviousLine       Move cursor to previous line.     \value MoveToPreviousPage       Move cursor to previous page.     \value MoveToPreviousWord       Move cursor to previous word.     \value MoveToStartOfBlock       Move cursor to start of a block. This shortcut is only used on OS X.     \value MoveToStartOfDocument    Move cursor to start of document.     \value MoveToStartOfLine        Move cursor to start of line.     \value New              Create new document.     \value NextChild        Navigate to next tab or child window.     \value Open             Open document.     \value Paste            Paste.     \value Preferences      Open the preferences dialog.     \value PreviousChild    Navigate to previous tab or child window.     \value Print            Print document.     \value Quit             Quit the application.     \value Redo             Redo.     \value Refresh          Refresh or reload current document.     \value Replace          Find and replace.     \value SaveAs           Save document after prompting the user for a file name.     \value Save             Save document.     \value SelectAll        Select all text.     \value SelectEndOfBlock         Extend selection to the end of a text block. This shortcut is only used on OS X.     \value SelectEndOfDocument      Extend selection to end of document.     \value SelectEndOfLine          Extend selection to end of line.     \value SelectNextChar           Extend selection to next character.     \value SelectNextLine           Extend selection to next line.     \value SelectNextPage           Extend selection to next page.     \value SelectNextWord           Extend selection to next word.     \value SelectPreviousChar       Extend selection to previous character.     \value SelectPreviousLine       Extend selection to previous line.     \value SelectPreviousPage       Extend selection to previous page.     \value SelectPreviousWord       Extend selection to previous word.     \value SelectStartOfBlock       Extend selection to the start of a text block. This shortcut is only used on OS X.     \value SelectStartOfDocument    Extend selection to start of document.      \value SelectStartOfLine        Extend selection to start of line.     \value Underline        Underline text.     \value Undo             Undo.     \value UnknownKey       Unbound key.     \value WhatsThis        Activate whats this.     \value ZoomIn           Zoom in.     \value ZoomOut          Zoom out. */
end_comment
begin_comment
comment|/*!     \since 4.2      Constructs a QKeySequence object for the given \a key.      The result will depend on the currently running platform.       The resulting object will be based on the first element in the      list of key bindings for the \a key. */
end_comment
begin_constructor
DECL|function|QKeySequence
name|QKeySequence
operator|::
name|QKeySequence
parameter_list|(
name|StandardKey
name|key
parameter_list|)
block|{
specifier|const
name|QList
argument_list|<
name|QKeySequence
argument_list|>
name|bindings
init|=
name|keyBindings
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|//pick only the first/primary shortcut from current bindings
if|if
condition|(
name|bindings
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|d
operator|=
name|bindings
operator|.
name|first
argument_list|()
operator|.
name|d
expr_stmt|;
name|d
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
else|else
name|d
operator|=
operator|new
name|QKeySequencePrivate
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs an empty key sequence. */
end_comment
begin_constructor
DECL|function|QKeySequence
name|QKeySequence
operator|::
name|QKeySequence
parameter_list|()
block|{
specifier|static
name|QKeySequencePrivate
name|shared_empty
decl_stmt|;
name|d
operator|=
operator|&
name|shared_empty
expr_stmt|;
name|d
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
end_constructor
begin_comment
comment|/*!     Creates a key sequence from the \a key string. For example     "Ctrl+O" gives CTRL+'O'. The strings "Ctrl",     "Shift", "Alt" and "Meta" are recognized, as well as their     translated equivalents in the "QShortcut" context (using     QObject::tr()).      Up to four key codes may be entered by separating them with     commas, e.g. "Alt+X,Ctrl+S,Q".      \a key should be in NativeText format.      This constructor is typically used with \link QObject::tr() tr     \endlink(), so that shortcut keys can be replaced in     translations:      \snippet doc/src/snippets/code/src_gui_kernel_qkeysequence.cpp 2      Note the "File|Open" translator comment. It is by no means     necessary, but it provides some context for the human translator. */
end_comment
begin_constructor
DECL|function|QKeySequence
name|QKeySequence
operator|::
name|QKeySequence
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
block|{
name|d
operator|=
operator|new
name|QKeySequencePrivate
argument_list|()
expr_stmt|;
name|assign
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \since 4.7     Creates a key sequence from the \a key string based on \a format. */
end_comment
begin_constructor
DECL|function|QKeySequence
name|QKeySequence
operator|::
name|QKeySequence
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
name|QKeySequence
operator|::
name|SequenceFormat
name|format
parameter_list|)
block|{
name|d
operator|=
operator|new
name|QKeySequencePrivate
argument_list|()
expr_stmt|;
name|assign
argument_list|(
name|key
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a key sequence with up to 4 keys \a k1, \a k2,     \a k3 and \a k4.      The key codes are listed in Qt::Key and can be combined with     modifiers (see Qt::Modifier) such as Qt::SHIFT, Qt::CTRL,     Qt::ALT, or Qt::META. */
end_comment
begin_constructor
DECL|function|QKeySequence
name|QKeySequence
operator|::
name|QKeySequence
parameter_list|(
name|int
name|k1
parameter_list|,
name|int
name|k2
parameter_list|,
name|int
name|k3
parameter_list|,
name|int
name|k4
parameter_list|)
block|{
name|d
operator|=
operator|new
name|QKeySequencePrivate
argument_list|()
expr_stmt|;
name|d
operator|->
name|key
index|[
literal|0
index|]
operator|=
name|k1
expr_stmt|;
name|d
operator|->
name|key
index|[
literal|1
index|]
operator|=
name|k2
expr_stmt|;
name|d
operator|->
name|key
index|[
literal|2
index|]
operator|=
name|k3
expr_stmt|;
name|d
operator|->
name|key
index|[
literal|3
index|]
operator|=
name|k4
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Copy constructor. Makes a copy of \a keysequence.  */
end_comment
begin_constructor
DECL|function|QKeySequence
name|QKeySequence
operator|::
name|QKeySequence
parameter_list|(
specifier|const
name|QKeySequence
modifier|&
name|keysequence
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|keysequence
operator|.
name|d
argument_list|)
block|{
name|d
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
end_constructor
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_MAC
end_ifdef
begin_function
DECL|function|maybeSwapShortcut
specifier|static
specifier|inline
name|int
name|maybeSwapShortcut
parameter_list|(
name|int
name|shortcut
parameter_list|)
block|{
if|if
condition|(
name|qApp
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_MacDontSwapCtrlAndMeta
argument_list|)
condition|)
block|{
name|uint
name|oldshortcut
init|=
name|shortcut
decl_stmt|;
name|shortcut
operator|&=
operator|~
operator|(
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|META
operator|)
expr_stmt|;
if|if
condition|(
name|oldshortcut
operator|&
name|Qt
operator|::
name|CTRL
condition|)
name|shortcut
operator||=
name|Qt
operator|::
name|META
expr_stmt|;
if|if
condition|(
name|oldshortcut
operator|&
name|Qt
operator|::
name|META
condition|)
name|shortcut
operator||=
name|Qt
operator|::
name|CTRL
expr_stmt|;
block|}
return|return
name|shortcut
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \since 4.2      Returns a list of key bindings for the given \a key.     The result of calling this function will vary based on the target platform.      The first element of the list indicates the primary shortcut for the given platform.      If the result contains more than one result, these can     be considered alternative shortcuts on the same platform for the given \a key. */
end_comment
begin_function
DECL|function|keyBindings
name|QList
argument_list|<
name|QKeySequence
argument_list|>
name|QKeySequence
operator|::
name|keyBindings
parameter_list|(
name|StandardKey
name|key
parameter_list|)
block|{
specifier|const
name|uint
name|platform
init|=
name|QKeySequencePrivate
operator|::
name|currentKeyPlatforms
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QKeySequence
argument_list|>
name|list
decl_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QKeySequencePrivate
operator|::
name|numberOfKeyBindings
condition|;
operator|++
name|i
control|)
block|{
name|QKeyBinding
name|keyBinding
init|=
name|QKeySequencePrivate
operator|::
name|keyBindings
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|keyBinding
operator|.
name|standardKey
operator|==
name|key
operator|&&
operator|(
name|keyBinding
operator|.
name|platform
operator|&
name|platform
operator|)
condition|)
block|{
name|uint
name|shortcut
init|=
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|maybeSwapShortcut
argument_list|(
name|QKeySequencePrivate
operator|::
name|keyBindings
index|[
name|i
index|]
operator|.
name|shortcut
argument_list|)
decl_stmt|;
else|#
directive|else
name|QKeySequencePrivate
operator|::
name|keyBindings
index|[
name|i
index|]
operator|.
name|shortcut
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|keyBinding
operator|.
name|priority
operator|>
literal|0
condition|)
name|list
operator|.
name|prepend
argument_list|(
name|QKeySequence
argument_list|(
name|shortcut
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|list
operator|.
name|append
argument_list|(
name|QKeySequence
argument_list|(
name|shortcut
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
end_function
begin_comment
comment|/*!     Destroys the key sequence.  */
end_comment
begin_destructor
DECL|function|~QKeySequence
name|QKeySequence
operator|::
name|~
name|QKeySequence
parameter_list|()
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \internal     KeySequences should never be modified, but rather just created.     Internally though we do need to modify to keep pace in event     delivery. */
end_comment
begin_function
DECL|function|setKey
name|void
name|QKeySequence
operator|::
name|setKey
parameter_list|(
name|int
name|key
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
literal|4
argument_list|,
literal|"QKeySequence::setKey"
argument_list|,
literal|"index out of range"
argument_list|)
expr_stmt|;
name|qAtomicDetach
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|->
name|key
index|[
name|index
index|]
operator|=
name|key
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of keys in the key sequence.     The maximum is 4.  */
end_comment
begin_function
DECL|function|count
name|int
name|QKeySequence
operator|::
name|count
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|key
index|[
literal|0
index|]
condition|)
return|return
literal|0
return|;
if|if
condition|(
operator|!
name|d
operator|->
name|key
index|[
literal|1
index|]
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|d
operator|->
name|key
index|[
literal|2
index|]
condition|)
return|return
literal|2
return|;
if|if
condition|(
operator|!
name|d
operator|->
name|key
index|[
literal|3
index|]
condition|)
return|return
literal|3
return|;
return|return
literal|4
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the key sequence is empty; otherwise returns     false. */
end_comment
begin_function
DECL|function|isEmpty
name|bool
name|QKeySequence
operator|::
name|isEmpty
parameter_list|()
specifier|const
block|{
return|return
operator|!
name|d
operator|->
name|key
index|[
literal|0
index|]
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the shortcut key sequence for the mnemonic in \a text,     or an empty key sequence if no mnemonics are found.      For example, mnemonic("E&xit") returns \c{Qt::ALT+Qt::Key_X},     mnemonic("&Quit") returns \c{ALT+Key_Q}, and mnemonic("Quit")     returns an empty QKeySequence.      We provide a \l{accelerators.html}{list of common mnemonics}     in English. At the time of writing, Microsoft and Open Group do     not appear to have issued equivalent recommendations for other     languages.      \sa qt_set_sequence_auto_mnemonic() */
end_comment
begin_function
DECL|function|mnemonic
name|QKeySequence
name|QKeySequence
operator|::
name|mnemonic
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QKeySequence
name|ret
decl_stmt|;
if|if
condition|(
name|qt_sequence_no_mnemonics
condition|)
return|return
name|ret
return|;
name|bool
name|found
init|=
literal|false
decl_stmt|;
name|int
name|p
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|p
operator|>=
literal|0
condition|)
block|{
name|p
operator|=
name|text
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'&'
argument_list|)
argument_list|,
name|p
argument_list|)
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|p
operator|<=
literal|0
operator|||
name|p
operator|>=
operator|(
name|int
operator|)
name|text
operator|.
name|length
argument_list|()
condition|)
break|break;
if|if
condition|(
name|text
operator|.
name|at
argument_list|(
name|p
argument_list|)
operator|!=
name|QLatin1Char
argument_list|(
literal|'&'
argument_list|)
condition|)
block|{
name|QChar
name|c
init|=
name|text
operator|.
name|at
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|isPrint
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|c
operator|=
name|c
operator|.
name|toUpper
argument_list|()
expr_stmt|;
name|ret
operator|=
name|QKeySequence
argument_list|(
name|c
operator|.
name|unicode
argument_list|()
operator|+
name|Qt
operator|::
name|ALT
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_DEBUG
return|return
name|ret
return|;
else|#
directive|else
name|found
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QKeySequence::mnemonic: \"%s\" contains multiple occurrences of '&'"
argument_list|,
name|qPrintable
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
block|}
name|p
operator|++
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!     \fn int QKeySequence::assign(const QString&keys)      Adds the given \a keys to the key sequence. \a keys may     contain up to four key codes, provided they are separated by a     comma; for example, "Alt+X,Ctrl+S,Z". The return value is the     number of key codes added.     \a keys should be in NativeText format. */
end_comment
begin_function
DECL|function|assign
name|int
name|QKeySequence
operator|::
name|assign
parameter_list|(
specifier|const
name|QString
modifier|&
name|ks
parameter_list|)
block|{
return|return
name|assign
argument_list|(
name|ks
argument_list|,
name|NativeText
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn int QKeySequence::assign(const QString&keys, QKeySequence::SequenceFormat format)     \since 4.7      Adds the given \a keys to the key sequence (based on \a format).     \a keys may contain up to four key codes, provided they are     separated by a comma; for example, "Alt+X,Ctrl+S,Z". The return     value is the number of key codes added. */
end_comment
begin_function
DECL|function|assign
name|int
name|QKeySequence
operator|::
name|assign
parameter_list|(
specifier|const
name|QString
modifier|&
name|ks
parameter_list|,
name|QKeySequence
operator|::
name|SequenceFormat
name|format
parameter_list|)
block|{
name|QString
name|keyseq
init|=
name|ks
decl_stmt|;
name|QString
name|part
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
name|int
name|p
init|=
literal|0
decl_stmt|,
name|diff
init|=
literal|0
decl_stmt|;
comment|// Run through the whole string, but stop
comment|// if we have 4 keys before the end.
while|while
condition|(
name|keyseq
operator|.
name|length
argument_list|()
operator|&&
name|n
operator|<
literal|4
condition|)
block|{
comment|// We MUST use something to separate each sequence, and space
comment|// does not cut it, since some of the key names have space
comment|// in them.. (Let's hope no one translate with a comma in it:)
name|p
operator|=
name|keyseq
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|-
literal|1
operator|!=
name|p
condition|)
block|{
if|if
condition|(
name|p
operator|==
name|keyseq
operator|.
name|count
argument_list|()
operator|-
literal|1
condition|)
block|{
comment|// Last comma 'Ctrl+,'
name|p
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
operator|==
name|keyseq
operator|.
name|at
argument_list|(
name|p
operator|+
literal|1
argument_list|)
condition|)
comment|// e.g. 'Ctrl+,, Shift+,,'
name|p
operator|++
expr_stmt|;
if|if
condition|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|==
name|keyseq
operator|.
name|at
argument_list|(
name|p
operator|+
literal|1
argument_list|)
condition|)
block|{
comment|// Space after comma
name|diff
operator|=
literal|1
expr_stmt|;
name|p
operator|++
expr_stmt|;
block|}
else|else
block|{
name|diff
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
name|part
operator|=
name|keyseq
operator|.
name|left
argument_list|(
operator|-
literal|1
operator|==
name|p
condition|?
name|keyseq
operator|.
name|length
argument_list|()
else|:
name|p
operator|-
name|diff
argument_list|)
expr_stmt|;
name|keyseq
operator|=
name|keyseq
operator|.
name|right
argument_list|(
operator|-
literal|1
operator|==
name|p
condition|?
literal|0
else|:
name|keyseq
operator|.
name|length
argument_list|()
operator|-
operator|(
name|p
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|key
index|[
name|n
index|]
operator|=
name|QKeySequencePrivate
operator|::
name|decodeString
argument_list|(
name|part
argument_list|,
name|format
argument_list|)
expr_stmt|;
operator|++
name|n
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
end_function
begin_struct
DECL|struct|QModifKeyName
struct|struct
name|QModifKeyName
block|{
DECL|function|QModifKeyName
name|QModifKeyName
parameter_list|()
block|{ }
DECL|function|QModifKeyName
name|QModifKeyName
parameter_list|(
name|int
name|q
parameter_list|,
name|QChar
name|n
parameter_list|)
member_init_list|:
name|qt_key
argument_list|(
name|q
argument_list|)
member_init_list|,
name|name
argument_list|(
name|n
argument_list|)
block|{ }
DECL|function|QModifKeyName
name|QModifKeyName
parameter_list|(
name|int
name|q
parameter_list|,
specifier|const
name|QString
modifier|&
name|n
parameter_list|)
member_init_list|:
name|qt_key
argument_list|(
name|q
argument_list|)
member_init_list|,
name|name
argument_list|(
name|n
argument_list|)
block|{ }
DECL|member|qt_key
name|int
name|qt_key
decl_stmt|;
DECL|member|name
name|QString
name|name
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QList<QModifKeyName>
argument_list|,
argument|globalModifs
argument_list|)
end_macro
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QList<QModifKeyName>
argument_list|,
argument|globalPortableModifs
argument_list|)
end_macro
begin_comment
comment|/*!   Constructs a single key from the string \a str. */
end_comment
begin_function
DECL|function|decodeString
name|int
name|QKeySequence
operator|::
name|decodeString
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
return|return
name|QKeySequencePrivate
operator|::
name|decodeString
argument_list|(
name|str
argument_list|,
name|NativeText
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|decodeString
name|int
name|QKeySequencePrivate
operator|::
name|decodeString
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|QKeySequence
operator|::
name|SequenceFormat
name|format
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|QString
name|accel
init|=
name|str
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|bool
name|nativeText
init|=
operator|(
name|format
operator|==
name|QKeySequence
operator|::
name|NativeText
operator|)
decl_stmt|;
name|QList
argument_list|<
name|QModifKeyName
argument_list|>
modifier|*
name|gmodifs
decl_stmt|;
if|if
condition|(
name|nativeText
condition|)
block|{
name|gmodifs
operator|=
name|globalModifs
argument_list|()
expr_stmt|;
if|if
condition|(
name|gmodifs
operator|->
name|isEmpty
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_MAC
specifier|const
name|bool
name|dontSwap
init|=
name|qApp
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_MacDontSwapCtrlAndMeta
argument_list|)
decl_stmt|;
if|if
condition|(
name|dontSwap
condition|)
operator|*
name|gmodifs
operator|<<
name|QModifKeyName
argument_list|(
name|Qt
operator|::
name|META
argument_list|,
name|QChar
argument_list|(
name|kCommandUnicode
argument_list|)
argument_list|)
expr_stmt|;
else|else
operator|*
name|gmodifs
operator|<<
name|QModifKeyName
argument_list|(
name|Qt
operator|::
name|CTRL
argument_list|,
name|QChar
argument_list|(
name|kCommandUnicode
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|gmodifs
operator|<<
name|QModifKeyName
argument_list|(
name|Qt
operator|::
name|ALT
argument_list|,
name|QChar
argument_list|(
name|kOptionUnicode
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dontSwap
condition|)
operator|*
name|gmodifs
operator|<<
name|QModifKeyName
argument_list|(
name|Qt
operator|::
name|CTRL
argument_list|,
name|QChar
argument_list|(
name|kControlUnicode
argument_list|)
argument_list|)
expr_stmt|;
else|else
operator|*
name|gmodifs
operator|<<
name|QModifKeyName
argument_list|(
name|Qt
operator|::
name|META
argument_list|,
name|QChar
argument_list|(
name|kControlUnicode
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|gmodifs
operator|<<
name|QModifKeyName
argument_list|(
name|Qt
operator|::
name|SHIFT
argument_list|,
name|QChar
argument_list|(
name|kShiftUnicode
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
operator|*
name|gmodifs
operator|<<
name|QModifKeyName
argument_list|(
name|Qt
operator|::
name|CTRL
argument_list|,
name|QLatin1String
argument_list|(
literal|"ctrl+"
argument_list|)
argument_list|)
operator|<<
name|QModifKeyName
argument_list|(
name|Qt
operator|::
name|SHIFT
argument_list|,
name|QLatin1String
argument_list|(
literal|"shift+"
argument_list|)
argument_list|)
operator|<<
name|QModifKeyName
argument_list|(
name|Qt
operator|::
name|ALT
argument_list|,
name|QLatin1String
argument_list|(
literal|"alt+"
argument_list|)
argument_list|)
operator|<<
name|QModifKeyName
argument_list|(
name|Qt
operator|::
name|META
argument_list|,
name|QLatin1String
argument_list|(
literal|"meta+"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|gmodifs
operator|=
name|globalPortableModifs
argument_list|()
expr_stmt|;
if|if
condition|(
name|gmodifs
operator|->
name|isEmpty
argument_list|()
condition|)
block|{
operator|*
name|gmodifs
operator|<<
name|QModifKeyName
argument_list|(
name|Qt
operator|::
name|CTRL
argument_list|,
name|QLatin1String
argument_list|(
literal|"ctrl+"
argument_list|)
argument_list|)
operator|<<
name|QModifKeyName
argument_list|(
name|Qt
operator|::
name|SHIFT
argument_list|,
name|QLatin1String
argument_list|(
literal|"shift+"
argument_list|)
argument_list|)
operator|<<
name|QModifKeyName
argument_list|(
name|Qt
operator|::
name|ALT
argument_list|,
name|QLatin1String
argument_list|(
literal|"alt+"
argument_list|)
argument_list|)
operator|<<
name|QModifKeyName
argument_list|(
name|Qt
operator|::
name|META
argument_list|,
name|QLatin1String
argument_list|(
literal|"meta+"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|gmodifs
condition|)
return|return
name|ret
return|;
name|QList
argument_list|<
name|QModifKeyName
argument_list|>
name|modifs
decl_stmt|;
if|if
condition|(
name|nativeText
condition|)
block|{
name|modifs
operator|<<
name|QModifKeyName
argument_list|(
name|Qt
operator|::
name|CTRL
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Ctrl"
argument_list|)
operator|.
name|toLower
argument_list|()
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'+'
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QModifKeyName
argument_list|(
name|Qt
operator|::
name|SHIFT
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Shift"
argument_list|)
operator|.
name|toLower
argument_list|()
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'+'
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QModifKeyName
argument_list|(
name|Qt
operator|::
name|ALT
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Alt"
argument_list|)
operator|.
name|toLower
argument_list|()
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'+'
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QModifKeyName
argument_list|(
name|Qt
operator|::
name|META
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Meta"
argument_list|)
operator|.
name|toLower
argument_list|()
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'+'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|modifs
operator|+=
operator|*
name|gmodifs
expr_stmt|;
comment|// Test non-translated ones last
name|QString
name|sl
init|=
name|accel
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modifs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QModifKeyName
modifier|&
name|mkf
init|=
name|modifs
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|sl
operator|.
name|contains
argument_list|(
name|mkf
operator|.
name|name
argument_list|)
condition|)
block|{
name|ret
operator||=
name|mkf
operator|.
name|qt_key
expr_stmt|;
name|accel
operator|.
name|remove
argument_list|(
name|mkf
operator|.
name|name
argument_list|)
expr_stmt|;
name|sl
operator|=
name|accel
expr_stmt|;
block|}
block|}
else|#
directive|else
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|lastI
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|i
operator|=
name|sl
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'+'
argument_list|)
argument_list|,
name|i
operator|+
literal|1
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|const
name|QString
name|sub
init|=
name|sl
operator|.
name|mid
argument_list|(
name|lastI
argument_list|,
name|i
operator|-
name|lastI
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// If we get here the shortcuts contains at least one '+'. We break up
comment|// along the following strategy:
comment|//      Meta+Ctrl++   ( "Meta+", "Ctrl+", "+" )
comment|//      Super+Shift+A ( "Super+", "Shift+" )
comment|//      4+3+2=1       ( "4+", "3+" )
comment|// In other words, everything we try to handle HAS to be a modifier
comment|// except for a single '+' at the end of the string.
comment|// Only '+' can have length 1.
if|if
condition|(
name|sub
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// Make sure we only encounter a single '+' at the end of the accel
if|if
condition|(
name|accel
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'+'
argument_list|)
argument_list|)
operator|!=
name|accel
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
return|return
name|Qt
operator|::
name|Key_unknown
return|;
block|}
else|else
block|{
comment|// Identify the modifier
name|bool
name|validModifier
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|modifs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
specifier|const
name|QModifKeyName
modifier|&
name|mkf
init|=
name|modifs
operator|.
name|at
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|==
name|mkf
operator|.
name|name
condition|)
block|{
name|ret
operator||=
name|mkf
operator|.
name|qt_key
expr_stmt|;
name|validModifier
operator|=
literal|true
expr_stmt|;
break|break;
comment|// Shortcut, since if we find an other it would/should just be a dup
block|}
block|}
if|if
condition|(
operator|!
name|validModifier
condition|)
return|return
name|Qt
operator|::
name|Key_unknown
return|;
block|}
name|lastI
operator|=
name|i
operator|+
literal|1
expr_stmt|;
block|}
endif|#
directive|endif
name|int
name|p
init|=
name|accel
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'+'
argument_list|)
argument_list|,
name|str
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
decl_stmt|;
comment|// -2 so that Ctrl++ works
if|if
condition|(
name|p
operator|>
literal|0
condition|)
name|accel
operator|=
name|accel
operator|.
name|mid
argument_list|(
name|p
operator|+
literal|1
argument_list|)
expr_stmt|;
name|int
name|fnum
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|accel
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|int
name|qtKey
init|=
name|qtkeyForMacSymbol
argument_list|(
name|accel
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|qtKey
operator|!=
operator|-
literal|1
condition|)
block|{
name|ret
operator||=
name|qtKey
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|ret
operator||=
name|accel
index|[
literal|0
index|]
operator|.
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|accel
index|[
literal|0
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'f'
argument_list|)
operator|&&
operator|(
name|fnum
operator|=
name|accel
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
operator|)
operator|&&
operator|(
name|fnum
operator|>=
literal|1
operator|)
operator|&&
operator|(
name|fnum
operator|<=
literal|35
operator|)
condition|)
block|{
name|ret
operator||=
name|Qt
operator|::
name|Key_F1
operator|+
name|fnum
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// For NativeText, check the traslation table first,
comment|// if we don't find anything then try it out with just the untranlated stuff.
comment|// PortableText will only try the untranlated table.
name|bool
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|tran
init|=
literal|0
init|;
name|tran
operator|<
literal|2
condition|;
operator|++
name|tran
control|)
block|{
if|if
condition|(
operator|!
name|nativeText
condition|)
operator|++
name|tran
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|keyname
index|[
name|i
index|]
operator|.
name|name
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|keyName
argument_list|(
name|tran
operator|==
literal|0
condition|?
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QShortcut"
argument_list|,
name|keyname
index|[
name|i
index|]
operator|.
name|name
argument_list|)
else|:
name|QString
operator|::
name|fromLatin1
argument_list|(
name|keyname
index|[
name|i
index|]
operator|.
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|accel
operator|==
name|keyName
operator|.
name|toLower
argument_list|()
condition|)
block|{
name|ret
operator||=
name|keyname
index|[
name|i
index|]
operator|.
name|key
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
condition|)
break|break;
block|}
comment|// We couldn't translate the key.
if|if
condition|(
operator|!
name|found
condition|)
return|return
name|Qt
operator|::
name|Key_unknown
return|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|currentKeyPlatforms
name|unsigned
name|QKeySequencePrivate
operator|::
name|currentKeyPlatforms
parameter_list|()
block|{
name|int
name|keyboardScheme
init|=
name|QPlatformTheme
operator|::
name|WindowsKeyboardScheme
decl_stmt|;
if|if
condition|(
specifier|const
name|QPlatformTheme
modifier|*
name|theme
init|=
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
condition|)
name|keyboardScheme
operator|=
name|theme
operator|->
name|themeHint
argument_list|(
name|QPlatformTheme
operator|::
name|KeyboardScheme
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|unsigned
name|result
init|=
literal|1u
operator|<<
name|keyboardScheme
decl_stmt|;
if|if
condition|(
name|keyboardScheme
operator|==
name|QPlatformTheme
operator|::
name|KdeKeyboardScheme
operator|||
name|keyboardScheme
operator|==
name|QPlatformTheme
operator|::
name|GnomeKeyboardScheme
operator|||
name|keyboardScheme
operator|==
name|QPlatformTheme
operator|::
name|CdeKeyboardScheme
condition|)
name|result
operator||=
name|KB_X11
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     Creates a shortcut string for \a key. For example,     Qt::CTRL+Qt::Key_O gives "Ctrl+O". The strings, "Ctrl", "Shift", etc. are     translated (using QObject::tr()) in the "QShortcut" context.  */
end_comment
begin_function
DECL|function|encodeString
name|QString
name|QKeySequence
operator|::
name|encodeString
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
name|QKeySequencePrivate
operator|::
name|encodeString
argument_list|(
name|key
argument_list|,
name|NativeText
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|addKey
specifier|static
specifier|inline
name|void
name|addKey
parameter_list|(
name|QString
modifier|&
name|str
parameter_list|,
specifier|const
name|QString
modifier|&
name|theKey
parameter_list|,
name|QKeySequence
operator|::
name|SequenceFormat
name|format
parameter_list|)
block|{
if|if
condition|(
operator|!
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|+=
operator|(
name|format
operator|==
name|QKeySequence
operator|::
name|NativeText
operator|)
condition|?
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"+"
argument_list|)
else|:
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
name|str
operator|+=
name|theKey
expr_stmt|;
block|}
end_function
begin_function
DECL|function|encodeString
name|QString
name|QKeySequencePrivate
operator|::
name|encodeString
parameter_list|(
name|int
name|key
parameter_list|,
name|QKeySequence
operator|::
name|SequenceFormat
name|format
parameter_list|)
block|{
name|bool
name|nativeText
init|=
operator|(
name|format
operator|==
name|QKeySequence
operator|::
name|NativeText
operator|)
decl_stmt|;
name|QString
name|s
decl_stmt|;
comment|// Handle -1 (Invalid Key) and Qt::Key_unknown gracefully
if|if
condition|(
name|key
operator|==
operator|-
literal|1
operator|||
name|key
operator|==
name|Qt
operator|::
name|Key_unknown
condition|)
return|return
name|s
return|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
if|if
condition|(
name|nativeText
condition|)
block|{
comment|// On Mac OS X the order (by default) is Meta, Alt, Shift, Control.
comment|// If the AA_MacDontSwapCtrlAndMeta is enabled, then the order
comment|// is Ctrl, Alt, Shift, Meta. The macSymbolForQtKey does this swap
comment|// for us, which means that we have to adjust our order here.
comment|// The upshot is a lot more infrastructure to keep the number of
comment|// if tests down and the code relatively clean.
specifier|static
specifier|const
name|int
name|ModifierOrder
index|[]
init|=
block|{
name|Qt
operator|::
name|META
block|,
name|Qt
operator|::
name|ALT
block|,
name|Qt
operator|::
name|SHIFT
block|,
name|Qt
operator|::
name|CTRL
block|,
literal|0
block|}
decl_stmt|;
specifier|static
specifier|const
name|int
name|QtKeyOrder
index|[]
init|=
block|{
name|Qt
operator|::
name|Key_Meta
block|,
name|Qt
operator|::
name|Key_Alt
block|,
name|Qt
operator|::
name|Key_Shift
block|,
name|Qt
operator|::
name|Key_Control
block|,
literal|0
block|}
decl_stmt|;
specifier|static
specifier|const
name|int
name|DontSwapModifierOrder
index|[]
init|=
block|{
name|Qt
operator|::
name|CTRL
block|,
name|Qt
operator|::
name|ALT
block|,
name|Qt
operator|::
name|SHIFT
block|,
name|Qt
operator|::
name|META
block|,
literal|0
block|}
decl_stmt|;
specifier|static
specifier|const
name|int
name|DontSwapQtKeyOrder
index|[]
init|=
block|{
name|Qt
operator|::
name|Key_Control
block|,
name|Qt
operator|::
name|Key_Alt
block|,
name|Qt
operator|::
name|Key_Shift
block|,
name|Qt
operator|::
name|Key_Meta
block|,
literal|0
block|}
decl_stmt|;
specifier|const
name|int
modifier|*
name|modifierOrder
decl_stmt|;
specifier|const
name|int
modifier|*
name|qtkeyOrder
decl_stmt|;
if|if
condition|(
name|qApp
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_MacDontSwapCtrlAndMeta
argument_list|)
condition|)
block|{
name|modifierOrder
operator|=
name|DontSwapModifierOrder
expr_stmt|;
name|qtkeyOrder
operator|=
name|DontSwapQtKeyOrder
expr_stmt|;
block|}
else|else
block|{
name|modifierOrder
operator|=
name|ModifierOrder
expr_stmt|;
name|qtkeyOrder
operator|=
name|QtKeyOrder
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|modifierOrder
index|[
name|i
index|]
operator|!=
literal|0
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|key
operator|&
name|modifierOrder
index|[
name|i
index|]
condition|)
name|s
operator|+=
name|qt_macSymbolForQtKey
argument_list|(
name|qtkeyOrder
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
endif|#
directive|endif
block|{
comment|// On other systems the order is Meta, Control, Alt, Shift
if|if
condition|(
operator|(
name|key
operator|&
name|Qt
operator|::
name|META
operator|)
operator|==
name|Qt
operator|::
name|META
condition|)
name|s
operator|=
name|nativeText
condition|?
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Meta"
argument_list|)
else|:
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Meta"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|key
operator|&
name|Qt
operator|::
name|CTRL
operator|)
operator|==
name|Qt
operator|::
name|CTRL
condition|)
name|addKey
argument_list|(
name|s
argument_list|,
name|nativeText
condition|?
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Ctrl"
argument_list|)
else|:
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Ctrl"
argument_list|)
argument_list|,
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|key
operator|&
name|Qt
operator|::
name|ALT
operator|)
operator|==
name|Qt
operator|::
name|ALT
condition|)
name|addKey
argument_list|(
name|s
argument_list|,
name|nativeText
condition|?
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Alt"
argument_list|)
else|:
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Alt"
argument_list|)
argument_list|,
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|key
operator|&
name|Qt
operator|::
name|SHIFT
operator|)
operator|==
name|Qt
operator|::
name|SHIFT
condition|)
name|addKey
argument_list|(
name|s
argument_list|,
name|nativeText
condition|?
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"Shift"
argument_list|)
else|:
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Shift"
argument_list|)
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
name|key
operator|&=
operator|~
operator|(
name|Qt
operator|::
name|ShiftModifier
operator||
name|Qt
operator|::
name|ControlModifier
operator||
name|Qt
operator|::
name|AltModifier
operator||
name|Qt
operator|::
name|MetaModifier
operator|)
expr_stmt|;
name|QString
name|p
decl_stmt|;
if|if
condition|(
name|key
operator|&&
name|key
operator|<
name|Qt
operator|::
name|Key_Escape
operator|&&
name|key
operator|!=
name|Qt
operator|::
name|Key_Space
condition|)
block|{
if|if
condition|(
operator|!
name|QChar
operator|::
name|requiresSurrogates
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|p
operator|=
name|QChar
argument_list|(
name|ushort
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|toUpper
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|p
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|key
operator|>=
name|Qt
operator|::
name|Key_F1
operator|&&
name|key
operator|<=
name|Qt
operator|::
name|Key_F35
condition|)
block|{
name|p
operator|=
name|nativeText
condition|?
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QShortcut"
argument_list|,
literal|"F%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|key
operator|-
name|Qt
operator|::
name|Key_F1
operator|+
literal|1
argument_list|)
else|:
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"F%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|key
operator|-
name|Qt
operator|::
name|Key_F1
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
if|if
condition|(
name|nativeText
condition|)
block|{
name|QChar
name|ch
init|=
name|qt_macSymbolForQtKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ch
operator|.
name|isNull
argument_list|()
condition|)
name|p
operator|=
name|ch
expr_stmt|;
else|else
goto|goto
name|NonSymbol
goto|;
block|}
else|else
endif|#
directive|endif
block|{
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|NonSymbol
label|:
endif|#
directive|endif
while|while
condition|(
name|keyname
index|[
name|i
index|]
operator|.
name|name
condition|)
block|{
if|if
condition|(
name|key
operator|==
name|keyname
index|[
name|i
index|]
operator|.
name|key
condition|)
block|{
name|p
operator|=
name|nativeText
condition|?
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QShortcut"
argument_list|,
name|keyname
index|[
name|i
index|]
operator|.
name|name
argument_list|)
else|:
name|QString
operator|::
name|fromLatin1
argument_list|(
name|keyname
index|[
name|i
index|]
operator|.
name|name
argument_list|)
expr_stmt|;
break|break;
block|}
operator|++
name|i
expr_stmt|;
block|}
comment|// If we can't find the actual translatable keyname,
comment|// fall back on the unicode representation of it...
comment|// Or else characters like Qt::Key_aring may not get displayed
comment|// (Really depends on you locale)
if|if
condition|(
operator|!
name|keyname
index|[
name|i
index|]
operator|.
name|name
condition|)
block|{
if|if
condition|(
operator|!
name|QChar
operator|::
name|requiresSurrogates
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|p
operator|=
name|QChar
argument_list|(
name|ushort
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|toUpper
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|p
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
ifdef|#
directive|ifdef
name|Q_OS_MAC
if|if
condition|(
name|nativeText
condition|)
name|s
operator|+=
name|p
expr_stmt|;
else|else
endif|#
directive|endif
name|addKey
argument_list|(
name|s
argument_list|,
name|p
argument_list|,
name|format
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_comment
comment|/*!     Matches the sequence with \a seq. Returns ExactMatch if     successful, PartialMatch if \a seq matches incompletely,     and NoMatch if the sequences have nothing in common.     Returns NoMatch if \a seq is shorter. */
end_comment
begin_function
DECL|function|matches
name|QKeySequence
operator|::
name|SequenceMatch
name|QKeySequence
operator|::
name|matches
parameter_list|(
specifier|const
name|QKeySequence
modifier|&
name|seq
parameter_list|)
specifier|const
block|{
name|uint
name|userN
init|=
name|count
argument_list|()
decl_stmt|,
name|seqN
init|=
name|seq
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|userN
operator|>
name|seqN
condition|)
return|return
name|NoMatch
return|;
comment|// If equal in length, we have a potential ExactMatch sequence,
comment|// else we already know it can only be partial.
name|SequenceMatch
name|match
init|=
operator|(
name|userN
operator|==
name|seqN
condition|?
name|ExactMatch
else|:
name|PartialMatch
operator|)
decl_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
name|userN
condition|;
operator|++
name|i
control|)
block|{
name|int
name|userKey
init|=
operator|(
operator|*
name|this
operator|)
index|[
name|i
index|]
decl_stmt|,
name|sequenceKey
init|=
name|seq
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|userKey
operator|!=
name|sequenceKey
condition|)
return|return
name|NoMatch
return|;
block|}
return|return
name|match
return|;
block|}
end_function
begin_comment
comment|/*! \fn QKeySequence::operator QString() const      \obsolete      Use toString() instead.           Returns the key sequence as a QString. This is equivalent to      calling toString(QKeySequence::NativeText). Note that the     result is not platform independent. */
end_comment
begin_comment
comment|/*!    Returns the key sequence as a QVariant */
end_comment
begin_function
DECL|function|operator QVariant
name|QKeySequence
operator|::
name|operator
name|QVariant
parameter_list|()
specifier|const
block|{
return|return
name|QVariant
argument_list|(
name|QVariant
operator|::
name|KeySequence
argument_list|,
name|this
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \fn QKeySequence::operator int () const      \obsolete     For backward compatibility: returns the first keycode     as integer. If the key sequence is empty, 0 is returned.  */
end_comment
begin_comment
comment|/*!     Returns a reference to the element at position \a index in the key     sequence. This can only be used to read an element.  */
end_comment
begin_function
DECL|function|operator []
name|int
name|QKeySequence
operator|::
name|operator
name|[]
parameter_list|(
name|uint
name|index
parameter_list|)
specifier|const
block|{
name|Q_ASSERT_X
argument_list|(
name|index
operator|<
literal|4
argument_list|,
literal|"QKeySequence::operator[]"
argument_list|,
literal|"index out of range"
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|key
index|[
name|index
index|]
return|;
block|}
end_function
begin_comment
comment|/*!     Assignment operator. Assigns the \a other key sequence to this     object.  */
end_comment
begin_function
DECL|function|operator =
name|QKeySequence
modifier|&
name|QKeySequence
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QKeySequence
modifier|&
name|other
parameter_list|)
block|{
name|qAtomicAssign
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QKeySequence::swap(QKeySequence&other)     \since 4.8      Swaps key sequence \a other with this key sequence. This operation is very     fast and never fails. */
end_comment
begin_comment
comment|/*!     \fn bool QKeySequence::operator!=(const QKeySequence&other) const      Returns true if this key sequence is not equal to the \a other     key sequence; otherwise returns false. */
end_comment
begin_comment
comment|/*!     Returns true if this key sequence is equal to the \a other     key sequence; otherwise returns false.  */
end_comment
begin_function
DECL|function|operator ==
name|bool
name|QKeySequence
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|QKeySequence
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|d
operator|->
name|key
index|[
literal|0
index|]
operator|==
name|other
operator|.
name|d
operator|->
name|key
index|[
literal|0
index|]
operator|&&
name|d
operator|->
name|key
index|[
literal|1
index|]
operator|==
name|other
operator|.
name|d
operator|->
name|key
index|[
literal|1
index|]
operator|&&
name|d
operator|->
name|key
index|[
literal|2
index|]
operator|==
name|other
operator|.
name|d
operator|->
name|key
index|[
literal|2
index|]
operator|&&
name|d
operator|->
name|key
index|[
literal|3
index|]
operator|==
name|other
operator|.
name|d
operator|->
name|key
index|[
literal|3
index|]
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     Provides an arbitrary comparison of this key sequence and     \a other key sequence. All that is guaranteed is that the     operator returns false if both key sequences are equal and     that (ks1 \< ks2) == !( ks2 \< ks1) if the key sequences     are not equal.      This function is useful in some circumstances, for example     if you want to use QKeySequence objects as keys in a QMap.      \sa operator==() operator!=() operator>() operator<=() operator>=() */
end_comment
begin_function
DECL|function|operator <
name|bool
name|QKeySequence
operator|::
name|operator
name|<
parameter_list|(
specifier|const
name|QKeySequence
modifier|&
name|other
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|d
operator|->
name|key
index|[
name|i
index|]
operator|!=
name|other
operator|.
name|d
operator|->
name|key
index|[
name|i
index|]
condition|)
return|return
name|d
operator|->
name|key
index|[
name|i
index|]
operator|<
name|other
operator|.
name|d
operator|->
name|key
index|[
name|i
index|]
return|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QKeySequence::operator> (const QKeySequence&other) const      Returns true if this key sequence is larger than the \a other key     sequence; otherwise returns false.      \sa operator==() operator!=() operator<() operator<=() operator>=() */
end_comment
begin_comment
comment|/*!     \fn bool QKeySequence::operator<= (const QKeySequence&other) const      Returns true if this key sequence is smaller or equal to the     \a other key sequence; otherwise returns false.      \sa operator==() operator!=() operator<() operator>() operator>=() */
end_comment
begin_comment
comment|/*!     \fn bool QKeySequence::operator>= (const QKeySequence&other) const      Returns true if this key sequence is larger or equal to the     \a other key sequence; otherwise returns false.      \sa operator==() operator!=() operator<() operator>() operator<=() */
end_comment
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|isDetached
name|bool
name|QKeySequence
operator|::
name|isDetached
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|==
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Return a string representation of the key sequence,     based on \a format.      For example, the value Qt::CTRL+Qt::Key_O results in "Ctrl+O".     If the key sequence has multiple key codes, each is separated     by commas in the string returned, such as "Alt+X, Ctrl+Y, Z".     The strings, "Ctrl", "Shift", etc. are translated using     QObject::tr() in the "QShortcut" context.      If the key sequence has no keys, an empty string is returned.      On Mac OS X, the string returned resembles the sequence that is     shown in the menu bar.      \sa fromString() */
end_comment
begin_function
DECL|function|toString
name|QString
name|QKeySequence
operator|::
name|toString
parameter_list|(
name|SequenceFormat
name|format
parameter_list|)
specifier|const
block|{
name|QString
name|finalString
decl_stmt|;
comment|// A standard string, with no translation or anything like that. In some ways it will
comment|// look like our latin case on Windows and X11
name|int
name|end
init|=
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
block|{
name|finalString
operator|+=
name|d
operator|->
name|encodeString
argument_list|(
name|d
operator|->
name|key
index|[
name|i
index|]
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|finalString
operator|+=
name|QLatin1String
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|finalString
operator|.
name|truncate
argument_list|(
name|finalString
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
return|return
name|finalString
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Return a QKeySequence from the string \a str based on \a format.      \sa toString() */
end_comment
begin_function
DECL|function|fromString
name|QKeySequence
name|QKeySequence
operator|::
name|fromString
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|SequenceFormat
name|format
parameter_list|)
block|{
return|return
name|QKeySequence
argument_list|(
name|str
argument_list|,
name|format
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   QKeySequence stream functions  *****************************************************************************/
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DATASTREAM
argument_list|)
end_if
begin_comment
comment|/*!     \fn QDataStream&operator<<(QDataStream&stream, const QKeySequence&sequence)     \relates QKeySequence      Writes the key \a sequence to the \a stream.      \sa \link datastreamformat.html Format of the QDataStream operators \endlink */
end_comment
begin_function
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
specifier|const
name|QKeySequence
modifier|&
name|keysequence
parameter_list|)
block|{
name|QList
argument_list|<
name|quint32
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
name|keysequence
operator|.
name|d
operator|->
name|key
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|>=
literal|5
operator|&&
name|keysequence
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
block|{
name|list
operator|<<
name|keysequence
operator|.
name|d
operator|->
name|key
index|[
literal|1
index|]
expr_stmt|;
name|list
operator|<<
name|keysequence
operator|.
name|d
operator|->
name|key
index|[
literal|2
index|]
expr_stmt|;
name|list
operator|<<
name|keysequence
operator|.
name|d
operator|->
name|key
index|[
literal|3
index|]
expr_stmt|;
block|}
name|s
operator|<<
name|list
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QDataStream&operator>>(QDataStream&stream, QKeySequence&sequence)     \relates QKeySequence      Reads a key sequence from the \a stream into the key \a sequence.      \sa \link datastreamformat.html Format of the QDataStream operators \endlink */
end_comment
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
name|QKeySequence
modifier|&
name|keysequence
parameter_list|)
block|{
name|qAtomicDetach
argument_list|(
name|keysequence
operator|.
name|d
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|quint32
argument_list|>
name|list
decl_stmt|;
name|s
operator|>>
name|list
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
name|keysequence
operator|.
name|d
operator|->
name|key
index|[
name|i
index|]
operator|=
name|list
operator|.
name|value
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_DATASTREAM
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
specifier|const
name|QKeySequence
modifier|&
name|p
parameter_list|)
block|{
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QKeySequence("
operator|<<
name|p
operator|.
name|toString
argument_list|()
operator|<<
literal|')'
expr_stmt|;
return|return
name|dbg
operator|.
name|space
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SHORTCUT
end_comment
begin_comment
comment|/*!     \typedef QKeySequence::DataPtr     \internal */
end_comment
begin_comment
comment|/*!     \fn DataPtr&QKeySequence::data_ptr()     \internal */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
