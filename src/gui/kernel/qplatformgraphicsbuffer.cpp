begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformgraphicsbuffer.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QOpenGLContext>
end_include
begin_include
include|#
directive|include
file|<QtGui/QOpenGLFunctions>
end_include
begin_include
include|#
directive|include
file|<QtGui/qopengl.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QPlatformGraphicsBuffer     \inmodule QtGui     \since 5.5     \brief The QPlatformGraphicsBuffer is a windowsystem abstraction for native graphics buffers      Different platforms have different ways of representing graphics buffers. On     some platforms, it is possible to create one graphics buffer that you can bind     to a texture and also get main memory access to the image bits. On the     other hand, on some platforms all graphics buffer abstraction is completely     hidden.      QPlatformGraphicsBuffer is an abstraction of a single Graphics Buffer.      There is no public constructor nor any public factory function.      QPlatformGraphicsBuffer is intended to be created by using platform specific     APIs available from QtPlatformHeaders, or there might be accessor functions     similar to the accessor function that QPlatformBackingstore has. */
end_comment
begin_comment
comment|/*!     \enum QPlatformGraphicsBuffer::AccessType      This enum describes the access that is desired or granted for the graphics     buffer.      \value None     \value SWReadAccess     \value SWWriteAccess     \value TextureAccess     \value HWCompositor */
end_comment
begin_comment
comment|/*!     \enum QPlatformGraphicsBuffer::Origin      This enum describes the origin of the content of the buffer.      \value OriginTopLeft     \value OriginBottomLeft */
end_comment
begin_comment
comment|/*!     Protected constructor to initialize the private members.      \a size is the size of the buffer.     \a format is the format of the buffer.      \sa size() format() */
end_comment
begin_constructor
DECL|function|QPlatformGraphicsBuffer
name|QPlatformGraphicsBuffer
operator|::
name|QPlatformGraphicsBuffer
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QPixelFormat
modifier|&
name|format
parameter_list|)
member_init_list|:
name|m_size
argument_list|(
name|size
argument_list|)
member_init_list|,
name|m_format
argument_list|(
name|format
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Virtual destructor. */
end_comment
begin_destructor
DECL|function|~QPlatformGraphicsBuffer
name|QPlatformGraphicsBuffer
operator|::
name|~
name|QPlatformGraphicsBuffer
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Binds the content of this graphics buffer into the currently bound texture.      This function should fail for buffers not capable of locking to TextureAccess.      \a rect is the subrect which is desired to be bounded to the texture. This     argument has a no less than semantic, meaning more (if not all) of the buffer     can be bounded to the texture. An empty QRect is interpreted as entire buffer     should be bound.      This function only supports binding buffers to the GL_TEXTURE_2D texture     target.      Returns true on success, otherwise false. */
end_comment
begin_function
DECL|function|bindToTexture
name|bool
name|QPlatformGraphicsBuffer
operator|::
name|bindToTexture
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|rect
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QPlatformGraphicsBuffer::AccessTypes QPlatformGraphicsBuffer::isLocked() const     Function to check if the buffer is locked.      \sa lock() */
end_comment
begin_comment
comment|/*!     Before the data can be retrieved or before a buffer can be bound to a     texture it needs to be locked. This is a separate function call since this     operation might be time consuming, and it would not be satisfactory to do     it per function call.      \a access is the access type wanted.      \a rect is the subrect which is desired to be locked. This     argument has a no less than semantic, meaning more (if not all) of the buffer     can be locked. An empty QRect is interpreted as entire buffer should be locked.      Return true on successfully locking all AccessTypes specified \a access     otherwise returns false and no locks have been granted. */
end_comment
begin_function
DECL|function|lock
name|bool
name|QPlatformGraphicsBuffer
operator|::
name|lock
parameter_list|(
name|AccessTypes
name|access
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|bool
name|locked
init|=
name|doLock
argument_list|(
name|access
argument_list|,
name|rect
argument_list|)
decl_stmt|;
if|if
condition|(
name|locked
condition|)
name|m_lock_access
operator||=
name|access
expr_stmt|;
return|return
name|locked
return|;
block|}
end_function
begin_comment
comment|/*!     Unlocks the current buffer lock.      This function calls doUnlock, and then emits the unlocked signal with the     AccessTypes from before doUnlock was called. */
end_comment
begin_function
DECL|function|unlock
name|void
name|QPlatformGraphicsBuffer
operator|::
name|unlock
parameter_list|()
block|{
if|if
condition|(
name|m_lock_access
operator|==
name|None
condition|)
return|return;
name|AccessTypes
name|previous
init|=
name|m_lock_access
decl_stmt|;
name|doUnlock
argument_list|()
expr_stmt|;
name|m_lock_access
operator|=
name|None
expr_stmt|;
emit|emit
name|unlocked
argument_list|(
name|previous
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \fn QPlatformGraphicsBuffer::doLock(AccessTypes access, const QRect&rect = QRect())      This function should be reimplemented by subclasses. If one of the \a     access types specified can not be locked, then all should fail and this     function should return false.      \a rect is the subrect which is desired to be locked. This     argument has a no less than semantic, meaning more (if not all) of the     buffer can be locked. An empty QRect should be interpreted as the entire buffer     should be locked.      It is safe to call isLocked() to verify the current lock state. */
end_comment
begin_comment
comment|/*!     \fn QPlatformGraphicsBuffer::doUnlock()      This function should remove all locks set on the buffer.      It is safe to call isLocked() to verify the current lock state. */
end_comment
begin_comment
comment|/*!     \fn QPlatformGraphicsBuffer::unlocked(AccessTypes previousAccessTypes)      Signal that is emitted after unlocked has been called.      \a previousAccessTypes is the access types locked before unlock was called. */
end_comment
begin_comment
comment|/*!     Accessor for the bytes of the buffer. This function needs to be called on a     buffer with SWReadAccess access lock. Behavior is undefined for modifying     the memory returned when not having a SWWriteAccess. */
end_comment
begin_function
DECL|function|data
specifier|const
name|uchar
modifier|*
name|QPlatformGraphicsBuffer
operator|::
name|data
parameter_list|()
specifier|const
block|{
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_comment
comment|/*!     Accessor for the bytes of the buffer. This function needs to be called on a     buffer with SWReadAccess access lock. Behavior is undefined for modifying     the memory returned when not having a SWWriteAccess. */
end_comment
begin_function
DECL|function|data
name|uchar
modifier|*
name|QPlatformGraphicsBuffer
operator|::
name|data
parameter_list|()
block|{
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_comment
comment|/*!     Accessor for the length of the data buffer. This function is a convenience     function multiplying height of buffer with bytesPerLine().      \sa data() bytesPerLine() size() */
end_comment
begin_function
DECL|function|byteCount
name|int
name|QPlatformGraphicsBuffer
operator|::
name|byteCount
parameter_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|isLocked
argument_list|()
operator|&
name|SWReadAccess
argument_list|)
expr_stmt|;
return|return
name|size
argument_list|()
operator|.
name|height
argument_list|()
operator|*
name|bytesPerLine
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Accessor for bytes per line in the graphics buffer. */
end_comment
begin_function
DECL|function|bytesPerLine
name|int
name|QPlatformGraphicsBuffer
operator|::
name|bytesPerLine
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     In origin of the content of the graphics buffer.      Default implementation is OriginTopLeft, as this is the coordinate     system default for Qt. However, for most regular OpenGL textures     this will be OriginBottomLeft. */
end_comment
begin_function
DECL|function|origin
name|QPlatformGraphicsBuffer
operator|::
name|Origin
name|QPlatformGraphicsBuffer
operator|::
name|origin
parameter_list|()
specifier|const
block|{
return|return
name|OriginTopLeft
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QPlatformGraphicsBuffer::size() const      Accessor for content size. */
end_comment
begin_comment
comment|/*!     \fn QPlatformGraphicsBuffer::format() const      Accessor for the pixel format of the buffer. */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
