begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qeventdispatcher_glib_qpa_p.h"
end_include
begin_include
include|#
directive|include
file|"qguiapplication.h"
end_include
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|<glib.h>
end_include
begin_include
include|#
directive|include
file|"private/qguiapplication_p.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_struct
DECL|struct|GUserEventSource
struct|struct
name|GUserEventSource
block|{
DECL|member|source
name|GSource
name|source
decl_stmt|;
DECL|member|q
name|QPAEventDispatcherGlib
modifier|*
name|q
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|userEventSourcePrepare
specifier|static
name|gboolean
name|userEventSourcePrepare
parameter_list|(
name|GSource
modifier|*
name|s
parameter_list|,
name|gint
modifier|*
name|timeout
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|s
argument_list|)
name|Q_UNUSED
argument_list|(
argument|timeout
argument_list|)
return|return
name|QWindowSystemInterfacePrivate
operator|::
name|windowSystemEventsQueued
argument_list|()
operator|>
literal|0
return|;
block|}
end_function
begin_function
DECL|function|userEventSourceCheck
specifier|static
name|gboolean
name|userEventSourceCheck
parameter_list|(
name|GSource
modifier|*
name|source
parameter_list|)
block|{
return|return
name|userEventSourcePrepare
argument_list|(
name|source
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|userEventSourceDispatch
specifier|static
name|gboolean
name|userEventSourceDispatch
parameter_list|(
name|GSource
modifier|*
name|s
parameter_list|,
name|GSourceFunc
parameter_list|,
name|gpointer
parameter_list|)
block|{
name|GUserEventSource
modifier|*
name|source
init|=
cast|reinterpret_cast
argument_list|<
name|GUserEventSource
operator|*
argument_list|>
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|WindowSystemEvent
modifier|*
name|event
decl_stmt|;
while|while
condition|(
name|QWindowSystemInterfacePrivate
operator|::
name|windowSystemEventsQueued
argument_list|()
condition|)
block|{
name|event
operator|=
name|QWindowSystemInterfacePrivate
operator|::
name|getWindowSystemEvent
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|event
condition|)
break|break;
comment|// send through event filter
if|if
condition|(
name|source
operator|->
name|q
operator|->
name|filterEvent
argument_list|(
name|event
argument_list|)
condition|)
block|{
operator|delete
name|event
expr_stmt|;
continue|continue;
block|}
name|QGuiApplicationPrivate
operator|::
name|processWindowSystemEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
operator|delete
name|event
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|userEventSourceFuncs
specifier|static
name|GSourceFuncs
name|userEventSourceFuncs
init|=
block|{
name|userEventSourcePrepare
block|,
name|userEventSourceCheck
block|,
name|userEventSourceDispatch
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QPAEventDispatcherGlibPrivate
name|QPAEventDispatcherGlibPrivate
operator|::
name|QPAEventDispatcherGlibPrivate
parameter_list|(
name|GMainContext
modifier|*
name|context
parameter_list|)
member_init_list|:
name|QEventDispatcherGlibPrivate
argument_list|(
name|context
argument_list|)
block|{
name|userEventSource
operator|=
cast|reinterpret_cast
argument_list|<
name|GUserEventSource
operator|*
argument_list|>
argument_list|(
name|g_source_new
argument_list|(
operator|&
name|userEventSourceFuncs
argument_list|,
sizeof|sizeof
argument_list|(
name|GUserEventSource
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|userEventSource
operator|->
name|q
operator|=
literal|0
expr_stmt|;
name|g_source_set_can_recurse
argument_list|(
operator|&
name|userEventSource
operator|->
name|source
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|g_source_attach
argument_list|(
operator|&
name|userEventSource
operator|->
name|source
argument_list|,
name|mainContext
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QPAEventDispatcherGlib
name|QPAEventDispatcherGlib
operator|::
name|QPAEventDispatcherGlib
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QEventDispatcherGlib
argument_list|(
operator|*
operator|new
name|QPAEventDispatcherGlibPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPAEventDispatcherGlib
argument_list|)
expr_stmt|;
name|d
operator|->
name|userEventSource
operator|->
name|q
operator|=
name|this
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QPAEventDispatcherGlib
name|QPAEventDispatcherGlib
operator|::
name|~
name|QPAEventDispatcherGlib
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPAEventDispatcherGlib
argument_list|)
expr_stmt|;
name|g_source_destroy
argument_list|(
operator|&
name|d
operator|->
name|userEventSource
operator|->
name|source
argument_list|)
expr_stmt|;
name|g_source_unref
argument_list|(
operator|&
name|d
operator|->
name|userEventSource
operator|->
name|source
argument_list|)
expr_stmt|;
name|d
operator|->
name|userEventSource
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
