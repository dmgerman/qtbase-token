begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformscreen_qpa.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/qguiapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qplatformintegration_qpa.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qscreen.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qwindow.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QPlatformScreenPrivate
class|class
name|QPlatformScreenPrivate
block|{
public|public:
DECL|member|screen
name|QScreen
modifier|*
name|screen
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QPlatformScreen
name|QPlatformScreen
operator|::
name|QPlatformScreen
parameter_list|()
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QPlatformScreenPrivate
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPlatformScreen
argument_list|)
expr_stmt|;
name|d
operator|->
name|screen
operator|=
operator|new
name|QScreen
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QPlatformScreen
name|QPlatformScreen
operator|::
name|~
name|QPlatformScreen
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPlatformScreen
argument_list|)
expr_stmt|;
name|QGuiApplicationPrivate
operator|::
name|screen_list
operator|.
name|removeOne
argument_list|(
name|d
operator|->
name|screen
argument_list|)
expr_stmt|;
operator|delete
name|d
operator|->
name|screen
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \fn QPixmap QPlatformScreen::grabWindow(WId window, int x, int y, int width, int height) const      This function is called when Qt needs to be able to grab the content of a window.      Returnes the content of the window specified with the WId handle within the boundaries of     QRect(x,y,width,height). */
end_comment
begin_function
DECL|function|grabWindow
name|QPixmap
name|QPlatformScreen
operator|::
name|grabWindow
parameter_list|(
name|WId
name|window
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|y
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|height
argument_list|)
expr_stmt|;
return|return
name|QPixmap
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Return the given top level window for a given position.      Default implementation retrieves a list of all top level windows and finds the first window     which contains point \a pos */
end_comment
begin_function
DECL|function|topLevelAt
name|QWindow
modifier|*
name|QPlatformScreen
operator|::
name|topLevelAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|QWindowList
name|list
init|=
name|QGuiApplication
operator|::
name|topLevelWindows
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QWindow
modifier|*
name|w
init|=
name|list
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|visible
argument_list|()
operator|&&
name|w
operator|->
name|geometry
argument_list|()
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
condition|)
return|return
name|w
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of all the platform screens that are part of the same     virtual desktop.      Screens part of the same virtual desktop share a common coordinate system,     and windows can be freely moved between them. */
end_comment
begin_function
DECL|function|virtualSiblings
name|QList
argument_list|<
name|QPlatformScreen
modifier|*
argument_list|>
name|QPlatformScreen
operator|::
name|virtualSiblings
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QPlatformScreen
modifier|*
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
cast|const_cast
argument_list|<
name|QPlatformScreen
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_function
DECL|function|screen
name|QScreen
modifier|*
name|QPlatformScreen
operator|::
name|screen
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlatformScreen
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|screen
return|;
block|}
end_function
begin_comment
comment|/*!     Reimplement this function in subclass to return the physical size of the     screen. The physical size represents the actual physical dimensions of     the display.      The default implementation takes the pixel size of the screen, considers a     resolution of 100 dots per inch, and returns the calculated physical size.     A device with a screen that has different resolutions will need to be     supported by a suitable reimplementation of this function.      \sa logcalDpi */
end_comment
begin_function
DECL|function|physicalSize
name|QSizeF
name|QPlatformScreen
operator|::
name|physicalSize
parameter_list|()
specifier|const
block|{
specifier|static
specifier|const
name|int
name|dpi
init|=
literal|100
decl_stmt|;
return|return
name|QSizeF
argument_list|(
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|/
name|dpi
operator|*
name|qreal
argument_list|(
literal|25.4
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Reimplement this function in subclass to return the logical horizontal     and vertical dots per inch metrics of the screen.      The logical dots per inch metrics are used by QFont to convert point sizes     to pixel sizes.      The default implementation uses the screen pixel size and physical size to     compute the metrics.      \sa physicalSize */
end_comment
begin_function
DECL|function|logicalDpi
name|QDpi
name|QPlatformScreen
operator|::
name|logicalDpi
parameter_list|()
specifier|const
block|{
name|QSizeF
name|ps
init|=
name|physicalSize
argument_list|()
decl_stmt|;
name|QSize
name|s
init|=
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|QDpi
argument_list|(
literal|25.4
operator|*
name|s
operator|.
name|width
argument_list|()
operator|/
name|ps
operator|.
name|width
argument_list|()
argument_list|,
literal|25.4
operator|*
name|s
operator|.
name|height
argument_list|()
operator|/
name|ps
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Reimplement this function in subclass to return the primary orientation     of the screen, i.e. the orientation the display controller or equivalent     expects.      The default implementation returns Qt::PortraitOrientation if the     geometry's height is greater or Qt::LandscapeOrientation if the geometry's     width is greater. */
end_comment
begin_function
DECL|function|primaryOrientation
name|Qt
operator|::
name|ScreenOrientation
name|QPlatformScreen
operator|::
name|primaryOrientation
parameter_list|()
specifier|const
block|{
return|return
name|geometry
argument_list|()
operator|.
name|height
argument_list|()
operator|>
name|geometry
argument_list|()
operator|.
name|width
argument_list|()
condition|?
name|Qt
operator|::
name|PortraitOrientation
else|:
name|Qt
operator|::
name|LandscapeOrientation
return|;
block|}
end_function
begin_comment
comment|/*!     Reimplement this function in subclass to return the current orientation     of the screen, for example based on accelerometer data to determine     the physical screen orientation.      The current orientation is only a hint to the application saying     what the preferred application orientation should be, the application     is free to limit itself to a certain set of supported orientations.      The default implementation returns the same as primaryOrientation().      \sa primaryOrientation() */
end_comment
begin_function
DECL|function|currentOrientation
name|Qt
operator|::
name|ScreenOrientation
name|QPlatformScreen
operator|::
name|currentOrientation
parameter_list|()
specifier|const
block|{
return|return
name|primaryOrientation
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|platformScreenForWindow
name|QPlatformScreen
modifier|*
name|QPlatformScreen
operator|::
name|platformScreenForWindow
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
return|return
name|window
operator|->
name|screen
argument_list|()
operator|->
name|handle
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \class QPlatformScreen     \since 4.8     \internal     \preliminary     \ingroup qpa      \brief The QPlatformScreen class provides an abstraction for visual displays.      Many window systems has support for retrieving information on the attached displays. To be able     to query the display QPA uses QPlatformScreen. Qt its self is most dependent on the     physicalSize() function, since this is the function it uses to calculate the dpi to use when     converting point sizes to pixels sizes. However, this is unfortunate on some systems, as the     native system fakes its dpi size.      QPlatformScreen is also used by the public api QDesktopWidget for information about the desktop.  */
end_comment
begin_comment
comment|/*! \fn QRect QPlatformScreen::geometry() const = 0     Reimplement in subclass to return the pixel geometry of the screen */
end_comment
begin_comment
comment|/*! \fn QRect QPlatformScreen::availableGeometry() const     Reimplement in subclass to return the pixel geometry of the available space     This normally is the desktop screen minus the task manager, global menubar etc. */
end_comment
begin_comment
comment|/*! \fn int QPlatformScreen::depth() const = 0     Reimplement in subclass to return current depth of the screen */
end_comment
begin_comment
comment|/*! \fn QImage::Format QPlatformScreen::format() const = 0     Reimplement in subclass to return the image format which corresponds to the screen format */
end_comment
begin_comment
comment|/*!     \class QPlatformScreenPageFlipper     \since 5.0     \internal     \preliminary     \ingroup qpa      \brief The QPlatformScreenPageFlipper class provides an abstract interface for display buffer swapping      Implement the displayBuffer() function to initiate a buffer swap. The     bufferDisplayed() signal should be emitted once the buffer is actually displayed on     the screen. The bufferReleased() signal should be emitted when the buffer data is no     longer owned by the display hardware. */
end_comment
begin_comment
comment|/*!  \fn bool QPlatformScreenPageFlipper::displayBuffer(void *bufferHandle)  Implemented in subclasses to display the buffer referenced by \a bufferHandle directly on the screen. Returns \c true if it is possible to display the buffer, and \c false if the buffer cannot be displayed.  If this function returns true, the buffer must not be modified or destroyed before the bufferReleased() signal is emitted.  The signal bufferDisplayed() is emitted when the buffer is displayed on the screen. The two signals may be emitted in either order.  This function is allowed to block. */
end_comment
begin_comment
comment|/*!   Implemented in subclasses to return a page flipper object for the screen, or 0 if the   hardware does not support page flipping. The default implementation returns 0.  */
end_comment
begin_function
DECL|function|pageFlipper
name|QPlatformScreenPageFlipper
modifier|*
name|QPlatformScreen
operator|::
name|pageFlipper
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
