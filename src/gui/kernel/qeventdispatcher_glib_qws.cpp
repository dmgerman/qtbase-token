begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qeventdispatcher_glib_qws_p.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"private/qwscommand_qws_p.h"
end_include
begin_include
include|#
directive|include
file|"qwsdisplay_qws.h"
end_include
begin_include
include|#
directive|include
file|"qwsevent_qws.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsystem_qws.h"
end_include
begin_include
include|#
directive|include
file|<glib.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// from qapplication_qws.cpp
specifier|extern
name|QWSDisplay
modifier|*
name|qt_fbdpy
decl_stmt|;
end_decl_stmt
begin_comment
comment|// QWS `display'
end_comment
begin_comment
comment|//from qwindowsystem_qws.cpp
end_comment
begin_function_decl
specifier|extern
name|QList
argument_list|<
name|QWSCommand
modifier|*
argument_list|>
modifier|*
name|qt_get_server_queue
parameter_list|()
function_decl|;
end_function_decl
begin_struct
DECL|struct|GQWSEventSource
struct|struct
name|GQWSEventSource
block|{
DECL|member|source
name|GSource
name|source
decl_stmt|;
DECL|member|flags
name|QEventLoop
operator|::
name|ProcessEventsFlags
name|flags
decl_stmt|;
DECL|member|q
name|QWSEventDispatcherGlib
modifier|*
name|q
decl_stmt|;
DECL|member|d
name|QWSEventDispatcherGlibPrivate
modifier|*
name|d
decl_stmt|;
block|}
struct|;
end_struct
begin_class
DECL|class|QWSEventDispatcherGlibPrivate
class|class
name|QWSEventDispatcherGlibPrivate
super|:
specifier|public
name|QEventDispatcherGlibPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QWSEventDispatcherGlib
parameter_list|)
specifier|public
private|:
name|QWSEventDispatcherGlibPrivate
parameter_list|()
constructor_decl|;
DECL|member|qwsEventSource
name|GQWSEventSource
modifier|*
name|qwsEventSource
decl_stmt|;
DECL|member|queuedUserInputEvents
name|QList
argument_list|<
name|QWSEvent
modifier|*
argument_list|>
name|queuedUserInputEvents
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|qwsEventSourcePrepare
specifier|static
name|gboolean
name|qwsEventSourcePrepare
parameter_list|(
name|GSource
modifier|*
name|s
parameter_list|,
name|gint
modifier|*
name|timeout
parameter_list|)
block|{
if|if
condition|(
name|timeout
condition|)
operator|*
name|timeout
operator|=
operator|-
literal|1
expr_stmt|;
name|GQWSEventSource
modifier|*
name|source
init|=
cast|reinterpret_cast
argument_list|<
name|GQWSEventSource
operator|*
argument_list|>
argument_list|(
name|s
argument_list|)
decl_stmt|;
return|return
name|qt_fbdpy
operator|->
name|eventPending
argument_list|()
operator|||
operator|!
name|source
operator|->
name|d
operator|->
name|queuedUserInputEvents
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|qt_get_server_queue
argument_list|()
operator|->
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|qwsEventSourceCheck
specifier|static
name|gboolean
name|qwsEventSourceCheck
parameter_list|(
name|GSource
modifier|*
name|s
parameter_list|)
block|{
name|GQWSEventSource
modifier|*
name|source
init|=
cast|reinterpret_cast
argument_list|<
name|GQWSEventSource
operator|*
argument_list|>
argument_list|(
name|s
argument_list|)
decl_stmt|;
return|return
name|qt_fbdpy
operator|->
name|eventPending
argument_list|()
operator|||
operator|!
name|source
operator|->
name|d
operator|->
name|queuedUserInputEvents
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|qt_get_server_queue
argument_list|()
operator|->
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|qwsEventSourceDispatch
specifier|static
name|gboolean
name|qwsEventSourceDispatch
parameter_list|(
name|GSource
modifier|*
name|s
parameter_list|,
name|GSourceFunc
name|callback
parameter_list|,
name|gpointer
name|user_data
parameter_list|)
block|{
name|GQWSEventSource
modifier|*
name|source
init|=
cast|reinterpret_cast
argument_list|<
name|GQWSEventSource
operator|*
argument_list|>
argument_list|(
name|s
argument_list|)
decl_stmt|;
comment|//??? ulong marker = XNextRequest(X11->display);
do|do
block|{
name|QWSEvent
modifier|*
name|event
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|source
operator|->
name|flags
operator|&
name|QEventLoop
operator|::
name|ExcludeUserInputEvents
operator|)
operator|&&
operator|!
name|source
operator|->
name|d
operator|->
name|queuedUserInputEvents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// process a pending user input event
name|event
operator|=
name|source
operator|->
name|d
operator|->
name|queuedUserInputEvents
operator|.
name|takeFirst
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qt_fbdpy
operator|->
name|eventPending
argument_list|()
condition|)
block|{
name|event
operator|=
name|qt_fbdpy
operator|->
name|getEvent
argument_list|()
expr_stmt|;
if|if
condition|(
name|source
operator|->
name|flags
operator|&
name|QEventLoop
operator|::
name|ExcludeUserInputEvents
condition|)
block|{
comment|// queue user input events
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|Mouse
operator|||
name|event
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|Key
condition|)
block|{
name|source
operator|->
name|d
operator|->
name|queuedUserInputEvents
operator|.
name|append
argument_list|(
name|event
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
else|else
block|{
comment|// no event to process
break|break;
block|}
comment|// send through event filter
if|if
condition|(
name|source
operator|->
name|q
operator|->
name|filterEvent
argument_list|(
name|event
argument_list|)
condition|)
block|{
operator|delete
name|event
expr_stmt|;
continue|continue;
block|}
name|bool
name|ret
init|=
name|qApp
operator|->
name|qwsProcessEvent
argument_list|(
name|event
argument_list|)
operator|==
literal|1
decl_stmt|;
operator|delete
name|event
expr_stmt|;
if|if
condition|(
name|ret
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
do|while
condition|(
name|qt_fbdpy
operator|->
name|eventPending
argument_list|()
condition|)
do|;
if|if
condition|(
name|callback
condition|)
name|callback
argument_list|(
name|user_data
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|qwsEventSourceFuncs
specifier|static
name|GSourceFuncs
name|qwsEventSourceFuncs
init|=
block|{
name|qwsEventSourcePrepare
block|,
name|qwsEventSourceCheck
block|,
name|qwsEventSourceDispatch
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QWSEventDispatcherGlibPrivate
name|QWSEventDispatcherGlibPrivate
operator|::
name|QWSEventDispatcherGlibPrivate
parameter_list|()
block|{
name|qwsEventSource
operator|=
cast|reinterpret_cast
argument_list|<
name|GQWSEventSource
operator|*
argument_list|>
argument_list|(
name|g_source_new
argument_list|(
operator|&
name|qwsEventSourceFuncs
argument_list|,
sizeof|sizeof
argument_list|(
name|GQWSEventSource
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|g_source_set_can_recurse
argument_list|(
operator|&
name|qwsEventSource
operator|->
name|source
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|qwsEventSource
operator|->
name|flags
operator|=
name|QEventLoop
operator|::
name|AllEvents
expr_stmt|;
name|qwsEventSource
operator|->
name|q
operator|=
literal|0
expr_stmt|;
name|qwsEventSource
operator|->
name|d
operator|=
literal|0
expr_stmt|;
name|g_source_attach
argument_list|(
operator|&
name|qwsEventSource
operator|->
name|source
argument_list|,
name|mainContext
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QWSEventDispatcherGlib
name|QWSEventDispatcherGlib
operator|::
name|QWSEventDispatcherGlib
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QEventDispatcherGlib
argument_list|(
operator|*
operator|new
name|QWSEventDispatcherGlibPrivate
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QWSEventDispatcherGlib
name|QWSEventDispatcherGlib
operator|::
name|~
name|QWSEventDispatcherGlib
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWSEventDispatcherGlib
argument_list|)
expr_stmt|;
name|g_source_destroy
argument_list|(
operator|&
name|d
operator|->
name|qwsEventSource
operator|->
name|source
argument_list|)
expr_stmt|;
name|d
operator|->
name|qwsEventSource
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|processEvents
name|bool
name|QWSEventDispatcherGlib
operator|::
name|processEvents
parameter_list|(
name|QEventLoop
operator|::
name|ProcessEventsFlags
name|flags
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWSEventDispatcherGlib
argument_list|)
expr_stmt|;
name|QEventLoop
operator|::
name|ProcessEventsFlags
name|saved_flags
init|=
name|d
operator|->
name|qwsEventSource
operator|->
name|flags
decl_stmt|;
name|d
operator|->
name|qwsEventSource
operator|->
name|flags
operator|=
name|flags
expr_stmt|;
name|bool
name|returnValue
init|=
name|QEventDispatcherGlib
operator|::
name|processEvents
argument_list|(
name|flags
argument_list|)
decl_stmt|;
name|d
operator|->
name|qwsEventSource
operator|->
name|flags
operator|=
name|saved_flags
expr_stmt|;
return|return
name|returnValue
return|;
block|}
end_function
begin_function
DECL|function|startingUp
name|void
name|QWSEventDispatcherGlib
operator|::
name|startingUp
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWSEventDispatcherGlib
argument_list|)
expr_stmt|;
name|d
operator|->
name|qwsEventSource
operator|->
name|q
operator|=
name|this
expr_stmt|;
name|d
operator|->
name|qwsEventSource
operator|->
name|d
operator|=
name|d
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
