begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qinputdevicemanager_p.h"
end_include
begin_include
include|#
directive|include
file|"qinputdevicemanager_p_p.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!   \class QInputDeviceManager   \internal    \brief QInputDeviceManager acts as a communication hub between QtGui and the input handlers.    On embedded platforms the input handling code is either compiled into the platform   plugin or is loaded dynamically as a generic plugin without any interface. The input   handler in use may also change between each run (e.g. evdevmouse/keyboard/touch   vs. libinput). QWindowSystemInterface is too limiting when Qt (the platform plugin) is   acting as a windowing system, and is one way only.    QInputDeviceManager solves this by providing a global object that is used to communicate   from the input handlers to the rest of Qt (e.g. the number of connected mice, which may   be important information for the cursor drawing code), and vice-versa (e.g. to indicate   to the input handler that a manual cursor position change was requested by the   application via QCursor::setPos and thus any internal state has to be updated accordingly). */
end_comment
begin_constructor
DECL|function|QInputDeviceManager
name|QInputDeviceManager
operator|::
name|QInputDeviceManager
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QInputDeviceManagerPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|qRegisterMetaType
argument_list|<
name|DeviceType
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|deviceCount
name|int
name|QInputDeviceManager
operator|::
name|deviceCount
parameter_list|(
name|DeviceType
name|type
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDeviceManager
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|deviceCount
argument_list|(
name|type
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|deviceCount
name|int
name|QInputDeviceManagerPrivate
operator|::
name|deviceCount
parameter_list|(
name|QInputDeviceManager
operator|::
name|DeviceType
name|type
parameter_list|)
specifier|const
block|{
return|return
name|m_deviceCount
operator|.
name|value
argument_list|(
name|type
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setDeviceCount
name|void
name|QInputDeviceManagerPrivate
operator|::
name|setDeviceCount
parameter_list|(
name|QInputDeviceManager
operator|::
name|DeviceType
name|type
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QInputDeviceManager
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_deviceCount
operator|.
name|value
argument_list|(
name|type
argument_list|)
operator|!=
name|count
condition|)
block|{
name|m_deviceCount
index|[
name|type
index|]
operator|=
name|count
expr_stmt|;
emit|emit
name|q
operator|->
name|deviceListChanged
argument_list|(
name|type
argument_list|)
emit|;
block|}
block|}
end_function
begin_function
DECL|function|setCursorPos
name|void
name|QInputDeviceManager
operator|::
name|setCursorPos
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
emit|emit
name|cursorPositionChangeRequested
argument_list|(
name|pos
argument_list|)
emit|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
