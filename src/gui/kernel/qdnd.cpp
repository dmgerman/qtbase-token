begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qdrag.h"
end_include
begin_include
include|#
directive|include
file|"qpixmap.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qfile.h"
end_include
begin_include
include|#
directive|include
file|"qtextcodec.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qpoint.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qbuffer.h"
end_include
begin_include
include|#
directive|include
file|"qimage.h"
end_include
begin_include
include|#
directive|include
file|"qregexp.h"
end_include
begin_include
include|#
directive|include
file|"qdir.h"
end_include
begin_include
include|#
directive|include
file|"qdnd_p.h"
end_include
begin_include
include|#
directive|include
file|"qimagereader.h"
end_include
begin_include
include|#
directive|include
file|"qimagewriter.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|<ctype.h>
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_function
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
comment|//#define QDND_DEBUG
ifdef|#
directive|ifdef
name|QDND_DEBUG
DECL|function|dragActionsToString
name|QString
name|dragActionsToString
parameter_list|(
name|Qt
operator|::
name|DropActions
name|actions
parameter_list|)
block|{
name|QString
name|str
decl_stmt|;
if|if
condition|(
name|actions
operator|==
name|Qt
operator|::
name|IgnoreAction
condition|)
block|{
if|if
condition|(
operator|!
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|+=
literal|" | "
expr_stmt|;
name|str
operator|+=
literal|"IgnoreAction"
expr_stmt|;
block|}
if|if
condition|(
name|actions
operator|&
name|Qt
operator|::
name|LinkAction
condition|)
block|{
if|if
condition|(
operator|!
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|+=
literal|" | "
expr_stmt|;
name|str
operator|+=
literal|"LinkAction"
expr_stmt|;
block|}
if|if
condition|(
name|actions
operator|&
name|Qt
operator|::
name|CopyAction
condition|)
block|{
if|if
condition|(
operator|!
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|+=
literal|" | "
expr_stmt|;
name|str
operator|+=
literal|"CopyAction"
expr_stmt|;
block|}
if|if
condition|(
name|actions
operator|&
name|Qt
operator|::
name|MoveAction
condition|)
block|{
if|if
condition|(
operator|!
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|+=
literal|" | "
expr_stmt|;
name|str
operator|+=
literal|"MoveAction"
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|actions
operator|&
name|Qt
operator|::
name|TargetMoveAction
operator|)
operator|==
name|Qt
operator|::
name|TargetMoveAction
condition|)
block|{
if|if
condition|(
operator|!
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|+=
literal|" | "
expr_stmt|;
name|str
operator|+=
literal|"TargetMoveAction"
expr_stmt|;
block|}
return|return
name|str
return|;
block|}
end_function
begin_function
DECL|function|KeyboardModifiersToString
name|QString
name|KeyboardModifiersToString
parameter_list|(
name|Qt
operator|::
name|KeyboardModifiers
name|moderfies
parameter_list|)
block|{
name|QString
name|str
decl_stmt|;
if|if
condition|(
name|moderfies
operator|&
name|Qt
operator|::
name|ControlModifier
condition|)
block|{
if|if
condition|(
operator|!
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|+=
literal|" | "
expr_stmt|;
name|str
operator|+=
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
block|}
if|if
condition|(
name|moderfies
operator|&
name|Qt
operator|::
name|AltModifier
condition|)
block|{
if|if
condition|(
operator|!
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|+=
literal|" | "
expr_stmt|;
name|str
operator|+=
name|Qt
operator|::
name|AltModifier
expr_stmt|;
block|}
if|if
condition|(
name|moderfies
operator|&
name|Qt
operator|::
name|ShiftModifier
condition|)
block|{
if|if
condition|(
operator|!
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|+=
literal|" | "
expr_stmt|;
name|str
operator|+=
name|Qt
operator|::
name|ShiftModifier
expr_stmt|;
block|}
return|return
name|str
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// the universe's only drag manager
end_comment
begin_decl_stmt
DECL|member|instance
name|QDragManager
modifier|*
name|QDragManager
operator|::
name|instance
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QDragManager
name|QDragManager
operator|::
name|QDragManager
parameter_list|()
member_init_list|:
name|QObject
argument_list|(
name|qApp
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|instance
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_QWS
name|currentActionForOverrideCursor
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
endif|#
directive|endif
name|object
operator|=
literal|0
expr_stmt|;
name|beingCancelled
operator|=
literal|false
expr_stmt|;
name|restoreCursor
operator|=
literal|false
expr_stmt|;
name|willDrop
operator|=
literal|false
expr_stmt|;
name|eventLoop
operator|=
literal|0
expr_stmt|;
name|dropData
operator|=
operator|new
name|QDropData
argument_list|()
expr_stmt|;
name|currentDropTarget
operator|=
literal|0
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|xdndMimeTransferedPixmapIndex
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QDragManager
name|QDragManager
operator|::
name|~
name|QDragManager
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
if|if
condition|(
name|restoreCursor
condition|)
name|QApplication
operator|::
name|restoreOverrideCursor
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|instance
operator|=
literal|0
expr_stmt|;
operator|delete
name|dropData
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|self
name|QDragManager
modifier|*
name|QDragManager
operator|::
name|self
parameter_list|()
block|{
if|if
condition|(
operator|!
name|instance
operator|&&
operator|!
name|QApplication
operator|::
name|closingDown
argument_list|()
condition|)
name|instance
operator|=
operator|new
name|QDragManager
expr_stmt|;
return|return
name|instance
return|;
block|}
end_function
begin_function
DECL|function|dragCursor
name|QPixmap
name|QDragManager
operator|::
name|dragCursor
parameter_list|(
name|Qt
operator|::
name|DropAction
name|action
parameter_list|)
specifier|const
block|{
name|QDragPrivate
modifier|*
name|d
init|=
name|dragPrivate
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|&&
name|d
operator|->
name|customCursors
operator|.
name|contains
argument_list|(
name|action
argument_list|)
condition|)
return|return
name|d
operator|->
name|customCursors
index|[
name|action
index|]
return|;
elseif|else
if|if
condition|(
name|action
operator|==
name|Qt
operator|::
name|MoveAction
condition|)
return|return
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|getPixmapCursor
argument_list|(
name|Qt
operator|::
name|DragMoveCursor
argument_list|)
return|;
elseif|else
if|if
condition|(
name|action
operator|==
name|Qt
operator|::
name|CopyAction
condition|)
return|return
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|getPixmapCursor
argument_list|(
name|Qt
operator|::
name|DragCopyCursor
argument_list|)
return|;
elseif|else
if|if
condition|(
name|action
operator|==
name|Qt
operator|::
name|LinkAction
condition|)
return|return
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|getPixmapCursor
argument_list|(
name|Qt
operator|::
name|DragLinkCursor
argument_list|)
return|;
ifdef|#
directive|ifdef
name|Q_WS_WIN
elseif|else
if|if
condition|(
name|action
operator|==
name|Qt
operator|::
name|IgnoreAction
condition|)
return|return
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|getPixmapCursor
argument_list|(
name|Qt
operator|::
name|ForbiddenCursor
argument_list|)
return|;
endif|#
directive|endif
return|return
name|QPixmap
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|hasCustomDragCursors
name|bool
name|QDragManager
operator|::
name|hasCustomDragCursors
parameter_list|()
specifier|const
block|{
name|QDragPrivate
modifier|*
name|d
init|=
name|dragPrivate
argument_list|()
decl_stmt|;
return|return
name|d
operator|&&
operator|!
name|d
operator|->
name|customCursors
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|defaultAction
name|Qt
operator|::
name|DropAction
name|QDragManager
operator|::
name|defaultAction
parameter_list|(
name|Qt
operator|::
name|DropActions
name|possibleActions
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
specifier|const
block|{
ifdef|#
directive|ifdef
name|QDND_DEBUG
name|qDebug
argument_list|(
literal|"QDragManager::defaultAction(Qt::DropActions possibleActions)"
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"keyboard modifiers : %s"
argument_list|,
name|KeyboardModifiersToString
argument_list|(
name|modifiers
argument_list|)
operator|.
name|latin1
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QDragPrivate
modifier|*
name|d
init|=
name|dragPrivate
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|DropAction
name|defaultAction
init|=
name|d
condition|?
name|d
operator|->
name|defaultDropAction
else|:
name|Qt
operator|::
name|IgnoreAction
decl_stmt|;
if|if
condition|(
name|defaultAction
operator|==
name|Qt
operator|::
name|IgnoreAction
condition|)
block|{
comment|//This means that the drag was initiated by QDrag::start and we need to
comment|//preserve the old behavior
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|defaultAction
operator|=
name|Qt
operator|::
name|MoveAction
expr_stmt|;
else|#
directive|else
name|defaultAction
operator|=
name|Qt
operator|::
name|CopyAction
expr_stmt|;
endif|#
directive|endif
block|}
ifdef|#
directive|ifdef
name|Q_WS_MAC
if|if
condition|(
name|modifiers
operator|&
name|Qt
operator|::
name|ControlModifier
operator|&&
name|modifiers
operator|&
name|Qt
operator|::
name|AltModifier
condition|)
name|defaultAction
operator|=
name|Qt
operator|::
name|LinkAction
expr_stmt|;
elseif|else
if|if
condition|(
name|modifiers
operator|&
name|Qt
operator|::
name|AltModifier
condition|)
name|defaultAction
operator|=
name|Qt
operator|::
name|CopyAction
expr_stmt|;
elseif|else
if|if
condition|(
name|modifiers
operator|&
name|Qt
operator|::
name|ControlModifier
condition|)
name|defaultAction
operator|=
name|Qt
operator|::
name|MoveAction
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|modifiers
operator|&
name|Qt
operator|::
name|ControlModifier
operator|&&
name|modifiers
operator|&
name|Qt
operator|::
name|ShiftModifier
condition|)
name|defaultAction
operator|=
name|Qt
operator|::
name|LinkAction
expr_stmt|;
elseif|else
if|if
condition|(
name|modifiers
operator|&
name|Qt
operator|::
name|ControlModifier
condition|)
name|defaultAction
operator|=
name|Qt
operator|::
name|CopyAction
expr_stmt|;
elseif|else
if|if
condition|(
name|modifiers
operator|&
name|Qt
operator|::
name|ShiftModifier
condition|)
name|defaultAction
operator|=
name|Qt
operator|::
name|MoveAction
expr_stmt|;
elseif|else
if|if
condition|(
name|modifiers
operator|&
name|Qt
operator|::
name|AltModifier
condition|)
name|defaultAction
operator|=
name|Qt
operator|::
name|LinkAction
expr_stmt|;
endif|#
directive|endif
comment|// if the object is set take the list of possibles from it
if|if
condition|(
name|object
condition|)
name|possibleActions
operator|=
name|object
operator|->
name|d_func
argument_list|()
operator|->
name|possible_actions
expr_stmt|;
ifdef|#
directive|ifdef
name|QDND_DEBUG
name|qDebug
argument_list|(
literal|"possible actions : %s"
argument_list|,
name|dragActionsToString
argument_list|(
name|possibleActions
argument_list|)
operator|.
name|latin1
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Check if the action determined is allowed
if|if
condition|(
operator|!
operator|(
name|possibleActions
operator|&
name|defaultAction
operator|)
condition|)
block|{
if|if
condition|(
name|possibleActions
operator|&
name|Qt
operator|::
name|CopyAction
condition|)
name|defaultAction
operator|=
name|Qt
operator|::
name|CopyAction
expr_stmt|;
elseif|else
if|if
condition|(
name|possibleActions
operator|&
name|Qt
operator|::
name|MoveAction
condition|)
name|defaultAction
operator|=
name|Qt
operator|::
name|MoveAction
expr_stmt|;
elseif|else
if|if
condition|(
name|possibleActions
operator|&
name|Qt
operator|::
name|LinkAction
condition|)
name|defaultAction
operator|=
name|Qt
operator|::
name|LinkAction
expr_stmt|;
else|else
name|defaultAction
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QDND_DEBUG
name|qDebug
argument_list|(
literal|"default action : %s"
argument_list|,
name|dragActionsToString
argument_list|(
name|defaultAction
argument_list|)
operator|.
name|latin1
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|defaultAction
return|;
block|}
end_function
begin_function
DECL|function|setCurrentTarget
name|void
name|QDragManager
operator|::
name|setCurrentTarget
parameter_list|(
name|QWidget
modifier|*
name|target
parameter_list|,
name|bool
name|dropped
parameter_list|)
block|{
if|if
condition|(
name|currentDropTarget
operator|==
name|target
condition|)
return|return;
name|currentDropTarget
operator|=
name|target
expr_stmt|;
if|if
condition|(
operator|!
name|dropped
operator|&&
name|object
condition|)
block|{
name|object
operator|->
name|d_func
argument_list|()
operator|->
name|target
operator|=
name|target
expr_stmt|;
emit|emit
name|object
operator|->
name|targetChanged
argument_list|(
name|target
argument_list|)
emit|;
block|}
block|}
end_function
begin_function
DECL|function|currentTarget
name|QWidget
modifier|*
name|QDragManager
operator|::
name|currentTarget
parameter_list|()
block|{
return|return
name|currentDropTarget
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QDropData
name|QDropData
operator|::
name|QDropData
parameter_list|()
member_init_list|:
name|QInternalMimeData
argument_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~QDropData
name|QDropData
operator|::
name|~
name|QDropData
parameter_list|()
block|{ }
end_destructor
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|QT_NO_DRAGANDDROP
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_NO_CLIPBOARD
argument_list|)
operator|)
end_if
begin_function
DECL|function|imageReadMimeFormats
specifier|static
name|QStringList
name|imageReadMimeFormats
parameter_list|()
block|{
name|QStringList
name|formats
decl_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|imageFormats
init|=
name|QImageReader
operator|::
name|supportedImageFormats
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|imageFormats
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|format
init|=
name|QLatin1String
argument_list|(
literal|"image/"
argument_list|)
decl_stmt|;
name|format
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|imageFormats
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|formats
operator|.
name|append
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
comment|//put png at the front because it is best
name|int
name|pngIndex
init|=
name|formats
operator|.
name|indexOf
argument_list|(
name|QLatin1String
argument_list|(
literal|"image/png"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pngIndex
operator|!=
operator|-
literal|1
operator|&&
name|pngIndex
operator|!=
literal|0
condition|)
name|formats
operator|.
name|move
argument_list|(
name|pngIndex
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|formats
return|;
block|}
end_function
begin_function
DECL|function|imageWriteMimeFormats
specifier|static
name|QStringList
name|imageWriteMimeFormats
parameter_list|()
block|{
name|QStringList
name|formats
decl_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|imageFormats
init|=
name|QImageWriter
operator|::
name|supportedImageFormats
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|imageFormats
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|format
init|=
name|QLatin1String
argument_list|(
literal|"image/"
argument_list|)
decl_stmt|;
name|format
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|imageFormats
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|formats
operator|.
name|append
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
comment|//put png at the front because it is best
name|int
name|pngIndex
init|=
name|formats
operator|.
name|indexOf
argument_list|(
name|QLatin1String
argument_list|(
literal|"image/png"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pngIndex
operator|!=
operator|-
literal|1
operator|&&
name|pngIndex
operator|!=
literal|0
condition|)
name|formats
operator|.
name|move
argument_list|(
name|pngIndex
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|formats
return|;
block|}
end_function
begin_constructor
DECL|function|QInternalMimeData
name|QInternalMimeData
operator|::
name|QInternalMimeData
parameter_list|()
member_init_list|:
name|QMimeData
argument_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~QInternalMimeData
name|QInternalMimeData
operator|::
name|~
name|QInternalMimeData
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|hasFormat
name|bool
name|QInternalMimeData
operator|::
name|hasFormat
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|)
specifier|const
block|{
name|bool
name|foundFormat
init|=
name|hasFormat_sys
argument_list|(
name|mimeType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|foundFormat
operator|&&
name|mimeType
operator|==
name|QLatin1String
argument_list|(
literal|"application/x-qt-image"
argument_list|)
condition|)
block|{
name|QStringList
name|imageFormats
init|=
name|imageReadMimeFormats
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|imageFormats
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
name|foundFormat
operator|=
name|hasFormat_sys
argument_list|(
name|imageFormats
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|)
condition|)
break|break;
block|}
block|}
return|return
name|foundFormat
return|;
block|}
end_function
begin_function
DECL|function|formats
name|QStringList
name|QInternalMimeData
operator|::
name|formats
parameter_list|()
specifier|const
block|{
name|QStringList
name|realFormats
init|=
name|formats_sys
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|realFormats
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/x-qt-image"
argument_list|)
argument_list|)
condition|)
block|{
name|QStringList
name|imageFormats
init|=
name|imageReadMimeFormats
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|imageFormats
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|realFormats
operator|.
name|contains
argument_list|(
name|imageFormats
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|realFormats
operator|+=
name|QLatin1String
argument_list|(
literal|"application/x-qt-image"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|realFormats
return|;
block|}
end_function
begin_function
DECL|function|retrieveData
name|QVariant
name|QInternalMimeData
operator|::
name|retrieveData
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|,
name|QVariant
operator|::
name|Type
name|type
parameter_list|)
specifier|const
block|{
name|QVariant
name|data
init|=
name|retrieveData_sys
argument_list|(
name|mimeType
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|mimeType
operator|==
name|QLatin1String
argument_list|(
literal|"application/x-qt-image"
argument_list|)
condition|)
block|{
if|if
condition|(
name|data
operator|.
name|isNull
argument_list|()
operator|||
operator|(
name|data
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|ByteArray
operator|&&
name|data
operator|.
name|toByteArray
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
comment|// try to find an image
name|QStringList
name|imageFormats
init|=
name|imageReadMimeFormats
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|imageFormats
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|data
operator|=
name|retrieveData_sys
argument_list|(
name|imageFormats
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|isNull
argument_list|()
operator|||
operator|(
name|data
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|ByteArray
operator|&&
name|data
operator|.
name|toByteArray
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
continue|continue;
break|break;
block|}
block|}
comment|// we wanted some image type, but all we got was a byte array. Convert it to an image.
if|if
condition|(
name|data
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|ByteArray
operator|&&
operator|(
name|type
operator|==
name|QVariant
operator|::
name|Image
operator|||
name|type
operator|==
name|QVariant
operator|::
name|Pixmap
operator|||
name|type
operator|==
name|QVariant
operator|::
name|Bitmap
operator|)
condition|)
name|data
operator|=
name|QImage
operator|::
name|fromData
argument_list|(
name|data
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mimeType
operator|==
name|QLatin1String
argument_list|(
literal|"application/x-color"
argument_list|)
operator|&&
name|data
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|ByteArray
condition|)
block|{
name|QColor
name|c
decl_stmt|;
name|QByteArray
name|ba
init|=
name|data
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|ba
operator|.
name|size
argument_list|()
operator|==
literal|8
condition|)
block|{
name|ushort
modifier|*
name|colBuf
init|=
operator|(
name|ushort
operator|*
operator|)
name|ba
operator|.
name|data
argument_list|()
decl_stmt|;
name|c
operator|.
name|setRgbF
argument_list|(
name|qreal
argument_list|(
name|colBuf
index|[
literal|0
index|]
argument_list|)
operator|/
name|qreal
argument_list|(
literal|0xFFFF
argument_list|)
argument_list|,
name|qreal
argument_list|(
name|colBuf
index|[
literal|1
index|]
argument_list|)
operator|/
name|qreal
argument_list|(
literal|0xFFFF
argument_list|)
argument_list|,
name|qreal
argument_list|(
name|colBuf
index|[
literal|2
index|]
argument_list|)
operator|/
name|qreal
argument_list|(
literal|0xFFFF
argument_list|)
argument_list|,
name|qreal
argument_list|(
name|colBuf
index|[
literal|3
index|]
argument_list|)
operator|/
name|qreal
argument_list|(
literal|0xFFFF
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
name|c
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Qt: Invalid color format"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|type
argument_list|()
operator|!=
name|type
operator|&&
name|data
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|ByteArray
condition|)
block|{
comment|// try to use mime data's internal conversion stuf.
name|QInternalMimeData
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QInternalMimeData
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|that
operator|->
name|setData
argument_list|(
name|mimeType
argument_list|,
name|data
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|=
name|QMimeData
operator|::
name|retrieveData
argument_list|(
name|mimeType
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|that
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
end_function
begin_function
DECL|function|canReadData
name|bool
name|QInternalMimeData
operator|::
name|canReadData
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|)
block|{
return|return
name|imageReadMimeFormats
argument_list|()
operator|.
name|contains
argument_list|(
name|mimeType
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// helper functions for rendering mimedata to the system, this is needed because QMimeData is in core.
end_comment
begin_function
DECL|function|formatsHelper
name|QStringList
name|QInternalMimeData
operator|::
name|formatsHelper
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|data
parameter_list|)
block|{
name|QStringList
name|realFormats
init|=
name|data
operator|->
name|formats
argument_list|()
decl_stmt|;
if|if
condition|(
name|realFormats
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/x-qt-image"
argument_list|)
argument_list|)
condition|)
block|{
comment|// add all supported image formats
name|QStringList
name|imageFormats
init|=
name|imageWriteMimeFormats
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|imageFormats
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|realFormats
operator|.
name|contains
argument_list|(
name|imageFormats
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
name|realFormats
operator|.
name|append
argument_list|(
name|imageFormats
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|realFormats
return|;
block|}
end_function
begin_function
DECL|function|hasFormatHelper
name|bool
name|QInternalMimeData
operator|::
name|hasFormatHelper
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|,
specifier|const
name|QMimeData
modifier|*
name|data
parameter_list|)
block|{
name|bool
name|foundFormat
init|=
name|data
operator|->
name|hasFormat
argument_list|(
name|mimeType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|foundFormat
condition|)
block|{
if|if
condition|(
name|mimeType
operator|==
name|QLatin1String
argument_list|(
literal|"application/x-qt-image"
argument_list|)
condition|)
block|{
comment|// check all supported image formats
name|QStringList
name|imageFormats
init|=
name|imageWriteMimeFormats
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|imageFormats
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
name|foundFormat
operator|=
name|data
operator|->
name|hasFormat
argument_list|(
name|imageFormats
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|)
condition|)
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|mimeType
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"image/"
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|data
operator|->
name|hasImage
argument_list|()
operator|&&
name|imageWriteMimeFormats
argument_list|()
operator|.
name|contains
argument_list|(
name|mimeType
argument_list|)
return|;
block|}
block|}
return|return
name|foundFormat
return|;
block|}
end_function
begin_function
DECL|function|renderDataHelper
name|QByteArray
name|QInternalMimeData
operator|::
name|renderDataHelper
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|,
specifier|const
name|QMimeData
modifier|*
name|data
parameter_list|)
block|{
name|QByteArray
name|ba
decl_stmt|;
if|if
condition|(
name|mimeType
operator|==
name|QLatin1String
argument_list|(
literal|"application/x-color"
argument_list|)
condition|)
block|{
comment|/* QMimeData can only provide colors as QColor or the name            of a color as a QByteArray or a QString. So we need to do            the conversion to application/x-color here.            The application/x-color format is :            type: application/x-color            format: 16            data[0]: red            data[1]: green            data[2]: blue            data[3]: opacity         */
name|ba
operator|.
name|resize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|ushort
modifier|*
name|colBuf
init|=
operator|(
name|ushort
operator|*
operator|)
name|ba
operator|.
name|data
argument_list|()
decl_stmt|;
name|QColor
name|c
init|=
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|data
operator|->
name|colorData
argument_list|()
argument_list|)
decl_stmt|;
name|colBuf
index|[
literal|0
index|]
operator|=
name|ushort
argument_list|(
name|c
operator|.
name|redF
argument_list|()
operator|*
literal|0xFFFF
argument_list|)
expr_stmt|;
name|colBuf
index|[
literal|1
index|]
operator|=
name|ushort
argument_list|(
name|c
operator|.
name|greenF
argument_list|()
operator|*
literal|0xFFFF
argument_list|)
expr_stmt|;
name|colBuf
index|[
literal|2
index|]
operator|=
name|ushort
argument_list|(
name|c
operator|.
name|blueF
argument_list|()
operator|*
literal|0xFFFF
argument_list|)
expr_stmt|;
name|colBuf
index|[
literal|3
index|]
operator|=
name|ushort
argument_list|(
name|c
operator|.
name|alphaF
argument_list|()
operator|*
literal|0xFFFF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ba
operator|=
name|data
operator|->
name|data
argument_list|(
name|mimeType
argument_list|)
expr_stmt|;
if|if
condition|(
name|ba
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|mimeType
operator|==
name|QLatin1String
argument_list|(
literal|"application/x-qt-image"
argument_list|)
operator|&&
name|data
operator|->
name|hasImage
argument_list|()
condition|)
block|{
name|QImage
name|image
init|=
name|qvariant_cast
argument_list|<
name|QImage
argument_list|>
argument_list|(
name|data
operator|->
name|imageData
argument_list|()
argument_list|)
decl_stmt|;
name|QBuffer
name|buf
argument_list|(
operator|&
name|ba
argument_list|)
decl_stmt|;
name|buf
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
comment|// would there not be PNG ??
name|image
operator|.
name|save
argument_list|(
operator|&
name|buf
argument_list|,
literal|"PNG"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mimeType
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"image/"
argument_list|)
argument_list|)
operator|&&
name|data
operator|->
name|hasImage
argument_list|()
condition|)
block|{
name|QImage
name|image
init|=
name|qvariant_cast
argument_list|<
name|QImage
argument_list|>
argument_list|(
name|data
operator|->
name|imageData
argument_list|()
argument_list|)
decl_stmt|;
name|QBuffer
name|buf
argument_list|(
operator|&
name|ba
argument_list|)
decl_stmt|;
name|buf
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|image
operator|.
name|save
argument_list|(
operator|&
name|buf
argument_list|,
name|mimeType
operator|.
name|mid
argument_list|(
name|mimeType
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
operator|+
literal|1
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|toUpper
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ba
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP&& QT_NO_CLIPBOARD
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
