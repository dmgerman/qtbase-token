begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QAPPLICATION_H
end_ifndef
begin_define
DECL|macro|QAPPLICATION_H
define|#
directive|define
name|QAPPLICATION_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qwindowdefs.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpoint.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qsize.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qcursor.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_INCLUDE_COMPAT
end_ifdef
begin_include
include|#
directive|include
file|<QtGui/qdesktopwidget.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_include
include|#
directive|include
file|<QtGui/qwidget.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpalette.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_QWS
end_ifdef
begin_include
include|#
directive|include
file|<QtGui/qrgb.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qtransportauth_qws.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_QPA
end_ifdef
begin_include
include|#
directive|include
file|<QtGui/qguiapplication.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_HEADER
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
DECL|variable|CApaApplication
name|class
name|CApaApplication
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Gui
argument_list|)
name|class
name|QSessionManager
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDesktopWidget
name|class
name|QDesktopWidget
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QStyle
name|class
name|QStyle
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QEventLoop
name|class
name|QEventLoop
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QIcon
name|class
name|QIcon
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QInputContext
name|class
name|QInputContext
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|variable|QList
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|QList
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|QLocale
name|class
name|QLocale
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
end_if
begin_decl_stmt
DECL|variable|QDecoration
name|class
name|QDecoration
decl_stmt|;
end_decl_stmt
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_QPA
argument_list|)
end_elif
begin_decl_stmt
DECL|variable|QPlatformNativeInterface
name|class
name|QPlatformNativeInterface
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
end_if
begin_decl_stmt
DECL|variable|QSymbianEvent
name|class
name|QSymbianEvent
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|QApplication
name|class
name|QApplication
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QApplicationPrivate
name|class
name|QApplicationPrivate
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|qApp
argument_list|)
end_if
begin_undef
DECL|macro|qApp
undef|#
directive|undef
name|qApp
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|qApp
define|#
directive|define
name|qApp
value|(static_cast<QApplication *>(QCoreApplication::instance()))
end_define
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_QPA
end_ifdef
begin_define
DECL|macro|QApplicationBase
define|#
directive|define
name|QApplicationBase
value|QGuiApplication
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|QApplicationBase
define|#
directive|define
name|QApplicationBase
value|QCoreApplication
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QApplication
range|:
name|public
name|QApplicationBase
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
argument|QIcon windowIcon READ windowIcon WRITE setWindowIcon
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|int cursorFlashTime READ cursorFlashTime WRITE setCursorFlashTime
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|int doubleClickInterval  READ doubleClickInterval WRITE setDoubleClickInterval
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|int keyboardInputInterval READ keyboardInputInterval WRITE setKeyboardInputInterval
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
name|Q_PROPERTY
argument_list|(
argument|int wheelScrollLines  READ wheelScrollLines WRITE setWheelScrollLines
argument_list|)
endif|#
directive|endif
name|Q_PROPERTY
argument_list|(
argument|QSize globalStrut READ globalStrut WRITE setGlobalStrut
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|int startDragTime  READ startDragTime WRITE setStartDragTime
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|int startDragDistance  READ startDragDistance WRITE setStartDragDistance
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool quitOnLastWindowClosed  READ quitOnLastWindowClosed WRITE setQuitOnLastWindowClosed
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_STYLE_STYLESHEET
name|Q_PROPERTY
argument_list|(
argument|QString styleSheet READ styleSheet WRITE setStyleSheet
argument_list|)
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_WS_WINCE
name|Q_PROPERTY
argument_list|(
argument|int autoMaximizeThreshold READ autoMaximizeThreshold WRITE setAutoMaximizeThreshold
argument_list|)
endif|#
directive|endif
name|Q_PROPERTY
argument_list|(
argument|bool autoSipEnabled READ autoSipEnabled WRITE setAutoSipEnabled
argument_list|)
name|public
operator|:
expr|enum
name|Type
block|{
name|Tty
block|,
name|GuiClient
block|,
name|GuiServer
block|}
block|;
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
typedef|typedef
name|CApaApplication
modifier|*
function_decl|(
modifier|*
name|QS60MainApplicationFactory
function_decl|)
parameter_list|()
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|qdoc
name|QApplication
argument_list|(
name|int
operator|&
name|argc
argument_list|,
name|char
operator|*
operator|*
name|argv
argument_list|,
name|int
operator|=
name|ApplicationFlags
argument_list|)
decl_stmt|;
end_decl_stmt
begin_macro
name|QApplication
argument_list|(
argument|int&argc
argument_list|,
argument|char **argv
argument_list|,
argument|bool GUIenabled
argument_list|,
argument|int = ApplicationFlags
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|QApplication
argument_list|(
name|int
operator|&
name|argc
argument_list|,
name|char
operator|*
operator|*
name|argv
argument_list|,
name|Type
argument_list|,
name|int
operator|=
name|ApplicationFlags
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
end_if
begin_macro
name|QApplication
argument_list|(
argument|Display* dpy
argument_list|,
argument|Qt::HANDLE visual =
literal|0
argument_list|,
argument|Qt::HANDLE cmap =
literal|0
argument_list|,
argument|int = ApplicationFlags
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QApplication
argument_list|(
argument|Display *dpy
argument_list|,
argument|int&argc
argument_list|,
argument|char **argv
argument_list|,
argument|Qt::HANDLE visual =
literal|0
argument_list|,
argument|Qt::HANDLE cmap=
literal|0
argument_list|,
argument|int = ApplicationFlags
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
end_if
begin_macro
name|QApplication
argument_list|(
argument|QApplication::QS60MainApplicationFactory factory
argument_list|,
argument|int&argc
argument_list|,
argument|char **argv
argument_list|,
argument|int = ApplicationFlags
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|virtual
operator|~
name|QApplication
argument_list|()
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|static
name|Type
name|type
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QStyle
modifier|*
name|style
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|setStyle
parameter_list|(
name|QStyle
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QStyle
modifier|*
name|setStyle
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
end_function_decl
begin_enum
enum|enum
name|ColorSpec
block|{
name|NormalColor
init|=
literal|0
block|,
name|CustomColor
init|=
literal|1
block|,
name|ManyColor
init|=
literal|2
block|}
enum|;
end_enum
begin_function_decl
specifier|static
name|int
name|colorSpec
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|setColorSpec
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// ### Qt4 compatibility, remove?
end_comment
begin_function
specifier|static
specifier|inline
name|void
name|setGraphicsSystem
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
block|{}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function_decl
specifier|static
name|QCursor
modifier|*
name|overrideCursor
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|setOverrideCursor
parameter_list|(
specifier|const
name|QCursor
modifier|&
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|changeOverrideCursor
parameter_list|(
specifier|const
name|QCursor
modifier|&
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|restoreOverrideCursor
parameter_list|()
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
specifier|static
name|QPalette
name|palette
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QPalette
name|palette
parameter_list|(
specifier|const
name|QWidget
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QPalette
name|palette
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|setPalette
parameter_list|(
specifier|const
name|QPalette
modifier|&
parameter_list|,
specifier|const
name|char
modifier|*
name|className
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QFont
name|font
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QFont
name|font
parameter_list|(
specifier|const
name|QWidget
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QFont
name|font
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|setFont
parameter_list|(
specifier|const
name|QFont
modifier|&
parameter_list|,
specifier|const
name|char
modifier|*
name|className
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QFontMetrics
name|fontMetrics
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|setWindowIcon
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QIcon
name|windowIcon
parameter_list|()
function_decl|;
end_function_decl
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_function_decl
specifier|static
name|QT3_SUPPORT
name|QWidget
modifier|*
name|mainWidget
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QT3_SUPPORT
name|void
name|setMainWidget
parameter_list|(
name|QWidget
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
specifier|static
name|QWidgetList
name|allWidgets
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QWidgetList
name|topLevelWidgets
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QDesktopWidget
modifier|*
name|desktop
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QWidget
modifier|*
name|activePopupWidget
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QWidget
modifier|*
name|activeModalWidget
parameter_list|()
function_decl|;
end_function_decl
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_QPA
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_CLIPBOARD
argument_list|)
end_if
begin_function_decl
specifier|static
name|QClipboard
modifier|*
name|clipboard
parameter_list|()
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
specifier|static
name|QWidget
modifier|*
name|focusWidget
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QWidget
modifier|*
name|activeWindow
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|setActiveWindow
parameter_list|(
name|QWidget
modifier|*
name|act
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QWidget
modifier|*
name|widgetAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
function_decl|;
end_function_decl
begin_function
specifier|static
specifier|inline
name|QWidget
modifier|*
name|widgetAt
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
return|return
name|widgetAt
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function_decl
specifier|static
name|QWidget
modifier|*
name|topLevelAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
function_decl|;
end_function_decl
begin_function
specifier|static
specifier|inline
name|QWidget
modifier|*
name|topLevelAt
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
return|return
name|topLevelAt
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function_decl
specifier|static
name|void
name|syncX
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|beep
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|alert
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|duration
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
specifier|static
name|Qt
operator|::
name|KeyboardModifiers
name|keyboardModifiers
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|static
name|Qt
operator|::
name|MouseButtons
name|mouseButtons
argument_list|()
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|static
name|void
name|setDesktopSettingsAware
parameter_list|(
name|bool
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|bool
name|desktopSettingsAware
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|setCursorFlashTime
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|int
name|cursorFlashTime
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|setDoubleClickInterval
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|int
name|doubleClickInterval
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|setKeyboardInputInterval
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|int
name|keyboardInputInterval
parameter_list|()
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
end_ifndef
begin_function_decl
specifier|static
name|void
name|setWheelScrollLines
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|int
name|wheelScrollLines
parameter_list|()
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
specifier|static
name|void
name|setGlobalStrut
parameter_list|(
specifier|const
name|QSize
modifier|&
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QSize
name|globalStrut
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|setStartDragTime
parameter_list|(
name|int
name|ms
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|int
name|startDragTime
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|setStartDragDistance
parameter_list|(
name|int
name|l
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|int
name|startDragDistance
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
specifier|static
name|bool
name|isEffectEnabled
argument_list|(
name|Qt
operator|::
name|UIEffect
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|void
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UIEffect
argument_list|,
name|bool
name|enable
operator|=
name|true
argument_list|)
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
end_if
begin_function_decl
name|virtual
name|bool
name|macEventFilter
parameter_list|(
name|EventHandlerCallRef
parameter_list|,
name|EventRef
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
end_if
begin_function_decl
name|virtual
name|bool
name|x11EventFilter
parameter_list|(
name|XEvent
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|int
name|x11ClientMessage
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
name|XEvent
modifier|*
parameter_list|,
name|bool
name|passive_only
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|x11ProcessEvent
parameter_list|(
name|XEvent
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
end_if
begin_function_decl
name|int
name|symbianProcessEvent
parameter_list|(
specifier|const
name|QSymbianEvent
modifier|*
name|event
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|bool
name|symbianEventFilter
parameter_list|(
specifier|const
name|QSymbianEvent
modifier|*
name|event
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
end_if
begin_function_decl
name|virtual
name|bool
name|qwsEventFilter
parameter_list|(
name|QWSEvent
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|qwsProcessEvent
parameter_list|(
name|QWSEvent
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|qwsSetCustomColors
parameter_list|(
name|QRgb
modifier|*
name|colortable
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|numColors
parameter_list|)
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MANAGER
end_ifndef
begin_function_decl
specifier|static
name|QDecoration
modifier|&
name|qwsDecoration
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|qwsSetDecoration
parameter_list|(
name|QDecoration
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QDecoration
modifier|*
name|qwsSetDecoration
parameter_list|(
specifier|const
name|QString
modifier|&
name|decoration
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_QPA
argument_list|)
end_if
begin_function_decl
specifier|static
name|QPlatformNativeInterface
modifier|*
name|platformNativeInterface
parameter_list|()
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
end_if
begin_function_decl
name|void
name|winFocus
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
name|bool
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|winMouseButtonUp
parameter_list|()
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SESSIONMANAGER
end_ifndef
begin_comment
comment|// session management
end_comment
begin_expr_stmt
name|bool
name|isSessionRestored
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|sessionId
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|sessionKey
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|virtual
name|void
name|commitData
parameter_list|(
name|QSessionManager
modifier|&
name|sm
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|void
name|saveState
parameter_list|(
name|QSessionManager
modifier|&
name|sm
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_IM
end_ifndef
begin_function_decl
name|void
name|setInputContext
parameter_list|(
name|QInputContext
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|QInputContext
operator|*
name|inputContext
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
specifier|static
name|int
name|exec
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|notify
parameter_list|(
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|setQuitOnLastWindowClosed
parameter_list|(
name|bool
name|quit
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|bool
name|quitOnLastWindowClosed
parameter_list|()
function_decl|;
end_function_decl
begin_ifdef
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
end_ifdef
begin_function_decl
specifier|static
name|Q_DECL_DEPRECATED
name|void
name|setKeypadNavigationEnabled
parameter_list|(
name|bool
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|bool
name|keypadNavigationEnabled
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
specifier|static
name|void
name|setNavigationMode
argument_list|(
name|Qt
operator|::
name|NavigationMode
name|mode
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
specifier|static
name|Qt
operator|::
name|NavigationMode
name|navigationMode
argument_list|()
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_label
name|Q_SIGNALS
label|:
end_label
begin_function_decl
name|void
name|lastWindowClosed
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|focusChanged
parameter_list|(
name|QWidget
modifier|*
name|old
parameter_list|,
name|QWidget
modifier|*
name|now
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|fontDatabaseChanged
parameter_list|()
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SESSIONMANAGER
end_ifndef
begin_function_decl
name|void
name|commitDataRequest
parameter_list|(
name|QSessionManager
modifier|&
name|sessionManager
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|saveStateRequest
parameter_list|(
name|QSessionManager
modifier|&
name|sessionManager
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_label
name|public
label|:
end_label
begin_expr_stmt
name|QString
name|styleSheet
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|public
name|Q_SLOTS
range|:
ifndef|#
directive|ifndef
name|QT_NO_STYLE_STYLESHEET
name|void
name|setStyleSheet
argument_list|(
specifier|const
name|QString
operator|&
name|sheet
argument_list|)
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WINCE
end_ifdef
begin_function_decl
name|void
name|setAutoMaximizeThreshold
parameter_list|(
specifier|const
name|int
name|threshold
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|int
name|autoMaximizeThreshold
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|void
name|setAutoSipEnabled
parameter_list|(
specifier|const
name|bool
name|enabled
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|autoSipEnabled
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|static
name|void
name|closeAllWindows
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|aboutQt
parameter_list|()
function_decl|;
end_function_decl
begin_label
name|protected
label|:
end_label
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
end_if
begin_function_decl
name|void
name|setArgs
parameter_list|(
name|int
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|compressEvent
parameter_list|(
name|QEvent
modifier|*
parameter_list|,
name|QObject
modifier|*
name|receiver
parameter_list|,
name|QPostEventList
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_label
name|public
label|:
end_label
begin_function
specifier|static
specifier|inline
name|QT3_SUPPORT
name|void
name|setReverseLayout
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|setLayoutDirection
argument_list|(
name|b
condition|?
name|Qt
operator|::
name|RightToLeft
else|:
name|Qt
operator|::
name|LeftToRight
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|bool
name|QT3_SUPPORT
name|reverseLayout
parameter_list|()
block|{
return|return
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
return|;
block|}
end_function
begin_expr_stmt
specifier|static
name|QT3_SUPPORT
name|Qt
operator|::
name|Alignment
name|horizontalAlignment
argument_list|(
argument|Qt::Alignment align
argument_list|)
expr_stmt|;
end_expr_stmt
begin_typedef
typedef|typedef
name|int
name|ColorMode
typedef|;
end_typedef
begin_enum
enum|enum
block|{
name|NormalColors
init|=
name|NormalColor
block|,
name|CustomColors
init|=
name|CustomColor
block|}
enum|;
end_enum
begin_function
specifier|static
specifier|inline
name|QT3_SUPPORT
name|ColorMode
name|colorMode
parameter_list|()
block|{
return|return
name|static_cast
operator|<
name|ColorMode
operator|>
operator|(
name|colorSpec
argument_list|()
operator|)
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|QT3_SUPPORT
name|void
name|setColorMode
parameter_list|(
name|ColorMode
name|mode
parameter_list|)
block|{
name|setColorSpec
argument_list|(
name|int
argument_list|(
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_CYGWIN
argument_list|)
end_if
begin_expr_stmt
specifier|static
name|QT3_SUPPORT
name|Qt
operator|::
name|WindowsVersion
name|winVersion
argument_list|()
block|{
return|return
operator|(
name|Qt
operator|::
name|WindowsVersion
operator|)
name|QSysInfo
operator|::
name|WindowsVersion
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
end_if
begin_expr_stmt
specifier|static
name|QT3_SUPPORT
name|Qt
operator|::
name|MacintoshVersion
name|macVersion
argument_list|()
block|{
return|return
operator|(
name|Qt
operator|::
name|MacintoshVersion
operator|)
name|QSysInfo
operator|::
name|MacintoshVersion
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
specifier|inline
specifier|static
name|QT3_SUPPORT
name|void
name|setOverrideCursor
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|,
name|bool
name|replace
parameter_list|)
block|{
if|if
condition|(
name|replace
condition|)
name|changeOverrideCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
else|else
name|setOverrideCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
specifier|inline
specifier|static
name|QT3_SUPPORT
name|bool
name|hasGlobalMouseTracking
parameter_list|()
block|{
return|return
name|true
return|;
block|}
end_function
begin_function
specifier|inline
specifier|static
name|QT3_SUPPORT
name|void
name|setGlobalMouseTracking
parameter_list|(
name|bool
parameter_list|)
block|{}
end_function
begin_function
specifier|inline
specifier|static
name|QT3_SUPPORT
name|void
name|flushX
parameter_list|()
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|QT3_SUPPORT
name|void
name|setWinStyleHighlightColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|c
parameter_list|)
block|{
name|QPalette
name|p
argument_list|(
name|palette
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|setPalette
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|QT3_SUPPORT
specifier|const
name|QColor
modifier|&
name|winStyleHighlightColor
parameter_list|()
block|{
return|return
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|QT3_SUPPORT
name|void
name|setPalette
parameter_list|(
specifier|const
name|QPalette
modifier|&
name|pal
parameter_list|,
name|bool
parameter_list|,
specifier|const
name|char
modifier|*
name|className
init|=
literal|0
parameter_list|)
block|{
name|setPalette
argument_list|(
name|pal
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|QT3_SUPPORT
name|void
name|setFont
parameter_list|(
specifier|const
name|QFont
modifier|&
name|font
parameter_list|,
name|bool
parameter_list|,
specifier|const
name|char
modifier|*
name|className
init|=
literal|0
parameter_list|)
block|{
name|setFont
argument_list|(
name|font
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|QT3_SUPPORT
name|QWidget
modifier|*
name|widgetAt
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|bool
name|child
parameter_list|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|widgetAt
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
return|return
name|child
condition|?
name|w
else|:
operator|(
name|w
condition|?
name|w
operator|->
name|window
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|QT3_SUPPORT
name|QWidget
modifier|*
name|widgetAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|,
name|bool
name|child
parameter_list|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|widgetAt
argument_list|(
name|p
argument_list|)
decl_stmt|;
return|return
name|child
condition|?
name|w
else|:
operator|(
name|w
condition|?
name|w
operator|->
name|window
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT3_SUPPORT
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_INTERNAL_QAPP_SRC
argument_list|)
operator|||
name|defined
argument_list|(
name|qdoc
argument_list|)
end_if
begin_expr_stmt
name|QApplication
argument_list|(
name|int
operator|&
name|argc
argument_list|,
name|char
operator|*
operator|*
name|argv
argument_list|)
expr_stmt|;
end_expr_stmt
begin_macro
name|QApplication
argument_list|(
argument|int&argc
argument_list|,
argument|char **argv
argument_list|,
argument|bool GUIenabled
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|QApplication
argument_list|(
name|int
operator|&
name|argc
argument_list|,
name|char
operator|*
operator|*
name|argv
argument_list|,
name|Type
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
end_if
begin_macro
name|QApplication
argument_list|(
argument|Display* dpy
argument_list|,
argument|Qt::HANDLE visual =
literal|0
argument_list|,
argument|Qt::HANDLE cmap =
literal|0
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QApplication
argument_list|(
argument|Display *dpy
argument_list|,
argument|int&argc
argument_list|,
argument|char **argv
argument_list|,
argument|Qt::HANDLE visual =
literal|0
argument_list|,
argument|Qt::HANDLE cmap=
literal|0
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
operator|||
name|defined
argument_list|(
name|qdoc
argument_list|)
end_if
begin_macro
name|QApplication
argument_list|(
argument|QApplication::QS60MainApplicationFactory factory
argument_list|,
argument|int&argc
argument_list|,
argument|char **argv
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_label
name|private
label|:
end_label
begin_macro
name|Q_DISABLE_COPY
argument_list|(
argument|QApplication
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QApplication
argument_list|)
end_macro
begin_decl_stmt
name|friend
name|class
name|QGraphicsWidget
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QGraphicsItem
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QGraphicsScene
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QGraphicsScenePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QWidget
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QWidgetPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QETWidget
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|Q3AccelManager
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QTranslator
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QWidgetAnimator
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
end_ifndef
begin_decl_stmt
name|friend
name|class
name|QShortcut
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QLineEdit
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QTextControl
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|friend
name|class
name|QAction
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
end_if
begin_decl_stmt
name|friend
name|class
name|QInputContext
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QWSDirectPainterSurface
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QDirectPainter
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QDirectPainterPrivate
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
end_ifndef
begin_decl_stmt
name|friend
name|class
name|QGestureManager
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
end_if
begin_macro
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_alertTimeOut()
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_RX71_MULTITOUCH
argument_list|)
end_if
begin_macro
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_readRX71MultiTouchEvents()
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
end_if
begin_macro
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_aboutToQuit()
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|};
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QAPPLICATION_H
end_comment
end_unit
