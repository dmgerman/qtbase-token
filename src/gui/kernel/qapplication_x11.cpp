begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|// ### 4.0: examine Q_EXPORT's below. The respective symbols had all
end_comment
begin_comment
comment|// been in use (e.g. in the KDE wm) before the introduction of a version
end_comment
begin_comment
comment|// map. One might want to turn some of them into proper public API and
end_comment
begin_comment
comment|// provide a proper alternative for others. See also the exports in
end_comment
begin_comment
comment|// qapplication_win.cpp, which suggest a unification.
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qcolormap.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"qcursor.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qbitarray.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qfile.h"
end_include
begin_include
include|#
directive|include
file|"qpixmapcache.h"
end_include
begin_include
include|#
directive|include
file|"qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"qtextcodec.h"
end_include
begin_include
include|#
directive|include
file|"qdatastream.h"
end_include
begin_include
include|#
directive|include
file|"qbuffer.h"
end_include
begin_include
include|#
directive|include
file|"qsocketnotifier.h"
end_include
begin_include
include|#
directive|include
file|"qsessionmanager.h"
end_include
begin_include
include|#
directive|include
file|"qclipboard.h"
end_include
begin_include
include|#
directive|include
file|"qwhatsthis.h"
end_include
begin_include
include|#
directive|include
file|"qsettings.h"
end_include
begin_include
include|#
directive|include
file|"qstylefactory.h"
end_include
begin_include
include|#
directive|include
file|"qfileinfo.h"
end_include
begin_include
include|#
directive|include
file|"qdir.h"
end_include
begin_include
include|#
directive|include
file|"qhash.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qevent_p.h"
end_include
begin_include
include|#
directive|include
file|"qvarlengtharray.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|<private/qcrashhandler_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qcolor_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qcursor_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qiconloader_p.h>
end_include
begin_include
include|#
directive|include
file|<qgtkstyle.h>
end_include
begin_include
include|#
directive|include
file|"qstyle.h"
end_include
begin_include
include|#
directive|include
file|"qmetaobject.h"
end_include
begin_include
include|#
directive|include
file|"qtimer.h"
end_include
begin_include
include|#
directive|include
file|"qlibrary.h"
end_include
begin_include
include|#
directive|include
file|<private/qgraphicssystemfactory_p.h>
end_include
begin_include
include|#
directive|include
file|"qguiplatformplugin_p.h"
end_include
begin_include
include|#
directive|include
file|"qkde_p.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_TABLET
argument_list|)
end_if
begin_extern
extern|extern
literal|"C"
block|{
DECL|macro|class
define|#
directive|define
name|class
value|c_class
comment|//XIproto.h has a name member named 'class' which the c++ compiler doesn't like
include|#
directive|include
file|<wacomcfg.h>
DECL|macro|class
undef|#
directive|undef
name|class
block|}
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_GUI_DOUBLE_CLICK_RADIUS
end_ifndef
begin_define
DECL|macro|QT_GUI_DOUBLE_CLICK_RADIUS
define|#
directive|define
name|QT_GUI_DOUBLE_CLICK_RADIUS
value|5
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//#define ALIEN_DEBUG
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_GLIB
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qguieventdispatcher_glib_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qeventdispatcher_x11_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_x11_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qkeymapper_p.h>
end_include
begin_comment
comment|// Input method stuff
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_IM
end_ifndef
begin_include
include|#
directive|include
file|"qinputcontext.h"
end_include
begin_include
include|#
directive|include
file|"qinputcontextfactory.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_IM
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_XFIXES
end_ifndef
begin_include
include|#
directive|include
file|<X11/extensions/Xfixes.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_XFIXES
end_comment
begin_include
include|#
directive|include
file|"qt_x11_p.h"
end_include
begin_include
include|#
directive|include
file|"qx11info_x11.h"
end_include
begin_define
DECL|macro|XK_MISCELLANY
define|#
directive|define
name|XK_MISCELLANY
end_define
begin_include
include|#
directive|include
file|<X11/keysymdef.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XINPUT
argument_list|)
end_if
begin_include
include|#
directive|include
file|<X11/extensions/XI.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_include
include|#
directive|include
file|<ctype.h>
end_include
begin_include
include|#
directive|include
file|<locale.h>
end_include
begin_include
include|#
directive|include
file|"qwidget_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qbackingstore_p.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_RX71_MULTITOUCH
end_ifdef
begin_include
include|#
directive|include
file|<qsocketnotifier.h>
end_include
begin_include
include|#
directive|include
file|<linux/input.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|_POSIX_VERSION
operator|+
literal|0
operator|<
literal|200112L
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_BSD4
argument_list|)
end_if
begin_define
DECL|macro|QT_NO_UNSETENV
define|#
directive|define
name|QT_NO_UNSETENV
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
comment|//#define X_NOT_BROKEN
ifdef|#
directive|ifdef
name|X_NOT_BROKEN
comment|// Some X libraries are built with setlocale #defined to _Xsetlocale,
comment|// even though library users are then built WITHOUT such a definition.
comment|// This creates a problem - Qt might setlocale() one value, but then
comment|// X looks and doesn't see the value Qt set. The solution here is to
comment|// implement _Xsetlocale just in case X calls it - redirecting it to
comment|// the real libC version.
comment|//
ifndef|#
directive|ifndef
name|setlocale
specifier|extern
literal|"C"
name|char
operator|*
name|_Xsetlocale
argument_list|(
argument|int category
argument_list|,
argument|const char *locale
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|_Xsetlocale
name|char
modifier|*
name|_Xsetlocale
parameter_list|(
name|int
name|category
parameter_list|,
specifier|const
name|char
modifier|*
name|locale
parameter_list|)
block|{
comment|//qDebug("_Xsetlocale(%d,%s),category,locale");
return|return
name|setlocale
argument_list|(
name|category
argument_list|,
name|locale
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// setlocale
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// X_NOT_BROKEN
end_comment
begin_comment
comment|/* Warning: if you modify this string, modify the list of atoms in qt_x11_p.h as well! */
end_comment
begin_decl_stmt
DECL|variable|x11_atomnames
specifier|static
specifier|const
name|char
modifier|*
name|x11_atomnames
init|=
block|{
comment|// window-manager<-> client protocols
literal|"WM_PROTOCOLS\0"
literal|"WM_DELETE_WINDOW\0"
literal|"WM_TAKE_FOCUS\0"
literal|"_NET_WM_PING\0"
literal|"_NET_WM_CONTEXT_HELP\0"
literal|"_NET_WM_SYNC_REQUEST\0"
literal|"_NET_WM_SYNC_REQUEST_COUNTER\0"
comment|// ICCCM window state
literal|"WM_STATE\0"
literal|"WM_CHANGE_STATE\0"
comment|// Session management
literal|"WM_CLIENT_LEADER\0"
literal|"WM_WINDOW_ROLE\0"
literal|"SM_CLIENT_ID\0"
comment|// Clipboard
literal|"CLIPBOARD\0"
literal|"INCR\0"
literal|"TARGETS\0"
literal|"MULTIPLE\0"
literal|"TIMESTAMP\0"
literal|"SAVE_TARGETS\0"
literal|"CLIP_TEMPORARY\0"
literal|"_QT_SELECTION\0"
literal|"_QT_CLIPBOARD_SENTINEL\0"
literal|"_QT_SELECTION_SENTINEL\0"
literal|"CLIPBOARD_MANAGER\0"
literal|"RESOURCE_MANAGER\0"
literal|"_XSETROOT_ID\0"
literal|"_QT_SCROLL_DONE\0"
literal|"_QT_INPUT_ENCODING\0"
literal|"_MOTIF_WM_HINTS\0"
literal|"DTWM_IS_RUNNING\0"
literal|"ENLIGHTENMENT_DESKTOP\0"
literal|"_DT_SAVE_MODE\0"
literal|"_SGI_DESKS_MANAGER\0"
comment|// EWMH (aka NETWM)
literal|"_NET_SUPPORTED\0"
literal|"_NET_VIRTUAL_ROOTS\0"
literal|"_NET_WORKAREA\0"
literal|"_NET_MOVERESIZE_WINDOW\0"
literal|"_NET_WM_MOVERESIZE\0"
literal|"_NET_WM_NAME\0"
literal|"_NET_WM_ICON_NAME\0"
literal|"_NET_WM_ICON\0"
literal|"_NET_WM_PID\0"
literal|"_NET_WM_WINDOW_OPACITY\0"
literal|"_NET_WM_STATE\0"
literal|"_NET_WM_STATE_ABOVE\0"
literal|"_NET_WM_STATE_BELOW\0"
literal|"_NET_WM_STATE_FULLSCREEN\0"
literal|"_NET_WM_STATE_MAXIMIZED_HORZ\0"
literal|"_NET_WM_STATE_MAXIMIZED_VERT\0"
literal|"_NET_WM_STATE_MODAL\0"
literal|"_NET_WM_STATE_STAYS_ON_TOP\0"
literal|"_NET_WM_STATE_DEMANDS_ATTENTION\0"
literal|"_NET_WM_USER_TIME\0"
literal|"_NET_WM_USER_TIME_WINDOW\0"
literal|"_NET_WM_FULL_PLACEMENT\0"
literal|"_NET_WM_WINDOW_TYPE\0"
literal|"_NET_WM_WINDOW_TYPE_DESKTOP\0"
literal|"_NET_WM_WINDOW_TYPE_DOCK\0"
literal|"_NET_WM_WINDOW_TYPE_TOOLBAR\0"
literal|"_NET_WM_WINDOW_TYPE_MENU\0"
literal|"_NET_WM_WINDOW_TYPE_UTILITY\0"
literal|"_NET_WM_WINDOW_TYPE_SPLASH\0"
literal|"_NET_WM_WINDOW_TYPE_DIALOG\0"
literal|"_NET_WM_WINDOW_TYPE_DROPDOWN_MENU\0"
literal|"_NET_WM_WINDOW_TYPE_POPUP_MENU\0"
literal|"_NET_WM_WINDOW_TYPE_TOOLTIP\0"
literal|"_NET_WM_WINDOW_TYPE_NOTIFICATION\0"
literal|"_NET_WM_WINDOW_TYPE_COMBO\0"
literal|"_NET_WM_WINDOW_TYPE_DND\0"
literal|"_NET_WM_WINDOW_TYPE_NORMAL\0"
literal|"_KDE_NET_WM_WINDOW_TYPE_OVERRIDE\0"
literal|"_KDE_NET_WM_FRAME_STRUT\0"
literal|"_NET_STARTUP_INFO\0"
literal|"_NET_STARTUP_INFO_BEGIN\0"
literal|"_NET_SUPPORTING_WM_CHECK\0"
literal|"_NET_WM_CM_S0\0"
literal|"_NET_SYSTEM_TRAY_VISUAL\0"
literal|"_NET_ACTIVE_WINDOW\0"
comment|// Property formats
literal|"COMPOUND_TEXT\0"
literal|"TEXT\0"
literal|"UTF8_STRING\0"
comment|// xdnd
literal|"XdndEnter\0"
literal|"XdndPosition\0"
literal|"XdndStatus\0"
literal|"XdndLeave\0"
literal|"XdndDrop\0"
literal|"XdndFinished\0"
literal|"XdndTypeList\0"
literal|"XdndActionList\0"
literal|"XdndSelection\0"
literal|"XdndAware\0"
literal|"XdndProxy\0"
literal|"XdndActionCopy\0"
literal|"XdndActionLink\0"
literal|"XdndActionMove\0"
literal|"XdndActionPrivate\0"
comment|// Motif DND
literal|"_MOTIF_DRAG_AND_DROP_MESSAGE\0"
literal|"_MOTIF_DRAG_INITIATOR_INFO\0"
literal|"_MOTIF_DRAG_RECEIVER_INFO\0"
literal|"_MOTIF_DRAG_WINDOW\0"
literal|"_MOTIF_DRAG_TARGETS\0"
literal|"XmTRANSFER_SUCCESS\0"
literal|"XmTRANSFER_FAILURE\0"
comment|// Xkb
literal|"_XKB_RULES_NAMES\0"
comment|// XEMBED
literal|"_XEMBED\0"
literal|"_XEMBED_INFO\0"
comment|// Wacom old. (before version 0.10)
literal|"Wacom Stylus\0"
literal|"Wacom Cursor\0"
literal|"Wacom Eraser\0"
comment|// Tablet
literal|"STYLUS\0"
literal|"ERASER\0"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_x11Data
name|Q_GUI_EXPORT
name|QX11Data
modifier|*
name|qt_x11Data
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*****************************************************************************   Internal variables and functions  *****************************************************************************/
end_comment
begin_decl_stmt
DECL|variable|appName
specifier|static
specifier|const
name|char
modifier|*
name|appName
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|appName
comment|// application name
end_comment
begin_decl_stmt
DECL|variable|appClass
specifier|static
specifier|const
name|char
modifier|*
name|appClass
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|appClass
comment|// application class
end_comment
begin_decl_stmt
DECL|variable|appFont
specifier|static
specifier|const
name|char
modifier|*
name|appFont
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|appFont
comment|// application font
end_comment
begin_decl_stmt
DECL|variable|appBGCol
specifier|static
specifier|const
name|char
modifier|*
name|appBGCol
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|appBGCol
comment|// application bg color
end_comment
begin_decl_stmt
DECL|variable|appFGCol
specifier|static
specifier|const
name|char
modifier|*
name|appFGCol
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|appFGCol
comment|// application fg color
end_comment
begin_decl_stmt
DECL|variable|appBTNCol
specifier|static
specifier|const
name|char
modifier|*
name|appBTNCol
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|appBTNCol
comment|// application btn color
end_comment
begin_decl_stmt
DECL|variable|mwGeometry
specifier|static
specifier|const
name|char
modifier|*
name|mwGeometry
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|mwGeometry
comment|// main widget geometry
end_comment
begin_decl_stmt
DECL|variable|mwTitle
specifier|static
specifier|const
name|char
modifier|*
name|mwTitle
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|mwTitle
comment|// main widget title
end_comment
begin_decl_stmt
DECL|variable|qt_ximServer
name|char
modifier|*
name|qt_ximServer
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|qt_ximServer
comment|// XIM Server will connect to
end_comment
begin_decl_stmt
DECL|variable|appSync
specifier|static
name|bool
name|appSync
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|appSync
comment|// X11 synchronization
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_DEBUG
argument_list|)
end_if
begin_decl_stmt
DECL|variable|appNoGrab
specifier|static
name|bool
name|appNoGrab
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|appNoGrab
comment|// X11 grabbing enabled
end_comment
begin_decl_stmt
DECL|variable|appDoGrab
specifier|static
name|bool
name|appDoGrab
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|appDoGrab
comment|// X11 grabbing override (gdb)
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|app_save_rootinfo
specifier|static
name|bool
name|app_save_rootinfo
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|app_save_rootinfo
comment|// save root info
end_comment
begin_decl_stmt
DECL|variable|app_do_modal
specifier|static
name|bool
name|app_do_modal
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|app_do_modal
comment|// modal mode
end_comment
begin_decl_stmt
DECL|variable|curWin
specifier|static
name|Window
name|curWin
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|curWin
comment|// current window
end_comment
begin_comment
comment|// function to update the workarea of the screen - in qdesktopwidget_x11.cpp
end_comment
begin_function_decl
specifier|extern
name|void
name|qt_desktopwidget_update_workarea
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|// Function to change the window manager state (from qwidget_x11.cpp)
end_comment
begin_function_decl
specifier|extern
name|void
name|qt_change_net_wm_state
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|,
name|bool
name|set
parameter_list|,
name|Atom
name|one
parameter_list|,
name|Atom
name|two
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// modifier masks for alt, meta, super, hyper, and mode_switch - detected when the application starts
end_comment
begin_comment
comment|// and/or keyboard layout changes
end_comment
begin_decl_stmt
DECL|variable|qt_alt_mask
name|uchar
name|qt_alt_mask
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_meta_mask
name|uchar
name|qt_meta_mask
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_super_mask
name|uchar
name|qt_super_mask
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_hyper_mask
name|uchar
name|qt_hyper_mask
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_mode_switch_mask
name|uchar
name|qt_mode_switch_mask
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
comment|// flags for extensions for special Languages, currently only for RTL languages
end_comment
begin_decl_stmt
DECL|variable|qt_use_rtl_extensions
name|bool
name|qt_use_rtl_extensions
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mouseActWindow
specifier|static
name|Window
name|mouseActWindow
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|mouseActWindow
comment|// window where mouse is
end_comment
begin_decl_stmt
DECL|variable|mouseButtonPressed
specifier|static
name|Qt
operator|::
name|MouseButton
name|mouseButtonPressed
init|=
name|Qt
operator|::
name|NoButton
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|mouseButtonPressed
comment|// last mouse button pressed
end_comment
begin_decl_stmt
DECL|variable|mouseButtonState
specifier|static
name|Qt
operator|::
name|MouseButtons
name|mouseButtonState
init|=
name|Qt
operator|::
name|NoButton
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|mouseButtonState
comment|// mouse button state
end_comment
begin_decl_stmt
DECL|variable|mouseButtonPressTime
specifier|static
name|Time
name|mouseButtonPressTime
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|mouseButtonPressTime
comment|// when was a button pressed
end_comment
begin_decl_stmt
DECL|variable|mouseXPos
DECL|variable|mouseYPos
specifier|static
name|short
name|mouseXPos
decl_stmt|,
name|mouseYPos
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|mouseXPos
DECL|variable|mouseYPos
comment|// mouse pres position in act window
end_comment
begin_decl_stmt
DECL|variable|mouseGlobalXPos
DECL|variable|mouseGlobalYPos
specifier|static
name|short
name|mouseGlobalXPos
decl_stmt|,
name|mouseGlobalYPos
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|mouseGlobalXPos
DECL|variable|mouseGlobalYPos
comment|// global mouse press position
end_comment
begin_decl_stmt
specifier|extern
name|QWidgetList
modifier|*
name|qt_modal_stack
decl_stmt|;
end_decl_stmt
begin_comment
comment|// stack of modal widgets
end_comment
begin_comment
comment|// window where mouse buttons have been pressed
end_comment
begin_decl_stmt
DECL|variable|pressed_window
specifier|static
name|Window
name|pressed_window
init|=
name|XNone
decl_stmt|;
end_decl_stmt
begin_comment
comment|// popup control
end_comment
begin_decl_stmt
DECL|variable|replayPopupMouseEvent
specifier|static
name|bool
name|replayPopupMouseEvent
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|popupGrabOk
specifier|static
name|bool
name|popupGrabOk
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_sm_blockUserInput
name|bool
name|qt_sm_blockUserInput
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|qt_sm_blockUserInput
comment|// session management
end_comment
begin_decl_stmt
DECL|variable|qt_xfocusout_grab_counter
name|Q_GUI_EXPORT
name|int
name|qt_xfocusout_grab_counter
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_TABLET
argument_list|)
end_if
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QTabletDeviceDataList
argument_list|,
argument|tablet_devices
argument_list|)
end_macro
begin_function
DECL|function|qt_tablet_devices
name|QTabletDeviceDataList
modifier|*
name|qt_tablet_devices
parameter_list|()
block|{
return|return
name|tablet_devices
argument_list|()
return|;
block|}
end_function
begin_decl_stmt
specifier|extern
name|bool
name|qt_tabletChokeMouse
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|QX11FilterFunction
typedef|typedef
name|bool
function_decl|(
modifier|*
name|QX11FilterFunction
function_decl|)
parameter_list|(
name|XEvent
modifier|*
name|event
parameter_list|)
function_decl|;
end_typedef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QList<QX11FilterFunction>
argument_list|,
argument|x11Filters
argument_list|)
end_macro
begin_function
DECL|function|qt_installX11EventFilter
name|Q_GUI_EXPORT
name|void
name|qt_installX11EventFilter
parameter_list|(
name|QX11FilterFunction
name|func
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|func
argument_list|)
expr_stmt|;
if|if
condition|(
name|QList
argument_list|<
name|QX11FilterFunction
argument_list|>
modifier|*
name|list
init|=
name|x11Filters
argument_list|()
condition|)
name|list
operator|->
name|append
argument_list|(
name|func
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_removeX11EventFilter
name|Q_GUI_EXPORT
name|void
name|qt_removeX11EventFilter
parameter_list|(
name|QX11FilterFunction
name|func
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|func
argument_list|)
expr_stmt|;
if|if
condition|(
name|QList
argument_list|<
name|QX11FilterFunction
argument_list|>
modifier|*
name|list
init|=
name|x11Filters
argument_list|()
condition|)
name|list
operator|->
name|removeOne
argument_list|(
name|func
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_x11EventFilter
specifier|static
name|bool
name|qt_x11EventFilter
parameter_list|(
name|XEvent
modifier|*
name|ev
parameter_list|)
block|{
name|long
name|unused
decl_stmt|;
if|if
condition|(
name|qApp
operator|->
name|filterEvent
argument_list|(
name|ev
argument_list|,
operator|&
name|unused
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
specifier|const
name|QList
argument_list|<
name|QX11FilterFunction
argument_list|>
modifier|*
name|list
init|=
name|x11Filters
argument_list|()
condition|)
block|{
for|for
control|(
name|QList
argument_list|<
name|QX11FilterFunction
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|list
operator|->
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|list
operator|->
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
call|(
modifier|*
name|it
call|)
argument_list|(
name|ev
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
name|qApp
operator|->
name|x11EventFilter
argument_list|(
name|ev
argument_list|)
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XIM
argument_list|)
end_if
begin_decl_stmt
DECL|variable|qt_xim_preferred_style
name|XIMStyle
name|qt_xim_preferred_style
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|qt_ximComposingKeycode
name|int
name|qt_ximComposingKeycode
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_input_mapper
name|QTextCodec
modifier|*
name|qt_input_mapper
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|extern
name|bool
name|qt_check_clipboard_sentinel
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|//def in qclipboard_x11.cpp
end_comment
begin_function_decl
specifier|extern
name|bool
name|qt_check_selection_sentinel
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|//def in qclipboard_x11.cpp
end_comment
begin_function_decl
specifier|extern
name|bool
name|qt_xfixes_clipboard_changed
parameter_list|(
name|Window
name|clipboardOwner
parameter_list|,
name|Time
name|timestamp
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//def in qclipboard_x11.cpp
end_comment
begin_function_decl
specifier|extern
name|bool
name|qt_xfixes_selection_changed
parameter_list|(
name|Window
name|selectionOwner
parameter_list|,
name|Time
name|timestamp
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//def in qclipboard_x11.cpp
end_comment
begin_function_decl
specifier|static
name|void
name|qt_save_rootinfo
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|Q_GUI_EXPORT
name|bool
name|qt_try_modal
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
name|XEvent
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|qt_button_down
name|QWidget
modifier|*
name|qt_button_down
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|qt_button_down
comment|// last widget to be pressed with the mouse
end_comment
begin_decl_stmt
DECL|variable|qt_last_mouse_receiver
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|qt_last_mouse_receiver
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_popup_down
specifier|static
name|QWidget
modifier|*
name|qt_popup_down
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|qt_popup_down
comment|// popup that contains the pressed widget
end_comment
begin_decl_stmt
specifier|extern
name|bool
name|qt_xdnd_dragging
decl_stmt|;
end_decl_stmt
begin_comment
comment|// gui or non-gui from qapplication.cpp
end_comment
begin_decl_stmt
specifier|extern
name|bool
name|qt_is_gui_used
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*!     \internal     Try to resolve a \a symbol from \a library with the version specified     by \a vernum.      Note that, in the case of the Xfixes library, \a vernum is not the same as     \c XFIXES_MAJOR - it is a part of soname and may differ from the Xfixes     version. */
end_comment
begin_function
DECL|function|qt_load_library_runtime
specifier|static
name|QFunctionPointer
name|qt_load_library_runtime
parameter_list|(
specifier|const
name|char
modifier|*
name|library
parameter_list|,
name|int
name|vernum
parameter_list|,
name|int
name|highestVernum
parameter_list|,
specifier|const
name|char
modifier|*
name|symbol
parameter_list|)
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|versions
decl_stmt|;
comment|// we try to load in the following order:
comment|// explicit version -> the default one -> (from the highest (highestVernum) to the lowest (vernum) )
if|if
condition|(
name|vernum
operator|!=
operator|-
literal|1
condition|)
name|versions
operator|<<
name|vernum
expr_stmt|;
name|versions
operator|<<
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|vernum
operator|!=
operator|-
literal|1
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|highestVernum
init|;
name|i
operator|>
name|vernum
condition|;
operator|--
name|i
control|)
name|versions
operator|<<
name|i
expr_stmt|;
block|}
name|Q_FOREACH
argument_list|(
argument|int version
argument_list|,
argument|versions
argument_list|)
block|{
name|QLatin1String
name|libName
argument_list|(
name|library
argument_list|)
decl_stmt|;
name|QLibrary
name|xfixesLib
argument_list|(
name|libName
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|QFunctionPointer
name|ptr
init|=
name|xfixesLib
operator|.
name|resolve
argument_list|(
name|symbol
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
return|return
name|ptr
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_XINPUT
end_ifndef
begin_ifdef
ifdef|#
directive|ifdef
name|QT_RUNTIME_XINPUT
end_ifdef
begin_define
DECL|macro|XINPUT_LOAD_RUNTIME
define|#
directive|define
name|XINPUT_LOAD_RUNTIME
parameter_list|(
name|vernum
parameter_list|,
name|symbol
parameter_list|,
name|symbol_type
parameter_list|)
define|\
value|(symbol_type)qt_load_library_runtime("libXi", vernum, 6, #symbol);
end_define
begin_define
DECL|macro|XINPUT_LOAD
define|#
directive|define
name|XINPUT_LOAD
parameter_list|(
name|symbol
parameter_list|)
define|\
value|XINPUT_LOAD_RUNTIME(1, symbol, Ptr##symbol)
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|// not runtime XInput
end_comment
begin_define
DECL|macro|XINPUT_LOAD
define|#
directive|define
name|XINPUT_LOAD
parameter_list|(
name|symbol
parameter_list|)
value|symbol
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_RUNTIME_XINPUT
end_comment
begin_else
else|#
directive|else
end_else
begin_comment
comment|// not using Xinput at all
end_comment
begin_define
DECL|macro|XINPUT_LOAD
define|#
directive|define
name|XINPUT_LOAD
parameter_list|(
name|symbol
parameter_list|)
value|0
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_XINPUT
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_XFIXES
end_ifndef
begin_ifdef
ifdef|#
directive|ifdef
name|QT_RUNTIME_XFIXES
end_ifdef
begin_define
DECL|macro|XFIXES_LOAD_RUNTIME
define|#
directive|define
name|XFIXES_LOAD_RUNTIME
parameter_list|(
name|vernum
parameter_list|,
name|symbol
parameter_list|,
name|symbol_type
parameter_list|)
define|\
value|(symbol_type)qt_load_library_runtime("libXfixes", vernum, 4, #symbol);
end_define
begin_define
DECL|macro|XFIXES_LOAD_V1
define|#
directive|define
name|XFIXES_LOAD_V1
parameter_list|(
name|symbol
parameter_list|)
define|\
value|XFIXES_LOAD_RUNTIME(1, symbol, Ptr##symbol)
end_define
begin_define
DECL|macro|XFIXES_LOAD_V2
define|#
directive|define
name|XFIXES_LOAD_V2
parameter_list|(
name|symbol
parameter_list|)
define|\
value|XFIXES_LOAD_RUNTIME(2, symbol, Ptr##symbol)
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|// not runtime Xfixes
end_comment
begin_if
if|#
directive|if
name|XFIXES_MAJOR
operator|>=
literal|2
end_if
begin_define
DECL|macro|XFIXES_LOAD_V1
define|#
directive|define
name|XFIXES_LOAD_V1
parameter_list|(
name|symbol
parameter_list|)
value|symbol
end_define
begin_define
DECL|macro|XFIXES_LOAD_V2
define|#
directive|define
name|XFIXES_LOAD_V2
parameter_list|(
name|symbol
parameter_list|)
value|symbol
end_define
begin_elif
elif|#
directive|elif
name|XFIXES_MAJOR
operator|>=
literal|1
end_elif
begin_define
DECL|macro|XFIXES_LOAD_V1
define|#
directive|define
name|XFIXES_LOAD_V1
parameter_list|(
name|symbol
parameter_list|)
value|symbol
end_define
begin_define
DECL|macro|XFIXES_LOAD_V2
define|#
directive|define
name|XFIXES_LOAD_V2
parameter_list|(
name|symbol
parameter_list|)
value|0
end_define
begin_else
else|#
directive|else
end_else
begin_error
error|#
directive|error
error|Unsupported version of Xfixes
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_RUNTIME_XFIXES
end_comment
begin_else
else|#
directive|else
end_else
begin_comment
comment|// not using Xfixes at all
end_comment
begin_define
DECL|macro|XFIXES_LOAD_V1
define|#
directive|define
name|XFIXES_LOAD_V1
parameter_list|(
name|symbol
parameter_list|)
value|0
end_define
begin_define
DECL|macro|XFIXES_LOAD_V2
define|#
directive|define
name|XFIXES_LOAD_V2
parameter_list|(
name|symbol
parameter_list|)
value|0
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_XFIXES
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_XFIXES
end_ifndef
begin_struct
DECL|struct|qt_xfixes_selection_event_data
struct|struct
name|qt_xfixes_selection_event_data
block|{
comment|// which selection to filter out.
DECL|member|selection
name|Atom
name|selection
decl_stmt|;
block|}
struct|;
end_struct
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_C_CALLBACKS
argument_list|)
end_if
begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
DECL|function|qt_xfixes_scanner
specifier|static
name|Bool
name|qt_xfixes_scanner
parameter_list|(
name|Display
modifier|*
parameter_list|,
name|XEvent
modifier|*
name|event
parameter_list|,
name|XPointer
name|arg
parameter_list|)
block|{
name|qt_xfixes_selection_event_data
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|qt_xfixes_selection_event_data
operator|*
argument_list|>
argument_list|(
name|arg
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|X11
operator|->
name|xfixes_eventbase
operator|+
name|XFixesSelectionNotify
condition|)
block|{
name|XFixesSelectionNotifyEvent
modifier|*
name|xfixes_event
init|=
cast|reinterpret_cast
argument_list|<
name|XFixesSelectionNotifyEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|xfixes_event
operator|->
name|selection
operator|==
name|data
operator|->
name|selection
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_C_CALLBACKS
argument_list|)
block|}
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_XFIXES
end_comment
begin_class
DECL|class|QETWidget
class|class
name|QETWidget
super|:
specifier|public
name|QWidget
comment|// event translator widget
block|{
public|public:
DECL|function|d_func
name|QWidgetPrivate
modifier|*
name|d_func
parameter_list|()
block|{
return|return
name|QWidget
operator|::
name|d_func
argument_list|()
return|;
block|}
name|bool
name|translateMouseEvent
parameter_list|(
specifier|const
name|XEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|translatePaintEvent
parameter_list|(
specifier|const
name|XEvent
modifier|*
parameter_list|)
function_decl|;
name|bool
name|translateConfigEvent
parameter_list|(
specifier|const
name|XEvent
modifier|*
parameter_list|)
function_decl|;
name|bool
name|translateCloseEvent
parameter_list|(
specifier|const
name|XEvent
modifier|*
parameter_list|)
function_decl|;
name|bool
name|translateScrollDoneEvent
parameter_list|(
specifier|const
name|XEvent
modifier|*
parameter_list|)
function_decl|;
name|bool
name|translateWheelEvent
parameter_list|(
name|int
name|global_x
parameter_list|,
name|int
name|global_y
parameter_list|,
name|int
name|delta
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|)
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_TABLET
argument_list|)
name|bool
name|translateXinputEvent
parameter_list|(
specifier|const
name|XEvent
modifier|*
parameter_list|,
name|QTabletDeviceData
modifier|*
name|tablet
parameter_list|)
function_decl|;
endif|#
directive|endif
name|bool
name|translatePropertyEvent
parameter_list|(
specifier|const
name|XEvent
modifier|*
parameter_list|)
function_decl|;
DECL|function|doDeferredMap
name|void
name|doDeferredMap
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
condition|)
block|{
name|adjustSize
argument_list|()
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/*           workaround for WM's that throw away ConfigureRequests from the following:            window->hide();           window->move(x, y); // could also be resize(), move()+resize(), or setGeometry()           window->show();         */
name|QRect
name|r
init|=
name|geometry
argument_list|()
decl_stmt|;
name|XMoveResizeWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|internalWinId
argument_list|()
argument_list|,
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
comment|// static gravity!
name|XSizeHints
name|sh
decl_stmt|;
name|long
name|unused
decl_stmt|;
name|XGetWMNormalHints
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|internalWinId
argument_list|()
argument_list|,
operator|&
name|sh
argument_list|,
operator|&
name|unused
argument_list|)
expr_stmt|;
name|sh
operator|.
name|flags
operator||=
name|USPosition
operator||
name|PPosition
operator||
name|USSize
operator||
name|PSize
operator||
name|PWinGravity
expr_stmt|;
name|sh
operator|.
name|x
operator|=
name|r
operator|.
name|x
argument_list|()
expr_stmt|;
name|sh
operator|.
name|y
operator|=
name|r
operator|.
name|y
argument_list|()
expr_stmt|;
name|sh
operator|.
name|width
operator|=
name|r
operator|.
name|width
argument_list|()
expr_stmt|;
name|sh
operator|.
name|height
operator|=
name|r
operator|.
name|height
argument_list|()
expr_stmt|;
name|sh
operator|.
name|win_gravity
operator|=
name|StaticGravity
expr_stmt|;
name|XSetWMNormalHints
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|internalWinId
argument_list|()
argument_list|,
operator|&
name|sh
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
expr_stmt|;
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
return|return;
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
operator|->
name|waitingForMapNotify
operator|=
literal|1
expr_stmt|;
name|XMapWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|createEventDispatcher
name|void
name|QApplicationPrivate
operator|::
name|createEventDispatcher
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QApplication
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_GLIB
argument_list|)
if|if
condition|(
name|qgetenv
argument_list|(
literal|"QT_NO_GLIB"
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|&&
name|QEventDispatcherGlib
operator|::
name|versionSupported
argument_list|()
condition|)
name|eventDispatcher
operator|=
operator|(
name|q
operator|->
name|type
argument_list|()
operator|!=
name|QApplication
operator|::
name|Tty
condition|?
operator|new
name|QGuiEventDispatcherGlib
argument_list|(
name|q
argument_list|)
else|:
operator|new
name|QEventDispatcherGlib
argument_list|(
name|q
argument_list|)
operator|)
expr_stmt|;
else|else
endif|#
directive|endif
name|eventDispatcher
operator|=
operator|(
name|q
operator|->
name|type
argument_list|()
operator|!=
name|QApplication
operator|::
name|Tty
condition|?
operator|new
name|QEventDispatcherX11
argument_list|(
name|q
argument_list|)
else|:
operator|new
name|QEventDispatcherUNIX
argument_list|(
name|q
argument_list|)
operator|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   Default X error handlers  *****************************************************************************/
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_C_CALLBACKS
argument_list|)
end_if
begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
DECL|variable|original_x_errhandler
specifier|static
name|int
function_decl|(
modifier|*
name|original_x_errhandler
function_decl|)
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|,
name|XErrorEvent
modifier|*
parameter_list|)
function_decl|;
DECL|variable|original_xio_errhandler
specifier|static
name|int
function_decl|(
modifier|*
name|original_xio_errhandler
function_decl|)
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|)
function_decl|;
DECL|function|qt_x_errhandler
specifier|static
name|int
name|qt_x_errhandler
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|,
name|XErrorEvent
modifier|*
name|err
parameter_list|)
block|{
if|if
condition|(
name|X11
operator|->
name|display
operator|!=
name|dpy
condition|)
block|{
comment|// only handle X errors for our display
return|return
literal|0
return|;
block|}
switch|switch
condition|(
name|err
operator|->
name|error_code
condition|)
block|{
case|case
name|BadAtom
case|:
if|if
condition|(
name|err
operator|->
name|request_code
operator|==
literal|20
comment|/* X_GetProperty */
operator|&&
operator|(
name|err
operator|->
name|resourceid
operator|==
name|XA_RESOURCE_MANAGER
operator|||
name|err
operator|->
name|resourceid
operator|==
name|XA_RGB_DEFAULT_MAP
operator|||
name|err
operator|->
name|resourceid
operator|==
name|ATOM
argument_list|(
name|_NET_SUPPORTED
argument_list|)
operator|||
name|err
operator|->
name|resourceid
operator|==
name|ATOM
argument_list|(
name|_NET_SUPPORTING_WM_CHECK
argument_list|)
operator|||
name|err
operator|->
name|resourceid
operator|==
name|ATOM
argument_list|(
name|XdndProxy
argument_list|)
operator|||
name|err
operator|->
name|resourceid
operator|==
name|ATOM
argument_list|(
name|XdndAware
argument_list|)
operator|)
condition|)
block|{
comment|// Perhaps we're running under SECURITY reduction? :/
return|return
literal|0
return|;
block|}
break|break;
case|case
name|BadWindow
case|:
if|if
condition|(
name|err
operator|->
name|request_code
operator|==
literal|2
comment|/* X_ChangeWindowAttributes */
operator|||
name|err
operator|->
name|request_code
operator|==
literal|38
comment|/* X_QueryPointer */
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ScreenCount
argument_list|(
name|dpy
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|err
operator|->
name|resourceid
operator|==
name|RootWindow
argument_list|(
name|dpy
argument_list|,
name|i
argument_list|)
condition|)
block|{
comment|// Perhaps we're running under SECURITY reduction? :/
return|return
literal|0
return|;
block|}
block|}
block|}
name|X11
operator|->
name|seen_badwindow
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|err
operator|->
name|request_code
operator|==
literal|25
comment|/* X_SendEvent */
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ScreenCount
argument_list|(
name|dpy
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|err
operator|->
name|resourceid
operator|==
name|RootWindow
argument_list|(
name|dpy
argument_list|,
name|i
argument_list|)
condition|)
block|{
comment|// Perhaps we're running under SECURITY reduction? :/
return|return
literal|0
return|;
block|}
block|}
if|if
condition|(
name|X11
operator|->
name|xdndHandleBadwindow
argument_list|()
condition|)
block|{
name|qDebug
argument_list|(
literal|"xdndHandleBadwindow returned true"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
if|if
condition|(
name|X11
operator|->
name|ignore_badwindow
condition|)
return|return
literal|0
return|;
break|break;
default|default:
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XINPUT
argument_list|)
if|if
condition|(
name|err
operator|->
name|request_code
operator|==
name|X11
operator|->
name|xinput_major
operator|&&
name|err
operator|->
name|error_code
operator|==
operator|(
name|X11
operator|->
name|xinput_errorbase
operator|+
name|XI_BadDevice
operator|)
operator|&&
name|err
operator|->
name|minor_code
operator|==
literal|3
comment|/* X_OpenDevice */
condition|)
block|{
return|return
literal|0
return|;
block|}
endif|#
directive|endif
break|break;
block|}
name|char
name|errstr
index|[
literal|256
index|]
decl_stmt|;
name|XGetErrorText
argument_list|(
name|dpy
argument_list|,
name|err
operator|->
name|error_code
argument_list|,
name|errstr
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|char
name|buffer
index|[
literal|256
index|]
decl_stmt|;
name|char
name|request_str
index|[
literal|256
index|]
decl_stmt|;
name|qsnprintf
argument_list|(
name|buffer
argument_list|,
literal|256
argument_list|,
literal|"%d"
argument_list|,
name|err
operator|->
name|request_code
argument_list|)
expr_stmt|;
name|XGetErrorDatabaseText
argument_list|(
name|dpy
argument_list|,
literal|"XRequest"
argument_list|,
name|buffer
argument_list|,
literal|""
argument_list|,
name|request_str
argument_list|,
literal|256
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|->
name|request_code
operator|<
literal|128
condition|)
block|{
comment|// X error for a normal protocol request
name|qWarning
argument_list|(
literal|"X Error: %s %d\n"
literal|"  Major opcode: %d (%s)\n"
literal|"  Resource id:  0x%lx"
argument_list|,
name|errstr
argument_list|,
name|err
operator|->
name|error_code
argument_list|,
name|err
operator|->
name|request_code
argument_list|,
name|request_str
argument_list|,
name|err
operator|->
name|resourceid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// X error for an extension request
specifier|const
name|char
modifier|*
name|extensionName
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|err
operator|->
name|request_code
operator|==
name|X11
operator|->
name|xrender_major
condition|)
name|extensionName
operator|=
literal|"RENDER"
expr_stmt|;
elseif|else
if|if
condition|(
name|err
operator|->
name|request_code
operator|==
name|X11
operator|->
name|xrandr_major
condition|)
name|extensionName
operator|=
literal|"RANDR"
expr_stmt|;
elseif|else
if|if
condition|(
name|err
operator|->
name|request_code
operator|==
name|X11
operator|->
name|xinput_major
condition|)
name|extensionName
operator|=
literal|"XInputExtension"
expr_stmt|;
elseif|else
if|if
condition|(
name|err
operator|->
name|request_code
operator|==
name|X11
operator|->
name|mitshm_major
condition|)
name|extensionName
operator|=
literal|"MIT-SHM"
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XKB
elseif|else
if|if
condition|(
name|err
operator|->
name|request_code
operator|==
name|X11
operator|->
name|xkb_major
condition|)
name|extensionName
operator|=
literal|"XKEYBOARD"
expr_stmt|;
endif|#
directive|endif
name|char
name|minor_str
index|[
literal|256
index|]
decl_stmt|;
if|if
condition|(
name|extensionName
condition|)
block|{
name|qsnprintf
argument_list|(
name|buffer
argument_list|,
literal|256
argument_list|,
literal|"%s.%d"
argument_list|,
name|extensionName
argument_list|,
name|err
operator|->
name|minor_code
argument_list|)
expr_stmt|;
name|XGetErrorDatabaseText
argument_list|(
name|dpy
argument_list|,
literal|"XRequest"
argument_list|,
name|buffer
argument_list|,
literal|""
argument_list|,
name|minor_str
argument_list|,
literal|256
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|extensionName
operator|=
literal|"Uknown extension"
expr_stmt|;
name|qsnprintf
argument_list|(
name|minor_str
argument_list|,
literal|256
argument_list|,
literal|"Unknown request"
argument_list|)
expr_stmt|;
block|}
name|qWarning
argument_list|(
literal|"X Error: %s %d\n"
literal|"  Extension:    %d (%s)\n"
literal|"  Minor opcode: %d (%s)\n"
literal|"  Resource id:  0x%lx"
argument_list|,
name|errstr
argument_list|,
name|err
operator|->
name|error_code
argument_list|,
name|err
operator|->
name|request_code
argument_list|,
name|extensionName
argument_list|,
name|err
operator|->
name|minor_code
argument_list|,
name|minor_str
argument_list|,
name|err
operator|->
name|resourceid
argument_list|)
expr_stmt|;
block|}
comment|// ### we really should distinguish between severe, non-severe and
comment|// ### application specific errors
return|return
literal|0
return|;
block|}
DECL|function|qt_xio_errhandler
specifier|static
name|int
name|qt_xio_errhandler
parameter_list|(
name|Display
modifier|*
parameter_list|)
block|{
name|qWarning
argument_list|(
literal|"%s: Fatal IO error: client killed"
argument_list|,
name|appName
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|reset_instance_pointer
argument_list|()
expr_stmt|;
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|//### give the application a chance for a proper shutdown instead,
comment|//### exit(1) doesn't help.
return|return
literal|0
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_C_CALLBACKS
argument_list|)
block|}
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_XSYNC
end_ifndef
begin_struct
DECL|struct|qt_sync_request_event_data
struct|struct
name|qt_sync_request_event_data
block|{
DECL|member|window
name|WId
name|window
decl_stmt|;
block|}
struct|;
end_struct
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_C_CALLBACKS
argument_list|)
end_if
begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
DECL|function|qt_sync_request_scanner
specifier|static
name|Bool
name|qt_sync_request_scanner
parameter_list|(
name|Display
modifier|*
parameter_list|,
name|XEvent
modifier|*
name|event
parameter_list|,
name|XPointer
name|arg
parameter_list|)
block|{
name|qt_sync_request_event_data
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|qt_sync_request_event_data
operator|*
argument_list|>
argument_list|(
name|arg
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|ClientMessage
operator|&&
name|event
operator|->
name|xany
operator|.
name|window
operator|==
name|data
operator|->
name|window
operator|&&
name|event
operator|->
name|xclient
operator|.
name|message_type
operator|==
name|ATOM
argument_list|(
name|WM_PROTOCOLS
argument_list|)
operator|&&
operator|(
name|Atom
operator|)
name|event
operator|->
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|0
index|]
operator|==
name|ATOM
argument_list|(
name|_NET_WM_SYNC_REQUEST
argument_list|)
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|QWidget
operator|::
name|find
argument_list|(
name|event
operator|->
name|xany
operator|.
name|window
argument_list|)
decl_stmt|;
if|if
condition|(
name|QTLWExtra
modifier|*
name|tlw
init|=
operator|(
operator|(
name|QETWidget
operator|*
operator|)
name|w
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|maybeTopData
argument_list|()
condition|)
block|{
specifier|const
name|ulong
name|timestamp
init|=
operator|(
specifier|const
name|ulong
operator|)
name|event
operator|->
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|timestamp
operator|>
name|X11
operator|->
name|time
condition|)
name|X11
operator|->
name|time
operator|=
name|timestamp
expr_stmt|;
if|if
condition|(
name|timestamp
operator|==
name|CurrentTime
operator|||
name|timestamp
operator|>
name|tlw
operator|->
name|syncRequestTimestamp
condition|)
block|{
name|tlw
operator|->
name|syncRequestTimestamp
operator|=
name|timestamp
expr_stmt|;
name|tlw
operator|->
name|newCounterValueLo
operator|=
name|event
operator|->
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|2
index|]
expr_stmt|;
name|tlw
operator|->
name|newCounterValueHi
operator|=
name|event
operator|->
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|3
index|]
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_C_CALLBACKS
argument_list|)
block|}
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_XSYNC
end_comment
begin_function
DECL|function|qt_x11_create_intern_atoms
specifier|static
name|void
name|qt_x11_create_intern_atoms
parameter_list|()
block|{
specifier|const
name|char
modifier|*
name|names
index|[
name|QX11Data
operator|::
name|NAtoms
index|]
decl_stmt|;
specifier|const
name|char
modifier|*
name|ptr
init|=
name|x11_atomnames
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|*
name|ptr
condition|)
block|{
name|names
index|[
name|i
operator|++
index|]
operator|=
name|ptr
expr_stmt|;
while|while
condition|(
operator|*
name|ptr
condition|)
operator|++
name|ptr
expr_stmt|;
operator|++
name|ptr
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|i
operator|==
name|QX11Data
operator|::
name|NPredefinedAtoms
argument_list|)
expr_stmt|;
name|QByteArray
name|settings_atom_name
argument_list|(
literal|"_QT_SETTINGS_TIMESTAMP_"
argument_list|)
decl_stmt|;
name|settings_atom_name
operator|+=
name|XDisplayName
argument_list|(
name|X11
operator|->
name|displayName
argument_list|)
expr_stmt|;
name|names
index|[
name|i
operator|++
index|]
operator|=
name|settings_atom_name
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|i
operator|==
name|QX11Data
operator|::
name|NAtoms
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|XlibSpecificationRelease
argument_list|)
operator|&&
operator|(
name|XlibSpecificationRelease
operator|>=
literal|6
operator|)
name|XInternAtoms
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|(
name|char
operator|*
operator|*
operator|)
name|names
argument_list|,
name|i
argument_list|,
name|False
argument_list|,
name|X11
operator|->
name|atoms
argument_list|)
expr_stmt|;
else|#
directive|else
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|QX11Data
operator|::
name|NAtoms
condition|;
operator|++
name|i
control|)
name|X11
operator|->
name|atoms
index|[
name|i
index|]
operator|=
name|XInternAtom
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|(
name|char
operator|*
operator|)
name|names
index|[
name|i
index|]
argument_list|,
name|False
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|qt_x11_apply_settings_in_all_apps
name|Q_GUI_EXPORT
name|void
name|qt_x11_apply_settings_in_all_apps
parameter_list|()
block|{
name|QByteArray
name|stamp
decl_stmt|;
name|QDataStream
name|s
argument_list|(
operator|&
name|stamp
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|s
operator|<<
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
expr_stmt|;
name|XChangeProperty
argument_list|(
name|QX11Info
operator|::
name|display
argument_list|()
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ATOM
argument_list|(
name|_QT_SETTINGS_TIMESTAMP
argument_list|)
argument_list|,
name|ATOM
argument_list|(
name|_QT_SETTINGS_TIMESTAMP
argument_list|)
argument_list|,
literal|8
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|stamp
operator|.
name|data
argument_list|()
argument_list|,
name|stamp
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal     apply the settings to the application */
end_comment
begin_function
DECL|function|x11_apply_settings
name|bool
name|QApplicationPrivate
operator|::
name|x11_apply_settings
parameter_list|()
block|{
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
name|QLatin1String
argument_list|(
literal|"Trolltech"
argument_list|)
argument_list|)
decl_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
name|QLatin1String
argument_list|(
literal|"Qt"
argument_list|)
argument_list|)
expr_stmt|;
comment|/*       Qt settings. This is now they are written into the datastream.        Palette / *                - QPalette       font                       - QFont       libraryPath                - QStringList       style                      - QString       doubleClickInterval        - int       keyboardInputInterval  - int       cursorFlashTime            - int       wheelScrollLines           - int       colorSpec                  - QString       defaultCodec               - QString       globalStrut/width          - int       globalStrut/height         - int       GUIEffects                 - QStringList       Font Substitutions/ *      - QStringList       Font Substitutions/...     - QStringList     */
name|QStringList
name|strlist
decl_stmt|;
name|int
name|i
decl_stmt|;
name|QPalette
name|pal
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
decl_stmt|;
name|int
name|groupCount
init|=
literal|0
decl_stmt|;
name|strlist
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"Palette/active"
argument_list|)
argument_list|)
operator|.
name|toStringList
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|strlist
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|++
name|groupCount
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|qMin
argument_list|(
name|strlist
operator|.
name|count
argument_list|()
argument_list|,
name|int
argument_list|(
name|QPalette
operator|::
name|NColorRoles
argument_list|)
argument_list|)
condition|;
name|i
operator|++
control|)
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
operator|(
name|QPalette
operator|::
name|ColorRole
operator|)
name|i
argument_list|,
name|QColor
argument_list|(
name|strlist
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|strlist
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"Palette/inactive"
argument_list|)
argument_list|)
operator|.
name|toStringList
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|strlist
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|++
name|groupCount
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|qMin
argument_list|(
name|strlist
operator|.
name|count
argument_list|()
argument_list|,
name|int
argument_list|(
name|QPalette
operator|::
name|NColorRoles
argument_list|)
argument_list|)
condition|;
name|i
operator|++
control|)
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
operator|(
name|QPalette
operator|::
name|ColorRole
operator|)
name|i
argument_list|,
name|QColor
argument_list|(
name|strlist
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|strlist
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"Palette/disabled"
argument_list|)
argument_list|)
operator|.
name|toStringList
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|strlist
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|++
name|groupCount
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|qMin
argument_list|(
name|strlist
operator|.
name|count
argument_list|()
argument_list|,
name|int
argument_list|(
name|QPalette
operator|::
name|NColorRoles
argument_list|)
argument_list|)
condition|;
name|i
operator|++
control|)
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
operator|(
name|QPalette
operator|::
name|ColorRole
operator|)
name|i
argument_list|,
name|QColor
argument_list|(
name|strlist
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// ### Fix properly for 4.6
name|bool
name|usingGtkSettings
init|=
name|QApplicationPrivate
operator|::
name|app_style
operator|&&
name|QApplicationPrivate
operator|::
name|app_style
operator|->
name|inherits
argument_list|(
literal|"QGtkStyle"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|usingGtkSettings
condition|)
block|{
if|if
condition|(
name|groupCount
operator|==
name|QPalette
operator|::
name|NColorGroups
condition|)
name|QApplicationPrivate
operator|::
name|setSystemPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|appFont
condition|)
block|{
comment|// ### Fix properly for 4.6
if|if
condition|(
operator|!
name|usingGtkSettings
condition|)
block|{
name|QFont
name|font
argument_list|(
name|QApplication
operator|::
name|font
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|fontDescription
decl_stmt|;
comment|// Override Qt font if KDE4 settings can be used
if|if
condition|(
name|X11
operator|->
name|desktopVersion
operator|==
literal|4
condition|)
block|{
name|QSettings
name|kdeSettings
argument_list|(
name|QKde
operator|::
name|kdeHome
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/share/config/kdeglobals"
argument_list|)
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
decl_stmt|;
name|fontDescription
operator|=
name|kdeSettings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"font"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|fontDescription
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// KDE stores fonts without quotes
name|fontDescription
operator|=
name|kdeSettings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"font"
argument_list|)
argument_list|)
operator|.
name|toStringList
argument_list|()
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fontDescription
operator|.
name|isEmpty
argument_list|()
condition|)
name|fontDescription
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"font"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|fontDescription
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|font
operator|.
name|fromString
argument_list|(
name|fontDescription
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|setSystemFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// read library (ie. plugin) path list
name|QString
name|libpathkey
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1.%2/libraryPath"
argument_list|)
operator|.
name|arg
argument_list|(
name|QT_VERSION
operator|>>
literal|16
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|QT_VERSION
operator|&
literal|0xff00
operator|)
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|QStringList
name|pathlist
init|=
name|settings
operator|.
name|value
argument_list|(
name|libpathkey
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pathlist
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|pathlist
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|pathlist
operator|.
name|constEnd
argument_list|()
condition|)
name|QApplication
operator|::
name|addLibraryPath
argument_list|(
operator|*
name|it
operator|++
argument_list|)
expr_stmt|;
block|}
comment|// read new QStyle
name|QString
name|stylename
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"style"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|stylename
operator|.
name|isEmpty
argument_list|()
operator|&&
name|QApplicationPrivate
operator|::
name|styleOverride
operator|.
name|isNull
argument_list|()
operator|&&
name|X11
operator|->
name|use_xrender
condition|)
block|{
name|stylename
operator|=
name|qt_guiPlatformPlugin
argument_list|()
operator|->
name|styleName
argument_list|()
expr_stmt|;
block|}
specifier|static
name|QString
name|currentStyleName
init|=
name|stylename
decl_stmt|;
if|if
condition|(
name|QCoreApplication
operator|::
name|startingUp
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|stylename
operator|.
name|isEmpty
argument_list|()
operator|&&
name|QApplicationPrivate
operator|::
name|styleOverride
operator|.
name|isNull
argument_list|()
condition|)
name|QApplicationPrivate
operator|::
name|styleOverride
operator|=
name|stylename
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|currentStyleName
operator|!=
name|stylename
condition|)
block|{
name|currentStyleName
operator|=
name|stylename
expr_stmt|;
name|QApplication
operator|::
name|setStyle
argument_list|(
name|stylename
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|num
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"doubleClickInterval"
argument_list|)
argument_list|,
name|QApplication
operator|::
name|doubleClickInterval
argument_list|()
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QApplication
operator|::
name|setDoubleClickInterval
argument_list|(
name|num
argument_list|)
expr_stmt|;
name|num
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"cursorFlashTime"
argument_list|)
argument_list|,
name|QApplication
operator|::
name|cursorFlashTime
argument_list|()
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setCursorFlashTime
argument_list|(
name|num
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
name|num
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"wheelScrollLines"
argument_list|)
argument_list|,
name|QApplication
operator|::
name|wheelScrollLines
argument_list|()
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setWheelScrollLines
argument_list|(
name|num
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QString
name|colorspec
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"colorSpec"
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|colorspec
operator|==
name|QLatin1String
argument_list|(
literal|"normal"
argument_list|)
condition|)
name|QApplication
operator|::
name|setColorSpec
argument_list|(
name|QApplication
operator|::
name|NormalColor
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|colorspec
operator|==
name|QLatin1String
argument_list|(
literal|"custom"
argument_list|)
condition|)
name|QApplication
operator|::
name|setColorSpec
argument_list|(
name|QApplication
operator|::
name|CustomColor
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|colorspec
operator|==
name|QLatin1String
argument_list|(
literal|"many"
argument_list|)
condition|)
name|QApplication
operator|::
name|setColorSpec
argument_list|(
name|QApplication
operator|::
name|ManyColor
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|colorspec
operator|!=
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
condition|)
name|colorspec
operator|=
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|QString
name|defaultcodec
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"defaultCodec"
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|QLatin1String
argument_list|(
literal|"none"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultcodec
operator|!=
name|QLatin1String
argument_list|(
literal|"none"
argument_list|)
condition|)
block|{
name|QTextCodec
modifier|*
name|codec
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
name|defaultcodec
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|codec
condition|)
name|QTextCodec
operator|::
name|setCodecForTr
argument_list|(
name|codec
argument_list|)
expr_stmt|;
block|}
name|int
name|w
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"globalStrut/width"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"globalStrut/height"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QSize
name|strut
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
if|if
condition|(
name|strut
operator|.
name|isValid
argument_list|()
condition|)
name|QApplication
operator|::
name|setGlobalStrut
argument_list|(
name|strut
argument_list|)
expr_stmt|;
name|QStringList
name|effects
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"GUIEffects"
argument_list|)
argument_list|)
operator|.
name|toStringList
argument_list|()
decl_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_General
argument_list|,
name|effects
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"general"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateMenu
argument_list|,
name|effects
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"animatemenu"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_FadeMenu
argument_list|,
name|effects
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"fademenu"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateCombo
argument_list|,
name|effects
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"animatecombo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateTooltip
argument_list|,
name|effects
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"animatetooltip"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_FadeTooltip
argument_list|,
name|effects
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"fadetooltip"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateToolBox
argument_list|,
name|effects
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"animatetoolbox"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|X11
operator|->
name|has_fontconfig
condition|)
block|{
name|settings
operator|.
name|beginGroup
argument_list|(
name|QLatin1String
argument_list|(
literal|"Font Substitutions"
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|fontsubs
init|=
name|settings
operator|.
name|childKeys
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fontsubs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|fontsubs
operator|.
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|fontsubs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|fam
init|=
operator|*
name|it
decl_stmt|;
name|QStringList
name|subs
init|=
name|settings
operator|.
name|value
argument_list|(
name|fam
argument_list|)
operator|.
name|toStringList
argument_list|()
decl_stmt|;
name|QFont
operator|::
name|insertSubstitutions
argument_list|(
name|fam
argument_list|,
name|subs
argument_list|)
expr_stmt|;
block|}
block|}
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
block|}
name|qt_use_rtl_extensions
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"useRtlExtensions"
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|toBool
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XIM
if|if
condition|(
name|qt_xim_preferred_style
operator|==
literal|0
condition|)
block|{
name|QString
name|ximInputStyle
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"XIMInputStyle"
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|QLatin1String
argument_list|(
literal|"on the spot"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|ximInputStyle
operator|==
name|QLatin1String
argument_list|(
literal|"on the spot"
argument_list|)
condition|)
name|qt_xim_preferred_style
operator|=
name|XIMPreeditCallbacks
operator||
name|XIMStatusNothing
expr_stmt|;
elseif|else
if|if
condition|(
name|ximInputStyle
operator|==
name|QLatin1String
argument_list|(
literal|"over the spot"
argument_list|)
condition|)
name|qt_xim_preferred_style
operator|=
name|XIMPreeditPosition
operator||
name|XIMStatusNothing
expr_stmt|;
elseif|else
if|if
condition|(
name|ximInputStyle
operator|==
name|QLatin1String
argument_list|(
literal|"off the spot"
argument_list|)
condition|)
name|qt_xim_preferred_style
operator|=
name|XIMPreeditArea
operator||
name|XIMStatusArea
expr_stmt|;
elseif|else
if|if
condition|(
name|ximInputStyle
operator|==
name|QLatin1String
argument_list|(
literal|"root"
argument_list|)
condition|)
name|qt_xim_preferred_style
operator|=
name|XIMPreeditNothing
operator||
name|XIMStatusNothing
expr_stmt|;
block|}
endif|#
directive|endif
name|QStringList
name|inputMethods
init|=
name|QInputContextFactory
operator|::
name|keys
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputMethods
operator|.
name|size
argument_list|()
operator|>
literal|2
operator|&&
name|inputMethods
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"imsw-multi"
argument_list|)
argument_list|)
condition|)
block|{
name|X11
operator|->
name|default_im
operator|=
name|QLatin1String
argument_list|(
literal|"imsw-multi"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|X11
operator|->
name|default_im
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"DefaultInputMethod"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"xim"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
comment|// Qt
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*! \internal     Resets the QApplication::instance() pointer to zero */
end_comment
begin_function
DECL|function|reset_instance_pointer
name|void
name|QApplicationPrivate
operator|::
name|reset_instance_pointer
parameter_list|()
block|{
name|QApplication
operator|::
name|self
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|// read the _QT_INPUT_ENCODING property and apply the settings to
end_comment
begin_comment
comment|// the application
end_comment
begin_function
DECL|function|qt_set_input_encoding
specifier|static
name|void
name|qt_set_input_encoding
parameter_list|()
block|{
name|Atom
name|type
decl_stmt|;
name|int
name|format
decl_stmt|;
name|ulong
name|nitems
decl_stmt|,
name|after
init|=
literal|1
decl_stmt|;
name|unsigned
name|char
modifier|*
name|data
init|=
literal|0
decl_stmt|;
name|int
name|e
init|=
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_QT_INPUT_ENCODING
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|,
name|False
argument_list|,
name|XA_STRING
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|nitems
argument_list|,
operator|&
name|after
argument_list|,
operator|&
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
name|Success
operator|||
operator|!
name|nitems
operator|||
name|type
operator|==
name|XNone
condition|)
block|{
comment|// Always use the locale codec, since we have no examples of non-local
comment|// XIMs, and since we cannot get a sensible answer about the encoding
comment|// from the XIM.
name|qt_input_mapper
operator|=
name|QTextCodec
operator|::
name|codecForLocale
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|qstricmp
argument_list|(
operator|(
name|char
operator|*
operator|)
name|data
argument_list|,
literal|"locale"
argument_list|)
condition|)
name|qt_input_mapper
operator|=
name|QTextCodec
operator|::
name|codecForLocale
argument_list|()
expr_stmt|;
else|else
name|qt_input_mapper
operator|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
operator|(
name|char
operator|*
operator|)
name|data
argument_list|)
expr_stmt|;
comment|// make sure we have an input codec
if|if
condition|(
operator|!
name|qt_input_mapper
condition|)
name|qt_input_mapper
operator|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"ISO 8859-1"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|qt_input_mapper
operator|&&
name|qt_input_mapper
operator|->
name|mibEnum
argument_list|()
operator|==
literal|11
condition|)
comment|// 8859-8
name|qt_input_mapper
operator|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"ISO 8859-8-I"
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
condition|)
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// set font, foreground and background from x11 resources. The
end_comment
begin_comment
comment|// arguments may override the resource settings.
end_comment
begin_function
DECL|function|qt_set_x11_resources
specifier|static
name|void
name|qt_set_x11_resources
parameter_list|(
specifier|const
name|char
modifier|*
name|font
init|=
literal|0
parameter_list|,
specifier|const
name|char
modifier|*
name|fg
init|=
literal|0
parameter_list|,
specifier|const
name|char
modifier|*
name|bg
init|=
literal|0
parameter_list|,
specifier|const
name|char
modifier|*
name|button
init|=
literal|0
parameter_list|)
block|{
name|QString
name|resFont
decl_stmt|,
name|resFG
decl_stmt|,
name|resBG
decl_stmt|,
name|resButton
decl_stmt|,
name|resEF
decl_stmt|,
name|sysFont
decl_stmt|,
name|selectBackground
decl_stmt|,
name|selectForeground
decl_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_General
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateMenu
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_FadeMenu
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateCombo
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateTooltip
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_FadeTooltip
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateToolBox
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|bool
name|paletteAlreadySet
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|desktopSettingsAware
argument_list|()
condition|)
block|{
comment|// first, read from settings
name|QApplicationPrivate
operator|::
name|x11_apply_settings
argument_list|()
expr_stmt|;
comment|// the call to QApplication::style() below creates the system
comment|// palette, which breaks the logic after the RESOURCE_MANAGER
comment|// loop... so I have to save this value to be able to use it later
name|paletteAlreadySet
operator|=
operator|(
name|QApplicationPrivate
operator|::
name|sys_pal
operator|!=
literal|0
operator|)
expr_stmt|;
comment|// second, parse the RESOURCE_MANAGER property
name|int
name|format
decl_stmt|;
name|ulong
name|nitems
decl_stmt|,
name|after
init|=
literal|1
decl_stmt|;
name|QString
name|res
decl_stmt|;
name|long
name|offset
init|=
literal|0
decl_stmt|;
name|Atom
name|type
init|=
name|XNone
decl_stmt|;
while|while
condition|(
name|after
operator|>
literal|0
condition|)
block|{
name|uchar
modifier|*
name|data
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ATOM
argument_list|(
name|RESOURCE_MANAGER
argument_list|)
argument_list|,
name|offset
argument_list|,
literal|8192
argument_list|,
name|False
argument_list|,
name|AnyPropertyType
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|nitems
argument_list|,
operator|&
name|after
argument_list|,
operator|&
name|data
argument_list|)
operator|!=
name|Success
condition|)
block|{
name|res
operator|=
name|QString
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|type
operator|==
name|XA_STRING
condition|)
name|res
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
operator|(
name|char
operator|*
operator|)
name|data
argument_list|)
expr_stmt|;
else|else
name|res
operator|+=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
operator|(
name|char
operator|*
operator|)
name|data
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|2048
expr_stmt|;
comment|// offset is in 32bit quantities... 8192/4 == 2048
if|if
condition|(
name|data
condition|)
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|data
argument_list|)
expr_stmt|;
block|}
name|QString
name|key
decl_stmt|,
name|value
decl_stmt|;
name|int
name|l
init|=
literal|0
decl_stmt|,
name|r
decl_stmt|;
name|QString
name|apn
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|appName
argument_list|)
decl_stmt|;
name|QString
name|apc
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|appClass
argument_list|)
decl_stmt|;
name|int
name|apnl
init|=
name|apn
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|apcl
init|=
name|apc
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|resl
init|=
name|res
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|l
operator|<
name|resl
condition|)
block|{
name|r
operator|=
name|res
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|,
name|l
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|<
literal|0
condition|)
name|r
operator|=
name|resl
expr_stmt|;
while|while
condition|(
name|res
operator|.
name|at
argument_list|(
name|l
argument_list|)
operator|.
name|isSpace
argument_list|()
condition|)
name|l
operator|++
expr_stmt|;
name|bool
name|mine
init|=
literal|false
decl_stmt|;
name|QChar
name|sc
init|=
name|res
operator|.
name|at
argument_list|(
name|l
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|at
argument_list|(
name|l
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'*'
argument_list|)
operator|&&
operator|(
name|sc
operator|==
name|QLatin1Char
argument_list|(
literal|'f'
argument_list|)
operator|||
name|sc
operator|==
name|QLatin1Char
argument_list|(
literal|'b'
argument_list|)
operator|||
name|sc
operator|==
name|QLatin1Char
argument_list|(
literal|'g'
argument_list|)
operator|||
name|sc
operator|==
name|QLatin1Char
argument_list|(
literal|'F'
argument_list|)
operator|||
name|sc
operator|==
name|QLatin1Char
argument_list|(
literal|'B'
argument_list|)
operator|||
name|sc
operator|==
name|QLatin1Char
argument_list|(
literal|'G'
argument_list|)
operator|||
name|sc
operator|==
name|QLatin1Char
argument_list|(
literal|'s'
argument_list|)
operator|||
name|sc
operator|==
name|QLatin1Char
argument_list|(
literal|'S'
argument_list|)
comment|// capital T only, since we're looking for "Text.selectSomething"
operator|||
name|sc
operator|==
name|QLatin1Char
argument_list|(
literal|'T'
argument_list|)
operator|)
condition|)
block|{
comment|// OPTIMIZED, since we only want "*[fbgsT].."
name|QString
name|item
init|=
name|res
operator|.
name|mid
argument_list|(
name|l
argument_list|,
name|r
operator|-
name|l
argument_list|)
operator|.
name|simplified
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|item
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
name|key
operator|=
name|item
operator|.
name|left
argument_list|(
name|i
argument_list|)
operator|.
name|trimmed
argument_list|()
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
operator|.
name|toLower
argument_list|()
expr_stmt|;
name|value
operator|=
name|item
operator|.
name|right
argument_list|(
name|item
operator|.
name|length
argument_list|()
operator|-
name|i
operator|-
literal|1
argument_list|)
operator|.
name|trimmed
argument_list|()
expr_stmt|;
name|mine
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|apnl
operator|&&
name|res
operator|.
name|at
argument_list|(
name|l
argument_list|)
operator|==
name|apn
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|)
operator|||
operator|(
name|appClass
operator|&&
name|apcl
operator|&&
name|res
operator|.
name|at
argument_list|(
name|l
argument_list|)
operator|==
name|apc
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|res
operator|.
name|mid
argument_list|(
name|l
argument_list|,
name|apnl
argument_list|)
operator|==
name|apn
operator|&&
operator|(
name|res
operator|.
name|at
argument_list|(
name|l
operator|+
name|apnl
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|||
name|res
operator|.
name|at
argument_list|(
name|l
operator|+
name|apnl
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'*'
argument_list|)
operator|)
condition|)
block|{
name|QString
name|item
init|=
name|res
operator|.
name|mid
argument_list|(
name|l
argument_list|,
name|r
operator|-
name|l
argument_list|)
operator|.
name|simplified
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|item
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
name|key
operator|=
name|item
operator|.
name|left
argument_list|(
name|i
argument_list|)
operator|.
name|trimmed
argument_list|()
operator|.
name|mid
argument_list|(
name|apnl
operator|+
literal|1
argument_list|)
operator|.
name|toLower
argument_list|()
expr_stmt|;
name|value
operator|=
name|item
operator|.
name|right
argument_list|(
name|item
operator|.
name|length
argument_list|()
operator|-
name|i
operator|-
literal|1
argument_list|)
operator|.
name|trimmed
argument_list|()
expr_stmt|;
name|mine
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|res
operator|.
name|mid
argument_list|(
name|l
argument_list|,
name|apcl
argument_list|)
operator|==
name|apc
operator|&&
operator|(
name|res
operator|.
name|at
argument_list|(
name|l
operator|+
name|apcl
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|||
name|res
operator|.
name|at
argument_list|(
name|l
operator|+
name|apcl
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'*'
argument_list|)
operator|)
condition|)
block|{
name|QString
name|item
init|=
name|res
operator|.
name|mid
argument_list|(
name|l
argument_list|,
name|r
operator|-
name|l
argument_list|)
operator|.
name|simplified
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|item
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
name|key
operator|=
name|item
operator|.
name|left
argument_list|(
name|i
argument_list|)
operator|.
name|trimmed
argument_list|()
operator|.
name|mid
argument_list|(
name|apcl
operator|+
literal|1
argument_list|)
operator|.
name|toLower
argument_list|()
expr_stmt|;
name|value
operator|=
name|item
operator|.
name|right
argument_list|(
name|item
operator|.
name|length
argument_list|()
operator|-
name|i
operator|-
literal|1
argument_list|)
operator|.
name|trimmed
argument_list|()
expr_stmt|;
name|mine
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mine
condition|)
block|{
if|if
condition|(
operator|!
name|font
operator|&&
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"systemfont"
argument_list|)
condition|)
name|sysFont
operator|=
name|value
operator|.
name|left
argument_list|(
name|value
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|font
operator|&&
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"font"
argument_list|)
condition|)
name|resFont
operator|=
name|value
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|fg
operator|&&
operator|!
name|paletteAlreadySet
condition|)
block|{
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"foreground"
argument_list|)
condition|)
name|resFG
operator|=
name|value
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|bg
operator|&&
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"background"
argument_list|)
condition|)
name|resBG
operator|=
name|value
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|bg
operator|&&
operator|!
name|button
operator|&&
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"button.background"
argument_list|)
condition|)
name|resButton
operator|=
name|value
expr_stmt|;
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"text.selectbackground"
argument_list|)
condition|)
block|{
name|selectBackground
operator|=
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"text.selectforeground"
argument_list|)
condition|)
block|{
name|selectForeground
operator|=
name|value
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"guieffects"
argument_list|)
condition|)
name|resEF
operator|=
name|value
expr_stmt|;
comment|// NOTE: if you add more, change the [fbg] stuff above
block|}
name|l
operator|=
name|r
operator|+
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|sysFont
operator|.
name|isEmpty
argument_list|()
condition|)
name|resFont
operator|=
name|sysFont
expr_stmt|;
if|if
condition|(
name|resFont
operator|.
name|isEmpty
argument_list|()
condition|)
name|resFont
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|font
argument_list|)
expr_stmt|;
if|if
condition|(
name|resFG
operator|.
name|isEmpty
argument_list|()
condition|)
name|resFG
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|fg
argument_list|)
expr_stmt|;
if|if
condition|(
name|resBG
operator|.
name|isEmpty
argument_list|()
condition|)
name|resBG
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|bg
argument_list|)
expr_stmt|;
if|if
condition|(
name|resButton
operator|.
name|isEmpty
argument_list|()
condition|)
name|resButton
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|button
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|resFont
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|X11
operator|->
name|has_fontconfig
operator|&&
operator|!
name|QApplicationPrivate
operator|::
name|sys_font
condition|)
block|{
comment|// set application font
name|QFont
name|fnt
decl_stmt|;
name|fnt
operator|.
name|setRawName
argument_list|(
name|resFont
argument_list|)
expr_stmt|;
comment|// the font we get may actually be an alias for another font,
comment|// so we reset the application font to the real font info.
if|if
condition|(
operator|!
name|fnt
operator|.
name|exactMatch
argument_list|()
condition|)
block|{
name|QFontInfo
name|fontinfo
argument_list|(
name|fnt
argument_list|)
decl_stmt|;
name|fnt
operator|.
name|setFamily
argument_list|(
name|fontinfo
operator|.
name|family
argument_list|()
argument_list|)
expr_stmt|;
name|fnt
operator|.
name|setRawMode
argument_list|(
name|fontinfo
operator|.
name|rawMode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fnt
operator|.
name|rawMode
argument_list|()
condition|)
block|{
name|fnt
operator|.
name|setItalic
argument_list|(
name|fontinfo
operator|.
name|italic
argument_list|()
argument_list|)
expr_stmt|;
name|fnt
operator|.
name|setWeight
argument_list|(
name|fontinfo
operator|.
name|weight
argument_list|()
argument_list|)
expr_stmt|;
name|fnt
operator|.
name|setUnderline
argument_list|(
name|fontinfo
operator|.
name|underline
argument_list|()
argument_list|)
expr_stmt|;
name|fnt
operator|.
name|setStrikeOut
argument_list|(
name|fontinfo
operator|.
name|strikeOut
argument_list|()
argument_list|)
expr_stmt|;
name|fnt
operator|.
name|setStyleHint
argument_list|(
name|fontinfo
operator|.
name|styleHint
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fnt
operator|.
name|pointSize
argument_list|()
operator|<=
literal|0
operator|&&
name|fnt
operator|.
name|pixelSize
argument_list|()
operator|<=
literal|0
condition|)
block|{
comment|// size is all wrong... fix it
name|qreal
name|pointSize
init|=
name|fontinfo
operator|.
name|pixelSize
argument_list|()
operator|*
literal|72.
operator|/
operator|(
name|float
operator|)
name|QX11Info
operator|::
name|appDpiY
argument_list|()
decl_stmt|;
if|if
condition|(
name|pointSize
operator|<=
literal|0
condition|)
name|pointSize
operator|=
literal|12
expr_stmt|;
name|fnt
operator|.
name|setPointSize
argument_list|(
name|qRound
argument_list|(
name|pointSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|QApplicationPrivate
operator|::
name|setSystemFont
argument_list|(
name|fnt
argument_list|)
expr_stmt|;
block|}
comment|// QGtkStyle sets it's own system palette
name|bool
name|gtkStyle
init|=
name|QApplicationPrivate
operator|::
name|app_style
operator|&&
name|QApplicationPrivate
operator|::
name|app_style
operator|->
name|inherits
argument_list|(
literal|"QGtkStyle"
argument_list|)
decl_stmt|;
name|bool
name|kdeColors
init|=
operator|(
name|QApplication
operator|::
name|desktopSettingsAware
argument_list|()
operator|&&
name|X11
operator|->
name|desktopEnvironment
operator|==
name|DE_KDE
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|gtkStyle
operator|&&
operator|(
name|kdeColors
operator|||
operator|(
name|button
operator|||
operator|!
name|resBG
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|resFG
operator|.
name|isEmpty
argument_list|()
operator|)
operator|)
condition|)
block|{
comment|// set app colors
name|bool
name|allowX11ColorNames
init|=
name|QColor
operator|::
name|allowX11ColorNames
argument_list|()
decl_stmt|;
name|QColor
operator|::
name|setAllowX11ColorNames
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|QApplication
operator|::
name|style
argument_list|()
expr_stmt|;
comment|// trigger creation of application style and system palettes
name|QColor
name|btn
decl_stmt|;
name|QColor
name|bg
decl_stmt|;
name|QColor
name|fg
decl_stmt|;
name|QColor
name|bfg
decl_stmt|;
name|QColor
name|wfg
decl_stmt|;
if|if
condition|(
operator|!
name|resBG
operator|.
name|isEmpty
argument_list|()
condition|)
name|bg
operator|=
name|QColor
argument_list|(
name|resBG
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bg
operator|.
name|isValid
argument_list|()
condition|)
name|bg
operator|=
name|QApplicationPrivate
operator|::
name|sys_pal
operator|->
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Window
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|resFG
operator|.
name|isEmpty
argument_list|()
condition|)
name|fg
operator|=
name|QColor
argument_list|(
name|resFG
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fg
operator|.
name|isValid
argument_list|()
condition|)
name|fg
operator|=
name|QApplicationPrivate
operator|::
name|sys_pal
operator|->
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|resButton
operator|.
name|isEmpty
argument_list|()
condition|)
name|btn
operator|=
name|QColor
argument_list|(
name|resButton
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|resBG
operator|.
name|isEmpty
argument_list|()
condition|)
name|btn
operator|=
name|bg
expr_stmt|;
if|if
condition|(
operator|!
name|btn
operator|.
name|isValid
argument_list|()
condition|)
name|btn
operator|=
name|QApplicationPrivate
operator|::
name|sys_pal
operator|->
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|int
name|h
decl_stmt|,
name|s
decl_stmt|,
name|v
decl_stmt|;
name|fg
operator|.
name|getHsv
argument_list|(
operator|&
name|h
argument_list|,
operator|&
name|s
argument_list|,
operator|&
name|v
argument_list|)
expr_stmt|;
name|QColor
name|base
init|=
name|Qt
operator|::
name|white
decl_stmt|;
name|bool
name|bright_mode
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|v
operator|>=
literal|255
operator|-
literal|50
condition|)
block|{
name|base
operator|=
name|btn
operator|.
name|darker
argument_list|(
literal|150
argument_list|)
expr_stmt|;
name|bright_mode
operator|=
literal|true
expr_stmt|;
block|}
name|QPalette
name|pal
argument_list|(
name|fg
argument_list|,
name|btn
argument_list|,
name|btn
operator|.
name|lighter
argument_list|(
literal|125
argument_list|)
argument_list|,
name|btn
operator|.
name|darker
argument_list|(
literal|130
argument_list|)
argument_list|,
name|btn
operator|.
name|darker
argument_list|(
literal|120
argument_list|)
argument_list|,
name|wfg
operator|.
name|isValid
argument_list|()
condition|?
name|wfg
else|:
name|fg
argument_list|,
name|Qt
operator|::
name|white
argument_list|,
name|base
argument_list|,
name|bg
argument_list|)
decl_stmt|;
name|QColor
name|disabled
argument_list|(
operator|(
name|fg
operator|.
name|red
argument_list|()
operator|+
name|btn
operator|.
name|red
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|fg
operator|.
name|green
argument_list|()
operator|+
name|btn
operator|.
name|green
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|fg
operator|.
name|blue
argument_list|()
operator|+
name|btn
operator|.
name|blue
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
decl_stmt|;
name|pal
operator|.
name|setColorGroup
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|disabled
argument_list|,
name|btn
argument_list|,
name|btn
operator|.
name|lighter
argument_list|(
literal|125
argument_list|)
argument_list|,
name|btn
operator|.
name|darker
argument_list|(
literal|130
argument_list|)
argument_list|,
name|btn
operator|.
name|darker
argument_list|(
literal|150
argument_list|)
argument_list|,
name|disabled
argument_list|,
name|Qt
operator|::
name|white
argument_list|,
name|Qt
operator|::
name|white
argument_list|,
name|bg
argument_list|)
expr_stmt|;
name|QColor
name|highlight
decl_stmt|,
name|highlightText
decl_stmt|;
if|if
condition|(
operator|!
name|selectBackground
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|selectForeground
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|highlight
operator|=
name|QColor
argument_list|(
name|selectBackground
argument_list|)
expr_stmt|;
name|highlightText
operator|=
name|QColor
argument_list|(
name|selectForeground
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlight
operator|.
name|isValid
argument_list|()
operator|&&
name|highlightText
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|highlight
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|highlightText
argument_list|)
expr_stmt|;
comment|// calculate disabled colors by removing saturation
name|highlight
operator|.
name|setHsv
argument_list|(
name|highlight
operator|.
name|hue
argument_list|()
argument_list|,
literal|0
argument_list|,
name|highlight
operator|.
name|value
argument_list|()
argument_list|,
name|highlight
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
name|highlightText
operator|.
name|setHsv
argument_list|(
name|highlightText
operator|.
name|hue
argument_list|()
argument_list|,
literal|0
argument_list|,
name|highlightText
operator|.
name|value
argument_list|()
argument_list|,
name|highlightText
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|highlight
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|highlightText
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bright_mode
condition|)
block|{
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|Qt
operator|::
name|darkBlue
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|Qt
operator|::
name|darkBlue
argument_list|)
expr_stmt|;
block|}
name|pal
operator|=
name|qt_guiPlatformPlugin
argument_list|()
operator|->
name|palette
argument_list|()
operator|.
name|resolve
argument_list|(
name|pal
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|setSystemPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
name|QColor
operator|::
name|setAllowX11ColorNames
argument_list|(
name|allowX11ColorNames
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|resEF
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
name|effects
init|=
name|resEF
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_General
argument_list|,
name|effects
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"general"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateMenu
argument_list|,
name|effects
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"animatemenu"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_FadeMenu
argument_list|,
name|effects
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"fademenu"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateCombo
argument_list|,
name|effects
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"animatecombo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateTooltip
argument_list|,
name|effects
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"animatetooltip"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_FadeTooltip
argument_list|,
name|effects
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"fadetooltip"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateToolBox
argument_list|,
name|effects
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"animatetoolbox"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QIconLoader
operator|::
name|instance
argument_list|()
operator|->
name|updateSystemTheme
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// update the supported array
end_comment
begin_function
DECL|function|qt_get_net_supported
specifier|static
name|void
name|qt_get_net_supported
parameter_list|()
block|{
name|Atom
name|type
decl_stmt|;
name|int
name|format
decl_stmt|;
name|long
name|offset
init|=
literal|0
decl_stmt|;
name|unsigned
name|long
name|nitems
decl_stmt|,
name|after
decl_stmt|;
name|unsigned
name|char
modifier|*
name|data
init|=
literal|0
decl_stmt|;
name|int
name|e
init|=
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_SUPPORTED
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|False
argument_list|,
name|XA_ATOM
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|nitems
argument_list|,
operator|&
name|after
argument_list|,
operator|&
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
condition|)
name|XFree
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|X11
operator|->
name|net_supported_list
condition|)
operator|delete
index|[]
name|X11
operator|->
name|net_supported_list
expr_stmt|;
name|X11
operator|->
name|net_supported_list
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|e
operator|==
name|Success
operator|&&
name|type
operator|==
name|XA_ATOM
operator|&&
name|format
operator|==
literal|32
condition|)
block|{
name|QBuffer
name|ts
decl_stmt|;
name|ts
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
while|while
condition|(
name|after
operator|>
literal|0
condition|)
block|{
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_SUPPORTED
argument_list|)
argument_list|,
name|offset
argument_list|,
literal|1024
argument_list|,
name|False
argument_list|,
name|XA_ATOM
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|nitems
argument_list|,
operator|&
name|after
argument_list|,
operator|&
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|XA_ATOM
operator|&&
name|format
operator|==
literal|32
condition|)
block|{
name|ts
operator|.
name|write
argument_list|(
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
argument_list|,
name|nitems
operator|*
sizeof|sizeof
argument_list|(
name|long
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|nitems
expr_stmt|;
block|}
else|else
name|after
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|data
condition|)
name|XFree
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
comment|// compute nitems
name|QByteArray
name|buffer
argument_list|(
name|ts
operator|.
name|buffer
argument_list|()
argument_list|)
decl_stmt|;
name|nitems
operator|=
name|buffer
operator|.
name|size
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|Atom
argument_list|)
expr_stmt|;
name|X11
operator|->
name|net_supported_list
operator|=
operator|new
name|Atom
index|[
name|nitems
operator|+
literal|1
index|]
expr_stmt|;
name|Atom
modifier|*
name|a
init|=
operator|(
name|Atom
operator|*
operator|)
name|buffer
operator|.
name|data
argument_list|()
decl_stmt|;
name|uint
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|nitems
condition|;
name|i
operator|++
control|)
name|X11
operator|->
name|net_supported_list
index|[
name|i
index|]
operator|=
name|a
index|[
name|i
index|]
expr_stmt|;
name|X11
operator|->
name|net_supported_list
index|[
name|nitems
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isSupportedByWM
name|bool
name|QX11Data
operator|::
name|isSupportedByWM
parameter_list|(
name|Atom
name|atom
parameter_list|)
block|{
if|if
condition|(
operator|!
name|X11
operator|->
name|net_supported_list
condition|)
return|return
literal|false
return|;
name|bool
name|supported
init|=
literal|false
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|X11
operator|->
name|net_supported_list
index|[
name|i
index|]
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|X11
operator|->
name|net_supported_list
index|[
name|i
operator|++
index|]
operator|==
name|atom
condition|)
block|{
name|supported
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|supported
return|;
block|}
end_function
begin_comment
comment|// update the virtual roots array
end_comment
begin_function
DECL|function|qt_get_net_virtual_roots
specifier|static
name|void
name|qt_get_net_virtual_roots
parameter_list|()
block|{
if|if
condition|(
name|X11
operator|->
name|net_virtual_root_list
condition|)
operator|delete
index|[]
name|X11
operator|->
name|net_virtual_root_list
expr_stmt|;
name|X11
operator|->
name|net_virtual_root_list
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_VIRTUAL_ROOTS
argument_list|)
argument_list|)
condition|)
return|return;
name|Atom
name|type
decl_stmt|;
name|int
name|format
decl_stmt|;
name|long
name|offset
init|=
literal|0
decl_stmt|;
name|unsigned
name|long
name|nitems
decl_stmt|,
name|after
decl_stmt|;
name|unsigned
name|char
modifier|*
name|data
decl_stmt|;
name|int
name|e
init|=
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_VIRTUAL_ROOTS
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|False
argument_list|,
name|XA_ATOM
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|nitems
argument_list|,
operator|&
name|after
argument_list|,
operator|&
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
condition|)
name|XFree
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|==
name|Success
operator|&&
name|type
operator|==
name|XA_ATOM
operator|&&
name|format
operator|==
literal|32
condition|)
block|{
name|QBuffer
name|ts
decl_stmt|;
name|ts
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
while|while
condition|(
name|after
operator|>
literal|0
condition|)
block|{
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_VIRTUAL_ROOTS
argument_list|)
argument_list|,
name|offset
argument_list|,
literal|1024
argument_list|,
name|False
argument_list|,
name|XA_ATOM
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|nitems
argument_list|,
operator|&
name|after
argument_list|,
operator|&
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|XA_ATOM
operator|&&
name|format
operator|==
literal|32
condition|)
block|{
name|ts
operator|.
name|write
argument_list|(
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
argument_list|,
name|nitems
operator|*
literal|4
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|nitems
expr_stmt|;
block|}
else|else
name|after
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|data
condition|)
name|XFree
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
comment|// compute nitems
name|QByteArray
name|buffer
argument_list|(
name|ts
operator|.
name|buffer
argument_list|()
argument_list|)
decl_stmt|;
name|nitems
operator|=
name|buffer
operator|.
name|size
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|Window
argument_list|)
expr_stmt|;
name|X11
operator|->
name|net_virtual_root_list
operator|=
operator|new
name|Window
index|[
name|nitems
operator|+
literal|1
index|]
expr_stmt|;
name|Window
modifier|*
name|a
init|=
operator|(
name|Window
operator|*
operator|)
name|buffer
operator|.
name|data
argument_list|()
decl_stmt|;
name|uint
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|nitems
condition|;
name|i
operator|++
control|)
name|X11
operator|->
name|net_virtual_root_list
index|[
name|i
index|]
operator|=
name|a
index|[
name|i
index|]
expr_stmt|;
name|X11
operator|->
name|net_virtual_root_list
index|[
name|nitems
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_net_remove_user_time
name|void
name|qt_net_remove_user_time
parameter_list|(
name|QWidget
modifier|*
name|tlw
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|tlw
argument_list|)
expr_stmt|;
name|QTLWExtra
modifier|*
name|extra
init|=
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|maybeTopData
argument_list|()
decl_stmt|;
if|if
condition|(
name|extra
operator|&&
name|extra
operator|->
name|userTimeWindow
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|tlw
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
name|XDeleteProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|tlw
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_USER_TIME_WINDOW
argument_list|)
argument_list|)
expr_stmt|;
name|XDestroyWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|extra
operator|->
name|userTimeWindow
argument_list|)
expr_stmt|;
name|extra
operator|->
name|userTimeWindow
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_net_update_user_time
name|void
name|qt_net_update_user_time
parameter_list|(
name|QWidget
modifier|*
name|tlw
parameter_list|,
name|unsigned
name|long
name|timestamp
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|tlw
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|tlw
operator|->
name|isWindow
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|tlw
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|QTLWExtra
modifier|*
name|extra
init|=
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
decl_stmt|;
name|WId
name|wid
init|=
name|tlw
operator|->
name|internalWinId
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|isSupportedByWM
init|=
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_USER_TIME_WINDOW
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|extra
operator|->
name|userTimeWindow
operator|||
name|isSupportedByWM
condition|)
block|{
if|if
condition|(
operator|!
name|extra
operator|->
name|userTimeWindow
condition|)
block|{
name|extra
operator|->
name|userTimeWindow
operator|=
name|XCreateSimpleWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|tlw
operator|->
name|internalWinId
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|wid
operator|=
name|extra
operator|->
name|userTimeWindow
expr_stmt|;
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|tlw
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_USER_TIME_WINDOW
argument_list|)
argument_list|,
name|XA_WINDOW
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|&
name|wid
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|XDeleteProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|tlw
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_USER_TIME
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isSupportedByWM
condition|)
block|{
comment|// WM no longer supports it, then we should remove the
comment|// _NET_WM_USER_TIME_WINDOW atom.
name|qt_net_remove_user_time
argument_list|(
name|tlw
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wid
operator|=
name|extra
operator|->
name|userTimeWindow
expr_stmt|;
block|}
block|}
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|wid
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_USER_TIME
argument_list|)
argument_list|,
name|XA_CARDINAL
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|&
name|timestamp
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_check_focus_model
specifier|static
name|void
name|qt_check_focus_model
parameter_list|()
block|{
name|Window
name|fw
init|=
name|XNone
decl_stmt|;
name|int
name|unused
decl_stmt|;
name|XGetInputFocus
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|fw
argument_list|,
operator|&
name|unused
argument_list|)
expr_stmt|;
if|if
condition|(
name|fw
operator|==
name|PointerRoot
condition|)
name|X11
operator|->
name|focus_model
operator|=
name|QX11Data
operator|::
name|FM_PointerRoot
expr_stmt|;
else|else
name|X11
operator|->
name|focus_model
operator|=
name|QX11Data
operator|::
name|FM_Other
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABLET
end_ifndef
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_IRIX
argument_list|)
end_if
begin_comment
comment|// from include/Xwacom.h
end_comment
begin_define
DECL|macro|XWACOM_PARAM_TOOLID
define|#
directive|define
name|XWACOM_PARAM_TOOLID
value|322
end_define
begin_define
DECL|macro|XWACOM_PARAM_TOOLSERIAL
define|#
directive|define
name|XWACOM_PARAM_TOOLSERIAL
value|323
end_define
begin_typedef
DECL|typedef|PtrWacomConfigInit
typedef|typedef
name|WACOMCONFIG
modifier|*
function_decl|(
modifier|*
name|PtrWacomConfigInit
function_decl|)
parameter_list|(
name|Display
modifier|*
parameter_list|,
name|WACOMERRORFUNC
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWacomConfigOpenDevice
typedef|typedef
name|WACOMDEVICE
modifier|*
function_decl|(
modifier|*
name|PtrWacomConfigOpenDevice
function_decl|)
parameter_list|(
name|WACOMCONFIG
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWacomConfigGetRawParam
typedef|typedef
name|int
modifier|*
function_decl|(
modifier|*
name|PtrWacomConfigGetRawParam
function_decl|)
parameter_list|(
name|WACOMDEVICE
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|unsigned
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWacomConfigCloseDevice
typedef|typedef
name|int
function_decl|(
modifier|*
name|PtrWacomConfigCloseDevice
function_decl|)
parameter_list|(
name|WACOMDEVICE
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWacomConfigTerm
typedef|typedef
name|void
function_decl|(
modifier|*
name|PtrWacomConfigTerm
function_decl|)
parameter_list|(
name|WACOMCONFIG
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrWacomConfigInit
specifier|static
name|PtrWacomConfigInit
name|ptrWacomConfigInit
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrWacomConfigOpenDevice
specifier|static
name|PtrWacomConfigOpenDevice
name|ptrWacomConfigOpenDevice
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrWacomConfigGetRawParam
specifier|static
name|PtrWacomConfigGetRawParam
name|ptrWacomConfigGetRawParam
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrWacomConfigCloseDevice
specifier|static
name|PtrWacomConfigCloseDevice
name|ptrWacomConfigCloseDevice
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrWacomConfigTerm
specifier|static
name|PtrWacomConfigTerm
name|ptrWacomConfigTerm
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QByteArray
argument_list|,
argument|wacomDeviceName
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*****************************************************************************   qt_init() - initializes Qt for X11  *****************************************************************************/
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_FONTCONFIG
argument_list|)
end_if
begin_function
DECL|function|getXDefault
specifier|static
name|void
name|getXDefault
parameter_list|(
specifier|const
name|char
modifier|*
name|group
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|,
name|int
modifier|*
name|val
parameter_list|)
block|{
name|char
modifier|*
name|str
init|=
name|XGetDefault
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|group
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|str
condition|)
block|{
name|char
modifier|*
name|end
init|=
literal|0
decl_stmt|;
name|int
name|v
init|=
name|strtol
argument_list|(
name|str
argument_list|,
operator|&
name|end
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|str
operator|!=
name|end
condition|)
operator|*
name|val
operator|=
name|v
expr_stmt|;
comment|// otherwise use fontconfig to convert the string to integer
else|else
name|FcNameConstant
argument_list|(
operator|(
name|FcChar8
operator|*
operator|)
name|str
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|getXDefault
specifier|static
name|void
name|getXDefault
parameter_list|(
specifier|const
name|char
modifier|*
name|group
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|,
name|double
modifier|*
name|val
parameter_list|)
block|{
name|char
modifier|*
name|str
init|=
name|XGetDefault
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|group
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|str
condition|)
block|{
name|bool
name|ok
decl_stmt|;
name|double
name|v
init|=
name|QByteArray
argument_list|(
name|str
argument_list|)
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
operator|*
name|val
operator|=
name|v
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|getXDefault
specifier|static
name|void
name|getXDefault
parameter_list|(
specifier|const
name|char
modifier|*
name|group
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|,
name|bool
modifier|*
name|val
parameter_list|)
block|{
name|char
modifier|*
name|str
init|=
name|XGetDefault
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|group
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|str
condition|)
block|{
name|char
name|c
init|=
name|str
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|isupper
argument_list|(
operator|(
name|int
operator|)
name|c
argument_list|)
condition|)
name|c
operator|=
name|tolower
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'t'
operator|||
name|c
operator|==
literal|'y'
operator|||
name|c
operator|==
literal|'1'
condition|)
operator|*
name|val
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|c
operator|==
literal|'f'
operator|||
name|c
operator|==
literal|'n'
operator|||
name|c
operator|==
literal|'0'
condition|)
operator|*
name|val
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'o'
condition|)
block|{
name|c
operator|=
name|str
index|[
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|isupper
argument_list|(
operator|(
name|int
operator|)
name|c
argument_list|)
condition|)
name|c
operator|=
name|tolower
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'n'
condition|)
operator|*
name|val
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'f'
condition|)
operator|*
name|val
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// ### This should be static but it isn't because of the friend declaration
end_comment
begin_comment
comment|// ### in qpaintdevice.h which then should have a static too but can't have
end_comment
begin_comment
comment|// ### it because "storage class specifiers invalid in friend function
end_comment
begin_comment
comment|// ### declarations" :-) Ideas anyone?
end_comment
begin_function
DECL|function|qt_init
name|void
name|qt_init
parameter_list|(
name|QApplicationPrivate
modifier|*
name|priv
parameter_list|,
name|int
parameter_list|,
name|Display
modifier|*
name|display
parameter_list|,
name|Qt
operator|::
name|HANDLE
name|visual
parameter_list|,
name|Qt
operator|::
name|HANDLE
name|colormap
parameter_list|)
block|{
name|X11
operator|=
operator|new
name|QX11Data
expr_stmt|;
name|X11
operator|->
name|display
operator|=
name|display
expr_stmt|;
name|X11
operator|->
name|displayName
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|foreignDisplay
operator|=
operator|(
name|display
operator|!=
literal|0
operator|)
expr_stmt|;
name|X11
operator|->
name|focus_model
operator|=
operator|-
literal|1
expr_stmt|;
comment|// RANDR
name|X11
operator|->
name|use_xrandr
operator|=
literal|false
expr_stmt|;
name|X11
operator|->
name|xrandr_major
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|xrandr_eventbase
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|xrandr_errorbase
operator|=
literal|0
expr_stmt|;
comment|// RENDER
name|X11
operator|->
name|use_xrender
operator|=
literal|false
expr_stmt|;
name|X11
operator|->
name|xrender_major
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|xrender_version
operator|=
literal|0
expr_stmt|;
comment|// XFIXES
name|X11
operator|->
name|use_xfixes
operator|=
literal|false
expr_stmt|;
name|X11
operator|->
name|xfixes_major
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|xfixes_eventbase
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|xfixes_errorbase
operator|=
literal|0
expr_stmt|;
comment|// XInputExtension
name|X11
operator|->
name|use_xinput
operator|=
literal|false
expr_stmt|;
name|X11
operator|->
name|xinput_major
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|xinput_eventbase
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|xinput_errorbase
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|use_xkb
operator|=
literal|false
expr_stmt|;
name|X11
operator|->
name|xkb_major
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|xkb_eventbase
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|xkb_errorbase
operator|=
literal|0
expr_stmt|;
comment|// MIT-SHM
name|X11
operator|->
name|use_mitshm
operator|=
literal|false
expr_stmt|;
name|X11
operator|->
name|use_mitshm_pixmaps
operator|=
literal|false
expr_stmt|;
name|X11
operator|->
name|mitshm_major
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|sip_serial
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|net_supported_list
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|net_virtual_root_list
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|wm_client_leader
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|screens
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|argbVisuals
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|argbColormaps
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|screenCount
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|time
operator|=
name|CurrentTime
expr_stmt|;
name|X11
operator|->
name|userTime
operator|=
name|CurrentTime
expr_stmt|;
name|X11
operator|->
name|ignore_badwindow
operator|=
literal|false
expr_stmt|;
name|X11
operator|->
name|seen_badwindow
operator|=
literal|false
expr_stmt|;
name|X11
operator|->
name|motifdnd_active
operator|=
literal|false
expr_stmt|;
name|X11
operator|->
name|default_im
operator|=
name|QLatin1String
argument_list|(
literal|"imsw-multi"
argument_list|)
expr_stmt|;
name|priv
operator|->
name|inputContext
operator|=
literal|0
expr_stmt|;
comment|// colormap control
name|X11
operator|->
name|visual_class
operator|=
operator|-
literal|1
expr_stmt|;
name|X11
operator|->
name|visual_id
operator|=
operator|-
literal|1
expr_stmt|;
name|X11
operator|->
name|color_count
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|custom_cmap
operator|=
literal|false
expr_stmt|;
comment|// outside visual/colormap
name|X11
operator|->
name|visual
operator|=
cast|reinterpret_cast
argument_list|<
name|Visual
operator|*
argument_list|>
argument_list|(
name|visual
argument_list|)
expr_stmt|;
name|X11
operator|->
name|colormap
operator|=
name|colormap
expr_stmt|;
comment|// Fontconfig
name|X11
operator|->
name|has_fontconfig
operator|=
literal|false
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_FONTCONFIG
argument_list|)
if|if
condition|(
name|qgetenv
argument_list|(
literal|"QT_X11_NO_FONTCONFIG"
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
name|X11
operator|->
name|has_fontconfig
operator|=
name|FcInit
argument_list|()
expr_stmt|;
name|X11
operator|->
name|fc_antialias
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
name|memset
argument_list|(
name|X11
operator|->
name|solid_fills
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|X11
operator|->
name|solid_fills
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|X11
operator|->
name|solid_fill_count
condition|;
operator|++
name|i
control|)
name|X11
operator|->
name|solid_fills
index|[
name|i
index|]
operator|.
name|screen
operator|=
operator|-
literal|1
expr_stmt|;
name|memset
argument_list|(
name|X11
operator|->
name|pattern_fills
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|X11
operator|->
name|pattern_fills
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|X11
operator|->
name|pattern_fill_count
condition|;
operator|++
name|i
control|)
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|screen
operator|=
operator|-
literal|1
expr_stmt|;
endif|#
directive|endif
name|X11
operator|->
name|startupId
operator|=
literal|0
expr_stmt|;
name|int
name|argc
init|=
name|priv
operator|->
name|argc
decl_stmt|;
name|char
modifier|*
modifier|*
name|argv
init|=
name|priv
operator|->
name|argv
decl_stmt|;
if|if
condition|(
name|X11
operator|->
name|display
condition|)
block|{
comment|// Qt part of other application
comment|// Set application name and class
name|appName
operator|=
name|qstrdup
argument_list|(
literal|"Qt-subapplication"
argument_list|)
expr_stmt|;
name|char
modifier|*
name|app_class
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|argv
condition|)
block|{
specifier|const
name|char
modifier|*
name|p
init|=
name|strrchr
argument_list|(
name|argv
index|[
literal|0
index|]
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|app_class
operator|=
name|qstrdup
argument_list|(
name|p
condition|?
name|p
operator|+
literal|1
else|:
name|argv
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|app_class
index|[
literal|0
index|]
condition|)
name|app_class
index|[
literal|0
index|]
operator|=
name|toupper
argument_list|(
name|app_class
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|appClass
operator|=
name|app_class
expr_stmt|;
block|}
else|else
block|{
comment|// Qt controls everything (default)
comment|// With the threaded QML renderer, we always need this.
name|XInitThreads
argument_list|()
expr_stmt|;
comment|// Set application name and class
name|char
modifier|*
name|app_class
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|argv
operator|&&
name|argv
index|[
literal|0
index|]
condition|)
block|{
specifier|const
name|char
modifier|*
name|p
init|=
name|strrchr
argument_list|(
name|argv
index|[
literal|0
index|]
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|appName
operator|=
name|p
condition|?
name|p
operator|+
literal|1
else|:
name|argv
index|[
literal|0
index|]
expr_stmt|;
name|app_class
operator|=
name|qstrdup
argument_list|(
name|appName
argument_list|)
expr_stmt|;
if|if
condition|(
name|app_class
index|[
literal|0
index|]
condition|)
name|app_class
index|[
literal|0
index|]
operator|=
name|toupper
argument_list|(
name|app_class
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|appClass
operator|=
name|app_class
expr_stmt|;
block|}
comment|// Install default error handlers
name|original_x_errhandler
operator|=
name|XSetErrorHandler
argument_list|(
name|qt_x_errhandler
argument_list|)
expr_stmt|;
name|original_xio_errhandler
operator|=
name|XSetIOErrorHandler
argument_list|(
name|qt_xio_errhandler
argument_list|)
expr_stmt|;
comment|// Get command line params
name|int
name|j
init|=
name|argc
condition|?
literal|1
else|:
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|argc
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|argv
index|[
name|i
index|]
operator|&&
operator|*
name|argv
index|[
name|i
index|]
operator|!=
literal|'-'
condition|)
block|{
name|argv
index|[
name|j
operator|++
index|]
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
continue|continue;
block|}
name|QByteArray
name|arg
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|arg
operator|==
literal|"-display"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
operator|&&
operator|!
name|X11
operator|->
name|display
condition|)
name|X11
operator|->
name|displayName
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-fn"
operator|||
name|arg
operator|==
literal|"-font"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|appFont
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-bg"
operator|||
name|arg
operator|==
literal|"-background"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|appBGCol
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-btn"
operator|||
name|arg
operator|==
literal|"-button"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|appBTNCol
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-fg"
operator|||
name|arg
operator|==
literal|"-foreground"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|appFGCol
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-name"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|appName
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-title"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|mwTitle
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-geometry"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|mwGeometry
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-im"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|qt_ximServer
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-ncols"
condition|)
block|{
comment|// xv and netscape use this name
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|X11
operator|->
name|color_count
operator|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|atoi
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-visual"
condition|)
block|{
comment|// xv and netscape use this name
if|if
condition|(
operator|++
name|i
operator|<
name|argc
operator|&&
operator|!
name|X11
operator|->
name|visual
condition|)
block|{
name|QString
name|s
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"staticgray"
argument_list|)
condition|)
name|X11
operator|->
name|visual_class
operator|=
name|StaticGray
expr_stmt|;
elseif|else
if|if
condition|(
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"grayscale"
argument_list|)
condition|)
name|X11
operator|->
name|visual_class
operator|=
name|XGrayScale
expr_stmt|;
elseif|else
if|if
condition|(
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"staticcolor"
argument_list|)
condition|)
name|X11
operator|->
name|visual_class
operator|=
name|StaticColor
expr_stmt|;
elseif|else
if|if
condition|(
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"pseudocolor"
argument_list|)
condition|)
name|X11
operator|->
name|visual_class
operator|=
name|PseudoColor
expr_stmt|;
elseif|else
if|if
condition|(
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"truecolor"
argument_list|)
condition|)
name|X11
operator|->
name|visual_class
operator|=
name|TrueColor
expr_stmt|;
elseif|else
if|if
condition|(
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"directcolor"
argument_list|)
condition|)
name|X11
operator|->
name|visual_class
operator|=
name|DirectColor
expr_stmt|;
else|else
name|X11
operator|->
name|visual_id
operator|=
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|strtol
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_XIM
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-inputstyle"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
block|{
name|QString
name|s
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"onthespot"
argument_list|)
condition|)
name|qt_xim_preferred_style
operator|=
name|XIMPreeditCallbacks
operator||
name|XIMStatusNothing
expr_stmt|;
elseif|else
if|if
condition|(
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"overthespot"
argument_list|)
condition|)
name|qt_xim_preferred_style
operator|=
name|XIMPreeditPosition
operator||
name|XIMStatusNothing
expr_stmt|;
elseif|else
if|if
condition|(
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"offthespot"
argument_list|)
condition|)
name|qt_xim_preferred_style
operator|=
name|XIMPreeditArea
operator||
name|XIMStatusArea
expr_stmt|;
elseif|else
if|if
condition|(
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"root"
argument_list|)
condition|)
name|qt_xim_preferred_style
operator|=
name|XIMPreeditNothing
operator||
name|XIMStatusNothing
expr_stmt|;
block|}
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-cmap"
condition|)
block|{
comment|// xv uses this name
if|if
condition|(
operator|!
name|X11
operator|->
name|colormap
condition|)
name|X11
operator|->
name|custom_cmap
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-sync"
condition|)
name|appSync
operator|=
operator|!
name|appSync
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_DEBUG
argument_list|)
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-nograb"
condition|)
name|appNoGrab
operator|=
operator|!
name|appNoGrab
expr_stmt|;
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-dograb"
condition|)
name|appDoGrab
operator|=
operator|!
name|appDoGrab
expr_stmt|;
endif|#
directive|endif
else|else
name|argv
index|[
name|j
operator|++
index|]
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
name|priv
operator|->
name|argc
operator|=
name|j
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_DEBUG
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
if|if
condition|(
operator|!
name|appNoGrab
operator|&&
operator|!
name|appDoGrab
condition|)
block|{
name|QString
name|s
decl_stmt|;
name|s
operator|.
name|sprintf
argument_list|(
literal|"/proc/%d/cmdline"
argument_list|,
name|getppid
argument_list|()
argument_list|)
expr_stmt|;
name|QFile
name|f
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|s
operator|.
name|clear
argument_list|()
expr_stmt|;
name|char
name|c
decl_stmt|;
while|while
condition|(
name|f
operator|.
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
operator|&&
name|c
condition|)
block|{
if|if
condition|(
name|c
operator|==
literal|'/'
condition|)
name|s
operator|.
name|clear
argument_list|()
expr_stmt|;
else|else
name|s
operator|+=
name|QLatin1Char
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"gdb"
argument_list|)
condition|)
block|{
name|appNoGrab
operator|=
literal|true
expr_stmt|;
name|qDebug
argument_list|(
literal|"Qt: gdb: -nograb added to command-line options.\n"
literal|"\t Use the -dograb option to enforce grabbing."
argument_list|)
expr_stmt|;
block|}
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// Connect to X server
if|if
condition|(
name|qt_is_gui_used
operator|&&
operator|!
name|X11
operator|->
name|display
condition|)
block|{
if|if
condition|(
operator|(
name|X11
operator|->
name|display
operator|=
name|XOpenDisplay
argument_list|(
name|X11
operator|->
name|displayName
argument_list|)
operator|)
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: cannot connect to X server %s"
argument_list|,
name|appName
argument_list|,
name|XDisplayName
argument_list|(
name|X11
operator|->
name|displayName
argument_list|)
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|reset_instance_pointer
argument_list|()
expr_stmt|;
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|appSync
condition|)
comment|// if "-sync" argument
name|XSynchronize
argument_list|(
name|X11
operator|->
name|display
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Common code, regardless of whether display is foreign.
comment|// Get X parameters
if|if
condition|(
name|qt_is_gui_used
condition|)
block|{
name|X11
operator|->
name|defaultScreen
operator|=
name|DefaultScreen
argument_list|(
name|X11
operator|->
name|display
argument_list|)
expr_stmt|;
name|X11
operator|->
name|screenCount
operator|=
name|ScreenCount
argument_list|(
name|X11
operator|->
name|display
argument_list|)
expr_stmt|;
name|X11
operator|->
name|screens
operator|=
operator|new
name|QX11InfoData
index|[
name|X11
operator|->
name|screenCount
index|]
expr_stmt|;
name|X11
operator|->
name|argbVisuals
operator|=
operator|new
name|Visual
operator|*
index|[
name|X11
operator|->
name|screenCount
index|]
expr_stmt|;
name|X11
operator|->
name|argbColormaps
operator|=
operator|new
name|Colormap
index|[
name|X11
operator|->
name|screenCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|X11
operator|->
name|screenCount
condition|;
name|s
operator|++
control|)
block|{
name|QX11InfoData
modifier|*
name|screen
init|=
name|X11
operator|->
name|screens
operator|+
name|s
decl_stmt|;
name|screen
operator|->
name|ref
operator|=
literal|1
expr_stmt|;
comment|// ensures it doesn't get deleted
name|screen
operator|->
name|screen
operator|=
name|s
expr_stmt|;
name|int
name|widthMM
init|=
name|DisplayWidthMM
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|widthMM
operator|!=
literal|0
condition|)
block|{
name|screen
operator|->
name|dpiX
operator|=
operator|(
name|DisplayWidth
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|s
argument_list|)
operator|*
literal|254
operator|+
name|widthMM
operator|*
literal|5
operator|)
operator|/
operator|(
name|widthMM
operator|*
literal|10
operator|)
expr_stmt|;
block|}
else|else
block|{
name|screen
operator|->
name|dpiX
operator|=
literal|72
expr_stmt|;
block|}
name|int
name|heightMM
init|=
name|DisplayHeightMM
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|heightMM
operator|!=
literal|0
condition|)
block|{
name|screen
operator|->
name|dpiY
operator|=
operator|(
name|DisplayHeight
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|s
argument_list|)
operator|*
literal|254
operator|+
name|heightMM
operator|*
literal|5
operator|)
operator|/
operator|(
name|heightMM
operator|*
literal|10
operator|)
expr_stmt|;
block|}
else|else
block|{
name|screen
operator|->
name|dpiY
operator|=
literal|72
expr_stmt|;
block|}
name|X11
operator|->
name|argbVisuals
index|[
name|s
index|]
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|argbColormaps
index|[
name|s
index|]
operator|=
literal|0
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
name|int
name|xrender_eventbase
decl_stmt|,
name|xrender_errorbase
decl_stmt|;
comment|// See if XRender is supported on the connected display
if|if
condition|(
name|XQueryExtension
argument_list|(
name|X11
operator|->
name|display
argument_list|,
literal|"RENDER"
argument_list|,
operator|&
name|X11
operator|->
name|xrender_major
argument_list|,
operator|&
name|xrender_eventbase
argument_list|,
operator|&
name|xrender_errorbase
argument_list|)
operator|&&
name|XRenderQueryExtension
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|xrender_eventbase
argument_list|,
operator|&
name|xrender_errorbase
argument_list|)
condition|)
block|{
comment|// Check the version as well - we need v0.4 or higher
name|int
name|major
init|=
literal|0
decl_stmt|;
name|int
name|minor
init|=
literal|0
decl_stmt|;
name|XRenderQueryVersion
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|major
argument_list|,
operator|&
name|minor
argument_list|)
expr_stmt|;
if|if
condition|(
name|qgetenv
argument_list|(
literal|"QT_X11_NO_XRENDER"
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|X11
operator|->
name|use_xrender
operator|=
operator|(
name|major
operator|>=
literal|0
operator|&&
name|minor
operator|>=
literal|5
operator|)
expr_stmt|;
name|X11
operator|->
name|xrender_version
operator|=
name|major
operator|*
literal|100
operator|+
name|minor
expr_stmt|;
comment|// workaround for broken XServer on Ubuntu Breezy (6.8 compiled with 7.0
comment|// protocol headers)
if|if
condition|(
name|X11
operator|->
name|xrender_version
operator|==
literal|10
operator|&&
name|VendorRelease
argument_list|(
name|X11
operator|->
name|display
argument_list|)
operator|<
literal|60900000
operator|&&
name|QByteArray
argument_list|(
name|ServerVendor
argument_list|(
name|X11
operator|->
name|display
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
literal|"X.Org"
argument_list|)
condition|)
name|X11
operator|->
name|xrender_version
operator|=
literal|9
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_XRENDER
ifndef|#
directive|ifndef
name|QT_NO_MITSHM
name|int
name|mitshm_minor
decl_stmt|;
name|int
name|mitshm_major
decl_stmt|;
name|int
name|mitshm_eventbase
decl_stmt|;
name|int
name|mitshm_errorbase
decl_stmt|;
name|int
name|mitshm_pixmaps
decl_stmt|;
if|if
condition|(
name|XQueryExtension
argument_list|(
name|X11
operator|->
name|display
argument_list|,
literal|"MIT-SHM"
argument_list|,
operator|&
name|X11
operator|->
name|mitshm_major
argument_list|,
operator|&
name|mitshm_eventbase
argument_list|,
operator|&
name|mitshm_errorbase
argument_list|)
operator|&&
name|XShmQueryVersion
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|mitshm_major
argument_list|,
operator|&
name|mitshm_minor
argument_list|,
operator|&
name|mitshm_pixmaps
argument_list|)
condition|)
block|{
name|QString
name|displayName
init|=
name|QLatin1String
argument_list|(
name|XDisplayName
argument_list|(
name|NULL
argument_list|)
argument_list|)
decl_stmt|;
comment|// MITSHM only works for local displays, so do a quick check here
comment|// to determine whether the display is local or not (not 100 % accurate).
comment|// BGR server layouts are not supported either, since it requires the raster
comment|// engine to work on a QImage with BGR layout.
name|bool
name|local
init|=
name|displayName
operator|.
name|isEmpty
argument_list|()
operator|||
name|displayName
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
operator|==
literal|0
decl_stmt|;
if|if
condition|(
name|local
operator|&&
operator|(
name|qgetenv
argument_list|(
literal|"QT_X11_NO_MITSHM"
argument_list|)
operator|.
name|toInt
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|Visual
modifier|*
name|defaultVisual
init|=
name|DefaultVisual
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|DefaultScreen
argument_list|(
name|X11
operator|->
name|display
argument_list|)
argument_list|)
decl_stmt|;
name|X11
operator|->
name|use_mitshm
operator|=
operator|(
operator|(
name|defaultVisual
operator|->
name|red_mask
operator|==
literal|0xff0000
operator|||
name|defaultVisual
operator|->
name|red_mask
operator|==
literal|0xf800
operator|)
operator|&&
operator|(
name|defaultVisual
operator|->
name|green_mask
operator|==
literal|0xff00
operator|||
name|defaultVisual
operator|->
name|green_mask
operator|==
literal|0x7e0
operator|)
operator|&&
operator|(
name|defaultVisual
operator|->
name|blue_mask
operator|==
literal|0xff
operator|||
name|defaultVisual
operator|->
name|blue_mask
operator|==
literal|0x1f
operator|)
operator|)
expr_stmt|;
name|X11
operator|->
name|use_mitshm_pixmaps
operator|=
name|X11
operator|->
name|use_mitshm
operator|&&
name|mitshm_pixmaps
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_MITSHM
comment|// initialize the graphics system - order is imporant here - it must be done before
comment|// the QColormap::initialize() call
name|QApplicationPrivate
operator|::
name|graphics_system
operator|=
name|QGraphicsSystemFactory
operator|::
name|create
argument_list|(
name|QApplicationPrivate
operator|::
name|graphics_system_name
argument_list|)
expr_stmt|;
name|QColormap
operator|::
name|initialize
argument_list|()
expr_stmt|;
comment|// Support protocols
name|X11
operator|->
name|xdndSetup
argument_list|()
expr_stmt|;
comment|// Finally create all atoms
name|qt_x11_create_intern_atoms
argument_list|()
expr_stmt|;
comment|// initialize NET lists
name|qt_get_net_supported
argument_list|()
expr_stmt|;
name|qt_get_net_virtual_roots
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRANDR
comment|// See if XRandR is supported on the connected display
if|if
condition|(
name|XQueryExtension
argument_list|(
name|X11
operator|->
name|display
argument_list|,
literal|"RANDR"
argument_list|,
operator|&
name|X11
operator|->
name|xrandr_major
argument_list|,
operator|&
name|X11
operator|->
name|xrandr_eventbase
argument_list|,
operator|&
name|X11
operator|->
name|xrandr_errorbase
argument_list|)
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_RUNTIME_XRANDR
name|X11
operator|->
name|ptrXRRSelectInput
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|ptrXRRUpdateConfiguration
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|ptrXRRRootToScreen
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|ptrXRRQueryExtension
operator|=
literal|0
expr_stmt|;
name|QLibrary
name|xrandrLib
argument_list|(
name|QLatin1String
argument_list|(
literal|"Xrandr"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|xrandrLib
operator|.
name|load
argument_list|()
condition|)
block|{
comment|// try without the version number
name|xrandrLib
operator|.
name|setFileName
argument_list|(
name|QLatin1String
argument_list|(
literal|"Xrandr"
argument_list|)
argument_list|)
expr_stmt|;
name|xrandrLib
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|xrandrLib
operator|.
name|isLoaded
argument_list|()
condition|)
block|{
name|X11
operator|->
name|ptrXRRSelectInput
operator|=
operator|(
name|PtrXRRSelectInput
operator|)
name|xrandrLib
operator|.
name|resolve
argument_list|(
literal|"XRRSelectInput"
argument_list|)
expr_stmt|;
name|X11
operator|->
name|ptrXRRUpdateConfiguration
operator|=
operator|(
name|PtrXRRUpdateConfiguration
operator|)
name|xrandrLib
operator|.
name|resolve
argument_list|(
literal|"XRRUpdateConfiguration"
argument_list|)
expr_stmt|;
name|X11
operator|->
name|ptrXRRRootToScreen
operator|=
operator|(
name|PtrXRRRootToScreen
operator|)
name|xrandrLib
operator|.
name|resolve
argument_list|(
literal|"XRRRootToScreen"
argument_list|)
expr_stmt|;
name|X11
operator|->
name|ptrXRRQueryExtension
operator|=
operator|(
name|PtrXRRQueryExtension
operator|)
name|xrandrLib
operator|.
name|resolve
argument_list|(
literal|"XRRQueryExtension"
argument_list|)
expr_stmt|;
name|X11
operator|->
name|ptrXRRSizes
operator|=
operator|(
name|PtrXRRSizes
operator|)
name|xrandrLib
operator|.
name|resolve
argument_list|(
literal|"XRRSizes"
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|X11
operator|->
name|ptrXRRSelectInput
operator|=
name|XRRSelectInput
expr_stmt|;
name|X11
operator|->
name|ptrXRRUpdateConfiguration
operator|=
name|XRRUpdateConfiguration
expr_stmt|;
name|X11
operator|->
name|ptrXRRRootToScreen
operator|=
name|XRRRootToScreen
expr_stmt|;
name|X11
operator|->
name|ptrXRRQueryExtension
operator|=
name|XRRQueryExtension
expr_stmt|;
name|X11
operator|->
name|ptrXRRSizes
operator|=
name|XRRSizes
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|X11
operator|->
name|ptrXRRQueryExtension
operator|&&
name|X11
operator|->
name|ptrXRRQueryExtension
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|X11
operator|->
name|xrandr_eventbase
argument_list|,
operator|&
name|X11
operator|->
name|xrandr_errorbase
argument_list|)
condition|)
block|{
comment|// XRandR is supported
name|X11
operator|->
name|use_xrandr
operator|=
literal|true
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_XRANDR
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
if|if
condition|(
name|X11
operator|->
name|use_xrender
condition|)
block|{
comment|// XRender is supported, let's see if we have a PictFormat for the
comment|// default visual
name|XRenderPictFormat
modifier|*
name|format
init|=
name|XRenderFindVisualFormat
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|(
name|Visual
operator|*
operator|)
name|QX11Info
operator|::
name|appVisual
argument_list|(
name|X11
operator|->
name|defaultScreen
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|format
condition|)
block|{
name|X11
operator|->
name|use_xrender
operator|=
literal|false
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_XRENDER
ifndef|#
directive|ifndef
name|QT_NO_XFIXES
comment|// See if Xfixes is supported on the connected display
if|if
condition|(
name|XQueryExtension
argument_list|(
name|X11
operator|->
name|display
argument_list|,
literal|"XFIXES"
argument_list|,
operator|&
name|X11
operator|->
name|xfixes_major
argument_list|,
operator|&
name|X11
operator|->
name|xfixes_eventbase
argument_list|,
operator|&
name|X11
operator|->
name|xfixes_errorbase
argument_list|)
condition|)
block|{
name|X11
operator|->
name|ptrXFixesQueryExtension
operator|=
name|XFIXES_LOAD_V1
argument_list|(
name|XFixesQueryExtension
argument_list|)
expr_stmt|;
name|X11
operator|->
name|ptrXFixesQueryVersion
operator|=
name|XFIXES_LOAD_V1
argument_list|(
name|XFixesQueryVersion
argument_list|)
expr_stmt|;
name|X11
operator|->
name|ptrXFixesSetCursorName
operator|=
name|XFIXES_LOAD_V2
argument_list|(
name|XFixesSetCursorName
argument_list|)
expr_stmt|;
name|X11
operator|->
name|ptrXFixesSelectSelectionInput
operator|=
name|XFIXES_LOAD_V2
argument_list|(
name|XFixesSelectSelectionInput
argument_list|)
expr_stmt|;
if|if
condition|(
name|X11
operator|->
name|ptrXFixesQueryExtension
operator|&&
name|X11
operator|->
name|ptrXFixesQueryVersion
operator|&&
name|X11
operator|->
name|ptrXFixesQueryExtension
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|X11
operator|->
name|xfixes_eventbase
argument_list|,
operator|&
name|X11
operator|->
name|xfixes_errorbase
argument_list|)
condition|)
block|{
comment|// Xfixes is supported.
comment|// Note: the XFixes protocol version is negotiated using QueryVersion.
comment|// We supply the highest version we support, the X server replies with
comment|// the highest version it supports, but no higher than the version we
comment|// asked for. The version sent back is the protocol version the X server
comment|// will use to talk us. If this call is removed, the behavior of the
comment|// X server when it receives an XFixes request is undefined.
name|int
name|major
init|=
literal|3
decl_stmt|;
name|int
name|minor
init|=
literal|0
decl_stmt|;
name|X11
operator|->
name|ptrXFixesQueryVersion
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|major
argument_list|,
operator|&
name|minor
argument_list|)
expr_stmt|;
name|X11
operator|->
name|use_xfixes
operator|=
operator|(
name|major
operator|>=
literal|1
operator|)
expr_stmt|;
name|X11
operator|->
name|xfixes_major
operator|=
name|major
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_XFIXES
ifndef|#
directive|ifndef
name|QT_NO_XCURSOR
ifdef|#
directive|ifdef
name|QT_RUNTIME_XCURSOR
name|X11
operator|->
name|ptrXcursorLibraryLoadCursor
operator|=
literal|0
expr_stmt|;
name|QLibrary
name|xcursorLib
argument_list|(
name|QLatin1String
argument_list|(
literal|"Xcursor"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|bool
name|xcursorFound
init|=
name|xcursorLib
operator|.
name|load
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|xcursorFound
condition|)
block|{
comment|//try without the version number
name|xcursorLib
operator|.
name|setFileName
argument_list|(
name|QLatin1String
argument_list|(
literal|"Xcursor"
argument_list|)
argument_list|)
expr_stmt|;
name|xcursorFound
operator|=
name|xcursorLib
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|xcursorFound
condition|)
block|{
name|X11
operator|->
name|ptrXcursorLibraryLoadCursor
operator|=
operator|(
name|PtrXcursorLibraryLoadCursor
operator|)
name|xcursorLib
operator|.
name|resolve
argument_list|(
literal|"XcursorLibraryLoadCursor"
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|X11
operator|->
name|ptrXcursorLibraryLoadCursor
operator|=
name|XcursorLibraryLoadCursor
expr_stmt|;
endif|#
directive|endif
comment|// QT_RUNTIME_XCURSOR
endif|#
directive|endif
comment|// QT_NO_XCURSOR
ifndef|#
directive|ifndef
name|QT_NO_XSYNC
name|int
name|xsync_evbase
decl_stmt|,
name|xsync_errbase
decl_stmt|;
name|int
name|major
decl_stmt|,
name|minor
decl_stmt|;
if|if
condition|(
name|XSyncQueryExtension
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|xsync_evbase
argument_list|,
operator|&
name|xsync_errbase
argument_list|)
condition|)
name|XSyncInitialize
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|major
argument_list|,
operator|&
name|minor
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_XSYNC
ifndef|#
directive|ifndef
name|QT_NO_XINERAMA
ifdef|#
directive|ifdef
name|QT_RUNTIME_XINERAMA
name|X11
operator|->
name|ptrXineramaQueryExtension
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|ptrXineramaIsActive
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|ptrXineramaQueryScreens
operator|=
literal|0
expr_stmt|;
name|QLibrary
name|xineramaLib
argument_list|(
name|QLatin1String
argument_list|(
literal|"Xinerama"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|bool
name|xineramaFound
init|=
name|xineramaLib
operator|.
name|load
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|xineramaFound
condition|)
block|{
comment|//try without the version number
name|xineramaLib
operator|.
name|setFileName
argument_list|(
name|QLatin1String
argument_list|(
literal|"Xinerama"
argument_list|)
argument_list|)
expr_stmt|;
name|xineramaFound
operator|=
name|xineramaLib
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|xineramaFound
condition|)
block|{
name|X11
operator|->
name|ptrXineramaQueryExtension
operator|=
operator|(
name|PtrXineramaQueryExtension
operator|)
name|xineramaLib
operator|.
name|resolve
argument_list|(
literal|"XineramaQueryExtension"
argument_list|)
expr_stmt|;
name|X11
operator|->
name|ptrXineramaIsActive
operator|=
operator|(
name|PtrXineramaIsActive
operator|)
name|xineramaLib
operator|.
name|resolve
argument_list|(
literal|"XineramaIsActive"
argument_list|)
expr_stmt|;
name|X11
operator|->
name|ptrXineramaQueryScreens
operator|=
operator|(
name|PtrXineramaQueryScreens
operator|)
name|xineramaLib
operator|.
name|resolve
argument_list|(
literal|"XineramaQueryScreens"
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|X11
operator|->
name|ptrXineramaQueryScreens
operator|=
name|XineramaQueryScreens
expr_stmt|;
name|X11
operator|->
name|ptrXineramaIsActive
operator|=
name|XineramaIsActive
expr_stmt|;
name|X11
operator|->
name|ptrXineramaQueryExtension
operator|=
name|XineramaQueryExtension
expr_stmt|;
endif|#
directive|endif
comment|// QT_RUNTIME_XINERAMA
endif|#
directive|endif
comment|// QT_NO_XINERAMA
ifndef|#
directive|ifndef
name|QT_NO_XINPUT
comment|// See if Xinput is supported on the connected display
name|X11
operator|->
name|ptrXCloseDevice
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|ptrXListInputDevices
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|ptrXOpenDevice
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|ptrXFreeDeviceList
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|ptrXSelectExtensionEvent
operator|=
literal|0
expr_stmt|;
name|X11
operator|->
name|use_xinput
operator|=
name|XQueryExtension
argument_list|(
name|X11
operator|->
name|display
argument_list|,
literal|"XInputExtension"
argument_list|,
operator|&
name|X11
operator|->
name|xinput_major
argument_list|,
operator|&
name|X11
operator|->
name|xinput_eventbase
argument_list|,
operator|&
name|X11
operator|->
name|xinput_errorbase
argument_list|)
expr_stmt|;
if|if
condition|(
name|X11
operator|->
name|use_xinput
condition|)
block|{
name|X11
operator|->
name|ptrXCloseDevice
operator|=
name|XINPUT_LOAD
argument_list|(
name|XCloseDevice
argument_list|)
expr_stmt|;
name|X11
operator|->
name|ptrXListInputDevices
operator|=
name|XINPUT_LOAD
argument_list|(
name|XListInputDevices
argument_list|)
expr_stmt|;
name|X11
operator|->
name|ptrXOpenDevice
operator|=
name|XINPUT_LOAD
argument_list|(
name|XOpenDevice
argument_list|)
expr_stmt|;
name|X11
operator|->
name|ptrXFreeDeviceList
operator|=
name|XINPUT_LOAD
argument_list|(
name|XFreeDeviceList
argument_list|)
expr_stmt|;
name|X11
operator|->
name|ptrXSelectExtensionEvent
operator|=
name|XINPUT_LOAD
argument_list|(
name|XSelectExtensionEvent
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_XINPUT
ifndef|#
directive|ifndef
name|QT_NO_XKB
name|int
name|xkblibMajor
init|=
name|XkbMajorVersion
decl_stmt|;
name|int
name|xkblibMinor
init|=
name|XkbMinorVersion
decl_stmt|;
name|X11
operator|->
name|use_xkb
operator|=
name|XkbQueryExtension
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|X11
operator|->
name|xkb_major
argument_list|,
operator|&
name|X11
operator|->
name|xkb_eventbase
argument_list|,
operator|&
name|X11
operator|->
name|xkb_errorbase
argument_list|,
operator|&
name|xkblibMajor
argument_list|,
operator|&
name|xkblibMinor
argument_list|)
expr_stmt|;
if|if
condition|(
name|X11
operator|->
name|use_xkb
condition|)
block|{
comment|// If XKB is detected, set the GrabsUseXKBState option so input method
comment|// compositions continue to work (ie. deadkeys)
name|unsigned
name|int
name|state
init|=
name|XkbPCF_GrabsUseXKBStateMask
decl_stmt|;
operator|(
name|void
operator|)
name|XkbSetPerClientControls
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|state
argument_list|,
operator|&
name|state
argument_list|)
expr_stmt|;
comment|// select for group change events
name|XkbSelectEventDetails
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|XkbUseCoreKbd
argument_list|,
name|XkbStateNotify
argument_list|,
name|XkbAllStateComponentsMask
argument_list|,
name|XkbGroupStateMask
argument_list|)
expr_stmt|;
comment|// current group state is queried when creating the keymapper, no need to do it here
block|}
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_FONTCONFIG
argument_list|)
name|int
name|dpi
init|=
literal|0
decl_stmt|;
name|getXDefault
argument_list|(
literal|"Xft"
argument_list|,
name|FC_DPI
argument_list|,
operator|&
name|dpi
argument_list|)
expr_stmt|;
if|if
condition|(
name|dpi
condition|)
block|{
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|ScreenCount
argument_list|(
name|X11
operator|->
name|display
argument_list|)
condition|;
operator|++
name|s
control|)
block|{
name|QX11Info
operator|::
name|setAppDpiX
argument_list|(
name|s
argument_list|,
name|dpi
argument_list|)
expr_stmt|;
name|QX11Info
operator|::
name|setAppDpiY
argument_list|(
name|s
argument_list|,
name|dpi
argument_list|)
expr_stmt|;
block|}
block|}
name|double
name|fc_scale
init|=
literal|1.
decl_stmt|;
name|getXDefault
argument_list|(
literal|"Xft"
argument_list|,
name|FC_SCALE
argument_list|,
operator|&
name|fc_scale
argument_list|)
expr_stmt|;
name|X11
operator|->
name|fc_scale
operator|=
name|fc_scale
expr_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|ScreenCount
argument_list|(
name|X11
operator|->
name|display
argument_list|)
condition|;
operator|++
name|s
control|)
block|{
name|int
name|subpixel
init|=
name|FC_RGBA_UNKNOWN
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XRENDER
argument_list|)
operator|&&
operator|(
name|RENDER_MAJOR
operator|>
literal|0
operator|||
name|RENDER_MINOR
operator|>=
literal|6
operator|)
if|if
condition|(
name|X11
operator|->
name|use_xrender
condition|)
block|{
name|int
name|rsp
init|=
name|XRenderQuerySubpixelOrder
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|s
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|rsp
condition|)
block|{
default|default:
case|case
name|SubPixelUnknown
case|:
name|subpixel
operator|=
name|FC_RGBA_UNKNOWN
expr_stmt|;
break|break;
case|case
name|SubPixelHorizontalRGB
case|:
name|subpixel
operator|=
name|FC_RGBA_RGB
expr_stmt|;
break|break;
case|case
name|SubPixelHorizontalBGR
case|:
name|subpixel
operator|=
name|FC_RGBA_BGR
expr_stmt|;
break|break;
case|case
name|SubPixelVerticalRGB
case|:
name|subpixel
operator|=
name|FC_RGBA_VRGB
expr_stmt|;
break|break;
case|case
name|SubPixelVerticalBGR
case|:
name|subpixel
operator|=
name|FC_RGBA_VBGR
expr_stmt|;
break|break;
case|case
name|SubPixelNone
case|:
name|subpixel
operator|=
name|FC_RGBA_NONE
expr_stmt|;
break|break;
block|}
block|}
endif|#
directive|endif
name|char
modifier|*
name|rgba
init|=
name|XGetDefault
argument_list|(
name|X11
operator|->
name|display
argument_list|,
literal|"Xft"
argument_list|,
name|FC_RGBA
argument_list|)
decl_stmt|;
if|if
condition|(
name|rgba
condition|)
block|{
name|char
modifier|*
name|end
init|=
literal|0
decl_stmt|;
name|int
name|v
init|=
name|strtol
argument_list|(
name|rgba
argument_list|,
operator|&
name|end
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|rgba
operator|!=
name|end
condition|)
block|{
name|subpixel
operator|=
name|v
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qstrncmp
argument_list|(
name|rgba
argument_list|,
literal|"unknown"
argument_list|,
literal|7
argument_list|)
operator|==
literal|0
condition|)
block|{
name|subpixel
operator|=
name|FC_RGBA_UNKNOWN
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qstrncmp
argument_list|(
name|rgba
argument_list|,
literal|"rgb"
argument_list|,
literal|3
argument_list|)
operator|==
literal|0
condition|)
block|{
name|subpixel
operator|=
name|FC_RGBA_RGB
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qstrncmp
argument_list|(
name|rgba
argument_list|,
literal|"bgr"
argument_list|,
literal|3
argument_list|)
operator|==
literal|0
condition|)
block|{
name|subpixel
operator|=
name|FC_RGBA_BGR
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qstrncmp
argument_list|(
name|rgba
argument_list|,
literal|"vrgb"
argument_list|,
literal|4
argument_list|)
operator|==
literal|0
condition|)
block|{
name|subpixel
operator|=
name|FC_RGBA_VRGB
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qstrncmp
argument_list|(
name|rgba
argument_list|,
literal|"vbgr"
argument_list|,
literal|4
argument_list|)
operator|==
literal|0
condition|)
block|{
name|subpixel
operator|=
name|FC_RGBA_VBGR
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qstrncmp
argument_list|(
name|rgba
argument_list|,
literal|"none"
argument_list|,
literal|4
argument_list|)
operator|==
literal|0
condition|)
block|{
name|subpixel
operator|=
name|FC_RGBA_NONE
expr_stmt|;
block|}
block|}
name|X11
operator|->
name|screens
index|[
name|s
index|]
operator|.
name|subpixel
operator|=
name|subpixel
expr_stmt|;
block|}
name|getXDefault
argument_list|(
literal|"Xft"
argument_list|,
name|FC_ANTIALIAS
argument_list|,
operator|&
name|X11
operator|->
name|fc_antialias
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|FC_HINT_STYLE
name|X11
operator|->
name|fc_hint_style
operator|=
operator|-
literal|1
expr_stmt|;
name|getXDefault
argument_list|(
literal|"Xft"
argument_list|,
name|FC_HINT_STYLE
argument_list|,
operator|&
name|X11
operator|->
name|fc_hint_style
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
literal|0
comment|// ###### these are implemented by Xft, not sure we need them
block|getXDefault("Xft", FC_AUTOHINT,&X11->fc_autohint);         getXDefault("Xft", FC_HINTING,&X11->fc_autohint);         getXDefault("Xft", FC_MINSPACE,&X11->fc_autohint);
endif|#
directive|endif
endif|#
directive|endif
comment|// QT_NO_XRENDER
comment|// initialize key mapper
name|QKeyMapper
operator|::
name|changeKeyboard
argument_list|()
expr_stmt|;
comment|// Misc. initialization
if|#
directive|if
literal|0
comment|//disabled for now..
block|QSegfaultHandler::initialize(priv->argv, priv->argc);
endif|#
directive|endif
name|QCursorData
operator|::
name|initialize
argument_list|()
expr_stmt|;
block|}
name|QFont
operator|::
name|initialize
argument_list|()
expr_stmt|;
if|if
condition|(
name|qt_is_gui_used
condition|)
block|{
name|qApp
operator|->
name|setObjectName
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|appName
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|screen
decl_stmt|;
for|for
control|(
name|screen
operator|=
literal|0
init|;
name|screen
operator|<
name|X11
operator|->
name|screenCount
condition|;
operator|++
name|screen
control|)
block|{
name|XSelectInput
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|(
name|screen
argument_list|)
argument_list|,
name|KeymapStateMask
operator||
name|EnterWindowMask
operator||
name|LeaveWindowMask
operator||
name|PropertyChangeMask
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRANDR
if|if
condition|(
name|X11
operator|->
name|use_xrandr
condition|)
name|X11
operator|->
name|ptrXRRSelectInput
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|(
name|screen
argument_list|)
argument_list|,
name|True
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_XRANDR
block|}
block|}
if|if
condition|(
name|qt_is_gui_used
condition|)
block|{
comment|// Attempt to determine the current running X11 Desktop Enviornment
comment|// Use dbus if/when we can, but fall back to using windowManagerName() for now
ifndef|#
directive|ifndef
name|QT_NO_XFIXES
if|if
condition|(
name|X11
operator|->
name|ptrXFixesSelectSelectionInput
condition|)
name|X11
operator|->
name|ptrXFixesSelectSelectionInput
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_CM_S0
argument_list|)
argument_list|,
name|XFixesSetSelectionOwnerNotifyMask
operator||
name|XFixesSelectionWindowDestroyNotifyMask
operator||
name|XFixesSelectionClientCloseNotifyMask
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_XFIXES
name|X11
operator|->
name|compositingManagerRunning
operator|=
name|XGetSelectionOwner
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_CM_S0
argument_list|)
argument_list|)
expr_stmt|;
name|X11
operator|->
name|desktopEnvironment
operator|=
name|DE_UNKNOWN
expr_stmt|;
name|X11
operator|->
name|desktopVersion
operator|=
literal|0
expr_stmt|;
name|Atom
name|type
decl_stmt|;
name|int
name|format
decl_stmt|;
name|unsigned
name|long
name|length
decl_stmt|,
name|after
decl_stmt|;
name|uchar
modifier|*
name|data
init|=
literal|0
decl_stmt|;
name|int
name|rc
decl_stmt|;
do|do
block|{
if|if
condition|(
operator|!
name|qgetenv
argument_list|(
literal|"KDE_FULL_SESSION"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|X11
operator|->
name|desktopEnvironment
operator|=
name|DE_KDE
expr_stmt|;
name|X11
operator|->
name|desktopVersion
operator|=
name|qgetenv
argument_list|(
literal|"KDE_SESSION_VERSION"
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|qgetenv
argument_list|(
literal|"DESKTOP_SESSION"
argument_list|)
operator|==
literal|"gnome"
condition|)
block|{
name|X11
operator|->
name|desktopEnvironment
operator|=
name|DE_GNOME
expr_stmt|;
break|break;
block|}
comment|// GNOME_DESKTOP_SESSION_ID is deprecated for some reason, but still check it
if|if
condition|(
operator|!
name|qgetenv
argument_list|(
literal|"GNOME_DESKTOP_SESSION_ID"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|X11
operator|->
name|desktopEnvironment
operator|=
name|DE_GNOME
expr_stmt|;
break|break;
block|}
name|rc
operator|=
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_DT_SAVE_MODE
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|False
argument_list|,
name|XA_STRING
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|length
argument_list|,
operator|&
name|after
argument_list|,
operator|&
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|==
name|Success
operator|&&
name|length
condition|)
block|{
if|if
condition|(
operator|!
name|strcmp
argument_list|(
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
argument_list|,
literal|"xfce4"
argument_list|)
condition|)
block|{
comment|// Pretend that xfce4 is gnome, as it uses the same libraries.
comment|// The detection above is stolen from xdg-open.
name|X11
operator|->
name|desktopEnvironment
operator|=
name|DE_GNOME
expr_stmt|;
break|break;
block|}
comment|// We got the property but it wasn't xfce4. Free data before it gets overwritten.
name|XFree
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|data
operator|=
literal|0
expr_stmt|;
block|}
name|rc
operator|=
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|DTWM_IS_RUNNING
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|False
argument_list|,
name|AnyPropertyType
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|length
argument_list|,
operator|&
name|after
argument_list|,
operator|&
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|==
name|Success
operator|&&
name|length
condition|)
block|{
comment|// DTWM is running, meaning most likely CDE is running...
name|X11
operator|->
name|desktopEnvironment
operator|=
name|DE_CDE
expr_stmt|;
break|break;
block|}
name|rc
operator|=
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_SGI_DESKS_MANAGER
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|False
argument_list|,
name|XA_WINDOW
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|length
argument_list|,
operator|&
name|after
argument_list|,
operator|&
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|==
name|Success
operator|&&
name|length
condition|)
block|{
name|X11
operator|->
name|desktopEnvironment
operator|=
name|DE_4DWM
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_SUPPORTING_WM_CHECK
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|,
name|False
argument_list|,
name|XA_WINDOW
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|length
argument_list|,
operator|&
name|after
argument_list|,
operator|&
name|data
argument_list|)
operator|==
name|Success
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|XA_WINDOW
operator|&&
name|format
operator|==
literal|32
condition|)
block|{
name|Window
name|windowManagerWindow
init|=
operator|*
operator|(
operator|(
name|Window
operator|*
operator|)
name|data
operator|)
decl_stmt|;
name|XFree
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|data
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|windowManagerWindow
operator|!=
name|XNone
condition|)
block|{
name|Atom
name|utf8atom
init|=
name|ATOM
argument_list|(
name|UTF8_STRING
argument_list|)
decl_stmt|;
if|if
condition|(
name|XGetWindowProperty
argument_list|(
name|QX11Info
operator|::
name|display
argument_list|()
argument_list|,
name|windowManagerWindow
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_NAME
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|,
name|False
argument_list|,
name|utf8atom
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|length
argument_list|,
operator|&
name|after
argument_list|,
operator|&
name|data
argument_list|)
operator|==
name|Success
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|utf8atom
operator|&&
name|format
operator|==
literal|8
condition|)
block|{
if|if
condition|(
name|qstrcmp
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|data
argument_list|,
literal|"MCompositor"
argument_list|)
operator|==
literal|0
condition|)
name|X11
operator|->
name|desktopEnvironment
operator|=
name|DE_MEEGO_COMPOSITOR
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
do|while
condition|(
literal|0
condition|)
do|;
if|if
condition|(
name|data
condition|)
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|data
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_GTK
argument_list|)
if|if
condition|(
name|X11
operator|->
name|desktopEnvironment
operator|==
name|DE_GNOME
condition|)
block|{
specifier|static
name|bool
name|menusHaveIcons
init|=
name|QGtkStyle
operator|::
name|getGConfBool
argument_list|(
name|QLatin1String
argument_list|(
literal|"/desktop/gnome/interface/menus_have_icons"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_DontShowIconsInMenus
argument_list|,
operator|!
name|menusHaveIcons
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|qt_set_input_encoding
argument_list|()
expr_stmt|;
name|qt_set_x11_resources
argument_list|(
name|appFont
argument_list|,
name|appFGCol
argument_list|,
name|appBGCol
argument_list|,
name|appBTNCol
argument_list|)
expr_stmt|;
comment|// be smart about the size of the default font. most X servers have helvetica
comment|// 12 point available at 2 resolutions:
comment|//     75dpi (12 pixels) and 100dpi (17 pixels).
comment|// At 95 DPI, a 12 point font should be 16 pixels tall - in which case a 17
comment|// pixel font is a closer match than a 12 pixel font
name|int
name|ptsz
init|=
operator|(
name|X11
operator|->
name|use_xrender
condition|?
literal|9
else|:
call|(
name|int
call|)
argument_list|(
operator|(
operator|(
name|QX11Info
operator|::
name|appDpiY
argument_list|()
operator|>=
literal|95
condition|?
literal|17.
else|:
literal|12.
operator|)
operator|*
literal|72.
operator|/
operator|(
name|float
operator|)
name|QX11Info
operator|::
name|appDpiY
argument_list|()
operator|)
operator|+
literal|0.5
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|QApplicationPrivate
operator|::
name|sys_font
condition|)
block|{
comment|// no font from settings or RESOURCE_MANAGER, provide a fallback
name|QFont
name|f
argument_list|(
name|X11
operator|->
name|has_fontconfig
condition|?
name|QLatin1String
argument_list|(
literal|"Sans Serif"
argument_list|)
else|:
name|QLatin1String
argument_list|(
literal|"Helvetica"
argument_list|)
argument_list|,
name|ptsz
argument_list|)
decl_stmt|;
name|QApplicationPrivate
operator|::
name|setSystemFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_TABLET
argument_list|)
if|if
condition|(
name|X11
operator|->
name|use_xinput
condition|)
block|{
name|int
name|ndev
decl_stmt|,
name|i
decl_stmt|,
name|j
decl_stmt|;
name|bool
name|gotStylus
decl_stmt|,
name|gotEraser
decl_stmt|;
name|XDeviceInfo
modifier|*
name|devices
init|=
literal|0
decl_stmt|,
modifier|*
name|devs
decl_stmt|;
name|XInputClassInfo
modifier|*
name|ip
decl_stmt|;
name|XAnyClassPtr
name|any
decl_stmt|;
name|XValuatorInfoPtr
name|v
decl_stmt|;
name|XAxisInfoPtr
name|a
decl_stmt|;
name|XDevice
modifier|*
name|dev
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|X11
operator|->
name|ptrXListInputDevices
condition|)
block|{
name|devices
operator|=
name|X11
operator|->
name|ptrXListInputDevices
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|ndev
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|devices
condition|)
name|qWarning
argument_list|(
literal|"QApplication: Failed to get list of tablet devices"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|devices
condition|)
name|ndev
operator|=
operator|-
literal|1
expr_stmt|;
name|QTabletEvent
operator|::
name|TabletDevice
name|deviceType
decl_stmt|;
for|for
control|(
name|devs
operator|=
name|devices
operator|,
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|ndev
operator|&&
name|devs
condition|;
name|i
operator|++
operator|,
name|devs
operator|++
control|)
block|{
name|dev
operator|=
literal|0
expr_stmt|;
name|deviceType
operator|=
name|QTabletEvent
operator|::
name|NoDevice
expr_stmt|;
name|gotStylus
operator|=
literal|false
expr_stmt|;
name|gotEraser
operator|=
literal|false
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_IRIX
argument_list|)
name|QString
name|devName
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|devs
operator|->
name|name
argument_list|)
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|devName
operator|==
name|QLatin1String
argument_list|(
name|WACOM_NAME
argument_list|)
condition|)
block|{
name|deviceType
operator|=
name|QTabletEvent
operator|::
name|Stylus
expr_stmt|;
name|gotStylus
operator|=
literal|true
expr_stmt|;
block|}
else|#
directive|else
if|if
condition|(
name|devs
operator|->
name|type
operator|==
name|ATOM
argument_list|(
name|XWacomStylus
argument_list|)
operator|||
name|devs
operator|->
name|type
operator|==
name|ATOM
argument_list|(
name|XTabletStylus
argument_list|)
condition|)
block|{
name|deviceType
operator|=
name|QTabletEvent
operator|::
name|Stylus
expr_stmt|;
if|if
condition|(
name|wacomDeviceName
argument_list|()
operator|->
name|isEmpty
argument_list|()
condition|)
name|wacomDeviceName
argument_list|()
operator|->
name|append
argument_list|(
name|devs
operator|->
name|name
argument_list|)
expr_stmt|;
name|gotStylus
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|devs
operator|->
name|type
operator|==
name|ATOM
argument_list|(
name|XWacomEraser
argument_list|)
operator|||
name|devs
operator|->
name|type
operator|==
name|ATOM
argument_list|(
name|XTabletEraser
argument_list|)
condition|)
block|{
name|deviceType
operator|=
name|QTabletEvent
operator|::
name|XFreeEraser
expr_stmt|;
name|gotEraser
operator|=
literal|true
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|deviceType
operator|==
name|QTabletEvent
operator|::
name|NoDevice
condition|)
continue|continue;
if|if
condition|(
name|gotStylus
operator|||
name|gotEraser
condition|)
block|{
if|if
condition|(
name|X11
operator|->
name|ptrXOpenDevice
condition|)
name|dev
operator|=
name|X11
operator|->
name|ptrXOpenDevice
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|devs
operator|->
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dev
condition|)
continue|continue;
name|QTabletDeviceData
name|device_data
decl_stmt|;
name|device_data
operator|.
name|deviceType
operator|=
name|deviceType
expr_stmt|;
name|device_data
operator|.
name|eventCount
operator|=
literal|0
expr_stmt|;
name|device_data
operator|.
name|device
operator|=
name|dev
expr_stmt|;
name|device_data
operator|.
name|xinput_motion
operator|=
operator|-
literal|1
expr_stmt|;
name|device_data
operator|.
name|xinput_key_press
operator|=
operator|-
literal|1
expr_stmt|;
name|device_data
operator|.
name|xinput_key_release
operator|=
operator|-
literal|1
expr_stmt|;
name|device_data
operator|.
name|xinput_button_press
operator|=
operator|-
literal|1
expr_stmt|;
name|device_data
operator|.
name|xinput_button_release
operator|=
operator|-
literal|1
expr_stmt|;
name|device_data
operator|.
name|xinput_proximity_in
operator|=
operator|-
literal|1
expr_stmt|;
name|device_data
operator|.
name|xinput_proximity_out
operator|=
operator|-
literal|1
expr_stmt|;
name|device_data
operator|.
name|widgetToGetPress
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|num_classes
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ip
operator|=
name|dev
operator|->
name|classes
operator|,
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|dev
operator|->
name|num_classes
condition|;
name|ip
operator|++
operator|,
name|j
operator|++
control|)
block|{
switch|switch
condition|(
name|ip
operator|->
name|input_class
condition|)
block|{
case|case
name|KeyClass
case|:
name|DeviceKeyPress
argument_list|(
name|dev
argument_list|,
name|device_data
operator|.
name|xinput_key_press
argument_list|,
name|device_data
operator|.
name|eventList
index|[
name|device_data
operator|.
name|eventCount
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|device_data
operator|.
name|eventList
index|[
name|device_data
operator|.
name|eventCount
index|]
condition|)
operator|++
name|device_data
operator|.
name|eventCount
expr_stmt|;
name|DeviceKeyRelease
argument_list|(
name|dev
argument_list|,
name|device_data
operator|.
name|xinput_key_release
argument_list|,
name|device_data
operator|.
name|eventList
index|[
name|device_data
operator|.
name|eventCount
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|device_data
operator|.
name|eventList
index|[
name|device_data
operator|.
name|eventCount
index|]
condition|)
operator|++
name|device_data
operator|.
name|eventCount
expr_stmt|;
break|break;
case|case
name|ButtonClass
case|:
name|DeviceButtonPress
argument_list|(
name|dev
argument_list|,
name|device_data
operator|.
name|xinput_button_press
argument_list|,
name|device_data
operator|.
name|eventList
index|[
name|device_data
operator|.
name|eventCount
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|device_data
operator|.
name|eventList
index|[
name|device_data
operator|.
name|eventCount
index|]
condition|)
operator|++
name|device_data
operator|.
name|eventCount
expr_stmt|;
name|DeviceButtonRelease
argument_list|(
name|dev
argument_list|,
name|device_data
operator|.
name|xinput_button_release
argument_list|,
name|device_data
operator|.
name|eventList
index|[
name|device_data
operator|.
name|eventCount
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|device_data
operator|.
name|eventList
index|[
name|device_data
operator|.
name|eventCount
index|]
condition|)
operator|++
name|device_data
operator|.
name|eventCount
expr_stmt|;
break|break;
case|case
name|ValuatorClass
case|:
comment|// I'm only going to be interested in motion when the
comment|// stylus is already down anyway!
name|DeviceMotionNotify
argument_list|(
name|dev
argument_list|,
name|device_data
operator|.
name|xinput_motion
argument_list|,
name|device_data
operator|.
name|eventList
index|[
name|device_data
operator|.
name|eventCount
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|device_data
operator|.
name|eventList
index|[
name|device_data
operator|.
name|eventCount
index|]
condition|)
operator|++
name|device_data
operator|.
name|eventCount
expr_stmt|;
name|ProximityIn
argument_list|(
name|dev
argument_list|,
name|device_data
operator|.
name|xinput_proximity_in
argument_list|,
name|device_data
operator|.
name|eventList
index|[
name|device_data
operator|.
name|eventCount
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|device_data
operator|.
name|eventList
index|[
name|device_data
operator|.
name|eventCount
index|]
condition|)
operator|++
name|device_data
operator|.
name|eventCount
expr_stmt|;
name|ProximityOut
argument_list|(
name|dev
argument_list|,
name|device_data
operator|.
name|xinput_proximity_out
argument_list|,
name|device_data
operator|.
name|eventList
index|[
name|device_data
operator|.
name|eventCount
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|device_data
operator|.
name|eventList
index|[
name|device_data
operator|.
name|eventCount
index|]
condition|)
operator|++
name|device_data
operator|.
name|eventCount
expr_stmt|;
default|default:
break|break;
block|}
block|}
block|}
comment|// get the min/max value for pressure!
name|any
operator|=
call|(
name|XAnyClassPtr
call|)
argument_list|(
name|devs
operator|->
name|inputclassinfo
argument_list|)
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|devs
operator|->
name|num_classes
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|any
operator|->
name|c_class
operator|==
name|ValuatorClass
condition|)
block|{
name|v
operator|=
operator|(
name|XValuatorInfoPtr
operator|)
name|any
expr_stmt|;
name|a
operator|=
call|(
name|XAxisInfoPtr
call|)
argument_list|(
operator|(
name|char
operator|*
operator|)
name|v
operator|+
sizeof|sizeof
argument_list|(
name|XValuatorInfo
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_IRIX
argument_list|)
comment|// I'm not exaclty wild about this, but the
comment|// dimensions of the tablet are more relevant here
comment|// than the min and max values from the axis
comment|// (actually it seems to be 2/3 or what is in the
comment|// axis.  So we'll try to parse it from this
comment|// string. --tws
name|char
name|returnString
index|[
name|SGIDeviceRtrnLen
index|]
decl_stmt|;
name|int
name|tmp
decl_stmt|;
if|if
condition|(
name|XSGIMiscQueryExtension
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|tmp
argument_list|,
operator|&
name|tmp
argument_list|)
operator|&&
name|XSGIDeviceQuery
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|devs
operator|->
name|id
argument_list|,
literal|"dimensions"
argument_list|,
name|returnString
argument_list|)
condition|)
block|{
name|QString
name|str
init|=
name|QLatin1String
argument_list|(
name|returnString
argument_list|)
decl_stmt|;
name|int
name|comma
init|=
name|str
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
name|device_data
operator|.
name|minX
operator|=
literal|0
expr_stmt|;
name|device_data
operator|.
name|minY
operator|=
literal|0
expr_stmt|;
name|device_data
operator|.
name|maxX
operator|=
name|str
operator|.
name|left
argument_list|(
name|comma
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|device_data
operator|.
name|maxY
operator|=
name|str
operator|.
name|mid
argument_list|(
name|comma
operator|+
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|device_data
operator|.
name|minX
operator|=
name|a
index|[
name|WAC_XCOORD_I
index|]
operator|.
name|min_value
expr_stmt|;
name|device_data
operator|.
name|maxX
operator|=
name|a
index|[
name|WAC_XCOORD_I
index|]
operator|.
name|max_value
expr_stmt|;
name|device_data
operator|.
name|minY
operator|=
name|a
index|[
name|WAC_YCOORD_I
index|]
operator|.
name|min_value
expr_stmt|;
name|device_data
operator|.
name|maxY
operator|=
name|a
index|[
name|WAC_YCOORD_I
index|]
operator|.
name|max_value
expr_stmt|;
block|}
name|device_data
operator|.
name|minPressure
operator|=
name|a
index|[
name|WAC_PRESSURE_I
index|]
operator|.
name|min_value
expr_stmt|;
name|device_data
operator|.
name|maxPressure
operator|=
name|a
index|[
name|WAC_PRESSURE_I
index|]
operator|.
name|max_value
expr_stmt|;
name|device_data
operator|.
name|minTanPressure
operator|=
name|a
index|[
name|WAC_TAN_PRESSURE_I
index|]
operator|.
name|min_value
expr_stmt|;
name|device_data
operator|.
name|maxTanPressure
operator|=
name|a
index|[
name|WAC_TAN_PRESSURE_I
index|]
operator|.
name|max_value
expr_stmt|;
name|device_data
operator|.
name|minZ
operator|=
name|a
index|[
name|WAC_ZCOORD_I
index|]
operator|.
name|min_value
expr_stmt|;
name|device_data
operator|.
name|maxZ
operator|=
name|a
index|[
name|WAC_ZCOORD_I
index|]
operator|.
name|max_value
expr_stmt|;
else|#
directive|else
name|device_data
operator|.
name|minX
operator|=
name|a
index|[
literal|0
index|]
operator|.
name|min_value
expr_stmt|;
name|device_data
operator|.
name|maxX
operator|=
name|a
index|[
literal|0
index|]
operator|.
name|max_value
expr_stmt|;
name|device_data
operator|.
name|minY
operator|=
name|a
index|[
literal|1
index|]
operator|.
name|min_value
expr_stmt|;
name|device_data
operator|.
name|maxY
operator|=
name|a
index|[
literal|1
index|]
operator|.
name|max_value
expr_stmt|;
name|device_data
operator|.
name|minPressure
operator|=
name|a
index|[
literal|2
index|]
operator|.
name|min_value
expr_stmt|;
name|device_data
operator|.
name|maxPressure
operator|=
name|a
index|[
literal|2
index|]
operator|.
name|max_value
expr_stmt|;
name|device_data
operator|.
name|minTanPressure
operator|=
literal|0
expr_stmt|;
name|device_data
operator|.
name|maxTanPressure
operator|=
literal|0
expr_stmt|;
name|device_data
operator|.
name|minZ
operator|=
literal|0
expr_stmt|;
name|device_data
operator|.
name|maxZ
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
comment|// got the max pressure no need to go further...
break|break;
block|}
name|any
operator|=
call|(
name|XAnyClassPtr
call|)
argument_list|(
operator|(
name|char
operator|*
operator|)
name|any
operator|+
name|any
operator|->
name|length
argument_list|)
expr_stmt|;
block|}
comment|// end of for loop
name|tablet_devices
argument_list|()
operator|->
name|append
argument_list|(
name|device_data
argument_list|)
expr_stmt|;
block|}
comment|// if (gotStylus || gotEraser)
block|}
if|if
condition|(
name|X11
operator|->
name|ptrXFreeDeviceList
condition|)
name|X11
operator|->
name|ptrXFreeDeviceList
argument_list|(
name|devices
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_TABLET
name|X11
operator|->
name|startupId
operator|=
name|getenv
argument_list|(
literal|"DESKTOP_STARTUP_ID"
argument_list|)
expr_stmt|;
if|if
condition|(
name|X11
operator|->
name|startupId
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_UNSETENV
name|unsetenv
argument_list|(
literal|"DESKTOP_STARTUP_ID"
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// it's a small memory leak, however we won't crash if Qt is
comment|// unloaded and someones tries to use the envoriment.
name|putenv
argument_list|(
name|strdup
argument_list|(
literal|"DESKTOP_STARTUP_ID="
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
else|else
block|{
comment|// read some non-GUI settings when not using the X server...
if|if
condition|(
name|QApplication
operator|::
name|desktopSettingsAware
argument_list|()
condition|)
block|{
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
name|QLatin1String
argument_list|(
literal|"Trolltech"
argument_list|)
argument_list|)
decl_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
name|QLatin1String
argument_list|(
literal|"Qt"
argument_list|)
argument_list|)
expr_stmt|;
comment|// read library (ie. plugin) path list
name|QString
name|libpathkey
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1.%2/libraryPath"
argument_list|)
operator|.
name|arg
argument_list|(
name|QT_VERSION
operator|>>
literal|16
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|QT_VERSION
operator|&
literal|0xff00
operator|)
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|QStringList
name|pathlist
init|=
name|settings
operator|.
name|value
argument_list|(
name|libpathkey
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pathlist
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|pathlist
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|pathlist
operator|.
name|constEnd
argument_list|()
condition|)
name|QApplication
operator|::
name|addLibraryPath
argument_list|(
operator|*
name|it
operator|++
argument_list|)
expr_stmt|;
block|}
name|QString
name|defaultcodec
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"defaultCodec"
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|QLatin1String
argument_list|(
literal|"none"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultcodec
operator|!=
name|QLatin1String
argument_list|(
literal|"none"
argument_list|)
condition|)
block|{
name|QTextCodec
modifier|*
name|codec
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
name|defaultcodec
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|codec
condition|)
name|QTextCodec
operator|::
name|setCodecForTr
argument_list|(
name|codec
argument_list|)
expr_stmt|;
block|}
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
comment|// Qt
block|}
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_IRIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_TABLET
argument_list|)
name|QLibrary
name|wacom
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"wacomcfg"
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// version 0 is the latest release at time of writing this.
comment|// NOTE: C casts instead of reinterpret_cast for GCC 3.3.x
name|ptrWacomConfigInit
operator|=
operator|(
name|PtrWacomConfigInit
operator|)
name|wacom
operator|.
name|resolve
argument_list|(
literal|"WacomConfigInit"
argument_list|)
expr_stmt|;
name|ptrWacomConfigOpenDevice
operator|=
operator|(
name|PtrWacomConfigOpenDevice
operator|)
name|wacom
operator|.
name|resolve
argument_list|(
literal|"WacomConfigOpenDevice"
argument_list|)
expr_stmt|;
name|ptrWacomConfigGetRawParam
operator|=
operator|(
name|PtrWacomConfigGetRawParam
operator|)
name|wacom
operator|.
name|resolve
argument_list|(
literal|"WacomConfigGetRawParam"
argument_list|)
expr_stmt|;
name|ptrWacomConfigCloseDevice
operator|=
operator|(
name|PtrWacomConfigCloseDevice
operator|)
name|wacom
operator|.
name|resolve
argument_list|(
literal|"WacomConfigCloseDevice"
argument_list|)
expr_stmt|;
name|ptrWacomConfigTerm
operator|=
operator|(
name|PtrWacomConfigTerm
operator|)
name|wacom
operator|.
name|resolve
argument_list|(
literal|"WacomConfigTerm"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ptrWacomConfigInit
operator|==
literal|0
operator|||
name|ptrWacomConfigOpenDevice
operator|==
literal|0
operator|||
name|ptrWacomConfigGetRawParam
operator|==
literal|0
operator|||
name|ptrWacomConfigCloseDevice
operator|==
literal|0
operator|||
name|ptrWacomConfigTerm
operator|==
literal|0
condition|)
block|{
comment|// either we have all, or we have none.
name|ptrWacomConfigInit
operator|=
literal|0
expr_stmt|;
name|ptrWacomConfigOpenDevice
operator|=
literal|0
expr_stmt|;
name|ptrWacomConfigGetRawParam
operator|=
literal|0
expr_stmt|;
name|ptrWacomConfigCloseDevice
operator|=
literal|0
expr_stmt|;
name|ptrWacomConfigTerm
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|initializeWidgetPaletteHash
name|void
name|QApplicationPrivate
operator|::
name|initializeWidgetPaletteHash
parameter_list|()
block|{ }
end_function
begin_comment
comment|/*****************************************************************************   qt_cleanup() - cleans up when the application is finished  *****************************************************************************/
end_comment
begin_function
DECL|function|qt_cleanup
name|void
name|qt_cleanup
parameter_list|()
block|{
if|if
condition|(
name|app_save_rootinfo
condition|)
comment|// root window must keep state
name|qt_save_rootinfo
argument_list|()
expr_stmt|;
if|if
condition|(
name|qt_is_gui_used
condition|)
block|{
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
name|QCursorData
operator|::
name|cleanup
argument_list|()
expr_stmt|;
name|QFont
operator|::
name|cleanup
argument_list|()
expr_stmt|;
name|QColormap
operator|::
name|cleanup
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_TABLET
argument_list|)
name|QTabletDeviceDataList
modifier|*
name|devices
init|=
name|qt_tablet_devices
argument_list|()
decl_stmt|;
if|if
condition|(
name|X11
operator|->
name|ptrXCloseDevice
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|devices
operator|->
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|X11
operator|->
name|ptrXCloseDevice
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|(
name|XDevice
operator|*
operator|)
name|devices
operator|->
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|device
argument_list|)
expr_stmt|;
name|devices
operator|->
name|clear
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|X11
operator|->
name|solid_fill_count
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|X11
operator|->
name|solid_fills
index|[
name|i
index|]
operator|.
name|picture
condition|)
name|XRenderFreePicture
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|X11
operator|->
name|solid_fills
index|[
name|i
index|]
operator|.
name|picture
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|X11
operator|->
name|pattern_fill_count
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|picture
condition|)
name|XRenderFreePicture
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|picture
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_IM
argument_list|)
operator|delete
name|QApplicationPrivate
operator|::
name|inputContext
expr_stmt|;
name|QApplicationPrivate
operator|::
name|inputContext
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
comment|// Reset the error handlers
if|if
condition|(
name|qt_is_gui_used
condition|)
name|XSync
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|False
argument_list|)
expr_stmt|;
comment|// sync first to process all possible errors
name|XSetErrorHandler
argument_list|(
name|original_x_errhandler
argument_list|)
expr_stmt|;
name|XSetIOErrorHandler
argument_list|(
name|original_xio_errhandler
argument_list|)
expr_stmt|;
if|if
condition|(
name|X11
operator|->
name|argbColormaps
condition|)
block|{
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|X11
operator|->
name|screenCount
condition|;
name|s
operator|++
control|)
block|{
if|if
condition|(
name|X11
operator|->
name|argbColormaps
index|[
name|s
index|]
condition|)
name|XFreeColormap
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|X11
operator|->
name|argbColormaps
index|[
name|s
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|qt_is_gui_used
operator|&&
operator|!
name|X11
operator|->
name|foreignDisplay
condition|)
name|XCloseDisplay
argument_list|(
name|X11
operator|->
name|display
argument_list|)
expr_stmt|;
comment|// close X display
name|X11
operator|->
name|display
operator|=
literal|0
expr_stmt|;
operator|delete
index|[]
name|X11
operator|->
name|screens
expr_stmt|;
operator|delete
index|[]
name|X11
operator|->
name|argbVisuals
expr_stmt|;
operator|delete
index|[]
name|X11
operator|->
name|argbColormaps
expr_stmt|;
if|if
condition|(
name|X11
operator|->
name|foreignDisplay
condition|)
block|{
operator|delete
index|[]
operator|(
name|char
operator|*
operator|)
name|appName
expr_stmt|;
name|appName
operator|=
literal|0
expr_stmt|;
block|}
operator|delete
index|[]
operator|(
name|char
operator|*
operator|)
name|appClass
expr_stmt|;
name|appClass
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|X11
operator|->
name|net_supported_list
condition|)
operator|delete
index|[]
name|X11
operator|->
name|net_supported_list
expr_stmt|;
name|X11
operator|->
name|net_supported_list
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|X11
operator|->
name|net_virtual_root_list
condition|)
operator|delete
index|[]
name|X11
operator|->
name|net_virtual_root_list
expr_stmt|;
name|X11
operator|->
name|net_virtual_root_list
operator|=
literal|0
expr_stmt|;
operator|delete
name|X11
expr_stmt|;
name|X11
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   Platform specific global and internal functions  *****************************************************************************/
end_comment
begin_function
DECL|function|qt_save_rootinfo
name|void
name|qt_save_rootinfo
parameter_list|()
comment|// save new root info
block|{
name|Atom
name|type
decl_stmt|;
name|int
name|format
decl_stmt|;
name|unsigned
name|long
name|length
decl_stmt|,
name|after
decl_stmt|;
name|uchar
modifier|*
name|data
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ATOM
argument_list|(
name|_XSETROOT_ID
argument_list|)
condition|)
block|{
comment|// kill old pixmap
if|if
condition|(
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_XSETROOT_ID
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|True
argument_list|,
name|AnyPropertyType
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|length
argument_list|,
operator|&
name|after
argument_list|,
operator|&
name|data
argument_list|)
operator|==
name|Success
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|XA_PIXMAP
operator|&&
name|format
operator|==
literal|32
operator|&&
name|length
operator|==
literal|1
operator|&&
name|after
operator|==
literal|0
operator|&&
name|data
condition|)
block|{
name|XKillClient
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|*
operator|(
operator|(
name|Pixmap
operator|*
operator|)
name|data
operator|)
argument_list|)
expr_stmt|;
block|}
name|Pixmap
name|dummy
init|=
name|XCreatePixmap
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_XSETROOT_ID
argument_list|)
argument_list|,
name|XA_PIXMAP
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|uchar
operator|*
operator|)
operator|&
name|dummy
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|XSetCloseDownMode
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|RetainPermanent
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|data
condition|)
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_updated_rootinfo
name|void
name|qt_updated_rootinfo
parameter_list|()
block|{
name|app_save_rootinfo
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_comment
comment|// ### Cleanup, this function is not in use!
end_comment
begin_function
DECL|function|qt_wstate_iconified
name|bool
name|qt_wstate_iconified
parameter_list|(
name|WId
name|winid
parameter_list|)
block|{
name|Atom
name|type
decl_stmt|;
name|int
name|format
decl_stmt|;
name|unsigned
name|long
name|length
decl_stmt|,
name|after
decl_stmt|;
name|uchar
modifier|*
name|data
init|=
literal|0
decl_stmt|;
name|int
name|r
init|=
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|winid
argument_list|,
name|ATOM
argument_list|(
name|WM_STATE
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|False
argument_list|,
name|AnyPropertyType
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|length
argument_list|,
operator|&
name|after
argument_list|,
operator|&
name|data
argument_list|)
decl_stmt|;
name|bool
name|iconic
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|Success
operator|&&
name|data
operator|&&
name|format
operator|==
literal|32
condition|)
block|{
comment|// quint32 *wstate = (quint32*)data;
name|unsigned
name|long
modifier|*
name|wstate
init|=
operator|(
name|unsigned
name|long
operator|*
operator|)
name|data
decl_stmt|;
name|iconic
operator|=
operator|(
operator|*
name|wstate
operator|==
name|IconicState
operator|)
expr_stmt|;
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|iconic
return|;
block|}
end_function
begin_function
DECL|function|appName
name|QString
name|QApplicationPrivate
operator|::
name|appName
parameter_list|()
specifier|const
block|{
return|return
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|QT_PREPEND_NAMESPACE
argument_list|(
name|appName
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|appClass
specifier|const
name|char
modifier|*
name|QX11Info
operator|::
name|appClass
parameter_list|()
comment|// get application class
block|{
return|return
name|QT_PREPEND_NAMESPACE
argument_list|(
name|appClass
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_nograb
name|bool
name|qt_nograb
parameter_list|()
comment|// application no-grab option
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_DEBUG
argument_list|)
return|return
name|appNoGrab
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*****************************************************************************   Platform specific QApplication members  *****************************************************************************/
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_function
DECL|function|setMainWidget
name|void
name|QApplication
operator|::
name|setMainWidget
parameter_list|(
name|QWidget
modifier|*
name|mainWidget
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
if|if
condition|(
name|mainWidget
operator|&&
name|mainWidget
operator|->
name|parentWidget
argument_list|()
operator|&&
name|mainWidget
operator|->
name|isWindow
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"QApplication::setMainWidget: New main widget (%s/%s) "
literal|"has a parent"
argument_list|,
name|mainWidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|,
name|mainWidget
operator|->
name|objectName
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|mainWidget
condition|)
name|mainWidget
operator|->
name|d_func
argument_list|()
operator|->
name|createWinId
argument_list|()
expr_stmt|;
name|QApplicationPrivate
operator|::
name|main_widget
operator|=
name|mainWidget
expr_stmt|;
if|if
condition|(
name|QApplicationPrivate
operator|::
name|main_widget
condition|)
comment|// give WM command line
name|QApplicationPrivate
operator|::
name|applyX11SpecificCommandLineArguments
argument_list|(
name|QApplicationPrivate
operator|::
name|main_widget
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|applyX11SpecificCommandLineArguments
name|void
name|QApplicationPrivate
operator|::
name|applyX11SpecificCommandLineArguments
parameter_list|(
name|QWidget
modifier|*
name|main_widget
parameter_list|)
block|{
specifier|static
name|bool
name|beenHereDoneThat
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|beenHereDoneThat
condition|)
return|return;
name|beenHereDoneThat
operator|=
literal|true
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|main_widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mwTitle
condition|)
block|{
name|XStoreName
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|main_widget
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
operator|(
name|char
operator|*
operator|)
name|mwTitle
argument_list|)
expr_stmt|;
name|QByteArray
name|net_wm_name
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|mwTitle
argument_list|)
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|main_widget
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_NAME
argument_list|)
argument_list|,
name|ATOM
argument_list|(
name|UTF8_STRING
argument_list|)
argument_list|,
literal|8
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|net_wm_name
operator|.
name|data
argument_list|()
argument_list|,
name|net_wm_name
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mwGeometry
condition|)
block|{
comment|// parse geometry
name|int
name|x
decl_stmt|,
name|y
decl_stmt|;
name|int
name|w
decl_stmt|,
name|h
decl_stmt|;
name|int
name|m
init|=
name|XParseGeometry
argument_list|(
operator|(
name|char
operator|*
operator|)
name|mwGeometry
argument_list|,
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|,
operator|(
name|uint
operator|*
operator|)
operator|&
name|w
argument_list|,
operator|(
name|uint
operator|*
operator|)
operator|&
name|h
argument_list|)
decl_stmt|;
name|QSize
name|minSize
init|=
name|main_widget
operator|->
name|minimumSize
argument_list|()
decl_stmt|;
name|QSize
name|maxSize
init|=
name|main_widget
operator|->
name|maximumSize
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|m
operator|&
name|XValue
operator|)
operator|==
literal|0
condition|)
name|x
operator|=
name|main_widget
operator|->
name|geometry
argument_list|()
operator|.
name|x
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|m
operator|&
name|YValue
operator|)
operator|==
literal|0
condition|)
name|y
operator|=
name|main_widget
operator|->
name|geometry
argument_list|()
operator|.
name|y
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|m
operator|&
name|WidthValue
operator|)
operator|==
literal|0
condition|)
name|w
operator|=
name|main_widget
operator|->
name|width
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|m
operator|&
name|HeightValue
operator|)
operator|==
literal|0
condition|)
name|h
operator|=
name|main_widget
operator|->
name|height
argument_list|()
expr_stmt|;
name|w
operator|=
name|qMin
argument_list|(
name|w
argument_list|,
name|maxSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMin
argument_list|(
name|h
argument_list|,
name|maxSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|minSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMax
argument_list|(
name|h
argument_list|,
name|minSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|m
operator|&
name|XNegative
operator|)
condition|)
block|{
name|x
operator|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|width
argument_list|()
operator|+
name|x
operator|-
name|w
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|m
operator|&
name|YNegative
operator|)
condition|)
block|{
name|y
operator|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|height
argument_list|()
operator|+
name|y
operator|-
name|h
expr_stmt|;
block|}
name|main_widget
operator|->
name|setGeometry
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_comment
comment|/*****************************************************************************   QApplication cursor stack  *****************************************************************************/
end_comment
begin_function
DECL|function|setOverrideCursor
name|void
name|QApplication
operator|::
name|setOverrideCursor
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|)
block|{
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|cursor_list
operator|.
name|prepend
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QWidgetList
name|all
init|=
name|allWidgets
argument_list|()
decl_stmt|;
for|for
control|(
name|QWidgetList
operator|::
name|ConstIterator
name|it
init|=
name|all
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|all
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
specifier|register
name|QWidget
modifier|*
name|w
init|=
operator|*
name|it
decl_stmt|;
if|if
condition|(
operator|(
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetCursor
argument_list|)
operator|||
name|w
operator|->
name|isWindow
argument_list|()
operator|)
operator|&&
operator|(
name|w
operator|->
name|windowType
argument_list|()
operator|!=
name|Qt
operator|::
name|Desktop
operator|)
condition|)
name|qt_x11_enforce_cursor
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
name|XFlush
argument_list|(
name|X11
operator|->
name|display
argument_list|)
expr_stmt|;
comment|// make X execute it NOW
block|}
end_function
begin_function
DECL|function|restoreOverrideCursor
name|void
name|QApplication
operator|::
name|restoreOverrideCursor
parameter_list|()
block|{
if|if
condition|(
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|cursor_list
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|cursor_list
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
if|if
condition|(
name|QWidgetPrivate
operator|::
name|mapper
operator|!=
literal|0
operator|&&
operator|!
name|closingDown
argument_list|()
condition|)
block|{
name|QWidgetList
name|all
init|=
name|allWidgets
argument_list|()
decl_stmt|;
for|for
control|(
name|QWidgetList
operator|::
name|ConstIterator
name|it
init|=
name|all
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|all
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
specifier|register
name|QWidget
modifier|*
name|w
init|=
operator|*
name|it
decl_stmt|;
if|if
condition|(
operator|(
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetCursor
argument_list|)
operator|||
name|w
operator|->
name|isWindow
argument_list|()
operator|)
operator|&&
operator|(
name|w
operator|->
name|windowType
argument_list|()
operator|!=
name|Qt
operator|::
name|Desktop
operator|)
condition|)
name|qt_x11_enforce_cursor
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
name|XFlush
argument_list|(
name|X11
operator|->
name|display
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*****************************************************************************   Routines to find a Qt widget from a screen position  *****************************************************************************/
end_comment
begin_function
DECL|function|findClientWindow
name|Window
name|QX11Data
operator|::
name|findClientWindow
parameter_list|(
name|Window
name|win
parameter_list|,
name|Atom
name|property
parameter_list|,
name|bool
name|leaf
parameter_list|)
block|{
name|Atom
name|type
init|=
name|XNone
decl_stmt|;
name|int
name|format
decl_stmt|,
name|i
decl_stmt|;
name|ulong
name|nitems
decl_stmt|,
name|after
decl_stmt|;
name|uchar
modifier|*
name|data
init|=
literal|0
decl_stmt|;
name|Window
name|root
decl_stmt|,
name|parent
decl_stmt|,
name|target
init|=
literal|0
decl_stmt|,
modifier|*
name|children
init|=
literal|0
decl_stmt|;
name|uint
name|nchildren
decl_stmt|;
if|if
condition|(
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|win
argument_list|,
name|property
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|AnyPropertyType
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|nitems
argument_list|,
operator|&
name|after
argument_list|,
operator|&
name|data
argument_list|)
operator|==
name|Success
condition|)
block|{
if|if
condition|(
name|data
condition|)
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
condition|)
return|return
name|win
return|;
block|}
if|if
condition|(
operator|!
name|XQueryTree
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|win
argument_list|,
operator|&
name|root
argument_list|,
operator|&
name|parent
argument_list|,
operator|&
name|children
argument_list|,
operator|&
name|nchildren
argument_list|)
condition|)
block|{
if|if
condition|(
name|children
condition|)
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|children
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
for|for
control|(
name|i
operator|=
name|nchildren
operator|-
literal|1
init|;
operator|!
name|target
operator|&&
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
name|target
operator|=
name|X11
operator|->
name|findClientWindow
argument_list|(
name|children
index|[
name|i
index|]
argument_list|,
name|property
argument_list|,
name|leaf
argument_list|)
expr_stmt|;
if|if
condition|(
name|children
condition|)
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|children
argument_list|)
expr_stmt|;
return|return
name|target
return|;
block|}
end_function
begin_function
DECL|function|topLevelAt
name|QWidget
modifier|*
name|QApplication
operator|::
name|topLevelAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_CURSOR
name|Q_UNUSED
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
else|#
directive|else
name|int
name|screen
init|=
name|QCursor
operator|::
name|x11Screen
argument_list|()
decl_stmt|;
name|int
name|unused
decl_stmt|;
name|int
name|x
init|=
name|p
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|p
operator|.
name|y
argument_list|()
decl_stmt|;
name|Window
name|target
decl_stmt|;
if|if
condition|(
operator|!
name|XTranslateCoordinates
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|(
name|screen
argument_list|)
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|(
name|screen
argument_list|)
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
operator|&
name|unused
argument_list|,
operator|&
name|unused
argument_list|,
operator|&
name|target
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
operator|!
name|target
operator|||
name|target
operator|==
name|QX11Info
operator|::
name|appRootWindow
argument_list|(
name|screen
argument_list|)
condition|)
return|return
literal|0
return|;
name|QWidget
modifier|*
name|w
decl_stmt|;
name|w
operator|=
name|QWidget
operator|::
name|find
argument_list|(
operator|(
name|WId
operator|)
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
block|{
name|X11
operator|->
name|ignoreBadwindow
argument_list|()
expr_stmt|;
name|target
operator|=
name|X11
operator|->
name|findClientWindow
argument_list|(
name|target
argument_list|,
name|ATOM
argument_list|(
name|WM_STATE
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|X11
operator|->
name|badwindow
argument_list|()
condition|)
return|return
literal|0
return|;
name|w
operator|=
name|QWidget
operator|::
name|find
argument_list|(
operator|(
name|WId
operator|)
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
block|{
comment|// Perhaps the widget at (x,y) is inside a foreign application?
comment|// Search all toplevel widgets to see if one is within target
name|QWidgetList
name|list
init|=
name|QApplication
operator|::
name|topLevelWidgets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|widget
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Window
name|ctarget
init|=
name|target
decl_stmt|;
if|if
condition|(
name|widget
operator|->
name|isVisible
argument_list|()
operator|&&
operator|!
operator|(
name|widget
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|Window
name|wid
init|=
name|widget
operator|->
name|internalWinId
argument_list|()
decl_stmt|;
while|while
condition|(
name|ctarget
operator|&&
operator|!
name|w
condition|)
block|{
name|X11
operator|->
name|ignoreBadwindow
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|XTranslateCoordinates
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|(
name|screen
argument_list|)
argument_list|,
name|ctarget
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
operator|&
name|unused
argument_list|,
operator|&
name|unused
argument_list|,
operator|&
name|ctarget
argument_list|)
operator|||
name|X11
operator|->
name|badwindow
argument_list|()
condition|)
break|break;
if|if
condition|(
name|ctarget
operator|==
name|wid
condition|)
block|{
comment|// Found!
name|w
operator|=
name|widget
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|w
condition|)
break|break;
block|}
block|}
block|}
return|return
name|w
condition|?
name|w
operator|->
name|window
argument_list|()
else|:
literal|0
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|syncX
name|void
name|QApplication
operator|::
name|syncX
parameter_list|()
block|{
if|if
condition|(
name|X11
operator|->
name|display
condition|)
name|XSync
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|False
argument_list|)
expr_stmt|;
comment|// don't discard events
block|}
end_function
begin_function
DECL|function|beep
name|void
name|QApplication
operator|::
name|beep
parameter_list|()
block|{
if|if
condition|(
name|X11
operator|->
name|display
condition|)
name|XBell
argument_list|(
name|X11
operator|->
name|display
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|printf
argument_list|(
literal|"\7"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|alert
name|void
name|QApplication
operator|::
name|alert
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|msec
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QApplicationPrivate
operator|::
name|checkInstance
argument_list|(
literal|"alert"
argument_list|)
condition|)
return|return;
name|QWidgetList
name|windowsToMark
decl_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
block|{
name|windowsToMark
operator|+=
name|topLevelWidgets
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|windowsToMark
operator|.
name|append
argument_list|(
name|widget
operator|->
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowsToMark
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|window
init|=
name|windowsToMark
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|window
operator|->
name|isActiveWindow
argument_list|()
condition|)
block|{
name|qt_change_net_wm_state
argument_list|(
name|window
argument_list|,
literal|true
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_STATE_DEMANDS_ATTENTION
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|msec
operator|!=
literal|0
condition|)
block|{
name|QTimer
modifier|*
name|timer
init|=
operator|new
name|QTimer
argument_list|(
name|qApp
argument_list|)
decl_stmt|;
name|timer
operator|->
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|qApp
argument_list|,
name|SLOT
argument_list|(
name|_q_alertTimeOut
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTimer
modifier|*
name|oldTimer
init|=
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|alertTimerHash
operator|.
name|value
argument_list|(
name|window
argument_list|)
condition|)
block|{
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|alertTimerHash
operator|.
name|remove
argument_list|(
name|window
argument_list|)
expr_stmt|;
operator|delete
name|oldTimer
expr_stmt|;
block|}
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|alertTimerHash
operator|.
name|insert
argument_list|(
name|window
argument_list|,
name|timer
argument_list|)
expr_stmt|;
name|timer
operator|->
name|start
argument_list|(
name|msec
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|_q_alertTimeOut
name|void
name|QApplicationPrivate
operator|::
name|_q_alertTimeOut
parameter_list|()
block|{
if|if
condition|(
name|QTimer
modifier|*
name|timer
init|=
name|qobject_cast
argument_list|<
name|QTimer
operator|*
argument_list|>
argument_list|(
name|q_func
argument_list|()
operator|->
name|sender
argument_list|()
argument_list|)
condition|)
block|{
name|QHash
argument_list|<
name|QWidget
modifier|*
argument_list|,
name|QTimer
modifier|*
argument_list|>
operator|::
name|iterator
name|it
init|=
name|alertTimerHash
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|alertTimerHash
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|==
name|timer
condition|)
block|{
name|QWidget
modifier|*
name|window
init|=
name|it
operator|.
name|key
argument_list|()
decl_stmt|;
name|qt_change_net_wm_state
argument_list|(
name|window
argument_list|,
literal|false
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_STATE_DEMANDS_ATTENTION
argument_list|)
argument_list|)
expr_stmt|;
name|alertTimerHash
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
name|timer
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
break|break;
block|}
operator|++
name|it
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|queryKeyboardModifiers
name|Qt
operator|::
name|KeyboardModifiers
name|QApplication
operator|::
name|queryKeyboardModifiers
parameter_list|()
block|{
name|Window
name|root
decl_stmt|;
name|Window
name|child
decl_stmt|;
name|int
name|root_x
decl_stmt|,
name|root_y
decl_stmt|,
name|win_x
decl_stmt|,
name|win_y
decl_stmt|;
name|uint
name|keybstate
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ScreenCount
argument_list|(
name|X11
operator|->
name|display
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|XQueryPointer
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|(
name|i
argument_list|)
argument_list|,
operator|&
name|root
argument_list|,
operator|&
name|child
argument_list|,
operator|&
name|root_x
argument_list|,
operator|&
name|root_y
argument_list|,
operator|&
name|win_x
argument_list|,
operator|&
name|win_y
argument_list|,
operator|&
name|keybstate
argument_list|)
condition|)
return|return
name|X11
operator|->
name|translateModifiers
argument_list|(
name|keybstate
operator|&
literal|0x00ff
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   Special lookup functions for windows that have been reparented recently  *****************************************************************************/
end_comment
begin_decl_stmt
DECL|variable|wPRmapper
specifier|static
name|QWidgetMapper
modifier|*
name|wPRmapper
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|wPRmapper
comment|// alternative widget mapper
end_comment
begin_function
DECL|function|qPRCreate
name|void
name|qPRCreate
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|Window
name|oldwin
parameter_list|)
block|{
comment|// QWidget::reparent mechanism
if|if
condition|(
operator|!
name|wPRmapper
condition|)
name|wPRmapper
operator|=
operator|new
name|QWidgetMapper
expr_stmt|;
name|QETWidget
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QETWidget
operator|*
argument_list|>
argument_list|(
cast|const_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
decl_stmt|;
name|wPRmapper
operator|->
name|insert
argument_list|(
operator|(
name|int
operator|)
name|oldwin
argument_list|,
name|w
argument_list|)
expr_stmt|;
comment|// add old window to mapper
name|w
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Reparented
argument_list|)
expr_stmt|;
comment|// set reparented flag
block|}
end_function
begin_function
DECL|function|qPRCleanup
name|void
name|qPRCleanup
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QETWidget
modifier|*
name|etw
init|=
cast|static_cast
argument_list|<
name|QETWidget
operator|*
argument_list|>
argument_list|(
cast|const_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|wPRmapper
operator|&&
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Reparented
argument_list|)
operator|)
condition|)
return|return;
comment|// not a reparented widget
name|QWidgetMapper
operator|::
name|Iterator
name|it
init|=
name|wPRmapper
operator|->
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|wPRmapper
operator|->
name|constEnd
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
operator|*
name|it
decl_stmt|;
if|if
condition|(
name|w
operator|==
name|etw
condition|)
block|{
comment|// found widget
name|etw
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Reparented
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// clear flag
name|it
operator|=
name|wPRmapper
operator|->
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
comment|// old window no longer needed
block|}
else|else
block|{
operator|++
name|it
expr_stmt|;
block|}
block|}
if|if
condition|(
name|wPRmapper
operator|->
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// became empty
operator|delete
name|wPRmapper
expr_stmt|;
comment|// then reset alt mapper
name|wPRmapper
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qPRFindWidget
specifier|static
name|QETWidget
modifier|*
name|qPRFindWidget
parameter_list|(
name|Window
name|oldwin
parameter_list|)
block|{
return|return
name|wPRmapper
condition|?
operator|(
name|QETWidget
operator|*
operator|)
name|wPRmapper
operator|->
name|value
argument_list|(
operator|(
name|int
operator|)
name|oldwin
argument_list|,
literal|0
argument_list|)
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|x11ClientMessage
name|int
name|QApplication
operator|::
name|x11ClientMessage
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|XEvent
modifier|*
name|event
parameter_list|,
name|bool
name|passive_only
parameter_list|)
block|{
if|if
condition|(
name|w
operator|&&
operator|!
name|w
operator|->
name|internalWinId
argument_list|()
condition|)
return|return
literal|0
return|;
name|QETWidget
modifier|*
name|widget
init|=
operator|(
name|QETWidget
operator|*
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|xclient
operator|.
name|format
operator|==
literal|32
operator|&&
name|event
operator|->
name|xclient
operator|.
name|message_type
condition|)
block|{
if|if
condition|(
name|event
operator|->
name|xclient
operator|.
name|message_type
operator|==
name|ATOM
argument_list|(
name|WM_PROTOCOLS
argument_list|)
condition|)
block|{
name|Atom
name|a
init|=
name|event
operator|->
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|a
operator|==
name|ATOM
argument_list|(
name|WM_DELETE_WINDOW
argument_list|)
condition|)
block|{
if|if
condition|(
name|passive_only
condition|)
return|return
literal|0
return|;
name|widget
operator|->
name|translateCloseEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|a
operator|==
name|ATOM
argument_list|(
name|WM_TAKE_FOCUS
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|ulong
operator|)
name|event
operator|->
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|1
index|]
operator|>
name|X11
operator|->
name|time
condition|)
name|X11
operator|->
name|time
operator|=
name|event
operator|->
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|1
index|]
expr_stmt|;
name|QWidget
modifier|*
name|amw
init|=
name|activeModalWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|amw
operator|&&
name|amw
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11DoNotAcceptFocus
argument_list|)
condition|)
name|amw
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|amw
operator|&&
operator|!
name|QApplicationPrivate
operator|::
name|tryModalHelper
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|QWidget
modifier|*
name|p
init|=
name|amw
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
while|while
condition|(
name|p
operator|&&
name|p
operator|!=
name|widget
condition|)
name|p
operator|=
name|p
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|p
operator|||
operator|!
name|X11
operator|->
name|net_supported_list
condition|)
name|amw
operator|->
name|raise
argument_list|()
expr_stmt|;
comment|// help broken window managers
name|amw
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
block|}
elseif|else
if|if
condition|(
name|a
operator|==
name|ATOM
argument_list|(
name|_NET_WM_CONTEXT_HELP
argument_list|)
condition|)
block|{
name|QWhatsThis
operator|::
name|enterWhatsThisMode
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_WHATSTHIS
block|}
elseif|else
if|if
condition|(
name|a
operator|==
name|ATOM
argument_list|(
name|_NET_WM_PING
argument_list|)
condition|)
block|{
comment|// avoid send/reply loops
name|Window
name|root
init|=
name|RootWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|w
operator|->
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|xclient
operator|.
name|window
operator|!=
name|root
condition|)
block|{
name|event
operator|->
name|xclient
operator|.
name|window
operator|=
name|root
expr_stmt|;
name|XSendEvent
argument_list|(
name|event
operator|->
name|xclient
operator|.
name|display
argument_list|,
name|event
operator|->
name|xclient
operator|.
name|window
argument_list|,
name|False
argument_list|,
name|SubstructureNotifyMask
operator||
name|SubstructureRedirectMask
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_XSYNC
block|}
elseif|else
if|if
condition|(
name|a
operator|==
name|ATOM
argument_list|(
name|_NET_WM_SYNC_REQUEST
argument_list|)
condition|)
block|{
specifier|const
name|ulong
name|timestamp
init|=
operator|(
specifier|const
name|ulong
operator|)
name|event
operator|->
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|timestamp
operator|>
name|X11
operator|->
name|time
condition|)
name|X11
operator|->
name|time
operator|=
name|timestamp
expr_stmt|;
if|if
condition|(
name|QTLWExtra
modifier|*
name|tlw
init|=
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|maybeTopData
argument_list|()
condition|)
block|{
if|if
condition|(
name|timestamp
operator|==
name|CurrentTime
operator|||
name|timestamp
operator|>
name|tlw
operator|->
name|syncRequestTimestamp
condition|)
block|{
name|tlw
operator|->
name|syncRequestTimestamp
operator|=
name|timestamp
expr_stmt|;
name|tlw
operator|->
name|newCounterValueLo
operator|=
name|event
operator|->
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|2
index|]
expr_stmt|;
name|tlw
operator|->
name|newCounterValueHi
operator|=
name|event
operator|->
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|3
index|]
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|xclient
operator|.
name|message_type
operator|==
name|ATOM
argument_list|(
name|_QT_SCROLL_DONE
argument_list|)
condition|)
block|{
name|widget
operator|->
name|translateScrollDoneEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|xclient
operator|.
name|message_type
operator|==
name|ATOM
argument_list|(
name|XdndPosition
argument_list|)
condition|)
block|{
name|X11
operator|->
name|xdndHandlePosition
argument_list|(
name|widget
argument_list|,
name|event
argument_list|,
name|passive_only
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|xclient
operator|.
name|message_type
operator|==
name|ATOM
argument_list|(
name|XdndEnter
argument_list|)
condition|)
block|{
name|X11
operator|->
name|xdndHandleEnter
argument_list|(
name|widget
argument_list|,
name|event
argument_list|,
name|passive_only
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|xclient
operator|.
name|message_type
operator|==
name|ATOM
argument_list|(
name|XdndStatus
argument_list|)
condition|)
block|{
name|X11
operator|->
name|xdndHandleStatus
argument_list|(
name|widget
argument_list|,
name|event
argument_list|,
name|passive_only
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|xclient
operator|.
name|message_type
operator|==
name|ATOM
argument_list|(
name|XdndLeave
argument_list|)
condition|)
block|{
name|X11
operator|->
name|xdndHandleLeave
argument_list|(
name|widget
argument_list|,
name|event
argument_list|,
name|passive_only
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|xclient
operator|.
name|message_type
operator|==
name|ATOM
argument_list|(
name|XdndDrop
argument_list|)
condition|)
block|{
name|X11
operator|->
name|xdndHandleDrop
argument_list|(
name|widget
argument_list|,
name|event
argument_list|,
name|passive_only
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|xclient
operator|.
name|message_type
operator|==
name|ATOM
argument_list|(
name|XdndFinished
argument_list|)
condition|)
block|{
name|X11
operator|->
name|xdndHandleFinished
argument_list|(
name|widget
argument_list|,
name|event
argument_list|,
name|passive_only
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|passive_only
condition|)
return|return
literal|0
return|;
comment|// All other are interactions
block|}
block|}
else|else
block|{
name|X11
operator|->
name|motifdndHandle
argument_list|(
name|widget
argument_list|,
name|event
argument_list|,
name|passive_only
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|x11ProcessEvent
name|int
name|QApplication
operator|::
name|x11ProcessEvent
parameter_list|(
name|XEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QApplication
argument_list|)
expr_stmt|;
name|QScopedLoopLevelCounter
name|loopLevelCounter
argument_list|(
name|d
operator|->
name|threadData
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|ALIEN_DEBUG
comment|//qDebug()<< "QApplication::x11ProcessEvent:"<< event->type;
endif|#
directive|endif
switch|switch
condition|(
name|event
operator|->
name|type
condition|)
block|{
case|case
name|ButtonPress
case|:
name|pressed_window
operator|=
name|event
operator|->
name|xbutton
operator|.
name|window
expr_stmt|;
name|X11
operator|->
name|userTime
operator|=
name|event
operator|->
name|xbutton
operator|.
name|time
expr_stmt|;
comment|// fallthrough intended
case|case
name|ButtonRelease
case|:
name|X11
operator|->
name|time
operator|=
name|event
operator|->
name|xbutton
operator|.
name|time
expr_stmt|;
break|break;
case|case
name|MotionNotify
case|:
name|X11
operator|->
name|time
operator|=
name|event
operator|->
name|xmotion
operator|.
name|time
expr_stmt|;
break|break;
case|case
name|XKeyPress
case|:
name|X11
operator|->
name|userTime
operator|=
name|event
operator|->
name|xkey
operator|.
name|time
expr_stmt|;
comment|// fallthrough intended
case|case
name|XKeyRelease
case|:
name|X11
operator|->
name|time
operator|=
name|event
operator|->
name|xkey
operator|.
name|time
expr_stmt|;
break|break;
case|case
name|PropertyNotify
case|:
name|X11
operator|->
name|time
operator|=
name|event
operator|->
name|xproperty
operator|.
name|time
expr_stmt|;
break|break;
case|case
name|EnterNotify
case|:
case|case
name|LeaveNotify
case|:
name|X11
operator|->
name|time
operator|=
name|event
operator|->
name|xcrossing
operator|.
name|time
expr_stmt|;
break|break;
case|case
name|SelectionClear
case|:
name|X11
operator|->
name|time
operator|=
name|event
operator|->
name|xselectionclear
operator|.
name|time
expr_stmt|;
break|break;
default|default:
break|break;
block|}
ifndef|#
directive|ifndef
name|QT_NO_XFIXES
if|if
condition|(
name|X11
operator|->
name|use_xfixes
operator|&&
name|event
operator|->
name|type
operator|==
operator|(
name|X11
operator|->
name|xfixes_eventbase
operator|+
name|XFixesSelectionNotify
operator|)
condition|)
block|{
name|XFixesSelectionNotifyEvent
modifier|*
name|req
init|=
cast|reinterpret_cast
argument_list|<
name|XFixesSelectionNotifyEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|X11
operator|->
name|time
operator|=
name|req
operator|->
name|selection_timestamp
expr_stmt|;
if|if
condition|(
name|req
operator|->
name|selection
operator|==
name|ATOM
argument_list|(
name|_NET_WM_CM_S0
argument_list|)
condition|)
name|X11
operator|->
name|compositingManagerRunning
operator|=
name|req
operator|->
name|owner
expr_stmt|;
block|}
endif|#
directive|endif
name|QETWidget
modifier|*
name|widget
init|=
operator|(
name|QETWidget
operator|*
operator|)
name|QWidget
operator|::
name|find
argument_list|(
operator|(
name|WId
operator|)
name|event
operator|->
name|xany
operator|.
name|window
argument_list|)
decl_stmt|;
if|if
condition|(
name|wPRmapper
condition|)
block|{
comment|// just did a widget reparent?
if|if
condition|(
name|widget
operator|==
literal|0
condition|)
block|{
comment|// not in std widget mapper
switch|switch
condition|(
name|event
operator|->
name|type
condition|)
block|{
comment|// only for mouse/key events
case|case
name|ButtonPress
case|:
case|case
name|ButtonRelease
case|:
case|case
name|MotionNotify
case|:
case|case
name|XKeyPress
case|:
case|case
name|XKeyRelease
case|:
name|widget
operator|=
name|qPRFindWidget
argument_list|(
name|event
operator|->
name|xany
operator|.
name|window
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Reparented
argument_list|)
condition|)
name|qPRCleanup
argument_list|(
name|widget
argument_list|)
expr_stmt|;
comment|// remove from alt mapper
block|}
name|QETWidget
modifier|*
name|keywidget
init|=
literal|0
decl_stmt|;
name|bool
name|grabbed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|XKeyPress
operator|||
name|event
operator|->
name|type
operator|==
name|XKeyRelease
condition|)
block|{
name|keywidget
operator|=
operator|(
name|QETWidget
operator|*
operator|)
name|QWidget
operator|::
name|keyboardGrabber
argument_list|()
expr_stmt|;
if|if
condition|(
name|keywidget
condition|)
block|{
name|grabbed
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|keywidget
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|inPopupMode
argument_list|()
condition|)
comment|// no focus widget, see if we have a popup
name|keywidget
operator|=
operator|(
name|QETWidget
operator|*
operator|)
operator|(
name|activePopupWidget
argument_list|()
operator|->
name|focusWidget
argument_list|()
condition|?
name|activePopupWidget
argument_list|()
operator|->
name|focusWidget
argument_list|()
else|:
name|activePopupWidget
argument_list|()
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|QApplicationPrivate
operator|::
name|focus_widget
condition|)
name|keywidget
operator|=
operator|(
name|QETWidget
operator|*
operator|)
name|QApplicationPrivate
operator|::
name|focus_widget
expr_stmt|;
elseif|else
if|if
condition|(
name|widget
condition|)
name|keywidget
operator|=
operator|(
name|QETWidget
operator|*
operator|)
name|widget
operator|->
name|window
argument_list|()
expr_stmt|;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_IM
comment|// Filtering input events by the input context. It has to be taken
comment|// place before any other key event consumers such as eventfilters
comment|// and accelerators because some input methods require quite
comment|// various key combination and sequences. It often conflicts with
comment|// accelerators and so on, so we must give the input context the
comment|// filtering opportunity first to ensure all input methods work
comment|// properly regardless of application design.
if|if
condition|(
name|keywidget
operator|&&
name|keywidget
operator|->
name|isEnabled
argument_list|()
operator|&&
name|keywidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
condition|)
block|{
comment|// block user interaction during session management
if|if
condition|(
operator|(
name|event
operator|->
name|type
operator|==
name|XKeyPress
operator|||
name|event
operator|->
name|type
operator|==
name|XKeyRelease
operator|)
operator|&&
name|qt_sm_blockUserInput
condition|)
return|return
literal|true
return|;
comment|// for XIM handling
name|QInputContext
modifier|*
name|qic
init|=
name|keywidget
operator|->
name|inputContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|qic
operator|&&
name|qic
operator|->
name|x11FilterEvent
argument_list|(
name|keywidget
argument_list|,
name|event
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// filterEvent() accepts QEvent *event rather than preexpanded
comment|// key event attribute values. This is intended to pass other
comment|// QInputEvent in future. Other non IM-related events should
comment|// not be forwarded to input contexts to prevent weird event
comment|// handling.
if|if
condition|(
operator|(
name|event
operator|->
name|type
operator|==
name|XKeyPress
operator|||
name|event
operator|->
name|type
operator|==
name|XKeyRelease
operator|)
condition|)
block|{
name|int
name|code
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
decl_stmt|;
name|QEvent
operator|::
name|Type
name|type
decl_stmt|;
name|QString
name|text
decl_stmt|;
name|KeySym
name|keySym
decl_stmt|;
name|qt_keymapper_private
argument_list|()
operator|->
name|translateKeyEventInternal
argument_list|(
name|keywidget
argument_list|,
name|event
argument_list|,
name|keySym
argument_list|,
name|count
argument_list|,
name|text
argument_list|,
name|modifiers
argument_list|,
name|code
argument_list|,
name|type
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// both key press/release is required for some complex
comment|// input methods. don't eliminate anything.
name|QKeyEventEx
name|keyevent
argument_list|(
name|type
argument_list|,
name|code
argument_list|,
name|modifiers
argument_list|,
name|text
argument_list|,
literal|false
argument_list|,
name|qMax
argument_list|(
name|qMax
argument_list|(
name|count
argument_list|,
literal|1
argument_list|)
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|event
operator|->
name|xkey
operator|.
name|keycode
argument_list|,
name|keySym
argument_list|,
name|event
operator|->
name|xkey
operator|.
name|state
argument_list|)
decl_stmt|;
if|if
condition|(
name|qic
operator|&&
name|qic
operator|->
name|filterEvent
argument_list|(
operator|&
name|keyevent
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
else|else
endif|#
directive|endif
comment|// QT_NO_IM
block|{
if|if
condition|(
name|XFilterEvent
argument_list|(
name|event
argument_list|,
name|XNone
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|qt_x11EventFilter
argument_list|(
name|event
argument_list|)
condition|)
comment|// send through app filter
return|return
literal|1
return|;
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|MappingNotify
condition|)
block|{
comment|// keyboard mapping changed
name|XRefreshKeyboardMapping
argument_list|(
operator|&
name|event
operator|->
name|xmapping
argument_list|)
expr_stmt|;
name|QKeyMapper
operator|::
name|changeKeyboard
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_XKB
elseif|else
if|if
condition|(
name|X11
operator|->
name|use_xkb
operator|&&
name|event
operator|->
name|type
operator|==
name|X11
operator|->
name|xkb_eventbase
condition|)
block|{
name|XkbAnyEvent
modifier|*
name|xkbevent
init|=
operator|(
name|XkbAnyEvent
operator|*
operator|)
name|event
decl_stmt|;
switch|switch
condition|(
name|xkbevent
operator|->
name|xkb_type
condition|)
block|{
case|case
name|XkbStateNotify
case|:
block|{
name|XkbStateNotifyEvent
modifier|*
name|xkbstateevent
init|=
operator|(
name|XkbStateNotifyEvent
operator|*
operator|)
name|xkbevent
decl_stmt|;
if|if
condition|(
operator|(
name|xkbstateevent
operator|->
name|changed
operator|&
name|XkbGroupStateMask
operator|)
operator|!=
literal|0
condition|)
block|{
name|qt_keymapper_private
argument_list|()
operator|->
name|xkb_currentGroup
operator|=
name|xkbstateevent
operator|->
name|group
expr_stmt|;
name|QKeyMapper
operator|::
name|changeKeyboard
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
default|default:
break|break;
block|}
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|widget
condition|)
block|{
comment|// don't know this windows
name|QWidget
modifier|*
name|popup
init|=
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|popup
condition|)
block|{
comment|/*               That is more than suboptimal. The real solution should               do some keyevent and buttonevent translation, so that               the popup still continues to work as the user expects.               Unfortunately this translation is currently only               possible with a known widget. I'll change that soon               (Matthias).             */
comment|// Danger - make sure we don't lock the server
switch|switch
condition|(
name|event
operator|->
name|type
condition|)
block|{
case|case
name|ButtonPress
case|:
case|case
name|ButtonRelease
case|:
case|case
name|XKeyPress
case|:
case|case
name|XKeyRelease
case|:
do|do
block|{
name|popup
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|popup
operator|=
name|qApp
operator|->
name|activePopupWidget
argument_list|()
operator|)
condition|)
do|;
return|return
literal|1
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|XKeyPress
operator|||
name|event
operator|->
name|type
operator|==
name|XKeyRelease
condition|)
name|widget
operator|=
name|keywidget
expr_stmt|;
comment|// send XKeyEvents through keywidget->x11Event()
if|if
condition|(
name|app_do_modal
condition|)
comment|// modal event handling
if|if
condition|(
operator|!
name|qt_try_modal
argument_list|(
name|widget
argument_list|,
name|event
argument_list|)
condition|)
block|{
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|ClientMessage
operator|&&
operator|!
name|widget
operator|->
name|x11Event
argument_list|(
name|event
argument_list|)
condition|)
name|x11ClientMessage
argument_list|(
name|widget
argument_list|,
name|event
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
name|widget
operator|->
name|x11Event
argument_list|(
name|event
argument_list|)
condition|)
comment|// send through widget filter
return|return
literal|1
return|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_TABLET
argument_list|)
if|if
condition|(
operator|!
name|qt_xdnd_dragging
condition|)
block|{
name|QTabletDeviceDataList
modifier|*
name|tablets
init|=
name|qt_tablet_devices
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tablets
operator|->
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTabletDeviceData
modifier|&
name|tab
init|=
name|tablets
operator|->
name|operator
name|[]
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|tab
operator|.
name|xinput_motion
operator|||
name|event
operator|->
name|type
operator|==
name|tab
operator|.
name|xinput_button_release
operator|||
name|event
operator|->
name|type
operator|==
name|tab
operator|.
name|xinput_button_press
operator|||
name|event
operator|->
name|type
operator|==
name|tab
operator|.
name|xinput_proximity_in
operator|||
name|event
operator|->
name|type
operator|==
name|tab
operator|.
name|xinput_proximity_out
condition|)
block|{
name|widget
operator|->
name|translateXinputEvent
argument_list|(
name|event
argument_list|,
operator|&
name|tab
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_XRANDR
if|if
condition|(
name|X11
operator|->
name|use_xrandr
operator|&&
name|event
operator|->
name|type
operator|==
operator|(
name|X11
operator|->
name|xrandr_eventbase
operator|+
name|RRScreenChangeNotify
operator|)
condition|)
block|{
comment|// update Xlib internals with the latest screen configuration
name|X11
operator|->
name|ptrXRRUpdateConfiguration
argument_list|(
name|event
argument_list|)
expr_stmt|;
comment|// update the size for desktop widget
name|int
name|scr
init|=
name|X11
operator|->
name|ptrXRRRootToScreen
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|event
operator|->
name|xany
operator|.
name|window
argument_list|)
decl_stmt|;
name|QDesktopWidget
modifier|*
name|desktop
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
decl_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|desktop
operator|->
name|screen
argument_list|(
name|scr
argument_list|)
decl_stmt|;
name|QSize
name|oldSize
argument_list|(
name|w
operator|->
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|w
operator|->
name|data
operator|->
name|crect
operator|.
name|setWidth
argument_list|(
name|DisplayWidth
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|scr
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|->
name|data
operator|->
name|crect
operator|.
name|setHeight
argument_list|(
name|DisplayHeight
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|scr
argument_list|)
argument_list|)
expr_stmt|;
name|QResizeEvent
name|e
argument_list|(
name|w
operator|->
name|size
argument_list|()
argument_list|,
name|oldSize
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|w
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|!=
name|desktop
condition|)
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|desktop
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_XRANDR
ifndef|#
directive|ifndef
name|QT_NO_XFIXES
if|if
condition|(
name|X11
operator|->
name|use_xfixes
operator|&&
name|event
operator|->
name|type
operator|==
operator|(
name|X11
operator|->
name|xfixes_eventbase
operator|+
name|XFixesSelectionNotify
operator|)
condition|)
block|{
name|XFixesSelectionNotifyEvent
modifier|*
name|req
init|=
cast|reinterpret_cast
argument_list|<
name|XFixesSelectionNotifyEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
comment|// compress all XFixes events related to this selection
comment|// we don't want to handle old SelectionNotify events.
name|qt_xfixes_selection_event_data
name|xfixes_event
decl_stmt|;
name|xfixes_event
operator|.
name|selection
operator|=
name|req
operator|->
name|selection
expr_stmt|;
for|for
control|(
name|XEvent
name|ev
init|;
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|XCheckIfEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|ev
argument_list|,
operator|&
name|qt_xfixes_scanner
argument_list|,
operator|(
name|XPointer
operator|)
operator|&
name|xfixes_event
argument_list|)
condition|)
break|break;
block|}
if|if
condition|(
name|req
operator|->
name|selection
operator|==
name|ATOM
argument_list|(
name|CLIPBOARD
argument_list|)
condition|)
block|{
if|if
condition|(
name|qt_xfixes_clipboard_changed
argument_list|(
name|req
operator|->
name|owner
argument_list|,
name|req
operator|->
name|selection_timestamp
argument_list|)
condition|)
block|{
emit|emit
name|clipboard
argument_list|()
operator|->
name|changed
argument_list|(
name|QClipboard
operator|::
name|Clipboard
argument_list|)
emit|;
emit|emit
name|clipboard
argument_list|()
operator|->
name|dataChanged
argument_list|()
emit|;
block|}
block|}
elseif|else
if|if
condition|(
name|req
operator|->
name|selection
operator|==
name|XA_PRIMARY
condition|)
block|{
if|if
condition|(
name|qt_xfixes_selection_changed
argument_list|(
name|req
operator|->
name|owner
argument_list|,
name|req
operator|->
name|selection_timestamp
argument_list|)
condition|)
block|{
emit|emit
name|clipboard
argument_list|()
operator|->
name|changed
argument_list|(
name|QClipboard
operator|::
name|Selection
argument_list|)
emit|;
emit|emit
name|clipboard
argument_list|()
operator|->
name|selectionChanged
argument_list|()
emit|;
block|}
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_XFIXES
switch|switch
condition|(
name|event
operator|->
name|type
condition|)
block|{
case|case
name|ButtonRelease
case|:
comment|// mouse event
if|if
condition|(
operator|!
name|d
operator|->
name|inPopupMode
argument_list|()
operator|&&
operator|!
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
operator|&&
name|pressed_window
operator|!=
name|widget
operator|->
name|internalWinId
argument_list|()
operator|&&
operator|(
name|widget
operator|=
operator|(
name|QETWidget
operator|*
operator|)
name|QWidget
operator|::
name|find
argument_list|(
operator|(
name|WId
operator|)
name|pressed_window
argument_list|)
operator|)
operator|==
literal|0
condition|)
break|break;
comment|// fall through intended
case|case
name|ButtonPress
case|:
if|if
condition|(
name|event
operator|->
name|xbutton
operator|.
name|root
operator|!=
name|RootWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|widget
operator|->
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
argument_list|)
operator|&&
operator|!
name|qt_xdnd_dragging
condition|)
block|{
while|while
condition|(
name|activePopupWidget
argument_list|()
condition|)
name|activePopupWidget
argument_list|()
operator|->
name|close
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|ButtonPress
condition|)
name|qt_net_update_user_time
argument_list|(
name|widget
operator|->
name|window
argument_list|()
argument_list|,
name|X11
operator|->
name|userTime
argument_list|)
expr_stmt|;
comment|// fall through intended
case|case
name|MotionNotify
case|:
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_TABLET
argument_list|)
if|if
condition|(
operator|!
name|qt_tabletChokeMouse
condition|)
block|{
endif|#
directive|endif
if|if
condition|(
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_TransparentForMouseEvents
argument_list|)
condition|)
block|{
name|QPoint
name|pos
argument_list|(
name|event
operator|->
name|xbutton
operator|.
name|x
argument_list|,
name|event
operator|->
name|xbutton
operator|.
name|y
argument_list|)
decl_stmt|;
name|pos
operator|=
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|mapFromWS
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|window
init|=
name|widget
operator|->
name|window
argument_list|()
decl_stmt|;
name|pos
operator|=
name|widget
operator|->
name|mapTo
argument_list|(
name|window
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|child
init|=
name|window
operator|->
name|childAt
argument_list|(
name|pos
argument_list|)
condition|)
block|{
name|widget
operator|=
cast|static_cast
argument_list|<
name|QETWidget
operator|*
argument_list|>
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|pos
operator|=
name|child
operator|->
name|mapFrom
argument_list|(
name|window
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|event
operator|->
name|xbutton
operator|.
name|x
operator|=
name|pos
operator|.
name|x
argument_list|()
expr_stmt|;
name|event
operator|->
name|xbutton
operator|.
name|y
operator|=
name|pos
operator|.
name|y
argument_list|()
expr_stmt|;
block|}
block|}
name|widget
operator|->
name|translateMouseEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_TABLET
argument_list|)
block|}
else|else
block|{
name|qt_tabletChokeMouse
operator|=
literal|false
expr_stmt|;
block|}
endif|#
directive|endif
break|break;
case|case
name|XKeyPress
case|:
comment|// keyboard event
name|qt_net_update_user_time
argument_list|(
name|widget
operator|->
name|window
argument_list|()
argument_list|,
name|X11
operator|->
name|userTime
argument_list|)
expr_stmt|;
comment|// fallthrough intended
case|case
name|XKeyRelease
case|:
block|{
if|if
condition|(
name|keywidget
operator|&&
name|keywidget
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
comment|// should always exist
comment|// qDebug("sending key event");
name|qt_keymapper_private
argument_list|()
operator|->
name|translateKeyEvent
argument_list|(
name|keywidget
argument_list|,
name|event
argument_list|,
name|grabbed
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|GraphicsExpose
case|:
case|case
name|Expose
case|:
comment|// paint event
name|widget
operator|->
name|translatePaintEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|ConfigureNotify
case|:
comment|// window move/resize event
if|if
condition|(
name|event
operator|->
name|xconfigure
operator|.
name|event
operator|==
name|event
operator|->
name|xconfigure
operator|.
name|window
condition|)
name|widget
operator|->
name|translateConfigEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|XFocusIn
case|:
block|{
comment|// got focus
if|if
condition|(
operator|(
name|widget
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
break|break;
if|if
condition|(
name|d
operator|->
name|inPopupMode
argument_list|()
condition|)
comment|// some delayed focus event to ignore
break|break;
if|if
condition|(
operator|!
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
break|break;
if|if
condition|(
name|event
operator|->
name|xfocus
operator|.
name|detail
operator|!=
name|NotifyAncestor
operator|&&
name|event
operator|->
name|xfocus
operator|.
name|detail
operator|!=
name|NotifyInferior
operator|&&
name|event
operator|->
name|xfocus
operator|.
name|detail
operator|!=
name|NotifyNonlinear
condition|)
break|break;
name|setActiveWindow
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|X11
operator|->
name|focus_model
operator|==
name|QX11Data
operator|::
name|FM_PointerRoot
condition|)
block|{
comment|// We got real input focus from somewhere, but we were in PointerRoot
comment|// mode, so we don't trust this event.  Check the focus model to make
comment|// sure we know what focus mode we are using...
name|qt_check_focus_model
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
case|case
name|XFocusOut
case|:
comment|// lost focus
if|if
condition|(
operator|(
name|widget
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
break|break;
if|if
condition|(
operator|!
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
break|break;
if|if
condition|(
name|event
operator|->
name|xfocus
operator|.
name|mode
operator|==
name|NotifyGrab
condition|)
block|{
name|qt_xfocusout_grab_counter
operator|++
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|event
operator|->
name|xfocus
operator|.
name|detail
operator|!=
name|NotifyAncestor
operator|&&
name|event
operator|->
name|xfocus
operator|.
name|detail
operator|!=
name|NotifyNonlinearVirtual
operator|&&
name|event
operator|->
name|xfocus
operator|.
name|detail
operator|!=
name|NotifyNonlinear
condition|)
break|break;
if|if
condition|(
operator|!
name|d
operator|->
name|inPopupMode
argument_list|()
operator|&&
name|widget
operator|==
name|QApplicationPrivate
operator|::
name|active_window
condition|)
block|{
name|XEvent
name|ev
decl_stmt|;
name|bool
name|focus_will_change
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|XCheckTypedEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|XFocusIn
argument_list|,
operator|&
name|ev
argument_list|)
condition|)
block|{
comment|// we're about to get an XFocusIn, if we know we will
comment|// get a new active window, we don't want to set the
comment|// active window to 0 now
name|QWidget
modifier|*
name|w2
init|=
name|QWidget
operator|::
name|find
argument_list|(
name|ev
operator|.
name|xany
operator|.
name|window
argument_list|)
decl_stmt|;
if|if
condition|(
name|w2
operator|&&
name|w2
operator|->
name|windowType
argument_list|()
operator|!=
name|Qt
operator|::
name|Desktop
operator|&&
operator|!
name|d
operator|->
name|inPopupMode
argument_list|()
comment|// some delayed focus event to ignore
operator|&&
name|w2
operator|->
name|isWindow
argument_list|()
operator|&&
operator|(
name|ev
operator|.
name|xfocus
operator|.
name|detail
operator|==
name|NotifyAncestor
operator|||
name|ev
operator|.
name|xfocus
operator|.
name|detail
operator|==
name|NotifyInferior
operator|||
name|ev
operator|.
name|xfocus
operator|.
name|detail
operator|==
name|NotifyNonlinear
operator|)
condition|)
name|focus_will_change
operator|=
literal|true
expr_stmt|;
name|XPutBackEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|ev
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|focus_will_change
condition|)
name|setActiveWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|EnterNotify
case|:
block|{
comment|// enter window
if|if
condition|(
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
operator|&&
operator|(
operator|!
name|d
operator|->
name|inPopupMode
argument_list|()
operator|||
name|widget
operator|->
name|window
argument_list|()
operator|!=
name|activePopupWidget
argument_list|()
operator|)
condition|)
break|break;
if|if
condition|(
operator|(
name|event
operator|->
name|xcrossing
operator|.
name|mode
operator|!=
name|NotifyNormal
operator|&&
name|event
operator|->
name|xcrossing
operator|.
name|mode
operator|!=
name|NotifyUngrab
operator|)
operator|||
name|event
operator|->
name|xcrossing
operator|.
name|detail
operator|==
name|NotifyVirtual
operator|||
name|event
operator|->
name|xcrossing
operator|.
name|detail
operator|==
name|NotifyNonlinearVirtual
condition|)
break|break;
if|if
condition|(
name|event
operator|->
name|xcrossing
operator|.
name|focus
operator|&&
operator|!
operator|(
name|widget
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
operator|&&
operator|!
name|widget
operator|->
name|isActiveWindow
argument_list|()
condition|)
block|{
if|if
condition|(
name|X11
operator|->
name|focus_model
operator|==
name|QX11Data
operator|::
name|FM_Unknown
condition|)
comment|// check focus model
name|qt_check_focus_model
argument_list|()
expr_stmt|;
if|if
condition|(
name|X11
operator|->
name|focus_model
operator|==
name|QX11Data
operator|::
name|FM_PointerRoot
condition|)
comment|// PointerRoot mode
name|setActiveWindow
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|qt_button_down
operator|&&
operator|!
name|d
operator|->
name|inPopupMode
argument_list|()
condition|)
break|break;
name|QWidget
modifier|*
name|alien
init|=
name|widget
operator|->
name|childAt
argument_list|(
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|mapFromWS
argument_list|(
name|QPoint
argument_list|(
name|event
operator|->
name|xcrossing
operator|.
name|x
argument_list|,
name|event
operator|->
name|xcrossing
operator|.
name|y
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|enter
init|=
name|alien
condition|?
name|alien
else|:
name|widget
decl_stmt|;
name|QWidget
modifier|*
name|leave
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|qt_last_mouse_receiver
operator|&&
operator|!
name|qt_last_mouse_receiver
operator|->
name|internalWinId
argument_list|()
condition|)
name|leave
operator|=
name|qt_last_mouse_receiver
expr_stmt|;
else|else
name|leave
operator|=
name|QWidget
operator|::
name|find
argument_list|(
name|curWin
argument_list|)
expr_stmt|;
comment|// ### Alien: enter/leave might be wrong here with overlapping siblings
comment|// if the enter widget is native and stacked under a non-native widget.
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
name|enter
argument_list|,
name|leave
argument_list|)
expr_stmt|;
name|curWin
operator|=
name|widget
operator|->
name|internalWinId
argument_list|()
expr_stmt|;
name|qt_last_mouse_receiver
operator|=
name|enter
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|inPopupMode
argument_list|()
operator|||
name|widget
operator|->
name|window
argument_list|()
operator|==
name|activePopupWidget
argument_list|()
condition|)
name|widget
operator|->
name|translateMouseEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
comment|//we don't get MotionNotify, emulate it
block|}
break|break;
case|case
name|LeaveNotify
case|:
block|{
comment|// leave window
name|QWidget
modifier|*
name|mouseGrabber
init|=
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
decl_stmt|;
if|if
condition|(
name|mouseGrabber
operator|&&
operator|!
name|d
operator|->
name|inPopupMode
argument_list|()
condition|)
break|break;
if|if
condition|(
name|curWin
operator|&&
name|widget
operator|->
name|internalWinId
argument_list|()
operator|!=
name|curWin
condition|)
break|break;
if|if
condition|(
operator|(
name|event
operator|->
name|xcrossing
operator|.
name|mode
operator|!=
name|NotifyNormal
operator|&&
name|event
operator|->
name|xcrossing
operator|.
name|mode
operator|!=
name|NotifyUngrab
operator|)
operator|||
name|event
operator|->
name|xcrossing
operator|.
name|detail
operator|==
name|NotifyInferior
condition|)
break|break;
if|if
condition|(
operator|!
operator|(
name|widget
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
name|widget
operator|->
name|translateMouseEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
comment|//we don't get MotionNotify, emulate it
name|QWidget
modifier|*
name|enter
init|=
literal|0
decl_stmt|;
name|QPoint
name|enterPoint
decl_stmt|;
name|XEvent
name|ev
decl_stmt|;
while|while
condition|(
name|XCheckMaskEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|EnterWindowMask
operator||
name|LeaveWindowMask
argument_list|,
operator|&
name|ev
argument_list|)
operator|&&
operator|!
name|qt_x11EventFilter
argument_list|(
operator|&
name|ev
argument_list|)
condition|)
block|{
name|QWidget
modifier|*
name|event_widget
init|=
name|QWidget
operator|::
name|find
argument_list|(
name|ev
operator|.
name|xcrossing
operator|.
name|window
argument_list|)
decl_stmt|;
if|if
condition|(
name|event_widget
operator|&&
name|event_widget
operator|->
name|x11Event
argument_list|(
operator|&
name|ev
argument_list|)
condition|)
break|break;
if|if
condition|(
name|ev
operator|.
name|type
operator|==
name|LeaveNotify
operator|||
operator|(
name|ev
operator|.
name|xcrossing
operator|.
name|mode
operator|!=
name|NotifyNormal
operator|&&
name|ev
operator|.
name|xcrossing
operator|.
name|mode
operator|!=
name|NotifyUngrab
operator|)
operator|||
name|ev
operator|.
name|xcrossing
operator|.
name|detail
operator|==
name|NotifyVirtual
operator|||
name|ev
operator|.
name|xcrossing
operator|.
name|detail
operator|==
name|NotifyNonlinearVirtual
condition|)
continue|continue;
name|enter
operator|=
name|event_widget
expr_stmt|;
if|if
condition|(
name|enter
condition|)
name|enterPoint
operator|=
name|enter
operator|->
name|d_func
argument_list|()
operator|->
name|mapFromWS
argument_list|(
name|QPoint
argument_list|(
name|ev
operator|.
name|xcrossing
operator|.
name|x
argument_list|,
name|ev
operator|.
name|xcrossing
operator|.
name|y
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ev
operator|.
name|xcrossing
operator|.
name|focus
operator|&&
name|enter
operator|&&
operator|!
operator|(
name|enter
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
operator|&&
operator|!
name|enter
operator|->
name|isActiveWindow
argument_list|()
condition|)
block|{
if|if
condition|(
name|X11
operator|->
name|focus_model
operator|==
name|QX11Data
operator|::
name|FM_Unknown
condition|)
comment|// check focus model
name|qt_check_focus_model
argument_list|()
expr_stmt|;
if|if
condition|(
name|X11
operator|->
name|focus_model
operator|==
name|QX11Data
operator|::
name|FM_PointerRoot
condition|)
comment|// PointerRoot mode
name|setActiveWindow
argument_list|(
name|enter
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
operator|(
operator|!
name|enter
operator|||
operator|(
name|enter
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
operator|)
operator|&&
name|event
operator|->
name|xcrossing
operator|.
name|focus
operator|&&
name|widget
operator|==
name|QApplicationPrivate
operator|::
name|active_window
operator|&&
name|X11
operator|->
name|focus_model
operator|==
name|QX11Data
operator|::
name|FM_PointerRoot
comment|// PointerRoot mode
condition|)
block|{
name|setActiveWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|qt_button_down
operator|&&
operator|!
name|d
operator|->
name|inPopupMode
argument_list|()
condition|)
break|break;
if|if
condition|(
operator|!
name|curWin
condition|)
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|enter
condition|)
block|{
name|QWidget
modifier|*
name|alienEnter
init|=
name|enter
operator|->
name|childAt
argument_list|(
name|enterPoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|alienEnter
condition|)
name|enter
operator|=
name|alienEnter
expr_stmt|;
block|}
name|QWidget
modifier|*
name|leave
init|=
name|qt_last_mouse_receiver
condition|?
name|qt_last_mouse_receiver
else|:
name|widget
decl_stmt|;
name|QWidget
modifier|*
name|activePopupWidget
init|=
name|qApp
operator|->
name|activePopupWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|mouseGrabber
operator|&&
name|activePopupWidget
operator|&&
name|leave
operator|==
name|activePopupWidget
condition|)
name|enter
operator|=
name|mouseGrabber
expr_stmt|;
elseif|else
if|if
condition|(
name|enter
operator|!=
name|widget
operator|&&
name|mouseGrabber
condition|)
block|{
if|if
condition|(
operator|!
name|widget
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|mapFromWS
argument_list|(
name|QPoint
argument_list|(
name|event
operator|->
name|xcrossing
operator|.
name|x
argument_list|,
name|event
operator|->
name|xcrossing
operator|.
name|y
argument_list|)
argument_list|)
argument_list|)
condition|)
break|break;
block|}
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
name|enter
argument_list|,
name|leave
argument_list|)
expr_stmt|;
name|qt_last_mouse_receiver
operator|=
name|enter
expr_stmt|;
if|if
condition|(
name|enter
operator|&&
name|QApplicationPrivate
operator|::
name|tryModalHelper
argument_list|(
name|enter
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|QWidget
modifier|*
name|nativeEnter
init|=
name|enter
operator|->
name|internalWinId
argument_list|()
condition|?
name|enter
else|:
name|enter
operator|->
name|nativeParentWidget
argument_list|()
decl_stmt|;
name|curWin
operator|=
name|nativeEnter
operator|->
name|internalWinId
argument_list|()
expr_stmt|;
cast|static_cast
argument_list|<
name|QETWidget
operator|*
argument_list|>
argument_list|(
name|nativeEnter
argument_list|)
operator|->
name|translateMouseEvent
argument_list|(
operator|&
name|ev
argument_list|)
expr_stmt|;
comment|//we don't get MotionNotify, emulate it
block|}
else|else
block|{
name|curWin
operator|=
literal|0
expr_stmt|;
name|qt_last_mouse_receiver
operator|=
literal|0
expr_stmt|;
block|}
block|}
break|break;
case|case
name|UnmapNotify
case|:
comment|// window hidden
if|if
condition|(
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
operator|->
name|waitingForMapNotify
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|widget
operator|->
name|windowType
argument_list|()
operator|!=
name|Qt
operator|::
name|Popup
operator|&&
operator|!
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
block|{
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
operator|->
name|spont_unmapped
operator|=
literal|1
expr_stmt|;
name|QHideEvent
name|e
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|hideChildren
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
operator|->
name|validWMState
operator|&&
name|X11
operator|->
name|deferred_map
operator|.
name|removeAll
argument_list|(
name|widget
argument_list|)
condition|)
name|widget
operator|->
name|doDeferredMap
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|MapNotify
case|:
comment|// window shown
if|if
condition|(
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
block|{
comment|// if we got a MapNotify when we were not waiting for it, it most
comment|// likely means the user has already asked to hide the window before
comment|// it ever being shown, so we try to withdraw a window after sending
comment|// the QShowEvent.
name|bool
name|pendingHide
init|=
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|)
operator|&&
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
decl_stmt|;
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
operator|->
name|waitingForMapNotify
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|widget
operator|->
name|windowType
argument_list|()
operator|!=
name|Qt
operator|::
name|Popup
condition|)
block|{
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
operator|->
name|spont_unmapped
condition|)
block|{
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
operator|->
name|spont_unmapped
operator|=
literal|0
expr_stmt|;
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|showChildren
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QShowEvent
name|e
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
comment|// show() must have been called on this widget in
comment|// order to reach this point, but we could have
comment|// cleared these 2 attributes in case something
comment|// previously forced us into WithdrawnState
comment|// (e.g. kdocker)
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pendingHide
condition|)
comment|// hide the window
name|XWithdrawWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|widget
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|widget
operator|->
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ClientMessage
case|:
comment|// client message
return|return
name|x11ClientMessage
argument_list|(
name|widget
argument_list|,
name|event
argument_list|,
name|False
argument_list|)
return|;
case|case
name|ReparentNotify
case|:
block|{
comment|// window manager reparents
comment|// compress old reparent events to self
name|XEvent
name|ev
decl_stmt|;
while|while
condition|(
name|XCheckTypedWindowEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|widget
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
name|ReparentNotify
argument_list|,
operator|&
name|ev
argument_list|)
condition|)
block|{
if|if
condition|(
name|ev
operator|.
name|xreparent
operator|.
name|window
operator|!=
name|ev
operator|.
name|xreparent
operator|.
name|event
condition|)
block|{
name|XPutBackEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|ev
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|QTLWExtra
modifier|*
name|topData
init|=
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
decl_stmt|;
comment|// store the parent. Useful for many things, embedding for instance.
name|topData
operator|->
name|parentWinId
operator|=
name|event
operator|->
name|xreparent
operator|.
name|parent
expr_stmt|;
comment|// the widget frame strut should also be invalidated
name|widget
operator|->
name|data
operator|->
name|fstrut_dirty
operator|=
literal|1
expr_stmt|;
comment|// work around broken window managers... if we get a
comment|// ReparentNotify before the MapNotify, we assume that
comment|// we're being managed by a reparenting window
comment|// manager.
comment|//
comment|// however, the WM_STATE property may not have been set
comment|// yet, but we are going to assume that it will
comment|// be... otherwise we could try to map again after getting
comment|// an UnmapNotify... which could then, in turn, trigger a
comment|// race in the window manager which causes the window to
comment|// disappear when it really should be hidden.
if|if
condition|(
name|topData
operator|->
name|waitingForMapNotify
operator|&&
operator|!
name|topData
operator|->
name|validWMState
condition|)
block|{
name|topData
operator|->
name|waitingForMapNotify
operator|=
literal|0
expr_stmt|;
name|topData
operator|->
name|validWMState
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|X11
operator|->
name|focus_model
operator|!=
name|QX11Data
operator|::
name|FM_Unknown
condition|)
block|{
comment|// toplevel reparented...
name|QWidget
modifier|*
name|newparent
init|=
name|QWidget
operator|::
name|find
argument_list|(
name|event
operator|->
name|xreparent
operator|.
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newparent
operator|||
operator|(
name|newparent
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
block|{
comment|// we don't know about the new parent (or we've been
comment|// reparented to root), perhaps a window manager
comment|// has been (re)started?  reset the focus model to unknown
name|X11
operator|->
name|focus_model
operator|=
name|QX11Data
operator|::
name|FM_Unknown
expr_stmt|;
block|}
block|}
block|}
break|break;
block|}
case|case
name|SelectionRequest
case|:
block|{
name|XSelectionRequestEvent
modifier|*
name|req
init|=
operator|&
name|event
operator|->
name|xselectionrequest
decl_stmt|;
if|if
condition|(
operator|!
name|req
condition|)
break|break;
if|if
condition|(
name|ATOM
argument_list|(
name|XdndSelection
argument_list|)
operator|&&
name|req
operator|->
name|selection
operator|==
name|ATOM
argument_list|(
name|XdndSelection
argument_list|)
condition|)
block|{
name|X11
operator|->
name|xdndHandleSelectionRequest
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qt_clipboard
condition|)
block|{
name|QClipboardEvent
name|e
argument_list|(
cast|reinterpret_cast
argument_list|<
name|QEventPrivate
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|qt_clipboard
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|SelectionClear
case|:
block|{
name|XSelectionClearEvent
modifier|*
name|req
init|=
operator|&
name|event
operator|->
name|xselectionclear
decl_stmt|;
comment|// don't deliver dnd events to the clipboard, it gets confused
if|if
condition|(
operator|!
name|req
operator|||
operator|(
name|ATOM
argument_list|(
name|XdndSelection
argument_list|)
operator|&&
name|req
operator|->
name|selection
operator|==
name|ATOM
argument_list|(
name|XdndSelection
argument_list|)
operator|)
condition|)
break|break;
if|if
condition|(
name|qt_clipboard
operator|&&
operator|!
name|X11
operator|->
name|use_xfixes
condition|)
block|{
name|QClipboardEvent
name|e
argument_list|(
cast|reinterpret_cast
argument_list|<
name|QEventPrivate
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|qt_clipboard
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|SelectionNotify
case|:
block|{
name|XSelectionEvent
modifier|*
name|req
init|=
operator|&
name|event
operator|->
name|xselection
decl_stmt|;
comment|// don't deliver dnd events to the clipboard, it gets confused
if|if
condition|(
operator|!
name|req
operator|||
operator|(
name|ATOM
argument_list|(
name|XdndSelection
argument_list|)
operator|&&
name|req
operator|->
name|selection
operator|==
name|ATOM
argument_list|(
name|XdndSelection
argument_list|)
operator|)
condition|)
break|break;
if|if
condition|(
name|qt_clipboard
condition|)
block|{
name|QClipboardEvent
name|e
argument_list|(
cast|reinterpret_cast
argument_list|<
name|QEventPrivate
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|qt_clipboard
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|PropertyNotify
case|:
comment|// some properties changed
if|if
condition|(
name|event
operator|->
name|xproperty
operator|.
name|window
operator|==
name|QX11Info
operator|::
name|appRootWindow
argument_list|(
literal|0
argument_list|)
condition|)
block|{
comment|// root properties for the first screen
if|if
condition|(
operator|!
name|X11
operator|->
name|use_xfixes
operator|&&
name|event
operator|->
name|xproperty
operator|.
name|atom
operator|==
name|ATOM
argument_list|(
name|_QT_CLIPBOARD_SENTINEL
argument_list|)
condition|)
block|{
if|if
condition|(
name|qt_check_clipboard_sentinel
argument_list|()
condition|)
block|{
emit|emit
name|clipboard
argument_list|()
operator|->
name|changed
argument_list|(
name|QClipboard
operator|::
name|Clipboard
argument_list|)
emit|;
emit|emit
name|clipboard
argument_list|()
operator|->
name|dataChanged
argument_list|()
emit|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|X11
operator|->
name|use_xfixes
operator|&&
name|event
operator|->
name|xproperty
operator|.
name|atom
operator|==
name|ATOM
argument_list|(
name|_QT_SELECTION_SENTINEL
argument_list|)
condition|)
block|{
if|if
condition|(
name|qt_check_selection_sentinel
argument_list|()
condition|)
block|{
emit|emit
name|clipboard
argument_list|()
operator|->
name|changed
argument_list|(
name|QClipboard
operator|::
name|Selection
argument_list|)
emit|;
emit|emit
name|clipboard
argument_list|()
operator|->
name|selectionChanged
argument_list|()
emit|;
block|}
block|}
elseif|else
if|if
condition|(
name|QApplicationPrivate
operator|::
name|obey_desktop_settings
condition|)
block|{
if|if
condition|(
name|event
operator|->
name|xproperty
operator|.
name|atom
operator|==
name|ATOM
argument_list|(
name|RESOURCE_MANAGER
argument_list|)
condition|)
name|qt_set_x11_resources
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|event
operator|->
name|xproperty
operator|.
name|atom
operator|==
name|ATOM
argument_list|(
name|_QT_SETTINGS_TIMESTAMP
argument_list|)
condition|)
name|qt_set_x11_resources
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|event
operator|->
name|xproperty
operator|.
name|window
operator|==
name|QX11Info
operator|::
name|appRootWindow
argument_list|()
condition|)
block|{
comment|// root properties for the default screen
if|if
condition|(
name|event
operator|->
name|xproperty
operator|.
name|atom
operator|==
name|ATOM
argument_list|(
name|_QT_INPUT_ENCODING
argument_list|)
condition|)
block|{
name|qt_set_input_encoding
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|xproperty
operator|.
name|atom
operator|==
name|ATOM
argument_list|(
name|_NET_SUPPORTED
argument_list|)
condition|)
block|{
name|qt_get_net_supported
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|xproperty
operator|.
name|atom
operator|==
name|ATOM
argument_list|(
name|_NET_VIRTUAL_ROOTS
argument_list|)
condition|)
block|{
name|qt_get_net_virtual_roots
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|xproperty
operator|.
name|atom
operator|==
name|ATOM
argument_list|(
name|_NET_WORKAREA
argument_list|)
condition|)
block|{
name|qt_desktopwidget_update_workarea
argument_list|()
expr_stmt|;
comment|// emit the workAreaResized() signal
name|QDesktopWidget
modifier|*
name|desktop
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
decl_stmt|;
name|int
name|numScreens
init|=
name|desktop
operator|->
name|numScreens
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numScreens
condition|;
operator|++
name|i
control|)
emit|emit
name|desktop
operator|->
name|workAreaResized
argument_list|(
name|i
argument_list|)
emit|;
block|}
block|}
elseif|else
if|if
condition|(
name|widget
condition|)
block|{
name|widget
operator|->
name|translatePropertyEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
comment|// don't know this window
block|}
break|break;
default|default:
break|break;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|x11EventFilter
name|bool
name|QApplication
operator|::
name|x11EventFilter
parameter_list|(
name|XEvent
modifier|*
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   Modal widgets; Since Xlib has little support for this we roll our own   modal widget mechanism.   A modal widget without a parent becomes application-modal.   A modal widget with a parent becomes modal to its parent and grandparents..    QApplicationPrivate::enterModal()         Enters modal state         Arguments:             QWidget *widget        A modal widget    QApplicationPrivate::leaveModal()         Leaves modal state for a widget         Arguments:             QWidget *widget        A modal widget  *****************************************************************************/
end_comment
begin_function
DECL|function|modalState
name|bool
name|QApplicationPrivate
operator|::
name|modalState
parameter_list|()
block|{
return|return
name|app_do_modal
return|;
block|}
end_function
begin_function
DECL|function|enterModal_sys
name|void
name|QApplicationPrivate
operator|::
name|enterModal_sys
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
operator|!
name|qt_modal_stack
condition|)
name|qt_modal_stack
operator|=
operator|new
name|QWidgetList
expr_stmt|;
name|QWidget
modifier|*
name|leave
init|=
name|qt_last_mouse_receiver
decl_stmt|;
if|if
condition|(
operator|!
name|leave
condition|)
name|leave
operator|=
name|QWidget
operator|::
name|find
argument_list|(
operator|(
name|WId
operator|)
name|curWin
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
literal|0
argument_list|,
name|leave
argument_list|)
expr_stmt|;
name|qt_modal_stack
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|app_do_modal
operator|=
literal|true
expr_stmt|;
name|curWin
operator|=
literal|0
expr_stmt|;
name|qt_last_mouse_receiver
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|leaveModal_sys
name|void
name|QApplicationPrivate
operator|::
name|leaveModal_sys
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
name|qt_modal_stack
operator|&&
name|qt_modal_stack
operator|->
name|removeAll
argument_list|(
name|widget
argument_list|)
condition|)
block|{
if|if
condition|(
name|qt_modal_stack
operator|->
name|isEmpty
argument_list|()
condition|)
block|{
operator|delete
name|qt_modal_stack
expr_stmt|;
name|qt_modal_stack
operator|=
literal|0
expr_stmt|;
name|QPoint
name|p
argument_list|(
name|QCursor
operator|::
name|pos
argument_list|()
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|QApplication
operator|::
name|widgetAt
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|leave
init|=
name|qt_last_mouse_receiver
decl_stmt|;
if|if
condition|(
operator|!
name|leave
condition|)
name|leave
operator|=
name|QWidget
operator|::
name|find
argument_list|(
operator|(
name|WId
operator|)
name|curWin
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|grabber
init|=
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
condition|)
block|{
name|w
operator|=
name|grabber
expr_stmt|;
if|if
condition|(
name|leave
operator|==
name|w
condition|)
name|leave
operator|=
literal|0
expr_stmt|;
block|}
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
name|w
argument_list|,
name|leave
argument_list|)
expr_stmt|;
comment|// send synthetic enter event
name|curWin
operator|=
name|w
condition|?
name|w
operator|->
name|effectiveWinId
argument_list|()
else|:
literal|0
expr_stmt|;
name|qt_last_mouse_receiver
operator|=
name|w
expr_stmt|;
block|}
block|}
name|app_do_modal
operator|=
name|qt_modal_stack
operator|!=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_try_modal
name|bool
name|qt_try_modal
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|XEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|qt_xdnd_dragging
condition|)
block|{
comment|// allow mouse events while DnD is active
switch|switch
condition|(
name|event
operator|->
name|type
condition|)
block|{
case|case
name|ButtonPress
case|:
case|case
name|ButtonRelease
case|:
case|case
name|MotionNotify
case|:
return|return
literal|true
return|;
default|default:
break|break;
block|}
block|}
comment|// allow mouse release events to be sent to widgets that have been pressed
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|ButtonRelease
condition|)
block|{
name|QWidget
modifier|*
name|alienWidget
init|=
name|widget
operator|->
name|childAt
argument_list|(
name|widget
operator|->
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
name|event
operator|->
name|xbutton
operator|.
name|x_root
argument_list|,
name|event
operator|->
name|xbutton
operator|.
name|y_root
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|widget
operator|==
name|qt_button_down
operator|||
operator|(
name|alienWidget
operator|&&
name|alienWidget
operator|==
name|qt_button_down
operator|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|QApplicationPrivate
operator|::
name|tryModalHelper
argument_list|(
name|widget
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// disallow mouse/key events
switch|switch
condition|(
name|event
operator|->
name|type
condition|)
block|{
case|case
name|ButtonPress
case|:
case|case
name|ButtonRelease
case|:
case|case
name|MotionNotify
case|:
case|case
name|XKeyPress
case|:
case|case
name|XKeyRelease
case|:
case|case
name|EnterNotify
case|:
case|case
name|LeaveNotify
case|:
case|case
name|ClientMessage
case|:
return|return
literal|false
return|;
default|default:
break|break;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   Popup widget mechanism    openPopup()         Adds a widget to the list of popup widgets         Arguments:             QWidget *widget        The popup widget to be added    closePopup()         Removes a widget from the list of popup widgets         Arguments:             QWidget *widget        The popup widget to be removed  *****************************************************************************/
end_comment
begin_decl_stmt
DECL|variable|openPopupCount
specifier|static
name|int
name|openPopupCount
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|openPopup
name|void
name|QApplicationPrivate
operator|::
name|openPopup
parameter_list|(
name|QWidget
modifier|*
name|popup
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QApplication
argument_list|)
expr_stmt|;
name|openPopupCount
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|QApplicationPrivate
operator|::
name|popupWidgets
condition|)
block|{
comment|// create list
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|=
operator|new
name|QWidgetList
expr_stmt|;
block|}
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|->
name|append
argument_list|(
name|popup
argument_list|)
expr_stmt|;
comment|// add to end of list
name|Display
modifier|*
name|dpy
init|=
name|X11
operator|->
name|display
decl_stmt|;
if|if
condition|(
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|->
name|count
argument_list|()
operator|==
literal|1
operator|&&
operator|!
name|qt_nograb
argument_list|()
condition|)
block|{
comment|// grab mouse/keyboard
name|Q_ASSERT
argument_list|(
name|popup
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|r
init|=
name|XGrabKeyboard
argument_list|(
name|dpy
argument_list|,
name|popup
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
literal|false
argument_list|,
name|GrabModeAsync
argument_list|,
name|GrabModeAsync
argument_list|,
name|X11
operator|->
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|popupGrabOk
operator|=
operator|(
name|r
operator|==
name|GrabSuccess
operator|)
operator|)
condition|)
block|{
name|r
operator|=
name|XGrabPointer
argument_list|(
name|dpy
argument_list|,
name|popup
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|(
name|ButtonPressMask
operator||
name|ButtonReleaseMask
operator||
name|ButtonMotionMask
operator||
name|EnterWindowMask
operator||
name|LeaveWindowMask
operator||
name|PointerMotionMask
operator|)
argument_list|,
name|GrabModeAsync
argument_list|,
name|GrabModeAsync
argument_list|,
name|XNone
argument_list|,
name|XNone
argument_list|,
name|X11
operator|->
name|time
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|popupGrabOk
operator|=
operator|(
name|r
operator|==
name|GrabSuccess
operator|)
operator|)
condition|)
block|{
comment|// transfer grab back to the keyboard grabber if any
if|if
condition|(
name|QWidgetPrivate
operator|::
name|keyboardGrabber
operator|!=
literal|0
condition|)
name|QWidgetPrivate
operator|::
name|keyboardGrabber
operator|->
name|grabKeyboard
argument_list|()
expr_stmt|;
else|else
name|XUngrabKeyboard
argument_list|(
name|dpy
argument_list|,
name|X11
operator|->
name|time
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// popups are not focus-handled by the window system (the first
comment|// popup grabbed the keyboard), so we have to do that manually: A
comment|// new popup gets the focus
if|if
condition|(
name|popup
operator|->
name|focusWidget
argument_list|()
condition|)
block|{
name|popup
operator|->
name|focusWidget
argument_list|()
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|PopupFocusReason
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|->
name|count
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// this was the first popup
if|if
condition|(
name|QWidget
modifier|*
name|fw
init|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
condition|)
block|{
name|QFocusEvent
name|e
argument_list|(
name|QEvent
operator|::
name|FocusOut
argument_list|,
name|Qt
operator|::
name|PopupFocusReason
argument_list|)
decl_stmt|;
name|q
operator|->
name|sendEvent
argument_list|(
name|fw
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|closePopup
name|void
name|QApplicationPrivate
operator|::
name|closePopup
parameter_list|(
name|QWidget
modifier|*
name|popup
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QApplication
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QApplicationPrivate
operator|::
name|popupWidgets
condition|)
return|return;
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|->
name|removeAll
argument_list|(
name|popup
argument_list|)
expr_stmt|;
if|if
condition|(
name|popup
operator|==
name|qt_popup_down
condition|)
block|{
name|qt_button_down
operator|=
literal|0
expr_stmt|;
name|qt_popup_down
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|->
name|count
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// this was the last popup
operator|delete
name|QApplicationPrivate
operator|::
name|popupWidgets
expr_stmt|;
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|qt_nograb
argument_list|()
operator|&&
name|popupGrabOk
condition|)
block|{
comment|// grabbing not disabled
name|Display
modifier|*
name|dpy
init|=
name|X11
operator|->
name|display
decl_stmt|;
if|if
condition|(
name|popup
operator|->
name|geometry
argument_list|()
operator|.
name|contains
argument_list|(
name|QPoint
argument_list|(
name|mouseGlobalXPos
argument_list|,
name|mouseGlobalYPos
argument_list|)
argument_list|)
operator|||
name|popup
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoMouseReplay
argument_list|)
condition|)
block|{
comment|// mouse release event or inside
name|replayPopupMouseEvent
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// mouse press event
name|mouseButtonPressTime
operator|-=
literal|10000
expr_stmt|;
comment|// avoid double click
name|replayPopupMouseEvent
operator|=
literal|true
expr_stmt|;
block|}
comment|// transfer grab back to mouse grabber if any, otherwise release the grab
if|if
condition|(
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|!=
literal|0
condition|)
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|->
name|grabMouse
argument_list|()
expr_stmt|;
else|else
name|XUngrabPointer
argument_list|(
name|dpy
argument_list|,
name|X11
operator|->
name|time
argument_list|)
expr_stmt|;
comment|// transfer grab back to keyboard grabber if any, otherwise release the grab
if|if
condition|(
name|QWidgetPrivate
operator|::
name|keyboardGrabber
operator|!=
literal|0
condition|)
name|QWidgetPrivate
operator|::
name|keyboardGrabber
operator|->
name|grabKeyboard
argument_list|()
expr_stmt|;
else|else
name|XUngrabKeyboard
argument_list|(
name|dpy
argument_list|,
name|X11
operator|->
name|time
argument_list|)
expr_stmt|;
name|XFlush
argument_list|(
name|dpy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QApplicationPrivate
operator|::
name|active_window
condition|)
block|{
if|if
condition|(
name|QWidget
modifier|*
name|fw
init|=
name|QApplicationPrivate
operator|::
name|active_window
operator|->
name|focusWidget
argument_list|()
condition|)
block|{
if|if
condition|(
name|fw
operator|!=
name|QApplication
operator|::
name|focusWidget
argument_list|()
condition|)
block|{
name|fw
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|PopupFocusReason
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QFocusEvent
name|e
argument_list|(
name|QEvent
operator|::
name|FocusIn
argument_list|,
name|Qt
operator|::
name|PopupFocusReason
argument_list|)
decl_stmt|;
name|q
operator|->
name|sendEvent
argument_list|(
name|fw
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// popups are not focus-handled by the window system (the
comment|// first popup grabbed the keyboard), so we have to do that
comment|// manually: A popup was closed, so the previous popup gets
comment|// the focus.
name|QWidget
modifier|*
name|aw
init|=
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|->
name|last
argument_list|()
decl_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|fw
init|=
name|aw
operator|->
name|focusWidget
argument_list|()
condition|)
name|fw
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|PopupFocusReason
argument_list|)
expr_stmt|;
comment|// regrab the keyboard and mouse in case 'popup' lost the grab
if|if
condition|(
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|->
name|count
argument_list|()
operator|==
literal|1
operator|&&
operator|!
name|qt_nograb
argument_list|()
condition|)
block|{
comment|// grab mouse/keyboard
name|Display
modifier|*
name|dpy
init|=
name|X11
operator|->
name|display
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|aw
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|r
init|=
name|XGrabKeyboard
argument_list|(
name|dpy
argument_list|,
name|aw
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
literal|false
argument_list|,
name|GrabModeAsync
argument_list|,
name|GrabModeAsync
argument_list|,
name|X11
operator|->
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|popupGrabOk
operator|=
operator|(
name|r
operator|==
name|GrabSuccess
operator|)
operator|)
condition|)
block|{
name|r
operator|=
name|XGrabPointer
argument_list|(
name|dpy
argument_list|,
name|aw
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|(
name|ButtonPressMask
operator||
name|ButtonReleaseMask
operator||
name|ButtonMotionMask
operator||
name|EnterWindowMask
operator||
name|LeaveWindowMask
operator||
name|PointerMotionMask
operator|)
argument_list|,
name|GrabModeAsync
argument_list|,
name|GrabModeAsync
argument_list|,
name|XNone
argument_list|,
name|XNone
argument_list|,
name|X11
operator|->
name|time
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|popupGrabOk
operator|=
operator|(
name|r
operator|==
name|GrabSuccess
operator|)
operator|)
condition|)
block|{
comment|// transfer grab back to keyboard grabber
if|if
condition|(
name|QWidgetPrivate
operator|::
name|keyboardGrabber
operator|!=
literal|0
condition|)
name|QWidgetPrivate
operator|::
name|keyboardGrabber
operator|->
name|grabKeyboard
argument_list|()
expr_stmt|;
else|else
name|XUngrabKeyboard
argument_list|(
name|dpy
argument_list|,
name|X11
operator|->
name|time
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|/*****************************************************************************   Event translation; translates X11 events to Qt events  *****************************************************************************/
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Mouse event translation
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Xlib doesn't give mouse double click events, so we generate them by
end_comment
begin_comment
comment|// comparing window, time and position between two mouse press events.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|translateMouseButtons
specifier|static
name|Qt
operator|::
name|MouseButtons
name|translateMouseButtons
parameter_list|(
name|int
name|s
parameter_list|)
block|{
name|Qt
operator|::
name|MouseButtons
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|s
operator|&
name|Button1Mask
condition|)
name|ret
operator||=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|Button2Mask
condition|)
name|ret
operator||=
name|Qt
operator|::
name|MidButton
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|Button3Mask
condition|)
name|ret
operator||=
name|Qt
operator|::
name|RightButton
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|translateModifiers
name|Qt
operator|::
name|KeyboardModifiers
name|QX11Data
operator|::
name|translateModifiers
parameter_list|(
name|int
name|s
parameter_list|)
block|{
name|Qt
operator|::
name|KeyboardModifiers
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|s
operator|&
name|ShiftMask
condition|)
name|ret
operator||=
name|Qt
operator|::
name|ShiftModifier
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|ControlMask
condition|)
name|ret
operator||=
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|qt_alt_mask
condition|)
name|ret
operator||=
name|Qt
operator|::
name|AltModifier
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|qt_meta_mask
condition|)
name|ret
operator||=
name|Qt
operator|::
name|MetaModifier
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|qt_mode_switch_mask
condition|)
name|ret
operator||=
name|Qt
operator|::
name|GroupSwitchModifier
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|translateMouseEvent
name|bool
name|QETWidget
operator|::
name|translateMouseEvent
parameter_list|(
specifier|const
name|XEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isWindow
argument_list|()
operator|&&
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
condition|)
name|Q_ASSERT
argument_list|(
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|QEvent
operator|::
name|Type
name|type
decl_stmt|;
comment|// event parameters
name|QPoint
name|pos
decl_stmt|;
name|QPoint
name|globalPos
decl_stmt|;
name|Qt
operator|::
name|MouseButton
name|button
init|=
name|Qt
operator|::
name|NoButton
decl_stmt|;
name|Qt
operator|::
name|MouseButtons
name|buttons
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
decl_stmt|;
name|XEvent
name|nextEvent
decl_stmt|;
if|if
condition|(
name|qt_sm_blockUserInput
condition|)
comment|// block user interaction during session management
return|return
literal|true
return|;
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|MotionNotify
condition|)
block|{
comment|// mouse move
if|if
condition|(
name|event
operator|->
name|xmotion
operator|.
name|root
operator|!=
name|RootWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
argument_list|)
operator|&&
operator|!
name|qt_xdnd_dragging
condition|)
return|return
literal|false
return|;
name|XMotionEvent
name|lastMotion
init|=
name|event
operator|->
name|xmotion
decl_stmt|;
while|while
condition|(
name|XPending
argument_list|(
name|X11
operator|->
name|display
argument_list|)
condition|)
block|{
comment|// compress mouse moves
name|XNextEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|nextEvent
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextEvent
operator|.
name|type
operator|==
name|ConfigureNotify
operator|||
name|nextEvent
operator|.
name|type
operator|==
name|PropertyNotify
operator|||
name|nextEvent
operator|.
name|type
operator|==
name|Expose
operator|||
name|nextEvent
operator|.
name|type
operator|==
name|GraphicsExpose
operator|||
name|nextEvent
operator|.
name|type
operator|==
name|NoExpose
operator|||
name|nextEvent
operator|.
name|type
operator|==
name|KeymapNotify
operator|||
operator|(
operator|(
name|nextEvent
operator|.
name|type
operator|==
name|EnterNotify
operator|||
name|nextEvent
operator|.
name|type
operator|==
name|LeaveNotify
operator|)
operator|&&
name|qt_button_down
operator|==
name|this
operator|)
operator|||
operator|(
name|nextEvent
operator|.
name|type
operator|==
name|ClientMessage
operator|&&
operator|(
name|nextEvent
operator|.
name|xclient
operator|.
name|message_type
operator|==
name|ATOM
argument_list|(
name|_QT_SCROLL_DONE
argument_list|)
operator|||
operator|(
name|nextEvent
operator|.
name|xclient
operator|.
name|message_type
operator|==
name|ATOM
argument_list|(
name|WM_PROTOCOLS
argument_list|)
operator|&&
operator|(
name|Atom
operator|)
name|nextEvent
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|0
index|]
operator|==
name|ATOM
argument_list|(
name|_NET_WM_SYNC_REQUEST
argument_list|)
operator|)
operator|)
operator|)
condition|)
block|{
name|qApp
operator|->
name|x11ProcessEvent
argument_list|(
operator|&
name|nextEvent
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|nextEvent
operator|.
name|type
operator|!=
name|MotionNotify
operator|||
name|nextEvent
operator|.
name|xmotion
operator|.
name|window
operator|!=
name|event
operator|->
name|xmotion
operator|.
name|window
operator|||
name|nextEvent
operator|.
name|xmotion
operator|.
name|state
operator|!=
name|event
operator|->
name|xmotion
operator|.
name|state
condition|)
block|{
name|XPutBackEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|nextEvent
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|qt_x11EventFilter
argument_list|(
operator|&
name|nextEvent
argument_list|)
operator|&&
operator|!
name|x11Event
argument_list|(
operator|&
name|nextEvent
argument_list|)
condition|)
comment|// send event through filter
name|lastMotion
operator|=
name|nextEvent
operator|.
name|xmotion
expr_stmt|;
else|else
break|break;
block|}
name|type
operator|=
name|QEvent
operator|::
name|MouseMove
expr_stmt|;
name|pos
operator|.
name|rx
argument_list|()
operator|=
name|lastMotion
operator|.
name|x
expr_stmt|;
name|pos
operator|.
name|ry
argument_list|()
operator|=
name|lastMotion
operator|.
name|y
expr_stmt|;
name|pos
operator|=
name|d
operator|->
name|mapFromWS
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|globalPos
operator|.
name|rx
argument_list|()
operator|=
name|lastMotion
operator|.
name|x_root
expr_stmt|;
name|globalPos
operator|.
name|ry
argument_list|()
operator|=
name|lastMotion
operator|.
name|y_root
expr_stmt|;
name|buttons
operator|=
name|translateMouseButtons
argument_list|(
name|lastMotion
operator|.
name|state
argument_list|)
expr_stmt|;
name|modifiers
operator|=
name|X11
operator|->
name|translateModifiers
argument_list|(
name|lastMotion
operator|.
name|state
argument_list|)
expr_stmt|;
if|if
condition|(
name|qt_button_down
operator|&&
operator|!
name|buttons
condition|)
name|qt_button_down
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|EnterNotify
operator|||
name|event
operator|->
name|type
operator|==
name|LeaveNotify
condition|)
block|{
name|XEvent
modifier|*
name|xevent
init|=
operator|(
name|XEvent
operator|*
operator|)
name|event
decl_stmt|;
comment|//unsigned int xstate = event->xcrossing.state;
name|type
operator|=
name|QEvent
operator|::
name|MouseMove
expr_stmt|;
name|pos
operator|.
name|rx
argument_list|()
operator|=
name|xevent
operator|->
name|xcrossing
operator|.
name|x
expr_stmt|;
name|pos
operator|.
name|ry
argument_list|()
operator|=
name|xevent
operator|->
name|xcrossing
operator|.
name|y
expr_stmt|;
name|pos
operator|=
name|d
operator|->
name|mapFromWS
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|globalPos
operator|.
name|rx
argument_list|()
operator|=
name|xevent
operator|->
name|xcrossing
operator|.
name|x_root
expr_stmt|;
name|globalPos
operator|.
name|ry
argument_list|()
operator|=
name|xevent
operator|->
name|xcrossing
operator|.
name|y_root
expr_stmt|;
name|buttons
operator|=
name|translateMouseButtons
argument_list|(
name|xevent
operator|->
name|xcrossing
operator|.
name|state
argument_list|)
expr_stmt|;
name|modifiers
operator|=
name|X11
operator|->
name|translateModifiers
argument_list|(
name|xevent
operator|->
name|xcrossing
operator|.
name|state
argument_list|)
expr_stmt|;
if|if
condition|(
name|qt_button_down
operator|&&
operator|!
name|buttons
condition|)
name|qt_button_down
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|qt_button_down
condition|)
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// button press or release
name|pos
operator|.
name|rx
argument_list|()
operator|=
name|event
operator|->
name|xbutton
operator|.
name|x
expr_stmt|;
name|pos
operator|.
name|ry
argument_list|()
operator|=
name|event
operator|->
name|xbutton
operator|.
name|y
expr_stmt|;
name|pos
operator|=
name|d
operator|->
name|mapFromWS
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|globalPos
operator|.
name|rx
argument_list|()
operator|=
name|event
operator|->
name|xbutton
operator|.
name|x_root
expr_stmt|;
name|globalPos
operator|.
name|ry
argument_list|()
operator|=
name|event
operator|->
name|xbutton
operator|.
name|y_root
expr_stmt|;
name|buttons
operator|=
name|translateMouseButtons
argument_list|(
name|event
operator|->
name|xbutton
operator|.
name|state
argument_list|)
expr_stmt|;
name|modifiers
operator|=
name|X11
operator|->
name|translateModifiers
argument_list|(
name|event
operator|->
name|xbutton
operator|.
name|state
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|event
operator|->
name|xbutton
operator|.
name|button
condition|)
block|{
case|case
name|Button1
case|:
name|button
operator|=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
break|break;
case|case
name|Button2
case|:
name|button
operator|=
name|Qt
operator|::
name|MidButton
expr_stmt|;
break|break;
case|case
name|Button3
case|:
name|button
operator|=
name|Qt
operator|::
name|RightButton
expr_stmt|;
break|break;
case|case
name|Button4
case|:
case|case
name|Button5
case|:
case|case
literal|6
case|:
case|case
literal|7
case|:
comment|// the fancy mouse wheel.
comment|// We are only interested in ButtonPress.
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|ButtonPress
condition|)
block|{
comment|// compress wheel events (the X Server will simply
comment|// send a button press for each single notch,
comment|// regardless whether the application can catch up
comment|// or not)
name|int
name|delta
init|=
literal|1
decl_stmt|;
name|XEvent
name|xevent
decl_stmt|;
while|while
condition|(
name|XCheckTypedWindowEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|effectiveWinId
argument_list|()
argument_list|,
name|ButtonPress
argument_list|,
operator|&
name|xevent
argument_list|)
condition|)
block|{
if|if
condition|(
name|xevent
operator|.
name|xbutton
operator|.
name|button
operator|!=
name|event
operator|->
name|xbutton
operator|.
name|button
condition|)
block|{
name|XPutBackEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|xevent
argument_list|)
expr_stmt|;
break|break;
block|}
name|delta
operator|++
expr_stmt|;
block|}
comment|// the delta is defined as multiples of
comment|// WHEEL_DELTA, which is set to 120. Future wheels
comment|// may offer a finer-resolution. A positive delta
comment|// indicates forward rotation, a negative one
comment|// backward rotation respectively.
name|int
name|btn
init|=
name|event
operator|->
name|xbutton
operator|.
name|button
decl_stmt|;
name|delta
operator|*=
literal|120
operator|*
operator|(
operator|(
name|btn
operator|==
name|Button4
operator|||
name|btn
operator|==
literal|6
operator|)
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
expr_stmt|;
name|bool
name|hor
init|=
operator|(
operator|(
operator|(
name|btn
operator|==
name|Button4
operator|||
name|btn
operator|==
name|Button5
operator|)
operator|&&
operator|(
name|modifiers
operator|&
name|Qt
operator|::
name|AltModifier
operator|)
operator|)
operator|||
operator|(
name|btn
operator|==
literal|6
operator|||
name|btn
operator|==
literal|7
operator|)
operator|)
decl_stmt|;
name|translateWheelEvent
argument_list|(
name|globalPos
operator|.
name|x
argument_list|()
argument_list|,
name|globalPos
operator|.
name|y
argument_list|()
argument_list|,
name|delta
argument_list|,
name|buttons
argument_list|,
name|modifiers
argument_list|,
operator|(
name|hor
operator|)
condition|?
name|Qt
operator|::
name|Horizontal
else|:
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
literal|8
case|:
name|button
operator|=
name|Qt
operator|::
name|XButton1
expr_stmt|;
break|break;
case|case
literal|9
case|:
name|button
operator|=
name|Qt
operator|::
name|XButton2
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|ButtonPress
condition|)
block|{
comment|// mouse button pressed
name|buttons
operator||=
name|button
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_IRIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_TABLET
argument_list|)
name|QTabletDeviceDataList
modifier|*
name|tablets
init|=
name|qt_tablet_devices
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tablets
operator|->
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTabletDeviceData
modifier|&
name|tab
init|=
name|tablets
operator|->
name|operator
name|[]
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|XEvent
name|myEv
decl_stmt|;
if|if
condition|(
name|XCheckTypedEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|tab
operator|.
name|xinput_button_press
argument_list|,
operator|&
name|myEv
argument_list|)
condition|)
block|{
if|if
condition|(
name|translateXinputEvent
argument_list|(
operator|&
name|myEv
argument_list|,
operator|&
name|tab
argument_list|)
condition|)
block|{
comment|//Spontaneous event sent.  Check if we need to continue.
if|if
condition|(
name|qt_tabletChokeMouse
condition|)
block|{
name|qt_tabletChokeMouse
operator|=
literal|false
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|qt_button_down
condition|)
block|{
name|qt_button_down
operator|=
name|childAt
argument_list|(
name|pos
argument_list|)
expr_stmt|;
comment|//magic for masked widgets
if|if
condition|(
operator|!
name|qt_button_down
condition|)
name|qt_button_down
operator|=
name|this
expr_stmt|;
block|}
if|if
condition|(
name|mouseActWindow
operator|==
name|event
operator|->
name|xbutton
operator|.
name|window
operator|&&
name|mouseButtonPressed
operator|==
name|button
operator|&&
operator|(
name|long
operator|)
name|event
operator|->
name|xbutton
operator|.
name|time
operator|-
operator|(
name|long
operator|)
name|mouseButtonPressTime
operator|<
name|QApplication
operator|::
name|doubleClickInterval
argument_list|()
operator|&&
name|qAbs
argument_list|(
name|event
operator|->
name|xbutton
operator|.
name|x
operator|-
name|mouseXPos
argument_list|)
operator|<
name|QT_GUI_DOUBLE_CLICK_RADIUS
operator|&&
name|qAbs
argument_list|(
name|event
operator|->
name|xbutton
operator|.
name|y
operator|-
name|mouseYPos
argument_list|)
operator|<
name|QT_GUI_DOUBLE_CLICK_RADIUS
condition|)
block|{
name|type
operator|=
name|QEvent
operator|::
name|MouseButtonDblClick
expr_stmt|;
name|mouseButtonPressTime
operator|-=
literal|2000
expr_stmt|;
comment|// no double-click next time
block|}
else|else
block|{
name|type
operator|=
name|QEvent
operator|::
name|MouseButtonPress
expr_stmt|;
name|mouseButtonPressTime
operator|=
name|event
operator|->
name|xbutton
operator|.
name|time
expr_stmt|;
block|}
name|mouseButtonPressed
operator|=
name|button
expr_stmt|;
comment|// save event params for
name|mouseXPos
operator|=
name|event
operator|->
name|xbutton
operator|.
name|x
expr_stmt|;
comment|// future double click tests
name|mouseYPos
operator|=
name|event
operator|->
name|xbutton
operator|.
name|y
expr_stmt|;
name|mouseGlobalXPos
operator|=
name|globalPos
operator|.
name|x
argument_list|()
expr_stmt|;
name|mouseGlobalYPos
operator|=
name|globalPos
operator|.
name|y
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// mouse button released
name|buttons
operator|&=
operator|~
name|button
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_IRIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_TABLET
argument_list|)
name|QTabletDeviceDataList
modifier|*
name|tablets
init|=
name|qt_tablet_devices
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tablets
operator|->
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTabletDeviceData
modifier|&
name|tab
init|=
name|tablets
operator|->
name|operator
name|[]
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|XEvent
name|myEv
decl_stmt|;
if|if
condition|(
name|XCheckTypedEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|tab
operator|.
name|xinput_button_press
argument_list|,
operator|&
name|myEv
argument_list|)
condition|)
block|{
if|if
condition|(
name|translateXinputEvent
argument_list|(
operator|&
name|myEv
argument_list|,
operator|&
name|tab
argument_list|)
condition|)
block|{
comment|//Spontaneous event sent.  Check if we need to continue.
if|if
condition|(
name|qt_tabletChokeMouse
condition|)
block|{
name|qt_tabletChokeMouse
operator|=
literal|false
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
endif|#
directive|endif
name|type
operator|=
name|QEvent
operator|::
name|MouseButtonRelease
expr_stmt|;
block|}
block|}
name|mouseActWindow
operator|=
name|effectiveWinId
argument_list|()
expr_stmt|;
comment|// save some event params
name|mouseButtonState
operator|=
name|buttons
expr_stmt|;
if|if
condition|(
name|type
operator|==
literal|0
condition|)
comment|// don't send event
return|return
literal|false
return|;
if|if
condition|(
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|inPopupMode
argument_list|()
condition|)
block|{
comment|// in popup mode
name|QWidget
modifier|*
name|activePopupWidget
init|=
name|qApp
operator|->
name|activePopupWidget
argument_list|()
decl_stmt|;
name|QWidget
modifier|*
name|popup
init|=
name|qApp
operator|->
name|activePopupWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|popup
operator|!=
name|this
condition|)
block|{
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|LeaveNotify
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|(
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
operator|)
operator|&&
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
operator|&&
literal|0
condition|)
name|popup
operator|=
name|this
expr_stmt|;
else|else
comment|// send to last popup
name|pos
operator|=
name|popup
operator|->
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
expr_stmt|;
block|}
name|bool
name|releaseAfter
init|=
literal|false
decl_stmt|;
name|QWidget
modifier|*
name|popupChild
init|=
name|popup
operator|->
name|childAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|popup
operator|!=
name|qt_popup_down
condition|)
block|{
name|qt_button_down
operator|=
literal|0
expr_stmt|;
name|qt_popup_down
operator|=
literal|0
expr_stmt|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|MouseButtonDblClick
case|:
name|qt_button_down
operator|=
name|popupChild
expr_stmt|;
name|qt_popup_down
operator|=
name|popup
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
name|releaseAfter
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
break|break;
comment|// nothing for mouse move
block|}
name|int
name|oldOpenPopupCount
init|=
name|openPopupCount
decl_stmt|;
if|if
condition|(
name|popup
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
comment|// deliver event
name|replayPopupMouseEvent
operator|=
literal|false
expr_stmt|;
name|QWidget
modifier|*
name|receiver
init|=
name|popup
decl_stmt|;
name|QPoint
name|widgetPos
init|=
name|pos
decl_stmt|;
if|if
condition|(
name|qt_button_down
condition|)
name|receiver
operator|=
name|qt_button_down
expr_stmt|;
elseif|else
if|if
condition|(
name|popupChild
condition|)
name|receiver
operator|=
name|popupChild
expr_stmt|;
if|if
condition|(
name|receiver
operator|!=
name|popup
condition|)
name|widgetPos
operator|=
name|receiver
operator|->
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|alien
init|=
name|childAt
argument_list|(
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
argument_list|)
decl_stmt|;
name|QMouseEvent
name|e
argument_list|(
name|type
argument_list|,
name|widgetPos
argument_list|,
name|globalPos
argument_list|,
name|button
argument_list|,
name|buttons
argument_list|,
name|modifiers
argument_list|)
decl_stmt|;
name|QApplicationPrivate
operator|::
name|sendMouseEvent
argument_list|(
name|receiver
argument_list|,
operator|&
name|e
argument_list|,
name|alien
argument_list|,
name|this
argument_list|,
operator|&
name|qt_button_down
argument_list|,
name|qt_last_mouse_receiver
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// close disabled popups when a mouse button is pressed or released
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|MouseButtonDblClick
case|:
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
name|popup
operator|->
name|close
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|qApp
operator|->
name|activePopupWidget
argument_list|()
operator|!=
name|activePopupWidget
operator|&&
name|replayPopupMouseEvent
condition|)
block|{
comment|// the active popup was closed, replay the mouse event
if|if
condition|(
operator|!
operator|(
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
operator|)
condition|)
block|{
if|#
directive|if
literal|1
name|qt_button_down
operator|=
literal|0
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|buttons
operator|==
name|button
condition|)
name|qt_button_down
operator|=
name|this
expr_stmt|;
name|QMouseEvent
name|e
argument_list|(
name|type
argument_list|,
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
argument_list|,
name|globalPos
argument_list|,
name|button
argument_list|,
name|buttons
argument_list|,
name|modifiers
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|this
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonPress
operator|&&
name|button
operator|==
name|Qt
operator|::
name|RightButton
operator|&&
operator|(
name|openPopupCount
operator|==
name|oldOpenPopupCount
operator|)
condition|)
block|{
name|QContextMenuEvent
name|e
argument_list|(
name|QContextMenuEvent
operator|::
name|Mouse
argument_list|,
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
argument_list|,
name|globalPos
argument_list|,
name|modifiers
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|this
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
name|replayPopupMouseEvent
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonPress
operator|&&
name|button
operator|==
name|Qt
operator|::
name|RightButton
operator|&&
operator|(
name|openPopupCount
operator|==
name|oldOpenPopupCount
operator|)
condition|)
block|{
name|QWidget
modifier|*
name|popupEvent
init|=
name|popup
decl_stmt|;
if|if
condition|(
name|qt_button_down
condition|)
name|popupEvent
operator|=
name|qt_button_down
expr_stmt|;
elseif|else
if|if
condition|(
name|popupChild
condition|)
name|popupEvent
operator|=
name|popupChild
expr_stmt|;
name|QContextMenuEvent
name|e
argument_list|(
name|QContextMenuEvent
operator|::
name|Mouse
argument_list|,
name|pos
argument_list|,
name|globalPos
argument_list|,
name|modifiers
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|popupEvent
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|releaseAfter
condition|)
block|{
name|qt_button_down
operator|=
literal|0
expr_stmt|;
name|qt_popup_down
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
name|QWidget
modifier|*
name|alienWidget
init|=
name|childAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|widget
init|=
name|QApplicationPrivate
operator|::
name|pickMouseReceiver
argument_list|(
name|this
argument_list|,
name|globalPos
argument_list|,
name|pos
argument_list|,
name|type
argument_list|,
name|buttons
argument_list|,
name|qt_button_down
argument_list|,
name|alienWidget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonRelease
condition|)
name|QApplicationPrivate
operator|::
name|mouse_buttons
operator|&=
operator|~
name|button
expr_stmt|;
return|return
literal|false
return|;
comment|// don't send event
block|}
name|int
name|oldOpenPopupCount
init|=
name|openPopupCount
decl_stmt|;
name|QMouseEvent
name|e
argument_list|(
name|type
argument_list|,
name|pos
argument_list|,
name|globalPos
argument_list|,
name|button
argument_list|,
name|buttons
argument_list|,
name|modifiers
argument_list|)
decl_stmt|;
name|QApplicationPrivate
operator|::
name|sendMouseEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|e
argument_list|,
name|alienWidget
argument_list|,
name|this
argument_list|,
operator|&
name|qt_button_down
argument_list|,
name|qt_last_mouse_receiver
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonPress
operator|&&
name|button
operator|==
name|Qt
operator|::
name|RightButton
operator|&&
operator|(
name|openPopupCount
operator|==
name|oldOpenPopupCount
operator|)
condition|)
block|{
name|QContextMenuEvent
name|e
argument_list|(
name|QContextMenuEvent
operator|::
name|Mouse
argument_list|,
name|pos
argument_list|,
name|globalPos
argument_list|,
name|modifiers
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Wheel event translation
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|translateWheelEvent
name|bool
name|QETWidget
operator|::
name|translateWheelEvent
parameter_list|(
name|int
name|global_x
parameter_list|,
name|int
name|global_y
parameter_list|,
name|int
name|delta
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|)
block|{
specifier|const
name|QPoint
name|globalPos
init|=
name|QPoint
argument_list|(
name|global_x
argument_list|,
name|global_y
argument_list|)
decl_stmt|;
name|QPoint
name|pos
init|=
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|widget
init|=
name|childAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
name|widget
operator|=
name|this
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|widget
operator|->
name|internalWinId
argument_list|()
condition|)
name|pos
operator|=
name|widget
operator|->
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|ALIEN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QETWidget::translateWheelEvent: receiver:"
operator|<<
name|widget
operator|<<
literal|"pos:"
operator|<<
name|pos
expr_stmt|;
endif|#
directive|endif
comment|// send the event to the widget or its ancestors
block|{
name|QWidget
modifier|*
name|popup
init|=
name|qApp
operator|->
name|activePopupWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|popup
operator|&&
name|window
argument_list|()
operator|!=
name|popup
condition|)
name|popup
operator|->
name|close
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
name|QWheelEvent
name|e
argument_list|(
name|pos
argument_list|,
name|globalPos
argument_list|,
name|delta
argument_list|,
name|buttons
argument_list|,
name|modifiers
argument_list|,
name|orient
argument_list|)
decl_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|e
argument_list|)
condition|)
endif|#
directive|endif
return|return
literal|true
return|;
block|}
comment|// send the event to the widget that has the focus or its ancestors, if different
if|if
condition|(
name|widget
operator|!=
name|qApp
operator|->
name|focusWidget
argument_list|()
operator|&&
operator|(
name|widget
operator|=
name|qApp
operator|->
name|focusWidget
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|widget
operator|&&
operator|!
name|widget
operator|->
name|internalWinId
argument_list|()
condition|)
name|pos
operator|=
name|widget
operator|->
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|popup
init|=
name|qApp
operator|->
name|activePopupWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|popup
operator|&&
name|widget
operator|!=
name|popup
condition|)
name|popup
operator|->
name|hide
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
name|QWheelEvent
name|e
argument_list|(
name|pos
argument_list|,
name|globalPos
argument_list|,
name|delta
argument_list|,
name|buttons
argument_list|,
name|modifiers
argument_list|,
name|orient
argument_list|)
decl_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|e
argument_list|)
condition|)
endif|#
directive|endif
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// XInput Translation Event
end_comment
begin_comment
comment|//
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_TABLET
argument_list|)
end_if
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_IRIX
argument_list|)
end_if
begin_function
DECL|function|fetchWacomToolId
name|void
name|fetchWacomToolId
parameter_list|(
name|int
modifier|&
name|deviceType
parameter_list|,
name|qint64
modifier|&
name|serialId
parameter_list|)
block|{
if|if
condition|(
name|ptrWacomConfigInit
operator|==
literal|0
condition|)
comment|// we actually have the lib
return|return;
name|WACOMCONFIG
modifier|*
name|config
init|=
name|ptrWacomConfigInit
argument_list|(
name|X11
operator|->
name|display
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|0
condition|)
return|return;
name|WACOMDEVICE
modifier|*
name|device
init|=
name|ptrWacomConfigOpenDevice
argument_list|(
name|config
argument_list|,
name|wacomDeviceName
argument_list|()
operator|->
name|constData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|device
operator|==
literal|0
condition|)
return|return;
name|unsigned
name|keys
index|[
literal|1
index|]
decl_stmt|;
name|int
name|serialInt
decl_stmt|;
name|ptrWacomConfigGetRawParam
argument_list|(
name|device
argument_list|,
name|XWACOM_PARAM_TOOLSERIAL
argument_list|,
operator|&
name|serialInt
argument_list|,
literal|1
argument_list|,
name|keys
argument_list|)
expr_stmt|;
name|serialId
operator|=
name|serialInt
expr_stmt|;
name|int
name|toolId
decl_stmt|;
name|ptrWacomConfigGetRawParam
argument_list|(
name|device
argument_list|,
name|XWACOM_PARAM_TOOLID
argument_list|,
operator|&
name|toolId
argument_list|,
literal|1
argument_list|,
name|keys
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|toolId
condition|)
block|{
case|case
literal|0x007
case|:
comment|/* Mouse 4D and 2D */
case|case
literal|0x017
case|:
comment|/* Intuos3 2D Mouse */
case|case
literal|0x094
case|:
case|case
literal|0x09c
case|:
name|deviceType
operator|=
name|QTabletEvent
operator|::
name|FourDMouse
expr_stmt|;
break|break;
case|case
literal|0x096
case|:
comment|/* Lens cursor */
case|case
literal|0x097
case|:
comment|/* Intuos3 Lens cursor */
name|deviceType
operator|=
name|QTabletEvent
operator|::
name|Puck
expr_stmt|;
break|break;
case|case
literal|0x0fa
case|:
case|case
literal|0x81b
case|:
comment|/* Intuos3 Classic Pen Eraser */
case|case
literal|0x82a
case|:
comment|/* Eraser */
case|case
literal|0x82b
case|:
comment|/* Intuos3 Grip Pen Eraser */
case|case
literal|0x85a
case|:
case|case
literal|0x91a
case|:
case|case
literal|0x91b
case|:
comment|/* Intuos3 Airbrush Eraser */
case|case
literal|0xd1a
case|:
name|deviceType
operator|=
name|QTabletEvent
operator|::
name|XFreeEraser
expr_stmt|;
break|break;
case|case
literal|0x112
case|:
case|case
literal|0x912
case|:
case|case
literal|0x913
case|:
comment|/* Intuos3 Airbrush */
case|case
literal|0xd12
case|:
name|deviceType
operator|=
name|QTabletEvent
operator|::
name|Airbrush
expr_stmt|;
break|break;
case|case
literal|0x012
case|:
case|case
literal|0x022
case|:
case|case
literal|0x032
case|:
case|case
literal|0x801
case|:
comment|/* Intuos3 Inking pen */
case|case
literal|0x812
case|:
comment|/* Inking pen */
case|case
literal|0x813
case|:
comment|/* Intuos3 Classic Pen */
case|case
literal|0x822
case|:
comment|/* Pen */
case|case
literal|0x823
case|:
comment|/* Intuos3 Grip Pen */
case|case
literal|0x832
case|:
comment|/* Stroke pen */
case|case
literal|0x842
case|:
case|case
literal|0x852
case|:
case|case
literal|0x885
case|:
comment|/* Intuos3 Marker Pen */
default|default:
comment|/* Unknown tool */
name|deviceType
operator|=
name|QTabletEvent
operator|::
name|Stylus
expr_stmt|;
block|}
comment|/* Close device and return */
name|ptrWacomConfigCloseDevice
argument_list|(
name|device
argument_list|)
expr_stmt|;
name|ptrWacomConfigTerm
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_struct
DECL|struct|qt_tablet_motion_data
struct|struct
name|qt_tablet_motion_data
block|{
DECL|member|filterByWidget
name|bool
name|filterByWidget
decl_stmt|;
DECL|member|widget
specifier|const
name|QWidget
modifier|*
name|widget
decl_stmt|;
DECL|member|etWidget
specifier|const
name|QWidget
modifier|*
name|etWidget
decl_stmt|;
DECL|member|tabletMotionType
name|int
name|tabletMotionType
decl_stmt|;
DECL|member|error
name|bool
name|error
decl_stmt|;
comment|// found a reason to stop searching
block|}
struct|;
end_struct
begin_function
DECL|function|qt_mouseMotion_scanner
specifier|static
name|Bool
name|qt_mouseMotion_scanner
parameter_list|(
name|Display
modifier|*
parameter_list|,
name|XEvent
modifier|*
name|event
parameter_list|,
name|XPointer
name|arg
parameter_list|)
block|{
name|qt_tablet_motion_data
modifier|*
name|data
init|=
operator|(
name|qt_tablet_motion_data
operator|*
operator|)
name|arg
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|error
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|MotionNotify
condition|)
return|return
literal|true
return|;
name|data
operator|->
name|error
operator|=
name|event
operator|->
name|type
operator|!=
name|data
operator|->
name|tabletMotionType
expr_stmt|;
comment|// we stop compression when another event gets in between.
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|qt_tabletMotion_scanner
specifier|static
name|Bool
name|qt_tabletMotion_scanner
parameter_list|(
name|Display
modifier|*
parameter_list|,
name|XEvent
modifier|*
name|event
parameter_list|,
name|XPointer
name|arg
parameter_list|)
block|{
name|qt_tablet_motion_data
modifier|*
name|data
init|=
operator|(
name|qt_tablet_motion_data
operator|*
operator|)
name|arg
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|error
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|data
operator|->
name|tabletMotionType
condition|)
block|{
specifier|const
name|XDeviceMotionEvent
modifier|*
specifier|const
name|motion
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|XDeviceMotionEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|filterByWidget
condition|)
block|{
specifier|const
name|QPoint
name|curr
argument_list|(
name|motion
operator|->
name|x
argument_list|,
name|motion
operator|->
name|y
argument_list|)
decl_stmt|;
specifier|const
name|QWidget
modifier|*
name|w
init|=
name|data
operator|->
name|etWidget
decl_stmt|;
specifier|const
name|QWidget
modifier|*
specifier|const
name|child
init|=
name|w
operator|->
name|childAt
argument_list|(
name|curr
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
condition|)
block|{
name|w
operator|=
name|child
expr_stmt|;
block|}
if|if
condition|(
name|w
operator|==
name|data
operator|->
name|widget
condition|)
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
name|data
operator|->
name|error
operator|=
name|event
operator|->
name|type
operator|!=
name|MotionNotify
expr_stmt|;
comment|// we stop compression when another event gets in between.
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|translateXinputEvent
name|bool
name|QETWidget
operator|::
name|translateXinputEvent
parameter_list|(
specifier|const
name|XEvent
modifier|*
name|ev
parameter_list|,
name|QTabletDeviceData
modifier|*
name|tablet
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_IRIX
argument_list|)
comment|// Wacom has put defines in their wacom.h file so it would be quite wise
comment|// to use them, need to think of a decent way of not using
comment|// it when it doesn't exist...
name|XDeviceState
modifier|*
name|s
decl_stmt|;
name|XInputClass
modifier|*
name|iClass
decl_stmt|;
name|XValuatorState
modifier|*
name|vs
decl_stmt|;
name|int
name|j
decl_stmt|;
endif|#
directive|endif
name|Q_ASSERT
argument_list|(
name|tablet
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|this
decl_stmt|;
name|QPoint
name|global
decl_stmt|,
name|curr
decl_stmt|;
name|QPointF
name|hiRes
decl_stmt|;
name|qreal
name|pressure
init|=
literal|0
decl_stmt|;
name|int
name|xTilt
init|=
literal|0
decl_stmt|,
name|yTilt
init|=
literal|0
decl_stmt|,
name|z
init|=
literal|0
decl_stmt|;
name|qreal
name|tangentialPressure
init|=
literal|0
decl_stmt|;
name|qreal
name|rotation
init|=
literal|0
decl_stmt|;
name|int
name|deviceType
init|=
name|QTabletEvent
operator|::
name|NoDevice
decl_stmt|;
name|int
name|pointerType
init|=
name|QTabletEvent
operator|::
name|UnknownPointer
decl_stmt|;
specifier|const
name|XDeviceMotionEvent
modifier|*
name|motion
init|=
literal|0
decl_stmt|;
name|XDeviceButtonEvent
modifier|*
name|button
init|=
literal|0
decl_stmt|;
specifier|const
name|XProximityNotifyEvent
modifier|*
name|proximity
init|=
literal|0
decl_stmt|;
name|QEvent
operator|::
name|Type
name|t
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
init|=
literal|0
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_IRIX
argument_list|)
name|XID
name|device_id
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|ev
operator|->
name|type
operator|==
name|tablet
operator|->
name|xinput_motion
condition|)
block|{
name|motion
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|XDeviceMotionEvent
operator|*
argument_list|>
argument_list|(
name|ev
argument_list|)
expr_stmt|;
name|t
operator|=
name|QEvent
operator|::
name|TabletMove
expr_stmt|;
name|global
operator|=
name|QPoint
argument_list|(
name|motion
operator|->
name|x_root
argument_list|,
name|motion
operator|->
name|y_root
argument_list|)
expr_stmt|;
name|curr
operator|=
name|QPoint
argument_list|(
name|motion
operator|->
name|x
argument_list|,
name|motion
operator|->
name|y
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_IRIX
argument_list|)
name|device_id
operator|=
name|motion
operator|->
name|deviceid
expr_stmt|;
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|ev
operator|->
name|type
operator|==
name|tablet
operator|->
name|xinput_button_press
operator|||
name|ev
operator|->
name|type
operator|==
name|tablet
operator|->
name|xinput_button_release
condition|)
block|{
if|if
condition|(
name|ev
operator|->
name|type
operator|==
name|tablet
operator|->
name|xinput_button_press
condition|)
block|{
name|t
operator|=
name|QEvent
operator|::
name|TabletPress
expr_stmt|;
block|}
else|else
block|{
name|t
operator|=
name|QEvent
operator|::
name|TabletRelease
expr_stmt|;
block|}
name|button
operator|=
operator|(
name|XDeviceButtonEvent
operator|*
operator|)
name|ev
expr_stmt|;
name|global
operator|=
name|QPoint
argument_list|(
name|button
operator|->
name|x_root
argument_list|,
name|button
operator|->
name|y_root
argument_list|)
expr_stmt|;
name|curr
operator|=
name|QPoint
argument_list|(
name|button
operator|->
name|x
argument_list|,
name|button
operator|->
name|y
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_IRIX
argument_list|)
name|device_id
operator|=
name|button
operator|->
name|deviceid
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
comment|// Proximity
if|if
condition|(
name|ev
operator|->
name|type
operator|==
name|tablet
operator|->
name|xinput_proximity_in
condition|)
name|t
operator|=
name|QEvent
operator|::
name|TabletEnterProximity
expr_stmt|;
else|else
name|t
operator|=
name|QEvent
operator|::
name|TabletLeaveProximity
expr_stmt|;
name|proximity
operator|=
operator|(
specifier|const
name|XProximityNotifyEvent
operator|*
operator|)
name|ev
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_IRIX
argument_list|)
name|device_id
operator|=
name|proximity
operator|->
name|deviceid
expr_stmt|;
endif|#
directive|endif
block|}
name|qint64
name|uid
init|=
literal|0
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_IRIX
argument_list|)
name|QRect
name|screenArea
init|=
name|qApp
operator|->
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|s
operator|=
name|XQueryDeviceState
argument_list|(
name|X11
operator|->
name|display
argument_list|,
cast|static_cast
argument_list|<
name|XDevice
operator|*
argument_list|>
argument_list|(
name|tablet
operator|->
name|device
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|s
condition|)
return|return
literal|false
return|;
name|iClass
operator|=
name|s
operator|->
name|data
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|s
operator|->
name|num_classes
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|iClass
operator|->
name|c_class
operator|==
name|ValuatorClass
condition|)
block|{
name|vs
operator|=
cast|reinterpret_cast
argument_list|<
name|XValuatorState
operator|*
argument_list|>
argument_list|(
name|iClass
argument_list|)
expr_stmt|;
comment|// figure out what device we have, based on bitmasking...
if|if
condition|(
name|vs
operator|->
name|valuators
index|[
name|WAC_TRANSDUCER_I
index|]
operator|&
name|WAC_TRANSDUCER_PROX_MSK
condition|)
block|{
switch|switch
condition|(
name|vs
operator|->
name|valuators
index|[
name|WAC_TRANSDUCER_I
index|]
operator|&
name|WAC_TRANSDUCER_MSK
condition|)
block|{
case|case
name|WAC_PUCK_ID
case|:
name|pointerType
operator|=
name|QTabletEvent
operator|::
name|Puck
expr_stmt|;
break|break;
case|case
name|WAC_STYLUS_ID
case|:
name|pointerType
operator|=
name|QTabletEvent
operator|::
name|Pen
expr_stmt|;
break|break;
case|case
name|WAC_ERASER_ID
case|:
name|pointerType
operator|=
name|QTabletEvent
operator|::
name|Eraser
expr_stmt|;
break|break;
block|}
comment|// Get a Unique Id for the device, Wacom gives us this ability
name|uid
operator|=
name|vs
operator|->
name|valuators
index|[
name|WAC_TRANSDUCER_I
index|]
operator|&
name|WAC_TRANSDUCER_ID_MSK
expr_stmt|;
name|uid
operator|=
operator|(
name|uid
operator|<<
literal|24
operator|)
operator||
name|vs
operator|->
name|valuators
index|[
name|WAC_SERIAL_NUM_I
index|]
expr_stmt|;
switch|switch
condition|(
name|WAC_TRANSDUCER_I
operator|&
literal|0x0F0600
condition|)
block|{
case|case
literal|0x080200
case|:
name|deviceType
operator|=
name|QTabletEvent
operator|::
name|Stylus
expr_stmt|;
break|break;
case|case
literal|0x090200
case|:
name|deviceType
operator|=
name|QTabletEvent
operator|::
name|Airbrush
expr_stmt|;
break|break;
case|case
literal|0x000400
case|:
name|deviceType
operator|=
name|QTabletEvent
operator|::
name|FourDMouse
expr_stmt|;
break|break;
case|case
literal|0x000600
case|:
name|deviceType
operator|=
name|QTabletEvent
operator|::
name|Puck
expr_stmt|;
break|break;
case|case
literal|0x080400
case|:
name|deviceType
operator|=
name|QTabletEvent
operator|::
name|RotationStylus
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|pointerType
operator|=
name|QTabletEvent
operator|::
name|UnknownPointer
expr_stmt|;
name|deviceType
operator|=
name|QTabletEvent
operator|::
name|NoDevice
expr_stmt|;
name|uid
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|proximity
condition|)
block|{
comment|// apparently Wacom needs a cast for the +/- values to make sense
name|xTilt
operator|=
name|short
argument_list|(
name|vs
operator|->
name|valuators
index|[
name|WAC_XTILT_I
index|]
argument_list|)
expr_stmt|;
name|yTilt
operator|=
name|short
argument_list|(
name|vs
operator|->
name|valuators
index|[
name|WAC_YTILT_I
index|]
argument_list|)
expr_stmt|;
name|pressure
operator|=
name|vs
operator|->
name|valuators
index|[
name|WAC_PRESSURE_I
index|]
expr_stmt|;
if|if
condition|(
name|deviceType
operator|==
name|QTabletEvent
operator|::
name|FourDMouse
operator|||
name|deviceType
operator|==
name|QTabletEvent
operator|::
name|RotationStylus
condition|)
block|{
name|rotation
operator|=
name|vs
operator|->
name|valuators
index|[
name|WAC_ROTATION_I
index|]
operator|/
literal|64.0
expr_stmt|;
if|if
condition|(
name|deviceType
operator|==
name|QTabletEvent
operator|::
name|FourDMouse
condition|)
name|z
operator|=
name|vs
operator|->
name|valuators
index|[
name|WAC_ZCOORD_I
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deviceType
operator|==
name|QTabletEvent
operator|::
name|Airbrush
condition|)
block|{
name|tangentialPressure
operator|=
name|vs
operator|->
name|valuators
index|[
name|WAC_TAN_PRESSURE_I
index|]
operator|/
name|qreal
argument_list|(
name|tablet
operator|->
name|maxTanPressure
operator|-
name|tablet
operator|->
name|minTanPressure
argument_list|)
expr_stmt|;
block|}
name|hiRes
operator|=
name|tablet
operator|->
name|scaleCoord
argument_list|(
name|vs
operator|->
name|valuators
index|[
name|WAC_XCOORD_I
index|]
argument_list|,
name|vs
operator|->
name|valuators
index|[
name|WAC_YCOORD_I
index|]
argument_list|,
name|screenArea
operator|.
name|x
argument_list|()
argument_list|,
name|screenArea
operator|.
name|width
argument_list|()
argument_list|,
name|screenArea
operator|.
name|y
argument_list|()
argument_list|,
name|screenArea
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|iClass
operator|=
cast|reinterpret_cast
argument_list|<
name|XInputClass
operator|*
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|iClass
argument_list|)
operator|+
name|iClass
operator|->
name|length
argument_list|)
expr_stmt|;
block|}
name|XFreeDeviceState
argument_list|(
name|s
argument_list|)
expr_stmt|;
else|#
directive|else
name|QTabletDeviceDataList
modifier|*
name|tablet_list
init|=
name|qt_tablet_devices
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tablet_list
operator|->
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QTabletDeviceData
modifier|&
name|t
init|=
name|tablet_list
operator|->
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|device_id
operator|==
cast|static_cast
argument_list|<
name|XDevice
operator|*
argument_list|>
argument_list|(
name|t
operator|.
name|device
argument_list|)
operator|->
name|device_id
condition|)
block|{
name|deviceType
operator|=
name|t
operator|.
name|deviceType
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|deviceType
operator|==
name|QTabletEvent
operator|::
name|XFreeEraser
condition|)
block|{
name|deviceType
operator|=
name|QTabletEvent
operator|::
name|Stylus
expr_stmt|;
name|pointerType
operator|=
name|QTabletEvent
operator|::
name|Eraser
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t
operator|.
name|deviceType
operator|==
name|QTabletEvent
operator|::
name|Stylus
condition|)
block|{
name|pointerType
operator|=
name|QTabletEvent
operator|::
name|Pen
expr_stmt|;
block|}
break|break;
block|}
block|}
name|fetchWacomToolId
argument_list|(
name|deviceType
argument_list|,
name|uid
argument_list|)
expr_stmt|;
name|QRect
name|screenArea
init|=
name|qApp
operator|->
name|desktop
argument_list|()
operator|->
name|rect
argument_list|()
decl_stmt|;
if|if
condition|(
name|motion
condition|)
block|{
name|xTilt
operator|=
operator|(
name|short
operator|)
name|motion
operator|->
name|axis_data
index|[
literal|3
index|]
expr_stmt|;
name|yTilt
operator|=
operator|(
name|short
operator|)
name|motion
operator|->
name|axis_data
index|[
literal|4
index|]
expr_stmt|;
name|rotation
operator|=
operator|(
operator|(
name|short
operator|)
name|motion
operator|->
name|axis_data
index|[
literal|5
index|]
operator|)
operator|/
literal|64.0
expr_stmt|;
name|pressure
operator|=
operator|(
name|short
operator|)
name|motion
operator|->
name|axis_data
index|[
literal|2
index|]
expr_stmt|;
name|modifiers
operator|=
name|X11
operator|->
name|translateModifiers
argument_list|(
name|motion
operator|->
name|state
argument_list|)
expr_stmt|;
name|hiRes
operator|=
name|tablet
operator|->
name|scaleCoord
argument_list|(
name|motion
operator|->
name|axis_data
index|[
literal|0
index|]
argument_list|,
name|motion
operator|->
name|axis_data
index|[
literal|1
index|]
argument_list|,
name|screenArea
operator|.
name|x
argument_list|()
argument_list|,
name|screenArea
operator|.
name|width
argument_list|()
argument_list|,
name|screenArea
operator|.
name|y
argument_list|()
argument_list|,
name|screenArea
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|button
condition|)
block|{
name|xTilt
operator|=
operator|(
name|short
operator|)
name|button
operator|->
name|axis_data
index|[
literal|3
index|]
expr_stmt|;
name|yTilt
operator|=
operator|(
name|short
operator|)
name|button
operator|->
name|axis_data
index|[
literal|4
index|]
expr_stmt|;
name|rotation
operator|=
operator|(
operator|(
name|short
operator|)
name|button
operator|->
name|axis_data
index|[
literal|5
index|]
operator|)
operator|/
literal|64.0
expr_stmt|;
name|pressure
operator|=
operator|(
name|short
operator|)
name|button
operator|->
name|axis_data
index|[
literal|2
index|]
expr_stmt|;
name|modifiers
operator|=
name|X11
operator|->
name|translateModifiers
argument_list|(
name|button
operator|->
name|state
argument_list|)
expr_stmt|;
name|hiRes
operator|=
name|tablet
operator|->
name|scaleCoord
argument_list|(
name|button
operator|->
name|axis_data
index|[
literal|0
index|]
argument_list|,
name|button
operator|->
name|axis_data
index|[
literal|1
index|]
argument_list|,
name|screenArea
operator|.
name|x
argument_list|()
argument_list|,
name|screenArea
operator|.
name|width
argument_list|()
argument_list|,
name|screenArea
operator|.
name|y
argument_list|()
argument_list|,
name|screenArea
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|proximity
condition|)
block|{
name|pressure
operator|=
literal|0
expr_stmt|;
name|modifiers
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|deviceType
operator|==
name|QTabletEvent
operator|::
name|Airbrush
condition|)
block|{
name|tangentialPressure
operator|=
name|rotation
expr_stmt|;
name|rotation
operator|=
literal|0.
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|tablet
operator|->
name|widgetToGetPress
condition|)
block|{
name|w
operator|=
name|tablet
operator|->
name|widgetToGetPress
expr_stmt|;
block|}
else|else
block|{
name|QWidget
modifier|*
name|child
init|=
name|w
operator|->
name|childAt
argument_list|(
name|curr
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
condition|)
name|w
operator|=
name|child
expr_stmt|;
block|}
name|curr
operator|=
name|w
operator|->
name|mapFromGlobal
argument_list|(
name|global
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|==
name|QEvent
operator|::
name|TabletPress
condition|)
block|{
name|tablet
operator|->
name|widgetToGetPress
operator|=
name|w
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t
operator|==
name|QEvent
operator|::
name|TabletRelease
operator|&&
name|tablet
operator|->
name|widgetToGetPress
condition|)
block|{
name|w
operator|=
name|tablet
operator|->
name|widgetToGetPress
expr_stmt|;
name|curr
operator|=
name|w
operator|->
name|mapFromGlobal
argument_list|(
name|global
argument_list|)
expr_stmt|;
name|tablet
operator|->
name|widgetToGetPress
operator|=
literal|0
expr_stmt|;
block|}
name|QTabletEvent
name|e
argument_list|(
name|t
argument_list|,
name|curr
argument_list|,
name|global
argument_list|,
name|hiRes
argument_list|,
name|deviceType
argument_list|,
name|pointerType
argument_list|,
name|qreal
argument_list|(
name|pressure
operator|/
name|qreal
argument_list|(
name|tablet
operator|->
name|maxPressure
operator|-
name|tablet
operator|->
name|minPressure
argument_list|)
argument_list|)
argument_list|,
name|xTilt
argument_list|,
name|yTilt
argument_list|,
name|tangentialPressure
argument_list|,
name|rotation
argument_list|,
name|z
argument_list|,
name|modifiers
argument_list|,
name|uid
argument_list|)
decl_stmt|;
if|if
condition|(
name|proximity
condition|)
block|{
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|qApp
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|w
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|accepted
init|=
name|e
operator|.
name|isAccepted
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|accepted
operator|&&
name|ev
operator|->
name|type
operator|==
name|tablet
operator|->
name|xinput_motion
condition|)
block|{
comment|// If the widget does not accept tablet events, we drop the next ones from the event queue
comment|// for this widget so it is not overloaded with the numerous tablet events.
name|qt_tablet_motion_data
name|tabletMotionData
decl_stmt|;
name|tabletMotionData
operator|.
name|tabletMotionType
operator|=
name|tablet
operator|->
name|xinput_motion
expr_stmt|;
name|tabletMotionData
operator|.
name|widget
operator|=
name|w
expr_stmt|;
name|tabletMotionData
operator|.
name|etWidget
operator|=
name|this
expr_stmt|;
comment|// if nothing is pressed, the events are filtered by position
name|tabletMotionData
operator|.
name|filterByWidget
operator|=
operator|(
name|tablet
operator|->
name|widgetToGetPress
operator|==
literal|0
operator|)
expr_stmt|;
name|bool
name|reinsertMouseEvent
init|=
literal|false
decl_stmt|;
name|XEvent
name|mouseMotionEvent
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// Find first mouse event since we expect them in pairs inside Qt
name|tabletMotionData
operator|.
name|error
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|XCheckIfEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|mouseMotionEvent
argument_list|,
operator|&
name|qt_mouseMotion_scanner
argument_list|,
operator|(
name|XPointer
operator|)
operator|&
name|tabletMotionData
argument_list|)
condition|)
block|{
name|reinsertMouseEvent
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
comment|// Now discard any duplicate tablet events.
name|tabletMotionData
operator|.
name|error
operator|=
literal|false
expr_stmt|;
name|XEvent
name|dummy
decl_stmt|;
while|while
condition|(
name|XCheckIfEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|dummy
argument_list|,
operator|&
name|qt_tabletMotion_scanner
argument_list|,
operator|(
name|XPointer
operator|)
operator|&
name|tabletMotionData
argument_list|)
condition|)
block|{
comment|// just discard the event
block|}
block|}
if|if
condition|(
name|reinsertMouseEvent
condition|)
block|{
name|XPutBackEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|mouseMotionEvent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|translatePropertyEvent
name|bool
name|QETWidget
operator|::
name|translatePropertyEvent
parameter_list|(
specifier|const
name|XEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isWindow
argument_list|()
condition|)
return|return
literal|true
return|;
name|Atom
name|ret
decl_stmt|;
name|int
name|format
decl_stmt|,
name|e
decl_stmt|;
name|unsigned
name|char
modifier|*
name|data
init|=
literal|0
decl_stmt|;
name|unsigned
name|long
name|nitems
decl_stmt|,
name|after
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|xproperty
operator|.
name|atom
operator|==
name|ATOM
argument_list|(
name|_KDE_NET_WM_FRAME_STRUT
argument_list|)
condition|)
block|{
name|this
operator|->
name|data
operator|->
name|fstrut_dirty
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|xproperty
operator|.
name|state
operator|==
name|PropertyNewValue
condition|)
block|{
name|e
operator|=
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|event
operator|->
name|xproperty
operator|.
name|window
argument_list|,
name|ATOM
argument_list|(
name|_KDE_NET_WM_FRAME_STRUT
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
comment|// struts are 4 longs
name|False
argument_list|,
name|XA_CARDINAL
argument_list|,
operator|&
name|ret
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|nitems
argument_list|,
operator|&
name|after
argument_list|,
operator|&
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|==
name|Success
operator|&&
name|ret
operator|==
name|XA_CARDINAL
operator|&&
name|format
operator|==
literal|32
operator|&&
name|nitems
operator|==
literal|4
condition|)
block|{
name|long
modifier|*
name|strut
init|=
operator|(
name|long
operator|*
operator|)
name|data
decl_stmt|;
name|d
operator|->
name|topData
argument_list|()
operator|->
name|frameStrut
operator|.
name|setCoords
argument_list|(
name|strut
index|[
literal|0
index|]
argument_list|,
name|strut
index|[
literal|2
index|]
argument_list|,
name|strut
index|[
literal|1
index|]
argument_list|,
name|strut
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|this
operator|->
name|data
operator|->
name|fstrut_dirty
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|xproperty
operator|.
name|atom
operator|==
name|ATOM
argument_list|(
name|_NET_WM_STATE
argument_list|)
condition|)
block|{
name|bool
name|max
init|=
literal|false
decl_stmt|;
name|bool
name|full
init|=
literal|false
decl_stmt|;
name|Qt
operator|::
name|WindowStates
name|oldState
init|=
name|Qt
operator|::
name|WindowStates
argument_list|(
name|this
operator|->
name|data
operator|->
name|window_state
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|xproperty
operator|.
name|state
operator|==
name|PropertyNewValue
condition|)
block|{
comment|// using length of 1024 should be safe for all current and
comment|// possible NET states...
name|e
operator|=
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|event
operator|->
name|xproperty
operator|.
name|window
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_STATE
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|,
name|False
argument_list|,
name|XA_ATOM
argument_list|,
operator|&
name|ret
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|nitems
argument_list|,
operator|&
name|after
argument_list|,
operator|&
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|==
name|Success
operator|&&
name|ret
operator|==
name|XA_ATOM
operator|&&
name|format
operator|==
literal|32
operator|&&
name|nitems
operator|>
literal|0
condition|)
block|{
name|Atom
modifier|*
name|states
init|=
operator|(
name|Atom
operator|*
operator|)
name|data
decl_stmt|;
name|unsigned
name|long
name|i
decl_stmt|;
name|uint
name|maximized
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|nitems
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|states
index|[
name|i
index|]
operator|==
name|ATOM
argument_list|(
name|_NET_WM_STATE_MAXIMIZED_VERT
argument_list|)
condition|)
name|maximized
operator||=
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|states
index|[
name|i
index|]
operator|==
name|ATOM
argument_list|(
name|_NET_WM_STATE_MAXIMIZED_HORZ
argument_list|)
condition|)
name|maximized
operator||=
literal|2
expr_stmt|;
elseif|else
if|if
condition|(
name|states
index|[
name|i
index|]
operator|==
name|ATOM
argument_list|(
name|_NET_WM_STATE_FULLSCREEN
argument_list|)
condition|)
name|full
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|maximized
operator|==
literal|3
condition|)
block|{
comment|// only set maximized if both horizontal and vertical properties are set
name|max
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|bool
name|send_event
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_MAXIMIZED_VERT
argument_list|)
argument_list|)
operator|&&
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_MAXIMIZED_HORZ
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|max
operator|&&
operator|!
name|isMaximized
argument_list|()
condition|)
block|{
name|this
operator|->
name|data
operator|->
name|window_state
operator|=
name|this
operator|->
name|data
operator|->
name|window_state
operator||
name|Qt
operator|::
name|WindowMaximized
expr_stmt|;
name|send_event
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|max
operator|&&
name|isMaximized
argument_list|()
condition|)
block|{
name|this
operator|->
name|data
operator|->
name|window_state
operator|&=
operator|~
name|Qt
operator|::
name|WindowMaximized
expr_stmt|;
name|send_event
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_FULLSCREEN
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|full
operator|&&
operator|!
name|isFullScreen
argument_list|()
condition|)
block|{
name|this
operator|->
name|data
operator|->
name|window_state
operator|=
name|this
operator|->
name|data
operator|->
name|window_state
operator||
name|Qt
operator|::
name|WindowFullScreen
expr_stmt|;
name|send_event
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|full
operator|&&
name|isFullScreen
argument_list|()
condition|)
block|{
name|this
operator|->
name|data
operator|->
name|window_state
operator|&=
operator|~
name|Qt
operator|::
name|WindowFullScreen
expr_stmt|;
name|send_event
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|send_event
condition|)
block|{
name|QWindowStateChangeEvent
name|e
argument_list|(
name|oldState
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|this
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|xproperty
operator|.
name|atom
operator|==
name|ATOM
argument_list|(
name|WM_STATE
argument_list|)
condition|)
block|{
comment|// the widget frame strut should also be invalidated
name|this
operator|->
name|data
operator|->
name|fstrut_dirty
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|xproperty
operator|.
name|state
operator|==
name|PropertyDelete
condition|)
block|{
comment|// the window manager has removed the WM State property,
comment|// so it is now in the withdrawn state (ICCCM 4.1.3.1) and
comment|// we are free to reuse this window
name|d
operator|->
name|topData
argument_list|()
operator|->
name|parentWinId
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|topData
argument_list|()
operator|->
name|validWMState
operator|=
literal|0
expr_stmt|;
comment|// map the window if we were waiting for a transition to
comment|// withdrawn
if|if
condition|(
name|X11
operator|->
name|deferred_map
operator|.
name|removeAll
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|doDeferredMap
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isVisible
argument_list|()
operator|&&
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
operator|&&
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|)
condition|)
block|{
comment|// so that show() will work again. As stated in the
comment|// ICCCM section 4.1.4: "Only the client can effect a
comment|// transition into or out of the Withdrawn state.",
comment|// but apparently this particular window manager
comment|// doesn't seem to care
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// the window manager has changed the WM State property...
comment|// we are wanting to see if we are withdrawn so that we
comment|// can reuse this window...
name|e
operator|=
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|internalWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|WM_STATE
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|False
argument_list|,
name|ATOM
argument_list|(
name|WM_STATE
argument_list|)
argument_list|,
operator|&
name|ret
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|nitems
argument_list|,
operator|&
name|after
argument_list|,
operator|&
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|==
name|Success
operator|&&
name|ret
operator|==
name|ATOM
argument_list|(
name|WM_STATE
argument_list|)
operator|&&
name|format
operator|==
literal|32
operator|&&
name|nitems
operator|>
literal|0
condition|)
block|{
name|long
modifier|*
name|state
init|=
operator|(
name|long
operator|*
operator|)
name|data
decl_stmt|;
switch|switch
condition|(
name|state
index|[
literal|0
index|]
condition|)
block|{
case|case
name|WithdrawnState
case|:
comment|// if we are in the withdrawn state, we are free
comment|// to reuse this window provided we remove the
comment|// WM_STATE property (ICCCM 4.1.3.1)
name|XDeleteProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|internalWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|WM_STATE
argument_list|)
argument_list|)
expr_stmt|;
comment|// set the parent id to zero, so that show() will
comment|// work again
name|d
operator|->
name|topData
argument_list|()
operator|->
name|parentWinId
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|topData
argument_list|()
operator|->
name|validWMState
operator|=
literal|0
expr_stmt|;
comment|// map the window if we were waiting for a
comment|// transition to withdrawn
if|if
condition|(
name|X11
operator|->
name|deferred_map
operator|.
name|removeAll
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|doDeferredMap
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isVisible
argument_list|()
operator|&&
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
operator|&&
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|)
condition|)
block|{
comment|// so that show() will work again. As stated
comment|// in the ICCCM section 4.1.4: "Only the
comment|// client can effect a transition into or out
comment|// of the Withdrawn state.", but apparently
comment|// this particular window manager doesn't seem
comment|// to care
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IconicState
case|:
name|d
operator|->
name|topData
argument_list|()
operator|->
name|validWMState
operator|=
literal|1
expr_stmt|;
if|if
condition|(
operator|!
name|isMinimized
argument_list|()
condition|)
block|{
comment|// window was minimized
name|this
operator|->
name|data
operator|->
name|window_state
operator|=
name|this
operator|->
name|data
operator|->
name|window_state
operator||
name|Qt
operator|::
name|WindowMinimized
expr_stmt|;
name|QWindowStateChangeEvent
name|e
argument_list|(
name|Qt
operator|::
name|WindowStates
argument_list|(
name|this
operator|->
name|data
operator|->
name|window_state
operator|&
operator|~
name|Qt
operator|::
name|WindowMinimized
argument_list|)
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|this
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|d
operator|->
name|topData
argument_list|()
operator|->
name|validWMState
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|isMinimized
argument_list|()
condition|)
block|{
comment|// window was un-minimized
name|this
operator|->
name|data
operator|->
name|window_state
operator|&=
operator|~
name|Qt
operator|::
name|WindowMinimized
expr_stmt|;
name|QWindowStateChangeEvent
name|e
argument_list|(
name|Qt
operator|::
name|WindowStates
argument_list|(
name|this
operator|->
name|data
operator|->
name|window_state
operator||
name|Qt
operator|::
name|WindowMinimized
argument_list|)
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|this
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|xproperty
operator|.
name|atom
operator|==
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_OPACITY
argument_list|)
condition|)
block|{
comment|// the window opacity was changed
if|if
condition|(
name|event
operator|->
name|xproperty
operator|.
name|state
operator|==
name|PropertyNewValue
condition|)
block|{
name|e
operator|=
name|XGetWindowProperty
argument_list|(
name|event
operator|->
name|xclient
operator|.
name|display
argument_list|,
name|event
operator|->
name|xclient
operator|.
name|window
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_OPACITY
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|False
argument_list|,
name|XA_CARDINAL
argument_list|,
operator|&
name|ret
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|nitems
argument_list|,
operator|&
name|after
argument_list|,
operator|&
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|==
name|Success
operator|&&
name|ret
operator|==
name|XA_CARDINAL
operator|&&
name|format
operator|==
literal|32
operator|&&
name|nitems
operator|==
literal|1
operator|&&
name|after
operator|==
literal|0
operator|&&
name|data
condition|)
block|{
name|ulong
name|value
init|=
operator|*
operator|(
name|ulong
operator|*
operator|)
operator|(
name|data
operator|)
decl_stmt|;
name|d
operator|->
name|topData
argument_list|()
operator|->
name|opacity
operator|=
name|uint
argument_list|(
name|value
operator|>>
literal|24
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|d
operator|->
name|topData
argument_list|()
operator|->
name|opacity
operator|=
literal|255
expr_stmt|;
block|}
if|if
condition|(
name|data
condition|)
name|XFree
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Paint event translation
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// When receiving many expose events, we compress them (union of all expose
end_comment
begin_comment
comment|// rectangles) into one event which is sent to the widget.
end_comment
begin_struct
DECL|struct|PaintEventInfo
struct|struct
name|PaintEventInfo
block|{
DECL|member|window
name|Window
name|window
decl_stmt|;
block|}
struct|;
end_struct
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_C_CALLBACKS
argument_list|)
end_if
begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
DECL|function|isPaintOrScrollDoneEvent
specifier|static
name|Bool
name|isPaintOrScrollDoneEvent
parameter_list|(
name|Display
modifier|*
parameter_list|,
name|XEvent
modifier|*
name|ev
parameter_list|,
name|XPointer
name|a
parameter_list|)
block|{
name|PaintEventInfo
modifier|*
name|info
init|=
operator|(
name|PaintEventInfo
operator|*
operator|)
name|a
decl_stmt|;
if|if
condition|(
name|ev
operator|->
name|type
operator|==
name|Expose
operator|||
name|ev
operator|->
name|type
operator|==
name|GraphicsExpose
operator|||
operator|(
name|ev
operator|->
name|type
operator|==
name|ClientMessage
operator|&&
name|ev
operator|->
name|xclient
operator|.
name|message_type
operator|==
name|ATOM
argument_list|(
name|_QT_SCROLL_DONE
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|ev
operator|->
name|xexpose
operator|.
name|window
operator|==
name|info
operator|->
name|window
condition|)
return|return
name|True
return|;
block|}
return|return
name|False
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_C_CALLBACKS
argument_list|)
block|}
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_function
specifier|static
DECL|function|translateBySips
name|bool
name|translateBySips
parameter_list|(
name|QWidget
modifier|*
name|that
parameter_list|,
name|QRect
modifier|&
name|paintRect
parameter_list|)
block|{
name|int
name|dx
init|=
literal|0
decl_stmt|,
name|dy
init|=
literal|0
decl_stmt|;
name|int
name|sips
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|X11
operator|->
name|sip_list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QX11Data
operator|::
name|ScrollInProgress
modifier|&
name|sip
init|=
name|X11
operator|->
name|sip_list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|sip
operator|.
name|scrolled_widget
operator|==
name|that
condition|)
block|{
if|if
condition|(
name|sips
condition|)
block|{
name|dx
operator|+=
name|sip
operator|.
name|dx
expr_stmt|;
name|dy
operator|+=
name|sip
operator|.
name|dy
expr_stmt|;
block|}
name|sips
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sips
operator|>
literal|1
condition|)
block|{
name|paintRect
operator|.
name|translate
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|translatePaintEvent
name|void
name|QETWidget
operator|::
name|translatePaintEvent
parameter_list|(
specifier|const
name|XEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isWindow
argument_list|()
operator|&&
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
condition|)
name|Q_ASSERT
argument_list|(
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|QRect
name|paintRect
argument_list|(
name|event
operator|->
name|xexpose
operator|.
name|x
argument_list|,
name|event
operator|->
name|xexpose
operator|.
name|y
argument_list|,
name|event
operator|->
name|xexpose
operator|.
name|width
argument_list|,
name|event
operator|->
name|xexpose
operator|.
name|height
argument_list|)
decl_stmt|;
name|XEvent
name|xevent
decl_stmt|;
name|PaintEventInfo
name|info
decl_stmt|;
name|info
operator|.
name|window
operator|=
name|internalWinId
argument_list|()
expr_stmt|;
name|translateBySips
argument_list|(
name|this
argument_list|,
name|paintRect
argument_list|)
expr_stmt|;
name|paintRect
operator|=
name|d
operator|->
name|mapFromWS
argument_list|(
name|paintRect
argument_list|)
expr_stmt|;
name|QRegion
name|paintRegion
init|=
name|paintRect
decl_stmt|;
comment|// WARNING: this is O(number_of_events * number_of_matching_events)
while|while
condition|(
name|XCheckIfEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|xevent
argument_list|,
name|isPaintOrScrollDoneEvent
argument_list|,
operator|(
name|XPointer
operator|)
operator|&
name|info
argument_list|)
operator|&&
operator|!
name|qt_x11EventFilter
argument_list|(
operator|&
name|xevent
argument_list|)
operator|&&
operator|!
name|x11Event
argument_list|(
operator|&
name|xevent
argument_list|)
condition|)
comment|// send event through filter
block|{
if|if
condition|(
name|xevent
operator|.
name|type
operator|==
name|Expose
operator|||
name|xevent
operator|.
name|type
operator|==
name|GraphicsExpose
condition|)
block|{
name|QRect
name|exposure
argument_list|(
name|xevent
operator|.
name|xexpose
operator|.
name|x
argument_list|,
name|xevent
operator|.
name|xexpose
operator|.
name|y
argument_list|,
name|xevent
operator|.
name|xexpose
operator|.
name|width
argument_list|,
name|xevent
operator|.
name|xexpose
operator|.
name|height
argument_list|)
decl_stmt|;
name|translateBySips
argument_list|(
name|this
argument_list|,
name|exposure
argument_list|)
expr_stmt|;
name|exposure
operator|=
name|d
operator|->
name|mapFromWS
argument_list|(
name|exposure
argument_list|)
expr_stmt|;
name|paintRegion
operator||=
name|exposure
expr_stmt|;
block|}
else|else
block|{
name|translateScrollDoneEvent
argument_list|(
operator|&
name|xevent
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|paintRegion
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ConfigPending
argument_list|)
condition|)
name|d
operator|->
name|syncBackingStore
argument_list|(
name|paintRegion
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Scroll-done event translation.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|translateScrollDoneEvent
name|bool
name|QETWidget
operator|::
name|translateScrollDoneEvent
parameter_list|(
specifier|const
name|XEvent
modifier|*
name|event
parameter_list|)
block|{
name|long
name|id
init|=
name|event
operator|->
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|0
index|]
decl_stmt|;
comment|// Remove any scroll-in-progress record for the given id.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|X11
operator|->
name|sip_list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QX11Data
operator|::
name|ScrollInProgress
modifier|&
name|sip
init|=
name|X11
operator|->
name|sip_list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|sip
operator|.
name|id
operator|==
name|id
condition|)
block|{
name|X11
operator|->
name|sip_list
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// ConfigureNotify (window move and resize) event translation
end_comment
begin_function
DECL|function|translateConfigEvent
name|bool
name|QETWidget
operator|::
name|translateConfigEvent
parameter_list|(
specifier|const
name|XEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|(
operator|!
name|isWindow
argument_list|()
operator|&&
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
operator|)
condition|?
name|internalWinId
argument_list|()
else|:
literal|true
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|bool
name|wasResize
init|=
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ConfigPending
argument_list|)
decl_stmt|;
comment|// set in QWidget::setGeometry_sys()
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ConfigPending
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|)
condition|)
block|{
comment|// discard events for windows that have a geometry X can't handle
name|XEvent
name|xevent
decl_stmt|;
while|while
condition|(
name|XCheckTypedWindowEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|internalWinId
argument_list|()
argument_list|,
name|ConfigureNotify
argument_list|,
operator|&
name|xevent
argument_list|)
operator|&&
operator|!
name|qt_x11EventFilter
argument_list|(
operator|&
name|xevent
argument_list|)
operator|&&
operator|!
name|x11Event
argument_list|(
operator|&
name|xevent
argument_list|)
condition|)
comment|// send event through filter
empty_stmt|;
return|return
literal|true
return|;
block|}
specifier|const
name|QSize
name|oldSize
init|=
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|isWindow
argument_list|()
condition|)
block|{
name|QPoint
name|newCPos
argument_list|(
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|)
decl_stmt|;
name|QSize
name|newSize
argument_list|(
name|event
operator|->
name|xconfigure
operator|.
name|width
argument_list|,
name|event
operator|->
name|xconfigure
operator|.
name|height
argument_list|)
decl_stmt|;
name|bool
name|trust
init|=
name|isVisible
argument_list|()
operator|&&
operator|(
name|d
operator|->
name|topData
argument_list|()
operator|->
name|parentWinId
operator|==
name|XNone
operator|||
name|d
operator|->
name|topData
argument_list|()
operator|->
name|parentWinId
operator|==
name|QX11Info
operator|::
name|appRootWindow
argument_list|()
operator|)
decl_stmt|;
name|bool
name|isCPos
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|xconfigure
operator|.
name|send_event
operator|||
name|trust
condition|)
block|{
comment|// if a ConfigureNotify comes from a real sendevent request, we can
comment|// trust its values.
name|newCPos
operator|.
name|rx
argument_list|()
operator|=
name|event
operator|->
name|xconfigure
operator|.
name|x
operator|+
name|event
operator|->
name|xconfigure
operator|.
name|border_width
expr_stmt|;
name|newCPos
operator|.
name|ry
argument_list|()
operator|=
name|event
operator|->
name|xconfigure
operator|.
name|y
operator|+
name|event
operator|->
name|xconfigure
operator|.
name|border_width
expr_stmt|;
name|isCPos
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isVisible
argument_list|()
condition|)
name|QApplication
operator|::
name|syncX
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|extra
operator|->
name|compress_events
condition|)
block|{
comment|// ConfigureNotify compression for faster opaque resizing
name|XEvent
name|otherEvent
decl_stmt|;
while|while
condition|(
name|XCheckTypedWindowEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|internalWinId
argument_list|()
argument_list|,
name|ConfigureNotify
argument_list|,
operator|&
name|otherEvent
argument_list|)
condition|)
block|{
if|if
condition|(
name|qt_x11EventFilter
argument_list|(
operator|&
name|otherEvent
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|x11Event
argument_list|(
operator|&
name|otherEvent
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|otherEvent
operator|.
name|xconfigure
operator|.
name|event
operator|!=
name|otherEvent
operator|.
name|xconfigure
operator|.
name|window
condition|)
continue|continue;
name|newSize
operator|.
name|setWidth
argument_list|(
name|otherEvent
operator|.
name|xconfigure
operator|.
name|width
argument_list|)
expr_stmt|;
name|newSize
operator|.
name|setHeight
argument_list|(
name|otherEvent
operator|.
name|xconfigure
operator|.
name|height
argument_list|)
expr_stmt|;
if|if
condition|(
name|otherEvent
operator|.
name|xconfigure
operator|.
name|send_event
operator|||
name|trust
condition|)
block|{
name|newCPos
operator|.
name|rx
argument_list|()
operator|=
name|otherEvent
operator|.
name|xconfigure
operator|.
name|x
operator|+
name|otherEvent
operator|.
name|xconfigure
operator|.
name|border_width
expr_stmt|;
name|newCPos
operator|.
name|ry
argument_list|()
operator|=
name|otherEvent
operator|.
name|xconfigure
operator|.
name|y
operator|+
name|otherEvent
operator|.
name|xconfigure
operator|.
name|border_width
expr_stmt|;
name|isCPos
operator|=
literal|true
expr_stmt|;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_XSYNC
name|qt_sync_request_event_data
name|sync_event
decl_stmt|;
name|sync_event
operator|.
name|window
operator|=
name|internalWinId
argument_list|()
expr_stmt|;
for|for
control|(
name|XEvent
name|ev
init|;
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|XCheckIfEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|ev
argument_list|,
operator|&
name|qt_sync_request_scanner
argument_list|,
operator|(
name|XPointer
operator|)
operator|&
name|sync_event
argument_list|)
condition|)
break|break;
block|}
endif|#
directive|endif
comment|// QT_NO_XSYNC
block|}
if|if
condition|(
operator|!
name|isCPos
condition|)
block|{
comment|// we didn't get an updated position of the toplevel.
comment|// either we haven't moved or there is a bug in the window manager.
comment|// anyway, let's query the position to be certain.
name|int
name|x
decl_stmt|,
name|y
decl_stmt|;
name|Window
name|child
decl_stmt|;
name|XTranslateCoordinates
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|internalWinId
argument_list|()
argument_list|,
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screen
argument_list|(
name|d
operator|->
name|xinfo
operator|.
name|screen
argument_list|()
argument_list|)
operator|->
name|internalWinId
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|,
operator|&
name|child
argument_list|)
expr_stmt|;
name|newCPos
operator|.
name|rx
argument_list|()
operator|=
name|x
expr_stmt|;
name|newCPos
operator|.
name|ry
argument_list|()
operator|=
name|y
expr_stmt|;
block|}
name|QRect
name|cr
argument_list|(
name|geometry
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCPos
operator|!=
name|cr
operator|.
name|topLeft
argument_list|()
condition|)
block|{
comment|// compare with cpos (exluding frame)
name|QPoint
name|oldPos
init|=
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|cr
operator|.
name|moveTopLeft
argument_list|(
name|newCPos
argument_list|)
expr_stmt|;
name|data
operator|->
name|crect
operator|=
name|cr
expr_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
condition|)
block|{
name|QMoveEvent
name|e
argument_list|(
name|newCPos
argument_list|,
name|oldPos
argument_list|)
decl_stmt|;
comment|// pos (including frame), not cpos
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|this
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_PendingMoveEvent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newSize
operator|!=
name|cr
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// size changed
name|cr
operator|.
name|setSize
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
name|data
operator|->
name|crect
operator|=
name|cr
expr_stmt|;
name|uint
name|old_state
init|=
name|data
operator|->
name|window_state
decl_stmt|;
if|if
condition|(
operator|!
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_MAXIMIZED_VERT
argument_list|)
argument_list|)
operator|&&
operator|!
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_MAXIMIZED_HORZ
argument_list|)
argument_list|)
condition|)
name|data
operator|->
name|window_state
operator|&=
operator|~
name|Qt
operator|::
name|WindowMaximized
expr_stmt|;
if|if
condition|(
operator|!
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_FULLSCREEN
argument_list|)
argument_list|)
condition|)
name|data
operator|->
name|window_state
operator|&=
operator|~
name|Qt
operator|::
name|WindowFullScreen
expr_stmt|;
if|if
condition|(
name|old_state
operator|!=
name|data
operator|->
name|window_state
condition|)
block|{
name|QWindowStateChangeEvent
name|e
argument_list|(
operator|(
name|Qt
operator|::
name|WindowStates
operator|)
name|old_state
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|this
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isVisible
argument_list|()
condition|)
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_PendingResizeEvent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|wasResize
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|XEvent
name|xevent
decl_stmt|;
while|while
condition|(
name|XCheckTypedWindowEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|internalWinId
argument_list|()
argument_list|,
name|ConfigureNotify
argument_list|,
operator|&
name|xevent
argument_list|)
operator|&&
operator|!
name|qt_x11EventFilter
argument_list|(
operator|&
name|xevent
argument_list|)
operator|&&
operator|!
name|x11Event
argument_list|(
operator|&
name|xevent
argument_list|)
condition|)
comment|// send event through filter
empty_stmt|;
block|}
if|if
condition|(
name|wasResize
condition|)
block|{
if|if
condition|(
name|isVisible
argument_list|()
operator|&&
name|data
operator|->
name|crect
operator|.
name|size
argument_list|()
operator|!=
name|oldSize
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|extra
operator|->
name|topextra
argument_list|)
expr_stmt|;
name|QWidgetBackingStore
modifier|*
name|bs
init|=
name|d
operator|->
name|extra
operator|->
name|topextra
operator|->
name|backingStore
operator|.
name|data
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|hasStaticContents
init|=
name|bs
operator|&&
name|bs
operator|->
name|hasStaticContents
argument_list|()
decl_stmt|;
comment|// If we have a backing store with static contents, we have to disable the top-level
comment|// resize optimization in order to get invalidated regions for resized widgets.
comment|// The optimization discards all invalidateBuffer() calls since we're going to
comment|// repaint everything anyways, but that's not the case with static contents.
if|if
condition|(
operator|!
name|hasStaticContents
condition|)
name|d
operator|->
name|extra
operator|->
name|topextra
operator|->
name|inTopLevelResize
operator|=
literal|true
expr_stmt|;
name|QResizeEvent
name|e
argument_list|(
name|data
operator|->
name|crect
operator|.
name|size
argument_list|()
argument_list|,
name|oldSize
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|this
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
specifier|const
name|bool
name|waitingForMapNotify
init|=
name|d
operator|->
name|extra
operator|->
name|topextra
operator|&&
name|d
operator|->
name|extra
operator|->
name|topextra
operator|->
name|waitingForMapNotify
decl_stmt|;
if|if
condition|(
operator|!
name|waitingForMapNotify
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|paintOnScreen
argument_list|()
condition|)
block|{
name|QRegion
name|updateRegion
argument_list|(
name|rect
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_StaticContents
argument_list|)
condition|)
name|updateRegion
operator|-=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|oldSize
operator|.
name|width
argument_list|()
argument_list|,
name|oldSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|syncBackingStore
argument_list|(
name|updateRegion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|syncBackingStore
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|d
operator|->
name|extra
operator|&&
name|d
operator|->
name|extra
operator|->
name|topextra
condition|)
name|d
operator|->
name|extra
operator|->
name|topextra
operator|->
name|inTopLevelResize
operator|=
literal|false
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_XSYNC
if|if
condition|(
name|QTLWExtra
modifier|*
name|tlwExtra
init|=
name|d
operator|->
name|maybeTopData
argument_list|()
condition|)
block|{
if|if
condition|(
name|tlwExtra
operator|->
name|newCounterValueLo
operator|!=
literal|0
operator|||
name|tlwExtra
operator|->
name|newCounterValueHi
operator|!=
literal|0
condition|)
block|{
name|XSyncValue
name|value
decl_stmt|;
name|XSyncIntsToValue
argument_list|(
operator|&
name|value
argument_list|,
name|tlwExtra
operator|->
name|newCounterValueLo
argument_list|,
name|tlwExtra
operator|->
name|newCounterValueHi
argument_list|)
expr_stmt|;
name|XSyncSetCounter
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|tlwExtra
operator|->
name|syncUpdateCounter
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|tlwExtra
operator|->
name|newCounterValueHi
operator|=
literal|0
expr_stmt|;
name|tlwExtra
operator|->
name|newCounterValueLo
operator|=
literal|0
expr_stmt|;
block|}
block|}
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Close window event translation.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|translateCloseEvent
name|bool
name|QETWidget
operator|::
name|translateCloseEvent
parameter_list|(
specifier|const
name|XEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|close_helper
argument_list|(
name|QWidgetPrivate
operator|::
name|CloseWithSpontaneousEvent
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setCursorFlashTime
name|void
name|QApplication
operator|::
name|setCursorFlashTime
parameter_list|(
name|int
name|msecs
parameter_list|)
block|{
name|QApplicationPrivate
operator|::
name|cursor_flash_time
operator|=
name|msecs
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorFlashTime
name|int
name|QApplication
operator|::
name|cursorFlashTime
parameter_list|()
block|{
return|return
name|QApplicationPrivate
operator|::
name|cursor_flash_time
return|;
block|}
end_function
begin_function
DECL|function|setDoubleClickInterval
name|void
name|QApplication
operator|::
name|setDoubleClickInterval
parameter_list|(
name|int
name|ms
parameter_list|)
block|{
name|QApplicationPrivate
operator|::
name|mouse_double_click_time
operator|=
name|ms
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doubleClickInterval
name|int
name|QApplication
operator|::
name|doubleClickInterval
parameter_list|()
block|{
return|return
name|QApplicationPrivate
operator|::
name|mouse_double_click_time
return|;
block|}
end_function
begin_function
DECL|function|setKeyboardInputInterval
name|void
name|QApplication
operator|::
name|setKeyboardInputInterval
parameter_list|(
name|int
name|ms
parameter_list|)
block|{
name|QApplicationPrivate
operator|::
name|keyboard_input_time
operator|=
name|ms
expr_stmt|;
block|}
end_function
begin_function
DECL|function|keyboardInputInterval
name|int
name|QApplication
operator|::
name|keyboardInputInterval
parameter_list|()
block|{
return|return
name|QApplicationPrivate
operator|::
name|keyboard_input_time
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
end_ifndef
begin_function
DECL|function|setWheelScrollLines
name|void
name|QApplication
operator|::
name|setWheelScrollLines
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|QApplicationPrivate
operator|::
name|wheel_scroll_lines
operator|=
name|n
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wheelScrollLines
name|int
name|QApplication
operator|::
name|wheelScrollLines
parameter_list|()
block|{
return|return
name|QApplicationPrivate
operator|::
name|wheel_scroll_lines
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setEffectEnabled
name|void
name|QApplication
operator|::
name|setEffectEnabled
parameter_list|(
name|Qt
operator|::
name|UIEffect
name|effect
parameter_list|,
name|bool
name|enable
parameter_list|)
block|{
switch|switch
condition|(
name|effect
condition|)
block|{
case|case
name|Qt
operator|::
name|UI_AnimateMenu
case|:
if|if
condition|(
name|enable
condition|)
name|QApplicationPrivate
operator|::
name|fade_menu
operator|=
literal|false
expr_stmt|;
name|QApplicationPrivate
operator|::
name|animate_menu
operator|=
name|enable
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_FadeMenu
case|:
if|if
condition|(
name|enable
condition|)
name|QApplicationPrivate
operator|::
name|animate_menu
operator|=
literal|true
expr_stmt|;
name|QApplicationPrivate
operator|::
name|fade_menu
operator|=
name|enable
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_AnimateCombo
case|:
name|QApplicationPrivate
operator|::
name|animate_combo
operator|=
name|enable
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_AnimateTooltip
case|:
if|if
condition|(
name|enable
condition|)
name|QApplicationPrivate
operator|::
name|fade_tooltip
operator|=
literal|false
expr_stmt|;
name|QApplicationPrivate
operator|::
name|animate_tooltip
operator|=
name|enable
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_FadeTooltip
case|:
if|if
condition|(
name|enable
condition|)
name|QApplicationPrivate
operator|::
name|animate_tooltip
operator|=
literal|true
expr_stmt|;
name|QApplicationPrivate
operator|::
name|fade_tooltip
operator|=
name|enable
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_AnimateToolBox
case|:
name|QApplicationPrivate
operator|::
name|animate_toolbox
operator|=
name|enable
expr_stmt|;
break|break;
default|default:
name|QApplicationPrivate
operator|::
name|animate_ui
operator|=
name|enable
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|isEffectEnabled
name|bool
name|QApplication
operator|::
name|isEffectEnabled
parameter_list|(
name|Qt
operator|::
name|UIEffect
name|effect
parameter_list|)
block|{
if|if
condition|(
name|QColormap
operator|::
name|instance
argument_list|()
operator|.
name|depth
argument_list|()
operator|<
literal|16
operator|||
operator|!
name|QApplicationPrivate
operator|::
name|animate_ui
condition|)
return|return
literal|false
return|;
switch|switch
condition|(
name|effect
condition|)
block|{
case|case
name|Qt
operator|::
name|UI_AnimateMenu
case|:
return|return
name|QApplicationPrivate
operator|::
name|animate_menu
return|;
case|case
name|Qt
operator|::
name|UI_FadeMenu
case|:
return|return
name|QApplicationPrivate
operator|::
name|fade_menu
return|;
case|case
name|Qt
operator|::
name|UI_AnimateCombo
case|:
return|return
name|QApplicationPrivate
operator|::
name|animate_combo
return|;
case|case
name|Qt
operator|::
name|UI_AnimateTooltip
case|:
return|return
name|QApplicationPrivate
operator|::
name|animate_tooltip
return|;
case|case
name|Qt
operator|::
name|UI_FadeTooltip
case|:
return|return
name|QApplicationPrivate
operator|::
name|fade_tooltip
return|;
case|case
name|Qt
operator|::
name|UI_AnimateToolBox
case|:
return|return
name|QApplicationPrivate
operator|::
name|animate_toolbox
return|;
default|default:
return|return
name|QApplicationPrivate
operator|::
name|animate_ui
return|;
block|}
block|}
end_function
begin_comment
comment|/*****************************************************************************   Session management support  *****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SESSIONMANAGER
end_ifndef
begin_expr_stmt
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|<X11/SM/SMlib.h>
name|QT_END_INCLUDE_NAMESPACE
DECL|class|QSessionManagerPrivate
name|class
name|QSessionManagerPrivate
operator|:
specifier|public
name|QObjectPrivate
block|{
specifier|public
operator|:
DECL|function|QSessionManagerPrivate
name|QSessionManagerPrivate
argument_list|(
name|QSessionManager
operator|*
name|mgr
argument_list|,
name|QString
operator|&
name|id
argument_list|,
name|QString
operator|&
name|key
argument_list|)
operator|:
name|QObjectPrivate
argument_list|()
block|,
name|sm
argument_list|(
name|mgr
argument_list|)
block|,
name|sessionId
argument_list|(
name|id
argument_list|)
block|,
name|sessionKey
argument_list|(
name|key
argument_list|)
block|,
name|restartHint
argument_list|(
name|QSessionManager
operator|::
name|RestartIfRunning
argument_list|)
block|,
name|eventLoop
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|sm
name|QSessionManager
operator|*
name|sm
block|;
DECL|member|restartCommand
name|QStringList
name|restartCommand
block|;
DECL|member|discardCommand
name|QStringList
name|discardCommand
block|;
DECL|member|sessionId
name|QString
operator|&
name|sessionId
block|;
DECL|member|sessionKey
name|QString
operator|&
name|sessionKey
block|;
DECL|member|restartHint
name|QSessionManager
operator|::
name|RestartHint
name|restartHint
block|;
DECL|member|eventLoop
name|QEventLoop
operator|*
name|eventLoop
block|; }
expr_stmt|;
end_expr_stmt
begin_class
DECL|class|QSmSocketReceiver
class|class
name|QSmSocketReceiver
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|QSmSocketReceiver
name|QSmSocketReceiver
parameter_list|(
name|int
name|socket
parameter_list|)
block|{
name|QSocketNotifier
modifier|*
name|sn
init|=
operator|new
name|QSocketNotifier
argument_list|(
name|socket
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|sn
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|socketActivated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
public|public
name|slots
public|:
name|void
name|socketActivated
parameter_list|(
name|int
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|smcConnection
specifier|static
name|SmcConn
name|smcConnection
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|sm_interactionActive
specifier|static
name|bool
name|sm_interactionActive
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|sm_smActive
specifier|static
name|bool
name|sm_smActive
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|sm_interactStyle
specifier|static
name|int
name|sm_interactStyle
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|sm_saveType
specifier|static
name|int
name|sm_saveType
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|sm_cancel
specifier|static
name|bool
name|sm_cancel
decl_stmt|;
end_decl_stmt
begin_comment
comment|// static bool sm_waitingForPhase2;  ### never used?!?
end_comment
begin_decl_stmt
DECL|variable|sm_waitingForInteraction
specifier|static
name|bool
name|sm_waitingForInteraction
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|sm_isshutdown
specifier|static
name|bool
name|sm_isshutdown
decl_stmt|;
end_decl_stmt
begin_comment
comment|// static bool sm_shouldbefast;  ### never used?!?
end_comment
begin_decl_stmt
DECL|variable|sm_phase2
specifier|static
name|bool
name|sm_phase2
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|sm_in_phase2
specifier|static
name|bool
name|sm_in_phase2
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|sm_receiver
specifier|static
name|QSmSocketReceiver
modifier|*
name|sm_receiver
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|static
name|void
name|resetSmState
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|sm_setProperty
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|type
parameter_list|,
name|int
name|num_vals
parameter_list|,
name|SmPropValue
modifier|*
name|vals
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|sm_saveYourselfCallback
parameter_list|(
name|SmcConn
name|smcConn
parameter_list|,
name|SmPointer
name|clientData
parameter_list|,
name|int
name|saveType
parameter_list|,
name|Bool
name|shutdown
parameter_list|,
name|int
name|interactStyle
parameter_list|,
name|Bool
name|fast
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|sm_saveYourselfPhase2Callback
parameter_list|(
name|SmcConn
name|smcConn
parameter_list|,
name|SmPointer
name|clientData
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|sm_dieCallback
parameter_list|(
name|SmcConn
name|smcConn
parameter_list|,
name|SmPointer
name|clientData
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|sm_shutdownCancelledCallback
parameter_list|(
name|SmcConn
name|smcConn
parameter_list|,
name|SmPointer
name|clientData
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|sm_saveCompleteCallback
parameter_list|(
name|SmcConn
name|smcConn
parameter_list|,
name|SmPointer
name|clientData
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|sm_interactCallback
parameter_list|(
name|SmcConn
name|smcConn
parameter_list|,
name|SmPointer
name|clientData
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|sm_performSaveYourself
parameter_list|(
name|QSessionManagerPrivate
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|resetSmState
specifier|static
name|void
name|resetSmState
parameter_list|()
block|{
comment|//    sm_waitingForPhase2 = false; ### never used?!?
name|sm_waitingForInteraction
operator|=
literal|false
expr_stmt|;
name|sm_interactionActive
operator|=
literal|false
expr_stmt|;
name|sm_interactStyle
operator|=
name|SmInteractStyleNone
expr_stmt|;
name|sm_smActive
operator|=
literal|false
expr_stmt|;
name|qt_sm_blockUserInput
operator|=
literal|false
expr_stmt|;
name|sm_isshutdown
operator|=
literal|false
expr_stmt|;
comment|//    sm_shouldbefast = false; ### never used?!?
name|sm_phase2
operator|=
literal|false
expr_stmt|;
name|sm_in_phase2
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_comment
comment|// theoretically it's possible to set several properties at once. For
end_comment
begin_comment
comment|// simplicity, however, we do just one property at a time
end_comment
begin_function
DECL|function|sm_setProperty
specifier|static
name|void
name|sm_setProperty
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|type
parameter_list|,
name|int
name|num_vals
parameter_list|,
name|SmPropValue
modifier|*
name|vals
parameter_list|)
block|{
if|if
condition|(
name|num_vals
condition|)
block|{
name|SmProp
name|prop
decl_stmt|;
name|prop
operator|.
name|name
operator|=
operator|(
name|char
operator|*
operator|)
name|name
expr_stmt|;
name|prop
operator|.
name|type
operator|=
operator|(
name|char
operator|*
operator|)
name|type
expr_stmt|;
name|prop
operator|.
name|num_vals
operator|=
name|num_vals
expr_stmt|;
name|prop
operator|.
name|vals
operator|=
name|vals
expr_stmt|;
name|SmProp
modifier|*
name|props
index|[
literal|1
index|]
decl_stmt|;
name|props
index|[
literal|0
index|]
operator|=
operator|&
name|prop
expr_stmt|;
name|SmcSetProperties
argument_list|(
name|smcConnection
argument_list|,
literal|1
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|char
modifier|*
name|names
index|[
literal|1
index|]
decl_stmt|;
name|names
index|[
literal|0
index|]
operator|=
operator|(
name|char
operator|*
operator|)
name|name
expr_stmt|;
name|SmcDeleteProperties
argument_list|(
name|smcConnection
argument_list|,
literal|1
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sm_setProperty
specifier|static
name|void
name|sm_setProperty
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QString
modifier|&
name|value
parameter_list|)
block|{
name|QByteArray
name|v
init|=
name|value
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|SmPropValue
name|prop
decl_stmt|;
name|prop
operator|.
name|length
operator|=
name|v
operator|.
name|length
argument_list|()
expr_stmt|;
name|prop
operator|.
name|value
operator|=
operator|(
name|SmPointer
operator|)
name|v
operator|.
name|constData
argument_list|()
expr_stmt|;
name|sm_setProperty
argument_list|(
name|name
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|SmARRAY8
argument_list|,
literal|1
argument_list|,
operator|&
name|prop
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sm_setProperty
specifier|static
name|void
name|sm_setProperty
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|value
parameter_list|)
block|{
name|SmPropValue
modifier|*
name|prop
init|=
operator|new
name|SmPropValue
index|[
name|value
operator|.
name|count
argument_list|()
index|]
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|vl
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|value
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|value
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|prop
index|[
name|count
index|]
operator|.
name|length
operator|=
operator|(
operator|*
name|it
operator|)
operator|.
name|length
argument_list|()
expr_stmt|;
name|vl
operator|.
name|append
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|prop
index|[
name|count
index|]
operator|.
name|value
operator|=
operator|(
name|char
operator|*
operator|)
name|vl
operator|.
name|last
argument_list|()
operator|.
name|data
argument_list|()
expr_stmt|;
operator|++
name|count
expr_stmt|;
block|}
name|sm_setProperty
argument_list|(
name|name
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|SmLISTofARRAY8
argument_list|,
name|count
argument_list|,
name|prop
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|prop
expr_stmt|;
block|}
end_function
begin_comment
comment|// workaround for broken libsm, see below
end_comment
begin_struct
DECL|struct|QT_smcConn
struct|struct
name|QT_smcConn
block|{
DECL|member|save_yourself_in_progress
name|unsigned
name|int
name|save_yourself_in_progress
range|:
literal|1
decl_stmt|;
DECL|member|shutdown_in_progress
name|unsigned
name|int
name|shutdown_in_progress
range|:
literal|1
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|sm_saveYourselfCallback
specifier|static
name|void
name|sm_saveYourselfCallback
parameter_list|(
name|SmcConn
name|smcConn
parameter_list|,
name|SmPointer
name|clientData
parameter_list|,
name|int
name|saveType
parameter_list|,
name|Bool
name|shutdown
parameter_list|,
name|int
name|interactStyle
parameter_list|,
name|Bool
comment|/*fast*/
parameter_list|)
block|{
if|if
condition|(
name|smcConn
operator|!=
name|smcConnection
condition|)
return|return;
name|sm_cancel
operator|=
literal|false
expr_stmt|;
name|sm_smActive
operator|=
literal|true
expr_stmt|;
name|sm_isshutdown
operator|=
name|shutdown
expr_stmt|;
name|sm_saveType
operator|=
name|saveType
expr_stmt|;
name|sm_interactStyle
operator|=
name|interactStyle
expr_stmt|;
comment|//    sm_shouldbefast = fast; ### never used?!?
comment|// ugly workaround for broken libSM. libSM should do that _before_
comment|// actually invoking the callback in sm_process.c
operator|(
operator|(
name|QT_smcConn
operator|*
operator|)
name|smcConn
operator|)
operator|->
name|save_yourself_in_progress
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|sm_isshutdown
condition|)
operator|(
operator|(
name|QT_smcConn
operator|*
operator|)
name|smcConn
operator|)
operator|->
name|shutdown_in_progress
operator|=
literal|true
expr_stmt|;
name|sm_performSaveYourself
argument_list|(
operator|(
name|QSessionManagerPrivate
operator|*
operator|)
name|clientData
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sm_isshutdown
condition|)
comment|// we cannot expect a confirmation message in that case
name|resetSmState
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sm_performSaveYourself
specifier|static
name|void
name|sm_performSaveYourself
parameter_list|(
name|QSessionManagerPrivate
modifier|*
name|smd
parameter_list|)
block|{
if|if
condition|(
name|sm_isshutdown
condition|)
name|qt_sm_blockUserInput
operator|=
literal|true
expr_stmt|;
name|QSessionManager
modifier|*
name|sm
init|=
name|smd
operator|->
name|sm
decl_stmt|;
comment|// generate a new session key
name|timeval
name|tv
decl_stmt|;
name|gettimeofday
argument_list|(
operator|&
name|tv
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|smd
operator|->
name|sessionKey
operator|=
name|QString
operator|::
name|number
argument_list|(
name|qulonglong
argument_list|(
name|tv
operator|.
name|tv_sec
argument_list|)
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qulonglong
argument_list|(
name|tv
operator|.
name|tv_usec
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|arguments
init|=
name|qApp
operator|->
name|arguments
argument_list|()
decl_stmt|;
name|QString
name|argument0
init|=
name|arguments
operator|.
name|isEmpty
argument_list|()
condition|?
name|qApp
operator|->
name|applicationFilePath
argument_list|()
else|:
name|arguments
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// tell the session manager about our program in best POSIX style
name|sm_setProperty
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|SmProgram
argument_list|)
argument_list|,
name|argument0
argument_list|)
expr_stmt|;
comment|// tell the session manager about our user as well.
name|struct
name|passwd
modifier|*
name|entryPtr
init|=
literal|0
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|_POSIX_THREAD_SAFE_FUNCTIONS
argument_list|)
operator|&&
operator|(
name|_POSIX_THREAD_SAFE_FUNCTIONS
operator|-
literal|0
operator|>
literal|0
operator|)
name|QVarLengthArray
argument_list|<
name|char
argument_list|,
literal|1024
argument_list|>
name|buf
argument_list|(
name|qMax
argument_list|<
name|long
argument_list|>
argument_list|(
name|sysconf
argument_list|(
name|_SC_GETPW_R_SIZE_MAX
argument_list|)
argument_list|,
literal|1024L
argument_list|)
argument_list|)
decl_stmt|;
name|struct
name|passwd
name|entry
decl_stmt|;
while|while
condition|(
name|getpwuid_r
argument_list|(
name|geteuid
argument_list|()
argument_list|,
operator|&
name|entry
argument_list|,
name|buf
operator|.
name|data
argument_list|()
argument_list|,
name|buf
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|entryPtr
argument_list|)
operator|==
name|ERANGE
condition|)
block|{
if|if
condition|(
name|buf
operator|.
name|size
argument_list|()
operator|>=
literal|32768
condition|)
block|{
comment|// too big already, fail
specifier|static
name|char
name|badusername
index|[]
init|=
literal|""
decl_stmt|;
name|entryPtr
operator|=
operator|&
name|entry
expr_stmt|;
name|entry
operator|.
name|pw_name
operator|=
name|badusername
expr_stmt|;
break|break;
block|}
comment|// retry with a bigger buffer
name|buf
operator|.
name|resize
argument_list|(
name|buf
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|entryPtr
operator|=
name|getpwuid
argument_list|(
name|geteuid
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|entryPtr
condition|)
name|sm_setProperty
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|SmUserID
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|entryPtr
operator|->
name|pw_name
argument_list|)
argument_list|)
expr_stmt|;
comment|// generate a restart and discard command that makes sense
name|QStringList
name|restart
decl_stmt|;
name|restart
operator|<<
name|argument0
operator|<<
name|QLatin1String
argument_list|(
literal|"-session"
argument_list|)
operator|<<
name|smd
operator|->
name|sessionId
operator|+
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
operator|+
name|smd
operator|->
name|sessionKey
expr_stmt|;
if|if
condition|(
name|qstricmp
argument_list|(
name|appName
argument_list|,
name|QX11Info
operator|::
name|appClass
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
name|restart
operator|<<
name|QLatin1String
argument_list|(
literal|"-name"
argument_list|)
operator|<<
name|qAppName
argument_list|()
expr_stmt|;
name|sm
operator|->
name|setRestartCommand
argument_list|(
name|restart
argument_list|)
expr_stmt|;
name|QStringList
name|discard
decl_stmt|;
name|sm
operator|->
name|setDiscardCommand
argument_list|(
name|discard
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|sm_saveType
condition|)
block|{
case|case
name|SmSaveBoth
case|:
name|qApp
operator|->
name|commitData
argument_list|(
operator|*
name|sm
argument_list|)
expr_stmt|;
if|if
condition|(
name|sm_isshutdown
operator|&&
name|sm_cancel
condition|)
break|break;
comment|// we cancelled the shutdown, no need to save state
comment|// fall through
case|case
name|SmSaveLocal
case|:
name|qApp
operator|->
name|saveState
argument_list|(
operator|*
name|sm
argument_list|)
expr_stmt|;
break|break;
case|case
name|SmSaveGlobal
case|:
name|qApp
operator|->
name|commitData
argument_list|(
operator|*
name|sm
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|sm_phase2
operator|&&
operator|!
name|sm_in_phase2
condition|)
block|{
name|SmcRequestSaveYourselfPhase2
argument_list|(
name|smcConnection
argument_list|,
name|sm_saveYourselfPhase2Callback
argument_list|,
operator|(
name|SmPointer
operator|*
operator|)
name|smd
argument_list|)
expr_stmt|;
name|qt_sm_blockUserInput
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// close eventual interaction monitors and cancel the
comment|// shutdown, if required. Note that we can only cancel when
comment|// performing a shutdown, it does not work for checkpoints
if|if
condition|(
name|sm_interactionActive
condition|)
block|{
name|SmcInteractDone
argument_list|(
name|smcConnection
argument_list|,
name|sm_isshutdown
operator|&&
name|sm_cancel
argument_list|)
expr_stmt|;
name|sm_interactionActive
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sm_cancel
operator|&&
name|sm_isshutdown
condition|)
block|{
if|if
condition|(
name|sm
operator|->
name|allowsErrorInteraction
argument_list|()
condition|)
block|{
name|SmcInteractDone
argument_list|(
name|smcConnection
argument_list|,
name|True
argument_list|)
expr_stmt|;
name|sm_interactionActive
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// set restart and discard command in session manager
name|sm_setProperty
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|SmRestartCommand
argument_list|)
argument_list|,
name|sm
operator|->
name|restartCommand
argument_list|()
argument_list|)
expr_stmt|;
name|sm_setProperty
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|SmDiscardCommand
argument_list|)
argument_list|,
name|sm
operator|->
name|discardCommand
argument_list|()
argument_list|)
expr_stmt|;
comment|// set the restart hint
name|SmPropValue
name|prop
decl_stmt|;
name|prop
operator|.
name|length
operator|=
sizeof|sizeof
argument_list|(
name|int
argument_list|)
expr_stmt|;
name|int
name|value
init|=
name|sm
operator|->
name|restartHint
argument_list|()
decl_stmt|;
name|prop
operator|.
name|value
operator|=
operator|(
name|SmPointer
operator|)
operator|&
name|value
expr_stmt|;
name|sm_setProperty
argument_list|(
name|SmRestartStyleHint
argument_list|,
name|SmCARD8
argument_list|,
literal|1
argument_list|,
operator|&
name|prop
argument_list|)
expr_stmt|;
comment|// we are done
name|SmcSaveYourselfDone
argument_list|(
name|smcConnection
argument_list|,
operator|!
name|sm_cancel
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sm_dieCallback
specifier|static
name|void
name|sm_dieCallback
parameter_list|(
name|SmcConn
name|smcConn
parameter_list|,
name|SmPointer
comment|/* clientData */
parameter_list|)
block|{
if|if
condition|(
name|smcConn
operator|!=
name|smcConnection
condition|)
return|return;
name|resetSmState
argument_list|()
expr_stmt|;
name|QEvent
name|quitEvent
argument_list|(
name|QEvent
operator|::
name|Quit
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|qApp
argument_list|,
operator|&
name|quitEvent
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sm_shutdownCancelledCallback
specifier|static
name|void
name|sm_shutdownCancelledCallback
parameter_list|(
name|SmcConn
name|smcConn
parameter_list|,
name|SmPointer
name|clientData
parameter_list|)
block|{
if|if
condition|(
name|smcConn
operator|!=
name|smcConnection
condition|)
return|return;
if|if
condition|(
name|sm_waitingForInteraction
condition|)
operator|(
operator|(
name|QSessionManagerPrivate
operator|*
operator|)
name|clientData
operator|)
operator|->
name|eventLoop
operator|->
name|exit
argument_list|()
expr_stmt|;
name|resetSmState
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sm_saveCompleteCallback
specifier|static
name|void
name|sm_saveCompleteCallback
parameter_list|(
name|SmcConn
name|smcConn
parameter_list|,
name|SmPointer
comment|/*clientData */
parameter_list|)
block|{
if|if
condition|(
name|smcConn
operator|!=
name|smcConnection
condition|)
return|return;
name|resetSmState
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sm_interactCallback
specifier|static
name|void
name|sm_interactCallback
parameter_list|(
name|SmcConn
name|smcConn
parameter_list|,
name|SmPointer
name|clientData
parameter_list|)
block|{
if|if
condition|(
name|smcConn
operator|!=
name|smcConnection
condition|)
return|return;
if|if
condition|(
name|sm_waitingForInteraction
condition|)
operator|(
operator|(
name|QSessionManagerPrivate
operator|*
operator|)
name|clientData
operator|)
operator|->
name|eventLoop
operator|->
name|exit
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sm_saveYourselfPhase2Callback
specifier|static
name|void
name|sm_saveYourselfPhase2Callback
parameter_list|(
name|SmcConn
name|smcConn
parameter_list|,
name|SmPointer
name|clientData
parameter_list|)
block|{
if|if
condition|(
name|smcConn
operator|!=
name|smcConnection
condition|)
return|return;
name|sm_in_phase2
operator|=
literal|true
expr_stmt|;
name|sm_performSaveYourself
argument_list|(
operator|(
name|QSessionManagerPrivate
operator|*
operator|)
name|clientData
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|socketActivated
name|void
name|QSmSocketReceiver
operator|::
name|socketActivated
parameter_list|(
name|int
parameter_list|)
block|{
name|IceProcessMessages
argument_list|(
name|SmcGetIceConnection
argument_list|(
name|smcConnection
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_undef
DECL|macro|Bool
undef|#
directive|undef
name|Bool
end_undef
begin_macro
name|QT_BEGIN_INCLUDE_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qapplication_x11.moc"
end_include
begin_macro
name|QT_END_INCLUDE_NAMESPACE
end_macro
begin_constructor
DECL|function|QSessionManager
name|QSessionManager
operator|::
name|QSessionManager
parameter_list|(
name|QApplication
modifier|*
name|app
parameter_list|,
name|QString
modifier|&
name|id
parameter_list|,
name|QString
modifier|&
name|key
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QSessionManagerPrivate
argument_list|(
name|this
argument_list|,
name|id
argument_list|,
name|key
argument_list|)
argument_list|,
name|app
argument_list|)
block|{
name|Q_D
argument_list|(
name|QSessionManager
argument_list|)
expr_stmt|;
name|d
operator|->
name|restartHint
operator|=
name|RestartIfRunning
expr_stmt|;
name|resetSmState
argument_list|()
expr_stmt|;
name|char
name|cerror
index|[
literal|256
index|]
decl_stmt|;
name|char
modifier|*
name|myId
init|=
literal|0
decl_stmt|;
name|QByteArray
name|b_id
init|=
name|id
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|char
modifier|*
name|prevId
init|=
name|b_id
operator|.
name|data
argument_list|()
decl_stmt|;
name|SmcCallbacks
name|cb
decl_stmt|;
name|cb
operator|.
name|save_yourself
operator|.
name|callback
operator|=
name|sm_saveYourselfCallback
expr_stmt|;
name|cb
operator|.
name|save_yourself
operator|.
name|client_data
operator|=
operator|(
name|SmPointer
operator|)
name|d
expr_stmt|;
name|cb
operator|.
name|die
operator|.
name|callback
operator|=
name|sm_dieCallback
expr_stmt|;
name|cb
operator|.
name|die
operator|.
name|client_data
operator|=
operator|(
name|SmPointer
operator|)
name|d
expr_stmt|;
name|cb
operator|.
name|save_complete
operator|.
name|callback
operator|=
name|sm_saveCompleteCallback
expr_stmt|;
name|cb
operator|.
name|save_complete
operator|.
name|client_data
operator|=
operator|(
name|SmPointer
operator|)
name|d
expr_stmt|;
name|cb
operator|.
name|shutdown_cancelled
operator|.
name|callback
operator|=
name|sm_shutdownCancelledCallback
expr_stmt|;
name|cb
operator|.
name|shutdown_cancelled
operator|.
name|client_data
operator|=
operator|(
name|SmPointer
operator|)
name|d
expr_stmt|;
comment|// avoid showing a warning message below
if|if
condition|(
name|qgetenv
argument_list|(
literal|"SESSION_MANAGER"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|smcConnection
operator|=
name|SmcOpenConnection
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|SmcSaveYourselfProcMask
operator||
name|SmcDieProcMask
operator||
name|SmcSaveCompleteProcMask
operator||
name|SmcShutdownCancelledProcMask
argument_list|,
operator|&
name|cb
argument_list|,
name|prevId
argument_list|,
operator|&
name|myId
argument_list|,
literal|256
argument_list|,
name|cerror
argument_list|)
expr_stmt|;
name|id
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|myId
argument_list|)
expr_stmt|;
operator|::
name|free
argument_list|(
name|myId
argument_list|)
expr_stmt|;
comment|// it was allocated by C
name|QString
name|error
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|cerror
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|smcConnection
condition|)
block|{
name|qWarning
argument_list|(
literal|"Qt: Session management error: %s"
argument_list|,
name|qPrintable
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sm_receiver
operator|=
operator|new
name|QSmSocketReceiver
argument_list|(
name|IceConnectionNumber
argument_list|(
name|SmcGetIceConnection
argument_list|(
name|smcConnection
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QSessionManager
name|QSessionManager
operator|::
name|~
name|QSessionManager
parameter_list|()
block|{
if|if
condition|(
name|smcConnection
condition|)
name|SmcCloseConnection
argument_list|(
name|smcConnection
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|smcConnection
operator|=
literal|0
expr_stmt|;
operator|delete
name|sm_receiver
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|sessionId
name|QString
name|QSessionManager
operator|::
name|sessionId
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSessionManager
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|sessionId
return|;
block|}
end_function
begin_function
DECL|function|sessionKey
name|QString
name|QSessionManager
operator|::
name|sessionKey
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSessionManager
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|sessionKey
return|;
block|}
end_function
begin_function
DECL|function|handle
name|void
modifier|*
name|QSessionManager
operator|::
name|handle
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|void
operator|*
operator|)
name|smcConnection
return|;
block|}
end_function
begin_function
DECL|function|allowsInteraction
name|bool
name|QSessionManager
operator|::
name|allowsInteraction
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QSessionManager
argument_list|)
expr_stmt|;
if|if
condition|(
name|sm_interactionActive
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|sm_waitingForInteraction
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|sm_interactStyle
operator|==
name|SmInteractStyleAny
condition|)
block|{
name|sm_waitingForInteraction
operator|=
name|SmcInteractRequest
argument_list|(
name|smcConnection
argument_list|,
name|SmDialogNormal
argument_list|,
name|sm_interactCallback
argument_list|,
operator|(
name|SmPointer
operator|*
operator|)
name|d
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sm_waitingForInteraction
condition|)
block|{
name|QEventLoop
name|eventLoop
decl_stmt|;
name|d
operator|->
name|eventLoop
operator|=
operator|&
name|eventLoop
expr_stmt|;
operator|(
name|void
operator|)
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|d
operator|->
name|eventLoop
operator|=
literal|0
expr_stmt|;
name|sm_waitingForInteraction
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|sm_smActive
condition|)
block|{
comment|// not cancelled
name|sm_interactionActive
operator|=
literal|true
expr_stmt|;
name|qt_sm_blockUserInput
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|allowsErrorInteraction
name|bool
name|QSessionManager
operator|::
name|allowsErrorInteraction
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QSessionManager
argument_list|)
expr_stmt|;
if|if
condition|(
name|sm_interactionActive
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|sm_waitingForInteraction
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|sm_interactStyle
operator|==
name|SmInteractStyleAny
operator|||
name|sm_interactStyle
operator|==
name|SmInteractStyleErrors
condition|)
block|{
name|sm_waitingForInteraction
operator|=
name|SmcInteractRequest
argument_list|(
name|smcConnection
argument_list|,
name|SmDialogError
argument_list|,
name|sm_interactCallback
argument_list|,
operator|(
name|SmPointer
operator|*
operator|)
name|d
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sm_waitingForInteraction
condition|)
block|{
name|QEventLoop
name|eventLoop
decl_stmt|;
name|d
operator|->
name|eventLoop
operator|=
operator|&
name|eventLoop
expr_stmt|;
operator|(
name|void
operator|)
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|d
operator|->
name|eventLoop
operator|=
literal|0
expr_stmt|;
name|sm_waitingForInteraction
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|sm_smActive
condition|)
block|{
comment|// not cancelled
name|sm_interactionActive
operator|=
literal|true
expr_stmt|;
name|qt_sm_blockUserInput
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|release
name|void
name|QSessionManager
operator|::
name|release
parameter_list|()
block|{
if|if
condition|(
name|sm_interactionActive
condition|)
block|{
name|SmcInteractDone
argument_list|(
name|smcConnection
argument_list|,
name|False
argument_list|)
expr_stmt|;
name|sm_interactionActive
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|sm_smActive
operator|&&
name|sm_isshutdown
condition|)
name|qt_sm_blockUserInput
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cancel
name|void
name|QSessionManager
operator|::
name|cancel
parameter_list|()
block|{
name|sm_cancel
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setRestartHint
name|void
name|QSessionManager
operator|::
name|setRestartHint
parameter_list|(
name|QSessionManager
operator|::
name|RestartHint
name|hint
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSessionManager
argument_list|)
expr_stmt|;
name|d
operator|->
name|restartHint
operator|=
name|hint
expr_stmt|;
block|}
end_function
begin_function
DECL|function|restartHint
name|QSessionManager
operator|::
name|RestartHint
name|QSessionManager
operator|::
name|restartHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSessionManager
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|restartHint
return|;
block|}
end_function
begin_function
DECL|function|setRestartCommand
name|void
name|QSessionManager
operator|::
name|setRestartCommand
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|command
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSessionManager
argument_list|)
expr_stmt|;
name|d
operator|->
name|restartCommand
operator|=
name|command
expr_stmt|;
block|}
end_function
begin_function
DECL|function|restartCommand
name|QStringList
name|QSessionManager
operator|::
name|restartCommand
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSessionManager
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|restartCommand
return|;
block|}
end_function
begin_function
DECL|function|setDiscardCommand
name|void
name|QSessionManager
operator|::
name|setDiscardCommand
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|command
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSessionManager
argument_list|)
expr_stmt|;
name|d
operator|->
name|discardCommand
operator|=
name|command
expr_stmt|;
block|}
end_function
begin_function
DECL|function|discardCommand
name|QStringList
name|QSessionManager
operator|::
name|discardCommand
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSessionManager
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|discardCommand
return|;
block|}
end_function
begin_function
DECL|function|setManagerProperty
name|void
name|QSessionManager
operator|::
name|setManagerProperty
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QString
modifier|&
name|value
parameter_list|)
block|{
name|sm_setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setManagerProperty
name|void
name|QSessionManager
operator|::
name|setManagerProperty
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|value
parameter_list|)
block|{
name|sm_setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isPhase2
name|bool
name|QSessionManager
operator|::
name|isPhase2
parameter_list|()
specifier|const
block|{
return|return
name|sm_in_phase2
return|;
block|}
end_function
begin_function
DECL|function|requestPhase2
name|void
name|QSessionManager
operator|::
name|requestPhase2
parameter_list|()
block|{
name|sm_phase2
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SESSIONMANAGER
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_RX71_MULTITOUCH
argument_list|)
end_if
begin_function
DECL|function|testBit
specifier|static
specifier|inline
name|int
name|testBit
parameter_list|(
specifier|const
name|char
modifier|*
name|array
parameter_list|,
name|int
name|bit
parameter_list|)
block|{
return|return
operator|(
name|array
index|[
name|bit
operator|/
literal|8
index|]
operator|&
operator|(
literal|1
operator|<<
operator|(
name|bit
operator|%
literal|8
operator|)
operator|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|openRX71Device
specifier|static
name|int
name|openRX71Device
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|deviceName
parameter_list|)
block|{
name|int
name|fd
init|=
name|open
argument_list|(
name|deviceName
argument_list|,
name|O_RDONLY
operator||
name|O_NONBLOCK
argument_list|)
decl_stmt|;
if|if
condition|(
name|fd
operator|==
operator|-
literal|1
condition|)
block|{
name|fd
operator|=
operator|-
name|errno
expr_stmt|;
return|return
name|fd
return|;
block|}
comment|// fetch the event type mask and check that the device reports absolute coordinates
name|char
name|eventTypeMask
index|[
operator|(
name|EV_MAX
operator|+
sizeof|sizeof
argument_list|(
name|char
argument_list|)
operator|-
literal|1
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|char
argument_list|)
operator|+
literal|1
index|]
decl_stmt|;
name|memset
argument_list|(
name|eventTypeMask
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|eventTypeMask
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ioctl
argument_list|(
name|fd
argument_list|,
name|EVIOCGBIT
argument_list|(
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|eventTypeMask
argument_list|)
argument_list|)
argument_list|,
name|eventTypeMask
argument_list|)
operator|<
literal|0
condition|)
block|{
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|testBit
argument_list|(
name|eventTypeMask
argument_list|,
name|EV_ABS
argument_list|)
condition|)
block|{
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
comment|// make sure that we can get the absolute X and Y positions from the device
name|char
name|absMask
index|[
operator|(
name|ABS_MAX
operator|+
sizeof|sizeof
argument_list|(
name|char
argument_list|)
operator|-
literal|1
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|char
argument_list|)
operator|+
literal|1
index|]
decl_stmt|;
name|memset
argument_list|(
name|absMask
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|absMask
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ioctl
argument_list|(
name|fd
argument_list|,
name|EVIOCGBIT
argument_list|(
name|EV_ABS
argument_list|,
sizeof|sizeof
argument_list|(
name|absMask
argument_list|)
argument_list|)
argument_list|,
name|absMask
argument_list|)
operator|<
literal|0
condition|)
block|{
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|testBit
argument_list|(
name|absMask
argument_list|,
name|ABS_X
argument_list|)
operator|||
operator|!
name|testBit
argument_list|(
name|absMask
argument_list|,
name|ABS_Y
argument_list|)
condition|)
block|{
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|fd
return|;
block|}
end_function
begin_function
DECL|function|initializeMultitouch_sys
name|void
name|QApplicationPrivate
operator|::
name|initializeMultitouch_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QApplication
argument_list|)
expr_stmt|;
name|QByteArray
name|deviceName
init|=
name|QByteArray
argument_list|(
literal|"/dev/input/event"
argument_list|)
decl_stmt|;
name|int
name|currentDeviceNumber
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|fd
init|=
name|openRX71Device
argument_list|(
name|QByteArray
argument_list|(
name|deviceName
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|currentDeviceNumber
operator|++
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fd
operator|==
operator|-
name|ENOENT
condition|)
block|{
comment|// no more devices
break|break;
block|}
if|if
condition|(
name|fd
operator|<
literal|0
condition|)
block|{
comment|// not a touch device
continue|continue;
block|}
name|struct
name|input_absinfo
name|abs_x
decl_stmt|,
name|abs_y
decl_stmt|,
name|abs_z
decl_stmt|;
name|ioctl
argument_list|(
name|fd
argument_list|,
name|EVIOCGABS
argument_list|(
name|ABS_X
argument_list|)
argument_list|,
operator|&
name|abs_x
argument_list|)
expr_stmt|;
name|ioctl
argument_list|(
name|fd
argument_list|,
name|EVIOCGABS
argument_list|(
name|ABS_Y
argument_list|)
argument_list|,
operator|&
name|abs_y
argument_list|)
expr_stmt|;
name|ioctl
argument_list|(
name|fd
argument_list|,
name|EVIOCGABS
argument_list|(
name|ABS_Z
argument_list|)
argument_list|,
operator|&
name|abs_z
argument_list|)
expr_stmt|;
name|int
name|deviceNumber
init|=
name|allRX71TouchPoints
operator|.
name|count
argument_list|()
decl_stmt|;
name|QSocketNotifier
modifier|*
name|socketNotifier
init|=
operator|new
name|QSocketNotifier
argument_list|(
name|fd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|socketNotifier
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_readRX71MultiTouchEvents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RX71TouchPointState
name|touchPointState
init|=
block|{
name|socketNotifier
block|,
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|(
name|deviceNumber
argument_list|)
block|,
name|abs_x
operator|.
name|minimum
block|,
name|abs_x
operator|.
name|maximum
block|,
name|q
operator|->
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|()
operator|.
name|width
argument_list|()
block|,
name|abs_y
operator|.
name|minimum
block|,
name|abs_y
operator|.
name|maximum
block|,
name|q
operator|->
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|()
operator|.
name|height
argument_list|()
block|,
name|abs_z
operator|.
name|minimum
block|,
name|abs_z
operator|.
name|maximum
block|}
decl_stmt|;
name|allRX71TouchPoints
operator|.
name|append
argument_list|(
name|touchPointState
argument_list|)
expr_stmt|;
block|}
name|hasRX71MultiTouch
operator|=
name|allRX71TouchPoints
operator|.
name|count
argument_list|()
operator|>
literal|1
expr_stmt|;
if|if
condition|(
operator|!
name|hasRX71MultiTouch
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allRX71TouchPoints
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QSocketNotifier
modifier|*
name|socketNotifier
init|=
name|allRX71TouchPoints
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|socketNotifier
decl_stmt|;
name|close
argument_list|(
name|socketNotifier
operator|->
name|socket
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|socketNotifier
expr_stmt|;
block|}
name|allRX71TouchPoints
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cleanupMultitouch_sys
name|void
name|QApplicationPrivate
operator|::
name|cleanupMultitouch_sys
parameter_list|()
block|{
name|hasRX71MultiTouch
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allRX71TouchPoints
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QSocketNotifier
modifier|*
name|socketNotifier
init|=
name|allRX71TouchPoints
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|socketNotifier
decl_stmt|;
name|close
argument_list|(
name|socketNotifier
operator|->
name|socket
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|socketNotifier
expr_stmt|;
block|}
name|allRX71TouchPoints
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readRX71MultiTouchEvents
name|bool
name|QApplicationPrivate
operator|::
name|readRX71MultiTouchEvents
parameter_list|(
name|int
name|deviceNumber
parameter_list|)
block|{
name|RX71TouchPointState
modifier|&
name|touchPointState
init|=
name|allRX71TouchPoints
index|[
name|deviceNumber
index|]
decl_stmt|;
name|QSocketNotifier
modifier|*
name|socketNotifier
init|=
name|touchPointState
operator|.
name|socketNotifier
decl_stmt|;
name|int
name|fd
init|=
name|socketNotifier
operator|->
name|socket
argument_list|()
decl_stmt|;
name|QTouchEvent
operator|::
name|TouchPoint
modifier|&
name|touchPoint
init|=
name|touchPointState
operator|.
name|touchPoint
decl_stmt|;
name|bool
name|down
init|=
name|touchPoint
operator|.
name|state
argument_list|()
operator|!=
name|Qt
operator|::
name|TouchPointReleased
decl_stmt|;
if|if
condition|(
name|down
condition|)
name|touchPoint
operator|.
name|setState
argument_list|(
name|Qt
operator|::
name|TouchPointStationary
argument_list|)
expr_stmt|;
name|bool
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|struct
name|input_event
name|inputEvent
decl_stmt|;
name|int
name|bytesRead
init|=
name|read
argument_list|(
name|fd
argument_list|,
operator|&
name|inputEvent
argument_list|,
sizeof|sizeof
argument_list|(
name|inputEvent
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesRead
operator|<=
literal|0
condition|)
break|break;
if|if
condition|(
name|bytesRead
operator|!=
sizeof|sizeof
argument_list|(
name|inputEvent
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Qt: INTERNAL ERROR: short read in readRX71MultiTouchEvents()"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|inputEvent
operator|.
name|type
condition|)
block|{
case|case
name|EV_SYN
case|:
name|changed
operator|=
literal|true
expr_stmt|;
switch|switch
condition|(
name|touchPoint
operator|.
name|state
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|TouchPointPressed
case|:
case|case
name|Qt
operator|::
name|TouchPointReleased
case|:
comment|// make sure we don't compress pressed and releases with any other events
return|return
name|changed
return|;
default|default:
break|break;
block|}
continue|continue;
case|case
name|EV_KEY
case|:
case|case
name|EV_ABS
case|:
break|break;
default|default:
name|qWarning
argument_list|(
literal|"Qt: WARNING: unknown event type %d on multitouch device"
argument_list|,
name|inputEvent
operator|.
name|type
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QPointF
name|screenPos
init|=
name|touchPoint
operator|.
name|screenPos
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|inputEvent
operator|.
name|code
condition|)
block|{
case|case
name|BTN_TOUCH
case|:
if|if
condition|(
operator|!
name|down
operator|&&
name|inputEvent
operator|.
name|value
operator|!=
literal|0
condition|)
name|touchPoint
operator|.
name|setState
argument_list|(
name|Qt
operator|::
name|TouchPointPressed
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|down
operator|&&
name|inputEvent
operator|.
name|value
operator|==
literal|0
condition|)
name|touchPoint
operator|.
name|setState
argument_list|(
name|Qt
operator|::
name|TouchPointReleased
argument_list|)
expr_stmt|;
break|break;
case|case
name|ABS_TOOL_WIDTH
case|:
case|case
name|ABS_VOLUME
case|:
case|case
name|ABS_PRESSURE
case|:
comment|// ignore for now
break|break;
case|case
name|ABS_X
case|:
block|{
name|qreal
name|newValue
init|=
operator|(
operator|(
name|qreal
argument_list|(
name|inputEvent
operator|.
name|value
operator|-
name|touchPointState
operator|.
name|minX
argument_list|)
operator|/
name|qreal
argument_list|(
name|touchPointState
operator|.
name|maxX
operator|-
name|touchPointState
operator|.
name|minX
argument_list|)
operator|)
operator|*
name|touchPointState
operator|.
name|scaleX
operator|)
decl_stmt|;
name|screenPos
operator|.
name|rx
argument_list|()
operator|=
name|newValue
expr_stmt|;
name|touchPoint
operator|.
name|setScreenPos
argument_list|(
name|screenPos
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ABS_Y
case|:
block|{
name|qreal
name|newValue
init|=
operator|(
operator|(
name|qreal
argument_list|(
name|inputEvent
operator|.
name|value
operator|-
name|touchPointState
operator|.
name|minY
argument_list|)
operator|/
name|qreal
argument_list|(
name|touchPointState
operator|.
name|maxY
operator|-
name|touchPointState
operator|.
name|minY
argument_list|)
operator|)
operator|*
name|touchPointState
operator|.
name|scaleY
operator|)
decl_stmt|;
name|screenPos
operator|.
name|ry
argument_list|()
operator|=
name|newValue
expr_stmt|;
name|touchPoint
operator|.
name|setScreenPos
argument_list|(
name|screenPos
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ABS_Z
case|:
block|{
comment|// map Z (signal strength) to pressure for now
name|qreal
name|newValue
init|=
operator|(
name|qreal
argument_list|(
name|inputEvent
operator|.
name|value
operator|-
name|touchPointState
operator|.
name|minZ
argument_list|)
operator|/
name|qreal
argument_list|(
name|touchPointState
operator|.
name|maxZ
operator|-
name|touchPointState
operator|.
name|minZ
argument_list|)
operator|)
decl_stmt|;
name|touchPoint
operator|.
name|setPressure
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
name|qWarning
argument_list|(
literal|"Qt: WARNING: unknown event code %d on multitouch device"
argument_list|,
name|inputEvent
operator|.
name|code
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|down
operator|&&
name|touchPoint
operator|.
name|state
argument_list|()
operator|!=
name|Qt
operator|::
name|TouchPointReleased
condition|)
name|touchPoint
operator|.
name|setState
argument_list|(
name|changed
condition|?
name|Qt
operator|::
name|TouchPointMoved
else|:
name|Qt
operator|::
name|TouchPointStationary
argument_list|)
expr_stmt|;
return|return
name|changed
return|;
block|}
end_function
begin_function
DECL|function|_q_readRX71MultiTouchEvents
name|void
name|QApplicationPrivate
operator|::
name|_q_readRX71MultiTouchEvents
parameter_list|()
block|{
comment|// read touch events from all devices
name|bool
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allRX71TouchPoints
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|changed
operator|=
name|readRX71MultiTouchEvents
argument_list|(
name|i
argument_list|)
operator|||
name|changed
expr_stmt|;
if|if
condition|(
operator|!
name|changed
condition|)
return|return;
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
name|touchPoints
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allRX71TouchPoints
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|touchPoints
operator|.
name|append
argument_list|(
name|allRX71TouchPoints
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|touchPoint
argument_list|)
expr_stmt|;
name|translateRawTouchEvent
argument_list|(
literal|0
argument_list|,
name|QTouchEvent
operator|::
name|TouchScreen
argument_list|,
name|touchPoints
argument_list|)
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_comment
comment|// !QT_RX71_MULTITOUCH
end_comment
begin_function
DECL|function|initializeMultitouch_sys
name|void
name|QApplicationPrivate
operator|::
name|initializeMultitouch_sys
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanupMultitouch_sys
name|void
name|QApplicationPrivate
operator|::
name|cleanupMultitouch_sys
parameter_list|()
block|{ }
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_RX71_MULTITOUCH
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
