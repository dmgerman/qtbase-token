begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qstylehints.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformintegration.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformtheme.h>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|hint
specifier|static
specifier|inline
name|QVariant
name|hint
parameter_list|(
name|QPlatformIntegration
operator|::
name|StyleHint
name|h
parameter_list|)
block|{
return|return
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|styleHint
argument_list|(
name|h
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|themeableHint
specifier|static
specifier|inline
name|QVariant
name|themeableHint
parameter_list|(
name|QPlatformTheme
operator|::
name|ThemeHint
name|th
parameter_list|,
name|QPlatformIntegration
operator|::
name|StyleHint
name|ih
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QCoreApplication
operator|::
name|instance
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Must construct a QGuiApplication before accessing a platform theme hint."
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|()
return|;
block|}
if|if
condition|(
specifier|const
name|QPlatformTheme
modifier|*
name|theme
init|=
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
condition|)
block|{
specifier|const
name|QVariant
name|themeHint
init|=
name|theme
operator|->
name|themeHint
argument_list|(
name|th
argument_list|)
decl_stmt|;
if|if
condition|(
name|themeHint
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|themeHint
return|;
block|}
return|return
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|styleHint
argument_list|(
name|ih
argument_list|)
return|;
block|}
end_function
begin_class
DECL|class|QStyleHintsPrivate
class|class
name|QStyleHintsPrivate
super|:
specifier|public
name|QObjectPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QStyleHints
parameter_list|)
specifier|public
private|:
DECL|function|QStyleHintsPrivate
specifier|inline
name|QStyleHintsPrivate
parameter_list|()
member_init_list|:
name|m_mouseDoubleClickInterval
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_mousePressAndHoldInterval
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_startDragDistance
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_startDragTime
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_keyboardInputInterval
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_cursorFlashTime
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_tabFocusBehavior
argument_list|(
operator|-
literal|1
argument_list|)
block|{}
DECL|member|m_mouseDoubleClickInterval
name|int
name|m_mouseDoubleClickInterval
decl_stmt|;
DECL|member|m_mousePressAndHoldInterval
name|int
name|m_mousePressAndHoldInterval
decl_stmt|;
DECL|member|m_startDragDistance
name|int
name|m_startDragDistance
decl_stmt|;
DECL|member|m_startDragTime
name|int
name|m_startDragTime
decl_stmt|;
DECL|member|m_keyboardInputInterval
name|int
name|m_keyboardInputInterval
decl_stmt|;
DECL|member|m_cursorFlashTime
name|int
name|m_cursorFlashTime
decl_stmt|;
DECL|member|m_tabFocusBehavior
name|int
name|m_tabFocusBehavior
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     \class QStyleHints     \since 5.0     \brief The QStyleHints class contains platform specific hints and settings.     \inmodule QtGui      An object of this class, obtained from QGuiApplication, provides access to certain global     user interface parameters of the current platform.      Access is read only; typically the platform itself provides the user a way to tune these     parameters.      Access to these parameters are useful when implementing custom user interface components, in that     they allow the components to exhibit the same behaviour and feel as other components.      \sa QGuiApplication::styleHints()  */
end_comment
begin_constructor
DECL|function|QStyleHints
name|QStyleHints
operator|::
name|QStyleHints
parameter_list|()
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QStyleHintsPrivate
argument_list|()
argument_list|,
literal|0
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Sets the \a mouseDoubleClickInterval.     \internal     \sa mouseDoubleClickInterval()     \since 5.3 */
end_comment
begin_function
DECL|function|setMouseDoubleClickInterval
name|void
name|QStyleHints
operator|::
name|setMouseDoubleClickInterval
parameter_list|(
name|int
name|mouseDoubleClickInterval
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStyleHints
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_mouseDoubleClickInterval
operator|==
name|mouseDoubleClickInterval
condition|)
return|return;
name|d
operator|->
name|m_mouseDoubleClickInterval
operator|=
name|mouseDoubleClickInterval
expr_stmt|;
emit|emit
name|mouseDoubleClickIntervalChanged
argument_list|(
name|mouseDoubleClickInterval
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \property QStyleHints::mouseDoubleClickInterval     \brief the time limit in milliseconds that distinguishes a double click     from two consecutive mouse clicks. */
end_comment
begin_function
DECL|function|mouseDoubleClickInterval
name|int
name|QStyleHints
operator|::
name|mouseDoubleClickInterval
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStyleHints
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_mouseDoubleClickInterval
operator|>=
literal|0
condition|?
name|d
operator|->
name|m_mouseDoubleClickInterval
else|:
name|themeableHint
argument_list|(
name|QPlatformTheme
operator|::
name|MouseDoubleClickInterval
argument_list|,
name|QPlatformIntegration
operator|::
name|MouseDoubleClickInterval
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the \a mousePressAndHoldInterval.     \internal     \sa mousePressAndHoldInterval()     \since 5.7 */
end_comment
begin_function
DECL|function|setMousePressAndHoldInterval
name|void
name|QStyleHints
operator|::
name|setMousePressAndHoldInterval
parameter_list|(
name|int
name|mousePressAndHoldInterval
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStyleHints
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_mousePressAndHoldInterval
operator|==
name|mousePressAndHoldInterval
condition|)
return|return;
name|d
operator|->
name|m_mousePressAndHoldInterval
operator|=
name|mousePressAndHoldInterval
expr_stmt|;
emit|emit
name|mousePressAndHoldIntervalChanged
argument_list|(
name|mousePressAndHoldInterval
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \property QStyleHints::mousePressAndHoldInterval     \brief the time limit in milliseconds that activates     a press and hold.      \since 5.3 */
end_comment
begin_function
DECL|function|mousePressAndHoldInterval
name|int
name|QStyleHints
operator|::
name|mousePressAndHoldInterval
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStyleHints
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_mousePressAndHoldInterval
operator|>=
literal|0
condition|?
name|d
operator|->
name|m_mousePressAndHoldInterval
else|:
name|themeableHint
argument_list|(
name|QPlatformTheme
operator|::
name|MousePressAndHoldInterval
argument_list|,
name|QPlatformIntegration
operator|::
name|MousePressAndHoldInterval
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the \a startDragDistance.     \internal     \sa startDragDistance()     \since 5.3 */
end_comment
begin_function
DECL|function|setStartDragDistance
name|void
name|QStyleHints
operator|::
name|setStartDragDistance
parameter_list|(
name|int
name|startDragDistance
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStyleHints
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_startDragDistance
operator|==
name|startDragDistance
condition|)
return|return;
name|d
operator|->
name|m_startDragDistance
operator|=
name|startDragDistance
expr_stmt|;
emit|emit
name|startDragDistanceChanged
argument_list|(
name|startDragDistance
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \property QStyleHints::startDragDistance     \brief the distance, in pixels, that the mouse must be moved with a button     held down before a drag and drop operation will begin.      If you support drag and drop in your application, and want to start a drag     and drop operation after the user has moved the cursor a certain distance     with a button held down, you should use this property's value as the     minimum distance required.      For example, if the mouse position of the click is stored in \c startPos     and the current position (e.g. in the mouse move event) is \c currentPos,     you can find out if a drag should be started with code like this:      \snippet code/src_gui_kernel_qapplication.cpp 6      \sa startDragTime, QPoint::manhattanLength(), {Drag and Drop} */
end_comment
begin_function
DECL|function|startDragDistance
name|int
name|QStyleHints
operator|::
name|startDragDistance
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStyleHints
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_startDragDistance
operator|>=
literal|0
condition|?
name|d
operator|->
name|m_startDragDistance
else|:
name|themeableHint
argument_list|(
name|QPlatformTheme
operator|::
name|StartDragDistance
argument_list|,
name|QPlatformIntegration
operator|::
name|StartDragDistance
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the \a startDragDragTime.     \internal     \sa startDragTime()     \since 5.3 */
end_comment
begin_function
DECL|function|setStartDragTime
name|void
name|QStyleHints
operator|::
name|setStartDragTime
parameter_list|(
name|int
name|startDragTime
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStyleHints
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_startDragTime
operator|==
name|startDragTime
condition|)
return|return;
name|d
operator|->
name|m_startDragTime
operator|=
name|startDragTime
expr_stmt|;
emit|emit
name|startDragTimeChanged
argument_list|(
name|startDragTime
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \property QStyleHints::startDragTime     \brief the time, in milliseconds, that a mouse button must be held down     before a drag and drop operation will begin.      If you support drag and drop in your application, and want to start a drag     and drop operation after the user has held down a mouse button for a     certain amount of time, you should use this property's value as the delay.      \sa startDragDistance, {Drag and Drop} */
end_comment
begin_function
DECL|function|startDragTime
name|int
name|QStyleHints
operator|::
name|startDragTime
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStyleHints
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_startDragTime
operator|>=
literal|0
condition|?
name|d
operator|->
name|m_startDragTime
else|:
name|themeableHint
argument_list|(
name|QPlatformTheme
operator|::
name|StartDragTime
argument_list|,
name|QPlatformIntegration
operator|::
name|StartDragTime
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QStyleHints::startDragVelocity     \brief the limit for the velocity, in pixels per second, that the mouse may     be moved, with a button held down, for a drag and drop operation to begin.     A value of 0 means there is no such limit.      \sa startDragDistance, {Drag and Drop} */
end_comment
begin_function
DECL|function|startDragVelocity
name|int
name|QStyleHints
operator|::
name|startDragVelocity
parameter_list|()
specifier|const
block|{
return|return
name|themeableHint
argument_list|(
name|QPlatformTheme
operator|::
name|StartDragVelocity
argument_list|,
name|QPlatformIntegration
operator|::
name|StartDragVelocity
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the \a keyboardInputInterval.     \internal     \sa keyboardInputInterval()     \since 5.3 */
end_comment
begin_function
DECL|function|setKeyboardInputInterval
name|void
name|QStyleHints
operator|::
name|setKeyboardInputInterval
parameter_list|(
name|int
name|keyboardInputInterval
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStyleHints
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_keyboardInputInterval
operator|==
name|keyboardInputInterval
condition|)
return|return;
name|d
operator|->
name|m_keyboardInputInterval
operator|=
name|keyboardInputInterval
expr_stmt|;
emit|emit
name|keyboardInputIntervalChanged
argument_list|(
name|keyboardInputInterval
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \property QStyleHints::keyboardInputInterval     \brief the time limit, in milliseconds, that distinguishes a key press     from two consecutive key presses. */
end_comment
begin_function
DECL|function|keyboardInputInterval
name|int
name|QStyleHints
operator|::
name|keyboardInputInterval
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStyleHints
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_keyboardInputInterval
operator|>=
literal|0
condition|?
name|d
operator|->
name|m_keyboardInputInterval
else|:
name|themeableHint
argument_list|(
name|QPlatformTheme
operator|::
name|KeyboardInputInterval
argument_list|,
name|QPlatformIntegration
operator|::
name|KeyboardInputInterval
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QStyleHints::keyboardAutoRepeatRate     \brief the rate, in events per second,  in which additional repeated key     presses will automatically be generated if a key is being held down. */
end_comment
begin_function
DECL|function|keyboardAutoRepeatRate
name|int
name|QStyleHints
operator|::
name|keyboardAutoRepeatRate
parameter_list|()
specifier|const
block|{
return|return
name|themeableHint
argument_list|(
name|QPlatformTheme
operator|::
name|KeyboardAutoRepeatRate
argument_list|,
name|QPlatformIntegration
operator|::
name|KeyboardAutoRepeatRate
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the \a cursorFlashTime.     \internal     \sa cursorFlashTime()     \since 5.3 */
end_comment
begin_function
DECL|function|setCursorFlashTime
name|void
name|QStyleHints
operator|::
name|setCursorFlashTime
parameter_list|(
name|int
name|cursorFlashTime
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStyleHints
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_cursorFlashTime
operator|==
name|cursorFlashTime
condition|)
return|return;
name|d
operator|->
name|m_cursorFlashTime
operator|=
name|cursorFlashTime
expr_stmt|;
emit|emit
name|cursorFlashTimeChanged
argument_list|(
name|cursorFlashTime
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \property QStyleHints::cursorFlashTime     \brief the text cursor's flash (blink) time in milliseconds.      The flash time is the time used to display, invert and restore the     caret display. Usually the text cursor is displayed for half the cursor     flash time, then hidden for the same amount of time. */
end_comment
begin_function
DECL|function|cursorFlashTime
name|int
name|QStyleHints
operator|::
name|cursorFlashTime
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStyleHints
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_cursorFlashTime
operator|>=
literal|0
condition|?
name|d
operator|->
name|m_cursorFlashTime
else|:
name|themeableHint
argument_list|(
name|QPlatformTheme
operator|::
name|CursorFlashTime
argument_list|,
name|QPlatformIntegration
operator|::
name|CursorFlashTime
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QStyleHints::showIsFullScreen     \brief \c true if the platform defaults to windows being fullscreen,     otherwise \c false.      \note The platform may still choose to show certain windows non-fullscreen,     such as popups or dialogs. This property only reports the default behavior.      \sa QWindow::show(), showIsMaximized() */
end_comment
begin_function
DECL|function|showIsFullScreen
name|bool
name|QStyleHints
operator|::
name|showIsFullScreen
parameter_list|()
specifier|const
block|{
return|return
name|hint
argument_list|(
name|QPlatformIntegration
operator|::
name|ShowIsFullScreen
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QStyleHints::showIsMaximized     \brief \c true if the platform defaults to windows being maximized,     otherwise \c false.      \note The platform may still choose to show certain windows non-maximized,     such as popups or dialogs. This property only reports the default behavior.      \sa QWindow::show(), showIsFullScreen()     \since 5.6 */
end_comment
begin_function
DECL|function|showIsMaximized
name|bool
name|QStyleHints
operator|::
name|showIsMaximized
parameter_list|()
specifier|const
block|{
return|return
name|hint
argument_list|(
name|QPlatformIntegration
operator|::
name|ShowIsMaximized
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QStyleHints::passwordMaskDelay     \brief the time, in milliseconds, a typed letter is displayed unshrouded     in a text input field in password mode. */
end_comment
begin_function
DECL|function|passwordMaskDelay
name|int
name|QStyleHints
operator|::
name|passwordMaskDelay
parameter_list|()
specifier|const
block|{
return|return
name|themeableHint
argument_list|(
name|QPlatformTheme
operator|::
name|PasswordMaskDelay
argument_list|,
name|QPlatformIntegration
operator|::
name|PasswordMaskDelay
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QStyleHints::passwordMaskCharacter     \brief the character used to mask the characters typed into text input     fields in password mode. */
end_comment
begin_function
DECL|function|passwordMaskCharacter
name|QChar
name|QStyleHints
operator|::
name|passwordMaskCharacter
parameter_list|()
specifier|const
block|{
return|return
name|themeableHint
argument_list|(
name|QPlatformTheme
operator|::
name|PasswordMaskCharacter
argument_list|,
name|QPlatformIntegration
operator|::
name|PasswordMaskCharacter
argument_list|)
operator|.
name|toChar
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QStyleHints::fontSmoothingGamma     \brief the gamma value used in font smoothing. */
end_comment
begin_function
DECL|function|fontSmoothingGamma
name|qreal
name|QStyleHints
operator|::
name|fontSmoothingGamma
parameter_list|()
specifier|const
block|{
return|return
name|hint
argument_list|(
name|QPlatformIntegration
operator|::
name|FontSmoothingGamma
argument_list|)
operator|.
name|toReal
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QStyleHints::useRtlExtensions     \brief \c true if right-to-left writing direction is enabled,     otherwise \c false. */
end_comment
begin_function
DECL|function|useRtlExtensions
name|bool
name|QStyleHints
operator|::
name|useRtlExtensions
parameter_list|()
specifier|const
block|{
return|return
name|hint
argument_list|(
name|QPlatformIntegration
operator|::
name|UseRtlExtensions
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QStyleHints::setFocusOnTouchRelease     \brief \c true if focus objects (line edits etc) should receive     input focus after a touch/mouse release. This is normal behavior on     touch platforms. On desktop platforms, the standard is to set     focus already on touch/mouse press. */
end_comment
begin_function
DECL|function|setFocusOnTouchRelease
name|bool
name|QStyleHints
operator|::
name|setFocusOnTouchRelease
parameter_list|()
specifier|const
block|{
return|return
name|hint
argument_list|(
name|QPlatformIntegration
operator|::
name|SetFocusOnTouchRelease
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QStyleHints::tabFocusBehavior     \since 5.5     \brief The focus behavior on press of the tab key.      \note Do not bind this value in QML because the change notifier     signal is not implemented yet. */
end_comment
begin_function
DECL|function|tabFocusBehavior
name|Qt
operator|::
name|TabFocusBehavior
name|QStyleHints
operator|::
name|tabFocusBehavior
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStyleHints
argument_list|)
expr_stmt|;
return|return
name|Qt
operator|::
name|TabFocusBehavior
argument_list|(
name|d
operator|->
name|m_tabFocusBehavior
operator|>=
literal|0
condition|?
name|d
operator|->
name|m_tabFocusBehavior
else|:
name|themeableHint
argument_list|(
name|QPlatformTheme
operator|::
name|TabFocusBehavior
argument_list|,
name|QPlatformIntegration
operator|::
name|TabFocusBehavior
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the \a tabFocusBehavior.     \internal     \sa tabFocusBehavior()     \since 5.7 */
end_comment
begin_function
DECL|function|setTabFocusBehavior
name|void
name|QStyleHints
operator|::
name|setTabFocusBehavior
parameter_list|(
name|Qt
operator|::
name|TabFocusBehavior
name|tabFocusBehavior
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStyleHints
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_tabFocusBehavior
operator|==
name|tabFocusBehavior
condition|)
return|return;
name|d
operator|->
name|m_tabFocusBehavior
operator|=
name|tabFocusBehavior
expr_stmt|;
emit|emit
name|tabFocusBehaviorChanged
argument_list|(
name|tabFocusBehavior
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \property QStyleHints::singleClickActivation     \brief \c true if items should be activated by single click, \b false     if they should be activated by double click instead.      \since 5.5 */
end_comment
begin_function
DECL|function|singleClickActivation
name|bool
name|QStyleHints
operator|::
name|singleClickActivation
parameter_list|()
specifier|const
block|{
return|return
name|themeableHint
argument_list|(
name|QPlatformTheme
operator|::
name|ItemViewActivateItemOnSingleClick
argument_list|,
name|QPlatformIntegration
operator|::
name|ItemViewActivateItemOnSingleClick
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
