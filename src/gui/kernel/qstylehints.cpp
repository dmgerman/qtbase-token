begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qstylehints.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformintegration.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformtheme.h>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|hint
specifier|static
specifier|inline
name|QVariant
name|hint
parameter_list|(
name|QPlatformIntegration
operator|::
name|StyleHint
name|h
parameter_list|)
block|{
return|return
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|styleHint
argument_list|(
name|h
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|themeableHint
specifier|static
specifier|inline
name|QVariant
name|themeableHint
parameter_list|(
name|QPlatformTheme
operator|::
name|ThemeHint
name|th
parameter_list|,
name|QPlatformIntegration
operator|::
name|StyleHint
name|ih
parameter_list|)
block|{
if|if
condition|(
specifier|const
name|QPlatformTheme
modifier|*
name|theme
init|=
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
condition|)
block|{
specifier|const
name|QVariant
name|themeHint
init|=
name|theme
operator|->
name|themeHint
argument_list|(
name|th
argument_list|)
decl_stmt|;
if|if
condition|(
name|themeHint
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|themeHint
return|;
block|}
return|return
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|styleHint
argument_list|(
name|ih
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \class QStyleHints     \since 5.0     \brief The QStyleHints class contains platform specific hints and settings.     \inmodule QtGui      An object of this class, obtained from QGuiApplication, provides access to certain global     user interface parameters of the current platform.      Access is read only; typically the platform itself provides the user a way to tune these     parameters.      Access to these parameters are useful when implementing custom user interface components, in that     they allow the components to exhibit the same behaviour and feel as other components.      \sa QGuiApplication::styleHints(), QPlatformTheme  */
end_comment
begin_constructor
DECL|function|QStyleHints
name|QStyleHints
operator|::
name|QStyleHints
parameter_list|()
member_init_list|:
name|QObject
argument_list|()
block|{ }
end_constructor
begin_comment
comment|/*!     Returns the time limit in milliseconds that distinguishes a double click     from two consecutive mouse clicks. */
end_comment
begin_function
DECL|function|mouseDoubleClickInterval
name|int
name|QStyleHints
operator|::
name|mouseDoubleClickInterval
parameter_list|()
specifier|const
block|{
return|return
name|themeableHint
argument_list|(
name|QPlatformTheme
operator|::
name|MouseDoubleClickInterval
argument_list|,
name|QPlatformIntegration
operator|::
name|MouseDoubleClickInterval
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the distance, in pixels, that the mouse must be moved with a button     held down before a drag and drop operation will begin.      If you support drag and drop in your application, and want to start a drag     and drop operation after the user has moved the cursor a certain distance     with a button held down, you should use this property's value as the     minimum distance required.      For example, if the mouse position of the click is stored in \c startPos     and the current position (e.g. in the mouse move event) is \c currentPos,     you can find out if a drag should be started with code like this:      \snippet code/src_gui_kernel_qapplication.cpp 7      \sa startDragTime(), QPoint::manhattanLength(), {Drag and Drop} */
end_comment
begin_function
DECL|function|startDragDistance
name|int
name|QStyleHints
operator|::
name|startDragDistance
parameter_list|()
specifier|const
block|{
return|return
name|themeableHint
argument_list|(
name|QPlatformTheme
operator|::
name|StartDragDistance
argument_list|,
name|QPlatformIntegration
operator|::
name|StartDragDistance
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the time, in milliseconds, that a mouse button must be held down     before a drag and drop operation will begin.      If you support drag and drop in your application, and want to start a drag     and drop operation after the user has held down a mouse button for a     certain amount of time, you should use this property's value as the delay.      \sa startDragDistance(), {Drag and Drop} */
end_comment
begin_function
DECL|function|startDragTime
name|int
name|QStyleHints
operator|::
name|startDragTime
parameter_list|()
specifier|const
block|{
return|return
name|themeableHint
argument_list|(
name|QPlatformTheme
operator|::
name|StartDragTime
argument_list|,
name|QPlatformIntegration
operator|::
name|StartDragTime
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the limit for the velocity, in pixels per second, that the mouse may     be moved, with a button held down, for a drag and drop operation to begin.     A value of 0 means there is no such limit.      \sa startDragDistance(), {Drag and Drop} */
end_comment
begin_function
DECL|function|startDragVelocity
name|int
name|QStyleHints
operator|::
name|startDragVelocity
parameter_list|()
specifier|const
block|{
return|return
name|themeableHint
argument_list|(
name|QPlatformTheme
operator|::
name|StartDragVelocity
argument_list|,
name|QPlatformIntegration
operator|::
name|StartDragVelocity
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the time limit, in milliseconds, that distinguishes a key press     from two consecutive key presses. */
end_comment
begin_function
DECL|function|keyboardInputInterval
name|int
name|QStyleHints
operator|::
name|keyboardInputInterval
parameter_list|()
specifier|const
block|{
return|return
name|themeableHint
argument_list|(
name|QPlatformTheme
operator|::
name|KeyboardInputInterval
argument_list|,
name|QPlatformIntegration
operator|::
name|KeyboardInputInterval
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the rate, in events per second,  in which additional repeated key     presses will automatically be generated if a key is being held down. */
end_comment
begin_function
DECL|function|keyboardAutoRepeatRate
name|int
name|QStyleHints
operator|::
name|keyboardAutoRepeatRate
parameter_list|()
specifier|const
block|{
return|return
name|themeableHint
argument_list|(
name|QPlatformTheme
operator|::
name|KeyboardAutoRepeatRate
argument_list|,
name|QPlatformIntegration
operator|::
name|KeyboardAutoRepeatRate
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the text cursor's flash (blink) time in milliseconds.      The flash time is the time used to display, invert and restore the     caret display. Usually the text cursor is displayed for half the cursor     flash time, then hidden for the same amount of time. */
end_comment
begin_function
DECL|function|cursorFlashTime
name|int
name|QStyleHints
operator|::
name|cursorFlashTime
parameter_list|()
specifier|const
block|{
return|return
name|themeableHint
argument_list|(
name|QPlatformTheme
operator|::
name|CursorFlashTime
argument_list|,
name|QPlatformIntegration
operator|::
name|CursorFlashTime
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the platform defaults to windows being fullscreen,     otherwise \c false.      \sa QWindow::show() */
end_comment
begin_function
DECL|function|showIsFullScreen
name|bool
name|QStyleHints
operator|::
name|showIsFullScreen
parameter_list|()
specifier|const
block|{
return|return
name|hint
argument_list|(
name|QPlatformIntegration
operator|::
name|ShowIsFullScreen
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the time, in milliseconds, a typed letter is displayed unshrouded     in a text input field in password mode. */
end_comment
begin_function
DECL|function|passwordMaskDelay
name|int
name|QStyleHints
operator|::
name|passwordMaskDelay
parameter_list|()
specifier|const
block|{
return|return
name|themeableHint
argument_list|(
name|QPlatformTheme
operator|::
name|PasswordMaskDelay
argument_list|,
name|QPlatformIntegration
operator|::
name|PasswordMaskDelay
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the character used to mask the characters typed into text input     fields in password mode. */
end_comment
begin_function
DECL|function|passwordMaskCharacter
name|QChar
name|QStyleHints
operator|::
name|passwordMaskCharacter
parameter_list|()
specifier|const
block|{
return|return
name|themeableHint
argument_list|(
name|QPlatformTheme
operator|::
name|PasswordMaskCharacter
argument_list|,
name|QPlatformIntegration
operator|::
name|PasswordMaskCharacter
argument_list|)
operator|.
name|toChar
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the gamma value used in font smoothing. */
end_comment
begin_function
DECL|function|fontSmoothingGamma
name|qreal
name|QStyleHints
operator|::
name|fontSmoothingGamma
parameter_list|()
specifier|const
block|{
return|return
name|hint
argument_list|(
name|QPlatformIntegration
operator|::
name|FontSmoothingGamma
argument_list|)
operator|.
name|toReal
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if right-to-left writing direction is enabled,     otherwise \c false. */
end_comment
begin_function
DECL|function|useRtlExtensions
name|bool
name|QStyleHints
operator|::
name|useRtlExtensions
parameter_list|()
specifier|const
block|{
return|return
name|hint
argument_list|(
name|QPlatformIntegration
operator|::
name|UseRtlExtensions
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
