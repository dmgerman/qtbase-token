begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qshapedpixmapdndwindow_p.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QPainter>
end_include
begin_include
include|#
directive|include
file|<QtGui/QCursor>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPalette>
end_include
begin_include
include|#
directive|include
file|<QtGui/QBitmap>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QShapedPixmapWindow
name|QShapedPixmapWindow
operator|::
name|QShapedPixmapWindow
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|)
member_init_list|:
name|m_useCompositing
argument_list|(
literal|true
argument_list|)
block|{
name|setScreen
argument_list|(
name|screen
argument_list|)
expr_stmt|;
name|QSurfaceFormat
name|format
decl_stmt|;
name|format
operator|.
name|setAlphaBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|setFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|setFlags
argument_list|(
name|Qt
operator|::
name|ToolTip
operator||
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|X11BypassWindowManagerHint
operator||
name|Qt
operator|::
name|WindowTransparentForInput
operator||
name|Qt
operator|::
name|WindowDoesNotAcceptFocus
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QShapedPixmapWindow
name|QShapedPixmapWindow
operator|::
name|~
name|QShapedPixmapWindow
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|setPixmap
name|void
name|QShapedPixmapWindow
operator|::
name|setPixmap
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
block|{
name|m_pixmap
operator|=
name|pixmap
expr_stmt|;
if|if
condition|(
operator|!
name|m_useCompositing
condition|)
block|{
specifier|const
name|QBitmap
name|mask
init|=
name|m_pixmap
operator|.
name|mask
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|mask
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|handle
argument_list|()
condition|)
name|create
argument_list|()
expr_stmt|;
name|setMask
argument_list|(
name|mask
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setHotspot
name|void
name|QShapedPixmapWindow
operator|::
name|setHotspot
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|hotspot
parameter_list|)
block|{
name|m_hotSpot
operator|=
name|hotspot
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintEvent
name|void
name|QShapedPixmapWindow
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_pixmap
operator|.
name|isNull
argument_list|()
condition|)
block|{
specifier|const
name|QRect
name|rect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QPainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_useCompositing
condition|)
name|painter
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Source
argument_list|)
expr_stmt|;
else|else
name|painter
operator|.
name|fillRect
argument_list|(
name|rect
argument_list|,
name|QGuiApplication
operator|::
name|palette
argument_list|()
operator|.
name|base
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawPixmap
argument_list|(
name|rect
argument_list|,
name|m_pixmap
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateGeometry
name|void
name|QShapedPixmapWindow
operator|::
name|updateGeometry
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|QSize
name|size
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_pixmap
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|size
operator|=
name|qFuzzyCompare
argument_list|(
name|m_pixmap
operator|.
name|devicePixelRatio
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|)
condition|?
name|m_pixmap
operator|.
name|size
argument_list|()
else|:
operator|(
name|QSizeF
argument_list|(
name|m_pixmap
operator|.
name|size
argument_list|()
argument_list|)
operator|/
name|m_pixmap
operator|.
name|devicePixelRatio
argument_list|()
operator|)
operator|.
name|toSize
argument_list|()
expr_stmt|;
block|}
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|pos
operator|-
name|m_hotSpot
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
