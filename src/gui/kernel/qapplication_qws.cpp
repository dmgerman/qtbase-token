begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qglobal.h"
end_include
begin_include
include|#
directive|include
file|"qlibrary.h"
end_include
begin_include
include|#
directive|include
file|"qcursor.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"private/qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qbitarray.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qpixmapcache.h"
end_include
begin_include
include|#
directive|include
file|"qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"qtextcodec.h"
end_include
begin_include
include|#
directive|include
file|"qdatastream.h"
end_include
begin_include
include|#
directive|include
file|"qbuffer.h"
end_include
begin_include
include|#
directive|include
file|"qsocketnotifier.h"
end_include
begin_include
include|#
directive|include
file|"qsessionmanager.h"
end_include
begin_include
include|#
directive|include
file|"qclipboard.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qwssocket_qws.h"
end_include
begin_include
include|#
directive|include
file|"qtransportauth_qws.h"
end_include
begin_include
include|#
directive|include
file|"private/qtransportauth_qws_p.h"
end_include
begin_include
include|#
directive|include
file|"qwsevent_qws.h"
end_include
begin_include
include|#
directive|include
file|"private/qwscommand_qws_p.h"
end_include
begin_include
include|#
directive|include
file|"qwsproperty_qws.h"
end_include
begin_include
include|#
directive|include
file|"qscreen_qws.h"
end_include
begin_include
include|#
directive|include
file|"qscreenproxy_qws.h"
end_include
begin_include
include|#
directive|include
file|"qcopchannel_qws.h"
end_include
begin_include
include|#
directive|include
file|"private/qlock_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qwslock_p.h"
end_include
begin_comment
comment|//#include "qmemorymanager_qws.h"
end_comment
begin_include
include|#
directive|include
file|"qwsmanager_qws.h"
end_include
begin_comment
comment|//#include "qwsregionmanager_qws.h"
end_comment
begin_include
include|#
directive|include
file|"qwindowsystem_qws.h"
end_include
begin_include
include|#
directive|include
file|"private/qwindowsystem_p.h"
end_include
begin_include
include|#
directive|include
file|"qdecorationfactory_qws.h"
end_include
begin_include
include|#
directive|include
file|"qwsdisplay_qws.h"
end_include
begin_include
include|#
directive|include
file|"private/qwsdisplay_qws_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qwsinputcontext_p.h"
end_include
begin_include
include|#
directive|include
file|"qfile.h"
end_include
begin_include
include|#
directive|include
file|"qhash.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qcolormap.h"
end_include
begin_include
include|#
directive|include
file|"private/qcursor_p.h"
end_include
begin_include
include|#
directive|include
file|"qsettings.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qeventdispatcher_qws_p.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_GLIB
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qeventdispatcher_glib_qws_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"private/qwidget_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qbackingstore_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qwindowsurface_qws_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qfont_p.h"
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_include
include|#
directive|include
file|<locale.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_VXWORKS
end_ifdef
begin_include
include|#
directive|include
file|<sys/times.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<sys/time.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<qvfbhdr.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
end_ifndef
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_QSHM
end_ifdef
begin_include
include|#
directive|include
file|<sys/ipc.h>
end_include
begin_include
include|#
directive|include
file|<sys/shm.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_DARWIN
end_ifndef
begin_include
include|#
directive|include
file|<sys/sem.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<sys/socket.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|"private/qwssharedmemory_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DIRECTPAINTER
end_ifndef
begin_class_decl
class_decl|class
name|QDirectPainter
class_decl|;
end_class_decl
begin_function_decl
specifier|extern
name|void
name|qt_directpainter_region
parameter_list|(
name|QDirectPainter
modifier|*
name|dp
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|alloc
parameter_list|,
name|int
name|type
parameter_list|)
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWSEMBEDWIDGET
end_ifndef
begin_function_decl
specifier|extern
name|void
name|qt_directpainter_embedevent
parameter_list|(
name|QDirectPainter
modifier|*
name|dp
parameter_list|,
specifier|const
name|QWSEmbedEvent
modifier|*
name|e
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DIRECTPAINTER
end_comment
begin_decl_stmt
DECL|variable|qwsSharedRamSize
specifier|const
name|int
name|qwsSharedRamSize
init|=
literal|1
operator|*
literal|1024
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|qwsSharedRamSize
comment|// misc data, written by server, read by clients
end_comment
begin_decl_stmt
specifier|extern
name|QApplication
operator|::
name|Type
name|qt_appType
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|QDesktopWidget
modifier|*
name|qt_desktopWidget
decl_stmt|;
end_decl_stmt
begin_comment
comment|//these used to be environment variables, they are initialized from
end_comment
begin_comment
comment|//environment variables in
end_comment
begin_decl_stmt
DECL|variable|qws_savefonts
name|bool
name|qws_savefonts
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qws_screen_is_interlaced
name|bool
name|qws_screen_is_interlaced
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|qws_screen_is_interlaced
comment|//### should be detected
end_comment
begin_decl_stmt
DECL|variable|qws_shared_memory
name|bool
name|qws_shared_memory
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qws_sw_cursor
name|bool
name|qws_sw_cursor
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qws_accel
name|bool
name|qws_accel
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|qws_accel
comment|// ### never set
end_comment
begin_decl_stmt
name|QByteArray
name|qws_display_spec
argument_list|(
literal|":0"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qws_display_id
name|Q_GUI_EXPORT
name|int
name|qws_display_id
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qws_client_id
name|Q_GUI_EXPORT
name|int
name|qws_client_id
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_pressGrab
name|QWidget
modifier|*
name|qt_pressGrab
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_mouseGrb
name|QWidget
modifier|*
name|qt_mouseGrb
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_last_x
name|int
modifier|*
name|qt_last_x
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_last_y
name|int
modifier|*
name|qt_last_y
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mouse_x_root
specifier|static
name|int
name|mouse_x_root
init|=
operator|-
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mouse_y_root
specifier|static
name|int
name|mouse_y_root
init|=
operator|-
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mouse_state
specifier|static
name|int
name|mouse_state
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mouse_double_click_distance
specifier|static
name|int
name|mouse_double_click_distance
init|=
literal|5
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_servershmid
name|int
name|qt_servershmid
init|=
operator|-
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qws_overrideCursor
name|bool
name|qws_overrideCursor
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MANAGER
end_ifndef
begin_decl_stmt
specifier|extern
name|Q_GUI_EXPORT
name|QWSServer
modifier|*
name|qwsServer
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qws_decoration
specifier|static
name|QDecoration
modifier|*
name|qws_decoration
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_DEBUG
argument_list|)
end_if
begin_comment
comment|/* extern "C" void dumpmem(const char* m) {     static int init=0;     static int prev=0;     FILE* f = fopen("/proc/meminfo","r");     //    char line[100];     int total=0,used=0,free=0,shared=0,buffers=0,cached=0;     fscanf(f,"%*[^M]Mem: %d %d %d %d %d %d",&total,&used,&free,&shared,&buffers,&cached);     used -= buffers + cached;     if (!init) {         init=used;     } else {         printf("%40s: %+8d = %8d\n",m,used-init-prev,used-init);         prev = used-init;     }     fclose(f); } */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Get the name of the directory where Qt for Embedded Linux temporary data should
end_comment
begin_comment
comment|// live.
end_comment
begin_function
DECL|function|qws_dataDir
name|QString
name|qws_dataDir
parameter_list|()
block|{
specifier|static
name|QString
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|result
return|;
name|result
operator|=
name|QT_VFB_DATADIR
argument_list|(
name|qws_display_id
argument_list|)
expr_stmt|;
name|QByteArray
name|dataDir
init|=
name|result
operator|.
name|toLocal8Bit
argument_list|()
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_INTEGRITY
argument_list|)
comment|/* ensure filesystem is ready before starting requests */
name|WaitForFileSystemInitialization
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|QT_MKDIR
argument_list|(
name|dataDir
argument_list|,
literal|0700
argument_list|)
condition|)
block|{
if|if
condition|(
name|errno
operator|!=
name|EEXIST
condition|)
block|{
name|qFatal
argument_list|(
literal|"Cannot create Qt for Embedded Linux data directory: %s"
argument_list|,
name|dataDir
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|QT_STATBUF
name|buf
decl_stmt|;
if|if
condition|(
name|QT_LSTAT
argument_list|(
name|dataDir
argument_list|,
operator|&
name|buf
argument_list|)
condition|)
name|qFatal
argument_list|(
literal|"stat failed for Qt for Embedded Linux data directory: %s"
argument_list|,
name|dataDir
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|S_ISDIR
argument_list|(
name|buf
operator|.
name|st_mode
argument_list|)
condition|)
name|qFatal
argument_list|(
literal|"%s is not a directory"
argument_list|,
name|dataDir
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_INTEGRITY
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
if|if
condition|(
name|buf
operator|.
name|st_uid
operator|!=
name|getuid
argument_list|()
condition|)
name|qFatal
argument_list|(
literal|"Qt for Embedded Linux data directory is not owned by user %d"
argument_list|,
name|getuid
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|buf
operator|.
name|st_mode
operator|&
literal|0677
operator|)
operator|!=
literal|0600
condition|)
name|qFatal
argument_list|(
literal|"Qt for Embedded Linux data directory has incorrect permissions: %s"
argument_list|,
name|dataDir
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|result
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|// Get the filename of the pipe Qt for Embedded Linux uses for server/client comms
end_comment
begin_function
DECL|function|qws_qtePipeFilename
name|Q_GUI_EXPORT
name|QString
name|qws_qtePipeFilename
parameter_list|()
block|{
name|qws_dataDir
argument_list|()
expr_stmt|;
return|return
name|QTE_PIPE
argument_list|(
name|qws_display_id
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setMaxWindowRect
specifier|static
name|void
name|setMaxWindowRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
specifier|const
name|QList
argument_list|<
name|QScreen
modifier|*
argument_list|>
name|subScreens
init|=
name|qt_screen
operator|->
name|subScreens
argument_list|()
decl_stmt|;
name|QScreen
modifier|*
name|screen
init|=
name|qt_screen
decl_stmt|;
name|int
name|screenNo
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subScreens
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|subScreens
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|region
argument_list|()
operator|.
name|contains
argument_list|(
name|rect
argument_list|)
condition|)
block|{
name|screen
operator|=
name|subScreens
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|screenNo
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
name|QApplicationPrivate
modifier|*
name|ap
init|=
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
decl_stmt|;
name|ap
operator|->
name|setMaxWindowRect
argument_list|(
name|screen
argument_list|,
name|screenNo
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setMaxWindowRect
name|void
name|QApplicationPrivate
operator|::
name|setMaxWindowRect
parameter_list|(
specifier|const
name|QScreen
modifier|*
name|screen
parameter_list|,
name|int
name|screenNo
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
if|if
condition|(
name|maxWindowRects
operator|.
name|value
argument_list|(
name|screen
argument_list|)
operator|==
name|rect
condition|)
return|return;
name|maxWindowRects
index|[
name|screen
index|]
operator|=
name|rect
expr_stmt|;
comment|// Re-resize any maximized windows
name|QWidgetList
name|l
init|=
name|QApplication
operator|::
name|topLevelWidgets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|l
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QScreen
modifier|*
name|s
init|=
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|getScreen
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|isMaximized
argument_list|()
operator|&&
name|s
operator|==
name|screen
condition|)
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|setMaxWindowState_helper
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|qt_desktopWidget
condition|)
comment|// XXX workaround crash
emit|emit
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|workAreaResized
argument_list|(
name|screenNo
argument_list|)
emit|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_DYNAMICSCREENTRANSFORMATION
end_ifndef
begin_typedef
DECL|typedef|TransformFunc
typedef|typedef
name|void
function_decl|(
modifier|*
name|TransformFunc
function_decl|)
parameter_list|(
name|QScreen
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_TRANSFORMED
end_ifndef
begin_extern
extern|extern
literal|"C"
name|void
name|qws_setScreenTransformation
parameter_list|(
name|QScreen
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|getTransformationFunction
specifier|static
name|TransformFunc
name|getTransformationFunction
parameter_list|()
block|{
specifier|static
name|TransformFunc
name|func
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|func
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_QWS_TRANSFORMED
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
comment|// symbol is not built into the library, search for the plugin
specifier|const
name|QStringList
name|paths
init|=
name|QApplication
operator|::
name|libraryPaths
argument_list|()
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|path
decl|,
name|paths
control|)
block|{
specifier|const
name|QString
name|file
init|=
name|path
operator|+
name|QLatin1String
argument_list|(
literal|"/gfxdrivers/libqgfxtransformed"
argument_list|)
decl_stmt|;
name|func
operator|=
operator|(
name|TransformFunc
operator|)
name|QLibrary
operator|::
name|resolve
argument_list|(
name|file
argument_list|,
literal|"qws_setScreenTransformation"
argument_list|)
expr_stmt|;
if|if
condition|(
name|func
condition|)
break|break;
block|}
endif|#
directive|endif
else|#
directive|else
name|func
operator|=
name|qws_setScreenTransformation
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|func
condition|)
name|func
operator|=
operator|(
name|TransformFunc
operator|)
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|func
operator|==
operator|(
name|TransformFunc
operator|)
operator|-
literal|1
condition|)
return|return
literal|0
return|;
return|return
name|func
return|;
block|}
end_function
begin_function
DECL|function|setScreenTransformation
specifier|static
name|void
name|setScreenTransformation
parameter_list|(
name|int
name|screenNo
parameter_list|,
name|int
name|transformation
parameter_list|)
block|{
name|QScreen
modifier|*
name|screen
init|=
name|QScreen
operator|::
name|instance
argument_list|()
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QScreen
modifier|*
argument_list|>
name|subScreens
init|=
name|screen
operator|->
name|subScreens
argument_list|()
decl_stmt|;
if|if
condition|(
name|screenNo
operator|==
operator|-
literal|1
condition|)
name|screenNo
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|screenNo
operator|==
operator|-
literal|1
operator|&&
operator|!
name|subScreens
operator|.
name|isEmpty
argument_list|()
condition|)
name|screenNo
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|subScreens
operator|.
name|isEmpty
argument_list|()
operator|&&
name|screenNo
operator|==
literal|0
condition|)
block|{
comment|// nothing
block|}
elseif|else
if|if
condition|(
name|screenNo
operator|<
literal|0
operator|||
name|screenNo
operator|>=
name|subScreens
operator|.
name|size
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"setScreenTransformation: invalid screen %i"
argument_list|,
name|screenNo
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|screenNo
operator|<
name|subScreens
operator|.
name|size
argument_list|()
condition|)
name|screen
operator|=
name|subScreens
operator|.
name|at
argument_list|(
name|screenNo
argument_list|)
expr_stmt|;
name|QApplicationPrivate
modifier|*
name|ap
init|=
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
decl_stmt|;
name|ap
operator|->
name|setScreenTransformation
argument_list|(
name|screen
argument_list|,
name|screenNo
argument_list|,
name|transformation
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setScreenTransformation
name|void
name|QApplicationPrivate
operator|::
name|setScreenTransformation
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
name|int
name|screenNo
parameter_list|,
name|int
name|transformation
parameter_list|)
block|{
name|QScreen
modifier|*
name|transformed
init|=
name|screen
decl_stmt|;
while|while
condition|(
name|transformed
operator|->
name|classId
argument_list|()
operator|==
name|QScreen
operator|::
name|ProxyClass
condition|)
name|transformed
operator|=
cast|static_cast
argument_list|<
name|QProxyScreen
operator|*
argument_list|>
argument_list|(
name|transformed
argument_list|)
operator|->
name|screen
argument_list|()
expr_stmt|;
if|if
condition|(
name|transformed
operator|->
name|classId
argument_list|()
operator|!=
name|QScreen
operator|::
name|TransformedClass
condition|)
return|return;
name|TransformFunc
name|setScreenTransformation
init|=
name|getTransformationFunction
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|setScreenTransformation
condition|)
return|return;
name|setScreenTransformation
argument_list|(
name|transformed
argument_list|,
name|transformation
argument_list|)
expr_stmt|;
comment|// need to re-configure() proxies bottom-up
if|if
condition|(
name|screen
operator|->
name|classId
argument_list|()
operator|==
name|QScreen
operator|::
name|ProxyClass
condition|)
block|{
name|QList
argument_list|<
name|QProxyScreen
modifier|*
argument_list|>
name|proxies
decl_stmt|;
name|QScreen
modifier|*
name|s
init|=
name|screen
decl_stmt|;
do|do
block|{
name|QProxyScreen
modifier|*
name|proxy
init|=
cast|static_cast
argument_list|<
name|QProxyScreen
operator|*
argument_list|>
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|proxies
operator|.
name|append
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|s
operator|=
name|proxy
operator|->
name|screen
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|s
operator|->
name|classId
argument_list|()
operator|==
name|QScreen
operator|::
name|ProxyClass
condition|)
do|;
do|do
block|{
name|QProxyScreen
modifier|*
name|proxy
init|=
name|proxies
operator|.
name|takeLast
argument_list|()
decl_stmt|;
name|proxy
operator|->
name|setScreen
argument_list|(
name|proxy
operator|->
name|screen
argument_list|()
argument_list|)
expr_stmt|;
comment|// triggers configure()
block|}
do|while
condition|(
operator|!
name|proxies
operator|.
name|isEmpty
argument_list|()
condition|)
do|;
block|}
if|if
condition|(
name|qt_desktopWidget
condition|)
block|{
comment|// XXX workaround crash for early screen transform events
name|QDesktopWidget
modifier|*
name|desktop
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
decl_stmt|;
emit|emit
name|desktop
operator|->
name|resized
argument_list|(
name|screenNo
argument_list|)
emit|;
if|if
condition|(
name|maxWindowRect
argument_list|(
name|screen
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
comment|// not explicitly set
emit|emit
name|desktop
operator|->
name|workAreaResized
argument_list|(
name|screenNo
argument_list|)
emit|;
block|}
name|QWSServer
modifier|*
name|server
init|=
name|QWSServer
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
condition|)
block|{
name|server
operator|->
name|updateWindowRegions
argument_list|()
expr_stmt|;
name|QRegion
name|r
init|=
name|screen
operator|->
name|region
argument_list|()
decl_stmt|;
name|server
operator|->
name|refresh
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
comment|// make sure maximized and fullscreen windows are updated
name|QWidgetList
name|list
init|=
name|QApplication
operator|::
name|topLevelWidgets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|isFullScreen
argument_list|()
condition|)
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|setFullScreenSize_helper
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|w
operator|->
name|isMaximized
argument_list|()
condition|)
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|setMaxWindowState_helper
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_DYNAMICSCREENTRANSFORMATION
end_comment
begin_comment
comment|/*****************************************************************************   Internal variables and functions  *****************************************************************************/
end_comment
begin_decl_stmt
DECL|variable|appName
specifier|static
name|QString
name|appName
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|appName
comment|// application name
end_comment
begin_decl_stmt
DECL|variable|appFont
specifier|static
specifier|const
name|char
modifier|*
name|appFont
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|appFont
comment|// application font
end_comment
begin_decl_stmt
DECL|variable|appBGCol
specifier|static
specifier|const
name|char
modifier|*
name|appBGCol
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|appBGCol
comment|// application bg color
end_comment
begin_decl_stmt
DECL|variable|appFGCol
specifier|static
specifier|const
name|char
modifier|*
name|appFGCol
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|appFGCol
comment|// application fg color
end_comment
begin_decl_stmt
DECL|variable|appBTNCol
specifier|static
specifier|const
name|char
modifier|*
name|appBTNCol
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|appBTNCol
comment|// application btn color
end_comment
begin_decl_stmt
DECL|variable|mwGeometry
specifier|static
specifier|const
name|char
modifier|*
name|mwGeometry
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|mwGeometry
comment|// main widget geometry
end_comment
begin_decl_stmt
DECL|variable|mwTitle
specifier|static
specifier|const
name|char
modifier|*
name|mwTitle
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|mwTitle
comment|// main widget title
end_comment
begin_comment
comment|//static bool mwIconic = false;                  // main widget iconified
end_comment
begin_decl_stmt
DECL|variable|app_do_modal
specifier|static
name|bool
name|app_do_modal
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|app_do_modal
comment|// modal mode
end_comment
begin_decl_stmt
DECL|variable|qt_fbdpy
name|Q_GUI_EXPORT
name|QWSDisplay
modifier|*
name|qt_fbdpy
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|qt_fbdpy
comment|// QWS `display'
end_comment
begin_decl_stmt
DECL|member|lock
name|QLock
modifier|*
name|QWSDisplay
operator|::
name|lock
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mouseButtonPressed
specifier|static
name|int
name|mouseButtonPressed
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|mouseButtonPressed
comment|// last mouse button pressed
end_comment
begin_decl_stmt
DECL|variable|mouseButtonPressTime
specifier|static
name|int
name|mouseButtonPressTime
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|mouseButtonPressTime
comment|// when was a button pressed
end_comment
begin_decl_stmt
DECL|variable|mouseXPos
DECL|variable|mouseYPos
specifier|static
name|short
name|mouseXPos
decl_stmt|,
name|mouseYPos
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|mouseXPos
DECL|variable|mouseYPos
comment|// mouse position in act window
end_comment
begin_decl_stmt
specifier|extern
name|QWidgetList
modifier|*
name|qt_modal_stack
decl_stmt|;
end_decl_stmt
begin_comment
comment|// stack of modal widgets
end_comment
begin_decl_stmt
DECL|variable|popupButtonFocus
specifier|static
name|QWidget
modifier|*
name|popupButtonFocus
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|popupOfPopupButtonFocus
specifier|static
name|QWidget
modifier|*
name|popupOfPopupButtonFocus
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|popupCloseDownMode
specifier|static
name|bool
name|popupCloseDownMode
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|popupGrabOk
specifier|static
name|bool
name|popupGrabOk
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mouseInWidget
specifier|static
name|QPointer
argument_list|<
name|QWidget
argument_list|>
modifier|*
name|mouseInWidget
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_last_mouse_receiver
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|qt_last_mouse_receiver
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|sm_blockUserInput
specifier|static
name|bool
name|sm_blockUserInput
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|sm_blockUserInput
comment|// session management
end_comment
begin_decl_stmt
DECL|variable|qt_button_down
name|QWidget
modifier|*
name|qt_button_down
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|qt_button_down
comment|// widget got last button-down
end_comment
begin_decl_stmt
DECL|variable|qt_last_cursor
name|WId
name|qt_last_cursor
init|=
literal|0xffffffff
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|qt_last_cursor
comment|// Was -1, but WIds are unsigned
end_comment
begin_class_decl
class_decl|class
name|QWSMouseEvent
class_decl|;
end_class_decl
begin_class_decl
class_decl|class
name|QWSKeyEvent
class_decl|;
end_class_decl
begin_class
DECL|class|QETWidget
class|class
name|QETWidget
super|:
specifier|public
name|QWidget
comment|// event translator widget
block|{
public|public:
name|bool
name|translateMouseEvent
parameter_list|(
specifier|const
name|QWSMouseEvent
modifier|*
parameter_list|,
name|int
name|oldstate
parameter_list|)
function_decl|;
name|bool
name|translateKeyEvent
parameter_list|(
specifier|const
name|QWSKeyEvent
modifier|*
parameter_list|,
name|bool
name|grab
parameter_list|)
function_decl|;
name|bool
name|translateRegionEvent
parameter_list|(
specifier|const
name|QWSRegionEvent
modifier|*
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_QWSEMBEDWIDGET
name|void
name|translateEmbedEvent
parameter_list|(
specifier|const
name|QWSEmbedEvent
modifier|*
name|event
parameter_list|)
function_decl|;
endif|#
directive|endif
name|bool
name|translateWheelEvent
parameter_list|(
specifier|const
name|QWSMouseEvent
modifier|*
name|me
parameter_list|)
function_decl|;
name|void
name|repaintDecoration
parameter_list|(
name|QRegion
name|r
parameter_list|,
name|bool
name|post
parameter_list|)
function_decl|;
name|void
name|updateRegion
parameter_list|()
function_decl|;
DECL|function|raiseOnClick
name|bool
name|raiseOnClick
parameter_list|()
block|{
comment|// With limited windowmanagement/taskbar/etc., raising big windows
comment|// (eg. spreadsheet) over the top of everything else (eg. calculator)
comment|// is just annoying.
return|return
operator|!
name|isMaximized
argument_list|()
operator|&&
operator|!
name|isFullScreen
argument_list|()
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|createEventDispatcher
name|void
name|QApplicationPrivate
operator|::
name|createEventDispatcher
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QApplication
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_GLIB
argument_list|)
if|if
condition|(
name|qgetenv
argument_list|(
literal|"QT_NO_GLIB"
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|&&
name|QEventDispatcherGlib
operator|::
name|versionSupported
argument_list|()
condition|)
name|eventDispatcher
operator|=
operator|(
name|q
operator|->
name|type
argument_list|()
operator|!=
name|QApplication
operator|::
name|Tty
condition|?
operator|new
name|QWSEventDispatcherGlib
argument_list|(
name|q
argument_list|)
else|:
operator|new
name|QEventDispatcherGlib
argument_list|(
name|q
argument_list|)
operator|)
expr_stmt|;
else|else
endif|#
directive|endif
name|eventDispatcher
operator|=
operator|(
name|q
operator|->
name|type
argument_list|()
operator|!=
name|QApplication
operator|::
name|Tty
condition|?
operator|new
name|QEventDispatcherQWS
argument_list|(
name|q
argument_list|)
else|:
operator|new
name|QEventDispatcherUNIX
argument_list|(
name|q
argument_list|)
operator|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Single-process stuff. This should maybe move into qwindowsystem_qws.cpp
end_comment
begin_decl_stmt
DECL|variable|qws_single_process
specifier|static
name|bool
name|qws_single_process
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|incoming
specifier|static
name|QList
argument_list|<
name|QWSEvent
modifier|*
argument_list|>
name|incoming
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|outgoing
specifier|static
name|QList
argument_list|<
name|QWSCommand
modifier|*
argument_list|>
name|outgoing
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_client_enqueue
name|void
name|qt_client_enqueue
parameter_list|(
specifier|const
name|QWSEvent
modifier|*
name|event
parameter_list|)
block|{
name|QWSEvent
modifier|*
name|copy
init|=
name|QWSEvent
operator|::
name|factory
argument_list|(
name|event
operator|->
name|type
argument_list|)
decl_stmt|;
name|copy
operator|->
name|copyFrom
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|incoming
operator|.
name|append
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_get_server_queue
name|QList
argument_list|<
name|QWSCommand
modifier|*
argument_list|>
modifier|*
name|qt_get_server_queue
parameter_list|()
block|{
return|return
operator|&
name|outgoing
return|;
block|}
end_function
begin_function
DECL|function|qt_server_enqueue
name|void
name|qt_server_enqueue
parameter_list|(
specifier|const
name|QWSCommand
modifier|*
name|command
parameter_list|)
block|{
name|QWSCommand
modifier|*
name|copy
init|=
name|QWSCommand
operator|::
name|factory
argument_list|(
name|command
operator|->
name|type
argument_list|)
decl_stmt|;
name|QT_TRY
block|{
name|copy
operator|->
name|copyFrom
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|outgoing
operator|.
name|append
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
operator|delete
name|copy
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|Data
name|QWSDisplay
operator|::
name|Data
operator|::
name|Data
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|,
name|bool
name|singleProcess
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_QWS_MULTIPROCESS
name|Q_UNUSED
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|singleProcess
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|singleProcess
condition|)
name|csocket
operator|=
literal|0
expr_stmt|;
else|else
block|{
name|csocket
operator|=
operator|new
name|QWSSocket
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|csocket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|qApp
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|clientLock
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~Data
name|QWSDisplay
operator|::
name|Data
operator|::
name|~
name|Data
parameter_list|()
block|{
comment|//        delete rgnMan; rgnMan = 0;
comment|//        delete memorymanager; memorymanager = 0;
name|qt_screen
operator|->
name|disconnect
argument_list|()
expr_stmt|;
operator|delete
name|qt_screen
expr_stmt|;
name|qt_screen
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
operator|delete
name|qt_screencursor
expr_stmt|;
name|qt_screencursor
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
name|shm
operator|.
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
name|csocket
condition|)
block|{
name|QWSCommand
name|shutdownCmd
argument_list|(
name|QWSCommand
operator|::
name|Shutdown
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|shutdownCmd
operator|.
name|write
argument_list|(
name|csocket
argument_list|)
expr_stmt|;
name|csocket
operator|->
name|flush
argument_list|()
expr_stmt|;
comment|// may be pending QCop message, eg.
operator|delete
name|csocket
expr_stmt|;
block|}
operator|delete
name|clientLock
expr_stmt|;
name|clientLock
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
operator|delete
name|connected_event
expr_stmt|;
operator|delete
name|mouse_event
expr_stmt|;
operator|delete
name|current_event
expr_stmt|;
name|qDeleteAll
argument_list|(
name|queue
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_COP
operator|delete
name|qcop_response
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
end_ifndef
begin_function
DECL|function|lockClient
name|bool
name|QWSDisplay
operator|::
name|Data
operator|::
name|lockClient
parameter_list|(
name|QWSLock
operator|::
name|LockType
name|type
parameter_list|,
name|int
name|timeout
parameter_list|)
block|{
return|return
operator|!
name|clientLock
operator|||
name|clientLock
operator|->
name|lock
argument_list|(
name|type
argument_list|,
name|timeout
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|unlockClient
name|void
name|QWSDisplay
operator|::
name|Data
operator|::
name|unlockClient
parameter_list|(
name|QWSLock
operator|::
name|LockType
name|type
parameter_list|)
block|{
if|if
condition|(
name|clientLock
condition|)
name|clientLock
operator|->
name|unlock
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|waitClient
name|bool
name|QWSDisplay
operator|::
name|Data
operator|::
name|waitClient
parameter_list|(
name|QWSLock
operator|::
name|LockType
name|type
parameter_list|,
name|int
name|timeout
parameter_list|)
block|{
return|return
operator|!
name|clientLock
operator|||
name|clientLock
operator|->
name|wait
argument_list|(
name|type
argument_list|,
name|timeout
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getClientLock
name|QWSLock
modifier|*
name|QWSDisplay
operator|::
name|Data
operator|::
name|getClientLock
parameter_list|()
block|{
return|return
name|clientLock
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_MULTIPROCESS
end_comment
begin_function
DECL|function|flush
name|void
name|QWSDisplay
operator|::
name|Data
operator|::
name|flush
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
if|if
condition|(
name|csocket
condition|)
block|{
name|csocket
operator|->
name|waitForReadyRead
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|csocket
operator|->
name|flush
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_if
if|#
directive|if
literal|0
end_if
begin_endif
unit|void QWSDisplay::Data::debugQueue() {     for (int i = 0; i< queue.size(); ++i) {         QWSEvent *e = queue.at(i);         qDebug( "   ev %d type %d sl %d rl %d", i, e->type, e->simpleLen, e->rawLen);     } }
endif|#
directive|endif
end_endif
begin_function
DECL|function|queueNotEmpty
name|bool
name|QWSDisplay
operator|::
name|Data
operator|::
name|queueNotEmpty
parameter_list|()
block|{
return|return
name|mouse_event
comment|/*||region_event*/
operator|||
name|queue
operator|.
name|count
argument_list|()
operator|>
literal|0
return|;
block|}
end_function
begin_function
DECL|function|dequeue
name|QWSEvent
modifier|*
name|QWSDisplay
operator|::
name|Data
operator|::
name|dequeue
parameter_list|()
block|{
name|QWSEvent
modifier|*
name|r
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|queue
operator|.
name|count
argument_list|()
condition|)
block|{
name|r
operator|=
name|queue
operator|.
name|first
argument_list|()
expr_stmt|;
name|queue
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
if|if
condition|(
name|r
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|Region
condition|)
name|region_events_count
operator|--
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mouse_event
condition|)
block|{
name|r
operator|=
name|mouse_event
expr_stmt|;
name|mouse_event
operator|=
literal|0
expr_stmt|;
ifdef|#
directive|ifdef
name|QAPPLICATION_EXTRA_DEBUG
name|mouse_event_count
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|r
return|;
block|}
end_function
begin_function
DECL|function|peek
name|QWSEvent
modifier|*
name|QWSDisplay
operator|::
name|Data
operator|::
name|peek
parameter_list|()
block|{
return|return
name|queue
operator|.
name|first
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|directServerConnection
name|bool
name|QWSDisplay
operator|::
name|Data
operator|::
name|directServerConnection
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
return|return
name|csocket
operator|==
literal|0
return|;
else|#
directive|else
return|return
literal|true
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|create
name|void
name|QWSDisplay
operator|::
name|Data
operator|::
name|create
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|QWSCreateCommand
name|cmd
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|flushCommands
name|void
name|QWSDisplay
operator|::
name|Data
operator|::
name|flushCommands
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
if|if
condition|(
name|csocket
condition|)
name|csocket
operator|->
name|flush
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|sendCommand
name|void
name|QWSDisplay
operator|::
name|Data
operator|::
name|sendCommand
parameter_list|(
name|QWSCommand
modifier|&
name|cmd
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
if|if
condition|(
name|csocket
condition|)
name|cmd
operator|.
name|write
argument_list|(
name|csocket
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
name|qt_server_enqueue
argument_list|(
operator|&
name|cmd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendSynchronousCommand
name|void
name|QWSDisplay
operator|::
name|Data
operator|::
name|sendSynchronousCommand
parameter_list|(
name|QWSCommand
modifier|&
name|cmd
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
if|if
condition|(
name|csocket
condition|)
block|{
name|lockClient
argument_list|(
name|QWSLock
operator|::
name|Communication
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|write
argument_list|(
name|csocket
argument_list|)
expr_stmt|;
name|bool
name|ok
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|csocket
operator|->
name|bytesToWrite
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|csocket
operator|->
name|waitForBytesWritten
argument_list|(
operator|-
literal|1
argument_list|)
condition|)
block|{
name|qCritical
argument_list|(
literal|"QWSDisplay::Data::sendSynchronousCommand: %s"
argument_list|,
name|qPrintable
argument_list|(
name|csocket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|ok
condition|)
name|waitClient
argument_list|(
name|QWSLock
operator|::
name|Communication
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
name|qt_server_enqueue
argument_list|(
operator|&
name|cmd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeId
name|int
name|QWSDisplay
operator|::
name|Data
operator|::
name|takeId
parameter_list|()
block|{
name|int
name|unusedIdCount
init|=
name|unused_identifiers
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|unusedIdCount
operator|<=
literal|10
condition|)
name|create
argument_list|(
literal|15
argument_list|)
expr_stmt|;
if|if
condition|(
name|unusedIdCount
operator|==
literal|0
condition|)
block|{
name|create
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Make sure we have an incoming id to wait for, just in case we're recursive
name|waitForCreation
argument_list|()
expr_stmt|;
block|}
return|return
name|unused_identifiers
operator|.
name|takeFirst
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setMouseFilter
name|void
name|QWSDisplay
operator|::
name|Data
operator|::
name|setMouseFilter
parameter_list|(
name|void
function_decl|(
modifier|*
name|filter
function_decl|)
parameter_list|(
name|QWSMouseEvent
modifier|*
parameter_list|)
parameter_list|)
block|{
name|mouseFilter
operator|=
name|filter
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
end_ifndef
begin_decl_stmt
DECL|member|clientLock
name|QWSLock
modifier|*
name|QWSDisplay
operator|::
name|Data
operator|::
name|clientLock
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_app_reinit
name|void
name|Q_GUI_EXPORT
name|qt_app_reinit
parameter_list|(
specifier|const
name|QString
modifier|&
name|newAppName
parameter_list|)
block|{
name|qt_fbdpy
operator|->
name|d
operator|->
name|reinit
argument_list|(
name|newAppName
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_MULTIPROCESS
end_comment
begin_class_decl
class_decl|class
name|QDesktopWidget
class_decl|;
end_class_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
end_ifndef
begin_function
DECL|function|reinit
name|void
name|QWSDisplay
operator|::
name|Data
operator|::
name|reinit
parameter_list|(
specifier|const
name|QString
modifier|&
name|newAppName
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|csocket
argument_list|)
expr_stmt|;
operator|delete
name|connected_event
expr_stmt|;
name|connected_event
operator|=
literal|0
expr_stmt|;
name|region_events_count
operator|=
literal|0
expr_stmt|;
comment|//    region_ack = 0;
operator|delete
name|mouse_event
expr_stmt|;
name|mouse_event
operator|=
literal|0
expr_stmt|;
comment|//    region_event = 0;
name|region_offset_window
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_COP
operator|delete
name|qcop_response
expr_stmt|;
name|qcop_response
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
operator|delete
name|current_event
expr_stmt|;
name|current_event
operator|=
literal|0
expr_stmt|;
ifdef|#
directive|ifdef
name|QAPPLICATION_EXTRA_DEBUG
name|mouse_event_count
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
name|mouseFilter
operator|=
literal|0
expr_stmt|;
name|qt_desktopWidget
operator|=
literal|0
expr_stmt|;
operator|delete
name|QWSDisplay
operator|::
name|Data
operator|::
name|clientLock
expr_stmt|;
name|QWSDisplay
operator|::
name|Data
operator|::
name|clientLock
operator|=
literal|0
expr_stmt|;
name|QString
name|pipe
init|=
name|qws_qtePipeFilename
argument_list|()
decl_stmt|;
comment|// QWS client
comment|// Cleanup all cached ids
name|unused_identifiers
operator|.
name|clear
argument_list|()
expr_stmt|;
operator|delete
name|csocket
expr_stmt|;
name|appName
operator|=
name|newAppName
expr_stmt|;
name|qApp
operator|->
name|setObjectName
argument_list|(
name|appName
argument_list|)
expr_stmt|;
name|csocket
operator|=
operator|new
name|QWSSocket
argument_list|()
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|csocket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|qApp
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|csocket
operator|->
name|connectToLocalFile
argument_list|(
name|pipe
argument_list|)
expr_stmt|;
name|QWSDisplay
operator|::
name|Data
operator|::
name|clientLock
operator|=
operator|new
name|QWSLock
argument_list|()
expr_stmt|;
name|QWSIdentifyCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|setId
argument_list|(
name|appName
argument_list|,
name|QWSDisplay
operator|::
name|Data
operator|::
name|clientLock
operator|->
name|id
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SXE
name|QTransportAuth
modifier|*
name|a
init|=
name|QTransportAuth
operator|::
name|getInstance
argument_list|()
decl_stmt|;
name|QTransportAuth
operator|::
name|Data
modifier|*
name|d
init|=
name|a
operator|->
name|connectTransport
argument_list|(
name|QTransportAuth
operator|::
name|UnixStreamSock
operator||
name|QTransportAuth
operator|::
name|Trusted
argument_list|,
name|csocket
operator|->
name|socketDescriptor
argument_list|()
argument_list|)
decl_stmt|;
name|QAuthDevice
modifier|*
name|ad
init|=
name|a
operator|->
name|authBuf
argument_list|(
name|d
argument_list|,
name|csocket
argument_list|)
decl_stmt|;
name|ad
operator|->
name|setClient
argument_list|(
name|csocket
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|write
argument_list|(
name|ad
argument_list|)
expr_stmt|;
else|#
directive|else
name|cmd
operator|.
name|write
argument_list|(
name|csocket
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// wait for connect confirmation
name|waitForConnection
argument_list|()
expr_stmt|;
name|qws_client_id
operator|=
name|connected_event
operator|->
name|simpleData
operator|.
name|clientId
expr_stmt|;
if|if
condition|(
operator|!
name|QWSDisplay
operator|::
name|initLock
argument_list|(
name|pipe
argument_list|,
literal|false
argument_list|)
condition|)
name|qFatal
argument_list|(
literal|"Cannot get display lock"
argument_list|)
expr_stmt|;
if|if
condition|(
name|shm
operator|.
name|attach
argument_list|(
name|connected_event
operator|->
name|simpleData
operator|.
name|servershmid
argument_list|)
condition|)
block|{
name|sharedRam
operator|=
cast|static_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|shm
operator|.
name|address
argument_list|()
argument_list|)
expr_stmt|;
name|QScreen
modifier|*
name|s
init|=
name|qt_get_screen
argument_list|(
name|qws_display_id
argument_list|,
name|qws_display_spec
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
condition|)
name|sharedRamSize
operator|+=
name|s
operator|->
name|memoryNeeded
argument_list|(
name|QLatin1String
argument_list|(
name|qws_display_spec
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|perror
argument_list|(
literal|"QWSDisplay::Data::init"
argument_list|)
expr_stmt|;
name|qFatal
argument_list|(
literal|"Client can't attach to main ram memory."
argument_list|)
expr_stmt|;
block|}
name|qApp
operator|->
name|desktop
argument_list|()
expr_stmt|;
comment|// We wait for creation mainly so that we can process important
comment|// initialization events such as MaxWindowRect that are sent
comment|// before object id creation.  Waiting here avoids later window
comment|// resizing since we have the MWR before windows are displayed.
name|waitForCreation
argument_list|()
expr_stmt|;
name|sharedRamSize
operator|-=
sizeof|sizeof
argument_list|(
name|int
argument_list|)
expr_stmt|;
name|qt_last_x
operator|=
cast|reinterpret_cast
argument_list|<
name|int
operator|*
argument_list|>
argument_list|(
name|sharedRam
operator|+
name|sharedRamSize
argument_list|)
expr_stmt|;
name|sharedRamSize
operator|-=
sizeof|sizeof
argument_list|(
name|int
argument_list|)
expr_stmt|;
name|qt_last_y
operator|=
cast|reinterpret_cast
argument_list|<
name|int
operator|*
argument_list|>
argument_list|(
name|sharedRam
operator|+
name|sharedRamSize
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_COP
name|QCopChannel
operator|::
name|reregisterAll
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|csocket
operator|->
name|flush
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|init
name|void
name|QWSDisplay
operator|::
name|Data
operator|::
name|init
parameter_list|()
block|{
name|connected_event
operator|=
literal|0
expr_stmt|;
name|region_events_count
operator|=
literal|0
expr_stmt|;
comment|//    region_ack = 0;
name|mouse_event
operator|=
literal|0
expr_stmt|;
name|mouse_state
operator|=
operator|-
literal|1
expr_stmt|;
name|mouse_winid
operator|=
literal|0
expr_stmt|;
comment|//    region_event = 0;
name|region_offset_window
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_COP
name|qcop_response
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
name|current_event
operator|=
literal|0
expr_stmt|;
ifdef|#
directive|ifdef
name|QAPPLICATION_EXTRA_DEBUG
name|mouse_event_count
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
name|mouseFilter
operator|=
literal|0
expr_stmt|;
name|QString
name|pipe
init|=
name|qws_qtePipeFilename
argument_list|()
decl_stmt|;
name|sharedRamSize
operator|=
name|qwsSharedRamSize
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
if|if
condition|(
name|csocket
condition|)
block|{
comment|// QWS client
name|connectToPipe
argument_list|()
expr_stmt|;
name|QWSDisplay
operator|::
name|Data
operator|::
name|clientLock
operator|=
operator|new
name|QWSLock
argument_list|()
expr_stmt|;
name|QWSIdentifyCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|setId
argument_list|(
name|appName
argument_list|,
name|QWSDisplay
operator|::
name|Data
operator|::
name|clientLock
operator|->
name|id
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SXE
name|QTransportAuth
modifier|*
name|a
init|=
name|QTransportAuth
operator|::
name|getInstance
argument_list|()
decl_stmt|;
name|QTransportAuth
operator|::
name|Data
modifier|*
name|d
init|=
name|a
operator|->
name|connectTransport
argument_list|(
name|QTransportAuth
operator|::
name|UnixStreamSock
operator||
name|QTransportAuth
operator|::
name|Trusted
argument_list|,
name|csocket
operator|->
name|socketDescriptor
argument_list|()
argument_list|)
decl_stmt|;
name|QAuthDevice
modifier|*
name|ad
init|=
name|a
operator|->
name|authBuf
argument_list|(
name|d
argument_list|,
name|csocket
argument_list|)
decl_stmt|;
name|ad
operator|->
name|setClient
argument_list|(
name|csocket
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|write
argument_list|(
name|ad
argument_list|)
expr_stmt|;
else|#
directive|else
name|cmd
operator|.
name|write
argument_list|(
name|csocket
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// create(30); // not necessary, server will send ids anyway
name|waitForConnection
argument_list|()
expr_stmt|;
name|qws_client_id
operator|=
name|connected_event
operator|->
name|simpleData
operator|.
name|clientId
expr_stmt|;
comment|// now we want to get the exact display spec to use if we haven't
comment|// specified anything.
if|if
condition|(
name|qws_display_spec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
literal|':'
condition|)
name|qws_display_spec
operator|=
name|connected_event
operator|->
name|display
expr_stmt|;
if|if
condition|(
operator|!
name|QWSDisplay
operator|::
name|initLock
argument_list|(
name|pipe
argument_list|,
literal|false
argument_list|)
condition|)
name|qFatal
argument_list|(
literal|"Cannot get display lock"
argument_list|)
expr_stmt|;
if|if
condition|(
name|shm
operator|.
name|attach
argument_list|(
name|connected_event
operator|->
name|simpleData
operator|.
name|servershmid
argument_list|)
condition|)
block|{
name|sharedRam
operator|=
cast|static_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|shm
operator|.
name|address
argument_list|()
argument_list|)
expr_stmt|;
name|QScreen
modifier|*
name|s
init|=
name|qt_get_screen
argument_list|(
name|qws_display_id
argument_list|,
name|qws_display_spec
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
condition|)
name|sharedRamSize
operator|+=
name|s
operator|->
name|memoryNeeded
argument_list|(
name|QLatin1String
argument_list|(
name|qws_display_spec
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|perror
argument_list|(
literal|"QWSDisplay::Data::init"
argument_list|)
expr_stmt|;
name|qFatal
argument_list|(
literal|"Client can't attach to main ram memory."
argument_list|)
expr_stmt|;
block|}
comment|// We wait for creation mainly so that we can process important
comment|// initialization events such as MaxWindowRect that are sent
comment|// before object id creation.  Waiting here avoids later window
comment|// resizing since we have the MWR before windows are displayed.
name|waitForCreation
argument_list|()
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|create
argument_list|(
literal|30
argument_list|)
expr_stmt|;
comment|// QWS server
if|if
condition|(
operator|!
name|QWSDisplay
operator|::
name|initLock
argument_list|(
name|pipe
argument_list|,
literal|true
argument_list|)
condition|)
name|qFatal
argument_list|(
literal|"Cannot get display lock"
argument_list|)
expr_stmt|;
name|QScreen
modifier|*
name|s
init|=
name|qt_get_screen
argument_list|(
name|qws_display_id
argument_list|,
name|qws_display_spec
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
condition|)
name|sharedRamSize
operator|+=
name|s
operator|->
name|memoryNeeded
argument_list|(
name|QLatin1String
argument_list|(
name|qws_display_spec
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
if|if
condition|(
operator|!
name|shm
operator|.
name|create
argument_list|(
name|sharedRamSize
argument_list|)
condition|)
block|{
name|perror
argument_list|(
literal|"Cannot create main ram shared memory\n"
argument_list|)
expr_stmt|;
name|qFatal
argument_list|(
literal|"Unable to allocate %d bytes of shared memory"
argument_list|,
name|sharedRamSize
argument_list|)
expr_stmt|;
block|}
name|qt_servershmid
operator|=
name|shm
operator|.
name|id
argument_list|()
expr_stmt|;
name|sharedRam
operator|=
cast|static_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|shm
operator|.
name|address
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|sharedRam
operator|=
cast|static_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|malloc
argument_list|(
name|sharedRamSize
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Need to zero index count at end of block, might as well zero
comment|// the rest too
name|memset
argument_list|(
name|sharedRam
argument_list|,
literal|0
argument_list|,
name|sharedRamSize
argument_list|)
expr_stmt|;
name|QWSIdentifyCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|setId
argument_list|(
name|appName
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|qt_server_enqueue
argument_list|(
operator|&
name|cmd
argument_list|)
expr_stmt|;
block|}
comment|// Allow some memory for the graphics driver too
comment|//### Note that sharedRamSize() has side effects; it must be called
comment|//### once, and only once, and before initDevice()
name|sharedRamSize
operator|-=
name|qt_screen
operator|->
name|sharedRamSize
argument_list|(
name|sharedRam
operator|+
name|sharedRamSize
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
if|if
condition|(
operator|!
name|csocket
condition|)
endif|#
directive|endif
block|{
comment|//QWS server process
if|if
condition|(
operator|!
name|qt_screen
operator|->
name|initDevice
argument_list|()
condition|)
name|qFatal
argument_list|(
literal|"Unable to initialize screen driver!"
argument_list|)
expr_stmt|;
block|}
name|sharedRamSize
operator|-=
sizeof|sizeof
argument_list|(
name|int
argument_list|)
expr_stmt|;
name|qt_last_x
operator|=
cast|reinterpret_cast
argument_list|<
name|int
operator|*
argument_list|>
argument_list|(
name|sharedRam
operator|+
name|sharedRamSize
argument_list|)
expr_stmt|;
name|sharedRamSize
operator|-=
sizeof|sizeof
argument_list|(
name|int
argument_list|)
expr_stmt|;
name|qt_last_y
operator|=
cast|reinterpret_cast
argument_list|<
name|int
operator|*
argument_list|>
argument_list|(
name|sharedRam
operator|+
name|sharedRamSize
argument_list|)
expr_stmt|;
comment|/* Initialise framebuffer memory manager */
comment|/* Add 4k for luck and to avoid clobbering hardware cursor */
comment|//    int screensize=qt_screen->screenSize();
comment|//     memorymanager=new QMemoryManager(qt_screen->base()+screensize+4096,
comment|//         qt_screen->totalSize()-(screensize+4096),0);
comment|// #ifndef QT_NO_QWS_MULTIPROCESS
comment|//     rgnMan = new QWSRegionManager(pipe, csocket);
comment|// #else
comment|//     rgnMan = new QWSRegionManager(pipe, 0); //####### not necessary
comment|// #endif
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
if|if
condition|(
name|csocket
condition|)
name|csocket
operator|->
name|flush
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|readMore
name|QWSEvent
modifier|*
name|QWSDisplay
operator|::
name|Data
operator|::
name|readMore
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_NO_QWS_MULTIPROCESS
return|return
name|incoming
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
name|incoming
operator|.
name|takeFirst
argument_list|()
return|;
else|#
directive|else
if|if
condition|(
operator|!
name|csocket
condition|)
return|return
name|incoming
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
name|incoming
operator|.
name|takeFirst
argument_list|()
return|;
comment|// read next event
if|if
condition|(
operator|!
name|current_event
condition|)
block|{
name|int
name|event_type
init|=
name|qws_read_uint
argument_list|(
name|csocket
argument_list|)
decl_stmt|;
if|if
condition|(
name|event_type
operator|>=
literal|0
condition|)
block|{
name|current_event
operator|=
name|QWSEvent
operator|::
name|factory
argument_list|(
name|event_type
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|current_event
condition|)
block|{
if|if
condition|(
name|current_event
operator|->
name|read
argument_list|(
name|csocket
argument_list|)
condition|)
block|{
comment|// Finished reading a whole event.
name|QWSEvent
modifier|*
name|result
init|=
name|current_event
decl_stmt|;
name|current_event
operator|=
literal|0
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
comment|// Not finished reading a whole event.
return|return
literal|0
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|fillQueue
name|void
name|QWSDisplay
operator|::
name|Data
operator|::
name|fillQueue
parameter_list|()
block|{
name|QWSServer
operator|::
name|processEventQueue
argument_list|()
expr_stmt|;
name|QWSEvent
modifier|*
name|e
init|=
name|readMore
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
name|int
name|bytesAvailable
init|=
name|csocket
condition|?
name|csocket
operator|->
name|bytesAvailable
argument_list|()
else|:
literal|0
decl_stmt|;
name|int
name|bytesRead
init|=
literal|0
decl_stmt|;
endif|#
directive|endif
while|while
condition|(
name|e
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
name|bytesRead
operator|+=
name|QWS_PROTOCOL_ITEM_SIZE
argument_list|(
operator|(
operator|*
name|e
operator|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|e
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|Connected
condition|)
block|{
name|connected_event
operator|=
cast|static_cast
argument_list|<
name|QWSConnectedEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|Creation
condition|)
block|{
name|QWSCreationEvent
modifier|*
name|ce
init|=
cast|static_cast
argument_list|<
name|QWSCreationEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|int
name|id
init|=
name|ce
operator|->
name|simpleData
operator|.
name|objectid
decl_stmt|;
name|int
name|count
init|=
name|ce
operator|->
name|simpleData
operator|.
name|count
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|unused_identifiers
operator|.
name|append
argument_list|(
name|id
operator|++
argument_list|)
expr_stmt|;
operator|delete
name|e
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|Mouse
condition|)
block|{
if|if
condition|(
operator|!
name|qt_screen
condition|)
block|{
operator|delete
name|e
expr_stmt|;
block|}
else|else
block|{
name|QWSMouseEvent
modifier|*
name|me
init|=
cast|static_cast
argument_list|<
name|QWSMouseEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|mouseFilter
condition|)
name|mouseFilter
argument_list|(
name|me
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QAPPLICATION_EXTRA_DEBUG
specifier|static
specifier|const
name|char
modifier|*
name|defaultAction
init|=
literal|"INITIAL"
decl_stmt|;
specifier|const
name|char
modifier|*
name|action
init|=
name|defaultAction
decl_stmt|;
endif|#
directive|endif
operator|delete
name|mouse_event
expr_stmt|;
if|if
condition|(
name|mouse_winid
operator|!=
name|me
operator|->
name|window
argument_list|()
operator|||
name|mouse_state
operator|!=
name|me
operator|->
name|simpleData
operator|.
name|state
condition|)
block|{
name|queue
operator|.
name|append
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|mouse_winid
operator|=
name|me
operator|->
name|window
argument_list|()
expr_stmt|;
name|mouse_state
operator|=
name|me
operator|->
name|simpleData
operator|.
name|state
expr_stmt|;
name|mouse_event
operator|=
literal|0
expr_stmt|;
ifdef|#
directive|ifdef
name|QAPPLICATION_EXTRA_DEBUG
name|mouse_event_count
operator|=
literal|0
expr_stmt|;
name|action
operator|=
literal|"ENQUEUE"
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
ifdef|#
directive|ifdef
name|QAPPLICATION_EXTRA_DEBUG
if|if
condition|(
name|mouse_event
condition|)
name|action
operator|=
literal|"COMPRESS"
expr_stmt|;
name|mouse_event_count
operator|++
expr_stmt|;
endif|#
directive|endif
name|mouse_event
operator|=
name|me
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QAPPLICATION_EXTRA_DEBUG
if|if
condition|(
name|me
operator|->
name|simpleData
operator|.
name|state
operator|!=
literal|0
operator|||
name|action
operator|!=
name|defaultAction
operator|||
name|mouse_event_count
operator|!=
literal|0
condition|)
name|qDebug
argument_list|(
literal|"fillQueue %s (%d,%d), state %x win %d count %d"
argument_list|,
name|action
argument_list|,
name|me
operator|->
name|simpleData
operator|.
name|x_root
argument_list|,
name|me
operator|->
name|simpleData
operator|.
name|y_root
argument_list|,
name|me
operator|->
name|simpleData
operator|.
name|state
argument_list|,
name|me
operator|->
name|window
argument_list|()
argument_list|,
name|mouse_event_count
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|Region
operator|&&
name|clientLock
condition|)
block|{
comment|// not really an unlock, decrements the semaphore
name|region_events_count
operator|++
expr_stmt|;
name|clientLock
operator|->
name|unlock
argument_list|(
name|QWSLock
operator|::
name|RegionEvent
argument_list|)
expr_stmt|;
name|queue
operator|.
name|append
argument_list|(
name|e
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QWS_PROPERTIES
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|PropertyReply
condition|)
block|{
name|QWSPropertyReplyEvent
modifier|*
name|pe
init|=
cast|static_cast
argument_list|<
name|QWSPropertyReplyEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|pe
operator|->
name|simpleData
operator|.
name|len
decl_stmt|;
name|char
modifier|*
name|data
decl_stmt|;
if|if
condition|(
name|len
operator|<=
literal|0
condition|)
block|{
name|data
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|data
operator|=
operator|new
name|char
index|[
name|len
index|]
expr_stmt|;
name|memcpy
argument_list|(
name|data
argument_list|,
name|pe
operator|->
name|data
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|QPaintDevice
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|getPropertyLen
operator|=
name|len
expr_stmt|;
name|QPaintDevice
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|getPropertyData
operator|=
name|data
expr_stmt|;
operator|delete
name|e
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_QWS_PROPERTIES
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|MaxWindowRect
operator|&&
name|qt_screen
condition|)
block|{
comment|// Process this ASAP, in case new widgets are created (startup)
name|setMaxWindowRect
argument_list|(
operator|(
cast|static_cast
argument_list|<
name|QWSMaxWindowRectEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
operator|)
operator|->
name|simpleData
operator|.
name|rect
argument_list|)
expr_stmt|;
operator|delete
name|e
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_DYNAMICSCREENTRANSFORMATION
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|ScreenTransformation
condition|)
block|{
name|QWSScreenTransformationEvent
modifier|*
name|pe
init|=
cast|static_cast
argument_list|<
name|QWSScreenTransformationEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|setScreenTransformation
argument_list|(
name|pe
operator|->
name|simpleData
operator|.
name|screen
argument_list|,
name|pe
operator|->
name|simpleData
operator|.
name|transformation
argument_list|)
expr_stmt|;
operator|delete
name|e
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_COP
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|QCopMessage
condition|)
block|{
name|QWSQCopMessageEvent
modifier|*
name|pe
init|=
cast|static_cast
argument_list|<
name|QWSQCopMessageEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|pe
operator|->
name|simpleData
operator|.
name|is_response
condition|)
block|{
name|qcop_response
operator|=
name|pe
expr_stmt|;
block|}
else|else
block|{
name|queue
operator|.
name|append
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
else|else
block|{
name|queue
operator|.
name|append
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|//debugQueue();
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
if|if
condition|(
name|csocket
operator|&&
name|bytesRead
operator|>=
name|bytesAvailable
condition|)
break|break;
endif|#
directive|endif
name|e
operator|=
name|readMore
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
end_ifndef
begin_decl_stmt
DECL|variable|qws_connection_timeout
specifier|static
name|int
name|qws_connection_timeout
init|=
literal|5
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|connectToPipe
name|void
name|QWSDisplay
operator|::
name|Data
operator|::
name|connectToPipe
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|csocket
argument_list|)
expr_stmt|;
name|int
name|timeout
init|=
name|qgetenv
argument_list|(
literal|"QWS_CONNECTION_TIMEOUT"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeout
condition|)
name|qws_connection_timeout
operator|=
name|timeout
expr_stmt|;
specifier|const
name|QString
name|pipe
init|=
name|qws_qtePipeFilename
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|csocket
operator|->
name|connectToLocalFile
argument_list|(
name|pipe
argument_list|)
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|>
name|qws_connection_timeout
condition|)
block|{
name|qWarning
argument_list|(
literal|"No Qt for Embedded Linux server appears to be running."
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"If you want to run this program as a server,"
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"add the \"-qws\" command-line option."
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|waitForConnection
name|void
name|QWSDisplay
operator|::
name|Data
operator|::
name|waitForConnection
parameter_list|()
block|{
name|connected_event
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qws_connection_timeout
condition|;
name|i
operator|++
control|)
block|{
name|fillQueue
argument_list|()
expr_stmt|;
if|if
condition|(
name|connected_event
condition|)
return|return;
name|csocket
operator|->
name|flush
argument_list|()
expr_stmt|;
name|csocket
operator|->
name|waitForReadyRead
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|csocket
operator|->
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|connected_event
condition|)
name|qFatal
argument_list|(
literal|"Did not receive a connection event from the qws server"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|waitForRegionAck
name|void
name|QWSDisplay
operator|::
name|Data
operator|::
name|waitForRegionAck
parameter_list|(
name|int
name|winId
parameter_list|)
block|{
name|QWSEvent
modifier|*
name|ack
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|csocket
condition|)
block|{
comment|// GuiClient
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|ack
condition|)
block|{
name|fillQueue
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|<
name|queue
operator|.
name|size
argument_list|()
condition|)
block|{
name|QWSEvent
modifier|*
name|e
init|=
name|queue
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|Region
operator|&&
name|e
operator|->
name|window
argument_list|()
operator|==
name|winId
condition|)
block|{
name|ack
operator|=
name|e
expr_stmt|;
name|queue
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
operator|++
name|i
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ack
condition|)
block|{
name|csocket
operator|->
name|flush
argument_list|()
expr_stmt|;
name|csocket
operator|->
name|waitForReadyRead
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// GuiServer
name|fillQueue
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queue
operator|.
name|size
argument_list|()
condition|;
comment|/* nothing */
control|)
block|{
name|QWSEvent
modifier|*
name|e
init|=
name|queue
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|Region
operator|&&
name|e
operator|->
name|window
argument_list|()
operator|==
name|winId
condition|)
block|{
name|ack
operator|=
name|e
expr_stmt|;
name|queue
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
operator|++
name|i
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ack
condition|)
comment|// already processed
return|return;
block|}
name|Q_ASSERT
argument_list|(
name|ack
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|qwsProcessEvent
argument_list|(
name|ack
argument_list|)
expr_stmt|;
operator|delete
name|ack
expr_stmt|;
name|region_events_count
operator|--
expr_stmt|;
block|}
end_function
begin_function
DECL|function|waitForRegionEvents
name|void
name|QWSDisplay
operator|::
name|Data
operator|::
name|waitForRegionEvents
parameter_list|(
name|int
name|winId
parameter_list|,
name|bool
name|ungrabDisplay
parameter_list|)
block|{
if|if
condition|(
operator|!
name|clientLock
condition|)
return|return;
name|int
name|removedEventsCount
init|=
literal|0
decl_stmt|;
comment|// fill queue with unreceived region events
if|if
condition|(
operator|!
name|clientLock
operator|->
name|hasLock
argument_list|(
name|QWSLock
operator|::
name|RegionEvent
argument_list|)
condition|)
block|{
name|bool
name|ungrabbed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ungrabDisplay
operator|&&
name|QWSDisplay
operator|::
name|grabbed
argument_list|()
condition|)
block|{
name|QWSDisplay
operator|::
name|ungrab
argument_list|()
expr_stmt|;
name|ungrabbed
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
init|;
condition|;
control|)
block|{
name|fillQueue
argument_list|()
expr_stmt|;
if|if
condition|(
name|clientLock
operator|->
name|hasLock
argument_list|(
name|QWSLock
operator|::
name|RegionEvent
argument_list|)
condition|)
break|break;
name|csocket
operator|->
name|flush
argument_list|()
expr_stmt|;
name|csocket
operator|->
name|waitForReadyRead
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ungrabbed
condition|)
name|QWSDisplay
operator|::
name|grab
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// check the queue for pending region events
name|QWSEvent
modifier|*
name|regionEvent
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queue
operator|.
name|size
argument_list|()
condition|;
comment|/* nothing */
control|)
block|{
name|QWSEvent
modifier|*
name|e
init|=
name|queue
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|Region
operator|&&
name|e
operator|->
name|window
argument_list|()
operator|==
name|winId
condition|)
block|{
name|QWSRegionEvent
modifier|*
name|re
init|=
cast|static_cast
argument_list|<
name|QWSRegionEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|re
operator|->
name|simpleData
operator|.
name|type
operator|==
name|QWSRegionEvent
operator|::
name|Allocation
condition|)
block|{
operator|delete
name|regionEvent
expr_stmt|;
name|regionEvent
operator|=
name|re
expr_stmt|;
block|}
name|queue
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|removedEventsCount
operator|++
expr_stmt|;
block|}
else|else
block|{
operator|++
name|i
expr_stmt|;
block|}
block|}
if|if
condition|(
name|regionEvent
condition|)
block|{
name|qApp
operator|->
name|qwsProcessEvent
argument_list|(
name|regionEvent
argument_list|)
expr_stmt|;
operator|delete
name|regionEvent
expr_stmt|;
block|}
name|region_events_count
operator|-=
name|removedEventsCount
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasPendingRegionEvents
name|bool
name|QWSDisplay
operator|::
name|Data
operator|::
name|hasPendingRegionEvents
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|clientLock
operator|&&
operator|!
name|clientLock
operator|->
name|hasLock
argument_list|(
name|QWSLock
operator|::
name|RegionEvent
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|region_events_count
operator|>
literal|0
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_MULTIPROCESS
end_comment
begin_function
DECL|function|waitForCreation
name|void
name|QWSDisplay
operator|::
name|Data
operator|::
name|waitForCreation
parameter_list|()
block|{
name|fillQueue
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
while|while
condition|(
name|unused_identifiers
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|csocket
condition|)
block|{
name|csocket
operator|->
name|flush
argument_list|()
expr_stmt|;
name|csocket
operator|->
name|waitForReadyRead
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|fillQueue
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
end_ifndef
begin_function
DECL|function|waitForPropertyReply
name|void
name|QWSDisplay
operator|::
name|Data
operator|::
name|waitForPropertyReply
parameter_list|()
block|{
if|if
condition|(
operator|!
name|csocket
condition|)
return|return;
name|fillQueue
argument_list|()
expr_stmt|;
while|while
condition|(
name|qt_fbdpy
operator|->
name|getPropertyLen
operator|==
operator|-
literal|2
condition|)
block|{
name|csocket
operator|->
name|flush
argument_list|()
expr_stmt|;
name|csocket
operator|->
name|waitForReadyRead
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|fillQueue
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_COP
end_ifndef
begin_function
DECL|function|waitForQCopResponse
name|void
name|QWSDisplay
operator|::
name|Data
operator|::
name|waitForQCopResponse
parameter_list|()
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|fillQueue
argument_list|()
expr_stmt|;
if|if
condition|(
name|qcop_response
condition|)
break|break;
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
if|if
condition|(
name|csocket
condition|)
block|{
name|csocket
operator|->
name|flush
argument_list|()
expr_stmt|;
name|csocket
operator|->
name|waitForReadyRead
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
name|queue
operator|.
name|prepend
argument_list|(
name|qcop_response
argument_list|)
expr_stmt|;
name|qcop_response
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \class QWSDisplay     \brief The QWSDisplay class provides a display for QWS; it is an internal class.      \internal      \ingroup qws */
end_comment
begin_constructor
DECL|function|QWSDisplay
name|QWSDisplay
operator|::
name|QWSDisplay
parameter_list|()
block|{
name|d
operator|=
operator|new
name|Data
argument_list|(
literal|0
argument_list|,
name|qws_single_process
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWSDisplay
name|QWSDisplay
operator|::
name|~
name|QWSDisplay
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
operator|delete
name|lock
expr_stmt|;
name|lock
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|grabbed
name|bool
name|QWSDisplay
operator|::
name|grabbed
parameter_list|()
block|{
return|return
name|lock
operator|->
name|locked
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|grab
name|void
name|QWSDisplay
operator|::
name|grab
parameter_list|()
block|{
name|lock
operator|->
name|lock
parameter_list|(
name|QLock
operator|::
name|Read
parameter_list|)
constructor_decl|;
block|}
end_function
begin_function
DECL|function|grab
name|void
name|QWSDisplay
operator|::
name|grab
parameter_list|(
name|bool
name|write
parameter_list|)
block|{
name|lock
operator|->
name|lock
argument_list|(
name|write
condition|?
name|QLock
operator|::
name|Write
else|:
name|QLock
operator|::
name|Read
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ungrab
name|void
name|QWSDisplay
operator|::
name|ungrab
parameter_list|()
block|{
name|lock
operator|->
name|unlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
literal|0
end_if
begin_endif
unit|QWSRegionManager *QWSDisplay::regionManager() const {     return d->rgnMan; }
endif|#
directive|endif
end_endif
begin_function
DECL|function|eventPending
name|bool
name|QWSDisplay
operator|::
name|eventPending
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
name|d
operator|->
name|flush
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|fillQueue
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|queueNotEmpty
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*   Caller must delete return value!  */
end_comment
begin_function
DECL|function|getEvent
name|QWSEvent
modifier|*
name|QWSDisplay
operator|::
name|getEvent
parameter_list|()
block|{
name|d
operator|->
name|fillQueue
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|queueNotEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QWSEvent
modifier|*
name|e
init|=
name|d
operator|->
name|dequeue
argument_list|()
decl_stmt|;
return|return
name|e
return|;
block|}
end_function
begin_function
DECL|function|frameBuffer
name|uchar
modifier|*
name|QWSDisplay
operator|::
name|frameBuffer
parameter_list|()
specifier|const
block|{
return|return
name|qt_screen
operator|->
name|base
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|width
name|int
name|QWSDisplay
operator|::
name|width
parameter_list|()
specifier|const
block|{
return|return
name|qt_screen
operator|->
name|width
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|height
name|int
name|QWSDisplay
operator|::
name|height
parameter_list|()
specifier|const
block|{
return|return
name|qt_screen
operator|->
name|height
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|depth
name|int
name|QWSDisplay
operator|::
name|depth
parameter_list|()
specifier|const
block|{
return|return
name|qt_screen
operator|->
name|depth
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|pixmapDepth
name|int
name|QWSDisplay
operator|::
name|pixmapDepth
parameter_list|()
specifier|const
block|{
return|return
name|qt_screen
operator|->
name|pixmapDepth
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|supportsDepth
name|bool
name|QWSDisplay
operator|::
name|supportsDepth
parameter_list|(
name|int
name|depth
parameter_list|)
specifier|const
block|{
return|return
name|qt_screen
operator|->
name|supportsDepth
argument_list|(
name|depth
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|sharedRam
name|uchar
modifier|*
name|QWSDisplay
operator|::
name|sharedRam
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|sharedRam
return|;
block|}
end_function
begin_function
DECL|function|sharedRamSize
name|int
name|QWSDisplay
operator|::
name|sharedRamSize
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|sharedRamSize
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_PROPERTIES
end_ifndef
begin_function
DECL|function|addProperty
name|void
name|QWSDisplay
operator|::
name|addProperty
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|property
parameter_list|)
block|{
name|QWSAddPropertyCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|windowid
operator|=
name|winId
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|property
operator|=
name|property
expr_stmt|;
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setProperty
name|void
name|QWSDisplay
operator|::
name|setProperty
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|property
parameter_list|,
name|int
name|mode
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
block|{
name|QWSSetPropertyCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|windowid
operator|=
name|winId
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|property
operator|=
name|property
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
name|cmd
operator|.
name|setData
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setProperty
name|void
name|QWSDisplay
operator|::
name|setProperty
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|property
parameter_list|,
name|int
name|mode
parameter_list|,
specifier|const
name|char
modifier|*
name|data
parameter_list|)
block|{
name|QWSSetPropertyCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|windowid
operator|=
name|winId
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|property
operator|=
name|property
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
name|cmd
operator|.
name|setData
argument_list|(
name|data
argument_list|,
name|strlen
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeProperty
name|void
name|QWSDisplay
operator|::
name|removeProperty
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|property
parameter_list|)
block|{
name|QWSRemovePropertyCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|windowid
operator|=
name|winId
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|property
operator|=
name|property
expr_stmt|;
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     It is the caller's responsibility to delete[] \a data.  */
end_comment
begin_function
DECL|function|getProperty
name|bool
name|QWSDisplay
operator|::
name|getProperty
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|property
parameter_list|,
name|char
modifier|*
modifier|&
name|data
parameter_list|,
name|int
modifier|&
name|len
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|directServerConnection
argument_list|()
condition|)
block|{
specifier|const
name|char
modifier|*
name|propertyData
decl_stmt|;
name|bool
name|retval
init|=
name|qwsServer
operator|->
name|d_func
argument_list|()
operator|->
name|get_property
argument_list|(
name|winId
argument_list|,
name|property
argument_list|,
name|propertyData
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|<=
literal|0
condition|)
block|{
name|data
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|data
operator|=
operator|new
name|char
index|[
name|len
index|]
expr_stmt|;
name|memcpy
argument_list|(
name|data
argument_list|,
name|propertyData
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
name|QWSGetPropertyCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|windowid
operator|=
name|winId
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|property
operator|=
name|property
expr_stmt|;
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|getPropertyLen
operator|=
operator|-
literal|2
expr_stmt|;
name|getPropertyData
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
name|d
operator|->
name|waitForPropertyReply
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|len
operator|=
name|getPropertyLen
expr_stmt|;
name|data
operator|=
name|getPropertyData
expr_stmt|;
name|getPropertyLen
operator|=
operator|-
literal|2
expr_stmt|;
name|getPropertyData
operator|=
literal|0
expr_stmt|;
return|return
name|len
operator|!=
operator|-
literal|1
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_PROPERTIES
end_comment
begin_function
DECL|function|setAltitude
name|void
name|QWSDisplay
operator|::
name|setAltitude
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|alt
parameter_list|,
name|bool
name|fixed
parameter_list|)
block|{
name|QWSChangeAltitudeCommand
name|cmd
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG
name|memset
argument_list|(
name|cmd
operator|.
name|simpleDataPtr
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|cmd
operator|.
name|simpleData
argument_list|)
argument_list|)
expr_stmt|;
comment|//shut up Valgrind
endif|#
directive|endif
name|cmd
operator|.
name|simpleData
operator|.
name|windowid
operator|=
name|winId
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|altitude
operator|=
name|QWSChangeAltitudeCommand
operator|::
name|Altitude
argument_list|(
name|alt
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|fixed
operator|=
name|fixed
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|directServerConnection
argument_list|()
condition|)
block|{
name|qwsServer
operator|->
name|d_func
argument_list|()
operator|->
name|set_altitude
argument_list|(
operator|&
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|sendSynchronousCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setOpacity
name|void
name|QWSDisplay
operator|::
name|setOpacity
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|opacity
parameter_list|)
block|{
name|QWSSetOpacityCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|windowid
operator|=
name|winId
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|opacity
operator|=
name|opacity
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|directServerConnection
argument_list|()
condition|)
block|{
name|qwsServer
operator|->
name|d_func
argument_list|()
operator|->
name|set_opacity
argument_list|(
operator|&
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|requestFocus
name|void
name|QWSDisplay
operator|::
name|requestFocus
parameter_list|(
name|int
name|winId
parameter_list|,
name|bool
name|get
parameter_list|)
block|{
name|QWSRequestFocusCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|windowid
operator|=
name|winId
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|flag
operator|=
name|get
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|directServerConnection
argument_list|()
condition|)
name|qwsServer
operator|->
name|d_func
argument_list|()
operator|->
name|request_focus
argument_list|(
operator|&
name|cmd
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setIdentity
name|void
name|QWSDisplay
operator|::
name|setIdentity
parameter_list|(
specifier|const
name|QString
modifier|&
name|appName
parameter_list|)
block|{
name|QWSIdentifyCommand
name|cmd
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_QWS_MULTIPROCESS
specifier|const
name|int
name|id
init|=
operator|-
literal|1
decl_stmt|;
else|#
directive|else
specifier|const
name|int
name|id
init|=
name|QWSDisplay
operator|::
name|Data
operator|::
name|clientLock
condition|?
name|QWSDisplay
operator|::
name|Data
operator|::
name|clientLock
operator|->
name|id
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
endif|#
directive|endif
name|cmd
operator|.
name|setId
argument_list|(
name|appName
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|directServerConnection
argument_list|()
condition|)
name|qwsServer
operator|->
name|d_func
argument_list|()
operator|->
name|set_identity
argument_list|(
operator|&
name|cmd
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nameRegion
name|void
name|QWSDisplay
operator|::
name|nameRegion
parameter_list|(
name|int
name|winId
parameter_list|,
specifier|const
name|QString
modifier|&
name|n
parameter_list|,
specifier|const
name|QString
modifier|&
name|c
parameter_list|)
block|{
name|QWSRegionNameCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|windowid
operator|=
name|winId
expr_stmt|;
name|cmd
operator|.
name|setName
argument_list|(
name|n
argument_list|,
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|directServerConnection
argument_list|()
condition|)
name|qwsServer
operator|->
name|d_func
argument_list|()
operator|->
name|name_region
argument_list|(
operator|&
name|cmd
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|requestRegion
name|void
name|QWSDisplay
operator|::
name|requestRegion
parameter_list|(
name|int
name|winId
parameter_list|,
specifier|const
name|QString
modifier|&
name|surfaceKey
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|surfaceData
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|directServerConnection
argument_list|()
condition|)
block|{
name|qwsServer
operator|->
name|d_func
argument_list|()
operator|->
name|request_region
argument_list|(
name|winId
argument_list|,
name|surfaceKey
argument_list|,
name|surfaceData
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWSRegionCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|setData
argument_list|(
name|winId
argument_list|,
name|surfaceKey
argument_list|,
name|surfaceData
argument_list|,
name|region
argument_list|)
expr_stmt|;
name|d
operator|->
name|sendSynchronousCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|repaintRegion
name|void
name|QWSDisplay
operator|::
name|repaintRegion
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|windowFlags
parameter_list|,
name|bool
name|opaque
parameter_list|,
name|QRegion
name|r
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|directServerConnection
argument_list|()
condition|)
block|{
name|qwsServer
operator|->
name|d_func
argument_list|()
operator|->
name|repaint_region
argument_list|(
name|winId
argument_list|,
name|windowFlags
argument_list|,
name|opaque
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVector
argument_list|<
name|QRect
argument_list|>
name|ra
init|=
name|r
operator|.
name|rects
argument_list|()
decl_stmt|;
comment|/*           for (int i = 0; i< ra.size(); i++) {           QRect r(ra[i]);           qDebug("rect: %d %d %d %d", r.x(), r.y(), r.right(), r.bottom());           }         */
name|QWSRepaintRegionCommand
name|cmd
decl_stmt|;
comment|/* XXX QWSRegionCommand is padded out in a compiler dependent way.        Zeroed out to avoid valgrind reporting uninitialized memory usage.        */
ifdef|#
directive|ifdef
name|QT_DEBUG
name|memset
argument_list|(
name|cmd
operator|.
name|simpleDataPtr
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|cmd
operator|.
name|simpleData
argument_list|)
argument_list|)
expr_stmt|;
comment|//shut up Valgrind
endif|#
directive|endif
name|cmd
operator|.
name|simpleData
operator|.
name|windowid
operator|=
name|winId
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|windowFlags
operator|=
name|windowFlags
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|opaque
operator|=
name|opaque
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|nrectangles
operator|=
name|ra
operator|.
name|count
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|setData
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|ra
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|ra
operator|.
name|count
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|QRect
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|sendSynchronousCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|moveRegion
name|void
name|QWSDisplay
operator|::
name|moveRegion
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
name|QWSRegionMoveCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|windowid
operator|=
name|winId
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|dx
operator|=
name|dx
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|dy
operator|=
name|dy
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|directServerConnection
argument_list|()
condition|)
block|{
name|qwsServer
operator|->
name|d_func
argument_list|()
operator|->
name|move_region
argument_list|(
operator|&
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|sendSynchronousCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
comment|//    d->offsetPendingExpose(winId, QPoint(cmd.simpleData.dx, cmd.simpleData.dy));
block|}
end_function
begin_function
DECL|function|destroyRegion
name|void
name|QWSDisplay
operator|::
name|destroyRegion
parameter_list|(
name|int
name|winId
parameter_list|)
block|{
name|QWSRegionDestroyCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|windowid
operator|=
name|winId
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|directServerConnection
argument_list|()
condition|)
block|{
name|qwsServer
operator|->
name|d_func
argument_list|()
operator|->
name|destroy_region
argument_list|(
operator|&
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_INPUTMETHODS
end_ifndef
begin_function
DECL|function|sendIMUpdate
name|void
name|QWSDisplay
operator|::
name|sendIMUpdate
parameter_list|(
name|int
name|type
parameter_list|,
name|int
name|winId
parameter_list|,
name|int
name|widgetid
parameter_list|)
block|{
name|QWSIMUpdateCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|windowid
operator|=
name|winId
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|widgetid
operator|=
name|widgetid
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|type
operator|=
name|type
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|directServerConnection
argument_list|()
condition|)
block|{
name|qwsServer
operator|->
name|d_func
argument_list|()
operator|->
name|im_update
argument_list|(
operator|&
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sendIMResponse
name|void
name|QWSDisplay
operator|::
name|sendIMResponse
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|property
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|result
parameter_list|)
block|{
name|QWSIMResponseCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|windowid
operator|=
name|winId
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|property
operator|=
name|property
expr_stmt|;
name|cmd
operator|.
name|setResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|directServerConnection
argument_list|()
condition|)
block|{
name|qwsServer
operator|->
name|d_func
argument_list|()
operator|->
name|im_response
argument_list|(
operator|&
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|resetIM
name|void
name|QWSDisplay
operator|::
name|resetIM
parameter_list|()
block|{
name|sendIMUpdate
argument_list|(
name|QWSInputMethod
operator|::
name|Reset
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendIMMouseEvent
name|void
name|QWSDisplay
operator|::
name|sendIMMouseEvent
parameter_list|(
name|int
name|index
parameter_list|,
name|bool
name|isPress
parameter_list|)
block|{
name|QWSIMMouseCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|state
operator|=
name|isPress
condition|?
name|QWSServer
operator|::
name|MousePress
else|:
name|QWSServer
operator|::
name|MouseRelease
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|directServerConnection
argument_list|()
condition|)
block|{
name|qwsServer
operator|->
name|d_func
argument_list|()
operator|->
name|send_im_mouse
argument_list|(
operator|&
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|takeId
name|int
name|QWSDisplay
operator|::
name|takeId
parameter_list|()
block|{
return|return
name|d
operator|->
name|takeId
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|initLock
name|bool
name|QWSDisplay
operator|::
name|initLock
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
name|bool
name|create
parameter_list|)
block|{
if|if
condition|(
operator|!
name|lock
condition|)
block|{
name|lock
operator|=
operator|new
name|QLock
argument_list|(
name|filename
argument_list|,
literal|'d'
argument_list|,
name|create
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|lock
operator|->
name|isValid
argument_list|()
condition|)
block|{
operator|delete
name|lock
expr_stmt|;
name|lock
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setSelectionOwner
name|void
name|QWSDisplay
operator|::
name|setSelectionOwner
parameter_list|(
name|int
name|winId
parameter_list|,
specifier|const
name|QTime
modifier|&
name|time
parameter_list|)
block|{
name|QWSSetSelectionOwnerCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|windowid
operator|=
name|winId
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|hour
operator|=
name|time
operator|.
name|hour
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|minute
operator|=
name|time
operator|.
name|minute
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|sec
operator|=
name|time
operator|.
name|second
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|ms
operator|=
name|time
operator|.
name|msec
argument_list|()
expr_stmt|;
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convertSelection
name|void
name|QWSDisplay
operator|::
name|convertSelection
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|selectionProperty
parameter_list|,
specifier|const
name|QString
modifier|&
name|mimeTypes
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_QWS_PROPERTIES
name|Q_UNUSED
argument_list|(
name|mimeTypes
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// ### we need the atom/property thingy like in X here
name|addProperty
argument_list|(
name|winId
argument_list|,
name|QT_QWS_PROPERTY_CONVERTSELECTION
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|winId
argument_list|,
name|QT_QWS_PROPERTY_CONVERTSELECTION
argument_list|,
name|int
argument_list|(
name|QWSPropertyManager
operator|::
name|PropReplace
argument_list|)
argument_list|,
name|mimeTypes
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QWSConvertSelectionCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|requestor
operator|=
name|winId
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|selection
operator|=
name|selectionProperty
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|mimeTypes
operator|=
name|QT_QWS_PROPERTY_CONVERTSELECTION
expr_stmt|;
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defineCursor
name|void
name|QWSDisplay
operator|::
name|defineCursor
parameter_list|(
name|int
name|id
parameter_list|,
specifier|const
name|QBitmap
modifier|&
name|curs
parameter_list|,
specifier|const
name|QBitmap
modifier|&
name|mask
parameter_list|,
name|int
name|hotX
parameter_list|,
name|int
name|hotY
parameter_list|)
block|{
specifier|const
name|QImage
name|cursImg
init|=
name|curs
operator|.
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_MonoLSB
argument_list|)
decl_stmt|;
specifier|const
name|QImage
name|maskImg
init|=
name|mask
operator|.
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_MonoLSB
argument_list|)
decl_stmt|;
name|QWSDefineCursorCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|width
operator|=
name|curs
operator|.
name|width
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|height
operator|=
name|curs
operator|.
name|height
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|hotX
operator|=
name|hotX
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|hotY
operator|=
name|hotY
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|id
operator|=
name|id
expr_stmt|;
comment|// must copy each scanline since there might be gaps between them
specifier|const
name|int
name|height
init|=
name|curs
operator|.
name|height
argument_list|()
decl_stmt|;
specifier|const
name|int
name|width
init|=
name|curs
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|dst_bpl
init|=
operator|(
name|width
operator|+
literal|7
operator|)
operator|/
literal|8
decl_stmt|;
name|int
name|dataLen
init|=
name|dst_bpl
operator|*
name|height
decl_stmt|;
name|uchar
modifier|*
name|data
init|=
operator|new
name|uchar
index|[
name|dataLen
operator|*
literal|2
index|]
decl_stmt|;
name|uchar
modifier|*
name|dst
init|=
name|data
decl_stmt|;
name|int
name|src_bpl
init|=
name|cursImg
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|cursSrc
init|=
name|cursImg
operator|.
name|bits
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|height
condition|;
operator|++
name|i
control|)
block|{
name|memcpy
argument_list|(
name|dst
argument_list|,
name|cursSrc
operator|+
name|i
operator|*
name|src_bpl
argument_list|,
name|dst_bpl
argument_list|)
expr_stmt|;
name|dst
operator|+=
name|dst_bpl
expr_stmt|;
block|}
name|src_bpl
operator|=
name|maskImg
operator|.
name|bytesPerLine
argument_list|()
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|maskSrc
init|=
name|maskImg
operator|.
name|bits
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|height
condition|;
operator|++
name|i
control|)
block|{
name|memcpy
argument_list|(
name|dst
argument_list|,
name|maskSrc
operator|+
name|i
operator|*
name|src_bpl
argument_list|,
name|dst_bpl
argument_list|)
expr_stmt|;
name|dst
operator|+=
name|dst_bpl
expr_stmt|;
block|}
name|cmd
operator|.
name|setData
argument_list|(
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
argument_list|,
name|dataLen
operator|*
literal|2
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|data
expr_stmt|;
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|destroyCursor
name|void
name|QWSDisplay
operator|::
name|destroyCursor
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|QWSDefineCursorCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|width
operator|=
literal|0
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|height
operator|=
literal|0
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|hotX
operator|=
literal|0
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|hotY
operator|=
literal|0
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|cmd
operator|.
name|setData
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SOUND
end_ifndef
begin_function
DECL|function|playSoundFile
name|void
name|QWSDisplay
operator|::
name|playSoundFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|f
parameter_list|)
block|{
name|QWSPlaySoundCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|setFileName
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_COP
end_ifndef
begin_function
DECL|function|registerChannel
name|void
name|QWSDisplay
operator|::
name|registerChannel
parameter_list|(
specifier|const
name|QString
modifier|&
name|channel
parameter_list|)
block|{
name|QWSQCopRegisterChannelCommand
name|reg
decl_stmt|;
name|reg
operator|.
name|setChannel
argument_list|(
name|channel
argument_list|)
expr_stmt|;
name|qt_fbdpy
operator|->
name|d
operator|->
name|sendCommand
argument_list|(
name|reg
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendMessage
name|void
name|QWSDisplay
operator|::
name|sendMessage
parameter_list|(
specifier|const
name|QString
modifier|&
name|channel
parameter_list|,
specifier|const
name|QString
modifier|&
name|msg
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
block|{
name|QWSQCopSendCommand
name|com
decl_stmt|;
name|com
operator|.
name|setMessage
argument_list|(
name|channel
argument_list|,
name|msg
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|qt_fbdpy
operator|->
name|d
operator|->
name|sendCommand
argument_list|(
name|com
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|flushCommands
name|void
name|QWSDisplay
operator|::
name|flushCommands
parameter_list|()
block|{
name|qt_fbdpy
operator|->
name|d
operator|->
name|flushCommands
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   caller deletes result */
end_comment
begin_function
DECL|function|waitForQCopResponse
name|QWSQCopMessageEvent
modifier|*
name|QWSDisplay
operator|::
name|waitForQCopResponse
parameter_list|()
block|{
name|qt_fbdpy
operator|->
name|d
operator|->
name|waitForQCopResponse
argument_list|()
expr_stmt|;
name|QWSQCopMessageEvent
modifier|*
name|e
init|=
cast|static_cast
argument_list|<
name|QWSQCopMessageEvent
operator|*
argument_list|>
argument_list|(
name|qt_fbdpy
operator|->
name|d
operator|->
name|dequeue
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|e
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|QCopMessage
argument_list|)
expr_stmt|;
return|return
name|e
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|sendFontCommand
name|void
name|QWSDisplay
operator|::
name|sendFontCommand
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|fontName
parameter_list|)
block|{
name|QWSFontCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|cmd
operator|.
name|setFontName
argument_list|(
name|fontName
argument_list|)
expr_stmt|;
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowCaption
name|void
name|QWSDisplay
operator|::
name|setWindowCaption
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|QString
modifier|&
name|c
parameter_list|)
block|{
if|if
condition|(
name|w
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|nameRegion
argument_list|(
name|w
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|w
operator|->
name|objectName
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|QETWidget
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
operator|->
name|repaintDecoration
argument_list|(
name|qApp
operator|->
name|desktop
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|selectCursor
name|void
name|QWSDisplay
operator|::
name|selectCursor
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|unsigned
name|int
name|cursId
parameter_list|)
block|{
if|if
condition|(
name|cursId
operator|!=
name|qt_last_cursor
condition|)
block|{
name|QWidget
modifier|*
name|top
init|=
name|w
operator|->
name|window
argument_list|()
decl_stmt|;
name|qt_last_cursor
operator|=
name|cursId
expr_stmt|;
name|QWSSelectCursorCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|windowid
operator|=
name|top
operator|->
name|internalWinId
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|id
operator|=
name|cursId
expr_stmt|;
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|d
operator|->
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setCursorPosition
name|void
name|QWSDisplay
operator|::
name|setCursorPosition
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|QWSPositionCursorCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|newX
operator|=
name|x
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|newY
operator|=
name|y
expr_stmt|;
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|d
operator|->
name|flush
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|grabMouse
name|void
name|QWSDisplay
operator|::
name|grabMouse
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|bool
name|grab
parameter_list|)
block|{
name|QWidget
modifier|*
name|top
init|=
name|w
operator|->
name|window
argument_list|()
decl_stmt|;
name|QWSGrabMouseCommand
name|cmd
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG
name|memset
argument_list|(
name|cmd
operator|.
name|simpleDataPtr
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|cmd
operator|.
name|simpleData
argument_list|)
argument_list|)
expr_stmt|;
comment|//shut up Valgrind
endif|#
directive|endif
name|cmd
operator|.
name|simpleData
operator|.
name|windowid
operator|=
name|top
operator|->
name|winId
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|grab
operator|=
name|grab
expr_stmt|;
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|d
operator|->
name|flush
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|grabKeyboard
name|void
name|QWSDisplay
operator|::
name|grabKeyboard
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|bool
name|grab
parameter_list|)
block|{
name|QWidget
modifier|*
name|top
init|=
name|w
operator|->
name|window
argument_list|()
decl_stmt|;
name|QWSGrabKeyboardCommand
name|cmd
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG
name|memset
argument_list|(
name|cmd
operator|.
name|simpleDataPtr
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|cmd
operator|.
name|simpleData
argument_list|)
argument_list|)
expr_stmt|;
comment|//shut up Valgrind
endif|#
directive|endif
name|cmd
operator|.
name|simpleData
operator|.
name|windowid
operator|=
name|top
operator|->
name|winId
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|simpleData
operator|.
name|grab
operator|=
name|grab
expr_stmt|;
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|d
operator|->
name|flush
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|windowList
name|QList
argument_list|<
name|QWSWindowInfo
argument_list|>
name|QWSDisplay
operator|::
name|windowList
parameter_list|()
block|{
name|QList
argument_list|<
name|QWSWindowInfo
argument_list|>
name|ret
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|directServerConnection
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|QWSInternalWindowInfo
modifier|*
argument_list|>
modifier|*
name|qin
init|=
name|QWSServer
operator|::
name|windowList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qin
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWSInternalWindowInfo
modifier|*
name|qwi
init|=
name|qin
operator|->
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QWSWindowInfo
name|tmp
decl_stmt|;
name|tmp
operator|.
name|winid
operator|=
name|qwi
operator|->
name|winid
expr_stmt|;
name|tmp
operator|.
name|clientid
operator|=
name|qwi
operator|->
name|clientid
expr_stmt|;
name|tmp
operator|.
name|name
operator|=
name|QString
argument_list|(
name|qwi
operator|->
name|name
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
name|qDeleteAll
argument_list|(
operator|*
name|qin
argument_list|)
expr_stmt|;
operator|delete
name|qin
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|windowAt
name|int
name|QWSDisplay
operator|::
name|windowAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
block|{
comment|//### currently only implemented for the server process
name|int
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|directServerConnection
argument_list|()
condition|)
block|{
name|QWSWindow
modifier|*
name|win
init|=
name|qwsServer
operator|->
name|windowAt
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|win
condition|)
return|return
name|win
operator|->
name|winId
argument_list|()
return|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|setRawMouseEventFilter
name|void
name|QWSDisplay
operator|::
name|setRawMouseEventFilter
parameter_list|(
name|void
function_decl|(
modifier|*
name|filter
function_decl|)
parameter_list|(
name|QWSMouseEvent
modifier|*
parameter_list|)
parameter_list|)
block|{
if|if
condition|(
name|qt_fbdpy
condition|)
name|qt_fbdpy
operator|->
name|d
operator|->
name|setMouseFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \relates QScreen    Here it is. \a transformation and \a screenNo  */
end_comment
begin_function
DECL|function|setTransformation
name|void
name|QWSDisplay
operator|::
name|setTransformation
parameter_list|(
name|int
name|transformation
parameter_list|,
name|int
name|screenNo
parameter_list|)
block|{
name|QWSScreenTransformCommand
name|cmd
decl_stmt|;
name|cmd
operator|.
name|setTransformation
argument_list|(
name|screenNo
argument_list|,
name|transformation
argument_list|)
expr_stmt|;
name|QWSDisplay
operator|::
name|instance
argument_list|()
operator|->
name|d
operator|->
name|sendCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function_decl
specifier|static
name|bool
name|qt_try_modal
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
name|QWSEvent
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*****************************************************************************   qt_init() - initializes Qt/FB  *****************************************************************************/
end_comment
begin_function
DECL|function|qt_set_qws_resources
specifier|static
name|void
name|qt_set_qws_resources
parameter_list|()
block|{
if|if
condition|(
name|QApplication
operator|::
name|desktopSettingsAware
argument_list|()
condition|)
name|QApplicationPrivate
operator|::
name|qws_apply_settings
argument_list|()
expr_stmt|;
if|if
condition|(
name|appFont
condition|)
name|QApplication
operator|::
name|setFont
argument_list|(
name|QFont
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|appFont
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|appBGCol
operator|||
name|appBTNCol
operator|||
name|appFGCol
condition|)
block|{
operator|(
name|void
operator|)
name|QApplication
operator|::
name|style
argument_list|()
expr_stmt|;
comment|// trigger creation of application style and system palettes
name|QColor
name|btn
decl_stmt|;
name|QColor
name|bg
decl_stmt|;
name|QColor
name|fg
decl_stmt|;
if|if
condition|(
name|appBGCol
condition|)
name|bg
operator|=
name|QColor
argument_list|(
name|appBGCol
argument_list|)
expr_stmt|;
else|else
name|bg
operator|=
name|QApplicationPrivate
operator|::
name|sys_pal
operator|->
name|color
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
expr_stmt|;
if|if
condition|(
name|appFGCol
condition|)
name|fg
operator|=
name|QColor
argument_list|(
name|appFGCol
argument_list|)
expr_stmt|;
else|else
name|fg
operator|=
name|QApplicationPrivate
operator|::
name|sys_pal
operator|->
name|color
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|)
expr_stmt|;
if|if
condition|(
name|appBTNCol
condition|)
name|btn
operator|=
name|QColor
argument_list|(
name|appBTNCol
argument_list|)
expr_stmt|;
else|else
name|btn
operator|=
name|QApplicationPrivate
operator|::
name|sys_pal
operator|->
name|color
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|int
name|h
decl_stmt|,
name|s
decl_stmt|,
name|v
decl_stmt|;
name|fg
operator|.
name|getHsv
argument_list|(
operator|&
name|h
argument_list|,
operator|&
name|s
argument_list|,
operator|&
name|v
argument_list|)
expr_stmt|;
name|QColor
name|base
init|=
name|Qt
operator|::
name|white
decl_stmt|;
name|bool
name|bright_mode
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|v
operator|>=
literal|255
operator|-
literal|50
condition|)
block|{
name|base
operator|=
name|btn
operator|.
name|darker
argument_list|(
literal|150
argument_list|)
expr_stmt|;
name|bright_mode
operator|=
literal|true
expr_stmt|;
block|}
name|QPalette
name|pal
argument_list|(
name|fg
argument_list|,
name|btn
argument_list|,
name|btn
operator|.
name|lighter
argument_list|()
argument_list|,
name|btn
operator|.
name|darker
argument_list|()
argument_list|,
name|btn
operator|.
name|darker
argument_list|(
literal|150
argument_list|)
argument_list|,
name|fg
argument_list|,
name|Qt
operator|::
name|white
argument_list|,
name|base
argument_list|,
name|bg
argument_list|)
decl_stmt|;
if|if
condition|(
name|bright_mode
condition|)
block|{
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|Qt
operator|::
name|darkBlue
argument_list|)
expr_stmt|;
block|}
name|QColor
name|disabled
argument_list|(
operator|(
name|fg
operator|.
name|red
argument_list|()
operator|+
name|btn
operator|.
name|red
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|fg
operator|.
name|green
argument_list|()
operator|+
name|btn
operator|.
name|green
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|fg
operator|.
name|blue
argument_list|()
operator|+
name|btn
operator|.
name|blue
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
decl_stmt|;
name|pal
operator|.
name|setColorGroup
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|disabled
argument_list|,
name|btn
argument_list|,
name|btn
operator|.
name|lighter
argument_list|(
literal|125
argument_list|)
argument_list|,
name|btn
operator|.
name|darker
argument_list|()
argument_list|,
name|btn
operator|.
name|darker
argument_list|(
literal|150
argument_list|)
argument_list|,
name|disabled
argument_list|,
name|Qt
operator|::
name|white
argument_list|,
name|Qt
operator|::
name|white
argument_list|,
name|bg
argument_list|)
expr_stmt|;
if|if
condition|(
name|bright_mode
condition|)
block|{
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|Qt
operator|::
name|darkBlue
argument_list|)
expr_stmt|;
block|}
name|QApplicationPrivate
operator|::
name|setSystemPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|initializeWidgetPaletteHash
name|void
name|QApplicationPrivate
operator|::
name|initializeWidgetPaletteHash
parameter_list|()
block|{ }
end_function
begin_comment
comment|/*! \internal     apply the settings to the application */
end_comment
begin_function
DECL|function|qws_apply_settings
name|bool
name|QApplicationPrivate
operator|::
name|qws_apply_settings
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_SETTINGS
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
name|QLatin1String
argument_list|(
literal|"Trolltech"
argument_list|)
argument_list|)
decl_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
name|QLatin1String
argument_list|(
literal|"Qt"
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|strlist
decl_stmt|;
name|int
name|i
decl_stmt|;
name|QPalette
name|pal
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
decl_stmt|;
name|int
name|groupCount
init|=
literal|0
decl_stmt|;
name|strlist
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"Palette/active"
argument_list|)
argument_list|)
operator|.
name|toStringList
argument_list|()
expr_stmt|;
if|if
condition|(
name|strlist
operator|.
name|count
argument_list|()
operator|==
name|QPalette
operator|::
name|NColorRoles
condition|)
block|{
operator|++
name|groupCount
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|QPalette
operator|::
name|NColorRoles
condition|;
name|i
operator|++
control|)
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
operator|(
name|QPalette
operator|::
name|ColorRole
operator|)
name|i
argument_list|,
name|QColor
argument_list|(
name|strlist
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|strlist
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"Palette/inactive"
argument_list|)
argument_list|)
operator|.
name|toStringList
argument_list|()
expr_stmt|;
if|if
condition|(
name|strlist
operator|.
name|count
argument_list|()
operator|==
name|QPalette
operator|::
name|NColorRoles
condition|)
block|{
operator|++
name|groupCount
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|QPalette
operator|::
name|NColorRoles
condition|;
name|i
operator|++
control|)
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
operator|(
name|QPalette
operator|::
name|ColorRole
operator|)
name|i
argument_list|,
name|QColor
argument_list|(
name|strlist
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|strlist
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"Palette/disabled"
argument_list|)
argument_list|)
operator|.
name|toStringList
argument_list|()
expr_stmt|;
if|if
condition|(
name|strlist
operator|.
name|count
argument_list|()
operator|==
name|QPalette
operator|::
name|NColorRoles
condition|)
block|{
operator|++
name|groupCount
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|QPalette
operator|::
name|NColorRoles
condition|;
name|i
operator|++
control|)
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
operator|(
name|QPalette
operator|::
name|ColorRole
operator|)
name|i
argument_list|,
name|QColor
argument_list|(
name|strlist
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupCount
operator|==
name|QPalette
operator|::
name|NColorGroups
condition|)
name|QApplicationPrivate
operator|::
name|setSystemPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
name|QString
name|str
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"font"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QFont
name|font
argument_list|(
name|QApplication
operator|::
name|font
argument_list|()
argument_list|)
decl_stmt|;
name|font
operator|.
name|fromString
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|setSystemFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
comment|// read library (ie. plugin) path list
name|QString
name|libpathkey
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1.%2/libraryPath"
argument_list|)
operator|.
name|arg
argument_list|(
name|QT_VERSION
operator|>>
literal|16
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|QT_VERSION
operator|&
literal|0xff00
operator|)
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|QStringList
name|pathlist
init|=
name|settings
operator|.
name|value
argument_list|(
name|libpathkey
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
if|if
condition|(
operator|!
name|pathlist
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|pathlist
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|pathlist
operator|.
name|constEnd
argument_list|()
condition|)
name|QApplication
operator|::
name|addLibraryPath
argument_list|(
operator|*
name|it
operator|++
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// read new QStyle
name|QString
name|stylename
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"style"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|QCoreApplication
operator|::
name|startingUp
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|stylename
operator|.
name|isEmpty
argument_list|()
operator|&&
name|QApplicationPrivate
operator|::
name|styleOverride
operator|.
name|isNull
argument_list|()
condition|)
name|QApplicationPrivate
operator|::
name|styleOverride
operator|=
name|stylename
expr_stmt|;
block|}
else|else
block|{
name|QApplication
operator|::
name|setStyle
argument_list|(
name|stylename
argument_list|)
expr_stmt|;
block|}
name|int
name|num
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"doubleClickInterval"
argument_list|)
argument_list|,
name|QApplication
operator|::
name|doubleClickInterval
argument_list|()
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QApplication
operator|::
name|setDoubleClickInterval
argument_list|(
name|num
argument_list|)
expr_stmt|;
name|num
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"cursorFlashTime"
argument_list|)
argument_list|,
name|QApplication
operator|::
name|cursorFlashTime
argument_list|()
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setCursorFlashTime
argument_list|(
name|num
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
name|num
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"wheelScrollLines"
argument_list|)
argument_list|,
name|QApplication
operator|::
name|wheelScrollLines
argument_list|()
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setWheelScrollLines
argument_list|(
name|num
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QString
name|colorspec
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"colorSpec"
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|colorspec
operator|==
name|QLatin1String
argument_list|(
literal|"normal"
argument_list|)
condition|)
name|QApplication
operator|::
name|setColorSpec
argument_list|(
name|QApplication
operator|::
name|NormalColor
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|colorspec
operator|==
name|QLatin1String
argument_list|(
literal|"custom"
argument_list|)
condition|)
name|QApplication
operator|::
name|setColorSpec
argument_list|(
name|QApplication
operator|::
name|CustomColor
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|colorspec
operator|==
name|QLatin1String
argument_list|(
literal|"many"
argument_list|)
condition|)
name|QApplication
operator|::
name|setColorSpec
argument_list|(
name|QApplication
operator|::
name|ManyColor
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|colorspec
operator|!=
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
condition|)
name|colorspec
operator|=
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TEXTCODEC
name|QString
name|defaultcodec
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"defaultCodec"
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|QLatin1String
argument_list|(
literal|"none"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultcodec
operator|!=
name|QLatin1String
argument_list|(
literal|"none"
argument_list|)
condition|)
block|{
name|QTextCodec
modifier|*
name|codec
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
name|defaultcodec
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|codec
condition|)
name|QTextCodec
operator|::
name|setCodecForTr
argument_list|(
name|codec
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|int
name|w
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"globalStrut/width"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"globalStrut/height"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QSize
name|strut
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
if|if
condition|(
name|strut
operator|.
name|isValid
argument_list|()
condition|)
name|QApplication
operator|::
name|setGlobalStrut
argument_list|(
name|strut
argument_list|)
expr_stmt|;
name|QStringList
name|effects
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"GUIEffects"
argument_list|)
argument_list|)
operator|.
name|toStringList
argument_list|()
decl_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_General
argument_list|,
name|effects
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"general"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateMenu
argument_list|,
name|effects
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"animatemenu"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_FadeMenu
argument_list|,
name|effects
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"fademenu"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateCombo
argument_list|,
name|effects
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"animatecombo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateTooltip
argument_list|,
name|effects
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"animatetooltip"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_FadeTooltip
argument_list|,
name|effects
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"fadetooltip"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateToolBox
argument_list|,
name|effects
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"animatetoolbox"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
name|QLatin1String
argument_list|(
literal|"Font Substitutions"
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|fontsubs
init|=
name|settings
operator|.
name|childKeys
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fontsubs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|fontsubs
operator|.
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|fontsubs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|fam
init|=
operator|*
name|it
decl_stmt|;
name|QStringList
name|subs
init|=
name|settings
operator|.
name|value
argument_list|(
name|fam
argument_list|)
operator|.
name|toStringList
argument_list|()
decl_stmt|;
name|QFont
operator|::
name|insertSubstitutions
argument_list|(
name|fam
argument_list|,
name|subs
argument_list|)
expr_stmt|;
block|}
block|}
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
comment|// Qt
name|settings
operator|.
name|beginGroup
argument_list|(
name|QLatin1String
argument_list|(
literal|"QWS Font Fallbacks"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|settings
operator|.
name|childKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// from qfontdatabase_qws.cpp
specifier|extern
name|void
name|qt_applyFontDatabaseSettings
argument_list|(
specifier|const
name|QSettings
operator|&
argument_list|)
decl_stmt|;
name|qt_applyFontDatabaseSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
comment|// QT_NO_SETTINGS
block|}
end_function
begin_function
DECL|function|init_display
specifier|static
name|void
name|init_display
parameter_list|()
block|{
if|if
condition|(
name|qt_fbdpy
condition|)
return|return;
comment|// workaround server==client case
comment|// Connect to FB server
name|qt_fbdpy
operator|=
operator|new
name|QWSDisplay
argument_list|()
expr_stmt|;
comment|// Get display parameters
comment|// Set paintdevice parameters
comment|// XXX initial info sent from server
comment|// Misc. initialization
name|QColormap
operator|::
name|initialize
argument_list|()
expr_stmt|;
name|QFont
operator|::
name|initialize
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QCursorData
operator|::
name|initialize
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|qApp
operator|->
name|setObjectName
argument_list|(
name|appName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QApplicationPrivate
operator|::
name|sys_font
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_FREETYPE
name|QFont
name|f
init|=
name|QFont
argument_list|(
name|QLatin1String
argument_list|(
literal|"helvetica"
argument_list|)
argument_list|,
literal|10
argument_list|)
decl_stmt|;
else|#
directive|else
name|QFont
name|f
init|=
name|QFont
argument_list|(
name|QLatin1String
argument_list|(
literal|"DejaVu Sans"
argument_list|)
argument_list|,
literal|12
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QApplicationPrivate
operator|::
name|setSystemFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|qt_set_qws_resources
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_init_display
name|void
name|qt_init_display
parameter_list|()
block|{
name|qt_is_gui_used
operator|=
literal|true
expr_stmt|;
name|qws_single_process
operator|=
literal|true
expr_stmt|;
name|init_display
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|read_bool_env_var
specifier|static
name|bool
name|read_bool_env_var
parameter_list|(
specifier|const
name|char
modifier|*
name|var
parameter_list|,
name|bool
name|defaultvalue
parameter_list|)
block|{
comment|// returns true if env variable is set to non-zero
comment|// returns false if env var is set to zero
comment|// returns defaultvalue if env var not set
name|char
modifier|*
name|x
init|=
operator|::
name|getenv
argument_list|(
name|var
argument_list|)
decl_stmt|;
return|return
operator|(
name|x
operator|&&
operator|*
name|x
operator|)
condition|?
operator|(
name|strcmp
argument_list|(
name|x
argument_list|,
literal|"0"
argument_list|)
operator|!=
literal|0
operator|)
else|:
name|defaultvalue
return|;
block|}
end_function
begin_function
DECL|function|read_int_env_var
specifier|static
name|int
name|read_int_env_var
parameter_list|(
specifier|const
name|char
modifier|*
name|var
parameter_list|,
name|int
name|defaultvalue
parameter_list|)
block|{
name|bool
name|ok
decl_stmt|;
name|int
name|r
init|=
name|qgetenv
argument_list|(
name|var
argument_list|)
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
return|return
name|ok
condition|?
name|r
else|:
name|defaultvalue
return|;
block|}
end_function
begin_function
DECL|function|qt_init
name|void
name|qt_init
parameter_list|(
name|QApplicationPrivate
modifier|*
name|priv
parameter_list|,
name|int
name|type
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_QWS_MULTIPROCESS
if|if
condition|(
name|type
operator|==
name|QApplication
operator|::
name|GuiClient
condition|)
name|type
operator|=
name|QApplication
operator|::
name|GuiServer
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|type
operator|==
name|QApplication
operator|::
name|GuiServer
condition|)
name|qt_is_gui_used
operator|=
literal|false
expr_stmt|;
comment|//we'll turn it on in a second
name|qws_sw_cursor
operator|=
name|read_bool_env_var
argument_list|(
literal|"QWS_SW_CURSOR"
argument_list|,
name|qws_sw_cursor
argument_list|)
expr_stmt|;
name|qws_screen_is_interlaced
operator|=
name|read_bool_env_var
argument_list|(
literal|"QWS_INTERLACE"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|display
init|=
operator|::
name|getenv
argument_list|(
literal|"QWS_DISPLAY"
argument_list|)
decl_stmt|;
if|if
condition|(
name|display
condition|)
name|qws_display_spec
operator|=
name|display
expr_stmt|;
comment|// since we setenv later!
comment|//qws_savefonts = qgetenv("QWS_SAVEFONTS") != 0;
comment|//qws_shared_memory = qgetenv("QWS_NOSHARED") == 0;
name|mouse_double_click_distance
operator|=
name|read_int_env_var
argument_list|(
literal|"QWS_DBLCLICK_DISTANCE"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|priv
operator|->
name|inputContext
operator|=
literal|0
expr_stmt|;
name|int
name|flags
init|=
literal|0
decl_stmt|;
name|char
modifier|*
name|p
decl_stmt|;
name|int
name|argc
init|=
name|priv
operator|->
name|argc
decl_stmt|;
name|char
modifier|*
modifier|*
name|argv
init|=
name|priv
operator|->
name|argv
decl_stmt|;
name|int
name|j
decl_stmt|;
comment|// Set application name
if|if
condition|(
name|argv
operator|&&
operator|*
name|argv
condition|)
block|{
comment|//apparently, we allow people to pass 0 on the other platforms
name|p
operator|=
name|strrchr
argument_list|(
name|argv
index|[
literal|0
index|]
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|appName
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|p
condition|?
name|p
operator|+
literal|1
else|:
name|argv
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Get command line params
name|j
operator|=
name|argc
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|QString
name|decoration
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|argc
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|argv
index|[
name|i
index|]
operator|&&
operator|*
name|argv
index|[
name|i
index|]
operator|!=
literal|'-'
condition|)
block|{
name|argv
index|[
name|j
operator|++
index|]
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
continue|continue;
block|}
name|QByteArray
name|arg
init|=
name|argv
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|arg
operator|==
literal|"-fn"
operator|||
name|arg
operator|==
literal|"-font"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|appFont
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-bg"
operator|||
name|arg
operator|==
literal|"-background"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|appBGCol
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-btn"
operator|||
name|arg
operator|==
literal|"-button"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|appBTNCol
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-fg"
operator|||
name|arg
operator|==
literal|"-foreground"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|appFGCol
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-name"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|appName
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-title"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|mwTitle
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-geometry"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|mwGeometry
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-shared"
condition|)
block|{
name|qws_shared_memory
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-noshared"
condition|)
block|{
name|qws_shared_memory
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-savefonts"
condition|)
block|{
name|qws_savefonts
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-nosavefonts"
condition|)
block|{
name|qws_savefonts
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-swcursor"
condition|)
block|{
name|qws_sw_cursor
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-noswcursor"
condition|)
block|{
name|qws_sw_cursor
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-keyboard"
condition|)
block|{
name|flags
operator|&=
operator|~
name|QWSServer
operator|::
name|DisableKeyboard
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-nokeyboard"
condition|)
block|{
name|flags
operator||=
name|QWSServer
operator|::
name|DisableKeyboard
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-mouse"
condition|)
block|{
name|flags
operator|&=
operator|~
name|QWSServer
operator|::
name|DisableMouse
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-nomouse"
condition|)
block|{
name|flags
operator||=
name|QWSServer
operator|::
name|DisableMouse
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-qws"
condition|)
block|{
name|type
operator|=
name|QApplication
operator|::
name|GuiServer
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-interlaced"
condition|)
block|{
name|qws_screen_is_interlaced
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-display"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|qws_display_spec
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
literal|"-decoration"
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|argc
condition|)
name|decoration
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|argv
index|[
name|j
operator|++
index|]
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
if|if
condition|(
name|j
operator|<
name|priv
operator|->
name|argc
condition|)
block|{
name|priv
operator|->
name|argv
index|[
name|j
index|]
operator|=
literal|0
expr_stmt|;
name|priv
operator|->
name|argc
operator|=
name|j
expr_stmt|;
block|}
name|mouseInWidget
operator|=
operator|new
name|QPointer
argument_list|<
name|QWidget
argument_list|>
expr_stmt|;
specifier|const
name|QString
name|disp
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|qws_display_spec
argument_list|)
decl_stmt|;
name|QRegExp
name|regexp
argument_list|(
name|QLatin1String
argument_list|(
literal|":(\\d+)$"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|regexp
operator|.
name|lastIndexIn
argument_list|(
name|disp
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|const
name|QString
name|capture
init|=
name|regexp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|int
name|id
init|=
name|capture
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
name|qws_display_id
operator|=
name|id
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
name|QApplication
operator|::
name|GuiServer
condition|)
block|{
name|qt_appType
operator|=
name|QApplication
operator|::
name|Type
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|qws_single_process
operator|=
literal|true
expr_stmt|;
name|QWSServer
operator|::
name|startup
argument_list|(
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|display
condition|)
comment|// if not already set
name|qputenv
argument_list|(
literal|"QWS_DISPLAY"
argument_list|,
name|qws_display_spec
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|qt_is_gui_used
condition|)
block|{
name|init_display
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_MANAGER
if|if
condition|(
name|decoration
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|qws_decoration
condition|)
block|{
specifier|const
name|QStringList
name|keys
init|=
name|QDecorationFactory
operator|::
name|keys
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|keys
operator|.
name|isEmpty
argument_list|()
condition|)
name|decoration
operator|=
name|keys
operator|.
name|first
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|decoration
operator|.
name|isEmpty
argument_list|()
condition|)
name|qws_decoration
operator|=
name|QApplication
operator|::
name|qwsSetDecoration
argument_list|(
name|decoration
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_QWS_MANAGER
ifndef|#
directive|ifndef
name|QT_NO_QWS_INPUTMETHODS
name|qApp
operator|->
name|setInputContext
argument_list|(
operator|new
name|QWSInputContext
argument_list|(
name|qApp
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
comment|/*### convert interlace style     if (qws_screen_is_interlaced)         QApplication::setStyle(new QInterlaceStyle); */
block|}
end_function
begin_comment
comment|/*****************************************************************************   qt_cleanup() - cleans up when the application is finished  *****************************************************************************/
end_comment
begin_function
DECL|function|qt_cleanup
name|void
name|qt_cleanup
parameter_list|()
block|{
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QCursorData
operator|::
name|cleanup
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QFont
operator|::
name|cleanup
argument_list|()
expr_stmt|;
name|QColormap
operator|::
name|cleanup
argument_list|()
expr_stmt|;
if|if
condition|(
name|qws_single_process
condition|)
block|{
name|QWSServer
operator|::
name|closedown
argument_list|()
expr_stmt|;
block|}
name|qDeleteAll
argument_list|(
name|outgoing
argument_list|)
expr_stmt|;
name|outgoing
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|incoming
argument_list|)
expr_stmt|;
name|incoming
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|qt_is_gui_used
condition|)
block|{
operator|delete
name|qt_fbdpy
expr_stmt|;
block|}
name|qt_fbdpy
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_MANAGER
operator|delete
name|qws_decoration
expr_stmt|;
name|qws_decoration
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
operator|delete
name|mouseInWidget
expr_stmt|;
name|mouseInWidget
operator|=
literal|0
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_IM
argument_list|)
operator|delete
name|QApplicationPrivate
operator|::
name|inputContext
expr_stmt|;
name|QApplicationPrivate
operator|::
name|inputContext
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*****************************************************************************   Platform specific global and internal functions  *****************************************************************************/
end_comment
begin_function
DECL|function|appName
name|QString
name|QApplicationPrivate
operator|::
name|appName
parameter_list|()
specifier|const
comment|// get application name
block|{
return|return
name|QT_PREPEND_NAMESPACE
argument_list|(
name|appName
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   Platform specific QApplication members  *****************************************************************************/
end_comment
begin_define
DECL|macro|NoValue
define|#
directive|define
name|NoValue
value|0x0000
end_define
begin_define
DECL|macro|XValue
define|#
directive|define
name|XValue
value|0x0001
end_define
begin_define
DECL|macro|YValue
define|#
directive|define
name|YValue
value|0x0002
end_define
begin_define
DECL|macro|WidthValue
define|#
directive|define
name|WidthValue
value|0x0004
end_define
begin_define
DECL|macro|HeightValue
define|#
directive|define
name|HeightValue
value|0x0008
end_define
begin_define
DECL|macro|AllValues
define|#
directive|define
name|AllValues
value|0x000F
end_define
begin_define
DECL|macro|XNegative
define|#
directive|define
name|XNegative
value|0x0010
end_define
begin_define
DECL|macro|YNegative
define|#
directive|define
name|YNegative
value|0x0020
end_define
begin_comment
comment|/* Copyright notice for ReadInteger and parseGeometry  Copyright (c) 1985, 1986, 1987  X Consortium  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  Except as contained in this notice, the name of the X Consortium shall not be used in advertising or otherwise to promote the sale, use or other dealings in this Software without prior written authorization from the X Consortium.  */
end_comment
begin_comment
comment|/*  *    XParseGeometry parses strings of the form  *   "=<width>x<height>{+-}<xoffset>{+-}<yoffset>", where  *   width, height, xoffset, and yoffset are unsigned integers.  *   Example:  "=80x24+300-49"  *   The equal sign is optional.  *   It returns a bitmask that indicates which of the four values  *   were actually found in the string. For each value found,  *   the corresponding argument is updated;  for each value  *   not found, the corresponding argument is left unchanged.  */
end_comment
begin_function
specifier|static
name|int
DECL|function|ReadInteger
name|ReadInteger
parameter_list|(
name|char
modifier|*
name|string
parameter_list|,
name|char
modifier|*
modifier|*
name|NextString
parameter_list|)
block|{
specifier|register
name|int
name|Result
init|=
literal|0
decl_stmt|;
name|int
name|Sign
init|=
literal|1
decl_stmt|;
if|if
condition|(
operator|*
name|string
operator|==
literal|'+'
condition|)
name|string
operator|++
expr_stmt|;
elseif|else
if|if
condition|(
operator|*
name|string
operator|==
literal|'-'
condition|)
block|{
name|string
operator|++
expr_stmt|;
name|Sign
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
init|;
operator|(
operator|*
name|string
operator|>=
literal|'0'
operator|)
operator|&&
operator|(
operator|*
name|string
operator|<=
literal|'9'
operator|)
condition|;
name|string
operator|++
control|)
block|{
name|Result
operator|=
operator|(
name|Result
operator|*
literal|10
operator|)
operator|+
operator|(
operator|*
name|string
operator|-
literal|'0'
operator|)
expr_stmt|;
block|}
operator|*
name|NextString
operator|=
name|string
expr_stmt|;
if|if
condition|(
name|Sign
operator|>=
literal|0
condition|)
return|return
name|Result
return|;
else|else
return|return
operator|-
name|Result
return|;
block|}
end_function
begin_function
DECL|function|parseGeometry
specifier|static
name|int
name|parseGeometry
parameter_list|(
specifier|const
name|char
modifier|*
name|string
parameter_list|,
name|int
modifier|*
name|x
parameter_list|,
name|int
modifier|*
name|y
parameter_list|,
name|int
modifier|*
name|width
parameter_list|,
name|int
modifier|*
name|height
parameter_list|)
block|{
name|int
name|mask
init|=
name|NoValue
decl_stmt|;
specifier|register
name|char
modifier|*
name|strind
decl_stmt|;
name|unsigned
name|int
name|tempWidth
init|=
literal|0
decl_stmt|,
name|tempHeight
init|=
literal|0
decl_stmt|;
name|int
name|tempX
init|=
literal|0
decl_stmt|,
name|tempY
init|=
literal|0
decl_stmt|;
name|char
modifier|*
name|nextCharacter
decl_stmt|;
if|if
condition|(
operator|!
name|string
operator|||
operator|(
operator|*
name|string
operator|==
literal|'\0'
operator|)
condition|)
return|return
name|mask
return|;
if|if
condition|(
operator|*
name|string
operator|==
literal|'='
condition|)
name|string
operator|++
expr_stmt|;
comment|/* ignore possible '=' at beg of geometry spec */
name|strind
operator|=
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|string
argument_list|)
expr_stmt|;
if|if
condition|(
operator|*
name|strind
operator|!=
literal|'+'
operator|&&
operator|*
name|strind
operator|!=
literal|'-'
operator|&&
operator|*
name|strind
operator|!=
literal|'x'
condition|)
block|{
name|tempWidth
operator|=
name|ReadInteger
argument_list|(
name|strind
argument_list|,
operator|&
name|nextCharacter
argument_list|)
expr_stmt|;
if|if
condition|(
name|strind
operator|==
name|nextCharacter
condition|)
return|return
literal|0
return|;
name|strind
operator|=
name|nextCharacter
expr_stmt|;
name|mask
operator||=
name|WidthValue
expr_stmt|;
block|}
if|if
condition|(
operator|*
name|strind
operator|==
literal|'x'
operator|||
operator|*
name|strind
operator|==
literal|'X'
condition|)
block|{
name|strind
operator|++
expr_stmt|;
name|tempHeight
operator|=
name|ReadInteger
argument_list|(
name|strind
argument_list|,
operator|&
name|nextCharacter
argument_list|)
expr_stmt|;
if|if
condition|(
name|strind
operator|==
name|nextCharacter
condition|)
return|return
literal|0
return|;
name|strind
operator|=
name|nextCharacter
expr_stmt|;
name|mask
operator||=
name|HeightValue
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|*
name|strind
operator|==
literal|'+'
operator|)
operator|||
operator|(
operator|*
name|strind
operator|==
literal|'-'
operator|)
condition|)
block|{
if|if
condition|(
operator|*
name|strind
operator|==
literal|'-'
condition|)
block|{
name|strind
operator|++
expr_stmt|;
name|tempX
operator|=
operator|-
name|ReadInteger
argument_list|(
name|strind
argument_list|,
operator|&
name|nextCharacter
argument_list|)
expr_stmt|;
if|if
condition|(
name|strind
operator|==
name|nextCharacter
condition|)
return|return
literal|0
return|;
name|strind
operator|=
name|nextCharacter
expr_stmt|;
name|mask
operator||=
name|XNegative
expr_stmt|;
block|}
else|else
block|{
name|strind
operator|++
expr_stmt|;
name|tempX
operator|=
name|ReadInteger
argument_list|(
name|strind
argument_list|,
operator|&
name|nextCharacter
argument_list|)
expr_stmt|;
if|if
condition|(
name|strind
operator|==
name|nextCharacter
condition|)
return|return
literal|0
return|;
name|strind
operator|=
name|nextCharacter
expr_stmt|;
block|}
name|mask
operator||=
name|XValue
expr_stmt|;
if|if
condition|(
operator|(
operator|*
name|strind
operator|==
literal|'+'
operator|)
operator|||
operator|(
operator|*
name|strind
operator|==
literal|'-'
operator|)
condition|)
block|{
if|if
condition|(
operator|*
name|strind
operator|==
literal|'-'
condition|)
block|{
name|strind
operator|++
expr_stmt|;
name|tempY
operator|=
operator|-
name|ReadInteger
argument_list|(
name|strind
argument_list|,
operator|&
name|nextCharacter
argument_list|)
expr_stmt|;
if|if
condition|(
name|strind
operator|==
name|nextCharacter
condition|)
return|return
literal|0
return|;
name|strind
operator|=
name|nextCharacter
expr_stmt|;
name|mask
operator||=
name|YNegative
expr_stmt|;
block|}
else|else
block|{
name|strind
operator|++
expr_stmt|;
name|tempY
operator|=
name|ReadInteger
argument_list|(
name|strind
argument_list|,
operator|&
name|nextCharacter
argument_list|)
expr_stmt|;
if|if
condition|(
name|strind
operator|==
name|nextCharacter
condition|)
return|return
literal|0
return|;
name|strind
operator|=
name|nextCharacter
expr_stmt|;
block|}
name|mask
operator||=
name|YValue
expr_stmt|;
block|}
block|}
comment|/* If strind isn't at the end of the string then it's an invalid                 geometry specification. */
if|if
condition|(
operator|*
name|strind
operator|!=
literal|'\0'
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|mask
operator|&
name|XValue
condition|)
operator|*
name|x
operator|=
name|tempX
expr_stmt|;
if|if
condition|(
name|mask
operator|&
name|YValue
condition|)
operator|*
name|y
operator|=
name|tempY
expr_stmt|;
if|if
condition|(
name|mask
operator|&
name|WidthValue
condition|)
operator|*
name|width
operator|=
name|tempWidth
expr_stmt|;
if|if
condition|(
name|mask
operator|&
name|HeightValue
condition|)
operator|*
name|height
operator|=
name|tempHeight
expr_stmt|;
return|return
name|mask
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_function
DECL|function|setMainWidget
name|void
name|QApplication
operator|::
name|setMainWidget
parameter_list|(
name|QWidget
modifier|*
name|mainWidget
parameter_list|)
block|{
name|QApplicationPrivate
operator|::
name|main_widget
operator|=
name|mainWidget
expr_stmt|;
if|if
condition|(
name|QApplicationPrivate
operator|::
name|main_widget
condition|)
comment|// give WM command line
name|QApplicationPrivate
operator|::
name|applyQWSSpecificCommandLineArguments
argument_list|(
name|QApplicationPrivate
operator|::
name|main_widget
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|applyQWSSpecificCommandLineArguments
name|void
name|QApplicationPrivate
operator|::
name|applyQWSSpecificCommandLineArguments
parameter_list|(
name|QWidget
modifier|*
name|main_widget
parameter_list|)
block|{
specifier|static
name|bool
name|beenHereDoneThat
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|beenHereDoneThat
condition|)
return|return;
name|beenHereDoneThat
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|qApp
operator|->
name|windowIcon
argument_list|()
operator|.
name|isNull
argument_list|()
operator|&&
name|main_widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetWindowIcon
argument_list|)
condition|)
name|qApp
operator|->
name|setWindowIcon
argument_list|(
name|main_widget
operator|->
name|windowIcon
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mwTitle
condition|)
comment|//&& main_widget->windowTitle().isEmpty())
name|main_widget
operator|->
name|setWindowTitle
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|mwTitle
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mwGeometry
condition|)
block|{
comment|// parse geometry
name|int
name|x
init|=
literal|0
decl_stmt|;
name|int
name|y
init|=
literal|0
decl_stmt|;
name|int
name|w
init|=
literal|0
decl_stmt|;
name|int
name|h
init|=
literal|0
decl_stmt|;
name|int
name|m
init|=
name|parseGeometry
argument_list|(
name|mwGeometry
argument_list|,
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|,
operator|&
name|w
argument_list|,
operator|&
name|h
argument_list|)
decl_stmt|;
name|QSize
name|minSize
init|=
name|main_widget
operator|->
name|minimumSize
argument_list|()
decl_stmt|;
name|QSize
name|maxSize
init|=
name|main_widget
operator|->
name|maximumSize
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|m
operator|&
name|XValue
operator|)
operator|==
literal|0
condition|)
name|x
operator|=
name|main_widget
operator|->
name|geometry
argument_list|()
operator|.
name|x
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|m
operator|&
name|YValue
operator|)
operator|==
literal|0
condition|)
name|y
operator|=
name|main_widget
operator|->
name|geometry
argument_list|()
operator|.
name|y
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|m
operator|&
name|WidthValue
operator|)
operator|==
literal|0
condition|)
name|w
operator|=
name|main_widget
operator|->
name|width
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|m
operator|&
name|HeightValue
operator|)
operator|==
literal|0
condition|)
name|h
operator|=
name|main_widget
operator|->
name|height
argument_list|()
expr_stmt|;
name|w
operator|=
name|qMin
argument_list|(
name|w
argument_list|,
name|maxSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMin
argument_list|(
name|h
argument_list|,
name|maxSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|minSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMax
argument_list|(
name|h
argument_list|,
name|minSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|m
operator|&
name|XNegative
operator|)
condition|)
block|{
name|x
operator|=
name|qApp
operator|->
name|desktop
argument_list|()
operator|->
name|width
argument_list|()
operator|+
name|x
operator|-
name|w
expr_stmt|;
name|x
operator|-=
operator|(
name|main_widget
operator|->
name|frameGeometry
argument_list|()
operator|.
name|width
argument_list|()
operator|-
name|main_widget
operator|->
name|width
argument_list|()
operator|)
operator|/
literal|2
expr_stmt|;
block|}
else|else
block|{
name|x
operator|+=
operator|(
name|main_widget
operator|->
name|geometry
argument_list|()
operator|.
name|x
argument_list|()
operator|-
name|main_widget
operator|->
name|x
argument_list|()
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|m
operator|&
name|YNegative
operator|)
condition|)
block|{
name|y
operator|=
name|qApp
operator|->
name|desktop
argument_list|()
operator|->
name|height
argument_list|()
operator|+
name|y
operator|-
name|h
expr_stmt|;
block|}
else|else
block|{
name|y
operator|+=
operator|(
name|main_widget
operator|->
name|geometry
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|main_widget
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
block|}
name|main_widget
operator|->
name|setGeometry
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*****************************************************************************   QApplication cursor stack  *****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|setOverrideCursor
name|void
name|QApplication
operator|::
name|setOverrideCursor
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|)
block|{
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|cursor_list
operator|.
name|prepend
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|&&
name|qt_last_x
condition|)
name|w
operator|=
name|topLevelAt
argument_list|(
operator|*
name|qt_last_x
argument_list|,
operator|*
name|qt_last_y
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
name|w
operator|=
name|desktop
argument_list|()
expr_stmt|;
name|QPaintDevice
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|selectCursor
argument_list|(
name|w
argument_list|,
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|cursor_list
operator|.
name|first
argument_list|()
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|restoreOverrideCursor
name|void
name|QApplication
operator|::
name|restoreOverrideCursor
parameter_list|()
block|{
if|if
condition|(
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|cursor_list
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|cursor_list
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|&&
name|qt_last_x
condition|)
name|w
operator|=
name|topLevelAt
argument_list|(
operator|*
name|qt_last_x
argument_list|,
operator|*
name|qt_last_y
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
name|w
operator|=
name|desktop
argument_list|()
expr_stmt|;
name|int
name|cursor_handle
init|=
name|Qt
operator|::
name|ArrowCursor
decl_stmt|;
if|if
condition|(
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|cursor_list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qws_overrideCursor
operator|=
literal|false
expr_stmt|;
name|QWidget
modifier|*
name|upw
init|=
name|QApplication
operator|::
name|widgetAt
argument_list|(
operator|*
name|qt_last_x
argument_list|,
operator|*
name|qt_last_y
argument_list|)
decl_stmt|;
if|if
condition|(
name|upw
condition|)
name|cursor_handle
operator|=
name|upw
operator|->
name|cursor
argument_list|()
operator|.
name|handle
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cursor_handle
operator|=
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|cursor_list
operator|.
name|first
argument_list|()
operator|.
name|handle
argument_list|()
expr_stmt|;
block|}
name|QPaintDevice
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|selectCursor
argument_list|(
name|w
argument_list|,
name|cursor_handle
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CURSOR
end_comment
begin_comment
comment|/*****************************************************************************   Routines to find a Qt widget from a screen position  *****************************************************************************/
end_comment
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|findWidget
name|QWidget
modifier|*
name|QApplicationPrivate
operator|::
name|findWidget
parameter_list|(
specifier|const
name|QObjectList
modifier|&
name|list
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|,
name|bool
name|rec
parameter_list|)
block|{
name|QWidget
modifier|*
name|w
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|isWidgetType
argument_list|()
condition|)
block|{
name|w
operator|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|isVisible
argument_list|()
operator|&&
operator|!
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_TransparentForMouseEvents
argument_list|)
operator|&&
name|w
operator|->
name|geometry
argument_list|()
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
operator|&&
operator|(
operator|!
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|extra
operator|||
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|extra
operator|->
name|mask
operator|.
name|isEmpty
argument_list|()
operator|||
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|extra
operator|->
name|mask
operator|.
name|contains
argument_list|(
name|pos
operator|-
name|w
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|rec
condition|)
return|return
name|w
return|;
name|QWidget
modifier|*
name|c
init|=
name|w
operator|->
name|childAt
argument_list|(
name|w
operator|->
name|mapFromParent
argument_list|(
name|pos
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|c
condition|?
name|c
else|:
name|w
return|;
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|topLevelAt
name|QWidget
modifier|*
name|QApplication
operator|::
name|topLevelAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
comment|//### QWSDisplay::windowAt() is currently only implemented in the server process
name|int
name|winId
init|=
name|QPaintDevice
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|windowAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|winId
operator|!=
literal|0
condition|)
return|return
name|QWidget
operator|::
name|find
argument_list|(
name|winId
argument_list|)
return|;
if|#
directive|if
literal|1
comment|// fallback implementation for client processes
comment|//### This is slightly wrong: we have no guarantee that the list is in
comment|//### stacking order, so if the topmost window is transparent, we may
comment|//### return the wrong widget
name|QWidgetList
name|list
init|=
name|topLevelWidgets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|list
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|w
operator|!=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|&&
name|w
operator|->
name|isVisible
argument_list|()
operator|&&
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|localAllocatedRegion
argument_list|()
operator|.
name|contains
argument_list|(
name|w
operator|->
name|mapFromParent
argument_list|(
name|pos
argument_list|)
argument_list|)
condition|)
return|return
name|w
return|;
block|}
endif|#
directive|endif
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|beep
name|void
name|QApplication
operator|::
name|beep
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|alert
name|void
name|QApplication
operator|::
name|alert
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
name|int
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|qwsProcessEvent
name|int
name|QApplication
operator|::
name|qwsProcessEvent
parameter_list|(
name|QWSEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QApplication
argument_list|)
expr_stmt|;
name|QScopedLoopLevelCounter
name|loopLevelCounter
argument_list|(
name|d
operator|->
name|threadData
argument_list|)
decl_stmt|;
name|int
name|oldstate
init|=
operator|-
literal|1
decl_stmt|;
name|bool
name|isMove
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|Mouse
condition|)
block|{
name|QWSMouseEvent
operator|::
name|SimpleData
modifier|&
name|mouse
init|=
name|event
operator|->
name|asMouse
argument_list|()
operator|->
name|simpleData
decl_stmt|;
name|isMove
operator|=
name|mouse_x_root
operator|!=
name|mouse
operator|.
name|x_root
operator|||
name|mouse_y_root
operator|!=
name|mouse
operator|.
name|y_root
expr_stmt|;
name|oldstate
operator|=
name|mouse_state
expr_stmt|;
name|mouse_x_root
operator|=
name|mouse
operator|.
name|x_root
expr_stmt|;
name|mouse_y_root
operator|=
name|mouse
operator|.
name|y_root
expr_stmt|;
name|mouse_state
operator|=
name|mouse
operator|.
name|state
expr_stmt|;
block|}
name|long
name|unused
decl_stmt|;
if|if
condition|(
name|filterEvent
argument_list|(
name|event
argument_list|,
operator|&
name|unused
argument_list|)
condition|)
comment|// send through app filter
return|return
literal|1
return|;
if|if
condition|(
name|qwsEventFilter
argument_list|(
name|event
argument_list|)
condition|)
comment|// send through app filter
return|return
literal|1
return|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_PROPERTIES
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|PropertyNotify
condition|)
block|{
name|QWSPropertyNotifyEvent
modifier|*
name|e
init|=
cast|static_cast
argument_list|<
name|QWSPropertyNotifyEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|->
name|simpleData
operator|.
name|property
operator|==
literal|424242
condition|)
block|{
comment|// Clipboard
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
if|if
condition|(
name|qt_clipboard
condition|)
block|{
name|QClipboardEvent
name|e
argument_list|(
cast|reinterpret_cast
argument_list|<
name|QEventPrivate
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|qt_clipboard
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
block|}
endif|#
directive|endif
comment|//QT_NO_QWS_PROPERTIES
ifndef|#
directive|ifndef
name|QT_NO_COP
elseif|else
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|QCopMessage
condition|)
block|{
name|QWSQCopMessageEvent
modifier|*
name|e
init|=
cast|static_cast
argument_list|<
name|QWSQCopMessageEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|QCopChannel
operator|::
name|sendLocally
argument_list|(
name|QLatin1String
argument_list|(
name|e
operator|->
name|channel
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|e
operator|->
name|message
argument_list|)
argument_list|,
name|e
operator|->
name|data
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_QWS_QPF2
argument_list|)
elseif|else
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|Font
condition|)
block|{
name|QWSFontEvent
modifier|*
name|e
init|=
cast|static_cast
argument_list|<
name|QWSFontEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|->
name|simpleData
operator|.
name|type
operator|==
name|QWSFontEvent
operator|::
name|FontRemoved
condition|)
block|{
name|QFontCache
operator|::
name|instance
argument_list|()
operator|->
name|removeEngineForFont
argument_list|(
name|e
operator|->
name|fontName
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
name|QPointer
argument_list|<
name|QETWidget
argument_list|>
name|widget
init|=
cast|static_cast
argument_list|<
name|QETWidget
operator|*
argument_list|>
argument_list|(
name|QWidget
operator|::
name|find
argument_list|(
name|WId
argument_list|(
name|event
operator|->
name|window
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_BACKINGSTORE_SUBSURFACES
if|if
condition|(
operator|!
name|widget
condition|)
block|{
comment|// XXX: hw: hack for accessing subsurfaces
specifier|extern
name|QWSWindowSurface
modifier|*
name|qt_findWindowSurface
argument_list|(
name|int
argument_list|)
decl_stmt|;
name|QWSWindowSurface
modifier|*
name|s
init|=
name|qt_findWindowSurface
argument_list|(
name|event
operator|->
name|window
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
condition|)
name|widget
operator|=
cast|static_cast
argument_list|<
name|QETWidget
operator|*
argument_list|>
argument_list|(
name|s
operator|->
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DIRECTPAINTER
if|if
condition|(
operator|!
name|widget
operator|&&
name|d
operator|->
name|directPainters
condition|)
block|{
name|QDirectPainter
modifier|*
name|dp
init|=
name|d
operator|->
name|directPainters
operator|->
name|value
argument_list|(
name|WId
argument_list|(
name|event
operator|->
name|window
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dp
operator|==
literal|0
condition|)
block|{         }
elseif|else
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|Region
condition|)
block|{
name|QWSRegionEvent
modifier|*
name|e
init|=
cast|static_cast
argument_list|<
name|QWSRegionEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|QRegion
name|reg
decl_stmt|;
name|reg
operator|.
name|setRects
argument_list|(
name|e
operator|->
name|rectangles
argument_list|,
name|e
operator|->
name|simpleData
operator|.
name|nrectangles
argument_list|)
expr_stmt|;
name|qt_directpainter_region
argument_list|(
name|dp
argument_list|,
name|reg
argument_list|,
name|e
operator|->
name|simpleData
operator|.
name|type
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
ifndef|#
directive|ifndef
name|QT_NO_QWSEMBEDWIDGET
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|Embed
condition|)
block|{
name|QWSEmbedEvent
modifier|*
name|e
init|=
cast|static_cast
argument_list|<
name|QWSEmbedEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|qt_directpainter_embedevent
argument_list|(
name|dp
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
endif|#
directive|endif
comment|// QT_NO_QWSEMBEDWIDGET
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_DIRECTPAINTER
ifndef|#
directive|ifndef
name|QT_NO_QWS_MANAGER
if|if
condition|(
name|d
operator|->
name|last_manager
operator|&&
name|event
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|Mouse
condition|)
block|{
name|QPoint
name|pos
argument_list|(
name|event
operator|->
name|asMouse
argument_list|()
operator|->
name|simpleData
operator|.
name|x_root
argument_list|,
name|event
operator|->
name|asMouse
argument_list|()
operator|->
name|simpleData
operator|.
name|y_root
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|last_manager
operator|->
name|cachedRegion
argument_list|()
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
condition|)
block|{
comment|// MouseEvent not yet delivered, so QCursor::pos() is not yet updated, sending 2 x pos
name|QMouseEvent
name|outside
argument_list|(
name|QEvent
operator|::
name|MouseMove
argument_list|,
name|pos
argument_list|,
name|pos
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|d
operator|->
name|last_manager
argument_list|,
operator|&
name|outside
argument_list|)
expr_stmt|;
name|d
operator|->
name|last_manager
operator|=
literal|0
expr_stmt|;
name|qt_last_cursor
operator|=
literal|0xffffffff
expr_stmt|;
comment|//decoration is like another window; must redo cursor
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_QWS_MANAGER
name|QETWidget
modifier|*
name|keywidget
init|=
literal|0
decl_stmt|;
name|bool
name|grabbed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|Key
operator|||
name|event
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|IMEvent
operator|||
name|event
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|IMQuery
condition|)
block|{
name|keywidget
operator|=
cast|static_cast
argument_list|<
name|QETWidget
operator|*
argument_list|>
argument_list|(
name|QWidget
operator|::
name|keyboardGrabber
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|keywidget
condition|)
block|{
name|grabbed
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|QWidget
modifier|*
name|popup
init|=
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
condition|)
block|{
if|if
condition|(
name|popup
operator|->
name|focusWidget
argument_list|()
condition|)
name|keywidget
operator|=
cast|static_cast
argument_list|<
name|QETWidget
operator|*
argument_list|>
argument_list|(
name|popup
operator|->
name|focusWidget
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|keywidget
operator|=
cast|static_cast
argument_list|<
name|QETWidget
operator|*
argument_list|>
argument_list|(
name|popup
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QApplicationPrivate
operator|::
name|focus_widget
operator|&&
name|QApplicationPrivate
operator|::
name|focus_widget
operator|->
name|isVisible
argument_list|()
condition|)
name|keywidget
operator|=
cast|static_cast
argument_list|<
name|QETWidget
operator|*
argument_list|>
argument_list|(
name|QApplicationPrivate
operator|::
name|focus_widget
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|widget
condition|)
name|keywidget
operator|=
cast|static_cast
argument_list|<
name|QETWidget
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|MaxWindowRect
condition|)
block|{
name|QRect
name|r
init|=
cast|static_cast
argument_list|<
name|QWSMaxWindowRectEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
operator|->
name|simpleData
operator|.
name|rect
decl_stmt|;
name|setMaxWindowRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_DYNAMICSCREENTRANSFORMATION
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|ScreenTransformation
condition|)
block|{
name|QWSScreenTransformationEvent
modifier|*
name|pe
init|=
cast|static_cast
argument_list|<
name|QWSScreenTransformationEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|setScreenTransformation
argument_list|(
name|pe
operator|->
name|simpleData
operator|.
name|screen
argument_list|,
name|pe
operator|->
name|simpleData
operator|.
name|transformation
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|widget
operator|&&
name|event
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|Mouse
condition|)
block|{
comment|// The mouse event is to one of my top-level widgets
comment|// which one?
specifier|const
name|int
name|btnMask
init|=
name|Qt
operator|::
name|LeftButton
operator||
name|Qt
operator|::
name|RightButton
operator||
name|Qt
operator|::
name|MidButton
decl_stmt|;
name|QPoint
name|p
argument_list|(
name|event
operator|->
name|asMouse
argument_list|()
operator|->
name|simpleData
operator|.
name|x_root
argument_list|,
name|event
operator|->
name|asMouse
argument_list|()
operator|->
name|simpleData
operator|.
name|y_root
argument_list|)
decl_stmt|;
name|int
name|mouseButtonState
init|=
name|event
operator|->
name|asMouse
argument_list|()
operator|->
name|simpleData
operator|.
name|state
operator|&
name|btnMask
decl_stmt|;
specifier|static
name|int
name|btnstate
init|=
literal|0
decl_stmt|;
name|QETWidget
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QETWidget
operator|*
argument_list|>
argument_list|(
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|&&
operator|!
name|mouseButtonState
operator|&&
name|qt_pressGrab
operator|==
name|w
condition|)
name|qt_pressGrab
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_MANAGER
if|if
condition|(
operator|!
name|w
condition|)
name|w
operator|=
cast|static_cast
argument_list|<
name|QETWidget
operator|*
argument_list|>
argument_list|(
name|QWSManager
operator|::
name|grabbedMouse
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|w
condition|)
block|{
comment|// Our mouse is grabbed - send it.
name|widget
operator|=
name|w
expr_stmt|;
name|btnstate
operator|=
name|mouseButtonState
expr_stmt|;
block|}
else|else
block|{
specifier|static
name|QWidget
modifier|*
name|gw
init|=
literal|0
decl_stmt|;
comment|// Three jobs to do here:
comment|// 1. find the child widget this event belongs to.
comment|// 2. make sure the cursor is correct.
comment|// 3. handle implicit mouse grab due to button press.
name|w
operator|=
name|widget
expr_stmt|;
comment|// w is the widget the cursor is in.
comment|//### ??? alloc_region
comment|//#### why should we get events outside alloc_region ????
if|if
condition|(
literal|1
comment|/*widget->data->alloc_region.contains(dp) */
condition|)
block|{
comment|// Find the child widget that the cursor is in.
name|w
operator|=
cast|static_cast
argument_list|<
name|QETWidget
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|childAt
argument_list|(
name|widget
operator|->
name|mapFromParent
argument_list|(
name|p
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
name|w
operator|=
name|widget
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
comment|// Update Cursor.
if|if
condition|(
operator|!
name|gw
operator|||
name|gw
operator|!=
name|w
operator|||
name|qt_last_cursor
operator|==
literal|0xffffffff
condition|)
block|{
name|QCursor
modifier|*
name|curs
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|cursor_list
operator|.
name|isEmpty
argument_list|()
condition|)
name|curs
operator|=
operator|&
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|cursor_list
operator|.
name|first
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|extraData
argument_list|()
condition|)
name|curs
operator|=
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|extraData
argument_list|()
operator|->
name|curs
expr_stmt|;
name|QWidget
modifier|*
name|pw
init|=
name|w
decl_stmt|;
comment|// If this widget has no cursor set, try parent.
while|while
condition|(
operator|!
name|curs
condition|)
block|{
name|pw
operator|=
name|pw
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|pw
condition|)
break|break;
if|if
condition|(
name|pw
operator|->
name|d_func
argument_list|()
operator|->
name|extraData
argument_list|()
condition|)
name|curs
operator|=
name|pw
operator|->
name|d_func
argument_list|()
operator|->
name|extraData
argument_list|()
operator|->
name|curs
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|qws_overrideCursor
condition|)
block|{
if|if
condition|(
name|curs
condition|)
name|QPaintDevice
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|selectCursor
argument_list|(
name|widget
argument_list|,
name|curs
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|QPaintDevice
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|selectCursor
argument_list|(
name|widget
argument_list|,
name|Qt
operator|::
name|ArrowCursor
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
name|gw
operator|=
name|w
expr_stmt|;
block|}
else|else
block|{
comment|// This event is not for any of our widgets
name|gw
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|mouseButtonState
operator|&&
operator|!
name|btnstate
condition|)
block|{
comment|// The server has grabbed the mouse for us.
comment|// Remember which of my widgets has it.
name|qt_pressGrab
operator|=
name|w
expr_stmt|;
if|if
condition|(
operator|!
name|widget
operator|->
name|isActiveWindow
argument_list|()
operator|&&
operator|(
operator|!
name|app_do_modal
operator|||
name|QApplication
operator|::
name|activeModalWidget
argument_list|()
operator|==
name|widget
operator|)
operator|&&
operator|!
operator|(
operator|(
name|widget
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|||
operator|(
name|widget
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Tool
operator|)
operator|)
condition|)
block|{
name|widget
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
if|if
condition|(
name|widget
operator|->
name|raiseOnClick
argument_list|()
condition|)
name|widget
operator|->
name|raise
argument_list|()
expr_stmt|;
block|}
block|}
name|btnstate
operator|=
name|mouseButtonState
expr_stmt|;
name|widget
operator|=
name|w
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|widget
condition|)
block|{
comment|// don't know this window
if|if
condition|(
operator|!
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
ifndef|#
directive|ifndef
name|QT_NO_QWS_MANAGER
operator|&&
operator|!
name|QWSManager
operator|::
name|grabbedMouse
argument_list|()
endif|#
directive|endif
condition|)
block|{
name|qt_last_cursor
operator|=
literal|0xffffffff
expr_stmt|;
comment|// cursor can be changed by another application
block|}
name|QWidget
modifier|*
name|popup
init|=
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|popup
condition|)
block|{
comment|/*               That is more than suboptimal. The real solution should               do some keyevent and buttonevent translation, so that               the popup still continues to work as the user expects.               Unfortunately this translation is currently only               possible with a known widget. I'll change that soon               (Matthias).             */
comment|// Danger - make sure we don't lock the server
switch|switch
condition|(
name|event
operator|->
name|type
condition|)
block|{
case|case
name|QWSEvent
operator|::
name|Mouse
case|:
case|case
name|QWSEvent
operator|::
name|Key
case|:
do|do
block|{
name|popup
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|popup
operator|=
name|qApp
operator|->
name|activePopupWidget
argument_list|()
operator|)
condition|)
do|;
return|return
literal|1
return|;
block|}
block|}
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|QWSEvent
operator|::
name|Mouse
operator|&&
operator|*
name|mouseInWidget
condition|)
block|{
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
literal|0
argument_list|,
operator|*
name|mouseInWidget
argument_list|)
expr_stmt|;
operator|(
operator|*
name|mouseInWidget
operator|)
operator|=
literal|0
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|app_do_modal
condition|)
comment|// modal event handling
if|if
condition|(
operator|!
name|qt_try_modal
argument_list|(
name|widget
argument_list|,
name|event
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|widget
operator|->
name|qwsEvent
argument_list|(
name|event
argument_list|)
condition|)
comment|// send through widget filter
return|return
literal|1
return|;
switch|switch
condition|(
name|event
operator|->
name|type
condition|)
block|{
case|case
name|QWSEvent
operator|::
name|Mouse
case|:
block|{
comment|// mouse event
name|QWSMouseEvent
modifier|*
name|me
init|=
name|event
operator|->
name|asMouse
argument_list|()
decl_stmt|;
name|QWSMouseEvent
operator|::
name|SimpleData
modifier|&
name|mouse
init|=
name|me
operator|->
name|simpleData
decl_stmt|;
comment|//  Translate a QWS event into separate move
comment|// and press/release events
comment|// Beware of reentrancy: we can enter a modal state
comment|// inside translateMouseEvent
if|if
condition|(
name|isMove
condition|)
block|{
name|QWSMouseEvent
name|move
init|=
operator|*
name|me
decl_stmt|;
name|move
operator|.
name|simpleData
operator|.
name|state
operator|=
name|oldstate
expr_stmt|;
name|widget
operator|->
name|translateMouseEvent
argument_list|(
operator|&
name|move
argument_list|,
name|oldstate
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|mouse
operator|.
name|state
operator|&
name|Qt
operator|::
name|MouseButtonMask
operator|)
operator|!=
operator|(
name|oldstate
operator|&
name|Qt
operator|::
name|MouseButtonMask
operator|)
condition|)
block|{
name|widget
operator|->
name|translateMouseEvent
argument_list|(
name|me
argument_list|,
name|oldstate
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mouse
operator|.
name|delta
operator|!=
literal|0
condition|)
name|widget
operator|->
name|translateWheelEvent
argument_list|(
name|me
argument_list|)
expr_stmt|;
if|if
condition|(
name|qt_button_down
operator|&&
operator|(
name|mouse_state
operator|&
name|Qt
operator|::
name|MouseButtonMask
operator|)
operator|==
literal|0
condition|)
name|qt_button_down
operator|=
literal|0
expr_stmt|;
break|break;
block|}
case|case
name|QWSEvent
operator|::
name|Key
case|:
comment|// keyboard event
if|if
condition|(
name|keywidget
condition|)
comment|// should always exist
name|keywidget
operator|->
name|translateKeyEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWSKeyEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|,
name|grabbed
argument_list|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_QWS_INPUTMETHODS
case|case
name|QWSEvent
operator|::
name|IMEvent
case|:
if|if
condition|(
name|keywidget
condition|)
comment|// should always exist
name|QWSInputContext
operator|::
name|translateIMEvent
argument_list|(
name|keywidget
argument_list|,
cast|static_cast
argument_list|<
name|QWSIMEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWSEvent
operator|::
name|IMQuery
case|:
if|if
condition|(
name|keywidget
condition|)
comment|// should always exist
name|QWSInputContext
operator|::
name|translateIMQueryEvent
argument_list|(
name|keywidget
argument_list|,
cast|static_cast
argument_list|<
name|QWSIMQueryEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWSEvent
operator|::
name|IMInit
case|:
name|QWSInputContext
operator|::
name|translateIMInitEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWSIMInitEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QWSEvent
operator|::
name|Region
case|:
name|widget
operator|->
name|translateRegionEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWSRegionEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWSEvent
operator|::
name|Focus
case|:
if|if
condition|(
operator|(
cast|static_cast
argument_list|<
name|QWSFocusEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
operator|)
operator|->
name|simpleData
operator|.
name|get_focus
condition|)
block|{
if|if
condition|(
name|widget
operator|==
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|desktop
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// not interesting
if|if
condition|(
name|activeWindow
argument_list|()
operator|!=
name|widget
condition|)
block|{
name|setActiveWindow
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|QApplicationPrivate
operator|::
name|active_window
condition|)
cast|static_cast
argument_list|<
name|QETWidget
operator|*
argument_list|>
argument_list|(
name|QApplicationPrivate
operator|::
name|active_window
argument_list|)
operator|->
name|repaintDecoration
argument_list|(
name|desktop
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|&&
operator|!
name|d
operator|->
name|inPopupMode
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|widget
operator|->
name|focusWidget
argument_list|()
decl_stmt|;
while|while
condition|(
name|w
operator|&&
name|w
operator|->
name|focusProxy
argument_list|()
condition|)
name|w
operator|=
name|w
operator|->
name|focusProxy
argument_list|()
expr_stmt|;
if|if
condition|(
name|w
operator|&&
operator|(
name|w
operator|->
name|focusPolicy
argument_list|()
operator|!=
name|Qt
operator|::
name|NoFocus
operator|)
condition|)
name|w
operator|->
name|setFocus
argument_list|()
expr_stmt|;
else|else
name|widget
operator|->
name|QWidget
operator|::
name|focusNextPrevChild
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QApplicationPrivate
operator|::
name|focus_widget
condition|)
block|{
if|if
condition|(
name|widget
operator|->
name|focusWidget
argument_list|()
condition|)
name|widget
operator|->
name|focusWidget
argument_list|()
operator|->
name|setFocus
argument_list|()
expr_stmt|;
else|else
name|widget
operator|->
name|window
argument_list|()
operator|->
name|setFocus
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// lost focus
if|if
condition|(
name|widget
operator|==
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|desktop
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// not interesting
if|if
condition|(
name|QApplicationPrivate
operator|::
name|focus_widget
condition|)
block|{
name|QETWidget
modifier|*
name|old
init|=
cast|static_cast
argument_list|<
name|QETWidget
operator|*
argument_list|>
argument_list|(
name|QApplicationPrivate
operator|::
name|active_window
argument_list|)
decl_stmt|;
name|setActiveWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|qt_last_cursor
operator|=
literal|0xffffffff
expr_stmt|;
comment|//QApplicationPrivate::active_window = 0;
if|if
condition|(
name|old
condition|)
name|old
operator|->
name|repaintDecoration
argument_list|(
name|desktop
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|/* activateWindow() sends focus events                    QApplication::setFocusWidget(0);                 */
block|}
block|}
break|break;
case|case
name|QWSEvent
operator|::
name|WindowOperation
case|:
if|if
condition|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|==
name|desktop
argument_list|()
condition|)
return|return
literal|true
return|;
switch|switch
condition|(
operator|(
cast|static_cast
argument_list|<
name|QWSWindowOperationEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
operator|)
operator|->
name|simpleData
operator|.
name|op
condition|)
block|{
case|case
name|QWSWindowOperationEvent
operator|::
name|Show
case|:
name|widget
operator|->
name|show
argument_list|()
expr_stmt|;
break|break;
case|case
name|QWSWindowOperationEvent
operator|::
name|Hide
case|:
name|widget
operator|->
name|hide
argument_list|()
expr_stmt|;
break|break;
case|case
name|QWSWindowOperationEvent
operator|::
name|ShowMaximized
case|:
name|widget
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
break|break;
case|case
name|QWSWindowOperationEvent
operator|::
name|ShowMinimized
case|:
name|widget
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
break|break;
case|case
name|QWSWindowOperationEvent
operator|::
name|ShowNormal
case|:
name|widget
operator|->
name|showNormal
argument_list|()
expr_stmt|;
break|break;
case|case
name|QWSWindowOperationEvent
operator|::
name|Close
case|:
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|close_helper
argument_list|(
name|QWidgetPrivate
operator|::
name|CloseWithSpontaneousEvent
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_QWSEMBEDWIDGET
case|case
name|QWSEvent
operator|::
name|Embed
case|:
name|widget
operator|->
name|translateEmbedEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWSEmbedEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
default|default:
break|break;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qwsEventFilter
name|bool
name|QApplication
operator|::
name|qwsEventFilter
parameter_list|(
name|QWSEvent
modifier|*
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|qwsSetCustomColors
name|void
name|QApplication
operator|::
name|qwsSetCustomColors
parameter_list|(
name|QRgb
modifier|*
name|colorTable
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|numColors
parameter_list|)
block|{
if|if
condition|(
name|start
argument_list|<
literal|0
operator|||
name|start
argument_list|>
literal|39
condition|)
block|{
name|qWarning
argument_list|(
literal|"QApplication::qwsSetCustomColors: start< 0 || start> 39"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|start
operator|+
name|numColors
operator|>
literal|40
condition|)
block|{
name|numColors
operator|=
literal|40
operator|-
name|start
expr_stmt|;
name|qWarning
argument_list|(
literal|"QApplication::qwsSetCustomColors: Too many colors"
argument_list|)
expr_stmt|;
block|}
name|start
operator|+=
literal|216
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numColors
condition|;
name|i
operator|++
control|)
block|{
name|qt_screen
operator|->
name|set
argument_list|(
name|start
operator|+
name|i
argument_list|,
name|qRed
argument_list|(
name|colorTable
index|[
name|i
index|]
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|colorTable
index|[
name|i
index|]
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|colorTable
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MANAGER
end_ifndef
begin_function
DECL|function|qwsDecoration
name|QDecoration
modifier|&
name|QApplication
operator|::
name|qwsDecoration
parameter_list|()
block|{
return|return
operator|*
name|qws_decoration
return|;
block|}
end_function
begin_function
DECL|function|qwsSetDecoration
name|void
name|QApplication
operator|::
name|qwsSetDecoration
parameter_list|(
name|QDecoration
modifier|*
name|dec
parameter_list|)
block|{
if|if
condition|(
name|dec
condition|)
block|{
operator|delete
name|qws_decoration
expr_stmt|;
name|qws_decoration
operator|=
name|dec
expr_stmt|;
name|QWidgetList
name|widgets
init|=
name|topLevelWidgets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|widgets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|widgets
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|isVisible
argument_list|()
operator|&&
name|w
operator|!=
name|desktop
argument_list|()
condition|)
block|{
cast|static_cast
argument_list|<
name|QETWidget
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
operator|->
name|updateRegion
argument_list|()
expr_stmt|;
cast|static_cast
argument_list|<
name|QETWidget
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
operator|->
name|repaintDecoration
argument_list|(
name|desktop
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|isMaximized
argument_list|()
condition|)
name|w
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|qwsSetDecoration
name|QDecoration
modifier|*
name|QApplication
operator|::
name|qwsSetDecoration
parameter_list|(
specifier|const
name|QString
modifier|&
name|decoration
parameter_list|)
block|{
name|QDecoration
modifier|*
name|decore
init|=
name|QDecorationFactory
operator|::
name|create
argument_list|(
name|decoration
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|decore
condition|)
return|return
literal|0
return|;
name|qwsSetDecoration
argument_list|(
name|decore
argument_list|)
expr_stmt|;
return|return
name|decore
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|modalState
name|bool
name|QApplicationPrivate
operator|::
name|modalState
parameter_list|()
block|{
return|return
name|app_do_modal
return|;
block|}
end_function
begin_function
DECL|function|enterModal_sys
name|void
name|QApplicationPrivate
operator|::
name|enterModal_sys
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
operator|!
name|qt_modal_stack
condition|)
name|qt_modal_stack
operator|=
operator|new
name|QWidgetList
expr_stmt|;
name|qt_modal_stack
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|app_do_modal
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|leaveModal_sys
name|void
name|QApplicationPrivate
operator|::
name|leaveModal_sys
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
name|qt_modal_stack
operator|&&
name|qt_modal_stack
operator|->
name|removeAll
argument_list|(
name|widget
argument_list|)
condition|)
block|{
if|if
condition|(
name|qt_modal_stack
operator|->
name|isEmpty
argument_list|()
condition|)
block|{
operator|delete
name|qt_modal_stack
expr_stmt|;
name|qt_modal_stack
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|app_do_modal
operator|=
name|qt_modal_stack
operator|!=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_try_modal
specifier|static
name|bool
name|qt_try_modal
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QWSEvent
modifier|*
name|event
parameter_list|)
block|{
name|QWidget
modifier|*
name|top
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|QApplicationPrivate
operator|::
name|tryModalHelper
argument_list|(
name|widget
argument_list|,
operator|&
name|top
argument_list|)
condition|)
return|return
literal|true
return|;
name|bool
name|block_event
init|=
literal|false
decl_stmt|;
name|bool
name|paint_event
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
condition|)
block|{
case|case
name|QWSEvent
operator|::
name|Focus
case|:
if|if
condition|(
operator|!
cast|static_cast
argument_list|<
name|QWSFocusEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
operator|->
name|simpleData
operator|.
name|get_focus
condition|)
break|break;
comment|// drop through
case|case
name|QWSEvent
operator|::
name|Mouse
case|:
comment|// disallow mouse/key events
case|case
name|QWSEvent
operator|::
name|Key
case|:
name|block_event
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|top
operator|->
name|parentWidget
argument_list|()
operator|==
literal|0
operator|&&
operator|(
name|block_event
operator|||
name|paint_event
operator|)
condition|)
name|top
operator|->
name|raise
argument_list|()
expr_stmt|;
return|return
operator|!
name|block_event
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|openPopupCount
specifier|static
name|int
name|openPopupCount
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|openPopup
name|void
name|QApplicationPrivate
operator|::
name|openPopup
parameter_list|(
name|QWidget
modifier|*
name|popup
parameter_list|)
block|{
name|openPopupCount
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|popupWidgets
condition|)
block|{
comment|// create list
name|popupWidgets
operator|=
operator|new
name|QWidgetList
expr_stmt|;
comment|/* only grab if you are the first/parent popup */
name|QPaintDevice
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|grabMouse
argument_list|(
name|popup
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QPaintDevice
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|grabKeyboard
argument_list|(
name|popup
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|popupGrabOk
operator|=
literal|true
expr_stmt|;
block|}
name|popupWidgets
operator|->
name|append
argument_list|(
name|popup
argument_list|)
expr_stmt|;
comment|// add to end of list
comment|// popups are not focus-handled by the window system (the first
comment|// popup grabbed the keyboard), so we have to do that manually: A
comment|// new popup gets the focus
if|if
condition|(
name|popup
operator|->
name|focusWidget
argument_list|()
condition|)
block|{
name|popup
operator|->
name|focusWidget
argument_list|()
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|PopupFocusReason
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|popupWidgets
operator|->
name|count
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// this was the first popup
if|if
condition|(
name|QWidget
modifier|*
name|fw
init|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
condition|)
block|{
name|QFocusEvent
name|e
argument_list|(
name|QEvent
operator|::
name|FocusOut
argument_list|,
name|Qt
operator|::
name|PopupFocusReason
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|fw
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|closePopup
name|void
name|QApplicationPrivate
operator|::
name|closePopup
parameter_list|(
name|QWidget
modifier|*
name|popup
parameter_list|)
block|{
if|if
condition|(
operator|!
name|popupWidgets
condition|)
return|return;
name|popupWidgets
operator|->
name|removeAll
argument_list|(
name|popup
argument_list|)
expr_stmt|;
if|if
condition|(
name|popup
operator|==
name|popupOfPopupButtonFocus
condition|)
block|{
name|popupButtonFocus
operator|=
literal|0
expr_stmt|;
name|popupOfPopupButtonFocus
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|popupWidgets
operator|->
name|count
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// this was the last popup
name|popupCloseDownMode
operator|=
literal|true
expr_stmt|;
comment|// control mouse events
operator|delete
name|popupWidgets
expr_stmt|;
name|popupWidgets
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|popupGrabOk
condition|)
block|{
comment|// grabbing not disabled
name|QPaintDevice
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|grabMouse
argument_list|(
name|popup
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QPaintDevice
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|grabKeyboard
argument_list|(
name|popup
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|popupGrabOk
operator|=
literal|false
expr_stmt|;
comment|// XXX ungrab keyboard
block|}
if|if
condition|(
name|active_window
condition|)
block|{
if|if
condition|(
name|QWidget
modifier|*
name|fw
init|=
name|active_window
operator|->
name|focusWidget
argument_list|()
condition|)
block|{
if|if
condition|(
name|fw
operator|!=
name|QApplication
operator|::
name|focusWidget
argument_list|()
condition|)
block|{
name|fw
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|PopupFocusReason
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QFocusEvent
name|e
argument_list|(
name|QEvent
operator|::
name|FocusIn
argument_list|,
name|Qt
operator|::
name|PopupFocusReason
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|fw
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// popups are not focus-handled by the window system (the
comment|// first popup grabbed the keyboard), so we have to do that
comment|// manually: A popup was closed, so the previous popup gets
comment|// the focus.
name|QWidget
modifier|*
name|aw
init|=
name|popupWidgets
operator|->
name|last
argument_list|()
decl_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|fw
init|=
name|aw
operator|->
name|focusWidget
argument_list|()
condition|)
name|fw
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|PopupFocusReason
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*****************************************************************************   Event translation; translates FB events to Qt events  *****************************************************************************/
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Mouse event translation
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// FB doesn't give mouse double click events, so we generate them by
end_comment
begin_comment
comment|// comparing window, time and position between two mouse press events.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Needed for QCursor::pos
end_comment
begin_decl_stmt
DECL|variable|AnyButton
specifier|static
specifier|const
name|int
name|AnyButton
init|=
operator|(
name|Qt
operator|::
name|LeftButton
operator||
name|Qt
operator|::
name|MidButton
operator||
name|Qt
operator|::
name|RightButton
operator|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// Wheel event translation
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|translateWheelEvent
name|bool
name|QETWidget
operator|::
name|translateWheelEvent
parameter_list|(
specifier|const
name|QWSMouseEvent
modifier|*
name|me
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_WHEELEVENT
name|Q_UNUSED
argument_list|(
name|me
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
else|#
directive|else
specifier|const
name|QWSMouseEvent
operator|::
name|SimpleData
modifier|&
name|mouse
init|=
name|me
operator|->
name|simpleData
decl_stmt|;
comment|// Figure out wheeling direction:
comment|//    Horizontal wheel w/o Alt
comment|// OR Vertical wheel   w/  Alt  ==> Horizontal wheeling
comment|//    ..all other permutations  ==> Vertical wheeling
name|int
name|axis
init|=
name|mouse
operator|.
name|delta
operator|/
literal|120
decl_stmt|;
comment|// WHEEL_DELTA?
name|Qt
operator|::
name|Orientation
name|orient
init|=
operator|(
operator|(
name|axis
operator|==
literal|2
operator|||
name|axis
operator|==
operator|-
literal|2
operator|)
operator|&&
operator|(
operator|(
name|mouse
operator|.
name|state
operator|&
name|Qt
operator|::
name|AltModifier
operator|)
operator|==
literal|0
operator|)
operator|)
operator|||
operator|(
operator|(
name|axis
operator|==
literal|1
operator|||
name|axis
operator|==
operator|-
literal|1
operator|)
operator|&&
name|mouse
operator|.
name|state
operator|&
name|Qt
operator|::
name|AltModifier
operator|)
condition|?
name|Qt
operator|::
name|Horizontal
else|:
name|Qt
operator|::
name|Vertical
decl_stmt|;
name|QPoint
name|mousePoint
init|=
name|QPoint
argument_list|(
name|mouse
operator|.
name|x_root
argument_list|,
name|mouse
operator|.
name|y_root
argument_list|)
decl_stmt|;
comment|// send the event to the widget or its ancestors
name|QWidget
modifier|*
name|popup
init|=
name|qApp
operator|->
name|activePopupWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|popup
operator|&&
name|window
argument_list|()
operator|!=
name|popup
condition|)
name|popup
operator|->
name|close
argument_list|()
expr_stmt|;
name|QWheelEvent
name|we
argument_list|(
name|mapFromGlobal
argument_list|(
name|mousePoint
argument_list|)
argument_list|,
name|mousePoint
argument_list|,
name|mouse
operator|.
name|delta
argument_list|,
name|Qt
operator|::
name|MouseButtons
argument_list|(
name|mouse
operator|.
name|state
operator|&
name|Qt
operator|::
name|MouseButtonMask
argument_list|)
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
argument_list|(
name|mouse
operator|.
name|state
operator|&
name|Qt
operator|::
name|KeyboardModifierMask
argument_list|)
argument_list|,
name|orient
argument_list|)
decl_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|this
argument_list|,
operator|&
name|we
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// send the event to the widget that has the focus or its ancestors, if different
name|QWidget
modifier|*
name|w
init|=
name|this
decl_stmt|;
if|if
condition|(
name|w
operator|!=
name|qApp
operator|->
name|focusWidget
argument_list|()
operator|&&
operator|(
name|w
operator|=
name|qApp
operator|->
name|focusWidget
argument_list|()
operator|)
condition|)
block|{
name|QWidget
modifier|*
name|popup
init|=
name|qApp
operator|->
name|activePopupWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|popup
operator|&&
name|w
operator|!=
name|popup
condition|)
name|popup
operator|->
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|w
argument_list|,
operator|&
name|we
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|translateMouseEvent
name|bool
name|QETWidget
operator|::
name|translateMouseEvent
parameter_list|(
specifier|const
name|QWSMouseEvent
modifier|*
name|event
parameter_list|,
name|int
name|prevstate
parameter_list|)
block|{
specifier|static
name|bool
name|manualGrab
init|=
literal|false
decl_stmt|;
name|QPoint
name|pos
decl_stmt|;
name|QPoint
name|globalPos
decl_stmt|;
name|int
name|button
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|sm_blockUserInput
condition|)
comment|// block user interaction during session management
return|return
literal|true
return|;
specifier|const
name|QWSMouseEvent
operator|::
name|SimpleData
modifier|&
name|mouse
init|=
name|event
operator|->
name|simpleData
decl_stmt|;
name|pos
operator|=
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
name|mouse
operator|.
name|x_root
argument_list|,
name|mouse
operator|.
name|y_root
argument_list|)
argument_list|)
expr_stmt|;
comment|//     if (qt_last_x) {
comment|//         *qt_last_x=mouse.x_root;
comment|//         *qt_last_y=mouse.y_root;
comment|//     }
name|globalPos
operator|.
name|rx
argument_list|()
operator|=
name|mouse
operator|.
name|x_root
expr_stmt|;
name|globalPos
operator|.
name|ry
argument_list|()
operator|=
name|mouse
operator|.
name|y_root
expr_stmt|;
name|QEvent
operator|::
name|Type
name|type
init|=
name|QEvent
operator|::
name|None
decl_stmt|;
name|Qt
operator|::
name|MouseButtons
name|buttonstate
init|=
name|Qt
operator|::
name|MouseButtons
argument_list|(
name|mouse
operator|.
name|state
operator|&
name|Qt
operator|::
name|MouseButtonMask
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|keystate
init|=
name|Qt
operator|::
name|KeyboardModifiers
argument_list|(
name|mouse
operator|.
name|state
operator|&
name|Qt
operator|::
name|KeyboardModifierMask
argument_list|)
decl_stmt|;
if|if
condition|(
name|mouse
operator|.
name|state
operator|==
name|prevstate
condition|)
block|{
comment|// mouse move
name|type
operator|=
name|QEvent
operator|::
name|MouseMove
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|mouse
operator|.
name|state
operator|&
name|AnyButton
operator|)
operator|!=
operator|(
name|prevstate
operator|&
name|AnyButton
operator|)
condition|)
block|{
name|Qt
operator|::
name|MouseButtons
name|current_buttons
init|=
name|Qt
operator|::
name|MouseButtons
argument_list|(
name|prevstate
operator|&
name|Qt
operator|::
name|MouseButtonMask
argument_list|)
decl_stmt|;
for|for
control|(
name|button
operator|=
name|Qt
operator|::
name|LeftButton
init|;
operator|!
name|type
operator|&&
name|button
operator|<=
name|Qt
operator|::
name|MidButton
condition|;
name|button
operator|<<=
literal|1
control|)
block|{
if|if
condition|(
operator|(
name|mouse
operator|.
name|state
operator|&
name|button
operator|)
operator|!=
operator|(
name|current_buttons
operator|&
name|button
operator|)
condition|)
block|{
comment|// button press or release
name|current_buttons
operator|=
name|Qt
operator|::
name|MouseButtons
argument_list|(
name|current_buttons
operator|^
name|button
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_INPUTMETHODS
comment|//############ We used to do a QInputContext::reset(oldFocus);
comment|// when we changed the focus widget. See change 93389 for where the
comment|// focus code went. The IM code was (after testing for ClickToFocus):
comment|//if (mouse.state&button&& w != QInputContext::microFocusWidget()) //button press
comment|//        QInputContext::reset(oldFocus);
endif|#
directive|endif
if|if
condition|(
name|mouse
operator|.
name|state
operator|&
name|button
condition|)
block|{
comment|//button press
name|qt_button_down
operator|=
name|childAt
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qt_button_down
condition|)
name|qt_button_down
operator|=
name|this
expr_stmt|;
if|if
condition|(
comment|/*XXX mouseActWindow == this&&*/
name|mouseButtonPressed
operator|==
name|button
operator|&&
name|long
argument_list|(
name|mouse
operator|.
name|time
argument_list|)
operator|-
name|long
argument_list|(
name|mouseButtonPressTime
argument_list|)
operator|<
name|QApplication
operator|::
name|doubleClickInterval
argument_list|()
operator|&&
name|qAbs
argument_list|(
name|mouse
operator|.
name|x_root
operator|-
name|mouseXPos
argument_list|)
operator|<
name|mouse_double_click_distance
operator|&&
name|qAbs
argument_list|(
name|mouse
operator|.
name|y_root
operator|-
name|mouseYPos
argument_list|)
operator|<
name|mouse_double_click_distance
condition|)
block|{
name|type
operator|=
name|QEvent
operator|::
name|MouseButtonDblClick
expr_stmt|;
name|mouseButtonPressTime
operator|-=
literal|2000
expr_stmt|;
comment|// no double-click next time
block|}
else|else
block|{
name|type
operator|=
name|QEvent
operator|::
name|MouseButtonPress
expr_stmt|;
name|mouseButtonPressTime
operator|=
name|mouse
operator|.
name|time
expr_stmt|;
block|}
name|mouseButtonPressed
operator|=
name|button
expr_stmt|;
comment|// save event params for
name|mouseXPos
operator|=
name|globalPos
operator|.
name|x
argument_list|()
expr_stmt|;
comment|// future double click tests
name|mouseYPos
operator|=
name|globalPos
operator|.
name|y
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// mouse button released
if|if
condition|(
name|manualGrab
condition|)
block|{
comment|// release manual grab
name|manualGrab
operator|=
literal|false
expr_stmt|;
comment|// XXX XUngrabPointer(x11Display(), CurrentTime);
block|}
name|type
operator|=
name|QEvent
operator|::
name|MouseButtonRelease
expr_stmt|;
block|}
block|}
block|}
name|button
operator|>>=
literal|1
expr_stmt|;
block|}
comment|//XXX mouseActWindow = winId();                        // save some event params
if|if
condition|(
name|type
operator|==
literal|0
condition|)
block|{
comment|// event consumed
return|return
literal|false
return|;
comment|//EXIT in the normal case
block|}
if|if
condition|(
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|inPopupMode
argument_list|()
condition|)
block|{
comment|// in popup mode
name|QWidget
modifier|*
name|popup
init|=
name|qApp
operator|->
name|activePopupWidget
argument_list|()
decl_stmt|;
comment|// in X11, this would be the window we are over.
comment|// in QWS this is the top level popup.  to allow mouse
comment|// events to other widgets, need to go through qApp->QApplicationPrivate::popupWidgets.
name|QSize
name|s
argument_list|(
name|qt_screen
operator|->
name|width
argument_list|()
argument_list|,
name|qt_screen
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|->
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|->
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
operator|)
operator|&&
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|localAllocatedRegion
argument_list|()
operator|.
name|contains
argument_list|(
name|globalPos
operator|-
name|w
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|)
condition|)
block|{
name|popup
operator|=
name|w
expr_stmt|;
break|break;
block|}
block|}
name|pos
operator|=
name|popup
operator|->
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
expr_stmt|;
name|bool
name|releaseAfter
init|=
literal|false
decl_stmt|;
name|QWidget
modifier|*
name|popupChild
init|=
name|popup
operator|->
name|childAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|popupTarget
init|=
name|popupChild
condition|?
name|popupChild
else|:
name|popup
decl_stmt|;
if|if
condition|(
name|popup
operator|!=
name|popupOfPopupButtonFocus
condition|)
block|{
name|popupButtonFocus
operator|=
literal|0
expr_stmt|;
name|popupOfPopupButtonFocus
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|popupTarget
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
comment|//EXIT special case
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|MouseButtonDblClick
case|:
name|popupButtonFocus
operator|=
name|popupChild
expr_stmt|;
name|popupOfPopupButtonFocus
operator|=
name|popup
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
name|releaseAfter
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
break|break;
comment|// nothing for mouse move
block|}
name|int
name|oldOpenPopupCount
init|=
name|openPopupCount
decl_stmt|;
if|if
condition|(
name|popupButtonFocus
condition|)
block|{
name|QMouseEvent
name|e
argument_list|(
name|type
argument_list|,
name|popupButtonFocus
operator|->
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
argument_list|,
name|globalPos
argument_list|,
name|Qt
operator|::
name|MouseButton
argument_list|(
name|button
argument_list|)
argument_list|,
name|buttonstate
argument_list|,
name|keystate
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|popupButtonFocus
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|releaseAfter
condition|)
block|{
name|popupButtonFocus
operator|=
literal|0
expr_stmt|;
name|popupOfPopupButtonFocus
operator|=
literal|0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|popupChild
condition|)
block|{
name|QMouseEvent
name|e
argument_list|(
name|type
argument_list|,
name|popupChild
operator|->
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
argument_list|,
name|globalPos
argument_list|,
name|Qt
operator|::
name|MouseButton
argument_list|(
name|button
argument_list|)
argument_list|,
name|buttonstate
argument_list|,
name|keystate
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|popupChild
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QMouseEvent
name|e
argument_list|(
name|type
argument_list|,
name|pos
argument_list|,
name|globalPos
argument_list|,
name|Qt
operator|::
name|MouseButton
argument_list|(
name|button
argument_list|)
argument_list|,
name|buttonstate
argument_list|,
name|keystate
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|popupChild
condition|?
name|popupChild
else|:
name|popup
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonPress
operator|&&
name|button
operator|==
name|Qt
operator|::
name|RightButton
operator|&&
operator|(
name|openPopupCount
operator|==
name|oldOpenPopupCount
operator|)
condition|)
block|{
name|QWidget
modifier|*
name|popupEvent
init|=
name|popup
decl_stmt|;
if|if
condition|(
name|popupButtonFocus
condition|)
name|popupEvent
operator|=
name|popupButtonFocus
expr_stmt|;
elseif|else
if|if
condition|(
name|popupChild
condition|)
name|popupEvent
operator|=
name|popupChild
expr_stmt|;
name|QContextMenuEvent
name|e
argument_list|(
name|QContextMenuEvent
operator|::
name|Mouse
argument_list|,
name|pos
argument_list|,
name|globalPos
argument_list|,
name|keystate
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|popupEvent
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_CONTEXTMENU
if|if
condition|(
name|releaseAfter
condition|)
name|qt_button_down
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|//qApp not in popup mode
name|QWidget
modifier|*
name|widget
init|=
name|this
decl_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|&&
name|qt_button_down
condition|)
name|w
operator|=
name|qt_button_down
expr_stmt|;
if|if
condition|(
name|w
operator|&&
name|w
operator|!=
name|this
condition|)
block|{
name|widget
operator|=
name|w
expr_stmt|;
name|pos
operator|=
name|mapToGlobal
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|pos
operator|=
name|w
operator|->
name|mapFromGlobal
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|popupCloseDownMode
condition|)
block|{
name|popupCloseDownMode
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|(
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
operator|)
condition|)
comment|// ignore replayed event
return|return
literal|true
return|;
comment|//EXIT
block|}
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|leaveAfterRelease
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonRelease
operator|&&
operator|(
name|mouse
operator|.
name|state
operator|&
operator|(
operator|~
name|button
operator|)
operator|&
operator|(
name|Qt
operator|::
name|LeftButton
operator||
name|Qt
operator|::
name|MidButton
operator||
name|Qt
operator|::
name|RightButton
operator|)
operator|)
operator|==
literal|0
condition|)
block|{
comment|// Button released outside the widget -> leave the widget after the
comment|// release event has been delivered.
if|if
condition|(
name|widget
operator|==
name|qt_button_down
operator|&&
operator|(
name|pos
operator|.
name|x
argument_list|()
operator|<
literal|0
operator|||
name|pos
operator|.
name|y
argument_list|()
operator|<
literal|0
operator|)
condition|)
name|leaveAfterRelease
operator|=
name|qt_button_down
expr_stmt|;
name|qt_button_down
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|oldOpenPopupCount
init|=
name|openPopupCount
decl_stmt|;
name|QMouseEvent
name|e
argument_list|(
name|type
argument_list|,
name|pos
argument_list|,
name|globalPos
argument_list|,
name|Qt
operator|::
name|MouseButton
argument_list|(
name|button
argument_list|)
argument_list|,
name|buttonstate
argument_list|,
name|keystate
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_MANAGER
if|if
condition|(
name|widget
operator|->
name|isWindow
argument_list|()
operator|&&
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
operator|->
name|qwsManager
operator|&&
operator|(
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
operator|->
name|qwsManager
operator|->
name|region
argument_list|()
operator|.
name|contains
argument_list|(
name|globalPos
argument_list|)
operator|||
name|QWSManager
operator|::
name|grabbedMouse
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
operator|(
operator|*
name|mouseInWidget
operator|)
condition|)
block|{
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
literal|0
argument_list|,
operator|*
name|mouseInWidget
argument_list|)
expr_stmt|;
operator|(
operator|*
name|mouseInWidget
operator|)
operator|=
literal|0
expr_stmt|;
block|}
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
operator|->
name|qwsManager
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|last_manager
operator|=
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
operator|->
name|qwsManager
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
if|if
condition|(
name|widget
operator|!=
operator|(
operator|*
name|mouseInWidget
operator|)
condition|)
block|{
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
name|widget
argument_list|,
operator|*
name|mouseInWidget
argument_list|)
expr_stmt|;
operator|(
operator|*
name|mouseInWidget
operator|)
operator|=
name|widget
expr_stmt|;
name|qt_last_mouse_receiver
operator|=
name|widget
expr_stmt|;
block|}
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|leaveAfterRelease
operator|&&
operator|!
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
condition|)
block|{
operator|*
name|mouseInWidget
operator|=
name|QApplication
operator|::
name|widgetAt
argument_list|(
name|globalPos
argument_list|)
expr_stmt|;
name|qt_last_mouse_receiver
operator|=
operator|*
name|mouseInWidget
expr_stmt|;
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
operator|*
name|mouseInWidget
argument_list|,
name|leaveAfterRelease
argument_list|)
expr_stmt|;
name|leaveAfterRelease
operator|=
literal|0
expr_stmt|;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonPress
operator|&&
name|button
operator|==
name|Qt
operator|::
name|RightButton
operator|&&
operator|(
name|openPopupCount
operator|==
name|oldOpenPopupCount
operator|)
condition|)
block|{
name|QContextMenuEvent
name|e
argument_list|(
name|QContextMenuEvent
operator|::
name|Mouse
argument_list|,
name|pos
argument_list|,
name|globalPos
argument_list|,
name|keystate
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_CONTEXTMENU
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|translateKeyEvent
name|bool
name|QETWidget
operator|::
name|translateKeyEvent
parameter_list|(
specifier|const
name|QWSKeyEvent
modifier|*
name|event
parameter_list|,
name|bool
name|grab
parameter_list|)
comment|/* grab is used in the #ifdef */
block|{
name|int
name|code
init|=
operator|-
literal|1
decl_stmt|;
comment|//### Qt assumes keyboard state is state *before*, while QWS uses state after the event
specifier|static
name|Qt
operator|::
name|KeyboardModifiers
name|oldstate
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|state
init|=
name|oldstate
decl_stmt|;
name|oldstate
operator|=
name|event
operator|->
name|simpleData
operator|.
name|modifiers
expr_stmt|;
if|if
condition|(
name|sm_blockUserInput
condition|)
comment|// block user interaction during session management
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|isEnabled
argument_list|()
condition|)
return|return
literal|true
return|;
name|QEvent
operator|::
name|Type
name|type
init|=
name|event
operator|->
name|simpleData
operator|.
name|is_press
condition|?
name|QEvent
operator|::
name|KeyPress
else|:
name|QEvent
operator|::
name|KeyRelease
decl_stmt|;
name|bool
name|autor
init|=
name|event
operator|->
name|simpleData
operator|.
name|is_auto_repeat
decl_stmt|;
name|QString
name|text
decl_stmt|;
name|char
name|ascii
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|simpleData
operator|.
name|unicode
condition|)
block|{
name|QChar
name|ch
argument_list|(
name|event
operator|->
name|simpleData
operator|.
name|unicode
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|unicode
argument_list|()
operator|!=
literal|0xffff
condition|)
name|text
operator|+=
name|ch
expr_stmt|;
name|ascii
operator|=
name|ch
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
block|}
name|code
operator|=
name|event
operator|->
name|simpleData
operator|.
name|keycode
expr_stmt|;
if|#
directive|if
name|defined
name|QT3_SUPPORT
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_SHORTCUT
argument_list|)
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|KeyPress
operator|&&
operator|!
name|grab
operator|&&
cast|static_cast
argument_list|<
name|QApplicationPrivate
operator|*
argument_list|>
argument_list|(
name|qApp
operator|->
name|d_ptr
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|use_compat
argument_list|()
condition|)
block|{
comment|// send accel events if the keyboard is not grabbed
name|QKeyEvent
name|a
argument_list|(
name|type
argument_list|,
name|code
argument_list|,
name|state
argument_list|,
name|text
argument_list|,
name|autor
argument_list|,
name|int
argument_list|(
name|text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
cast|static_cast
argument_list|<
name|QApplicationPrivate
operator|*
argument_list|>
argument_list|(
name|qApp
operator|->
name|d_ptr
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|qt_tryAccelEvent
argument_list|(
name|this
argument_list|,
operator|&
name|a
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|grab
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
operator|&&
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_KeyCompression
argument_list|)
condition|)
block|{
comment|// the widget wants key compression so it gets it
comment|// XXX not implemented
block|}
name|QKeyEvent
name|e
argument_list|(
name|type
argument_list|,
name|code
argument_list|,
name|state
argument_list|,
name|text
argument_list|,
name|autor
argument_list|,
name|int
argument_list|(
name|text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|this
argument_list|,
operator|&
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|translateRegionEvent
name|bool
name|QETWidget
operator|::
name|translateRegionEvent
parameter_list|(
specifier|const
name|QWSRegionEvent
modifier|*
name|event
parameter_list|)
block|{
name|QWSWindowSurface
modifier|*
name|surface
init|=
cast|static_cast
argument_list|<
name|QWSWindowSurface
operator|*
argument_list|>
argument_list|(
name|windowSurface
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|QRegion
name|region
decl_stmt|;
name|region
operator|.
name|setRects
argument_list|(
name|event
operator|->
name|rectangles
argument_list|,
name|event
operator|->
name|simpleData
operator|.
name|nrectangles
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|event
operator|->
name|simpleData
operator|.
name|type
condition|)
block|{
case|case
name|QWSRegionEvent
operator|::
name|Allocation
case|:
name|region
operator|.
name|translate
argument_list|(
operator|-
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|surface
operator|->
name|setClipRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
break|break;
ifdef|#
directive|ifdef
name|QT_QWS_CLIENTBLIT
case|case
name|QWSRegionEvent
operator|::
name|DirectPaint
case|:
name|surface
operator|->
name|setDirectRegion
argument_list|(
name|region
argument_list|,
name|event
operator|->
name|simpleData
operator|.
name|id
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
default|default:
break|break;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWSEMBEDWIDGET
end_ifndef
begin_function
DECL|function|translateEmbedEvent
name|void
name|QETWidget
operator|::
name|translateEmbedEvent
parameter_list|(
specifier|const
name|QWSEmbedEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|simpleData
operator|.
name|type
operator||
name|QWSEmbedEvent
operator|::
name|Region
condition|)
block|{
specifier|const
name|QRegion
name|region
init|=
name|event
operator|->
name|region
decl_stmt|;
name|setGeometry
argument_list|(
name|region
operator|.
name|boundingRect
argument_list|()
argument_list|)
expr_stmt|;
name|setVisible
argument_list|(
operator|!
name|region
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWSEMBEDWIDGET
end_comment
begin_function
DECL|function|repaintDecoration
name|void
name|QETWidget
operator|::
name|repaintDecoration
parameter_list|(
name|QRegion
name|r
parameter_list|,
name|bool
name|post
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|post
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_QWS_MANAGER
name|Q_UNUSED
argument_list|(
name|r
argument_list|)
expr_stmt|;
else|#
directive|else
comment|//please note that qwsManager is a QObject, not a QWidget.
comment|//therefore, normal ways of painting do not work.
comment|// However, it does listen to paint events.
name|Q_D
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|isWindow
argument_list|()
operator|&&
name|d
operator|->
name|topData
argument_list|()
operator|->
name|qwsManager
operator|&&
name|isVisible
argument_list|()
condition|)
block|{
name|QWSManager
modifier|*
name|manager
init|=
name|d
operator|->
name|topData
argument_list|()
operator|->
name|qwsManager
decl_stmt|;
name|r
operator|&=
name|manager
operator|->
name|region
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
name|manager
operator|->
name|repaintRegion
argument_list|(
name|QDecoration
operator|::
name|All
argument_list|,
name|QDecoration
operator|::
name|Normal
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|updateRegion
name|void
name|QETWidget
operator|::
name|updateRegion
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|QTLWExtra
modifier|*
name|topextra
init|=
name|d
operator|->
name|maybeTopData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|topextra
condition|)
return|return;
name|QRegion
name|myregion
init|=
name|d
operator|->
name|localRequestedRegion
argument_list|()
decl_stmt|;
name|myregion
operator|.
name|translate
argument_list|(
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_MANAGER
name|QWSManager
modifier|*
name|manager
init|=
name|topextra
operator|->
name|qwsManager
decl_stmt|;
if|if
condition|(
name|manager
condition|)
name|myregion
operator|+=
name|manager
operator|->
name|region
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QRect
name|br
argument_list|(
name|myregion
operator|.
name|boundingRect
argument_list|()
argument_list|)
decl_stmt|;
name|topextra
operator|->
name|frameStrut
operator|.
name|setCoords
argument_list|(
name|d
operator|->
name|data
operator|.
name|crect
operator|.
name|x
argument_list|()
operator|-
name|br
operator|.
name|x
argument_list|()
argument_list|,
name|d
operator|->
name|data
operator|.
name|crect
operator|.
name|y
argument_list|()
operator|-
name|br
operator|.
name|y
argument_list|()
argument_list|,
name|br
operator|.
name|right
argument_list|()
operator|-
name|d
operator|->
name|data
operator|.
name|crect
operator|.
name|right
argument_list|()
argument_list|,
name|br
operator|.
name|bottom
argument_list|()
operator|-
name|d
operator|->
name|data
operator|.
name|crect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCursorFlashTime
name|void
name|QApplication
operator|::
name|setCursorFlashTime
parameter_list|(
name|int
name|msecs
parameter_list|)
block|{
name|QApplicationPrivate
operator|::
name|cursor_flash_time
operator|=
name|msecs
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorFlashTime
name|int
name|QApplication
operator|::
name|cursorFlashTime
parameter_list|()
block|{
return|return
name|QApplicationPrivate
operator|::
name|cursor_flash_time
return|;
block|}
end_function
begin_function
DECL|function|setDoubleClickInterval
name|void
name|QApplication
operator|::
name|setDoubleClickInterval
parameter_list|(
name|int
name|ms
parameter_list|)
block|{
name|QApplicationPrivate
operator|::
name|mouse_double_click_time
operator|=
name|ms
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doubleClickInterval
name|int
name|QApplication
operator|::
name|doubleClickInterval
parameter_list|()
block|{
return|return
name|QApplicationPrivate
operator|::
name|mouse_double_click_time
return|;
block|}
end_function
begin_function
DECL|function|setKeyboardInputInterval
name|void
name|QApplication
operator|::
name|setKeyboardInputInterval
parameter_list|(
name|int
name|ms
parameter_list|)
block|{
name|QApplicationPrivate
operator|::
name|keyboard_input_time
operator|=
name|ms
expr_stmt|;
block|}
end_function
begin_function
DECL|function|keyboardInputInterval
name|int
name|QApplication
operator|::
name|keyboardInputInterval
parameter_list|()
block|{
return|return
name|QApplicationPrivate
operator|::
name|keyboard_input_time
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
end_ifndef
begin_function
DECL|function|setWheelScrollLines
name|void
name|QApplication
operator|::
name|setWheelScrollLines
parameter_list|(
name|int
name|lines
parameter_list|)
block|{
name|QApplicationPrivate
operator|::
name|wheel_scroll_lines
operator|=
name|lines
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wheelScrollLines
name|int
name|QApplication
operator|::
name|wheelScrollLines
parameter_list|()
block|{
return|return
name|QApplicationPrivate
operator|::
name|wheel_scroll_lines
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setEffectEnabled
name|void
name|QApplication
operator|::
name|setEffectEnabled
parameter_list|(
name|Qt
operator|::
name|UIEffect
name|effect
parameter_list|,
name|bool
name|enable
parameter_list|)
block|{
switch|switch
condition|(
name|effect
condition|)
block|{
case|case
name|Qt
operator|::
name|UI_AnimateMenu
case|:
name|QApplicationPrivate
operator|::
name|animate_menu
operator|=
name|enable
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_FadeMenu
case|:
if|if
condition|(
name|enable
condition|)
name|QApplicationPrivate
operator|::
name|animate_menu
operator|=
literal|true
expr_stmt|;
name|QApplicationPrivate
operator|::
name|fade_menu
operator|=
name|enable
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_AnimateCombo
case|:
name|QApplicationPrivate
operator|::
name|animate_combo
operator|=
name|enable
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_AnimateTooltip
case|:
name|QApplicationPrivate
operator|::
name|animate_tooltip
operator|=
name|enable
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_FadeTooltip
case|:
if|if
condition|(
name|enable
condition|)
name|QApplicationPrivate
operator|::
name|animate_tooltip
operator|=
literal|true
expr_stmt|;
name|QApplicationPrivate
operator|::
name|fade_tooltip
operator|=
name|enable
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_AnimateToolBox
case|:
name|QApplicationPrivate
operator|::
name|animate_toolbox
operator|=
name|enable
expr_stmt|;
break|break;
default|default:
name|QApplicationPrivate
operator|::
name|animate_ui
operator|=
name|enable
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|isEffectEnabled
name|bool
name|QApplication
operator|::
name|isEffectEnabled
parameter_list|(
name|Qt
operator|::
name|UIEffect
name|effect
parameter_list|)
block|{
if|if
condition|(
name|QColormap
operator|::
name|instance
argument_list|()
operator|.
name|depth
argument_list|()
operator|<
literal|16
operator|||
operator|!
name|QApplicationPrivate
operator|::
name|animate_ui
condition|)
return|return
literal|false
return|;
switch|switch
condition|(
name|effect
condition|)
block|{
case|case
name|Qt
operator|::
name|UI_AnimateMenu
case|:
return|return
name|QApplicationPrivate
operator|::
name|animate_menu
return|;
case|case
name|Qt
operator|::
name|UI_FadeMenu
case|:
return|return
name|QApplicationPrivate
operator|::
name|fade_menu
return|;
case|case
name|Qt
operator|::
name|UI_AnimateCombo
case|:
return|return
name|QApplicationPrivate
operator|::
name|animate_combo
return|;
case|case
name|Qt
operator|::
name|UI_AnimateTooltip
case|:
return|return
name|QApplicationPrivate
operator|::
name|animate_tooltip
return|;
case|case
name|Qt
operator|::
name|UI_FadeTooltip
case|:
return|return
name|QApplicationPrivate
operator|::
name|fade_tooltip
return|;
case|case
name|Qt
operator|::
name|UI_AnimateToolBox
case|:
return|return
name|QApplicationPrivate
operator|::
name|animate_toolbox
return|;
default|default:
return|return
name|QApplicationPrivate
operator|::
name|animate_ui
return|;
block|}
block|}
end_function
begin_function
DECL|function|setArgs
name|void
name|QApplication
operator|::
name|setArgs
parameter_list|(
name|int
name|c
parameter_list|,
name|char
modifier|*
modifier|*
name|v
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QApplication
argument_list|)
expr_stmt|;
name|d
operator|->
name|argc
operator|=
name|c
expr_stmt|;
name|d
operator|->
name|argv
operator|=
name|v
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initializeMultitouch_sys
name|void
name|QApplicationPrivate
operator|::
name|initializeMultitouch_sys
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanupMultitouch_sys
name|void
name|QApplicationPrivate
operator|::
name|cleanupMultitouch_sys
parameter_list|()
block|{ }
end_function
begin_comment
comment|/* \internal    This is used to clean up the qws server    in case the QApplication constructor threw an exception */
end_comment
begin_destructor
DECL|function|~QWSServerCleaner
name|QWSServerCleaner
operator|::
name|~
name|QWSServerCleaner
parameter_list|()
block|{
if|if
condition|(
name|qwsServer
operator|&&
name|qws_single_process
condition|)
name|QWSServer
operator|::
name|closedown
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
