begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QGUIGLCONTEXT_P_H
end_ifndef
begin_define
DECL|macro|QGUIGLCONTEXT_P_H
define|#
directive|define
name|QGUIGLCONTEXT_P_H
end_define
begin_include
include|#
directive|include
file|"qopengl.h"
end_include
begin_include
include|#
directive|include
file|"qopenglcontext.h"
end_include
begin_include
include|#
directive|include
file|<private/qobject_p.h>
end_include
begin_include
include|#
directive|include
file|<qmutex.h>
end_include
begin_function
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
parameter_list|(
name|Gui
parameter_list|)
name|class
name|QOpenGLFunctions
decl_stmt|;
DECL|variable|QOpenGLContext
name|class
name|QOpenGLContext
decl_stmt|;
DECL|variable|QOpenGLMultiGroupSharedResource
name|class
name|QOpenGLMultiGroupSharedResource
decl_stmt|;
name|class
name|Q_GUI_EXPORT
name|QOpenGLSharedResource
decl_stmt|{ public:     QOpenGLSharedResource(QOpenGLContextGroup *group
end_function
begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|virtual
operator|~
name|QOpenGLSharedResource
argument_list|()
operator|=
literal|0
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QOpenGLContextGroup
operator|*
name|group
argument_list|()
specifier|const
block|{
return|return
name|m_group
return|;
block|}
end_expr_stmt
begin_comment
comment|// schedule the resource for deletion at an appropriate time
end_comment
begin_function_decl
name|void
name|free
parameter_list|()
function_decl|;
end_function_decl
begin_label
name|protected
label|:
end_label
begin_comment
comment|// the resource's share group no longer exists, invalidate the resource
end_comment
begin_function_decl
name|virtual
name|void
name|invalidateResource
parameter_list|()
init|=
literal|0
function_decl|;
end_function_decl
begin_comment
comment|// a valid context in the group is current, free the resource
end_comment
begin_function_decl
name|virtual
name|void
name|freeResource
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
init|=
literal|0
function_decl|;
end_function_decl
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|QOpenGLContextGroup
modifier|*
name|m_group
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QOpenGLContextGroup
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QOpenGLContextGroupPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QOpenGLMultiGroupSharedResource
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Q_DISABLE_COPY
argument_list|(
name|QOpenGLSharedResource
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
unit|};
name|class
name|Q_GUI_EXPORT
name|QOpenGLSharedResourceGuard
range|:
name|public
name|QOpenGLSharedResource
block|{
name|public
operator|:
typedef|typedef
name|void
function_decl|(
modifier|*
name|FreeResourceFunc
function_decl|)
parameter_list|(
name|QOpenGLFunctions
modifier|*
name|functions
parameter_list|,
name|GLuint
name|id
parameter_list|)
function_decl|;
name|QOpenGLSharedResourceGuard
argument_list|(
argument|QOpenGLContext *context
argument_list|,
argument|GLuint id
argument_list|,
argument|FreeResourceFunc func
argument_list|)
operator|:
name|QOpenGLSharedResource
argument_list|(
name|context
operator|->
name|shareGroup
argument_list|()
argument_list|)
block|,
name|m_id
argument_list|(
name|id
argument_list|)
block|,
name|m_func
argument_list|(
argument|func
argument_list|)
block|{     }
name|GLuint
name|id
argument_list|()
specifier|const
block|{
return|return
name|m_id
return|;
block|}
end_decl_stmt
begin_label
name|protected
label|:
end_label
begin_function
name|void
name|invalidateResource
parameter_list|()
block|{
name|m_id
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function_decl
name|void
name|freeResource
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
function_decl|;
end_function_decl
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|GLuint
name|m_id
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|FreeResourceFunc
name|m_func
decl_stmt|;
end_decl_stmt
begin_decl_stmt
unit|};
name|class
name|Q_GUI_EXPORT
name|QOpenGLContextGroupPrivate
range|:
name|public
name|QObjectPrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
name|QOpenGLContextGroup
argument_list|)
block|;
name|public
operator|:
name|QOpenGLContextGroupPrivate
argument_list|()
operator|:
name|m_context
argument_list|(
literal|0
argument_list|)
block|,
name|m_mutex
argument_list|(
name|QMutex
operator|::
name|Recursive
argument_list|)
block|,
name|m_refs
argument_list|(
literal|0
argument_list|)
block|{     }
name|void
name|addContext
argument_list|(
name|QOpenGLContext
operator|*
name|ctx
argument_list|)
block|;
name|void
name|removeContext
argument_list|(
name|QOpenGLContext
operator|*
name|ctx
argument_list|)
block|;
name|void
name|cleanup
argument_list|()
block|;
name|void
name|deletePendingResources
argument_list|(
name|QOpenGLContext
operator|*
name|ctx
argument_list|)
block|;
name|QOpenGLContext
operator|*
name|m_context
block|;
name|QList
operator|<
name|QOpenGLContext
operator|*
operator|>
name|m_shares
block|;
name|QMutex
name|m_mutex
block|;
name|QHash
operator|<
name|QOpenGLMultiGroupSharedResource
operator|*
block|,
name|QOpenGLSharedResource
operator|*
operator|>
name|m_resources
block|;
name|QAtomicInt
name|m_refs
block|;
name|QList
operator|<
name|QOpenGLSharedResource
operator|*
operator|>
name|m_sharedResources
block|;
name|QList
operator|<
name|QOpenGLSharedResource
operator|*
operator|>
name|m_pendingDeletion
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QOpenGLMultiGroupSharedResource
block|{
name|public
label|:
name|QOpenGLMultiGroupSharedResource
argument_list|()
expr_stmt|;
operator|~
name|QOpenGLMultiGroupSharedResource
argument_list|()
expr_stmt|;
name|void
name|insert
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
parameter_list|,
name|QOpenGLSharedResource
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|cleanup
parameter_list|(
name|QOpenGLContextGroup
modifier|*
name|group
parameter_list|,
name|QOpenGLSharedResource
modifier|*
name|value
parameter_list|)
function_decl|;
name|QOpenGLSharedResource
modifier|*
name|value
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
function_decl|;
name|QList
operator|<
name|QOpenGLSharedResource
operator|*
operator|>
name|resources
argument_list|()
specifier|const
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|T
operator|*
name|value
argument_list|(
argument|QOpenGLContext *context
argument_list|)
block|{
name|QOpenGLContextGroup
operator|*
name|group
operator|=
name|context
operator|->
name|shareGroup
argument_list|()
block|;
name|T
operator|*
name|resource
operator|=
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|group
operator|->
name|d_func
argument_list|()
operator|->
name|m_resources
operator|.
name|value
argument_list|(
name|this
argument_list|,
literal|0
argument_list|)
operator|)
block|;
if|if
condition|(
operator|!
name|resource
condition|)
block|{
name|resource
operator|=
name|new
name|T
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|context
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
return|return
name|resource
return|;
block|}
name|private
label|:
name|QAtomicInt
name|active
decl_stmt|;
name|QList
operator|<
name|QOpenGLContextGroup
operator|*
operator|>
name|m_groups
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
DECL|variable|QPaintEngineEx
name|class
name|QPaintEngineEx
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QOpenGLFunctions
name|class
name|QOpenGLFunctions
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QOpenGLContextPrivate
range|:
name|public
name|QObjectPrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QOpenGLContext
argument_list|)
name|public
operator|:
name|QOpenGLContextPrivate
argument_list|()
operator|:
name|qGLContextHandle
argument_list|(
literal|0
argument_list|)
block|,
name|platformGLContext
argument_list|(
literal|0
argument_list|)
block|,
name|shareContext
argument_list|(
literal|0
argument_list|)
block|,
name|shareGroup
argument_list|(
literal|0
argument_list|)
block|,
name|screen
argument_list|(
literal|0
argument_list|)
block|,
name|surface
argument_list|(
literal|0
argument_list|)
block|,
name|functions
argument_list|(
literal|0
argument_list|)
block|,
name|current_fbo
argument_list|(
literal|0
argument_list|)
block|,
name|default_fbo
argument_list|(
literal|0
argument_list|)
block|,
name|workaround_brokenFBOReadBack
argument_list|(
name|false
argument_list|)
block|,
name|workaround_brokenTexSubImage
argument_list|(
name|false
argument_list|)
block|,
name|active_engine
argument_list|(
literal|0
argument_list|)
block|{     }
name|virtual
operator|~
name|QOpenGLContextPrivate
argument_list|()
block|{
comment|//do not delete the QOpenGLContext handle here as it is deleted in
comment|//QWidgetPrivate::deleteTLSysExtra()
block|}
name|void
operator|*
name|qGLContextHandle
block|;
name|void
argument_list|(
operator|*
name|qGLContextDeleteFunction
argument_list|)
argument_list|(
name|void
operator|*
name|handle
argument_list|)
block|;
name|QSurfaceFormat
name|requestedFormat
block|;
name|QPlatformOpenGLContext
operator|*
name|platformGLContext
block|;
name|QOpenGLContext
operator|*
name|shareContext
block|;
name|QOpenGLContextGroup
operator|*
name|shareGroup
block|;
name|QScreen
operator|*
name|screen
block|;
name|QSurface
operator|*
name|surface
block|;
name|QOpenGLFunctions
operator|*
name|functions
block|;
name|GLuint
name|current_fbo
block|;
name|GLuint
name|default_fbo
block|;
name|bool
name|workaround_brokenFBOReadBack
block|;
name|bool
name|workaround_brokenTexSubImage
block|;
name|QPaintEngineEx
operator|*
name|active_engine
block|;
specifier|static
name|void
name|setCurrentContext
argument_list|(
name|QOpenGLContext
operator|*
name|context
argument_list|)
block|;
name|int
name|maxTextureSize
argument_list|()
specifier|const
block|{
return|return
literal|1024
return|;
block|}
expr|}
block|;
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QGUIGLCONTEXT_P_H
end_comment
end_unit
