begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpoint.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpolygon.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstringbuilder.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QHEXSTRING_P_H
end_ifndef
begin_define
DECL|macro|QHEXSTRING_P_H
define|#
directive|define
name|QHEXSTRING_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
comment|// internal helper. Converts an integer value to an unique string token
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
DECL|struct|HexString
name|HexString
block|{
DECL|function|HexString
specifier|inline
name|HexString
argument_list|(
argument|const T t
argument_list|)
operator|:
name|val
argument_list|(
argument|t
argument_list|)
block|{}
DECL|function|write
specifier|inline
name|void
name|write
argument_list|(
argument|QChar *&dest
argument_list|)
specifier|const
block|{
specifier|const
name|ushort
name|hexChars
index|[]
operator|=
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|}
block|;
specifier|const
name|char
operator|*
name|c
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
operator|&
name|val
operator|)
block|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|T
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
operator|*
name|dest
operator|++
operator|=
name|hexChars
index|[
operator|*
name|c
operator|&
literal|0xf
index|]
expr_stmt|;
operator|*
name|dest
operator|++
operator|=
name|hexChars
index|[
operator|(
operator|*
name|c
operator|&
literal|0xf0
operator|)
operator|>>
literal|4
index|]
expr_stmt|;
operator|++
name|c
expr_stmt|;
block|}
block|}
DECL|member|val
specifier|const
name|T
name|val
expr_stmt|;
end_expr_stmt
begin_comment
unit|};
comment|// specialization to enable fast concatenating of our string tokens to a string
end_comment
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
DECL|struct|T
name|QConcatenable
operator|<
name|HexString
operator|<
name|T
operator|>
expr|>
block|{
DECL|typedef|type
typedef|typedef
name|HexString
operator|<
name|T
operator|>
name|type
expr_stmt|;
block|enum
DECL|enumerator|ExactSize
block|{
name|ExactSize
operator|=
name|true
block|}
expr_stmt|;
end_expr_stmt
begin_decl_stmt
specifier|static
name|int
name|size
argument_list|(
specifier|const
name|HexString
operator|<
name|T
operator|>
operator|&
argument_list|)
block|{
return|return
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|*
literal|2
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|static
specifier|inline
name|void
name|appendTo
argument_list|(
specifier|const
name|HexString
operator|<
name|T
operator|>
operator|&
name|str
argument_list|,
name|QChar
operator|*
operator|&
name|out
argument_list|)
block|{
name|str
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_typedef
DECL|typedef|ConvertTo
typedef|typedef
name|QString
name|ConvertTo
typedef|;
end_typedef
begin_macro
DECL|typedef|ConvertTo
unit|};
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QHEXSTRING_P_H
end_comment
end_unit
