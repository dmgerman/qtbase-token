begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qcursor.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qimage.h"
end_include
begin_include
include|#
directive|include
file|"qhash.h"
end_include
begin_include
include|#
directive|include
file|"qstack.h"
end_include
begin_include
include|#
directive|include
file|"qlayout.h"
end_include
begin_include
include|#
directive|include
file|"qtextcodec.h"
end_include
begin_include
include|#
directive|include
file|"qinputcontext.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qwsdisplay_qws.h"
end_include
begin_include
include|#
directive|include
file|"private/qwsdisplay_qws_p.h"
end_include
begin_include
include|#
directive|include
file|"qscreen_qws.h"
end_include
begin_include
include|#
directive|include
file|"qwsmanager_qws.h"
end_include
begin_include
include|#
directive|include
file|<private/qwsmanager_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qbackingstore_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwindowsurface_qws_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwslock_p.h>
end_include
begin_include
include|#
directive|include
file|"qpaintengine.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qwidget_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|QT_USE_NAMESPACE
specifier|extern
name|int
modifier|*
name|qt_last_x
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
modifier|*
name|qt_last_y
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|WId
name|qt_last_cursor
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|bool
name|qws_overrideCursor
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|QWidget
modifier|*
name|qt_pressGrab
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|QWidget
modifier|*
name|qt_mouseGrb
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|keyboardGrb
specifier|static
name|QWidget
modifier|*
name|keyboardGrb
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|takeLocalId
specifier|static
name|int
name|takeLocalId
parameter_list|()
block|{
specifier|static
name|int
name|n
init|=
operator|-
literal|1000
decl_stmt|;
return|return
operator|--
name|n
return|;
block|}
end_function
begin_class_decl
class_decl|class
name|QWSServer
class_decl|;
end_class_decl
begin_decl_stmt
specifier|extern
name|QWSServer
modifier|*
name|qwsServer
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|isServerProcess
specifier|static
specifier|inline
name|bool
name|isServerProcess
parameter_list|()
block|{
return|return
operator|(
name|qwsServer
operator|!=
literal|0
operator|)
return|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   QWidget member functions  *****************************************************************************/
end_comment
begin_function
DECL|function|create_sys
name|void
name|QWidgetPrivate
operator|::
name|create_sys
parameter_list|(
name|WId
name|window
parameter_list|,
name|bool
name|initializeWindow
parameter_list|,
name|bool
comment|/*destroyOldWindow*/
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|WindowType
name|type
init|=
name|q
operator|->
name|windowType
argument_list|()
decl_stmt|;
comment|// Make sure the WindowTitleHint is on if any of the title bar hints are set
comment|// Note: This might be moved to cross-platform QWidgetPrivate::adjustFlags()
if|if
condition|(
operator|!
operator|(
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|CustomizeWindowHint
operator|)
operator|&&
operator|(
operator|(
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
operator|)
operator|||
operator|(
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
operator|)
operator|||
operator|(
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
operator|||
operator|(
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
operator|||
operator|(
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|WindowCloseButtonHint
operator|)
operator|)
condition|)
block|{
name|data
operator|.
name|window_flags
operator||=
name|Qt
operator|::
name|WindowTitleHint
expr_stmt|;
block|}
comment|// Decoration plugins on QWS don't support switching on the close button on its own
if|if
condition|(
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|WindowCloseButtonHint
condition|)
name|data
operator|.
name|window_flags
operator||=
name|Qt
operator|::
name|WindowSystemMenuHint
expr_stmt|;
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|data
operator|.
name|window_flags
decl_stmt|;
name|data
operator|.
name|alloc_region_index
operator|=
operator|-
literal|1
expr_stmt|;
comment|// we don't have a "Drawer" window type
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|Drawer
condition|)
block|{
name|type
operator|=
name|Qt
operator|::
name|Widget
expr_stmt|;
name|flags
operator|&=
operator|~
name|Qt
operator|::
name|WindowType_Mask
expr_stmt|;
block|}
name|bool
name|topLevel
init|=
operator|(
name|flags
operator|&
name|Qt
operator|::
name|Window
operator|)
decl_stmt|;
name|bool
name|popup
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Popup
operator|)
decl_stmt|;
name|bool
name|dialog
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Dialog
operator|||
name|type
operator|==
name|Qt
operator|::
name|Sheet
operator|||
operator|(
name|flags
operator|&
name|Qt
operator|::
name|MSWindowsFixedSizeDialogHint
operator|)
operator|)
decl_stmt|;
name|bool
name|desktop
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Desktop
operator|)
decl_stmt|;
name|bool
name|tool
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Tool
operator|||
name|type
operator|==
name|Qt
operator|::
name|SplashScreen
operator|||
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_WARNING_OUTPUT
specifier|static
name|bool
name|toolWarningShown
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|toolWarningShown
operator|&&
name|type
operator|==
name|Qt
operator|::
name|Tool
operator|&&
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Qt for Embedded Linux "
name|QT_VERSION_STR
literal|" does not support tool windows with frames.\n"
literal|"This behavior will change in a later release. To ensure compatibility with\n"
literal|"future versions, use (Qt::Tool | Qt::FramelessWindowHint)."
argument_list|)
expr_stmt|;
name|toolWarningShown
operator|=
literal|true
expr_stmt|;
block|}
endif|#
directive|endif
name|WId
name|id
decl_stmt|;
name|QWSDisplay
modifier|*
name|dpy
init|=
name|QWidget
operator|::
name|qwsDisplay
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|window
condition|)
comment|// always initialize
name|initializeWindow
operator|=
literal|true
expr_stmt|;
comment|// use the size of the primary screen to determine the default window size
name|QList
argument_list|<
name|QScreen
modifier|*
argument_list|>
name|screens
init|=
name|qt_screen
operator|->
name|subScreens
argument_list|()
decl_stmt|;
if|if
condition|(
name|screens
operator|.
name|isEmpty
argument_list|()
condition|)
name|screens
operator|.
name|append
argument_list|(
name|qt_screen
argument_list|)
expr_stmt|;
name|int
name|sw
init|=
name|screens
index|[
literal|0
index|]
operator|->
name|width
argument_list|()
decl_stmt|;
name|int
name|sh
init|=
name|screens
index|[
literal|0
index|]
operator|->
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|desktop
condition|)
block|{
comment|// desktop widget
name|dialog
operator|=
name|popup
operator|=
literal|false
expr_stmt|;
comment|// force these flags off
name|data
operator|.
name|crect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topLevel
operator|&&
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
condition|)
block|{
name|int
name|width
init|=
name|sw
operator|/
literal|2
decl_stmt|;
name|int
name|height
init|=
literal|4
operator|*
name|sh
operator|/
literal|10
decl_stmt|;
if|if
condition|(
name|extra
condition|)
block|{
name|width
operator|=
name|qMax
argument_list|(
name|qMin
argument_list|(
name|width
argument_list|,
name|extra
operator|->
name|maxw
argument_list|)
argument_list|,
name|extra
operator|->
name|minw
argument_list|)
expr_stmt|;
name|height
operator|=
name|qMax
argument_list|(
name|qMin
argument_list|(
name|height
argument_list|,
name|extra
operator|->
name|maxh
argument_list|)
argument_list|,
name|extra
operator|->
name|minh
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|crect
operator|.
name|setSize
argument_list|(
name|QSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|window
condition|)
block|{
comment|// override the old window
name|id
operator|=
name|window
expr_stmt|;
name|setWinId
argument_list|(
name|window
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|desktop
condition|)
block|{
comment|// desktop widget
name|id
operator|=
operator|(
name|WId
operator|)
operator|-
literal|2
expr_stmt|;
comment|// id = root window
if|#
directive|if
literal|0
block|QWidget *otherDesktop = q->find(id);
comment|// is there another desktop?
block|if (otherDesktop&& otherDesktop->testWFlags(Qt::WPaintDesktop)) {             otherDesktop->d_func()->setWinId(0);
comment|// remove id from widget mapper
block|setWinId(id);
comment|// make sure otherDesktop is
block|otherDesktop->d_func()->setWinId(id);
comment|//   found first
block|} else
endif|#
directive|endif
block|{
name|setWinId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|id
operator|=
name|topLevel
condition|?
name|dpy
operator|->
name|takeId
argument_list|()
else|:
name|takeLocalId
argument_list|()
expr_stmt|;
name|setWinId
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// set widget id/handle + hd
block|}
name|bool
name|hasFrame
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|topLevel
condition|)
block|{
if|if
condition|(
name|desktop
operator|||
name|popup
operator|||
name|tool
operator|||
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
name|hasFrame
operator|=
literal|false
expr_stmt|;
else|else
name|hasFrame
operator|=
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|desktop
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topLevel
condition|)
block|{
comment|// set X cursor
comment|//QCursor *oc = QApplication::overrideCursor();
if|if
condition|(
name|initializeWindow
condition|)
block|{
comment|//XXX XDefineCursor(dpy, winid, oc ? oc->handle() : cursor().handle());
block|}
name|QWidget
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|nameRegion
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|q
operator|->
name|objectName
argument_list|()
argument_list|,
name|q
operator|->
name|windowTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|topLevel
condition|)
block|{
name|createTLExtra
argument_list|()
expr_stmt|;
name|QTLWExtra
modifier|*
name|topextra
init|=
name|extra
operator|->
name|topextra
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_MANAGER
if|if
condition|(
name|hasFrame
condition|)
block|{
comment|// get size of wm decoration and make the old crect the new frect
name|QRect
name|cr
init|=
name|data
operator|.
name|crect
decl_stmt|;
name|QRegion
name|r
init|=
name|QApplication
operator|::
name|qwsDecoration
argument_list|()
operator|.
name|region
argument_list|(
name|q
argument_list|,
name|cr
argument_list|)
operator||
name|cr
decl_stmt|;
name|QRect
name|br
argument_list|(
name|r
operator|.
name|boundingRect
argument_list|()
argument_list|)
decl_stmt|;
name|topextra
operator|->
name|frameStrut
operator|.
name|setCoords
argument_list|(
name|cr
operator|.
name|x
argument_list|()
operator|-
name|br
operator|.
name|x
argument_list|()
argument_list|,
name|cr
operator|.
name|y
argument_list|()
operator|-
name|br
operator|.
name|y
argument_list|()
argument_list|,
name|br
operator|.
name|right
argument_list|()
operator|-
name|cr
operator|.
name|right
argument_list|()
argument_list|,
name|br
operator|.
name|bottom
argument_list|()
operator|-
name|cr
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Moved
argument_list|)
operator|||
name|topextra
operator|->
name|posFromMove
condition|)
name|data
operator|.
name|crect
operator|.
name|translate
argument_list|(
name|topextra
operator|->
name|frameStrut
operator|.
name|left
argument_list|()
argument_list|,
name|topextra
operator|->
name|frameStrut
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|topData
argument_list|()
operator|->
name|qwsManager
condition|)
block|{
name|topData
argument_list|()
operator|->
name|qwsManager
operator|=
operator|new
name|QWSManager
argument_list|(
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|q
operator|->
name|data
operator|->
name|window_state
operator|&
operator|~
name|Qt
operator|::
name|WindowActive
operator|)
operator|==
name|Qt
operator|::
name|WindowMaximized
condition|)
name|topData
argument_list|()
operator|->
name|qwsManager
operator|->
name|maximize
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|topData
argument_list|()
operator|->
name|qwsManager
condition|)
block|{
operator|delete
name|topData
argument_list|()
operator|->
name|qwsManager
expr_stmt|;
name|topData
argument_list|()
operator|->
name|qwsManager
operator|=
literal|0
expr_stmt|;
name|data
operator|.
name|crect
operator|.
name|translate
argument_list|(
operator|-
name|topextra
operator|->
name|frameStrut
operator|.
name|left
argument_list|()
argument_list|,
operator|-
name|topextra
operator|->
name|frameStrut
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|topextra
operator|->
name|frameStrut
operator|.
name|setCoords
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|topextra
operator|->
name|caption
operator|.
name|isEmpty
argument_list|()
condition|)
name|setWindowTitle_helper
argument_list|(
name|topextra
operator|->
name|caption
argument_list|)
expr_stmt|;
comment|//XXX If we are session managed, inform the window manager about it
block|}
else|else
block|{
if|if
condition|(
name|extra
operator|&&
name|extra
operator|->
name|topextra
condition|)
block|{
comment|// already allocated due to reparent?
name|extra
operator|->
name|topextra
operator|->
name|frameStrut
operator|.
name|setCoords
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//updateRequestedRegion(mapToGlobal(QPoint(0,0)));
block|}
block|}
end_function
begin_function
DECL|function|destroy
name|void
name|QWidget
operator|::
name|destroy
parameter_list|(
name|bool
name|destroyWindow
parameter_list|,
name|bool
name|destroySubWindows
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|aboutToDestroy
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isWindow
argument_list|()
operator|&&
name|parentWidget
argument_list|()
condition|)
name|parentWidget
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateBuffer
argument_list|(
name|d
operator|->
name|effectiveRectFor
argument_list|(
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|deactivateWidgetCleanup
argument_list|()
expr_stmt|;
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
block|{
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QObjectList
name|childObjects
init|=
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childObjects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QObject
modifier|*
name|obj
init|=
name|childObjects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|->
name|isWidgetType
argument_list|()
condition|)
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|obj
argument_list|)
operator|->
name|destroy
argument_list|(
name|destroySubWindows
argument_list|,
name|destroySubWindows
argument_list|)
expr_stmt|;
block|}
name|releaseMouse
argument_list|()
expr_stmt|;
if|if
condition|(
name|qt_pressGrab
operator|==
name|this
condition|)
name|qt_pressGrab
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|keyboardGrb
operator|==
name|this
condition|)
name|releaseKeyboard
argument_list|()
expr_stmt|;
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_ShowModal
argument_list|)
condition|)
comment|// just be sure we leave modal
name|QApplicationPrivate
operator|::
name|leaveModal
argument_list|(
name|this
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
operator|)
condition|)
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|closePopup
argument_list|(
name|this
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_IM
if|if
condition|(
name|d
operator|->
name|ic
condition|)
block|{
operator|delete
name|d
operator|->
name|ic
expr_stmt|;
name|d
operator|->
name|ic
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|// release previous focus information participating with
comment|// preedit preservation of qic -- while we still have a winId
name|QInputContext
modifier|*
name|qic
init|=
name|QApplicationPrivate
operator|::
name|inputContext
decl_stmt|;
if|if
condition|(
name|qic
condition|)
name|qic
operator|->
name|widgetDestroyed
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|//QT_NO_IM
if|if
condition|(
operator|(
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
block|{         }
else|else
block|{
if|if
condition|(
name|parentWidget
argument_list|()
operator|&&
name|parentWidget
argument_list|()
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
block|{
name|d
operator|->
name|hide_sys
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|destroyWindow
operator|&&
name|isWindow
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|extra
operator|&&
name|d
operator|->
name|extra
operator|->
name|topextra
operator|&&
name|d
operator|->
name|extra
operator|->
name|topextra
operator|->
name|backingStore
condition|)
name|d
operator|->
name|extra
operator|->
name|topextra
operator|->
name|backingStore
operator|->
name|windowSurface
operator|->
name|setGeometry
argument_list|(
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
name|qwsDisplay
argument_list|()
operator|->
name|destroyRegion
argument_list|(
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|QT_TRY
block|{
name|d
operator|->
name|setWinId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|const std::bad_alloc&
argument_list|)
block|{
comment|// swallow - destructors must not throw
block|}
block|}
block|}
end_function
begin_function
DECL|function|setParent_sys
name|void
name|QWidgetPrivate
operator|::
name|setParent_sys
parameter_list|(
name|QWidget
modifier|*
name|newparent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|f
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|bool
name|wasCreated
init|=
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
operator|&&
name|q
operator|->
name|parentWidget
argument_list|()
operator|&&
name|parent
operator|!=
name|q
operator|->
name|parentWidget
argument_list|()
condition|)
name|q
operator|->
name|parentWidget
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateBuffer
argument_list|(
name|effectiveRectFor
argument_list|(
name|q
operator|->
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QCursor
name|oldcurs
decl_stmt|;
name|bool
name|setcurs
init|=
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetCursor
argument_list|)
decl_stmt|;
if|if
condition|(
name|setcurs
condition|)
block|{
name|oldcurs
operator|=
name|q
operator|->
name|cursor
argument_list|()
expr_stmt|;
name|q
operator|->
name|unsetCursor
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|WId
name|old_winid
init|=
name|data
operator|.
name|winid
decl_stmt|;
if|if
condition|(
operator|(
name|q
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
name|old_winid
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
name|q
operator|->
name|parentWidget
argument_list|()
operator|&&
name|q
operator|->
name|parentWidget
argument_list|()
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
name|hide_sys
argument_list|()
expr_stmt|;
name|setWinId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
name|newparent
condition|)
block|{
name|QWidget
modifier|*
name|oldparent
init|=
name|q
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
name|QObjectPrivate
operator|::
name|setParent_helper
argument_list|(
name|newparent
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldparent
condition|)
block|{
comment|//            oldparent->d_func()->setChildrenAllocatedDirty();
comment|//            oldparent->data->paintable_region_dirty = true;
block|}
if|if
condition|(
name|newparent
condition|)
block|{
comment|//            newparent->d_func()->setChildrenAllocatedDirty();
comment|//            newparent->data->paintable_region_dirty = true;
comment|//@@@@@@@
block|}
block|}
name|Qt
operator|::
name|FocusPolicy
name|fp
init|=
name|q
operator|->
name|focusPolicy
argument_list|()
decl_stmt|;
name|QSize
name|s
init|=
name|q
operator|->
name|size
argument_list|()
decl_stmt|;
comment|//QBrush   bgc    = background();                        // save colors
name|bool
name|explicitlyHidden
init|=
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|)
decl_stmt|;
name|data
operator|.
name|window_flags
operator|=
name|f
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|adjustFlags
argument_list|(
name|data
operator|.
name|window_flags
argument_list|,
name|q
argument_list|)
expr_stmt|;
comment|// keep compatibility with previous versions, we need to preserve the created state
comment|// (but we recreate the winId for the widget being reparented, again for compatibility)
if|if
condition|(
name|wasCreated
operator|||
operator|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
name|newparent
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
operator|)
condition|)
name|createWinId
argument_list|()
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
operator|||
operator|(
operator|!
name|newparent
operator|||
name|newparent
operator|->
name|isVisible
argument_list|()
operator|)
operator|||
name|explicitlyHidden
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|,
name|explicitlyHidden
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|QRect
name|fs
init|=
name|frameStrut
argument_list|()
decl_stmt|;
name|data
operator|.
name|crect
operator|=
name|QRect
argument_list|(
name|fs
operator|.
name|left
argument_list|()
argument_list|,
name|fs
operator|.
name|top
argument_list|()
argument_list|,
name|s
operator|.
name|width
argument_list|()
argument_list|,
name|s
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|&&
name|extra
operator|&&
name|extra
operator|->
name|topextra
condition|)
name|extra
operator|->
name|topextra
operator|->
name|frameStrut
operator|.
name|setCoords
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|data
operator|.
name|crect
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|s
operator|.
name|width
argument_list|()
argument_list|,
name|s
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|q
operator|->
name|setFocusPolicy
argument_list|(
name|fp
argument_list|)
expr_stmt|;
if|if
condition|(
name|extra
operator|&&
operator|!
name|extra
operator|->
name|mask
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QRegion
name|r
init|=
name|extra
operator|->
name|mask
decl_stmt|;
name|extra
operator|->
name|mask
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|q
operator|->
name|setMask
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|int
operator|)
name|old_winid
operator|>
literal|0
condition|)
block|{
name|QWidget
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|destroyRegion
argument_list|(
name|old_winid
argument_list|)
expr_stmt|;
name|extra
operator|->
name|topextra
operator|->
name|backingStore
operator|->
name|windowSurface
operator|->
name|setGeometry
argument_list|(
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
if|if
condition|(
name|setcurs
condition|)
block|{
name|q
operator|->
name|setCursor
argument_list|(
name|oldcurs
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|mapToGlobal
name|QPoint
name|QWidget
operator|::
name|mapToGlobal
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|int
name|x
init|=
name|pos
operator|.
name|x
argument_list|()
decl_stmt|,
name|y
init|=
name|pos
operator|.
name|y
argument_list|()
decl_stmt|;
specifier|const
name|QWidget
modifier|*
name|w
init|=
name|this
decl_stmt|;
while|while
condition|(
name|w
condition|)
block|{
name|x
operator|+=
name|w
operator|->
name|data
operator|->
name|crect
operator|.
name|x
argument_list|()
expr_stmt|;
name|y
operator|+=
name|w
operator|->
name|data
operator|->
name|crect
operator|.
name|y
argument_list|()
expr_stmt|;
name|w
operator|=
name|w
operator|->
name|isWindow
argument_list|()
condition|?
literal|0
else|:
name|w
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
return|return
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mapFromGlobal
name|QPoint
name|QWidget
operator|::
name|mapFromGlobal
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|int
name|x
init|=
name|pos
operator|.
name|x
argument_list|()
decl_stmt|,
name|y
init|=
name|pos
operator|.
name|y
argument_list|()
decl_stmt|;
specifier|const
name|QWidget
modifier|*
name|w
init|=
name|this
decl_stmt|;
while|while
condition|(
name|w
condition|)
block|{
name|x
operator|-=
name|w
operator|->
name|data
operator|->
name|crect
operator|.
name|x
argument_list|()
expr_stmt|;
name|y
operator|-=
name|w
operator|->
name|data
operator|->
name|crect
operator|.
name|y
argument_list|()
expr_stmt|;
name|w
operator|=
name|w
operator|->
name|isWindow
argument_list|()
condition|?
literal|0
else|:
name|w
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
return|return
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
end_function
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
comment|// #####
end_comment
begin_ifndef
unit|void QWidget::setMicroFocusHint(int x, int y, int width, int height,                                  bool text, QFont *) {     if (QRect(x, y, width, height) != microFocusHint()) {         d->createExtra();         d->extra->micro_focus_hint.setRect(x, y, width, height);     }
ifndef|#
directive|ifndef
name|QT_NO_QWS_INPUTMETHODS
end_ifndef
begin_comment
unit|if (text) {         QWidget *tlw = window();         int winid = tlw->internalWinId();         QPoint p(x, y + height);         QPoint gp = mapToGlobal(p);          QRect r = QRect(mapToGlobal(QPoint(0,0)),                          size());          r.setBottom(tlw->geometry().bottom());
comment|//qDebug("QWidget::setMicroFocusHint %d %d %d %d", r.x(),
end_comment
begin_comment
comment|//        r.y(), r.width(), r.height());
end_comment
begin_comment
unit|QInputContext::setMicroFocusWidget(this);          qwsDisplay()->setIMInfo(winid, gp.x(), gp.y(), r);
comment|//send font info,  ###if necessary
end_comment
begin_endif
unit|qwsDisplay()->setInputFont(winid, font());     }
endif|#
directive|endif
end_endif
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_function
DECL|function|updateSystemBackground
name|void
name|QWidgetPrivate
operator|::
name|updateSystemBackground
parameter_list|()
block|{}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|setCursor_sys
name|void
name|QWidgetPrivate
operator|::
name|setCursor_sys
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
condition|)
name|updateCursor
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unsetCursor_sys
name|void
name|QWidgetPrivate
operator|::
name|unsetCursor_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
condition|)
name|updateCursor
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_CURSOR
end_comment
begin_function
DECL|function|setWindowTitle_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowTitle_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|caption
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|QWidget
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|setWindowCaption
argument_list|(
name|q
argument_list|,
name|caption
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowIcon_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowIcon_sys
parameter_list|(
name|bool
comment|/*forceReset*/
parameter_list|)
block|{
if|#
directive|if
literal|0
block|QTLWExtra* x = d->topData();      delete x->icon;      x->icon = 0;     QBitmap mask;     if (unscaledPixmap.isNull()) {     } else {         QImage unscaledIcon = unscaledPixmap.toImage();         QPixmap pixmap =             QPixmap::fromImage(unscaledIcon.scale(16, 16, Qt::IgnoreAspectRatio, Qt::SmoothTransformation));         x->icon = new QPixmap(pixmap);         mask = pixmap.mask() ? *pixmap.mask() : pixmap.createHeuristicMask();     }
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setWindowIconText_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowIconText_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|iconText
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|iconText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|grabMouse
name|void
name|QWidget
operator|::
name|grabMouse
parameter_list|()
block|{
if|if
condition|(
name|qt_mouseGrb
condition|)
name|qt_mouseGrb
operator|->
name|releaseMouse
argument_list|()
expr_stmt|;
name|qwsDisplay
argument_list|()
operator|->
name|grabMouse
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|qt_mouseGrb
operator|=
name|this
expr_stmt|;
name|qt_pressGrab
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|grabMouse
name|void
name|QWidget
operator|::
name|grabMouse
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|)
block|{
if|if
condition|(
name|qt_mouseGrb
condition|)
name|qt_mouseGrb
operator|->
name|releaseMouse
argument_list|()
expr_stmt|;
name|qwsDisplay
argument_list|()
operator|->
name|grabMouse
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|qwsDisplay
argument_list|()
operator|->
name|selectCursor
argument_list|(
name|this
argument_list|,
name|cursor
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|qt_mouseGrb
operator|=
name|this
expr_stmt|;
name|qt_pressGrab
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|releaseMouse
name|void
name|QWidget
operator|::
name|releaseMouse
parameter_list|()
block|{
if|if
condition|(
name|qt_mouseGrb
operator|==
name|this
condition|)
block|{
name|qwsDisplay
argument_list|()
operator|->
name|grabMouse
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|qt_mouseGrb
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|grabKeyboard
name|void
name|QWidget
operator|::
name|grabKeyboard
parameter_list|()
block|{
if|if
condition|(
name|keyboardGrb
condition|)
name|keyboardGrb
operator|->
name|releaseKeyboard
argument_list|()
expr_stmt|;
name|qwsDisplay
argument_list|()
operator|->
name|grabKeyboard
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|keyboardGrb
operator|=
name|this
expr_stmt|;
block|}
end_function
begin_function
DECL|function|releaseKeyboard
name|void
name|QWidget
operator|::
name|releaseKeyboard
parameter_list|()
block|{
if|if
condition|(
name|keyboardGrb
operator|==
name|this
condition|)
block|{
name|qwsDisplay
argument_list|()
operator|->
name|grabKeyboard
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|keyboardGrb
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mouseGrabber
name|QWidget
modifier|*
name|QWidget
operator|::
name|mouseGrabber
parameter_list|()
block|{
if|if
condition|(
name|qt_mouseGrb
condition|)
return|return
name|qt_mouseGrb
return|;
return|return
name|qt_pressGrab
return|;
block|}
end_function
begin_function
DECL|function|keyboardGrabber
name|QWidget
modifier|*
name|QWidget
operator|::
name|keyboardGrabber
parameter_list|()
block|{
return|return
name|keyboardGrb
return|;
block|}
end_function
begin_function
DECL|function|activateWindow
name|void
name|QWidget
operator|::
name|activateWindow
parameter_list|()
block|{
name|QWidget
modifier|*
name|tlw
init|=
name|window
argument_list|()
decl_stmt|;
if|if
condition|(
name|tlw
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|tlw
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|qwsDisplay
argument_list|()
operator|->
name|requestFocus
argument_list|(
name|tlw
operator|->
name|internalWinId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|show_sys
name|void
name|QWidgetPrivate
operator|::
name|show_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
block|{
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_ShowWithoutActivating
argument_list|)
operator|&&
name|q
operator|->
name|windowType
argument_list|()
operator|!=
name|Qt
operator|::
name|Popup
operator|&&
name|q
operator|->
name|windowType
argument_list|()
operator|!=
name|Qt
operator|::
name|Tool
operator|&&
name|q
operator|->
name|windowType
argument_list|()
operator|!=
name|Qt
operator|::
name|ToolTip
condition|)
block|{
name|QWidget
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|requestFocus
argument_list|(
name|data
operator|.
name|winid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QWindowSurface
modifier|*
name|surface
init|=
name|q
operator|->
name|windowSurface
argument_list|()
condition|)
block|{
specifier|const
name|QRect
name|frameRect
init|=
name|q
operator|->
name|frameGeometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|surface
operator|->
name|geometry
argument_list|()
operator|!=
name|frameRect
condition|)
name|surface
operator|->
name|setGeometry
argument_list|(
name|frameRect
argument_list|)
expr_stmt|;
block|}
name|QRegion
name|r
init|=
name|localRequestedRegion
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_MANAGER
if|if
condition|(
name|extra
operator|&&
name|extra
operator|->
name|topextra
operator|&&
name|extra
operator|->
name|topextra
operator|->
name|qwsManager
condition|)
block|{
name|r
operator|.
name|translate
argument_list|(
name|data
operator|.
name|crect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|+=
name|extra
operator|->
name|topextra
operator|->
name|qwsManager
operator|->
name|region
argument_list|()
expr_stmt|;
name|r
operator|.
name|translate
argument_list|(
operator|-
name|data
operator|.
name|crect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|data
operator|.
name|fstrut_dirty
operator|=
literal|true
expr_stmt|;
name|invalidateBuffer
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|bool
name|staysontop
init|=
operator|(
name|q
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
operator|)
operator|||
name|q
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
decl_stmt|;
if|if
condition|(
operator|!
name|staysontop
operator|&&
name|q
operator|->
name|parentWidget
argument_list|()
condition|)
block|{
comment|// if our parent stays on top, so must we
name|QWidget
modifier|*
name|ptl
init|=
name|q
operator|->
name|parentWidget
argument_list|()
operator|->
name|window
argument_list|()
decl_stmt|;
if|if
condition|(
name|ptl
operator|&&
operator|(
name|ptl
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
operator|)
condition|)
name|staysontop
operator|=
literal|true
expr_stmt|;
block|}
name|QWSChangeAltitudeCommand
operator|::
name|Altitude
name|altitude
decl_stmt|;
name|altitude
operator|=
name|staysontop
condition|?
name|QWSChangeAltitudeCommand
operator|::
name|StaysOnTop
else|:
name|QWSChangeAltitudeCommand
operator|::
name|Raise
expr_stmt|;
name|QWidget
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|setAltitude
argument_list|(
name|data
operator|.
name|winid
argument_list|,
name|altitude
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|objectName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QWidget
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|setWindowCaption
argument_list|(
name|q
argument_list|,
name|q
operator|->
name|windowTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
ifdef|#
directive|ifdef
name|Q_BACKINGSTORE_SUBSURFACES
elseif|else
if|if
condition|(
name|extra
operator|&&
name|extra
operator|->
name|topextra
operator|&&
name|extra
operator|->
name|topextra
operator|->
name|windowSurface
condition|)
block|{
name|QWSWindowSurface
modifier|*
name|surface
decl_stmt|;
name|surface
operator|=
cast|static_cast
argument_list|<
name|QWSWindowSurface
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|windowSurface
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QPoint
name|p
init|=
name|q
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|()
argument_list|)
decl_stmt|;
name|surface
operator|->
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|p
argument_list|,
name|q
operator|->
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|q
operator|->
name|window
argument_list|()
operator|->
name|data
operator|->
name|in_show
condition|)
block|{
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|hide_sys
name|void
name|QWidgetPrivate
operator|::
name|hide_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|deactivateWidgetCleanup
argument_list|()
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|q
operator|->
name|releaseMouse
argument_list|()
expr_stmt|;
comment|//        requestWindowRegion(QRegion());
if|if
condition|(
name|extra
operator|->
name|topextra
operator|->
name|backingStore
condition|)
name|extra
operator|->
name|topextra
operator|->
name|backingStore
operator|->
name|releaseBuffer
argument_list|()
expr_stmt|;
name|QWidget
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|requestFocus
argument_list|(
name|data
operator|.
name|winid
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWidget
modifier|*
name|p
init|=
name|q
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|&&
name|p
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|effectiveState
specifier|static
name|Qt
operator|::
name|WindowStates
name|effectiveState
parameter_list|(
name|Qt
operator|::
name|WindowStates
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|&
name|Qt
operator|::
name|WindowMinimized
condition|)
return|return
name|Qt
operator|::
name|WindowMinimized
return|;
elseif|else
if|if
condition|(
name|state
operator|&
name|Qt
operator|::
name|WindowFullScreen
condition|)
return|return
name|Qt
operator|::
name|WindowFullScreen
return|;
elseif|else
if|if
condition|(
name|state
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
return|return
name|Qt
operator|::
name|WindowMaximized
return|;
return|return
name|Qt
operator|::
name|WindowNoState
return|;
block|}
end_function
begin_function
DECL|function|setMaxWindowState_helper
name|void
name|QWidgetPrivate
operator|::
name|setMaxWindowState_helper
parameter_list|()
block|{
comment|// in_set_window_state is usually set in setWindowState(), but this
comment|// function is used in other functions as well
comment|// (e.g QApplicationPrivate::setMaxWindowRect())
specifier|const
name|uint
name|old_state
init|=
name|data
operator|.
name|in_set_window_state
decl_stmt|;
name|data
operator|.
name|in_set_window_state
operator|=
literal|1
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_MANAGER
if|if
condition|(
name|extra
operator|&&
name|extra
operator|->
name|topextra
operator|&&
name|extra
operator|->
name|topextra
operator|->
name|qwsManager
condition|)
name|extra
operator|->
name|topextra
operator|->
name|qwsManager
operator|->
name|maximize
argument_list|()
expr_stmt|;
else|else
endif|#
directive|endif
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
specifier|const
name|QDesktopWidget
modifier|*
name|desktop
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
decl_stmt|;
specifier|const
name|int
name|screen
init|=
name|desktop
operator|->
name|screenNumber
argument_list|(
name|q
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|maxWindowRect
init|=
name|desktop
operator|->
name|availableGeometry
argument_list|(
name|screen
argument_list|)
decl_stmt|;
name|q
operator|->
name|setGeometry
argument_list|(
name|maxWindowRect
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|in_set_window_state
operator|=
name|old_state
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFullScreenSize_helper
name|void
name|QWidgetPrivate
operator|::
name|setFullScreenSize_helper
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
specifier|const
name|uint
name|old_state
init|=
name|data
operator|.
name|in_set_window_state
decl_stmt|;
name|data
operator|.
name|in_set_window_state
operator|=
literal|1
expr_stmt|;
specifier|const
name|QRect
name|screen
init|=
name|qApp
operator|->
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|(
name|qApp
operator|->
name|desktop
argument_list|()
operator|->
name|screenNumber
argument_list|(
name|q
argument_list|)
argument_list|)
decl_stmt|;
name|q
operator|->
name|move
argument_list|(
name|screen
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|->
name|resize
argument_list|(
name|screen
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|in_set_window_state
operator|=
name|old_state
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowState
name|void
name|QWidget
operator|::
name|setWindowState
parameter_list|(
name|Qt
operator|::
name|WindowStates
name|newstate
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|WindowStates
name|oldstate
init|=
name|windowState
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldstate
operator|==
name|newstate
condition|)
return|return;
if|if
condition|(
name|isWindow
argument_list|()
operator|&&
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
name|create
argument_list|()
expr_stmt|;
name|data
operator|->
name|window_state
operator|=
name|newstate
expr_stmt|;
name|data
operator|->
name|in_set_window_state
operator|=
literal|1
expr_stmt|;
name|bool
name|needShow
init|=
literal|false
decl_stmt|;
name|Qt
operator|::
name|WindowStates
name|newEffectiveState
init|=
name|effectiveState
argument_list|(
name|newstate
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|WindowStates
name|oldEffectiveState
init|=
name|effectiveState
argument_list|(
name|oldstate
argument_list|)
decl_stmt|;
if|if
condition|(
name|isWindow
argument_list|()
operator|&&
name|newEffectiveState
operator|!=
name|oldEffectiveState
condition|)
block|{
name|d
operator|->
name|createTLExtra
argument_list|()
expr_stmt|;
if|if
condition|(
name|oldEffectiveState
operator|==
name|Qt
operator|::
name|WindowNoState
condition|)
block|{
comment|//normal
name|d
operator|->
name|topData
argument_list|()
operator|->
name|normalGeometry
operator|=
name|geometry
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oldEffectiveState
operator|==
name|Qt
operator|::
name|WindowFullScreen
condition|)
block|{
name|setParent
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|topData
argument_list|()
operator|->
name|savedFlags
argument_list|)
expr_stmt|;
name|needShow
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oldEffectiveState
operator|==
name|Qt
operator|::
name|WindowMinimized
condition|)
block|{
name|needShow
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|newEffectiveState
operator|==
name|Qt
operator|::
name|WindowMinimized
condition|)
block|{
comment|//### not ideal...
name|hide
argument_list|()
expr_stmt|;
name|needShow
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newEffectiveState
operator|==
name|Qt
operator|::
name|WindowFullScreen
condition|)
block|{
name|d
operator|->
name|topData
argument_list|()
operator|->
name|savedFlags
operator|=
name|windowFlags
argument_list|()
expr_stmt|;
name|setParent
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|FramelessWindowHint
operator||
operator|(
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
operator|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|setFullScreenSize_helper
argument_list|()
expr_stmt|;
name|raise
argument_list|()
expr_stmt|;
name|needShow
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newEffectiveState
operator|==
name|Qt
operator|::
name|WindowMaximized
condition|)
block|{
name|createWinId
argument_list|()
expr_stmt|;
name|d
operator|->
name|setMaxWindowState_helper
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//normal
name|QRect
name|r
init|=
name|d
operator|->
name|topData
argument_list|()
operator|->
name|normalGeometry
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|width
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|d
operator|->
name|topData
argument_list|()
operator|->
name|normalGeometry
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|setGeometry
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|data
operator|->
name|in_set_window_state
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|needShow
condition|)
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowActive
condition|)
name|activateWindow
argument_list|()
expr_stmt|;
name|QWindowStateChangeEvent
name|e
argument_list|(
name|oldstate
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|this
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFocus_sys
name|void
name|QWidgetPrivate
operator|::
name|setFocus_sys
parameter_list|()
block|{  }
end_function
begin_function
DECL|function|raise_sys
name|void
name|QWidgetPrivate
operator|::
name|raise_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
comment|//@@@ transaction
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|QWidget
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|setAltitude
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|QWSChangeAltitudeCommand
operator|::
name|Raise
argument_list|)
expr_stmt|;
comment|// XXX: subsurfaces?
ifdef|#
directive|ifdef
name|QT_NO_WINDOWGROUPHINT
else|#
directive|else
name|QObjectList
name|childObjects
init|=
name|q
operator|->
name|children
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|childObjects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QWidgetList
name|toraise
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childObjects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QObject
modifier|*
name|obj
init|=
name|childObjects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|->
name|isWidgetType
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|isWindow
argument_list|()
condition|)
name|toraise
operator|.
name|append
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toraise
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|toraise
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|isVisible
argument_list|()
condition|)
name|w
operator|->
name|raise
argument_list|()
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_WINDOWGROUPHINT
block|}
block|}
end_function
begin_function
DECL|function|lower_sys
name|void
name|QWidgetPrivate
operator|::
name|lower_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|QWidget
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|setAltitude
argument_list|(
name|data
operator|.
name|winid
argument_list|,
name|QWSChangeAltitudeCommand
operator|::
name|Lower
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QWidget
modifier|*
name|p
init|=
name|q
operator|->
name|parentWidget
argument_list|()
condition|)
block|{
name|setDirtyOpaqueRegion
argument_list|()
expr_stmt|;
name|p
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateBuffer
argument_list|(
name|effectiveRectFor
argument_list|(
name|q
operator|->
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|stackUnder_sys
name|void
name|QWidgetPrivate
operator|::
name|stackUnder_sys
parameter_list|(
name|QWidget
modifier|*
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|p
init|=
name|q
operator|->
name|parentWidget
argument_list|()
condition|)
block|{
name|setDirtyOpaqueRegion
argument_list|()
expr_stmt|;
name|p
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateBuffer
argument_list|(
name|effectiveRectFor
argument_list|(
name|q
operator|->
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|moveSurface
name|void
name|QWidgetPrivate
operator|::
name|moveSurface
parameter_list|(
name|QWindowSurface
modifier|*
name|surface
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
name|QWSWindowSurface
modifier|*
name|s
init|=
cast|static_cast
argument_list|<
name|QWSWindowSurface
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|->
name|move
argument_list|(
name|offset
argument_list|)
condition|)
name|s
operator|->
name|invalidateBuffer
argument_list|()
expr_stmt|;
name|QWSDisplay
operator|::
name|instance
argument_list|()
operator|->
name|moveRegion
argument_list|(
name|s
operator|->
name|winId
argument_list|()
argument_list|,
name|offset
operator|.
name|x
argument_list|()
argument_list|,
name|offset
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setGeometry_sys
name|void
name|QWidgetPrivate
operator|::
name|setGeometry_sys
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|bool
name|isMove
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|extra
condition|)
block|{
comment|// any size restrictions?
name|w
operator|=
name|qMin
argument_list|(
name|w
argument_list|,
name|extra
operator|->
name|maxw
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMin
argument_list|(
name|h
argument_list|,
name|extra
operator|->
name|maxh
argument_list|)
expr_stmt|;
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|extra
operator|->
name|minw
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMax
argument_list|(
name|h
argument_list|,
name|extra
operator|->
name|minh
argument_list|)
expr_stmt|;
block|}
name|QPoint
name|oldp
init|=
name|q
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|QSize
name|olds
init|=
name|q
operator|->
name|size
argument_list|()
decl_stmt|;
name|QRect
name|r
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|bool
name|isResize
init|=
name|olds
operator|!=
name|r
operator|.
name|size
argument_list|()
decl_stmt|;
name|isMove
operator|=
name|oldp
operator|!=
name|r
operator|.
name|topLeft
argument_list|()
expr_stmt|;
comment|//### why do we have isMove as a parameter?
comment|// We only care about stuff that changes the geometry, or may
comment|// cause the window manager to change its state
if|if
condition|(
name|r
operator|.
name|size
argument_list|()
operator|==
name|olds
operator|&&
name|oldp
operator|==
name|r
operator|.
name|topLeft
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|data
operator|.
name|in_set_window_state
condition|)
block|{
name|q
operator|->
name|data
operator|->
name|window_state
operator|&=
operator|~
name|Qt
operator|::
name|WindowMaximized
expr_stmt|;
name|q
operator|->
name|data
operator|->
name|window_state
operator|&=
operator|~
name|Qt
operator|::
name|WindowFullScreen
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
name|topData
argument_list|()
operator|->
name|normalGeometry
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|QPoint
name|oldPos
init|=
name|q
operator|->
name|pos
argument_list|()
decl_stmt|;
name|data
operator|.
name|crect
operator|=
name|r
expr_stmt|;
if|if
condition|(
operator|(
name|q
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
return|return;
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|bool
name|toplevelMove
init|=
literal|false
decl_stmt|;
name|QWSWindowSurface
modifier|*
name|surface
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
comment|//### ConfigPending not implemented, do we need it?
comment|//setAttribute(Qt::WA_WState_ConfigPending);
specifier|const
name|QWidgetBackingStore
modifier|*
name|bs
init|=
name|maybeBackingStore
argument_list|()
decl_stmt|;
if|if
condition|(
name|bs
condition|)
name|surface
operator|=
cast|static_cast
argument_list|<
name|QWSWindowSurface
operator|*
argument_list|>
argument_list|(
name|bs
operator|->
name|windowSurface
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMove
operator|&&
operator|!
name|isResize
operator|&&
name|surface
condition|)
block|{
specifier|const
name|QPoint
name|offset
argument_list|(
name|x
operator|-
name|oldp
operator|.
name|x
argument_list|()
argument_list|,
name|y
operator|-
name|oldp
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|moveSurface
argument_list|(
name|surface
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|toplevelMove
operator|=
literal|true
expr_stmt|;
comment|//server moves window, but we must send moveEvent, which might trigger painting
ifdef|#
directive|ifdef
name|Q_BACKINGSTORE_SUBSURFACES
name|QList
argument_list|<
name|QWindowSurface
modifier|*
argument_list|>
name|surfaces
init|=
name|bs
operator|->
name|subSurfaces
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|surfaces
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|moveSurface
argument_list|(
name|surfaces
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|updateFrameStrut
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|toplevelMove
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
if|if
condition|(
name|surface
condition|)
name|surface
operator|->
name|setGeometry
argument_list|(
name|q
operator|->
name|frameGeometry
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
comment|//###
ifdef|#
directive|ifdef
name|Q_BACKINGSTORE_SUBSURFACES
comment|// XXX: should not resize subsurfaces. Children within a layout
comment|// will be resized automatically while children with a static
comment|// geometry should get a new clip region instead.
specifier|const
name|QRect
name|clipRect
init|=
name|q
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|QWidgetBackingStore
modifier|*
name|bs
init|=
name|maybeBackingStore
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QWindowSurface
modifier|*
argument_list|>
name|surfaces
init|=
name|bs
operator|->
name|subSurfaces
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|surfaces
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWSWindowSurface
modifier|*
name|s
init|=
cast|static_cast
argument_list|<
name|QWSWindowSurface
operator|*
argument_list|>
argument_list|(
name|surfaces
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|QRect
name|srect
init|=
name|s
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|s
operator|->
name|setGeometry
argument_list|(
name|clipRect
operator|&
name|srect
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
ifdef|#
directive|ifdef
name|Q_BACKINGSTORE_SUBSURFACES
comment|// XXX: merge this case with the isWindow() case
elseif|else
if|if
condition|(
name|maybeTopData
argument_list|()
operator|&&
name|maybeTopData
argument_list|()
operator|->
name|windowSurface
condition|)
block|{
name|QWSWindowSurface
modifier|*
name|surface
decl_stmt|;
name|surface
operator|=
cast|static_cast
argument_list|<
name|QWSWindowSurface
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|windowSurface
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMove
operator|&&
operator|!
name|isResize
condition|)
block|{
name|moveSurface
argument_list|(
name|surface
argument_list|,
name|QPoint
argument_list|(
name|x
operator|-
name|oldp
operator|.
name|x
argument_list|()
argument_list|,
name|y
operator|-
name|oldp
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QPoint
name|p
init|=
name|q
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|()
argument_list|)
decl_stmt|;
name|surface
operator|->
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|p
argument_list|,
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
else|else
block|{
if|if
condition|(
name|isMove
operator|&&
operator|!
name|isResize
condition|)
name|moveRect
argument_list|(
name|QRect
argument_list|(
name|oldPos
argument_list|,
name|olds
argument_list|)
argument_list|,
name|x
operator|-
name|oldPos
operator|.
name|x
argument_list|()
argument_list|,
name|y
operator|-
name|oldPos
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|invalidateBuffer_resizeHelper
argument_list|(
name|oldPos
argument_list|,
name|olds
argument_list|)
expr_stmt|;
block|}
block|}
comment|//### must have frame geometry correct before sending move/resize events
if|if
condition|(
name|isMove
condition|)
block|{
name|QMoveEvent
name|e
argument_list|(
name|q
operator|->
name|pos
argument_list|()
argument_list|,
name|oldPos
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|q
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isResize
condition|)
block|{
name|QResizeEvent
name|e
argument_list|(
name|r
operator|.
name|size
argument_list|()
argument_list|,
name|olds
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|q
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// not visible
if|if
condition|(
name|isMove
operator|&&
name|q
operator|->
name|pos
argument_list|()
operator|!=
name|oldPos
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_PendingMoveEvent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|isResize
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_PendingResizeEvent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setConstraints_sys
name|void
name|QWidgetPrivate
operator|::
name|setConstraints_sys
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|getScreen
name|QScreen
modifier|*
name|QWidgetPrivate
operator|::
name|getScreen
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|QScreen
modifier|*
argument_list|>
name|subScreens
init|=
name|qt_screen
operator|->
name|subScreens
argument_list|()
decl_stmt|;
if|if
condition|(
name|subScreens
operator|.
name|isEmpty
argument_list|()
operator|||
name|q
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
condition|)
return|return
name|qt_screen
return|;
specifier|const
name|int
name|screen
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenNumber
argument_list|(
name|q
argument_list|)
decl_stmt|;
return|return
name|qt_screen
operator|->
name|subScreens
argument_list|()
operator|.
name|at
argument_list|(
name|screen
operator|<
literal|0
condition|?
literal|0
else|:
name|screen
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|scroll_sys
name|void
name|QWidgetPrivate
operator|::
name|scroll_sys
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|scrollChildren
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
name|scrollRect
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scroll_sys
name|void
name|QWidgetPrivate
operator|::
name|scroll_sys
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
block|{
name|scrollRect
argument_list|(
name|r
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|metric
name|int
name|QWidget
operator|::
name|metric
parameter_list|(
name|PaintDeviceMetric
name|m
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
name|int
name|val
decl_stmt|;
if|if
condition|(
name|m
operator|==
name|PdmWidth
condition|)
block|{
name|val
operator|=
name|data
operator|->
name|crect
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|PdmWidthMM
condition|)
block|{
specifier|const
name|QScreen
modifier|*
name|screen
init|=
name|d
operator|->
name|getScreen
argument_list|()
decl_stmt|;
name|val
operator|=
name|data
operator|->
name|crect
operator|.
name|width
argument_list|()
operator|*
name|screen
operator|->
name|physicalWidth
argument_list|()
operator|/
name|screen
operator|->
name|width
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|PdmHeight
condition|)
block|{
name|val
operator|=
name|data
operator|->
name|crect
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|PdmHeightMM
condition|)
block|{
specifier|const
name|QScreen
modifier|*
name|screen
init|=
name|d
operator|->
name|getScreen
argument_list|()
decl_stmt|;
name|val
operator|=
name|data
operator|->
name|crect
operator|.
name|height
argument_list|()
operator|*
name|screen
operator|->
name|physicalHeight
argument_list|()
operator|/
name|screen
operator|->
name|height
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|PdmDepth
condition|)
block|{
return|return
name|qwsDisplay
argument_list|()
operator|->
name|depth
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|PdmDpiX
operator|||
name|m
operator|==
name|PdmPhysicalDpiX
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|extra
operator|&&
name|d
operator|->
name|extra
operator|->
name|customDpiX
condition|)
return|return
name|d
operator|->
name|extra
operator|->
name|customDpiX
return|;
elseif|else
if|if
condition|(
name|d
operator|->
name|parent
condition|)
return|return
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|parent
argument_list|)
operator|->
name|metric
argument_list|(
name|m
argument_list|)
return|;
specifier|const
name|QScreen
modifier|*
name|screen
init|=
name|d
operator|->
name|getScreen
argument_list|()
decl_stmt|;
return|return
name|qRound
argument_list|(
name|screen
operator|->
name|width
argument_list|()
operator|/
name|double
argument_list|(
name|screen
operator|->
name|physicalWidth
argument_list|()
operator|/
literal|25.4
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|PdmDpiY
operator|||
name|m
operator|==
name|PdmPhysicalDpiY
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|extra
operator|&&
name|d
operator|->
name|extra
operator|->
name|customDpiY
condition|)
return|return
name|d
operator|->
name|extra
operator|->
name|customDpiY
return|;
elseif|else
if|if
condition|(
name|d
operator|->
name|parent
condition|)
return|return
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|parent
argument_list|)
operator|->
name|metric
argument_list|(
name|m
argument_list|)
return|;
specifier|const
name|QScreen
modifier|*
name|screen
init|=
name|d
operator|->
name|getScreen
argument_list|()
decl_stmt|;
return|return
name|qRound
argument_list|(
name|screen
operator|->
name|height
argument_list|()
operator|/
name|double
argument_list|(
name|screen
operator|->
name|physicalHeight
argument_list|()
operator|/
literal|25.4
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|PdmNumColors
condition|)
block|{
name|QScreen
modifier|*
name|screen
init|=
name|d
operator|->
name|getScreen
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
name|screen
operator|->
name|colorCount
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
block|{
specifier|const
name|int
name|depth
init|=
name|qwsDisplay
argument_list|()
operator|->
name|depth
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|depth
condition|)
block|{
case|case
literal|1
case|:
name|ret
operator|=
literal|2
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|ret
operator|=
literal|256
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|ret
operator|=
literal|65536
expr_stmt|;
break|break;
case|case
literal|24
case|:
name|ret
operator|=
literal|16777216
expr_stmt|;
break|break;
case|case
literal|32
case|:
name|ret
operator|=
literal|2147483647
expr_stmt|;
break|break;
block|}
block|}
return|return
name|ret
return|;
block|}
else|else
block|{
name|val
operator|=
name|QPaintDevice
operator|::
name|metric
argument_list|(
name|m
argument_list|)
expr_stmt|;
comment|// XXX
block|}
return|return
name|val
return|;
block|}
end_function
begin_function
DECL|function|createSysExtra
name|void
name|QWidgetPrivate
operator|::
name|createSysExtra
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|deleteSysExtra
name|void
name|QWidgetPrivate
operator|::
name|deleteSysExtra
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|createTLSysExtra
name|void
name|QWidgetPrivate
operator|::
name|createTLSysExtra
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_QWS_MANAGER
name|extra
operator|->
name|topextra
operator|->
name|qwsManager
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|deleteTLSysExtra
name|void
name|QWidgetPrivate
operator|::
name|deleteTLSysExtra
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|registerDropSite
name|void
name|QWidgetPrivate
operator|::
name|registerDropSite
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|on
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|localRequestedRegion
name|QRegion
name|QWidgetPrivate
operator|::
name|localRequestedRegion
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
name|QRegion
name|r
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|extra
operator|&&
operator|!
name|extra
operator|->
name|mask
operator|.
name|isEmpty
argument_list|()
condition|)
name|r
operator|&=
name|extra
operator|->
name|mask
expr_stmt|;
return|return
name|r
return|;
block|}
end_function
begin_function
DECL|function|localAllocatedRegion
name|QRegion
name|QWidgetPrivate
operator|::
name|localAllocatedRegion
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
name|QWidgetBackingStore
modifier|*
name|wbs
init|=
name|q
operator|->
name|window
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|maybeBackingStore
argument_list|()
decl_stmt|;
name|QWindowSurface
modifier|*
name|ws
init|=
name|wbs
condition|?
name|wbs
operator|->
name|windowSurface
else|:
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|ws
condition|)
return|return
name|QRegion
argument_list|()
return|;
name|QRegion
name|r
init|=
cast|static_cast
argument_list|<
name|QWSWindowSurface
operator|*
argument_list|>
argument_list|(
name|ws
argument_list|)
operator|->
name|clipRegion
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|QPoint
name|off
init|=
name|q
operator|->
name|mapTo
argument_list|(
name|q
operator|->
name|window
argument_list|()
argument_list|,
name|QPoint
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|&=
name|localRequestedRegion
argument_list|()
operator|.
name|translated
argument_list|(
name|off
argument_list|)
expr_stmt|;
name|r
operator|.
name|translate
argument_list|(
operator|-
name|off
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
end_function
begin_function
DECL|function|intersects
specifier|inline
name|bool
name|QRect
operator|::
name|intersects
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|qMax
argument_list|(
name|x1
argument_list|,
name|r
operator|.
name|x1
argument_list|)
operator|<=
name|qMin
argument_list|(
name|x2
argument_list|,
name|r
operator|.
name|x2
argument_list|)
operator|&&
name|qMax
argument_list|(
name|y1
argument_list|,
name|r
operator|.
name|y1
argument_list|)
operator|<=
name|qMin
argument_list|(
name|y2
argument_list|,
name|r
operator|.
name|y2
argument_list|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|setMask_sys
name|void
name|QWidgetPrivate
operator|::
name|setMask_sys
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isVisible
argument_list|()
operator|||
operator|!
name|q
operator|->
name|isWindow
argument_list|()
condition|)
return|return;
name|data
operator|.
name|fstrut_dirty
operator|=
literal|true
expr_stmt|;
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|QWindowSurface
modifier|*
name|surface
init|=
name|extra
operator|->
name|topextra
operator|->
name|backingStore
operator|->
name|windowSurface
decl_stmt|;
if|if
condition|(
name|surface
condition|)
block|{
comment|// QWSWindowSurface::setGeometry() returns without doing anything
comment|// if old geom  == new geom. Therefore, we need to reset the old value.
name|surface
operator|->
name|QWindowSurface
operator|::
name|setGeometry
argument_list|(
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
name|surface
operator|->
name|setGeometry
argument_list|(
name|q
operator|->
name|frameGeometry
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateFrameStrut
name|void
name|QWidgetPrivate
operator|::
name|updateFrameStrut
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isVisible
argument_list|()
operator|||
operator|(
name|q
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
block|{
name|data
operator|.
name|fstrut_dirty
operator|=
name|q
operator|->
name|isVisible
argument_list|()
expr_stmt|;
return|return;
block|}
ifndef|#
directive|ifndef
name|QT_NO_QWS_MANAGER
if|if
condition|(
name|extra
operator|&&
name|extra
operator|->
name|topextra
operator|&&
name|extra
operator|->
name|topextra
operator|->
name|qwsManager
condition|)
block|{
name|QTLWExtra
modifier|*
name|topextra
init|=
name|extra
operator|->
name|topextra
decl_stmt|;
specifier|const
name|QRect
name|oldFrameStrut
init|=
name|topextra
operator|->
name|frameStrut
decl_stmt|;
specifier|const
name|QRect
name|contents
init|=
name|data
operator|.
name|crect
decl_stmt|;
name|QRegion
name|r
init|=
name|localRequestedRegion
argument_list|()
operator|.
name|translated
argument_list|(
name|contents
operator|.
name|topLeft
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|+=
name|extra
operator|->
name|topextra
operator|->
name|qwsManager
operator|->
name|region
argument_list|()
expr_stmt|;
specifier|const
name|QRect
name|frame
init|=
name|r
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
name|topextra
operator|->
name|frameStrut
operator|.
name|setCoords
argument_list|(
name|contents
operator|.
name|left
argument_list|()
operator|-
name|frame
operator|.
name|left
argument_list|()
argument_list|,
name|contents
operator|.
name|top
argument_list|()
operator|-
name|frame
operator|.
name|top
argument_list|()
argument_list|,
name|frame
operator|.
name|right
argument_list|()
operator|-
name|contents
operator|.
name|right
argument_list|()
argument_list|,
name|frame
operator|.
name|bottom
argument_list|()
operator|-
name|contents
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|topextra
operator|->
name|qwsManager
operator|->
name|repaintRegion
argument_list|(
name|QDecoration
operator|::
name|All
argument_list|,
name|QDecoration
operator|::
name|Normal
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|data
operator|.
name|fstrut_dirty
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|updateCursor
name|void
name|QWidgetPrivate
operator|::
name|updateCursor
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|overrideCursor
argument_list|()
condition|)
return|return;
if|if
condition|(
name|qt_last_x
operator|&&
operator|(
operator|!
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
operator|||
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
operator|==
name|q
operator|)
operator|&&
name|qt_last_cursor
operator|!=
operator|(
name|WId
operator|)
name|q
operator|->
name|cursor
argument_list|()
operator|.
name|handle
argument_list|()
condition|)
block|{
specifier|const
name|QPoint
name|pos
argument_list|(
operator|*
name|qt_last_x
argument_list|,
operator|*
name|qt_last_y
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|offset
init|=
name|q
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|localAllocatedRegion
argument_list|()
operator|.
name|contains
argument_list|(
name|pos
operator|-
name|offset
argument_list|)
condition|)
return|return;
specifier|const
name|QWidget
modifier|*
name|w
init|=
name|q
operator|->
name|childAt
argument_list|(
name|q
operator|->
name|mapFromGlobal
argument_list|(
name|pos
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|||
name|w
operator|->
name|cursor
argument_list|()
operator|.
name|handle
argument_list|()
operator|==
name|q
operator|->
name|cursor
argument_list|()
operator|.
name|handle
argument_list|()
condition|)
name|QWidget
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|selectCursor
argument_list|(
cast|const_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|q
argument_list|)
argument_list|,
name|q
operator|->
name|cursor
argument_list|()
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setWindowOpacity_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowOpacity_sys
parameter_list|(
name|qreal
name|level
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|createWinId
argument_list|()
expr_stmt|;
name|QWidget
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|setOpacity
argument_list|(
name|q
operator|->
name|data
operator|->
name|winid
argument_list|,
name|topData
argument_list|()
operator|->
name|opacity
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//static QSingleCleanupHandler<QWSPaintEngine> qt_paintengine_cleanup_handler;
end_comment
begin_comment
comment|//static QWSPaintEngine *qt_widget_paintengine = 0;
end_comment
begin_function
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|QWidget
operator|::
name|paintEngine
parameter_list|()
specifier|const
block|{
name|qWarning
argument_list|(
literal|"QWidget::paintEngine: Should no longer be called"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
comment|//##### @@@
comment|//     if (!qt_widget_paintengine) {
comment|//         qt_widget_paintengine = new QRasterPaintEngine();
comment|//         qt_paintengine_cleanup_handler.set(&qt_widget_paintengine);
comment|//     }
comment|//     if (qt_widget_paintengine->isActive()) {
comment|//         if (d->extraPaintEngine)
comment|//             return d->extraPaintEngine;
comment|//         const_cast<QWidget *>(this)->d_func()->extraPaintEngine = new QRasterPaintEngine();
comment|//         return d->extraPaintEngine;
comment|//     }
comment|//    return qt_widget_paintengine;
block|}
end_function
begin_function
DECL|function|createDefaultWindowSurface_sys
name|QWindowSurface
modifier|*
name|QWidgetPrivate
operator|::
name|createDefaultWindowSurface_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
condition|)
return|return
literal|0
return|;
name|q
operator|->
name|ensurePolished
argument_list|()
expr_stmt|;
return|return
name|qt_screen
operator|->
name|createSurface
argument_list|(
name|q
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setModal_sys
name|void
name|QWidgetPrivate
operator|::
name|setModal_sys
parameter_list|()
block|{ }
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
