begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QLISTVIEW_P_H
end_ifndef
begin_define
DECL|macro|QLISTVIEW_P_H
define|#
directive|define
name|QLISTVIEW_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of other Qt classes.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"private/qabstractitemview_p.h"
end_include
begin_include
include|#
directive|include
file|"qrubberband.h"
end_include
begin_include
include|#
directive|include
file|"qbitarray.h"
end_include
begin_include
include|#
directive|include
file|"qbsptree_p.h"
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<qscrollbar.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_LISTVIEW
end_ifndef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|QListViewItem
block|{
name|friend
name|class
name|QListViewPrivate
decl_stmt|;
name|friend
name|class
name|QListModeViewBase
decl_stmt|;
name|friend
name|class
name|QIconModeViewBase
decl_stmt|;
name|public
label|:
specifier|inline
name|QListViewItem
argument_list|()
operator|:
name|x
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|y
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|w
argument_list|(
literal|0
argument_list|)
operator|,
name|h
argument_list|(
literal|0
argument_list|)
operator|,
name|indexHint
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|visited
argument_list|(
literal|0xffff
argument_list|)
block|{}
specifier|inline
name|QListViewItem
argument_list|(
specifier|const
name|QListViewItem
operator|&
name|other
argument_list|)
operator|:
name|x
argument_list|(
name|other
operator|.
name|x
argument_list|)
operator|,
name|y
argument_list|(
name|other
operator|.
name|y
argument_list|)
operator|,
name|w
argument_list|(
name|other
operator|.
name|w
argument_list|)
operator|,
name|h
argument_list|(
name|other
operator|.
name|h
argument_list|)
operator|,
name|indexHint
argument_list|(
name|other
operator|.
name|indexHint
argument_list|)
operator|,
name|visited
argument_list|(
argument|other.visited
argument_list|)
block|{}
specifier|inline
name|QListViewItem
argument_list|(
argument|QRect r
argument_list|,
argument|int i
argument_list|)
operator|:
name|x
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|)
operator|,
name|y
argument_list|(
name|r
operator|.
name|y
argument_list|()
argument_list|)
operator|,
name|w
argument_list|(
name|qMin
argument_list|(
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|SHRT_MAX
argument_list|)
argument_list|)
operator|,
name|h
argument_list|(
name|qMin
argument_list|(
name|r
operator|.
name|height
argument_list|()
argument_list|,
name|SHRT_MAX
argument_list|)
argument_list|)
operator|,
name|indexHint
argument_list|(
name|i
argument_list|)
operator|,
name|visited
argument_list|(
literal|0xffff
argument_list|)
block|{}
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QListViewItem
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|(
name|x
operator|==
name|other
operator|.
name|x
operator|&&
name|y
operator|==
name|other
operator|.
name|y
operator|&&
name|w
operator|==
name|other
operator|.
name|w
operator|&&
name|h
operator|==
name|other
operator|.
name|h
operator|&&
name|indexHint
operator|==
name|other
operator|.
name|indexHint
operator|)
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QListViewItem
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
specifier|inline
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|rect
argument_list|()
operator|.
name|isValid
argument_list|()
operator|&&
operator|(
name|indexHint
operator|>
operator|-
literal|1
operator|)
return|;
block|}
specifier|inline
name|void
name|invalidate
parameter_list|()
block|{
name|x
operator|=
operator|-
literal|1
expr_stmt|;
name|y
operator|=
operator|-
literal|1
expr_stmt|;
name|w
operator|=
literal|0
expr_stmt|;
name|h
operator|=
literal|0
expr_stmt|;
block|}
specifier|inline
name|void
name|resize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
name|w
operator|=
name|qMin
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|SHRT_MAX
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMin
argument_list|(
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|SHRT_MAX
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|move
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|position
parameter_list|)
block|{
name|x
operator|=
name|position
operator|.
name|x
argument_list|()
expr_stmt|;
name|y
operator|=
name|position
operator|.
name|y
argument_list|()
expr_stmt|;
block|}
specifier|inline
name|int
name|width
argument_list|()
specifier|const
block|{
return|return
name|w
return|;
block|}
specifier|inline
name|int
name|height
argument_list|()
specifier|const
block|{
return|return
name|h
return|;
block|}
name|private
label|:
specifier|inline
name|QRect
name|rect
argument_list|()
specifier|const
block|{
return|return
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
return|;
block|}
name|int
name|x
decl_stmt|,
name|y
decl_stmt|;
name|short
name|w
decl_stmt|,
name|h
decl_stmt|;
name|mutable
name|int
name|indexHint
decl_stmt|;
name|uint
name|visited
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_struct
DECL|struct|QListViewLayoutInfo
struct|struct
name|QListViewLayoutInfo
block|{
DECL|member|bounds
name|QRect
name|bounds
decl_stmt|;
DECL|member|grid
name|QSize
name|grid
decl_stmt|;
DECL|member|spacing
name|int
name|spacing
decl_stmt|;
DECL|member|first
name|int
name|first
decl_stmt|;
DECL|member|last
name|int
name|last
decl_stmt|;
DECL|member|wrap
name|bool
name|wrap
decl_stmt|;
DECL|member|flow
name|QListView
operator|::
name|Flow
name|flow
expr_stmt|;
DECL|member|max
name|int
name|max
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|QListView
name|class
name|QListView
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QListViewPrivate
name|class
name|QListViewPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QCommonListViewBase
block|{
name|public
label|:
specifier|inline
name|QCommonListViewBase
argument_list|(
name|QListView
operator|*
name|q
argument_list|,
name|QListViewPrivate
operator|*
name|d
argument_list|)
operator|:
name|dd
argument_list|(
name|d
argument_list|)
operator|,
name|qq
argument_list|(
name|q
argument_list|)
operator|,
name|batchStartRow
argument_list|(
literal|0
argument_list|)
operator|,
name|batchSavedDeltaSeg
argument_list|(
literal|0
argument_list|)
block|{}
name|virtual
operator|~
name|QCommonListViewBase
argument_list|()
block|{}
comment|//common interface
name|virtual
name|int
name|itemIndex
argument_list|(
argument|const QListViewItem&item
argument_list|)
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|QListViewItem
name|indexToListViewItem
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|index
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|bool
name|doBatchedItemLayout
parameter_list|(
specifier|const
name|QListViewLayoutInfo
modifier|&
name|info
parameter_list|,
name|int
name|max
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|clear
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|void
name|setRowCount
parameter_list|(
name|int
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QVector
operator|<
name|QModelIndex
operator|>
name|intersectingSet
argument_list|(
argument|const QRect&area
argument_list|)
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|void
name|dataChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|int
name|horizontalScrollToValue
argument_list|(
name|int
name|index
argument_list|,
name|QListView
operator|::
name|ScrollHint
name|hint
argument_list|,
name|bool
name|leftOf
argument_list|,
name|bool
name|rightOf
argument_list|,
specifier|const
name|QRect
operator|&
name|area
argument_list|,
specifier|const
name|QRect
operator|&
name|rect
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|int
name|verticalScrollToValue
argument_list|(
name|int
name|index
argument_list|,
name|QListView
operator|::
name|ScrollHint
name|hint
argument_list|,
name|bool
name|above
argument_list|,
name|bool
name|below
argument_list|,
specifier|const
name|QRect
operator|&
name|area
argument_list|,
specifier|const
name|QRect
operator|&
name|rect
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|scrollContentsBy
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
name|bool
name|scrollElasticBand
parameter_list|)
function_decl|;
name|virtual
name|QRect
name|mapToViewport
argument_list|(
specifier|const
name|QRect
operator|&
name|rect
argument_list|)
decl|const
block|{
return|return
name|rect
return|;
block|}
name|virtual
name|int
name|horizontalOffset
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|int
name|verticalOffset
argument_list|()
specifier|const
block|{
return|return
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
return|;
block|}
name|virtual
name|void
name|updateHorizontalScrollBar
parameter_list|(
specifier|const
name|QSize
modifier|&
name|step
parameter_list|)
function_decl|;
name|virtual
name|void
name|updateVerticalScrollBar
parameter_list|(
specifier|const
name|QSize
modifier|&
name|step
parameter_list|)
function_decl|;
name|virtual
name|void
name|appendHiddenRow
parameter_list|(
name|int
name|row
parameter_list|)
function_decl|;
name|virtual
name|void
name|removeHiddenRow
parameter_list|(
name|int
name|row
parameter_list|)
function_decl|;
name|virtual
name|void
name|setPositionForIndex
parameter_list|(
specifier|const
name|QPoint
modifier|&
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
block|{ }
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|virtual
name|void
name|paintDragDrop
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|filterDragMoveEvent
parameter_list|(
name|QDragMoveEvent
modifier|*
parameter_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|filterDragLeaveEvent
parameter_list|(
name|QDragLeaveEvent
modifier|*
parameter_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|filterDropEvent
parameter_list|(
name|QDropEvent
modifier|*
parameter_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|filterStartDrag
argument_list|(
name|Qt
operator|::
name|DropActions
argument_list|)
block|{
return|return
name|false
return|;
block|}
endif|#
directive|endif
comment|//other inline members
specifier|inline
name|int
name|spacing
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|isWrapping
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QSize
name|gridSize
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QListView
operator|::
name|Flow
name|flow
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QListView
operator|::
name|Movement
name|movement
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QPoint
name|offset
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QPoint
name|pressedPosition
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|uniformItemSizes
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|int
name|column
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QScrollBar
operator|*
name|verticalScrollBar
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QScrollBar
operator|*
name|horizontalScrollBar
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QListView
operator|::
name|ScrollMode
name|verticalScrollMode
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QListView
operator|::
name|ScrollMode
name|horizontalScrollMode
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QModelIndex
name|modelIndex
argument_list|(
name|int
name|row
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|int
name|rowCount
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QStyleOptionViewItemV4
name|viewOptions
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QWidget
operator|*
name|viewport
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QRect
name|clipRect
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QSize
name|cachedItemSize
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QRect
name|viewItemRect
argument_list|(
specifier|const
name|QListViewItem
operator|&
name|item
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QSize
name|itemSize
argument_list|(
specifier|const
name|QStyleOptionViewItemV2
operator|&
name|opt
argument_list|,
specifier|const
name|QModelIndex
operator|&
name|idx
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QAbstractItemDelegate
modifier|*
name|delegate
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|idx
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|bool
name|isHidden
argument_list|(
name|int
name|row
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|int
name|hiddenCount
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|isRightToLeft
argument_list|()
specifier|const
expr_stmt|;
name|QListViewPrivate
modifier|*
name|dd
decl_stmt|;
name|QListView
modifier|*
name|qq
decl_stmt|;
name|QSize
name|contentsSize
decl_stmt|;
name|int
name|batchStartRow
decl_stmt|;
name|int
name|batchSavedDeltaSeg
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|QListModeViewBase
range|:
name|public
name|QCommonListViewBase
block|{
name|public
operator|:
name|QListModeViewBase
argument_list|(
name|QListView
operator|*
name|q
argument_list|,
name|QListViewPrivate
operator|*
name|d
argument_list|)
operator|:
name|QCommonListViewBase
argument_list|(
argument|q
argument_list|,
argument|d
argument_list|)
block|{}
name|QVector
operator|<
name|int
operator|>
name|flowPositions
block|;
name|QVector
operator|<
name|int
operator|>
name|segmentPositions
block|;
name|QVector
operator|<
name|int
operator|>
name|segmentStartRows
block|;
name|QVector
operator|<
name|int
operator|>
name|segmentExtents
block|;
name|QVector
operator|<
name|int
operator|>
name|scrollValueMap
block|;
comment|// used when laying out in batches
name|int
name|batchSavedPosition
block|;
comment|//reimplementations
name|int
name|itemIndex
argument_list|(
argument|const QListViewItem&item
argument_list|)
specifier|const
block|{
return|return
name|item
operator|.
name|indexHint
return|;
block|}
name|QListViewItem
name|indexToListViewItem
argument_list|(
argument|const QModelIndex&index
argument_list|)
specifier|const
block|;
name|bool
name|doBatchedItemLayout
argument_list|(
argument|const QListViewLayoutInfo&info
argument_list|,
argument|int max
argument_list|)
block|;
name|void
name|clear
argument_list|()
block|;
name|void
name|setRowCount
argument_list|(
argument|int rowCount
argument_list|)
block|{
name|flowPositions
operator|.
name|resize
argument_list|(
name|rowCount
argument_list|)
block|; }
name|QVector
operator|<
name|QModelIndex
operator|>
name|intersectingSet
argument_list|(
argument|const QRect&area
argument_list|)
specifier|const
block|;
name|void
name|dataChanged
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
specifier|const
name|QModelIndex
operator|&
argument_list|)
block|;
name|int
name|horizontalScrollToValue
argument_list|(
argument|int index
argument_list|,
argument|QListView::ScrollHint hint
argument_list|,
argument|bool leftOf
argument_list|,
argument|bool rightOf
argument_list|,
argument|const QRect&area
argument_list|,
argument|const QRect&rect
argument_list|)
specifier|const
block|;
name|int
name|verticalScrollToValue
argument_list|(
argument|int index
argument_list|,
argument|QListView::ScrollHint hint
argument_list|,
argument|bool above
argument_list|,
argument|bool below
argument_list|,
argument|const QRect&area
argument_list|,
argument|const QRect&rect
argument_list|)
specifier|const
block|;
name|void
name|scrollContentsBy
argument_list|(
argument|int dx
argument_list|,
argument|int dy
argument_list|,
argument|bool scrollElasticBand
argument_list|)
block|;
name|QRect
name|mapToViewport
argument_list|(
argument|const QRect&rect
argument_list|)
specifier|const
block|;
name|int
name|horizontalOffset
argument_list|()
specifier|const
block|;
name|int
name|verticalOffset
argument_list|()
specifier|const
block|;
name|void
name|updateHorizontalScrollBar
argument_list|(
specifier|const
name|QSize
operator|&
name|step
argument_list|)
block|;
name|void
name|updateVerticalScrollBar
argument_list|(
specifier|const
name|QSize
operator|&
name|step
argument_list|)
block|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|void
name|paintDragDrop
argument_list|(
name|QPainter
operator|*
name|painter
argument_list|)
block|;
comment|// The next two methods are to be used on LefToRight flow only.
comment|// WARNING: Plenty of duplicated code from QAbstractItemView{,Private}.
name|QAbstractItemView
operator|::
name|DropIndicatorPosition
name|position
argument_list|(
argument|const QPoint&pos
argument_list|,
argument|const QRect&rect
argument_list|,
argument|const QModelIndex&idx
argument_list|)
specifier|const
block|;
name|void
name|dragMoveEvent
argument_list|(
name|QDragMoveEvent
operator|*
name|e
argument_list|)
block|;
name|bool
name|dropOn
argument_list|(
name|QDropEvent
operator|*
name|event
argument_list|,
name|int
operator|*
name|row
argument_list|,
name|int
operator|*
name|col
argument_list|,
name|QModelIndex
operator|*
name|index
argument_list|)
block|;
endif|#
directive|endif
name|private
operator|:
name|QPoint
name|initStaticLayout
argument_list|(
specifier|const
name|QListViewLayoutInfo
operator|&
name|info
argument_list|)
block|;
name|void
name|doStaticLayout
argument_list|(
specifier|const
name|QListViewLayoutInfo
operator|&
name|info
argument_list|)
block|;
name|int
name|perItemScrollToValue
argument_list|(
argument|int index
argument_list|,
argument|int value
argument_list|,
argument|int height
argument_list|,
argument|QAbstractItemView::ScrollHint hint
argument_list|,
argument|Qt::Orientation orientation
argument_list|,
argument|bool wrap
argument_list|,
argument|int extent
argument_list|)
specifier|const
block|;
name|int
name|perItemScrollingPageSteps
argument_list|(
argument|int length
argument_list|,
argument|int bounds
argument_list|,
argument|bool wrap
argument_list|)
specifier|const
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QIconModeViewBase
range|:
name|public
name|QCommonListViewBase
block|{
name|public
operator|:
name|QIconModeViewBase
argument_list|(
name|QListView
operator|*
name|q
argument_list|,
name|QListViewPrivate
operator|*
name|d
argument_list|)
operator|:
name|QCommonListViewBase
argument_list|(
name|q
argument_list|,
name|d
argument_list|)
block|,
name|interSectingVector
argument_list|(
literal|0
argument_list|)
block|{}
name|QBspTree
name|tree
block|;
name|QVector
operator|<
name|QListViewItem
operator|>
name|items
block|;
name|QBitArray
name|moved
block|;
name|QVector
operator|<
name|QModelIndex
operator|>
name|draggedItems
block|;
comment|// indices to the tree.itemVector
name|mutable
name|QPoint
name|draggedItemsPos
block|;
comment|// used when laying out in batches
name|QVector
operator|<
name|QModelIndex
operator|>
operator|*
name|interSectingVector
block|;
comment|//used from within intersectingSet
comment|//reimplementations
name|int
name|itemIndex
argument_list|(
argument|const QListViewItem&item
argument_list|)
specifier|const
block|;
name|QListViewItem
name|indexToListViewItem
argument_list|(
argument|const QModelIndex&index
argument_list|)
specifier|const
block|;
name|bool
name|doBatchedItemLayout
argument_list|(
argument|const QListViewLayoutInfo&info
argument_list|,
argument|int max
argument_list|)
block|;
name|void
name|clear
argument_list|()
block|;
name|void
name|setRowCount
argument_list|(
argument|int rowCount
argument_list|)
block|;
name|QVector
operator|<
name|QModelIndex
operator|>
name|intersectingSet
argument_list|(
argument|const QRect&area
argument_list|)
specifier|const
block|;
name|void
name|scrollContentsBy
argument_list|(
argument|int dx
argument_list|,
argument|int dy
argument_list|,
argument|bool scrollElasticBand
argument_list|)
block|;
name|void
name|dataChanged
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|topLeft
argument_list|,
specifier|const
name|QModelIndex
operator|&
name|bottomRight
argument_list|)
block|;
name|void
name|appendHiddenRow
argument_list|(
argument|int row
argument_list|)
block|;
name|void
name|removeHiddenRow
argument_list|(
argument|int row
argument_list|)
block|;
name|void
name|setPositionForIndex
argument_list|(
specifier|const
name|QPoint
operator|&
name|position
argument_list|,
specifier|const
name|QModelIndex
operator|&
name|index
argument_list|)
block|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|void
name|paintDragDrop
argument_list|(
name|QPainter
operator|*
name|painter
argument_list|)
block|;
name|bool
name|filterDragMoveEvent
argument_list|(
name|QDragMoveEvent
operator|*
argument_list|)
block|;
name|bool
name|filterDragLeaveEvent
argument_list|(
name|QDragLeaveEvent
operator|*
argument_list|)
block|;
name|bool
name|filterDropEvent
argument_list|(
name|QDropEvent
operator|*
name|e
argument_list|)
block|;
name|bool
name|filterStartDrag
argument_list|(
name|Qt
operator|::
name|DropActions
argument_list|)
block|;
endif|#
directive|endif
name|private
operator|:
name|void
name|initBspTree
argument_list|(
specifier|const
name|QSize
operator|&
name|contents
argument_list|)
block|;
name|QPoint
name|initDynamicLayout
argument_list|(
specifier|const
name|QListViewLayoutInfo
operator|&
name|info
argument_list|)
block|;
name|void
name|doDynamicLayout
argument_list|(
specifier|const
name|QListViewLayoutInfo
operator|&
name|info
argument_list|)
block|;
specifier|static
name|void
name|addLeaf
argument_list|(
argument|QVector<int>&leaf
argument_list|,
argument|const QRect&area
argument_list|,
argument|uint visited
argument_list|,
argument|QBspTree::Data data
argument_list|)
block|;
name|QRect
name|itemsRect
argument_list|(
argument|const QVector<QModelIndex>&indexes
argument_list|)
specifier|const
block|;
name|QRect
name|draggedItemsRect
argument_list|()
specifier|const
block|;
name|QPoint
name|snapToGrid
argument_list|(
argument|const QPoint&pos
argument_list|)
specifier|const
block|;
name|void
name|updateContentsSize
argument_list|()
block|;
name|QPoint
name|draggedItemsDelta
argument_list|()
specifier|const
block|;
name|void
name|drawItems
argument_list|(
argument|QPainter *painter
argument_list|,
argument|const QVector<QModelIndex>&indexes
argument_list|)
specifier|const
block|;
name|void
name|moveItem
argument_list|(
argument|int index
argument_list|,
argument|const QPoint&dest
argument_list|)
block|;  }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QListViewPrivate
range|:
name|public
name|QAbstractItemViewPrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QListView
argument_list|)
name|public
operator|:
name|QListViewPrivate
argument_list|()
block|;
operator|~
name|QListViewPrivate
argument_list|()
block|;
name|void
name|clear
argument_list|()
block|;
name|void
name|prepareItemsLayout
argument_list|()
block|;
name|bool
name|doItemsLayout
argument_list|(
argument|int num
argument_list|)
block|;
specifier|inline
name|QVector
operator|<
name|QModelIndex
operator|>
name|intersectingSet
argument_list|(
argument|const QRect&area
argument_list|,
argument|bool doLayout = true
argument_list|)
specifier|const
block|{
if|if
condition|(
name|doLayout
condition|)
name|executePostedLayout
argument_list|()
expr_stmt|;
name|QRect
name|a
operator|=
operator|(
name|q_func
argument_list|()
operator|->
name|isRightToLeft
argument_list|()
condition|?
name|flipX
argument_list|(
name|area
operator|.
name|normalized
argument_list|()
argument_list|)
else|:
name|area
operator|.
name|normalized
argument_list|()
operator|)
block|;
return|return
name|commonListView
operator|->
name|intersectingSet
argument_list|(
name|a
argument_list|)
return|;
block|}
end_decl_stmt
begin_function
specifier|inline
name|void
name|resetBatchStartRow
parameter_list|()
block|{
name|commonListView
operator|->
name|batchStartRow
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|int
name|batchStartRow
argument_list|()
specifier|const
block|{
return|return
name|commonListView
operator|->
name|batchStartRow
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QSize
name|contentsSize
argument_list|()
specifier|const
block|{
return|return
name|commonListView
operator|->
name|contentsSize
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setContentsSize
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
block|{
name|commonListView
operator|->
name|contentsSize
operator|=
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
specifier|inline
name|int
name|flipX
argument_list|(
name|int
name|x
argument_list|)
decl|const
block|{
return|return
name|qMax
argument_list|(
name|viewport
operator|->
name|width
argument_list|()
argument_list|,
name|contentsSize
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
operator|-
name|x
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|QPoint
name|flipX
argument_list|(
specifier|const
name|QPoint
operator|&
name|p
argument_list|)
decl|const
block|{
return|return
name|QPoint
argument_list|(
name|flipX
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|QRect
name|flipX
argument_list|(
specifier|const
name|QRect
operator|&
name|r
argument_list|)
decl|const
block|{
return|return
name|QRect
argument_list|(
name|flipX
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|)
operator|-
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|QRect
name|viewItemRect
argument_list|(
specifier|const
name|QListViewItem
operator|&
name|item
argument_list|)
decl|const
block|{
if|if
condition|(
name|q_func
argument_list|()
operator|->
name|isRightToLeft
argument_list|()
condition|)
return|return
name|flipX
argument_list|(
name|item
operator|.
name|rect
argument_list|()
argument_list|)
return|;
return|return
name|item
operator|.
name|rect
argument_list|()
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|QListViewItem
name|indexToListViewItem
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|index
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|inline
name|QModelIndex
name|listViewItemToIndex
argument_list|(
specifier|const
name|QListViewItem
operator|&
name|item
argument_list|)
decl|const
block|{
return|return
name|model
operator|->
name|index
argument_list|(
name|commonListView
operator|->
name|itemIndex
argument_list|(
name|item
argument_list|)
argument_list|,
name|column
argument_list|,
name|root
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|QRect
name|rectForIndex
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|index
argument_list|)
decl|const
block|{
if|if
condition|(
operator|!
name|isIndexValid
argument_list|(
name|index
argument_list|)
operator|||
name|index
operator|.
name|parent
argument_list|()
operator|!=
name|root
operator|||
name|index
operator|.
name|column
argument_list|()
operator|!=
name|column
operator|||
name|isHidden
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
condition|)
return|return
name|QRect
argument_list|()
return|;
name|executePostedLayout
argument_list|()
expr_stmt|;
return|return
name|viewItemRect
argument_list|(
name|indexToListViewItem
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt
begin_function
name|void
name|viewUpdateGeometries
parameter_list|()
block|{
name|q_func
argument_list|()
operator|->
name|updateGeometries
argument_list|()
expr_stmt|;
block|}
end_function
begin_decl_stmt
name|QRect
name|mapToViewport
argument_list|(
specifier|const
name|QRect
operator|&
name|rect
argument_list|,
name|bool
name|extend
operator|=
name|true
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QModelIndex
name|closestIndex
argument_list|(
specifier|const
name|QRect
operator|&
name|target
argument_list|,
specifier|const
name|QVector
operator|<
name|QModelIndex
operator|>
operator|&
name|candidates
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QSize
name|itemSize
argument_list|(
specifier|const
name|QStyleOptionViewItem
operator|&
name|option
argument_list|,
specifier|const
name|QModelIndex
operator|&
name|index
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|selectionAllowed
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|index
argument_list|)
decl|const
block|{
if|if
condition|(
name|viewMode
operator|==
name|QListView
operator|::
name|ListMode
operator|&&
operator|!
name|showElasticBand
condition|)
return|return
name|index
operator|.
name|isValid
argument_list|()
return|;
return|return
name|true
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|int
name|horizontalScrollToValue
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|index
argument_list|,
specifier|const
name|QRect
operator|&
name|rect
argument_list|,
name|QListView
operator|::
name|ScrollHint
name|hint
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|verticalScrollToValue
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|index
argument_list|,
specifier|const
name|QRect
operator|&
name|rect
argument_list|,
name|QListView
operator|::
name|ScrollHint
name|hint
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QItemSelection
name|selection
argument_list|(
specifier|const
name|QRect
operator|&
name|rect
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|void
name|selectAll
argument_list|(
name|QItemSelectionModel
operator|::
name|SelectionFlags
name|command
argument_list|)
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_expr_stmt
name|virtual
name|QAbstractItemView
operator|::
name|DropIndicatorPosition
name|position
argument_list|(
argument|const QPoint&pos
argument_list|,
argument|const QRect&rect
argument_list|,
argument|const QModelIndex&idx
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|bool
name|dropOn
parameter_list|(
name|QDropEvent
modifier|*
name|event
parameter_list|,
name|int
modifier|*
name|row
parameter_list|,
name|int
modifier|*
name|col
parameter_list|,
name|QModelIndex
modifier|*
name|index
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function
specifier|inline
name|void
name|setGridSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
name|grid
operator|=
name|size
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|QSize
name|gridSize
argument_list|()
specifier|const
block|{
return|return
name|grid
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setWrapping
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|wrap
operator|=
name|b
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|bool
name|isWrapping
argument_list|()
specifier|const
block|{
return|return
name|wrap
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setSpacing
parameter_list|(
name|int
name|s
parameter_list|)
block|{
name|space
operator|=
name|s
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|int
name|spacing
argument_list|()
specifier|const
block|{
return|return
name|space
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setSelectionRectVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
name|showElasticBand
operator|=
name|visible
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|bool
name|isSelectionRectVisible
argument_list|()
specifier|const
block|{
return|return
name|showElasticBand
return|;
block|}
end_expr_stmt
begin_decl_stmt
specifier|inline
name|QModelIndex
name|modelIndex
argument_list|(
name|int
name|row
argument_list|)
decl|const
block|{
return|return
name|model
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|root
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|bool
name|isHidden
argument_list|(
name|int
name|row
argument_list|)
decl|const
block|{
name|QModelIndex
name|idx
init|=
name|model
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|root
argument_list|)
decl_stmt|;
return|return
name|isPersistent
argument_list|(
name|idx
argument_list|)
operator|&&
name|hiddenRows
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|bool
name|isHiddenOrDisabled
argument_list|(
name|int
name|row
argument_list|)
decl|const
block|{
return|return
name|isHidden
argument_list|(
name|row
argument_list|)
operator|||
operator|!
name|isIndexEnabled
argument_list|(
name|modelIndex
argument_list|(
name|row
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|void
name|removeCurrentAndDisabled
argument_list|(
name|QVector
operator|<
name|QModelIndex
operator|>
operator|*
name|indexes
argument_list|,
specifier|const
name|QModelIndex
operator|&
name|current
argument_list|)
decl|const
block|{
name|QVector
operator|<
name|QModelIndex
operator|>
operator|::
name|iterator
name|it
operator|=
name|indexes
operator|->
name|begin
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|!=
name|indexes
operator|->
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|isIndexEnabled
argument_list|(
operator|*
name|it
argument_list|)
operator|||
operator|(
operator|*
name|it
operator|)
operator|==
name|current
condition|)
name|indexes
operator|->
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
else|else
operator|++
name|it
expr_stmt|;
block|}
block|}
end_decl_stmt
begin_function_decl
name|void
name|scrollElasticBandBy
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|QItemViewPaintPairs
name|draggablePaintPairs
argument_list|(
specifier|const
name|QModelIndexList
operator|&
name|indexes
argument_list|,
name|QRect
operator|*
name|r
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function
name|void
name|emitIndexesMoved
parameter_list|(
specifier|const
name|QModelIndexList
modifier|&
name|indexes
parameter_list|)
block|{
name|emit
name|q_func
argument_list|()
operator|->
name|indexesMoved
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
name|QCommonListViewBase
modifier|*
name|commonListView
decl_stmt|;
end_decl_stmt
begin_comment
comment|// ### FIXME: see if we can move the members into the dynamic/static classes
end_comment
begin_decl_stmt
name|bool
name|wrap
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|space
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QSize
name|grid
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QListView
operator|::
name|Flow
name|flow
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QListView
operator|::
name|Movement
name|movement
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QListView
operator|::
name|ResizeMode
name|resizeMode
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QListView
operator|::
name|LayoutMode
name|layoutMode
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QListView
operator|::
name|ViewMode
name|viewMode
expr_stmt|;
end_expr_stmt
begin_comment
comment|// the properties controlling the
end_comment
begin_comment
comment|// icon- or list-view modes
end_comment
begin_enum
enum|enum
name|ModeProperties
block|{
name|Wrap
init|=
literal|1
block|,
name|Spacing
init|=
literal|2
block|,
name|GridSize
init|=
literal|4
block|,
name|Flow
init|=
literal|8
block|,
name|Movement
init|=
literal|16
block|,
name|ResizeMode
init|=
literal|32
block|,
name|SelectionRectVisible
init|=
literal|64
block|}
enum|;
end_enum
begin_decl_stmt
name|uint
name|modeProperties
range|:
literal|8
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QRect
name|layoutBounds
decl_stmt|;
end_decl_stmt
begin_comment
comment|// timers
end_comment
begin_decl_stmt
name|QBasicTimer
name|batchLayoutTimer
decl_stmt|;
end_decl_stmt
begin_comment
comment|// used for hidden items
end_comment
begin_expr_stmt
name|QSet
operator|<
name|QPersistentModelIndex
operator|>
name|hiddenRows
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|int
name|column
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|uniformItemSizes
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|mutable
name|QSize
name|cachedItemSize
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|batchSize
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QRect
name|elasticBand
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|showElasticBand
decl_stmt|;
end_decl_stmt
begin_comment
unit|};
comment|// inline implementations
end_comment
begin_expr_stmt
DECL|function|spacing
specifier|inline
name|int
name|QCommonListViewBase
operator|::
name|spacing
argument_list|()
specifier|const
block|{
return|return
name|dd
operator|->
name|spacing
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isWrapping
specifier|inline
name|bool
name|QCommonListViewBase
operator|::
name|isWrapping
argument_list|()
specifier|const
block|{
return|return
name|dd
operator|->
name|isWrapping
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|gridSize
specifier|inline
name|QSize
name|QCommonListViewBase
operator|::
name|gridSize
argument_list|()
specifier|const
block|{
return|return
name|dd
operator|->
name|gridSize
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|flow
specifier|inline
name|QListView
operator|::
name|Flow
name|QCommonListViewBase
operator|::
name|flow
argument_list|()
specifier|const
block|{
return|return
name|dd
operator|->
name|flow
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|movement
specifier|inline
name|QListView
operator|::
name|Movement
name|QCommonListViewBase
operator|::
name|movement
argument_list|()
specifier|const
block|{
return|return
name|dd
operator|->
name|movement
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|offset
specifier|inline
name|QPoint
name|QCommonListViewBase
operator|::
name|offset
argument_list|()
specifier|const
block|{
return|return
name|dd
operator|->
name|offset
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|pressedPosition
specifier|inline
name|QPoint
name|QCommonListViewBase
operator|::
name|pressedPosition
argument_list|()
specifier|const
block|{
return|return
name|dd
operator|->
name|pressedPosition
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|uniformItemSizes
specifier|inline
name|bool
name|QCommonListViewBase
operator|::
name|uniformItemSizes
argument_list|()
specifier|const
block|{
return|return
name|dd
operator|->
name|uniformItemSizes
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|column
specifier|inline
name|int
name|QCommonListViewBase
operator|::
name|column
argument_list|()
specifier|const
block|{
return|return
name|dd
operator|->
name|column
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|verticalScrollBar
specifier|inline
name|QScrollBar
operator|*
name|QCommonListViewBase
operator|::
name|verticalScrollBar
argument_list|()
specifier|const
block|{
return|return
name|qq
operator|->
name|verticalScrollBar
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|horizontalScrollBar
specifier|inline
name|QScrollBar
operator|*
name|QCommonListViewBase
operator|::
name|horizontalScrollBar
argument_list|()
specifier|const
block|{
return|return
name|qq
operator|->
name|horizontalScrollBar
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|verticalScrollMode
specifier|inline
name|QListView
operator|::
name|ScrollMode
name|QCommonListViewBase
operator|::
name|verticalScrollMode
argument_list|()
specifier|const
block|{
return|return
name|qq
operator|->
name|verticalScrollMode
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|horizontalScrollMode
specifier|inline
name|QListView
operator|::
name|ScrollMode
name|QCommonListViewBase
operator|::
name|horizontalScrollMode
argument_list|()
specifier|const
block|{
return|return
name|qq
operator|->
name|horizontalScrollMode
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|modelIndex
specifier|inline
name|QModelIndex
name|QCommonListViewBase
operator|::
name|modelIndex
argument_list|(
argument|int row
argument_list|)
specifier|const
block|{
return|return
name|dd
operator|->
name|model
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|dd
operator|->
name|column
argument_list|,
name|dd
operator|->
name|root
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|rowCount
specifier|inline
name|int
name|QCommonListViewBase
operator|::
name|rowCount
argument_list|()
specifier|const
block|{
return|return
name|dd
operator|->
name|model
operator|->
name|rowCount
argument_list|(
name|dd
operator|->
name|root
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|viewOptions
specifier|inline
name|QStyleOptionViewItemV4
name|QCommonListViewBase
operator|::
name|viewOptions
argument_list|()
specifier|const
block|{
return|return
name|dd
operator|->
name|viewOptionsV4
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|viewport
specifier|inline
name|QWidget
operator|*
name|QCommonListViewBase
operator|::
name|viewport
argument_list|()
specifier|const
block|{
return|return
name|dd
operator|->
name|viewport
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|clipRect
specifier|inline
name|QRect
name|QCommonListViewBase
operator|::
name|clipRect
argument_list|()
specifier|const
block|{
return|return
name|dd
operator|->
name|clipRect
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|cachedItemSize
specifier|inline
name|QSize
name|QCommonListViewBase
operator|::
name|cachedItemSize
argument_list|()
specifier|const
block|{
return|return
name|dd
operator|->
name|cachedItemSize
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|viewItemRect
specifier|inline
name|QRect
name|QCommonListViewBase
operator|::
name|viewItemRect
argument_list|(
argument|const QListViewItem&item
argument_list|)
specifier|const
block|{
return|return
name|dd
operator|->
name|viewItemRect
argument_list|(
name|item
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|itemSize
specifier|inline
name|QSize
name|QCommonListViewBase
operator|::
name|itemSize
argument_list|(
argument|const QStyleOptionViewItemV2&opt
argument_list|,
argument|const QModelIndex&idx
argument_list|)
specifier|const
block|{
return|return
name|dd
operator|->
name|itemSize
argument_list|(
name|opt
argument_list|,
name|idx
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|delegate
specifier|inline
name|QAbstractItemDelegate
operator|*
name|QCommonListViewBase
operator|::
name|delegate
argument_list|(
argument|const QModelIndex&idx
argument_list|)
specifier|const
block|{
return|return
name|dd
operator|->
name|delegateForIndex
argument_list|(
name|idx
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isHidden
specifier|inline
name|bool
name|QCommonListViewBase
operator|::
name|isHidden
argument_list|(
argument|int row
argument_list|)
specifier|const
block|{
return|return
name|dd
operator|->
name|isHidden
argument_list|(
name|row
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|hiddenCount
specifier|inline
name|int
name|QCommonListViewBase
operator|::
name|hiddenCount
argument_list|()
specifier|const
block|{
return|return
name|dd
operator|->
name|hiddenRows
operator|.
name|count
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isRightToLeft
specifier|inline
name|bool
name|QCommonListViewBase
operator|::
name|isRightToLeft
argument_list|()
specifier|const
block|{
return|return
name|qq
operator|->
name|isRightToLeft
argument_list|()
return|;
block|}
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_LISTVIEW
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QLISTVIEW_P_H
end_comment
end_unit
