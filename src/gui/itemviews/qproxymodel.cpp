begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qproxymodel.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PROXYMODEL
end_ifndef
begin_include
include|#
directive|include
file|<private/qproxymodel_p.h>
end_include
begin_include
include|#
directive|include
file|<qsize.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QProxyModel     \obsolete     \brief The QProxyModel class provides support for processing data     passed between another model and a view.      \ingroup model-view      If you want to do filtering and sorting, see QSortFilterProxyModel.      Proxy models provide a standard model interface that can be used to     manipulate the data retrieved through an underlying model. They can be used to     perform operations such as sorting and filtering on the data obtained without     changing the contents of the model.      Just as with subclasses of QAbstractItemView, QProxyModel provides the setModel()     function that is used to specify the model to be acted on by the proxy.     Views can be connected to either the underlying model or the proxy model with     \l QAbstractItemView::setModel().      Since views rely on the information provided in model indexes to identify     items of data from models, and to position these items in some visual     representation, proxy models must create their own model indexes instead of     supplying model indexes from their underlying models.      \sa \link model-view-programming.html Model/View Programming\endlink QAbstractItemModel  */
end_comment
begin_comment
comment|/*!     Constructs a proxy model with the given \a parent. */
end_comment
begin_constructor
DECL|function|QProxyModel
name|QProxyModel
operator|::
name|QProxyModel
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemModel
argument_list|(
operator|*
operator|new
name|QProxyModelPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QProxyModel
argument_list|)
expr_stmt|;
name|setModel
argument_list|(
operator|&
name|d
operator|->
name|empty
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_constructor
DECL|function|QProxyModel
name|QProxyModel
operator|::
name|QProxyModel
parameter_list|(
name|QProxyModelPrivate
modifier|&
name|dd
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemModel
argument_list|(
name|dd
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QProxyModel
argument_list|)
expr_stmt|;
name|setModel
argument_list|(
operator|&
name|d
operator|->
name|empty
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the proxy model. */
end_comment
begin_destructor
DECL|function|~QProxyModel
name|QProxyModel
operator|::
name|~
name|QProxyModel
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Sets the given \a model to be processed by the proxy model. */
end_comment
begin_function
DECL|function|setModel
name|void
name|QProxyModel
operator|::
name|setModel
parameter_list|(
name|QAbstractItemModel
modifier|*
name|model
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QProxyModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|model
operator|&&
name|d
operator|->
name|model
operator|!=
operator|&
name|d
operator|->
name|empty
condition|)
name|disconnectFromModel
argument_list|(
name|d
operator|->
name|model
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
condition|)
block|{
name|d
operator|->
name|model
operator|=
name|model
expr_stmt|;
name|connectToModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|model
operator|=
operator|&
name|d
operator|->
name|empty
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the model that contains the data that is available through the     proxy model. */
end_comment
begin_function
DECL|function|model
name|QAbstractItemModel
modifier|*
name|QProxyModel
operator|::
name|model
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the model index with the given \a row, \a column, and \a parent.      \sa QAbstractItemModel::index() */
end_comment
begin_function
DECL|function|index
name|QModelIndex
name|QProxyModel
operator|::
name|index
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProxyModel
argument_list|)
expr_stmt|;
return|return
name|setProxyModel
argument_list|(
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|setSourceModel
argument_list|(
name|parent
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the model index that corresponds to the parent of the given \a child     index. */
end_comment
begin_function
DECL|function|parent
name|QModelIndex
name|QProxyModel
operator|::
name|parent
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|child
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProxyModel
argument_list|)
expr_stmt|;
return|return
name|setProxyModel
argument_list|(
name|d
operator|->
name|model
operator|->
name|parent
argument_list|(
name|setSourceModel
argument_list|(
name|child
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of rows for the given \a parent.      \sa QAbstractItemModel::rowCount() */
end_comment
begin_function
DECL|function|rowCount
name|int
name|QProxyModel
operator|::
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|rowCount
argument_list|(
name|setSourceModel
argument_list|(
name|parent
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of columns for the given \a parent.      \sa QAbstractItemModel::columnCount() */
end_comment
begin_function
DECL|function|columnCount
name|int
name|QProxyModel
operator|::
name|columnCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|columnCount
argument_list|(
name|setSourceModel
argument_list|(
name|parent
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the item corresponding to the \a parent index has child     items; otherwise returns false.      \sa QAbstractItemModel::hasChildren() */
end_comment
begin_function
DECL|function|hasChildren
name|bool
name|QProxyModel
operator|::
name|hasChildren
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|hasChildren
argument_list|(
name|setSourceModel
argument_list|(
name|parent
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the data stored in the item with the given \a index under the     specified \a role. */
end_comment
begin_function
DECL|function|data
name|QVariant
name|QProxyModel
operator|::
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|data
argument_list|(
name|setSourceModel
argument_list|(
name|index
argument_list|)
argument_list|,
name|role
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the \a role data for the item at \a index to \a value.     Returns true if successful; otherwise returns false.      The base class implementation returns false. This function and     data() must be reimplemented for editable models.      \sa data() itemData() QAbstractItemModel::setData() */
end_comment
begin_function
DECL|function|setData
name|bool
name|QProxyModel
operator|::
name|setData
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|role
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|setData
argument_list|(
name|setSourceModel
argument_list|(
name|index
argument_list|)
argument_list|,
name|value
argument_list|,
name|role
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the data stored in the \a section of the header with specified     \a orientation under the given \a role. */
end_comment
begin_function
DECL|function|headerData
name|QVariant
name|QProxyModel
operator|::
name|headerData
parameter_list|(
name|int
name|section
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|headerData
argument_list|(
name|section
argument_list|,
name|orientation
argument_list|,
name|role
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the \a role data in the \a section of the header with the specified     \a orientation to the \a value given.      \sa QAbstractItemModel::setHeaderData() */
end_comment
begin_function
DECL|function|setHeaderData
name|bool
name|QProxyModel
operator|::
name|setHeaderData
parameter_list|(
name|int
name|section
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|role
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|setHeaderData
argument_list|(
name|section
argument_list|,
name|orientation
argument_list|,
name|value
argument_list|,
name|role
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of MIME types that are supported by the model. */
end_comment
begin_function
DECL|function|mimeTypes
name|QStringList
name|QProxyModel
operator|::
name|mimeTypes
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|mimeTypes
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns MIME data for the specified \a indexes in the model. */
end_comment
begin_function
DECL|function|mimeData
name|QMimeData
modifier|*
name|QProxyModel
operator|::
name|mimeData
parameter_list|(
specifier|const
name|QModelIndexList
modifier|&
name|indexes
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProxyModel
argument_list|)
expr_stmt|;
name|QModelIndexList
name|lst
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|lst
operator|.
name|append
argument_list|(
name|setSourceModel
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|mimeData
argument_list|(
name|lst
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the model accepts the \a data dropped onto an attached     view for the specified \a action; otherwise returns false.      The \a parent, \a row, and \a column details can be used to control     which MIME types are acceptable to different parts of a model when     received via the drag and drop system. */
end_comment
begin_function
DECL|function|dropMimeData
name|bool
name|QProxyModel
operator|::
name|dropMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|DropAction
name|action
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|dropMimeData
argument_list|(
name|data
argument_list|,
name|action
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|setSourceModel
argument_list|(
name|parent
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the drop actions that are supported by the model; this is     a combination of the individual actions defined in \l Qt::DropActions.      The selection of drop actions provided by the model will influence the     behavior of the component that started the drag and drop operation.      \sa \link dnd.html Drag and Drop\endlink */
end_comment
begin_function
DECL|function|supportedDropActions
name|Qt
operator|::
name|DropActions
name|QProxyModel
operator|::
name|supportedDropActions
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|supportedDropActions
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Inserts \a count rows into the model, creating new items as children of     the given \a parent. The new rows are inserted before the \a row     specified. If the \a parent item has no children, a single column is     created to contain the required number of rows.      Returns true if the rows were successfully inserted; otherwise     returns false.      \sa QAbstractItemModel::insertRows()*/
end_comment
begin_function
DECL|function|insertRows
name|bool
name|QProxyModel
operator|::
name|insertRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|insertRows
argument_list|(
name|row
argument_list|,
name|count
argument_list|,
name|setSourceModel
argument_list|(
name|parent
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Inserts \a count columns into the model, creating new items as children of     the given \a parent. The new columns are inserted before the \a column     specified. If the \a parent item has no children, a single row is created     to contain the required number of columns.      Returns true if the columns were successfully inserted; otherwise     returns false.      \sa QAbstractItemModel::insertColumns() */
end_comment
begin_function
DECL|function|insertColumns
name|bool
name|QProxyModel
operator|::
name|insertColumns
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|insertColumns
argument_list|(
name|column
argument_list|,
name|count
argument_list|,
name|setSourceModel
argument_list|(
name|parent
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Fetches more child items of the given \a parent. This function is used by views     to tell the model that they can display more data than the model has provided.      \sa QAbstractItemModel::fetchMore() */
end_comment
begin_function
DECL|function|fetchMore
name|void
name|QProxyModel
operator|::
name|fetchMore
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QProxyModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|model
operator|->
name|fetchMore
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the item flags for the given \a index. */
end_comment
begin_function
DECL|function|flags
name|Qt
operator|::
name|ItemFlags
name|QProxyModel
operator|::
name|flags
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|flags
argument_list|(
name|setSourceModel
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sorts the child items in the specified \a column according to the sort     order defined by \a order.      \sa QAbstractItemModel::sort() */
end_comment
begin_function
DECL|function|sort
name|void
name|QProxyModel
operator|::
name|sort
parameter_list|(
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QProxyModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|model
operator|->
name|sort
argument_list|(
name|column
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of model indexes that each contain the given \a value for     the \a role specified. The search begins at the \a start index and is     performed according to the specified \a flags. The search continues until     the number of matching data items equals \a hits, the last row is reached,     or the search reaches \a start again, depending on whether \c MatchWrap is     specified in \a flags.      \sa QAbstractItemModel::match() */
end_comment
begin_function
DECL|function|match
name|QModelIndexList
name|QProxyModel
operator|::
name|match
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|start
parameter_list|,
name|int
name|role
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|hits
parameter_list|,
name|Qt
operator|::
name|MatchFlags
name|flags
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|match
argument_list|(
name|start
argument_list|,
name|role
argument_list|,
name|value
argument_list|,
name|hits
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the size of the item that corresponds to the specified \a index. */
end_comment
begin_function
DECL|function|span
name|QSize
name|QProxyModel
operator|::
name|span
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|span
argument_list|(
name|setSourceModel
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!  */
end_comment
begin_function
DECL|function|submit
name|bool
name|QProxyModel
operator|::
name|submit
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|submit
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!  */
end_comment
begin_function
DECL|function|revert
name|void
name|QProxyModel
operator|::
name|revert
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QProxyModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|model
operator|->
name|revert
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal     Change the model pointer in the given \a source_index to point to the proxy model.  */
end_comment
begin_function
DECL|function|setProxyModel
name|QModelIndex
name|QProxyModel
operator|::
name|setProxyModel
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_index
parameter_list|)
specifier|const
block|{
name|QModelIndex
name|proxy_index
init|=
name|source_index
decl_stmt|;
if|if
condition|(
name|proxy_index
operator|.
name|isValid
argument_list|()
condition|)
name|proxy_index
operator|.
name|m
operator|=
name|this
expr_stmt|;
return|return
name|proxy_index
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Change the model pointer in the given \a proxy_index to point to the source model.  */
end_comment
begin_function
DECL|function|setSourceModel
name|QModelIndex
name|QProxyModel
operator|::
name|setSourceModel
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|proxy_index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProxyModel
argument_list|)
expr_stmt|;
name|QModelIndex
name|source_index
init|=
name|proxy_index
decl_stmt|;
name|source_index
operator|.
name|m
operator|=
name|d
operator|->
name|model
expr_stmt|;
return|return
name|source_index
return|;
block|}
end_function
begin_comment
comment|/*!   \internal   Connect to all the signals emitted by given \a model. */
end_comment
begin_function
DECL|function|connectToModel
name|void
name|QProxyModel
operator|::
name|connectToModel
parameter_list|(
specifier|const
name|QAbstractItemModel
modifier|*
name|model
parameter_list|)
specifier|const
block|{
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceDataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// signal to signal
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceRowsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceRowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceRowsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceRowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceColumnsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceColumnsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceColumnsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceColumnsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|modelReset
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|modelReset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// signal to signal
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// signal to signal
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// signal to signal
block|}
end_function
begin_comment
comment|/*!   \internal   Disconnect from all the signals emitted by the given \a model.  */
end_comment
begin_function
DECL|function|disconnectFromModel
name|void
name|QProxyModel
operator|::
name|disconnectFromModel
parameter_list|(
specifier|const
name|QAbstractItemModel
modifier|*
name|model
parameter_list|)
specifier|const
block|{
name|disconnect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceDataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// signal to signal
name|disconnect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceRowsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceRowsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceRowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceColumnsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceColumnsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceColumnsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceColumnsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|modelReset
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|modelReset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// signal to signal
name|disconnect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// signal to signal
name|disconnect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// signal to signal
block|}
end_function
begin_comment
comment|/*!   \fn QObject *QProxyModel::parent() const   \internal */
end_comment
begin_function
DECL|function|_q_sourceDataChanged
name|void
name|QProxyModelPrivate
operator|::
name|_q_sourceDataChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|tl
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|br
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QProxyModel
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|dataChanged
argument_list|(
name|q
operator|->
name|setProxyModel
argument_list|(
name|tl
argument_list|)
argument_list|,
name|q
operator|->
name|setProxyModel
argument_list|(
name|br
argument_list|)
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_sourceRowsAboutToBeInserted
name|void
name|QProxyModelPrivate
operator|::
name|_q_sourceRowsAboutToBeInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QProxyModel
argument_list|)
expr_stmt|;
name|q
operator|->
name|beginInsertRows
argument_list|(
name|q
operator|->
name|setProxyModel
argument_list|(
name|parent
argument_list|)
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_sourceRowsInserted
name|void
name|QProxyModelPrivate
operator|::
name|_q_sourceRowsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QProxyModel
argument_list|)
expr_stmt|;
name|q
operator|->
name|endInsertRows
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_sourceRowsAboutToBeRemoved
name|void
name|QProxyModelPrivate
operator|::
name|_q_sourceRowsAboutToBeRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QProxyModel
argument_list|)
expr_stmt|;
name|q
operator|->
name|beginRemoveRows
argument_list|(
name|q
operator|->
name|setProxyModel
argument_list|(
name|parent
argument_list|)
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_sourceRowsRemoved
name|void
name|QProxyModelPrivate
operator|::
name|_q_sourceRowsRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QProxyModel
argument_list|)
expr_stmt|;
name|q
operator|->
name|endRemoveRows
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_sourceColumnsAboutToBeInserted
name|void
name|QProxyModelPrivate
operator|::
name|_q_sourceColumnsAboutToBeInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QProxyModel
argument_list|)
expr_stmt|;
name|q
operator|->
name|beginInsertColumns
argument_list|(
name|q
operator|->
name|setProxyModel
argument_list|(
name|parent
argument_list|)
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_sourceColumnsInserted
name|void
name|QProxyModelPrivate
operator|::
name|_q_sourceColumnsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QProxyModel
argument_list|)
expr_stmt|;
name|q
operator|->
name|endInsertColumns
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_sourceColumnsAboutToBeRemoved
name|void
name|QProxyModelPrivate
operator|::
name|_q_sourceColumnsAboutToBeRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QProxyModel
argument_list|)
expr_stmt|;
name|q
operator|->
name|beginRemoveColumns
argument_list|(
name|q
operator|->
name|setProxyModel
argument_list|(
name|parent
argument_list|)
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_sourceColumnsRemoved
name|void
name|QProxyModelPrivate
operator|::
name|_q_sourceColumnsRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QProxyModel
argument_list|)
expr_stmt|;
name|q
operator|->
name|endRemoveColumns
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qproxymodel.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PROXYMODEL
end_comment
end_unit
