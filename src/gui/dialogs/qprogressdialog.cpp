begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qprogressdialog.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PROGRESSDIALOG
end_ifndef
begin_include
include|#
directive|include
file|"qshortcut.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qdrawutil.h"
end_include
begin_include
include|#
directive|include
file|"qlabel.h"
end_include
begin_include
include|#
directive|include
file|"qprogressbar.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qstyle.h"
end_include
begin_include
include|#
directive|include
file|"qpushbutton.h"
end_include
begin_include
include|#
directive|include
file|"qcursor.h"
end_include
begin_include
include|#
directive|include
file|"qtimer.h"
end_include
begin_include
include|#
directive|include
file|"qelapsedtimer.h"
end_include
begin_include
include|#
directive|include
file|<private/qdialog_p.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_SOFTKEYS_ENABLED
argument_list|)
end_if
begin_include
include|#
directive|include
file|<qaction.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_S60
end_ifdef
begin_include
include|#
directive|include
file|<QtGui/qdesktopwidget.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// If the operation is expected to take this long (as predicted by
comment|// progress time), show the progress dialog.
DECL|variable|defaultShowTime
specifier|static
specifier|const
name|int
name|defaultShowTime
init|=
literal|4000
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Wait at least this long before attempting to make a prediction.
end_comment
begin_decl_stmt
DECL|variable|minWaitTime
specifier|static
specifier|const
name|int
name|minWaitTime
init|=
literal|50
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QProgressDialogPrivate
class|class
name|QProgressDialogPrivate
super|:
specifier|public
name|QDialogPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QProgressDialog
parameter_list|)
specifier|public
private|:
DECL|function|QProgressDialogPrivate
name|QProgressDialogPrivate
parameter_list|()
member_init_list|:
name|label
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|cancel
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|bar
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|shown_once
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|cancellation_flag
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|showTime
argument_list|(
name|defaultShowTime
argument_list|)
member_init_list|,
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|escapeShortcut
argument_list|(
literal|0
argument_list|)
member_init_list|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_SOFTKEYS_ENABLED
name|cancelAction
argument_list|(
literal|0
argument_list|)
member_init_list|,
endif|#
directive|endif
name|useDefaultCancelText
argument_list|(
literal|false
argument_list|)
block|{     }
name|void
name|init
parameter_list|(
specifier|const
name|QString
modifier|&
name|labelText
parameter_list|,
specifier|const
name|QString
modifier|&
name|cancelText
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
function_decl|;
name|void
name|layout
parameter_list|()
function_decl|;
name|void
name|retranslateStrings
parameter_list|()
function_decl|;
name|void
name|_q_disconnectOnClose
parameter_list|()
function_decl|;
DECL|member|label
name|QLabel
modifier|*
name|label
decl_stmt|;
DECL|member|cancel
name|QPushButton
modifier|*
name|cancel
decl_stmt|;
DECL|member|bar
name|QProgressBar
modifier|*
name|bar
decl_stmt|;
DECL|member|forceTimer
name|QTimer
modifier|*
name|forceTimer
decl_stmt|;
DECL|member|shown_once
name|bool
name|shown_once
decl_stmt|;
DECL|member|cancellation_flag
name|bool
name|cancellation_flag
decl_stmt|;
DECL|member|starttime
name|QElapsedTimer
name|starttime
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
DECL|member|parentCursor
name|QCursor
name|parentCursor
decl_stmt|;
endif|#
directive|endif
DECL|member|showTime
name|int
name|showTime
decl_stmt|;
DECL|member|autoClose
name|bool
name|autoClose
decl_stmt|;
DECL|member|autoReset
name|bool
name|autoReset
decl_stmt|;
DECL|member|forceHide
name|bool
name|forceHide
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
DECL|member|escapeShortcut
name|QShortcut
modifier|*
name|escapeShortcut
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_SOFTKEYS_ENABLED
DECL|member|cancelAction
name|QAction
modifier|*
name|cancelAction
decl_stmt|;
endif|#
directive|endif
DECL|member|useDefaultCancelText
name|bool
name|useDefaultCancelText
decl_stmt|;
DECL|member|receiverToDisconnectOnClose
name|QPointer
argument_list|<
name|QObject
argument_list|>
name|receiverToDisconnectOnClose
decl_stmt|;
DECL|member|memberToDisconnectOnClose
name|QByteArray
name|memberToDisconnectOnClose
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|init
name|void
name|QProgressDialogPrivate
operator|::
name|init
parameter_list|(
specifier|const
name|QString
modifier|&
name|labelText
parameter_list|,
specifier|const
name|QString
modifier|&
name|cancelText
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
name|label
operator|=
operator|new
name|QLabel
argument_list|(
name|labelText
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|int
name|align
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ProgressDialog_TextLabelAlignment
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|label
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|Alignment
argument_list|(
name|align
argument_list|)
argument_list|)
expr_stmt|;
name|bar
operator|=
operator|new
name|QProgressBar
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|bar
operator|->
name|setRange
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|autoClose
operator|=
literal|true
expr_stmt|;
name|autoReset
operator|=
literal|true
expr_stmt|;
name|forceHide
operator|=
literal|false
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|canceled
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|cancel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|forceTimer
operator|=
operator|new
name|QTimer
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|forceTimer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|forceShow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|useDefaultCancelText
condition|)
block|{
name|retranslateStrings
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|q
operator|->
name|setCancelButtonText
argument_list|(
name|cancelText
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|layout
name|void
name|QProgressDialogPrivate
operator|::
name|layout
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
name|int
name|sp
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DefaultLayoutSpacing
argument_list|)
decl_stmt|;
name|int
name|mtb
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DefaultTopLevelMargin
argument_list|)
decl_stmt|;
name|int
name|mlr
init|=
name|qMin
argument_list|(
name|q
operator|->
name|width
argument_list|()
operator|/
literal|10
argument_list|,
name|mtb
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|centered
init|=
name|bool
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ProgressDialog_CenterCancelButton
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|additionalSpacing
init|=
literal|0
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
comment|//In Symbian, we need to have wider margins for dialog borders, as the actual border is some pixels
comment|//inside the dialog area (to enable transparent borders)
name|additionalSpacing
operator|=
name|mlr
expr_stmt|;
endif|#
directive|endif
name|QSize
name|cs
init|=
name|cancel
condition|?
name|cancel
operator|->
name|sizeHint
argument_list|()
else|:
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QSize
name|bh
init|=
name|bar
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
name|int
name|cspc
decl_stmt|;
name|int
name|lh
init|=
literal|0
decl_stmt|;
comment|// Find spacing and sizes that fit.  It is important that a progress
comment|// dialog can be made very small if the user demands it so.
for|for
control|(
name|int
name|attempt
init|=
literal|5
init|;
name|attempt
operator|--
condition|;
control|)
block|{
name|cspc
operator|=
name|cancel
condition|?
name|cs
operator|.
name|height
argument_list|()
operator|+
name|sp
else|:
literal|0
expr_stmt|;
name|lh
operator|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|q
operator|->
name|height
argument_list|()
operator|-
name|mtb
operator|-
name|bh
operator|.
name|height
argument_list|()
operator|-
name|sp
operator|-
name|cspc
argument_list|)
expr_stmt|;
if|if
condition|(
name|lh
operator|<
name|q
operator|->
name|height
argument_list|()
operator|/
literal|4
condition|)
block|{
comment|// Getting cramped
name|sp
operator|/=
literal|2
expr_stmt|;
name|mtb
operator|/=
literal|2
expr_stmt|;
if|if
condition|(
name|cancel
condition|)
block|{
name|cs
operator|.
name|setHeight
argument_list|(
name|qMax
argument_list|(
literal|4
argument_list|,
name|cs
operator|.
name|height
argument_list|()
operator|-
name|sp
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bh
operator|.
name|setHeight
argument_list|(
name|qMax
argument_list|(
literal|4
argument_list|,
name|bh
operator|.
name|height
argument_list|()
operator|-
name|sp
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|cancel
condition|)
block|{
name|cancel
operator|->
name|setGeometry
argument_list|(
name|centered
condition|?
name|q
operator|->
name|width
argument_list|()
operator|/
literal|2
operator|-
name|cs
operator|.
name|width
argument_list|()
operator|/
literal|2
else|:
name|q
operator|->
name|width
argument_list|()
operator|-
name|mlr
operator|-
name|cs
operator|.
name|width
argument_list|()
argument_list|,
name|q
operator|->
name|height
argument_list|()
operator|-
name|mtb
operator|-
name|cs
operator|.
name|height
argument_list|()
argument_list|,
name|cs
operator|.
name|width
argument_list|()
argument_list|,
name|cs
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|label
condition|)
name|label
operator|->
name|setGeometry
argument_list|(
name|mlr
argument_list|,
name|additionalSpacing
argument_list|,
name|q
operator|->
name|width
argument_list|()
operator|-
name|mlr
operator|*
literal|2
argument_list|,
name|lh
argument_list|)
expr_stmt|;
name|bar
operator|->
name|setGeometry
argument_list|(
name|mlr
argument_list|,
name|lh
operator|+
name|sp
operator|+
name|additionalSpacing
argument_list|,
name|q
operator|->
name|width
argument_list|()
operator|-
name|mlr
operator|*
literal|2
argument_list|,
name|bh
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|retranslateStrings
name|void
name|QProgressDialogPrivate
operator|::
name|retranslateStrings
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|useDefaultCancelText
condition|)
name|q
operator|->
name|setCancelButtonText
argument_list|(
name|QProgressDialog
operator|::
name|tr
argument_list|(
literal|"Cancel"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_disconnectOnClose
name|void
name|QProgressDialogPrivate
operator|::
name|_q_disconnectOnClose
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|receiverToDisconnectOnClose
condition|)
block|{
name|QObject
operator|::
name|disconnect
argument_list|(
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|canceled
argument_list|()
argument_list|)
argument_list|,
name|receiverToDisconnectOnClose
argument_list|,
name|memberToDisconnectOnClose
argument_list|)
expr_stmt|;
name|receiverToDisconnectOnClose
operator|=
literal|0
expr_stmt|;
block|}
name|memberToDisconnectOnClose
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \class QProgressDialog   \brief The QProgressDialog class provides feedback on the progress of a slow operation.   \ingroup standard-dialogs     A progress dialog is used to give the user an indication of how long   an operation is going to take, and to demonstrate that the   application has not frozen. It can also give the user an opportunity   to abort the operation.    A common problem with progress dialogs is that it is difficult to know   when to use them; operations take different amounts of time on different   hardware.  QProgressDialog offers a solution to this problem:   it estimates the time the operation will take (based on time for   steps), and only shows itself if that estimate is beyond minimumDuration()   (4 seconds by default).    Use setMinimum() and setMaximum() or the constructor to set the number of   "steps" in the operation and call setValue() as the operation   progresses. The number of steps can be chosen arbitrarily. It can be the   number of files copied, the number of bytes received, the number of   iterations through the main loop of your algorithm, or some other   suitable unit. Progress starts at the value set by setMinimum(),   and the progress dialog shows that the operation has finished when   you call setValue() with the value set by setMaximum() as its argument.    The dialog automatically resets and hides itself at the end of the   operation.  Use setAutoReset() and setAutoClose() to change this   behavior. Note that if you set a new maximum (using setMaximum() or   setRange()) that equals your current value(), the dialog will not   close regardless.    There are two ways of using QProgressDialog: modal and modeless.    Compared to a modeless QProgressDialog, a modal QProgressDialog is simpler   to use for the programmer. Do the operation in a loop, call \l setValue() at   intervals, and check for cancellation with wasCanceled(). For example:    \snippet doc/src/snippets/dialogs/dialogs.cpp 3    A modeless progress dialog is suitable for operations that take   place in the background, where the user is able to interact with the   application. Such operations are typically based on QTimer (or   QObject::timerEvent()), QSocketNotifier, or QUrlOperator; or performed   in a separate thread. A QProgressBar in the status bar of your main window   is often an alternative to a modeless progress dialog.    You need to have an event loop to be running, connect the   canceled() signal to a slot that stops the operation, and call \l   setValue() at intervals. For example:    \snippet doc/src/snippets/dialogs/dialogs.cpp 4   \codeline   \snippet doc/src/snippets/dialogs/dialogs.cpp 5   \codeline   \snippet doc/src/snippets/dialogs/dialogs.cpp 6    In both modes the progress dialog may be customized by   replacing the child widgets with custom widgets by using setLabel(),   setBar(), and setCancelButton().   The functions setLabelText() and setCancelButtonText()   set the texts shown.    \image plastique-progressdialog.png A progress dialog shown in the Plastique widget style.    \sa QDialog, QProgressBar, {fowler}{GUI Design Handbook: Progress Indicator},       {Find Files Example}, {Pixelator Example} */
end_comment
begin_comment
comment|/*!   Constructs a progress dialog.    Default settings:   \list   \i The label text is empty.   \i The cancel button text is (translated) "Cancel".   \i minimum is 0;   \i maximum is 100   \endlist    The \a parent argument is dialog's parent widget. The widget flags, \a f, are   passed to the QDialog::QDialog() constructor.    \sa setLabelText(), setCancelButtonText(), setCancelButton(),   setMinimum(), setMaximum() */
end_comment
begin_constructor
DECL|function|QProgressDialog
name|QProgressDialog
operator|::
name|QProgressDialog
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|f
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
operator|*
operator|(
operator|new
name|QProgressDialogPrivate
operator|)
argument_list|,
name|parent
argument_list|,
name|f
argument_list|)
block|{
name|Q_D
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|useDefaultCancelText
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|init
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|""
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   Constructs a progress dialog.     The \a labelText is the text used to remind the user what is progressing.     The \a cancelButtonText is the text to display on the cancel button.  If     QString() is passed then no cancel button is shown.     The \a minimum and \a maximum is the number of steps in the operation for    which this progress dialog shows progress.  For example, if the    operation is to examine 50 files, this value minimum value would be 0,    and the maximum would be 50. Before examining the first file, call    setValue(0). As each file is processed call setValue(1), setValue(2),    etc., finally calling setValue(50) after examining the last file.     The \a parent argument is the dialog's parent widget. The parent, \a parent, and    widget flags, \a f, are passed to the QDialog::QDialog() constructor.    \sa setLabelText(), setLabel(), setCancelButtonText(), setCancelButton(),   setMinimum(), setMaximum() */
end_comment
begin_constructor
DECL|function|QProgressDialog
name|QProgressDialog
operator|::
name|QProgressDialog
parameter_list|(
specifier|const
name|QString
modifier|&
name|labelText
parameter_list|,
specifier|const
name|QString
modifier|&
name|cancelButtonText
parameter_list|,
name|int
name|minimum
parameter_list|,
name|int
name|maximum
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|f
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
operator|*
operator|(
operator|new
name|QProgressDialogPrivate
operator|)
argument_list|,
name|parent
argument_list|,
name|f
argument_list|)
block|{
name|Q_D
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|(
name|labelText
argument_list|,
name|cancelButtonText
argument_list|,
name|minimum
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   Destroys the progress dialog. */
end_comment
begin_destructor
DECL|function|~QProgressDialog
name|QProgressDialog
operator|::
name|~
name|QProgressDialog
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!   \fn void QProgressDialog::canceled()    This signal is emitted when the cancel button is clicked.   It is connected to the cancel() slot by default.    \sa wasCanceled() */
end_comment
begin_comment
comment|/*!   Sets the label to \a label. The progress dialog resizes to fit. The   label becomes owned by the progress dialog and will be deleted when   necessary, so do not pass the address of an object on the stack.    \sa setLabelText() */
end_comment
begin_function
DECL|function|setLabel
name|void
name|QProgressDialog
operator|::
name|setLabel
parameter_list|(
name|QLabel
modifier|*
name|label
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
operator|delete
name|d
operator|->
name|label
expr_stmt|;
name|d
operator|->
name|label
operator|=
name|label
expr_stmt|;
if|if
condition|(
name|label
condition|)
block|{
if|if
condition|(
name|label
operator|->
name|parentWidget
argument_list|()
operator|==
name|this
condition|)
block|{
name|label
operator|->
name|hide
argument_list|()
expr_stmt|;
comment|// until we resize
block|}
else|else
block|{
name|label
operator|->
name|setParent
argument_list|(
name|this
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|w
init|=
name|qMax
argument_list|(
name|isVisible
argument_list|()
condition|?
name|width
argument_list|()
else|:
literal|0
argument_list|,
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|qMax
argument_list|(
name|isVisible
argument_list|()
condition|?
name|height
argument_list|()
else|:
literal|0
argument_list|,
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|resize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
if|if
condition|(
name|label
condition|)
name|label
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \property QProgressDialog::labelText   \brief the label's text    The default text is an empty string. */
end_comment
begin_function
DECL|function|labelText
name|QString
name|QProgressDialog
operator|::
name|labelText
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProgressDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|label
condition|)
return|return
name|d
operator|->
name|label
operator|->
name|text
argument_list|()
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setLabelText
name|void
name|QProgressDialog
operator|::
name|setLabelText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|label
condition|)
block|{
name|d
operator|->
name|label
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|int
name|w
init|=
name|qMax
argument_list|(
name|isVisible
argument_list|()
condition|?
name|width
argument_list|()
else|:
literal|0
argument_list|,
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|qMax
argument_list|(
name|isVisible
argument_list|()
condition|?
name|height
argument_list|()
else|:
literal|0
argument_list|,
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|resize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   Sets the cancel button to the push button, \a cancelButton. The   progress dialog takes ownership of this button which will be deleted   when necessary, so do not pass the address of an object that is on   the stack, i.e. use new() to create the button.  If 0 is passed then   no cancel button will be shown.    \sa setCancelButtonText() */
end_comment
begin_function
DECL|function|setCancelButton
name|void
name|QProgressDialog
operator|::
name|setCancelButton
parameter_list|(
name|QPushButton
modifier|*
name|cancelButton
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
operator|delete
name|d
operator|->
name|cancel
expr_stmt|;
name|d
operator|->
name|cancel
operator|=
name|cancelButton
expr_stmt|;
if|if
condition|(
name|cancelButton
condition|)
block|{
if|if
condition|(
name|cancelButton
operator|->
name|parentWidget
argument_list|()
operator|==
name|this
condition|)
block|{
name|cancelButton
operator|->
name|hide
argument_list|()
expr_stmt|;
comment|// until we resize
block|}
else|else
block|{
name|cancelButton
operator|->
name|setParent
argument_list|(
name|this
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|connect
argument_list|(
name|d
operator|->
name|cancel
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|canceled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|d
operator|->
name|escapeShortcut
operator|=
operator|new
name|QShortcut
argument_list|(
name|Qt
operator|::
name|Key_Escape
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|canceled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
operator|delete
name|d
operator|->
name|escapeShortcut
expr_stmt|;
name|d
operator|->
name|escapeShortcut
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
name|int
name|w
init|=
name|qMax
argument_list|(
name|isVisible
argument_list|()
condition|?
name|width
argument_list|()
else|:
literal|0
argument_list|,
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|qMax
argument_list|(
name|isVisible
argument_list|()
condition|?
name|height
argument_list|()
else|:
literal|0
argument_list|,
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|resize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
if|if
condition|(
name|cancelButton
condition|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_SOFTKEYS_ENABLED
argument_list|)
name|cancelButton
operator|->
name|show
argument_list|()
expr_stmt|;
else|#
directive|else
block|{
name|d
operator|->
name|cancelAction
operator|=
operator|new
name|QAction
argument_list|(
name|cancelButton
operator|->
name|text
argument_list|()
argument_list|,
name|cancelButton
argument_list|)
expr_stmt|;
name|d
operator|->
name|cancelAction
operator|->
name|setSoftKeyRole
argument_list|(
name|QAction
operator|::
name|NegativeSoftKey
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|cancelAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|canceled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addAction
argument_list|(
name|d
operator|->
name|cancelAction
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!   Sets the cancel button's text to \a cancelButtonText.  If the text   is set to QString() then it will cause the cancel button to be    hidden and deleted.    \sa setCancelButton() */
end_comment
begin_function
DECL|function|setCancelButtonText
name|void
name|QProgressDialog
operator|::
name|setCancelButtonText
parameter_list|(
specifier|const
name|QString
modifier|&
name|cancelButtonText
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|useDefaultCancelText
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|cancelButtonText
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|cancel
condition|)
block|{
name|d
operator|->
name|cancel
operator|->
name|setText
argument_list|(
name|cancelButtonText
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_SOFTKEYS_ENABLED
name|d
operator|->
name|cancelAction
operator|->
name|setText
argument_list|(
name|cancelButtonText
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|setCancelButton
argument_list|(
operator|new
name|QPushButton
argument_list|(
name|cancelButtonText
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|setCancelButton
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|int
name|w
init|=
name|qMax
argument_list|(
name|isVisible
argument_list|()
condition|?
name|width
argument_list|()
else|:
literal|0
argument_list|,
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|qMax
argument_list|(
name|isVisible
argument_list|()
condition|?
name|height
argument_list|()
else|:
literal|0
argument_list|,
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|resize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Sets the progress bar widget to \a bar. The progress dialog resizes to   fit. The progress dialog takes ownership of the progress \a bar which   will be deleted when necessary, so do not use a progress bar   allocated on the stack. */
end_comment
begin_function
DECL|function|setBar
name|void
name|QProgressDialog
operator|::
name|setBar
parameter_list|(
name|QProgressBar
modifier|*
name|bar
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bar
condition|)
block|{
name|qWarning
argument_list|(
literal|"QProgressDialog::setBar: Cannot set a null progress bar"
argument_list|)
expr_stmt|;
return|return;
block|}
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
if|if
condition|(
name|value
argument_list|()
operator|>
literal|0
condition|)
name|qWarning
argument_list|(
literal|"QProgressDialog::setBar: Cannot set a new progress bar "
literal|"while the old one is active"
argument_list|)
expr_stmt|;
endif|#
directive|endif
operator|delete
name|d
operator|->
name|bar
expr_stmt|;
name|d
operator|->
name|bar
operator|=
name|bar
expr_stmt|;
name|int
name|w
init|=
name|qMax
argument_list|(
name|isVisible
argument_list|()
condition|?
name|width
argument_list|()
else|:
literal|0
argument_list|,
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|qMax
argument_list|(
name|isVisible
argument_list|()
condition|?
name|height
argument_list|()
else|:
literal|0
argument_list|,
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|resize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \property QProgressDialog::wasCanceled   \brief whether the dialog was canceled */
end_comment
begin_function
DECL|function|wasCanceled
name|bool
name|QProgressDialog
operator|::
name|wasCanceled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProgressDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|cancellation_flag
return|;
block|}
end_function
begin_comment
comment|/*!     \property QProgressDialog::maximum     \brief the highest value represented by the progress bar      The default is 0.      \sa minimum, setRange() */
end_comment
begin_function
DECL|function|maximum
name|int
name|QProgressDialog
operator|::
name|maximum
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProgressDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|bar
operator|->
name|maximum
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setMaximum
name|void
name|QProgressDialog
operator|::
name|setMaximum
parameter_list|(
name|int
name|maximum
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|bar
operator|->
name|setMaximum
argument_list|(
name|maximum
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QProgressDialog::minimum     \brief the lowest value represented by the progress bar      The default is 0.      \sa maximum, setRange() */
end_comment
begin_function
DECL|function|minimum
name|int
name|QProgressDialog
operator|::
name|minimum
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProgressDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|bar
operator|->
name|minimum
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setMinimum
name|void
name|QProgressDialog
operator|::
name|setMinimum
parameter_list|(
name|int
name|minimum
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|bar
operator|->
name|setMinimum
argument_list|(
name|minimum
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the progress dialog's minimum and maximum values     to \a minimum and \a maximum, respectively.      If \a maximum is smaller than \a minimum, \a minimum becomes the only     legal value.      If the current value falls outside the new range, the progress     dialog is reset with reset().      \sa minimum, maximum */
end_comment
begin_function
DECL|function|setRange
name|void
name|QProgressDialog
operator|::
name|setRange
parameter_list|(
name|int
name|minimum
parameter_list|,
name|int
name|maximum
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|bar
operator|->
name|setRange
argument_list|(
name|minimum
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Resets the progress dialog.   The progress dialog becomes hidden if autoClose() is true.    \sa setAutoClose(), setAutoReset() */
end_comment
begin_function
DECL|function|reset
name|void
name|QProgressDialog
operator|::
name|reset
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
if|if
condition|(
name|value
argument_list|()
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|parentWidget
argument_list|()
condition|)
name|parentWidget
argument_list|()
operator|->
name|setCursor
argument_list|(
name|d
operator|->
name|parentCursor
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|d
operator|->
name|autoClose
operator|||
name|d
operator|->
name|forceHide
condition|)
name|hide
argument_list|()
expr_stmt|;
name|d
operator|->
name|bar
operator|->
name|reset
argument_list|()
expr_stmt|;
name|d
operator|->
name|cancellation_flag
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|shown_once
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|forceTimer
operator|->
name|stop
argument_list|()
expr_stmt|;
comment|/*         I wish we could disconnect the user slot provided to open() here but         unfortunately reset() is usually called before the slot has been invoked.         (reset() is itself invoked when canceled() is emitted.)     */
if|if
condition|(
name|d
operator|->
name|receiverToDisconnectOnClose
condition|)
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"_q_disconnectOnClose"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Resets the progress dialog. wasCanceled() becomes true until   the progress dialog is reset.   The progress dialog becomes hidden. */
end_comment
begin_function
DECL|function|cancel
name|void
name|QProgressDialog
operator|::
name|cancel
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|forceHide
operator|=
literal|true
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
name|d
operator|->
name|forceHide
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|cancellation_flag
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|value
name|int
name|QProgressDialog
operator|::
name|value
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProgressDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|bar
operator|->
name|value
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \property QProgressDialog::value   \brief the current amount of progress made.    For the progress dialog to work as expected, you should initially set   this property to 0 and finally set it to   QProgressDialog::maximum(); you can call setValue() any number of times   in-between.    \warning If the progress dialog is modal     (see QProgressDialog::QProgressDialog()),     setValue() calls QApplication::processEvents(), so take care that     this does not cause undesirable re-entrancy in your code. For example,     don't use a QProgressDialog inside a paintEvent()!    \sa minimum, maximum */
end_comment
begin_function
DECL|function|setValue
name|void
name|QProgressDialog
operator|::
name|setValue
parameter_list|(
name|int
name|progress
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|progress
operator|==
name|d
operator|->
name|bar
operator|->
name|value
argument_list|()
operator|||
operator|(
name|d
operator|->
name|bar
operator|->
name|value
argument_list|()
operator|==
operator|-
literal|1
operator|&&
name|progress
operator|==
name|d
operator|->
name|bar
operator|->
name|maximum
argument_list|()
operator|)
condition|)
return|return;
name|d
operator|->
name|bar
operator|->
name|setValue
argument_list|(
name|progress
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|shown_once
condition|)
block|{
if|if
condition|(
name|isModal
argument_list|()
condition|)
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|progress
operator|==
literal|0
condition|)
block|{
name|d
operator|->
name|starttime
operator|.
name|start
argument_list|()
expr_stmt|;
name|d
operator|->
name|forceTimer
operator|->
name|start
argument_list|(
name|d
operator|->
name|showTime
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|bool
name|need_show
decl_stmt|;
name|int
name|elapsed
init|=
name|d
operator|->
name|starttime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
if|if
condition|(
name|elapsed
operator|>=
name|d
operator|->
name|showTime
condition|)
block|{
name|need_show
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|elapsed
operator|>
name|minWaitTime
condition|)
block|{
name|int
name|estimate
decl_stmt|;
name|int
name|totalSteps
init|=
name|maximum
argument_list|()
operator|-
name|minimum
argument_list|()
decl_stmt|;
name|int
name|myprogress
init|=
name|progress
operator|-
name|minimum
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|totalSteps
operator|-
name|myprogress
operator|)
operator|>=
name|INT_MAX
operator|/
name|elapsed
condition|)
name|estimate
operator|=
operator|(
name|totalSteps
operator|-
name|myprogress
operator|)
operator|/
name|myprogress
operator|*
name|elapsed
expr_stmt|;
else|else
name|estimate
operator|=
name|elapsed
operator|*
operator|(
name|totalSteps
operator|-
name|myprogress
operator|)
operator|/
name|myprogress
expr_stmt|;
name|need_show
operator|=
name|estimate
operator|>=
name|d
operator|->
name|showTime
expr_stmt|;
block|}
else|else
block|{
name|need_show
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|need_show
condition|)
block|{
name|int
name|w
init|=
name|qMax
argument_list|(
name|isVisible
argument_list|()
condition|?
name|width
argument_list|()
else|:
literal|0
argument_list|,
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|qMax
argument_list|(
name|isVisible
argument_list|()
condition|?
name|height
argument_list|()
else|:
literal|0
argument_list|,
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|resize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|show
argument_list|()
expr_stmt|;
name|d
operator|->
name|shown_once
operator|=
literal|true
expr_stmt|;
block|}
block|}
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|QApplication
operator|::
name|flush
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
if|if
condition|(
name|progress
operator|==
name|d
operator|->
name|bar
operator|->
name|maximum
argument_list|()
operator|&&
name|d
operator|->
name|autoReset
condition|)
name|reset
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns a size that fits the contents of the progress dialog.   The progress dialog resizes itself as required, so you should not   need to call this yourself. */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QProgressDialog
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProgressDialog
argument_list|)
expr_stmt|;
name|QSize
name|sh
init|=
name|d
operator|->
name|label
condition|?
name|d
operator|->
name|label
operator|->
name|sizeHint
argument_list|()
else|:
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QSize
name|bh
init|=
name|d
operator|->
name|bar
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
name|int
name|margin
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DefaultTopLevelMargin
argument_list|)
decl_stmt|;
name|int
name|spacing
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DefaultLayoutSpacing
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|margin
operator|*
literal|2
operator|+
name|bh
operator|.
name|height
argument_list|()
operator|+
name|sh
operator|.
name|height
argument_list|()
operator|+
name|spacing
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|cancel
condition|)
name|h
operator|+=
name|d
operator|->
name|cancel
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
operator|+
name|spacing
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_S60
if|if
condition|(
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
operator|>
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
condition|)
return|return
name|QSize
argument_list|(
name|qMax
argument_list|(
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|sh
operator|.
name|width
argument_list|()
operator|+
literal|2
operator|*
name|margin
argument_list|)
argument_list|,
name|h
argument_list|)
return|;
else|else
return|return
name|QSize
argument_list|(
name|qMax
argument_list|(
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
argument_list|,
name|sh
operator|.
name|width
argument_list|()
operator|+
literal|2
operator|*
name|margin
argument_list|)
argument_list|,
name|h
argument_list|)
return|;
else|#
directive|else
return|return
name|QSize
argument_list|(
name|qMax
argument_list|(
literal|200
argument_list|,
name|sh
operator|.
name|width
argument_list|()
operator|+
literal|2
operator|*
name|margin
argument_list|)
argument_list|,
name|h
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!\reimp */
end_comment
begin_function
DECL|function|resizeEvent
name|void
name|QProgressDialog
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|layout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|changeEvent
name|void
name|QProgressDialog
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|ev
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|ev
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|StyleChange
condition|)
block|{
name|d
operator|->
name|layout
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ev
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|LanguageChange
condition|)
block|{
name|d
operator|->
name|retranslateStrings
argument_list|()
expr_stmt|;
block|}
name|QDialog
operator|::
name|changeEvent
argument_list|(
name|ev
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QProgressDialog::minimumDuration     \brief the time that must pass before the dialog appears      If the expected duration of the task is less than the     minimumDuration, the dialog will not appear at all. This prevents     the dialog popping up for tasks that are quickly over. For tasks     that are expected to exceed the minimumDuration, the dialog will     pop up after the minimumDuration time or as soon as any progress     is set.      If set to 0, the dialog is always shown as soon as any progress is     set. The default is 4000 milliseconds. */
end_comment
begin_function
DECL|function|setMinimumDuration
name|void
name|QProgressDialog
operator|::
name|setMinimumDuration
parameter_list|(
name|int
name|ms
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|showTime
operator|=
name|ms
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|bar
operator|->
name|value
argument_list|()
operator|==
literal|0
condition|)
block|{
name|d
operator|->
name|forceTimer
operator|->
name|stop
argument_list|()
expr_stmt|;
name|d
operator|->
name|forceTimer
operator|->
name|start
argument_list|(
name|ms
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|minimumDuration
name|int
name|QProgressDialog
operator|::
name|minimumDuration
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProgressDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|showTime
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|closeEvent
name|void
name|QProgressDialog
operator|::
name|closeEvent
parameter_list|(
name|QCloseEvent
modifier|*
name|e
parameter_list|)
block|{
emit|emit
name|canceled
argument_list|()
emit|;
name|QDialog
operator|::
name|closeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \property QProgressDialog::autoReset   \brief whether the progress dialog calls reset() as soon as value() equals maximum()    The default is true.    \sa setAutoClose() */
end_comment
begin_function
DECL|function|setAutoReset
name|void
name|QProgressDialog
operator|::
name|setAutoReset
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|autoReset
operator|=
name|b
expr_stmt|;
block|}
end_function
begin_function
DECL|function|autoReset
name|bool
name|QProgressDialog
operator|::
name|autoReset
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProgressDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|autoReset
return|;
block|}
end_function
begin_comment
comment|/*!   \property QProgressDialog::autoClose   \brief whether the dialog gets hidden by reset()    The default is true.    \sa setAutoReset() */
end_comment
begin_function
DECL|function|setAutoClose
name|void
name|QProgressDialog
operator|::
name|setAutoClose
parameter_list|(
name|bool
name|close
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|autoClose
operator|=
name|close
expr_stmt|;
block|}
end_function
begin_function
DECL|function|autoClose
name|bool
name|QProgressDialog
operator|::
name|autoClose
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QProgressDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|autoClose
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|showEvent
name|void
name|QProgressDialog
operator|::
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
name|QDialog
operator|::
name|showEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|int
name|w
init|=
name|qMax
argument_list|(
name|isVisible
argument_list|()
condition|?
name|width
argument_list|()
else|:
literal|0
argument_list|,
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|qMax
argument_list|(
name|isVisible
argument_list|()
condition|?
name|height
argument_list|()
else|:
literal|0
argument_list|,
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|resize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|d
operator|->
name|forceTimer
operator|->
name|stop
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Shows the dialog if it is still hidden after the algorithm has been started   and minimumDuration milliseconds have passed.    \sa setMinimumDuration() */
end_comment
begin_function
DECL|function|forceShow
name|void
name|QProgressDialog
operator|::
name|forceShow
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|forceTimer
operator|->
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|shown_once
operator|||
name|d
operator|->
name|cancellation_flag
condition|)
return|return;
name|show
argument_list|()
expr_stmt|;
name|d
operator|->
name|shown_once
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5     \overload      Opens the dialog and connects its accepted() signal to the slot specified     by \a receiver and \a member.      The signal will be disconnected from the slot when the dialog is closed. */
end_comment
begin_function
DECL|function|open
name|void
name|QProgressDialog
operator|::
name|open
parameter_list|(
name|QObject
modifier|*
name|receiver
parameter_list|,
specifier|const
name|char
modifier|*
name|member
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QProgressDialog
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|canceled
argument_list|()
argument_list|)
argument_list|,
name|receiver
argument_list|,
name|member
argument_list|)
expr_stmt|;
name|d
operator|->
name|receiverToDisconnectOnClose
operator|=
name|receiver
expr_stmt|;
name|d
operator|->
name|memberToDisconnectOnClose
operator|=
name|member
expr_stmt|;
name|QDialog
operator|::
name|open
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qprogressdialog.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PROGRESSDIALOG
end_comment
end_unit
