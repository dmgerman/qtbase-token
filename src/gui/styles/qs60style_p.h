begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QS60STYLE_P_H
end_ifndef
begin_define
DECL|macro|QS60STYLE_P_H
define|#
directive|define
name|QS60STYLE_P_H
end_define
begin_include
include|#
directive|include
file|"qs60style.h"
end_include
begin_include
include|#
directive|include
file|"qcommonstyle_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qhash.h>
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|MAX_NON_CUSTOM_PIXELMETRICS
specifier|const
name|int
name|MAX_NON_CUSTOM_PIXELMETRICS
init|=
literal|92
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|CUSTOMVALUESCOUNT
specifier|const
name|int
name|CUSTOMVALUESCOUNT
init|=
literal|5
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|MAX_PIXELMETRICS
specifier|const
name|int
name|MAX_PIXELMETRICS
init|=
name|MAX_NON_CUSTOM_PIXELMETRICS
operator|+
name|CUSTOMVALUESCOUNT
decl_stmt|;
end_decl_stmt
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|height
name|unsigned
name|short
name|height
decl_stmt|;
DECL|member|width
name|unsigned
name|short
name|width
decl_stmt|;
DECL|member|major_version
name|int
name|major_version
decl_stmt|;
DECL|member|minor_version
name|int
name|minor_version
decl_stmt|;
DECL|member|layoutName
specifier|const
name|char
modifier|*
name|layoutName
decl_stmt|;
block|}
DECL|typedef|layoutHeader
name|layoutHeader
typedef|;
end_typedef
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
end_ifdef
begin_macro
DECL|function|NONSHARABLE_CLASS
name|NONSHARABLE_CLASS
argument_list|(
argument|QS60StyleEnums
argument_list|)
end_macro
begin_else
else|#
directive|else
end_else
begin_decl_stmt
name|class
name|QS60StyleEnums
endif|#
directive|endif
range|:
name|public
name|QObject
block|{
ifndef|#
directive|ifndef
name|Q_WS_S60
name|Q_OBJECT
name|Q_ENUMS
argument_list|(
argument|FontCategories
argument_list|)
name|Q_ENUMS
argument_list|(
argument|SkinParts
argument_list|)
name|Q_ENUMS
argument_list|(
argument|ColorLists
argument_list|)
endif|#
directive|endif
comment|// !Q_WS_S60
name|public
operator|:
comment|// S60 definitions within theme
expr|enum
name|ThemeDefinitions
block|{
name|TD_AnimationData
block|,     }
block|;
comment|//Defines which values are contained within animation data (retrieved using TD_AnimationData).
comment|//Additionally defines the order in which the items are given out in QList<QVariant>.
block|enum
name|AnimationData
block|{
name|AD_Interval
operator|=
literal|0
block|,
name|AD_NumberOfFrames
block|,
name|AD_AnimationPlayMode
block|,
comment|//currently not used as themes seem to contain invalid data
block|}
block|;
comment|// Animation modes
block|enum
name|AnimationMode
block|{
name|AM_PlayOnce
operator|=
literal|0
block|,
comment|//animation is played exactly once
name|AM_Looping
block|,
comment|//animation is repeated until stopped
name|AM_Bounce
comment|//animation is played repeatedly until stopped,
comment|//but frames are played in reverse order every second time
comment|//(no support yet)
block|}
block|;
comment|// S60 look-and-feel font categories
block|enum
name|FontCategories
block|{
name|FC_Undefined
block|,
name|FC_Primary
block|,
name|FC_Secondary
block|,
name|FC_Title
block|,
name|FC_PrimarySmall
block|,
name|FC_Digital
block|}
block|;      enum
name|SkinParts
block|{
name|SP_QgnGrafBarWaitAnim
block|,
name|SP_QgnGrafBarFrameCenter
block|,
name|SP_QgnGrafBarFrameSideL
block|,
name|SP_QgnGrafBarFrameSideR
block|,
name|SP_QgnGrafBarProgress
block|,
name|SP_QgnGrafOrgBgGrid
block|,
name|SP_QgnGrafScrollArrowDown
block|,
name|SP_QgnGrafScrollArrowLeft
block|,
name|SP_QgnGrafScrollArrowRight
block|,
name|SP_QgnGrafScrollArrowUp
block|,
name|SP_QgnGrafTabActiveL
block|,
name|SP_QgnGrafTabActiveM
block|,
name|SP_QgnGrafTabActiveR
block|,
name|SP_QgnGrafTabPassiveL
block|,
name|SP_QgnGrafTabPassiveM
block|,
name|SP_QgnGrafTabPassiveR
block|,
name|SP_QgnGrafNsliderEndLeft
block|,
name|SP_QgnGrafNsliderEndRight
block|,
name|SP_QgnGrafNsliderMiddle
block|,
name|SP_QgnIndiCheckboxOff
block|,
name|SP_QgnIndiCheckboxOn
block|,
name|SP_QgnIndiHlColSuper
block|,
comment|// Available in S60 release 3.2 and later.
name|SP_QgnIndiHlExpSuper
block|,
comment|// Available in S60 release 3.2 and later.
name|SP_QgnIndiHlLineBranch
block|,
comment|// Available in S60 release 3.2 and later.
name|SP_QgnIndiHlLineEnd
block|,
comment|// Available in S60 release 3.2 and later.
name|SP_QgnIndiHlLineStraight
block|,
comment|// Available in S60 release 3.2 and later.
name|SP_QgnIndiMarkedAdd
block|,
name|SP_QgnIndiNaviArrowLeft
block|,
name|SP_QgnIndiNaviArrowRight
block|,
name|SP_QgnIndiRadiobuttOff
block|,
name|SP_QgnIndiRadiobuttOn
block|,
name|SP_QgnGrafNsliderMarker
block|,
name|SP_QgnGrafNsliderMarkerSelected
block|,
name|SP_QgnIndiSubmenu
block|,
name|SP_QgnNoteErased
block|,
name|SP_QgnNoteError
block|,
name|SP_QgnNoteInfo
block|,
name|SP_QgnNoteOk
block|,
name|SP_QgnNoteQuery
block|,
name|SP_QgnNoteWarning
block|,
name|SP_QgnPropFileSmall
block|,
name|SP_QgnPropFolderCurrent
block|,
name|SP_QgnPropFolderSmall
block|,
name|SP_QgnPropFolderSmallNew
block|,
name|SP_QgnPropPhoneMemcLarge
block|,
name|SP_QgnFrSctrlButtonCornerTl
block|,
comment|// Toolbar button
name|SP_QgnFrSctrlButtonCornerTr
block|,
name|SP_QgnFrSctrlButtonCornerBl
block|,
name|SP_QgnFrSctrlButtonCornerBr
block|,
name|SP_QgnFrSctrlButtonSideT
block|,
name|SP_QgnFrSctrlButtonSideB
block|,
name|SP_QgnFrSctrlButtonSideL
block|,
name|SP_QgnFrSctrlButtonSideR
block|,
name|SP_QgnFrSctrlButtonCenter
block|,
name|SP_QgnFrSctrlButtonCornerTlPressed
block|,
comment|// Toolbar button, pressed
name|SP_QgnFrSctrlButtonCornerTrPressed
block|,
name|SP_QgnFrSctrlButtonCornerBlPressed
block|,
name|SP_QgnFrSctrlButtonCornerBrPressed
block|,
name|SP_QgnFrSctrlButtonSideTPressed
block|,
name|SP_QgnFrSctrlButtonSideBPressed
block|,
name|SP_QgnFrSctrlButtonSideLPressed
block|,
name|SP_QgnFrSctrlButtonSideRPressed
block|,
name|SP_QgnFrSctrlButtonCenterPressed
block|,
name|SP_QsnCpScrollHandleBottomPressed
block|,
comment|//ScrollBar handle, pressed state
name|SP_QsnCpScrollHandleMiddlePressed
block|,
name|SP_QsnCpScrollHandleTopPressed
block|,
name|SP_QsnBgScreen
block|,
name|SP_QsnCpScrollBgBottom
block|,
name|SP_QsnCpScrollBgMiddle
block|,
name|SP_QsnCpScrollBgTop
block|,
name|SP_QsnCpScrollHandleBottom
block|,
name|SP_QsnCpScrollHandleMiddle
block|,
name|SP_QsnCpScrollHandleTop
block|,
name|SP_QsnFrButtonTbCornerTl
block|,
comment|// Button, normal state
name|SP_QsnFrButtonTbCornerTr
block|,
name|SP_QsnFrButtonTbCornerBl
block|,
name|SP_QsnFrButtonTbCornerBr
block|,
name|SP_QsnFrButtonTbSideT
block|,
name|SP_QsnFrButtonTbSideB
block|,
name|SP_QsnFrButtonTbSideL
block|,
name|SP_QsnFrButtonTbSideR
block|,
name|SP_QsnFrButtonTbCenter
block|,
name|SP_QsnFrButtonTbCornerTlPressed
block|,
comment|// Button, pressed state
name|SP_QsnFrButtonTbCornerTrPressed
block|,
name|SP_QsnFrButtonTbCornerBlPressed
block|,
name|SP_QsnFrButtonTbCornerBrPressed
block|,
name|SP_QsnFrButtonTbSideTPressed
block|,
name|SP_QsnFrButtonTbSideBPressed
block|,
name|SP_QsnFrButtonTbSideLPressed
block|,
name|SP_QsnFrButtonTbSideRPressed
block|,
name|SP_QsnFrButtonTbCenterPressed
block|,
name|SP_QsnFrCaleCornerTl
block|,
comment|// calendar grid item
name|SP_QsnFrCaleCornerTr
block|,
name|SP_QsnFrCaleCornerBl
block|,
name|SP_QsnFrCaleCornerBr
block|,
name|SP_QsnFrCaleSideT
block|,
name|SP_QsnFrCaleSideB
block|,
name|SP_QsnFrCaleSideL
block|,
name|SP_QsnFrCaleSideR
block|,
name|SP_QsnFrCaleCenter
block|,
name|SP_QsnFrCaleHeadingCornerTl
block|,
comment|// calendar grid header
name|SP_QsnFrCaleHeadingCornerTr
block|,
name|SP_QsnFrCaleHeadingCornerBl
block|,
name|SP_QsnFrCaleHeadingCornerBr
block|,
name|SP_QsnFrCaleHeadingSideT
block|,
name|SP_QsnFrCaleHeadingSideB
block|,
name|SP_QsnFrCaleHeadingSideL
block|,
name|SP_QsnFrCaleHeadingSideR
block|,
name|SP_QsnFrCaleHeadingCenter
block|,
name|SP_QsnFrInputCornerTl
block|,
comment|// Text input field
name|SP_QsnFrInputCornerTr
block|,
name|SP_QsnFrInputCornerBl
block|,
name|SP_QsnFrInputCornerBr
block|,
name|SP_QsnFrInputSideT
block|,
name|SP_QsnFrInputSideB
block|,
name|SP_QsnFrInputSideL
block|,
name|SP_QsnFrInputSideR
block|,
name|SP_QsnFrInputCenter
block|,
name|SP_QsnFrListCornerTl
block|,
comment|// List background
name|SP_QsnFrListCornerTr
block|,
name|SP_QsnFrListCornerBl
block|,
name|SP_QsnFrListCornerBr
block|,
name|SP_QsnFrListSideT
block|,
name|SP_QsnFrListSideB
block|,
name|SP_QsnFrListSideL
block|,
name|SP_QsnFrListSideR
block|,
name|SP_QsnFrListCenter
block|,
name|SP_QsnFrPopupCornerTl
block|,
comment|// Option menu background
name|SP_QsnFrPopupCornerTr
block|,
name|SP_QsnFrPopupCornerBl
block|,
name|SP_QsnFrPopupCornerBr
block|,
name|SP_QsnFrPopupSideT
block|,
name|SP_QsnFrPopupSideB
block|,
name|SP_QsnFrPopupSideL
block|,
name|SP_QsnFrPopupSideR
block|,
name|SP_QsnFrPopupCenter
block|,
name|SP_QsnFrPopupPreviewCornerTl
block|,
comment|// tool tip background
name|SP_QsnFrPopupPreviewCornerTr
block|,
name|SP_QsnFrPopupPreviewCornerBl
block|,
name|SP_QsnFrPopupPreviewCornerBr
block|,
name|SP_QsnFrPopupPreviewSideT
block|,
name|SP_QsnFrPopupPreviewSideB
block|,
name|SP_QsnFrPopupPreviewSideL
block|,
name|SP_QsnFrPopupPreviewSideR
block|,
name|SP_QsnFrPopupPreviewCenter
block|,
name|SP_QsnFrSetOptCornerTl
block|,
comment|// Settings list
name|SP_QsnFrSetOptCornerTr
block|,
name|SP_QsnFrSetOptCornerBl
block|,
name|SP_QsnFrSetOptCornerBr
block|,
name|SP_QsnFrSetOptSideT
block|,
name|SP_QsnFrSetOptSideB
block|,
name|SP_QsnFrSetOptSideL
block|,
name|SP_QsnFrSetOptSideR
block|,
name|SP_QsnFrSetOptCenter
block|,
name|SP_QsnFrPopupSubCornerTl
block|,
comment|// Toolbar background
name|SP_QsnFrPopupSubCornerTr
block|,
name|SP_QsnFrPopupSubCornerBl
block|,
name|SP_QsnFrPopupSubCornerBr
block|,
name|SP_QsnFrPopupSubSideT
block|,
name|SP_QsnFrPopupSubSideB
block|,
name|SP_QsnFrPopupSubSideL
block|,
name|SP_QsnFrPopupSubSideR
block|,
name|SP_QsnFrPopupSubCenter
block|,
name|SP_QsnFrButtonCornerTlInactive
block|,
comment|// Inactive button
name|SP_QsnFrButtonCornerTrInactive
block|,
name|SP_QsnFrButtonCornerBlInactive
block|,
name|SP_QsnFrButtonCornerBrInactive
block|,
name|SP_QsnFrButtonSideTInactive
block|,
name|SP_QsnFrButtonSideBInactive
block|,
name|SP_QsnFrButtonSideLInactive
block|,
name|SP_QsnFrButtonSideRInactive
block|,
name|SP_QsnFrButtonCenterInactive
block|,
name|SP_QsnFrGridCornerTlPressed
block|,
comment|// Pressed table item
name|SP_QsnFrGridCornerTrPressed
block|,
name|SP_QsnFrGridCornerBlPressed
block|,
name|SP_QsnFrGridCornerBrPressed
block|,
name|SP_QsnFrGridSideTPressed
block|,
name|SP_QsnFrGridSideBPressed
block|,
name|SP_QsnFrGridSideLPressed
block|,
name|SP_QsnFrGridSideRPressed
block|,
name|SP_QsnFrGridCenterPressed
block|,
name|SP_QsnFrListCornerTlPressed
block|,
comment|// Pressed list item
name|SP_QsnFrListCornerTrPressed
block|,
name|SP_QsnFrListCornerBlPressed
block|,
name|SP_QsnFrListCornerBrPressed
block|,
name|SP_QsnFrListSideTPressed
block|,
name|SP_QsnFrListSideBPressed
block|,
name|SP_QsnFrListSideLPressed
block|,
name|SP_QsnFrListSideRPressed
block|,
name|SP_QsnFrListCenterPressed
block|,     }
block|;      enum
name|ColorLists
block|{
name|CL_QsnHighlightColors
block|,
name|CL_QsnIconColors
block|,
name|CL_QsnLineColors
block|,
name|CL_QsnOtherColors
block|,
name|CL_QsnParentColors
block|,
name|CL_QsnTextColors
block|}
block|; }
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_S60
end_ifdef
begin_decl_stmt
DECL|variable|CAknBitmapAnimation
name|class
name|CAknBitmapAnimation
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|function|NONSHARABLE_CLASS
name|NONSHARABLE_CLASS
argument_list|(
name|AnimationData
argument_list|)
operator|:
name|public
name|QObject
block|{
name|public
operator|:
name|AnimationData
argument_list|(
argument|const QS60StyleEnums::SkinParts part
argument_list|,
argument|int frames
argument_list|,
argument|int interval
argument_list|)
block|;
specifier|const
name|QS60StyleEnums
operator|::
name|SkinParts
name|m_id
block|;
name|int
name|m_frames
block|;
name|int
name|m_interval
block|;
name|QS60StyleEnums
operator|::
name|AnimationMode
name|m_mode
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|function|NONSHARABLE_CLASS
name|NONSHARABLE_CLASS
argument_list|(
name|AnimationDataV2
argument_list|)
operator|:
name|public
name|AnimationData
block|{
name|public
operator|:
name|AnimationDataV2
argument_list|(
specifier|const
name|AnimationData
operator|&
name|data
argument_list|)
block|;
operator|~
name|AnimationDataV2
argument_list|()
block|;
name|CAknBitmapAnimation
operator|*
name|m_animation
block|;
name|int
name|m_currentFrame
block|;
name|bool
name|m_resourceBased
block|;
name|int
name|m_timerId
block|; }
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|class
name|QS60StyleAnimation
range|:
name|public
name|QObject
block|{
name|public
operator|:
name|QS60StyleAnimation
argument_list|(
argument|const QS60StyleEnums::SkinParts part
argument_list|,
argument|int frames
argument_list|,
argument|int interval
argument_list|)
block|;
operator|~
name|QS60StyleAnimation
argument_list|()
block|;
name|public
operator|:
name|QS60StyleEnums
operator|::
name|SkinParts
name|animationId
argument_list|()
specifier|const
block|{
return|return
name|m_currentData
operator|->
name|m_id
return|;
block|}
name|int
name|frameCount
argument_list|()
specifier|const
block|{
return|return
name|m_currentData
operator|->
name|m_frames
return|;
block|}
name|int
name|interval
argument_list|()
specifier|const
block|{
return|return
name|m_currentData
operator|->
name|m_interval
return|;
block|}
name|QS60StyleEnums
operator|::
name|AnimationMode
name|playMode
argument_list|()
specifier|const
block|{
return|return
name|m_currentData
operator|->
name|m_mode
return|;
block|}
name|CAknBitmapAnimation
operator|*
name|animationObject
argument_list|()
specifier|const
block|{
return|return
name|m_currentData
operator|->
name|m_animation
return|;
block|}
name|bool
name|isResourceBased
argument_list|()
specifier|const
block|{
return|return
name|m_currentData
operator|->
name|m_resourceBased
return|;
block|}
name|int
name|timerId
argument_list|()
specifier|const
block|{
return|return
name|m_currentData
operator|->
name|m_timerId
return|;
block|}
name|int
name|currentFrame
argument_list|()
specifier|const
block|{
return|return
name|m_currentData
operator|->
name|m_currentFrame
return|;
block|}
name|void
name|setFrameCount
argument_list|(
argument|int frameCount
argument_list|)
block|{
name|m_currentData
operator|->
name|m_frames
operator|=
name|frameCount
block|;}
name|void
name|setInterval
argument_list|(
argument|int interval
argument_list|)
block|{
name|m_currentData
operator|->
name|m_interval
operator|=
name|interval
block|;}
name|void
name|setAnimationObject
argument_list|(
name|CAknBitmapAnimation
operator|*
name|animation
argument_list|)
block|;
name|void
name|setResourceBased
argument_list|(
argument|bool resourceBased
argument_list|)
block|{
name|m_currentData
operator|->
name|m_resourceBased
operator|=
name|resourceBased
block|;}
name|void
name|setTimerId
argument_list|(
argument|int timerId
argument_list|)
block|{
name|m_currentData
operator|->
name|m_timerId
operator|=
name|timerId
block|;}
name|void
name|setCurrentFrame
argument_list|(
argument|int currentFrame
argument_list|)
block|{
name|m_currentData
operator|->
name|m_currentFrame
operator|=
name|currentFrame
block|;}
name|void
name|resetToDefaults
argument_list|()
block|;
name|private
operator|:
comment|//data members
comment|//TODO: consider changing these to non-pointers as the classes are rather small anyway
name|AnimationData
operator|*
name|m_defaultData
block|;
name|AnimationDataV2
operator|*
name|m_currentData
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//Q_WS_S60
end_comment
begin_decl_stmt
DECL|variable|QFocusFrame
name|class
name|QFocusFrame
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QProgressBar
name|class
name|QProgressBar
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QS60StyleAnimation
name|class
name|QS60StyleAnimation
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Private class
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
end_ifdef
begin_macro
DECL|function|NONSHARABLE_CLASS
name|NONSHARABLE_CLASS
argument_list|(
argument|QS60StylePrivate
argument_list|)
end_macro
begin_else
else|#
directive|else
end_else
begin_decl_stmt
name|class
name|QS60StylePrivate
endif|#
directive|endif
range|:
name|public
name|QCommonStylePrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QS60Style
argument_list|)
name|public
operator|:
name|QS60StylePrivate
argument_list|()
block|;
operator|~
name|QS60StylePrivate
argument_list|()
block|;      enum
name|SkinElements
block|{
name|SE_ButtonNormal
block|,
name|SE_ButtonPressed
block|,
name|SE_FrameLineEdit
block|,
name|SE_ProgressBarGrooveHorizontal
block|,
name|SE_ProgressBarIndicatorHorizontal
block|,
name|SE_ProgressBarGrooveVertical
block|,
name|SE_ProgressBarIndicatorVertical
block|,
name|SE_ScrollBarGrooveHorizontal
block|,
name|SE_ScrollBarGrooveVertical
block|,
name|SE_ScrollBarHandleHorizontal
block|,
name|SE_ScrollBarHandleVertical
block|,
name|SE_SliderHandleHorizontal
block|,
name|SE_SliderHandleVertical
block|,
name|SE_SliderHandleSelectedHorizontal
block|,
name|SE_SliderHandleSelectedVertical
block|,
name|SE_SliderGrooveVertical
block|,
name|SE_SliderGrooveHorizontal
block|,
name|SE_TabBarTabEastActive
block|,
name|SE_TabBarTabEastInactive
block|,
name|SE_TabBarTabNorthActive
block|,
name|SE_TabBarTabNorthInactive
block|,
name|SE_TabBarTabSouthActive
block|,
name|SE_TabBarTabSouthInactive
block|,
name|SE_TabBarTabWestActive
block|,
name|SE_TabBarTabWestInactive
block|,
name|SE_ListHighlight
block|,
name|SE_PopupBackground
block|,
name|SE_SettingsList
block|,
name|SE_TableItem
block|,
name|SE_TableHeaderItem
block|,
name|SE_ToolTip
block|,
comment|//own graphic available on 3.2+ releases,
name|SE_ToolBar
block|,
name|SE_ToolBarButton
block|,
name|SE_ToolBarButtonPressed
block|,
name|SE_PanelBackground
block|,
name|SE_ScrollBarHandlePressedHorizontal
block|,
name|SE_ScrollBarHandlePressedVertical
block|,
name|SE_ButtonInactive
block|,
name|SE_Editor
block|,
name|SE_DropArea
block|,
name|SE_TableItemPressed
block|,
name|SE_ListItemPressed
block|,     }
block|;      enum
name|SkinFrameElements
block|{
name|SF_ButtonNormal
block|,
name|SF_ButtonPressed
block|,
name|SF_FrameLineEdit
block|,
name|SF_ListHighlight
block|,
name|SF_PopupBackground
block|,
name|SF_SettingsList
block|,
name|SF_TableItem
block|,
name|SF_TableHeaderItem
block|,
name|SF_ToolTip
block|,
name|SF_ToolBar
block|,
name|SF_ToolBarButton
block|,
name|SF_ToolBarButtonPressed
block|,
name|SF_PanelBackground
block|,
name|SF_ButtonInactive
block|,
name|SF_TableItemPressed
block|,
name|SF_ListItemPressed
block|,     }
block|;      enum
name|SkinElementFlag
block|{
name|SF_PointNorth
operator|=
literal|0x0001
block|,
comment|// North = the default
name|SF_PointEast
operator|=
literal|0x0002
block|,
name|SF_PointSouth
operator|=
literal|0x0004
block|,
name|SF_PointWest
operator|=
literal|0x0008
block|,
name|SF_StateEnabled
operator|=
literal|0x0010
block|,
comment|// Enabled = the default
name|SF_StateDisabled
operator|=
literal|0x0020
block|,
name|SF_ColorSkinned
operator|=
literal|0x0040
block|,
comment|// pixmap is colored with foreground pen color
name|SF_Animation
operator|=
literal|0x0080
block|,
name|SF_Mirrored_X_Axis
operator|=
literal|0x0100
block|,
name|SF_Mirrored_Y_Axis
operator|=
literal|0x0200
block|}
block|;      enum
name|CacheClearReason
block|{
name|CC_UndefinedChange
operator|=
literal|0
block|,
name|CC_LayoutChange
block|,
name|CC_ThemeChange
block|}
block|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|SkinElementFlags
argument_list|,
argument|SkinElementFlag
argument_list|)
comment|// draws skin element
specifier|static
name|void
name|drawSkinElement
argument_list|(
argument|SkinElements element
argument_list|,
argument|QPainter *painter
argument_list|,
argument|const QRect&rect
argument_list|,
argument|SkinElementFlags flags = KDefaultSkinElementFlags
argument_list|)
block|;
comment|// draws a specific skin part
specifier|static
name|void
name|drawSkinPart
argument_list|(
argument|QS60StyleEnums::SkinParts part
argument_list|,
argument|QPainter *painter
argument_list|,
argument|const QRect&rect
argument_list|,
argument|SkinElementFlags flags = KDefaultSkinElementFlags
argument_list|)
block|;
comment|// gets pixel metrics value
specifier|static
name|short
name|pixelMetric
argument_list|(
argument|int metric
argument_list|)
block|;
comment|// gets color. 'index' is NOT 0-based.
comment|// It corresponds to the enum key 1-based numbers of TAknsQsnXYZColorsIndex, not the values.
specifier|static
name|QColor
name|s60Color
argument_list|(
argument|QS60StyleEnums::ColorLists list
argument_list|,
argument|int index
argument_list|,
argument|const QStyleOption *option
argument_list|)
block|;
comment|// gets state specific color
specifier|static
name|QColor
name|stateColor
argument_list|(
specifier|const
name|QColor
operator|&
name|color
argument_list|,
specifier|const
name|QStyleOption
operator|*
name|option
argument_list|)
block|;
comment|// gets lighter color than base color
specifier|static
name|QColor
name|lighterColor
argument_list|(
specifier|const
name|QColor
operator|&
name|baseColor
argument_list|)
block|;
comment|//deduces if the given widget should have separately themeable background
specifier|static
name|bool
name|drawsOwnThemeBackground
argument_list|(
specifier|const
name|QWidget
operator|*
name|widget
argument_list|)
block|;
name|QFont
name|s60Font
argument_list|(
argument|QS60StyleEnums::FontCategories fontCategory
argument_list|,
argument|int pointSize = -
literal|1
argument_list|,
argument|bool resolveFontSize = true
argument_list|)
specifier|const
block|;
comment|// clears all style caches (fonts, colors, pixmaps)
name|void
name|clearCaches
argument_list|(
argument|CacheClearReason reason = CC_UndefinedChange
argument_list|)
block|;
comment|// themed main background oprations
name|void
name|setBackgroundTexture
argument_list|(
argument|QApplication *application
argument_list|)
specifier|const
block|;
specifier|static
name|void
name|deleteBackground
argument_list|()
block|;
specifier|static
name|bool
name|isTouchSupported
argument_list|()
block|;
specifier|static
name|bool
name|isToolBarBackground
argument_list|()
block|;
specifier|static
name|bool
name|hasSliderGrooveGraphic
argument_list|()
block|;
specifier|static
name|bool
name|isSingleClickUi
argument_list|()
block|;
specifier|static
name|bool
name|isWidgetPressed
argument_list|(
specifier|const
name|QWidget
operator|*
name|widget
argument_list|)
block|;
ifdef|#
directive|ifdef
name|Q_WS_S60
specifier|static
name|void
name|deleteStoredSettings
argument_list|()
block|;
comment|// calculates average color based on theme graphics (minus borders).
name|QColor
name|colorFromFrameGraphics
argument_list|(
argument|SkinFrameElements frame
argument_list|)
specifier|const
block|;
endif|#
directive|endif
name|QColor
name|calculatedColor
argument_list|(
argument|SkinFrameElements frame
argument_list|)
specifier|const
block|;
comment|//set theme palette for application
name|void
name|setThemePalette
argument_list|(
argument|QApplication *application
argument_list|)
specifier|const
block|;
comment|//access to theme palette
specifier|static
name|QPalette
operator|*
name|themePalette
argument_list|()
block|;
specifier|static
specifier|const
name|layoutHeader
name|m_layoutHeaders
index|[]
block|;
specifier|static
specifier|const
name|short
name|data
index|[]
index|[
name|MAX_PIXELMETRICS
index|]
block|;
name|void
name|setCurrentLayout
argument_list|(
argument|int layoutIndex
argument_list|)
block|;
name|void
name|setActiveLayout
argument_list|()
block|;
comment|// Pointer
specifier|static
name|short
specifier|const
operator|*
name|m_pmPointer
block|;
comment|// number of layouts supported by the style
specifier|static
specifier|const
name|int
name|m_numberOfLayouts
block|;
name|mutable
name|QHash
operator|<
name|QPair
operator|<
name|QS60StyleEnums
operator|::
name|FontCategories
block|,
name|int
operator|>
block|,
name|QFont
operator|>
name|m_mappedFontsCache
block|;
comment|// Has one entry per SkinFrameElements
specifier|static
specifier|const
expr|struct
name|frameElementCenter
block|{
name|SkinElements
name|element
block|;
name|QS60StyleEnums
operator|::
name|SkinParts
name|center
block|;     }
name|m_frameElementsData
index|[]
block|;
specifier|static
name|QPixmap
name|frame
argument_list|(
argument|SkinFrameElements frame
argument_list|,
argument|const QSize&size
argument_list|,
argument|SkinElementFlags flags = KDefaultSkinElementFlags
argument_list|)
block|;
specifier|static
name|QPixmap
name|backgroundTexture
argument_list|(
argument|bool skipCreation = false
argument_list|)
block|;
specifier|static
name|QPixmap
name|placeHolderTexture
argument_list|()
block|;
ifdef|#
directive|ifdef
name|Q_WS_S60
name|void
name|handleDynamicLayoutVariantSwitch
argument_list|()
block|;
name|void
name|handleSkinChange
argument_list|()
block|;
endif|#
directive|endif
comment|// Q_WS_S60
comment|//Checks that the current brush is transparent or has BrushStyle NoBrush,
comment|//so that theme graphic background can be drawn.
specifier|static
name|bool
name|canDrawThemeBackground
argument_list|(
specifier|const
name|QBrush
operator|&
name|backgroundBrush
argument_list|,
specifier|const
name|QWidget
operator|*
name|widget
argument_list|)
block|;
specifier|static
name|int
name|currentAnimationFrame
argument_list|(
argument|QS60StyleEnums::SkinParts part
argument_list|)
block|;
ifdef|#
directive|ifdef
name|Q_WS_S60
comment|//No support for animations on emulated style
name|void
name|startAnimation
argument_list|(
argument|QS60StyleEnums::SkinParts animation
argument_list|)
block|;
name|void
name|stopAnimation
argument_list|(
argument|QS60StyleEnums::SkinParts animation
argument_list|)
block|;
specifier|static
name|QS60StyleAnimation
operator|*
name|animationDefinition
argument_list|(
argument|QS60StyleEnums::SkinParts part
argument_list|)
block|;
specifier|static
name|void
name|removeAnimations
argument_list|()
block|;
endif|#
directive|endif
name|private
operator|:
specifier|static
name|void
name|drawPart
argument_list|(
argument|QS60StyleEnums::SkinParts part
argument_list|,
argument|QPainter *painter
argument_list|,
argument|const QRect&rect
argument_list|,
argument|SkinElementFlags flags = KDefaultSkinElementFlags
argument_list|)
block|;
specifier|static
name|void
name|drawRow
argument_list|(
argument|QS60StyleEnums::SkinParts start
argument_list|,
argument|QS60StyleEnums::SkinParts middle
argument_list|,
argument|QS60StyleEnums::SkinParts end
argument_list|,
argument|Qt::Orientation orientation
argument_list|,
argument|QPainter *painter
argument_list|,
argument|const QRect&rect
argument_list|,
argument|SkinElementFlags flags = KDefaultSkinElementFlags
argument_list|)
block|;
specifier|static
name|void
name|drawFrame
argument_list|(
argument|SkinFrameElements frame
argument_list|,
argument|QPainter *painter
argument_list|,
argument|const QRect&rect
argument_list|,
argument|SkinElementFlags flags = KDefaultSkinElementFlags
argument_list|)
block|;
specifier|static
name|QPixmap
name|cachedPart
argument_list|(
argument|QS60StyleEnums::SkinParts part
argument_list|,
argument|const QSize&size
argument_list|,
argument|QPainter *painter
argument_list|,
argument|SkinElementFlags flags = KDefaultSkinElementFlags
argument_list|)
block|;
specifier|static
name|QPixmap
name|cachedFrame
argument_list|(
argument|SkinFrameElements frame
argument_list|,
argument|const QSize&size
argument_list|,
argument|SkinElementFlags flags = KDefaultSkinElementFlags
argument_list|)
block|;
comment|// set S60 font for widget
name|void
name|setFont
argument_list|(
argument|QWidget *widget
argument_list|)
specifier|const
block|;
specifier|static
name|void
name|setThemePalette
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|)
block|;
name|void
name|setThemePalette
argument_list|(
argument|QPalette *palette
argument_list|)
specifier|const
block|;
specifier|static
name|void
name|setThemePaletteHash
argument_list|(
name|QPalette
operator|*
name|palette
argument_list|)
block|;
specifier|static
name|void
name|storeThemePalette
argument_list|(
name|QPalette
operator|*
name|palette
argument_list|)
block|;
specifier|static
name|void
name|deleteThemePalette
argument_list|()
block|;
specifier|static
name|bool
name|equalToThemePalette
argument_list|(
argument|QColor color
argument_list|,
argument|QPalette::ColorRole role
argument_list|)
block|;
specifier|static
name|bool
name|equalToThemePalette
argument_list|(
argument|qint64 cacheKey
argument_list|,
argument|QPalette::ColorRole role
argument_list|)
block|;
specifier|static
name|QSize
name|partSize
argument_list|(
argument|QS60StyleEnums::SkinParts part
argument_list|,
argument|SkinElementFlags flags = KDefaultSkinElementFlags
argument_list|)
block|;
specifier|static
name|QPixmap
name|part
argument_list|(
argument|QS60StyleEnums::SkinParts part
argument_list|,
argument|const QSize&size
argument_list|,
argument|QPainter *painter
argument_list|,
argument|SkinElementFlags flags = KDefaultSkinElementFlags
argument_list|)
block|;
specifier|static
name|QFont
name|s60Font_specific
argument_list|(
argument|QS60StyleEnums::FontCategories fontCategory
argument_list|,
argument|int pointSize
argument_list|,
argument|bool resolveFontSize
argument_list|)
block|;
specifier|static
name|QSize
name|screenSize
argument_list|()
block|;
comment|// Contains background texture.
specifier|static
name|QPixmap
operator|*
name|m_background
block|;
comment|// Placeholder pixmap for the real background texture.
specifier|static
name|QPixmap
operator|*
name|m_placeHolderTexture
block|;
specifier|const
specifier|static
name|SkinElementFlags
name|KDefaultSkinElementFlags
block|;
comment|// defined theme palette
specifier|static
name|QPalette
operator|*
name|m_themePalette
block|;
name|QPalette
name|m_originalPalette
block|;
name|QPointer
operator|<
name|QFocusFrame
operator|>
name|m_focusFrame
block|;
specifier|static
name|qint64
name|m_webPaletteKey
block|;
specifier|static
name|QPointer
operator|<
name|QWidget
operator|>
name|m_pressedWidget
block|;
ifdef|#
directive|ifdef
name|Q_WS_S60
comment|//list of progress bars having animation running
name|QList
operator|<
name|QProgressBar
operator|*
operator|>
name|m_bars
block|;
endif|#
directive|endif
block|}
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QS60STYLE_P_H
end_comment
end_unit
