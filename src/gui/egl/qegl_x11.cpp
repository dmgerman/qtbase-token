begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qt_x11_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qx11info_x11.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qplatformpixmap_qpa.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qpixmap_x11_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qimagepixmapcleanuphooks_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpaintdevice.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpixmap.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qwidget.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qcolormap.h>
end_include
begin_include
include|#
directive|include
file|"QtGui/private/qegl_p.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/private/qeglcontext_p.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|nativeDisplay
name|EGLNativeDisplayType
name|QEgl
operator|::
name|nativeDisplay
parameter_list|()
block|{
name|Display
modifier|*
name|xdpy
init|=
name|QX11Info
operator|::
name|display
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|xdpy
condition|)
block|{
name|qWarning
argument_list|(
literal|"QEglContext::getDisplay(): X11 display is not open"
argument_list|)
expr_stmt|;
return|return
name|EGLNativeDisplayType
argument_list|(
name|EGL_DEFAULT_DISPLAY
argument_list|)
return|;
block|}
return|return
name|EGLNativeDisplayType
argument_list|(
name|xdpy
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|nativeWindow
name|EGLNativeWindowType
name|QEgl
operator|::
name|nativeWindow
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
return|return
call|(
name|EGLNativeWindowType
call|)
argument_list|(
name|widget
operator|->
name|winId
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|nativePixmap
name|EGLNativePixmapType
name|QEgl
operator|::
name|nativePixmap
parameter_list|(
name|QPixmap
modifier|*
name|pixmap
parameter_list|)
block|{
return|return
call|(
name|EGLNativePixmapType
call|)
argument_list|(
name|pixmap
operator|->
name|handle
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|countBits
specifier|static
name|int
name|countBits
parameter_list|(
name|unsigned
name|long
name|mask
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|mask
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|mask
operator|&
literal|1
condition|)
operator|++
name|count
expr_stmt|;
name|mask
operator|>>=
literal|1
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
end_function
begin_comment
comment|// Set the pixel format parameters from the visual in "xinfo".
end_comment
begin_function
DECL|function|setVisualFormat
name|void
name|QEglProperties
operator|::
name|setVisualFormat
parameter_list|(
specifier|const
name|QX11Info
modifier|*
name|xinfo
parameter_list|)
block|{
if|if
condition|(
operator|!
name|xinfo
condition|)
return|return;
name|Visual
modifier|*
name|visual
init|=
operator|(
name|Visual
operator|*
operator|)
name|xinfo
operator|->
name|visual
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|visual
condition|)
return|return;
if|if
condition|(
name|visual
operator|->
name|c_class
operator|!=
name|TrueColor
operator|&&
name|visual
operator|->
name|c_class
operator|!=
name|DirectColor
condition|)
return|return;
name|setValue
argument_list|(
name|EGL_RED_SIZE
argument_list|,
name|countBits
argument_list|(
name|visual
operator|->
name|red_mask
argument_list|)
argument_list|)
expr_stmt|;
name|setValue
argument_list|(
name|EGL_GREEN_SIZE
argument_list|,
name|countBits
argument_list|(
name|visual
operator|->
name|green_mask
argument_list|)
argument_list|)
expr_stmt|;
name|setValue
argument_list|(
name|EGL_BLUE_SIZE
argument_list|,
name|countBits
argument_list|(
name|visual
operator|->
name|blue_mask
argument_list|)
argument_list|)
expr_stmt|;
name|EGLint
name|alphaBits
init|=
literal|0
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XRENDER
argument_list|)
name|XRenderPictFormat
modifier|*
name|format
decl_stmt|;
name|format
operator|=
name|XRenderFindVisualFormat
argument_list|(
name|xinfo
operator|->
name|display
argument_list|()
argument_list|,
name|visual
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|&&
operator|(
name|format
operator|->
name|type
operator|==
name|PictTypeDirect
operator|)
operator|&&
name|format
operator|->
name|direct
operator|.
name|alphaMask
condition|)
block|{
name|alphaBits
operator|=
name|countBits
argument_list|(
name|format
operator|->
name|direct
operator|.
name|alphaMask
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"QEglProperties::setVisualFormat() - visual's alphaMask is %d"
argument_list|,
name|alphaBits
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|setValue
argument_list|(
name|EGL_ALPHA_SIZE
argument_list|,
name|alphaBits
argument_list|)
expr_stmt|;
block|}
end_function
begin_function_decl
specifier|extern
specifier|const
name|QX11Info
modifier|*
name|qt_x11Info
parameter_list|(
specifier|const
name|QPaintDevice
modifier|*
name|pd
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// Set pixel format and other properties based on a paint device.
end_comment
begin_function
DECL|function|setPaintDeviceFormat
name|void
name|QEglProperties
operator|::
name|setPaintDeviceFormat
parameter_list|(
name|QPaintDevice
modifier|*
name|dev
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dev
condition|)
return|return;
if|if
condition|(
name|dev
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Image
condition|)
name|setPixelFormat
argument_list|(
cast|static_cast
argument_list|<
name|QImage
operator|*
argument_list|>
argument_list|(
name|dev
argument_list|)
operator|->
name|format
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|setVisualFormat
argument_list|(
name|qt_x11Info
argument_list|(
name|dev
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//#define QT_DEBUG_X11_VISUAL_SELECTION 1
end_comment
begin_function
DECL|function|getCompatibleVisualId
name|VisualID
name|QEgl
operator|::
name|getCompatibleVisualId
parameter_list|(
name|EGLConfig
name|config
parameter_list|)
block|{
name|VisualID
name|visualId
init|=
literal|0
decl_stmt|;
name|EGLint
name|eglValue
init|=
literal|0
decl_stmt|;
name|EGLint
name|configRedSize
init|=
literal|0
decl_stmt|;
name|eglGetConfigAttrib
argument_list|(
name|display
argument_list|()
argument_list|,
name|config
argument_list|,
name|EGL_RED_SIZE
argument_list|,
operator|&
name|configRedSize
argument_list|)
expr_stmt|;
name|EGLint
name|configGreenSize
init|=
literal|0
decl_stmt|;
name|eglGetConfigAttrib
argument_list|(
name|display
argument_list|()
argument_list|,
name|config
argument_list|,
name|EGL_GREEN_SIZE
argument_list|,
operator|&
name|configGreenSize
argument_list|)
expr_stmt|;
name|EGLint
name|configBlueSize
init|=
literal|0
decl_stmt|;
name|eglGetConfigAttrib
argument_list|(
name|display
argument_list|()
argument_list|,
name|config
argument_list|,
name|EGL_BLUE_SIZE
argument_list|,
operator|&
name|configBlueSize
argument_list|)
expr_stmt|;
name|EGLint
name|configAlphaSize
init|=
literal|0
decl_stmt|;
name|eglGetConfigAttrib
argument_list|(
name|display
argument_list|()
argument_list|,
name|config
argument_list|,
name|EGL_ALPHA_SIZE
argument_list|,
operator|&
name|configAlphaSize
argument_list|)
expr_stmt|;
name|eglGetConfigAttrib
argument_list|(
name|display
argument_list|()
argument_list|,
name|config
argument_list|,
name|EGL_CONFIG_ID
argument_list|,
operator|&
name|eglValue
argument_list|)
expr_stmt|;
name|int
name|configId
init|=
name|eglValue
decl_stmt|;
comment|// See if EGL provided a valid VisualID:
name|eglGetConfigAttrib
argument_list|(
name|display
argument_list|()
argument_list|,
name|config
argument_list|,
name|EGL_NATIVE_VISUAL_ID
argument_list|,
operator|&
name|eglValue
argument_list|)
expr_stmt|;
name|visualId
operator|=
operator|(
name|VisualID
operator|)
name|eglValue
expr_stmt|;
if|if
condition|(
name|visualId
condition|)
block|{
comment|// EGL has suggested a visual id, so get the rest of the visual info for that id:
name|XVisualInfo
name|visualInfoTemplate
decl_stmt|;
name|memset
argument_list|(
operator|&
name|visualInfoTemplate
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|XVisualInfo
argument_list|)
argument_list|)
expr_stmt|;
name|visualInfoTemplate
operator|.
name|visualid
operator|=
name|visualId
expr_stmt|;
name|XVisualInfo
modifier|*
name|chosenVisualInfo
decl_stmt|;
name|int
name|matchingCount
init|=
literal|0
decl_stmt|;
name|chosenVisualInfo
operator|=
name|XGetVisualInfo
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|VisualIDMask
argument_list|,
operator|&
name|visualInfoTemplate
argument_list|,
operator|&
name|matchingCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|chosenVisualInfo
condition|)
block|{
comment|// Skip size checks if implementation supports non-matching visual
comment|// and config (http://bugreports.qt.nokia.com/browse/QTBUG-9444).
if|if
condition|(
name|QEgl
operator|::
name|hasExtension
argument_list|(
literal|"EGL_NV_post_convert_rounding"
argument_list|)
condition|)
block|{
name|XFree
argument_list|(
name|chosenVisualInfo
argument_list|)
expr_stmt|;
return|return
name|visualId
return|;
block|}
name|int
name|visualRedSize
init|=
name|countBits
argument_list|(
name|chosenVisualInfo
operator|->
name|red_mask
argument_list|)
decl_stmt|;
name|int
name|visualGreenSize
init|=
name|countBits
argument_list|(
name|chosenVisualInfo
operator|->
name|green_mask
argument_list|)
decl_stmt|;
name|int
name|visualBlueSize
init|=
name|countBits
argument_list|(
name|chosenVisualInfo
operator|->
name|blue_mask
argument_list|)
decl_stmt|;
name|int
name|visualAlphaSize
init|=
operator|-
literal|1
decl_stmt|;
comment|// Need XRender to tell us the alpha channel size
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XRENDER
argument_list|)
if|if
condition|(
name|X11
operator|->
name|use_xrender
condition|)
block|{
comment|// If we have XRender, actually check the visual supplied by EGL is ARGB
name|XRenderPictFormat
modifier|*
name|format
decl_stmt|;
name|format
operator|=
name|XRenderFindVisualFormat
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|chosenVisualInfo
operator|->
name|visual
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|&&
operator|(
name|format
operator|->
name|type
operator|==
name|PictTypeDirect
operator|)
condition|)
name|visualAlphaSize
operator|=
name|countBits
argument_list|(
name|format
operator|->
name|direct
operator|.
name|alphaMask
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|bool
name|visualMatchesConfig
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|visualRedSize
operator|==
name|configRedSize
operator|&&
name|visualGreenSize
operator|==
name|configGreenSize
operator|&&
name|visualBlueSize
operator|==
name|configBlueSize
condition|)
block|{
comment|// We need XRender to check the alpha channel size of the visual. If we don't have
comment|// the alpha size, we don't check it against the EGL config's alpha size.
if|if
condition|(
name|visualAlphaSize
operator|>=
literal|0
condition|)
name|visualMatchesConfig
operator|=
name|visualAlphaSize
operator|==
name|configAlphaSize
expr_stmt|;
else|else
name|visualMatchesConfig
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|visualMatchesConfig
condition|)
block|{
if|if
condition|(
name|visualAlphaSize
operator|>=
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"Warning: EGL suggested using X Visual ID %d (ARGB%d%d%d%d) for EGL config %d (ARGB%d%d%d%d), but this is incompatable"
argument_list|,
operator|(
name|int
operator|)
name|visualId
argument_list|,
name|visualAlphaSize
argument_list|,
name|visualRedSize
argument_list|,
name|visualGreenSize
argument_list|,
name|visualBlueSize
argument_list|,
name|configId
argument_list|,
name|configAlphaSize
argument_list|,
name|configRedSize
argument_list|,
name|configGreenSize
argument_list|,
name|configBlueSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Warning: EGL suggested using X Visual ID %d (RGB%d%d%d) for EGL config %d (RGB%d%d%d), but this is incompatable"
argument_list|,
operator|(
name|int
operator|)
name|visualId
argument_list|,
name|visualRedSize
argument_list|,
name|visualGreenSize
argument_list|,
name|visualBlueSize
argument_list|,
name|configId
argument_list|,
name|configRedSize
argument_list|,
name|configGreenSize
argument_list|,
name|configBlueSize
argument_list|)
expr_stmt|;
block|}
name|visualId
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Warning: EGL suggested using X Visual ID %d for EGL config %d, but that isn't a valid ID"
argument_list|,
operator|(
name|int
operator|)
name|visualId
argument_list|,
name|configId
argument_list|)
expr_stmt|;
name|visualId
operator|=
literal|0
expr_stmt|;
block|}
name|XFree
argument_list|(
name|chosenVisualInfo
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QT_DEBUG_X11_VISUAL_SELECTION
else|else
name|qDebug
argument_list|(
literal|"EGL did not suggest a VisualID (EGL_NATIVE_VISUAL_ID was zero) for EGLConfig %d"
argument_list|,
name|configId
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|visualId
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_X11_VISUAL_SELECTION
if|if
condition|(
name|configAlphaSize
operator|>
literal|0
condition|)
name|qDebug
argument_list|(
literal|"Using ARGB Visual ID %d provided by EGL for config %d"
argument_list|,
operator|(
name|int
operator|)
name|visualId
argument_list|,
name|configId
argument_list|)
expr_stmt|;
else|else
name|qDebug
argument_list|(
literal|"Using Opaque Visual ID %d provided by EGL for config %d"
argument_list|,
operator|(
name|int
operator|)
name|visualId
argument_list|,
name|configId
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|visualId
return|;
block|}
comment|// If EGL didn't give us a valid visual ID, try XRender
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XRENDER
argument_list|)
if|if
condition|(
operator|!
name|visualId
operator|&&
name|X11
operator|->
name|use_xrender
condition|)
block|{
name|XVisualInfo
name|visualInfoTemplate
decl_stmt|;
name|memset
argument_list|(
operator|&
name|visualInfoTemplate
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|XVisualInfo
argument_list|)
argument_list|)
expr_stmt|;
name|visualInfoTemplate
operator|.
name|c_class
operator|=
name|TrueColor
expr_stmt|;
name|XVisualInfo
modifier|*
name|matchingVisuals
decl_stmt|;
name|int
name|matchingCount
init|=
literal|0
decl_stmt|;
name|matchingVisuals
operator|=
name|XGetVisualInfo
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|VisualClassMask
argument_list|,
operator|&
name|visualInfoTemplate
argument_list|,
operator|&
name|matchingCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|matchingCount
condition|;
operator|++
name|i
control|)
block|{
name|XRenderPictFormat
modifier|*
name|format
decl_stmt|;
name|format
operator|=
name|XRenderFindVisualFormat
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|matchingVisuals
index|[
name|i
index|]
operator|.
name|visual
argument_list|)
expr_stmt|;
comment|// Check the format for the visual matches the EGL config
if|if
condition|(
operator|(
name|countBits
argument_list|(
name|format
operator|->
name|direct
operator|.
name|redMask
argument_list|)
operator|==
name|configRedSize
operator|)
operator|&&
operator|(
name|countBits
argument_list|(
name|format
operator|->
name|direct
operator|.
name|greenMask
argument_list|)
operator|==
name|configGreenSize
operator|)
operator|&&
operator|(
name|countBits
argument_list|(
name|format
operator|->
name|direct
operator|.
name|blueMask
argument_list|)
operator|==
name|configBlueSize
operator|)
operator|&&
operator|(
name|countBits
argument_list|(
name|format
operator|->
name|direct
operator|.
name|alphaMask
argument_list|)
operator|==
name|configAlphaSize
operator|)
condition|)
block|{
name|visualId
operator|=
name|matchingVisuals
index|[
name|i
index|]
operator|.
name|visualid
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|matchingVisuals
condition|)
name|XFree
argument_list|(
name|matchingVisuals
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|visualId
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_X11_VISUAL_SELECTION
if|if
condition|(
name|configAlphaSize
operator|>
literal|0
condition|)
name|qDebug
argument_list|(
literal|"Using ARGB Visual ID %d provided by XRender for EGL config %d"
argument_list|,
operator|(
name|int
operator|)
name|visualId
argument_list|,
name|configId
argument_list|)
expr_stmt|;
else|else
name|qDebug
argument_list|(
literal|"Using Opaque Visual ID %d provided by XRender for EGL config %d"
argument_list|,
operator|(
name|int
operator|)
name|visualId
argument_list|,
name|configId
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_DEBUG_X11_VISUAL_SELECTION
return|return
name|visualId
return|;
block|}
ifdef|#
directive|ifdef
name|QT_DEBUG_X11_VISUAL_SELECTION
else|else
name|qDebug
argument_list|(
literal|"Failed to find an XVisual which matches EGL config %d using XRender"
argument_list|,
name|configId
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_DEBUG_X11_VISUAL_SELECTION
endif|#
directive|endif
comment|//!defined(QT_NO_XRENDER)
comment|// Finally, if XRender also failed to find a visual (or isn't present), try to
comment|// use XGetVisualInfo and only use the bit depths to match on:
if|if
condition|(
operator|!
name|visualId
condition|)
block|{
name|XVisualInfo
name|visualInfoTemplate
decl_stmt|;
name|memset
argument_list|(
operator|&
name|visualInfoTemplate
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|XVisualInfo
argument_list|)
argument_list|)
expr_stmt|;
name|XVisualInfo
modifier|*
name|matchingVisuals
decl_stmt|;
name|int
name|matchingCount
init|=
literal|0
decl_stmt|;
name|visualInfoTemplate
operator|.
name|depth
operator|=
name|configRedSize
operator|+
name|configGreenSize
operator|+
name|configBlueSize
operator|+
name|configAlphaSize
expr_stmt|;
name|matchingVisuals
operator|=
name|XGetVisualInfo
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|VisualDepthMask
argument_list|,
operator|&
name|visualInfoTemplate
argument_list|,
operator|&
name|matchingCount
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|matchingVisuals
condition|)
block|{
comment|// Try again without taking the alpha channel into account:
name|visualInfoTemplate
operator|.
name|depth
operator|=
name|configRedSize
operator|+
name|configGreenSize
operator|+
name|configBlueSize
expr_stmt|;
name|matchingVisuals
operator|=
name|XGetVisualInfo
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|VisualDepthMask
argument_list|,
operator|&
name|visualInfoTemplate
argument_list|,
operator|&
name|matchingCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|matchingVisuals
condition|)
block|{
name|visualId
operator|=
name|matchingVisuals
index|[
literal|0
index|]
operator|.
name|visualid
expr_stmt|;
name|XFree
argument_list|(
name|matchingVisuals
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|visualId
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_X11_VISUAL_SELECTION
name|qDebug
argument_list|(
literal|"Using Visual ID %d provided by XGetVisualInfo for EGL config %d"
argument_list|,
operator|(
name|int
operator|)
name|visualId
argument_list|,
name|configId
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|visualId
return|;
block|}
name|qWarning
argument_list|(
literal|"Unable to find an X11 visual which matches EGL config %d"
argument_list|,
name|configId
argument_list|)
expr_stmt|;
return|return
operator|(
name|VisualID
operator|)
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qt_set_winid_on_widget
name|void
name|qt_set_winid_on_widget
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|Qt
operator|::
name|HANDLE
name|id
parameter_list|)
block|{
name|w
operator|->
name|create
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// NOTE: The X11 version of createSurface will re-create the native drawable if it's visual doesn't
end_comment
begin_comment
comment|// match the one for the passed in EGLConfig
end_comment
begin_function
DECL|function|createSurface
name|EGLSurface
name|QEgl
operator|::
name|createSurface
parameter_list|(
name|QPaintDevice
modifier|*
name|device
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
specifier|const
name|QEglProperties
modifier|*
name|properties
parameter_list|)
block|{
name|int
name|devType
init|=
name|device
operator|->
name|devType
argument_list|()
decl_stmt|;
if|if
condition|(
name|devType
operator|==
name|QInternal
operator|::
name|Pbuffer
condition|)
block|{
comment|// TODO
return|return
name|EGL_NO_SURFACE
return|;
block|}
name|QX11PlatformPixmap
modifier|*
name|x11PlatformPixmap
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|devType
operator|==
name|QInternal
operator|::
name|Pixmap
condition|)
block|{
name|QPlatformPixmap
modifier|*
name|pmd
init|=
cast|static_cast
argument_list|<
name|QPixmap
operator|*
argument_list|>
argument_list|(
name|device
argument_list|)
operator|->
name|data_ptr
argument_list|()
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
name|pmd
operator|->
name|classId
argument_list|()
operator|==
name|QPlatformPixmap
operator|::
name|X11Class
condition|)
name|x11PlatformPixmap
operator|=
cast|static_cast
argument_list|<
name|QX11PlatformPixmap
operator|*
argument_list|>
argument_list|(
name|pmd
argument_list|)
expr_stmt|;
else|else
block|{
comment|// TODO: Replace the pixmap's data with a new QX11PlatformPixmap
name|qWarning
argument_list|(
literal|"WARNING: Creating an EGL surface on a QPixmap is only supported for QX11PlatformPixmap"
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|devType
operator|!=
name|QInternal
operator|::
name|Widget
operator|)
operator|&&
operator|(
name|devType
operator|!=
name|QInternal
operator|::
name|Pbuffer
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"WARNING: Creating an EGLSurface for device type %d isn't supported"
argument_list|,
name|devType
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
name|VisualID
name|visualId
init|=
name|QEgl
operator|::
name|getCompatibleVisualId
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|EGLint
name|alphaSize
decl_stmt|;
name|eglGetConfigAttrib
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|config
argument_list|,
name|EGL_ALPHA_SIZE
argument_list|,
operator|&
name|alphaSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|devType
operator|==
name|QInternal
operator|::
name|Widget
condition|)
block|{
name|QWidget
modifier|*
name|widget
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|device
argument_list|)
decl_stmt|;
name|VisualID
name|currentVisualId
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
name|currentVisualId
operator|=
name|XVisualIDFromVisual
argument_list|(
operator|(
name|Visual
operator|*
operator|)
name|widget
operator|->
name|x11Info
argument_list|()
operator|.
name|visual
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentVisualId
operator|!=
name|visualId
condition|)
block|{
comment|// The window is either not created or has the wrong visual. Either way, we need
comment|// to create a window with the correct visual and call create() on the widget:
name|bool
name|visible
init|=
name|widget
operator|->
name|isVisible
argument_list|()
decl_stmt|;
if|if
condition|(
name|visible
condition|)
name|widget
operator|->
name|hide
argument_list|()
expr_stmt|;
name|XVisualInfo
name|visualInfo
decl_stmt|;
name|visualInfo
operator|.
name|visualid
operator|=
name|visualId
expr_stmt|;
block|{
name|XVisualInfo
modifier|*
name|visualInfoPtr
decl_stmt|;
name|int
name|matchingCount
init|=
literal|0
decl_stmt|;
name|visualInfoPtr
operator|=
name|XGetVisualInfo
argument_list|(
name|widget
operator|->
name|x11Info
argument_list|()
operator|.
name|display
argument_list|()
argument_list|,
name|VisualIDMask
argument_list|,
operator|&
name|visualInfo
argument_list|,
operator|&
name|matchingCount
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|visualInfoPtr
argument_list|)
expr_stmt|;
comment|// visualId really should be valid!
name|visualInfo
operator|=
operator|*
name|visualInfoPtr
expr_stmt|;
name|XFree
argument_list|(
name|visualInfoPtr
argument_list|)
expr_stmt|;
block|}
name|Window
name|parentWindow
init|=
name|RootWindow
argument_list|(
name|widget
operator|->
name|x11Info
argument_list|()
operator|.
name|display
argument_list|()
argument_list|,
name|widget
operator|->
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|widget
operator|->
name|parentWidget
argument_list|()
condition|)
name|parentWindow
operator|=
name|widget
operator|->
name|parentWidget
argument_list|()
operator|->
name|winId
argument_list|()
expr_stmt|;
name|XSetWindowAttributes
name|windowAttribs
decl_stmt|;
name|QColormap
name|colmap
init|=
name|QColormap
operator|::
name|instance
argument_list|(
name|widget
operator|->
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
argument_list|)
decl_stmt|;
name|windowAttribs
operator|.
name|background_pixel
operator|=
name|colmap
operator|.
name|pixel
argument_list|(
name|widget
operator|->
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|widget
operator|->
name|backgroundRole
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|windowAttribs
operator|.
name|border_pixel
operator|=
name|colmap
operator|.
name|pixel
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|unsigned
name|int
name|valueMask
init|=
name|CWBackPixel
operator||
name|CWBorderPixel
decl_stmt|;
if|if
condition|(
name|alphaSize
operator|>
literal|0
condition|)
block|{
name|windowAttribs
operator|.
name|colormap
operator|=
name|XCreateColormap
argument_list|(
name|widget
operator|->
name|x11Info
argument_list|()
operator|.
name|display
argument_list|()
argument_list|,
name|parentWindow
argument_list|,
name|visualInfo
operator|.
name|visual
argument_list|,
name|AllocNone
argument_list|)
expr_stmt|;
name|valueMask
operator||=
name|CWColormap
expr_stmt|;
block|}
name|Window
name|window
init|=
name|XCreateWindow
argument_list|(
name|widget
operator|->
name|x11Info
argument_list|()
operator|.
name|display
argument_list|()
argument_list|,
name|parentWindow
argument_list|,
name|widget
operator|->
name|x
argument_list|()
argument_list|,
name|widget
operator|->
name|y
argument_list|()
argument_list|,
name|widget
operator|->
name|width
argument_list|()
argument_list|,
name|widget
operator|->
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
name|visualInfo
operator|.
name|depth
argument_list|,
name|InputOutput
argument_list|,
name|visualInfo
operator|.
name|visual
argument_list|,
name|valueMask
argument_list|,
operator|&
name|windowAttribs
argument_list|)
decl_stmt|;
comment|// This is a nasty hack to get round the fact that we can't be a friend of QWidget:
name|qt_set_winid_on_widget
argument_list|(
name|widget
argument_list|,
name|window
argument_list|)
expr_stmt|;
if|if
condition|(
name|visible
condition|)
name|widget
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
comment|// At this point, the widget's window should be created and have the correct visual. Now we
comment|// just need to create the EGL surface for it:
specifier|const
name|int
modifier|*
name|props
decl_stmt|;
if|if
condition|(
name|properties
condition|)
name|props
operator|=
name|properties
operator|->
name|properties
argument_list|()
expr_stmt|;
else|else
name|props
operator|=
literal|0
expr_stmt|;
name|EGLSurface
name|surf
init|=
name|eglCreateWindowSurface
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|config
argument_list|,
operator|(
name|EGLNativeWindowType
operator|)
name|widget
operator|->
name|winId
argument_list|()
argument_list|,
name|props
argument_list|)
decl_stmt|;
if|if
condition|(
name|surf
operator|==
name|EGL_NO_SURFACE
condition|)
name|qWarning
argument_list|(
literal|"QEglContext::createSurface(): Unable to create EGL surface, error = 0x%x"
argument_list|,
name|eglGetError
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|surf
return|;
block|}
if|if
condition|(
name|x11PlatformPixmap
condition|)
block|{
comment|// X11 Pixmaps are only created with a depth, so that's all we need to check
name|EGLint
name|configDepth
decl_stmt|;
name|eglGetConfigAttrib
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|config
argument_list|,
name|EGL_BUFFER_SIZE
argument_list|,
operator|&
name|configDepth
argument_list|)
expr_stmt|;
if|if
condition|(
name|x11PlatformPixmap
operator|->
name|depth
argument_list|()
operator|!=
name|configDepth
condition|)
block|{
comment|// The bit depths are wrong which means the EGLConfig isn't compatable with
comment|// this pixmap. So we need to replace the pixmap's existing data with a new
comment|// one which is created with the correct depth:
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
if|if
condition|(
name|configDepth
operator|==
literal|32
condition|)
block|{
name|qWarning
argument_list|(
literal|"Warning: EGLConfig's depth (32) != pixmap's depth (%d), converting to ARGB32"
argument_list|,
name|x11PlatformPixmap
operator|->
name|depth
argument_list|()
argument_list|)
expr_stmt|;
name|x11PlatformPixmap
operator|->
name|convertToARGB32
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|qWarning
argument_list|(
literal|"Warning: EGLConfig's depth (%d) != pixmap's depth (%d)"
argument_list|,
name|configDepth
argument_list|,
name|x11PlatformPixmap
operator|->
name|depth
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|QEglProperties
name|surfaceAttribs
decl_stmt|;
comment|// If the pixmap can't be bound to a texture, it's pretty useless
name|surfaceAttribs
operator|.
name|setValue
argument_list|(
name|EGL_TEXTURE_TARGET
argument_list|,
name|EGL_TEXTURE_2D
argument_list|)
expr_stmt|;
if|if
condition|(
name|alphaSize
operator|>
literal|0
condition|)
name|surfaceAttribs
operator|.
name|setValue
argument_list|(
name|EGL_TEXTURE_FORMAT
argument_list|,
name|EGL_TEXTURE_RGBA
argument_list|)
expr_stmt|;
else|else
name|surfaceAttribs
operator|.
name|setValue
argument_list|(
name|EGL_TEXTURE_FORMAT
argument_list|,
name|EGL_TEXTURE_RGB
argument_list|)
expr_stmt|;
name|EGLSurface
name|surf
init|=
name|eglCreatePixmapSurface
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|config
argument_list|,
operator|(
name|EGLNativePixmapType
operator|)
name|x11PlatformPixmap
operator|->
name|handle
argument_list|()
argument_list|,
name|surfaceAttribs
operator|.
name|properties
argument_list|()
argument_list|)
decl_stmt|;
name|x11PlatformPixmap
operator|->
name|gl_surface
operator|=
operator|(
name|void
operator|*
operator|)
name|surf
expr_stmt|;
name|QImagePixmapCleanupHooks
operator|::
name|enableCleanupHooks
argument_list|(
name|x11PlatformPixmap
argument_list|)
expr_stmt|;
return|return
name|surf
return|;
block|}
return|return
name|EGL_NO_SURFACE
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
