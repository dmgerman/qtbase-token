begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui/qpaintdevice.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpixmap.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qwidget.h>
end_include
begin_include
include|#
directive|include
file|"qegl_p.h"
end_include
begin_include
include|#
directive|include
file|"qeglcontext_p.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_EGL
argument_list|)
end_if
begin_include
include|#
directive|include
file|<qscreen_qws.h>
end_include
begin_include
include|#
directive|include
file|<qscreenproxy_qws.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdesktopwidget.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|screenForDevice
specifier|static
name|QScreen
modifier|*
name|screenForDevice
parameter_list|(
name|QPaintDevice
modifier|*
name|device
parameter_list|)
block|{
name|QScreen
modifier|*
name|screen
init|=
name|qt_screen
decl_stmt|;
if|if
condition|(
operator|!
name|screen
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|screen
operator|->
name|classId
argument_list|()
operator|==
name|QScreen
operator|::
name|MultiClass
condition|)
block|{
name|int
name|screenNumber
decl_stmt|;
if|if
condition|(
name|device
operator|&&
name|device
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Widget
condition|)
name|screenNumber
operator|=
name|qApp
operator|->
name|desktop
argument_list|()
operator|->
name|screenNumber
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|device
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|screenNumber
operator|=
literal|0
expr_stmt|;
name|screen
operator|=
name|screen
operator|->
name|subScreens
argument_list|()
index|[
name|screenNumber
index|]
expr_stmt|;
block|}
while|while
condition|(
name|screen
operator|->
name|classId
argument_list|()
operator|==
name|QScreen
operator|::
name|ProxyClass
operator|||
name|screen
operator|->
name|classId
argument_list|()
operator|==
name|QScreen
operator|::
name|TransformedClass
condition|)
block|{
name|screen
operator|=
cast|static_cast
argument_list|<
name|QProxyScreen
operator|*
argument_list|>
argument_list|(
name|screen
argument_list|)
operator|->
name|screen
argument_list|()
expr_stmt|;
block|}
return|return
name|screen
return|;
block|}
end_function
begin_comment
comment|// Set pixel format and other properties based on a paint device.
end_comment
begin_function
DECL|function|setPaintDeviceFormat
name|void
name|QEglProperties
operator|::
name|setPaintDeviceFormat
parameter_list|(
name|QPaintDevice
modifier|*
name|dev
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dev
condition|)
return|return;
comment|// Find the QGLScreen for this paint device.
name|QScreen
modifier|*
name|screen
init|=
name|screenForDevice
argument_list|(
name|dev
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|screen
condition|)
return|return;
name|int
name|devType
init|=
name|dev
operator|->
name|devType
argument_list|()
decl_stmt|;
if|if
condition|(
name|devType
operator|==
name|QInternal
operator|::
name|Image
condition|)
name|setPixelFormat
argument_list|(
cast|static_cast
argument_list|<
name|QImage
operator|*
argument_list|>
argument_list|(
name|dev
argument_list|)
operator|->
name|format
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|setPixelFormat
argument_list|(
name|screen
operator|->
name|pixelFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nativeDisplay
name|EGLNativeDisplayType
name|QEgl
operator|::
name|nativeDisplay
parameter_list|()
block|{
return|return
name|EGLNativeDisplayType
argument_list|(
name|EGL_DEFAULT_DISPLAY
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|nativeWindow
name|EGLNativeWindowType
name|QEgl
operator|::
name|nativeWindow
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
return|return
call|(
name|EGLNativeWindowType
call|)
argument_list|(
name|widget
operator|->
name|winId
argument_list|()
argument_list|)
return|;
comment|// Might work
block|}
end_function
begin_function
DECL|function|nativePixmap
name|EGLNativePixmapType
name|QEgl
operator|::
name|nativePixmap
parameter_list|(
name|QPixmap
modifier|*
parameter_list|)
block|{
name|qWarning
argument_list|(
literal|"QEgl: EGL pixmap surfaces not supported on QWS"
argument_list|)
expr_stmt|;
return|return
operator|(
name|EGLNativePixmapType
operator|)
literal|0
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_NO_EGL
end_comment
end_unit
