begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui/qpaintdevice.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpixmap.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|"qegl_p.h"
end_include
begin_include
include|#
directive|include
file|"qeglcontext_p.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|noegl
specifier|static
name|void
name|noegl
parameter_list|(
specifier|const
name|char
modifier|*
name|fn
parameter_list|)
block|{
name|qWarning
argument_list|()
operator|<<
name|fn
operator|<<
literal|" called, but Qt configured without EGL"
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|NOEGL
define|#
directive|define
name|NOEGL
value|noegl(__FUNCTION__);
end_define
begin_constructor
DECL|function|QEglContext
name|QEglContext
operator|::
name|QEglContext
parameter_list|()
member_init_list|:
name|apiType
argument_list|(
name|QEgl
operator|::
name|OpenGL
argument_list|)
member_init_list|,
name|ctx
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|cfg
argument_list|(
name|QEGL_NO_CONFIG
argument_list|)
member_init_list|,
name|currentSurface
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|current
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|ownsContext
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|sharing
argument_list|(
literal|false
argument_list|)
block|{
name|NOEGL
block|}
end_constructor
begin_destructor
DECL|function|~QEglContext
name|QEglContext
operator|::
name|~
name|QEglContext
parameter_list|()
block|{
name|NOEGL
block|}
end_destructor
begin_function
DECL|function|isValid
name|bool
name|QEglContext
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
name|NOEGL
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|isCurrent
name|bool
name|QEglContext
operator|::
name|isCurrent
parameter_list|()
specifier|const
block|{
name|NOEGL
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|defaultConfig
name|EGLConfig
name|QEgl
operator|::
name|defaultConfig
parameter_list|(
name|int
name|devType
parameter_list|,
name|API
name|api
parameter_list|,
name|ConfigOptions
name|options
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|devType
argument_list|)
name|Q_UNUSED
argument_list|(
argument|api
argument_list|)
name|Q_UNUSED
argument_list|(
argument|options
argument_list|)
name|NOEGL
return|return
name|QEGL_NO_CONFIG
return|;
block|}
end_function
begin_comment
comment|// Choose a configuration that matches "properties".
end_comment
begin_function
DECL|function|chooseConfig
name|EGLConfig
name|QEgl
operator|::
name|chooseConfig
parameter_list|(
specifier|const
name|QEglProperties
modifier|*
name|properties
parameter_list|,
name|QEgl
operator|::
name|PixelFormatMatch
name|match
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|properties
argument_list|)
name|Q_UNUSED
argument_list|(
argument|match
argument_list|)
name|NOEGL
return|return
name|QEGL_NO_CONFIG
return|;
block|}
end_function
begin_function
DECL|function|chooseConfig
name|bool
name|QEglContext
operator|::
name|chooseConfig
parameter_list|(
specifier|const
name|QEglProperties
modifier|&
name|properties
parameter_list|,
name|QEgl
operator|::
name|PixelFormatMatch
name|match
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|properties
argument_list|)
name|Q_UNUSED
argument_list|(
argument|match
argument_list|)
name|NOEGL
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|createSurface
name|EGLSurface
name|QEglContext
operator|::
name|createSurface
parameter_list|(
name|QPaintDevice
modifier|*
name|device
parameter_list|,
specifier|const
name|QEglProperties
modifier|*
name|properties
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|device
argument_list|)
name|Q_UNUSED
argument_list|(
argument|properties
argument_list|)
name|NOEGL
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|// Create the EGLContext.
end_comment
begin_function
DECL|function|createContext
name|bool
name|QEglContext
operator|::
name|createContext
parameter_list|(
name|QEglContext
modifier|*
name|shareContext
parameter_list|,
specifier|const
name|QEglProperties
modifier|*
name|properties
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|shareContext
argument_list|)
name|Q_UNUSED
argument_list|(
argument|properties
argument_list|)
name|NOEGL
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|// Destroy an EGL surface object.  If it was current on this context
end_comment
begin_comment
comment|// then call doneCurrent() for it first.
end_comment
begin_function
DECL|function|destroySurface
name|void
name|QEglContext
operator|::
name|destroySurface
parameter_list|(
name|EGLSurface
name|surface
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|surface
argument_list|)
name|NOEGL
block|}
end_function
begin_comment
comment|// Destroy the context.  Note: this does not destroy the surface.
end_comment
begin_function
DECL|function|destroyContext
name|void
name|QEglContext
operator|::
name|destroyContext
parameter_list|()
block|{
name|NOEGL
block|}
end_function
begin_function
DECL|function|makeCurrent
name|bool
name|QEglContext
operator|::
name|makeCurrent
parameter_list|(
name|EGLSurface
name|surface
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|surface
argument_list|)
name|NOEGL
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|doneCurrent
name|bool
name|QEglContext
operator|::
name|doneCurrent
parameter_list|()
block|{
name|NOEGL
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|// Act as though doneCurrent() was called, but keep the context
end_comment
begin_comment
comment|// and the surface active for the moment.  This allows makeCurrent()
end_comment
begin_comment
comment|// to skip a call to eglMakeCurrent() if we are using the same
end_comment
begin_comment
comment|// surface as the last set of painting operations.  We leave the
end_comment
begin_comment
comment|// currentContext() pointer as-is for now.
end_comment
begin_function
DECL|function|lazyDoneCurrent
name|bool
name|QEglContext
operator|::
name|lazyDoneCurrent
parameter_list|()
block|{
name|NOEGL
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|swapBuffers
name|bool
name|QEglContext
operator|::
name|swapBuffers
parameter_list|(
name|EGLSurface
name|surface
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|surface
argument_list|)
name|NOEGL
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|swapBuffersRegion2NOK
name|bool
name|QEglContext
operator|::
name|swapBuffersRegion2NOK
parameter_list|(
name|EGLSurface
name|surface
parameter_list|,
specifier|const
name|QRegion
modifier|*
name|region
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|surface
argument_list|)
name|Q_UNUSED
argument_list|(
argument|region
argument_list|)
name|NOEGL
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|configAttrib
name|int
name|QEglContext
operator|::
name|configAttrib
parameter_list|(
name|int
name|name
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
argument|name
argument_list|)
name|NOEGL
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|display
name|EGLDisplay
name|QEgl
operator|::
name|display
parameter_list|()
block|{
name|NOEGL
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|eglCreateImageKHR
name|EGLImageKHR
name|QEgl
operator|::
name|eglCreateImageKHR
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLContext
name|ctx
parameter_list|,
name|EGLenum
name|target
parameter_list|,
name|EGLClientBuffer
name|buffer
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|dpy
argument_list|)
name|Q_UNUSED
argument_list|(
argument|ctx
argument_list|)
name|Q_UNUSED
argument_list|(
argument|target
argument_list|)
name|Q_UNUSED
argument_list|(
argument|buffer
argument_list|)
name|Q_UNUSED
argument_list|(
argument|attrib_list
argument_list|)
name|NOEGL
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|eglDestroyImageKHR
name|EGLBoolean
name|QEgl
operator|::
name|eglDestroyImageKHR
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLImageKHR
name|img
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|dpy
argument_list|)
name|Q_UNUSED
argument_list|(
argument|img
argument_list|)
name|NOEGL
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|eglSwapBuffersRegion2NOK
name|EGLBoolean
name|QEgl
operator|::
name|eglSwapBuffersRegion2NOK
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLint
name|count
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|rects
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|dpy
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|rects
argument_list|)
expr_stmt|;
name|NOEGL
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|createSurface
name|EGLSurface
name|QEgl
operator|::
name|createSurface
parameter_list|(
name|QPaintDevice
modifier|*
name|device
parameter_list|,
name|EGLConfig
name|cfg
parameter_list|,
specifier|const
name|QEglProperties
modifier|*
name|properties
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|device
argument_list|)
name|Q_UNUSED
argument_list|(
argument|cfg
argument_list|)
name|Q_UNUSED
argument_list|(
argument|properties
argument_list|)
name|NOEGL
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|// Return the error string associated with a specific code.
end_comment
begin_function
DECL|function|errorString
name|QString
name|QEgl
operator|::
name|errorString
parameter_list|(
name|EGLint
name|code
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|code
argument_list|)
name|NOEGL
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|// Dump all of the EGL configurations supported by the system.
end_comment
begin_function
DECL|function|dumpAllConfigs
name|void
name|QEgl
operator|::
name|dumpAllConfigs
parameter_list|()
block|{
name|NOEGL
block|}
end_function
begin_function
DECL|function|extensions
name|QString
name|QEgl
operator|::
name|extensions
parameter_list|()
block|{
name|NOEGL
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|hasExtension
name|bool
name|QEgl
operator|::
name|hasExtension
parameter_list|(
specifier|const
name|char
modifier|*
name|extensionName
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|extensionName
argument_list|)
name|NOEGL
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|currentContext
name|QEglContext
modifier|*
name|QEglContext
operator|::
name|currentContext
parameter_list|(
name|QEgl
operator|::
name|API
name|api
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|api
argument_list|)
name|NOEGL
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|setCurrentContext
name|void
name|QEglContext
operator|::
name|setCurrentContext
parameter_list|(
name|QEgl
operator|::
name|API
name|api
parameter_list|,
name|QEglContext
modifier|*
name|context
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|api
argument_list|)
name|Q_UNUSED
argument_list|(
argument|context
argument_list|)
name|NOEGL
block|}
end_function
begin_function
DECL|function|nativeDisplay
name|EGLNativeDisplayType
name|QEgl
operator|::
name|nativeDisplay
parameter_list|()
block|{
name|NOEGL
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|nativeWindow
name|EGLNativeWindowType
name|QEgl
operator|::
name|nativeWindow
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|widget
argument_list|)
name|NOEGL
return|return
operator|(
name|EGLNativeWindowType
operator|)
literal|0
return|;
block|}
end_function
begin_function
DECL|function|nativePixmap
name|EGLNativePixmapType
name|QEgl
operator|::
name|nativePixmap
parameter_list|(
name|QPixmap
modifier|*
parameter_list|)
block|{
name|NOEGL
return|return
operator|(
name|EGLNativePixmapType
operator|)
literal|0
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
