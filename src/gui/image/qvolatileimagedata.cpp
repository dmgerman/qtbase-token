begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qvolatileimagedata_p.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/qpaintengine.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QVolatileImageData
name|QVolatileImageData
operator|::
name|QVolatileImageData
parameter_list|()
member_init_list|:
name|pengine
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|QVolatileImageData
name|QVolatileImageData
operator|::
name|QVolatileImageData
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|QImage
operator|::
name|Format
name|format
parameter_list|)
member_init_list|:
name|pengine
argument_list|(
literal|0
argument_list|)
block|{
name|image
operator|=
name|QImage
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QVolatileImageData
name|QVolatileImageData
operator|::
name|QVolatileImageData
parameter_list|(
specifier|const
name|QImage
modifier|&
name|sourceImage
parameter_list|)
member_init_list|:
name|pengine
argument_list|(
literal|0
argument_list|)
block|{
name|image
operator|=
name|sourceImage
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QVolatileImageData
name|QVolatileImageData
operator|::
name|QVolatileImageData
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
member_init_list|:
name|pengine
argument_list|(
literal|0
argument_list|)
block|{
comment|// Not supported.
block|}
end_constructor
begin_constructor
DECL|function|QVolatileImageData
name|QVolatileImageData
operator|::
name|QVolatileImageData
parameter_list|(
specifier|const
name|QVolatileImageData
modifier|&
name|other
parameter_list|)
member_init_list|:
name|QSharedData
argument_list|()
block|{
name|image
operator|=
name|other
operator|.
name|image
expr_stmt|;
comment|// The detach is not mandatory here but we do it nonetheless in order to
comment|// keep the behavior consistent with other platforms.
name|image
operator|.
name|detach
argument_list|()
expr_stmt|;
name|pengine
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QVolatileImageData
name|QVolatileImageData
operator|::
name|~
name|QVolatileImageData
parameter_list|()
block|{
operator|delete
name|pengine
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|beginDataAccess
name|void
name|QVolatileImageData
operator|::
name|beginDataAccess
parameter_list|()
specifier|const
block|{
comment|// nothing to do here
block|}
end_function
begin_function
DECL|function|endDataAccess
name|void
name|QVolatileImageData
operator|::
name|endDataAccess
parameter_list|(
name|bool
name|readOnly
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|readOnly
argument_list|)
expr_stmt|;
comment|// nothing to do here
block|}
end_function
begin_function
DECL|function|ensureFormat
name|bool
name|QVolatileImageData
operator|::
name|ensureFormat
parameter_list|(
name|QImage
operator|::
name|Format
name|format
parameter_list|)
block|{
if|if
condition|(
name|image
operator|.
name|format
argument_list|()
operator|!=
name|format
condition|)
block|{
name|image
operator|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|duplicateNativeImage
name|void
modifier|*
name|QVolatileImageData
operator|::
name|duplicateNativeImage
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|ensureImage
name|void
name|QVolatileImageData
operator|::
name|ensureImage
parameter_list|()
block|{
comment|// nothing to do here
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
