begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qpixmap.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qwidget.h>
end_include
begin_include
include|#
directive|include
file|<qdesktopwidget.h>
end_include
begin_include
include|#
directive|include
file|<qscreen_qws.h>
end_include
begin_include
include|#
directive|include
file|<qwsdisplay_qws.h>
end_include
begin_include
include|#
directive|include
file|<private/qdrawhelper_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpixmap_raster_p.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|grabWindow
name|QPixmap
name|QPixmap
operator|::
name|grabWindow
parameter_list|(
name|WId
name|window
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
block|{
name|QWidget
modifier|*
name|widget
init|=
name|QWidget
operator|::
name|find
argument_list|(
name|window
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
return|return
name|QPixmap
argument_list|()
return|;
name|QRect
name|grabRect
init|=
name|widget
operator|->
name|frameGeometry
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
name|grabRect
operator|.
name|translate
argument_list|(
name|widget
operator|->
name|parentWidget
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|<
literal|0
condition|)
name|w
operator|=
name|widget
operator|->
name|width
argument_list|()
operator|-
name|x
expr_stmt|;
if|if
condition|(
name|h
operator|<
literal|0
condition|)
name|h
operator|=
name|widget
operator|->
name|height
argument_list|()
operator|-
name|y
expr_stmt|;
name|grabRect
operator|&=
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
operator|.
name|translated
argument_list|(
name|widget
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QScreen
modifier|*
name|screen
init|=
name|qt_screen
decl_stmt|;
name|QDesktopWidget
modifier|*
name|desktop
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|desktop
condition|)
return|return
name|QPixmap
argument_list|()
return|;
if|if
condition|(
name|desktop
operator|->
name|numScreens
argument_list|()
operator|>
literal|1
condition|)
block|{
specifier|const
name|int
name|screenNo
init|=
name|desktop
operator|->
name|screenNumber
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|screenNo
operator|!=
operator|-
literal|1
condition|)
name|screen
operator|=
name|qt_screen
operator|->
name|subScreens
argument_list|()
operator|.
name|at
argument_list|(
name|screenNo
argument_list|)
expr_stmt|;
name|grabRect
operator|=
name|grabRect
operator|.
name|translated
argument_list|(
operator|-
name|screen
operator|->
name|region
argument_list|()
operator|.
name|boundingRect
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|screen
operator|->
name|pixelFormat
argument_list|()
operator|==
name|QImage
operator|::
name|Format_Invalid
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPixmap::grabWindow(): Unable to copy pixels from framebuffer"
argument_list|)
expr_stmt|;
return|return
name|QPixmap
argument_list|()
return|;
block|}
if|if
condition|(
name|screen
operator|->
name|isTransformed
argument_list|()
condition|)
block|{
specifier|const
name|QSize
name|screenSize
argument_list|(
name|screen
operator|->
name|width
argument_list|()
argument_list|,
name|screen
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|grabRect
operator|=
name|screen
operator|->
name|mapToDevice
argument_list|(
name|grabRect
argument_list|,
name|screenSize
argument_list|)
expr_stmt|;
block|}
name|QWSDisplay
operator|::
name|grab
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QPixmap
name|pixmap
decl_stmt|;
name|QImage
name|img
argument_list|(
name|screen
operator|->
name|base
argument_list|()
argument_list|,
name|screen
operator|->
name|deviceWidth
argument_list|()
argument_list|,
name|screen
operator|->
name|deviceHeight
argument_list|()
argument_list|,
name|screen
operator|->
name|linestep
argument_list|()
argument_list|,
name|screen
operator|->
name|pixelFormat
argument_list|()
argument_list|)
decl_stmt|;
name|img
operator|=
name|img
operator|.
name|copy
argument_list|(
name|grabRect
argument_list|)
expr_stmt|;
name|QWSDisplay
operator|::
name|ungrab
argument_list|()
expr_stmt|;
if|if
condition|(
name|screen
operator|->
name|isTransformed
argument_list|()
condition|)
block|{
name|QMatrix
name|matrix
decl_stmt|;
switch|switch
condition|(
name|screen
operator|->
name|transformOrientation
argument_list|()
condition|)
block|{
case|case
literal|1
case|:
name|matrix
operator|.
name|rotate
argument_list|(
literal|90
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|matrix
operator|.
name|rotate
argument_list|(
literal|180
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|matrix
operator|.
name|rotate
argument_list|(
literal|270
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|img
operator|=
name|img
operator|.
name|transformed
argument_list|(
name|matrix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|screen
operator|->
name|pixelType
argument_list|()
operator|==
name|QScreen
operator|::
name|BGRPixel
condition|)
name|img
operator|=
name|img
operator|.
name|rgbSwapped
argument_list|()
expr_stmt|;
return|return
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|img
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|clut
name|QRgb
modifier|*
name|QPixmap
operator|::
name|clut
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|data
operator|&&
name|data
operator|->
name|classId
argument_list|()
operator|==
name|QPixmapData
operator|::
name|RasterClass
condition|)
block|{
specifier|const
name|QRasterPixmapData
modifier|*
name|d
init|=
cast|static_cast
argument_list|<
specifier|const
name|QRasterPixmapData
operator|*
argument_list|>
argument_list|(
name|data
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|d
operator|->
name|image
operator|.
name|colorTable
argument_list|()
operator|.
name|data
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|numCols
name|int
name|QPixmap
operator|::
name|numCols
parameter_list|()
specifier|const
block|{
return|return
name|colorCount
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|colorCount
name|int
name|QPixmap
operator|::
name|colorCount
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|data
operator|&&
name|data
operator|->
name|classId
argument_list|()
operator|==
name|QPixmapData
operator|::
name|RasterClass
condition|)
block|{
specifier|const
name|QRasterPixmapData
modifier|*
name|d
init|=
cast|static_cast
argument_list|<
specifier|const
name|QRasterPixmapData
operator|*
argument_list|>
argument_list|(
name|data
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|d
operator|->
name|image
operator|.
name|colorCount
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qwsBits
specifier|const
name|uchar
modifier|*
name|QPixmap
operator|::
name|qwsBits
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|data
operator|&&
name|data
operator|->
name|classId
argument_list|()
operator|==
name|QPixmapData
operator|::
name|RasterClass
condition|)
block|{
specifier|const
name|QRasterPixmapData
modifier|*
name|d
init|=
cast|static_cast
argument_list|<
specifier|const
name|QRasterPixmapData
operator|*
argument_list|>
argument_list|(
name|data
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|d
operator|->
name|image
operator|.
name|bits
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qwsBytesPerLine
name|int
name|QPixmap
operator|::
name|qwsBytesPerLine
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|data
operator|&&
name|data
operator|->
name|classId
argument_list|()
operator|==
name|QPixmapData
operator|::
name|RasterClass
condition|)
block|{
specifier|const
name|QRasterPixmapData
modifier|*
name|d
init|=
cast|static_cast
argument_list|<
specifier|const
name|QRasterPixmapData
operator|*
argument_list|>
argument_list|(
name|data
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|d
operator|->
name|image
operator|.
name|bytesPerLine
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
