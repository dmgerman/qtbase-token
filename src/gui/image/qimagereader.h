begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QIMAGEREADER_H
end_ifndef
begin_define
DECL|macro|QIMAGEREADER_H
define|#
directive|define
name|QIMAGEREADER_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qimage.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qimageiohandler.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QColor
name|class
name|QColor
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QIODevice
name|class
name|QIODevice
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QRect
name|class
name|QRect
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QSize
name|class
name|QSize
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QStringList
name|class
name|QStringList
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QImageReaderPrivate
name|class
name|QImageReaderPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QImageReader
block|{
name|Q_DECLARE_TR_FUNCTIONS
argument_list|(
argument|QImageReader
argument_list|)
name|public
label|:
enum|enum
name|ImageReaderError
block|{
name|UnknownError
block|,
name|FileNotFoundError
block|,
name|DeviceError
block|,
name|UnsupportedFormatError
block|,
name|InvalidDataError
block|}
enum|;
name|QImageReader
argument_list|()
expr_stmt|;
name|explicit
name|QImageReader
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|format
init|=
name|QByteArray
argument_list|()
parameter_list|)
function_decl|;
name|explicit
name|QImageReader
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|format
init|=
name|QByteArray
argument_list|()
parameter_list|)
function_decl|;
operator|~
name|QImageReader
argument_list|()
expr_stmt|;
name|void
name|setFormat
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|format
parameter_list|)
function_decl|;
name|QByteArray
name|format
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setAutoDetectImageFormat
parameter_list|(
name|bool
name|enabled
parameter_list|)
function_decl|;
name|bool
name|autoDetectImageFormat
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setDecideFormatFromContent
parameter_list|(
name|bool
name|ignored
parameter_list|)
function_decl|;
name|bool
name|decideFormatFromContent
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setDevice
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|)
function_decl|;
name|QIODevice
operator|*
name|device
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setFileName
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
function_decl|;
name|QString
name|fileName
argument_list|()
specifier|const
expr_stmt|;
name|QSize
name|size
argument_list|()
specifier|const
expr_stmt|;
name|QImage
operator|::
name|Format
name|imageFormat
argument_list|()
specifier|const
expr_stmt|;
name|QStringList
name|textKeys
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|text
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
name|void
name|setClipRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
function_decl|;
name|QRect
name|clipRect
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setScaledSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
function_decl|;
name|QSize
name|scaledSize
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setQuality
parameter_list|(
name|int
name|quality
parameter_list|)
function_decl|;
name|int
name|quality
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setScaledClipRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
function_decl|;
name|QRect
name|scaledClipRect
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setBackgroundColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
function_decl|;
name|QColor
name|backgroundColor
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|supportsAnimation
argument_list|()
specifier|const
expr_stmt|;
name|QImageIOHandler
operator|::
name|Transformations
name|transformation
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setAutoTransform
parameter_list|(
name|bool
name|enabled
parameter_list|)
function_decl|;
name|bool
name|autoTransform
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setGamma
parameter_list|(
name|float
name|gamma
parameter_list|)
function_decl|;
name|float
name|gamma
argument_list|()
specifier|const
expr_stmt|;
name|QByteArray
name|subType
argument_list|()
specifier|const
expr_stmt|;
name|QList
operator|<
name|QByteArray
operator|>
name|supportedSubTypes
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|canRead
argument_list|()
specifier|const
expr_stmt|;
name|QImage
name|read
parameter_list|()
function_decl|;
name|bool
name|read
parameter_list|(
name|QImage
modifier|*
name|image
parameter_list|)
function_decl|;
name|bool
name|jumpToNextImage
parameter_list|()
function_decl|;
name|bool
name|jumpToImage
parameter_list|(
name|int
name|imageNumber
parameter_list|)
function_decl|;
name|int
name|loopCount
argument_list|()
specifier|const
expr_stmt|;
name|int
name|imageCount
argument_list|()
specifier|const
expr_stmt|;
name|int
name|nextImageDelay
argument_list|()
specifier|const
expr_stmt|;
name|int
name|currentImageNumber
argument_list|()
specifier|const
expr_stmt|;
name|QRect
name|currentImageRect
argument_list|()
specifier|const
expr_stmt|;
name|ImageReaderError
name|error
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|errorString
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|supportsOption
argument_list|(
name|QImageIOHandler
operator|::
name|ImageOption
name|option
argument_list|)
decl|const
decl_stmt|;
specifier|static
name|QByteArray
name|imageFormat
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
function_decl|;
specifier|static
name|QByteArray
name|imageFormat
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|)
function_decl|;
specifier|static
name|QList
operator|<
name|QByteArray
operator|>
name|supportedImageFormats
argument_list|()
expr_stmt|;
specifier|static
name|QList
operator|<
name|QByteArray
operator|>
name|supportedMimeTypes
argument_list|()
expr_stmt|;
name|private
label|:
name|Q_DISABLE_COPY
argument_list|(
argument|QImageReader
argument_list|)
name|QImageReaderPrivate
modifier|*
name|d
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QIMAGEREADER_H
end_comment
end_unit
