begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QICONLOADER_P_H
end_ifndef
begin_define
DECL|macro|QICONLOADER_P_H
define|#
directive|define
name|QICONLOADER_P_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ICON
end_ifndef
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtGui/QIcon>
end_include
begin_include
include|#
directive|include
file|<QtGui/QIconEngine>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPixmapCache>
end_include
begin_include
include|#
directive|include
file|<private/qicon_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qfactoryloader_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QHash>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVector>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTypeInfo>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QIconLoader
name|class
name|QIconLoader
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|QIconDirInfo
struct|struct
name|QIconDirInfo
block|{
DECL|enum|Type
DECL|enumerator|Fixed
DECL|enumerator|Scalable
DECL|enumerator|Threshold
enum|enum
name|Type
block|{
name|Fixed
block|,
name|Scalable
block|,
name|Threshold
block|}
enum|;
DECL|function|QIconDirInfo
name|QIconDirInfo
argument_list|(
specifier|const
name|QString
operator|&
name|_path
operator|=
name|QString
argument_list|()
argument_list|)
operator|:
name|path
argument_list|(
name|_path
argument_list|)
operator|,
name|size
argument_list|(
literal|0
argument_list|)
operator|,
name|maxSize
argument_list|(
literal|0
argument_list|)
operator|,
name|minSize
argument_list|(
literal|0
argument_list|)
operator|,
name|threshold
argument_list|(
literal|0
argument_list|)
operator|,
name|type
argument_list|(
argument|Threshold
argument_list|)
block|{}
DECL|member|path
name|QString
name|path
expr_stmt|;
DECL|member|size
name|short
name|size
decl_stmt|;
DECL|member|maxSize
name|short
name|maxSize
decl_stmt|;
DECL|member|minSize
name|short
name|minSize
decl_stmt|;
DECL|member|threshold
name|short
name|threshold
decl_stmt|;
DECL|member|type
name|Type
name|type
range|:
literal|4
decl_stmt|;
block|}
struct|;
end_struct
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QIconDirInfo
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|class
name|QIconLoaderEngineEntry
block|{
name|public
label|:
name|virtual
operator|~
name|QIconLoaderEngineEntry
argument_list|()
block|{}
name|virtual
name|QPixmap
name|pixmap
argument_list|(
argument|const QSize&size
argument_list|,
argument|QIcon::Mode mode
argument_list|,
argument|QIcon::State state
argument_list|)
operator|=
literal|0
expr_stmt|;
name|QString
name|filename
decl_stmt|;
name|QIconDirInfo
name|dir
decl_stmt|;
specifier|static
name|int
name|count
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
DECL|struct|QIconLoaderEngineEntry
name|struct
name|ScalableEntry
range|:
name|public
name|QIconLoaderEngineEntry
block|{
DECL|member|Q_DECL_OVERRIDE
name|QPixmap
name|pixmap
argument_list|(
argument|const QSize&size
argument_list|,
argument|QIcon::Mode mode
argument_list|,
argument|QIcon::State state
argument_list|)
name|Q_DECL_OVERRIDE
block|;
DECL|member|svgIcon
name|QIcon
name|svgIcon
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QIconLoaderEngineEntry
name|struct
name|PixmapEntry
range|:
name|public
name|QIconLoaderEngineEntry
block|{
DECL|member|Q_DECL_OVERRIDE
name|QPixmap
name|pixmap
argument_list|(
argument|const QSize&size
argument_list|,
argument|QIcon::Mode mode
argument_list|,
argument|QIcon::State state
argument_list|)
name|Q_DECL_OVERRIDE
block|;
DECL|member|basePixmap
name|QPixmap
name|basePixmap
block|; }
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|QThemeIconEntries
typedef|typedef
name|QList
operator|<
name|QIconLoaderEngineEntry
operator|*
operator|>
name|QThemeIconEntries
expr_stmt|;
end_typedef
begin_struct
DECL|struct|QThemeIconInfo
struct|struct
name|QThemeIconInfo
block|{
DECL|member|entries
name|QThemeIconEntries
name|entries
decl_stmt|;
DECL|member|iconName
name|QString
name|iconName
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
name|class
name|QIconLoaderEngine
range|:
name|public
name|QIconEngine
block|{
name|public
operator|:
name|QIconLoaderEngine
argument_list|(
specifier|const
name|QString
operator|&
name|iconName
operator|=
name|QString
argument_list|()
argument_list|)
block|;
operator|~
name|QIconLoaderEngine
argument_list|()
block|;
name|void
name|paint
argument_list|(
argument|QPainter *painter
argument_list|,
argument|const QRect&rect
argument_list|,
argument|QIcon::Mode mode
argument_list|,
argument|QIcon::State state
argument_list|)
block|;
name|QPixmap
name|pixmap
argument_list|(
argument|const QSize&size
argument_list|,
argument|QIcon::Mode mode
argument_list|,
argument|QIcon::State state
argument_list|)
block|;
name|QSize
name|actualSize
argument_list|(
argument|const QSize&size
argument_list|,
argument|QIcon::Mode mode
argument_list|,
argument|QIcon::State state
argument_list|)
block|;
name|QIconEngine
operator|*
name|clone
argument_list|()
specifier|const
block|;
name|bool
name|read
argument_list|(
name|QDataStream
operator|&
name|in
argument_list|)
block|;
name|bool
name|write
argument_list|(
argument|QDataStream&out
argument_list|)
specifier|const
block|;
name|private
operator|:
name|QString
name|key
argument_list|()
specifier|const
block|;
name|bool
name|hasIcon
argument_list|()
specifier|const
block|;
name|void
name|ensureLoaded
argument_list|()
block|;
name|void
name|virtual_hook
argument_list|(
argument|int id
argument_list|,
argument|void *data
argument_list|)
block|;
name|QIconLoaderEngineEntry
operator|*
name|entryForSize
argument_list|(
specifier|const
name|QSize
operator|&
name|size
argument_list|)
block|;
name|QIconLoaderEngine
argument_list|(
specifier|const
name|QIconLoaderEngine
operator|&
name|other
argument_list|)
block|;
name|QThemeIconInfo
name|m_info
block|;
name|QString
name|m_iconName
block|;
name|uint
name|m_key
block|;
name|friend
name|class
name|QIconLoader
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QIconTheme
block|{
name|public
label|:
name|QIconTheme
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
expr_stmt|;
name|QIconTheme
argument_list|()
operator|:
name|m_valid
argument_list|(
argument|false
argument_list|)
block|{}
name|QStringList
name|parents
argument_list|()
block|{
return|return
name|m_parents
return|;
block|}
name|QVector
operator|<
name|QIconDirInfo
operator|>
name|keyList
argument_list|()
block|{
return|return
name|m_keyList
return|;
block|}
name|QStringList
name|contentDirs
parameter_list|()
block|{
return|return
name|m_contentDirs
return|;
block|}
name|bool
name|isValid
parameter_list|()
block|{
return|return
name|m_valid
return|;
block|}
name|private
label|:
name|QStringList
name|m_contentDirs
decl_stmt|;
name|QVector
operator|<
name|QIconDirInfo
operator|>
name|m_keyList
expr_stmt|;
name|QStringList
name|m_parents
decl_stmt|;
name|bool
name|m_valid
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QIconLoader
block|{
name|public
label|:
name|QIconLoader
argument_list|()
expr_stmt|;
name|QThemeIconInfo
name|loadIcon
argument_list|(
specifier|const
name|QString
operator|&
name|iconName
argument_list|)
decl|const
decl_stmt|;
name|uint
name|themeKey
argument_list|()
specifier|const
block|{
return|return
name|m_themeKey
return|;
block|}
name|QString
name|themeName
argument_list|()
specifier|const
block|{
return|return
name|m_userTheme
operator|.
name|isEmpty
argument_list|()
operator|?
name|m_systemTheme
operator|:
name|m_userTheme
return|;
block|}
name|void
name|setThemeName
parameter_list|(
specifier|const
name|QString
modifier|&
name|themeName
parameter_list|)
function_decl|;
name|QIconTheme
name|theme
parameter_list|()
block|{
return|return
name|themeList
operator|.
name|value
argument_list|(
name|themeName
argument_list|()
argument_list|)
return|;
block|}
name|void
name|setThemeSearchPath
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|searchPaths
parameter_list|)
function_decl|;
name|QStringList
name|themeSearchPaths
argument_list|()
specifier|const
expr_stmt|;
name|QIconDirInfo
name|dirInfo
parameter_list|(
name|int
name|dirindex
parameter_list|)
function_decl|;
specifier|static
name|QIconLoader
modifier|*
name|instance
parameter_list|()
function_decl|;
name|void
name|updateSystemTheme
parameter_list|()
function_decl|;
name|void
name|invalidateKey
parameter_list|()
block|{
name|m_themeKey
operator|++
expr_stmt|;
block|}
name|void
name|ensureInitialized
parameter_list|()
function_decl|;
name|private
label|:
name|QThemeIconInfo
name|findIconHelper
argument_list|(
specifier|const
name|QString
operator|&
name|themeName
argument_list|,
specifier|const
name|QString
operator|&
name|iconName
argument_list|,
name|QStringList
operator|&
name|visited
argument_list|)
decl|const
decl_stmt|;
name|uint
name|m_themeKey
decl_stmt|;
name|bool
name|m_supportsSvg
decl_stmt|;
name|bool
name|m_initialized
decl_stmt|;
name|mutable
name|QString
name|m_userTheme
decl_stmt|;
name|mutable
name|QString
name|m_systemTheme
decl_stmt|;
name|mutable
name|QStringList
name|m_iconDirs
decl_stmt|;
name|mutable
name|QHash
operator|<
name|QString
operator|,
name|QIconTheme
operator|>
name|themeList
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ICON
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QICONLOADER_P_H
end_comment
end_unit
