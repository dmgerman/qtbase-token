begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"private/qpaintengine_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qpainter_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qpicture_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qfont_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PICTURE
end_ifndef
begin_include
include|#
directive|include
file|"qbuffer.h"
end_include
begin_include
include|#
directive|include
file|"qbytearray.h"
end_include
begin_include
include|#
directive|include
file|"qdatastream.h"
end_include
begin_include
include|#
directive|include
file|"qmath.h"
end_include
begin_include
include|#
directive|include
file|"qpaintengine_pic_p.h"
end_include
begin_include
include|#
directive|include
file|"qpicture.h"
end_include
begin_include
include|#
directive|include
file|"qpolygon.h"
end_include
begin_include
include|#
directive|include
file|"qrect.h"
end_include
begin_include
include|#
directive|include
file|<private/qtextengine_p.h>
end_include
begin_comment
comment|//#define QT_PICTURE_DEBUG
end_comment
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QPicturePaintEnginePrivate
class|class
name|QPicturePaintEnginePrivate
super|:
specifier|public
name|QPaintEnginePrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QPicturePaintEngine
parameter_list|)
specifier|public
private|:
DECL|member|s
name|QDataStream
name|s
decl_stmt|;
DECL|member|pt
name|QPainter
modifier|*
name|pt
decl_stmt|;
DECL|member|pic_d
name|QPicturePrivate
modifier|*
name|pic_d
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QPicturePaintEngine
name|QPicturePaintEngine
operator|::
name|QPicturePaintEngine
parameter_list|()
member_init_list|:
name|QPaintEngine
argument_list|(
operator|*
operator|(
operator|new
name|QPicturePaintEnginePrivate
operator|)
argument_list|,
name|AllFeatures
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|pt
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QPicturePaintEngine
name|QPicturePaintEngine
operator|::
name|QPicturePaintEngine
parameter_list|(
name|QPaintEnginePrivate
modifier|&
name|dptr
parameter_list|)
member_init_list|:
name|QPaintEngine
argument_list|(
name|dptr
argument_list|,
name|AllFeatures
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|pt
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QPicturePaintEngine
name|QPicturePaintEngine
operator|::
name|~
name|QPicturePaintEngine
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|begin
name|bool
name|QPicturePaintEngine
operator|::
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
name|pd
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_PICTURE_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QPicturePaintEngine::begin()"
expr_stmt|;
endif|#
directive|endif
name|Q_ASSERT
argument_list|(
name|pd
argument_list|)
expr_stmt|;
name|QPicture
modifier|*
name|pic
init|=
cast|static_cast
argument_list|<
name|QPicture
operator|*
argument_list|>
argument_list|(
name|pd
argument_list|)
decl_stmt|;
name|d
operator|->
name|pdev
operator|=
name|pd
expr_stmt|;
name|d
operator|->
name|pic_d
operator|=
name|pic
operator|->
name|d_func
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|pic_d
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|.
name|setDevice
argument_list|(
operator|&
name|d
operator|->
name|pic_d
operator|->
name|pictb
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|.
name|setVersion
argument_list|(
name|d
operator|->
name|pic_d
operator|->
name|formatMajor
argument_list|)
expr_stmt|;
name|d
operator|->
name|pic_d
operator|->
name|pictb
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|.
name|writeRawData
argument_list|(
name|qt_mfhdr_tag
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
operator|(
name|quint16
operator|)
literal|0
operator|<<
operator|(
name|quint16
operator|)
name|d
operator|->
name|pic_d
operator|->
name|formatMajor
operator|<<
operator|(
name|quint16
operator|)
name|d
operator|->
name|pic_d
operator|->
name|formatMinor
expr_stmt|;
name|d
operator|->
name|s
operator|<<
operator|(
name|quint8
operator|)
name|QPicturePrivate
operator|::
name|PdcBegin
operator|<<
operator|(
name|quint8
operator|)
sizeof|sizeof
argument_list|(
name|qint32
argument_list|)
expr_stmt|;
name|d
operator|->
name|pic_d
operator|->
name|brect
operator|=
name|QRect
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pic_d
operator|->
name|formatMajor
operator|>=
literal|4
condition|)
block|{
name|QRect
name|r
init|=
name|pic
operator|->
name|boundingRect
argument_list|()
decl_stmt|;
name|d
operator|->
name|s
operator|<<
operator|(
name|qint32
operator|)
name|r
operator|.
name|left
argument_list|()
operator|<<
operator|(
name|qint32
operator|)
name|r
operator|.
name|top
argument_list|()
operator|<<
operator|(
name|qint32
operator|)
name|r
operator|.
name|width
argument_list|()
operator|<<
operator|(
name|qint32
operator|)
name|r
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|d
operator|->
name|pic_d
operator|->
name|trecs
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|s
operator|<<
operator|(
name|quint32
operator|)
name|d
operator|->
name|pic_d
operator|->
name|trecs
expr_stmt|;
comment|// total number of records
name|d
operator|->
name|pic_d
operator|->
name|formatOk
operator|=
literal|false
expr_stmt|;
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|end
name|bool
name|QPicturePaintEngine
operator|::
name|end
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_PICTURE_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QPicturePaintEngine::end()"
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|pic_d
operator|->
name|trecs
operator|++
expr_stmt|;
name|d
operator|->
name|s
operator|<<
operator|(
name|quint8
operator|)
name|QPicturePrivate
operator|::
name|PdcEnd
operator|<<
operator|(
name|quint8
operator|)
literal|0
expr_stmt|;
name|int
name|cs_start
init|=
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
decl_stmt|;
comment|// pos of checksum word
name|int
name|data_start
init|=
name|cs_start
operator|+
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
decl_stmt|;
name|int
name|brect_start
init|=
name|data_start
operator|+
literal|2
operator|*
sizeof|sizeof
argument_list|(
name|qint16
argument_list|)
operator|+
literal|2
operator|*
sizeof|sizeof
argument_list|(
name|quint8
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|d
operator|->
name|pic_d
operator|->
name|pictb
operator|.
name|pos
argument_list|()
decl_stmt|;
name|d
operator|->
name|pic_d
operator|->
name|pictb
operator|.
name|seek
argument_list|(
name|brect_start
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pic_d
operator|->
name|formatMajor
operator|>=
literal|4
condition|)
block|{
comment|// bounding rectangle
name|QRect
name|r
init|=
cast|static_cast
argument_list|<
name|QPicture
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|pdev
argument_list|)
operator|->
name|boundingRect
argument_list|()
decl_stmt|;
name|d
operator|->
name|s
operator|<<
operator|(
name|qint32
operator|)
name|r
operator|.
name|left
argument_list|()
operator|<<
operator|(
name|qint32
operator|)
name|r
operator|.
name|top
argument_list|()
operator|<<
operator|(
name|qint32
operator|)
name|r
operator|.
name|width
argument_list|()
operator|<<
operator|(
name|qint32
operator|)
name|r
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|d
operator|->
name|s
operator|<<
operator|(
name|quint32
operator|)
name|d
operator|->
name|pic_d
operator|->
name|trecs
expr_stmt|;
comment|// write number of records
name|d
operator|->
name|pic_d
operator|->
name|pictb
operator|.
name|seek
argument_list|(
name|cs_start
argument_list|)
expr_stmt|;
name|QByteArray
name|buf
init|=
name|d
operator|->
name|pic_d
operator|->
name|pictb
operator|.
name|buffer
argument_list|()
decl_stmt|;
name|quint16
name|cs
init|=
operator|(
name|quint16
operator|)
name|qChecksum
argument_list|(
name|buf
operator|.
name|constData
argument_list|()
operator|+
name|data_start
argument_list|,
name|pos
operator|-
name|data_start
argument_list|)
decl_stmt|;
name|d
operator|->
name|s
operator|<<
name|cs
expr_stmt|;
comment|// write checksum
name|d
operator|->
name|pic_d
operator|->
name|pictb
operator|.
name|close
argument_list|()
expr_stmt|;
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_define
DECL|macro|SERIALIZE_CMD
define|#
directive|define
name|SERIALIZE_CMD
parameter_list|(
name|c
parameter_list|)
define|\
value|d->pic_d->trecs++; \     d->s<< (quint8) c; \     d->s<< (quint8) 0; \     pos = d->pic_d->pictb.pos()
end_define
begin_function
DECL|function|updatePen
name|void
name|QPicturePaintEngine
operator|::
name|updatePen
parameter_list|(
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_PICTURE_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|" -> updatePen(): width:"
operator|<<
name|pen
operator|.
name|width
argument_list|()
operator|<<
literal|"style:"
operator|<<
name|pen
operator|.
name|style
argument_list|()
operator|<<
literal|"color:"
operator|<<
name|pen
operator|.
name|color
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|int
name|pos
decl_stmt|;
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcSetPen
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pic_d
operator|->
name|in_memory_only
condition|)
block|{
name|int
name|index
init|=
name|d
operator|->
name|pic_d
operator|->
name|pen_list
operator|.
name|size
argument_list|()
decl_stmt|;
name|d
operator|->
name|pic_d
operator|->
name|pen_list
operator|.
name|append
argument_list|(
name|pen
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
name|index
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|s
operator|<<
name|pen
expr_stmt|;
block|}
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
name|QRect
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateCompositionMode
name|void
name|QPicturePaintEngine
operator|::
name|updateCompositionMode
parameter_list|(
name|QPainter
operator|::
name|CompositionMode
name|cmode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_PICTURE_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|" -> updateCompositionMode():"
operator|<<
name|cmode
expr_stmt|;
endif|#
directive|endif
name|int
name|pos
decl_stmt|;
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcSetCompositionMode
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
operator|(
name|qint32
operator|)
name|cmode
expr_stmt|;
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
name|QRectF
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateClipEnabled
name|void
name|QPicturePaintEngine
operator|::
name|updateClipEnabled
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_PICTURE_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|" -> updateClipEnabled():"
operator|<<
name|enabled
expr_stmt|;
endif|#
directive|endif
name|int
name|pos
decl_stmt|;
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcSetClipEnabled
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
name|enabled
expr_stmt|;
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
name|QRectF
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateOpacity
name|void
name|QPicturePaintEngine
operator|::
name|updateOpacity
parameter_list|(
name|qreal
name|opacity
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_PICTURE_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|" -> updateOpacity():"
operator|<<
name|opacity
expr_stmt|;
endif|#
directive|endif
name|int
name|pos
decl_stmt|;
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcSetOpacity
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
name|double
argument_list|(
name|opacity
argument_list|)
expr_stmt|;
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
name|QRectF
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateBrush
name|void
name|QPicturePaintEngine
operator|::
name|updateBrush
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_PICTURE_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|" -> updateBrush(): style:"
operator|<<
name|brush
operator|.
name|style
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|int
name|pos
decl_stmt|;
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcSetBrush
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pic_d
operator|->
name|in_memory_only
condition|)
block|{
name|int
name|index
init|=
name|d
operator|->
name|pic_d
operator|->
name|brush_list
operator|.
name|size
argument_list|()
decl_stmt|;
name|d
operator|->
name|pic_d
operator|->
name|brush_list
operator|.
name|append
argument_list|(
name|brush
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
name|index
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|s
operator|<<
name|brush
expr_stmt|;
block|}
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
name|QRect
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateBrushOrigin
name|void
name|QPicturePaintEngine
operator|::
name|updateBrushOrigin
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_PICTURE_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|" -> updateBrushOrigin(): "
operator|<<
name|p
expr_stmt|;
endif|#
directive|endif
name|int
name|pos
decl_stmt|;
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcSetBrushOrigin
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
name|p
expr_stmt|;
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
name|QRect
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateFont
name|void
name|QPicturePaintEngine
operator|::
name|updateFont
parameter_list|(
specifier|const
name|QFont
modifier|&
name|font
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_PICTURE_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|" -> updateFont(): pt sz:"
operator|<<
name|font
operator|.
name|pointSize
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|int
name|pos
decl_stmt|;
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcSetFont
argument_list|)
expr_stmt|;
name|QFont
name|fnt
init|=
name|font
decl_stmt|;
name|d
operator|->
name|s
operator|<<
name|fnt
expr_stmt|;
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
name|QRectF
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateBackground
name|void
name|QPicturePaintEngine
operator|::
name|updateBackground
parameter_list|(
name|Qt
operator|::
name|BGMode
name|bgMode
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|bgBrush
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_PICTURE_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|" -> updateBackground(): mode:"
operator|<<
name|bgMode
operator|<<
literal|"style:"
operator|<<
name|bgBrush
operator|.
name|style
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|int
name|pos
decl_stmt|;
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcSetBkColor
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
name|bgBrush
operator|.
name|color
argument_list|()
expr_stmt|;
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
name|QRect
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcSetBkMode
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
operator|(
name|qint8
operator|)
name|bgMode
expr_stmt|;
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
name|QRectF
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateMatrix
name|void
name|QPicturePaintEngine
operator|::
name|updateMatrix
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_PICTURE_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|" -> updateMatrix():"
operator|<<
name|matrix
expr_stmt|;
endif|#
directive|endif
name|int
name|pos
decl_stmt|;
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcSetWMatrix
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
name|matrix
operator|<<
operator|(
name|qint8
operator|)
literal|false
expr_stmt|;
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
name|QRectF
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateClipRegion
name|void
name|QPicturePaintEngine
operator|::
name|updateClipRegion
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_PICTURE_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|" -> updateClipRegion(): op:"
operator|<<
name|op
operator|<<
literal|"bounding rect:"
operator|<<
name|region
operator|.
name|boundingRect
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|int
name|pos
decl_stmt|;
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcSetClipRegion
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
name|region
operator|<<
name|qint8
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
name|QRectF
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateClipPath
name|void
name|QPicturePaintEngine
operator|::
name|updateClipPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_PICTURE_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|" -> updateClipPath(): op:"
operator|<<
name|op
operator|<<
literal|"bounding rect:"
operator|<<
name|path
operator|.
name|boundingRect
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|int
name|pos
decl_stmt|;
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcSetClipPath
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
name|path
operator|<<
name|qint8
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
name|QRectF
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateRenderHints
name|void
name|QPicturePaintEngine
operator|::
name|updateRenderHints
parameter_list|(
name|QPainter
operator|::
name|RenderHints
name|hints
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_PICTURE_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|" -> updateRenderHints(): "
operator|<<
name|hints
expr_stmt|;
endif|#
directive|endif
name|int
name|pos
decl_stmt|;
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcSetRenderHint
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
operator|(
name|quint32
operator|)
name|hints
expr_stmt|;
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
name|QRect
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeCmdLength
name|void
name|QPicturePaintEngine
operator|::
name|writeCmdLength
parameter_list|(
name|int
name|pos
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
name|bool
name|corr
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
name|int
name|newpos
init|=
name|d
operator|->
name|pic_d
operator|->
name|pictb
operator|.
name|pos
argument_list|()
decl_stmt|;
comment|// new position
name|int
name|length
init|=
name|newpos
operator|-
name|pos
decl_stmt|;
name|QRectF
name|br
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|<
literal|255
condition|)
block|{
comment|// write 8-bit length
name|d
operator|->
name|pic_d
operator|->
name|pictb
operator|.
name|seek
argument_list|(
name|pos
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// position to right index
name|d
operator|->
name|s
operator|<<
operator|(
name|quint8
operator|)
name|length
expr_stmt|;
block|}
else|else
block|{
comment|// write 32-bit length
name|d
operator|->
name|s
operator|<<
operator|(
name|quint32
operator|)
literal|0
expr_stmt|;
comment|// extend the buffer
name|d
operator|->
name|pic_d
operator|->
name|pictb
operator|.
name|seek
argument_list|(
name|pos
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// position to right index
name|d
operator|->
name|s
operator|<<
operator|(
name|quint8
operator|)
literal|255
expr_stmt|;
comment|// indicate 32-bit length
name|char
modifier|*
name|p
init|=
name|d
operator|->
name|pic_d
operator|->
name|pictb
operator|.
name|buffer
argument_list|()
operator|.
name|data
argument_list|()
decl_stmt|;
name|memmove
argument_list|(
name|p
operator|+
name|pos
operator|+
literal|4
argument_list|,
name|p
operator|+
name|pos
argument_list|,
name|length
argument_list|)
expr_stmt|;
comment|// make room for 4 byte
name|d
operator|->
name|s
operator|<<
operator|(
name|quint32
operator|)
name|length
expr_stmt|;
name|newpos
operator|+=
literal|4
expr_stmt|;
block|}
name|d
operator|->
name|pic_d
operator|->
name|pictb
operator|.
name|seek
argument_list|(
name|newpos
argument_list|)
expr_stmt|;
comment|// set to new position
if|if
condition|(
name|br
operator|.
name|width
argument_list|()
operator|>
literal|0.0
operator|||
name|br
operator|.
name|height
argument_list|()
operator|>
literal|0.0
condition|)
block|{
if|if
condition|(
name|corr
condition|)
block|{
comment|// widen bounding rect
name|int
name|w2
init|=
name|painter
argument_list|()
operator|->
name|pen
argument_list|()
operator|.
name|width
argument_list|()
operator|/
literal|2
decl_stmt|;
name|br
operator|.
name|setCoords
argument_list|(
name|br
operator|.
name|left
argument_list|()
operator|-
name|w2
argument_list|,
name|br
operator|.
name|top
argument_list|()
operator|-
name|w2
argument_list|,
name|br
operator|.
name|right
argument_list|()
operator|+
name|w2
argument_list|,
name|br
operator|.
name|bottom
argument_list|()
operator|+
name|w2
argument_list|)
expr_stmt|;
block|}
name|br
operator|=
name|painter
argument_list|()
operator|->
name|transform
argument_list|()
operator|.
name|mapRect
argument_list|(
name|br
argument_list|)
expr_stmt|;
if|if
condition|(
name|painter
argument_list|()
operator|->
name|hasClipping
argument_list|()
condition|)
block|{
name|QRect
name|cr
init|=
name|painter
argument_list|()
operator|->
name|clipRegion
argument_list|()
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
name|br
operator|&=
name|cr
expr_stmt|;
block|}
if|if
condition|(
name|br
operator|.
name|width
argument_list|()
operator|>
literal|0.0
operator|||
name|br
operator|.
name|height
argument_list|()
operator|>
literal|0.0
condition|)
block|{
name|int
name|minx
init|=
name|qFloor
argument_list|(
name|br
operator|.
name|left
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|miny
init|=
name|qFloor
argument_list|(
name|br
operator|.
name|top
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|maxx
init|=
name|qCeil
argument_list|(
name|br
operator|.
name|right
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|maxy
init|=
name|qCeil
argument_list|(
name|br
operator|.
name|bottom
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|pic_d
operator|->
name|brect
operator|.
name|width
argument_list|()
operator|>
literal|0
operator|||
name|d
operator|->
name|pic_d
operator|->
name|brect
operator|.
name|height
argument_list|()
operator|>
literal|0
condition|)
block|{
name|minx
operator|=
name|qMin
argument_list|(
name|minx
argument_list|,
name|d
operator|->
name|pic_d
operator|->
name|brect
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|miny
operator|=
name|qMin
argument_list|(
name|miny
argument_list|,
name|d
operator|->
name|pic_d
operator|->
name|brect
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|maxx
operator|=
name|qMax
argument_list|(
name|maxx
argument_list|,
name|d
operator|->
name|pic_d
operator|->
name|brect
operator|.
name|x
argument_list|()
operator|+
name|d
operator|->
name|pic_d
operator|->
name|brect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|maxy
operator|=
name|qMax
argument_list|(
name|maxy
argument_list|,
name|d
operator|->
name|pic_d
operator|->
name|brect
operator|.
name|y
argument_list|()
operator|+
name|d
operator|->
name|pic_d
operator|->
name|brect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|pic_d
operator|->
name|brect
operator|=
name|QRect
argument_list|(
name|minx
argument_list|,
name|miny
argument_list|,
name|maxx
operator|-
name|minx
argument_list|,
name|maxy
operator|-
name|miny
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|pic_d
operator|->
name|brect
operator|=
name|QRect
argument_list|(
name|minx
argument_list|,
name|miny
argument_list|,
name|maxx
operator|-
name|minx
argument_list|,
name|maxy
operator|-
name|miny
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|drawEllipse
name|void
name|QPicturePaintEngine
operator|::
name|drawEllipse
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_PICTURE_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|" -> drawEllipse():"
operator|<<
name|rect
expr_stmt|;
endif|#
directive|endif
name|int
name|pos
decl_stmt|;
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcDrawEllipse
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
name|rect
expr_stmt|;
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
name|rect
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPath
name|void
name|QPicturePaintEngine
operator|::
name|drawPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_PICTURE_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|" -> drawPath():"
operator|<<
name|path
operator|.
name|boundingRect
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|int
name|pos
decl_stmt|;
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcDrawPath
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
name|path
expr_stmt|;
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
name|path
operator|.
name|boundingRect
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPolygon
name|void
name|QPicturePaintEngine
operator|::
name|drawPolygon
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|numPoints
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_PICTURE_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|" -> drawPolygon(): size="
operator|<<
name|numPoints
expr_stmt|;
endif|#
directive|endif
name|int
name|pos
decl_stmt|;
name|QPolygonF
name|polygon
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPoints
condition|;
operator|++
name|i
control|)
name|polygon
operator|<<
name|points
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|PolylineMode
condition|)
block|{
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcDrawPolyline
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
name|polygon
expr_stmt|;
block|}
else|else
block|{
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcDrawPolygon
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
name|polygon
expr_stmt|;
name|d
operator|->
name|s
operator|<<
call|(
name|qint8
call|)
argument_list|(
name|mode
operator|==
name|OddEvenMode
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
block|}
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
name|polygon
operator|.
name|boundingRect
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPixmap
name|void
name|QPicturePaintEngine
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_PICTURE_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|" -> drawPixmap():"
operator|<<
name|r
expr_stmt|;
endif|#
directive|endif
name|int
name|pos
decl_stmt|;
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcDrawPixmap
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pic_d
operator|->
name|in_memory_only
condition|)
block|{
name|int
name|index
init|=
name|d
operator|->
name|pic_d
operator|->
name|pixmap_list
operator|.
name|size
argument_list|()
decl_stmt|;
name|d
operator|->
name|pic_d
operator|->
name|pixmap_list
operator|.
name|append
argument_list|(
name|pm
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
name|r
operator|<<
name|index
operator|<<
name|sr
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|s
operator|<<
name|r
operator|<<
name|pm
operator|<<
name|sr
expr_stmt|;
block|}
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
name|r
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawTiledPixmap
name|void
name|QPicturePaintEngine
operator|::
name|drawTiledPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|s
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_PICTURE_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|" -> drawTiledPixmap():"
operator|<<
name|r
operator|<<
name|s
expr_stmt|;
endif|#
directive|endif
name|int
name|pos
decl_stmt|;
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcDrawTiledPixmap
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pic_d
operator|->
name|in_memory_only
condition|)
block|{
name|int
name|index
init|=
name|d
operator|->
name|pic_d
operator|->
name|pixmap_list
operator|.
name|size
argument_list|()
decl_stmt|;
name|d
operator|->
name|pic_d
operator|->
name|pixmap_list
operator|.
name|append
argument_list|(
name|pixmap
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
name|r
operator|<<
name|index
operator|<<
name|s
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|s
operator|<<
name|r
operator|<<
name|pixmap
operator|<<
name|s
expr_stmt|;
block|}
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
name|r
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawImage
name|void
name|QPicturePaintEngine
operator|::
name|drawImage
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_PICTURE_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|" -> drawImage():"
operator|<<
name|r
operator|<<
name|sr
expr_stmt|;
endif|#
directive|endif
name|int
name|pos
decl_stmt|;
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcDrawImage
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pic_d
operator|->
name|in_memory_only
condition|)
block|{
name|int
name|index
init|=
name|d
operator|->
name|pic_d
operator|->
name|image_list
operator|.
name|size
argument_list|()
decl_stmt|;
name|d
operator|->
name|pic_d
operator|->
name|image_list
operator|.
name|append
argument_list|(
name|image
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
name|r
operator|<<
name|index
operator|<<
name|sr
operator|<<
operator|(
name|quint32
operator|)
name|flags
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|s
operator|<<
name|r
operator|<<
name|image
operator|<<
name|sr
operator|<<
operator|(
name|quint32
operator|)
name|flags
expr_stmt|;
block|}
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
name|r
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawTextItem
name|void
name|QPicturePaintEngine
operator|::
name|drawTextItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QTextItem
modifier|&
name|ti
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPicturePaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_PICTURE_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|" -> drawTextItem():"
operator|<<
name|p
operator|<<
name|ti
operator|.
name|text
argument_list|()
expr_stmt|;
endif|#
directive|endif
specifier|const
name|QTextItemInt
modifier|&
name|si
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTextItemInt
operator|&
argument_list|>
argument_list|(
name|ti
argument_list|)
decl_stmt|;
if|if
condition|(
name|si
operator|.
name|chars
operator|==
literal|0
condition|)
name|QPaintEngine
operator|::
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|ti
argument_list|)
expr_stmt|;
comment|// Draw as path
if|if
condition|(
name|d
operator|->
name|pic_d
operator|->
name|formatMajor
operator|>=
literal|9
condition|)
block|{
name|int
name|pos
decl_stmt|;
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcDrawTextItem
argument_list|)
expr_stmt|;
name|QFont
name|fnt
init|=
name|ti
operator|.
name|font
argument_list|()
decl_stmt|;
name|fnt
operator|.
name|setUnderline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fnt
operator|.
name|setStrikeOut
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fnt
operator|.
name|setOverline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|qreal
name|justificationWidth
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|si
operator|.
name|justified
condition|)
name|justificationWidth
operator|=
name|si
operator|.
name|width
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|d
operator|->
name|s
operator|<<
name|p
operator|<<
name|ti
operator|.
name|text
argument_list|()
operator|<<
name|fnt
operator|<<
name|ti
operator|.
name|renderFlags
argument_list|()
operator|<<
name|double
argument_list|(
name|fnt
operator|.
name|d
operator|->
name|dpi
argument_list|)
operator|/
name|qt_defaultDpi
argument_list|()
operator|<<
name|justificationWidth
expr_stmt|;
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
comment|/*brect=*/
name|QRectF
argument_list|()
argument_list|,
comment|/*corr=*/
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|pic_d
operator|->
name|formatMajor
operator|>=
literal|8
condition|)
block|{
comment|// old old (buggy) format
name|int
name|pos
decl_stmt|;
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcDrawTextItem
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
name|QPointF
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
operator|-
name|ti
operator|.
name|ascent
argument_list|()
argument_list|)
operator|<<
name|ti
operator|.
name|text
argument_list|()
operator|<<
name|ti
operator|.
name|font
argument_list|()
operator|<<
name|ti
operator|.
name|renderFlags
argument_list|()
expr_stmt|;
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
comment|/*brect=*/
name|QRectF
argument_list|()
argument_list|,
comment|/*corr=*/
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// old (buggy) format
name|int
name|pos
decl_stmt|;
name|SERIALIZE_CMD
argument_list|(
name|QPicturePrivate
operator|::
name|PdcDrawText2
argument_list|)
expr_stmt|;
name|d
operator|->
name|s
operator|<<
name|p
operator|<<
name|ti
operator|.
name|text
argument_list|()
expr_stmt|;
name|writeCmdLength
argument_list|(
name|pos
argument_list|,
name|QRectF
argument_list|(
name|p
argument_list|,
name|QSizeF
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateState
name|void
name|QPicturePaintEngine
operator|::
name|updateState
parameter_list|(
specifier|const
name|QPaintEngineState
modifier|&
name|state
parameter_list|)
block|{
name|QPaintEngine
operator|::
name|DirtyFlags
name|flags
init|=
name|state
operator|.
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyPen
condition|)
name|updatePen
argument_list|(
name|state
operator|.
name|pen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyBrush
condition|)
name|updateBrush
argument_list|(
name|state
operator|.
name|brush
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyBrushOrigin
condition|)
name|updateBrushOrigin
argument_list|(
name|state
operator|.
name|brushOrigin
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyFont
condition|)
name|updateFont
argument_list|(
name|state
operator|.
name|font
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyBackground
condition|)
name|updateBackground
argument_list|(
name|state
operator|.
name|backgroundMode
argument_list|()
argument_list|,
name|state
operator|.
name|backgroundBrush
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyTransform
condition|)
name|updateMatrix
argument_list|(
name|state
operator|.
name|transform
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyClipEnabled
condition|)
name|updateClipEnabled
argument_list|(
name|state
operator|.
name|isClipEnabled
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyClipRegion
condition|)
name|updateClipRegion
argument_list|(
name|state
operator|.
name|clipRegion
argument_list|()
argument_list|,
name|state
operator|.
name|clipOperation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyClipPath
condition|)
name|updateClipPath
argument_list|(
name|state
operator|.
name|clipPath
argument_list|()
argument_list|,
name|state
operator|.
name|clipOperation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyHints
condition|)
name|updateRenderHints
argument_list|(
name|state
operator|.
name|renderHints
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyCompositionMode
condition|)
name|updateCompositionMode
argument_list|(
name|state
operator|.
name|compositionMode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyOpacity
condition|)
name|updateOpacity
argument_list|(
name|state
operator|.
name|opacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PICTURE
end_comment
end_unit
