begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QMNGHANDLER_P_H
end_ifndef
begin_define
DECL|macro|QMNGHANDLER_P_H
define|#
directive|define
name|QMNGHANDLER_P_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qscopedpointer.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qimageiohandler.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QImage
name|class
name|QImage
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QByteArray
name|class
name|QByteArray
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QIODevice
name|class
name|QIODevice
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QVariant
name|class
name|QVariant
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QMngHandlerPrivate
name|class
name|QMngHandlerPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QMngHandler
range|:
name|public
name|QImageIOHandler
block|{
name|public
operator|:
name|QMngHandler
argument_list|()
block|;
operator|~
name|QMngHandler
argument_list|()
block|;
name|virtual
name|bool
name|canRead
argument_list|()
specifier|const
block|;
name|virtual
name|QByteArray
name|name
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|read
argument_list|(
name|QImage
operator|*
name|image
argument_list|)
block|;
name|virtual
name|bool
name|write
argument_list|(
specifier|const
name|QImage
operator|&
name|image
argument_list|)
block|;
name|virtual
name|int
name|currentImageNumber
argument_list|()
specifier|const
block|;
name|virtual
name|int
name|imageCount
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|jumpToImage
argument_list|(
argument|int imageNumber
argument_list|)
block|;
name|virtual
name|bool
name|jumpToNextImage
argument_list|()
block|;
name|virtual
name|int
name|loopCount
argument_list|()
specifier|const
block|;
name|virtual
name|int
name|nextImageDelay
argument_list|()
specifier|const
block|;
specifier|static
name|bool
name|canRead
argument_list|(
name|QIODevice
operator|*
name|device
argument_list|)
block|;
name|virtual
name|QVariant
name|option
argument_list|(
argument|ImageOption option
argument_list|)
specifier|const
block|;
name|virtual
name|void
name|setOption
argument_list|(
argument|ImageOption option
argument_list|,
argument|const QVariant& value
argument_list|)
block|;
name|virtual
name|bool
name|supportsOption
argument_list|(
argument|ImageOption option
argument_list|)
specifier|const
block|;
name|private
operator|:
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QMngHandler
argument_list|)
name|QScopedPointer
operator|<
name|QMngHandlerPrivate
operator|>
name|d_ptr
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QMNGHANDLER_P_H
end_comment
end_unit
