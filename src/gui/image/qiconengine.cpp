begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qiconengine.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*!   \class QIconEngine    \brief The QIconEngine class provides an abstract base class for QIcon renderers.    \ingroup painting   \inmodule QtGui    An icon engine provides the rendering functions for a QIcon. Each icon has a   corresponding icon engine that is responsible for drawing the icon with a   requested size, mode and state.    The icon is rendered by the paint() function, and the icon can additionally be   obtained as a pixmap with the pixmap() function (the default implementation   simply uses paint() to achieve this). The addPixmap() function can be used to   add new pixmaps to the icon engine, and is used by QIcon to add specialized   custom pixmaps.    The paint(), pixmap(), and addPixmap() functions are all virtual, and can   therefore be reimplemented in subclasses of QIconEngine.    \sa QIconEnginePlugin  */
comment|/*!   \fn virtual void QIconEngine::paint(QPainter *painter, const QRect&rect, QIcon::Mode mode, QIcon::State state) = 0;    Uses the given \a painter to paint the icon with the required \a mode and   \a state into the rectangle \a rect. */
comment|/*!  Returns the actual size of the icon the engine provides for the   requested \a size, \a mode and \a state. The default implementation   returns the given \a size.  */
DECL|function|actualSize
name|QSize
name|QIconEngine
operator|::
name|actualSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QIcon
operator|::
name|Mode
comment|/*mode*/
parameter_list|,
name|QIcon
operator|::
name|State
comment|/*state*/
parameter_list|)
block|{
return|return
name|size
return|;
block|}
end_function
begin_comment
comment|/*!     \since 5.6     Constructs the icon engine.  */
end_comment
begin_constructor
DECL|function|QIconEngine
name|QIconEngine
operator|::
name|QIconEngine
parameter_list|()
block|{ }
end_constructor
begin_comment
comment|/*!   Destroys the icon engine.  */
end_comment
begin_destructor
DECL|function|~QIconEngine
name|QIconEngine
operator|::
name|~
name|QIconEngine
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!   Returns the icon as a pixmap with the required \a size, \a mode,   and \a state. The default implementation creates a new pixmap and   calls paint() to fill it. */
end_comment
begin_function
DECL|function|pixmap
name|QPixmap
name|QIconEngine
operator|::
name|pixmap
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QIcon
operator|::
name|Mode
name|mode
parameter_list|,
name|QIcon
operator|::
name|State
name|state
parameter_list|)
block|{
name|QPixmap
name|pm
argument_list|(
name|size
argument_list|)
decl_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|pm
argument_list|)
decl_stmt|;
name|paint
argument_list|(
operator|&
name|p
argument_list|,
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|size
argument_list|)
argument_list|,
name|mode
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
return|return
name|pm
return|;
block|}
end_function
begin_comment
comment|/*!   Called by QIcon::addPixmap(). Adds a specialized \a pixmap for the given   \a mode and \a state. The default pixmap-based engine stores any supplied   pixmaps, and it uses them instead of scaled pixmaps if the size of a pixmap   matches the size of icon requested. Custom icon engines that implement   scalable vector formats are free to ignores any extra pixmaps.  */
end_comment
begin_function
DECL|function|addPixmap
name|void
name|QIconEngine
operator|::
name|addPixmap
parameter_list|(
specifier|const
name|QPixmap
modifier|&
comment|/*pixmap*/
parameter_list|,
name|QIcon
operator|::
name|Mode
comment|/*mode*/
parameter_list|,
name|QIcon
operator|::
name|State
comment|/*state*/
parameter_list|)
block|{ }
end_function
begin_comment
comment|/*!  Called by QIcon::addFile(). Adds a specialized pixmap from the   file with the given \a fileName, \a size, \a mode and \a state. The   default pixmap-based engine stores any supplied file names, and it   loads the pixmaps on demand instead of using scaled pixmaps if the   size of a pixmap matches the size of icon requested. Custom icon   engines that implement scalable vector formats are free to ignores   any extra files.  */
end_comment
begin_function
DECL|function|addFile
name|void
name|QIconEngine
operator|::
name|addFile
parameter_list|(
specifier|const
name|QString
modifier|&
comment|/*fileName*/
parameter_list|,
specifier|const
name|QSize
modifier|&
comment|/*size*/
parameter_list|,
name|QIcon
operator|::
name|Mode
comment|/*mode*/
parameter_list|,
name|QIcon
operator|::
name|State
comment|/*state*/
parameter_list|)
block|{ }
end_function
begin_comment
comment|/*!     \enum QIconEngine::IconEngineHook     \since 4.5      These enum values are used for virtual_hook() to allow additional     queries to icon engine without breaking binary compatibility.      \value AvailableSizesHook Allows to query the sizes of the     contained pixmaps for pixmap-based engines. The \a data argument     of the virtual_hook() function is a AvailableSizesArgument pointer     that should be filled with icon sizes. Engines that work in terms     of a scalable, vectorial format normally return an empty list.      \value IconNameHook Allows to query the name used to create the     icon, for example when instantiating an icon using     QIcon::fromTheme().      \value IsNullHook Allow to query if this engine represents a null     icon. The \a data argument of the virtual_hook() is a pointer to a     bool that can be set to true if the icon is null. This enum value     was added in Qt 5.7.      \sa virtual_hook()  */
end_comment
begin_comment
comment|/*!     \class QIconEngine::AvailableSizesArgument     \since 4.5      \inmodule QtGui      This struct represents arguments to virtual_hook() function when     \a id parameter is QIconEngine::AvailableSizesHook.      \sa virtual_hook(), QIconEngine::IconEngineHook  */
end_comment
begin_comment
comment|/*!     \variable QIconEngine::AvailableSizesArgument::mode     \brief the requested mode of an image.      \sa QIcon::Mode */
end_comment
begin_comment
comment|/*!     \variable QIconEngine::AvailableSizesArgument::state     \brief the requested state of an image.      \sa QIcon::State */
end_comment
begin_comment
comment|/*!     \variable QIconEngine::AvailableSizesArgument::sizes      \brief image sizes that are available with specified \a mode and     \a state. This is an output parameter and is filled after call to     virtual_hook(). Engines that work in terms of a scalable,     vectorial format normally return an empty list. */
end_comment
begin_comment
comment|/*!     Returns a key that identifies this icon engine.  */
end_comment
begin_function
DECL|function|key
name|QString
name|QIconEngine
operator|::
name|key
parameter_list|()
specifier|const
block|{
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*! \fn QIconEngine *QIconEngine::clone() const      Reimplement this method to return a clone of this icon engine.  */
end_comment
begin_comment
comment|/*!     Reads icon engine contents from the QDataStream \a in. Returns     true if the contents were read; otherwise returns \c false.      QIconEngine's default implementation always return false.  */
end_comment
begin_function
DECL|function|read
name|bool
name|QIconEngine
operator|::
name|read
parameter_list|(
name|QDataStream
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Writes the contents of this engine to the QDataStream \a out.     Returns \c true if the contents were written; otherwise returns \c false.      QIconEngine's default implementation always return false.  */
end_comment
begin_function
DECL|function|write
name|bool
name|QIconEngine
operator|::
name|write
parameter_list|(
name|QDataStream
modifier|&
parameter_list|)
specifier|const
block|{
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      Additional method to allow extending QIconEngine without     adding new virtual methods (and without breaking binary compatibility).     The actual action and format of \a data depends on \a id argument     which is in fact a constant from IconEngineHook enum.      \sa IconEngineHook */
end_comment
begin_function
DECL|function|virtual_hook
name|void
name|QIconEngine
operator|::
name|virtual_hook
parameter_list|(
name|int
name|id
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
switch|switch
condition|(
name|id
condition|)
block|{
case|case
name|QIconEngine
operator|::
name|AvailableSizesHook
case|:
block|{
name|QIconEngine
operator|::
name|AvailableSizesArgument
modifier|&
name|arg
init|=
operator|*
cast|reinterpret_cast
argument_list|<
name|QIconEngine
operator|::
name|AvailableSizesArgument
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|arg
operator|.
name|sizes
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
block|}
end_function
begin_comment
comment|/*!     \since 4.5      Returns sizes of all images that are contained in the engine for the     specific \a mode and \a state.      \note This is a helper method and the actual work is done by     virtual_hook() method, hence this method depends on icon engine support     and may not work with all icon engines.  */
end_comment
begin_function
DECL|function|availableSizes
name|QList
argument_list|<
name|QSize
argument_list|>
name|QIconEngine
operator|::
name|availableSizes
parameter_list|(
name|QIcon
operator|::
name|Mode
name|mode
parameter_list|,
name|QIcon
operator|::
name|State
name|state
parameter_list|)
specifier|const
block|{
name|AvailableSizesArgument
name|arg
decl_stmt|;
name|arg
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
name|arg
operator|.
name|state
operator|=
name|state
expr_stmt|;
cast|const_cast
argument_list|<
name|QIconEngine
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|virtual_hook
argument_list|(
name|QIconEngine
operator|::
name|AvailableSizesHook
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
operator|&
name|arg
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|arg
operator|.
name|sizes
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.7      Returns the name used to create the engine, if available.      \note This is a helper method and the actual work is done by     virtual_hook() method, hence this method depends on icon engine support     and may not work with all icon engines.  */
end_comment
begin_function
DECL|function|iconName
name|QString
name|QIconEngine
operator|::
name|iconName
parameter_list|()
specifier|const
block|{
name|QString
name|name
decl_stmt|;
cast|const_cast
argument_list|<
name|QIconEngine
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|virtual_hook
argument_list|(
name|QIconEngine
operator|::
name|IconNameHook
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
operator|&
name|name
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|name
return|;
block|}
end_function
begin_comment
comment|/*!     \since 5.7      Returns true if this icon engine represent a null QIcon.  */
end_comment
begin_function
DECL|function|isNull
name|bool
name|QIconEngine
operator|::
name|isNull
parameter_list|()
specifier|const
block|{
name|bool
name|isNull
init|=
literal|false
decl_stmt|;
cast|const_cast
argument_list|<
name|QIconEngine
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|virtual_hook
argument_list|(
name|QIconEngine
operator|::
name|IsNullHook
argument_list|,
operator|&
name|isNull
argument_list|)
expr_stmt|;
return|return
name|isNull
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
