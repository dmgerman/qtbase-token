begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<private/qdrawhelper_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qsimd_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qimage_p.h>
end_include
begin_include
include|#
directive|include
file|<qendian.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// table to flip bits
DECL|variable|bitflip
specifier|static
specifier|const
name|uchar
name|bitflip
index|[
literal|256
index|]
init|=
block|{
comment|/*         open OUT, "| fmt";         for $i (0..255) {             print OUT (($i>> 7)& 0x01) | (($i>> 5)& 0x02) |                       (($i>> 3)& 0x04) | (($i>> 1)& 0x08) |                       (($i<< 7)& 0x80) | (($i<< 5)& 0x40) |                       (($i<< 3)& 0x20) | (($i<< 1)& 0x10), ", ";         }         close OUT;     */
literal|0
block|,
literal|128
block|,
literal|64
block|,
literal|192
block|,
literal|32
block|,
literal|160
block|,
literal|96
block|,
literal|224
block|,
literal|16
block|,
literal|144
block|,
literal|80
block|,
literal|208
block|,
literal|48
block|,
literal|176
block|,
literal|112
block|,
literal|240
block|,
literal|8
block|,
literal|136
block|,
literal|72
block|,
literal|200
block|,
literal|40
block|,
literal|168
block|,
literal|104
block|,
literal|232
block|,
literal|24
block|,
literal|152
block|,
literal|88
block|,
literal|216
block|,
literal|56
block|,
literal|184
block|,
literal|120
block|,
literal|248
block|,
literal|4
block|,
literal|132
block|,
literal|68
block|,
literal|196
block|,
literal|36
block|,
literal|164
block|,
literal|100
block|,
literal|228
block|,
literal|20
block|,
literal|148
block|,
literal|84
block|,
literal|212
block|,
literal|52
block|,
literal|180
block|,
literal|116
block|,
literal|244
block|,
literal|12
block|,
literal|140
block|,
literal|76
block|,
literal|204
block|,
literal|44
block|,
literal|172
block|,
literal|108
block|,
literal|236
block|,
literal|28
block|,
literal|156
block|,
literal|92
block|,
literal|220
block|,
literal|60
block|,
literal|188
block|,
literal|124
block|,
literal|252
block|,
literal|2
block|,
literal|130
block|,
literal|66
block|,
literal|194
block|,
literal|34
block|,
literal|162
block|,
literal|98
block|,
literal|226
block|,
literal|18
block|,
literal|146
block|,
literal|82
block|,
literal|210
block|,
literal|50
block|,
literal|178
block|,
literal|114
block|,
literal|242
block|,
literal|10
block|,
literal|138
block|,
literal|74
block|,
literal|202
block|,
literal|42
block|,
literal|170
block|,
literal|106
block|,
literal|234
block|,
literal|26
block|,
literal|154
block|,
literal|90
block|,
literal|218
block|,
literal|58
block|,
literal|186
block|,
literal|122
block|,
literal|250
block|,
literal|6
block|,
literal|134
block|,
literal|70
block|,
literal|198
block|,
literal|38
block|,
literal|166
block|,
literal|102
block|,
literal|230
block|,
literal|22
block|,
literal|150
block|,
literal|86
block|,
literal|214
block|,
literal|54
block|,
literal|182
block|,
literal|118
block|,
literal|246
block|,
literal|14
block|,
literal|142
block|,
literal|78
block|,
literal|206
block|,
literal|46
block|,
literal|174
block|,
literal|110
block|,
literal|238
block|,
literal|30
block|,
literal|158
block|,
literal|94
block|,
literal|222
block|,
literal|62
block|,
literal|190
block|,
literal|126
block|,
literal|254
block|,
literal|1
block|,
literal|129
block|,
literal|65
block|,
literal|193
block|,
literal|33
block|,
literal|161
block|,
literal|97
block|,
literal|225
block|,
literal|17
block|,
literal|145
block|,
literal|81
block|,
literal|209
block|,
literal|49
block|,
literal|177
block|,
literal|113
block|,
literal|241
block|,
literal|9
block|,
literal|137
block|,
literal|73
block|,
literal|201
block|,
literal|41
block|,
literal|169
block|,
literal|105
block|,
literal|233
block|,
literal|25
block|,
literal|153
block|,
literal|89
block|,
literal|217
block|,
literal|57
block|,
literal|185
block|,
literal|121
block|,
literal|249
block|,
literal|5
block|,
literal|133
block|,
literal|69
block|,
literal|197
block|,
literal|37
block|,
literal|165
block|,
literal|101
block|,
literal|229
block|,
literal|21
block|,
literal|149
block|,
literal|85
block|,
literal|213
block|,
literal|53
block|,
literal|181
block|,
literal|117
block|,
literal|245
block|,
literal|13
block|,
literal|141
block|,
literal|77
block|,
literal|205
block|,
literal|45
block|,
literal|173
block|,
literal|109
block|,
literal|237
block|,
literal|29
block|,
literal|157
block|,
literal|93
block|,
literal|221
block|,
literal|61
block|,
literal|189
block|,
literal|125
block|,
literal|253
block|,
literal|3
block|,
literal|131
block|,
literal|67
block|,
literal|195
block|,
literal|35
block|,
literal|163
block|,
literal|99
block|,
literal|227
block|,
literal|19
block|,
literal|147
block|,
literal|83
block|,
literal|211
block|,
literal|51
block|,
literal|179
block|,
literal|115
block|,
literal|243
block|,
literal|11
block|,
literal|139
block|,
literal|75
block|,
literal|203
block|,
literal|43
block|,
literal|171
block|,
literal|107
block|,
literal|235
block|,
literal|27
block|,
literal|155
block|,
literal|91
block|,
literal|219
block|,
literal|59
block|,
literal|187
block|,
literal|123
block|,
literal|251
block|,
literal|7
block|,
literal|135
block|,
literal|71
block|,
literal|199
block|,
literal|39
block|,
literal|167
block|,
literal|103
block|,
literal|231
block|,
literal|23
block|,
literal|151
block|,
literal|87
block|,
literal|215
block|,
literal|55
block|,
literal|183
block|,
literal|119
block|,
literal|247
block|,
literal|15
block|,
literal|143
block|,
literal|79
block|,
literal|207
block|,
literal|47
block|,
literal|175
block|,
literal|111
block|,
literal|239
block|,
literal|31
block|,
literal|159
block|,
literal|95
block|,
literal|223
block|,
literal|63
block|,
literal|191
block|,
literal|127
block|,
literal|255
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_get_bitflip_array
specifier|const
name|uchar
modifier|*
name|qt_get_bitflip_array
parameter_list|()
block|{
return|return
name|bitflip
return|;
block|}
end_function
begin_function
DECL|function|qGamma_correct_back_to_linear_cs
name|void
name|qGamma_correct_back_to_linear_cs
parameter_list|(
name|QImage
modifier|*
name|image
parameter_list|)
block|{
specifier|const
name|QDrawHelperGammaTables
modifier|*
name|tables
init|=
name|QGuiApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|gammaTables
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tables
condition|)
return|return;
specifier|const
name|uchar
modifier|*
name|gamma
init|=
name|tables
operator|->
name|qt_pow_rgb_gamma
decl_stmt|;
comment|// gamma correct the pixels back to linear color space...
name|int
name|h
init|=
name|image
operator|->
name|height
argument_list|()
decl_stmt|;
name|int
name|w
init|=
name|image
operator|->
name|width
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
name|uint
modifier|*
name|pixels
init|=
operator|(
name|uint
operator|*
operator|)
name|image
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
name|uint
name|p
init|=
name|pixels
index|[
name|x
index|]
decl_stmt|;
name|uint
name|r
init|=
name|gamma
index|[
name|qRed
argument_list|(
name|p
argument_list|)
index|]
decl_stmt|;
name|uint
name|g
init|=
name|gamma
index|[
name|qGreen
argument_list|(
name|p
argument_list|)
index|]
decl_stmt|;
name|uint
name|b
init|=
name|gamma
index|[
name|qBlue
argument_list|(
name|p
argument_list|)
index|]
decl_stmt|;
name|pixels
index|[
name|x
index|]
operator|=
operator|(
name|r
operator|<<
literal|16
operator|)
operator||
operator|(
name|g
operator|<<
literal|8
operator|)
operator||
name|b
operator||
literal|0xff000000
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*****************************************************************************   Internal routines for converting image depth.  *****************************************************************************/
end_comment
begin_comment
comment|// The drawhelper conversions from/to RGB32 are passthroughs which is not always correct for general image conversion.
end_comment
begin_function
DECL|function|convertRGB32FromARGB32PM
specifier|static
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|convertRGB32FromARGB32PM
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QPixelLayout
modifier|*
parameter_list|,
specifier|const
name|QRgb
modifier|*
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|buffer
index|[
name|i
index|]
operator|=
literal|0xff000000
operator||
name|qUnpremultiply
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
end_function
begin_function
DECL|function|convertRGB32ToARGB32PM
specifier|static
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|convertRGB32ToARGB32PM
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QPixelLayout
modifier|*
parameter_list|,
specifier|const
name|QRgb
modifier|*
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|buffer
index|[
name|i
index|]
operator|=
literal|0xff000000
operator||
name|src
index|[
name|i
index|]
expr_stmt|;
return|return
name|buffer
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_COMPILER_SUPPORTS_SSE4_1
end_ifdef
begin_function_decl
specifier|extern
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|convertRGB32FromARGB32PM_sse4
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QPixelLayout
modifier|*
parameter_list|,
specifier|const
name|QRgb
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|convert_generic
name|void
name|convert_generic
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
comment|// Cannot be used with indexed formats.
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|>
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|>
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
specifier|const
name|int
name|buffer_size
init|=
literal|2048
decl_stmt|;
name|uint
name|buffer
index|[
name|buffer_size
index|]
decl_stmt|;
specifier|const
name|QPixelLayout
modifier|*
name|srcLayout
init|=
operator|&
name|qPixelLayouts
index|[
name|src
operator|->
name|format
index|]
decl_stmt|;
specifier|const
name|QPixelLayout
modifier|*
name|destLayout
init|=
operator|&
name|qPixelLayouts
index|[
name|dest
operator|->
name|format
index|]
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|srcData
init|=
name|src
operator|->
name|data
decl_stmt|;
name|uchar
modifier|*
name|destData
init|=
name|dest
operator|->
name|data
decl_stmt|;
specifier|const
name|FetchPixelsFunc
name|fetch
init|=
name|qFetchPixels
index|[
name|srcLayout
operator|->
name|bpp
index|]
decl_stmt|;
specifier|const
name|StorePixelsFunc
name|store
init|=
name|qStorePixels
index|[
name|destLayout
operator|->
name|bpp
index|]
decl_stmt|;
name|ConvertFunc
name|convertToARGB32PM
init|=
name|srcLayout
operator|->
name|convertToARGB32PM
decl_stmt|;
name|ConvertFunc
name|convertFromARGB32PM
init|=
name|destLayout
operator|->
name|convertFromARGB32PM
decl_stmt|;
if|if
condition|(
name|srcLayout
operator|->
name|alphaWidth
operator|==
literal|0
operator|&&
name|destLayout
operator|->
name|convertFromRGB32
condition|)
block|{
comment|// If the source doesn't have an alpha channel, we can use the faster convertFromRGB32 method.
name|convertFromARGB32PM
operator|=
name|destLayout
operator|->
name|convertFromRGB32
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB32
condition|)
name|convertToARGB32PM
operator|=
name|convertRGB32ToARGB32PM
expr_stmt|;
if|if
condition|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB32
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_COMPILER_SUPPORTS_SSE4_1
if|if
condition|(
name|qCpuHasFeature
argument_list|(
name|SSE4_1
argument_list|)
condition|)
name|convertFromARGB32PM
operator|=
name|convertRGB32FromARGB32PM_sse4
expr_stmt|;
else|else
endif|#
directive|endif
name|convertFromARGB32PM
operator|=
name|convertRGB32FromARGB32PM
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|src
operator|->
name|height
condition|;
operator|++
name|y
control|)
block|{
name|int
name|x
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|x
operator|<
name|src
operator|->
name|width
condition|)
block|{
name|int
name|l
init|=
name|qMin
argument_list|(
name|src
operator|->
name|width
operator|-
name|x
argument_list|,
name|buffer_size
argument_list|)
decl_stmt|;
specifier|const
name|uint
modifier|*
name|ptr
init|=
name|fetch
argument_list|(
name|buffer
argument_list|,
name|srcData
argument_list|,
name|x
argument_list|,
name|l
argument_list|)
decl_stmt|;
name|ptr
operator|=
name|convertToARGB32PM
argument_list|(
name|buffer
argument_list|,
name|ptr
argument_list|,
name|l
argument_list|,
name|srcLayout
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ptr
operator|=
name|convertFromARGB32PM
argument_list|(
name|buffer
argument_list|,
name|ptr
argument_list|,
name|l
argument_list|,
name|destLayout
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|store
argument_list|(
name|destData
argument_list|,
name|ptr
argument_list|,
name|x
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|x
operator|+=
name|l
expr_stmt|;
block|}
name|srcData
operator|+=
name|src
operator|->
name|bytes_per_line
expr_stmt|;
name|destData
operator|+=
name|dest
operator|->
name|bytes_per_line
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|convert_generic_inplace
name|bool
name|convert_generic_inplace
parameter_list|(
name|QImageData
modifier|*
name|data
parameter_list|,
name|QImage
operator|::
name|Format
name|dst_format
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
comment|// Cannot be used with indexed formats or between formats with different pixel depths.
name|Q_ASSERT
argument_list|(
name|dst_format
operator|>
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|data
operator|->
name|format
operator|>
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|->
name|depth
operator|!=
name|qt_depthForFormat
argument_list|(
name|dst_format
argument_list|)
condition|)
return|return
literal|false
return|;
specifier|const
name|int
name|buffer_size
init|=
literal|2048
decl_stmt|;
name|uint
name|buffer
index|[
name|buffer_size
index|]
decl_stmt|;
specifier|const
name|QPixelLayout
modifier|*
name|srcLayout
init|=
operator|&
name|qPixelLayouts
index|[
name|data
operator|->
name|format
index|]
decl_stmt|;
specifier|const
name|QPixelLayout
modifier|*
name|destLayout
init|=
operator|&
name|qPixelLayouts
index|[
name|dst_format
index|]
decl_stmt|;
name|uchar
modifier|*
name|srcData
init|=
name|data
operator|->
name|data
decl_stmt|;
specifier|const
name|FetchPixelsFunc
name|fetch
init|=
name|qFetchPixels
index|[
name|srcLayout
operator|->
name|bpp
index|]
decl_stmt|;
specifier|const
name|StorePixelsFunc
name|store
init|=
name|qStorePixels
index|[
name|destLayout
operator|->
name|bpp
index|]
decl_stmt|;
name|ConvertFunc
name|convertToARGB32PM
init|=
name|srcLayout
operator|->
name|convertToARGB32PM
decl_stmt|;
name|ConvertFunc
name|convertFromARGB32PM
init|=
name|destLayout
operator|->
name|convertFromARGB32PM
decl_stmt|;
if|if
condition|(
name|srcLayout
operator|->
name|alphaWidth
operator|==
literal|0
operator|&&
name|destLayout
operator|->
name|convertFromRGB32
condition|)
block|{
comment|// If the source doesn't have an alpha channel, we can use the faster convertFromRGB32 method.
name|convertFromARGB32PM
operator|=
name|destLayout
operator|->
name|convertFromRGB32
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB32
condition|)
name|convertToARGB32PM
operator|=
name|convertRGB32ToARGB32PM
expr_stmt|;
if|if
condition|(
name|dst_format
operator|==
name|QImage
operator|::
name|Format_RGB32
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_COMPILER_SUPPORTS_SSE4_1
if|if
condition|(
name|qCpuHasFeature
argument_list|(
name|SSE4_1
argument_list|)
condition|)
name|convertFromARGB32PM
operator|=
name|convertRGB32FromARGB32PM_sse4
expr_stmt|;
else|else
endif|#
directive|endif
name|convertFromARGB32PM
operator|=
name|convertRGB32FromARGB32PM
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|data
operator|->
name|height
condition|;
operator|++
name|y
control|)
block|{
name|int
name|x
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|x
operator|<
name|data
operator|->
name|width
condition|)
block|{
name|int
name|l
init|=
name|qMin
argument_list|(
name|data
operator|->
name|width
operator|-
name|x
argument_list|,
name|buffer_size
argument_list|)
decl_stmt|;
specifier|const
name|uint
modifier|*
name|ptr
init|=
name|fetch
argument_list|(
name|buffer
argument_list|,
name|srcData
argument_list|,
name|x
argument_list|,
name|l
argument_list|)
decl_stmt|;
name|ptr
operator|=
name|convertToARGB32PM
argument_list|(
name|buffer
argument_list|,
name|ptr
argument_list|,
name|l
argument_list|,
name|srcLayout
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ptr
operator|=
name|convertFromARGB32PM
argument_list|(
name|buffer
argument_list|,
name|ptr
argument_list|,
name|l
argument_list|,
name|destLayout
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// The conversions might be passthrough and not use the buffer, in that case we are already done.
if|if
condition|(
name|srcData
operator|!=
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|ptr
condition|)
name|store
argument_list|(
name|srcData
argument_list|,
name|ptr
argument_list|,
name|x
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|x
operator|+=
name|l
expr_stmt|;
block|}
name|srcData
operator|+=
name|data
operator|->
name|bytes_per_line
expr_stmt|;
block|}
name|data
operator|->
name|format
operator|=
name|dst_format
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|convert_passthrough
specifier|static
name|void
name|convert_passthrough
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|width
operator|==
name|dest
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|height
operator|==
name|dest
operator|->
name|height
argument_list|)
expr_stmt|;
specifier|const
name|int
name|src_pad
init|=
operator|(
name|src
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|src
operator|->
name|width
decl_stmt|;
specifier|const
name|int
name|dest_pad
init|=
operator|(
name|dest
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|dest
operator|->
name|width
decl_stmt|;
specifier|const
name|quint32
modifier|*
name|src_data
init|=
operator|(
name|quint32
operator|*
operator|)
name|src
operator|->
name|data
decl_stmt|;
name|quint32
modifier|*
name|dest_data
init|=
operator|(
name|quint32
operator|*
operator|)
name|dest
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|quint32
modifier|*
name|end
init|=
name|src_data
operator|+
name|src
operator|->
name|width
decl_stmt|;
while|while
condition|(
name|src_data
operator|<
name|end
condition|)
block|{
operator|*
name|dest_data
operator|=
operator|*
name|src_data
expr_stmt|;
operator|++
name|src_data
expr_stmt|;
operator|++
name|dest_data
expr_stmt|;
block|}
name|src_data
operator|+=
name|src_pad
expr_stmt|;
name|dest_data
operator|+=
name|dest_pad
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|QImage
operator|::
name|Format
name|Format
parameter_list|>
DECL|function|convert_passthrough_inplace
specifier|static
name|bool
name|convert_passthrough_inplace
parameter_list|(
name|QImageData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|data
operator|->
name|format
operator|=
name|Format
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|convert_ARGB_to_ARGB_PM
specifier|static
name|void
name|convert_ARGB_to_ARGB_PM
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32
operator|||
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGBA8888
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|width
operator|==
name|dest
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|height
operator|==
name|dest
operator|->
name|height
argument_list|)
expr_stmt|;
specifier|const
name|int
name|src_pad
init|=
operator|(
name|src
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|src
operator|->
name|width
decl_stmt|;
specifier|const
name|int
name|dest_pad
init|=
operator|(
name|dest
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|dest
operator|->
name|width
decl_stmt|;
specifier|const
name|QRgb
modifier|*
name|src_data
init|=
operator|(
name|QRgb
operator|*
operator|)
name|src
operator|->
name|data
decl_stmt|;
name|QRgb
modifier|*
name|dest_data
init|=
operator|(
name|QRgb
operator|*
operator|)
name|dest
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRgb
modifier|*
name|end
init|=
name|src_data
operator|+
name|src
operator|->
name|width
decl_stmt|;
while|while
condition|(
name|src_data
operator|<
name|end
condition|)
block|{
operator|*
name|dest_data
operator|=
name|qPremultiply
argument_list|(
operator|*
name|src_data
argument_list|)
expr_stmt|;
operator|++
name|src_data
expr_stmt|;
operator|++
name|dest_data
expr_stmt|;
block|}
name|src_data
operator|+=
name|src_pad
expr_stmt|;
name|dest_data
operator|+=
name|dest_pad
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_convert_rgb888_to_rgb32
name|Q_GUI_EXPORT
name|void
name|QT_FASTCALL
name|qt_convert_rgb888_to_rgb32
parameter_list|(
name|quint32
modifier|*
name|dest_data
parameter_list|,
specifier|const
name|uchar
modifier|*
name|src_data
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|int
name|pixel
init|=
literal|0
decl_stmt|;
comment|// prolog: align input to 32bit
while|while
condition|(
operator|(
name|quintptr
argument_list|(
name|src_data
argument_list|)
operator|&
literal|0x3
operator|)
operator|&&
name|pixel
operator|<
name|len
condition|)
block|{
operator|*
name|dest_data
operator|=
literal|0xff000000
operator||
operator|(
name|src_data
index|[
literal|0
index|]
operator|<<
literal|16
operator|)
operator||
operator|(
name|src_data
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator||
operator|(
name|src_data
index|[
literal|2
index|]
operator|)
expr_stmt|;
name|src_data
operator|+=
literal|3
expr_stmt|;
operator|++
name|dest_data
expr_stmt|;
operator|++
name|pixel
expr_stmt|;
block|}
comment|// Handle 4 pixels at a time 12 bytes input to 16 bytes output.
for|for
control|(
init|;
name|pixel
operator|+
literal|3
operator|<
name|len
condition|;
name|pixel
operator|+=
literal|4
control|)
block|{
specifier|const
name|quint32
modifier|*
name|src_packed
init|=
operator|(
name|quint32
operator|*
operator|)
name|src_data
decl_stmt|;
specifier|const
name|quint32
name|src1
init|=
name|qFromBigEndian
argument_list|(
name|src_packed
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|const
name|quint32
name|src2
init|=
name|qFromBigEndian
argument_list|(
name|src_packed
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
specifier|const
name|quint32
name|src3
init|=
name|qFromBigEndian
argument_list|(
name|src_packed
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|dest_data
index|[
literal|0
index|]
operator|=
literal|0xff000000
operator||
operator|(
name|src1
operator|>>
literal|8
operator|)
expr_stmt|;
name|dest_data
index|[
literal|1
index|]
operator|=
literal|0xff000000
operator||
operator|(
name|src1
operator|<<
literal|16
operator|)
operator||
operator|(
name|src2
operator|>>
literal|16
operator|)
expr_stmt|;
name|dest_data
index|[
literal|2
index|]
operator|=
literal|0xff000000
operator||
operator|(
name|src2
operator|<<
literal|8
operator|)
operator||
operator|(
name|src3
operator|>>
literal|24
operator|)
expr_stmt|;
name|dest_data
index|[
literal|3
index|]
operator|=
literal|0xff000000
operator||
name|src3
expr_stmt|;
name|src_data
operator|+=
literal|12
expr_stmt|;
name|dest_data
operator|+=
literal|4
expr_stmt|;
block|}
comment|// epilog: handle left over pixels
for|for
control|(
init|;
name|pixel
operator|<
name|len
condition|;
operator|++
name|pixel
control|)
block|{
operator|*
name|dest_data
operator|=
literal|0xff000000
operator||
operator|(
name|src_data
index|[
literal|0
index|]
operator|<<
literal|16
operator|)
operator||
operator|(
name|src_data
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator||
operator|(
name|src_data
index|[
literal|2
index|]
operator|)
expr_stmt|;
name|src_data
operator|+=
literal|3
expr_stmt|;
operator|++
name|dest_data
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_convert_rgb888_to_rgbx8888
name|Q_GUI_EXPORT
name|void
name|QT_FASTCALL
name|qt_convert_rgb888_to_rgbx8888
parameter_list|(
name|quint32
modifier|*
name|dest_data
parameter_list|,
specifier|const
name|uchar
modifier|*
name|src_data
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|int
name|pixel
init|=
literal|0
decl_stmt|;
comment|// prolog: align input to 32bit
while|while
condition|(
operator|(
name|quintptr
argument_list|(
name|src_data
argument_list|)
operator|&
literal|0x3
operator|)
operator|&&
name|pixel
operator|<
name|len
condition|)
block|{
operator|*
name|dest_data
operator|=
name|ARGB2RGBA
argument_list|(
literal|0xff000000
operator||
operator|(
name|src_data
index|[
literal|0
index|]
operator|<<
literal|16
operator|)
operator||
operator|(
name|src_data
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator||
operator|(
name|src_data
index|[
literal|2
index|]
operator|)
argument_list|)
expr_stmt|;
name|src_data
operator|+=
literal|3
expr_stmt|;
operator|++
name|dest_data
expr_stmt|;
operator|++
name|pixel
expr_stmt|;
block|}
comment|// Handle 4 pixels at a time 12 bytes input to 16 bytes output.
for|for
control|(
init|;
name|pixel
operator|+
literal|3
operator|<
name|len
condition|;
name|pixel
operator|+=
literal|4
control|)
block|{
specifier|const
name|quint32
modifier|*
name|src_packed
init|=
operator|(
name|quint32
operator|*
operator|)
name|src_data
decl_stmt|;
specifier|const
name|quint32
name|src1
init|=
name|src_packed
index|[
literal|0
index|]
decl_stmt|;
specifier|const
name|quint32
name|src2
init|=
name|src_packed
index|[
literal|1
index|]
decl_stmt|;
specifier|const
name|quint32
name|src3
init|=
name|src_packed
index|[
literal|2
index|]
decl_stmt|;
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_LITTLE_ENDIAN
name|dest_data
index|[
literal|0
index|]
operator|=
literal|0xff000000
operator||
name|src1
expr_stmt|;
name|dest_data
index|[
literal|1
index|]
operator|=
literal|0xff000000
operator||
operator|(
name|src1
operator|>>
literal|24
operator|)
operator||
operator|(
name|src2
operator|<<
literal|8
operator|)
expr_stmt|;
name|dest_data
index|[
literal|2
index|]
operator|=
literal|0xff000000
operator||
operator|(
name|src2
operator|>>
literal|16
operator|)
operator||
operator|(
name|src3
operator|<<
literal|16
operator|)
expr_stmt|;
name|dest_data
index|[
literal|3
index|]
operator|=
literal|0xff000000
operator||
operator|(
name|src3
operator|>>
literal|8
operator|)
expr_stmt|;
else|#
directive|else
name|dest_data
index|[
literal|0
index|]
operator|=
literal|0xff
operator||
name|src1
expr_stmt|;
name|dest_data
index|[
literal|1
index|]
operator|=
literal|0xff
operator||
operator|(
name|src1
operator|<<
literal|24
operator|)
operator||
operator|(
name|src2
operator|>>
literal|8
operator|)
expr_stmt|;
name|dest_data
index|[
literal|2
index|]
operator|=
literal|0xff
operator||
operator|(
name|src2
operator|<<
literal|16
operator|)
operator||
operator|(
name|src3
operator|>>
literal|16
operator|)
expr_stmt|;
name|dest_data
index|[
literal|3
index|]
operator|=
literal|0xff
operator||
operator|(
name|src3
operator|<<
literal|8
operator|)
expr_stmt|;
endif|#
directive|endif
name|src_data
operator|+=
literal|12
expr_stmt|;
name|dest_data
operator|+=
literal|4
expr_stmt|;
block|}
comment|// epilog: handle left over pixels
for|for
control|(
init|;
name|pixel
operator|<
name|len
condition|;
operator|++
name|pixel
control|)
block|{
operator|*
name|dest_data
operator|=
name|ARGB2RGBA
argument_list|(
literal|0xff000000
operator||
operator|(
name|src_data
index|[
literal|0
index|]
operator|<<
literal|16
operator|)
operator||
operator|(
name|src_data
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator||
operator|(
name|src_data
index|[
literal|2
index|]
operator|)
argument_list|)
expr_stmt|;
name|src_data
operator|+=
literal|3
expr_stmt|;
operator|++
name|dest_data
expr_stmt|;
block|}
block|}
end_function
begin_typedef
DECL|typedef|Rgb888ToRgbConverter
typedef|typedef
name|void
function_decl|(
name|QT_FASTCALL
modifier|*
name|Rgb888ToRgbConverter
function_decl|)
parameter_list|(
name|quint32
modifier|*
name|dst
parameter_list|,
specifier|const
name|uchar
modifier|*
name|src
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
end_typedef
begin_function
template|template
parameter_list|<
name|bool
name|rgbx
parameter_list|>
DECL|function|convert_RGB888_to_RGB
specifier|static
name|void
name|convert_RGB888_to_RGB
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB888
argument_list|)
expr_stmt|;
if|if
condition|(
name|rgbx
condition|)
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGBX8888
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGBA8888
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
argument_list|)
expr_stmt|;
else|else
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB32
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|width
operator|==
name|dest
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|height
operator|==
name|dest
operator|->
name|height
argument_list|)
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|src_data
init|=
operator|(
name|uchar
operator|*
operator|)
name|src
operator|->
name|data
decl_stmt|;
name|quint32
modifier|*
name|dest_data
init|=
operator|(
name|quint32
operator|*
operator|)
name|dest
operator|->
name|data
decl_stmt|;
name|Rgb888ToRgbConverter
name|line_converter
init|=
name|rgbx
condition|?
name|qt_convert_rgb888_to_rgbx8888
else|:
name|qt_convert_rgb888_to_rgb32
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
name|line_converter
argument_list|(
name|dest_data
argument_list|,
name|src_data
argument_list|,
name|src
operator|->
name|width
argument_list|)
expr_stmt|;
name|src_data
operator|+=
name|src
operator|->
name|bytes_per_line
expr_stmt|;
name|dest_data
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dest_data
operator|+
name|dest
operator|->
name|bytes_per_line
operator|)
expr_stmt|;
block|}
block|}
end_function
begin_function_decl
specifier|extern
name|bool
name|convert_ARGB_to_ARGB_PM_inplace_sse2
parameter_list|(
name|QImageData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|convert_ARGB_to_RGBx
specifier|static
name|void
name|convert_ARGB_to_RGBx
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGBX8888
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|width
operator|==
name|dest
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|height
operator|==
name|dest
operator|->
name|height
argument_list|)
expr_stmt|;
specifier|const
name|int
name|src_pad
init|=
operator|(
name|src
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|src
operator|->
name|width
decl_stmt|;
specifier|const
name|int
name|dest_pad
init|=
operator|(
name|dest
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|dest
operator|->
name|width
decl_stmt|;
specifier|const
name|quint32
modifier|*
name|src_data
init|=
operator|(
name|quint32
operator|*
operator|)
name|src
operator|->
name|data
decl_stmt|;
name|quint32
modifier|*
name|dest_data
init|=
operator|(
name|quint32
operator|*
operator|)
name|dest
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|quint32
modifier|*
name|end
init|=
name|src_data
operator|+
name|src
operator|->
name|width
decl_stmt|;
while|while
condition|(
name|src_data
operator|<
name|end
condition|)
block|{
operator|*
name|dest_data
operator|=
name|ARGB2RGBA
argument_list|(
literal|0xff000000
operator||
operator|*
name|src_data
argument_list|)
expr_stmt|;
operator|++
name|src_data
expr_stmt|;
operator|++
name|dest_data
expr_stmt|;
block|}
name|src_data
operator|+=
name|src_pad
expr_stmt|;
name|dest_data
operator|+=
name|dest_pad
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|convert_ARGB_to_RGBA
specifier|static
name|void
name|convert_ARGB_to_RGBA
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32
operator|||
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGBA8888
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|width
operator|==
name|dest
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|height
operator|==
name|dest
operator|->
name|height
argument_list|)
expr_stmt|;
specifier|const
name|int
name|src_pad
init|=
operator|(
name|src
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|src
operator|->
name|width
decl_stmt|;
specifier|const
name|int
name|dest_pad
init|=
operator|(
name|dest
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|dest
operator|->
name|width
decl_stmt|;
specifier|const
name|quint32
modifier|*
name|src_data
init|=
operator|(
name|quint32
operator|*
operator|)
name|src
operator|->
name|data
decl_stmt|;
name|quint32
modifier|*
name|dest_data
init|=
operator|(
name|quint32
operator|*
operator|)
name|dest
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|quint32
modifier|*
name|end
init|=
name|src_data
operator|+
name|src
operator|->
name|width
decl_stmt|;
while|while
condition|(
name|src_data
operator|<
name|end
condition|)
block|{
operator|*
name|dest_data
operator|=
name|ARGB2RGBA
argument_list|(
operator|*
name|src_data
argument_list|)
expr_stmt|;
operator|++
name|src_data
expr_stmt|;
operator|++
name|dest_data
expr_stmt|;
block|}
name|src_data
operator|+=
name|src_pad
expr_stmt|;
name|dest_data
operator|+=
name|dest_pad
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|convert_ARGB_to_RGBA_inplace
specifier|static
name|bool
name|convert_ARGB_to_RGBA_inplace
parameter_list|(
name|QImageData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32
operator|||
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
specifier|const
name|int
name|pad
init|=
operator|(
name|data
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|data
operator|->
name|width
decl_stmt|;
name|quint32
modifier|*
name|rgb_data
init|=
operator|(
name|quint32
operator|*
operator|)
name|data
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|quint32
modifier|*
name|end
init|=
name|rgb_data
operator|+
name|data
operator|->
name|width
decl_stmt|;
while|while
condition|(
name|rgb_data
operator|<
name|end
condition|)
block|{
operator|*
name|rgb_data
operator|=
name|ARGB2RGBA
argument_list|(
operator|*
name|rgb_data
argument_list|)
expr_stmt|;
operator|++
name|rgb_data
expr_stmt|;
block|}
name|rgb_data
operator|+=
name|pad
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32
condition|)
name|data
operator|->
name|format
operator|=
name|QImage
operator|::
name|Format_RGBA8888
expr_stmt|;
else|else
name|data
operator|->
name|format
operator|=
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|convert_RGBA_to_ARGB
specifier|static
name|void
name|convert_RGBA_to_ARGB
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGBX8888
operator|||
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGBA8888
operator|||
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|width
operator|==
name|dest
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|height
operator|==
name|dest
operator|->
name|height
argument_list|)
expr_stmt|;
specifier|const
name|int
name|src_pad
init|=
operator|(
name|src
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|src
operator|->
name|width
decl_stmt|;
specifier|const
name|int
name|dest_pad
init|=
operator|(
name|dest
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|dest
operator|->
name|width
decl_stmt|;
specifier|const
name|quint32
modifier|*
name|src_data
init|=
operator|(
name|quint32
operator|*
operator|)
name|src
operator|->
name|data
decl_stmt|;
name|quint32
modifier|*
name|dest_data
init|=
operator|(
name|quint32
operator|*
operator|)
name|dest
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|quint32
modifier|*
name|end
init|=
name|src_data
operator|+
name|src
operator|->
name|width
decl_stmt|;
while|while
condition|(
name|src_data
operator|<
name|end
condition|)
block|{
operator|*
name|dest_data
operator|=
name|RGBA2ARGB
argument_list|(
operator|*
name|src_data
argument_list|)
expr_stmt|;
operator|++
name|src_data
expr_stmt|;
operator|++
name|dest_data
expr_stmt|;
block|}
name|src_data
operator|+=
name|src_pad
expr_stmt|;
name|dest_data
operator|+=
name|dest_pad
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|QImage
operator|::
name|Format
name|DestFormat
parameter_list|>
DECL|function|convert_RGBA_to_ARGB_inplace
specifier|static
name|bool
name|convert_RGBA_to_ARGB_inplace
parameter_list|(
name|QImageData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGBX8888
operator|||
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGBA8888
operator|||
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
argument_list|)
expr_stmt|;
specifier|const
name|int
name|pad
init|=
operator|(
name|data
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|data
operator|->
name|width
decl_stmt|;
name|QRgb
modifier|*
name|rgb_data
init|=
operator|(
name|QRgb
operator|*
operator|)
name|data
operator|->
name|data
decl_stmt|;
name|Q_CONSTEXPR
name|uint
name|mask
init|=
operator|(
name|DestFormat
operator|==
name|QImage
operator|::
name|Format_RGB32
operator|)
condition|?
literal|0xff000000
else|:
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRgb
modifier|*
name|end
init|=
name|rgb_data
operator|+
name|data
operator|->
name|width
decl_stmt|;
while|while
condition|(
name|rgb_data
operator|<
name|end
condition|)
block|{
operator|*
name|rgb_data
operator|=
name|mask
operator||
name|RGBA2ARGB
argument_list|(
operator|*
name|rgb_data
argument_list|)
expr_stmt|;
operator|++
name|rgb_data
expr_stmt|;
block|}
name|rgb_data
operator|+=
name|pad
expr_stmt|;
block|}
name|data
operator|->
name|format
operator|=
name|DestFormat
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|QtPixelOrder
name|PixelOrder
parameter_list|>
DECL|function|convert_RGB_to_RGB30
specifier|static
name|void
name|convert_RGB_to_RGB30
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB32
operator|||
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_BGR30
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_A2BGR30_Premultiplied
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB30
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_A2RGB30_Premultiplied
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|width
operator|==
name|dest
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|height
operator|==
name|dest
operator|->
name|height
argument_list|)
expr_stmt|;
specifier|const
name|int
name|src_pad
init|=
operator|(
name|src
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|src
operator|->
name|width
decl_stmt|;
specifier|const
name|int
name|dest_pad
init|=
operator|(
name|dest
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|dest
operator|->
name|width
decl_stmt|;
specifier|const
name|quint32
modifier|*
name|src_data
init|=
operator|(
name|quint32
operator|*
operator|)
name|src
operator|->
name|data
decl_stmt|;
name|quint32
modifier|*
name|dest_data
init|=
operator|(
name|quint32
operator|*
operator|)
name|dest
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|quint32
modifier|*
name|end
init|=
name|src_data
operator|+
name|src
operator|->
name|width
decl_stmt|;
while|while
condition|(
name|src_data
operator|<
name|end
condition|)
block|{
operator|*
name|dest_data
operator|=
name|qConvertRgb32ToRgb30
argument_list|<
name|PixelOrder
argument_list|>
argument_list|(
operator|*
name|src_data
argument_list|)
expr_stmt|;
operator|++
name|src_data
expr_stmt|;
operator|++
name|dest_data
expr_stmt|;
block|}
name|src_data
operator|+=
name|src_pad
expr_stmt|;
name|dest_data
operator|+=
name|dest_pad
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|QtPixelOrder
name|PixelOrder
parameter_list|>
DECL|function|convert_RGB30_to_RGB
specifier|static
name|void
name|convert_RGB30_to_RGB
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_BGR30
operator|||
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB30
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB32
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|width
operator|==
name|dest
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|height
operator|==
name|dest
operator|->
name|height
argument_list|)
expr_stmt|;
specifier|const
name|int
name|src_pad
init|=
operator|(
name|src
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|src
operator|->
name|width
decl_stmt|;
specifier|const
name|int
name|dest_pad
init|=
operator|(
name|dest
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|dest
operator|->
name|width
decl_stmt|;
specifier|const
name|quint32
modifier|*
name|src_data
init|=
operator|(
name|quint32
operator|*
operator|)
name|src
operator|->
name|data
decl_stmt|;
name|quint32
modifier|*
name|dest_data
init|=
operator|(
name|quint32
operator|*
operator|)
name|dest
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|quint32
modifier|*
name|end
init|=
name|src_data
operator|+
name|src
operator|->
name|width
decl_stmt|;
while|while
condition|(
name|src_data
operator|<
name|end
condition|)
block|{
operator|*
name|dest_data
operator|=
name|qConvertA2rgb30ToArgb32
argument_list|<
name|PixelOrder
argument_list|>
argument_list|(
operator|*
name|src_data
argument_list|)
expr_stmt|;
operator|++
name|src_data
expr_stmt|;
operator|++
name|dest_data
expr_stmt|;
block|}
name|src_data
operator|+=
name|src_pad
expr_stmt|;
name|dest_data
operator|+=
name|dest_pad
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qUnpremultiplyRgb30
specifier|static
specifier|inline
name|uint
name|qUnpremultiplyRgb30
parameter_list|(
name|uint
name|rgb30
parameter_list|)
block|{
specifier|const
name|uint
name|a
init|=
name|rgb30
operator|>>
literal|30
decl_stmt|;
switch|switch
condition|(
name|a
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|0
return|;
case|case
literal|1
case|:
block|{
name|uint
name|rgb
init|=
name|rgb30
operator|&
literal|0x3fffffff
decl_stmt|;
name|rgb
operator|*=
literal|3
expr_stmt|;
return|return
operator|(
name|a
operator|<<
literal|30
operator|)
operator||
name|rgb
return|;
block|}
case|case
literal|2
case|:
block|{
name|uint
name|rgb
init|=
name|rgb30
operator|&
literal|0x3fffffff
decl_stmt|;
name|rgb
operator|+=
name|rgb
operator|>>
literal|1
expr_stmt|;
return|return
operator|(
name|a
operator|<<
literal|30
operator|)
operator||
name|rgb
return|;
block|}
case|case
literal|3
case|:
return|return
name|rgb30
return|;
block|}
name|Q_UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|convert_A2RGB30_PM_to_RGB30
specifier|static
name|void
name|convert_A2RGB30_PM_to_RGB30
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_A2RGB30_Premultiplied
operator|||
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_A2BGR30_Premultiplied
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB30
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_BGR30
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|width
operator|==
name|dest
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|height
operator|==
name|dest
operator|->
name|height
argument_list|)
expr_stmt|;
specifier|const
name|int
name|src_pad
init|=
operator|(
name|src
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|src
operator|->
name|width
decl_stmt|;
specifier|const
name|int
name|dest_pad
init|=
operator|(
name|dest
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|dest
operator|->
name|width
decl_stmt|;
specifier|const
name|quint32
modifier|*
name|src_data
init|=
operator|(
name|quint32
operator|*
operator|)
name|src
operator|->
name|data
decl_stmt|;
name|quint32
modifier|*
name|dest_data
init|=
operator|(
name|quint32
operator|*
operator|)
name|dest
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|quint32
modifier|*
name|end
init|=
name|src_data
operator|+
name|src
operator|->
name|width
decl_stmt|;
while|while
condition|(
name|src_data
operator|<
name|end
condition|)
block|{
operator|*
name|dest_data
operator|=
literal|0xc0000000
operator||
name|qUnpremultiplyRgb30
argument_list|(
operator|*
name|src_data
argument_list|)
expr_stmt|;
operator|++
name|src_data
expr_stmt|;
operator|++
name|dest_data
expr_stmt|;
block|}
name|src_data
operator|+=
name|src_pad
expr_stmt|;
name|dest_data
operator|+=
name|dest_pad
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|convert_A2RGB30_PM_to_RGB30_inplace
specifier|static
name|bool
name|convert_A2RGB30_PM_to_RGB30_inplace
parameter_list|(
name|QImageData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_A2RGB30_Premultiplied
operator|||
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_A2BGR30_Premultiplied
argument_list|)
expr_stmt|;
specifier|const
name|int
name|pad
init|=
operator|(
name|data
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|data
operator|->
name|width
decl_stmt|;
name|uint
modifier|*
name|rgb_data
init|=
operator|(
name|uint
operator|*
operator|)
name|data
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|uint
modifier|*
name|end
init|=
name|rgb_data
operator|+
name|data
operator|->
name|width
decl_stmt|;
while|while
condition|(
name|rgb_data
operator|<
name|end
condition|)
block|{
operator|*
name|rgb_data
operator|=
literal|0xc0000000
operator||
name|qUnpremultiplyRgb30
argument_list|(
operator|*
name|rgb_data
argument_list|)
expr_stmt|;
operator|++
name|rgb_data
expr_stmt|;
block|}
name|rgb_data
operator|+=
name|pad
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_A2RGB30_Premultiplied
condition|)
name|data
operator|->
name|format
operator|=
name|QImage
operator|::
name|Format_RGB30
expr_stmt|;
else|else
name|data
operator|->
name|format
operator|=
name|QImage
operator|::
name|Format_BGR30
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|convert_BGR30_to_RGB30
specifier|static
name|void
name|convert_BGR30_to_RGB30
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB30
operator|||
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_BGR30
operator|||
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_A2RGB30_Premultiplied
operator|||
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_A2BGR30_Premultiplied
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB30
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_BGR30
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_A2RGB30_Premultiplied
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_A2BGR30_Premultiplied
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|width
operator|==
name|dest
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|height
operator|==
name|dest
operator|->
name|height
argument_list|)
expr_stmt|;
specifier|const
name|int
name|src_pad
init|=
operator|(
name|src
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|src
operator|->
name|width
decl_stmt|;
specifier|const
name|int
name|dest_pad
init|=
operator|(
name|dest
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|dest
operator|->
name|width
decl_stmt|;
specifier|const
name|quint32
modifier|*
name|src_data
init|=
operator|(
name|quint32
operator|*
operator|)
name|src
operator|->
name|data
decl_stmt|;
name|quint32
modifier|*
name|dest_data
init|=
operator|(
name|quint32
operator|*
operator|)
name|dest
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|quint32
modifier|*
name|end
init|=
name|src_data
operator|+
name|src
operator|->
name|width
decl_stmt|;
while|while
condition|(
name|src_data
operator|<
name|end
condition|)
block|{
operator|*
name|dest_data
operator|=
name|qRgbSwapRgb30
argument_list|(
operator|*
name|src_data
argument_list|)
expr_stmt|;
operator|++
name|src_data
expr_stmt|;
operator|++
name|dest_data
expr_stmt|;
block|}
name|src_data
operator|+=
name|src_pad
expr_stmt|;
name|dest_data
operator|+=
name|dest_pad
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|convert_BGR30_to_RGB30_inplace
specifier|static
name|bool
name|convert_BGR30_to_RGB30_inplace
parameter_list|(
name|QImageData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB30
operator|||
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_BGR30
operator|||
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_A2RGB30_Premultiplied
operator|||
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_A2BGR30_Premultiplied
argument_list|)
expr_stmt|;
specifier|const
name|int
name|pad
init|=
operator|(
name|data
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|data
operator|->
name|width
decl_stmt|;
name|uint
modifier|*
name|rgb_data
init|=
operator|(
name|uint
operator|*
operator|)
name|data
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|uint
modifier|*
name|end
init|=
name|rgb_data
operator|+
name|data
operator|->
name|width
decl_stmt|;
while|while
condition|(
name|rgb_data
operator|<
name|end
condition|)
block|{
operator|*
name|rgb_data
operator|=
name|qRgbSwapRgb30
argument_list|(
operator|*
name|rgb_data
argument_list|)
expr_stmt|;
operator|++
name|rgb_data
expr_stmt|;
block|}
name|rgb_data
operator|+=
name|pad
expr_stmt|;
block|}
switch|switch
condition|(
name|data
operator|->
name|format
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_BGR30
case|:
name|data
operator|->
name|format
operator|=
name|QImage
operator|::
name|Format_RGB30
expr_stmt|;
break|break;
case|case
name|QImage
operator|::
name|Format_A2BGR30_Premultiplied
case|:
name|data
operator|->
name|format
operator|=
name|QImage
operator|::
name|Format_A2RGB30_Premultiplied
expr_stmt|;
break|break;
case|case
name|QImage
operator|::
name|Format_RGB30
case|:
name|data
operator|->
name|format
operator|=
name|QImage
operator|::
name|Format_BGR30
expr_stmt|;
break|break;
case|case
name|QImage
operator|::
name|Format_A2RGB30_Premultiplied
case|:
name|data
operator|->
name|format
operator|=
name|QImage
operator|::
name|Format_A2BGR30_Premultiplied
expr_stmt|;
break|break;
default|default:
name|Q_UNREACHABLE
argument_list|()
expr_stmt|;
name|data
operator|->
name|format
operator|=
name|QImage
operator|::
name|Format_Invalid
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|convert_indexed8_to_ARGB_PM_inplace
specifier|static
name|bool
name|convert_indexed8_to_ARGB_PM_inplace
parameter_list|(
name|QImageData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
specifier|const
name|int
name|depth
init|=
literal|32
decl_stmt|;
specifier|const
name|int
name|dst_bytes_per_line
init|=
operator|(
operator|(
name|data
operator|->
name|width
operator|*
name|depth
operator|+
literal|31
operator|)
operator|>>
literal|5
operator|)
operator|<<
literal|2
decl_stmt|;
specifier|const
name|int
name|nbytes
init|=
name|dst_bytes_per_line
operator|*
name|data
operator|->
name|height
decl_stmt|;
name|uchar
modifier|*
specifier|const
name|newData
init|=
operator|(
name|uchar
operator|*
operator|)
name|realloc
argument_list|(
name|data
operator|->
name|data
argument_list|,
name|nbytes
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newData
condition|)
return|return
literal|false
return|;
name|data
operator|->
name|data
operator|=
name|newData
expr_stmt|;
comment|// start converting from the end because the end image is bigger than the source
name|uchar
modifier|*
name|src_data
init|=
name|newData
operator|+
name|data
operator|->
name|nbytes
decl_stmt|;
comment|// end of src
name|quint32
modifier|*
name|dest_data
init|=
operator|(
name|quint32
operator|*
operator|)
operator|(
name|newData
operator|+
name|nbytes
operator|)
decl_stmt|;
comment|// end of dest> end of src
specifier|const
name|int
name|width
init|=
name|data
operator|->
name|width
decl_stmt|;
specifier|const
name|int
name|src_pad
init|=
name|data
operator|->
name|bytes_per_line
operator|-
name|width
decl_stmt|;
specifier|const
name|int
name|dest_pad
init|=
operator|(
name|dst_bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|width
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|colortable
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|data
operator|->
name|colortable
operator|.
name|resize
argument_list|(
literal|256
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|data
operator|->
name|colortable
index|[
name|i
index|]
operator|=
name|qRgb
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|->
name|colortable
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|data
operator|->
name|colortable
index|[
name|i
index|]
operator|=
name|qPremultiply
argument_list|(
name|data
operator|->
name|colortable
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fill the rest of the table in case src_data> colortable.size()
specifier|const
name|int
name|oldSize
init|=
name|data
operator|->
name|colortable
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|const
name|QRgb
name|lastColor
init|=
name|data
operator|->
name|colortable
operator|.
name|at
argument_list|(
name|oldSize
operator|-
literal|1
argument_list|)
decl_stmt|;
name|data
operator|->
name|colortable
operator|.
name|insert
argument_list|(
name|oldSize
argument_list|,
literal|256
operator|-
name|oldSize
argument_list|,
name|lastColor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
name|src_data
operator|-=
name|src_pad
expr_stmt|;
name|dest_data
operator|-=
name|dest_pad
expr_stmt|;
for|for
control|(
name|int
name|pixI
init|=
literal|0
init|;
name|pixI
operator|<
name|width
condition|;
operator|++
name|pixI
control|)
block|{
operator|--
name|src_data
expr_stmt|;
operator|--
name|dest_data
expr_stmt|;
operator|*
name|dest_data
operator|=
name|data
operator|->
name|colortable
operator|.
name|at
argument_list|(
operator|*
name|src_data
argument_list|)
expr_stmt|;
block|}
block|}
name|data
operator|->
name|colortable
operator|=
name|QVector
argument_list|<
name|QRgb
argument_list|>
argument_list|()
expr_stmt|;
name|data
operator|->
name|format
operator|=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
expr_stmt|;
name|data
operator|->
name|bytes_per_line
operator|=
name|dst_bytes_per_line
expr_stmt|;
name|data
operator|->
name|depth
operator|=
name|depth
expr_stmt|;
name|data
operator|->
name|nbytes
operator|=
name|nbytes
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|convert_indexed8_to_RGB_inplace
specifier|static
name|bool
name|convert_indexed8_to_RGB_inplace
parameter_list|(
name|QImageData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
specifier|const
name|int
name|depth
init|=
literal|32
decl_stmt|;
specifier|const
name|int
name|dst_bytes_per_line
init|=
operator|(
operator|(
name|data
operator|->
name|width
operator|*
name|depth
operator|+
literal|31
operator|)
operator|>>
literal|5
operator|)
operator|<<
literal|2
decl_stmt|;
specifier|const
name|int
name|nbytes
init|=
name|dst_bytes_per_line
operator|*
name|data
operator|->
name|height
decl_stmt|;
name|uchar
modifier|*
specifier|const
name|newData
init|=
operator|(
name|uchar
operator|*
operator|)
name|realloc
argument_list|(
name|data
operator|->
name|data
argument_list|,
name|nbytes
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newData
condition|)
return|return
literal|false
return|;
name|data
operator|->
name|data
operator|=
name|newData
expr_stmt|;
comment|// start converting from the end because the end image is bigger than the source
name|uchar
modifier|*
name|src_data
init|=
name|newData
operator|+
name|data
operator|->
name|nbytes
decl_stmt|;
name|quint32
modifier|*
name|dest_data
init|=
operator|(
name|quint32
operator|*
operator|)
operator|(
name|newData
operator|+
name|nbytes
operator|)
decl_stmt|;
specifier|const
name|int
name|width
init|=
name|data
operator|->
name|width
decl_stmt|;
specifier|const
name|int
name|src_pad
init|=
name|data
operator|->
name|bytes_per_line
operator|-
name|width
decl_stmt|;
specifier|const
name|int
name|dest_pad
init|=
operator|(
name|dst_bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|width
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|colortable
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|data
operator|->
name|colortable
operator|.
name|resize
argument_list|(
literal|256
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|data
operator|->
name|colortable
index|[
name|i
index|]
operator|=
name|qRgb
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Fill the rest of the table in case src_data> colortable.size()
specifier|const
name|int
name|oldSize
init|=
name|data
operator|->
name|colortable
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|const
name|QRgb
name|lastColor
init|=
name|data
operator|->
name|colortable
operator|.
name|at
argument_list|(
name|oldSize
operator|-
literal|1
argument_list|)
decl_stmt|;
name|data
operator|->
name|colortable
operator|.
name|insert
argument_list|(
name|oldSize
argument_list|,
literal|256
operator|-
name|oldSize
argument_list|,
name|lastColor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
name|src_data
operator|-=
name|src_pad
expr_stmt|;
name|dest_data
operator|-=
name|dest_pad
expr_stmt|;
for|for
control|(
name|int
name|pixI
init|=
literal|0
init|;
name|pixI
operator|<
name|width
condition|;
operator|++
name|pixI
control|)
block|{
operator|--
name|src_data
expr_stmt|;
operator|--
name|dest_data
expr_stmt|;
operator|*
name|dest_data
operator|=
operator|(
name|quint32
operator|)
name|data
operator|->
name|colortable
operator|.
name|at
argument_list|(
operator|*
name|src_data
argument_list|)
expr_stmt|;
block|}
block|}
name|data
operator|->
name|colortable
operator|=
name|QVector
argument_list|<
name|QRgb
argument_list|>
argument_list|()
expr_stmt|;
name|data
operator|->
name|format
operator|=
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
name|data
operator|->
name|bytes_per_line
operator|=
name|dst_bytes_per_line
expr_stmt|;
name|data
operator|->
name|depth
operator|=
name|depth
expr_stmt|;
name|data
operator|->
name|nbytes
operator|=
name|nbytes
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|convert_indexed8_to_RGB16_inplace
specifier|static
name|bool
name|convert_indexed8_to_RGB16_inplace
parameter_list|(
name|QImageData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
specifier|const
name|int
name|depth
init|=
literal|16
decl_stmt|;
specifier|const
name|int
name|dst_bytes_per_line
init|=
operator|(
operator|(
name|data
operator|->
name|width
operator|*
name|depth
operator|+
literal|31
operator|)
operator|>>
literal|5
operator|)
operator|<<
literal|2
decl_stmt|;
specifier|const
name|int
name|nbytes
init|=
name|dst_bytes_per_line
operator|*
name|data
operator|->
name|height
decl_stmt|;
name|uchar
modifier|*
specifier|const
name|newData
init|=
operator|(
name|uchar
operator|*
operator|)
name|realloc
argument_list|(
name|data
operator|->
name|data
argument_list|,
name|nbytes
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newData
condition|)
return|return
literal|false
return|;
name|data
operator|->
name|data
operator|=
name|newData
expr_stmt|;
comment|// start converting from the end because the end image is bigger than the source
name|uchar
modifier|*
name|src_data
init|=
name|newData
operator|+
name|data
operator|->
name|nbytes
decl_stmt|;
name|quint16
modifier|*
name|dest_data
init|=
operator|(
name|quint16
operator|*
operator|)
operator|(
name|newData
operator|+
name|nbytes
operator|)
decl_stmt|;
specifier|const
name|int
name|width
init|=
name|data
operator|->
name|width
decl_stmt|;
specifier|const
name|int
name|src_pad
init|=
name|data
operator|->
name|bytes_per_line
operator|-
name|width
decl_stmt|;
specifier|const
name|int
name|dest_pad
init|=
operator|(
name|dst_bytes_per_line
operator|>>
literal|1
operator|)
operator|-
name|width
decl_stmt|;
name|quint16
name|colorTableRGB16
index|[
literal|256
index|]
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|colortable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|colorTableRGB16
index|[
name|i
index|]
operator|=
name|qConvertRgb32To16
argument_list|(
name|qRgb
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// 1) convert the existing colors to RGB16
specifier|const
name|int
name|tableSize
init|=
name|data
operator|->
name|colortable
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableSize
condition|;
operator|++
name|i
control|)
name|colorTableRGB16
index|[
name|i
index|]
operator|=
name|qConvertRgb32To16
argument_list|(
name|data
operator|->
name|colortable
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|->
name|colortable
operator|=
name|QVector
argument_list|<
name|QRgb
argument_list|>
argument_list|()
expr_stmt|;
comment|// 2) fill the rest of the table in case src_data> colortable.size()
specifier|const
name|quint16
name|lastColor
init|=
name|colorTableRGB16
index|[
name|tableSize
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|tableSize
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|colorTableRGB16
index|[
name|i
index|]
operator|=
name|lastColor
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
name|src_data
operator|-=
name|src_pad
expr_stmt|;
name|dest_data
operator|-=
name|dest_pad
expr_stmt|;
for|for
control|(
name|int
name|pixI
init|=
literal|0
init|;
name|pixI
operator|<
name|width
condition|;
operator|++
name|pixI
control|)
block|{
operator|--
name|src_data
expr_stmt|;
operator|--
name|dest_data
expr_stmt|;
operator|*
name|dest_data
operator|=
name|colorTableRGB16
index|[
operator|*
name|src_data
index|]
expr_stmt|;
block|}
block|}
name|data
operator|->
name|format
operator|=
name|QImage
operator|::
name|Format_RGB16
expr_stmt|;
name|data
operator|->
name|bytes_per_line
operator|=
name|dst_bytes_per_line
expr_stmt|;
name|data
operator|->
name|depth
operator|=
name|depth
expr_stmt|;
name|data
operator|->
name|nbytes
operator|=
name|nbytes
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|convert_RGB_to_RGB16_inplace
specifier|static
name|bool
name|convert_RGB_to_RGB16_inplace
parameter_list|(
name|QImageData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
specifier|const
name|int
name|depth
init|=
literal|16
decl_stmt|;
specifier|const
name|int
name|dst_bytes_per_line
init|=
operator|(
operator|(
name|data
operator|->
name|width
operator|*
name|depth
operator|+
literal|31
operator|)
operator|>>
literal|5
operator|)
operator|<<
literal|2
decl_stmt|;
specifier|const
name|int
name|src_bytes_per_line
init|=
name|data
operator|->
name|bytes_per_line
decl_stmt|;
name|quint32
modifier|*
name|src_data
init|=
operator|(
name|quint32
operator|*
operator|)
name|data
operator|->
name|data
decl_stmt|;
name|quint16
modifier|*
name|dst_data
init|=
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|data
operator|->
name|width
condition|;
operator|++
name|j
control|)
name|dst_data
index|[
name|j
index|]
operator|=
name|qConvertRgb32To16
argument_list|(
name|src_data
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|src_data
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
name|char
operator|*
operator|)
name|src_data
operator|)
operator|+
name|src_bytes_per_line
operator|)
expr_stmt|;
name|dst_data
operator|=
operator|(
name|quint16
operator|*
operator|)
operator|(
operator|(
operator|(
name|char
operator|*
operator|)
name|dst_data
operator|)
operator|+
name|dst_bytes_per_line
operator|)
expr_stmt|;
block|}
name|data
operator|->
name|format
operator|=
name|QImage
operator|::
name|Format_RGB16
expr_stmt|;
name|data
operator|->
name|bytes_per_line
operator|=
name|dst_bytes_per_line
expr_stmt|;
name|data
operator|->
name|depth
operator|=
name|depth
expr_stmt|;
name|data
operator|->
name|nbytes
operator|=
name|dst_bytes_per_line
operator|*
name|data
operator|->
name|height
expr_stmt|;
name|uchar
modifier|*
specifier|const
name|newData
init|=
operator|(
name|uchar
operator|*
operator|)
name|realloc
argument_list|(
name|data
operator|->
name|data
argument_list|,
name|data
operator|->
name|nbytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|newData
condition|)
block|{
name|data
operator|->
name|data
operator|=
name|newData
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|convert_ARGB_PM_to_ARGB
specifier|static
name|void
name|convert_ARGB_PM_to_ARGB
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
operator|||
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGBA8888
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|width
operator|==
name|dest
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|height
operator|==
name|dest
operator|->
name|height
argument_list|)
expr_stmt|;
specifier|const
name|int
name|src_pad
init|=
operator|(
name|src
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|src
operator|->
name|width
decl_stmt|;
specifier|const
name|int
name|dest_pad
init|=
operator|(
name|dest
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|dest
operator|->
name|width
decl_stmt|;
specifier|const
name|QRgb
modifier|*
name|src_data
init|=
operator|(
name|QRgb
operator|*
operator|)
name|src
operator|->
name|data
decl_stmt|;
name|QRgb
modifier|*
name|dest_data
init|=
operator|(
name|QRgb
operator|*
operator|)
name|dest
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRgb
modifier|*
name|end
init|=
name|src_data
operator|+
name|src
operator|->
name|width
decl_stmt|;
while|while
condition|(
name|src_data
operator|<
name|end
condition|)
block|{
operator|*
name|dest_data
operator|=
name|qUnpremultiply
argument_list|(
operator|*
name|src_data
argument_list|)
expr_stmt|;
operator|++
name|src_data
expr_stmt|;
operator|++
name|dest_data
expr_stmt|;
block|}
name|src_data
operator|+=
name|src_pad
expr_stmt|;
name|dest_data
operator|+=
name|dest_pad
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|convert_RGBA_to_RGB
specifier|static
name|void
name|convert_RGBA_to_RGB
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGBA8888
operator|||
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGBX8888
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|width
operator|==
name|dest
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|height
operator|==
name|dest
operator|->
name|height
argument_list|)
expr_stmt|;
specifier|const
name|int
name|src_pad
init|=
operator|(
name|src
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|src
operator|->
name|width
decl_stmt|;
specifier|const
name|int
name|dest_pad
init|=
operator|(
name|dest
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|dest
operator|->
name|width
decl_stmt|;
specifier|const
name|uint
modifier|*
name|src_data
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|src
operator|->
name|data
decl_stmt|;
name|uint
modifier|*
name|dest_data
init|=
operator|(
name|uint
operator|*
operator|)
name|dest
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|uint
modifier|*
name|end
init|=
name|src_data
operator|+
name|src
operator|->
name|width
decl_stmt|;
while|while
condition|(
name|src_data
operator|<
name|end
condition|)
block|{
operator|*
name|dest_data
operator|=
name|RGBA2ARGB
argument_list|(
operator|*
name|src_data
argument_list|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|src_data
expr_stmt|;
operator|++
name|dest_data
expr_stmt|;
block|}
name|src_data
operator|+=
name|src_pad
expr_stmt|;
name|dest_data
operator|+=
name|dest_pad
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|swap_bit_order
specifier|static
name|void
name|swap_bit_order
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Mono
operator|||
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_MonoLSB
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Mono
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_MonoLSB
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|width
operator|==
name|dest
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|height
operator|==
name|dest
operator|->
name|height
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|nbytes
operator|==
name|dest
operator|->
name|nbytes
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|bytes_per_line
operator|==
name|dest
operator|->
name|bytes_per_line
argument_list|)
expr_stmt|;
name|dest
operator|->
name|colortable
operator|=
name|src
operator|->
name|colortable
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|src_data
init|=
name|src
operator|->
name|data
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|end
init|=
name|src
operator|->
name|data
operator|+
name|src
operator|->
name|nbytes
decl_stmt|;
name|uchar
modifier|*
name|dest_data
init|=
name|dest
operator|->
name|data
decl_stmt|;
while|while
condition|(
name|src_data
operator|<
name|end
condition|)
block|{
operator|*
name|dest_data
operator|=
name|bitflip
index|[
operator|*
name|src_data
index|]
expr_stmt|;
operator|++
name|src_data
expr_stmt|;
operator|++
name|dest_data
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mask_alpha_converter
specifier|static
name|void
name|mask_alpha_converter
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|width
operator|==
name|dest
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|height
operator|==
name|dest
operator|->
name|height
argument_list|)
expr_stmt|;
specifier|const
name|int
name|src_pad
init|=
operator|(
name|src
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|src
operator|->
name|width
decl_stmt|;
specifier|const
name|int
name|dest_pad
init|=
operator|(
name|dest
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|dest
operator|->
name|width
decl_stmt|;
specifier|const
name|uint
modifier|*
name|src_data
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|src
operator|->
name|data
decl_stmt|;
name|uint
modifier|*
name|dest_data
init|=
operator|(
name|uint
operator|*
operator|)
name|dest
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|uint
modifier|*
name|end
init|=
name|src_data
operator|+
name|src
operator|->
name|width
decl_stmt|;
while|while
condition|(
name|src_data
operator|<
name|end
condition|)
block|{
operator|*
name|dest_data
operator|=
operator|*
name|src_data
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|src_data
expr_stmt|;
operator|++
name|dest_data
expr_stmt|;
block|}
name|src_data
operator|+=
name|src_pad
expr_stmt|;
name|dest_data
operator|+=
name|dest_pad
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|QImage
operator|::
name|Format
name|DestFormat
parameter_list|>
DECL|function|mask_alpha_converter_inplace
specifier|static
name|bool
name|mask_alpha_converter_inplace
parameter_list|(
name|QImageData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB32
operator|||
name|DestFormat
operator|==
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
specifier|const
name|int
name|pad
init|=
operator|(
name|data
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|data
operator|->
name|width
decl_stmt|;
name|QRgb
modifier|*
name|rgb_data
init|=
operator|(
name|QRgb
operator|*
operator|)
name|data
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRgb
modifier|*
name|end
init|=
name|rgb_data
operator|+
name|data
operator|->
name|width
decl_stmt|;
while|while
condition|(
name|rgb_data
operator|<
name|end
condition|)
block|{
operator|*
name|rgb_data
operator|=
operator|*
name|rgb_data
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|rgb_data
expr_stmt|;
block|}
name|rgb_data
operator|+=
name|pad
expr_stmt|;
block|}
name|data
operator|->
name|format
operator|=
name|DestFormat
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|mask_alpha_converter_RGBx
specifier|static
name|void
name|mask_alpha_converter_RGBx
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_LITTLE_ENDIAN
return|return
name|mask_alpha_converter
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|flags
argument_list|)
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|width
operator|==
name|dest
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|height
operator|==
name|dest
operator|->
name|height
argument_list|)
expr_stmt|;
specifier|const
name|int
name|src_pad
init|=
operator|(
name|src
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|src
operator|->
name|width
decl_stmt|;
specifier|const
name|int
name|dest_pad
init|=
operator|(
name|dest
operator|->
name|bytes_per_line
operator|>>
literal|2
operator|)
operator|-
name|dest
operator|->
name|width
decl_stmt|;
specifier|const
name|uint
modifier|*
name|src_data
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|src
operator|->
name|data
decl_stmt|;
name|uint
modifier|*
name|dest_data
init|=
operator|(
name|uint
operator|*
operator|)
name|dest
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|uint
modifier|*
name|end
init|=
name|src_data
operator|+
name|src
operator|->
name|width
decl_stmt|;
while|while
condition|(
name|src_data
operator|<
name|end
condition|)
block|{
operator|*
name|dest_data
operator|=
operator|*
name|src_data
operator||
literal|0x000000ff
expr_stmt|;
operator|++
name|src_data
expr_stmt|;
operator|++
name|dest_data
expr_stmt|;
block|}
name|src_data
operator|+=
name|src_pad
expr_stmt|;
name|dest_data
operator|+=
name|dest_pad
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|fix_color_table
specifier|static
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|fix_color_table
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|QRgb
argument_list|>
modifier|&
name|ctbl
parameter_list|,
name|QImage
operator|::
name|Format
name|format
parameter_list|)
block|{
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|colorTable
init|=
name|ctbl
decl_stmt|;
if|if
condition|(
name|format
operator|==
name|QImage
operator|::
name|Format_RGB32
condition|)
block|{
comment|// check if the color table has alpha
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colorTable
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|qAlpha
argument_list|(
name|colorTable
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|!=
literal|0xff
argument_list|)
condition|)
name|colorTable
index|[
name|i
index|]
operator|=
name|colorTable
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator||
literal|0xff000000
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
condition|)
block|{
comment|// check if the color table has alpha
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colorTable
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|colorTable
index|[
name|i
index|]
operator|=
name|qPremultiply
argument_list|(
name|colorTable
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|colorTable
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// dither_to_1:  Uses selected dithering algorithm.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|dither_to_Mono
name|void
name|dither_to_Mono
parameter_list|(
name|QImageData
modifier|*
name|dst
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|,
name|bool
name|fromalpha
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|width
operator|==
name|dst
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|height
operator|==
name|dst
operator|->
name|height
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dst
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Mono
operator|||
name|dst
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_MonoLSB
argument_list|)
expr_stmt|;
name|dst
operator|->
name|colortable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dst
operator|->
name|colortable
operator|.
name|append
argument_list|(
literal|0xffffffff
argument_list|)
expr_stmt|;
name|dst
operator|->
name|colortable
operator|.
name|append
argument_list|(
literal|0xff000000
argument_list|)
expr_stmt|;
enum|enum
block|{
name|Threshold
block|,
name|Ordered
block|,
name|Diffuse
block|}
name|dithermode
enum|;
if|if
condition|(
name|fromalpha
condition|)
block|{
if|if
condition|(
operator|(
name|flags
operator|&
name|Qt
operator|::
name|AlphaDither_Mask
operator|)
operator|==
name|Qt
operator|::
name|DiffuseAlphaDither
condition|)
name|dithermode
operator|=
name|Diffuse
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
name|Qt
operator|::
name|AlphaDither_Mask
operator|)
operator|==
name|Qt
operator|::
name|OrderedAlphaDither
condition|)
name|dithermode
operator|=
name|Ordered
expr_stmt|;
else|else
name|dithermode
operator|=
name|Threshold
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|flags
operator|&
name|Qt
operator|::
name|Dither_Mask
operator|)
operator|==
name|Qt
operator|::
name|ThresholdDither
condition|)
name|dithermode
operator|=
name|Threshold
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
name|Qt
operator|::
name|Dither_Mask
operator|)
operator|==
name|Qt
operator|::
name|OrderedDither
condition|)
name|dithermode
operator|=
name|Ordered
expr_stmt|;
else|else
name|dithermode
operator|=
name|Diffuse
expr_stmt|;
block|}
name|int
name|w
init|=
name|src
operator|->
name|width
decl_stmt|;
name|int
name|h
init|=
name|src
operator|->
name|height
decl_stmt|;
name|int
name|d
init|=
name|src
operator|->
name|depth
decl_stmt|;
name|uchar
name|gray
index|[
literal|256
index|]
decl_stmt|;
comment|// gray map for 8 bit images
name|bool
name|use_gray
init|=
operator|(
name|d
operator|==
literal|8
operator|)
decl_stmt|;
if|if
condition|(
name|use_gray
condition|)
block|{
comment|// make gray map
if|if
condition|(
name|fromalpha
condition|)
block|{
comment|// Alpha 0x00 -> 0 pixels (white)
comment|// Alpha 0xFF -> 1 pixels (black)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|->
name|colortable
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|gray
index|[
name|i
index|]
operator|=
operator|(
literal|255
operator|-
operator|(
name|src
operator|->
name|colortable
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|>>
literal|24
operator|)
operator|)
expr_stmt|;
block|}
else|else
block|{
comment|// Pixel 0x00 -> 1 pixels (black)
comment|// Pixel 0xFF -> 0 pixels (white)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|->
name|colortable
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|gray
index|[
name|i
index|]
operator|=
name|qGray
argument_list|(
name|src
operator|->
name|colortable
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|uchar
modifier|*
name|dst_data
init|=
name|dst
operator|->
name|data
decl_stmt|;
name|int
name|dst_bpl
init|=
name|dst
operator|->
name|bytes_per_line
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|src_data
init|=
name|src
operator|->
name|data
decl_stmt|;
name|int
name|src_bpl
init|=
name|src
operator|->
name|bytes_per_line
decl_stmt|;
switch|switch
condition|(
name|dithermode
condition|)
block|{
case|case
name|Diffuse
case|:
block|{
name|QScopedArrayPointer
argument_list|<
name|int
argument_list|>
name|lineBuffer
argument_list|(
operator|new
name|int
index|[
name|w
operator|*
literal|2
index|]
argument_list|)
decl_stmt|;
name|int
modifier|*
name|line1
init|=
name|lineBuffer
operator|.
name|data
argument_list|()
decl_stmt|;
name|int
modifier|*
name|line2
init|=
name|lineBuffer
operator|.
name|data
argument_list|()
operator|+
name|w
decl_stmt|;
name|int
name|bmwidth
init|=
operator|(
name|w
operator|+
literal|7
operator|)
operator|/
literal|8
decl_stmt|;
name|int
modifier|*
name|b1
decl_stmt|,
modifier|*
name|b2
decl_stmt|;
name|int
name|wbytes
init|=
name|w
operator|*
operator|(
name|d
operator|/
literal|8
operator|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|p
init|=
name|src
operator|->
name|data
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|end
init|=
name|p
operator|+
name|wbytes
decl_stmt|;
name|b2
operator|=
name|line2
expr_stmt|;
if|if
condition|(
name|use_gray
condition|)
block|{
comment|// 8 bit image
while|while
condition|(
name|p
operator|<
name|end
condition|)
operator|*
name|b2
operator|++
operator|=
name|gray
index|[
operator|*
name|p
operator|++
index|]
expr_stmt|;
block|}
else|else
block|{
comment|// 32 bit image
if|if
condition|(
name|fromalpha
condition|)
block|{
while|while
condition|(
name|p
operator|<
name|end
condition|)
block|{
operator|*
name|b2
operator|++
operator|=
literal|255
operator|-
operator|(
operator|*
operator|(
name|uint
operator|*
operator|)
name|p
operator|>>
literal|24
operator|)
expr_stmt|;
name|p
operator|+=
literal|4
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|p
operator|<
name|end
condition|)
block|{
operator|*
name|b2
operator|++
operator|=
name|qGray
argument_list|(
operator|*
operator|(
name|uint
operator|*
operator|)
name|p
argument_list|)
expr_stmt|;
name|p
operator|+=
literal|4
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
name|y
operator|++
control|)
block|{
comment|// for each scan line...
name|int
modifier|*
name|tmp
init|=
name|line1
decl_stmt|;
name|line1
operator|=
name|line2
expr_stmt|;
name|line2
operator|=
name|tmp
expr_stmt|;
name|bool
name|not_last_line
init|=
name|y
operator|<
name|h
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|not_last_line
condition|)
block|{
comment|// calc. grayvals for next line
name|p
operator|=
name|src
operator|->
name|data
operator|+
operator|(
name|y
operator|+
literal|1
operator|)
operator|*
name|src
operator|->
name|bytes_per_line
expr_stmt|;
name|end
operator|=
name|p
operator|+
name|wbytes
expr_stmt|;
name|b2
operator|=
name|line2
expr_stmt|;
if|if
condition|(
name|use_gray
condition|)
block|{
comment|// 8 bit image
while|while
condition|(
name|p
operator|<
name|end
condition|)
operator|*
name|b2
operator|++
operator|=
name|gray
index|[
operator|*
name|p
operator|++
index|]
expr_stmt|;
block|}
else|else
block|{
comment|// 24 bit image
if|if
condition|(
name|fromalpha
condition|)
block|{
while|while
condition|(
name|p
operator|<
name|end
condition|)
block|{
operator|*
name|b2
operator|++
operator|=
literal|255
operator|-
operator|(
operator|*
operator|(
name|uint
operator|*
operator|)
name|p
operator|>>
literal|24
operator|)
expr_stmt|;
name|p
operator|+=
literal|4
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|p
operator|<
name|end
condition|)
block|{
operator|*
name|b2
operator|++
operator|=
name|qGray
argument_list|(
operator|*
operator|(
name|uint
operator|*
operator|)
name|p
argument_list|)
expr_stmt|;
name|p
operator|+=
literal|4
expr_stmt|;
block|}
block|}
block|}
block|}
name|int
name|err
decl_stmt|;
name|uchar
modifier|*
name|p
init|=
name|dst
operator|->
name|data
operator|+
name|y
operator|*
name|dst
operator|->
name|bytes_per_line
decl_stmt|;
name|memset
argument_list|(
name|p
argument_list|,
literal|0
argument_list|,
name|bmwidth
argument_list|)
expr_stmt|;
name|b1
operator|=
name|line1
expr_stmt|;
name|b2
operator|=
name|line2
expr_stmt|;
name|int
name|bit
init|=
literal|7
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|1
init|;
name|x
operator|<=
name|w
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
operator|*
name|b1
operator|<
literal|128
condition|)
block|{
comment|// black pixel
name|err
operator|=
operator|*
name|b1
operator|++
expr_stmt|;
operator|*
name|p
operator||=
literal|1
operator|<<
name|bit
expr_stmt|;
block|}
else|else
block|{
comment|// white pixel
name|err
operator|=
operator|*
name|b1
operator|++
operator|-
literal|255
expr_stmt|;
block|}
if|if
condition|(
name|bit
operator|==
literal|0
condition|)
block|{
name|p
operator|++
expr_stmt|;
name|bit
operator|=
literal|7
expr_stmt|;
block|}
else|else
block|{
name|bit
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|x
operator|<
name|w
condition|)
operator|*
name|b1
operator|+=
operator|(
name|err
operator|*
literal|7
operator|)
operator|>>
literal|4
expr_stmt|;
comment|// spread error to right pixel
if|if
condition|(
name|not_last_line
condition|)
block|{
name|b2
index|[
literal|0
index|]
operator|+=
operator|(
name|err
operator|*
literal|5
operator|)
operator|>>
literal|4
expr_stmt|;
comment|// pixel below
if|if
condition|(
name|x
operator|>
literal|1
condition|)
name|b2
index|[
operator|-
literal|1
index|]
operator|+=
operator|(
name|err
operator|*
literal|3
operator|)
operator|>>
literal|4
expr_stmt|;
comment|// pixel below left
if|if
condition|(
name|x
operator|<
name|w
condition|)
name|b2
index|[
literal|1
index|]
operator|+=
name|err
operator|>>
literal|4
expr_stmt|;
comment|// pixel below right
block|}
name|b2
operator|++
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|Ordered
case|:
block|{
name|memset
argument_list|(
name|dst
operator|->
name|data
argument_list|,
literal|0
argument_list|,
name|dst
operator|->
name|nbytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|==
literal|32
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|h
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|uint
modifier|*
name|p
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|src_data
decl_stmt|;
specifier|const
name|uint
modifier|*
name|end
init|=
name|p
operator|+
name|w
decl_stmt|;
name|uchar
modifier|*
name|m
init|=
name|dst_data
decl_stmt|;
name|int
name|bit
init|=
literal|7
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|fromalpha
condition|)
block|{
while|while
condition|(
name|p
operator|<
name|end
condition|)
block|{
if|if
condition|(
operator|(
operator|*
name|p
operator|++
operator|>>
literal|24
operator|)
operator|>=
name|qt_bayer_matrix
index|[
name|j
operator|++
operator|&
literal|15
index|]
index|[
name|i
operator|&
literal|15
index|]
condition|)
operator|*
name|m
operator||=
literal|1
operator|<<
name|bit
expr_stmt|;
if|if
condition|(
name|bit
operator|==
literal|0
condition|)
block|{
name|m
operator|++
expr_stmt|;
name|bit
operator|=
literal|7
expr_stmt|;
block|}
else|else
block|{
name|bit
operator|--
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
while|while
condition|(
name|p
operator|<
name|end
condition|)
block|{
if|if
condition|(
operator|(
name|uint
operator|)
name|qGray
argument_list|(
operator|*
name|p
operator|++
argument_list|)
operator|<
name|qt_bayer_matrix
index|[
name|j
operator|++
operator|&
literal|15
index|]
index|[
name|i
operator|&
literal|15
index|]
condition|)
operator|*
name|m
operator||=
literal|1
operator|<<
name|bit
expr_stmt|;
if|if
condition|(
name|bit
operator|==
literal|0
condition|)
block|{
name|m
operator|++
expr_stmt|;
name|bit
operator|=
literal|7
expr_stmt|;
block|}
else|else
block|{
name|bit
operator|--
expr_stmt|;
block|}
block|}
block|}
name|dst_data
operator|+=
name|dst_bpl
expr_stmt|;
name|src_data
operator|+=
name|src_bpl
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|d
operator|==
literal|8
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|h
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|uchar
modifier|*
name|p
init|=
name|src_data
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|end
init|=
name|p
operator|+
name|w
decl_stmt|;
name|uchar
modifier|*
name|m
init|=
name|dst_data
decl_stmt|;
name|int
name|bit
init|=
literal|7
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|p
operator|<
name|end
condition|)
block|{
if|if
condition|(
operator|(
name|uint
operator|)
name|gray
index|[
operator|*
name|p
operator|++
index|]
operator|<
name|qt_bayer_matrix
index|[
name|j
operator|++
operator|&
literal|15
index|]
index|[
name|i
operator|&
literal|15
index|]
condition|)
operator|*
name|m
operator||=
literal|1
operator|<<
name|bit
expr_stmt|;
if|if
condition|(
name|bit
operator|==
literal|0
condition|)
block|{
name|m
operator|++
expr_stmt|;
name|bit
operator|=
literal|7
expr_stmt|;
block|}
else|else
block|{
name|bit
operator|--
expr_stmt|;
block|}
block|}
name|dst_data
operator|+=
name|dst_bpl
expr_stmt|;
name|src_data
operator|+=
name|src_bpl
expr_stmt|;
block|}
block|}
block|}
break|break;
default|default:
block|{
comment|// Threshold:
name|memset
argument_list|(
name|dst
operator|->
name|data
argument_list|,
literal|0
argument_list|,
name|dst
operator|->
name|nbytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|==
literal|32
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|h
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|uint
modifier|*
name|p
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|src_data
decl_stmt|;
specifier|const
name|uint
modifier|*
name|end
init|=
name|p
operator|+
name|w
decl_stmt|;
name|uchar
modifier|*
name|m
init|=
name|dst_data
decl_stmt|;
name|int
name|bit
init|=
literal|7
decl_stmt|;
if|if
condition|(
name|fromalpha
condition|)
block|{
while|while
condition|(
name|p
operator|<
name|end
condition|)
block|{
if|if
condition|(
operator|(
operator|*
name|p
operator|++
operator|>>
literal|24
operator|)
operator|>=
literal|128
condition|)
operator|*
name|m
operator||=
literal|1
operator|<<
name|bit
expr_stmt|;
comment|// Set mask "on"
if|if
condition|(
name|bit
operator|==
literal|0
condition|)
block|{
name|m
operator|++
expr_stmt|;
name|bit
operator|=
literal|7
expr_stmt|;
block|}
else|else
block|{
name|bit
operator|--
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
while|while
condition|(
name|p
operator|<
name|end
condition|)
block|{
if|if
condition|(
name|qGray
argument_list|(
operator|*
name|p
operator|++
argument_list|)
operator|<
literal|128
condition|)
operator|*
name|m
operator||=
literal|1
operator|<<
name|bit
expr_stmt|;
comment|// Set pixel "black"
if|if
condition|(
name|bit
operator|==
literal|0
condition|)
block|{
name|m
operator|++
expr_stmt|;
name|bit
operator|=
literal|7
expr_stmt|;
block|}
else|else
block|{
name|bit
operator|--
expr_stmt|;
block|}
block|}
block|}
name|dst_data
operator|+=
name|dst_bpl
expr_stmt|;
name|src_data
operator|+=
name|src_bpl
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|d
operator|==
literal|8
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|h
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|uchar
modifier|*
name|p
init|=
name|src_data
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|end
init|=
name|p
operator|+
name|w
decl_stmt|;
name|uchar
modifier|*
name|m
init|=
name|dst_data
decl_stmt|;
name|int
name|bit
init|=
literal|7
decl_stmt|;
while|while
condition|(
name|p
operator|<
name|end
condition|)
block|{
if|if
condition|(
name|gray
index|[
operator|*
name|p
operator|++
index|]
operator|<
literal|128
condition|)
operator|*
name|m
operator||=
literal|1
operator|<<
name|bit
expr_stmt|;
comment|// Set mask "on"/ pixel "black"
if|if
condition|(
name|bit
operator|==
literal|0
condition|)
block|{
name|m
operator|++
expr_stmt|;
name|bit
operator|=
literal|7
expr_stmt|;
block|}
else|else
block|{
name|bit
operator|--
expr_stmt|;
block|}
block|}
name|dst_data
operator|+=
name|dst_bpl
expr_stmt|;
name|src_data
operator|+=
name|src_bpl
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|dst
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_MonoLSB
condition|)
block|{
comment|// need to swap bit order
name|uchar
modifier|*
name|sl
init|=
name|dst
operator|->
name|data
decl_stmt|;
name|int
name|bpl
init|=
operator|(
name|dst
operator|->
name|width
operator|+
literal|7
operator|)
operator|*
name|dst
operator|->
name|depth
operator|/
literal|8
decl_stmt|;
name|int
name|pad
init|=
name|dst
operator|->
name|bytes_per_line
operator|-
name|bpl
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|dst
operator|->
name|height
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|bpl
condition|;
operator|++
name|x
control|)
block|{
operator|*
name|sl
operator|=
name|bitflip
index|[
operator|*
name|sl
index|]
expr_stmt|;
operator|++
name|sl
expr_stmt|;
block|}
name|sl
operator|+=
name|pad
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|convert_X_to_Mono
specifier|static
name|void
name|convert_X_to_Mono
parameter_list|(
name|QImageData
modifier|*
name|dst
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|dither_to_Mono
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
name|flags
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convert_ARGB_PM_to_Mono
specifier|static
name|void
name|convert_ARGB_PM_to_Mono
parameter_list|(
name|QImageData
modifier|*
name|dst
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|QScopedPointer
argument_list|<
name|QImageData
argument_list|>
name|tmp
argument_list|(
name|QImageData
operator|::
name|create
argument_list|(
name|QSize
argument_list|(
name|src
operator|->
name|width
argument_list|,
name|src
operator|->
name|height
argument_list|)
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
argument_list|)
decl_stmt|;
name|convert_ARGB_PM_to_ARGB
argument_list|(
name|tmp
operator|.
name|data
argument_list|()
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|dither_to_Mono
argument_list|(
name|dst
argument_list|,
name|tmp
operator|.
name|data
argument_list|()
argument_list|,
name|flags
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// convert_32_to_8:  Converts a 32 bits depth (true color) to an 8 bit
end_comment
begin_comment
comment|// image with a colormap. If the 32 bit image has more than 256 colors,
end_comment
begin_comment
comment|// we convert the red,green and blue bytes into a single byte encoded
end_comment
begin_comment
comment|// as 6 shades of each of red, green and blue.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// if dithering is needed, only 1 color at most is available for alpha.
end_comment
begin_comment
comment|//
end_comment
begin_struct
DECL|struct|QRgbMap
struct|struct
name|QRgbMap
block|{
DECL|function|QRgbMap
specifier|inline
name|QRgbMap
parameter_list|()
member_init_list|:
name|used
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|member|pix
name|uchar
name|pix
decl_stmt|;
DECL|member|used
name|uchar
name|used
decl_stmt|;
DECL|member|rgb
name|QRgb
name|rgb
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|convert_RGB_to_Indexed8
specifier|static
name|void
name|convert_RGB_to_Indexed8
parameter_list|(
name|QImageData
modifier|*
name|dst
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB32
operator|||
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dst
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|width
operator|==
name|dst
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|height
operator|==
name|dst
operator|->
name|height
argument_list|)
expr_stmt|;
name|bool
name|do_quant
init|=
operator|(
name|flags
operator|&
name|Qt
operator|::
name|DitherMode_Mask
operator|)
operator|==
name|Qt
operator|::
name|PreferDither
operator|||
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32
decl_stmt|;
name|uint
name|alpha_mask
init|=
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB32
condition|?
literal|0xff000000
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|tablesize
init|=
literal|997
decl_stmt|;
comment|// prime
name|QRgbMap
name|table
index|[
name|tablesize
index|]
decl_stmt|;
name|int
name|pix
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|dst
operator|->
name|colortable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|ctbl
init|=
name|dst
operator|->
name|colortable
decl_stmt|;
name|dst
operator|->
name|colortable
operator|.
name|resize
argument_list|(
literal|256
argument_list|)
expr_stmt|;
comment|// Preload palette into table.
comment|// Almost same code as pixel insertion below
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dst
operator|->
name|colortable
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
comment|// Find in table...
name|QRgb
name|p
init|=
name|ctbl
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator||
name|alpha_mask
decl_stmt|;
name|int
name|hash
init|=
name|p
operator|%
name|tablesize
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|table
index|[
name|hash
index|]
operator|.
name|used
condition|)
block|{
if|if
condition|(
name|table
index|[
name|hash
index|]
operator|.
name|rgb
operator|==
name|p
condition|)
block|{
comment|// Found previous insertion - use it
break|break;
block|}
else|else
block|{
comment|// Keep searching...
if|if
condition|(
operator|++
name|hash
operator|==
name|tablesize
condition|)
name|hash
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Cannot be in table
name|Q_ASSERT
argument_list|(
name|pix
operator|!=
literal|256
argument_list|)
expr_stmt|;
comment|// too many colors
comment|// Insert into table at this unused position
name|dst
operator|->
name|colortable
index|[
name|pix
index|]
operator|=
name|p
expr_stmt|;
name|table
index|[
name|hash
index|]
operator|.
name|pix
operator|=
name|pix
operator|++
expr_stmt|;
name|table
index|[
name|hash
index|]
operator|.
name|rgb
operator|=
name|p
expr_stmt|;
name|table
index|[
name|hash
index|]
operator|.
name|used
operator|=
literal|1
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|(
name|flags
operator|&
name|Qt
operator|::
name|DitherMode_Mask
operator|)
operator|!=
name|Qt
operator|::
name|PreferDither
condition|)
block|{
name|dst
operator|->
name|colortable
operator|.
name|resize
argument_list|(
literal|256
argument_list|)
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|src_data
init|=
name|src
operator|->
name|data
decl_stmt|;
name|uchar
modifier|*
name|dest_data
init|=
name|dst
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|src
operator|->
name|height
condition|;
name|y
operator|++
control|)
block|{
comment|// check if<= 256 colors
specifier|const
name|QRgb
modifier|*
name|s
init|=
operator|(
specifier|const
name|QRgb
operator|*
operator|)
name|src_data
decl_stmt|;
name|uchar
modifier|*
name|b
init|=
name|dest_data
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|src
operator|->
name|width
condition|;
operator|++
name|x
control|)
block|{
name|QRgb
name|p
init|=
name|s
index|[
name|x
index|]
operator||
name|alpha_mask
decl_stmt|;
name|int
name|hash
init|=
name|p
operator|%
name|tablesize
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|table
index|[
name|hash
index|]
operator|.
name|used
condition|)
block|{
if|if
condition|(
name|table
index|[
name|hash
index|]
operator|.
name|rgb
operator|==
operator|(
name|p
operator|)
condition|)
block|{
comment|// Found previous insertion - use it
break|break;
block|}
else|else
block|{
comment|// Keep searching...
if|if
condition|(
operator|++
name|hash
operator|==
name|tablesize
condition|)
name|hash
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Cannot be in table
if|if
condition|(
name|pix
operator|==
literal|256
condition|)
block|{
comment|// too many colors
name|do_quant
operator|=
literal|true
expr_stmt|;
comment|// Break right out
name|x
operator|=
name|src
operator|->
name|width
expr_stmt|;
name|y
operator|=
name|src
operator|->
name|height
expr_stmt|;
block|}
else|else
block|{
comment|// Insert into table at this unused position
name|dst
operator|->
name|colortable
index|[
name|pix
index|]
operator|=
name|p
expr_stmt|;
name|table
index|[
name|hash
index|]
operator|.
name|pix
operator|=
name|pix
operator|++
expr_stmt|;
name|table
index|[
name|hash
index|]
operator|.
name|rgb
operator|=
name|p
expr_stmt|;
name|table
index|[
name|hash
index|]
operator|.
name|used
operator|=
literal|1
expr_stmt|;
block|}
break|break;
block|}
block|}
operator|*
name|b
operator|++
operator|=
name|table
index|[
name|hash
index|]
operator|.
name|pix
expr_stmt|;
comment|// May occur once incorrectly
block|}
name|src_data
operator|+=
name|src
operator|->
name|bytes_per_line
expr_stmt|;
name|dest_data
operator|+=
name|dst
operator|->
name|bytes_per_line
expr_stmt|;
block|}
block|}
name|int
name|numColors
init|=
name|do_quant
condition|?
literal|256
else|:
name|pix
decl_stmt|;
name|dst
operator|->
name|colortable
operator|.
name|resize
argument_list|(
name|numColors
argument_list|)
expr_stmt|;
if|if
condition|(
name|do_quant
condition|)
block|{
comment|// quantization needed
DECL|macro|MAX_R
define|#
directive|define
name|MAX_R
value|5
DECL|macro|MAX_G
define|#
directive|define
name|MAX_G
value|5
DECL|macro|MAX_B
define|#
directive|define
name|MAX_B
value|5
DECL|macro|INDEXOF
define|#
directive|define
name|INDEXOF
parameter_list|(
name|r
parameter_list|,
name|g
parameter_list|,
name|b
parameter_list|)
value|(((r)*(MAX_G+1)+(g))*(MAX_B+1)+(b))
for|for
control|(
name|int
name|rc
init|=
literal|0
init|;
name|rc
operator|<=
name|MAX_R
condition|;
name|rc
operator|++
control|)
comment|// build 6x6x6 color cube
for|for
control|(
name|int
name|gc
init|=
literal|0
init|;
name|gc
operator|<=
name|MAX_G
condition|;
name|gc
operator|++
control|)
for|for
control|(
name|int
name|bc
init|=
literal|0
init|;
name|bc
operator|<=
name|MAX_B
condition|;
name|bc
operator|++
control|)
name|dst
operator|->
name|colortable
index|[
name|INDEXOF
argument_list|(
name|rc
argument_list|,
name|gc
argument_list|,
name|bc
argument_list|)
index|]
operator|=
literal|0xff000000
operator||
name|qRgb
argument_list|(
name|rc
operator|*
literal|255
operator|/
name|MAX_R
argument_list|,
name|gc
operator|*
literal|255
operator|/
name|MAX_G
argument_list|,
name|bc
operator|*
literal|255
operator|/
name|MAX_B
argument_list|)
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|src_data
init|=
name|src
operator|->
name|data
decl_stmt|;
name|uchar
modifier|*
name|dest_data
init|=
name|dst
operator|->
name|data
decl_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|Qt
operator|::
name|Dither_Mask
operator|)
operator|==
name|Qt
operator|::
name|ThresholdDither
condition|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|src
operator|->
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|QRgb
modifier|*
name|p
init|=
operator|(
specifier|const
name|QRgb
operator|*
operator|)
name|src_data
decl_stmt|;
specifier|const
name|QRgb
modifier|*
name|end
init|=
name|p
operator|+
name|src
operator|->
name|width
decl_stmt|;
name|uchar
modifier|*
name|b
init|=
name|dest_data
decl_stmt|;
while|while
condition|(
name|p
operator|<
name|end
condition|)
block|{
DECL|macro|DITHER
define|#
directive|define
name|DITHER
parameter_list|(
name|p
parameter_list|,
name|m
parameter_list|)
value|((uchar) ((p * (m) + 127) / 255))
operator|*
name|b
operator|++
operator|=
name|INDEXOF
argument_list|(
name|DITHER
argument_list|(
name|qRed
argument_list|(
operator|*
name|p
argument_list|)
argument_list|,
name|MAX_R
argument_list|)
argument_list|,
name|DITHER
argument_list|(
name|qGreen
argument_list|(
operator|*
name|p
argument_list|)
argument_list|,
name|MAX_G
argument_list|)
argument_list|,
name|DITHER
argument_list|(
name|qBlue
argument_list|(
operator|*
name|p
argument_list|)
argument_list|,
name|MAX_B
argument_list|)
argument_list|)
expr_stmt|;
DECL|macro|DITHER
undef|#
directive|undef
name|DITHER
name|p
operator|++
expr_stmt|;
block|}
name|src_data
operator|+=
name|src
operator|->
name|bytes_per_line
expr_stmt|;
name|dest_data
operator|+=
name|dst
operator|->
name|bytes_per_line
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
name|Qt
operator|::
name|Dither_Mask
operator|)
operator|==
name|Qt
operator|::
name|DiffuseDither
condition|)
block|{
name|int
modifier|*
name|line1
index|[
literal|3
index|]
decl_stmt|;
name|int
modifier|*
name|line2
index|[
literal|3
index|]
decl_stmt|;
name|int
modifier|*
name|pv
index|[
literal|3
index|]
decl_stmt|;
name|QScopedArrayPointer
argument_list|<
name|int
argument_list|>
name|lineBuffer
argument_list|(
operator|new
name|int
index|[
name|src
operator|->
name|width
operator|*
literal|9
index|]
argument_list|)
decl_stmt|;
name|line1
index|[
literal|0
index|]
operator|=
name|lineBuffer
operator|.
name|data
argument_list|()
expr_stmt|;
name|line2
index|[
literal|0
index|]
operator|=
name|lineBuffer
operator|.
name|data
argument_list|()
operator|+
name|src
operator|->
name|width
expr_stmt|;
name|line1
index|[
literal|1
index|]
operator|=
name|lineBuffer
operator|.
name|data
argument_list|()
operator|+
name|src
operator|->
name|width
operator|*
literal|2
expr_stmt|;
name|line2
index|[
literal|1
index|]
operator|=
name|lineBuffer
operator|.
name|data
argument_list|()
operator|+
name|src
operator|->
name|width
operator|*
literal|3
expr_stmt|;
name|line1
index|[
literal|2
index|]
operator|=
name|lineBuffer
operator|.
name|data
argument_list|()
operator|+
name|src
operator|->
name|width
operator|*
literal|4
expr_stmt|;
name|line2
index|[
literal|2
index|]
operator|=
name|lineBuffer
operator|.
name|data
argument_list|()
operator|+
name|src
operator|->
name|width
operator|*
literal|5
expr_stmt|;
name|pv
index|[
literal|0
index|]
operator|=
name|lineBuffer
operator|.
name|data
argument_list|()
operator|+
name|src
operator|->
name|width
operator|*
literal|6
expr_stmt|;
name|pv
index|[
literal|1
index|]
operator|=
name|lineBuffer
operator|.
name|data
argument_list|()
operator|+
name|src
operator|->
name|width
operator|*
literal|7
expr_stmt|;
name|pv
index|[
literal|2
index|]
operator|=
name|lineBuffer
operator|.
name|data
argument_list|()
operator|+
name|src
operator|->
name|width
operator|*
literal|8
expr_stmt|;
name|int
name|endian
init|=
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
operator|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|src
operator|->
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uchar
modifier|*
name|q
init|=
name|src_data
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|q2
init|=
name|y
operator|<
name|src
operator|->
name|height
operator|-
literal|1
condition|?
name|q
operator|+
name|src
operator|->
name|bytes_per_line
else|:
name|src
operator|->
name|data
decl_stmt|;
name|uchar
modifier|*
name|b
init|=
name|dest_data
decl_stmt|;
for|for
control|(
name|int
name|chan
init|=
literal|0
init|;
name|chan
operator|<
literal|3
condition|;
name|chan
operator|++
control|)
block|{
name|int
modifier|*
name|l1
init|=
operator|(
name|y
operator|&
literal|1
operator|)
condition|?
name|line2
index|[
name|chan
index|]
else|:
name|line1
index|[
name|chan
index|]
decl_stmt|;
name|int
modifier|*
name|l2
init|=
operator|(
name|y
operator|&
literal|1
operator|)
condition|?
name|line1
index|[
name|chan
index|]
else|:
name|line2
index|[
name|chan
index|]
decl_stmt|;
if|if
condition|(
name|y
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|->
name|width
condition|;
name|i
operator|++
control|)
name|l1
index|[
name|i
index|]
operator|=
name|q
index|[
name|i
operator|*
literal|4
operator|+
name|chan
operator|+
name|endian
index|]
expr_stmt|;
block|}
if|if
condition|(
name|y
operator|+
literal|1
operator|<
name|src
operator|->
name|height
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|->
name|width
condition|;
name|i
operator|++
control|)
name|l2
index|[
name|i
index|]
operator|=
name|q2
index|[
name|i
operator|*
literal|4
operator|+
name|chan
operator|+
name|endian
index|]
expr_stmt|;
block|}
comment|// Bi-directional error diffusion
if|if
condition|(
name|y
operator|&
literal|1
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|src
operator|->
name|width
condition|;
name|x
operator|++
control|)
block|{
name|int
name|pix
init|=
name|qMax
argument_list|(
name|qMin
argument_list|(
literal|5
argument_list|,
operator|(
name|l1
index|[
name|x
index|]
operator|*
literal|5
operator|+
literal|128
operator|)
operator|/
literal|255
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|err
init|=
name|l1
index|[
name|x
index|]
operator|-
name|pix
operator|*
literal|255
operator|/
literal|5
decl_stmt|;
name|pv
index|[
name|chan
index|]
index|[
name|x
index|]
operator|=
name|pix
expr_stmt|;
comment|// Spread the error around...
if|if
condition|(
name|x
operator|+
literal|1
operator|<
name|src
operator|->
name|width
condition|)
block|{
name|l1
index|[
name|x
operator|+
literal|1
index|]
operator|+=
operator|(
name|err
operator|*
literal|7
operator|)
operator|>>
literal|4
expr_stmt|;
name|l2
index|[
name|x
operator|+
literal|1
index|]
operator|+=
name|err
operator|>>
literal|4
expr_stmt|;
block|}
name|l2
index|[
name|x
index|]
operator|+=
operator|(
name|err
operator|*
literal|5
operator|)
operator|>>
literal|4
expr_stmt|;
if|if
condition|(
name|x
operator|>
literal|1
condition|)
name|l2
index|[
name|x
operator|-
literal|1
index|]
operator|+=
operator|(
name|err
operator|*
literal|3
operator|)
operator|>>
literal|4
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|x
init|=
name|src
operator|->
name|width
init|;
name|x
operator|--
operator|>
literal|0
condition|;
control|)
block|{
name|int
name|pix
init|=
name|qMax
argument_list|(
name|qMin
argument_list|(
literal|5
argument_list|,
operator|(
name|l1
index|[
name|x
index|]
operator|*
literal|5
operator|+
literal|128
operator|)
operator|/
literal|255
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|err
init|=
name|l1
index|[
name|x
index|]
operator|-
name|pix
operator|*
literal|255
operator|/
literal|5
decl_stmt|;
name|pv
index|[
name|chan
index|]
index|[
name|x
index|]
operator|=
name|pix
expr_stmt|;
comment|// Spread the error around...
if|if
condition|(
name|x
operator|>
literal|0
condition|)
block|{
name|l1
index|[
name|x
operator|-
literal|1
index|]
operator|+=
operator|(
name|err
operator|*
literal|7
operator|)
operator|>>
literal|4
expr_stmt|;
name|l2
index|[
name|x
operator|-
literal|1
index|]
operator|+=
name|err
operator|>>
literal|4
expr_stmt|;
block|}
name|l2
index|[
name|x
index|]
operator|+=
operator|(
name|err
operator|*
literal|5
operator|)
operator|>>
literal|4
expr_stmt|;
if|if
condition|(
name|x
operator|+
literal|1
operator|<
name|src
operator|->
name|width
condition|)
name|l2
index|[
name|x
operator|+
literal|1
index|]
operator|+=
operator|(
name|err
operator|*
literal|3
operator|)
operator|>>
literal|4
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|endian
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|src
operator|->
name|width
condition|;
name|x
operator|++
control|)
block|{
operator|*
name|b
operator|++
operator|=
name|INDEXOF
argument_list|(
name|pv
index|[
literal|0
index|]
index|[
name|x
index|]
argument_list|,
name|pv
index|[
literal|1
index|]
index|[
name|x
index|]
argument_list|,
name|pv
index|[
literal|2
index|]
index|[
name|x
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|src
operator|->
name|width
condition|;
name|x
operator|++
control|)
block|{
operator|*
name|b
operator|++
operator|=
name|INDEXOF
argument_list|(
name|pv
index|[
literal|2
index|]
index|[
name|x
index|]
argument_list|,
name|pv
index|[
literal|1
index|]
index|[
name|x
index|]
argument_list|,
name|pv
index|[
literal|0
index|]
index|[
name|x
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|src_data
operator|+=
name|src
operator|->
name|bytes_per_line
expr_stmt|;
name|dest_data
operator|+=
name|dst
operator|->
name|bytes_per_line
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// OrderedDither
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|src
operator|->
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|QRgb
modifier|*
name|p
init|=
operator|(
specifier|const
name|QRgb
operator|*
operator|)
name|src_data
decl_stmt|;
specifier|const
name|QRgb
modifier|*
name|end
init|=
name|p
operator|+
name|src
operator|->
name|width
decl_stmt|;
name|uchar
modifier|*
name|b
init|=
name|dest_data
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|p
operator|<
name|end
condition|)
block|{
name|uint
name|d
init|=
name|qt_bayer_matrix
index|[
name|y
operator|&
literal|15
index|]
index|[
name|x
operator|&
literal|15
index|]
operator|<<
literal|8
decl_stmt|;
DECL|macro|DITHER
define|#
directive|define
name|DITHER
parameter_list|(
name|p
parameter_list|,
name|d
parameter_list|,
name|m
parameter_list|)
value|((uchar) ((((256 * (m) + (m) + 1)) * (p) + (d))>> 16))
operator|*
name|b
operator|++
operator|=
name|INDEXOF
argument_list|(
name|DITHER
argument_list|(
name|qRed
argument_list|(
operator|*
name|p
argument_list|)
argument_list|,
name|d
argument_list|,
name|MAX_R
argument_list|)
argument_list|,
name|DITHER
argument_list|(
name|qGreen
argument_list|(
operator|*
name|p
argument_list|)
argument_list|,
name|d
argument_list|,
name|MAX_G
argument_list|)
argument_list|,
name|DITHER
argument_list|(
name|qBlue
argument_list|(
operator|*
name|p
argument_list|)
argument_list|,
name|d
argument_list|,
name|MAX_B
argument_list|)
argument_list|)
expr_stmt|;
DECL|macro|DITHER
undef|#
directive|undef
name|DITHER
name|p
operator|++
expr_stmt|;
name|x
operator|++
expr_stmt|;
block|}
name|src_data
operator|+=
name|src
operator|->
name|bytes_per_line
expr_stmt|;
name|dest_data
operator|+=
name|dst
operator|->
name|bytes_per_line
expr_stmt|;
block|}
block|}
if|if
condition|(
name|src
operator|->
name|format
operator|!=
name|QImage
operator|::
name|Format_RGB32
operator|&&
name|src
operator|->
name|format
operator|!=
name|QImage
operator|::
name|Format_RGB16
condition|)
block|{
specifier|const
name|int
name|trans
init|=
literal|216
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|dst
operator|->
name|colortable
operator|.
name|size
argument_list|()
operator|>
name|trans
argument_list|)
expr_stmt|;
name|dst
operator|->
name|colortable
index|[
name|trans
index|]
operator|=
literal|0
expr_stmt|;
name|QScopedPointer
argument_list|<
name|QImageData
argument_list|>
name|mask
argument_list|(
name|QImageData
operator|::
name|create
argument_list|(
name|QSize
argument_list|(
name|src
operator|->
name|width
argument_list|,
name|src
operator|->
name|height
argument_list|)
argument_list|,
name|QImage
operator|::
name|Format_Mono
argument_list|)
argument_list|)
decl_stmt|;
name|dither_to_Mono
argument_list|(
name|mask
operator|.
name|data
argument_list|()
argument_list|,
name|src
argument_list|,
name|flags
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|uchar
modifier|*
name|dst_data
init|=
name|dst
operator|->
name|data
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|mask_data
init|=
name|mask
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|src
operator|->
name|height
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|src
operator|->
name|width
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|mask_data
index|[
name|x
operator|>>
literal|3
index|]
operator|&
operator|(
literal|0x80
operator|>>
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
operator|)
condition|)
name|dst_data
index|[
name|x
index|]
operator|=
name|trans
expr_stmt|;
block|}
name|mask_data
operator|+=
name|mask
operator|->
name|bytes_per_line
expr_stmt|;
name|dst_data
operator|+=
name|dst
operator|->
name|bytes_per_line
expr_stmt|;
block|}
name|dst
operator|->
name|has_alpha_clut
operator|=
literal|true
expr_stmt|;
block|}
DECL|macro|MAX_R
undef|#
directive|undef
name|MAX_R
DECL|macro|MAX_G
undef|#
directive|undef
name|MAX_G
DECL|macro|MAX_B
undef|#
directive|undef
name|MAX_B
DECL|macro|INDEXOF
undef|#
directive|undef
name|INDEXOF
block|}
block|}
end_function
begin_function
DECL|function|convert_ARGB_PM_to_Indexed8
specifier|static
name|void
name|convert_ARGB_PM_to_Indexed8
parameter_list|(
name|QImageData
modifier|*
name|dst
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|QScopedPointer
argument_list|<
name|QImageData
argument_list|>
name|tmp
argument_list|(
name|QImageData
operator|::
name|create
argument_list|(
name|QSize
argument_list|(
name|src
operator|->
name|width
argument_list|,
name|src
operator|->
name|height
argument_list|)
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
argument_list|)
decl_stmt|;
name|convert_ARGB_PM_to_ARGB
argument_list|(
name|tmp
operator|.
name|data
argument_list|()
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|convert_RGB_to_Indexed8
argument_list|(
name|dst
argument_list|,
name|tmp
operator|.
name|data
argument_list|()
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convert_ARGB_to_Indexed8
specifier|static
name|void
name|convert_ARGB_to_Indexed8
parameter_list|(
name|QImageData
modifier|*
name|dst
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|convert_RGB_to_Indexed8
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convert_Indexed8_to_X32
specifier|static
name|void
name|convert_Indexed8_to_X32
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB32
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|width
operator|==
name|dest
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|height
operator|==
name|dest
operator|->
name|height
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|colorTable
init|=
name|fix_color_table
argument_list|(
name|src
operator|->
name|colortable
argument_list|,
name|dest
operator|->
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
name|colorTable
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|colorTable
operator|.
name|resize
argument_list|(
literal|256
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|colorTable
index|[
name|i
index|]
operator|=
name|qRgb
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|int
name|w
init|=
name|src
operator|->
name|width
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|src_data
init|=
name|src
operator|->
name|data
decl_stmt|;
name|uchar
modifier|*
name|dest_data
init|=
name|dest
operator|->
name|data
decl_stmt|;
name|int
name|tableSize
init|=
name|colorTable
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|src
operator|->
name|height
condition|;
name|y
operator|++
control|)
block|{
name|uint
modifier|*
name|p
init|=
operator|(
name|uint
operator|*
operator|)
name|dest_data
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|b
init|=
name|src_data
decl_stmt|;
name|uint
modifier|*
name|end
init|=
name|p
operator|+
name|w
decl_stmt|;
while|while
condition|(
name|p
operator|<
name|end
condition|)
operator|*
name|p
operator|++
operator|=
name|colorTable
operator|.
name|at
argument_list|(
name|qMin
argument_list|<
name|int
argument_list|>
argument_list|(
name|tableSize
argument_list|,
operator|*
name|b
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|src_data
operator|+=
name|src
operator|->
name|bytes_per_line
expr_stmt|;
name|dest_data
operator|+=
name|dest
operator|->
name|bytes_per_line
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|convert_Mono_to_X32
specifier|static
name|void
name|convert_Mono_to_X32
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Mono
operator|||
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_MonoLSB
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB32
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|width
operator|==
name|dest
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|height
operator|==
name|dest
operator|->
name|height
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|colorTable
init|=
name|fix_color_table
argument_list|(
name|src
operator|->
name|colortable
argument_list|,
name|dest
operator|->
name|format
argument_list|)
decl_stmt|;
comment|// Default to black / white colors
if|if
condition|(
name|colorTable
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
if|if
condition|(
name|colorTable
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
name|colorTable
operator|<<
literal|0xff000000
expr_stmt|;
name|colorTable
operator|<<
literal|0xffffffff
expr_stmt|;
block|}
specifier|const
name|uchar
modifier|*
name|src_data
init|=
name|src
operator|->
name|data
decl_stmt|;
name|uchar
modifier|*
name|dest_data
init|=
name|dest
operator|->
name|data
decl_stmt|;
if|if
condition|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Mono
condition|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|dest
operator|->
name|height
condition|;
name|y
operator|++
control|)
block|{
name|uint
modifier|*
name|p
init|=
operator|(
name|uint
operator|*
operator|)
name|dest_data
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|dest
operator|->
name|width
condition|;
name|x
operator|++
control|)
operator|*
name|p
operator|++
operator|=
name|colorTable
operator|.
name|at
argument_list|(
operator|(
name|src_data
index|[
name|x
operator|>>
literal|3
index|]
operator|>>
operator|(
literal|7
operator|-
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
operator|)
operator|&
literal|1
argument_list|)
expr_stmt|;
name|src_data
operator|+=
name|src
operator|->
name|bytes_per_line
expr_stmt|;
name|dest_data
operator|+=
name|dest
operator|->
name|bytes_per_line
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|dest
operator|->
name|height
condition|;
name|y
operator|++
control|)
block|{
name|uint
modifier|*
name|p
init|=
operator|(
name|uint
operator|*
operator|)
name|dest_data
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|dest
operator|->
name|width
condition|;
name|x
operator|++
control|)
operator|*
name|p
operator|++
operator|=
name|colorTable
operator|.
name|at
argument_list|(
operator|(
name|src_data
index|[
name|x
operator|>>
literal|3
index|]
operator|>>
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
operator|&
literal|1
argument_list|)
expr_stmt|;
name|src_data
operator|+=
name|src
operator|->
name|bytes_per_line
expr_stmt|;
name|dest_data
operator|+=
name|dest
operator|->
name|bytes_per_line
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|convert_Mono_to_Indexed8
specifier|static
name|void
name|convert_Mono_to_Indexed8
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Mono
operator|||
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_MonoLSB
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|width
operator|==
name|dest
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|height
operator|==
name|dest
operator|->
name|height
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|ctbl
init|=
name|src
operator|->
name|colortable
decl_stmt|;
if|if
condition|(
name|ctbl
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
name|ctbl
operator|.
name|resize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctbl
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
if|if
condition|(
name|ctbl
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
name|ctbl
operator|<<
literal|0xff000000
expr_stmt|;
name|ctbl
operator|<<
literal|0xffffffff
expr_stmt|;
block|}
name|dest
operator|->
name|colortable
operator|=
name|ctbl
expr_stmt|;
name|dest
operator|->
name|has_alpha_clut
operator|=
name|src
operator|->
name|has_alpha_clut
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|src_data
init|=
name|src
operator|->
name|data
decl_stmt|;
name|uchar
modifier|*
name|dest_data
init|=
name|dest
operator|->
name|data
decl_stmt|;
if|if
condition|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Mono
condition|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|dest
operator|->
name|height
condition|;
name|y
operator|++
control|)
block|{
name|uchar
modifier|*
name|p
init|=
name|dest_data
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|dest
operator|->
name|width
condition|;
name|x
operator|++
control|)
operator|*
name|p
operator|++
operator|=
operator|(
name|src_data
index|[
name|x
operator|>>
literal|3
index|]
operator|>>
operator|(
literal|7
operator|-
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
operator|)
operator|&
literal|1
expr_stmt|;
name|src_data
operator|+=
name|src
operator|->
name|bytes_per_line
expr_stmt|;
name|dest_data
operator|+=
name|dest
operator|->
name|bytes_per_line
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|dest
operator|->
name|height
condition|;
name|y
operator|++
control|)
block|{
name|uchar
modifier|*
name|p
init|=
name|dest_data
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|dest
operator|->
name|width
condition|;
name|x
operator|++
control|)
operator|*
name|p
operator|++
operator|=
operator|(
name|src_data
index|[
name|x
operator|>>
literal|3
index|]
operator|>>
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
operator|&
literal|1
expr_stmt|;
name|src_data
operator|+=
name|src
operator|->
name|bytes_per_line
expr_stmt|;
name|dest_data
operator|+=
name|dest
operator|->
name|bytes_per_line
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|convert_Indexed8_to_Alpha8
specifier|static
name|void
name|convert_Indexed8_to_Alpha8
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Alpha8
argument_list|)
expr_stmt|;
name|uchar
name|translate
index|[
literal|256
index|]
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|QRgb
argument_list|>
modifier|&
name|colors
init|=
name|src
operator|->
name|colortable
decl_stmt|;
name|bool
name|simpleCase
init|=
operator|(
name|colors
operator|.
name|size
argument_list|()
operator|==
literal|256
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colors
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|uchar
name|alpha
init|=
name|qAlpha
argument_list|(
name|colors
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|translate
index|[
name|i
index|]
operator|=
name|alpha
expr_stmt|;
name|simpleCase
operator|=
name|simpleCase
operator|&&
operator|(
name|alpha
operator|==
name|i
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|simpleCase
condition|)
name|memcpy
argument_list|(
name|dest
operator|->
name|data
argument_list|,
name|src
operator|->
name|data
argument_list|,
name|src
operator|->
name|bytes_per_line
operator|*
name|src
operator|->
name|height
argument_list|)
expr_stmt|;
else|else
block|{
name|int
name|size
init|=
name|src
operator|->
name|bytes_per_line
operator|*
name|src
operator|->
name|height
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|dest
operator|->
name|data
index|[
name|i
index|]
operator|=
name|translate
index|[
name|src
operator|->
name|data
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|convert_Indexed8_to_Grayscale8
specifier|static
name|void
name|convert_Indexed8_to_Grayscale8
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Grayscale8
argument_list|)
expr_stmt|;
name|uchar
name|translate
index|[
literal|256
index|]
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|QRgb
argument_list|>
modifier|&
name|colors
init|=
name|src
operator|->
name|colortable
decl_stmt|;
name|bool
name|simpleCase
init|=
operator|(
name|colors
operator|.
name|size
argument_list|()
operator|==
literal|256
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colors
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|uchar
name|gray
init|=
name|qGray
argument_list|(
name|colors
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|translate
index|[
name|i
index|]
operator|=
name|gray
expr_stmt|;
name|simpleCase
operator|=
name|simpleCase
operator|&&
operator|(
name|gray
operator|==
name|i
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|simpleCase
condition|)
name|memcpy
argument_list|(
name|dest
operator|->
name|data
argument_list|,
name|src
operator|->
name|data
argument_list|,
name|src
operator|->
name|bytes_per_line
operator|*
name|src
operator|->
name|height
argument_list|)
expr_stmt|;
else|else
block|{
name|int
name|size
init|=
name|src
operator|->
name|bytes_per_line
operator|*
name|src
operator|->
name|height
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|dest
operator|->
name|data
index|[
name|i
index|]
operator|=
name|translate
index|[
name|src
operator|->
name|data
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|convert_Indexed8_to_Alpha8_inplace
specifier|static
name|bool
name|convert_Indexed8_to_Alpha8_inplace
parameter_list|(
name|QImageData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
comment|// Just check if this is an Alpha8 in Indexed8 disguise.
specifier|const
name|QVector
argument_list|<
name|QRgb
argument_list|>
modifier|&
name|colors
init|=
name|data
operator|->
name|colortable
decl_stmt|;
if|if
condition|(
name|colors
operator|.
name|size
argument_list|()
operator|!=
literal|256
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colors
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|!=
name|qAlpha
argument_list|(
name|colors
index|[
name|i
index|]
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|data
operator|->
name|colortable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|data
operator|->
name|format
operator|=
name|QImage
operator|::
name|Format_Alpha8
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|convert_Indexed8_to_Grayscale8_inplace
specifier|static
name|bool
name|convert_Indexed8_to_Grayscale8_inplace
parameter_list|(
name|QImageData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
comment|// Just check if this is a Grayscale8 in Indexed8 disguise.
specifier|const
name|QVector
argument_list|<
name|QRgb
argument_list|>
modifier|&
name|colors
init|=
name|data
operator|->
name|colortable
decl_stmt|;
if|if
condition|(
name|colors
operator|.
name|size
argument_list|()
operator|!=
literal|256
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colors
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|!=
name|qGray
argument_list|(
name|colors
index|[
name|i
index|]
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|data
operator|->
name|colortable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|data
operator|->
name|format
operator|=
name|QImage
operator|::
name|Format_Grayscale8
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|convert_Alpha8_to_Indexed8
specifier|static
name|void
name|convert_Alpha8_to_Indexed8
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Alpha8
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|dest
operator|->
name|data
argument_list|,
name|src
operator|->
name|data
argument_list|,
name|src
operator|->
name|bytes_per_line
operator|*
name|src
operator|->
name|height
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|colors
argument_list|(
literal|256
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|colors
index|[
name|i
index|]
operator|=
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|dest
operator|->
name|colortable
operator|=
name|colors
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convert_Grayscale8_to_Indexed8
specifier|static
name|void
name|convert_Grayscale8_to_Indexed8
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Grayscale8
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|dest
operator|->
name|data
argument_list|,
name|src
operator|->
name|data
argument_list|,
name|src
operator|->
name|bytes_per_line
operator|*
name|src
operator|->
name|height
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|colors
argument_list|(
literal|256
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|colors
index|[
name|i
index|]
operator|=
name|qRgb
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|dest
operator|->
name|colortable
operator|=
name|colors
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convert_Alpha8_to_Indexed8_inplace
specifier|static
name|bool
name|convert_Alpha8_to_Indexed8_inplace
parameter_list|(
name|QImageData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Alpha8
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|colors
argument_list|(
literal|256
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|colors
index|[
name|i
index|]
operator|=
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|data
operator|->
name|colortable
operator|=
name|colors
expr_stmt|;
name|data
operator|->
name|format
operator|=
name|QImage
operator|::
name|Format_Indexed8
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|convert_Grayscale8_to_Indexed8_inplace
specifier|static
name|bool
name|convert_Grayscale8_to_Indexed8_inplace
parameter_list|(
name|QImageData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|data
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_Grayscale8
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|colors
argument_list|(
literal|256
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|colors
index|[
name|i
index|]
operator|=
name|qRgb
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|data
operator|->
name|colortable
operator|=
name|colors
expr_stmt|;
name|data
operator|->
name|format
operator|=
name|QImage
operator|::
name|Format_Indexed8
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// first index source, second dest
end_comment
begin_decl_stmt
DECL|variable|qimage_converter_map
name|Image_Converter
name|qimage_converter_map
index|[
name|QImage
operator|::
name|NImageFormats
index|]
index|[
name|QImage
operator|::
name|NImageFormats
index|]
init|=
block|{
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|0
block|,
name|swap_bit_order
block|,
name|convert_Mono_to_Indexed8
block|,
name|convert_Mono_to_X32
block|,
name|convert_Mono_to_X32
block|,
name|convert_Mono_to_X32
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_Mono
block|{
literal|0
block|,
name|swap_bit_order
block|,
literal|0
block|,
name|convert_Mono_to_Indexed8
block|,
name|convert_Mono_to_X32
block|,
name|convert_Mono_to_X32
block|,
name|convert_Mono_to_X32
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_MonoLSB
block|{
literal|0
block|,
name|convert_X_to_Mono
block|,
name|convert_X_to_Mono
block|,
literal|0
block|,
name|convert_Indexed8_to_X32
block|,
name|convert_Indexed8_to_X32
block|,
name|convert_Indexed8_to_X32
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_Indexed8_to_Alpha8
block|,
name|convert_Indexed8_to_Grayscale8
block|,     }
block|,
comment|// Format_Indexed8
block|{
literal|0
block|,
name|convert_X_to_Mono
block|,
name|convert_X_to_Mono
block|,
name|convert_RGB_to_Indexed8
block|,
literal|0
block|,
name|mask_alpha_converter
block|,
name|mask_alpha_converter
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_RGB_to_RGB30
argument_list|<
name|PixelOrderBGR
argument_list|>
block|,
name|convert_RGB_to_RGB30
argument_list|<
name|PixelOrderBGR
argument_list|>
block|,
name|convert_RGB_to_RGB30
argument_list|<
name|PixelOrderRGB
argument_list|>
block|,
name|convert_RGB_to_RGB30
argument_list|<
name|PixelOrderRGB
argument_list|>
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB32
block|{
literal|0
block|,
name|convert_X_to_Mono
block|,
name|convert_X_to_Mono
block|,
name|convert_ARGB_to_Indexed8
block|,
name|mask_alpha_converter
block|,
literal|0
block|,
name|convert_ARGB_to_ARGB_PM
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_ARGB_to_RGBx
block|,
name|convert_ARGB_to_RGBA
block|,
literal|0
block|,
name|convert_RGB_to_RGB30
argument_list|<
name|PixelOrderBGR
argument_list|>
block|,
literal|0
block|,
name|convert_RGB_to_RGB30
argument_list|<
name|PixelOrderRGB
argument_list|>
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_ARGB32
block|{
literal|0
block|,
name|convert_ARGB_PM_to_Mono
block|,
name|convert_ARGB_PM_to_Mono
block|,
name|convert_ARGB_PM_to_Indexed8
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_ARGB_to_RGBA
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_ARGB32_Premultiplied
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB16
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_ARGB8565_Premultiplied
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB666
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_ARGB6666_Premultiplied
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB555
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_ARGB8555_Premultiplied
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_RGB888_to_RGB
argument_list|<
literal|false
argument_list|>
block|,
name|convert_RGB888_to_RGB
argument_list|<
literal|false
argument_list|>
block|,
name|convert_RGB888_to_RGB
argument_list|<
literal|false
argument_list|>
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_RGB888_to_RGB
argument_list|<
literal|true
argument_list|>
block|,
name|convert_RGB888_to_RGB
argument_list|<
literal|true
argument_list|>
block|,
name|convert_RGB888_to_RGB
argument_list|<
literal|true
argument_list|>
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB888
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB444
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_ARGB4444_Premultiplied
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_RGBA_to_RGB
block|,
name|convert_RGBA_to_ARGB
block|,
name|convert_RGBA_to_ARGB
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|mask_alpha_converter_RGBx
block|,
name|mask_alpha_converter_RGBx
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGBX8888
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_RGBA_to_RGB
block|,
name|convert_RGBA_to_ARGB
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|mask_alpha_converter_RGBx
block|,
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_LITTLE_ENDIAN
literal|0
block|,
name|convert_ARGB_to_ARGB_PM
block|,
else|#
directive|else
literal|0
block|,
literal|0
block|,
endif|#
directive|endif
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGBA8888
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_RGBA_to_ARGB
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGBA8888_Premultiplied
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_RGB30_to_RGB
argument_list|<
name|PixelOrderBGR
argument_list|>
block|,
name|convert_RGB30_to_RGB
argument_list|<
name|PixelOrderBGR
argument_list|>
block|,
name|convert_RGB30_to_RGB
argument_list|<
name|PixelOrderBGR
argument_list|>
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_passthrough
block|,
name|convert_BGR30_to_RGB30
block|,
name|convert_BGR30_to_RGB30
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_BGR30
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_A2RGB30_PM_to_RGB30
block|,
literal|0
block|,
literal|0
block|,
name|convert_BGR30_to_RGB30
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_BGR30A2_Premultiplied
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_RGB30_to_RGB
argument_list|<
name|PixelOrderRGB
argument_list|>
block|,
name|convert_RGB30_to_RGB
argument_list|<
name|PixelOrderRGB
argument_list|>
block|,
name|convert_RGB30_to_RGB
argument_list|<
name|PixelOrderRGB
argument_list|>
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_BGR30_to_RGB30
block|,
name|convert_BGR30_to_RGB30
block|,
literal|0
block|,
literal|0
block|,
name|convert_passthrough
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB30
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_BGR30_to_RGB30
block|,
name|convert_A2RGB30_PM_to_RGB30
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,     }
block|,
comment|// Format_RGB30A2_Premultiplied
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_Alpha8_to_Indexed8
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_Alpha8
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_Grayscale8_to_Indexed8
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
comment|// Format_Grayscale8
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qimage_inplace_converter_map
name|InPlace_Image_Converter
name|qimage_inplace_converter_map
index|[
name|QImage
operator|::
name|NImageFormats
index|]
index|[
name|QImage
operator|::
name|NImageFormats
index|]
init|=
block|{
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_Mono
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_MonoLSB
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_indexed8_to_RGB_inplace
block|,
name|convert_indexed8_to_ARGB_PM_inplace
block|,
name|convert_indexed8_to_RGB16_inplace
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_Indexed8_to_Alpha8_inplace
block|,
name|convert_Indexed8_to_Grayscale8_inplace
block|,     }
block|,
comment|// Format_Indexed8
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|mask_alpha_converter_inplace
argument_list|<
name|QImage
operator|::
name|Format_ARGB32
argument_list|>
block|,
name|mask_alpha_converter_inplace
argument_list|<
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|>
block|,
name|convert_RGB_to_RGB16_inplace
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB32
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|mask_alpha_converter_inplace
argument_list|<
name|QImage
operator|::
name|Format_RGB32
argument_list|>
block|,
literal|0
block|,
ifdef|#
directive|ifdef
name|__SSE2__
name|convert_ARGB_to_ARGB_PM_inplace_sse2
block|,
else|#
directive|else
literal|0
block|,
endif|#
directive|endif
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_ARGB_to_RGBA_inplace
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_ARGB32
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_ARGB_to_RGBA_inplace
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_ARGB32_Premultiplied
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB16
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_ARGB8565_Premultiplied
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB666
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_ARGB6666_Premultiplied
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB555
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_ARGB8555_Premultiplied
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB888
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB444
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_ARGB4444_Premultiplied
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_RGBA_to_ARGB_inplace
argument_list|<
name|QImage
operator|::
name|Format_RGB32
argument_list|>
block|,
name|convert_RGBA_to_ARGB_inplace
argument_list|<
name|QImage
operator|::
name|Format_ARGB32
argument_list|>
block|,
name|convert_RGBA_to_ARGB_inplace
argument_list|<
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|>
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_passthrough_inplace
argument_list|<
name|QImage
operator|::
name|Format_RGBA8888
argument_list|>
block|,
name|convert_passthrough_inplace
argument_list|<
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
argument_list|>
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGBX8888
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_RGBA_to_ARGB_inplace
argument_list|<
name|QImage
operator|::
name|Format_RGB32
argument_list|>
block|,
name|convert_RGBA_to_ARGB_inplace
argument_list|<
name|QImage
operator|::
name|Format_ARGB32
argument_list|>
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_LITTLE_ENDIAN
operator|&&
name|__SSE2__
literal|0
block|,
name|convert_ARGB_to_ARGB_PM_inplace_sse2
block|,
else|#
directive|else
literal|0
block|,
literal|0
block|,
endif|#
directive|endif
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGBA8888
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_RGBA_to_ARGB_inplace
argument_list|<
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|>
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGBA8888_Premultiplied
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_passthrough_inplace
argument_list|<
name|QImage
operator|::
name|Format_A2BGR30_Premultiplied
argument_list|>
block|,
name|convert_BGR30_to_RGB30_inplace
block|,
name|convert_BGR30_to_RGB30_inplace
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_BGR30
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_A2RGB30_PM_to_RGB30_inplace
block|,
literal|0
block|,
literal|0
block|,
name|convert_BGR30_to_RGB30_inplace
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_BGR30A2_Premultiplied
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_BGR30_to_RGB30_inplace
block|,
name|convert_BGR30_to_RGB30_inplace
block|,
literal|0
block|,
name|convert_passthrough_inplace
argument_list|<
name|QImage
operator|::
name|Format_A2RGB30_Premultiplied
argument_list|>
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB30
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_BGR30_to_RGB30_inplace
block|,
name|convert_A2RGB30_PM_to_RGB30_inplace
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB30A2_Premultiplied
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_Alpha8_to_Indexed8_inplace
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_Alpha8
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|convert_Grayscale8_to_Indexed8_inplace
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
comment|// Format_Grayscale8
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qInitImageConversions
name|void
name|qInitImageConversions
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|__SSE2__
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_COMPILER_SUPPORTS_SSSE3
argument_list|)
if|if
condition|(
name|qCpuHasFeature
argument_list|(
name|SSSE3
argument_list|)
condition|)
block|{
specifier|extern
name|void
name|convert_RGB888_to_RGB32_ssse3
argument_list|(
name|QImageData
operator|*
name|dest
argument_list|,
specifier|const
name|QImageData
operator|*
name|src
argument_list|,
name|Qt
operator|::
name|ImageConversionFlags
argument_list|)
decl_stmt|;
name|qimage_converter_map
index|[
name|QImage
operator|::
name|Format_RGB888
index|]
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
operator|=
name|convert_RGB888_to_RGB32_ssse3
expr_stmt|;
name|qimage_converter_map
index|[
name|QImage
operator|::
name|Format_RGB888
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32
index|]
operator|=
name|convert_RGB888_to_RGB32_ssse3
expr_stmt|;
name|qimage_converter_map
index|[
name|QImage
operator|::
name|Format_RGB888
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|convert_RGB888_to_RGB32_ssse3
expr_stmt|;
block|}
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|QT_COMPILER_SUPPORTS_SSE4_1
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__SSE4_1__
argument_list|)
if|if
condition|(
name|qCpuHasFeature
argument_list|(
name|SSE4_1
argument_list|)
condition|)
block|{
specifier|extern
name|void
name|convert_ARGB_to_ARGB_PM_sse4
argument_list|(
name|QImageData
operator|*
name|dest
argument_list|,
specifier|const
name|QImageData
operator|*
name|src
argument_list|,
name|Qt
operator|::
name|ImageConversionFlags
argument_list|)
decl_stmt|;
name|qimage_converter_map
index|[
name|QImage
operator|::
name|Format_ARGB32
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|convert_ARGB_to_ARGB_PM_sse4
expr_stmt|;
name|qimage_converter_map
index|[
name|QImage
operator|::
name|Format_RGBA8888
index|]
index|[
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
index|]
operator|=
name|convert_ARGB_to_ARGB_PM_sse4
expr_stmt|;
block|}
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|QT_COMPILER_SUPPORTS_AVX2
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__AVX2__
argument_list|)
if|if
condition|(
name|qCpuHasFeature
argument_list|(
name|AVX2
argument_list|)
condition|)
block|{
specifier|extern
name|void
name|convert_ARGB_to_ARGB_PM_avx2
argument_list|(
name|QImageData
operator|*
name|dest
argument_list|,
specifier|const
name|QImageData
operator|*
name|src
argument_list|,
name|Qt
operator|::
name|ImageConversionFlags
argument_list|)
decl_stmt|;
name|qimage_converter_map
index|[
name|QImage
operator|::
name|Format_ARGB32
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|convert_ARGB_to_ARGB_PM_avx2
expr_stmt|;
name|qimage_converter_map
index|[
name|QImage
operator|::
name|Format_RGBA8888
index|]
index|[
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
index|]
operator|=
name|convert_ARGB_to_ARGB_PM_avx2
expr_stmt|;
block|}
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__ARM_NEON__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_PROCESSOR_ARM_64
argument_list|)
specifier|extern
name|void
name|convert_RGB888_to_RGB32_neon
argument_list|(
name|QImageData
operator|*
name|dest
argument_list|,
specifier|const
name|QImageData
operator|*
name|src
argument_list|,
name|Qt
operator|::
name|ImageConversionFlags
argument_list|)
decl_stmt|;
name|qimage_converter_map
index|[
name|QImage
operator|::
name|Format_RGB888
index|]
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
operator|=
name|convert_RGB888_to_RGB32_neon
expr_stmt|;
name|qimage_converter_map
index|[
name|QImage
operator|::
name|Format_RGB888
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32
index|]
operator|=
name|convert_RGB888_to_RGB32_neon
expr_stmt|;
name|qimage_converter_map
index|[
name|QImage
operator|::
name|Format_RGB888
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|convert_RGB888_to_RGB32_neon
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_COMPILER_SUPPORTS_MIPS_DSPR2
if|if
condition|(
name|qCpuHasFeature
argument_list|(
name|DSPR2
argument_list|)
condition|)
block|{
specifier|extern
name|bool
name|convert_ARGB_to_ARGB_PM_inplace_mips_dspr2
argument_list|(
name|QImageData
operator|*
name|data
argument_list|,
name|Qt
operator|::
name|ImageConversionFlags
argument_list|)
decl_stmt|;
name|qimage_inplace_converter_map
index|[
name|QImage
operator|::
name|Format_ARGB32
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|convert_ARGB_to_ARGB_PM_inplace_mips_dspr2
expr_stmt|;
specifier|extern
name|void
name|convert_RGB888_to_RGB32_mips_dspr2
argument_list|(
name|QImageData
operator|*
name|dest
argument_list|,
specifier|const
name|QImageData
operator|*
name|src
argument_list|,
name|Qt
operator|::
name|ImageConversionFlags
argument_list|)
decl_stmt|;
name|qimage_converter_map
index|[
name|QImage
operator|::
name|Format_RGB888
index|]
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
operator|=
name|convert_RGB888_to_RGB32_mips_dspr2
expr_stmt|;
name|qimage_converter_map
index|[
name|QImage
operator|::
name|Format_RGB888
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32
index|]
operator|=
name|convert_RGB888_to_RGB32_mips_dspr2
expr_stmt|;
name|qimage_converter_map
index|[
name|QImage
operator|::
name|Format_RGB888
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|convert_RGB888_to_RGB32_mips_dspr2
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
