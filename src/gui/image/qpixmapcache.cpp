begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_define
DECL|macro|Q_TEST_QPIXMAPCACHE
define|#
directive|define
name|Q_TEST_QPIXMAPCACHE
end_define
begin_include
include|#
directive|include
file|"qpixmapcache.h"
end_include
begin_include
include|#
directive|include
file|"qobject.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qpixmapcache_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|/*!     \class QPixmapCache     \inmodule QtGui      \brief The QPixmapCache class provides an application-wide cache for pixmaps.      This class is a tool for optimized drawing with QPixmap. You can     use it to store temporary pixmaps that are expensive to generate     without using more storage space than cacheLimit(). Use insert()     to insert pixmaps, find() to find them, and clear() to empty the     cache.      QPixmapCache contains no member data, only static functions to     access the global pixmap cache. It creates an internal QCache     object for caching the pixmaps.      The cache associates a pixmap with a user-provided string as a key,     or with a QPixmapCache::Key that the cache generates.     Using QPixmapCache::Key for keys is faster than using strings. The string API is     very convenient for complex keys but the QPixmapCache::Key API will be very     efficient and convenient for a one-to-one object-to-pixmap mapping - in     this case, you can store the keys as members of an object.      If two pixmaps are inserted into the cache using equal keys then the     last pixmap will replace the first pixmap in the cache. This follows the     behavior of the QHash and QCache classes.      The cache becomes full when the total size of all pixmaps in the     cache exceeds cacheLimit(). The initial cache limit is 10240 KB (10 MB);     you can change this by calling setCacheLimit() with the required value.     A pixmap takes roughly (\e{width} * \e{height} * \e{depth})/8 bytes of     memory.      The \e{Qt Quarterly} article     \l{http://doc.qt.digia.com/qq/qq12-qpixmapcache.html}{Optimizing     with QPixmapCache} explains how to use QPixmapCache to speed up     applications by caching the results of painting.      \sa QCache, QPixmap */
DECL|variable|cache_limit
specifier|static
name|int
name|cache_limit
init|=
literal|10240
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|cache_limit
comment|// 10 MB cache limit
end_comment
begin_comment
comment|/*!     \class QPixmapCache::Key     \brief The QPixmapCache::Key class can be used for efficient access     to the QPixmapCache.     \inmodule QtGui     \since 4.6      Use QPixmapCache::insert() to receive an instance of Key generated     by the pixmap cache. You can store the key in your own objects for     a very efficient one-to-one object-to-pixmap mapping. */
end_comment
begin_comment
comment|/*!     Constructs an empty Key object. */
end_comment
begin_constructor
DECL|function|Key
name|QPixmapCache
operator|::
name|Key
operator|::
name|Key
parameter_list|()
member_init_list|:
name|d
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!    \internal     Constructs a copy of \a other. */
end_comment
begin_constructor
DECL|function|Key
name|QPixmapCache
operator|::
name|Key
operator|::
name|Key
parameter_list|(
specifier|const
name|Key
modifier|&
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|d
condition|)
operator|++
operator|(
name|other
operator|.
name|d
operator|->
name|ref
operator|)
expr_stmt|;
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the key. */
end_comment
begin_destructor
DECL|function|~Key
name|QPixmapCache
operator|::
name|Key
operator|::
name|~
name|Key
parameter_list|()
block|{
if|if
condition|(
name|d
operator|&&
operator|--
operator|(
name|d
operator|->
name|ref
operator|)
operator|==
literal|0
condition|)
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \internal      Returns \c true if this key is the same as the given \a key; otherwise returns     false. */
end_comment
begin_function
DECL|function|operator ==
name|bool
name|QPixmapCache
operator|::
name|Key
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|d
operator|==
name|key
operator|.
name|d
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QPixmapCache::Key::operator !=(const Key&key) const     \internal */
end_comment
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|operator =
name|QPixmapCache
operator|::
name|Key
modifier|&
name|QPixmapCache
operator|::
name|Key
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|Key
modifier|&
name|other
parameter_list|)
block|{
if|if
condition|(
name|d
operator|!=
name|other
operator|.
name|d
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|d
condition|)
operator|++
operator|(
name|other
operator|.
name|d
operator|->
name|ref
operator|)
expr_stmt|;
if|if
condition|(
name|d
operator|&&
operator|--
operator|(
name|d
operator|->
name|ref
operator|)
operator|==
literal|0
condition|)
operator|delete
name|d
expr_stmt|;
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
end_function
begin_class
DECL|class|QPMCache
class|class
name|QPMCache
super|:
specifier|public
name|QObject
super|,
specifier|public
name|QCache
argument_list|<
name|QPixmapCache
operator|::
name|Key
argument_list|,
name|QPixmapCacheEntry
argument_list|>
block|{
name|Q_OBJECT
public|public:
name|QPMCache
parameter_list|()
constructor_decl|;
name|~
name|QPMCache
parameter_list|()
destructor_decl|;
name|void
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
parameter_list|)
function_decl|;
name|bool
name|insert
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
name|int
name|cost
parameter_list|)
function_decl|;
name|QPixmapCache
operator|::
name|Key
name|insert
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
name|int
name|cost
parameter_list|)
function_decl|;
name|bool
name|replace
parameter_list|(
specifier|const
name|QPixmapCache
operator|::
name|Key
modifier|&
name|key
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
name|int
name|cost
parameter_list|)
function_decl|;
name|bool
name|remove
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
function_decl|;
name|bool
name|remove
parameter_list|(
specifier|const
name|QPixmapCache
operator|::
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
name|void
name|resizeKeyArray
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
name|QPixmapCache
operator|::
name|Key
name|createKey
parameter_list|()
function_decl|;
name|void
name|releaseKey
parameter_list|(
specifier|const
name|QPixmapCache
operator|::
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
name|QPixmap
modifier|*
name|object
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
specifier|const
function_decl|;
name|QPixmap
modifier|*
name|object
parameter_list|(
specifier|const
name|QPixmapCache
operator|::
name|Key
modifier|&
name|key
parameter_list|)
specifier|const
function_decl|;
DECL|function|get
specifier|static
specifier|inline
name|QPixmapCache
operator|::
name|KeyData
modifier|*
name|get
parameter_list|(
specifier|const
name|QPixmapCache
operator|::
name|Key
modifier|&
name|key
parameter_list|)
block|{
return|return
name|key
operator|.
name|d
return|;
block|}
specifier|static
name|QPixmapCache
operator|::
name|KeyData
modifier|*
name|getKeyData
parameter_list|(
name|QPixmapCache
operator|::
name|Key
modifier|*
name|key
parameter_list|)
function_decl|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QPixmap
argument_list|>
argument_list|>
name|allPixmaps
parameter_list|()
specifier|const
function_decl|;
name|bool
name|flushDetachedPixmaps
parameter_list|(
name|bool
name|nt
parameter_list|)
function_decl|;
private|private:
DECL|enumerator|soon_time
DECL|enumerator|flush_time
enum|enum
block|{
name|soon_time
init|=
literal|10000
block|,
name|flush_time
init|=
literal|30000
block|}
enum|;
DECL|member|keyArray
name|int
modifier|*
name|keyArray
decl_stmt|;
DECL|member|theid
name|int
name|theid
decl_stmt|;
DECL|member|ps
name|int
name|ps
decl_stmt|;
DECL|member|keyArraySize
name|int
name|keyArraySize
decl_stmt|;
DECL|member|freeKey
name|int
name|freeKey
decl_stmt|;
DECL|member|cacheKeys
name|QHash
argument_list|<
name|QString
argument_list|,
name|QPixmapCache
operator|::
name|Key
argument_list|>
name|cacheKeys
decl_stmt|;
DECL|member|t
name|bool
name|t
decl_stmt|;
block|}
class|;
end_class
begin_function
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|"qpixmapcache.moc"
name|QT_END_INCLUDE_NAMESPACE
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
specifier|const
name|QPixmapCache
operator|::
name|Key
modifier|&
name|k
parameter_list|)
block|{
return|return
name|qHash
argument_list|(
name|QPMCache
operator|::
name|get
argument_list|(
name|k
argument_list|)
operator|->
name|key
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QPMCache
name|QPMCache
operator|::
name|QPMCache
parameter_list|()
member_init_list|:
name|QObject
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|QCache
argument_list|<
name|QPixmapCache
operator|::
name|Key
argument_list|,
name|QPixmapCacheEntry
argument_list|>
argument_list|(
name|cache_limit
operator|*
literal|1024
argument_list|)
member_init_list|,
name|keyArray
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|theid
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|ps
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|keyArraySize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|freeKey
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|t
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QPMCache
name|QPMCache
operator|::
name|~
name|QPMCache
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
name|free
argument_list|(
name|keyArray
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*   This is supposed to cut the cache size down by about 25% in a   minute once the application becomes idle, to let any inserted pixmap   remain in the cache for some time before it becomes a candidate for   cleaning-up, and to not cut down the size of the cache while the   cache is in active use.    When the last detached pixmap has been deleted from the cache, kill the   timer so Qt won't keep the CPU from going into sleep mode. Currently   the timer is not restarted when the pixmap becomes unused, but it does   restart once something else is added (i.e. the cache space is actually needed).    Returns \c true if any were removed. */
end_comment
begin_function
DECL|function|flushDetachedPixmaps
name|bool
name|QPMCache
operator|::
name|flushDetachedPixmaps
parameter_list|(
name|bool
name|nt
parameter_list|)
block|{
name|int
name|mc
init|=
name|maxCost
argument_list|()
decl_stmt|;
name|setMaxCost
argument_list|(
name|nt
condition|?
name|totalCost
argument_list|()
operator|*
literal|3
operator|/
literal|4
else|:
name|totalCost
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|setMaxCost
argument_list|(
name|mc
argument_list|)
expr_stmt|;
name|ps
operator|=
name|totalCost
argument_list|()
expr_stmt|;
name|bool
name|any
init|=
literal|false
decl_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QPixmapCache
operator|::
name|Key
argument_list|>
operator|::
name|iterator
name|it
init|=
name|cacheKeys
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|cacheKeys
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|contains
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
condition|)
block|{
name|releaseKey
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|=
name|cacheKeys
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
name|any
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
operator|++
name|it
expr_stmt|;
block|}
block|}
return|return
name|any
return|;
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|QPMCache
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
parameter_list|)
block|{
name|bool
name|nt
init|=
name|totalCost
argument_list|()
operator|==
name|ps
decl_stmt|;
if|if
condition|(
operator|!
name|flushDetachedPixmaps
argument_list|(
name|nt
argument_list|)
condition|)
block|{
name|killTimer
argument_list|(
name|theid
argument_list|)
expr_stmt|;
name|theid
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nt
operator|!=
name|t
condition|)
block|{
name|killTimer
argument_list|(
name|theid
argument_list|)
expr_stmt|;
name|theid
operator|=
name|startTimer
argument_list|(
name|nt
condition|?
name|soon_time
else|:
name|flush_time
argument_list|)
expr_stmt|;
name|t
operator|=
name|nt
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|object
name|QPixmap
modifier|*
name|QPMCache
operator|::
name|object
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
specifier|const
block|{
name|QPixmapCache
operator|::
name|Key
name|cacheKey
init|=
name|cacheKeys
operator|.
name|value
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cacheKey
operator|.
name|d
operator|||
operator|!
name|cacheKey
operator|.
name|d
operator|->
name|isValid
condition|)
block|{
cast|const_cast
argument_list|<
name|QPMCache
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|cacheKeys
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|QPixmap
modifier|*
name|ptr
init|=
name|QCache
argument_list|<
name|QPixmapCache
operator|::
name|Key
argument_list|,
name|QPixmapCacheEntry
argument_list|>
operator|::
name|object
argument_list|(
name|cacheKey
argument_list|)
decl_stmt|;
comment|//We didn't find the pixmap in the cache, the key is not valid anymore
if|if
condition|(
operator|!
name|ptr
condition|)
block|{
cast|const_cast
argument_list|<
name|QPMCache
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|cacheKeys
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|ptr
return|;
block|}
end_function
begin_function
DECL|function|object
name|QPixmap
modifier|*
name|QPMCache
operator|::
name|object
parameter_list|(
specifier|const
name|QPixmapCache
operator|::
name|Key
modifier|&
name|key
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|key
operator|.
name|d
operator|->
name|isValid
argument_list|)
expr_stmt|;
name|QPixmap
modifier|*
name|ptr
init|=
name|QCache
argument_list|<
name|QPixmapCache
operator|::
name|Key
argument_list|,
name|QPixmapCacheEntry
argument_list|>
operator|::
name|object
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|//We didn't find the pixmap in the cache, the key is not valid anymore
if|if
condition|(
operator|!
name|ptr
condition|)
cast|const_cast
argument_list|<
name|QPMCache
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|releaseKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|ptr
return|;
block|}
end_function
begin_function
DECL|function|insert
name|bool
name|QPMCache
operator|::
name|insert
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
name|int
name|cost
parameter_list|)
block|{
name|QPixmapCache
operator|::
name|Key
name|cacheKey
decl_stmt|;
name|QPixmapCache
operator|::
name|Key
name|oldCacheKey
init|=
name|cacheKeys
operator|.
name|value
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|//If for the same key we add already a pixmap we should delete it
if|if
condition|(
name|oldCacheKey
operator|.
name|d
condition|)
block|{
name|QCache
argument_list|<
name|QPixmapCache
operator|::
name|Key
argument_list|,
name|QPixmapCacheEntry
argument_list|>
operator|::
name|remove
argument_list|(
name|oldCacheKey
argument_list|)
expr_stmt|;
name|cacheKeys
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|//we create a new key the old one has been removed
name|cacheKey
operator|=
name|createKey
argument_list|()
expr_stmt|;
name|bool
name|success
init|=
name|QCache
argument_list|<
name|QPixmapCache
operator|::
name|Key
argument_list|,
name|QPixmapCacheEntry
argument_list|>
operator|::
name|insert
argument_list|(
name|cacheKey
argument_list|,
operator|new
name|QPixmapCacheEntry
argument_list|(
name|cacheKey
argument_list|,
name|pixmap
argument_list|)
argument_list|,
name|cost
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|cacheKeys
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|cacheKey
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|theid
condition|)
block|{
name|theid
operator|=
name|startTimer
argument_list|(
name|flush_time
argument_list|)
expr_stmt|;
name|t
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//Insertion failed we released the new allocated key
name|releaseKey
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
end_function
begin_function
DECL|function|insert
name|QPixmapCache
operator|::
name|Key
name|QPMCache
operator|::
name|insert
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
name|int
name|cost
parameter_list|)
block|{
name|QPixmapCache
operator|::
name|Key
name|cacheKey
init|=
name|createKey
argument_list|()
decl_stmt|;
name|bool
name|success
init|=
name|QCache
argument_list|<
name|QPixmapCache
operator|::
name|Key
argument_list|,
name|QPixmapCacheEntry
argument_list|>
operator|::
name|insert
argument_list|(
name|cacheKey
argument_list|,
operator|new
name|QPixmapCacheEntry
argument_list|(
name|cacheKey
argument_list|,
name|pixmap
argument_list|)
argument_list|,
name|cost
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
if|if
condition|(
operator|!
name|theid
condition|)
block|{
name|theid
operator|=
name|startTimer
argument_list|(
name|flush_time
argument_list|)
expr_stmt|;
name|t
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//Insertion failed we released the key and return an invalid one
name|releaseKey
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
return|return
name|cacheKey
return|;
block|}
end_function
begin_function
DECL|function|replace
name|bool
name|QPMCache
operator|::
name|replace
parameter_list|(
specifier|const
name|QPixmapCache
operator|::
name|Key
modifier|&
name|key
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
name|int
name|cost
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|key
operator|.
name|d
operator|->
name|isValid
argument_list|)
expr_stmt|;
comment|//If for the same key we had already an entry so we should delete the pixmap and use the new one
name|QCache
argument_list|<
name|QPixmapCache
operator|::
name|Key
argument_list|,
name|QPixmapCacheEntry
argument_list|>
operator|::
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|Key
name|cacheKey
init|=
name|createKey
argument_list|()
decl_stmt|;
name|bool
name|success
init|=
name|QCache
argument_list|<
name|QPixmapCache
operator|::
name|Key
argument_list|,
name|QPixmapCacheEntry
argument_list|>
operator|::
name|insert
argument_list|(
name|cacheKey
argument_list|,
operator|new
name|QPixmapCacheEntry
argument_list|(
name|cacheKey
argument_list|,
name|pixmap
argument_list|)
argument_list|,
name|cost
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
if|if
condition|(
operator|!
name|theid
condition|)
block|{
name|theid
operator|=
name|startTimer
argument_list|(
name|flush_time
argument_list|)
expr_stmt|;
name|t
operator|=
literal|false
expr_stmt|;
block|}
cast|const_cast
argument_list|<
name|QPixmapCache
operator|::
name|Key
operator|&
argument_list|>
argument_list|(
name|key
argument_list|)
operator|=
name|cacheKey
expr_stmt|;
block|}
else|else
block|{
comment|//Insertion failed we released the key
name|releaseKey
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
end_function
begin_function
DECL|function|remove
name|bool
name|QPMCache
operator|::
name|remove
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
block|{
name|QPixmapCache
operator|::
name|Key
name|cacheKey
init|=
name|cacheKeys
operator|.
name|value
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|//The key was not in the cache
if|if
condition|(
operator|!
name|cacheKey
operator|.
name|d
condition|)
return|return
literal|false
return|;
name|cacheKeys
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|QCache
argument_list|<
name|QPixmapCache
operator|::
name|Key
argument_list|,
name|QPixmapCacheEntry
argument_list|>
operator|::
name|remove
argument_list|(
name|cacheKey
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|remove
name|bool
name|QPMCache
operator|::
name|remove
parameter_list|(
specifier|const
name|QPixmapCache
operator|::
name|Key
modifier|&
name|key
parameter_list|)
block|{
return|return
name|QCache
argument_list|<
name|QPixmapCache
operator|::
name|Key
argument_list|,
name|QPixmapCacheEntry
argument_list|>
operator|::
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|resizeKeyArray
name|void
name|QPMCache
operator|::
name|resizeKeyArray
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|<=
name|keyArraySize
operator|||
name|size
operator|==
literal|0
condition|)
return|return;
name|keyArray
operator|=
name|q_check_ptr
argument_list|(
cast|reinterpret_cast
argument_list|<
name|int
operator|*
argument_list|>
argument_list|(
name|realloc
argument_list|(
name|keyArray
argument_list|,
name|size
operator|*
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|keyArraySize
init|;
name|i
operator|!=
name|size
condition|;
operator|++
name|i
control|)
name|keyArray
index|[
name|i
index|]
operator|=
name|i
operator|+
literal|1
expr_stmt|;
name|keyArraySize
operator|=
name|size
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createKey
name|QPixmapCache
operator|::
name|Key
name|QPMCache
operator|::
name|createKey
parameter_list|()
block|{
if|if
condition|(
name|freeKey
operator|==
name|keyArraySize
condition|)
name|resizeKeyArray
argument_list|(
name|keyArraySize
condition|?
name|keyArraySize
operator|<<
literal|1
else|:
literal|2
argument_list|)
expr_stmt|;
name|int
name|id
init|=
name|freeKey
decl_stmt|;
name|freeKey
operator|=
name|keyArray
index|[
name|id
index|]
expr_stmt|;
name|QPixmapCache
operator|::
name|Key
name|key
decl_stmt|;
name|QPixmapCache
operator|::
name|KeyData
modifier|*
name|d
init|=
name|QPMCache
operator|::
name|getKeyData
argument_list|(
operator|&
name|key
argument_list|)
decl_stmt|;
name|d
operator|->
name|key
operator|=
operator|++
name|id
expr_stmt|;
return|return
name|key
return|;
block|}
end_function
begin_function
DECL|function|releaseKey
name|void
name|QPMCache
operator|::
name|releaseKey
parameter_list|(
specifier|const
name|QPixmapCache
operator|::
name|Key
modifier|&
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|.
name|d
operator|->
name|key
operator|>
name|keyArraySize
operator|||
name|key
operator|.
name|d
operator|->
name|key
operator|<=
literal|0
condition|)
return|return;
name|key
operator|.
name|d
operator|->
name|key
operator|--
expr_stmt|;
name|keyArray
index|[
name|key
operator|.
name|d
operator|->
name|key
index|]
operator|=
name|freeKey
expr_stmt|;
name|freeKey
operator|=
name|key
operator|.
name|d
operator|->
name|key
expr_stmt|;
name|key
operator|.
name|d
operator|->
name|isValid
operator|=
literal|false
expr_stmt|;
name|key
operator|.
name|d
operator|->
name|key
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|QPMCache
operator|::
name|clear
parameter_list|()
block|{
name|free
argument_list|(
name|keyArray
argument_list|)
expr_stmt|;
name|keyArray
operator|=
literal|0
expr_stmt|;
name|freeKey
operator|=
literal|0
expr_stmt|;
name|keyArraySize
operator|=
literal|0
expr_stmt|;
comment|//Mark all keys as invalid
name|QList
argument_list|<
name|QPixmapCache
operator|::
name|Key
argument_list|>
name|keys
init|=
name|QCache
argument_list|<
name|QPixmapCache
operator|::
name|Key
argument_list|,
name|QPixmapCacheEntry
argument_list|>
operator|::
name|keys
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|keys
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|d
operator|->
name|isValid
operator|=
literal|false
expr_stmt|;
name|QCache
argument_list|<
name|QPixmapCache
operator|::
name|Key
argument_list|,
name|QPixmapCacheEntry
argument_list|>
operator|::
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getKeyData
name|QPixmapCache
operator|::
name|KeyData
modifier|*
name|QPMCache
operator|::
name|getKeyData
parameter_list|(
name|QPixmapCache
operator|::
name|Key
modifier|*
name|key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|key
operator|->
name|d
condition|)
name|key
operator|->
name|d
operator|=
operator|new
name|QPixmapCache
operator|::
name|KeyData
expr_stmt|;
return|return
name|key
operator|->
name|d
return|;
block|}
end_function
begin_function
DECL|function|allPixmaps
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QPixmap
argument_list|>
argument_list|>
name|QPMCache
operator|::
name|allPixmaps
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QPixmap
argument_list|>
argument_list|>
name|r
decl_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QPixmapCache
operator|::
name|Key
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|cacheKeys
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|cacheKeys
operator|.
name|end
argument_list|()
condition|)
block|{
name|QPixmap
modifier|*
name|ptr
init|=
name|QCache
argument_list|<
name|QPixmapCache
operator|::
name|Key
argument_list|,
name|QPixmapCacheEntry
argument_list|>
operator|::
name|object
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
name|r
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QString
argument_list|,
name|QPixmap
argument_list|>
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|,
operator|*
name|ptr
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
end_function
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QPMCache
argument_list|,
argument|pm_cache
argument_list|)
end_macro
begin_function
DECL|function|q_QPixmapCache_keyHashSize
name|int
name|Q_AUTOTEST_EXPORT
name|q_QPixmapCache_keyHashSize
parameter_list|()
block|{
return|return
name|pm_cache
argument_list|()
operator|->
name|size
argument_list|()
return|;
block|}
end_function
begin_destructor
DECL|function|~QPixmapCacheEntry
name|QPixmapCacheEntry
operator|::
name|~
name|QPixmapCacheEntry
parameter_list|()
block|{
name|pm_cache
argument_list|()
operator|->
name|releaseKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \obsolete     \overload      Returns the pixmap associated with the \a key in the cache, or     null if there is no such pixmap.      \warning If valid, you should copy the pixmap immediately (this is     fast). Subsequent insertions into the cache could cause the     pointer to become invalid. For this reason, we recommend you use     bool find(const QString&, QPixmap*) instead.      Example:     \snippet code/src_gui_image_qpixmapcache.cpp 0 */
end_comment
begin_function
DECL|function|find
name|QPixmap
modifier|*
name|QPixmapCache
operator|::
name|find
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
block|{
return|return
name|pm_cache
argument_list|()
operator|->
name|object
argument_list|(
name|key
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete      Use bool find(const QString&, QPixmap*) instead. */
end_comment
begin_function
DECL|function|find
name|bool
name|QPixmapCache
operator|::
name|find
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
block|{
return|return
name|find
argument_list|(
name|key
argument_list|,
operator|&
name|pixmap
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Looks for a cached pixmap associated with the given \a key in the cache.     If the pixmap is found, the function sets \a pixmap to that pixmap and     returns \c true; otherwise it leaves \a pixmap alone and returns \c false.      \since 4.6      Example:     \snippet code/src_gui_image_qpixmapcache.cpp 1 */
end_comment
begin_function
DECL|function|find
name|bool
name|QPixmapCache
operator|::
name|find
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
name|QPixmap
modifier|*
name|pixmap
parameter_list|)
block|{
name|QPixmap
modifier|*
name|ptr
init|=
name|pm_cache
argument_list|()
operator|->
name|object
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
operator|&&
name|pixmap
condition|)
operator|*
name|pixmap
operator|=
operator|*
name|ptr
expr_stmt|;
return|return
name|ptr
operator|!=
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Looks for a cached pixmap associated with the given \a key in the cache.     If the pixmap is found, the function sets \a pixmap to that pixmap and     returns \c true; otherwise it leaves \a pixmap alone and returns \c false. If     the pixmap is not found, it means that the \a key is no longer valid,     so it will be released for the next insertion.      \since 4.6 */
end_comment
begin_function
DECL|function|find
name|bool
name|QPixmapCache
operator|::
name|find
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|,
name|QPixmap
modifier|*
name|pixmap
parameter_list|)
block|{
comment|//The key is not valid anymore, a flush happened before probably
if|if
condition|(
operator|!
name|key
operator|.
name|d
operator|||
operator|!
name|key
operator|.
name|d
operator|->
name|isValid
condition|)
return|return
literal|false
return|;
name|QPixmap
modifier|*
name|ptr
init|=
name|pm_cache
argument_list|()
operator|->
name|object
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
operator|&&
name|pixmap
condition|)
operator|*
name|pixmap
operator|=
operator|*
name|ptr
expr_stmt|;
return|return
name|ptr
operator|!=
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Inserts a copy of the pixmap \a pixmap associated with the \a key into     the cache.      All pixmaps inserted by the Qt library have a key starting with     "$qt", so your own pixmap keys should never begin "$qt".      When a pixmap is inserted and the cache is about to exceed its     limit, it removes pixmaps until there is enough room for the     pixmap to be inserted.      The oldest pixmaps (least recently accessed in the cache) are     deleted when more space is needed.      The function returns \c true if the object was inserted into the     cache; otherwise it returns \c false.      \sa setCacheLimit() */
end_comment
begin_function
DECL|function|insert
name|bool
name|QPixmapCache
operator|::
name|insert
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
block|{
return|return
name|pm_cache
argument_list|()
operator|->
name|insert
argument_list|(
name|key
argument_list|,
name|pixmap
argument_list|,
name|pixmap
operator|.
name|width
argument_list|()
operator|*
name|pixmap
operator|.
name|height
argument_list|()
operator|*
name|pixmap
operator|.
name|depth
argument_list|()
operator|/
literal|8
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Inserts a copy of the given \a pixmap into the cache and returns a key     that can be used to retrieve it.      When a pixmap is inserted and the cache is about to exceed its     limit, it removes pixmaps until there is enough room for the     pixmap to be inserted.      The oldest pixmaps (least recently accessed in the cache) are     deleted when more space is needed.      \sa setCacheLimit(), replace()      \since 4.6 */
end_comment
begin_function
DECL|function|insert
name|QPixmapCache
operator|::
name|Key
name|QPixmapCache
operator|::
name|insert
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
block|{
return|return
name|pm_cache
argument_list|()
operator|->
name|insert
argument_list|(
name|pixmap
argument_list|,
name|pixmap
operator|.
name|width
argument_list|()
operator|*
name|pixmap
operator|.
name|height
argument_list|()
operator|*
name|pixmap
operator|.
name|depth
argument_list|()
operator|/
literal|8
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Replaces the pixmap associated with the given \a key with the \a pixmap     specified. Returns \c true if the \a pixmap has been correctly inserted into     the cache; otherwise returns \c false.      \sa setCacheLimit(), insert()      \since 4.6 */
end_comment
begin_function
DECL|function|replace
name|bool
name|QPixmapCache
operator|::
name|replace
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
block|{
comment|//The key is not valid anymore, a flush happened before probably
if|if
condition|(
operator|!
name|key
operator|.
name|d
operator|||
operator|!
name|key
operator|.
name|d
operator|->
name|isValid
condition|)
return|return
literal|false
return|;
return|return
name|pm_cache
argument_list|()
operator|->
name|replace
argument_list|(
name|key
argument_list|,
name|pixmap
argument_list|,
name|pixmap
operator|.
name|width
argument_list|()
operator|*
name|pixmap
operator|.
name|height
argument_list|()
operator|*
name|pixmap
operator|.
name|depth
argument_list|()
operator|/
literal|8
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the cache limit (in kilobytes).      The default cache limit is 10240 KB.      \sa setCacheLimit() */
end_comment
begin_function
DECL|function|cacheLimit
name|int
name|QPixmapCache
operator|::
name|cacheLimit
parameter_list|()
block|{
return|return
name|cache_limit
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the cache limit to \a n kilobytes.      The default setting is 10240 KB.      \sa cacheLimit() */
end_comment
begin_function
DECL|function|setCacheLimit
name|void
name|QPixmapCache
operator|::
name|setCacheLimit
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|cache_limit
operator|=
name|n
expr_stmt|;
name|pm_cache
argument_list|()
operator|->
name|setMaxCost
argument_list|(
literal|1024
operator|*
name|cache_limit
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Removes the pixmap associated with \a key from the cache. */
end_comment
begin_function
DECL|function|remove
name|void
name|QPixmapCache
operator|::
name|remove
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
block|{
name|pm_cache
argument_list|()
operator|->
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Removes the pixmap associated with \a key from the cache and releases   the key for a future insertion.    \since 4.6 */
end_comment
begin_function
DECL|function|remove
name|void
name|QPixmapCache
operator|::
name|remove
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
block|{
comment|//The key is not valid anymore, a flush happened before probably
if|if
condition|(
operator|!
name|key
operator|.
name|d
operator|||
operator|!
name|key
operator|.
name|d
operator|->
name|isValid
condition|)
return|return;
name|pm_cache
argument_list|()
operator|->
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Removes all pixmaps from the cache. */
end_comment
begin_function
DECL|function|clear
name|void
name|QPixmapCache
operator|::
name|clear
parameter_list|()
block|{
name|QT_TRY
block|{
name|pm_cache
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|const std::bad_alloc&
argument_list|)
block|{
comment|// if we ran out of memory during pm_cache(), it's no leak,
comment|// so just ignore it.
block|}
block|}
end_function
begin_function
DECL|function|flushDetachedPixmaps
name|void
name|QPixmapCache
operator|::
name|flushDetachedPixmaps
parameter_list|()
block|{
name|pm_cache
argument_list|()
operator|->
name|flushDetachedPixmaps
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|totalUsed
name|int
name|QPixmapCache
operator|::
name|totalUsed
parameter_list|()
block|{
return|return
operator|(
name|pm_cache
argument_list|()
operator|->
name|totalCost
argument_list|()
operator|+
literal|1023
operator|)
operator|/
literal|1024
return|;
block|}
end_function
begin_function
DECL|function|allPixmaps
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QPixmap
argument_list|>
argument_list|>
name|QPixmapCache
operator|::
name|allPixmaps
parameter_list|()
block|{
return|return
name|pm_cache
argument_list|()
operator|->
name|allPixmaps
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
