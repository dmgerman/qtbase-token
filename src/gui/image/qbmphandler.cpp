begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"private/qbmphandler_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_IMAGEFORMAT_BMP
end_ifndef
begin_include
include|#
directive|include
file|<qimage.h>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qvector.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|swapPixel01
specifier|static
name|void
name|swapPixel01
parameter_list|(
name|QImage
modifier|*
name|image
parameter_list|)
comment|// 1-bpp: swap 0 and 1 pixels
block|{
name|int
name|i
decl_stmt|;
if|if
condition|(
name|image
operator|->
name|depth
argument_list|()
operator|==
literal|1
operator|&&
name|image
operator|->
name|colorCount
argument_list|()
operator|==
literal|2
condition|)
block|{
specifier|register
name|uint
modifier|*
name|p
init|=
operator|(
name|uint
operator|*
operator|)
name|image
operator|->
name|bits
argument_list|()
decl_stmt|;
name|int
name|nbytes
init|=
name|image
operator|->
name|byteCount
argument_list|()
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|nbytes
operator|/
literal|4
condition|;
name|i
operator|++
control|)
block|{
operator|*
name|p
operator|=
operator|~
operator|*
name|p
expr_stmt|;
name|p
operator|++
expr_stmt|;
block|}
name|uchar
modifier|*
name|p2
init|=
operator|(
name|uchar
operator|*
operator|)
name|p
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
operator|(
name|nbytes
operator|&
literal|3
operator|)
condition|;
name|i
operator|++
control|)
block|{
operator|*
name|p2
operator|=
operator|~
operator|*
name|p2
expr_stmt|;
name|p2
operator|++
expr_stmt|;
block|}
name|QRgb
name|t
init|=
name|image
operator|->
name|color
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// swap color 0 and 1
name|image
operator|->
name|setColor
argument_list|(
literal|0
argument_list|,
name|image
operator|->
name|color
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|image
operator|->
name|setColor
argument_list|(
literal|1
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*     QImageIO::defineIOHandler("BMP", "^BM", 0,                                read_bmp_image, write_bmp_image); */
end_comment
begin_comment
comment|/*****************************************************************************   BMP (DIB) image read/write functions  *****************************************************************************/
end_comment
begin_decl_stmt
DECL|variable|BMP_FILEHDR_SIZE
specifier|const
name|int
name|BMP_FILEHDR_SIZE
init|=
literal|14
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|BMP_FILEHDR_SIZE
comment|// size of BMP_FILEHDR data
end_comment
begin_function
DECL|function|operator >>
specifier|static
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
name|BMP_FILEHDR
modifier|&
name|bf
parameter_list|)
block|{
comment|// read file header
name|s
operator|.
name|readRawData
argument_list|(
name|bf
operator|.
name|bfType
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|s
operator|>>
name|bf
operator|.
name|bfSize
operator|>>
name|bf
operator|.
name|bfReserved1
operator|>>
name|bf
operator|.
name|bfReserved2
operator|>>
name|bf
operator|.
name|bfOffBits
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_function
DECL|function|operator <<
specifier|static
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
specifier|const
name|BMP_FILEHDR
modifier|&
name|bf
parameter_list|)
block|{
comment|// write file header
name|s
operator|.
name|writeRawData
argument_list|(
name|bf
operator|.
name|bfType
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|s
operator|<<
name|bf
operator|.
name|bfSize
operator|<<
name|bf
operator|.
name|bfReserved1
operator|<<
name|bf
operator|.
name|bfReserved2
operator|<<
name|bf
operator|.
name|bfOffBits
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|BMP_OLD
specifier|const
name|int
name|BMP_OLD
init|=
literal|12
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|BMP_OLD
comment|// old Windows/OS2 BMP size
end_comment
begin_decl_stmt
DECL|variable|BMP_WIN
specifier|const
name|int
name|BMP_WIN
init|=
literal|40
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|BMP_WIN
comment|// Windows BMP v3 size
end_comment
begin_decl_stmt
DECL|variable|BMP_OS2
specifier|const
name|int
name|BMP_OS2
init|=
literal|64
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|BMP_OS2
comment|// new OS/2 BMP size
end_comment
begin_decl_stmt
DECL|variable|BMP_WIN4
specifier|const
name|int
name|BMP_WIN4
init|=
literal|108
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|BMP_WIN4
comment|// Windows BMP v4 size
end_comment
begin_decl_stmt
DECL|variable|BMP_WIN5
specifier|const
name|int
name|BMP_WIN5
init|=
literal|124
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|BMP_WIN5
comment|// Windows BMP v5 size
end_comment
begin_decl_stmt
DECL|variable|BMP_RGB
specifier|const
name|int
name|BMP_RGB
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|BMP_RGB
comment|// no compression
end_comment
begin_decl_stmt
DECL|variable|BMP_RLE8
specifier|const
name|int
name|BMP_RLE8
init|=
literal|1
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|BMP_RLE8
comment|// run-length encoded, 8 bits
end_comment
begin_decl_stmt
DECL|variable|BMP_RLE4
specifier|const
name|int
name|BMP_RLE4
init|=
literal|2
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|BMP_RLE4
comment|// run-length encoded, 4 bits
end_comment
begin_decl_stmt
DECL|variable|BMP_BITFIELDS
specifier|const
name|int
name|BMP_BITFIELDS
init|=
literal|3
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|BMP_BITFIELDS
comment|// RGB values encoded in data as bit-fields
end_comment
begin_function
DECL|function|operator >>
specifier|static
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
name|BMP_INFOHDR
modifier|&
name|bi
parameter_list|)
block|{
name|s
operator|>>
name|bi
operator|.
name|biSize
expr_stmt|;
if|if
condition|(
name|bi
operator|.
name|biSize
operator|==
name|BMP_WIN
operator|||
name|bi
operator|.
name|biSize
operator|==
name|BMP_OS2
operator|||
name|bi
operator|.
name|biSize
operator|==
name|BMP_WIN4
operator|||
name|bi
operator|.
name|biSize
operator|==
name|BMP_WIN5
condition|)
block|{
name|s
operator|>>
name|bi
operator|.
name|biWidth
operator|>>
name|bi
operator|.
name|biHeight
operator|>>
name|bi
operator|.
name|biPlanes
operator|>>
name|bi
operator|.
name|biBitCount
expr_stmt|;
name|s
operator|>>
name|bi
operator|.
name|biCompression
operator|>>
name|bi
operator|.
name|biSizeImage
expr_stmt|;
name|s
operator|>>
name|bi
operator|.
name|biXPelsPerMeter
operator|>>
name|bi
operator|.
name|biYPelsPerMeter
expr_stmt|;
name|s
operator|>>
name|bi
operator|.
name|biClrUsed
operator|>>
name|bi
operator|.
name|biClrImportant
expr_stmt|;
block|}
else|else
block|{
comment|// probably old Windows format
name|qint16
name|w
decl_stmt|,
name|h
decl_stmt|;
name|s
operator|>>
name|w
operator|>>
name|h
operator|>>
name|bi
operator|.
name|biPlanes
operator|>>
name|bi
operator|.
name|biBitCount
expr_stmt|;
name|bi
operator|.
name|biWidth
operator|=
name|w
expr_stmt|;
name|bi
operator|.
name|biHeight
operator|=
name|h
expr_stmt|;
name|bi
operator|.
name|biCompression
operator|=
name|BMP_RGB
expr_stmt|;
comment|// no compression
name|bi
operator|.
name|biSizeImage
operator|=
literal|0
expr_stmt|;
name|bi
operator|.
name|biXPelsPerMeter
operator|=
name|bi
operator|.
name|biYPelsPerMeter
operator|=
literal|0
expr_stmt|;
name|bi
operator|.
name|biClrUsed
operator|=
name|bi
operator|.
name|biClrImportant
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
end_function
begin_function
DECL|function|operator <<
specifier|static
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
specifier|const
name|BMP_INFOHDR
modifier|&
name|bi
parameter_list|)
block|{
name|s
operator|<<
name|bi
operator|.
name|biSize
expr_stmt|;
name|s
operator|<<
name|bi
operator|.
name|biWidth
operator|<<
name|bi
operator|.
name|biHeight
expr_stmt|;
name|s
operator|<<
name|bi
operator|.
name|biPlanes
expr_stmt|;
name|s
operator|<<
name|bi
operator|.
name|biBitCount
expr_stmt|;
name|s
operator|<<
name|bi
operator|.
name|biCompression
expr_stmt|;
name|s
operator|<<
name|bi
operator|.
name|biSizeImage
expr_stmt|;
name|s
operator|<<
name|bi
operator|.
name|biXPelsPerMeter
operator|<<
name|bi
operator|.
name|biYPelsPerMeter
expr_stmt|;
name|s
operator|<<
name|bi
operator|.
name|biClrUsed
operator|<<
name|bi
operator|.
name|biClrImportant
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_function
DECL|function|calc_shift
specifier|static
name|int
name|calc_shift
parameter_list|(
name|int
name|mask
parameter_list|)
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|mask
operator|&&
operator|!
operator|(
name|mask
operator|&
literal|1
operator|)
condition|)
block|{
name|result
operator|++
expr_stmt|;
name|mask
operator|>>=
literal|1
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|read_dib_fileheader
specifier|static
name|bool
name|read_dib_fileheader
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
name|BMP_FILEHDR
modifier|&
name|bf
parameter_list|)
block|{
comment|// read BMP file header
name|s
operator|>>
name|bf
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|status
argument_list|()
operator|!=
name|QDataStream
operator|::
name|Ok
condition|)
return|return
literal|false
return|;
comment|// check header
if|if
condition|(
name|qstrncmp
argument_list|(
name|bf
operator|.
name|bfType
argument_list|,
literal|"BM"
argument_list|,
literal|2
argument_list|)
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|read_dib_infoheader
specifier|static
name|bool
name|read_dib_infoheader
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
name|BMP_INFOHDR
modifier|&
name|bi
parameter_list|)
block|{
name|s
operator|>>
name|bi
expr_stmt|;
comment|// read BMP info header
if|if
condition|(
name|s
operator|.
name|status
argument_list|()
operator|!=
name|QDataStream
operator|::
name|Ok
condition|)
return|return
literal|false
return|;
name|int
name|nbits
init|=
name|bi
operator|.
name|biBitCount
decl_stmt|;
name|int
name|comp
init|=
name|bi
operator|.
name|biCompression
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|nbits
operator|==
literal|1
operator|||
name|nbits
operator|==
literal|4
operator|||
name|nbits
operator|==
literal|8
operator|||
name|nbits
operator|==
literal|16
operator|||
name|nbits
operator|==
literal|24
operator|||
name|nbits
operator|==
literal|32
operator|)
operator|||
name|bi
operator|.
name|biPlanes
operator|!=
literal|1
operator|||
name|comp
operator|>
name|BMP_BITFIELDS
condition|)
return|return
literal|false
return|;
comment|// weird BMP image
if|if
condition|(
operator|!
operator|(
name|comp
operator|==
name|BMP_RGB
operator|||
operator|(
name|nbits
operator|==
literal|4
operator|&&
name|comp
operator|==
name|BMP_RLE4
operator|)
operator|||
operator|(
name|nbits
operator|==
literal|8
operator|&&
name|comp
operator|==
name|BMP_RLE8
operator|)
operator|||
operator|(
operator|(
name|nbits
operator|==
literal|16
operator|||
name|nbits
operator|==
literal|32
operator|)
operator|&&
name|comp
operator|==
name|BMP_BITFIELDS
operator|)
operator|)
condition|)
return|return
literal|false
return|;
comment|// weird compression type
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|read_dib_body
specifier|static
name|bool
name|read_dib_body
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
specifier|const
name|BMP_INFOHDR
modifier|&
name|bi
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|startpos
parameter_list|,
name|QImage
modifier|&
name|image
parameter_list|)
block|{
name|QIODevice
modifier|*
name|d
init|=
name|s
operator|.
name|device
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|atEnd
argument_list|()
condition|)
comment|// end of stream/file
return|return
literal|false
return|;
if|#
directive|if
literal|0
block|qDebug("offset...........%d", offset);     qDebug("startpos.........%d", startpos);     qDebug("biSize...........%d", bi.biSize);     qDebug("biWidth..........%d", bi.biWidth);     qDebug("biHeight.........%d", bi.biHeight);     qDebug("biPlanes.........%d", bi.biPlanes);     qDebug("biBitCount.......%d", bi.biBitCount);     qDebug("biCompression....%d", bi.biCompression);     qDebug("biSizeImage......%d", bi.biSizeImage);     qDebug("biXPelsPerMeter..%d", bi.biXPelsPerMeter);     qDebug("biYPelsPerMeter..%d", bi.biYPelsPerMeter);     qDebug("biClrUsed........%d", bi.biClrUsed);     qDebug("biClrImportant...%d", bi.biClrImportant);
endif|#
directive|endif
name|int
name|w
init|=
name|bi
operator|.
name|biWidth
decl_stmt|,
name|h
init|=
name|bi
operator|.
name|biHeight
decl_stmt|,
name|nbits
init|=
name|bi
operator|.
name|biBitCount
decl_stmt|;
name|int
name|t
init|=
name|bi
operator|.
name|biSize
decl_stmt|,
name|comp
init|=
name|bi
operator|.
name|biCompression
decl_stmt|;
name|int
name|red_mask
init|=
literal|0
decl_stmt|;
name|int
name|green_mask
init|=
literal|0
decl_stmt|;
name|int
name|blue_mask
init|=
literal|0
decl_stmt|;
name|int
name|red_shift
init|=
literal|0
decl_stmt|;
name|int
name|green_shift
init|=
literal|0
decl_stmt|;
name|int
name|blue_shift
init|=
literal|0
decl_stmt|;
name|int
name|red_scale
init|=
literal|0
decl_stmt|;
name|int
name|green_scale
init|=
literal|0
decl_stmt|;
name|int
name|blue_scale
init|=
literal|0
decl_stmt|;
name|int
name|ncols
init|=
literal|0
decl_stmt|;
name|int
name|depth
init|=
literal|0
decl_stmt|;
name|QImage
operator|::
name|Format
name|format
decl_stmt|;
switch|switch
condition|(
name|nbits
condition|)
block|{
case|case
literal|32
case|:
case|case
literal|24
case|:
case|case
literal|16
case|:
name|depth
operator|=
literal|32
expr_stmt|;
name|format
operator|=
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
break|break;
case|case
literal|8
case|:
case|case
literal|4
case|:
name|depth
operator|=
literal|8
expr_stmt|;
name|format
operator|=
name|QImage
operator|::
name|Format_Indexed8
expr_stmt|;
break|break;
default|default:
name|depth
operator|=
literal|1
expr_stmt|;
name|format
operator|=
name|QImage
operator|::
name|Format_Mono
expr_stmt|;
block|}
if|if
condition|(
name|bi
operator|.
name|biHeight
operator|<
literal|0
condition|)
name|h
operator|=
operator|-
name|h
expr_stmt|;
comment|// support images with negative height
if|if
condition|(
name|image
operator|.
name|size
argument_list|()
operator|!=
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
operator|||
name|image
operator|.
name|format
argument_list|()
operator|!=
name|format
condition|)
block|{
name|image
operator|=
name|QImage
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
comment|// could not create image
return|return
literal|false
return|;
block|}
if|if
condition|(
name|depth
operator|!=
literal|32
condition|)
block|{
name|ncols
operator|=
name|bi
operator|.
name|biClrUsed
condition|?
name|bi
operator|.
name|biClrUsed
else|:
literal|1
operator|<<
name|nbits
expr_stmt|;
if|if
condition|(
name|ncols
operator|>
literal|256
condition|)
comment|// sanity check - don't run out of mem if color table is broken
return|return
literal|false
return|;
name|image
operator|.
name|setColorCount
argument_list|(
name|ncols
argument_list|)
expr_stmt|;
block|}
name|image
operator|.
name|setDotsPerMeterX
argument_list|(
name|bi
operator|.
name|biXPelsPerMeter
argument_list|)
expr_stmt|;
name|image
operator|.
name|setDotsPerMeterY
argument_list|(
name|bi
operator|.
name|biYPelsPerMeter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isSequential
argument_list|()
condition|)
name|d
operator|->
name|seek
argument_list|(
name|startpos
operator|+
name|BMP_FILEHDR_SIZE
operator|+
operator|(
name|bi
operator|.
name|biSize
operator|>=
name|BMP_WIN4
condition|?
name|BMP_WIN
else|:
name|bi
operator|.
name|biSize
operator|)
argument_list|)
expr_stmt|;
comment|// goto start of colormap
if|if
condition|(
name|bi
operator|.
name|biSize
operator|>=
name|BMP_WIN4
operator|||
operator|(
name|comp
operator|==
name|BMP_BITFIELDS
operator|&&
operator|(
name|nbits
operator|==
literal|16
operator|||
name|nbits
operator|==
literal|32
operator|)
operator|)
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|ncols
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|red_mask
argument_list|,
sizeof|sizeof
argument_list|(
name|red_mask
argument_list|)
argument_list|)
operator|!=
sizeof|sizeof
argument_list|(
name|red_mask
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|green_mask
argument_list|,
sizeof|sizeof
argument_list|(
name|green_mask
argument_list|)
argument_list|)
operator|!=
sizeof|sizeof
argument_list|(
name|green_mask
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|blue_mask
argument_list|,
sizeof|sizeof
argument_list|(
name|blue_mask
argument_list|)
argument_list|)
operator|!=
sizeof|sizeof
argument_list|(
name|blue_mask
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// Read BMP v4+ header
if|if
condition|(
name|bi
operator|.
name|biSize
operator|>=
name|BMP_WIN4
condition|)
block|{
name|int
name|alpha_mask
init|=
literal|0
decl_stmt|;
name|int
name|CSType
init|=
literal|0
decl_stmt|;
name|int
name|gamma_red
init|=
literal|0
decl_stmt|;
name|int
name|gamma_green
init|=
literal|0
decl_stmt|;
name|int
name|gamma_blue
init|=
literal|0
decl_stmt|;
name|int
name|endpoints
index|[
literal|9
index|]
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|alpha_mask
argument_list|,
sizeof|sizeof
argument_list|(
name|alpha_mask
argument_list|)
argument_list|)
operator|!=
sizeof|sizeof
argument_list|(
name|alpha_mask
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|CSType
argument_list|,
sizeof|sizeof
argument_list|(
name|CSType
argument_list|)
argument_list|)
operator|!=
sizeof|sizeof
argument_list|(
name|CSType
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|endpoints
argument_list|,
sizeof|sizeof
argument_list|(
name|endpoints
argument_list|)
argument_list|)
operator|!=
sizeof|sizeof
argument_list|(
name|endpoints
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|gamma_red
argument_list|,
sizeof|sizeof
argument_list|(
name|gamma_red
argument_list|)
argument_list|)
operator|!=
sizeof|sizeof
argument_list|(
name|gamma_red
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|gamma_green
argument_list|,
sizeof|sizeof
argument_list|(
name|gamma_green
argument_list|)
argument_list|)
operator|!=
sizeof|sizeof
argument_list|(
name|gamma_green
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|gamma_blue
argument_list|,
sizeof|sizeof
argument_list|(
name|gamma_blue
argument_list|)
argument_list|)
operator|!=
sizeof|sizeof
argument_list|(
name|gamma_blue
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|bi
operator|.
name|biSize
operator|==
name|BMP_WIN5
condition|)
block|{
name|qint32
name|intent
init|=
literal|0
decl_stmt|;
name|qint32
name|profileData
init|=
literal|0
decl_stmt|;
name|qint32
name|profileSize
init|=
literal|0
decl_stmt|;
name|qint32
name|reserved
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|intent
argument_list|,
sizeof|sizeof
argument_list|(
name|intent
argument_list|)
argument_list|)
operator|!=
sizeof|sizeof
argument_list|(
name|intent
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|profileData
argument_list|,
sizeof|sizeof
argument_list|(
name|profileData
argument_list|)
argument_list|)
operator|!=
sizeof|sizeof
argument_list|(
name|profileData
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|profileSize
argument_list|,
sizeof|sizeof
argument_list|(
name|profileSize
argument_list|)
argument_list|)
operator|!=
sizeof|sizeof
argument_list|(
name|profileSize
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|reserved
argument_list|,
sizeof|sizeof
argument_list|(
name|reserved
argument_list|)
argument_list|)
operator|!=
sizeof|sizeof
argument_list|(
name|reserved
argument_list|)
operator|||
name|reserved
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
block|}
block|}
block|}
if|if
condition|(
name|ncols
operator|>
literal|0
condition|)
block|{
comment|// read color table
name|uchar
name|rgb
index|[
literal|4
index|]
decl_stmt|;
name|int
name|rgb_len
init|=
name|t
operator|==
name|BMP_OLD
condition|?
literal|3
else|:
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ncols
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|rgb
argument_list|,
name|rgb_len
argument_list|)
operator|!=
name|rgb_len
condition|)
return|return
literal|false
return|;
name|image
operator|.
name|setColor
argument_list|(
name|i
argument_list|,
name|qRgb
argument_list|(
name|rgb
index|[
literal|2
index|]
argument_list|,
name|rgb
index|[
literal|1
index|]
argument_list|,
name|rgb
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|atEnd
argument_list|()
condition|)
comment|// truncated file
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|comp
operator|==
name|BMP_BITFIELDS
operator|&&
operator|(
name|nbits
operator|==
literal|16
operator|||
name|nbits
operator|==
literal|32
operator|)
condition|)
block|{
name|red_shift
operator|=
name|calc_shift
argument_list|(
name|red_mask
argument_list|)
expr_stmt|;
name|red_scale
operator|=
literal|256
operator|/
operator|(
operator|(
name|red_mask
operator|>>
name|red_shift
operator|)
operator|+
literal|1
operator|)
expr_stmt|;
name|green_shift
operator|=
name|calc_shift
argument_list|(
name|green_mask
argument_list|)
expr_stmt|;
name|green_scale
operator|=
literal|256
operator|/
operator|(
operator|(
name|green_mask
operator|>>
name|green_shift
operator|)
operator|+
literal|1
operator|)
expr_stmt|;
name|blue_shift
operator|=
name|calc_shift
argument_list|(
name|blue_mask
argument_list|)
expr_stmt|;
name|blue_scale
operator|=
literal|256
operator|/
operator|(
operator|(
name|blue_mask
operator|>>
name|blue_shift
operator|)
operator|+
literal|1
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|comp
operator|==
name|BMP_RGB
operator|&&
operator|(
name|nbits
operator|==
literal|24
operator|||
name|nbits
operator|==
literal|32
operator|)
condition|)
block|{
name|blue_mask
operator|=
literal|0x000000ff
expr_stmt|;
name|green_mask
operator|=
literal|0x0000ff00
expr_stmt|;
name|red_mask
operator|=
literal|0x00ff0000
expr_stmt|;
name|blue_shift
operator|=
literal|0
expr_stmt|;
name|green_shift
operator|=
literal|8
expr_stmt|;
name|red_shift
operator|=
literal|16
expr_stmt|;
name|blue_scale
operator|=
name|green_scale
operator|=
name|red_scale
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|comp
operator|==
name|BMP_RGB
operator|&&
name|nbits
operator|==
literal|16
condition|)
block|{
name|blue_mask
operator|=
literal|0x001f
expr_stmt|;
name|green_mask
operator|=
literal|0x03e0
expr_stmt|;
name|red_mask
operator|=
literal|0x7c00
expr_stmt|;
name|blue_shift
operator|=
literal|0
expr_stmt|;
name|green_shift
operator|=
literal|2
expr_stmt|;
name|red_shift
operator|=
literal|7
expr_stmt|;
name|red_scale
operator|=
literal|1
expr_stmt|;
name|green_scale
operator|=
literal|1
expr_stmt|;
name|blue_scale
operator|=
literal|8
expr_stmt|;
block|}
comment|// offset can be bogus, be careful
if|if
condition|(
name|offset
operator|>=
literal|0
operator|&&
name|startpos
operator|+
name|offset
operator|>
name|d
operator|->
name|pos
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|isSequential
argument_list|()
condition|)
name|d
operator|->
name|seek
argument_list|(
name|startpos
operator|+
name|offset
argument_list|)
expr_stmt|;
comment|// start of image data
block|}
name|int
name|bpl
init|=
name|image
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
name|uchar
modifier|*
name|data
init|=
name|image
operator|.
name|bits
argument_list|()
decl_stmt|;
if|if
condition|(
name|nbits
operator|==
literal|1
condition|)
block|{
comment|// 1 bit BMP image
while|while
condition|(
operator|--
name|h
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|(
name|data
operator|+
name|h
operator|*
name|bpl
operator|)
argument_list|,
name|bpl
argument_list|)
operator|!=
name|bpl
condition|)
break|break;
block|}
if|if
condition|(
name|ncols
operator|==
literal|2
operator|&&
name|qGray
argument_list|(
name|image
operator|.
name|color
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|<
name|qGray
argument_list|(
name|image
operator|.
name|color
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
name|swapPixel01
argument_list|(
operator|&
name|image
argument_list|)
expr_stmt|;
comment|// pixel 0 is white!
block|}
elseif|else
if|if
condition|(
name|nbits
operator|==
literal|4
condition|)
block|{
comment|// 4 bit BMP image
name|int
name|buflen
init|=
operator|(
operator|(
name|w
operator|+
literal|7
operator|)
operator|/
literal|8
operator|)
operator|*
literal|4
decl_stmt|;
name|uchar
modifier|*
name|buf
init|=
operator|new
name|uchar
index|[
name|buflen
index|]
decl_stmt|;
if|if
condition|(
name|comp
operator|==
name|BMP_RLE4
condition|)
block|{
comment|// run length compression
name|int
name|x
init|=
literal|0
decl_stmt|,
name|y
init|=
literal|0
decl_stmt|,
name|c
decl_stmt|,
name|i
decl_stmt|;
name|quint8
name|b
decl_stmt|;
specifier|register
name|uchar
modifier|*
name|p
init|=
name|data
operator|+
operator|(
name|h
operator|-
literal|1
operator|)
operator|*
name|bpl
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|endp
init|=
name|p
operator|+
name|w
decl_stmt|;
while|while
condition|(
name|y
operator|<
name|h
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|getChar
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|b
argument_list|)
condition|)
break|break;
if|if
condition|(
name|b
operator|==
literal|0
condition|)
block|{
comment|// escape code
if|if
condition|(
operator|!
name|d
operator|->
name|getChar
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|b
argument_list|)
operator|||
name|b
operator|==
literal|1
condition|)
block|{
name|y
operator|=
name|h
expr_stmt|;
comment|// exit loop
block|}
else|else
switch|switch
condition|(
name|b
condition|)
block|{
case|case
literal|0
case|:
comment|// end of line
name|x
operator|=
literal|0
expr_stmt|;
name|y
operator|++
expr_stmt|;
name|p
operator|=
name|data
operator|+
operator|(
name|h
operator|-
name|y
operator|-
literal|1
operator|)
operator|*
name|bpl
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// delta (jump)
block|{
name|quint8
name|tmp
decl_stmt|;
name|d
operator|->
name|getChar
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|tmp
argument_list|)
expr_stmt|;
name|x
operator|+=
name|tmp
expr_stmt|;
name|d
operator|->
name|getChar
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|tmp
argument_list|)
expr_stmt|;
name|y
operator|+=
name|tmp
expr_stmt|;
block|}
comment|// Protection
if|if
condition|(
operator|(
name|uint
operator|)
name|x
operator|>=
operator|(
name|uint
operator|)
name|w
condition|)
name|x
operator|=
name|w
operator|-
literal|1
expr_stmt|;
if|if
condition|(
operator|(
name|uint
operator|)
name|y
operator|>=
operator|(
name|uint
operator|)
name|h
condition|)
name|y
operator|=
name|h
operator|-
literal|1
expr_stmt|;
name|p
operator|=
name|data
operator|+
operator|(
name|h
operator|-
name|y
operator|-
literal|1
operator|)
operator|*
name|bpl
operator|+
name|x
expr_stmt|;
break|break;
default|default:
comment|// absolute mode
comment|// Protection
if|if
condition|(
name|p
operator|+
name|b
operator|>
name|endp
condition|)
name|b
operator|=
name|endp
operator|-
name|p
expr_stmt|;
name|i
operator|=
operator|(
name|c
operator|=
name|b
operator|)
operator|/
literal|2
expr_stmt|;
while|while
condition|(
name|i
operator|--
condition|)
block|{
name|d
operator|->
name|getChar
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|b
argument_list|)
expr_stmt|;
operator|*
name|p
operator|++
operator|=
name|b
operator|>>
literal|4
expr_stmt|;
operator|*
name|p
operator|++
operator|=
name|b
operator|&
literal|0x0f
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|&
literal|1
condition|)
block|{
name|unsigned
name|char
name|tmp
decl_stmt|;
name|d
operator|->
name|getChar
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|tmp
argument_list|)
expr_stmt|;
operator|*
name|p
operator|++
operator|=
name|tmp
operator|>>
literal|4
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
operator|(
name|c
operator|&
literal|3
operator|)
operator|+
literal|1
operator|)
operator|&
literal|2
operator|)
operator|==
literal|2
condition|)
name|d
operator|->
name|getChar
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// align on word boundary
name|x
operator|+=
name|c
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// encoded mode
comment|// Protection
if|if
condition|(
name|p
operator|+
name|b
operator|>
name|endp
condition|)
name|b
operator|=
name|endp
operator|-
name|p
expr_stmt|;
name|i
operator|=
operator|(
name|c
operator|=
name|b
operator|)
operator|/
literal|2
expr_stmt|;
name|d
operator|->
name|getChar
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|b
argument_list|)
expr_stmt|;
comment|// 2 pixels to be repeated
while|while
condition|(
name|i
operator|--
condition|)
block|{
operator|*
name|p
operator|++
operator|=
name|b
operator|>>
literal|4
expr_stmt|;
operator|*
name|p
operator|++
operator|=
name|b
operator|&
literal|0x0f
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|&
literal|1
condition|)
operator|*
name|p
operator|++
operator|=
name|b
operator|>>
literal|4
expr_stmt|;
name|x
operator|+=
name|c
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|comp
operator|==
name|BMP_RGB
condition|)
block|{
comment|// no compression
name|memset
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|h
operator|*
name|bpl
argument_list|)
expr_stmt|;
while|while
condition|(
operator|--
name|h
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|buf
argument_list|,
name|buflen
argument_list|)
operator|!=
name|buflen
condition|)
break|break;
specifier|register
name|uchar
modifier|*
name|p
init|=
name|data
operator|+
name|h
operator|*
name|bpl
decl_stmt|;
name|uchar
modifier|*
name|b
init|=
name|buf
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|w
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
comment|// convert nibbles to bytes
operator|*
name|p
operator|++
operator|=
operator|*
name|b
operator|>>
literal|4
expr_stmt|;
operator|*
name|p
operator|++
operator|=
operator|*
name|b
operator|++
operator|&
literal|0x0f
expr_stmt|;
block|}
if|if
condition|(
name|w
operator|&
literal|1
condition|)
comment|// the last nibble
operator|*
name|p
operator|=
operator|*
name|b
operator|>>
literal|4
expr_stmt|;
block|}
block|}
operator|delete
index|[]
name|buf
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nbits
operator|==
literal|8
condition|)
block|{
comment|// 8 bit BMP image
if|if
condition|(
name|comp
operator|==
name|BMP_RLE8
condition|)
block|{
comment|// run length compression
name|int
name|x
init|=
literal|0
decl_stmt|,
name|y
init|=
literal|0
decl_stmt|;
name|quint8
name|b
decl_stmt|;
specifier|register
name|uchar
modifier|*
name|p
init|=
name|data
operator|+
operator|(
name|h
operator|-
literal|1
operator|)
operator|*
name|bpl
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|endp
init|=
name|p
operator|+
name|w
decl_stmt|;
while|while
condition|(
name|y
operator|<
name|h
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|getChar
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|b
argument_list|)
condition|)
break|break;
if|if
condition|(
name|b
operator|==
literal|0
condition|)
block|{
comment|// escape code
if|if
condition|(
operator|!
name|d
operator|->
name|getChar
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|b
argument_list|)
operator|||
name|b
operator|==
literal|1
condition|)
block|{
name|y
operator|=
name|h
expr_stmt|;
comment|// exit loop
block|}
else|else
switch|switch
condition|(
name|b
condition|)
block|{
case|case
literal|0
case|:
comment|// end of line
name|x
operator|=
literal|0
expr_stmt|;
name|y
operator|++
expr_stmt|;
name|p
operator|=
name|data
operator|+
operator|(
name|h
operator|-
name|y
operator|-
literal|1
operator|)
operator|*
name|bpl
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// delta (jump)
comment|// Protection
if|if
condition|(
operator|(
name|uint
operator|)
name|x
operator|>=
operator|(
name|uint
operator|)
name|w
condition|)
name|x
operator|=
name|w
operator|-
literal|1
expr_stmt|;
if|if
condition|(
operator|(
name|uint
operator|)
name|y
operator|>=
operator|(
name|uint
operator|)
name|h
condition|)
name|y
operator|=
name|h
operator|-
literal|1
expr_stmt|;
block|{
name|quint8
name|tmp
decl_stmt|;
name|d
operator|->
name|getChar
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|tmp
argument_list|)
expr_stmt|;
name|x
operator|+=
name|tmp
expr_stmt|;
name|d
operator|->
name|getChar
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|tmp
argument_list|)
expr_stmt|;
name|y
operator|+=
name|tmp
expr_stmt|;
block|}
name|p
operator|=
name|data
operator|+
operator|(
name|h
operator|-
name|y
operator|-
literal|1
operator|)
operator|*
name|bpl
operator|+
name|x
expr_stmt|;
break|break;
default|default:
comment|// absolute mode
comment|// Protection
if|if
condition|(
name|p
operator|+
name|b
operator|>
name|endp
condition|)
name|b
operator|=
name|endp
operator|-
name|p
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|p
argument_list|,
name|b
argument_list|)
operator|!=
name|b
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|(
name|b
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
name|d
operator|->
name|getChar
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// align on word boundary
name|x
operator|+=
name|b
expr_stmt|;
name|p
operator|+=
name|b
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// encoded mode
comment|// Protection
if|if
condition|(
name|p
operator|+
name|b
operator|>
name|endp
condition|)
name|b
operator|=
name|endp
operator|-
name|p
expr_stmt|;
name|char
name|tmp
decl_stmt|;
name|d
operator|->
name|getChar
argument_list|(
operator|&
name|tmp
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|p
argument_list|,
name|tmp
argument_list|,
name|b
argument_list|)
expr_stmt|;
comment|// repeat pixel
name|x
operator|+=
name|b
expr_stmt|;
name|p
operator|+=
name|b
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|comp
operator|==
name|BMP_RGB
condition|)
block|{
comment|// uncompressed
while|while
condition|(
operator|--
name|h
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|data
operator|+
name|h
operator|*
name|bpl
argument_list|,
name|bpl
argument_list|)
operator|!=
name|bpl
condition|)
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|nbits
operator|==
literal|16
operator|||
name|nbits
operator|==
literal|24
operator|||
name|nbits
operator|==
literal|32
condition|)
block|{
comment|// 16,24,32 bit BMP image
specifier|register
name|QRgb
modifier|*
name|p
decl_stmt|;
name|QRgb
modifier|*
name|end
decl_stmt|;
name|uchar
modifier|*
name|buf24
init|=
operator|new
name|uchar
index|[
name|bpl
index|]
decl_stmt|;
name|int
name|bpl24
init|=
operator|(
operator|(
name|w
operator|*
name|nbits
operator|+
literal|31
operator|)
operator|/
literal|32
operator|)
operator|*
literal|4
decl_stmt|;
name|uchar
modifier|*
name|b
decl_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
operator|--
name|h
operator|>=
literal|0
condition|)
block|{
name|p
operator|=
operator|(
name|QRgb
operator|*
operator|)
operator|(
name|data
operator|+
name|h
operator|*
name|bpl
operator|)
expr_stmt|;
name|end
operator|=
name|p
operator|+
name|w
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|buf24
argument_list|,
name|bpl24
argument_list|)
operator|!=
name|bpl24
condition|)
break|break;
name|b
operator|=
name|buf24
expr_stmt|;
while|while
condition|(
name|p
operator|<
name|end
condition|)
block|{
name|c
operator|=
operator|*
operator|(
name|uchar
operator|*
operator|)
name|b
operator||
operator|(
operator|*
operator|(
name|uchar
operator|*
operator|)
operator|(
name|b
operator|+
literal|1
operator|)
operator|<<
literal|8
operator|)
expr_stmt|;
if|if
condition|(
name|nbits
operator|!=
literal|16
condition|)
name|c
operator||=
operator|*
operator|(
name|uchar
operator|*
operator|)
operator|(
name|b
operator|+
literal|2
operator|)
operator|<<
literal|16
expr_stmt|;
operator|*
name|p
operator|++
operator|=
name|qRgb
argument_list|(
operator|(
operator|(
name|c
operator|&
name|red_mask
operator|)
operator|>>
name|red_shift
operator|)
operator|*
name|red_scale
argument_list|,
operator|(
operator|(
name|c
operator|&
name|green_mask
operator|)
operator|>>
name|green_shift
operator|)
operator|*
name|green_scale
argument_list|,
operator|(
operator|(
name|c
operator|&
name|blue_mask
operator|)
operator|>>
name|blue_shift
operator|)
operator|*
name|blue_scale
argument_list|)
expr_stmt|;
name|b
operator|+=
name|nbits
operator|/
literal|8
expr_stmt|;
block|}
block|}
operator|delete
index|[]
name|buf24
expr_stmt|;
block|}
if|if
condition|(
name|bi
operator|.
name|biHeight
operator|<
literal|0
condition|)
block|{
comment|// Flip the image
name|uchar
modifier|*
name|buf
init|=
operator|new
name|uchar
index|[
name|bpl
index|]
decl_stmt|;
name|h
operator|=
operator|-
name|bi
operator|.
name|biHeight
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
operator|/
literal|2
condition|;
operator|++
name|y
control|)
block|{
name|memcpy
argument_list|(
name|buf
argument_list|,
name|data
operator|+
name|y
operator|*
name|bpl
argument_list|,
name|bpl
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|data
operator|+
name|y
operator|*
name|bpl
argument_list|,
name|data
operator|+
operator|(
name|h
operator|-
name|y
operator|-
literal|1
operator|)
operator|*
name|bpl
argument_list|,
name|bpl
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|data
operator|+
operator|(
name|h
operator|-
name|y
operator|-
literal|1
operator|)
operator|*
name|bpl
argument_list|,
name|buf
argument_list|,
name|bpl
argument_list|)
expr_stmt|;
block|}
operator|delete
index|[]
name|buf
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// this is also used in qmime_win.cpp
end_comment
begin_function
DECL|function|qt_write_dib
name|bool
name|qt_write_dib
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
name|QImage
name|image
parameter_list|)
block|{
name|int
name|nbits
decl_stmt|;
name|int
name|bpl_bmp
decl_stmt|;
name|int
name|bpl
init|=
name|image
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
name|QIODevice
modifier|*
name|d
init|=
name|s
operator|.
name|device
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isWritable
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|8
operator|&&
name|image
operator|.
name|colorCount
argument_list|()
operator|<=
literal|16
condition|)
block|{
name|bpl_bmp
operator|=
operator|(
operator|(
operator|(
name|bpl
operator|+
literal|1
operator|)
operator|/
literal|2
operator|+
literal|3
operator|)
operator|/
literal|4
operator|)
operator|*
literal|4
expr_stmt|;
name|nbits
operator|=
literal|4
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|32
condition|)
block|{
name|bpl_bmp
operator|=
operator|(
operator|(
name|image
operator|.
name|width
argument_list|()
operator|*
literal|24
operator|+
literal|31
operator|)
operator|/
literal|32
operator|)
operator|*
literal|4
expr_stmt|;
name|nbits
operator|=
literal|24
expr_stmt|;
block|}
else|else
block|{
name|bpl_bmp
operator|=
name|bpl
expr_stmt|;
name|nbits
operator|=
name|image
operator|.
name|depth
argument_list|()
expr_stmt|;
block|}
name|BMP_INFOHDR
name|bi
decl_stmt|;
name|bi
operator|.
name|biSize
operator|=
name|BMP_WIN
expr_stmt|;
comment|// build info header
name|bi
operator|.
name|biWidth
operator|=
name|image
operator|.
name|width
argument_list|()
expr_stmt|;
name|bi
operator|.
name|biHeight
operator|=
name|image
operator|.
name|height
argument_list|()
expr_stmt|;
name|bi
operator|.
name|biPlanes
operator|=
literal|1
expr_stmt|;
name|bi
operator|.
name|biBitCount
operator|=
name|nbits
expr_stmt|;
name|bi
operator|.
name|biCompression
operator|=
name|BMP_RGB
expr_stmt|;
name|bi
operator|.
name|biSizeImage
operator|=
name|bpl_bmp
operator|*
name|image
operator|.
name|height
argument_list|()
expr_stmt|;
name|bi
operator|.
name|biXPelsPerMeter
operator|=
name|image
operator|.
name|dotsPerMeterX
argument_list|()
condition|?
name|image
operator|.
name|dotsPerMeterX
argument_list|()
else|:
literal|2834
expr_stmt|;
comment|// 72 dpi default
name|bi
operator|.
name|biYPelsPerMeter
operator|=
name|image
operator|.
name|dotsPerMeterY
argument_list|()
condition|?
name|image
operator|.
name|dotsPerMeterY
argument_list|()
else|:
literal|2834
expr_stmt|;
name|bi
operator|.
name|biClrUsed
operator|=
name|image
operator|.
name|colorCount
argument_list|()
expr_stmt|;
name|bi
operator|.
name|biClrImportant
operator|=
name|image
operator|.
name|colorCount
argument_list|()
expr_stmt|;
name|s
operator|<<
name|bi
expr_stmt|;
comment|// write info header
if|if
condition|(
name|s
operator|.
name|status
argument_list|()
operator|!=
name|QDataStream
operator|::
name|Ok
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|image
operator|.
name|depth
argument_list|()
operator|!=
literal|32
condition|)
block|{
comment|// write color table
name|uchar
modifier|*
name|color_table
init|=
operator|new
name|uchar
index|[
literal|4
operator|*
name|image
operator|.
name|colorCount
argument_list|()
index|]
decl_stmt|;
name|uchar
modifier|*
name|rgb
init|=
name|color_table
decl_stmt|;
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|c
init|=
name|image
operator|.
name|colorTable
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image
operator|.
name|colorCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
operator|*
name|rgb
operator|++
operator|=
name|qBlue
argument_list|(
name|c
index|[
name|i
index|]
argument_list|)
expr_stmt|;
operator|*
name|rgb
operator|++
operator|=
name|qGreen
argument_list|(
name|c
index|[
name|i
index|]
argument_list|)
expr_stmt|;
operator|*
name|rgb
operator|++
operator|=
name|qRed
argument_list|(
name|c
index|[
name|i
index|]
argument_list|)
expr_stmt|;
operator|*
name|rgb
operator|++
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
name|color_table
argument_list|,
literal|4
operator|*
name|image
operator|.
name|colorCount
argument_list|()
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
operator|delete
index|[]
name|color_table
expr_stmt|;
return|return
literal|false
return|;
block|}
operator|delete
index|[]
name|color_table
expr_stmt|;
block|}
if|if
condition|(
name|image
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_MonoLSB
condition|)
name|image
operator|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Mono
argument_list|)
expr_stmt|;
name|int
name|y
decl_stmt|;
if|if
condition|(
name|nbits
operator|==
literal|1
operator|||
name|nbits
operator|==
literal|8
condition|)
block|{
comment|// direct output
for|for
control|(
name|y
operator|=
name|image
operator|.
name|height
argument_list|()
operator|-
literal|1
init|;
name|y
operator|>=
literal|0
condition|;
name|y
operator|--
control|)
block|{
if|if
condition|(
name|d
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
name|image
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
argument_list|,
name|bpl
argument_list|)
operator|==
operator|-
literal|1
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
name|uchar
modifier|*
name|buf
init|=
operator|new
name|uchar
index|[
name|bpl_bmp
index|]
decl_stmt|;
name|uchar
modifier|*
name|b
decl_stmt|,
modifier|*
name|end
decl_stmt|;
specifier|register
name|uchar
modifier|*
name|p
decl_stmt|;
name|memset
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|bpl_bmp
argument_list|)
expr_stmt|;
for|for
control|(
name|y
operator|=
name|image
operator|.
name|height
argument_list|()
operator|-
literal|1
init|;
name|y
operator|>=
literal|0
condition|;
name|y
operator|--
control|)
block|{
comment|// write the image bits
if|if
condition|(
name|nbits
operator|==
literal|4
condition|)
block|{
comment|// convert 8 -> 4 bits
name|p
operator|=
name|image
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
expr_stmt|;
name|b
operator|=
name|buf
expr_stmt|;
name|end
operator|=
name|b
operator|+
name|image
operator|.
name|width
argument_list|()
operator|/
literal|2
expr_stmt|;
while|while
condition|(
name|b
operator|<
name|end
condition|)
block|{
operator|*
name|b
operator|++
operator|=
operator|(
operator|*
name|p
operator|<<
literal|4
operator|)
operator||
operator|(
operator|*
operator|(
name|p
operator|+
literal|1
operator|)
operator|&
literal|0x0f
operator|)
expr_stmt|;
name|p
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|image
operator|.
name|width
argument_list|()
operator|&
literal|1
condition|)
operator|*
name|b
operator|=
operator|*
name|p
operator|<<
literal|4
expr_stmt|;
block|}
else|else
block|{
comment|// 32 bits
name|QRgb
modifier|*
name|p
init|=
operator|(
name|QRgb
operator|*
operator|)
name|image
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|QRgb
modifier|*
name|end
init|=
name|p
operator|+
name|image
operator|.
name|width
argument_list|()
decl_stmt|;
name|b
operator|=
name|buf
expr_stmt|;
while|while
condition|(
name|p
operator|<
name|end
condition|)
block|{
operator|*
name|b
operator|++
operator|=
name|qBlue
argument_list|(
operator|*
name|p
argument_list|)
expr_stmt|;
operator|*
name|b
operator|++
operator|=
name|qGreen
argument_list|(
operator|*
name|p
argument_list|)
expr_stmt|;
operator|*
name|b
operator|++
operator|=
name|qRed
argument_list|(
operator|*
name|p
argument_list|)
expr_stmt|;
name|p
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bpl_bmp
operator|!=
name|d
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
name|buf
argument_list|,
name|bpl_bmp
argument_list|)
condition|)
block|{
operator|delete
index|[]
name|buf
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
operator|delete
index|[]
name|buf
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// this is also used in qmime_win.cpp
end_comment
begin_function
DECL|function|qt_read_dib
name|bool
name|qt_read_dib
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
name|QImage
modifier|&
name|image
parameter_list|)
block|{
name|BMP_INFOHDR
name|bi
decl_stmt|;
if|if
condition|(
operator|!
name|read_dib_infoheader
argument_list|(
name|s
argument_list|,
name|bi
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|read_dib_body
argument_list|(
name|s
argument_list|,
name|bi
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
name|BMP_FILEHDR_SIZE
argument_list|,
name|image
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QBmpHandler
name|QBmpHandler
operator|::
name|QBmpHandler
parameter_list|(
name|InternalFormat
name|fmt
parameter_list|)
member_init_list|:
name|m_format
argument_list|(
name|fmt
argument_list|)
member_init_list|,
name|state
argument_list|(
name|Ready
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|formatName
name|QByteArray
name|QBmpHandler
operator|::
name|formatName
parameter_list|()
specifier|const
block|{
return|return
name|m_format
operator|==
name|BmpFormat
condition|?
literal|"bmp"
else|:
literal|"dib"
return|;
block|}
end_function
begin_function
DECL|function|readHeader
name|bool
name|QBmpHandler
operator|::
name|readHeader
parameter_list|()
block|{
name|state
operator|=
name|Error
expr_stmt|;
name|QIODevice
modifier|*
name|d
init|=
name|device
argument_list|()
decl_stmt|;
name|QDataStream
name|s
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|startpos
operator|=
name|d
operator|->
name|pos
argument_list|()
expr_stmt|;
comment|// Intel byte order
name|s
operator|.
name|setByteOrder
argument_list|(
name|QDataStream
operator|::
name|LittleEndian
argument_list|)
expr_stmt|;
comment|// read BMP file header
if|if
condition|(
name|m_format
operator|==
name|BmpFormat
operator|&&
operator|!
name|read_dib_fileheader
argument_list|(
name|s
argument_list|,
name|fileHeader
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// read BMP info header
if|if
condition|(
operator|!
name|read_dib_infoheader
argument_list|(
name|s
argument_list|,
name|infoHeader
argument_list|)
condition|)
return|return
literal|false
return|;
name|state
operator|=
name|ReadHeader
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|canRead
name|bool
name|QBmpHandler
operator|::
name|canRead
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_format
operator|==
name|BmpFormat
operator|&&
name|state
operator|==
name|Ready
operator|&&
operator|!
name|canRead
argument_list|(
name|device
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|state
operator|!=
name|Error
condition|)
block|{
name|setFormat
argument_list|(
name|formatName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|canRead
name|bool
name|QBmpHandler
operator|::
name|canRead
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|)
block|{
if|if
condition|(
operator|!
name|device
condition|)
block|{
name|qWarning
argument_list|(
literal|"QBmpHandler::canRead() called with 0 pointer"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|char
name|head
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|device
operator|->
name|peek
argument_list|(
name|head
argument_list|,
sizeof|sizeof
argument_list|(
name|head
argument_list|)
argument_list|)
operator|!=
sizeof|sizeof
argument_list|(
name|head
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
operator|(
name|qstrncmp
argument_list|(
name|head
argument_list|,
literal|"BM"
argument_list|,
literal|2
argument_list|)
operator|==
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|read
name|bool
name|QBmpHandler
operator|::
name|read
parameter_list|(
name|QImage
modifier|*
name|image
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
name|Error
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|image
condition|)
block|{
name|qWarning
argument_list|(
literal|"QBmpHandler::read: cannot read into null pointer"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|state
operator|==
name|Ready
operator|&&
operator|!
name|readHeader
argument_list|()
condition|)
block|{
name|state
operator|=
name|Error
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QIODevice
modifier|*
name|d
init|=
name|device
argument_list|()
decl_stmt|;
name|QDataStream
name|s
argument_list|(
name|d
argument_list|)
decl_stmt|;
comment|// Intel byte order
name|s
operator|.
name|setByteOrder
argument_list|(
name|QDataStream
operator|::
name|LittleEndian
argument_list|)
expr_stmt|;
comment|// read image
if|if
condition|(
operator|!
name|read_dib_body
argument_list|(
name|s
argument_list|,
name|infoHeader
argument_list|,
name|fileHeader
operator|.
name|bfOffBits
argument_list|,
name|startpos
argument_list|,
operator|*
name|image
argument_list|)
condition|)
return|return
literal|false
return|;
name|state
operator|=
name|Ready
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|write
name|bool
name|QBmpHandler
operator|::
name|write
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|)
block|{
if|if
condition|(
name|m_format
operator|==
name|DibFormat
condition|)
block|{
name|QDataStream
name|dibStream
argument_list|(
name|device
argument_list|()
argument_list|)
decl_stmt|;
name|dibStream
operator|.
name|setByteOrder
argument_list|(
name|QDataStream
operator|::
name|LittleEndian
argument_list|)
expr_stmt|;
comment|// Intel byte order
return|return
name|qt_write_dib
argument_list|(
name|dibStream
argument_list|,
name|img
argument_list|)
return|;
block|}
name|QImage
name|image
decl_stmt|;
switch|switch
condition|(
name|img
operator|.
name|format
argument_list|()
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_ARGB6666_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_ARGB4444_Premultiplied
case|:
name|image
operator|=
name|img
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
break|break;
case|case
name|QImage
operator|::
name|Format_RGB16
case|:
case|case
name|QImage
operator|::
name|Format_RGB888
case|:
case|case
name|QImage
operator|::
name|Format_RGB666
case|:
case|case
name|QImage
operator|::
name|Format_RGB555
case|:
case|case
name|QImage
operator|::
name|Format_RGB444
case|:
name|image
operator|=
name|img
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
break|break;
default|default:
name|image
operator|=
name|img
expr_stmt|;
block|}
name|QIODevice
modifier|*
name|d
init|=
name|device
argument_list|()
decl_stmt|;
name|QDataStream
name|s
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|BMP_FILEHDR
name|bf
decl_stmt|;
name|int
name|bpl_bmp
decl_stmt|;
name|int
name|bpl
init|=
name|image
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
comment|// Code partially repeated in qt_write_dib
if|if
condition|(
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|8
operator|&&
name|image
operator|.
name|colorCount
argument_list|()
operator|<=
literal|16
condition|)
block|{
name|bpl_bmp
operator|=
operator|(
operator|(
operator|(
name|bpl
operator|+
literal|1
operator|)
operator|/
literal|2
operator|+
literal|3
operator|)
operator|/
literal|4
operator|)
operator|*
literal|4
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|32
condition|)
block|{
name|bpl_bmp
operator|=
operator|(
operator|(
name|image
operator|.
name|width
argument_list|()
operator|*
literal|24
operator|+
literal|31
operator|)
operator|/
literal|32
operator|)
operator|*
literal|4
expr_stmt|;
block|}
else|else
block|{
name|bpl_bmp
operator|=
name|bpl
expr_stmt|;
block|}
comment|// Intel byte order
name|s
operator|.
name|setByteOrder
argument_list|(
name|QDataStream
operator|::
name|LittleEndian
argument_list|)
expr_stmt|;
comment|// build file header
name|memcpy
argument_list|(
name|bf
operator|.
name|bfType
argument_list|,
literal|"BM"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// write file header
name|bf
operator|.
name|bfReserved1
operator|=
literal|0
expr_stmt|;
name|bf
operator|.
name|bfReserved2
operator|=
literal|0
expr_stmt|;
name|bf
operator|.
name|bfOffBits
operator|=
name|BMP_FILEHDR_SIZE
operator|+
name|BMP_WIN
operator|+
name|image
operator|.
name|colorCount
argument_list|()
operator|*
literal|4
expr_stmt|;
name|bf
operator|.
name|bfSize
operator|=
name|bf
operator|.
name|bfOffBits
operator|+
name|bpl_bmp
operator|*
name|image
operator|.
name|height
argument_list|()
expr_stmt|;
name|s
operator|<<
name|bf
expr_stmt|;
comment|// write image
return|return
name|qt_write_dib
argument_list|(
name|s
argument_list|,
name|image
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|supportsOption
name|bool
name|QBmpHandler
operator|::
name|supportsOption
parameter_list|(
name|ImageOption
name|option
parameter_list|)
specifier|const
block|{
return|return
name|option
operator|==
name|Size
operator|||
name|option
operator|==
name|ImageFormat
return|;
block|}
end_function
begin_function
DECL|function|option
name|QVariant
name|QBmpHandler
operator|::
name|option
parameter_list|(
name|ImageOption
name|option
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|option
operator|==
name|Size
condition|)
block|{
if|if
condition|(
name|state
operator|==
name|Error
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|state
operator|==
name|Ready
operator|&&
operator|!
cast|const_cast
argument_list|<
name|QBmpHandler
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|readHeader
argument_list|()
condition|)
return|return
name|QVariant
argument_list|()
return|;
return|return
name|QSize
argument_list|(
name|infoHeader
operator|.
name|biWidth
argument_list|,
name|infoHeader
operator|.
name|biHeight
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|option
operator|==
name|ImageFormat
condition|)
block|{
if|if
condition|(
name|state
operator|==
name|Error
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|state
operator|==
name|Ready
operator|&&
operator|!
cast|const_cast
argument_list|<
name|QBmpHandler
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|readHeader
argument_list|()
condition|)
return|return
name|QVariant
argument_list|()
return|;
name|QImage
operator|::
name|Format
name|format
decl_stmt|;
switch|switch
condition|(
name|infoHeader
operator|.
name|biBitCount
condition|)
block|{
case|case
literal|32
case|:
case|case
literal|24
case|:
case|case
literal|16
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
break|break;
case|case
literal|8
case|:
case|case
literal|4
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_Indexed8
expr_stmt|;
break|break;
default|default:
name|format
operator|=
name|QImage
operator|::
name|Format_Mono
expr_stmt|;
block|}
return|return
name|format
return|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setOption
name|void
name|QBmpHandler
operator|::
name|setOption
parameter_list|(
name|ImageOption
name|option
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|name
name|QByteArray
name|QBmpHandler
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
name|formatName
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_IMAGEFORMAT_BMP
end_comment
end_unit
