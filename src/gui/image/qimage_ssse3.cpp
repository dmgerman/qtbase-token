begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qimage.h>
end_include
begin_include
include|#
directive|include
file|<private/qimage_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qsimd_p.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_COMPILER_SUPPORTS_SSSE3
end_ifdef
begin_function
name|QT_BEGIN_NAMESPACE
comment|// Convert a scanline of RGB888 (src) to RGB32 (dst)
comment|// src must be at least len * 3 bytes
comment|// dst must be at least len * 4 bytes
DECL|function|qt_convert_rgb888_to_rgb32_ssse3
name|Q_GUI_EXPORT
name|void
name|QT_FASTCALL
name|qt_convert_rgb888_to_rgb32_ssse3
parameter_list|(
name|quint32
modifier|*
name|dst
parameter_list|,
specifier|const
name|uchar
modifier|*
name|src
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|quint32
modifier|*
specifier|const
name|end
init|=
name|dst
operator|+
name|len
decl_stmt|;
comment|// Prologue, align dst to 16 bytes. The alignment is done on dst because it has 4 store()
comment|// for each 3 load() of src.
specifier|const
name|int
name|offsetToAlignOn16Bytes
init|=
operator|(
literal|4
operator|-
operator|(
operator|(
cast|reinterpret_cast
argument_list|<
name|quintptr
argument_list|>
argument_list|(
name|dst
argument_list|)
operator|>>
literal|2
operator|)
operator|&
literal|0x3
operator|)
operator|)
operator|&
literal|0x3
decl_stmt|;
specifier|const
name|int
name|prologLength
init|=
name|qMin
argument_list|(
name|len
argument_list|,
name|offsetToAlignOn16Bytes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prologLength
condition|;
operator|++
name|i
control|)
block|{
operator|*
name|dst
operator|++
operator|=
name|qRgb
argument_list|(
name|src
index|[
literal|0
index|]
argument_list|,
name|src
index|[
literal|1
index|]
argument_list|,
name|src
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|src
operator|+=
literal|3
expr_stmt|;
block|}
comment|// Mask the 4 first colors of the RGB888 vector
specifier|const
name|__m128i
name|shuffleMask
init|=
name|_mm_set_epi8
argument_list|(
literal|0xff
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|0xff
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|0xff
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|0xff
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// Mask the 4 last colors of a RGB888 vector with an offset of 1 (so the last 3 bytes are RGB)
specifier|const
name|__m128i
name|shuffleMaskEnd
init|=
name|_mm_set_epi8
argument_list|(
literal|0xff
argument_list|,
literal|13
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
literal|0xff
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|0xff
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|0xff
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
decl_stmt|;
comment|// Mask to have alpha = 0xff
specifier|const
name|__m128i
name|alphaMask
init|=
name|_mm_set1_epi32
argument_list|(
literal|0xff000000
argument_list|)
decl_stmt|;
name|__m128i
modifier|*
name|inVectorPtr
init|=
operator|(
name|__m128i
operator|*
operator|)
name|src
decl_stmt|;
name|__m128i
modifier|*
name|dstVectorPtr
init|=
operator|(
name|__m128i
operator|*
operator|)
name|dst
decl_stmt|;
specifier|const
name|int
name|simdRoundCount
init|=
operator|(
name|len
operator|-
name|prologLength
operator|)
operator|/
literal|16
decl_stmt|;
comment|// one iteration in the loop converts 16 pixels
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|simdRoundCount
condition|;
operator|++
name|i
control|)
block|{
comment|/*          RGB888 has 5 pixels per vector, + 1 byte from the next pixel. The idea here is          to load vectors of RGB888 and use palignr to select a vector out of two vectors.           After 3 loads of RGB888 and 3 stores of RGB32, we have 4 pixels left in the last          vector of RGB888, we can mask it directly to get a last store or RGB32. After that,          the first next byte is a R, and we can loop for the next 16 pixels.           The conversion itself is done with a byte permutation (pshufb).          */
name|__m128i
name|firstSrcVector
init|=
name|_mm_lddqu_si128
argument_list|(
name|inVectorPtr
argument_list|)
decl_stmt|;
name|__m128i
name|outputVector
init|=
name|_mm_shuffle_epi8
argument_list|(
name|firstSrcVector
argument_list|,
name|shuffleMask
argument_list|)
decl_stmt|;
name|_mm_store_si128
argument_list|(
name|dstVectorPtr
argument_list|,
name|_mm_or_si128
argument_list|(
name|outputVector
argument_list|,
name|alphaMask
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|inVectorPtr
expr_stmt|;
operator|++
name|dstVectorPtr
expr_stmt|;
comment|// There are 4 unused bytes left in srcVector, we need to load the next 16 bytes
comment|// and load the next input with palignr
name|__m128i
name|secondSrcVector
init|=
name|_mm_lddqu_si128
argument_list|(
name|inVectorPtr
argument_list|)
decl_stmt|;
name|__m128i
name|srcVector
init|=
name|_mm_alignr_epi8
argument_list|(
name|secondSrcVector
argument_list|,
name|firstSrcVector
argument_list|,
literal|12
argument_list|)
decl_stmt|;
name|outputVector
operator|=
name|_mm_shuffle_epi8
argument_list|(
name|srcVector
argument_list|,
name|shuffleMask
argument_list|)
expr_stmt|;
name|_mm_store_si128
argument_list|(
name|dstVectorPtr
argument_list|,
name|_mm_or_si128
argument_list|(
name|outputVector
argument_list|,
name|alphaMask
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|inVectorPtr
expr_stmt|;
operator|++
name|dstVectorPtr
expr_stmt|;
name|firstSrcVector
operator|=
name|secondSrcVector
expr_stmt|;
comment|// We now have 8 unused bytes left in firstSrcVector
name|secondSrcVector
operator|=
name|_mm_lddqu_si128
argument_list|(
name|inVectorPtr
argument_list|)
expr_stmt|;
name|srcVector
operator|=
name|_mm_alignr_epi8
argument_list|(
name|secondSrcVector
argument_list|,
name|firstSrcVector
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|outputVector
operator|=
name|_mm_shuffle_epi8
argument_list|(
name|srcVector
argument_list|,
name|shuffleMask
argument_list|)
expr_stmt|;
name|_mm_store_si128
argument_list|(
name|dstVectorPtr
argument_list|,
name|_mm_or_si128
argument_list|(
name|outputVector
argument_list|,
name|alphaMask
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|inVectorPtr
expr_stmt|;
operator|++
name|dstVectorPtr
expr_stmt|;
comment|// There are now 12 unused bytes in firstSrcVector.
comment|// We can mask them directly, almost there.
name|outputVector
operator|=
name|_mm_shuffle_epi8
argument_list|(
name|secondSrcVector
argument_list|,
name|shuffleMaskEnd
argument_list|)
expr_stmt|;
name|_mm_store_si128
argument_list|(
name|dstVectorPtr
argument_list|,
name|_mm_or_si128
argument_list|(
name|outputVector
argument_list|,
name|alphaMask
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|dstVectorPtr
expr_stmt|;
block|}
name|src
operator|=
operator|(
name|uchar
operator|*
operator|)
name|inVectorPtr
expr_stmt|;
name|dst
operator|=
operator|(
name|quint32
operator|*
operator|)
name|dstVectorPtr
expr_stmt|;
while|while
condition|(
name|dst
operator|!=
name|end
condition|)
block|{
operator|*
name|dst
operator|++
operator|=
name|qRgb
argument_list|(
name|src
index|[
literal|0
index|]
argument_list|,
name|src
index|[
literal|1
index|]
argument_list|,
name|src
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|src
operator|+=
literal|3
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|convert_RGB888_to_RGB32_ssse3
name|void
name|convert_RGB888_to_RGB32_ssse3
parameter_list|(
name|QImageData
modifier|*
name|dest
parameter_list|,
specifier|const
name|QImageData
modifier|*
name|src
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB888
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB32
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32
operator|||
name|dest
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|width
operator|==
name|dest
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|src
operator|->
name|height
operator|==
name|dest
operator|->
name|height
argument_list|)
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|src_data
init|=
operator|(
name|uchar
operator|*
operator|)
name|src
operator|->
name|data
decl_stmt|;
name|quint32
modifier|*
name|dest_data
init|=
operator|(
name|quint32
operator|*
operator|)
name|dest
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
name|qt_convert_rgb888_to_rgb32_ssse3
argument_list|(
name|dest_data
argument_list|,
name|src_data
argument_list|,
name|src
operator|->
name|width
argument_list|)
expr_stmt|;
name|src_data
operator|+=
name|src
operator|->
name|bytes_per_line
expr_stmt|;
name|dest_data
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dest_data
operator|+
name|dest
operator|->
name|bytes_per_line
operator|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_COMPILER_SUPPORTS_SSSE3
end_comment
end_unit
