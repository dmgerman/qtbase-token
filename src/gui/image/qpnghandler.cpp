begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Samuel Gaist<samuel.gaist@edeltech.ch> ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"private/qpnghandler_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_IMAGEFORMAT_PNG
end_ifndef
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qiodevice.h>
end_include
begin_include
include|#
directive|include
file|<qimage.h>
end_include
begin_include
include|#
directive|include
file|<qlist.h>
end_include
begin_include
include|#
directive|include
file|<qtextcodec.h>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qvector.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_USE_BUNDLED_LIBPNG
end_ifdef
begin_include
include|#
directive|include
file|<../../3rdparty/libpng/png.h>
end_include
begin_include
include|#
directive|include
file|<../../3rdparty/libpng/pngconf.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<png.h>
end_include
begin_include
include|#
directive|include
file|<pngconf.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|PNG_LIBPNG_VER
operator|>=
literal|10400
operator|&&
name|PNG_LIBPNG_VER
operator|<=
literal|10502
expr|\
operator|&&
name|defined
argument_list|(
name|PNG_PEDANTIC_WARNINGS_SUPPORTED
argument_list|)
end_if
begin_comment
comment|/*     Versions 1.4.0 to 1.5.2 of libpng declare png_longjmp_ptr to     have a noreturn attribute if PNG_PEDANTIC_WARNINGS_SUPPORTED     is enabled, but most declarations of longjmp in the wild do     not add this attribute. This causes problems when the png_jmpbuf     macro expands to calling png_set_longjmp_fn with a mismatched     longjmp, as compilers such as Clang will treat this as an error.      To work around this we override the png_jmpbuf macro to cast     longjmp to a png_longjmp_ptr. */
end_comment
begin_undef
DECL|macro|png_jmpbuf
undef|#
directive|undef
name|png_jmpbuf
end_undef
begin_ifdef
ifdef|#
directive|ifdef
name|PNG_SETJMP_SUPPORTED
end_ifdef
begin_define
DECL|macro|png_jmpbuf
define|#
directive|define
name|png_jmpbuf
parameter_list|(
name|png_ptr
parameter_list|)
define|\
value|(*png_set_longjmp_fn((png_ptr), (png_longjmp_ptr)longjmp, sizeof(jmp_buf)))
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|png_jmpbuf
define|#
directive|define
name|png_jmpbuf
parameter_list|(
name|png_ptr
parameter_list|)
define|\
value|(LIBPNG_WAS_COMPILED_WITH__PNG_NO_SETJMP)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE
end_ifdef
begin_define
DECL|macro|CALLBACK_CALL_TYPE
define|#
directive|define
name|CALLBACK_CALL_TYPE
value|__cdecl
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|CALLBACK_CALL_TYPE
define|#
directive|define
name|CALLBACK_CALL_TYPE
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
name|defined
argument_list|(
name|STANDARDSHELL_UI_MODEL
argument_list|)
end_if
begin_define
DECL|macro|Q_INTERNAL_WIN_NO_THROW
define|#
directive|define
name|Q_INTERNAL_WIN_NO_THROW
value|__declspec(nothrow)
end_define
begin_else
else|#
directive|else
end_else
begin_define
define|#
directive|define
name|Q_INTERNAL_WIN_NO_THROW
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// avoid going through QImage::scanLine() which calls detach
end_comment
begin_define
DECL|macro|FAST_SCAN_LINE
define|#
directive|define
name|FAST_SCAN_LINE
parameter_list|(
name|data
parameter_list|,
name|bpl
parameter_list|,
name|y
parameter_list|)
value|(data + (y) * bpl)
end_define
begin_comment
comment|/*   All PNG files load to the minimal QImage equivalent.    All QImage formats output to reasonably efficient PNG equivalents. */
end_comment
begin_class
DECL|class|QPngHandlerPrivate
class|class
name|QPngHandlerPrivate
block|{
public|public:
DECL|enum|State
enum|enum
name|State
block|{
DECL|enumerator|Ready
name|Ready
block|,
DECL|enumerator|ReadHeader
name|ReadHeader
block|,
DECL|enumerator|ReadingEnd
name|ReadingEnd
block|,
DECL|enumerator|Error
name|Error
block|}
enum|;
DECL|function|QPngHandlerPrivate
name|QPngHandlerPrivate
parameter_list|(
name|QPngHandler
modifier|*
name|qq
parameter_list|)
member_init_list|:
name|gamma
argument_list|(
literal|0.0
argument_list|)
member_init_list|,
name|quality
argument_list|(
literal|2
argument_list|)
member_init_list|,
name|png_ptr
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|info_ptr
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|end_info
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|state
argument_list|(
name|Ready
argument_list|)
member_init_list|,
name|q
argument_list|(
name|qq
argument_list|)
block|{ }
DECL|member|gamma
name|float
name|gamma
decl_stmt|;
DECL|member|quality
name|int
name|quality
decl_stmt|;
DECL|member|description
name|QString
name|description
decl_stmt|;
DECL|member|scaledSize
name|QSize
name|scaledSize
decl_stmt|;
DECL|member|readTexts
name|QStringList
name|readTexts
decl_stmt|;
DECL|member|png_ptr
name|png_struct
modifier|*
name|png_ptr
decl_stmt|;
DECL|member|info_ptr
name|png_info
modifier|*
name|info_ptr
decl_stmt|;
DECL|member|end_info
name|png_info
modifier|*
name|end_info
decl_stmt|;
name|bool
name|readPngHeader
parameter_list|()
function_decl|;
name|bool
name|readPngImage
parameter_list|(
name|QImage
modifier|*
name|image
parameter_list|)
function_decl|;
name|void
name|readPngTexts
parameter_list|(
name|png_info
modifier|*
name|info
parameter_list|)
function_decl|;
name|QImage
operator|::
name|Format
name|readImageFormat
parameter_list|()
function_decl|;
DECL|struct|AllocatedMemoryPointers
struct|struct
name|AllocatedMemoryPointers
block|{
DECL|function|AllocatedMemoryPointers
name|AllocatedMemoryPointers
parameter_list|()
member_init_list|:
name|row_pointers
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|accRow
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|inRow
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|outRow
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|deallocate
name|void
name|deallocate
parameter_list|()
block|{
operator|delete
index|[]
name|row_pointers
expr_stmt|;
name|row_pointers
operator|=
literal|0
expr_stmt|;
operator|delete
index|[]
name|accRow
expr_stmt|;
name|accRow
operator|=
literal|0
expr_stmt|;
operator|delete
index|[]
name|inRow
expr_stmt|;
name|inRow
operator|=
literal|0
expr_stmt|;
operator|delete
index|[]
name|outRow
expr_stmt|;
name|outRow
operator|=
literal|0
expr_stmt|;
block|}
DECL|member|row_pointers
name|png_byte
modifier|*
modifier|*
name|row_pointers
decl_stmt|;
DECL|member|accRow
name|quint32
modifier|*
name|accRow
decl_stmt|;
DECL|member|inRow
name|png_byte
modifier|*
name|inRow
decl_stmt|;
DECL|member|outRow
name|uchar
modifier|*
name|outRow
decl_stmt|;
block|}
struct|;
DECL|member|amp
name|AllocatedMemoryPointers
name|amp
decl_stmt|;
DECL|member|state
name|State
name|state
decl_stmt|;
DECL|member|q
name|QPngHandler
modifier|*
name|q
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QPNGImageWriter
class|class
name|QPNGImageWriter
block|{
public|public:
specifier|explicit
name|QPNGImageWriter
parameter_list|(
name|QIODevice
modifier|*
parameter_list|)
constructor_decl|;
name|~
name|QPNGImageWriter
parameter_list|()
destructor_decl|;
DECL|enum|DisposalMethod
DECL|enumerator|Unspecified
DECL|enumerator|NoDisposal
DECL|enumerator|RestoreBackground
DECL|enumerator|RestoreImage
enum|enum
name|DisposalMethod
block|{
name|Unspecified
block|,
name|NoDisposal
block|,
name|RestoreBackground
block|,
name|RestoreImage
block|}
enum|;
name|void
name|setDisposalMethod
parameter_list|(
name|DisposalMethod
parameter_list|)
function_decl|;
name|void
name|setLooping
parameter_list|(
name|int
name|loops
init|=
literal|0
parameter_list|)
function_decl|;
comment|// 0 == infinity
name|void
name|setFrameDelay
parameter_list|(
name|int
name|msecs
parameter_list|)
function_decl|;
name|void
name|setGamma
parameter_list|(
name|float
parameter_list|)
function_decl|;
name|bool
name|writeImage
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
name|bool
name|writeImage
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
specifier|volatile
name|int
name|quality
parameter_list|,
specifier|const
name|QString
modifier|&
name|description
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
DECL|function|writeImage
name|bool
name|writeImage
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|)
block|{
return|return
name|writeImage
argument_list|(
name|img
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|function|writeImage
name|bool
name|writeImage
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
name|int
name|quality
parameter_list|,
specifier|const
name|QString
modifier|&
name|description
parameter_list|)
block|{
return|return
name|writeImage
argument_list|(
name|img
argument_list|,
name|quality
argument_list|,
name|description
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|function|device
name|QIODevice
modifier|*
name|device
parameter_list|()
block|{
return|return
name|dev
return|;
block|}
private|private:
DECL|member|dev
name|QIODevice
modifier|*
name|dev
decl_stmt|;
DECL|member|frames_written
name|int
name|frames_written
decl_stmt|;
DECL|member|disposal
name|DisposalMethod
name|disposal
decl_stmt|;
DECL|member|looping
name|int
name|looping
decl_stmt|;
DECL|member|ms_delay
name|int
name|ms_delay
decl_stmt|;
DECL|member|gamma
name|float
name|gamma
decl_stmt|;
block|}
class|;
end_class
begin_extern
extern|extern
literal|"C"
block|{
specifier|static
DECL|function|iod_read_fn
name|void
name|CALLBACK_CALL_TYPE
name|iod_read_fn
parameter_list|(
name|png_structp
name|png_ptr
parameter_list|,
name|png_bytep
name|data
parameter_list|,
name|png_size_t
name|length
parameter_list|)
block|{
name|QPngHandlerPrivate
modifier|*
name|d
init|=
operator|(
name|QPngHandlerPrivate
operator|*
operator|)
name|png_get_io_ptr
argument_list|(
name|png_ptr
argument_list|)
decl_stmt|;
name|QIODevice
modifier|*
name|in
init|=
name|d
operator|->
name|q
operator|->
name|device
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|state
operator|==
name|QPngHandlerPrivate
operator|::
name|ReadingEnd
operator|&&
operator|!
name|in
operator|->
name|isSequential
argument_list|()
operator|&&
operator|(
name|in
operator|->
name|size
argument_list|()
operator|-
name|in
operator|->
name|pos
argument_list|()
operator|)
operator|<
literal|4
operator|&&
name|length
operator|==
literal|4
condition|)
block|{
comment|// Workaround for certain malformed PNGs that lack the final crc bytes
name|uchar
name|endcrc
index|[
literal|4
index|]
init|=
block|{
literal|0xae
block|,
literal|0x42
block|,
literal|0x60
block|,
literal|0x82
block|}
decl_stmt|;
name|memcpy
argument_list|(
name|data
argument_list|,
name|endcrc
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|in
operator|->
name|seek
argument_list|(
name|in
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
while|while
condition|(
name|length
condition|)
block|{
name|int
name|nr
init|=
name|in
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|data
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|nr
operator|<=
literal|0
condition|)
block|{
name|png_error
argument_list|(
name|png_ptr
argument_list|,
literal|"Read Error"
argument_list|)
expr_stmt|;
return|return;
block|}
name|length
operator|-=
name|nr
expr_stmt|;
block|}
block|}
specifier|static
DECL|function|qpiw_write_fn
name|void
name|CALLBACK_CALL_TYPE
name|qpiw_write_fn
parameter_list|(
name|png_structp
name|png_ptr
parameter_list|,
name|png_bytep
name|data
parameter_list|,
name|png_size_t
name|length
parameter_list|)
block|{
name|QPNGImageWriter
modifier|*
name|qpiw
init|=
operator|(
name|QPNGImageWriter
operator|*
operator|)
name|png_get_io_ptr
argument_list|(
name|png_ptr
argument_list|)
decl_stmt|;
name|QIODevice
modifier|*
name|out
init|=
name|qpiw
operator|->
name|device
argument_list|()
decl_stmt|;
name|uint
name|nr
init|=
name|out
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
name|data
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|nr
operator|!=
name|length
condition|)
block|{
name|png_error
argument_list|(
name|png_ptr
argument_list|,
literal|"Write Error"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
specifier|static
DECL|function|qpiw_flush_fn
name|void
name|CALLBACK_CALL_TYPE
name|qpiw_flush_fn
parameter_list|(
name|png_structp
comment|/* png_ptr */
parameter_list|)
block|{ }
block|}
end_extern
begin_function
specifier|static
DECL|function|setup_qt
name|void
name|setup_qt
parameter_list|(
name|QImage
modifier|&
name|image
parameter_list|,
name|png_structp
name|png_ptr
parameter_list|,
name|png_infop
name|info_ptr
parameter_list|,
name|QSize
name|scaledSize
parameter_list|,
name|bool
modifier|*
name|doScaledRead
parameter_list|,
name|float
name|screen_gamma
init|=
literal|0.0
parameter_list|)
block|{
if|if
condition|(
name|screen_gamma
operator|!=
literal|0.0
operator|&&
name|png_get_valid
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
name|PNG_INFO_gAMA
argument_list|)
condition|)
block|{
name|double
name|file_gamma
decl_stmt|;
name|png_get_gAMA
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
operator|&
name|file_gamma
argument_list|)
expr_stmt|;
name|png_set_gamma
argument_list|(
name|png_ptr
argument_list|,
name|screen_gamma
argument_list|,
name|file_gamma
argument_list|)
expr_stmt|;
block|}
name|png_uint_32
name|width
decl_stmt|;
name|png_uint_32
name|height
decl_stmt|;
name|int
name|bit_depth
decl_stmt|;
name|int
name|color_type
decl_stmt|;
name|png_bytep
name|trans_alpha
init|=
literal|0
decl_stmt|;
name|png_color_16p
name|trans_color_p
init|=
literal|0
decl_stmt|;
name|int
name|num_trans
decl_stmt|;
name|png_colorp
name|palette
init|=
literal|0
decl_stmt|;
name|int
name|num_palette
decl_stmt|;
name|int
name|interlace_method
decl_stmt|;
name|png_get_IHDR
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
operator|&
name|width
argument_list|,
operator|&
name|height
argument_list|,
operator|&
name|bit_depth
argument_list|,
operator|&
name|color_type
argument_list|,
operator|&
name|interlace_method
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|png_set_interlace_handling
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|color_type
operator|==
name|PNG_COLOR_TYPE_GRAY
condition|)
block|{
comment|// Black& White or 8-bit grayscale
if|if
condition|(
name|bit_depth
operator|==
literal|1
operator|&&
name|png_get_channels
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|)
operator|==
literal|1
condition|)
block|{
name|png_set_invert_mono
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
name|png_read_update_info
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|size
argument_list|()
operator|!=
name|QSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
operator|||
name|image
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_Mono
condition|)
block|{
name|image
operator|=
name|QImage
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|QImage
operator|::
name|Format_Mono
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
return|return;
block|}
name|image
operator|.
name|setColorCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
name|qRgb
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|png_get_tRNS
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
operator|&
name|trans_alpha
argument_list|,
operator|&
name|num_trans
argument_list|,
operator|&
name|trans_color_p
argument_list|)
operator|&&
name|trans_color_p
condition|)
block|{
specifier|const
name|int
name|g
init|=
name|trans_color_p
operator|->
name|gray
decl_stmt|;
comment|// the image has white in the first position of the color table,
comment|// black in the second. g is 0 for black, 1 for white.
if|if
condition|(
name|g
operator|==
literal|0
condition|)
name|image
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|g
operator|==
literal|1
condition|)
name|image
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
name|qRgba
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|bit_depth
operator|==
literal|16
operator|&&
name|png_get_valid
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
name|PNG_INFO_tRNS
argument_list|)
condition|)
block|{
name|png_set_expand
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
name|png_set_strip_16
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
name|png_set_gray_to_rgb
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|size
argument_list|()
operator|!=
name|QSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
operator|||
name|image
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_ARGB32
condition|)
block|{
name|image
operator|=
name|QImage
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
return|return;
block|}
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|)
name|png_set_swap_alpha
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
name|png_read_update_info
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bit_depth
operator|==
literal|8
operator|&&
operator|!
name|png_get_valid
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
name|PNG_INFO_tRNS
argument_list|)
condition|)
block|{
name|png_set_expand
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|size
argument_list|()
operator|!=
name|QSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
operator|||
name|image
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_Grayscale8
condition|)
block|{
name|image
operator|=
name|QImage
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|QImage
operator|::
name|Format_Grayscale8
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
return|return;
block|}
name|png_read_update_info
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|bit_depth
operator|==
literal|16
condition|)
name|png_set_strip_16
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|bit_depth
operator|<
literal|8
condition|)
name|png_set_packing
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
name|int
name|ncols
init|=
name|bit_depth
operator|<
literal|8
condition|?
literal|1
operator|<<
name|bit_depth
else|:
literal|256
decl_stmt|;
name|png_read_update_info
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|size
argument_list|()
operator|!=
name|QSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
operator|||
name|image
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_Indexed8
condition|)
block|{
name|image
operator|=
name|QImage
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
return|return;
block|}
name|image
operator|.
name|setColorCount
argument_list|(
name|ncols
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ncols
condition|;
name|i
operator|++
control|)
block|{
name|int
name|c
init|=
name|i
operator|*
literal|255
operator|/
operator|(
name|ncols
operator|-
literal|1
operator|)
decl_stmt|;
name|image
operator|.
name|setColor
argument_list|(
name|i
argument_list|,
name|qRgba
argument_list|(
name|c
argument_list|,
name|c
argument_list|,
name|c
argument_list|,
literal|0xff
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|png_get_tRNS
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
operator|&
name|trans_alpha
argument_list|,
operator|&
name|num_trans
argument_list|,
operator|&
name|trans_color_p
argument_list|)
operator|&&
name|trans_color_p
condition|)
block|{
specifier|const
name|int
name|g
init|=
name|trans_color_p
operator|->
name|gray
decl_stmt|;
if|if
condition|(
name|g
operator|<
name|ncols
condition|)
block|{
name|image
operator|.
name|setColor
argument_list|(
name|g
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|color_type
operator|==
name|PNG_COLOR_TYPE_PALETTE
operator|&&
name|png_get_PLTE
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
operator|&
name|palette
argument_list|,
operator|&
name|num_palette
argument_list|)
operator|&&
name|num_palette
operator|<=
literal|256
condition|)
block|{
comment|// 1-bit and 8-bit color
if|if
condition|(
name|bit_depth
operator|!=
literal|1
condition|)
name|png_set_packing
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
name|png_read_update_info
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|)
expr_stmt|;
name|png_get_IHDR
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
operator|&
name|width
argument_list|,
operator|&
name|height
argument_list|,
operator|&
name|bit_depth
argument_list|,
operator|&
name|color_type
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QImage
operator|::
name|Format
name|format
init|=
name|bit_depth
operator|==
literal|1
condition|?
name|QImage
operator|::
name|Format_Mono
else|:
name|QImage
operator|::
name|Format_Indexed8
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|size
argument_list|()
operator|!=
name|QSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
operator|||
name|image
operator|.
name|format
argument_list|()
operator|!=
name|format
condition|)
block|{
name|image
operator|=
name|QImage
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
return|return;
block|}
name|png_get_PLTE
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
operator|&
name|palette
argument_list|,
operator|&
name|num_palette
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColorCount
argument_list|(
name|num_palette
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|png_get_tRNS
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
operator|&
name|trans_alpha
argument_list|,
operator|&
name|num_trans
argument_list|,
operator|&
name|trans_color_p
argument_list|)
operator|&&
name|trans_alpha
condition|)
block|{
while|while
condition|(
name|i
operator|<
name|num_trans
condition|)
block|{
name|image
operator|.
name|setColor
argument_list|(
name|i
argument_list|,
name|qRgba
argument_list|(
name|palette
index|[
name|i
index|]
operator|.
name|red
argument_list|,
name|palette
index|[
name|i
index|]
operator|.
name|green
argument_list|,
name|palette
index|[
name|i
index|]
operator|.
name|blue
argument_list|,
name|trans_alpha
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
while|while
condition|(
name|i
operator|<
name|num_palette
condition|)
block|{
name|image
operator|.
name|setColor
argument_list|(
name|i
argument_list|,
name|qRgba
argument_list|(
name|palette
index|[
name|i
index|]
operator|.
name|red
argument_list|,
name|palette
index|[
name|i
index|]
operator|.
name|green
argument_list|,
name|palette
index|[
name|i
index|]
operator|.
name|blue
argument_list|,
literal|0xff
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// 32-bit
if|if
condition|(
name|bit_depth
operator|==
literal|16
condition|)
name|png_set_strip_16
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
name|png_set_expand
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|color_type
operator|==
name|PNG_COLOR_TYPE_GRAY_ALPHA
condition|)
name|png_set_gray_to_rgb
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
name|QImage
operator|::
name|Format
name|format
init|=
name|QImage
operator|::
name|Format_ARGB32
decl_stmt|;
comment|// Only add filler if no alpha, or we can get 5 channel data.
if|if
condition|(
operator|!
operator|(
name|color_type
operator|&
name|PNG_COLOR_MASK_ALPHA
operator|)
operator|&&
operator|!
name|png_get_valid
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
name|PNG_INFO_tRNS
argument_list|)
condition|)
block|{
name|png_set_filler
argument_list|(
name|png_ptr
argument_list|,
literal|0xff
argument_list|,
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|?
name|PNG_FILLER_BEFORE
else|:
name|PNG_FILLER_AFTER
argument_list|)
expr_stmt|;
comment|// We want 4 bytes, but it isn't an alpha channel
name|format
operator|=
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
block|}
name|QSize
name|outSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|scaledSize
operator|.
name|isEmpty
argument_list|()
operator|&&
name|quint32
argument_list|(
name|scaledSize
operator|.
name|width
argument_list|()
argument_list|)
operator|<=
name|width
operator|&&
name|quint32
argument_list|(
name|scaledSize
operator|.
name|height
argument_list|()
argument_list|)
operator|<=
name|height
operator|&&
name|interlace_method
operator|==
name|PNG_INTERLACE_NONE
condition|)
block|{
comment|// Do inline downscaling
name|outSize
operator|=
name|scaledSize
expr_stmt|;
if|if
condition|(
name|doScaledRead
condition|)
operator|*
name|doScaledRead
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|image
operator|.
name|size
argument_list|()
operator|!=
name|outSize
operator|||
name|image
operator|.
name|format
argument_list|()
operator|!=
name|format
condition|)
block|{
name|image
operator|=
name|QImage
argument_list|(
name|outSize
argument_list|,
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
return|return;
block|}
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|)
name|png_set_swap_alpha
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
name|png_read_update_info
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|)
expr_stmt|;
block|}
comment|// Qt==ARGB==Big(ARGB)==Little(BGRA)
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|LittleEndian
condition|)
block|{
name|png_set_bgr
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|read_image_scaled
specifier|static
name|void
name|read_image_scaled
parameter_list|(
name|QImage
modifier|*
name|outImage
parameter_list|,
name|png_structp
name|png_ptr
parameter_list|,
name|png_infop
name|info_ptr
parameter_list|,
name|QPngHandlerPrivate
operator|::
name|AllocatedMemoryPointers
modifier|&
name|amp
parameter_list|,
name|QSize
name|scaledSize
parameter_list|)
block|{
name|png_uint_32
name|width
init|=
literal|0
decl_stmt|;
name|png_uint_32
name|height
init|=
literal|0
decl_stmt|;
name|png_int_32
name|offset_x
init|=
literal|0
decl_stmt|;
name|png_int_32
name|offset_y
init|=
literal|0
decl_stmt|;
name|int
name|bit_depth
init|=
literal|0
decl_stmt|;
name|int
name|color_type
init|=
literal|0
decl_stmt|;
name|int
name|unit_type
init|=
name|PNG_OFFSET_PIXEL
decl_stmt|;
name|png_get_IHDR
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
operator|&
name|width
argument_list|,
operator|&
name|height
argument_list|,
operator|&
name|bit_depth
argument_list|,
operator|&
name|color_type
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|png_get_oFFs
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
operator|&
name|offset_x
argument_list|,
operator|&
name|offset_y
argument_list|,
operator|&
name|unit_type
argument_list|)
expr_stmt|;
name|uchar
modifier|*
name|data
init|=
name|outImage
operator|->
name|bits
argument_list|()
decl_stmt|;
name|int
name|bpl
init|=
name|outImage
operator|->
name|bytesPerLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|scaledSize
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|width
operator|||
operator|!
name|height
condition|)
return|return;
specifier|const
name|quint32
name|iysz
init|=
name|height
decl_stmt|;
specifier|const
name|quint32
name|ixsz
init|=
name|width
decl_stmt|;
specifier|const
name|quint32
name|oysz
init|=
name|scaledSize
operator|.
name|height
argument_list|()
decl_stmt|;
specifier|const
name|quint32
name|oxsz
init|=
name|scaledSize
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|quint32
name|ibw
init|=
literal|4
operator|*
name|width
decl_stmt|;
name|amp
operator|.
name|accRow
operator|=
operator|new
name|quint32
index|[
name|ibw
index|]
expr_stmt|;
name|memset
argument_list|(
name|amp
operator|.
name|accRow
argument_list|,
literal|0
argument_list|,
name|ibw
operator|*
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
argument_list|)
expr_stmt|;
name|amp
operator|.
name|inRow
operator|=
operator|new
name|png_byte
index|[
name|ibw
index|]
expr_stmt|;
name|memset
argument_list|(
name|amp
operator|.
name|inRow
argument_list|,
literal|0
argument_list|,
name|ibw
operator|*
sizeof|sizeof
argument_list|(
name|png_byte
argument_list|)
argument_list|)
expr_stmt|;
name|amp
operator|.
name|outRow
operator|=
operator|new
name|uchar
index|[
name|ibw
index|]
expr_stmt|;
name|memset
argument_list|(
name|amp
operator|.
name|outRow
argument_list|,
literal|0
argument_list|,
name|ibw
operator|*
sizeof|sizeof
argument_list|(
name|uchar
argument_list|)
argument_list|)
expr_stmt|;
name|qint32
name|rval
init|=
literal|0
decl_stmt|;
for|for
control|(
name|quint32
name|oy
init|=
literal|0
init|;
name|oy
operator|<
name|oysz
condition|;
name|oy
operator|++
control|)
block|{
comment|// Store the rest of the previous input row, if any
for|for
control|(
name|quint32
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ibw
condition|;
name|i
operator|++
control|)
name|amp
operator|.
name|accRow
index|[
name|i
index|]
operator|=
name|rval
operator|*
name|amp
operator|.
name|inRow
index|[
name|i
index|]
expr_stmt|;
comment|// Accumulate the next input rows
for|for
control|(
name|rval
operator|=
name|iysz
operator|-
name|rval
init|;
name|rval
operator|>
literal|0
condition|;
name|rval
operator|-=
name|oysz
control|)
block|{
name|png_read_row
argument_list|(
name|png_ptr
argument_list|,
name|amp
operator|.
name|inRow
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|quint32
name|fact
init|=
name|qMin
argument_list|(
name|oysz
argument_list|,
name|quint32
argument_list|(
name|rval
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|quint32
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ibw
condition|;
name|i
operator|++
control|)
name|amp
operator|.
name|accRow
index|[
name|i
index|]
operator|+=
name|fact
operator|*
name|amp
operator|.
name|inRow
index|[
name|i
index|]
expr_stmt|;
block|}
name|rval
operator|*=
operator|-
literal|1
expr_stmt|;
comment|// We have a full output row, store it
for|for
control|(
name|quint32
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ibw
condition|;
name|i
operator|++
control|)
name|amp
operator|.
name|outRow
index|[
name|i
index|]
operator|=
name|uchar
argument_list|(
name|amp
operator|.
name|accRow
index|[
name|i
index|]
operator|/
name|iysz
argument_list|)
expr_stmt|;
name|quint32
name|a
index|[
literal|4
index|]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|qint32
name|cval
init|=
name|oxsz
decl_stmt|;
name|quint32
name|ix
init|=
literal|0
decl_stmt|;
for|for
control|(
name|quint32
name|ox
init|=
literal|0
init|;
name|ox
operator|<
name|oxsz
condition|;
name|ox
operator|++
control|)
block|{
for|for
control|(
name|quint32
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
name|a
index|[
name|i
index|]
operator|=
name|cval
operator|*
name|amp
operator|.
name|outRow
index|[
name|ix
operator|+
name|i
index|]
expr_stmt|;
for|for
control|(
name|cval
operator|=
name|ixsz
operator|-
name|cval
init|;
name|cval
operator|>
literal|0
condition|;
name|cval
operator|-=
name|oxsz
control|)
block|{
name|ix
operator|+=
literal|4
expr_stmt|;
if|if
condition|(
name|ix
operator|>=
name|ibw
condition|)
break|break;
comment|// Safety belt, should not happen
name|quint32
name|fact
init|=
name|qMin
argument_list|(
name|oxsz
argument_list|,
name|quint32
argument_list|(
name|cval
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|quint32
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
name|a
index|[
name|i
index|]
operator|+=
name|fact
operator|*
name|amp
operator|.
name|outRow
index|[
name|ix
operator|+
name|i
index|]
expr_stmt|;
block|}
name|cval
operator|*=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|quint32
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
name|data
index|[
operator|(
literal|4
operator|*
name|ox
operator|)
operator|+
name|i
index|]
operator|=
name|uchar
argument_list|(
name|a
index|[
name|i
index|]
operator|/
name|ixsz
argument_list|)
expr_stmt|;
block|}
name|data
operator|+=
name|bpl
expr_stmt|;
block|}
name|amp
operator|.
name|deallocate
argument_list|()
expr_stmt|;
name|outImage
operator|->
name|setDotsPerMeterX
argument_list|(
operator|(
name|png_get_x_pixels_per_meter
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|)
operator|*
name|oxsz
operator|)
operator|/
name|ixsz
argument_list|)
expr_stmt|;
name|outImage
operator|->
name|setDotsPerMeterY
argument_list|(
operator|(
name|png_get_y_pixels_per_meter
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|)
operator|*
name|oysz
operator|)
operator|/
name|iysz
argument_list|)
expr_stmt|;
if|if
condition|(
name|unit_type
operator|==
name|PNG_OFFSET_PIXEL
condition|)
name|outImage
operator|->
name|setOffset
argument_list|(
name|QPoint
argument_list|(
name|offset_x
operator|*
name|oxsz
operator|/
name|ixsz
argument_list|,
name|offset_y
operator|*
name|oysz
operator|/
name|iysz
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_extern
extern|extern
literal|"C"
block|{
DECL|function|qt_png_warning
specifier|static
name|void
name|CALLBACK_CALL_TYPE
name|qt_png_warning
parameter_list|(
name|png_structp
comment|/*png_ptr*/
parameter_list|,
name|png_const_charp
name|message
parameter_list|)
block|{
name|qWarning
argument_list|(
literal|"libpng warning: %s"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_extern
begin_function
DECL|function|readPngTexts
name|void
name|Q_INTERNAL_WIN_NO_THROW
name|QPngHandlerPrivate
operator|::
name|readPngTexts
parameter_list|(
name|png_info
modifier|*
name|info
parameter_list|)
block|{
name|png_textp
name|text_ptr
decl_stmt|;
name|int
name|num_text
init|=
literal|0
decl_stmt|;
name|png_get_text
argument_list|(
name|png_ptr
argument_list|,
name|info
argument_list|,
operator|&
name|text_ptr
argument_list|,
operator|&
name|num_text
argument_list|)
expr_stmt|;
while|while
condition|(
name|num_text
operator|--
condition|)
block|{
name|QString
name|key
decl_stmt|,
name|value
decl_stmt|;
name|key
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|text_ptr
operator|->
name|key
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|PNG_iTXt_SUPPORTED
argument_list|)
if|if
condition|(
name|text_ptr
operator|->
name|itxt_length
condition|)
block|{
name|value
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|text_ptr
operator|->
name|text
argument_list|,
name|int
argument_list|(
name|text_ptr
operator|->
name|itxt_length
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|value
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|text_ptr
operator|->
name|text
argument_list|,
name|int
argument_list|(
name|text_ptr
operator|->
name|text_length
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|description
operator|.
name|isEmpty
argument_list|()
condition|)
name|description
operator|+=
name|QLatin1String
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
name|description
operator|+=
name|key
operator|+
name|QLatin1String
argument_list|(
literal|": "
argument_list|)
operator|+
name|value
operator|.
name|simplified
argument_list|()
expr_stmt|;
name|readTexts
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|readTexts
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|text_ptr
operator|++
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|readPngHeader
name|bool
name|Q_INTERNAL_WIN_NO_THROW
name|QPngHandlerPrivate
operator|::
name|readPngHeader
parameter_list|()
block|{
name|state
operator|=
name|Error
expr_stmt|;
name|png_ptr
operator|=
name|png_create_read_struct
argument_list|(
name|PNG_LIBPNG_VER_STRING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|png_ptr
condition|)
return|return
literal|false
return|;
name|png_set_error_fn
argument_list|(
name|png_ptr
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|qt_png_warning
argument_list|)
expr_stmt|;
name|info_ptr
operator|=
name|png_create_info_struct
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|info_ptr
condition|)
block|{
name|png_destroy_read_struct
argument_list|(
operator|&
name|png_ptr
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|png_ptr
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
name|end_info
operator|=
name|png_create_info_struct
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|end_info
condition|)
block|{
name|png_destroy_read_struct
argument_list|(
operator|&
name|png_ptr
argument_list|,
operator|&
name|info_ptr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|png_ptr
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|setjmp
argument_list|(
name|png_jmpbuf
argument_list|(
name|png_ptr
argument_list|)
argument_list|)
condition|)
block|{
name|png_destroy_read_struct
argument_list|(
operator|&
name|png_ptr
argument_list|,
operator|&
name|info_ptr
argument_list|,
operator|&
name|end_info
argument_list|)
expr_stmt|;
name|png_ptr
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
name|png_set_read_fn
argument_list|(
name|png_ptr
argument_list|,
name|this
argument_list|,
name|iod_read_fn
argument_list|)
expr_stmt|;
name|png_read_info
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|)
expr_stmt|;
name|readPngTexts
argument_list|(
name|info_ptr
argument_list|)
expr_stmt|;
name|state
operator|=
name|ReadHeader
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|readPngImage
name|bool
name|Q_INTERNAL_WIN_NO_THROW
name|QPngHandlerPrivate
operator|::
name|readPngImage
parameter_list|(
name|QImage
modifier|*
name|outImage
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
name|Error
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|state
operator|==
name|Ready
operator|&&
operator|!
name|readPngHeader
argument_list|()
condition|)
block|{
name|state
operator|=
name|Error
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|setjmp
argument_list|(
name|png_jmpbuf
argument_list|(
name|png_ptr
argument_list|)
argument_list|)
condition|)
block|{
name|png_destroy_read_struct
argument_list|(
operator|&
name|png_ptr
argument_list|,
operator|&
name|info_ptr
argument_list|,
operator|&
name|end_info
argument_list|)
expr_stmt|;
name|png_ptr
operator|=
literal|0
expr_stmt|;
name|amp
operator|.
name|deallocate
argument_list|()
expr_stmt|;
name|state
operator|=
name|Error
expr_stmt|;
return|return
literal|false
return|;
block|}
name|bool
name|doScaledRead
init|=
literal|false
decl_stmt|;
name|setup_qt
argument_list|(
operator|*
name|outImage
argument_list|,
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
name|scaledSize
argument_list|,
operator|&
name|doScaledRead
argument_list|,
name|gamma
argument_list|)
expr_stmt|;
if|if
condition|(
name|outImage
operator|->
name|isNull
argument_list|()
condition|)
block|{
name|png_destroy_read_struct
argument_list|(
operator|&
name|png_ptr
argument_list|,
operator|&
name|info_ptr
argument_list|,
operator|&
name|end_info
argument_list|)
expr_stmt|;
name|png_ptr
operator|=
literal|0
expr_stmt|;
name|amp
operator|.
name|deallocate
argument_list|()
expr_stmt|;
name|state
operator|=
name|Error
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|doScaledRead
condition|)
block|{
name|read_image_scaled
argument_list|(
name|outImage
argument_list|,
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
name|amp
argument_list|,
name|scaledSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|png_uint_32
name|width
init|=
literal|0
decl_stmt|;
name|png_uint_32
name|height
init|=
literal|0
decl_stmt|;
name|png_int_32
name|offset_x
init|=
literal|0
decl_stmt|;
name|png_int_32
name|offset_y
init|=
literal|0
decl_stmt|;
name|int
name|bit_depth
init|=
literal|0
decl_stmt|;
name|int
name|color_type
init|=
literal|0
decl_stmt|;
name|int
name|unit_type
init|=
name|PNG_OFFSET_PIXEL
decl_stmt|;
name|png_get_IHDR
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
operator|&
name|width
argument_list|,
operator|&
name|height
argument_list|,
operator|&
name|bit_depth
argument_list|,
operator|&
name|color_type
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|png_get_oFFs
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
operator|&
name|offset_x
argument_list|,
operator|&
name|offset_y
argument_list|,
operator|&
name|unit_type
argument_list|)
expr_stmt|;
name|uchar
modifier|*
name|data
init|=
name|outImage
operator|->
name|bits
argument_list|()
decl_stmt|;
name|int
name|bpl
init|=
name|outImage
operator|->
name|bytesPerLine
argument_list|()
decl_stmt|;
name|amp
operator|.
name|row_pointers
operator|=
operator|new
name|png_bytep
index|[
name|height
index|]
expr_stmt|;
for|for
control|(
name|uint
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
name|amp
operator|.
name|row_pointers
index|[
name|y
index|]
operator|=
name|data
operator|+
name|y
operator|*
name|bpl
expr_stmt|;
name|png_read_image
argument_list|(
name|png_ptr
argument_list|,
name|amp
operator|.
name|row_pointers
argument_list|)
expr_stmt|;
name|amp
operator|.
name|deallocate
argument_list|()
expr_stmt|;
name|outImage
operator|->
name|setDotsPerMeterX
argument_list|(
name|png_get_x_pixels_per_meter
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|)
argument_list|)
expr_stmt|;
name|outImage
operator|->
name|setDotsPerMeterY
argument_list|(
name|png_get_y_pixels_per_meter
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|unit_type
operator|==
name|PNG_OFFSET_PIXEL
condition|)
name|outImage
operator|->
name|setOffset
argument_list|(
name|QPoint
argument_list|(
name|offset_x
argument_list|,
name|offset_y
argument_list|)
argument_list|)
expr_stmt|;
comment|// sanity check palette entries
if|if
condition|(
name|color_type
operator|==
name|PNG_COLOR_TYPE_PALETTE
operator|&&
name|outImage
operator|->
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_Indexed8
condition|)
block|{
name|int
name|color_table_size
init|=
name|outImage
operator|->
name|colorCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
operator|(
name|int
operator|)
name|height
condition|;
operator|++
name|y
control|)
block|{
name|uchar
modifier|*
name|p
init|=
name|FAST_SCAN_LINE
argument_list|(
name|data
argument_list|,
name|bpl
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|uchar
modifier|*
name|end
init|=
name|p
operator|+
name|width
decl_stmt|;
while|while
condition|(
name|p
operator|<
name|end
condition|)
block|{
if|if
condition|(
operator|*
name|p
operator|>=
name|color_table_size
condition|)
operator|*
name|p
operator|=
literal|0
expr_stmt|;
operator|++
name|p
expr_stmt|;
block|}
block|}
block|}
block|}
name|state
operator|=
name|ReadingEnd
expr_stmt|;
name|png_read_end
argument_list|(
name|png_ptr
argument_list|,
name|end_info
argument_list|)
expr_stmt|;
name|readPngTexts
argument_list|(
name|end_info
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|readTexts
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|+=
literal|2
control|)
name|outImage
operator|->
name|setText
argument_list|(
name|readTexts
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|readTexts
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|png_destroy_read_struct
argument_list|(
operator|&
name|png_ptr
argument_list|,
operator|&
name|info_ptr
argument_list|,
operator|&
name|end_info
argument_list|)
expr_stmt|;
name|png_ptr
operator|=
literal|0
expr_stmt|;
name|amp
operator|.
name|deallocate
argument_list|()
expr_stmt|;
name|state
operator|=
name|Ready
expr_stmt|;
if|if
condition|(
name|scaledSize
operator|.
name|isValid
argument_list|()
operator|&&
name|outImage
operator|->
name|size
argument_list|()
operator|!=
name|scaledSize
condition|)
operator|*
name|outImage
operator|=
name|outImage
operator|->
name|scaled
argument_list|(
name|scaledSize
argument_list|,
name|Qt
operator|::
name|IgnoreAspectRatio
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|readImageFormat
name|QImage
operator|::
name|Format
name|QPngHandlerPrivate
operator|::
name|readImageFormat
parameter_list|()
block|{
name|QImage
operator|::
name|Format
name|format
init|=
name|QImage
operator|::
name|Format_Invalid
decl_stmt|;
name|png_uint_32
name|width
decl_stmt|,
name|height
decl_stmt|;
name|int
name|bit_depth
decl_stmt|,
name|color_type
decl_stmt|;
name|png_colorp
name|palette
decl_stmt|;
name|int
name|num_palette
decl_stmt|;
name|png_get_IHDR
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
operator|&
name|width
argument_list|,
operator|&
name|height
argument_list|,
operator|&
name|bit_depth
argument_list|,
operator|&
name|color_type
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|color_type
operator|==
name|PNG_COLOR_TYPE_GRAY
condition|)
block|{
comment|// Black& White or 8-bit grayscale
if|if
condition|(
name|bit_depth
operator|==
literal|1
operator|&&
name|png_get_channels
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|)
operator|==
literal|1
condition|)
block|{
name|format
operator|=
name|QImage
operator|::
name|Format_Mono
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bit_depth
operator|==
literal|16
operator|&&
name|png_get_valid
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
name|PNG_INFO_tRNS
argument_list|)
condition|)
block|{
name|format
operator|=
name|QImage
operator|::
name|Format_ARGB32
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bit_depth
operator|==
literal|8
operator|&&
operator|!
name|png_get_valid
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
name|PNG_INFO_tRNS
argument_list|)
condition|)
block|{
name|format
operator|=
name|QImage
operator|::
name|Format_Grayscale8
expr_stmt|;
block|}
else|else
block|{
name|format
operator|=
name|QImage
operator|::
name|Format_Indexed8
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|color_type
operator|==
name|PNG_COLOR_TYPE_PALETTE
operator|&&
name|png_get_PLTE
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
operator|&
name|palette
argument_list|,
operator|&
name|num_palette
argument_list|)
operator|&&
name|num_palette
operator|<=
literal|256
condition|)
block|{
comment|// 1-bit and 8-bit color
if|if
condition|(
name|bit_depth
operator|!=
literal|1
condition|)
name|png_set_packing
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
name|png_read_update_info
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|)
expr_stmt|;
name|png_get_IHDR
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
operator|&
name|width
argument_list|,
operator|&
name|height
argument_list|,
operator|&
name|bit_depth
argument_list|,
operator|&
name|color_type
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|format
operator|=
name|bit_depth
operator|==
literal|1
condition|?
name|QImage
operator|::
name|Format_Mono
else|:
name|QImage
operator|::
name|Format_Indexed8
expr_stmt|;
block|}
else|else
block|{
comment|// 32-bit
if|if
condition|(
name|bit_depth
operator|==
literal|16
condition|)
name|png_set_strip_16
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
name|format
operator|=
name|QImage
operator|::
name|Format_ARGB32
expr_stmt|;
comment|// Only add filler if no alpha, or we can get 5 channel data.
if|if
condition|(
operator|!
operator|(
name|color_type
operator|&
name|PNG_COLOR_MASK_ALPHA
operator|)
operator|&&
operator|!
name|png_get_valid
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
name|PNG_INFO_tRNS
argument_list|)
condition|)
block|{
comment|// We want 4 bytes, but it isn't an alpha channel
name|format
operator|=
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
block|}
block|}
return|return
name|format
return|;
block|}
end_function
begin_constructor
DECL|function|QPNGImageWriter
name|QPNGImageWriter
operator|::
name|QPNGImageWriter
parameter_list|(
name|QIODevice
modifier|*
name|iod
parameter_list|)
member_init_list|:
name|dev
argument_list|(
name|iod
argument_list|)
member_init_list|,
name|frames_written
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|disposal
argument_list|(
name|Unspecified
argument_list|)
member_init_list|,
name|looping
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|ms_delay
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|gamma
argument_list|(
literal|0.0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QPNGImageWriter
name|QPNGImageWriter
operator|::
name|~
name|QPNGImageWriter
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|setDisposalMethod
name|void
name|QPNGImageWriter
operator|::
name|setDisposalMethod
parameter_list|(
name|DisposalMethod
name|dm
parameter_list|)
block|{
name|disposal
operator|=
name|dm
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setLooping
name|void
name|QPNGImageWriter
operator|::
name|setLooping
parameter_list|(
name|int
name|loops
parameter_list|)
block|{
name|looping
operator|=
name|loops
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFrameDelay
name|void
name|QPNGImageWriter
operator|::
name|setFrameDelay
parameter_list|(
name|int
name|msecs
parameter_list|)
block|{
name|ms_delay
operator|=
name|msecs
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setGamma
name|void
name|QPNGImageWriter
operator|::
name|setGamma
parameter_list|(
name|float
name|g
parameter_list|)
block|{
name|gamma
operator|=
name|g
expr_stmt|;
block|}
end_function
begin_function
DECL|function|set_text
specifier|static
name|void
name|set_text
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|png_structp
name|png_ptr
parameter_list|,
name|png_infop
name|info_ptr
parameter_list|,
specifier|const
name|QString
modifier|&
name|description
parameter_list|)
block|{
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|text
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|key
decl|,
name|image
operator|.
name|textKeys
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
name|text
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|image
operator|.
name|text
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|pair
decl|,
name|description
operator|.
name|split
argument_list|(
name|QLatin1String
argument_list|(
literal|"\n\n"
argument_list|)
argument_list|)
control|)
block|{
name|int
name|index
init|=
name|pair
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|pair
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|<
name|index
condition|)
block|{
name|QString
name|s
init|=
name|pair
operator|.
name|simplified
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
name|text
operator|.
name|insert
argument_list|(
name|QLatin1String
argument_list|(
literal|"Description"
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QString
name|key
init|=
name|pair
operator|.
name|left
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|simplified
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|text
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|pair
operator|.
name|mid
argument_list|(
name|index
operator|+
literal|2
argument_list|)
operator|.
name|simplified
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|png_textp
name|text_ptr
init|=
operator|new
name|png_text
index|[
name|text
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|memset
argument_list|(
name|text_ptr
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|png_text
argument_list|)
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|text
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|text
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|text_ptr
index|[
name|i
index|]
operator|.
name|key
operator|=
name|qstrdup
argument_list|(
name|it
operator|.
name|key
argument_list|()
operator|.
name|left
argument_list|(
literal|79
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|noCompress
init|=
operator|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|length
argument_list|()
operator|<
literal|40
operator|)
decl_stmt|;
ifdef|#
directive|ifdef
name|PNG_iTXt_SUPPORTED
name|bool
name|needsItxt
init|=
literal|false
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QChar
name|c
decl|,
name|it
operator|.
name|value
argument_list|()
control|)
block|{
name|uchar
name|ch
init|=
name|c
operator|.
name|cell
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|row
argument_list|()
operator|||
operator|(
name|ch
operator|<
literal|0x20
operator|&&
name|ch
operator|!=
literal|'\n'
operator|)
operator|||
operator|(
name|ch
operator|>
literal|0x7e
operator|&&
name|ch
operator|<
literal|0xa0
operator|)
condition|)
block|{
name|needsItxt
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|needsItxt
condition|)
block|{
name|text_ptr
index|[
name|i
index|]
operator|.
name|compression
operator|=
name|noCompress
condition|?
name|PNG_ITXT_COMPRESSION_NONE
else|:
name|PNG_ITXT_COMPRESSION_zTXt
expr_stmt|;
name|QByteArray
name|value
init|=
name|it
operator|.
name|value
argument_list|()
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|text_ptr
index|[
name|i
index|]
operator|.
name|text
operator|=
name|qstrdup
argument_list|(
name|value
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|text_ptr
index|[
name|i
index|]
operator|.
name|itxt_length
operator|=
name|value
operator|.
name|size
argument_list|()
expr_stmt|;
name|text_ptr
index|[
name|i
index|]
operator|.
name|lang
operator|=
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|text_ptr
index|[
name|i
index|]
operator|.
name|lang_key
operator|=
name|qstrdup
argument_list|(
name|it
operator|.
name|key
argument_list|()
operator|.
name|toUtf8
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|text_ptr
index|[
name|i
index|]
operator|.
name|compression
operator|=
name|noCompress
condition|?
name|PNG_TEXT_COMPRESSION_NONE
else|:
name|PNG_TEXT_COMPRESSION_zTXt
expr_stmt|;
name|QByteArray
name|value
init|=
name|it
operator|.
name|value
argument_list|()
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|text_ptr
index|[
name|i
index|]
operator|.
name|text
operator|=
name|qstrdup
argument_list|(
name|value
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|text_ptr
index|[
name|i
index|]
operator|.
name|text_length
operator|=
name|value
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
name|png_set_text
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
name|text_ptr
argument_list|,
name|i
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|text
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
operator|delete
index|[]
name|text_ptr
index|[
name|i
index|]
operator|.
name|key
expr_stmt|;
operator|delete
index|[]
name|text_ptr
index|[
name|i
index|]
operator|.
name|text
expr_stmt|;
ifdef|#
directive|ifdef
name|PNG_iTXt_SUPPORTED
operator|delete
index|[]
name|text_ptr
index|[
name|i
index|]
operator|.
name|lang_key
expr_stmt|;
endif|#
directive|endif
block|}
operator|delete
index|[]
name|text_ptr
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeImage
name|bool
name|QPNGImageWriter
operator|::
name|writeImage
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|int
name|off_x
parameter_list|,
name|int
name|off_y
parameter_list|)
block|{
return|return
name|writeImage
argument_list|(
name|image
argument_list|,
operator|-
literal|1
argument_list|,
name|QString
argument_list|()
argument_list|,
name|off_x
argument_list|,
name|off_y
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|writeImage
name|bool
name|Q_INTERNAL_WIN_NO_THROW
name|QPNGImageWriter
operator|::
name|writeImage
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
specifier|volatile
name|int
name|quality_in
parameter_list|,
specifier|const
name|QString
modifier|&
name|description
parameter_list|,
name|int
name|off_x_in
parameter_list|,
name|int
name|off_y_in
parameter_list|)
block|{
name|QPoint
name|offset
init|=
name|image
operator|.
name|offset
argument_list|()
decl_stmt|;
name|int
name|off_x
init|=
name|off_x_in
operator|+
name|offset
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|off_y
init|=
name|off_y_in
operator|+
name|offset
operator|.
name|y
argument_list|()
decl_stmt|;
name|png_structp
name|png_ptr
decl_stmt|;
name|png_infop
name|info_ptr
decl_stmt|;
name|png_ptr
operator|=
name|png_create_write_struct
argument_list|(
name|PNG_LIBPNG_VER_STRING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|png_ptr
condition|)
block|{
return|return
literal|false
return|;
block|}
name|png_set_error_fn
argument_list|(
name|png_ptr
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|qt_png_warning
argument_list|)
expr_stmt|;
name|info_ptr
operator|=
name|png_create_info_struct
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|info_ptr
condition|)
block|{
name|png_destroy_write_struct
argument_list|(
operator|&
name|png_ptr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|setjmp
argument_list|(
name|png_jmpbuf
argument_list|(
name|png_ptr
argument_list|)
argument_list|)
condition|)
block|{
name|png_destroy_write_struct
argument_list|(
operator|&
name|png_ptr
argument_list|,
operator|&
name|info_ptr
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|quality
init|=
name|quality_in
decl_stmt|;
if|if
condition|(
name|quality
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|quality
operator|>
literal|9
condition|)
block|{
name|qWarning
argument_list|(
literal|"PNG: Quality %d out of range"
argument_list|,
name|quality
argument_list|)
expr_stmt|;
name|quality
operator|=
literal|9
expr_stmt|;
block|}
name|png_set_compression_level
argument_list|(
name|png_ptr
argument_list|,
name|quality
argument_list|)
expr_stmt|;
block|}
name|png_set_write_fn
argument_list|(
name|png_ptr
argument_list|,
operator|(
name|void
operator|*
operator|)
name|this
argument_list|,
name|qpiw_write_fn
argument_list|,
name|qpiw_flush_fn
argument_list|)
expr_stmt|;
name|int
name|color_type
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|colorCount
argument_list|()
condition|)
block|{
if|if
condition|(
name|image
operator|.
name|isGrayscale
argument_list|()
condition|)
name|color_type
operator|=
name|PNG_COLOR_TYPE_GRAY
expr_stmt|;
else|else
name|color_type
operator|=
name|PNG_COLOR_TYPE_PALETTE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|image
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_Grayscale8
condition|)
name|color_type
operator|=
name|PNG_COLOR_TYPE_GRAY
expr_stmt|;
elseif|else
if|if
condition|(
name|image
operator|.
name|hasAlphaChannel
argument_list|()
condition|)
name|color_type
operator|=
name|PNG_COLOR_TYPE_RGB_ALPHA
expr_stmt|;
else|else
name|color_type
operator|=
name|PNG_COLOR_TYPE_RGB
expr_stmt|;
name|png_set_IHDR
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|,
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|1
condition|?
literal|1
else|:
literal|8
argument_list|,
comment|// per channel
name|color_type
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// sets #channels
if|if
condition|(
name|gamma
operator|!=
literal|0.0
condition|)
block|{
name|png_set_gAMA
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
literal|1.0
operator|/
name|gamma
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|image
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_MonoLSB
condition|)
name|png_set_packswap
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|color_type
operator|==
name|PNG_COLOR_TYPE_PALETTE
condition|)
block|{
comment|// Paletted
name|int
name|num_palette
init|=
name|qMin
argument_list|(
literal|256
argument_list|,
name|image
operator|.
name|colorCount
argument_list|()
argument_list|)
decl_stmt|;
name|png_color
name|palette
index|[
literal|256
index|]
decl_stmt|;
name|png_byte
name|trans
index|[
literal|256
index|]
decl_stmt|;
name|int
name|num_trans
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num_palette
condition|;
name|i
operator|++
control|)
block|{
name|QRgb
name|rgba
init|=
name|image
operator|.
name|color
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|palette
index|[
name|i
index|]
operator|.
name|red
operator|=
name|qRed
argument_list|(
name|rgba
argument_list|)
expr_stmt|;
name|palette
index|[
name|i
index|]
operator|.
name|green
operator|=
name|qGreen
argument_list|(
name|rgba
argument_list|)
expr_stmt|;
name|palette
index|[
name|i
index|]
operator|.
name|blue
operator|=
name|qBlue
argument_list|(
name|rgba
argument_list|)
expr_stmt|;
name|trans
index|[
name|i
index|]
operator|=
name|qAlpha
argument_list|(
name|rgba
argument_list|)
expr_stmt|;
if|if
condition|(
name|trans
index|[
name|i
index|]
operator|<
literal|255
condition|)
block|{
name|num_trans
operator|=
name|i
operator|+
literal|1
expr_stmt|;
block|}
block|}
name|png_set_PLTE
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
name|palette
argument_list|,
name|num_palette
argument_list|)
expr_stmt|;
if|if
condition|(
name|num_trans
condition|)
block|{
name|png_set_tRNS
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
name|trans
argument_list|,
name|num_trans
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Swap ARGB to RGBA (normal PNG format) before saving on
comment|// BigEndian machines
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|)
block|{
name|png_set_swap_alpha
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
block|}
comment|// Qt==ARGB==Big(ARGB)==Little(BGRA). But RGB888 is RGB regardless
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|LittleEndian
operator|&&
name|image
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_RGB888
condition|)
block|{
name|png_set_bgr
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|off_x
operator|||
name|off_y
condition|)
block|{
name|png_set_oFFs
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
name|off_x
argument_list|,
name|off_y
argument_list|,
name|PNG_OFFSET_PIXEL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|frames_written
operator|>
literal|0
condition|)
name|png_set_sig_bytes
argument_list|(
name|png_ptr
argument_list|,
literal|8
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|dotsPerMeterX
argument_list|()
operator|>
literal|0
operator|||
name|image
operator|.
name|dotsPerMeterY
argument_list|()
operator|>
literal|0
condition|)
block|{
name|png_set_pHYs
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
name|image
operator|.
name|dotsPerMeterX
argument_list|()
argument_list|,
name|image
operator|.
name|dotsPerMeterY
argument_list|()
argument_list|,
name|PNG_RESOLUTION_METER
argument_list|)
expr_stmt|;
block|}
name|set_text
argument_list|(
name|image
argument_list|,
name|png_ptr
argument_list|,
name|info_ptr
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|png_write_info
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|depth
argument_list|()
operator|!=
literal|1
condition|)
name|png_set_packing
argument_list|(
name|png_ptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|color_type
operator|==
name|PNG_COLOR_TYPE_RGB
operator|&&
name|image
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_RGB888
condition|)
name|png_set_filler
argument_list|(
name|png_ptr
argument_list|,
literal|0
argument_list|,
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|?
name|PNG_FILLER_BEFORE
else|:
name|PNG_FILLER_AFTER
argument_list|)
expr_stmt|;
if|if
condition|(
name|looping
operator|>=
literal|0
operator|&&
name|frames_written
operator|==
literal|0
condition|)
block|{
name|uchar
name|data
index|[
literal|13
index|]
init|=
literal|"NETSCAPE2.0"
decl_stmt|;
comment|//                0123456789aBC
name|data
index|[
literal|0xB
index|]
operator|=
name|looping
operator|%
literal|0x100
expr_stmt|;
name|data
index|[
literal|0xC
index|]
operator|=
name|looping
operator|/
literal|0x100
expr_stmt|;
name|png_write_chunk
argument_list|(
name|png_ptr
argument_list|,
cast|const_cast
argument_list|<
name|png_bytep
argument_list|>
argument_list|(
operator|(
specifier|const
name|png_byte
operator|*
operator|)
literal|"gIFx"
argument_list|)
argument_list|,
name|data
argument_list|,
literal|13
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ms_delay
operator|>=
literal|0
operator|||
name|disposal
operator|!=
name|Unspecified
condition|)
block|{
name|uchar
name|data
index|[
literal|4
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
name|disposal
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|=
operator|(
name|ms_delay
operator|/
literal|10
operator|)
operator|/
literal|0x100
expr_stmt|;
comment|// hundredths
name|data
index|[
literal|3
index|]
operator|=
operator|(
name|ms_delay
operator|/
literal|10
operator|)
operator|%
literal|0x100
expr_stmt|;
name|png_write_chunk
argument_list|(
name|png_ptr
argument_list|,
cast|const_cast
argument_list|<
name|png_bytep
argument_list|>
argument_list|(
operator|(
specifier|const
name|png_byte
operator|*
operator|)
literal|"gIFg"
argument_list|)
argument_list|,
name|data
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
name|int
name|height
init|=
name|image
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|width
init|=
name|image
operator|.
name|width
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|image
operator|.
name|format
argument_list|()
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_Mono
case|:
case|case
name|QImage
operator|::
name|Format_MonoLSB
case|:
case|case
name|QImage
operator|::
name|Format_Indexed8
case|:
case|case
name|QImage
operator|::
name|Format_Grayscale8
case|:
case|case
name|QImage
operator|::
name|Format_RGB32
case|:
case|case
name|QImage
operator|::
name|Format_ARGB32
case|:
case|case
name|QImage
operator|::
name|Format_RGB888
case|:
block|{
name|png_bytep
modifier|*
name|row_pointers
init|=
operator|new
name|png_bytep
index|[
name|height
index|]
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
name|row_pointers
index|[
name|y
index|]
operator|=
cast|const_cast
argument_list|<
name|png_bytep
argument_list|>
argument_list|(
name|image
operator|.
name|constScanLine
argument_list|(
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|png_write_image
argument_list|(
name|png_ptr
argument_list|,
name|row_pointers
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|row_pointers
expr_stmt|;
block|}
break|break;
default|default:
block|{
name|QImage
operator|::
name|Format
name|fmt
init|=
name|image
operator|.
name|hasAlphaChannel
argument_list|()
condition|?
name|QImage
operator|::
name|Format_ARGB32
else|:
name|QImage
operator|::
name|Format_RGB32
decl_stmt|;
name|QImage
name|row
decl_stmt|;
name|png_bytep
name|row_pointers
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|row
operator|=
name|image
operator|.
name|copy
argument_list|(
literal|0
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
literal|1
argument_list|)
operator|.
name|convertToFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|row_pointers
index|[
literal|0
index|]
operator|=
cast|const_cast
argument_list|<
name|png_bytep
argument_list|>
argument_list|(
name|row
operator|.
name|constScanLine
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|png_write_rows
argument_list|(
name|png_ptr
argument_list|,
name|row_pointers
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
name|png_write_end
argument_list|(
name|png_ptr
argument_list|,
name|info_ptr
argument_list|)
expr_stmt|;
name|frames_written
operator|++
expr_stmt|;
name|png_destroy_write_struct
argument_list|(
operator|&
name|png_ptr
argument_list|,
operator|&
name|info_ptr
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|write_png_image
specifier|static
name|bool
name|write_png_image
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|QIODevice
modifier|*
name|device
parameter_list|,
name|int
name|quality
parameter_list|,
name|float
name|gamma
parameter_list|,
specifier|const
name|QString
modifier|&
name|description
parameter_list|)
block|{
name|QPNGImageWriter
name|writer
argument_list|(
name|device
argument_list|)
decl_stmt|;
if|if
condition|(
name|quality
operator|>=
literal|0
condition|)
block|{
name|quality
operator|=
name|qMin
argument_list|(
name|quality
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|quality
operator|=
operator|(
literal|100
operator|-
name|quality
operator|)
operator|*
literal|9
operator|/
literal|91
expr_stmt|;
comment|// map [0,100] -> [9,0]
block|}
name|writer
operator|.
name|setGamma
argument_list|(
name|gamma
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|writeImage
argument_list|(
name|image
argument_list|,
name|quality
argument_list|,
name|description
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QPngHandler
name|QPngHandler
operator|::
name|QPngHandler
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|new
name|QPngHandlerPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QPngHandler
name|QPngHandler
operator|::
name|~
name|QPngHandler
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|png_ptr
condition|)
name|png_destroy_read_struct
argument_list|(
operator|&
name|d
operator|->
name|png_ptr
argument_list|,
operator|&
name|d
operator|->
name|info_ptr
argument_list|,
operator|&
name|d
operator|->
name|end_info
argument_list|)
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|canRead
name|bool
name|QPngHandler
operator|::
name|canRead
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|state
operator|==
name|QPngHandlerPrivate
operator|::
name|Ready
operator|&&
operator|!
name|canRead
argument_list|(
name|device
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|state
operator|!=
name|QPngHandlerPrivate
operator|::
name|Error
condition|)
block|{
name|setFormat
argument_list|(
literal|"png"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|canRead
name|bool
name|QPngHandler
operator|::
name|canRead
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|)
block|{
if|if
condition|(
operator|!
name|device
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPngHandler::canRead() called with no device"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|device
operator|->
name|peek
argument_list|(
literal|8
argument_list|)
operator|==
literal|"\x89\x50\x4E\x47\x0D\x0A\x1A\x0A"
return|;
block|}
end_function
begin_function
DECL|function|read
name|bool
name|QPngHandler
operator|::
name|read
parameter_list|(
name|QImage
modifier|*
name|image
parameter_list|)
block|{
if|if
condition|(
operator|!
name|canRead
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
name|d
operator|->
name|readPngImage
argument_list|(
name|image
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|write
name|bool
name|QPngHandler
operator|::
name|write
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|)
block|{
return|return
name|write_png_image
argument_list|(
name|image
argument_list|,
name|device
argument_list|()
argument_list|,
name|d
operator|->
name|quality
argument_list|,
name|d
operator|->
name|gamma
argument_list|,
name|d
operator|->
name|description
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|supportsOption
name|bool
name|QPngHandler
operator|::
name|supportsOption
parameter_list|(
name|ImageOption
name|option
parameter_list|)
specifier|const
block|{
return|return
name|option
operator|==
name|Gamma
operator|||
name|option
operator|==
name|Description
operator|||
name|option
operator|==
name|ImageFormat
operator|||
name|option
operator|==
name|Quality
operator|||
name|option
operator|==
name|Size
operator|||
name|option
operator|==
name|ScaledSize
return|;
block|}
end_function
begin_function
DECL|function|option
name|QVariant
name|QPngHandler
operator|::
name|option
parameter_list|(
name|ImageOption
name|option
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|state
operator|==
name|QPngHandlerPrivate
operator|::
name|Error
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|d
operator|->
name|state
operator|==
name|QPngHandlerPrivate
operator|::
name|Ready
operator|&&
operator|!
name|d
operator|->
name|readPngHeader
argument_list|()
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|option
operator|==
name|Gamma
condition|)
return|return
name|d
operator|->
name|gamma
return|;
elseif|else
if|if
condition|(
name|option
operator|==
name|Quality
condition|)
return|return
name|d
operator|->
name|quality
return|;
elseif|else
if|if
condition|(
name|option
operator|==
name|Description
condition|)
return|return
name|d
operator|->
name|description
return|;
elseif|else
if|if
condition|(
name|option
operator|==
name|Size
condition|)
return|return
name|QSize
argument_list|(
name|png_get_image_width
argument_list|(
name|d
operator|->
name|png_ptr
argument_list|,
name|d
operator|->
name|info_ptr
argument_list|)
argument_list|,
name|png_get_image_height
argument_list|(
name|d
operator|->
name|png_ptr
argument_list|,
name|d
operator|->
name|info_ptr
argument_list|)
argument_list|)
return|;
elseif|else
if|if
condition|(
name|option
operator|==
name|ScaledSize
condition|)
return|return
name|d
operator|->
name|scaledSize
return|;
elseif|else
if|if
condition|(
name|option
operator|==
name|ImageFormat
condition|)
return|return
name|d
operator|->
name|readImageFormat
argument_list|()
return|;
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setOption
name|void
name|QPngHandler
operator|::
name|setOption
parameter_list|(
name|ImageOption
name|option
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
if|if
condition|(
name|option
operator|==
name|Gamma
condition|)
name|d
operator|->
name|gamma
operator|=
name|value
operator|.
name|toFloat
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|==
name|Quality
condition|)
name|d
operator|->
name|quality
operator|=
name|value
operator|.
name|toInt
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|==
name|Description
condition|)
name|d
operator|->
name|description
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|==
name|ScaledSize
condition|)
name|d
operator|->
name|scaledSize
operator|=
name|value
operator|.
name|toSize
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|name
name|QByteArray
name|QPngHandler
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
literal|"png"
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_IMAGEFORMAT_PNG
end_comment
end_unit
