begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|"qdir.h"
end_include
begin_include
include|#
directive|include
file|"qfont_p.h"
end_include
begin_include
include|#
directive|include
file|"qfontengine_s60_p.h"
end_include
begin_include
include|#
directive|include
file|"qabstractfileengine.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopservices.h"
end_include
begin_include
include|#
directive|include
file|"qtemporaryfile.h"
end_include
begin_include
include|#
directive|include
file|"qtextcodec.h"
end_include
begin_include
include|#
directive|include
file|<private/qpixmap_s60_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qt_s60_p.h>
end_include
begin_include
include|#
directive|include
file|"qendian.h"
end_include
begin_include
include|#
directive|include
file|<private/qcore_symbian_p.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_FREETYPE
end_ifdef
begin_include
include|#
directive|include
file|<openfont.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|SYMBIAN_ENABLE_SPLIT_HEADERS
end_ifdef
begin_include
include|#
directive|include
file|<graphics/openfontrasterizer.h>
end_include
begin_comment
comment|// COpenFontRasterizer has moved to a new header file
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// SYMBIAN_ENABLE_SPLIT_HEADERS
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_FREETYPE
end_comment
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|qt_symbian_fontFamiliesOnFontServer
name|QStringList
name|qt_symbian_fontFamiliesOnFontServer
parameter_list|()
comment|// Also used in qfont_s60.cpp
block|{
name|QStringList
name|result
decl_stmt|;
name|QSymbianFbsHeapLock
name|lock
argument_list|(
name|QSymbianFbsHeapLock
operator|::
name|Unlock
argument_list|)
decl_stmt|;
specifier|const
name|int
name|numTypeFaces
init|=
name|S60
operator|->
name|screenDevice
argument_list|()
operator|->
name|NumTypefaces
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTypeFaces
condition|;
name|i
operator|++
control|)
block|{
name|TTypefaceSupport
name|typefaceSupport
decl_stmt|;
name|S60
operator|->
name|screenDevice
argument_list|()
operator|->
name|TypefaceSupport
argument_list|(
name|typefaceSupport
argument_list|,
name|i
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|familyName
argument_list|(
operator|(
specifier|const
name|QChar
operator|*
operator|)
name|typefaceSupport
operator|.
name|iTypeface
operator|.
name|iName
operator|.
name|Ptr
argument_list|()
argument_list|,
name|typefaceSupport
operator|.
name|iTypeface
operator|.
name|iName
operator|.
name|Length
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|familyName
argument_list|)
expr_stmt|;
block|}
name|lock
operator|.
name|relock
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|alternativeFilePaths
name|QFileInfoList
name|alternativeFilePaths
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|nameFilters
parameter_list|,
name|QDir
operator|::
name|Filters
name|filters
init|=
name|QDir
operator|::
name|NoFilter
parameter_list|,
name|QDir
operator|::
name|SortFlags
name|sort
init|=
name|QDir
operator|::
name|NoSort
parameter_list|,
name|bool
name|uniqueFileNames
init|=
literal|true
parameter_list|)
block|{
name|QFileInfoList
name|result
decl_stmt|;
comment|// Prepare a 'soft to hard' drive list: W:, X: ... A:, Z:
name|QStringList
name|driveStrings
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFileInfo
modifier|&
name|drive
decl|,
name|QDir
operator|::
name|drives
argument_list|()
control|)
name|driveStrings
operator|.
name|append
argument_list|(
name|drive
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|driveStrings
operator|.
name|sort
argument_list|()
expr_stmt|;
specifier|const
name|QString
name|zDriveString
argument_list|(
name|QLatin1String
argument_list|(
literal|"Z:/"
argument_list|)
argument_list|)
decl_stmt|;
name|driveStrings
operator|.
name|removeAll
argument_list|(
name|zDriveString
argument_list|)
expr_stmt|;
name|driveStrings
operator|.
name|prepend
argument_list|(
name|zDriveString
argument_list|)
expr_stmt|;
name|QStringList
name|uniqueFileNameList
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|driveStrings
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
specifier|const
name|QDir
name|dirOnDrive
argument_list|(
name|driveStrings
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|+
name|path
argument_list|)
decl_stmt|;
specifier|const
name|QFileInfoList
name|entriesOnDrive
init|=
name|dirOnDrive
operator|.
name|entryInfoList
argument_list|(
name|nameFilters
argument_list|,
name|filters
argument_list|,
name|sort
argument_list|)
decl_stmt|;
if|if
condition|(
name|uniqueFileNames
condition|)
block|{
foreach|foreach
control|(
specifier|const
name|QFileInfo
modifier|&
name|entry
decl|,
name|entriesOnDrive
control|)
block|{
if|if
condition|(
operator|!
name|uniqueFileNameList
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|fileName
argument_list|()
argument_list|)
condition|)
block|{
name|uniqueFileNameList
operator|.
name|append
argument_list|(
name|entry
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
name|entriesOnDrive
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_FREETYPE
end_ifdef
begin_class
DECL|class|QSymbianFontDatabaseExtrasImplementation
class|class
name|QSymbianFontDatabaseExtrasImplementation
super|:
specifier|public
name|QSymbianFontDatabaseExtras
block|{
public|public:
name|QSymbianFontDatabaseExtrasImplementation
parameter_list|()
constructor_decl|;
name|~
name|QSymbianFontDatabaseExtrasImplementation
parameter_list|()
destructor_decl|;
specifier|const
name|QSymbianTypeFaceExtras
modifier|*
name|extras
parameter_list|(
specifier|const
name|QString
modifier|&
name|typeface
parameter_list|,
name|bool
name|bold
parameter_list|,
name|bool
name|italic
parameter_list|)
specifier|const
function_decl|;
name|void
name|removeAppFontData
parameter_list|(
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
modifier|*
name|fnt
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|bool
name|appFontLimitReached
parameter_list|()
function_decl|;
name|TUid
name|addFontFileToFontStore
parameter_list|(
specifier|const
name|QFileInfo
modifier|&
name|fontFileInfo
parameter_list|)
function_decl|;
specifier|static
name|void
name|clear
parameter_list|()
function_decl|;
specifier|static
specifier|inline
name|QString
name|tempAppFontFolder
parameter_list|()
function_decl|;
DECL|member|appFontMarkerPrefix
specifier|static
specifier|const
name|QString
name|appFontMarkerPrefix
decl_stmt|;
specifier|static
name|QString
name|appFontMarker
parameter_list|()
function_decl|;
comment|// 'qaf<shortUid[+shortPid]>'
DECL|struct|CFontFromFontStoreReleaser
struct|struct
name|CFontFromFontStoreReleaser
block|{
DECL|function|cleanup
specifier|static
specifier|inline
name|void
name|cleanup
parameter_list|(
name|CFont
modifier|*
name|font
parameter_list|)
block|{
if|if
condition|(
operator|!
name|font
condition|)
return|return;
specifier|const
name|QSymbianFontDatabaseExtrasImplementation
modifier|*
name|dbExtras
init|=
cast|static_cast
argument_list|<
specifier|const
name|QSymbianFontDatabaseExtrasImplementation
operator|*
argument_list|>
argument_list|(
name|privateDb
argument_list|()
operator|->
name|symbianExtras
argument_list|)
decl_stmt|;
name|dbExtras
operator|->
name|m_store
operator|->
name|ReleaseFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
DECL|struct|CFontFromScreenDeviceReleaser
struct|struct
name|CFontFromScreenDeviceReleaser
block|{
DECL|function|cleanup
specifier|static
specifier|inline
name|void
name|cleanup
parameter_list|(
name|CFont
modifier|*
name|font
parameter_list|)
block|{
if|if
condition|(
operator|!
name|font
condition|)
return|return;
name|S60
operator|->
name|screenDevice
argument_list|()
operator|->
name|ReleaseFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
comment|// m_heap, m_store, m_rasterizer and m_extras are used if Symbian
comment|// does not provide the Font Table API
DECL|member|m_heap
name|RHeap
modifier|*
name|m_heap
decl_stmt|;
DECL|member|m_store
name|CFontStore
modifier|*
name|m_store
decl_stmt|;
DECL|member|m_rasterizer
name|COpenFontRasterizer
modifier|*
name|m_rasterizer
decl_stmt|;
DECL|member|m_extras
specifier|mutable
name|QList
argument_list|<
specifier|const
name|QSymbianTypeFaceExtras
modifier|*
argument_list|>
name|m_extras
decl_stmt|;
DECL|member|m_applicationFontFamilies
specifier|mutable
name|QSet
argument_list|<
name|QString
argument_list|>
name|m_applicationFontFamilies
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|appFontMarkerPrefix
specifier|const
name|QString
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|appFontMarkerPrefix
init|=
name|QLatin1String
argument_list|(
literal|"Q"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|tempAppFontFolder
specifier|inline
name|QString
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|tempAppFontFolder
parameter_list|()
block|{
return|return
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|appFontMarker
name|QString
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|appFontMarker
parameter_list|()
block|{
specifier|static
name|QString
name|result
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|quint16
name|id
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|QSymbianTypeFaceExtras
operator|::
name|symbianFontTableApiAvailable
argument_list|()
condition|)
block|{
comment|// We are allowed to load app fonts even from previous, crashed runs
comment|// of this application, since we can access the font tables.
specifier|const
name|quint32
name|uid
init|=
name|RProcess
argument_list|()
operator|.
name|Type
argument_list|()
operator|.
name|MostDerived
argument_list|()
operator|.
name|iUid
decl_stmt|;
name|id
operator|=
cast|static_cast
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|uid
operator|+
operator|(
name|uid
operator|>>
literal|16
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If no font table Api is available, we must not even load a font
comment|// from a previous (crashed) run of this application. Reason: we
comment|// won't get the font tables, they are not in the CFontStore.
comment|// So, we use the pid, for more uniqueness.
name|id
operator|=
cast|static_cast
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|RProcess
argument_list|()
operator|.
name|Id
argument_list|()
operator|.
name|Id
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|appFontMarkerPrefix
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|id
operator|&
literal|0x7fff
argument_list|,
literal|3
argument_list|,
literal|32
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|appFontMarkerPrefix
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|result
operator|.
name|length
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|qt_symbian_fontNameHasAppFontMarker
specifier|static
specifier|inline
name|bool
name|qt_symbian_fontNameHasAppFontMarker
parameter_list|(
specifier|const
name|QString
modifier|&
name|fontName
parameter_list|)
block|{
specifier|const
name|int
name|idLength
init|=
literal|3
decl_stmt|;
comment|// Keep in sync with id length in appFontMarker().
specifier|const
name|QString
modifier|&
name|prefix
init|=
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|appFontMarkerPrefix
decl_stmt|;
if|if
condition|(
name|fontName
operator|.
name|length
argument_list|()
operator|<
name|prefix
operator|.
name|length
argument_list|()
operator|+
name|idLength
operator|||
name|fontName
operator|.
name|mid
argument_list|(
name|fontName
operator|.
name|length
argument_list|()
operator|-
name|idLength
operator|-
name|prefix
operator|.
name|length
argument_list|()
argument_list|,
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
operator|!=
name|prefix
condition|)
return|return
literal|false
return|;
comment|// Testing if the the id is base32 data
for|for
control|(
name|int
name|i
init|=
name|fontName
operator|.
name|length
argument_list|()
operator|-
name|idLength
init|;
name|i
operator|<
name|fontName
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QChar
modifier|&
name|c
init|=
name|fontName
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|c
operator|>=
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
operator|&&
name|c
operator|<=
name|QLatin1Char
argument_list|(
literal|'9'
argument_list|)
operator|||
name|c
operator|>=
name|QLatin1Char
argument_list|(
literal|'a'
argument_list|)
operator|&&
name|c
operator|<=
name|QLatin1Char
argument_list|(
literal|'v'
argument_list|)
operator|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// If fontName is an application font of this app, prepend the app font marker
end_comment
begin_function
DECL|function|qt_symbian_fontNameWithAppFontMarker
name|QString
name|qt_symbian_fontNameWithAppFontMarker
parameter_list|(
specifier|const
name|QString
modifier|&
name|fontName
parameter_list|)
block|{
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QSymbianFontDatabaseExtrasImplementation
modifier|*
name|dbExtras
init|=
cast|static_cast
argument_list|<
specifier|const
name|QSymbianFontDatabaseExtrasImplementation
operator|*
argument_list|>
argument_list|(
name|db
operator|->
name|symbianExtras
argument_list|)
decl_stmt|;
return|return
name|dbExtras
operator|->
name|m_applicationFontFamilies
operator|.
name|contains
argument_list|(
name|fontName
argument_list|)
condition|?
name|fontName
operator|+
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|appFontMarker
argument_list|()
else|:
name|fontName
return|;
block|}
end_function
begin_function
DECL|function|qt_symbian_appFontNameWithoutMarker
specifier|static
specifier|inline
name|QString
name|qt_symbian_appFontNameWithoutMarker
parameter_list|(
specifier|const
name|QString
modifier|&
name|markedFontName
parameter_list|)
block|{
return|return
name|markedFontName
operator|.
name|left
argument_list|(
name|markedFontName
operator|.
name|length
argument_list|()
operator|-
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|appFontMarker
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QSymbianFontDatabaseExtrasImplementation
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|QSymbianFontDatabaseExtrasImplementation
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSymbianTypeFaceExtras
operator|::
name|symbianFontTableApiAvailable
argument_list|()
condition|)
block|{
name|QStringList
name|filters
decl_stmt|;
name|filters
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"*.ttf"
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"*.ccc"
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"*.ltt"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QFileInfoList
name|fontFiles
init|=
name|alternativeFilePaths
argument_list|(
name|QLatin1String
argument_list|(
literal|"resource\\Fonts"
argument_list|)
argument_list|,
name|filters
argument_list|)
decl_stmt|;
specifier|const
name|TInt
name|heapMinLength
init|=
literal|0x1000
decl_stmt|;
specifier|const
name|TInt
name|heapMaxLength
init|=
name|qMax
argument_list|(
literal|0x20000
operator|*
name|fontFiles
operator|.
name|count
argument_list|()
argument_list|,
name|heapMinLength
argument_list|)
decl_stmt|;
name|m_heap
operator|=
name|User
operator|::
name|ChunkHeap
argument_list|(
name|NULL
argument_list|,
name|heapMinLength
argument_list|,
name|heapMaxLength
argument_list|)
expr_stmt|;
name|QT_TRAP_THROWING
argument_list|(
argument|m_store = CFontStore::NewL(m_heap);             m_rasterizer = COpenFontRasterizer::NewL(TUid::Uid(
literal|0x101F7F5E
argument|));             CleanupStack::PushL(m_rasterizer);             m_store->InstallRasterizerL(m_rasterizer);             CleanupStack::Pop(m_rasterizer);
argument_list|)
empty_stmt|;
foreach|foreach
control|(
specifier|const
name|QFileInfo
modifier|&
name|fontFileInfo
decl|,
name|fontFiles
control|)
name|addFontFileToFontStore
argument_list|(
name|fontFileInfo
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_function
DECL|function|clear
name|void
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|clear
parameter_list|()
block|{
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|db
condition|)
return|return;
specifier|const
name|QSymbianFontDatabaseExtrasImplementation
modifier|*
name|dbExtras
init|=
cast|static_cast
argument_list|<
specifier|const
name|QSymbianFontDatabaseExtrasImplementation
operator|*
argument_list|>
argument_list|(
name|db
operator|->
name|symbianExtras
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dbExtras
condition|)
return|return;
comment|// initializeDb() has never been called
name|QSymbianTypeFaceExtrasHash
modifier|&
name|extrasHash
init|=
name|S60
operator|->
name|fontData
argument_list|()
decl_stmt|;
if|if
condition|(
name|QSymbianTypeFaceExtras
operator|::
name|symbianFontTableApiAvailable
argument_list|()
condition|)
block|{
name|qDeleteAll
argument_list|(
name|extrasHash
argument_list|)
expr_stmt|;
block|}
else|else
block|{
typedef|typedef
name|QList
argument_list|<
specifier|const
name|QSymbianTypeFaceExtras
modifier|*
argument_list|>
operator|::
name|iterator
name|iterator
typedef|;
for|for
control|(
name|iterator
name|p
init|=
name|dbExtras
operator|->
name|m_extras
operator|.
name|begin
argument_list|()
init|;
name|p
operator|!=
name|dbExtras
operator|->
name|m_extras
operator|.
name|end
argument_list|()
condition|;
operator|++
name|p
control|)
block|{
name|dbExtras
operator|->
name|m_store
operator|->
name|ReleaseFont
argument_list|(
operator|(
operator|*
name|p
operator|)
operator|->
name|fontOwner
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
operator|*
name|p
expr_stmt|;
block|}
name|dbExtras
operator|->
name|m_extras
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|extrasHash
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_cleanup_symbianFontDatabase
name|void
name|qt_cleanup_symbianFontDatabase
parameter_list|()
block|{
specifier|static
name|bool
name|cleanupDone
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|cleanupDone
condition|)
return|return;
name|cleanupDone
operator|=
literal|true
expr_stmt|;
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|db
condition|)
return|return;
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|db
operator|->
name|applicationFonts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QFontDatabase
operator|::
name|removeAllApplicationFonts
argument_list|()
expr_stmt|;
comment|// We remove the left over temporary font files of Qt application.
comment|// Active fonts are undeletable since the font server holds a handle
comment|// on them, so we do not need to worry to delete other running
comment|// applications' fonts.
specifier|const
name|QDir
name|dir
argument_list|(
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|tempAppFontFolder
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
name|filter
argument_list|(
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|appFontMarkerPrefix
operator|+
name|QLatin1String
argument_list|(
literal|"*.ttf"
argument_list|)
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFileInfo
modifier|&
name|ttfFile
decl|,
name|dir
operator|.
name|entryInfoList
argument_list|(
name|filter
argument_list|)
control|)
name|QFile
argument_list|(
name|ttfFile
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|db
operator|->
name|applicationFonts
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_destructor
DECL|function|~QSymbianFontDatabaseExtrasImplementation
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|~
name|QSymbianFontDatabaseExtrasImplementation
parameter_list|()
block|{
name|qt_cleanup_symbianFontDatabase
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|QSymbianTypeFaceExtras
operator|::
name|symbianFontTableApiAvailable
argument_list|()
condition|)
block|{
operator|delete
name|m_store
expr_stmt|;
name|m_heap
operator|->
name|Close
argument_list|()
expr_stmt|;
block|}
block|}
end_destructor
begin_ifndef
ifndef|#
directive|ifndef
name|FNTSTORE_H_INLINES_SUPPORT_FMM
end_ifndef
begin_comment
comment|/*  Workaround: fntstore.h has an inlined function 'COpenFont* CBitmapFont::OpenFont()'  that returns a private data member. The header will change between SDKs. But Qt has  to build on any SDK version and run on other versions of Symbian OS.  This function performs the needed pointer arithmetic to get the right COpenFont* */
end_comment
begin_function
DECL|function|OpenFontFromBitmapFont
name|COpenFont
modifier|*
name|OpenFontFromBitmapFont
parameter_list|(
specifier|const
name|CBitmapFont
modifier|*
name|aBitmapFont
parameter_list|)
block|{
specifier|const
name|TInt
name|offsetIOpenFont
init|=
literal|92
decl_stmt|;
comment|// '_FOFF(CBitmapFont, iOpenFont)' ..if iOpenFont weren't private
specifier|const
name|TUint
name|valueIOpenFont
init|=
operator|*
operator|(
name|TUint
operator|*
operator|)
name|PtrAdd
argument_list|(
name|aBitmapFont
argument_list|,
name|offsetIOpenFont
argument_list|)
decl_stmt|;
return|return
operator|(
name|valueIOpenFont
operator|&
literal|1
operator|)
condition|?
operator|(
name|COpenFont
operator|*
operator|)
name|PtrAdd
argument_list|(
name|aBitmapFont
argument_list|,
name|valueIOpenFont
operator|&
operator|~
literal|1
argument_list|)
else|:
comment|// New behavior: iOpenFont is offset
operator|(
name|COpenFont
operator|*
operator|)
name|valueIOpenFont
return|;
comment|// Old behavior: iOpenFont is pointer
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// FNTSTORE_H_INLINES_SUPPORT_FMM
end_comment
begin_function
DECL|function|extras
specifier|const
name|QSymbianTypeFaceExtras
modifier|*
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|extras
parameter_list|(
specifier|const
name|QString
modifier|&
name|aTypeface
parameter_list|,
name|bool
name|bold
parameter_list|,
name|bool
name|italic
parameter_list|)
specifier|const
block|{
name|QSymbianTypeFaceExtrasHash
modifier|&
name|extrasHash
init|=
name|S60
operator|->
name|fontData
argument_list|()
decl_stmt|;
if|if
condition|(
name|extrasHash
operator|.
name|isEmpty
argument_list|()
operator|&&
name|QThread
operator|::
name|currentThread
argument_list|()
operator|!=
name|QApplication
operator|::
name|instance
argument_list|()
operator|->
name|thread
argument_list|()
condition|)
name|S60
operator|->
name|addThreadLocalReleaseFunc
argument_list|(
name|clear
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|typeface
init|=
name|qt_symbian_fontNameWithAppFontMarker
argument_list|(
name|aTypeface
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|searchKey
init|=
name|typeface
operator|+
name|QString
operator|::
name|number
argument_list|(
name|int
argument_list|(
name|bold
argument_list|)
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|int
argument_list|(
name|italic
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|extrasHash
operator|.
name|contains
argument_list|(
name|searchKey
argument_list|)
condition|)
block|{
name|TFontSpec
name|searchSpec
argument_list|(
name|qt_QString2TPtrC
argument_list|(
name|typeface
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|bold
condition|)
name|searchSpec
operator|.
name|iFontStyle
operator|.
name|SetStrokeWeight
argument_list|(
name|EStrokeWeightBold
argument_list|)
expr_stmt|;
if|if
condition|(
name|italic
condition|)
name|searchSpec
operator|.
name|iFontStyle
operator|.
name|SetPosture
argument_list|(
name|EPostureItalic
argument_list|)
expr_stmt|;
name|CFont
modifier|*
name|font
init|=
name|NULL
decl_stmt|;
if|if
condition|(
name|QSymbianTypeFaceExtras
operator|::
name|symbianFontTableApiAvailable
argument_list|()
condition|)
block|{
specifier|const
name|TInt
name|err
init|=
name|S60
operator|->
name|screenDevice
argument_list|()
operator|->
name|GetNearestFontToDesignHeightInPixels
argument_list|(
name|font
argument_list|,
name|searchSpec
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|err
operator|==
name|KErrNone
operator|&&
name|font
argument_list|)
expr_stmt|;
name|QScopedPointer
argument_list|<
name|CFont
argument_list|,
name|CFontFromScreenDeviceReleaser
argument_list|>
name|sFont
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|QSymbianTypeFaceExtras
modifier|*
name|extras
init|=
operator|new
name|QSymbianTypeFaceExtras
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|sFont
operator|.
name|take
argument_list|()
expr_stmt|;
name|extrasHash
operator|.
name|insert
argument_list|(
name|searchKey
argument_list|,
name|extras
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|TInt
name|err
init|=
name|m_store
operator|->
name|GetNearestFontToDesignHeightInPixels
argument_list|(
name|font
argument_list|,
name|searchSpec
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|err
operator|==
name|KErrNone
operator|&&
name|font
argument_list|)
expr_stmt|;
specifier|const
name|CBitmapFont
modifier|*
name|bitmapFont
init|=
cast|static_cast
argument_list|<
name|CBitmapFont
operator|*
argument_list|>
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|COpenFont
modifier|*
name|openFont
init|=
ifdef|#
directive|ifdef
name|FNTSTORE_H_INLINES_SUPPORT_FMM
name|bitmapFont
operator|->
name|OpenFont
argument_list|()
decl_stmt|;
else|#
directive|else
comment|// FNTSTORE_H_INLINES_SUPPORT_FMM
name|OpenFontFromBitmapFont
argument_list|(
name|bitmapFont
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// FNTSTORE_H_INLINES_SUPPORT_FMM
specifier|const
name|TOpenFontFaceAttrib
modifier|*
specifier|const
name|attrib
init|=
name|openFont
operator|->
name|FaceAttrib
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|foundKey
init|=
name|QString
argument_list|(
operator|(
specifier|const
name|QChar
operator|*
operator|)
name|attrib
operator|->
name|FullName
argument_list|()
operator|.
name|Ptr
argument_list|()
argument_list|,
name|attrib
operator|->
name|FullName
argument_list|()
operator|.
name|Length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|extrasHash
operator|.
name|contains
argument_list|(
name|foundKey
argument_list|)
condition|)
block|{
name|QScopedPointer
argument_list|<
name|CFont
argument_list|,
name|CFontFromFontStoreReleaser
argument_list|>
name|sFont
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|QSymbianTypeFaceExtras
modifier|*
name|extras
init|=
operator|new
name|QSymbianTypeFaceExtras
argument_list|(
name|font
argument_list|,
name|openFont
argument_list|)
decl_stmt|;
name|sFont
operator|.
name|take
argument_list|()
expr_stmt|;
name|m_extras
operator|.
name|append
argument_list|(
name|extras
argument_list|)
expr_stmt|;
name|extrasHash
operator|.
name|insert
argument_list|(
name|searchKey
argument_list|,
name|extras
argument_list|)
expr_stmt|;
name|extrasHash
operator|.
name|insert
argument_list|(
name|foundKey
argument_list|,
name|extras
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_store
operator|->
name|ReleaseFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|extrasHash
operator|.
name|insert
argument_list|(
name|searchKey
argument_list|,
name|extrasHash
operator|.
name|value
argument_list|(
name|foundKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|extrasHash
operator|.
name|value
argument_list|(
name|searchKey
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|removeAppFontData
name|void
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|removeAppFontData
parameter_list|(
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
modifier|*
name|fnt
parameter_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|QSymbianTypeFaceExtras
operator|::
name|symbianFontTableApiAvailable
argument_list|()
operator|&&
name|fnt
operator|->
name|fontStoreFontFileUid
operator|.
name|iUid
operator|!=
literal|0
condition|)
name|m_store
operator|->
name|RemoveFile
argument_list|(
name|fnt
operator|->
name|fontStoreFontFileUid
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fnt
operator|->
name|families
operator|.
name|isEmpty
argument_list|()
condition|)
name|m_applicationFontFamilies
operator|.
name|remove
argument_list|(
name|fnt
operator|->
name|families
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fnt
operator|->
name|screenDeviceFontFileId
operator|!=
literal|0
condition|)
name|S60
operator|->
name|screenDevice
argument_list|()
operator|->
name|RemoveFile
argument_list|(
name|fnt
operator|->
name|screenDeviceFontFileId
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|fnt
operator|->
name|temporaryFileName
argument_list|)
expr_stmt|;
operator|*
name|fnt
operator|=
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appFontLimitReached
name|bool
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|appFontLimitReached
parameter_list|()
block|{
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|db
condition|)
return|return
literal|false
return|;
specifier|const
name|int
name|maxAppFonts
init|=
literal|5
decl_stmt|;
name|int
name|registeredAppFonts
init|=
literal|0
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
modifier|&
name|appFont
decl|,
name|db
operator|->
name|applicationFonts
control|)
if|if
condition|(
operator|!
name|appFont
operator|.
name|families
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|++
name|registeredAppFonts
operator|==
name|maxAppFonts
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|addFontFileToFontStore
name|TUid
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|addFontFileToFontStore
parameter_list|(
specifier|const
name|QFileInfo
modifier|&
name|fontFileInfo
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|QSymbianTypeFaceExtras
operator|::
name|symbianFontTableApiAvailable
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|fontFile
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|fontFileInfo
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|TPtrC
name|fontFilePtr
argument_list|(
name|qt_QString2TPtrC
argument_list|(
name|fontFile
argument_list|)
argument_list|)
decl_stmt|;
name|TUid
name|fontUid
init|=
block|{
literal|0
block|}
decl_stmt|;
name|TRAP_IGNORE
argument_list|(
name|fontUid
operator|=
name|m_store
operator|->
name|AddFileL
argument_list|(
name|fontFilePtr
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fontUid
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_comment
comment|// QT_NO_FREETYPE
end_comment
begin_class
DECL|class|QFontEngineFTS60
class|class
name|QFontEngineFTS60
super|:
specifier|public
name|QFontEngineFT
block|{
public|public:
name|QFontEngineFTS60
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|fd
parameter_list|)
constructor_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|QFontEngineFTS60
name|QFontEngineFTS60
operator|::
name|QFontEngineFTS60
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|fd
parameter_list|)
member_init_list|:
name|QFontEngineFT
argument_list|(
name|fd
argument_list|)
block|{
name|default_hint_style
operator|=
name|HintFull
expr_stmt|;
block|}
end_constructor
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_FREETYPE
end_comment
begin_comment
comment|/*  QFontEngineS60::pixelsToPoints, QFontEngineS60::pointsToPixels, QFontEngineMultiS60::QFontEngineMultiS60  and QFontEngineMultiS60::QFontEngineMultiS60 should be in qfontengine_s60.cpp. But since also the  Freetype based font rendering need them, they are here. */
end_comment
begin_function
DECL|function|pixelsToPoints
name|qreal
name|QFontEngineS60
operator|::
name|pixelsToPoints
parameter_list|(
name|qreal
name|pixels
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|CWsScreenDevice
modifier|*
name|device
init|=
name|S60
operator|->
name|screenDevice
argument_list|()
decl_stmt|;
return|return
operator|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|device
operator|->
name|HorizontalPixelsToTwips
argument_list|(
name|pixels
argument_list|)
else|:
name|device
operator|->
name|VerticalPixelsToTwips
argument_list|(
name|pixels
argument_list|)
operator|)
operator|/
name|KTwipsPerPoint
return|;
block|}
end_function
begin_function
DECL|function|pointsToPixels
name|qreal
name|QFontEngineS60
operator|::
name|pointsToPixels
parameter_list|(
name|qreal
name|points
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|CWsScreenDevice
modifier|*
name|device
init|=
name|S60
operator|->
name|screenDevice
argument_list|()
decl_stmt|;
specifier|const
name|int
name|twips
init|=
name|points
operator|*
name|KTwipsPerPoint
decl_stmt|;
return|return
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|device
operator|->
name|HorizontalTwipsToPixels
argument_list|(
name|twips
argument_list|)
else|:
name|device
operator|->
name|VerticalTwipsToPixels
argument_list|(
name|twips
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QFontEngineMultiS60
name|QFontEngineMultiS60
operator|::
name|QFontEngineMultiS60
parameter_list|(
name|QFontEngine
modifier|*
name|first
parameter_list|,
name|int
name|script
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|fallbackFamilies
parameter_list|)
member_init_list|:
name|QFontEngineMulti
argument_list|(
name|fallbackFamilies
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
member_init_list|,
name|m_script
argument_list|(
name|script
argument_list|)
member_init_list|,
name|m_fallbackFamilies
argument_list|(
name|fallbackFamilies
argument_list|)
block|{
name|engines
index|[
literal|0
index|]
operator|=
name|first
expr_stmt|;
name|first
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|fontDef
operator|=
name|engines
index|[
literal|0
index|]
operator|->
name|fontDef
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|loadEngine
name|void
name|QFontEngineMultiS60
operator|::
name|loadEngine
parameter_list|(
name|int
name|at
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|at
operator|<
name|engines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|engines
operator|.
name|at
argument_list|(
name|at
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QFontDef
name|request
init|=
name|fontDef
decl_stmt|;
name|request
operator|.
name|styleStrategy
operator||=
name|QFont
operator|::
name|NoFontMerging
expr_stmt|;
name|request
operator|.
name|family
operator|=
name|m_fallbackFamilies
operator|.
name|at
argument_list|(
name|at
operator|-
literal|1
argument_list|)
expr_stmt|;
name|engines
index|[
name|at
index|]
operator|=
name|QFontDatabase
operator|::
name|findFont
argument_list|(
name|m_script
argument_list|,
comment|/*fontprivate*/
literal|0
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|engines
index|[
name|at
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_FREETYPE
end_ifdef
begin_function
DECL|function|registerScreenDeviceFont
specifier|static
name|bool
name|registerScreenDeviceFont
parameter_list|(
name|int
name|screenDeviceFontIndex
parameter_list|,
specifier|const
name|QSymbianFontDatabaseExtrasImplementation
modifier|*
name|dbExtras
parameter_list|)
block|{
name|TTypefaceSupport
name|typefaceSupport
decl_stmt|;
name|S60
operator|->
name|screenDevice
argument_list|()
operator|->
name|TypefaceSupport
argument_list|(
name|typefaceSupport
argument_list|,
name|screenDeviceFontIndex
argument_list|)
expr_stmt|;
name|QString
name|familyName
argument_list|(
operator|(
specifier|const
name|QChar
operator|*
operator|)
name|typefaceSupport
operator|.
name|iTypeface
operator|.
name|iName
operator|.
name|Ptr
argument_list|()
argument_list|,
name|typefaceSupport
operator|.
name|iTypeface
operator|.
name|iName
operator|.
name|Length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|qt_symbian_fontNameHasAppFontMarker
argument_list|(
name|familyName
argument_list|)
condition|)
block|{
specifier|const
name|QString
modifier|&
name|marker
init|=
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|appFontMarker
argument_list|()
decl_stmt|;
if|if
condition|(
name|familyName
operator|.
name|endsWith
argument_list|(
name|marker
argument_list|)
condition|)
block|{
name|familyName
operator|=
name|qt_symbian_appFontNameWithoutMarker
argument_list|(
name|familyName
argument_list|)
expr_stmt|;
name|dbExtras
operator|->
name|m_applicationFontFamilies
operator|.
name|insert
argument_list|(
name|familyName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
comment|// This was somebody else's application font. Skip it.
block|}
block|}
name|CFont
modifier|*
name|font
decl_stmt|;
comment|// We have to get a font instance in order to know all the details
name|TFontSpec
name|fontSpec
argument_list|(
name|typefaceSupport
operator|.
name|iTypeface
operator|.
name|iName
argument_list|,
literal|11
argument_list|)
decl_stmt|;
if|if
condition|(
name|S60
operator|->
name|screenDevice
argument_list|()
operator|->
name|GetNearestFontInPixels
argument_list|(
name|font
argument_list|,
name|fontSpec
argument_list|)
operator|!=
name|KErrNone
condition|)
return|return
literal|false
return|;
name|QScopedPointer
argument_list|<
name|CFont
argument_list|,
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|CFontFromScreenDeviceReleaser
argument_list|>
name|sFont
argument_list|(
name|font
argument_list|)
decl_stmt|;
if|if
condition|(
name|font
operator|->
name|TypeUid
argument_list|()
operator|!=
name|KCFbsFontUid
condition|)
return|return
literal|false
return|;
name|TOpenFontFaceAttrib
name|faceAttrib
decl_stmt|;
specifier|const
name|CFbsFont
modifier|*
name|cfbsFont
init|=
cast|static_cast
argument_list|<
specifier|const
name|CFbsFont
operator|*
argument_list|>
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|cfbsFont
operator|->
name|GetFaceAttrib
argument_list|(
name|faceAttrib
argument_list|)
expr_stmt|;
name|QtFontStyle
operator|::
name|Key
name|styleKey
decl_stmt|;
name|styleKey
operator|.
name|style
operator|=
name|faceAttrib
operator|.
name|IsItalic
argument_list|()
condition|?
name|QFont
operator|::
name|StyleItalic
else|:
name|QFont
operator|::
name|StyleNormal
expr_stmt|;
name|styleKey
operator|.
name|weight
operator|=
name|faceAttrib
operator|.
name|IsBold
argument_list|()
condition|?
name|QFont
operator|::
name|Bold
else|:
name|QFont
operator|::
name|Normal
expr_stmt|;
name|QtFontFamily
modifier|*
name|family
init|=
name|privateDb
argument_list|()
operator|->
name|family
argument_list|(
name|familyName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|family
operator|->
name|fixedPitch
operator|=
name|faceAttrib
operator|.
name|IsMonoWidth
argument_list|()
expr_stmt|;
name|QtFontFoundry
modifier|*
name|foundry
init|=
name|family
operator|->
name|foundry
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QtFontStyle
modifier|*
name|style
init|=
name|foundry
operator|->
name|style
argument_list|(
name|styleKey
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|style
operator|->
name|smoothScalable
operator|=
name|typefaceSupport
operator|.
name|iIsScalable
expr_stmt|;
name|style
operator|->
name|pixelSize
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|const
name|QSymbianTypeFaceExtras
modifier|*
name|typeFaceExtras
init|=
name|dbExtras
operator|->
name|extras
argument_list|(
name|familyName
argument_list|,
name|faceAttrib
operator|.
name|IsBold
argument_list|()
argument_list|,
name|faceAttrib
operator|.
name|IsItalic
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QByteArray
name|os2Table
init|=
name|typeFaceExtras
operator|->
name|getSfntTable
argument_list|(
name|MAKE_TAG
argument_list|(
literal|'O'
argument_list|,
literal|'S'
argument_list|,
literal|'/'
argument_list|,
literal|'2'
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|os2Table
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|ulUnicodeRange
init|=
name|data
operator|+
literal|42
decl_stmt|;
name|quint32
name|unicodeRange
index|[
literal|4
index|]
init|=
block|{
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|ulUnicodeRange
argument_list|)
block|,
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|ulUnicodeRange
operator|+
literal|4
argument_list|)
block|,
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|ulUnicodeRange
operator|+
literal|8
argument_list|)
block|,
name|qFromBigEndian
operator|<
name|quint32
operator|>
operator|(
name|ulUnicodeRange
operator|+
literal|12
operator|)
block|}
decl_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|ulCodePageRange
init|=
name|data
operator|+
literal|78
decl_stmt|;
name|quint32
name|codePageRange
index|[
literal|2
index|]
init|=
block|{
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|ulCodePageRange
argument_list|)
block|,
name|qFromBigEndian
operator|<
name|quint32
operator|>
operator|(
name|ulCodePageRange
operator|+
literal|4
operator|)
block|}
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|>
name|writingSystems
init|=
name|qt_determine_writing_systems_from_truetype_bits
argument_list|(
name|unicodeRange
argument_list|,
name|codePageRange
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFontDatabase
operator|::
name|WritingSystem
name|system
decl|,
name|writingSystems
control|)
name|family
operator|->
name|writingSystems
index|[
name|system
index|]
operator|=
name|QtFontFamily
operator|::
name|Supported
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|initializeDb
specifier|static
name|void
name|initializeDb
parameter_list|()
block|{
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|||
name|db
operator|->
name|count
condition|)
return|return;
ifdef|#
directive|ifdef
name|QT_NO_FREETYPE
if|if
condition|(
operator|!
name|db
operator|->
name|symbianExtras
condition|)
name|db
operator|->
name|symbianExtras
operator|=
operator|new
name|QSymbianFontDatabaseExtrasImplementation
expr_stmt|;
name|QSymbianFbsHeapLock
name|lock
argument_list|(
name|QSymbianFbsHeapLock
operator|::
name|Unlock
argument_list|)
decl_stmt|;
specifier|const
name|int
name|numTypeFaces
init|=
name|S60
operator|->
name|screenDevice
argument_list|()
operator|->
name|NumTypefaces
argument_list|()
decl_stmt|;
specifier|const
name|QSymbianFontDatabaseExtrasImplementation
modifier|*
name|dbExtras
init|=
cast|static_cast
argument_list|<
specifier|const
name|QSymbianFontDatabaseExtrasImplementation
operator|*
argument_list|>
argument_list|(
name|db
operator|->
name|symbianExtras
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTypeFaces
condition|;
name|i
operator|++
control|)
name|registerScreenDeviceFont
argument_list|(
name|i
argument_list|,
name|dbExtras
argument_list|)
expr_stmt|;
comment|// We have to clear/release all CFonts, here, in case one of the fonts is
comment|// an application font of another running Qt app. Otherwise the other Qt app
comment|// cannot remove it's application font, anymore -> "Zombie Font".
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|clear
argument_list|()
expr_stmt|;
name|lock
operator|.
name|relock
argument_list|()
expr_stmt|;
else|#
directive|else
comment|// QT_NO_FREETYPE
name|QDir
name|dir
argument_list|(
name|QDesktopServices
operator|::
name|storageLocation
argument_list|(
name|QDesktopServices
operator|::
name|FontsLocation
argument_list|)
argument_list|)
decl_stmt|;
name|dir
operator|.
name|setNameFilters
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"*.ttf"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"*.ttc"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"*.pfa"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"*.pfb"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|int
argument_list|(
name|dir
operator|.
name|count
argument_list|()
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QByteArray
name|file
init|=
name|QFile
operator|::
name|encodeName
argument_list|(
name|dir
operator|.
name|absoluteFilePath
argument_list|(
name|dir
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|db
operator|->
name|addTTFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_FREETYPE
block|}
end_function
begin_function
DECL|function|load
specifier|static
specifier|inline
name|void
name|load
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
init|=
name|QString
argument_list|()
parameter_list|,
name|int
name|script
init|=
operator|-
literal|1
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|family
argument_list|)
name|Q_UNUSED
argument_list|(
argument|script
argument_list|)
name|initializeDb
argument_list|()
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|OffsetTable
struct|struct
name|OffsetTable
block|{
DECL|member|sfntVersion
name|quint32
name|sfntVersion
decl_stmt|;
DECL|member|numTables
DECL|member|searchRange
DECL|member|entrySelector
DECL|member|rangeShift
name|quint16
name|numTables
decl_stmt|,
name|searchRange
decl_stmt|,
name|entrySelector
decl_stmt|,
name|rangeShift
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|TableRecord
struct|struct
name|TableRecord
block|{
DECL|member|tag
DECL|member|checkSum
DECL|member|offset
DECL|member|length
name|quint32
name|tag
decl_stmt|,
name|checkSum
decl_stmt|,
name|offset
decl_stmt|,
name|length
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|NameTableHead
struct|struct
name|NameTableHead
block|{
DECL|member|format
DECL|member|count
DECL|member|stringOffset
name|quint16
name|format
decl_stmt|,
name|count
decl_stmt|,
name|stringOffset
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|NameRecord
struct|struct
name|NameRecord
block|{
DECL|member|platformID
DECL|member|encodingID
DECL|member|languageID
DECL|member|nameID
DECL|member|length
DECL|member|offset
name|quint16
name|platformID
decl_stmt|,
name|encodingID
decl_stmt|,
name|languageID
decl_stmt|,
name|nameID
decl_stmt|,
name|length
decl_stmt|,
name|offset
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|ttfCalcChecksum
specifier|static
name|quint32
name|ttfCalcChecksum
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|quint32
name|bytesCount
parameter_list|)
block|{
name|quint32
name|result
init|=
literal|0
decl_stmt|;
specifier|const
name|quint32
modifier|*
name|ptr
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
specifier|const
name|quint32
modifier|*
name|endPtr
init|=
name|ptr
operator|+
operator|(
name|bytesCount
operator|+
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
operator|-
literal|1
operator|)
operator|/
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
decl_stmt|;
while|while
condition|(
name|ptr
operator|<
name|endPtr
condition|)
block|{
specifier|const
name|quint32
name|unit32Value
init|=
operator|*
name|ptr
operator|++
decl_stmt|;
name|result
operator|+=
name|qFromBigEndian
argument_list|(
name|unit32Value
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|toDWordBoundary
specifier|static
specifier|inline
name|quint32
name|toDWordBoundary
parameter_list|(
name|quint32
name|value
parameter_list|)
block|{
return|return
operator|(
name|value
operator|+
literal|3
operator|)
operator|&
operator|~
literal|3
return|;
block|}
end_function
begin_function
DECL|function|dWordPadding
specifier|static
specifier|inline
name|quint32
name|dWordPadding
parameter_list|(
name|quint32
name|value
parameter_list|)
block|{
return|return
operator|(
literal|4
operator|-
operator|(
name|value
operator|&
literal|3
operator|)
operator|)
operator|&
literal|3
return|;
block|}
end_function
begin_function
DECL|function|ttfMarkNameTable
specifier|static
specifier|inline
name|bool
name|ttfMarkNameTable
parameter_list|(
name|QByteArray
modifier|&
name|table
parameter_list|,
specifier|const
name|QString
modifier|&
name|marker
parameter_list|)
block|{
specifier|const
name|quint32
name|tableLength
init|=
cast|static_cast
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|table
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableLength
operator|>
literal|50000
comment|// hard limit
operator|||
name|tableLength
operator|<
sizeof|sizeof
argument_list|(
name|NameTableHead
argument_list|)
condition|)
comment|// corrupt name table
return|return
literal|false
return|;
specifier|const
name|NameTableHead
modifier|*
name|head
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|NameTableHead
operator|*
argument_list|>
argument_list|(
name|table
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|quint16
name|count
init|=
name|qFromBigEndian
argument_list|(
name|head
operator|->
name|count
argument_list|)
decl_stmt|;
specifier|const
name|quint16
name|stringOffset
init|=
name|qFromBigEndian
argument_list|(
name|head
operator|->
name|stringOffset
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|200
comment|// hard limit
operator|||
name|stringOffset
operator|>=
name|tableLength
comment|// corrupt name table
operator|||
sizeof|sizeof
argument_list|(
name|NameTableHead
argument_list|)
operator|+
name|count
operator|*
sizeof|sizeof
argument_list|(
name|NameRecord
argument_list|)
operator|>=
name|tableLength
condition|)
comment|// corrupt name table
return|return
literal|false
return|;
name|QTextEncoder
name|encoder
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"UTF-16BE"
argument_list|)
argument_list|,
name|QTextCodec
operator|::
name|IgnoreHeader
argument_list|)
decl_stmt|;
specifier|const
name|QByteArray
name|markerUtf16BE
init|=
name|encoder
operator|.
name|fromUnicode
argument_list|(
name|marker
argument_list|)
decl_stmt|;
specifier|const
name|QByteArray
name|markerAscii
init|=
name|marker
operator|.
name|toAscii
argument_list|()
decl_stmt|;
name|QByteArray
name|markedTable
decl_stmt|;
name|markedTable
operator|.
name|reserve
argument_list|(
name|tableLength
operator|+
name|marker
operator|.
name|length
argument_list|()
operator|*
literal|20
argument_list|)
expr_stmt|;
comment|// Original size plus some extra
name|markedTable
operator|.
name|append
argument_list|(
name|table
argument_list|,
name|stringOffset
argument_list|)
expr_stmt|;
name|QByteArray
name|markedStrings
decl_stmt|;
name|quint32
name|stringDataCount
init|=
name|stringOffset
decl_stmt|;
for|for
control|(
name|quint16
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|quint32
name|nameRecordOffset
init|=
sizeof|sizeof
argument_list|(
name|NameTableHead
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|NameRecord
argument_list|)
operator|*
name|i
decl_stmt|;
name|NameRecord
modifier|*
name|nameRecord
init|=
cast|reinterpret_cast
argument_list|<
name|NameRecord
operator|*
argument_list|>
argument_list|(
name|markedTable
operator|.
name|data
argument_list|()
operator|+
name|nameRecordOffset
argument_list|)
decl_stmt|;
specifier|const
name|quint16
name|nameID
init|=
name|qFromBigEndian
argument_list|(
name|nameRecord
operator|->
name|nameID
argument_list|)
decl_stmt|;
specifier|const
name|quint16
name|platformID
init|=
name|qFromBigEndian
argument_list|(
name|nameRecord
operator|->
name|platformID
argument_list|)
decl_stmt|;
specifier|const
name|quint16
name|encodingID
init|=
name|qFromBigEndian
argument_list|(
name|nameRecord
operator|->
name|encodingID
argument_list|)
decl_stmt|;
specifier|const
name|quint16
name|offset
init|=
name|qFromBigEndian
argument_list|(
name|nameRecord
operator|->
name|offset
argument_list|)
decl_stmt|;
specifier|const
name|quint16
name|length
init|=
name|qFromBigEndian
argument_list|(
name|nameRecord
operator|->
name|length
argument_list|)
decl_stmt|;
name|stringDataCount
operator|+=
name|length
expr_stmt|;
if|if
condition|(
name|stringDataCount
operator|>
literal|80000
comment|// hard limit. String data may be> name table size. Multiple records can reference the same string.
operator|||
cast|static_cast
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|stringOffset
operator|+
name|offset
operator|+
name|length
argument_list|)
operator|>
name|tableLength
condition|)
comment|// String outside bounds
return|return
literal|false
return|;
specifier|const
name|bool
name|needsMarker
init|=
name|nameID
operator|==
literal|1
operator|||
name|nameID
operator|==
literal|3
operator|||
name|nameID
operator|==
literal|4
operator|||
name|nameID
operator|==
literal|16
operator|||
name|nameID
operator|==
literal|21
decl_stmt|;
specifier|const
name|bool
name|isUnicode
init|=
name|platformID
operator|==
literal|0
operator|||
name|platformID
operator|==
literal|3
operator|&&
name|encodingID
operator|==
literal|1
decl_stmt|;
specifier|const
name|QByteArray
name|originalString
init|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|table
operator|.
name|constData
argument_list|()
operator|+
name|stringOffset
operator|+
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|QByteArray
name|markedString
decl_stmt|;
if|if
condition|(
name|needsMarker
condition|)
block|{
specifier|const
name|int
name|maxBytesLength
init|=
operator|(
name|KMaxTypefaceNameLength
operator|-
name|marker
operator|.
name|length
argument_list|()
operator|)
operator|*
operator|(
name|isUnicode
condition|?
literal|2
else|:
literal|1
operator|)
decl_stmt|;
name|markedString
operator|=
name|originalString
operator|.
name|left
argument_list|(
name|maxBytesLength
argument_list|)
operator|+
operator|(
name|isUnicode
condition|?
name|markerUtf16BE
else|:
name|markerAscii
operator|)
expr_stmt|;
block|}
else|else
block|{
name|markedString
operator|=
name|originalString
expr_stmt|;
block|}
name|nameRecord
operator|->
name|offset
operator|=
name|qToBigEndian
argument_list|(
cast|static_cast
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|markedStrings
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nameRecord
operator|->
name|length
operator|=
name|qToBigEndian
argument_list|(
cast|static_cast
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|markedString
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|markedStrings
operator|.
name|append
argument_list|(
name|markedString
argument_list|)
expr_stmt|;
block|}
name|markedTable
operator|.
name|append
argument_list|(
name|markedStrings
argument_list|)
expr_stmt|;
name|table
operator|=
name|markedTable
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|ttfMaxFileSize
specifier|const
name|quint32
name|ttfMaxFileSize
init|=
literal|3500000
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|ttfMarkAppFont
specifier|static
specifier|inline
name|bool
name|ttfMarkAppFont
parameter_list|(
name|QByteArray
modifier|&
name|ttf
parameter_list|,
specifier|const
name|QString
modifier|&
name|marker
parameter_list|)
block|{
specifier|const
name|quint32
name|ttfChecksumNumber
init|=
literal|0xb1b0afba
decl_stmt|;
specifier|const
name|quint32
name|alignment
init|=
literal|4
decl_stmt|;
specifier|const
name|quint32
name|ttfLength
init|=
cast|static_cast
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|ttf
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ttfLength
operator|>
name|ttfMaxFileSize
comment|// hard limit
operator|||
name|ttfLength
operator|%
name|alignment
operator|!=
literal|0
comment|// ttf sizes are always factors of 4
operator|||
name|ttfLength
operator|<=
sizeof|sizeof
argument_list|(
name|OffsetTable
argument_list|)
comment|// ttf too short
operator|||
name|ttfCalcChecksum
argument_list|(
name|ttf
operator|.
name|constData
argument_list|()
argument_list|,
name|ttf
operator|.
name|size
argument_list|()
argument_list|)
operator|!=
name|ttfChecksumNumber
condition|)
comment|// ttf checksum is invalid
return|return
literal|false
return|;
specifier|const
name|OffsetTable
modifier|*
name|offsetTable
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|OffsetTable
operator|*
argument_list|>
argument_list|(
name|ttf
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|quint16
name|numTables
init|=
name|qFromBigEndian
argument_list|(
name|offsetTable
operator|->
name|numTables
argument_list|)
decl_stmt|;
specifier|const
name|quint32
name|recordsLength
init|=
name|toDWordBoundary
argument_list|(
sizeof|sizeof
argument_list|(
name|OffsetTable
argument_list|)
operator|+
name|numTables
operator|*
sizeof|sizeof
argument_list|(
name|TableRecord
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|numTables
operator|>
literal|30
comment|// hard limit
operator|||
name|recordsLength
operator|+
name|numTables
operator|*
name|alignment
operator|>
name|ttfLength
condition|)
comment|// Corrupt ttf. Tables would not fit, even if empty.
return|return
literal|false
return|;
name|QByteArray
name|markedTtf
decl_stmt|;
name|markedTtf
operator|.
name|reserve
argument_list|(
name|ttfLength
operator|+
name|marker
operator|.
name|length
argument_list|()
operator|*
literal|20
argument_list|)
expr_stmt|;
comment|// Original size plus some extra
name|markedTtf
operator|.
name|append
argument_list|(
name|ttf
operator|.
name|constData
argument_list|()
argument_list|,
name|recordsLength
argument_list|)
expr_stmt|;
specifier|const
name|quint32
name|ttfCheckSumAdjustmentOffset
init|=
literal|8
decl_stmt|;
comment|// Offset from the start of 'head'
name|int
name|indexOfHeadTable
init|=
operator|-
literal|1
decl_stmt|;
name|quint32
name|ttfDataSize
init|=
name|recordsLength
decl_stmt|;
typedef|typedef
name|QPair
argument_list|<
name|quint32
argument_list|,
name|quint32
argument_list|>
name|Range
typedef|;
name|QList
argument_list|<
name|Range
argument_list|>
name|memoryRanges
decl_stmt|;
name|memoryRanges
operator|.
name|reserve
argument_list|(
name|numTables
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTables
condition|;
operator|++
name|i
control|)
block|{
name|TableRecord
modifier|*
name|tableRecord
init|=
cast|reinterpret_cast
argument_list|<
name|TableRecord
operator|*
argument_list|>
argument_list|(
name|markedTtf
operator|.
name|data
argument_list|()
operator|+
sizeof|sizeof
argument_list|(
name|OffsetTable
argument_list|)
operator|+
name|i
operator|*
sizeof|sizeof
argument_list|(
name|TableRecord
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|quint32
name|offset
init|=
name|qFromBigEndian
argument_list|(
name|tableRecord
operator|->
name|offset
argument_list|)
decl_stmt|;
specifier|const
name|quint32
name|length
init|=
name|qFromBigEndian
argument_list|(
name|tableRecord
operator|->
name|length
argument_list|)
decl_stmt|;
specifier|const
name|quint32
name|lengthAligned
init|=
name|toDWordBoundary
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|ttfDataSize
operator|+=
name|lengthAligned
expr_stmt|;
if|if
condition|(
name|offset
argument_list|<
name|recordsLength
comment|// must not intersect ttf header/records
operator|||
name|offset
operator|%
name|alignment
operator|!=
literal|0
comment|// must be aligned
operator|||
name|offset
argument_list|>
name|ttfLength
operator|-
name|alignment
comment|// table out of bounds
operator|||
name|offset
operator|+
name|lengthAligned
operator|>
name|ttfLength
comment|// table out of bounds
operator|||
name|ttfDataSize
operator|>
name|ttfLength
condition|)
comment|// tables would not fit into the ttf
return|return
literal|false
return|;
foreach|foreach
control|(
specifier|const
name|Range
modifier|&
name|range
decl|,
name|memoryRanges
control|)
if|if
condition|(
name|offset
argument_list|<
name|range
operator|.
name|first
operator|+
name|range
operator|.
name|second
operator|&&
name|offset
operator|+
name|lengthAligned
argument_list|>
name|range
operator|.
name|first
condition|)
return|return
literal|false
return|;
comment|// Overlaps with another table
name|memoryRanges
operator|.
name|append
argument_list|(
name|Range
argument_list|(
name|offset
argument_list|,
name|lengthAligned
argument_list|)
argument_list|)
expr_stmt|;
name|quint32
name|checkSum
init|=
name|qFromBigEndian
argument_list|(
name|tableRecord
operator|->
name|checkSum
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableRecord
operator|->
name|tag
operator|==
name|qToBigEndian
argument_list|(
cast|static_cast
argument_list|<
name|quint32
argument_list|>
argument_list|(
literal|'head'
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|length
operator|<
name|ttfCheckSumAdjustmentOffset
operator|+
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// Invalid 'head' table
specifier|const
name|quint32
modifier|*
name|checkSumAdjustmentTag
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|ttf
operator|.
name|constData
argument_list|()
operator|+
name|offset
operator|+
name|ttfCheckSumAdjustmentOffset
argument_list|)
decl_stmt|;
specifier|const
name|quint32
name|checkSumAdjustment
init|=
name|qFromBigEndian
argument_list|(
operator|*
name|checkSumAdjustmentTag
argument_list|)
decl_stmt|;
name|checkSum
operator|+=
name|checkSumAdjustment
expr_stmt|;
name|indexOfHeadTable
operator|=
name|i
expr_stmt|;
comment|// For the ttf checksum re-calculation, later
block|}
if|if
condition|(
name|checkSum
operator|!=
name|ttfCalcChecksum
argument_list|(
name|ttf
operator|.
name|constData
argument_list|()
operator|+
name|offset
argument_list|,
name|length
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// Table checksum is invalid
name|bool
name|updateTableChecksum
init|=
literal|false
decl_stmt|;
name|QByteArray
name|table
decl_stmt|;
if|if
condition|(
name|tableRecord
operator|->
name|tag
operator|==
name|qToBigEndian
argument_list|(
cast|static_cast
argument_list|<
name|quint32
argument_list|>
argument_list|(
literal|'name'
argument_list|)
argument_list|)
condition|)
block|{
name|table
operator|=
name|QByteArray
argument_list|(
name|ttf
operator|.
name|constData
argument_list|()
operator|+
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ttfMarkNameTable
argument_list|(
name|table
argument_list|,
name|marker
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// Name table was not markable.
name|updateTableChecksum
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|table
operator|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|ttf
operator|.
name|constData
argument_list|()
operator|+
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|tableRecord
operator|->
name|offset
operator|=
name|qToBigEndian
argument_list|(
name|markedTtf
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tableRecord
operator|->
name|length
operator|=
name|qToBigEndian
argument_list|(
name|table
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|markedTtf
operator|.
name|append
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|markedTtf
operator|.
name|append
argument_list|(
name|QByteArray
argument_list|(
name|dWordPadding
argument_list|(
name|table
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// 0-padding
if|if
condition|(
name|updateTableChecksum
condition|)
block|{
name|TableRecord
modifier|*
name|tableRecord
init|=
comment|// Need to recalculate, since markedTtf changed
cast|reinterpret_cast
argument_list|<
name|TableRecord
operator|*
argument_list|>
argument_list|(
name|markedTtf
operator|.
name|data
argument_list|()
operator|+
sizeof|sizeof
argument_list|(
name|OffsetTable
argument_list|)
operator|+
name|i
operator|*
sizeof|sizeof
argument_list|(
name|TableRecord
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|quint32
name|offset
init|=
name|qFromBigEndian
argument_list|(
name|tableRecord
operator|->
name|offset
argument_list|)
decl_stmt|;
specifier|const
name|quint32
name|length
init|=
name|qFromBigEndian
argument_list|(
name|tableRecord
operator|->
name|length
argument_list|)
decl_stmt|;
name|tableRecord
operator|->
name|checkSum
operator|=
name|qToBigEndian
argument_list|(
name|ttfCalcChecksum
argument_list|(
name|markedTtf
operator|.
name|constData
argument_list|()
operator|+
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|indexOfHeadTable
operator|==
operator|-
literal|1
comment|// 'head' table is mandatory
operator|||
name|ttfDataSize
operator|!=
name|ttfLength
condition|)
comment|// We do not allow ttf data "holes". Neither does Symbian.
return|return
literal|false
return|;
name|TableRecord
modifier|*
name|headRecord
init|=
cast|reinterpret_cast
argument_list|<
name|TableRecord
operator|*
argument_list|>
argument_list|(
name|markedTtf
operator|.
name|data
argument_list|()
operator|+
sizeof|sizeof
argument_list|(
name|OffsetTable
argument_list|)
operator|+
name|indexOfHeadTable
operator|*
sizeof|sizeof
argument_list|(
name|TableRecord
argument_list|)
argument_list|)
decl_stmt|;
name|quint32
modifier|*
name|checkSumAdjustmentTag
init|=
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|markedTtf
operator|.
name|data
argument_list|()
operator|+
name|qFromBigEndian
argument_list|(
name|headRecord
operator|->
name|offset
argument_list|)
operator|+
name|ttfCheckSumAdjustmentOffset
argument_list|)
decl_stmt|;
operator|*
name|checkSumAdjustmentTag
operator|=
literal|0
expr_stmt|;
specifier|const
name|quint32
name|ttfChecksum
init|=
name|ttfCalcChecksum
argument_list|(
name|markedTtf
operator|.
name|constData
argument_list|()
argument_list|,
name|markedTtf
operator|.
name|count
argument_list|()
argument_list|)
decl_stmt|;
operator|*
name|checkSumAdjustmentTag
operator|=
name|qToBigEndian
argument_list|(
name|ttfChecksumNumber
operator|-
name|ttfChecksum
argument_list|)
expr_stmt|;
name|ttf
operator|=
name|markedTtf
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|ttfCanSymbianLoadFont
specifier|static
specifier|inline
name|bool
name|ttfCanSymbianLoadFont
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|bool
name|result
init|=
literal|false
decl_stmt|;
name|QString
name|ttfFileName
decl_stmt|;
name|QFile
name|tempFileGuard
decl_stmt|;
name|QFileInfo
name|info
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QTemporaryFile
name|tempfile
argument_list|(
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|tempAppFontFolder
argument_list|()
operator|+
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|appFontMarker
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"XXXXXX.ttf"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tempfile
operator|.
name|open
argument_list|()
operator|||
name|tempfile
operator|.
name|write
argument_list|(
name|data
argument_list|)
operator|==
operator|-
literal|1
condition|)
return|return
literal|false
return|;
name|ttfFileName
operator|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QFileInfo
argument_list|(
name|tempfile
argument_list|)
operator|.
name|canonicalFilePath
argument_list|()
argument_list|)
expr_stmt|;
name|tempfile
operator|.
name|setAutoRemove
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tempfile
operator|.
name|close
argument_list|()
expr_stmt|;
name|tempFileGuard
operator|.
name|setFileName
argument_list|(
name|ttfFileName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tempFileGuard
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|info
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|ttfFileName
operator|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|info
operator|.
name|canonicalFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
name|CFontStore
modifier|*
name|store
init|=
literal|0
decl_stmt|;
name|RHeap
modifier|*
name|heap
init|=
name|User
operator|::
name|ChunkHeap
argument_list|(
name|NULL
argument_list|,
literal|0x1000
argument_list|,
literal|0x20000
argument_list|)
decl_stmt|;
if|if
condition|(
name|heap
condition|)
block|{
name|QT_TRAP_THROWING
argument_list|(
argument|CleanupClosePushL(*heap);             store = CFontStore::NewL(heap);             CleanupStack::PushL(store);             COpenFontRasterizer *rasterizer = COpenFontRasterizer::NewL(TUid::Uid(
literal|0x101F7F5E
argument|));             CleanupStack::PushL(rasterizer);             store->InstallRasterizerL(rasterizer);             CleanupStack::Pop(rasterizer);             TUid fontUid = {-
literal|1
argument|};             TRAP_IGNORE(fontUid = store->AddFileL(qt_QString2TPtrC(ttfFileName)));             if (fontUid.iUid != -
literal|1
argument|)                 result =
literal|true
argument|;             CleanupStack::PopAndDestroy(
literal|2
argument|, heap);
comment|// heap, store
argument_list|)
empty_stmt|;
block|}
if|if
condition|(
name|tempFileGuard
operator|.
name|isOpen
argument_list|()
condition|)
name|tempFileGuard
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|registerFont
specifier|static
name|void
name|registerFont
parameter_list|(
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
modifier|*
name|fnt
parameter_list|)
block|{
if|if
condition|(
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|appFontLimitReached
argument_list|()
operator|||
name|fnt
operator|->
name|data
operator|.
name|size
argument_list|()
operator|>
name|ttfMaxFileSize
comment|// hard limit
operator|||
name|fnt
operator|->
name|data
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
operator|!
name|fnt
operator|->
name|fileName
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|".ttf"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
comment|// Only buffer or .ttf
operator|||
name|QFileInfo
argument_list|(
name|fnt
operator|->
name|fileName
argument_list|)
operator|.
name|size
argument_list|()
operator|>
name|ttfMaxFileSize
operator|)
condition|)
comment|// hard limit
return|return;
comment|//    Using ttfCanSymbianLoadFont() causes crashes on app destruction (Symbian^3|PR1 and lower).
comment|//    Therefore, not using it for now, but eventually in a later version.
comment|//    if (!ttfCanSymbianLoadFont(fnt->data, fnt->fileName))
comment|//        return;
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|db
condition|)
return|return;
if|if
condition|(
operator|!
name|db
operator|->
name|count
condition|)
name|initializeDb
argument_list|()
expr_stmt|;
name|QSymbianFontDatabaseExtrasImplementation
modifier|*
name|dbExtras
init|=
cast|static_cast
argument_list|<
name|QSymbianFontDatabaseExtrasImplementation
operator|*
argument_list|>
argument_list|(
name|db
operator|->
name|symbianExtras
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dbExtras
condition|)
return|return;
specifier|const
name|QString
modifier|&
name|marker
init|=
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|appFontMarker
argument_list|()
decl_stmt|;
comment|// The QTemporaryFile object being used in the following section must be
comment|// destructed before letting Symbian load the TTF file. Symbian would not
comment|// load it otherwise, because QTemporaryFile will still keep some handle
comment|// on it. The scope is used to reduce the life time of the QTemporaryFile.
comment|// In order to prevent other processes from modifying the file between the
comment|// moment where the QTemporaryFile is destructed and the file is loaded by
comment|// Symbian, we have a QFile "tempFileGuard" outside the scope which opens
comment|// the file in ReadOnly mode while the QTemporaryFile is still alive.
name|QFile
name|tempFileGuard
decl_stmt|;
block|{
name|QTemporaryFile
name|tempfile
argument_list|(
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|tempAppFontFolder
argument_list|()
operator|+
name|marker
operator|+
name|QLatin1String
argument_list|(
literal|"XXXXXX.ttf"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tempfile
operator|.
name|open
argument_list|()
condition|)
return|return;
specifier|const
name|QString
name|tempFileName
init|=
name|QFileInfo
argument_list|(
name|tempfile
argument_list|)
operator|.
name|canonicalFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|fnt
operator|->
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QFile
name|sourceFile
argument_list|(
name|fnt
operator|->
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sourceFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return;
name|fnt
operator|->
name|data
operator|=
name|sourceFile
operator|.
name|readAll
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ttfMarkAppFont
argument_list|(
name|fnt
operator|->
name|data
argument_list|,
name|marker
argument_list|)
operator|||
name|tempfile
operator|.
name|write
argument_list|(
name|fnt
operator|->
name|data
argument_list|)
operator|==
operator|-
literal|1
condition|)
return|return;
name|tempfile
operator|.
name|setAutoRemove
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tempfile
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Tempfile still keeps a file handle, forbidding write access
name|fnt
operator|->
name|data
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// The TTF data was marked and saved. Not needed in memory, anymore.
name|tempFileGuard
operator|.
name|setFileName
argument_list|(
name|tempFileName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tempFileGuard
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return;
name|fnt
operator|->
name|temporaryFileName
operator|=
name|tempFileName
expr_stmt|;
block|}
specifier|const
name|QString
name|fullFileName
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|fnt
operator|->
name|temporaryFileName
argument_list|)
decl_stmt|;
name|QSymbianFbsHeapLock
name|lock
argument_list|(
name|QSymbianFbsHeapLock
operator|::
name|Unlock
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
name|fontsOnServerBefore
init|=
name|qt_symbian_fontFamiliesOnFontServer
argument_list|()
decl_stmt|;
specifier|const
name|TInt
name|err
init|=
name|S60
operator|->
name|screenDevice
argument_list|()
operator|->
name|AddFile
argument_list|(
name|qt_QString2TPtrC
argument_list|(
name|fullFileName
argument_list|)
argument_list|,
name|fnt
operator|->
name|screenDeviceFontFileId
argument_list|)
decl_stmt|;
name|tempFileGuard
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Did its job
specifier|const
name|QStringList
name|fontsOnServerAfter
init|=
name|qt_symbian_fontFamiliesOnFontServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|err
operator|==
name|KErrNone
operator|&&
name|fontsOnServerBefore
operator|.
name|count
argument_list|()
operator|<
name|fontsOnServerAfter
operator|.
name|count
argument_list|()
condition|)
block|{
comment|// Added to screen device?
name|int
name|fontOnServerIndex
init|=
name|fontsOnServerAfter
operator|.
name|count
argument_list|()
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fontsOnServerBefore
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fontsOnServerBefore
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|!=
name|fontsOnServerAfter
operator|.
name|at
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|fontOnServerIndex
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
comment|// Must remove all font engines with their CFonts, first.
name|QFontCache
operator|::
name|instance
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
name|db
operator|->
name|free
argument_list|()
expr_stmt|;
name|QSymbianFontDatabaseExtrasImplementation
operator|::
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|QSymbianTypeFaceExtras
operator|::
name|symbianFontTableApiAvailable
argument_list|()
condition|)
name|fnt
operator|->
name|fontStoreFontFileUid
operator|=
name|dbExtras
operator|->
name|addFontFileToFontStore
argument_list|(
name|QFileInfo
argument_list|(
name|fullFileName
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
modifier|&
name|appFontName
init|=
name|fontsOnServerAfter
operator|.
name|at
argument_list|(
name|fontOnServerIndex
argument_list|)
decl_stmt|;
name|fnt
operator|->
name|families
operator|.
name|append
argument_list|(
name|qt_symbian_appFontNameWithoutMarker
argument_list|(
name|appFontName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qt_symbian_fontNameHasAppFontMarker
argument_list|(
name|appFontName
argument_list|)
operator|||
operator|!
name|registerScreenDeviceFont
argument_list|(
name|fontOnServerIndex
argument_list|,
name|dbExtras
argument_list|)
condition|)
name|dbExtras
operator|->
name|removeAppFontData
argument_list|(
name|fnt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|fnt
operator|->
name|screenDeviceFontFileId
operator|>
literal|0
condition|)
name|S60
operator|->
name|screenDevice
argument_list|()
operator|->
name|RemoveFile
argument_list|(
name|fnt
operator|->
name|screenDeviceFontFileId
argument_list|)
expr_stmt|;
comment|// May still have the file open!
name|QFile
operator|::
name|remove
argument_list|(
name|fnt
operator|->
name|temporaryFileName
argument_list|)
expr_stmt|;
operator|*
name|fnt
operator|=
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
argument_list|()
expr_stmt|;
block|}
name|lock
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeApplicationFont
name|bool
name|QFontDatabase
operator|::
name|removeApplicationFont
parameter_list|(
name|int
name|handle
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|||
name|handle
operator|<
literal|0
operator|||
name|handle
operator|>=
name|db
operator|->
name|applicationFonts
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
name|QSymbianFontDatabaseExtrasImplementation
modifier|*
name|dbExtras
init|=
cast|static_cast
argument_list|<
name|QSymbianFontDatabaseExtrasImplementation
operator|*
argument_list|>
argument_list|(
name|db
operator|->
name|symbianExtras
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dbExtras
condition|)
return|return
literal|false
return|;
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
modifier|*
name|fnt
init|=
operator|&
name|db
operator|->
name|applicationFonts
index|[
name|handle
index|]
decl_stmt|;
if|if
condition|(
name|fnt
operator|->
name|families
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
comment|// Nothing to remove. Return peacefully.
comment|// Must remove all font engines with their CFonts, first
name|QFontCache
operator|::
name|instance
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
name|db
operator|->
name|free
argument_list|()
expr_stmt|;
name|dbExtras
operator|->
name|removeAppFontData
argument_list|(
name|fnt
argument_list|)
expr_stmt|;
name|db
operator|->
name|invalidate
argument_list|()
expr_stmt|;
comment|// This will just emit 'fontDatabaseChanged()'
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|removeAllApplicationFonts
name|bool
name|QFontDatabase
operator|::
name|removeAllApplicationFonts
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|applicationFontsCount
init|=
name|privateDb
argument_list|()
operator|->
name|applicationFonts
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|applicationFontsCount
condition|;
operator|++
name|i
control|)
if|if
condition|(
operator|!
name|removeApplicationFont
argument_list|(
name|i
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|supportsThreadedFontRendering
name|bool
name|QFontDatabase
operator|::
name|supportsThreadedFontRendering
parameter_list|()
block|{
return|return
name|QSymbianTypeFaceExtras
operator|::
name|symbianFontTableApiAvailable
argument_list|()
return|;
block|}
end_function
begin_function
specifier|static
DECL|function|cleanedFontDef
name|QFontDef
name|cleanedFontDef
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|req
parameter_list|)
block|{
name|QFontDef
name|result
init|=
name|req
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|pixelSize
operator|<=
literal|0
condition|)
block|{
name|result
operator|.
name|pixelSize
operator|=
name|QFontEngineS60
operator|::
name|pointsToPixels
argument_list|(
name|qMax
argument_list|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|,
name|result
operator|.
name|pointSize
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|pointSize
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|findFont
name|QFontEngine
modifier|*
name|QFontDatabase
operator|::
name|findFont
parameter_list|(
name|int
name|script
parameter_list|,
specifier|const
name|QFontPrivate
modifier|*
name|d
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|req
parameter_list|)
block|{
specifier|const
name|QFontCache
operator|::
name|Key
name|key
argument_list|(
name|cleanedFontDef
argument_list|(
name|req
argument_list|)
argument_list|,
name|script
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|privateDb
argument_list|()
operator|->
name|count
condition|)
name|initializeDb
argument_list|()
expr_stmt|;
name|QFontEngine
modifier|*
name|fe
init|=
name|QFontCache
operator|::
name|instance
argument_list|()
operator|->
name|findEngine
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fe
condition|)
block|{
comment|// Making sure that fe->fontDef.family will be an existing font.
name|initializeDb
argument_list|()
expr_stmt|;
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
name|QtFontDesc
name|desc
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|blacklistedFamilies
decl_stmt|;
name|match
argument_list|(
name|script
argument_list|,
name|key
operator|.
name|def
argument_list|,
name|key
operator|.
name|def
operator|.
name|family
argument_list|,
name|QString
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
operator|&
name|desc
argument_list|,
name|blacklistedFamilies
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|desc
operator|.
name|family
condition|)
comment|// falling back to application font
name|desc
operator|.
name|family
operator|=
name|db
operator|->
name|family
argument_list|(
name|QApplication
operator|::
name|font
argument_list|()
operator|.
name|defaultFamily
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|desc
operator|.
name|family
argument_list|)
expr_stmt|;
comment|// Making sure that desc.family supports the requested script
name|QtFontDesc
name|mappedDesc
decl_stmt|;
name|bool
name|supportsScript
init|=
literal|false
decl_stmt|;
do|do
block|{
name|match
argument_list|(
name|script
argument_list|,
name|req
argument_list|,
name|QString
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
operator|&
name|mappedDesc
argument_list|,
name|blacklistedFamilies
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappedDesc
operator|.
name|family
operator|==
name|desc
operator|.
name|family
condition|)
block|{
name|supportsScript
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|blacklistedFamilies
operator|.
name|append
argument_list|(
name|mappedDesc
operator|.
name|familyIndex
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|mappedDesc
operator|.
name|family
condition|)
do|;
if|if
condition|(
operator|!
name|supportsScript
condition|)
block|{
name|blacklistedFamilies
operator|.
name|clear
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|script
argument_list|,
name|req
argument_list|,
name|QString
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
operator|&
name|mappedDesc
argument_list|,
name|blacklistedFamilies
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappedDesc
operator|.
name|family
condition|)
name|desc
operator|=
name|mappedDesc
expr_stmt|;
block|}
specifier|const
name|QString
name|fontFamily
init|=
name|desc
operator|.
name|family
operator|->
name|name
decl_stmt|;
name|QFontDef
name|request
init|=
name|req
decl_stmt|;
name|request
operator|.
name|family
operator|=
name|fontFamily
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_FREETYPE
specifier|const
name|QSymbianFontDatabaseExtrasImplementation
modifier|*
name|dbExtras
init|=
cast|static_cast
argument_list|<
specifier|const
name|QSymbianFontDatabaseExtrasImplementation
operator|*
argument_list|>
argument_list|(
name|db
operator|->
name|symbianExtras
argument_list|)
decl_stmt|;
specifier|const
name|QSymbianTypeFaceExtras
modifier|*
name|typeFaceExtras
init|=
name|dbExtras
operator|->
name|extras
argument_list|(
name|fontFamily
argument_list|,
name|request
operator|.
name|weight
operator|>
name|QFont
operator|::
name|Normal
argument_list|,
name|request
operator|.
name|style
operator|!=
name|QFont
operator|::
name|StyleNormal
argument_list|)
decl_stmt|;
comment|// We need a valid pixelSize, e.g. for lineThickness()
if|if
condition|(
name|request
operator|.
name|pixelSize
operator|<
literal|0
condition|)
name|request
operator|.
name|pixelSize
operator|=
name|request
operator|.
name|pointSize
operator|*
name|d
operator|->
name|dpi
operator|/
literal|72
expr_stmt|;
name|fe
operator|=
operator|new
name|QFontEngineS60
argument_list|(
name|request
argument_list|,
name|typeFaceExtras
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// QT_NO_FREETYPE
name|Q_UNUSED
argument_list|(
argument|d
argument_list|)
name|QFontEngine
operator|::
name|FaceId
name|faceId
decl_stmt|;
specifier|const
name|QtFontFamily
modifier|*
specifier|const
name|reqQtFontFamily
init|=
name|db
operator|->
name|family
argument_list|(
name|fontFamily
argument_list|)
decl_stmt|;
name|faceId
operator|.
name|filename
operator|=
name|reqQtFontFamily
operator|->
name|fontFilename
expr_stmt|;
name|faceId
operator|.
name|index
operator|=
name|reqQtFontFamily
operator|->
name|fontFileIndex
expr_stmt|;
name|QFontEngineFTS60
modifier|*
name|fte
init|=
operator|new
name|QFontEngineFTS60
argument_list|(
name|cleanedFontDef
argument_list|(
name|request
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fte
operator|->
name|init
argument_list|(
name|faceId
argument_list|,
literal|true
argument_list|,
name|QFontEngineFT
operator|::
name|Format_A8
argument_list|)
condition|)
name|fe
operator|=
name|fte
expr_stmt|;
else|else
operator|delete
name|fte
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_FREETYPE
name|Q_ASSERT
argument_list|(
name|fe
argument_list|)
expr_stmt|;
if|if
condition|(
name|script
operator|==
name|QUnicodeTables
operator|::
name|Common
operator|&&
operator|!
operator|(
name|req
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoFontMerging
operator|)
operator|&&
operator|!
name|fe
operator|->
name|symbol
condition|)
block|{
name|QStringList
name|commonFonts
decl_stmt|;
for|for
control|(
name|int
name|ws
init|=
literal|1
init|;
name|ws
operator|<
name|QFontDatabase
operator|::
name|WritingSystemsCount
condition|;
operator|++
name|ws
control|)
block|{
if|if
condition|(
name|scriptForWritingSystem
index|[
name|ws
index|]
operator|!=
name|script
condition|)
continue|continue;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|db
operator|->
name|count
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|db
operator|->
name|families
index|[
name|i
index|]
operator|->
name|writingSystems
index|[
name|ws
index|]
operator|&
name|QtFontFamily
operator|::
name|Supported
condition|)
name|commonFonts
operator|.
name|append
argument_list|(
name|db
operator|->
name|families
index|[
name|i
index|]
operator|->
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Hack: Prioritize .ccc fonts
specifier|const
name|QString
name|niceEastAsianFont
argument_list|(
name|QLatin1String
argument_list|(
literal|"Sans MT 936_S60"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|commonFonts
operator|.
name|removeAll
argument_list|(
name|niceEastAsianFont
argument_list|)
operator|>
literal|0
condition|)
name|commonFonts
operator|.
name|prepend
argument_list|(
name|niceEastAsianFont
argument_list|)
expr_stmt|;
name|fe
operator|=
operator|new
name|QFontEngineMultiS60
argument_list|(
name|fe
argument_list|,
name|script
argument_list|,
name|commonFonts
argument_list|)
expr_stmt|;
block|}
block|}
name|fe
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|QFontCache
operator|::
name|instance
argument_list|()
operator|->
name|insertEngine
argument_list|(
name|key
argument_list|,
name|fe
argument_list|)
expr_stmt|;
return|return
name|fe
return|;
block|}
end_function
begin_function
DECL|function|load
name|void
name|QFontDatabase
operator|::
name|load
parameter_list|(
specifier|const
name|QFontPrivate
modifier|*
name|d
parameter_list|,
name|int
name|script
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
literal|0
decl_stmt|;
name|QFontDef
name|req
init|=
name|d
operator|->
name|request
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|engineData
condition|)
block|{
specifier|const
name|QFontCache
operator|::
name|Key
name|key
argument_list|(
name|cleanedFontDef
argument_list|(
name|req
argument_list|)
argument_list|,
name|script
argument_list|)
decl_stmt|;
name|getEngineData
argument_list|(
name|d
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
comment|// the cached engineData could have already loaded the engine we want
if|if
condition|(
name|d
operator|->
name|engineData
operator|->
name|engines
index|[
name|script
index|]
condition|)
name|fe
operator|=
name|d
operator|->
name|engineData
operator|->
name|engines
index|[
name|script
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|fe
condition|)
block|{
if|if
condition|(
name|qt_enable_test_font
operator|&&
name|req
operator|.
name|family
operator|==
name|QLatin1String
argument_list|(
literal|"__Qt__Box__Engine__"
argument_list|)
condition|)
block|{
name|fe
operator|=
operator|new
name|QTestFontEngine
argument_list|(
name|req
operator|.
name|pixelSize
argument_list|)
expr_stmt|;
name|fe
operator|->
name|fontDef
operator|=
name|req
expr_stmt|;
block|}
else|else
block|{
name|fe
operator|=
name|findFont
argument_list|(
name|script
argument_list|,
name|d
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|engineData
operator|->
name|engines
index|[
name|script
index|]
operator|=
name|fe
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
