begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qtexthtmlparser_p.h"
end_include
begin_include
include|#
directive|include
file|<qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<qtextcodec.h>
end_include
begin_include
include|#
directive|include
file|<qstack.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qthread.h>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|"qtextdocument.h"
end_include
begin_include
include|#
directive|include
file|"qtextformat_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextdocument_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextcursor.h"
end_include
begin_include
include|#
directive|include
file|"qfont_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qfunctions_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TEXTHTMLPARSER
end_ifndef
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
comment|// see also tst_qtextdocumentfragment.cpp
DECL|macro|MAX_ENTITY
define|#
directive|define
name|MAX_ENTITY
value|258
DECL|struct|QTextHtmlEntity
DECL|member|name
DECL|member|code
DECL|variable|entities
specifier|static
specifier|const
expr|struct
name|QTextHtmlEntity
block|{
specifier|const
name|char
operator|*
name|name
block|;
name|quint16
name|code
block|; }
name|entities
index|[
name|MAX_ENTITY
index|]
operator|=
block|{
block|{
literal|"AElig"
block|,
literal|0x00c6
block|}
block|,
block|{
literal|"AMP"
block|,
literal|38
block|}
block|,
block|{
literal|"Aacute"
block|,
literal|0x00c1
block|}
block|,
block|{
literal|"Acirc"
block|,
literal|0x00c2
block|}
block|,
block|{
literal|"Agrave"
block|,
literal|0x00c0
block|}
block|,
block|{
literal|"Alpha"
block|,
literal|0x0391
block|}
block|,
block|{
literal|"Aring"
block|,
literal|0x00c5
block|}
block|,
block|{
literal|"Atilde"
block|,
literal|0x00c3
block|}
block|,
block|{
literal|"Auml"
block|,
literal|0x00c4
block|}
block|,
block|{
literal|"Beta"
block|,
literal|0x0392
block|}
block|,
block|{
literal|"Ccedil"
block|,
literal|0x00c7
block|}
block|,
block|{
literal|"Chi"
block|,
literal|0x03a7
block|}
block|,
block|{
literal|"Dagger"
block|,
literal|0x2021
block|}
block|,
block|{
literal|"Delta"
block|,
literal|0x0394
block|}
block|,
block|{
literal|"ETH"
block|,
literal|0x00d0
block|}
block|,
block|{
literal|"Eacute"
block|,
literal|0x00c9
block|}
block|,
block|{
literal|"Ecirc"
block|,
literal|0x00ca
block|}
block|,
block|{
literal|"Egrave"
block|,
literal|0x00c8
block|}
block|,
block|{
literal|"Epsilon"
block|,
literal|0x0395
block|}
block|,
block|{
literal|"Eta"
block|,
literal|0x0397
block|}
block|,
block|{
literal|"Euml"
block|,
literal|0x00cb
block|}
block|,
block|{
literal|"GT"
block|,
literal|62
block|}
block|,
block|{
literal|"Gamma"
block|,
literal|0x0393
block|}
block|,
block|{
literal|"Iacute"
block|,
literal|0x00cd
block|}
block|,
block|{
literal|"Icirc"
block|,
literal|0x00ce
block|}
block|,
block|{
literal|"Igrave"
block|,
literal|0x00cc
block|}
block|,
block|{
literal|"Iota"
block|,
literal|0x0399
block|}
block|,
block|{
literal|"Iuml"
block|,
literal|0x00cf
block|}
block|,
block|{
literal|"Kappa"
block|,
literal|0x039a
block|}
block|,
block|{
literal|"LT"
block|,
literal|60
block|}
block|,
block|{
literal|"Lambda"
block|,
literal|0x039b
block|}
block|,
block|{
literal|"Mu"
block|,
literal|0x039c
block|}
block|,
block|{
literal|"Ntilde"
block|,
literal|0x00d1
block|}
block|,
block|{
literal|"Nu"
block|,
literal|0x039d
block|}
block|,
block|{
literal|"OElig"
block|,
literal|0x0152
block|}
block|,
block|{
literal|"Oacute"
block|,
literal|0x00d3
block|}
block|,
block|{
literal|"Ocirc"
block|,
literal|0x00d4
block|}
block|,
block|{
literal|"Ograve"
block|,
literal|0x00d2
block|}
block|,
block|{
literal|"Omega"
block|,
literal|0x03a9
block|}
block|,
block|{
literal|"Omicron"
block|,
literal|0x039f
block|}
block|,
block|{
literal|"Oslash"
block|,
literal|0x00d8
block|}
block|,
block|{
literal|"Otilde"
block|,
literal|0x00d5
block|}
block|,
block|{
literal|"Ouml"
block|,
literal|0x00d6
block|}
block|,
block|{
literal|"Phi"
block|,
literal|0x03a6
block|}
block|,
block|{
literal|"Pi"
block|,
literal|0x03a0
block|}
block|,
block|{
literal|"Prime"
block|,
literal|0x2033
block|}
block|,
block|{
literal|"Psi"
block|,
literal|0x03a8
block|}
block|,
block|{
literal|"QUOT"
block|,
literal|34
block|}
block|,
block|{
literal|"Rho"
block|,
literal|0x03a1
block|}
block|,
block|{
literal|"Scaron"
block|,
literal|0x0160
block|}
block|,
block|{
literal|"Sigma"
block|,
literal|0x03a3
block|}
block|,
block|{
literal|"THORN"
block|,
literal|0x00de
block|}
block|,
block|{
literal|"Tau"
block|,
literal|0x03a4
block|}
block|,
block|{
literal|"Theta"
block|,
literal|0x0398
block|}
block|,
block|{
literal|"Uacute"
block|,
literal|0x00da
block|}
block|,
block|{
literal|"Ucirc"
block|,
literal|0x00db
block|}
block|,
block|{
literal|"Ugrave"
block|,
literal|0x00d9
block|}
block|,
block|{
literal|"Upsilon"
block|,
literal|0x03a5
block|}
block|,
block|{
literal|"Uuml"
block|,
literal|0x00dc
block|}
block|,
block|{
literal|"Xi"
block|,
literal|0x039e
block|}
block|,
block|{
literal|"Yacute"
block|,
literal|0x00dd
block|}
block|,
block|{
literal|"Yuml"
block|,
literal|0x0178
block|}
block|,
block|{
literal|"Zeta"
block|,
literal|0x0396
block|}
block|,
block|{
literal|"aacute"
block|,
literal|0x00e1
block|}
block|,
block|{
literal|"acirc"
block|,
literal|0x00e2
block|}
block|,
block|{
literal|"acute"
block|,
literal|0x00b4
block|}
block|,
block|{
literal|"aelig"
block|,
literal|0x00e6
block|}
block|,
block|{
literal|"agrave"
block|,
literal|0x00e0
block|}
block|,
block|{
literal|"alefsym"
block|,
literal|0x2135
block|}
block|,
block|{
literal|"alpha"
block|,
literal|0x03b1
block|}
block|,
block|{
literal|"amp"
block|,
literal|38
block|}
block|,
block|{
literal|"and"
block|,
literal|0x22a5
block|}
block|,
block|{
literal|"ang"
block|,
literal|0x2220
block|}
block|,
block|{
literal|"apos"
block|,
literal|0x0027
block|}
block|,
block|{
literal|"aring"
block|,
literal|0x00e5
block|}
block|,
block|{
literal|"asymp"
block|,
literal|0x2248
block|}
block|,
block|{
literal|"atilde"
block|,
literal|0x00e3
block|}
block|,
block|{
literal|"auml"
block|,
literal|0x00e4
block|}
block|,
block|{
literal|"bdquo"
block|,
literal|0x201e
block|}
block|,
block|{
literal|"beta"
block|,
literal|0x03b2
block|}
block|,
block|{
literal|"brvbar"
block|,
literal|0x00a6
block|}
block|,
block|{
literal|"bull"
block|,
literal|0x2022
block|}
block|,
block|{
literal|"cap"
block|,
literal|0x2229
block|}
block|,
block|{
literal|"ccedil"
block|,
literal|0x00e7
block|}
block|,
block|{
literal|"cedil"
block|,
literal|0x00b8
block|}
block|,
block|{
literal|"cent"
block|,
literal|0x00a2
block|}
block|,
block|{
literal|"chi"
block|,
literal|0x03c7
block|}
block|,
block|{
literal|"circ"
block|,
literal|0x02c6
block|}
block|,
block|{
literal|"clubs"
block|,
literal|0x2663
block|}
block|,
block|{
literal|"cong"
block|,
literal|0x2245
block|}
block|,
block|{
literal|"copy"
block|,
literal|0x00a9
block|}
block|,
block|{
literal|"crarr"
block|,
literal|0x21b5
block|}
block|,
block|{
literal|"cup"
block|,
literal|0x222a
block|}
block|,
block|{
literal|"curren"
block|,
literal|0x00a4
block|}
block|,
block|{
literal|"dArr"
block|,
literal|0x21d3
block|}
block|,
block|{
literal|"dagger"
block|,
literal|0x2020
block|}
block|,
block|{
literal|"darr"
block|,
literal|0x2193
block|}
block|,
block|{
literal|"deg"
block|,
literal|0x00b0
block|}
block|,
block|{
literal|"delta"
block|,
literal|0x03b4
block|}
block|,
block|{
literal|"diams"
block|,
literal|0x2666
block|}
block|,
block|{
literal|"divide"
block|,
literal|0x00f7
block|}
block|,
block|{
literal|"eacute"
block|,
literal|0x00e9
block|}
block|,
block|{
literal|"ecirc"
block|,
literal|0x00ea
block|}
block|,
block|{
literal|"egrave"
block|,
literal|0x00e8
block|}
block|,
block|{
literal|"empty"
block|,
literal|0x2205
block|}
block|,
block|{
literal|"emsp"
block|,
literal|0x2003
block|}
block|,
block|{
literal|"ensp"
block|,
literal|0x2002
block|}
block|,
block|{
literal|"epsilon"
block|,
literal|0x03b5
block|}
block|,
block|{
literal|"equiv"
block|,
literal|0x2261
block|}
block|,
block|{
literal|"eta"
block|,
literal|0x03b7
block|}
block|,
block|{
literal|"eth"
block|,
literal|0x00f0
block|}
block|,
block|{
literal|"euml"
block|,
literal|0x00eb
block|}
block|,
block|{
literal|"euro"
block|,
literal|0x20ac
block|}
block|,
block|{
literal|"exist"
block|,
literal|0x2203
block|}
block|,
block|{
literal|"fnof"
block|,
literal|0x0192
block|}
block|,
block|{
literal|"forall"
block|,
literal|0x2200
block|}
block|,
block|{
literal|"frac12"
block|,
literal|0x00bd
block|}
block|,
block|{
literal|"frac14"
block|,
literal|0x00bc
block|}
block|,
block|{
literal|"frac34"
block|,
literal|0x00be
block|}
block|,
block|{
literal|"frasl"
block|,
literal|0x2044
block|}
block|,
block|{
literal|"gamma"
block|,
literal|0x03b3
block|}
block|,
block|{
literal|"ge"
block|,
literal|0x2265
block|}
block|,
block|{
literal|"gt"
block|,
literal|62
block|}
block|,
block|{
literal|"hArr"
block|,
literal|0x21d4
block|}
block|,
block|{
literal|"harr"
block|,
literal|0x2194
block|}
block|,
block|{
literal|"hearts"
block|,
literal|0x2665
block|}
block|,
block|{
literal|"hellip"
block|,
literal|0x2026
block|}
block|,
block|{
literal|"iacute"
block|,
literal|0x00ed
block|}
block|,
block|{
literal|"icirc"
block|,
literal|0x00ee
block|}
block|,
block|{
literal|"iexcl"
block|,
literal|0x00a1
block|}
block|,
block|{
literal|"igrave"
block|,
literal|0x00ec
block|}
block|,
block|{
literal|"image"
block|,
literal|0x2111
block|}
block|,
block|{
literal|"infin"
block|,
literal|0x221e
block|}
block|,
block|{
literal|"int"
block|,
literal|0x222b
block|}
block|,
block|{
literal|"iota"
block|,
literal|0x03b9
block|}
block|,
block|{
literal|"iquest"
block|,
literal|0x00bf
block|}
block|,
block|{
literal|"isin"
block|,
literal|0x2208
block|}
block|,
block|{
literal|"iuml"
block|,
literal|0x00ef
block|}
block|,
block|{
literal|"kappa"
block|,
literal|0x03ba
block|}
block|,
block|{
literal|"lArr"
block|,
literal|0x21d0
block|}
block|,
block|{
literal|"lambda"
block|,
literal|0x03bb
block|}
block|,
block|{
literal|"lang"
block|,
literal|0x2329
block|}
block|,
block|{
literal|"laquo"
block|,
literal|0x00ab
block|}
block|,
block|{
literal|"larr"
block|,
literal|0x2190
block|}
block|,
block|{
literal|"lceil"
block|,
literal|0x2308
block|}
block|,
block|{
literal|"ldquo"
block|,
literal|0x201c
block|}
block|,
block|{
literal|"le"
block|,
literal|0x2264
block|}
block|,
block|{
literal|"lfloor"
block|,
literal|0x230a
block|}
block|,
block|{
literal|"lowast"
block|,
literal|0x2217
block|}
block|,
block|{
literal|"loz"
block|,
literal|0x25ca
block|}
block|,
block|{
literal|"lrm"
block|,
literal|0x200e
block|}
block|,
block|{
literal|"lsaquo"
block|,
literal|0x2039
block|}
block|,
block|{
literal|"lsquo"
block|,
literal|0x2018
block|}
block|,
block|{
literal|"lt"
block|,
literal|60
block|}
block|,
block|{
literal|"macr"
block|,
literal|0x00af
block|}
block|,
block|{
literal|"mdash"
block|,
literal|0x2014
block|}
block|,
block|{
literal|"micro"
block|,
literal|0x00b5
block|}
block|,
block|{
literal|"middot"
block|,
literal|0x00b7
block|}
block|,
block|{
literal|"minus"
block|,
literal|0x2212
block|}
block|,
block|{
literal|"mu"
block|,
literal|0x03bc
block|}
block|,
block|{
literal|"nabla"
block|,
literal|0x2207
block|}
block|,
block|{
literal|"nbsp"
block|,
literal|0x00a0
block|}
block|,
block|{
literal|"ndash"
block|,
literal|0x2013
block|}
block|,
block|{
literal|"ne"
block|,
literal|0x2260
block|}
block|,
block|{
literal|"ni"
block|,
literal|0x220b
block|}
block|,
block|{
literal|"not"
block|,
literal|0x00ac
block|}
block|,
block|{
literal|"notin"
block|,
literal|0x2209
block|}
block|,
block|{
literal|"nsub"
block|,
literal|0x2284
block|}
block|,
block|{
literal|"ntilde"
block|,
literal|0x00f1
block|}
block|,
block|{
literal|"nu"
block|,
literal|0x03bd
block|}
block|,
block|{
literal|"oacute"
block|,
literal|0x00f3
block|}
block|,
block|{
literal|"ocirc"
block|,
literal|0x00f4
block|}
block|,
block|{
literal|"oelig"
block|,
literal|0x0153
block|}
block|,
block|{
literal|"ograve"
block|,
literal|0x00f2
block|}
block|,
block|{
literal|"oline"
block|,
literal|0x203e
block|}
block|,
block|{
literal|"omega"
block|,
literal|0x03c9
block|}
block|,
block|{
literal|"omicron"
block|,
literal|0x03bf
block|}
block|,
block|{
literal|"oplus"
block|,
literal|0x2295
block|}
block|,
block|{
literal|"or"
block|,
literal|0x22a6
block|}
block|,
block|{
literal|"ordf"
block|,
literal|0x00aa
block|}
block|,
block|{
literal|"ordm"
block|,
literal|0x00ba
block|}
block|,
block|{
literal|"oslash"
block|,
literal|0x00f8
block|}
block|,
block|{
literal|"otilde"
block|,
literal|0x00f5
block|}
block|,
block|{
literal|"otimes"
block|,
literal|0x2297
block|}
block|,
block|{
literal|"ouml"
block|,
literal|0x00f6
block|}
block|,
block|{
literal|"para"
block|,
literal|0x00b6
block|}
block|,
block|{
literal|"part"
block|,
literal|0x2202
block|}
block|,
block|{
literal|"percnt"
block|,
literal|0x0025
block|}
block|,
block|{
literal|"permil"
block|,
literal|0x2030
block|}
block|,
block|{
literal|"perp"
block|,
literal|0x22a5
block|}
block|,
block|{
literal|"phi"
block|,
literal|0x03c6
block|}
block|,
block|{
literal|"pi"
block|,
literal|0x03c0
block|}
block|,
block|{
literal|"piv"
block|,
literal|0x03d6
block|}
block|,
block|{
literal|"plusmn"
block|,
literal|0x00b1
block|}
block|,
block|{
literal|"pound"
block|,
literal|0x00a3
block|}
block|,
block|{
literal|"prime"
block|,
literal|0x2032
block|}
block|,
block|{
literal|"prod"
block|,
literal|0x220f
block|}
block|,
block|{
literal|"prop"
block|,
literal|0x221d
block|}
block|,
block|{
literal|"psi"
block|,
literal|0x03c8
block|}
block|,
block|{
literal|"quot"
block|,
literal|34
block|}
block|,
block|{
literal|"rArr"
block|,
literal|0x21d2
block|}
block|,
block|{
literal|"radic"
block|,
literal|0x221a
block|}
block|,
block|{
literal|"rang"
block|,
literal|0x232a
block|}
block|,
block|{
literal|"raquo"
block|,
literal|0x00bb
block|}
block|,
block|{
literal|"rarr"
block|,
literal|0x2192
block|}
block|,
block|{
literal|"rceil"
block|,
literal|0x2309
block|}
block|,
block|{
literal|"rdquo"
block|,
literal|0x201d
block|}
block|,
block|{
literal|"real"
block|,
literal|0x211c
block|}
block|,
block|{
literal|"reg"
block|,
literal|0x00ae
block|}
block|,
block|{
literal|"rfloor"
block|,
literal|0x230b
block|}
block|,
block|{
literal|"rho"
block|,
literal|0x03c1
block|}
block|,
block|{
literal|"rlm"
block|,
literal|0x200f
block|}
block|,
block|{
literal|"rsaquo"
block|,
literal|0x203a
block|}
block|,
block|{
literal|"rsquo"
block|,
literal|0x2019
block|}
block|,
block|{
literal|"sbquo"
block|,
literal|0x201a
block|}
block|,
block|{
literal|"scaron"
block|,
literal|0x0161
block|}
block|,
block|{
literal|"sdot"
block|,
literal|0x22c5
block|}
block|,
block|{
literal|"sect"
block|,
literal|0x00a7
block|}
block|,
block|{
literal|"shy"
block|,
literal|0x00ad
block|}
block|,
block|{
literal|"sigma"
block|,
literal|0x03c3
block|}
block|,
block|{
literal|"sigmaf"
block|,
literal|0x03c2
block|}
block|,
block|{
literal|"sim"
block|,
literal|0x223c
block|}
block|,
block|{
literal|"spades"
block|,
literal|0x2660
block|}
block|,
block|{
literal|"sub"
block|,
literal|0x2282
block|}
block|,
block|{
literal|"sube"
block|,
literal|0x2286
block|}
block|,
block|{
literal|"sum"
block|,
literal|0x2211
block|}
block|,
block|{
literal|"sup"
block|,
literal|0x2283
block|}
block|,
block|{
literal|"sup1"
block|,
literal|0x00b9
block|}
block|,
block|{
literal|"sup2"
block|,
literal|0x00b2
block|}
block|,
block|{
literal|"sup3"
block|,
literal|0x00b3
block|}
block|,
block|{
literal|"supe"
block|,
literal|0x2287
block|}
block|,
block|{
literal|"szlig"
block|,
literal|0x00df
block|}
block|,
block|{
literal|"tau"
block|,
literal|0x03c4
block|}
block|,
block|{
literal|"there4"
block|,
literal|0x2234
block|}
block|,
block|{
literal|"theta"
block|,
literal|0x03b8
block|}
block|,
block|{
literal|"thetasym"
block|,
literal|0x03d1
block|}
block|,
block|{
literal|"thinsp"
block|,
literal|0x2009
block|}
block|,
block|{
literal|"thorn"
block|,
literal|0x00fe
block|}
block|,
block|{
literal|"tilde"
block|,
literal|0x02dc
block|}
block|,
block|{
literal|"times"
block|,
literal|0x00d7
block|}
block|,
block|{
literal|"trade"
block|,
literal|0x2122
block|}
block|,
block|{
literal|"uArr"
block|,
literal|0x21d1
block|}
block|,
block|{
literal|"uacute"
block|,
literal|0x00fa
block|}
block|,
block|{
literal|"uarr"
block|,
literal|0x2191
block|}
block|,
block|{
literal|"ucirc"
block|,
literal|0x00fb
block|}
block|,
block|{
literal|"ugrave"
block|,
literal|0x00f9
block|}
block|,
block|{
literal|"uml"
block|,
literal|0x00a8
block|}
block|,
block|{
literal|"upsih"
block|,
literal|0x03d2
block|}
block|,
block|{
literal|"upsilon"
block|,
literal|0x03c5
block|}
block|,
block|{
literal|"uuml"
block|,
literal|0x00fc
block|}
block|,
block|{
literal|"weierp"
block|,
literal|0x2118
block|}
block|,
block|{
literal|"xi"
block|,
literal|0x03be
block|}
block|,
block|{
literal|"yacute"
block|,
literal|0x00fd
block|}
block|,
block|{
literal|"yen"
block|,
literal|0x00a5
block|}
block|,
block|{
literal|"yuml"
block|,
literal|0x00ff
block|}
block|,
block|{
literal|"zeta"
block|,
literal|0x03b6
block|}
block|,
block|{
literal|"zwj"
block|,
literal|0x200d
block|}
block|,
block|{
literal|"zwnj"
block|,
literal|0x200c
block|}
block|}
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|operator <
name|Q_STATIC_GLOBAL_OPERATOR
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|QString
modifier|&
name|entityStr
parameter_list|,
specifier|const
name|QTextHtmlEntity
modifier|&
name|entity
parameter_list|)
block|{
return|return
name|entityStr
operator|<
name|QLatin1String
argument_list|(
name|entity
operator|.
name|name
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|operator <
name|Q_STATIC_GLOBAL_OPERATOR
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|QTextHtmlEntity
modifier|&
name|entity
parameter_list|,
specifier|const
name|QString
modifier|&
name|entityStr
parameter_list|)
block|{
return|return
name|QLatin1String
argument_list|(
name|entity
operator|.
name|name
argument_list|)
operator|<
name|entityStr
return|;
block|}
end_function
begin_function
DECL|function|resolveEntity
specifier|static
name|QChar
name|resolveEntity
parameter_list|(
specifier|const
name|QString
modifier|&
name|entity
parameter_list|)
block|{
specifier|const
name|QTextHtmlEntity
modifier|*
name|start
init|=
operator|&
name|entities
index|[
literal|0
index|]
decl_stmt|;
specifier|const
name|QTextHtmlEntity
modifier|*
name|end
init|=
operator|&
name|entities
index|[
name|MAX_ENTITY
index|]
decl_stmt|;
specifier|const
name|QTextHtmlEntity
modifier|*
name|e
init|=
name|qBinaryFind
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|entity
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
name|end
condition|)
return|return
name|QChar
argument_list|()
return|;
return|return
name|e
operator|->
name|code
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|windowsLatin1ExtendedCharacters
specifier|static
specifier|const
name|ushort
name|windowsLatin1ExtendedCharacters
index|[
literal|0xA0
operator|-
literal|0x80
index|]
init|=
block|{
literal|0x20ac
block|,
comment|// 0x80
literal|0x0081
block|,
comment|// 0x81 direct mapping
literal|0x201a
block|,
comment|// 0x82
literal|0x0192
block|,
comment|// 0x83
literal|0x201e
block|,
comment|// 0x84
literal|0x2026
block|,
comment|// 0x85
literal|0x2020
block|,
comment|// 0x86
literal|0x2021
block|,
comment|// 0x87
literal|0x02C6
block|,
comment|// 0x88
literal|0x2030
block|,
comment|// 0x89
literal|0x0160
block|,
comment|// 0x8A
literal|0x2039
block|,
comment|// 0x8B
literal|0x0152
block|,
comment|// 0x8C
literal|0x008D
block|,
comment|// 0x8D direct mapping
literal|0x017D
block|,
comment|// 0x8E
literal|0x008F
block|,
comment|// 0x8F directmapping
literal|0x0090
block|,
comment|// 0x90 directmapping
literal|0x2018
block|,
comment|// 0x91
literal|0x2019
block|,
comment|// 0x92
literal|0x201C
block|,
comment|// 0x93
literal|0X201D
block|,
comment|// 0x94
literal|0x2022
block|,
comment|// 0x95
literal|0x2013
block|,
comment|// 0x96
literal|0x2014
block|,
comment|// 0x97
literal|0x02DC
block|,
comment|// 0x98
literal|0x2122
block|,
comment|// 0x99
literal|0x0161
block|,
comment|// 0x9A
literal|0x203A
block|,
comment|// 0x9B
literal|0x0153
block|,
comment|// 0x9C
literal|0x009D
block|,
comment|// 0x9D direct mapping
literal|0x017E
block|,
comment|// 0x9E
literal|0x0178
comment|// 0x9F
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|// the displayMode value is according to the what are blocks in the piecetable, not
end_comment
begin_comment
comment|// what the w3c defines.
end_comment
begin_decl_stmt
DECL|variable|elements
specifier|static
specifier|const
name|QTextHtmlElement
name|elements
index|[
name|Html_NumElements
index|]
init|=
block|{
block|{
literal|"a"
block|,
name|Html_a
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"address"
block|,
name|Html_address
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"b"
block|,
name|Html_b
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"big"
block|,
name|Html_big
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"blockquote"
block|,
name|Html_blockquote
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"body"
block|,
name|Html_body
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"br"
block|,
name|Html_br
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"caption"
block|,
name|Html_caption
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"center"
block|,
name|Html_center
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"cite"
block|,
name|Html_cite
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"code"
block|,
name|Html_code
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"dd"
block|,
name|Html_dd
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"dfn"
block|,
name|Html_dfn
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"div"
block|,
name|Html_div
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"dl"
block|,
name|Html_dl
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"dt"
block|,
name|Html_dt
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"em"
block|,
name|Html_em
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"font"
block|,
name|Html_font
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"h1"
block|,
name|Html_h1
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"h2"
block|,
name|Html_h2
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"h3"
block|,
name|Html_h3
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"h4"
block|,
name|Html_h4
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"h5"
block|,
name|Html_h5
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"h6"
block|,
name|Html_h6
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"head"
block|,
name|Html_head
block|,
name|QTextHtmlElement
operator|::
name|DisplayNone
block|}
block|,
block|{
literal|"hr"
block|,
name|Html_hr
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"html"
block|,
name|Html_html
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"i"
block|,
name|Html_i
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"img"
block|,
name|Html_img
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"kbd"
block|,
name|Html_kbd
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"li"
block|,
name|Html_li
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"link"
block|,
name|Html_link
block|,
name|QTextHtmlElement
operator|::
name|DisplayNone
block|}
block|,
block|{
literal|"meta"
block|,
name|Html_meta
block|,
name|QTextHtmlElement
operator|::
name|DisplayNone
block|}
block|,
block|{
literal|"nobr"
block|,
name|Html_nobr
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"ol"
block|,
name|Html_ol
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"p"
block|,
name|Html_p
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"pre"
block|,
name|Html_pre
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"qt"
block|,
name|Html_body
comment|/*deliberate mapping*/
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"s"
block|,
name|Html_s
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"samp"
block|,
name|Html_samp
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"script"
block|,
name|Html_script
block|,
name|QTextHtmlElement
operator|::
name|DisplayNone
block|}
block|,
block|{
literal|"small"
block|,
name|Html_small
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"span"
block|,
name|Html_span
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"strong"
block|,
name|Html_strong
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"style"
block|,
name|Html_style
block|,
name|QTextHtmlElement
operator|::
name|DisplayNone
block|}
block|,
block|{
literal|"sub"
block|,
name|Html_sub
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"sup"
block|,
name|Html_sup
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"table"
block|,
name|Html_table
block|,
name|QTextHtmlElement
operator|::
name|DisplayTable
block|}
block|,
block|{
literal|"tbody"
block|,
name|Html_tbody
block|,
name|QTextHtmlElement
operator|::
name|DisplayTable
block|}
block|,
block|{
literal|"td"
block|,
name|Html_td
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"tfoot"
block|,
name|Html_tfoot
block|,
name|QTextHtmlElement
operator|::
name|DisplayTable
block|}
block|,
block|{
literal|"th"
block|,
name|Html_th
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"thead"
block|,
name|Html_thead
block|,
name|QTextHtmlElement
operator|::
name|DisplayTable
block|}
block|,
block|{
literal|"title"
block|,
name|Html_title
block|,
name|QTextHtmlElement
operator|::
name|DisplayNone
block|}
block|,
block|{
literal|"tr"
block|,
name|Html_tr
block|,
name|QTextHtmlElement
operator|::
name|DisplayTable
block|}
block|,
block|{
literal|"tt"
block|,
name|Html_tt
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"u"
block|,
name|Html_u
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|,
block|{
literal|"ul"
block|,
name|Html_ul
block|,
name|QTextHtmlElement
operator|::
name|DisplayBlock
block|}
block|,
block|{
literal|"var"
block|,
name|Html_var
block|,
name|QTextHtmlElement
operator|::
name|DisplayInline
block|}
block|, }
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|operator <
name|Q_STATIC_GLOBAL_OPERATOR
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
specifier|const
name|QTextHtmlElement
modifier|&
name|e
parameter_list|)
block|{
return|return
name|str
operator|<
name|QLatin1String
argument_list|(
name|e
operator|.
name|name
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|operator <
name|Q_STATIC_GLOBAL_OPERATOR
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|QTextHtmlElement
modifier|&
name|e
parameter_list|,
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
return|return
name|QLatin1String
argument_list|(
name|e
operator|.
name|name
argument_list|)
operator|<
name|str
return|;
block|}
end_function
begin_function
DECL|function|lookupElementHelper
specifier|static
specifier|const
name|QTextHtmlElement
modifier|*
name|lookupElementHelper
parameter_list|(
specifier|const
name|QString
modifier|&
name|element
parameter_list|)
block|{
specifier|const
name|QTextHtmlElement
modifier|*
name|start
init|=
operator|&
name|elements
index|[
literal|0
index|]
decl_stmt|;
specifier|const
name|QTextHtmlElement
modifier|*
name|end
init|=
operator|&
name|elements
index|[
name|Html_NumElements
index|]
decl_stmt|;
specifier|const
name|QTextHtmlElement
modifier|*
name|e
init|=
name|qBinaryFind
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
name|end
condition|)
return|return
literal|0
return|;
return|return
name|e
return|;
block|}
end_function
begin_function
DECL|function|lookupElement
name|int
name|QTextHtmlParser
operator|::
name|lookupElement
parameter_list|(
specifier|const
name|QString
modifier|&
name|element
parameter_list|)
block|{
specifier|const
name|QTextHtmlElement
modifier|*
name|e
init|=
name|lookupElementHelper
argument_list|(
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|e
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|e
operator|->
name|id
return|;
block|}
end_function
begin_comment
comment|// quotes newlines as "\\n"
end_comment
begin_function
DECL|function|quoteNewline
specifier|static
name|QString
name|quoteNewline
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
block|{
name|QString
name|n
init|=
name|s
decl_stmt|;
name|n
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\\n"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
end_function
begin_constructor
DECL|function|QTextHtmlParserNode
name|QTextHtmlParserNode
operator|::
name|QTextHtmlParserNode
parameter_list|()
member_init_list|:
name|parent
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|id
argument_list|(
name|Html_unknown
argument_list|)
member_init_list|,
name|cssFloat
argument_list|(
name|QTextFrameFormat
operator|::
name|InFlow
argument_list|)
member_init_list|,
name|hasOwnListStyle
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|hasCssListIndent
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|isEmptyParagraph
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|isTextFrame
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|isRootFrame
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|displayMode
argument_list|(
name|QTextHtmlElement
operator|::
name|DisplayInline
argument_list|)
member_init_list|,
name|hasHref
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|listStyle
argument_list|(
name|QTextListFormat
operator|::
name|ListStyleUndefined
argument_list|)
member_init_list|,
name|imageWidth
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|imageHeight
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|tableBorder
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|tableCellRowSpan
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|tableCellColSpan
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|tableCellSpacing
argument_list|(
literal|2
argument_list|)
member_init_list|,
name|tableCellPadding
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|borderBrush
argument_list|(
name|Qt
operator|::
name|darkGray
argument_list|)
member_init_list|,
name|borderStyle
argument_list|(
name|QTextFrameFormat
operator|::
name|BorderStyle_Outset
argument_list|)
member_init_list|,
name|userState
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|cssListIndent
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|wsm
argument_list|(
name|WhiteSpaceModeUndefined
argument_list|)
block|{
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginLeft
index|]
operator|=
literal|0
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginRight
index|]
operator|=
literal|0
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginTop
index|]
operator|=
literal|0
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginBottom
index|]
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|dumpHtml
name|void
name|QTextHtmlParser
operator|::
name|dumpHtml
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|qDebug
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|qPrintable
argument_list|(
name|QString
argument_list|(
name|depth
argument_list|(
name|i
argument_list|)
operator|*
literal|4
argument_list|,
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|qPrintable
argument_list|(
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|tag
argument_list|)
operator|<<
literal|':'
operator|<<
name|quoteNewline
argument_list|(
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|text
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|newNode
name|QTextHtmlParserNode
modifier|*
name|QTextHtmlParser
operator|::
name|newNode
parameter_list|(
name|int
name|parent
parameter_list|)
block|{
name|QTextHtmlParserNode
modifier|*
name|lastNode
init|=
operator|&
name|nodes
operator|.
name|last
argument_list|()
decl_stmt|;
name|QTextHtmlParserNode
modifier|*
name|newNode
init|=
literal|0
decl_stmt|;
name|bool
name|reuseLastNode
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
block|{
name|reuseLastNode
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastNode
operator|->
name|tag
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|lastNode
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|reuseLastNode
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// last node is a text node (empty tag) with some text
if|if
condition|(
name|lastNode
operator|->
name|text
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|lastNode
operator|->
name|text
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|isSpace
argument_list|()
condition|)
block|{
name|int
name|lastSibling
init|=
name|count
argument_list|()
operator|-
literal|2
decl_stmt|;
while|while
condition|(
name|lastSibling
operator|&&
name|at
argument_list|(
name|lastSibling
argument_list|)
operator|.
name|parent
operator|!=
name|lastNode
operator|->
name|parent
operator|&&
name|at
argument_list|(
name|lastSibling
argument_list|)
operator|.
name|displayMode
operator|==
name|QTextHtmlElement
operator|::
name|DisplayInline
condition|)
block|{
name|lastSibling
operator|=
name|at
argument_list|(
name|lastSibling
argument_list|)
operator|.
name|parent
expr_stmt|;
block|}
if|if
condition|(
name|at
argument_list|(
name|lastSibling
argument_list|)
operator|.
name|displayMode
operator|==
name|QTextHtmlElement
operator|::
name|DisplayInline
condition|)
block|{
name|reuseLastNode
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|reuseLastNode
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// text node with real (non-whitespace) text -> nothing to re-use
name|reuseLastNode
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// last node had a proper tag -> nothing to re-use
name|reuseLastNode
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|reuseLastNode
condition|)
block|{
name|newNode
operator|=
name|lastNode
expr_stmt|;
name|newNode
operator|->
name|tag
operator|.
name|clear
argument_list|()
expr_stmt|;
name|newNode
operator|->
name|text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|newNode
operator|->
name|id
operator|=
name|Html_unknown
expr_stmt|;
block|}
else|else
block|{
name|nodes
operator|.
name|resize
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|newNode
operator|=
operator|&
name|nodes
operator|.
name|last
argument_list|()
expr_stmt|;
block|}
name|newNode
operator|->
name|parent
operator|=
name|parent
expr_stmt|;
return|return
name|newNode
return|;
block|}
end_function
begin_function
DECL|function|parse
name|void
name|QTextHtmlParser
operator|::
name|parse
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
specifier|const
name|QTextDocument
modifier|*
name|_resourceProvider
parameter_list|)
block|{
name|nodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nodes
operator|.
name|resize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|txt
operator|=
name|text
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
name|len
operator|=
name|txt
operator|.
name|length
argument_list|()
expr_stmt|;
name|textEditMode
operator|=
literal|false
expr_stmt|;
name|resourceProvider
operator|=
name|_resourceProvider
expr_stmt|;
name|parse
argument_list|()
expr_stmt|;
comment|//dumpHtml();
block|}
end_function
begin_function
DECL|function|depth
name|int
name|QTextHtmlParser
operator|::
name|depth
parameter_list|(
name|int
name|i
parameter_list|)
specifier|const
block|{
name|int
name|depth
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
condition|)
block|{
name|i
operator|=
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|parent
expr_stmt|;
operator|++
name|depth
expr_stmt|;
block|}
return|return
name|depth
return|;
block|}
end_function
begin_function
DECL|function|margin
name|int
name|QTextHtmlParser
operator|::
name|margin
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|mar
parameter_list|)
specifier|const
block|{
name|int
name|m
init|=
literal|0
decl_stmt|;
specifier|const
name|QTextHtmlParserNode
modifier|*
name|node
decl_stmt|;
if|if
condition|(
name|mar
operator|==
name|MarginLeft
operator|||
name|mar
operator|==
name|MarginRight
condition|)
block|{
while|while
condition|(
name|i
condition|)
block|{
name|node
operator|=
operator|&
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|node
operator|->
name|isBlock
argument_list|()
operator|&&
name|node
operator|->
name|id
operator|!=
name|Html_table
condition|)
break|break;
if|if
condition|(
name|node
operator|->
name|isTableCell
argument_list|()
condition|)
break|break;
name|m
operator|+=
name|node
operator|->
name|margin
index|[
name|mar
index|]
expr_stmt|;
name|i
operator|=
name|node
operator|->
name|parent
expr_stmt|;
block|}
block|}
return|return
name|m
return|;
block|}
end_function
begin_function
DECL|function|topMargin
name|int
name|QTextHtmlParser
operator|::
name|topMargin
parameter_list|(
name|int
name|i
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|i
condition|)
return|return
literal|0
return|;
return|return
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|margin
index|[
name|MarginTop
index|]
return|;
block|}
end_function
begin_function
DECL|function|bottomMargin
name|int
name|QTextHtmlParser
operator|::
name|bottomMargin
parameter_list|(
name|int
name|i
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|i
condition|)
return|return
literal|0
return|;
return|return
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|margin
index|[
name|MarginBottom
index|]
return|;
block|}
end_function
begin_function
DECL|function|eatSpace
name|void
name|QTextHtmlParser
operator|::
name|eatSpace
parameter_list|()
block|{
while|while
condition|(
name|pos
operator|<
name|len
operator|&&
name|txt
operator|.
name|at
argument_list|(
name|pos
argument_list|)
operator|.
name|isSpace
argument_list|()
operator|&&
name|txt
operator|.
name|at
argument_list|(
name|pos
argument_list|)
operator|!=
name|QChar
operator|::
name|ParagraphSeparator
condition|)
name|pos
operator|++
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parse
name|void
name|QTextHtmlParser
operator|::
name|parse
parameter_list|()
block|{
while|while
condition|(
name|pos
operator|<
name|len
condition|)
block|{
name|QChar
name|c
init|=
name|txt
operator|.
name|at
argument_list|(
name|pos
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
name|QLatin1Char
argument_list|(
literal|'<'
argument_list|)
condition|)
block|{
name|parseTag
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
name|QLatin1Char
argument_list|(
literal|'&'
argument_list|)
condition|)
block|{
name|nodes
operator|.
name|last
argument_list|()
operator|.
name|text
operator|+=
name|parseEntity
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|nodes
operator|.
name|last
argument_list|()
operator|.
name|text
operator|+=
name|c
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// parses a tag after "<"
end_comment
begin_function
DECL|function|parseTag
name|void
name|QTextHtmlParser
operator|::
name|parseTag
parameter_list|()
block|{
name|eatSpace
argument_list|()
expr_stmt|;
comment|// handle comments and other exclamation mark declarations
if|if
condition|(
name|hasPrefix
argument_list|(
name|QLatin1Char
argument_list|(
literal|'!'
argument_list|)
argument_list|)
condition|)
block|{
name|parseExclamationTag
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodes
operator|.
name|last
argument_list|()
operator|.
name|wsm
operator|!=
name|QTextHtmlParserNode
operator|::
name|WhiteSpacePre
operator|&&
name|nodes
operator|.
name|last
argument_list|()
operator|.
name|wsm
operator|!=
name|QTextHtmlParserNode
operator|::
name|WhiteSpacePreWrap
operator|&&
operator|!
name|textEditMode
condition|)
name|eatSpace
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// if close tag just close
if|if
condition|(
name|hasPrefix
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|nodes
operator|.
name|last
argument_list|()
operator|.
name|id
operator|==
name|Html_style
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_CSSPARSER
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
name|nodes
operator|.
name|last
argument_list|()
operator|.
name|text
argument_list|)
decl_stmt|;
name|QCss
operator|::
name|StyleSheet
name|sheet
decl_stmt|;
name|sheet
operator|.
name|origin
operator|=
name|QCss
operator|::
name|StyleSheetOrigin_Author
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|sheet
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|inlineStyleSheets
operator|.
name|append
argument_list|(
name|sheet
argument_list|)
expr_stmt|;
name|resolveStyleSheetImports
argument_list|(
name|sheet
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|parseCloseTag
argument_list|()
expr_stmt|;
return|return;
block|}
name|int
name|p
init|=
name|last
argument_list|()
decl_stmt|;
while|while
condition|(
name|p
operator|&&
name|at
argument_list|(
name|p
argument_list|)
operator|.
name|tag
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
name|p
operator|=
name|at
argument_list|(
name|p
argument_list|)
operator|.
name|parent
expr_stmt|;
name|QTextHtmlParserNode
modifier|*
name|node
init|=
name|newNode
argument_list|(
name|p
argument_list|)
decl_stmt|;
comment|// parse tag name
name|node
operator|->
name|tag
operator|=
name|parseWord
argument_list|()
operator|.
name|toLower
argument_list|()
expr_stmt|;
specifier|const
name|QTextHtmlElement
modifier|*
name|elem
init|=
name|lookupElementHelper
argument_list|(
name|node
operator|->
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
name|elem
condition|)
block|{
name|node
operator|->
name|id
operator|=
name|elem
operator|->
name|id
expr_stmt|;
name|node
operator|->
name|displayMode
operator|=
name|elem
operator|->
name|displayMode
expr_stmt|;
block|}
else|else
block|{
name|node
operator|->
name|id
operator|=
name|Html_unknown
expr_stmt|;
block|}
name|node
operator|->
name|attributes
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// _need_ at least one space after the tag name, otherwise there can't be attributes
if|if
condition|(
name|pos
operator|<
name|len
operator|&&
name|txt
operator|.
name|at
argument_list|(
name|pos
argument_list|)
operator|.
name|isSpace
argument_list|()
condition|)
name|node
operator|->
name|attributes
operator|=
name|parseAttributes
argument_list|()
expr_stmt|;
comment|// resolveParent() may have to change the order in the tree and
comment|// insert intermediate nodes for buggy HTML, so re-initialize the 'node'
comment|// pointer through the return value
name|node
operator|=
name|resolveParent
argument_list|()
expr_stmt|;
name|resolveNode
argument_list|()
expr_stmt|;
specifier|const
name|int
name|nodeIndex
init|=
name|nodes
operator|.
name|count
argument_list|()
operator|-
literal|1
decl_stmt|;
comment|// this new node is always the last
ifndef|#
directive|ifndef
name|QT_NO_CSSPARSER
name|node
operator|->
name|applyCssDeclarations
argument_list|(
name|declarationsForNode
argument_list|(
name|nodeIndex
argument_list|)
argument_list|,
name|resourceProvider
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|applyAttributes
argument_list|(
name|node
operator|->
name|attributes
argument_list|)
expr_stmt|;
comment|// finish tag
name|bool
name|tagClosed
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|len
operator|&&
name|txt
operator|.
name|at
argument_list|(
name|pos
argument_list|)
operator|!=
name|QLatin1Char
argument_list|(
literal|'>'
argument_list|)
condition|)
block|{
if|if
condition|(
name|txt
operator|.
name|at
argument_list|(
name|pos
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
condition|)
name|tagClosed
operator|=
literal|true
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
name|pos
operator|++
expr_stmt|;
comment|// in a white-space preserving environment strip off a initial newline
comment|// since the element itself already generates a newline
if|if
condition|(
operator|(
name|node
operator|->
name|wsm
operator|==
name|QTextHtmlParserNode
operator|::
name|WhiteSpacePre
operator|||
name|node
operator|->
name|wsm
operator|==
name|QTextHtmlParserNode
operator|::
name|WhiteSpacePreWrap
operator|)
operator|&&
name|node
operator|->
name|isBlock
argument_list|()
condition|)
block|{
if|if
condition|(
name|pos
operator|<
name|len
operator|-
literal|1
operator|&&
name|txt
operator|.
name|at
argument_list|(
name|pos
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
condition|)
operator|++
name|pos
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|->
name|mayNotHaveChildren
argument_list|()
operator|||
name|tagClosed
condition|)
block|{
name|newNode
argument_list|(
name|node
operator|->
name|parent
argument_list|)
expr_stmt|;
name|resolveNode
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// parses a tag beginning with "/"
end_comment
begin_function
DECL|function|parseCloseTag
name|void
name|QTextHtmlParser
operator|::
name|parseCloseTag
parameter_list|()
block|{
operator|++
name|pos
expr_stmt|;
name|QString
name|tag
init|=
name|parseWord
argument_list|()
operator|.
name|toLower
argument_list|()
operator|.
name|trimmed
argument_list|()
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|len
condition|)
block|{
name|QChar
name|c
init|=
name|txt
operator|.
name|at
argument_list|(
name|pos
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
name|QLatin1Char
argument_list|(
literal|'>'
argument_list|)
condition|)
break|break;
block|}
comment|// find corresponding open node
name|int
name|p
init|=
name|last
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|>
literal|0
operator|&&
name|at
argument_list|(
name|p
operator|-
literal|1
argument_list|)
operator|.
name|tag
operator|==
name|tag
operator|&&
name|at
argument_list|(
name|p
operator|-
literal|1
argument_list|)
operator|.
name|mayNotHaveChildren
argument_list|()
condition|)
name|p
operator|--
expr_stmt|;
while|while
condition|(
name|p
operator|&&
name|at
argument_list|(
name|p
argument_list|)
operator|.
name|tag
operator|!=
name|tag
condition|)
name|p
operator|=
name|at
argument_list|(
name|p
argument_list|)
operator|.
name|parent
expr_stmt|;
comment|// simply ignore the tag if we can't find
comment|// a corresponding open node, for broken
comment|// html such as<font>blah</font></font>
if|if
condition|(
operator|!
name|p
condition|)
return|return;
comment|// in a white-space preserving environment strip off a trailing newline
comment|// since the closing of the opening block element will automatically result
comment|// in a new block for elements following the<pre>
comment|// ...foo\n</pre><p>blah -> foo</pre><p>blah
if|if
condition|(
operator|(
name|at
argument_list|(
name|p
argument_list|)
operator|.
name|wsm
operator|==
name|QTextHtmlParserNode
operator|::
name|WhiteSpacePre
operator|||
name|at
argument_list|(
name|p
argument_list|)
operator|.
name|wsm
operator|==
name|QTextHtmlParserNode
operator|::
name|WhiteSpacePreWrap
operator|)
operator|&&
name|at
argument_list|(
name|p
argument_list|)
operator|.
name|isBlock
argument_list|()
condition|)
block|{
if|if
condition|(
name|at
argument_list|(
name|last
argument_list|()
argument_list|)
operator|.
name|text
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
condition|)
name|nodes
index|[
name|last
argument_list|()
index|]
operator|.
name|text
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|newNode
argument_list|(
name|at
argument_list|(
name|p
argument_list|)
operator|.
name|parent
argument_list|)
expr_stmt|;
name|resolveNode
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// parses a tag beginning with "!"
end_comment
begin_function
DECL|function|parseExclamationTag
name|void
name|QTextHtmlParser
operator|::
name|parseExclamationTag
parameter_list|()
block|{
operator|++
name|pos
expr_stmt|;
if|if
condition|(
name|hasPrefix
argument_list|(
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|&&
name|hasPrefix
argument_list|(
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
argument_list|,
literal|2
argument_list|)
condition|)
block|{
name|pos
operator|+=
literal|3
expr_stmt|;
comment|// eat comments
name|int
name|end
init|=
name|txt
operator|.
name|indexOf
argument_list|(
name|QLatin1String
argument_list|(
literal|"-->"
argument_list|)
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|pos
operator|=
operator|(
name|end
operator|>=
literal|0
condition|?
name|end
operator|+
literal|3
else|:
name|len
operator|)
expr_stmt|;
block|}
else|else
block|{
comment|// eat internal tags
while|while
condition|(
name|pos
operator|<
name|len
condition|)
block|{
name|QChar
name|c
init|=
name|txt
operator|.
name|at
argument_list|(
name|pos
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
name|QLatin1Char
argument_list|(
literal|'>'
argument_list|)
condition|)
break|break;
block|}
block|}
block|}
end_function
begin_comment
comment|// parses an entity after "&", and returns it
end_comment
begin_function
DECL|function|parseEntity
name|QString
name|QTextHtmlParser
operator|::
name|parseEntity
parameter_list|()
block|{
name|int
name|recover
init|=
name|pos
decl_stmt|;
name|QString
name|entity
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|len
condition|)
block|{
name|QChar
name|c
init|=
name|txt
operator|.
name|at
argument_list|(
name|pos
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|isSpace
argument_list|()
operator|||
name|pos
operator|-
name|recover
operator|>
literal|9
condition|)
block|{
goto|goto
name|error
goto|;
block|}
if|if
condition|(
name|c
operator|==
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
condition|)
break|break;
name|entity
operator|+=
name|c
expr_stmt|;
block|}
block|{
name|QChar
name|resolved
init|=
name|resolveEntity
argument_list|(
name|entity
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|resolved
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QString
argument_list|(
name|resolved
argument_list|)
return|;
block|}
if|if
condition|(
name|entity
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|&&
name|entity
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'#'
argument_list|)
condition|)
block|{
name|entity
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// removing leading #
name|int
name|base
init|=
literal|10
decl_stmt|;
name|bool
name|ok
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|entity
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toLower
argument_list|()
operator|==
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
condition|)
block|{
comment|// hex entity?
name|entity
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|base
operator|=
literal|16
expr_stmt|;
block|}
name|uint
name|uc
init|=
name|entity
operator|.
name|toUInt
argument_list|(
operator|&
name|ok
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
if|if
condition|(
name|uc
operator|>=
literal|0x80
operator|&&
name|uc
operator|<
literal|0x80
operator|+
operator|(
sizeof|sizeof
argument_list|(
name|windowsLatin1ExtendedCharacters
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|windowsLatin1ExtendedCharacters
index|[
literal|0
index|]
argument_list|)
operator|)
condition|)
name|uc
operator|=
name|windowsLatin1ExtendedCharacters
index|[
name|uc
operator|-
literal|0x80
index|]
expr_stmt|;
name|QString
name|str
decl_stmt|;
if|if
condition|(
name|uc
operator|>
literal|0xffff
condition|)
block|{
comment|// surrogate pair
name|uc
operator|-=
literal|0x10000
expr_stmt|;
name|ushort
name|high
init|=
name|uc
operator|/
literal|0x400
operator|+
literal|0xd800
decl_stmt|;
name|ushort
name|low
init|=
name|uc
operator|%
literal|0x400
operator|+
literal|0xdc00
decl_stmt|;
name|str
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
name|high
argument_list|)
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
name|low
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|str
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
name|uc
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|str
return|;
block|}
block|}
name|error
label|:
name|pos
operator|=
name|recover
expr_stmt|;
return|return
name|QLatin1String
argument_list|(
literal|"&"
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// parses one word, possibly quoted, and returns it
end_comment
begin_function
DECL|function|parseWord
name|QString
name|QTextHtmlParser
operator|::
name|parseWord
parameter_list|()
block|{
name|QString
name|word
decl_stmt|;
if|if
condition|(
name|hasPrefix
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\"'
argument_list|)
argument_list|)
condition|)
block|{
comment|// double quotes
operator|++
name|pos
expr_stmt|;
while|while
condition|(
name|pos
operator|<
name|len
condition|)
block|{
name|QChar
name|c
init|=
name|txt
operator|.
name|at
argument_list|(
name|pos
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
name|QLatin1Char
argument_list|(
literal|'\"'
argument_list|)
condition|)
break|break;
elseif|else
if|if
condition|(
name|c
operator|==
name|QLatin1Char
argument_list|(
literal|'&'
argument_list|)
condition|)
name|word
operator|+=
name|parseEntity
argument_list|()
expr_stmt|;
else|else
name|word
operator|+=
name|c
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|hasPrefix
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
argument_list|)
condition|)
block|{
comment|// single quotes
operator|++
name|pos
expr_stmt|;
while|while
condition|(
name|pos
operator|<
name|len
condition|)
block|{
name|QChar
name|c
init|=
name|txt
operator|.
name|at
argument_list|(
name|pos
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
condition|)
break|break;
else|else
name|word
operator|+=
name|c
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// normal text
while|while
condition|(
name|pos
operator|<
name|len
condition|)
block|{
name|QChar
name|c
init|=
name|txt
operator|.
name|at
argument_list|(
name|pos
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
name|QLatin1Char
argument_list|(
literal|'>'
argument_list|)
operator|||
operator|(
name|c
operator|==
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|&&
name|hasPrefix
argument_list|(
name|QLatin1Char
argument_list|(
literal|'>'
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|)
operator|||
name|c
operator|==
name|QLatin1Char
argument_list|(
literal|'<'
argument_list|)
operator|||
name|c
operator|==
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
operator|||
name|c
operator|.
name|isSpace
argument_list|()
condition|)
block|{
operator|--
name|pos
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|c
operator|==
name|QLatin1Char
argument_list|(
literal|'&'
argument_list|)
condition|)
name|word
operator|+=
name|parseEntity
argument_list|()
expr_stmt|;
else|else
name|word
operator|+=
name|c
expr_stmt|;
block|}
block|}
return|return
name|word
return|;
block|}
end_function
begin_comment
comment|// gives the new node the right parent
end_comment
begin_function
DECL|function|resolveParent
name|QTextHtmlParserNode
modifier|*
name|QTextHtmlParser
operator|::
name|resolveParent
parameter_list|()
block|{
name|QTextHtmlParserNode
modifier|*
name|node
init|=
operator|&
name|nodes
operator|.
name|last
argument_list|()
decl_stmt|;
name|int
name|p
init|=
name|node
operator|->
name|parent
decl_stmt|;
comment|// Excel gives us buggy HTML with just tr without surrounding table tags
comment|// or with just td tags
if|if
condition|(
name|node
operator|->
name|id
operator|==
name|Html_td
condition|)
block|{
name|int
name|n
init|=
name|p
decl_stmt|;
while|while
condition|(
name|n
operator|&&
name|at
argument_list|(
name|n
argument_list|)
operator|.
name|id
operator|!=
name|Html_tr
condition|)
name|n
operator|=
name|at
argument_list|(
name|n
argument_list|)
operator|.
name|parent
expr_stmt|;
if|if
condition|(
operator|!
name|n
condition|)
block|{
name|nodes
operator|.
name|insert
argument_list|(
name|nodes
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|,
name|QTextHtmlParserNode
argument_list|()
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|insert
argument_list|(
name|nodes
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|,
name|QTextHtmlParserNode
argument_list|()
argument_list|)
expr_stmt|;
name|QTextHtmlParserNode
modifier|*
name|table
init|=
operator|&
name|nodes
index|[
name|nodes
operator|.
name|count
argument_list|()
operator|-
literal|3
index|]
decl_stmt|;
name|table
operator|->
name|parent
operator|=
name|p
expr_stmt|;
name|table
operator|->
name|id
operator|=
name|Html_table
expr_stmt|;
name|table
operator|->
name|tag
operator|=
name|QLatin1String
argument_list|(
literal|"table"
argument_list|)
expr_stmt|;
name|table
operator|->
name|children
operator|.
name|append
argument_list|(
name|nodes
operator|.
name|count
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
comment|// add row as child
name|QTextHtmlParserNode
modifier|*
name|row
init|=
operator|&
name|nodes
index|[
name|nodes
operator|.
name|count
argument_list|()
operator|-
literal|2
index|]
decl_stmt|;
name|row
operator|->
name|parent
operator|=
name|nodes
operator|.
name|count
argument_list|()
operator|-
literal|3
expr_stmt|;
comment|// table as parent
name|row
operator|->
name|id
operator|=
name|Html_tr
expr_stmt|;
name|row
operator|->
name|tag
operator|=
name|QLatin1String
argument_list|(
literal|"tr"
argument_list|)
expr_stmt|;
name|p
operator|=
name|nodes
operator|.
name|count
argument_list|()
operator|-
literal|2
expr_stmt|;
name|node
operator|=
operator|&
name|nodes
operator|.
name|last
argument_list|()
expr_stmt|;
comment|// re-initialize pointer
block|}
block|}
if|if
condition|(
name|node
operator|->
name|id
operator|==
name|Html_tr
condition|)
block|{
name|int
name|n
init|=
name|p
decl_stmt|;
while|while
condition|(
name|n
operator|&&
name|at
argument_list|(
name|n
argument_list|)
operator|.
name|id
operator|!=
name|Html_table
condition|)
name|n
operator|=
name|at
argument_list|(
name|n
argument_list|)
operator|.
name|parent
expr_stmt|;
if|if
condition|(
operator|!
name|n
condition|)
block|{
name|nodes
operator|.
name|insert
argument_list|(
name|nodes
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|,
name|QTextHtmlParserNode
argument_list|()
argument_list|)
expr_stmt|;
name|QTextHtmlParserNode
modifier|*
name|table
init|=
operator|&
name|nodes
index|[
name|nodes
operator|.
name|count
argument_list|()
operator|-
literal|2
index|]
decl_stmt|;
name|table
operator|->
name|parent
operator|=
name|p
expr_stmt|;
name|table
operator|->
name|id
operator|=
name|Html_table
expr_stmt|;
name|table
operator|->
name|tag
operator|=
name|QLatin1String
argument_list|(
literal|"table"
argument_list|)
expr_stmt|;
name|p
operator|=
name|nodes
operator|.
name|count
argument_list|()
operator|-
literal|2
expr_stmt|;
name|node
operator|=
operator|&
name|nodes
operator|.
name|last
argument_list|()
expr_stmt|;
comment|// re-initialize pointer
block|}
block|}
comment|// permit invalid html by letting block elements be children
comment|// of inline elements with the exception of paragraphs:
comment|//
comment|// a new paragraph closes parent inline elements (while loop),
comment|// unless they themselves are children of a non-paragraph block
comment|// element (if statement)
comment|//
comment|// For example:
comment|//
comment|//<body><p><b>Foo<p>Bar<-- second<p> implicitly closes<b> that
comment|//                           belongs to the first<p>. The self-nesting
comment|//                           check further down prevents the second<p>
comment|//                           from nesting into the first one then.
comment|//                           so Bar is not bold.
comment|//
comment|//<body><b><p>Foo<-- Foo should be bold.
comment|//
comment|//<body><b><p>Foo<p>Bar<-- Foo and Bar should be bold.
comment|//
if|if
condition|(
name|node
operator|->
name|id
operator|==
name|Html_p
condition|)
block|{
while|while
condition|(
name|p
operator|&&
operator|!
name|at
argument_list|(
name|p
argument_list|)
operator|.
name|isBlock
argument_list|()
condition|)
name|p
operator|=
name|at
argument_list|(
name|p
argument_list|)
operator|.
name|parent
expr_stmt|;
if|if
condition|(
operator|!
name|p
operator|||
name|at
argument_list|(
name|p
argument_list|)
operator|.
name|id
operator|!=
name|Html_p
condition|)
name|p
operator|=
name|node
operator|->
name|parent
expr_stmt|;
block|}
comment|// some elements are not self nesting
if|if
condition|(
name|node
operator|->
name|id
operator|==
name|at
argument_list|(
name|p
argument_list|)
operator|.
name|id
operator|&&
name|node
operator|->
name|isNotSelfNesting
argument_list|()
condition|)
name|p
operator|=
name|at
argument_list|(
name|p
argument_list|)
operator|.
name|parent
expr_stmt|;
comment|// some elements are not allowed in certain contexts
while|while
condition|(
operator|(
name|p
operator|&&
operator|!
name|node
operator|->
name|allowedInContext
argument_list|(
name|at
argument_list|(
name|p
argument_list|)
operator|.
name|id
argument_list|)
operator|)
comment|// ### make new styles aware of empty tags
operator|||
name|at
argument_list|(
name|p
argument_list|)
operator|.
name|mayNotHaveChildren
argument_list|()
condition|)
block|{
name|p
operator|=
name|at
argument_list|(
name|p
argument_list|)
operator|.
name|parent
expr_stmt|;
block|}
name|node
operator|->
name|parent
operator|=
name|p
expr_stmt|;
comment|// makes it easier to traverse the tree, later
name|nodes
index|[
name|p
index|]
operator|.
name|children
operator|.
name|append
argument_list|(
name|nodes
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
end_function
begin_comment
comment|// sets all properties on the new node
end_comment
begin_function
DECL|function|resolveNode
name|void
name|QTextHtmlParser
operator|::
name|resolveNode
parameter_list|()
block|{
name|QTextHtmlParserNode
modifier|*
name|node
init|=
operator|&
name|nodes
operator|.
name|last
argument_list|()
decl_stmt|;
specifier|const
name|QTextHtmlParserNode
modifier|*
name|parent
init|=
operator|&
name|nodes
operator|.
name|at
argument_list|(
name|node
operator|->
name|parent
argument_list|)
decl_stmt|;
name|node
operator|->
name|initializeProperties
argument_list|(
name|parent
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isNestedList
name|bool
name|QTextHtmlParserNode
operator|::
name|isNestedList
parameter_list|(
specifier|const
name|QTextHtmlParser
modifier|*
name|parser
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|isListStart
argument_list|()
condition|)
return|return
literal|false
return|;
name|int
name|p
init|=
name|parent
decl_stmt|;
while|while
condition|(
name|p
condition|)
block|{
if|if
condition|(
name|parser
operator|->
name|at
argument_list|(
name|p
argument_list|)
operator|.
name|isListStart
argument_list|()
condition|)
return|return
literal|true
return|;
name|p
operator|=
name|parser
operator|->
name|at
argument_list|(
name|p
argument_list|)
operator|.
name|parent
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|initializeProperties
name|void
name|QTextHtmlParserNode
operator|::
name|initializeProperties
parameter_list|(
specifier|const
name|QTextHtmlParserNode
modifier|*
name|parent
parameter_list|,
specifier|const
name|QTextHtmlParser
modifier|*
name|parser
parameter_list|)
block|{
comment|// inherit properties from parent element
name|charFormat
operator|=
name|parent
operator|->
name|charFormat
expr_stmt|;
if|if
condition|(
name|id
operator|==
name|Html_html
condition|)
name|blockFormat
operator|.
name|setLayoutDirection
argument_list|(
name|Qt
operator|::
name|LeftToRight
argument_list|)
expr_stmt|;
comment|// HTML default
elseif|else
if|if
condition|(
name|parent
operator|->
name|blockFormat
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|LayoutDirection
argument_list|)
condition|)
name|blockFormat
operator|.
name|setLayoutDirection
argument_list|(
name|parent
operator|->
name|blockFormat
operator|.
name|layoutDirection
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|->
name|displayMode
operator|==
name|QTextHtmlElement
operator|::
name|DisplayNone
condition|)
name|displayMode
operator|=
name|QTextHtmlElement
operator|::
name|DisplayNone
expr_stmt|;
if|if
condition|(
name|parent
operator|->
name|id
operator|!=
name|Html_table
operator|||
name|id
operator|==
name|Html_caption
condition|)
block|{
if|if
condition|(
name|parent
operator|->
name|blockFormat
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BlockAlignment
argument_list|)
condition|)
name|blockFormat
operator|.
name|setAlignment
argument_list|(
name|parent
operator|->
name|blockFormat
operator|.
name|alignment
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|blockFormat
operator|.
name|clearProperty
argument_list|(
name|QTextFormat
operator|::
name|BlockAlignment
argument_list|)
expr_stmt|;
block|}
comment|// we don't paint per-row background colors, yet. so as an
comment|// exception inherit the background color here
comment|// we also inherit the background between inline elements
if|if
condition|(
operator|(
name|parent
operator|->
name|id
operator|!=
name|Html_tr
operator|||
operator|!
name|isTableCell
argument_list|()
operator|)
operator|&&
operator|(
name|displayMode
operator|!=
name|QTextHtmlElement
operator|::
name|DisplayInline
operator|||
name|parent
operator|->
name|displayMode
operator|!=
name|QTextHtmlElement
operator|::
name|DisplayInline
operator|)
condition|)
block|{
name|charFormat
operator|.
name|clearProperty
argument_list|(
name|QTextFormat
operator|::
name|BackgroundBrush
argument_list|)
expr_stmt|;
block|}
name|listStyle
operator|=
name|parent
operator|->
name|listStyle
expr_stmt|;
comment|// makes no sense to inherit that property, a named anchor is a single point
comment|// in the document, which is set by the DocumentFragment
name|charFormat
operator|.
name|clearProperty
argument_list|(
name|QTextFormat
operator|::
name|AnchorName
argument_list|)
expr_stmt|;
name|wsm
operator|=
name|parent
operator|->
name|wsm
expr_stmt|;
comment|// initialize remaining properties
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginLeft
index|]
operator|=
literal|0
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginRight
index|]
operator|=
literal|0
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginTop
index|]
operator|=
literal|0
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginBottom
index|]
operator|=
literal|0
expr_stmt|;
name|cssFloat
operator|=
name|QTextFrameFormat
operator|::
name|InFlow
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
name|padding
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
comment|// set element specific attributes
switch|switch
condition|(
name|id
condition|)
block|{
case|case
name|Html_a
case|:
name|charFormat
operator|.
name|setAnchor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|count
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
block|{
specifier|const
name|QString
name|key
init|=
name|attributes
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"href"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
operator|&&
operator|!
name|attributes
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hasHref
operator|=
literal|true
expr_stmt|;
name|charFormat
operator|.
name|setUnderlineStyle
argument_list|(
name|QTextCharFormat
operator|::
name|SingleUnderline
argument_list|)
expr_stmt|;
name|charFormat
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
comment|// ### Qt5: QApplication::palette().link());
block|}
block|}
break|break;
case|case
name|Html_em
case|:
case|case
name|Html_i
case|:
case|case
name|Html_cite
case|:
case|case
name|Html_address
case|:
case|case
name|Html_var
case|:
case|case
name|Html_dfn
case|:
name|charFormat
operator|.
name|setFontItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|Html_big
case|:
name|charFormat
operator|.
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|FontSizeAdjustment
argument_list|,
name|int
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Html_small
case|:
name|charFormat
operator|.
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|FontSizeAdjustment
argument_list|,
name|int
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Html_strong
case|:
case|case
name|Html_b
case|:
name|charFormat
operator|.
name|setFontWeight
argument_list|(
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
break|break;
case|case
name|Html_h1
case|:
name|charFormat
operator|.
name|setFontWeight
argument_list|(
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|charFormat
operator|.
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|FontSizeAdjustment
argument_list|,
name|int
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginTop
index|]
operator|=
literal|18
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginBottom
index|]
operator|=
literal|12
expr_stmt|;
break|break;
case|case
name|Html_h2
case|:
name|charFormat
operator|.
name|setFontWeight
argument_list|(
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|charFormat
operator|.
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|FontSizeAdjustment
argument_list|,
name|int
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginTop
index|]
operator|=
literal|16
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginBottom
index|]
operator|=
literal|12
expr_stmt|;
break|break;
case|case
name|Html_h3
case|:
name|charFormat
operator|.
name|setFontWeight
argument_list|(
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|charFormat
operator|.
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|FontSizeAdjustment
argument_list|,
name|int
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginTop
index|]
operator|=
literal|14
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginBottom
index|]
operator|=
literal|12
expr_stmt|;
break|break;
case|case
name|Html_h4
case|:
name|charFormat
operator|.
name|setFontWeight
argument_list|(
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|charFormat
operator|.
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|FontSizeAdjustment
argument_list|,
name|int
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginTop
index|]
operator|=
literal|12
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginBottom
index|]
operator|=
literal|12
expr_stmt|;
break|break;
case|case
name|Html_h5
case|:
name|charFormat
operator|.
name|setFontWeight
argument_list|(
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|charFormat
operator|.
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|FontSizeAdjustment
argument_list|,
name|int
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginTop
index|]
operator|=
literal|12
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginBottom
index|]
operator|=
literal|4
expr_stmt|;
break|break;
case|case
name|Html_p
case|:
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginTop
index|]
operator|=
literal|12
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginBottom
index|]
operator|=
literal|12
expr_stmt|;
break|break;
case|case
name|Html_center
case|:
name|blockFormat
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignCenter
argument_list|)
expr_stmt|;
break|break;
case|case
name|Html_ul
case|:
name|listStyle
operator|=
name|QTextListFormat
operator|::
name|ListDisc
expr_stmt|;
comment|// nested lists don't have margins, except for the toplevel one
if|if
condition|(
operator|!
name|isNestedList
argument_list|(
name|parser
argument_list|)
condition|)
block|{
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginTop
index|]
operator|=
literal|12
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginBottom
index|]
operator|=
literal|12
expr_stmt|;
block|}
comment|// no left margin as we use indenting instead
break|break;
case|case
name|Html_ol
case|:
name|listStyle
operator|=
name|QTextListFormat
operator|::
name|ListDecimal
expr_stmt|;
comment|// nested lists don't have margins, except for the toplevel one
if|if
condition|(
operator|!
name|isNestedList
argument_list|(
name|parser
argument_list|)
condition|)
block|{
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginTop
index|]
operator|=
literal|12
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginBottom
index|]
operator|=
literal|12
expr_stmt|;
block|}
comment|// no left margin as we use indenting instead
break|break;
case|case
name|Html_code
case|:
case|case
name|Html_tt
case|:
case|case
name|Html_kbd
case|:
case|case
name|Html_samp
case|:
name|charFormat
operator|.
name|setFontFamily
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Courier New,courier"
argument_list|)
argument_list|)
expr_stmt|;
comment|//<tt> uses a fixed font, so set the property
name|charFormat
operator|.
name|setFontFixedPitch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|Html_br
case|:
name|text
operator|=
name|QChar
argument_list|(
name|QChar
operator|::
name|LineSeparator
argument_list|)
expr_stmt|;
name|wsm
operator|=
name|QTextHtmlParserNode
operator|::
name|WhiteSpacePre
expr_stmt|;
break|break;
comment|// ##### sub / sup
case|case
name|Html_pre
case|:
name|charFormat
operator|.
name|setFontFamily
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Courier New,courier"
argument_list|)
argument_list|)
expr_stmt|;
name|wsm
operator|=
name|WhiteSpacePre
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginTop
index|]
operator|=
literal|12
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginBottom
index|]
operator|=
literal|12
expr_stmt|;
comment|//<pre> uses a fixed font
name|charFormat
operator|.
name|setFontFixedPitch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|Html_blockquote
case|:
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginTop
index|]
operator|=
literal|12
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginBottom
index|]
operator|=
literal|12
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginLeft
index|]
operator|=
literal|40
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginRight
index|]
operator|=
literal|40
expr_stmt|;
break|break;
case|case
name|Html_dl
case|:
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginTop
index|]
operator|=
literal|8
expr_stmt|;
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginBottom
index|]
operator|=
literal|8
expr_stmt|;
break|break;
case|case
name|Html_dd
case|:
name|margin
index|[
name|QTextHtmlParser
operator|::
name|MarginLeft
index|]
operator|=
literal|30
expr_stmt|;
break|break;
case|case
name|Html_u
case|:
name|charFormat
operator|.
name|setUnderlineStyle
argument_list|(
name|QTextCharFormat
operator|::
name|SingleUnderline
argument_list|)
expr_stmt|;
break|break;
case|case
name|Html_s
case|:
name|charFormat
operator|.
name|setFontStrikeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|Html_nobr
case|:
name|wsm
operator|=
name|WhiteSpaceNoWrap
expr_stmt|;
break|break;
case|case
name|Html_th
case|:
name|charFormat
operator|.
name|setFontWeight
argument_list|(
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|blockFormat
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignCenter
argument_list|)
expr_stmt|;
break|break;
case|case
name|Html_td
case|:
name|blockFormat
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignLeft
argument_list|)
expr_stmt|;
break|break;
case|case
name|Html_sub
case|:
name|charFormat
operator|.
name|setVerticalAlignment
argument_list|(
name|QTextCharFormat
operator|::
name|AlignSubScript
argument_list|)
expr_stmt|;
break|break;
case|case
name|Html_sup
case|:
name|charFormat
operator|.
name|setVerticalAlignment
argument_list|(
name|QTextCharFormat
operator|::
name|AlignSuperScript
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CSSPARSER
end_ifndef
begin_function
DECL|function|setListStyle
name|void
name|QTextHtmlParserNode
operator|::
name|setListStyle
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|QCss
operator|::
name|Value
argument_list|>
modifier|&
name|cssValues
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cssValues
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|cssValues
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
operator|==
name|QCss
operator|::
name|Value
operator|::
name|KnownIdentifier
condition|)
block|{
switch|switch
condition|(
cast|static_cast
argument_list|<
name|QCss
operator|::
name|KnownValue
argument_list|>
argument_list|(
name|cssValues
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|variant
operator|.
name|toInt
argument_list|()
argument_list|)
condition|)
block|{
case|case
name|QCss
operator|::
name|Value_Disc
case|:
name|hasOwnListStyle
operator|=
literal|true
expr_stmt|;
name|listStyle
operator|=
name|QTextListFormat
operator|::
name|ListDisc
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_Square
case|:
name|hasOwnListStyle
operator|=
literal|true
expr_stmt|;
name|listStyle
operator|=
name|QTextListFormat
operator|::
name|ListSquare
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_Circle
case|:
name|hasOwnListStyle
operator|=
literal|true
expr_stmt|;
name|listStyle
operator|=
name|QTextListFormat
operator|::
name|ListCircle
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_Decimal
case|:
name|hasOwnListStyle
operator|=
literal|true
expr_stmt|;
name|listStyle
operator|=
name|QTextListFormat
operator|::
name|ListDecimal
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_LowerAlpha
case|:
name|hasOwnListStyle
operator|=
literal|true
expr_stmt|;
name|listStyle
operator|=
name|QTextListFormat
operator|::
name|ListLowerAlpha
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_UpperAlpha
case|:
name|hasOwnListStyle
operator|=
literal|true
expr_stmt|;
name|listStyle
operator|=
name|QTextListFormat
operator|::
name|ListUpperAlpha
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_LowerRoman
case|:
name|hasOwnListStyle
operator|=
literal|true
expr_stmt|;
name|listStyle
operator|=
name|QTextListFormat
operator|::
name|ListLowerRoman
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_UpperRoman
case|:
name|hasOwnListStyle
operator|=
literal|true
expr_stmt|;
name|listStyle
operator|=
name|QTextListFormat
operator|::
name|ListUpperRoman
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
comment|// allow individual list items to override the style
if|if
condition|(
name|id
operator|==
name|Html_li
operator|&&
name|hasOwnListStyle
condition|)
name|blockFormat
operator|.
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|ListStyle
argument_list|,
name|listStyle
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|applyCssDeclarations
name|void
name|QTextHtmlParserNode
operator|::
name|applyCssDeclarations
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|QCss
operator|::
name|Declaration
argument_list|>
modifier|&
name|declarations
parameter_list|,
specifier|const
name|QTextDocument
modifier|*
name|resourceProvider
parameter_list|)
block|{
name|QCss
operator|::
name|ValueExtractor
name|extractor
argument_list|(
name|declarations
argument_list|)
decl_stmt|;
name|extractor
operator|.
name|extractBox
argument_list|(
name|margin
argument_list|,
name|padding
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|declarations
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QCss
operator|::
name|Declaration
modifier|&
name|decl
init|=
name|declarations
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|QCss
operator|::
name|KnownValue
name|identifier
init|=
name|QCss
operator|::
name|UnknownValue
decl_stmt|;
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|first
argument_list|()
operator|.
name|type
operator|==
name|QCss
operator|::
name|Value
operator|::
name|KnownIdentifier
condition|)
name|identifier
operator|=
cast|static_cast
argument_list|<
name|QCss
operator|::
name|KnownValue
argument_list|>
argument_list|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|first
argument_list|()
operator|.
name|variant
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|decl
operator|.
name|d
operator|->
name|propertyId
condition|)
block|{
case|case
name|QCss
operator|::
name|BorderColor
case|:
name|borderBrush
operator|=
name|QBrush
argument_list|(
name|decl
operator|.
name|colorValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|BorderStyles
case|:
if|if
condition|(
name|decl
operator|.
name|styleValue
argument_list|()
operator|!=
name|QCss
operator|::
name|BorderStyle_Unknown
operator|&&
name|decl
operator|.
name|styleValue
argument_list|()
operator|!=
name|QCss
operator|::
name|BorderStyle_Native
condition|)
name|borderStyle
operator|=
cast|static_cast
argument_list|<
name|QTextFrameFormat
operator|::
name|BorderStyle
argument_list|>
argument_list|(
name|decl
operator|.
name|styleValue
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|BorderWidth
case|:
name|tableBorder
operator|=
name|extractor
operator|.
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Color
case|:
name|charFormat
operator|.
name|setForeground
argument_list|(
name|decl
operator|.
name|colorValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Float
case|:
name|cssFloat
operator|=
name|QTextFrameFormat
operator|::
name|InFlow
expr_stmt|;
switch|switch
condition|(
name|identifier
condition|)
block|{
case|case
name|QCss
operator|::
name|Value_Left
case|:
name|cssFloat
operator|=
name|QTextFrameFormat
operator|::
name|FloatLeft
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_Right
case|:
name|cssFloat
operator|=
name|QTextFrameFormat
operator|::
name|FloatRight
expr_stmt|;
break|break;
default|default:
break|break;
block|}
break|break;
case|case
name|QCss
operator|::
name|QtBlockIndent
case|:
name|blockFormat
operator|.
name|setIndent
argument_list|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|first
argument_list|()
operator|.
name|variant
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|LineHeight
case|:
block|{
name|qreal
name|lineHeight
decl_stmt|;
if|if
condition|(
name|decl
operator|.
name|realValue
argument_list|(
operator|&
name|lineHeight
argument_list|,
literal|"px"
argument_list|)
condition|)
block|{
name|blockFormat
operator|.
name|setLineHeight
argument_list|(
name|lineHeight
argument_list|,
name|QTextBlockFormat
operator|::
name|FixedHeight
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bool
name|ok
decl_stmt|;
name|QString
name|value
init|=
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|first
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|lineHeight
operator|=
name|value
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
condition|)
name|blockFormat
operator|.
name|setLineHeight
argument_list|(
name|lineHeight
argument_list|,
name|QTextBlockFormat
operator|::
name|ProportionalHeight
argument_list|)
expr_stmt|;
else|else
name|blockFormat
operator|.
name|setLineHeight
argument_list|(
literal|0
argument_list|,
name|QTextBlockFormat
operator|::
name|SingleHeight
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QCss
operator|::
name|TextIndent
case|:
block|{
name|qreal
name|indent
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|decl
operator|.
name|realValue
argument_list|(
operator|&
name|indent
argument_list|,
literal|"px"
argument_list|)
condition|)
name|blockFormat
operator|.
name|setTextIndent
argument_list|(
name|indent
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QCss
operator|::
name|QtListIndent
case|:
if|if
condition|(
name|decl
operator|.
name|intValue
argument_list|(
operator|&
name|cssListIndent
argument_list|)
condition|)
name|hasCssListIndent
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|QtParagraphType
case|:
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|first
argument_list|()
operator|.
name|variant
operator|.
name|toString
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"empty"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
name|isEmptyParagraph
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|QtTableType
case|:
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|first
argument_list|()
operator|.
name|variant
operator|.
name|toString
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"frame"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
name|isTextFrame
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|first
argument_list|()
operator|.
name|variant
operator|.
name|toString
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"root"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
block|{
name|isTextFrame
operator|=
literal|true
expr_stmt|;
name|isRootFrame
operator|=
literal|true
expr_stmt|;
block|}
break|break;
case|case
name|QCss
operator|::
name|QtUserState
case|:
name|userState
operator|=
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|first
argument_list|()
operator|.
name|variant
operator|.
name|toInt
argument_list|()
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Whitespace
case|:
switch|switch
condition|(
name|identifier
condition|)
block|{
case|case
name|QCss
operator|::
name|Value_Normal
case|:
name|wsm
operator|=
name|QTextHtmlParserNode
operator|::
name|WhiteSpaceNormal
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_Pre
case|:
name|wsm
operator|=
name|QTextHtmlParserNode
operator|::
name|WhiteSpacePre
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_NoWrap
case|:
name|wsm
operator|=
name|QTextHtmlParserNode
operator|::
name|WhiteSpaceNoWrap
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_PreWrap
case|:
name|wsm
operator|=
name|QTextHtmlParserNode
operator|::
name|WhiteSpacePreWrap
expr_stmt|;
break|break;
default|default:
break|break;
block|}
break|break;
case|case
name|QCss
operator|::
name|VerticalAlignment
case|:
switch|switch
condition|(
name|identifier
condition|)
block|{
case|case
name|QCss
operator|::
name|Value_Sub
case|:
name|charFormat
operator|.
name|setVerticalAlignment
argument_list|(
name|QTextCharFormat
operator|::
name|AlignSubScript
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_Super
case|:
name|charFormat
operator|.
name|setVerticalAlignment
argument_list|(
name|QTextCharFormat
operator|::
name|AlignSuperScript
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_Middle
case|:
name|charFormat
operator|.
name|setVerticalAlignment
argument_list|(
name|QTextCharFormat
operator|::
name|AlignMiddle
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_Top
case|:
name|charFormat
operator|.
name|setVerticalAlignment
argument_list|(
name|QTextCharFormat
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_Bottom
case|:
name|charFormat
operator|.
name|setVerticalAlignment
argument_list|(
name|QTextCharFormat
operator|::
name|AlignBottom
argument_list|)
expr_stmt|;
break|break;
default|default:
name|charFormat
operator|.
name|setVerticalAlignment
argument_list|(
name|QTextCharFormat
operator|::
name|AlignNormal
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
case|case
name|QCss
operator|::
name|PageBreakBefore
case|:
switch|switch
condition|(
name|identifier
condition|)
block|{
case|case
name|QCss
operator|::
name|Value_Always
case|:
name|blockFormat
operator|.
name|setPageBreakPolicy
argument_list|(
name|blockFormat
operator|.
name|pageBreakPolicy
argument_list|()
operator||
name|QTextFormat
operator|::
name|PageBreak_AlwaysBefore
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_Auto
case|:
name|blockFormat
operator|.
name|setPageBreakPolicy
argument_list|(
name|blockFormat
operator|.
name|pageBreakPolicy
argument_list|()
operator|&
operator|~
name|QTextFormat
operator|::
name|PageBreak_AlwaysBefore
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
break|break;
case|case
name|QCss
operator|::
name|PageBreakAfter
case|:
switch|switch
condition|(
name|identifier
condition|)
block|{
case|case
name|QCss
operator|::
name|Value_Always
case|:
name|blockFormat
operator|.
name|setPageBreakPolicy
argument_list|(
name|blockFormat
operator|.
name|pageBreakPolicy
argument_list|()
operator||
name|QTextFormat
operator|::
name|PageBreak_AlwaysAfter
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_Auto
case|:
name|blockFormat
operator|.
name|setPageBreakPolicy
argument_list|(
name|blockFormat
operator|.
name|pageBreakPolicy
argument_list|()
operator|&
operator|~
name|QTextFormat
operator|::
name|PageBreak_AlwaysAfter
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
break|break;
case|case
name|QCss
operator|::
name|TextUnderlineStyle
case|:
switch|switch
condition|(
name|identifier
condition|)
block|{
case|case
name|QCss
operator|::
name|Value_None
case|:
name|charFormat
operator|.
name|setUnderlineStyle
argument_list|(
name|QTextCharFormat
operator|::
name|NoUnderline
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_Solid
case|:
name|charFormat
operator|.
name|setUnderlineStyle
argument_list|(
name|QTextCharFormat
operator|::
name|SingleUnderline
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_Dashed
case|:
name|charFormat
operator|.
name|setUnderlineStyle
argument_list|(
name|QTextCharFormat
operator|::
name|DashUnderline
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_Dotted
case|:
name|charFormat
operator|.
name|setUnderlineStyle
argument_list|(
name|QTextCharFormat
operator|::
name|DotLine
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_DotDash
case|:
name|charFormat
operator|.
name|setUnderlineStyle
argument_list|(
name|QTextCharFormat
operator|::
name|DashDotLine
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_DotDotDash
case|:
name|charFormat
operator|.
name|setUnderlineStyle
argument_list|(
name|QTextCharFormat
operator|::
name|DashDotDotLine
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|Value_Wave
case|:
name|charFormat
operator|.
name|setUnderlineStyle
argument_list|(
name|QTextCharFormat
operator|::
name|WaveUnderline
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
break|break;
case|case
name|QCss
operator|::
name|ListStyleType
case|:
case|case
name|QCss
operator|::
name|ListStyle
case|:
name|setListStyle
argument_list|(
name|decl
operator|.
name|d
operator|->
name|values
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|QtListNumberPrefix
case|:
name|textListNumberPrefix
operator|=
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|first
argument_list|()
operator|.
name|variant
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|QCss
operator|::
name|QtListNumberSuffix
case|:
name|textListNumberSuffix
operator|=
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|first
argument_list|()
operator|.
name|variant
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
name|QFont
name|f
decl_stmt|;
name|int
name|adjustment
init|=
operator|-
literal|255
decl_stmt|;
name|extractor
operator|.
name|extractFont
argument_list|(
operator|&
name|f
argument_list|,
operator|&
name|adjustment
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|resolve
argument_list|()
operator|&
name|QFont
operator|::
name|SizeResolved
condition|)
block|{
if|if
condition|(
name|f
operator|.
name|pointSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|charFormat
operator|.
name|setFontPointSize
argument_list|(
name|f
operator|.
name|pointSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|f
operator|.
name|pixelSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|charFormat
operator|.
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|FontPixelSize
argument_list|,
name|f
operator|.
name|pixelSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|f
operator|.
name|resolve
argument_list|()
operator|&
name|QFont
operator|::
name|StyleResolved
condition|)
name|charFormat
operator|.
name|setFontItalic
argument_list|(
name|f
operator|.
name|style
argument_list|()
operator|!=
name|QFont
operator|::
name|StyleNormal
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|resolve
argument_list|()
operator|&
name|QFont
operator|::
name|WeightResolved
condition|)
name|charFormat
operator|.
name|setFontWeight
argument_list|(
name|f
operator|.
name|weight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|resolve
argument_list|()
operator|&
name|QFont
operator|::
name|FamilyResolved
condition|)
name|charFormat
operator|.
name|setFontFamily
argument_list|(
name|f
operator|.
name|family
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|resolve
argument_list|()
operator|&
name|QFont
operator|::
name|UnderlineResolved
condition|)
name|charFormat
operator|.
name|setUnderlineStyle
argument_list|(
name|f
operator|.
name|underline
argument_list|()
condition|?
name|QTextCharFormat
operator|::
name|SingleUnderline
else|:
name|QTextCharFormat
operator|::
name|NoUnderline
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|resolve
argument_list|()
operator|&
name|QFont
operator|::
name|OverlineResolved
condition|)
name|charFormat
operator|.
name|setFontOverline
argument_list|(
name|f
operator|.
name|overline
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|resolve
argument_list|()
operator|&
name|QFont
operator|::
name|StrikeOutResolved
condition|)
name|charFormat
operator|.
name|setFontStrikeOut
argument_list|(
name|f
operator|.
name|strikeOut
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|resolve
argument_list|()
operator|&
name|QFont
operator|::
name|CapitalizationResolved
condition|)
name|charFormat
operator|.
name|setFontCapitalization
argument_list|(
name|f
operator|.
name|capitalization
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjustment
operator|>=
operator|-
literal|1
condition|)
name|charFormat
operator|.
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|FontSizeAdjustment
argument_list|,
name|adjustment
argument_list|)
expr_stmt|;
block|{
name|Qt
operator|::
name|Alignment
name|ignoredAlignment
decl_stmt|;
name|QCss
operator|::
name|Repeat
name|ignoredRepeat
decl_stmt|;
name|QString
name|bgImage
decl_stmt|;
name|QBrush
name|bgBrush
decl_stmt|;
name|QCss
operator|::
name|Origin
name|ignoredOrigin
decl_stmt|,
name|ignoredClip
decl_stmt|;
name|QCss
operator|::
name|Attachment
name|ignoredAttachment
decl_stmt|;
name|extractor
operator|.
name|extractBackground
argument_list|(
operator|&
name|bgBrush
argument_list|,
operator|&
name|bgImage
argument_list|,
operator|&
name|ignoredRepeat
argument_list|,
operator|&
name|ignoredAlignment
argument_list|,
operator|&
name|ignoredOrigin
argument_list|,
operator|&
name|ignoredAttachment
argument_list|,
operator|&
name|ignoredClip
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bgImage
operator|.
name|isEmpty
argument_list|()
operator|&&
name|resourceProvider
condition|)
block|{
name|applyBackgroundImage
argument_list|(
name|bgImage
argument_list|,
name|resourceProvider
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bgBrush
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
block|{
name|charFormat
operator|.
name|setBackground
argument_list|(
name|bgBrush
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CSSPARSER
end_comment
begin_function
DECL|function|applyBackgroundImage
name|void
name|QTextHtmlParserNode
operator|::
name|applyBackgroundImage
parameter_list|(
specifier|const
name|QString
modifier|&
name|url
parameter_list|,
specifier|const
name|QTextDocument
modifier|*
name|resourceProvider
parameter_list|)
block|{
if|if
condition|(
operator|!
name|url
operator|.
name|isEmpty
argument_list|()
operator|&&
name|resourceProvider
condition|)
block|{
name|QVariant
name|val
init|=
name|resourceProvider
operator|->
name|resource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|thread
argument_list|()
operator|!=
name|QThread
operator|::
name|currentThread
argument_list|()
condition|)
block|{
comment|// must use images in non-GUI threads
if|if
condition|(
name|val
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Image
condition|)
block|{
name|QImage
name|image
init|=
name|qvariant_cast
argument_list|<
name|QImage
argument_list|>
argument_list|(
name|val
argument_list|)
decl_stmt|;
name|charFormat
operator|.
name|setBackground
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|ByteArray
condition|)
block|{
name|QImage
name|image
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|loadFromData
argument_list|(
name|val
operator|.
name|toByteArray
argument_list|()
argument_list|)
condition|)
block|{
name|charFormat
operator|.
name|setBackground
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|val
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Image
operator|||
name|val
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Pixmap
condition|)
block|{
name|charFormat
operator|.
name|setBackground
argument_list|(
name|qvariant_cast
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|ByteArray
condition|)
block|{
name|QPixmap
name|pm
decl_stmt|;
if|if
condition|(
name|pm
operator|.
name|loadFromData
argument_list|(
name|val
operator|.
name|toByteArray
argument_list|()
argument_list|)
condition|)
block|{
name|charFormat
operator|.
name|setBackground
argument_list|(
name|pm
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|url
operator|.
name|isEmpty
argument_list|()
condition|)
name|charFormat
operator|.
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|BackgroundImageUrl
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasOnlyWhitespace
name|bool
name|QTextHtmlParserNode
operator|::
name|hasOnlyWhitespace
parameter_list|()
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|text
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
operator|!
name|text
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isSpace
argument_list|()
operator|||
name|text
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|QChar
operator|::
name|LineSeparator
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setIntAttribute
specifier|static
name|bool
name|setIntAttribute
parameter_list|(
name|int
modifier|*
name|destination
parameter_list|,
specifier|const
name|QString
modifier|&
name|value
parameter_list|)
block|{
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|int
name|val
init|=
name|value
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
operator|*
name|destination
operator|=
name|val
expr_stmt|;
return|return
name|ok
return|;
block|}
end_function
begin_function
DECL|function|setFloatAttribute
specifier|static
name|bool
name|setFloatAttribute
parameter_list|(
name|qreal
modifier|*
name|destination
parameter_list|,
specifier|const
name|QString
modifier|&
name|value
parameter_list|)
block|{
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|qreal
name|val
init|=
name|value
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
operator|*
name|destination
operator|=
name|val
expr_stmt|;
return|return
name|ok
return|;
block|}
end_function
begin_function
DECL|function|setWidthAttribute
specifier|static
name|void
name|setWidthAttribute
parameter_list|(
name|QTextLength
modifier|*
name|width
parameter_list|,
name|QString
name|value
parameter_list|)
block|{
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|qreal
name|realVal
init|=
name|value
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
operator|*
name|width
operator|=
name|QTextLength
argument_list|(
name|QTextLength
operator|::
name|FixedLength
argument_list|,
name|realVal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|value
operator|.
name|trimmed
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
operator|&&
name|value
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'%'
argument_list|)
argument_list|)
condition|)
block|{
name|value
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|realVal
operator|=
name|value
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
condition|)
operator|*
name|width
operator|=
name|QTextLength
argument_list|(
name|QTextLength
operator|::
name|PercentageLength
argument_list|,
name|realVal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CSSPARSER
end_ifndef
begin_function
DECL|function|parseStyleAttribute
name|void
name|QTextHtmlParserNode
operator|::
name|parseStyleAttribute
parameter_list|(
specifier|const
name|QString
modifier|&
name|value
parameter_list|,
specifier|const
name|QTextDocument
modifier|*
name|resourceProvider
parameter_list|)
block|{
name|QString
name|css
init|=
name|value
decl_stmt|;
name|css
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
literal|"* {"
argument_list|)
argument_list|)
expr_stmt|;
name|css
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'}'
argument_list|)
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
name|css
argument_list|)
decl_stmt|;
name|QCss
operator|::
name|StyleSheet
name|sheet
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|sheet
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
if|if
condition|(
name|sheet
operator|.
name|styleRules
operator|.
name|count
argument_list|()
operator|!=
literal|1
condition|)
return|return;
name|applyCssDeclarations
argument_list|(
name|sheet
operator|.
name|styleRules
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|declarations
argument_list|,
name|resourceProvider
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|parseAttributes
name|QStringList
name|QTextHtmlParser
operator|::
name|parseAttributes
parameter_list|()
block|{
name|QStringList
name|attrs
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|len
condition|)
block|{
name|eatSpace
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasPrefix
argument_list|(
name|QLatin1Char
argument_list|(
literal|'>'
argument_list|)
argument_list|)
operator|||
name|hasPrefix
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
break|break;
name|QString
name|key
init|=
name|parseWord
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|QString
name|value
init|=
name|QLatin1String
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
break|break;
name|eatSpace
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasPrefix
argument_list|(
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
argument_list|)
condition|)
block|{
name|pos
operator|++
expr_stmt|;
name|eatSpace
argument_list|()
expr_stmt|;
name|value
operator|=
name|parseWord
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|attrs
operator|<<
name|key
operator|<<
name|value
expr_stmt|;
block|}
return|return
name|attrs
return|;
block|}
end_function
begin_function
DECL|function|applyAttributes
name|void
name|QTextHtmlParser
operator|::
name|applyAttributes
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|attributes
parameter_list|)
block|{
comment|// local state variable for qt3 textedit mode
name|bool
name|seenQt3Richtext
init|=
literal|false
decl_stmt|;
name|QString
name|linkHref
decl_stmt|;
name|QString
name|linkType
decl_stmt|;
if|if
condition|(
name|attributes
operator|.
name|count
argument_list|()
operator|%
literal|2
operator|==
literal|1
condition|)
return|return;
name|QTextHtmlParserNode
modifier|*
name|node
init|=
operator|&
name|nodes
operator|.
name|last
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|count
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|QString
name|key
init|=
name|attributes
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QString
name|value
init|=
name|attributes
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|node
operator|->
name|id
condition|)
block|{
case|case
name|Html_font
case|:
comment|// the infamous font tag
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"size"
argument_list|)
operator|&&
name|value
operator|.
name|size
argument_list|()
condition|)
block|{
name|int
name|n
init|=
name|value
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|!=
name|QLatin1Char
argument_list|(
literal|'+'
argument_list|)
operator|&&
name|value
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|!=
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
condition|)
name|n
operator|-=
literal|3
expr_stmt|;
name|node
operator|->
name|charFormat
operator|.
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|FontSizeAdjustment
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"face"
argument_list|)
condition|)
block|{
name|node
operator|->
name|charFormat
operator|.
name|setFontFamily
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"color"
argument_list|)
condition|)
block|{
name|QColor
name|c
decl_stmt|;
name|c
operator|.
name|setNamedColor
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isValid
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"QTextHtmlParser::applyAttributes: Unknown color name '%s'"
argument_list|,
name|value
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|->
name|charFormat
operator|.
name|setForeground
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Html_ol
case|:
case|case
name|Html_ul
case|:
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
name|node
operator|->
name|hasOwnListStyle
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|value
operator|==
name|QLatin1String
argument_list|(
literal|"1"
argument_list|)
condition|)
block|{
name|node
operator|->
name|listStyle
operator|=
name|QTextListFormat
operator|::
name|ListDecimal
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|==
name|QLatin1String
argument_list|(
literal|"a"
argument_list|)
condition|)
block|{
name|node
operator|->
name|listStyle
operator|=
name|QTextListFormat
operator|::
name|ListLowerAlpha
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|==
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
condition|)
block|{
name|node
operator|->
name|listStyle
operator|=
name|QTextListFormat
operator|::
name|ListUpperAlpha
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|==
name|QLatin1String
argument_list|(
literal|"i"
argument_list|)
condition|)
block|{
name|node
operator|->
name|listStyle
operator|=
name|QTextListFormat
operator|::
name|ListLowerRoman
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|==
name|QLatin1String
argument_list|(
literal|"I"
argument_list|)
condition|)
block|{
name|node
operator|->
name|listStyle
operator|=
name|QTextListFormat
operator|::
name|ListUpperRoman
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|value
operator|.
name|toLower
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|==
name|QLatin1String
argument_list|(
literal|"square"
argument_list|)
condition|)
name|node
operator|->
name|listStyle
operator|=
name|QTextListFormat
operator|::
name|ListSquare
expr_stmt|;
elseif|else
if|if
condition|(
name|value
operator|==
name|QLatin1String
argument_list|(
literal|"disc"
argument_list|)
condition|)
name|node
operator|->
name|listStyle
operator|=
name|QTextListFormat
operator|::
name|ListDisc
expr_stmt|;
elseif|else
if|if
condition|(
name|value
operator|==
name|QLatin1String
argument_list|(
literal|"circle"
argument_list|)
condition|)
name|node
operator|->
name|listStyle
operator|=
name|QTextListFormat
operator|::
name|ListCircle
expr_stmt|;
block|}
block|}
break|break;
case|case
name|Html_a
case|:
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"href"
argument_list|)
condition|)
name|node
operator|->
name|charFormat
operator|.
name|setAnchorHref
argument_list|(
name|value
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
condition|)
name|node
operator|->
name|charFormat
operator|.
name|setAnchorName
argument_list|(
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|Html_img
case|:
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"src"
argument_list|)
operator|||
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"source"
argument_list|)
condition|)
block|{
name|node
operator|->
name|imageName
operator|=
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"width"
argument_list|)
condition|)
block|{
name|node
operator|->
name|imageWidth
operator|=
operator|-
literal|2
expr_stmt|;
comment|// register that there is a value for it.
name|setFloatAttribute
argument_list|(
operator|&
name|node
operator|->
name|imageWidth
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"height"
argument_list|)
condition|)
block|{
name|node
operator|->
name|imageHeight
operator|=
operator|-
literal|2
expr_stmt|;
comment|// register that there is a value for it.
name|setFloatAttribute
argument_list|(
operator|&
name|node
operator|->
name|imageHeight
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Html_tr
case|:
case|case
name|Html_body
case|:
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"bgcolor"
argument_list|)
condition|)
block|{
name|QColor
name|c
decl_stmt|;
name|c
operator|.
name|setNamedColor
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isValid
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"QTextHtmlParser::applyAttributes: Unknown color name '%s'"
argument_list|,
name|value
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|->
name|charFormat
operator|.
name|setBackground
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"background"
argument_list|)
condition|)
block|{
name|node
operator|->
name|applyBackgroundImage
argument_list|(
name|value
argument_list|,
name|resourceProvider
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Html_th
case|:
case|case
name|Html_td
case|:
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"width"
argument_list|)
condition|)
block|{
name|setWidthAttribute
argument_list|(
operator|&
name|node
operator|->
name|width
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"bgcolor"
argument_list|)
condition|)
block|{
name|QColor
name|c
decl_stmt|;
name|c
operator|.
name|setNamedColor
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isValid
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"QTextHtmlParser::applyAttributes: Unknown color name '%s'"
argument_list|,
name|value
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|->
name|charFormat
operator|.
name|setBackground
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"background"
argument_list|)
condition|)
block|{
name|node
operator|->
name|applyBackgroundImage
argument_list|(
name|value
argument_list|,
name|resourceProvider
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"rowspan"
argument_list|)
condition|)
block|{
if|if
condition|(
name|setIntAttribute
argument_list|(
operator|&
name|node
operator|->
name|tableCellRowSpan
argument_list|,
name|value
argument_list|)
condition|)
name|node
operator|->
name|tableCellRowSpan
operator|=
name|qMax
argument_list|(
literal|1
argument_list|,
name|node
operator|->
name|tableCellRowSpan
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"colspan"
argument_list|)
condition|)
block|{
if|if
condition|(
name|setIntAttribute
argument_list|(
operator|&
name|node
operator|->
name|tableCellColSpan
argument_list|,
name|value
argument_list|)
condition|)
name|node
operator|->
name|tableCellColSpan
operator|=
name|qMax
argument_list|(
literal|1
argument_list|,
name|node
operator|->
name|tableCellColSpan
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Html_table
case|:
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"border"
argument_list|)
condition|)
block|{
name|setFloatAttribute
argument_list|(
operator|&
name|node
operator|->
name|tableBorder
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"bgcolor"
argument_list|)
condition|)
block|{
name|QColor
name|c
decl_stmt|;
name|c
operator|.
name|setNamedColor
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isValid
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"QTextHtmlParser::applyAttributes: Unknown color name '%s'"
argument_list|,
name|value
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|->
name|charFormat
operator|.
name|setBackground
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"background"
argument_list|)
condition|)
block|{
name|node
operator|->
name|applyBackgroundImage
argument_list|(
name|value
argument_list|,
name|resourceProvider
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"cellspacing"
argument_list|)
condition|)
block|{
name|setFloatAttribute
argument_list|(
operator|&
name|node
operator|->
name|tableCellSpacing
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"cellpadding"
argument_list|)
condition|)
block|{
name|setFloatAttribute
argument_list|(
operator|&
name|node
operator|->
name|tableCellPadding
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"width"
argument_list|)
condition|)
block|{
name|setWidthAttribute
argument_list|(
operator|&
name|node
operator|->
name|width
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"height"
argument_list|)
condition|)
block|{
name|setWidthAttribute
argument_list|(
operator|&
name|node
operator|->
name|height
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Html_meta
case|:
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
operator|&&
name|value
operator|==
name|QLatin1String
argument_list|(
literal|"qrichtext"
argument_list|)
condition|)
block|{
name|seenQt3Richtext
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"content"
argument_list|)
operator|&&
name|value
operator|==
name|QLatin1String
argument_list|(
literal|"1"
argument_list|)
operator|&&
name|seenQt3Richtext
condition|)
block|{
name|textEditMode
operator|=
literal|true
expr_stmt|;
block|}
break|break;
case|case
name|Html_hr
case|:
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"width"
argument_list|)
condition|)
name|setWidthAttribute
argument_list|(
operator|&
name|node
operator|->
name|width
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|Html_link
case|:
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"href"
argument_list|)
condition|)
name|linkHref
operator|=
name|value
expr_stmt|;
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"type"
argument_list|)
condition|)
name|linkType
operator|=
name|value
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"style"
argument_list|)
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_CSSPARSER
name|node
operator|->
name|parseStyleAttribute
argument_list|(
name|value
argument_list|,
name|resourceProvider
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"align"
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|toLower
argument_list|()
expr_stmt|;
name|bool
name|alignmentSet
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|value
operator|==
name|QLatin1String
argument_list|(
literal|"left"
argument_list|)
condition|)
name|node
operator|->
name|blockFormat
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignAbsolute
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|value
operator|==
name|QLatin1String
argument_list|(
literal|"right"
argument_list|)
condition|)
name|node
operator|->
name|blockFormat
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
operator||
name|Qt
operator|::
name|AlignAbsolute
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|value
operator|==
name|QLatin1String
argument_list|(
literal|"center"
argument_list|)
condition|)
name|node
operator|->
name|blockFormat
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignHCenter
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|value
operator|==
name|QLatin1String
argument_list|(
literal|"justify"
argument_list|)
condition|)
name|node
operator|->
name|blockFormat
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignJustify
argument_list|)
expr_stmt|;
else|else
name|alignmentSet
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|node
operator|->
name|id
operator|==
name|Html_img
condition|)
block|{
comment|// HTML4 compat
if|if
condition|(
name|alignmentSet
condition|)
block|{
if|if
condition|(
name|node
operator|->
name|blockFormat
operator|.
name|alignment
argument_list|()
operator|&
name|Qt
operator|::
name|AlignLeft
condition|)
name|node
operator|->
name|cssFloat
operator|=
name|QTextFrameFormat
operator|::
name|FloatLeft
expr_stmt|;
elseif|else
if|if
condition|(
name|node
operator|->
name|blockFormat
operator|.
name|alignment
argument_list|()
operator|&
name|Qt
operator|::
name|AlignRight
condition|)
name|node
operator|->
name|cssFloat
operator|=
name|QTextFrameFormat
operator|::
name|FloatRight
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|==
name|QLatin1String
argument_list|(
literal|"middle"
argument_list|)
condition|)
block|{
name|node
operator|->
name|charFormat
operator|.
name|setVerticalAlignment
argument_list|(
name|QTextCharFormat
operator|::
name|AlignMiddle
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|==
name|QLatin1String
argument_list|(
literal|"top"
argument_list|)
condition|)
block|{
name|node
operator|->
name|charFormat
operator|.
name|setVerticalAlignment
argument_list|(
name|QTextCharFormat
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"valign"
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|toLower
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|==
name|QLatin1String
argument_list|(
literal|"top"
argument_list|)
condition|)
name|node
operator|->
name|charFormat
operator|.
name|setVerticalAlignment
argument_list|(
name|QTextCharFormat
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|value
operator|==
name|QLatin1String
argument_list|(
literal|"middle"
argument_list|)
condition|)
name|node
operator|->
name|charFormat
operator|.
name|setVerticalAlignment
argument_list|(
name|QTextCharFormat
operator|::
name|AlignMiddle
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|value
operator|==
name|QLatin1String
argument_list|(
literal|"bottom"
argument_list|)
condition|)
name|node
operator|->
name|charFormat
operator|.
name|setVerticalAlignment
argument_list|(
name|QTextCharFormat
operator|::
name|AlignBottom
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"dir"
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|toLower
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|==
name|QLatin1String
argument_list|(
literal|"ltr"
argument_list|)
condition|)
name|node
operator|->
name|blockFormat
operator|.
name|setLayoutDirection
argument_list|(
name|Qt
operator|::
name|LeftToRight
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|value
operator|==
name|QLatin1String
argument_list|(
literal|"rtl"
argument_list|)
condition|)
name|node
operator|->
name|blockFormat
operator|.
name|setLayoutDirection
argument_list|(
name|Qt
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"title"
argument_list|)
condition|)
block|{
name|node
operator|->
name|charFormat
operator|.
name|setToolTip
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"id"
argument_list|)
condition|)
block|{
name|node
operator|->
name|charFormat
operator|.
name|setAnchor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|node
operator|->
name|charFormat
operator|.
name|setAnchorName
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_CSSPARSER
if|if
condition|(
name|resourceProvider
operator|&&
operator|!
name|linkHref
operator|.
name|isEmpty
argument_list|()
operator|&&
name|linkType
operator|==
name|QLatin1String
argument_list|(
literal|"text/css"
argument_list|)
condition|)
name|importStyleSheet
argument_list|(
name|linkHref
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CSSPARSER
end_ifndef
begin_class
DECL|class|QTextHtmlStyleSelector
class|class
name|QTextHtmlStyleSelector
super|:
specifier|public
name|QCss
operator|::
name|StyleSelector
block|{
public|public:
DECL|function|QTextHtmlStyleSelector
specifier|inline
name|QTextHtmlStyleSelector
parameter_list|(
specifier|const
name|QTextHtmlParser
modifier|*
name|parser
parameter_list|)
member_init_list|:
name|parser
argument_list|(
name|parser
argument_list|)
block|{
name|nameCaseSensitivity
operator|=
name|Qt
operator|::
name|CaseInsensitive
expr_stmt|;
block|}
specifier|virtual
name|QStringList
name|nodeNames
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
function_decl|;
specifier|virtual
name|QString
name|attribute
parameter_list|(
name|NodePtr
name|node
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
specifier|const
function_decl|;
specifier|virtual
name|bool
name|hasAttributes
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
function_decl|;
specifier|virtual
name|bool
name|isNullNode
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
function_decl|;
specifier|virtual
name|NodePtr
name|parentNode
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
function_decl|;
specifier|virtual
name|NodePtr
name|previousSiblingNode
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
function_decl|;
specifier|virtual
name|NodePtr
name|duplicateNode
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
function_decl|;
specifier|virtual
name|void
name|freeNode
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
function_decl|;
private|private:
DECL|member|parser
specifier|const
name|QTextHtmlParser
modifier|*
name|parser
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|nodeNames
name|QStringList
name|QTextHtmlStyleSelector
operator|::
name|nodeNames
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
block|{
return|return
name|QStringList
argument_list|(
name|parser
operator|->
name|at
argument_list|(
name|node
operator|.
name|id
argument_list|)
operator|.
name|tag
operator|.
name|toLower
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CSSPARSER
end_comment
begin_function
DECL|function|findAttribute
specifier|static
specifier|inline
name|int
name|findAttribute
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|attributes
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|int
name|idx
init|=
operator|-
literal|1
decl_stmt|;
do|do
block|{
name|idx
operator|=
name|attributes
operator|.
name|indexOf
argument_list|(
name|name
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|idx
operator|!=
operator|-
literal|1
operator|&&
operator|(
name|idx
operator|%
literal|2
operator|==
literal|1
operator|)
condition|)
do|;
return|return
name|idx
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CSSPARSER
end_ifndef
begin_function
DECL|function|attribute
name|QString
name|QTextHtmlStyleSelector
operator|::
name|attribute
parameter_list|(
name|NodePtr
name|node
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
specifier|const
block|{
specifier|const
name|QStringList
modifier|&
name|attributes
init|=
name|parser
operator|->
name|at
argument_list|(
name|node
operator|.
name|id
argument_list|)
operator|.
name|attributes
decl_stmt|;
specifier|const
name|int
name|idx
init|=
name|findAttribute
argument_list|(
name|attributes
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
return|return
name|QString
argument_list|()
return|;
return|return
name|attributes
operator|.
name|at
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|hasAttributes
name|bool
name|QTextHtmlStyleSelector
operator|::
name|hasAttributes
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
block|{
specifier|const
name|QStringList
modifier|&
name|attributes
init|=
name|parser
operator|->
name|at
argument_list|(
name|node
operator|.
name|id
argument_list|)
operator|.
name|attributes
decl_stmt|;
return|return
operator|!
name|attributes
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|isNullNode
name|bool
name|QTextHtmlStyleSelector
operator|::
name|isNullNode
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
block|{
return|return
name|node
operator|.
name|id
operator|==
literal|0
return|;
block|}
end_function
begin_function
DECL|function|parentNode
name|QCss
operator|::
name|StyleSelector
operator|::
name|NodePtr
name|QTextHtmlStyleSelector
operator|::
name|parentNode
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
block|{
name|NodePtr
name|parent
decl_stmt|;
name|parent
operator|.
name|id
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|id
condition|)
block|{
name|parent
operator|.
name|id
operator|=
name|parser
operator|->
name|at
argument_list|(
name|node
operator|.
name|id
argument_list|)
operator|.
name|parent
expr_stmt|;
block|}
return|return
name|parent
return|;
block|}
end_function
begin_function
DECL|function|duplicateNode
name|QCss
operator|::
name|StyleSelector
operator|::
name|NodePtr
name|QTextHtmlStyleSelector
operator|::
name|duplicateNode
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
block|{
return|return
name|node
return|;
block|}
end_function
begin_function
DECL|function|previousSiblingNode
name|QCss
operator|::
name|StyleSelector
operator|::
name|NodePtr
name|QTextHtmlStyleSelector
operator|::
name|previousSiblingNode
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
block|{
name|NodePtr
name|sibling
decl_stmt|;
name|sibling
operator|.
name|id
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|id
condition|)
return|return
name|sibling
return|;
name|int
name|parent
init|=
name|parser
operator|->
name|at
argument_list|(
name|node
operator|.
name|id
argument_list|)
operator|.
name|parent
decl_stmt|;
if|if
condition|(
operator|!
name|parent
condition|)
return|return
name|sibling
return|;
specifier|const
name|int
name|childIdx
init|=
name|parser
operator|->
name|at
argument_list|(
name|parent
argument_list|)
operator|.
name|children
operator|.
name|indexOf
argument_list|(
name|node
operator|.
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|childIdx
operator|<=
literal|0
condition|)
return|return
name|sibling
return|;
name|sibling
operator|.
name|id
operator|=
name|parser
operator|->
name|at
argument_list|(
name|parent
argument_list|)
operator|.
name|children
operator|.
name|at
argument_list|(
name|childIdx
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|sibling
return|;
block|}
end_function
begin_function
DECL|function|freeNode
name|void
name|QTextHtmlStyleSelector
operator|::
name|freeNode
parameter_list|(
name|NodePtr
parameter_list|)
specifier|const
block|{ }
end_function
begin_function
DECL|function|resolveStyleSheetImports
name|void
name|QTextHtmlParser
operator|::
name|resolveStyleSheetImports
parameter_list|(
specifier|const
name|QCss
operator|::
name|StyleSheet
modifier|&
name|sheet
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sheet
operator|.
name|importRules
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QCss
operator|::
name|ImportRule
modifier|&
name|rule
init|=
name|sheet
operator|.
name|importRules
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|rule
operator|.
name|media
operator|.
name|isEmpty
argument_list|()
operator|||
name|rule
operator|.
name|media
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"screen"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|importStyleSheet
argument_list|(
name|rule
operator|.
name|href
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|importStyleSheet
name|void
name|QTextHtmlParser
operator|::
name|importStyleSheet
parameter_list|(
specifier|const
name|QString
modifier|&
name|href
parameter_list|)
block|{
if|if
condition|(
operator|!
name|resourceProvider
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|externalStyleSheets
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|externalStyleSheets
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|url
operator|==
name|href
condition|)
return|return;
name|QVariant
name|res
init|=
name|resourceProvider
operator|->
name|resource
argument_list|(
name|QTextDocument
operator|::
name|StyleSheetResource
argument_list|,
name|href
argument_list|)
decl_stmt|;
name|QString
name|css
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|String
condition|)
block|{
name|css
operator|=
name|res
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|res
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|ByteArray
condition|)
block|{
comment|// #### detect @charset
name|css
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|res
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|css
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
name|css
argument_list|)
decl_stmt|;
name|QCss
operator|::
name|StyleSheet
name|sheet
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|sheet
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|externalStyleSheets
operator|.
name|append
argument_list|(
name|ExternalStyleSheet
argument_list|(
name|href
argument_list|,
name|sheet
argument_list|)
argument_list|)
expr_stmt|;
name|resolveStyleSheetImports
argument_list|(
name|sheet
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|declarationsForNode
name|QVector
argument_list|<
name|QCss
operator|::
name|Declaration
argument_list|>
name|QTextHtmlParser
operator|::
name|declarationsForNode
parameter_list|(
name|int
name|node
parameter_list|)
specifier|const
block|{
name|QVector
argument_list|<
name|QCss
operator|::
name|Declaration
argument_list|>
name|decls
decl_stmt|;
name|QTextHtmlStyleSelector
name|selector
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|selector
operator|.
name|styleSheets
operator|.
name|resize
argument_list|(
operator|(
name|resourceProvider
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
name|externalStyleSheets
operator|.
name|count
argument_list|()
operator|+
name|inlineStyleSheets
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|resourceProvider
condition|)
name|selector
operator|.
name|styleSheets
index|[
name|idx
operator|++
index|]
operator|=
name|resourceProvider
operator|->
name|docHandle
argument_list|()
operator|->
name|parsedDefaultStyleSheet
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|externalStyleSheets
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
operator|,
operator|++
name|idx
control|)
name|selector
operator|.
name|styleSheets
index|[
name|idx
index|]
operator|=
name|externalStyleSheets
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|sheet
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inlineStyleSheets
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
operator|,
operator|++
name|idx
control|)
name|selector
operator|.
name|styleSheets
index|[
name|idx
index|]
operator|=
name|inlineStyleSheets
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|selector
operator|.
name|medium
operator|=
name|QLatin1String
argument_list|(
literal|"screen"
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|StyleSelector
operator|::
name|NodePtr
name|n
decl_stmt|;
name|n
operator|.
name|id
operator|=
name|node
expr_stmt|;
specifier|const
name|char
modifier|*
name|extraPseudo
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|at
argument_list|(
name|node
argument_list|)
operator|.
name|id
operator|==
name|Html_a
operator|&&
name|nodes
operator|.
name|at
argument_list|(
name|node
argument_list|)
operator|.
name|hasHref
condition|)
name|extraPseudo
operator|=
literal|"link"
expr_stmt|;
name|decls
operator|=
name|selector
operator|.
name|declarationsForNode
argument_list|(
name|n
argument_list|,
name|extraPseudo
argument_list|)
expr_stmt|;
return|return
name|decls
return|;
block|}
end_function
begin_function
DECL|function|nodeIsChildOf
name|bool
name|QTextHtmlParser
operator|::
name|nodeIsChildOf
parameter_list|(
name|int
name|i
parameter_list|,
name|QTextHTMLElements
name|id
parameter_list|)
specifier|const
block|{
while|while
condition|(
name|i
condition|)
block|{
if|if
condition|(
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|id
operator|==
name|id
condition|)
return|return
literal|true
return|;
name|i
operator|=
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|parent
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CSSPARSER
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TEXTHTMLPARSER
end_comment
end_unit
