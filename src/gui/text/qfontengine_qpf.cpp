begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfontengine_qpf_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qpaintengine_raster_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qlibraryinfo.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qfile.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdir.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qbuffer.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_FREETYPE
argument_list|)
end_if
begin_include
include|#
directive|include
file|"private/qfontengine_ft_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"private/qcore_unix_p.h"
end_include
begin_comment
comment|// overrides QT_OPEN
end_comment
begin_comment
comment|// for mmap
end_comment
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_include
include|#
directive|include
file|<sys/mman.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_QWS_QPF2
include|#
directive|include
file|"qpfutil.cpp"
name|QT_BEGIN_INCLUDE_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
include|#
directive|include
file|"private/qwscommand_qws_p.h"
include|#
directive|include
file|"qwsdisplay_qws.h"
include|#
directive|include
file|"qabstractfontengine_p.h"
endif|#
directive|endif
include|#
directive|include
file|"qplatformdefs.h"
name|QT_END_INCLUDE_NAMESPACE
comment|//#define DEBUG_HEADER
comment|//#define DEBUG_FONTENGINE
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_HEADER
argument_list|)
DECL|macro|DEBUG_VERIFY
define|#
directive|define
name|DEBUG_VERIFY
value|qDebug
else|#
directive|else
define|#
directive|define
name|DEBUG_VERIFY
value|if (0) qDebug
endif|#
directive|endif
DECL|macro|READ_VERIFY
define|#
directive|define
name|READ_VERIFY
parameter_list|(
name|type
parameter_list|,
name|variable
parameter_list|)
define|\
value|if (tagPtr + sizeof(type)> endPtr) { \         DEBUG_VERIFY()<< "read verify failed in line"<< __LINE__; \         return 0; \     } \     variable = qFromBigEndian<type>(tagPtr); \     DEBUG_VERIFY()<< "read value"<< variable<< "of type " #type; \     tagPtr += sizeof(type)
specifier|template
type|<
typename|typename
name|T
function|>
DECL|function|readValue
name|T
name|readValue
parameter_list|(
specifier|const
name|uchar
modifier|*
modifier|&
name|data
parameter_list|)
block|{
name|T
name|value
init|=
name|qFromBigEndian
argument_list|<
name|T
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|data
operator|+=
sizeof|sizeof
argument_list|(
name|T
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
end_function
begin_define
DECL|macro|VERIFY
define|#
directive|define
name|VERIFY
parameter_list|(
name|condition
parameter_list|)
define|\
value|if (!(condition)) { \         DEBUG_VERIFY()<< "condition " #condition " failed in line"<< __LINE__; \         return 0; \     }
end_define
begin_define
DECL|macro|VERIFY_TAG
define|#
directive|define
name|VERIFY_TAG
parameter_list|(
name|condition
parameter_list|)
define|\
value|if (!(condition)) { \         DEBUG_VERIFY()<< "verifying tag condition " #condition " failed in line"<< __LINE__<< "with tag"<< tag; \         return 0; \     }
end_define
begin_function
DECL|function|verifyTag
specifier|static
specifier|inline
specifier|const
name|uchar
modifier|*
name|verifyTag
parameter_list|(
specifier|const
name|uchar
modifier|*
name|tagPtr
parameter_list|,
specifier|const
name|uchar
modifier|*
name|endPtr
parameter_list|)
block|{
name|quint16
name|tag
decl_stmt|,
name|length
decl_stmt|;
name|READ_VERIFY
argument_list|(
name|quint16
argument_list|,
name|tag
argument_list|)
expr_stmt|;
name|READ_VERIFY
argument_list|(
name|quint16
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|tag
operator|==
name|QFontEngineQPF
operator|::
name|Tag_EndOfHeader
condition|)
return|return
name|endPtr
return|;
if|if
condition|(
name|tag
operator|<
name|QFontEngineQPF
operator|::
name|NumTags
condition|)
block|{
switch|switch
condition|(
name|tagTypes
index|[
name|tag
index|]
condition|)
block|{
case|case
name|QFontEngineQPF
operator|::
name|BitFieldType
case|:
case|case
name|QFontEngineQPF
operator|::
name|StringType
case|:
comment|// can't do anything...
break|break;
case|case
name|QFontEngineQPF
operator|::
name|UInt32Type
case|:
name|VERIFY_TAG
argument_list|(
name|length
operator|==
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QFontEngineQPF
operator|::
name|FixedType
case|:
name|VERIFY_TAG
argument_list|(
name|length
operator|==
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QFontEngineQPF
operator|::
name|UInt8Type
case|:
name|VERIFY_TAG
argument_list|(
name|length
operator|==
sizeof|sizeof
argument_list|(
name|quint8
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_HEADER
argument_list|)
if|if
condition|(
name|length
operator|==
literal|1
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"tag data"
operator|<<
name|hex
operator|<<
operator|*
name|tagPtr
expr_stmt|;
elseif|else
if|if
condition|(
name|length
operator|==
literal|4
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"tag data"
operator|<<
name|hex
operator|<<
name|tagPtr
index|[
literal|0
index|]
operator|<<
name|tagPtr
index|[
literal|1
index|]
operator|<<
name|tagPtr
index|[
literal|2
index|]
operator|<<
name|tagPtr
index|[
literal|3
index|]
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|tagPtr
operator|+
name|length
return|;
block|}
end_function
begin_function
DECL|function|findGlyph
specifier|const
name|QFontEngineQPF
operator|::
name|Glyph
modifier|*
name|QFontEngineQPF
operator|::
name|findGlyph
parameter_list|(
name|glyph_t
name|g
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|g
operator|||
name|g
operator|>=
name|glyphMapEntries
condition|)
return|return
literal|0
return|;
specifier|const
name|quint32
modifier|*
name|gmapPtr
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|fontData
operator|+
name|glyphMapOffset
argument_list|)
decl_stmt|;
name|quint32
name|glyphPos
init|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|gmapPtr
index|[
name|g
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|glyphPos
operator|>
name|glyphDataSize
condition|)
block|{
if|if
condition|(
name|glyphPos
operator|==
literal|0xffffffff
condition|)
return|return
literal|0
return|;
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"glyph"
operator|<<
name|g
operator|<<
literal|"outside of glyphData, remapping font file"
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_FREETYPE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_FONTS_ARE_RESOURCES
argument_list|)
cast|const_cast
argument_list|<
name|QFontEngineQPF
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|remapFontData
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|glyphPos
operator|>
name|glyphDataSize
condition|)
return|return
literal|0
return|;
block|}
return|return
cast|reinterpret_cast
argument_list|<
specifier|const
name|Glyph
operator|*
argument_list|>
argument_list|(
name|fontData
operator|+
name|glyphDataOffset
operator|+
name|glyphPos
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|verifyHeader
name|bool
name|QFontEngineQPF
operator|::
name|verifyHeader
parameter_list|(
specifier|const
name|uchar
modifier|*
name|data
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|VERIFY
argument_list|(
name|size
operator|>=
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|Header
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|Header
modifier|*
name|header
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|Header
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|->
name|magic
index|[
literal|0
index|]
operator|!=
literal|'Q'
operator|||
name|header
operator|->
name|magic
index|[
literal|1
index|]
operator|!=
literal|'P'
operator|||
name|header
operator|->
name|magic
index|[
literal|2
index|]
operator|!=
literal|'F'
operator|||
name|header
operator|->
name|magic
index|[
literal|3
index|]
operator|!=
literal|'2'
condition|)
return|return
literal|false
return|;
name|VERIFY
argument_list|(
name|header
operator|->
name|majorVersion
operator|<=
name|CurrentMajorVersion
argument_list|)
expr_stmt|;
specifier|const
name|quint16
name|dataSize
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|header
operator|->
name|dataSize
argument_list|)
decl_stmt|;
name|VERIFY
argument_list|(
name|size
operator|>=
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|Header
argument_list|)
argument_list|)
operator|+
name|dataSize
argument_list|)
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|tagPtr
init|=
name|data
operator|+
sizeof|sizeof
argument_list|(
name|Header
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|tagEndPtr
init|=
name|tagPtr
operator|+
name|dataSize
decl_stmt|;
while|while
condition|(
name|tagPtr
operator|<
name|tagEndPtr
operator|-
literal|3
condition|)
block|{
name|tagPtr
operator|=
name|verifyTag
argument_list|(
name|tagPtr
argument_list|,
name|tagEndPtr
argument_list|)
expr_stmt|;
name|VERIFY
argument_list|(
name|tagPtr
argument_list|)
expr_stmt|;
block|}
name|VERIFY
argument_list|(
name|tagPtr
operator|<=
name|tagEndPtr
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|extractHeaderField
name|QVariant
name|QFontEngineQPF
operator|::
name|extractHeaderField
parameter_list|(
specifier|const
name|uchar
modifier|*
name|data
parameter_list|,
name|HeaderTag
name|requestedTag
parameter_list|)
block|{
specifier|const
name|Header
modifier|*
name|header
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|Header
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|tagPtr
init|=
name|data
operator|+
sizeof|sizeof
argument_list|(
name|Header
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|endPtr
init|=
name|tagPtr
operator|+
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|header
operator|->
name|dataSize
argument_list|)
decl_stmt|;
while|while
condition|(
name|tagPtr
operator|<
name|endPtr
operator|-
literal|3
condition|)
block|{
name|quint16
name|tag
init|=
name|readValue
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|tagPtr
argument_list|)
decl_stmt|;
name|quint16
name|length
init|=
name|readValue
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|tagPtr
argument_list|)
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|requestedTag
condition|)
block|{
switch|switch
condition|(
name|tagTypes
index|[
name|requestedTag
index|]
condition|)
block|{
case|case
name|StringType
case|:
return|return
name|QVariant
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|tagPtr
argument_list|)
argument_list|,
name|length
argument_list|)
argument_list|)
return|;
case|case
name|UInt32Type
case|:
return|return
name|QVariant
argument_list|(
name|readValue
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tagPtr
argument_list|)
argument_list|)
return|;
case|case
name|UInt8Type
case|:
return|return
name|QVariant
argument_list|(
name|uint
argument_list|(
operator|*
name|tagPtr
argument_list|)
argument_list|)
return|;
case|case
name|FixedType
case|:
return|return
name|QVariant
argument_list|(
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|readValue
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tagPtr
argument_list|)
argument_list|)
operator|.
name|toReal
argument_list|()
argument_list|)
return|;
case|case
name|BitFieldType
case|:
return|return
name|QVariant
argument_list|(
name|QByteArray
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|tagPtr
argument_list|)
argument_list|,
name|length
argument_list|)
argument_list|)
return|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|==
name|Tag_EndOfHeader
condition|)
block|{
break|break;
block|}
name|tagPtr
operator|+=
name|length
expr_stmt|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_QPF2
end_comment
begin_function
DECL|function|qws_fontCacheDir
name|QString
name|qws_fontCacheDir
parameter_list|()
block|{
name|QString
name|dir
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
specifier|extern
name|QString
name|qws_dataDir
argument_list|()
decl_stmt|;
name|dir
operator|=
name|qws_dataDir
argument_list|()
expr_stmt|;
else|#
directive|else
name|dir
operator|=
name|QDir
operator|::
name|tempPath
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|dir
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"/fonts/"
argument_list|)
argument_list|)
expr_stmt|;
name|QDir
name|qd
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qd
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|qd
operator|.
name|mkpath
argument_list|(
name|dir
argument_list|)
condition|)
name|dir
operator|=
name|QDir
operator|::
name|tempPath
argument_list|()
expr_stmt|;
return|return
name|dir
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_QPF2
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_FONTS_ARE_RESOURCES
end_ifndef
begin_function
DECL|function|cleanUpAfterClientCrash
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QFontEngineQPF
operator|::
name|cleanUpAfterClientCrash
parameter_list|(
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
name|crashedClientIds
parameter_list|)
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|removedFonts
decl_stmt|;
name|QDir
name|dir
argument_list|(
name|qws_fontCacheDir
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"*.qsf"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|int
argument_list|(
name|dir
operator|.
name|count
argument_list|()
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QByteArray
name|fileName
init|=
name|QFile
operator|::
name|encodeName
argument_list|(
name|dir
operator|.
name|absoluteFilePath
argument_list|(
name|dir
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|fd
init|=
name|QT_OPEN
argument_list|(
name|fileName
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDONLY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|fd
operator|>=
literal|0
condition|)
block|{
name|void
modifier|*
name|header
init|=
operator|::
name|mmap
argument_list|(
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|QFontEngineQPF
operator|::
name|Header
argument_list|)
argument_list|,
name|PROT_READ
argument_list|,
name|MAP_SHARED
argument_list|,
name|fd
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|&&
name|header
operator|!=
name|MAP_FAILED
condition|)
block|{
name|quint32
name|lockValue
init|=
cast|reinterpret_cast
argument_list|<
name|QFontEngineQPF
operator|::
name|Header
operator|*
argument_list|>
argument_list|(
name|header
argument_list|)
operator|->
name|lock
decl_stmt|;
if|if
condition|(
name|lockValue
operator|&&
name|crashedClientIds
operator|.
name|contains
argument_list|(
name|lockValue
argument_list|)
condition|)
block|{
name|removedFonts
operator|.
name|append
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|QFile
operator|::
name|decodeName
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|::
name|munmap
argument_list|(
name|header
argument_list|,
sizeof|sizeof
argument_list|(
name|QFontEngineQPF
operator|::
name|Header
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QT_CLOSE
argument_list|(
name|fd
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|removedFonts
operator|.
name|isEmpty
argument_list|()
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"list of corrupted and removed fonts:"
operator|<<
name|removedFonts
expr_stmt|;
return|return
name|removedFonts
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|getChar
specifier|static
specifier|inline
name|unsigned
name|int
name|getChar
parameter_list|(
specifier|const
name|QChar
modifier|*
name|str
parameter_list|,
name|int
modifier|&
name|i
parameter_list|,
specifier|const
name|int
name|len
parameter_list|)
block|{
name|unsigned
name|int
name|uc
init|=
name|str
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
decl_stmt|;
if|if
condition|(
name|uc
operator|>=
literal|0xd800
operator|&&
name|uc
operator|<
literal|0xdc00
operator|&&
name|i
operator|<
name|len
operator|-
literal|1
condition|)
block|{
name|uint
name|low
init|=
name|str
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|unicode
argument_list|()
decl_stmt|;
if|if
condition|(
name|low
operator|>=
literal|0xdc00
operator|&&
name|low
operator|<
literal|0xe000
condition|)
block|{
name|uc
operator|=
operator|(
name|uc
operator|-
literal|0xd800
operator|)
operator|*
literal|0x400
operator|+
operator|(
name|low
operator|-
literal|0xdc00
operator|)
operator|+
literal|0x10000
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
block|}
return|return
name|uc
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_FONTS_ARE_RESOURCES
end_ifdef
begin_constructor
DECL|function|QFontEngineQPF
name|QFontEngineQPF
operator|::
name|QFontEngineQPF
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|def
parameter_list|,
specifier|const
name|uchar
modifier|*
name|bytes
parameter_list|,
name|int
name|size
parameter_list|)
member_init_list|:
name|fd
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|fontData
argument_list|(
name|bytes
argument_list|)
member_init_list|,
name|dataSize
argument_list|(
name|size
argument_list|)
member_init_list|,
name|renderingFontEngine
argument_list|(
literal|0
argument_list|)
else|#
directive|else
name|QFontEngineQPF
operator|::
name|QFontEngineQPF
argument_list|(
specifier|const
name|QFontDef
operator|&
name|def
argument_list|,
name|int
name|fileDescriptor
argument_list|,
name|QFontEngine
operator|*
name|fontEngine
argument_list|)
member_init_list|:
name|fd
argument_list|(
name|fileDescriptor
argument_list|)
member_init_list|,
name|fontData
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|dataSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|renderingFontEngine
argument_list|(
name|fontEngine
argument_list|)
endif|#
directive|endif
block|{
name|fontDef
operator|=
name|def
expr_stmt|;
name|cache_cost
operator|=
literal|100
expr_stmt|;
name|freetype
operator|=
literal|0
expr_stmt|;
name|externalCMap
operator|=
literal|0
expr_stmt|;
name|cmapOffset
operator|=
literal|0
expr_stmt|;
name|cmapSize
operator|=
literal|0
expr_stmt|;
name|glyphMapOffset
operator|=
literal|0
expr_stmt|;
name|glyphMapEntries
operator|=
literal|0
expr_stmt|;
name|glyphDataOffset
operator|=
literal|0
expr_stmt|;
name|glyphDataSize
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|renderingFontEngine
condition|)
name|glyphFormat
operator|=
name|renderingFontEngine
operator|->
name|glyphFormat
expr_stmt|;
name|kerning_pairs_loaded
operator|=
literal|false
expr_stmt|;
name|readOnly
operator|=
literal|true
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QFontEngineQPF::QFontEngineQPF( fd ="
operator|<<
name|fd
operator|<<
literal|", renderingFontEngine ="
operator|<<
name|renderingFontEngine
operator|<<
literal|')'
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_FONTS_ARE_RESOURCES
if|if
condition|(
name|fd
operator|<
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|renderingFontEngine
condition|)
return|return;
name|fileName
operator|=
name|fontDef
operator|.
name|family
operator|.
name|toLower
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|fontDef
operator|.
name|pixelSize
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|fontDef
operator|.
name|weight
argument_list|)
operator|+
operator|(
name|fontDef
operator|.
name|style
operator|!=
name|QFont
operator|::
name|StyleNormal
condition|?
name|QLatin1String
argument_list|(
literal|"_italic"
argument_list|)
else|:
name|QLatin1String
argument_list|(
literal|""
argument_list|)
operator|)
operator|+
name|QLatin1String
argument_list|(
literal|".qsf"
argument_list|)
expr_stmt|;
name|fileName
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
name|fileName
operator|.
name|prepend
argument_list|(
name|qws_fontCacheDir
argument_list|()
argument_list|)
expr_stmt|;
name|encodedFileName
operator|=
name|QFile
operator|::
name|encodeName
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|::
name|access
argument_list|(
name|encodedFileName
argument_list|,
name|F_OK
argument_list|)
operator|==
literal|0
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"found existing qpf:"
operator|<<
name|fileName
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|::
name|access
argument_list|(
name|encodedFileName
argument_list|,
name|W_OK
operator||
name|R_OK
argument_list|)
operator|==
literal|0
condition|)
block|{
name|fd
operator|=
name|QT_OPEN
argument_list|(
name|encodedFileName
argument_list|,
name|O_RDWR
argument_list|)
expr_stmt|;
block|}
comment|// read-write access failed - try read-only access
if|if
condition|(
name|fd
operator|==
operator|-
literal|1
operator|&&
operator|::
name|access
argument_list|(
name|encodedFileName
argument_list|,
name|R_OK
argument_list|)
operator|==
literal|0
condition|)
block|{
name|fd
operator|=
name|QT_OPEN
argument_list|(
name|encodedFileName
argument_list|,
name|O_RDONLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|fd
operator|==
operator|-
literal|1
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|qErrnoWarning
argument_list|(
literal|"QFontEngineQPF: unable to open %s"
argument_list|,
name|encodedName
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
block|}
if|if
condition|(
name|fd
operator|==
operator|-
literal|1
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|qWarning
argument_list|(
literal|"QFontEngineQPF: insufficient access rights to %s"
argument_list|,
name|encodedName
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
block|}
else|else
block|{
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"creating qpf on the fly:"
operator|<<
name|fileName
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|::
name|access
argument_list|(
name|QFile
operator|::
name|encodeName
argument_list|(
name|qws_fontCacheDir
argument_list|()
argument_list|)
argument_list|,
name|W_OK
argument_list|)
operator|==
literal|0
condition|)
block|{
name|fd
operator|=
name|QT_OPEN
argument_list|(
name|encodedFileName
argument_list|,
name|O_RDWR
operator||
name|O_EXCL
operator||
name|O_CREAT
argument_list|,
literal|0644
argument_list|)
expr_stmt|;
if|if
condition|(
name|fd
operator|==
operator|-
literal|1
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|qErrnoWarning
argument_list|(
name|errno
argument_list|,
literal|"QFontEngineQPF: open() failed for %s"
argument_list|,
name|encodedName
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
name|QBuffer
name|buffer
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|QPFGenerator
name|generator
argument_list|(
operator|&
name|buffer
argument_list|,
name|renderingFontEngine
argument_list|)
decl_stmt|;
name|generator
operator|.
name|generate
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|const
name|QByteArray
modifier|&
name|data
init|=
name|buffer
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
name|QT_WRITE
argument_list|(
name|fd
argument_list|,
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|qErrnoWarning
argument_list|(
name|errno
argument_list|,
literal|"QFontEngineQPF: write() failed for %s"
argument_list|,
name|encodedName
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
block|}
else|else
block|{
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|qErrnoWarning
argument_list|(
name|errno
argument_list|,
literal|"QFontEngineQPF: access() failed for %s"
argument_list|,
name|qPrintable
argument_list|(
name|qws_fontCacheDir
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
block|}
block|}
name|QT_STATBUF
name|st
decl_stmt|;
if|if
condition|(
name|QT_FSTAT
argument_list|(
name|fd
argument_list|,
operator|&
name|st
argument_list|)
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|qErrnoWarning
argument_list|(
name|errno
argument_list|,
literal|"QFontEngineQPF: fstat failed!"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
name|dataSize
operator|=
name|st
operator|.
name|st_size
expr_stmt|;
name|fontData
operator|=
operator|(
specifier|const
name|uchar
operator|*
operator|)
operator|::
name|mmap
argument_list|(
literal|0
argument_list|,
name|st
operator|.
name|st_size
argument_list|,
name|PROT_READ
operator||
operator|(
name|renderingFontEngine
condition|?
name|PROT_WRITE
else|:
literal|0
operator|)
argument_list|,
name|MAP_SHARED
argument_list|,
name|fd
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fontData
operator|||
name|fontData
operator|==
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|MAP_FAILED
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|perror
argument_list|(
literal|"mmap failed"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|fontData
operator|=
literal|0
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
comment|//QT_FONTS_ARE_RESOURCES
if|if
condition|(
operator|!
name|verifyHeader
argument_list|(
name|fontData
argument_list|,
name|dataSize
argument_list|)
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"verifyHeader failed!"
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
specifier|const
name|Header
modifier|*
name|header
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|Header
operator|*
argument_list|>
argument_list|(
name|fontData
argument_list|)
decl_stmt|;
name|readOnly
operator|=
operator|(
name|header
operator|->
name|lock
operator|==
literal|0xffffffff
operator|)
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|data
init|=
name|fontData
operator|+
sizeof|sizeof
argument_list|(
name|Header
argument_list|)
operator|+
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|header
operator|->
name|dataSize
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|endPtr
init|=
name|fontData
operator|+
name|dataSize
decl_stmt|;
while|while
condition|(
name|data
operator|<=
name|endPtr
operator|-
literal|8
condition|)
block|{
name|quint16
name|blockTag
init|=
name|readValue
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|data
operator|+=
literal|2
expr_stmt|;
comment|// skip padding
name|quint32
name|blockSize
init|=
name|readValue
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockTag
operator|==
name|CMapBlock
condition|)
block|{
name|cmapOffset
operator|=
name|data
operator|-
name|fontData
expr_stmt|;
name|cmapSize
operator|=
name|blockSize
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|blockTag
operator|==
name|GMapBlock
condition|)
block|{
name|glyphMapOffset
operator|=
name|data
operator|-
name|fontData
expr_stmt|;
name|glyphMapEntries
operator|=
name|blockSize
operator|/
literal|4
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|blockTag
operator|==
name|GlyphBlock
condition|)
block|{
name|glyphDataOffset
operator|=
name|data
operator|-
name|fontData
expr_stmt|;
name|glyphDataSize
operator|=
name|blockSize
expr_stmt|;
block|}
name|data
operator|+=
name|blockSize
expr_stmt|;
block|}
name|face_id
operator|.
name|filename
operator|=
name|QFile
operator|::
name|encodeName
argument_list|(
name|extractHeaderField
argument_list|(
name|fontData
argument_list|,
name|Tag_FileName
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|face_id
operator|.
name|index
operator|=
name|extractHeaderField
argument_list|(
name|fontData
argument_list|,
name|Tag_FileIndex
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_FREETYPE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_FONTS_ARE_RESOURCES
argument_list|)
name|freetype
operator|=
name|QFreetypeFace
operator|::
name|getFace
argument_list|(
name|face_id
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|freetype
condition|)
block|{
name|QString
name|newPath
init|=
ifndef|#
directive|ifndef
name|QT_NO_SETTINGS
name|QLibraryInfo
operator|::
name|location
argument_list|(
name|QLibraryInfo
operator|::
name|LibrariesPath
argument_list|)
operator|+
endif|#
directive|endif
name|QLatin1String
argument_list|(
literal|"/fonts/"
argument_list|)
operator|+
name|QFileInfo
argument_list|(
name|QFile
operator|::
name|decodeName
argument_list|(
name|face_id
operator|.
name|filename
argument_list|)
argument_list|)
operator|.
name|fileName
argument_list|()
decl_stmt|;
name|face_id
operator|.
name|filename
operator|=
name|QFile
operator|::
name|encodeName
argument_list|(
name|newPath
argument_list|)
expr_stmt|;
name|freetype
operator|=
name|QFreetypeFace
operator|::
name|getFace
argument_list|(
name|face_id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|freetype
condition|)
block|{
specifier|const
name|quint32
name|qpfTtfRevision
init|=
name|extractHeaderField
argument_list|(
name|fontData
argument_list|,
name|Tag_FontRevision
argument_list|)
operator|.
name|toUInt
argument_list|()
decl_stmt|;
name|uchar
name|data
index|[
literal|4
index|]
decl_stmt|;
name|uint
name|length
init|=
literal|4
decl_stmt|;
name|bool
name|ok
init|=
name|freetype
operator|->
name|getSfntTable
argument_list|(
name|MAKE_TAG
argument_list|(
literal|'h'
argument_list|,
literal|'e'
argument_list|,
literal|'a'
argument_list|,
literal|'d'
argument_list|)
argument_list|,
name|data
argument_list|,
operator|&
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
operator|||
name|length
operator|!=
literal|4
operator|||
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|data
argument_list|)
operator|!=
name|qpfTtfRevision
condition|)
block|{
name|freetype
operator|->
name|release
argument_list|(
name|face_id
argument_list|)
expr_stmt|;
name|freetype
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|cmapOffset
operator|&&
name|freetype
condition|)
block|{
name|freetypeCMapTable
operator|=
name|getSfntTable
argument_list|(
name|MAKE_TAG
argument_list|(
literal|'c'
argument_list|,
literal|'m'
argument_list|,
literal|'a'
argument_list|,
literal|'p'
argument_list|)
argument_list|)
expr_stmt|;
name|externalCMap
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|freetypeCMapTable
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|cmapSize
operator|=
name|freetypeCMapTable
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
comment|// get the real cmap
if|if
condition|(
name|cmapOffset
condition|)
block|{
name|int
name|tableSize
init|=
name|cmapSize
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|cmapPtr
init|=
name|getCMap
argument_list|(
name|fontData
operator|+
name|cmapOffset
argument_list|,
name|tableSize
argument_list|,
operator|&
name|symbol
argument_list|,
operator|&
name|cmapSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmapPtr
condition|)
name|cmapOffset
operator|=
name|cmapPtr
operator|-
name|fontData
expr_stmt|;
else|else
name|cmapOffset
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|externalCMap
condition|)
block|{
name|int
name|tableSize
init|=
name|cmapSize
decl_stmt|;
name|externalCMap
operator|=
name|getCMap
argument_list|(
name|externalCMap
argument_list|,
name|tableSize
argument_list|,
operator|&
name|symbol
argument_list|,
operator|&
name|cmapSize
argument_list|)
expr_stmt|;
block|}
comment|// verify all the positions in the glyphMap
if|if
condition|(
name|glyphMapOffset
condition|)
block|{
specifier|const
name|quint32
modifier|*
name|gmapPtr
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|fontData
operator|+
name|glyphMapOffset
argument_list|)
decl_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphMapEntries
condition|;
operator|++
name|i
control|)
block|{
name|quint32
name|glyphDataPos
init|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|gmapPtr
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|glyphDataPos
operator|==
literal|0xffffffff
condition|)
continue|continue;
if|if
condition|(
name|glyphDataPos
operator|>=
name|glyphDataSize
condition|)
block|{
comment|// error
name|glyphMapOffset
operator|=
literal|0
expr_stmt|;
name|glyphMapEntries
operator|=
literal|0
expr_stmt|;
break|break;
block|}
block|}
block|}
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"fontData"
operator|<<
name|fontData
operator|<<
literal|"dataSize"
operator|<<
name|dataSize
operator|<<
literal|"externalCMap"
operator|<<
name|externalCMap
operator|<<
literal|"cmapOffset"
operator|<<
name|cmapOffset
operator|<<
literal|"glyphMapOffset"
operator|<<
name|glyphMapOffset
operator|<<
literal|"glyphDataOffset"
operator|<<
name|glyphDataOffset
operator|<<
literal|"fd"
operator|<<
name|fd
operator|<<
literal|"glyphDataSize"
operator|<<
name|glyphDataSize
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
if|if
condition|(
name|isValid
argument_list|()
operator|&&
name|renderingFontEngine
condition|)
name|qt_fbdpy
operator|->
name|sendFontCommand
argument_list|(
name|QWSFontCommand
operator|::
name|StartedUsingFont
argument_list|,
name|encodedFileName
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QFontEngineQPF
name|QFontEngineQPF
operator|::
name|~
name|QFontEngineQPF
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
if|if
condition|(
name|isValid
argument_list|()
operator|&&
name|renderingFontEngine
condition|)
block|{
name|QT_TRY
block|{
name|qt_fbdpy
operator|->
name|sendFontCommand
argument_list|(
name|QWSFontCommand
operator|::
name|StoppedUsingFont
argument_list|,
name|encodedFileName
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|qDebug
argument_list|(
literal|"QFontEngineQPF::~QFontEngineQPF: Out of memory"
argument_list|)
expr_stmt|;
comment|// ignore.
block|}
block|}
endif|#
directive|endif
operator|delete
name|renderingFontEngine
expr_stmt|;
if|if
condition|(
name|fontData
condition|)
block|{
if|if
condition|(
name|munmap
argument_list|(
operator|(
name|void
operator|*
operator|)
name|fontData
argument_list|,
name|dataSize
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|qErrnoWarning
argument_list|(
name|errno
argument_list|,
literal|"~QFontEngineQPF: Unable to munmap"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
if|if
condition|(
name|fd
operator|!=
operator|-
literal|1
condition|)
operator|::
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_FREETYPE
argument_list|)
if|if
condition|(
name|freetype
condition|)
name|freetype
operator|->
name|release
argument_list|(
name|face_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_function
DECL|function|getSfntTableData
name|bool
name|QFontEngineQPF
operator|::
name|getSfntTableData
parameter_list|(
name|uint
name|tag
parameter_list|,
name|uchar
modifier|*
name|buffer
parameter_list|,
name|uint
modifier|*
name|length
parameter_list|)
specifier|const
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_FREETYPE
argument_list|)
if|if
condition|(
name|freetype
condition|)
return|return
name|freetype
operator|->
name|getSfntTable
argument_list|(
name|tag
argument_list|,
name|buffer
argument_list|,
name|length
argument_list|)
return|;
endif|#
directive|endif
name|Q_UNUSED
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
operator|*
name|length
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|stringToCMap
name|bool
name|QFontEngineQPF
operator|::
name|stringToCMap
parameter_list|(
specifier|const
name|QChar
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|,
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|int
modifier|*
name|nglyphs
parameter_list|,
name|QTextEngine
operator|::
name|ShaperFlags
name|flags
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|externalCMap
operator|&&
operator|!
name|cmapOffset
operator|&&
name|renderingFontEngine
condition|)
block|{
if|if
condition|(
operator|!
name|renderingFontEngine
operator|->
name|stringToCMap
argument_list|(
name|str
argument_list|,
name|len
argument_list|,
name|glyphs
argument_list|,
name|nglyphs
argument_list|,
name|flags
argument_list|)
condition|)
return|return
literal|false
return|;
ifndef|#
directive|ifndef
name|QT_NO_FREETYPE
cast|const_cast
argument_list|<
name|QFontEngineQPF
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|ensureGlyphsLoaded
argument_list|(
operator|*
name|glyphs
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|*
name|nglyphs
operator|<
name|len
condition|)
block|{
operator|*
name|nglyphs
operator|=
name|len
expr_stmt|;
return|return
literal|false
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|QSet
argument_list|<
name|QChar
argument_list|>
name|seenGlyphs
decl_stmt|;
endif|#
directive|endif
specifier|const
name|uchar
modifier|*
name|cmap
init|=
name|externalCMap
condition|?
name|externalCMap
else|:
operator|(
name|fontData
operator|+
name|cmapOffset
operator|)
decl_stmt|;
name|bool
name|mirrored
init|=
name|flags
operator|&
name|QTextEngine
operator|::
name|RightToLeft
decl_stmt|;
name|int
name|glyph_pos
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|symbol
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|unsigned
name|int
name|uc
init|=
name|getChar
argument_list|(
name|str
argument_list|,
name|i
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|=
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
name|uc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|&&
name|uc
operator|<
literal|0x100
condition|)
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|=
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
name|uc
operator|+
literal|0xf000
argument_list|)
expr_stmt|;
operator|++
name|glyph_pos
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|unsigned
name|int
name|uc
init|=
name|getChar
argument_list|(
name|str
argument_list|,
name|i
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|mirrored
condition|)
name|uc
operator|=
name|QChar
operator|::
name|mirroredChar
argument_list|(
name|uc
argument_list|)
expr_stmt|;
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|=
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
name|uc
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
operator|&&
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
block|QChar c(uc);             if (!findGlyph(glyphs[glyph_pos].glyph)&& !seenGlyphs.contains(c))                 qDebug()<< "glyph for character"<< c<< '/'<< hex<< uc<< "is"<< dec<< glyphs[glyph_pos].glyph;              seenGlyphs.insert(c);
endif|#
directive|endif
operator|++
name|glyph_pos
expr_stmt|;
block|}
block|}
operator|*
name|nglyphs
operator|=
name|glyph_pos
expr_stmt|;
name|glyphs
operator|->
name|numGlyphs
operator|=
name|glyph_pos
expr_stmt|;
name|recalcAdvances
argument_list|(
name|glyphs
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|recalcAdvances
name|void
name|QFontEngineQPF
operator|::
name|recalcAdvances
parameter_list|(
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|QTextEngine
operator|::
name|ShaperFlags
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_FREETYPE
cast|const_cast
argument_list|<
name|QFontEngineQPF
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|ensureGlyphsLoaded
argument_list|(
operator|*
name|glyphs
argument_list|)
expr_stmt|;
endif|#
directive|endif
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|->
name|numGlyphs
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|Glyph
modifier|*
name|g
init|=
name|findGlyph
argument_list|(
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|g
condition|)
block|{
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
continue|continue;
block|}
name|glyphs
operator|->
name|advances_x
index|[
name|i
index|]
operator|=
name|g
operator|->
name|advance
expr_stmt|;
name|glyphs
operator|->
name|advances_y
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|alphaMapForGlyph
name|QImage
name|QFontEngineQPF
operator|::
name|alphaMapForGlyph
parameter_list|(
name|glyph_t
name|g
parameter_list|)
block|{
specifier|const
name|Glyph
modifier|*
name|glyph
init|=
name|findGlyph
argument_list|(
name|g
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|glyph
condition|)
return|return
name|QImage
argument_list|()
return|;
specifier|const
name|uchar
modifier|*
name|bits
init|=
operator|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|glyph
operator|)
operator|+
sizeof|sizeof
argument_list|(
name|Glyph
argument_list|)
decl_stmt|;
name|QImage
name|image
argument_list|(
name|glyph
operator|->
name|width
argument_list|,
name|glyph
operator|->
name|height
argument_list|,
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|256
condition|;
operator|++
name|j
control|)
name|image
operator|.
name|setColor
argument_list|(
name|j
argument_list|,
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyph
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
name|memcpy
argument_list|(
name|image
operator|.
name|scanLine
argument_list|(
name|i
argument_list|)
argument_list|,
name|bits
argument_list|,
name|glyph
operator|->
name|bytesPerLine
argument_list|)
expr_stmt|;
name|bits
operator|+=
name|glyph
operator|->
name|bytesPerLine
expr_stmt|;
block|}
return|return
name|image
return|;
block|}
end_function
begin_function
DECL|function|draw
name|void
name|QFontEngineQPF
operator|::
name|draw
parameter_list|(
name|QPaintEngine
modifier|*
name|p
parameter_list|,
name|qreal
name|_x
parameter_list|,
name|qreal
name|_y
parameter_list|,
specifier|const
name|QTextItemInt
modifier|&
name|si
parameter_list|)
block|{
name|QPaintEngineState
modifier|*
name|pState
init|=
name|p
operator|->
name|state
decl_stmt|;
name|QRasterPaintEngine
modifier|*
name|paintEngine
init|=
cast|static_cast
argument_list|<
name|QRasterPaintEngine
operator|*
argument_list|>
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|QTransform
name|matrix
init|=
name|pState
operator|->
name|transform
argument_list|()
decl_stmt|;
name|matrix
operator|.
name|translate
argument_list|(
name|_x
argument_list|,
name|_y
argument_list|)
expr_stmt|;
name|QFixed
name|x
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|matrix
operator|.
name|dx
argument_list|()
argument_list|)
decl_stmt|;
name|QFixed
name|y
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QFixedPoint
argument_list|>
name|positions
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|glyph_t
argument_list|>
name|glyphs
decl_stmt|;
name|getGlyphPositions
argument_list|(
name|si
operator|.
name|glyphs
argument_list|,
name|matrix
argument_list|,
name|si
operator|.
name|flags
argument_list|,
name|glyphs
argument_list|,
name|positions
argument_list|)
expr_stmt|;
if|if
condition|(
name|glyphs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|Glyph
modifier|*
name|glyph
init|=
name|findGlyph
argument_list|(
name|glyphs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|glyph
condition|)
continue|continue;
specifier|const
name|int
name|depth
init|=
literal|8
decl_stmt|;
comment|//###
name|paintEngine
operator|->
name|alphaPenBlt
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|glyph
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|Glyph
argument_list|)
argument_list|,
name|glyph
operator|->
name|bytesPerLine
argument_list|,
name|depth
argument_list|,
name|qRound
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|x
argument_list|)
operator|+
name|glyph
operator|->
name|x
argument_list|,
name|qRound
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|y
argument_list|)
operator|+
name|glyph
operator|->
name|y
argument_list|,
name|glyph
operator|->
name|width
argument_list|,
name|glyph
operator|->
name|height
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|addOutlineToPath
name|void
name|QFontEngineQPF
operator|::
name|addOutlineToPath
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|,
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|QTextItem
operator|::
name|RenderFlags
name|flags
parameter_list|)
block|{
if|if
condition|(
name|renderingFontEngine
operator|&&
operator|(
name|renderingFontEngine
operator|->
name|type
argument_list|()
operator|!=
name|QFontEngine
operator|::
name|Proxy
operator|||
cast|static_cast
argument_list|<
name|QProxyFontEngine
operator|*
argument_list|>
argument_list|(
name|renderingFontEngine
argument_list|)
operator|->
name|capabilities
argument_list|()
operator|&
name|QAbstractFontEngine
operator|::
name|CanOutlineGlyphs
operator|)
condition|)
block|{
name|renderingFontEngine
operator|->
name|addOutlineToPath
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|glyphs
argument_list|,
name|path
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return;
block|}
name|addBitmapFontToPath
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|glyphs
argument_list|,
name|path
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngineQPF
operator|::
name|boundingBox
parameter_list|(
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_FREETYPE
cast|const_cast
argument_list|<
name|QFontEngineQPF
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|ensureGlyphsLoaded
argument_list|(
name|glyphs
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|glyph_metrics_t
name|overall
decl_stmt|;
comment|// initialize with line height, we get the same behaviour on all platforms
name|overall
operator|.
name|y
operator|=
operator|-
name|ascent
argument_list|()
expr_stmt|;
name|overall
operator|.
name|height
operator|=
name|ascent
argument_list|()
operator|+
name|descent
argument_list|()
operator|+
literal|1
expr_stmt|;
name|QFixed
name|ymax
init|=
literal|0
decl_stmt|;
name|QFixed
name|xmax
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|numGlyphs
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|Glyph
modifier|*
name|g
init|=
name|findGlyph
argument_list|(
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|g
condition|)
continue|continue;
name|QFixed
name|x
init|=
name|overall
operator|.
name|xoff
operator|+
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|x
operator|+
name|g
operator|->
name|x
decl_stmt|;
name|QFixed
name|y
init|=
name|overall
operator|.
name|yoff
operator|+
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|y
operator|+
name|g
operator|->
name|y
decl_stmt|;
name|overall
operator|.
name|x
operator|=
name|qMin
argument_list|(
name|overall
operator|.
name|x
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|overall
operator|.
name|y
operator|=
name|qMin
argument_list|(
name|overall
operator|.
name|y
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|xmax
operator|=
name|qMax
argument_list|(
name|xmax
argument_list|,
name|x
operator|+
name|g
operator|->
name|width
argument_list|)
expr_stmt|;
name|ymax
operator|=
name|qMax
argument_list|(
name|ymax
argument_list|,
name|y
operator|+
name|g
operator|->
name|height
argument_list|)
expr_stmt|;
name|overall
operator|.
name|xoff
operator|+=
name|g
operator|->
name|advance
expr_stmt|;
block|}
name|overall
operator|.
name|height
operator|=
name|qMax
argument_list|(
name|overall
operator|.
name|height
argument_list|,
name|ymax
operator|-
name|overall
operator|.
name|y
argument_list|)
expr_stmt|;
name|overall
operator|.
name|width
operator|=
name|xmax
operator|-
name|overall
operator|.
name|x
expr_stmt|;
return|return
name|overall
return|;
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngineQPF
operator|::
name|boundingBox
parameter_list|(
name|glyph_t
name|glyph
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_FREETYPE
block|{
name|QGlyphLayoutArray
argument_list|<
literal|1
argument_list|>
name|tmp
decl_stmt|;
name|tmp
operator|.
name|glyphs
index|[
literal|0
index|]
operator|=
name|glyph
expr_stmt|;
cast|const_cast
argument_list|<
name|QFontEngineQPF
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|ensureGlyphsLoaded
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|glyph_metrics_t
name|overall
decl_stmt|;
specifier|const
name|Glyph
modifier|*
name|g
init|=
name|findGlyph
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|g
condition|)
return|return
name|overall
return|;
name|overall
operator|.
name|x
operator|=
name|g
operator|->
name|x
expr_stmt|;
name|overall
operator|.
name|y
operator|=
name|g
operator|->
name|y
expr_stmt|;
name|overall
operator|.
name|width
operator|=
name|g
operator|->
name|width
expr_stmt|;
name|overall
operator|.
name|height
operator|=
name|g
operator|->
name|height
expr_stmt|;
name|overall
operator|.
name|xoff
operator|=
name|g
operator|->
name|advance
expr_stmt|;
return|return
name|overall
return|;
block|}
end_function
begin_function
DECL|function|ascent
name|QFixed
name|QFontEngineQPF
operator|::
name|ascent
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromReal
argument_list|(
name|extractHeaderField
argument_list|(
name|fontData
argument_list|,
name|Tag_Ascent
argument_list|)
operator|.
name|value
argument_list|<
name|qreal
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|descent
name|QFixed
name|QFontEngineQPF
operator|::
name|descent
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromReal
argument_list|(
name|extractHeaderField
argument_list|(
name|fontData
argument_list|,
name|Tag_Descent
argument_list|)
operator|.
name|value
argument_list|<
name|qreal
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|leading
name|QFixed
name|QFontEngineQPF
operator|::
name|leading
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromReal
argument_list|(
name|extractHeaderField
argument_list|(
name|fontData
argument_list|,
name|Tag_Leading
argument_list|)
operator|.
name|value
argument_list|<
name|qreal
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|maxCharWidth
name|qreal
name|QFontEngineQPF
operator|::
name|maxCharWidth
parameter_list|()
specifier|const
block|{
return|return
name|extractHeaderField
argument_list|(
name|fontData
argument_list|,
name|Tag_MaxCharWidth
argument_list|)
operator|.
name|value
argument_list|<
name|qreal
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|minLeftBearing
name|qreal
name|QFontEngineQPF
operator|::
name|minLeftBearing
parameter_list|()
specifier|const
block|{
return|return
name|extractHeaderField
argument_list|(
name|fontData
argument_list|,
name|Tag_MinLeftBearing
argument_list|)
operator|.
name|value
argument_list|<
name|qreal
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|minRightBearing
name|qreal
name|QFontEngineQPF
operator|::
name|minRightBearing
parameter_list|()
specifier|const
block|{
return|return
name|extractHeaderField
argument_list|(
name|fontData
argument_list|,
name|Tag_MinRightBearing
argument_list|)
operator|.
name|value
argument_list|<
name|qreal
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|underlinePosition
name|QFixed
name|QFontEngineQPF
operator|::
name|underlinePosition
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromReal
argument_list|(
name|extractHeaderField
argument_list|(
name|fontData
argument_list|,
name|Tag_UnderlinePosition
argument_list|)
operator|.
name|value
argument_list|<
name|qreal
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|lineThickness
name|QFixed
name|QFontEngineQPF
operator|::
name|lineThickness
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromReal
argument_list|(
name|extractHeaderField
argument_list|(
name|fontData
argument_list|,
name|Tag_LineThickness
argument_list|)
operator|.
name|value
argument_list|<
name|qreal
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|type
name|QFontEngine
operator|::
name|Type
name|QFontEngineQPF
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|QFontEngine
operator|::
name|QPF2
return|;
block|}
end_function
begin_function
DECL|function|canRender
name|bool
name|QFontEngineQPF
operator|::
name|canRender
parameter_list|(
specifier|const
name|QChar
modifier|*
name|string
parameter_list|,
name|int
name|len
parameter_list|)
block|{
specifier|const
name|uchar
modifier|*
name|cmap
init|=
name|externalCMap
condition|?
name|externalCMap
else|:
operator|(
name|fontData
operator|+
name|cmapOffset
operator|)
decl_stmt|;
if|if
condition|(
name|symbol
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|unsigned
name|int
name|uc
init|=
name|getChar
argument_list|(
name|string
argument_list|,
name|i
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|glyph_t
name|g
init|=
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
name|uc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|g
operator|&&
name|uc
operator|<
literal|0x100
condition|)
name|g
operator|=
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
name|uc
operator|+
literal|0xf000
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|g
condition|)
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|unsigned
name|int
name|uc
init|=
name|getChar
argument_list|(
name|string
argument_list|,
name|i
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
name|uc
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QFontEngineQPF
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
name|fontData
operator|&&
name|dataSize
operator|&&
operator|(
name|cmapOffset
operator|||
name|externalCMap
operator|||
name|renderingFontEngine
operator|)
operator|&&
name|glyphMapOffset
operator|&&
name|glyphDataOffset
operator|&&
operator|(
name|fd
operator|>=
literal|0
operator|||
name|glyphDataSize
operator|>
literal|0
operator|)
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_FREETYPE
argument_list|)
end_if
begin_function
DECL|function|lockFace
name|FT_Face
name|QFontEngineQPF
operator|::
name|lockFace
parameter_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|freetype
argument_list|)
expr_stmt|;
name|freetype
operator|->
name|lock
argument_list|()
expr_stmt|;
name|FT_Face
name|face
init|=
name|freetype
operator|->
name|face
decl_stmt|;
comment|// ### not perfect
specifier|const
name|int
name|ysize
init|=
name|qRound
argument_list|(
name|fontDef
operator|.
name|pixelSize
operator|*
name|qreal
argument_list|(
literal|64
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|xsize
init|=
name|ysize
decl_stmt|;
if|if
condition|(
name|freetype
operator|->
name|xsize
operator|!=
name|xsize
operator|||
name|freetype
operator|->
name|ysize
operator|!=
name|ysize
condition|)
block|{
name|FT_Set_Char_Size
argument_list|(
name|face
argument_list|,
name|xsize
argument_list|,
name|ysize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|freetype
operator|->
name|xsize
operator|=
name|xsize
expr_stmt|;
name|freetype
operator|->
name|ysize
operator|=
name|ysize
expr_stmt|;
block|}
name|FT_Matrix
name|identityMatrix
decl_stmt|;
name|identityMatrix
operator|.
name|xx
operator|=
literal|0x10000
expr_stmt|;
name|identityMatrix
operator|.
name|yy
operator|=
literal|0x10000
expr_stmt|;
name|identityMatrix
operator|.
name|xy
operator|=
literal|0
expr_stmt|;
name|identityMatrix
operator|.
name|yx
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|freetype
operator|->
name|matrix
operator|.
name|xx
operator|!=
name|identityMatrix
operator|.
name|xx
operator|||
name|freetype
operator|->
name|matrix
operator|.
name|yy
operator|!=
name|identityMatrix
operator|.
name|yy
operator|||
name|freetype
operator|->
name|matrix
operator|.
name|xy
operator|!=
name|identityMatrix
operator|.
name|xy
operator|||
name|freetype
operator|->
name|matrix
operator|.
name|yx
operator|!=
name|identityMatrix
operator|.
name|yx
condition|)
block|{
name|freetype
operator|->
name|matrix
operator|=
name|identityMatrix
expr_stmt|;
name|FT_Set_Transform
argument_list|(
name|face
argument_list|,
operator|&
name|freetype
operator|->
name|matrix
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|face
return|;
block|}
end_function
begin_function
DECL|function|unlockFace
name|void
name|QFontEngineQPF
operator|::
name|unlockFace
parameter_list|()
specifier|const
block|{
name|freetype
operator|->
name|unlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doKerning
name|void
name|QFontEngineQPF
operator|::
name|doKerning
parameter_list|(
name|QGlyphLayout
modifier|*
name|g
parameter_list|,
name|QTextEngine
operator|::
name|ShaperFlags
name|flags
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|kerning_pairs_loaded
condition|)
block|{
name|kerning_pairs_loaded
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|freetype
condition|)
block|{
name|lockFace
argument_list|()
expr_stmt|;
if|if
condition|(
name|freetype
operator|->
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|x_ppem
operator|!=
literal|0
condition|)
block|{
name|QFixed
name|scalingFactor
argument_list|(
name|freetype
operator|->
name|face
operator|->
name|units_per_EM
operator|/
name|freetype
operator|->
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|x_ppem
argument_list|)
decl_stmt|;
name|unlockFace
argument_list|()
expr_stmt|;
cast|const_cast
argument_list|<
name|QFontEngineQPF
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|loadKerningPairs
argument_list|(
name|scalingFactor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unlockFace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|QFontEngine
operator|::
name|doKerning
argument_list|(
name|g
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getPointInOutline
name|HB_Error
name|QFontEngineQPF
operator|::
name|getPointInOutline
parameter_list|(
name|HB_Glyph
name|glyph
parameter_list|,
name|int
name|flags
parameter_list|,
name|hb_uint32
name|point
parameter_list|,
name|HB_Fixed
modifier|*
name|xpos
parameter_list|,
name|HB_Fixed
modifier|*
name|ypos
parameter_list|,
name|hb_uint32
modifier|*
name|nPoints
parameter_list|)
block|{
if|if
condition|(
operator|!
name|freetype
condition|)
return|return
name|HB_Err_Not_Covered
return|;
name|lockFace
argument_list|()
expr_stmt|;
name|HB_Error
name|result
init|=
name|freetype
operator|->
name|getPointInOutline
argument_list|(
name|glyph
argument_list|,
name|flags
argument_list|,
name|point
argument_list|,
name|xpos
argument_list|,
name|ypos
argument_list|,
name|nPoints
argument_list|)
decl_stmt|;
name|unlockFace
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|emSquareSize
name|QFixed
name|QFontEngineQPF
operator|::
name|emSquareSize
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|freetype
condition|)
return|return
name|QFontEngine
operator|::
name|emSquareSize
argument_list|()
return|;
if|if
condition|(
name|FT_IS_SCALABLE
argument_list|(
name|freetype
operator|->
name|face
argument_list|)
condition|)
return|return
name|freetype
operator|->
name|face
operator|->
name|units_per_EM
return|;
else|else
return|return
name|freetype
operator|->
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|y_ppem
return|;
block|}
end_function
begin_function
DECL|function|ensureGlyphsLoaded
name|void
name|QFontEngineQPF
operator|::
name|ensureGlyphsLoaded
parameter_list|(
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|)
block|{
if|if
condition|(
name|readOnly
condition|)
return|return;
name|bool
name|locked
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|numGlyphs
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
condition|)
continue|continue;
specifier|const
name|Glyph
modifier|*
name|g
init|=
name|findGlyph
argument_list|(
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
condition|)
continue|continue;
if|if
condition|(
operator|!
name|locked
condition|)
block|{
if|if
condition|(
operator|!
name|lockFile
argument_list|()
condition|)
return|return;
name|locked
operator|=
literal|true
expr_stmt|;
name|g
operator|=
name|findGlyph
argument_list|(
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
condition|)
continue|continue;
block|}
name|loadGlyph
argument_list|(
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|locked
condition|)
block|{
name|unlockFile
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"Finished rendering glyphs\n"
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|loadGlyph
name|void
name|QFontEngineQPF
operator|::
name|loadGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|)
block|{
name|quint32
name|glyphPos
init|=
operator|~
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|renderingFontEngine
condition|)
return|return;
name|QImage
name|img
init|=
name|renderingFontEngine
operator|->
name|alphaMapForGlyph
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
if|if
condition|(
name|img
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_Indexed8
condition|)
block|{
name|bool
name|mono
init|=
name|img
operator|.
name|depth
argument_list|()
operator|==
literal|1
decl_stmt|;
name|img
operator|=
name|img
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
if|if
condition|(
name|mono
condition|)
block|{
comment|//### we know that 1 is opaque and 0 is transparent
name|uchar
modifier|*
name|byte
init|=
name|img
operator|.
name|bits
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|img
operator|.
name|byteCount
argument_list|()
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
operator|*
name|byte
operator|++
operator|*=
literal|0xff
expr_stmt|;
block|}
block|}
name|glyph_metrics_t
name|metrics
init|=
name|renderingFontEngine
operator|->
name|boundingBox
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
name|renderingFontEngine
operator|->
name|removeGlyphFromCache
argument_list|(
name|glyph
argument_list|)
expr_stmt|;
name|off_t
name|oldSize
init|=
operator|::
name|lseek
argument_list|(
name|fd
argument_list|,
literal|0
argument_list|,
name|SEEK_END
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldSize
operator|==
operator|(
name|off_t
operator|)
operator|-
literal|1
condition|)
return|return;
name|Glyph
name|g
decl_stmt|;
name|g
operator|.
name|width
operator|=
name|img
operator|.
name|width
argument_list|()
expr_stmt|;
name|g
operator|.
name|height
operator|=
name|img
operator|.
name|height
argument_list|()
expr_stmt|;
name|g
operator|.
name|bytesPerLine
operator|=
name|img
operator|.
name|bytesPerLine
argument_list|()
expr_stmt|;
name|g
operator|.
name|x
operator|=
name|qRound
argument_list|(
name|metrics
operator|.
name|x
argument_list|)
expr_stmt|;
name|g
operator|.
name|y
operator|=
name|qRound
argument_list|(
name|metrics
operator|.
name|y
argument_list|)
expr_stmt|;
name|g
operator|.
name|advance
operator|=
name|qRound
argument_list|(
name|metrics
operator|.
name|xoff
argument_list|)
expr_stmt|;
name|QT_WRITE
argument_list|(
name|fd
argument_list|,
operator|&
name|g
argument_list|,
sizeof|sizeof
argument_list|(
name|g
argument_list|)
argument_list|)
expr_stmt|;
name|QT_WRITE
argument_list|(
name|fd
argument_list|,
name|img
operator|.
name|bits
argument_list|()
argument_list|,
name|img
operator|.
name|byteCount
argument_list|()
argument_list|)
expr_stmt|;
name|glyphPos
operator|=
name|oldSize
operator|-
name|glyphDataOffset
expr_stmt|;
if|#
directive|if
literal|0
operator|&&
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
block|qDebug()<< "glyphPos for new glyph"<< glyph<< "is"<< glyphPos<< "oldSize"<< oldSize<< "glyphDataOffset"<< glyphDataOffset;
endif|#
directive|endif
name|quint32
modifier|*
name|gmap
init|=
operator|(
name|quint32
operator|*
operator|)
operator|(
name|fontData
operator|+
name|glyphMapOffset
operator|)
decl_stmt|;
name|gmap
index|[
name|glyph
index|]
operator|=
name|qToBigEndian
argument_list|(
name|glyphPos
argument_list|)
expr_stmt|;
name|glyphDataSize
operator|=
name|glyphPos
operator|+
sizeof|sizeof
argument_list|(
name|g
argument_list|)
operator|+
name|img
operator|.
name|byteCount
argument_list|()
expr_stmt|;
name|quint32
modifier|*
name|blockSizePtr
init|=
operator|(
name|quint32
operator|*
operator|)
operator|(
name|fontData
operator|+
name|glyphDataOffset
operator|-
literal|4
operator|)
decl_stmt|;
operator|*
name|blockSizePtr
operator|=
name|qToBigEndian
argument_list|(
name|glyphDataSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lockFile
name|bool
name|QFontEngineQPF
operator|::
name|lockFile
parameter_list|()
block|{
comment|// #### this does not handle the case when the process holding the
comment|// lock hangs for some reason
name|struct
name|flock
name|lock
decl_stmt|;
name|lock
operator|.
name|l_type
operator|=
name|F_WRLCK
expr_stmt|;
name|lock
operator|.
name|l_whence
operator|=
name|SEEK_SET
expr_stmt|;
name|lock
operator|.
name|l_start
operator|=
literal|0
expr_stmt|;
name|lock
operator|.
name|l_len
operator|=
literal|0
expr_stmt|;
comment|// lock the whole file
while|while
condition|(
name|fcntl
argument_list|(
name|fd
argument_list|,
name|F_SETLKW
argument_list|,
operator|&
name|lock
argument_list|)
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|errno
operator|==
name|EINTR
condition|)
continue|continue;
name|perror
argument_list|(
literal|"locking qpf"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Header
modifier|*
name|header
init|=
operator|(
name|Header
operator|*
operator|)
name|fontData
decl_stmt|;
if|if
condition|(
name|header
operator|->
name|lock
condition|)
block|{
name|lock
operator|.
name|l_type
operator|=
name|F_UNLCK
expr_stmt|;
if|if
condition|(
name|fcntl
argument_list|(
name|fd
argument_list|,
name|F_SETLK
argument_list|,
operator|&
name|lock
argument_list|)
operator|!=
literal|0
condition|)
name|perror
argument_list|(
literal|"unlocking possibly corrupt qpf"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
specifier|extern
name|int
name|qws_client_id
decl_stmt|;
comment|// qws_client_id == 0 means we're the server. in this case we just
comment|// set the id to 1
name|header
operator|->
name|lock
operator|=
name|qws_client_id
condition|?
name|qws_client_id
else|:
literal|1
expr_stmt|;
else|#
directive|else
name|header
operator|->
name|lock
operator|=
literal|1
expr_stmt|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|unlockFile
name|void
name|QFontEngineQPF
operator|::
name|unlockFile
parameter_list|()
block|{
operator|(
operator|(
name|Header
operator|*
operator|)
name|fontData
operator|)
operator|->
name|lock
operator|=
literal|0
expr_stmt|;
name|struct
name|flock
name|lock
decl_stmt|;
name|lock
operator|.
name|l_type
operator|=
name|F_UNLCK
expr_stmt|;
name|lock
operator|.
name|l_whence
operator|=
name|SEEK_SET
expr_stmt|;
name|lock
operator|.
name|l_start
operator|=
literal|0
expr_stmt|;
name|lock
operator|.
name|l_len
operator|=
literal|0
expr_stmt|;
comment|// lock the whole file
if|if
condition|(
name|fcntl
argument_list|(
name|fd
argument_list|,
name|F_SETLK
argument_list|,
operator|&
name|lock
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|perror
argument_list|(
literal|"unlocking qpf"
argument_list|)
expr_stmt|;
block|}
name|remapFontData
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remapFontData
name|void
name|QFontEngineQPF
operator|::
name|remapFontData
parameter_list|()
block|{
name|off_t
name|newFileSize
init|=
operator|::
name|lseek
argument_list|(
name|fd
argument_list|,
literal|0
argument_list|,
name|SEEK_END
argument_list|)
decl_stmt|;
if|if
condition|(
name|newFileSize
operator|==
operator|(
name|off_t
operator|)
operator|-
literal|1
condition|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_FONTENGINE
name|perror
argument_list|(
literal|"QFontEngineQPF::remapFontData: lseek failed"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|fontData
operator|=
literal|0
expr_stmt|;
return|return;
block|}
ifndef|#
directive|ifndef
name|QT_NO_MREMAP
name|fontData
operator|=
cast|static_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
operator|::
name|mremap
argument_list|(
cast|const_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|fontData
argument_list|)
argument_list|,
name|dataSize
argument_list|,
name|newFileSize
argument_list|,
name|MREMAP_MAYMOVE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fontData
operator|||
name|fontData
operator|==
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|MAP_FAILED
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|perror
argument_list|(
literal|"QFontEngineQPF::remapFontData(): mremap failed"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|fontData
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fontData
condition|)
endif|#
directive|endif
comment|// QT_NO_MREMAP
block|{
name|int
name|status
init|=
operator|::
name|munmap
argument_list|(
operator|(
name|void
operator|*
operator|)
name|fontData
argument_list|,
name|dataSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|0
condition|)
name|qErrnoWarning
argument_list|(
name|status
argument_list|,
literal|"QFontEngineQPF::remapFomrData: munmap failed!"
argument_list|)
expr_stmt|;
name|fontData
operator|=
operator|(
specifier|const
name|uchar
operator|*
operator|)
operator|::
name|mmap
argument_list|(
literal|0
argument_list|,
name|newFileSize
argument_list|,
name|PROT_READ
operator||
operator|(
name|renderingFontEngine
condition|?
name|PROT_WRITE
else|:
literal|0
operator|)
argument_list|,
name|MAP_SHARED
argument_list|,
name|fd
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fontData
operator|||
name|fontData
operator|==
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|MAP_FAILED
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|perror
argument_list|(
literal|"mmap failed"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|fontData
operator|=
literal|0
expr_stmt|;
return|return;
block|}
block|}
name|dataSize
operator|=
name|newFileSize
expr_stmt|;
name|glyphDataSize
operator|=
name|newFileSize
operator|-
name|glyphDataOffset
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"remapped the font file to"
operator|<<
name|newFileSize
operator|<<
literal|"bytes"
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_FREETYPE
end_comment
begin_function
DECL|function|generate
name|void
name|QPFGenerator
operator|::
name|generate
parameter_list|()
block|{
name|writeHeader
argument_list|()
expr_stmt|;
name|writeGMap
argument_list|()
expr_stmt|;
name|writeBlock
argument_list|(
name|QFontEngineQPF
operator|::
name|GlyphBlock
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|dev
operator|->
name|seek
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// position of header.lock
name|writeUInt32
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeHeader
name|void
name|QPFGenerator
operator|::
name|writeHeader
parameter_list|()
block|{
name|QFontEngineQPF
operator|::
name|Header
name|header
decl_stmt|;
name|header
operator|.
name|magic
index|[
literal|0
index|]
operator|=
literal|'Q'
expr_stmt|;
name|header
operator|.
name|magic
index|[
literal|1
index|]
operator|=
literal|'P'
expr_stmt|;
name|header
operator|.
name|magic
index|[
literal|2
index|]
operator|=
literal|'F'
expr_stmt|;
name|header
operator|.
name|magic
index|[
literal|3
index|]
operator|=
literal|'2'
expr_stmt|;
name|header
operator|.
name|lock
operator|=
literal|1
expr_stmt|;
name|header
operator|.
name|majorVersion
operator|=
name|QFontEngineQPF
operator|::
name|CurrentMajorVersion
expr_stmt|;
name|header
operator|.
name|minorVersion
operator|=
name|QFontEngineQPF
operator|::
name|CurrentMinorVersion
expr_stmt|;
name|header
operator|.
name|dataSize
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|write
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|header
argument_list|,
sizeof|sizeof
argument_list|(
name|header
argument_list|)
argument_list|)
expr_stmt|;
name|writeTaggedString
argument_list|(
name|QFontEngineQPF
operator|::
name|Tag_FontName
argument_list|,
name|fe
operator|->
name|fontDef
operator|.
name|family
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|QFontEngine
operator|::
name|FaceId
name|face
init|=
name|fe
operator|->
name|faceId
argument_list|()
decl_stmt|;
name|writeTaggedString
argument_list|(
name|QFontEngineQPF
operator|::
name|Tag_FileName
argument_list|,
name|face
operator|.
name|filename
argument_list|)
expr_stmt|;
name|writeTaggedUInt32
argument_list|(
name|QFontEngineQPF
operator|::
name|Tag_FileIndex
argument_list|,
name|face
operator|.
name|index
argument_list|)
expr_stmt|;
block|{
name|uchar
name|data
index|[
literal|4
index|]
decl_stmt|;
name|uint
name|len
init|=
literal|4
decl_stmt|;
name|bool
name|ok
init|=
name|fe
operator|->
name|getSfntTableData
argument_list|(
name|MAKE_TAG
argument_list|(
literal|'h'
argument_list|,
literal|'e'
argument_list|,
literal|'a'
argument_list|,
literal|'d'
argument_list|)
argument_list|,
name|data
argument_list|,
operator|&
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
specifier|const
name|quint32
name|revision
init|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|writeTaggedUInt32
argument_list|(
name|QFontEngineQPF
operator|::
name|Tag_FontRevision
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
block|}
name|writeTaggedQFixed
argument_list|(
name|QFontEngineQPF
operator|::
name|Tag_Ascent
argument_list|,
name|fe
operator|->
name|ascent
argument_list|()
argument_list|)
expr_stmt|;
name|writeTaggedQFixed
argument_list|(
name|QFontEngineQPF
operator|::
name|Tag_Descent
argument_list|,
name|fe
operator|->
name|descent
argument_list|()
argument_list|)
expr_stmt|;
name|writeTaggedQFixed
argument_list|(
name|QFontEngineQPF
operator|::
name|Tag_Leading
argument_list|,
name|fe
operator|->
name|leading
argument_list|()
argument_list|)
expr_stmt|;
name|writeTaggedQFixed
argument_list|(
name|QFontEngineQPF
operator|::
name|Tag_XHeight
argument_list|,
name|fe
operator|->
name|xHeight
argument_list|()
argument_list|)
expr_stmt|;
name|writeTaggedQFixed
argument_list|(
name|QFontEngineQPF
operator|::
name|Tag_AverageCharWidth
argument_list|,
name|fe
operator|->
name|averageCharWidth
argument_list|()
argument_list|)
expr_stmt|;
name|writeTaggedQFixed
argument_list|(
name|QFontEngineQPF
operator|::
name|Tag_MaxCharWidth
argument_list|,
name|QFixed
operator|::
name|fromReal
argument_list|(
name|fe
operator|->
name|maxCharWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writeTaggedQFixed
argument_list|(
name|QFontEngineQPF
operator|::
name|Tag_LineThickness
argument_list|,
name|fe
operator|->
name|lineThickness
argument_list|()
argument_list|)
expr_stmt|;
name|writeTaggedQFixed
argument_list|(
name|QFontEngineQPF
operator|::
name|Tag_MinLeftBearing
argument_list|,
name|QFixed
operator|::
name|fromReal
argument_list|(
name|fe
operator|->
name|minLeftBearing
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writeTaggedQFixed
argument_list|(
name|QFontEngineQPF
operator|::
name|Tag_MinRightBearing
argument_list|,
name|QFixed
operator|::
name|fromReal
argument_list|(
name|fe
operator|->
name|minRightBearing
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writeTaggedQFixed
argument_list|(
name|QFontEngineQPF
operator|::
name|Tag_UnderlinePosition
argument_list|,
name|fe
operator|->
name|underlinePosition
argument_list|()
argument_list|)
expr_stmt|;
name|writeTaggedUInt8
argument_list|(
name|QFontEngineQPF
operator|::
name|Tag_PixelSize
argument_list|,
name|fe
operator|->
name|fontDef
operator|.
name|pixelSize
argument_list|)
expr_stmt|;
name|writeTaggedUInt8
argument_list|(
name|QFontEngineQPF
operator|::
name|Tag_Weight
argument_list|,
name|fe
operator|->
name|fontDef
operator|.
name|weight
argument_list|)
expr_stmt|;
name|writeTaggedUInt8
argument_list|(
name|QFontEngineQPF
operator|::
name|Tag_Style
argument_list|,
name|fe
operator|->
name|fontDef
operator|.
name|style
argument_list|)
expr_stmt|;
name|writeTaggedUInt8
argument_list|(
name|QFontEngineQPF
operator|::
name|Tag_GlyphFormat
argument_list|,
name|QFontEngineQPF
operator|::
name|AlphamapGlyphs
argument_list|)
expr_stmt|;
name|writeTaggedString
argument_list|(
name|QFontEngineQPF
operator|::
name|Tag_EndOfHeader
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|align4
argument_list|()
expr_stmt|;
specifier|const
name|quint64
name|size
init|=
name|dev
operator|->
name|pos
argument_list|()
decl_stmt|;
name|header
operator|.
name|dataSize
operator|=
name|qToBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|size
operator|-
sizeof|sizeof
argument_list|(
name|header
argument_list|)
argument_list|)
expr_stmt|;
name|dev
operator|->
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dev
operator|->
name|write
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|header
argument_list|,
sizeof|sizeof
argument_list|(
name|header
argument_list|)
argument_list|)
expr_stmt|;
name|dev
operator|->
name|seek
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeGMap
name|void
name|QPFGenerator
operator|::
name|writeGMap
parameter_list|()
block|{
specifier|const
name|quint16
name|glyphCount
init|=
name|fe
operator|->
name|glyphCount
argument_list|()
decl_stmt|;
name|writeUInt16
argument_list|(
name|QFontEngineQPF
operator|::
name|GMapBlock
argument_list|)
expr_stmt|;
name|writeUInt16
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// padding
name|writeUInt32
argument_list|(
name|glyphCount
operator|*
literal|4
argument_list|)
expr_stmt|;
name|QByteArray
modifier|&
name|buffer
init|=
name|dev
operator|->
name|buffer
argument_list|()
decl_stmt|;
specifier|const
name|int
name|numBytes
init|=
name|glyphCount
operator|*
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
decl_stmt|;
name|qint64
name|pos
init|=
name|buffer
operator|.
name|size
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|resize
argument_list|(
name|pos
operator|+
name|numBytes
argument_list|)
expr_stmt|;
name|qMemSet
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
operator|+
name|pos
argument_list|,
literal|0xff
argument_list|,
name|numBytes
argument_list|)
expr_stmt|;
name|dev
operator|->
name|seek
argument_list|(
name|pos
operator|+
name|numBytes
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeBlock
name|void
name|QPFGenerator
operator|::
name|writeBlock
parameter_list|(
name|QFontEngineQPF
operator|::
name|BlockTag
name|tag
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
block|{
name|writeUInt16
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|writeUInt16
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// padding
specifier|const
name|int
name|padSize
init|=
operator|(
operator|(
name|data
operator|.
name|size
argument_list|()
operator|+
literal|3
operator|)
operator|/
literal|4
operator|)
operator|*
literal|4
operator|-
name|data
operator|.
name|size
argument_list|()
decl_stmt|;
name|writeUInt32
argument_list|(
name|data
operator|.
name|size
argument_list|()
operator|+
name|padSize
argument_list|)
expr_stmt|;
name|dev
operator|->
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|padSize
condition|;
operator|++
name|i
control|)
name|writeUInt8
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeTaggedString
name|void
name|QPFGenerator
operator|::
name|writeTaggedString
parameter_list|(
name|QFontEngineQPF
operator|::
name|HeaderTag
name|tag
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|string
parameter_list|)
block|{
name|writeUInt16
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|writeUInt16
argument_list|(
name|string
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|dev
operator|->
name|write
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeTaggedUInt32
name|void
name|QPFGenerator
operator|::
name|writeTaggedUInt32
parameter_list|(
name|QFontEngineQPF
operator|::
name|HeaderTag
name|tag
parameter_list|,
name|quint32
name|value
parameter_list|)
block|{
name|writeUInt16
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|writeUInt16
argument_list|(
sizeof|sizeof
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|writeUInt32
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeTaggedUInt8
name|void
name|QPFGenerator
operator|::
name|writeTaggedUInt8
parameter_list|(
name|QFontEngineQPF
operator|::
name|HeaderTag
name|tag
parameter_list|,
name|quint8
name|value
parameter_list|)
block|{
name|writeUInt16
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|writeUInt16
argument_list|(
sizeof|sizeof
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|writeUInt8
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeTaggedQFixed
name|void
name|QPFGenerator
operator|::
name|writeTaggedQFixed
parameter_list|(
name|QFontEngineQPF
operator|::
name|HeaderTag
name|tag
parameter_list|,
name|QFixed
name|value
parameter_list|)
block|{
name|writeUInt16
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|writeUInt16
argument_list|(
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
argument_list|)
expr_stmt|;
name|writeUInt32
argument_list|(
name|value
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_QPF2
end_comment
begin_comment
comment|/*     Creates a new multi qws engine.      This function takes ownership of the QFontEngine, increasing it's refcount. */
end_comment
begin_constructor
DECL|function|QFontEngineMultiQWS
name|QFontEngineMultiQWS
operator|::
name|QFontEngineMultiQWS
parameter_list|(
name|QFontEngine
modifier|*
name|fe
parameter_list|,
name|int
name|_script
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|fallbacks
parameter_list|)
member_init_list|:
name|QFontEngineMulti
argument_list|(
name|fallbacks
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
member_init_list|,
name|fallbackFamilies
argument_list|(
name|fallbacks
argument_list|)
member_init_list|,
name|script
argument_list|(
name|_script
argument_list|)
block|{
name|engines
index|[
literal|0
index|]
operator|=
name|fe
expr_stmt|;
name|fe
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|fontDef
operator|=
name|engines
index|[
literal|0
index|]
operator|->
name|fontDef
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|loadEngine
name|void
name|QFontEngineMultiQWS
operator|::
name|loadEngine
parameter_list|(
name|int
name|at
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|at
operator|<
name|engines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|engines
operator|.
name|at
argument_list|(
name|at
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QFontDef
name|request
init|=
name|fontDef
decl_stmt|;
name|request
operator|.
name|styleStrategy
operator||=
name|QFont
operator|::
name|NoFontMerging
expr_stmt|;
name|request
operator|.
name|family
operator|=
name|fallbackFamilies
operator|.
name|at
argument_list|(
name|at
operator|-
literal|1
argument_list|)
expr_stmt|;
name|engines
index|[
name|at
index|]
operator|=
name|QFontDatabase
operator|::
name|findFont
argument_list|(
name|script
argument_list|,
comment|/*fontprivate*/
literal|0
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|engines
index|[
name|at
index|]
argument_list|)
expr_stmt|;
name|engines
index|[
name|at
index|]
operator|->
name|ref
operator|.
name|ref
argument_list|()
expr_stmt|;
name|engines
index|[
name|at
index|]
operator|->
name|fontDef
operator|=
name|request
expr_stmt|;
block|}
end_function
begin_function
DECL|function|draw
name|void
name|QFontEngineMultiQWS
operator|::
name|draw
parameter_list|(
name|QPaintEngine
modifier|*
comment|/*p*/
parameter_list|,
name|qreal
comment|/*x*/
parameter_list|,
name|qreal
comment|/*y*/
parameter_list|,
specifier|const
name|QTextItemInt
modifier|&
comment|/*si*/
parameter_list|)
block|{
name|qFatal
argument_list|(
literal|"QFontEngineMultiQWS::draw should never be called!"
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
