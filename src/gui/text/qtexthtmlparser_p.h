begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTEXTHTMLPARSER_P_H
end_ifndef
begin_define
DECL|macro|QTEXTHTMLPARSER_P_H
define|#
directive|define
name|QTEXTHTMLPARSER_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtCore/qvector.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qbrush.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qcolor.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qfont.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qtextdocument.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qtextcursor.h"
end_include
begin_include
include|#
directive|include
file|"private/qtextformat_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qtextdocument_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qcssparser_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TEXTHTMLPARSER
end_ifndef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|enum|QTextHTMLElements
name|enum
name|QTextHTMLElements
block|{
DECL|enumerator|Html_unknown
name|Html_unknown
operator|=
operator|-
literal|1
operator|,
DECL|enumerator|Html_qt
name|Html_qt
operator|=
literal|0
operator|,
DECL|enumerator|Html_body
name|Html_body
operator|,
DECL|enumerator|Html_a
name|Html_a
operator|,
DECL|enumerator|Html_em
name|Html_em
operator|,
DECL|enumerator|Html_i
name|Html_i
operator|,
DECL|enumerator|Html_big
name|Html_big
operator|,
DECL|enumerator|Html_small
name|Html_small
operator|,
DECL|enumerator|Html_strong
name|Html_strong
operator|,
DECL|enumerator|Html_b
name|Html_b
operator|,
DECL|enumerator|Html_cite
name|Html_cite
operator|,
DECL|enumerator|Html_address
name|Html_address
operator|,
DECL|enumerator|Html_var
name|Html_var
operator|,
DECL|enumerator|Html_dfn
name|Html_dfn
operator|,
DECL|enumerator|Html_h1
name|Html_h1
operator|,
DECL|enumerator|Html_h2
name|Html_h2
operator|,
DECL|enumerator|Html_h3
name|Html_h3
operator|,
DECL|enumerator|Html_h4
name|Html_h4
operator|,
DECL|enumerator|Html_h5
name|Html_h5
operator|,
DECL|enumerator|Html_h6
name|Html_h6
operator|,
DECL|enumerator|Html_p
name|Html_p
operator|,
DECL|enumerator|Html_center
name|Html_center
operator|,
DECL|enumerator|Html_font
name|Html_font
operator|,
DECL|enumerator|Html_ul
name|Html_ul
operator|,
DECL|enumerator|Html_ol
name|Html_ol
operator|,
DECL|enumerator|Html_li
name|Html_li
operator|,
DECL|enumerator|Html_code
name|Html_code
operator|,
DECL|enumerator|Html_tt
name|Html_tt
operator|,
DECL|enumerator|Html_kbd
name|Html_kbd
operator|,
DECL|enumerator|Html_samp
name|Html_samp
operator|,
DECL|enumerator|Html_img
name|Html_img
operator|,
DECL|enumerator|Html_br
name|Html_br
operator|,
DECL|enumerator|Html_hr
name|Html_hr
operator|,
DECL|enumerator|Html_sub
name|Html_sub
operator|,
DECL|enumerator|Html_sup
name|Html_sup
operator|,
DECL|enumerator|Html_pre
name|Html_pre
operator|,
DECL|enumerator|Html_blockquote
name|Html_blockquote
operator|,
DECL|enumerator|Html_head
name|Html_head
operator|,
DECL|enumerator|Html_div
name|Html_div
operator|,
DECL|enumerator|Html_span
name|Html_span
operator|,
DECL|enumerator|Html_dl
name|Html_dl
operator|,
DECL|enumerator|Html_dt
name|Html_dt
operator|,
DECL|enumerator|Html_dd
name|Html_dd
operator|,
DECL|enumerator|Html_u
name|Html_u
operator|,
DECL|enumerator|Html_s
name|Html_s
operator|,
DECL|enumerator|Html_nobr
name|Html_nobr
operator|,
comment|// tables
DECL|enumerator|Html_table
name|Html_table
operator|,
DECL|enumerator|Html_tr
name|Html_tr
operator|,
DECL|enumerator|Html_td
name|Html_td
operator|,
DECL|enumerator|Html_th
name|Html_th
operator|,
DECL|enumerator|Html_thead
name|Html_thead
operator|,
DECL|enumerator|Html_tbody
name|Html_tbody
operator|,
DECL|enumerator|Html_tfoot
name|Html_tfoot
operator|,
DECL|enumerator|Html_caption
name|Html_caption
operator|,
comment|// misc...
DECL|enumerator|Html_html
name|Html_html
operator|,
DECL|enumerator|Html_style
name|Html_style
operator|,
DECL|enumerator|Html_title
name|Html_title
operator|,
DECL|enumerator|Html_meta
name|Html_meta
operator|,
DECL|enumerator|Html_link
name|Html_link
operator|,
DECL|enumerator|Html_script
name|Html_script
operator|,
DECL|enumerator|Html_NumElements
name|Html_NumElements
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_struct
DECL|struct|QTextHtmlElement
struct|struct
name|QTextHtmlElement
block|{
DECL|member|name
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
DECL|member|id
name|QTextHTMLElements
name|id
decl_stmt|;
DECL|enum|DisplayMode
DECL|enumerator|DisplayBlock
DECL|enumerator|DisplayInline
DECL|enumerator|DisplayTable
DECL|enumerator|DisplayNone
DECL|member|displayMode
enum|enum
name|DisplayMode
block|{
name|DisplayBlock
block|,
name|DisplayInline
block|,
name|DisplayTable
block|,
name|DisplayNone
block|}
name|displayMode
enum|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|QTextHtmlParser
name|class
name|QTextHtmlParser
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|QTextHtmlParserNode
struct|struct
name|QTextHtmlParserNode
block|{
DECL|enum|WhiteSpaceMode
enum|enum
name|WhiteSpaceMode
block|{
DECL|enumerator|WhiteSpaceNormal
name|WhiteSpaceNormal
block|,
DECL|enumerator|WhiteSpacePre
name|WhiteSpacePre
block|,
DECL|enumerator|WhiteSpaceNoWrap
name|WhiteSpaceNoWrap
block|,
DECL|enumerator|WhiteSpacePreWrap
name|WhiteSpacePreWrap
block|,
DECL|enumerator|WhiteSpaceModeUndefined
name|WhiteSpaceModeUndefined
init|=
operator|-
literal|1
block|}
enum|;
name|QTextHtmlParserNode
argument_list|()
expr_stmt|;
DECL|member|tag
name|QString
name|tag
decl_stmt|;
DECL|member|text
name|QString
name|text
decl_stmt|;
DECL|member|attributes
name|QStringList
name|attributes
decl_stmt|;
DECL|member|parent
name|int
name|parent
decl_stmt|;
DECL|member|children
name|QVector
operator|<
name|int
operator|>
name|children
expr_stmt|;
DECL|member|id
name|QTextHTMLElements
name|id
decl_stmt|;
DECL|member|charFormat
name|QTextCharFormat
name|charFormat
decl_stmt|;
DECL|member|blockFormat
name|QTextBlockFormat
name|blockFormat
decl_stmt|;
DECL|member|cssFloat
name|uint
name|cssFloat
range|:
literal|2
decl_stmt|;
DECL|member|hasOwnListStyle
name|uint
name|hasOwnListStyle
range|:
literal|1
decl_stmt|;
DECL|member|hasOwnLineHeightType
name|uint
name|hasOwnLineHeightType
range|:
literal|1
decl_stmt|;
DECL|member|hasCssListIndent
name|uint
name|hasCssListIndent
range|:
literal|1
decl_stmt|;
DECL|member|isEmptyParagraph
name|uint
name|isEmptyParagraph
range|:
literal|1
decl_stmt|;
DECL|member|isTextFrame
name|uint
name|isTextFrame
range|:
literal|1
decl_stmt|;
DECL|member|isRootFrame
name|uint
name|isRootFrame
range|:
literal|1
decl_stmt|;
DECL|member|displayMode
name|uint
name|displayMode
range|:
literal|3
decl_stmt|;
comment|// QTextHtmlElement::DisplayMode
DECL|member|hasHref
name|uint
name|hasHref
range|:
literal|1
decl_stmt|;
DECL|member|listStyle
name|QTextListFormat
operator|::
name|Style
name|listStyle
expr_stmt|;
DECL|member|textListNumberPrefix
name|QString
name|textListNumberPrefix
decl_stmt|;
DECL|member|textListNumberSuffix
name|QString
name|textListNumberSuffix
decl_stmt|;
DECL|member|imageName
name|QString
name|imageName
decl_stmt|;
DECL|member|imageWidth
name|qreal
name|imageWidth
decl_stmt|;
DECL|member|imageHeight
name|qreal
name|imageHeight
decl_stmt|;
DECL|member|width
name|QTextLength
name|width
decl_stmt|;
DECL|member|height
name|QTextLength
name|height
decl_stmt|;
DECL|member|tableBorder
name|qreal
name|tableBorder
decl_stmt|;
DECL|member|tableCellRowSpan
name|int
name|tableCellRowSpan
decl_stmt|;
DECL|member|tableCellColSpan
name|int
name|tableCellColSpan
decl_stmt|;
DECL|member|tableCellSpacing
name|qreal
name|tableCellSpacing
decl_stmt|;
DECL|member|tableCellPadding
name|qreal
name|tableCellPadding
decl_stmt|;
DECL|member|borderBrush
name|QBrush
name|borderBrush
decl_stmt|;
DECL|member|borderStyle
name|QTextFrameFormat
operator|::
name|BorderStyle
name|borderStyle
expr_stmt|;
DECL|member|userState
name|int
name|userState
decl_stmt|;
DECL|member|cssListIndent
name|int
name|cssListIndent
decl_stmt|;
DECL|member|wsm
name|WhiteSpaceMode
name|wsm
decl_stmt|;
DECL|function|isListStart
specifier|inline
name|bool
name|isListStart
argument_list|()
specifier|const
block|{
return|return
name|id
operator|==
name|Html_ol
operator|||
name|id
operator|==
name|Html_ul
return|;
block|}
DECL|function|isTableCell
specifier|inline
name|bool
name|isTableCell
argument_list|()
specifier|const
block|{
return|return
name|id
operator|==
name|Html_td
operator|||
name|id
operator|==
name|Html_th
return|;
block|}
DECL|function|isBlock
specifier|inline
name|bool
name|isBlock
argument_list|()
specifier|const
block|{
return|return
name|displayMode
operator|==
name|QTextHtmlElement
operator|::
name|DisplayBlock
return|;
block|}
DECL|function|isNotSelfNesting
specifier|inline
name|bool
name|isNotSelfNesting
argument_list|()
specifier|const
block|{
return|return
name|id
operator|==
name|Html_p
operator|||
name|id
operator|==
name|Html_li
return|;
block|}
DECL|function|allowedInContext
specifier|inline
name|bool
name|allowedInContext
argument_list|(
name|int
name|parentId
argument_list|)
decl|const
block|{
switch|switch
condition|(
name|id
condition|)
block|{
case|case
name|Html_dd
case|:
case|case
name|Html_dt
case|:
return|return
operator|(
name|parentId
operator|==
name|Html_dl
operator|)
return|;
case|case
name|Html_tr
case|:
return|return
operator|(
name|parentId
operator|==
name|Html_table
operator|||
name|parentId
operator|==
name|Html_thead
operator|||
name|parentId
operator|==
name|Html_tbody
operator|||
name|parentId
operator|==
name|Html_tfoot
operator|)
return|;
case|case
name|Html_th
case|:
case|case
name|Html_td
case|:
return|return
operator|(
name|parentId
operator|==
name|Html_tr
operator|)
return|;
case|case
name|Html_thead
case|:
case|case
name|Html_tbody
case|:
case|case
name|Html_tfoot
case|:
return|return
operator|(
name|parentId
operator|==
name|Html_table
operator|)
return|;
case|case
name|Html_caption
case|:
return|return
operator|(
name|parentId
operator|==
name|Html_table
operator|)
return|;
case|case
name|Html_body
case|:
return|return
name|parentId
operator|!=
name|Html_head
return|;
default|default:
break|break;
block|}
return|return
name|true
return|;
block|}
DECL|function|mayNotHaveChildren
specifier|inline
name|bool
name|mayNotHaveChildren
argument_list|()
specifier|const
block|{
return|return
name|id
operator|==
name|Html_img
operator|||
name|id
operator|==
name|Html_hr
operator|||
name|id
operator|==
name|Html_br
operator|||
name|id
operator|==
name|Html_meta
return|;
block|}
name|void
name|initializeProperties
parameter_list|(
specifier|const
name|QTextHtmlParserNode
modifier|*
name|parent
parameter_list|,
specifier|const
name|QTextHtmlParser
modifier|*
name|parser
parameter_list|)
function_decl|;
DECL|function|uncollapsedMargin
specifier|inline
name|int
name|uncollapsedMargin
argument_list|(
name|int
name|mar
argument_list|)
decl|const
block|{
return|return
name|margin
index|[
name|mar
index|]
return|;
block|}
name|bool
name|isNestedList
argument_list|(
specifier|const
name|QTextHtmlParser
operator|*
name|parser
argument_list|)
decl|const
decl_stmt|;
name|void
name|parseStyleAttribute
parameter_list|(
specifier|const
name|QString
modifier|&
name|value
parameter_list|,
specifier|const
name|QTextDocument
modifier|*
name|resourceProvider
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CSSPARSER
name|void
name|applyCssDeclarations
argument_list|(
specifier|const
name|QVector
operator|<
name|QCss
operator|::
name|Declaration
operator|>
operator|&
name|declarations
argument_list|,
specifier|const
name|QTextDocument
operator|*
name|resourceProvider
argument_list|)
decl_stmt|;
name|void
name|setListStyle
argument_list|(
specifier|const
name|QVector
operator|<
name|QCss
operator|::
name|Value
operator|>
operator|&
name|cssValues
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|void
name|applyBackgroundImage
parameter_list|(
specifier|const
name|QString
modifier|&
name|url
parameter_list|,
specifier|const
name|QTextDocument
modifier|*
name|resourceProvider
parameter_list|)
function_decl|;
name|bool
name|hasOnlyWhitespace
argument_list|()
specifier|const
expr_stmt|;
DECL|member|margin
name|int
name|margin
index|[
literal|4
index|]
decl_stmt|;
DECL|member|padding
name|int
name|padding
index|[
literal|4
index|]
decl_stmt|;
DECL|member|QTextHtmlParser
name|friend
name|class
name|QTextHtmlParser
decl_stmt|;
block|}
struct|;
end_struct
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QTextHtmlParserNode
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|class
name|QTextHtmlParser
block|{
name|public
label|:
enum|enum
name|Margin
block|{
name|MarginTop
block|,
name|MarginRight
block|,
name|MarginBottom
block|,
name|MarginLeft
block|}
enum|;
specifier|inline
specifier|const
name|QTextHtmlParserNode
modifier|&
name|at
argument_list|(
name|int
name|i
argument_list|)
decl|const
block|{
return|return
name|nodes
operator|.
name|at
argument_list|(
name|i
argument_list|)
return|;
block|}
specifier|inline
name|QTextHtmlParserNode
modifier|&
name|operator
function|[]
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|nodes
index|[
name|i
index|]
return|;
block|}
specifier|inline
name|int
name|count
argument_list|()
specifier|const
block|{
return|return
name|nodes
operator|.
name|count
argument_list|()
return|;
block|}
specifier|inline
name|int
name|last
argument_list|()
specifier|const
block|{
return|return
name|nodes
operator|.
name|count
argument_list|()
operator|-
literal|1
return|;
block|}
name|int
name|depth
argument_list|(
name|int
name|i
argument_list|)
decl|const
decl_stmt|;
name|int
name|topMargin
argument_list|(
name|int
name|i
argument_list|)
decl|const
decl_stmt|;
name|int
name|bottomMargin
argument_list|(
name|int
name|i
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|int
name|leftMargin
argument_list|(
name|int
name|i
argument_list|)
decl|const
block|{
return|return
name|margin
argument_list|(
name|i
argument_list|,
name|MarginLeft
argument_list|)
return|;
block|}
specifier|inline
name|int
name|rightMargin
argument_list|(
name|int
name|i
argument_list|)
decl|const
block|{
return|return
name|margin
argument_list|(
name|i
argument_list|,
name|MarginRight
argument_list|)
return|;
block|}
specifier|inline
name|int
name|topPadding
argument_list|(
name|int
name|i
argument_list|)
decl|const
block|{
return|return
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|padding
index|[
name|MarginTop
index|]
return|;
block|}
specifier|inline
name|int
name|bottomPadding
argument_list|(
name|int
name|i
argument_list|)
decl|const
block|{
return|return
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|padding
index|[
name|MarginBottom
index|]
return|;
block|}
specifier|inline
name|int
name|leftPadding
argument_list|(
name|int
name|i
argument_list|)
decl|const
block|{
return|return
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|padding
index|[
name|MarginLeft
index|]
return|;
block|}
specifier|inline
name|int
name|rightPadding
argument_list|(
name|int
name|i
argument_list|)
decl|const
block|{
return|return
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|padding
index|[
name|MarginRight
index|]
return|;
block|}
name|void
name|dumpHtml
parameter_list|()
function_decl|;
name|void
name|parse
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
specifier|const
name|QTextDocument
modifier|*
name|resourceProvider
parameter_list|)
function_decl|;
specifier|static
name|int
name|lookupElement
parameter_list|(
specifier|const
name|QString
modifier|&
name|element
parameter_list|)
function_decl|;
name|protected
label|:
name|QTextHtmlParserNode
modifier|*
name|newNode
parameter_list|(
name|int
name|parent
parameter_list|)
function_decl|;
name|QVector
operator|<
name|QTextHtmlParserNode
operator|>
name|nodes
expr_stmt|;
name|QString
name|txt
decl_stmt|;
name|int
name|pos
decl_stmt|,
name|len
decl_stmt|;
name|bool
name|textEditMode
decl_stmt|;
name|void
name|parse
parameter_list|()
function_decl|;
name|void
name|parseTag
parameter_list|()
function_decl|;
name|void
name|parseCloseTag
parameter_list|()
function_decl|;
name|void
name|parseExclamationTag
parameter_list|()
function_decl|;
name|QString
name|parseEntity
parameter_list|()
function_decl|;
name|QString
name|parseWord
parameter_list|()
function_decl|;
name|QTextHtmlParserNode
modifier|*
name|resolveParent
parameter_list|()
function_decl|;
name|void
name|resolveNode
parameter_list|()
function_decl|;
name|QStringList
name|parseAttributes
parameter_list|()
function_decl|;
name|void
name|applyAttributes
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|attributes
parameter_list|)
function_decl|;
name|void
name|eatSpace
parameter_list|()
function_decl|;
specifier|inline
name|bool
name|hasPrefix
argument_list|(
name|QChar
name|c
argument_list|,
name|int
name|lookahead
operator|=
literal|0
argument_list|)
decl|const
block|{
return|return
name|pos
operator|+
name|lookahead
operator|<
name|len
operator|&&
name|txt
operator|.
name|at
argument_list|(
name|pos
argument_list|)
operator|==
name|c
return|;
block|}
name|int
name|margin
argument_list|(
name|int
name|i
argument_list|,
name|int
name|mar
argument_list|)
decl|const
decl_stmt|;
name|bool
name|nodeIsChildOf
argument_list|(
name|int
name|i
argument_list|,
name|QTextHTMLElements
name|id
argument_list|)
decl|const
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CSSPARSER
name|QVector
operator|<
name|QCss
operator|::
name|Declaration
operator|>
name|declarationsForNode
argument_list|(
argument|int node
argument_list|)
specifier|const
expr_stmt|;
name|void
name|resolveStyleSheetImports
argument_list|(
specifier|const
name|QCss
operator|::
name|StyleSheet
operator|&
name|sheet
argument_list|)
decl_stmt|;
name|void
name|importStyleSheet
parameter_list|(
specifier|const
name|QString
modifier|&
name|href
parameter_list|)
function_decl|;
struct|struct
name|ExternalStyleSheet
block|{
specifier|inline
name|ExternalStyleSheet
argument_list|()
block|{}
specifier|inline
name|ExternalStyleSheet
argument_list|(
specifier|const
name|QString
operator|&
name|_url
argument_list|,
specifier|const
name|QCss
operator|::
name|StyleSheet
operator|&
name|_sheet
argument_list|)
operator|:
name|url
argument_list|(
name|_url
argument_list|)
operator|,
name|sheet
argument_list|(
argument|_sheet
argument_list|)
block|{}
name|QString
name|url
expr_stmt|;
name|QCss
operator|::
name|StyleSheet
name|sheet
expr_stmt|;
block|}
struct|;
name|friend
name|class
name|QTypeInfo
operator|<
name|ExternalStyleSheet
operator|>
expr_stmt|;
name|QVector
operator|<
name|ExternalStyleSheet
operator|>
name|externalStyleSheets
expr_stmt|;
name|QVector
operator|<
name|QCss
operator|::
name|StyleSheet
operator|>
name|inlineStyleSheets
expr_stmt|;
endif|#
directive|endif
specifier|const
name|QTextDocument
modifier|*
name|resourceProvider
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QTextHtmlParser
operator|::
name|ExternalStyleSheet
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TEXTHTMLPARSER
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QTEXTHTMLPARSER_P_H
end_comment
end_unit
