begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_define
DECL|macro|QT_FATAL_ASSERT
define|#
directive|define
name|QT_FATAL_ASSERT
end_define
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qfont.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qfontinfo.h"
end_include
begin_include
include|#
directive|include
file|"qfontdatabase.h"
end_include
begin_include
include|#
directive|include
file|"qfontmetrics.h"
end_include
begin_include
include|#
directive|include
file|"qpaintdevice.h"
end_include
begin_include
include|#
directive|include
file|"qtextcodec.h"
end_include
begin_include
include|#
directive|include
file|"qiodevice.h"
end_include
begin_include
include|#
directive|include
file|"qhash.h"
end_include
begin_include
include|#
directive|include
file|<private/qunicodetables_p.h>
end_include
begin_include
include|#
directive|include
file|"qfont_p.h"
end_include
begin_include
include|#
directive|include
file|"qfontengine_p.h"
end_include
begin_include
include|#
directive|include
file|"qfontengine_x11_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextengine_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qt_x11_p.h>
end_include
begin_include
include|#
directive|include
file|"qx11info_x11.h"
end_include
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<ctype.h>
end_include
begin_define
DECL|macro|QFONTLOADER_DEBUG
define|#
directive|define
name|QFONTLOADER_DEBUG
end_define
begin_define
DECL|macro|QFONTLOADER_DEBUG_VERBOSE
define|#
directive|define
name|QFONTLOADER_DEBUG_VERBOSE
end_define
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|qt_pixelSize
name|double
name|qt_pixelSize
parameter_list|(
name|double
name|pointSize
parameter_list|,
name|int
name|dpi
parameter_list|)
block|{
if|if
condition|(
name|pointSize
operator|<
literal|0
condition|)
return|return
operator|-
literal|1.
return|;
if|if
condition|(
name|dpi
operator|==
literal|75
condition|)
comment|// the stupid 75 dpi setting on X11
name|dpi
operator|=
literal|72
expr_stmt|;
return|return
operator|(
name|pointSize
operator|*
name|dpi
operator|)
operator|/
literal|72.
return|;
block|}
end_function
begin_function
DECL|function|qt_pointSize
name|double
name|qt_pointSize
parameter_list|(
name|double
name|pixelSize
parameter_list|,
name|int
name|dpi
parameter_list|)
block|{
if|if
condition|(
name|pixelSize
operator|<
literal|0
condition|)
return|return
operator|-
literal|1.
return|;
if|if
condition|(
name|dpi
operator|==
literal|75
condition|)
comment|// the stupid 75 dpi setting on X11
name|dpi
operator|=
literal|72
expr_stmt|;
return|return
name|pixelSize
operator|*
literal|72.
operator|/
operator|(
operator|(
name|double
operator|)
name|dpi
operator|)
return|;
block|}
end_function
begin_comment
comment|/*   Removes wildcards from an XLFD.    Returns \a xlfd with all wildcards removed if a match for \a xlfd is   found, otherwise it returns \a xlfd. */
end_comment
begin_function
DECL|function|qt_fixXLFD
specifier|static
name|QByteArray
name|qt_fixXLFD
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|xlfd
parameter_list|)
block|{
name|QByteArray
name|ret
init|=
name|xlfd
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|char
modifier|*
modifier|*
name|fontNames
init|=
name|XListFonts
argument_list|(
name|QX11Info
operator|::
name|display
argument_list|()
argument_list|,
name|xlfd
argument_list|,
literal|32768
argument_list|,
operator|&
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
name|ret
operator|=
name|fontNames
index|[
literal|0
index|]
expr_stmt|;
name|XFreeFontNames
argument_list|(
name|fontNames
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_typedef
DECL|typedef|FallBackHash
typedef|typedef
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|FallBackHash
typedef|;
end_typedef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|FallBackHash
argument_list|,
argument|fallBackHash
argument_list|)
end_macro
begin_comment
comment|// Returns the user-configured fallback family for the specified script.
end_comment
begin_function
DECL|function|qt_fallback_font_family
name|QString
name|qt_fallback_font_family
parameter_list|(
name|int
name|script
parameter_list|)
block|{
name|FallBackHash
modifier|*
name|hash
init|=
name|fallBackHash
argument_list|()
decl_stmt|;
return|return
name|hash
operator|->
name|value
argument_list|(
name|script
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Sets the fallback family for the specified script.
end_comment
begin_function
DECL|function|qt_x11_set_fallback_font_family
name|Q_GUI_EXPORT
name|void
name|qt_x11_set_fallback_font_family
parameter_list|(
name|int
name|script
parameter_list|,
specifier|const
name|QString
modifier|&
name|family
parameter_list|)
block|{
name|FallBackHash
modifier|*
name|hash
init|=
name|fallBackHash
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|family
operator|.
name|isEmpty
argument_list|()
condition|)
name|hash
operator|->
name|insert
argument_list|(
name|script
argument_list|,
name|family
argument_list|)
expr_stmt|;
else|else
name|hash
operator|->
name|remove
argument_list|(
name|script
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|member|defaultEncodingID
name|int
name|QFontPrivate
operator|::
name|defaultEncodingID
init|=
operator|-
literal|1
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|initialize
name|void
name|QFont
operator|::
name|initialize
parameter_list|()
block|{
specifier|extern
name|int
name|qt_encoding_id_for_mib
argument_list|(
name|int
name|mib
argument_list|)
decl_stmt|;
comment|// from qfontdatabase_x11.cpp
name|QTextCodec
modifier|*
name|codec
init|=
name|QTextCodec
operator|::
name|codecForLocale
argument_list|()
decl_stmt|;
comment|// determine the default encoding id using the locale, otherwise
comment|// fallback to latin1 (mib == 4)
name|int
name|mib
init|=
name|codec
condition|?
name|codec
operator|->
name|mibEnum
argument_list|()
else|:
literal|4
decl_stmt|;
comment|// for asian locales, use the mib for the font codec instead of the locale codec
switch|switch
condition|(
name|mib
condition|)
block|{
case|case
literal|38
case|:
comment|// eucKR
name|mib
operator|=
literal|36
expr_stmt|;
break|break;
case|case
literal|2025
case|:
comment|// GB2312
name|mib
operator|=
literal|57
expr_stmt|;
break|break;
case|case
literal|113
case|:
comment|// GBK
name|mib
operator|=
operator|-
literal|113
expr_stmt|;
break|break;
case|case
literal|114
case|:
comment|// GB18030
name|mib
operator|=
operator|-
literal|114
expr_stmt|;
break|break;
case|case
literal|2026
case|:
comment|// Big5
name|mib
operator|=
operator|-
literal|2026
expr_stmt|;
break|break;
case|case
literal|2101
case|:
comment|// Big5-HKSCS
name|mib
operator|=
operator|-
literal|2101
expr_stmt|;
break|break;
case|case
literal|16
case|:
comment|// JIS7
name|mib
operator|=
literal|15
expr_stmt|;
break|break;
case|case
literal|17
case|:
comment|// SJIS
case|case
literal|18
case|:
comment|// eucJP
name|mib
operator|=
literal|63
expr_stmt|;
break|break;
block|}
comment|// get the default encoding id for the locale encoding...
name|QFontPrivate
operator|::
name|defaultEncodingID
operator|=
name|qt_encoding_id_for_mib
argument_list|(
name|mib
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|QFont
operator|::
name|cleanup
parameter_list|()
block|{
name|QFontCache
operator|::
name|cleanup
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal   X11 Only: Returns the screen with which this font is associated. */
end_comment
begin_function
DECL|function|x11Screen
name|int
name|QFont
operator|::
name|x11Screen
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|screen
return|;
block|}
end_function
begin_comment
comment|/*! \internal     X11 Only: Associate the font with the specified \a screen. */
end_comment
begin_function
DECL|function|x11SetScreen
name|void
name|QFont
operator|::
name|x11SetScreen
parameter_list|(
name|int
name|screen
parameter_list|)
block|{
if|if
condition|(
name|screen
operator|<
literal|0
condition|)
comment|// assume default
name|screen
operator|=
name|QX11Info
operator|::
name|appScreen
argument_list|()
expr_stmt|;
if|if
condition|(
name|screen
operator|==
name|d
operator|->
name|screen
condition|)
return|return;
comment|// nothing to do
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|screen
operator|=
name|screen
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handle
name|Qt
operator|::
name|HANDLE
name|QFont
operator|::
name|handle
parameter_list|()
specifier|const
block|{
name|QFontEngine
modifier|*
name|engine
init|=
name|d
operator|->
name|engineForScript
argument_list|(
name|QUnicodeTables
operator|::
name|Common
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|engine
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|->
name|type
argument_list|()
operator|==
name|QFontEngine
operator|::
name|Multi
condition|)
name|engine
operator|=
cast|static_cast
argument_list|<
name|QFontEngineMulti
operator|*
argument_list|>
argument_list|(
name|engine
argument_list|)
operator|->
name|engine
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|->
name|type
argument_list|()
operator|==
name|QFontEngine
operator|::
name|XLFD
condition|)
return|return
cast|static_cast
argument_list|<
name|QFontEngineXLFD
operator|*
argument_list|>
argument_list|(
name|engine
argument_list|)
operator|->
name|fontStruct
argument_list|()
operator|->
name|fid
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|freetypeFace
name|FT_Face
name|QFont
operator|::
name|freetypeFace
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_FREETYPE
name|QFontEngine
modifier|*
name|engine
init|=
name|d
operator|->
name|engineForScript
argument_list|(
name|QUnicodeTables
operator|::
name|Common
argument_list|)
decl_stmt|;
if|if
condition|(
name|engine
operator|->
name|type
argument_list|()
operator|==
name|QFontEngine
operator|::
name|Multi
condition|)
name|engine
operator|=
cast|static_cast
argument_list|<
name|QFontEngineMulti
operator|*
argument_list|>
argument_list|(
name|engine
argument_list|)
operator|->
name|engine
argument_list|(
literal|0
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FONTCONFIG
if|if
condition|(
name|engine
operator|->
name|type
argument_list|()
operator|==
name|QFontEngine
operator|::
name|Freetype
condition|)
block|{
specifier|const
name|QFontEngineFT
modifier|*
name|ft
init|=
cast|static_cast
argument_list|<
specifier|const
name|QFontEngineFT
operator|*
argument_list|>
argument_list|(
name|engine
argument_list|)
decl_stmt|;
return|return
name|ft
operator|->
name|non_locked_face
argument_list|()
return|;
block|}
elseif|else
endif|#
directive|endif
if|if
condition|(
name|engine
operator|->
name|type
argument_list|()
operator|==
name|QFontEngine
operator|::
name|XLFD
condition|)
block|{
specifier|const
name|QFontEngineXLFD
modifier|*
name|xlfd
init|=
cast|static_cast
argument_list|<
specifier|const
name|QFontEngineXLFD
operator|*
argument_list|>
argument_list|(
name|engine
argument_list|)
decl_stmt|;
return|return
name|xlfd
operator|->
name|non_locked_face
argument_list|()
return|;
block|}
endif|#
directive|endif
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|rawName
name|QString
name|QFont
operator|::
name|rawName
parameter_list|()
specifier|const
block|{
name|QFontEngine
modifier|*
name|engine
init|=
name|d
operator|->
name|engineForScript
argument_list|(
name|QUnicodeTables
operator|::
name|Common
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|engine
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|->
name|type
argument_list|()
operator|==
name|QFontEngine
operator|::
name|Multi
condition|)
name|engine
operator|=
cast|static_cast
argument_list|<
name|QFontEngineMulti
operator|*
argument_list|>
argument_list|(
name|engine
argument_list|)
operator|->
name|engine
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|->
name|type
argument_list|()
operator|==
name|QFontEngine
operator|::
name|XLFD
condition|)
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
name|engine
operator|->
name|name
argument_list|()
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_struct_decl
struct_decl|struct
name|QtFontDesc
struct_decl|;
end_struct_decl
begin_function
DECL|function|setRawName
name|void
name|QFont
operator|::
name|setRawName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
comment|// from qfontdatabase_x11.cpp
specifier|extern
name|bool
name|qt_fillFontDef
argument_list|(
specifier|const
name|QByteArray
operator|&
name|xlfd
argument_list|,
name|QFontDef
operator|*
name|fd
argument_list|,
name|int
name|dpi
argument_list|,
name|QtFontDesc
operator|*
name|desc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qt_fillFontDef
argument_list|(
name|qt_fixXLFD
argument_list|(
name|name
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
operator|&
name|d
operator|->
name|request
argument_list|,
name|d
operator|->
name|dpi
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QFont::setRawName: Invalid XLFD: \"%s\""
argument_list|,
name|name
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|setFamily
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|setRawMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resolve_mask
operator|=
name|QFont
operator|::
name|AllPropertiesResolved
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|lastResortFamily
name|QString
name|QFont
operator|::
name|lastResortFamily
parameter_list|()
specifier|const
block|{
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Helvetica"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|defaultFamily
name|QString
name|QFont
operator|::
name|defaultFamily
parameter_list|()
specifier|const
block|{
switch|switch
condition|(
name|d
operator|->
name|request
operator|.
name|styleHint
condition|)
block|{
case|case
name|QFont
operator|::
name|Times
case|:
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Times"
argument_list|)
return|;
case|case
name|QFont
operator|::
name|Courier
case|:
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Courier"
argument_list|)
return|;
case|case
name|QFont
operator|::
name|Monospace
case|:
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Courier New"
argument_list|)
return|;
case|case
name|QFont
operator|::
name|Cursive
case|:
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Comic Sans MS"
argument_list|)
return|;
case|case
name|QFont
operator|::
name|Fantasy
case|:
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Impact"
argument_list|)
return|;
case|case
name|QFont
operator|::
name|Decorative
case|:
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Old English"
argument_list|)
return|;
case|case
name|QFont
operator|::
name|Helvetica
case|:
case|case
name|QFont
operator|::
name|System
case|:
default|default:
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Helvetica"
argument_list|)
return|;
block|}
block|}
end_function
begin_comment
comment|/*   Returns a last resort raw font name for the font matching algorithm.   This is used if even the last resort family is not available. It   returns \e something, almost no matter what.  The current   implementation tries a wide variety of common fonts, returning the   first one it finds. The implementation may change at any time. */
end_comment
begin_decl_stmt
DECL|variable|tryFonts
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|tryFonts
index|[]
init|=
block|{
literal|"-*-helvetica-medium-r-*-*-*-120-*-*-*-*-*-*"
block|,
literal|"-*-courier-medium-r-*-*-*-120-*-*-*-*-*-*"
block|,
literal|"-*-times-medium-r-*-*-*-120-*-*-*-*-*-*"
block|,
literal|"-*-lucida-medium-r-*-*-*-120-*-*-*-*-*-*"
block|,
literal|"-*-helvetica-*-*-*-*-*-120-*-*-*-*-*-*"
block|,
literal|"-*-courier-*-*-*-*-*-120-*-*-*-*-*-*"
block|,
literal|"-*-times-*-*-*-*-*-120-*-*-*-*-*-*"
block|,
literal|"-*-lucida-*-*-*-*-*-120-*-*-*-*-*-*"
block|,
literal|"-*-helvetica-*-*-*-*-*-*-*-*-*-*-*-*"
block|,
literal|"-*-courier-*-*-*-*-*-*-*-*-*-*-*-*"
block|,
literal|"-*-times-*-*-*-*-*-*-*-*-*-*-*-*"
block|,
literal|"-*-lucida-*-*-*-*-*-*-*-*-*-*-*-*"
block|,
literal|"-*-fixed-*-*-*-*-*-*-*-*-*-*-*-*"
block|,
literal|"6x13"
block|,
literal|"7x13"
block|,
literal|"8x13"
block|,
literal|"9x15"
block|,
literal|"fixed"
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Returns true if the font exists, false otherwise
end_comment
begin_function
DECL|function|fontExists
specifier|static
name|bool
name|fontExists
parameter_list|(
specifier|const
name|QString
modifier|&
name|fontName
parameter_list|)
block|{
name|int
name|count
decl_stmt|;
name|char
modifier|*
modifier|*
name|fontNames
init|=
name|XListFonts
argument_list|(
name|QX11Info
operator|::
name|display
argument_list|()
argument_list|,
operator|(
name|char
operator|*
operator|)
name|fontName
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|32768
argument_list|,
operator|&
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontNames
condition|)
name|XFreeFontNames
argument_list|(
name|fontNames
argument_list|)
expr_stmt|;
return|return
name|count
operator|!=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|lastResortFont
name|QString
name|QFont
operator|::
name|lastResortFont
parameter_list|()
specifier|const
block|{
specifier|static
name|QString
name|last
decl_stmt|;
comment|// already found
if|if
condition|(
operator|!
name|last
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|last
return|;
name|int
name|i
init|=
literal|0
decl_stmt|;
specifier|const
name|char
modifier|*
name|f
decl_stmt|;
while|while
condition|(
operator|(
name|f
operator|=
name|tryFonts
index|[
name|i
index|]
operator|)
condition|)
block|{
name|last
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|fontExists
argument_list|(
name|last
argument_list|)
condition|)
return|return
name|last
return|;
name|i
operator|++
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|CHECK_NULL
argument_list|)
name|qFatal
argument_list|(
literal|"QFontPrivate::lastResortFont: Cannot find any reasonable font"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|last
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
