begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TEXTODFWRITER
end_ifndef
begin_include
include|#
directive|include
file|"qtextodfwriter_p.h"
end_include
begin_include
include|#
directive|include
file|<QImageWriter>
end_include
begin_include
include|#
directive|include
file|<QTextListFormat>
end_include
begin_include
include|#
directive|include
file|<QTextList>
end_include
begin_include
include|#
directive|include
file|<QBuffer>
end_include
begin_include
include|#
directive|include
file|<QUrl>
end_include
begin_include
include|#
directive|include
file|"qtextdocument_p.h"
end_include
begin_include
include|#
directive|include
file|"qtexttable.h"
end_include
begin_include
include|#
directive|include
file|"qtextcursor.h"
end_include
begin_include
include|#
directive|include
file|"qtextimagehandler_p.h"
end_include
begin_include
include|#
directive|include
file|"qzipwriter_p.h"
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|/// Convert pixels to postscript point units
DECL|function|pixelToPoint
specifier|static
name|QString
name|pixelToPoint
parameter_list|(
name|qreal
name|pixels
parameter_list|)
block|{
comment|// we hardcode 96 DPI, we do the same in the ODF importer to have a perfect roundtrip.
return|return
name|QString
operator|::
name|number
argument_list|(
name|pixels
operator|*
literal|72
operator|/
literal|96
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"pt"
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// strategies
end_comment
begin_class
DECL|class|QOutputStrategy
class|class
name|QOutputStrategy
block|{
public|public:
DECL|function|QOutputStrategy
name|QOutputStrategy
parameter_list|()
member_init_list|:
name|contentStream
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|counter
argument_list|(
literal|1
argument_list|)
block|{ }
DECL|function|~QOutputStrategy
specifier|virtual
name|~
name|QOutputStrategy
parameter_list|()
block|{}
specifier|virtual
name|void
name|addFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|bytes
parameter_list|)
function_decl|=
literal|0
function_decl|;
DECL|function|createUniqueImageName
name|QString
name|createUniqueImageName
parameter_list|()
block|{
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Pictures/Picture%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|counter
operator|++
argument_list|)
return|;
block|}
DECL|member|contentStream
name|QIODevice
modifier|*
name|contentStream
decl_stmt|;
DECL|member|counter
name|int
name|counter
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QXmlStreamStrategy
class|class
name|QXmlStreamStrategy
super|:
specifier|public
name|QOutputStrategy
block|{
public|public:
DECL|function|QXmlStreamStrategy
name|QXmlStreamStrategy
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|)
block|{
name|contentStream
operator|=
name|device
expr_stmt|;
block|}
DECL|function|~QXmlStreamStrategy
specifier|virtual
name|~
name|QXmlStreamStrategy
parameter_list|()
block|{
if|if
condition|(
name|contentStream
condition|)
name|contentStream
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
specifier|virtual
name|void
name|addFile
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QByteArray
modifier|&
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
comment|// we ignore this...
block|}
block|}
class|;
end_class
begin_class
DECL|class|QZipStreamStrategy
class|class
name|QZipStreamStrategy
super|:
specifier|public
name|QOutputStrategy
block|{
public|public:
DECL|function|QZipStreamStrategy
name|QZipStreamStrategy
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|)
member_init_list|:
name|zip
argument_list|(
name|device
argument_list|)
member_init_list|,
name|manifestWriter
argument_list|(
operator|&
name|manifest
argument_list|)
block|{
name|QByteArray
name|mime
argument_list|(
literal|"application/vnd.oasis.opendocument.text"
argument_list|)
decl_stmt|;
name|zip
operator|.
name|setCompressionPolicy
argument_list|(
name|QZipWriter
operator|::
name|NeverCompress
argument_list|)
expr_stmt|;
name|zip
operator|.
name|addFile
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"mimetype"
argument_list|)
argument_list|,
name|mime
argument_list|)
expr_stmt|;
comment|// for mime-magick
name|zip
operator|.
name|setCompressionPolicy
argument_list|(
name|QZipWriter
operator|::
name|AutoCompress
argument_list|)
expr_stmt|;
name|contentStream
operator|=
operator|&
name|content
expr_stmt|;
name|content
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|manifest
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|manifestNS
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"urn:oasis:names:tc:opendocument:xmlns:manifest:1.0"
argument_list|)
expr_stmt|;
comment|// prettyfy
name|manifestWriter
operator|.
name|setAutoFormatting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|manifestWriter
operator|.
name|setAutoFormattingIndent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|manifestWriter
operator|.
name|writeNamespace
argument_list|(
name|manifestNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"manifest"
argument_list|)
argument_list|)
expr_stmt|;
name|manifestWriter
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
name|manifestWriter
operator|.
name|writeStartElement
argument_list|(
name|manifestNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"manifest"
argument_list|)
argument_list|)
expr_stmt|;
name|manifestWriter
operator|.
name|writeAttribute
argument_list|(
name|manifestNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"version"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"1.2"
argument_list|)
argument_list|)
expr_stmt|;
name|addFile
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/vnd.oasis.opendocument.text"
argument_list|)
argument_list|)
expr_stmt|;
name|addFile
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"content.xml"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text/xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|~QZipStreamStrategy
name|~
name|QZipStreamStrategy
parameter_list|()
block|{
name|manifestWriter
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
name|manifest
operator|.
name|close
argument_list|()
expr_stmt|;
name|zip
operator|.
name|addFile
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"META-INF/manifest.xml"
argument_list|)
argument_list|,
operator|&
name|manifest
argument_list|)
expr_stmt|;
name|content
operator|.
name|close
argument_list|()
expr_stmt|;
name|zip
operator|.
name|addFile
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"content.xml"
argument_list|)
argument_list|,
operator|&
name|content
argument_list|)
expr_stmt|;
name|zip
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|virtual
name|void
name|addFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|bytes
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
name|zip
operator|.
name|addFile
argument_list|(
name|fileName
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|addFile
argument_list|(
name|fileName
argument_list|,
name|mimeType
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|function|addFile
name|void
name|addFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|)
block|{
name|manifestWriter
operator|.
name|writeEmptyElement
argument_list|(
name|manifestNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"file-entry"
argument_list|)
argument_list|)
expr_stmt|;
name|manifestWriter
operator|.
name|writeAttribute
argument_list|(
name|manifestNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"media-type"
argument_list|)
argument_list|,
name|mimeType
argument_list|)
expr_stmt|;
name|manifestWriter
operator|.
name|writeAttribute
argument_list|(
name|manifestNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"full-path"
argument_list|)
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
DECL|member|content
name|QBuffer
name|content
decl_stmt|;
DECL|member|manifest
name|QBuffer
name|manifest
decl_stmt|;
DECL|member|zip
name|QZipWriter
name|zip
decl_stmt|;
DECL|member|manifestWriter
name|QXmlStreamWriter
name|manifestWriter
decl_stmt|;
DECL|member|manifestNS
name|QString
name|manifestNS
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|bulletChar
specifier|static
name|QString
name|bulletChar
parameter_list|(
name|QTextListFormat
operator|::
name|Style
name|style
parameter_list|)
block|{
switch|switch
condition|(
name|style
condition|)
block|{
case|case
name|QTextListFormat
operator|::
name|ListDisc
case|:
return|return
name|QChar
argument_list|(
literal|0x25cf
argument_list|)
return|;
comment|// bullet character
case|case
name|QTextListFormat
operator|::
name|ListCircle
case|:
return|return
name|QChar
argument_list|(
literal|0x25cb
argument_list|)
return|;
comment|// white circle
case|case
name|QTextListFormat
operator|::
name|ListSquare
case|:
return|return
name|QChar
argument_list|(
literal|0x25a1
argument_list|)
return|;
comment|// white square
case|case
name|QTextListFormat
operator|::
name|ListDecimal
case|:
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"1"
argument_list|)
return|;
case|case
name|QTextListFormat
operator|::
name|ListLowerAlpha
case|:
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"a"
argument_list|)
return|;
case|case
name|QTextListFormat
operator|::
name|ListUpperAlpha
case|:
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"A"
argument_list|)
return|;
case|case
name|QTextListFormat
operator|::
name|ListLowerRoman
case|:
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"i"
argument_list|)
return|;
case|case
name|QTextListFormat
operator|::
name|ListUpperRoman
case|:
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"I"
argument_list|)
return|;
default|default:
case|case
name|QTextListFormat
operator|::
name|ListStyleUndefined
case|:
return|return
name|QString
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|function|writeFrame
name|void
name|QTextOdfWriter
operator|::
name|writeFrame
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QTextFrame
modifier|*
name|frame
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|frame
argument_list|)
expr_stmt|;
specifier|const
name|QTextTable
modifier|*
name|table
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTextTable
operator|*
argument_list|>
argument_list|(
name|frame
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
condition|)
block|{
comment|// Start a table.
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tableNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"table"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEmptyElement
argument_list|(
name|tableNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"table-column"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|tableNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"number-columns-repeated"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|frame
operator|->
name|document
argument_list|()
operator|&&
name|frame
operator|->
name|document
argument_list|()
operator|->
name|rootFrame
argument_list|()
operator|!=
name|frame
condition|)
block|{
comment|// start a section
name|writer
operator|.
name|writeStartElement
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"section"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QTextFrame
operator|::
name|iterator
name|iterator
init|=
name|frame
operator|->
name|begin
argument_list|()
decl_stmt|;
name|QTextFrame
modifier|*
name|child
init|=
literal|0
decl_stmt|;
name|int
name|tableRow
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|!
name|iterator
operator|.
name|atEnd
argument_list|()
condition|)
block|{
if|if
condition|(
name|iterator
operator|.
name|currentFrame
argument_list|()
operator|&&
name|child
operator|!=
name|iterator
operator|.
name|currentFrame
argument_list|()
condition|)
name|writeFrame
argument_list|(
name|writer
argument_list|,
name|iterator
operator|.
name|currentFrame
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
comment|// no frame, its a block
name|QTextBlock
name|block
init|=
name|iterator
operator|.
name|currentBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|table
condition|)
block|{
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
name|block
operator|.
name|position
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableRow
operator|<
name|cell
operator|.
name|row
argument_list|()
condition|)
block|{
if|if
condition|(
name|tableRow
operator|>=
literal|0
condition|)
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// close table row
name|tableRow
operator|=
name|cell
operator|.
name|row
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tableNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"table-row"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tableNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"table-cell"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|columnSpan
argument_list|()
operator|>
literal|1
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|tableNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"number-columns-spanned"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|cell
operator|.
name|columnSpan
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|rowSpan
argument_list|()
operator|>
literal|1
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|tableNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"number-rows-spanned"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|cell
operator|.
name|rowSpan
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|format
argument_list|()
operator|.
name|isTableCellFormat
argument_list|()
condition|)
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
name|tableNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"style-name"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"T%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|cell
operator|.
name|tableCellFormatIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|writeBlock
argument_list|(
name|writer
argument_list|,
name|block
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
condition|)
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// table-cell
block|}
name|child
operator|=
name|iterator
operator|.
name|currentFrame
argument_list|()
expr_stmt|;
operator|++
name|iterator
expr_stmt|;
block|}
if|if
condition|(
name|tableRow
operator|>=
literal|0
condition|)
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// close table-row
if|if
condition|(
name|table
operator|||
operator|(
name|frame
operator|->
name|document
argument_list|()
operator|&&
name|frame
operator|->
name|document
argument_list|()
operator|->
name|rootFrame
argument_list|()
operator|!=
name|frame
operator|)
condition|)
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// close table or section element
block|}
end_function
begin_function
DECL|function|writeBlock
name|void
name|QTextOdfWriter
operator|::
name|writeBlock
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QTextBlock
modifier|&
name|block
parameter_list|)
block|{
if|if
condition|(
name|block
operator|.
name|textList
argument_list|()
condition|)
block|{
comment|// its a list-item
specifier|const
name|int
name|listLevel
init|=
name|block
operator|.
name|textList
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|indent
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_listStack
operator|.
name|isEmpty
argument_list|()
operator|||
name|m_listStack
operator|.
name|top
argument_list|()
operator|!=
name|block
operator|.
name|textList
argument_list|()
condition|)
block|{
comment|// not the same list we were in.
while|while
condition|(
name|m_listStack
operator|.
name|count
argument_list|()
operator|>=
name|listLevel
operator|&&
operator|!
name|m_listStack
operator|.
name|isEmpty
argument_list|()
operator|&&
name|m_listStack
operator|.
name|top
argument_list|()
operator|!=
name|block
operator|.
name|textList
argument_list|()
condition|)
block|{
comment|// we need to close tags
name|m_listStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// list
if|if
condition|(
name|m_listStack
operator|.
name|count
argument_list|()
condition|)
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// list-item
block|}
while|while
condition|(
name|m_listStack
operator|.
name|count
argument_list|()
operator|<
name|listLevel
condition|)
block|{
if|if
condition|(
name|m_listStack
operator|.
name|count
argument_list|()
condition|)
name|writer
operator|.
name|writeStartElement
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"list-item"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"list"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_listStack
operator|.
name|count
argument_list|()
operator|==
name|listLevel
operator|-
literal|1
condition|)
block|{
name|m_listStack
operator|.
name|push
argument_list|(
name|block
operator|.
name|textList
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"style-name"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"L%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|block
operator|.
name|textList
argument_list|()
operator|->
name|formatIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_listStack
operator|.
name|push
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|writer
operator|.
name|writeStartElement
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"list-item"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
operator|!
name|m_listStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|m_listStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// list
if|if
condition|(
name|m_listStack
operator|.
name|count
argument_list|()
condition|)
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// list-item
block|}
block|}
if|if
condition|(
name|block
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// only a linefeed
name|writer
operator|.
name|writeEmptyElement
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"style-name"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"p%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|block
operator|.
name|blockFormatIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|block
operator|.
name|textList
argument_list|()
condition|)
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// numbered-paragraph
return|return;
block|}
name|writer
operator|.
name|writeStartElement
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"style-name"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"p%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|block
operator|.
name|blockFormatIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|QTextBlock
operator|::
name|Iterator
name|frag
init|=
name|block
operator|.
name|begin
argument_list|()
init|;
operator|!
name|frag
operator|.
name|atEnd
argument_list|()
condition|;
operator|++
name|frag
control|)
block|{
name|writer
operator|.
name|writeCharacters
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Trick to make sure that the span gets no linefeed in front of it.
name|writer
operator|.
name|writeStartElement
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"span"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|fragmentText
init|=
name|frag
operator|.
name|fragment
argument_list|()
operator|.
name|text
argument_list|()
decl_stmt|;
if|if
condition|(
name|fragmentText
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|fragmentText
index|[
literal|0
index|]
operator|==
literal|0xFFFC
condition|)
block|{
comment|// its an inline character.
name|writeInlineCharacter
argument_list|(
name|writer
argument_list|,
name|frag
operator|.
name|fragment
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// span
continue|continue;
block|}
name|writer
operator|.
name|writeAttribute
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"style-name"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"c%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|frag
operator|.
name|fragment
argument_list|()
operator|.
name|charFormatIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|escapeNextSpace
init|=
literal|true
decl_stmt|;
name|int
name|precedingSpaces
init|=
literal|0
decl_stmt|;
name|int
name|exportedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|fragmentText
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QChar
name|character
init|=
name|fragmentText
index|[
name|i
index|]
decl_stmt|;
name|bool
name|isSpace
init|=
name|character
operator|.
name|unicode
argument_list|()
operator|==
literal|' '
decl_stmt|;
comment|// find more than one space. -><text:s text:c="2" />
if|if
condition|(
operator|!
name|isSpace
operator|&&
name|escapeNextSpace
operator|&&
name|precedingSpaces
operator|>
literal|1
condition|)
block|{
specifier|const
name|bool
name|startParag
init|=
name|exportedIndex
operator|==
literal|0
operator|&&
name|i
operator|==
name|precedingSpaces
decl_stmt|;
if|if
condition|(
operator|!
name|startParag
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|fragmentText
operator|.
name|mid
argument_list|(
name|exportedIndex
argument_list|,
name|i
operator|-
name|precedingSpaces
operator|+
literal|1
operator|-
name|exportedIndex
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEmptyElement
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"s"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|int
name|count
init|=
name|precedingSpaces
operator|-
operator|(
name|startParag
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|1
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|precedingSpaces
operator|=
literal|0
expr_stmt|;
name|exportedIndex
operator|=
name|i
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
name|fragmentText
operator|.
name|count
argument_list|()
condition|)
block|{
if|if
condition|(
name|character
operator|.
name|unicode
argument_list|()
operator|==
literal|0x2028
condition|)
block|{
comment|// soft-return
comment|//if (exportedIndex< i)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|fragmentText
operator|.
name|mid
argument_list|(
name|exportedIndex
argument_list|,
name|i
operator|-
name|exportedIndex
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEmptyElement
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"line-break"
argument_list|)
argument_list|)
expr_stmt|;
name|exportedIndex
operator|=
name|i
operator|+
literal|1
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|character
operator|.
name|unicode
argument_list|()
operator|==
literal|'\t'
condition|)
block|{
comment|// Tab
comment|//if (exportedIndex< i)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|fragmentText
operator|.
name|mid
argument_list|(
name|exportedIndex
argument_list|,
name|i
operator|-
name|exportedIndex
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEmptyElement
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"tab"
argument_list|)
argument_list|)
expr_stmt|;
name|exportedIndex
operator|=
name|i
operator|+
literal|1
expr_stmt|;
name|precedingSpaces
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isSpace
condition|)
block|{
operator|++
name|precedingSpaces
expr_stmt|;
name|escapeNextSpace
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isSpace
condition|)
block|{
name|precedingSpaces
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
name|writer
operator|.
name|writeCharacters
argument_list|(
name|fragmentText
operator|.
name|mid
argument_list|(
name|exportedIndex
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// span
block|}
name|writer
operator|.
name|writeCharacters
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Trick to make sure that the span gets no linefeed behind it.
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// p
if|if
condition|(
name|block
operator|.
name|textList
argument_list|()
condition|)
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// list-item
block|}
end_function
begin_function
DECL|function|writeInlineCharacter
name|void
name|QTextOdfWriter
operator|::
name|writeInlineCharacter
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QTextFragment
modifier|&
name|fragment
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|drawNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"frame"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_strategy
operator|==
literal|0
condition|)
block|{
comment|// don't do anything.
block|}
elseif|else
if|if
condition|(
name|fragment
operator|.
name|charFormat
argument_list|()
operator|.
name|isImageFormat
argument_list|()
condition|)
block|{
name|QTextImageFormat
name|imageFormat
init|=
name|fragment
operator|.
name|charFormat
argument_list|()
operator|.
name|toImageFormat
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|drawNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|imageFormat
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
comment|// vvv  Copy pasted mostly from Qt =================
name|QImage
name|image
decl_stmt|;
name|QString
name|name
init|=
name|imageFormat
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|":/"
argument_list|)
argument_list|)
condition|)
comment|// auto-detect resources
name|name
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
literal|"qrc"
argument_list|)
argument_list|)
expr_stmt|;
name|QUrl
name|url
init|=
name|QUrl
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|const
name|QVariant
name|data
init|=
name|m_document
operator|->
name|resource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Image
condition|)
block|{
name|image
operator|=
name|qvariant_cast
argument_list|<
name|QImage
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|ByteArray
condition|)
block|{
name|image
operator|.
name|loadFromData
argument_list|(
name|data
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QString
name|context
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// try direct loading
name|name
operator|=
name|imageFormat
operator|.
name|name
argument_list|()
expr_stmt|;
comment|// remove qrc:/ prefix again
name|image
operator|.
name|load
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ^^^ Copy pasted mostly from Qt =================
if|if
condition|(
operator|!
name|image
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QBuffer
name|imageBytes
decl_stmt|;
name|QImageWriter
name|imageWriter
argument_list|(
operator|&
name|imageBytes
argument_list|,
literal|"png"
argument_list|)
decl_stmt|;
name|imageWriter
operator|.
name|write
argument_list|(
name|image
argument_list|)
expr_stmt|;
name|QString
name|filename
init|=
name|m_strategy
operator|->
name|createUniqueImageName
argument_list|()
decl_stmt|;
name|m_strategy
operator|->
name|addFile
argument_list|(
name|filename
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"image/png"
argument_list|)
argument_list|,
name|imageBytes
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
comment|// get the width/height from the format.
name|qreal
name|width
init|=
operator|(
name|imageFormat
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|ImageWidth
argument_list|)
operator|)
condition|?
name|imageFormat
operator|.
name|width
argument_list|()
else|:
name|image
operator|.
name|width
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|svgNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"width"
argument_list|)
argument_list|,
name|pixelToPoint
argument_list|(
name|width
argument_list|)
argument_list|)
expr_stmt|;
name|qreal
name|height
init|=
operator|(
name|imageFormat
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|ImageHeight
argument_list|)
operator|)
condition|?
name|imageFormat
operator|.
name|height
argument_list|()
else|:
name|image
operator|.
name|height
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|svgNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"height"
argument_list|)
argument_list|,
name|pixelToPoint
argument_list|(
name|height
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
name|drawNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"image"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|xlinkNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"href"
argument_list|)
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// image
block|}
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// frame
block|}
end_function
begin_function
DECL|function|writeFormats
name|void
name|QTextOdfWriter
operator|::
name|writeFormats
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QSet
argument_list|<
name|int
argument_list|>
modifier|&
name|formats
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|officeNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"automatic-styles"
argument_list|)
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QTextFormat
argument_list|>
name|allStyles
init|=
name|m_document
operator|->
name|allFormats
argument_list|()
decl_stmt|;
name|QSetIterator
argument_list|<
name|int
argument_list|>
name|formatId
argument_list|(
name|formats
argument_list|)
decl_stmt|;
while|while
condition|(
name|formatId
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|formatIndex
init|=
name|formatId
operator|.
name|next
argument_list|()
decl_stmt|;
name|QTextFormat
name|textFormat
init|=
name|allStyles
operator|.
name|at
argument_list|(
name|formatIndex
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|textFormat
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QTextFormat
operator|::
name|CharFormat
case|:
if|if
condition|(
name|textFormat
operator|.
name|isTableCellFormat
argument_list|()
condition|)
name|writeTableCellFormat
argument_list|(
name|writer
argument_list|,
name|textFormat
operator|.
name|toTableCellFormat
argument_list|()
argument_list|,
name|formatIndex
argument_list|)
expr_stmt|;
else|else
name|writeCharacterFormat
argument_list|(
name|writer
argument_list|,
name|textFormat
operator|.
name|toCharFormat
argument_list|()
argument_list|,
name|formatIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextFormat
operator|::
name|BlockFormat
case|:
name|writeBlockFormat
argument_list|(
name|writer
argument_list|,
name|textFormat
operator|.
name|toBlockFormat
argument_list|()
argument_list|,
name|formatIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextFormat
operator|::
name|ListFormat
case|:
name|writeListFormat
argument_list|(
name|writer
argument_list|,
name|textFormat
operator|.
name|toListFormat
argument_list|()
argument_list|,
name|formatIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextFormat
operator|::
name|FrameFormat
case|:
name|writeFrameFormat
argument_list|(
name|writer
argument_list|,
name|textFormat
operator|.
name|toFrameFormat
argument_list|()
argument_list|,
name|formatIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextFormat
operator|::
name|TableFormat
case|:
empty_stmt|;
break|break;
block|}
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// automatic-styles
block|}
end_function
begin_function
DECL|function|writeBlockFormat
name|void
name|QTextOdfWriter
operator|::
name|writeBlockFormat
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
name|QTextBlockFormat
name|format
parameter_list|,
name|int
name|formatIndex
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"style"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"p%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|formatIndex
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"family"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"paragraph"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"paragraph-properties"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BlockAlignment
argument_list|)
condition|)
block|{
specifier|const
name|Qt
operator|::
name|Alignment
name|alignment
init|=
name|format
operator|.
name|alignment
argument_list|()
operator|&
name|Qt
operator|::
name|AlignHorizontal_Mask
decl_stmt|;
name|QString
name|value
decl_stmt|;
if|if
condition|(
name|alignment
operator|==
name|Qt
operator|::
name|AlignLeading
condition|)
name|value
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"start"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|alignment
operator|==
name|Qt
operator|::
name|AlignTrailing
condition|)
name|value
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"end"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|alignment
operator|==
operator|(
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignAbsolute
operator|)
condition|)
name|value
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|alignment
operator|==
operator|(
name|Qt
operator|::
name|AlignRight
operator||
name|Qt
operator|::
name|AlignAbsolute
operator|)
condition|)
name|value
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|alignment
operator|==
name|Qt
operator|::
name|AlignHCenter
condition|)
name|value
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"center"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|alignment
operator|==
name|Qt
operator|::
name|AlignJustify
condition|)
name|value
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"justify"
argument_list|)
expr_stmt|;
else|else
name|qWarning
argument_list|()
operator|<<
literal|"QTextOdfWriter: unsupported paragraph alignment; "
operator|<<
name|format
operator|.
name|alignment
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isNull
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text-align"
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BlockTopMargin
argument_list|)
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"margin-top"
argument_list|)
argument_list|,
name|pixelToPoint
argument_list|(
name|qMax
argument_list|(
name|qreal
argument_list|(
literal|0.
argument_list|)
argument_list|,
name|format
operator|.
name|topMargin
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BlockBottomMargin
argument_list|)
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"margin-bottom"
argument_list|)
argument_list|,
name|pixelToPoint
argument_list|(
name|qMax
argument_list|(
name|qreal
argument_list|(
literal|0.
argument_list|)
argument_list|,
name|format
operator|.
name|bottomMargin
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BlockLeftMargin
argument_list|)
operator|||
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BlockIndent
argument_list|)
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"margin-left"
argument_list|)
argument_list|,
name|pixelToPoint
argument_list|(
name|qMax
argument_list|(
name|qreal
argument_list|(
literal|0.
argument_list|)
argument_list|,
name|format
operator|.
name|leftMargin
argument_list|()
operator|+
name|format
operator|.
name|indent
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BlockRightMargin
argument_list|)
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"margin-right"
argument_list|)
argument_list|,
name|pixelToPoint
argument_list|(
name|qMax
argument_list|(
name|qreal
argument_list|(
literal|0.
argument_list|)
argument_list|,
name|format
operator|.
name|rightMargin
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|TextIndent
argument_list|)
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text-indent"
argument_list|)
argument_list|,
name|pixelToPoint
argument_list|(
name|format
operator|.
name|textIndent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|PageBreakPolicy
argument_list|)
condition|)
block|{
if|if
condition|(
name|format
operator|.
name|pageBreakPolicy
argument_list|()
operator|&
name|QTextFormat
operator|::
name|PageBreak_AlwaysBefore
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"break-before"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"page"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|pageBreakPolicy
argument_list|()
operator|&
name|QTextFormat
operator|::
name|PageBreak_AlwaysAfter
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"break-after"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"page"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BackgroundBrush
argument_list|)
condition|)
block|{
name|QBrush
name|brush
init|=
name|format
operator|.
name|background
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"background-color"
argument_list|)
argument_list|,
name|brush
operator|.
name|color
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BlockNonBreakableLines
argument_list|)
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"keep-together"
argument_list|)
argument_list|,
name|format
operator|.
name|nonBreakableLines
argument_list|()
condition|?
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"true"
argument_list|)
else|:
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|TabPositions
argument_list|)
condition|)
block|{
name|QList
argument_list|<
name|QTextOption
operator|::
name|Tab
argument_list|>
name|tabs
init|=
name|format
operator|.
name|tabPositions
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"tab-stops"
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QTextOption
operator|::
name|Tab
argument_list|>
operator|::
name|Iterator
name|iterator
init|=
name|tabs
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|!=
name|tabs
operator|.
name|end
argument_list|()
condition|)
block|{
name|writer
operator|.
name|writeEmptyElement
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"tab-stop"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"position"
argument_list|)
argument_list|,
name|pixelToPoint
argument_list|(
name|iterator
operator|->
name|position
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|type
decl_stmt|;
switch|switch
condition|(
name|iterator
operator|->
name|type
condition|)
block|{
case|case
name|QTextOption
operator|::
name|DelimiterTab
case|:
name|type
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"char"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextOption
operator|::
name|LeftTab
case|:
name|type
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextOption
operator|::
name|RightTab
case|:
name|type
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextOption
operator|::
name|CenterTab
case|:
name|type
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"center"
argument_list|)
expr_stmt|;
break|break;
block|}
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|iterator
operator|->
name|delimiter
operator|!=
literal|0
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"char"
argument_list|)
argument_list|,
name|iterator
operator|->
name|delimiter
argument_list|)
expr_stmt|;
operator|++
name|iterator
expr_stmt|;
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// tab-stops
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// paragraph-properties
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// style
block|}
end_function
begin_function
DECL|function|writeCharacterFormat
name|void
name|QTextOdfWriter
operator|::
name|writeCharacterFormat
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
name|QTextCharFormat
name|format
parameter_list|,
name|int
name|formatIndex
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"style"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"c%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|formatIndex
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"family"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEmptyElement
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text-properties"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|fontItalic
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"font-style"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"italic"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|FontWeight
argument_list|)
operator|&&
name|format
operator|.
name|fontWeight
argument_list|()
operator|!=
name|QFont
operator|::
name|Normal
condition|)
block|{
name|QString
name|value
decl_stmt|;
if|if
condition|(
name|format
operator|.
name|fontWeight
argument_list|()
operator|==
name|QFont
operator|::
name|Bold
condition|)
name|value
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"bold"
argument_list|)
expr_stmt|;
else|else
name|value
operator|=
name|QString
operator|::
name|number
argument_list|(
name|format
operator|.
name|fontWeight
argument_list|()
operator|*
literal|10
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"font-weight"
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|FontFamily
argument_list|)
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"font-family"
argument_list|)
argument_list|,
name|format
operator|.
name|fontFamily
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"font-family"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Sans"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Qt default
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|FontPointSize
argument_list|)
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"font-size"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1pt"
argument_list|)
operator|.
name|arg
argument_list|(
name|format
operator|.
name|fontPointSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|FontCapitalization
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|format
operator|.
name|fontCapitalization
argument_list|()
condition|)
block|{
case|case
name|QFont
operator|::
name|MixedCase
case|:
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text-transform"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"none"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|AllUppercase
case|:
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text-transform"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"uppercase"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|AllLowercase
case|:
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text-transform"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"lowercase"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|Capitalize
case|:
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text-transform"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"capitalize"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|SmallCaps
case|:
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"font-variant"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"small-caps"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|FontLetterSpacing
argument_list|)
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"letter-spacing"
argument_list|)
argument_list|,
name|pixelToPoint
argument_list|(
name|format
operator|.
name|fontLetterSpacing
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|FontWordSpacing
argument_list|)
operator|&&
name|format
operator|.
name|fontWordSpacing
argument_list|()
operator|!=
literal|0
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"word-spacing"
argument_list|)
argument_list|,
name|pixelToPoint
argument_list|(
name|format
operator|.
name|fontWordSpacing
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|FontUnderline
argument_list|)
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text-underline-type"
argument_list|)
argument_list|,
name|format
operator|.
name|fontUnderline
argument_list|()
condition|?
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"single"
argument_list|)
else|:
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"none"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|FontOverline
argument_list|)
condition|)
block|{
comment|//   bool   fontOverline () const  TODO
block|}
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|FontStrikeOut
argument_list|)
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text-line-through-type"
argument_list|)
argument_list|,
name|format
operator|.
name|fontStrikeOut
argument_list|()
condition|?
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"single"
argument_list|)
else|:
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"none"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|TextUnderlineColor
argument_list|)
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text-underline-color"
argument_list|)
argument_list|,
name|format
operator|.
name|underlineColor
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|FontFixedPitch
argument_list|)
condition|)
block|{
comment|//   bool   fontFixedPitch () const  TODO
block|}
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|TextUnderlineStyle
argument_list|)
condition|)
block|{
name|QString
name|value
decl_stmt|;
switch|switch
condition|(
name|format
operator|.
name|underlineStyle
argument_list|()
condition|)
block|{
case|case
name|QTextCharFormat
operator|::
name|NoUnderline
case|:
name|value
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"none"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextCharFormat
operator|::
name|SingleUnderline
case|:
name|value
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"solid"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextCharFormat
operator|::
name|DashUnderline
case|:
name|value
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"dash"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextCharFormat
operator|::
name|DotLine
case|:
name|value
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"dotted"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextCharFormat
operator|::
name|DashDotLine
case|:
name|value
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"dash-dot"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextCharFormat
operator|::
name|DashDotDotLine
case|:
name|value
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"dot-dot-dash"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextCharFormat
operator|::
name|WaveUnderline
case|:
name|value
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"wave"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextCharFormat
operator|::
name|SpellCheckUnderline
case|:
name|value
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"none"
argument_list|)
expr_stmt|;
break|break;
block|}
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text-underline-style"
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|TextVerticalAlignment
argument_list|)
condition|)
block|{
name|QString
name|value
decl_stmt|;
switch|switch
condition|(
name|format
operator|.
name|verticalAlignment
argument_list|()
condition|)
block|{
case|case
name|QTextCharFormat
operator|::
name|AlignMiddle
case|:
case|case
name|QTextCharFormat
operator|::
name|AlignNormal
case|:
name|value
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"0%"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextCharFormat
operator|::
name|AlignSuperScript
case|:
name|value
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"super"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextCharFormat
operator|::
name|AlignSubScript
case|:
name|value
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"sub"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextCharFormat
operator|::
name|AlignTop
case|:
name|value
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"100%"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextCharFormat
operator|::
name|AlignBottom
case|:
name|value
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"-100%"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextCharFormat
operator|::
name|AlignBaseline
case|:
break|break;
block|}
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text-position"
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|TextOutline
argument_list|)
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text-outline"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|TextToolTip
argument_list|)
condition|)
block|{
comment|//   QString   toolTip () const  TODO
block|}
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|IsAnchor
argument_list|)
condition|)
block|{
comment|//   bool   isAnchor () const  TODO
block|}
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|AnchorHref
argument_list|)
condition|)
block|{
comment|//   QString   anchorHref () const  TODO
block|}
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|AnchorName
argument_list|)
condition|)
block|{
comment|//   QString   anchorName () const  TODO
block|}
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|ForegroundBrush
argument_list|)
condition|)
block|{
name|QBrush
name|brush
init|=
name|format
operator|.
name|foreground
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"color"
argument_list|)
argument_list|,
name|brush
operator|.
name|color
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BackgroundBrush
argument_list|)
condition|)
block|{
name|QBrush
name|brush
init|=
name|format
operator|.
name|background
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"background-color"
argument_list|)
argument_list|,
name|brush
operator|.
name|color
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// style
block|}
end_function
begin_function
DECL|function|writeListFormat
name|void
name|QTextOdfWriter
operator|::
name|writeListFormat
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
name|QTextListFormat
name|format
parameter_list|,
name|int
name|formatIndex
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"list-style"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"L%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|formatIndex
argument_list|)
argument_list|)
expr_stmt|;
name|QTextListFormat
operator|::
name|Style
name|style
init|=
name|format
operator|.
name|style
argument_list|()
decl_stmt|;
if|if
condition|(
name|style
operator|==
name|QTextListFormat
operator|::
name|ListDecimal
operator|||
name|style
operator|==
name|QTextListFormat
operator|::
name|ListLowerAlpha
operator|||
name|style
operator|==
name|QTextListFormat
operator|::
name|ListUpperAlpha
operator|||
name|style
operator|==
name|QTextListFormat
operator|::
name|ListLowerRoman
operator|||
name|style
operator|==
name|QTextListFormat
operator|::
name|ListUpperRoman
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"list-level-style-number"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"num-format"
argument_list|)
argument_list|,
name|bulletChar
argument_list|(
name|style
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|ListNumberSuffix
argument_list|)
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"num-suffix"
argument_list|)
argument_list|,
name|format
operator|.
name|numberSuffix
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"num-suffix"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|ListNumberPrefix
argument_list|)
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"num-prefix"
argument_list|)
argument_list|,
name|format
operator|.
name|numberPrefix
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"list-level-style-bullet"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"bullet-char"
argument_list|)
argument_list|,
name|bulletChar
argument_list|(
name|style
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|writeAttribute
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"level"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|format
operator|.
name|indent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEmptyElement
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"list-level-properties"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text-align"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"start"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|spacing
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1mm"
argument_list|)
operator|.
name|arg
argument_list|(
name|format
operator|.
name|indent
argument_list|()
operator|*
literal|8
argument_list|)
decl_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"space-before"
argument_list|)
argument_list|,
name|spacing
argument_list|)
expr_stmt|;
comment|//writer.writeAttribute(textNS, QString::fromLatin1("min-label-width"), spacing);
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// list-level-style-*
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// list-style
block|}
end_function
begin_function
DECL|function|writeFrameFormat
name|void
name|QTextOdfWriter
operator|::
name|writeFrameFormat
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
name|QTextFrameFormat
name|format
parameter_list|,
name|int
name|formatIndex
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"style"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"s%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|formatIndex
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"family"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"section"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEmptyElement
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"section-properties"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|FrameTopMargin
argument_list|)
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"margin-top"
argument_list|)
argument_list|,
name|pixelToPoint
argument_list|(
name|qMax
argument_list|(
name|qreal
argument_list|(
literal|0.
argument_list|)
argument_list|,
name|format
operator|.
name|topMargin
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|FrameBottomMargin
argument_list|)
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"margin-bottom"
argument_list|)
argument_list|,
name|pixelToPoint
argument_list|(
name|qMax
argument_list|(
name|qreal
argument_list|(
literal|0.
argument_list|)
argument_list|,
name|format
operator|.
name|bottomMargin
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|FrameLeftMargin
argument_list|)
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"margin-left"
argument_list|)
argument_list|,
name|pixelToPoint
argument_list|(
name|qMax
argument_list|(
name|qreal
argument_list|(
literal|0.
argument_list|)
argument_list|,
name|format
operator|.
name|leftMargin
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|FrameRightMargin
argument_list|)
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"margin-right"
argument_list|)
argument_list|,
name|pixelToPoint
argument_list|(
name|qMax
argument_list|(
name|qreal
argument_list|(
literal|0.
argument_list|)
argument_list|,
name|format
operator|.
name|rightMargin
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// style
comment|// TODO consider putting the following properties in a qt-namespace.
comment|// Position   position () const
comment|// qreal   border () const
comment|// QBrush   borderBrush () const
comment|// BorderStyle   borderStyle () const
comment|// qreal   padding () const
comment|// QTextLength   width () const
comment|// QTextLength   height () const
comment|// PageBreakFlags   pageBreakPolicy () const
block|}
end_function
begin_function
DECL|function|writeTableCellFormat
name|void
name|QTextOdfWriter
operator|::
name|writeTableCellFormat
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
name|QTextTableCellFormat
name|format
parameter_list|,
name|int
name|formatIndex
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"style"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"T%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|formatIndex
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"family"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"table"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEmptyElement
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"table-properties"
argument_list|)
argument_list|)
expr_stmt|;
name|qreal
name|padding
init|=
name|format
operator|.
name|topPadding
argument_list|()
decl_stmt|;
if|if
condition|(
name|padding
operator|>
literal|0
operator|&&
name|padding
operator|==
name|format
operator|.
name|bottomPadding
argument_list|()
operator|&&
name|padding
operator|==
name|format
operator|.
name|leftPadding
argument_list|()
operator|&&
name|padding
operator|==
name|format
operator|.
name|rightPadding
argument_list|()
condition|)
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"padding"
argument_list|)
argument_list|,
name|pixelToPoint
argument_list|(
name|padding
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|padding
operator|>
literal|0
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"padding-top"
argument_list|)
argument_list|,
name|pixelToPoint
argument_list|(
name|padding
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|bottomPadding
argument_list|()
operator|>
literal|0
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"padding-bottom"
argument_list|)
argument_list|,
name|pixelToPoint
argument_list|(
name|format
operator|.
name|bottomPadding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|leftPadding
argument_list|()
operator|>
literal|0
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"padding-left"
argument_list|)
argument_list|,
name|pixelToPoint
argument_list|(
name|format
operator|.
name|leftPadding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|rightPadding
argument_list|()
operator|>
literal|0
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"padding-right"
argument_list|)
argument_list|,
name|pixelToPoint
argument_list|(
name|format
operator|.
name|rightPadding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|TextVerticalAlignment
argument_list|)
condition|)
block|{
name|QString
name|pos
decl_stmt|;
switch|switch
condition|(
name|format
operator|.
name|verticalAlignment
argument_list|()
condition|)
block|{
case|case
name|QTextCharFormat
operator|::
name|AlignMiddle
case|:
name|pos
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"middle"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextCharFormat
operator|::
name|AlignTop
case|:
name|pos
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"top"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextCharFormat
operator|::
name|AlignBottom
case|:
name|pos
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"bottom"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|pos
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"automatic"
argument_list|)
expr_stmt|;
break|break;
block|}
name|writer
operator|.
name|writeAttribute
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"vertical-align"
argument_list|)
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
comment|// TODO
comment|// ODF just search for style-table-cell-properties-attlist)
comment|// QTextFormat::BackgroundImageUrl
comment|// format.background
comment|// QTextFormat::FrameBorder
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// style
block|}
end_function
begin_comment
comment|///////////////////////
end_comment
begin_constructor
DECL|function|QTextOdfWriter
name|QTextOdfWriter
operator|::
name|QTextOdfWriter
parameter_list|(
specifier|const
name|QTextDocument
modifier|&
name|document
parameter_list|,
name|QIODevice
modifier|*
name|device
parameter_list|)
member_init_list|:
name|officeNS
argument_list|(
name|QLatin1String
argument_list|(
literal|"urn:oasis:names:tc:opendocument:xmlns:office:1.0"
argument_list|)
argument_list|)
member_init_list|,
name|textNS
argument_list|(
name|QLatin1String
argument_list|(
literal|"urn:oasis:names:tc:opendocument:xmlns:text:1.0"
argument_list|)
argument_list|)
member_init_list|,
name|styleNS
argument_list|(
name|QLatin1String
argument_list|(
literal|"urn:oasis:names:tc:opendocument:xmlns:style:1.0"
argument_list|)
argument_list|)
member_init_list|,
name|foNS
argument_list|(
name|QLatin1String
argument_list|(
literal|"urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0"
argument_list|)
argument_list|)
member_init_list|,
name|tableNS
argument_list|(
name|QLatin1String
argument_list|(
literal|"urn:oasis:names:tc:opendocument:xmlns:table:1.0"
argument_list|)
argument_list|)
member_init_list|,
name|drawNS
argument_list|(
name|QLatin1String
argument_list|(
literal|"urn:oasis:names:tc:opendocument:xmlns:drawing:1.0"
argument_list|)
argument_list|)
member_init_list|,
name|xlinkNS
argument_list|(
name|QLatin1String
argument_list|(
literal|"http://www.w3.org/1999/xlink"
argument_list|)
argument_list|)
member_init_list|,
name|svgNS
argument_list|(
name|QLatin1String
argument_list|(
literal|"urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0"
argument_list|)
argument_list|)
member_init_list|,
name|m_document
argument_list|(
operator|&
name|document
argument_list|)
member_init_list|,
name|m_device
argument_list|(
name|device
argument_list|)
member_init_list|,
name|m_strategy
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_codec
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_createArchive
argument_list|(
literal|true
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|writeAll
name|bool
name|QTextOdfWriter
operator|::
name|writeAll
parameter_list|()
block|{
if|if
condition|(
name|m_createArchive
condition|)
name|m_strategy
operator|=
operator|new
name|QZipStreamStrategy
argument_list|(
name|m_device
argument_list|)
expr_stmt|;
else|else
name|m_strategy
operator|=
operator|new
name|QXmlStreamStrategy
argument_list|(
name|m_device
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_device
operator|->
name|isWritable
argument_list|()
operator|&&
operator|!
name|m_device
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QTextOdfWriter::writeAll: the device can not be opened for writing"
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QXmlStreamWriter
name|writer
argument_list|(
name|m_strategy
operator|->
name|contentStream
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TEXTCODEC
if|if
condition|(
name|m_codec
condition|)
name|writer
operator|.
name|setCodec
argument_list|(
name|m_codec
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// prettyfy
name|writer
operator|.
name|setAutoFormatting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setAutoFormattingIndent
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
name|officeNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"office"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
name|textNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
name|styleNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"style"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
name|foNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"fo"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
name|tableNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"table"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
name|drawNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"draw"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
name|xlinkNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"xlink"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
name|svgNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"svg"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
name|officeNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"document-content"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
name|officeNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"version"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"1.2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// add fragments. (for character formats)
name|QTextDocumentPrivate
operator|::
name|FragmentIterator
name|fragIt
init|=
name|m_document
operator|->
name|docHandle
argument_list|()
operator|->
name|begin
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
name|formats
decl_stmt|;
while|while
condition|(
name|fragIt
operator|!=
name|m_document
operator|->
name|docHandle
argument_list|()
operator|->
name|end
argument_list|()
condition|)
block|{
specifier|const
name|QTextFragmentData
modifier|*
specifier|const
name|frag
init|=
name|fragIt
operator|.
name|value
argument_list|()
decl_stmt|;
name|formats
operator|<<
name|frag
operator|->
name|format
expr_stmt|;
operator|++
name|fragIt
expr_stmt|;
block|}
comment|// add blocks (for blockFormats)
name|QTextDocumentPrivate
operator|::
name|BlockMap
modifier|&
name|blocks
init|=
name|m_document
operator|->
name|docHandle
argument_list|()
operator|->
name|blockMap
argument_list|()
decl_stmt|;
name|QTextDocumentPrivate
operator|::
name|BlockMap
operator|::
name|Iterator
name|blockIt
init|=
name|blocks
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|blockIt
operator|!=
name|blocks
operator|.
name|end
argument_list|()
condition|)
block|{
specifier|const
name|QTextBlockData
modifier|*
specifier|const
name|block
init|=
name|blockIt
operator|.
name|value
argument_list|()
decl_stmt|;
name|formats
operator|<<
name|block
operator|->
name|format
expr_stmt|;
operator|++
name|blockIt
expr_stmt|;
block|}
comment|// add objects for lists, frames and tables
name|QVector
argument_list|<
name|QTextFormat
argument_list|>
name|allFormats
init|=
name|m_document
operator|->
name|allFormats
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|copy
init|=
name|formats
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|QList
argument_list|<
name|int
argument_list|>
operator|::
name|Iterator
name|iter
init|=
name|copy
operator|.
name|begin
argument_list|()
init|;
name|iter
operator|!=
name|copy
operator|.
name|end
argument_list|()
condition|;
operator|++
name|iter
control|)
block|{
name|QTextObject
modifier|*
name|object
init|=
name|m_document
operator|->
name|objectForFormat
argument_list|(
name|allFormats
index|[
operator|*
name|iter
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
condition|)
name|formats
operator|<<
name|object
operator|->
name|formatIndex
argument_list|()
expr_stmt|;
block|}
name|writeFormats
argument_list|(
name|writer
argument_list|,
name|formats
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
name|officeNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"body"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
name|officeNS
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|QTextFrame
modifier|*
name|rootFrame
init|=
name|m_document
operator|->
name|rootFrame
argument_list|()
decl_stmt|;
name|writeFrame
argument_list|(
name|writer
argument_list|,
name|rootFrame
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// text
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// body
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// document-content
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
operator|delete
name|m_strategy
expr_stmt|;
name|m_strategy
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TEXTODFWRITER
end_comment
end_unit
