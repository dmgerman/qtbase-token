begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QFRAGMENTMAP_P_H
end_ifndef
begin_define
DECL|macro|QFRAGMENTMAP_P_H
define|#
directive|define
name|QFRAGMENTMAP_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtCore/qglobal.h"
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<private/qtools_p.h>
end_include
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|N
name|template
operator|<
name|int
name|N
operator|=
literal|1
operator|>
name|class
name|QFragment
block|{
name|public
operator|:
name|quint32
name|parent
block|;
name|quint32
name|left
block|;
name|quint32
name|right
block|;
name|quint32
name|color
block|;
name|quint32
name|size_left_array
index|[
name|N
index|]
block|;
name|quint32
name|size_array
index|[
name|N
index|]
block|;     enum
block|{
name|size_array_max
operator|=
name|N
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|Fragment
operator|>
name|class
name|QFragmentMapData
block|{     enum
name|Color
block|{
name|Red
block|,
name|Black
block|}
block|;
name|public
operator|:
name|QFragmentMapData
argument_list|()
block|;
operator|~
name|QFragmentMapData
argument_list|()
block|;
name|void
name|init
argument_list|()
block|;
name|class
name|Header
block|{
name|public
operator|:
name|quint32
name|root
block|;
comment|// this relies on being at the same position as parent in the fragment struct
name|quint32
name|tag
block|;
name|quint32
name|freelist
block|;
name|quint32
name|node_count
block|;
name|quint32
name|allocated
block|;     }
block|;       enum
block|{
name|fragmentSize
operator|=
expr|sizeof
operator|(
name|Fragment
operator|)
block|}
block|;
name|int
name|length
argument_list|(
argument|uint field =
literal|0
argument_list|)
specifier|const
block|;
specifier|inline
name|Fragment
operator|*
name|fragment
argument_list|(
argument|uint index
argument_list|)
block|{
return|return
operator|(
name|fragments
operator|+
name|index
operator|)
return|;
block|}
specifier|inline
specifier|const
name|Fragment
operator|*
name|fragment
argument_list|(
argument|uint index
argument_list|)
specifier|const
block|{
return|return
operator|(
name|fragments
operator|+
name|index
operator|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|Fragment
modifier|&
name|F
parameter_list|(
name|uint
name|index
parameter_list|)
block|{
return|return
name|fragments
index|[
name|index
index|]
return|;
block|}
end_function
begin_decl_stmt
specifier|inline
specifier|const
name|Fragment
modifier|&
name|F
argument_list|(
name|uint
name|index
argument_list|)
decl|const
block|{
return|return
name|fragments
index|[
name|index
index|]
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|bool
name|isRoot
argument_list|(
name|uint
name|index
argument_list|)
decl|const
block|{
return|return
operator|!
name|fragment
argument_list|(
name|index
argument_list|)
operator|->
name|parent
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|uint
name|position
argument_list|(
name|uint
name|node
argument_list|,
name|uint
name|field
operator|=
literal|0
argument_list|)
decl|const
block|{
name|Q_ASSERT
argument_list|(
name|field
operator|<
name|Fragment
operator|::
name|size_array_max
argument_list|)
expr_stmt|;
specifier|const
name|Fragment
modifier|*
name|f
init|=
name|fragment
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|uint
name|offset
init|=
name|f
operator|->
name|size_left_array
index|[
name|field
index|]
decl_stmt|;
while|while
condition|(
name|f
operator|->
name|parent
condition|)
block|{
name|uint
name|p
init|=
name|f
operator|->
name|parent
decl_stmt|;
name|f
operator|=
name|fragment
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|->
name|right
operator|==
name|node
condition|)
name|offset
operator|+=
name|f
operator|->
name|size_left_array
index|[
name|field
index|]
operator|+
name|f
operator|->
name|size_array
index|[
name|field
index|]
expr_stmt|;
name|node
operator|=
name|p
expr_stmt|;
block|}
return|return
name|offset
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|uint
name|sizeRight
argument_list|(
name|uint
name|node
argument_list|,
name|uint
name|field
operator|=
literal|0
argument_list|)
decl|const
block|{
name|Q_ASSERT
argument_list|(
name|field
operator|<
name|Fragment
operator|::
name|size_array_max
argument_list|)
expr_stmt|;
name|uint
name|sr
init|=
literal|0
decl_stmt|;
specifier|const
name|Fragment
modifier|*
name|f
init|=
name|fragment
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|node
operator|=
name|f
operator|->
name|right
expr_stmt|;
while|while
condition|(
name|node
condition|)
block|{
name|f
operator|=
name|fragment
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|sr
operator|+=
name|f
operator|->
name|size_left_array
index|[
name|field
index|]
operator|+
name|f
operator|->
name|size_array
index|[
name|field
index|]
expr_stmt|;
name|node
operator|=
name|f
operator|->
name|right
expr_stmt|;
block|}
return|return
name|sr
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|uint
name|sizeLeft
argument_list|(
name|uint
name|node
argument_list|,
name|uint
name|field
operator|=
literal|0
argument_list|)
decl|const
block|{
name|Q_ASSERT
argument_list|(
name|field
operator|<
name|Fragment
operator|::
name|size_array_max
argument_list|)
expr_stmt|;
return|return
name|fragment
argument_list|(
name|node
argument_list|)
operator|->
name|size_left_array
index|[
name|field
index|]
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|uint
name|size
argument_list|(
name|uint
name|node
argument_list|,
name|uint
name|field
operator|=
literal|0
argument_list|)
decl|const
block|{
name|Q_ASSERT
argument_list|(
name|field
operator|<
name|Fragment
operator|::
name|size_array_max
argument_list|)
expr_stmt|;
return|return
name|fragment
argument_list|(
name|node
argument_list|)
operator|->
name|size_array
index|[
name|field
index|]
return|;
block|}
end_decl_stmt
begin_function
specifier|inline
name|void
name|setSize
parameter_list|(
name|uint
name|node
parameter_list|,
name|int
name|new_size
parameter_list|,
name|uint
name|field
init|=
literal|0
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|field
operator|<
name|Fragment
operator|::
name|size_array_max
argument_list|)
expr_stmt|;
name|Fragment
modifier|*
name|f
init|=
name|fragment
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|int
name|diff
init|=
name|new_size
operator|-
name|f
operator|->
name|size_array
index|[
name|field
index|]
decl_stmt|;
name|f
operator|->
name|size_array
index|[
name|field
index|]
operator|=
name|new_size
expr_stmt|;
while|while
condition|(
name|f
operator|->
name|parent
condition|)
block|{
name|uint
name|p
init|=
name|f
operator|->
name|parent
decl_stmt|;
name|f
operator|=
name|fragment
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|->
name|left
operator|==
name|node
condition|)
name|f
operator|->
name|size_left_array
index|[
name|field
index|]
operator|+=
name|diff
expr_stmt|;
name|node
operator|=
name|p
expr_stmt|;
block|}
block|}
end_function
begin_decl_stmt
name|uint
name|findNode
argument_list|(
name|int
name|k
argument_list|,
name|uint
name|field
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|uint
name|insert_single
parameter_list|(
name|int
name|key
parameter_list|,
name|uint
name|length
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|uint
name|erase_single
parameter_list|(
name|uint
name|f
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|uint
name|minimum
argument_list|(
name|uint
name|n
argument_list|)
decl|const
block|{
while|while
condition|(
name|n
operator|&&
name|fragment
argument_list|(
name|n
argument_list|)
operator|->
name|left
condition|)
name|n
operator|=
name|fragment
argument_list|(
name|n
argument_list|)
operator|->
name|left
expr_stmt|;
return|return
name|n
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|uint
name|maximum
argument_list|(
name|uint
name|n
argument_list|)
decl|const
block|{
while|while
condition|(
name|n
operator|&&
name|fragment
argument_list|(
name|n
argument_list|)
operator|->
name|right
condition|)
name|n
operator|=
name|fragment
argument_list|(
name|n
argument_list|)
operator|->
name|right
expr_stmt|;
return|return
name|n
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|uint
name|next
argument_list|(
name|uint
name|n
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|previous
argument_list|(
name|uint
name|n
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
specifier|inline
name|uint
name|root
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|head
operator|->
name|root
operator|||
operator|!
name|fragment
argument_list|(
name|head
operator|->
name|root
argument_list|)
operator|->
name|parent
argument_list|)
block|;
return|return
name|head
operator|->
name|root
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setRoot
parameter_list|(
name|uint
name|new_root
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|head
operator|->
name|root
operator|||
operator|!
name|fragment
argument_list|(
name|new_root
argument_list|)
operator|->
name|parent
argument_list|)
expr_stmt|;
name|head
operator|->
name|root
operator|=
name|new_root
expr_stmt|;
block|}
end_function
begin_decl_stmt
specifier|inline
name|bool
name|isValid
argument_list|(
name|uint
name|n
argument_list|)
decl|const
block|{
return|return
name|n
operator|>
literal|0
operator|&&
name|n
operator|!=
name|head
operator|->
name|freelist
return|;
block|}
end_decl_stmt
begin_union
union|union
block|{
name|Header
modifier|*
name|head
decl_stmt|;
name|Fragment
modifier|*
name|fragments
decl_stmt|;
block|}
union|;
end_union
begin_label
name|private
label|:
end_label
begin_function_decl
name|void
name|rotateLeft
parameter_list|(
name|uint
name|x
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|rotateRight
parameter_list|(
name|uint
name|x
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|rebalance
parameter_list|(
name|uint
name|x
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|removeAndRebalance
parameter_list|(
name|uint
name|z
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|uint
name|createFragment
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|freeFragment
parameter_list|(
name|uint
name|f
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Fragment
operator|>
DECL|function|QFragmentMapData
name|QFragmentMapData
operator|<
name|Fragment
operator|>
operator|::
name|QFragmentMapData
argument_list|()
operator|:
name|fragments
argument_list|(
literal|0
argument_list|)
block|{
name|init
argument_list|()
block|; }
name|template
operator|<
name|class
name|Fragment
operator|>
DECL|function|init
name|void
name|QFragmentMapData
operator|<
name|Fragment
operator|>
operator|::
name|init
argument_list|()
block|{
comment|// the following code will realloc an existing fragment or create a new one.
comment|// it will also ignore errors when shrinking an existing fragment.
name|Fragment
operator|*
name|newFragments
operator|=
operator|(
name|Fragment
operator|*
operator|)
name|realloc
argument_list|(
name|fragments
argument_list|,
literal|64
operator|*
name|fragmentSize
argument_list|)
block|;
if|if
condition|(
name|newFragments
condition|)
block|{
name|fragments
operator|=
name|newFragments
expr_stmt|;
name|head
operator|->
name|allocated
operator|=
literal|64
expr_stmt|;
block|}
name|Q_CHECK_PTR
argument_list|(
name|fragments
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|head
operator|->
name|tag
operator|=
operator|(
operator|(
operator|(
name|quint32
operator|)
literal|'p'
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
operator|(
name|quint32
operator|)
literal|'m'
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
operator|(
name|quint32
operator|)
literal|'a'
operator|)
operator|<<
literal|8
operator|)
operator||
literal|'p'
expr_stmt|;
end_expr_stmt
begin_comment
comment|//TAG('p', 'm', 'a', 'p');
end_comment
begin_expr_stmt
name|head
operator|->
name|root
operator|=
literal|0
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|head
operator|->
name|freelist
operator|=
literal|1
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|head
operator|->
name|node_count
operator|=
literal|0
expr_stmt|;
end_expr_stmt
begin_comment
comment|// mark all items to the right as unused
end_comment
begin_expr_stmt
name|F
argument_list|(
name|head
operator|->
name|freelist
argument_list|)
operator|.
name|right
operator|=
literal|0
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Fragment
operator|>
DECL|function|~QFragmentMapData
name|QFragmentMapData
operator|<
name|Fragment
operator|>
operator|::
operator|~
name|QFragmentMapData
argument_list|()
block|{
name|free
argument_list|(
name|fragments
argument_list|)
block|; }
name|template
operator|<
name|class
name|Fragment
operator|>
DECL|function|createFragment
name|uint
name|QFragmentMapData
operator|<
name|Fragment
operator|>
operator|::
name|createFragment
argument_list|()
block|{
name|Q_ASSERT
argument_list|(
name|head
operator|->
name|freelist
operator|<=
name|head
operator|->
name|allocated
argument_list|)
block|;
name|uint
name|freePos
operator|=
name|head
operator|->
name|freelist
block|;
if|if
condition|(
name|freePos
operator|==
name|head
operator|->
name|allocated
condition|)
block|{
comment|// need to create some free space
name|uint
name|needed
init|=
name|qAllocMore
argument_list|(
operator|(
name|freePos
operator|+
literal|1
operator|)
operator|*
name|fragmentSize
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|needed
operator|/
name|fragmentSize
operator|>
name|head
operator|->
name|allocated
argument_list|)
expr_stmt|;
name|Fragment
modifier|*
name|newFragments
init|=
operator|(
name|Fragment
operator|*
operator|)
name|realloc
argument_list|(
name|fragments
argument_list|,
name|needed
argument_list|)
decl_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|newFragments
argument_list|)
expr_stmt|;
name|fragments
operator|=
name|newFragments
expr_stmt|;
name|head
operator|->
name|allocated
operator|=
name|needed
operator|/
name|fragmentSize
expr_stmt|;
name|F
argument_list|(
name|freePos
argument_list|)
operator|.
name|right
operator|=
literal|0
expr_stmt|;
block|}
name|uint
name|nextPos
operator|=
name|F
argument_list|(
name|freePos
argument_list|)
operator|.
name|right
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
operator|!
name|nextPos
condition|)
block|{
name|nextPos
operator|=
name|freePos
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|nextPos
operator|<
name|head
operator|->
name|allocated
condition|)
name|F
argument_list|(
name|nextPos
argument_list|)
operator|.
name|right
operator|=
literal|0
expr_stmt|;
block|}
end_if
begin_expr_stmt
name|head
operator|->
name|freelist
operator|=
name|nextPos
expr_stmt|;
end_expr_stmt
begin_expr_stmt
operator|++
name|head
operator|->
name|node_count
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|freePos
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Fragment
operator|>
DECL|function|freeFragment
name|void
name|QFragmentMapData
operator|<
name|Fragment
operator|>
operator|::
name|freeFragment
argument_list|(
argument|uint i
argument_list|)
block|{
name|F
argument_list|(
name|i
argument_list|)
operator|.
name|right
operator|=
name|head
operator|->
name|freelist
block|;
name|head
operator|->
name|freelist
operator|=
name|i
block|;
operator|--
name|head
operator|->
name|node_count
block|; }
name|template
operator|<
name|class
name|Fragment
operator|>
DECL|function|next
name|uint
name|QFragmentMapData
operator|<
name|Fragment
operator|>
operator|::
name|next
argument_list|(
argument|uint n
argument_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|n
argument_list|)
block|;
if|if
condition|(
name|F
argument_list|(
name|n
argument_list|)
operator|.
name|right
condition|)
block|{
name|n
operator|=
name|F
argument_list|(
name|n
argument_list|)
operator|.
name|right
expr_stmt|;
while|while
condition|(
name|F
argument_list|(
name|n
argument_list|)
operator|.
name|left
condition|)
name|n
operator|=
name|F
argument_list|(
name|n
argument_list|)
operator|.
name|left
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|uint
name|y
init|=
name|F
argument_list|(
name|n
argument_list|)
operator|.
name|parent
decl_stmt|;
while|while
condition|(
name|F
argument_list|(
name|n
argument_list|)
operator|.
name|parent
operator|&&
name|n
operator|==
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|right
condition|)
block|{
name|n
operator|=
name|y
expr_stmt|;
name|y
operator|=
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|parent
expr_stmt|;
block|}
name|n
operator|=
name|y
expr_stmt|;
block|}
end_else
begin_return
return|return
name|n
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Fragment
operator|>
DECL|function|previous
name|uint
name|QFragmentMapData
operator|<
name|Fragment
operator|>
operator|::
name|previous
argument_list|(
argument|uint n
argument_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|n
condition|)
return|return
name|maximum
argument_list|(
name|root
argument_list|()
argument_list|)
return|;
end_expr_stmt
begin_if
if|if
condition|(
name|F
argument_list|(
name|n
argument_list|)
operator|.
name|left
condition|)
block|{
name|n
operator|=
name|F
argument_list|(
name|n
argument_list|)
operator|.
name|left
expr_stmt|;
while|while
condition|(
name|F
argument_list|(
name|n
argument_list|)
operator|.
name|right
condition|)
name|n
operator|=
name|F
argument_list|(
name|n
argument_list|)
operator|.
name|right
expr_stmt|;
block|}
else|else
block|{
name|uint
name|y
init|=
name|F
argument_list|(
name|n
argument_list|)
operator|.
name|parent
decl_stmt|;
while|while
condition|(
name|F
argument_list|(
name|n
argument_list|)
operator|.
name|parent
operator|&&
name|n
operator|==
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|left
condition|)
block|{
name|n
operator|=
name|y
expr_stmt|;
name|y
operator|=
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|parent
expr_stmt|;
block|}
name|n
operator|=
name|y
expr_stmt|;
block|}
end_if
begin_return
return|return
name|n
return|;
end_return
begin_comment
unit|}
comment|/*      x              y       \            / \        y    -->   x   b       / \          \      a   b          a */
end_comment
begin_expr_stmt
unit|template
operator|<
name|class
name|Fragment
operator|>
DECL|function|rotateLeft
name|void
name|QFragmentMapData
operator|<
name|Fragment
operator|>
operator|::
name|rotateLeft
argument_list|(
argument|uint x
argument_list|)
block|{
name|uint
name|p
operator|=
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|parent
block|;
name|uint
name|y
operator|=
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|right
block|;
if|if
condition|(
name|y
condition|)
block|{
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|right
operator|=
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|left
expr_stmt|;
if|if
condition|(
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|left
condition|)
name|F
argument_list|(
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|left
argument_list|)
operator|.
name|parent
operator|=
name|x
expr_stmt|;
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|left
operator|=
name|x
expr_stmt|;
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|parent
operator|=
name|p
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|right
operator|=
literal|0
expr_stmt|;
block|}
end_else
begin_if
if|if
condition|(
operator|!
name|p
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|head
operator|->
name|root
operator|==
name|x
argument_list|)
expr_stmt|;
name|head
operator|->
name|root
operator|=
name|y
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|x
operator|==
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|left
condition|)
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|left
operator|=
name|y
expr_stmt|;
else|else
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|right
operator|=
name|y
expr_stmt|;
end_if
begin_expr_stmt
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|parent
operator|=
name|y
expr_stmt|;
end_expr_stmt
begin_for
for|for
control|(
name|uint
name|field
init|=
literal|0
init|;
name|field
operator|<
name|Fragment
operator|::
name|size_array_max
condition|;
operator|++
name|field
control|)
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|size_left_array
index|[
name|field
index|]
operator|+=
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|size_left_array
index|[
name|field
index|]
operator|+
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|size_array
index|[
name|field
index|]
expr_stmt|;
end_for
begin_comment
unit|}
comment|/*          x          y         /          / \        y    -->   a   x       / \            /      a   b          b */
end_comment
begin_expr_stmt
unit|template
operator|<
name|class
name|Fragment
operator|>
DECL|function|rotateRight
name|void
name|QFragmentMapData
operator|<
name|Fragment
operator|>
operator|::
name|rotateRight
argument_list|(
argument|uint x
argument_list|)
block|{
name|uint
name|y
operator|=
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|left
block|;
name|uint
name|p
operator|=
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|parent
block|;
if|if
condition|(
name|y
condition|)
block|{
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|left
operator|=
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|right
expr_stmt|;
if|if
condition|(
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|right
condition|)
name|F
argument_list|(
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|right
argument_list|)
operator|.
name|parent
operator|=
name|x
expr_stmt|;
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|right
operator|=
name|x
expr_stmt|;
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|parent
operator|=
name|p
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|left
operator|=
literal|0
expr_stmt|;
block|}
end_else
begin_if
if|if
condition|(
operator|!
name|p
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|head
operator|->
name|root
operator|==
name|x
argument_list|)
expr_stmt|;
name|head
operator|->
name|root
operator|=
name|y
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|x
operator|==
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|right
condition|)
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|right
operator|=
name|y
expr_stmt|;
else|else
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|left
operator|=
name|y
expr_stmt|;
end_if
begin_expr_stmt
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|parent
operator|=
name|y
expr_stmt|;
end_expr_stmt
begin_for
for|for
control|(
name|uint
name|field
init|=
literal|0
init|;
name|field
operator|<
name|Fragment
operator|::
name|size_array_max
condition|;
operator|++
name|field
control|)
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|size_left_array
index|[
name|field
index|]
operator|-=
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|size_left_array
index|[
name|field
index|]
operator|+
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|size_array
index|[
name|field
index|]
expr_stmt|;
end_for
begin_expr_stmt
unit|}   template
operator|<
name|class
name|Fragment
operator|>
DECL|function|rebalance
name|void
name|QFragmentMapData
operator|<
name|Fragment
operator|>
operator|::
name|rebalance
argument_list|(
argument|uint x
argument_list|)
block|{
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|color
operator|=
name|Red
block|;
while|while
condition|(
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|parent
operator|&&
name|F
argument_list|(
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|parent
argument_list|)
operator|.
name|color
operator|==
name|Red
condition|)
block|{
name|uint
name|p
init|=
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|parent
decl_stmt|;
name|uint
name|pp
init|=
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|parent
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|pp
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|==
name|F
argument_list|(
name|pp
argument_list|)
operator|.
name|left
condition|)
block|{
name|uint
name|y
init|=
name|F
argument_list|(
name|pp
argument_list|)
operator|.
name|right
decl_stmt|;
if|if
condition|(
name|y
operator|&&
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|color
operator|==
name|Red
condition|)
block|{
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|color
operator|=
name|Black
expr_stmt|;
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|color
operator|=
name|Black
expr_stmt|;
name|F
argument_list|(
name|pp
argument_list|)
operator|.
name|color
operator|=
name|Red
expr_stmt|;
name|x
operator|=
name|pp
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
if|if
condition|(
name|x
operator|==
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|right
condition|)
block|{
name|x
operator|=
name|p
expr_stmt|;
name|rotateLeft
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|p
operator|=
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|parent
expr_stmt|;
name|pp
operator|=
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|parent
expr_stmt|;
block|}
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|color
operator|=
name|Black
expr_stmt|;
if|if
condition|(
name|pp
condition|)
block|{
name|F
argument_list|(
name|pp
argument_list|)
operator|.
name|color
operator|=
name|Red
expr_stmt|;
name|rotateRight
argument_list|(
name|pp
argument_list|)
expr_stmt|;
block|}
block|}
end_else
begin_block
unit|} else
block|{
name|uint
name|y
init|=
name|F
argument_list|(
name|pp
argument_list|)
operator|.
name|left
decl_stmt|;
if|if
condition|(
name|y
operator|&&
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|color
operator|==
name|Red
condition|)
block|{
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|color
operator|=
name|Black
expr_stmt|;
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|color
operator|=
name|Black
expr_stmt|;
name|F
argument_list|(
name|pp
argument_list|)
operator|.
name|color
operator|=
name|Red
expr_stmt|;
name|x
operator|=
name|pp
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|x
operator|==
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|left
condition|)
block|{
name|x
operator|=
name|p
expr_stmt|;
name|rotateRight
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|p
operator|=
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|parent
expr_stmt|;
name|pp
operator|=
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|parent
expr_stmt|;
block|}
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|color
operator|=
name|Black
expr_stmt|;
if|if
condition|(
name|pp
condition|)
block|{
name|F
argument_list|(
name|pp
argument_list|)
operator|.
name|color
operator|=
name|Red
expr_stmt|;
name|rotateLeft
argument_list|(
name|pp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_block
begin_expr_stmt
unit|}     F
operator|(
name|root
argument_list|()
operator|)
operator|.
name|color
operator|=
name|Black
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}   template
operator|<
name|class
name|Fragment
operator|>
DECL|function|erase_single
name|uint
name|QFragmentMapData
operator|<
name|Fragment
operator|>
operator|::
name|erase_single
argument_list|(
argument|uint z
argument_list|)
block|{
name|uint
name|w
operator|=
name|previous
argument_list|(
name|z
argument_list|)
block|;
name|uint
name|y
operator|=
name|z
block|;
name|uint
name|x
block|;
name|uint
name|p
block|;
if|if
condition|(
operator|!
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|left
condition|)
block|{
name|x
operator|=
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|right
expr_stmt|;
block|}
end_expr_stmt
begin_elseif
elseif|else
if|if
condition|(
operator|!
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|right
condition|)
block|{
name|x
operator|=
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|left
expr_stmt|;
block|}
end_elseif
begin_else
else|else
block|{
name|y
operator|=
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|right
expr_stmt|;
while|while
condition|(
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|left
condition|)
name|y
operator|=
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|left
expr_stmt|;
name|x
operator|=
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|right
expr_stmt|;
block|}
end_else
begin_if
if|if
condition|(
name|y
operator|!=
name|z
condition|)
block|{
name|F
argument_list|(
name|F
argument_list|(
name|z
argument_list|)
operator|.
name|left
argument_list|)
operator|.
name|parent
operator|=
name|y
expr_stmt|;
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|left
operator|=
name|F
argument_list|(
name|z
argument_list|)
operator|.
name|left
expr_stmt|;
for|for
control|(
name|uint
name|field
init|=
literal|0
init|;
name|field
operator|<
name|Fragment
operator|::
name|size_array_max
condition|;
operator|++
name|field
control|)
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|size_left_array
index|[
name|field
index|]
operator|=
name|F
argument_list|(
name|z
argument_list|)
operator|.
name|size_left_array
index|[
name|field
index|]
expr_stmt|;
if|if
condition|(
name|y
operator|!=
name|F
argument_list|(
name|z
argument_list|)
operator|.
name|right
condition|)
block|{
comment|/*                      z                y                     / \              / \                    a   b            a   b                       /                /                     ...     -->      ...                     /                /                    y                x                   / \                  0   x              */
name|p
operator|=
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|parent
expr_stmt|;
if|if
condition|(
name|x
condition|)
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|parent
operator|=
name|p
expr_stmt|;
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|left
operator|=
name|x
expr_stmt|;
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|right
operator|=
name|F
argument_list|(
name|z
argument_list|)
operator|.
name|right
expr_stmt|;
name|F
argument_list|(
name|F
argument_list|(
name|z
argument_list|)
operator|.
name|right
argument_list|)
operator|.
name|parent
operator|=
name|y
expr_stmt|;
name|uint
name|n
init|=
name|p
decl_stmt|;
while|while
condition|(
name|n
operator|!=
name|y
condition|)
block|{
for|for
control|(
name|uint
name|field
init|=
literal|0
init|;
name|field
operator|<
name|Fragment
operator|::
name|size_array_max
condition|;
operator|++
name|field
control|)
name|F
argument_list|(
name|n
argument_list|)
operator|.
name|size_left_array
index|[
name|field
index|]
operator|-=
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|size_array
index|[
name|field
index|]
expr_stmt|;
name|n
operator|=
name|F
argument_list|(
name|n
argument_list|)
operator|.
name|parent
expr_stmt|;
block|}
block|}
else|else
block|{
comment|/*                      z                y                     / \              / \                    a   y     -->    a   x                       / \                      0   x              */
name|p
operator|=
name|y
expr_stmt|;
block|}
name|uint
name|zp
init|=
name|F
argument_list|(
name|z
argument_list|)
operator|.
name|parent
decl_stmt|;
if|if
condition|(
operator|!
name|zp
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|head
operator|->
name|root
operator|==
name|z
argument_list|)
expr_stmt|;
name|head
operator|->
name|root
operator|=
name|y
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|F
argument_list|(
name|zp
argument_list|)
operator|.
name|left
operator|==
name|z
condition|)
block|{
name|F
argument_list|(
name|zp
argument_list|)
operator|.
name|left
operator|=
name|y
expr_stmt|;
for|for
control|(
name|uint
name|field
init|=
literal|0
init|;
name|field
operator|<
name|Fragment
operator|::
name|size_array_max
condition|;
operator|++
name|field
control|)
name|F
argument_list|(
name|zp
argument_list|)
operator|.
name|size_left_array
index|[
name|field
index|]
operator|-=
name|F
argument_list|(
name|z
argument_list|)
operator|.
name|size_array
index|[
name|field
index|]
expr_stmt|;
block|}
else|else
block|{
name|F
argument_list|(
name|zp
argument_list|)
operator|.
name|right
operator|=
name|y
expr_stmt|;
block|}
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|parent
operator|=
name|zp
expr_stmt|;
comment|// Swap the colors
name|uint
name|c
init|=
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|color
decl_stmt|;
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|color
operator|=
name|F
argument_list|(
name|z
argument_list|)
operator|.
name|color
expr_stmt|;
name|F
argument_list|(
name|z
argument_list|)
operator|.
name|color
operator|=
name|c
expr_stmt|;
name|y
operator|=
name|z
expr_stmt|;
block|}
else|else
block|{
comment|/*                 p          p            p          p                /          /              \          \               z    -->   x                z  -->     x               |                           |               x                           x          */
name|p
operator|=
name|F
argument_list|(
name|z
argument_list|)
operator|.
name|parent
expr_stmt|;
if|if
condition|(
name|x
condition|)
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|parent
operator|=
name|p
expr_stmt|;
if|if
condition|(
operator|!
name|p
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|head
operator|->
name|root
operator|==
name|z
argument_list|)
expr_stmt|;
name|head
operator|->
name|root
operator|=
name|x
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|left
operator|==
name|z
condition|)
block|{
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|left
operator|=
name|x
expr_stmt|;
for|for
control|(
name|uint
name|field
init|=
literal|0
init|;
name|field
operator|<
name|Fragment
operator|::
name|size_array_max
condition|;
operator|++
name|field
control|)
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|size_left_array
index|[
name|field
index|]
operator|-=
name|F
argument_list|(
name|z
argument_list|)
operator|.
name|size_array
index|[
name|field
index|]
expr_stmt|;
block|}
else|else
block|{
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|right
operator|=
name|x
expr_stmt|;
block|}
block|}
end_if
begin_decl_stmt
name|uint
name|n
init|=
name|z
decl_stmt|;
end_decl_stmt
begin_while
while|while
condition|(
name|F
argument_list|(
name|n
argument_list|)
operator|.
name|parent
condition|)
block|{
name|uint
name|p
init|=
name|F
argument_list|(
name|n
argument_list|)
operator|.
name|parent
decl_stmt|;
if|if
condition|(
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|left
operator|==
name|n
condition|)
block|{
for|for
control|(
name|uint
name|field
init|=
literal|0
init|;
name|field
operator|<
name|Fragment
operator|::
name|size_array_max
condition|;
operator|++
name|field
control|)
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|size_left_array
index|[
name|field
index|]
operator|-=
name|F
argument_list|(
name|z
argument_list|)
operator|.
name|size_array
index|[
name|field
index|]
expr_stmt|;
block|}
name|n
operator|=
name|p
expr_stmt|;
block|}
end_while
begin_expr_stmt
name|freeFragment
argument_list|(
name|z
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|color
operator|!=
name|Red
condition|)
block|{
while|while
condition|(
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|parent
operator|&&
operator|(
name|x
operator|==
literal|0
operator|||
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|color
operator|==
name|Black
operator|)
condition|)
block|{
if|if
condition|(
name|x
operator|==
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|left
condition|)
block|{
name|uint
name|w
init|=
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|right
decl_stmt|;
if|if
condition|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|color
operator|==
name|Red
condition|)
block|{
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|color
operator|=
name|Black
expr_stmt|;
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|color
operator|=
name|Red
expr_stmt|;
name|rotateLeft
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|w
operator|=
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|right
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|left
operator|==
literal|0
operator|||
name|F
argument_list|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|left
argument_list|)
operator|.
name|color
operator|==
name|Black
operator|)
operator|&&
operator|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|right
operator|==
literal|0
operator|||
name|F
argument_list|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|right
argument_list|)
operator|.
name|color
operator|==
name|Black
operator|)
condition|)
block|{
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|color
operator|=
name|Red
expr_stmt|;
name|x
operator|=
name|p
expr_stmt|;
name|p
operator|=
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|parent
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|right
operator|==
literal|0
operator|||
name|F
argument_list|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|right
argument_list|)
operator|.
name|color
operator|==
name|Black
condition|)
block|{
if|if
condition|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|left
condition|)
name|F
argument_list|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|left
argument_list|)
operator|.
name|color
operator|=
name|Black
expr_stmt|;
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|color
operator|=
name|Red
expr_stmt|;
name|rotateRight
argument_list|(
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|right
argument_list|)
expr_stmt|;
name|w
operator|=
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|right
expr_stmt|;
block|}
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|color
operator|=
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|color
expr_stmt|;
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|color
operator|=
name|Black
expr_stmt|;
if|if
condition|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|right
condition|)
name|F
argument_list|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|right
argument_list|)
operator|.
name|color
operator|=
name|Black
expr_stmt|;
name|rotateLeft
argument_list|(
name|p
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|uint
name|w
init|=
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|left
decl_stmt|;
if|if
condition|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|color
operator|==
name|Red
condition|)
block|{
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|color
operator|=
name|Black
expr_stmt|;
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|color
operator|=
name|Red
expr_stmt|;
name|rotateRight
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|w
operator|=
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|left
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|right
operator|==
literal|0
operator|||
name|F
argument_list|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|right
argument_list|)
operator|.
name|color
operator|==
name|Black
operator|)
operator|&&
operator|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|left
operator|==
literal|0
operator|||
name|F
argument_list|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|left
argument_list|)
operator|.
name|color
operator|==
name|Black
operator|)
condition|)
block|{
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|color
operator|=
name|Red
expr_stmt|;
name|x
operator|=
name|p
expr_stmt|;
name|p
operator|=
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|parent
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|left
operator|==
literal|0
operator|||
name|F
argument_list|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|left
argument_list|)
operator|.
name|color
operator|==
name|Black
condition|)
block|{
if|if
condition|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|right
condition|)
name|F
argument_list|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|right
argument_list|)
operator|.
name|color
operator|=
name|Black
expr_stmt|;
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|color
operator|=
name|Red
expr_stmt|;
name|rotateLeft
argument_list|(
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|left
argument_list|)
expr_stmt|;
name|w
operator|=
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|left
expr_stmt|;
block|}
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|color
operator|=
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|color
expr_stmt|;
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|color
operator|=
name|Black
expr_stmt|;
if|if
condition|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|left
condition|)
name|F
argument_list|(
name|F
argument_list|(
name|w
argument_list|)
operator|.
name|left
argument_list|)
operator|.
name|color
operator|=
name|Black
expr_stmt|;
name|rotateRight
argument_list|(
name|p
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|x
condition|)
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|color
operator|=
name|Black
expr_stmt|;
block|}
end_if
begin_return
return|return
name|w
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Fragment
operator|>
DECL|function|findNode
name|uint
name|QFragmentMapData
operator|<
name|Fragment
operator|>
operator|::
name|findNode
argument_list|(
argument|int k
argument_list|,
argument|uint field
argument_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|field
operator|<
name|Fragment
operator|::
name|size_array_max
argument_list|)
block|;
name|uint
name|x
operator|=
name|root
argument_list|()
block|;
name|uint
name|s
operator|=
name|k
block|;
while|while
condition|(
name|x
condition|)
block|{
if|if
condition|(
name|sizeLeft
argument_list|(
name|x
argument_list|,
name|field
argument_list|)
operator|<=
name|s
condition|)
block|{
if|if
condition|(
name|s
operator|<
name|sizeLeft
argument_list|(
name|x
argument_list|,
name|field
argument_list|)
operator|+
name|size
argument_list|(
name|x
argument_list|,
name|field
argument_list|)
condition|)
return|return
name|x
return|;
name|s
operator|-=
name|sizeLeft
argument_list|(
name|x
argument_list|,
name|field
argument_list|)
operator|+
name|size
argument_list|(
name|x
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|x
operator|=
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|right
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|x
operator|=
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|left
expr_stmt|;
block|}
end_else
begin_expr_stmt
unit|}     return
literal|0
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Fragment
operator|>
DECL|function|insert_single
name|uint
name|QFragmentMapData
operator|<
name|Fragment
operator|>
operator|::
name|insert_single
argument_list|(
argument|int key
argument_list|,
argument|uint length
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|findNode
argument_list|(
name|key
argument_list|)
operator|||
operator|(
name|int
operator|)
name|this
operator|->
name|position
argument_list|(
name|findNode
argument_list|(
name|key
argument_list|)
argument_list|)
operator|==
name|key
argument_list|)
block|;
name|uint
name|z
operator|=
name|createFragment
argument_list|()
block|;
name|F
argument_list|(
name|z
argument_list|)
operator|.
name|left
operator|=
literal|0
block|;
name|F
argument_list|(
name|z
argument_list|)
operator|.
name|right
operator|=
literal|0
block|;
name|F
argument_list|(
name|z
argument_list|)
operator|.
name|size_array
index|[
literal|0
index|]
operator|=
name|length
block|;
for|for
control|(
name|uint
name|field
init|=
literal|1
init|;
name|field
operator|<
name|Fragment
operator|::
name|size_array_max
condition|;
operator|++
name|field
control|)
name|F
argument_list|(
name|z
argument_list|)
operator|.
name|size_array
index|[
name|field
index|]
operator|=
literal|1
expr_stmt|;
end_expr_stmt
begin_for
for|for
control|(
name|uint
name|field
init|=
literal|0
init|;
name|field
operator|<
name|Fragment
operator|::
name|size_array_max
condition|;
operator|++
name|field
control|)
name|F
argument_list|(
name|z
argument_list|)
operator|.
name|size_left_array
index|[
name|field
index|]
operator|=
literal|0
expr_stmt|;
end_for
begin_decl_stmt
name|uint
name|y
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|x
init|=
name|root
argument_list|()
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Q_ASSERT
argument_list|(
operator|!
name|x
operator|||
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|parent
operator|==
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|uint
name|s
init|=
name|key
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|right
init|=
name|false
decl_stmt|;
end_decl_stmt
begin_while
while|while
condition|(
name|x
condition|)
block|{
name|y
operator|=
name|x
expr_stmt|;
if|if
condition|(
name|s
operator|<=
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|size_left_array
index|[
literal|0
index|]
condition|)
block|{
name|x
operator|=
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|left
expr_stmt|;
name|right
operator|=
name|false
expr_stmt|;
block|}
else|else
block|{
name|s
operator|-=
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|size_left_array
index|[
literal|0
index|]
operator|+
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|size_array
index|[
literal|0
index|]
expr_stmt|;
name|x
operator|=
name|F
argument_list|(
name|x
argument_list|)
operator|.
name|right
expr_stmt|;
name|right
operator|=
name|true
expr_stmt|;
block|}
block|}
end_while
begin_expr_stmt
name|F
argument_list|(
name|z
argument_list|)
operator|.
name|parent
operator|=
name|y
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
operator|!
name|y
condition|)
block|{
name|head
operator|->
name|root
operator|=
name|z
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|right
condition|)
block|{
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|left
operator|=
name|z
expr_stmt|;
for|for
control|(
name|uint
name|field
init|=
literal|0
init|;
name|field
operator|<
name|Fragment
operator|::
name|size_array_max
condition|;
operator|++
name|field
control|)
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|size_left_array
index|[
name|field
index|]
operator|=
name|F
argument_list|(
name|z
argument_list|)
operator|.
name|size_array
index|[
name|field
index|]
expr_stmt|;
block|}
else|else
block|{
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|right
operator|=
name|z
expr_stmt|;
block|}
end_if
begin_while
while|while
condition|(
name|y
operator|&&
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|parent
condition|)
block|{
name|uint
name|p
init|=
name|F
argument_list|(
name|y
argument_list|)
operator|.
name|parent
decl_stmt|;
if|if
condition|(
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|left
operator|==
name|y
condition|)
block|{
for|for
control|(
name|uint
name|field
init|=
literal|0
init|;
name|field
operator|<
name|Fragment
operator|::
name|size_array_max
condition|;
operator|++
name|field
control|)
name|F
argument_list|(
name|p
argument_list|)
operator|.
name|size_left_array
index|[
name|field
index|]
operator|+=
name|F
argument_list|(
name|z
argument_list|)
operator|.
name|size_array
index|[
name|field
index|]
expr_stmt|;
block|}
name|y
operator|=
name|p
expr_stmt|;
block|}
end_while
begin_expr_stmt
name|rebalance
argument_list|(
name|z
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|z
return|;
end_return
begin_expr_stmt
unit|}   template
operator|<
name|class
name|Fragment
operator|>
DECL|function|length
name|int
name|QFragmentMapData
operator|<
name|Fragment
operator|>
operator|::
name|length
argument_list|(
argument|uint field
argument_list|)
specifier|const
block|{
name|uint
name|root
operator|=
name|this
operator|->
name|root
argument_list|()
block|;
return|return
name|root
condition|?
name|sizeLeft
argument_list|(
name|root
argument_list|,
name|field
argument_list|)
operator|+
name|size
argument_list|(
name|root
argument_list|,
name|field
argument_list|)
operator|+
name|sizeRight
argument_list|(
name|root
argument_list|,
name|field
argument_list|)
else|:
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|Fragment
operator|>
comment|// NOTE: must inherit QFragment
name|class
name|QFragmentMap
block|{
name|public
operator|:
name|class
name|Iterator
block|{
name|public
operator|:
name|QFragmentMap
operator|*
name|pt
block|;
name|quint32
name|n
block|;
name|Iterator
argument_list|()
operator|:
name|pt
argument_list|(
literal|0
argument_list|)
block|,
name|n
argument_list|(
literal|0
argument_list|)
block|{}
name|Iterator
argument_list|(
argument|QFragmentMap *p
argument_list|,
argument|int node
argument_list|)
operator|:
name|pt
argument_list|(
name|p
argument_list|)
block|,
name|n
argument_list|(
argument|node
argument_list|)
block|{}
name|Iterator
argument_list|(
specifier|const
name|Iterator
operator|&
name|it
argument_list|)
operator|:
name|pt
argument_list|(
name|it
operator|.
name|pt
argument_list|)
block|,
name|n
argument_list|(
argument|it.n
argument_list|)
block|{}
specifier|inline
name|bool
name|atEnd
argument_list|()
specifier|const
block|{
return|return
operator|!
name|n
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Iterator
operator|&
name|it
operator|)
specifier|const
block|{
return|return
name|pt
operator|==
name|it
operator|.
name|pt
operator|&&
name|n
operator|==
name|it
operator|.
name|n
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|Iterator
operator|&
name|it
operator|)
specifier|const
block|{
return|return
name|pt
operator|!=
name|it
operator|.
name|pt
operator|||
name|n
operator|!=
name|it
operator|.
name|n
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|bool
name|operator
operator|<
operator|(
specifier|const
name|Iterator
operator|&
name|it
operator|)
specifier|const
block|{
return|return
name|position
argument_list|()
operator|<
name|it
operator|.
name|position
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
name|Fragment
modifier|*
name|operator
modifier|*
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pt
operator|->
name|fragment
argument_list|(
name|n
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
specifier|const
name|Fragment
operator|*
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|atEnd
argument_list|()
argument_list|)
block|;
return|return
name|pt
operator|->
name|fragment
argument_list|(
name|n
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Fragment
operator|*
name|operator
operator|->
expr|(
end_expr_stmt
begin_block
unit|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pt
operator|->
name|fragment
argument_list|(
name|n
argument_list|)
return|;
block|}
end_block
begin_expr_stmt
specifier|const
name|Fragment
operator|*
name|operator
operator|->
expr|(
end_expr_stmt
begin_expr_stmt
unit|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|atEnd
argument_list|()
argument_list|)
block|;
return|return
name|pt
operator|->
name|fragment
argument_list|(
name|n
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|int
name|position
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|atEnd
argument_list|()
argument_list|)
block|;
return|return
name|pt
operator|->
name|data
operator|.
name|position
argument_list|(
name|n
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|const
name|Fragment
operator|*
name|value
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|atEnd
argument_list|()
argument_list|)
block|;
return|return
name|pt
operator|->
name|fragment
argument_list|(
name|n
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
name|Fragment
modifier|*
name|value
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pt
operator|->
name|fragment
argument_list|(
name|n
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
name|Iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|n
operator|=
name|pt
operator|->
name|data
operator|.
name|next
argument_list|(
name|n
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|n
operator|=
name|pt
operator|->
name|data
operator|.
name|previous
argument_list|(
name|n
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_decl_stmt
unit|};
name|class
name|ConstIterator
block|{
name|public
label|:
specifier|const
name|QFragmentMap
modifier|*
name|pt
decl_stmt|;
name|quint32
name|n
decl_stmt|;
comment|/**          * Functions          */
name|ConstIterator
argument_list|()
operator|:
name|pt
argument_list|(
literal|0
argument_list|)
operator|,
name|n
argument_list|(
literal|0
argument_list|)
block|{}
name|ConstIterator
argument_list|(
argument|const QFragmentMap *p
argument_list|,
argument|int node
argument_list|)
operator|:
name|pt
argument_list|(
name|p
argument_list|)
operator|,
name|n
argument_list|(
argument|node
argument_list|)
block|{}
name|ConstIterator
argument_list|(
specifier|const
name|ConstIterator
operator|&
name|it
argument_list|)
operator|:
name|pt
argument_list|(
name|it
operator|.
name|pt
argument_list|)
operator|,
name|n
argument_list|(
argument|it.n
argument_list|)
block|{}
name|ConstIterator
argument_list|(
specifier|const
name|Iterator
operator|&
name|it
argument_list|)
operator|:
name|pt
argument_list|(
name|it
operator|.
name|pt
argument_list|)
operator|,
name|n
argument_list|(
argument|it.n
argument_list|)
block|{}
specifier|inline
name|bool
name|atEnd
argument_list|()
specifier|const
block|{
return|return
operator|!
name|n
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ConstIterator
operator|&
name|it
operator|)
specifier|const
block|{
return|return
name|pt
operator|==
name|it
operator|.
name|pt
operator|&&
name|n
operator|==
name|it
operator|.
name|n
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|ConstIterator
operator|&
name|it
operator|)
specifier|const
block|{
return|return
name|pt
operator|!=
name|it
operator|.
name|pt
operator|||
name|n
operator|!=
name|it
operator|.
name|n
return|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|ConstIterator
operator|&
name|it
operator|)
specifier|const
block|{
return|return
name|position
argument_list|()
operator|<
name|it
operator|.
name|position
argument_list|()
return|;
block|}
specifier|const
name|Fragment
operator|*
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|atEnd
argument_list|()
argument_list|)
block|;
return|return
name|pt
operator|->
name|fragment
argument_list|(
name|n
argument_list|)
return|;
block|}
specifier|const
name|Fragment
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pt
operator|->
name|fragment
argument_list|(
name|n
argument_list|)
return|;
block|}
end_decl_stmt
begin_expr_stmt
name|int
name|position
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|atEnd
argument_list|()
argument_list|)
block|;
return|return
name|pt
operator|->
name|data
operator|.
name|position
argument_list|(
name|n
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|int
name|size
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|atEnd
argument_list|()
argument_list|)
block|;
return|return
name|pt
operator|->
name|data
operator|.
name|size
argument_list|(
name|n
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|const
name|Fragment
operator|*
name|value
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|atEnd
argument_list|()
argument_list|)
block|;
return|return
name|pt
operator|->
name|fragment
argument_list|(
name|n
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|ConstIterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|n
operator|=
name|pt
operator|->
name|data
operator|.
name|next
argument_list|(
name|n
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|ConstIterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|n
operator|=
name|pt
operator|->
name|data
operator|.
name|previous
argument_list|(
name|n
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_macro
unit|};
name|QFragmentMap
argument_list|()
end_macro
begin_block
block|{}
end_block
begin_expr_stmt
operator|~
name|QFragmentMap
argument_list|()
block|{
if|if
condition|(
operator|!
name|data
operator|.
name|fragments
condition|)
return|return;
end_expr_stmt
begin_comment
comment|// in case of out-of-memory, we won't have fragments
end_comment
begin_for
for|for
control|(
name|Iterator
name|it
init|=
name|begin
argument_list|()
init|;
operator|!
name|it
operator|.
name|atEnd
argument_list|()
condition|;
operator|++
name|it
control|)
name|it
operator|.
name|value
argument_list|()
operator|->
name|free
argument_list|()
expr_stmt|;
end_for
begin_function
unit|}      inline
name|void
name|clear
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|begin
argument_list|()
init|;
operator|!
name|it
operator|.
name|atEnd
argument_list|()
condition|;
operator|++
name|it
control|)
name|it
operator|.
name|value
argument_list|()
operator|->
name|free
argument_list|()
expr_stmt|;
name|data
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|Iterator
name|begin
parameter_list|()
block|{
return|return
name|Iterator
argument_list|(
name|this
argument_list|,
name|data
operator|.
name|minimum
argument_list|(
name|data
operator|.
name|root
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
specifier|inline
name|Iterator
name|end
parameter_list|()
block|{
return|return
name|Iterator
argument_list|(
name|this
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|ConstIterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|ConstIterator
argument_list|(
name|this
argument_list|,
name|data
operator|.
name|minimum
argument_list|(
name|data
operator|.
name|root
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|ConstIterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|ConstIterator
argument_list|(
name|this
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|ConstIterator
name|last
argument_list|()
specifier|const
block|{
return|return
name|ConstIterator
argument_list|(
name|this
argument_list|,
name|data
operator|.
name|maximum
argument_list|(
name|data
operator|.
name|root
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
name|data
operator|.
name|head
operator|->
name|node_count
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|numNodes
argument_list|()
specifier|const
block|{
return|return
name|data
operator|.
name|head
operator|->
name|node_count
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|int
name|length
argument_list|(
name|uint
name|field
operator|=
literal|0
argument_list|)
decl|const
block|{
return|return
name|data
operator|.
name|length
argument_list|(
name|field
argument_list|)
return|;
block|}
end_decl_stmt
begin_function
name|Iterator
name|find
parameter_list|(
name|int
name|k
parameter_list|,
name|uint
name|field
init|=
literal|0
parameter_list|)
block|{
return|return
name|Iterator
argument_list|(
name|this
argument_list|,
name|data
operator|.
name|findNode
argument_list|(
name|k
argument_list|,
name|field
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
name|ConstIterator
name|find
argument_list|(
name|int
name|k
argument_list|,
name|uint
name|field
operator|=
literal|0
argument_list|)
decl|const
block|{
return|return
name|ConstIterator
argument_list|(
name|this
argument_list|,
name|data
operator|.
name|findNode
argument_list|(
name|k
argument_list|,
name|field
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|uint
name|findNode
argument_list|(
name|int
name|k
argument_list|,
name|uint
name|field
operator|=
literal|0
argument_list|)
decl|const
block|{
return|return
name|data
operator|.
name|findNode
argument_list|(
name|k
argument_list|,
name|field
argument_list|)
return|;
block|}
end_decl_stmt
begin_function
name|uint
name|insert_single
parameter_list|(
name|int
name|key
parameter_list|,
name|uint
name|length
parameter_list|)
block|{
name|uint
name|f
init|=
name|data
operator|.
name|insert_single
argument_list|(
name|key
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|0
condition|)
block|{
name|Fragment
modifier|*
name|frag
init|=
name|fragment
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|frag
argument_list|)
expr_stmt|;
name|frag
operator|->
name|initialize
argument_list|()
expr_stmt|;
block|}
return|return
name|f
return|;
block|}
end_function
begin_function
name|uint
name|erase_single
parameter_list|(
name|uint
name|f
parameter_list|)
block|{
if|if
condition|(
name|f
operator|!=
literal|0
condition|)
block|{
name|Fragment
modifier|*
name|frag
init|=
name|fragment
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|frag
argument_list|)
expr_stmt|;
name|frag
operator|->
name|free
argument_list|()
expr_stmt|;
block|}
return|return
name|data
operator|.
name|erase_single
argument_list|(
name|f
argument_list|)
return|;
block|}
end_function
begin_function
specifier|inline
name|Fragment
modifier|*
name|fragment
parameter_list|(
name|uint
name|index
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|index
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|data
operator|.
name|fragment
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
specifier|inline
specifier|const
name|Fragment
modifier|*
name|fragment
argument_list|(
name|uint
name|index
argument_list|)
decl|const
block|{
name|Q_ASSERT
argument_list|(
name|index
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|data
operator|.
name|fragment
argument_list|(
name|index
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|uint
name|position
argument_list|(
name|uint
name|node
argument_list|,
name|uint
name|field
operator|=
literal|0
argument_list|)
decl|const
block|{
return|return
name|data
operator|.
name|position
argument_list|(
name|node
argument_list|,
name|field
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|bool
name|isValid
argument_list|(
name|uint
name|n
argument_list|)
decl|const
block|{
return|return
name|data
operator|.
name|isValid
argument_list|(
name|n
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|uint
name|next
argument_list|(
name|uint
name|n
argument_list|)
decl|const
block|{
return|return
name|data
operator|.
name|next
argument_list|(
name|n
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|uint
name|previous
argument_list|(
name|uint
name|n
argument_list|)
decl|const
block|{
return|return
name|data
operator|.
name|previous
argument_list|(
name|n
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|uint
name|size
argument_list|(
name|uint
name|node
argument_list|,
name|uint
name|field
operator|=
literal|0
argument_list|)
decl|const
block|{
return|return
name|data
operator|.
name|size
argument_list|(
name|node
argument_list|,
name|field
argument_list|)
return|;
block|}
end_decl_stmt
begin_function
specifier|inline
name|void
name|setSize
parameter_list|(
name|uint
name|node
parameter_list|,
name|int
name|new_size
parameter_list|,
name|uint
name|field
init|=
literal|0
parameter_list|)
block|{
name|data
operator|.
name|setSize
argument_list|(
name|node
argument_list|,
name|new_size
argument_list|,
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|!=
literal|0
operator|&&
name|field
operator|==
literal|0
condition|)
block|{
name|Fragment
modifier|*
name|frag
init|=
name|fragment
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|frag
argument_list|)
expr_stmt|;
name|frag
operator|->
name|invalidate
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_expr_stmt
specifier|inline
name|int
name|firstNode
argument_list|()
specifier|const
block|{
return|return
name|data
operator|.
name|minimum
argument_list|(
name|data
operator|.
name|root
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|friend
name|class
name|Iterator
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|ConstIterator
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QFragmentMapData
operator|<
name|Fragment
operator|>
name|data
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QFragmentMap
argument_list|(
specifier|const
name|QFragmentMap
operator|&
name|m
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QFragmentMap
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QFragmentMap
operator|&
name|m
operator|)
decl_stmt|;
end_decl_stmt
begin_macro
unit|};
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QFRAGMENTMAP_P_H
end_comment
end_unit
