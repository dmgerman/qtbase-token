begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfontsubset_p.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qendian.h>
end_include
begin_include
include|#
directive|include
file|<qpainterpath.h>
end_include
begin_include
include|#
directive|include
file|"private/qpdf_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qfunctions_p.h"
end_include
begin_include
include|#
directive|include
file|"qfontsubset_agl.cpp"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// This map is used for symbol fonts to get the correct glyph names for the latin range
DECL|variable|symbol_map
specifier|static
specifier|const
name|unsigned
name|short
name|symbol_map
index|[
literal|0x100
index|]
init|=
block|{
literal|0x0000
block|,
literal|0x0001
block|,
literal|0x0002
block|,
literal|0x0003
block|,
literal|0x0004
block|,
literal|0x0005
block|,
literal|0x0006
block|,
literal|0x0007
block|,
literal|0x0008
block|,
literal|0x0009
block|,
literal|0x000a
block|,
literal|0x000b
block|,
literal|0x000c
block|,
literal|0x000d
block|,
literal|0x000e
block|,
literal|0x000f
block|,
literal|0x0010
block|,
literal|0x0011
block|,
literal|0x0012
block|,
literal|0x0013
block|,
literal|0x0014
block|,
literal|0x0015
block|,
literal|0x0016
block|,
literal|0x0017
block|,
literal|0x0018
block|,
literal|0x0019
block|,
literal|0x001a
block|,
literal|0x001b
block|,
literal|0x001c
block|,
literal|0x001d
block|,
literal|0x001e
block|,
literal|0x001f
block|,
literal|0x0020
block|,
literal|0x0021
block|,
literal|0x2200
block|,
literal|0x0023
block|,
literal|0x2203
block|,
literal|0x0025
block|,
literal|0x0026
block|,
literal|0x220b
block|,
literal|0x0028
block|,
literal|0x0029
block|,
literal|0x2217
block|,
literal|0x002b
block|,
literal|0x002c
block|,
literal|0x2212
block|,
literal|0x002e
block|,
literal|0x002f
block|,
literal|0x0030
block|,
literal|0x0031
block|,
literal|0x0032
block|,
literal|0x0033
block|,
literal|0x0034
block|,
literal|0x0035
block|,
literal|0x0036
block|,
literal|0x0037
block|,
literal|0x0038
block|,
literal|0x0039
block|,
literal|0x003a
block|,
literal|0x003b
block|,
literal|0x003c
block|,
literal|0x003d
block|,
literal|0x003e
block|,
literal|0x003f
block|,
literal|0x2245
block|,
literal|0x0391
block|,
literal|0x0392
block|,
literal|0x03a7
block|,
literal|0x0394
block|,
literal|0x0395
block|,
literal|0x03a6
block|,
literal|0x0393
block|,
literal|0x0397
block|,
literal|0x0399
block|,
literal|0x03d1
block|,
literal|0x039a
block|,
literal|0x039b
block|,
literal|0x039c
block|,
literal|0x039d
block|,
literal|0x039f
block|,
literal|0x03a0
block|,
literal|0x0398
block|,
literal|0x03a1
block|,
literal|0x03a3
block|,
literal|0x03a4
block|,
literal|0x03a5
block|,
literal|0x03c2
block|,
literal|0x03a9
block|,
literal|0x039e
block|,
literal|0x03a8
block|,
literal|0x0396
block|,
literal|0x005b
block|,
literal|0x2234
block|,
literal|0x005d
block|,
literal|0x22a5
block|,
literal|0x005f
block|,
literal|0xf8e5
block|,
literal|0x03b1
block|,
literal|0x03b2
block|,
literal|0x03c7
block|,
literal|0x03b4
block|,
literal|0x03b5
block|,
literal|0x03c6
block|,
literal|0x03b3
block|,
literal|0x03b7
block|,
literal|0x03b9
block|,
literal|0x03d5
block|,
literal|0x03ba
block|,
literal|0x03bb
block|,
literal|0x03bc
block|,
literal|0x03bd
block|,
literal|0x03bf
block|,
literal|0x03c0
block|,
literal|0x03b8
block|,
literal|0x03c1
block|,
literal|0x03c3
block|,
literal|0x03c4
block|,
literal|0x03c5
block|,
literal|0x03d6
block|,
literal|0x03c9
block|,
literal|0x03be
block|,
literal|0x03c8
block|,
literal|0x03b6
block|,
literal|0x007b
block|,
literal|0x007c
block|,
literal|0x007d
block|,
literal|0x223c
block|,
literal|0x007f
block|,
literal|0x0080
block|,
literal|0x0081
block|,
literal|0x0082
block|,
literal|0x0083
block|,
literal|0x0084
block|,
literal|0x0085
block|,
literal|0x0086
block|,
literal|0x0087
block|,
literal|0x0088
block|,
literal|0x0089
block|,
literal|0x008a
block|,
literal|0x008b
block|,
literal|0x008c
block|,
literal|0x008d
block|,
literal|0x008e
block|,
literal|0x008f
block|,
literal|0x0090
block|,
literal|0x0091
block|,
literal|0x0092
block|,
literal|0x0093
block|,
literal|0x0094
block|,
literal|0x0095
block|,
literal|0x0096
block|,
literal|0x0097
block|,
literal|0x0098
block|,
literal|0x0099
block|,
literal|0x009a
block|,
literal|0x009b
block|,
literal|0x009c
block|,
literal|0x009d
block|,
literal|0x009e
block|,
literal|0x009f
block|,
literal|0x20ac
block|,
literal|0x03d2
block|,
literal|0x2023
block|,
literal|0x2264
block|,
literal|0x2044
block|,
literal|0x221e
block|,
literal|0x0192
block|,
literal|0x2263
block|,
literal|0x2666
block|,
literal|0x2665
block|,
literal|0x2660
block|,
literal|0x2194
block|,
literal|0x2190
block|,
literal|0x2191
block|,
literal|0x2192
block|,
literal|0x2193
block|,
literal|0x00b0
block|,
literal|0x00b1
block|,
literal|0x2033
block|,
literal|0x2265
block|,
literal|0x00d7
block|,
literal|0x221d
block|,
literal|0x2202
block|,
literal|0x2022
block|,
literal|0x00f7
block|,
literal|0x2260
block|,
literal|0x2261
block|,
literal|0x2248
block|,
literal|0x2026
block|,
literal|0xf8e6
block|,
literal|0xf8e7
block|,
literal|0x21b5
block|,
literal|0x2135
block|,
literal|0x2111
block|,
literal|0x211c
block|,
literal|0x2118
block|,
literal|0x2297
block|,
literal|0x2295
block|,
literal|0x2205
block|,
literal|0x2229
block|,
literal|0x222a
block|,
literal|0x2283
block|,
literal|0x2287
block|,
literal|0x2284
block|,
literal|0x2282
block|,
literal|0x2286
block|,
literal|0x2208
block|,
literal|0x2209
block|,
literal|0x2220
block|,
literal|0x2207
block|,
literal|0xf6da
block|,
literal|0xf6d9
block|,
literal|0xf6db
block|,
literal|0x220f
block|,
literal|0x221a
block|,
literal|0x22c5
block|,
literal|0x00ac
block|,
literal|0x2227
block|,
literal|0x2228
block|,
literal|0x21d4
block|,
literal|0x21d0
block|,
literal|0x21d1
block|,
literal|0x21d2
block|,
literal|0x21d3
block|,
literal|0x25ca
block|,
literal|0x2329
block|,
literal|0xf8e8
block|,
literal|0xf8e9
block|,
literal|0xf8ea
block|,
literal|0x2211
block|,
literal|0xf8eb
block|,
literal|0xf8ec
block|,
literal|0xf8ed
block|,
literal|0xf8ee
block|,
literal|0xf8ef
block|,
literal|0xf8f0
block|,
literal|0xf8f1
block|,
literal|0xf8f2
block|,
literal|0xf8f3
block|,
literal|0xf8f4
block|,
literal|0x0000
block|,
literal|0x232a
block|,
literal|0x222b
block|,
literal|0x2320
block|,
literal|0xf8f5
block|,
literal|0x2321
block|,
literal|0xf8f6
block|,
literal|0xf8f7
block|,
literal|0xf8f8
block|,
literal|0xf8f9
block|,
literal|0xf8fa
block|,
literal|0xf8fb
block|,
literal|0xf8fc
block|,
literal|0xf8fd
block|,
literal|0xf8fe
block|,
literal|0x0000
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|// ---------------------------- PS/PDF helper methods -----------------------------------
end_comment
begin_function
DECL|function|glyphName
name|QByteArray
name|QFontSubset
operator|::
name|glyphName
parameter_list|(
name|unsigned
name|short
name|unicode
parameter_list|,
name|bool
name|symbol
parameter_list|)
block|{
if|if
condition|(
name|symbol
operator|&&
name|unicode
operator|<
literal|0x100
condition|)
comment|// map from latin1 to symbol
name|unicode
operator|=
name|symbol_map
index|[
name|unicode
index|]
expr_stmt|;
specifier|const
name|AGLEntry
modifier|*
name|r
init|=
name|qBinaryFind
argument_list|(
name|unicode_to_agl_map
argument_list|,
name|unicode_to_agl_map
operator|+
name|unicode_to_agl_map_size
argument_list|,
name|unicode
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|unicode_to_agl_map
operator|+
name|unicode_to_agl_map_size
condition|)
return|return
name|glyph_names
operator|+
name|r
operator|->
name|index
return|;
name|char
name|buffer
index|[
literal|8
index|]
decl_stmt|;
name|buffer
index|[
literal|0
index|]
operator|=
literal|'u'
expr_stmt|;
name|buffer
index|[
literal|1
index|]
operator|=
literal|'n'
expr_stmt|;
name|buffer
index|[
literal|2
index|]
operator|=
literal|'i'
expr_stmt|;
name|QPdf
operator|::
name|toHex
argument_list|(
name|unicode
argument_list|,
name|buffer
operator|+
literal|3
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
end_function
begin_function
DECL|function|glyphName
name|QByteArray
name|QFontSubset
operator|::
name|glyphName
parameter_list|(
name|unsigned
name|int
name|glyph
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|reverseMap
parameter_list|)
specifier|const
block|{
name|uint
name|glyphIndex
init|=
name|glyph_indices
index|[
name|glyph
index|]
decl_stmt|;
if|if
condition|(
name|glyphIndex
operator|==
literal|0
condition|)
return|return
literal|"/.notdef"
return|;
name|QByteArray
name|ba
decl_stmt|;
name|QPdf
operator|::
name|ByteStream
name|s
argument_list|(
operator|&
name|ba
argument_list|)
decl_stmt|;
if|if
condition|(
name|reverseMap
index|[
name|glyphIndex
index|]
operator|&&
name|reverseMap
index|[
name|glyphIndex
index|]
operator|<
literal|0x10000
condition|)
block|{
name|s
operator|<<
literal|'/'
operator|<<
name|glyphName
argument_list|(
name|reverseMap
index|[
name|glyphIndex
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|<<
literal|"/gl"
operator|<<
operator|(
name|int
operator|)
name|glyphIndex
expr_stmt|;
block|}
return|return
name|ba
return|;
block|}
end_function
begin_function
DECL|function|widthArray
name|QByteArray
name|QFontSubset
operator|::
name|widthArray
parameter_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|widths
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QFontEngine
operator|::
name|Properties
name|properties
init|=
name|fontEngine
operator|->
name|properties
argument_list|()
decl_stmt|;
name|QByteArray
name|width
decl_stmt|;
name|QPdf
operator|::
name|ByteStream
name|s
argument_list|(
operator|&
name|width
argument_list|)
decl_stmt|;
name|QFixed
name|scale
init|=
name|QFixed
argument_list|(
literal|1000
argument_list|)
operator|/
name|emSquare
decl_stmt|;
name|QFixed
name|defWidth
init|=
name|widths
index|[
literal|0
index|]
decl_stmt|;
comment|//qDebug("defWidth=%d, scale=%f", defWidth.toInt(), scale.toReal());
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nGlyphs
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|defWidth
operator|!=
name|widths
index|[
name|i
index|]
condition|)
name|defWidth
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|defWidth
operator|>
literal|0
condition|)
block|{
name|s
operator|<<
literal|"/DW "
operator|<<
operator|(
name|defWidth
operator|*
name|scale
operator|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|s
operator|<<
literal|"/W ["
expr_stmt|;
for|for
control|(
name|int
name|g
init|=
literal|0
init|;
name|g
operator|<
name|nGlyphs
argument_list|()
condition|;
control|)
block|{
name|QFixed
name|w
init|=
name|widths
index|[
name|g
index|]
decl_stmt|;
name|int
name|start
init|=
name|g
decl_stmt|;
name|int
name|startLinear
init|=
literal|0
decl_stmt|;
operator|++
name|g
expr_stmt|;
while|while
condition|(
name|g
operator|<
name|nGlyphs
argument_list|()
condition|)
block|{
name|QFixed
name|nw
init|=
name|widths
index|[
name|g
index|]
decl_stmt|;
if|if
condition|(
name|nw
operator|==
name|w
condition|)
block|{
if|if
condition|(
operator|!
name|startLinear
condition|)
name|startLinear
operator|=
name|g
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|startLinear
operator|>
literal|0
operator|&&
name|g
operator|-
name|startLinear
operator|>=
literal|10
condition|)
break|break;
name|startLinear
operator|=
literal|0
expr_stmt|;
block|}
name|w
operator|=
name|nw
expr_stmt|;
operator|++
name|g
expr_stmt|;
block|}
comment|// qDebug("start=%x startLinear=%x g-1=%x",start,startLinear,g-1);
if|if
condition|(
name|g
operator|-
name|startLinear
operator|<
literal|10
condition|)
name|startLinear
operator|=
literal|0
expr_stmt|;
name|int
name|endnonlinear
init|=
name|startLinear
condition|?
name|startLinear
else|:
name|g
decl_stmt|;
comment|// qDebug("    startLinear=%x endnonlinear=%x", startLinear,endnonlinear);
if|if
condition|(
name|endnonlinear
operator|>
name|start
condition|)
block|{
name|s
operator|<<
name|start
operator|<<
literal|'['
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|endnonlinear
condition|;
operator|++
name|i
control|)
name|s
operator|<<
operator|(
name|widths
index|[
name|i
index|]
operator|*
name|scale
operator|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|s
operator|<<
literal|"]\n"
expr_stmt|;
block|}
if|if
condition|(
name|startLinear
condition|)
name|s
operator|<<
name|startLinear
operator|<<
name|g
operator|-
literal|1
operator|<<
operator|(
name|widths
index|[
name|startLinear
index|]
operator|*
name|scale
operator|)
operator|.
name|toInt
argument_list|()
operator|<<
literal|'\n'
expr_stmt|;
block|}
name|s
operator|<<
literal|"]\n"
expr_stmt|;
block|}
return|return
name|width
return|;
block|}
end_function
begin_function
DECL|function|checkRanges
specifier|static
name|void
name|checkRanges
parameter_list|(
name|QPdf
operator|::
name|ByteStream
modifier|&
name|ts
parameter_list|,
name|QByteArray
modifier|&
name|ranges
parameter_list|,
name|int
modifier|&
name|nranges
parameter_list|)
block|{
if|if
condition|(
operator|++
name|nranges
operator|>
literal|100
condition|)
block|{
name|ts
operator|<<
name|nranges
operator|<<
literal|"beginbfrange\n"
operator|<<
name|ranges
operator|<<
literal|"endbfrange\n"
expr_stmt|;
name|ranges
operator|=
name|QByteArray
argument_list|()
expr_stmt|;
name|nranges
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|getReverseMap
name|QVector
argument_list|<
name|int
argument_list|>
name|QFontSubset
operator|::
name|getReverseMap
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|reverseMap
argument_list|(
literal|0x10000
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QGlyphLayoutArray
argument_list|<
literal|10
argument_list|>
name|glyphs
decl_stmt|;
for|for
control|(
name|uint
name|uc
init|=
literal|0
init|;
name|uc
operator|<
literal|0x10000
condition|;
operator|++
name|uc
control|)
block|{
name|QChar
name|ch
argument_list|(
name|uc
argument_list|)
decl_stmt|;
name|int
name|nglyphs
init|=
literal|10
decl_stmt|;
name|fontEngine
operator|->
name|stringToCMap
argument_list|(
operator|&
name|ch
argument_list|,
literal|1
argument_list|,
operator|&
name|glyphs
argument_list|,
operator|&
name|nglyphs
argument_list|,
name|QFontEngine
operator|::
name|GlyphIndicesOnly
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|glyph_indices
operator|.
name|indexOf
argument_list|(
name|glyphs
operator|.
name|glyphs
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
operator|&&
operator|!
name|reverseMap
operator|.
name|at
argument_list|(
name|idx
argument_list|)
condition|)
name|reverseMap
index|[
name|idx
index|]
operator|=
name|uc
expr_stmt|;
block|}
return|return
name|reverseMap
return|;
block|}
end_function
begin_function
DECL|function|createToUnicodeMap
name|QByteArray
name|QFontSubset
operator|::
name|createToUnicodeMap
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|reverseMap
init|=
name|getReverseMap
argument_list|()
decl_stmt|;
name|QByteArray
name|touc
decl_stmt|;
name|QPdf
operator|::
name|ByteStream
name|ts
argument_list|(
operator|&
name|touc
argument_list|)
decl_stmt|;
name|ts
operator|<<
literal|"/CIDInit /ProcSet findresource begin\n"
literal|"12 dict begin\n"
literal|"begincmap\n"
literal|"/CIDSystemInfo<< /Registry (Adobe) /Ordering (UCS) /Supplement 0>> def\n"
literal|"/CMapName /Adobe-Identity-UCS def\n"
literal|"/CMapType 2 def\n"
literal|"1 begincodespacerange\n"
literal|"<0000><FFFF>\n"
literal|"endcodespacerange\n"
expr_stmt|;
name|int
name|nranges
init|=
literal|1
decl_stmt|;
name|QByteArray
name|ranges
init|=
literal|"<0000><0000><0000>\n"
decl_stmt|;
name|QPdf
operator|::
name|ByteStream
name|s
argument_list|(
operator|&
name|ranges
argument_list|)
decl_stmt|;
name|char
name|buf
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|g
init|=
literal|1
init|;
name|g
operator|<
name|nGlyphs
argument_list|()
condition|;
control|)
block|{
name|int
name|uc0
init|=
name|reverseMap
operator|.
name|at
argument_list|(
name|g
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|uc0
condition|)
block|{
operator|++
name|g
expr_stmt|;
continue|continue;
block|}
name|int
name|start
init|=
name|g
decl_stmt|;
name|int
name|startLinear
init|=
literal|0
decl_stmt|;
operator|++
name|g
expr_stmt|;
while|while
condition|(
name|g
operator|<
name|nGlyphs
argument_list|()
condition|)
block|{
name|int
name|uc
init|=
name|reverseMap
index|[
name|g
index|]
decl_stmt|;
comment|// cmaps can't have the high byte changing within one range, so we need to break on that as well
if|if
condition|(
operator|!
name|uc
operator|||
operator|(
name|g
operator|>>
literal|8
operator|)
operator|!=
operator|(
name|start
operator|>>
literal|8
operator|)
condition|)
break|break;
if|if
condition|(
name|uc
operator|==
name|uc0
operator|+
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|startLinear
condition|)
name|startLinear
operator|=
name|g
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|startLinear
operator|>
literal|0
operator|&&
name|g
operator|-
name|startLinear
operator|>=
literal|10
condition|)
break|break;
name|startLinear
operator|=
literal|0
expr_stmt|;
block|}
name|uc0
operator|=
name|uc
expr_stmt|;
operator|++
name|g
expr_stmt|;
block|}
comment|// qDebug("start=%x startLinear=%x g-1=%x",start,startLinear,g-1);
if|if
condition|(
name|g
operator|-
name|startLinear
operator|<
literal|10
condition|)
name|startLinear
operator|=
literal|0
expr_stmt|;
name|int
name|endnonlinear
init|=
name|startLinear
condition|?
name|startLinear
else|:
name|g
decl_stmt|;
comment|// qDebug("    startLinear=%x endnonlinear=%x", startLinear,endnonlinear);
if|if
condition|(
name|endnonlinear
operator|>
name|start
condition|)
block|{
name|s
operator|<<
literal|'<'
operator|<<
name|QPdf
operator|::
name|toHex
argument_list|(
operator|(
name|ushort
operator|)
name|start
argument_list|,
name|buf
argument_list|)
operator|<<
literal|"><"
expr_stmt|;
name|s
operator|<<
name|QPdf
operator|::
name|toHex
argument_list|(
call|(
name|ushort
call|)
argument_list|(
name|endnonlinear
operator|-
literal|1
argument_list|)
argument_list|,
name|buf
argument_list|)
operator|<<
literal|"> "
expr_stmt|;
if|if
condition|(
name|endnonlinear
operator|==
name|start
operator|+
literal|1
condition|)
block|{
name|s
operator|<<
literal|'<'
operator|<<
name|QPdf
operator|::
name|toHex
argument_list|(
operator|(
name|ushort
operator|)
name|reverseMap
index|[
name|start
index|]
argument_list|,
name|buf
argument_list|)
operator|<<
literal|">\n"
expr_stmt|;
block|}
else|else
block|{
name|s
operator|<<
literal|'['
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|endnonlinear
condition|;
operator|++
name|i
control|)
block|{
name|s
operator|<<
literal|'<'
operator|<<
name|QPdf
operator|::
name|toHex
argument_list|(
operator|(
name|ushort
operator|)
name|reverseMap
index|[
name|i
index|]
argument_list|,
name|buf
argument_list|)
operator|<<
literal|"> "
expr_stmt|;
block|}
name|s
operator|<<
literal|"]\n"
expr_stmt|;
block|}
name|checkRanges
argument_list|(
name|ts
argument_list|,
name|ranges
argument_list|,
name|nranges
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|startLinear
condition|)
block|{
while|while
condition|(
name|startLinear
operator|<
name|g
condition|)
block|{
name|int
name|len
init|=
name|g
operator|-
name|startLinear
decl_stmt|;
name|int
name|uc_start
init|=
name|reverseMap
index|[
name|startLinear
index|]
decl_stmt|;
name|int
name|uc_end
init|=
name|uc_start
operator|+
name|len
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|(
name|uc_end
operator|>>
literal|8
operator|)
operator|!=
operator|(
name|uc_start
operator|>>
literal|8
operator|)
condition|)
name|len
operator|=
literal|256
operator|-
operator|(
name|uc_start
operator|&
literal|0xff
operator|)
expr_stmt|;
name|s
operator|<<
literal|'<'
operator|<<
name|QPdf
operator|::
name|toHex
argument_list|(
operator|(
name|ushort
operator|)
name|startLinear
argument_list|,
name|buf
argument_list|)
operator|<<
literal|"><"
expr_stmt|;
name|s
operator|<<
name|QPdf
operator|::
name|toHex
argument_list|(
call|(
name|ushort
call|)
argument_list|(
name|startLinear
operator|+
name|len
operator|-
literal|1
argument_list|)
argument_list|,
name|buf
argument_list|)
operator|<<
literal|"> "
expr_stmt|;
name|s
operator|<<
literal|'<'
operator|<<
name|QPdf
operator|::
name|toHex
argument_list|(
operator|(
name|ushort
operator|)
name|reverseMap
index|[
name|startLinear
index|]
argument_list|,
name|buf
argument_list|)
operator|<<
literal|">\n"
expr_stmt|;
name|checkRanges
argument_list|(
name|ts
argument_list|,
name|ranges
argument_list|,
name|nranges
argument_list|)
expr_stmt|;
name|startLinear
operator|+=
name|len
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|nranges
condition|)
block|{
name|ts
operator|<<
name|nranges
operator|<<
literal|"beginbfrange\n"
operator|<<
name|ranges
operator|<<
literal|"endbfrange\n"
expr_stmt|;
block|}
name|ts
operator|<<
literal|"endcmap\n"
literal|"CMapName currentdict /CMap defineresource pop\n"
literal|"end\n"
literal|"end\n"
expr_stmt|;
return|return
name|touc
return|;
block|}
end_function
begin_function
DECL|function|addGlyph
name|int
name|QFontSubset
operator|::
name|addGlyph
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|int
name|idx
init|=
name|glyph_indices
operator|.
name|indexOf
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
name|idx
operator|=
name|glyph_indices
operator|.
name|size
argument_list|()
expr_stmt|;
name|glyph_indices
operator|.
name|append
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|idx
return|;
block|}
end_function
begin_comment
comment|// ------------------------------ Truetype generation ----------------------------------------------
end_comment
begin_typedef
DECL|typedef|F2DOT14
typedef|typedef
name|qint16
name|F2DOT14
typedef|;
end_typedef
begin_typedef
DECL|typedef|Tag
typedef|typedef
name|quint32
name|Tag
typedef|;
end_typedef
begin_typedef
DECL|typedef|GlyphID
typedef|typedef
name|quint16
name|GlyphID
typedef|;
end_typedef
begin_typedef
DECL|typedef|Offset
typedef|typedef
name|quint16
name|Offset
typedef|;
end_typedef
begin_class
DECL|class|QTtfStream
class|class
name|QTtfStream
block|{
public|public:
DECL|function|QTtfStream
name|QTtfStream
parameter_list|(
name|QByteArray
modifier|&
name|ba
parameter_list|)
member_init_list|:
name|data
argument_list|(
operator|(
name|uchar
operator|*
operator|)
name|ba
operator|.
name|data
argument_list|()
argument_list|)
block|{
name|start
operator|=
name|data
expr_stmt|;
block|}
DECL|function|operator <<
name|QTtfStream
modifier|&
name|operator
name|<<
parameter_list|(
name|quint8
name|v
parameter_list|)
block|{
operator|*
name|data
operator|=
name|v
expr_stmt|;
operator|++
name|data
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator <<
name|QTtfStream
modifier|&
name|operator
name|<<
parameter_list|(
name|quint16
name|v
parameter_list|)
block|{
name|qToBigEndian
argument_list|(
name|v
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|data
operator|+=
sizeof|sizeof
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator <<
name|QTtfStream
modifier|&
name|operator
name|<<
parameter_list|(
name|quint32
name|v
parameter_list|)
block|{
name|qToBigEndian
argument_list|(
name|v
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|data
operator|+=
sizeof|sizeof
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator <<
name|QTtfStream
modifier|&
name|operator
name|<<
parameter_list|(
name|qint8
name|v
parameter_list|)
block|{
operator|*
name|data
operator|=
name|quint8
argument_list|(
name|v
argument_list|)
expr_stmt|;
operator|++
name|data
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator <<
name|QTtfStream
modifier|&
name|operator
name|<<
parameter_list|(
name|qint16
name|v
parameter_list|)
block|{
name|qToBigEndian
argument_list|(
name|v
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|data
operator|+=
sizeof|sizeof
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator <<
name|QTtfStream
modifier|&
name|operator
name|<<
parameter_list|(
name|qint32
name|v
parameter_list|)
block|{
name|qToBigEndian
argument_list|(
name|v
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|data
operator|+=
sizeof|sizeof
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator <<
name|QTtfStream
modifier|&
name|operator
name|<<
parameter_list|(
name|qint64
name|v
parameter_list|)
block|{
name|qToBigEndian
argument_list|(
name|v
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|data
operator|+=
sizeof|sizeof
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|offset
name|int
name|offset
parameter_list|()
specifier|const
block|{
return|return
name|data
operator|-
name|start
return|;
block|}
DECL|function|setOffset
name|void
name|setOffset
parameter_list|(
name|int
name|o
parameter_list|)
block|{
name|data
operator|=
name|start
operator|+
name|o
expr_stmt|;
block|}
DECL|function|align4
name|void
name|align4
parameter_list|()
block|{
while|while
condition|(
name|offset
argument_list|()
operator|&
literal|3
condition|)
block|{
operator|*
name|data
operator|=
literal|'\0'
expr_stmt|;
operator|++
name|data
expr_stmt|;
block|}
block|}
private|private:
DECL|member|data
name|uchar
modifier|*
name|data
decl_stmt|;
DECL|member|start
name|uchar
modifier|*
name|start
decl_stmt|;
block|}
class|;
end_class
begin_struct
DECL|struct|QTtfTable
struct|struct
name|QTtfTable
block|{
DECL|member|tag
name|Tag
name|tag
decl_stmt|;
DECL|member|data
name|QByteArray
name|data
decl_stmt|;
block|}
struct|;
end_struct
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QTtfTable
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_struct
DECL|struct|qttf_head_table
struct|struct
name|qttf_head_table
block|{
DECL|member|font_revision
name|qint32
name|font_revision
decl_stmt|;
DECL|member|flags
name|quint16
name|flags
decl_stmt|;
DECL|member|created
name|qint64
name|created
decl_stmt|;
DECL|member|modified
name|qint64
name|modified
decl_stmt|;
DECL|member|xMin
name|qint16
name|xMin
decl_stmt|;
DECL|member|yMin
name|qint16
name|yMin
decl_stmt|;
DECL|member|xMax
name|qint16
name|xMax
decl_stmt|;
DECL|member|yMax
name|qint16
name|yMax
decl_stmt|;
DECL|member|macStyle
name|quint16
name|macStyle
decl_stmt|;
DECL|member|indexToLocFormat
name|qint16
name|indexToLocFormat
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|qttf_hhea_table
struct|struct
name|qttf_hhea_table
block|{
DECL|member|ascender
name|qint16
name|ascender
decl_stmt|;
DECL|member|descender
name|qint16
name|descender
decl_stmt|;
DECL|member|lineGap
name|qint16
name|lineGap
decl_stmt|;
DECL|member|maxAdvanceWidth
name|quint16
name|maxAdvanceWidth
decl_stmt|;
DECL|member|minLeftSideBearing
name|qint16
name|minLeftSideBearing
decl_stmt|;
DECL|member|minRightSideBearing
name|qint16
name|minRightSideBearing
decl_stmt|;
DECL|member|xMaxExtent
name|qint16
name|xMaxExtent
decl_stmt|;
DECL|member|numberOfHMetrics
name|quint16
name|numberOfHMetrics
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|qttf_maxp_table
struct|struct
name|qttf_maxp_table
block|{
DECL|member|numGlyphs
name|quint16
name|numGlyphs
decl_stmt|;
DECL|member|maxPoints
name|quint16
name|maxPoints
decl_stmt|;
DECL|member|maxContours
name|quint16
name|maxContours
decl_stmt|;
DECL|member|maxCompositePoints
name|quint16
name|maxCompositePoints
decl_stmt|;
DECL|member|maxCompositeContours
name|quint16
name|maxCompositeContours
decl_stmt|;
DECL|member|maxComponentElements
name|quint16
name|maxComponentElements
decl_stmt|;
DECL|member|maxComponentDepth
name|quint16
name|maxComponentDepth
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|qttf_name_table
struct|struct
name|qttf_name_table
block|{
DECL|member|copyright
name|QString
name|copyright
decl_stmt|;
DECL|member|family
name|QString
name|family
decl_stmt|;
DECL|member|subfamily
name|QString
name|subfamily
decl_stmt|;
DECL|member|postscript_name
name|QString
name|postscript_name
decl_stmt|;
block|}
struct|;
end_struct
begin_function_decl
specifier|static
name|QTtfTable
name|generateHead
parameter_list|(
specifier|const
name|qttf_head_table
modifier|&
name|head
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QTtfTable
name|generateHhea
parameter_list|(
specifier|const
name|qttf_hhea_table
modifier|&
name|hhea
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QTtfTable
name|generateMaxp
parameter_list|(
specifier|const
name|qttf_maxp_table
modifier|&
name|maxp
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QTtfTable
name|generateName
parameter_list|(
specifier|const
name|qttf_name_table
modifier|&
name|name
parameter_list|)
function_decl|;
end_function_decl
begin_struct
DECL|struct|qttf_font_tables
struct|struct
name|qttf_font_tables
block|{
DECL|member|head
name|qttf_head_table
name|head
decl_stmt|;
DECL|member|hhea
name|qttf_hhea_table
name|hhea
decl_stmt|;
DECL|member|maxp
name|qttf_maxp_table
name|maxp
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QTtfGlyph
struct|struct
name|QTtfGlyph
block|{
DECL|member|index
name|quint16
name|index
decl_stmt|;
DECL|member|xMin
name|qint16
name|xMin
decl_stmt|;
DECL|member|xMax
name|qint16
name|xMax
decl_stmt|;
DECL|member|yMin
name|qint16
name|yMin
decl_stmt|;
DECL|member|yMax
name|qint16
name|yMax
decl_stmt|;
DECL|member|advanceWidth
name|quint16
name|advanceWidth
decl_stmt|;
DECL|member|lsb
name|qint16
name|lsb
decl_stmt|;
DECL|member|numContours
name|quint16
name|numContours
decl_stmt|;
DECL|member|numPoints
name|quint16
name|numPoints
decl_stmt|;
DECL|member|data
name|QByteArray
name|data
decl_stmt|;
block|}
struct|;
end_struct
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QTtfGlyph
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|static
name|QTtfGlyph
name|generateGlyph
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|qreal
name|advance
parameter_list|,
name|qreal
name|lsb
parameter_list|,
name|qreal
name|ppem
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// generates glyf, loca and hmtx
end_comment
begin_function_decl
specifier|static
name|QList
argument_list|<
name|QTtfTable
argument_list|>
name|generateGlyphTables
parameter_list|(
name|qttf_font_tables
modifier|&
name|tables
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QTtfGlyph
argument_list|>
modifier|&
name|_glyphs
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QByteArray
name|bindFont
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QTtfTable
argument_list|>
modifier|&
name|_tables
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|checksum
specifier|static
name|quint32
name|checksum
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|table
parameter_list|)
block|{
name|quint32
name|sum
init|=
literal|0
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|d
init|=
operator|(
name|uchar
operator|*
operator|)
name|table
operator|.
name|constData
argument_list|()
decl_stmt|;
while|while
condition|(
name|offset
operator|<=
name|table
operator|.
name|size
argument_list|()
operator|-
literal|3
condition|)
block|{
name|sum
operator|+=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|d
operator|+
name|offset
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|4
expr_stmt|;
block|}
name|int
name|shift
init|=
literal|24
decl_stmt|;
name|quint32
name|x
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|table
operator|.
name|size
argument_list|()
condition|)
block|{
name|x
operator||=
operator|(
operator|(
name|quint32
operator|)
name|d
index|[
name|offset
index|]
operator|)
operator|<<
name|shift
expr_stmt|;
operator|++
name|offset
expr_stmt|;
name|shift
operator|-=
literal|8
expr_stmt|;
block|}
name|sum
operator|+=
name|x
expr_stmt|;
return|return
name|sum
return|;
block|}
end_function
begin_function
DECL|function|generateHead
specifier|static
name|QTtfTable
name|generateHead
parameter_list|(
specifier|const
name|qttf_head_table
modifier|&
name|head
parameter_list|)
block|{
specifier|const
name|int
name|head_size
init|=
literal|54
decl_stmt|;
name|QTtfTable
name|t
decl_stmt|;
name|t
operator|.
name|tag
operator|=
name|MAKE_TAG
argument_list|(
literal|'h'
argument_list|,
literal|'e'
argument_list|,
literal|'a'
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
name|t
operator|.
name|data
operator|.
name|resize
argument_list|(
name|head_size
argument_list|)
expr_stmt|;
name|QTtfStream
name|s
argument_list|(
name|t
operator|.
name|data
argument_list|)
decl_stmt|;
comment|// qint32  Table version number  0x00010000 for version 1.0.
comment|// qint32  fontRevision  Set by font manufacturer.
name|s
operator|<<
name|qint32
argument_list|(
literal|0x00010000
argument_list|)
operator|<<
name|head
operator|.
name|font_revision
comment|// quint32  checkSumAdjustment  To compute: set it to 0, sum the entire font as quint32, then store 0xB1B0AFBA - sum.
operator|<<
name|quint32
argument_list|(
literal|0
argument_list|)
comment|// quint32  magicNumber  Set to 0x5F0F3CF5.
operator|<<
name|quint32
argument_list|(
literal|0x5F0F3CF5
argument_list|)
comment|// quint16  flags  Bit 0: Baseline for font at y=0;
comment|// Bit 1: Left sidebearing point at x=0;
comment|// Bit 2: Instructions may depend on point size;
comment|// Bit 3: Force ppem to integer values for all internal scaler math; may use fractional ppem sizes if this bit is clear;
comment|// Bit 4: Instructions may alter advance width (the advance widths might not scale linearly);
comment|// Bits 5-10: These should be set according to  Apple's specification . However, they are not implemented in OpenType.
comment|// Bit 11: Font data is 'lossless,' as a result of having been compressed and decompressed with the Agfa MicroType Express engine.
comment|// Bit 12: Font converted (produce compatible metrics)
comment|// Bit 13: Font optimized for ClearType
comment|// Bit 14: Reserved, set to 0
comment|// Bit 15: Reserved, set to 0
operator|<<
name|quint16
argument_list|(
literal|0
argument_list|)
comment|// quint16  unitsPerEm  Valid range is from 16 to 16384. This value should be a power of 2 for fonts that have TrueType outlines.
operator|<<
name|quint16
argument_list|(
literal|2048
argument_list|)
comment|// qint64  created  Number of seconds since 12:00 midnight, January 1, 1904. 64-bit integer
operator|<<
name|head
operator|.
name|created
comment|// qint64  modified  Number of seconds since 12:00 midnight, January 1, 1904. 64-bit integer
operator|<<
name|head
operator|.
name|modified
comment|// qint16  xMin  For all glyph bounding boxes.
comment|// qint16  yMin  For all glyph bounding boxes.
comment|// qint16  xMax  For all glyph bounding boxes.
comment|// qint16  yMax  For all glyph bounding boxes.
operator|<<
name|head
operator|.
name|xMin
operator|<<
name|head
operator|.
name|yMin
operator|<<
name|head
operator|.
name|xMax
operator|<<
name|head
operator|.
name|yMax
comment|// quint16  macStyle  Bit 0: Bold (if set to 1);
comment|// Bit 1: Italic (if set to 1)
comment|// Bit 2: Underline (if set to 1)
comment|// Bit 3: Outline (if set to 1)
comment|// Bit 4: Shadow (if set to 1)
comment|// Bit 5: Condensed (if set to 1)
comment|// Bit 6: Extended (if set to 1)
comment|// Bits 7-15: Reserved (set to 0).
operator|<<
name|head
operator|.
name|macStyle
comment|// quint16  lowestRecPPEM  Smallest readable size in pixels.
operator|<<
name|quint16
argument_list|(
literal|6
argument_list|)
comment|// just a wild guess
comment|// qint16  fontDirectionHint   0: Fully mixed directional glyphs;
operator|<<
name|qint16
argument_list|(
literal|0
argument_list|)
comment|// 1: Only strongly left to right;
comment|// 2: Like 1 but also contains neutrals;
comment|// -1: Only strongly right to left;
comment|// -2: Like -1 but also contains neutrals. 1
comment|// qint16  indexToLocFormat  0 for short offsets, 1 for long.
operator|<<
name|head
operator|.
name|indexToLocFormat
comment|// qint16  glyphDataFormat  0 for current format.
operator|<<
name|qint16
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|s
operator|.
name|offset
argument_list|()
operator|==
name|head_size
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
end_function
begin_function
DECL|function|generateHhea
specifier|static
name|QTtfTable
name|generateHhea
parameter_list|(
specifier|const
name|qttf_hhea_table
modifier|&
name|hhea
parameter_list|)
block|{
specifier|const
name|int
name|hhea_size
init|=
literal|36
decl_stmt|;
name|QTtfTable
name|t
decl_stmt|;
name|t
operator|.
name|tag
operator|=
name|MAKE_TAG
argument_list|(
literal|'h'
argument_list|,
literal|'h'
argument_list|,
literal|'e'
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|t
operator|.
name|data
operator|.
name|resize
argument_list|(
name|hhea_size
argument_list|)
expr_stmt|;
name|QTtfStream
name|s
argument_list|(
name|t
operator|.
name|data
argument_list|)
decl_stmt|;
comment|// qint32  Table version number  0x00010000 for version 1.0.
name|s
operator|<<
name|qint32
argument_list|(
literal|0x00010000
argument_list|)
comment|// qint16  Ascender  Typographic ascent.  (Distance from baseline of highest ascender)
operator|<<
name|hhea
operator|.
name|ascender
comment|// qint16  Descender  Typographic descent.  (Distance from baseline of lowest descender)
operator|<<
name|hhea
operator|.
name|descender
comment|// qint16  LineGap  Typographic line gap.
comment|// Negative LineGap values are treated as zero
comment|// in Windows 3.1, System 6, and
comment|// System 7.
operator|<<
name|hhea
operator|.
name|lineGap
comment|// quint16  advanceWidthMax  Maximum advance width value in 'hmtx' table.
operator|<<
name|hhea
operator|.
name|maxAdvanceWidth
comment|// qint16  minLeftSideBearing  Minimum left sidebearing value in 'hmtx' table.
operator|<<
name|hhea
operator|.
name|minLeftSideBearing
comment|// qint16  minRightSideBearing  Minimum right sidebearing value; calculated as Min(aw - lsb - (xMax - xMin)).
operator|<<
name|hhea
operator|.
name|minRightSideBearing
comment|// qint16  xMaxExtent  Max(lsb + (xMax - xMin)).
operator|<<
name|hhea
operator|.
name|xMaxExtent
comment|// qint16  caretSlopeRise  Used to calculate the slope of the cursor (rise/run); 1 for vertical.
operator|<<
name|qint16
argument_list|(
literal|1
argument_list|)
comment|// qint16  caretSlopeRun  0 for vertical.
operator|<<
name|qint16
argument_list|(
literal|0
argument_list|)
comment|// qint16  caretOffset  The amount by which a slanted highlight on a glyph needs to be shifted to produce the best appearance. Set to 0 for non-slanted fonts
operator|<<
name|qint16
argument_list|(
literal|0
argument_list|)
comment|// qint16  (reserved)  set to 0
operator|<<
name|qint16
argument_list|(
literal|0
argument_list|)
comment|// qint16  (reserved)  set to 0
operator|<<
name|qint16
argument_list|(
literal|0
argument_list|)
comment|// qint16  (reserved)  set to 0
operator|<<
name|qint16
argument_list|(
literal|0
argument_list|)
comment|// qint16  (reserved)  set to 0
operator|<<
name|qint16
argument_list|(
literal|0
argument_list|)
comment|// qint16  metricDataFormat  0 for current format.
operator|<<
name|qint16
argument_list|(
literal|0
argument_list|)
comment|// quint16  numberOfHMetrics  Number of hMetric entries in 'hmtx' table
operator|<<
name|hhea
operator|.
name|numberOfHMetrics
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|s
operator|.
name|offset
argument_list|()
operator|==
name|hhea_size
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
end_function
begin_function
DECL|function|generateMaxp
specifier|static
name|QTtfTable
name|generateMaxp
parameter_list|(
specifier|const
name|qttf_maxp_table
modifier|&
name|maxp
parameter_list|)
block|{
specifier|const
name|int
name|maxp_size
init|=
literal|32
decl_stmt|;
name|QTtfTable
name|t
decl_stmt|;
name|t
operator|.
name|tag
operator|=
name|MAKE_TAG
argument_list|(
literal|'m'
argument_list|,
literal|'a'
argument_list|,
literal|'x'
argument_list|,
literal|'p'
argument_list|)
expr_stmt|;
name|t
operator|.
name|data
operator|.
name|resize
argument_list|(
name|maxp_size
argument_list|)
expr_stmt|;
name|QTtfStream
name|s
argument_list|(
name|t
operator|.
name|data
argument_list|)
decl_stmt|;
comment|// qint32  Table version number  0x00010000 for version 1.0.
name|s
operator|<<
name|qint32
argument_list|(
literal|0x00010000
argument_list|)
comment|// quint16  numGlyphs  The number of glyphs in the font.
operator|<<
name|maxp
operator|.
name|numGlyphs
comment|// quint16  maxPoints  Maximum points in a non-composite glyph.
operator|<<
name|maxp
operator|.
name|maxPoints
comment|// quint16  maxContours  Maximum contours in a non-composite glyph.
operator|<<
name|maxp
operator|.
name|maxContours
comment|// quint16  maxCompositePoints  Maximum points in a composite glyph.
operator|<<
name|maxp
operator|.
name|maxCompositePoints
comment|// quint16  maxCompositeContours  Maximum contours in a composite glyph.
operator|<<
name|maxp
operator|.
name|maxCompositeContours
comment|// quint16  maxZones  1 if instructions do not use the twilight zone (Z0), or 2 if instructions do use Z0; should be set to 2 in most cases.
operator|<<
name|quint16
argument_list|(
literal|1
argument_list|)
comment|// we do not embed instructions
comment|// quint16  maxTwilightPoints  Maximum points used in Z0.
operator|<<
name|quint16
argument_list|(
literal|0
argument_list|)
comment|// quint16  maxStorage  Number of Storage Area locations.
operator|<<
name|quint16
argument_list|(
literal|0
argument_list|)
comment|// quint16  maxFunctionDefs  Number of FDEFs.
operator|<<
name|quint16
argument_list|(
literal|0
argument_list|)
comment|// quint16  maxInstructionDefs  Number of IDEFs.
operator|<<
name|quint16
argument_list|(
literal|0
argument_list|)
comment|// quint16  maxStackElements  Maximum stack depth2.
operator|<<
name|quint16
argument_list|(
literal|0
argument_list|)
comment|// quint16  maxSizeOfInstructions  Maximum byte count for glyph instructions.
operator|<<
name|quint16
argument_list|(
literal|0
argument_list|)
comment|// quint16  maxComponentElements  Maximum number of components referenced at "top level" for any composite glyph.
operator|<<
name|maxp
operator|.
name|maxComponentElements
comment|// quint16  maxComponentDepth  Maximum levels of recursion; 1 for simple components.
operator|<<
name|maxp
operator|.
name|maxComponentDepth
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|s
operator|.
name|offset
argument_list|()
operator|==
name|maxp_size
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
end_function
begin_struct
DECL|struct|QTtfNameRecord
struct|struct
name|QTtfNameRecord
block|{
DECL|member|nameId
name|quint16
name|nameId
decl_stmt|;
DECL|member|value
name|QString
name|value
decl_stmt|;
block|}
struct|;
end_struct
begin_function_decl
specifier|static
name|QTtfTable
name|generateName
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QTtfNameRecord
argument_list|>
modifier|&
name|name
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|generateName
specifier|static
name|QTtfTable
name|generateName
parameter_list|(
specifier|const
name|qttf_name_table
modifier|&
name|name
parameter_list|)
block|{
name|QList
argument_list|<
name|QTtfNameRecord
argument_list|>
name|list
decl_stmt|;
name|QTtfNameRecord
name|rec
decl_stmt|;
name|rec
operator|.
name|nameId
operator|=
literal|0
expr_stmt|;
name|rec
operator|.
name|value
operator|=
name|name
operator|.
name|copyright
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|rec
operator|.
name|nameId
operator|=
literal|1
expr_stmt|;
name|rec
operator|.
name|value
operator|=
name|name
operator|.
name|family
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|rec
operator|.
name|nameId
operator|=
literal|2
expr_stmt|;
name|rec
operator|.
name|value
operator|=
name|name
operator|.
name|subfamily
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|rec
operator|.
name|nameId
operator|=
literal|4
expr_stmt|;
name|rec
operator|.
name|value
operator|=
name|name
operator|.
name|family
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|subfamily
operator|!=
name|QLatin1String
argument_list|(
literal|"Regular"
argument_list|)
condition|)
name|rec
operator|.
name|value
operator|+=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|name
operator|.
name|subfamily
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|rec
operator|.
name|nameId
operator|=
literal|6
expr_stmt|;
name|rec
operator|.
name|value
operator|=
name|name
operator|.
name|postscript_name
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
name|rec
argument_list|)
expr_stmt|;
return|return
name|generateName
argument_list|(
name|list
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// ####### should probably generate Macintosh/Roman name entries as well
end_comment
begin_function
DECL|function|generateName
specifier|static
name|QTtfTable
name|generateName
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QTtfNameRecord
argument_list|>
modifier|&
name|name
parameter_list|)
block|{
specifier|const
name|int
name|char_size
init|=
literal|2
decl_stmt|;
name|QTtfTable
name|t
decl_stmt|;
name|t
operator|.
name|tag
operator|=
name|MAKE_TAG
argument_list|(
literal|'n'
argument_list|,
literal|'a'
argument_list|,
literal|'m'
argument_list|,
literal|'e'
argument_list|)
expr_stmt|;
specifier|const
name|int
name|name_size
init|=
literal|6
operator|+
literal|12
operator|*
name|name
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|string_size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|string_size
operator|+=
name|name
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|length
argument_list|()
operator|*
name|char_size
expr_stmt|;
block|}
name|t
operator|.
name|data
operator|.
name|resize
argument_list|(
name|name_size
operator|+
name|string_size
argument_list|)
expr_stmt|;
name|QTtfStream
name|s
argument_list|(
name|t
operator|.
name|data
argument_list|)
decl_stmt|;
comment|// quint16  format  Format selector (=0).
name|s
operator|<<
name|quint16
argument_list|(
literal|0
argument_list|)
comment|// quint16  count  Number of name records.
operator|<<
name|quint16
argument_list|(
name|name
operator|.
name|size
argument_list|()
argument_list|)
comment|// quint16  stringOffset  Offset to start of string storage (from start of table).
operator|<<
name|quint16
argument_list|(
name|name_size
argument_list|)
expr_stmt|;
comment|// NameRecord  nameRecord[count]  The name records where count is the number of records.
comment|// (Variable)
name|int
name|off
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|len
init|=
name|name
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|length
argument_list|()
operator|*
name|char_size
decl_stmt|;
comment|// quint16  platformID  Platform ID.
comment|// quint16  encodingID  Platform-specific encoding ID.
comment|// quint16  languageID  Language ID.
name|s
operator|<<
name|quint16
argument_list|(
literal|3
argument_list|)
operator|<<
name|quint16
argument_list|(
literal|1
argument_list|)
operator|<<
name|quint16
argument_list|(
literal|0x0409
argument_list|)
comment|// en_US
comment|// quint16  nameId  Name ID.
operator|<<
name|name
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|nameId
comment|// quint16  length  String length (in bytes).
operator|<<
name|quint16
argument_list|(
name|len
argument_list|)
comment|// quint16  offset  String offset from start of storage area (in bytes).
operator|<<
name|quint16
argument_list|(
name|off
argument_list|)
expr_stmt|;
name|off
operator|+=
name|len
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
modifier|&
name|n
init|=
name|name
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
decl_stmt|;
specifier|const
name|ushort
modifier|*
name|uc
init|=
name|n
operator|.
name|utf16
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|s
operator|<<
name|quint16
argument_list|(
operator|*
name|uc
argument_list|)
expr_stmt|;
operator|++
name|uc
expr_stmt|;
block|}
block|}
return|return
name|t
return|;
block|}
end_function
begin_enum
DECL|enum|Flags
enum|enum
name|Flags
block|{
DECL|enumerator|OffCurve
name|OffCurve
init|=
literal|0
block|,
DECL|enumerator|OnCurve
name|OnCurve
init|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
DECL|enumerator|XShortVector
name|XShortVector
init|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|,
DECL|enumerator|YShortVector
name|YShortVector
init|=
operator|(
literal|1
operator|<<
literal|2
operator|)
block|,
DECL|enumerator|Repeat
name|Repeat
init|=
operator|(
literal|1
operator|<<
literal|3
operator|)
block|,
DECL|enumerator|XSame
name|XSame
init|=
operator|(
literal|1
operator|<<
literal|4
operator|)
block|,
DECL|enumerator|XShortPositive
name|XShortPositive
init|=
operator|(
literal|1
operator|<<
literal|4
operator|)
block|,
DECL|enumerator|YSame
name|YSame
init|=
operator|(
literal|1
operator|<<
literal|5
operator|)
block|,
DECL|enumerator|YShortPositive
name|YShortPositive
init|=
operator|(
literal|1
operator|<<
literal|5
operator|)
block|}
enum|;
end_enum
begin_struct
DECL|struct|TTF_POINT
struct|struct
name|TTF_POINT
block|{
DECL|member|x
name|qint16
name|x
decl_stmt|;
DECL|member|y
name|qint16
name|y
decl_stmt|;
DECL|member|flags
name|quint8
name|flags
decl_stmt|;
block|}
struct|;
end_struct
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|TTF_POINT
argument_list|,
name|Q_PRIMITIVE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|convertPath
specifier|static
name|void
name|convertPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|QList
argument_list|<
name|TTF_POINT
argument_list|>
modifier|*
name|points
parameter_list|,
name|QList
argument_list|<
name|int
argument_list|>
modifier|*
name|endPoints
parameter_list|,
name|qreal
name|ppem
parameter_list|)
block|{
name|int
name|numElements
init|=
name|path
operator|.
name|elementCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numElements
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPainterPath
operator|::
name|Element
modifier|&
name|e
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|TTF_POINT
name|p
decl_stmt|;
name|p
operator|.
name|x
operator|=
name|qRound
argument_list|(
name|e
operator|.
name|x
operator|*
literal|2048.
operator|/
name|ppem
argument_list|)
expr_stmt|;
name|p
operator|.
name|y
operator|=
name|qRound
argument_list|(
operator|-
name|e
operator|.
name|y
operator|*
literal|2048.
operator|/
name|ppem
argument_list|)
expr_stmt|;
name|p
operator|.
name|flags
operator|=
literal|0
expr_stmt|;
switch|switch
condition|(
name|e
operator|.
name|type
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
comment|// see if start and end points of the last contour agree
name|int
name|start
init|=
name|endPoints
operator|->
name|size
argument_list|()
condition|?
name|endPoints
operator|->
name|at
argument_list|(
name|endPoints
operator|->
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|-
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|end
init|=
name|points
operator|->
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|points
operator|->
name|at
argument_list|(
name|end
argument_list|)
operator|.
name|x
operator|==
name|points
operator|->
name|at
argument_list|(
name|start
argument_list|)
operator|.
name|x
operator|&&
name|points
operator|->
name|at
argument_list|(
name|end
argument_list|)
operator|.
name|y
operator|==
name|points
operator|->
name|at
argument_list|(
name|start
argument_list|)
operator|.
name|y
condition|)
name|points
operator|->
name|takeLast
argument_list|()
expr_stmt|;
name|endPoints
operator|->
name|append
argument_list|(
name|points
operator|->
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// fall through
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
name|p
operator|.
name|flags
operator|=
name|OnCurve
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
block|{
comment|// cubic bezier curve, we need to reduce to a list of quadratic curves
name|TTF_POINT
name|list
index|[
literal|3
operator|*
literal|16
operator|+
literal|4
index|]
decl_stmt|;
comment|// we need max 16 subdivisions
name|list
index|[
literal|3
index|]
operator|=
name|points
operator|->
name|at
argument_list|(
name|points
operator|->
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|list
index|[
literal|2
index|]
operator|=
name|p
expr_stmt|;
specifier|const
name|QPainterPath
operator|::
name|Element
modifier|&
name|e2
init|=
name|path
operator|.
name|elementAt
argument_list|(
operator|++
name|i
argument_list|)
decl_stmt|;
name|list
index|[
literal|1
index|]
operator|.
name|x
operator|=
name|qRound
argument_list|(
name|e2
operator|.
name|x
operator|*
literal|2048.
operator|/
name|ppem
argument_list|)
expr_stmt|;
name|list
index|[
literal|1
index|]
operator|.
name|y
operator|=
name|qRound
argument_list|(
operator|-
name|e2
operator|.
name|y
operator|*
literal|2048.
operator|/
name|ppem
argument_list|)
expr_stmt|;
specifier|const
name|QPainterPath
operator|::
name|Element
modifier|&
name|e3
init|=
name|path
operator|.
name|elementAt
argument_list|(
operator|++
name|i
argument_list|)
decl_stmt|;
name|list
index|[
literal|0
index|]
operator|.
name|x
operator|=
name|qRound
argument_list|(
name|e3
operator|.
name|x
operator|*
literal|2048.
operator|/
name|ppem
argument_list|)
expr_stmt|;
name|list
index|[
literal|0
index|]
operator|.
name|y
operator|=
name|qRound
argument_list|(
operator|-
name|e3
operator|.
name|y
operator|*
literal|2048.
operator|/
name|ppem
argument_list|)
expr_stmt|;
name|TTF_POINT
modifier|*
name|base
init|=
name|list
decl_stmt|;
name|bool
name|try_reduce
init|=
name|points
operator|->
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|points
operator|->
name|at
argument_list|(
name|points
operator|->
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|flags
operator|==
name|OnCurve
operator|&&
name|points
operator|->
name|at
argument_list|(
name|points
operator|->
name|size
argument_list|()
operator|-
literal|2
argument_list|)
operator|.
name|flags
operator|==
name|OffCurve
decl_stmt|;
comment|//             qDebug("generating beziers:");
while|while
condition|(
name|base
operator|>=
name|list
condition|)
block|{
specifier|const
name|int
name|split_limit
init|=
literal|3
decl_stmt|;
comment|//                 {
comment|//                     qDebug("iteration:");
comment|//                     TTF_POINT *x = list;
comment|//                     while (x<= base + 3) {
comment|//                         qDebug()<< "    "<< QPoint(x->x, x->y);
comment|//                         ++x;
comment|//                     }
comment|//                 }
name|Q_ASSERT
argument_list|(
name|base
operator|-
name|list
operator|<
literal|3
operator|*
literal|16
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// first see if we can easily reduce the cubic to a quadratic bezier curve
name|int
name|i1_x
init|=
name|base
index|[
literal|1
index|]
operator|.
name|x
operator|+
operator|(
operator|(
name|base
index|[
literal|1
index|]
operator|.
name|x
operator|-
name|base
index|[
literal|0
index|]
operator|.
name|x
operator|)
operator|>>
literal|1
operator|)
decl_stmt|;
name|int
name|i1_y
init|=
name|base
index|[
literal|1
index|]
operator|.
name|y
operator|+
operator|(
operator|(
name|base
index|[
literal|1
index|]
operator|.
name|y
operator|-
name|base
index|[
literal|0
index|]
operator|.
name|y
operator|)
operator|>>
literal|1
operator|)
decl_stmt|;
name|int
name|i2_x
init|=
name|base
index|[
literal|2
index|]
operator|.
name|x
operator|+
operator|(
operator|(
name|base
index|[
literal|2
index|]
operator|.
name|x
operator|-
name|base
index|[
literal|3
index|]
operator|.
name|x
operator|)
operator|>>
literal|1
operator|)
decl_stmt|;
name|int
name|i2_y
init|=
name|base
index|[
literal|2
index|]
operator|.
name|y
operator|+
operator|(
operator|(
name|base
index|[
literal|2
index|]
operator|.
name|y
operator|-
name|base
index|[
literal|3
index|]
operator|.
name|y
operator|)
operator|>>
literal|1
operator|)
decl_stmt|;
comment|//                 qDebug()<< "checking: i1="<< QPoint(i1_x, i1_y)<< " i2="<< QPoint(i2_x, i2_y);
if|if
condition|(
name|qAbs
argument_list|(
name|i1_x
operator|-
name|i2_x
argument_list|)
operator|<=
name|split_limit
operator|&&
name|qAbs
argument_list|(
name|i1_y
operator|-
name|i2_y
argument_list|)
operator|<=
name|split_limit
condition|)
block|{
comment|// got a quadratic bezier curve
name|TTF_POINT
name|np
decl_stmt|;
name|np
operator|.
name|x
operator|=
operator|(
name|i1_x
operator|+
name|i2_x
operator|)
operator|>>
literal|1
expr_stmt|;
name|np
operator|.
name|y
operator|=
operator|(
name|i1_y
operator|+
name|i2_y
operator|)
operator|>>
literal|1
expr_stmt|;
if|if
condition|(
name|try_reduce
condition|)
block|{
comment|// see if we can optimize out the last onCurve point
name|int
name|mx
init|=
operator|(
name|points
operator|->
name|at
argument_list|(
name|points
operator|->
name|size
argument_list|()
operator|-
literal|2
argument_list|)
operator|.
name|x
operator|+
name|base
index|[
literal|2
index|]
operator|.
name|x
operator|)
operator|>>
literal|1
decl_stmt|;
name|int
name|my
init|=
operator|(
name|points
operator|->
name|at
argument_list|(
name|points
operator|->
name|size
argument_list|()
operator|-
literal|2
argument_list|)
operator|.
name|y
operator|+
name|base
index|[
literal|2
index|]
operator|.
name|y
operator|)
operator|>>
literal|1
decl_stmt|;
if|if
condition|(
name|qAbs
argument_list|(
name|mx
operator|-
name|base
index|[
literal|3
index|]
operator|.
name|x
argument_list|)
operator|<=
name|split_limit
operator|&&
name|qAbs
argument_list|(
name|my
operator|=
name|base
index|[
literal|3
index|]
operator|.
name|y
argument_list|)
operator|<=
name|split_limit
condition|)
name|points
operator|->
name|takeLast
argument_list|()
expr_stmt|;
name|try_reduce
operator|=
literal|false
expr_stmt|;
block|}
name|np
operator|.
name|flags
operator|=
name|OffCurve
expr_stmt|;
name|points
operator|->
name|append
argument_list|(
name|np
argument_list|)
expr_stmt|;
comment|//                     qDebug()<< "   appending offcurve point "<< QPoint(np.x, np.y);
name|base
operator|-=
literal|3
expr_stmt|;
block|}
else|else
block|{
comment|// need to split
comment|//                     qDebug()<< "  -> splitting";
name|qint16
name|a
decl_stmt|,
name|b
decl_stmt|,
name|c
decl_stmt|,
name|d
decl_stmt|;
name|base
index|[
literal|6
index|]
operator|.
name|x
operator|=
name|base
index|[
literal|3
index|]
operator|.
name|x
expr_stmt|;
name|c
operator|=
name|base
index|[
literal|1
index|]
operator|.
name|x
expr_stmt|;
name|d
operator|=
name|base
index|[
literal|2
index|]
operator|.
name|x
expr_stmt|;
name|base
index|[
literal|1
index|]
operator|.
name|x
operator|=
name|a
operator|=
operator|(
name|base
index|[
literal|0
index|]
operator|.
name|x
operator|+
name|c
operator|)
operator|>>
literal|1
expr_stmt|;
name|base
index|[
literal|5
index|]
operator|.
name|x
operator|=
name|b
operator|=
operator|(
name|base
index|[
literal|3
index|]
operator|.
name|x
operator|+
name|d
operator|)
operator|>>
literal|1
expr_stmt|;
name|c
operator|=
operator|(
name|c
operator|+
name|d
operator|)
operator|>>
literal|1
expr_stmt|;
name|base
index|[
literal|2
index|]
operator|.
name|x
operator|=
name|a
operator|=
operator|(
name|a
operator|+
name|c
operator|)
operator|>>
literal|1
expr_stmt|;
name|base
index|[
literal|4
index|]
operator|.
name|x
operator|=
name|b
operator|=
operator|(
name|b
operator|+
name|c
operator|)
operator|>>
literal|1
expr_stmt|;
name|base
index|[
literal|3
index|]
operator|.
name|x
operator|=
operator|(
name|a
operator|+
name|b
operator|)
operator|>>
literal|1
expr_stmt|;
name|base
index|[
literal|6
index|]
operator|.
name|y
operator|=
name|base
index|[
literal|3
index|]
operator|.
name|y
expr_stmt|;
name|c
operator|=
name|base
index|[
literal|1
index|]
operator|.
name|y
expr_stmt|;
name|d
operator|=
name|base
index|[
literal|2
index|]
operator|.
name|y
expr_stmt|;
name|base
index|[
literal|1
index|]
operator|.
name|y
operator|=
name|a
operator|=
operator|(
name|base
index|[
literal|0
index|]
operator|.
name|y
operator|+
name|c
operator|)
operator|>>
literal|1
expr_stmt|;
name|base
index|[
literal|5
index|]
operator|.
name|y
operator|=
name|b
operator|=
operator|(
name|base
index|[
literal|3
index|]
operator|.
name|y
operator|+
name|d
operator|)
operator|>>
literal|1
expr_stmt|;
name|c
operator|=
operator|(
name|c
operator|+
name|d
operator|)
operator|>>
literal|1
expr_stmt|;
name|base
index|[
literal|2
index|]
operator|.
name|y
operator|=
name|a
operator|=
operator|(
name|a
operator|+
name|c
operator|)
operator|>>
literal|1
expr_stmt|;
name|base
index|[
literal|4
index|]
operator|.
name|y
operator|=
name|b
operator|=
operator|(
name|b
operator|+
name|c
operator|)
operator|>>
literal|1
expr_stmt|;
name|base
index|[
literal|3
index|]
operator|.
name|y
operator|=
operator|(
name|a
operator|+
name|b
operator|)
operator|>>
literal|1
expr_stmt|;
name|base
operator|+=
literal|3
expr_stmt|;
block|}
block|}
name|p
operator|=
name|list
index|[
literal|0
index|]
expr_stmt|;
name|p
operator|.
name|flags
operator|=
name|OnCurve
expr_stmt|;
break|break;
block|}
case|case
name|QPainterPath
operator|::
name|CurveToDataElement
case|:
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
comment|//         qDebug()<< "   appending oncurve point "<< QPoint(p.x, p.y);
name|points
operator|->
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|int
name|start
init|=
name|endPoints
operator|->
name|size
argument_list|()
condition|?
name|endPoints
operator|->
name|at
argument_list|(
name|endPoints
operator|->
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|end
init|=
name|points
operator|->
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|points
operator|->
name|at
argument_list|(
name|end
argument_list|)
operator|.
name|x
operator|==
name|points
operator|->
name|at
argument_list|(
name|start
argument_list|)
operator|.
name|x
operator|&&
name|points
operator|->
name|at
argument_list|(
name|end
argument_list|)
operator|.
name|y
operator|==
name|points
operator|->
name|at
argument_list|(
name|start
argument_list|)
operator|.
name|y
condition|)
name|points
operator|->
name|takeLast
argument_list|()
expr_stmt|;
name|endPoints
operator|->
name|append
argument_list|(
name|points
operator|->
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getBounds
specifier|static
name|void
name|getBounds
parameter_list|(
specifier|const
name|QList
argument_list|<
name|TTF_POINT
argument_list|>
modifier|&
name|points
parameter_list|,
name|qint16
modifier|*
name|xmin
parameter_list|,
name|qint16
modifier|*
name|xmax
parameter_list|,
name|qint16
modifier|*
name|ymin
parameter_list|,
name|qint16
modifier|*
name|ymax
parameter_list|)
block|{
operator|*
name|xmin
operator|=
name|points
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|x
expr_stmt|;
operator|*
name|xmax
operator|=
operator|*
name|xmin
expr_stmt|;
operator|*
name|ymin
operator|=
name|points
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|y
expr_stmt|;
operator|*
name|ymax
operator|=
operator|*
name|ymin
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|points
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
operator|*
name|xmin
operator|=
name|qMin
argument_list|(
operator|*
name|xmin
argument_list|,
name|points
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|x
argument_list|)
expr_stmt|;
operator|*
name|xmax
operator|=
name|qMax
argument_list|(
operator|*
name|xmax
argument_list|,
name|points
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|x
argument_list|)
expr_stmt|;
operator|*
name|ymin
operator|=
name|qMin
argument_list|(
operator|*
name|ymin
argument_list|,
name|points
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|y
argument_list|)
expr_stmt|;
operator|*
name|ymax
operator|=
name|qMax
argument_list|(
operator|*
name|ymax
argument_list|,
name|points
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|y
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|convertToRelative
specifier|static
name|int
name|convertToRelative
parameter_list|(
name|QList
argument_list|<
name|TTF_POINT
argument_list|>
modifier|*
name|points
parameter_list|)
block|{
comment|// convert points to relative and setup flags
comment|//     qDebug()<< "relative points:";
name|qint16
name|prev_x
init|=
literal|0
decl_stmt|;
name|qint16
name|prev_y
init|=
literal|0
decl_stmt|;
name|int
name|point_array_size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|points
operator|->
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|x
init|=
name|points
operator|->
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|x
decl_stmt|;
specifier|const
name|int
name|y
init|=
name|points
operator|->
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|y
decl_stmt|;
name|TTF_POINT
name|rel
decl_stmt|;
name|rel
operator|.
name|x
operator|=
name|x
operator|-
name|prev_x
expr_stmt|;
name|rel
operator|.
name|y
operator|=
name|y
operator|-
name|prev_y
expr_stmt|;
name|rel
operator|.
name|flags
operator|=
name|points
operator|->
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|flags
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|rel
operator|.
name|flags
operator|<
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rel
operator|.
name|x
condition|)
block|{
name|rel
operator|.
name|flags
operator||=
name|XSame
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rel
operator|.
name|x
operator|>
literal|0
operator|&&
name|rel
operator|.
name|x
operator|<
literal|256
condition|)
block|{
name|rel
operator|.
name|flags
operator||=
name|XShortVector
operator||
name|XShortPositive
expr_stmt|;
name|point_array_size
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rel
operator|.
name|x
argument_list|<
literal|0
operator|&&
name|rel
operator|.
name|x
argument_list|>
operator|-
literal|256
condition|)
block|{
name|rel
operator|.
name|flags
operator||=
name|XShortVector
expr_stmt|;
name|rel
operator|.
name|x
operator|=
operator|-
name|rel
operator|.
name|x
expr_stmt|;
name|point_array_size
operator|++
expr_stmt|;
block|}
else|else
block|{
name|point_array_size
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|rel
operator|.
name|y
condition|)
block|{
name|rel
operator|.
name|flags
operator||=
name|YSame
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rel
operator|.
name|y
operator|>
literal|0
operator|&&
name|rel
operator|.
name|y
operator|<
literal|256
condition|)
block|{
name|rel
operator|.
name|flags
operator||=
name|YShortVector
operator||
name|YShortPositive
expr_stmt|;
name|point_array_size
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rel
operator|.
name|y
argument_list|<
literal|0
operator|&&
name|rel
operator|.
name|y
argument_list|>
operator|-
literal|256
condition|)
block|{
name|rel
operator|.
name|flags
operator||=
name|YShortVector
expr_stmt|;
name|rel
operator|.
name|y
operator|=
operator|-
name|rel
operator|.
name|y
expr_stmt|;
name|point_array_size
operator|++
expr_stmt|;
block|}
else|else
block|{
name|point_array_size
operator|+=
literal|2
expr_stmt|;
block|}
operator|(
operator|*
name|points
operator|)
index|[
name|i
index|]
operator|=
name|rel
expr_stmt|;
comment|// #define toString(x) ((rel.flags& x) ? #x : "")
comment|//         qDebug()<< "    "<< QPoint(rel.x, rel.y)<< "flags="
comment|//<< toString(OnCurve)<< toString(XShortVector)
comment|//<< (rel.flags& XShortVector ? toString(XShortPositive) : toString(XSame))
comment|//<< toString(YShortVector)
comment|//<< (rel.flags& YShortVector ? toString(YShortPositive) : toString(YSame));
name|prev_x
operator|=
name|x
expr_stmt|;
name|prev_y
operator|=
name|y
expr_stmt|;
block|}
return|return
name|point_array_size
return|;
block|}
end_function
begin_function
DECL|function|getGlyphData
specifier|static
name|void
name|getGlyphData
parameter_list|(
name|QTtfGlyph
modifier|*
name|glyph
parameter_list|,
specifier|const
name|QList
argument_list|<
name|TTF_POINT
argument_list|>
modifier|&
name|points
parameter_list|,
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
name|endPoints
parameter_list|,
name|int
name|point_array_size
parameter_list|)
block|{
specifier|const
name|int
name|max_size
init|=
literal|5
operator|*
sizeof|sizeof
argument_list|(
name|qint16
argument_list|)
comment|// header
operator|+
name|endPoints
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
comment|// end points of contours
operator|+
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
comment|// instruction length == 0
operator|+
name|points
operator|.
name|size
argument_list|()
operator|*
operator|(
literal|1
operator|)
comment|// flags
operator|+
name|point_array_size
decl_stmt|;
comment|// coordinates
name|glyph
operator|->
name|data
operator|.
name|resize
argument_list|(
name|max_size
argument_list|)
expr_stmt|;
name|QTtfStream
name|s
argument_list|(
name|glyph
operator|->
name|data
argument_list|)
decl_stmt|;
name|s
operator|<<
name|qint16
argument_list|(
name|endPoints
operator|.
name|size
argument_list|()
argument_list|)
operator|<<
name|glyph
operator|->
name|xMin
operator|<<
name|glyph
operator|->
name|yMin
operator|<<
name|glyph
operator|->
name|xMax
operator|<<
name|glyph
operator|->
name|yMax
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|endPoints
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|s
operator|<<
name|quint16
argument_list|(
name|endPoints
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|<<
name|quint16
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// instruction length
comment|// emit flags
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|points
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|s
operator|<<
name|quint8
argument_list|(
name|points
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|flags
argument_list|)
expr_stmt|;
comment|// emit points
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|points
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|quint8
name|flags
init|=
name|points
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|flags
decl_stmt|;
name|qint16
name|x
init|=
name|points
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|x
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|XShortVector
condition|)
name|s
operator|<<
name|quint8
argument_list|(
name|x
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|XSame
operator|)
condition|)
name|s
operator|<<
name|qint16
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|points
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|quint8
name|flags
init|=
name|points
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|flags
decl_stmt|;
name|qint16
name|y
init|=
name|points
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|y
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|YShortVector
condition|)
name|s
operator|<<
name|quint8
argument_list|(
name|y
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|YSame
operator|)
condition|)
name|s
operator|<<
name|qint16
argument_list|(
name|y
argument_list|)
expr_stmt|;
block|}
comment|//     qDebug()<< "offset="<< s.offset()<< "max_size="<< max_size<< "point_array_size="<< point_array_size;
name|Q_ASSERT
argument_list|(
name|s
operator|.
name|offset
argument_list|()
operator|==
name|max_size
argument_list|)
expr_stmt|;
name|glyph
operator|->
name|numContours
operator|=
name|endPoints
operator|.
name|size
argument_list|()
expr_stmt|;
name|glyph
operator|->
name|numPoints
operator|=
name|points
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|generateGlyph
specifier|static
name|QTtfGlyph
name|generateGlyph
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|qreal
name|advance
parameter_list|,
name|qreal
name|lsb
parameter_list|,
name|qreal
name|ppem
parameter_list|)
block|{
name|QList
argument_list|<
name|TTF_POINT
argument_list|>
name|points
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|endPoints
decl_stmt|;
name|QTtfGlyph
name|glyph
decl_stmt|;
name|glyph
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|glyph
operator|.
name|advanceWidth
operator|=
name|qRound
argument_list|(
name|advance
operator|*
literal|2048.
operator|/
name|ppem
argument_list|)
expr_stmt|;
name|glyph
operator|.
name|lsb
operator|=
name|qRound
argument_list|(
name|lsb
operator|*
literal|2048.
operator|/
name|ppem
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|elementCount
argument_list|()
condition|)
block|{
comment|//qDebug("glyph %d is empty", index);
name|lsb
operator|=
literal|0
expr_stmt|;
name|glyph
operator|.
name|xMin
operator|=
name|glyph
operator|.
name|xMax
operator|=
name|glyph
operator|.
name|yMin
operator|=
name|glyph
operator|.
name|yMax
operator|=
literal|0
expr_stmt|;
name|glyph
operator|.
name|numContours
operator|=
literal|0
expr_stmt|;
name|glyph
operator|.
name|numPoints
operator|=
literal|0
expr_stmt|;
return|return
name|glyph
return|;
block|}
name|convertPath
argument_list|(
name|path
argument_list|,
operator|&
name|points
argument_list|,
operator|&
name|endPoints
argument_list|,
name|ppem
argument_list|)
expr_stmt|;
comment|//     qDebug()<< "number of contours="<< endPoints.size();
comment|//     for (int i = 0; i< points.size(); ++i)
comment|//         qDebug()<< "  point["<< i<< "] = "<< QPoint(points.at(i).x, points.at(i).y)<< " flags="<< points.at(i).flags;
comment|//     qDebug()<< "endPoints:";
comment|//     for (int i = 0; i< endPoints.size(); ++i)
comment|//         qDebug()<< endPoints.at(i);
name|getBounds
argument_list|(
name|points
argument_list|,
operator|&
name|glyph
operator|.
name|xMin
argument_list|,
operator|&
name|glyph
operator|.
name|xMax
argument_list|,
operator|&
name|glyph
operator|.
name|yMin
argument_list|,
operator|&
name|glyph
operator|.
name|yMax
argument_list|)
expr_stmt|;
name|int
name|point_array_size
init|=
name|convertToRelative
argument_list|(
operator|&
name|points
argument_list|)
decl_stmt|;
name|getGlyphData
argument_list|(
operator|&
name|glyph
argument_list|,
name|points
argument_list|,
name|endPoints
argument_list|,
name|point_array_size
argument_list|)
expr_stmt|;
return|return
name|glyph
return|;
block|}
end_function
begin_function
DECL|function|operator <
name|Q_STATIC_GLOBAL_OPERATOR
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|QTtfGlyph
modifier|&
name|g1
parameter_list|,
specifier|const
name|QTtfGlyph
modifier|&
name|g2
parameter_list|)
block|{
return|return
name|g1
operator|.
name|index
operator|<
name|g2
operator|.
name|index
return|;
block|}
end_function
begin_function
DECL|function|generateGlyphTables
specifier|static
name|QList
argument_list|<
name|QTtfTable
argument_list|>
name|generateGlyphTables
parameter_list|(
name|qttf_font_tables
modifier|&
name|tables
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QTtfGlyph
argument_list|>
modifier|&
name|_glyphs
parameter_list|)
block|{
specifier|const
name|int
name|max_size_small
init|=
literal|65536
operator|*
literal|2
decl_stmt|;
name|QList
argument_list|<
name|QTtfGlyph
argument_list|>
name|glyphs
init|=
name|_glyphs
decl_stmt|;
name|qSort
argument_list|(
name|glyphs
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|tables
operator|.
name|maxp
operator|.
name|numGlyphs
operator|==
name|glyphs
operator|.
name|at
argument_list|(
name|glyphs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
name|int
name|nGlyphs
init|=
name|tables
operator|.
name|maxp
operator|.
name|numGlyphs
decl_stmt|;
name|int
name|glyf_size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|glyf_size
operator|+=
operator|(
name|glyphs
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|data
operator|.
name|size
argument_list|()
operator|+
literal|3
operator|)
operator|&
operator|~
literal|3
expr_stmt|;
name|tables
operator|.
name|head
operator|.
name|indexToLocFormat
operator|=
name|glyf_size
operator|<
name|max_size_small
condition|?
literal|0
else|:
literal|1
expr_stmt|;
name|tables
operator|.
name|hhea
operator|.
name|numberOfHMetrics
operator|=
name|nGlyphs
expr_stmt|;
name|QTtfTable
name|glyf
decl_stmt|;
name|glyf
operator|.
name|tag
operator|=
name|MAKE_TAG
argument_list|(
literal|'g'
argument_list|,
literal|'l'
argument_list|,
literal|'y'
argument_list|,
literal|'f'
argument_list|)
expr_stmt|;
name|QTtfTable
name|loca
decl_stmt|;
name|loca
operator|.
name|tag
operator|=
name|MAKE_TAG
argument_list|(
literal|'l'
argument_list|,
literal|'o'
argument_list|,
literal|'c'
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|loca
operator|.
name|data
operator|.
name|resize
argument_list|(
name|glyf_size
operator|<
name|max_size_small
condition|?
operator|(
name|nGlyphs
operator|+
literal|1
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
else|:
operator|(
name|nGlyphs
operator|+
literal|1
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
argument_list|)
expr_stmt|;
name|QTtfStream
name|ls
argument_list|(
name|loca
operator|.
name|data
argument_list|)
decl_stmt|;
name|QTtfTable
name|hmtx
decl_stmt|;
name|hmtx
operator|.
name|tag
operator|=
name|MAKE_TAG
argument_list|(
literal|'h'
argument_list|,
literal|'m'
argument_list|,
literal|'t'
argument_list|,
literal|'x'
argument_list|)
expr_stmt|;
name|hmtx
operator|.
name|data
operator|.
name|resize
argument_list|(
name|nGlyphs
operator|*
literal|4
argument_list|)
expr_stmt|;
name|QTtfStream
name|hs
argument_list|(
name|hmtx
operator|.
name|data
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nGlyphs
condition|;
operator|++
name|i
control|)
block|{
name|int
name|gpos
init|=
name|glyf
operator|.
name|data
operator|.
name|size
argument_list|()
decl_stmt|;
name|quint16
name|advance
init|=
literal|0
decl_stmt|;
name|qint16
name|lsb
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|glyphs
index|[
name|pos
index|]
operator|.
name|index
operator|==
name|i
condition|)
block|{
comment|// emit glyph
comment|//             qDebug("emitting glyph %d: size=%d", i, glyphs.at(i).data.size());
name|glyf
operator|.
name|data
operator|+=
name|glyphs
operator|.
name|at
argument_list|(
name|pos
argument_list|)
operator|.
name|data
expr_stmt|;
while|while
condition|(
name|glyf
operator|.
name|data
operator|.
name|size
argument_list|()
operator|&
literal|1
condition|)
name|glyf
operator|.
name|data
operator|.
name|append
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
name|advance
operator|=
name|glyphs
operator|.
name|at
argument_list|(
name|pos
argument_list|)
operator|.
name|advanceWidth
expr_stmt|;
name|lsb
operator|=
name|glyphs
operator|.
name|at
argument_list|(
name|pos
argument_list|)
operator|.
name|lsb
expr_stmt|;
operator|++
name|pos
expr_stmt|;
block|}
if|if
condition|(
name|glyf_size
operator|<
name|max_size_small
condition|)
block|{
comment|// use short loca format
name|ls
operator|<<
name|quint16
argument_list|(
name|gpos
operator|>>
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// use long loca format
name|ls
operator|<<
name|quint32
argument_list|(
name|gpos
argument_list|)
expr_stmt|;
block|}
name|hs
operator|<<
name|advance
operator|<<
name|lsb
expr_stmt|;
block|}
if|if
condition|(
name|glyf_size
operator|<
name|max_size_small
condition|)
block|{
comment|// use short loca format
name|ls
operator|<<
name|quint16
argument_list|(
name|glyf
operator|.
name|data
operator|.
name|size
argument_list|()
operator|>>
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// use long loca format
name|ls
operator|<<
name|quint32
argument_list|(
name|glyf
operator|.
name|data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|loca
operator|.
name|data
operator|.
name|size
argument_list|()
operator|==
name|ls
operator|.
name|offset
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|hmtx
operator|.
name|data
operator|.
name|size
argument_list|()
operator|==
name|hs
operator|.
name|offset
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QTtfTable
argument_list|>
name|list
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
name|glyf
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
name|loca
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
name|hmtx
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_function
DECL|function|operator <
name|Q_STATIC_GLOBAL_OPERATOR
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|QTtfTable
modifier|&
name|t1
parameter_list|,
specifier|const
name|QTtfTable
modifier|&
name|t2
parameter_list|)
block|{
return|return
name|t1
operator|.
name|tag
operator|<
name|t2
operator|.
name|tag
return|;
block|}
end_function
begin_function
DECL|function|bindFont
specifier|static
name|QByteArray
name|bindFont
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QTtfTable
argument_list|>
modifier|&
name|_tables
parameter_list|)
block|{
name|QList
argument_list|<
name|QTtfTable
argument_list|>
name|tables
init|=
name|_tables
decl_stmt|;
name|qSort
argument_list|(
name|tables
argument_list|)
expr_stmt|;
name|QByteArray
name|font
decl_stmt|;
specifier|const
name|int
name|header_size
init|=
sizeof|sizeof
argument_list|(
name|qint32
argument_list|)
operator|+
literal|4
operator|*
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
decl_stmt|;
specifier|const
name|int
name|directory_size
init|=
literal|4
operator|*
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
operator|*
name|tables
operator|.
name|size
argument_list|()
decl_stmt|;
name|font
operator|.
name|resize
argument_list|(
name|header_size
operator|+
name|directory_size
argument_list|)
expr_stmt|;
name|int
name|log2
init|=
literal|0
decl_stmt|;
name|int
name|pow
init|=
literal|1
decl_stmt|;
name|int
name|n
init|=
name|tables
operator|.
name|size
argument_list|()
operator|>>
literal|1
decl_stmt|;
while|while
condition|(
name|n
condition|)
block|{
operator|++
name|log2
expr_stmt|;
name|pow
operator|<<=
literal|1
expr_stmt|;
name|n
operator|>>=
literal|1
expr_stmt|;
block|}
name|quint32
name|head_offset
init|=
literal|0
decl_stmt|;
block|{
name|QTtfStream
name|f
argument_list|(
name|font
argument_list|)
decl_stmt|;
comment|// Offset Table
comment|// Type  Name  Description
comment|//   qint32  sfnt version  0x00010000 for version 1.0.
comment|//   quint16   numTables  Number of tables.
comment|//   quint16   searchRange  (Maximum power of 2<= numTables) x 16.
comment|//   quint16   entrySelector  Log2(maximum power of 2<= numTables).
comment|//   quint16   rangeShift  NumTables x 16-searchRange.
name|f
operator|<<
name|qint32
argument_list|(
literal|0x00010000
argument_list|)
operator|<<
name|quint16
argument_list|(
name|tables
operator|.
name|size
argument_list|()
argument_list|)
operator|<<
name|quint16
argument_list|(
literal|16
operator|*
name|pow
argument_list|)
operator|<<
name|quint16
argument_list|(
name|log2
argument_list|)
operator|<<
name|quint16
argument_list|(
literal|16
operator|*
operator|(
name|tables
operator|.
name|size
argument_list|()
operator|-
name|pow
operator|)
argument_list|)
expr_stmt|;
comment|// Table Directory
comment|// Type  Name  Description
comment|//   quint32  tag  4 -byte identifier.
comment|//   quint32  checkSum  CheckSum for this table.
comment|//   quint32  offset  Offset from beginning of TrueType font file.
comment|//   quint32  length  Length of this table.
name|quint32
name|table_offset
init|=
name|header_size
operator|+
name|directory_size
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QTtfTable
modifier|&
name|t
init|=
name|tables
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|quint32
name|size
init|=
operator|(
name|t
operator|.
name|data
operator|.
name|size
argument_list|()
operator|+
literal|3
operator|)
operator|&
operator|~
literal|3
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|tag
operator|==
name|MAKE_TAG
argument_list|(
literal|'h'
argument_list|,
literal|'e'
argument_list|,
literal|'a'
argument_list|,
literal|'d'
argument_list|)
condition|)
name|head_offset
operator|=
name|table_offset
expr_stmt|;
name|f
operator|<<
name|t
operator|.
name|tag
operator|<<
name|checksum
argument_list|(
name|t
operator|.
name|data
argument_list|)
operator|<<
name|table_offset
operator|<<
name|t
operator|.
name|data
operator|.
name|size
argument_list|()
expr_stmt|;
name|table_offset
operator|+=
name|size
expr_stmt|;
DECL|macro|TAG
define|#
directive|define
name|TAG
parameter_list|(
name|x
parameter_list|)
value|char(t.tag>> 24)<< char((t.tag>> 16)& 0xff)<< char((t.tag>> 8)& 0xff)<< char(t.tag& 0xff)
comment|//qDebug()<< "table "<< TAG(t.tag)<< "has size "<< t.data.size()<< "stream at "<< f.offset();
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QByteArray
modifier|&
name|t
init|=
name|tables
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|data
decl_stmt|;
name|font
operator|+=
name|t
expr_stmt|;
name|int
name|s
init|=
name|t
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
name|s
operator|&
literal|3
condition|)
block|{
name|font
operator|+=
literal|'\0'
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|head_offset
condition|)
block|{
name|qWarning
argument_list|(
literal|"QFontSubset: Font misses 'head' table"
argument_list|)
expr_stmt|;
return|return
name|QByteArray
argument_list|()
return|;
block|}
comment|// calculate the fonts checksum and qToBigEndian into 'head's checksum_adjust
name|quint32
name|checksum_adjust
init|=
literal|0xB1B0AFBA
operator|-
name|checksum
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|qToBigEndian
argument_list|(
name|checksum_adjust
argument_list|,
operator|(
name|uchar
operator|*
operator|)
name|font
operator|.
name|data
argument_list|()
operator|+
name|head_offset
operator|+
literal|8
argument_list|)
expr_stmt|;
return|return
name|font
return|;
block|}
end_function
begin_comment
comment|/*   PDF requires the following tables:    head, hhea, loca, maxp, cvt , prep, glyf, hmtx, fpgm    This means we don't have to add a os/2, post or name table. cvt , prep and fpgm could be empty   if really required. */
end_comment
begin_function
DECL|function|toTruetype
name|QByteArray
name|QFontSubset
operator|::
name|toTruetype
parameter_list|()
specifier|const
block|{
name|qttf_font_tables
name|font
decl_stmt|;
name|memset
argument_list|(
operator|&
name|font
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|qttf_font_tables
argument_list|)
argument_list|)
expr_stmt|;
name|qreal
name|ppem
init|=
name|fontEngine
operator|->
name|fontDef
operator|.
name|pixelSize
decl_stmt|;
DECL|macro|TO_TTF
define|#
directive|define
name|TO_TTF
parameter_list|(
name|x
parameter_list|)
value|qRound(x * 2048. / ppem)
name|QList
argument_list|<
name|QTtfGlyph
argument_list|>
name|glyphs
decl_stmt|;
name|QFontEngine
operator|::
name|Properties
name|properties
init|=
name|fontEngine
operator|->
name|properties
argument_list|()
decl_stmt|;
comment|// initialize some stuff needed in createWidthArray
name|emSquare
operator|=
literal|2048
expr_stmt|;
name|widths
operator|.
name|resize
argument_list|(
name|nGlyphs
argument_list|()
argument_list|)
expr_stmt|;
comment|// head table
name|font
operator|.
name|head
operator|.
name|font_revision
operator|=
literal|0x00010000
expr_stmt|;
name|font
operator|.
name|head
operator|.
name|flags
operator|=
operator|(
literal|1
operator|<<
literal|2
operator|)
operator||
operator|(
literal|1
operator|<<
literal|4
operator|)
expr_stmt|;
name|font
operator|.
name|head
operator|.
name|created
operator|=
literal|0
expr_stmt|;
comment|// ###
name|font
operator|.
name|head
operator|.
name|modified
operator|=
literal|0
expr_stmt|;
comment|// ###
name|font
operator|.
name|head
operator|.
name|xMin
operator|=
name|SHRT_MAX
expr_stmt|;
name|font
operator|.
name|head
operator|.
name|xMax
operator|=
name|SHRT_MIN
expr_stmt|;
name|font
operator|.
name|head
operator|.
name|yMin
operator|=
name|SHRT_MAX
expr_stmt|;
name|font
operator|.
name|head
operator|.
name|yMax
operator|=
name|SHRT_MIN
expr_stmt|;
name|font
operator|.
name|head
operator|.
name|macStyle
operator|=
operator|(
name|fontEngine
operator|->
name|fontDef
operator|.
name|weight
operator|>
name|QFont
operator|::
name|Normal
operator|)
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|font
operator|.
name|head
operator|.
name|macStyle
operator||=
operator|(
name|fontEngine
operator|->
name|fontDef
operator|.
name|styleHint
operator|!=
name|QFont
operator|::
name|StyleNormal
operator|)
condition|?
literal|1
else|:
literal|0
expr_stmt|;
comment|// hhea table
name|font
operator|.
name|hhea
operator|.
name|ascender
operator|=
name|qRound
argument_list|(
name|properties
operator|.
name|ascent
argument_list|)
expr_stmt|;
name|font
operator|.
name|hhea
operator|.
name|descender
operator|=
operator|-
name|qRound
argument_list|(
name|properties
operator|.
name|descent
argument_list|)
expr_stmt|;
name|font
operator|.
name|hhea
operator|.
name|lineGap
operator|=
name|qRound
argument_list|(
name|properties
operator|.
name|leading
argument_list|)
expr_stmt|;
name|font
operator|.
name|hhea
operator|.
name|maxAdvanceWidth
operator|=
name|TO_TTF
argument_list|(
name|fontEngine
operator|->
name|maxCharWidth
argument_list|()
argument_list|)
expr_stmt|;
name|font
operator|.
name|hhea
operator|.
name|minLeftSideBearing
operator|=
name|TO_TTF
argument_list|(
name|fontEngine
operator|->
name|minLeftBearing
argument_list|()
argument_list|)
expr_stmt|;
name|font
operator|.
name|hhea
operator|.
name|minRightSideBearing
operator|=
name|TO_TTF
argument_list|(
name|fontEngine
operator|->
name|minRightBearing
argument_list|()
argument_list|)
expr_stmt|;
name|font
operator|.
name|hhea
operator|.
name|xMaxExtent
operator|=
name|SHRT_MIN
expr_stmt|;
name|font
operator|.
name|maxp
operator|.
name|numGlyphs
operator|=
literal|0
expr_stmt|;
name|font
operator|.
name|maxp
operator|.
name|maxPoints
operator|=
literal|0
expr_stmt|;
name|font
operator|.
name|maxp
operator|.
name|maxContours
operator|=
literal|0
expr_stmt|;
name|font
operator|.
name|maxp
operator|.
name|maxCompositePoints
operator|=
literal|0
expr_stmt|;
name|font
operator|.
name|maxp
operator|.
name|maxCompositeContours
operator|=
literal|0
expr_stmt|;
name|font
operator|.
name|maxp
operator|.
name|maxComponentElements
operator|=
literal|0
expr_stmt|;
name|font
operator|.
name|maxp
operator|.
name|maxComponentDepth
operator|=
literal|0
expr_stmt|;
name|font
operator|.
name|maxp
operator|.
name|numGlyphs
operator|=
name|nGlyphs
argument_list|()
expr_stmt|;
name|uint
name|sumAdvances
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nGlyphs
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|glyph_t
name|g
init|=
name|glyph_indices
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QPainterPath
name|path
decl_stmt|;
name|glyph_metrics_t
name|metric
decl_stmt|;
name|fontEngine
operator|->
name|getUnscaledGlyph
argument_list|(
name|g
argument_list|,
operator|&
name|path
argument_list|,
operator|&
name|metric
argument_list|)
expr_stmt|;
if|if
condition|(
name|noEmbed
condition|)
block|{
name|path
operator|=
name|QPainterPath
argument_list|()
expr_stmt|;
if|if
condition|(
name|g
operator|==
literal|0
condition|)
name|path
operator|.
name|addRect
argument_list|(
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QTtfGlyph
name|glyph
init|=
name|generateGlyph
argument_list|(
name|i
argument_list|,
name|path
argument_list|,
name|metric
operator|.
name|xoff
operator|.
name|toReal
argument_list|()
argument_list|,
name|metric
operator|.
name|x
operator|.
name|toReal
argument_list|()
argument_list|,
name|properties
operator|.
name|emSquare
operator|.
name|toReal
argument_list|()
argument_list|)
decl_stmt|;
name|font
operator|.
name|head
operator|.
name|xMin
operator|=
name|qMin
argument_list|(
name|font
operator|.
name|head
operator|.
name|xMin
argument_list|,
name|glyph
operator|.
name|xMin
argument_list|)
expr_stmt|;
name|font
operator|.
name|head
operator|.
name|xMax
operator|=
name|qMax
argument_list|(
name|font
operator|.
name|head
operator|.
name|xMax
argument_list|,
name|glyph
operator|.
name|xMax
argument_list|)
expr_stmt|;
name|font
operator|.
name|head
operator|.
name|yMin
operator|=
name|qMin
argument_list|(
name|font
operator|.
name|head
operator|.
name|yMin
argument_list|,
name|glyph
operator|.
name|yMin
argument_list|)
expr_stmt|;
name|font
operator|.
name|head
operator|.
name|yMax
operator|=
name|qMax
argument_list|(
name|font
operator|.
name|head
operator|.
name|yMax
argument_list|,
name|glyph
operator|.
name|yMax
argument_list|)
expr_stmt|;
name|font
operator|.
name|hhea
operator|.
name|xMaxExtent
operator|=
name|qMax
argument_list|(
name|font
operator|.
name|hhea
operator|.
name|xMaxExtent
argument_list|,
call|(
name|qint16
call|)
argument_list|(
name|glyph
operator|.
name|lsb
operator|+
name|glyph
operator|.
name|xMax
operator|-
name|glyph
operator|.
name|xMin
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|maxp
operator|.
name|maxPoints
operator|=
name|qMax
argument_list|(
name|font
operator|.
name|maxp
operator|.
name|maxPoints
argument_list|,
name|glyph
operator|.
name|numPoints
argument_list|)
expr_stmt|;
name|font
operator|.
name|maxp
operator|.
name|maxContours
operator|=
name|qMax
argument_list|(
name|font
operator|.
name|maxp
operator|.
name|maxContours
argument_list|,
name|glyph
operator|.
name|numContours
argument_list|)
expr_stmt|;
if|if
condition|(
name|glyph
operator|.
name|xMax
operator|>
name|glyph
operator|.
name|xMin
condition|)
name|sumAdvances
operator|+=
name|glyph
operator|.
name|xMax
operator|-
name|glyph
operator|.
name|xMin
expr_stmt|;
comment|//         qDebug("adding glyph %d size=%d", glyph.index, glyph.data.size());
name|glyphs
operator|.
name|append
argument_list|(
name|glyph
argument_list|)
expr_stmt|;
name|widths
index|[
name|i
index|]
operator|=
name|glyph
operator|.
name|advanceWidth
expr_stmt|;
block|}
name|QList
argument_list|<
name|QTtfTable
argument_list|>
name|tables
init|=
name|generateGlyphTables
argument_list|(
name|font
argument_list|,
name|glyphs
argument_list|)
decl_stmt|;
name|tables
operator|.
name|append
argument_list|(
name|generateHead
argument_list|(
name|font
operator|.
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|tables
operator|.
name|append
argument_list|(
name|generateHhea
argument_list|(
name|font
operator|.
name|hhea
argument_list|)
argument_list|)
expr_stmt|;
name|tables
operator|.
name|append
argument_list|(
name|generateMaxp
argument_list|(
name|font
operator|.
name|maxp
argument_list|)
argument_list|)
expr_stmt|;
comment|// name
name|QTtfTable
name|name_table
decl_stmt|;
name|name_table
operator|.
name|tag
operator|=
name|MAKE_TAG
argument_list|(
literal|'n'
argument_list|,
literal|'a'
argument_list|,
literal|'m'
argument_list|,
literal|'e'
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|noEmbed
condition|)
name|name_table
operator|.
name|data
operator|=
name|fontEngine
operator|->
name|getSfntTable
argument_list|(
name|name_table
operator|.
name|tag
argument_list|)
expr_stmt|;
if|if
condition|(
name|name_table
operator|.
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qttf_name_table
name|name
decl_stmt|;
if|if
condition|(
name|noEmbed
condition|)
name|name
operator|.
name|copyright
operator|=
name|QLatin1String
argument_list|(
literal|"Fake font"
argument_list|)
expr_stmt|;
else|else
name|name
operator|.
name|copyright
operator|=
name|QLatin1String
argument_list|(
name|properties
operator|.
name|copyright
argument_list|)
expr_stmt|;
name|name
operator|.
name|family
operator|=
name|fontEngine
operator|->
name|fontDef
operator|.
name|family
expr_stmt|;
name|name
operator|.
name|subfamily
operator|=
name|QLatin1String
argument_list|(
literal|"Regular"
argument_list|)
expr_stmt|;
comment|// ######
name|name
operator|.
name|postscript_name
operator|=
name|QLatin1String
argument_list|(
name|properties
operator|.
name|postscriptName
argument_list|)
expr_stmt|;
name|name_table
operator|=
name|generateName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|tables
operator|.
name|append
argument_list|(
name|name_table
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|noEmbed
condition|)
block|{
name|QTtfTable
name|os2
decl_stmt|;
name|os2
operator|.
name|tag
operator|=
name|MAKE_TAG
argument_list|(
literal|'O'
argument_list|,
literal|'S'
argument_list|,
literal|'/'
argument_list|,
literal|'2'
argument_list|)
expr_stmt|;
name|os2
operator|.
name|data
operator|=
name|fontEngine
operator|->
name|getSfntTable
argument_list|(
name|os2
operator|.
name|tag
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|os2
operator|.
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
name|tables
operator|.
name|append
argument_list|(
name|os2
argument_list|)
expr_stmt|;
block|}
return|return
name|bindFont
argument_list|(
name|tables
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
