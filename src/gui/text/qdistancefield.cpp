begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtDeclarative module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdistancefield_p.h"
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_include
include|#
directive|include
file|<private/qdatabuffer_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qimage_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpathsimplifier_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
namespace|namespace
block|{
DECL|enum|FillHDir
enum|enum
name|FillHDir
block|{
DECL|enumerator|LeftToRight
name|LeftToRight
block|,
DECL|enumerator|RightToLeft
name|RightToLeft
block|}
enum|;
DECL|enum|FillVDir
enum|enum
name|FillVDir
block|{
DECL|enumerator|TopDown
name|TopDown
block|,
DECL|enumerator|BottomUp
name|BottomUp
block|}
enum|;
DECL|enum|FillClip
enum|enum
name|FillClip
block|{
DECL|enumerator|NoClip
name|NoClip
block|,
DECL|enumerator|Clip
name|Clip
block|}
enum|;
block|}
end_namespace
begin_function
template|template
parameter_list|<
name|FillClip
name|clip
parameter_list|,
name|FillHDir
name|dir
parameter_list|>
DECL|function|fillLine
specifier|inline
name|void
name|fillLine
parameter_list|(
name|qint32
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|qint32
parameter_list|,
name|qint32
parameter_list|)
block|{ }
end_function
begin_function
template|template
parameter_list|<>
DECL|function|fillLine
specifier|inline
name|void
name|fillLine
argument_list|<
name|Clip
argument_list|,
name|LeftToRight
argument_list|>
parameter_list|(
name|qint32
modifier|*
name|line
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|lx
parameter_list|,
name|int
name|rx
parameter_list|,
name|qint32
name|d
parameter_list|,
name|qint32
name|dd
parameter_list|)
block|{
name|int
name|fromX
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|lx
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|int
name|toX
init|=
name|qMin
argument_list|(
name|width
argument_list|,
name|rx
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|toX
operator|-
name|fromX
decl_stmt|;
if|if
condition|(
name|x
operator|<=
literal|0
condition|)
return|return;
name|qint32
name|val
init|=
name|d
operator|+
operator|(
operator|(
operator|(
name|fromX
operator|<<
literal|8
operator|)
operator|+
literal|0xff
operator|-
name|lx
operator|)
operator|*
name|dd
operator|>>
literal|8
operator|)
decl_stmt|;
name|line
operator|+=
name|fromX
expr_stmt|;
do|do
block|{
operator|*
name|line
operator|=
name|abs
argument_list|(
name|val
argument_list|)
operator|<
name|abs
argument_list|(
operator|*
name|line
argument_list|)
condition|?
name|val
else|:
operator|*
name|line
expr_stmt|;
name|val
operator|+=
name|dd
expr_stmt|;
operator|++
name|line
expr_stmt|;
block|}
do|while
condition|(
operator|--
name|x
condition|)
do|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|fillLine
specifier|inline
name|void
name|fillLine
argument_list|<
name|Clip
argument_list|,
name|RightToLeft
argument_list|>
parameter_list|(
name|qint32
modifier|*
name|line
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|lx
parameter_list|,
name|int
name|rx
parameter_list|,
name|qint32
name|d
parameter_list|,
name|qint32
name|dd
parameter_list|)
block|{
name|int
name|fromX
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|lx
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|int
name|toX
init|=
name|qMin
argument_list|(
name|width
argument_list|,
name|rx
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|toX
operator|-
name|fromX
decl_stmt|;
if|if
condition|(
name|x
operator|<=
literal|0
condition|)
return|return;
name|qint32
name|val
init|=
name|d
operator|+
operator|(
operator|(
operator|(
name|toX
operator|<<
literal|8
operator|)
operator|+
literal|0xff
operator|-
name|rx
operator|)
operator|*
name|dd
operator|>>
literal|8
operator|)
decl_stmt|;
name|line
operator|+=
name|toX
expr_stmt|;
do|do
block|{
name|val
operator|-=
name|dd
expr_stmt|;
operator|--
name|line
expr_stmt|;
operator|*
name|line
operator|=
name|abs
argument_list|(
name|val
argument_list|)
operator|<
name|abs
argument_list|(
operator|*
name|line
argument_list|)
condition|?
name|val
else|:
operator|*
name|line
expr_stmt|;
block|}
do|while
condition|(
operator|--
name|x
condition|)
do|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|fillLine
specifier|inline
name|void
name|fillLine
argument_list|<
name|NoClip
argument_list|,
name|LeftToRight
argument_list|>
parameter_list|(
name|qint32
modifier|*
name|line
parameter_list|,
name|int
parameter_list|,
name|int
name|lx
parameter_list|,
name|int
name|rx
parameter_list|,
name|qint32
name|d
parameter_list|,
name|qint32
name|dd
parameter_list|)
block|{
name|int
name|fromX
init|=
name|lx
operator|>>
literal|8
decl_stmt|;
name|int
name|toX
init|=
name|rx
operator|>>
literal|8
decl_stmt|;
name|int
name|x
init|=
name|toX
operator|-
name|fromX
decl_stmt|;
if|if
condition|(
name|x
operator|<=
literal|0
condition|)
return|return;
name|qint32
name|val
init|=
name|d
operator|+
operator|(
operator|(
operator|~
name|lx
operator|&
literal|0xff
operator|)
operator|*
name|dd
operator|>>
literal|8
operator|)
decl_stmt|;
name|line
operator|+=
name|fromX
expr_stmt|;
do|do
block|{
operator|*
name|line
operator|=
name|abs
argument_list|(
name|val
argument_list|)
operator|<
name|abs
argument_list|(
operator|*
name|line
argument_list|)
condition|?
name|val
else|:
operator|*
name|line
expr_stmt|;
name|val
operator|+=
name|dd
expr_stmt|;
operator|++
name|line
expr_stmt|;
block|}
do|while
condition|(
operator|--
name|x
condition|)
do|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|fillLine
specifier|inline
name|void
name|fillLine
argument_list|<
name|NoClip
argument_list|,
name|RightToLeft
argument_list|>
parameter_list|(
name|qint32
modifier|*
name|line
parameter_list|,
name|int
parameter_list|,
name|int
name|lx
parameter_list|,
name|int
name|rx
parameter_list|,
name|qint32
name|d
parameter_list|,
name|qint32
name|dd
parameter_list|)
block|{
name|int
name|fromX
init|=
name|lx
operator|>>
literal|8
decl_stmt|;
name|int
name|toX
init|=
name|rx
operator|>>
literal|8
decl_stmt|;
name|int
name|x
init|=
name|toX
operator|-
name|fromX
decl_stmt|;
if|if
condition|(
name|x
operator|<=
literal|0
condition|)
return|return;
name|qint32
name|val
init|=
name|d
operator|+
operator|(
operator|(
operator|~
name|rx
operator|&
literal|0xff
operator|)
operator|*
name|dd
operator|>>
literal|8
operator|)
decl_stmt|;
name|line
operator|+=
name|toX
expr_stmt|;
do|do
block|{
name|val
operator|-=
name|dd
expr_stmt|;
operator|--
name|line
expr_stmt|;
operator|*
name|line
operator|=
name|abs
argument_list|(
name|val
argument_list|)
operator|<
name|abs
argument_list|(
operator|*
name|line
argument_list|)
condition|?
name|val
else|:
operator|*
name|line
expr_stmt|;
block|}
do|while
condition|(
operator|--
name|x
condition|)
do|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|FillClip
name|clip
parameter_list|,
name|FillVDir
name|vDir
parameter_list|,
name|FillHDir
name|hDir
parameter_list|>
DECL|function|fillLines
specifier|inline
name|void
name|fillLines
parameter_list|(
name|qint32
modifier|*
name|bits
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|upperY
parameter_list|,
name|int
name|lowerY
parameter_list|,
name|int
modifier|&
name|lx
parameter_list|,
name|int
name|ldx
parameter_list|,
name|int
modifier|&
name|rx
parameter_list|,
name|int
name|rdx
parameter_list|,
name|qint32
modifier|&
name|d
parameter_list|,
name|qint32
name|ddy
parameter_list|,
name|qint32
name|ddx
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|upperY
operator|<
name|lowerY
argument_list|)
expr_stmt|;
name|int
name|y
init|=
name|lowerY
operator|-
name|upperY
decl_stmt|;
if|if
condition|(
name|vDir
operator|==
name|TopDown
condition|)
block|{
name|qint32
modifier|*
name|line
init|=
name|bits
operator|+
name|upperY
operator|*
name|width
decl_stmt|;
do|do
block|{
name|fillLine
argument_list|<
name|clip
argument_list|,
name|hDir
argument_list|>
argument_list|(
name|line
argument_list|,
name|width
argument_list|,
name|lx
argument_list|,
name|rx
argument_list|,
name|d
argument_list|,
name|ddx
argument_list|)
expr_stmt|;
name|lx
operator|+=
name|ldx
expr_stmt|;
name|d
operator|+=
name|ddy
expr_stmt|;
name|rx
operator|+=
name|rdx
expr_stmt|;
name|line
operator|+=
name|width
expr_stmt|;
block|}
do|while
condition|(
operator|--
name|y
condition|)
do|;
block|}
else|else
block|{
name|qint32
modifier|*
name|line
init|=
name|bits
operator|+
name|lowerY
operator|*
name|width
decl_stmt|;
do|do
block|{
name|lx
operator|-=
name|ldx
expr_stmt|;
name|d
operator|-=
name|ddy
expr_stmt|;
name|rx
operator|-=
name|rdx
expr_stmt|;
name|line
operator|-=
name|width
expr_stmt|;
name|fillLine
argument_list|<
name|clip
argument_list|,
name|hDir
argument_list|>
argument_list|(
name|line
argument_list|,
name|width
argument_list|,
name|lx
argument_list|,
name|rx
argument_list|,
name|d
argument_list|,
name|ddx
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|--
name|y
condition|)
do|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|FillClip
name|clip
parameter_list|>
DECL|function|drawTriangle
name|void
name|drawTriangle
parameter_list|(
name|qint32
modifier|*
name|bits
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
specifier|const
name|QPoint
modifier|*
name|center
parameter_list|,
specifier|const
name|QPoint
modifier|*
name|v1
parameter_list|,
specifier|const
name|QPoint
modifier|*
name|v2
parameter_list|,
name|qint32
name|value
parameter_list|)
block|{
specifier|const
name|int
name|y1
init|=
name|clip
operator|==
name|Clip
condition|?
name|qBound
argument_list|(
literal|0
argument_list|,
name|v1
operator|->
name|y
argument_list|()
operator|>>
literal|8
argument_list|,
name|height
argument_list|)
else|:
name|v1
operator|->
name|y
argument_list|()
operator|>>
literal|8
decl_stmt|;
specifier|const
name|int
name|y2
init|=
name|clip
operator|==
name|Clip
condition|?
name|qBound
argument_list|(
literal|0
argument_list|,
name|v2
operator|->
name|y
argument_list|()
operator|>>
literal|8
argument_list|,
name|height
argument_list|)
else|:
name|v2
operator|->
name|y
argument_list|()
operator|>>
literal|8
decl_stmt|;
specifier|const
name|int
name|yC
init|=
name|clip
operator|==
name|Clip
condition|?
name|qBound
argument_list|(
literal|0
argument_list|,
name|center
operator|->
name|y
argument_list|()
operator|>>
literal|8
argument_list|,
name|height
argument_list|)
else|:
name|center
operator|->
name|y
argument_list|()
operator|>>
literal|8
decl_stmt|;
specifier|const
name|int
name|v1Frac
init|=
name|clip
operator|==
name|Clip
condition|?
operator|(
name|y1
operator|<<
literal|8
operator|)
operator|+
literal|0xff
operator|-
name|v1
operator|->
name|y
argument_list|()
else|:
name|~
name|v2
operator|->
name|y
argument_list|()
operator|&
literal|0xff
decl_stmt|;
specifier|const
name|int
name|v2Frac
init|=
name|clip
operator|==
name|Clip
condition|?
operator|(
name|y2
operator|<<
literal|8
operator|)
operator|+
literal|0xff
operator|-
name|v2
operator|->
name|y
argument_list|()
else|:
name|~
name|v1
operator|->
name|y
argument_list|()
operator|&
literal|0xff
decl_stmt|;
specifier|const
name|int
name|centerFrac
init|=
name|clip
operator|==
name|Clip
condition|?
operator|(
name|yC
operator|<<
literal|8
operator|)
operator|+
literal|0xff
operator|-
name|center
operator|->
name|y
argument_list|()
else|:
name|~
name|center
operator|->
name|y
argument_list|()
operator|&
literal|0xff
decl_stmt|;
name|int
name|dx1
init|=
literal|0
decl_stmt|,
name|x1
init|=
literal|0
decl_stmt|,
name|dx2
init|=
literal|0
decl_stmt|,
name|x2
init|=
literal|0
decl_stmt|;
name|qint32
name|dd1
decl_stmt|,
name|d1
decl_stmt|,
name|dd2
decl_stmt|,
name|d2
decl_stmt|;
if|if
condition|(
name|v1
operator|->
name|y
argument_list|()
operator|!=
name|center
operator|->
name|y
argument_list|()
condition|)
block|{
name|dx1
operator|=
operator|(
operator|(
name|v1
operator|->
name|x
argument_list|()
operator|-
name|center
operator|->
name|x
argument_list|()
operator|)
operator|<<
literal|8
operator|)
operator|/
operator|(
name|v1
operator|->
name|y
argument_list|()
operator|-
name|center
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|x1
operator|=
name|center
operator|->
name|x
argument_list|()
operator|+
name|centerFrac
operator|*
operator|(
name|v1
operator|->
name|x
argument_list|()
operator|-
name|center
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|v1
operator|->
name|y
argument_list|()
operator|-
name|center
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|v2
operator|->
name|y
argument_list|()
operator|!=
name|center
operator|->
name|y
argument_list|()
condition|)
block|{
name|dx2
operator|=
operator|(
operator|(
name|v2
operator|->
name|x
argument_list|()
operator|-
name|center
operator|->
name|x
argument_list|()
operator|)
operator|<<
literal|8
operator|)
operator|/
operator|(
name|v2
operator|->
name|y
argument_list|()
operator|-
name|center
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|x2
operator|=
name|center
operator|->
name|x
argument_list|()
operator|+
name|centerFrac
operator|*
operator|(
name|v2
operator|->
name|x
argument_list|()
operator|-
name|center
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|v2
operator|->
name|y
argument_list|()
operator|-
name|center
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
block|}
specifier|const
name|qint32
name|div
init|=
operator|(
name|v2
operator|->
name|x
argument_list|()
operator|-
name|center
operator|->
name|x
argument_list|()
operator|)
operator|*
operator|(
name|v1
operator|->
name|y
argument_list|()
operator|-
name|center
operator|->
name|y
argument_list|()
operator|)
operator|-
operator|(
name|v2
operator|->
name|y
argument_list|()
operator|-
name|center
operator|->
name|y
argument_list|()
operator|)
operator|*
operator|(
name|v1
operator|->
name|x
argument_list|()
operator|-
name|center
operator|->
name|x
argument_list|()
operator|)
decl_stmt|;
specifier|const
name|qint32
name|dd
init|=
name|div
condition|?
name|qint32
argument_list|(
operator|(
name|qint64
argument_list|(
name|value
operator|*
operator|(
name|v1
operator|->
name|y
argument_list|()
operator|-
name|v2
operator|->
name|y
argument_list|()
operator|)
argument_list|)
operator|<<
literal|8
operator|)
operator|/
name|div
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|y2
operator|<
name|yC
condition|)
block|{
if|if
condition|(
name|y1
operator|<
name|yC
condition|)
block|{
comment|// Center at the bottom.
if|if
condition|(
name|y2
operator|<
name|y1
condition|)
block|{
comment|// y2< y1< yC
comment|// Long right edge.
name|d1
operator|=
name|centerFrac
operator|*
name|value
operator|/
operator|(
name|v1
operator|->
name|y
argument_list|()
operator|-
name|center
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|dd1
operator|=
operator|(
operator|(
name|value
operator|<<
literal|8
operator|)
operator|/
operator|(
name|v1
operator|->
name|y
argument_list|()
operator|-
name|center
operator|->
name|y
argument_list|()
operator|)
operator|)
expr_stmt|;
name|fillLines
argument_list|<
name|clip
argument_list|,
name|BottomUp
argument_list|,
name|LeftToRight
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|y1
argument_list|,
name|yC
argument_list|,
name|x1
argument_list|,
name|dx1
argument_list|,
name|x2
argument_list|,
name|dx2
argument_list|,
name|d1
argument_list|,
name|dd1
argument_list|,
name|dd
argument_list|)
expr_stmt|;
name|dx1
operator|=
operator|(
operator|(
name|v1
operator|->
name|x
argument_list|()
operator|-
name|v2
operator|->
name|x
argument_list|()
operator|)
operator|<<
literal|8
operator|)
operator|/
operator|(
name|v1
operator|->
name|y
argument_list|()
operator|-
name|v2
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|x1
operator|=
name|v1
operator|->
name|x
argument_list|()
operator|+
name|v1Frac
operator|*
operator|(
name|v1
operator|->
name|x
argument_list|()
operator|-
name|v2
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|v1
operator|->
name|y
argument_list|()
operator|-
name|v2
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|fillLines
argument_list|<
name|clip
argument_list|,
name|BottomUp
argument_list|,
name|LeftToRight
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|y2
argument_list|,
name|y1
argument_list|,
name|x1
argument_list|,
name|dx1
argument_list|,
name|x2
argument_list|,
name|dx2
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// y1<= y2< yC
comment|// Long left edge.
name|d2
operator|=
name|centerFrac
operator|*
name|value
operator|/
operator|(
name|v2
operator|->
name|y
argument_list|()
operator|-
name|center
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|dd2
operator|=
operator|(
operator|(
name|value
operator|<<
literal|8
operator|)
operator|/
operator|(
name|v2
operator|->
name|y
argument_list|()
operator|-
name|center
operator|->
name|y
argument_list|()
operator|)
operator|)
expr_stmt|;
name|fillLines
argument_list|<
name|clip
argument_list|,
name|BottomUp
argument_list|,
name|RightToLeft
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|y2
argument_list|,
name|yC
argument_list|,
name|x1
argument_list|,
name|dx1
argument_list|,
name|x2
argument_list|,
name|dx2
argument_list|,
name|d2
argument_list|,
name|dd2
argument_list|,
name|dd
argument_list|)
expr_stmt|;
if|if
condition|(
name|y1
operator|!=
name|y2
condition|)
block|{
name|dx2
operator|=
operator|(
operator|(
name|v1
operator|->
name|x
argument_list|()
operator|-
name|v2
operator|->
name|x
argument_list|()
operator|)
operator|<<
literal|8
operator|)
operator|/
operator|(
name|v1
operator|->
name|y
argument_list|()
operator|-
name|v2
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|x2
operator|=
name|v2
operator|->
name|x
argument_list|()
operator|+
name|v2Frac
operator|*
operator|(
name|v1
operator|->
name|x
argument_list|()
operator|-
name|v2
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|v1
operator|->
name|y
argument_list|()
operator|-
name|v2
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|fillLines
argument_list|<
name|clip
argument_list|,
name|BottomUp
argument_list|,
name|RightToLeft
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|y1
argument_list|,
name|y2
argument_list|,
name|x1
argument_list|,
name|dx1
argument_list|,
name|x2
argument_list|,
name|dx2
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// y2< yC<= y1
comment|// Center to the right.
name|int
name|dx
init|=
operator|(
operator|(
name|v1
operator|->
name|x
argument_list|()
operator|-
name|v2
operator|->
name|x
argument_list|()
operator|)
operator|<<
literal|8
operator|)
operator|/
operator|(
name|v1
operator|->
name|y
argument_list|()
operator|-
name|v2
operator|->
name|y
argument_list|()
operator|)
decl_stmt|;
name|int
name|xUp
decl_stmt|,
name|xDn
decl_stmt|;
name|xUp
operator|=
name|xDn
operator|=
name|v2
operator|->
name|x
argument_list|()
operator|+
operator|(
name|clip
operator|==
name|Clip
condition|?
operator|(
name|yC
operator|<<
literal|8
operator|)
operator|+
literal|0xff
operator|-
name|v2
operator|->
name|y
argument_list|()
else|:
operator|(
name|center
operator|->
name|y
argument_list|()
operator||
literal|0xff
operator|)
operator|-
name|v2
operator|->
name|y
argument_list|()
operator|)
operator|*
operator|(
name|v1
operator|->
name|x
argument_list|()
operator|-
name|v2
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|v1
operator|->
name|y
argument_list|()
operator|-
name|v2
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|fillLines
argument_list|<
name|clip
argument_list|,
name|BottomUp
argument_list|,
name|LeftToRight
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|y2
argument_list|,
name|yC
argument_list|,
name|xUp
argument_list|,
name|dx
argument_list|,
name|x2
argument_list|,
name|dx2
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|dd
argument_list|)
expr_stmt|;
if|if
condition|(
name|yC
operator|!=
name|y1
condition|)
name|fillLines
argument_list|<
name|clip
argument_list|,
name|TopDown
argument_list|,
name|LeftToRight
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|yC
argument_list|,
name|y1
argument_list|,
name|xDn
argument_list|,
name|dx
argument_list|,
name|x1
argument_list|,
name|dx1
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|y1
operator|<
name|yC
condition|)
block|{
comment|// y1< yC<= y2
comment|// Center to the left.
name|int
name|dx
init|=
operator|(
operator|(
name|v1
operator|->
name|x
argument_list|()
operator|-
name|v2
operator|->
name|x
argument_list|()
operator|)
operator|<<
literal|8
operator|)
operator|/
operator|(
name|v1
operator|->
name|y
argument_list|()
operator|-
name|v2
operator|->
name|y
argument_list|()
operator|)
decl_stmt|;
name|int
name|xUp
decl_stmt|,
name|xDn
decl_stmt|;
name|xUp
operator|=
name|xDn
operator|=
name|v1
operator|->
name|x
argument_list|()
operator|+
operator|(
name|clip
operator|==
name|Clip
condition|?
operator|(
name|yC
operator|<<
literal|8
operator|)
operator|+
literal|0xff
operator|-
name|v1
operator|->
name|y
argument_list|()
else|:
operator|(
name|center
operator|->
name|y
argument_list|()
operator||
literal|0xff
operator|)
operator|-
name|v1
operator|->
name|y
argument_list|()
operator|)
operator|*
operator|(
name|v1
operator|->
name|x
argument_list|()
operator|-
name|v2
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|v1
operator|->
name|y
argument_list|()
operator|-
name|v2
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|fillLines
argument_list|<
name|clip
argument_list|,
name|BottomUp
argument_list|,
name|RightToLeft
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|y1
argument_list|,
name|yC
argument_list|,
name|x1
argument_list|,
name|dx1
argument_list|,
name|xUp
argument_list|,
name|dx
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|dd
argument_list|)
expr_stmt|;
if|if
condition|(
name|yC
operator|!=
name|y2
condition|)
name|fillLines
argument_list|<
name|clip
argument_list|,
name|TopDown
argument_list|,
name|RightToLeft
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|yC
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|dx2
argument_list|,
name|xDn
argument_list|,
name|dx
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Center at the top.
if|if
condition|(
name|y2
operator|<
name|y1
condition|)
block|{
comment|// yC<= y2< y1
comment|// Long right edge.
if|if
condition|(
name|yC
operator|!=
name|y2
condition|)
block|{
name|d2
operator|=
name|centerFrac
operator|*
name|value
operator|/
operator|(
name|v2
operator|->
name|y
argument_list|()
operator|-
name|center
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|dd2
operator|=
operator|(
operator|(
name|value
operator|<<
literal|8
operator|)
operator|/
operator|(
name|v2
operator|->
name|y
argument_list|()
operator|-
name|center
operator|->
name|y
argument_list|()
operator|)
operator|)
expr_stmt|;
name|fillLines
argument_list|<
name|clip
argument_list|,
name|TopDown
argument_list|,
name|LeftToRight
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|yC
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|dx2
argument_list|,
name|x1
argument_list|,
name|dx1
argument_list|,
name|d2
argument_list|,
name|dd2
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
name|dx2
operator|=
operator|(
operator|(
name|v1
operator|->
name|x
argument_list|()
operator|-
name|v2
operator|->
name|x
argument_list|()
operator|)
operator|<<
literal|8
operator|)
operator|/
operator|(
name|v1
operator|->
name|y
argument_list|()
operator|-
name|v2
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|x2
operator|=
name|v2
operator|->
name|x
argument_list|()
operator|+
name|v2Frac
operator|*
operator|(
name|v1
operator|->
name|x
argument_list|()
operator|-
name|v2
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|v1
operator|->
name|y
argument_list|()
operator|-
name|v2
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|fillLines
argument_list|<
name|clip
argument_list|,
name|TopDown
argument_list|,
name|LeftToRight
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|y2
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|dx2
argument_list|,
name|x1
argument_list|,
name|dx1
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Long left edge.
comment|// yC<= y1<= y2
if|if
condition|(
name|yC
operator|!=
name|y1
condition|)
block|{
name|d1
operator|=
name|centerFrac
operator|*
name|value
operator|/
operator|(
name|v1
operator|->
name|y
argument_list|()
operator|-
name|center
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|dd1
operator|=
operator|(
operator|(
name|value
operator|<<
literal|8
operator|)
operator|/
operator|(
name|v1
operator|->
name|y
argument_list|()
operator|-
name|center
operator|->
name|y
argument_list|()
operator|)
operator|)
expr_stmt|;
name|fillLines
argument_list|<
name|clip
argument_list|,
name|TopDown
argument_list|,
name|RightToLeft
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|yC
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|dx2
argument_list|,
name|x1
argument_list|,
name|dx1
argument_list|,
name|d1
argument_list|,
name|dd1
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|y1
operator|!=
name|y2
condition|)
block|{
name|dx1
operator|=
operator|(
operator|(
name|v1
operator|->
name|x
argument_list|()
operator|-
name|v2
operator|->
name|x
argument_list|()
operator|)
operator|<<
literal|8
operator|)
operator|/
operator|(
name|v1
operator|->
name|y
argument_list|()
operator|-
name|v2
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|x1
operator|=
name|v1
operator|->
name|x
argument_list|()
operator|+
name|v1Frac
operator|*
operator|(
name|v1
operator|->
name|x
argument_list|()
operator|-
name|v2
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|v1
operator|->
name|y
argument_list|()
operator|-
name|v2
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|fillLines
argument_list|<
name|clip
argument_list|,
name|TopDown
argument_list|,
name|RightToLeft
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|y1
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|dx2
argument_list|,
name|x1
argument_list|,
name|dx1
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|FillClip
name|clip
parameter_list|>
DECL|function|drawRectangle
name|void
name|drawRectangle
parameter_list|(
name|qint32
modifier|*
name|bits
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
specifier|const
name|QPoint
modifier|*
name|int1
parameter_list|,
specifier|const
name|QPoint
modifier|*
name|center1
parameter_list|,
specifier|const
name|QPoint
modifier|*
name|ext1
parameter_list|,
specifier|const
name|QPoint
modifier|*
name|int2
parameter_list|,
specifier|const
name|QPoint
modifier|*
name|center2
parameter_list|,
specifier|const
name|QPoint
modifier|*
name|ext2
parameter_list|,
name|qint32
name|extValue
parameter_list|)
block|{
if|if
condition|(
name|center1
operator|->
name|y
argument_list|()
operator|>
name|center2
operator|->
name|y
argument_list|()
condition|)
block|{
name|qSwap
argument_list|(
name|center1
argument_list|,
name|center2
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|int1
argument_list|,
name|ext2
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|ext1
argument_list|,
name|int2
argument_list|)
expr_stmt|;
name|extValue
operator|=
operator|-
name|extValue
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|ext1
operator|->
name|x
argument_list|()
operator|-
name|center1
operator|->
name|x
argument_list|()
operator|==
name|center1
operator|->
name|x
argument_list|()
operator|-
name|int1
operator|->
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|center1
operator|->
name|y
argument_list|()
operator|==
name|center1
operator|->
name|y
argument_list|()
operator|-
name|int1
operator|->
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|ext2
operator|->
name|x
argument_list|()
operator|-
name|center2
operator|->
name|x
argument_list|()
operator|==
name|center2
operator|->
name|x
argument_list|()
operator|-
name|int2
operator|->
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|ext2
operator|->
name|y
argument_list|()
operator|-
name|center2
operator|->
name|y
argument_list|()
operator|==
name|center2
operator|->
name|y
argument_list|()
operator|-
name|int2
operator|->
name|y
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
name|yc1
init|=
name|clip
operator|==
name|Clip
condition|?
name|qBound
argument_list|(
literal|0
argument_list|,
name|center1
operator|->
name|y
argument_list|()
operator|>>
literal|8
argument_list|,
name|height
argument_list|)
else|:
name|center1
operator|->
name|y
argument_list|()
operator|>>
literal|8
decl_stmt|;
specifier|const
name|int
name|yc2
init|=
name|clip
operator|==
name|Clip
condition|?
name|qBound
argument_list|(
literal|0
argument_list|,
name|center2
operator|->
name|y
argument_list|()
operator|>>
literal|8
argument_list|,
name|height
argument_list|)
else|:
name|center2
operator|->
name|y
argument_list|()
operator|>>
literal|8
decl_stmt|;
specifier|const
name|int
name|yi1
init|=
name|clip
operator|==
name|Clip
condition|?
name|qBound
argument_list|(
literal|0
argument_list|,
name|int1
operator|->
name|y
argument_list|()
operator|>>
literal|8
argument_list|,
name|height
argument_list|)
else|:
name|int1
operator|->
name|y
argument_list|()
operator|>>
literal|8
decl_stmt|;
specifier|const
name|int
name|yi2
init|=
name|clip
operator|==
name|Clip
condition|?
name|qBound
argument_list|(
literal|0
argument_list|,
name|int2
operator|->
name|y
argument_list|()
operator|>>
literal|8
argument_list|,
name|height
argument_list|)
else|:
name|int2
operator|->
name|y
argument_list|()
operator|>>
literal|8
decl_stmt|;
specifier|const
name|int
name|ye1
init|=
name|clip
operator|==
name|Clip
condition|?
name|qBound
argument_list|(
literal|0
argument_list|,
name|ext1
operator|->
name|y
argument_list|()
operator|>>
literal|8
argument_list|,
name|height
argument_list|)
else|:
name|ext1
operator|->
name|y
argument_list|()
operator|>>
literal|8
decl_stmt|;
specifier|const
name|int
name|ye2
init|=
name|clip
operator|==
name|Clip
condition|?
name|qBound
argument_list|(
literal|0
argument_list|,
name|ext2
operator|->
name|y
argument_list|()
operator|>>
literal|8
argument_list|,
name|height
argument_list|)
else|:
name|ext2
operator|->
name|y
argument_list|()
operator|>>
literal|8
decl_stmt|;
specifier|const
name|int
name|center1Frac
init|=
name|clip
operator|==
name|Clip
condition|?
operator|(
name|yc1
operator|<<
literal|8
operator|)
operator|+
literal|0xff
operator|-
name|center1
operator|->
name|y
argument_list|()
else|:
name|~
name|center1
operator|->
name|y
argument_list|()
operator|&
literal|0xff
decl_stmt|;
specifier|const
name|int
name|center2Frac
init|=
name|clip
operator|==
name|Clip
condition|?
operator|(
name|yc2
operator|<<
literal|8
operator|)
operator|+
literal|0xff
operator|-
name|center2
operator|->
name|y
argument_list|()
else|:
name|~
name|center2
operator|->
name|y
argument_list|()
operator|&
literal|0xff
decl_stmt|;
specifier|const
name|int
name|int1Frac
init|=
name|clip
operator|==
name|Clip
condition|?
operator|(
name|yi1
operator|<<
literal|8
operator|)
operator|+
literal|0xff
operator|-
name|int1
operator|->
name|y
argument_list|()
else|:
name|~
name|int1
operator|->
name|y
argument_list|()
operator|&
literal|0xff
decl_stmt|;
specifier|const
name|int
name|ext1Frac
init|=
name|clip
operator|==
name|Clip
condition|?
operator|(
name|ye1
operator|<<
literal|8
operator|)
operator|+
literal|0xff
operator|-
name|ext1
operator|->
name|y
argument_list|()
else|:
name|~
name|ext1
operator|->
name|y
argument_list|()
operator|&
literal|0xff
decl_stmt|;
name|int
name|dxC
init|=
literal|0
decl_stmt|,
name|dxE
init|=
literal|0
decl_stmt|;
comment|// cap slope, edge slope
name|qint32
name|ddC
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ext1
operator|->
name|y
argument_list|()
operator|!=
name|int1
operator|->
name|y
argument_list|()
condition|)
block|{
name|dxC
operator|=
operator|(
operator|(
name|ext1
operator|->
name|x
argument_list|()
operator|-
name|int1
operator|->
name|x
argument_list|()
operator|)
operator|<<
literal|8
operator|)
operator|/
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|int1
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|ddC
operator|=
operator|(
name|extValue
operator|<<
literal|9
operator|)
operator|/
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|int1
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|ext1
operator|->
name|y
argument_list|()
operator|!=
name|ext2
operator|->
name|y
argument_list|()
condition|)
name|dxE
operator|=
operator|(
operator|(
name|ext1
operator|->
name|x
argument_list|()
operator|-
name|ext2
operator|->
name|x
argument_list|()
operator|)
operator|<<
literal|8
operator|)
operator|/
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|ext2
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
specifier|const
name|qint32
name|div
init|=
operator|(
name|ext1
operator|->
name|x
argument_list|()
operator|-
name|int1
operator|->
name|x
argument_list|()
operator|)
operator|*
operator|(
name|ext2
operator|->
name|y
argument_list|()
operator|-
name|int1
operator|->
name|y
argument_list|()
operator|)
operator|-
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|int1
operator|->
name|y
argument_list|()
operator|)
operator|*
operator|(
name|ext2
operator|->
name|x
argument_list|()
operator|-
name|int1
operator|->
name|x
argument_list|()
operator|)
decl_stmt|;
specifier|const
name|qint32
name|dd
init|=
name|div
condition|?
name|qint32
argument_list|(
operator|(
name|qint64
argument_list|(
name|extValue
operator|*
operator|(
name|ext2
operator|->
name|y
argument_list|()
operator|-
name|ext1
operator|->
name|y
argument_list|()
operator|)
argument_list|)
operator|<<
literal|9
operator|)
operator|/
name|div
argument_list|)
else|:
literal|0
decl_stmt|;
name|int
name|xe1
decl_stmt|,
name|xe2
decl_stmt|,
name|xc1
decl_stmt|,
name|xc2
decl_stmt|;
name|qint32
name|d
decl_stmt|;
name|qint32
name|intValue
init|=
operator|-
name|extValue
decl_stmt|;
if|if
condition|(
name|center2
operator|->
name|x
argument_list|()
operator|<
name|center1
operator|->
name|x
argument_list|()
condition|)
block|{
comment|// Leaning to the right. '/'
if|if
condition|(
name|int1
operator|->
name|y
argument_list|()
operator|<
name|ext2
operator|->
name|y
argument_list|()
condition|)
block|{
comment|// Mostly vertical.
name|Q_ASSERT
argument_list|(
name|ext1
operator|->
name|y
argument_list|()
operator|!=
name|ext2
operator|->
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|xe1
operator|=
name|ext1
operator|->
name|x
argument_list|()
operator|+
name|ext1Frac
operator|*
operator|(
name|ext1
operator|->
name|x
argument_list|()
operator|-
name|ext2
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|ext2
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|xe2
operator|=
name|int1
operator|->
name|x
argument_list|()
operator|+
name|int1Frac
operator|*
operator|(
name|ext1
operator|->
name|x
argument_list|()
operator|-
name|ext2
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|ext2
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|ye1
operator|!=
name|yi1
condition|)
block|{
name|xc2
operator|=
name|center1
operator|->
name|x
argument_list|()
operator|+
name|center1Frac
operator|*
operator|(
name|ext1
operator|->
name|x
argument_list|()
operator|-
name|int1
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|int1
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|xc2
operator|+=
operator|(
name|ye1
operator|-
name|yc1
operator|)
operator|*
name|dxC
expr_stmt|;
name|fillLines
argument_list|<
name|clip
argument_list|,
name|TopDown
argument_list|,
name|LeftToRight
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|ye1
argument_list|,
name|yi1
argument_list|,
name|xe1
argument_list|,
name|dxE
argument_list|,
name|xc2
argument_list|,
name|dxC
argument_list|,
name|extValue
argument_list|,
literal|0
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|yi1
operator|!=
name|ye2
condition|)
name|fillLines
argument_list|<
name|clip
argument_list|,
name|TopDown
argument_list|,
name|LeftToRight
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|yi1
argument_list|,
name|ye2
argument_list|,
name|xe1
argument_list|,
name|dxE
argument_list|,
name|xe2
argument_list|,
name|dxE
argument_list|,
name|extValue
argument_list|,
literal|0
argument_list|,
name|dd
argument_list|)
expr_stmt|;
if|if
condition|(
name|ye2
operator|!=
name|yi2
condition|)
block|{
name|xc1
operator|=
name|center2
operator|->
name|x
argument_list|()
operator|+
name|center2Frac
operator|*
operator|(
name|ext1
operator|->
name|x
argument_list|()
operator|-
name|int1
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|int1
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|xc1
operator|+=
operator|(
name|ye2
operator|-
name|yc2
operator|)
operator|*
name|dxC
expr_stmt|;
name|fillLines
argument_list|<
name|clip
argument_list|,
name|TopDown
argument_list|,
name|RightToLeft
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|ye2
argument_list|,
name|yi2
argument_list|,
name|xc1
argument_list|,
name|dxC
argument_list|,
name|xe2
argument_list|,
name|dxE
argument_list|,
name|intValue
argument_list|,
literal|0
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Mostly horizontal.
name|Q_ASSERT
argument_list|(
name|ext1
operator|->
name|y
argument_list|()
operator|!=
name|int1
operator|->
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|xc1
operator|=
name|center2
operator|->
name|x
argument_list|()
operator|+
name|center2Frac
operator|*
operator|(
name|ext1
operator|->
name|x
argument_list|()
operator|-
name|int1
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|int1
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|xc2
operator|=
name|center1
operator|->
name|x
argument_list|()
operator|+
name|center1Frac
operator|*
operator|(
name|ext1
operator|->
name|x
argument_list|()
operator|-
name|int1
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|int1
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|xc1
operator|+=
operator|(
name|ye2
operator|-
name|yc2
operator|)
operator|*
name|dxC
expr_stmt|;
name|xc2
operator|+=
operator|(
name|ye1
operator|-
name|yc1
operator|)
operator|*
name|dxC
expr_stmt|;
if|if
condition|(
name|ye1
operator|!=
name|ye2
condition|)
block|{
name|xe1
operator|=
name|ext1
operator|->
name|x
argument_list|()
operator|+
name|ext1Frac
operator|*
operator|(
name|ext1
operator|->
name|x
argument_list|()
operator|-
name|ext2
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|ext2
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|fillLines
argument_list|<
name|clip
argument_list|,
name|TopDown
argument_list|,
name|LeftToRight
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|ye1
argument_list|,
name|ye2
argument_list|,
name|xe1
argument_list|,
name|dxE
argument_list|,
name|xc2
argument_list|,
name|dxC
argument_list|,
name|extValue
argument_list|,
literal|0
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ye2
operator|!=
name|yi1
condition|)
block|{
name|d
operator|=
operator|(
name|clip
operator|==
name|Clip
condition|?
operator|(
name|ye2
operator|<<
literal|8
operator|)
operator|+
literal|0xff
operator|-
name|center2
operator|->
name|y
argument_list|()
else|:
operator|(
name|ext2
operator|->
name|y
argument_list|()
operator||
literal|0xff
operator|)
operator|-
name|center2
operator|->
name|y
argument_list|()
operator|)
operator|*
literal|2
operator|*
name|extValue
operator|/
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|int1
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|fillLines
argument_list|<
name|clip
argument_list|,
name|TopDown
argument_list|,
name|LeftToRight
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|ye2
argument_list|,
name|yi1
argument_list|,
name|xc1
argument_list|,
name|dxC
argument_list|,
name|xc2
argument_list|,
name|dxC
argument_list|,
name|d
argument_list|,
name|ddC
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|yi1
operator|!=
name|yi2
condition|)
block|{
name|xe2
operator|=
name|int1
operator|->
name|x
argument_list|()
operator|+
name|int1Frac
operator|*
operator|(
name|ext1
operator|->
name|x
argument_list|()
operator|-
name|ext2
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|ext2
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|fillLines
argument_list|<
name|clip
argument_list|,
name|TopDown
argument_list|,
name|RightToLeft
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|yi1
argument_list|,
name|yi2
argument_list|,
name|xc1
argument_list|,
name|dxC
argument_list|,
name|xe2
argument_list|,
name|dxE
argument_list|,
name|intValue
argument_list|,
literal|0
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Leaning to the left. '\'
if|if
condition|(
name|ext1
operator|->
name|y
argument_list|()
operator|<
name|int2
operator|->
name|y
argument_list|()
condition|)
block|{
comment|// Mostly vertical.
name|Q_ASSERT
argument_list|(
name|ext1
operator|->
name|y
argument_list|()
operator|!=
name|ext2
operator|->
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|xe1
operator|=
name|ext1
operator|->
name|x
argument_list|()
operator|+
name|ext1Frac
operator|*
operator|(
name|ext1
operator|->
name|x
argument_list|()
operator|-
name|ext2
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|ext2
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|xe2
operator|=
name|int1
operator|->
name|x
argument_list|()
operator|+
name|int1Frac
operator|*
operator|(
name|ext1
operator|->
name|x
argument_list|()
operator|-
name|ext2
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|ext2
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|yi1
operator|!=
name|ye1
condition|)
block|{
name|xc1
operator|=
name|center1
operator|->
name|x
argument_list|()
operator|+
name|center1Frac
operator|*
operator|(
name|ext1
operator|->
name|x
argument_list|()
operator|-
name|int1
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|int1
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|xc1
operator|+=
operator|(
name|yi1
operator|-
name|yc1
operator|)
operator|*
name|dxC
expr_stmt|;
name|fillLines
argument_list|<
name|clip
argument_list|,
name|TopDown
argument_list|,
name|RightToLeft
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|yi1
argument_list|,
name|ye1
argument_list|,
name|xc1
argument_list|,
name|dxC
argument_list|,
name|xe2
argument_list|,
name|dxE
argument_list|,
name|intValue
argument_list|,
literal|0
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ye1
operator|!=
name|yi2
condition|)
name|fillLines
argument_list|<
name|clip
argument_list|,
name|TopDown
argument_list|,
name|RightToLeft
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|ye1
argument_list|,
name|yi2
argument_list|,
name|xe1
argument_list|,
name|dxE
argument_list|,
name|xe2
argument_list|,
name|dxE
argument_list|,
name|intValue
argument_list|,
literal|0
argument_list|,
name|dd
argument_list|)
expr_stmt|;
if|if
condition|(
name|yi2
operator|!=
name|ye2
condition|)
block|{
name|xc2
operator|=
name|center2
operator|->
name|x
argument_list|()
operator|+
name|center2Frac
operator|*
operator|(
name|ext1
operator|->
name|x
argument_list|()
operator|-
name|int1
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|int1
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|xc2
operator|+=
operator|(
name|yi2
operator|-
name|yc2
operator|)
operator|*
name|dxC
expr_stmt|;
name|fillLines
argument_list|<
name|clip
argument_list|,
name|TopDown
argument_list|,
name|LeftToRight
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|yi2
argument_list|,
name|ye2
argument_list|,
name|xe1
argument_list|,
name|dxE
argument_list|,
name|xc2
argument_list|,
name|dxC
argument_list|,
name|extValue
argument_list|,
literal|0
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Mostly horizontal.
name|Q_ASSERT
argument_list|(
name|ext1
operator|->
name|y
argument_list|()
operator|!=
name|int1
operator|->
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|xc1
operator|=
name|center1
operator|->
name|x
argument_list|()
operator|+
name|center1Frac
operator|*
operator|(
name|ext1
operator|->
name|x
argument_list|()
operator|-
name|int1
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|int1
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|xc2
operator|=
name|center2
operator|->
name|x
argument_list|()
operator|+
name|center2Frac
operator|*
operator|(
name|ext1
operator|->
name|x
argument_list|()
operator|-
name|int1
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|int1
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|xc1
operator|+=
operator|(
name|yi1
operator|-
name|yc1
operator|)
operator|*
name|dxC
expr_stmt|;
name|xc2
operator|+=
operator|(
name|yi2
operator|-
name|yc2
operator|)
operator|*
name|dxC
expr_stmt|;
if|if
condition|(
name|yi1
operator|!=
name|yi2
condition|)
block|{
name|xe2
operator|=
name|int1
operator|->
name|x
argument_list|()
operator|+
name|int1Frac
operator|*
operator|(
name|ext1
operator|->
name|x
argument_list|()
operator|-
name|ext2
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|ext2
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|fillLines
argument_list|<
name|clip
argument_list|,
name|TopDown
argument_list|,
name|RightToLeft
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|yi1
argument_list|,
name|yi2
argument_list|,
name|xc1
argument_list|,
name|dxC
argument_list|,
name|xe2
argument_list|,
name|dxE
argument_list|,
name|intValue
argument_list|,
literal|0
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|yi2
operator|!=
name|ye1
condition|)
block|{
name|d
operator|=
operator|(
name|clip
operator|==
name|Clip
condition|?
operator|(
name|yi2
operator|<<
literal|8
operator|)
operator|+
literal|0xff
operator|-
name|center2
operator|->
name|y
argument_list|()
else|:
operator|(
name|int2
operator|->
name|y
argument_list|()
operator||
literal|0xff
operator|)
operator|-
name|center2
operator|->
name|y
argument_list|()
operator|)
operator|*
literal|2
operator|*
name|extValue
operator|/
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|int1
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|fillLines
argument_list|<
name|clip
argument_list|,
name|TopDown
argument_list|,
name|RightToLeft
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|yi2
argument_list|,
name|ye1
argument_list|,
name|xc1
argument_list|,
name|dxC
argument_list|,
name|xc2
argument_list|,
name|dxC
argument_list|,
name|d
argument_list|,
name|ddC
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ye1
operator|!=
name|ye2
condition|)
block|{
name|xe1
operator|=
name|ext1
operator|->
name|x
argument_list|()
operator|+
name|ext1Frac
operator|*
operator|(
name|ext1
operator|->
name|x
argument_list|()
operator|-
name|ext2
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|ext1
operator|->
name|y
argument_list|()
operator|-
name|ext2
operator|->
name|y
argument_list|()
operator|)
expr_stmt|;
name|fillLines
argument_list|<
name|clip
argument_list|,
name|TopDown
argument_list|,
name|LeftToRight
argument_list|>
argument_list|(
name|bits
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|ye1
argument_list|,
name|ye2
argument_list|,
name|xe1
argument_list|,
name|dxE
argument_list|,
name|xc2
argument_list|,
name|dxC
argument_list|,
name|extValue
argument_list|,
literal|0
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|drawPolygons
specifier|static
name|void
name|drawPolygons
parameter_list|(
name|qint32
modifier|*
name|bits
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
specifier|const
name|QPoint
modifier|*
name|vertices
parameter_list|,
specifier|const
name|quint32
modifier|*
name|indices
parameter_list|,
name|int
name|indexCount
parameter_list|,
name|qint32
name|value
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|indexCount
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|height
operator|<=
literal|128
argument_list|)
expr_stmt|;
name|QVarLengthArray
argument_list|<
name|quint8
argument_list|,
literal|16
argument_list|>
name|scans
index|[
literal|128
index|]
decl_stmt|;
name|int
name|first
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|indexCount
condition|;
operator|++
name|i
control|)
block|{
name|quint32
name|idx1
init|=
name|indices
index|[
name|i
operator|-
literal|1
index|]
decl_stmt|;
name|quint32
name|idx2
init|=
name|indices
index|[
name|i
index|]
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|idx1
operator|!=
name|quint32
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx2
operator|==
name|quint32
argument_list|(
operator|-
literal|1
argument_list|)
condition|)
block|{
name|idx2
operator|=
name|indices
index|[
name|first
index|]
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|idx2
operator|!=
name|quint32
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|first
operator|=
operator|++
name|i
expr_stmt|;
block|}
specifier|const
name|QPoint
modifier|*
name|v1
init|=
operator|&
name|vertices
index|[
name|idx1
index|]
decl_stmt|;
specifier|const
name|QPoint
modifier|*
name|v2
init|=
operator|&
name|vertices
index|[
name|idx2
index|]
decl_stmt|;
if|if
condition|(
name|v2
operator|->
name|y
argument_list|()
operator|<
name|v1
operator|->
name|y
argument_list|()
condition|)
name|qSwap
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
expr_stmt|;
name|int
name|fromY
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|v1
operator|->
name|y
argument_list|()
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|int
name|toY
init|=
name|qMin
argument_list|(
name|height
argument_list|,
name|v2
operator|->
name|y
argument_list|()
operator|>>
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromY
operator|>=
name|toY
condition|)
continue|continue;
name|int
name|dx
init|=
operator|(
operator|(
name|v2
operator|->
name|x
argument_list|()
operator|-
name|v1
operator|->
name|x
argument_list|()
operator|)
operator|<<
literal|8
operator|)
operator|/
operator|(
name|v2
operator|->
name|y
argument_list|()
operator|-
name|v1
operator|->
name|y
argument_list|()
operator|)
decl_stmt|;
name|int
name|x
init|=
name|v1
operator|->
name|x
argument_list|()
operator|+
operator|(
operator|(
name|fromY
operator|<<
literal|8
operator|)
operator|+
literal|0xff
operator|-
name|v1
operator|->
name|y
argument_list|()
operator|)
operator|*
operator|(
name|v2
operator|->
name|x
argument_list|()
operator|-
name|v1
operator|->
name|x
argument_list|()
operator|)
operator|/
operator|(
name|v2
operator|->
name|y
argument_list|()
operator|-
name|v1
operator|->
name|y
argument_list|()
operator|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|fromY
init|;
name|y
operator|<
name|toY
condition|;
operator|++
name|y
control|)
block|{
name|quint32
name|c
init|=
name|quint32
argument_list|(
name|x
operator|>>
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|<
name|quint32
argument_list|(
name|width
argument_list|)
condition|)
name|scans
index|[
name|y
index|]
operator|.
name|append
argument_list|(
name|quint8
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|+=
name|dx
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|height
condition|;
operator|++
name|i
control|)
block|{
name|quint8
modifier|*
name|scanline
init|=
name|scans
index|[
name|i
index|]
operator|.
name|data
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|scans
index|[
name|i
index|]
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|size
condition|;
operator|++
name|j
control|)
block|{
name|int
name|k
init|=
name|j
decl_stmt|;
name|quint8
name|value
init|=
name|scanline
index|[
name|k
index|]
decl_stmt|;
for|for
control|(
init|;
name|k
operator|!=
literal|0
operator|&&
name|value
operator|<
name|scanline
index|[
name|k
operator|-
literal|1
index|]
condition|;
operator|--
name|k
control|)
name|scanline
index|[
name|k
index|]
operator|=
name|scanline
index|[
name|k
operator|-
literal|1
index|]
expr_stmt|;
name|scanline
index|[
name|k
index|]
operator|=
name|value
expr_stmt|;
block|}
name|qint32
modifier|*
name|line
init|=
name|bits
operator|+
name|i
operator|*
name|width
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|j
operator|+
literal|1
operator|<
name|size
condition|;
name|j
operator|+=
literal|2
control|)
block|{
for|for
control|(
name|quint8
name|x
init|=
name|scanline
index|[
name|j
index|]
init|;
name|x
operator|<
name|scanline
index|[
name|j
operator|+
literal|1
index|]
condition|;
operator|++
name|x
control|)
name|line
index|[
name|x
index|]
operator|=
name|value
expr_stmt|;
block|}
if|if
condition|(
name|j
operator|<
name|size
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
name|scanline
index|[
name|j
index|]
init|;
name|x
operator|<
name|width
condition|;
operator|++
name|x
control|)
name|line
index|[
name|x
index|]
operator|=
name|value
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|makeDistanceField
specifier|static
name|void
name|makeDistanceField
parameter_list|(
name|QDistanceFieldData
modifier|*
name|data
parameter_list|,
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|int
name|dfScale
parameter_list|,
name|int
name|offs
parameter_list|)
block|{
if|if
condition|(
operator|!
name|data
operator|||
operator|!
name|data
operator|->
name|data
condition|)
return|return;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|memset
argument_list|(
name|data
operator|->
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|->
name|nbytes
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|imgWidth
init|=
name|data
operator|->
name|width
decl_stmt|;
name|int
name|imgHeight
init|=
name|data
operator|->
name|height
decl_stmt|;
name|QTransform
name|transform
decl_stmt|;
name|transform
operator|.
name|translate
argument_list|(
name|offs
argument_list|,
name|offs
argument_list|)
expr_stmt|;
name|transform
operator|.
name|scale
argument_list|(
name|qreal
argument_list|(
literal|1
argument_list|)
operator|/
name|dfScale
argument_list|,
name|qreal
argument_list|(
literal|1
argument_list|)
operator|/
name|dfScale
argument_list|)
expr_stmt|;
name|QDataBuffer
argument_list|<
name|quint32
argument_list|>
name|pathIndices
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QDataBuffer
argument_list|<
name|QPoint
argument_list|>
name|pathVertices
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|qSimplifyPath
argument_list|(
name|path
argument_list|,
name|pathVertices
argument_list|,
name|pathIndices
argument_list|,
name|transform
argument_list|)
expr_stmt|;
specifier|const
name|qint32
name|interiorColor
init|=
operator|-
literal|0x7f80
decl_stmt|;
comment|// 8:8 signed format, -127.5
specifier|const
name|qint32
name|exteriorColor
init|=
literal|0x7f80
decl_stmt|;
comment|// 8:8 signed format, 127.5
name|QScopedArrayPointer
argument_list|<
name|qint32
argument_list|>
name|bits
argument_list|(
operator|new
name|qint32
index|[
name|imgWidth
operator|*
name|imgHeight
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|imgWidth
operator|*
name|imgHeight
condition|;
operator|++
name|i
control|)
name|bits
index|[
name|i
index|]
operator|=
name|exteriorColor
expr_stmt|;
specifier|const
name|qreal
name|angleStep
init|=
name|qreal
argument_list|(
literal|15
operator|*
literal|3.141592653589793238
operator|/
literal|180
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|rotation
argument_list|(
name|qRound
argument_list|(
name|qCos
argument_list|(
name|angleStep
argument_list|)
operator|*
literal|0x4000
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|qSin
argument_list|(
name|angleStep
argument_list|)
operator|*
literal|0x4000
argument_list|)
argument_list|)
decl_stmt|;
comment|// 2:14 signed
specifier|const
name|quint32
modifier|*
name|indices
init|=
name|pathIndices
operator|.
name|data
argument_list|()
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QPoint
argument_list|>
name|normals
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QPoint
argument_list|>
name|vertices
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|bool
argument_list|>
name|isConvex
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|bool
argument_list|>
name|needsClipping
decl_stmt|;
name|drawPolygons
argument_list|(
name|bits
operator|.
name|data
argument_list|()
argument_list|,
name|imgWidth
argument_list|,
name|imgHeight
argument_list|,
name|pathVertices
operator|.
name|data
argument_list|()
argument_list|,
name|indices
argument_list|,
name|pathIndices
operator|.
name|size
argument_list|()
argument_list|,
name|interiorColor
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|pathIndices
operator|.
name|size
argument_list|()
condition|)
block|{
name|normals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|vertices
operator|.
name|clear
argument_list|()
expr_stmt|;
name|needsClipping
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Find end of polygon.
name|int
name|end
init|=
name|index
decl_stmt|;
while|while
condition|(
name|indices
index|[
name|end
index|]
operator|!=
name|quint32
argument_list|(
operator|-
literal|1
argument_list|)
condition|)
operator|++
name|end
expr_stmt|;
comment|// Calculate vertex normals.
for|for
control|(
name|int
name|next
init|=
name|index
init|,
name|prev
init|=
name|end
operator|-
literal|1
init|;
name|next
operator|<
name|end
condition|;
name|prev
operator|=
name|next
operator|++
control|)
block|{
name|quint32
name|fromVertexIndex
init|=
name|indices
index|[
name|prev
index|]
decl_stmt|;
name|quint32
name|toVertexIndex
init|=
name|indices
index|[
name|next
index|]
decl_stmt|;
specifier|const
name|QPoint
modifier|&
name|from
init|=
name|pathVertices
operator|.
name|at
argument_list|(
name|fromVertexIndex
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
modifier|&
name|to
init|=
name|pathVertices
operator|.
name|at
argument_list|(
name|toVertexIndex
argument_list|)
decl_stmt|;
name|QPoint
name|n
argument_list|(
name|to
operator|.
name|y
argument_list|()
operator|-
name|from
operator|.
name|y
argument_list|()
argument_list|,
name|from
operator|.
name|x
argument_list|()
operator|-
name|to
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|x
argument_list|()
operator|==
literal|0
operator|&&
name|n
operator|.
name|y
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|int
name|scale
init|=
name|qRound
argument_list|(
operator|(
name|offs
operator|<<
literal|16
operator|)
operator|/
name|qSqrt
argument_list|(
name|qreal
argument_list|(
name|n
operator|.
name|x
argument_list|()
operator|*
name|n
operator|.
name|x
argument_list|()
operator|+
name|n
operator|.
name|y
argument_list|()
operator|*
name|n
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// 8:16
name|n
operator|.
name|rx
argument_list|()
operator|=
name|n
operator|.
name|x
argument_list|()
operator|*
name|scale
operator|>>
literal|8
expr_stmt|;
name|n
operator|.
name|ry
argument_list|()
operator|=
name|n
operator|.
name|y
argument_list|()
operator|*
name|scale
operator|>>
literal|8
expr_stmt|;
name|normals
operator|.
name|append
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|QPoint
name|v
argument_list|(
name|to
operator|.
name|x
argument_list|()
operator|+
literal|0x7f
argument_list|,
name|to
operator|.
name|y
argument_list|()
operator|+
literal|0x7f
argument_list|)
decl_stmt|;
name|vertices
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|needsClipping
operator|.
name|append
argument_list|(
operator|(
name|to
operator|.
name|x
argument_list|()
operator|<
name|offs
operator|<<
literal|8
operator|)
operator|||
operator|(
name|to
operator|.
name|x
argument_list|()
operator|>=
operator|(
name|imgWidth
operator|-
name|offs
operator|)
operator|<<
literal|8
operator|)
operator|||
operator|(
name|to
operator|.
name|y
argument_list|()
operator|<
name|offs
operator|<<
literal|8
operator|)
operator|||
operator|(
name|to
operator|.
name|y
argument_list|()
operator|>=
operator|(
name|imgHeight
operator|-
name|offs
operator|)
operator|<<
literal|8
operator|)
argument_list|)
expr_stmt|;
block|}
name|isConvex
operator|.
name|resize
argument_list|(
name|normals
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|next
init|=
literal|0
init|,
name|prev
init|=
name|normals
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|next
operator|<
name|normals
operator|.
name|count
argument_list|()
condition|;
name|prev
operator|=
name|next
operator|++
control|)
block|{
name|isConvex
index|[
name|prev
index|]
operator|=
name|normals
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|x
argument_list|()
operator|*
name|normals
operator|.
name|at
argument_list|(
name|next
argument_list|)
operator|.
name|y
argument_list|()
operator|-
name|normals
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|y
argument_list|()
operator|*
name|normals
operator|.
name|at
argument_list|(
name|next
argument_list|)
operator|.
name|x
argument_list|()
operator|<
literal|0
expr_stmt|;
block|}
comment|// Draw quads.
for|for
control|(
name|int
name|next
init|=
literal|0
init|,
name|prev
init|=
name|normals
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|next
operator|<
name|normals
operator|.
name|count
argument_list|()
condition|;
name|prev
operator|=
name|next
operator|++
control|)
block|{
name|QPoint
name|n
init|=
name|normals
operator|.
name|at
argument_list|(
name|next
argument_list|)
decl_stmt|;
name|QPoint
name|intPrev
init|=
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
decl_stmt|;
name|QPoint
name|extPrev
init|=
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
decl_stmt|;
name|QPoint
name|intNext
init|=
name|vertices
operator|.
name|at
argument_list|(
name|next
argument_list|)
decl_stmt|;
name|QPoint
name|extNext
init|=
name|vertices
operator|.
name|at
argument_list|(
name|next
argument_list|)
decl_stmt|;
name|extPrev
operator|.
name|rx
argument_list|()
operator|-=
name|n
operator|.
name|x
argument_list|()
expr_stmt|;
name|extPrev
operator|.
name|ry
argument_list|()
operator|-=
name|n
operator|.
name|y
argument_list|()
expr_stmt|;
name|intPrev
operator|.
name|rx
argument_list|()
operator|+=
name|n
operator|.
name|x
argument_list|()
expr_stmt|;
name|intPrev
operator|.
name|ry
argument_list|()
operator|+=
name|n
operator|.
name|y
argument_list|()
expr_stmt|;
name|extNext
operator|.
name|rx
argument_list|()
operator|-=
name|n
operator|.
name|x
argument_list|()
expr_stmt|;
name|extNext
operator|.
name|ry
argument_list|()
operator|-=
name|n
operator|.
name|y
argument_list|()
expr_stmt|;
name|intNext
operator|.
name|rx
argument_list|()
operator|+=
name|n
operator|.
name|x
argument_list|()
expr_stmt|;
name|intNext
operator|.
name|ry
argument_list|()
operator|+=
name|n
operator|.
name|y
argument_list|()
expr_stmt|;
if|if
condition|(
name|needsClipping
index|[
name|prev
index|]
operator|||
name|needsClipping
index|[
name|next
index|]
condition|)
block|{
name|drawRectangle
argument_list|<
name|Clip
argument_list|>
argument_list|(
name|bits
operator|.
name|data
argument_list|()
argument_list|,
name|imgWidth
argument_list|,
name|imgHeight
argument_list|,
operator|&
name|intPrev
argument_list|,
operator|&
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
argument_list|,
operator|&
name|extPrev
argument_list|,
operator|&
name|intNext
argument_list|,
operator|&
name|vertices
operator|.
name|at
argument_list|(
name|next
argument_list|)
argument_list|,
operator|&
name|extNext
argument_list|,
name|exteriorColor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|drawRectangle
argument_list|<
name|NoClip
argument_list|>
argument_list|(
name|bits
operator|.
name|data
argument_list|()
argument_list|,
name|imgWidth
argument_list|,
name|imgHeight
argument_list|,
operator|&
name|intPrev
argument_list|,
operator|&
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
argument_list|,
operator|&
name|extPrev
argument_list|,
operator|&
name|intNext
argument_list|,
operator|&
name|vertices
operator|.
name|at
argument_list|(
name|next
argument_list|)
argument_list|,
operator|&
name|extNext
argument_list|,
name|exteriorColor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isConvex
operator|.
name|at
argument_list|(
name|prev
argument_list|)
condition|)
block|{
name|QPoint
name|p
init|=
name|extPrev
decl_stmt|;
if|if
condition|(
name|needsClipping
index|[
name|prev
index|]
condition|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|QPoint
name|rn
argument_list|(
operator|(
name|n
operator|.
name|x
argument_list|()
operator|*
name|rotation
operator|.
name|x
argument_list|()
operator|-
name|n
operator|.
name|y
argument_list|()
operator|*
name|rotation
operator|.
name|y
argument_list|()
operator|)
operator|>>
literal|14
argument_list|,
operator|(
name|n
operator|.
name|y
argument_list|()
operator|*
name|rotation
operator|.
name|x
argument_list|()
operator|+
name|n
operator|.
name|x
argument_list|()
operator|*
name|rotation
operator|.
name|y
argument_list|()
operator|)
operator|>>
literal|14
argument_list|)
decl_stmt|;
name|n
operator|=
name|rn
expr_stmt|;
if|if
condition|(
name|n
operator|.
name|x
argument_list|()
operator|*
name|normals
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|y
argument_list|()
operator|-
name|n
operator|.
name|y
argument_list|()
operator|*
name|normals
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|x
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|p
operator|.
name|rx
argument_list|()
operator|=
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|x
argument_list|()
operator|-
name|normals
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|x
argument_list|()
expr_stmt|;
name|p
operator|.
name|ry
argument_list|()
operator|=
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|y
argument_list|()
operator|-
name|normals
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|y
argument_list|()
expr_stmt|;
name|drawTriangle
argument_list|<
name|Clip
argument_list|>
argument_list|(
name|bits
operator|.
name|data
argument_list|()
argument_list|,
name|imgWidth
argument_list|,
name|imgHeight
argument_list|,
operator|&
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
argument_list|,
operator|&
name|extPrev
argument_list|,
operator|&
name|p
argument_list|,
name|exteriorColor
argument_list|)
expr_stmt|;
break|break;
block|}
name|p
operator|.
name|rx
argument_list|()
operator|=
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|x
argument_list|()
operator|-
name|n
operator|.
name|x
argument_list|()
expr_stmt|;
name|p
operator|.
name|ry
argument_list|()
operator|=
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|y
argument_list|()
operator|-
name|n
operator|.
name|y
argument_list|()
expr_stmt|;
name|drawTriangle
argument_list|<
name|Clip
argument_list|>
argument_list|(
name|bits
operator|.
name|data
argument_list|()
argument_list|,
name|imgWidth
argument_list|,
name|imgHeight
argument_list|,
operator|&
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
argument_list|,
operator|&
name|extPrev
argument_list|,
operator|&
name|p
argument_list|,
name|exteriorColor
argument_list|)
expr_stmt|;
name|extPrev
operator|=
name|p
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|QPoint
name|rn
argument_list|(
operator|(
name|n
operator|.
name|x
argument_list|()
operator|*
name|rotation
operator|.
name|x
argument_list|()
operator|-
name|n
operator|.
name|y
argument_list|()
operator|*
name|rotation
operator|.
name|y
argument_list|()
operator|)
operator|>>
literal|14
argument_list|,
operator|(
name|n
operator|.
name|y
argument_list|()
operator|*
name|rotation
operator|.
name|x
argument_list|()
operator|+
name|n
operator|.
name|x
argument_list|()
operator|*
name|rotation
operator|.
name|y
argument_list|()
operator|)
operator|>>
literal|14
argument_list|)
decl_stmt|;
name|n
operator|=
name|rn
expr_stmt|;
if|if
condition|(
name|n
operator|.
name|x
argument_list|()
operator|*
name|normals
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|y
argument_list|()
operator|-
name|n
operator|.
name|y
argument_list|()
operator|*
name|normals
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|x
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|p
operator|.
name|rx
argument_list|()
operator|=
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|x
argument_list|()
operator|-
name|normals
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|x
argument_list|()
expr_stmt|;
name|p
operator|.
name|ry
argument_list|()
operator|=
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|y
argument_list|()
operator|-
name|normals
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|y
argument_list|()
expr_stmt|;
name|drawTriangle
argument_list|<
name|NoClip
argument_list|>
argument_list|(
name|bits
operator|.
name|data
argument_list|()
argument_list|,
name|imgWidth
argument_list|,
name|imgHeight
argument_list|,
operator|&
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
argument_list|,
operator|&
name|extPrev
argument_list|,
operator|&
name|p
argument_list|,
name|exteriorColor
argument_list|)
expr_stmt|;
break|break;
block|}
name|p
operator|.
name|rx
argument_list|()
operator|=
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|x
argument_list|()
operator|-
name|n
operator|.
name|x
argument_list|()
expr_stmt|;
name|p
operator|.
name|ry
argument_list|()
operator|=
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|y
argument_list|()
operator|-
name|n
operator|.
name|y
argument_list|()
expr_stmt|;
name|drawTriangle
argument_list|<
name|NoClip
argument_list|>
argument_list|(
name|bits
operator|.
name|data
argument_list|()
argument_list|,
name|imgWidth
argument_list|,
name|imgHeight
argument_list|,
operator|&
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
argument_list|,
operator|&
name|extPrev
argument_list|,
operator|&
name|p
argument_list|,
name|exteriorColor
argument_list|)
expr_stmt|;
name|extPrev
operator|=
name|p
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|QPoint
name|p
init|=
name|intPrev
decl_stmt|;
if|if
condition|(
name|needsClipping
index|[
name|prev
index|]
condition|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|QPoint
name|rn
argument_list|(
operator|(
name|n
operator|.
name|x
argument_list|()
operator|*
name|rotation
operator|.
name|x
argument_list|()
operator|+
name|n
operator|.
name|y
argument_list|()
operator|*
name|rotation
operator|.
name|y
argument_list|()
operator|)
operator|>>
literal|14
argument_list|,
operator|(
name|n
operator|.
name|y
argument_list|()
operator|*
name|rotation
operator|.
name|x
argument_list|()
operator|-
name|n
operator|.
name|x
argument_list|()
operator|*
name|rotation
operator|.
name|y
argument_list|()
operator|)
operator|>>
literal|14
argument_list|)
decl_stmt|;
name|n
operator|=
name|rn
expr_stmt|;
if|if
condition|(
name|n
operator|.
name|x
argument_list|()
operator|*
name|normals
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|y
argument_list|()
operator|-
name|n
operator|.
name|y
argument_list|()
operator|*
name|normals
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|x
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|p
operator|.
name|rx
argument_list|()
operator|=
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|x
argument_list|()
operator|+
name|normals
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|x
argument_list|()
expr_stmt|;
name|p
operator|.
name|ry
argument_list|()
operator|=
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|y
argument_list|()
operator|+
name|normals
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|y
argument_list|()
expr_stmt|;
name|drawTriangle
argument_list|<
name|Clip
argument_list|>
argument_list|(
name|bits
operator|.
name|data
argument_list|()
argument_list|,
name|imgWidth
argument_list|,
name|imgHeight
argument_list|,
operator|&
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
argument_list|,
operator|&
name|p
argument_list|,
operator|&
name|intPrev
argument_list|,
name|interiorColor
argument_list|)
expr_stmt|;
break|break;
block|}
name|p
operator|.
name|rx
argument_list|()
operator|=
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|x
argument_list|()
operator|+
name|n
operator|.
name|x
argument_list|()
expr_stmt|;
name|p
operator|.
name|ry
argument_list|()
operator|=
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|y
argument_list|()
operator|+
name|n
operator|.
name|y
argument_list|()
expr_stmt|;
name|drawTriangle
argument_list|<
name|Clip
argument_list|>
argument_list|(
name|bits
operator|.
name|data
argument_list|()
argument_list|,
name|imgWidth
argument_list|,
name|imgHeight
argument_list|,
operator|&
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
argument_list|,
operator|&
name|p
argument_list|,
operator|&
name|intPrev
argument_list|,
name|interiorColor
argument_list|)
expr_stmt|;
name|intPrev
operator|=
name|p
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|QPoint
name|rn
argument_list|(
operator|(
name|n
operator|.
name|x
argument_list|()
operator|*
name|rotation
operator|.
name|x
argument_list|()
operator|+
name|n
operator|.
name|y
argument_list|()
operator|*
name|rotation
operator|.
name|y
argument_list|()
operator|)
operator|>>
literal|14
argument_list|,
operator|(
name|n
operator|.
name|y
argument_list|()
operator|*
name|rotation
operator|.
name|x
argument_list|()
operator|-
name|n
operator|.
name|x
argument_list|()
operator|*
name|rotation
operator|.
name|y
argument_list|()
operator|)
operator|>>
literal|14
argument_list|)
decl_stmt|;
name|n
operator|=
name|rn
expr_stmt|;
if|if
condition|(
name|n
operator|.
name|x
argument_list|()
operator|*
name|normals
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|y
argument_list|()
operator|-
name|n
operator|.
name|y
argument_list|()
operator|*
name|normals
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|x
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|p
operator|.
name|rx
argument_list|()
operator|=
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|x
argument_list|()
operator|+
name|normals
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|x
argument_list|()
expr_stmt|;
name|p
operator|.
name|ry
argument_list|()
operator|=
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|y
argument_list|()
operator|+
name|normals
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|y
argument_list|()
expr_stmt|;
name|drawTriangle
argument_list|<
name|NoClip
argument_list|>
argument_list|(
name|bits
operator|.
name|data
argument_list|()
argument_list|,
name|imgWidth
argument_list|,
name|imgHeight
argument_list|,
operator|&
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
argument_list|,
operator|&
name|p
argument_list|,
operator|&
name|intPrev
argument_list|,
name|interiorColor
argument_list|)
expr_stmt|;
break|break;
block|}
name|p
operator|.
name|rx
argument_list|()
operator|=
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|x
argument_list|()
operator|+
name|n
operator|.
name|x
argument_list|()
expr_stmt|;
name|p
operator|.
name|ry
argument_list|()
operator|=
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
operator|.
name|y
argument_list|()
operator|+
name|n
operator|.
name|y
argument_list|()
expr_stmt|;
name|drawTriangle
argument_list|<
name|NoClip
argument_list|>
argument_list|(
name|bits
operator|.
name|data
argument_list|()
argument_list|,
name|imgWidth
argument_list|,
name|imgHeight
argument_list|,
operator|&
name|vertices
operator|.
name|at
argument_list|(
name|prev
argument_list|)
argument_list|,
operator|&
name|p
argument_list|,
operator|&
name|intPrev
argument_list|,
name|interiorColor
argument_list|)
expr_stmt|;
name|intPrev
operator|=
name|p
expr_stmt|;
block|}
block|}
block|}
block|}
name|index
operator|=
name|end
operator|+
literal|1
expr_stmt|;
block|}
specifier|const
name|qint32
modifier|*
name|inLine
init|=
name|bits
operator|.
name|data
argument_list|()
decl_stmt|;
name|uchar
modifier|*
name|outLine
init|=
name|data
operator|->
name|data
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|imgHeight
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|imgWidth
condition|;
operator|++
name|x
operator|,
operator|++
name|inLine
operator|,
operator|++
name|outLine
control|)
operator|*
name|outLine
operator|=
name|uchar
argument_list|(
operator|(
literal|0x7f80
operator|-
operator|*
name|inLine
operator|)
operator|>>
literal|8
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|imageHasNarrowOutlines
specifier|static
name|bool
name|imageHasNarrowOutlines
parameter_list|(
specifier|const
name|QImage
modifier|&
name|im
parameter_list|)
block|{
if|if
condition|(
name|im
operator|.
name|isNull
argument_list|()
operator|||
name|im
operator|.
name|width
argument_list|()
operator|<
literal|1
operator|||
name|im
operator|.
name|height
argument_list|()
operator|<
literal|1
condition|)
return|return
literal|false
return|;
elseif|else
if|if
condition|(
name|im
operator|.
name|width
argument_list|()
operator|==
literal|1
operator|||
name|im
operator|.
name|height
argument_list|()
operator|==
literal|1
condition|)
return|return
literal|true
return|;
name|int
name|minHThick
init|=
literal|999
decl_stmt|;
name|int
name|minVThick
init|=
literal|999
decl_stmt|;
name|int
name|thick
init|=
literal|0
decl_stmt|;
name|bool
name|in
init|=
literal|false
decl_stmt|;
name|int
name|y
init|=
operator|(
name|im
operator|.
name|height
argument_list|()
operator|+
literal|1
operator|)
operator|/
literal|2
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|im
operator|.
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
name|int
name|a
init|=
name|qAlpha
argument_list|(
name|im
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|>
literal|127
condition|)
block|{
name|in
operator|=
literal|true
expr_stmt|;
operator|++
name|thick
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|in
condition|)
block|{
name|in
operator|=
literal|false
expr_stmt|;
name|minHThick
operator|=
name|qMin
argument_list|(
name|minHThick
argument_list|,
name|thick
argument_list|)
expr_stmt|;
name|thick
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|thick
operator|=
literal|0
expr_stmt|;
name|in
operator|=
literal|false
expr_stmt|;
name|int
name|x
init|=
operator|(
name|im
operator|.
name|width
argument_list|()
operator|+
literal|1
operator|)
operator|/
literal|2
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|im
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
name|int
name|a
init|=
name|qAlpha
argument_list|(
name|im
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|>
literal|127
condition|)
block|{
name|in
operator|=
literal|true
expr_stmt|;
operator|++
name|thick
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|in
condition|)
block|{
name|in
operator|=
literal|false
expr_stmt|;
name|minVThick
operator|=
name|qMin
argument_list|(
name|minVThick
argument_list|,
name|thick
argument_list|)
expr_stmt|;
name|thick
operator|=
literal|0
expr_stmt|;
block|}
block|}
return|return
name|minHThick
operator|==
literal|1
operator|||
name|minVThick
operator|==
literal|1
return|;
block|}
end_function
begin_function
DECL|function|qt_fontHasNarrowOutlines
name|bool
name|qt_fontHasNarrowOutlines
parameter_list|(
name|QFontEngine
modifier|*
name|fontEngine
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
name|fontEngine
operator|->
name|cloneWithSize
argument_list|(
name|QT_DISTANCEFIELD_DEFAULT_BASEFONTSIZE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fe
condition|)
return|return
literal|false
return|;
name|QImage
name|im
decl_stmt|;
specifier|const
name|glyph_t
name|glyph
init|=
name|fe
operator|->
name|glyphIndex
argument_list|(
literal|'O'
argument_list|)
decl_stmt|;
if|if
condition|(
name|glyph
operator|!=
literal|0
condition|)
name|im
operator|=
name|fe
operator|->
name|alphaMapForGlyph
argument_list|(
name|glyph
argument_list|,
name|QFixed
argument_list|()
argument_list|,
name|QTransform
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|fe
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|fe
expr_stmt|;
return|return
name|imageHasNarrowOutlines
argument_list|(
name|im
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_fontHasNarrowOutlines
name|bool
name|qt_fontHasNarrowOutlines
parameter_list|(
specifier|const
name|QRawFont
modifier|&
name|f
parameter_list|)
block|{
name|QRawFont
name|font
init|=
name|f
decl_stmt|;
name|font
operator|.
name|setPixelSize
argument_list|(
name|QT_DISTANCEFIELD_DEFAULT_BASEFONTSIZE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|font
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|QVector
argument_list|<
name|quint32
argument_list|>
name|glyphIndices
init|=
name|font
operator|.
name|glyphIndexesForString
argument_list|(
name|QLatin1String
argument_list|(
literal|"O"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|glyphIndices
operator|.
name|isEmpty
argument_list|()
operator|||
name|glyphIndices
index|[
literal|0
index|]
operator|==
literal|0
condition|)
return|return
literal|false
return|;
return|return
name|imageHasNarrowOutlines
argument_list|(
name|font
operator|.
name|alphaMapForGlyph
argument_list|(
name|glyphIndices
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QRawFont
operator|::
name|PixelAntialiasing
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QDistanceFieldData
name|QDistanceFieldData
operator|::
name|QDistanceFieldData
parameter_list|(
specifier|const
name|QDistanceFieldData
modifier|&
name|other
parameter_list|)
member_init_list|:
name|QSharedData
argument_list|(
name|other
argument_list|)
member_init_list|,
name|glyph
argument_list|(
name|other
operator|.
name|glyph
argument_list|)
member_init_list|,
name|width
argument_list|(
name|other
operator|.
name|width
argument_list|)
member_init_list|,
name|height
argument_list|(
name|other
operator|.
name|height
argument_list|)
member_init_list|,
name|nbytes
argument_list|(
name|other
operator|.
name|nbytes
argument_list|)
block|{
if|if
condition|(
name|nbytes
operator|&&
name|other
operator|.
name|data
condition|)
name|data
operator|=
operator|(
name|uchar
operator|*
operator|)
name|memcpy
argument_list|(
name|malloc
argument_list|(
name|nbytes
argument_list|)
argument_list|,
name|other
operator|.
name|data
argument_list|,
name|nbytes
argument_list|)
expr_stmt|;
else|else
name|data
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QDistanceFieldData
name|QDistanceFieldData
operator|::
name|~
name|QDistanceFieldData
parameter_list|()
block|{
name|free
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|create
name|QDistanceFieldData
modifier|*
name|QDistanceFieldData
operator|::
name|create
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
name|QDistanceFieldData
modifier|*
name|data
init|=
operator|new
name|QDistanceFieldData
decl_stmt|;
if|if
condition|(
name|size
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|data
operator|->
name|width
operator|=
name|size
operator|.
name|width
argument_list|()
expr_stmt|;
name|data
operator|->
name|height
operator|=
name|size
operator|.
name|height
argument_list|()
expr_stmt|;
comment|// pixel data stored as a 1-byte alpha value
name|data
operator|->
name|nbytes
operator|=
name|data
operator|->
name|width
operator|*
name|data
operator|->
name|height
expr_stmt|;
comment|// tightly packed
name|data
operator|->
name|data
operator|=
operator|(
name|uchar
operator|*
operator|)
name|malloc
argument_list|(
name|data
operator|->
name|nbytes
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
end_function
begin_function
DECL|function|create
name|QDistanceFieldData
modifier|*
name|QDistanceFieldData
operator|::
name|create
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|bool
name|doubleResolution
parameter_list|)
block|{
name|int
name|dfMargin
init|=
name|QT_DISTANCEFIELD_RADIUS
argument_list|(
name|doubleResolution
argument_list|)
operator|/
name|QT_DISTANCEFIELD_SCALE
argument_list|(
name|doubleResolution
argument_list|)
decl_stmt|;
name|int
name|glyphWidth
init|=
name|qCeil
argument_list|(
name|path
operator|.
name|boundingRect
argument_list|()
operator|.
name|width
argument_list|()
operator|/
name|QT_DISTANCEFIELD_SCALE
argument_list|(
name|doubleResolution
argument_list|)
argument_list|)
operator|+
name|dfMargin
operator|*
literal|2
decl_stmt|;
name|QDistanceFieldData
modifier|*
name|data
init|=
name|create
argument_list|(
name|QSize
argument_list|(
name|glyphWidth
argument_list|,
name|QT_DISTANCEFIELD_TILESIZE
argument_list|(
name|doubleResolution
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|makeDistanceField
argument_list|(
name|data
argument_list|,
name|path
argument_list|,
name|QT_DISTANCEFIELD_SCALE
argument_list|(
name|doubleResolution
argument_list|)
argument_list|,
name|QT_DISTANCEFIELD_RADIUS
argument_list|(
name|doubleResolution
argument_list|)
operator|/
name|QT_DISTANCEFIELD_SCALE
argument_list|(
name|doubleResolution
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
end_function
begin_constructor
DECL|function|QDistanceField
name|QDistanceField
operator|::
name|QDistanceField
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|new
name|QDistanceFieldData
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|QDistanceField
name|QDistanceField
operator|::
name|QDistanceField
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|QDistanceFieldData
operator|::
name|create
argument_list|(
name|QSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|QDistanceField
name|QDistanceField
operator|::
name|QDistanceField
parameter_list|(
specifier|const
name|QDistanceField
modifier|&
name|other
parameter_list|)
block|{
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QDistanceField
name|QDistanceField
operator|::
name|QDistanceField
parameter_list|(
specifier|const
name|QRawFont
modifier|&
name|font
parameter_list|,
name|glyph_t
name|glyph
parameter_list|,
name|bool
name|doubleResolution
parameter_list|)
block|{
name|setGlyph
argument_list|(
name|font
argument_list|,
name|glyph
argument_list|,
name|doubleResolution
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QDistanceField
name|QDistanceField
operator|::
name|QDistanceField
parameter_list|(
name|QFontEngine
modifier|*
name|fontEngine
parameter_list|,
name|glyph_t
name|glyph
parameter_list|,
name|bool
name|doubleResolution
parameter_list|)
block|{
name|setGlyph
argument_list|(
name|fontEngine
argument_list|,
name|glyph
argument_list|,
name|doubleResolution
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QDistanceField
name|QDistanceField
operator|::
name|QDistanceField
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|glyph_t
name|glyph
parameter_list|,
name|bool
name|doubleResolution
parameter_list|)
block|{
name|QPainterPath
name|dfPath
init|=
name|path
decl_stmt|;
name|dfPath
operator|.
name|translate
argument_list|(
operator|-
name|dfPath
operator|.
name|boundingRect
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|dfPath
operator|.
name|setFillRule
argument_list|(
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
name|d
operator|=
name|QDistanceFieldData
operator|::
name|create
argument_list|(
name|dfPath
argument_list|,
name|doubleResolution
argument_list|)
expr_stmt|;
name|d
operator|->
name|glyph
operator|=
name|glyph
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QDistanceField
name|QDistanceField
operator|::
name|QDistanceField
parameter_list|(
name|QDistanceFieldData
modifier|*
name|data
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|data
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|isNull
name|bool
name|QDistanceField
operator|::
name|isNull
parameter_list|()
specifier|const
block|{
return|return
operator|!
name|d
operator|->
name|data
return|;
block|}
end_function
begin_function
DECL|function|glyph
name|glyph_t
name|QDistanceField
operator|::
name|glyph
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|glyph
return|;
block|}
end_function
begin_function
DECL|function|setGlyph
name|void
name|QDistanceField
operator|::
name|setGlyph
parameter_list|(
specifier|const
name|QRawFont
modifier|&
name|font
parameter_list|,
name|glyph_t
name|glyph
parameter_list|,
name|bool
name|doubleResolution
parameter_list|)
block|{
name|QRawFont
name|renderFont
init|=
name|font
decl_stmt|;
name|renderFont
operator|.
name|setPixelSize
argument_list|(
name|QT_DISTANCEFIELD_BASEFONTSIZE
argument_list|(
name|doubleResolution
argument_list|)
operator|*
name|QT_DISTANCEFIELD_SCALE
argument_list|(
name|doubleResolution
argument_list|)
argument_list|)
expr_stmt|;
name|QPainterPath
name|path
init|=
name|renderFont
operator|.
name|pathForGlyph
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
name|path
operator|.
name|translate
argument_list|(
operator|-
name|path
operator|.
name|boundingRect
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|.
name|setFillRule
argument_list|(
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
name|d
operator|=
name|QDistanceFieldData
operator|::
name|create
argument_list|(
name|path
argument_list|,
name|doubleResolution
argument_list|)
expr_stmt|;
name|d
operator|->
name|glyph
operator|=
name|glyph
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setGlyph
name|void
name|QDistanceField
operator|::
name|setGlyph
parameter_list|(
name|QFontEngine
modifier|*
name|fontEngine
parameter_list|,
name|glyph_t
name|glyph
parameter_list|,
name|bool
name|doubleResolution
parameter_list|)
block|{
name|QFixedPoint
name|position
decl_stmt|;
name|QPainterPath
name|path
decl_stmt|;
name|fontEngine
operator|->
name|addGlyphsToPath
argument_list|(
operator|&
name|glyph
argument_list|,
operator|&
name|position
argument_list|,
literal|1
argument_list|,
operator|&
name|path
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|path
operator|.
name|translate
argument_list|(
operator|-
name|path
operator|.
name|boundingRect
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|.
name|setFillRule
argument_list|(
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
name|d
operator|=
name|QDistanceFieldData
operator|::
name|create
argument_list|(
name|path
argument_list|,
name|doubleResolution
argument_list|)
expr_stmt|;
name|d
operator|->
name|glyph
operator|=
name|glyph
expr_stmt|;
block|}
end_function
begin_function
DECL|function|width
name|int
name|QDistanceField
operator|::
name|width
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|width
return|;
block|}
end_function
begin_function
DECL|function|height
name|int
name|QDistanceField
operator|::
name|height
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|height
return|;
block|}
end_function
begin_function
DECL|function|copy
name|QDistanceField
name|QDistanceField
operator|::
name|copy
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isNull
argument_list|()
condition|)
return|return
name|QDistanceField
argument_list|()
return|;
if|if
condition|(
name|r
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QDistanceField
argument_list|(
operator|new
name|QDistanceFieldData
argument_list|(
operator|*
name|d
argument_list|)
argument_list|)
return|;
name|int
name|x
init|=
name|r
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|r
operator|.
name|y
argument_list|()
decl_stmt|;
name|int
name|w
init|=
name|r
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|r
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|dx
init|=
literal|0
decl_stmt|;
name|int
name|dy
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|w
operator|<=
literal|0
operator|||
name|h
operator|<=
literal|0
condition|)
return|return
name|QDistanceField
argument_list|()
return|;
name|QDistanceField
name|df
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
if|if
condition|(
name|df
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|df
return|;
if|if
condition|(
name|x
argument_list|<
literal|0
operator|||
name|y
argument_list|<
literal|0
operator|||
name|x
operator|+
name|w
argument_list|>
name|d
operator|->
name|width
operator|||
name|y
operator|+
name|h
argument_list|>
name|d
operator|->
name|height
condition|)
block|{
name|memset
argument_list|(
name|df
operator|.
name|d
operator|->
name|data
argument_list|,
literal|0
argument_list|,
name|df
operator|.
name|d
operator|->
name|nbytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|<
literal|0
condition|)
block|{
name|dx
operator|=
operator|-
name|x
expr_stmt|;
name|x
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|y
operator|<
literal|0
condition|)
block|{
name|dy
operator|=
operator|-
name|y
expr_stmt|;
name|y
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|int
name|pixels_to_copy
init|=
name|qMax
argument_list|(
name|w
operator|-
name|dx
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|>
name|d
operator|->
name|width
condition|)
name|pixels_to_copy
operator|=
literal|0
expr_stmt|;
elseif|else
if|if
condition|(
name|pixels_to_copy
operator|>
name|d
operator|->
name|width
operator|-
name|x
condition|)
name|pixels_to_copy
operator|=
name|d
operator|->
name|width
operator|-
name|x
expr_stmt|;
name|int
name|lines_to_copy
init|=
name|qMax
argument_list|(
name|h
operator|-
name|dy
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|y
operator|>
name|d
operator|->
name|height
condition|)
name|lines_to_copy
operator|=
literal|0
expr_stmt|;
elseif|else
if|if
condition|(
name|lines_to_copy
operator|>
name|d
operator|->
name|height
operator|-
name|y
condition|)
name|lines_to_copy
operator|=
name|d
operator|->
name|height
operator|-
name|y
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|src
init|=
name|d
operator|->
name|data
operator|+
name|x
operator|+
name|y
operator|*
name|d
operator|->
name|width
decl_stmt|;
name|uchar
modifier|*
name|dest
init|=
name|df
operator|.
name|d
operator|->
name|data
operator|+
name|dx
operator|+
name|dy
operator|*
name|df
operator|.
name|d
operator|->
name|width
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lines_to_copy
condition|;
operator|++
name|i
control|)
block|{
name|memcpy
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|pixels_to_copy
argument_list|)
expr_stmt|;
name|src
operator|+=
name|d
operator|->
name|width
expr_stmt|;
name|dest
operator|+=
name|df
operator|.
name|d
operator|->
name|width
expr_stmt|;
block|}
name|df
operator|.
name|d
operator|->
name|glyph
operator|=
name|d
operator|->
name|glyph
expr_stmt|;
return|return
name|df
return|;
block|}
end_function
begin_function
DECL|function|bits
name|uchar
modifier|*
name|QDistanceField
operator|::
name|bits
parameter_list|()
block|{
return|return
name|d
operator|->
name|data
return|;
block|}
end_function
begin_function
DECL|function|bits
specifier|const
name|uchar
modifier|*
name|QDistanceField
operator|::
name|bits
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|data
return|;
block|}
end_function
begin_function
DECL|function|constBits
specifier|const
name|uchar
modifier|*
name|QDistanceField
operator|::
name|constBits
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|data
return|;
block|}
end_function
begin_function
DECL|function|scanLine
name|uchar
modifier|*
name|QDistanceField
operator|::
name|scanLine
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|isNull
argument_list|()
condition|)
return|return
literal|0
return|;
name|Q_ASSERT
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|d
operator|->
name|height
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|data
operator|+
name|i
operator|*
name|d
operator|->
name|width
return|;
block|}
end_function
begin_function
DECL|function|scanLine
specifier|const
name|uchar
modifier|*
name|QDistanceField
operator|::
name|scanLine
parameter_list|(
name|int
name|i
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isNull
argument_list|()
condition|)
return|return
literal|0
return|;
name|Q_ASSERT
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|d
operator|->
name|height
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|data
operator|+
name|i
operator|*
name|d
operator|->
name|width
return|;
block|}
end_function
begin_function
DECL|function|constScanLine
specifier|const
name|uchar
modifier|*
name|QDistanceField
operator|::
name|constScanLine
parameter_list|(
name|int
name|i
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isNull
argument_list|()
condition|)
return|return
literal|0
return|;
name|Q_ASSERT
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|d
operator|->
name|height
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|data
operator|+
name|i
operator|*
name|d
operator|->
name|width
return|;
block|}
end_function
begin_function
DECL|function|toImage
name|QImage
name|QDistanceField
operator|::
name|toImage
parameter_list|(
name|QImage
operator|::
name|Format
name|format
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isNull
argument_list|()
condition|)
return|return
name|QImage
argument_list|()
return|;
name|QImage
name|image
argument_list|(
name|d
operator|->
name|width
argument_list|,
name|d
operator|->
name|height
argument_list|,
name|qt_depthForFormat
argument_list|(
name|format
argument_list|)
operator|==
literal|8
condition|?
name|format
else|:
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|image
return|;
if|if
condition|(
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|8
condition|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|d
operator|->
name|height
condition|;
operator|++
name|y
control|)
name|memcpy
argument_list|(
name|image
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
argument_list|,
name|scanLine
argument_list|(
name|y
argument_list|)
argument_list|,
name|d
operator|->
name|width
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|d
operator|->
name|height
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|d
operator|->
name|width
condition|;
operator|++
name|x
control|)
block|{
name|uint
name|alpha
init|=
operator|*
operator|(
name|d
operator|->
name|data
operator|+
name|x
operator|+
name|y
operator|*
name|d
operator|->
name|width
operator|)
decl_stmt|;
name|image
operator|.
name|setPixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|alpha
operator|<<
literal|24
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|image
operator|.
name|format
argument_list|()
operator|!=
name|format
condition|)
name|image
operator|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
return|return
name|image
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
