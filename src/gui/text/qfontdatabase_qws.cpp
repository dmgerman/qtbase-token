begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdir.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qscreen_qws.h"
end_include
begin_comment
comment|//so we can check for rotation
end_comment
begin_include
include|#
directive|include
file|"qwindowsystem_qws.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qlibraryinfo.h"
end_include
begin_include
include|#
directive|include
file|"qabstractfileengine.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qsettings.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_FREETYPE
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qfontengine_ft_p.h"
end_include
begin_include
include|#
directive|include
file|<ft2build.h>
end_include
begin_include
include|#
directive|include
include|FT_FREETYPE_H
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qfontengine_qpf_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qfactoryloader_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qcore_unix_p.h"
end_include
begin_comment
comment|// overrides QT_OPEN
end_comment
begin_include
include|#
directive|include
file|"qabstractfontengine_qws.h"
end_include
begin_include
include|#
directive|include
file|"qabstractfontengine_p.h"
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_comment
comment|// for mmap
end_comment
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_include
include|#
directive|include
file|<sys/mman.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_FONTS_ARE_RESOURCES
end_ifdef
begin_include
include|#
directive|include
file|<qresource.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
name|Q_GLOBAL_STATIC_WITH_ARGS
argument_list|(
name|QFactoryLoader
argument_list|,
name|loader
argument_list|,
operator|(
name|QFontEngineFactoryInterface_iid
operator|,
name|QLatin1String
argument_list|(
literal|"/fontengines"
argument_list|)
operator|,
name|Qt
operator|::
name|CaseInsensitive
operator|)
argument_list|)
endif|#
directive|endif
decl|const
DECL|variable|DatabaseVersion
name|quint8
name|DatabaseVersion
init|=
literal|4
decl_stmt|;
end_decl_stmt
begin_comment
comment|// QFontDatabasePrivate::addFont() went into qfontdatabase.cpp
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_QPF2
end_ifndef
begin_function
DECL|function|addQPF2File
name|void
name|QFontDatabasePrivate
operator|::
name|addQPF2File
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|file
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_FONTS_ARE_RESOURCES
name|struct
name|stat
name|st
decl_stmt|;
if|if
condition|(
name|stat
argument_list|(
name|file
operator|.
name|constData
argument_list|()
argument_list|,
operator|&
name|st
argument_list|)
condition|)
return|return;
name|int
name|f
init|=
name|QT_OPEN
argument_list|(
name|file
argument_list|,
name|O_RDONLY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|<
literal|0
condition|)
return|return;
specifier|const
name|uchar
modifier|*
name|data
init|=
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|mmap
argument_list|(
literal|0
argument_list|,
name|st
operator|.
name|st_size
argument_list|,
name|PROT_READ
argument_list|,
name|MAP_SHARED
argument_list|,
name|f
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|int
name|dataSize
init|=
name|st
operator|.
name|st_size
decl_stmt|;
else|#
directive|else
name|QResource
name|res
argument_list|(
name|QLatin1String
argument_list|(
name|file
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|data
init|=
name|res
operator|.
name|data
argument_list|()
decl_stmt|;
specifier|const
name|int
name|dataSize
init|=
name|res
operator|.
name|size
argument_list|()
decl_stmt|;
comment|//qDebug()<< "addQPF2File"<< file<< data;
endif|#
directive|endif
if|if
condition|(
name|data
operator|&&
name|data
operator|!=
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|MAP_FAILED
condition|)
block|{
if|if
condition|(
name|QFontEngineQPF
operator|::
name|verifyHeader
argument_list|(
name|data
argument_list|,
name|dataSize
argument_list|)
condition|)
block|{
name|QString
name|fontName
init|=
name|QFontEngineQPF
operator|::
name|extractHeaderField
argument_list|(
name|data
argument_list|,
name|QFontEngineQPF
operator|::
name|Tag_FontName
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|pixelSize
init|=
name|QFontEngineQPF
operator|::
name|extractHeaderField
argument_list|(
name|data
argument_list|,
name|QFontEngineQPF
operator|::
name|Tag_PixelSize
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QVariant
name|weight
init|=
name|QFontEngineQPF
operator|::
name|extractHeaderField
argument_list|(
name|data
argument_list|,
name|QFontEngineQPF
operator|::
name|Tag_Weight
argument_list|)
decl_stmt|;
name|QVariant
name|style
init|=
name|QFontEngineQPF
operator|::
name|extractHeaderField
argument_list|(
name|data
argument_list|,
name|QFontEngineQPF
operator|::
name|Tag_Style
argument_list|)
decl_stmt|;
name|QByteArray
name|writingSystemBits
init|=
name|QFontEngineQPF
operator|::
name|extractHeaderField
argument_list|(
name|data
argument_list|,
name|QFontEngineQPF
operator|::
name|Tag_WritingSystems
argument_list|)
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fontName
operator|.
name|isEmpty
argument_list|()
operator|&&
name|pixelSize
condition|)
block|{
name|int
name|fontWeight
init|=
literal|50
decl_stmt|;
if|if
condition|(
name|weight
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
operator|||
name|weight
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|UInt
condition|)
name|fontWeight
operator|=
name|weight
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|bool
name|italic
init|=
cast|static_cast
argument_list|<
name|QFont
operator|::
name|Style
argument_list|>
argument_list|(
name|style
operator|.
name|toInt
argument_list|()
argument_list|)
operator|&
name|QFont
operator|::
name|StyleItalic
decl_stmt|;
name|QList
argument_list|<
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|>
name|writingSystems
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writingSystemBits
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|uchar
name|currentByte
init|=
name|writingSystemBits
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|8
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|currentByte
operator|&
literal|1
condition|)
name|writingSystems
operator|<<
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|(
name|i
operator|*
literal|8
operator|+
name|j
argument_list|)
expr_stmt|;
name|currentByte
operator|>>=
literal|1
expr_stmt|;
block|}
block|}
name|addFont
argument_list|(
name|fontName
argument_list|,
comment|/*foundry*/
literal|"prerendered"
argument_list|,
name|fontWeight
argument_list|,
name|italic
argument_list|,
name|pixelSize
argument_list|,
name|file
argument_list|,
comment|/*fileIndex*/
literal|0
argument_list|,
comment|/*antialiased*/
literal|true
argument_list|,
name|writingSystems
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|qDebug
argument_list|()
operator|<<
literal|"header verification of QPF2 font"
operator|<<
name|file
operator|<<
literal|"failed. maybe it is corrupt?"
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_FONTS_ARE_RESOURCES
name|munmap
argument_list|(
operator|(
name|void
operator|*
operator|)
name|data
argument_list|,
name|st
operator|.
name|st_size
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
ifndef|#
directive|ifndef
name|QT_FONTS_ARE_RESOURCES
name|QT_CLOSE
argument_list|(
name|f
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_QPF2
end_comment
begin_comment
comment|// QFontDatabasePrivate::addTTFile() went into qfontdatabase.cpp
end_comment
begin_function_decl
specifier|static
name|void
name|registerFont
parameter_list|(
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
modifier|*
name|fnt
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|QString
name|qws_fontCacheDir
parameter_list|()
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_FONTS_ARE_RESOURCES
end_ifndef
begin_function
DECL|function|loadFromCache
name|bool
name|QFontDatabasePrivate
operator|::
name|loadFromCache
parameter_list|(
specifier|const
name|QString
modifier|&
name|fontPath
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_QWS
specifier|const
name|bool
name|weAreTheServer
init|=
name|QWSServer
operator|::
name|instance
argument_list|()
decl_stmt|;
else|#
directive|else
specifier|const
name|bool
name|weAreTheServer
init|=
literal|true
decl_stmt|;
comment|// assume single-process
endif|#
directive|endif
name|QString
name|fontDirFile
init|=
name|fontPath
operator|+
name|QLatin1String
argument_list|(
literal|"/fontdir"
argument_list|)
decl_stmt|;
name|QFile
name|binaryDb
argument_list|(
name|qws_fontCacheDir
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/fontdb"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|weAreTheServer
condition|)
block|{
name|QDateTime
name|dbTimeStamp
init|=
name|QFileInfo
argument_list|(
name|binaryDb
operator|.
name|fileName
argument_list|()
argument_list|)
operator|.
name|lastModified
argument_list|()
decl_stmt|;
name|QDateTime
name|fontPathTimeStamp
init|=
name|QFileInfo
argument_list|(
name|fontPath
argument_list|)
operator|.
name|lastModified
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbTimeStamp
operator|<
name|fontPathTimeStamp
condition|)
return|return
literal|false
return|;
comment|// let the caller create the cache
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|fontDirFile
argument_list|)
condition|)
block|{
name|QDateTime
name|fontDirTimeStamp
init|=
name|QFileInfo
argument_list|(
name|fontDirFile
argument_list|)
operator|.
name|lastModified
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbTimeStamp
operator|<
name|fontDirTimeStamp
condition|)
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
operator|!
name|binaryDb
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
if|if
condition|(
name|weAreTheServer
condition|)
return|return
literal|false
return|;
comment|// let the caller create the cache
name|qFatal
argument_list|(
literal|"QFontDatabase::loadFromCache: Could not open font database cache!"
argument_list|)
expr_stmt|;
block|}
name|QDataStream
name|stream
argument_list|(
operator|&
name|binaryDb
argument_list|)
decl_stmt|;
name|quint8
name|version
init|=
literal|0
decl_stmt|;
name|quint8
name|dataStreamVersion
init|=
literal|0
decl_stmt|;
name|stream
operator|>>
name|version
operator|>>
name|dataStreamVersion
expr_stmt|;
if|if
condition|(
name|version
operator|!=
name|DatabaseVersion
operator|||
name|dataStreamVersion
operator|!=
name|stream
operator|.
name|version
argument_list|()
condition|)
block|{
if|if
condition|(
name|weAreTheServer
condition|)
return|return
literal|false
return|;
comment|// let the caller create the cache
name|qFatal
argument_list|(
literal|"QFontDatabase::loadFromCache: Wrong version of the font database cache detected. Found %d/%d expected %d/%d"
argument_list|,
name|version
argument_list|,
name|dataStreamVersion
argument_list|,
name|DatabaseVersion
argument_list|,
name|stream
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QString
name|originalFontPath
decl_stmt|;
name|stream
operator|>>
name|originalFontPath
expr_stmt|;
if|if
condition|(
name|originalFontPath
operator|!=
name|fontPath
condition|)
block|{
if|if
condition|(
name|weAreTheServer
condition|)
return|return
literal|false
return|;
comment|// let the caller create the cache
name|qFatal
argument_list|(
literal|"QFontDatabase::loadFromCache: Font path doesn't match. Found %s in database, expected %s"
argument_list|,
name|qPrintable
argument_list|(
name|originalFontPath
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|fontPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QString
name|familyname
decl_stmt|;
name|stream
operator|>>
name|familyname
expr_stmt|;
comment|//qDebug()<< "populating database from"<< binaryDb.fileName();
while|while
condition|(
operator|!
name|familyname
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|stream
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QString
name|foundryname
decl_stmt|;
name|int
name|weight
decl_stmt|;
name|quint8
name|italic
decl_stmt|;
name|int
name|pixelSize
decl_stmt|;
name|QByteArray
name|file
decl_stmt|;
name|int
name|fileIndex
decl_stmt|;
name|quint8
name|antialiased
decl_stmt|;
name|quint8
name|writingSystemCount
decl_stmt|;
name|QList
argument_list|<
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|>
name|writingSystems
decl_stmt|;
name|stream
operator|>>
name|foundryname
operator|>>
name|weight
operator|>>
name|italic
operator|>>
name|pixelSize
operator|>>
name|file
operator|>>
name|fileIndex
operator|>>
name|antialiased
operator|>>
name|writingSystemCount
expr_stmt|;
for|for
control|(
name|quint8
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writingSystemCount
condition|;
operator|++
name|i
control|)
block|{
name|quint8
name|ws
decl_stmt|;
name|stream
operator|>>
name|ws
expr_stmt|;
name|writingSystems
operator|.
name|append
argument_list|(
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|(
name|ws
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addFont
argument_list|(
name|familyname
argument_list|,
name|foundryname
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|weight
argument_list|,
name|italic
argument_list|,
name|pixelSize
argument_list|,
name|file
argument_list|,
name|fileIndex
argument_list|,
name|antialiased
argument_list|,
name|writingSystems
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|familyname
expr_stmt|;
block|}
name|stream
operator|>>
name|fallbackFamilies
expr_stmt|;
comment|//qDebug()<< "fallback families from cache:"<< fallbackFamilies;
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_FONTS_ARE_RESOURCES
end_comment
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|qwsFontPath
specifier|static
name|QString
name|qwsFontPath
parameter_list|()
block|{
name|QString
name|fontpath
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"QT_QWS_FONTDIR"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontpath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_FONTS_ARE_RESOURCES
name|fontpath
operator|=
name|QLatin1String
argument_list|(
literal|":/qt/fonts"
argument_list|)
expr_stmt|;
else|#
directive|else
ifndef|#
directive|ifndef
name|QT_NO_SETTINGS
name|fontpath
operator|=
name|QLibraryInfo
operator|::
name|location
argument_list|(
name|QLibraryInfo
operator|::
name|LibrariesPath
argument_list|)
expr_stmt|;
name|fontpath
operator|+=
name|QLatin1String
argument_list|(
literal|"/fonts"
argument_list|)
expr_stmt|;
else|#
directive|else
name|fontpath
operator|=
name|QLatin1String
argument_list|(
literal|"/lib/fonts"
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
comment|//QT_FONTS_ARE_RESOURCES
block|}
return|return
name|fontpath
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QFONTDATABASE_DEBUG
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_FONTS_ARE_RESOURCES
argument_list|)
end_if
begin_class
DECL|class|FriendlyResource
class|class
name|FriendlyResource
super|:
specifier|public
name|QResource
block|{
public|public:
DECL|function|isDir
name|bool
name|isDir
parameter_list|()
specifier|const
block|{
return|return
name|QResource
operator|::
name|isDir
argument_list|()
return|;
block|}
DECL|function|isFile
name|bool
name|isFile
parameter_list|()
specifier|const
block|{
return|return
name|QResource
operator|::
name|isFile
argument_list|()
return|;
block|}
DECL|function|children
name|QStringList
name|children
parameter_list|()
specifier|const
block|{
return|return
name|QResource
operator|::
name|children
argument_list|()
return|;
block|}
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|initializeDb
specifier|static
name|void
name|initializeDb
parameter_list|()
block|{
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|||
name|db
operator|->
name|count
condition|)
return|return;
name|QString
name|fontpath
init|=
name|qwsFontPath
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_FONTS_ARE_RESOURCES
name|QString
name|fontDirFile
init|=
name|fontpath
operator|+
name|QLatin1String
argument_list|(
literal|"/fontdir"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|fontpath
argument_list|)
condition|)
block|{
name|qFatal
argument_list|(
literal|"QFontDatabase: Cannot find font directory %s - is Qt installed correctly?"
argument_list|,
name|fontpath
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|const
name|bool
name|loaded
init|=
name|db
operator|->
name|loadFromCache
argument_list|(
name|fontpath
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|->
name|reregisterAppFonts
condition|)
block|{
name|db
operator|->
name|reregisterAppFonts
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|db
operator|->
name|applicationFonts
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
operator|!
name|db
operator|->
name|applicationFonts
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|families
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|registerFont
argument_list|(
operator|&
name|db
operator|->
name|applicationFonts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|loaded
condition|)
return|return;
name|QString
name|dbFileName
init|=
name|qws_fontCacheDir
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/fontdb"
argument_list|)
decl_stmt|;
name|QFile
name|binaryDb
argument_list|(
name|dbFileName
operator|+
name|QLatin1String
argument_list|(
literal|".tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|binaryDb
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
expr_stmt|;
name|db
operator|->
name|stream
operator|=
operator|new
name|QDataStream
argument_list|(
operator|&
name|binaryDb
argument_list|)
expr_stmt|;
operator|*
name|db
operator|->
name|stream
operator|<<
name|DatabaseVersion
operator|<<
name|quint8
argument_list|(
name|db
operator|->
name|stream
operator|->
name|version
argument_list|()
argument_list|)
operator|<<
name|fontpath
expr_stmt|;
comment|//    qDebug()<< "creating binary database at"<< binaryDb.fileName();
comment|// Load in font definition file
name|FILE
modifier|*
name|fontdef
init|=
name|fopen
argument_list|(
name|fontDirFile
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"r"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontdef
condition|)
block|{
name|char
name|buf
index|[
literal|200
index|]
init|=
literal|""
decl_stmt|;
name|char
name|name
index|[
literal|200
index|]
init|=
literal|""
decl_stmt|;
name|char
name|render
index|[
literal|200
index|]
init|=
literal|""
decl_stmt|;
name|char
name|file
index|[
literal|200
index|]
init|=
literal|""
decl_stmt|;
name|char
name|isitalic
index|[
literal|10
index|]
init|=
literal|""
decl_stmt|;
name|char
name|flags
index|[
literal|10
index|]
init|=
literal|""
decl_stmt|;
do|do
block|{
name|fgets
argument_list|(
name|buf
argument_list|,
literal|200
argument_list|,
name|fontdef
argument_list|)
expr_stmt|;
if|if
condition|(
name|buf
index|[
literal|0
index|]
operator|!=
literal|'#'
condition|)
block|{
name|int
name|weight
init|=
literal|50
decl_stmt|;
name|int
name|size
init|=
literal|0
decl_stmt|;
name|sscanf
argument_list|(
name|buf
argument_list|,
literal|"%s %s %s %s %d %d %s"
argument_list|,
name|name
argument_list|,
name|file
argument_list|,
name|render
argument_list|,
name|isitalic
argument_list|,
operator|&
name|weight
argument_list|,
operator|&
name|size
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|QString
name|filename
decl_stmt|;
if|if
condition|(
name|file
index|[
literal|0
index|]
operator|!=
literal|'/'
condition|)
name|filename
operator|.
name|append
argument_list|(
name|fontpath
argument_list|)
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
name|filename
operator|+=
name|QLatin1String
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|bool
name|italic
init|=
name|isitalic
index|[
literal|0
index|]
operator|==
literal|'y'
decl_stmt|;
name|bool
name|smooth
init|=
name|QByteArray
argument_list|(
name|flags
argument_list|)
operator|.
name|contains
argument_list|(
literal|'s'
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
index|[
literal|0
index|]
operator|&&
name|QFile
operator|::
name|exists
argument_list|(
name|filename
argument_list|)
condition|)
name|db
operator|->
name|addFont
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|name
argument_list|)
argument_list|,
comment|/*foundry*/
literal|""
argument_list|,
name|weight
argument_list|,
name|italic
argument_list|,
name|size
operator|/
literal|10
argument_list|,
name|QFile
operator|::
name|encodeName
argument_list|(
name|filename
argument_list|)
argument_list|,
comment|/*fileIndex*/
literal|0
argument_list|,
name|smooth
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|!
name|feof
argument_list|(
name|fontdef
argument_list|)
condition|)
do|;
name|fclose
argument_list|(
name|fontdef
argument_list|)
expr_stmt|;
block|}
name|QDir
name|dir
argument_list|(
name|fontpath
argument_list|,
name|QLatin1String
argument_list|(
literal|"*.qpf"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|int
argument_list|(
name|dir
operator|.
name|count
argument_list|()
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|int
name|u0
init|=
name|dir
index|[
name|i
index|]
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|u1
init|=
name|dir
index|[
name|i
index|]
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
argument_list|,
name|u0
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|u2
init|=
name|dir
index|[
name|i
index|]
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
argument_list|,
name|u1
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|u3
init|=
name|dir
index|[
name|i
index|]
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|,
name|u1
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|u2
operator|<
literal|0
condition|)
name|u2
operator|=
name|u3
expr_stmt|;
name|QString
name|familyname
init|=
name|dir
index|[
name|i
index|]
operator|.
name|left
argument_list|(
name|u0
argument_list|)
decl_stmt|;
name|int
name|pixelSize
init|=
name|dir
index|[
name|i
index|]
operator|.
name|mid
argument_list|(
name|u0
operator|+
literal|1
argument_list|,
name|u1
operator|-
name|u0
operator|-
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
operator|/
literal|10
decl_stmt|;
name|bool
name|italic
init|=
name|dir
index|[
name|i
index|]
operator|.
name|mid
argument_list|(
name|u2
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"i"
argument_list|)
decl_stmt|;
name|int
name|weight
init|=
name|dir
index|[
name|i
index|]
operator|.
name|mid
argument_list|(
name|u1
operator|+
literal|1
argument_list|,
name|u2
operator|-
name|u1
operator|-
literal|1
operator|-
operator|(
name|italic
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|db
operator|->
name|addFont
argument_list|(
name|familyname
argument_list|,
comment|/*foundry*/
literal|"qt"
argument_list|,
name|weight
argument_list|,
name|italic
argument_list|,
name|pixelSize
argument_list|,
name|QFile
operator|::
name|encodeName
argument_list|(
name|dir
operator|.
name|absoluteFilePath
argument_list|(
name|dir
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|,
comment|/*fileIndex*/
literal|0
argument_list|,
comment|/*antialiased*/
literal|true
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_FREETYPE
name|dir
operator|.
name|setNameFilters
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"*.ttf"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"*.ttc"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"*.pfa"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"*.pfb"
argument_list|)
argument_list|)
expr_stmt|;
name|dir
operator|.
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|int
argument_list|(
name|dir
operator|.
name|count
argument_list|()
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QByteArray
name|file
init|=
name|QFile
operator|::
name|encodeName
argument_list|(
name|dir
operator|.
name|absoluteFilePath
argument_list|(
name|dir
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
comment|//        qDebug()<< "looking at"<< file;
name|db
operator|->
name|addTTFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QWS_QPF2
name|dir
operator|.
name|setNameFilters
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"*.qpf2"
argument_list|)
argument_list|)
expr_stmt|;
name|dir
operator|.
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|int
argument_list|(
name|dir
operator|.
name|count
argument_list|()
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QByteArray
name|file
init|=
name|QFile
operator|::
name|encodeName
argument_list|(
name|dir
operator|.
name|absoluteFilePath
argument_list|(
name|dir
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
comment|//        qDebug()<< "looking at"<< file;
name|db
operator|->
name|addQPF2File
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
else|#
directive|else
comment|//QT_FONTS_ARE_RESOURCES
ifdef|#
directive|ifdef
name|QFONTDATABASE_DEBUG
block|{
name|QResource
name|fontdir
argument_list|(
name|fontpath
argument_list|)
decl_stmt|;
name|FriendlyResource
modifier|*
name|fr
init|=
cast|static_cast
argument_list|<
name|FriendlyResource
operator|*
argument_list|>
argument_list|(
operator|&
name|fontdir
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"fontdir"
operator|<<
name|fr
operator|->
name|isValid
argument_list|()
operator|<<
name|fr
operator|->
name|isDir
argument_list|()
operator|<<
name|fr
operator|->
name|children
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QWS_QPF2
name|QDir
name|dir
argument_list|(
name|fontpath
argument_list|,
name|QLatin1String
argument_list|(
literal|"*.qpf2"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|int
argument_list|(
name|dir
operator|.
name|count
argument_list|()
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QByteArray
name|file
init|=
name|QFile
operator|::
name|encodeName
argument_list|(
name|dir
operator|.
name|absoluteFilePath
argument_list|(
name|dir
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
comment|//qDebug()<< "looking at"<< file;
name|db
operator|->
name|addQPF2File
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
endif|#
directive|endif
comment|//QT_FONTS_ARE_RESOURCES
ifdef|#
directive|ifdef
name|QFONTDATABASE_DEBUG
comment|// print the database
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|db
operator|->
name|count
condition|;
name|f
operator|++
control|)
block|{
name|QtFontFamily
modifier|*
name|family
init|=
name|db
operator|->
name|families
index|[
name|f
index|]
decl_stmt|;
name|FD_DEBUG
argument_list|(
literal|"'%s' %s"
argument_list|,
name|qPrintable
argument_list|(
name|family
operator|->
name|name
argument_list|)
argument_list|,
operator|(
name|family
operator|->
name|fixedPitch
condition|?
literal|"fixed"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
block|for (int i = 0; i< QFont::LastPrivateScript; ++i) {             FD_DEBUG("\t%s: %s", qPrintable(QFontDatabase::scriptName((QFont::Script) i)),                      ((family->scripts[i]& QtFontFamily::Supported) ? "Supported" :                       (family->scripts[i]& QtFontFamily::UnSupported) == QtFontFamily::UnSupported ?                       "UnSupported" : "Unknown"));         }
endif|#
directive|endif
for|for
control|(
name|int
name|fd
init|=
literal|0
init|;
name|fd
operator|<
name|family
operator|->
name|count
condition|;
name|fd
operator|++
control|)
block|{
name|QtFontFoundry
modifier|*
name|foundry
init|=
name|family
operator|->
name|foundries
index|[
name|fd
index|]
decl_stmt|;
name|FD_DEBUG
argument_list|(
literal|"\t\t'%s'"
argument_list|,
name|qPrintable
argument_list|(
name|foundry
operator|->
name|name
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|foundry
operator|->
name|count
condition|;
name|s
operator|++
control|)
block|{
name|QtFontStyle
modifier|*
name|style
init|=
name|foundry
operator|->
name|styles
index|[
name|s
index|]
decl_stmt|;
name|FD_DEBUG
argument_list|(
literal|"\t\t\tstyle: style=%d weight=%d\n"
literal|"\t\t\tstretch=%d"
argument_list|,
name|style
operator|->
name|key
operator|.
name|style
argument_list|,
name|style
operator|->
name|key
operator|.
name|weight
argument_list|,
name|style
operator|->
name|key
operator|.
name|stretch
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
operator|->
name|smoothScalable
condition|)
name|FD_DEBUG
argument_list|(
literal|"\t\t\t\tsmooth scalable"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|style
operator|->
name|bitmapScalable
condition|)
name|FD_DEBUG
argument_list|(
literal|"\t\t\t\tbitmap scalable"
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
operator|->
name|pixelSizes
condition|)
block|{
name|FD_DEBUG
argument_list|(
literal|"\t\t\t\t%d pixel sizes"
argument_list|,
name|style
operator|->
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|z
init|=
literal|0
init|;
name|z
operator|<
name|style
operator|->
name|count
condition|;
operator|++
name|z
control|)
block|{
name|QtFontSize
modifier|*
name|size
init|=
name|style
operator|->
name|pixelSizes
operator|+
name|z
decl_stmt|;
name|FD_DEBUG
argument_list|(
literal|"\t\t\t\t  size %5d"
argument_list|,
name|size
operator|->
name|pixelSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
endif|#
directive|endif
comment|// QFONTDATABASE_DEBUG
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
name|QStringList
name|pluginFoundries
init|=
name|loader
argument_list|()
operator|->
name|keys
argument_list|()
decl_stmt|;
comment|//    qDebug()<< "plugin foundries:"<< pluginFoundries;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pluginFoundries
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|foundry
argument_list|(
name|pluginFoundries
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|QFontEngineFactoryInterface
modifier|*
name|factory
init|=
name|qobject_cast
argument_list|<
name|QFontEngineFactoryInterface
operator|*
argument_list|>
argument_list|(
name|loader
argument_list|()
operator|->
name|instance
argument_list|(
name|foundry
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|factory
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Could not load plugin for foundry"
operator|<<
name|foundry
expr_stmt|;
continue|continue;
block|}
name|QList
argument_list|<
name|QFontEngineInfo
argument_list|>
name|fonts
init|=
name|factory
operator|->
name|availableFontEngines
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fonts
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFontEngineInfo
name|info
init|=
name|fonts
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|weight
init|=
name|info
operator|.
name|weight
argument_list|()
decl_stmt|;
if|if
condition|(
name|weight
operator|<=
literal|0
condition|)
name|weight
operator|=
name|QFont
operator|::
name|Normal
expr_stmt|;
name|db
operator|->
name|addFont
argument_list|(
name|info
operator|.
name|family
argument_list|()
argument_list|,
name|foundry
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|weight
argument_list|,
name|info
operator|.
name|style
argument_list|()
operator|!=
name|QFont
operator|::
name|StyleNormal
argument_list|,
name|qRound
argument_list|(
name|info
operator|.
name|pixelSize
argument_list|()
argument_list|)
argument_list|,
comment|/*file*/
name|QByteArray
argument_list|()
argument_list|,
comment|/*fileIndex*/
literal|0
argument_list|,
comment|/*antiAliased*/
literal|true
argument_list|,
name|info
operator|.
name|writingSystems
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_FONTS_ARE_RESOURCES
comment|// the empty string/familyname signifies the end of the font list.
operator|*
name|db
operator|->
name|stream
operator|<<
name|QString
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|{
name|bool
name|coveredWritingSystems
index|[
name|QFontDatabase
operator|::
name|WritingSystemsCount
index|]
init|=
block|{
literal|0
block|}
decl_stmt|;
name|db
operator|->
name|fallbackFamilies
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|db
operator|->
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QtFontFamily
modifier|*
name|family
init|=
name|db
operator|->
name|families
index|[
name|i
index|]
decl_stmt|;
name|bool
name|add
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|family
operator|->
name|count
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|family
operator|->
name|bogusWritingSystems
condition|)
continue|continue;
for|for
control|(
name|int
name|ws
init|=
literal|1
init|;
name|ws
operator|<
name|QFontDatabase
operator|::
name|WritingSystemsCount
condition|;
operator|++
name|ws
control|)
block|{
if|if
condition|(
name|coveredWritingSystems
index|[
name|ws
index|]
condition|)
continue|continue;
if|if
condition|(
name|family
operator|->
name|writingSystems
index|[
name|ws
index|]
operator|&
name|QtFontFamily
operator|::
name|Supported
condition|)
block|{
name|coveredWritingSystems
index|[
name|ws
index|]
operator|=
literal|true
expr_stmt|;
name|add
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|add
condition|)
name|db
operator|->
name|fallbackFamilies
operator|<<
name|family
operator|->
name|name
expr_stmt|;
block|}
comment|//qDebug()<< "fallbacks on the server:"<< db->fallbackFamilies;
ifndef|#
directive|ifndef
name|QT_FONTS_ARE_RESOURCES
operator|*
name|db
operator|->
name|stream
operator|<<
name|db
operator|->
name|fallbackFamilies
expr_stmt|;
endif|#
directive|endif
block|}
ifndef|#
directive|ifndef
name|QT_FONTS_ARE_RESOURCES
operator|delete
name|db
operator|->
name|stream
expr_stmt|;
name|db
operator|->
name|stream
operator|=
literal|0
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|dbFileName
argument_list|)
expr_stmt|;
name|binaryDb
operator|.
name|rename
argument_list|(
name|dbFileName
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|// called from qwindowsystem_qws.cpp
end_comment
begin_function
DECL|function|qt_qws_init_fontdb
name|void
name|qt_qws_init_fontdb
parameter_list|()
block|{
name|initializeDb
argument_list|()
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SETTINGS
end_ifndef
begin_comment
comment|// called from qapplication_qws.cpp
end_comment
begin_function
DECL|function|qt_applyFontDatabaseSettings
name|void
name|qt_applyFontDatabaseSettings
parameter_list|(
specifier|const
name|QSettings
modifier|&
name|settings
parameter_list|)
block|{
name|initializeDb
argument_list|()
expr_stmt|;
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|db
operator|->
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QtFontFamily
modifier|*
name|family
init|=
name|db
operator|->
name|families
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|settings
operator|.
name|contains
argument_list|(
name|family
operator|->
name|name
argument_list|)
condition|)
name|family
operator|->
name|fallbackFamilies
operator|=
name|settings
operator|.
name|value
argument_list|(
name|family
operator|->
name|name
argument_list|)
operator|.
name|toStringList
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"Global Fallbacks"
argument_list|)
argument_list|)
condition|)
name|db
operator|->
name|fallbackFamilies
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"Global Fallbacks"
argument_list|)
argument_list|)
operator|.
name|toStringList
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SETTINGS
end_comment
begin_function
DECL|function|load
specifier|static
specifier|inline
name|void
name|load
parameter_list|(
specifier|const
name|QString
modifier|&
init|=
name|QString
argument_list|()
parameter_list|,
name|int
init|=
operator|-
literal|1
parameter_list|)
block|{
name|initializeDb
argument_list|()
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FREETYPE
end_ifndef
begin_if
if|#
directive|if
operator|(
name|FREETYPE_MAJOR
operator|*
literal|10000
operator|+
name|FREETYPE_MINOR
operator|*
literal|100
operator|+
name|FREETYPE_PATCH
operator|)
operator|>=
literal|20105
end_if
begin_define
DECL|macro|X_SIZE
define|#
directive|define
name|X_SIZE
parameter_list|(
name|face
parameter_list|,
name|i
parameter_list|)
value|((face)->available_sizes[i].x_ppem)
end_define
begin_define
DECL|macro|Y_SIZE
define|#
directive|define
name|Y_SIZE
parameter_list|(
name|face
parameter_list|,
name|i
parameter_list|)
value|((face)->available_sizes[i].y_ppem)
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|X_SIZE
define|#
directive|define
name|X_SIZE
parameter_list|(
name|face
parameter_list|,
name|i
parameter_list|)
value|((face)->available_sizes[i].width<< 6)
end_define
begin_define
DECL|macro|Y_SIZE
define|#
directive|define
name|Y_SIZE
parameter_list|(
name|face
parameter_list|,
name|i
parameter_list|)
value|((face)->available_sizes[i].height<< 6)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_FREETYPE
end_comment
begin_function
specifier|static
DECL|function|loadSingleEngine
name|QFontEngine
modifier|*
name|loadSingleEngine
parameter_list|(
name|int
name|script
parameter_list|,
specifier|const
name|QFontPrivate
modifier|*
name|fp
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|,
name|QtFontFamily
modifier|*
name|family
parameter_list|,
name|QtFontFoundry
modifier|*
name|foundry
parameter_list|,
name|QtFontStyle
modifier|*
name|style
parameter_list|,
name|QtFontSize
modifier|*
name|size
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|fp
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_FREETYPE
name|Q_UNUSED
argument_list|(
name|foundry
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_NO_QWS_QPF
name|Q_UNUSED
argument_list|(
name|family
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Q_ASSERT
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|int
name|pixelSize
init|=
name|size
operator|->
name|pixelSize
decl_stmt|;
if|if
condition|(
operator|!
name|pixelSize
operator|||
operator|(
name|style
operator|->
name|smoothScalable
operator|&&
name|pixelSize
operator|==
name|SMOOTH_SCALABLE
operator|)
condition|)
name|pixelSize
operator|=
name|request
operator|.
name|pixelSize
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_QPF2
if|if
condition|(
name|foundry
operator|->
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"prerendered"
argument_list|)
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_FONTS_ARE_RESOURCES
name|QResource
name|res
argument_list|(
name|QLatin1String
argument_list|(
name|size
operator|->
name|fileName
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QFontEngineQPF
modifier|*
name|fe
init|=
operator|new
name|QFontEngineQPF
argument_list|(
name|request
argument_list|,
name|res
operator|.
name|data
argument_list|()
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fe
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|fe
return|;
operator|delete
name|fe
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"fontengine is not valid! "
operator|<<
name|size
operator|->
name|fileName
expr_stmt|;
block|}
else|else
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Resource not valid"
operator|<<
name|size
operator|->
name|fileName
expr_stmt|;
block|}
else|#
directive|else
name|int
name|f
init|=
operator|::
name|open
argument_list|(
name|size
operator|->
name|fileName
argument_list|,
name|O_RDONLY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|>=
literal|0
condition|)
block|{
name|QFontEngineQPF
modifier|*
name|fe
init|=
operator|new
name|QFontEngineQPF
argument_list|(
name|request
argument_list|,
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|fe
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|fe
return|;
operator|delete
name|fe
expr_stmt|;
comment|// will close f
name|qDebug
argument_list|()
operator|<<
literal|"fontengine is not valid!"
expr_stmt|;
block|}
endif|#
directive|endif
block|}
elseif|else
endif|#
directive|endif
if|if
condition|(
name|foundry
operator|->
name|name
operator|!=
name|QLatin1String
argument_list|(
literal|"qt"
argument_list|)
condition|)
block|{
comment|///#### is this the best way????
name|QString
name|file
init|=
name|QFile
operator|::
name|decodeName
argument_list|(
name|size
operator|->
name|fileName
argument_list|)
decl_stmt|;
name|QFontDef
name|def
init|=
name|request
decl_stmt|;
name|def
operator|.
name|pixelSize
operator|=
name|pixelSize
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_QWS_SHARE_FONTS
name|bool
name|shareFonts
init|=
literal|false
decl_stmt|;
else|#
directive|else
specifier|static
name|bool
name|dontShareFonts
init|=
operator|!
name|qgetenv
argument_list|(
literal|"QWS_NO_SHARE_FONTS"
argument_list|)
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|bool
name|shareFonts
init|=
operator|!
name|dontShareFonts
decl_stmt|;
endif|#
directive|endif
name|QScopedPointer
argument_list|<
name|QFontEngine
argument_list|>
name|engine
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
name|QFontEngineFactoryInterface
modifier|*
name|factory
init|=
name|qobject_cast
argument_list|<
name|QFontEngineFactoryInterface
operator|*
argument_list|>
argument_list|(
name|loader
argument_list|()
operator|->
name|instance
argument_list|(
name|foundry
operator|->
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
condition|)
block|{
name|QFontEngineInfo
name|info
decl_stmt|;
name|info
operator|.
name|setFamily
argument_list|(
name|request
operator|.
name|family
argument_list|)
expr_stmt|;
name|info
operator|.
name|setPixelSize
argument_list|(
name|request
operator|.
name|pixelSize
argument_list|)
expr_stmt|;
name|info
operator|.
name|setStyle
argument_list|(
name|QFont
operator|::
name|Style
argument_list|(
name|request
operator|.
name|style
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setWeight
argument_list|(
name|request
operator|.
name|weight
argument_list|)
expr_stmt|;
comment|// #### antialiased
name|QAbstractFontEngine
modifier|*
name|customEngine
init|=
name|factory
operator|->
name|create
argument_list|(
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|customEngine
condition|)
block|{
name|engine
operator|.
name|reset
argument_list|(
operator|new
name|QProxyFontEngine
argument_list|(
name|customEngine
argument_list|,
name|def
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|shareFonts
condition|)
block|{
name|QVariant
name|hint
init|=
name|customEngine
operator|->
name|fontProperty
argument_list|(
name|QAbstractFontEngine
operator|::
name|CacheGlyphsHint
argument_list|)
decl_stmt|;
if|if
condition|(
name|hint
operator|.
name|isValid
argument_list|()
condition|)
name|shareFonts
operator|=
name|hint
operator|.
name|toBool
argument_list|()
expr_stmt|;
else|else
name|shareFonts
operator|=
operator|(
name|pixelSize
operator|<
literal|64
operator|)
expr_stmt|;
block|}
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_LIBRARY
if|if
condition|(
operator|(
name|engine
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|file
operator|.
name|isEmpty
argument_list|()
operator|&&
name|QFile
operator|::
name|exists
argument_list|(
name|file
argument_list|)
operator|)
operator|||
name|privateDb
argument_list|()
operator|->
name|isApplicationFont
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|QFontEngine
operator|::
name|FaceId
name|faceId
decl_stmt|;
name|faceId
operator|.
name|filename
operator|=
name|file
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
name|faceId
operator|.
name|index
operator|=
name|size
operator|->
name|fileIndex
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FREETYPE
name|QScopedPointer
argument_list|<
name|QFontEngineFT
argument_list|>
name|fte
argument_list|(
operator|new
name|QFontEngineFT
argument_list|(
name|def
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|antialias
init|=
name|style
operator|->
name|antialiased
operator|&&
operator|!
operator|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoAntialias
operator|)
decl_stmt|;
if|if
condition|(
name|fte
operator|->
name|init
argument_list|(
name|faceId
argument_list|,
name|antialias
argument_list|,
name|antialias
condition|?
name|QFontEngineFT
operator|::
name|Format_A8
else|:
name|QFontEngineFT
operator|::
name|Format_Mono
argument_list|)
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_QWS_QPF2
return|return
name|fte
operator|.
name|take
argument_list|()
return|;
else|#
directive|else
comment|// try to distinguish between bdf and ttf fonts we can pre-render
comment|// and don't try to share outline fonts
name|shareFonts
operator|=
name|shareFonts
operator|&&
operator|!
name|fte
operator|->
name|defaultGlyphs
argument_list|()
operator|->
name|outline_drawing
operator|&&
operator|!
name|fte
operator|->
name|getSfntTable
argument_list|(
name|MAKE_TAG
argument_list|(
literal|'h'
argument_list|,
literal|'e'
argument_list|,
literal|'a'
argument_list|,
literal|'d'
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|engine
operator|.
name|reset
argument_list|(
name|fte
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
endif|#
directive|endif
comment|// QT_NO_FREETYPE
block|}
if|if
condition|(
operator|!
name|engine
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_QWS_QPF2
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_FONTS_ARE_RESOURCES
argument_list|)
if|if
condition|(
name|shareFonts
condition|)
block|{
name|QScopedPointer
argument_list|<
name|QFontEngineQPF
argument_list|>
name|fe
argument_list|(
operator|new
name|QFontEngineQPF
argument_list|(
name|def
argument_list|,
operator|-
literal|1
argument_list|,
name|engine
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|engine
operator|.
name|take
argument_list|()
expr_stmt|;
if|if
condition|(
name|fe
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|fe
operator|.
name|take
argument_list|()
return|;
name|qWarning
argument_list|(
literal|"Initializing QFontEngineQPF failed for %s"
argument_list|,
name|qPrintable
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|reset
argument_list|(
name|fe
operator|->
name|takeRenderingEngine
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|engine
operator|.
name|take
argument_list|()
return|;
block|}
block|}
else|else
block|{
ifndef|#
directive|ifndef
name|QT_NO_QWS_QPF
name|QString
name|fn
init|=
name|qwsFontPath
argument_list|()
decl_stmt|;
name|fn
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|fn
operator|+=
name|family
operator|->
name|name
operator|.
name|toLower
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|pixelSize
operator|*
literal|10
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|style
operator|->
name|key
operator|.
name|weight
argument_list|)
operator|+
operator|(
name|style
operator|->
name|key
operator|.
name|style
operator|==
name|QFont
operator|::
name|StyleItalic
condition|?
name|QLatin1String
argument_list|(
literal|"i.qpf"
argument_list|)
else|:
name|QLatin1String
argument_list|(
literal|".qpf"
argument_list|)
operator|)
expr_stmt|;
comment|//###rotation ###
name|QFontEngine
modifier|*
name|fe
init|=
operator|new
name|QFontEngineQPF1
argument_list|(
name|request
argument_list|,
name|fn
argument_list|)
decl_stmt|;
return|return
name|fe
return|;
endif|#
directive|endif
comment|// QT_NO_QWS_QPF
block|}
return|return
operator|new
name|QFontEngineBox
argument_list|(
name|pixelSize
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
DECL|function|loadEngine
name|QFontEngine
modifier|*
name|loadEngine
parameter_list|(
name|int
name|script
parameter_list|,
specifier|const
name|QFontPrivate
modifier|*
name|fp
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|,
name|QtFontFamily
modifier|*
name|family
parameter_list|,
name|QtFontFoundry
modifier|*
name|foundry
parameter_list|,
name|QtFontStyle
modifier|*
name|style
parameter_list|,
name|QtFontSize
modifier|*
name|size
parameter_list|)
block|{
name|QScopedPointer
argument_list|<
name|QFontEngine
argument_list|>
name|engine
argument_list|(
name|loadSingleEngine
argument_list|(
name|script
argument_list|,
name|fp
argument_list|,
name|request
argument_list|,
name|family
argument_list|,
name|foundry
argument_list|,
name|style
argument_list|,
name|size
argument_list|)
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_QPF
if|if
condition|(
operator|!
name|engine
operator|.
name|isNull
argument_list|()
operator|&&
name|script
operator|==
name|QUnicodeTables
operator|::
name|Common
operator|&&
operator|!
operator|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoFontMerging
operator|)
operator|&&
operator|!
name|engine
operator|->
name|symbol
condition|)
block|{
name|QStringList
name|fallbacks
init|=
name|privateDb
argument_list|()
operator|->
name|fallbackFamilies
decl_stmt|;
if|if
condition|(
name|family
operator|&&
operator|!
name|family
operator|->
name|fallbackFamilies
operator|.
name|isEmpty
argument_list|()
condition|)
name|fallbacks
operator|=
name|family
operator|->
name|fallbackFamilies
expr_stmt|;
name|QFontEngine
modifier|*
name|fe
init|=
operator|new
name|QFontEngineMultiQWS
argument_list|(
name|engine
operator|.
name|data
argument_list|()
argument_list|,
name|script
argument_list|,
name|fallbacks
argument_list|)
decl_stmt|;
name|engine
operator|.
name|take
argument_list|()
expr_stmt|;
name|engine
operator|.
name|reset
argument_list|(
name|fe
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|engine
operator|.
name|take
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|registerFont
specifier|static
name|void
name|registerFont
parameter_list|(
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
modifier|*
name|fnt
parameter_list|)
block|{
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_FREETYPE
name|Q_UNUSED
argument_list|(
name|fnt
argument_list|)
expr_stmt|;
else|#
directive|else
name|fnt
operator|->
name|families
operator|=
name|db
operator|->
name|addTTFile
argument_list|(
name|QFile
operator|::
name|encodeName
argument_list|(
name|fnt
operator|->
name|fileName
argument_list|)
argument_list|,
name|fnt
operator|->
name|data
argument_list|)
expr_stmt|;
name|db
operator|->
name|fallbackFamilies
operator|+=
name|fnt
operator|->
name|families
expr_stmt|;
endif|#
directive|endif
name|db
operator|->
name|reregisterAppFonts
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeApplicationFont
name|bool
name|QFontDatabase
operator|::
name|removeApplicationFont
parameter_list|(
name|int
name|handle
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
if|if
condition|(
name|handle
operator|<
literal|0
operator|||
name|handle
operator|>=
name|db
operator|->
name|applicationFonts
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
name|db
operator|->
name|applicationFonts
index|[
name|handle
index|]
operator|=
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
argument_list|()
expr_stmt|;
name|db
operator|->
name|reregisterAppFonts
operator|=
literal|true
expr_stmt|;
name|db
operator|->
name|invalidate
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|removeAllApplicationFonts
name|bool
name|QFontDatabase
operator|::
name|removeAllApplicationFonts
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
if|if
condition|(
name|db
operator|->
name|applicationFonts
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|db
operator|->
name|applicationFonts
operator|.
name|clear
argument_list|()
expr_stmt|;
name|db
operator|->
name|invalidate
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|supportsThreadedFontRendering
name|bool
name|QFontDatabase
operator|::
name|supportsThreadedFontRendering
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
name|QFontEngine
modifier|*
DECL|function|findFont
name|QFontDatabase
operator|::
name|findFont
parameter_list|(
name|int
name|script
parameter_list|,
specifier|const
name|QFontPrivate
modifier|*
name|fp
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|force_encoding_id
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|privateDb
argument_list|()
operator|->
name|count
condition|)
name|initializeDb
argument_list|()
expr_stmt|;
name|QScopedPointer
argument_list|<
name|QFontEngine
argument_list|>
name|fe
decl_stmt|;
if|if
condition|(
name|fp
condition|)
block|{
if|if
condition|(
name|fp
operator|->
name|rawMode
condition|)
block|{
name|fe
operator|.
name|reset
argument_list|(
name|loadEngine
argument_list|(
name|script
argument_list|,
name|fp
argument_list|,
name|request
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// if we fail to load the rawmode font, use a 12pixel box engine instead
if|if
condition|(
name|fe
operator|.
name|isNull
argument_list|()
condition|)
name|fe
operator|.
name|reset
argument_list|(
operator|new
name|QFontEngineBox
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fe
operator|.
name|take
argument_list|()
return|;
block|}
name|QFontCache
operator|::
name|Key
name|key
argument_list|(
name|request
argument_list|,
name|script
argument_list|)
decl_stmt|;
name|fe
operator|.
name|reset
argument_list|(
name|QFontCache
operator|::
name|instance
argument_list|()
operator|->
name|findEngine
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fe
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|fe
operator|.
name|take
argument_list|()
return|;
block|}
name|QString
name|family_name
decl_stmt|,
name|foundry_name
decl_stmt|;
name|QtFontStyle
operator|::
name|Key
name|styleKey
decl_stmt|;
name|styleKey
operator|.
name|style
operator|=
name|request
operator|.
name|style
expr_stmt|;
name|styleKey
operator|.
name|weight
operator|=
name|request
operator|.
name|weight
expr_stmt|;
name|styleKey
operator|.
name|stretch
operator|=
name|request
operator|.
name|stretch
expr_stmt|;
name|char
name|pitch
init|=
name|request
operator|.
name|ignorePitch
condition|?
literal|'*'
else|:
name|request
operator|.
name|fixedPitch
condition|?
literal|'m'
else|:
literal|'p'
decl_stmt|;
name|parseFontName
argument_list|(
name|request
operator|.
name|family
argument_list|,
name|foundry_name
argument_list|,
name|family_name
argument_list|)
expr_stmt|;
name|FM_DEBUG
argument_list|(
literal|"QFontDatabase::findFont\n"
literal|"  request:\n"
literal|"    family: %s [%s], script: %d\n"
literal|"    weight: %d, style: %d\n"
literal|"    stretch: %d\n"
literal|"    pixelSize: %g\n"
literal|"    pitch: %c"
argument_list|,
name|family_name
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"-- first in script --"
else|:
name|family_name
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|foundry_name
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"-- any --"
else|:
name|foundry_name
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|script
argument_list|,
name|request
operator|.
name|weight
argument_list|,
name|request
operator|.
name|style
argument_list|,
name|request
operator|.
name|stretch
argument_list|,
name|request
operator|.
name|pixelSize
argument_list|,
name|pitch
argument_list|)
expr_stmt|;
if|if
condition|(
name|qt_enable_test_font
operator|&&
name|request
operator|.
name|family
operator|==
name|QLatin1String
argument_list|(
literal|"__Qt__Box__Engine__"
argument_list|)
condition|)
block|{
name|fe
operator|.
name|reset
argument_list|(
operator|new
name|QTestFontEngine
argument_list|(
name|request
operator|.
name|pixelSize
argument_list|)
argument_list|)
expr_stmt|;
name|fe
operator|->
name|fontDef
operator|=
name|request
expr_stmt|;
block|}
if|if
condition|(
name|fe
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QtFontDesc
name|desc
decl_stmt|;
name|match
argument_list|(
name|script
argument_list|,
name|request
argument_list|,
name|family_name
argument_list|,
name|foundry_name
argument_list|,
name|force_encoding_id
argument_list|,
operator|&
name|desc
argument_list|)
expr_stmt|;
if|if
condition|(
name|desc
operator|.
name|family
operator|!=
literal|0
operator|&&
name|desc
operator|.
name|foundry
operator|!=
literal|0
operator|&&
name|desc
operator|.
name|style
operator|!=
literal|0
condition|)
block|{
name|FM_DEBUG
argument_list|(
literal|"  BEST:\n"
literal|"    family: %s [%s]\n"
literal|"    weight: %d, style: %d\n"
literal|"    stretch: %d\n"
literal|"    pixelSize: %d\n"
literal|"    pitch: %c\n"
literal|"    encoding: %d\n"
argument_list|,
name|desc
operator|.
name|family
operator|->
name|name
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|desc
operator|.
name|foundry
operator|->
name|name
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"-- none --"
else|:
name|desc
operator|.
name|foundry
operator|->
name|name
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|desc
operator|.
name|style
operator|->
name|key
operator|.
name|weight
argument_list|,
name|desc
operator|.
name|style
operator|->
name|key
operator|.
name|style
argument_list|,
name|desc
operator|.
name|style
operator|->
name|key
operator|.
name|stretch
argument_list|,
name|desc
operator|.
name|size
condition|?
name|desc
operator|.
name|size
operator|->
name|pixelSize
else|:
literal|0xffff
argument_list|,
literal|'p'
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fe
operator|.
name|reset
argument_list|(
name|loadEngine
argument_list|(
name|script
argument_list|,
name|fp
argument_list|,
name|request
argument_list|,
name|desc
operator|.
name|family
argument_list|,
name|desc
operator|.
name|foundry
argument_list|,
name|desc
operator|.
name|style
argument_list|,
name|desc
operator|.
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FM_DEBUG
argument_list|(
literal|"  NO MATCH FOUND\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fe
operator|.
name|isNull
argument_list|()
condition|)
name|initFontDef
argument_list|(
name|desc
argument_list|,
name|request
argument_list|,
operator|&
name|fe
operator|->
name|fontDef
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_FREETYPE
if|if
condition|(
operator|!
name|fe
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|scriptRequiresOpenType
argument_list|(
name|script
argument_list|)
operator|&&
name|fe
operator|->
name|type
argument_list|()
operator|==
name|QFontEngine
operator|::
name|Freetype
condition|)
block|{
name|HB_Face
name|hbFace
init|=
cast|static_cast
argument_list|<
name|QFontEngineFT
operator|*
argument_list|>
argument_list|(
name|fe
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|harfbuzzFace
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hbFace
operator|||
operator|!
name|hbFace
operator|->
name|supported_scripts
index|[
name|script
index|]
condition|)
block|{
name|FM_DEBUG
argument_list|(
literal|"  OpenType support missing for script\n"
argument_list|)
expr_stmt|;
name|fe
operator|.
name|reset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|fe
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|fp
condition|)
block|{
name|QFontDef
name|def
init|=
name|request
decl_stmt|;
if|if
condition|(
name|def
operator|.
name|family
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|def
operator|.
name|family
operator|=
name|fp
operator|->
name|request
operator|.
name|family
expr_stmt|;
name|def
operator|.
name|family
operator|=
name|def
operator|.
name|family
operator|.
name|left
argument_list|(
name|def
operator|.
name|family
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QFontCache
operator|::
name|Key
name|key
argument_list|(
name|def
argument_list|,
name|script
argument_list|)
decl_stmt|;
name|QFontCache
operator|::
name|instance
argument_list|()
operator|->
name|insertEngine
argument_list|(
name|key
argument_list|,
name|fe
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fe
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|family
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|FM_DEBUG
argument_list|(
literal|"returning box engine"
argument_list|)
expr_stmt|;
name|fe
operator|.
name|reset
argument_list|(
operator|new
name|QFontEngineBox
argument_list|(
name|request
operator|.
name|pixelSize
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fp
condition|)
block|{
name|QFontCache
operator|::
name|Key
name|key
argument_list|(
name|request
argument_list|,
name|script
argument_list|)
decl_stmt|;
name|QFontCache
operator|::
name|instance
argument_list|()
operator|->
name|insertEngine
argument_list|(
name|key
argument_list|,
name|fe
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fp
operator|&&
name|fp
operator|->
name|dpi
operator|>
literal|0
condition|)
block|{
name|fe
operator|->
name|fontDef
operator|.
name|pointSize
operator|=
name|qreal
argument_list|(
name|double
argument_list|(
operator|(
name|fe
operator|->
name|fontDef
operator|.
name|pixelSize
operator|*
literal|72
operator|)
operator|/
name|fp
operator|->
name|dpi
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fe
operator|->
name|fontDef
operator|.
name|pointSize
operator|=
name|request
operator|.
name|pointSize
expr_stmt|;
block|}
return|return
name|fe
operator|.
name|take
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|load
name|void
name|QFontDatabase
operator|::
name|load
parameter_list|(
specifier|const
name|QFontPrivate
modifier|*
name|d
parameter_list|,
name|int
name|script
parameter_list|)
block|{
name|QFontDef
name|req
init|=
name|d
operator|->
name|request
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|pixelSize
operator|==
operator|-
literal|1
condition|)
name|req
operator|.
name|pixelSize
operator|=
name|qRound
argument_list|(
name|req
operator|.
name|pointSize
operator|*
name|d
operator|->
name|dpi
operator|/
literal|72
argument_list|)
expr_stmt|;
if|if
condition|(
name|req
operator|.
name|pointSize
operator|<
literal|0
condition|)
name|req
operator|.
name|pointSize
operator|=
name|req
operator|.
name|pixelSize
operator|*
literal|72.0
operator|/
name|d
operator|->
name|dpi
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|engineData
condition|)
block|{
name|QFontCache
operator|::
name|Key
name|key
argument_list|(
name|req
argument_list|,
name|script
argument_list|)
decl_stmt|;
comment|// look for the requested font in the engine data cache
name|d
operator|->
name|engineData
operator|=
name|QFontCache
operator|::
name|instance
argument_list|()
operator|->
name|findEngineData
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|engineData
condition|)
block|{
comment|// create a new one
name|d
operator|->
name|engineData
operator|=
operator|new
name|QFontEngineData
expr_stmt|;
name|QT_TRY
block|{
name|QFontCache
operator|::
name|instance
argument_list|()
operator|->
name|insertEngineData
argument_list|(
name|key
argument_list|,
name|d
operator|->
name|engineData
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
operator|delete
name|d
operator|->
name|engineData
expr_stmt|;
name|d
operator|->
name|engineData
operator|=
literal|0
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
block|}
else|else
block|{
name|d
operator|->
name|engineData
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
block|}
comment|// the cached engineData could have already loaded the engine we want
if|if
condition|(
name|d
operator|->
name|engineData
operator|->
name|engines
index|[
name|script
index|]
condition|)
return|return;
comment|//    double scale = 1.0; // ### TODO: fix the scale calculations
comment|// list of families to try
name|QStringList
name|family_list
decl_stmt|;
if|if
condition|(
operator|!
name|req
operator|.
name|family
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|family_list
operator|=
name|req
operator|.
name|family
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
comment|// append the substitute list for each family in family_list
name|QStringList
name|subs_list
decl_stmt|;
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|family_list
operator|.
name|constBegin
argument_list|()
decl_stmt|,
name|end
init|=
name|family_list
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
name|subs_list
operator|+=
name|QFont
operator|::
name|substitutes
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
name|family_list
operator|+=
name|subs_list
expr_stmt|;
comment|// append the default fallback font for the specified script
comment|// family_list<< ... ; ###########
comment|// add the default family
name|QString
name|defaultFamily
init|=
name|QApplication
operator|::
name|font
argument_list|()
operator|.
name|family
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|family_list
operator|.
name|contains
argument_list|(
name|defaultFamily
argument_list|)
condition|)
name|family_list
operator|<<
name|defaultFamily
expr_stmt|;
comment|// add QFont::defaultFamily() to the list, for compatibility with
comment|// previous versions
name|family_list
operator|<<
name|QApplication
operator|::
name|font
argument_list|()
operator|.
name|defaultFamily
argument_list|()
expr_stmt|;
block|}
comment|// null family means find the first font matching the specified script
name|family_list
operator|<<
name|QString
argument_list|()
expr_stmt|;
comment|// load the font
name|QFontEngine
modifier|*
name|engine
init|=
literal|0
decl_stmt|;
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|family_list
operator|.
name|constBegin
argument_list|()
decl_stmt|,
name|end
init|=
name|family_list
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
init|;
operator|!
name|engine
operator|&&
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
name|req
operator|.
name|family
operator|=
operator|*
name|it
expr_stmt|;
name|engine
operator|=
name|QFontDatabase
operator|::
name|findFont
argument_list|(
name|script
argument_list|,
name|d
argument_list|,
name|req
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|&&
operator|(
name|engine
operator|->
name|type
argument_list|()
operator|==
name|QFontEngine
operator|::
name|Box
operator|)
operator|&&
operator|!
name|req
operator|.
name|family
operator|.
name|isEmpty
argument_list|()
condition|)
name|engine
operator|=
literal|0
expr_stmt|;
block|}
name|engine
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|d
operator|->
name|engineData
operator|->
name|engines
index|[
name|script
index|]
operator|=
name|engine
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
