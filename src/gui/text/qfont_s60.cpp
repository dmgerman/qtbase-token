begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfont.h"
end_include
begin_include
include|#
directive|include
file|"qfont_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qt_s60_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpixmap_s60_p.h>
end_include
begin_include
include|#
directive|include
file|"qmutex.h"
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
ifdef|#
directive|ifdef
name|QT_NO_FREETYPE
name|Q_GLOBAL_STATIC
parameter_list|(
name|QMutex
parameter_list|,
name|lastResortFamilyMutex
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_FREETYPE
end_comment
begin_function_decl
specifier|extern
name|QStringList
name|qt_symbian_fontFamiliesOnFontServer
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|// qfontdatabase_s60.cpp
end_comment
begin_macro
name|Q_GLOBAL_STATIC_WITH_INITIALIZER
argument_list|(
argument|QStringList
argument_list|,
argument|fontFamiliesOnFontServer
argument_list|,
argument|{
comment|// We are only interested in the initial font families. No Application fonts.
comment|// Therefore, we are allowed to cache the list.
argument|x->append(qt_symbian_fontFamiliesOnFontServer()); }
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_function
DECL|function|lastResortFont
name|QString
name|QFont
operator|::
name|lastResortFont
parameter_list|()
specifier|const
block|{
comment|// Symbian's font Api does not distinguish between font and family.
comment|// Therefore we try to get a "Family" first, then fall back to "Sans".
specifier|static
name|QString
name|font
init|=
name|lastResortFamily
argument_list|()
decl_stmt|;
if|if
condition|(
name|font
operator|.
name|isEmpty
argument_list|()
condition|)
name|font
operator|=
name|QLatin1String
argument_list|(
literal|"Sans"
argument_list|)
expr_stmt|;
return|return
name|font
return|;
block|}
end_function
begin_function
DECL|function|lastResortFamily
name|QString
name|QFont
operator|::
name|lastResortFamily
parameter_list|()
specifier|const
block|{
ifdef|#
directive|ifdef
name|QT_NO_FREETYPE
name|QMutexLocker
name|locker
argument_list|(
name|lastResortFamilyMutex
argument_list|()
argument_list|)
decl_stmt|;
specifier|static
name|QString
name|family
decl_stmt|;
if|if
condition|(
name|family
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QSymbianFbsHeapLock
name|lock
argument_list|(
name|QSymbianFbsHeapLock
operator|::
name|Unlock
argument_list|)
decl_stmt|;
name|CFont
modifier|*
name|font
decl_stmt|;
specifier|const
name|TInt
name|err
init|=
name|S60
operator|->
name|screenDevice
argument_list|()
operator|->
name|GetNearestFontInTwips
argument_list|(
name|font
argument_list|,
name|TFontSpec
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|err
operator|==
name|KErrNone
argument_list|)
expr_stmt|;
specifier|const
name|TFontSpec
name|spec
init|=
name|font
operator|->
name|FontSpecInTwips
argument_list|()
decl_stmt|;
name|family
operator|=
name|QString
argument_list|(
operator|(
specifier|const
name|QChar
operator|*
operator|)
name|spec
operator|.
name|iTypeface
operator|.
name|iName
operator|.
name|Ptr
argument_list|()
argument_list|,
name|spec
operator|.
name|iTypeface
operator|.
name|iName
operator|.
name|Length
argument_list|()
argument_list|)
expr_stmt|;
name|S60
operator|->
name|screenDevice
argument_list|()
operator|->
name|ReleaseFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|lock
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
return|return
name|family
return|;
else|#
directive|else
comment|// QT_NO_FREETYPE
comment|// For the FreeType case we just hard code the face name, since otherwise on
comment|// East Asian systems we may get a name for a stroke based (non-ttf) font.
comment|// TODO: Get the type face name in a proper way
specifier|const
name|bool
name|isJapaneseOrChineseSystem
init|=
name|User
operator|::
name|Language
argument_list|()
operator|==
name|ELangJapanese
operator|||
name|User
operator|::
name|Language
argument_list|()
operator|==
name|ELangPrcChinese
decl_stmt|;
specifier|static
name|QString
name|family
decl_stmt|;
if|if
condition|(
name|family
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
name|families
init|=
name|qt_symbian_fontFamiliesOnFontServer
argument_list|()
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
name|preferredFamilies
index|[]
init|=
block|{
literal|"Nokia Sans S60"
block|,
literal|"Series 60 Sans"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
name|preferredFamilies
operator|/
sizeof|sizeof
name|preferredFamilies
index|[
literal|0
index|]
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|preferredFamily
init|=
name|QLatin1String
argument_list|(
name|preferredFamilies
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|families
operator|.
name|contains
argument_list|(
name|preferredFamily
argument_list|)
condition|)
block|{
name|family
operator|=
name|preferredFamily
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|QLatin1String
argument_list|(
name|isJapaneseOrChineseSystem
condition|?
literal|"Heisei Kaku Gothic S60"
else|:
name|family
operator|.
name|toLatin1
argument_list|()
argument_list|)
return|;
endif|#
directive|endif
comment|// QT_NO_FREETYPE
block|}
end_function
begin_function
DECL|function|defaultFamily
name|QString
name|QFont
operator|::
name|defaultFamily
parameter_list|()
specifier|const
block|{
ifdef|#
directive|ifdef
name|QT_NO_FREETYPE
switch|switch
condition|(
name|d
operator|->
name|request
operator|.
name|styleHint
condition|)
block|{
case|case
name|QFont
operator|::
name|SansSerif
case|:
block|{
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|preferredSansSerif
index|[]
init|=
block|{
literal|"Nokia Sans S60"
block|,
literal|"Series 60 Sans"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
name|preferredSansSerif
operator|/
sizeof|sizeof
name|preferredSansSerif
index|[
literal|0
index|]
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|sansSerif
init|=
name|QLatin1String
argument_list|(
name|preferredSansSerif
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontFamiliesOnFontServer
argument_list|()
operator|->
name|contains
argument_list|(
name|sansSerif
argument_list|)
condition|)
return|return
name|sansSerif
return|;
block|}
block|}
comment|// No break. Intentional fall through.
default|default:
return|return
name|lastResortFamily
argument_list|()
return|;
block|}
endif|#
directive|endif
comment|// QT_NO_FREETYPE
return|return
name|lastResortFamily
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
