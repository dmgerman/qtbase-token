begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfontengine_qpf2_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QFile>
end_include
begin_include
include|#
directive|include
file|<QtCore/QFileInfo>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDir>
end_include
begin_include
include|#
directive|include
file|<QtCore/QBuffer>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qstringiterator_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qpaintengine_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformfontdatabase.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformintegration.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|//#define DEBUG_HEADER
comment|//#define DEBUG_FONTENGINE
DECL|variable|tagTypes
specifier|static
specifier|const
name|QFontEngineQPF2
operator|::
name|TagType
name|tagTypes
index|[
name|QFontEngineQPF2
operator|::
name|NumTags
index|]
init|=
block|{
name|QFontEngineQPF2
operator|::
name|StringType
block|,
comment|// FontName
name|QFontEngineQPF2
operator|::
name|StringType
block|,
comment|// FileName
name|QFontEngineQPF2
operator|::
name|UInt32Type
block|,
comment|// FileIndex
name|QFontEngineQPF2
operator|::
name|UInt32Type
block|,
comment|// FontRevision
name|QFontEngineQPF2
operator|::
name|StringType
block|,
comment|// FreeText
name|QFontEngineQPF2
operator|::
name|FixedType
block|,
comment|// Ascent
name|QFontEngineQPF2
operator|::
name|FixedType
block|,
comment|// Descent
name|QFontEngineQPF2
operator|::
name|FixedType
block|,
comment|// Leading
name|QFontEngineQPF2
operator|::
name|FixedType
block|,
comment|// XHeight
name|QFontEngineQPF2
operator|::
name|FixedType
block|,
comment|// AverageCharWidth
name|QFontEngineQPF2
operator|::
name|FixedType
block|,
comment|// MaxCharWidth
name|QFontEngineQPF2
operator|::
name|FixedType
block|,
comment|// LineThickness
name|QFontEngineQPF2
operator|::
name|FixedType
block|,
comment|// MinLeftBearing
name|QFontEngineQPF2
operator|::
name|FixedType
block|,
comment|// MinRightBearing
name|QFontEngineQPF2
operator|::
name|FixedType
block|,
comment|// UnderlinePosition
name|QFontEngineQPF2
operator|::
name|UInt8Type
block|,
comment|// GlyphFormat
name|QFontEngineQPF2
operator|::
name|UInt8Type
block|,
comment|// PixelSize
name|QFontEngineQPF2
operator|::
name|UInt8Type
block|,
comment|// Weight
name|QFontEngineQPF2
operator|::
name|UInt8Type
block|,
comment|// Style
name|QFontEngineQPF2
operator|::
name|StringType
block|,
comment|// EndOfHeader
name|QFontEngineQPF2
operator|::
name|BitFieldType
comment|// WritingSystems
block|}
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_HEADER
argument_list|)
end_if
begin_define
DECL|macro|DEBUG_VERIFY
define|#
directive|define
name|DEBUG_VERIFY
value|qDebug
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|DEBUG_VERIFY
define|#
directive|define
name|DEBUG_VERIFY
value|if (0) qDebug
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|READ_VERIFY
define|#
directive|define
name|READ_VERIFY
parameter_list|(
name|type
parameter_list|,
name|variable
parameter_list|)
define|\
value|if (tagPtr + sizeof(type)> endPtr) { \         DEBUG_VERIFY()<< "read verify failed in line"<< __LINE__; \         return 0; \     } \     variable = qFromBigEndian<type>(tagPtr); \     DEBUG_VERIFY()<< "read value"<< variable<< "of type " #type; \     tagPtr += sizeof(type)
end_define
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|readValue
name|T
name|readValue
parameter_list|(
specifier|const
name|uchar
modifier|*
modifier|&
name|data
parameter_list|)
block|{
name|T
name|value
init|=
name|qFromBigEndian
argument_list|<
name|T
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|data
operator|+=
sizeof|sizeof
argument_list|(
name|T
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
end_function
begin_define
DECL|macro|VERIFY
define|#
directive|define
name|VERIFY
parameter_list|(
name|condition
parameter_list|)
define|\
value|if (!(condition)) { \         DEBUG_VERIFY()<< "condition " #condition " failed in line"<< __LINE__; \         return 0; \     }
end_define
begin_define
DECL|macro|VERIFY_TAG
define|#
directive|define
name|VERIFY_TAG
parameter_list|(
name|condition
parameter_list|)
define|\
value|if (!(condition)) { \         DEBUG_VERIFY()<< "verifying tag condition " #condition " failed in line"<< __LINE__<< "with tag"<< tag; \         return 0; \     }
end_define
begin_function
DECL|function|verifyTag
specifier|static
specifier|inline
specifier|const
name|uchar
modifier|*
name|verifyTag
parameter_list|(
specifier|const
name|uchar
modifier|*
name|tagPtr
parameter_list|,
specifier|const
name|uchar
modifier|*
name|endPtr
parameter_list|)
block|{
name|quint16
name|tag
decl_stmt|,
name|length
decl_stmt|;
name|READ_VERIFY
argument_list|(
name|quint16
argument_list|,
name|tag
argument_list|)
expr_stmt|;
name|READ_VERIFY
argument_list|(
name|quint16
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|tag
operator|==
name|QFontEngineQPF2
operator|::
name|Tag_EndOfHeader
condition|)
return|return
name|endPtr
return|;
if|if
condition|(
name|tag
operator|<
name|QFontEngineQPF2
operator|::
name|NumTags
condition|)
block|{
switch|switch
condition|(
name|tagTypes
index|[
name|tag
index|]
condition|)
block|{
case|case
name|QFontEngineQPF2
operator|::
name|BitFieldType
case|:
case|case
name|QFontEngineQPF2
operator|::
name|StringType
case|:
comment|// can't do anything...
break|break;
case|case
name|QFontEngineQPF2
operator|::
name|UInt32Type
case|:
name|VERIFY_TAG
argument_list|(
name|length
operator|==
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QFontEngineQPF2
operator|::
name|FixedType
case|:
name|VERIFY_TAG
argument_list|(
name|length
operator|==
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QFontEngineQPF2
operator|::
name|UInt8Type
case|:
name|VERIFY_TAG
argument_list|(
name|length
operator|==
sizeof|sizeof
argument_list|(
name|quint8
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_HEADER
argument_list|)
if|if
condition|(
name|length
operator|==
literal|1
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"tag data"
operator|<<
name|hex
operator|<<
operator|*
name|tagPtr
expr_stmt|;
elseif|else
if|if
condition|(
name|length
operator|==
literal|4
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"tag data"
operator|<<
name|hex
operator|<<
name|tagPtr
index|[
literal|0
index|]
operator|<<
name|tagPtr
index|[
literal|1
index|]
operator|<<
name|tagPtr
index|[
literal|2
index|]
operator|<<
name|tagPtr
index|[
literal|3
index|]
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|tagPtr
operator|+
name|length
return|;
block|}
end_function
begin_function
DECL|function|findGlyph
specifier|const
name|QFontEngineQPF2
operator|::
name|Glyph
modifier|*
name|QFontEngineQPF2
operator|::
name|findGlyph
parameter_list|(
name|glyph_t
name|g
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|g
operator|||
name|g
operator|>=
name|glyphMapEntries
condition|)
return|return
literal|0
return|;
specifier|const
name|quint32
modifier|*
name|gmapPtr
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|fontData
operator|+
name|glyphMapOffset
argument_list|)
decl_stmt|;
name|quint32
name|glyphPos
init|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|gmapPtr
index|[
name|g
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|glyphPos
operator|>
name|glyphDataSize
condition|)
block|{
if|if
condition|(
name|glyphPos
operator|==
literal|0xffffffff
condition|)
return|return
literal|0
return|;
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"glyph"
operator|<<
name|g
operator|<<
literal|"outside of glyphData, remapping font file"
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|glyphPos
operator|>
name|glyphDataSize
condition|)
return|return
literal|0
return|;
block|}
return|return
cast|reinterpret_cast
argument_list|<
specifier|const
name|Glyph
operator|*
argument_list|>
argument_list|(
name|fontData
operator|+
name|glyphDataOffset
operator|+
name|glyphPos
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|verifyHeader
name|bool
name|QFontEngineQPF2
operator|::
name|verifyHeader
parameter_list|(
specifier|const
name|uchar
modifier|*
name|data
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|VERIFY
argument_list|(
name|quintptr
argument_list|(
name|data
argument_list|)
operator|%
name|Q_ALIGNOF
argument_list|(
name|Header
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|VERIFY
argument_list|(
name|size
operator|>=
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|Header
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|Header
modifier|*
name|header
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|Header
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|->
name|magic
index|[
literal|0
index|]
operator|!=
literal|'Q'
operator|||
name|header
operator|->
name|magic
index|[
literal|1
index|]
operator|!=
literal|'P'
operator|||
name|header
operator|->
name|magic
index|[
literal|2
index|]
operator|!=
literal|'F'
operator|||
name|header
operator|->
name|magic
index|[
literal|3
index|]
operator|!=
literal|'2'
condition|)
return|return
literal|false
return|;
name|VERIFY
argument_list|(
name|header
operator|->
name|majorVersion
operator|<=
name|CurrentMajorVersion
argument_list|)
expr_stmt|;
specifier|const
name|quint16
name|dataSize
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|header
operator|->
name|dataSize
argument_list|)
decl_stmt|;
name|VERIFY
argument_list|(
name|size
operator|>=
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|Header
argument_list|)
argument_list|)
operator|+
name|dataSize
argument_list|)
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|tagPtr
init|=
name|data
operator|+
sizeof|sizeof
argument_list|(
name|Header
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|tagEndPtr
init|=
name|tagPtr
operator|+
name|dataSize
decl_stmt|;
while|while
condition|(
name|tagPtr
operator|<
name|tagEndPtr
operator|-
literal|3
condition|)
block|{
name|tagPtr
operator|=
name|verifyTag
argument_list|(
name|tagPtr
argument_list|,
name|tagEndPtr
argument_list|)
expr_stmt|;
name|VERIFY
argument_list|(
name|tagPtr
argument_list|)
expr_stmt|;
block|}
name|VERIFY
argument_list|(
name|tagPtr
operator|<=
name|tagEndPtr
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|extractHeaderField
name|QVariant
name|QFontEngineQPF2
operator|::
name|extractHeaderField
parameter_list|(
specifier|const
name|uchar
modifier|*
name|data
parameter_list|,
name|HeaderTag
name|requestedTag
parameter_list|)
block|{
specifier|const
name|Header
modifier|*
name|header
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|Header
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|tagPtr
init|=
name|data
operator|+
sizeof|sizeof
argument_list|(
name|Header
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|endPtr
init|=
name|tagPtr
operator|+
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|header
operator|->
name|dataSize
argument_list|)
decl_stmt|;
while|while
condition|(
name|tagPtr
operator|<
name|endPtr
operator|-
literal|3
condition|)
block|{
name|quint16
name|tag
init|=
name|readValue
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|tagPtr
argument_list|)
decl_stmt|;
name|quint16
name|length
init|=
name|readValue
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|tagPtr
argument_list|)
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|requestedTag
condition|)
block|{
switch|switch
condition|(
name|tagTypes
index|[
name|requestedTag
index|]
condition|)
block|{
case|case
name|StringType
case|:
return|return
name|QVariant
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|tagPtr
argument_list|)
argument_list|,
name|length
argument_list|)
argument_list|)
return|;
case|case
name|UInt32Type
case|:
return|return
name|QVariant
argument_list|(
name|readValue
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tagPtr
argument_list|)
argument_list|)
return|;
case|case
name|UInt8Type
case|:
return|return
name|QVariant
argument_list|(
name|uint
argument_list|(
operator|*
name|tagPtr
argument_list|)
argument_list|)
return|;
case|case
name|FixedType
case|:
return|return
name|QVariant
argument_list|(
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|readValue
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tagPtr
argument_list|)
argument_list|)
operator|.
name|toReal
argument_list|()
argument_list|)
return|;
case|case
name|BitFieldType
case|:
return|return
name|QVariant
argument_list|(
name|QByteArray
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|tagPtr
argument_list|)
argument_list|,
name|length
argument_list|)
argument_list|)
return|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|==
name|Tag_EndOfHeader
condition|)
block|{
break|break;
block|}
name|tagPtr
operator|+=
name|length
expr_stmt|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_constructor
DECL|function|QFontEngineQPF2
name|QFontEngineQPF2
operator|::
name|QFontEngineQPF2
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|def
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
member_init_list|:
name|QFontEngine
argument_list|(
name|QPF2
argument_list|)
member_init_list|,
name|fontData
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
member_init_list|,
name|dataSize
argument_list|(
name|data
operator|.
name|size
argument_list|()
argument_list|)
block|{
name|fontDef
operator|=
name|def
expr_stmt|;
name|cache_cost
operator|=
literal|100
expr_stmt|;
name|cmap
operator|=
literal|0
expr_stmt|;
name|cmapOffset
operator|=
literal|0
expr_stmt|;
name|cmapSize
operator|=
literal|0
expr_stmt|;
name|glyphMapOffset
operator|=
literal|0
expr_stmt|;
name|glyphMapEntries
operator|=
literal|0
expr_stmt|;
name|glyphDataOffset
operator|=
literal|0
expr_stmt|;
name|glyphDataSize
operator|=
literal|0
expr_stmt|;
name|kerning_pairs_loaded
operator|=
literal|false
expr_stmt|;
name|readOnly
operator|=
literal|true
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QFontEngineQPF2::QFontEngineQPF2( fd ="
operator|<<
name|fd
operator|<<
literal|", renderingFontEngine ="
operator|<<
name|renderingFontEngine
operator|<<
literal|')'
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|verifyHeader
argument_list|(
name|fontData
argument_list|,
name|dataSize
argument_list|)
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|qDebug
argument_list|(
literal|"verifyHeader failed!"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
specifier|const
name|Header
modifier|*
name|header
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|Header
operator|*
argument_list|>
argument_list|(
name|fontData
argument_list|)
decl_stmt|;
name|readOnly
operator|=
operator|(
name|header
operator|->
name|lock
operator|==
literal|0xffffffff
operator|)
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|imgData
init|=
name|fontData
operator|+
sizeof|sizeof
argument_list|(
name|Header
argument_list|)
operator|+
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|header
operator|->
name|dataSize
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|endPtr
init|=
name|fontData
operator|+
name|dataSize
decl_stmt|;
while|while
condition|(
name|imgData
operator|<=
name|endPtr
operator|-
literal|8
condition|)
block|{
name|quint16
name|blockTag
init|=
name|readValue
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|imgData
argument_list|)
decl_stmt|;
name|imgData
operator|+=
literal|2
expr_stmt|;
comment|// skip padding
name|quint32
name|blockSize
init|=
name|readValue
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|imgData
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockTag
operator|==
name|CMapBlock
condition|)
block|{
name|cmapOffset
operator|=
name|imgData
operator|-
name|fontData
expr_stmt|;
name|cmapSize
operator|=
name|blockSize
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|blockTag
operator|==
name|GMapBlock
condition|)
block|{
name|glyphMapOffset
operator|=
name|imgData
operator|-
name|fontData
expr_stmt|;
name|glyphMapEntries
operator|=
name|blockSize
operator|/
literal|4
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|blockTag
operator|==
name|GlyphBlock
condition|)
block|{
name|glyphDataOffset
operator|=
name|imgData
operator|-
name|fontData
expr_stmt|;
name|glyphDataSize
operator|=
name|blockSize
expr_stmt|;
block|}
name|imgData
operator|+=
name|blockSize
expr_stmt|;
block|}
name|face_id
operator|.
name|filename
operator|=
name|QFile
operator|::
name|encodeName
argument_list|(
name|extractHeaderField
argument_list|(
name|fontData
argument_list|,
name|Tag_FileName
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|face_id
operator|.
name|index
operator|=
name|extractHeaderField
argument_list|(
name|fontData
argument_list|,
name|Tag_FileIndex
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
comment|// get the real cmap
if|if
condition|(
name|cmapOffset
condition|)
block|{
name|cmap
operator|=
name|QFontEngine
operator|::
name|getCMap
argument_list|(
name|fontData
operator|+
name|cmapOffset
argument_list|,
name|cmapSize
argument_list|,
operator|&
name|symbol
argument_list|,
operator|&
name|cmapSize
argument_list|)
expr_stmt|;
name|cmapOffset
operator|=
name|cmap
condition|?
name|cmap
operator|-
name|fontData
else|:
literal|0
expr_stmt|;
block|}
comment|// verify all the positions in the glyphMap
if|if
condition|(
name|glyphMapOffset
condition|)
block|{
specifier|const
name|quint32
modifier|*
name|gmapPtr
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|fontData
operator|+
name|glyphMapOffset
argument_list|)
decl_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphMapEntries
condition|;
operator|++
name|i
control|)
block|{
name|quint32
name|glyphDataPos
init|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|gmapPtr
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|glyphDataPos
operator|==
literal|0xffffffff
condition|)
continue|continue;
if|if
condition|(
name|glyphDataPos
operator|>=
name|glyphDataSize
condition|)
block|{
comment|// error
name|glyphMapOffset
operator|=
literal|0
expr_stmt|;
name|glyphMapEntries
operator|=
literal|0
expr_stmt|;
break|break;
block|}
block|}
block|}
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"fontData"
operator|<<
name|fontData
operator|<<
literal|"dataSize"
operator|<<
name|dataSize
operator|<<
literal|"cmap"
operator|<<
name|cmap
operator|<<
literal|"cmapOffset"
operator|<<
name|cmapOffset
operator|<<
literal|"glyphMapOffset"
operator|<<
name|glyphMapOffset
operator|<<
literal|"glyphDataOffset"
operator|<<
name|glyphDataOffset
operator|<<
literal|"fd"
operator|<<
name|fd
operator|<<
literal|"glyphDataSize"
operator|<<
name|glyphDataSize
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QFontEngineQPF2
name|QFontEngineQPF2
operator|::
name|~
name|QFontEngineQPF2
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|getSfntTableData
name|bool
name|QFontEngineQPF2
operator|::
name|getSfntTableData
parameter_list|(
name|uint
name|tag
parameter_list|,
name|uchar
modifier|*
name|buffer
parameter_list|,
name|uint
modifier|*
name|length
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|tag
operator|!=
name|MAKE_TAG
argument_list|(
literal|'c'
argument_list|,
literal|'m'
argument_list|,
literal|'a'
argument_list|,
literal|'p'
argument_list|)
operator|||
operator|!
name|cmap
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|buffer
operator|&&
name|int
argument_list|(
operator|*
name|length
argument_list|)
operator|>=
name|cmapSize
condition|)
name|memcpy
argument_list|(
name|buffer
argument_list|,
name|cmap
argument_list|,
name|cmapSize
argument_list|)
expr_stmt|;
operator|*
name|length
operator|=
name|cmapSize
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|int
argument_list|(
operator|*
name|length
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|glyphIndex
name|glyph_t
name|QFontEngineQPF2
operator|::
name|glyphIndex
parameter_list|(
name|uint
name|ucs4
parameter_list|)
specifier|const
block|{
name|glyph_t
name|glyph
init|=
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
name|cmapSize
argument_list|,
name|ucs4
argument_list|)
decl_stmt|;
if|if
condition|(
name|glyph
operator|==
literal|0
operator|&&
name|symbol
operator|&&
name|ucs4
operator|<
literal|0x100
condition|)
name|glyph
operator|=
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
name|cmapSize
argument_list|,
name|ucs4
operator|+
literal|0xf000
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|findGlyph
argument_list|(
name|glyph
argument_list|)
condition|)
name|glyph
operator|=
literal|0
expr_stmt|;
return|return
name|glyph
return|;
block|}
end_function
begin_function
DECL|function|stringToCMap
name|bool
name|QFontEngineQPF2
operator|::
name|stringToCMap
parameter_list|(
specifier|const
name|QChar
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|,
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|int
modifier|*
name|nglyphs
parameter_list|,
name|QFontEngine
operator|::
name|ShaperFlags
name|flags
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|glyphs
operator|->
name|numGlyphs
operator|>=
operator|*
name|nglyphs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|*
name|nglyphs
operator|<
name|len
condition|)
block|{
operator|*
name|nglyphs
operator|=
name|len
expr_stmt|;
return|return
literal|false
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|QSet
argument_list|<
name|QChar
argument_list|>
name|seenGlyphs
decl_stmt|;
endif|#
directive|endif
name|int
name|glyph_pos
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|symbol
condition|)
block|{
name|QStringIterator
name|it
argument_list|(
name|str
argument_list|,
name|str
operator|+
name|len
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|const
name|uint
name|uc
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|=
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
name|cmapSize
argument_list|,
name|uc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|&&
name|uc
operator|<
literal|0x100
condition|)
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|=
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
name|cmapSize
argument_list|,
name|uc
operator|+
literal|0xf000
argument_list|)
expr_stmt|;
operator|++
name|glyph_pos
expr_stmt|;
block|}
block|}
else|else
block|{
name|QStringIterator
name|it
argument_list|(
name|str
argument_list|,
name|str
operator|+
name|len
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|const
name|uint
name|uc
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|=
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
name|cmapSize
argument_list|,
name|uc
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
operator|&&
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
block|QChar c(uc);             if (!findGlyph(glyphs[glyph_pos].glyph)&& !seenGlyphs.contains(c))                 qDebug()<< "glyph for character"<< c<< '/'<< hex<< uc<< "is"<< dec<< glyphs[glyph_pos].glyph;              seenGlyphs.insert(c);
endif|#
directive|endif
operator|++
name|glyph_pos
expr_stmt|;
block|}
block|}
operator|*
name|nglyphs
operator|=
name|glyph_pos
expr_stmt|;
name|glyphs
operator|->
name|numGlyphs
operator|=
name|glyph_pos
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|GlyphIndicesOnly
operator|)
condition|)
name|recalcAdvances
argument_list|(
name|glyphs
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|recalcAdvances
name|void
name|QFontEngineQPF2
operator|::
name|recalcAdvances
parameter_list|(
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|QFontEngine
operator|::
name|ShaperFlags
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|->
name|numGlyphs
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|Glyph
modifier|*
name|g
init|=
name|findGlyph
argument_list|(
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|g
condition|)
continue|continue;
name|glyphs
operator|->
name|advances
index|[
name|i
index|]
operator|=
name|g
operator|->
name|advance
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|alphaMapForGlyph
name|QImage
name|QFontEngineQPF2
operator|::
name|alphaMapForGlyph
parameter_list|(
name|glyph_t
name|g
parameter_list|)
block|{
specifier|const
name|Glyph
modifier|*
name|glyph
init|=
name|findGlyph
argument_list|(
name|g
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|glyph
condition|)
return|return
name|QImage
argument_list|()
return|;
specifier|const
name|uchar
modifier|*
name|bits
init|=
operator|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|glyph
operator|)
operator|+
sizeof|sizeof
argument_list|(
name|Glyph
argument_list|)
decl_stmt|;
name|QImage
name|image
argument_list|(
name|bits
argument_list|,
name|glyph
operator|->
name|width
argument_list|,
name|glyph
operator|->
name|height
argument_list|,
name|glyph
operator|->
name|bytesPerLine
argument_list|,
name|QImage
operator|::
name|Format_Alpha8
argument_list|)
decl_stmt|;
return|return
name|image
return|;
block|}
end_function
begin_function
DECL|function|addOutlineToPath
name|void
name|QFontEngineQPF2
operator|::
name|addOutlineToPath
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|,
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|QTextItem
operator|::
name|RenderFlags
name|flags
parameter_list|)
block|{
name|addBitmapFontToPath
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|glyphs
argument_list|,
name|path
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngineQPF2
operator|::
name|boundingBox
parameter_list|(
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|)
block|{
name|glyph_metrics_t
name|overall
decl_stmt|;
comment|// initialize with line height, we get the same behaviour on all platforms
name|overall
operator|.
name|y
operator|=
operator|-
name|ascent
argument_list|()
expr_stmt|;
name|overall
operator|.
name|height
operator|=
name|ascent
argument_list|()
operator|+
name|descent
argument_list|()
operator|+
literal|1
expr_stmt|;
name|QFixed
name|ymax
init|=
literal|0
decl_stmt|;
name|QFixed
name|xmax
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|numGlyphs
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|Glyph
modifier|*
name|g
init|=
name|findGlyph
argument_list|(
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|g
condition|)
continue|continue;
name|QFixed
name|x
init|=
name|overall
operator|.
name|xoff
operator|+
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|x
operator|+
name|g
operator|->
name|x
decl_stmt|;
name|QFixed
name|y
init|=
name|overall
operator|.
name|yoff
operator|+
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|y
operator|+
name|g
operator|->
name|y
decl_stmt|;
name|overall
operator|.
name|x
operator|=
name|qMin
argument_list|(
name|overall
operator|.
name|x
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|overall
operator|.
name|y
operator|=
name|qMin
argument_list|(
name|overall
operator|.
name|y
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|xmax
operator|=
name|qMax
argument_list|(
name|xmax
argument_list|,
name|x
operator|+
name|g
operator|->
name|width
argument_list|)
expr_stmt|;
name|ymax
operator|=
name|qMax
argument_list|(
name|ymax
argument_list|,
name|y
operator|+
name|g
operator|->
name|height
argument_list|)
expr_stmt|;
name|overall
operator|.
name|xoff
operator|+=
name|g
operator|->
name|advance
expr_stmt|;
block|}
name|overall
operator|.
name|height
operator|=
name|qMax
argument_list|(
name|overall
operator|.
name|height
argument_list|,
name|ymax
operator|-
name|overall
operator|.
name|y
argument_list|)
expr_stmt|;
name|overall
operator|.
name|width
operator|=
name|xmax
operator|-
name|overall
operator|.
name|x
expr_stmt|;
return|return
name|overall
return|;
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngineQPF2
operator|::
name|boundingBox
parameter_list|(
name|glyph_t
name|glyph
parameter_list|)
block|{
name|glyph_metrics_t
name|overall
decl_stmt|;
specifier|const
name|Glyph
modifier|*
name|g
init|=
name|findGlyph
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|g
condition|)
return|return
name|overall
return|;
name|overall
operator|.
name|x
operator|=
name|g
operator|->
name|x
expr_stmt|;
name|overall
operator|.
name|y
operator|=
name|g
operator|->
name|y
expr_stmt|;
name|overall
operator|.
name|width
operator|=
name|g
operator|->
name|width
expr_stmt|;
name|overall
operator|.
name|height
operator|=
name|g
operator|->
name|height
expr_stmt|;
name|overall
operator|.
name|xoff
operator|=
name|g
operator|->
name|advance
expr_stmt|;
return|return
name|overall
return|;
block|}
end_function
begin_function
DECL|function|ascent
name|QFixed
name|QFontEngineQPF2
operator|::
name|ascent
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromReal
argument_list|(
name|extractHeaderField
argument_list|(
name|fontData
argument_list|,
name|Tag_Ascent
argument_list|)
operator|.
name|value
argument_list|<
name|qreal
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|descent
name|QFixed
name|QFontEngineQPF2
operator|::
name|descent
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromReal
argument_list|(
name|extractHeaderField
argument_list|(
name|fontData
argument_list|,
name|Tag_Descent
argument_list|)
operator|.
name|value
argument_list|<
name|qreal
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|leading
name|QFixed
name|QFontEngineQPF2
operator|::
name|leading
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromReal
argument_list|(
name|extractHeaderField
argument_list|(
name|fontData
argument_list|,
name|Tag_Leading
argument_list|)
operator|.
name|value
argument_list|<
name|qreal
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|maxCharWidth
name|qreal
name|QFontEngineQPF2
operator|::
name|maxCharWidth
parameter_list|()
specifier|const
block|{
return|return
name|extractHeaderField
argument_list|(
name|fontData
argument_list|,
name|Tag_MaxCharWidth
argument_list|)
operator|.
name|value
argument_list|<
name|qreal
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|minLeftBearing
name|qreal
name|QFontEngineQPF2
operator|::
name|minLeftBearing
parameter_list|()
specifier|const
block|{
return|return
name|extractHeaderField
argument_list|(
name|fontData
argument_list|,
name|Tag_MinLeftBearing
argument_list|)
operator|.
name|value
argument_list|<
name|qreal
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|minRightBearing
name|qreal
name|QFontEngineQPF2
operator|::
name|minRightBearing
parameter_list|()
specifier|const
block|{
return|return
name|extractHeaderField
argument_list|(
name|fontData
argument_list|,
name|Tag_MinRightBearing
argument_list|)
operator|.
name|value
argument_list|<
name|qreal
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|underlinePosition
name|QFixed
name|QFontEngineQPF2
operator|::
name|underlinePosition
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromReal
argument_list|(
name|extractHeaderField
argument_list|(
name|fontData
argument_list|,
name|Tag_UnderlinePosition
argument_list|)
operator|.
name|value
argument_list|<
name|qreal
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|lineThickness
name|QFixed
name|QFontEngineQPF2
operator|::
name|lineThickness
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromReal
argument_list|(
name|extractHeaderField
argument_list|(
name|fontData
argument_list|,
name|Tag_LineThickness
argument_list|)
operator|.
name|value
argument_list|<
name|qreal
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QFontEngineQPF2
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
name|fontData
operator|&&
name|dataSize
operator|&&
name|cmapOffset
operator|&&
name|glyphMapOffset
operator|&&
name|glyphDataOffset
operator|&&
name|glyphDataSize
operator|>
literal|0
return|;
block|}
end_function
begin_function
DECL|function|generate
name|void
name|QPF2Generator
operator|::
name|generate
parameter_list|()
block|{
name|writeHeader
argument_list|()
expr_stmt|;
name|writeGMap
argument_list|()
expr_stmt|;
name|writeBlock
argument_list|(
name|QFontEngineQPF2
operator|::
name|GlyphBlock
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|dev
operator|->
name|seek
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// position of header.lock
name|writeUInt32
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeHeader
name|void
name|QPF2Generator
operator|::
name|writeHeader
parameter_list|()
block|{
name|QFontEngineQPF2
operator|::
name|Header
name|header
decl_stmt|;
name|header
operator|.
name|magic
index|[
literal|0
index|]
operator|=
literal|'Q'
expr_stmt|;
name|header
operator|.
name|magic
index|[
literal|1
index|]
operator|=
literal|'P'
expr_stmt|;
name|header
operator|.
name|magic
index|[
literal|2
index|]
operator|=
literal|'F'
expr_stmt|;
name|header
operator|.
name|magic
index|[
literal|3
index|]
operator|=
literal|'2'
expr_stmt|;
name|header
operator|.
name|lock
operator|=
literal|1
expr_stmt|;
name|header
operator|.
name|majorVersion
operator|=
name|QFontEngineQPF2
operator|::
name|CurrentMajorVersion
expr_stmt|;
name|header
operator|.
name|minorVersion
operator|=
name|QFontEngineQPF2
operator|::
name|CurrentMinorVersion
expr_stmt|;
name|header
operator|.
name|dataSize
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|write
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|header
argument_list|,
sizeof|sizeof
argument_list|(
name|header
argument_list|)
argument_list|)
expr_stmt|;
name|writeTaggedString
argument_list|(
name|QFontEngineQPF2
operator|::
name|Tag_FontName
argument_list|,
name|fe
operator|->
name|fontDef
operator|.
name|family
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|QFontEngine
operator|::
name|FaceId
name|face
init|=
name|fe
operator|->
name|faceId
argument_list|()
decl_stmt|;
name|writeTaggedString
argument_list|(
name|QFontEngineQPF2
operator|::
name|Tag_FileName
argument_list|,
name|face
operator|.
name|filename
argument_list|)
expr_stmt|;
name|writeTaggedUInt32
argument_list|(
name|QFontEngineQPF2
operator|::
name|Tag_FileIndex
argument_list|,
name|face
operator|.
name|index
argument_list|)
expr_stmt|;
block|{
specifier|const
name|QByteArray
name|head
init|=
name|fe
operator|->
name|getSfntTable
argument_list|(
name|MAKE_TAG
argument_list|(
literal|'h'
argument_list|,
literal|'e'
argument_list|,
literal|'a'
argument_list|,
literal|'d'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|head
operator|.
name|size
argument_list|()
operator|>=
literal|4
condition|)
block|{
specifier|const
name|quint32
name|revision
init|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|head
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|writeTaggedUInt32
argument_list|(
name|QFontEngineQPF2
operator|::
name|Tag_FontRevision
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
block|}
name|writeTaggedQFixed
argument_list|(
name|QFontEngineQPF2
operator|::
name|Tag_Ascent
argument_list|,
name|fe
operator|->
name|ascent
argument_list|()
argument_list|)
expr_stmt|;
name|writeTaggedQFixed
argument_list|(
name|QFontEngineQPF2
operator|::
name|Tag_Descent
argument_list|,
name|fe
operator|->
name|descent
argument_list|()
argument_list|)
expr_stmt|;
name|writeTaggedQFixed
argument_list|(
name|QFontEngineQPF2
operator|::
name|Tag_Leading
argument_list|,
name|fe
operator|->
name|leading
argument_list|()
argument_list|)
expr_stmt|;
name|writeTaggedQFixed
argument_list|(
name|QFontEngineQPF2
operator|::
name|Tag_XHeight
argument_list|,
name|fe
operator|->
name|xHeight
argument_list|()
argument_list|)
expr_stmt|;
name|writeTaggedQFixed
argument_list|(
name|QFontEngineQPF2
operator|::
name|Tag_AverageCharWidth
argument_list|,
name|fe
operator|->
name|averageCharWidth
argument_list|()
argument_list|)
expr_stmt|;
name|writeTaggedQFixed
argument_list|(
name|QFontEngineQPF2
operator|::
name|Tag_MaxCharWidth
argument_list|,
name|QFixed
operator|::
name|fromReal
argument_list|(
name|fe
operator|->
name|maxCharWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writeTaggedQFixed
argument_list|(
name|QFontEngineQPF2
operator|::
name|Tag_LineThickness
argument_list|,
name|fe
operator|->
name|lineThickness
argument_list|()
argument_list|)
expr_stmt|;
name|writeTaggedQFixed
argument_list|(
name|QFontEngineQPF2
operator|::
name|Tag_MinLeftBearing
argument_list|,
name|QFixed
operator|::
name|fromReal
argument_list|(
name|fe
operator|->
name|minLeftBearing
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writeTaggedQFixed
argument_list|(
name|QFontEngineQPF2
operator|::
name|Tag_MinRightBearing
argument_list|,
name|QFixed
operator|::
name|fromReal
argument_list|(
name|fe
operator|->
name|minRightBearing
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writeTaggedQFixed
argument_list|(
name|QFontEngineQPF2
operator|::
name|Tag_UnderlinePosition
argument_list|,
name|fe
operator|->
name|underlinePosition
argument_list|()
argument_list|)
expr_stmt|;
name|writeTaggedUInt8
argument_list|(
name|QFontEngineQPF2
operator|::
name|Tag_PixelSize
argument_list|,
name|fe
operator|->
name|fontDef
operator|.
name|pixelSize
argument_list|)
expr_stmt|;
name|writeTaggedUInt8
argument_list|(
name|QFontEngineQPF2
operator|::
name|Tag_Weight
argument_list|,
name|fe
operator|->
name|fontDef
operator|.
name|weight
argument_list|)
expr_stmt|;
name|writeTaggedUInt8
argument_list|(
name|QFontEngineQPF2
operator|::
name|Tag_Style
argument_list|,
name|fe
operator|->
name|fontDef
operator|.
name|style
argument_list|)
expr_stmt|;
name|writeTaggedUInt8
argument_list|(
name|QFontEngineQPF2
operator|::
name|Tag_GlyphFormat
argument_list|,
name|QFontEngineQPF2
operator|::
name|AlphamapGlyphs
argument_list|)
expr_stmt|;
name|writeTaggedString
argument_list|(
name|QFontEngineQPF2
operator|::
name|Tag_EndOfHeader
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|align4
argument_list|()
expr_stmt|;
specifier|const
name|quint64
name|size
init|=
name|dev
operator|->
name|pos
argument_list|()
decl_stmt|;
name|header
operator|.
name|dataSize
operator|=
name|qToBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|size
operator|-
sizeof|sizeof
argument_list|(
name|header
argument_list|)
argument_list|)
expr_stmt|;
name|dev
operator|->
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dev
operator|->
name|write
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|header
argument_list|,
sizeof|sizeof
argument_list|(
name|header
argument_list|)
argument_list|)
expr_stmt|;
name|dev
operator|->
name|seek
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeGMap
name|void
name|QPF2Generator
operator|::
name|writeGMap
parameter_list|()
block|{
specifier|const
name|quint16
name|glyphCount
init|=
name|fe
operator|->
name|glyphCount
argument_list|()
decl_stmt|;
name|writeUInt16
argument_list|(
name|QFontEngineQPF2
operator|::
name|GMapBlock
argument_list|)
expr_stmt|;
name|writeUInt16
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// padding
name|writeUInt32
argument_list|(
name|glyphCount
operator|*
literal|4
argument_list|)
expr_stmt|;
name|QByteArray
modifier|&
name|buffer
init|=
name|dev
operator|->
name|buffer
argument_list|()
decl_stmt|;
specifier|const
name|int
name|numBytes
init|=
name|glyphCount
operator|*
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
decl_stmt|;
name|qint64
name|pos
init|=
name|buffer
operator|.
name|size
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|resize
argument_list|(
name|pos
operator|+
name|numBytes
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
operator|+
name|pos
argument_list|,
literal|0xff
argument_list|,
name|numBytes
argument_list|)
expr_stmt|;
name|dev
operator|->
name|seek
argument_list|(
name|pos
operator|+
name|numBytes
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeBlock
name|void
name|QPF2Generator
operator|::
name|writeBlock
parameter_list|(
name|QFontEngineQPF2
operator|::
name|BlockTag
name|tag
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
block|{
name|writeUInt16
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|writeUInt16
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// padding
specifier|const
name|int
name|padSize
init|=
operator|(
operator|(
name|data
operator|.
name|size
argument_list|()
operator|+
literal|3
operator|)
operator|/
literal|4
operator|)
operator|*
literal|4
operator|-
name|data
operator|.
name|size
argument_list|()
decl_stmt|;
name|writeUInt32
argument_list|(
name|data
operator|.
name|size
argument_list|()
operator|+
name|padSize
argument_list|)
expr_stmt|;
name|dev
operator|->
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|padSize
condition|;
operator|++
name|i
control|)
name|writeUInt8
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeTaggedString
name|void
name|QPF2Generator
operator|::
name|writeTaggedString
parameter_list|(
name|QFontEngineQPF2
operator|::
name|HeaderTag
name|tag
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|string
parameter_list|)
block|{
name|writeUInt16
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|writeUInt16
argument_list|(
name|string
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|dev
operator|->
name|write
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeTaggedUInt32
name|void
name|QPF2Generator
operator|::
name|writeTaggedUInt32
parameter_list|(
name|QFontEngineQPF2
operator|::
name|HeaderTag
name|tag
parameter_list|,
name|quint32
name|value
parameter_list|)
block|{
name|writeUInt16
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|writeUInt16
argument_list|(
sizeof|sizeof
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|writeUInt32
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeTaggedUInt8
name|void
name|QPF2Generator
operator|::
name|writeTaggedUInt8
parameter_list|(
name|QFontEngineQPF2
operator|::
name|HeaderTag
name|tag
parameter_list|,
name|quint8
name|value
parameter_list|)
block|{
name|writeUInt16
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|writeUInt16
argument_list|(
sizeof|sizeof
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|writeUInt8
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeTaggedQFixed
name|void
name|QPF2Generator
operator|::
name|writeTaggedQFixed
parameter_list|(
name|QFontEngineQPF2
operator|::
name|HeaderTag
name|tag
parameter_list|,
name|QFixed
name|value
parameter_list|)
block|{
name|writeUInt16
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|writeUInt16
argument_list|(
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
argument_list|)
expr_stmt|;
name|writeUInt32
argument_list|(
name|value
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
