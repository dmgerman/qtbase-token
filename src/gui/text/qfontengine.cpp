begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<private/qfontengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qfontengineglyphcache_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformfontdatabase.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformintegration.h>
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qpainterpath.h"
end_include
begin_include
include|#
directive|include
file|"qvarlengtharray.h"
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_include
include|#
directive|include
file|<qendian.h>
end_include
begin_include
include|#
directive|include
file|<private/qstringiterator_p.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_ENABLE_HARFBUZZ_NG
end_ifdef
begin_include
include|#
directive|include
file|"qharfbuzzng_p.h"
end_include
begin_include
include|#
directive|include
file|<harfbuzz/hb-ot.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<private/qharfbuzz_p.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|qtransform_equals_no_translate
specifier|static
specifier|inline
name|bool
name|qtransform_equals_no_translate
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|a
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|type
argument_list|()
operator|<=
name|QTransform
operator|::
name|TxTranslate
operator|&&
name|b
operator|.
name|type
argument_list|()
operator|<=
name|QTransform
operator|::
name|TxTranslate
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// We always use paths for perspective text anyway, so no
comment|// point in checking the full matrix...
name|Q_ASSERT
argument_list|(
name|a
operator|.
name|type
argument_list|()
operator|<
name|QTransform
operator|::
name|TxProject
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|b
operator|.
name|type
argument_list|()
operator|<
name|QTransform
operator|::
name|TxProject
argument_list|)
expr_stmt|;
return|return
name|a
operator|.
name|m11
argument_list|()
operator|==
name|b
operator|.
name|m11
argument_list|()
operator|&&
name|a
operator|.
name|m12
argument_list|()
operator|==
name|b
operator|.
name|m12
argument_list|()
operator|&&
name|a
operator|.
name|m21
argument_list|()
operator|==
name|b
operator|.
name|m21
argument_list|()
operator|&&
name|a
operator|.
name|m22
argument_list|()
operator|==
name|b
operator|.
name|m22
argument_list|()
return|;
block|}
block|}
end_function
begin_comment
comment|// Harfbuzz helper functions
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_ENABLE_HARFBUZZ_NG
end_ifdef
begin_decl_stmt
DECL|variable|useHarfbuzzNG
name|bool
name|useHarfbuzzNG
init|=
name|qgetenv
argument_list|(
literal|"QT_HARFBUZZ"
argument_list|)
operator|!=
literal|"old"
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
DECL|variable|sizeof
name|Q_STATIC_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|HB_Glyph
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|glyph_t
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|sizeof
name|Q_STATIC_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|HB_Fixed
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|QFixed
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|hb_stringToGlyphs
specifier|static
name|HB_Bool
name|hb_stringToGlyphs
parameter_list|(
name|HB_Font
name|font
parameter_list|,
specifier|const
name|HB_UChar16
modifier|*
name|string
parameter_list|,
name|hb_uint32
name|length
parameter_list|,
name|HB_Glyph
modifier|*
name|glyphs
parameter_list|,
name|hb_uint32
modifier|*
name|numGlyphs
parameter_list|,
name|HB_Bool
name|rightToLeft
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
operator|(
name|QFontEngine
operator|*
operator|)
name|font
operator|->
name|userData
decl_stmt|;
specifier|const
name|QChar
modifier|*
name|str
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|QChar
operator|*
argument_list|>
argument_list|(
name|string
argument_list|)
decl_stmt|;
name|QGlyphLayout
name|qglyphs
decl_stmt|;
name|qglyphs
operator|.
name|numGlyphs
operator|=
operator|*
name|numGlyphs
expr_stmt|;
name|qglyphs
operator|.
name|glyphs
operator|=
name|glyphs
expr_stmt|;
name|int
name|nGlyphs
init|=
operator|*
name|numGlyphs
decl_stmt|;
name|bool
name|result
init|=
name|fe
operator|->
name|stringToCMap
argument_list|(
name|str
argument_list|,
name|length
argument_list|,
operator|&
name|qglyphs
argument_list|,
operator|&
name|nGlyphs
argument_list|,
name|QFontEngine
operator|::
name|GlyphIndicesOnly
argument_list|)
decl_stmt|;
operator|*
name|numGlyphs
operator|=
name|nGlyphs
expr_stmt|;
if|if
condition|(
name|rightToLeft
operator|&&
name|result
operator|&&
operator|!
name|fe
operator|->
name|symbol
condition|)
block|{
name|QStringIterator
name|it
argument_list|(
name|str
argument_list|,
name|str
operator|+
name|length
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|const
name|uint
name|ucs4
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|const
name|uint
name|mirrored
init|=
name|QChar
operator|::
name|mirroredChar
argument_list|(
name|ucs4
argument_list|)
decl_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|mirrored
operator|!=
name|ucs4
argument_list|)
condition|)
operator|*
name|glyphs
operator|=
name|fe
operator|->
name|glyphIndex
argument_list|(
name|mirrored
argument_list|)
expr_stmt|;
operator|++
name|glyphs
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|hb_getAdvances
specifier|static
name|void
name|hb_getAdvances
parameter_list|(
name|HB_Font
name|font
parameter_list|,
specifier|const
name|HB_Glyph
modifier|*
name|glyphs
parameter_list|,
name|hb_uint32
name|numGlyphs
parameter_list|,
name|HB_Fixed
modifier|*
name|advances
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
operator|(
name|QFontEngine
operator|*
operator|)
name|font
operator|->
name|userData
decl_stmt|;
name|QGlyphLayout
name|qglyphs
decl_stmt|;
name|qglyphs
operator|.
name|numGlyphs
operator|=
name|numGlyphs
expr_stmt|;
name|qglyphs
operator|.
name|glyphs
operator|=
cast|const_cast
argument_list|<
name|glyph_t
operator|*
argument_list|>
argument_list|(
name|glyphs
argument_list|)
expr_stmt|;
name|qglyphs
operator|.
name|advances
operator|=
cast|reinterpret_cast
argument_list|<
name|QFixed
operator|*
argument_list|>
argument_list|(
name|advances
argument_list|)
expr_stmt|;
name|fe
operator|->
name|recalcAdvances
argument_list|(
operator|&
name|qglyphs
argument_list|,
operator|(
name|flags
operator|&
name|HB_ShaperFlag_UseDesignMetrics
operator|)
condition|?
name|QFontEngine
operator|::
name|DesignMetrics
else|:
name|QFontEngine
operator|::
name|ShaperFlags
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hb_canRender
specifier|static
name|HB_Bool
name|hb_canRender
parameter_list|(
name|HB_Font
name|font
parameter_list|,
specifier|const
name|HB_UChar16
modifier|*
name|string
parameter_list|,
name|hb_uint32
name|length
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
operator|(
name|QFontEngine
operator|*
operator|)
name|font
operator|->
name|userData
decl_stmt|;
return|return
name|fe
operator|->
name|canRender
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|QChar
operator|*
argument_list|>
argument_list|(
name|string
argument_list|)
argument_list|,
name|length
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|hb_getGlyphMetrics
specifier|static
name|void
name|hb_getGlyphMetrics
parameter_list|(
name|HB_Font
name|font
parameter_list|,
name|HB_Glyph
name|glyph
parameter_list|,
name|HB_GlyphMetrics
modifier|*
name|metrics
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
operator|(
name|QFontEngine
operator|*
operator|)
name|font
operator|->
name|userData
decl_stmt|;
name|glyph_metrics_t
name|m
init|=
name|fe
operator|->
name|boundingBox
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
name|metrics
operator|->
name|x
operator|=
name|m
operator|.
name|x
operator|.
name|value
argument_list|()
expr_stmt|;
name|metrics
operator|->
name|y
operator|=
name|m
operator|.
name|y
operator|.
name|value
argument_list|()
expr_stmt|;
name|metrics
operator|->
name|width
operator|=
name|m
operator|.
name|width
operator|.
name|value
argument_list|()
expr_stmt|;
name|metrics
operator|->
name|height
operator|=
name|m
operator|.
name|height
operator|.
name|value
argument_list|()
expr_stmt|;
name|metrics
operator|->
name|xOffset
operator|=
name|m
operator|.
name|xoff
operator|.
name|value
argument_list|()
expr_stmt|;
name|metrics
operator|->
name|yOffset
operator|=
name|m
operator|.
name|yoff
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hb_getFontMetric
specifier|static
name|HB_Fixed
name|hb_getFontMetric
parameter_list|(
name|HB_Font
name|font
parameter_list|,
name|HB_FontMetric
name|metric
parameter_list|)
block|{
if|if
condition|(
name|metric
operator|==
name|HB_FontAscent
condition|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
operator|(
name|QFontEngine
operator|*
operator|)
name|font
operator|->
name|userData
decl_stmt|;
return|return
name|fe
operator|->
name|ascent
argument_list|()
operator|.
name|value
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|getPointInOutline
name|int
name|QFontEngine
operator|::
name|getPointInOutline
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|int
name|flags
parameter_list|,
name|quint32
name|point
parameter_list|,
name|QFixed
modifier|*
name|xpos
parameter_list|,
name|QFixed
modifier|*
name|ypos
parameter_list|,
name|quint32
modifier|*
name|nPoints
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|glyph
argument_list|)
name|Q_UNUSED
argument_list|(
argument|flags
argument_list|)
name|Q_UNUSED
argument_list|(
argument|point
argument_list|)
name|Q_UNUSED
argument_list|(
argument|xpos
argument_list|)
name|Q_UNUSED
argument_list|(
argument|ypos
argument_list|)
name|Q_UNUSED
argument_list|(
argument|nPoints
argument_list|)
return|return
name|Err_Not_Covered
return|;
block|}
end_function
begin_function
DECL|function|hb_getPointInOutline
specifier|static
name|HB_Error
name|hb_getPointInOutline
parameter_list|(
name|HB_Font
name|font
parameter_list|,
name|HB_Glyph
name|glyph
parameter_list|,
name|int
name|flags
parameter_list|,
name|hb_uint32
name|point
parameter_list|,
name|HB_Fixed
modifier|*
name|xpos
parameter_list|,
name|HB_Fixed
modifier|*
name|ypos
parameter_list|,
name|hb_uint32
modifier|*
name|nPoints
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
operator|(
name|QFontEngine
operator|*
operator|)
name|font
operator|->
name|userData
decl_stmt|;
return|return
operator|(
name|HB_Error
operator|)
name|fe
operator|->
name|getPointInOutline
argument_list|(
name|glyph
argument_list|,
name|flags
argument_list|,
name|point
argument_list|,
operator|(
name|QFixed
operator|*
operator|)
name|xpos
argument_list|,
operator|(
name|QFixed
operator|*
operator|)
name|ypos
argument_list|,
operator|(
name|quint32
operator|*
operator|)
name|nPoints
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|hb_fontClass
specifier|static
specifier|const
name|HB_FontClass
name|hb_fontClass
init|=
block|{
name|hb_stringToGlyphs
block|,
name|hb_getAdvances
block|,
name|hb_canRender
block|,
name|hb_getPointInOutline
block|,
name|hb_getGlyphMetrics
block|,
name|hb_getFontMetric
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|hb_getSFntTable
specifier|static
name|HB_Error
name|hb_getSFntTable
parameter_list|(
name|void
modifier|*
name|font
parameter_list|,
name|HB_Tag
name|tableTag
parameter_list|,
name|HB_Byte
modifier|*
name|buffer
parameter_list|,
name|HB_UInt
modifier|*
name|length
parameter_list|)
block|{
name|QFontEngine
operator|::
name|FaceData
modifier|*
name|data
init|=
operator|(
name|QFontEngine
operator|::
name|FaceData
operator|*
operator|)
name|font
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|qt_get_font_table_func_t
name|get_font_table
init|=
name|data
operator|->
name|get_font_table
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|get_font_table
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|get_font_table
argument_list|(
name|data
operator|->
name|user_data
argument_list|,
name|tableTag
argument_list|,
name|buffer
argument_list|,
name|length
argument_list|)
condition|)
return|return
name|HB_Err_Invalid_Argument
return|;
return|return
name|HB_Err_Ok
return|;
block|}
end_function
begin_function
DECL|function|hb_freeFace
specifier|static
name|void
name|hb_freeFace
parameter_list|(
name|void
modifier|*
name|face
parameter_list|)
block|{
name|qHBFreeFace
argument_list|(
operator|(
name|HB_Face
operator|)
name|face
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_get_font_table_default
specifier|static
name|bool
name|qt_get_font_table_default
parameter_list|(
name|void
modifier|*
name|user_data
parameter_list|,
name|uint
name|tag
parameter_list|,
name|uchar
modifier|*
name|buffer
parameter_list|,
name|uint
modifier|*
name|length
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
operator|(
name|QFontEngine
operator|*
operator|)
name|user_data
decl_stmt|;
return|return
name|fe
operator|->
name|getSfntTableData
argument_list|(
name|tag
argument_list|,
name|buffer
argument_list|,
name|length
argument_list|)
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_comment
comment|// for testing purpose only, not thread-safe!
end_comment
begin_decl_stmt
DECL|variable|enginesCollector
specifier|static
name|QList
argument_list|<
name|QFontEngine
modifier|*
argument_list|>
modifier|*
name|enginesCollector
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|QFontEngine_startCollectingEngines
name|Q_AUTOTEST_EXPORT
name|void
name|QFontEngine_startCollectingEngines
parameter_list|()
block|{
operator|delete
name|enginesCollector
expr_stmt|;
name|enginesCollector
operator|=
operator|new
name|QList
argument_list|<
name|QFontEngine
operator|*
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QFontEngine_stopCollectingEngines
name|Q_AUTOTEST_EXPORT
name|QList
argument_list|<
name|QFontEngine
modifier|*
argument_list|>
name|QFontEngine_stopCollectingEngines
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|enginesCollector
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QFontEngine
modifier|*
argument_list|>
name|ret
init|=
operator|*
name|enginesCollector
decl_stmt|;
operator|delete
name|enginesCollector
expr_stmt|;
name|enginesCollector
operator|=
literal|0
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_BUILD_INTERNAL
end_comment
begin_comment
comment|// QFontEngine
end_comment
begin_constructor
DECL|function|QFontEngine
name|QFontEngine
operator|::
name|QFontEngine
parameter_list|(
name|Type
name|type
parameter_list|)
member_init_list|:
name|m_type
argument_list|(
name|type
argument_list|)
member_init_list|,
name|ref
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|font_
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|font_destroy_func
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|face_
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|face_destroy_func
argument_list|(
literal|0
argument_list|)
block|{
name|faceData
operator|.
name|user_data
operator|=
name|this
expr_stmt|;
name|faceData
operator|.
name|get_font_table
operator|=
name|qt_get_font_table_default
expr_stmt|;
name|cache_cost
operator|=
literal|0
expr_stmt|;
name|fsType
operator|=
literal|0
expr_stmt|;
name|symbol
operator|=
literal|false
expr_stmt|;
name|glyphFormat
operator|=
name|Format_None
expr_stmt|;
name|m_subPixelPositionCount
operator|=
literal|0
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
if|if
condition|(
name|enginesCollector
condition|)
name|enginesCollector
operator|->
name|append
argument_list|(
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QFontEngine
name|QFontEngine
operator|::
name|~
name|QFontEngine
parameter_list|()
block|{
name|m_glyphCaches
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|font_
operator|&&
name|font_destroy_func
condition|)
block|{
name|font_destroy_func
argument_list|(
name|font_
argument_list|)
expr_stmt|;
name|font_
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|face_
operator|&&
name|face_destroy_func
condition|)
block|{
name|face_destroy_func
argument_list|(
name|face_
argument_list|)
expr_stmt|;
name|face_
operator|=
literal|0
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
if|if
condition|(
name|enginesCollector
condition|)
name|enginesCollector
operator|->
name|removeOne
argument_list|(
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_function
DECL|function|lineThickness
name|QFixed
name|QFontEngine
operator|::
name|lineThickness
parameter_list|()
specifier|const
block|{
comment|// ad hoc algorithm
name|int
name|score
init|=
name|fontDef
operator|.
name|weight
operator|*
name|fontDef
operator|.
name|pixelSize
decl_stmt|;
name|int
name|lw
init|=
name|score
operator|/
literal|700
decl_stmt|;
comment|// looks better with thicker line for small pointsizes
if|if
condition|(
name|lw
operator|<
literal|2
operator|&&
name|score
operator|>=
literal|1050
condition|)
name|lw
operator|=
literal|2
expr_stmt|;
if|if
condition|(
name|lw
operator|==
literal|0
condition|)
name|lw
operator|=
literal|1
expr_stmt|;
return|return
name|lw
return|;
block|}
end_function
begin_function
DECL|function|underlinePosition
name|QFixed
name|QFontEngine
operator|::
name|underlinePosition
parameter_list|()
specifier|const
block|{
return|return
operator|(
operator|(
name|lineThickness
argument_list|()
operator|*
literal|2
operator|)
operator|+
literal|3
operator|)
operator|/
literal|6
return|;
block|}
end_function
begin_function
DECL|function|harfbuzzFont
name|void
modifier|*
name|QFontEngine
operator|::
name|harfbuzzFont
parameter_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|type
argument_list|()
operator|!=
name|QFontEngine
operator|::
name|Multi
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_ENABLE_HARFBUZZ_NG
if|if
condition|(
name|useHarfbuzzNG
condition|)
return|return
name|hb_qt_font_get_for_engine
argument_list|(
cast|const_cast
argument_list|<
name|QFontEngine
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|font_
condition|)
block|{
name|HB_Face
name|hbFace
init|=
operator|(
name|HB_Face
operator|)
name|harfbuzzFace
argument_list|()
decl_stmt|;
if|if
condition|(
name|hbFace
operator|->
name|font_for_init
condition|)
block|{
name|void
modifier|*
name|data
init|=
name|hbFace
operator|->
name|font_for_init
decl_stmt|;
name|q_check_ptr
argument_list|(
name|qHBLoadFace
argument_list|(
name|hbFace
argument_list|)
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|HB_FontRec
modifier|*
name|hbFont
init|=
operator|(
name|HB_FontRec
operator|*
operator|)
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
name|HB_FontRec
argument_list|)
argument_list|)
decl_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|hbFont
argument_list|)
expr_stmt|;
name|hbFont
operator|->
name|klass
operator|=
operator|&
name|hb_fontClass
expr_stmt|;
name|hbFont
operator|->
name|userData
operator|=
cast|const_cast
argument_list|<
name|QFontEngine
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|qint64
name|emSquare
init|=
name|emSquareSize
argument_list|()
operator|.
name|truncate
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|emSquare
operator|==
name|emSquareSize
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
comment|// ensure no truncation
if|if
condition|(
name|emSquare
operator|==
literal|0
condition|)
name|emSquare
operator|=
literal|1000
expr_stmt|;
comment|// a fallback value suitable for Type1 fonts
name|hbFont
operator|->
name|y_ppem
operator|=
name|fontDef
operator|.
name|pixelSize
expr_stmt|;
name|hbFont
operator|->
name|x_ppem
operator|=
name|fontDef
operator|.
name|pixelSize
operator|*
name|fontDef
operator|.
name|stretch
operator|/
literal|100
expr_stmt|;
comment|// same as QFixed(x)/QFixed(emSquare) but without int32 overflow for x
name|hbFont
operator|->
name|x_scale
operator|=
operator|(
operator|(
operator|(
name|qint64
operator|)
name|hbFont
operator|->
name|x_ppem
operator|<<
literal|6
operator|)
operator|*
literal|0x10000L
operator|+
operator|(
name|emSquare
operator|>>
literal|1
operator|)
operator|)
operator|/
name|emSquare
expr_stmt|;
name|hbFont
operator|->
name|y_scale
operator|=
operator|(
operator|(
operator|(
name|qint64
operator|)
name|hbFont
operator|->
name|y_ppem
operator|<<
literal|6
operator|)
operator|*
literal|0x10000L
operator|+
operator|(
name|emSquare
operator|>>
literal|1
operator|)
operator|)
operator|/
name|emSquare
expr_stmt|;
name|font_
operator|=
operator|(
name|void
operator|*
operator|)
name|hbFont
expr_stmt|;
name|font_destroy_func
operator|=
name|free
expr_stmt|;
block|}
return|return
name|font_
return|;
block|}
end_function
begin_function
DECL|function|harfbuzzFace
name|void
modifier|*
name|QFontEngine
operator|::
name|harfbuzzFace
parameter_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|type
argument_list|()
operator|!=
name|QFontEngine
operator|::
name|Multi
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_ENABLE_HARFBUZZ_NG
if|if
condition|(
name|useHarfbuzzNG
condition|)
return|return
name|hb_qt_face_get_for_engine
argument_list|(
cast|const_cast
argument_list|<
name|QFontEngine
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|face_
condition|)
block|{
name|QFontEngine
operator|::
name|FaceData
modifier|*
name|data
init|=
operator|(
name|QFontEngine
operator|::
name|FaceData
operator|*
operator|)
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
name|QFontEngine
operator|::
name|FaceData
argument_list|)
argument_list|)
decl_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|data
operator|->
name|user_data
operator|=
name|faceData
operator|.
name|user_data
expr_stmt|;
name|data
operator|->
name|get_font_table
operator|=
name|faceData
operator|.
name|get_font_table
expr_stmt|;
name|HB_Face
name|hbFace
init|=
name|qHBNewFace
argument_list|(
name|data
argument_list|,
name|hb_getSFntTable
argument_list|)
decl_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|hbFace
argument_list|)
expr_stmt|;
name|hbFace
operator|->
name|isSymbolFont
operator|=
name|symbol
expr_stmt|;
name|face_
operator|=
operator|(
name|void
operator|*
operator|)
name|hbFace
expr_stmt|;
name|face_destroy_func
operator|=
name|hb_freeFace
expr_stmt|;
block|}
return|return
name|face_
return|;
block|}
end_function
begin_function
DECL|function|supportsScript
name|bool
name|QFontEngine
operator|::
name|supportsScript
parameter_list|(
name|QChar
operator|::
name|Script
name|script
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|type
argument_list|()
operator|<=
name|QFontEngine
operator|::
name|Multi
condition|)
return|return
literal|true
return|;
comment|// ### TODO: This only works for scripts that require OpenType. More generally
comment|// for scripts that do not require OpenType we should just look at the list of
comment|// supported writing systems in the font's OS/2 table.
if|if
condition|(
operator|!
operator|(
operator|(
name|script
operator|>=
name|QChar
operator|::
name|Script_Syriac
operator|&&
name|script
operator|<=
name|QChar
operator|::
name|Script_Sinhala
operator|)
operator|||
name|script
operator|==
name|QChar
operator|::
name|Script_Khmer
operator|||
name|script
operator|==
name|QChar
operator|::
name|Script_Nko
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
ifdef|#
directive|ifdef
name|Q_OS_MAC
block|{
comment|// in AAT fonts, 'gsub' table is effectively replaced by 'mort'/'morx' table
name|uint
name|len
decl_stmt|;
if|if
condition|(
name|getSfntTableData
argument_list|(
name|MAKE_TAG
argument_list|(
literal|'m'
argument_list|,
literal|'o'
argument_list|,
literal|'r'
argument_list|,
literal|'t'
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|&
name|len
argument_list|)
operator|||
name|getSfntTableData
argument_list|(
name|MAKE_TAG
argument_list|(
literal|'m'
argument_list|,
literal|'o'
argument_list|,
literal|'r'
argument_list|,
literal|'x'
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|&
name|len
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_ENABLE_HARFBUZZ_NG
if|if
condition|(
name|useHarfbuzzNG
condition|)
block|{
name|bool
name|ret
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|hb_face_t
modifier|*
name|face
init|=
name|hb_qt_face_get_for_engine
argument_list|(
cast|const_cast
argument_list|<
name|QFontEngine
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
argument_list|)
condition|)
block|{
name|hb_tag_t
name|script_tag_1
decl_stmt|,
name|script_tag_2
decl_stmt|;
name|hb_ot_tags_from_script
argument_list|(
name|hb_qt_script_to_script
argument_list|(
name|script
argument_list|)
argument_list|,
operator|&
name|script_tag_1
argument_list|,
operator|&
name|script_tag_2
argument_list|)
expr_stmt|;
name|unsigned
name|int
name|script_index
decl_stmt|;
name|ret
operator|=
name|hb_ot_layout_table_find_script
argument_list|(
name|face
argument_list|,
name|HB_OT_TAG_GSUB
argument_list|,
name|script_tag_1
argument_list|,
operator|&
name|script_index
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
block|{
name|ret
operator|=
name|hb_ot_layout_table_find_script
argument_list|(
name|face
argument_list|,
name|HB_OT_TAG_GSUB
argument_list|,
name|script_tag_2
argument_list|,
operator|&
name|script_index
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ret
operator|&&
name|script_tag_2
operator|!=
name|HB_OT_TAG_DEFAULT_SCRIPT
condition|)
name|ret
operator|=
name|hb_ot_layout_table_find_script
argument_list|(
name|face
argument_list|,
name|HB_OT_TAG_GSUB
argument_list|,
name|HB_OT_TAG_DEFAULT_SCRIPT
argument_list|,
operator|&
name|script_index
argument_list|)
expr_stmt|;
block|}
name|hb_face_destroy
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
endif|#
directive|endif
name|HB_Face
name|hbFace
init|=
operator|(
name|HB_Face
operator|)
name|harfbuzzFace
argument_list|()
decl_stmt|;
if|if
condition|(
name|hbFace
operator|->
name|font_for_init
condition|)
block|{
name|void
modifier|*
name|data
init|=
name|hbFace
operator|->
name|font_for_init
decl_stmt|;
name|q_check_ptr
argument_list|(
name|qHBLoadFace
argument_list|(
name|hbFace
argument_list|)
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|hbFace
operator|->
name|supported_scripts
index|[
name|script_to_hbscript
argument_list|(
name|script
argument_list|)
index|]
return|;
block|}
end_function
begin_function
DECL|function|canRender
name|bool
name|QFontEngine
operator|::
name|canRender
parameter_list|(
specifier|const
name|QChar
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|)
specifier|const
block|{
name|QStringIterator
name|it
argument_list|(
name|str
argument_list|,
name|str
operator|+
name|len
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|glyphIndex
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngine
operator|::
name|boundingBox
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|)
block|{
name|glyph_metrics_t
name|metrics
init|=
name|boundingBox
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
if|if
condition|(
name|matrix
operator|.
name|type
argument_list|()
operator|>
name|QTransform
operator|::
name|TxTranslate
condition|)
block|{
return|return
name|metrics
operator|.
name|transformed
argument_list|(
name|matrix
argument_list|)
return|;
block|}
return|return
name|metrics
return|;
block|}
end_function
begin_function
DECL|function|xHeight
name|QFixed
name|QFontEngine
operator|::
name|xHeight
parameter_list|()
specifier|const
block|{
specifier|const
name|glyph_t
name|glyph
init|=
name|glyphIndex
argument_list|(
literal|'x'
argument_list|)
decl_stmt|;
name|glyph_metrics_t
name|bb
init|=
cast|const_cast
argument_list|<
name|QFontEngine
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|boundingBox
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
return|return
name|bb
operator|.
name|height
return|;
block|}
end_function
begin_function
DECL|function|averageCharWidth
name|QFixed
name|QFontEngine
operator|::
name|averageCharWidth
parameter_list|()
specifier|const
block|{
specifier|const
name|glyph_t
name|glyph
init|=
name|glyphIndex
argument_list|(
literal|'x'
argument_list|)
decl_stmt|;
name|glyph_metrics_t
name|bb
init|=
cast|const_cast
argument_list|<
name|QFontEngine
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|boundingBox
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
return|return
name|bb
operator|.
name|xoff
return|;
block|}
end_function
begin_function
DECL|function|supportsTransformation
name|bool
name|QFontEngine
operator|::
name|supportsTransformation
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|)
specifier|const
block|{
return|return
name|transform
operator|.
name|type
argument_list|()
operator|<
name|QTransform
operator|::
name|TxProject
return|;
block|}
end_function
begin_function
DECL|function|getGlyphPositions
name|void
name|QFontEngine
operator|::
name|getGlyphPositions
parameter_list|(
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|QTextItem
operator|::
name|RenderFlags
name|flags
parameter_list|,
name|QVarLengthArray
argument_list|<
name|glyph_t
argument_list|>
modifier|&
name|glyphs_out
parameter_list|,
name|QVarLengthArray
argument_list|<
name|QFixedPoint
argument_list|>
modifier|&
name|positions
parameter_list|)
block|{
name|QFixed
name|xpos
decl_stmt|;
name|QFixed
name|ypos
decl_stmt|;
specifier|const
name|bool
name|transform
init|=
name|matrix
operator|.
name|m11
argument_list|()
operator|!=
literal|1.
operator|||
name|matrix
operator|.
name|m12
argument_list|()
operator|!=
literal|0.
operator|||
name|matrix
operator|.
name|m21
argument_list|()
operator|!=
literal|0.
operator|||
name|matrix
operator|.
name|m22
argument_list|()
operator|!=
literal|1.
decl_stmt|;
if|if
condition|(
operator|!
name|transform
condition|)
block|{
name|xpos
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|matrix
operator|.
name|dx
argument_list|()
argument_list|)
expr_stmt|;
name|ypos
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|current
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|QTextItem
operator|::
name|RightToLeft
condition|)
block|{
name|int
name|i
init|=
name|glyphs
operator|.
name|numGlyphs
decl_stmt|;
name|int
name|totalKashidas
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|--
condition|)
block|{
if|if
condition|(
name|glyphs
operator|.
name|attributes
index|[
name|i
index|]
operator|.
name|dontPrint
condition|)
continue|continue;
name|xpos
operator|+=
name|glyphs
operator|.
name|advances
index|[
name|i
index|]
operator|+
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|glyphs
operator|.
name|justifications
index|[
name|i
index|]
operator|.
name|space_18d6
argument_list|)
expr_stmt|;
name|totalKashidas
operator|+=
name|glyphs
operator|.
name|justifications
index|[
name|i
index|]
operator|.
name|nKashidas
expr_stmt|;
block|}
name|positions
operator|.
name|resize
argument_list|(
name|glyphs
operator|.
name|numGlyphs
operator|+
name|totalKashidas
argument_list|)
expr_stmt|;
name|glyphs_out
operator|.
name|resize
argument_list|(
name|glyphs
operator|.
name|numGlyphs
operator|+
name|totalKashidas
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|i
operator|<
name|glyphs
operator|.
name|numGlyphs
condition|)
block|{
if|if
condition|(
name|glyphs
operator|.
name|attributes
index|[
name|i
index|]
operator|.
name|dontPrint
condition|)
block|{
operator|++
name|i
expr_stmt|;
continue|continue;
block|}
name|xpos
operator|-=
name|glyphs
operator|.
name|advances
index|[
name|i
index|]
expr_stmt|;
name|QFixed
name|gpos_x
init|=
name|xpos
operator|+
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|x
decl_stmt|;
name|QFixed
name|gpos_y
init|=
name|ypos
operator|+
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|y
decl_stmt|;
if|if
condition|(
name|transform
condition|)
block|{
name|QPointF
name|gpos
argument_list|(
name|gpos_x
operator|.
name|toReal
argument_list|()
argument_list|,
name|gpos_y
operator|.
name|toReal
argument_list|()
argument_list|)
decl_stmt|;
name|gpos
operator|=
name|gpos
operator|*
name|matrix
expr_stmt|;
name|gpos_x
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|gpos
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|gpos_y
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|gpos
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|positions
index|[
name|current
index|]
operator|.
name|x
operator|=
name|gpos_x
expr_stmt|;
name|positions
index|[
name|current
index|]
operator|.
name|y
operator|=
name|gpos_y
expr_stmt|;
name|glyphs_out
index|[
name|current
index|]
operator|=
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
expr_stmt|;
operator|++
name|current
expr_stmt|;
if|if
condition|(
name|glyphs
operator|.
name|justifications
index|[
name|i
index|]
operator|.
name|nKashidas
condition|)
block|{
name|QChar
name|ch
argument_list|(
literal|0x640
argument_list|)
decl_stmt|;
comment|// Kashida character
name|glyph_t
name|kashidaGlyph
init|=
name|glyphIndex
argument_list|(
name|ch
operator|.
name|unicode
argument_list|()
argument_list|)
decl_stmt|;
name|QFixed
name|kashidaWidth
decl_stmt|;
name|QGlyphLayout
name|g
decl_stmt|;
name|g
operator|.
name|numGlyphs
operator|=
literal|1
expr_stmt|;
name|g
operator|.
name|glyphs
operator|=
operator|&
name|kashidaGlyph
expr_stmt|;
name|g
operator|.
name|advances
operator|=
operator|&
name|kashidaWidth
expr_stmt|;
name|recalcAdvances
argument_list|(
operator|&
name|g
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|uint
name|k
init|=
literal|0
init|;
name|k
operator|<
name|glyphs
operator|.
name|justifications
index|[
name|i
index|]
operator|.
name|nKashidas
condition|;
operator|++
name|k
control|)
block|{
name|xpos
operator|-=
name|kashidaWidth
expr_stmt|;
name|QFixed
name|gpos_x
init|=
name|xpos
operator|+
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|x
decl_stmt|;
name|QFixed
name|gpos_y
init|=
name|ypos
operator|+
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|y
decl_stmt|;
if|if
condition|(
name|transform
condition|)
block|{
name|QPointF
name|gpos
argument_list|(
name|gpos_x
operator|.
name|toReal
argument_list|()
argument_list|,
name|gpos_y
operator|.
name|toReal
argument_list|()
argument_list|)
decl_stmt|;
name|gpos
operator|=
name|gpos
operator|*
name|matrix
expr_stmt|;
name|gpos_x
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|gpos
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|gpos_y
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|gpos
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|positions
index|[
name|current
index|]
operator|.
name|x
operator|=
name|gpos_x
expr_stmt|;
name|positions
index|[
name|current
index|]
operator|.
name|y
operator|=
name|gpos_y
expr_stmt|;
name|glyphs_out
index|[
name|current
index|]
operator|=
name|kashidaGlyph
expr_stmt|;
operator|++
name|current
expr_stmt|;
block|}
block|}
else|else
block|{
name|xpos
operator|-=
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|glyphs
operator|.
name|justifications
index|[
name|i
index|]
operator|.
name|space_18d6
argument_list|)
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
block|}
block|}
else|else
block|{
name|positions
operator|.
name|resize
argument_list|(
name|glyphs
operator|.
name|numGlyphs
argument_list|)
expr_stmt|;
name|glyphs_out
operator|.
name|resize
argument_list|(
name|glyphs
operator|.
name|numGlyphs
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|transform
condition|)
block|{
while|while
condition|(
name|i
operator|<
name|glyphs
operator|.
name|numGlyphs
condition|)
block|{
if|if
condition|(
operator|!
name|glyphs
operator|.
name|attributes
index|[
name|i
index|]
operator|.
name|dontPrint
condition|)
block|{
name|positions
index|[
name|current
index|]
operator|.
name|x
operator|=
name|xpos
operator|+
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|x
expr_stmt|;
name|positions
index|[
name|current
index|]
operator|.
name|y
operator|=
name|ypos
operator|+
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|y
expr_stmt|;
name|glyphs_out
index|[
name|current
index|]
operator|=
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
expr_stmt|;
name|xpos
operator|+=
name|glyphs
operator|.
name|advances
index|[
name|i
index|]
operator|+
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|glyphs
operator|.
name|justifications
index|[
name|i
index|]
operator|.
name|space_18d6
argument_list|)
expr_stmt|;
operator|++
name|current
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|i
operator|<
name|glyphs
operator|.
name|numGlyphs
condition|)
block|{
if|if
condition|(
operator|!
name|glyphs
operator|.
name|attributes
index|[
name|i
index|]
operator|.
name|dontPrint
condition|)
block|{
name|QFixed
name|gpos_x
init|=
name|xpos
operator|+
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|x
decl_stmt|;
name|QFixed
name|gpos_y
init|=
name|ypos
operator|+
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|y
decl_stmt|;
name|QPointF
name|gpos
argument_list|(
name|gpos_x
operator|.
name|toReal
argument_list|()
argument_list|,
name|gpos_y
operator|.
name|toReal
argument_list|()
argument_list|)
decl_stmt|;
name|gpos
operator|=
name|gpos
operator|*
name|matrix
expr_stmt|;
name|positions
index|[
name|current
index|]
operator|.
name|x
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|gpos
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|positions
index|[
name|current
index|]
operator|.
name|y
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|gpos
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|glyphs_out
index|[
name|current
index|]
operator|=
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
expr_stmt|;
name|xpos
operator|+=
name|glyphs
operator|.
name|advances
index|[
name|i
index|]
operator|+
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|glyphs
operator|.
name|justifications
index|[
name|i
index|]
operator|.
name|space_18d6
argument_list|)
expr_stmt|;
operator|++
name|current
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
block|}
block|}
block|}
name|positions
operator|.
name|resize
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|glyphs_out
operator|.
name|resize
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|positions
operator|.
name|size
argument_list|()
operator|==
name|glyphs_out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getGlyphBearings
name|void
name|QFontEngine
operator|::
name|getGlyphBearings
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|qreal
modifier|*
name|leftBearing
parameter_list|,
name|qreal
modifier|*
name|rightBearing
parameter_list|)
block|{
name|glyph_metrics_t
name|gi
init|=
name|boundingBox
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
name|bool
name|isValid
init|=
name|gi
operator|.
name|isValid
argument_list|()
decl_stmt|;
if|if
condition|(
name|leftBearing
operator|!=
literal|0
condition|)
operator|*
name|leftBearing
operator|=
name|isValid
condition|?
name|gi
operator|.
name|x
operator|.
name|toReal
argument_list|()
else|:
literal|0.0
expr_stmt|;
if|if
condition|(
name|rightBearing
operator|!=
literal|0
condition|)
operator|*
name|rightBearing
operator|=
name|isValid
condition|?
operator|(
name|gi
operator|.
name|xoff
operator|-
name|gi
operator|.
name|x
operator|-
name|gi
operator|.
name|width
operator|)
operator|.
name|toReal
argument_list|()
else|:
literal|0.0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tightBoundingBox
name|glyph_metrics_t
name|QFontEngine
operator|::
name|tightBoundingBox
parameter_list|(
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|)
block|{
name|glyph_metrics_t
name|overall
decl_stmt|;
name|QFixed
name|ymax
init|=
literal|0
decl_stmt|;
name|QFixed
name|xmax
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|numGlyphs
condition|;
name|i
operator|++
control|)
block|{
name|glyph_metrics_t
name|bb
init|=
name|boundingBox
argument_list|(
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|QFixed
name|x
init|=
name|overall
operator|.
name|xoff
operator|+
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|x
operator|+
name|bb
operator|.
name|x
decl_stmt|;
name|QFixed
name|y
init|=
name|overall
operator|.
name|yoff
operator|+
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|y
operator|+
name|bb
operator|.
name|y
decl_stmt|;
name|overall
operator|.
name|x
operator|=
name|qMin
argument_list|(
name|overall
operator|.
name|x
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|overall
operator|.
name|y
operator|=
name|qMin
argument_list|(
name|overall
operator|.
name|y
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|xmax
operator|=
name|qMax
argument_list|(
name|xmax
argument_list|,
name|x
operator|+
name|bb
operator|.
name|width
argument_list|)
expr_stmt|;
name|ymax
operator|=
name|qMax
argument_list|(
name|ymax
argument_list|,
name|y
operator|+
name|bb
operator|.
name|height
argument_list|)
expr_stmt|;
name|overall
operator|.
name|xoff
operator|+=
name|bb
operator|.
name|xoff
expr_stmt|;
name|overall
operator|.
name|yoff
operator|+=
name|bb
operator|.
name|yoff
expr_stmt|;
block|}
name|overall
operator|.
name|height
operator|=
name|qMax
argument_list|(
name|overall
operator|.
name|height
argument_list|,
name|ymax
operator|-
name|overall
operator|.
name|y
argument_list|)
expr_stmt|;
name|overall
operator|.
name|width
operator|=
name|xmax
operator|-
name|overall
operator|.
name|x
expr_stmt|;
return|return
name|overall
return|;
block|}
end_function
begin_function
DECL|function|addOutlineToPath
name|void
name|QFontEngine
operator|::
name|addOutlineToPath
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|,
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|QTextItem
operator|::
name|RenderFlags
name|flags
parameter_list|)
block|{
if|if
condition|(
operator|!
name|glyphs
operator|.
name|numGlyphs
condition|)
return|return;
name|QVarLengthArray
argument_list|<
name|QFixedPoint
argument_list|>
name|positions
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|glyph_t
argument_list|>
name|positioned_glyphs
decl_stmt|;
name|QTransform
name|matrix
init|=
name|QTransform
operator|::
name|fromTranslate
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|getGlyphPositions
argument_list|(
name|glyphs
argument_list|,
name|matrix
argument_list|,
name|flags
argument_list|,
name|positioned_glyphs
argument_list|,
name|positions
argument_list|)
expr_stmt|;
name|addGlyphsToPath
argument_list|(
name|positioned_glyphs
operator|.
name|data
argument_list|()
argument_list|,
name|positions
operator|.
name|data
argument_list|()
argument_list|,
name|positioned_glyphs
operator|.
name|size
argument_list|()
argument_list|,
name|path
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|GRID
define|#
directive|define
name|GRID
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|grid[(y)*(w+1) + (x)]
end_define
begin_define
DECL|macro|SET
define|#
directive|define
name|SET
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|(*(image_data + (y)*bpl + ((x)>> 3))& (0x80>> ((x)& 7)))
end_define
begin_enum
DECL|enumerator|EdgeRight
enum|enum
block|{
name|EdgeRight
init|=
literal|0x1
block|,
DECL|enumerator|EdgeDown
name|EdgeDown
init|=
literal|0x2
block|,
DECL|enumerator|EdgeLeft
name|EdgeLeft
init|=
literal|0x4
block|,
DECL|enumerator|EdgeUp
name|EdgeUp
init|=
literal|0x8
block|}
enum|;
end_enum
begin_function
DECL|function|collectSingleContour
specifier|static
name|void
name|collectSingleContour
parameter_list|(
name|qreal
name|x0
parameter_list|,
name|qreal
name|y0
parameter_list|,
name|uint
modifier|*
name|grid
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|path
operator|->
name|moveTo
argument_list|(
name|x
operator|+
name|x0
argument_list|,
name|y
operator|+
name|y0
argument_list|)
expr_stmt|;
while|while
condition|(
name|GRID
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
condition|)
block|{
if|if
condition|(
name|GRID
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|&
name|EdgeRight
condition|)
block|{
while|while
condition|(
name|GRID
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|&
name|EdgeRight
condition|)
block|{
name|GRID
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|&=
operator|~
name|EdgeRight
expr_stmt|;
operator|++
name|x
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|x
operator|<=
name|w
argument_list|)
expr_stmt|;
name|path
operator|->
name|lineTo
argument_list|(
name|x
operator|+
name|x0
argument_list|,
name|y
operator|+
name|y0
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|GRID
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|&
name|EdgeDown
condition|)
block|{
while|while
condition|(
name|GRID
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|&
name|EdgeDown
condition|)
block|{
name|GRID
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|&=
operator|~
name|EdgeDown
expr_stmt|;
operator|++
name|y
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|y
operator|<=
name|h
argument_list|)
expr_stmt|;
name|path
operator|->
name|lineTo
argument_list|(
name|x
operator|+
name|x0
argument_list|,
name|y
operator|+
name|y0
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|GRID
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|&
name|EdgeLeft
condition|)
block|{
while|while
condition|(
name|GRID
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|&
name|EdgeLeft
condition|)
block|{
name|GRID
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|&=
operator|~
name|EdgeLeft
expr_stmt|;
operator|--
name|x
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|x
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|path
operator|->
name|lineTo
argument_list|(
name|x
operator|+
name|x0
argument_list|,
name|y
operator|+
name|y0
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|GRID
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|&
name|EdgeUp
condition|)
block|{
while|while
condition|(
name|GRID
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|&
name|EdgeUp
condition|)
block|{
name|GRID
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|&=
operator|~
name|EdgeUp
expr_stmt|;
operator|--
name|y
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|y
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|path
operator|->
name|lineTo
argument_list|(
name|x
operator|+
name|x0
argument_list|,
name|y
operator|+
name|y0
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|path
operator|->
name|closeSubpath
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_addBitmapToPath
name|Q_GUI_EXPORT
name|void
name|qt_addBitmapToPath
parameter_list|(
name|qreal
name|x0
parameter_list|,
name|qreal
name|y0
parameter_list|,
specifier|const
name|uchar
modifier|*
name|image_data
parameter_list|,
name|int
name|bpl
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|)
block|{
name|uint
modifier|*
name|grid
init|=
operator|new
name|uint
index|[
operator|(
name|w
operator|+
literal|1
operator|)
operator|*
operator|(
name|h
operator|+
literal|1
operator|)
index|]
decl_stmt|;
comment|// set up edges
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<=
name|h
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<=
name|w
condition|;
operator|++
name|x
control|)
block|{
name|bool
name|topLeft
init|=
operator|(
name|x
operator|==
literal|0
operator|)
operator||
operator|(
name|y
operator|==
literal|0
operator|)
condition|?
literal|false
else|:
name|SET
argument_list|(
name|x
operator|-
literal|1
argument_list|,
name|y
operator|-
literal|1
argument_list|)
decl_stmt|;
name|bool
name|topRight
init|=
operator|(
name|x
operator|==
name|w
operator|)
operator||
operator|(
name|y
operator|==
literal|0
operator|)
condition|?
literal|false
else|:
name|SET
argument_list|(
name|x
argument_list|,
name|y
operator|-
literal|1
argument_list|)
decl_stmt|;
name|bool
name|bottomLeft
init|=
operator|(
name|x
operator|==
literal|0
operator|)
operator||
operator|(
name|y
operator|==
name|h
operator|)
condition|?
literal|false
else|:
name|SET
argument_list|(
name|x
operator|-
literal|1
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|bool
name|bottomRight
init|=
operator|(
name|x
operator|==
name|w
operator|)
operator||
operator|(
name|y
operator|==
name|h
operator|)
condition|?
literal|false
else|:
name|SET
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|GRID
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|(
operator|!
name|topRight
operator|)
operator|&
name|bottomRight
condition|)
name|GRID
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator||=
name|EdgeRight
expr_stmt|;
if|if
condition|(
operator|(
operator|!
name|bottomRight
operator|)
operator|&
name|bottomLeft
condition|)
name|GRID
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator||=
name|EdgeDown
expr_stmt|;
if|if
condition|(
operator|(
operator|!
name|bottomLeft
operator|)
operator|&
name|topLeft
condition|)
name|GRID
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator||=
name|EdgeLeft
expr_stmt|;
if|if
condition|(
operator|(
operator|!
name|topLeft
operator|)
operator|&
name|topRight
condition|)
name|GRID
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator||=
name|EdgeUp
expr_stmt|;
block|}
block|}
comment|// collect edges
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
operator|!
name|GRID
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
condition|)
continue|continue;
comment|// found start of a contour, follow it
name|collectSingleContour
argument_list|(
name|x0
argument_list|,
name|y0
argument_list|,
name|grid
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
operator|delete
index|[]
name|grid
expr_stmt|;
block|}
end_function
begin_undef
DECL|macro|GRID
undef|#
directive|undef
name|GRID
end_undef
begin_undef
DECL|macro|SET
undef|#
directive|undef
name|SET
end_undef
begin_function
DECL|function|addBitmapFontToPath
name|void
name|QFontEngine
operator|::
name|addBitmapFontToPath
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|,
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|QTextItem
operator|::
name|RenderFlags
name|flags
parameter_list|)
block|{
comment|// TODO what to do with 'flags' ??
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|QFixed
name|advanceX
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|QFixed
name|advanceY
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|y
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|numGlyphs
condition|;
operator|++
name|i
control|)
block|{
name|glyph_metrics_t
name|metrics
init|=
name|boundingBox
argument_list|(
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|metrics
operator|.
name|width
operator|.
name|value
argument_list|()
operator|==
literal|0
operator|||
name|metrics
operator|.
name|height
operator|.
name|value
argument_list|()
operator|==
literal|0
condition|)
block|{
name|advanceX
operator|+=
name|glyphs
operator|.
name|advances
index|[
name|i
index|]
expr_stmt|;
continue|continue;
block|}
specifier|const
name|QImage
name|alphaMask
init|=
name|alphaMapForGlyph
argument_list|(
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
specifier|const
name|int
name|w
init|=
name|alphaMask
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|h
init|=
name|alphaMask
operator|.
name|height
argument_list|()
decl_stmt|;
specifier|const
name|int
name|srcBpl
init|=
name|alphaMask
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
name|QImage
name|bitmap
decl_stmt|;
if|if
condition|(
name|alphaMask
operator|.
name|depth
argument_list|()
operator|==
literal|1
condition|)
block|{
name|bitmap
operator|=
name|alphaMask
expr_stmt|;
block|}
else|else
block|{
name|bitmap
operator|=
name|QImage
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|QImage
operator|::
name|Format_Mono
argument_list|)
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|imageData
init|=
name|alphaMask
operator|.
name|bits
argument_list|()
decl_stmt|;
specifier|const
name|int
name|destBpl
init|=
name|bitmap
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
name|uchar
modifier|*
name|bitmapData
init|=
name|bitmap
operator|.
name|bits
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|yi
init|=
literal|0
init|;
name|yi
operator|<
name|h
condition|;
operator|++
name|yi
control|)
block|{
specifier|const
name|uchar
modifier|*
name|src
init|=
name|imageData
operator|+
name|yi
operator|*
name|srcBpl
decl_stmt|;
name|uchar
modifier|*
name|dst
init|=
name|bitmapData
operator|+
name|yi
operator|*
name|destBpl
decl_stmt|;
for|for
control|(
name|int
name|xi
init|=
literal|0
init|;
name|xi
operator|<
name|w
condition|;
operator|++
name|xi
control|)
block|{
specifier|const
name|int
name|byte
init|=
name|xi
operator|/
literal|8
decl_stmt|;
specifier|const
name|int
name|bit
init|=
name|xi
operator|%
literal|8
decl_stmt|;
if|if
condition|(
name|bit
operator|==
literal|0
condition|)
name|dst
index|[
name|byte
index|]
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|src
index|[
name|xi
index|]
condition|)
name|dst
index|[
name|byte
index|]
operator||=
literal|128
operator|>>
name|bit
expr_stmt|;
block|}
block|}
block|}
specifier|const
name|uchar
modifier|*
name|bitmap_data
init|=
name|bitmap
operator|.
name|bits
argument_list|()
decl_stmt|;
name|QFixedPoint
name|offset
init|=
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
decl_stmt|;
name|advanceX
operator|+=
name|offset
operator|.
name|x
expr_stmt|;
name|advanceY
operator|+=
name|offset
operator|.
name|y
expr_stmt|;
name|qt_addBitmapToPath
argument_list|(
operator|(
name|advanceX
operator|+
name|metrics
operator|.
name|x
operator|)
operator|.
name|toReal
argument_list|()
argument_list|,
operator|(
name|advanceY
operator|+
name|metrics
operator|.
name|y
operator|)
operator|.
name|toReal
argument_list|()
argument_list|,
name|bitmap_data
argument_list|,
name|bitmap
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|advanceX
operator|+=
name|glyphs
operator|.
name|advances
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|addGlyphsToPath
name|void
name|QFontEngine
operator|::
name|addGlyphsToPath
parameter_list|(
name|glyph_t
modifier|*
name|glyphs
parameter_list|,
name|QFixedPoint
modifier|*
name|positions
parameter_list|,
name|int
name|nGlyphs
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|QTextItem
operator|::
name|RenderFlags
name|flags
parameter_list|)
block|{
name|qreal
name|x
init|=
name|positions
index|[
literal|0
index|]
operator|.
name|x
operator|.
name|toReal
argument_list|()
decl_stmt|;
name|qreal
name|y
init|=
name|positions
index|[
literal|0
index|]
operator|.
name|y
operator|.
name|toReal
argument_list|()
decl_stmt|;
name|QVarLengthGlyphLayoutArray
name|g
argument_list|(
name|nGlyphs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nGlyphs
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|g
operator|.
name|glyphs
index|[
name|i
index|]
operator|=
name|glyphs
index|[
name|i
index|]
expr_stmt|;
name|g
operator|.
name|advances
index|[
name|i
index|]
operator|=
name|positions
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|x
operator|-
name|positions
index|[
name|i
index|]
operator|.
name|x
expr_stmt|;
block|}
name|g
operator|.
name|glyphs
index|[
name|nGlyphs
operator|-
literal|1
index|]
operator|=
name|glyphs
index|[
name|nGlyphs
operator|-
literal|1
index|]
expr_stmt|;
name|g
operator|.
name|advances
index|[
name|nGlyphs
operator|-
literal|1
index|]
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|maxCharWidth
argument_list|()
argument_list|)
expr_stmt|;
name|addBitmapFontToPath
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|g
argument_list|,
name|path
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|alphaMapForGlyph
name|QImage
name|QFontEngine
operator|::
name|alphaMapForGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|QFixed
comment|/*subPixelPosition*/
parameter_list|)
block|{
comment|// For font engines don't support subpixel positioning
return|return
name|alphaMapForGlyph
argument_list|(
name|glyph
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|alphaMapForGlyph
name|QImage
name|QFontEngine
operator|::
name|alphaMapForGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|t
parameter_list|)
block|{
name|QImage
name|i
init|=
name|alphaMapForGlyph
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|type
argument_list|()
operator|>
name|QTransform
operator|::
name|TxTranslate
condition|)
name|i
operator|=
name|i
operator|.
name|transformed
argument_list|(
name|t
argument_list|)
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Alpha8
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|i
operator|.
name|depth
argument_list|()
operator|<=
literal|8
argument_list|)
expr_stmt|;
comment|// To verify that transformed didn't change the format...
return|return
name|i
return|;
block|}
end_function
begin_function
DECL|function|alphaMapForGlyph
name|QImage
name|QFontEngine
operator|::
name|alphaMapForGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|QFixed
name|subPixelPosition
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|t
parameter_list|)
block|{
if|if
condition|(
operator|!
name|supportsSubPixelPositions
argument_list|()
condition|)
return|return
name|alphaMapForGlyph
argument_list|(
name|glyph
argument_list|,
name|t
argument_list|)
return|;
name|QImage
name|i
init|=
name|alphaMapForGlyph
argument_list|(
name|glyph
argument_list|,
name|subPixelPosition
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|type
argument_list|()
operator|>
name|QTransform
operator|::
name|TxTranslate
condition|)
name|i
operator|=
name|i
operator|.
name|transformed
argument_list|(
name|t
argument_list|)
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Alpha8
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|i
operator|.
name|depth
argument_list|()
operator|<=
literal|8
argument_list|)
expr_stmt|;
comment|// To verify that transformed didn't change the format...
return|return
name|i
return|;
block|}
end_function
begin_function
DECL|function|alphaRGBMapForGlyph
name|QImage
name|QFontEngine
operator|::
name|alphaRGBMapForGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|QFixed
comment|/*subPixelPosition*/
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|t
parameter_list|)
block|{
name|QImage
name|alphaMask
init|=
name|alphaMapForGlyph
argument_list|(
name|glyph
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|QImage
name|rgbMask
argument_list|(
name|alphaMask
operator|.
name|width
argument_list|()
argument_list|,
name|alphaMask
operator|.
name|height
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|colorTable
init|=
name|alphaMask
operator|.
name|colorTable
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|alphaMask
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
name|uint
modifier|*
name|dst
init|=
operator|(
name|uint
operator|*
operator|)
name|rgbMask
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|uchar
modifier|*
name|src
init|=
operator|(
name|uchar
operator|*
operator|)
name|alphaMask
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|alphaMask
operator|.
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
name|int
name|val
init|=
name|qAlpha
argument_list|(
name|colorTable
operator|.
name|at
argument_list|(
name|src
index|[
name|x
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|dst
index|[
name|x
index|]
operator|=
name|qRgb
argument_list|(
name|val
argument_list|,
name|val
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rgbMask
return|;
block|}
end_function
begin_function
DECL|function|bitmapForGlyph
name|QImage
name|QFontEngine
operator|::
name|bitmapForGlyph
parameter_list|(
name|glyph_t
parameter_list|,
name|QFixed
name|subPixelPosition
parameter_list|,
specifier|const
name|QTransform
modifier|&
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|subPixelPosition
argument_list|)
expr_stmt|;
return|return
name|QImage
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|subPixelPositionForX
name|QFixed
name|QFontEngine
operator|::
name|subPixelPositionForX
parameter_list|(
name|QFixed
name|x
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|m_subPixelPositionCount
operator|<=
literal|1
operator|||
operator|!
name|supportsSubPixelPositions
argument_list|()
condition|)
return|return
name|QFixed
argument_list|()
return|;
name|QFixed
name|subPixelPosition
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|0
condition|)
block|{
name|subPixelPosition
operator|=
name|x
operator|-
name|x
operator|.
name|floor
argument_list|()
expr_stmt|;
name|QFixed
name|fraction
init|=
operator|(
name|subPixelPosition
operator|/
name|QFixed
operator|::
name|fromReal
argument_list|(
literal|1.0
operator|/
name|m_subPixelPositionCount
argument_list|)
operator|)
operator|.
name|floor
argument_list|()
decl_stmt|;
comment|// Compensate for precision loss in fixed point to make sure we are always drawing at a subpixel position over
comment|// the lower boundary for the selected rasterization by adding 1/64.
name|subPixelPosition
operator|=
name|fraction
operator|/
name|QFixed
argument_list|(
name|m_subPixelPositionCount
argument_list|)
operator|+
name|QFixed
operator|::
name|fromReal
argument_list|(
literal|0.015625
argument_list|)
expr_stmt|;
block|}
return|return
name|subPixelPosition
return|;
block|}
end_function
begin_function
DECL|function|lockedAlphaMapForGlyph
name|QImage
modifier|*
name|QFontEngine
operator|::
name|lockedAlphaMapForGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|QFixed
name|subPixelPosition
parameter_list|,
name|QFontEngine
operator|::
name|GlyphFormat
name|neededFormat
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|t
parameter_list|,
name|QPoint
modifier|*
name|offset
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|currentlyLockedAlphaMap
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|neededFormat
operator|==
name|Format_None
condition|)
name|neededFormat
operator|=
name|Format_A32
expr_stmt|;
if|if
condition|(
name|neededFormat
operator|!=
name|Format_A32
condition|)
name|currentlyLockedAlphaMap
operator|=
name|alphaMapForGlyph
argument_list|(
name|glyph
argument_list|,
name|subPixelPosition
argument_list|,
name|t
argument_list|)
expr_stmt|;
else|else
name|currentlyLockedAlphaMap
operator|=
name|alphaRGBMapForGlyph
argument_list|(
name|glyph
argument_list|,
name|subPixelPosition
argument_list|,
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|offset
operator|!=
literal|0
condition|)
operator|*
name|offset
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
operator|&
name|currentlyLockedAlphaMap
return|;
block|}
end_function
begin_function
DECL|function|unlockAlphaMapForGlyph
name|void
name|QFontEngine
operator|::
name|unlockAlphaMapForGlyph
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|currentlyLockedAlphaMap
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|currentlyLockedAlphaMap
operator|=
name|QImage
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|alphaMapForGlyph
name|QImage
name|QFontEngine
operator|::
name|alphaMapForGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|)
block|{
name|glyph_metrics_t
name|gm
init|=
name|boundingBox
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
name|int
name|glyph_x
init|=
name|qFloor
argument_list|(
name|gm
operator|.
name|x
operator|.
name|toReal
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|glyph_y
init|=
name|qFloor
argument_list|(
name|gm
operator|.
name|y
operator|.
name|toReal
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|glyph_width
init|=
name|qCeil
argument_list|(
operator|(
name|gm
operator|.
name|x
operator|+
name|gm
operator|.
name|width
operator|)
operator|.
name|toReal
argument_list|()
argument_list|)
operator|-
name|glyph_x
decl_stmt|;
name|int
name|glyph_height
init|=
name|qCeil
argument_list|(
operator|(
name|gm
operator|.
name|y
operator|+
name|gm
operator|.
name|height
operator|)
operator|.
name|toReal
argument_list|()
argument_list|)
operator|-
name|glyph_y
decl_stmt|;
if|if
condition|(
name|glyph_width
operator|<=
literal|0
operator|||
name|glyph_height
operator|<=
literal|0
condition|)
return|return
name|QImage
argument_list|()
return|;
name|QFixedPoint
name|pt
decl_stmt|;
name|pt
operator|.
name|x
operator|=
operator|-
name|glyph_x
expr_stmt|;
name|pt
operator|.
name|y
operator|=
operator|-
name|glyph_y
expr_stmt|;
comment|// the baseline
name|QPainterPath
name|path
decl_stmt|;
name|QImage
name|im
argument_list|(
name|glyph_width
operator|+
literal|4
argument_list|,
name|glyph_height
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|im
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|im
argument_list|)
decl_stmt|;
name|p
operator|.
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
name|addGlyphsToPath
argument_list|(
operator|&
name|glyph
argument_list|,
operator|&
name|pt
argument_list|,
literal|1
argument_list|,
operator|&
name|path
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QImage
name|alphaMap
argument_list|(
name|im
operator|.
name|width
argument_list|()
argument_list|,
name|im
operator|.
name|height
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_Alpha8
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|im
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
name|uchar
modifier|*
name|dst
init|=
operator|(
name|uchar
operator|*
operator|)
name|alphaMap
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|uint
modifier|*
name|src
init|=
operator|(
name|uint
operator|*
operator|)
name|im
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|im
operator|.
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
name|dst
index|[
name|x
index|]
operator|=
name|qAlpha
argument_list|(
name|src
index|[
name|x
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|alphaMap
return|;
block|}
end_function
begin_function
DECL|function|removeGlyphFromCache
name|void
name|QFontEngine
operator|::
name|removeGlyphFromCache
parameter_list|(
name|glyph_t
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|properties
name|QFontEngine
operator|::
name|Properties
name|QFontEngine
operator|::
name|properties
parameter_list|()
specifier|const
block|{
name|Properties
name|p
decl_stmt|;
name|QByteArray
name|psname
init|=
name|QFontEngine
operator|::
name|convertToPostscriptFontFamilyName
argument_list|(
name|fontDef
operator|.
name|family
operator|.
name|toUtf8
argument_list|()
argument_list|)
decl_stmt|;
name|psname
operator|+=
literal|'-'
expr_stmt|;
name|psname
operator|+=
name|QByteArray
operator|::
name|number
argument_list|(
name|fontDef
operator|.
name|style
argument_list|)
expr_stmt|;
name|psname
operator|+=
literal|'-'
expr_stmt|;
name|psname
operator|+=
name|QByteArray
operator|::
name|number
argument_list|(
name|fontDef
operator|.
name|weight
argument_list|)
expr_stmt|;
name|p
operator|.
name|postscriptName
operator|=
name|psname
expr_stmt|;
name|p
operator|.
name|ascent
operator|=
name|ascent
argument_list|()
expr_stmt|;
name|p
operator|.
name|descent
operator|=
name|descent
argument_list|()
expr_stmt|;
name|p
operator|.
name|leading
operator|=
name|leading
argument_list|()
expr_stmt|;
name|p
operator|.
name|emSquare
operator|=
name|p
operator|.
name|ascent
expr_stmt|;
name|p
operator|.
name|boundingBox
operator|=
name|QRectF
argument_list|(
literal|0
argument_list|,
operator|-
name|p
operator|.
name|ascent
operator|.
name|toReal
argument_list|()
argument_list|,
name|maxCharWidth
argument_list|()
argument_list|,
operator|(
name|p
operator|.
name|ascent
operator|+
name|p
operator|.
name|descent
operator|)
operator|.
name|toReal
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|italicAngle
operator|=
literal|0
expr_stmt|;
name|p
operator|.
name|capHeight
operator|=
name|p
operator|.
name|ascent
expr_stmt|;
name|p
operator|.
name|lineWidth
operator|=
name|lineThickness
argument_list|()
expr_stmt|;
return|return
name|p
return|;
block|}
end_function
begin_function
DECL|function|getUnscaledGlyph
name|void
name|QFontEngine
operator|::
name|getUnscaledGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|glyph_metrics_t
modifier|*
name|metrics
parameter_list|)
block|{
operator|*
name|metrics
operator|=
name|boundingBox
argument_list|(
name|glyph
argument_list|)
expr_stmt|;
name|QFixedPoint
name|p
decl_stmt|;
name|p
operator|.
name|x
operator|=
literal|0
expr_stmt|;
name|p
operator|.
name|y
operator|=
literal|0
expr_stmt|;
name|addGlyphsToPath
argument_list|(
operator|&
name|glyph
argument_list|,
operator|&
name|p
argument_list|,
literal|1
argument_list|,
name|path
argument_list|,
name|QFlag
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the font table idetified by \a tag exists in the font;     returns \c false otherwise.      If \a buffer is NULL, stores the size of the buffer required for the font table data,     in bytes, in \a length. If \a buffer is not NULL and the capacity     of the buffer, passed in \a length, is sufficient to store the font table data,     also copies the font table data to \a buffer.      Note: returning \c false when the font table exists could lead to an undefined behavior. */
end_comment
begin_function
DECL|function|getSfntTableData
name|bool
name|QFontEngine
operator|::
name|getSfntTableData
parameter_list|(
name|uint
name|tag
parameter_list|,
name|uchar
modifier|*
name|buffer
parameter_list|,
name|uint
modifier|*
name|length
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
argument|tag
argument_list|)
name|Q_UNUSED
argument_list|(
argument|buffer
argument_list|)
name|Q_UNUSED
argument_list|(
argument|length
argument_list|)
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|getSfntTable
name|QByteArray
name|QFontEngine
operator|::
name|getSfntTable
parameter_list|(
name|uint
name|tag
parameter_list|)
specifier|const
block|{
name|QByteArray
name|table
decl_stmt|;
name|uint
name|len
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|getSfntTableData
argument_list|(
name|tag
argument_list|,
literal|0
argument_list|,
operator|&
name|len
argument_list|)
condition|)
return|return
name|table
return|;
name|table
operator|.
name|resize
argument_list|(
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getSfntTableData
argument_list|(
name|tag
argument_list|,
cast|reinterpret_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|table
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
operator|&
name|len
argument_list|)
condition|)
return|return
name|QByteArray
argument_list|()
return|;
return|return
name|table
return|;
block|}
end_function
begin_function
DECL|function|clearGlyphCache
name|void
name|QFontEngine
operator|::
name|clearGlyphCache
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|)
block|{
for|for
control|(
name|QLinkedList
argument_list|<
name|GlyphCacheEntry
argument_list|>
operator|::
name|iterator
name|it
init|=
name|m_glyphCaches
operator|.
name|begin
argument_list|()
init|,
name|end
init|=
name|m_glyphCaches
operator|.
name|end
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
control|)
block|{
if|if
condition|(
name|it
operator|->
name|context
operator|==
name|key
condition|)
name|it
operator|=
name|m_glyphCaches
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
else|else
operator|++
name|it
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setGlyphCache
name|void
name|QFontEngine
operator|::
name|setGlyphCache
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
name|QFontEngineGlyphCache
modifier|*
name|data
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|GlyphCacheEntry
name|entry
decl_stmt|;
name|entry
operator|.
name|context
operator|=
name|key
expr_stmt|;
name|entry
operator|.
name|cache
operator|=
name|data
expr_stmt|;
if|if
condition|(
name|m_glyphCaches
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
condition|)
return|return;
comment|// Limit the glyph caches to 4. This covers all 90 degree rotations and limits
comment|// memory use when there is continuous or random rotation
if|if
condition|(
name|m_glyphCaches
operator|.
name|size
argument_list|()
operator|==
literal|4
condition|)
name|m_glyphCaches
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|m_glyphCaches
operator|.
name|push_front
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|glyphCache
name|QFontEngineGlyphCache
modifier|*
name|QFontEngine
operator|::
name|glyphCache
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
name|GlyphFormat
name|format
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|)
specifier|const
block|{
for|for
control|(
name|QLinkedList
argument_list|<
name|GlyphCacheEntry
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|m_glyphCaches
operator|.
name|constBegin
argument_list|()
init|,
name|end
init|=
name|m_glyphCaches
operator|.
name|constEnd
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
name|QFontEngineGlyphCache
modifier|*
name|c
init|=
name|it
operator|->
name|cache
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|==
name|it
operator|->
name|context
operator|&&
name|format
operator|==
name|c
operator|->
name|glyphFormat
argument_list|()
operator|&&
name|qtransform_equals_no_translate
argument_list|(
name|c
operator|->
name|m_transform
argument_list|,
name|transform
argument_list|)
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|kerning
specifier|static
specifier|inline
name|QFixed
name|kerning
parameter_list|(
name|int
name|left
parameter_list|,
name|int
name|right
parameter_list|,
specifier|const
name|QFontEngine
operator|::
name|KernPair
modifier|*
name|pairs
parameter_list|,
name|int
name|numPairs
parameter_list|)
block|{
name|uint
name|left_right
init|=
operator|(
name|left
operator|<<
literal|16
operator|)
operator|+
name|right
decl_stmt|;
name|left
operator|=
literal|0
operator|,
name|right
operator|=
name|numPairs
operator|-
literal|1
expr_stmt|;
while|while
condition|(
name|left
operator|<=
name|right
condition|)
block|{
name|int
name|middle
init|=
name|left
operator|+
operator|(
operator|(
name|right
operator|-
name|left
operator|)
operator|>>
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|pairs
index|[
name|middle
index|]
operator|.
name|left_right
operator|==
name|left_right
condition|)
return|return
name|pairs
index|[
name|middle
index|]
operator|.
name|adjust
return|;
if|if
condition|(
name|pairs
index|[
name|middle
index|]
operator|.
name|left_right
operator|<
name|left_right
condition|)
name|left
operator|=
name|middle
operator|+
literal|1
expr_stmt|;
else|else
name|right
operator|=
name|middle
operator|-
literal|1
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|doKerning
name|void
name|QFontEngine
operator|::
name|doKerning
parameter_list|(
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|QFontEngine
operator|::
name|ShaperFlags
name|flags
parameter_list|)
specifier|const
block|{
name|int
name|numPairs
init|=
name|kerning_pairs
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|numPairs
condition|)
return|return;
specifier|const
name|KernPair
modifier|*
name|pairs
init|=
name|kerning_pairs
operator|.
name|constData
argument_list|()
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|DesignMetrics
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|->
name|numGlyphs
operator|-
literal|1
condition|;
operator|++
name|i
control|)
name|glyphs
operator|->
name|advances
index|[
name|i
index|]
operator|+=
name|kerning
argument_list|(
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
argument_list|,
name|glyphs
operator|->
name|glyphs
index|[
name|i
operator|+
literal|1
index|]
argument_list|,
name|pairs
argument_list|,
name|numPairs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|->
name|numGlyphs
operator|-
literal|1
condition|;
operator|++
name|i
control|)
name|glyphs
operator|->
name|advances
index|[
name|i
index|]
operator|+=
name|qRound
argument_list|(
name|kerning
argument_list|(
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
argument_list|,
name|glyphs
operator|->
name|glyphs
index|[
name|i
operator|+
literal|1
index|]
argument_list|,
name|pairs
argument_list|,
name|numPairs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|loadKerningPairs
name|void
name|QFontEngine
operator|::
name|loadKerningPairs
parameter_list|(
name|QFixed
name|scalingFactor
parameter_list|)
block|{
name|kerning_pairs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QByteArray
name|tab
init|=
name|getSfntTable
argument_list|(
name|MAKE_TAG
argument_list|(
literal|'k'
argument_list|,
literal|'e'
argument_list|,
literal|'r'
argument_list|,
literal|'n'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tab
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
specifier|const
name|uchar
modifier|*
name|table
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|tab
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|unsigned
name|short
name|version
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|!=
literal|0
condition|)
block|{
comment|//        qDebug("wrong version");
return|return;
block|}
name|unsigned
name|short
name|numTables
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|table
operator|+
literal|2
argument_list|)
decl_stmt|;
block|{
name|int
name|offset
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTables
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|offset
operator|+
literal|6
operator|>
name|tab
operator|.
name|size
argument_list|()
condition|)
block|{
comment|//                qDebug("offset out of bounds");
goto|goto
name|end
goto|;
block|}
specifier|const
name|uchar
modifier|*
name|header
init|=
name|table
operator|+
name|offset
decl_stmt|;
name|ushort
name|version
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|header
argument_list|)
decl_stmt|;
name|ushort
name|length
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|header
operator|+
literal|2
argument_list|)
decl_stmt|;
name|ushort
name|coverage
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|header
operator|+
literal|4
argument_list|)
decl_stmt|;
comment|//            qDebug("subtable: version=%d, coverage=%x",version, coverage);
if|if
condition|(
name|version
operator|==
literal|0
operator|&&
name|coverage
operator|==
literal|0x0001
condition|)
block|{
if|if
condition|(
name|offset
operator|+
name|length
operator|>
name|tab
operator|.
name|size
argument_list|()
condition|)
block|{
comment|//                    qDebug("length ouf ot bounds");
goto|goto
name|end
goto|;
block|}
specifier|const
name|uchar
modifier|*
name|data
init|=
name|table
operator|+
name|offset
operator|+
literal|6
decl_stmt|;
name|ushort
name|nPairs
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|nPairs
operator|*
literal|6
operator|+
literal|8
operator|>
name|length
operator|-
literal|6
condition|)
block|{
comment|//                    qDebug("corrupt table!");
comment|// corrupt table
goto|goto
name|end
goto|;
block|}
name|int
name|off
init|=
literal|8
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPairs
condition|;
operator|++
name|i
control|)
block|{
name|QFontEngine
operator|::
name|KernPair
name|p
decl_stmt|;
name|p
operator|.
name|left_right
operator|=
operator|(
operator|(
operator|(
name|uint
operator|)
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|data
operator|+
name|off
argument_list|)
operator|)
operator|<<
literal|16
operator|)
operator|+
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|data
operator|+
name|off
operator|+
literal|2
argument_list|)
expr_stmt|;
name|p
operator|.
name|adjust
operator|=
name|QFixed
argument_list|(
operator|(
operator|(
name|int
operator|)
operator|(
name|short
operator|)
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|data
operator|+
name|off
operator|+
literal|4
argument_list|)
operator|)
argument_list|)
operator|/
name|scalingFactor
expr_stmt|;
name|kerning_pairs
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|off
operator|+=
literal|6
expr_stmt|;
block|}
block|}
name|offset
operator|+=
name|length
expr_stmt|;
block|}
block|}
name|end
label|:
name|std
operator|::
name|sort
argument_list|(
name|kerning_pairs
operator|.
name|begin
argument_list|()
argument_list|,
name|kerning_pairs
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
comment|//    for (int i = 0; i< kerning_pairs.count(); ++i)
comment|//        qDebug()<< 'i'<< i<< "left_right"<< hex<< kerning_pairs.at(i).left_right;
block|}
end_function
begin_function
DECL|function|glyphCount
name|int
name|QFontEngine
operator|::
name|glyphCount
parameter_list|()
specifier|const
block|{
name|QByteArray
name|maxpTable
init|=
name|getSfntTable
argument_list|(
name|MAKE_TAG
argument_list|(
literal|'m'
argument_list|,
literal|'a'
argument_list|,
literal|'x'
argument_list|,
literal|'p'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxpTable
operator|.
name|size
argument_list|()
operator|<
literal|6
condition|)
return|return
literal|0
return|;
return|return
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|maxpTable
operator|.
name|constData
argument_list|()
operator|+
literal|4
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getCMap
specifier|const
name|uchar
modifier|*
name|QFontEngine
operator|::
name|getCMap
parameter_list|(
specifier|const
name|uchar
modifier|*
name|table
parameter_list|,
name|uint
name|tableSize
parameter_list|,
name|bool
modifier|*
name|isSymbolFont
parameter_list|,
name|int
modifier|*
name|cmapSize
parameter_list|)
block|{
specifier|const
name|uchar
modifier|*
name|header
init|=
name|table
decl_stmt|;
if|if
condition|(
name|tableSize
operator|<
literal|4
condition|)
return|return
literal|0
return|;
specifier|const
name|uchar
modifier|*
name|endPtr
init|=
name|table
operator|+
name|tableSize
decl_stmt|;
comment|// version check
if|if
condition|(
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|header
argument_list|)
operator|!=
literal|0
condition|)
return|return
literal|0
return|;
name|unsigned
name|short
name|numTables
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|header
operator|+
literal|2
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|maps
init|=
name|table
operator|+
literal|4
decl_stmt|;
if|if
condition|(
name|maps
operator|+
literal|8
operator|*
name|numTables
operator|>
name|endPtr
condition|)
return|return
literal|0
return|;
enum|enum
block|{
name|Invalid
block|,
name|AppleRoman
block|,
name|Symbol
block|,
name|Unicode11
block|,
name|Unicode
block|,
name|MicrosoftUnicode
block|,
name|MicrosoftUnicodeExtended
block|}
enum|;
name|int
name|symbolTable
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|tableToUse
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|score
init|=
name|Invalid
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|numTables
condition|;
operator|++
name|n
control|)
block|{
specifier|const
name|quint16
name|platformId
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|maps
operator|+
literal|8
operator|*
name|n
argument_list|)
decl_stmt|;
specifier|const
name|quint16
name|platformSpecificId
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|maps
operator|+
literal|8
operator|*
name|n
operator|+
literal|2
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|platformId
condition|)
block|{
case|case
literal|0
case|:
comment|// Unicode
if|if
condition|(
name|score
operator|<
name|Unicode
operator|&&
operator|(
name|platformSpecificId
operator|==
literal|0
operator|||
name|platformSpecificId
operator|==
literal|2
operator|||
name|platformSpecificId
operator|==
literal|3
operator|)
condition|)
block|{
name|tableToUse
operator|=
name|n
expr_stmt|;
name|score
operator|=
name|Unicode
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|score
operator|<
name|Unicode11
operator|&&
name|platformSpecificId
operator|==
literal|1
condition|)
block|{
name|tableToUse
operator|=
name|n
expr_stmt|;
name|score
operator|=
name|Unicode11
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// Apple
if|if
condition|(
name|score
operator|<
name|AppleRoman
operator|&&
name|platformSpecificId
operator|==
literal|0
condition|)
block|{
comment|// Apple Roman
name|tableToUse
operator|=
name|n
expr_stmt|;
name|score
operator|=
name|AppleRoman
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// Microsoft
switch|switch
condition|(
name|platformSpecificId
condition|)
block|{
case|case
literal|0
case|:
name|symbolTable
operator|=
name|n
expr_stmt|;
if|if
condition|(
name|score
operator|<
name|Symbol
condition|)
block|{
name|tableToUse
operator|=
name|n
expr_stmt|;
name|score
operator|=
name|Symbol
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|score
operator|<
name|MicrosoftUnicode
condition|)
block|{
name|tableToUse
operator|=
name|n
expr_stmt|;
name|score
operator|=
name|MicrosoftUnicode
expr_stmt|;
block|}
break|break;
case|case
literal|0xa
case|:
if|if
condition|(
name|score
operator|<
name|MicrosoftUnicodeExtended
condition|)
block|{
name|tableToUse
operator|=
name|n
expr_stmt|;
name|score
operator|=
name|MicrosoftUnicodeExtended
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|tableToUse
operator|<
literal|0
condition|)
return|return
literal|0
return|;
name|resolveTable
label|:
operator|*
name|isSymbolFont
operator|=
operator|(
name|symbolTable
operator|>
operator|-
literal|1
operator|)
expr_stmt|;
name|unsigned
name|int
name|unicode_table
init|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|maps
operator|+
literal|8
operator|*
name|tableToUse
operator|+
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|unicode_table
operator|||
name|unicode_table
operator|+
literal|8
operator|>
name|tableSize
condition|)
return|return
literal|0
return|;
comment|// get the header of the unicode table
name|header
operator|=
name|table
operator|+
name|unicode_table
expr_stmt|;
name|unsigned
name|short
name|format
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|header
argument_list|)
decl_stmt|;
name|unsigned
name|int
name|length
decl_stmt|;
if|if
condition|(
name|format
operator|<
literal|8
condition|)
name|length
operator|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|header
operator|+
literal|2
argument_list|)
expr_stmt|;
else|else
name|length
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|header
operator|+
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|+
name|unicode_table
operator|+
name|length
operator|>
name|endPtr
condition|)
return|return
literal|0
return|;
operator|*
name|cmapSize
operator|=
name|length
expr_stmt|;
comment|// To support symbol fonts that contain a unicode table for the symbol area
comment|// we check the cmap tables and fall back to symbol font unless that would
comment|// involve losing information from the unicode table
if|if
condition|(
name|symbolTable
operator|>
operator|-
literal|1
operator|&&
operator|(
operator|(
name|score
operator|==
name|Unicode
operator|)
operator|||
operator|(
name|score
operator|==
name|Unicode11
operator|)
operator|)
condition|)
block|{
specifier|const
name|uchar
modifier|*
name|selectedTable
init|=
name|table
operator|+
name|unicode_table
decl_stmt|;
comment|// Check that none of the latin1 range are in the unicode table
name|bool
name|unicodeTableHasLatin1
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|uc
init|=
literal|0x00
init|;
name|uc
operator|<
literal|0x100
condition|;
operator|++
name|uc
control|)
block|{
if|if
condition|(
name|getTrueTypeGlyphIndex
argument_list|(
name|selectedTable
argument_list|,
name|uc
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|unicodeTableHasLatin1
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
comment|// Check that at least one symbol char is in the unicode table
name|bool
name|unicodeTableHasSymbols
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|unicodeTableHasLatin1
condition|)
block|{
for|for
control|(
name|int
name|uc
init|=
literal|0xf000
init|;
name|uc
operator|<
literal|0xf100
condition|;
operator|++
name|uc
control|)
block|{
if|if
condition|(
name|getTrueTypeGlyphIndex
argument_list|(
name|selectedTable
argument_list|,
name|uc
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|unicodeTableHasSymbols
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// Fall back to symbol table
if|if
condition|(
operator|!
name|unicodeTableHasLatin1
operator|&&
name|unicodeTableHasSymbols
condition|)
block|{
name|tableToUse
operator|=
name|symbolTable
expr_stmt|;
name|score
operator|=
name|Symbol
expr_stmt|;
goto|goto
name|resolveTable
goto|;
block|}
block|}
return|return
name|table
operator|+
name|unicode_table
return|;
block|}
end_function
begin_function
DECL|function|getTrueTypeGlyphIndex
name|quint32
name|QFontEngine
operator|::
name|getTrueTypeGlyphIndex
parameter_list|(
specifier|const
name|uchar
modifier|*
name|cmap
parameter_list|,
name|uint
name|unicode
parameter_list|)
block|{
name|unsigned
name|short
name|format
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|cmap
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|unicode
operator|<
literal|256
condition|)
return|return
operator|(
name|int
operator|)
operator|*
operator|(
name|cmap
operator|+
literal|6
operator|+
name|unicode
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|format
operator|==
literal|4
condition|)
block|{
comment|/* some fonts come with invalid cmap tables, where the last segment            specified end = start = rangeoffset = 0xffff, delta = 0x0001            Since 0xffff is never a valid Unicode char anyway, we just get rid of the issue            by returning 0 for 0xffff         */
if|if
condition|(
name|unicode
operator|>=
literal|0xffff
condition|)
return|return
literal|0
return|;
name|quint16
name|segCountX2
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|cmap
operator|+
literal|6
argument_list|)
decl_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|ends
init|=
name|cmap
operator|+
literal|14
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|segCountX2
operator|/
literal|2
operator|&&
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|ends
operator|+
literal|2
operator|*
name|i
argument_list|)
operator|<
name|unicode
condition|;
name|i
operator|++
control|)
block|{}
specifier|const
name|unsigned
name|char
modifier|*
name|idx
init|=
name|ends
operator|+
name|segCountX2
operator|+
literal|2
operator|+
literal|2
operator|*
name|i
decl_stmt|;
name|quint16
name|startIndex
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|startIndex
operator|>
name|unicode
condition|)
return|return
literal|0
return|;
name|idx
operator|+=
name|segCountX2
expr_stmt|;
name|qint16
name|idDelta
init|=
operator|(
name|qint16
operator|)
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|idx
operator|+=
name|segCountX2
expr_stmt|;
name|quint16
name|idRangeoffset_t
init|=
operator|(
name|quint16
operator|)
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|quint16
name|glyphIndex
decl_stmt|;
if|if
condition|(
name|idRangeoffset_t
condition|)
block|{
name|quint16
name|id
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|idRangeoffset_t
operator|+
literal|2
operator|*
operator|(
name|unicode
operator|-
name|startIndex
operator|)
operator|+
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|glyphIndex
operator|=
operator|(
name|idDelta
operator|+
name|id
operator|)
operator|%
literal|0x10000
expr_stmt|;
else|else
name|glyphIndex
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|glyphIndex
operator|=
operator|(
name|idDelta
operator|+
name|unicode
operator|)
operator|%
literal|0x10000
expr_stmt|;
block|}
return|return
name|glyphIndex
return|;
block|}
elseif|else
if|if
condition|(
name|format
operator|==
literal|6
condition|)
block|{
name|quint16
name|tableSize
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|cmap
operator|+
literal|2
argument_list|)
decl_stmt|;
name|quint16
name|firstCode6
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|cmap
operator|+
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
name|unicode
operator|<
name|firstCode6
condition|)
return|return
literal|0
return|;
name|quint16
name|entryCount6
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|cmap
operator|+
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryCount6
operator|*
literal|2
operator|+
literal|10
operator|>
name|tableSize
condition|)
return|return
literal|0
return|;
name|quint16
name|sentinel6
init|=
name|firstCode6
operator|+
name|entryCount6
decl_stmt|;
if|if
condition|(
name|unicode
operator|>=
name|sentinel6
condition|)
return|return
literal|0
return|;
name|quint16
name|entryIndex6
init|=
name|unicode
operator|-
name|firstCode6
decl_stmt|;
return|return
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|cmap
operator|+
literal|10
operator|+
operator|(
name|entryIndex6
operator|*
literal|2
operator|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|format
operator|==
literal|12
condition|)
block|{
name|quint32
name|nGroups
init|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|cmap
operator|+
literal|12
argument_list|)
decl_stmt|;
name|cmap
operator|+=
literal|16
expr_stmt|;
comment|// move to start of groups
name|int
name|left
init|=
literal|0
decl_stmt|,
name|right
init|=
name|nGroups
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|left
operator|<=
name|right
condition|)
block|{
name|int
name|middle
init|=
name|left
operator|+
operator|(
operator|(
name|right
operator|-
name|left
operator|)
operator|>>
literal|1
operator|)
decl_stmt|;
name|quint32
name|startCharCode
init|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|cmap
operator|+
literal|12
operator|*
name|middle
argument_list|)
decl_stmt|;
if|if
condition|(
name|unicode
operator|<
name|startCharCode
condition|)
name|right
operator|=
name|middle
operator|-
literal|1
expr_stmt|;
else|else
block|{
name|quint32
name|endCharCode
init|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|cmap
operator|+
literal|12
operator|*
name|middle
operator|+
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|unicode
operator|<=
name|endCharCode
condition|)
return|return
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|cmap
operator|+
literal|12
operator|*
name|middle
operator|+
literal|8
argument_list|)
operator|+
name|unicode
operator|-
name|startCharCode
return|;
name|left
operator|=
name|middle
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|qDebug
argument_list|(
literal|"cmap table of format %d not implemented"
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|convertToPostscriptFontFamilyName
name|QByteArray
name|QFontEngine
operator|::
name|convertToPostscriptFontFamilyName
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|family
parameter_list|)
block|{
name|QByteArray
name|f
init|=
name|family
decl_stmt|;
name|f
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|f
operator|.
name|replace
argument_list|(
literal|'('
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|f
operator|.
name|replace
argument_list|(
literal|')'
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|f
operator|.
name|replace
argument_list|(
literal|'<'
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|f
operator|.
name|replace
argument_list|(
literal|'>'
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|f
operator|.
name|replace
argument_list|(
literal|'['
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|f
operator|.
name|replace
argument_list|(
literal|']'
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|f
operator|.
name|replace
argument_list|(
literal|'{'
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|f
operator|.
name|replace
argument_list|(
literal|'}'
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|f
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|f
operator|.
name|replace
argument_list|(
literal|'%'
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
end_function
begin_comment
comment|/**  * Some font engines like the windows font engine  * can not reliable create outline paths  */
end_comment
begin_function
DECL|function|hasUnreliableGlyphOutline
name|bool
name|QFontEngine
operator|::
name|hasUnreliableGlyphOutline
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|lastRightBearing
name|QFixed
name|QFontEngine
operator|::
name|lastRightBearing
parameter_list|(
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|,
name|bool
name|round
parameter_list|)
block|{
if|if
condition|(
name|glyphs
operator|.
name|numGlyphs
operator|>=
literal|1
condition|)
block|{
name|glyph_t
name|glyph
init|=
name|glyphs
operator|.
name|glyphs
index|[
name|glyphs
operator|.
name|numGlyphs
operator|-
literal|1
index|]
decl_stmt|;
name|glyph_metrics_t
name|gi
init|=
name|boundingBox
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
if|if
condition|(
name|gi
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|round
condition|?
name|QFixed
argument_list|(
name|qRound
argument_list|(
name|gi
operator|.
name|xoff
operator|-
name|gi
operator|.
name|x
operator|-
name|gi
operator|.
name|width
argument_list|)
argument_list|)
else|:
name|QFixed
argument_list|(
name|gi
operator|.
name|xoff
operator|-
name|gi
operator|.
name|x
operator|-
name|gi
operator|.
name|width
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_constructor
DECL|function|GlyphCacheEntry
name|QFontEngine
operator|::
name|GlyphCacheEntry
operator|::
name|GlyphCacheEntry
parameter_list|()
member_init_list|:
name|context
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|GlyphCacheEntry
name|QFontEngine
operator|::
name|GlyphCacheEntry
operator|::
name|GlyphCacheEntry
parameter_list|(
specifier|const
name|GlyphCacheEntry
modifier|&
name|o
parameter_list|)
member_init_list|:
name|context
argument_list|(
name|o
operator|.
name|context
argument_list|)
member_init_list|,
name|cache
argument_list|(
name|o
operator|.
name|cache
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~GlyphCacheEntry
name|QFontEngine
operator|::
name|GlyphCacheEntry
operator|::
name|~
name|GlyphCacheEntry
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|operator =
name|QFontEngine
operator|::
name|GlyphCacheEntry
modifier|&
name|QFontEngine
operator|::
name|GlyphCacheEntry
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|GlyphCacheEntry
modifier|&
name|o
parameter_list|)
block|{
name|context
operator|=
name|o
operator|.
name|context
expr_stmt|;
name|cache
operator|=
name|o
operator|.
name|cache
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------
end_comment
begin_comment
comment|// The box font engine
end_comment
begin_comment
comment|// ------------------------------------------------------------------
end_comment
begin_constructor
DECL|function|QFontEngineBox
name|QFontEngineBox
operator|::
name|QFontEngineBox
parameter_list|(
name|int
name|size
parameter_list|)
member_init_list|:
name|QFontEngine
argument_list|(
name|Box
argument_list|)
member_init_list|,
name|_size
argument_list|(
name|size
argument_list|)
block|{
name|cache_cost
operator|=
sizeof|sizeof
argument_list|(
name|QFontEngineBox
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QFontEngineBox
name|QFontEngineBox
operator|::
name|QFontEngineBox
parameter_list|(
name|Type
name|type
parameter_list|,
name|int
name|size
parameter_list|)
member_init_list|:
name|QFontEngine
argument_list|(
name|type
argument_list|)
member_init_list|,
name|_size
argument_list|(
name|size
argument_list|)
block|{
name|cache_cost
operator|=
sizeof|sizeof
argument_list|(
name|QFontEngineBox
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QFontEngineBox
name|QFontEngineBox
operator|::
name|~
name|QFontEngineBox
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|glyphIndex
name|glyph_t
name|QFontEngineBox
operator|::
name|glyphIndex
parameter_list|(
name|uint
name|ucs4
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
argument|ucs4
argument_list|)
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|stringToCMap
name|bool
name|QFontEngineBox
operator|::
name|stringToCMap
parameter_list|(
specifier|const
name|QChar
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|,
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|int
modifier|*
name|nglyphs
parameter_list|,
name|QFontEngine
operator|::
name|ShaperFlags
name|flags
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|glyphs
operator|->
name|numGlyphs
operator|>=
operator|*
name|nglyphs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|*
name|nglyphs
operator|<
name|len
condition|)
block|{
operator|*
name|nglyphs
operator|=
name|len
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|ucs4Length
init|=
literal|0
decl_stmt|;
name|QStringIterator
name|it
argument_list|(
name|str
argument_list|,
name|str
operator|+
name|len
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|advance
argument_list|()
expr_stmt|;
name|glyphs
operator|->
name|glyphs
index|[
name|ucs4Length
operator|++
index|]
operator|=
literal|0
expr_stmt|;
block|}
operator|*
name|nglyphs
operator|=
name|ucs4Length
expr_stmt|;
name|glyphs
operator|->
name|numGlyphs
operator|=
name|ucs4Length
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|GlyphIndicesOnly
operator|)
condition|)
name|recalcAdvances
argument_list|(
name|glyphs
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|recalcAdvances
name|void
name|QFontEngineBox
operator|::
name|recalcAdvances
parameter_list|(
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|QFontEngine
operator|::
name|ShaperFlags
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|->
name|numGlyphs
condition|;
name|i
operator|++
control|)
name|glyphs
operator|->
name|advances
index|[
name|i
index|]
operator|=
name|_size
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addOutlineToPath
name|void
name|QFontEngineBox
operator|::
name|addOutlineToPath
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|,
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|QTextItem
operator|::
name|RenderFlags
name|flags
parameter_list|)
block|{
if|if
condition|(
operator|!
name|glyphs
operator|.
name|numGlyphs
condition|)
return|return;
name|QVarLengthArray
argument_list|<
name|QFixedPoint
argument_list|>
name|positions
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|glyph_t
argument_list|>
name|positioned_glyphs
decl_stmt|;
name|QTransform
name|matrix
init|=
name|QTransform
operator|::
name|fromTranslate
argument_list|(
name|x
argument_list|,
name|y
operator|-
name|_size
argument_list|)
decl_stmt|;
name|getGlyphPositions
argument_list|(
name|glyphs
argument_list|,
name|matrix
argument_list|,
name|flags
argument_list|,
name|positioned_glyphs
argument_list|,
name|positions
argument_list|)
expr_stmt|;
name|QSize
name|s
argument_list|(
name|_size
operator|-
literal|3
argument_list|,
name|_size
operator|-
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|positions
operator|.
name|size
argument_list|()
condition|;
name|k
operator|++
control|)
name|path
operator|->
name|addRect
argument_list|(
name|QRectF
argument_list|(
name|positions
index|[
name|k
index|]
operator|.
name|toPointF
argument_list|()
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngineBox
operator|::
name|boundingBox
parameter_list|(
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|)
block|{
name|glyph_metrics_t
name|overall
decl_stmt|;
name|overall
operator|.
name|width
operator|=
name|_size
operator|*
name|glyphs
operator|.
name|numGlyphs
expr_stmt|;
name|overall
operator|.
name|height
operator|=
name|_size
expr_stmt|;
name|overall
operator|.
name|xoff
operator|=
name|overall
operator|.
name|width
expr_stmt|;
return|return
name|overall
return|;
block|}
end_function
begin_function
DECL|function|draw
name|void
name|QFontEngineBox
operator|::
name|draw
parameter_list|(
name|QPaintEngine
modifier|*
name|p
parameter_list|,
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|,
specifier|const
name|QTextItemInt
modifier|&
name|ti
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ti
operator|.
name|glyphs
operator|.
name|numGlyphs
condition|)
return|return;
comment|// any fixes here should probably also be done in QPaintEnginePrivate::drawBoxTextItem
name|QSize
name|s
argument_list|(
name|_size
operator|-
literal|3
argument_list|,
name|_size
operator|-
literal|3
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QFixedPoint
argument_list|>
name|positions
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|glyph_t
argument_list|>
name|glyphs
decl_stmt|;
name|QTransform
name|matrix
init|=
name|QTransform
operator|::
name|fromTranslate
argument_list|(
name|x
argument_list|,
name|y
operator|-
name|_size
argument_list|)
decl_stmt|;
name|ti
operator|.
name|fontEngine
operator|->
name|getGlyphPositions
argument_list|(
name|ti
operator|.
name|glyphs
argument_list|,
name|matrix
argument_list|,
name|ti
operator|.
name|flags
argument_list|,
name|glyphs
argument_list|,
name|positions
argument_list|)
expr_stmt|;
if|if
condition|(
name|glyphs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|QPainter
modifier|*
name|painter
init|=
name|p
operator|->
name|painter
argument_list|()
decl_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
name|QPen
name|pen
init|=
name|painter
operator|->
name|pen
argument_list|()
decl_stmt|;
name|pen
operator|.
name|setWidthF
argument_list|(
name|lineThickness
argument_list|()
operator|.
name|toReal
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|positions
operator|.
name|size
argument_list|()
condition|;
name|k
operator|++
control|)
name|painter
operator|->
name|drawRect
argument_list|(
name|QRectF
argument_list|(
name|positions
index|[
name|k
index|]
operator|.
name|toPointF
argument_list|()
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngineBox
operator|::
name|boundingBox
parameter_list|(
name|glyph_t
parameter_list|)
block|{
return|return
name|glyph_metrics_t
argument_list|(
literal|0
argument_list|,
operator|-
name|_size
argument_list|,
name|_size
argument_list|,
name|_size
argument_list|,
name|_size
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|cloneWithSize
name|QFontEngine
modifier|*
name|QFontEngineBox
operator|::
name|cloneWithSize
parameter_list|(
name|qreal
name|pixelSize
parameter_list|)
specifier|const
block|{
name|QFontEngineBox
modifier|*
name|fe
init|=
operator|new
name|QFontEngineBox
argument_list|(
name|pixelSize
argument_list|)
decl_stmt|;
return|return
name|fe
return|;
block|}
end_function
begin_function
DECL|function|ascent
name|QFixed
name|QFontEngineBox
operator|::
name|ascent
parameter_list|()
specifier|const
block|{
return|return
name|_size
return|;
block|}
end_function
begin_function
DECL|function|descent
name|QFixed
name|QFontEngineBox
operator|::
name|descent
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|leading
name|QFixed
name|QFontEngineBox
operator|::
name|leading
parameter_list|()
specifier|const
block|{
name|QFixed
name|l
init|=
name|_size
operator|*
name|QFixed
operator|::
name|fromReal
argument_list|(
name|qreal
argument_list|(
literal|0.15
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|l
operator|.
name|ceil
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|maxCharWidth
name|qreal
name|QFontEngineBox
operator|::
name|maxCharWidth
parameter_list|()
specifier|const
block|{
return|return
name|_size
return|;
block|}
end_function
begin_function
DECL|function|canRender
name|bool
name|QFontEngineBox
operator|::
name|canRender
parameter_list|(
specifier|const
name|QChar
modifier|*
parameter_list|,
name|int
parameter_list|)
specifier|const
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|alphaMapForGlyph
name|QImage
name|QFontEngineBox
operator|::
name|alphaMapForGlyph
parameter_list|(
name|glyph_t
parameter_list|)
block|{
name|QImage
name|image
argument_list|(
name|_size
argument_list|,
name|_size
argument_list|,
name|QImage
operator|::
name|Format_Alpha8
argument_list|)
decl_stmt|;
name|image
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// FIXME: use qpainter
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
name|_size
operator|-
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|image
operator|.
name|setPixel
argument_list|(
name|i
argument_list|,
literal|2
argument_list|,
literal|255
argument_list|)
expr_stmt|;
name|image
operator|.
name|setPixel
argument_list|(
name|i
argument_list|,
name|_size
operator|-
literal|3
argument_list|,
literal|255
argument_list|)
expr_stmt|;
name|image
operator|.
name|setPixel
argument_list|(
literal|2
argument_list|,
name|i
argument_list|,
literal|255
argument_list|)
expr_stmt|;
name|image
operator|.
name|setPixel
argument_list|(
name|_size
operator|-
literal|3
argument_list|,
name|i
argument_list|,
literal|255
argument_list|)
expr_stmt|;
block|}
return|return
name|image
return|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------
end_comment
begin_comment
comment|// Multi engine
end_comment
begin_comment
comment|// ------------------------------------------------------------------
end_comment
begin_function
DECL|function|highByte
specifier|static
specifier|inline
name|uchar
name|highByte
parameter_list|(
name|glyph_t
name|glyph
parameter_list|)
block|{
return|return
name|glyph
operator|>>
literal|24
return|;
block|}
end_function
begin_comment
comment|// strip high byte from glyph
end_comment
begin_function
DECL|function|stripped
specifier|static
specifier|inline
name|glyph_t
name|stripped
parameter_list|(
name|glyph_t
name|glyph
parameter_list|)
block|{
return|return
name|glyph
operator|&
literal|0x00ffffff
return|;
block|}
end_function
begin_constructor
DECL|function|QFontEngineMulti
name|QFontEngineMulti
operator|::
name|QFontEngineMulti
parameter_list|(
name|int
name|engineCount
parameter_list|)
member_init_list|:
name|QFontEngine
argument_list|(
name|Multi
argument_list|)
block|{
name|engines
operator|.
name|fill
argument_list|(
literal|0
argument_list|,
name|engineCount
argument_list|)
expr_stmt|;
name|cache_cost
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QFontEngineMulti
name|QFontEngineMulti
operator|::
name|~
name|QFontEngineMulti
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|engines
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFontEngine
modifier|*
name|fontEngine
init|=
name|engines
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontEngine
operator|&&
operator|!
name|fontEngine
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|fontEngine
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|glyphIndex
name|glyph_t
name|QFontEngineMulti
operator|::
name|glyphIndex
parameter_list|(
name|uint
name|ucs4
parameter_list|)
specifier|const
block|{
name|glyph_t
name|glyph
init|=
name|engine
argument_list|(
literal|0
argument_list|)
operator|->
name|glyphIndex
argument_list|(
name|ucs4
argument_list|)
decl_stmt|;
if|if
condition|(
name|glyph
operator|==
literal|0
operator|&&
name|ucs4
operator|!=
name|QChar
operator|::
name|LineSeparator
condition|)
block|{
cast|const_cast
argument_list|<
name|QFontEngineMulti
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|ensureFallbackFamiliesQueried
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|1
init|,
name|n
init|=
name|qMin
argument_list|(
name|engines
operator|.
name|size
argument_list|()
argument_list|,
literal|256
argument_list|)
init|;
name|x
operator|<
name|n
condition|;
operator|++
name|x
control|)
block|{
name|QFontEngine
modifier|*
name|engine
init|=
name|engines
operator|.
name|at
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|engine
condition|)
block|{
if|if
condition|(
operator|!
name|shouldLoadFontEngineForCharacter
argument_list|(
name|x
argument_list|,
name|ucs4
argument_list|)
condition|)
continue|continue;
cast|const_cast
argument_list|<
name|QFontEngineMulti
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|loadEngine
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|engine
operator|=
name|engines
operator|.
name|at
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|engine
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|->
name|type
argument_list|()
operator|==
name|Box
condition|)
continue|continue;
name|glyph
operator|=
name|engine
operator|->
name|glyphIndex
argument_list|(
name|ucs4
argument_list|)
expr_stmt|;
if|if
condition|(
name|glyph
operator|!=
literal|0
condition|)
block|{
comment|// set the high byte to indicate which engine the glyph came from
name|glyph
operator||=
operator|(
name|x
operator|<<
literal|24
operator|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|glyph
return|;
block|}
end_function
begin_function
DECL|function|stringToCMap
name|bool
name|QFontEngineMulti
operator|::
name|stringToCMap
parameter_list|(
specifier|const
name|QChar
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|,
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|int
modifier|*
name|nglyphs
parameter_list|,
name|QFontEngine
operator|::
name|ShaperFlags
name|flags
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|engine
argument_list|(
literal|0
argument_list|)
operator|->
name|stringToCMap
argument_list|(
name|str
argument_list|,
name|len
argument_list|,
name|glyphs
argument_list|,
name|nglyphs
argument_list|,
name|flags
argument_list|)
condition|)
return|return
literal|false
return|;
cast|const_cast
argument_list|<
name|QFontEngineMulti
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|ensureFallbackFamiliesQueried
argument_list|()
expr_stmt|;
name|int
name|glyph_pos
init|=
literal|0
decl_stmt|;
name|QStringIterator
name|it
argument_list|(
name|str
argument_list|,
name|str
operator|+
name|len
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|const
name|uint
name|ucs4
init|=
name|it
operator|.
name|peekNext
argument_list|()
decl_stmt|;
if|if
condition|(
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|==
literal|0
operator|&&
name|ucs4
operator|!=
name|QChar
operator|::
name|LineSeparator
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|1
init|,
name|n
init|=
name|qMin
argument_list|(
name|engines
operator|.
name|size
argument_list|()
argument_list|,
literal|256
argument_list|)
init|;
name|x
operator|<
name|n
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|engines
operator|.
name|at
argument_list|(
name|x
argument_list|)
operator|==
literal|0
operator|&&
operator|!
name|shouldLoadFontEngineForCharacter
argument_list|(
name|x
argument_list|,
name|ucs4
argument_list|)
condition|)
continue|continue;
name|QFontEngine
modifier|*
name|engine
init|=
name|engines
operator|.
name|at
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|engine
condition|)
block|{
cast|const_cast
argument_list|<
name|QFontEngineMulti
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|loadEngine
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|engine
operator|=
name|engines
operator|.
name|at
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|engine
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|->
name|type
argument_list|()
operator|==
name|Box
condition|)
continue|continue;
name|glyph_t
name|glyph
init|=
name|engine
operator|->
name|glyphIndex
argument_list|(
name|ucs4
argument_list|)
decl_stmt|;
if|if
condition|(
name|glyph
operator|!=
literal|0
condition|)
block|{
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|=
name|glyph
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|GlyphIndicesOnly
operator|)
condition|)
block|{
name|QGlyphLayout
name|g
init|=
name|glyphs
operator|->
name|mid
argument_list|(
name|glyph_pos
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|engine
operator|->
name|recalcAdvances
argument_list|(
operator|&
name|g
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
comment|// set the high byte to indicate which engine the glyph came from
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator||=
operator|(
name|x
operator|<<
literal|24
operator|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|it
operator|.
name|advance
argument_list|()
expr_stmt|;
operator|++
name|glyph_pos
expr_stmt|;
block|}
operator|*
name|nglyphs
operator|=
name|glyph_pos
expr_stmt|;
name|glyphs
operator|->
name|numGlyphs
operator|=
name|glyph_pos
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|shouldLoadFontEngineForCharacter
name|bool
name|QFontEngineMulti
operator|::
name|shouldLoadFontEngineForCharacter
parameter_list|(
name|int
name|at
parameter_list|,
name|uint
name|ucs4
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|at
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|ucs4
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngineMulti
operator|::
name|boundingBox
parameter_list|(
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|)
block|{
if|if
condition|(
name|glyphs
operator|.
name|numGlyphs
operator|<=
literal|0
condition|)
return|return
name|glyph_metrics_t
argument_list|()
return|;
name|glyph_metrics_t
name|overall
decl_stmt|;
name|int
name|which
init|=
name|highByte
argument_list|(
name|glyphs
operator|.
name|glyphs
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|end
decl_stmt|,
name|i
decl_stmt|;
for|for
control|(
name|end
operator|=
literal|0
init|;
name|end
operator|<
name|glyphs
operator|.
name|numGlyphs
condition|;
operator|++
name|end
control|)
block|{
specifier|const
name|int
name|e
init|=
name|highByte
argument_list|(
name|glyphs
operator|.
name|glyphs
index|[
name|end
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
name|which
condition|)
continue|continue;
comment|// set the high byte to zero
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
operator|=
name|stripped
argument_list|(
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// merge the bounding box for this run
specifier|const
name|glyph_metrics_t
name|gm
init|=
name|engine
argument_list|(
name|which
argument_list|)
operator|->
name|boundingBox
argument_list|(
name|glyphs
operator|.
name|mid
argument_list|(
name|start
argument_list|,
name|end
operator|-
name|start
argument_list|)
argument_list|)
decl_stmt|;
name|overall
operator|.
name|x
operator|=
name|qMin
argument_list|(
name|overall
operator|.
name|x
argument_list|,
name|gm
operator|.
name|x
argument_list|)
expr_stmt|;
name|overall
operator|.
name|y
operator|=
name|qMin
argument_list|(
name|overall
operator|.
name|y
argument_list|,
name|gm
operator|.
name|y
argument_list|)
expr_stmt|;
name|overall
operator|.
name|width
operator|=
name|overall
operator|.
name|xoff
operator|+
name|gm
operator|.
name|width
expr_stmt|;
name|overall
operator|.
name|height
operator|=
name|qMax
argument_list|(
name|overall
operator|.
name|height
operator|+
name|overall
operator|.
name|y
argument_list|,
name|gm
operator|.
name|height
operator|+
name|gm
operator|.
name|y
argument_list|)
operator|-
name|qMin
argument_list|(
name|overall
operator|.
name|y
argument_list|,
name|gm
operator|.
name|y
argument_list|)
expr_stmt|;
name|overall
operator|.
name|xoff
operator|+=
name|gm
operator|.
name|xoff
expr_stmt|;
name|overall
operator|.
name|yoff
operator|+=
name|gm
operator|.
name|yoff
expr_stmt|;
comment|// reset the high byte for all glyphs
specifier|const
name|int
name|hi
init|=
name|which
operator|<<
literal|24
decl_stmt|;
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
operator|=
name|hi
operator||
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
expr_stmt|;
comment|// change engine
name|start
operator|=
name|end
expr_stmt|;
name|which
operator|=
name|e
expr_stmt|;
block|}
comment|// set the high byte to zero
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
operator|=
name|stripped
argument_list|(
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// merge the bounding box for this run
specifier|const
name|glyph_metrics_t
name|gm
init|=
name|engine
argument_list|(
name|which
argument_list|)
operator|->
name|boundingBox
argument_list|(
name|glyphs
operator|.
name|mid
argument_list|(
name|start
argument_list|,
name|end
operator|-
name|start
argument_list|)
argument_list|)
decl_stmt|;
name|overall
operator|.
name|x
operator|=
name|qMin
argument_list|(
name|overall
operator|.
name|x
argument_list|,
name|gm
operator|.
name|x
argument_list|)
expr_stmt|;
name|overall
operator|.
name|y
operator|=
name|qMin
argument_list|(
name|overall
operator|.
name|y
argument_list|,
name|gm
operator|.
name|y
argument_list|)
expr_stmt|;
name|overall
operator|.
name|width
operator|=
name|overall
operator|.
name|xoff
operator|+
name|gm
operator|.
name|width
expr_stmt|;
name|overall
operator|.
name|height
operator|=
name|qMax
argument_list|(
name|overall
operator|.
name|height
operator|+
name|overall
operator|.
name|y
argument_list|,
name|gm
operator|.
name|height
operator|+
name|gm
operator|.
name|y
argument_list|)
operator|-
name|qMin
argument_list|(
name|overall
operator|.
name|y
argument_list|,
name|gm
operator|.
name|y
argument_list|)
expr_stmt|;
name|overall
operator|.
name|xoff
operator|+=
name|gm
operator|.
name|xoff
expr_stmt|;
name|overall
operator|.
name|yoff
operator|+=
name|gm
operator|.
name|yoff
expr_stmt|;
comment|// reset the high byte for all glyphs
specifier|const
name|int
name|hi
init|=
name|which
operator|<<
literal|24
decl_stmt|;
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
operator|=
name|hi
operator||
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
expr_stmt|;
return|return
name|overall
return|;
block|}
end_function
begin_function
DECL|function|getGlyphBearings
name|void
name|QFontEngineMulti
operator|::
name|getGlyphBearings
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|qreal
modifier|*
name|leftBearing
parameter_list|,
name|qreal
modifier|*
name|rightBearing
parameter_list|)
block|{
name|int
name|which
init|=
name|highByte
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
name|ensureEngineAt
argument_list|(
name|which
argument_list|)
expr_stmt|;
name|engine
argument_list|(
name|which
argument_list|)
operator|->
name|getGlyphBearings
argument_list|(
name|stripped
argument_list|(
name|glyph
argument_list|)
argument_list|,
name|leftBearing
argument_list|,
name|rightBearing
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addOutlineToPath
name|void
name|QFontEngineMulti
operator|::
name|addOutlineToPath
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|,
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|QTextItem
operator|::
name|RenderFlags
name|flags
parameter_list|)
block|{
if|if
condition|(
name|glyphs
operator|.
name|numGlyphs
operator|<=
literal|0
condition|)
return|return;
name|int
name|which
init|=
name|highByte
argument_list|(
name|glyphs
operator|.
name|glyphs
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|end
decl_stmt|,
name|i
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|QTextItem
operator|::
name|RightToLeft
condition|)
block|{
for|for
control|(
name|int
name|gl
init|=
literal|0
init|;
name|gl
operator|<
name|glyphs
operator|.
name|numGlyphs
condition|;
name|gl
operator|++
control|)
name|x
operator|+=
name|glyphs
operator|.
name|advances
index|[
name|gl
index|]
operator|.
name|toReal
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|end
operator|=
literal|0
init|;
name|end
operator|<
name|glyphs
operator|.
name|numGlyphs
condition|;
operator|++
name|end
control|)
block|{
specifier|const
name|int
name|e
init|=
name|highByte
argument_list|(
name|glyphs
operator|.
name|glyphs
index|[
name|end
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
name|which
condition|)
continue|continue;
if|if
condition|(
name|flags
operator|&
name|QTextItem
operator|::
name|RightToLeft
condition|)
block|{
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
name|x
operator|-=
name|glyphs
operator|.
name|advances
index|[
name|i
index|]
operator|.
name|toReal
argument_list|()
expr_stmt|;
block|}
comment|// set the high byte to zero
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
operator|=
name|stripped
argument_list|(
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|engine
argument_list|(
name|which
argument_list|)
operator|->
name|addOutlineToPath
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|glyphs
operator|.
name|mid
argument_list|(
name|start
argument_list|,
name|end
operator|-
name|start
argument_list|)
argument_list|,
name|path
argument_list|,
name|flags
argument_list|)
expr_stmt|;
comment|// reset the high byte for all glyphs and update x and y
specifier|const
name|int
name|hi
init|=
name|which
operator|<<
literal|24
decl_stmt|;
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
operator|=
name|hi
operator||
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|QTextItem
operator|::
name|RightToLeft
operator|)
condition|)
block|{
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
name|x
operator|+=
name|glyphs
operator|.
name|advances
index|[
name|i
index|]
operator|.
name|toReal
argument_list|()
expr_stmt|;
block|}
comment|// change engine
name|start
operator|=
name|end
expr_stmt|;
name|which
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|QTextItem
operator|::
name|RightToLeft
condition|)
block|{
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
name|x
operator|-=
name|glyphs
operator|.
name|advances
index|[
name|i
index|]
operator|.
name|toReal
argument_list|()
expr_stmt|;
block|}
comment|// set the high byte to zero
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
operator|=
name|stripped
argument_list|(
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|engine
argument_list|(
name|which
argument_list|)
operator|->
name|addOutlineToPath
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|glyphs
operator|.
name|mid
argument_list|(
name|start
argument_list|,
name|end
operator|-
name|start
argument_list|)
argument_list|,
name|path
argument_list|,
name|flags
argument_list|)
expr_stmt|;
comment|// reset the high byte for all glyphs
specifier|const
name|int
name|hi
init|=
name|which
operator|<<
literal|24
decl_stmt|;
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
operator|=
name|hi
operator||
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
expr_stmt|;
block|}
end_function
begin_function
DECL|function|recalcAdvances
name|void
name|QFontEngineMulti
operator|::
name|recalcAdvances
parameter_list|(
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|QFontEngine
operator|::
name|ShaperFlags
name|flags
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|glyphs
operator|->
name|numGlyphs
operator|<=
literal|0
condition|)
return|return;
name|int
name|which
init|=
name|highByte
argument_list|(
name|glyphs
operator|->
name|glyphs
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|end
decl_stmt|,
name|i
decl_stmt|;
for|for
control|(
name|end
operator|=
literal|0
init|;
name|end
operator|<
name|glyphs
operator|->
name|numGlyphs
condition|;
operator|++
name|end
control|)
block|{
specifier|const
name|int
name|e
init|=
name|highByte
argument_list|(
name|glyphs
operator|->
name|glyphs
index|[
name|end
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
name|which
condition|)
continue|continue;
comment|// set the high byte to zero
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
operator|=
name|stripped
argument_list|(
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QGlyphLayout
name|offs
init|=
name|glyphs
operator|->
name|mid
argument_list|(
name|start
argument_list|,
name|end
operator|-
name|start
argument_list|)
decl_stmt|;
name|engine
argument_list|(
name|which
argument_list|)
operator|->
name|recalcAdvances
argument_list|(
operator|&
name|offs
argument_list|,
name|flags
argument_list|)
expr_stmt|;
comment|// reset the high byte for all glyphs and update x and y
specifier|const
name|int
name|hi
init|=
name|which
operator|<<
literal|24
decl_stmt|;
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
operator|=
name|hi
operator||
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
expr_stmt|;
comment|// change engine
name|start
operator|=
name|end
expr_stmt|;
name|which
operator|=
name|e
expr_stmt|;
block|}
comment|// set the high byte to zero
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
operator|=
name|stripped
argument_list|(
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QGlyphLayout
name|offs
init|=
name|glyphs
operator|->
name|mid
argument_list|(
name|start
argument_list|,
name|end
operator|-
name|start
argument_list|)
decl_stmt|;
name|engine
argument_list|(
name|which
argument_list|)
operator|->
name|recalcAdvances
argument_list|(
operator|&
name|offs
argument_list|,
name|flags
argument_list|)
expr_stmt|;
comment|// reset the high byte for all glyphs
specifier|const
name|int
name|hi
init|=
name|which
operator|<<
literal|24
decl_stmt|;
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
operator|=
name|hi
operator||
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doKerning
name|void
name|QFontEngineMulti
operator|::
name|doKerning
parameter_list|(
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|QFontEngine
operator|::
name|ShaperFlags
name|flags
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|glyphs
operator|->
name|numGlyphs
operator|<=
literal|0
condition|)
return|return;
name|int
name|which
init|=
name|highByte
argument_list|(
name|glyphs
operator|->
name|glyphs
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|end
decl_stmt|,
name|i
decl_stmt|;
for|for
control|(
name|end
operator|=
literal|0
init|;
name|end
operator|<
name|glyphs
operator|->
name|numGlyphs
condition|;
operator|++
name|end
control|)
block|{
specifier|const
name|int
name|e
init|=
name|highByte
argument_list|(
name|glyphs
operator|->
name|glyphs
index|[
name|end
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
name|which
condition|)
continue|continue;
comment|// set the high byte to zero
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
operator|=
name|stripped
argument_list|(
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QGlyphLayout
name|offs
init|=
name|glyphs
operator|->
name|mid
argument_list|(
name|start
argument_list|,
name|end
operator|-
name|start
argument_list|)
decl_stmt|;
name|engine
argument_list|(
name|which
argument_list|)
operator|->
name|doKerning
argument_list|(
operator|&
name|offs
argument_list|,
name|flags
argument_list|)
expr_stmt|;
comment|// reset the high byte for all glyphs and update x and y
specifier|const
name|int
name|hi
init|=
name|which
operator|<<
literal|24
decl_stmt|;
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
operator|=
name|hi
operator||
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
expr_stmt|;
comment|// change engine
name|start
operator|=
name|end
expr_stmt|;
name|which
operator|=
name|e
expr_stmt|;
block|}
comment|// set the high byte to zero
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
operator|=
name|stripped
argument_list|(
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QGlyphLayout
name|offs
init|=
name|glyphs
operator|->
name|mid
argument_list|(
name|start
argument_list|,
name|end
operator|-
name|start
argument_list|)
decl_stmt|;
name|engine
argument_list|(
name|which
argument_list|)
operator|->
name|doKerning
argument_list|(
operator|&
name|offs
argument_list|,
name|flags
argument_list|)
expr_stmt|;
comment|// reset the high byte for all glyphs
specifier|const
name|int
name|hi
init|=
name|which
operator|<<
literal|24
decl_stmt|;
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
operator|=
name|hi
operator||
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
expr_stmt|;
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngineMulti
operator|::
name|boundingBox
parameter_list|(
name|glyph_t
name|glyph
parameter_list|)
block|{
specifier|const
name|int
name|which
init|=
name|highByte
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|which
operator|<
name|engines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|engine
argument_list|(
name|which
argument_list|)
operator|->
name|boundingBox
argument_list|(
name|stripped
argument_list|(
name|glyph
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|ascent
name|QFixed
name|QFontEngineMulti
operator|::
name|ascent
parameter_list|()
specifier|const
block|{
return|return
name|engine
argument_list|(
literal|0
argument_list|)
operator|->
name|ascent
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|descent
name|QFixed
name|QFontEngineMulti
operator|::
name|descent
parameter_list|()
specifier|const
block|{
return|return
name|engine
argument_list|(
literal|0
argument_list|)
operator|->
name|descent
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|leading
name|QFixed
name|QFontEngineMulti
operator|::
name|leading
parameter_list|()
specifier|const
block|{
return|return
name|engine
argument_list|(
literal|0
argument_list|)
operator|->
name|leading
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|xHeight
name|QFixed
name|QFontEngineMulti
operator|::
name|xHeight
parameter_list|()
specifier|const
block|{
return|return
name|engine
argument_list|(
literal|0
argument_list|)
operator|->
name|xHeight
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|averageCharWidth
name|QFixed
name|QFontEngineMulti
operator|::
name|averageCharWidth
parameter_list|()
specifier|const
block|{
return|return
name|engine
argument_list|(
literal|0
argument_list|)
operator|->
name|averageCharWidth
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|lineThickness
name|QFixed
name|QFontEngineMulti
operator|::
name|lineThickness
parameter_list|()
specifier|const
block|{
return|return
name|engine
argument_list|(
literal|0
argument_list|)
operator|->
name|lineThickness
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|underlinePosition
name|QFixed
name|QFontEngineMulti
operator|::
name|underlinePosition
parameter_list|()
specifier|const
block|{
return|return
name|engine
argument_list|(
literal|0
argument_list|)
operator|->
name|underlinePosition
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|maxCharWidth
name|qreal
name|QFontEngineMulti
operator|::
name|maxCharWidth
parameter_list|()
specifier|const
block|{
return|return
name|engine
argument_list|(
literal|0
argument_list|)
operator|->
name|maxCharWidth
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|minLeftBearing
name|qreal
name|QFontEngineMulti
operator|::
name|minLeftBearing
parameter_list|()
specifier|const
block|{
return|return
name|engine
argument_list|(
literal|0
argument_list|)
operator|->
name|minLeftBearing
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|minRightBearing
name|qreal
name|QFontEngineMulti
operator|::
name|minRightBearing
parameter_list|()
specifier|const
block|{
return|return
name|engine
argument_list|(
literal|0
argument_list|)
operator|->
name|minRightBearing
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|canRender
name|bool
name|QFontEngineMulti
operator|::
name|canRender
parameter_list|(
specifier|const
name|QChar
modifier|*
name|string
parameter_list|,
name|int
name|len
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|engine
argument_list|(
literal|0
argument_list|)
operator|->
name|canRender
argument_list|(
name|string
argument_list|,
name|len
argument_list|)
condition|)
return|return
literal|true
return|;
name|int
name|nglyphs
init|=
name|len
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|glyph_t
argument_list|>
name|glyphs
argument_list|(
name|nglyphs
argument_list|)
decl_stmt|;
name|QGlyphLayout
name|g
decl_stmt|;
name|g
operator|.
name|numGlyphs
operator|=
name|nglyphs
expr_stmt|;
name|g
operator|.
name|glyphs
operator|=
name|glyphs
operator|.
name|data
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|stringToCMap
argument_list|(
name|string
argument_list|,
name|len
argument_list|,
operator|&
name|g
argument_list|,
operator|&
name|nglyphs
argument_list|,
name|GlyphIndicesOnly
argument_list|)
condition|)
name|Q_UNREACHABLE
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nglyphs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|glyphs
index|[
name|i
index|]
operator|==
literal|0
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/* Implement alphaMapForGlyph() which is called by Lighthouse/Windows code.  * Ideally, that code should be fixed to correctly handle QFontEngineMulti. */
end_comment
begin_function
DECL|function|alphaMapForGlyph
name|QImage
name|QFontEngineMulti
operator|::
name|alphaMapForGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|)
block|{
specifier|const
name|int
name|which
init|=
name|highByte
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|which
operator|<
name|engines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|engine
argument_list|(
name|which
argument_list|)
operator|->
name|alphaMapForGlyph
argument_list|(
name|stripped
argument_list|(
name|glyph
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|alphaMapForGlyph
name|QImage
name|QFontEngineMulti
operator|::
name|alphaMapForGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|QFixed
name|subPixelPosition
parameter_list|)
block|{
specifier|const
name|int
name|which
init|=
name|highByte
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|which
operator|<
name|engines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|engine
argument_list|(
name|which
argument_list|)
operator|->
name|alphaMapForGlyph
argument_list|(
name|stripped
argument_list|(
name|glyph
argument_list|)
argument_list|,
name|subPixelPosition
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|alphaMapForGlyph
name|QImage
name|QFontEngineMulti
operator|::
name|alphaMapForGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|t
parameter_list|)
block|{
specifier|const
name|int
name|which
init|=
name|highByte
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|which
operator|<
name|engines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|engine
argument_list|(
name|which
argument_list|)
operator|->
name|alphaMapForGlyph
argument_list|(
name|stripped
argument_list|(
name|glyph
argument_list|)
argument_list|,
name|t
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|alphaMapForGlyph
name|QImage
name|QFontEngineMulti
operator|::
name|alphaMapForGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|QFixed
name|subPixelPosition
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|t
parameter_list|)
block|{
specifier|const
name|int
name|which
init|=
name|highByte
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|which
operator|<
name|engines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|engine
argument_list|(
name|which
argument_list|)
operator|->
name|alphaMapForGlyph
argument_list|(
name|stripped
argument_list|(
name|glyph
argument_list|)
argument_list|,
name|subPixelPosition
argument_list|,
name|t
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|alphaRGBMapForGlyph
name|QImage
name|QFontEngineMulti
operator|::
name|alphaRGBMapForGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|QFixed
name|subPixelPosition
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|t
parameter_list|)
block|{
specifier|const
name|int
name|which
init|=
name|highByte
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|which
operator|<
name|engines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|engine
argument_list|(
name|which
argument_list|)
operator|->
name|alphaRGBMapForGlyph
argument_list|(
name|stripped
argument_list|(
name|glyph
argument_list|)
argument_list|,
name|subPixelPosition
argument_list|,
name|t
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*     Creates a new multi engine.      This function takes ownership of the QFontEngine, increasing it's refcount. */
end_comment
begin_constructor
DECL|function|QFontEngineMultiBasicImpl
name|QFontEngineMultiBasicImpl
operator|::
name|QFontEngineMultiBasicImpl
parameter_list|(
name|QFontEngine
modifier|*
name|fe
parameter_list|,
name|int
name|_script
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|fallbacks
parameter_list|)
member_init_list|:
name|QFontEngineMulti
argument_list|(
name|fallbacks
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
member_init_list|,
name|fallbackFamilies
argument_list|(
name|fallbacks
argument_list|)
member_init_list|,
name|script
argument_list|(
name|_script
argument_list|)
member_init_list|,
name|fallbacksQueried
argument_list|(
literal|true
argument_list|)
block|{
name|init
argument_list|(
name|fe
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QFontEngineMultiBasicImpl
name|QFontEngineMultiBasicImpl
operator|::
name|QFontEngineMultiBasicImpl
parameter_list|(
name|QFontEngine
modifier|*
name|fe
parameter_list|,
name|int
name|_script
parameter_list|)
member_init_list|:
name|QFontEngineMulti
argument_list|(
literal|2
argument_list|)
member_init_list|,
name|script
argument_list|(
name|_script
argument_list|)
member_init_list|,
name|fallbacksQueried
argument_list|(
literal|false
argument_list|)
block|{
name|fallbackFamilies
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|init
argument_list|(
name|fe
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|init
name|void
name|QFontEngineMultiBasicImpl
operator|::
name|init
parameter_list|(
name|QFontEngine
modifier|*
name|fe
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|fe
operator|&&
name|fe
operator|->
name|type
argument_list|()
operator|!=
name|QFontEngine
operator|::
name|Multi
argument_list|)
expr_stmt|;
name|engines
index|[
literal|0
index|]
operator|=
name|fe
expr_stmt|;
name|fe
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|fontDef
operator|=
name|engines
index|[
literal|0
index|]
operator|->
name|fontDef
expr_stmt|;
name|cache_cost
operator|=
name|fe
operator|->
name|cache_cost
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loadEngine
name|void
name|QFontEngineMultiBasicImpl
operator|::
name|loadEngine
parameter_list|(
name|int
name|at
parameter_list|)
block|{
name|ensureFallbackFamiliesQueried
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|at
operator|<
name|engines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|engines
operator|.
name|at
argument_list|(
name|at
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QFontDef
name|request
init|=
name|fontDef
decl_stmt|;
name|request
operator|.
name|styleStrategy
operator||=
name|QFont
operator|::
name|NoFontMerging
expr_stmt|;
name|request
operator|.
name|family
operator|=
name|fallbackFamilies
operator|.
name|at
argument_list|(
name|at
operator|-
literal|1
argument_list|)
expr_stmt|;
name|engines
index|[
name|at
index|]
operator|=
name|QFontDatabase
operator|::
name|findFont
argument_list|(
name|script
argument_list|,
comment|/*fontprivate = */
literal|0
argument_list|,
name|request
argument_list|,
comment|/*multi = */
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|engines
index|[
name|at
index|]
argument_list|)
expr_stmt|;
name|engines
index|[
name|at
index|]
operator|->
name|ref
operator|.
name|ref
argument_list|()
expr_stmt|;
name|engines
index|[
name|at
index|]
operator|->
name|fontDef
operator|=
name|request
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ensureFallbackFamiliesQueried
name|void
name|QFontEngineMultiBasicImpl
operator|::
name|ensureFallbackFamiliesQueried
parameter_list|()
block|{
if|if
condition|(
name|fallbacksQueried
condition|)
return|return;
name|QStringList
name|fallbacks
init|=
name|QGuiApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|platformIntegration
argument_list|()
operator|->
name|fontDatabase
argument_list|()
operator|->
name|fallbacksForFamily
argument_list|(
name|engine
argument_list|(
literal|0
argument_list|)
operator|->
name|fontDef
operator|.
name|family
argument_list|,
name|QFont
operator|::
name|Style
argument_list|(
name|engine
argument_list|(
literal|0
argument_list|)
operator|->
name|fontDef
operator|.
name|style
argument_list|)
argument_list|,
name|QFont
operator|::
name|AnyStyle
argument_list|,
name|QChar
operator|::
name|Script
argument_list|(
name|script
argument_list|)
argument_list|)
decl_stmt|;
name|setFallbackFamiliesList
argument_list|(
name|fallbacks
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFallbackFamiliesList
name|void
name|QFontEngineMultiBasicImpl
operator|::
name|setFallbackFamiliesList
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|fallbacks
parameter_list|)
block|{
comment|// Original FontEngine to restore after the fill.
name|QFontEngine
modifier|*
name|fe
init|=
name|engines
index|[
literal|0
index|]
decl_stmt|;
name|fallbackFamilies
operator|=
name|fallbacks
expr_stmt|;
if|if
condition|(
operator|!
name|fallbackFamilies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|engines
operator|.
name|fill
argument_list|(
literal|0
argument_list|,
name|fallbackFamilies
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|engines
index|[
literal|0
index|]
operator|=
name|fe
expr_stmt|;
block|}
else|else
block|{
comment|// Turns out we lied about having any fallback at all.
name|fallbackFamilies
operator|<<
name|fe
operator|->
name|fontDef
operator|.
name|family
expr_stmt|;
name|engines
index|[
literal|1
index|]
operator|=
name|fe
expr_stmt|;
name|fe
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
name|fallbacksQueried
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   This is used indirectly by Qt WebKit when using QTextLayout::setRawFont    The purpose of this is to provide the necessary font fallbacks when drawing complex   text. Since Qt WebKit ends up repeatedly creating QTextLayout instances and passing them   the same raw font over and over again, we want to cache the corresponding multi font engine   as it may contain fallback font engines already. */
end_comment
begin_function
DECL|function|createMultiFontEngine
name|QFontEngine
modifier|*
name|QFontEngineMultiBasicImpl
operator|::
name|createMultiFontEngine
parameter_list|(
name|QFontEngine
modifier|*
name|fe
parameter_list|,
name|int
name|script
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|engine
init|=
literal|0
decl_stmt|;
name|QFontCache
operator|::
name|Key
name|key
argument_list|(
name|fe
operator|->
name|fontDef
argument_list|,
name|script
argument_list|,
comment|/*multi = */
literal|true
argument_list|)
decl_stmt|;
name|QFontCache
modifier|*
name|fc
init|=
name|QFontCache
operator|::
name|instance
argument_list|()
decl_stmt|;
comment|//  We can't rely on the fontDef (and hence the cache Key)
comment|//  alone to distinguish webfonts, since these should not be
comment|//  accidentally shared, even if the resulting fontcache key
comment|//  is strictly identical. See:
comment|//   http://www.w3.org/TR/css3-fonts/#font-face-rule
specifier|const
name|bool
name|faceIsLocal
init|=
operator|!
name|fe
operator|->
name|faceId
argument_list|()
operator|.
name|filename
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|QFontCache
operator|::
name|EngineCache
operator|::
name|Iterator
name|it
init|=
name|fc
operator|->
name|engineCache
operator|.
name|find
argument_list|(
name|key
argument_list|)
decl_stmt|,
name|end
init|=
name|fc
operator|->
name|engineCache
operator|.
name|end
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|end
operator|&&
name|it
operator|.
name|key
argument_list|()
operator|==
name|key
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
operator|->
name|type
argument_list|()
operator|==
name|QFontEngine
operator|::
name|Multi
argument_list|)
expr_stmt|;
name|QFontEngineMulti
modifier|*
name|cachedEngine
init|=
cast|static_cast
argument_list|<
name|QFontEngineMulti
operator|*
argument_list|>
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|fe
operator|==
name|cachedEngine
operator|->
name|engine
argument_list|(
literal|0
argument_list|)
operator|||
operator|(
name|faceIsLocal
operator|&&
name|fe
operator|->
name|faceId
argument_list|()
operator|.
name|filename
operator|==
name|cachedEngine
operator|->
name|engine
argument_list|(
literal|0
argument_list|)
operator|->
name|faceId
argument_list|()
operator|.
name|filename
operator|)
condition|)
block|{
name|engine
operator|=
name|cachedEngine
expr_stmt|;
name|fc
operator|->
name|updateHitCountAndTimeStamp
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|it
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|engine
condition|)
block|{
name|engine
operator|=
name|QGuiApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|platformIntegration
argument_list|()
operator|->
name|fontDatabase
argument_list|()
operator|->
name|fontEngineMulti
argument_list|(
name|fe
argument_list|,
name|QChar
operator|::
name|Script
argument_list|(
name|script
argument_list|)
argument_list|)
expr_stmt|;
name|QFontCache
operator|::
name|instance
argument_list|()
operator|->
name|insertEngine
argument_list|(
name|key
argument_list|,
name|engine
argument_list|,
comment|/* insertMulti */
operator|!
name|faceIsLocal
argument_list|)
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|engine
argument_list|)
expr_stmt|;
return|return
name|engine
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
