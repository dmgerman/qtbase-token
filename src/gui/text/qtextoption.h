begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTEXTOPTION_H
end_ifndef
begin_define
DECL|macro|QTEXTOPTION_H
define|#
directive|define
name|QTEXTOPTION_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qnamespace.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qchar.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmetatype.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Gui
argument_list|)
name|template
decl|<
name|typename
name|T
decl|>
name|class
name|QList
decl_stmt|;
end_decl_stmt
begin_struct_decl
struct_decl|struct
name|QTextOptionPrivate
struct_decl|;
end_struct_decl
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QTextOption
block|{
name|public
label|:
enum|enum
name|TabType
block|{
name|LeftTab
block|,
name|RightTab
block|,
name|CenterTab
block|,
name|DelimiterTab
block|}
enum|;
struct|struct
name|Q_GUI_EXPORT
name|Tab
block|{
specifier|inline
name|Tab
argument_list|()
operator|:
name|position
argument_list|(
literal|80
argument_list|)
operator|,
name|type
argument_list|(
argument|QTextOption::LeftTab
argument_list|)
block|{ }
specifier|inline
name|Tab
argument_list|(
argument|qreal pos
argument_list|,
argument|TabType tabType
argument_list|,
argument|QChar delim = QChar()
argument_list|)
operator|:
name|position
argument_list|(
name|pos
argument_list|)
operator|,
name|type
argument_list|(
name|tabType
argument_list|)
operator|,
name|delimiter
argument_list|(
argument|delim
argument_list|)
block|{}
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Tab
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|type
operator|==
name|other
operator|.
name|type
operator|&&
name|qFuzzyCompare
argument_list|(
name|position
argument_list|,
name|other
operator|.
name|position
argument_list|)
operator|&&
name|delimiter
operator|==
name|other
operator|.
name|delimiter
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|Tab
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|other
operator|)
return|;
block|}
name|qreal
name|position
decl_stmt|;
name|TabType
name|type
decl_stmt|;
name|QChar
name|delimiter
decl_stmt|;
block|}
struct|;
name|QTextOption
argument_list|()
expr_stmt|;
name|QTextOption
argument_list|(
argument|Qt::Alignment alignment
argument_list|)
empty_stmt|;
operator|~
name|QTextOption
argument_list|()
expr_stmt|;
name|QTextOption
argument_list|(
specifier|const
name|QTextOption
operator|&
name|o
argument_list|)
expr_stmt|;
name|QTextOption
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QTextOption
operator|&
name|o
operator|)
decl_stmt|;
specifier|inline
name|void
name|setAlignment
argument_list|(
name|Qt
operator|::
name|Alignment
name|alignment
argument_list|)
decl_stmt|;
specifier|inline
name|Qt
operator|::
name|Alignment
name|alignment
argument_list|()
specifier|const
block|{
return|return
name|Qt
operator|::
name|Alignment
argument_list|(
name|align
argument_list|)
return|;
block|}
specifier|inline
name|void
name|setTextDirection
argument_list|(
name|Qt
operator|::
name|LayoutDirection
name|aDirection
argument_list|)
block|{
name|this
operator|->
name|direction
operator|=
name|aDirection
expr_stmt|;
block|}
specifier|inline
name|Qt
operator|::
name|LayoutDirection
name|textDirection
argument_list|()
specifier|const
block|{
return|return
name|Qt
operator|::
name|LayoutDirection
argument_list|(
name|direction
argument_list|)
return|;
block|}
enum|enum
name|WrapMode
block|{
name|NoWrap
block|,
name|WordWrap
block|,
name|ManualWrap
block|,
name|WrapAnywhere
block|,
name|WrapAtWordBoundaryOrAnywhere
block|}
enum|;
specifier|inline
name|void
name|setWrapMode
parameter_list|(
name|WrapMode
name|wrap
parameter_list|)
block|{
name|wordWrap
operator|=
name|wrap
expr_stmt|;
block|}
specifier|inline
name|WrapMode
name|wrapMode
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|WrapMode
operator|>
operator|(
name|wordWrap
operator|)
return|;
block|}
enum|enum
name|Flag
block|{
name|ShowTabsAndSpaces
init|=
literal|0x1
block|,
name|ShowLineAndParagraphSeparators
init|=
literal|0x2
block|,
name|AddSpaceForLineAndParagraphSeparators
init|=
literal|0x4
block|,
name|SuppressColors
init|=
literal|0x8
block|,
name|IncludeTrailingSpaces
init|=
literal|0x80000000
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|Flags
argument_list|,
argument|Flag
argument_list|)
specifier|inline
name|void
name|setFlags
parameter_list|(
name|Flags
name|flags
parameter_list|)
function_decl|;
specifier|inline
name|Flags
name|flags
argument_list|()
specifier|const
block|{
return|return
name|Flags
argument_list|(
name|f
argument_list|)
return|;
block|}
specifier|inline
name|void
name|setTabStop
parameter_list|(
name|qreal
name|tabStop
parameter_list|)
function_decl|;
specifier|inline
name|qreal
name|tabStop
argument_list|()
specifier|const
block|{
return|return
name|tab
return|;
block|}
name|void
name|setTabArray
argument_list|(
name|QList
operator|<
name|qreal
operator|>
name|tabStops
argument_list|)
decl_stmt|;
name|QList
operator|<
name|qreal
operator|>
name|tabArray
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setTabs
argument_list|(
name|QList
operator|<
name|Tab
operator|>
name|tabStops
argument_list|)
decl_stmt|;
name|QList
operator|<
name|Tab
operator|>
name|tabs
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setUseDesignMetrics
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|design
operator|=
name|b
expr_stmt|;
block|}
name|bool
name|useDesignMetrics
argument_list|()
specifier|const
block|{
return|return
name|design
return|;
block|}
name|private
label|:
name|uint
name|align
range|:
literal|8
decl_stmt|;
name|uint
name|wordWrap
range|:
literal|4
decl_stmt|;
name|uint
name|design
range|:
literal|1
decl_stmt|;
name|uint
name|direction
range|:
literal|2
decl_stmt|;
name|uint
name|unused
range|:
literal|18
decl_stmt|;
name|uint
name|f
decl_stmt|;
name|qreal
name|tab
decl_stmt|;
name|QTextOptionPrivate
modifier|*
name|d
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QTextOption::Flags
argument_list|)
end_macro
begin_expr_stmt
DECL|function|setAlignment
specifier|inline
name|void
name|QTextOption
operator|::
name|setAlignment
argument_list|(
argument|Qt::Alignment aalignment
argument_list|)
block|{
name|align
operator|=
name|aalignment
block|; }
DECL|function|setFlags
specifier|inline
name|void
name|QTextOption
operator|::
name|setFlags
argument_list|(
argument|Flags aflags
argument_list|)
block|{
name|f
operator|=
name|aflags
block|; }
DECL|function|setTabStop
specifier|inline
name|void
name|QTextOption
operator|::
name|setTabStop
argument_list|(
argument|qreal atabStop
argument_list|)
block|{
name|tab
operator|=
name|atabStop
block|; }
name|QT_END_NAMESPACE
name|Q_DECLARE_METATYPE
argument_list|(
argument|QTextOption::Tab
argument_list|)
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QTEXTOPTION_H
end_comment
end_unit
