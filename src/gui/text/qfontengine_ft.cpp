begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdir.h"
end_include
begin_include
include|#
directive|include
file|"qmetatype.h"
end_include
begin_include
include|#
directive|include
file|"qtextstream.h"
end_include
begin_include
include|#
directive|include
file|"qvariant.h"
end_include
begin_include
include|#
directive|include
file|"qfontengine_ft_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qimage_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FREETYPE
end_ifndef
begin_include
include|#
directive|include
file|"qfile.h"
end_include
begin_include
include|#
directive|include
file|"qfileinfo.h"
end_include
begin_include
include|#
directive|include
file|"qthreadstorage.h"
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_include
include|#
directive|include
file|<ft2build.h>
end_include
begin_include
include|#
directive|include
include|FT_FREETYPE_H
end_include
begin_include
include|#
directive|include
include|FT_OUTLINE_H
end_include
begin_include
include|#
directive|include
include|FT_SYNTHESIS_H
end_include
begin_include
include|#
directive|include
include|FT_TRUETYPE_TABLES_H
end_include
begin_include
include|#
directive|include
include|FT_TYPE1_TABLES_H
end_include
begin_include
include|#
directive|include
include|FT_GLYPH_H
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|FT_LCD_FILTER_H
argument_list|)
end_if
begin_include
include|#
directive|include
include|FT_LCD_FILTER_H
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|FT_CONFIG_OPTIONS_H
argument_list|)
end_if
begin_include
include|#
directive|include
include|FT_CONFIG_OPTIONS_H
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|FT_LCD_FILTER_H
argument_list|)
operator|&&
name|defined
argument_list|(
name|FT_CONFIG_OPTION_SUBPIXEL_RENDERING
argument_list|)
end_if
begin_define
DECL|macro|QT_USE_FREETYPE_LCDFILTER
define|#
directive|define
name|QT_USE_FREETYPE_LCDFILTER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_LINUXBASE
end_ifdef
begin_include
include|#
directive|include
include|FT_ERRORS_H
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_MAX_CACHED_GLYPH_SIZE
argument_list|)
end_if
begin_define
DECL|macro|QT_MAX_CACHED_GLYPH_SIZE
define|#
directive|define
name|QT_MAX_CACHED_GLYPH_SIZE
value|64
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*  * Freetype 2.1.7 and earlier used width/height  * for matching sizes in the BDF and PCF loaders.  * This has been fixed for 2.1.8.  */
if|#
directive|if
operator|(
name|FREETYPE_MAJOR
operator|*
literal|10000
operator|+
name|FREETYPE_MINOR
operator|*
literal|100
operator|+
name|FREETYPE_PATCH
operator|)
operator|>=
literal|20105
DECL|macro|X_SIZE
define|#
directive|define
name|X_SIZE
parameter_list|(
name|face
parameter_list|,
name|i
parameter_list|)
value|((face)->available_sizes[i].x_ppem)
DECL|macro|Y_SIZE
define|#
directive|define
name|Y_SIZE
parameter_list|(
name|face
parameter_list|,
name|i
parameter_list|)
value|((face)->available_sizes[i].y_ppem)
else|#
directive|else
define|#
directive|define
name|X_SIZE
parameter_list|(
name|face
parameter_list|,
name|i
parameter_list|)
value|((face)->available_sizes[i].width<< 6)
define|#
directive|define
name|Y_SIZE
parameter_list|(
name|face
parameter_list|,
name|i
parameter_list|)
value|((face)->available_sizes[i].height<< 6)
endif|#
directive|endif
comment|/* FreeType 2.1.10 starts to provide FT_GlyphSlot_Embolden */
if|#
directive|if
operator|(
name|FREETYPE_MAJOR
operator|*
literal|10000
operator|+
name|FREETYPE_MINOR
operator|*
literal|100
operator|+
name|FREETYPE_PATCH
operator|)
operator|>=
literal|20110
DECL|macro|Q_FT_GLYPHSLOT_EMBOLDEN
define|#
directive|define
name|Q_FT_GLYPHSLOT_EMBOLDEN
parameter_list|(
name|slot
parameter_list|)
value|FT_GlyphSlot_Embolden(slot)
else|#
directive|else
define|#
directive|define
name|Q_FT_GLYPHSLOT_EMBOLDEN
parameter_list|(
name|slot
parameter_list|)
endif|#
directive|endif
comment|/* FreeType 2.1.10 starts to provide FT_GlyphSlot_Oblique */
if|#
directive|if
operator|(
name|FREETYPE_MAJOR
operator|*
literal|10000
operator|+
name|FREETYPE_MINOR
operator|*
literal|100
operator|+
name|FREETYPE_PATCH
operator|)
operator|>=
literal|20110
DECL|macro|Q_HAS_FT_GLYPHSLOT_OBLIQUE
define|#
directive|define
name|Q_HAS_FT_GLYPHSLOT_OBLIQUE
DECL|macro|Q_FT_GLYPHSLOT_OBLIQUE
define|#
directive|define
name|Q_FT_GLYPHSLOT_OBLIQUE
parameter_list|(
name|slot
parameter_list|)
value|FT_GlyphSlot_Oblique(slot)
else|#
directive|else
define|#
directive|define
name|Q_FT_GLYPHSLOT_OBLIQUE
parameter_list|(
name|slot
parameter_list|)
endif|#
directive|endif
DECL|macro|FLOOR
define|#
directive|define
name|FLOOR
parameter_list|(
name|x
parameter_list|)
value|((x)& -64)
DECL|macro|CEIL
define|#
directive|define
name|CEIL
parameter_list|(
name|x
parameter_list|)
value|(((x)+63)& -64)
DECL|macro|TRUNC
define|#
directive|define
name|TRUNC
parameter_list|(
name|x
parameter_list|)
value|((x)>> 6)
DECL|macro|ROUND
define|#
directive|define
name|ROUND
parameter_list|(
name|x
parameter_list|)
value|(((x)+32)& -64)
DECL|function|ft_getSfntTable
specifier|static
name|bool
name|ft_getSfntTable
parameter_list|(
name|void
modifier|*
name|user_data
parameter_list|,
name|uint
name|tag
parameter_list|,
name|uchar
modifier|*
name|buffer
parameter_list|,
name|uint
modifier|*
name|length
parameter_list|)
block|{
name|FT_Face
name|face
init|=
operator|(
name|FT_Face
operator|)
name|user_data
decl_stmt|;
name|bool
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|FT_IS_SFNT
argument_list|(
name|face
argument_list|)
condition|)
block|{
name|FT_ULong
name|len
init|=
operator|*
name|length
decl_stmt|;
name|result
operator|=
name|FT_Load_Sfnt_Table
argument_list|(
name|face
argument_list|,
name|tag
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
operator|&
name|len
argument_list|)
operator|==
name|FT_Err_Ok
expr_stmt|;
operator|*
name|length
operator|=
name|len
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|// -------------------------- Freetype support ------------------------------
end_comment
begin_class
DECL|class|QtFreetypeData
class|class
name|QtFreetypeData
block|{
public|public:
DECL|function|QtFreetypeData
name|QtFreetypeData
parameter_list|()
member_init_list|:
name|library
argument_list|(
literal|0
argument_list|)
block|{ }
name|~
name|QtFreetypeData
parameter_list|()
destructor_decl|;
DECL|member|library
name|FT_Library
name|library
decl_stmt|;
DECL|member|faces
name|QHash
argument_list|<
name|QFontEngine
operator|::
name|FaceId
argument_list|,
name|QFreetypeFace
modifier|*
argument_list|>
name|faces
decl_stmt|;
block|}
class|;
end_class
begin_destructor
DECL|function|~QtFreetypeData
name|QtFreetypeData
operator|::
name|~
name|QtFreetypeData
parameter_list|()
block|{
for|for
control|(
name|QHash
argument_list|<
name|QFontEngine
operator|::
name|FaceId
argument_list|,
name|QFreetypeFace
operator|*
argument_list|>
operator|::
name|ConstIterator
name|iter
init|=
name|faces
operator|.
name|begin
argument_list|()
init|;
name|iter
operator|!=
name|faces
operator|.
name|end
argument_list|()
condition|;
operator|++
name|iter
control|)
name|iter
operator|.
name|value
argument_list|()
operator|->
name|cleanup
argument_list|()
expr_stmt|;
name|faces
operator|.
name|clear
argument_list|()
expr_stmt|;
name|FT_Done_FreeType
argument_list|(
name|library
argument_list|)
expr_stmt|;
name|library
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_THREAD
end_ifdef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QtFreetypeData
argument_list|,
argument|theFreetypeData
argument_list|)
end_macro
begin_function
DECL|function|qt_getFreetypeData
name|QtFreetypeData
modifier|*
name|qt_getFreetypeData
parameter_list|()
block|{
return|return
name|theFreetypeData
argument_list|()
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QThreadStorage<QtFreetypeData *>
argument_list|,
argument|theFreetypeData
argument_list|)
end_macro
begin_function
DECL|function|qt_getFreetypeData
name|QtFreetypeData
modifier|*
name|qt_getFreetypeData
parameter_list|()
block|{
name|QtFreetypeData
modifier|*
modifier|&
name|freetypeData
init|=
name|theFreetypeData
argument_list|()
operator|->
name|localData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|freetypeData
condition|)
name|freetypeData
operator|=
operator|new
name|QtFreetypeData
expr_stmt|;
return|return
name|freetypeData
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qt_getFreetype
name|FT_Library
name|qt_getFreetype
parameter_list|()
block|{
name|QtFreetypeData
modifier|*
name|freetypeData
init|=
name|qt_getFreetypeData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|freetypeData
operator|->
name|library
condition|)
name|FT_Init_FreeType
argument_list|(
operator|&
name|freetypeData
operator|->
name|library
argument_list|)
expr_stmt|;
return|return
name|freetypeData
operator|->
name|library
return|;
block|}
end_function
begin_function
DECL|function|fsType
name|int
name|QFreetypeFace
operator|::
name|fsType
parameter_list|()
specifier|const
block|{
name|int
name|fsType
init|=
literal|0
decl_stmt|;
name|TT_OS2
modifier|*
name|os2
init|=
operator|(
name|TT_OS2
operator|*
operator|)
name|FT_Get_Sfnt_Table
argument_list|(
name|face
argument_list|,
name|ft_sfnt_os2
argument_list|)
decl_stmt|;
if|if
condition|(
name|os2
condition|)
name|fsType
operator|=
name|os2
operator|->
name|fsType
expr_stmt|;
return|return
name|fsType
return|;
block|}
end_function
begin_function
DECL|function|getPointInOutline
name|int
name|QFreetypeFace
operator|::
name|getPointInOutline
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|int
name|flags
parameter_list|,
name|quint32
name|point
parameter_list|,
name|QFixed
modifier|*
name|xpos
parameter_list|,
name|QFixed
modifier|*
name|ypos
parameter_list|,
name|quint32
modifier|*
name|nPoints
parameter_list|)
block|{
if|if
condition|(
name|int
name|error
init|=
name|FT_Load_Glyph
argument_list|(
name|face
argument_list|,
name|glyph
argument_list|,
name|flags
argument_list|)
condition|)
return|return
name|error
return|;
if|if
condition|(
name|face
operator|->
name|glyph
operator|->
name|format
operator|!=
name|FT_GLYPH_FORMAT_OUTLINE
condition|)
return|return
name|Err_Invalid_SubTable
return|;
operator|*
name|nPoints
operator|=
name|face
operator|->
name|glyph
operator|->
name|outline
operator|.
name|n_points
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|*
name|nPoints
operator|)
condition|)
return|return
name|Err_Ok
return|;
if|if
condition|(
name|point
operator|>
operator|*
name|nPoints
condition|)
return|return
name|Err_Invalid_SubTable
return|;
operator|*
name|xpos
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|face
operator|->
name|glyph
operator|->
name|outline
operator|.
name|points
index|[
name|point
index|]
operator|.
name|x
argument_list|)
expr_stmt|;
operator|*
name|ypos
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|face
operator|->
name|glyph
operator|->
name|outline
operator|.
name|points
index|[
name|point
index|]
operator|.
name|y
argument_list|)
expr_stmt|;
return|return
name|Err_Ok
return|;
block|}
end_function
begin_function_decl
specifier|extern
name|QByteArray
name|qt_fontdata_from_index
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*  * One font file can contain more than one font (bold/italic for example)  * find the right one and return it.  *  * Returns the freetype face or 0 in case of an empty file or any other problems  * (like not being able to open the file)  */
end_comment
begin_function
DECL|function|getFace
name|QFreetypeFace
modifier|*
name|QFreetypeFace
operator|::
name|getFace
parameter_list|(
specifier|const
name|QFontEngine
operator|::
name|FaceId
modifier|&
name|face_id
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|)
block|{
if|if
condition|(
name|face_id
operator|.
name|filename
operator|.
name|isEmpty
argument_list|()
operator|&&
name|fontData
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|QtFreetypeData
modifier|*
name|freetypeData
init|=
name|qt_getFreetypeData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|freetypeData
operator|->
name|library
condition|)
name|FT_Init_FreeType
argument_list|(
operator|&
name|freetypeData
operator|->
name|library
argument_list|)
expr_stmt|;
name|QFreetypeFace
modifier|*
name|freetype
init|=
name|freetypeData
operator|->
name|faces
operator|.
name|value
argument_list|(
name|face_id
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|freetype
condition|)
block|{
name|freetype
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
else|else
block|{
name|QScopedPointer
argument_list|<
name|QFreetypeFace
argument_list|>
name|newFreetype
argument_list|(
operator|new
name|QFreetypeFace
argument_list|)
decl_stmt|;
name|FT_Face
name|face
decl_stmt|;
if|if
condition|(
operator|!
name|face_id
operator|.
name|filename
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|fileName
init|=
name|QFile
operator|::
name|decodeName
argument_list|(
name|face_id
operator|.
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|face_id
operator|.
name|filename
operator|.
name|startsWith
argument_list|(
literal|":qmemoryfonts/"
argument_list|)
condition|)
block|{
comment|// from qfontdatabase.cpp
name|QByteArray
name|idx
init|=
name|face_id
operator|.
name|filename
decl_stmt|;
name|idx
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|14
argument_list|)
expr_stmt|;
comment|// remove ':qmemoryfonts/'
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|newFreetype
operator|->
name|fontData
operator|=
name|qt_fontdata_from_index
argument_list|(
name|idx
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
name|newFreetype
operator|->
name|fontData
operator|=
name|QByteArray
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|QFileInfo
argument_list|(
name|fileName
argument_list|)
operator|.
name|isNativePath
argument_list|()
condition|)
block|{
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
name|newFreetype
operator|->
name|fontData
operator|=
name|file
operator|.
name|readAll
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|newFreetype
operator|->
name|fontData
operator|=
name|fontData
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|newFreetype
operator|->
name|fontData
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|FT_New_Memory_Face
argument_list|(
name|freetypeData
operator|->
name|library
argument_list|,
operator|(
specifier|const
name|FT_Byte
operator|*
operator|)
name|newFreetype
operator|->
name|fontData
operator|.
name|constData
argument_list|()
argument_list|,
name|newFreetype
operator|->
name|fontData
operator|.
name|size
argument_list|()
argument_list|,
name|face_id
operator|.
name|index
argument_list|,
operator|&
name|face
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|FT_New_Face
argument_list|(
name|freetypeData
operator|->
name|library
argument_list|,
name|face_id
operator|.
name|filename
argument_list|,
name|face_id
operator|.
name|index
argument_list|,
operator|&
name|face
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
name|newFreetype
operator|->
name|face
operator|=
name|face
expr_stmt|;
name|newFreetype
operator|->
name|hbFace
operator|=
literal|0
expr_stmt|;
name|newFreetype
operator|->
name|hbFace_destroy_func
operator|=
literal|0
expr_stmt|;
name|newFreetype
operator|->
name|ref
operator|.
name|store
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|newFreetype
operator|->
name|xsize
operator|=
literal|0
expr_stmt|;
name|newFreetype
operator|->
name|ysize
operator|=
literal|0
expr_stmt|;
name|newFreetype
operator|->
name|matrix
operator|.
name|xx
operator|=
literal|0x10000
expr_stmt|;
name|newFreetype
operator|->
name|matrix
operator|.
name|yy
operator|=
literal|0x10000
expr_stmt|;
name|newFreetype
operator|->
name|matrix
operator|.
name|xy
operator|=
literal|0
expr_stmt|;
name|newFreetype
operator|->
name|matrix
operator|.
name|yx
operator|=
literal|0
expr_stmt|;
name|newFreetype
operator|->
name|unicode_map
operator|=
literal|0
expr_stmt|;
name|newFreetype
operator|->
name|symbol_map
operator|=
literal|0
expr_stmt|;
name|memset
argument_list|(
name|newFreetype
operator|->
name|cmapCache
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|newFreetype
operator|->
name|cmapCache
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newFreetype
operator|->
name|face
operator|->
name|num_charmaps
condition|;
operator|++
name|i
control|)
block|{
name|FT_CharMap
name|cm
init|=
name|newFreetype
operator|->
name|face
operator|->
name|charmaps
index|[
name|i
index|]
decl_stmt|;
switch|switch
condition|(
name|cm
operator|->
name|encoding
condition|)
block|{
case|case
name|FT_ENCODING_UNICODE
case|:
name|newFreetype
operator|->
name|unicode_map
operator|=
name|cm
expr_stmt|;
break|break;
case|case
name|FT_ENCODING_APPLE_ROMAN
case|:
case|case
name|FT_ENCODING_ADOBE_LATIN_1
case|:
if|if
condition|(
operator|!
name|newFreetype
operator|->
name|unicode_map
operator|||
name|newFreetype
operator|->
name|unicode_map
operator|->
name|encoding
operator|!=
name|FT_ENCODING_UNICODE
condition|)
name|newFreetype
operator|->
name|unicode_map
operator|=
name|cm
expr_stmt|;
break|break;
case|case
name|FT_ENCODING_ADOBE_CUSTOM
case|:
case|case
name|FT_ENCODING_MS_SYMBOL
case|:
if|if
condition|(
operator|!
name|newFreetype
operator|->
name|symbol_map
condition|)
name|newFreetype
operator|->
name|symbol_map
operator|=
name|cm
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|FT_IS_SCALABLE
argument_list|(
name|newFreetype
operator|->
name|face
argument_list|)
operator|&&
name|newFreetype
operator|->
name|face
operator|->
name|num_fixed_sizes
operator|==
literal|1
condition|)
name|FT_Set_Char_Size
argument_list|(
name|face
argument_list|,
name|X_SIZE
argument_list|(
name|newFreetype
operator|->
name|face
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Y_SIZE
argument_list|(
name|newFreetype
operator|->
name|face
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FT_Set_Charmap
argument_list|(
name|newFreetype
operator|->
name|face
argument_list|,
name|newFreetype
operator|->
name|unicode_map
argument_list|)
expr_stmt|;
name|QT_TRY
block|{
name|freetypeData
operator|->
name|faces
operator|.
name|insert
argument_list|(
name|face_id
argument_list|,
name|newFreetype
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|newFreetype
operator|.
name|take
argument_list|()
operator|->
name|release
argument_list|(
name|face_id
argument_list|)
expr_stmt|;
comment|// we could return null in principle instead of throwing
name|QT_RETHROW
expr_stmt|;
block|}
name|freetype
operator|=
name|newFreetype
operator|.
name|take
argument_list|()
expr_stmt|;
block|}
return|return
name|freetype
return|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|QFreetypeFace
operator|::
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|hbFace
operator|&&
name|hbFace_destroy_func
condition|)
block|{
name|hbFace_destroy_func
argument_list|(
name|hbFace
argument_list|)
expr_stmt|;
name|hbFace
operator|=
literal|0
expr_stmt|;
block|}
name|FT_Done_Face
argument_list|(
name|face
argument_list|)
expr_stmt|;
name|face
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|release
name|void
name|QFreetypeFace
operator|::
name|release
parameter_list|(
specifier|const
name|QFontEngine
operator|::
name|FaceId
modifier|&
name|face_id
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ref
operator|.
name|deref
argument_list|()
condition|)
block|{
if|if
condition|(
name|face
condition|)
block|{
name|QtFreetypeData
modifier|*
name|freetypeData
init|=
name|qt_getFreetypeData
argument_list|()
decl_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
if|if
condition|(
name|freetypeData
operator|->
name|faces
operator|.
name|contains
argument_list|(
name|face_id
argument_list|)
condition|)
name|freetypeData
operator|->
name|faces
operator|.
name|take
argument_list|(
name|face_id
argument_list|)
expr_stmt|;
if|if
condition|(
name|freetypeData
operator|->
name|faces
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|FT_Done_FreeType
argument_list|(
name|freetypeData
operator|->
name|library
argument_list|)
expr_stmt|;
name|freetypeData
operator|->
name|library
operator|=
literal|0
expr_stmt|;
block|}
block|}
operator|delete
name|this
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|computeSize
name|void
name|QFreetypeFace
operator|::
name|computeSize
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|fontDef
parameter_list|,
name|int
modifier|*
name|xsize
parameter_list|,
name|int
modifier|*
name|ysize
parameter_list|,
name|bool
modifier|*
name|outline_drawing
parameter_list|)
block|{
operator|*
name|ysize
operator|=
name|qRound
argument_list|(
name|fontDef
operator|.
name|pixelSize
operator|*
literal|64
argument_list|)
expr_stmt|;
operator|*
name|xsize
operator|=
operator|*
name|ysize
operator|*
name|fontDef
operator|.
name|stretch
operator|/
literal|100
expr_stmt|;
operator|*
name|outline_drawing
operator|=
literal|false
expr_stmt|;
comment|/*      * Bitmap only faces must match exactly, so find the closest      * one (height dominant search)      */
if|if
condition|(
operator|!
operator|(
name|face
operator|->
name|face_flags
operator|&
name|FT_FACE_FLAG_SCALABLE
operator|)
condition|)
block|{
name|int
name|best
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|face
operator|->
name|num_fixed_sizes
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|qAbs
argument_list|(
operator|*
name|ysize
operator|-
name|Y_SIZE
argument_list|(
name|face
argument_list|,
name|i
argument_list|)
argument_list|)
operator|<
name|qAbs
argument_list|(
operator|*
name|ysize
operator|-
name|Y_SIZE
argument_list|(
name|face
argument_list|,
name|best
argument_list|)
argument_list|)
operator|||
operator|(
name|qAbs
argument_list|(
operator|*
name|ysize
operator|-
name|Y_SIZE
argument_list|(
name|face
argument_list|,
name|i
argument_list|)
argument_list|)
operator|==
name|qAbs
argument_list|(
operator|*
name|ysize
operator|-
name|Y_SIZE
argument_list|(
name|face
argument_list|,
name|best
argument_list|)
argument_list|)
operator|&&
name|qAbs
argument_list|(
operator|*
name|xsize
operator|-
name|X_SIZE
argument_list|(
name|face
argument_list|,
name|i
argument_list|)
argument_list|)
operator|<
name|qAbs
argument_list|(
operator|*
name|xsize
operator|-
name|X_SIZE
argument_list|(
name|face
argument_list|,
name|best
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|best
operator|=
name|i
expr_stmt|;
block|}
block|}
if|if
condition|(
name|FT_Set_Char_Size
argument_list|(
name|face
argument_list|,
name|X_SIZE
argument_list|(
name|face
argument_list|,
name|best
argument_list|)
argument_list|,
name|Y_SIZE
argument_list|(
name|face
argument_list|,
name|best
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|==
literal|0
condition|)
block|{
operator|*
name|xsize
operator|=
name|X_SIZE
argument_list|(
name|face
argument_list|,
name|best
argument_list|)
expr_stmt|;
operator|*
name|ysize
operator|=
name|Y_SIZE
argument_list|(
name|face
argument_list|,
name|best
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|err
init|=
literal|1
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|face
operator|->
name|face_flags
operator|&
name|FT_FACE_FLAG_SCALABLE
operator|)
operator|&&
name|ysize
operator|==
literal|0
operator|&&
name|face
operator|->
name|num_fixed_sizes
operator|>=
literal|1
condition|)
block|{
comment|// work around FT 2.1.10 problem with BDF without PIXEL_SIZE property
name|err
operator|=
name|FT_Set_Pixel_Sizes
argument_list|(
name|face
argument_list|,
name|face
operator|->
name|available_sizes
index|[
literal|0
index|]
operator|.
name|width
argument_list|,
name|face
operator|->
name|available_sizes
index|[
literal|0
index|]
operator|.
name|height
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|&&
name|face
operator|->
name|num_fixed_sizes
operator|==
literal|1
condition|)
name|err
operator|=
literal|0
expr_stmt|;
comment|//even more of a workaround...
block|}
if|if
condition|(
name|err
condition|)
operator|*
name|xsize
operator|=
operator|*
name|ysize
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
operator|*
name|outline_drawing
operator|=
operator|(
operator|*
name|xsize
operator|>
operator|(
name|QT_MAX_CACHED_GLYPH_SIZE
operator|<<
literal|6
operator|)
operator|||
operator|*
name|ysize
operator|>
operator|(
name|QT_MAX_CACHED_GLYPH_SIZE
operator|<<
literal|6
operator|)
operator|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|properties
name|QFontEngine
operator|::
name|Properties
name|QFreetypeFace
operator|::
name|properties
parameter_list|()
specifier|const
block|{
name|QFontEngine
operator|::
name|Properties
name|p
decl_stmt|;
name|p
operator|.
name|postscriptName
operator|=
name|FT_Get_Postscript_Name
argument_list|(
name|face
argument_list|)
expr_stmt|;
name|PS_FontInfoRec
name|font_info
decl_stmt|;
if|if
condition|(
name|FT_Get_PS_Font_Info
argument_list|(
name|face
argument_list|,
operator|&
name|font_info
argument_list|)
operator|==
literal|0
condition|)
name|p
operator|.
name|copyright
operator|=
name|font_info
operator|.
name|notice
expr_stmt|;
if|if
condition|(
name|FT_IS_SCALABLE
argument_list|(
name|face
argument_list|)
condition|)
block|{
name|p
operator|.
name|ascent
operator|=
name|face
operator|->
name|ascender
expr_stmt|;
name|p
operator|.
name|descent
operator|=
operator|-
name|face
operator|->
name|descender
expr_stmt|;
name|p
operator|.
name|leading
operator|=
name|face
operator|->
name|height
operator|-
name|face
operator|->
name|ascender
operator|+
name|face
operator|->
name|descender
expr_stmt|;
name|p
operator|.
name|emSquare
operator|=
name|face
operator|->
name|units_per_EM
expr_stmt|;
name|p
operator|.
name|boundingBox
operator|=
name|QRectF
argument_list|(
name|face
operator|->
name|bbox
operator|.
name|xMin
argument_list|,
operator|-
name|face
operator|->
name|bbox
operator|.
name|yMax
argument_list|,
name|face
operator|->
name|bbox
operator|.
name|xMax
operator|-
name|face
operator|->
name|bbox
operator|.
name|xMin
argument_list|,
name|face
operator|->
name|bbox
operator|.
name|yMax
operator|-
name|face
operator|->
name|bbox
operator|.
name|yMin
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|.
name|ascent
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|ascender
argument_list|)
expr_stmt|;
name|p
operator|.
name|descent
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
operator|-
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|descender
argument_list|)
expr_stmt|;
name|p
operator|.
name|leading
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|height
operator|-
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|ascender
operator|+
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|descender
argument_list|)
expr_stmt|;
name|p
operator|.
name|emSquare
operator|=
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|y_ppem
expr_stmt|;
comment|//        p.boundingBox = QRectF(-p.ascent.toReal(), 0, (p.ascent + p.descent).toReal(), face->size->metrics.max_advance/64.);
name|p
operator|.
name|boundingBox
operator|=
name|QRectF
argument_list|(
literal|0
argument_list|,
operator|-
name|p
operator|.
name|ascent
operator|.
name|toReal
argument_list|()
argument_list|,
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|max_advance
operator|/
literal|64
argument_list|,
operator|(
name|p
operator|.
name|ascent
operator|+
name|p
operator|.
name|descent
operator|)
operator|.
name|toReal
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|italicAngle
operator|=
literal|0
expr_stmt|;
name|p
operator|.
name|capHeight
operator|=
name|p
operator|.
name|ascent
expr_stmt|;
name|p
operator|.
name|lineWidth
operator|=
name|face
operator|->
name|underline_thickness
expr_stmt|;
return|return
name|p
return|;
block|}
end_function
begin_function
DECL|function|getSfntTable
name|bool
name|QFreetypeFace
operator|::
name|getSfntTable
parameter_list|(
name|uint
name|tag
parameter_list|,
name|uchar
modifier|*
name|buffer
parameter_list|,
name|uint
modifier|*
name|length
parameter_list|)
specifier|const
block|{
return|return
name|ft_getSfntTable
argument_list|(
name|face
argument_list|,
name|tag
argument_list|,
name|buffer
argument_list|,
name|length
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/* Some fonts (such as MingLiu rely on hinting to scale different    components to their correct sizes. While this is really broken (it    should be done in the component glyph itself, not the hinter) we    will have to live with it.     This means we can not use FT_LOAD_NO_HINTING to get the glyph    outline. All we can do is to load the unscaled glyph and scale it    down manually when required. */
end_comment
begin_function
DECL|function|scaleOutline
specifier|static
name|void
name|scaleOutline
parameter_list|(
name|FT_Face
name|face
parameter_list|,
name|FT_GlyphSlot
name|g
parameter_list|,
name|FT_Fixed
name|x_scale
parameter_list|,
name|FT_Fixed
name|y_scale
parameter_list|)
block|{
name|x_scale
operator|=
name|FT_MulDiv
argument_list|(
name|x_scale
argument_list|,
literal|1
operator|<<
literal|10
argument_list|,
name|face
operator|->
name|units_per_EM
argument_list|)
expr_stmt|;
name|y_scale
operator|=
name|FT_MulDiv
argument_list|(
name|y_scale
argument_list|,
literal|1
operator|<<
literal|10
argument_list|,
name|face
operator|->
name|units_per_EM
argument_list|)
expr_stmt|;
name|FT_Vector
modifier|*
name|p
init|=
name|g
operator|->
name|outline
operator|.
name|points
decl_stmt|;
specifier|const
name|FT_Vector
modifier|*
name|e
init|=
name|p
operator|+
name|g
operator|->
name|outline
operator|.
name|n_points
decl_stmt|;
while|while
condition|(
name|p
operator|<
name|e
condition|)
block|{
name|p
operator|->
name|x
operator|=
name|FT_MulFix
argument_list|(
name|p
operator|->
name|x
argument_list|,
name|x_scale
argument_list|)
expr_stmt|;
name|p
operator|->
name|y
operator|=
name|FT_MulFix
argument_list|(
name|p
operator|->
name|y
argument_list|,
name|y_scale
argument_list|)
expr_stmt|;
operator|++
name|p
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|addGlyphToPath
name|void
name|QFreetypeFace
operator|::
name|addGlyphToPath
parameter_list|(
name|FT_Face
name|face
parameter_list|,
name|FT_GlyphSlot
name|g
parameter_list|,
specifier|const
name|QFixedPoint
modifier|&
name|point
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|FT_Fixed
name|x_scale
parameter_list|,
name|FT_Fixed
name|y_scale
parameter_list|)
block|{
specifier|const
name|qreal
name|factor
init|=
literal|1
operator|/
literal|64.
decl_stmt|;
name|scaleOutline
argument_list|(
name|face
argument_list|,
name|g
argument_list|,
name|x_scale
argument_list|,
name|y_scale
argument_list|)
expr_stmt|;
name|QPointF
name|cp
init|=
name|point
operator|.
name|toPointF
argument_list|()
decl_stmt|;
comment|// convert the outline to a painter path
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|g
operator|->
name|outline
operator|.
name|n_contours
condition|;
operator|++
name|j
control|)
block|{
name|int
name|last_point
init|=
name|g
operator|->
name|outline
operator|.
name|contours
index|[
name|j
index|]
decl_stmt|;
name|QPointF
name|start
init|=
name|cp
operator|+
name|QPointF
argument_list|(
name|g
operator|->
name|outline
operator|.
name|points
index|[
name|i
index|]
operator|.
name|x
operator|*
name|factor
argument_list|,
operator|-
name|g
operator|->
name|outline
operator|.
name|points
index|[
name|i
index|]
operator|.
name|y
operator|*
name|factor
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|g
operator|->
name|outline
operator|.
name|tags
index|[
name|i
index|]
operator|&
literal|1
operator|)
condition|)
block|{
name|start
operator|+=
name|cp
operator|+
name|QPointF
argument_list|(
name|g
operator|->
name|outline
operator|.
name|points
index|[
name|last_point
index|]
operator|.
name|x
operator|*
name|factor
argument_list|,
operator|-
name|g
operator|->
name|outline
operator|.
name|points
index|[
name|last_point
index|]
operator|.
name|y
operator|*
name|factor
argument_list|)
expr_stmt|;
name|start
operator|/=
literal|2
expr_stmt|;
block|}
comment|//         qDebug("contour: %d -- %d", i, g->outline.contours[j]);
comment|//         qDebug("first point at %f %f", start.x(), start.y());
name|path
operator|->
name|moveTo
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|QPointF
name|c
index|[
literal|4
index|]
decl_stmt|;
name|c
index|[
literal|0
index|]
operator|=
name|start
expr_stmt|;
name|int
name|n
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|last_point
condition|)
block|{
operator|++
name|i
expr_stmt|;
name|c
index|[
name|n
index|]
operator|=
name|cp
operator|+
name|QPointF
argument_list|(
name|g
operator|->
name|outline
operator|.
name|points
index|[
name|i
index|]
operator|.
name|x
operator|*
name|factor
argument_list|,
operator|-
name|g
operator|->
name|outline
operator|.
name|points
index|[
name|i
index|]
operator|.
name|y
operator|*
name|factor
argument_list|)
expr_stmt|;
comment|//             qDebug()<< "    i="<< i<< " flag="<< (int)g->outline.tags[i]<< "point="<< c[n];
operator|++
name|n
expr_stmt|;
switch|switch
condition|(
name|g
operator|->
name|outline
operator|.
name|tags
index|[
name|i
index|]
operator|&
literal|3
condition|)
block|{
case|case
literal|2
case|:
comment|// cubic bezier element
if|if
condition|(
name|n
operator|<
literal|4
condition|)
continue|continue;
name|c
index|[
literal|3
index|]
operator|=
operator|(
name|c
index|[
literal|3
index|]
operator|+
name|c
index|[
literal|2
index|]
operator|)
operator|/
literal|2
expr_stmt|;
operator|--
name|i
expr_stmt|;
break|break;
case|case
literal|0
case|:
comment|// quadratic bezier element
if|if
condition|(
name|n
operator|<
literal|3
condition|)
continue|continue;
name|c
index|[
literal|3
index|]
operator|=
operator|(
name|c
index|[
literal|1
index|]
operator|+
name|c
index|[
literal|2
index|]
operator|)
operator|/
literal|2
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|=
operator|(
literal|2
operator|*
name|c
index|[
literal|1
index|]
operator|+
name|c
index|[
literal|3
index|]
operator|)
operator|/
literal|3
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|=
operator|(
literal|2
operator|*
name|c
index|[
literal|1
index|]
operator|+
name|c
index|[
literal|0
index|]
operator|)
operator|/
literal|3
expr_stmt|;
operator|--
name|i
expr_stmt|;
break|break;
case|case
literal|1
case|:
case|case
literal|3
case|:
if|if
condition|(
name|n
operator|==
literal|2
condition|)
block|{
comment|//                     qDebug()<< "lineTo"<< c[1];
name|path
operator|->
name|lineTo
argument_list|(
name|c
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|c
index|[
literal|0
index|]
operator|=
name|c
index|[
literal|1
index|]
expr_stmt|;
name|n
operator|=
literal|1
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|n
operator|==
literal|3
condition|)
block|{
name|c
index|[
literal|3
index|]
operator|=
name|c
index|[
literal|2
index|]
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|=
operator|(
literal|2
operator|*
name|c
index|[
literal|1
index|]
operator|+
name|c
index|[
literal|3
index|]
operator|)
operator|/
literal|3
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|=
operator|(
literal|2
operator|*
name|c
index|[
literal|1
index|]
operator|+
name|c
index|[
literal|0
index|]
operator|)
operator|/
literal|3
expr_stmt|;
block|}
break|break;
block|}
comment|//             qDebug()<< "cubicTo"<< c[1]<< c[2]<< c[3];
name|path
operator|->
name|cubicTo
argument_list|(
name|c
index|[
literal|1
index|]
argument_list|,
name|c
index|[
literal|2
index|]
argument_list|,
name|c
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|c
index|[
literal|0
index|]
operator|=
name|c
index|[
literal|3
index|]
expr_stmt|;
name|n
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|==
literal|1
condition|)
block|{
comment|//             qDebug()<< "closeSubpath";
name|path
operator|->
name|closeSubpath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|c
index|[
literal|3
index|]
operator|=
name|start
expr_stmt|;
if|if
condition|(
name|n
operator|==
literal|2
condition|)
block|{
name|c
index|[
literal|2
index|]
operator|=
operator|(
literal|2
operator|*
name|c
index|[
literal|1
index|]
operator|+
name|c
index|[
literal|3
index|]
operator|)
operator|/
literal|3
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|=
operator|(
literal|2
operator|*
name|c
index|[
literal|1
index|]
operator|+
name|c
index|[
literal|0
index|]
operator|)
operator|/
literal|3
expr_stmt|;
block|}
comment|//             qDebug()<< "cubicTo"<< c[1]<< c[2]<< c[3];
name|path
operator|->
name|cubicTo
argument_list|(
name|c
index|[
literal|1
index|]
argument_list|,
name|c
index|[
literal|2
index|]
argument_list|,
name|c
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
block|}
block|}
end_function
begin_function_decl
specifier|extern
name|void
name|qt_addBitmapToPath
parameter_list|(
name|qreal
name|x0
parameter_list|,
name|qreal
name|y0
parameter_list|,
specifier|const
name|uchar
modifier|*
name|image_data
parameter_list|,
name|int
name|bpl
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|addBitmapToPath
name|void
name|QFreetypeFace
operator|::
name|addBitmapToPath
parameter_list|(
name|FT_GlyphSlot
name|slot
parameter_list|,
specifier|const
name|QFixedPoint
modifier|&
name|point
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|bool
parameter_list|)
block|{
if|if
condition|(
name|slot
operator|->
name|format
operator|!=
name|FT_GLYPH_FORMAT_BITMAP
operator|||
name|slot
operator|->
name|bitmap
operator|.
name|pixel_mode
operator|!=
name|FT_PIXEL_MODE_MONO
condition|)
return|return;
name|QPointF
name|cp
init|=
name|point
operator|.
name|toPointF
argument_list|()
decl_stmt|;
name|qt_addBitmapToPath
argument_list|(
name|cp
operator|.
name|x
argument_list|()
operator|+
name|TRUNC
argument_list|(
name|slot
operator|->
name|metrics
operator|.
name|horiBearingX
argument_list|)
argument_list|,
name|cp
operator|.
name|y
argument_list|()
operator|-
name|TRUNC
argument_list|(
name|slot
operator|->
name|metrics
operator|.
name|horiBearingY
argument_list|)
argument_list|,
name|slot
operator|->
name|bitmap
operator|.
name|buffer
argument_list|,
name|slot
operator|->
name|bitmap
operator|.
name|pitch
argument_list|,
name|slot
operator|->
name|bitmap
operator|.
name|width
argument_list|,
name|slot
operator|->
name|bitmap
operator|.
name|rows
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~Glyph
name|QFontEngineFT
operator|::
name|Glyph
operator|::
name|~
name|Glyph
parameter_list|()
block|{
operator|delete
index|[]
name|data
expr_stmt|;
block|}
end_destructor
begin_decl_stmt
DECL|variable|subpixel_filter
specifier|static
specifier|const
name|uint
name|subpixel_filter
index|[
literal|3
index|]
index|[
literal|3
index|]
init|=
block|{
block|{
literal|180
block|,
literal|60
block|,
literal|16
block|}
block|,
block|{
literal|38
block|,
literal|180
block|,
literal|38
block|}
block|,
block|{
literal|16
block|,
literal|60
block|,
literal|180
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|filterPixel
specifier|static
specifier|inline
name|uint
name|filterPixel
parameter_list|(
name|uint
name|red
parameter_list|,
name|uint
name|green
parameter_list|,
name|uint
name|blue
parameter_list|,
name|bool
name|legacyFilter
parameter_list|)
block|{
name|uint
name|res
decl_stmt|;
if|if
condition|(
name|legacyFilter
condition|)
block|{
name|uint
name|high
init|=
operator|(
name|red
operator|*
name|subpixel_filter
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|+
name|green
operator|*
name|subpixel_filter
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|+
name|blue
operator|*
name|subpixel_filter
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|)
operator|>>
literal|8
decl_stmt|;
name|uint
name|mid
init|=
operator|(
name|red
operator|*
name|subpixel_filter
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|+
name|green
operator|*
name|subpixel_filter
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|+
name|blue
operator|*
name|subpixel_filter
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|)
operator|>>
literal|8
decl_stmt|;
name|uint
name|low
init|=
operator|(
name|red
operator|*
name|subpixel_filter
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|+
name|green
operator|*
name|subpixel_filter
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|+
name|blue
operator|*
name|subpixel_filter
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|)
operator|>>
literal|8
decl_stmt|;
name|res
operator|=
operator|(
name|mid
operator|<<
literal|24
operator|)
operator|+
operator|(
name|high
operator|<<
literal|16
operator|)
operator|+
operator|(
name|mid
operator|<<
literal|8
operator|)
operator|+
name|low
expr_stmt|;
block|}
else|else
block|{
name|uint
name|alpha
init|=
name|green
decl_stmt|;
name|res
operator|=
operator|(
name|alpha
operator|<<
literal|24
operator|)
operator|+
operator|(
name|red
operator|<<
literal|16
operator|)
operator|+
operator|(
name|green
operator|<<
literal|8
operator|)
operator|+
name|blue
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|convertRGBToARGB
specifier|static
name|void
name|convertRGBToARGB
parameter_list|(
specifier|const
name|uchar
modifier|*
name|src
parameter_list|,
name|uint
modifier|*
name|dst
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|src_pitch
parameter_list|,
name|bool
name|bgr
parameter_list|,
name|bool
name|legacyFilter
parameter_list|)
block|{
name|int
name|h
init|=
name|height
decl_stmt|;
specifier|const
name|int
name|offs
init|=
name|bgr
condition|?
operator|-
literal|1
else|:
literal|1
decl_stmt|;
specifier|const
name|int
name|w
init|=
name|width
operator|*
literal|3
decl_stmt|;
while|while
condition|(
name|h
operator|--
condition|)
block|{
name|uint
modifier|*
name|dd
init|=
name|dst
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
name|x
operator|+=
literal|3
control|)
block|{
name|uint
name|red
init|=
name|src
index|[
name|x
operator|+
literal|1
operator|-
name|offs
index|]
decl_stmt|;
name|uint
name|green
init|=
name|src
index|[
name|x
operator|+
literal|1
index|]
decl_stmt|;
name|uint
name|blue
init|=
name|src
index|[
name|x
operator|+
literal|1
operator|+
name|offs
index|]
decl_stmt|;
operator|*
name|dd
operator|=
name|filterPixel
argument_list|(
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|,
name|legacyFilter
argument_list|)
expr_stmt|;
operator|++
name|dd
expr_stmt|;
block|}
name|dst
operator|+=
name|width
expr_stmt|;
name|src
operator|+=
name|src_pitch
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|convertRGBToARGB_V
specifier|static
name|void
name|convertRGBToARGB_V
parameter_list|(
specifier|const
name|uchar
modifier|*
name|src
parameter_list|,
name|uint
modifier|*
name|dst
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|src_pitch
parameter_list|,
name|bool
name|bgr
parameter_list|,
name|bool
name|legacyFilter
parameter_list|)
block|{
name|int
name|h
init|=
name|height
decl_stmt|;
specifier|const
name|int
name|offs
init|=
name|bgr
condition|?
operator|-
name|src_pitch
else|:
name|src_pitch
decl_stmt|;
while|while
condition|(
name|h
operator|--
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|uint
name|red
init|=
name|src
index|[
name|x
operator|+
name|src_pitch
operator|-
name|offs
index|]
decl_stmt|;
name|uint
name|green
init|=
name|src
index|[
name|x
operator|+
name|src_pitch
index|]
decl_stmt|;
name|uint
name|blue
init|=
name|src
index|[
name|x
operator|+
name|src_pitch
operator|+
name|offs
index|]
decl_stmt|;
name|dst
index|[
name|x
index|]
operator|=
name|filterPixel
argument_list|(
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|,
name|legacyFilter
argument_list|)
expr_stmt|;
block|}
name|dst
operator|+=
name|width
expr_stmt|;
name|src
operator|+=
literal|3
operator|*
name|src_pitch
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|convertGRAYToARGB
specifier|static
name|void
name|convertGRAYToARGB
parameter_list|(
specifier|const
name|uchar
modifier|*
name|src
parameter_list|,
name|uint
modifier|*
name|dst
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|src_pitch
parameter_list|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
operator|++
name|y
control|)
block|{
name|int
name|readpos
init|=
operator|(
name|y
operator|*
name|src_pitch
operator|)
decl_stmt|;
name|int
name|writepos
init|=
operator|(
name|y
operator|*
name|width
operator|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
operator|++
name|x
control|)
block|{
name|dst
index|[
name|writepos
operator|+
name|x
index|]
operator|=
operator|(
literal|0xFF
operator|<<
literal|24
operator|)
operator|+
operator|(
name|src
index|[
name|readpos
operator|+
name|x
index|]
operator|<<
literal|16
operator|)
operator|+
operator|(
name|src
index|[
name|readpos
operator|+
name|x
index|]
operator|<<
literal|8
operator|)
operator|+
name|src
index|[
name|readpos
operator|+
name|x
index|]
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|convoluteBitmap
specifier|static
name|void
name|convoluteBitmap
parameter_list|(
specifier|const
name|uchar
modifier|*
name|src
parameter_list|,
name|uchar
modifier|*
name|dst
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|pitch
parameter_list|)
block|{
comment|// convolute the bitmap with a triangle filter to get rid of color fringes
comment|// If we take account for a gamma value of 2, we end up with
comment|// weights of 1, 4, 9, 4, 1. We use an approximation of 1, 3, 8, 3, 1 here,
comment|// as this nicely sums up to 16 :)
name|int
name|h
init|=
name|height
decl_stmt|;
while|while
condition|(
name|h
operator|--
condition|)
block|{
name|dst
index|[
literal|0
index|]
operator|=
name|dst
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
comment|//
for|for
control|(
name|int
name|x
init|=
literal|2
init|;
name|x
operator|<
name|width
operator|-
literal|2
condition|;
operator|++
name|x
control|)
block|{
name|uint
name|sum
init|=
name|src
index|[
name|x
operator|-
literal|2
index|]
operator|+
literal|3
operator|*
name|src
index|[
name|x
operator|-
literal|1
index|]
operator|+
literal|8
operator|*
name|src
index|[
name|x
index|]
operator|+
literal|3
operator|*
name|src
index|[
name|x
operator|+
literal|1
index|]
operator|+
name|src
index|[
name|x
operator|+
literal|2
index|]
decl_stmt|;
name|dst
index|[
name|x
index|]
operator|=
call|(
name|uchar
call|)
argument_list|(
name|sum
operator|>>
literal|4
argument_list|)
expr_stmt|;
block|}
name|dst
index|[
name|width
operator|-
literal|2
index|]
operator|=
name|dst
index|[
name|width
operator|-
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|src
operator|+=
name|pitch
expr_stmt|;
name|dst
operator|+=
name|pitch
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|QFontEngineFT
name|QFontEngineFT
operator|::
name|QFontEngineFT
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|fd
parameter_list|)
block|{
name|fontDef
operator|=
name|fd
expr_stmt|;
name|matrix
operator|.
name|xx
operator|=
literal|0x10000
expr_stmt|;
name|matrix
operator|.
name|yy
operator|=
literal|0x10000
expr_stmt|;
name|matrix
operator|.
name|xy
operator|=
literal|0
expr_stmt|;
name|matrix
operator|.
name|yx
operator|=
literal|0
expr_stmt|;
name|cache_cost
operator|=
literal|100
expr_stmt|;
name|kerning_pairs_loaded
operator|=
literal|false
expr_stmt|;
name|transform
operator|=
literal|false
expr_stmt|;
name|embolden
operator|=
literal|false
expr_stmt|;
name|obliquen
operator|=
literal|false
expr_stmt|;
name|antialias
operator|=
literal|true
expr_stmt|;
name|freetype
operator|=
literal|0
expr_stmt|;
name|default_load_flags
operator|=
name|FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WIN
name|default_hint_style
operator|=
name|HintNone
expr_stmt|;
else|#
directive|else
name|default_hint_style
operator|=
name|HintFull
expr_stmt|;
endif|#
directive|endif
name|subpixelType
operator|=
name|Subpixel_None
expr_stmt|;
name|lcdFilterType
operator|=
literal|0
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|FT_LCD_FILTER_H
argument_list|)
name|lcdFilterType
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|quintptr
operator|)
name|FT_LCD_FILTER_DEFAULT
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|defaultFormat
operator|=
name|Format_None
expr_stmt|;
name|embeddedbitmap
operator|=
literal|false
expr_stmt|;
specifier|const
name|QByteArray
name|env
init|=
name|qgetenv
argument_list|(
literal|"QT_NO_FT_CACHE"
argument_list|)
decl_stmt|;
name|cacheEnabled
operator|=
name|env
operator|.
name|isEmpty
argument_list|()
operator|||
name|env
operator|.
name|toInt
argument_list|()
operator|==
literal|0
expr_stmt|;
name|m_subPixelPositionCount
operator|=
literal|4
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QFontEngineFT
name|QFontEngineFT
operator|::
name|~
name|QFontEngineFT
parameter_list|()
block|{
if|if
condition|(
name|freetype
condition|)
name|freetype
operator|->
name|release
argument_list|(
name|face_id
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|init
name|bool
name|QFontEngineFT
operator|::
name|init
parameter_list|(
name|FaceId
name|faceId
parameter_list|,
name|bool
name|antialias
parameter_list|,
name|GlyphFormat
name|format
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|)
block|{
return|return
name|init
argument_list|(
name|faceId
argument_list|,
name|antialias
argument_list|,
name|format
argument_list|,
name|QFreetypeFace
operator|::
name|getFace
argument_list|(
name|faceId
argument_list|,
name|fontData
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|init
name|bool
name|QFontEngineFT
operator|::
name|init
parameter_list|(
name|FaceId
name|faceId
parameter_list|,
name|bool
name|antialias
parameter_list|,
name|GlyphFormat
name|format
parameter_list|,
name|QFreetypeFace
modifier|*
name|freetypeFace
parameter_list|)
block|{
name|freetype
operator|=
name|freetypeFace
expr_stmt|;
if|if
condition|(
operator|!
name|freetype
condition|)
block|{
name|xsize
operator|=
literal|0
expr_stmt|;
name|ysize
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
name|defaultFormat
operator|=
name|format
expr_stmt|;
name|this
operator|->
name|antialias
operator|=
name|antialias
expr_stmt|;
if|if
condition|(
operator|!
name|antialias
condition|)
name|glyphFormat
operator|=
name|QFontEngine
operator|::
name|Format_Mono
expr_stmt|;
else|else
name|glyphFormat
operator|=
name|defaultFormat
expr_stmt|;
name|face_id
operator|=
name|faceId
expr_stmt|;
name|symbol
operator|=
name|freetype
operator|->
name|symbol_map
operator|!=
literal|0
expr_stmt|;
name|PS_FontInfoRec
name|psrec
decl_stmt|;
comment|// don't assume that type1 fonts are symbol fonts by default
if|if
condition|(
name|FT_Get_PS_Font_Info
argument_list|(
name|freetype
operator|->
name|face
argument_list|,
operator|&
name|psrec
argument_list|)
operator|==
name|FT_Err_Ok
condition|)
block|{
name|symbol
operator|=
name|bool
argument_list|(
name|fontDef
operator|.
name|family
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"symbol"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lbearing
operator|=
name|rbearing
operator|=
name|SHRT_MIN
expr_stmt|;
name|freetype
operator|->
name|computeSize
argument_list|(
name|fontDef
argument_list|,
operator|&
name|xsize
argument_list|,
operator|&
name|ysize
argument_list|,
operator|&
name|defaultGlyphSet
operator|.
name|outline_drawing
argument_list|)
expr_stmt|;
name|FT_Face
name|face
init|=
name|lockFace
argument_list|()
decl_stmt|;
if|if
condition|(
name|FT_IS_SCALABLE
argument_list|(
name|face
argument_list|)
condition|)
block|{
name|bool
name|fake_oblique
init|=
operator|(
name|fontDef
operator|.
name|style
operator|!=
name|QFont
operator|::
name|StyleNormal
operator|)
operator|&&
operator|!
operator|(
name|face
operator|->
name|style_flags
operator|&
name|FT_STYLE_FLAG_ITALIC
operator|)
decl_stmt|;
if|if
condition|(
name|fake_oblique
condition|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_HAS_FT_GLYPHSLOT_OBLIQUE
argument_list|)
name|matrix
operator|.
name|xy
operator|=
literal|0x10000
operator|*
literal|3
operator|/
literal|10
expr_stmt|;
name|transform
operator|=
literal|true
expr_stmt|;
else|#
directive|else
name|obliquen
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
block|}
name|FT_Set_Transform
argument_list|(
name|face
argument_list|,
operator|&
name|matrix
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|freetype
operator|->
name|matrix
operator|=
name|matrix
expr_stmt|;
comment|// fake bold
if|if
condition|(
operator|(
name|fontDef
operator|.
name|weight
operator|>=
name|QFont
operator|::
name|Bold
operator|)
operator|&&
operator|!
operator|(
name|face
operator|->
name|style_flags
operator|&
name|FT_STYLE_FLAG_BOLD
operator|)
operator|&&
operator|!
name|FT_IS_FIXED_WIDTH
argument_list|(
name|face
argument_list|)
condition|)
name|embolden
operator|=
literal|true
expr_stmt|;
comment|// underline metrics
name|line_thickness
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|FT_MulFix
argument_list|(
name|face
operator|->
name|underline_thickness
argument_list|,
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|y_scale
argument_list|)
argument_list|)
expr_stmt|;
name|underline_position
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
operator|-
name|FT_MulFix
argument_list|(
name|face
operator|->
name|underline_position
argument_list|,
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|y_scale
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// ad hoc algorithm
name|int
name|score
init|=
name|fontDef
operator|.
name|weight
operator|*
name|fontDef
operator|.
name|pixelSize
decl_stmt|;
name|line_thickness
operator|=
name|score
operator|/
literal|700
expr_stmt|;
comment|// looks better with thicker line for small pointsizes
if|if
condition|(
name|line_thickness
operator|<
literal|2
operator|&&
name|score
operator|>=
literal|1050
condition|)
name|line_thickness
operator|=
literal|2
expr_stmt|;
name|underline_position
operator|=
operator|(
operator|(
name|line_thickness
operator|*
literal|2
operator|)
operator|+
literal|3
operator|)
operator|/
literal|6
expr_stmt|;
block|}
if|if
condition|(
name|line_thickness
operator|<
literal|1
condition|)
name|line_thickness
operator|=
literal|1
expr_stmt|;
name|metrics
operator|=
name|face
operator|->
name|size
operator|->
name|metrics
expr_stmt|;
comment|/*        TrueType fonts with embedded bitmaps may have a bitmap font specific        ascent/descent in the EBLC table. There is no direct public API        to extract those values. The only way we've found is to trick freetype        into thinking that it's not a scalable font in FT_SelectSize so that        the metrics are retrieved from the bitmap strikes.     */
if|if
condition|(
name|FT_IS_SCALABLE
argument_list|(
name|face
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|face
operator|->
name|num_fixed_sizes
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|xsize
operator|==
name|X_SIZE
argument_list|(
name|face
argument_list|,
name|i
argument_list|)
operator|&&
name|ysize
operator|==
name|Y_SIZE
argument_list|(
name|face
argument_list|,
name|i
argument_list|)
condition|)
block|{
name|face
operator|->
name|face_flags
operator|&=
operator|~
name|FT_FACE_FLAG_SCALABLE
expr_stmt|;
name|FT_Select_Size
argument_list|(
name|face
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|ascender
operator|=
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|ascender
expr_stmt|;
name|metrics
operator|.
name|descender
operator|=
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|descender
expr_stmt|;
name|FT_Set_Char_Size
argument_list|(
name|face
argument_list|,
name|xsize
argument_list|,
name|ysize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|face
operator|->
name|face_flags
operator||=
name|FT_FACE_FLAG_SCALABLE
expr_stmt|;
break|break;
block|}
block|}
block|}
name|fontDef
operator|.
name|styleName
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|face
operator|->
name|style_name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|freetype
operator|->
name|hbFace
condition|)
block|{
name|faceData
operator|.
name|user_data
operator|=
name|face
expr_stmt|;
name|faceData
operator|.
name|get_font_table
operator|=
name|ft_getSfntTable
expr_stmt|;
name|freetype
operator|->
name|hbFace
operator|=
name|harfbuzzFace
argument_list|()
expr_stmt|;
name|freetype
operator|->
name|hbFace_destroy_func
operator|=
name|face_destroy_func
expr_stmt|;
block|}
else|else
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|face_
argument_list|)
expr_stmt|;
name|face_
operator|=
name|freetype
operator|->
name|hbFace
expr_stmt|;
block|}
name|face_destroy_func
operator|=
literal|0
expr_stmt|;
comment|// we share the HB face in QFreeTypeFace, so do not let ~QFontEngine() destroy it
name|unlockFace
argument_list|()
expr_stmt|;
name|fsType
operator|=
name|freetype
operator|->
name|fsType
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setDefaultHintStyle
name|void
name|QFontEngineFT
operator|::
name|setDefaultHintStyle
parameter_list|(
name|HintStyle
name|style
parameter_list|)
block|{
name|default_hint_style
operator|=
name|style
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loadFlags
name|int
name|QFontEngineFT
operator|::
name|loadFlags
parameter_list|(
name|QGlyphSet
modifier|*
name|set
parameter_list|,
name|GlyphFormat
name|format
parameter_list|,
name|int
name|flags
parameter_list|,
name|bool
modifier|&
name|hsubpixel
parameter_list|,
name|int
modifier|&
name|vfactor
parameter_list|)
specifier|const
block|{
name|int
name|load_flags
init|=
name|FT_LOAD_DEFAULT
operator||
name|default_load_flags
decl_stmt|;
name|int
name|load_target
init|=
name|default_hint_style
operator|==
name|HintLight
condition|?
name|FT_LOAD_TARGET_LIGHT
else|:
name|FT_LOAD_TARGET_NORMAL
decl_stmt|;
if|if
condition|(
name|format
operator|==
name|Format_Mono
condition|)
block|{
name|load_target
operator|=
name|FT_LOAD_TARGET_MONO
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|format
operator|==
name|Format_A32
condition|)
block|{
if|if
condition|(
name|subpixelType
operator|==
name|QFontEngineFT
operator|::
name|Subpixel_RGB
operator|||
name|subpixelType
operator|==
name|QFontEngineFT
operator|::
name|Subpixel_BGR
condition|)
block|{
if|if
condition|(
name|default_hint_style
operator|==
name|HintFull
condition|)
name|load_target
operator|=
name|FT_LOAD_TARGET_LCD
expr_stmt|;
name|hsubpixel
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subpixelType
operator|==
name|QFontEngineFT
operator|::
name|Subpixel_VRGB
operator|||
name|subpixelType
operator|==
name|QFontEngineFT
operator|::
name|Subpixel_VBGR
condition|)
block|{
if|if
condition|(
name|default_hint_style
operator|==
name|HintFull
condition|)
name|load_target
operator|=
name|FT_LOAD_TARGET_LCD_V
expr_stmt|;
name|vfactor
operator|=
literal|3
expr_stmt|;
block|}
block|}
if|if
condition|(
name|set
operator|&&
name|set
operator|->
name|outline_drawing
condition|)
name|load_flags
operator|=
name|FT_LOAD_NO_BITMAP
expr_stmt|;
if|if
condition|(
name|default_hint_style
operator|==
name|HintNone
operator|||
operator|(
name|flags
operator|&
name|DesignMetrics
operator|)
operator|||
operator|(
name|set
operator|&&
name|set
operator|->
name|outline_drawing
operator|)
condition|)
name|load_flags
operator||=
name|FT_LOAD_NO_HINTING
expr_stmt|;
else|else
name|load_flags
operator||=
name|load_target
expr_stmt|;
return|return
name|load_flags
return|;
block|}
end_function
begin_function
DECL|function|loadGlyph
name|QFontEngineFT
operator|::
name|Glyph
modifier|*
name|QFontEngineFT
operator|::
name|loadGlyph
parameter_list|(
name|QGlyphSet
modifier|*
name|set
parameter_list|,
name|uint
name|glyph
parameter_list|,
name|QFixed
name|subPixelPosition
parameter_list|,
name|GlyphFormat
name|format
parameter_list|,
name|bool
name|fetchMetricsOnly
parameter_list|)
specifier|const
block|{
comment|//     Q_ASSERT(freetype->lock == 1);
if|if
condition|(
name|format
operator|==
name|Format_None
condition|)
block|{
if|if
condition|(
name|defaultFormat
operator|!=
name|Format_None
condition|)
block|{
name|format
operator|=
name|defaultFormat
expr_stmt|;
block|}
else|else
block|{
name|format
operator|=
name|Format_Mono
expr_stmt|;
block|}
block|}
name|Glyph
modifier|*
name|g
init|=
name|set
condition|?
name|set
operator|->
name|getGlyph
argument_list|(
name|glyph
argument_list|,
name|subPixelPosition
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|g
operator|&&
name|g
operator|->
name|format
operator|==
name|format
operator|&&
operator|(
name|fetchMetricsOnly
operator|||
name|g
operator|->
name|data
operator|)
condition|)
return|return
name|g
return|;
name|QFontEngineFT
operator|::
name|GlyphInfo
name|info
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|format
operator|!=
name|Format_None
argument_list|)
expr_stmt|;
name|bool
name|hsubpixel
init|=
literal|false
decl_stmt|;
name|int
name|vfactor
init|=
literal|1
decl_stmt|;
name|int
name|load_flags
init|=
name|loadFlags
argument_list|(
name|set
argument_list|,
name|format
argument_list|,
literal|0
argument_list|,
name|hsubpixel
argument_list|,
name|vfactor
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|!=
name|Format_Mono
operator|&&
operator|!
name|embeddedbitmap
condition|)
name|load_flags
operator||=
name|FT_LOAD_NO_BITMAP
expr_stmt|;
name|FT_Matrix
name|matrix
init|=
name|freetype
operator|->
name|matrix
decl_stmt|;
name|bool
name|transform
init|=
name|matrix
operator|.
name|xx
operator|!=
literal|0x10000
operator|||
name|matrix
operator|.
name|yy
operator|!=
literal|0x10000
operator|||
name|matrix
operator|.
name|xy
operator|!=
literal|0
operator|||
name|matrix
operator|.
name|yx
operator|!=
literal|0
decl_stmt|;
if|if
condition|(
name|transform
condition|)
name|load_flags
operator||=
name|FT_LOAD_NO_BITMAP
expr_stmt|;
name|FT_Face
name|face
init|=
name|freetype
operator|->
name|face
decl_stmt|;
name|FT_Vector
name|v
decl_stmt|;
name|v
operator|.
name|x
operator|=
name|format
operator|==
name|Format_Mono
condition|?
literal|0
else|:
name|FT_Pos
argument_list|(
name|subPixelPosition
operator|.
name|toReal
argument_list|()
operator|*
literal|64
argument_list|)
expr_stmt|;
name|v
operator|.
name|y
operator|=
literal|0
expr_stmt|;
name|FT_Set_Transform
argument_list|(
name|face
argument_list|,
operator|&
name|freetype
operator|->
name|matrix
argument_list|,
operator|&
name|v
argument_list|)
expr_stmt|;
name|FT_Error
name|err
init|=
name|FT_Load_Glyph
argument_list|(
name|face
argument_list|,
name|glyph
argument_list|,
name|load_flags
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|&&
operator|(
name|load_flags
operator|&
name|FT_LOAD_NO_BITMAP
operator|)
condition|)
block|{
name|load_flags
operator|&=
operator|~
name|FT_LOAD_NO_BITMAP
expr_stmt|;
name|err
operator|=
name|FT_Load_Glyph
argument_list|(
name|face
argument_list|,
name|glyph
argument_list|,
name|load_flags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|err
operator|==
name|FT_Err_Too_Few_Arguments
condition|)
block|{
comment|// this is an error in the bytecode interpreter, just try to run without it
name|load_flags
operator||=
name|FT_LOAD_FORCE_AUTOHINT
expr_stmt|;
name|err
operator|=
name|FT_Load_Glyph
argument_list|(
name|face
argument_list|,
name|glyph
argument_list|,
name|load_flags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|err
operator|!=
name|FT_Err_Ok
condition|)
name|qWarning
argument_list|(
literal|"load glyph failed err=%x face=%p, glyph=%d"
argument_list|,
name|err
argument_list|,
name|face
argument_list|,
name|glyph
argument_list|)
expr_stmt|;
name|FT_GlyphSlot
name|slot
init|=
name|face
operator|->
name|glyph
decl_stmt|;
if|if
condition|(
name|embolden
condition|)
name|Q_FT_GLYPHSLOT_EMBOLDEN
argument_list|(
name|slot
argument_list|)
expr_stmt|;
if|if
condition|(
name|obliquen
condition|)
block|{
name|Q_FT_GLYPHSLOT_OBLIQUE
argument_list|(
name|slot
argument_list|)
expr_stmt|;
comment|// While Embolden alters the metrics of the slot, oblique does not, so we need
comment|// to fix this ourselves.
name|transform
operator|=
literal|true
expr_stmt|;
name|FT_Matrix
name|m
decl_stmt|;
name|m
operator|.
name|xx
operator|=
literal|0x10000
expr_stmt|;
name|m
operator|.
name|yx
operator|=
literal|0x0
expr_stmt|;
name|m
operator|.
name|xy
operator|=
literal|0x6000
expr_stmt|;
name|m
operator|.
name|yy
operator|=
literal|0x10000
expr_stmt|;
name|FT_Matrix_Multiply
argument_list|(
operator|&
name|m
argument_list|,
operator|&
name|matrix
argument_list|)
expr_stmt|;
block|}
name|FT_Library
name|library
init|=
name|qt_getFreetype
argument_list|()
decl_stmt|;
name|info
operator|.
name|xOff
operator|=
name|TRUNC
argument_list|(
name|ROUND
argument_list|(
name|slot
operator|->
name|advance
operator|.
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|yOff
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|(
name|set
operator|&&
name|set
operator|->
name|outline_drawing
operator|)
operator|||
name|fetchMetricsOnly
condition|)
block|{
name|int
name|left
init|=
name|FLOOR
argument_list|(
name|slot
operator|->
name|metrics
operator|.
name|horiBearingX
argument_list|)
decl_stmt|;
name|int
name|right
init|=
name|CEIL
argument_list|(
name|slot
operator|->
name|metrics
operator|.
name|horiBearingX
operator|+
name|slot
operator|->
name|metrics
operator|.
name|width
argument_list|)
decl_stmt|;
name|int
name|top
init|=
name|CEIL
argument_list|(
name|slot
operator|->
name|metrics
operator|.
name|horiBearingY
argument_list|)
decl_stmt|;
name|int
name|bottom
init|=
name|FLOOR
argument_list|(
name|slot
operator|->
name|metrics
operator|.
name|horiBearingY
operator|-
name|slot
operator|->
name|metrics
operator|.
name|height
argument_list|)
decl_stmt|;
name|int
name|width
init|=
name|right
operator|-
name|left
decl_stmt|;
name|int
name|height
init|=
name|top
operator|-
name|bottom
decl_stmt|;
comment|// If any of the metrics are too large to fit, don't cache them
if|if
condition|(
name|qAbs
argument_list|(
name|info
operator|.
name|xOff
argument_list|)
operator|>=
literal|128
operator|||
name|qAbs
argument_list|(
name|TRUNC
argument_list|(
name|top
argument_list|)
argument_list|)
operator|>=
literal|128
operator|||
name|TRUNC
argument_list|(
name|width
argument_list|)
operator|>=
literal|256
operator|||
name|TRUNC
argument_list|(
name|height
argument_list|)
operator|>=
literal|256
operator|||
name|qAbs
argument_list|(
name|TRUNC
argument_list|(
name|left
argument_list|)
argument_list|)
operator|>=
literal|128
operator|||
name|qAbs
argument_list|(
name|TRUNC
argument_list|(
name|ROUND
argument_list|(
name|slot
operator|->
name|advance
operator|.
name|x
argument_list|)
argument_list|)
argument_list|)
operator|>=
literal|128
condition|)
block|{
return|return
literal|0
return|;
block|}
name|g
operator|=
operator|new
name|Glyph
expr_stmt|;
name|g
operator|->
name|data
operator|=
literal|0
expr_stmt|;
name|g
operator|->
name|linearAdvance
operator|=
name|slot
operator|->
name|linearHoriAdvance
operator|>>
literal|10
expr_stmt|;
name|g
operator|->
name|width
operator|=
name|TRUNC
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|g
operator|->
name|height
operator|=
name|TRUNC
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|g
operator|->
name|x
operator|=
name|TRUNC
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|g
operator|->
name|y
operator|=
name|TRUNC
argument_list|(
name|top
argument_list|)
expr_stmt|;
name|g
operator|->
name|advance
operator|=
name|TRUNC
argument_list|(
name|ROUND
argument_list|(
name|slot
operator|->
name|advance
operator|.
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|->
name|format
operator|=
name|format
expr_stmt|;
if|if
condition|(
name|set
condition|)
name|set
operator|->
name|setGlyph
argument_list|(
name|glyph
argument_list|,
name|subPixelPosition
argument_list|,
name|g
argument_list|)
expr_stmt|;
return|return
name|g
return|;
block|}
name|uchar
modifier|*
name|glyph_buffer
init|=
literal|0
decl_stmt|;
name|int
name|glyph_buffer_size
init|=
literal|0
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_USE_FREETYPE_LCDFILTER
argument_list|)
name|bool
name|useFreetypeRenderGlyph
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|slot
operator|->
name|format
operator|==
name|FT_GLYPH_FORMAT_OUTLINE
operator|&&
operator|(
name|hsubpixel
operator|||
name|vfactor
operator|!=
literal|1
operator|)
condition|)
block|{
name|err
operator|=
name|FT_Library_SetLcdFilter
argument_list|(
name|library
argument_list|,
operator|(
name|FT_LcdFilter
operator|)
name|lcdFilterType
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|==
name|FT_Err_Ok
condition|)
name|useFreetypeRenderGlyph
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|useFreetypeRenderGlyph
condition|)
block|{
name|err
operator|=
name|FT_Render_Glyph
argument_list|(
name|slot
argument_list|,
name|hsubpixel
condition|?
name|FT_RENDER_MODE_LCD
else|:
name|FT_RENDER_MODE_LCD_V
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|!=
name|FT_Err_Ok
condition|)
name|qWarning
argument_list|(
literal|"render glyph failed err=%x face=%p, glyph=%d"
argument_list|,
name|err
argument_list|,
name|face
argument_list|,
name|glyph
argument_list|)
expr_stmt|;
name|FT_Library_SetLcdFilter
argument_list|(
name|library
argument_list|,
name|FT_LCD_FILTER_NONE
argument_list|)
expr_stmt|;
name|info
operator|.
name|height
operator|=
name|slot
operator|->
name|bitmap
operator|.
name|rows
operator|/
name|vfactor
expr_stmt|;
name|info
operator|.
name|width
operator|=
name|hsubpixel
condition|?
name|slot
operator|->
name|bitmap
operator|.
name|width
operator|/
literal|3
else|:
name|slot
operator|->
name|bitmap
operator|.
name|width
expr_stmt|;
name|info
operator|.
name|x
operator|=
operator|-
name|slot
operator|->
name|bitmap_left
expr_stmt|;
name|info
operator|.
name|y
operator|=
name|slot
operator|->
name|bitmap_top
expr_stmt|;
name|glyph_buffer_size
operator|=
name|info
operator|.
name|width
operator|*
name|info
operator|.
name|height
operator|*
literal|4
expr_stmt|;
name|glyph_buffer
operator|=
operator|new
name|uchar
index|[
name|glyph_buffer_size
index|]
expr_stmt|;
if|if
condition|(
name|hsubpixel
condition|)
name|convertRGBToARGB
argument_list|(
name|slot
operator|->
name|bitmap
operator|.
name|buffer
argument_list|,
operator|(
name|uint
operator|*
operator|)
name|glyph_buffer
argument_list|,
name|info
operator|.
name|width
argument_list|,
name|info
operator|.
name|height
argument_list|,
name|slot
operator|->
name|bitmap
operator|.
name|pitch
argument_list|,
name|subpixelType
operator|!=
name|QFontEngineFT
operator|::
name|Subpixel_RGB
argument_list|,
literal|false
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|vfactor
operator|!=
literal|1
condition|)
name|convertRGBToARGB_V
argument_list|(
name|slot
operator|->
name|bitmap
operator|.
name|buffer
argument_list|,
operator|(
name|uint
operator|*
operator|)
name|glyph_buffer
argument_list|,
name|info
operator|.
name|width
argument_list|,
name|info
operator|.
name|height
argument_list|,
name|slot
operator|->
name|bitmap
operator|.
name|pitch
argument_list|,
name|subpixelType
operator|!=
name|QFontEngineFT
operator|::
name|Subpixel_VRGB
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|int
name|left
init|=
name|slot
operator|->
name|metrics
operator|.
name|horiBearingX
decl_stmt|;
name|int
name|right
init|=
name|slot
operator|->
name|metrics
operator|.
name|horiBearingX
operator|+
name|slot
operator|->
name|metrics
operator|.
name|width
decl_stmt|;
name|int
name|top
init|=
name|slot
operator|->
name|metrics
operator|.
name|horiBearingY
decl_stmt|;
name|int
name|bottom
init|=
name|slot
operator|->
name|metrics
operator|.
name|horiBearingY
operator|-
name|slot
operator|->
name|metrics
operator|.
name|height
decl_stmt|;
if|if
condition|(
name|transform
operator|&&
name|slot
operator|->
name|format
operator|!=
name|FT_GLYPH_FORMAT_BITMAP
condition|)
block|{
name|int
name|l
decl_stmt|,
name|r
decl_stmt|,
name|t
decl_stmt|,
name|b
decl_stmt|;
name|FT_Vector
name|vector
decl_stmt|;
name|vector
operator|.
name|x
operator|=
name|left
expr_stmt|;
name|vector
operator|.
name|y
operator|=
name|top
expr_stmt|;
name|FT_Vector_Transform
argument_list|(
operator|&
name|vector
argument_list|,
operator|&
name|matrix
argument_list|)
expr_stmt|;
name|l
operator|=
name|r
operator|=
name|vector
operator|.
name|x
expr_stmt|;
name|t
operator|=
name|b
operator|=
name|vector
operator|.
name|y
expr_stmt|;
name|vector
operator|.
name|x
operator|=
name|right
expr_stmt|;
name|vector
operator|.
name|y
operator|=
name|top
expr_stmt|;
name|FT_Vector_Transform
argument_list|(
operator|&
name|vector
argument_list|,
operator|&
name|matrix
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|>
name|vector
operator|.
name|x
condition|)
name|l
operator|=
name|vector
operator|.
name|x
expr_stmt|;
if|if
condition|(
name|r
operator|<
name|vector
operator|.
name|x
condition|)
name|r
operator|=
name|vector
operator|.
name|x
expr_stmt|;
if|if
condition|(
name|t
operator|<
name|vector
operator|.
name|y
condition|)
name|t
operator|=
name|vector
operator|.
name|y
expr_stmt|;
if|if
condition|(
name|b
operator|>
name|vector
operator|.
name|y
condition|)
name|b
operator|=
name|vector
operator|.
name|y
expr_stmt|;
name|vector
operator|.
name|x
operator|=
name|right
expr_stmt|;
name|vector
operator|.
name|y
operator|=
name|bottom
expr_stmt|;
name|FT_Vector_Transform
argument_list|(
operator|&
name|vector
argument_list|,
operator|&
name|matrix
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|>
name|vector
operator|.
name|x
condition|)
name|l
operator|=
name|vector
operator|.
name|x
expr_stmt|;
if|if
condition|(
name|r
operator|<
name|vector
operator|.
name|x
condition|)
name|r
operator|=
name|vector
operator|.
name|x
expr_stmt|;
if|if
condition|(
name|t
operator|<
name|vector
operator|.
name|y
condition|)
name|t
operator|=
name|vector
operator|.
name|y
expr_stmt|;
if|if
condition|(
name|b
operator|>
name|vector
operator|.
name|y
condition|)
name|b
operator|=
name|vector
operator|.
name|y
expr_stmt|;
name|vector
operator|.
name|x
operator|=
name|left
expr_stmt|;
name|vector
operator|.
name|y
operator|=
name|bottom
expr_stmt|;
name|FT_Vector_Transform
argument_list|(
operator|&
name|vector
argument_list|,
operator|&
name|matrix
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|>
name|vector
operator|.
name|x
condition|)
name|l
operator|=
name|vector
operator|.
name|x
expr_stmt|;
if|if
condition|(
name|r
operator|<
name|vector
operator|.
name|x
condition|)
name|r
operator|=
name|vector
operator|.
name|x
expr_stmt|;
if|if
condition|(
name|t
operator|<
name|vector
operator|.
name|y
condition|)
name|t
operator|=
name|vector
operator|.
name|y
expr_stmt|;
if|if
condition|(
name|b
operator|>
name|vector
operator|.
name|y
condition|)
name|b
operator|=
name|vector
operator|.
name|y
expr_stmt|;
name|left
operator|=
name|l
expr_stmt|;
name|right
operator|=
name|r
expr_stmt|;
name|top
operator|=
name|t
expr_stmt|;
name|bottom
operator|=
name|b
expr_stmt|;
block|}
name|left
operator|=
name|FLOOR
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|right
operator|=
name|CEIL
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|bottom
operator|=
name|FLOOR
argument_list|(
name|bottom
argument_list|)
expr_stmt|;
name|top
operator|=
name|CEIL
argument_list|(
name|top
argument_list|)
expr_stmt|;
name|int
name|hpixels
init|=
name|TRUNC
argument_list|(
name|right
operator|-
name|left
argument_list|)
decl_stmt|;
comment|// subpixel position requires one more pixel
if|if
condition|(
name|subPixelPosition
operator|>
literal|0
operator|&&
name|format
operator|!=
name|Format_Mono
condition|)
name|hpixels
operator|++
expr_stmt|;
if|if
condition|(
name|hsubpixel
condition|)
name|hpixels
operator|=
name|hpixels
operator|*
literal|3
operator|+
literal|8
expr_stmt|;
name|info
operator|.
name|width
operator|=
name|hpixels
expr_stmt|;
name|info
operator|.
name|height
operator|=
name|TRUNC
argument_list|(
name|top
operator|-
name|bottom
argument_list|)
expr_stmt|;
name|info
operator|.
name|x
operator|=
operator|-
name|TRUNC
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|info
operator|.
name|y
operator|=
name|TRUNC
argument_list|(
name|top
argument_list|)
expr_stmt|;
if|if
condition|(
name|hsubpixel
condition|)
block|{
name|info
operator|.
name|width
operator|/=
literal|3
expr_stmt|;
name|info
operator|.
name|x
operator|+=
literal|1
expr_stmt|;
block|}
name|bool
name|large_glyph
init|=
operator|(
operator|(
call|(
name|short
call|)
argument_list|(
name|slot
operator|->
name|linearHoriAdvance
operator|>>
literal|10
argument_list|)
operator|!=
name|slot
operator|->
name|linearHoriAdvance
operator|>>
literal|10
operator|)
operator|||
operator|(
call|(
name|uchar
call|)
argument_list|(
name|info
operator|.
name|width
argument_list|)
operator|!=
name|info
operator|.
name|width
operator|)
operator|||
operator|(
call|(
name|uchar
call|)
argument_list|(
name|info
operator|.
name|height
argument_list|)
operator|!=
name|info
operator|.
name|height
operator|)
operator|||
operator|(
call|(
name|signed
name|char
call|)
argument_list|(
name|info
operator|.
name|x
argument_list|)
operator|!=
name|info
operator|.
name|x
operator|)
operator|||
operator|(
call|(
name|signed
name|char
call|)
argument_list|(
name|info
operator|.
name|y
argument_list|)
operator|!=
name|info
operator|.
name|y
operator|)
operator|||
operator|(
call|(
name|signed
name|char
call|)
argument_list|(
name|info
operator|.
name|xOff
argument_list|)
operator|!=
name|info
operator|.
name|xOff
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|large_glyph
condition|)
block|{
operator|delete
index|[]
name|glyph_buffer
expr_stmt|;
return|return
literal|0
return|;
block|}
name|int
name|pitch
init|=
operator|(
name|format
operator|==
name|Format_Mono
condition|?
operator|(
operator|(
name|info
operator|.
name|width
operator|+
literal|31
operator|)
operator|&
operator|~
literal|31
operator|)
operator|>>
literal|3
else|:
operator|(
name|format
operator|==
name|Format_A8
condition|?
operator|(
name|info
operator|.
name|width
operator|+
literal|3
operator|)
operator|&
operator|~
literal|3
else|:
name|info
operator|.
name|width
operator|*
literal|4
operator|)
operator|)
decl_stmt|;
name|glyph_buffer_size
operator|=
name|pitch
operator|*
name|info
operator|.
name|height
expr_stmt|;
name|glyph_buffer
operator|=
operator|new
name|uchar
index|[
name|glyph_buffer_size
index|]
expr_stmt|;
if|if
condition|(
name|slot
operator|->
name|format
operator|==
name|FT_GLYPH_FORMAT_OUTLINE
condition|)
block|{
name|FT_Bitmap
name|bitmap
decl_stmt|;
name|bitmap
operator|.
name|rows
operator|=
name|info
operator|.
name|height
operator|*
name|vfactor
expr_stmt|;
name|bitmap
operator|.
name|width
operator|=
name|hpixels
expr_stmt|;
name|bitmap
operator|.
name|pitch
operator|=
name|format
operator|==
name|Format_Mono
condition|?
operator|(
operator|(
operator|(
name|info
operator|.
name|width
operator|+
literal|31
operator|)
operator|&
operator|~
literal|31
operator|)
operator|>>
literal|3
operator|)
else|:
operator|(
operator|(
name|bitmap
operator|.
name|width
operator|+
literal|3
operator|)
operator|&
operator|~
literal|3
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|hsubpixel
operator|&&
name|vfactor
operator|==
literal|1
operator|&&
name|format
operator|!=
name|Format_A32
condition|)
name|bitmap
operator|.
name|buffer
operator|=
name|glyph_buffer
expr_stmt|;
else|else
name|bitmap
operator|.
name|buffer
operator|=
operator|new
name|uchar
index|[
name|bitmap
operator|.
name|rows
operator|*
name|bitmap
operator|.
name|pitch
index|]
expr_stmt|;
name|memset
argument_list|(
name|bitmap
operator|.
name|buffer
argument_list|,
literal|0
argument_list|,
name|bitmap
operator|.
name|rows
operator|*
name|bitmap
operator|.
name|pitch
argument_list|)
expr_stmt|;
name|bitmap
operator|.
name|pixel_mode
operator|=
name|format
operator|==
name|Format_Mono
condition|?
name|FT_PIXEL_MODE_MONO
else|:
name|FT_PIXEL_MODE_GRAY
expr_stmt|;
name|FT_Matrix
name|matrix
decl_stmt|;
name|matrix
operator|.
name|xx
operator|=
operator|(
name|hsubpixel
condition|?
literal|3
else|:
literal|1
operator|)
operator|<<
literal|16
expr_stmt|;
name|matrix
operator|.
name|yy
operator|=
name|vfactor
operator|<<
literal|16
expr_stmt|;
name|matrix
operator|.
name|yx
operator|=
name|matrix
operator|.
name|xy
operator|=
literal|0
expr_stmt|;
name|FT_Outline_Transform
argument_list|(
operator|&
name|slot
operator|->
name|outline
argument_list|,
operator|&
name|matrix
argument_list|)
expr_stmt|;
name|FT_Outline_Translate
argument_list|(
operator|&
name|slot
operator|->
name|outline
argument_list|,
operator|(
name|hsubpixel
condition|?
operator|-
literal|3
operator|*
name|left
operator|+
operator|(
literal|4
operator|<<
literal|6
operator|)
else|:
operator|-
name|left
operator|)
argument_list|,
operator|-
name|bottom
operator|*
name|vfactor
argument_list|)
expr_stmt|;
name|FT_Outline_Get_Bitmap
argument_list|(
name|library
argument_list|,
operator|&
name|slot
operator|->
name|outline
argument_list|,
operator|&
name|bitmap
argument_list|)
expr_stmt|;
if|if
condition|(
name|hsubpixel
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|bitmap
operator|.
name|pixel_mode
operator|==
name|FT_PIXEL_MODE_GRAY
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|antialias
argument_list|)
expr_stmt|;
name|uchar
modifier|*
name|convoluted
init|=
operator|new
name|uchar
index|[
name|bitmap
operator|.
name|rows
operator|*
name|bitmap
operator|.
name|pitch
index|]
decl_stmt|;
name|bool
name|useLegacyLcdFilter
init|=
literal|false
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|FC_LCD_FILTER
argument_list|)
operator|&&
name|defined
argument_list|(
name|FT_LCD_FILTER_H
argument_list|)
name|useLegacyLcdFilter
operator|=
operator|(
name|lcdFilterType
operator|==
name|FT_LCD_FILTER_LEGACY
operator|)
expr_stmt|;
endif|#
directive|endif
name|uchar
modifier|*
name|buffer
init|=
name|bitmap
operator|.
name|buffer
decl_stmt|;
if|if
condition|(
operator|!
name|useLegacyLcdFilter
condition|)
block|{
name|convoluteBitmap
argument_list|(
name|bitmap
operator|.
name|buffer
argument_list|,
name|convoluted
argument_list|,
name|bitmap
operator|.
name|width
argument_list|,
name|info
operator|.
name|height
argument_list|,
name|bitmap
operator|.
name|pitch
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|convoluted
expr_stmt|;
block|}
name|convertRGBToARGB
argument_list|(
name|buffer
operator|+
literal|1
argument_list|,
operator|(
name|uint
operator|*
operator|)
name|glyph_buffer
argument_list|,
name|info
operator|.
name|width
argument_list|,
name|info
operator|.
name|height
argument_list|,
name|bitmap
operator|.
name|pitch
argument_list|,
name|subpixelType
operator|!=
name|QFontEngineFT
operator|::
name|Subpixel_RGB
argument_list|,
name|useLegacyLcdFilter
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|convoluted
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|vfactor
operator|!=
literal|1
condition|)
block|{
name|convertRGBToARGB_V
argument_list|(
name|bitmap
operator|.
name|buffer
argument_list|,
operator|(
name|uint
operator|*
operator|)
name|glyph_buffer
argument_list|,
name|info
operator|.
name|width
argument_list|,
name|info
operator|.
name|height
argument_list|,
name|bitmap
operator|.
name|pitch
argument_list|,
name|subpixelType
operator|!=
name|QFontEngineFT
operator|::
name|Subpixel_VRGB
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|format
operator|==
name|Format_A32
operator|&&
name|bitmap
operator|.
name|pixel_mode
operator|==
name|FT_PIXEL_MODE_GRAY
condition|)
block|{
name|convertGRAYToARGB
argument_list|(
name|bitmap
operator|.
name|buffer
argument_list|,
operator|(
name|uint
operator|*
operator|)
name|glyph_buffer
argument_list|,
name|info
operator|.
name|width
argument_list|,
name|info
operator|.
name|height
argument_list|,
name|bitmap
operator|.
name|pitch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bitmap
operator|.
name|buffer
operator|!=
name|glyph_buffer
condition|)
operator|delete
index|[]
name|bitmap
operator|.
name|buffer
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|slot
operator|->
name|format
operator|==
name|FT_GLYPH_FORMAT_BITMAP
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|slot
operator|->
name|bitmap
operator|.
name|pixel_mode
operator|==
name|FT_PIXEL_MODE_MONO
argument_list|)
expr_stmt|;
name|uchar
modifier|*
name|src
init|=
name|slot
operator|->
name|bitmap
operator|.
name|buffer
decl_stmt|;
name|uchar
modifier|*
name|dst
init|=
name|glyph_buffer
decl_stmt|;
name|int
name|h
init|=
name|slot
operator|->
name|bitmap
operator|.
name|rows
decl_stmt|;
if|if
condition|(
name|format
operator|==
name|Format_Mono
condition|)
block|{
name|int
name|bytes
init|=
operator|(
operator|(
name|info
operator|.
name|width
operator|+
literal|7
operator|)
operator|&
operator|~
literal|7
operator|)
operator|>>
literal|3
decl_stmt|;
while|while
condition|(
name|h
operator|--
condition|)
block|{
name|memcpy
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|dst
operator|+=
name|pitch
expr_stmt|;
name|src
operator|+=
name|slot
operator|->
name|bitmap
operator|.
name|pitch
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|hsubpixel
condition|)
block|{
while|while
condition|(
name|h
operator|--
condition|)
block|{
name|uint
modifier|*
name|dd
init|=
operator|(
name|uint
operator|*
operator|)
name|dst
decl_stmt|;
operator|*
name|dd
operator|++
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|slot
operator|->
name|bitmap
operator|.
name|width
condition|;
name|x
operator|++
control|)
block|{
name|uint
name|a
init|=
operator|(
operator|(
name|src
index|[
name|x
operator|>>
literal|3
index|]
operator|&
operator|(
literal|0x80
operator|>>
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
operator|)
condition|?
literal|0xffffff
else|:
literal|0x000000
operator|)
decl_stmt|;
operator|*
name|dd
operator|++
operator|=
name|a
expr_stmt|;
block|}
operator|*
name|dd
operator|++
operator|=
literal|0
expr_stmt|;
name|dst
operator|+=
name|pitch
expr_stmt|;
name|src
operator|+=
name|slot
operator|->
name|bitmap
operator|.
name|pitch
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|vfactor
operator|!=
literal|1
condition|)
block|{
while|while
condition|(
name|h
operator|--
condition|)
block|{
name|uint
modifier|*
name|dd
init|=
operator|(
name|uint
operator|*
operator|)
name|dst
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|slot
operator|->
name|bitmap
operator|.
name|width
condition|;
name|x
operator|++
control|)
block|{
name|uint
name|a
init|=
operator|(
operator|(
name|src
index|[
name|x
operator|>>
literal|3
index|]
operator|&
operator|(
literal|0x80
operator|>>
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
operator|)
condition|?
literal|0xffffff
else|:
literal|0x000000
operator|)
decl_stmt|;
operator|*
name|dd
operator|++
operator|=
name|a
expr_stmt|;
block|}
name|dst
operator|+=
name|pitch
expr_stmt|;
name|src
operator|+=
name|slot
operator|->
name|bitmap
operator|.
name|pitch
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|h
operator|--
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|slot
operator|->
name|bitmap
operator|.
name|width
condition|;
name|x
operator|++
control|)
block|{
name|unsigned
name|char
name|a
init|=
operator|(
operator|(
name|src
index|[
name|x
operator|>>
literal|3
index|]
operator|&
operator|(
literal|0x80
operator|>>
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
operator|)
condition|?
literal|0xff
else|:
literal|0x00
operator|)
decl_stmt|;
name|dst
index|[
name|x
index|]
operator|=
name|a
expr_stmt|;
block|}
name|dst
operator|+=
name|pitch
expr_stmt|;
name|src
operator|+=
name|slot
operator|->
name|bitmap
operator|.
name|pitch
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QFontEngine: Glyph neither outline nor bitmap format=%d"
argument_list|,
name|slot
operator|->
name|format
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|glyph_buffer
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
if|if
condition|(
operator|!
name|g
condition|)
block|{
name|g
operator|=
operator|new
name|Glyph
expr_stmt|;
name|g
operator|->
name|data
operator|=
literal|0
expr_stmt|;
block|}
name|g
operator|->
name|linearAdvance
operator|=
name|slot
operator|->
name|linearHoriAdvance
operator|>>
literal|10
expr_stmt|;
name|g
operator|->
name|width
operator|=
name|info
operator|.
name|width
expr_stmt|;
name|g
operator|->
name|height
operator|=
name|info
operator|.
name|height
expr_stmt|;
name|g
operator|->
name|x
operator|=
operator|-
name|info
operator|.
name|x
expr_stmt|;
name|g
operator|->
name|y
operator|=
name|info
operator|.
name|y
expr_stmt|;
name|g
operator|->
name|advance
operator|=
name|info
operator|.
name|xOff
expr_stmt|;
name|g
operator|->
name|format
operator|=
name|format
expr_stmt|;
operator|delete
index|[]
name|g
operator|->
name|data
expr_stmt|;
name|g
operator|->
name|data
operator|=
name|glyph_buffer
expr_stmt|;
if|if
condition|(
name|set
condition|)
name|set
operator|->
name|setGlyph
argument_list|(
name|glyph
argument_list|,
name|subPixelPosition
argument_list|,
name|g
argument_list|)
expr_stmt|;
return|return
name|g
return|;
block|}
end_function
begin_function
DECL|function|faceId
name|QFontEngine
operator|::
name|FaceId
name|QFontEngineFT
operator|::
name|faceId
parameter_list|()
specifier|const
block|{
return|return
name|face_id
return|;
block|}
end_function
begin_function
DECL|function|properties
name|QFontEngine
operator|::
name|Properties
name|QFontEngineFT
operator|::
name|properties
parameter_list|()
specifier|const
block|{
name|Properties
name|p
init|=
name|freetype
operator|->
name|properties
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|postscriptName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|p
operator|.
name|postscriptName
operator|=
name|QFontEngine
operator|::
name|convertToPostscriptFontFamilyName
argument_list|(
name|fontDef
operator|.
name|family
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|freetype
operator|->
name|properties
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|emSquareSize
name|QFixed
name|QFontEngineFT
operator|::
name|emSquareSize
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|FT_IS_SCALABLE
argument_list|(
name|freetype
operator|->
name|face
argument_list|)
condition|)
return|return
name|freetype
operator|->
name|face
operator|->
name|units_per_EM
return|;
else|else
return|return
name|freetype
operator|->
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|y_ppem
return|;
block|}
end_function
begin_function
DECL|function|getSfntTableData
name|bool
name|QFontEngineFT
operator|::
name|getSfntTableData
parameter_list|(
name|uint
name|tag
parameter_list|,
name|uchar
modifier|*
name|buffer
parameter_list|,
name|uint
modifier|*
name|length
parameter_list|)
specifier|const
block|{
return|return
name|ft_getSfntTable
argument_list|(
name|freetype
operator|->
name|face
argument_list|,
name|tag
argument_list|,
name|buffer
argument_list|,
name|length
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|synthesized
name|int
name|QFontEngineFT
operator|::
name|synthesized
parameter_list|()
specifier|const
block|{
name|int
name|s
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
name|fontDef
operator|.
name|style
operator|!=
name|QFont
operator|::
name|StyleNormal
operator|)
operator|&&
operator|!
operator|(
name|freetype
operator|->
name|face
operator|->
name|style_flags
operator|&
name|FT_STYLE_FLAG_ITALIC
operator|)
condition|)
name|s
operator|=
name|SynthesizedItalic
expr_stmt|;
if|if
condition|(
operator|(
name|fontDef
operator|.
name|weight
operator|>=
name|QFont
operator|::
name|Bold
operator|)
operator|&&
operator|!
operator|(
name|freetype
operator|->
name|face
operator|->
name|style_flags
operator|&
name|FT_STYLE_FLAG_BOLD
operator|)
condition|)
name|s
operator||=
name|SynthesizedBold
expr_stmt|;
if|if
condition|(
name|fontDef
operator|.
name|stretch
operator|!=
literal|100
operator|&&
name|FT_IS_SCALABLE
argument_list|(
name|freetype
operator|->
name|face
argument_list|)
condition|)
name|s
operator||=
name|SynthesizedStretch
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_function
DECL|function|ascent
name|QFixed
name|QFontEngineFT
operator|::
name|ascent
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|metrics
operator|.
name|ascender
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|descent
name|QFixed
name|QFontEngineFT
operator|::
name|descent
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromFixed
argument_list|(
operator|-
name|metrics
operator|.
name|descender
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|leading
name|QFixed
name|QFontEngineFT
operator|::
name|leading
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|metrics
operator|.
name|height
operator|-
name|metrics
operator|.
name|ascender
operator|+
name|metrics
operator|.
name|descender
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|xHeight
name|QFixed
name|QFontEngineFT
operator|::
name|xHeight
parameter_list|()
specifier|const
block|{
name|TT_OS2
modifier|*
name|os2
init|=
operator|(
name|TT_OS2
operator|*
operator|)
name|FT_Get_Sfnt_Table
argument_list|(
name|freetype
operator|->
name|face
argument_list|,
name|ft_sfnt_os2
argument_list|)
decl_stmt|;
if|if
condition|(
name|os2
operator|&&
name|os2
operator|->
name|sxHeight
condition|)
block|{
name|lockFace
argument_list|()
expr_stmt|;
name|QFixed
name|answer
init|=
name|QFixed
argument_list|(
name|os2
operator|->
name|sxHeight
operator|*
name|freetype
operator|->
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|y_ppem
argument_list|)
operator|/
name|freetype
operator|->
name|face
operator|->
name|units_per_EM
decl_stmt|;
name|unlockFace
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
return|return
name|QFontEngine
operator|::
name|xHeight
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|averageCharWidth
name|QFixed
name|QFontEngineFT
operator|::
name|averageCharWidth
parameter_list|()
specifier|const
block|{
name|TT_OS2
modifier|*
name|os2
init|=
operator|(
name|TT_OS2
operator|*
operator|)
name|FT_Get_Sfnt_Table
argument_list|(
name|freetype
operator|->
name|face
argument_list|,
name|ft_sfnt_os2
argument_list|)
decl_stmt|;
if|if
condition|(
name|os2
operator|&&
name|os2
operator|->
name|xAvgCharWidth
condition|)
block|{
name|lockFace
argument_list|()
expr_stmt|;
name|QFixed
name|answer
init|=
name|QFixed
argument_list|(
name|os2
operator|->
name|xAvgCharWidth
operator|*
name|freetype
operator|->
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|x_ppem
argument_list|)
operator|/
name|freetype
operator|->
name|face
operator|->
name|units_per_EM
decl_stmt|;
name|unlockFace
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
return|return
name|QFontEngine
operator|::
name|averageCharWidth
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|maxCharWidth
name|qreal
name|QFontEngineFT
operator|::
name|maxCharWidth
parameter_list|()
specifier|const
block|{
return|return
name|metrics
operator|.
name|max_advance
operator|>>
literal|6
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|char_table
specifier|static
specifier|const
name|ushort
name|char_table
index|[]
init|=
block|{
literal|40
block|,
literal|67
block|,
literal|70
block|,
literal|75
block|,
literal|86
block|,
literal|88
block|,
literal|89
block|,
literal|91
block|,
literal|95
block|,
literal|102
block|,
literal|114
block|,
literal|124
block|,
literal|127
block|,
literal|205
block|,
literal|645
block|,
literal|884
block|,
literal|922
block|,
literal|1070
block|,
literal|12386
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|char_table_entries
specifier|static
specifier|const
name|int
name|char_table_entries
init|=
sizeof|sizeof
argument_list|(
name|char_table
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|ushort
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|minLeftBearing
name|qreal
name|QFontEngineFT
operator|::
name|minLeftBearing
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|lbearing
operator|==
name|SHRT_MIN
condition|)
operator|(
name|void
operator|)
name|minRightBearing
argument_list|()
expr_stmt|;
comment|// calculates both
return|return
name|lbearing
operator|.
name|toReal
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|minRightBearing
name|qreal
name|QFontEngineFT
operator|::
name|minRightBearing
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|rbearing
operator|==
name|SHRT_MIN
condition|)
block|{
name|lbearing
operator|=
name|rbearing
operator|=
literal|0
expr_stmt|;
specifier|const
name|QChar
modifier|*
name|ch
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|QChar
operator|*
argument_list|>
argument_list|(
name|char_table
argument_list|)
decl_stmt|;
name|glyph_t
name|glyphs
index|[
name|char_table_entries
index|]
decl_stmt|;
name|QGlyphLayout
name|g
decl_stmt|;
name|g
operator|.
name|glyphs
operator|=
name|glyphs
expr_stmt|;
name|g
operator|.
name|numGlyphs
operator|=
name|char_table_entries
expr_stmt|;
name|int
name|ng
init|=
name|char_table_entries
decl_stmt|;
if|if
condition|(
operator|!
name|stringToCMap
argument_list|(
name|ch
argument_list|,
name|char_table_entries
argument_list|,
operator|&
name|g
argument_list|,
operator|&
name|ng
argument_list|,
name|GlyphIndicesOnly
argument_list|)
condition|)
name|Q_UNREACHABLE
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|ng
operator|==
name|char_table_entries
argument_list|)
expr_stmt|;
while|while
condition|(
operator|--
name|ng
condition|)
block|{
if|if
condition|(
name|glyphs
index|[
name|ng
index|]
condition|)
block|{
name|glyph_metrics_t
name|gi
init|=
cast|const_cast
argument_list|<
name|QFontEngineFT
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|boundingBox
argument_list|(
name|glyphs
index|[
name|ng
index|]
argument_list|)
decl_stmt|;
name|lbearing
operator|=
name|qMin
argument_list|(
name|lbearing
argument_list|,
name|gi
operator|.
name|x
argument_list|)
expr_stmt|;
name|rbearing
operator|=
name|qMin
argument_list|(
name|rbearing
argument_list|,
operator|(
name|gi
operator|.
name|xoff
operator|-
name|gi
operator|.
name|x
operator|-
name|gi
operator|.
name|width
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|rbearing
operator|.
name|toReal
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|lineThickness
name|QFixed
name|QFontEngineFT
operator|::
name|lineThickness
parameter_list|()
specifier|const
block|{
return|return
name|line_thickness
return|;
block|}
end_function
begin_function
DECL|function|underlinePosition
name|QFixed
name|QFontEngineFT
operator|::
name|underlinePosition
parameter_list|()
specifier|const
block|{
return|return
name|underline_position
return|;
block|}
end_function
begin_function
DECL|function|doKerning
name|void
name|QFontEngineFT
operator|::
name|doKerning
parameter_list|(
name|QGlyphLayout
modifier|*
name|g
parameter_list|,
name|QFontEngine
operator|::
name|ShaperFlags
name|flags
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|kerning_pairs_loaded
condition|)
block|{
name|kerning_pairs_loaded
operator|=
literal|true
expr_stmt|;
name|lockFace
argument_list|()
expr_stmt|;
if|if
condition|(
name|freetype
operator|->
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|x_ppem
operator|!=
literal|0
condition|)
block|{
name|QFixed
name|scalingFactor
argument_list|(
name|freetype
operator|->
name|face
operator|->
name|units_per_EM
operator|/
name|freetype
operator|->
name|face
operator|->
name|size
operator|->
name|metrics
operator|.
name|x_ppem
argument_list|)
decl_stmt|;
name|unlockFace
argument_list|()
expr_stmt|;
cast|const_cast
argument_list|<
name|QFontEngineFT
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|loadKerningPairs
argument_list|(
name|scalingFactor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unlockFace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|shouldUseDesignMetrics
argument_list|(
name|flags
argument_list|)
operator|&&
operator|!
operator|(
name|fontDef
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|ForceIntegerMetrics
operator|)
condition|)
name|flags
operator||=
name|DesignMetrics
expr_stmt|;
else|else
name|flags
operator|&=
operator|~
name|DesignMetrics
expr_stmt|;
name|QFontEngine
operator|::
name|doKerning
argument_list|(
name|g
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loadTransformedGlyphSet
name|QFontEngineFT
operator|::
name|QGlyphSet
modifier|*
name|QFontEngineFT
operator|::
name|loadTransformedGlyphSet
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|)
block|{
if|if
condition|(
name|matrix
operator|.
name|type
argument_list|()
operator|>
name|QTransform
operator|::
name|TxShear
condition|)
return|return
literal|0
return|;
comment|// FT_Set_Transform only supports scalable fonts
if|if
condition|(
operator|!
name|FT_IS_SCALABLE
argument_list|(
name|freetype
operator|->
name|face
argument_list|)
condition|)
return|return
literal|0
return|;
name|FT_Matrix
name|m
decl_stmt|;
name|m
operator|.
name|xx
operator|=
name|FT_Fixed
argument_list|(
name|matrix
operator|.
name|m11
argument_list|()
operator|*
literal|65536
argument_list|)
expr_stmt|;
name|m
operator|.
name|xy
operator|=
name|FT_Fixed
argument_list|(
operator|-
name|matrix
operator|.
name|m21
argument_list|()
operator|*
literal|65536
argument_list|)
expr_stmt|;
name|m
operator|.
name|yx
operator|=
name|FT_Fixed
argument_list|(
operator|-
name|matrix
operator|.
name|m12
argument_list|()
operator|*
literal|65536
argument_list|)
expr_stmt|;
name|m
operator|.
name|yy
operator|=
name|FT_Fixed
argument_list|(
name|matrix
operator|.
name|m22
argument_list|()
operator|*
literal|65536
argument_list|)
expr_stmt|;
name|QGlyphSet
modifier|*
name|gs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|transformedGlyphSets
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QGlyphSet
modifier|&
name|g
init|=
name|transformedGlyphSets
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|.
name|transformationMatrix
operator|.
name|xx
operator|==
name|m
operator|.
name|xx
operator|&&
name|g
operator|.
name|transformationMatrix
operator|.
name|xy
operator|==
name|m
operator|.
name|xy
operator|&&
name|g
operator|.
name|transformationMatrix
operator|.
name|yx
operator|==
name|m
operator|.
name|yx
operator|&&
name|g
operator|.
name|transformationMatrix
operator|.
name|yy
operator|==
name|m
operator|.
name|yy
condition|)
block|{
comment|// found a match, move it to the front
name|transformedGlyphSets
operator|.
name|move
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gs
operator|=
operator|&
name|transformedGlyphSets
index|[
literal|0
index|]
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|gs
condition|)
block|{
comment|// don't try to load huge fonts
name|bool
name|draw_as_outline
init|=
name|fontDef
operator|.
name|pixelSize
operator|*
name|qSqrt
argument_list|(
name|qAbs
argument_list|(
name|matrix
operator|.
name|det
argument_list|()
argument_list|)
argument_list|)
operator|>=
name|QT_MAX_CACHED_GLYPH_SIZE
decl_stmt|;
if|if
condition|(
name|draw_as_outline
condition|)
return|return
literal|0
return|;
comment|// don't cache more than 10 transformations
if|if
condition|(
name|transformedGlyphSets
operator|.
name|count
argument_list|()
operator|>=
literal|10
condition|)
block|{
name|transformedGlyphSets
operator|.
name|move
argument_list|(
name|transformedGlyphSets
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transformedGlyphSets
operator|.
name|prepend
argument_list|(
name|QGlyphSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|gs
operator|=
operator|&
name|transformedGlyphSets
index|[
literal|0
index|]
expr_stmt|;
name|gs
operator|->
name|clear
argument_list|()
expr_stmt|;
name|gs
operator|->
name|transformationMatrix
operator|=
name|m
expr_stmt|;
name|gs
operator|->
name|outline_drawing
operator|=
name|draw_as_outline
expr_stmt|;
block|}
return|return
name|gs
return|;
block|}
end_function
begin_function
DECL|function|loadGlyphs
name|bool
name|QFontEngineFT
operator|::
name|loadGlyphs
parameter_list|(
name|QGlyphSet
modifier|*
name|gs
parameter_list|,
specifier|const
name|glyph_t
modifier|*
name|glyphs
parameter_list|,
name|int
name|num_glyphs
parameter_list|,
specifier|const
name|QFixedPoint
modifier|*
name|positions
parameter_list|,
name|GlyphFormat
name|format
parameter_list|)
block|{
name|FT_Face
name|face
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num_glyphs
condition|;
operator|++
name|i
control|)
block|{
name|QFixed
name|spp
init|=
name|subPixelPositionForX
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|x
argument_list|)
decl_stmt|;
name|Glyph
modifier|*
name|glyph
init|=
name|gs
condition|?
name|gs
operator|->
name|getGlyph
argument_list|(
name|glyphs
index|[
name|i
index|]
argument_list|,
name|spp
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|glyph
operator|==
literal|0
operator|||
name|glyph
operator|->
name|format
operator|!=
name|format
condition|)
block|{
if|if
condition|(
operator|!
name|face
condition|)
block|{
name|face
operator|=
name|lockFace
argument_list|()
expr_stmt|;
name|FT_Matrix
name|m
init|=
name|matrix
decl_stmt|;
name|FT_Matrix_Multiply
argument_list|(
operator|&
name|gs
operator|->
name|transformationMatrix
argument_list|,
operator|&
name|m
argument_list|)
expr_stmt|;
name|FT_Set_Transform
argument_list|(
name|face
argument_list|,
operator|&
name|m
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|freetype
operator|->
name|matrix
operator|=
name|m
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|loadGlyph
argument_list|(
name|gs
argument_list|,
name|glyphs
index|[
name|i
index|]
argument_list|,
name|spp
argument_list|,
name|format
argument_list|)
condition|)
block|{
name|unlockFace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
if|if
condition|(
name|face
condition|)
name|unlockFace
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|getUnscaledGlyph
name|void
name|QFontEngineFT
operator|::
name|getUnscaledGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|glyph_metrics_t
modifier|*
name|metrics
parameter_list|)
block|{
name|FT_Face
name|face
init|=
name|lockFace
argument_list|(
name|Unscaled
argument_list|)
decl_stmt|;
name|FT_Set_Transform
argument_list|(
name|face
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FT_Load_Glyph
argument_list|(
name|face
argument_list|,
name|glyph
argument_list|,
name|FT_LOAD_NO_BITMAP
argument_list|)
expr_stmt|;
name|int
name|left
init|=
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|horiBearingX
decl_stmt|;
name|int
name|right
init|=
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|horiBearingX
operator|+
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|width
decl_stmt|;
name|int
name|top
init|=
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|horiBearingY
decl_stmt|;
name|int
name|bottom
init|=
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|horiBearingY
operator|-
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|height
decl_stmt|;
name|QFixedPoint
name|p
decl_stmt|;
name|p
operator|.
name|x
operator|=
literal|0
expr_stmt|;
name|p
operator|.
name|y
operator|=
literal|0
expr_stmt|;
name|metrics
operator|->
name|width
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|right
operator|-
name|left
argument_list|)
expr_stmt|;
name|metrics
operator|->
name|height
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|top
operator|-
name|bottom
argument_list|)
expr_stmt|;
name|metrics
operator|->
name|x
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|metrics
operator|->
name|y
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
operator|-
name|top
argument_list|)
expr_stmt|;
name|metrics
operator|->
name|xoff
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|face
operator|->
name|glyph
operator|->
name|advance
operator|.
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|FT_IS_SCALABLE
argument_list|(
name|freetype
operator|->
name|face
argument_list|)
condition|)
name|QFreetypeFace
operator|::
name|addBitmapToPath
argument_list|(
name|face
operator|->
name|glyph
argument_list|,
name|p
argument_list|,
name|path
argument_list|)
expr_stmt|;
else|else
name|QFreetypeFace
operator|::
name|addGlyphToPath
argument_list|(
name|face
argument_list|,
name|face
operator|->
name|glyph
argument_list|,
name|p
argument_list|,
name|path
argument_list|,
name|face
operator|->
name|units_per_EM
operator|<<
literal|6
argument_list|,
name|face
operator|->
name|units_per_EM
operator|<<
literal|6
argument_list|)
expr_stmt|;
name|FT_Set_Transform
argument_list|(
name|face
argument_list|,
operator|&
name|freetype
operator|->
name|matrix
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|unlockFace
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|supportsTransformation
name|bool
name|QFontEngineFT
operator|::
name|supportsTransformation
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|)
specifier|const
block|{
comment|// The freetype engine falls back to QFontEngine for tranformed glyphs,
comment|// which uses fast-tranform and produces very ugly results, so we claim
comment|// to support just translations.
return|return
name|transform
operator|.
name|type
argument_list|()
operator|<=
name|QTransform
operator|::
name|TxTranslate
return|;
block|}
end_function
begin_function
DECL|function|getChar
specifier|static
specifier|inline
name|unsigned
name|int
name|getChar
parameter_list|(
specifier|const
name|QChar
modifier|*
name|str
parameter_list|,
name|int
modifier|&
name|i
parameter_list|,
specifier|const
name|int
name|len
parameter_list|)
block|{
name|uint
name|ucs4
init|=
name|str
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
index|[
name|i
index|]
operator|.
name|isHighSurrogate
argument_list|()
operator|&&
name|i
operator|<
name|len
operator|-
literal|1
operator|&&
name|str
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|isLowSurrogate
argument_list|()
condition|)
block|{
operator|++
name|i
expr_stmt|;
name|ucs4
operator|=
name|QChar
operator|::
name|surrogateToUcs4
argument_list|(
name|ucs4
argument_list|,
name|str
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ucs4
return|;
block|}
end_function
begin_function
DECL|function|canRender
name|bool
name|QFontEngineFT
operator|::
name|canRender
parameter_list|(
specifier|const
name|QChar
modifier|*
name|string
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|FT_Face
name|face
init|=
name|freetype
operator|->
name|face
decl_stmt|;
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|unsigned
name|int
name|uc
init|=
name|getChar
argument_list|(
name|string
argument_list|,
name|i
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|FT_Get_Char_Index
argument_list|(
name|face
argument_list|,
name|uc
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|addOutlineToPath
name|void
name|QFontEngineFT
operator|::
name|addOutlineToPath
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|,
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|QTextItem
operator|::
name|RenderFlags
name|flags
parameter_list|)
block|{
if|if
condition|(
operator|!
name|glyphs
operator|.
name|numGlyphs
condition|)
return|return;
if|if
condition|(
name|FT_IS_SCALABLE
argument_list|(
name|freetype
operator|->
name|face
argument_list|)
condition|)
block|{
name|QFontEngine
operator|::
name|addOutlineToPath
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|glyphs
argument_list|,
name|path
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVarLengthArray
argument_list|<
name|QFixedPoint
argument_list|>
name|positions
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|glyph_t
argument_list|>
name|positioned_glyphs
decl_stmt|;
name|QTransform
name|matrix
decl_stmt|;
name|matrix
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|getGlyphPositions
argument_list|(
name|glyphs
argument_list|,
name|matrix
argument_list|,
name|flags
argument_list|,
name|positioned_glyphs
argument_list|,
name|positions
argument_list|)
expr_stmt|;
name|FT_Face
name|face
init|=
name|lockFace
argument_list|(
name|Unscaled
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|gl
init|=
literal|0
init|;
name|gl
operator|<
name|glyphs
operator|.
name|numGlyphs
condition|;
name|gl
operator|++
control|)
block|{
name|FT_UInt
name|glyph
init|=
name|positioned_glyphs
index|[
name|gl
index|]
decl_stmt|;
name|FT_Load_Glyph
argument_list|(
name|face
argument_list|,
name|glyph
argument_list|,
name|FT_LOAD_TARGET_MONO
argument_list|)
expr_stmt|;
name|freetype
operator|->
name|addBitmapToPath
argument_list|(
name|face
operator|->
name|glyph
argument_list|,
name|positions
index|[
name|gl
index|]
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
name|unlockFace
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|addGlyphsToPath
name|void
name|QFontEngineFT
operator|::
name|addGlyphsToPath
parameter_list|(
name|glyph_t
modifier|*
name|glyphs
parameter_list|,
name|QFixedPoint
modifier|*
name|positions
parameter_list|,
name|int
name|numGlyphs
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|QTextItem
operator|::
name|RenderFlags
parameter_list|)
block|{
name|FT_Face
name|face
init|=
name|lockFace
argument_list|(
name|Unscaled
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|gl
init|=
literal|0
init|;
name|gl
operator|<
name|numGlyphs
condition|;
name|gl
operator|++
control|)
block|{
name|FT_UInt
name|glyph
init|=
name|glyphs
index|[
name|gl
index|]
decl_stmt|;
name|FT_Load_Glyph
argument_list|(
name|face
argument_list|,
name|glyph
argument_list|,
name|FT_LOAD_NO_BITMAP
argument_list|)
expr_stmt|;
name|FT_GlyphSlot
name|g
init|=
name|face
operator|->
name|glyph
decl_stmt|;
if|if
condition|(
name|g
operator|->
name|format
operator|!=
name|FT_GLYPH_FORMAT_OUTLINE
condition|)
continue|continue;
if|if
condition|(
name|embolden
condition|)
name|Q_FT_GLYPHSLOT_EMBOLDEN
argument_list|(
name|g
argument_list|)
expr_stmt|;
if|if
condition|(
name|obliquen
condition|)
name|Q_FT_GLYPHSLOT_OBLIQUE
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|QFreetypeFace
operator|::
name|addGlyphToPath
argument_list|(
name|face
argument_list|,
name|g
argument_list|,
name|positions
index|[
name|gl
index|]
argument_list|,
name|path
argument_list|,
name|xsize
argument_list|,
name|ysize
argument_list|)
expr_stmt|;
block|}
name|unlockFace
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stringToCMap
name|bool
name|QFontEngineFT
operator|::
name|stringToCMap
parameter_list|(
specifier|const
name|QChar
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|,
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|int
modifier|*
name|nglyphs
parameter_list|,
name|QFontEngine
operator|::
name|ShaperFlags
name|flags
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|*
name|nglyphs
operator|<
name|len
condition|)
block|{
operator|*
name|nglyphs
operator|=
name|len
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|glyph_pos
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|freetype
operator|->
name|symbol_map
condition|)
block|{
name|FT_Face
name|face
init|=
name|freetype
operator|->
name|face
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|unsigned
name|int
name|uc
init|=
name|getChar
argument_list|(
name|str
argument_list|,
name|i
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|=
name|uc
operator|<
name|QFreetypeFace
operator|::
name|cmapCacheSize
condition|?
name|freetype
operator|->
name|cmapCache
index|[
name|uc
index|]
else|:
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
condition|)
block|{
comment|// Symbol fonts can have more than one CMAPs, FreeType should take the
comment|// correct one for us by default, so we always try FT_Get_Char_Index
comment|// first. If it didn't work (returns 0), we will explicitly set the
comment|// CMAP to symbol font one and try again. symbol_map is not always the
comment|// correct one because in certain fonts like Wingdings symbol_map only
comment|// contains PUA codepoints instead of the common ones.
name|glyph_t
name|glyph
init|=
name|FT_Get_Char_Index
argument_list|(
name|face
argument_list|,
name|uc
argument_list|)
decl_stmt|;
comment|// Certain symbol fonts don't have no-break space (0xa0) and tab (0x9),
comment|// while we usually want to render them as space
if|if
condition|(
operator|!
name|glyph
operator|&&
operator|(
name|uc
operator|==
literal|0xa0
operator|||
name|uc
operator|==
literal|0x9
operator|)
condition|)
block|{
name|uc
operator|=
literal|0x20
expr_stmt|;
name|glyph
operator|=
name|FT_Get_Char_Index
argument_list|(
name|face
argument_list|,
name|uc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|glyph
condition|)
block|{
name|FT_Set_Charmap
argument_list|(
name|face
argument_list|,
name|freetype
operator|->
name|symbol_map
argument_list|)
expr_stmt|;
name|glyph
operator|=
name|FT_Get_Char_Index
argument_list|(
name|face
argument_list|,
name|uc
argument_list|)
expr_stmt|;
name|FT_Set_Charmap
argument_list|(
name|face
argument_list|,
name|freetype
operator|->
name|unicode_map
argument_list|)
expr_stmt|;
block|}
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|=
name|glyph
expr_stmt|;
if|if
condition|(
name|uc
operator|<
name|QFreetypeFace
operator|::
name|cmapCacheSize
condition|)
name|freetype
operator|->
name|cmapCache
index|[
name|uc
index|]
operator|=
name|glyph
expr_stmt|;
block|}
operator|++
name|glyph_pos
expr_stmt|;
block|}
block|}
else|else
block|{
name|FT_Face
name|face
init|=
name|freetype
operator|->
name|face
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|unsigned
name|int
name|uc
init|=
name|getChar
argument_list|(
name|str
argument_list|,
name|i
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|=
name|uc
operator|<
name|QFreetypeFace
operator|::
name|cmapCacheSize
condition|?
name|freetype
operator|->
name|cmapCache
index|[
name|uc
index|]
else|:
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
condition|)
block|{
block|{
name|redo
label|:
name|glyph_t
name|glyph
init|=
name|FT_Get_Char_Index
argument_list|(
name|face
argument_list|,
name|uc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|glyph
operator|&&
operator|(
name|uc
operator|==
literal|0xa0
operator|||
name|uc
operator|==
literal|0x9
operator|)
condition|)
block|{
name|uc
operator|=
literal|0x20
expr_stmt|;
goto|goto
name|redo
goto|;
block|}
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|=
name|glyph
expr_stmt|;
if|if
condition|(
name|uc
operator|<
name|QFreetypeFace
operator|::
name|cmapCacheSize
condition|)
name|freetype
operator|->
name|cmapCache
index|[
name|uc
index|]
operator|=
name|glyph
expr_stmt|;
block|}
block|}
operator|++
name|glyph_pos
expr_stmt|;
block|}
block|}
operator|*
name|nglyphs
operator|=
name|glyph_pos
expr_stmt|;
name|glyphs
operator|->
name|numGlyphs
operator|=
name|glyph_pos
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|GlyphIndicesOnly
operator|)
condition|)
name|recalcAdvances
argument_list|(
name|glyphs
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|shouldUseDesignMetrics
name|bool
name|QFontEngineFT
operator|::
name|shouldUseDesignMetrics
parameter_list|(
name|QFontEngine
operator|::
name|ShaperFlags
name|flags
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|FT_IS_SCALABLE
argument_list|(
name|freetype
operator|->
name|face
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|default_hint_style
operator|==
name|HintNone
operator|||
name|default_hint_style
operator|==
name|HintLight
operator|||
operator|(
name|flags
operator|&
name|DesignMetrics
operator|)
return|;
block|}
end_function
begin_function
DECL|function|recalcAdvances
name|void
name|QFontEngineFT
operator|::
name|recalcAdvances
parameter_list|(
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|QFontEngine
operator|::
name|ShaperFlags
name|flags
parameter_list|)
specifier|const
block|{
name|FT_Face
name|face
init|=
literal|0
decl_stmt|;
name|bool
name|design
init|=
name|shouldUseDesignMetrics
argument_list|(
name|flags
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|->
name|numGlyphs
condition|;
name|i
operator|++
control|)
block|{
name|Glyph
modifier|*
name|g
init|=
name|cacheEnabled
condition|?
name|defaultGlyphSet
operator|.
name|getGlyph
argument_list|(
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
argument_list|)
else|:
literal|0
decl_stmt|;
comment|// Since we are passing Format_None to loadGlyph, use same default format logic as loadGlyph
name|GlyphFormat
name|acceptableFormat
init|=
operator|(
name|defaultFormat
operator|!=
name|Format_None
operator|)
condition|?
name|defaultFormat
else|:
name|Format_Mono
decl_stmt|;
if|if
condition|(
name|g
operator|&&
name|g
operator|->
name|format
operator|==
name|acceptableFormat
condition|)
block|{
name|glyphs
operator|->
name|advances
index|[
name|i
index|]
operator|=
name|design
condition|?
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|g
operator|->
name|linearAdvance
argument_list|)
else|:
name|QFixed
argument_list|(
name|g
operator|->
name|advance
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|face
condition|)
name|face
operator|=
name|lockFace
argument_list|()
expr_stmt|;
name|g
operator|=
name|loadGlyph
argument_list|(
name|cacheEnabled
condition|?
operator|&
name|defaultGlyphSet
else|:
literal|0
argument_list|,
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|Format_None
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|glyphs
operator|->
name|advances
index|[
name|i
index|]
operator|=
name|design
condition|?
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|face
operator|->
name|glyph
operator|->
name|linearHoriAdvance
operator|>>
literal|10
argument_list|)
else|:
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|horiAdvance
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cacheEnabled
condition|)
operator|delete
name|g
expr_stmt|;
block|}
block|}
if|if
condition|(
name|face
condition|)
name|unlockFace
argument_list|()
expr_stmt|;
if|if
condition|(
name|fontDef
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|ForceIntegerMetrics
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|->
name|numGlyphs
condition|;
operator|++
name|i
control|)
name|glyphs
operator|->
name|advances
index|[
name|i
index|]
operator|=
name|glyphs
operator|->
name|advances
index|[
name|i
index|]
operator|.
name|round
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngineFT
operator|::
name|boundingBox
parameter_list|(
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|)
block|{
name|FT_Face
name|face
init|=
literal|0
decl_stmt|;
name|glyph_metrics_t
name|overall
decl_stmt|;
comment|// initialize with line height, we get the same behaviour on all platforms
name|overall
operator|.
name|y
operator|=
operator|-
name|ascent
argument_list|()
expr_stmt|;
name|overall
operator|.
name|height
operator|=
name|ascent
argument_list|()
operator|+
name|descent
argument_list|()
expr_stmt|;
name|QFixed
name|ymax
init|=
literal|0
decl_stmt|;
name|QFixed
name|xmax
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|numGlyphs
condition|;
name|i
operator|++
control|)
block|{
name|Glyph
modifier|*
name|g
init|=
name|cacheEnabled
condition|?
name|defaultGlyphSet
operator|.
name|getGlyph
argument_list|(
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|g
condition|)
block|{
if|if
condition|(
operator|!
name|face
condition|)
name|face
operator|=
name|lockFace
argument_list|()
expr_stmt|;
name|g
operator|=
name|loadGlyph
argument_list|(
name|cacheEnabled
condition|?
operator|&
name|defaultGlyphSet
else|:
literal|0
argument_list|,
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|Format_None
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|g
condition|)
block|{
name|QFixed
name|x
init|=
name|overall
operator|.
name|xoff
operator|+
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|x
operator|+
name|g
operator|->
name|x
decl_stmt|;
name|QFixed
name|y
init|=
name|overall
operator|.
name|yoff
operator|+
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|y
operator|-
name|g
operator|->
name|y
decl_stmt|;
name|overall
operator|.
name|x
operator|=
name|qMin
argument_list|(
name|overall
operator|.
name|x
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|overall
operator|.
name|y
operator|=
name|qMin
argument_list|(
name|overall
operator|.
name|y
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|xmax
operator|=
name|qMax
argument_list|(
name|xmax
argument_list|,
name|x
operator|+
name|g
operator|->
name|width
argument_list|)
expr_stmt|;
name|ymax
operator|=
name|qMax
argument_list|(
name|ymax
argument_list|,
name|y
operator|+
name|g
operator|->
name|height
argument_list|)
expr_stmt|;
name|overall
operator|.
name|xoff
operator|+=
name|g
operator|->
name|advance
expr_stmt|;
if|if
condition|(
operator|!
name|cacheEnabled
condition|)
operator|delete
name|g
expr_stmt|;
block|}
else|else
block|{
name|int
name|left
init|=
name|FLOOR
argument_list|(
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|horiBearingX
argument_list|)
decl_stmt|;
name|int
name|right
init|=
name|CEIL
argument_list|(
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|horiBearingX
operator|+
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|width
argument_list|)
decl_stmt|;
name|int
name|top
init|=
name|CEIL
argument_list|(
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|horiBearingY
argument_list|)
decl_stmt|;
name|int
name|bottom
init|=
name|FLOOR
argument_list|(
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|horiBearingY
operator|-
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|height
argument_list|)
decl_stmt|;
name|QFixed
name|x
init|=
name|overall
operator|.
name|xoff
operator|+
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|x
operator|-
operator|(
operator|-
name|TRUNC
argument_list|(
name|left
argument_list|)
operator|)
decl_stmt|;
name|QFixed
name|y
init|=
name|overall
operator|.
name|yoff
operator|+
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|y
operator|-
name|TRUNC
argument_list|(
name|top
argument_list|)
decl_stmt|;
name|overall
operator|.
name|x
operator|=
name|qMin
argument_list|(
name|overall
operator|.
name|x
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|overall
operator|.
name|y
operator|=
name|qMin
argument_list|(
name|overall
operator|.
name|y
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|xmax
operator|=
name|qMax
argument_list|(
name|xmax
argument_list|,
name|x
operator|+
name|TRUNC
argument_list|(
name|right
operator|-
name|left
argument_list|)
argument_list|)
expr_stmt|;
name|ymax
operator|=
name|qMax
argument_list|(
name|ymax
argument_list|,
name|y
operator|+
name|TRUNC
argument_list|(
name|top
operator|-
name|bottom
argument_list|)
argument_list|)
expr_stmt|;
name|overall
operator|.
name|xoff
operator|+=
name|int
argument_list|(
name|TRUNC
argument_list|(
name|ROUND
argument_list|(
name|face
operator|->
name|glyph
operator|->
name|advance
operator|.
name|x
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|overall
operator|.
name|height
operator|=
name|qMax
argument_list|(
name|overall
operator|.
name|height
argument_list|,
name|ymax
operator|-
name|overall
operator|.
name|y
argument_list|)
expr_stmt|;
name|overall
operator|.
name|width
operator|=
name|xmax
operator|-
name|overall
operator|.
name|x
expr_stmt|;
if|if
condition|(
name|face
condition|)
name|unlockFace
argument_list|()
expr_stmt|;
return|return
name|overall
return|;
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngineFT
operator|::
name|boundingBox
parameter_list|(
name|glyph_t
name|glyph
parameter_list|)
block|{
name|FT_Face
name|face
init|=
literal|0
decl_stmt|;
name|glyph_metrics_t
name|overall
decl_stmt|;
name|Glyph
modifier|*
name|g
init|=
name|cacheEnabled
condition|?
name|defaultGlyphSet
operator|.
name|getGlyph
argument_list|(
name|glyph
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|g
condition|)
block|{
name|face
operator|=
name|lockFace
argument_list|()
expr_stmt|;
name|g
operator|=
name|loadGlyph
argument_list|(
name|cacheEnabled
condition|?
operator|&
name|defaultGlyphSet
else|:
literal|0
argument_list|,
name|glyph
argument_list|,
literal|0
argument_list|,
name|Format_None
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|g
condition|)
block|{
name|overall
operator|.
name|x
operator|=
name|g
operator|->
name|x
expr_stmt|;
name|overall
operator|.
name|y
operator|=
operator|-
name|g
operator|->
name|y
expr_stmt|;
name|overall
operator|.
name|width
operator|=
name|g
operator|->
name|width
expr_stmt|;
name|overall
operator|.
name|height
operator|=
name|g
operator|->
name|height
expr_stmt|;
name|overall
operator|.
name|xoff
operator|=
name|g
operator|->
name|advance
expr_stmt|;
if|if
condition|(
name|fontDef
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|ForceIntegerMetrics
condition|)
name|overall
operator|.
name|xoff
operator|=
name|overall
operator|.
name|xoff
operator|.
name|round
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|cacheEnabled
condition|)
operator|delete
name|g
expr_stmt|;
block|}
else|else
block|{
name|int
name|left
init|=
name|FLOOR
argument_list|(
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|horiBearingX
argument_list|)
decl_stmt|;
name|int
name|right
init|=
name|CEIL
argument_list|(
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|horiBearingX
operator|+
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|width
argument_list|)
decl_stmt|;
name|int
name|top
init|=
name|CEIL
argument_list|(
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|horiBearingY
argument_list|)
decl_stmt|;
name|int
name|bottom
init|=
name|FLOOR
argument_list|(
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|horiBearingY
operator|-
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|height
argument_list|)
decl_stmt|;
name|overall
operator|.
name|width
operator|=
name|TRUNC
argument_list|(
name|right
operator|-
name|left
argument_list|)
expr_stmt|;
name|overall
operator|.
name|height
operator|=
name|TRUNC
argument_list|(
name|top
operator|-
name|bottom
argument_list|)
expr_stmt|;
name|overall
operator|.
name|x
operator|=
name|TRUNC
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|overall
operator|.
name|y
operator|=
operator|-
name|TRUNC
argument_list|(
name|top
argument_list|)
expr_stmt|;
name|overall
operator|.
name|xoff
operator|=
name|TRUNC
argument_list|(
name|ROUND
argument_list|(
name|face
operator|->
name|glyph
operator|->
name|advance
operator|.
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|face
condition|)
name|unlockFace
argument_list|()
expr_stmt|;
return|return
name|overall
return|;
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngineFT
operator|::
name|boundingBox
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|)
block|{
return|return
name|alphaMapBoundingBox
argument_list|(
name|glyph
argument_list|,
literal|0
argument_list|,
name|matrix
argument_list|,
name|QFontEngine
operator|::
name|Format_None
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|QTransformToFTMatrix
specifier|static
name|FT_Matrix
name|QTransformToFTMatrix
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|)
block|{
name|FT_Matrix
name|m
decl_stmt|;
name|m
operator|.
name|xx
operator|=
name|FT_Fixed
argument_list|(
name|matrix
operator|.
name|m11
argument_list|()
operator|*
literal|65536
argument_list|)
expr_stmt|;
name|m
operator|.
name|xy
operator|=
name|FT_Fixed
argument_list|(
operator|-
name|matrix
operator|.
name|m21
argument_list|()
operator|*
literal|65536
argument_list|)
expr_stmt|;
name|m
operator|.
name|yx
operator|=
name|FT_Fixed
argument_list|(
operator|-
name|matrix
operator|.
name|m12
argument_list|()
operator|*
literal|65536
argument_list|)
expr_stmt|;
name|m
operator|.
name|yy
operator|=
name|FT_Fixed
argument_list|(
name|matrix
operator|.
name|m22
argument_list|()
operator|*
literal|65536
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
end_function
begin_function
DECL|function|alphaMapBoundingBox
name|glyph_metrics_t
name|QFontEngineFT
operator|::
name|alphaMapBoundingBox
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|QFixed
name|subPixelPosition
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|QFontEngine
operator|::
name|GlyphFormat
name|format
parameter_list|)
block|{
name|FT_Face
name|face
init|=
literal|0
decl_stmt|;
name|glyph_metrics_t
name|overall
decl_stmt|;
name|QGlyphSet
modifier|*
name|glyphSet
init|=
literal|0
decl_stmt|;
name|FT_Matrix
name|ftMatrix
init|=
name|QTransformToFTMatrix
argument_list|(
name|matrix
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEnabled
condition|)
block|{
if|if
condition|(
name|matrix
operator|.
name|type
argument_list|()
operator|>
name|QTransform
operator|::
name|TxTranslate
operator|&&
name|FT_IS_SCALABLE
argument_list|(
name|freetype
operator|->
name|face
argument_list|)
condition|)
block|{
comment|// TODO move everything here to a method of its own to access glyphSets
comment|// to be shared with a new method that will replace loadTransformedGlyphSet()
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|transformedGlyphSets
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QGlyphSet
modifier|&
name|g
init|=
name|transformedGlyphSets
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|.
name|transformationMatrix
operator|.
name|xx
operator|==
name|ftMatrix
operator|.
name|xx
operator|&&
name|g
operator|.
name|transformationMatrix
operator|.
name|xy
operator|==
name|ftMatrix
operator|.
name|xy
operator|&&
name|g
operator|.
name|transformationMatrix
operator|.
name|yx
operator|==
name|ftMatrix
operator|.
name|yx
operator|&&
name|g
operator|.
name|transformationMatrix
operator|.
name|yy
operator|==
name|ftMatrix
operator|.
name|yy
condition|)
block|{
comment|// found a match, move it to the front
name|transformedGlyphSets
operator|.
name|move
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glyphSet
operator|=
operator|&
name|transformedGlyphSets
index|[
literal|0
index|]
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|glyphSet
condition|)
block|{
comment|// don't cache more than 10 transformations
if|if
condition|(
name|transformedGlyphSets
operator|.
name|count
argument_list|()
operator|>=
literal|10
condition|)
block|{
name|transformedGlyphSets
operator|.
name|move
argument_list|(
name|transformedGlyphSets
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transformedGlyphSets
operator|.
name|prepend
argument_list|(
name|QGlyphSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|glyphSet
operator|=
operator|&
name|transformedGlyphSets
index|[
literal|0
index|]
expr_stmt|;
name|glyphSet
operator|->
name|clear
argument_list|()
expr_stmt|;
name|glyphSet
operator|->
name|transformationMatrix
operator|=
name|ftMatrix
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|glyphSet
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|glyphSet
operator|=
operator|&
name|defaultGlyphSet
expr_stmt|;
block|}
block|}
name|Glyph
modifier|*
name|g
init|=
name|glyphSet
condition|?
name|glyphSet
operator|->
name|getGlyph
argument_list|(
name|glyph
argument_list|,
name|subPixelPosition
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|g
operator|||
name|g
operator|->
name|format
operator|!=
name|format
condition|)
block|{
name|face
operator|=
name|lockFace
argument_list|()
expr_stmt|;
name|FT_Matrix
name|m
init|=
name|this
operator|->
name|matrix
decl_stmt|;
name|FT_Matrix_Multiply
argument_list|(
operator|&
name|ftMatrix
argument_list|,
operator|&
name|m
argument_list|)
expr_stmt|;
name|freetype
operator|->
name|matrix
operator|=
name|m
expr_stmt|;
name|g
operator|=
name|loadGlyph
argument_list|(
name|glyphSet
argument_list|,
name|glyph
argument_list|,
name|subPixelPosition
argument_list|,
name|format
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|g
condition|)
block|{
name|overall
operator|.
name|x
operator|=
name|g
operator|->
name|x
expr_stmt|;
name|overall
operator|.
name|y
operator|=
operator|-
name|g
operator|->
name|y
expr_stmt|;
name|overall
operator|.
name|width
operator|=
name|g
operator|->
name|width
expr_stmt|;
name|overall
operator|.
name|height
operator|=
name|g
operator|->
name|height
expr_stmt|;
name|overall
operator|.
name|xoff
operator|=
name|g
operator|->
name|advance
expr_stmt|;
if|if
condition|(
operator|!
name|glyphSet
condition|)
operator|delete
name|g
expr_stmt|;
block|}
else|else
block|{
name|int
name|left
init|=
name|FLOOR
argument_list|(
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|horiBearingX
argument_list|)
decl_stmt|;
name|int
name|right
init|=
name|CEIL
argument_list|(
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|horiBearingX
operator|+
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|width
argument_list|)
decl_stmt|;
name|int
name|top
init|=
name|CEIL
argument_list|(
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|horiBearingY
argument_list|)
decl_stmt|;
name|int
name|bottom
init|=
name|FLOOR
argument_list|(
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|horiBearingY
operator|-
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|height
argument_list|)
decl_stmt|;
name|overall
operator|.
name|width
operator|=
name|TRUNC
argument_list|(
name|right
operator|-
name|left
argument_list|)
expr_stmt|;
name|overall
operator|.
name|height
operator|=
name|TRUNC
argument_list|(
name|top
operator|-
name|bottom
argument_list|)
expr_stmt|;
name|overall
operator|.
name|x
operator|=
name|TRUNC
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|overall
operator|.
name|y
operator|=
operator|-
name|TRUNC
argument_list|(
name|top
argument_list|)
expr_stmt|;
name|overall
operator|.
name|xoff
operator|=
name|TRUNC
argument_list|(
name|ROUND
argument_list|(
name|face
operator|->
name|glyph
operator|->
name|advance
operator|.
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|face
condition|)
name|unlockFace
argument_list|()
expr_stmt|;
return|return
name|overall
return|;
block|}
end_function
begin_function
DECL|function|lockedAlphaMapForGlyph
name|QImage
modifier|*
name|QFontEngineFT
operator|::
name|lockedAlphaMapForGlyph
parameter_list|(
name|glyph_t
name|glyphIndex
parameter_list|,
name|QFixed
name|subPixelPosition
parameter_list|,
name|QFontEngine
operator|::
name|GlyphFormat
name|neededFormat
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|t
parameter_list|,
name|QPoint
modifier|*
name|offset
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|currentlyLockedAlphaMap
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|lockFace
argument_list|()
expr_stmt|;
if|if
condition|(
name|isBitmapFont
argument_list|()
condition|)
name|neededFormat
operator|=
name|Format_Mono
expr_stmt|;
elseif|else
if|if
condition|(
name|neededFormat
operator|==
name|Format_None
operator|&&
name|defaultFormat
operator|!=
name|Format_None
condition|)
name|neededFormat
operator|=
name|defaultFormat
expr_stmt|;
elseif|else
if|if
condition|(
name|neededFormat
operator|==
name|Format_None
condition|)
name|neededFormat
operator|=
name|Format_A8
expr_stmt|;
name|QImage
operator|::
name|Format
name|format
decl_stmt|;
switch|switch
condition|(
name|neededFormat
condition|)
block|{
case|case
name|Format_Mono
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_Mono
expr_stmt|;
break|break;
case|case
name|Format_A8
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_Indexed8
expr_stmt|;
break|break;
case|case
name|Format_A32
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_ARGB32
expr_stmt|;
break|break;
default|default:
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|format
operator|=
name|QImage
operator|::
name|Format_Invalid
expr_stmt|;
block|}
empty_stmt|;
name|QFontEngineFT
operator|::
name|Glyph
modifier|*
name|glyph
decl_stmt|;
name|QScopedPointer
argument_list|<
name|QFontEngineFT
operator|::
name|Glyph
argument_list|>
name|glyphGuard
decl_stmt|;
if|if
condition|(
name|cacheEnabled
condition|)
block|{
name|QFontEngineFT
operator|::
name|QGlyphSet
modifier|*
name|gset
init|=
operator|&
name|defaultGlyphSet
decl_stmt|;
name|QFontEngine
operator|::
name|HintStyle
name|hintStyle
init|=
name|default_hint_style
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|type
argument_list|()
operator|>=
name|QTransform
operator|::
name|TxScale
condition|)
block|{
comment|// disable hinting if the glyphs are transformed
name|default_hint_style
operator|=
name|HintNone
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|isAffine
argument_list|()
condition|)
name|gset
operator|=
name|loadTransformedGlyphSet
argument_list|(
name|t
argument_list|)
expr_stmt|;
else|else
name|gset
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|gset
condition|)
block|{
name|FT_Matrix
name|m
init|=
name|matrix
decl_stmt|;
name|FT_Matrix_Multiply
argument_list|(
operator|&
name|gset
operator|->
name|transformationMatrix
argument_list|,
operator|&
name|m
argument_list|)
expr_stmt|;
name|FT_Set_Transform
argument_list|(
name|freetype
operator|->
name|face
argument_list|,
operator|&
name|m
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|freetype
operator|->
name|matrix
operator|=
name|m
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|gset
operator|||
name|gset
operator|->
name|outline_drawing
operator|||
operator|!
name|loadGlyph
argument_list|(
name|gset
argument_list|,
name|glyphIndex
argument_list|,
name|subPixelPosition
argument_list|,
name|neededFormat
argument_list|)
condition|)
block|{
name|default_hint_style
operator|=
name|hintStyle
expr_stmt|;
return|return
name|QFontEngine
operator|::
name|lockedAlphaMapForGlyph
argument_list|(
name|glyphIndex
argument_list|,
name|subPixelPosition
argument_list|,
name|neededFormat
argument_list|,
name|t
argument_list|,
name|offset
argument_list|)
return|;
block|}
name|default_hint_style
operator|=
name|hintStyle
expr_stmt|;
name|glyph
operator|=
name|gset
operator|->
name|getGlyph
argument_list|(
name|glyphIndex
argument_list|,
name|subPixelPosition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FT_Matrix
name|m
init|=
name|matrix
decl_stmt|;
name|FT_Matrix
name|extra
init|=
name|QTransformToFTMatrix
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|FT_Matrix_Multiply
argument_list|(
operator|&
name|extra
argument_list|,
operator|&
name|m
argument_list|)
expr_stmt|;
name|FT_Set_Transform
argument_list|(
name|freetype
operator|->
name|face
argument_list|,
operator|&
name|m
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|freetype
operator|->
name|matrix
operator|=
name|m
expr_stmt|;
name|glyph
operator|=
name|loadGlyph
argument_list|(
literal|0
argument_list|,
name|glyphIndex
argument_list|,
name|subPixelPosition
argument_list|,
name|neededFormat
argument_list|)
expr_stmt|;
name|glyphGuard
operator|.
name|reset
argument_list|(
name|glyph
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|glyph
operator|==
literal|0
operator|||
name|glyph
operator|->
name|data
operator|==
literal|0
operator|||
name|glyph
operator|->
name|width
operator|==
literal|0
operator|||
name|glyph
operator|->
name|height
operator|==
literal|0
condition|)
block|{
name|unlockFace
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
name|int
name|pitch
decl_stmt|;
switch|switch
condition|(
name|neededFormat
condition|)
block|{
case|case
name|Format_Mono
case|:
name|pitch
operator|=
operator|(
operator|(
name|glyph
operator|->
name|width
operator|+
literal|31
operator|)
operator|&
operator|~
literal|31
operator|)
operator|>>
literal|3
expr_stmt|;
break|break;
case|case
name|Format_A8
case|:
name|pitch
operator|=
operator|(
name|glyph
operator|->
name|width
operator|+
literal|3
operator|)
operator|&
operator|~
literal|3
expr_stmt|;
break|break;
case|case
name|Format_A32
case|:
name|pitch
operator|=
name|glyph
operator|->
name|width
operator|*
literal|4
expr_stmt|;
break|break;
default|default:
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pitch
operator|=
literal|0
expr_stmt|;
block|}
empty_stmt|;
if|if
condition|(
name|offset
operator|!=
literal|0
condition|)
operator|*
name|offset
operator|=
name|QPoint
argument_list|(
name|glyph
operator|->
name|x
argument_list|,
operator|-
name|glyph
operator|->
name|y
argument_list|)
expr_stmt|;
name|currentlyLockedAlphaMap
operator|=
name|QImage
argument_list|(
name|glyph
operator|->
name|data
argument_list|,
name|glyph
operator|->
name|width
argument_list|,
name|glyph
operator|->
name|height
argument_list|,
name|pitch
argument_list|,
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|glyphGuard
operator|.
name|isNull
argument_list|()
condition|)
name|currentlyLockedAlphaMap
operator|=
name|currentlyLockedAlphaMap
operator|.
name|copy
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|currentlyLockedAlphaMap
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QImageData
modifier|*
name|data
init|=
name|currentlyLockedAlphaMap
operator|.
name|data_ptr
argument_list|()
decl_stmt|;
name|data
operator|->
name|is_locked
operator|=
literal|true
expr_stmt|;
return|return
operator|&
name|currentlyLockedAlphaMap
return|;
block|}
end_function
begin_function
DECL|function|unlockAlphaMapForGlyph
name|void
name|QFontEngineFT
operator|::
name|unlockAlphaMapForGlyph
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|currentlyLockedAlphaMap
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|unlockFace
argument_list|()
expr_stmt|;
name|currentlyLockedAlphaMap
operator|=
name|QImage
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loadGlyphFor
name|QFontEngineFT
operator|::
name|Glyph
modifier|*
name|QFontEngineFT
operator|::
name|loadGlyphFor
parameter_list|(
name|glyph_t
name|g
parameter_list|,
name|QFixed
name|subPixelPosition
parameter_list|,
name|GlyphFormat
name|format
parameter_list|)
block|{
return|return
name|defaultGlyphSet
operator|.
name|outline_drawing
condition|?
literal|0
else|:
name|loadGlyph
argument_list|(
name|cacheEnabled
condition|?
operator|&
name|defaultGlyphSet
else|:
literal|0
argument_list|,
name|g
argument_list|,
name|subPixelPosition
argument_list|,
name|format
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|alphaMapForGlyph
name|QImage
name|QFontEngineFT
operator|::
name|alphaMapForGlyph
parameter_list|(
name|glyph_t
name|g
parameter_list|,
name|QFixed
name|subPixelPosition
parameter_list|)
block|{
name|lockFace
argument_list|()
expr_stmt|;
name|QScopedPointer
argument_list|<
name|Glyph
argument_list|>
name|glyph
argument_list|(
name|loadGlyphFor
argument_list|(
name|g
argument_list|,
name|subPixelPosition
argument_list|,
name|antialias
condition|?
name|Format_A8
else|:
name|Format_Mono
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEnabled
condition|)
name|glyph
operator|.
name|take
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|glyph
operator|||
operator|!
name|glyph
operator|->
name|data
condition|)
block|{
name|unlockFace
argument_list|()
expr_stmt|;
return|return
name|QFontEngine
operator|::
name|alphaMapForGlyph
argument_list|(
name|g
argument_list|)
return|;
block|}
specifier|const
name|int
name|pitch
init|=
name|antialias
condition|?
operator|(
name|glyph
operator|->
name|width
operator|+
literal|3
operator|)
operator|&
operator|~
literal|3
else|:
operator|(
operator|(
name|glyph
operator|->
name|width
operator|+
literal|31
operator|)
operator|/
literal|32
operator|)
operator|*
literal|4
decl_stmt|;
name|QImage
name|img
argument_list|(
name|glyph
operator|->
name|width
argument_list|,
name|glyph
operator|->
name|height
argument_list|,
name|antialias
condition|?
name|QImage
operator|::
name|Format_Indexed8
else|:
name|QImage
operator|::
name|Format_Mono
argument_list|)
decl_stmt|;
if|if
condition|(
name|antialias
condition|)
block|{
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|colors
argument_list|(
literal|256
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|colors
index|[
name|i
index|]
operator|=
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|img
operator|.
name|setColorTable
argument_list|(
name|colors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|colors
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|colors
index|[
literal|0
index|]
operator|=
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|colors
index|[
literal|1
index|]
operator|=
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
expr_stmt|;
name|img
operator|.
name|setColorTable
argument_list|(
name|colors
argument_list|)
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|img
operator|.
name|bytesPerLine
argument_list|()
operator|==
name|pitch
argument_list|)
expr_stmt|;
if|if
condition|(
name|glyph
operator|->
name|width
condition|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|glyph
operator|->
name|height
condition|;
operator|++
name|y
control|)
name|memcpy
argument_list|(
name|img
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
argument_list|,
operator|&
name|glyph
operator|->
name|data
index|[
name|y
operator|*
name|pitch
index|]
argument_list|,
name|pitch
argument_list|)
expr_stmt|;
block|}
name|unlockFace
argument_list|()
expr_stmt|;
return|return
name|img
return|;
block|}
end_function
begin_function
DECL|function|alphaRGBMapForGlyph
name|QImage
name|QFontEngineFT
operator|::
name|alphaRGBMapForGlyph
parameter_list|(
name|glyph_t
name|g
parameter_list|,
name|QFixed
name|subPixelPosition
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|type
argument_list|()
operator|>
name|QTransform
operator|::
name|TxTranslate
condition|)
return|return
name|QFontEngine
operator|::
name|alphaRGBMapForGlyph
argument_list|(
name|g
argument_list|,
name|subPixelPosition
argument_list|,
name|t
argument_list|)
return|;
name|lockFace
argument_list|()
expr_stmt|;
name|QScopedPointer
argument_list|<
name|Glyph
argument_list|>
name|glyph
argument_list|(
name|loadGlyphFor
argument_list|(
name|g
argument_list|,
name|subPixelPosition
argument_list|,
name|Format_A32
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEnabled
condition|)
name|glyph
operator|.
name|take
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|glyph
operator|||
operator|!
name|glyph
operator|->
name|data
condition|)
block|{
name|unlockFace
argument_list|()
expr_stmt|;
return|return
name|QFontEngine
operator|::
name|alphaRGBMapForGlyph
argument_list|(
name|g
argument_list|,
name|subPixelPosition
argument_list|,
name|t
argument_list|)
return|;
block|}
name|QImage
name|img
argument_list|(
name|glyph
operator|->
name|width
argument_list|,
name|glyph
operator|->
name|height
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|img
operator|.
name|bits
argument_list|()
argument_list|,
name|glyph
operator|->
name|data
argument_list|,
literal|4
operator|*
name|glyph
operator|->
name|width
operator|*
name|glyph
operator|->
name|height
argument_list|)
expr_stmt|;
name|unlockFace
argument_list|()
expr_stmt|;
return|return
name|img
return|;
block|}
end_function
begin_function
DECL|function|removeGlyphFromCache
name|void
name|QFontEngineFT
operator|::
name|removeGlyphFromCache
parameter_list|(
name|glyph_t
name|glyph
parameter_list|)
block|{
name|defaultGlyphSet
operator|.
name|removeGlyphFromCache
argument_list|(
name|glyph
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|glyphCount
name|int
name|QFontEngineFT
operator|::
name|glyphCount
parameter_list|()
specifier|const
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|FT_Face
name|face
init|=
name|lockFace
argument_list|()
decl_stmt|;
if|if
condition|(
name|face
condition|)
block|{
name|count
operator|=
name|face
operator|->
name|num_glyphs
expr_stmt|;
name|unlockFace
argument_list|()
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
end_function
begin_function
DECL|function|lockFace
name|FT_Face
name|QFontEngineFT
operator|::
name|lockFace
parameter_list|(
name|Scaling
name|scale
parameter_list|)
specifier|const
block|{
name|freetype
operator|->
name|lock
argument_list|()
expr_stmt|;
name|FT_Face
name|face
init|=
name|freetype
operator|->
name|face
decl_stmt|;
if|if
condition|(
name|scale
operator|==
name|Unscaled
condition|)
block|{
name|FT_Set_Char_Size
argument_list|(
name|face
argument_list|,
name|face
operator|->
name|units_per_EM
operator|<<
literal|6
argument_list|,
name|face
operator|->
name|units_per_EM
operator|<<
literal|6
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|freetype
operator|->
name|xsize
operator|=
name|face
operator|->
name|units_per_EM
operator|<<
literal|6
expr_stmt|;
name|freetype
operator|->
name|ysize
operator|=
name|face
operator|->
name|units_per_EM
operator|<<
literal|6
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|freetype
operator|->
name|xsize
operator|!=
name|xsize
operator|||
name|freetype
operator|->
name|ysize
operator|!=
name|ysize
condition|)
block|{
name|FT_Set_Char_Size
argument_list|(
name|face
argument_list|,
name|xsize
argument_list|,
name|ysize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|freetype
operator|->
name|xsize
operator|=
name|xsize
expr_stmt|;
name|freetype
operator|->
name|ysize
operator|=
name|ysize
expr_stmt|;
block|}
if|if
condition|(
name|freetype
operator|->
name|matrix
operator|.
name|xx
operator|!=
name|matrix
operator|.
name|xx
operator|||
name|freetype
operator|->
name|matrix
operator|.
name|yy
operator|!=
name|matrix
operator|.
name|yy
operator|||
name|freetype
operator|->
name|matrix
operator|.
name|xy
operator|!=
name|matrix
operator|.
name|xy
operator|||
name|freetype
operator|->
name|matrix
operator|.
name|yx
operator|!=
name|matrix
operator|.
name|yx
condition|)
block|{
name|freetype
operator|->
name|matrix
operator|=
name|matrix
expr_stmt|;
name|FT_Set_Transform
argument_list|(
name|face
argument_list|,
operator|&
name|freetype
operator|->
name|matrix
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|face
return|;
block|}
end_function
begin_function
DECL|function|unlockFace
name|void
name|QFontEngineFT
operator|::
name|unlockFace
parameter_list|()
specifier|const
block|{
name|freetype
operator|->
name|unlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|non_locked_face
name|FT_Face
name|QFontEngineFT
operator|::
name|non_locked_face
parameter_list|()
specifier|const
block|{
return|return
name|freetype
operator|->
name|face
return|;
block|}
end_function
begin_constructor
DECL|function|QGlyphSet
name|QFontEngineFT
operator|::
name|QGlyphSet
operator|::
name|QGlyphSet
parameter_list|()
member_init_list|:
name|outline_drawing
argument_list|(
literal|false
argument_list|)
block|{
name|transformationMatrix
operator|.
name|xx
operator|=
literal|0x10000
expr_stmt|;
name|transformationMatrix
operator|.
name|yy
operator|=
literal|0x10000
expr_stmt|;
name|transformationMatrix
operator|.
name|xy
operator|=
literal|0
expr_stmt|;
name|transformationMatrix
operator|.
name|yx
operator|=
literal|0
expr_stmt|;
name|memset
argument_list|(
name|fast_glyph_data
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|fast_glyph_data
argument_list|)
argument_list|)
expr_stmt|;
name|fast_glyph_count
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QGlyphSet
name|QFontEngineFT
operator|::
name|QGlyphSet
operator|::
name|~
name|QGlyphSet
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|clear
name|void
name|QFontEngineFT
operator|::
name|QGlyphSet
operator|::
name|clear
parameter_list|()
block|{
if|if
condition|(
name|fast_glyph_count
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|fast_glyph_data
index|[
name|i
index|]
condition|)
block|{
operator|delete
name|fast_glyph_data
index|[
name|i
index|]
expr_stmt|;
name|fast_glyph_data
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|fast_glyph_count
operator|=
literal|0
expr_stmt|;
block|}
name|qDeleteAll
argument_list|(
name|glyph_data
argument_list|)
expr_stmt|;
name|glyph_data
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeGlyphFromCache
name|void
name|QFontEngineFT
operator|::
name|QGlyphSet
operator|::
name|removeGlyphFromCache
parameter_list|(
name|glyph_t
name|index
parameter_list|,
name|QFixed
name|subPixelPosition
parameter_list|)
block|{
if|if
condition|(
name|useFastGlyphData
argument_list|(
name|index
argument_list|,
name|subPixelPosition
argument_list|)
condition|)
block|{
if|if
condition|(
name|fast_glyph_data
index|[
name|index
index|]
condition|)
block|{
operator|delete
name|fast_glyph_data
index|[
name|index
index|]
expr_stmt|;
name|fast_glyph_data
index|[
name|index
index|]
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|fast_glyph_count
operator|>
literal|0
condition|)
operator|--
name|fast_glyph_count
expr_stmt|;
block|}
block|}
else|else
block|{
operator|delete
name|glyph_data
operator|.
name|take
argument_list|(
name|GlyphAndSubPixelPosition
argument_list|(
name|index
argument_list|,
name|subPixelPosition
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setGlyph
name|void
name|QFontEngineFT
operator|::
name|QGlyphSet
operator|::
name|setGlyph
parameter_list|(
name|glyph_t
name|index
parameter_list|,
name|QFixed
name|subPixelPosition
parameter_list|,
name|Glyph
modifier|*
name|glyph
parameter_list|)
block|{
if|if
condition|(
name|useFastGlyphData
argument_list|(
name|index
argument_list|,
name|subPixelPosition
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fast_glyph_data
index|[
name|index
index|]
condition|)
operator|++
name|fast_glyph_count
expr_stmt|;
name|fast_glyph_data
index|[
name|index
index|]
operator|=
name|glyph
expr_stmt|;
block|}
else|else
block|{
name|glyph_data
operator|.
name|insert
argument_list|(
name|GlyphAndSubPixelPosition
argument_list|(
name|index
argument_list|,
name|subPixelPosition
argument_list|)
argument_list|,
name|glyph
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|getPointInOutline
name|int
name|QFontEngineFT
operator|::
name|getPointInOutline
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|int
name|flags
parameter_list|,
name|quint32
name|point
parameter_list|,
name|QFixed
modifier|*
name|xpos
parameter_list|,
name|QFixed
modifier|*
name|ypos
parameter_list|,
name|quint32
modifier|*
name|nPoints
parameter_list|)
block|{
name|lockFace
argument_list|()
expr_stmt|;
name|bool
name|hsubpixel
init|=
literal|true
decl_stmt|;
name|int
name|vfactor
init|=
literal|1
decl_stmt|;
name|int
name|load_flags
init|=
name|loadFlags
argument_list|(
literal|0
argument_list|,
name|Format_A8
argument_list|,
name|flags
argument_list|,
name|hsubpixel
argument_list|,
name|vfactor
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|freetype
operator|->
name|getPointInOutline
argument_list|(
name|glyph
argument_list|,
name|load_flags
argument_list|,
name|point
argument_list|,
name|xpos
argument_list|,
name|ypos
argument_list|,
name|nPoints
argument_list|)
decl_stmt|;
name|unlockFace
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|initFromFontEngine
name|bool
name|QFontEngineFT
operator|::
name|initFromFontEngine
parameter_list|(
specifier|const
name|QFontEngineFT
modifier|*
name|fe
parameter_list|)
block|{
if|if
condition|(
operator|!
name|init
argument_list|(
name|fe
operator|->
name|faceId
argument_list|()
argument_list|,
name|fe
operator|->
name|antialias
argument_list|,
name|fe
operator|->
name|defaultFormat
argument_list|,
name|fe
operator|->
name|freetype
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// Increase the reference of this QFreetypeFace since one more QFontEngineFT
comment|// will be using it
name|freetype
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|default_load_flags
operator|=
name|fe
operator|->
name|default_load_flags
expr_stmt|;
name|default_hint_style
operator|=
name|fe
operator|->
name|default_hint_style
expr_stmt|;
name|antialias
operator|=
name|fe
operator|->
name|antialias
expr_stmt|;
name|transform
operator|=
name|fe
operator|->
name|transform
expr_stmt|;
name|embolden
operator|=
name|fe
operator|->
name|embolden
expr_stmt|;
name|obliquen
operator|=
name|fe
operator|->
name|obliquen
expr_stmt|;
name|subpixelType
operator|=
name|fe
operator|->
name|subpixelType
expr_stmt|;
name|lcdFilterType
operator|=
name|fe
operator|->
name|lcdFilterType
expr_stmt|;
name|embeddedbitmap
operator|=
name|fe
operator|->
name|embeddedbitmap
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|cloneWithSize
name|QFontEngine
modifier|*
name|QFontEngineFT
operator|::
name|cloneWithSize
parameter_list|(
name|qreal
name|pixelSize
parameter_list|)
specifier|const
block|{
name|QFontDef
name|fontDef
argument_list|(
name|this
operator|->
name|fontDef
argument_list|)
decl_stmt|;
name|fontDef
operator|.
name|pixelSize
operator|=
name|pixelSize
expr_stmt|;
name|QFontEngineFT
modifier|*
name|fe
init|=
operator|new
name|QFontEngineFT
argument_list|(
name|fontDef
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fe
operator|->
name|initFromFontEngine
argument_list|(
name|this
argument_list|)
condition|)
block|{
operator|delete
name|fe
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|fe
return|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_FREETYPE
end_comment
end_unit
