begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qt_windows.h"
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|"qfont_p.h"
end_include
begin_include
include|#
directive|include
file|"qfontengine_p.h"
end_include
begin_include
include|#
directive|include
file|"qpaintdevice.h"
end_include
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_include
include|#
directive|include
file|"qabstractfileengine.h"
end_include
begin_include
include|#
directive|include
file|"qendian.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qsettings.h"
end_include
begin_include
include|#
directive|include
file|"qfontenginedirectwrite_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE
end_ifdef
begin_include
include|#
directive|include
file|<QTemporaryFile>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|HDC
name|shared_dc
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|// common dc for all fonts
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|MAKE_TAG
end_ifdef
begin_undef
DECL|macro|MAKE_TAG
undef|#
directive|undef
name|MAKE_TAG
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// GetFontData expects the tags in little endian ;(
end_comment
begin_define
DECL|macro|MAKE_TAG
define|#
directive|define
name|MAKE_TAG
parameter_list|(
name|ch1
parameter_list|,
name|ch2
parameter_list|,
name|ch3
parameter_list|,
name|ch4
parameter_list|)
value|(\     (((quint32)(ch4))<< 24) | \     (((quint32)(ch3))<< 16) | \     (((quint32)(ch2))<< 8) | \     ((quint32)(ch1)) \    )
end_define
begin_decl_stmt
DECL|variable|stock_sysfont
specifier|static
name|HFONT
name|stock_sysfont
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|localizedName
specifier|static
name|bool
name|localizedName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
specifier|const
name|QChar
modifier|*
name|c
init|=
name|name
operator|.
name|unicode
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|c
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
operator|>=
literal|0x100
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|getUShort
specifier|static
specifier|inline
name|quint16
name|getUShort
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|p
parameter_list|)
block|{
name|quint16
name|val
decl_stmt|;
name|val
operator|=
operator|*
name|p
operator|++
operator|<<
literal|8
expr_stmt|;
name|val
operator||=
operator|*
name|p
expr_stmt|;
return|return
name|val
return|;
block|}
end_function
begin_function
DECL|function|getEnglishName
specifier|static
name|QString
name|getEnglishName
parameter_list|(
specifier|const
name|uchar
modifier|*
name|table
parameter_list|,
name|quint32
name|bytes
parameter_list|)
block|{
name|QString
name|i18n_name
decl_stmt|;
enum|enum
block|{
name|NameRecordSize
init|=
literal|12
block|,
name|FamilyId
init|=
literal|1
block|,
name|MS_LangIdEnglish
init|=
literal|0x009
block|}
enum|;
comment|// get the name table
name|quint16
name|count
decl_stmt|;
name|quint16
name|string_offset
decl_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|names
decl_stmt|;
name|int
name|microsoft_id
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|apple_id
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|unicode_id
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|getUShort
argument_list|(
name|table
argument_list|)
operator|!=
literal|0
condition|)
goto|goto
name|error
goto|;
name|count
operator|=
name|getUShort
argument_list|(
name|table
operator|+
literal|2
argument_list|)
expr_stmt|;
name|string_offset
operator|=
name|getUShort
argument_list|(
name|table
operator|+
literal|4
argument_list|)
expr_stmt|;
name|names
operator|=
name|table
operator|+
literal|6
expr_stmt|;
if|if
condition|(
name|string_offset
operator|>=
name|bytes
operator|||
literal|6
operator|+
name|count
operator|*
name|NameRecordSize
operator|>
name|string_offset
condition|)
goto|goto
name|error
goto|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
comment|// search for the correct name entry
name|quint16
name|platform_id
init|=
name|getUShort
argument_list|(
name|names
operator|+
name|i
operator|*
name|NameRecordSize
argument_list|)
decl_stmt|;
name|quint16
name|encoding_id
init|=
name|getUShort
argument_list|(
name|names
operator|+
literal|2
operator|+
name|i
operator|*
name|NameRecordSize
argument_list|)
decl_stmt|;
name|quint16
name|language_id
init|=
name|getUShort
argument_list|(
name|names
operator|+
literal|4
operator|+
name|i
operator|*
name|NameRecordSize
argument_list|)
decl_stmt|;
name|quint16
name|name_id
init|=
name|getUShort
argument_list|(
name|names
operator|+
literal|6
operator|+
name|i
operator|*
name|NameRecordSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|name_id
operator|!=
name|FamilyId
condition|)
continue|continue;
enum|enum
block|{
name|PlatformId_Unicode
init|=
literal|0
block|,
name|PlatformId_Apple
init|=
literal|1
block|,
name|PlatformId_Microsoft
init|=
literal|3
block|}
enum|;
name|quint16
name|length
init|=
name|getUShort
argument_list|(
name|names
operator|+
literal|8
operator|+
name|i
operator|*
name|NameRecordSize
argument_list|)
decl_stmt|;
name|quint16
name|offset
init|=
name|getUShort
argument_list|(
name|names
operator|+
literal|10
operator|+
name|i
operator|*
name|NameRecordSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|DWORD
argument_list|(
name|string_offset
operator|+
name|offset
operator|+
name|length
argument_list|)
operator|>=
name|bytes
condition|)
continue|continue;
if|if
condition|(
operator|(
name|platform_id
operator|==
name|PlatformId_Microsoft
operator|&&
operator|(
name|encoding_id
operator|==
literal|0
operator|||
name|encoding_id
operator|==
literal|1
operator|)
operator|)
operator|&&
operator|(
name|language_id
operator|&
literal|0x3ff
operator|)
operator|==
name|MS_LangIdEnglish
operator|&&
name|microsoft_id
operator|==
operator|-
literal|1
condition|)
name|microsoft_id
operator|=
name|i
expr_stmt|;
comment|// not sure if encoding id 4 for Unicode is utf16 or ucs4...
elseif|else
if|if
condition|(
name|platform_id
operator|==
name|PlatformId_Unicode
operator|&&
name|encoding_id
operator|<
literal|4
operator|&&
name|unicode_id
operator|==
operator|-
literal|1
condition|)
name|unicode_id
operator|=
name|i
expr_stmt|;
elseif|else
if|if
condition|(
name|platform_id
operator|==
name|PlatformId_Apple
operator|&&
name|encoding_id
operator|==
literal|0
operator|&&
name|language_id
operator|==
literal|0
condition|)
name|apple_id
operator|=
name|i
expr_stmt|;
block|}
block|{
name|bool
name|unicode
init|=
literal|false
decl_stmt|;
name|int
name|id
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|microsoft_id
operator|!=
operator|-
literal|1
condition|)
block|{
name|id
operator|=
name|microsoft_id
expr_stmt|;
name|unicode
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|apple_id
operator|!=
operator|-
literal|1
condition|)
block|{
name|id
operator|=
name|apple_id
expr_stmt|;
name|unicode
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|unicode_id
operator|!=
operator|-
literal|1
condition|)
block|{
name|id
operator|=
name|unicode_id
expr_stmt|;
name|unicode
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|!=
operator|-
literal|1
condition|)
block|{
name|quint16
name|length
init|=
name|getUShort
argument_list|(
name|names
operator|+
literal|8
operator|+
name|id
operator|*
name|NameRecordSize
argument_list|)
decl_stmt|;
name|quint16
name|offset
init|=
name|getUShort
argument_list|(
name|names
operator|+
literal|10
operator|+
name|id
operator|*
name|NameRecordSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|unicode
condition|)
block|{
comment|// utf16
name|length
operator|/=
literal|2
expr_stmt|;
name|i18n_name
operator|.
name|resize
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|QChar
modifier|*
name|uc
init|=
operator|(
name|QChar
operator|*
operator|)
name|i18n_name
operator|.
name|unicode
argument_list|()
decl_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|string
init|=
name|table
operator|+
name|string_offset
operator|+
name|offset
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
name|uc
index|[
name|i
index|]
operator|=
name|getUShort
argument_list|(
name|string
operator|+
literal|2
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Apple Roman
name|i18n_name
operator|.
name|resize
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|QChar
modifier|*
name|uc
init|=
operator|(
name|QChar
operator|*
operator|)
name|i18n_name
operator|.
name|unicode
argument_list|()
decl_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|string
init|=
name|table
operator|+
name|string_offset
operator|+
name|offset
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
name|uc
index|[
name|i
index|]
operator|=
name|QLatin1Char
argument_list|(
name|string
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|error
label|:
comment|//qDebug("got i18n name of '%s' for font '%s'", i18n_name.latin1(), familyName.toLocal8Bit().data());
return|return
name|i18n_name
return|;
block|}
end_function
begin_function
DECL|function|getEnglishName
specifier|static
name|QString
name|getEnglishName
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|)
block|{
name|QString
name|i18n_name
decl_stmt|;
name|HDC
name|hdc
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOGFONT
name|lf
decl_stmt|;
name|memset
argument_list|(
operator|&
name|lf
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|LOGFONT
argument_list|)
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|,
name|familyName
operator|.
name|utf16
argument_list|()
argument_list|,
name|qMin
argument_list|(
name|LF_FACESIZE
argument_list|,
name|familyName
operator|.
name|length
argument_list|()
argument_list|)
operator|*
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
argument_list|)
expr_stmt|;
name|lf
operator|.
name|lfCharSet
operator|=
name|DEFAULT_CHARSET
expr_stmt|;
name|HFONT
name|hfont
init|=
name|CreateFontIndirect
argument_list|(
operator|&
name|lf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hfont
condition|)
block|{
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|hdc
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
name|HGDIOBJ
name|oldobj
init|=
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hfont
argument_list|)
decl_stmt|;
specifier|const
name|DWORD
name|name_tag
init|=
name|MAKE_TAG
argument_list|(
literal|'n'
argument_list|,
literal|'a'
argument_list|,
literal|'m'
argument_list|,
literal|'e'
argument_list|)
decl_stmt|;
comment|// get the name table
name|unsigned
name|char
modifier|*
name|table
init|=
literal|0
decl_stmt|;
name|DWORD
name|bytes
init|=
name|GetFontData
argument_list|(
name|hdc
argument_list|,
name|name_tag
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
name|GDI_ERROR
condition|)
block|{
comment|// ### Unused variable
comment|/* int err = GetLastError(); */
goto|goto
name|error
goto|;
block|}
name|table
operator|=
operator|new
name|unsigned
name|char
index|[
name|bytes
index|]
expr_stmt|;
name|GetFontData
argument_list|(
name|hdc
argument_list|,
name|name_tag
argument_list|,
literal|0
argument_list|,
name|table
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytes
operator|==
name|GDI_ERROR
condition|)
goto|goto
name|error
goto|;
name|i18n_name
operator|=
name|getEnglishName
argument_list|(
name|table
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|error
label|:
operator|delete
index|[]
name|table
expr_stmt|;
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|oldobj
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|hfont
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|hdc
argument_list|)
expr_stmt|;
comment|//qDebug("got i18n name of '%s' for font '%s'", i18n_name.latin1(), familyName.toLocal8Bit().data());
return|return
name|i18n_name
return|;
block|}
end_function
begin_function_decl
specifier|extern
name|QFont
operator|::
name|Weight
name|weightFromInteger
parameter_list|(
name|int
name|weight
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// qfontdatabase.cpp
end_comment
begin_function
specifier|static
DECL|function|addFontToDatabase
name|void
name|addFontToDatabase
parameter_list|(
name|QString
name|familyName
parameter_list|,
specifier|const
name|QString
modifier|&
name|scriptName
parameter_list|,
name|TEXTMETRIC
modifier|*
name|textmetric
parameter_list|,
specifier|const
name|FONTSIGNATURE
modifier|*
name|signature
parameter_list|,
name|int
name|type
parameter_list|)
block|{
specifier|const
name|int
name|script
init|=
operator|-
literal|1
decl_stmt|;
specifier|const
name|QString
name|foundryName
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|bool
name|italic
init|=
literal|false
decl_stmt|;
name|int
name|weight
decl_stmt|;
name|bool
name|fixed
decl_stmt|;
name|bool
name|ttf
decl_stmt|;
name|bool
name|scalable
decl_stmt|;
name|int
name|size
decl_stmt|;
comment|//    QString escript = QString::fromWCharArray(f->elfScript);
comment|//    qDebug("script=%s", escript.latin1());
name|NEWTEXTMETRIC
modifier|*
name|tm
init|=
operator|(
name|NEWTEXTMETRIC
operator|*
operator|)
name|textmetric
decl_stmt|;
name|fixed
operator|=
operator|!
operator|(
name|tm
operator|->
name|tmPitchAndFamily
operator|&
name|TMPF_FIXED_PITCH
operator|)
expr_stmt|;
name|ttf
operator|=
operator|(
name|tm
operator|->
name|tmPitchAndFamily
operator|&
name|TMPF_TRUETYPE
operator|)
expr_stmt|;
name|scalable
operator|=
name|tm
operator|->
name|tmPitchAndFamily
operator|&
operator|(
name|TMPF_VECTOR
operator||
name|TMPF_TRUETYPE
operator|)
expr_stmt|;
name|size
operator|=
name|scalable
condition|?
name|SMOOTH_SCALABLE
else|:
name|tm
operator|->
name|tmHeight
expr_stmt|;
name|italic
operator|=
name|tm
operator|->
name|tmItalic
expr_stmt|;
name|weight
operator|=
name|tm
operator|->
name|tmWeight
expr_stmt|;
comment|// the "@family" fonts are just the same as "family". Ignore them.
if|if
condition|(
name|familyName
index|[
literal|0
index|]
operator|!=
name|QLatin1Char
argument_list|(
literal|'@'
argument_list|)
operator|&&
operator|!
name|familyName
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"WST_"
argument_list|)
argument_list|)
condition|)
block|{
name|QtFontStyle
operator|::
name|Key
name|styleKey
decl_stmt|;
name|styleKey
operator|.
name|style
operator|=
name|italic
condition|?
name|QFont
operator|::
name|StyleItalic
else|:
name|QFont
operator|::
name|StyleNormal
expr_stmt|;
name|styleKey
operator|.
name|weight
operator|=
name|weightFromInteger
argument_list|(
name|weight
argument_list|)
expr_stmt|;
name|QtFontFamily
modifier|*
name|family
init|=
name|privateDb
argument_list|()
operator|->
name|family
argument_list|(
name|familyName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|ttf
operator|&&
name|localizedName
argument_list|(
name|familyName
argument_list|)
operator|&&
name|family
operator|->
name|english_name
operator|.
name|isEmpty
argument_list|()
condition|)
name|family
operator|->
name|english_name
operator|=
name|getEnglishName
argument_list|(
name|familyName
argument_list|)
expr_stmt|;
name|QtFontFoundry
modifier|*
name|foundry
init|=
name|family
operator|->
name|foundry
argument_list|(
name|foundryName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QtFontStyle
modifier|*
name|style
init|=
name|foundry
operator|->
name|style
argument_list|(
name|styleKey
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|style
operator|->
name|smoothScalable
operator|=
name|scalable
expr_stmt|;
name|style
operator|->
name|pixelSize
argument_list|(
name|size
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
comment|// add fonts windows can generate for us:
if|if
condition|(
name|styleKey
operator|.
name|weight
operator|<=
name|QFont
operator|::
name|DemiBold
condition|)
block|{
name|QtFontStyle
operator|::
name|Key
name|key
argument_list|(
name|styleKey
argument_list|)
decl_stmt|;
name|key
operator|.
name|weight
operator|=
name|QFont
operator|::
name|Bold
expr_stmt|;
name|QtFontStyle
modifier|*
name|style
init|=
name|foundry
operator|->
name|style
argument_list|(
name|key
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|style
operator|->
name|smoothScalable
operator|=
name|scalable
expr_stmt|;
name|style
operator|->
name|pixelSize
argument_list|(
name|size
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|styleKey
operator|.
name|style
operator|!=
name|QFont
operator|::
name|StyleItalic
condition|)
block|{
name|QtFontStyle
operator|::
name|Key
name|key
argument_list|(
name|styleKey
argument_list|)
decl_stmt|;
name|key
operator|.
name|style
operator|=
name|QFont
operator|::
name|StyleItalic
expr_stmt|;
name|QtFontStyle
modifier|*
name|style
init|=
name|foundry
operator|->
name|style
argument_list|(
name|key
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|style
operator|->
name|smoothScalable
operator|=
name|scalable
expr_stmt|;
name|style
operator|->
name|pixelSize
argument_list|(
name|size
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|styleKey
operator|.
name|weight
operator|<=
name|QFont
operator|::
name|DemiBold
operator|&&
name|styleKey
operator|.
name|style
operator|!=
name|QFont
operator|::
name|StyleItalic
condition|)
block|{
name|QtFontStyle
operator|::
name|Key
name|key
argument_list|(
name|styleKey
argument_list|)
decl_stmt|;
name|key
operator|.
name|weight
operator|=
name|QFont
operator|::
name|Bold
expr_stmt|;
name|key
operator|.
name|style
operator|=
name|QFont
operator|::
name|StyleItalic
expr_stmt|;
name|QtFontStyle
modifier|*
name|style
init|=
name|foundry
operator|->
name|style
argument_list|(
name|key
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|style
operator|->
name|smoothScalable
operator|=
name|scalable
expr_stmt|;
name|style
operator|->
name|pixelSize
argument_list|(
name|size
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
name|family
operator|->
name|fixedPitch
operator|=
name|fixed
expr_stmt|;
if|if
condition|(
operator|!
name|family
operator|->
name|writingSystemCheck
operator|&&
name|type
operator|&
name|TRUETYPE_FONTTYPE
condition|)
block|{
name|quint32
name|unicodeRange
index|[
literal|4
index|]
init|=
block|{
name|signature
operator|->
name|fsUsb
index|[
literal|0
index|]
block|,
name|signature
operator|->
name|fsUsb
index|[
literal|1
index|]
block|,
name|signature
operator|->
name|fsUsb
index|[
literal|2
index|]
block|,
name|signature
operator|->
name|fsUsb
index|[
literal|3
index|]
block|}
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_WINCE
if|if
condition|(
name|signature
operator|->
name|fsUsb
index|[
literal|0
index|]
operator|==
literal|0
condition|)
block|{
comment|// If the unicode ranges bit mask is zero then
comment|// EnumFontFamiliesEx failed to determine it properly.
comment|// In this case we just pretend that the font supports all languages.
name|unicodeRange
index|[
literal|0
index|]
operator|=
literal|0xbfffffff
expr_stmt|;
comment|// second most significant bit must be zero
name|unicodeRange
index|[
literal|1
index|]
operator|=
literal|0xffffffff
expr_stmt|;
name|unicodeRange
index|[
literal|2
index|]
operator|=
literal|0xffffffff
expr_stmt|;
name|unicodeRange
index|[
literal|3
index|]
operator|=
literal|0xffffffff
expr_stmt|;
block|}
endif|#
directive|endif
name|quint32
name|codePageRange
index|[
literal|2
index|]
init|=
block|{
name|signature
operator|->
name|fsCsb
index|[
literal|0
index|]
block|,
name|signature
operator|->
name|fsCsb
index|[
literal|1
index|]
block|}
decl_stmt|;
name|QList
argument_list|<
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|>
name|systems
init|=
name|qt_determine_writing_systems_from_truetype_bits
argument_list|(
name|unicodeRange
argument_list|,
name|codePageRange
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|systems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFontDatabase
operator|::
name|WritingSystem
name|writingSystem
init|=
name|systems
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// ### Hack to work around problem with Thai text on Windows 7. Segoe UI contains
comment|// the symbol for Baht, and Windows thus reports that it supports the Thai script.
comment|// Since it's the default UI font on this platform, most widgets will be unable to
comment|// display Thai text by default. As a temporary work around, we special case Segoe UI
comment|// and remove the Thai script from its list of supported writing systems.
if|if
condition|(
name|writingSystem
operator|!=
name|QFontDatabase
operator|::
name|Thai
operator|||
name|familyName
operator|!=
name|QLatin1String
argument_list|(
literal|"Segoe UI"
argument_list|)
condition|)
name|family
operator|->
name|writingSystems
index|[
name|writingSystem
index|]
operator|=
name|QtFontFamily
operator|::
name|Supported
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|family
operator|->
name|writingSystemCheck
condition|)
block|{
comment|//qDebug("family='%s' script=%s", family->name.latin1(), script.latin1());
if|if
condition|(
name|scriptName
operator|==
name|QLatin1String
argument_list|(
literal|"Western"
argument_list|)
operator|||
name|scriptName
operator|==
name|QLatin1String
argument_list|(
literal|"Baltic"
argument_list|)
operator|||
name|scriptName
operator|==
name|QLatin1String
argument_list|(
literal|"Central European"
argument_list|)
operator|||
name|scriptName
operator|==
name|QLatin1String
argument_list|(
literal|"Turkish"
argument_list|)
operator|||
name|scriptName
operator|==
name|QLatin1String
argument_list|(
literal|"Vietnamese"
argument_list|)
condition|)
name|family
operator|->
name|writingSystems
index|[
name|QFontDatabase
operator|::
name|Latin
index|]
operator|=
name|QtFontFamily
operator|::
name|Supported
expr_stmt|;
elseif|else
if|if
condition|(
name|scriptName
operator|==
name|QLatin1String
argument_list|(
literal|"Thai"
argument_list|)
condition|)
name|family
operator|->
name|writingSystems
index|[
name|QFontDatabase
operator|::
name|Thai
index|]
operator|=
name|QtFontFamily
operator|::
name|Supported
expr_stmt|;
elseif|else
if|if
condition|(
name|scriptName
operator|==
name|QLatin1String
argument_list|(
literal|"Symbol"
argument_list|)
operator|||
name|scriptName
operator|==
name|QLatin1String
argument_list|(
literal|"Other"
argument_list|)
condition|)
name|family
operator|->
name|writingSystems
index|[
name|QFontDatabase
operator|::
name|Symbol
index|]
operator|=
name|QtFontFamily
operator|::
name|Supported
expr_stmt|;
elseif|else
if|if
condition|(
name|scriptName
operator|==
name|QLatin1String
argument_list|(
literal|"OEM/Dos"
argument_list|)
condition|)
name|family
operator|->
name|writingSystems
index|[
name|QFontDatabase
operator|::
name|Latin
index|]
operator|=
name|QtFontFamily
operator|::
name|Supported
expr_stmt|;
elseif|else
if|if
condition|(
name|scriptName
operator|==
name|QLatin1String
argument_list|(
literal|"CHINESE_GB2312"
argument_list|)
condition|)
name|family
operator|->
name|writingSystems
index|[
name|QFontDatabase
operator|::
name|SimplifiedChinese
index|]
operator|=
name|QtFontFamily
operator|::
name|Supported
expr_stmt|;
elseif|else
if|if
condition|(
name|scriptName
operator|==
name|QLatin1String
argument_list|(
literal|"CHINESE_BIG5"
argument_list|)
condition|)
name|family
operator|->
name|writingSystems
index|[
name|QFontDatabase
operator|::
name|TraditionalChinese
index|]
operator|=
name|QtFontFamily
operator|::
name|Supported
expr_stmt|;
elseif|else
if|if
condition|(
name|scriptName
operator|==
name|QLatin1String
argument_list|(
literal|"Cyrillic"
argument_list|)
condition|)
name|family
operator|->
name|writingSystems
index|[
name|QFontDatabase
operator|::
name|Cyrillic
index|]
operator|=
name|QtFontFamily
operator|::
name|Supported
expr_stmt|;
elseif|else
if|if
condition|(
name|scriptName
operator|==
name|QLatin1String
argument_list|(
literal|"Hangul"
argument_list|)
condition|)
name|family
operator|->
name|writingSystems
index|[
name|QFontDatabase
operator|::
name|Korean
index|]
operator|=
name|QtFontFamily
operator|::
name|Supported
expr_stmt|;
elseif|else
if|if
condition|(
name|scriptName
operator|==
name|QLatin1String
argument_list|(
literal|"Hebrew"
argument_list|)
condition|)
name|family
operator|->
name|writingSystems
index|[
name|QFontDatabase
operator|::
name|Hebrew
index|]
operator|=
name|QtFontFamily
operator|::
name|Supported
expr_stmt|;
elseif|else
if|if
condition|(
name|scriptName
operator|==
name|QLatin1String
argument_list|(
literal|"Greek"
argument_list|)
condition|)
name|family
operator|->
name|writingSystems
index|[
name|QFontDatabase
operator|::
name|Greek
index|]
operator|=
name|QtFontFamily
operator|::
name|Supported
expr_stmt|;
elseif|else
if|if
condition|(
name|scriptName
operator|==
name|QLatin1String
argument_list|(
literal|"Japanese"
argument_list|)
condition|)
name|family
operator|->
name|writingSystems
index|[
name|QFontDatabase
operator|::
name|Japanese
index|]
operator|=
name|QtFontFamily
operator|::
name|Supported
expr_stmt|;
elseif|else
if|if
condition|(
name|scriptName
operator|==
name|QLatin1String
argument_list|(
literal|"Arabic"
argument_list|)
condition|)
name|family
operator|->
name|writingSystems
index|[
name|QFontDatabase
operator|::
name|Arabic
index|]
operator|=
name|QtFontFamily
operator|::
name|Supported
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
specifier|static
name|int
name|CALLBACK
DECL|function|storeFont
name|storeFont
parameter_list|(
name|ENUMLOGFONTEX
modifier|*
name|f
parameter_list|,
name|NEWTEXTMETRICEX
modifier|*
name|textmetric
parameter_list|,
name|int
name|type
parameter_list|,
name|LPARAM
comment|/*p*/
parameter_list|)
block|{
name|QString
name|familyName
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|f
operator|->
name|elfLogFont
operator|.
name|lfFaceName
argument_list|)
decl_stmt|;
name|QString
name|script
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|f
operator|->
name|elfScript
argument_list|)
decl_stmt|;
name|FONTSIGNATURE
name|signature
init|=
name|textmetric
operator|->
name|ntmFontSig
decl_stmt|;
comment|// NEWTEXTMETRICEX is a NEWTEXTMETRIC, which according to the documentation is
comment|// identical to a TEXTMETRIC except for the last four members, which we don't use
comment|// anyway
name|addFontToDatabase
argument_list|(
name|familyName
argument_list|,
name|script
argument_list|,
operator|(
name|TEXTMETRIC
operator|*
operator|)
name|textmetric
argument_list|,
operator|&
name|signature
argument_list|,
name|type
argument_list|)
expr_stmt|;
comment|// keep on enumerating
return|return
literal|1
return|;
block|}
end_function
begin_function
specifier|static
DECL|function|populate_database
name|void
name|populate_database
parameter_list|(
specifier|const
name|QString
modifier|&
name|fam
parameter_list|)
block|{
name|QFontDatabasePrivate
modifier|*
name|d
init|=
name|privateDb
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|d
condition|)
return|return;
name|QtFontFamily
modifier|*
name|family
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|fam
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|family
operator|=
name|d
operator|->
name|family
argument_list|(
name|fam
argument_list|)
expr_stmt|;
if|if
condition|(
name|family
operator|&&
name|family
operator|->
name|loaded
condition|)
return|return;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|count
condition|)
block|{
return|return;
block|}
name|HDC
name|dummy
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOGFONT
name|lf
decl_stmt|;
name|lf
operator|.
name|lfCharSet
operator|=
name|DEFAULT_CHARSET
expr_stmt|;
if|if
condition|(
name|fam
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|lf
operator|.
name|lfFaceName
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|memcpy
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|,
name|fam
operator|.
name|utf16
argument_list|()
argument_list|,
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
operator|*
name|qMin
argument_list|(
name|fam
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
literal|32
argument_list|)
argument_list|)
expr_stmt|;
comment|// 32 = Windows hard-coded
block|}
name|lf
operator|.
name|lfPitchAndFamily
operator|=
literal|0
expr_stmt|;
name|EnumFontFamiliesEx
argument_list|(
name|dummy
argument_list|,
operator|&
name|lf
argument_list|,
operator|(
name|FONTENUMPROC
operator|)
name|storeFont
argument_list|,
operator|(
name|LPARAM
operator|)
name|privateDb
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|applicationFonts
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
name|fnt
init|=
name|d
operator|->
name|applicationFonts
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fnt
operator|.
name|memoryFont
condition|)
continue|continue;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fnt
operator|.
name|families
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
specifier|const
name|QString
name|familyName
init|=
name|fnt
operator|.
name|families
operator|.
name|at
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|HDC
name|hdc
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOGFONT
name|lf
decl_stmt|;
name|memset
argument_list|(
operator|&
name|lf
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|LOGFONT
argument_list|)
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|,
name|familyName
operator|.
name|utf16
argument_list|()
argument_list|,
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
operator|*
name|qMin
argument_list|(
name|LF_FACESIZE
argument_list|,
name|familyName
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|lf
operator|.
name|lfCharSet
operator|=
name|DEFAULT_CHARSET
expr_stmt|;
name|HFONT
name|hfont
init|=
name|CreateFontIndirect
argument_list|(
operator|&
name|lf
argument_list|)
decl_stmt|;
name|HGDIOBJ
name|oldobj
init|=
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hfont
argument_list|)
decl_stmt|;
name|TEXTMETRIC
name|textMetrics
decl_stmt|;
name|GetTextMetrics
argument_list|(
name|hdc
argument_list|,
operator|&
name|textMetrics
argument_list|)
expr_stmt|;
name|addFontToDatabase
argument_list|(
name|familyName
argument_list|,
name|QString
argument_list|()
argument_list|,
operator|&
name|textMetrics
argument_list|,
operator|&
name|fnt
operator|.
name|signatures
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|,
name|TRUETYPE_FONTTYPE
argument_list|)
expr_stmt|;
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|oldobj
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|hfont
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|hdc
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|fam
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|family
operator|=
name|d
operator|->
name|family
argument_list|(
name|fam
argument_list|)
expr_stmt|;
if|if
condition|(
name|family
condition|)
block|{
if|if
condition|(
operator|!
name|family
operator|->
name|writingSystemCheck
condition|)
block|{             }
name|family
operator|->
name|loaded
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|initializeDb
specifier|static
name|void
name|initializeDb
parameter_list|()
block|{
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|||
name|db
operator|->
name|count
condition|)
return|return;
name|populate_database
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QFONTDATABASE_DEBUG
comment|// print the database
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|db
operator|->
name|count
condition|;
name|f
operator|++
control|)
block|{
name|QtFontFamily
modifier|*
name|family
init|=
name|db
operator|->
name|families
index|[
name|f
index|]
decl_stmt|;
name|qDebug
argument_list|(
literal|"    %s: %p"
argument_list|,
name|qPrintable
argument_list|(
name|family
operator|->
name|name
argument_list|)
argument_list|,
name|family
argument_list|)
expr_stmt|;
name|populate_database
argument_list|(
name|family
operator|->
name|name
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
block|qDebug("        scripts supported:");         for (int i = 0; i< QUnicodeTables::ScriptCount; i++)             if(family->writingSystems[i]& QtFontFamily::Supported)                 qDebug("            %d", i);         for (int fd = 0; fd< family->count; fd++) {             QtFontFoundry *foundry = family->foundries[fd];             qDebug("        %s", foundry->name.latin1());             for (int s = 0; s< foundry->count; s++) {                 QtFontStyle *style = foundry->styles[s];                 qDebug("            style: style=%d weight=%d smooth=%d",  style->key.style,                        style->key.weight, style->smoothScalable );                 if(!style->smoothScalable) {                     for(int i = 0; i< style->count; ++i) {                         qDebug("                %d", style->pixelSizes[i].pixelSize);                     }                 }             }         }
endif|#
directive|endif
block|}
endif|#
directive|endif
comment|// QFONTDATABASE_DEBUG
block|}
end_function
begin_function
DECL|function|load
specifier|static
specifier|inline
name|void
name|load
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
init|=
name|QString
argument_list|()
parameter_list|,
name|int
init|=
operator|-
literal|1
parameter_list|)
block|{
name|populate_database
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// --------------------------------------------------------------------------------------
end_comment
begin_comment
comment|// font loader
end_comment
begin_comment
comment|// --------------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|initFontInfo
specifier|static
name|void
name|initFontInfo
parameter_list|(
name|QFontEngineWin
modifier|*
name|fe
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|,
name|HDC
name|fontHdc
parameter_list|,
name|int
name|dpi
parameter_list|)
block|{
name|fe
operator|->
name|fontDef
operator|=
name|request
expr_stmt|;
comment|// most settings are equal
name|HDC
name|dc
init|=
operator|(
operator|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferDevice
operator|)
operator|&&
name|fontHdc
operator|)
condition|?
name|fontHdc
else|:
name|shared_dc
argument_list|()
decl_stmt|;
name|SelectObject
argument_list|(
name|dc
argument_list|,
name|fe
operator|->
name|hfont
argument_list|)
expr_stmt|;
name|wchar_t
name|n
index|[
literal|64
index|]
decl_stmt|;
name|GetTextFace
argument_list|(
name|dc
argument_list|,
literal|64
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|fe
operator|->
name|fontDef
operator|.
name|family
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|fe
operator|->
name|fontDef
operator|.
name|fixedPitch
operator|=
operator|!
operator|(
name|fe
operator|->
name|tm
operator|.
name|tmPitchAndFamily
operator|&
name|TMPF_FIXED_PITCH
operator|)
expr_stmt|;
if|if
condition|(
name|fe
operator|->
name|fontDef
operator|.
name|pointSize
operator|<
literal|0
condition|)
block|{
name|fe
operator|->
name|fontDef
operator|.
name|pointSize
operator|=
name|fe
operator|->
name|fontDef
operator|.
name|pixelSize
operator|*
literal|72.
operator|/
name|dpi
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fe
operator|->
name|fontDef
operator|.
name|pixelSize
operator|==
operator|-
literal|1
condition|)
block|{
name|fe
operator|->
name|fontDef
operator|.
name|pixelSize
operator|=
name|qRound
argument_list|(
name|fe
operator|->
name|fontDef
operator|.
name|pointSize
operator|*
name|dpi
operator|/
literal|72.
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
end_if
begin_function
DECL|function|initFontInfo
specifier|static
name|void
name|initFontInfo
parameter_list|(
name|QFontEngineDirectWrite
modifier|*
name|fe
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|,
name|int
name|dpi
parameter_list|,
name|IDWriteFont
modifier|*
name|font
parameter_list|)
block|{
name|fe
operator|->
name|fontDef
operator|=
name|request
expr_stmt|;
name|IDWriteFontFamily
modifier|*
name|fontFamily
init|=
name|NULL
decl_stmt|;
name|HRESULT
name|hr
init|=
name|font
operator|->
name|GetFontFamily
argument_list|(
operator|&
name|fontFamily
argument_list|)
decl_stmt|;
name|IDWriteLocalizedStrings
modifier|*
name|familyNames
init|=
name|NULL
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
name|hr
operator|=
name|fontFamily
operator|->
name|GetFamilyNames
argument_list|(
operator|&
name|familyNames
argument_list|)
expr_stmt|;
name|UINT32
name|index
init|=
literal|0
decl_stmt|;
name|BOOL
name|exists
init|=
literal|false
decl_stmt|;
name|wchar_t
name|localeName
index|[
name|LOCALE_NAME_MAX_LENGTH
index|]
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|int
name|defaultLocaleSuccess
init|=
name|GetUserDefaultLocaleName
argument_list|(
name|localeName
argument_list|,
name|LOCALE_NAME_MAX_LENGTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultLocaleSuccess
condition|)
name|hr
operator|=
name|familyNames
operator|->
name|FindLocaleName
argument_list|(
name|localeName
argument_list|,
operator|&
name|index
argument_list|,
operator|&
name|exists
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
operator|&&
operator|!
name|exists
condition|)
name|hr
operator|=
name|familyNames
operator|->
name|FindLocaleName
argument_list|(
literal|L"en-us"
argument_list|,
operator|&
name|index
argument_list|,
operator|&
name|exists
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|exists
condition|)
name|index
operator|=
literal|0
expr_stmt|;
name|UINT32
name|length
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
name|hr
operator|=
name|familyNames
operator|->
name|GetStringLength
argument_list|(
name|index
argument_list|,
operator|&
name|length
argument_list|)
expr_stmt|;
name|wchar_t
modifier|*
name|name
init|=
operator|new
operator|(
name|std
operator|::
name|nothrow
operator|)
name|wchar_t
index|[
name|length
operator|+
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|NULL
condition|)
name|hr
operator|=
name|E_OUTOFMEMORY
expr_stmt|;
comment|// Get the family name.
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
name|hr
operator|=
name|familyNames
operator|->
name|GetString
argument_list|(
name|index
argument_list|,
name|name
argument_list|,
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
name|fe
operator|->
name|fontDef
operator|.
name|family
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|name
expr_stmt|;
if|if
condition|(
name|familyNames
operator|!=
name|NULL
condition|)
name|familyNames
operator|->
name|Release
argument_list|()
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
name|qErrnoWarning
argument_list|(
name|hr
argument_list|,
literal|"initFontInfo: Failed to get family name"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fe
operator|->
name|fontDef
operator|.
name|pointSize
operator|<
literal|0
condition|)
name|fe
operator|->
name|fontDef
operator|.
name|pointSize
operator|=
name|fe
operator|->
name|fontDef
operator|.
name|pixelSize
operator|*
literal|72.
operator|/
name|dpi
expr_stmt|;
elseif|else
if|if
condition|(
name|fe
operator|->
name|fontDef
operator|.
name|pixelSize
operator|==
operator|-
literal|1
condition|)
name|fe
operator|->
name|fontDef
operator|.
name|pixelSize
operator|=
name|qRound
argument_list|(
name|fe
operator|->
name|fontDef
operator|.
name|pointSize
operator|*
name|dpi
operator|/
literal|72.
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|other_tryFonts
specifier|static
specifier|const
name|char
modifier|*
name|other_tryFonts
index|[]
init|=
block|{
literal|"Arial"
block|,
literal|"MS UI Gothic"
block|,
literal|"Gulim"
block|,
literal|"SimSun"
block|,
literal|"PMingLiU"
block|,
literal|"Arial Unicode MS"
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|jp_tryFonts
specifier|static
specifier|const
name|char
modifier|*
name|jp_tryFonts
index|[]
init|=
block|{
literal|"MS UI Gothic"
block|,
literal|"Arial"
block|,
literal|"Gulim"
block|,
literal|"SimSun"
block|,
literal|"PMingLiU"
block|,
literal|"Arial Unicode MS"
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ch_CN_tryFonts
specifier|static
specifier|const
name|char
modifier|*
name|ch_CN_tryFonts
index|[]
init|=
block|{
literal|"SimSun"
block|,
literal|"Arial"
block|,
literal|"PMingLiU"
block|,
literal|"Gulim"
block|,
literal|"MS UI Gothic"
block|,
literal|"Arial Unicode MS"
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ch_TW_tryFonts
specifier|static
specifier|const
name|char
modifier|*
name|ch_TW_tryFonts
index|[]
init|=
block|{
literal|"PMingLiU"
block|,
literal|"Arial"
block|,
literal|"SimSun"
block|,
literal|"Gulim"
block|,
literal|"MS UI Gothic"
block|,
literal|"Arial Unicode MS"
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|kr_tryFonts
specifier|static
specifier|const
name|char
modifier|*
name|kr_tryFonts
index|[]
init|=
block|{
literal|"Gulim"
block|,
literal|"Arial"
block|,
literal|"PMingLiU"
block|,
literal|"SimSun"
block|,
literal|"MS UI Gothic"
block|,
literal|"Arial Unicode MS"
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|tryFonts
specifier|static
specifier|const
name|char
modifier|*
modifier|*
name|tryFonts
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
end_if
begin_function
DECL|function|fontNameSubstitute
specifier|static
name|QString
name|fontNameSubstitute
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|)
block|{
name|QLatin1String
name|key
argument_list|(
literal|"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\"
literal|"FontSubstitutes"
argument_list|)
decl_stmt|;
return|return
name|QSettings
argument_list|(
name|key
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|value
argument_list|(
name|familyName
argument_list|,
name|familyName
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|systemFont
specifier|static
specifier|inline
name|HFONT
name|systemFont
parameter_list|()
block|{
if|if
condition|(
name|stock_sysfont
operator|==
literal|0
condition|)
name|stock_sysfont
operator|=
operator|(
name|HFONT
operator|)
name|GetStockObject
argument_list|(
name|SYSTEM_FONT
argument_list|)
expr_stmt|;
return|return
name|stock_sysfont
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|DEFAULT_GUI_FONT
argument_list|)
end_if
begin_define
DECL|macro|DEFAULT_GUI_FONT
define|#
directive|define
name|DEFAULT_GUI_FONT
value|17
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|loadEngine
specifier|static
name|QFontEngine
modifier|*
name|loadEngine
parameter_list|(
name|int
name|script
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|,
name|HDC
name|fontHdc
parameter_list|,
name|int
name|dpi
parameter_list|,
name|bool
name|rawMode
parameter_list|,
specifier|const
name|QtFontDesc
modifier|*
name|desc
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|family_list
parameter_list|)
block|{
name|LOGFONT
name|lf
decl_stmt|;
name|memset
argument_list|(
operator|&
name|lf
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|LOGFONT
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|useDevice
init|=
operator|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferDevice
operator|)
operator|&&
name|fontHdc
decl_stmt|;
name|HDC
name|hdc
init|=
name|shared_dc
argument_list|()
decl_stmt|;
name|QString
name|font_name
init|=
name|desc
operator|!=
literal|0
condition|?
name|desc
operator|->
name|family
operator|->
name|name
else|:
name|request
operator|.
name|family
decl_stmt|;
if|if
condition|(
name|useDevice
condition|)
block|{
name|hdc
operator|=
name|fontHdc
expr_stmt|;
name|font_name
operator|=
name|request
operator|.
name|family
expr_stmt|;
block|}
name|bool
name|stockFont
init|=
literal|false
decl_stmt|;
name|bool
name|preferClearTypeAA
init|=
literal|false
decl_stmt|;
name|HFONT
name|hfont
init|=
literal|0
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
name|bool
name|useDirectWrite
init|=
operator|(
name|request
operator|.
name|hintingPreference
operator|==
name|QFont
operator|::
name|PreferNoHinting
operator|)
operator|||
operator|(
name|request
operator|.
name|hintingPreference
operator|==
name|QFont
operator|::
name|PreferVerticalHinting
operator|)
decl_stmt|;
name|IDWriteFont
modifier|*
name|directWriteFont
init|=
literal|0
decl_stmt|;
else|#
directive|else
name|bool
name|useDirectWrite
init|=
literal|false
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|rawMode
condition|)
block|{
comment|// will choose a stock font
name|int
name|f
decl_stmt|,
name|deffnt
init|=
name|SYSTEM_FONT
decl_stmt|;
name|QString
name|fam
init|=
name|desc
operator|!=
literal|0
condition|?
name|desc
operator|->
name|family
operator|->
name|name
operator|.
name|toLower
argument_list|()
else|:
name|request
operator|.
name|family
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|fam
operator|==
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
condition|)
name|f
operator|=
name|deffnt
expr_stmt|;
elseif|else
if|if
condition|(
name|fam
operator|==
name|QLatin1String
argument_list|(
literal|"system"
argument_list|)
condition|)
name|f
operator|=
name|SYSTEM_FONT
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
elseif|else
if|if
condition|(
name|fam
operator|==
name|QLatin1String
argument_list|(
literal|"system_fixed"
argument_list|)
condition|)
name|f
operator|=
name|SYSTEM_FIXED_FONT
expr_stmt|;
elseif|else
if|if
condition|(
name|fam
operator|==
name|QLatin1String
argument_list|(
literal|"ansi_fixed"
argument_list|)
condition|)
name|f
operator|=
name|ANSI_FIXED_FONT
expr_stmt|;
elseif|else
if|if
condition|(
name|fam
operator|==
name|QLatin1String
argument_list|(
literal|"ansi_var"
argument_list|)
condition|)
name|f
operator|=
name|ANSI_VAR_FONT
expr_stmt|;
elseif|else
if|if
condition|(
name|fam
operator|==
name|QLatin1String
argument_list|(
literal|"device_default"
argument_list|)
condition|)
name|f
operator|=
name|DEVICE_DEFAULT_FONT
expr_stmt|;
elseif|else
if|if
condition|(
name|fam
operator|==
name|QLatin1String
argument_list|(
literal|"oem_fixed"
argument_list|)
condition|)
name|f
operator|=
name|OEM_FIXED_FONT
expr_stmt|;
endif|#
directive|endif
elseif|else
if|if
condition|(
name|fam
index|[
literal|0
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'#'
argument_list|)
condition|)
name|f
operator|=
name|fam
operator|.
name|right
argument_list|(
name|fam
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
else|else
name|f
operator|=
name|deffnt
expr_stmt|;
name|hfont
operator|=
operator|(
name|HFONT
operator|)
name|GetStockObject
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hfont
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"QFontEngine::loadEngine: GetStockObject failed"
argument_list|)
expr_stmt|;
name|hfont
operator|=
name|systemFont
argument_list|()
expr_stmt|;
block|}
name|stockFont
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|int
name|hint
init|=
name|FF_DONTCARE
decl_stmt|;
switch|switch
condition|(
name|request
operator|.
name|styleHint
condition|)
block|{
case|case
name|QFont
operator|::
name|Helvetica
case|:
name|hint
operator|=
name|FF_SWISS
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|Times
case|:
name|hint
operator|=
name|FF_ROMAN
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|Courier
case|:
name|hint
operator|=
name|FF_MODERN
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|OldEnglish
case|:
name|hint
operator|=
name|FF_DECORATIVE
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|System
case|:
name|hint
operator|=
name|FF_MODERN
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|lf
operator|.
name|lfHeight
operator|=
operator|-
name|qRound
argument_list|(
name|request
operator|.
name|pixelSize
argument_list|)
expr_stmt|;
name|lf
operator|.
name|lfWidth
operator|=
literal|0
expr_stmt|;
name|lf
operator|.
name|lfEscapement
operator|=
literal|0
expr_stmt|;
name|lf
operator|.
name|lfOrientation
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|desc
operator|==
literal|0
operator|||
name|desc
operator|->
name|style
operator|->
name|key
operator|.
name|weight
operator|==
literal|50
condition|)
name|lf
operator|.
name|lfWeight
operator|=
name|FW_DONTCARE
expr_stmt|;
else|else
name|lf
operator|.
name|lfWeight
operator|=
operator|(
name|desc
operator|->
name|style
operator|->
name|key
operator|.
name|weight
operator|*
literal|900
operator|)
operator|/
literal|99
expr_stmt|;
name|lf
operator|.
name|lfItalic
operator|=
operator|(
name|desc
operator|!=
literal|0
operator|&&
name|desc
operator|->
name|style
operator|->
name|key
operator|.
name|style
operator|!=
name|QFont
operator|::
name|StyleNormal
operator|)
expr_stmt|;
name|lf
operator|.
name|lfCharSet
operator|=
name|DEFAULT_CHARSET
expr_stmt|;
name|int
name|strat
init|=
name|OUT_DEFAULT_PRECIS
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferBitmap
condition|)
block|{
name|strat
operator|=
name|OUT_RASTER_PRECIS
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferDevice
condition|)
block|{
name|strat
operator|=
name|OUT_DEVICE_PRECIS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferOutline
condition|)
block|{
name|strat
operator|=
name|OUT_OUTLINE_PRECIS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|ForceOutline
condition|)
block|{
name|strat
operator|=
name|OUT_TT_ONLY_PRECIS
expr_stmt|;
endif|#
directive|endif
block|}
name|lf
operator|.
name|lfOutPrecision
operator|=
name|strat
expr_stmt|;
name|int
name|qual
init|=
name|DEFAULT_QUALITY
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferMatch
condition|)
name|qual
operator|=
name|DRAFT_QUALITY
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
elseif|else
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferQuality
condition|)
name|qual
operator|=
name|PROOF_QUALITY
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferAntialias
condition|)
block|{
if|if
condition|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_XP
condition|)
block|{
name|qual
operator|=
name|CLEARTYPE_QUALITY
expr_stmt|;
name|preferClearTypeAA
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|qual
operator|=
name|ANTIALIASED_QUALITY
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoAntialias
condition|)
block|{
name|qual
operator|=
name|NONANTIALIASED_QUALITY
expr_stmt|;
block|}
name|lf
operator|.
name|lfQuality
operator|=
name|qual
expr_stmt|;
name|lf
operator|.
name|lfClipPrecision
operator|=
name|CLIP_DEFAULT_PRECIS
expr_stmt|;
name|lf
operator|.
name|lfPitchAndFamily
operator|=
name|DEFAULT_PITCH
operator||
name|hint
expr_stmt|;
name|QString
name|fam
init|=
name|font_name
decl_stmt|;
if|if
condition|(
name|fam
operator|.
name|isEmpty
argument_list|()
condition|)
name|fam
operator|=
name|QLatin1String
argument_list|(
literal|"MS Sans Serif"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|fam
operator|==
name|QLatin1String
argument_list|(
literal|"MS Sans Serif"
argument_list|)
operator|)
operator|&&
operator|(
name|request
operator|.
name|style
operator|==
name|QFont
operator|::
name|StyleItalic
operator|||
operator|(
operator|-
name|lf
operator|.
name|lfHeight
operator|>
literal|18
operator|&&
operator|-
name|lf
operator|.
name|lfHeight
operator|!=
literal|24
operator|)
operator|)
condition|)
block|{
name|fam
operator|=
name|QLatin1String
argument_list|(
literal|"Arial"
argument_list|)
expr_stmt|;
comment|// MS Sans Serif has bearing problems in italic, and does not scale
block|}
if|if
condition|(
name|fam
operator|==
name|QLatin1String
argument_list|(
literal|"Courier"
argument_list|)
operator|&&
operator|!
operator|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferBitmap
operator|)
condition|)
name|fam
operator|=
name|QLatin1String
argument_list|(
literal|"Courier New"
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|,
name|fam
operator|.
name|utf16
argument_list|()
argument_list|,
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
operator|*
name|qMin
argument_list|(
name|fam
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
literal|32
argument_list|)
argument_list|)
expr_stmt|;
comment|// 32 = Windows hard-coded
name|hfont
operator|=
name|CreateFontIndirect
argument_list|(
operator|&
name|lf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hfont
condition|)
name|qErrnoWarning
argument_list|(
literal|"QFontEngine::loadEngine: CreateFontIndirect failed"
argument_list|)
expr_stmt|;
name|stockFont
operator|=
operator|(
name|hfont
operator|==
literal|0
operator|)
expr_stmt|;
name|bool
name|ttf
init|=
literal|false
decl_stmt|;
name|int
name|avWidth
init|=
literal|0
decl_stmt|;
name|BOOL
name|res
decl_stmt|;
name|HGDIOBJ
name|oldObj
init|=
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hfont
argument_list|)
decl_stmt|;
name|TEXTMETRIC
name|tm
decl_stmt|;
name|res
operator|=
name|GetTextMetrics
argument_list|(
name|hdc
argument_list|,
operator|&
name|tm
argument_list|)
expr_stmt|;
name|avWidth
operator|=
name|tm
operator|.
name|tmAveCharWidth
expr_stmt|;
name|ttf
operator|=
name|tm
operator|.
name|tmPitchAndFamily
operator|&
name|TMPF_TRUETYPE
expr_stmt|;
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|oldObj
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ttf
operator|||
operator|!
name|useDirectWrite
condition|)
block|{
name|useDirectWrite
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|hfont
operator|&&
operator|(
operator|!
name|ttf
operator|||
name|request
operator|.
name|stretch
operator|!=
literal|100
operator|)
condition|)
block|{
name|DeleteObject
argument_list|(
name|hfont
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|res
condition|)
name|qErrnoWarning
argument_list|(
literal|"QFontEngine::loadEngine: GetTextMetrics failed"
argument_list|)
expr_stmt|;
name|lf
operator|.
name|lfWidth
operator|=
name|avWidth
operator|*
name|request
operator|.
name|stretch
operator|/
literal|100
expr_stmt|;
name|hfont
operator|=
name|CreateFontIndirect
argument_list|(
operator|&
name|lf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hfont
condition|)
name|qErrnoWarning
argument_list|(
literal|"QFontEngine::loadEngine: CreateFontIndirect with stretch failed"
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|Q_WS_WINCE
if|if
condition|(
name|hfont
operator|==
literal|0
condition|)
block|{
name|hfont
operator|=
operator|(
name|HFONT
operator|)
name|GetStockObject
argument_list|(
name|ANSI_VAR_FONT
argument_list|)
expr_stmt|;
name|stockFont
operator|=
literal|true
expr_stmt|;
block|}
else|#
directive|else
if|if
condition|(
name|hfont
operator|==
literal|0
condition|)
block|{
name|hfont
operator|=
operator|(
name|HFONT
operator|)
name|GetStockObject
argument_list|(
name|SYSTEM_FONT
argument_list|)
expr_stmt|;
name|stockFont
operator|=
literal|true
expr_stmt|;
block|}
endif|#
directive|endif
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
else|else
block|{
comment|// Default to false for DirectWrite (and re-enable once/if everything
comment|// turns out okay)
name|useDirectWrite
operator|=
literal|false
expr_stmt|;
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
if|if
condition|(
name|db
operator|->
name|directWriteFactory
operator|==
literal|0
condition|)
block|{
name|HRESULT
name|hr
init|=
name|DWriteCreateFactory
argument_list|(
name|DWRITE_FACTORY_TYPE_SHARED
argument_list|,
name|__uuidof
argument_list|(
name|IDWriteFactory
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
name|IUnknown
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|db
operator|->
name|directWriteFactory
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"QFontEngine::loadEngine: DWriteCreateFactory failed"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hr
operator|=
name|db
operator|->
name|directWriteFactory
operator|->
name|GetGdiInterop
argument_list|(
operator|&
name|db
operator|->
name|directWriteGdiInterop
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
name|qErrnoWarning
argument_list|(
literal|"QFontEngine::loadEngine: GetGdiInterop failed"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|db
operator|->
name|directWriteGdiInterop
operator|!=
literal|0
condition|)
block|{
name|QString
name|nameSubstitute
init|=
name|fontNameSubstitute
argument_list|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|)
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|,
name|nameSubstitute
operator|.
name|utf16
argument_list|()
argument_list|,
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
operator|*
name|qMin
argument_list|(
name|nameSubstitute
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
name|LF_FACESIZE
argument_list|)
argument_list|)
expr_stmt|;
name|HRESULT
name|hr
init|=
name|db
operator|->
name|directWriteGdiInterop
operator|->
name|CreateFontFromLOGFONT
argument_list|(
operator|&
name|lf
argument_list|,
operator|&
name|directWriteFont
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
name|qErrnoWarning
argument_list|(
literal|"QFontEngine::loadEngine: CreateFontFromLOGFONT failed "
literal|"for %ls (0x%lx)"
argument_list|,
name|lf
operator|.
name|lfFaceName
argument_list|,
name|hr
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|DeleteObject
argument_list|(
name|hfont
argument_list|)
expr_stmt|;
name|useDirectWrite
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
endif|#
directive|endif
block|}
name|QFontEngine
modifier|*
name|fe
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|useDirectWrite
condition|)
block|{
name|QFontEngineWin
modifier|*
name|few
init|=
operator|new
name|QFontEngineWin
argument_list|(
name|font_name
argument_list|,
name|hfont
argument_list|,
name|stockFont
argument_list|,
name|lf
argument_list|)
decl_stmt|;
if|if
condition|(
name|preferClearTypeAA
condition|)
name|few
operator|->
name|glyphFormat
operator|=
name|QFontEngineGlyphCache
operator|::
name|Raster_RGBMask
expr_stmt|;
comment|// Also check for OpenType tables when using complex scripts
comment|// ### TODO: This only works for scripts that require OpenType. More generally
comment|// for scripts that do not require OpenType we should just look at the list of
comment|// supported writing systems in the font's OS/2 table.
if|if
condition|(
name|scriptRequiresOpenType
argument_list|(
name|script
argument_list|)
condition|)
block|{
name|HB_Face
name|hbFace
init|=
name|few
operator|->
name|harfbuzzFace
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hbFace
operator|||
operator|!
name|hbFace
operator|->
name|supported_scripts
index|[
name|script
index|]
condition|)
block|{
name|FM_DEBUG
argument_list|(
literal|"  OpenType support missing for script\n"
argument_list|)
expr_stmt|;
operator|delete
name|few
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
name|initFontInfo
argument_list|(
name|few
argument_list|,
name|request
argument_list|,
name|fontHdc
argument_list|,
name|dpi
argument_list|)
expr_stmt|;
name|fe
operator|=
name|few
expr_stmt|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
else|else
block|{
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
name|IDWriteFontFace
modifier|*
name|directWriteFontFace
init|=
name|NULL
decl_stmt|;
name|HRESULT
name|hr
init|=
name|directWriteFont
operator|->
name|CreateFontFace
argument_list|(
operator|&
name|directWriteFontFace
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|QFontEngineDirectWrite
modifier|*
name|fedw
init|=
operator|new
name|QFontEngineDirectWrite
argument_list|(
name|db
operator|->
name|directWriteFactory
argument_list|,
name|directWriteFontFace
argument_list|,
name|request
operator|.
name|pixelSize
argument_list|)
decl_stmt|;
name|initFontInfo
argument_list|(
name|fedw
argument_list|,
name|request
argument_list|,
name|dpi
argument_list|,
name|directWriteFont
argument_list|)
expr_stmt|;
name|fe
operator|=
name|fedw
expr_stmt|;
block|}
else|else
block|{
name|qErrnoWarning
argument_list|(
name|hr
argument_list|,
literal|"QFontEngine::loadEngine: CreateFontFace failed"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|directWriteFont
operator|!=
literal|0
condition|)
name|directWriteFont
operator|->
name|Release
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|script
operator|==
name|QUnicodeTables
operator|::
name|Common
operator|&&
operator|!
operator|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoFontMerging
operator|)
operator|&&
name|desc
operator|!=
literal|0
operator|&&
operator|!
operator|(
name|desc
operator|->
name|family
operator|->
name|writingSystems
index|[
name|QFontDatabase
operator|::
name|Symbol
index|]
operator|&
name|QtFontFamily
operator|::
name|Supported
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|tryFonts
condition|)
block|{
name|LANGID
name|lid
init|=
name|GetUserDefaultLangID
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|lid
operator|&
literal|0xff
condition|)
block|{
case|case
name|LANG_CHINESE
case|:
comment|// Chinese (Taiwan)
if|if
condition|(
name|lid
operator|==
literal|0x0804
condition|)
comment|// Taiwan
name|tryFonts
operator|=
name|ch_TW_tryFonts
expr_stmt|;
else|else
name|tryFonts
operator|=
name|ch_CN_tryFonts
expr_stmt|;
break|break;
case|case
name|LANG_JAPANESE
case|:
name|tryFonts
operator|=
name|jp_tryFonts
expr_stmt|;
break|break;
case|case
name|LANG_KOREAN
case|:
name|tryFonts
operator|=
name|kr_tryFonts
expr_stmt|;
break|break;
default|default:
name|tryFonts
operator|=
name|other_tryFonts
expr_stmt|;
break|break;
block|}
block|}
name|QStringList
name|fm
init|=
name|QFontDatabase
argument_list|()
operator|.
name|families
argument_list|()
decl_stmt|;
name|QStringList
name|list
init|=
name|family_list
decl_stmt|;
specifier|const
name|char
modifier|*
modifier|*
name|tf
init|=
name|tryFonts
decl_stmt|;
while|while
condition|(
name|tf
operator|&&
operator|*
name|tf
condition|)
block|{
if|if
condition|(
name|fm
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
operator|*
name|tf
argument_list|)
argument_list|)
condition|)
name|list
operator|<<
name|QLatin1String
argument_list|(
operator|*
name|tf
argument_list|)
expr_stmt|;
operator|++
name|tf
expr_stmt|;
block|}
name|QFontEngine
modifier|*
name|mfe
init|=
operator|new
name|QFontEngineMultiWin
argument_list|(
name|fe
argument_list|,
name|list
argument_list|)
decl_stmt|;
name|mfe
operator|->
name|fontDef
operator|=
name|fe
operator|->
name|fontDef
expr_stmt|;
name|fe
operator|=
name|mfe
expr_stmt|;
block|}
return|return
name|fe
return|;
block|}
end_function
begin_function
DECL|function|qt_load_font_engine_win
name|QFontEngine
modifier|*
name|qt_load_font_engine_win
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|)
block|{
comment|// From qfont.cpp
specifier|extern
name|int
name|qt_defaultDpi
argument_list|()
decl_stmt|;
name|QFontCache
operator|::
name|Key
name|key
argument_list|(
name|request
argument_list|,
name|QUnicodeTables
operator|::
name|Common
argument_list|)
decl_stmt|;
name|QFontEngine
modifier|*
name|fe
init|=
name|QFontCache
operator|::
name|instance
argument_list|()
operator|->
name|findEngine
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|fe
operator|!=
literal|0
condition|)
return|return
name|fe
return|;
else|else
return|return
name|loadEngine
argument_list|(
name|QUnicodeTables
operator|::
name|Common
argument_list|,
name|request
argument_list|,
literal|0
argument_list|,
name|qt_defaultDpi
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|QStringList
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|styleHint
specifier|const
name|char
modifier|*
name|styleHint
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|stylehint
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|request
operator|.
name|styleHint
condition|)
block|{
case|case
name|QFont
operator|::
name|SansSerif
case|:
name|stylehint
operator|=
literal|"Arial"
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|Serif
case|:
name|stylehint
operator|=
literal|"Times New Roman"
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|TypeWriter
case|:
name|stylehint
operator|=
literal|"Courier New"
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|request
operator|.
name|fixedPitch
condition|)
name|stylehint
operator|=
literal|"Courier New"
expr_stmt|;
break|break;
block|}
return|return
name|stylehint
return|;
block|}
end_function
begin_function
DECL|function|loadWin
specifier|static
name|QFontEngine
modifier|*
name|loadWin
parameter_list|(
specifier|const
name|QFontPrivate
modifier|*
name|d
parameter_list|,
name|int
name|script
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|req
parameter_list|)
block|{
comment|// list of families to try
name|QStringList
name|family_list
init|=
name|familyList
argument_list|(
name|req
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|stylehint
init|=
name|styleHint
argument_list|(
name|d
operator|->
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|stylehint
condition|)
name|family_list
operator|<<
name|QLatin1String
argument_list|(
name|stylehint
argument_list|)
expr_stmt|;
comment|// append the default fallback font for the specified script
comment|// family_list<< ... ; ###########
comment|// add the default family
name|QString
name|defaultFamily
init|=
name|QApplication
operator|::
name|font
argument_list|()
operator|.
name|family
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|family_list
operator|.
name|contains
argument_list|(
name|defaultFamily
argument_list|)
condition|)
name|family_list
operator|<<
name|defaultFamily
expr_stmt|;
comment|// add QFont::defaultFamily() to the list, for compatibility with
comment|// previous versions
name|family_list
operator|<<
name|QApplication
operator|::
name|font
argument_list|()
operator|.
name|defaultFamily
argument_list|()
expr_stmt|;
comment|// null family means find the first font matching the specified script
name|family_list
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QtFontDesc
name|desc
decl_stmt|;
name|QFontEngine
modifier|*
name|fe
init|=
literal|0
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|blacklistedFamilies
decl_stmt|;
while|while
condition|(
operator|!
name|fe
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|family_list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|family
decl_stmt|,
name|foundry
decl_stmt|;
name|parseFontName
argument_list|(
name|family_list
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|foundry
argument_list|,
name|family
argument_list|)
expr_stmt|;
name|FM_DEBUG
argument_list|(
literal|"loadWin:>>>>>>>>>>>>>>trying to match '%s'"
argument_list|,
name|family
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QT_PREPEND_NAMESPACE
argument_list|(
name|match
argument_list|)
argument_list|(
name|script
argument_list|,
name|req
argument_list|,
name|family
argument_list|,
name|foundry
argument_list|,
operator|-
literal|1
argument_list|,
operator|&
name|desc
argument_list|,
name|blacklistedFamilies
argument_list|)
expr_stmt|;
if|if
condition|(
name|desc
operator|.
name|family
condition|)
break|break;
block|}
if|if
condition|(
operator|!
name|desc
operator|.
name|family
condition|)
break|break;
name|fe
operator|=
name|loadEngine
argument_list|(
name|script
argument_list|,
name|req
argument_list|,
name|d
operator|->
name|hdc
argument_list|,
name|d
operator|->
name|dpi
argument_list|,
name|d
operator|->
name|rawMode
argument_list|,
operator|&
name|desc
argument_list|,
name|family_list
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fe
condition|)
name|blacklistedFamilies
operator|.
name|append
argument_list|(
name|desc
operator|.
name|familyIndex
argument_list|)
expr_stmt|;
block|}
return|return
name|fe
return|;
block|}
end_function
begin_function
DECL|function|load
name|void
name|QFontDatabase
operator|::
name|load
parameter_list|(
specifier|const
name|QFontPrivate
modifier|*
name|d
parameter_list|,
name|int
name|script
parameter_list|)
block|{
comment|// sanity checks
if|if
condition|(
operator|!
name|qApp
condition|)
name|qWarning
argument_list|(
literal|"QFontDatabase::load: Must construct QApplication first"
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|script
operator|>=
literal|0
operator|&&
name|script
operator|<
name|QUnicodeTables
operator|::
name|ScriptCount
argument_list|)
expr_stmt|;
comment|// normalize the request to get better caching
name|QFontDef
name|req
init|=
name|d
operator|->
name|request
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|pixelSize
operator|<=
literal|0
condition|)
name|req
operator|.
name|pixelSize
operator|=
name|floor
argument_list|(
operator|(
literal|100.0
operator|*
name|req
operator|.
name|pointSize
operator|*
name|d
operator|->
name|dpi
operator|)
operator|/
literal|72.
operator|+
literal|0.5
argument_list|)
operator|/
literal|100
expr_stmt|;
if|if
condition|(
name|req
operator|.
name|pixelSize
operator|<
literal|1
condition|)
name|req
operator|.
name|pixelSize
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|req
operator|.
name|weight
operator|==
literal|0
condition|)
name|req
operator|.
name|weight
operator|=
name|QFont
operator|::
name|Normal
expr_stmt|;
if|if
condition|(
name|req
operator|.
name|stretch
operator|==
literal|0
condition|)
name|req
operator|.
name|stretch
operator|=
literal|100
expr_stmt|;
name|QFontCache
operator|::
name|Key
name|key
argument_list|(
name|req
argument_list|,
name|d
operator|->
name|rawMode
condition|?
name|QUnicodeTables
operator|::
name|Common
else|:
name|script
argument_list|,
name|d
operator|->
name|screen
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|engineData
condition|)
name|getEngineData
argument_list|(
name|d
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// the cached engineData could have already loaded the engine we want
if|if
condition|(
name|d
operator|->
name|engineData
operator|->
name|engines
index|[
name|script
index|]
condition|)
return|return;
name|QFontEngine
modifier|*
name|fe
init|=
name|QFontCache
operator|::
name|instance
argument_list|()
operator|->
name|findEngine
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// set it to the actual pointsize, so QFontInfo will do the right thing
if|if
condition|(
name|req
operator|.
name|pointSize
operator|<
literal|0
condition|)
name|req
operator|.
name|pointSize
operator|=
name|req
operator|.
name|pixelSize
operator|*
literal|72.
operator|/
name|d
operator|->
name|dpi
expr_stmt|;
if|if
condition|(
operator|!
name|fe
condition|)
block|{
if|if
condition|(
name|qt_enable_test_font
operator|&&
name|req
operator|.
name|family
operator|==
name|QLatin1String
argument_list|(
literal|"__Qt__Box__Engine__"
argument_list|)
condition|)
block|{
name|fe
operator|=
operator|new
name|QTestFontEngine
argument_list|(
name|req
operator|.
name|pixelSize
argument_list|)
expr_stmt|;
name|fe
operator|->
name|fontDef
operator|=
name|req
expr_stmt|;
block|}
else|else
block|{
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|privateDb
argument_list|()
operator|->
name|count
condition|)
name|initializeDb
argument_list|()
expr_stmt|;
name|fe
operator|=
name|loadWin
argument_list|(
name|d
argument_list|,
name|script
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fe
condition|)
block|{
name|fe
operator|=
operator|new
name|QFontEngineBox
argument_list|(
name|req
operator|.
name|pixelSize
argument_list|)
expr_stmt|;
name|fe
operator|->
name|fontDef
operator|=
name|QFontDef
argument_list|()
expr_stmt|;
block|}
block|}
name|d
operator|->
name|engineData
operator|->
name|engines
index|[
name|script
index|]
operator|=
name|fe
expr_stmt|;
name|fe
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|QFontCache
operator|::
name|instance
argument_list|()
operator|->
name|insertEngine
argument_list|(
name|key
argument_list|,
name|fe
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|FR_PRIVATE
argument_list|)
end_if
begin_define
DECL|macro|FR_PRIVATE
define|#
directive|define
name|FR_PRIVATE
value|0x10
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|PtrAddFontResourceExW
typedef|typedef
name|int
function_decl|(
name|WINAPI
modifier|*
name|PtrAddFontResourceExW
function_decl|)
parameter_list|(
name|LPCWSTR
parameter_list|,
name|DWORD
parameter_list|,
name|PVOID
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrAddFontMemResourceEx
typedef|typedef
name|HANDLE
function_decl|(
name|WINAPI
modifier|*
name|PtrAddFontMemResourceEx
function_decl|)
parameter_list|(
name|PVOID
parameter_list|,
name|DWORD
parameter_list|,
name|PVOID
parameter_list|,
name|DWORD
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrRemoveFontResourceExW
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|PtrRemoveFontResourceExW
function_decl|)
parameter_list|(
name|LPCWSTR
parameter_list|,
name|DWORD
parameter_list|,
name|PVOID
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrRemoveFontMemResourceEx
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|PtrRemoveFontMemResourceEx
function_decl|)
parameter_list|(
name|HANDLE
parameter_list|)
function_decl|;
end_typedef
begin_function
DECL|function|getTrueTypeFontOffsets
specifier|static
name|QList
argument_list|<
name|quint32
argument_list|>
name|getTrueTypeFontOffsets
parameter_list|(
specifier|const
name|uchar
modifier|*
name|fontData
parameter_list|)
block|{
name|QList
argument_list|<
name|quint32
argument_list|>
name|offsets
decl_stmt|;
specifier|const
name|quint32
name|headerTag
init|=
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|fontData
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerTag
operator|!=
name|MAKE_TAG
argument_list|(
literal|'t'
argument_list|,
literal|'t'
argument_list|,
literal|'c'
argument_list|,
literal|'f'
argument_list|)
condition|)
block|{
if|if
condition|(
name|headerTag
operator|!=
name|MAKE_TAG
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|&&
name|headerTag
operator|!=
name|MAKE_TAG
argument_list|(
literal|'O'
argument_list|,
literal|'T'
argument_list|,
literal|'T'
argument_list|,
literal|'O'
argument_list|)
operator|&&
name|headerTag
operator|!=
name|MAKE_TAG
argument_list|(
literal|'t'
argument_list|,
literal|'r'
argument_list|,
literal|'u'
argument_list|,
literal|'e'
argument_list|)
operator|&&
name|headerTag
operator|!=
name|MAKE_TAG
argument_list|(
literal|'t'
argument_list|,
literal|'y'
argument_list|,
literal|'p'
argument_list|,
literal|'1'
argument_list|)
condition|)
return|return
name|offsets
return|;
name|offsets
operator|<<
literal|0
expr_stmt|;
return|return
name|offsets
return|;
block|}
specifier|const
name|quint32
name|numFonts
init|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|fontData
operator|+
literal|8
argument_list|)
decl_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFonts
condition|;
operator|++
name|i
control|)
block|{
name|offsets
operator|<<
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|fontData
operator|+
literal|12
operator|+
name|i
operator|*
literal|4
argument_list|)
expr_stmt|;
block|}
return|return
name|offsets
return|;
block|}
end_function
begin_function
DECL|function|getFontTable
specifier|static
name|void
name|getFontTable
parameter_list|(
specifier|const
name|uchar
modifier|*
name|fileBegin
parameter_list|,
specifier|const
name|uchar
modifier|*
name|data
parameter_list|,
name|quint32
name|tag
parameter_list|,
specifier|const
name|uchar
modifier|*
modifier|*
name|table
parameter_list|,
name|quint32
modifier|*
name|length
parameter_list|)
block|{
specifier|const
name|quint16
name|numTables
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|data
operator|+
literal|4
argument_list|)
decl_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTables
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|quint32
name|offset
init|=
literal|12
operator|+
literal|16
operator|*
name|i
decl_stmt|;
if|if
condition|(
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|data
operator|+
name|offset
argument_list|)
operator|==
name|tag
condition|)
block|{
operator|*
name|table
operator|=
name|fileBegin
operator|+
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|data
operator|+
name|offset
operator|+
literal|8
argument_list|)
expr_stmt|;
operator|*
name|length
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|data
operator|+
name|offset
operator|+
literal|12
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
operator|*
name|table
operator|=
literal|0
expr_stmt|;
operator|*
name|length
operator|=
literal|0
expr_stmt|;
return|return;
block|}
end_function
begin_function
DECL|function|getFamiliesAndSignatures
specifier|static
name|void
name|getFamiliesAndSignatures
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|,
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
modifier|*
name|appFont
parameter_list|)
block|{
specifier|const
name|uchar
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|fontData
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|quint32
argument_list|>
name|offsets
init|=
name|getTrueTypeFontOffsets
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|offsets
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|offsets
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|uchar
modifier|*
name|font
init|=
name|data
operator|+
name|offsets
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|table
decl_stmt|;
name|quint32
name|length
decl_stmt|;
name|getFontTable
argument_list|(
name|data
argument_list|,
name|font
argument_list|,
name|MAKE_TAG
argument_list|(
literal|'n'
argument_list|,
literal|'a'
argument_list|,
literal|'m'
argument_list|,
literal|'e'
argument_list|)
argument_list|,
operator|&
name|table
argument_list|,
operator|&
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|table
condition|)
continue|continue;
name|QString
name|name
init|=
name|getEnglishName
argument_list|(
name|table
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|appFont
operator|->
name|families
operator|<<
name|name
expr_stmt|;
name|FONTSIGNATURE
name|signature
decl_stmt|;
name|getFontTable
argument_list|(
name|data
argument_list|,
name|font
argument_list|,
name|MAKE_TAG
argument_list|(
literal|'O'
argument_list|,
literal|'S'
argument_list|,
literal|'/'
argument_list|,
literal|'2'
argument_list|)
argument_list|,
operator|&
name|table
argument_list|,
operator|&
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|&&
name|length
operator|>=
literal|86
condition|)
block|{
comment|// See also qfontdatabase_mac.cpp, offsets taken from OS/2 table in the TrueType spec
name|signature
operator|.
name|fsUsb
index|[
literal|0
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|table
operator|+
literal|42
argument_list|)
expr_stmt|;
name|signature
operator|.
name|fsUsb
index|[
literal|1
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|table
operator|+
literal|46
argument_list|)
expr_stmt|;
name|signature
operator|.
name|fsUsb
index|[
literal|2
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|table
operator|+
literal|50
argument_list|)
expr_stmt|;
name|signature
operator|.
name|fsUsb
index|[
literal|3
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|table
operator|+
literal|54
argument_list|)
expr_stmt|;
name|signature
operator|.
name|fsCsb
index|[
literal|0
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|table
operator|+
literal|78
argument_list|)
expr_stmt|;
name|signature
operator|.
name|fsCsb
index|[
literal|1
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|table
operator|+
literal|82
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|memset
argument_list|(
operator|&
name|signature
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|signature
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|appFont
operator|->
name|signatures
operator|<<
name|signature
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|registerFont
specifier|static
name|void
name|registerFont
parameter_list|(
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
modifier|*
name|fnt
parameter_list|)
block|{
if|if
condition|(
operator|!
name|fnt
operator|->
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|PtrAddFontMemResourceEx
name|ptrAddFontMemResourceEx
init|=
operator|(
name|PtrAddFontMemResourceEx
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"gdi32"
argument_list|)
argument_list|,
literal|"AddFontMemResourceEx"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ptrAddFontMemResourceEx
condition|)
return|return;
endif|#
directive|endif
name|getFamiliesAndSignatures
argument_list|(
name|fnt
operator|->
name|data
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
if|if
condition|(
name|fnt
operator|->
name|families
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|HANDLE
name|handle
init|=
literal|0
decl_stmt|;
block|{
ifdef|#
directive|ifdef
name|QT_NO_TEMPORARYFILE
name|wchar_t
name|lpBuffer
index|[
name|MAX_PATH
index|]
decl_stmt|;
name|GetTempPath
argument_list|(
name|MAX_PATH
argument_list|,
name|lpBuffer
argument_list|)
expr_stmt|;
name|QString
name|s
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|lpBuffer
argument_list|)
decl_stmt|;
name|QFile
name|tempfile
argument_list|(
name|s
operator|+
name|QLatin1String
argument_list|(
literal|"/font"
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|GetTickCount
argument_list|()
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|".ttf"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tempfile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
condition|)
else|#
directive|else
name|QTemporaryFile
name|tempfile
argument_list|(
name|QLatin1String
argument_list|(
literal|"XXXXXXXX.ttf"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tempfile
operator|.
name|open
argument_list|()
condition|)
endif|#
directive|endif
comment|// QT_NO_TEMPORARYFILE
return|return;
if|if
condition|(
name|tempfile
operator|.
name|write
argument_list|(
name|fnt
operator|->
name|data
argument_list|)
operator|==
operator|-
literal|1
condition|)
return|return;
ifndef|#
directive|ifndef
name|QT_NO_TEMPORARYFILE
name|tempfile
operator|.
name|setAutoRemove
argument_list|(
literal|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|fnt
operator|->
name|fileName
operator|=
name|QFileInfo
argument_list|(
name|tempfile
operator|.
name|fileName
argument_list|()
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|AddFontResource
argument_list|(
operator|(
name|LPCWSTR
operator|)
name|fnt
operator|->
name|fileName
operator|.
name|utf16
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
name|QFile
argument_list|(
name|fnt
operator|->
name|fileName
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return;
block|}
else|#
directive|else
name|DWORD
name|dummy
init|=
literal|0
decl_stmt|;
name|HANDLE
name|handle
init|=
name|ptrAddFontMemResourceEx
argument_list|(
operator|(
name|void
operator|*
operator|)
name|fnt
operator|->
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|fnt
operator|->
name|data
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|&
name|dummy
argument_list|)
decl_stmt|;
if|if
condition|(
name|handle
operator|==
literal|0
condition|)
return|return;
endif|#
directive|endif
comment|// Q_OS_WINCE
name|fnt
operator|->
name|handle
operator|=
name|handle
expr_stmt|;
name|fnt
operator|->
name|data
operator|=
name|QByteArray
argument_list|()
expr_stmt|;
name|fnt
operator|->
name|memoryFont
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|QFile
name|f
argument_list|(
name|fnt
operator|->
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return;
name|QByteArray
name|data
init|=
name|f
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
name|getFamiliesAndSignatures
argument_list|(
name|data
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QFileInfo
name|fileinfo
argument_list|(
name|fnt
operator|->
name|fileName
argument_list|)
decl_stmt|;
name|fnt
operator|->
name|fileName
operator|=
name|fileinfo
operator|.
name|absoluteFilePath
argument_list|()
expr_stmt|;
if|if
condition|(
name|AddFontResource
argument_list|(
operator|(
name|LPCWSTR
operator|)
name|fnt
operator|->
name|fileName
operator|.
name|utf16
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
return|return;
else|#
directive|else
name|PtrAddFontResourceExW
name|ptrAddFontResourceExW
init|=
operator|(
name|PtrAddFontResourceExW
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"gdi32"
argument_list|)
argument_list|,
literal|"AddFontResourceExW"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ptrAddFontResourceExW
operator|||
name|ptrAddFontResourceExW
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|fnt
operator|->
name|fileName
operator|.
name|utf16
argument_list|()
argument_list|,
name|FR_PRIVATE
argument_list|,
literal|0
argument_list|)
operator|==
literal|0
condition|)
return|return;
endif|#
directive|endif
comment|// Q_OS_WINCE
name|fnt
operator|->
name|memoryFont
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|removeApplicationFont
name|bool
name|QFontDatabase
operator|::
name|removeApplicationFont
parameter_list|(
name|int
name|handle
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
if|if
condition|(
name|handle
operator|<
literal|0
operator|||
name|handle
operator|>=
name|db
operator|->
name|applicationFonts
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
specifier|const
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
name|font
init|=
name|db
operator|->
name|applicationFonts
operator|.
name|at
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|db
operator|->
name|applicationFonts
index|[
name|handle
index|]
operator|=
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
argument_list|()
expr_stmt|;
if|if
condition|(
name|font
operator|.
name|memoryFont
condition|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|bool
name|removeSucceeded
init|=
name|RemoveFontResource
argument_list|(
operator|(
name|LPCWSTR
operator|)
name|font
operator|.
name|fileName
operator|.
name|utf16
argument_list|()
argument_list|)
decl_stmt|;
name|QFile
name|tempfile
argument_list|(
name|font
operator|.
name|fileName
argument_list|)
decl_stmt|;
name|tempfile
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|removeSucceeded
condition|)
return|return
literal|false
return|;
else|#
directive|else
name|PtrRemoveFontMemResourceEx
name|ptrRemoveFontMemResourceEx
init|=
operator|(
name|PtrRemoveFontMemResourceEx
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"gdi32"
argument_list|)
argument_list|,
literal|"RemoveFontMemResourceEx"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ptrRemoveFontMemResourceEx
operator|||
operator|!
name|ptrRemoveFontMemResourceEx
argument_list|(
name|font
operator|.
name|handle
argument_list|)
condition|)
return|return
literal|false
return|;
endif|#
directive|endif
comment|// Q_OS_WINCE
block|}
else|else
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
if|if
condition|(
operator|!
name|RemoveFontResource
argument_list|(
operator|(
name|LPCWSTR
operator|)
name|font
operator|.
name|fileName
operator|.
name|utf16
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
else|#
directive|else
name|PtrRemoveFontResourceExW
name|ptrRemoveFontResourceExW
init|=
operator|(
name|PtrRemoveFontResourceExW
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"gdi32"
argument_list|)
argument_list|,
literal|"RemoveFontResourceExW"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ptrRemoveFontResourceExW
operator|||
operator|!
name|ptrRemoveFontResourceExW
argument_list|(
operator|(
name|LPCWSTR
operator|)
name|font
operator|.
name|fileName
operator|.
name|utf16
argument_list|()
argument_list|,
name|FR_PRIVATE
argument_list|,
literal|0
argument_list|)
condition|)
return|return
literal|false
return|;
endif|#
directive|endif
comment|// Q_OS_WINCE
block|}
name|db
operator|->
name|invalidate
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|removeAllApplicationFonts
name|bool
name|QFontDatabase
operator|::
name|removeAllApplicationFonts
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|db
operator|->
name|applicationFonts
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
operator|!
name|removeApplicationFont
argument_list|(
name|i
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|supportsThreadedFontRendering
name|bool
name|QFontDatabase
operator|::
name|supportsThreadedFontRendering
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
