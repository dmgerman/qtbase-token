begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfont.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qpaintdevice.h"
end_include
begin_include
include|#
directive|include
file|"qfontdatabase.h"
end_include
begin_include
include|#
directive|include
file|"qfontmetrics.h"
end_include
begin_include
include|#
directive|include
file|"qfontinfo.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qhash.h"
end_include
begin_include
include|#
directive|include
file|"qdatastream.h"
end_include
begin_include
include|#
directive|include
file|"qguiapplication.h"
end_include
begin_include
include|#
directive|include
file|"qstringlist.h"
end_include
begin_include
include|#
directive|include
file|"qscreen.h"
end_include
begin_include
include|#
directive|include
file|"qthread.h"
end_include
begin_include
include|#
directive|include
file|"qthreadstorage.h"
end_include
begin_include
include|#
directive|include
file|<private/qunicodetables_p.h>
end_include
begin_include
include|#
directive|include
file|"qfont_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qfontengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpainter_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qtextengine_p.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qplatformscreen_qpa.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMutexLocker>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMutex>
end_include
begin_comment
comment|// #define QFONTCACHE_DEBUG
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QFONTCACHE_DEBUG
end_ifdef
begin_define
DECL|macro|FC_DEBUG
define|#
directive|define
name|FC_DEBUG
value|qDebug
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|FC_DEBUG
define|#
directive|define
name|FC_DEBUG
value|if (false) qDebug
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|exactMatch
name|bool
name|QFontDef
operator|::
name|exactMatch
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|other
parameter_list|)
specifier|const
block|{
comment|/*       QFontDef comparison is more complicated than just simple       per-member comparisons.        When comparing point/pixel sizes, either point or pixelsize       could be -1.  in This case we have to compare the non negative       size value.        This test will fail if the point-sizes differ by 1/2 point or       more or they do not round to the same value.  We have to do this       since our API still uses 'int' point-sizes in the API, but store       deci-point-sizes internally.        To compare the family members, we need to parse the font names       and compare the family/foundry strings separately.  This allows       us to compare e.g. "Helvetica" and "Helvetica [Adobe]" with       positive results.     */
if|if
condition|(
name|pixelSize
operator|!=
operator|-
literal|1
operator|&&
name|other
operator|.
name|pixelSize
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|pixelSize
operator|!=
name|other
operator|.
name|pixelSize
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|pointSize
operator|!=
operator|-
literal|1
operator|&&
name|other
operator|.
name|pointSize
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|pointSize
operator|!=
name|other
operator|.
name|pointSize
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|ignorePitch
operator|&&
operator|!
name|other
operator|.
name|ignorePitch
operator|&&
name|fixedPitch
operator|!=
name|other
operator|.
name|fixedPitch
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|stretch
operator|!=
literal|0
operator|&&
name|other
operator|.
name|stretch
operator|!=
literal|0
operator|&&
name|stretch
operator|!=
name|other
operator|.
name|stretch
condition|)
return|return
literal|false
return|;
name|QString
name|this_family
decl_stmt|,
name|this_foundry
decl_stmt|,
name|other_family
decl_stmt|,
name|other_foundry
decl_stmt|;
name|QFontDatabase
operator|::
name|parseFontName
argument_list|(
name|family
argument_list|,
name|this_foundry
argument_list|,
name|this_family
argument_list|)
expr_stmt|;
name|QFontDatabase
operator|::
name|parseFontName
argument_list|(
name|other
operator|.
name|family
argument_list|,
name|other_foundry
argument_list|,
name|other_family
argument_list|)
expr_stmt|;
name|this_family
operator|=
name|QFontDatabase
operator|::
name|resolveFontFamilyAlias
argument_list|(
name|this_family
argument_list|)
expr_stmt|;
name|other_family
operator|=
name|QFontDatabase
operator|::
name|resolveFontFamilyAlias
argument_list|(
name|other_family
argument_list|)
expr_stmt|;
return|return
operator|(
name|styleHint
operator|==
name|other
operator|.
name|styleHint
operator|&&
name|styleStrategy
operator|==
name|other
operator|.
name|styleStrategy
operator|&&
name|weight
operator|==
name|other
operator|.
name|weight
operator|&&
name|style
operator|==
name|other
operator|.
name|style
operator|&&
name|this_family
operator|==
name|other_family
operator|&&
operator|(
name|styleName
operator|.
name|isEmpty
argument_list|()
operator|||
name|other
operator|.
name|styleName
operator|.
name|isEmpty
argument_list|()
operator|||
name|styleName
operator|==
name|other
operator|.
name|styleName
operator|)
operator|&&
operator|(
name|this_foundry
operator|.
name|isEmpty
argument_list|()
operator|||
name|other_foundry
operator|.
name|isEmpty
argument_list|()
operator|||
name|this_foundry
operator|==
name|other_foundry
operator|)
operator|)
return|;
block|}
end_function
begin_decl_stmt
specifier|extern
name|bool
name|qt_is_gui_used
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_defaultDpiX
name|Q_GUI_EXPORT
name|int
name|qt_defaultDpiX
parameter_list|()
block|{
if|if
condition|(
name|qApp
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_Use96Dpi
argument_list|)
condition|)
return|return
literal|96
return|;
if|if
condition|(
operator|!
name|qt_is_gui_used
condition|)
return|return
literal|75
return|;
if|if
condition|(
specifier|const
name|QScreen
modifier|*
name|screen
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
condition|)
return|return
name|qRound
argument_list|(
name|screen
operator|->
name|logicalDotsPerInchX
argument_list|()
argument_list|)
return|;
comment|//PI has not been initialised, or it is being initialised. Give a default dpi
return|return
literal|100
return|;
block|}
end_function
begin_function
DECL|function|qt_defaultDpiY
name|Q_GUI_EXPORT
name|int
name|qt_defaultDpiY
parameter_list|()
block|{
if|if
condition|(
name|qApp
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_Use96Dpi
argument_list|)
condition|)
return|return
literal|96
return|;
if|if
condition|(
operator|!
name|qt_is_gui_used
condition|)
return|return
literal|75
return|;
if|if
condition|(
specifier|const
name|QScreen
modifier|*
name|screen
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
condition|)
return|return
name|qRound
argument_list|(
name|screen
operator|->
name|logicalDotsPerInchY
argument_list|()
argument_list|)
return|;
comment|//PI has not been initialised, or it is being initialised. Give a default dpi
return|return
literal|100
return|;
block|}
end_function
begin_function
DECL|function|qt_defaultDpi
name|Q_GUI_EXPORT
name|int
name|qt_defaultDpi
parameter_list|()
block|{
return|return
name|qt_defaultDpiY
argument_list|()
return|;
block|}
end_function
begin_constructor
DECL|function|QFontPrivate
name|QFontPrivate
operator|::
name|QFontPrivate
parameter_list|()
member_init_list|:
name|engineData
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|dpi
argument_list|(
name|qt_defaultDpi
argument_list|()
argument_list|)
member_init_list|,
name|screen
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|rawMode
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|underline
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|overline
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|strikeOut
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|kerning
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|capital
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|letterSpacingIsAbsolute
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|scFont
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|QFontPrivate
name|QFontPrivate
operator|::
name|QFontPrivate
parameter_list|(
specifier|const
name|QFontPrivate
modifier|&
name|other
parameter_list|)
member_init_list|:
name|request
argument_list|(
name|other
operator|.
name|request
argument_list|)
member_init_list|,
name|engineData
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|dpi
argument_list|(
name|other
operator|.
name|dpi
argument_list|)
member_init_list|,
name|screen
argument_list|(
name|other
operator|.
name|screen
argument_list|)
member_init_list|,
name|rawMode
argument_list|(
name|other
operator|.
name|rawMode
argument_list|)
member_init_list|,
name|underline
argument_list|(
name|other
operator|.
name|underline
argument_list|)
member_init_list|,
name|overline
argument_list|(
name|other
operator|.
name|overline
argument_list|)
member_init_list|,
name|strikeOut
argument_list|(
name|other
operator|.
name|strikeOut
argument_list|)
member_init_list|,
name|kerning
argument_list|(
name|other
operator|.
name|kerning
argument_list|)
member_init_list|,
name|capital
argument_list|(
name|other
operator|.
name|capital
argument_list|)
member_init_list|,
name|letterSpacingIsAbsolute
argument_list|(
name|other
operator|.
name|letterSpacingIsAbsolute
argument_list|)
member_init_list|,
name|letterSpacing
argument_list|(
name|other
operator|.
name|letterSpacing
argument_list|)
member_init_list|,
name|wordSpacing
argument_list|(
name|other
operator|.
name|wordSpacing
argument_list|)
member_init_list|,
name|scFont
argument_list|(
name|other
operator|.
name|scFont
argument_list|)
block|{
if|if
condition|(
name|scFont
operator|&&
name|scFont
operator|!=
name|this
condition|)
name|scFont
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
end_constructor
begin_destructor
DECL|function|~QFontPrivate
name|QFontPrivate
operator|::
name|~
name|QFontPrivate
parameter_list|()
block|{
if|if
condition|(
name|engineData
condition|)
name|engineData
operator|->
name|ref
operator|.
name|deref
argument_list|()
expr_stmt|;
name|engineData
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|scFont
operator|&&
name|scFont
operator|!=
name|this
condition|)
name|scFont
operator|->
name|ref
operator|.
name|deref
argument_list|()
expr_stmt|;
name|scFont
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function_decl
specifier|extern
name|QMutex
modifier|*
name|qt_fontdatabase_mutex
parameter_list|()
function_decl|;
end_function_decl
begin_define
DECL|macro|QT_FONT_ENGINE_FROM_DATA
define|#
directive|define
name|QT_FONT_ENGINE_FROM_DATA
parameter_list|(
name|data
parameter_list|,
name|script
parameter_list|)
value|data->engines[script]
end_define
begin_function
DECL|function|engineForScript
name|QFontEngine
modifier|*
name|QFontPrivate
operator|::
name|engineForScript
parameter_list|(
name|int
name|script
parameter_list|)
specifier|const
block|{
name|QMutexLocker
name|locker
argument_list|(
name|qt_fontdatabase_mutex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|script
operator|>=
name|QUnicodeTables
operator|::
name|Inherited
condition|)
name|script
operator|=
name|QUnicodeTables
operator|::
name|Common
expr_stmt|;
if|if
condition|(
name|engineData
operator|&&
name|engineData
operator|->
name|fontCache
operator|!=
name|QFontCache
operator|::
name|instance
argument_list|()
condition|)
block|{
comment|// throw out engineData that came from a different thread
name|engineData
operator|->
name|ref
operator|.
name|deref
argument_list|()
expr_stmt|;
name|engineData
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|engineData
operator|||
operator|!
name|QT_FONT_ENGINE_FROM_DATA
argument_list|(
name|engineData
argument_list|,
name|script
argument_list|)
condition|)
name|QFontDatabase
operator|::
name|load
argument_list|(
name|this
argument_list|,
name|script
argument_list|)
expr_stmt|;
return|return
name|QT_FONT_ENGINE_FROM_DATA
argument_list|(
name|engineData
argument_list|,
name|script
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|alterCharForCapitalization
name|void
name|QFontPrivate
operator|::
name|alterCharForCapitalization
parameter_list|(
name|QChar
modifier|&
name|c
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|capital
condition|)
block|{
case|case
name|QFont
operator|::
name|AllUppercase
case|:
case|case
name|QFont
operator|::
name|SmallCaps
case|:
name|c
operator|=
name|c
operator|.
name|toUpper
argument_list|()
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|AllLowercase
case|:
name|c
operator|=
name|c
operator|.
name|toLower
argument_list|()
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|MixedCase
case|:
break|break;
block|}
block|}
end_function
begin_function
DECL|function|smallCapsFontPrivate
name|QFontPrivate
modifier|*
name|QFontPrivate
operator|::
name|smallCapsFontPrivate
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|scFont
condition|)
return|return
name|scFont
return|;
name|QFont
name|font
argument_list|(
cast|const_cast
argument_list|<
name|QFontPrivate
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
argument_list|)
decl_stmt|;
name|qreal
name|pointSize
init|=
name|font
operator|.
name|pointSizeF
argument_list|()
decl_stmt|;
if|if
condition|(
name|pointSize
operator|>
literal|0
condition|)
name|font
operator|.
name|setPointSizeF
argument_list|(
name|pointSize
operator|*
literal|.7
argument_list|)
expr_stmt|;
else|else
name|font
operator|.
name|setPixelSize
argument_list|(
operator|(
name|font
operator|.
name|pixelSize
argument_list|()
operator|*
literal|7
operator|+
literal|5
operator|)
operator|/
literal|10
argument_list|)
expr_stmt|;
name|scFont
operator|=
name|font
operator|.
name|d
operator|.
name|data
argument_list|()
expr_stmt|;
if|if
condition|(
name|scFont
operator|!=
name|this
condition|)
name|scFont
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
return|return
name|scFont
return|;
block|}
end_function
begin_function
DECL|function|resolve
name|void
name|QFontPrivate
operator|::
name|resolve
parameter_list|(
name|uint
name|mask
parameter_list|,
specifier|const
name|QFontPrivate
modifier|*
name|other
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|other
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|dpi
operator|=
name|other
operator|->
name|dpi
expr_stmt|;
if|if
condition|(
operator|(
name|mask
operator|&
name|QFont
operator|::
name|AllPropertiesResolved
operator|)
operator|==
name|QFont
operator|::
name|AllPropertiesResolved
condition|)
return|return;
comment|// assign the unset-bits with the set-bits of the other font def
if|if
condition|(
operator|!
operator|(
name|mask
operator|&
name|QFont
operator|::
name|FamilyResolved
operator|)
condition|)
name|request
operator|.
name|family
operator|=
name|other
operator|->
name|request
operator|.
name|family
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|mask
operator|&
name|QFont
operator|::
name|StyleNameResolved
operator|)
condition|)
name|request
operator|.
name|styleName
operator|=
name|other
operator|->
name|request
operator|.
name|styleName
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|mask
operator|&
name|QFont
operator|::
name|SizeResolved
operator|)
condition|)
block|{
name|request
operator|.
name|pointSize
operator|=
name|other
operator|->
name|request
operator|.
name|pointSize
expr_stmt|;
name|request
operator|.
name|pixelSize
operator|=
name|other
operator|->
name|request
operator|.
name|pixelSize
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|mask
operator|&
name|QFont
operator|::
name|StyleHintResolved
operator|)
condition|)
name|request
operator|.
name|styleHint
operator|=
name|other
operator|->
name|request
operator|.
name|styleHint
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|mask
operator|&
name|QFont
operator|::
name|StyleStrategyResolved
operator|)
condition|)
name|request
operator|.
name|styleStrategy
operator|=
name|other
operator|->
name|request
operator|.
name|styleStrategy
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|mask
operator|&
name|QFont
operator|::
name|WeightResolved
operator|)
condition|)
name|request
operator|.
name|weight
operator|=
name|other
operator|->
name|request
operator|.
name|weight
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|mask
operator|&
name|QFont
operator|::
name|StyleResolved
operator|)
condition|)
name|request
operator|.
name|style
operator|=
name|other
operator|->
name|request
operator|.
name|style
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|mask
operator|&
name|QFont
operator|::
name|FixedPitchResolved
operator|)
condition|)
name|request
operator|.
name|fixedPitch
operator|=
name|other
operator|->
name|request
operator|.
name|fixedPitch
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|mask
operator|&
name|QFont
operator|::
name|StretchResolved
operator|)
condition|)
name|request
operator|.
name|stretch
operator|=
name|other
operator|->
name|request
operator|.
name|stretch
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|mask
operator|&
name|QFont
operator|::
name|HintingPreferenceResolved
operator|)
condition|)
name|request
operator|.
name|hintingPreference
operator|=
name|other
operator|->
name|request
operator|.
name|hintingPreference
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|mask
operator|&
name|QFont
operator|::
name|UnderlineResolved
operator|)
condition|)
name|underline
operator|=
name|other
operator|->
name|underline
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|mask
operator|&
name|QFont
operator|::
name|OverlineResolved
operator|)
condition|)
name|overline
operator|=
name|other
operator|->
name|overline
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|mask
operator|&
name|QFont
operator|::
name|StrikeOutResolved
operator|)
condition|)
name|strikeOut
operator|=
name|other
operator|->
name|strikeOut
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|mask
operator|&
name|QFont
operator|::
name|KerningResolved
operator|)
condition|)
name|kerning
operator|=
name|other
operator|->
name|kerning
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|mask
operator|&
name|QFont
operator|::
name|LetterSpacingResolved
operator|)
condition|)
block|{
name|letterSpacing
operator|=
name|other
operator|->
name|letterSpacing
expr_stmt|;
name|letterSpacingIsAbsolute
operator|=
name|other
operator|->
name|letterSpacingIsAbsolute
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|mask
operator|&
name|QFont
operator|::
name|WordSpacingResolved
operator|)
condition|)
name|wordSpacing
operator|=
name|other
operator|->
name|wordSpacing
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|mask
operator|&
name|QFont
operator|::
name|CapitalizationResolved
operator|)
condition|)
name|capital
operator|=
name|other
operator|->
name|capital
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QFontEngineData
name|QFontEngineData
operator|::
name|QFontEngineData
parameter_list|()
member_init_list|:
name|ref
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|fontCache
argument_list|(
name|QFontCache
operator|::
name|instance
argument_list|()
argument_list|)
block|{
name|memset
argument_list|(
name|engines
argument_list|,
literal|0
argument_list|,
name|QUnicodeTables
operator|::
name|ScriptCount
operator|*
sizeof|sizeof
argument_list|(
name|QFontEngine
operator|*
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QFontEngineData
name|QFontEngineData
operator|::
name|~
name|QFontEngineData
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QUnicodeTables
operator|::
name|ScriptCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|engines
index|[
name|i
index|]
condition|)
name|engines
index|[
name|i
index|]
operator|->
name|ref
operator|.
name|deref
argument_list|()
expr_stmt|;
name|engines
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_destructor
begin_comment
comment|/*!     \class QFont     \reentrant      \brief The QFont class specifies a font used for drawing text.      \ingroup painting     \ingroup appearance     \ingroup shared     \ingroup richtext-processing       When you create a QFont object you specify various attributes that     you want the font to have. Qt will use the font with the specified     attributes, or if no matching font exists, Qt will use the closest     matching installed font. The attributes of the font that is     actually used are retrievable from a QFontInfo object. If the     window system provides an exact match exactMatch() returns true.     Use QFontMetrics to get measurements, e.g. the pixel length of a     string using QFontMetrics::width().      Note that a QGuiApplication instance must exist before a QFont can be     used. You can set the application's default font with     QGuiApplication::setFont().      If a chosen font does not include all the characters that     need to be displayed, QFont will try to find the characters in the     nearest equivalent fonts. When a QPainter draws a character from a     font the QFont will report whether or not it has the character; if     it does not, QPainter will draw an unfilled square.      Create QFonts like this:      \snippet doc/src/snippets/code/src_gui_text_qfont.cpp 0      The attributes set in the constructor can also be set later, e.g.     setFamily(), setPointSize(), setPointSizeFloat(), setWeight() and     setItalic(). The remaining attributes must be set after     contstruction, e.g. setBold(), setUnderline(), setOverline(),     setStrikeOut() and setFixedPitch(). QFontInfo objects should be     created \e after the font's attributes have been set. A QFontInfo     object will not change, even if you change the font's     attributes. The corresponding "get" functions, e.g. family(),     pointSize(), etc., return the values that were set, even though     the values used may differ. The actual values are available from a     QFontInfo object.      If the requested font family is unavailable you can influence the     \link #fontmatching font matching algorithm\endlink by choosing a     particular \l{QFont::StyleHint} and \l{QFont::StyleStrategy} with     setStyleHint(). The default family (corresponding to the current     style hint) is returned by defaultFamily().      The font-matching algorithm has a lastResortFamily() and     lastResortFont() in cases where a suitable match cannot be found.     You can provide substitutions for font family names using     insertSubstitution() and insertSubstitutions(). Substitutions can     be removed with removeSubstitution(). Use substitute() to retrieve     a family's first substitute, or the family name itself if it has     no substitutes. Use substitutes() to retrieve a list of a family's     substitutes (which may be empty).      Every QFont has a key() which you can use, for example, as the key     in a cache or dictionary. If you want to store a user's font     preferences you could use QSettings, writing the font information     with toString() and reading it back with fromString(). The     operator<<() and operator>>() functions are also available, but     they work on a data stream.      It is possible to set the height of characters shown on the screen     to a specified number of pixels with setPixelSize(); however using     setPointSize() has a similar effect and provides device     independence.      In X11 you can set a font using its system     specific name with setRawName().      Loading fonts can be expensive, especially on X11. QFont contains     extensive optimizations to make the copying of QFont objects fast,     and to cache the results of the slow window system functions it     depends upon.      \target fontmatching     The font matching algorithm works as follows:     \list 1     \o The specified font family is searched for.     \o If not found, the styleHint() is used to select a replacement        family.     \o Each replacement font family is searched for.     \o If none of these are found or there was no styleHint(), "helvetica"        will be searched for.     \o If "helvetica" isn't found Qt will try the lastResortFamily().     \o If the lastResortFamily() isn't found Qt will try the        lastResortFont() which will always return a name of some kind.     \endlist      Note that the actual font matching algorithm varies from platform to platform.      In Windows a request for the "Courier" font is automatically changed to     "Courier New", an improved version of Courier that allows for smooth scaling.     The older "Courier" bitmap font can be selected by setting the PreferBitmap     style strategy (see setStyleStrategy()).      Once a font is found, the remaining attributes are matched in order of     priority:     \list 1     \o fixedPitch()     \o pointSize() (see below)     \o weight()     \o style()     \endlist      If you have a font which matches on family, even if none of the     other attributes match, this font will be chosen in preference to     a font which doesn't match on family but which does match on the     other attributes. This is because font family is the dominant     search criteria.      The point size is defined to match if it is within 20% of the     requested point size. When several fonts match and are only     distinguished by point size, the font with the closest point size     to the one requested will be chosen.      The actual family, font size, weight and other font attributes     used for drawing text will depend on what's available for the     chosen family under the window system. A QFontInfo object can be     used to determine the actual values used for drawing the text.      Examples:      \snippet doc/src/snippets/code/src_gui_text_qfont.cpp 1     If you had both an Adobe and a Cronyx Helvetica, you might get     either.      \snippet doc/src/snippets/code/src_gui_text_qfont.cpp 2      You can specify the foundry you want in the family name. The font f     in the above example will be set to "Helvetica     [Cronyx]".      To determine the attributes of the font actually used in the window     system, use a QFontInfo object, e.g.      \snippet doc/src/snippets/code/src_gui_text_qfont.cpp 3      To find out font metrics use a QFontMetrics object, e.g.      \snippet doc/src/snippets/code/src_gui_text_qfont.cpp 4      For more general information on fonts, see the     \link http://nwalsh.com/comp.fonts/FAQ/ comp.fonts FAQ.\endlink     Information on encodings can be found from     \link http://czyborra.com/ Roman Czyborra's\endlink page.      \sa QFontComboBox, QFontMetrics, QFontInfo, QFontDatabase, {Character Map Example} */
end_comment
begin_comment
comment|/*!     \internal     \enum QFont::ResolveProperties      This enum describes the properties of a QFont that can be set on a font     individually and then considered resolved.      \value FamilyResolved     \value SizeResolved     \value StyleHintResolved     \value StyleStrategyResolved     \value WeightResolved     \value StyleResolved     \value UnderlineResolved     \value OverlineResolved     \value StrikeOutResolved     \value FixedPitchResolved     \value StretchResolved     \value KerningResolved     \value CapitalizationResolved     \value LetterSpacingResolved     \value WordSpacingResolved     \value CompletelyResolved */
end_comment
begin_comment
comment|/*!     \enum QFont::Style      This enum describes the different styles of glyphs that are used to     display text.      \value StyleNormal  Normal glyphs used in unstyled text.     \value StyleItalic  Italic glyphs that are specifically designed for                         the purpose of representing italicized text.     \value StyleOblique Glyphs with an italic appearance that are typically                         based on the unstyled glyphs, but are not fine-tuned                         for the purpose of representing italicized text.      \sa Weight */
end_comment
begin_comment
comment|/*!     \fn Qt::HANDLE QFont::handle() const      Returns the window system handle to the font, for low-level     access. Using this function is \e not portable. */
end_comment
begin_comment
comment|/*!     \fn FT_Face QFont::freetypeFace() const      Returns the handle to the primary FreeType face of the font. If font merging is not disabled a     QFont can contain several physical fonts.      Returns 0 if the font does not contain a FreeType face.      \note This function is only available on platforms that provide the FreeType library;     i.e., X11 and some Embedded Linux platforms. */
end_comment
begin_comment
comment|/*!     \fn QString QFont::rawName() const      Returns the name of the font within the underlying window system.      On X11, this function will return an empty string if Qt is built with     FontConfig support; otherwise the XLFD (X Logical Font Description) is     returned.      Using the return value of this function is usually \e not \e     portable.      \sa setRawName() */
end_comment
begin_comment
comment|/*!     \fn void QFont::setRawName(const QString&name)      Sets a font by its system specific name. The function is     particularly useful under X, where system font settings (for     example X resources) are usually available in XLFD (X Logical Font     Description) form only. You can pass an XLFD as \a name to this     function.      A font set with setRawName() is still a full-featured QFont. It can     be queried (for example with italic()) or modified (for example with     setItalic()) and is therefore also suitable for rendering rich text.      If Qt's internal font database cannot resolve the raw name, the     font becomes a raw font with \a name as its family.      Note that the present implementation does not handle wildcards in     XLFDs well, and that font aliases (file \c fonts.alias in the font     directory on X11) are not supported.      \sa rawName(), setRawMode(), setFamily() */
end_comment
begin_comment
comment|/*!     \fn QString QFont::lastResortFamily() const      Returns the "last resort" font family name.      The current implementation tries a wide variety of common fonts,     returning the first one it finds. Is is possible that no family is     found in which case an empty string is returned.      \sa lastResortFont() */
end_comment
begin_comment
comment|/*!     \fn QString QFont::defaultFamily() const      Returns the family name that corresponds to the current style     hint.      \sa StyleHint styleHint() setStyleHint() */
end_comment
begin_comment
comment|/*!     \fn QString QFont::lastResortFont() const      Returns a "last resort" font name for the font matching algorithm.     This is used if the last resort family is not available. It will     always return a name, if necessary returning something like     "fixed" or "system".      The current implementation tries a wide variety of common fonts,     returning the first one it finds. The implementation may change     at any time, but this function will always return a string     containing something.      It is theoretically possible that there really isn't a     lastResortFont() in which case Qt will abort with an error     message. We have not been able to identify a case where this     happens. Please \link bughowto.html report it as a bug\endlink if     it does, preferably with a list of the fonts you have installed.      \sa lastResortFamily() rawName() */
end_comment
begin_comment
comment|/*!   Constructs a font from \a font for use on the paint device \a pd. */
end_comment
begin_constructor
DECL|function|QFont
name|QFont
operator|::
name|QFont
parameter_list|(
specifier|const
name|QFont
modifier|&
name|font
parameter_list|,
name|QPaintDevice
modifier|*
name|pd
parameter_list|)
member_init_list|:
name|resolve_mask
argument_list|(
name|font
operator|.
name|resolve_mask
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|pd
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|int
name|dpi
init|=
name|pd
operator|->
name|logicalDpiY
argument_list|()
decl_stmt|;
specifier|const
name|int
name|screen
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|font
operator|.
name|d
operator|->
name|dpi
operator|!=
name|dpi
operator|||
name|font
operator|.
name|d
operator|->
name|screen
operator|!=
name|screen
condition|)
block|{
name|d
operator|=
operator|new
name|QFontPrivate
argument_list|(
operator|*
name|font
operator|.
name|d
argument_list|)
expr_stmt|;
name|d
operator|->
name|dpi
operator|=
name|dpi
expr_stmt|;
name|d
operator|->
name|screen
operator|=
name|screen
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
name|font
operator|.
name|d
operator|.
name|data
argument_list|()
expr_stmt|;
block|}
block|}
end_constructor
begin_comment
comment|/*!   \internal */
end_comment
begin_constructor
DECL|function|QFont
name|QFont
operator|::
name|QFont
parameter_list|(
name|QFontPrivate
modifier|*
name|data
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|data
argument_list|)
member_init_list|,
name|resolve_mask
argument_list|(
name|QFont
operator|::
name|AllPropertiesResolved
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*! \internal     Detaches the font object from common font data. */
end_comment
begin_function
DECL|function|detach
name|void
name|QFont
operator|::
name|detach
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|engineData
condition|)
name|d
operator|->
name|engineData
operator|->
name|ref
operator|.
name|deref
argument_list|()
expr_stmt|;
name|d
operator|->
name|engineData
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|scFont
operator|&&
name|d
operator|->
name|scFont
operator|!=
name|d
operator|.
name|data
argument_list|()
condition|)
name|d
operator|->
name|scFont
operator|->
name|ref
operator|.
name|deref
argument_list|()
expr_stmt|;
name|d
operator|->
name|scFont
operator|=
literal|0
expr_stmt|;
return|return;
block|}
name|d
operator|.
name|detach
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Constructs a font object that uses the application's default font.      \sa QGuiApplication::setFont(), QGuiApplication::font() */
end_comment
begin_constructor
DECL|function|QFont
name|QFont
operator|::
name|QFont
parameter_list|()
member_init_list|:
name|d
argument_list|(
name|QGuiApplication
operator|::
name|font
argument_list|()
operator|.
name|d
operator|.
name|data
argument_list|()
argument_list|)
member_init_list|,
name|resolve_mask
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a font object with the specified \a family, \a     pointSize, \a weight and \a italic settings.      If \a pointSize is zero or negative, the point size of the font     is set to a system-dependent default value. Generally, this is     12 points, except on Symbian where it is 7 points.      The \a family name may optionally also include a foundry name,     e.g. "Helvetica [Cronyx]". If the \a family is     available from more than one foundry and the foundry isn't     specified, an arbitrary foundry is chosen. If the family isn't     available a family will be set using the \l{QFont}{font matching}     algorithm.      \sa Weight, setFamily(), setPointSize(), setWeight(), setItalic(),     setStyleHint() QGuiApplication::font() */
end_comment
begin_constructor
DECL|function|QFont
name|QFont
operator|::
name|QFont
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|,
name|int
name|pointSize
parameter_list|,
name|int
name|weight
parameter_list|,
name|bool
name|italic
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QFontPrivate
argument_list|()
argument_list|)
member_init_list|,
name|resolve_mask
argument_list|(
name|QFont
operator|::
name|FamilyResolved
argument_list|)
block|{
if|if
condition|(
name|pointSize
operator|<=
literal|0
condition|)
block|{
name|pointSize
operator|=
literal|12
expr_stmt|;
block|}
else|else
block|{
name|resolve_mask
operator||=
name|QFont
operator|::
name|SizeResolved
expr_stmt|;
block|}
if|if
condition|(
name|weight
operator|<
literal|0
condition|)
block|{
name|weight
operator|=
name|Normal
expr_stmt|;
block|}
else|else
block|{
name|resolve_mask
operator||=
name|QFont
operator|::
name|WeightResolved
operator||
name|QFont
operator|::
name|StyleResolved
expr_stmt|;
block|}
if|if
condition|(
name|italic
condition|)
name|resolve_mask
operator||=
name|QFont
operator|::
name|StyleResolved
expr_stmt|;
name|d
operator|->
name|request
operator|.
name|family
operator|=
name|family
expr_stmt|;
name|d
operator|->
name|request
operator|.
name|pointSize
operator|=
name|qreal
argument_list|(
name|pointSize
argument_list|)
expr_stmt|;
name|d
operator|->
name|request
operator|.
name|pixelSize
operator|=
operator|-
literal|1
expr_stmt|;
name|d
operator|->
name|request
operator|.
name|weight
operator|=
name|weight
expr_stmt|;
name|d
operator|->
name|request
operator|.
name|style
operator|=
name|italic
condition|?
name|QFont
operator|::
name|StyleItalic
else|:
name|QFont
operator|::
name|StyleNormal
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a font that is a copy of \a font. */
end_comment
begin_constructor
DECL|function|QFont
name|QFont
operator|::
name|QFont
parameter_list|(
specifier|const
name|QFont
modifier|&
name|font
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|font
operator|.
name|d
operator|.
name|data
argument_list|()
argument_list|)
member_init_list|,
name|resolve_mask
argument_list|(
name|font
operator|.
name|resolve_mask
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the font object and frees all allocated resources. */
end_comment
begin_destructor
DECL|function|~QFont
name|QFont
operator|::
name|~
name|QFont
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Assigns \a font to this font and returns a reference to it. */
end_comment
begin_function
DECL|function|operator =
name|QFont
modifier|&
name|QFont
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QFont
modifier|&
name|font
parameter_list|)
block|{
name|d
operator|=
name|font
operator|.
name|d
operator|.
name|data
argument_list|()
expr_stmt|;
name|resolve_mask
operator|=
name|font
operator|.
name|resolve_mask
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the requested font family name, i.e. the name set in the     constructor or the last setFont() call.      \sa setFamily() substitutes() substitute() */
end_comment
begin_function
DECL|function|family
name|QString
name|QFont
operator|::
name|family
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|request
operator|.
name|family
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the family name of the font. The name is case insensitive and     may include a foundry name.      The \a family name may optionally also include a foundry name,     e.g. "Helvetica [Cronyx]". If the \a family is     available from more than one foundry and the foundry isn't     specified, an arbitrary foundry is chosen. If the family isn't     available a family will be set using the \l{QFont}{font matching}     algorithm.      \sa family(), setStyleHint(), QFontInfo */
end_comment
begin_function
DECL|function|setFamily
name|void
name|QFont
operator|::
name|setFamily
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|request
operator|.
name|family
operator|=
name|family
expr_stmt|;
name|resolve_mask
operator||=
name|QFont
operator|::
name|FamilyResolved
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.8      Returns the requested font style name, it will be used to match the     font with irregular styles (that can't be normalized in other style     properties). It depends on system font support, thus only works for     Mac OS X and X11 so far. On Windows irregular styles will be added     as separate font families so there is no need for this.      \sa setFamily() setStyle() */
end_comment
begin_function
DECL|function|styleName
name|QString
name|QFont
operator|::
name|styleName
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|request
operator|.
name|styleName
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.8      Sets the style name of the font. When set, other style properties     like \a style() and \a weight() will be ignored for font matching.      \sa styleName() */
end_comment
begin_function
DECL|function|setStyleName
name|void
name|QFont
operator|::
name|setStyleName
parameter_list|(
specifier|const
name|QString
modifier|&
name|styleName
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|request
operator|.
name|styleName
operator|=
name|styleName
expr_stmt|;
name|resolve_mask
operator||=
name|QFont
operator|::
name|StyleNameResolved
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the point size of the font. Returns -1 if the font size     was specified in pixels.      \sa setPointSize() pointSizeF() */
end_comment
begin_function
DECL|function|pointSize
name|int
name|QFont
operator|::
name|pointSize
parameter_list|()
specifier|const
block|{
return|return
name|qRound
argument_list|(
name|d
operator|->
name|request
operator|.
name|pointSize
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.8      \enum QFont::HintingPreference      This enum describes the different levels of hinting that can be applied     to glyphs to improve legibility on displays where it might be warranted     by the density of pixels.      \value PreferDefaultHinting Use the default hinting level for the target platform.     \value PreferNoHinting If possible, render text without hinting the outlines            of the glyphs. The text layout will be typographically accurate and            scalable, using the same metrics as are used e.g. when printing.     \value PreferVerticalHinting If possible, render text with no horizontal hinting,            but align glyphs to the pixel grid in the vertical direction. The text will appear            crisper on displays where the density is too low to give an accurate rendering            of the glyphs. But since the horizontal metrics of the glyphs are unhinted, the text's            layout will be scalable to higher density devices (such as printers) without impacting            details such as line breaks.     \value PreferFullHinting If possible, render text with hinting in both horizontal and            vertical directions. The text will be altered to optimize legibility on the target            device, but since the metrics will depend on the target size of the text, the positions            of glyphs, line breaks, and other typographical detail will not scale, meaning that a            text layout may look different on devices with different pixel densities.      Please note that this enum only describes a preference, as the full range of hinting levels     are not supported on all of Qt's supported platforms. The following table details the effect     of a given hinting preference on a selected set of target platforms.      \table     \header     \o     \o PreferDefaultHinting     \o PreferNoHinting     \o PreferVerticalHinting     \o PreferFullHinting     \row     \o Windows Vista (w/o Platform Update) and earlier     \o Full hinting     \o Full hinting     \o Full hinting     \o Full hinting     \row     \o Windows 7 and Windows Vista (w/Platform Update) and DirectWrite enabled in Qt     \o Full hinting     \o Vertical hinting     \o Vertical hinting     \o Full hinting     \row     \o FreeType     \o Operating System setting     \o No hinting     \o Vertical hinting (light)     \o Full hinting     \row     \o Cocoa on Mac OS X     \o No hinting     \o No hinting     \o No hinting     \o No hinting     \endtable      \note Please be aware that altering the hinting preference on Windows is available through     the DirectWrite font engine. This is available on Windows Vista after installing the platform     update, and on Windows 7. In order to use this extension, configure Qt using -directwrite.     The target application will then depend on the availability of DirectWrite on the target     system.  */
end_comment
begin_comment
comment|/*!     \since 4.8      Set the preference for the hinting level of the glyphs to \a hintingPreference. This is a hint     to the underlying font rendering system to use a certain level of hinting, and has varying     support across platforms. See the table in the documentation for QFont::HintingPreference for     more details.      The default hinting preference is QFont::PreferDefaultHinting. */
end_comment
begin_function
DECL|function|setHintingPreference
name|void
name|QFont
operator|::
name|setHintingPreference
parameter_list|(
name|HintingPreference
name|hintingPreference
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|request
operator|.
name|hintingPreference
operator|=
name|hintingPreference
expr_stmt|;
name|resolve_mask
operator||=
name|QFont
operator|::
name|HintingPreferenceResolved
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.8      Returns the currently preferred hinting level for glyphs rendered with this font. */
end_comment
begin_function
DECL|function|hintingPreference
name|QFont
operator|::
name|HintingPreference
name|QFont
operator|::
name|hintingPreference
parameter_list|()
specifier|const
block|{
return|return
name|QFont
operator|::
name|HintingPreference
argument_list|(
name|d
operator|->
name|request
operator|.
name|hintingPreference
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the point size to \a pointSize. The point size must be     greater than zero.      \sa pointSize() setPointSizeF() */
end_comment
begin_function
DECL|function|setPointSize
name|void
name|QFont
operator|::
name|setPointSize
parameter_list|(
name|int
name|pointSize
parameter_list|)
block|{
if|if
condition|(
name|pointSize
operator|<=
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QFont::setPointSize: Point size<= 0 (%d), must be greater than 0"
argument_list|,
name|pointSize
argument_list|)
expr_stmt|;
return|return;
block|}
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|request
operator|.
name|pointSize
operator|=
name|qreal
argument_list|(
name|pointSize
argument_list|)
expr_stmt|;
name|d
operator|->
name|request
operator|.
name|pixelSize
operator|=
operator|-
literal|1
expr_stmt|;
name|resolve_mask
operator||=
name|QFont
operator|::
name|SizeResolved
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the point size to \a pointSize. The point size must be     greater than zero. The requested precision may not be achieved on     all platforms.      \sa pointSizeF() setPointSize() setPixelSize() */
end_comment
begin_function
DECL|function|setPointSizeF
name|void
name|QFont
operator|::
name|setPointSizeF
parameter_list|(
name|qreal
name|pointSize
parameter_list|)
block|{
if|if
condition|(
name|pointSize
operator|<=
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QFont::setPointSizeF: Point size<= 0 (%f), must be greater than 0"
argument_list|,
name|pointSize
argument_list|)
expr_stmt|;
return|return;
block|}
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|request
operator|.
name|pointSize
operator|=
name|pointSize
expr_stmt|;
name|d
operator|->
name|request
operator|.
name|pixelSize
operator|=
operator|-
literal|1
expr_stmt|;
name|resolve_mask
operator||=
name|QFont
operator|::
name|SizeResolved
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the point size of the font. Returns -1 if the font size was     specified in pixels.      \sa pointSize() setPointSizeF() pixelSize() QFontInfo::pointSize() QFontInfo::pixelSize() */
end_comment
begin_function
DECL|function|pointSizeF
name|qreal
name|QFont
operator|::
name|pointSizeF
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|request
operator|.
name|pointSize
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the font size to \a pixelSize pixels.      Using this function makes the font device dependent. Use     setPointSize() or setPointSizeF() to set the size of the font     in a device independent manner.      \sa pixelSize() */
end_comment
begin_function
DECL|function|setPixelSize
name|void
name|QFont
operator|::
name|setPixelSize
parameter_list|(
name|int
name|pixelSize
parameter_list|)
block|{
if|if
condition|(
name|pixelSize
operator|<=
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QFont::setPixelSize: Pixel size<= 0 (%d)"
argument_list|,
name|pixelSize
argument_list|)
expr_stmt|;
return|return;
block|}
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|request
operator|.
name|pixelSize
operator|=
name|pixelSize
expr_stmt|;
name|d
operator|->
name|request
operator|.
name|pointSize
operator|=
operator|-
literal|1
expr_stmt|;
name|resolve_mask
operator||=
name|QFont
operator|::
name|SizeResolved
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the pixel size of the font if it was set with     setPixelSize(). Returns -1 if the size was set with setPointSize()     or setPointSizeF().      \sa setPixelSize() pointSize() QFontInfo::pointSize() QFontInfo::pixelSize() */
end_comment
begin_function
DECL|function|pixelSize
name|int
name|QFont
operator|::
name|pixelSize
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|request
operator|.
name|pixelSize
return|;
block|}
end_function
begin_comment
comment|/*!   \fn bool QFont::italic() const      Returns true if the style() of the font is not QFont::StyleNormal      \sa setItalic() style() */
end_comment
begin_comment
comment|/*!   \fn void QFont::setItalic(bool enable)    Sets the style() of the font to QFont::StyleItalic if \a enable is true;   otherwise the style is set to QFont::StyleNormal.    \sa italic() QFontInfo */
end_comment
begin_comment
comment|/*!     Returns the style of the font.      \sa setStyle() */
end_comment
begin_function
DECL|function|style
name|QFont
operator|::
name|Style
name|QFont
operator|::
name|style
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|QFont
operator|::
name|Style
operator|)
name|d
operator|->
name|request
operator|.
name|style
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the style of the font to \a style.    \sa italic(), QFontInfo */
end_comment
begin_function
DECL|function|setStyle
name|void
name|QFont
operator|::
name|setStyle
parameter_list|(
name|Style
name|style
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|request
operator|.
name|style
operator|=
name|style
expr_stmt|;
name|resolve_mask
operator||=
name|QFont
operator|::
name|StyleResolved
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the weight of the font which is one of the enumerated     values from \l{QFont::Weight}.      \sa setWeight(), Weight, QFontInfo */
end_comment
begin_function
DECL|function|weight
name|int
name|QFont
operator|::
name|weight
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|request
operator|.
name|weight
return|;
block|}
end_function
begin_comment
comment|/*!     \enum QFont::Weight      Qt uses a weighting scale from 0 to 99 similar to, but not the     same as, the scales used in Windows or CSS. A weight of 0 is     ultralight, whilst 99 will be an extremely black.      This enum contains the predefined font weights:      \value Light 25     \value Normal 50     \value DemiBold 63     \value Bold 75     \value Black 87 */
end_comment
begin_comment
comment|/*!     Sets the weight the font to \a weight, which should be a value     from the \l QFont::Weight enumeration.      \sa weight(), QFontInfo */
end_comment
begin_function
DECL|function|setWeight
name|void
name|QFont
operator|::
name|setWeight
parameter_list|(
name|int
name|weight
parameter_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|weight
operator|>=
literal|0
operator|&&
name|weight
operator|<=
literal|99
argument_list|,
literal|"QFont::setWeight"
argument_list|,
literal|"Weight must be between 0 and 99"
argument_list|)
expr_stmt|;
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|request
operator|.
name|weight
operator|=
name|weight
expr_stmt|;
name|resolve_mask
operator||=
name|QFont
operator|::
name|WeightResolved
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QFont::bold() const      Returns true if weight() is a value greater than \link Weight     QFont::Normal \endlink; otherwise returns false.      \sa weight(), setBold(), QFontInfo::bold() */
end_comment
begin_comment
comment|/*!     \fn void QFont::setBold(bool enable)      If \a enable is true sets the font's weight to \link Weight     QFont::Bold \endlink; otherwise sets the weight to \link Weight     QFont::Normal\endlink.      For finer boldness control use setWeight().      \sa bold(), setWeight() */
end_comment
begin_comment
comment|/*!     Returns true if underline has been set; otherwise returns false.      \sa setUnderline() */
end_comment
begin_function
DECL|function|underline
name|bool
name|QFont
operator|::
name|underline
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|underline
return|;
block|}
end_function
begin_comment
comment|/*!     If \a enable is true, sets underline on; otherwise sets underline     off.      \sa underline(), QFontInfo */
end_comment
begin_function
DECL|function|setUnderline
name|void
name|QFont
operator|::
name|setUnderline
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|underline
operator|=
name|enable
expr_stmt|;
name|resolve_mask
operator||=
name|QFont
operator|::
name|UnderlineResolved
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns true if overline has been set; otherwise returns false.      \sa setOverline() */
end_comment
begin_function
DECL|function|overline
name|bool
name|QFont
operator|::
name|overline
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|overline
return|;
block|}
end_function
begin_comment
comment|/*!   If \a enable is true, sets overline on; otherwise sets overline off.    \sa overline(), QFontInfo */
end_comment
begin_function
DECL|function|setOverline
name|void
name|QFont
operator|::
name|setOverline
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|overline
operator|=
name|enable
expr_stmt|;
name|resolve_mask
operator||=
name|QFont
operator|::
name|OverlineResolved
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns true if strikeout has been set; otherwise returns false.      \sa setStrikeOut() */
end_comment
begin_function
DECL|function|strikeOut
name|bool
name|QFont
operator|::
name|strikeOut
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|strikeOut
return|;
block|}
end_function
begin_comment
comment|/*!     If \a enable is true, sets strikeout on; otherwise sets strikeout     off.      \sa strikeOut(), QFontInfo */
end_comment
begin_function
DECL|function|setStrikeOut
name|void
name|QFont
operator|::
name|setStrikeOut
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|strikeOut
operator|=
name|enable
expr_stmt|;
name|resolve_mask
operator||=
name|QFont
operator|::
name|StrikeOutResolved
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns true if fixed pitch has been set; otherwise returns false.      \sa setFixedPitch(), QFontInfo::fixedPitch() */
end_comment
begin_function
DECL|function|fixedPitch
name|bool
name|QFont
operator|::
name|fixedPitch
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|request
operator|.
name|fixedPitch
return|;
block|}
end_function
begin_comment
comment|/*!     If \a enable is true, sets fixed pitch on; otherwise sets fixed     pitch off.      \sa fixedPitch(), QFontInfo */
end_comment
begin_function
DECL|function|setFixedPitch
name|void
name|QFont
operator|::
name|setFixedPitch
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|request
operator|.
name|fixedPitch
operator|=
name|enable
expr_stmt|;
name|d
operator|->
name|request
operator|.
name|ignorePitch
operator|=
literal|false
expr_stmt|;
name|resolve_mask
operator||=
name|QFont
operator|::
name|FixedPitchResolved
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns true if kerning should be used when drawing text with this font.    \sa setKerning() */
end_comment
begin_function
DECL|function|kerning
name|bool
name|QFont
operator|::
name|kerning
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|kerning
return|;
block|}
end_function
begin_comment
comment|/*!     Enables kerning for this font if \a enable is true; otherwise     disables it. By default, kerning is enabled.      When kerning is enabled, glyph metrics do not add up anymore,     even for Latin text. In other words, the assumption that     width('a') + width('b') is equal to width("ab") is not     neccesairly true.      \sa kerning(), QFontMetrics */
end_comment
begin_function
DECL|function|setKerning
name|void
name|QFont
operator|::
name|setKerning
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|kerning
operator|=
name|enable
expr_stmt|;
name|resolve_mask
operator||=
name|QFont
operator|::
name|KerningResolved
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the StyleStrategy.      The style strategy affects the \l{QFont}{font matching} algorithm.     See \l QFont::StyleStrategy for the list of available strategies.      \sa setStyleHint() QFont::StyleHint */
end_comment
begin_function
DECL|function|styleStrategy
name|QFont
operator|::
name|StyleStrategy
name|QFont
operator|::
name|styleStrategy
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|StyleStrategy
operator|)
name|d
operator|->
name|request
operator|.
name|styleStrategy
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the StyleHint.      The style hint affects the \l{QFont}{font matching} algorithm.     See \l QFont::StyleHint for the list of available hints.      \sa setStyleHint(), QFont::StyleStrategy QFontInfo::styleHint() */
end_comment
begin_function
DECL|function|styleHint
name|QFont
operator|::
name|StyleHint
name|QFont
operator|::
name|styleHint
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|StyleHint
operator|)
name|d
operator|->
name|request
operator|.
name|styleHint
return|;
block|}
end_function
begin_comment
comment|/*!     \enum QFont::StyleHint      Style hints are used by the \l{QFont}{font matching} algorithm to     find an appropriate default family if a selected font family is     not available.      \value AnyStyle leaves the font matching algorithm to choose the            family. This is the default.      \value SansSerif the font matcher prefer sans serif fonts.     \value Helvetica is a synonym for \c SansSerif.      \value Serif the font matcher prefers serif fonts.     \value Times is a synonym for \c Serif.      \value TypeWriter the font matcher prefers fixed pitch fonts.     \value Courier a synonym for \c TypeWriter.      \value OldEnglish the font matcher prefers decorative fonts.     \value Decorative is a synonym for \c OldEnglish.      \value Monospace the font matcher prefers fonts that map to the     CSS generic font-family 'monospace'.      \value Fantasy the font matcher prefers fonts that map to the     CSS generic font-family 'fantasy'.      \value Cursive the font matcher prefers fonts that map to the     CSS generic font-family 'cursive'.      \value System the font matcher prefers system fonts. */
end_comment
begin_comment
comment|/*!     \enum QFont::StyleStrategy      The style strategy tells the \l{QFont}{font matching} algorithm     what type of fonts should be used to find an appropriate default     family.      The following strategies are available:      \value PreferDefault the default style strategy. It does not prefer            any type of font.     \value PreferBitmap prefers bitmap fonts (as opposed to outline            fonts).     \value PreferDevice prefers device fonts.     \value PreferOutline prefers outline fonts (as opposed to bitmap fonts).     \value ForceOutline forces the use of outline fonts.     \value NoAntialias don't antialias the fonts.     \value PreferAntialias antialias if possible.     \value OpenGLCompatible forces the use of OpenGL compatible            fonts.     \value NoFontMerging If the font selected for a certain writing system            does not contain a character requested to draw, then Qt automatically chooses a similar            looking font that contains the character. The NoFontMerging flag disables this feature.            Please note that enabling this flag will not prevent Qt from automatically picking a            suitable font when the selected font does not support the writing system of the text.      Any of these may be OR-ed with one of these flags:      \value PreferMatch prefer an exact match. The font matcher will try to            use the exact font size that has been specified.     \value PreferQuality prefer the best quality font. The font matcher            will use the nearest standard point size that the font            supports.     \value ForceIntegerMetrics forces the use of integer values in font engines that support fractional            font metrics. */
end_comment
begin_comment
comment|/*!     Sets the style hint and strategy to \a hint and \a strategy,     respectively.      If these aren't set explicitly the style hint will default to     \c AnyStyle and the style strategy to \c PreferDefault.      Qt does not support style hints on X11 since this information     is not provided by the window system.      \sa StyleHint, styleHint(), StyleStrategy, styleStrategy(), QFontInfo */
end_comment
begin_function
DECL|function|setStyleHint
name|void
name|QFont
operator|::
name|setStyleHint
parameter_list|(
name|StyleHint
name|hint
parameter_list|,
name|StyleStrategy
name|strategy
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|resolve_mask
operator|&
operator|(
name|QFont
operator|::
name|StyleHintResolved
operator||
name|QFont
operator|::
name|StyleStrategyResolved
operator|)
operator|)
operator|&&
operator|(
name|StyleHint
operator|)
name|d
operator|->
name|request
operator|.
name|styleHint
operator|==
name|hint
operator|&&
operator|(
name|StyleStrategy
operator|)
name|d
operator|->
name|request
operator|.
name|styleStrategy
operator|==
name|strategy
condition|)
return|return;
name|d
operator|->
name|request
operator|.
name|styleHint
operator|=
name|hint
expr_stmt|;
name|d
operator|->
name|request
operator|.
name|styleStrategy
operator|=
name|strategy
expr_stmt|;
name|resolve_mask
operator||=
name|QFont
operator|::
name|StyleHintResolved
expr_stmt|;
name|resolve_mask
operator||=
name|QFont
operator|::
name|StyleStrategyResolved
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the style strategy for the font to \a s.      \sa QFont::StyleStrategy */
end_comment
begin_function
DECL|function|setStyleStrategy
name|void
name|QFont
operator|::
name|setStyleStrategy
parameter_list|(
name|StyleStrategy
name|s
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|resolve_mask
operator|&
name|QFont
operator|::
name|StyleStrategyResolved
operator|)
operator|&&
name|s
operator|==
operator|(
name|StyleStrategy
operator|)
name|d
operator|->
name|request
operator|.
name|styleStrategy
condition|)
return|return;
name|d
operator|->
name|request
operator|.
name|styleStrategy
operator|=
name|s
expr_stmt|;
name|resolve_mask
operator||=
name|QFont
operator|::
name|StyleStrategyResolved
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \enum QFont::Stretch      Predefined stretch values that follow the CSS naming convention. The higher     the value, the more stretched the text is.      \value UltraCondensed 50     \value ExtraCondensed 62     \value Condensed 75     \value SemiCondensed 87     \value Unstretched 100     \value SemiExpanded 112     \value Expanded 125     \value ExtraExpanded 150     \value UltraExpanded 200      \sa setStretch() stretch() */
end_comment
begin_comment
comment|/*!     Returns the stretch factor for the font.      \sa setStretch()  */
end_comment
begin_function
DECL|function|stretch
name|int
name|QFont
operator|::
name|stretch
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|request
operator|.
name|stretch
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the stretch factor for the font.      The stretch factor changes the width of all characters in the font     by \a factor percent.  For example, setting \a factor to 150     results in all characters in the font being 1.5 times (ie. 150%)     wider.  The default stretch factor is 100.  The minimum stretch     factor is 1, and the maximum stretch factor is 4000.      The stretch factor is only applied to outline fonts.  The stretch     factor is ignored for bitmap fonts.      NOTE: QFont cannot stretch XLFD fonts.  When loading XLFD fonts on     X11, the stretch factor is matched against a predefined set of     values for the SETWIDTH_NAME field of the XLFD.      \sa stretch() QFont::Stretch */
end_comment
begin_function
DECL|function|setStretch
name|void
name|QFont
operator|::
name|setStretch
parameter_list|(
name|int
name|factor
parameter_list|)
block|{
if|if
condition|(
name|factor
argument_list|<
literal|1
operator|||
name|factor
argument_list|>
literal|4000
condition|)
block|{
name|qWarning
argument_list|(
literal|"QFont::setStretch: Parameter '%d' out of range"
argument_list|,
name|factor
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|(
name|resolve_mask
operator|&
name|QFont
operator|::
name|StretchResolved
operator|)
operator|&&
name|d
operator|->
name|request
operator|.
name|stretch
operator|==
operator|(
name|uint
operator|)
name|factor
condition|)
return|return;
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|request
operator|.
name|stretch
operator|=
operator|(
name|uint
operator|)
name|factor
expr_stmt|;
name|resolve_mask
operator||=
name|QFont
operator|::
name|StretchResolved
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \enum QFont::SpacingType     \since 4.4      \value PercentageSpacing  A value of 100 will keep the spacing unchanged; a value of 200 will enlarge the                                                    spacing after a character by the width of the character itself.     \value AbsoluteSpacing      A positive value increases the letter spacing by the corresponding pixels; a negative                                                    value decreases the spacing. */
end_comment
begin_comment
comment|/*!     \since 4.4     Returns the letter spacing for the font.      \sa setLetterSpacing(), letterSpacingType(), setWordSpacing()  */
end_comment
begin_function
DECL|function|letterSpacing
name|qreal
name|QFont
operator|::
name|letterSpacing
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|letterSpacing
operator|.
name|toReal
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4     Sets the letter spacing for the font to \a spacing and the type     of spacing to \a type.      Letter spacing changes the default spacing between individual     letters in the font.  The spacing between the letters can be     made smaller as well as larger.      \sa letterSpacing(), letterSpacingType(), setWordSpacing() */
end_comment
begin_function
DECL|function|setLetterSpacing
name|void
name|QFont
operator|::
name|setLetterSpacing
parameter_list|(
name|SpacingType
name|type
parameter_list|,
name|qreal
name|spacing
parameter_list|)
block|{
specifier|const
name|QFixed
name|newSpacing
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|spacing
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|absoluteSpacing
init|=
name|type
operator|==
name|AbsoluteSpacing
decl_stmt|;
if|if
condition|(
operator|(
name|resolve_mask
operator|&
name|QFont
operator|::
name|LetterSpacingResolved
operator|)
operator|&&
name|d
operator|->
name|letterSpacingIsAbsolute
operator|==
name|absoluteSpacing
operator|&&
name|d
operator|->
name|letterSpacing
operator|==
name|newSpacing
condition|)
return|return;
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|letterSpacing
operator|=
name|newSpacing
expr_stmt|;
name|d
operator|->
name|letterSpacingIsAbsolute
operator|=
name|absoluteSpacing
expr_stmt|;
name|resolve_mask
operator||=
name|QFont
operator|::
name|LetterSpacingResolved
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4     Returns the spacing type used for letter spacing.      \sa letterSpacing(), setLetterSpacing(), setWordSpacing() */
end_comment
begin_function
DECL|function|letterSpacingType
name|QFont
operator|::
name|SpacingType
name|QFont
operator|::
name|letterSpacingType
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|letterSpacingIsAbsolute
condition|?
name|AbsoluteSpacing
else|:
name|PercentageSpacing
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4     Returns the word spacing for the font.      \sa setWordSpacing(), setLetterSpacing()  */
end_comment
begin_function
DECL|function|wordSpacing
name|qreal
name|QFont
operator|::
name|wordSpacing
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|wordSpacing
operator|.
name|toReal
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4     Sets the word spacing for the font to \a spacing.      Word spacing changes the default spacing between individual     words. A positive value increases the word spacing     by a corresponding amount of pixels, while a negative value     decreases the inter-word spacing accordingly.      Word spacing will not apply to writing systems, where indiviaul     words are not separated by white space.      \sa wordSpacing(), setLetterSpacing() */
end_comment
begin_function
DECL|function|setWordSpacing
name|void
name|QFont
operator|::
name|setWordSpacing
parameter_list|(
name|qreal
name|spacing
parameter_list|)
block|{
specifier|const
name|QFixed
name|newSpacing
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|spacing
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|resolve_mask
operator|&
name|QFont
operator|::
name|WordSpacingResolved
operator|)
operator|&&
name|d
operator|->
name|wordSpacing
operator|==
name|newSpacing
condition|)
return|return;
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|wordSpacing
operator|=
name|newSpacing
expr_stmt|;
name|resolve_mask
operator||=
name|QFont
operator|::
name|WordSpacingResolved
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \enum QFont::Capitalization     \since 4.4      Rendering option for text this font applies to.       \value MixedCase    This is the normal text rendering option where no capitalization change is applied.     \value AllUppercase This alters the text to be rendered in all uppercase type.     \value AllLowercase This alters the text to be rendered in all lowercase type.     \value SmallCaps    This alters the text to be rendered in small-caps type.     \value Capitalize   This alters the text to be rendered with the first character of each word as an uppercase character. */
end_comment
begin_comment
comment|/*!     \since 4.4     Sets the capitalization of the text in this font to \a caps.      A font's capitalization makes the text appear in the selected capitalization mode.      \sa capitalization() */
end_comment
begin_function
DECL|function|setCapitalization
name|void
name|QFont
operator|::
name|setCapitalization
parameter_list|(
name|Capitalization
name|caps
parameter_list|)
block|{
if|if
condition|(
operator|(
name|resolve_mask
operator|&
name|QFont
operator|::
name|CapitalizationResolved
operator|)
operator|&&
name|capitalization
argument_list|()
operator|==
name|caps
condition|)
return|return;
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|capital
operator|=
name|caps
expr_stmt|;
name|resolve_mask
operator||=
name|QFont
operator|::
name|CapitalizationResolved
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4     Returns the current capitalization type of the font.      \sa setCapitalization() */
end_comment
begin_function
DECL|function|capitalization
name|QFont
operator|::
name|Capitalization
name|QFont
operator|::
name|capitalization
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QFont
operator|::
name|Capitalization
argument_list|>
argument_list|(
name|d
operator|->
name|capital
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     If \a enable is true, turns raw mode on; otherwise turns raw mode     off. This function only has an effect under X11.      If raw mode is enabled, Qt will search for an X font with a     complete font name matching the family name, ignoring all other     values set for the QFont. If the font name matches several fonts,     Qt will use the first font returned by X. QFontInfo \e cannot be     used to fetch information about a QFont using raw mode (it will     return the values set in the QFont for all parameters, including     the family name).      \warning Do not use raw mode unless you really, really need it! In     most (if not all) cases, setRawName() is a much better choice.      \sa rawMode(), setRawName() */
end_comment
begin_function
DECL|function|setRawMode
name|void
name|QFont
operator|::
name|setRawMode
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|bool
operator|)
name|d
operator|->
name|rawMode
operator|==
name|enable
condition|)
return|return;
name|d
operator|->
name|rawMode
operator|=
name|enable
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns true if a window system font exactly matching the settings     of this font is available.      \sa QFontInfo */
end_comment
begin_function
DECL|function|exactMatch
name|bool
name|QFont
operator|::
name|exactMatch
parameter_list|()
specifier|const
block|{
name|QFontEngine
modifier|*
name|engine
init|=
name|d
operator|->
name|engineForScript
argument_list|(
name|QUnicodeTables
operator|::
name|Common
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|engine
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
name|d
operator|->
name|rawMode
condition|?
name|engine
operator|->
name|type
argument_list|()
operator|!=
name|QFontEngine
operator|::
name|Box
else|:
name|d
operator|->
name|request
operator|.
name|exactMatch
argument_list|(
name|engine
operator|->
name|fontDef
argument_list|)
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if this font is equal to \a f; otherwise returns     false.      Two QFonts are considered equal if their font attributes are     equal. If rawMode() is enabled for both fonts, only the family     fields are compared.      \sa operator!=() isCopyOf() */
end_comment
begin_function
DECL|function|operator ==
name|bool
name|QFont
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|QFont
modifier|&
name|f
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|f
operator|.
name|d
operator|==
name|d
operator|||
operator|(
name|f
operator|.
name|d
operator|->
name|request
operator|==
name|d
operator|->
name|request
operator|&&
name|f
operator|.
name|d
operator|->
name|request
operator|.
name|pointSize
operator|==
name|d
operator|->
name|request
operator|.
name|pointSize
operator|&&
name|f
operator|.
name|d
operator|->
name|underline
operator|==
name|d
operator|->
name|underline
operator|&&
name|f
operator|.
name|d
operator|->
name|overline
operator|==
name|d
operator|->
name|overline
operator|&&
name|f
operator|.
name|d
operator|->
name|strikeOut
operator|==
name|d
operator|->
name|strikeOut
operator|&&
name|f
operator|.
name|d
operator|->
name|kerning
operator|==
name|d
operator|->
name|kerning
operator|&&
name|f
operator|.
name|d
operator|->
name|capital
operator|==
name|d
operator|->
name|capital
operator|&&
name|f
operator|.
name|d
operator|->
name|letterSpacingIsAbsolute
operator|==
name|d
operator|->
name|letterSpacingIsAbsolute
operator|&&
name|f
operator|.
name|d
operator|->
name|letterSpacing
operator|==
name|d
operator|->
name|letterSpacing
operator|&&
name|f
operator|.
name|d
operator|->
name|wordSpacing
operator|==
name|d
operator|->
name|wordSpacing
operator|)
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     Provides an arbitrary comparison of this font and font \a f.     All that is guaranteed is that the operator returns false if both     fonts are equal and that (f1 \< f2) == !(f2 \< f1) if the fonts     are not equal.      This function is useful in some circumstances, for example if you     want to use QFont objects as keys in a QMap.      \sa operator==() operator!=() isCopyOf() */
end_comment
begin_function
DECL|function|operator <
name|bool
name|QFont
operator|::
name|operator
name|<
parameter_list|(
specifier|const
name|QFont
modifier|&
name|f
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|f
operator|.
name|d
operator|==
name|d
condition|)
return|return
literal|false
return|;
comment|// the< operator for fontdefs ignores point sizes.
name|QFontDef
modifier|&
name|r1
init|=
name|f
operator|.
name|d
operator|->
name|request
decl_stmt|;
name|QFontDef
modifier|&
name|r2
init|=
name|d
operator|->
name|request
decl_stmt|;
if|if
condition|(
name|r1
operator|.
name|pointSize
operator|!=
name|r2
operator|.
name|pointSize
condition|)
return|return
name|r1
operator|.
name|pointSize
operator|<
name|r2
operator|.
name|pointSize
return|;
if|if
condition|(
name|r1
operator|.
name|pixelSize
operator|!=
name|r2
operator|.
name|pixelSize
condition|)
return|return
name|r1
operator|.
name|pixelSize
operator|<
name|r2
operator|.
name|pixelSize
return|;
if|if
condition|(
name|r1
operator|.
name|weight
operator|!=
name|r2
operator|.
name|weight
condition|)
return|return
name|r1
operator|.
name|weight
operator|<
name|r2
operator|.
name|weight
return|;
if|if
condition|(
name|r1
operator|.
name|style
operator|!=
name|r2
operator|.
name|style
condition|)
return|return
name|r1
operator|.
name|style
operator|<
name|r2
operator|.
name|style
return|;
if|if
condition|(
name|r1
operator|.
name|stretch
operator|!=
name|r2
operator|.
name|stretch
condition|)
return|return
name|r1
operator|.
name|stretch
operator|<
name|r2
operator|.
name|stretch
return|;
if|if
condition|(
name|r1
operator|.
name|styleHint
operator|!=
name|r2
operator|.
name|styleHint
condition|)
return|return
name|r1
operator|.
name|styleHint
operator|<
name|r2
operator|.
name|styleHint
return|;
if|if
condition|(
name|r1
operator|.
name|styleStrategy
operator|!=
name|r2
operator|.
name|styleStrategy
condition|)
return|return
name|r1
operator|.
name|styleStrategy
operator|<
name|r2
operator|.
name|styleStrategy
return|;
if|if
condition|(
name|r1
operator|.
name|family
operator|!=
name|r2
operator|.
name|family
condition|)
return|return
name|r1
operator|.
name|family
operator|<
name|r2
operator|.
name|family
return|;
if|if
condition|(
name|f
operator|.
name|d
operator|->
name|capital
operator|!=
name|d
operator|->
name|capital
condition|)
return|return
name|f
operator|.
name|d
operator|->
name|capital
operator|<
name|d
operator|->
name|capital
return|;
if|if
condition|(
name|f
operator|.
name|d
operator|->
name|letterSpacingIsAbsolute
operator|!=
name|d
operator|->
name|letterSpacingIsAbsolute
condition|)
return|return
name|f
operator|.
name|d
operator|->
name|letterSpacingIsAbsolute
operator|<
name|d
operator|->
name|letterSpacingIsAbsolute
return|;
if|if
condition|(
name|f
operator|.
name|d
operator|->
name|letterSpacing
operator|!=
name|d
operator|->
name|letterSpacing
condition|)
return|return
name|f
operator|.
name|d
operator|->
name|letterSpacing
operator|<
name|d
operator|->
name|letterSpacing
return|;
if|if
condition|(
name|f
operator|.
name|d
operator|->
name|wordSpacing
operator|!=
name|d
operator|->
name|wordSpacing
condition|)
return|return
name|f
operator|.
name|d
operator|->
name|wordSpacing
operator|<
name|d
operator|->
name|wordSpacing
return|;
name|int
name|f1attrs
init|=
operator|(
name|f
operator|.
name|d
operator|->
name|underline
operator|<<
literal|3
operator|)
operator|+
operator|(
name|f
operator|.
name|d
operator|->
name|overline
operator|<<
literal|2
operator|)
operator|+
operator|(
name|f
operator|.
name|d
operator|->
name|strikeOut
operator|<<
literal|1
operator|)
operator|+
name|f
operator|.
name|d
operator|->
name|kerning
decl_stmt|;
name|int
name|f2attrs
init|=
operator|(
name|d
operator|->
name|underline
operator|<<
literal|3
operator|)
operator|+
operator|(
name|d
operator|->
name|overline
operator|<<
literal|2
operator|)
operator|+
operator|(
name|d
operator|->
name|strikeOut
operator|<<
literal|1
operator|)
operator|+
name|d
operator|->
name|kerning
decl_stmt|;
return|return
name|f1attrs
operator|<
name|f2attrs
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if this font is different from \a f; otherwise     returns false.      Two QFonts are considered to be different if their font attributes     are different. If rawMode() is enabled for both fonts, only the     family fields are compared.      \sa operator==() */
end_comment
begin_function
DECL|function|operator !=
name|bool
name|QFont
operator|::
name|operator
name|!=
parameter_list|(
specifier|const
name|QFont
modifier|&
name|f
parameter_list|)
specifier|const
block|{
return|return
operator|!
operator|(
name|operator
name|==
argument_list|(
name|f
argument_list|)
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!    Returns the font as a QVariant */
end_comment
begin_function
DECL|function|operator QVariant
name|QFont
operator|::
name|operator
name|QVariant
parameter_list|()
specifier|const
block|{
return|return
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Font
argument_list|,
name|this
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if this font and \a f are copies of each other, i.e.     one of them was created as a copy of the other and neither has     been modified since. This is much stricter than equality.      \sa operator=() operator==() */
end_comment
begin_function
DECL|function|isCopyOf
name|bool
name|QFont
operator|::
name|isCopyOf
parameter_list|(
specifier|const
name|QFont
modifier|&
name|f
parameter_list|)
specifier|const
block|{
return|return
name|d
operator|==
name|f
operator|.
name|d
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if raw mode is used for font name matching; otherwise     returns false.      \sa setRawMode() rawName() */
end_comment
begin_function
DECL|function|rawMode
name|bool
name|QFont
operator|::
name|rawMode
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|rawMode
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a new QFont that has attributes copied from \a other that     have not been previously set on this font. */
end_comment
begin_function
DECL|function|resolve
name|QFont
name|QFont
operator|::
name|resolve
parameter_list|(
specifier|const
name|QFont
modifier|&
name|other
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|*
name|this
operator|==
name|other
operator|&&
operator|(
name|resolve_mask
operator|==
name|other
operator|.
name|resolve_mask
operator|||
name|resolve_mask
operator|==
literal|0
operator|)
operator|&&
name|d
operator|->
name|dpi
operator|==
name|other
operator|.
name|d
operator|->
name|dpi
condition|)
block|{
name|QFont
name|o
init|=
name|other
decl_stmt|;
name|o
operator|.
name|resolve_mask
operator|=
name|resolve_mask
expr_stmt|;
return|return
name|o
return|;
block|}
name|QFont
name|font
argument_list|(
operator|*
name|this
argument_list|)
decl_stmt|;
name|font
operator|.
name|detach
argument_list|()
expr_stmt|;
name|font
operator|.
name|d
operator|->
name|resolve
argument_list|(
name|resolve_mask
argument_list|,
name|other
operator|.
name|d
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|font
return|;
block|}
end_function
begin_comment
comment|/*!     \fn uint QFont::resolve() const     \internal */
end_comment
begin_comment
comment|/*!     \fn void QFont::resolve(uint mask)     \internal */
end_comment
begin_comment
comment|/*****************************************************************************   QFont substitution management  *****************************************************************************/
end_comment
begin_typedef
DECL|typedef|QFontSubst
typedef|typedef
name|QHash
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
name|QFontSubst
typedef|;
end_typedef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QFontSubst
argument_list|,
argument|globalFontSubst
argument_list|)
end_macro
begin_comment
comment|// create substitution dict
end_comment
begin_function
DECL|function|initFontSubst
specifier|static
name|void
name|initFontSubst
parameter_list|()
block|{
comment|// default substitutions
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|initTbl
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|QFontSubst
modifier|*
name|fontSubst
init|=
name|globalFontSubst
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|fontSubst
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fontSubst
operator|->
name|isEmpty
argument_list|()
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|initTbl
index|[
name|i
index|]
operator|!=
literal|0
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|QStringList
modifier|&
name|list
init|=
operator|(
operator|*
name|fontSubst
operator|)
index|[
name|QString
operator|::
name|fromLatin1
argument_list|(
name|initTbl
index|[
name|i
index|]
argument_list|)
index|]
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|initTbl
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the first family name to be used whenever \a familyName is     specified. The lookup is case insensitive.      If there is no substitution for \a familyName, \a familyName is     returned.      To obtain a list of substitutions use substitutes().      \sa setFamily() insertSubstitutions() insertSubstitution() removeSubstitution() */
end_comment
begin_function
DECL|function|substitute
name|QString
name|QFont
operator|::
name|substitute
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|)
block|{
name|initFontSubst
argument_list|()
expr_stmt|;
name|QFontSubst
modifier|*
name|fontSubst
init|=
name|globalFontSubst
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|fontSubst
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QFontSubst
operator|::
name|ConstIterator
name|it
init|=
name|fontSubst
operator|->
name|constFind
argument_list|(
name|familyName
operator|.
name|toLower
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|fontSubst
operator|->
name|constEnd
argument_list|()
operator|&&
operator|!
operator|(
operator|*
name|it
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|(
operator|*
name|it
operator|)
operator|.
name|first
argument_list|()
return|;
return|return
name|familyName
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of family names to be used whenever \a familyName     is specified. The lookup is case insensitive.      If there is no substitution for \a familyName, an empty list is     returned.      \sa substitute() insertSubstitutions() insertSubstitution() removeSubstitution()  */
end_comment
begin_function
DECL|function|substitutes
name|QStringList
name|QFont
operator|::
name|substitutes
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|)
block|{
name|initFontSubst
argument_list|()
expr_stmt|;
name|QFontSubst
modifier|*
name|fontSubst
init|=
name|globalFontSubst
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|fontSubst
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|fontSubst
operator|->
name|value
argument_list|(
name|familyName
operator|.
name|toLower
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Inserts \a substituteName into the substitution     table for the family \a familyName.      \sa insertSubstitutions() removeSubstitution() substitutions() substitute() substitutes() */
end_comment
begin_function
DECL|function|insertSubstitution
name|void
name|QFont
operator|::
name|insertSubstitution
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|,
specifier|const
name|QString
modifier|&
name|substituteName
parameter_list|)
block|{
name|initFontSubst
argument_list|()
expr_stmt|;
name|QFontSubst
modifier|*
name|fontSubst
init|=
name|globalFontSubst
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|fontSubst
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QStringList
modifier|&
name|list
init|=
operator|(
operator|*
name|fontSubst
operator|)
index|[
name|familyName
operator|.
name|toLower
argument_list|()
index|]
decl_stmt|;
name|QString
name|s
init|=
name|substituteName
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
name|list
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Inserts the list of families \a substituteNames into the     substitution list for \a familyName.      \sa insertSubstitution(), removeSubstitution(), substitutions(), substitute() */
end_comment
begin_function
DECL|function|insertSubstitutions
name|void
name|QFont
operator|::
name|insertSubstitutions
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|substituteNames
parameter_list|)
block|{
name|initFontSubst
argument_list|()
expr_stmt|;
name|QFontSubst
modifier|*
name|fontSubst
init|=
name|globalFontSubst
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|fontSubst
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QStringList
modifier|&
name|list
init|=
operator|(
operator|*
name|fontSubst
operator|)
index|[
name|familyName
operator|.
name|toLower
argument_list|()
index|]
decl_stmt|;
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|substituteNames
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|substituteNames
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|QString
name|s
init|=
operator|(
operator|*
name|it
operator|)
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
name|list
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|it
operator|++
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*! \fn void QFont::initialize()   \internal    Internal function that initializes the font system.  The font cache   and font dict do not alloc the keys. The key is a QString which is   shared between QFontPrivate and QXFontName. */
end_comment
begin_comment
comment|/*! \fn void QFont::cleanup()   \internal    Internal function that cleans up the font system. */
end_comment
begin_comment
comment|// ### mark: should be called removeSubstitutions()
end_comment
begin_comment
comment|/*!     Removes all the substitutions for \a familyName.      \sa insertSubstitutions(), insertSubstitution(), substitutions(), substitute() */
end_comment
begin_function
DECL|function|removeSubstitution
name|void
name|QFont
operator|::
name|removeSubstitution
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|)
block|{
comment|// ### function name should be removeSubstitutions() or
comment|// ### removeSubstitutionList()
name|initFontSubst
argument_list|()
expr_stmt|;
name|QFontSubst
modifier|*
name|fontSubst
init|=
name|globalFontSubst
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|fontSubst
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|fontSubst
operator|->
name|remove
argument_list|(
name|familyName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns a sorted list of substituted family names.      \sa insertSubstitution(), removeSubstitution(), substitute() */
end_comment
begin_function
DECL|function|substitutions
name|QStringList
name|QFont
operator|::
name|substitutions
parameter_list|()
block|{
name|initFontSubst
argument_list|()
expr_stmt|;
name|QFontSubst
modifier|*
name|fontSubst
init|=
name|globalFontSubst
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|fontSubst
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QStringList
name|ret
decl_stmt|;
name|QFontSubst
operator|::
name|ConstIterator
name|it
init|=
name|fontSubst
operator|->
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|fontSubst
operator|->
name|constEnd
argument_list|()
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
name|ret
operator|.
name|sort
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*  \internal     Internal function. Converts boolean font settings to an unsigned     8-bit number. Used for serialization etc. */
end_comment
begin_function
DECL|function|get_font_bits
specifier|static
name|quint8
name|get_font_bits
parameter_list|(
name|int
name|version
parameter_list|,
specifier|const
name|QFontPrivate
modifier|*
name|f
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|f
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|quint8
name|bits
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|f
operator|->
name|request
operator|.
name|style
condition|)
name|bits
operator||=
literal|0x01
expr_stmt|;
if|if
condition|(
name|f
operator|->
name|underline
condition|)
name|bits
operator||=
literal|0x02
expr_stmt|;
if|if
condition|(
name|f
operator|->
name|overline
condition|)
name|bits
operator||=
literal|0x40
expr_stmt|;
if|if
condition|(
name|f
operator|->
name|strikeOut
condition|)
name|bits
operator||=
literal|0x04
expr_stmt|;
if|if
condition|(
name|f
operator|->
name|request
operator|.
name|fixedPitch
condition|)
name|bits
operator||=
literal|0x08
expr_stmt|;
comment|// if (f.hintSetByUser)
comment|// bits |= 0x10;
if|if
condition|(
name|f
operator|->
name|rawMode
condition|)
name|bits
operator||=
literal|0x20
expr_stmt|;
if|if
condition|(
name|version
operator|>=
name|QDataStream
operator|::
name|Qt_4_0
condition|)
block|{
if|if
condition|(
name|f
operator|->
name|kerning
condition|)
name|bits
operator||=
literal|0x10
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|->
name|request
operator|.
name|style
operator|==
name|QFont
operator|::
name|StyleOblique
condition|)
name|bits
operator||=
literal|0x80
expr_stmt|;
return|return
name|bits
return|;
block|}
end_function
begin_function
DECL|function|get_extended_font_bits
specifier|static
name|quint8
name|get_extended_font_bits
parameter_list|(
specifier|const
name|QFontPrivate
modifier|*
name|f
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|f
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|quint8
name|bits
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|f
operator|->
name|request
operator|.
name|ignorePitch
condition|)
name|bits
operator||=
literal|0x01
expr_stmt|;
if|if
condition|(
name|f
operator|->
name|letterSpacingIsAbsolute
condition|)
name|bits
operator||=
literal|0x02
expr_stmt|;
return|return
name|bits
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_comment
comment|/*  \internal     Internal function. Sets boolean font settings from an unsigned     8-bit number. Used for serialization etc. */
end_comment
begin_function
DECL|function|set_font_bits
specifier|static
name|void
name|set_font_bits
parameter_list|(
name|int
name|version
parameter_list|,
name|quint8
name|bits
parameter_list|,
name|QFontPrivate
modifier|*
name|f
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|f
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|f
operator|->
name|request
operator|.
name|style
operator|=
operator|(
name|bits
operator|&
literal|0x01
operator|)
operator|!=
literal|0
condition|?
name|QFont
operator|::
name|StyleItalic
else|:
name|QFont
operator|::
name|StyleNormal
expr_stmt|;
name|f
operator|->
name|underline
operator|=
operator|(
name|bits
operator|&
literal|0x02
operator|)
operator|!=
literal|0
expr_stmt|;
name|f
operator|->
name|overline
operator|=
operator|(
name|bits
operator|&
literal|0x40
operator|)
operator|!=
literal|0
expr_stmt|;
name|f
operator|->
name|strikeOut
operator|=
operator|(
name|bits
operator|&
literal|0x04
operator|)
operator|!=
literal|0
expr_stmt|;
name|f
operator|->
name|request
operator|.
name|fixedPitch
operator|=
operator|(
name|bits
operator|&
literal|0x08
operator|)
operator|!=
literal|0
expr_stmt|;
comment|// f->hintSetByUser      = (bits& 0x10) != 0;
name|f
operator|->
name|rawMode
operator|=
operator|(
name|bits
operator|&
literal|0x20
operator|)
operator|!=
literal|0
expr_stmt|;
if|if
condition|(
name|version
operator|>=
name|QDataStream
operator|::
name|Qt_4_0
condition|)
name|f
operator|->
name|kerning
operator|=
operator|(
name|bits
operator|&
literal|0x10
operator|)
operator|!=
literal|0
expr_stmt|;
if|if
condition|(
operator|(
name|bits
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|)
name|f
operator|->
name|request
operator|.
name|style
operator|=
name|QFont
operator|::
name|StyleOblique
expr_stmt|;
block|}
end_function
begin_function
DECL|function|set_extended_font_bits
specifier|static
name|void
name|set_extended_font_bits
parameter_list|(
name|quint8
name|bits
parameter_list|,
name|QFontPrivate
modifier|*
name|f
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|f
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|f
operator|->
name|request
operator|.
name|ignorePitch
operator|=
operator|(
name|bits
operator|&
literal|0x01
operator|)
operator|!=
literal|0
expr_stmt|;
name|f
operator|->
name|letterSpacingIsAbsolute
operator|=
operator|(
name|bits
operator|&
literal|0x02
operator|)
operator|!=
literal|0
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     Returns the font's key, a textual representation of a font. It is     typically used as the key for a cache or dictionary of fonts.      \sa QMap */
end_comment
begin_function
DECL|function|key
name|QString
name|QFont
operator|::
name|key
parameter_list|()
specifier|const
block|{
return|return
name|toString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a description of the font. The description is a     comma-separated list of the attributes, perfectly suited for use     in QSettings.      \sa fromString()  */
end_comment
begin_function
DECL|function|toString
name|QString
name|QFont
operator|::
name|toString
parameter_list|()
specifier|const
block|{
specifier|const
name|QChar
name|comma
argument_list|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|family
argument_list|()
operator|+
name|comma
operator|+
name|QString
operator|::
name|number
argument_list|(
name|pointSizeF
argument_list|()
argument_list|)
operator|+
name|comma
operator|+
name|QString
operator|::
name|number
argument_list|(
name|pixelSize
argument_list|()
argument_list|)
operator|+
name|comma
operator|+
name|QString
operator|::
name|number
argument_list|(
operator|(
name|int
operator|)
name|styleHint
argument_list|()
argument_list|)
operator|+
name|comma
operator|+
name|QString
operator|::
name|number
argument_list|(
name|weight
argument_list|()
argument_list|)
operator|+
name|comma
operator|+
name|QString
operator|::
name|number
argument_list|(
operator|(
name|int
operator|)
name|style
argument_list|()
argument_list|)
operator|+
name|comma
operator|+
name|QString
operator|::
name|number
argument_list|(
operator|(
name|int
operator|)
name|underline
argument_list|()
argument_list|)
operator|+
name|comma
operator|+
name|QString
operator|::
name|number
argument_list|(
operator|(
name|int
operator|)
name|strikeOut
argument_list|()
argument_list|)
operator|+
name|comma
operator|+
name|QString
operator|::
name|number
argument_list|(
operator|(
name|int
operator|)
name|fixedPitch
argument_list|()
argument_list|)
operator|+
name|comma
operator|+
name|QString
operator|::
name|number
argument_list|(
operator|(
name|int
operator|)
name|rawMode
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets this font to match the description \a descrip. The description     is a comma-separated list of the font attributes, as returned by     toString().      \sa toString()  */
end_comment
begin_function
DECL|function|fromString
name|bool
name|QFont
operator|::
name|fromString
parameter_list|(
specifier|const
name|QString
modifier|&
name|descrip
parameter_list|)
block|{
name|QStringList
name|l
argument_list|(
name|descrip
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|l
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|count
operator|||
operator|(
name|count
operator|>
literal|2
operator|&&
name|count
operator|<
literal|9
operator|)
operator|||
name|count
operator|>
literal|11
condition|)
block|{
name|qWarning
argument_list|(
literal|"QFont::fromString: Invalid description '%s'"
argument_list|,
name|descrip
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"(empty)"
else|:
name|descrip
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|setFamily
argument_list|(
name|l
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|>
literal|1
operator|&&
name|l
index|[
literal|1
index|]
operator|.
name|toDouble
argument_list|()
operator|>
literal|0.0
condition|)
name|setPointSizeF
argument_list|(
name|l
index|[
literal|1
index|]
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|9
condition|)
block|{
name|setStyleHint
argument_list|(
operator|(
name|StyleHint
operator|)
name|l
index|[
literal|2
index|]
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|setWeight
argument_list|(
name|qMax
argument_list|(
name|qMin
argument_list|(
literal|99
argument_list|,
name|l
index|[
literal|3
index|]
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|setItalic
argument_list|(
name|l
index|[
literal|4
index|]
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|setUnderline
argument_list|(
name|l
index|[
literal|5
index|]
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|setStrikeOut
argument_list|(
name|l
index|[
literal|6
index|]
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|setFixedPitch
argument_list|(
name|l
index|[
literal|7
index|]
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|setRawMode
argument_list|(
name|l
index|[
literal|8
index|]
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|count
operator|==
literal|10
condition|)
block|{
if|if
condition|(
name|l
index|[
literal|2
index|]
operator|.
name|toInt
argument_list|()
operator|>
literal|0
condition|)
name|setPixelSize
argument_list|(
name|l
index|[
literal|2
index|]
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|setStyleHint
argument_list|(
operator|(
name|StyleHint
operator|)
name|l
index|[
literal|3
index|]
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|setWeight
argument_list|(
name|qMax
argument_list|(
name|qMin
argument_list|(
literal|99
argument_list|,
name|l
index|[
literal|4
index|]
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|setStyle
argument_list|(
operator|(
name|QFont
operator|::
name|Style
operator|)
name|l
index|[
literal|5
index|]
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|setUnderline
argument_list|(
name|l
index|[
literal|6
index|]
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|setStrikeOut
argument_list|(
name|l
index|[
literal|7
index|]
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|setFixedPitch
argument_list|(
name|l
index|[
literal|8
index|]
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|setRawMode
argument_list|(
name|l
index|[
literal|9
index|]
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|>=
literal|9
operator|&&
operator|!
name|d
operator|->
name|request
operator|.
name|fixedPitch
condition|)
comment|// assume 'false' fixedPitch equals default
name|d
operator|->
name|request
operator|.
name|ignorePitch
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*! \internal    Internal function that dumps font cache statistics. */
end_comment
begin_function
DECL|function|cacheStatistics
name|void
name|QFont
operator|::
name|cacheStatistics
parameter_list|()
block|{   }
end_function
begin_comment
comment|/*****************************************************************************   QFont stream functions  *****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_comment
comment|/*!     \relates QFont      Writes the font \a font to the data stream \a s. (toString()     writes to a text stream.)      \sa \link datastreamformat.html Format of the QDataStream operators \endlink */
end_comment
begin_function
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
specifier|const
name|QFont
modifier|&
name|font
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|==
literal|1
condition|)
block|{
name|s
operator|<<
name|font
operator|.
name|d
operator|->
name|request
operator|.
name|family
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|s
operator|<<
name|font
operator|.
name|d
operator|->
name|request
operator|.
name|family
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|>=
name|QDataStream
operator|::
name|Qt_4_0
condition|)
block|{
comment|// 4.0
name|double
name|pointSize
init|=
name|font
operator|.
name|d
operator|->
name|request
operator|.
name|pointSize
decl_stmt|;
name|qint32
name|pixelSize
init|=
name|font
operator|.
name|d
operator|->
name|request
operator|.
name|pixelSize
decl_stmt|;
name|s
operator|<<
name|pointSize
expr_stmt|;
name|s
operator|<<
name|pixelSize
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|<=
literal|3
condition|)
block|{
name|qint16
name|pointSize
init|=
call|(
name|qint16
call|)
argument_list|(
name|font
operator|.
name|d
operator|->
name|request
operator|.
name|pointSize
operator|*
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
name|pointSize
operator|<
literal|0
condition|)
block|{
name|pointSize
operator|=
operator|(
name|qint16
operator|)
name|QFontInfo
argument_list|(
name|font
argument_list|)
operator|.
name|pointSize
argument_list|()
operator|*
literal|10
expr_stmt|;
block|}
name|s
operator|<<
name|pointSize
expr_stmt|;
block|}
else|else
block|{
name|s
operator|<<
call|(
name|qint16
call|)
argument_list|(
name|font
operator|.
name|d
operator|->
name|request
operator|.
name|pointSize
operator|*
literal|10
argument_list|)
expr_stmt|;
name|s
operator|<<
operator|(
name|qint16
operator|)
name|font
operator|.
name|d
operator|->
name|request
operator|.
name|pixelSize
expr_stmt|;
block|}
name|s
operator|<<
operator|(
name|quint8
operator|)
name|font
operator|.
name|d
operator|->
name|request
operator|.
name|styleHint
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|>=
name|QDataStream
operator|::
name|Qt_3_1
condition|)
name|s
operator|<<
operator|(
name|quint8
operator|)
name|font
operator|.
name|d
operator|->
name|request
operator|.
name|styleStrategy
expr_stmt|;
name|s
operator|<<
operator|(
name|quint8
operator|)
literal|0
operator|<<
operator|(
name|quint8
operator|)
name|font
operator|.
name|d
operator|->
name|request
operator|.
name|weight
operator|<<
name|get_font_bits
argument_list|(
name|s
operator|.
name|version
argument_list|()
argument_list|,
name|font
operator|.
name|d
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|>=
name|QDataStream
operator|::
name|Qt_4_3
condition|)
name|s
operator|<<
operator|(
name|quint16
operator|)
name|font
operator|.
name|d
operator|->
name|request
operator|.
name|stretch
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|>=
name|QDataStream
operator|::
name|Qt_4_4
condition|)
name|s
operator|<<
name|get_extended_font_bits
argument_list|(
name|font
operator|.
name|d
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|>=
name|QDataStream
operator|::
name|Qt_4_5
condition|)
block|{
name|s
operator|<<
name|font
operator|.
name|d
operator|->
name|letterSpacing
operator|.
name|value
argument_list|()
expr_stmt|;
name|s
operator|<<
name|font
operator|.
name|d
operator|->
name|wordSpacing
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
end_function
begin_comment
comment|/*!     \relates QFont      Reads the font \a font from the data stream \a s. (fromString()     reads from a text stream.)      \sa \link datastreamformat.html Format of the QDataStream operators \endlink */
end_comment
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
name|QFont
modifier|&
name|font
parameter_list|)
block|{
name|font
operator|.
name|d
operator|=
operator|new
name|QFontPrivate
expr_stmt|;
name|font
operator|.
name|resolve_mask
operator|=
name|QFont
operator|::
name|AllPropertiesResolved
expr_stmt|;
name|quint8
name|styleHint
decl_stmt|,
name|styleStrategy
init|=
name|QFont
operator|::
name|PreferDefault
decl_stmt|,
name|charSet
decl_stmt|,
name|weight
decl_stmt|,
name|bits
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QByteArray
name|fam
decl_stmt|;
name|s
operator|>>
name|fam
expr_stmt|;
name|font
operator|.
name|d
operator|->
name|request
operator|.
name|family
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|fam
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|>>
name|font
operator|.
name|d
operator|->
name|request
operator|.
name|family
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|>=
name|QDataStream
operator|::
name|Qt_4_0
condition|)
block|{
comment|// 4.0
name|double
name|pointSize
decl_stmt|;
name|qint32
name|pixelSize
decl_stmt|;
name|s
operator|>>
name|pointSize
expr_stmt|;
name|s
operator|>>
name|pixelSize
expr_stmt|;
name|font
operator|.
name|d
operator|->
name|request
operator|.
name|pointSize
operator|=
name|qreal
argument_list|(
name|pointSize
argument_list|)
expr_stmt|;
name|font
operator|.
name|d
operator|->
name|request
operator|.
name|pixelSize
operator|=
name|pixelSize
expr_stmt|;
block|}
else|else
block|{
name|qint16
name|pointSize
decl_stmt|,
name|pixelSize
init|=
operator|-
literal|1
decl_stmt|;
name|s
operator|>>
name|pointSize
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|>=
literal|4
condition|)
name|s
operator|>>
name|pixelSize
expr_stmt|;
name|font
operator|.
name|d
operator|->
name|request
operator|.
name|pointSize
operator|=
name|qreal
argument_list|(
name|pointSize
operator|/
literal|10.
argument_list|)
expr_stmt|;
name|font
operator|.
name|d
operator|->
name|request
operator|.
name|pixelSize
operator|=
name|pixelSize
expr_stmt|;
block|}
name|s
operator|>>
name|styleHint
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|>=
name|QDataStream
operator|::
name|Qt_3_1
condition|)
name|s
operator|>>
name|styleStrategy
expr_stmt|;
name|s
operator|>>
name|charSet
expr_stmt|;
name|s
operator|>>
name|weight
expr_stmt|;
name|s
operator|>>
name|bits
expr_stmt|;
name|font
operator|.
name|d
operator|->
name|request
operator|.
name|styleHint
operator|=
name|styleHint
expr_stmt|;
name|font
operator|.
name|d
operator|->
name|request
operator|.
name|styleStrategy
operator|=
name|styleStrategy
expr_stmt|;
name|font
operator|.
name|d
operator|->
name|request
operator|.
name|weight
operator|=
name|weight
expr_stmt|;
name|set_font_bits
argument_list|(
name|s
operator|.
name|version
argument_list|()
argument_list|,
name|bits
argument_list|,
name|font
operator|.
name|d
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|>=
name|QDataStream
operator|::
name|Qt_4_3
condition|)
block|{
name|quint16
name|stretch
decl_stmt|;
name|s
operator|>>
name|stretch
expr_stmt|;
name|font
operator|.
name|d
operator|->
name|request
operator|.
name|stretch
operator|=
name|stretch
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|>=
name|QDataStream
operator|::
name|Qt_4_4
condition|)
block|{
name|quint8
name|extendedBits
decl_stmt|;
name|s
operator|>>
name|extendedBits
expr_stmt|;
name|set_extended_font_bits
argument_list|(
name|extendedBits
argument_list|,
name|font
operator|.
name|d
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|>=
name|QDataStream
operator|::
name|Qt_4_5
condition|)
block|{
name|int
name|value
decl_stmt|;
name|s
operator|>>
name|value
expr_stmt|;
name|font
operator|.
name|d
operator|->
name|letterSpacing
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|s
operator|>>
name|value
expr_stmt|;
name|font
operator|.
name|d
operator|->
name|wordSpacing
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_comment
comment|/*****************************************************************************   QFontInfo member functions  *****************************************************************************/
end_comment
begin_comment
comment|/*!     \class QFontInfo     \reentrant      \brief The QFontInfo class provides general information about fonts.      \ingroup appearance     \ingroup shared      The QFontInfo class provides the same access functions as QFont,     e.g. family(), pointSize(), italic(), weight(), fixedPitch(),     styleHint() etc. But whilst the QFont access functions return the     values that were set, a QFontInfo object returns the values that     apply to the font that will actually be used to draw the text.      For example, when the program asks for a 25pt Courier font on a     machine that has a non-scalable 24pt Courier font, QFont will     (normally) use the 24pt Courier for rendering. In this case,     QFont::pointSize() returns 25 and QFontInfo::pointSize() returns     24.      There are three ways to create a QFontInfo object.     \list 1     \o Calling the QFontInfo constructor with a QFont creates a font     info object for a screen-compatible font, i.e. the font cannot be     a printer font. If the font is changed later, the font     info object is \e not updated.      (Note: If you use a printer font the values returned may be     inaccurate. Printer fonts are not always accessible so the nearest     screen font is used if a printer font is supplied.)      \o QWidget::fontInfo() returns the font info for a widget's font.     This is equivalent to calling QFontInfo(widget->font()). If the     widget's font is changed later, the font info object is \e not     updated.      \o QPainter::fontInfo() returns the font info for a painter's     current font. If the painter's font is changed later, the font     info object is \e not updated.     \endlist      \sa QFont QFontMetrics QFontDatabase */
end_comment
begin_comment
comment|/*!     Constructs a font info object for \a font.      The font must be screen-compatible, i.e. a font you use when     drawing text in \link QWidget widgets\endlink or \link QPixmap     pixmaps\endlink, not QPicture or QPrinter.      The font info object holds the information for the font that is     passed in the constructor at the time it is created, and is not     updated if the font's attributes are changed later.      Use QPainter::fontInfo() to get the font info when painting.     This will give correct results also when painting on paint device     that is not screen-compatible. */
end_comment
begin_constructor
DECL|function|QFontInfo
name|QFontInfo
operator|::
name|QFontInfo
parameter_list|(
specifier|const
name|QFont
modifier|&
name|font
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|font
operator|.
name|d
operator|.
name|data
argument_list|()
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a copy of \a fi. */
end_comment
begin_constructor
DECL|function|QFontInfo
name|QFontInfo
operator|::
name|QFontInfo
parameter_list|(
specifier|const
name|QFontInfo
modifier|&
name|fi
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|fi
operator|.
name|d
operator|.
name|data
argument_list|()
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the font info object. */
end_comment
begin_destructor
DECL|function|~QFontInfo
name|QFontInfo
operator|::
name|~
name|QFontInfo
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Assigns the font info in \a fi. */
end_comment
begin_function
DECL|function|operator =
name|QFontInfo
modifier|&
name|QFontInfo
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QFontInfo
modifier|&
name|fi
parameter_list|)
block|{
name|d
operator|=
name|fi
operator|.
name|d
operator|.
name|data
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the family name of the matched window system font.      \sa QFont::family() */
end_comment
begin_function
DECL|function|family
name|QString
name|QFontInfo
operator|::
name|family
parameter_list|()
specifier|const
block|{
name|QFontEngine
modifier|*
name|engine
init|=
name|d
operator|->
name|engineForScript
argument_list|(
name|QUnicodeTables
operator|::
name|Common
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|engine
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|engine
operator|->
name|fontDef
operator|.
name|family
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.8      Returns the style name of the matched window system font on     system that supports it.      \sa QFont::styleName() */
end_comment
begin_function
DECL|function|styleName
name|QString
name|QFontInfo
operator|::
name|styleName
parameter_list|()
specifier|const
block|{
name|QFontEngine
modifier|*
name|engine
init|=
name|d
operator|->
name|engineForScript
argument_list|(
name|QUnicodeTables
operator|::
name|Common
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|engine
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|engine
operator|->
name|fontDef
operator|.
name|styleName
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the point size of the matched window system font.      \sa pointSizeF() QFont::pointSize() */
end_comment
begin_function
DECL|function|pointSize
name|int
name|QFontInfo
operator|::
name|pointSize
parameter_list|()
specifier|const
block|{
name|QFontEngine
modifier|*
name|engine
init|=
name|d
operator|->
name|engineForScript
argument_list|(
name|QUnicodeTables
operator|::
name|Common
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|engine
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|qRound
argument_list|(
name|engine
operator|->
name|fontDef
operator|.
name|pointSize
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the point size of the matched window system font.      \sa QFont::pointSizeF() */
end_comment
begin_function
DECL|function|pointSizeF
name|qreal
name|QFontInfo
operator|::
name|pointSizeF
parameter_list|()
specifier|const
block|{
name|QFontEngine
modifier|*
name|engine
init|=
name|d
operator|->
name|engineForScript
argument_list|(
name|QUnicodeTables
operator|::
name|Common
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|engine
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|engine
operator|->
name|fontDef
operator|.
name|pointSize
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the pixel size of the matched window system font.      \sa QFont::pointSize() */
end_comment
begin_function
DECL|function|pixelSize
name|int
name|QFontInfo
operator|::
name|pixelSize
parameter_list|()
specifier|const
block|{
name|QFontEngine
modifier|*
name|engine
init|=
name|d
operator|->
name|engineForScript
argument_list|(
name|QUnicodeTables
operator|::
name|Common
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|engine
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|engine
operator|->
name|fontDef
operator|.
name|pixelSize
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the italic value of the matched window system font.      \sa QFont::italic() */
end_comment
begin_function
DECL|function|italic
name|bool
name|QFontInfo
operator|::
name|italic
parameter_list|()
specifier|const
block|{
name|QFontEngine
modifier|*
name|engine
init|=
name|d
operator|->
name|engineForScript
argument_list|(
name|QUnicodeTables
operator|::
name|Common
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|engine
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|engine
operator|->
name|fontDef
operator|.
name|style
operator|!=
name|QFont
operator|::
name|StyleNormal
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the style value of the matched window system font.      \sa QFont::style() */
end_comment
begin_function
DECL|function|style
name|QFont
operator|::
name|Style
name|QFontInfo
operator|::
name|style
parameter_list|()
specifier|const
block|{
name|QFontEngine
modifier|*
name|engine
init|=
name|d
operator|->
name|engineForScript
argument_list|(
name|QUnicodeTables
operator|::
name|Common
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|engine
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
name|QFont
operator|::
name|Style
operator|)
name|engine
operator|->
name|fontDef
operator|.
name|style
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the weight of the matched window system font.      \sa QFont::weight(), bold() */
end_comment
begin_function
DECL|function|weight
name|int
name|QFontInfo
operator|::
name|weight
parameter_list|()
specifier|const
block|{
name|QFontEngine
modifier|*
name|engine
init|=
name|d
operator|->
name|engineForScript
argument_list|(
name|QUnicodeTables
operator|::
name|Common
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|engine
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|engine
operator|->
name|fontDef
operator|.
name|weight
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QFontInfo::bold() const      Returns true if weight() would return a value greater than     QFont::Normal; otherwise returns false.      \sa weight(), QFont::bold() */
end_comment
begin_comment
comment|/*!     Returns the underline value of the matched window system font.    \sa QFont::underline()    \internal    Here we read the underline flag directly from the QFont.   This is OK for X11 and for Windows because we always get what we want. */
end_comment
begin_function
DECL|function|underline
name|bool
name|QFontInfo
operator|::
name|underline
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|underline
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the overline value of the matched window system font.      \sa QFont::overline()      \internal      Here we read the overline flag directly from the QFont.     This is OK for X11 and for Windows because we always get what we want. */
end_comment
begin_function
DECL|function|overline
name|bool
name|QFontInfo
operator|::
name|overline
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|overline
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the strikeout value of the matched window system font.    \sa QFont::strikeOut()    \internal Here we read the strikeOut flag directly from the QFont.   This is OK for X11 and for Windows because we always get what we want. */
end_comment
begin_function
DECL|function|strikeOut
name|bool
name|QFontInfo
operator|::
name|strikeOut
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|strikeOut
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the fixed pitch value of the matched window system font.      \sa QFont::fixedPitch() */
end_comment
begin_function
DECL|function|fixedPitch
name|bool
name|QFontInfo
operator|::
name|fixedPitch
parameter_list|()
specifier|const
block|{
name|QFontEngine
modifier|*
name|engine
init|=
name|d
operator|->
name|engineForScript
argument_list|(
name|QUnicodeTables
operator|::
name|Common
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|engine
operator|!=
literal|0
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
if|if
condition|(
operator|!
name|engine
operator|->
name|fontDef
operator|.
name|fixedPitchComputed
condition|)
block|{
name|QChar
name|ch
index|[
literal|2
index|]
init|=
block|{
name|QLatin1Char
argument_list|(
literal|'i'
argument_list|)
block|,
name|QLatin1Char
argument_list|(
literal|'m'
argument_list|)
block|}
decl_stmt|;
name|QGlyphLayoutArray
argument_list|<
literal|2
argument_list|>
name|g
decl_stmt|;
name|int
name|l
init|=
literal|2
decl_stmt|;
name|engine
operator|->
name|stringToCMap
argument_list|(
name|ch
argument_list|,
literal|2
argument_list|,
operator|&
name|g
argument_list|,
operator|&
name|l
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|engine
operator|->
name|fontDef
operator|.
name|fixedPitch
operator|=
name|g
operator|.
name|advances_x
index|[
literal|0
index|]
operator|==
name|g
operator|.
name|advances_x
index|[
literal|1
index|]
expr_stmt|;
name|engine
operator|->
name|fontDef
operator|.
name|fixedPitchComputed
operator|=
literal|true
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|engine
operator|->
name|fontDef
operator|.
name|fixedPitch
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the style of the matched window system font.      Currently only returns the style hint set in QFont.      \sa QFont::styleHint() QFont::StyleHint */
end_comment
begin_function
DECL|function|styleHint
name|QFont
operator|::
name|StyleHint
name|QFontInfo
operator|::
name|styleHint
parameter_list|()
specifier|const
block|{
name|QFontEngine
modifier|*
name|engine
init|=
name|d
operator|->
name|engineForScript
argument_list|(
name|QUnicodeTables
operator|::
name|Common
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|engine
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
name|QFont
operator|::
name|StyleHint
operator|)
name|engine
operator|->
name|fontDef
operator|.
name|styleHint
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the font is a raw mode font; otherwise returns     false.      If it is a raw mode font, all other functions in QFontInfo will     return the same values set in the QFont, regardless of the font     actually used.      \sa QFont::rawMode() */
end_comment
begin_function
DECL|function|rawMode
name|bool
name|QFontInfo
operator|::
name|rawMode
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|rawMode
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the matched window system font is exactly the same     as the one specified by the font; otherwise returns false.      \sa QFont::exactMatch() */
end_comment
begin_function
DECL|function|exactMatch
name|bool
name|QFontInfo
operator|::
name|exactMatch
parameter_list|()
specifier|const
block|{
name|QFontEngine
modifier|*
name|engine
init|=
name|d
operator|->
name|engineForScript
argument_list|(
name|QUnicodeTables
operator|::
name|Common
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|engine
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
name|d
operator|->
name|rawMode
condition|?
name|engine
operator|->
name|type
argument_list|()
operator|!=
name|QFontEngine
operator|::
name|Box
else|:
name|d
operator|->
name|request
operator|.
name|exactMatch
argument_list|(
name|engine
operator|->
name|fontDef
argument_list|)
operator|)
return|;
block|}
end_function
begin_comment
comment|// **********************************************************************
end_comment
begin_comment
comment|// QFontCache
end_comment
begin_comment
comment|// **********************************************************************
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QFONTCACHE_DEBUG
end_ifdef
begin_comment
comment|// fast timeouts for debugging
end_comment
begin_decl_stmt
DECL|variable|fast_timeout
specifier|static
specifier|const
name|int
name|fast_timeout
init|=
literal|1000
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|fast_timeout
comment|// 1s
end_comment
begin_decl_stmt
DECL|variable|slow_timeout
specifier|static
specifier|const
name|int
name|slow_timeout
init|=
literal|5000
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|slow_timeout
comment|// 5s
end_comment
begin_else
else|#
directive|else
end_else
begin_decl_stmt
DECL|variable|fast_timeout
specifier|static
specifier|const
name|int
name|fast_timeout
init|=
literal|10000
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|fast_timeout
comment|// 10s
end_comment
begin_decl_stmt
DECL|variable|slow_timeout
specifier|static
specifier|const
name|int
name|slow_timeout
init|=
literal|300000
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|slow_timeout
comment|//  5m
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QFONTCACHE_DEBUG
end_comment
begin_decl_stmt
DECL|member|min_cost
specifier|const
name|uint
name|QFontCache
operator|::
name|min_cost
init|=
literal|4
operator|*
literal|1024
decl_stmt|;
end_decl_stmt
begin_comment
DECL|member|min_cost
comment|// 4mb
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_THREAD
end_ifdef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QFontCache
argument_list|,
argument|theFontCache
argument_list|)
end_macro
begin_function
DECL|function|instance
name|QFontCache
modifier|*
name|QFontCache
operator|::
name|instance
parameter_list|()
block|{
return|return
name|theFontCache
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|QFontCache
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_else
else|#
directive|else
end_else
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QThreadStorage<QFontCache *>
argument_list|,
argument|theFontCache
argument_list|)
end_macro
begin_function
DECL|function|instance
name|QFontCache
modifier|*
name|QFontCache
operator|::
name|instance
parameter_list|()
block|{
name|QFontCache
modifier|*
modifier|&
name|fontCache
init|=
name|theFontCache
argument_list|()
operator|->
name|localData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fontCache
condition|)
name|fontCache
operator|=
operator|new
name|QFontCache
expr_stmt|;
return|return
name|fontCache
return|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|QFontCache
operator|::
name|cleanup
parameter_list|()
block|{
name|QThreadStorage
argument_list|<
name|QFontCache
modifier|*
argument_list|>
modifier|*
name|cache
init|=
literal|0
decl_stmt|;
name|QT_TRY
block|{
name|cache
operator|=
name|theFontCache
argument_list|()
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|const std::bad_alloc&
argument_list|)
block|{
comment|// no cache - just ignore
block|}
if|if
condition|(
name|cache
operator|&&
name|cache
operator|->
name|hasLocalData
argument_list|()
condition|)
name|cache
operator|->
name|setLocalData
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_THREAD
end_comment
begin_constructor
DECL|function|QFontCache
name|QFontCache
operator|::
name|QFontCache
parameter_list|()
member_init_list|:
name|QObject
argument_list|()
member_init_list|,
name|total_cost
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|max_cost
argument_list|(
name|min_cost
argument_list|)
member_init_list|,
name|current_timestamp
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|fast
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|timer_id
argument_list|(
operator|-
literal|1
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QFontCache
name|QFontCache
operator|::
name|~
name|QFontCache
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
block|{
name|EngineDataCache
operator|::
name|ConstIterator
name|it
init|=
name|engineDataCache
operator|.
name|constBegin
argument_list|()
decl_stmt|,
name|end
init|=
name|engineDataCache
operator|.
name|constEnd
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|end
condition|)
block|{
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|==
literal|0
condition|)
operator|delete
name|it
operator|.
name|value
argument_list|()
expr_stmt|;
else|else
name|FC_DEBUG
argument_list|(
literal|"QFontCache::~QFontCache: engineData %p still has refcount %d"
argument_list|,
name|it
operator|.
name|value
argument_list|()
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|->
name|ref
operator|.
name|load
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
block|}
name|EngineCache
operator|::
name|ConstIterator
name|it
init|=
name|engineCache
operator|.
name|constBegin
argument_list|()
decl_stmt|,
name|end
init|=
name|engineCache
operator|.
name|constEnd
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|end
condition|)
block|{
if|if
condition|(
operator|--
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
operator|->
name|cache_count
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|==
literal|0
condition|)
block|{
name|FC_DEBUG
argument_list|(
literal|"QFontCache::~QFontCache: deleting engine %p key=(%d / %g %g %d %d %d)"
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
argument_list|,
name|it
operator|.
name|key
argument_list|()
operator|.
name|script
argument_list|,
name|it
operator|.
name|key
argument_list|()
operator|.
name|def
operator|.
name|pointSize
argument_list|,
name|it
operator|.
name|key
argument_list|()
operator|.
name|def
operator|.
name|pixelSize
argument_list|,
name|it
operator|.
name|key
argument_list|()
operator|.
name|def
operator|.
name|weight
argument_list|,
name|it
operator|.
name|key
argument_list|()
operator|.
name|def
operator|.
name|style
argument_list|,
name|it
operator|.
name|key
argument_list|()
operator|.
name|def
operator|.
name|fixedPitch
argument_list|)
expr_stmt|;
operator|delete
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
expr_stmt|;
block|}
else|else
block|{
name|FC_DEBUG
argument_list|(
literal|"QFontCache::~QFontCache: engine = %p still has refcount %d"
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
operator|->
name|ref
operator|.
name|load
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
operator|++
name|it
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|clear
name|void
name|QFontCache
operator|::
name|clear
parameter_list|()
block|{
block|{
name|EngineDataCache
operator|::
name|Iterator
name|it
init|=
name|engineDataCache
operator|.
name|begin
argument_list|()
decl_stmt|,
name|end
init|=
name|engineDataCache
operator|.
name|end
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|end
condition|)
block|{
name|QFontEngineData
modifier|*
name|data
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QUnicodeTables
operator|::
name|ScriptCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|data
operator|->
name|engines
index|[
name|i
index|]
condition|)
block|{
name|data
operator|->
name|engines
index|[
name|i
index|]
operator|->
name|ref
operator|.
name|deref
argument_list|()
expr_stmt|;
name|data
operator|->
name|engines
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
operator|++
name|it
expr_stmt|;
block|}
block|}
for|for
control|(
name|EngineCache
operator|::
name|Iterator
name|it
init|=
name|engineCache
operator|.
name|begin
argument_list|()
init|,
name|end
init|=
name|engineCache
operator|.
name|end
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|it
operator|->
name|data
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|==
literal|0
condition|)
block|{
operator|delete
name|it
operator|->
name|data
expr_stmt|;
name|it
operator|->
name|data
operator|=
literal|0
expr_stmt|;
block|}
block|}
for|for
control|(
name|EngineCache
operator|::
name|Iterator
name|it
init|=
name|engineCache
operator|.
name|begin
argument_list|()
init|,
name|end
init|=
name|engineCache
operator|.
name|end
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|it
operator|->
name|data
operator|&&
name|it
operator|->
name|data
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|==
literal|0
condition|)
block|{
operator|delete
name|it
operator|->
name|data
expr_stmt|;
name|it
operator|->
name|data
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|engineCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findEngineData
name|QFontEngineData
modifier|*
name|QFontCache
operator|::
name|findEngineData
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|def
parameter_list|)
specifier|const
block|{
name|EngineDataCache
operator|::
name|ConstIterator
name|it
init|=
name|engineDataCache
operator|.
name|find
argument_list|(
name|def
argument_list|)
decl_stmt|,
name|end
init|=
name|engineDataCache
operator|.
name|end
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|end
condition|)
return|return
literal|0
return|;
comment|// found
return|return
name|it
operator|.
name|value
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|insertEngineData
name|void
name|QFontCache
operator|::
name|insertEngineData
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|def
parameter_list|,
name|QFontEngineData
modifier|*
name|engineData
parameter_list|)
block|{
name|FC_DEBUG
argument_list|(
literal|"QFontCache: inserting new engine data %p"
argument_list|,
name|engineData
argument_list|)
expr_stmt|;
name|engineDataCache
operator|.
name|insert
argument_list|(
name|def
argument_list|,
name|engineData
argument_list|)
expr_stmt|;
name|increaseCost
argument_list|(
sizeof|sizeof
argument_list|(
name|QFontEngineData
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findEngine
name|QFontEngine
modifier|*
name|QFontCache
operator|::
name|findEngine
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
block|{
name|EngineCache
operator|::
name|Iterator
name|it
init|=
name|engineCache
operator|.
name|find
argument_list|(
name|key
argument_list|)
decl_stmt|,
name|end
init|=
name|engineCache
operator|.
name|end
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|end
condition|)
return|return
literal|0
return|;
comment|// found... update the hitcount and timestamp
name|it
operator|.
name|value
argument_list|()
operator|.
name|hits
operator|++
expr_stmt|;
name|it
operator|.
name|value
argument_list|()
operator|.
name|timestamp
operator|=
operator|++
name|current_timestamp
expr_stmt|;
name|FC_DEBUG
argument_list|(
literal|"QFontCache: found font engine\n"
literal|"  %p: timestamp %4u hits %3u ref %2d/%2d, type '%s'"
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|timestamp
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|hits
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
operator|->
name|ref
operator|.
name|load
argument_list|()
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
operator|->
name|cache_count
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
operator|->
name|name
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
return|;
block|}
end_function
begin_function
DECL|function|insertEngine
name|void
name|QFontCache
operator|::
name|insertEngine
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|,
name|QFontEngine
modifier|*
name|engine
parameter_list|)
block|{
name|FC_DEBUG
argument_list|(
literal|"QFontCache: inserting new engine %p"
argument_list|,
name|engine
argument_list|)
expr_stmt|;
name|Engine
name|data
argument_list|(
name|engine
argument_list|)
decl_stmt|;
name|data
operator|.
name|timestamp
operator|=
operator|++
name|current_timestamp
expr_stmt|;
name|engineCache
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|data
argument_list|)
expr_stmt|;
comment|// only increase the cost if this is the first time we insert the engine
if|if
condition|(
name|engine
operator|->
name|cache_count
operator|==
literal|0
condition|)
name|increaseCost
argument_list|(
name|engine
operator|->
name|cache_cost
argument_list|)
expr_stmt|;
operator|++
name|engine
operator|->
name|cache_count
expr_stmt|;
block|}
end_function
begin_function
DECL|function|increaseCost
name|void
name|QFontCache
operator|::
name|increaseCost
parameter_list|(
name|uint
name|cost
parameter_list|)
block|{
name|cost
operator|=
operator|(
name|cost
operator|+
literal|512
operator|)
operator|/
literal|1024
expr_stmt|;
comment|// store cost in kb
name|cost
operator|=
name|cost
operator|>
literal|0
condition|?
name|cost
else|:
literal|1
expr_stmt|;
name|total_cost
operator|+=
name|cost
expr_stmt|;
name|FC_DEBUG
argument_list|(
literal|"  COST: increased %u kb, total_cost %u kb, max_cost %u kb"
argument_list|,
name|cost
argument_list|,
name|total_cost
argument_list|,
name|max_cost
argument_list|)
expr_stmt|;
if|if
condition|(
name|total_cost
operator|>
name|max_cost
condition|)
block|{
name|max_cost
operator|=
name|total_cost
expr_stmt|;
if|if
condition|(
name|timer_id
operator|==
operator|-
literal|1
operator|||
operator|!
name|fast
condition|)
block|{
name|FC_DEBUG
argument_list|(
literal|"  TIMER: starting fast timer (%d ms)"
argument_list|,
name|fast_timeout
argument_list|)
expr_stmt|;
if|if
condition|(
name|timer_id
operator|!=
operator|-
literal|1
condition|)
name|killTimer
argument_list|(
name|timer_id
argument_list|)
expr_stmt|;
name|timer_id
operator|=
name|startTimer
argument_list|(
name|fast_timeout
argument_list|)
expr_stmt|;
name|fast
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|decreaseCost
name|void
name|QFontCache
operator|::
name|decreaseCost
parameter_list|(
name|uint
name|cost
parameter_list|)
block|{
name|cost
operator|=
operator|(
name|cost
operator|+
literal|512
operator|)
operator|/
literal|1024
expr_stmt|;
comment|// cost is stored in kb
name|cost
operator|=
name|cost
operator|>
literal|0
condition|?
name|cost
else|:
literal|1
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|cost
operator|<=
name|total_cost
argument_list|)
expr_stmt|;
name|total_cost
operator|-=
name|cost
expr_stmt|;
name|FC_DEBUG
argument_list|(
literal|"  COST: decreased %u kb, total_cost %u kb, max_cost %u kb"
argument_list|,
name|cost
argument_list|,
name|total_cost
argument_list|,
name|max_cost
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|QFontCache
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
parameter_list|)
block|{
name|FC_DEBUG
argument_list|(
literal|"QFontCache::timerEvent: performing cache maintenance (timestamp %u)"
argument_list|,
name|current_timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|total_cost
operator|<=
name|max_cost
operator|&&
name|max_cost
operator|<=
name|min_cost
condition|)
block|{
name|FC_DEBUG
argument_list|(
literal|"  cache redused sufficiently, stopping timer"
argument_list|)
expr_stmt|;
name|killTimer
argument_list|(
name|timer_id
argument_list|)
expr_stmt|;
name|timer_id
operator|=
operator|-
literal|1
expr_stmt|;
name|fast
operator|=
literal|false
expr_stmt|;
return|return;
block|}
comment|// go through the cache and count up everything in use
name|uint
name|in_use_cost
init|=
literal|0
decl_stmt|;
block|{
name|FC_DEBUG
argument_list|(
literal|"  SWEEP engine data:"
argument_list|)
expr_stmt|;
comment|// make sure the cost of each engine data is at least 1kb
specifier|const
name|uint
name|engine_data_cost
init|=
sizeof|sizeof
argument_list|(
name|QFontEngineData
argument_list|)
operator|>
literal|1024
condition|?
sizeof|sizeof
argument_list|(
name|QFontEngineData
argument_list|)
else|:
literal|1024
decl_stmt|;
name|EngineDataCache
operator|::
name|ConstIterator
name|it
init|=
name|engineDataCache
operator|.
name|constBegin
argument_list|()
decl_stmt|,
name|end
init|=
name|engineDataCache
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
ifdef|#
directive|ifdef
name|QFONTCACHE_DEBUG
name|FC_DEBUG
argument_list|(
literal|"    %p: ref %2d"
argument_list|,
name|it
operator|.
name|value
argument_list|()
argument_list|,
name|int
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|->
name|ref
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QFONTCACHE_DEBUG
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|0
condition|)
name|in_use_cost
operator|+=
name|engine_data_cost
expr_stmt|;
block|}
block|}
block|{
name|FC_DEBUG
argument_list|(
literal|"  SWEEP engine:"
argument_list|)
expr_stmt|;
name|EngineCache
operator|::
name|ConstIterator
name|it
init|=
name|engineCache
operator|.
name|constBegin
argument_list|()
decl_stmt|,
name|end
init|=
name|engineCache
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
name|FC_DEBUG
argument_list|(
literal|"    %p: timestamp %4u hits %2u ref %2d/%2d, cost %u bytes"
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|timestamp
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|hits
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
operator|->
name|ref
operator|.
name|load
argument_list|()
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
operator|->
name|cache_count
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
operator|->
name|cache_cost
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|0
condition|)
name|in_use_cost
operator|+=
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
operator|->
name|cache_cost
operator|/
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
operator|->
name|cache_count
expr_stmt|;
block|}
comment|// attempt to make up for rounding errors
name|in_use_cost
operator|+=
name|engineCache
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|in_use_cost
operator|=
operator|(
name|in_use_cost
operator|+
literal|512
operator|)
operator|/
literal|1024
expr_stmt|;
comment|// cost is stored in kb
comment|/*       calculate the new maximum cost for the cache        NOTE: in_use_cost is *not* correct due to rounding errors in the       above algorithm.  instead of worrying about getting the       calculation correct, we are more interested in speed, and use       in_use_cost as a floor for new_max_cost     */
name|uint
name|new_max_cost
init|=
name|qMax
argument_list|(
name|qMax
argument_list|(
name|max_cost
operator|/
literal|2
argument_list|,
name|in_use_cost
argument_list|)
argument_list|,
name|min_cost
argument_list|)
decl_stmt|;
name|FC_DEBUG
argument_list|(
literal|"  after sweep, in use %u kb, total %u kb, max %u kb, new max %u kb"
argument_list|,
name|in_use_cost
argument_list|,
name|total_cost
argument_list|,
name|max_cost
argument_list|,
name|new_max_cost
argument_list|)
expr_stmt|;
if|if
condition|(
name|new_max_cost
operator|==
name|max_cost
condition|)
block|{
if|if
condition|(
name|fast
condition|)
block|{
name|FC_DEBUG
argument_list|(
literal|"  cannot shrink cache, slowing timer"
argument_list|)
expr_stmt|;
name|killTimer
argument_list|(
name|timer_id
argument_list|)
expr_stmt|;
name|timer_id
operator|=
name|startTimer
argument_list|(
name|slow_timeout
argument_list|)
expr_stmt|;
name|fast
operator|=
literal|false
expr_stmt|;
block|}
return|return;
block|}
elseif|else
if|if
condition|(
operator|!
name|fast
condition|)
block|{
name|FC_DEBUG
argument_list|(
literal|"  dropping into passing gear"
argument_list|)
expr_stmt|;
name|killTimer
argument_list|(
name|timer_id
argument_list|)
expr_stmt|;
name|timer_id
operator|=
name|startTimer
argument_list|(
name|fast_timeout
argument_list|)
expr_stmt|;
name|fast
operator|=
literal|true
expr_stmt|;
block|}
name|max_cost
operator|=
name|new_max_cost
expr_stmt|;
block|{
name|FC_DEBUG
argument_list|(
literal|"  CLEAN engine data:"
argument_list|)
expr_stmt|;
comment|// clean out all unused engine data
name|EngineDataCache
operator|::
name|Iterator
name|it
init|=
name|engineDataCache
operator|.
name|begin
argument_list|()
decl_stmt|,
name|end
init|=
name|engineDataCache
operator|.
name|end
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|end
condition|)
block|{
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|0
condition|)
block|{
operator|++
name|it
expr_stmt|;
continue|continue;
block|}
name|EngineDataCache
operator|::
name|Iterator
name|rem
init|=
name|it
operator|++
decl_stmt|;
name|decreaseCost
argument_list|(
sizeof|sizeof
argument_list|(
name|QFontEngineData
argument_list|)
argument_list|)
expr_stmt|;
name|FC_DEBUG
argument_list|(
literal|"    %p"
argument_list|,
name|rem
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|rem
operator|.
name|value
argument_list|()
expr_stmt|;
name|engineDataCache
operator|.
name|erase
argument_list|(
name|rem
argument_list|)
expr_stmt|;
block|}
block|}
comment|// clean out the engine cache just enough to get below our new max cost
name|uint
name|current_cost
decl_stmt|;
do|do
block|{
name|current_cost
operator|=
name|total_cost
expr_stmt|;
name|EngineCache
operator|::
name|Iterator
name|it
init|=
name|engineCache
operator|.
name|begin
argument_list|()
decl_stmt|,
name|end
init|=
name|engineCache
operator|.
name|end
argument_list|()
decl_stmt|;
comment|// determine the oldest and least popular of the unused engines
name|uint
name|oldest
init|=
operator|~
literal|0u
decl_stmt|;
name|uint
name|least_popular
init|=
operator|~
literal|0u
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|!=
literal|0
condition|)
continue|continue;
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|timestamp
operator|<
name|oldest
operator|&&
name|it
operator|.
name|value
argument_list|()
operator|.
name|hits
operator|<=
name|least_popular
condition|)
block|{
name|oldest
operator|=
name|it
operator|.
name|value
argument_list|()
operator|.
name|timestamp
expr_stmt|;
name|least_popular
operator|=
name|it
operator|.
name|value
argument_list|()
operator|.
name|hits
expr_stmt|;
block|}
block|}
name|FC_DEBUG
argument_list|(
literal|"    oldest %u least popular %u"
argument_list|,
name|oldest
argument_list|,
name|least_popular
argument_list|)
expr_stmt|;
for|for
control|(
name|it
operator|=
name|engineCache
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|==
literal|0
operator|&&
name|it
operator|.
name|value
argument_list|()
operator|.
name|timestamp
operator|==
name|oldest
operator|&&
name|it
operator|.
name|value
argument_list|()
operator|.
name|hits
operator|==
name|least_popular
condition|)
break|break;
block|}
if|if
condition|(
name|it
operator|!=
name|end
condition|)
block|{
name|FC_DEBUG
argument_list|(
literal|"    %p: timestamp %4u hits %2u ref %2d/%2d, type '%s'"
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|timestamp
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|hits
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
operator|->
name|ref
operator|.
name|load
argument_list|()
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
operator|->
name|cache_count
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
operator|->
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|--
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
operator|->
name|cache_count
operator|==
literal|0
condition|)
block|{
name|FC_DEBUG
argument_list|(
literal|"    DELETE: last occurrence in cache"
argument_list|)
expr_stmt|;
name|decreaseCost
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
operator|->
name|cache_cost
argument_list|)
expr_stmt|;
operator|delete
name|it
operator|.
name|value
argument_list|()
operator|.
name|data
expr_stmt|;
block|}
else|else
block|{
comment|/*                   this particular font engine is in the cache multiple                   times...  set current_cost to zero, so that we can                   keep looping to get rid of all occurrences                 */
name|current_cost
operator|=
literal|0
expr_stmt|;
block|}
name|engineCache
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|current_cost
operator|!=
name|total_cost
operator|&&
name|total_cost
operator|>
name|max_cost
condition|)
do|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|stream
parameter_list|,
specifier|const
name|QFont
modifier|&
name|font
parameter_list|)
block|{
return|return
name|stream
operator|<<
literal|"QFont("
operator|<<
name|font
operator|.
name|toString
argument_list|()
operator|<<
literal|')'
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
