begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTEXTTABLE_H
end_ifndef
begin_define
DECL|macro|QTEXTTABLE_H
define|#
directive|define
name|QTEXTTABLE_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qobject.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qtextobject.h>
end_include
begin_function
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
parameter_list|(
name|Gui
parameter_list|)
name|class
name|QTextCursor
decl_stmt|;
DECL|variable|QTextTable
name|class
name|QTextTable
decl_stmt|;
DECL|variable|QTextTablePrivate
name|class
name|QTextTablePrivate
decl_stmt|;
name|class
name|Q_GUI_EXPORT
name|QTextTableCell
decl_stmt|{ public:     QTextTableCell(
end_function
begin_macro
unit|) :
name|table
argument_list|(
literal|0
argument_list|)
end_macro
begin_block
block|{}
end_block
begin_expr_stmt
operator|~
name|QTextTableCell
argument_list|()
block|{}
name|QTextTableCell
argument_list|(
specifier|const
name|QTextTableCell
operator|&
name|o
argument_list|)
operator|:
name|table
argument_list|(
name|o
operator|.
name|table
argument_list|)
operator|,
name|fragment
argument_list|(
argument|o.fragment
argument_list|)
block|{}
name|QTextTableCell
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QTextTableCell
operator|&
name|o
operator|)
block|{
name|table
operator|=
name|o
operator|.
name|table
block|;
name|fragment
operator|=
name|o
operator|.
name|fragment
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_function_decl
name|void
name|setFormat
parameter_list|(
specifier|const
name|QTextCharFormat
modifier|&
name|format
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|QTextCharFormat
name|format
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|int
name|row
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|int
name|column
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|int
name|rowSpan
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|int
name|columnSpan
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|table
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QTextCursor
name|firstCursorPosition
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QTextCursor
name|lastCursorPosition
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|int
name|firstPosition
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|int
name|lastPosition
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QTextTableCell
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|table
operator|==
name|other
operator|.
name|table
operator|&&
name|fragment
operator|==
name|other
operator|.
name|fragment
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QTextTableCell
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|other
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QTextFrame
operator|::
name|iterator
name|begin
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QTextFrame
operator|::
name|iterator
name|end
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|int
name|tableCellFormatIndex
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|friend
name|class
name|QTextTable
decl_stmt|;
end_decl_stmt
begin_macro
name|QTextTableCell
argument_list|(
argument|const QTextTable *t
argument_list|,
argument|int f
argument_list|)
end_macro
begin_expr_stmt
unit|:
name|table
argument_list|(
name|t
argument_list|)
operator|,
name|fragment
argument_list|(
argument|f
argument_list|)
block|{}
specifier|const
name|QTextTable
operator|*
name|table
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|int
name|fragment
decl_stmt|;
end_decl_stmt
begin_decl_stmt
unit|};
name|class
name|Q_GUI_EXPORT
name|QTextTable
range|:
name|public
name|QTextFrame
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|QTextTable
argument_list|(
name|QTextDocument
operator|*
name|doc
argument_list|)
block|;
operator|~
name|QTextTable
argument_list|()
block|;
name|void
name|resize
argument_list|(
argument|int rows
argument_list|,
argument|int cols
argument_list|)
block|;
name|void
name|insertRows
argument_list|(
argument|int pos
argument_list|,
argument|int num
argument_list|)
block|;
name|void
name|insertColumns
argument_list|(
argument|int pos
argument_list|,
argument|int num
argument_list|)
block|;
name|void
name|appendRows
argument_list|(
argument|int count
argument_list|)
block|;
name|void
name|appendColumns
argument_list|(
argument|int count
argument_list|)
block|;
name|void
name|removeRows
argument_list|(
argument|int pos
argument_list|,
argument|int num
argument_list|)
block|;
name|void
name|removeColumns
argument_list|(
argument|int pos
argument_list|,
argument|int num
argument_list|)
block|;
name|void
name|mergeCells
argument_list|(
argument|int row
argument_list|,
argument|int col
argument_list|,
argument|int numRows
argument_list|,
argument|int numCols
argument_list|)
block|;
name|void
name|mergeCells
argument_list|(
specifier|const
name|QTextCursor
operator|&
name|cursor
argument_list|)
block|;
name|void
name|splitCell
argument_list|(
argument|int row
argument_list|,
argument|int col
argument_list|,
argument|int numRows
argument_list|,
argument|int numCols
argument_list|)
block|;
name|int
name|rows
argument_list|()
specifier|const
block|;
name|int
name|columns
argument_list|()
specifier|const
block|;
name|QTextTableCell
name|cellAt
argument_list|(
argument|int row
argument_list|,
argument|int col
argument_list|)
specifier|const
block|;
name|QTextTableCell
name|cellAt
argument_list|(
argument|int position
argument_list|)
specifier|const
block|;
name|QTextTableCell
name|cellAt
argument_list|(
argument|const QTextCursor&c
argument_list|)
specifier|const
block|;
name|QTextCursor
name|rowStart
argument_list|(
argument|const QTextCursor&c
argument_list|)
specifier|const
block|;
name|QTextCursor
name|rowEnd
argument_list|(
argument|const QTextCursor&c
argument_list|)
specifier|const
block|;
name|void
name|setFormat
argument_list|(
specifier|const
name|QTextTableFormat
operator|&
name|format
argument_list|)
block|;
name|QTextTableFormat
name|format
argument_list|()
specifier|const
block|{
return|return
name|QTextObject
operator|::
name|format
argument_list|()
operator|.
name|toTableFormat
argument_list|()
return|;
block|}
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QTextTable
argument_list|)
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QTextTable
argument_list|)
name|friend
name|class
name|QTextTableCell
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QTEXTTABLE_H
end_comment
end_unit
