begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfontengine_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qunicodetables_p.h>
end_include
begin_include
include|#
directive|include
file|<qwsdisplay_qws.h>
end_include
begin_include
include|#
directive|include
file|<qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<private/qpainter_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpdf_p.h>
end_include
begin_include
include|#
directive|include
file|"qtextengine_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qcore_unix_p.h"
end_include
begin_comment
comment|// overrides QT_OPEN
end_comment
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_QPF
end_ifndef
begin_include
include|#
directive|include
file|"qfile.h"
end_include
begin_include
include|#
directive|include
file|"qdir.h"
end_include
begin_define
DECL|macro|QT_USE_MMAP
define|#
directive|define
name|QT_USE_MMAP
end_define
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_USE_MMAP
end_ifdef
begin_comment
comment|// for mmap
end_comment
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_include
include|#
directive|include
file|<sys/mman.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_LINUXBASE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|MAP_FILE
argument_list|)
end_if
begin_comment
comment|// LSB 3.2 does not define MAP_FILE
end_comment
begin_define
DECL|macro|MAP_FILE
define|#
directive|define
name|MAP_FILE
value|0
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_QPF
end_comment
begin_function
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_QWS_QPF
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|"qplatformdefs.h"
name|QT_END_INCLUDE_NAMESPACE
DECL|function|getChar
specifier|static
specifier|inline
name|unsigned
name|int
name|getChar
parameter_list|(
specifier|const
name|QChar
modifier|*
name|str
parameter_list|,
name|int
modifier|&
name|i
parameter_list|,
specifier|const
name|int
name|len
parameter_list|)
block|{
name|uint
name|ucs4
init|=
name|str
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
index|[
name|i
index|]
operator|.
name|isHighSurrogate
argument_list|()
operator|&&
name|i
operator|<
name|len
operator|-
literal|1
operator|&&
name|str
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|isLowSurrogate
argument_list|()
condition|)
block|{
operator|++
name|i
expr_stmt|;
name|ucs4
operator|=
name|QChar
operator|::
name|surrogateToUcs4
argument_list|(
name|ucs4
argument_list|,
name|str
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ucs4
return|;
block|}
end_function
begin_define
DECL|macro|FM_SMOOTH
define|#
directive|define
name|FM_SMOOTH
value|1
end_define
begin_class
DECL|class|QPFGlyphMetrics
class|class
name|Q_PACKED
name|QPFGlyphMetrics
block|{
public|public:
DECL|member|linestep
name|quint8
name|linestep
decl_stmt|;
DECL|member|width
name|quint8
name|width
decl_stmt|;
DECL|member|height
name|quint8
name|height
decl_stmt|;
DECL|member|flags
name|quint8
name|flags
decl_stmt|;
DECL|member|bearingx
name|qint8
name|bearingx
decl_stmt|;
comment|// Difference from pen position to glyph's left bbox
DECL|member|advance
name|quint8
name|advance
decl_stmt|;
comment|// Difference between pen positions
DECL|member|bearingy
name|qint8
name|bearingy
decl_stmt|;
comment|// Used for putting characters on baseline
DECL|member|reserved
name|qint8
name|reserved
decl_stmt|;
comment|// Do not use
comment|// Flags:
comment|// RendererOwnsData - the renderer is responsible for glyph data
comment|//                    memory deletion otherwise QPFGlyphTree must
comment|//                    delete [] the data when the glyph is deleted.
DECL|enum|Flags
DECL|enumerator|RendererOwnsData
enum|enum
name|Flags
block|{
name|RendererOwnsData
init|=
literal|0x01
block|}
enum|;
block|}
class|;
end_class
begin_class
DECL|class|QPFGlyph
class|class
name|QPFGlyph
block|{
public|public:
DECL|function|QPFGlyph
name|QPFGlyph
parameter_list|()
block|{
name|metrics
operator|=
literal|0
expr_stmt|;
name|data
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|QPFGlyph
name|QPFGlyph
parameter_list|(
name|QPFGlyphMetrics
modifier|*
name|m
parameter_list|,
name|uchar
modifier|*
name|d
parameter_list|)
member_init_list|:
name|metrics
argument_list|(
name|m
argument_list|)
member_init_list|,
name|data
argument_list|(
name|d
argument_list|)
block|{ }
DECL|function|~QPFGlyph
name|~
name|QPFGlyph
parameter_list|()
block|{}
DECL|member|metrics
name|QPFGlyphMetrics
modifier|*
name|metrics
decl_stmt|;
DECL|member|data
name|uchar
modifier|*
name|data
decl_stmt|;
block|}
class|;
end_class
begin_struct
DECL|struct|QPFFontMetrics
struct|struct
name|Q_PACKED
name|QPFFontMetrics
block|{
DECL|member|ascent
DECL|member|descent
name|qint8
name|ascent
decl_stmt|,
name|descent
decl_stmt|;
DECL|member|leftbearing
DECL|member|rightbearing
name|qint8
name|leftbearing
decl_stmt|,
name|rightbearing
decl_stmt|;
DECL|member|maxwidth
name|quint8
name|maxwidth
decl_stmt|;
DECL|member|leading
name|qint8
name|leading
decl_stmt|;
DECL|member|flags
name|quint8
name|flags
decl_stmt|;
DECL|member|underlinepos
name|quint8
name|underlinepos
decl_stmt|;
DECL|member|underlinewidth
name|quint8
name|underlinewidth
decl_stmt|;
DECL|member|reserved3
name|quint8
name|reserved3
decl_stmt|;
block|}
struct|;
end_struct
begin_class
DECL|class|QPFGlyphTree
class|class
name|QPFGlyphTree
block|{
public|public:
comment|/* reads in a tree like this:         A-Z        /   \        0-9   a-z         etc.      */
DECL|member|min
DECL|member|max
name|glyph_t
name|min
decl_stmt|,
name|max
decl_stmt|;
DECL|member|less
name|QPFGlyphTree
modifier|*
name|less
decl_stmt|;
DECL|member|more
name|QPFGlyphTree
modifier|*
name|more
decl_stmt|;
DECL|member|glyph
name|QPFGlyph
modifier|*
name|glyph
decl_stmt|;
public|public:
ifdef|#
directive|ifdef
name|QT_USE_MMAP
DECL|function|QPFGlyphTree
name|QPFGlyphTree
parameter_list|(
name|uchar
modifier|*
modifier|&
name|data
parameter_list|)
block|{
name|read
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
DECL|function|QPFGlyphTree
name|QPFGlyphTree
parameter_list|(
name|QIODevice
modifier|&
name|f
parameter_list|)
block|{
name|read
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
DECL|function|~QPFGlyphTree
name|~
name|QPFGlyphTree
parameter_list|()
block|{
comment|// NOTE: does not delete glyph[*].metrics or .data.
comment|//       the caller does this (only they know who owns
comment|//       the data).  See clear().
operator|delete
name|less
expr_stmt|;
operator|delete
name|more
expr_stmt|;
operator|delete
index|[]
name|glyph
expr_stmt|;
block|}
DECL|function|inFont
name|bool
name|inFont
parameter_list|(
name|glyph_t
name|g
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|g
operator|<
name|min
condition|)
block|{
if|if
condition|(
operator|!
name|less
condition|)
return|return
literal|false
return|;
return|return
name|less
operator|->
name|inFont
argument_list|(
name|g
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|g
operator|>
name|max
condition|)
block|{
if|if
condition|(
operator|!
name|more
condition|)
return|return
literal|false
return|;
return|return
name|more
operator|->
name|inFont
argument_list|(
name|g
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|get
name|QPFGlyph
modifier|*
name|get
parameter_list|(
name|glyph_t
name|g
parameter_list|)
block|{
if|if
condition|(
name|g
operator|<
name|min
condition|)
block|{
if|if
condition|(
operator|!
name|less
condition|)
return|return
literal|0
return|;
return|return
name|less
operator|->
name|get
argument_list|(
name|g
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|g
operator|>
name|max
condition|)
block|{
if|if
condition|(
operator|!
name|more
condition|)
return|return
literal|0
return|;
return|return
name|more
operator|->
name|get
argument_list|(
name|g
argument_list|)
return|;
block|}
return|return
operator|&
name|glyph
index|[
name|g
operator|-
name|min
index|]
return|;
block|}
DECL|function|totalChars
name|int
name|totalChars
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|this
condition|)
return|return
literal|0
return|;
return|return
name|max
operator|-
name|min
operator|+
literal|1
operator|+
name|less
operator|->
name|totalChars
argument_list|()
operator|+
name|more
operator|->
name|totalChars
argument_list|()
return|;
block|}
DECL|function|weight
name|int
name|weight
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|this
condition|)
return|return
literal|0
return|;
return|return
literal|1
operator|+
name|less
operator|->
name|weight
argument_list|()
operator|+
name|more
operator|->
name|weight
argument_list|()
return|;
block|}
DECL|function|dump
name|void
name|dump
parameter_list|(
name|int
name|indent
init|=
literal|0
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indent
condition|;
name|i
operator|++
control|)
name|printf
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"%d..%d"
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
comment|//if ( indent == 0 )
name|printf
argument_list|(
literal|" (total %d)"
argument_list|,
name|totalChars
argument_list|()
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|less
condition|)
name|less
operator|->
name|dump
argument_list|(
name|indent
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|more
condition|)
name|more
operator|->
name|dump
argument_list|(
name|indent
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|function|QPFGlyphTree
name|QPFGlyphTree
parameter_list|()
block|{     }
ifdef|#
directive|ifdef
name|QT_USE_MMAP
DECL|function|read
name|void
name|read
parameter_list|(
name|uchar
modifier|*
modifier|&
name|data
parameter_list|)
block|{
comment|// All node data first
name|readNode
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// Then all non-video data
name|readMetrics
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// Then all video data
name|readData
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
DECL|function|read
name|void
name|read
parameter_list|(
name|QIODevice
modifier|&
name|f
parameter_list|)
block|{
comment|// All node data first
name|readNode
argument_list|(
name|f
argument_list|)
expr_stmt|;
comment|// Then all non-video data
name|readMetrics
argument_list|(
name|f
argument_list|)
expr_stmt|;
comment|// Then all video data
name|readData
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_USE_MMAP
DECL|function|readNode
name|void
name|readNode
parameter_list|(
name|uchar
modifier|*
modifier|&
name|data
parameter_list|)
block|{
name|uchar
name|rw
init|=
operator|*
name|data
operator|++
decl_stmt|;
name|uchar
name|cl
init|=
operator|*
name|data
operator|++
decl_stmt|;
name|min
operator|=
operator|(
name|rw
operator|<<
literal|8
operator|)
operator||
name|cl
expr_stmt|;
name|rw
operator|=
operator|*
name|data
operator|++
expr_stmt|;
name|cl
operator|=
operator|*
name|data
operator|++
expr_stmt|;
name|max
operator|=
operator|(
name|rw
operator|<<
literal|8
operator|)
operator||
name|cl
expr_stmt|;
name|int
name|flags
init|=
operator|*
name|data
operator|++
decl_stmt|;
if|if
condition|(
name|flags
operator|&
literal|1
condition|)
name|less
operator|=
operator|new
name|QPFGlyphTree
expr_stmt|;
else|else
name|less
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|flags
operator|&
literal|2
condition|)
name|more
operator|=
operator|new
name|QPFGlyphTree
expr_stmt|;
else|else
name|more
operator|=
literal|0
expr_stmt|;
name|int
name|n
init|=
name|max
operator|-
name|min
operator|+
literal|1
decl_stmt|;
name|glyph
operator|=
operator|new
name|QPFGlyph
index|[
name|n
index|]
expr_stmt|;
if|if
condition|(
name|less
condition|)
name|less
operator|->
name|readNode
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|more
condition|)
name|more
operator|->
name|readNode
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
DECL|function|readNode
name|void
name|readNode
parameter_list|(
name|QIODevice
modifier|&
name|f
parameter_list|)
block|{
name|char
name|rw
decl_stmt|;
name|char
name|cl
decl_stmt|;
name|f
operator|.
name|getChar
argument_list|(
operator|&
name|rw
argument_list|)
expr_stmt|;
name|f
operator|.
name|getChar
argument_list|(
operator|&
name|cl
argument_list|)
expr_stmt|;
name|min
operator|=
operator|(
name|rw
operator|<<
literal|8
operator|)
operator||
name|cl
expr_stmt|;
name|f
operator|.
name|getChar
argument_list|(
operator|&
name|rw
argument_list|)
expr_stmt|;
name|f
operator|.
name|getChar
argument_list|(
operator|&
name|cl
argument_list|)
expr_stmt|;
name|max
operator|=
operator|(
name|rw
operator|<<
literal|8
operator|)
operator||
name|cl
expr_stmt|;
name|char
name|flags
decl_stmt|;
name|f
operator|.
name|getChar
argument_list|(
operator|&
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
literal|1
condition|)
name|less
operator|=
operator|new
name|QPFGlyphTree
expr_stmt|;
else|else
name|less
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|flags
operator|&
literal|2
condition|)
name|more
operator|=
operator|new
name|QPFGlyphTree
expr_stmt|;
else|else
name|more
operator|=
literal|0
expr_stmt|;
name|int
name|n
init|=
name|max
operator|-
name|min
operator|+
literal|1
decl_stmt|;
name|glyph
operator|=
operator|new
name|QPFGlyph
index|[
name|n
index|]
expr_stmt|;
if|if
condition|(
name|less
condition|)
name|less
operator|->
name|readNode
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|more
condition|)
name|more
operator|->
name|readNode
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_USE_MMAP
DECL|function|readMetrics
name|void
name|readMetrics
parameter_list|(
name|uchar
modifier|*
modifier|&
name|data
parameter_list|)
block|{
name|int
name|n
init|=
name|max
operator|-
name|min
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|glyph
index|[
name|i
index|]
operator|.
name|metrics
operator|=
operator|(
name|QPFGlyphMetrics
operator|*
operator|)
name|data
expr_stmt|;
name|data
operator|+=
sizeof|sizeof
argument_list|(
name|QPFGlyphMetrics
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|less
condition|)
name|less
operator|->
name|readMetrics
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|more
condition|)
name|more
operator|->
name|readMetrics
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
DECL|function|readMetrics
name|void
name|readMetrics
parameter_list|(
name|QIODevice
modifier|&
name|f
parameter_list|)
block|{
name|int
name|n
init|=
name|max
operator|-
name|min
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|glyph
index|[
name|i
index|]
operator|.
name|metrics
operator|=
operator|new
name|QPFGlyphMetrics
expr_stmt|;
name|f
operator|.
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|glyph
index|[
name|i
index|]
operator|.
name|metrics
argument_list|,
sizeof|sizeof
argument_list|(
name|QPFGlyphMetrics
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|less
condition|)
name|less
operator|->
name|readMetrics
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|more
condition|)
name|more
operator|->
name|readMetrics
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_USE_MMAP
DECL|function|readData
name|void
name|readData
parameter_list|(
name|uchar
modifier|*
modifier|&
name|data
parameter_list|)
block|{
name|int
name|n
init|=
name|max
operator|-
name|min
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|QSize
name|s
argument_list|(
name|glyph
index|[
name|i
index|]
operator|.
name|metrics
operator|->
name|width
argument_list|,
name|glyph
index|[
name|i
index|]
operator|.
name|metrics
operator|->
name|height
argument_list|)
decl_stmt|;
comment|//######### s = qt_screen->mapToDevice( s );
name|uint
name|datasize
init|=
name|glyph
index|[
name|i
index|]
operator|.
name|metrics
operator|->
name|linestep
operator|*
name|s
operator|.
name|height
argument_list|()
decl_stmt|;
name|glyph
index|[
name|i
index|]
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|data
operator|+=
name|datasize
expr_stmt|;
block|}
if|if
condition|(
name|less
condition|)
name|less
operator|->
name|readData
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|more
condition|)
name|more
operator|->
name|readData
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
DECL|function|readData
name|void
name|readData
parameter_list|(
name|QIODevice
modifier|&
name|f
parameter_list|)
block|{
name|int
name|n
init|=
name|max
operator|-
name|min
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|QSize
name|s
argument_list|(
name|glyph
index|[
name|i
index|]
operator|.
name|metrics
operator|->
name|width
argument_list|,
name|glyph
index|[
name|i
index|]
operator|.
name|metrics
operator|->
name|height
argument_list|)
decl_stmt|;
comment|//############### s = qt_screen->mapToDevice( s );
name|uint
name|datasize
init|=
name|glyph
index|[
name|i
index|]
operator|.
name|metrics
operator|->
name|linestep
operator|*
name|s
operator|.
name|height
argument_list|()
decl_stmt|;
name|glyph
index|[
name|i
index|]
operator|.
name|data
operator|=
operator|new
name|uchar
index|[
name|datasize
index|]
expr_stmt|;
comment|// ### deleted?
name|f
operator|.
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|glyph
index|[
name|i
index|]
operator|.
name|data
argument_list|,
name|datasize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|less
condition|)
name|less
operator|->
name|readData
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|more
condition|)
name|more
operator|->
name|readData
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
class|;
end_class
begin_class
DECL|class|QFontEngineQPF1Data
class|class
name|QFontEngineQPF1Data
block|{
public|public:
DECL|member|fm
name|QPFFontMetrics
name|fm
decl_stmt|;
DECL|member|tree
name|QPFGlyphTree
modifier|*
name|tree
decl_stmt|;
DECL|member|mmapStart
name|void
modifier|*
name|mmapStart
decl_stmt|;
DECL|member|mmapLength
name|size_t
name|mmapLength
decl_stmt|;
block|}
class|;
end_class
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_INTEGRITY
argument_list|)
end_if
begin_function
DECL|function|qt_mmap
specifier|static
name|void
modifier|*
name|qt_mmap
parameter_list|(
name|void
modifier|*
name|start
parameter_list|,
name|size_t
name|length
parameter_list|,
name|int
comment|/*prot*/
parameter_list|,
name|int
comment|/*flags*/
parameter_list|,
name|int
name|fd
parameter_list|,
name|off_t
name|offset
parameter_list|)
block|{
comment|// INTEGRITY cannot mmap local files - load it into a local buffer
if|if
condition|(
operator|::
name|lseek
argument_list|(
name|fd
argument_list|,
name|offset
argument_list|,
name|SEEK_SET
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|perror
argument_list|(
literal|"lseek failed"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|void
modifier|*
name|buf
init|=
name|malloc
argument_list|(
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
operator|::
name|read
argument_list|(
name|fd
argument_list|,
name|buf
argument_list|,
name|length
argument_list|)
operator|!=
operator|(
name|ssize_t
operator|)
name|length
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_FONTENGINE
argument_list|)
name|perror
argument_list|(
literal|"read failed"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|buf
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_function
DECL|function|qt_mmap
specifier|static
specifier|inline
name|void
modifier|*
name|qt_mmap
parameter_list|(
name|void
modifier|*
name|start
parameter_list|,
name|size_t
name|length
parameter_list|,
name|int
name|prot
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
name|fd
parameter_list|,
name|off_t
name|offset
parameter_list|)
block|{
return|return
name|mmap
argument_list|(
name|start
argument_list|,
name|length
argument_list|,
name|prot
argument_list|,
name|flags
argument_list|,
name|fd
argument_list|,
name|offset
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QFontEngineQPF1
name|QFontEngineQPF1
operator|::
name|QFontEngineQPF1
parameter_list|(
specifier|const
name|QFontDef
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
name|fn
parameter_list|)
block|{
name|cache_cost
operator|=
literal|1
expr_stmt|;
name|int
name|f
init|=
name|QT_OPEN
argument_list|(
name|QFile
operator|::
name|encodeName
argument_list|(
name|fn
argument_list|)
argument_list|,
name|O_RDONLY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|f
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QT_STATBUF
name|st
decl_stmt|;
if|if
condition|(
name|QT_FSTAT
argument_list|(
name|f
argument_list|,
operator|&
name|st
argument_list|)
condition|)
name|qFatal
argument_list|(
literal|"Failed to stat %s"
argument_list|,
name|QFile
operator|::
name|encodeName
argument_list|(
name|fn
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|uchar
modifier|*
name|data
init|=
operator|(
name|uchar
operator|*
operator|)
name|qt_mmap
argument_list|(
literal|0
argument_list|,
comment|// any address
name|st
operator|.
name|st_size
argument_list|,
comment|// whole file
name|PROT_READ
argument_list|,
comment|// read-only memory
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_INTEGRITY
argument_list|)
literal|0
argument_list|,
elif|#
directive|elif
operator|!
name|defined
argument_list|(
name|Q_OS_SOLARIS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_QNX4
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
name|MAP_FILE
operator||
name|MAP_PRIVATE
argument_list|,
comment|// swap-backed map from file
else|#
directive|else
name|MAP_PRIVATE
argument_list|,
endif|#
directive|endif
name|f
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// from offset 0 of f
if|#
directive|if
operator|!
name|defined
argument_list|(
name|MAP_FAILED
argument_list|)
operator|&&
operator|(
name|defined
argument_list|(
name|Q_OS_QNX4
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_INTEGRITY
argument_list|)
operator|)
DECL|macro|MAP_FAILED
define|#
directive|define
name|MAP_FAILED
value|((void *)-1)
endif|#
directive|endif
if|if
condition|(
operator|!
name|data
operator|||
name|data
operator|==
operator|(
name|uchar
operator|*
operator|)
name|MAP_FAILED
condition|)
name|qFatal
argument_list|(
literal|"Failed to mmap %s"
argument_list|,
name|QFile
operator|::
name|encodeName
argument_list|(
name|fn
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QT_CLOSE
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|QFontEngineQPF1Data
expr_stmt|;
name|d
operator|->
name|mmapStart
operator|=
name|data
expr_stmt|;
name|d
operator|->
name|mmapLength
operator|=
name|st
operator|.
name|st_size
expr_stmt|;
name|memcpy
argument_list|(
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
operator|&
name|d
operator|->
name|fm
argument_list|)
argument_list|,
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|d
operator|->
name|fm
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|+=
sizeof|sizeof
argument_list|(
name|d
operator|->
name|fm
argument_list|)
expr_stmt|;
name|d
operator|->
name|tree
operator|=
operator|new
name|QPFGlyphTree
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|glyphFormat
operator|=
operator|(
name|d
operator|->
name|fm
operator|.
name|flags
operator|&
name|FM_SMOOTH
operator|)
condition|?
name|QFontEngineGlyphCache
operator|::
name|Raster_A8
else|:
name|QFontEngineGlyphCache
operator|::
name|Raster_Mono
expr_stmt|;
if|#
directive|if
literal|0
block|qDebug()<< "font file"<< fn<< "ascent"<< d->fm.ascent<< "descent"<< d->fm.descent<< "leftbearing"<< d->fm.leftbearing<< "rightbearing"<< d->fm.rightbearing<< "maxwidth"<< d->fm.maxwidth<< "leading"<< d->fm.leading<< "flags"<< d->fm.flags<< "underlinepos"<< d->fm.underlinepos<< "underlinewidth"<< d->fm.underlinewidth;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QFontEngineQPF1
name|QFontEngineQPF1
operator|::
name|~
name|QFontEngineQPF1
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|mmapStart
condition|)
name|munmap
argument_list|(
name|d
operator|->
name|mmapStart
argument_list|,
name|d
operator|->
name|mmapLength
argument_list|)
expr_stmt|;
operator|delete
name|d
operator|->
name|tree
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|stringToCMap
name|bool
name|QFontEngineQPF1
operator|::
name|stringToCMap
parameter_list|(
specifier|const
name|QChar
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|,
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|int
modifier|*
name|nglyphs
parameter_list|,
name|QTextEngine
operator|::
name|ShaperFlags
name|flags
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|*
name|nglyphs
operator|<
name|len
condition|)
block|{
operator|*
name|nglyphs
operator|=
name|len
expr_stmt|;
return|return
literal|false
return|;
block|}
operator|*
name|nglyphs
operator|=
literal|0
expr_stmt|;
name|bool
name|mirrored
init|=
name|flags
operator|&
name|QTextEngine
operator|::
name|RightToLeft
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|unsigned
name|int
name|uc
init|=
name|getChar
argument_list|(
name|str
argument_list|,
name|i
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|mirrored
condition|)
name|uc
operator|=
name|QChar
operator|::
name|mirroredChar
argument_list|(
name|uc
argument_list|)
expr_stmt|;
name|glyphs
operator|->
name|glyphs
index|[
operator|*
name|nglyphs
index|]
operator|=
name|uc
operator|<
literal|0x10000
condition|?
name|uc
else|:
literal|0
expr_stmt|;
operator|++
operator|*
name|nglyphs
expr_stmt|;
block|}
name|glyphs
operator|->
name|numGlyphs
operator|=
operator|*
name|nglyphs
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|QTextEngine
operator|::
name|GlyphIndicesOnly
condition|)
return|return
literal|true
return|;
name|recalcAdvances
argument_list|(
name|glyphs
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|recalcAdvances
name|void
name|QFontEngineQPF1
operator|::
name|recalcAdvances
parameter_list|(
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|QTextEngine
operator|::
name|ShaperFlags
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|->
name|numGlyphs
condition|;
name|i
operator|++
control|)
block|{
name|QPFGlyph
modifier|*
name|glyph
init|=
name|d
operator|->
name|tree
operator|->
name|get
argument_list|(
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|glyphs
operator|->
name|advances_x
index|[
name|i
index|]
operator|=
name|glyph
condition|?
name|glyph
operator|->
name|metrics
operator|->
name|advance
else|:
literal|0
expr_stmt|;
name|glyphs
operator|->
name|advances_y
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|glyph
condition|)
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|draw
name|void
name|QFontEngineQPF1
operator|::
name|draw
parameter_list|(
name|QPaintEngine
modifier|*
name|p
parameter_list|,
name|qreal
name|_x
parameter_list|,
name|qreal
name|_y
parameter_list|,
specifier|const
name|QTextItemInt
modifier|&
name|si
parameter_list|)
block|{
name|QPaintEngineState
modifier|*
name|pState
init|=
name|p
operator|->
name|state
decl_stmt|;
name|QRasterPaintEngine
modifier|*
name|paintEngine
init|=
cast|static_cast
argument_list|<
name|QRasterPaintEngine
operator|*
argument_list|>
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|QTransform
name|matrix
init|=
name|pState
operator|->
name|transform
argument_list|()
decl_stmt|;
name|matrix
operator|.
name|translate
argument_list|(
name|_x
argument_list|,
name|_y
argument_list|)
expr_stmt|;
name|QFixed
name|x
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|matrix
operator|.
name|dx
argument_list|()
argument_list|)
decl_stmt|;
name|QFixed
name|y
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QFixedPoint
argument_list|>
name|positions
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|glyph_t
argument_list|>
name|glyphs
decl_stmt|;
name|getGlyphPositions
argument_list|(
name|si
operator|.
name|glyphs
argument_list|,
name|matrix
argument_list|,
name|si
operator|.
name|flags
argument_list|,
name|glyphs
argument_list|,
name|positions
argument_list|)
expr_stmt|;
if|if
condition|(
name|glyphs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|int
name|depth
init|=
operator|(
name|d
operator|->
name|fm
operator|.
name|flags
operator|&
name|FM_SMOOTH
operator|)
condition|?
literal|8
else|:
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|QPFGlyph
modifier|*
name|glyph
init|=
name|d
operator|->
name|tree
operator|->
name|get
argument_list|(
name|glyphs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|glyph
condition|)
continue|continue;
name|int
name|bpl
init|=
name|glyph
operator|->
name|metrics
operator|->
name|linestep
decl_stmt|;
if|if
condition|(
name|glyph
operator|->
name|data
condition|)
name|paintEngine
operator|->
name|alphaPenBlt
argument_list|(
name|glyph
operator|->
name|data
argument_list|,
name|bpl
argument_list|,
name|depth
argument_list|,
name|qRound
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|x
argument_list|)
operator|+
name|glyph
operator|->
name|metrics
operator|->
name|bearingx
argument_list|,
name|qRound
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|y
argument_list|)
operator|-
name|glyph
operator|->
name|metrics
operator|->
name|bearingy
argument_list|,
name|glyph
operator|->
name|metrics
operator|->
name|width
argument_list|,
name|glyph
operator|->
name|metrics
operator|->
name|height
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|alphaMapForGlyph
name|QImage
name|QFontEngineQPF1
operator|::
name|alphaMapForGlyph
parameter_list|(
name|glyph_t
name|g
parameter_list|)
block|{
specifier|const
name|QPFGlyph
modifier|*
name|glyph
init|=
name|d
operator|->
name|tree
operator|->
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|glyph
condition|)
return|return
name|QImage
argument_list|()
return|;
name|int
name|mono
init|=
operator|!
operator|(
name|d
operator|->
name|fm
operator|.
name|flags
operator|&
name|FM_SMOOTH
operator|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|bits
init|=
name|glyph
operator|->
name|data
decl_stmt|;
comment|//((const uchar *) glyph);
name|QImage
name|image
decl_stmt|;
if|if
condition|(
name|mono
condition|)
block|{
name|image
operator|=
name|QImage
argument_list|(
operator|(
name|glyph
operator|->
name|metrics
operator|->
name|width
operator|+
literal|7
operator|)
operator|&
operator|~
literal|7
argument_list|,
name|glyph
operator|->
name|metrics
operator|->
name|height
argument_list|,
name|QImage
operator|::
name|Format_Mono
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|image
operator|=
name|QImage
argument_list|(
name|glyph
operator|->
name|metrics
operator|->
name|width
argument_list|,
name|glyph
operator|->
name|metrics
operator|->
name|height
argument_list|,
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|256
condition|;
operator|++
name|j
control|)
name|image
operator|.
name|setColor
argument_list|(
name|j
argument_list|,
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyph
operator|->
name|metrics
operator|->
name|height
condition|;
operator|++
name|i
control|)
block|{
name|memcpy
argument_list|(
name|image
operator|.
name|scanLine
argument_list|(
name|i
argument_list|)
argument_list|,
name|bits
argument_list|,
name|glyph
operator|->
name|metrics
operator|->
name|linestep
argument_list|)
expr_stmt|;
name|bits
operator|+=
name|glyph
operator|->
name|metrics
operator|->
name|linestep
expr_stmt|;
block|}
return|return
name|image
return|;
block|}
end_function
begin_function
DECL|function|addOutlineToPath
name|void
name|QFontEngineQPF1
operator|::
name|addOutlineToPath
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|,
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|QTextItem
operator|::
name|RenderFlags
name|flags
parameter_list|)
block|{
name|addBitmapFontToPath
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|glyphs
argument_list|,
name|path
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngineQPF1
operator|::
name|boundingBox
parameter_list|(
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|)
block|{
if|if
condition|(
name|glyphs
operator|.
name|numGlyphs
operator|==
literal|0
condition|)
return|return
name|glyph_metrics_t
argument_list|()
return|;
name|QFixed
name|w
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|numGlyphs
condition|;
operator|++
name|i
control|)
name|w
operator|+=
name|glyphs
operator|.
name|effectiveAdvance
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|glyph_metrics_t
argument_list|(
literal|0
argument_list|,
operator|-
name|ascent
argument_list|()
argument_list|,
name|w
operator|-
name|lastRightBearing
argument_list|(
name|glyphs
argument_list|)
argument_list|,
name|ascent
argument_list|()
operator|+
name|descent
argument_list|()
operator|+
literal|1
argument_list|,
name|w
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngineQPF1
operator|::
name|boundingBox
parameter_list|(
name|glyph_t
name|glyph
parameter_list|)
block|{
specifier|const
name|QPFGlyph
modifier|*
name|g
init|=
name|d
operator|->
name|tree
operator|->
name|get
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|g
condition|)
return|return
name|glyph_metrics_t
argument_list|()
return|;
name|Q_ASSERT
argument_list|(
name|g
argument_list|)
expr_stmt|;
return|return
name|glyph_metrics_t
argument_list|(
name|g
operator|->
name|metrics
operator|->
name|bearingx
argument_list|,
operator|-
name|g
operator|->
name|metrics
operator|->
name|bearingy
argument_list|,
name|g
operator|->
name|metrics
operator|->
name|width
argument_list|,
name|g
operator|->
name|metrics
operator|->
name|height
argument_list|,
name|g
operator|->
name|metrics
operator|->
name|advance
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|ascent
name|QFixed
name|QFontEngineQPF1
operator|::
name|ascent
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|fm
operator|.
name|ascent
return|;
block|}
end_function
begin_function
DECL|function|descent
name|QFixed
name|QFontEngineQPF1
operator|::
name|descent
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|fm
operator|.
name|descent
return|;
block|}
end_function
begin_function
DECL|function|leading
name|QFixed
name|QFontEngineQPF1
operator|::
name|leading
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|fm
operator|.
name|leading
return|;
block|}
end_function
begin_function
DECL|function|maxCharWidth
name|qreal
name|QFontEngineQPF1
operator|::
name|maxCharWidth
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|fm
operator|.
name|maxwidth
return|;
block|}
end_function
begin_comment
comment|/* const char *QFontEngineQPF1::name() const {     return "qt"; } */
end_comment
begin_function
DECL|function|canRender
name|bool
name|QFontEngineQPF1
operator|::
name|canRender
parameter_list|(
specifier|const
name|QChar
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|d
operator|->
name|tree
operator|->
name|inFont
argument_list|(
name|str
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|type
name|QFontEngine
operator|::
name|Type
name|QFontEngineQPF1
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|QPF1
return|;
block|}
end_function
begin_function
DECL|function|minLeftBearing
name|qreal
name|QFontEngineQPF1
operator|::
name|minLeftBearing
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|fm
operator|.
name|leftbearing
return|;
block|}
end_function
begin_function
DECL|function|minRightBearing
name|qreal
name|QFontEngineQPF1
operator|::
name|minRightBearing
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|fm
operator|.
name|rightbearing
return|;
block|}
end_function
begin_function
DECL|function|underlinePosition
name|QFixed
name|QFontEngineQPF1
operator|::
name|underlinePosition
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|fm
operator|.
name|underlinepos
return|;
block|}
end_function
begin_function
DECL|function|lineThickness
name|QFixed
name|QFontEngineQPF1
operator|::
name|lineThickness
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|fm
operator|.
name|underlinewidth
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_QWS_QPF
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
