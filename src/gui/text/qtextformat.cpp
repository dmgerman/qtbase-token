begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qtextformat.h"
end_include
begin_include
include|#
directive|include
file|"qtextformat_p.h"
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qdatastream.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qmap.h>
end_include
begin_include
include|#
directive|include
file|<qhash.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*!     \class QTextLength     \reentrant      \brief The QTextLength class encapsulates the different types of length     used in a QTextDocument.     \inmodule QtGui      \ingroup richtext-processing      When we specify a value for the length of an element in a text document,     we often need to provide some other information so that the length is     used in the way we expect. For example, when we specify a table width,     the value can represent a fixed number of pixels, or it can be a percentage     value. This information changes both the meaning of the value and the way     it is used.      Generally, this class is used to specify table widths. These can be     specified either as a fixed amount of pixels, as a percentage of the     containing frame's width, or by a variable width that allows it to take     up just the space it requires.      \sa QTextTable */
comment|/*!     \fn explicit QTextLength::QTextLength()      Constructs a new length object which represents a variable size. */
comment|/*!     \fn QTextLength::QTextLength(Type type, qreal value)      Constructs a new length object of the given \a type and \a value. */
comment|/*!     \fn Type QTextLength::type() const      Returns the type of this length object.      \sa QTextLength::Type */
comment|/*!     \fn qreal QTextLength::value(qreal maximumLength) const      Returns the effective length, constrained by the type of the length object     and the specified \a maximumLength.      \sa type() */
comment|/*!     \fn qreal QTextLength::rawValue() const      Returns the constraint value that is specific for the type of the length.     If the length is QTextLength::PercentageLength then the raw value is in     percent, in the range of 0 to 100. If the length is QTextLength::FixedLength     then that fixed amount is returned. For variable lengths, zero is returned. */
comment|/*!     \fn bool QTextLength::operator==(const QTextLength&other) const      Returns true if this text length is the same as the \a other text     length. */
comment|/*!     \fn bool QTextLength::operator!=(const QTextLength&other) const      Returns true if this text length is different from the \a other text     length. */
comment|/*!     \enum QTextLength::Type      This enum describes the different types a length object can     have.      \value VariableLength The width of the object is variable     \value FixedLength The width of the object is fixed     \value PercentageLength The width of the object is in                             percentage of the maximum width      \sa type() */
comment|/*!    Returns the text length as a QVariant */
DECL|function|operator QVariant
name|QTextLength
operator|::
name|operator
name|QVariant
parameter_list|()
specifier|const
block|{
return|return
name|QVariant
argument_list|(
name|QVariant
operator|::
name|TextLength
argument_list|,
name|this
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|QTextLength
modifier|&
name|length
parameter_list|)
block|{
return|return
name|stream
operator|<<
name|qint32
argument_list|(
name|length
operator|.
name|lengthType
argument_list|)
operator|<<
name|double
argument_list|(
name|length
operator|.
name|fixedValueOrPercentage
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|,
name|QTextLength
modifier|&
name|length
parameter_list|)
block|{
name|qint32
name|type
decl_stmt|;
name|double
name|fixedValueOrPercentage
decl_stmt|;
name|stream
operator|>>
name|type
operator|>>
name|fixedValueOrPercentage
expr_stmt|;
name|length
operator|.
name|fixedValueOrPercentage
operator|=
name|fixedValueOrPercentage
expr_stmt|;
name|length
operator|.
name|lengthType
operator|=
name|QTextLength
operator|::
name|Type
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|stream
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_class
DECL|class|QTextFormatPrivate
class|class
name|QTextFormatPrivate
super|:
specifier|public
name|QSharedData
block|{
public|public:
DECL|function|QTextFormatPrivate
name|QTextFormatPrivate
parameter_list|()
member_init_list|:
name|hashDirty
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|fontDirty
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|hashValue
argument_list|(
literal|0
argument_list|)
block|{}
DECL|struct|Property
struct|struct
name|Property
block|{
DECL|function|Property
specifier|inline
name|Property
parameter_list|(
name|qint32
name|k
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|v
parameter_list|)
member_init_list|:
name|key
argument_list|(
name|k
argument_list|)
member_init_list|,
name|value
argument_list|(
name|v
argument_list|)
block|{}
DECL|function|Property
specifier|inline
name|Property
parameter_list|()
block|{}
DECL|member|key
name|qint32
name|key
decl_stmt|;
DECL|member|value
name|QVariant
name|value
decl_stmt|;
DECL|function|operator ==
specifier|inline
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|Property
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|key
operator|==
name|other
operator|.
name|key
operator|&&
name|value
operator|==
name|other
operator|.
name|value
return|;
block|}
DECL|function|operator !=
specifier|inline
name|bool
name|operator
name|!=
parameter_list|(
specifier|const
name|Property
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|key
operator|!=
name|other
operator|.
name|key
operator|||
name|value
operator|!=
name|other
operator|.
name|value
return|;
block|}
block|}
struct|;
DECL|function|hash
specifier|inline
name|uint
name|hash
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|hashDirty
condition|)
return|return
name|hashValue
return|;
return|return
name|recalcHash
argument_list|()
return|;
block|}
DECL|function|operator ==
specifier|inline
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|QTextFormatPrivate
modifier|&
name|rhs
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|hash
argument_list|()
operator|!=
name|rhs
operator|.
name|hash
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
name|props
operator|==
name|rhs
operator|.
name|props
return|;
block|}
DECL|function|insertProperty
specifier|inline
name|void
name|insertProperty
parameter_list|(
name|qint32
name|key
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|hashDirty
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|key
operator|>=
name|QTextFormat
operator|::
name|FirstFontProperty
operator|&&
name|key
operator|<=
name|QTextFormat
operator|::
name|LastFontProperty
condition|)
name|fontDirty
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|props
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|key
operator|==
name|key
condition|)
block|{
name|props
index|[
name|i
index|]
operator|.
name|value
operator|=
name|value
expr_stmt|;
return|return;
block|}
name|props
operator|.
name|append
argument_list|(
name|Property
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|clearProperty
specifier|inline
name|void
name|clearProperty
parameter_list|(
name|qint32
name|key
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|props
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|key
operator|==
name|key
condition|)
block|{
name|hashDirty
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|key
operator|>=
name|QTextFormat
operator|::
name|FirstFontProperty
operator|&&
name|key
operator|<=
name|QTextFormat
operator|::
name|LastFontProperty
condition|)
name|fontDirty
operator|=
literal|true
expr_stmt|;
name|props
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
DECL|function|propertyIndex
specifier|inline
name|int
name|propertyIndex
parameter_list|(
name|qint32
name|key
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|props
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|key
operator|==
name|key
condition|)
return|return
name|i
return|;
return|return
operator|-
literal|1
return|;
block|}
DECL|function|property
specifier|inline
name|QVariant
name|property
parameter_list|(
name|qint32
name|key
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|idx
init|=
name|propertyIndex
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
return|return
name|QVariant
argument_list|()
return|;
return|return
name|props
operator|.
name|at
argument_list|(
name|idx
argument_list|)
operator|.
name|value
return|;
block|}
DECL|function|hasProperty
specifier|inline
name|bool
name|hasProperty
parameter_list|(
name|qint32
name|key
parameter_list|)
specifier|const
block|{
return|return
name|propertyIndex
argument_list|(
name|key
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
name|void
name|resolveFont
parameter_list|(
specifier|const
name|QFont
modifier|&
name|defaultFont
parameter_list|)
function_decl|;
DECL|function|font
specifier|inline
specifier|const
name|QFont
modifier|&
name|font
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|fontDirty
condition|)
name|recalcFont
argument_list|()
expr_stmt|;
return|return
name|fnt
return|;
block|}
DECL|member|props
name|QVector
argument_list|<
name|Property
argument_list|>
name|props
decl_stmt|;
private|private:
name|uint
name|recalcHash
parameter_list|()
specifier|const
function_decl|;
name|void
name|recalcFont
parameter_list|()
specifier|const
function_decl|;
DECL|member|hashDirty
specifier|mutable
name|bool
name|hashDirty
decl_stmt|;
DECL|member|fontDirty
specifier|mutable
name|bool
name|fontDirty
decl_stmt|;
DECL|member|hashValue
specifier|mutable
name|uint
name|hashValue
decl_stmt|;
DECL|member|fnt
specifier|mutable
name|QFont
name|fnt
decl_stmt|;
friend|friend
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
parameter_list|,
specifier|const
name|QTextFormat
modifier|&
parameter_list|)
function_decl|;
friend|friend
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
parameter_list|,
name|QTextFormat
modifier|&
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_comment
comment|// this is only safe because sizeof(int) == sizeof(float)
end_comment
begin_function
DECL|function|hash
specifier|static
specifier|inline
name|uint
name|hash
parameter_list|(
name|float
name|d
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_CC_GNU
comment|// this is a GCC extension and isn't guaranteed to work in other compilers
comment|// the reinterpret_cast below generates a strict-aliasing warning with GCC
union|union
block|{
name|float
name|f
decl_stmt|;
name|uint
name|u
decl_stmt|;
block|}
name|cvt
union|;
name|cvt
operator|.
name|f
operator|=
name|d
expr_stmt|;
return|return
name|cvt
operator|.
name|u
return|;
else|#
directive|else
return|return
cast|reinterpret_cast
argument_list|<
name|uint
operator|&
argument_list|>
argument_list|(
name|d
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|hash
specifier|static
specifier|inline
name|uint
name|hash
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
return|return
operator|(
name|color
operator|.
name|isValid
argument_list|()
operator|)
condition|?
name|color
operator|.
name|rgba
argument_list|()
else|:
literal|0x234109
return|;
block|}
end_function
begin_function
DECL|function|hash
specifier|static
specifier|inline
name|uint
name|hash
parameter_list|(
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
return|return
name|hash
argument_list|(
name|pen
operator|.
name|color
argument_list|()
argument_list|)
operator|+
name|hash
argument_list|(
name|pen
operator|.
name|widthF
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|hash
specifier|static
specifier|inline
name|uint
name|hash
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
return|return
name|hash
argument_list|(
name|brush
operator|.
name|color
argument_list|()
argument_list|)
operator|+
operator|(
name|brush
operator|.
name|style
argument_list|()
operator|<<
literal|3
operator|)
return|;
block|}
end_function
begin_function
DECL|function|variantHash
specifier|static
specifier|inline
name|uint
name|variantHash
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|variant
parameter_list|)
block|{
comment|// simple and fast hash functions to differentiate between type and value
switch|switch
condition|(
name|variant
operator|.
name|userType
argument_list|()
condition|)
block|{
comment|// sorted by occurrence frequency
case|case
name|QVariant
operator|::
name|String
case|:
return|return
name|qHash
argument_list|(
name|variant
operator|.
name|toString
argument_list|()
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|Double
case|:
return|return
name|hash
argument_list|(
name|variant
operator|.
name|toDouble
argument_list|()
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|Int
case|:
return|return
literal|0x811890
operator|+
name|variant
operator|.
name|toInt
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|Brush
case|:
return|return
literal|0x01010101
operator|+
name|hash
argument_list|(
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|Bool
case|:
return|return
literal|0x371818
operator|+
name|variant
operator|.
name|toBool
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|Pen
case|:
return|return
literal|0x02020202
operator|+
name|hash
argument_list|(
name|qvariant_cast
argument_list|<
name|QPen
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|List
case|:
return|return
literal|0x8377
operator|+
name|qvariant_cast
argument_list|<
name|QVariantList
argument_list|>
argument_list|(
name|variant
argument_list|)
operator|.
name|count
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|Color
case|:
return|return
name|hash
argument_list|(
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|TextLength
case|:
return|return
literal|0x377
operator|+
name|hash
argument_list|(
name|qvariant_cast
argument_list|<
name|QTextLength
argument_list|>
argument_list|(
name|variant
argument_list|)
operator|.
name|rawValue
argument_list|()
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|Float
case|:
return|return
name|hash
argument_list|(
name|variant
operator|.
name|toFloat
argument_list|()
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|Invalid
case|:
return|return
literal|0
return|;
default|default:
break|break;
block|}
return|return
name|qHash
argument_list|(
name|variant
operator|.
name|typeName
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getHash
specifier|static
specifier|inline
name|int
name|getHash
parameter_list|(
specifier|const
name|QTextFormatPrivate
modifier|*
name|d
parameter_list|,
name|int
name|format
parameter_list|)
block|{
return|return
operator|(
name|d
condition|?
name|d
operator|->
name|hash
argument_list|()
else|:
literal|0
operator|)
operator|+
name|format
return|;
block|}
end_function
begin_function
DECL|function|recalcHash
name|uint
name|QTextFormatPrivate
operator|::
name|recalcHash
parameter_list|()
specifier|const
block|{
name|hashValue
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|QVector
argument_list|<
name|Property
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|props
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|props
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
name|hashValue
operator|+=
operator|(
name|it
operator|->
name|key
operator|<<
literal|16
operator|)
operator|+
name|variantHash
argument_list|(
name|it
operator|->
name|value
argument_list|)
expr_stmt|;
name|hashDirty
operator|=
literal|false
expr_stmt|;
return|return
name|hashValue
return|;
block|}
end_function
begin_function
DECL|function|resolveFont
name|void
name|QTextFormatPrivate
operator|::
name|resolveFont
parameter_list|(
specifier|const
name|QFont
modifier|&
name|defaultFont
parameter_list|)
block|{
name|recalcFont
argument_list|()
expr_stmt|;
specifier|const
name|uint
name|oldMask
init|=
name|fnt
operator|.
name|resolve
argument_list|()
decl_stmt|;
name|fnt
operator|=
name|fnt
operator|.
name|resolve
argument_list|(
name|defaultFont
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|FontSizeAdjustment
argument_list|)
condition|)
block|{
specifier|const
name|qreal
name|scaleFactors
index|[
literal|7
index|]
init|=
block|{
name|qreal
argument_list|(
literal|0.7
argument_list|)
block|,
name|qreal
argument_list|(
literal|0.8
argument_list|)
block|,
name|qreal
argument_list|(
literal|1.0
argument_list|)
block|,
name|qreal
argument_list|(
literal|1.2
argument_list|)
block|,
name|qreal
argument_list|(
literal|1.5
argument_list|)
block|,
name|qreal
argument_list|(
literal|2
argument_list|)
block|,
name|qreal
argument_list|(
literal|2.4
argument_list|)
block|}
decl_stmt|;
specifier|const
name|int
name|htmlFontSize
init|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|property
argument_list|(
name|QTextFormat
operator|::
name|FontSizeAdjustment
argument_list|)
operator|.
name|toInt
argument_list|()
operator|+
literal|3
operator|-
literal|1
argument_list|,
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultFont
operator|.
name|pointSize
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|qreal
name|pixelSize
init|=
name|scaleFactors
index|[
name|htmlFontSize
index|]
operator|*
name|defaultFont
operator|.
name|pixelSize
argument_list|()
decl_stmt|;
name|fnt
operator|.
name|setPixelSize
argument_list|(
name|qRound
argument_list|(
name|pixelSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qreal
name|pointSize
init|=
name|scaleFactors
index|[
name|htmlFontSize
index|]
operator|*
name|defaultFont
operator|.
name|pointSizeF
argument_list|()
decl_stmt|;
name|fnt
operator|.
name|setPointSizeF
argument_list|(
name|pointSize
argument_list|)
expr_stmt|;
block|}
block|}
name|fnt
operator|.
name|resolve
argument_list|(
name|oldMask
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|recalcFont
name|void
name|QTextFormatPrivate
operator|::
name|recalcFont
parameter_list|()
specifier|const
block|{
comment|// update cached font as well
name|QFont
name|f
decl_stmt|;
name|bool
name|hasSpacingInformation
init|=
literal|false
decl_stmt|;
name|QFont
operator|::
name|SpacingType
name|spacingType
init|=
name|QFont
operator|::
name|PercentageSpacing
decl_stmt|;
name|qreal
name|letterSpacing
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|props
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|key
condition|)
block|{
case|case
name|QTextFormat
operator|::
name|FontFamily
case|:
name|f
operator|.
name|setFamily
argument_list|(
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextFormat
operator|::
name|FontPointSize
case|:
name|f
operator|.
name|setPointSizeF
argument_list|(
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|toReal
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextFormat
operator|::
name|FontPixelSize
case|:
name|f
operator|.
name|setPixelSize
argument_list|(
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextFormat
operator|::
name|FontWeight
case|:
block|{
name|int
name|weight
init|=
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|weight
operator|==
literal|0
condition|)
name|weight
operator|=
name|QFont
operator|::
name|Normal
expr_stmt|;
name|f
operator|.
name|setWeight
argument_list|(
name|weight
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QTextFormat
operator|::
name|FontItalic
case|:
name|f
operator|.
name|setItalic
argument_list|(
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextFormat
operator|::
name|FontUnderline
case|:
if|if
condition|(
operator|!
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|TextUnderlineStyle
argument_list|)
condition|)
comment|// don't use the old one if the new one is there.
name|f
operator|.
name|setUnderline
argument_list|(
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextFormat
operator|::
name|TextUnderlineStyle
case|:
name|f
operator|.
name|setUnderline
argument_list|(
cast|static_cast
argument_list|<
name|QTextCharFormat
operator|::
name|UnderlineStyle
argument_list|>
argument_list|(
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
operator|==
name|QTextCharFormat
operator|::
name|SingleUnderline
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextFormat
operator|::
name|FontOverline
case|:
name|f
operator|.
name|setOverline
argument_list|(
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextFormat
operator|::
name|FontStrikeOut
case|:
name|f
operator|.
name|setStrikeOut
argument_list|(
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextFormat
operator|::
name|FontLetterSpacingType
case|:
name|spacingType
operator|=
cast|static_cast
argument_list|<
name|QFont
operator|::
name|SpacingType
argument_list|>
argument_list|(
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|hasSpacingInformation
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QTextFormat
operator|::
name|FontLetterSpacing
case|:
name|letterSpacing
operator|=
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|hasSpacingInformation
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QTextFormat
operator|::
name|FontWordSpacing
case|:
name|f
operator|.
name|setWordSpacing
argument_list|(
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|toReal
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextFormat
operator|::
name|FontCapitalization
case|:
name|f
operator|.
name|setCapitalization
argument_list|(
cast|static_cast
argument_list|<
name|QFont
operator|::
name|Capitalization
argument_list|>
argument_list|(
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextFormat
operator|::
name|FontFixedPitch
case|:
block|{
specifier|const
name|bool
name|value
init|=
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|toBool
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|fixedPitch
argument_list|()
operator|!=
name|value
condition|)
name|f
operator|.
name|setFixedPitch
argument_list|(
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QTextFormat
operator|::
name|FontStretch
case|:
name|f
operator|.
name|setStretch
argument_list|(
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextFormat
operator|::
name|FontStyleHint
case|:
name|f
operator|.
name|setStyleHint
argument_list|(
cast|static_cast
argument_list|<
name|QFont
operator|::
name|StyleHint
argument_list|>
argument_list|(
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|,
name|f
operator|.
name|styleStrategy
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextFormat
operator|::
name|FontHintingPreference
case|:
name|f
operator|.
name|setHintingPreference
argument_list|(
cast|static_cast
argument_list|<
name|QFont
operator|::
name|HintingPreference
argument_list|>
argument_list|(
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextFormat
operator|::
name|FontStyleStrategy
case|:
name|f
operator|.
name|setStyleStrategy
argument_list|(
cast|static_cast
argument_list|<
name|QFont
operator|::
name|StyleStrategy
argument_list|>
argument_list|(
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextFormat
operator|::
name|FontKerning
case|:
name|f
operator|.
name|setKerning
argument_list|(
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|hasSpacingInformation
condition|)
name|f
operator|.
name|setLetterSpacing
argument_list|(
name|spacingType
argument_list|,
name|letterSpacing
argument_list|)
expr_stmt|;
name|fnt
operator|=
name|f
expr_stmt|;
name|fontDirty
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_function
DECL|function|operator <<
name|Q_GUI_EXPORT
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|QTextFormat
modifier|&
name|fmt
parameter_list|)
block|{
name|stream
operator|<<
name|fmt
operator|.
name|format_type
operator|<<
name|fmt
operator|.
name|properties
argument_list|()
expr_stmt|;
return|return
name|stream
return|;
block|}
end_function
begin_function
DECL|function|operator >>
name|Q_GUI_EXPORT
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|,
name|QTextFormat
modifier|&
name|fmt
parameter_list|)
block|{
name|QMap
argument_list|<
name|qint32
argument_list|,
name|QVariant
argument_list|>
name|properties
decl_stmt|;
name|stream
operator|>>
name|fmt
operator|.
name|format_type
operator|>>
name|properties
expr_stmt|;
comment|// QTextFormat's default constructor doesn't allocate the private structure, so
comment|// we have to do this, in case fmt is a default constructed value.
if|if
condition|(
operator|!
name|fmt
operator|.
name|d
condition|)
name|fmt
operator|.
name|d
operator|=
operator|new
name|QTextFormatPrivate
argument_list|()
expr_stmt|;
for|for
control|(
name|QMap
argument_list|<
name|qint32
argument_list|,
name|QVariant
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|properties
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|properties
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
name|fmt
operator|.
name|d
operator|->
name|insertProperty
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|,
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|stream
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_comment
comment|/*!     \class QTextFormat     \reentrant      \brief The QTextFormat class provides formatting information for a     QTextDocument.     \inmodule QtGui      \ingroup richtext-processing     \ingroup shared      A QTextFormat is a generic class used for describing the format of     parts of a QTextDocument. The derived classes QTextCharFormat,     QTextBlockFormat, QTextListFormat, and QTextTableFormat are usually     more useful, and describe the formatting that is applied to     specific parts of the document.      A format has a \c FormatType which specifies the kinds of text item it     can format; e.g. a block of text, a list, a table, etc. A format     also has various properties (some specific to particular format     types), as described by the Property enum. Every property has a     corresponding Property.      The format type is given by type(), and the format can be tested     with isCharFormat(), isBlockFormat(), isListFormat(),     isTableFormat(), isFrameFormat(), and isImageFormat(). If the     type is determined, it can be retrieved with toCharFormat(),     toBlockFormat(), toListFormat(), toTableFormat(), toFrameFormat(),     and toImageFormat().      A format's properties can be set with the setProperty() functions,     and retrieved with boolProperty(), intProperty(), doubleProperty(),     and stringProperty() as appropriate. All the property IDs used in     the format can be retrieved with allPropertyIds(). One format can     be merged into another using merge().      A format's object index can be set with setObjectIndex(), and     retrieved with objectIndex(). These methods can be used to     associate the format with a QTextObject. It is used to represent     lists, frames, and tables inside the document.      \sa {Rich Text Processing} */
end_comment
begin_comment
comment|/*!     \enum QTextFormat::FormatType      This enum describes the text item a QTextFormat object is formatting.      \value InvalidFormat An invalid format as created by the default                          constructor     \value BlockFormat The object formats a text block     \value CharFormat The object formats a single character     \value ListFormat The object formats a list     \value TableFormat The object formats a table     \value FrameFormat The object formats a frame      \value UserFormat      \sa QTextCharFormat, QTextBlockFormat, QTextListFormat,     QTextTableFormat, type() */
end_comment
begin_comment
comment|/*!     \enum QTextFormat::Property      This enum describes the different properties a format can have.      \value ObjectIndex The index of the formatted object. See objectIndex().      Paragraph and character properties      \value CssFloat How a frame is located relative to the surrounding text     \value LayoutDirection  The layout direction of the text in the document                             (Qt::LayoutDirection).      \value OutlinePen     \value ForegroundBrush     \value BackgroundBrush     \value BackgroundImageUrl      Paragraph properties      \value BlockAlignment     \value BlockTopMargin     \value BlockBottomMargin     \value BlockLeftMargin     \value BlockRightMargin     \value TextIndent     \value TabPositions     Specifies the tab positions.  The tab positions are structs of QTextOption::Tab which are stored in                             a QList (internally, in a QList<QVariant>).     \value BlockIndent     \value LineHeight     \value LineHeightType     \value BlockNonBreakableLines     \value BlockTrailingHorizontalRulerWidth The width of a horizontal ruler element.      Character properties      \value FontFamily     \value FontPointSize     \value FontPixelSize     \value FontSizeAdjustment       Specifies the change in size given to the fontsize already set using                                     FontPointSize or FontPixelSize.     \value FontFixedPitch     \omitvalue FontSizeIncrement     \value FontWeight     \value FontItalic     \value FontUnderline \e{This property has been deprecated.} Use QTextFormat::TextUnderlineStyle instead.     \value FontOverline     \value FontStrikeOut     \value FontCapitalization Specifies the capitalization type that is to be applied to the text.     \value FontLetterSpacingType Specifies the meaning of the FontLetterSpacing property. The default                                  is QFont::PercentageSpacing.     \value FontLetterSpacing Changes the default spacing between individual letters in the font. The value is                              specified as a percentage or absolute value, depending on FontLetterSpacingType.                              The default value is 100%.     \value FontWordSpacing  Changes the default spacing between individual words. A positive value increases the word spacing                                                  by the corresponding pixels; a negative value decreases the spacing.     \value FontStretch          Corresponds to the QFont::Stretch property     \value FontStyleHint        Corresponds to the QFont::StyleHint property     \value FontStyleStrategy    Corresponds to the QFont::StyleStrategy property     \value FontKerning          Specifies whether the font has kerning turned on.     \value FontHintingPreference Controls the use of hinting according to values                                  of the QFont::HintingPreference enum.      \omitvalue FirstFontProperty     \omitvalue LastFontProperty      \value TextUnderlineColor     \value TextVerticalAlignment     \value TextOutline     \value TextUnderlineStyle     \value TextToolTip Specifies the (optional) tool tip to be displayed for a fragment of text.      \value IsAnchor     \value AnchorHref     \value AnchorName     \value ObjectType      List properties      \value ListStyle        Specifies the style used for the items in a list,                             described by values of the QTextListFormat::Style enum.     \value ListIndent       Specifies the amount of indentation used for a list.     \value ListNumberPrefix Defines the text which is prepended to item numbers in                             numeric lists.     \value ListNumberSuffix Defines the text which is appended to item numbers in                             numeric lists.      Table and frame properties      \value FrameBorder     \value FrameBorderBrush     \value FrameBorderStyle See the \l{QTextFrameFormat::BorderStyle}{BorderStyle} enum.     \value FrameBottomMargin     \value FrameHeight     \value FrameLeftMargin     \value FrameMargin     \value FramePadding     \value FrameRightMargin     \value FrameTopMargin     \value FrameWidth     \value TableCellSpacing     \value TableCellPadding     \value TableColumns     \value TableColumnWidthConstraints     \value TableHeaderRowCount      Table cell properties      \value TableCellRowSpan     \value TableCellColumnSpan     \value TableCellLeftPadding     \value TableCellRightPadding     \value TableCellTopPadding     \value TableCellBottomPadding      Image properties      \value ImageName     \value ImageWidth     \value ImageHeight      Selection properties      \value FullWidthSelection When set on the characterFormat of a selection,                               the whole width of the text will be shown selected.      Page break properties      \value PageBreakPolicy Specifies how pages are broken. See the PageBreakFlag enum.      \value UserProperty      \sa property(), setProperty() */
end_comment
begin_comment
comment|/*!     \enum QTextFormat::ObjectTypes      This enum describes what kind of QTextObject this format is associated with.      \value NoObject     \value ImageObject     \value TableObject     \value TableCellObject     \value UserObject The first object that can be used for application-specific purposes.      \sa QTextObject, QTextTable, QTextObject::format() */
end_comment
begin_comment
comment|/*!     \enum QTextFormat::PageBreakFlag     \since 4.2      This enum describes how page breaking is performed when printing. It maps to the     corresponding css properties.      \value PageBreak_Auto The page break is determined automatically depending on the                           available space on the current page     \value PageBreak_AlwaysBefore The page is always broken before the paragraph/table     \value PageBreak_AlwaysAfter  A new page is always started after the paragraph/table      \sa QTextBlockFormat::pageBreakPolicy(), QTextFrameFormat::pageBreakPolicy(),     PageBreakPolicy */
end_comment
begin_comment
comment|/*!     \fn bool QTextFormat::isValid() const      Returns true if the format is valid (i.e. is not     InvalidFormat); otherwise returns false. */
end_comment
begin_comment
comment|/*!     \fn bool QTextFormat::isCharFormat() const      Returns true if this text format is a \c CharFormat; otherwise     returns false. */
end_comment
begin_comment
comment|/*!     \fn bool QTextFormat::isBlockFormat() const      Returns true if this text format is a \c BlockFormat; otherwise     returns false. */
end_comment
begin_comment
comment|/*!     \fn bool QTextFormat::isListFormat() const      Returns true if this text format is a \c ListFormat; otherwise     returns false. */
end_comment
begin_comment
comment|/*!     \fn bool QTextFormat::isTableFormat() const      Returns true if this text format is a \c TableFormat; otherwise     returns false. */
end_comment
begin_comment
comment|/*!     \fn bool QTextFormat::isFrameFormat() const      Returns true if this text format is a \c FrameFormat; otherwise     returns false. */
end_comment
begin_comment
comment|/*!     \fn bool QTextFormat::isImageFormat() const      Returns true if this text format is an image format; otherwise     returns false. */
end_comment
begin_comment
comment|/*!     \fn bool QTextFormat::isTableCellFormat() const     \since 4.4      Returns true if this text format is a \c TableCellFormat; otherwise     returns false. */
end_comment
begin_comment
comment|/*!     Creates a new text format with an \c InvalidFormat.      \sa FormatType */
end_comment
begin_constructor
DECL|function|QTextFormat
name|QTextFormat
operator|::
name|QTextFormat
parameter_list|()
member_init_list|:
name|format_type
argument_list|(
name|InvalidFormat
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Creates a new text format of the given \a type.      \sa FormatType */
end_comment
begin_constructor
DECL|function|QTextFormat
name|QTextFormat
operator|::
name|QTextFormat
parameter_list|(
name|int
name|type
parameter_list|)
member_init_list|:
name|format_type
argument_list|(
name|type
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \fn QTextFormat::QTextFormat(const QTextFormat&other)      Creates a new text format with the same attributes as the \a other     text format. */
end_comment
begin_constructor
DECL|function|QTextFormat
name|QTextFormat
operator|::
name|QTextFormat
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|rhs
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|rhs
operator|.
name|d
argument_list|)
member_init_list|,
name|format_type
argument_list|(
name|rhs
operator|.
name|format_type
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \fn QTextFormat&QTextFormat::operator=(const QTextFormat&other)      Assigns the \a other text format to this text format, and returns a     reference to this text format. */
end_comment
begin_function
DECL|function|operator =
name|QTextFormat
modifier|&
name|QTextFormat
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|rhs
parameter_list|)
block|{
name|d
operator|=
name|rhs
operator|.
name|d
expr_stmt|;
name|format_type
operator|=
name|rhs
operator|.
name|format_type
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QTextFormat::swap(QTextFormat&other)     \since 5.0      Swaps this text format with \a other. This function is very fast     and never fails. */
end_comment
begin_comment
comment|/*!     Destroys this text format. */
end_comment
begin_destructor
DECL|function|~QTextFormat
name|QTextFormat
operator|::
name|~
name|QTextFormat
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!    Returns the text format as a QVariant */
end_comment
begin_function
DECL|function|operator QVariant
name|QTextFormat
operator|::
name|operator
name|QVariant
parameter_list|()
specifier|const
block|{
return|return
name|QVariant
argument_list|(
name|QVariant
operator|::
name|TextFormat
argument_list|,
name|this
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Merges the \a other format with this format; where there are     conflicts the \a other format takes precedence. */
end_comment
begin_function
DECL|function|merge
name|void
name|QTextFormat
operator|::
name|merge
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|other
parameter_list|)
block|{
if|if
condition|(
name|format_type
operator|!=
name|other
operator|.
name|format_type
condition|)
return|return;
if|if
condition|(
operator|!
name|d
condition|)
block|{
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|other
operator|.
name|d
condition|)
return|return;
name|QTextFormatPrivate
modifier|*
name|d
init|=
name|this
operator|->
name|d
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|QTextFormatPrivate
operator|::
name|Property
argument_list|>
modifier|&
name|otherProps
init|=
name|other
operator|.
name|d
operator|->
name|props
decl_stmt|;
name|d
operator|->
name|props
operator|.
name|reserve
argument_list|(
name|d
operator|->
name|props
operator|.
name|size
argument_list|()
operator|+
name|otherProps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|otherProps
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QTextFormatPrivate
operator|::
name|Property
modifier|&
name|p
init|=
name|otherProps
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|d
operator|->
name|insertProperty
argument_list|(
name|p
operator|.
name|key
argument_list|,
name|p
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the type of this format.      \sa FormatType */
end_comment
begin_function
DECL|function|type
name|int
name|QTextFormat
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|format_type
return|;
block|}
end_function
begin_comment
comment|/*!     Returns this format as a block format. */
end_comment
begin_function
DECL|function|toBlockFormat
name|QTextBlockFormat
name|QTextFormat
operator|::
name|toBlockFormat
parameter_list|()
specifier|const
block|{
return|return
name|QTextBlockFormat
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns this format as a character format. */
end_comment
begin_function
DECL|function|toCharFormat
name|QTextCharFormat
name|QTextFormat
operator|::
name|toCharFormat
parameter_list|()
specifier|const
block|{
return|return
name|QTextCharFormat
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns this format as a list format. */
end_comment
begin_function
DECL|function|toListFormat
name|QTextListFormat
name|QTextFormat
operator|::
name|toListFormat
parameter_list|()
specifier|const
block|{
return|return
name|QTextListFormat
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns this format as a table format. */
end_comment
begin_function
DECL|function|toTableFormat
name|QTextTableFormat
name|QTextFormat
operator|::
name|toTableFormat
parameter_list|()
specifier|const
block|{
return|return
name|QTextTableFormat
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns this format as a frame format. */
end_comment
begin_function
DECL|function|toFrameFormat
name|QTextFrameFormat
name|QTextFormat
operator|::
name|toFrameFormat
parameter_list|()
specifier|const
block|{
return|return
name|QTextFrameFormat
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns this format as an image format. */
end_comment
begin_function
DECL|function|toImageFormat
name|QTextImageFormat
name|QTextFormat
operator|::
name|toImageFormat
parameter_list|()
specifier|const
block|{
return|return
name|QTextImageFormat
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Returns this format as a table cell format. */
end_comment
begin_function
DECL|function|toTableCellFormat
name|QTextTableCellFormat
name|QTextFormat
operator|::
name|toTableCellFormat
parameter_list|()
specifier|const
block|{
return|return
name|QTextTableCellFormat
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the value of the property specified by \a propertyId. If the     property isn't of QTextFormat::Bool type, false is returned instead.      \sa setProperty(), intProperty(), doubleProperty(), stringProperty(), colorProperty(),         lengthProperty(), lengthVectorProperty(), Property */
end_comment
begin_function
DECL|function|boolProperty
name|bool
name|QTextFormat
operator|::
name|boolProperty
parameter_list|(
name|int
name|propertyId
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|d
condition|)
return|return
literal|false
return|;
specifier|const
name|QVariant
name|prop
init|=
name|d
operator|->
name|property
argument_list|(
name|propertyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|.
name|userType
argument_list|()
operator|!=
name|QVariant
operator|::
name|Bool
condition|)
return|return
literal|false
return|;
return|return
name|prop
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the value of the property specified by \a propertyId. If the     property is not of QTextFormat::Integer type, 0 is returned instead.      \sa setProperty(), boolProperty(), doubleProperty(), stringProperty(), colorProperty(),         lengthProperty(), lengthVectorProperty(), Property */
end_comment
begin_function
DECL|function|intProperty
name|int
name|QTextFormat
operator|::
name|intProperty
parameter_list|(
name|int
name|propertyId
parameter_list|)
specifier|const
block|{
comment|// required, since the default layout direction has to be LayoutDirectionAuto, which is not integer 0
name|int
name|def
init|=
operator|(
name|propertyId
operator|==
name|QTextFormat
operator|::
name|LayoutDirection
operator|)
condition|?
name|int
argument_list|(
name|Qt
operator|::
name|LayoutDirectionAuto
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|d
condition|)
return|return
name|def
return|;
specifier|const
name|QVariant
name|prop
init|=
name|d
operator|->
name|property
argument_list|(
name|propertyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|.
name|userType
argument_list|()
operator|!=
name|QVariant
operator|::
name|Int
condition|)
return|return
name|def
return|;
return|return
name|prop
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the value of the property specified by \a propertyId. If the     property isn't of QVariant::Double or QMetaType::Float type, 0 is     returned instead.      \sa setProperty(), boolProperty(), intProperty(), stringProperty(), colorProperty(),         lengthProperty(), lengthVectorProperty(), Property */
end_comment
begin_function
DECL|function|doubleProperty
name|qreal
name|QTextFormat
operator|::
name|doubleProperty
parameter_list|(
name|int
name|propertyId
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|d
condition|)
return|return
literal|0.
return|;
specifier|const
name|QVariant
name|prop
init|=
name|d
operator|->
name|property
argument_list|(
name|propertyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|.
name|userType
argument_list|()
operator|!=
name|QVariant
operator|::
name|Double
operator|&&
name|prop
operator|.
name|userType
argument_list|()
operator|!=
name|QMetaType
operator|::
name|Float
condition|)
return|return
literal|0.
return|;
return|return
name|qvariant_cast
argument_list|<
name|qreal
argument_list|>
argument_list|(
name|prop
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the value of the property given by \a propertyId; if the     property isn't of QVariant::String type, an empty string is     returned instead.      \sa setProperty(), boolProperty(), intProperty(), doubleProperty(), colorProperty(),         lengthProperty(), lengthVectorProperty(), Property */
end_comment
begin_function
DECL|function|stringProperty
name|QString
name|QTextFormat
operator|::
name|stringProperty
parameter_list|(
name|int
name|propertyId
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|d
condition|)
return|return
name|QString
argument_list|()
return|;
specifier|const
name|QVariant
name|prop
init|=
name|d
operator|->
name|property
argument_list|(
name|propertyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|.
name|userType
argument_list|()
operator|!=
name|QVariant
operator|::
name|String
condition|)
return|return
name|QString
argument_list|()
return|;
return|return
name|prop
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the value of the property given by \a propertyId; if the     property isn't of QVariant::Color type, an invalid color is     returned instead.      \sa setProperty(), boolProperty(), intProperty(), doubleProperty(),         stringProperty(), lengthProperty(), lengthVectorProperty(), Property */
end_comment
begin_function
DECL|function|colorProperty
name|QColor
name|QTextFormat
operator|::
name|colorProperty
parameter_list|(
name|int
name|propertyId
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|d
condition|)
return|return
name|QColor
argument_list|()
return|;
specifier|const
name|QVariant
name|prop
init|=
name|d
operator|->
name|property
argument_list|(
name|propertyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|.
name|userType
argument_list|()
operator|!=
name|QVariant
operator|::
name|Color
condition|)
return|return
name|QColor
argument_list|()
return|;
return|return
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|prop
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the value of the property given by \a propertyId; if the     property isn't of QVariant::Pen type, Qt::NoPen is     returned instead.      \sa setProperty(), boolProperty(), intProperty(), doubleProperty(), stringProperty(),         lengthProperty(), lengthVectorProperty(), Property */
end_comment
begin_function
DECL|function|penProperty
name|QPen
name|QTextFormat
operator|::
name|penProperty
parameter_list|(
name|int
name|propertyId
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|d
condition|)
return|return
name|QPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
return|;
specifier|const
name|QVariant
name|prop
init|=
name|d
operator|->
name|property
argument_list|(
name|propertyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|.
name|userType
argument_list|()
operator|!=
name|QVariant
operator|::
name|Pen
condition|)
return|return
name|QPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
return|;
return|return
name|qvariant_cast
argument_list|<
name|QPen
argument_list|>
argument_list|(
name|prop
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the value of the property given by \a propertyId; if the     property isn't of QVariant::Brush type, Qt::NoBrush is     returned instead.      \sa setProperty(), boolProperty(), intProperty(), doubleProperty(), stringProperty(),         lengthProperty(), lengthVectorProperty(), Property */
end_comment
begin_function
DECL|function|brushProperty
name|QBrush
name|QTextFormat
operator|::
name|brushProperty
parameter_list|(
name|int
name|propertyId
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|d
condition|)
return|return
name|QBrush
argument_list|(
name|Qt
operator|::
name|NoBrush
argument_list|)
return|;
specifier|const
name|QVariant
name|prop
init|=
name|d
operator|->
name|property
argument_list|(
name|propertyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|.
name|userType
argument_list|()
operator|!=
name|QVariant
operator|::
name|Brush
condition|)
return|return
name|QBrush
argument_list|(
name|Qt
operator|::
name|NoBrush
argument_list|)
return|;
return|return
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|prop
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the value of the property given by \a propertyId.      \sa setProperty(), boolProperty(), intProperty(), doubleProperty(), stringProperty(),         colorProperty(), lengthVectorProperty(), Property */
end_comment
begin_function
DECL|function|lengthProperty
name|QTextLength
name|QTextFormat
operator|::
name|lengthProperty
parameter_list|(
name|int
name|propertyId
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|d
condition|)
return|return
name|QTextLength
argument_list|()
return|;
return|return
name|qvariant_cast
argument_list|<
name|QTextLength
argument_list|>
argument_list|(
name|d
operator|->
name|property
argument_list|(
name|propertyId
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the value of the property given by \a propertyId. If the     property isn't of QTextFormat::LengthVector type, an empty length     vector is returned instead.      \sa setProperty(), boolProperty(), intProperty(), doubleProperty(), stringProperty(),         colorProperty(), lengthProperty(), Property */
end_comment
begin_function
DECL|function|lengthVectorProperty
name|QVector
argument_list|<
name|QTextLength
argument_list|>
name|QTextFormat
operator|::
name|lengthVectorProperty
parameter_list|(
name|int
name|propertyId
parameter_list|)
specifier|const
block|{
name|QVector
argument_list|<
name|QTextLength
argument_list|>
name|vector
decl_stmt|;
if|if
condition|(
operator|!
name|d
condition|)
return|return
name|vector
return|;
specifier|const
name|QVariant
name|prop
init|=
name|d
operator|->
name|property
argument_list|(
name|propertyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|.
name|userType
argument_list|()
operator|!=
name|QVariant
operator|::
name|List
condition|)
return|return
name|vector
return|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|propertyList
init|=
name|prop
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propertyList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVariant
name|var
init|=
name|propertyList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|var
operator|.
name|userType
argument_list|()
operator|==
name|QVariant
operator|::
name|TextLength
condition|)
name|vector
operator|.
name|append
argument_list|(
name|qvariant_cast
argument_list|<
name|QTextLength
argument_list|>
argument_list|(
name|var
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|vector
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the property specified by the given \a propertyId.      \sa Property */
end_comment
begin_function
DECL|function|property
name|QVariant
name|QTextFormat
operator|::
name|property
parameter_list|(
name|int
name|propertyId
parameter_list|)
specifier|const
block|{
return|return
name|d
condition|?
name|d
operator|->
name|property
argument_list|(
name|propertyId
argument_list|)
else|:
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the property specified by the \a propertyId to the given \a value.      \sa Property */
end_comment
begin_function
DECL|function|setProperty
name|void
name|QTextFormat
operator|::
name|setProperty
parameter_list|(
name|int
name|propertyId
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d
condition|)
name|d
operator|=
operator|new
name|QTextFormatPrivate
expr_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isValid
argument_list|()
condition|)
name|clearProperty
argument_list|(
name|propertyId
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|insertProperty
argument_list|(
name|propertyId
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the value of the property given by \a propertyId to \a value.      \sa lengthVectorProperty(), Property */
end_comment
begin_function
DECL|function|setProperty
name|void
name|QTextFormat
operator|::
name|setProperty
parameter_list|(
name|int
name|propertyId
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|QTextLength
argument_list|>
modifier|&
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d
condition|)
name|d
operator|=
operator|new
name|QTextFormatPrivate
expr_stmt|;
name|QVariantList
name|list
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|list
operator|<<
name|value
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|d
operator|->
name|insertProperty
argument_list|(
name|propertyId
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Clears the value of the property given by \a propertyId      \sa Property */
end_comment
begin_function
DECL|function|clearProperty
name|void
name|QTextFormat
operator|::
name|clearProperty
parameter_list|(
name|int
name|propertyId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d
condition|)
return|return;
name|d
operator|->
name|clearProperty
argument_list|(
name|propertyId
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QTextFormat::setObjectType(int type)      Sets the text format's object type to \a type.      \sa ObjectTypes, objectType() */
end_comment
begin_comment
comment|/*!     \fn int QTextFormat::objectType() const      Returns the text format's object type.      \sa ObjectTypes, setObjectType() */
end_comment
begin_comment
comment|/*!     Returns the index of the format object, or -1 if the format object is invalid.      \sa setObjectIndex() */
end_comment
begin_function
DECL|function|objectIndex
name|int
name|QTextFormat
operator|::
name|objectIndex
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|d
condition|)
return|return
operator|-
literal|1
return|;
specifier|const
name|QVariant
name|prop
init|=
name|d
operator|->
name|property
argument_list|(
name|ObjectIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|.
name|userType
argument_list|()
operator|!=
name|QVariant
operator|::
name|Int
condition|)
comment|// ####
return|return
operator|-
literal|1
return|;
return|return
name|prop
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QTextFormat::setObjectIndex(int index)      Sets the format object's object \a index.      \sa objectIndex() */
end_comment
begin_function
DECL|function|setObjectIndex
name|void
name|QTextFormat
operator|::
name|setObjectIndex
parameter_list|(
name|int
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|d
condition|)
name|d
operator|->
name|clearProperty
argument_list|(
name|ObjectIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|d
condition|)
name|d
operator|=
operator|new
name|QTextFormatPrivate
expr_stmt|;
comment|// ### type
name|d
operator|->
name|insertProperty
argument_list|(
name|ObjectIndex
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns true if the text format has a property with the given \a     propertyId; otherwise returns false.      \sa properties(), Property */
end_comment
begin_function
DECL|function|hasProperty
name|bool
name|QTextFormat
operator|::
name|hasProperty
parameter_list|(
name|int
name|propertyId
parameter_list|)
specifier|const
block|{
return|return
name|d
condition|?
name|d
operator|->
name|hasProperty
argument_list|(
name|propertyId
argument_list|)
else|:
literal|false
return|;
block|}
end_function
begin_comment
comment|/*     Returns the property type for the given \a propertyId.      \sa hasProperty(), allPropertyIds(), Property */
end_comment
begin_comment
comment|/*!     Returns a map with all properties of this text format. */
end_comment
begin_function
DECL|function|properties
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
name|QTextFormat
operator|::
name|properties
parameter_list|()
specifier|const
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
name|map
decl_stmt|;
if|if
condition|(
name|d
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|props
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|map
operator|.
name|insert
argument_list|(
name|d
operator|->
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|key
argument_list|,
name|d
operator|->
name|props
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.3     Returns the number of properties stored in the format. */
end_comment
begin_function
DECL|function|propertyCount
name|int
name|QTextFormat
operator|::
name|propertyCount
parameter_list|()
specifier|const
block|{
return|return
name|d
condition|?
name|d
operator|->
name|props
operator|.
name|count
argument_list|()
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QTextFormat::operator!=(const QTextFormat&other) const      Returns true if this text format is different from the \a other text     format. */
end_comment
begin_comment
comment|/*!     \fn bool QTextFormat::operator==(const QTextFormat&other) const      Returns true if this text format is the same as the \a other text     format. */
end_comment
begin_function
DECL|function|operator ==
name|bool
name|QTextFormat
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|rhs
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|format_type
operator|!=
name|rhs
operator|.
name|format_type
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|==
name|rhs
operator|.
name|d
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|d
operator|&&
name|d
operator|->
name|props
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|rhs
operator|.
name|d
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|d
operator|&&
name|rhs
operator|.
name|d
operator|&&
name|rhs
operator|.
name|d
operator|->
name|props
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|d
operator|||
operator|!
name|rhs
operator|.
name|d
condition|)
return|return
literal|false
return|;
return|return
operator|*
name|d
operator|==
operator|*
name|rhs
operator|.
name|d
return|;
block|}
end_function
begin_comment
comment|/*!     \class QTextCharFormat     \reentrant      \brief The QTextCharFormat class provides formatting information for     characters in a QTextDocument.     \inmodule QtGui      \ingroup richtext-processing      The character format of text in a document specifies the visual properties     of the text, as well as information about its role in a hypertext document.      The font used can be set by supplying a font to the setFont() function, and     each aspect of its appearance can be adjusted to give the desired effect.     setFontFamily() and setFontPointSize() define the font's family (e.g. Times)     and printed size; setFontWeight() and setFontItalic() provide control over     the style of the font. setFontUnderline(), setFontOverline(),     setFontStrikeOut(), and setFontFixedPitch() provide additional effects for     text.      The color is set with setForeground(). If the text is intended to be used     as an anchor (for hyperlinks), this can be enabled with setAnchor(). The     setAnchorHref() and setAnchorNames() functions are used to specify the     information about the hyperlink's destination and the anchor's name.      \sa QTextFormat, QTextBlockFormat, QTextTableFormat, QTextListFormat */
end_comment
begin_comment
comment|/*!     \enum QTextCharFormat::VerticalAlignment      This enum describes the ways that adjacent characters can be vertically     aligned.      \value AlignNormal  Adjacent characters are positioned in the standard                         way for text in the writing system in use.     \value AlignSuperScript Characters are placed above the base line for                             normal text.     \value AlignSubScript   Characters are placed below the base line for                             normal text.     \value AlignMiddle The center of the object is vertically aligned with the                        base line. Currently, this is only implemented for                        inline objects.     \value AlignBottom The bottom edge of the object is vertically aligned with                        the base line.     \value AlignTop    The top edge of the object is vertically aligned with                        the base line.     \value AlignBaseline The base lines of the characters are aligned. */
end_comment
begin_comment
comment|/*!     \enum QTextCharFormat::UnderlineStyle      This enum describes the different ways drawing underlined text.      \value NoUnderline          Text is draw without any underlining decoration.     \value SingleUnderline      A line is drawn using Qt::SolidLine.     \value DashUnderline        Dashes are drawn using Qt::DashLine.     \value DotLine              Dots are drawn using Qt::DotLine;     \value DashDotLine          Dashs and dots are drawn using Qt::DashDotLine.     \value DashDotDotLine       Underlines draw drawn using Qt::DashDotDotLine.     \value WaveUnderline        The text is underlined using a wave shaped line.     \value SpellCheckUnderline  The underline is drawn depending on the QStyle::SH_SpellCeckUnderlineStyle                                 style hint of the QApplication style. By default this is mapped to                                 WaveUnderline, on Mac OS X it is mapped to DashDotLine.      \sa Qt::PenStyle */
end_comment
begin_comment
comment|/*!     \fn QTextCharFormat::QTextCharFormat()      Constructs a new character format object. */
end_comment
begin_constructor
DECL|function|QTextCharFormat
name|QTextCharFormat
operator|::
name|QTextCharFormat
parameter_list|()
member_init_list|:
name|QTextFormat
argument_list|(
name|CharFormat
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*!     \internal     \fn QTextCharFormat::QTextCharFormat(const QTextFormat&other)      Creates a new character format with the same attributes as the \a given     text format. */
end_comment
begin_constructor
DECL|function|QTextCharFormat
name|QTextCharFormat
operator|::
name|QTextCharFormat
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|fmt
parameter_list|)
member_init_list|:
name|QTextFormat
argument_list|(
name|fmt
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \fn bool QTextCharFormat::isValid() const      Returns true if this character format is valid; otherwise returns     false. */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setFontFamily(const QString&family)      Sets the text format's font \a family.      \sa setFont() */
end_comment
begin_comment
comment|/*!     \fn QString QTextCharFormat::fontFamily() const      Returns the text format's font family.      \sa font() */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setFontPointSize(qreal size)      Sets the text format's font \a size.      \sa setFont() */
end_comment
begin_comment
comment|/*!     \fn qreal QTextCharFormat::fontPointSize() const      Returns the font size used to display text in this format.      \sa font() */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setFontWeight(int weight)      Sets the text format's font weight to \a weight.      \sa setFont(), QFont::Weight */
end_comment
begin_comment
comment|/*!     \fn int QTextCharFormat::fontWeight() const      Returns the text format's font weight.      \sa font(), QFont::Weight */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setFontItalic(bool italic)      If \a italic is true, sets the text format's font to be italic; otherwise     the font will be non-italic.      \sa setFont() */
end_comment
begin_comment
comment|/*!     \fn bool QTextCharFormat::fontItalic() const      Returns true if the text format's font is italic; otherwise     returns false.      \sa font() */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setFontUnderline(bool underline)      If \a underline is true, sets the text format's font to be underlined;     otherwise it is displayed non-underlined.      \sa setFont() */
end_comment
begin_comment
comment|/*!     \fn bool QTextCharFormat::fontUnderline() const      Returns true if the text format's font is underlined; otherwise     returns false.      \sa font() */
end_comment
begin_function
DECL|function|fontUnderline
name|bool
name|QTextCharFormat
operator|::
name|fontUnderline
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|hasProperty
argument_list|(
name|TextUnderlineStyle
argument_list|)
condition|)
return|return
name|underlineStyle
argument_list|()
operator|==
name|SingleUnderline
return|;
return|return
name|boolProperty
argument_list|(
name|FontUnderline
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn UnderlineStyle QTextCharFormat::underlineStyle() const     \since 4.2      Returns the style of underlining the text. */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setUnderlineStyle(UnderlineStyle style)     \since 4.2      Sets the style of underlining the text to \a style. */
end_comment
begin_function
DECL|function|setUnderlineStyle
name|void
name|QTextCharFormat
operator|::
name|setUnderlineStyle
parameter_list|(
name|UnderlineStyle
name|style
parameter_list|)
block|{
name|setProperty
argument_list|(
name|TextUnderlineStyle
argument_list|,
name|style
argument_list|)
expr_stmt|;
comment|// for compatibility
name|setProperty
argument_list|(
name|FontUnderline
argument_list|,
name|style
operator|==
name|SingleUnderline
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QTextCharFormat::setFontOverline(bool overline)      If \a overline is true, sets the text format's font to be overlined;     otherwise the font is displayed non-overlined.      \sa setFont() */
end_comment
begin_comment
comment|/*!     \fn bool QTextCharFormat::fontOverline() const      Returns true if the text format's font is overlined; otherwise     returns false.      \sa font() */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setFontStrikeOut(bool strikeOut)      If \a strikeOut is true, sets the text format's font with strike-out     enabled (with a horizontal line through it); otherwise it is displayed     without strikeout.      \sa setFont() */
end_comment
begin_comment
comment|/*!     \fn bool QTextCharFormat::fontStrikeOut() const      Returns true if the text format's font is struck out (has a horizontal line     drawn through it); otherwise returns false.      \sa font() */
end_comment
begin_comment
comment|/*!     \since 4.5     \fn void QTextCharFormat::setFontStyleHint(QFont::StyleHint hint, QFont::StyleStrategy strategy)      Sets the font style \a hint and \a strategy.      Qt does not support style hints on X11 since this information is not provided by the window system.      \sa setFont()     \sa QFont::setStyleHint() */
end_comment
begin_comment
comment|/*!     \since 4.5     \fn void QTextCharFormat::setFontStyleStrategy(QFont::StyleStrategy strategy)      Sets the font style \a strategy.      \sa setFont()     \sa QFont::setStyleStrategy() */
end_comment
begin_comment
comment|/*!     \since 4.5     \fn void QTextCharFormat::setFontKerning(bool enable)     Enables kerning for this font if \a enable is true; otherwise disables it.      When kerning is enabled, glyph metrics do not add up anymore, even for     Latin text. In other words, the assumption that width('a') + width('b')     is equal to width("ab") is not neccesairly true.      \sa setFont() */
end_comment
begin_comment
comment|/*!     \fn QTextCharFormat::StyleHint QTextCharFormat::fontStyleHint() const     \since 4.5      Returns the font style hint.      \sa setFontStyleHint(), font() */
end_comment
begin_comment
comment|/*!     \since 4.5     \fn QTextCharFormat::StyleStrategy QTextCharFormat::fontStyleStrategy() const      Returns the current font style strategy.      \sa setFontStyleStrategy()     \sa font() */
end_comment
begin_comment
comment|/*!     \since 4.5     \fn  bool QTextCharFormat::fontKerning() const     Returns true if the font kerning is enabled.      \sa setFontKerning()     \sa font() */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setFontFixedPitch(bool fixedPitch)      If \a fixedPitch is true, sets the text format's font to be fixed pitch;     otherwise a non-fixed pitch font is used.      \sa setFont() */
end_comment
begin_comment
comment|/*!     \fn bool QTextCharFormat::fontFixedPitch() const      Returns true if the text format's font is fixed pitch; otherwise     returns false.      \sa font() */
end_comment
begin_comment
comment|/*!     \since 4.8      \fn void QTextCharFormat::setFontHintingPreference(QFont::HintingPreference hintingPreference)      Sets the hinting preference of the text format's font to be \a hintingPreference.      \sa setFont(), QFont::setHintingPreference() */
end_comment
begin_comment
comment|/*!     \since 4.8      \fn QFont::HintingPreference QTextCharFormat::fontHintingPreference() const      Returns the hinting preference set for this text format.      \sa font(), QFont::hintingPreference() */
end_comment
begin_comment
comment|/*!     \fn QPen QTextCharFormat::textOutline() const      Returns the pen used to draw the outlines of characters in this format. */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setTextOutline(const QPen&pen)      Sets the pen used to draw the outlines of characters to the given \a pen. */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setToolTip(const QString&text)     \since 4.3      Sets the tool tip for a fragment of text to the given \a text. */
end_comment
begin_comment
comment|/*!     \fn QString QTextCharFormat::toolTip() const     \since 4.3      Returns the tool tip that is displayed for a fragment of text. */
end_comment
begin_comment
comment|/*!     \fn void QTextFormat::setForeground(const QBrush&brush)      Sets the foreground brush to the specified \a brush. The foreground     brush is mostly used to render text.      \sa foreground(), clearForeground(), setBackground() */
end_comment
begin_comment
comment|/*!     \fn QBrush QTextFormat::foreground() const      Returns the brush used to render foreground details, such as text,     frame outlines, and table borders.      \sa setForeground(), clearForeground(), background() */
end_comment
begin_comment
comment|/*!     \fn void QTextFormat::clearForeground()      Clears the brush used to paint the document's foreground. The default     brush will be used.      \sa foreground(), setForeground(), clearBackground() */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setAnchor(bool anchor)      If \a anchor is true, text with this format represents an anchor, and is     formatted in the appropriate way; otherwise the text is formatted normally.     (Anchors are hyperlinks which are often shown underlined and in a different     color from plain text.)      The way the text is rendered is independent of whether or not the format     has a valid anchor defined. Use setAnchorHref(), and optionally     setAnchorNames() to create a hypertext link.      \sa isAnchor() */
end_comment
begin_comment
comment|/*!     \fn bool QTextCharFormat::isAnchor() const      Returns true if the text is formatted as an anchor; otherwise     returns false.      \sa setAnchor(), setAnchorHref(), setAnchorNames() */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setAnchorHref(const QString&value)      Sets the hypertext link for the text format to the given \a value.     This is typically a URL like "http://example.com/index.html".      The anchor will be displayed with the \a value as its display text;     if you want to display different text call setAnchorNames().      To format the text as a hypertext link use setAnchor(). */
end_comment
begin_comment
comment|/*!     \fn QString QTextCharFormat::anchorHref() const      Returns the text format's hypertext link, or an empty string if     none has been set. */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setAnchorName(const QString&name)     \obsolete      This function is deprecated. Use setAnchorNames() instead.      Sets the text format's anchor \a name. For the anchor to work as a     hyperlink, the destination must be set with setAnchorHref() and     the anchor must be enabled with setAnchor(). */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setAnchorNames(const QStringList&names)     \since 4.3      Sets the text format's anchor \a names. For the anchor to work as a     hyperlink, the destination must be set with setAnchorHref() and     the anchor must be enabled with setAnchor(). */
end_comment
begin_comment
comment|/*!     \fn QString QTextCharFormat::anchorName() const     \obsolete      This function is deprecated. Use anchorNames() instead.      Returns the anchor name associated with this text format, or an empty     string if none has been set. If the anchor name is set, text with this     format can be the destination of a hypertext link. */
end_comment
begin_function
DECL|function|anchorName
name|QString
name|QTextCharFormat
operator|::
name|anchorName
parameter_list|()
specifier|const
block|{
name|QVariant
name|prop
init|=
name|property
argument_list|(
name|AnchorName
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|.
name|userType
argument_list|()
operator|==
name|QVariant
operator|::
name|StringList
condition|)
return|return
name|prop
operator|.
name|toStringList
argument_list|()
operator|.
name|value
argument_list|(
literal|0
argument_list|)
return|;
elseif|else
if|if
condition|(
name|prop
operator|.
name|userType
argument_list|()
operator|!=
name|QVariant
operator|::
name|String
condition|)
return|return
name|QString
argument_list|()
return|;
return|return
name|prop
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QStringList QTextCharFormat::anchorNames() const     \since 4.3      Returns the anchor names associated with this text format, or an empty     string list if none has been set. If the anchor names are set, text with this     format can be the destination of a hypertext link. */
end_comment
begin_function
DECL|function|anchorNames
name|QStringList
name|QTextCharFormat
operator|::
name|anchorNames
parameter_list|()
specifier|const
block|{
name|QVariant
name|prop
init|=
name|property
argument_list|(
name|AnchorName
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|.
name|userType
argument_list|()
operator|==
name|QVariant
operator|::
name|StringList
condition|)
return|return
name|prop
operator|.
name|toStringList
argument_list|()
return|;
elseif|else
if|if
condition|(
name|prop
operator|.
name|userType
argument_list|()
operator|!=
name|QVariant
operator|::
name|String
condition|)
return|return
name|QStringList
argument_list|()
return|;
return|return
name|QStringList
argument_list|(
name|prop
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QTextCharFormat::setTableCellRowSpan(int tableCellRowSpan)     \internal      If this character format is applied to characters in a table cell,     the cell will span \a tableCellRowSpan rows. */
end_comment
begin_comment
comment|/*!     \fn int QTextCharFormat::tableCellRowSpan() const     \internal      If this character format is applied to characters in a table cell,     this function returns the number of rows spanned by the text (this may     be 1); otherwise it returns 1. */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setTableCellColumnSpan(int tableCellColumnSpan)     \internal      If this character format is applied to characters in a table cell,     the cell will span \a tableCellColumnSpan columns. */
end_comment
begin_comment
comment|/*!     \fn int QTextCharFormat::tableCellColumnSpan() const     \internal      If this character format is applied to characters in a table cell,     this function returns the number of columns spanned by the text (this     may be 1); otherwise it returns 1. */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setUnderlineColor(const QColor&color)      Sets the underline color used for the characters with this format to     the \a color specified.      \sa underlineColor() */
end_comment
begin_comment
comment|/*!     \fn QColor QTextCharFormat::underlineColor() const      Returns the color used to underline the characters with this format.      \sa setUnderlineColor() */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setVerticalAlignment(VerticalAlignment alignment)      Sets the vertical alignment used for the characters with this format to     the \a alignment specified.      \sa verticalAlignment() */
end_comment
begin_comment
comment|/*!     \fn VerticalAlignment QTextCharFormat::verticalAlignment() const      Returns the vertical alignment used for characters with this format.      \sa setVerticalAlignment() */
end_comment
begin_comment
comment|/*!     Sets the text format's \a font. */
end_comment
begin_function
DECL|function|setFont
name|void
name|QTextCharFormat
operator|::
name|setFont
parameter_list|(
specifier|const
name|QFont
modifier|&
name|font
parameter_list|)
block|{
name|setFontFamily
argument_list|(
name|font
operator|.
name|family
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|qreal
name|pointSize
init|=
name|font
operator|.
name|pointSizeF
argument_list|()
decl_stmt|;
if|if
condition|(
name|pointSize
operator|>
literal|0
condition|)
block|{
name|setFontPointSize
argument_list|(
name|pointSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|int
name|pixelSize
init|=
name|font
operator|.
name|pixelSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|pixelSize
operator|>
literal|0
condition|)
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|FontPixelSize
argument_list|,
name|pixelSize
argument_list|)
expr_stmt|;
block|}
name|setFontWeight
argument_list|(
name|font
operator|.
name|weight
argument_list|()
argument_list|)
expr_stmt|;
name|setFontItalic
argument_list|(
name|font
operator|.
name|italic
argument_list|()
argument_list|)
expr_stmt|;
name|setUnderlineStyle
argument_list|(
name|font
operator|.
name|underline
argument_list|()
condition|?
name|SingleUnderline
else|:
name|NoUnderline
argument_list|)
expr_stmt|;
name|setFontOverline
argument_list|(
name|font
operator|.
name|overline
argument_list|()
argument_list|)
expr_stmt|;
name|setFontStrikeOut
argument_list|(
name|font
operator|.
name|strikeOut
argument_list|()
argument_list|)
expr_stmt|;
name|setFontFixedPitch
argument_list|(
name|font
operator|.
name|fixedPitch
argument_list|()
argument_list|)
expr_stmt|;
name|setFontCapitalization
argument_list|(
name|font
operator|.
name|capitalization
argument_list|()
argument_list|)
expr_stmt|;
name|setFontWordSpacing
argument_list|(
name|font
operator|.
name|wordSpacing
argument_list|()
argument_list|)
expr_stmt|;
name|setFontLetterSpacingType
argument_list|(
name|font
operator|.
name|letterSpacingType
argument_list|()
argument_list|)
expr_stmt|;
name|setFontLetterSpacing
argument_list|(
name|font
operator|.
name|letterSpacing
argument_list|()
argument_list|)
expr_stmt|;
name|setFontStretch
argument_list|(
name|font
operator|.
name|stretch
argument_list|()
argument_list|)
expr_stmt|;
name|setFontStyleHint
argument_list|(
name|font
operator|.
name|styleHint
argument_list|()
argument_list|)
expr_stmt|;
name|setFontStyleStrategy
argument_list|(
name|font
operator|.
name|styleStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|setFontKerning
argument_list|(
name|font
operator|.
name|kerning
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the font for this character format. */
end_comment
begin_function
DECL|function|font
name|QFont
name|QTextCharFormat
operator|::
name|font
parameter_list|()
specifier|const
block|{
return|return
name|d
condition|?
name|d
operator|->
name|font
argument_list|()
else|:
name|QFont
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \class QTextBlockFormat     \reentrant      \brief The QTextBlockFormat class provides formatting information for     blocks of text in a QTextDocument.     \inmodule QtGui      \ingroup richtext-processing      A document is composed of a list of blocks, represented by QTextBlock     objects. Each block can contain an item of some kind, such as a     paragraph of text, a table, a list, or an image. Every block has an     associated QTextBlockFormat that specifies its characteristics.      To cater for left-to-right and right-to-left languages you can set     a block's direction with setDirection(). Paragraph alignment is     set with setAlignment(). Margins are controlled by setTopMargin(),     setBottomMargin(), setLeftMargin(), setRightMargin(). Overall     indentation is set with setIndent(), the indentation of the first     line with setTextIndent().      Line spacing is set with setLineHeight() and retrieved via lineHeight()     and lineHeightType(). The types of line spacing available are in the     LineHeightTypes enum.      Line breaking can be enabled and disabled with setNonBreakableLines().      The brush used to paint the paragraph's background     is set with \l{QTextFormat::setBackground()}{setBackground()}, and other     aspects of the text's appearance can be customized by using the     \l{QTextFormat::setProperty()}{setProperty()} function with the     \c OutlinePen, \c ForegroundBrush, and \c BackgroundBrush     \l{QTextFormat::Property} values.      If a text block is part of a list, it can also have a list format that     is accessible with the listFormat() function.      \sa QTextBlock, QTextCharFormat */
end_comment
begin_comment
comment|/*!     \since 4.8     \enum QTextBlockFormat::LineHeightTypes      This enum describes the various types of line spacing support paragraphs can have.      \value SingleHeight This is the default line height: single spacing.     \value ProportionalHeight This sets the spacing proportional to the line (in percentage).                               For example, set to 200 for double spacing.     \value FixedHeight This sets the line height to a fixed line height (in pixels).     \value MinimumHeight This sets the minimum line height (in pixels).     \value LineDistanceHeight This adds the specified height between lines (in pixels).      \sa lineHeight(), lineHeightType(), setLineHeight() */
end_comment
begin_comment
comment|/*!     \fn QTextBlockFormat::QTextBlockFormat()      Constructs a new QTextBlockFormat. */
end_comment
begin_constructor
DECL|function|QTextBlockFormat
name|QTextBlockFormat
operator|::
name|QTextBlockFormat
parameter_list|()
member_init_list|:
name|QTextFormat
argument_list|(
name|BlockFormat
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*!     \internal     \fn QTextBlockFormat::QTextBlockFormat(const QTextFormat&other)      Creates a new block format with the same attributes as the \a given     text format. */
end_comment
begin_constructor
DECL|function|QTextBlockFormat
name|QTextBlockFormat
operator|::
name|QTextBlockFormat
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|fmt
parameter_list|)
member_init_list|:
name|QTextFormat
argument_list|(
name|fmt
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \since 4.4     Sets the tab positions for the text block to those specified by     \a tabs.      \sa tabPositions() */
end_comment
begin_function
DECL|function|setTabPositions
name|void
name|QTextBlockFormat
operator|::
name|setTabPositions
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QTextOption
operator|::
name|Tab
argument_list|>
modifier|&
name|tabs
parameter_list|)
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|list
decl_stmt|;
name|QList
argument_list|<
name|QTextOption
operator|::
name|Tab
argument_list|>
operator|::
name|ConstIterator
name|iter
init|=
name|tabs
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|!=
name|tabs
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|QVariant
name|v
decl_stmt|;
name|v
operator|.
name|setValue
argument_list|<
name|QTextOption
operator|::
name|Tab
argument_list|>
argument_list|(
operator|*
name|iter
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
operator|++
name|iter
expr_stmt|;
block|}
name|setProperty
argument_list|(
name|TabPositions
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4     Returns a list of tab positions defined for the text block.      \sa setTabPositions() */
end_comment
begin_function
DECL|function|tabPositions
name|QList
argument_list|<
name|QTextOption
operator|::
name|Tab
argument_list|>
name|QTextBlockFormat
operator|::
name|tabPositions
parameter_list|()
specifier|const
block|{
name|QVariant
name|variant
init|=
name|property
argument_list|(
name|TabPositions
argument_list|)
decl_stmt|;
if|if
condition|(
name|variant
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QList
argument_list|<
name|QTextOption
operator|::
name|Tab
argument_list|>
argument_list|()
return|;
name|QList
argument_list|<
name|QTextOption
operator|::
name|Tab
argument_list|>
name|answer
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|variantsList
init|=
name|qvariant_cast
argument_list|<
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|>
argument_list|(
name|variant
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
operator|::
name|Iterator
name|iter
init|=
name|variantsList
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|!=
name|variantsList
operator|.
name|end
argument_list|()
condition|)
block|{
name|answer
operator|.
name|append
argument_list|(
name|qvariant_cast
argument_list|<
name|QTextOption
operator|::
name|Tab
argument_list|>
argument_list|(
operator|*
name|iter
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|iter
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QTextBlockFormat::isValid() const      Returns true if this block format is valid; otherwise returns     false. */
end_comment
begin_comment
comment|/*!     \fn void QTextFormat::setLayoutDirection(Qt::LayoutDirection direction)      Sets the document's layout direction to the specified \a direction.      \sa layoutDirection() */
end_comment
begin_comment
comment|/*!     \fn Qt::LayoutDirection QTextFormat::layoutDirection() const      Returns the document's layout direction.      \sa setLayoutDirection() */
end_comment
begin_comment
comment|/*!     \fn void QTextBlockFormat::setAlignment(Qt::Alignment alignment)      Sets the paragraph's \a alignment.      \sa alignment() */
end_comment
begin_comment
comment|/*!     \fn Qt::Alignment QTextBlockFormat::alignment() const      Returns the paragraph's alignment.      \sa setAlignment() */
end_comment
begin_comment
comment|/*!     \fn void QTextBlockFormat::setTopMargin(qreal margin)      Sets the paragraph's top \a margin.      \sa topMargin(), setBottomMargin(), setLeftMargin(), setRightMargin() */
end_comment
begin_comment
comment|/*!     \fn qreal QTextBlockFormat::topMargin() const      Returns the paragraph's top margin.      \sa setTopMargin(), bottomMargin() */
end_comment
begin_comment
comment|/*!     \fn void QTextBlockFormat::setBottomMargin(qreal margin)      Sets the paragraph's bottom \a margin.      \sa bottomMargin(), setTopMargin(), setLeftMargin(), setRightMargin() */
end_comment
begin_comment
comment|/*!     \fn qreal QTextBlockFormat::bottomMargin() const      Returns the paragraph's bottom margin.      \sa setBottomMargin(), topMargin() */
end_comment
begin_comment
comment|/*!     \fn void QTextBlockFormat::setLeftMargin(qreal margin)      Sets the paragraph's left \a margin. Indentation can be applied separately     with setIndent().      \sa leftMargin(), setRightMargin(), setTopMargin(), setBottomMargin() */
end_comment
begin_comment
comment|/*!     \fn qreal QTextBlockFormat::leftMargin() const      Returns the paragraph's left margin.      \sa setLeftMargin(), rightMargin(), indent() */
end_comment
begin_comment
comment|/*!     \fn void QTextBlockFormat::setRightMargin(qreal margin)      Sets the paragraph's right \a margin.      \sa rightMargin(), setLeftMargin(), setTopMargin(), setBottomMargin() */
end_comment
begin_comment
comment|/*!     \fn qreal QTextBlockFormat::rightMargin() const      Returns the paragraph's right margin.      \sa setRightMargin(), leftMargin() */
end_comment
begin_comment
comment|/*!     \fn void QTextBlockFormat::setTextIndent(qreal indent)      Sets the \a indent for the first line in the block. This allows the first     line of a paragraph to be indented differently to the other lines,     enhancing the readability of the text.      \sa textIndent(), setLeftMargin(), setRightMargin(), setTopMargin(), setBottomMargin() */
end_comment
begin_comment
comment|/*!     \fn qreal QTextBlockFormat::textIndent() const      Returns the paragraph's text indent.      \sa setTextIndent() */
end_comment
begin_comment
comment|/*!     \fn void QTextBlockFormat::setIndent(int indentation)      Sets the paragraph's \a indentation. Margins are set independently of     indentation with setLeftMargin() and setTextIndent().     The \a indentation is an integer that is multiplied with the document-wide     standard indent, resulting in the actual indent of the paragraph.      \sa indent(), QTextDocument::indentWidth() */
end_comment
begin_comment
comment|/*!     \fn int QTextBlockFormat::indent() const      Returns the paragraph's indent.      \sa setIndent() */
end_comment
begin_comment
comment|/*!     \fn void QTextBlockFormat::setLineHeight(qreal height, int heightType)     \since 4.8      Sets the line height for the paragraph to the value given by \a height     which is dependent on \a heightType in the way described by the     LineHeightTypes enum.      \sa LineHeightTypes, lineHeight(), lineHeightType() */
end_comment
begin_comment
comment|/*!     \fn qreal QTextBlockFormat::lineHeight(qreal scriptLineHeight, qreal scaling) const     \since 4.8      Returns the height of the lines in the paragraph based on the height of the     script line given by \a scriptLineHeight and the specified \a scaling     factor.      The value that is returned is also dependent on the given LineHeightType of     the paragraph as well as the LineHeight setting that has been set for the     paragraph.      The scaling is needed for heights that include a fixed number of pixels, to     scale them appropriately for printing.      \sa LineHeightTypes, setLineHeight(), lineHeightType() */
end_comment
begin_comment
comment|/*!     \fn qreal QTextBlockFormat::lineHeight() const     \since 4.8      This returns the LineHeight property for the paragraph.      \sa LineHeightTypes, setLineHeight(), lineHeightType() */
end_comment
begin_comment
comment|/*!     \fn qreal QTextBlockFormat::lineHeightType() const     \since 4.8      This returns the LineHeightType property of the paragraph.      \sa LineHeightTypes, setLineHeight(), lineHeight() */
end_comment
begin_comment
comment|/*!     \fn void QTextBlockFormat::setNonBreakableLines(bool b)      If \a b is true, the lines in the paragraph are treated as     non-breakable; otherwise they are breakable.      \sa nonBreakableLines() */
end_comment
begin_comment
comment|/*!     \fn bool QTextBlockFormat::nonBreakableLines() const      Returns true if the lines in the paragraph are non-breakable;     otherwise returns false.      \sa setNonBreakableLines() */
end_comment
begin_comment
comment|/*!     \fn QTextFormat::PageBreakFlags QTextBlockFormat::pageBreakPolicy() const     \since 4.2      Returns the currently set page break policy for the paragraph. The default is     QTextFormat::PageBreak_Auto.      \sa setPageBreakPolicy() */
end_comment
begin_comment
comment|/*!     \fn void QTextBlockFormat::setPageBreakPolicy(PageBreakFlags policy)     \since 4.2      Sets the page break policy for the paragraph to \a policy.      \sa pageBreakPolicy() */
end_comment
begin_comment
comment|/*!     \class QTextListFormat     \reentrant      \brief The QTextListFormat class provides formatting information for     lists in a QTextDocument.     \inmodule QtGui      \ingroup richtext-processing      A list is composed of one or more items, represented as text blocks.     The list's format specifies the appearance of items in the list.     In particular, it determines the indentation and the style of each item.      The indentation of the items is an integer value that causes each item to     be offset from the left margin by a certain amount. This value is read with     indent() and set with setIndent().      The style used to decorate each item is set with setStyle() and can be read     with the style() function. The style controls the type of bullet points and     numbering scheme used for items in the list. Note that lists that use the     decimal numbering scheme begin counting at 1 rather than 0.      Style properties can be set to further configure the appearance of list     items; for example, the ListNumberPrefix and ListNumberSuffix properties     can be used to customize the numbers used in an ordered list so that they     appear as (1), (2), (3), etc.:      \snippet textdocument-listitemstyles/mainwindow.cpp add a styled, ordered list      \sa QTextList */
end_comment
begin_comment
comment|/*!     \enum QTextListFormat::Style      This enum describes the symbols used to decorate list items:      \value ListDisc        a filled circle     \value ListCircle      an empty circle     \value ListSquare      a filled square     \value ListDecimal     decimal values in ascending order     \value ListLowerAlpha  lower case Latin characters in alphabetical order     \value ListUpperAlpha  upper case Latin characters in alphabetical order     \value ListLowerRoman  lower case roman numerals (supports up to 4999 items only)     \value ListUpperRoman  upper case roman numerals (supports up to 4999 items only)     \omitvalue ListStyleUndefined */
end_comment
begin_comment
comment|/*!     \fn QTextListFormat::QTextListFormat()      Constructs a new list format object. */
end_comment
begin_constructor
DECL|function|QTextListFormat
name|QTextListFormat
operator|::
name|QTextListFormat
parameter_list|()
member_init_list|:
name|QTextFormat
argument_list|(
name|ListFormat
argument_list|)
block|{
name|setIndent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal     \fn QTextListFormat::QTextListFormat(const QTextFormat&other)      Creates a new list format with the same attributes as the \a given     text format. */
end_comment
begin_constructor
DECL|function|QTextListFormat
name|QTextListFormat
operator|::
name|QTextListFormat
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|fmt
parameter_list|)
member_init_list|:
name|QTextFormat
argument_list|(
name|fmt
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \fn bool QTextListFormat::isValid() const      Returns true if this list format is valid; otherwise     returns false. */
end_comment
begin_comment
comment|/*!     \fn void QTextListFormat::setStyle(Style style)      Sets the list format's \a style.      \sa style(), Style */
end_comment
begin_comment
comment|/*!     \fn Style QTextListFormat::style() const      Returns the list format's style.      \sa setStyle(), Style */
end_comment
begin_comment
comment|/*!     \fn void QTextListFormat::setIndent(int indentation)      Sets the list format's \a indentation.     The indentation is multiplied by the QTextDocument::indentWidth     property to get the effective indent in pixels.      \sa indent() */
end_comment
begin_comment
comment|/*!     \fn int QTextListFormat::indent() const      Returns the list format's indentation.     The indentation is multiplied by the QTextDocument::indentWidth     property to get the effective indent in pixels.      \sa setIndent() */
end_comment
begin_comment
comment|/*!     \fn void QTextListFormat::setNumberPrefix(const QString&numberPrefix)     \since 4.8      Sets the list format's number prefix to the string specified by     \a numberPrefix. This can be used with all sorted list types. It does not     have any effect on unsorted list types.      The default prefix is an empty string.      \sa numberPrefix() */
end_comment
begin_comment
comment|/*!     \fn int QTextListFormat::numberPrefix() const     \since 4.8      Returns the list format's number prefix.      \sa setNumberPrefix() */
end_comment
begin_comment
comment|/*!     \fn void QTextListFormat::setNumberSuffix(const QString&numberSuffix)     \since 4.8      Sets the list format's number suffix to the string specified by     \a numberSuffix. This can be used with all sorted list types. It does not     have any effect on unsorted list types.      The default suffix is ".".      \sa numberSuffix() */
end_comment
begin_comment
comment|/*!     \fn int QTextListFormat::numberSuffix() const     \since 4.8      Returns the list format's number suffix.      \sa setNumberSuffix() */
end_comment
begin_comment
comment|/*!     \class QTextFrameFormat     \reentrant      \brief The QTextFrameFormat class provides formatting information for     frames in a QTextDocument.     \inmodule QtGui      \ingroup richtext-processing      A text frame groups together one or more blocks of text, providing a layer     of structure larger than the paragraph. The format of a frame specifies     how it is rendered and positioned on the screen. It does not directly     specify the behavior of the text formatting within, but provides     constraints on the layout of its children.      The frame format defines the width() and height() of the frame on the     screen. Each frame can have a border() that surrounds its contents with     a rectangular box. The border is surrounded by a margin() around the frame,     and the contents of the frame are kept separate from the border by the     frame's padding(). This scheme is similar to the box model used by Cascading     Style Sheets for HTML pages.      \image qtextframe-style.png      The position() of a frame is set using setPosition() and determines how it     is located relative to the surrounding text.      The validity of a QTextFrameFormat object can be determined with the     isValid() function.      \sa QTextFrame, QTextBlockFormat */
end_comment
begin_comment
comment|/*!     \enum QTextFrameFormat::Position      This enum describes how a frame is located relative to the surrounding text.      \value InFlow     \value FloatLeft     \value FloatRight      \sa position(), CssFloat */
end_comment
begin_comment
comment|/*!     \enum QTextFrameFormat::BorderStyle     \since 4.3      This enum describes different border styles for the text frame.      \value BorderStyle_None     \value BorderStyle_Dotted     \value BorderStyle_Dashed     \value BorderStyle_Solid     \value BorderStyle_Double     \value BorderStyle_DotDash     \value BorderStyle_DotDotDash     \value BorderStyle_Groove     \value BorderStyle_Ridge     \value BorderStyle_Inset     \value BorderStyle_Outset      \sa borderStyle(), FrameBorderStyle */
end_comment
begin_comment
comment|/*!     \fn QTextFrameFormat::QTextFrameFormat()      Constructs a text frame format object with the default properties. */
end_comment
begin_constructor
DECL|function|QTextFrameFormat
name|QTextFrameFormat
operator|::
name|QTextFrameFormat
parameter_list|()
member_init_list|:
name|QTextFormat
argument_list|(
name|FrameFormat
argument_list|)
block|{
name|setBorderStyle
argument_list|(
name|BorderStyle_Outset
argument_list|)
expr_stmt|;
name|setBorderBrush
argument_list|(
name|Qt
operator|::
name|darkGray
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal     \fn QTextFrameFormat::QTextFrameFormat(const QTextFormat&other)      Creates a new frame format with the same attributes as the \a given     text format. */
end_comment
begin_constructor
DECL|function|QTextFrameFormat
name|QTextFrameFormat
operator|::
name|QTextFrameFormat
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|fmt
parameter_list|)
member_init_list|:
name|QTextFormat
argument_list|(
name|fmt
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \fn QTextFrameFormat::isValid() const      Returns true if the format description is valid; otherwise returns false. */
end_comment
begin_comment
comment|/*!     \fn QTextFrameFormat::setPosition(Position policy)      Sets the \a policy for positioning frames with this frame format.  */
end_comment
begin_comment
comment|/*!     \fn Position QTextFrameFormat::position() const      Returns the positioning policy for frames with this frame format. */
end_comment
begin_comment
comment|/*!     \fn QTextFrameFormat::setBorder(qreal width)      Sets the \a width (in pixels) of the frame's border. */
end_comment
begin_comment
comment|/*!     \fn qreal QTextFrameFormat::border() const      Returns the width of the border in pixels. */
end_comment
begin_comment
comment|/*!     \fn QTextFrameFormat::setBorderBrush(const QBrush&brush)     \since 4.3      Sets the \a brush used for the frame's border. */
end_comment
begin_comment
comment|/*!     \fn QBrush QTextFrameFormat::borderBrush() const     \since 4.3      Returns the brush used for the frame's border. */
end_comment
begin_comment
comment|/*!     \fn QTextFrameFormat::setBorderStyle(BorderStyle style)     \since 4.3      Sets the \a style of the frame's border. */
end_comment
begin_comment
comment|/*!     \fn BorderStyle QTextFrameFormat::borderStyle() const     \since 4.3      Returns the style of the frame's border. */
end_comment
begin_comment
comment|/*!     \fn QTextFrameFormat::setMargin(qreal margin)      Sets the frame's \a margin in pixels.     This method also sets the left, right, top and bottom margins     of the frame to the same value. The individual margins override     the general margin. */
end_comment
begin_function
DECL|function|setMargin
name|void
name|QTextFrameFormat
operator|::
name|setMargin
parameter_list|(
name|qreal
name|amargin
parameter_list|)
block|{
name|setProperty
argument_list|(
name|FrameMargin
argument_list|,
name|amargin
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|FrameTopMargin
argument_list|,
name|amargin
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|FrameBottomMargin
argument_list|,
name|amargin
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|FrameLeftMargin
argument_list|,
name|amargin
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|FrameRightMargin
argument_list|,
name|amargin
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn qreal QTextFrameFormat::margin() const      Returns the width of the frame's external margin in pixels. */
end_comment
begin_comment
comment|/*!     \fn QTextFrameFormat::setTopMargin(qreal margin)     \since 4.3      Sets the frame's top \a margin in pixels. */
end_comment
begin_comment
comment|/*!     \fn qreal QTextFrameFormat::topMargin() const     \since 4.3      Returns the width of the frame's top margin in pixels. */
end_comment
begin_function
DECL|function|topMargin
name|qreal
name|QTextFrameFormat
operator|::
name|topMargin
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|hasProperty
argument_list|(
name|FrameTopMargin
argument_list|)
condition|)
return|return
name|margin
argument_list|()
return|;
return|return
name|doubleProperty
argument_list|(
name|FrameTopMargin
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QTextFrameFormat::setBottomMargin(qreal margin)     \since 4.3      Sets the frame's bottom \a margin in pixels. */
end_comment
begin_comment
comment|/*!     \fn qreal QTextFrameFormat::bottomMargin() const     \since 4.3      Returns the width of the frame's bottom margin in pixels. */
end_comment
begin_function
DECL|function|bottomMargin
name|qreal
name|QTextFrameFormat
operator|::
name|bottomMargin
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|hasProperty
argument_list|(
name|FrameBottomMargin
argument_list|)
condition|)
return|return
name|margin
argument_list|()
return|;
return|return
name|doubleProperty
argument_list|(
name|FrameBottomMargin
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QTextFrameFormat::setLeftMargin(qreal margin)     \since 4.3      Sets the frame's left \a margin in pixels. */
end_comment
begin_comment
comment|/*!     \fn qreal QTextFrameFormat::leftMargin() const     \since 4.3      Returns the width of the frame's left margin in pixels. */
end_comment
begin_function
DECL|function|leftMargin
name|qreal
name|QTextFrameFormat
operator|::
name|leftMargin
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|hasProperty
argument_list|(
name|FrameLeftMargin
argument_list|)
condition|)
return|return
name|margin
argument_list|()
return|;
return|return
name|doubleProperty
argument_list|(
name|FrameLeftMargin
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QTextFrameFormat::setRightMargin(qreal margin)     \since 4.3      Sets the frame's right \a margin in pixels. */
end_comment
begin_comment
comment|/*!     \fn qreal QTextFrameFormat::rightMargin() const     \since 4.3      Returns the width of the frame's right margin in pixels. */
end_comment
begin_function
DECL|function|rightMargin
name|qreal
name|QTextFrameFormat
operator|::
name|rightMargin
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|hasProperty
argument_list|(
name|FrameRightMargin
argument_list|)
condition|)
return|return
name|margin
argument_list|()
return|;
return|return
name|doubleProperty
argument_list|(
name|FrameRightMargin
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QTextFrameFormat::setPadding(qreal width)      Sets the \a width of the frame's internal padding in pixels. */
end_comment
begin_comment
comment|/*!     \fn qreal QTextFrameFormat::padding() const      Returns the width of the frame's internal padding in pixels. */
end_comment
begin_comment
comment|/*!     \fn QTextFrameFormat::setWidth(const QTextLength&width)      Sets the frame's border rectangle's \a width.      \sa QTextLength */
end_comment
begin_comment
comment|/*!     \fn QTextFrameFormat::setWidth(qreal width)     \overload      Convenience method that sets the width of the frame's border     rectangle's width to the specified fixed \a width. */
end_comment
begin_comment
comment|/*!     \fn QTextFormat::PageBreakFlags QTextFrameFormat::pageBreakPolicy() const     \since 4.2      Returns the currently set page break policy for the frame/table. The default is     QTextFormat::PageBreak_Auto.      \sa setPageBreakPolicy() */
end_comment
begin_comment
comment|/*!     \fn void QTextFrameFormat::setPageBreakPolicy(PageBreakFlags policy)     \since 4.2      Sets the page break policy for the frame/table to \a policy.      \sa pageBreakPolicy() */
end_comment
begin_comment
comment|/*!     \fn QTextLength QTextFrameFormat::width() const      Returns the width of the frame's border rectangle.      \sa QTextLength */
end_comment
begin_comment
comment|/*!     \fn void QTextFrameFormat::setHeight(const QTextLength&height)      Sets the frame's \a height. */
end_comment
begin_comment
comment|/*!     \fn void QTextFrameFormat::setHeight(qreal height)     \overload      Sets the frame's \a height. */
end_comment
begin_comment
comment|/*!     \fn qreal QTextFrameFormat::height() const      Returns the height of the frame's border rectangle. */
end_comment
begin_comment
comment|/*!     \class QTextTableFormat     \reentrant      \brief The QTextTableFormat class provides formatting information for     tables in a QTextDocument.     \inmodule QtGui      \ingroup richtext-processing      A table is a group of cells ordered into rows and columns. Each table     contains at least one row and one column. Each cell contains a block.     Tables in rich text documents are formatted using the properties     defined in this class.      Tables are horizontally justified within their parent frame according to the     table's alignment. This can be read with the alignment() function and set     with setAlignment().      Cells within the table are separated by cell spacing. The number of pixels     between cells is set with setCellSpacing() and read with cellSpacing().     The contents of each cell is surrounded by cell padding. The number of pixels     between each cell edge and its contents is set with setCellPadding() and read     with cellPadding().      \image qtexttableformat-cell.png      The table's background color can be read with the background() function,     and can be specified with setBackground(). The background color of each     cell can be set independently, and will control the color of the cell within     the padded area.      The table format also provides a way to constrain the widths of the columns     in the table. Columns can be assigned a fixed width, a variable width, or     a percentage of the available width (see QTextLength). The columns() function     returns the number of columns with constraints, and the     columnWidthConstraints() function returns the constraints defined for the     table. These quantities can also be set by calling setColumnWidthConstraints()     with a vector containing new constraints. If no constraints are     required, clearColumnWidthConstraints() can be used to remove them.      \sa QTextTable, QTextTableCell, QTextLength */
end_comment
begin_comment
comment|/*!     \fn QTextTableFormat::QTextTableFormat()      Constructs a new table format object. */
end_comment
begin_constructor
DECL|function|QTextTableFormat
name|QTextTableFormat
operator|::
name|QTextTableFormat
parameter_list|()
member_init_list|:
name|QTextFrameFormat
argument_list|()
block|{
name|setObjectType
argument_list|(
name|TableObject
argument_list|)
expr_stmt|;
name|setCellSpacing
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|setBorder
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal     \fn QTextTableFormat::QTextTableFormat(const QTextFormat&other)      Creates a new table format with the same attributes as the \a given     text format. */
end_comment
begin_constructor
DECL|function|QTextTableFormat
name|QTextTableFormat
operator|::
name|QTextTableFormat
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|fmt
parameter_list|)
member_init_list|:
name|QTextFrameFormat
argument_list|(
name|fmt
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \fn bool QTextTableFormat::isValid() const      Returns true if this table format is valid; otherwise     returns false. */
end_comment
begin_comment
comment|/*!     \fn int QTextTableFormat::columns() const      Returns the number of columns specified by the table format. */
end_comment
begin_comment
comment|/*!     \internal     \fn void QTextTableFormat::setColumns(int columns)      Sets the number of \a columns required by the table format.      \sa columns() */
end_comment
begin_comment
comment|/*!     \fn void QTextTableFormat::clearColumnWidthConstraints()      Clears the column width constraints for the table.      \sa columnWidthConstraints(), setColumnWidthConstraints() */
end_comment
begin_comment
comment|/*!     \fn void QTextTableFormat::setColumnWidthConstraints(const QVector<QTextLength>&constraints)      Sets the column width \a constraints for the table.      \sa columnWidthConstraints(), clearColumnWidthConstraints() */
end_comment
begin_comment
comment|/*!     \fn QVector<QTextLength> QTextTableFormat::columnWidthConstraints() const      Returns a list of constraints used by this table format to control the     appearance of columns in a table.      \sa setColumnWidthConstraints() */
end_comment
begin_comment
comment|/*!     \fn qreal QTextTableFormat::cellSpacing() const      Returns the table's cell spacing. This describes the distance between     adjacent cells. */
end_comment
begin_comment
comment|/*!     \fn void QTextTableFormat::setCellSpacing(qreal spacing)      Sets the cell \a spacing for the table. This determines the distance     between adjacent cells. */
end_comment
begin_comment
comment|/*!     \fn qreal QTextTableFormat::cellPadding() const      Returns the table's cell padding. This describes the distance between     the border of a cell and its contents. */
end_comment
begin_comment
comment|/*!     \fn void QTextTableFormat::setCellPadding(qreal padding)      Sets the cell \a padding for the table. This determines the distance     between the border of a cell and its contents. */
end_comment
begin_comment
comment|/*!     \fn void QTextTableFormat::setAlignment(Qt::Alignment alignment)      Sets the table's \a alignment.      \sa alignment() */
end_comment
begin_comment
comment|/*!     \fn Qt::Alignment QTextTableFormat::alignment() const      Returns the table's alignment.      \sa setAlignment() */
end_comment
begin_comment
comment|/*!     \fn void QTextTableFormat::setHeaderRowCount(int count)     \since 4.2      Declares the first \a count rows of the table as table header.     The table header rows get repeated when a table is broken     across a page boundary. */
end_comment
begin_comment
comment|/*!     \fn int QTextTableFormat::headerRowCount() const     \since 4.2      Returns the number of rows in the table that define the header.      \sa setHeaderRowCount() */
end_comment
begin_comment
comment|/*!     \fn void QTextFormat::setBackground(const QBrush&brush)      Sets the brush use to paint the document's background to the     \a brush specified.      \sa background(), clearBackground(), setForeground() */
end_comment
begin_comment
comment|/*!     \fn QColor QTextFormat::background() const      Returns the brush used to paint the document's background.      \sa setBackground(), clearBackground(), foreground() */
end_comment
begin_comment
comment|/*!     \fn void QTextFormat::clearBackground()      Clears the brush used to paint the document's background. The default     brush will be used.      \sa background(), setBackground(), clearForeground() */
end_comment
begin_comment
comment|/*!     \class QTextImageFormat     \reentrant      \brief The QTextImageFormat class provides formatting information for     images in a QTextDocument.     \inmodule QtGui      \ingroup richtext-processing      Inline images are represented by an object replacement character     (0xFFFC in Unicode) which has an associated QTextImageFormat. The     image format specifies a name with setName() that is used to     locate the image. The size of the rectangle that the image will     occupy is specified using setWidth() and setHeight().      Images can be supplied in any format for which Qt has an image     reader, so SVG drawings can be included alongside PNG, TIFF and     other bitmap formats.      \sa QImage, QImageReader */
end_comment
begin_comment
comment|/*!     \fn QTextImageFormat::QTextImageFormat()      Creates a new image format object. */
end_comment
begin_constructor
DECL|function|QTextImageFormat
name|QTextImageFormat
operator|::
name|QTextImageFormat
parameter_list|()
member_init_list|:
name|QTextCharFormat
argument_list|()
block|{
name|setObjectType
argument_list|(
name|ImageObject
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal     \fn QTextImageFormat::QTextImageFormat(const QTextFormat&other)      Creates a new image format with the same attributes as the \a given     text format. */
end_comment
begin_constructor
DECL|function|QTextImageFormat
name|QTextImageFormat
operator|::
name|QTextImageFormat
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|fmt
parameter_list|)
member_init_list|:
name|QTextCharFormat
argument_list|(
name|fmt
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \fn bool QTextImageFormat::isValid() const      Returns true if this image format is valid; otherwise returns false. */
end_comment
begin_comment
comment|/*!     \fn void QTextImageFormat::setName(const QString&name)      Sets the \a name of the image. The \a name is used to locate the image     in the application's resources.      \sa name() */
end_comment
begin_comment
comment|/*!     \fn QString QTextImageFormat::name() const      Returns the name of the image. The name refers to an entry in the     application's resources file.      \sa setName() */
end_comment
begin_comment
comment|/*!     \fn void QTextImageFormat::setWidth(qreal width)      Sets the \a width of the rectangle occupied by the image.      \sa width(), setHeight() */
end_comment
begin_comment
comment|/*!     \fn qreal QTextImageFormat::width() const      Returns the width of the rectangle occupied by the image.      \sa height(), setWidth() */
end_comment
begin_comment
comment|/*!     \fn void QTextImageFormat::setHeight(qreal height)      Sets the \a height of the rectangle occupied by the image.      \sa height(), setWidth() */
end_comment
begin_comment
comment|/*!     \fn qreal QTextImageFormat::height() const      Returns the height of the rectangle occupied by the image.      \sa width(), setHeight() */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setFontCapitalization(QFont::Capitalization capitalization)     \since 4.4      Sets the capitalization of the text that apppears in this font to \a capitalization.      A font's capitalization makes the text appear in the selected capitalization mode.      \sa fontCapitalization() */
end_comment
begin_comment
comment|/*!     \fn Capitalization QTextCharFormat::fontCapitalization() const     \since 4.4      Returns the current capitalization type of the font. */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setFontLetterSpacingType(QFont::SpacingType letterSpacingType)     \since 5.0      Sets the letter spacing type of this format to \a letterSpacingType.      \sa fontLetterSpacingType()     \sa setFontLetterSpacing()     \sa fontLetterSpacing() */
end_comment
begin_comment
comment|/*!     \fn QFont::SpacingType QTextCharFormat::fontLetterSpacingType() const     \since 5.0      Returns the letter spacing type of this format..      \sa setFontLetterSpacingType()     \sa setFontLetterSpacing()     \sa fontLetterSpacing() */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setFontLetterSpacing(qreal spacing)     \since 4.4      Sets the letter spacing of this format to the given \a spacing. The meaning of the value     depends on the font letter spacing type.      For percentage spacing a value of 100 indicates default spacing; a value of 200 doubles the     amount of space a letter takes.      \sa fontLetterSpacing()     \sa setFontLetterSpacingType()     \sa fontLetterSpacingType() */
end_comment
begin_comment
comment|/*!     \fn qreal QTextCharFormat::fontLetterSpacing() const     \since 4.4      Returns the current letter spacing.      \sa setFontLetterSpacing()     \sa setFontLetterSpacingType()     \sa fontLetterSpacingType() */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setFontWordSpacing(qreal spacing)     \since 4.4      Sets the word spacing of this format to the given \a spacing, in pixels.      \sa fontWordSpacing() */
end_comment
begin_comment
comment|/*!     \fn qreal QTextCharFormat::fontWordSpacing() const     \since 4.4      Returns the current word spacing value. */
end_comment
begin_comment
comment|/*!     \fn void QTextCharFormat::setFontStretch(int factor)     \since 5.0      Sets the stretch factor for the font to \a factor.      The stretch factor changes the width of all characters in the font by factor percent. For example, setting \a factor to 150 results in all characters in the font being 1.5 times (ie. 150%) wider. The default stretch factor is 100. The minimum stretch factor is 1, and the maximum stretch factor is 4000.      The stretch factor is only applied to outline fonts. The stretch factor is ignored for bitmap fonts.      \sa fontStretch() */
end_comment
begin_comment
comment|/*!     \fn int QTextCharFormat::fontStretch() const     \since 5.0      Returns the current font stretching.     \sa setFontStretch() */
end_comment
begin_comment
comment|/*!    \fn qreal QTextTableCellFormat::topPadding() const     \since 4.4     Gets the top padding of the table cell.     \sa setTopPadding(), leftPadding(), rightPadding(), bottomPadding() */
end_comment
begin_comment
comment|/*!    \fn qreal QTextTableCellFormat::bottomPadding() const     \since 4.4     Gets the bottom padding of the table cell.     \sa setBottomPadding(), leftPadding(), rightPadding(), topPadding() */
end_comment
begin_comment
comment|/*!    \fn qreal QTextTableCellFormat::leftPadding() const     \since 4.4     Gets the left padding of the table cell.     \sa setLeftPadding(), rightPadding(), topPadding(), bottomPadding() */
end_comment
begin_comment
comment|/*!    \fn qreal QTextTableCellFormat::rightPadding() const     \since 4.4     Gets the right padding of the table cell.     \sa setRightPadding(), leftPadding(), topPadding(), bottomPadding() */
end_comment
begin_comment
comment|/*!    \fn void QTextTableCellFormat::setTopPadding(qreal padding)     \since 4.4     Sets the top \a padding of the table cell.     \sa topPadding(), setLeftPadding(), setRightPadding(), setBottomPadding() */
end_comment
begin_comment
comment|/*!    \fn void QTextTableCellFormat::setBottomPadding(qreal padding)     \since 4.4     Sets the bottom \a padding of the table cell.     \sa bottomPadding(), setLeftPadding(), setRightPadding(), setTopPadding() */
end_comment
begin_comment
comment|/*!    \fn void QTextTableCellFormat::setLeftPadding(qreal padding)     \since 4.4     Sets the left \a padding of the table cell.     \sa leftPadding(), setRightPadding(), setTopPadding(), setBottomPadding() */
end_comment
begin_comment
comment|/*!    \fn void QTextTableCellFormat::setRightPadding(qreal padding)     \since 4.4     Sets the right \a padding of the table cell.     \sa rightPadding(), setLeftPadding(), setTopPadding(), setBottomPadding() */
end_comment
begin_comment
comment|/*!    \fn void QTextTableCellFormat::setPadding(qreal padding)     \since 4.4     Sets the left, right, top, and bottom \a padding of the table cell.     \sa setLeftPadding(), setRightPadding(), setTopPadding(), setBottomPadding() */
end_comment
begin_comment
comment|/*!     \fn bool QTextTableCellFormat::isValid() const     \since 4.4      Returns true if this table cell format is valid; otherwise returns false. */
end_comment
begin_comment
comment|/*!     \fn QTextTableCellFormat::QTextTableCellFormat()     \since 4.4      Constructs a new table cell format object. */
end_comment
begin_constructor
DECL|function|QTextTableCellFormat
name|QTextTableCellFormat
operator|::
name|QTextTableCellFormat
parameter_list|()
member_init_list|:
name|QTextCharFormat
argument_list|()
block|{
name|setObjectType
argument_list|(
name|TableCellObject
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal     \fn QTextTableCellFormat::QTextTableCellFormat(const QTextFormat&other)      Creates a new table cell format with the same attributes as the \a given     text format. */
end_comment
begin_constructor
DECL|function|QTextTableCellFormat
name|QTextTableCellFormat
operator|::
name|QTextTableCellFormat
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|fmt
parameter_list|)
member_init_list|:
name|QTextCharFormat
argument_list|(
name|fmt
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \class QTextTableCellFormat     \reentrant     \since 4.4      \brief The QTextTableCellFormat class provides formatting information for     table cells in a QTextDocument.     \inmodule QtGui      \ingroup richtext-processing      The table cell format of a table cell in a document specifies the visual     properties of the table cell.      The padding properties of a table cell are controlled by setLeftPadding(),     setRightPadding(), setTopPadding(), and setBottomPadding(). All the paddings     can be set at once using setPadding().      \sa QTextFormat, QTextBlockFormat, QTextTableFormat, QTextCharFormat */
end_comment
begin_comment
comment|// ------------------------------------------------------
end_comment
begin_constructor
DECL|function|QTextFormatCollection
name|QTextFormatCollection
operator|::
name|QTextFormatCollection
parameter_list|(
specifier|const
name|QTextFormatCollection
modifier|&
name|rhs
parameter_list|)
block|{
name|formats
operator|=
name|rhs
operator|.
name|formats
expr_stmt|;
name|objFormats
operator|=
name|rhs
operator|.
name|objFormats
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|operator =
name|QTextFormatCollection
modifier|&
name|QTextFormatCollection
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QTextFormatCollection
modifier|&
name|rhs
parameter_list|)
block|{
name|formats
operator|=
name|rhs
operator|.
name|formats
expr_stmt|;
name|objFormats
operator|=
name|rhs
operator|.
name|objFormats
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_destructor
DECL|function|~QTextFormatCollection
name|QTextFormatCollection
operator|::
name|~
name|QTextFormatCollection
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|indexForFormat
name|int
name|QTextFormatCollection
operator|::
name|indexForFormat
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|format
parameter_list|)
block|{
name|uint
name|hash
init|=
name|getHash
argument_list|(
name|format
operator|.
name|d
argument_list|,
name|format
operator|.
name|format_type
argument_list|)
decl_stmt|;
name|QMultiHash
argument_list|<
name|uint
argument_list|,
name|int
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|hashes
operator|.
name|constFind
argument_list|(
name|hash
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|hashes
operator|.
name|constEnd
argument_list|()
operator|&&
name|i
operator|.
name|key
argument_list|()
operator|==
name|hash
condition|)
block|{
if|if
condition|(
name|formats
operator|.
name|value
argument_list|(
name|i
operator|.
name|value
argument_list|()
argument_list|)
operator|==
name|format
condition|)
block|{
return|return
name|i
operator|.
name|value
argument_list|()
return|;
block|}
operator|++
name|i
expr_stmt|;
block|}
name|int
name|idx
init|=
name|formats
operator|.
name|size
argument_list|()
decl_stmt|;
name|formats
operator|.
name|append
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|QT_TRY
block|{
name|QTextFormat
modifier|&
name|f
init|=
name|formats
operator|.
name|last
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|d
condition|)
name|f
operator|.
name|d
operator|=
operator|new
name|QTextFormatPrivate
expr_stmt|;
name|f
operator|.
name|d
operator|->
name|resolveFont
argument_list|(
name|defaultFnt
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hashes
operator|.
name|contains
argument_list|(
name|hash
argument_list|,
name|idx
argument_list|)
condition|)
name|hashes
operator|.
name|insert
argument_list|(
name|hash
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|formats
operator|.
name|pop_back
argument_list|()
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
return|return
name|idx
return|;
block|}
end_function
begin_function
DECL|function|hasFormatCached
name|bool
name|QTextFormatCollection
operator|::
name|hasFormatCached
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|format
parameter_list|)
specifier|const
block|{
name|uint
name|hash
init|=
name|getHash
argument_list|(
name|format
operator|.
name|d
argument_list|,
name|format
operator|.
name|format_type
argument_list|)
decl_stmt|;
name|QMultiHash
argument_list|<
name|uint
argument_list|,
name|int
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|hashes
operator|.
name|find
argument_list|(
name|hash
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|hashes
operator|.
name|end
argument_list|()
operator|&&
name|i
operator|.
name|key
argument_list|()
operator|==
name|hash
condition|)
block|{
if|if
condition|(
name|formats
operator|.
name|value
argument_list|(
name|i
operator|.
name|value
argument_list|()
argument_list|)
operator|==
name|format
condition|)
block|{
return|return
literal|true
return|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|objectFormat
name|QTextFormat
name|QTextFormatCollection
operator|::
name|objectFormat
parameter_list|(
name|int
name|objectIndex
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|objectIndex
operator|==
operator|-
literal|1
condition|)
return|return
name|QTextFormat
argument_list|()
return|;
return|return
name|format
argument_list|(
name|objFormats
operator|.
name|at
argument_list|(
name|objectIndex
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setObjectFormat
name|void
name|QTextFormatCollection
operator|::
name|setObjectFormat
parameter_list|(
name|int
name|objectIndex
parameter_list|,
specifier|const
name|QTextFormat
modifier|&
name|f
parameter_list|)
block|{
specifier|const
name|int
name|formatIndex
init|=
name|indexForFormat
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|objFormats
index|[
name|objectIndex
index|]
operator|=
name|formatIndex
expr_stmt|;
block|}
end_function
begin_function
DECL|function|objectFormatIndex
name|int
name|QTextFormatCollection
operator|::
name|objectFormatIndex
parameter_list|(
name|int
name|objectIndex
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|objectIndex
operator|==
operator|-
literal|1
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|objFormats
operator|.
name|at
argument_list|(
name|objectIndex
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setObjectFormatIndex
name|void
name|QTextFormatCollection
operator|::
name|setObjectFormatIndex
parameter_list|(
name|int
name|objectIndex
parameter_list|,
name|int
name|formatIndex
parameter_list|)
block|{
name|objFormats
index|[
name|objectIndex
index|]
operator|=
name|formatIndex
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createObjectIndex
name|int
name|QTextFormatCollection
operator|::
name|createObjectIndex
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|f
parameter_list|)
block|{
specifier|const
name|int
name|objectIndex
init|=
name|objFormats
operator|.
name|size
argument_list|()
decl_stmt|;
name|objFormats
operator|.
name|append
argument_list|(
name|indexForFormat
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|objectIndex
return|;
block|}
end_function
begin_function
DECL|function|format
name|QTextFormat
name|QTextFormatCollection
operator|::
name|format
parameter_list|(
name|int
name|idx
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|idx
operator|<
literal|0
operator|||
name|idx
operator|>=
name|formats
operator|.
name|count
argument_list|()
condition|)
return|return
name|QTextFormat
argument_list|()
return|;
return|return
name|formats
operator|.
name|at
argument_list|(
name|idx
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setDefaultFont
name|void
name|QTextFormatCollection
operator|::
name|setDefaultFont
parameter_list|(
specifier|const
name|QFont
modifier|&
name|f
parameter_list|)
block|{
name|defaultFnt
operator|=
name|f
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|formats
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|formats
index|[
name|i
index|]
operator|.
name|d
condition|)
name|formats
index|[
name|i
index|]
operator|.
name|d
operator|->
name|resolveFont
argument_list|(
name|defaultFnt
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
specifier|const
name|QTextLength
modifier|&
name|l
parameter_list|)
block|{
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QTextLength(QTextLength::Type("
operator|<<
name|l
operator|.
name|type
argument_list|()
operator|<<
literal|"))"
expr_stmt|;
return|return
name|dbg
operator|.
name|space
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
specifier|const
name|QTextFormat
modifier|&
name|f
parameter_list|)
block|{
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QTextFormat(QTextFormat::FormatType("
operator|<<
name|f
operator|.
name|type
argument_list|()
operator|<<
literal|"))"
expr_stmt|;
return|return
name|dbg
operator|.
name|space
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
