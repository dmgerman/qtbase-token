begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Copyright (C) 2013 Konstantin Ritt ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qharfbuzzng_p.h"
end_include
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<qvector.h>
end_include
begin_include
include|#
directive|include
file|<private/qstringiterator_p.h>
end_include
begin_include
include|#
directive|include
file|"qfontengine_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// Unicode routines
DECL|variable|_qtscript_to_hbscript
specifier|static
specifier|const
name|hb_script_t
name|_qtscript_to_hbscript
index|[]
init|=
block|{
name|HB_SCRIPT_UNKNOWN
block|,
name|HB_SCRIPT_INHERITED
block|,
name|HB_SCRIPT_COMMON
block|,
name|HB_SCRIPT_LATIN
block|,
name|HB_SCRIPT_GREEK
block|,
name|HB_SCRIPT_CYRILLIC
block|,
name|HB_SCRIPT_ARMENIAN
block|,
name|HB_SCRIPT_HEBREW
block|,
name|HB_SCRIPT_ARABIC
block|,
name|HB_SCRIPT_SYRIAC
block|,
name|HB_SCRIPT_THAANA
block|,
name|HB_SCRIPT_DEVANAGARI
block|,
name|HB_SCRIPT_BENGALI
block|,
name|HB_SCRIPT_GURMUKHI
block|,
name|HB_SCRIPT_GUJARATI
block|,
name|HB_SCRIPT_ORIYA
block|,
name|HB_SCRIPT_TAMIL
block|,
name|HB_SCRIPT_TELUGU
block|,
name|HB_SCRIPT_KANNADA
block|,
name|HB_SCRIPT_MALAYALAM
block|,
name|HB_SCRIPT_SINHALA
block|,
name|HB_SCRIPT_THAI
block|,
name|HB_SCRIPT_LAO
block|,
name|HB_SCRIPT_TIBETAN
block|,
name|HB_SCRIPT_MYANMAR
block|,
name|HB_SCRIPT_GEORGIAN
block|,
name|HB_SCRIPT_HANGUL
block|,
name|HB_SCRIPT_ETHIOPIC
block|,
name|HB_SCRIPT_CHEROKEE
block|,
name|HB_SCRIPT_CANADIAN_ABORIGINAL
block|,
name|HB_SCRIPT_OGHAM
block|,
name|HB_SCRIPT_RUNIC
block|,
name|HB_SCRIPT_KHMER
block|,
name|HB_SCRIPT_MONGOLIAN
block|,
name|HB_SCRIPT_HIRAGANA
block|,
name|HB_SCRIPT_KATAKANA
block|,
name|HB_SCRIPT_BOPOMOFO
block|,
name|HB_SCRIPT_HAN
block|,
name|HB_SCRIPT_YI
block|,
name|HB_SCRIPT_OLD_ITALIC
block|,
name|HB_SCRIPT_GOTHIC
block|,
name|HB_SCRIPT_DESERET
block|,
name|HB_SCRIPT_TAGALOG
block|,
name|HB_SCRIPT_HANUNOO
block|,
name|HB_SCRIPT_BUHID
block|,
name|HB_SCRIPT_TAGBANWA
block|,
name|HB_SCRIPT_COPTIC
block|,
comment|// Unicode 4.0 additions
name|HB_SCRIPT_LIMBU
block|,
name|HB_SCRIPT_TAI_LE
block|,
name|HB_SCRIPT_LINEAR_B
block|,
name|HB_SCRIPT_UGARITIC
block|,
name|HB_SCRIPT_SHAVIAN
block|,
name|HB_SCRIPT_OSMANYA
block|,
name|HB_SCRIPT_CYPRIOT
block|,
name|HB_SCRIPT_BRAILLE
block|,
comment|// Unicode 4.1 additions
name|HB_SCRIPT_BUGINESE
block|,
name|HB_SCRIPT_NEW_TAI_LUE
block|,
name|HB_SCRIPT_GLAGOLITIC
block|,
name|HB_SCRIPT_TIFINAGH
block|,
name|HB_SCRIPT_SYLOTI_NAGRI
block|,
name|HB_SCRIPT_OLD_PERSIAN
block|,
name|HB_SCRIPT_KHAROSHTHI
block|,
comment|// Unicode 5.0 additions
name|HB_SCRIPT_BALINESE
block|,
name|HB_SCRIPT_CUNEIFORM
block|,
name|HB_SCRIPT_PHOENICIAN
block|,
name|HB_SCRIPT_PHAGS_PA
block|,
name|HB_SCRIPT_NKO
block|,
comment|// Unicode 5.1 additions
name|HB_SCRIPT_SUNDANESE
block|,
name|HB_SCRIPT_LEPCHA
block|,
name|HB_SCRIPT_OL_CHIKI
block|,
name|HB_SCRIPT_VAI
block|,
name|HB_SCRIPT_SAURASHTRA
block|,
name|HB_SCRIPT_KAYAH_LI
block|,
name|HB_SCRIPT_REJANG
block|,
name|HB_SCRIPT_LYCIAN
block|,
name|HB_SCRIPT_CARIAN
block|,
name|HB_SCRIPT_LYDIAN
block|,
name|HB_SCRIPT_CHAM
block|,
comment|// Unicode 5.2 additions
name|HB_SCRIPT_TAI_THAM
block|,
name|HB_SCRIPT_TAI_VIET
block|,
name|HB_SCRIPT_AVESTAN
block|,
name|HB_SCRIPT_EGYPTIAN_HIEROGLYPHS
block|,
name|HB_SCRIPT_SAMARITAN
block|,
name|HB_SCRIPT_LISU
block|,
name|HB_SCRIPT_BAMUM
block|,
name|HB_SCRIPT_JAVANESE
block|,
name|HB_SCRIPT_MEETEI_MAYEK
block|,
name|HB_SCRIPT_IMPERIAL_ARAMAIC
block|,
name|HB_SCRIPT_OLD_SOUTH_ARABIAN
block|,
name|HB_SCRIPT_INSCRIPTIONAL_PARTHIAN
block|,
name|HB_SCRIPT_INSCRIPTIONAL_PAHLAVI
block|,
name|HB_SCRIPT_OLD_TURKIC
block|,
name|HB_SCRIPT_KAITHI
block|,
comment|// Unicode 6.0 additions
name|HB_SCRIPT_BATAK
block|,
name|HB_SCRIPT_BRAHMI
block|,
name|HB_SCRIPT_MANDAIC
block|,
comment|// Unicode 6.1 additions
name|HB_SCRIPT_CHAKMA
block|,
name|HB_SCRIPT_MEROITIC_CURSIVE
block|,
name|HB_SCRIPT_MEROITIC_HIEROGLYPHS
block|,
name|HB_SCRIPT_MIAO
block|,
name|HB_SCRIPT_SHARADA
block|,
name|HB_SCRIPT_SORA_SOMPENG
block|,
name|HB_SCRIPT_TAKRI
block|,
comment|// Unicode 7.0 additions
name|HB_SCRIPT_CAUCASIAN_ALBANIAN
block|,
name|HB_SCRIPT_BASSA_VAH
block|,
name|HB_SCRIPT_DUPLOYAN
block|,
name|HB_SCRIPT_ELBASAN
block|,
name|HB_SCRIPT_GRANTHA
block|,
name|HB_SCRIPT_PAHAWH_HMONG
block|,
name|HB_SCRIPT_KHOJKI
block|,
name|HB_SCRIPT_LINEAR_A
block|,
name|HB_SCRIPT_MAHAJANI
block|,
name|HB_SCRIPT_MANICHAEAN
block|,
name|HB_SCRIPT_MENDE_KIKAKUI
block|,
name|HB_SCRIPT_MODI
block|,
name|HB_SCRIPT_MRO
block|,
name|HB_SCRIPT_OLD_NORTH_ARABIAN
block|,
name|HB_SCRIPT_NABATAEAN
block|,
name|HB_SCRIPT_PALMYRENE
block|,
name|HB_SCRIPT_PAU_CIN_HAU
block|,
name|HB_SCRIPT_OLD_PERMIC
block|,
name|HB_SCRIPT_PSALTER_PAHLAVI
block|,
name|HB_SCRIPT_SIDDHAM
block|,
name|HB_SCRIPT_KHUDAWADI
block|,
name|HB_SCRIPT_TIRHUTA
block|,
name|HB_SCRIPT_WARANG_CITI
block|,
comment|// Unicode 8.0 additions
name|HB_SCRIPT_AHOM
block|,
name|HB_SCRIPT_ANATOLIAN_HIEROGLYPHS
block|,
name|HB_SCRIPT_HATRAN
block|,
name|HB_SCRIPT_MULTANI
block|,
name|HB_SCRIPT_OLD_HUNGARIAN
block|,
name|HB_SCRIPT_SIGNWRITING
block|}
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
name|QChar
operator|::
name|ScriptCount
operator|==
sizeof|sizeof
argument_list|(
name|_qtscript_to_hbscript
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|_qtscript_to_hbscript
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|hb_qt_script_to_script
name|hb_script_t
name|hb_qt_script_to_script
parameter_list|(
name|QChar
operator|::
name|Script
name|script
parameter_list|)
block|{
return|return
name|_qtscript_to_hbscript
index|[
name|script
index|]
return|;
block|}
end_function
begin_function
DECL|function|hb_qt_script_from_script
name|QChar
operator|::
name|Script
name|hb_qt_script_from_script
parameter_list|(
name|hb_script_t
name|script
parameter_list|)
block|{
name|uint
name|i
init|=
name|QChar
operator|::
name|ScriptCount
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|i
operator|>
name|QChar
operator|::
name|Script_Unknown
operator|&&
name|_qtscript_to_hbscript
index|[
name|i
index|]
operator|!=
name|script
condition|)
operator|--
name|i
expr_stmt|;
return|return
name|QChar
operator|::
name|Script
argument_list|(
name|i
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
name|hb_unicode_combining_class_t
DECL|function|_hb_qt_unicode_combining_class
name|_hb_qt_unicode_combining_class
parameter_list|(
name|hb_unicode_funcs_t
modifier|*
comment|/*ufuncs*/
parameter_list|,
name|hb_codepoint_t
name|unicode
parameter_list|,
name|void
modifier|*
comment|/*user_data*/
parameter_list|)
block|{
return|return
name|hb_unicode_combining_class_t
argument_list|(
name|QChar
operator|::
name|combiningClass
argument_list|(
name|unicode
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
name|unsigned
name|int
DECL|function|_hb_qt_unicode_eastasian_width
name|_hb_qt_unicode_eastasian_width
parameter_list|(
name|hb_unicode_funcs_t
modifier|*
comment|/*ufuncs*/
parameter_list|,
name|hb_codepoint_t
comment|/*unicode*/
parameter_list|,
name|void
modifier|*
comment|/*user_data*/
parameter_list|)
block|{
name|qCritical
argument_list|(
literal|"hb_qt_unicode_eastasian_width: not implemented!"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|_qtcategory_to_hbcategory
specifier|static
specifier|const
name|hb_unicode_general_category_t
name|_qtcategory_to_hbcategory
index|[]
init|=
block|{
name|HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK
block|,
comment|//   Mn
name|HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK
block|,
comment|//   Mc
name|HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK
block|,
comment|//   Me
name|HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER
block|,
comment|//   Nd
name|HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER
block|,
comment|//   Nl
name|HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER
block|,
comment|//   No
name|HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR
block|,
comment|//   Zs
name|HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR
block|,
comment|//   Zl
name|HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR
block|,
comment|//   Zp
name|HB_UNICODE_GENERAL_CATEGORY_CONTROL
block|,
comment|//   Cc
name|HB_UNICODE_GENERAL_CATEGORY_FORMAT
block|,
comment|//   Cf
name|HB_UNICODE_GENERAL_CATEGORY_SURROGATE
block|,
comment|//   Cs
name|HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE
block|,
comment|//   Co
name|HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED
block|,
comment|//   Cn
name|HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER
block|,
comment|//   Lu
name|HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER
block|,
comment|//   Ll
name|HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER
block|,
comment|//   Lt
name|HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER
block|,
comment|//   Lm
name|HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER
block|,
comment|//   Lo
name|HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION
block|,
comment|//   Pc
name|HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION
block|,
comment|//   Pd
name|HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION
block|,
comment|//   Ps
name|HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION
block|,
comment|//   Pe
name|HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION
block|,
comment|//   Pi
name|HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION
block|,
comment|//   Pf
name|HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION
block|,
comment|//   Po
name|HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL
block|,
comment|//   Sm
name|HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL
block|,
comment|//   Sc
name|HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL
block|,
comment|//   Sk
name|HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL
comment|//   So
block|}
decl_stmt|;
end_decl_stmt
begin_function
specifier|static
name|hb_unicode_general_category_t
DECL|function|_hb_qt_unicode_general_category
name|_hb_qt_unicode_general_category
parameter_list|(
name|hb_unicode_funcs_t
modifier|*
comment|/*ufuncs*/
parameter_list|,
name|hb_codepoint_t
name|unicode
parameter_list|,
name|void
modifier|*
comment|/*user_data*/
parameter_list|)
block|{
return|return
name|_qtcategory_to_hbcategory
index|[
name|QChar
operator|::
name|category
argument_list|(
name|unicode
argument_list|)
index|]
return|;
block|}
end_function
begin_function
specifier|static
name|hb_codepoint_t
DECL|function|_hb_qt_unicode_mirroring
name|_hb_qt_unicode_mirroring
parameter_list|(
name|hb_unicode_funcs_t
modifier|*
comment|/*ufuncs*/
parameter_list|,
name|hb_codepoint_t
name|unicode
parameter_list|,
name|void
modifier|*
comment|/*user_data*/
parameter_list|)
block|{
return|return
name|QChar
operator|::
name|mirroredChar
argument_list|(
name|unicode
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
name|hb_script_t
DECL|function|_hb_qt_unicode_script
name|_hb_qt_unicode_script
parameter_list|(
name|hb_unicode_funcs_t
modifier|*
comment|/*ufuncs*/
parameter_list|,
name|hb_codepoint_t
name|unicode
parameter_list|,
name|void
modifier|*
comment|/*user_data*/
parameter_list|)
block|{
return|return
name|_qtscript_to_hbscript
index|[
name|QChar
operator|::
name|script
argument_list|(
name|unicode
argument_list|)
index|]
return|;
block|}
end_function
begin_function
specifier|static
name|hb_bool_t
DECL|function|_hb_qt_unicode_compose
name|_hb_qt_unicode_compose
parameter_list|(
name|hb_unicode_funcs_t
modifier|*
comment|/*ufuncs*/
parameter_list|,
name|hb_codepoint_t
name|a
parameter_list|,
name|hb_codepoint_t
name|b
parameter_list|,
name|hb_codepoint_t
modifier|*
name|ab
parameter_list|,
name|void
modifier|*
comment|/*user_data*/
parameter_list|)
block|{
comment|// ### optimize
name|QString
name|s
init|=
name|QString
operator|::
name|fromUcs4
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|)
operator|+
name|QString
operator|::
name|fromUcs4
argument_list|(
operator|&
name|b
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QString
name|normalized
init|=
name|s
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
decl_stmt|;
name|QStringIterator
name|it
argument_list|(
name|normalized
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// size>0
operator|*
name|ab
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
operator|!
name|it
operator|.
name|hasNext
argument_list|()
return|;
comment|// size==1
block|}
end_function
begin_function
specifier|static
name|hb_bool_t
DECL|function|_hb_qt_unicode_decompose
name|_hb_qt_unicode_decompose
parameter_list|(
name|hb_unicode_funcs_t
modifier|*
comment|/*ufuncs*/
parameter_list|,
name|hb_codepoint_t
name|ab
parameter_list|,
name|hb_codepoint_t
modifier|*
name|a
parameter_list|,
name|hb_codepoint_t
modifier|*
name|b
parameter_list|,
name|void
modifier|*
comment|/*user_data*/
parameter_list|)
block|{
comment|// ### optimize
if|if
condition|(
name|QChar
operator|::
name|decompositionTag
argument_list|(
name|ab
argument_list|)
operator|!=
name|QChar
operator|::
name|Canonical
condition|)
comment|// !NFD
return|return
literal|false
return|;
name|QString
name|normalized
init|=
name|QChar
operator|::
name|decomposition
argument_list|(
name|ab
argument_list|)
decl_stmt|;
if|if
condition|(
name|normalized
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|QStringIterator
name|it
argument_list|(
name|normalized
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// size>0
operator|*
name|a
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// size==1
operator|*
name|b
operator|=
literal|0
expr_stmt|;
return|return
operator|*
name|a
operator|!=
name|ab
return|;
block|}
comment|// size>1
operator|*
name|b
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// size==2
comment|// Here's the ugly part: if ab decomposes to a single character and
comment|// that character decomposes again, we have to detect that and undo
comment|// the second part :-(
specifier|const
name|QString
name|recomposed
init|=
name|normalized
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
decl_stmt|;
name|QStringIterator
name|jt
argument_list|(
name|recomposed
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|jt
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// size>0
specifier|const
name|hb_codepoint_t
name|c
init|=
name|jt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
operator|*
name|a
operator|&&
name|c
operator|!=
name|ab
condition|)
block|{
operator|*
name|a
operator|=
name|c
expr_stmt|;
operator|*
name|b
operator|=
literal|0
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|// size>2
comment|// If decomposed to more than two characters, take the last one,
comment|// and recompose the rest to get the first component
do|do
block|{
operator|*
name|b
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
do|;
name|normalized
operator|.
name|chop
argument_list|(
name|QChar
operator|::
name|requiresSurrogates
argument_list|(
operator|*
name|b
argument_list|)
condition|?
literal|2
else|:
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|recomposed
init|=
name|normalized
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
decl_stmt|;
name|QStringIterator
name|jt
argument_list|(
name|recomposed
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|jt
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// size>0
comment|// We expect that recomposed has exactly one character now
operator|*
name|a
operator|=
name|jt
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
specifier|static
name|unsigned
name|int
DECL|function|_hb_qt_unicode_decompose_compatibility
name|_hb_qt_unicode_decompose_compatibility
parameter_list|(
name|hb_unicode_funcs_t
modifier|*
comment|/*ufuncs*/
parameter_list|,
name|hb_codepoint_t
name|u
parameter_list|,
name|hb_codepoint_t
modifier|*
name|decomposed
parameter_list|,
name|void
modifier|*
comment|/*user_data*/
parameter_list|)
block|{
specifier|const
name|QString
name|normalized
init|=
name|QChar
operator|::
name|decomposition
argument_list|(
name|u
argument_list|)
decl_stmt|;
name|uint
name|outlen
init|=
literal|0
decl_stmt|;
name|QStringIterator
name|it
argument_list|(
name|normalized
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|outlen
operator|<
name|HB_UNICODE_MAX_DECOMPOSITION_LEN
argument_list|)
expr_stmt|;
name|decomposed
index|[
name|outlen
operator|++
index|]
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|outlen
return|;
block|}
end_function
begin_struct
DECL|struct|_hb_unicode_funcs_t
struct|struct
name|_hb_unicode_funcs_t
block|{
DECL|function|_hb_unicode_funcs_t
name|_hb_unicode_funcs_t
parameter_list|()
block|{
name|funcs
operator|=
name|hb_unicode_funcs_create
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|hb_unicode_funcs_set_combining_class_func
argument_list|(
name|funcs
argument_list|,
name|_hb_qt_unicode_combining_class
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|hb_unicode_funcs_set_eastasian_width_func
argument_list|(
name|funcs
argument_list|,
name|_hb_qt_unicode_eastasian_width
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|hb_unicode_funcs_set_general_category_func
argument_list|(
name|funcs
argument_list|,
name|_hb_qt_unicode_general_category
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|hb_unicode_funcs_set_mirroring_func
argument_list|(
name|funcs
argument_list|,
name|_hb_qt_unicode_mirroring
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|hb_unicode_funcs_set_script_func
argument_list|(
name|funcs
argument_list|,
name|_hb_qt_unicode_script
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|hb_unicode_funcs_set_compose_func
argument_list|(
name|funcs
argument_list|,
name|_hb_qt_unicode_compose
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|hb_unicode_funcs_set_decompose_func
argument_list|(
name|funcs
argument_list|,
name|_hb_qt_unicode_decompose
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|hb_unicode_funcs_set_decompose_compatibility_func
argument_list|(
name|funcs
argument_list|,
name|_hb_qt_unicode_decompose_compatibility
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
DECL|function|~_hb_unicode_funcs_t
name|~
name|_hb_unicode_funcs_t
parameter_list|()
block|{
name|hb_unicode_funcs_destroy
argument_list|(
name|funcs
argument_list|)
expr_stmt|;
block|}
DECL|member|funcs
name|hb_unicode_funcs_t
modifier|*
name|funcs
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|_hb_unicode_funcs_t
argument_list|,
argument|qt_ufuncs
argument_list|)
end_macro
begin_function
DECL|function|hb_qt_get_unicode_funcs
name|hb_unicode_funcs_t
modifier|*
name|hb_qt_get_unicode_funcs
parameter_list|()
block|{
return|return
name|qt_ufuncs
argument_list|()
operator|->
name|funcs
return|;
block|}
end_function
begin_comment
comment|// Font routines
end_comment
begin_function
specifier|static
name|hb_bool_t
DECL|function|_hb_qt_font_get_glyph
name|_hb_qt_font_get_glyph
parameter_list|(
name|hb_font_t
modifier|*
comment|/*font*/
parameter_list|,
name|void
modifier|*
name|font_data
parameter_list|,
name|hb_codepoint_t
name|unicode
parameter_list|,
name|hb_codepoint_t
comment|/*variation_selector*/
parameter_list|,
name|hb_codepoint_t
modifier|*
name|glyph
parameter_list|,
name|void
modifier|*
comment|/*user_data*/
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
cast|static_cast
argument_list|<
name|QFontEngine
operator|*
argument_list|>
argument_list|(
name|font_data
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|fe
argument_list|)
expr_stmt|;
operator|*
name|glyph
operator|=
name|fe
operator|->
name|glyphIndex
argument_list|(
name|unicode
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
specifier|static
name|hb_position_t
DECL|function|_hb_qt_font_get_glyph_h_advance
name|_hb_qt_font_get_glyph_h_advance
parameter_list|(
name|hb_font_t
modifier|*
name|font
parameter_list|,
name|void
modifier|*
name|font_data
parameter_list|,
name|hb_codepoint_t
name|glyph
parameter_list|,
name|void
modifier|*
comment|/*user_data*/
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
cast|static_cast
argument_list|<
name|QFontEngine
operator|*
argument_list|>
argument_list|(
name|font_data
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|fe
argument_list|)
expr_stmt|;
name|QFixed
name|advance
decl_stmt|;
name|QGlyphLayout
name|g
decl_stmt|;
name|g
operator|.
name|numGlyphs
operator|=
literal|1
expr_stmt|;
name|g
operator|.
name|glyphs
operator|=
operator|&
name|glyph
expr_stmt|;
name|g
operator|.
name|advances
operator|=
operator|&
name|advance
expr_stmt|;
name|fe
operator|->
name|recalcAdvances
argument_list|(
operator|&
name|g
argument_list|,
name|QFontEngine
operator|::
name|ShaperFlags
argument_list|(
name|hb_qt_font_get_use_design_metrics
argument_list|(
name|font
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|advance
operator|.
name|value
argument_list|()
return|;
block|}
end_function
begin_function
specifier|static
name|hb_position_t
DECL|function|_hb_qt_font_get_glyph_v_advance
name|_hb_qt_font_get_glyph_v_advance
parameter_list|(
name|hb_font_t
modifier|*
comment|/*font*/
parameter_list|,
name|void
modifier|*
comment|/*font_data*/
parameter_list|,
name|hb_codepoint_t
comment|/*glyph*/
parameter_list|,
name|void
modifier|*
comment|/*user_data*/
parameter_list|)
block|{
name|qCritical
argument_list|(
literal|"hb_qt_font_get_glyph_v_advance: vertical writing isn't supported!"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
specifier|static
name|hb_bool_t
DECL|function|_hb_qt_font_get_glyph_h_origin
name|_hb_qt_font_get_glyph_h_origin
parameter_list|(
name|hb_font_t
modifier|*
comment|/*font*/
parameter_list|,
name|void
modifier|*
comment|/*font_data*/
parameter_list|,
name|hb_codepoint_t
comment|/*glyph*/
parameter_list|,
name|hb_position_t
modifier|*
comment|/*x*/
parameter_list|,
name|hb_position_t
modifier|*
comment|/*y*/
parameter_list|,
name|void
modifier|*
comment|/*user_data*/
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// we always work in the horizontal coordinates
block|}
end_function
begin_function
specifier|static
name|hb_bool_t
DECL|function|_hb_qt_font_get_glyph_v_origin
name|_hb_qt_font_get_glyph_v_origin
parameter_list|(
name|hb_font_t
modifier|*
comment|/*font*/
parameter_list|,
name|void
modifier|*
comment|/*font_data*/
parameter_list|,
name|hb_codepoint_t
comment|/*glyph*/
parameter_list|,
name|hb_position_t
modifier|*
comment|/*x*/
parameter_list|,
name|hb_position_t
modifier|*
comment|/*y*/
parameter_list|,
name|void
modifier|*
comment|/*user_data*/
parameter_list|)
block|{
name|qCritical
argument_list|(
literal|"hb_qt_get_glyph_v_origin: vertical writing isn't supported!"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
specifier|static
name|hb_position_t
DECL|function|_hb_qt_font_get_glyph_h_kerning
name|_hb_qt_font_get_glyph_h_kerning
parameter_list|(
name|hb_font_t
modifier|*
name|font
parameter_list|,
name|void
modifier|*
name|font_data
parameter_list|,
name|hb_codepoint_t
name|first_glyph
parameter_list|,
name|hb_codepoint_t
name|second_glyph
parameter_list|,
name|void
modifier|*
comment|/*user_data*/
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
cast|static_cast
argument_list|<
name|QFontEngine
operator|*
argument_list|>
argument_list|(
name|font_data
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|fe
argument_list|)
expr_stmt|;
name|glyph_t
name|glyphs
index|[
literal|2
index|]
init|=
block|{
name|first_glyph
block|,
name|second_glyph
block|}
decl_stmt|;
name|QFixed
name|advance
decl_stmt|;
name|QGlyphLayout
name|g
decl_stmt|;
name|g
operator|.
name|numGlyphs
operator|=
literal|2
expr_stmt|;
name|g
operator|.
name|glyphs
operator|=
name|glyphs
expr_stmt|;
name|g
operator|.
name|advances
operator|=
operator|&
name|advance
expr_stmt|;
name|fe
operator|->
name|doKerning
argument_list|(
operator|&
name|g
argument_list|,
name|QFontEngine
operator|::
name|ShaperFlags
argument_list|(
name|hb_qt_font_get_use_design_metrics
argument_list|(
name|font
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|advance
operator|.
name|value
argument_list|()
return|;
block|}
end_function
begin_function
specifier|static
name|hb_position_t
DECL|function|_hb_qt_font_get_glyph_v_kerning
name|_hb_qt_font_get_glyph_v_kerning
parameter_list|(
name|hb_font_t
modifier|*
comment|/*font*/
parameter_list|,
name|void
modifier|*
comment|/*font_data*/
parameter_list|,
name|hb_codepoint_t
comment|/*first_glyph*/
parameter_list|,
name|hb_codepoint_t
comment|/*second_glyph*/
parameter_list|,
name|void
modifier|*
comment|/*user_data*/
parameter_list|)
block|{
name|qCritical
argument_list|(
literal|"hb_qt_get_glyph_v_kerning: vertical writing isn't supported!"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
specifier|static
name|hb_bool_t
DECL|function|_hb_qt_font_get_glyph_extents
name|_hb_qt_font_get_glyph_extents
parameter_list|(
name|hb_font_t
modifier|*
comment|/*font*/
parameter_list|,
name|void
modifier|*
name|font_data
parameter_list|,
name|hb_codepoint_t
name|glyph
parameter_list|,
name|hb_glyph_extents_t
modifier|*
name|extents
parameter_list|,
name|void
modifier|*
comment|/*user_data*/
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
cast|static_cast
argument_list|<
name|QFontEngine
operator|*
argument_list|>
argument_list|(
name|font_data
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|fe
argument_list|)
expr_stmt|;
name|glyph_metrics_t
name|gm
init|=
name|fe
operator|->
name|boundingBox
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
name|extents
operator|->
name|x_bearing
operator|=
name|gm
operator|.
name|x
operator|.
name|value
argument_list|()
expr_stmt|;
name|extents
operator|->
name|y_bearing
operator|=
name|gm
operator|.
name|y
operator|.
name|value
argument_list|()
expr_stmt|;
name|extents
operator|->
name|width
operator|=
name|gm
operator|.
name|width
operator|.
name|value
argument_list|()
expr_stmt|;
name|extents
operator|->
name|height
operator|=
name|gm
operator|.
name|height
operator|.
name|value
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
specifier|static
name|hb_bool_t
DECL|function|_hb_qt_font_get_glyph_contour_point
name|_hb_qt_font_get_glyph_contour_point
parameter_list|(
name|hb_font_t
modifier|*
comment|/*font*/
parameter_list|,
name|void
modifier|*
name|font_data
parameter_list|,
name|hb_codepoint_t
name|glyph
parameter_list|,
name|unsigned
name|int
name|point_index
parameter_list|,
name|hb_position_t
modifier|*
name|x
parameter_list|,
name|hb_position_t
modifier|*
name|y
parameter_list|,
name|void
modifier|*
comment|/*user_data*/
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
cast|static_cast
argument_list|<
name|QFontEngine
operator|*
argument_list|>
argument_list|(
name|font_data
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|fe
argument_list|)
expr_stmt|;
name|QFixed
name|xpos
decl_stmt|,
name|ypos
decl_stmt|;
name|quint32
name|numPoints
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|Q_LIKELY
argument_list|(
name|fe
operator|->
name|getPointInOutline
argument_list|(
name|glyph
argument_list|,
literal|0
argument_list|,
name|point_index
argument_list|,
operator|&
name|xpos
argument_list|,
operator|&
name|ypos
argument_list|,
operator|&
name|numPoints
argument_list|)
operator|==
literal|0
argument_list|)
condition|)
block|{
operator|*
name|x
operator|=
name|xpos
operator|.
name|value
argument_list|()
expr_stmt|;
operator|*
name|y
operator|=
name|ypos
operator|.
name|value
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
operator|*
name|x
operator|=
operator|*
name|y
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
specifier|static
name|hb_bool_t
DECL|function|_hb_qt_font_get_glyph_name
name|_hb_qt_font_get_glyph_name
parameter_list|(
name|hb_font_t
modifier|*
comment|/*font*/
parameter_list|,
name|void
modifier|*
comment|/*font_data*/
parameter_list|,
name|hb_codepoint_t
comment|/*glyph*/
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|unsigned
name|int
name|size
parameter_list|,
name|void
modifier|*
comment|/*user_data*/
parameter_list|)
block|{
name|qCritical
argument_list|(
literal|"hb_qt_font_get_glyph_name: not implemented!"
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
condition|)
operator|*
name|name
operator|=
literal|'\0'
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
specifier|static
name|hb_bool_t
DECL|function|_hb_qt_font_get_glyph_from_name
name|_hb_qt_font_get_glyph_from_name
parameter_list|(
name|hb_font_t
modifier|*
comment|/*font*/
parameter_list|,
name|void
modifier|*
comment|/*font_data*/
parameter_list|,
specifier|const
name|char
modifier|*
comment|/*name*/
parameter_list|,
name|int
comment|/*len*/
parameter_list|,
name|hb_codepoint_t
modifier|*
name|glyph
parameter_list|,
name|void
modifier|*
comment|/*user_data*/
parameter_list|)
block|{
name|qCritical
argument_list|(
literal|"hb_qt_font_get_glyph_from_name: not implemented!"
argument_list|)
expr_stmt|;
operator|*
name|glyph
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|_useDesignMetricsKey
specifier|static
name|hb_user_data_key_t
name|_useDesignMetricsKey
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|hb_qt_font_set_use_design_metrics
name|void
name|hb_qt_font_set_use_design_metrics
parameter_list|(
name|hb_font_t
modifier|*
name|font
parameter_list|,
name|uint
name|value
parameter_list|)
block|{
name|hb_font_set_user_data
argument_list|(
name|font
argument_list|,
operator|&
name|_useDesignMetricsKey
argument_list|,
operator|(
name|void
operator|*
operator|)
name|quintptr
argument_list|(
name|value
argument_list|)
argument_list|,
name|NULL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hb_qt_font_get_use_design_metrics
name|uint
name|hb_qt_font_get_use_design_metrics
parameter_list|(
name|hb_font_t
modifier|*
name|font
parameter_list|)
block|{
return|return
name|quintptr
argument_list|(
name|hb_font_get_user_data
argument_list|(
name|font
argument_list|,
operator|&
name|_useDesignMetricsKey
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_struct
DECL|struct|_hb_qt_font_funcs_t
struct|struct
name|_hb_qt_font_funcs_t
block|{
DECL|function|_hb_qt_font_funcs_t
name|_hb_qt_font_funcs_t
parameter_list|()
block|{
name|funcs
operator|=
name|hb_font_funcs_create
argument_list|()
expr_stmt|;
name|hb_font_funcs_set_glyph_func
argument_list|(
name|funcs
argument_list|,
name|_hb_qt_font_get_glyph
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|hb_font_funcs_set_glyph_h_advance_func
argument_list|(
name|funcs
argument_list|,
name|_hb_qt_font_get_glyph_h_advance
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|hb_font_funcs_set_glyph_v_advance_func
argument_list|(
name|funcs
argument_list|,
name|_hb_qt_font_get_glyph_v_advance
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|hb_font_funcs_set_glyph_h_origin_func
argument_list|(
name|funcs
argument_list|,
name|_hb_qt_font_get_glyph_h_origin
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|hb_font_funcs_set_glyph_v_origin_func
argument_list|(
name|funcs
argument_list|,
name|_hb_qt_font_get_glyph_v_origin
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|hb_font_funcs_set_glyph_h_kerning_func
argument_list|(
name|funcs
argument_list|,
name|_hb_qt_font_get_glyph_h_kerning
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|hb_font_funcs_set_glyph_v_kerning_func
argument_list|(
name|funcs
argument_list|,
name|_hb_qt_font_get_glyph_v_kerning
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|hb_font_funcs_set_glyph_extents_func
argument_list|(
name|funcs
argument_list|,
name|_hb_qt_font_get_glyph_extents
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|hb_font_funcs_set_glyph_contour_point_func
argument_list|(
name|funcs
argument_list|,
name|_hb_qt_font_get_glyph_contour_point
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|hb_font_funcs_set_glyph_name_func
argument_list|(
name|funcs
argument_list|,
name|_hb_qt_font_get_glyph_name
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|hb_font_funcs_set_glyph_from_name_func
argument_list|(
name|funcs
argument_list|,
name|_hb_qt_font_get_glyph_from_name
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
DECL|function|~_hb_qt_font_funcs_t
name|~
name|_hb_qt_font_funcs_t
parameter_list|()
block|{
name|hb_font_funcs_destroy
argument_list|(
name|funcs
argument_list|)
expr_stmt|;
block|}
DECL|member|funcs
name|hb_font_funcs_t
modifier|*
name|funcs
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|_hb_qt_font_funcs_t
argument_list|,
argument|qt_ffuncs
argument_list|)
end_macro
begin_function
DECL|function|hb_qt_get_font_funcs
name|hb_font_funcs_t
modifier|*
name|hb_qt_get_font_funcs
parameter_list|()
block|{
return|return
name|qt_ffuncs
argument_list|()
operator|->
name|funcs
return|;
block|}
end_function
begin_function
specifier|static
name|hb_blob_t
modifier|*
DECL|function|_hb_qt_reference_table
name|_hb_qt_reference_table
parameter_list|(
name|hb_face_t
modifier|*
comment|/*face*/
parameter_list|,
name|hb_tag_t
name|tag
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|)
block|{
name|QFontEngine
operator|::
name|FaceData
modifier|*
name|data
init|=
cast|static_cast
argument_list|<
name|QFontEngine
operator|::
name|FaceData
operator|*
argument_list|>
argument_list|(
name|user_data
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|qt_get_font_table_func_t
name|get_font_table
init|=
name|data
operator|->
name|get_font_table
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|get_font_table
argument_list|)
expr_stmt|;
name|uint
name|length
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
operator|!
name|get_font_table
argument_list|(
name|data
operator|->
name|user_data
argument_list|,
name|tag
argument_list|,
literal|0
argument_list|,
operator|&
name|length
argument_list|)
argument_list|)
condition|)
return|return
name|hb_blob_get_empty
argument_list|()
return|;
name|char
modifier|*
name|buffer
init|=
cast|static_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|malloc
argument_list|(
name|length
argument_list|)
argument_list|)
decl_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
operator|!
name|get_font_table
argument_list|(
name|data
operator|->
name|user_data
argument_list|,
name|tag
argument_list|,
cast|reinterpret_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|buffer
argument_list|)
argument_list|,
operator|&
name|length
argument_list|)
argument_list|)
condition|)
name|length
operator|=
literal|0
expr_stmt|;
return|return
name|hb_blob_create
argument_list|(
cast|const_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|buffer
argument_list|)
argument_list|,
name|length
argument_list|,
name|HB_MEMORY_MODE_READONLY
argument_list|,
name|buffer
argument_list|,
name|free
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|hb_face_t
modifier|*
DECL|function|_hb_qt_face_create
name|_hb_qt_face_create
parameter_list|(
name|QFontEngine
modifier|*
name|fe
parameter_list|)
block|{
name|QFontEngine
operator|::
name|FaceData
modifier|*
name|data
init|=
cast|static_cast
argument_list|<
name|QFontEngine
operator|::
name|FaceData
operator|*
argument_list|>
argument_list|(
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
name|QFontEngine
operator|::
name|FaceData
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|data
operator|->
name|user_data
operator|=
name|fe
operator|->
name|faceData
operator|.
name|user_data
expr_stmt|;
name|data
operator|->
name|get_font_table
operator|=
name|fe
operator|->
name|faceData
operator|.
name|get_font_table
expr_stmt|;
name|hb_face_t
modifier|*
name|face
init|=
name|hb_face_create_for_tables
argument_list|(
name|_hb_qt_reference_table
argument_list|,
operator|(
name|void
operator|*
operator|)
name|data
argument_list|,
name|free
argument_list|)
decl_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|hb_face_is_immutable
argument_list|(
name|face
argument_list|)
argument_list|)
condition|)
block|{
name|hb_face_destroy
argument_list|(
name|face
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|hb_face_set_index
argument_list|(
name|face
argument_list|,
name|fe
operator|->
name|faceId
argument_list|()
operator|.
name|index
argument_list|)
expr_stmt|;
name|hb_face_set_upem
argument_list|(
name|face
argument_list|,
name|fe
operator|->
name|emSquareSize
argument_list|()
operator|.
name|truncate
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|face
return|;
block|}
end_function
begin_function
specifier|static
name|void
DECL|function|_hb_qt_face_release
name|_hb_qt_face_release
parameter_list|(
name|void
modifier|*
name|user_data
parameter_list|)
block|{
if|if
condition|(
name|Q_LIKELY
argument_list|(
name|user_data
argument_list|)
condition|)
name|hb_face_destroy
argument_list|(
cast|static_cast
argument_list|<
name|hb_face_t
operator|*
argument_list|>
argument_list|(
name|user_data
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hb_qt_face_get_for_engine
name|hb_face_t
modifier|*
name|hb_qt_face_get_for_engine
parameter_list|(
name|QFontEngine
modifier|*
name|fe
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|fe
operator|&&
name|fe
operator|->
name|type
argument_list|()
operator|!=
name|QFontEngine
operator|::
name|Multi
argument_list|)
expr_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
operator|!
name|fe
operator|->
name|face_
argument_list|)
condition|)
name|fe
operator|->
name|face_
operator|=
name|QFontEngine
operator|::
name|Holder
argument_list|(
name|_hb_qt_face_create
argument_list|(
name|fe
argument_list|)
argument_list|,
name|_hb_qt_face_release
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|hb_face_t
operator|*
argument_list|>
argument_list|(
name|fe
operator|->
name|face_
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|hb_font_t
modifier|*
DECL|function|_hb_qt_font_create
name|_hb_qt_font_create
parameter_list|(
name|QFontEngine
modifier|*
name|fe
parameter_list|)
block|{
name|hb_face_t
modifier|*
name|face
init|=
name|hb_qt_face_get_for_engine
argument_list|(
name|fe
argument_list|)
decl_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
operator|!
name|face
argument_list|)
condition|)
return|return
name|NULL
return|;
name|hb_font_t
modifier|*
name|font
init|=
name|hb_font_create
argument_list|(
name|face
argument_list|)
decl_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|hb_font_is_immutable
argument_list|(
name|font
argument_list|)
argument_list|)
condition|)
block|{
name|hb_font_destroy
argument_list|(
name|font
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
specifier|const
name|int
name|y_ppem
init|=
name|fe
operator|->
name|fontDef
operator|.
name|pixelSize
decl_stmt|;
specifier|const
name|int
name|x_ppem
init|=
operator|(
name|fe
operator|->
name|fontDef
operator|.
name|pixelSize
operator|*
name|fe
operator|->
name|fontDef
operator|.
name|stretch
operator|)
operator|/
literal|100
decl_stmt|;
name|hb_font_set_funcs
argument_list|(
name|font
argument_list|,
name|hb_qt_get_font_funcs
argument_list|()
argument_list|,
operator|(
name|void
operator|*
operator|)
name|fe
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|hb_font_set_scale
argument_list|(
name|font
argument_list|,
name|QFixed
argument_list|(
name|x_ppem
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|QFixed
argument_list|(
name|y_ppem
argument_list|)
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|hb_font_set_scale
argument_list|(
name|font
argument_list|,
name|QFixed
argument_list|(
name|x_ppem
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
operator|-
name|QFixed
argument_list|(
name|y_ppem
argument_list|)
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|hb_font_set_ppem
argument_list|(
name|font
argument_list|,
name|x_ppem
argument_list|,
name|y_ppem
argument_list|)
expr_stmt|;
return|return
name|font
return|;
block|}
end_function
begin_function
specifier|static
name|void
DECL|function|_hb_qt_font_release
name|_hb_qt_font_release
parameter_list|(
name|void
modifier|*
name|user_data
parameter_list|)
block|{
if|if
condition|(
name|Q_LIKELY
argument_list|(
name|user_data
argument_list|)
condition|)
name|hb_font_destroy
argument_list|(
cast|static_cast
argument_list|<
name|hb_font_t
operator|*
argument_list|>
argument_list|(
name|user_data
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hb_qt_font_get_for_engine
name|hb_font_t
modifier|*
name|hb_qt_font_get_for_engine
parameter_list|(
name|QFontEngine
modifier|*
name|fe
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|fe
operator|&&
name|fe
operator|->
name|type
argument_list|()
operator|!=
name|QFontEngine
operator|::
name|Multi
argument_list|)
expr_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
operator|!
name|fe
operator|->
name|font_
argument_list|)
condition|)
name|fe
operator|->
name|font_
operator|=
name|QFontEngine
operator|::
name|Holder
argument_list|(
name|_hb_qt_font_create
argument_list|(
name|fe
argument_list|)
argument_list|,
name|_hb_qt_font_release
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|hb_font_t
operator|*
argument_list|>
argument_list|(
name|fe
operator|->
name|font_
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
