begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QCSSPARSER_P_H
end_ifndef
begin_define
DECL|macro|QCSSPARSER_P_H
define|#
directive|define
name|QCSSPARSER_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the QLibrary class.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtCore/QStringList>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVector>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVariant>
end_include
begin_include
include|#
directive|include
file|<QtCore/QPair>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSize>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMultiHash>
end_include
begin_include
include|#
directive|include
file|<QtGui/QFont>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPalette>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSharedData>
end_include
begin_decl_stmt
DECL|variable|QIcon
name|class
name|QIcon
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CSSPARSER
end_ifndef
begin_comment
comment|// VxWorks defines NONE as (-1) "for times when NULL won't do"
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
operator|&&
name|defined
argument_list|(
name|NONE
argument_list|)
end_if
begin_undef
DECL|macro|NONE
undef|#
directive|undef
name|NONE
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_INTEGRITY
argument_list|)
end_if
begin_undef
DECL|macro|Value
undef|#
directive|undef
name|Value
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|namespace
name|QCss
block|{
enum|enum
name|Property
block|{
name|UnknownProperty
block|,
name|BackgroundColor
block|,
name|Color
block|,
name|Float
block|,
name|Font
block|,
name|FontFamily
block|,
name|FontSize
block|,
name|FontStyle
block|,
name|FontWeight
block|,
name|Margin
block|,
name|MarginBottom
block|,
name|MarginLeft
block|,
name|MarginRight
block|,
name|MarginTop
block|,
name|QtBlockIndent
block|,
name|QtListIndent
block|,
name|QtParagraphType
block|,
name|QtTableType
block|,
name|QtUserState
block|,
name|TextDecoration
block|,
name|TextIndent
block|,
name|TextUnderlineStyle
block|,
name|VerticalAlignment
block|,
name|Whitespace
block|,
name|QtSelectionForeground
block|,
name|QtSelectionBackground
block|,
name|Border
block|,
name|BorderLeft
block|,
name|BorderRight
block|,
name|BorderTop
block|,
name|BorderBottom
block|,
name|Padding
block|,
name|PaddingLeft
block|,
name|PaddingRight
block|,
name|PaddingTop
block|,
name|PaddingBottom
block|,
name|PageBreakBefore
block|,
name|PageBreakAfter
block|,
name|QtAlternateBackground
block|,
name|BorderLeftStyle
block|,
name|BorderRightStyle
block|,
name|BorderTopStyle
block|,
name|BorderBottomStyle
block|,
name|BorderStyles
block|,
name|BorderLeftColor
block|,
name|BorderRightColor
block|,
name|BorderTopColor
block|,
name|BorderBottomColor
block|,
name|BorderColor
block|,
name|BorderLeftWidth
block|,
name|BorderRightWidth
block|,
name|BorderTopWidth
block|,
name|BorderBottomWidth
block|,
name|BorderWidth
block|,
name|BorderTopLeftRadius
block|,
name|BorderTopRightRadius
block|,
name|BorderBottomLeftRadius
block|,
name|BorderBottomRightRadius
block|,
name|BorderRadius
block|,
name|Background
block|,
name|BackgroundOrigin
block|,
name|BackgroundClip
block|,
name|BackgroundRepeat
block|,
name|BackgroundPosition
block|,
name|BackgroundAttachment
block|,
name|BackgroundImage
block|,
name|BorderImage
block|,
name|QtSpacing
block|,
name|Width
block|,
name|Height
block|,
name|MinimumWidth
block|,
name|MinimumHeight
block|,
name|MaximumWidth
block|,
name|MaximumHeight
block|,
name|QtImage
block|,
name|Left
block|,
name|Right
block|,
name|Top
block|,
name|Bottom
block|,
name|QtOrigin
block|,
name|QtPosition
block|,
name|Position
block|,
name|QtStyleFeatures
block|,
name|QtBackgroundRole
block|,
name|ListStyleType
block|,
name|ListStyle
block|,
name|QtImageAlignment
block|,
name|TextAlignment
block|,
name|Outline
block|,
name|OutlineOffset
block|,
name|OutlineWidth
block|,
name|OutlineColor
block|,
name|OutlineStyle
block|,
name|OutlineRadius
block|,
name|OutlineTopLeftRadius
block|,
name|OutlineTopRightRadius
block|,
name|OutlineBottomLeftRadius
block|,
name|OutlineBottomRightRadius
block|,
name|FontVariant
block|,
name|TextTransform
block|,
name|QtListNumberPrefix
block|,
name|QtListNumberSuffix
block|,
name|LineHeight
block|,
name|NumProperties
block|}
enum|;
enum|enum
name|KnownValue
block|{
name|UnknownValue
block|,
name|Value_Normal
block|,
name|Value_Pre
block|,
name|Value_NoWrap
block|,
name|Value_PreWrap
block|,
name|Value_Small
block|,
name|Value_Medium
block|,
name|Value_Large
block|,
name|Value_XLarge
block|,
name|Value_XXLarge
block|,
name|Value_Italic
block|,
name|Value_Oblique
block|,
name|Value_Bold
block|,
name|Value_Underline
block|,
name|Value_Overline
block|,
name|Value_LineThrough
block|,
name|Value_Sub
block|,
name|Value_Super
block|,
name|Value_Left
block|,
name|Value_Right
block|,
name|Value_Top
block|,
name|Value_Bottom
block|,
name|Value_Center
block|,
name|Value_Native
block|,
name|Value_Solid
block|,
name|Value_Dotted
block|,
name|Value_Dashed
block|,
name|Value_DotDash
block|,
name|Value_DotDotDash
block|,
name|Value_Double
block|,
name|Value_Groove
block|,
name|Value_Ridge
block|,
name|Value_Inset
block|,
name|Value_Outset
block|,
name|Value_Wave
block|,
name|Value_Middle
block|,
name|Value_Auto
block|,
name|Value_Always
block|,
name|Value_None
block|,
name|Value_Transparent
block|,
name|Value_Disc
block|,
name|Value_Circle
block|,
name|Value_Square
block|,
name|Value_Decimal
block|,
name|Value_LowerAlpha
block|,
name|Value_UpperAlpha
block|,
name|Value_LowerRoman
block|,
name|Value_UpperRoman
block|,
name|Value_SmallCaps
block|,
name|Value_Uppercase
block|,
name|Value_Lowercase
block|,
comment|/* keep these in same order as QPalette::ColorRole */
name|Value_FirstColorRole
block|,
name|Value_WindowText
init|=
name|Value_FirstColorRole
block|,
name|Value_Button
block|,
name|Value_Light
block|,
name|Value_Midlight
block|,
name|Value_Dark
block|,
name|Value_Mid
block|,
name|Value_Text
block|,
name|Value_BrightText
block|,
name|Value_ButtonText
block|,
name|Value_Base
block|,
name|Value_Window
block|,
name|Value_Shadow
block|,
name|Value_Highlight
block|,
name|Value_HighlightedText
block|,
name|Value_Link
block|,
name|Value_LinkVisited
block|,
name|Value_AlternateBase
block|,
name|Value_LastColorRole
init|=
name|Value_AlternateBase
block|,
name|Value_Disabled
block|,
name|Value_Active
block|,
name|Value_Selected
block|,
name|Value_On
block|,
name|Value_Off
block|,
name|NumKnownValues
block|}
enum|;
enum|enum
name|BorderStyle
block|{
name|BorderStyle_Unknown
block|,
name|BorderStyle_None
block|,
name|BorderStyle_Dotted
block|,
name|BorderStyle_Dashed
block|,
name|BorderStyle_Solid
block|,
name|BorderStyle_Double
block|,
name|BorderStyle_DotDash
block|,
name|BorderStyle_DotDotDash
block|,
name|BorderStyle_Groove
block|,
name|BorderStyle_Ridge
block|,
name|BorderStyle_Inset
block|,
name|BorderStyle_Outset
block|,
name|BorderStyle_Native
block|,
name|NumKnownBorderStyles
block|}
enum|;
enum|enum
name|Edge
block|{
name|TopEdge
block|,
name|RightEdge
block|,
name|BottomEdge
block|,
name|LeftEdge
block|,
name|NumEdges
block|}
enum|;
enum|enum
name|Corner
block|{
name|TopLeftCorner
block|,
name|TopRightCorner
block|,
name|BottomLeftCorner
block|,
name|BottomRightCorner
block|}
enum|;
enum|enum
name|TileMode
block|{
name|TileMode_Unknown
block|,
name|TileMode_Round
block|,
name|TileMode_Stretch
block|,
name|TileMode_Repeat
block|,
name|NumKnownTileModes
block|}
enum|;
enum|enum
name|Repeat
block|{
name|Repeat_Unknown
block|,
name|Repeat_None
block|,
name|Repeat_X
block|,
name|Repeat_Y
block|,
name|Repeat_XY
block|,
name|NumKnownRepeats
block|}
enum|;
enum|enum
name|Origin
block|{
name|Origin_Unknown
block|,
name|Origin_Padding
block|,
name|Origin_Border
block|,
name|Origin_Content
block|,
name|Origin_Margin
block|,
name|NumKnownOrigins
block|}
enum|;
enum|enum
name|PositionMode
block|{
name|PositionMode_Unknown
block|,
name|PositionMode_Static
block|,
name|PositionMode_Relative
block|,
name|PositionMode_Absolute
block|,
name|PositionMode_Fixed
block|,
name|NumKnownPositionModes
block|}
enum|;
enum|enum
name|Attachment
block|{
name|Attachment_Unknown
block|,
name|Attachment_Fixed
block|,
name|Attachment_Scroll
block|,
name|NumKnownAttachments
block|}
enum|;
enum|enum
name|StyleFeature
block|{
name|StyleFeature_None
init|=
literal|0
block|,
name|StyleFeature_BackgroundColor
init|=
literal|1
block|,
name|StyleFeature_BackgroundGradient
init|=
literal|2
block|,
name|NumKnownStyleFeatures
init|=
literal|4
block|}
enum|;
struct|struct
name|Q_GUI_EXPORT
name|Value
block|{
enum|enum
name|Type
block|{
name|Unknown
block|,
name|Number
block|,
name|Percentage
block|,
name|Length
block|,
name|String
block|,
name|Identifier
block|,
name|KnownIdentifier
block|,
name|Uri
block|,
name|Color
block|,
name|Function
block|,
name|TermOperatorSlash
block|,
name|TermOperatorComma
block|}
enum|;
specifier|inline
name|Value
argument_list|()
operator|:
name|type
argument_list|(
argument|Unknown
argument_list|)
block|{ }
name|Type
name|type
expr_stmt|;
name|QVariant
name|variant
decl_stmt|;
name|QString
name|toString
argument_list|()
specifier|const
expr_stmt|;
block|}
struct|;
struct|struct
name|ColorData
block|{
name|ColorData
argument_list|()
operator|:
name|role
argument_list|(
name|QPalette
operator|::
name|NoRole
argument_list|)
operator|,
name|type
argument_list|(
argument|Invalid
argument_list|)
block|{}
name|ColorData
argument_list|(
specifier|const
name|QColor
operator|&
name|col
argument_list|)
operator|:
name|color
argument_list|(
name|col
argument_list|)
operator|,
name|role
argument_list|(
name|QPalette
operator|::
name|NoRole
argument_list|)
operator|,
name|type
argument_list|(
argument|Color
argument_list|)
block|{}
name|ColorData
argument_list|(
argument|QPalette::ColorRole r
argument_list|)
operator|:
name|role
argument_list|(
name|r
argument_list|)
operator|,
name|type
argument_list|(
argument|Role
argument_list|)
block|{}
name|QColor
name|color
expr_stmt|;
name|QPalette
operator|::
name|ColorRole
name|role
expr_stmt|;
enum|enum
block|{
name|Invalid
block|,
name|Color
block|,
name|Role
block|}
name|type
enum|;
block|}
struct|;
struct|struct
name|BrushData
block|{
name|BrushData
argument_list|()
operator|:
name|role
argument_list|(
name|QPalette
operator|::
name|NoRole
argument_list|)
operator|,
name|type
argument_list|(
argument|Invalid
argument_list|)
block|{}
name|BrushData
argument_list|(
specifier|const
name|QBrush
operator|&
name|br
argument_list|)
operator|:
name|brush
argument_list|(
name|br
argument_list|)
operator|,
name|role
argument_list|(
name|QPalette
operator|::
name|NoRole
argument_list|)
operator|,
name|type
argument_list|(
argument|Brush
argument_list|)
block|{}
name|BrushData
argument_list|(
argument|QPalette::ColorRole r
argument_list|)
operator|:
name|role
argument_list|(
name|r
argument_list|)
operator|,
name|type
argument_list|(
argument|Role
argument_list|)
block|{}
name|QBrush
name|brush
expr_stmt|;
name|QPalette
operator|::
name|ColorRole
name|role
expr_stmt|;
enum|enum
block|{
name|Invalid
block|,
name|Brush
block|,
name|Role
block|,
name|DependsOnThePalette
block|}
name|type
enum|;
block|}
struct|;
struct|struct
name|BackgroundData
block|{
name|BrushData
name|brush
decl_stmt|;
name|QString
name|image
decl_stmt|;
name|Repeat
name|repeat
decl_stmt|;
name|Qt
operator|::
name|Alignment
name|alignment
expr_stmt|;
block|}
struct|;
struct|struct
name|LengthData
block|{
name|qreal
name|number
decl_stmt|;
enum|enum
block|{
name|None
block|,
name|Px
block|,
name|Ex
block|,
name|Em
block|}
name|unit
enum|;
block|}
struct|;
struct|struct
name|BorderData
block|{
name|LengthData
name|width
decl_stmt|;
name|BorderStyle
name|style
decl_stmt|;
name|BrushData
name|color
decl_stmt|;
block|}
struct|;
comment|// 1. StyleRule - x:hover, y:clicked> z:checked { prop1: value1; prop2: value2; }
comment|// 2. QVector<Selector> - x:hover, y:clicked z:checked
comment|// 3. QVector<BasicSelector> - y:clicked z:checked
comment|// 4. QVector<Declaration> - { prop1: value1; prop2: value2; }
comment|// 5. Declaration - prop1: value1;
struct|struct
name|Q_AUTOTEST_EXPORT
name|Declaration
block|{
name|struct
name|DeclarationData
range|:
name|public
name|QSharedData
block|{
specifier|inline
name|DeclarationData
argument_list|()
operator|:
name|propertyId
argument_list|(
name|UnknownProperty
argument_list|)
block|,
name|important
argument_list|(
argument|false
argument_list|)
block|{}
name|QString
name|property
block|;
name|Property
name|propertyId
block|;
name|QVector
operator|<
name|Value
operator|>
name|values
block|;
name|QVariant
name|parsed
block|;
name|bool
name|important
block|;     }
decl_stmt|;
name|QExplicitlySharedDataPointer
operator|<
name|DeclarationData
operator|>
name|d
expr_stmt|;
specifier|inline
name|Declaration
argument_list|()
operator|:
name|d
argument_list|(
argument|new DeclarationData()
argument_list|)
block|{}
specifier|inline
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|property
operator|.
name|isEmpty
argument_list|()
operator|&&
name|d
operator|->
name|propertyId
operator|==
name|UnknownProperty
return|;
block|}
comment|// helper functions
name|QColor
name|colorValue
argument_list|(
specifier|const
name|QPalette
operator|&
operator|=
name|QPalette
argument_list|()
argument_list|)
decl|const
decl_stmt|;
name|void
name|colorValues
argument_list|(
name|QColor
operator|*
name|c
argument_list|,
specifier|const
name|QPalette
operator|&
operator|=
name|QPalette
argument_list|()
argument_list|)
decl|const
decl_stmt|;
name|QBrush
name|brushValue
argument_list|(
specifier|const
name|QPalette
operator|&
operator|=
name|QPalette
argument_list|()
argument_list|)
decl|const
decl_stmt|;
name|void
name|brushValues
argument_list|(
name|QBrush
operator|*
name|c
argument_list|,
specifier|const
name|QPalette
operator|&
operator|=
name|QPalette
argument_list|()
argument_list|)
decl|const
decl_stmt|;
name|BorderStyle
name|styleValue
argument_list|()
specifier|const
expr_stmt|;
name|void
name|styleValues
argument_list|(
name|BorderStyle
operator|*
name|s
argument_list|)
decl|const
decl_stmt|;
name|Origin
name|originValue
argument_list|()
specifier|const
expr_stmt|;
name|Repeat
name|repeatValue
argument_list|()
specifier|const
expr_stmt|;
name|Qt
operator|::
name|Alignment
name|alignmentValue
argument_list|()
specifier|const
expr_stmt|;
name|PositionMode
name|positionValue
argument_list|()
specifier|const
expr_stmt|;
name|Attachment
name|attachmentValue
argument_list|()
specifier|const
expr_stmt|;
name|int
name|styleFeaturesValue
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|intValue
argument_list|(
name|int
operator|*
name|i
argument_list|,
specifier|const
name|char
operator|*
name|unit
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|bool
name|realValue
argument_list|(
name|qreal
operator|*
name|r
argument_list|,
specifier|const
name|char
operator|*
name|unit
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|QSize
name|sizeValue
argument_list|()
specifier|const
expr_stmt|;
name|QRect
name|rectValue
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|uriValue
argument_list|()
specifier|const
expr_stmt|;
comment|//    QIcon iconValue() const;
name|void
name|borderImageValue
argument_list|(
name|QString
operator|*
name|image
argument_list|,
name|int
operator|*
name|cuts
argument_list|,
name|TileMode
operator|*
name|h
argument_list|,
name|TileMode
operator|*
name|v
argument_list|)
decl|const
decl_stmt|;
block|}
struct|;
specifier|const
name|quint64
name|PseudoClass_Unknown
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000000000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Enabled
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000000001
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Disabled
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000000002
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Pressed
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000000004
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Focus
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000000008
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Hover
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000000010
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Checked
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000000020
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Unchecked
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000000040
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Indeterminate
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000000080
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Unspecified
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000000100
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Selected
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000000200
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Horizontal
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000000400
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Vertical
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000000800
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Window
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000001000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Children
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000002000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Sibling
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000004000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Default
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000008000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_First
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000010000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Last
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000020000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Middle
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000040000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_OnlyOne
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000080000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_PreviousSelected
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000100000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_NextSelected
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000200000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Flat
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000400000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Left
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000000800000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Right
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000001000000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Top
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000002000000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Bottom
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000004000000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Exclusive
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000008000000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_NonExclusive
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000010000000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Frameless
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000020000000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_ReadOnly
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000040000000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Active
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000080000000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Closable
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000100000000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Movable
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000200000000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Floatable
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000400000000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Minimized
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000000800000000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Maximized
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000001000000000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_On
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000002000000000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Off
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000004000000000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Editable
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000008000000000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Item
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000010000000000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Closed
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000020000000000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Open
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000040000000000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_EditFocus
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000080000000000
argument_list|)
decl_stmt|;
specifier|const
name|quint64
name|PseudoClass_Alternate
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000100000000000
argument_list|)
decl_stmt|;
comment|// The Any specifier is never generated, but can be used as a wildcard in searches.
specifier|const
name|quint64
name|PseudoClass_Any
init|=
name|Q_UINT64_C
argument_list|(
literal|0x0000ffffffffffff
argument_list|)
decl_stmt|;
specifier|const
name|int
name|NumPseudos
init|=
literal|46
decl_stmt|;
struct|struct
name|Pseudo
block|{
name|Pseudo
argument_list|()
operator|:
name|type
argument_list|(
literal|0
argument_list|)
operator|,
name|negated
argument_list|(
argument|false
argument_list|)
block|{ }
name|quint64
name|type
expr_stmt|;
name|QString
name|name
decl_stmt|;
name|QString
name|function
decl_stmt|;
name|bool
name|negated
decl_stmt|;
block|}
struct|;
struct|struct
name|AttributeSelector
block|{
enum|enum
name|ValueMatchType
block|{
name|NoMatch
block|,
name|MatchEqual
block|,
name|MatchContains
block|,
name|MatchBeginsWith
block|}
enum|;
specifier|inline
name|AttributeSelector
argument_list|()
operator|:
name|valueMatchCriterium
argument_list|(
argument|NoMatch
argument_list|)
block|{}
name|QString
name|name
expr_stmt|;
name|QString
name|value
decl_stmt|;
name|ValueMatchType
name|valueMatchCriterium
decl_stmt|;
block|}
struct|;
struct|struct
name|BasicSelector
block|{
specifier|inline
name|BasicSelector
argument_list|()
operator|:
name|relationToNext
argument_list|(
argument|NoRelation
argument_list|)
block|{}
expr|enum
name|Relation
block|{
name|NoRelation
block|,
name|MatchNextSelectorIfAncestor
block|,
name|MatchNextSelectorIfParent
block|,
name|MatchNextSelectorIfPreceeds
block|}
expr_stmt|;
name|QString
name|elementName
decl_stmt|;
name|QStringList
name|ids
decl_stmt|;
name|QVector
operator|<
name|Pseudo
operator|>
name|pseudos
expr_stmt|;
name|QVector
operator|<
name|AttributeSelector
operator|>
name|attributeSelectors
expr_stmt|;
name|Relation
name|relationToNext
decl_stmt|;
block|}
struct|;
struct|struct
name|Q_AUTOTEST_EXPORT
name|Selector
block|{
name|QVector
operator|<
name|BasicSelector
operator|>
name|basicSelectors
expr_stmt|;
name|int
name|specificity
argument_list|()
specifier|const
expr_stmt|;
name|quint64
name|pseudoClass
argument_list|(
name|quint64
operator|*
name|negated
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|QString
name|pseudoElement
argument_list|()
specifier|const
expr_stmt|;
block|}
struct|;
struct_decl|struct
name|StyleRule
struct_decl|;
struct_decl|struct
name|MediaRule
struct_decl|;
struct_decl|struct
name|PageRule
struct_decl|;
struct_decl|struct
name|ImportRule
struct_decl|;
struct|struct
name|Q_AUTOTEST_EXPORT
name|ValueExtractor
block|{
name|ValueExtractor
argument_list|(
specifier|const
name|QVector
operator|<
name|Declaration
operator|>
operator|&
name|declarations
argument_list|,
specifier|const
name|QPalette
operator|&
operator|=
name|QPalette
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|extractFont
parameter_list|(
name|QFont
modifier|*
name|font
parameter_list|,
name|int
modifier|*
name|fontSizeAdjustment
parameter_list|)
function_decl|;
name|bool
name|extractBackground
argument_list|(
name|QBrush
operator|*
argument_list|,
name|QString
operator|*
argument_list|,
name|Repeat
operator|*
argument_list|,
name|Qt
operator|::
name|Alignment
operator|*
argument_list|,
name|QCss
operator|::
name|Origin
operator|*
argument_list|,
name|QCss
operator|::
name|Attachment
operator|*
argument_list|,
name|QCss
operator|::
name|Origin
operator|*
argument_list|)
decl_stmt|;
name|bool
name|extractGeometry
parameter_list|(
name|int
modifier|*
name|w
parameter_list|,
name|int
modifier|*
name|h
parameter_list|,
name|int
modifier|*
name|minw
parameter_list|,
name|int
modifier|*
name|minh
parameter_list|,
name|int
modifier|*
name|maxw
parameter_list|,
name|int
modifier|*
name|maxh
parameter_list|)
function_decl|;
name|bool
name|extractPosition
argument_list|(
name|int
operator|*
name|l
argument_list|,
name|int
operator|*
name|t
argument_list|,
name|int
operator|*
name|r
argument_list|,
name|int
operator|*
name|b
argument_list|,
name|QCss
operator|::
name|Origin
operator|*
argument_list|,
name|Qt
operator|::
name|Alignment
operator|*
argument_list|,
name|QCss
operator|::
name|PositionMode
operator|*
argument_list|,
name|Qt
operator|::
name|Alignment
operator|*
argument_list|)
decl_stmt|;
name|bool
name|extractBox
parameter_list|(
name|int
modifier|*
name|margins
parameter_list|,
name|int
modifier|*
name|paddings
parameter_list|,
name|int
modifier|*
name|spacing
init|=
literal|0
parameter_list|)
function_decl|;
name|bool
name|extractBorder
parameter_list|(
name|int
modifier|*
name|borders
parameter_list|,
name|QBrush
modifier|*
name|colors
parameter_list|,
name|BorderStyle
modifier|*
name|Styles
parameter_list|,
name|QSize
modifier|*
name|radii
parameter_list|)
function_decl|;
name|bool
name|extractOutline
parameter_list|(
name|int
modifier|*
name|borders
parameter_list|,
name|QBrush
modifier|*
name|colors
parameter_list|,
name|BorderStyle
modifier|*
name|Styles
parameter_list|,
name|QSize
modifier|*
name|radii
parameter_list|,
name|int
modifier|*
name|offsets
parameter_list|)
function_decl|;
name|bool
name|extractPalette
parameter_list|(
name|QBrush
modifier|*
name|fg
parameter_list|,
name|QBrush
modifier|*
name|sfg
parameter_list|,
name|QBrush
modifier|*
name|sbg
parameter_list|,
name|QBrush
modifier|*
name|abg
parameter_list|)
function_decl|;
name|int
name|extractStyleFeatures
parameter_list|()
function_decl|;
name|bool
name|extractImage
argument_list|(
name|QIcon
operator|*
name|icon
argument_list|,
name|Qt
operator|::
name|Alignment
operator|*
name|a
argument_list|,
name|QSize
operator|*
name|size
argument_list|)
decl_stmt|;
name|int
name|lengthValue
parameter_list|(
specifier|const
name|Declaration
modifier|&
name|decl
parameter_list|)
function_decl|;
name|private
label|:
name|void
name|extractFont
parameter_list|()
function_decl|;
name|void
name|borderValue
argument_list|(
specifier|const
name|Declaration
operator|&
name|decl
argument_list|,
name|int
operator|*
name|width
argument_list|,
name|QCss
operator|::
name|BorderStyle
operator|*
name|style
argument_list|,
name|QBrush
operator|*
name|color
argument_list|)
decl_stmt|;
name|LengthData
name|lengthValue
parameter_list|(
specifier|const
name|Value
modifier|&
name|v
parameter_list|)
function_decl|;
name|void
name|lengthValues
parameter_list|(
specifier|const
name|Declaration
modifier|&
name|decl
parameter_list|,
name|int
modifier|*
name|m
parameter_list|)
function_decl|;
name|QSize
name|sizeValue
parameter_list|(
specifier|const
name|Declaration
modifier|&
name|decl
parameter_list|)
function_decl|;
name|void
name|sizeValues
parameter_list|(
specifier|const
name|Declaration
modifier|&
name|decl
parameter_list|,
name|QSize
modifier|*
name|radii
parameter_list|)
function_decl|;
name|QVector
operator|<
name|Declaration
operator|>
name|declarations
expr_stmt|;
name|QFont
name|f
decl_stmt|;
name|int
name|adjustment
decl_stmt|;
name|int
name|fontExtracted
decl_stmt|;
name|QPalette
name|pal
decl_stmt|;
block|}
struct|;
struct|struct
name|StyleRule
block|{
name|StyleRule
argument_list|()
operator|:
name|order
argument_list|(
literal|0
argument_list|)
block|{ }
name|QVector
operator|<
name|Selector
operator|>
name|selectors
expr_stmt|;
name|QVector
operator|<
name|Declaration
operator|>
name|declarations
expr_stmt|;
name|int
name|order
decl_stmt|;
block|}
struct|;
struct|struct
name|MediaRule
block|{
name|QStringList
name|media
decl_stmt|;
name|QVector
operator|<
name|StyleRule
operator|>
name|styleRules
expr_stmt|;
block|}
struct|;
struct|struct
name|PageRule
block|{
name|QString
name|selector
decl_stmt|;
name|QVector
operator|<
name|Declaration
operator|>
name|declarations
expr_stmt|;
block|}
struct|;
struct|struct
name|ImportRule
block|{
name|QString
name|href
decl_stmt|;
name|QStringList
name|media
decl_stmt|;
block|}
struct|;
enum|enum
name|StyleSheetOrigin
block|{
name|StyleSheetOrigin_Unspecified
block|,
name|StyleSheetOrigin_UserAgent
block|,
name|StyleSheetOrigin_User
block|,
name|StyleSheetOrigin_Author
block|,
name|StyleSheetOrigin_Inline
block|}
enum|;
struct|struct
name|Q_GUI_EXPORT
name|StyleSheet
block|{
name|StyleSheet
argument_list|()
operator|:
name|origin
argument_list|(
name|StyleSheetOrigin_Unspecified
argument_list|)
operator|,
name|depth
argument_list|(
literal|0
argument_list|)
block|{ }
name|QVector
operator|<
name|StyleRule
operator|>
name|styleRules
expr_stmt|;
comment|//only contains rules that are not indexed
name|QVector
operator|<
name|MediaRule
operator|>
name|mediaRules
expr_stmt|;
name|QVector
operator|<
name|PageRule
operator|>
name|pageRules
expr_stmt|;
name|QVector
operator|<
name|ImportRule
operator|>
name|importRules
expr_stmt|;
name|StyleSheetOrigin
name|origin
decl_stmt|;
name|int
name|depth
decl_stmt|;
comment|// applicable only for inline style sheets
name|QMultiHash
operator|<
name|QString
operator|,
name|StyleRule
operator|>
name|nameIndex
expr_stmt|;
name|QMultiHash
operator|<
name|QString
operator|,
name|StyleRule
operator|>
name|idIndex
expr_stmt|;
name|void
name|buildIndexes
argument_list|(
name|Qt
operator|::
name|CaseSensitivity
name|nameCaseSensitivity
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl_stmt|;
block|}
struct|;
name|class
name|Q_GUI_EXPORT
name|StyleSelector
block|{
name|public
label|:
name|StyleSelector
argument_list|()
operator|:
name|nameCaseSensitivity
argument_list|(
argument|Qt::CaseSensitive
argument_list|)
block|{}
name|virtual
operator|~
name|StyleSelector
argument_list|()
expr_stmt|;
union|union
name|NodePtr
block|{
name|void
modifier|*
name|ptr
decl_stmt|;
name|int
name|id
decl_stmt|;
block|}
union|;
name|QVector
operator|<
name|StyleRule
operator|>
name|styleRulesForNode
argument_list|(
argument|NodePtr node
argument_list|)
expr_stmt|;
name|QVector
operator|<
name|Declaration
operator|>
name|declarationsForNode
argument_list|(
argument|NodePtr node
argument_list|,
argument|const char *extraPseudo =
literal|0
argument_list|)
expr_stmt|;
name|virtual
name|bool
name|nodeNameEquals
argument_list|(
name|NodePtr
name|node
argument_list|,
specifier|const
name|QString
operator|&
name|nodeName
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QString
name|attribute
argument_list|(
name|NodePtr
name|node
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|bool
name|hasAttributes
argument_list|(
name|NodePtr
name|node
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|QStringList
name|nodeIds
argument_list|(
name|NodePtr
name|node
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QStringList
name|nodeNames
argument_list|(
name|NodePtr
name|node
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|bool
name|isNullNode
argument_list|(
name|NodePtr
name|node
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|NodePtr
name|parentNode
argument_list|(
name|NodePtr
name|node
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|NodePtr
name|previousSiblingNode
argument_list|(
name|NodePtr
name|node
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|NodePtr
name|duplicateNode
argument_list|(
name|NodePtr
name|node
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|void
name|freeNode
argument_list|(
name|NodePtr
name|node
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|QVector
operator|<
name|StyleSheet
operator|>
name|styleSheets
expr_stmt|;
name|QString
name|medium
decl_stmt|;
name|Qt
operator|::
name|CaseSensitivity
name|nameCaseSensitivity
expr_stmt|;
name|private
label|:
name|void
name|matchRule
argument_list|(
name|NodePtr
name|node
argument_list|,
specifier|const
name|StyleRule
operator|&
name|rules
argument_list|,
name|StyleSheetOrigin
name|origin
argument_list|,
name|int
name|depth
argument_list|,
name|QMap
operator|<
name|uint
argument_list|,
name|StyleRule
operator|>
operator|*
name|weightedRules
argument_list|)
decl_stmt|;
name|bool
name|selectorMatches
parameter_list|(
specifier|const
name|Selector
modifier|&
name|rule
parameter_list|,
name|NodePtr
name|node
parameter_list|)
function_decl|;
name|bool
name|basicSelectorMatches
parameter_list|(
specifier|const
name|BasicSelector
modifier|&
name|rule
parameter_list|,
name|NodePtr
name|node
parameter_list|)
function_decl|;
block|}
empty_stmt|;
enum|enum
name|TokenType
block|{
name|NONE
block|,
name|S
block|,
name|CDO
block|,
name|CDC
block|,
name|INCLUDES
block|,
name|DASHMATCH
block|,
name|LBRACE
block|,
name|PLUS
block|,
name|GREATER
block|,
name|COMMA
block|,
name|STRING
block|,
name|INVALID
block|,
name|IDENT
block|,
name|HASH
block|,
name|ATKEYWORD_SYM
block|,
name|EXCLAMATION_SYM
block|,
name|LENGTH
block|,
name|PERCENTAGE
block|,
name|NUMBER
block|,
name|FUNCTION
block|,
name|COLON
block|,
name|SEMICOLON
block|,
name|RBRACE
block|,
name|SLASH
block|,
name|MINUS
block|,
name|DOT
block|,
name|STAR
block|,
name|LBRACKET
block|,
name|RBRACKET
block|,
name|EQUAL
block|,
name|LPAREN
block|,
name|RPAREN
block|,
name|OR
block|}
enum|;
struct|struct
name|Q_GUI_EXPORT
name|Symbol
block|{
specifier|inline
name|Symbol
argument_list|()
operator|:
name|token
argument_list|(
name|NONE
argument_list|)
operator|,
name|start
argument_list|(
literal|0
argument_list|)
operator|,
name|len
argument_list|(
argument|-
literal|1
argument_list|)
block|{}
name|TokenType
name|token
expr_stmt|;
name|QString
name|text
decl_stmt|;
name|int
name|start
decl_stmt|,
name|len
decl_stmt|;
name|QString
name|lexem
argument_list|()
specifier|const
expr_stmt|;
block|}
struct|;
name|class
name|Q_AUTOTEST_EXPORT
name|Scanner
block|{
name|public
label|:
specifier|static
name|QString
name|preprocess
parameter_list|(
specifier|const
name|QString
modifier|&
name|input
parameter_list|,
name|bool
modifier|*
name|hasEscapeSequences
init|=
literal|0
parameter_list|)
function_decl|;
specifier|static
name|void
name|scan
argument_list|(
specifier|const
name|QString
operator|&
name|preprocessedInput
argument_list|,
name|QVector
operator|<
name|Symbol
operator|>
operator|*
name|symbols
argument_list|)
decl_stmt|;
block|}
empty_stmt|;
name|class
name|Q_GUI_EXPORT
name|Parser
block|{
name|public
label|:
name|Parser
argument_list|()
expr_stmt|;
name|Parser
argument_list|(
argument|const QString&css
argument_list|,
argument|bool file = false
argument_list|)
empty_stmt|;
name|void
name|init
parameter_list|(
specifier|const
name|QString
modifier|&
name|css
parameter_list|,
name|bool
name|file
init|=
name|false
parameter_list|)
function_decl|;
name|bool
name|parse
argument_list|(
name|StyleSheet
operator|*
name|styleSheet
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|nameCaseSensitivity
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl_stmt|;
name|Symbol
name|errorSymbol
parameter_list|()
function_decl|;
name|bool
name|parseImport
parameter_list|(
name|ImportRule
modifier|*
name|importRule
parameter_list|)
function_decl|;
name|bool
name|parseMedia
parameter_list|(
name|MediaRule
modifier|*
name|mediaRule
parameter_list|)
function_decl|;
name|bool
name|parseMedium
parameter_list|(
name|QStringList
modifier|*
name|media
parameter_list|)
function_decl|;
name|bool
name|parsePage
parameter_list|(
name|PageRule
modifier|*
name|pageRule
parameter_list|)
function_decl|;
name|bool
name|parsePseudoPage
parameter_list|(
name|QString
modifier|*
name|selector
parameter_list|)
function_decl|;
name|bool
name|parseNextOperator
parameter_list|(
name|Value
modifier|*
name|value
parameter_list|)
function_decl|;
name|bool
name|parseCombinator
argument_list|(
name|BasicSelector
operator|::
name|Relation
operator|*
name|relation
argument_list|)
decl_stmt|;
name|bool
name|parseProperty
parameter_list|(
name|Declaration
modifier|*
name|decl
parameter_list|)
function_decl|;
name|bool
name|parseRuleset
parameter_list|(
name|StyleRule
modifier|*
name|styleRule
parameter_list|)
function_decl|;
name|bool
name|parseSelector
parameter_list|(
name|Selector
modifier|*
name|sel
parameter_list|)
function_decl|;
name|bool
name|parseSimpleSelector
parameter_list|(
name|BasicSelector
modifier|*
name|basicSel
parameter_list|)
function_decl|;
name|bool
name|parseClass
parameter_list|(
name|QString
modifier|*
name|name
parameter_list|)
function_decl|;
name|bool
name|parseElementName
parameter_list|(
name|QString
modifier|*
name|name
parameter_list|)
function_decl|;
name|bool
name|parseAttrib
parameter_list|(
name|AttributeSelector
modifier|*
name|attr
parameter_list|)
function_decl|;
name|bool
name|parsePseudo
parameter_list|(
name|Pseudo
modifier|*
name|pseudo
parameter_list|)
function_decl|;
name|bool
name|parseNextDeclaration
parameter_list|(
name|Declaration
modifier|*
name|declaration
parameter_list|)
function_decl|;
name|bool
name|parsePrio
parameter_list|(
name|Declaration
modifier|*
name|declaration
parameter_list|)
function_decl|;
name|bool
name|parseExpr
argument_list|(
name|QVector
operator|<
name|Value
operator|>
operator|*
name|values
argument_list|)
decl_stmt|;
name|bool
name|parseTerm
parameter_list|(
name|Value
modifier|*
name|value
parameter_list|)
function_decl|;
name|bool
name|parseFunction
parameter_list|(
name|QString
modifier|*
name|name
parameter_list|,
name|QString
modifier|*
name|args
parameter_list|)
function_decl|;
name|bool
name|parseHexColor
parameter_list|(
name|QColor
modifier|*
name|col
parameter_list|)
function_decl|;
name|bool
name|testAndParseUri
parameter_list|(
name|QString
modifier|*
name|uri
parameter_list|)
function_decl|;
specifier|inline
name|bool
name|testRuleset
parameter_list|()
block|{
return|return
name|testSelector
argument_list|()
return|;
block|}
specifier|inline
name|bool
name|testSelector
parameter_list|()
block|{
return|return
name|testSimpleSelector
argument_list|()
return|;
block|}
specifier|inline
name|bool
name|parseNextSelector
parameter_list|(
name|Selector
modifier|*
name|sel
parameter_list|)
block|{
if|if
condition|(
operator|!
name|testSelector
argument_list|()
condition|)
return|return
name|recordError
argument_list|()
return|;
return|return
name|parseSelector
argument_list|(
name|sel
argument_list|)
return|;
block|}
name|bool
name|testSimpleSelector
parameter_list|()
function_decl|;
specifier|inline
name|bool
name|parseNextSimpleSelector
parameter_list|(
name|BasicSelector
modifier|*
name|basicSel
parameter_list|)
block|{
if|if
condition|(
operator|!
name|testSimpleSelector
argument_list|()
condition|)
return|return
name|recordError
argument_list|()
return|;
return|return
name|parseSimpleSelector
argument_list|(
name|basicSel
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|testElementName
parameter_list|()
block|{
return|return
name|test
argument_list|(
name|IDENT
argument_list|)
operator|||
name|test
argument_list|(
name|STAR
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|testClass
parameter_list|()
block|{
return|return
name|test
argument_list|(
name|DOT
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|testAttrib
parameter_list|()
block|{
return|return
name|test
argument_list|(
name|LBRACKET
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|testPseudo
parameter_list|()
block|{
return|return
name|test
argument_list|(
name|COLON
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|testMedium
parameter_list|()
block|{
return|return
name|test
argument_list|(
name|IDENT
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|parseNextMedium
parameter_list|(
name|QStringList
modifier|*
name|media
parameter_list|)
block|{
if|if
condition|(
operator|!
name|testMedium
argument_list|()
condition|)
return|return
name|recordError
argument_list|()
return|;
return|return
name|parseMedium
argument_list|(
name|media
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|testPseudoPage
parameter_list|()
block|{
return|return
name|test
argument_list|(
name|COLON
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|testImport
parameter_list|()
block|{
return|return
name|testTokenAndEndsWith
argument_list|(
name|ATKEYWORD_SYM
argument_list|,
name|QLatin1String
argument_list|(
literal|"import"
argument_list|)
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|testMedia
parameter_list|()
block|{
return|return
name|testTokenAndEndsWith
argument_list|(
name|ATKEYWORD_SYM
argument_list|,
name|QLatin1String
argument_list|(
literal|"media"
argument_list|)
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|testPage
parameter_list|()
block|{
return|return
name|testTokenAndEndsWith
argument_list|(
name|ATKEYWORD_SYM
argument_list|,
name|QLatin1String
argument_list|(
literal|"page"
argument_list|)
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|testCombinator
parameter_list|()
block|{
return|return
name|test
argument_list|(
name|PLUS
argument_list|)
operator|||
name|test
argument_list|(
name|GREATER
argument_list|)
operator|||
name|test
argument_list|(
name|S
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|testProperty
parameter_list|()
block|{
return|return
name|test
argument_list|(
name|IDENT
argument_list|)
return|;
block|}
name|bool
name|testTerm
parameter_list|()
function_decl|;
specifier|inline
name|bool
name|testExpr
parameter_list|()
block|{
return|return
name|testTerm
argument_list|()
return|;
block|}
specifier|inline
name|bool
name|parseNextExpr
argument_list|(
name|QVector
operator|<
name|Value
operator|>
operator|*
name|values
argument_list|)
block|{
if|if
condition|(
operator|!
name|testExpr
argument_list|()
condition|)
return|return
name|recordError
argument_list|()
return|;
return|return
name|parseExpr
argument_list|(
name|values
argument_list|)
return|;
block|}
name|bool
name|testPrio
parameter_list|()
function_decl|;
specifier|inline
name|bool
name|testHexColor
parameter_list|()
block|{
return|return
name|test
argument_list|(
name|HASH
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|testFunction
parameter_list|()
block|{
return|return
name|test
argument_list|(
name|FUNCTION
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|parseNextFunction
parameter_list|(
name|QString
modifier|*
name|name
parameter_list|,
name|QString
modifier|*
name|args
parameter_list|)
block|{
if|if
condition|(
operator|!
name|testFunction
argument_list|()
condition|)
return|return
name|recordError
argument_list|()
return|;
return|return
name|parseFunction
argument_list|(
name|name
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|lookupElementName
argument_list|()
specifier|const
block|{
return|return
name|lookup
argument_list|()
operator|==
name|IDENT
operator|||
name|lookup
argument_list|()
operator|==
name|STAR
return|;
block|}
specifier|inline
name|void
name|skipSpace
parameter_list|()
block|{
while|while
condition|(
name|test
argument_list|(
name|S
argument_list|)
condition|)
block|{}
empty_stmt|;
block|}
specifier|inline
name|bool
name|hasNext
argument_list|()
specifier|const
block|{
return|return
name|index
operator|<
name|symbols
operator|.
name|count
argument_list|()
return|;
block|}
specifier|inline
name|TokenType
name|next
parameter_list|()
block|{
return|return
name|symbols
operator|.
name|at
argument_list|(
name|index
operator|++
argument_list|)
operator|.
name|token
return|;
block|}
name|bool
name|next
parameter_list|(
name|TokenType
name|t
parameter_list|)
function_decl|;
name|bool
name|test
parameter_list|(
name|TokenType
name|t
parameter_list|)
function_decl|;
specifier|inline
name|void
name|prev
parameter_list|()
block|{
name|index
operator|--
expr_stmt|;
block|}
specifier|inline
specifier|const
name|Symbol
operator|&
name|symbol
argument_list|()
specifier|const
block|{
return|return
name|symbols
operator|.
name|at
argument_list|(
name|index
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|inline
name|QString
name|lexem
argument_list|()
specifier|const
block|{
return|return
name|symbol
argument_list|()
operator|.
name|lexem
argument_list|()
return|;
block|}
name|QString
name|unquotedLexem
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|lexemUntil
parameter_list|(
name|TokenType
name|t
parameter_list|)
function_decl|;
name|bool
name|until
parameter_list|(
name|TokenType
name|target
parameter_list|,
name|TokenType
name|target2
init|=
name|NONE
parameter_list|)
function_decl|;
specifier|inline
name|TokenType
name|lookup
argument_list|()
specifier|const
block|{
return|return
operator|(
name|index
operator|-
literal|1
operator|)
operator|<
name|symbols
operator|.
name|count
argument_list|()
operator|?
name|symbols
operator|.
name|at
argument_list|(
name|index
operator|-
literal|1
argument_list|)
operator|.
name|token
operator|:
name|NONE
return|;
block|}
name|bool
name|testTokenAndEndsWith
parameter_list|(
name|TokenType
name|t
parameter_list|,
specifier|const
name|QLatin1String
modifier|&
name|str
parameter_list|)
function_decl|;
specifier|inline
name|bool
name|recordError
parameter_list|()
block|{
name|errorIndex
operator|=
name|index
expr_stmt|;
return|return
name|false
return|;
block|}
name|QVector
operator|<
name|Symbol
operator|>
name|symbols
expr_stmt|;
name|int
name|index
decl_stmt|;
name|int
name|errorIndex
decl_stmt|;
name|bool
name|hasEscapeSequences
decl_stmt|;
name|QString
name|sourcePath
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_comment
comment|// namespace QCss
end_comment
begin_decl_stmt
name|QT_END_NAMESPACE
name|Q_DECLARE_METATYPE
argument_list|(
name|QCss
operator|::
name|BackgroundData
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
name|QCss
operator|::
name|LengthData
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
name|QCss
operator|::
name|BorderData
argument_list|)
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CSSPARSER
end_comment
begin_endif
endif|#
directive|endif
end_endif
end_unit
