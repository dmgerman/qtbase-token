begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QGLYPHRUN_H
end_ifndef
begin_define
DECL|macro|QGLYPHRUN_H
define|#
directive|define
name|QGLYPHRUN_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qsharedpointer.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvector.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpoint.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qrawfont.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_RAWFONT
argument_list|)
end_if
begin_function
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
parameter_list|(
name|Gui
parameter_list|)
name|class
name|QGlyphRunPrivate
decl_stmt|;
name|class
name|Q_GUI_EXPORT
name|QGlyphRun
decl_stmt|{ public:     QGlyphRun(
end_function
begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|QGlyphRun
argument_list|(
specifier|const
name|QGlyphRun
operator|&
name|other
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
operator|~
name|QGlyphRun
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QRawFont
name|rawFont
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setRawFont
parameter_list|(
specifier|const
name|QRawFont
modifier|&
name|rawFont
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|QVector
operator|<
name|quint32
operator|>
name|glyphIndexes
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|void
name|setGlyphIndexes
argument_list|(
specifier|const
name|QVector
operator|<
name|quint32
operator|>
operator|&
name|glyphIndexes
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QVector
operator|<
name|QPointF
operator|>
name|positions
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|void
name|setPositions
argument_list|(
specifier|const
name|QVector
operator|<
name|QPointF
operator|>
operator|&
name|positions
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|clear
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
name|QGlyphRun
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QGlyphRun
operator|&
name|other
operator|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QGlyphRun
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QGlyphRun
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setOverline
parameter_list|(
name|bool
name|overline
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|overline
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setUnderline
parameter_list|(
name|bool
name|underline
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|underline
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setStrikeOut
parameter_list|(
name|bool
name|strikeOut
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|strikeOut
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|friend
name|class
name|QGlyphRunPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QTextLine
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QGlyphRun
name|operator
operator|+
operator|(
specifier|const
name|QGlyphRun
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QGlyphRun
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QGlyphRun
operator|&
name|other
operator|)
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|detach
parameter_list|()
function_decl|;
end_function_decl
begin_expr_stmt
name|QExplicitlySharedDataPointer
operator|<
name|QGlyphRunPrivate
operator|>
name|d
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|};
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_RAWFONT
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QGLYPHS_H
end_comment
end_unit
