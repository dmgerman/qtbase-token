begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QOpenGLYPHRUN_H
end_ifndef
begin_define
DECL|macro|QOpenGLYPHRUN_H
define|#
directive|define
name|QOpenGLYPHRUN_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qsharedpointer.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvector.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpoint.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qrawfont.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_RAWFONT
argument_list|)
end_if
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|variable|QGlyphRunPrivate
name|class
name|QGlyphRunPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QGlyphRun
block|{
name|public
label|:
enum|enum
name|GlyphRunFlag
block|{
name|Overline
init|=
literal|0x01
block|,
name|Underline
init|=
literal|0x02
block|,
name|StrikeOut
init|=
literal|0x04
block|,
name|RightToLeft
init|=
literal|0x08
block|,
name|SplitLigature
init|=
literal|0x10
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|GlyphRunFlags
argument_list|,
argument|GlyphRunFlag
argument_list|)
name|QGlyphRun
argument_list|()
expr_stmt|;
name|QGlyphRun
argument_list|(
specifier|const
name|QGlyphRun
operator|&
name|other
argument_list|)
expr_stmt|;
operator|~
name|QGlyphRun
argument_list|()
expr_stmt|;
name|void
name|swap
parameter_list|(
name|QGlyphRun
modifier|&
name|other
parameter_list|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
block|}
name|QRawFont
name|rawFont
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setRawFont
parameter_list|(
specifier|const
name|QRawFont
modifier|&
name|rawFont
parameter_list|)
function_decl|;
name|void
name|setRawData
parameter_list|(
specifier|const
name|quint32
modifier|*
name|glyphIndexArray
parameter_list|,
specifier|const
name|QPointF
modifier|*
name|glyphPositionArray
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|QVector
operator|<
name|quint32
operator|>
name|glyphIndexes
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setGlyphIndexes
argument_list|(
specifier|const
name|QVector
operator|<
name|quint32
operator|>
operator|&
name|glyphIndexes
argument_list|)
decl_stmt|;
name|QVector
operator|<
name|QPointF
operator|>
name|positions
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setPositions
argument_list|(
specifier|const
name|QVector
operator|<
name|QPointF
operator|>
operator|&
name|positions
argument_list|)
decl_stmt|;
name|void
name|clear
parameter_list|()
function_decl|;
name|QGlyphRun
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QGlyphRun
operator|&
name|other
operator|)
decl_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QGlyphRun
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QGlyphRun
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|other
operator|)
return|;
block|}
name|void
name|setOverline
parameter_list|(
name|bool
name|overline
parameter_list|)
function_decl|;
name|bool
name|overline
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setUnderline
parameter_list|(
name|bool
name|underline
parameter_list|)
function_decl|;
name|bool
name|underline
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setStrikeOut
parameter_list|(
name|bool
name|strikeOut
parameter_list|)
function_decl|;
name|bool
name|strikeOut
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setRightToLeft
parameter_list|(
name|bool
name|on
parameter_list|)
function_decl|;
name|bool
name|isRightToLeft
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setFlag
parameter_list|(
name|GlyphRunFlag
name|flag
parameter_list|,
name|bool
name|enabled
init|=
name|true
parameter_list|)
function_decl|;
name|void
name|setFlags
parameter_list|(
name|GlyphRunFlags
name|flags
parameter_list|)
function_decl|;
name|GlyphRunFlags
name|flags
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setBoundingRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|boundingRect
parameter_list|)
function_decl|;
name|QRectF
name|boundingRect
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isEmpty
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|friend
name|class
name|QGlyphRunPrivate
decl_stmt|;
name|friend
name|class
name|QTextLine
decl_stmt|;
name|QGlyphRun
name|operator
operator|+
operator|(
specifier|const
name|QGlyphRun
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
name|QGlyphRun
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QGlyphRun
operator|&
name|other
operator|)
expr_stmt|;
name|void
name|detach
parameter_list|()
function_decl|;
name|QExplicitlySharedDataPointer
operator|<
name|QGlyphRunPrivate
operator|>
name|d
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|Q_DECLARE_SHARED
argument_list|(
argument|QGlyphRun
argument_list|)
end_macro
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_RAWFONT
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QOpenGLYPHS_H
end_comment
end_unit
