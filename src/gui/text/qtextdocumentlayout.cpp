begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qtextdocumentlayout_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextdocument_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextimagehandler_p.h"
end_include
begin_include
include|#
directive|include
file|"qtexttable.h"
end_include
begin_include
include|#
directive|include
file|"qtextlist.h"
end_include
begin_include
include|#
directive|include
file|"qtextengine_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qcssutil_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qguiapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"qabstracttextdocumentlayout_p.h"
end_include
begin_include
include|#
directive|include
file|"qcssparser_p.h"
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_include
include|#
directive|include
file|<qrect.h>
end_include
begin_include
include|#
directive|include
file|<qpalette.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<qbasictimer.h>
end_include
begin_include
include|#
directive|include
file|"private/qfunctions_p.h"
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_comment
comment|// #define LAYOUT_DEBUG
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|LAYOUT_DEBUG
end_ifdef
begin_define
DECL|macro|LDEBUG
define|#
directive|define
name|LDEBUG
value|qDebug()
end_define
begin_define
DECL|macro|INC_INDENT
define|#
directive|define
name|INC_INDENT
value|debug_indent += "  "
end_define
begin_define
DECL|macro|DEC_INDENT
define|#
directive|define
name|DEC_INDENT
value|debug_indent = debug_indent.left(debug_indent.length()-2)
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|LDEBUG
define|#
directive|define
name|LDEBUG
value|if(0) qDebug()
end_define
begin_define
DECL|macro|INC_INDENT
define|#
directive|define
name|INC_INDENT
value|do {} while(0)
end_define
begin_define
DECL|macro|DEC_INDENT
define|#
directive|define
name|DEC_INDENT
value|do {} while(0)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|// ################ should probably add frameFormatChange notification!
end_comment
begin_struct_decl
struct_decl|struct
name|QTextLayoutStruct
struct_decl|;
end_struct_decl
begin_class
DECL|class|QTextFrameData
class|class
name|QTextFrameData
super|:
specifier|public
name|QTextFrameLayoutData
block|{
public|public:
name|QTextFrameData
parameter_list|()
constructor_decl|;
comment|// relative to parent frame
DECL|member|position
name|QFixedPoint
name|position
decl_stmt|;
DECL|member|size
name|QFixedSize
name|size
decl_stmt|;
comment|// contents starts at (margin+border/margin+border)
DECL|member|topMargin
name|QFixed
name|topMargin
decl_stmt|;
DECL|member|bottomMargin
name|QFixed
name|bottomMargin
decl_stmt|;
DECL|member|leftMargin
name|QFixed
name|leftMargin
decl_stmt|;
DECL|member|rightMargin
name|QFixed
name|rightMargin
decl_stmt|;
DECL|member|border
name|QFixed
name|border
decl_stmt|;
DECL|member|padding
name|QFixed
name|padding
decl_stmt|;
comment|// contents width includes padding (as we need to treat this on a per cell basis for tables)
DECL|member|contentsWidth
name|QFixed
name|contentsWidth
decl_stmt|;
DECL|member|contentsHeight
name|QFixed
name|contentsHeight
decl_stmt|;
DECL|member|oldContentsWidth
name|QFixed
name|oldContentsWidth
decl_stmt|;
comment|// accumulated margins
DECL|member|effectiveTopMargin
name|QFixed
name|effectiveTopMargin
decl_stmt|;
DECL|member|effectiveBottomMargin
name|QFixed
name|effectiveBottomMargin
decl_stmt|;
DECL|member|minimumWidth
name|QFixed
name|minimumWidth
decl_stmt|;
DECL|member|maximumWidth
name|QFixed
name|maximumWidth
decl_stmt|;
DECL|member|currentLayoutStruct
name|QTextLayoutStruct
modifier|*
name|currentLayoutStruct
decl_stmt|;
DECL|member|sizeDirty
name|bool
name|sizeDirty
decl_stmt|;
DECL|member|layoutDirty
name|bool
name|layoutDirty
decl_stmt|;
DECL|member|floats
name|QList
argument_list|<
name|QPointer
argument_list|<
name|QTextFrame
argument_list|>
argument_list|>
name|floats
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QTextFrameData
name|QTextFrameData
operator|::
name|QTextFrameData
parameter_list|()
member_init_list|:
name|maximumWidth
argument_list|(
name|QFIXED_MAX
argument_list|)
member_init_list|,
name|currentLayoutStruct
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sizeDirty
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|layoutDirty
argument_list|(
literal|true
argument_list|)
block|{ }
end_constructor
begin_struct
DECL|struct|QTextLayoutStruct
struct|struct
name|QTextLayoutStruct
block|{
DECL|function|QTextLayoutStruct
name|QTextLayoutStruct
parameter_list|()
member_init_list|:
name|maximumWidth
argument_list|(
name|QFIXED_MAX
argument_list|)
member_init_list|,
name|fullLayout
argument_list|(
literal|false
argument_list|)
block|{}
DECL|member|frame
name|QTextFrame
modifier|*
name|frame
decl_stmt|;
DECL|member|x_left
name|QFixed
name|x_left
decl_stmt|;
DECL|member|x_right
name|QFixed
name|x_right
decl_stmt|;
DECL|member|frameY
name|QFixed
name|frameY
decl_stmt|;
comment|// absolute y position of the current frame
DECL|member|y
name|QFixed
name|y
decl_stmt|;
comment|// always relative to the current frame
DECL|member|contentsWidth
name|QFixed
name|contentsWidth
decl_stmt|;
DECL|member|minimumWidth
name|QFixed
name|minimumWidth
decl_stmt|;
DECL|member|maximumWidth
name|QFixed
name|maximumWidth
decl_stmt|;
DECL|member|fullLayout
name|bool
name|fullLayout
decl_stmt|;
DECL|member|pendingFloats
name|QList
argument_list|<
name|QTextFrame
modifier|*
argument_list|>
name|pendingFloats
decl_stmt|;
DECL|member|pageHeight
name|QFixed
name|pageHeight
decl_stmt|;
DECL|member|pageBottom
name|QFixed
name|pageBottom
decl_stmt|;
DECL|member|pageTopMargin
name|QFixed
name|pageTopMargin
decl_stmt|;
DECL|member|pageBottomMargin
name|QFixed
name|pageBottomMargin
decl_stmt|;
DECL|member|updateRect
name|QRectF
name|updateRect
decl_stmt|;
DECL|member|updateRectForFloats
name|QRectF
name|updateRectForFloats
decl_stmt|;
DECL|function|addUpdateRectForFloat
specifier|inline
name|void
name|addUpdateRectForFloat
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
if|if
condition|(
name|updateRectForFloats
operator|.
name|isValid
argument_list|()
condition|)
name|updateRectForFloats
operator||=
name|rect
expr_stmt|;
else|else
name|updateRectForFloats
operator|=
name|rect
expr_stmt|;
block|}
DECL|function|absoluteY
specifier|inline
name|QFixed
name|absoluteY
parameter_list|()
specifier|const
block|{
return|return
name|frameY
operator|+
name|y
return|;
block|}
DECL|function|currentPage
specifier|inline
name|int
name|currentPage
parameter_list|()
specifier|const
block|{
return|return
name|pageHeight
operator|==
literal|0
condition|?
literal|0
else|:
operator|(
name|absoluteY
argument_list|()
operator|/
name|pageHeight
operator|)
operator|.
name|truncate
argument_list|()
return|;
block|}
DECL|function|newPage
specifier|inline
name|void
name|newPage
parameter_list|()
block|{
if|if
condition|(
name|pageHeight
operator|==
name|QFIXED_MAX
condition|)
return|return;
name|pageBottom
operator|+=
name|pageHeight
expr_stmt|;
name|y
operator|=
name|pageBottom
operator|-
name|pageHeight
operator|+
name|pageBottomMargin
operator|+
name|pageTopMargin
operator|-
name|frameY
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_class
DECL|class|QTextTableData
class|class
name|QTextTableData
super|:
specifier|public
name|QTextFrameData
block|{
public|public:
DECL|member|cellSpacing
DECL|member|cellPadding
name|QFixed
name|cellSpacing
decl_stmt|,
name|cellPadding
decl_stmt|;
DECL|member|deviceScale
name|qreal
name|deviceScale
decl_stmt|;
DECL|member|minWidths
name|QVector
argument_list|<
name|QFixed
argument_list|>
name|minWidths
decl_stmt|;
DECL|member|maxWidths
name|QVector
argument_list|<
name|QFixed
argument_list|>
name|maxWidths
decl_stmt|;
DECL|member|widths
name|QVector
argument_list|<
name|QFixed
argument_list|>
name|widths
decl_stmt|;
DECL|member|heights
name|QVector
argument_list|<
name|QFixed
argument_list|>
name|heights
decl_stmt|;
DECL|member|columnPositions
name|QVector
argument_list|<
name|QFixed
argument_list|>
name|columnPositions
decl_stmt|;
DECL|member|rowPositions
name|QVector
argument_list|<
name|QFixed
argument_list|>
name|rowPositions
decl_stmt|;
DECL|member|cellVerticalOffsets
name|QVector
argument_list|<
name|QFixed
argument_list|>
name|cellVerticalOffsets
decl_stmt|;
DECL|member|headerHeight
name|QFixed
name|headerHeight
decl_stmt|;
comment|// maps from cell index (row + col * rowCount) to child frames belonging to
comment|// the specific cell
DECL|member|childFrameMap
name|QMultiHash
argument_list|<
name|int
argument_list|,
name|QTextFrame
modifier|*
argument_list|>
name|childFrameMap
decl_stmt|;
DECL|function|cellWidth
specifier|inline
name|QFixed
name|cellWidth
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|colspan
parameter_list|)
specifier|const
block|{
return|return
name|columnPositions
operator|.
name|at
argument_list|(
name|column
operator|+
name|colspan
operator|-
literal|1
argument_list|)
operator|+
name|widths
operator|.
name|at
argument_list|(
name|column
operator|+
name|colspan
operator|-
literal|1
argument_list|)
operator|-
name|columnPositions
operator|.
name|at
argument_list|(
name|column
argument_list|)
return|;
block|}
DECL|function|calcRowPosition
specifier|inline
name|void
name|calcRowPosition
parameter_list|(
name|int
name|row
parameter_list|)
block|{
if|if
condition|(
name|row
operator|>
literal|0
condition|)
name|rowPositions
index|[
name|row
index|]
operator|=
name|rowPositions
operator|.
name|at
argument_list|(
name|row
operator|-
literal|1
argument_list|)
operator|+
name|heights
operator|.
name|at
argument_list|(
name|row
operator|-
literal|1
argument_list|)
operator|+
name|border
operator|+
name|cellSpacing
operator|+
name|border
expr_stmt|;
block|}
name|QRectF
name|cellRect
parameter_list|(
specifier|const
name|QTextTableCell
modifier|&
name|cell
parameter_list|)
specifier|const
function_decl|;
DECL|function|paddingProperty
specifier|inline
name|QFixed
name|paddingProperty
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|format
parameter_list|,
name|QTextFormat
operator|::
name|Property
name|property
parameter_list|)
specifier|const
block|{
name|QVariant
name|v
init|=
name|format
operator|.
name|property
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|isNull
argument_list|()
condition|)
block|{
return|return
name|cellPadding
return|;
block|}
else|else
block|{
name|Q_ASSERT
argument_list|(
name|v
operator|.
name|userType
argument_list|()
operator|==
name|QVariant
operator|::
name|Double
operator|||
name|v
operator|.
name|userType
argument_list|()
operator|==
name|QMetaType
operator|::
name|Float
argument_list|)
expr_stmt|;
return|return
name|QFixed
operator|::
name|fromReal
argument_list|(
name|v
operator|.
name|toReal
argument_list|()
operator|*
name|deviceScale
argument_list|)
return|;
block|}
block|}
DECL|function|topPadding
specifier|inline
name|QFixed
name|topPadding
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|format
parameter_list|)
specifier|const
block|{
return|return
name|paddingProperty
argument_list|(
name|format
argument_list|,
name|QTextFormat
operator|::
name|TableCellTopPadding
argument_list|)
return|;
block|}
DECL|function|bottomPadding
specifier|inline
name|QFixed
name|bottomPadding
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|format
parameter_list|)
specifier|const
block|{
return|return
name|paddingProperty
argument_list|(
name|format
argument_list|,
name|QTextFormat
operator|::
name|TableCellBottomPadding
argument_list|)
return|;
block|}
DECL|function|leftPadding
specifier|inline
name|QFixed
name|leftPadding
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|format
parameter_list|)
specifier|const
block|{
return|return
name|paddingProperty
argument_list|(
name|format
argument_list|,
name|QTextFormat
operator|::
name|TableCellLeftPadding
argument_list|)
return|;
block|}
DECL|function|rightPadding
specifier|inline
name|QFixed
name|rightPadding
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|format
parameter_list|)
specifier|const
block|{
return|return
name|paddingProperty
argument_list|(
name|format
argument_list|,
name|QTextFormat
operator|::
name|TableCellRightPadding
argument_list|)
return|;
block|}
DECL|function|cellPosition
specifier|inline
name|QFixedPoint
name|cellPosition
parameter_list|(
specifier|const
name|QTextTableCell
modifier|&
name|cell
parameter_list|)
specifier|const
block|{
specifier|const
name|QTextFormat
name|fmt
init|=
name|cell
operator|.
name|format
argument_list|()
decl_stmt|;
return|return
name|cellPosition
argument_list|(
name|cell
operator|.
name|row
argument_list|()
argument_list|,
name|cell
operator|.
name|column
argument_list|()
argument_list|)
operator|+
name|QFixedPoint
argument_list|(
name|leftPadding
argument_list|(
name|fmt
argument_list|)
argument_list|,
name|topPadding
argument_list|(
name|fmt
argument_list|)
argument_list|)
return|;
block|}
name|void
name|updateTableSize
parameter_list|()
function_decl|;
private|private:
DECL|function|cellPosition
specifier|inline
name|QFixedPoint
name|cellPosition
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
specifier|const
block|{
return|return
name|QFixedPoint
argument_list|(
name|columnPositions
operator|.
name|at
argument_list|(
name|col
argument_list|)
argument_list|,
name|rowPositions
operator|.
name|at
argument_list|(
name|row
argument_list|)
operator|+
name|cellVerticalOffsets
operator|.
name|at
argument_list|(
name|col
operator|+
name|row
operator|*
name|widths
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|createData
specifier|static
name|QTextFrameData
modifier|*
name|createData
parameter_list|(
name|QTextFrame
modifier|*
name|f
parameter_list|)
block|{
name|QTextFrameData
modifier|*
name|data
decl_stmt|;
if|if
condition|(
name|qobject_cast
argument_list|<
name|QTextTable
operator|*
argument_list|>
argument_list|(
name|f
argument_list|)
condition|)
name|data
operator|=
operator|new
name|QTextTableData
expr_stmt|;
else|else
name|data
operator|=
operator|new
name|QTextFrameData
expr_stmt|;
name|f
operator|->
name|setLayoutData
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
end_function
begin_function
DECL|function|data
specifier|static
specifier|inline
name|QTextFrameData
modifier|*
name|data
parameter_list|(
name|QTextFrame
modifier|*
name|f
parameter_list|)
block|{
name|QTextFrameData
modifier|*
name|data
init|=
cast|static_cast
argument_list|<
name|QTextFrameData
operator|*
argument_list|>
argument_list|(
name|f
operator|->
name|layoutData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
condition|)
name|data
operator|=
name|createData
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
end_function
begin_function
DECL|function|isFrameFromInlineObject
specifier|static
name|bool
name|isFrameFromInlineObject
parameter_list|(
name|QTextFrame
modifier|*
name|f
parameter_list|)
block|{
return|return
name|f
operator|->
name|firstPosition
argument_list|()
operator|>
name|f
operator|->
name|lastPosition
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|updateTableSize
name|void
name|QTextTableData
operator|::
name|updateTableSize
parameter_list|()
block|{
specifier|const
name|QFixed
name|effectiveTopMargin
init|=
name|this
operator|->
name|topMargin
operator|+
name|border
operator|+
name|padding
decl_stmt|;
specifier|const
name|QFixed
name|effectiveBottomMargin
init|=
name|this
operator|->
name|bottomMargin
operator|+
name|border
operator|+
name|padding
decl_stmt|;
specifier|const
name|QFixed
name|effectiveLeftMargin
init|=
name|this
operator|->
name|leftMargin
operator|+
name|border
operator|+
name|padding
decl_stmt|;
specifier|const
name|QFixed
name|effectiveRightMargin
init|=
name|this
operator|->
name|rightMargin
operator|+
name|border
operator|+
name|padding
decl_stmt|;
name|size
operator|.
name|height
operator|=
name|contentsHeight
operator|==
operator|-
literal|1
condition|?
name|rowPositions
operator|.
name|last
argument_list|()
operator|+
name|heights
operator|.
name|last
argument_list|()
operator|+
name|padding
operator|+
name|border
operator|+
name|cellSpacing
operator|+
name|effectiveBottomMargin
else|:
name|effectiveTopMargin
operator|+
name|contentsHeight
operator|+
name|effectiveBottomMargin
expr_stmt|;
name|size
operator|.
name|width
operator|=
name|effectiveLeftMargin
operator|+
name|contentsWidth
operator|+
name|effectiveRightMargin
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cellRect
name|QRectF
name|QTextTableData
operator|::
name|cellRect
parameter_list|(
specifier|const
name|QTextTableCell
modifier|&
name|cell
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|row
init|=
name|cell
operator|.
name|row
argument_list|()
decl_stmt|;
specifier|const
name|int
name|rowSpan
init|=
name|cell
operator|.
name|rowSpan
argument_list|()
decl_stmt|;
specifier|const
name|int
name|column
init|=
name|cell
operator|.
name|column
argument_list|()
decl_stmt|;
specifier|const
name|int
name|colSpan
init|=
name|cell
operator|.
name|columnSpan
argument_list|()
decl_stmt|;
return|return
name|QRectF
argument_list|(
name|columnPositions
operator|.
name|at
argument_list|(
name|column
argument_list|)
operator|.
name|toReal
argument_list|()
argument_list|,
name|rowPositions
operator|.
name|at
argument_list|(
name|row
argument_list|)
operator|.
name|toReal
argument_list|()
argument_list|,
operator|(
name|columnPositions
operator|.
name|at
argument_list|(
name|column
operator|+
name|colSpan
operator|-
literal|1
argument_list|)
operator|+
name|widths
operator|.
name|at
argument_list|(
name|column
operator|+
name|colSpan
operator|-
literal|1
argument_list|)
operator|-
name|columnPositions
operator|.
name|at
argument_list|(
name|column
argument_list|)
operator|)
operator|.
name|toReal
argument_list|()
argument_list|,
operator|(
name|rowPositions
operator|.
name|at
argument_list|(
name|row
operator|+
name|rowSpan
operator|-
literal|1
argument_list|)
operator|+
name|heights
operator|.
name|at
argument_list|(
name|row
operator|+
name|rowSpan
operator|-
literal|1
argument_list|)
operator|-
name|rowPositions
operator|.
name|at
argument_list|(
name|row
argument_list|)
operator|)
operator|.
name|toReal
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isEmptyBlockBeforeTable
specifier|static
specifier|inline
name|bool
name|isEmptyBlockBeforeTable
parameter_list|(
specifier|const
name|QTextBlock
modifier|&
name|block
parameter_list|,
specifier|const
name|QTextBlockFormat
modifier|&
name|format
parameter_list|,
specifier|const
name|QTextFrame
operator|::
name|Iterator
modifier|&
name|nextIt
parameter_list|)
block|{
return|return
operator|!
name|nextIt
operator|.
name|atEnd
argument_list|()
operator|&&
name|qobject_cast
argument_list|<
name|QTextTable
operator|*
argument_list|>
argument_list|(
name|nextIt
operator|.
name|currentFrame
argument_list|()
argument_list|)
operator|&&
name|block
operator|.
name|isValid
argument_list|()
operator|&&
name|block
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
operator|!
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BlockTrailingHorizontalRulerWidth
argument_list|)
operator|&&
operator|!
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BackgroundBrush
argument_list|)
operator|&&
name|nextIt
operator|.
name|currentFrame
argument_list|()
operator|->
name|firstPosition
argument_list|()
operator|==
name|block
operator|.
name|position
argument_list|()
operator|+
literal|1
return|;
block|}
end_function
begin_function
DECL|function|isEmptyBlockBeforeTable
specifier|static
specifier|inline
name|bool
name|isEmptyBlockBeforeTable
parameter_list|(
name|QTextFrame
operator|::
name|Iterator
name|it
parameter_list|)
block|{
name|QTextFrame
operator|::
name|Iterator
name|next
init|=
name|it
decl_stmt|;
operator|++
name|next
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|currentFrame
argument_list|()
condition|)
return|return
literal|false
return|;
name|QTextBlock
name|block
init|=
name|it
operator|.
name|currentBlock
argument_list|()
decl_stmt|;
return|return
name|isEmptyBlockBeforeTable
argument_list|(
name|block
argument_list|,
name|block
operator|.
name|blockFormat
argument_list|()
argument_list|,
name|next
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isEmptyBlockAfterTable
specifier|static
specifier|inline
name|bool
name|isEmptyBlockAfterTable
parameter_list|(
specifier|const
name|QTextBlock
modifier|&
name|block
parameter_list|,
specifier|const
name|QTextFrame
modifier|*
name|previousFrame
parameter_list|)
block|{
return|return
name|qobject_cast
argument_list|<
specifier|const
name|QTextTable
operator|*
argument_list|>
argument_list|(
name|previousFrame
argument_list|)
operator|&&
name|block
operator|.
name|isValid
argument_list|()
operator|&&
name|block
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|previousFrame
operator|->
name|lastPosition
argument_list|()
operator|==
name|block
operator|.
name|position
argument_list|()
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|isLineSeparatorBlockAfterTable
specifier|static
specifier|inline
name|bool
name|isLineSeparatorBlockAfterTable
parameter_list|(
specifier|const
name|QTextBlock
modifier|&
name|block
parameter_list|,
specifier|const
name|QTextFrame
modifier|*
name|previousFrame
parameter_list|)
block|{
return|return
name|qobject_cast
argument_list|<
specifier|const
name|QTextTable
operator|*
argument_list|>
argument_list|(
name|previousFrame
argument_list|)
operator|&&
name|block
operator|.
name|isValid
argument_list|()
operator|&&
name|block
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|&&
name|block
operator|.
name|text
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QChar
operator|::
name|LineSeparator
operator|&&
name|previousFrame
operator|->
name|lastPosition
argument_list|()
operator|==
name|block
operator|.
name|position
argument_list|()
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*  Optimization strategies:  HTML layout:  * Distinguish between normal and special flow. For normal flow the condition:   y1> y2 holds for all blocks with b1.key()> b2.key(). * Special flow is: floats, table cells  * Normal flow within table cells. Tables (not cells) are part of the normal flow.   * If blocks grows/shrinks in height and extends over whole page width at the end, move following blocks. * If height doesn't change, no need to do anything  Table cells:  * If minWidth of cell changes, recalculate table width, relayout if needed. * What about maxWidth when doing auto layout?  Floats: * need fixed or proportional width, otherwise don't float! * On width/height change relayout surrounding paragraphs.  Document width change: * full relayout needed   Float handling:  * Floats are specified by a special format object. * currently only floating images are implemented.  */
end_comment
begin_comment
comment|/*     On the table layouting:     +---[ table border ]-------------------------    |      [ cell spacing ]    |  +------[ cell border ]-----+  +--------    |  |                          |  |    |  |    |  |    |  |    |     rowPositions[i] and columnPositions[i] point at the cell content    position. So for example the left border is drawn at    x = columnPositions[i] - fd->border and similar for y.  */
end_comment
begin_struct
DECL|struct|QCheckPoint
struct|struct
name|QCheckPoint
block|{
DECL|member|y
name|QFixed
name|y
decl_stmt|;
DECL|member|frameY
name|QFixed
name|frameY
decl_stmt|;
comment|// absolute y position of the current frame
DECL|member|positionInFrame
name|int
name|positionInFrame
decl_stmt|;
DECL|member|minimumWidth
name|QFixed
name|minimumWidth
decl_stmt|;
DECL|member|maximumWidth
name|QFixed
name|maximumWidth
decl_stmt|;
DECL|member|contentsWidth
name|QFixed
name|contentsWidth
decl_stmt|;
block|}
struct|;
end_struct
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QCheckPoint
argument_list|,
name|Q_PRIMITIVE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|operator <
name|Q_STATIC_GLOBAL_OPERATOR
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|QCheckPoint
modifier|&
name|checkPoint
parameter_list|,
name|QFixed
name|y
parameter_list|)
block|{
return|return
name|checkPoint
operator|.
name|y
operator|<
name|y
return|;
block|}
end_function
begin_function
DECL|function|operator <
name|Q_STATIC_GLOBAL_OPERATOR
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|QCheckPoint
modifier|&
name|checkPoint
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
return|return
name|checkPoint
operator|.
name|positionInFrame
operator|<
name|pos
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
operator|&&
name|_MSC_VER
operator|<
literal|1600
end_if
begin_comment
comment|//The STL implementation of MSVC 2008 requires the definitions
end_comment
begin_function
DECL|function|operator <
name|Q_STATIC_GLOBAL_OPERATOR
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|QCheckPoint
modifier|&
name|checkPoint1
parameter_list|,
specifier|const
name|QCheckPoint
modifier|&
name|checkPoint2
parameter_list|)
block|{
return|return
name|checkPoint1
operator|.
name|y
operator|<
name|checkPoint2
operator|.
name|y
return|;
block|}
end_function
begin_function
DECL|function|operator <
name|Q_STATIC_GLOBAL_OPERATOR
name|bool
name|operator
name|<
parameter_list|(
name|QFixed
name|y
parameter_list|,
specifier|const
name|QCheckPoint
modifier|&
name|checkPoint
parameter_list|)
block|{
return|return
name|y
operator|<
name|checkPoint
operator|.
name|y
return|;
block|}
end_function
begin_function
DECL|function|operator <
name|Q_STATIC_GLOBAL_OPERATOR
name|bool
name|operator
name|<
parameter_list|(
name|int
name|pos
parameter_list|,
specifier|const
name|QCheckPoint
modifier|&
name|checkPoint
parameter_list|)
block|{
return|return
name|pos
operator|<
name|checkPoint
operator|.
name|positionInFrame
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|fillBackground
specifier|static
name|void
name|fillBackground
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
name|QBrush
name|brush
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|origin
parameter_list|,
name|QRectF
name|gradientRect
init|=
name|QRectF
argument_list|()
parameter_list|)
block|{
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
if|if
condition|(
name|brush
operator|.
name|style
argument_list|()
operator|>=
name|Qt
operator|::
name|LinearGradientPattern
operator|&&
name|brush
operator|.
name|style
argument_list|()
operator|<=
name|Qt
operator|::
name|ConicalGradientPattern
condition|)
block|{
if|if
condition|(
operator|!
name|gradientRect
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QTransform
name|m
decl_stmt|;
name|m
operator|.
name|translate
argument_list|(
name|gradientRect
operator|.
name|left
argument_list|()
argument_list|,
name|gradientRect
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|scale
argument_list|(
name|gradientRect
operator|.
name|width
argument_list|()
argument_list|,
name|gradientRect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|brush
operator|.
name|setTransform
argument_list|(
name|m
argument_list|)
expr_stmt|;
cast|const_cast
argument_list|<
name|QGradient
operator|*
argument_list|>
argument_list|(
name|brush
operator|.
name|gradient
argument_list|()
argument_list|)
operator|->
name|setCoordinateMode
argument_list|(
name|QGradient
operator|::
name|LogicalMode
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|p
operator|->
name|setBrushOrigin
argument_list|(
name|origin
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|,
name|brush
argument_list|)
expr_stmt|;
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QTextDocumentLayoutPrivate
class|class
name|QTextDocumentLayoutPrivate
super|:
specifier|public
name|QAbstractTextDocumentLayoutPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QTextDocumentLayout
parameter_list|)
specifier|public
private|:
name|QTextDocumentLayoutPrivate
parameter_list|()
constructor_decl|;
DECL|member|wordWrapMode
name|QTextOption
operator|::
name|WrapMode
name|wordWrapMode
decl_stmt|;
ifdef|#
directive|ifdef
name|LAYOUT_DEBUG
DECL|member|debug_indent
specifier|mutable
name|QString
name|debug_indent
decl_stmt|;
endif|#
directive|endif
DECL|member|fixedColumnWidth
name|int
name|fixedColumnWidth
decl_stmt|;
DECL|member|cursorWidth
name|int
name|cursorWidth
decl_stmt|;
DECL|member|lastReportedSize
name|QSizeF
name|lastReportedSize
decl_stmt|;
DECL|member|viewportRect
name|QRectF
name|viewportRect
decl_stmt|;
DECL|member|clipRect
name|QRectF
name|clipRect
decl_stmt|;
DECL|member|currentLazyLayoutPosition
specifier|mutable
name|int
name|currentLazyLayoutPosition
decl_stmt|;
DECL|member|lazyLayoutStepSize
specifier|mutable
name|int
name|lazyLayoutStepSize
decl_stmt|;
DECL|member|layoutTimer
name|QBasicTimer
name|layoutTimer
decl_stmt|;
DECL|member|sizeChangedTimer
specifier|mutable
name|QBasicTimer
name|sizeChangedTimer
decl_stmt|;
name|uint
name|showLayoutProgress
range|:
literal|1
decl_stmt|;
name|uint
name|insideDocumentChange
range|:
literal|1
decl_stmt|;
DECL|member|lastPageCount
name|int
name|lastPageCount
decl_stmt|;
DECL|member|idealWidth
name|qreal
name|idealWidth
decl_stmt|;
DECL|member|contentHasAlignment
name|bool
name|contentHasAlignment
decl_stmt|;
name|QFixed
name|blockIndent
parameter_list|(
specifier|const
name|QTextBlockFormat
modifier|&
name|blockFormat
parameter_list|)
specifier|const
function_decl|;
name|void
name|drawFrame
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|offset
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
modifier|&
name|context
parameter_list|,
name|QTextFrame
modifier|*
name|f
parameter_list|)
specifier|const
function_decl|;
name|void
name|drawFlow
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|offset
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
modifier|&
name|context
parameter_list|,
name|QTextFrame
operator|::
name|Iterator
name|it
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QTextFrame
modifier|*
argument_list|>
modifier|&
name|floats
parameter_list|,
name|QTextBlock
modifier|*
name|cursorBlockNeedingRepaint
parameter_list|)
specifier|const
function_decl|;
name|void
name|drawBlock
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|offset
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
modifier|&
name|context
parameter_list|,
name|QTextBlock
name|bl
parameter_list|,
name|bool
name|inRootFrame
parameter_list|)
specifier|const
function_decl|;
name|void
name|drawListItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|offset
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
modifier|&
name|context
parameter_list|,
name|QTextBlock
name|bl
parameter_list|,
specifier|const
name|QTextCharFormat
modifier|*
name|selectionFormat
parameter_list|)
specifier|const
function_decl|;
name|void
name|drawTableCell
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|cellRect
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
modifier|&
name|cell_context
parameter_list|,
name|QTextTable
modifier|*
name|table
parameter_list|,
name|QTextTableData
modifier|*
name|td
parameter_list|,
name|int
name|r
parameter_list|,
name|int
name|c
parameter_list|,
name|QTextBlock
modifier|*
name|cursorBlockNeedingRepaint
parameter_list|,
name|QPointF
modifier|*
name|cursorBlockOffset
parameter_list|)
specifier|const
function_decl|;
name|void
name|drawBorder
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
name|qreal
name|topMargin
parameter_list|,
name|qreal
name|bottomMargin
parameter_list|,
name|qreal
name|border
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|,
name|QTextFrameFormat
operator|::
name|BorderStyle
name|style
parameter_list|)
specifier|const
function_decl|;
name|void
name|drawFrameDecoration
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
name|QTextFrame
modifier|*
name|frame
parameter_list|,
name|QTextFrameData
modifier|*
name|fd
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|clip
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
specifier|const
function_decl|;
DECL|enum|HitPoint
enum|enum
name|HitPoint
block|{
DECL|enumerator|PointBefore
name|PointBefore
block|,
DECL|enumerator|PointAfter
name|PointAfter
block|,
DECL|enumerator|PointInside
name|PointInside
block|,
DECL|enumerator|PointExact
name|PointExact
block|}
enum|;
name|HitPoint
name|hitTest
parameter_list|(
name|QTextFrame
modifier|*
name|frame
parameter_list|,
specifier|const
name|QFixedPoint
modifier|&
name|point
parameter_list|,
name|int
modifier|*
name|position
parameter_list|,
name|QTextLayout
modifier|*
modifier|*
name|l
parameter_list|,
name|Qt
operator|::
name|HitTestAccuracy
name|accuracy
parameter_list|)
specifier|const
function_decl|;
name|HitPoint
name|hitTest
parameter_list|(
name|QTextFrame
operator|::
name|Iterator
name|it
parameter_list|,
name|HitPoint
name|hit
parameter_list|,
specifier|const
name|QFixedPoint
modifier|&
name|p
parameter_list|,
name|int
modifier|*
name|position
parameter_list|,
name|QTextLayout
modifier|*
modifier|*
name|l
parameter_list|,
name|Qt
operator|::
name|HitTestAccuracy
name|accuracy
parameter_list|)
specifier|const
function_decl|;
name|HitPoint
name|hitTest
parameter_list|(
name|QTextTable
modifier|*
name|table
parameter_list|,
specifier|const
name|QFixedPoint
modifier|&
name|point
parameter_list|,
name|int
modifier|*
name|position
parameter_list|,
name|QTextLayout
modifier|*
modifier|*
name|l
parameter_list|,
name|Qt
operator|::
name|HitTestAccuracy
name|accuracy
parameter_list|)
specifier|const
function_decl|;
name|HitPoint
name|hitTest
parameter_list|(
name|QTextBlock
name|bl
parameter_list|,
specifier|const
name|QFixedPoint
modifier|&
name|point
parameter_list|,
name|int
modifier|*
name|position
parameter_list|,
name|QTextLayout
modifier|*
modifier|*
name|l
parameter_list|,
name|Qt
operator|::
name|HitTestAccuracy
name|accuracy
parameter_list|)
specifier|const
function_decl|;
name|QTextLayoutStruct
name|layoutCell
parameter_list|(
name|QTextTable
modifier|*
name|t
parameter_list|,
specifier|const
name|QTextTableCell
modifier|&
name|cell
parameter_list|,
name|QFixed
name|width
parameter_list|,
name|int
name|layoutFrom
parameter_list|,
name|int
name|layoutTo
parameter_list|,
name|QTextTableData
modifier|*
name|tableData
parameter_list|,
name|QFixed
name|absoluteTableY
parameter_list|,
name|bool
name|withPageBreaks
parameter_list|)
function_decl|;
name|void
name|setCellPosition
parameter_list|(
name|QTextTable
modifier|*
name|t
parameter_list|,
specifier|const
name|QTextTableCell
modifier|&
name|cell
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
function_decl|;
name|QRectF
name|layoutTable
parameter_list|(
name|QTextTable
modifier|*
name|t
parameter_list|,
name|int
name|layoutFrom
parameter_list|,
name|int
name|layoutTo
parameter_list|,
name|QFixed
name|parentY
parameter_list|)
function_decl|;
name|void
name|positionFloat
parameter_list|(
name|QTextFrame
modifier|*
name|frame
parameter_list|,
name|QTextLine
modifier|*
name|currentLine
init|=
literal|0
parameter_list|)
function_decl|;
comment|// calls the next one
name|QRectF
name|layoutFrame
parameter_list|(
name|QTextFrame
modifier|*
name|f
parameter_list|,
name|int
name|layoutFrom
parameter_list|,
name|int
name|layoutTo
parameter_list|,
name|QFixed
name|parentY
init|=
literal|0
parameter_list|)
function_decl|;
name|QRectF
name|layoutFrame
parameter_list|(
name|QTextFrame
modifier|*
name|f
parameter_list|,
name|int
name|layoutFrom
parameter_list|,
name|int
name|layoutTo
parameter_list|,
name|QFixed
name|frameWidth
parameter_list|,
name|QFixed
name|frameHeight
parameter_list|,
name|QFixed
name|parentY
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|layoutBlock
parameter_list|(
specifier|const
name|QTextBlock
modifier|&
name|bl
parameter_list|,
name|int
name|blockPosition
parameter_list|,
specifier|const
name|QTextBlockFormat
modifier|&
name|blockFormat
parameter_list|,
name|QTextLayoutStruct
modifier|*
name|layoutStruct
parameter_list|,
name|int
name|layoutFrom
parameter_list|,
name|int
name|layoutTo
parameter_list|,
specifier|const
name|QTextBlockFormat
modifier|*
name|previousBlockFormat
parameter_list|)
function_decl|;
name|void
name|layoutFlow
parameter_list|(
name|QTextFrame
operator|::
name|Iterator
name|it
parameter_list|,
name|QTextLayoutStruct
modifier|*
name|layoutStruct
parameter_list|,
name|int
name|layoutFrom
parameter_list|,
name|int
name|layoutTo
parameter_list|,
name|QFixed
name|width
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|pageBreakInsideTable
parameter_list|(
name|QTextTable
modifier|*
name|table
parameter_list|,
name|QTextLayoutStruct
modifier|*
name|layoutStruct
parameter_list|)
function_decl|;
name|void
name|floatMargins
parameter_list|(
specifier|const
name|QFixed
modifier|&
name|y
parameter_list|,
specifier|const
name|QTextLayoutStruct
modifier|*
name|layoutStruct
parameter_list|,
name|QFixed
modifier|*
name|left
parameter_list|,
name|QFixed
modifier|*
name|right
parameter_list|)
specifier|const
function_decl|;
name|QFixed
name|findY
parameter_list|(
name|QFixed
name|yFrom
parameter_list|,
specifier|const
name|QTextLayoutStruct
modifier|*
name|layoutStruct
parameter_list|,
name|QFixed
name|requiredWidth
parameter_list|)
specifier|const
function_decl|;
DECL|member|checkPoints
name|QVector
argument_list|<
name|QCheckPoint
argument_list|>
name|checkPoints
decl_stmt|;
name|QTextFrame
operator|::
name|Iterator
name|frameIteratorForYPosition
parameter_list|(
name|QFixed
name|y
parameter_list|)
specifier|const
function_decl|;
name|QTextFrame
operator|::
name|Iterator
name|frameIteratorForTextPosition
parameter_list|(
name|int
name|position
parameter_list|)
specifier|const
function_decl|;
name|void
name|ensureLayouted
parameter_list|(
name|QFixed
name|y
parameter_list|)
specifier|const
function_decl|;
name|void
name|ensureLayoutedByPosition
parameter_list|(
name|int
name|position
parameter_list|)
specifier|const
function_decl|;
DECL|function|ensureLayoutFinished
specifier|inline
name|void
name|ensureLayoutFinished
parameter_list|()
specifier|const
block|{
name|ensureLayoutedByPosition
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
block|}
name|void
name|layoutStep
parameter_list|()
specifier|const
function_decl|;
name|QRectF
name|frameBoundingRectInternal
parameter_list|(
name|QTextFrame
modifier|*
name|frame
parameter_list|)
specifier|const
function_decl|;
name|qreal
name|scaleToDevice
parameter_list|(
name|qreal
name|value
parameter_list|)
specifier|const
function_decl|;
name|QFixed
name|scaleToDevice
parameter_list|(
name|QFixed
name|value
parameter_list|)
specifier|const
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|QTextDocumentLayoutPrivate
name|QTextDocumentLayoutPrivate
operator|::
name|QTextDocumentLayoutPrivate
parameter_list|()
member_init_list|:
name|fixedColumnWidth
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|cursorWidth
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|currentLazyLayoutPosition
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|lazyLayoutStepSize
argument_list|(
literal|1000
argument_list|)
member_init_list|,
name|lastPageCount
argument_list|(
operator|-
literal|1
argument_list|)
block|{
name|showLayoutProgress
operator|=
literal|true
expr_stmt|;
name|insideDocumentChange
operator|=
literal|false
expr_stmt|;
name|idealWidth
operator|=
literal|0
expr_stmt|;
name|contentHasAlignment
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|frameIteratorForYPosition
name|QTextFrame
operator|::
name|Iterator
name|QTextDocumentLayoutPrivate
operator|::
name|frameIteratorForYPosition
parameter_list|(
name|QFixed
name|y
parameter_list|)
specifier|const
block|{
name|QTextFrame
modifier|*
name|rootFrame
init|=
name|document
operator|->
name|rootFrame
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkPoints
operator|.
name|isEmpty
argument_list|()
operator|||
name|y
argument_list|<
literal|0
operator|||
name|y
argument_list|>
name|data
argument_list|(
name|rootFrame
argument_list|)
operator|->
name|size
operator|.
name|height
condition|)
return|return
name|rootFrame
operator|->
name|begin
argument_list|()
return|;
name|QVector
argument_list|<
name|QCheckPoint
argument_list|>
operator|::
name|ConstIterator
name|checkPoint
init|=
name|std
operator|::
name|lower_bound
argument_list|(
name|checkPoints
operator|.
name|begin
argument_list|()
argument_list|,
name|checkPoints
operator|.
name|end
argument_list|()
argument_list|,
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkPoint
operator|==
name|checkPoints
operator|.
name|end
argument_list|()
condition|)
return|return
name|rootFrame
operator|->
name|begin
argument_list|()
return|;
if|if
condition|(
name|checkPoint
operator|!=
name|checkPoints
operator|.
name|begin
argument_list|()
condition|)
operator|--
name|checkPoint
expr_stmt|;
specifier|const
name|int
name|position
init|=
name|rootFrame
operator|->
name|firstPosition
argument_list|()
operator|+
name|checkPoint
operator|->
name|positionInFrame
decl_stmt|;
return|return
name|frameIteratorForTextPosition
argument_list|(
name|position
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|frameIteratorForTextPosition
name|QTextFrame
operator|::
name|Iterator
name|QTextDocumentLayoutPrivate
operator|::
name|frameIteratorForTextPosition
parameter_list|(
name|int
name|position
parameter_list|)
specifier|const
block|{
name|QTextFrame
modifier|*
name|rootFrame
init|=
name|docPrivate
operator|->
name|rootFrame
argument_list|()
decl_stmt|;
specifier|const
name|QTextDocumentPrivate
operator|::
name|BlockMap
modifier|&
name|map
init|=
name|docPrivate
operator|->
name|blockMap
argument_list|()
decl_stmt|;
specifier|const
name|int
name|begin
init|=
name|map
operator|.
name|findNode
argument_list|(
name|rootFrame
operator|->
name|firstPosition
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|end
init|=
name|map
operator|.
name|findNode
argument_list|(
name|rootFrame
operator|->
name|lastPosition
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|int
name|block
init|=
name|map
operator|.
name|findNode
argument_list|(
name|position
argument_list|)
decl_stmt|;
specifier|const
name|int
name|blockPos
init|=
name|map
operator|.
name|position
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|QTextFrame
operator|::
name|iterator
name|it
argument_list|(
name|rootFrame
argument_list|,
name|block
argument_list|,
name|begin
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|QTextFrame
modifier|*
name|containingFrame
init|=
name|docPrivate
operator|->
name|frameAt
argument_list|(
name|blockPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|containingFrame
operator|!=
name|rootFrame
condition|)
block|{
while|while
condition|(
name|containingFrame
operator|->
name|parentFrame
argument_list|()
operator|!=
name|rootFrame
condition|)
block|{
name|containingFrame
operator|=
name|containingFrame
operator|->
name|parentFrame
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|containingFrame
argument_list|)
expr_stmt|;
block|}
name|it
operator|.
name|cf
operator|=
name|containingFrame
expr_stmt|;
name|it
operator|.
name|cb
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|it
return|;
block|}
end_function
begin_function
name|QTextDocumentLayoutPrivate
operator|::
name|HitPoint
DECL|function|hitTest
name|QTextDocumentLayoutPrivate
operator|::
name|hitTest
parameter_list|(
name|QTextFrame
modifier|*
name|frame
parameter_list|,
specifier|const
name|QFixedPoint
modifier|&
name|point
parameter_list|,
name|int
modifier|*
name|position
parameter_list|,
name|QTextLayout
modifier|*
modifier|*
name|l
parameter_list|,
name|Qt
operator|::
name|HitTestAccuracy
name|accuracy
parameter_list|)
specifier|const
block|{
name|QTextFrameData
modifier|*
name|fd
init|=
name|data
argument_list|(
name|frame
argument_list|)
decl_stmt|;
comment|// #########
if|if
condition|(
name|fd
operator|->
name|layoutDirty
condition|)
return|return
name|PointAfter
return|;
name|Q_ASSERT
argument_list|(
operator|!
name|fd
operator|->
name|layoutDirty
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|fd
operator|->
name|sizeDirty
argument_list|)
expr_stmt|;
specifier|const
name|QFixedPoint
name|relativePoint
argument_list|(
name|point
operator|.
name|x
operator|-
name|fd
operator|->
name|position
operator|.
name|x
argument_list|,
name|point
operator|.
name|y
operator|-
name|fd
operator|->
name|position
operator|.
name|y
argument_list|)
decl_stmt|;
name|QTextFrame
modifier|*
name|rootFrame
init|=
name|docPrivate
operator|->
name|rootFrame
argument_list|()
decl_stmt|;
comment|//     LDEBUG<< "checking frame"<< frame->firstPosition()<< "point="<< point
comment|//<< "position"<< fd->position<< "size"<< fd->size;
if|if
condition|(
name|frame
operator|!=
name|rootFrame
condition|)
block|{
if|if
condition|(
name|relativePoint
operator|.
name|y
operator|<
literal|0
operator|||
name|relativePoint
operator|.
name|x
operator|<
literal|0
condition|)
block|{
operator|*
name|position
operator|=
name|frame
operator|->
name|firstPosition
argument_list|()
operator|-
literal|1
expr_stmt|;
comment|//             LDEBUG<< "before pos="<< *position;
return|return
name|PointBefore
return|;
block|}
elseif|else
if|if
condition|(
name|relativePoint
operator|.
name|y
operator|>
name|fd
operator|->
name|size
operator|.
name|height
operator|||
name|relativePoint
operator|.
name|x
operator|>
name|fd
operator|->
name|size
operator|.
name|width
condition|)
block|{
operator|*
name|position
operator|=
name|frame
operator|->
name|lastPosition
argument_list|()
operator|+
literal|1
expr_stmt|;
comment|//             LDEBUG<< "after pos="<< *position;
return|return
name|PointAfter
return|;
block|}
block|}
if|if
condition|(
name|isFrameFromInlineObject
argument_list|(
name|frame
argument_list|)
condition|)
block|{
operator|*
name|position
operator|=
name|frame
operator|->
name|firstPosition
argument_list|()
operator|-
literal|1
expr_stmt|;
return|return
name|PointExact
return|;
block|}
if|if
condition|(
name|QTextTable
modifier|*
name|table
init|=
name|qobject_cast
argument_list|<
name|QTextTable
operator|*
argument_list|>
argument_list|(
name|frame
argument_list|)
condition|)
block|{
specifier|const
name|int
name|rows
init|=
name|table
operator|->
name|rows
argument_list|()
decl_stmt|;
specifier|const
name|int
name|columns
init|=
name|table
operator|->
name|columns
argument_list|()
decl_stmt|;
name|QTextTableData
modifier|*
name|td
init|=
cast|static_cast
argument_list|<
name|QTextTableData
operator|*
argument_list|>
argument_list|(
name|data
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|td
operator|->
name|childFrameMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rows
condition|;
operator|++
name|r
control|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columns
condition|;
operator|++
name|c
control|)
block|{
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|row
argument_list|()
operator|!=
name|r
operator|||
name|cell
operator|.
name|column
argument_list|()
operator|!=
name|c
condition|)
continue|continue;
name|QRectF
name|cellRect
init|=
name|td
operator|->
name|cellRect
argument_list|(
name|cell
argument_list|)
decl_stmt|;
specifier|const
name|QFixedPoint
name|cellPos
init|=
name|QFixedPoint
operator|::
name|fromPointF
argument_list|(
name|cellRect
operator|.
name|topLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QFixedPoint
name|pointInCell
init|=
name|relativePoint
operator|-
name|cellPos
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QTextFrame
modifier|*
argument_list|>
name|childFrames
init|=
name|td
operator|->
name|childFrameMap
operator|.
name|values
argument_list|(
name|r
operator|+
name|c
operator|*
name|rows
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childFrames
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextFrame
modifier|*
name|child
init|=
name|childFrames
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|isFrameFromInlineObject
argument_list|(
name|child
argument_list|)
operator|&&
name|child
operator|->
name|frameFormat
argument_list|()
operator|.
name|position
argument_list|()
operator|!=
name|QTextFrameFormat
operator|::
name|InFlow
operator|&&
name|hitTest
argument_list|(
name|child
argument_list|,
name|pointInCell
argument_list|,
name|position
argument_list|,
name|l
argument_list|,
name|accuracy
argument_list|)
operator|==
name|PointExact
condition|)
block|{
return|return
name|PointExact
return|;
block|}
block|}
block|}
block|}
block|}
return|return
name|hitTest
argument_list|(
name|table
argument_list|,
name|relativePoint
argument_list|,
name|position
argument_list|,
name|l
argument_list|,
name|accuracy
argument_list|)
return|;
block|}
specifier|const
name|QList
argument_list|<
name|QTextFrame
modifier|*
argument_list|>
name|childFrames
init|=
name|frame
operator|->
name|childFrames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childFrames
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextFrame
modifier|*
name|child
init|=
name|childFrames
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|isFrameFromInlineObject
argument_list|(
name|child
argument_list|)
operator|&&
name|child
operator|->
name|frameFormat
argument_list|()
operator|.
name|position
argument_list|()
operator|!=
name|QTextFrameFormat
operator|::
name|InFlow
operator|&&
name|hitTest
argument_list|(
name|child
argument_list|,
name|relativePoint
argument_list|,
name|position
argument_list|,
name|l
argument_list|,
name|accuracy
argument_list|)
operator|==
name|PointExact
condition|)
block|{
return|return
name|PointExact
return|;
block|}
block|}
name|QTextFrame
operator|::
name|Iterator
name|it
init|=
name|frame
operator|->
name|begin
argument_list|()
decl_stmt|;
if|if
condition|(
name|frame
operator|==
name|rootFrame
condition|)
block|{
name|it
operator|=
name|frameIteratorForYPosition
argument_list|(
name|relativePoint
operator|.
name|y
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|it
operator|.
name|parentFrame
argument_list|()
operator|==
name|frame
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|it
operator|.
name|currentFrame
argument_list|()
condition|)
operator|*
name|position
operator|=
name|it
operator|.
name|currentFrame
argument_list|()
operator|->
name|firstPosition
argument_list|()
expr_stmt|;
else|else
operator|*
name|position
operator|=
name|it
operator|.
name|currentBlock
argument_list|()
operator|.
name|position
argument_list|()
expr_stmt|;
return|return
name|hitTest
argument_list|(
name|it
argument_list|,
name|PointBefore
argument_list|,
name|relativePoint
argument_list|,
name|position
argument_list|,
name|l
argument_list|,
name|accuracy
argument_list|)
return|;
block|}
end_function
begin_function
name|QTextDocumentLayoutPrivate
operator|::
name|HitPoint
DECL|function|hitTest
name|QTextDocumentLayoutPrivate
operator|::
name|hitTest
parameter_list|(
name|QTextFrame
operator|::
name|Iterator
name|it
parameter_list|,
name|HitPoint
name|hit
parameter_list|,
specifier|const
name|QFixedPoint
modifier|&
name|p
parameter_list|,
name|int
modifier|*
name|position
parameter_list|,
name|QTextLayout
modifier|*
modifier|*
name|l
parameter_list|,
name|Qt
operator|::
name|HitTestAccuracy
name|accuracy
parameter_list|)
specifier|const
block|{
name|INC_INDENT
expr_stmt|;
for|for
control|(
init|;
operator|!
name|it
operator|.
name|atEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QTextFrame
modifier|*
name|c
init|=
name|it
operator|.
name|currentFrame
argument_list|()
decl_stmt|;
name|HitPoint
name|hp
decl_stmt|;
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|c
condition|)
block|{
name|hp
operator|=
name|hitTest
argument_list|(
name|c
argument_list|,
name|p
argument_list|,
operator|&
name|pos
argument_list|,
name|l
argument_list|,
name|accuracy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hp
operator|=
name|hitTest
argument_list|(
name|it
operator|.
name|currentBlock
argument_list|()
argument_list|,
name|p
argument_list|,
operator|&
name|pos
argument_list|,
name|l
argument_list|,
name|accuracy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hp
operator|>=
name|PointInside
condition|)
block|{
if|if
condition|(
name|isEmptyBlockBeforeTable
argument_list|(
name|it
argument_list|)
condition|)
continue|continue;
name|hit
operator|=
name|hp
expr_stmt|;
operator|*
name|position
operator|=
name|pos
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|hp
operator|==
name|PointBefore
operator|&&
name|pos
operator|<
operator|*
name|position
condition|)
block|{
operator|*
name|position
operator|=
name|pos
expr_stmt|;
name|hit
operator|=
name|hp
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hp
operator|==
name|PointAfter
operator|&&
name|pos
operator|>
operator|*
name|position
condition|)
block|{
operator|*
name|position
operator|=
name|pos
expr_stmt|;
name|hit
operator|=
name|hp
expr_stmt|;
block|}
block|}
name|DEC_INDENT
expr_stmt|;
comment|//     LDEBUG<< "inside="<< hit<< " pos="<< *position;
return|return
name|hit
return|;
block|}
end_function
begin_function
name|QTextDocumentLayoutPrivate
operator|::
name|HitPoint
DECL|function|hitTest
name|QTextDocumentLayoutPrivate
operator|::
name|hitTest
parameter_list|(
name|QTextTable
modifier|*
name|table
parameter_list|,
specifier|const
name|QFixedPoint
modifier|&
name|point
parameter_list|,
name|int
modifier|*
name|position
parameter_list|,
name|QTextLayout
modifier|*
modifier|*
name|l
parameter_list|,
name|Qt
operator|::
name|HitTestAccuracy
name|accuracy
parameter_list|)
specifier|const
block|{
name|QTextTableData
modifier|*
name|td
init|=
cast|static_cast
argument_list|<
name|QTextTableData
operator|*
argument_list|>
argument_list|(
name|data
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QFixed
argument_list|>
operator|::
name|ConstIterator
name|rowIt
init|=
name|std
operator|::
name|lower_bound
argument_list|(
name|td
operator|->
name|rowPositions
operator|.
name|constBegin
argument_list|()
argument_list|,
name|td
operator|->
name|rowPositions
operator|.
name|constEnd
argument_list|()
argument_list|,
name|point
operator|.
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowIt
operator|==
name|td
operator|->
name|rowPositions
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|rowIt
operator|=
name|td
operator|->
name|rowPositions
operator|.
name|constEnd
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rowIt
operator|!=
name|td
operator|->
name|rowPositions
operator|.
name|constBegin
argument_list|()
condition|)
block|{
operator|--
name|rowIt
expr_stmt|;
block|}
name|QVector
argument_list|<
name|QFixed
argument_list|>
operator|::
name|ConstIterator
name|colIt
init|=
name|std
operator|::
name|lower_bound
argument_list|(
name|td
operator|->
name|columnPositions
operator|.
name|constBegin
argument_list|()
argument_list|,
name|td
operator|->
name|columnPositions
operator|.
name|constEnd
argument_list|()
argument_list|,
name|point
operator|.
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|colIt
operator|==
name|td
operator|->
name|columnPositions
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|colIt
operator|=
name|td
operator|->
name|columnPositions
operator|.
name|constEnd
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colIt
operator|!=
name|td
operator|->
name|columnPositions
operator|.
name|constBegin
argument_list|()
condition|)
block|{
operator|--
name|colIt
expr_stmt|;
block|}
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
name|rowIt
operator|-
name|td
operator|->
name|rowPositions
operator|.
name|constBegin
argument_list|()
argument_list|,
name|colIt
operator|-
name|td
operator|->
name|columnPositions
operator|.
name|constBegin
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cell
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|PointBefore
return|;
operator|*
name|position
operator|=
name|cell
operator|.
name|firstPosition
argument_list|()
expr_stmt|;
name|HitPoint
name|hp
init|=
name|hitTest
argument_list|(
name|cell
operator|.
name|begin
argument_list|()
argument_list|,
name|PointInside
argument_list|,
name|point
operator|-
name|td
operator|->
name|cellPosition
argument_list|(
name|cell
argument_list|)
argument_list|,
name|position
argument_list|,
name|l
argument_list|,
name|accuracy
argument_list|)
decl_stmt|;
if|if
condition|(
name|hp
operator|==
name|PointExact
condition|)
return|return
name|hp
return|;
if|if
condition|(
name|hp
operator|==
name|PointAfter
condition|)
operator|*
name|position
operator|=
name|cell
operator|.
name|lastPosition
argument_list|()
expr_stmt|;
return|return
name|PointInside
return|;
block|}
end_function
begin_function
name|QTextDocumentLayoutPrivate
operator|::
name|HitPoint
DECL|function|hitTest
name|QTextDocumentLayoutPrivate
operator|::
name|hitTest
parameter_list|(
name|QTextBlock
name|bl
parameter_list|,
specifier|const
name|QFixedPoint
modifier|&
name|point
parameter_list|,
name|int
modifier|*
name|position
parameter_list|,
name|QTextLayout
modifier|*
modifier|*
name|l
parameter_list|,
name|Qt
operator|::
name|HitTestAccuracy
name|accuracy
parameter_list|)
specifier|const
block|{
name|QTextLayout
modifier|*
name|tl
init|=
name|bl
operator|.
name|layout
argument_list|()
decl_stmt|;
name|QRectF
name|textrect
init|=
name|tl
operator|->
name|boundingRect
argument_list|()
decl_stmt|;
name|textrect
operator|.
name|translate
argument_list|(
name|tl
operator|->
name|position
argument_list|()
argument_list|)
expr_stmt|;
comment|//     LDEBUG<< "    checking block"<< bl.position()<< "point="<< point
comment|//<< "    tlrect"<< textrect;
operator|*
name|position
operator|=
name|bl
operator|.
name|position
argument_list|()
expr_stmt|;
if|if
condition|(
name|point
operator|.
name|y
operator|.
name|toReal
argument_list|()
operator|<
name|textrect
operator|.
name|top
argument_list|()
condition|)
block|{
comment|//             LDEBUG<< "    before pos="<< *position;
return|return
name|PointBefore
return|;
block|}
elseif|else
if|if
condition|(
name|point
operator|.
name|y
operator|.
name|toReal
argument_list|()
operator|>
name|textrect
operator|.
name|bottom
argument_list|()
condition|)
block|{
operator|*
name|position
operator|+=
name|bl
operator|.
name|length
argument_list|()
expr_stmt|;
comment|//             LDEBUG<< "    after pos="<< *position;
return|return
name|PointAfter
return|;
block|}
name|QPointF
name|pos
init|=
name|point
operator|.
name|toPointF
argument_list|()
operator|-
name|tl
operator|->
name|position
argument_list|()
decl_stmt|;
comment|// ### rtl?
name|HitPoint
name|hit
init|=
name|PointInside
decl_stmt|;
operator|*
name|l
operator|=
name|tl
expr_stmt|;
name|int
name|off
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tl
operator|->
name|lineCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextLine
name|line
init|=
name|tl
operator|->
name|lineAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QRectF
name|lr
init|=
name|line
operator|.
name|naturalTextRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|lr
operator|.
name|top
argument_list|()
operator|>
name|pos
operator|.
name|y
argument_list|()
condition|)
block|{
name|off
operator|=
name|qMin
argument_list|(
name|off
argument_list|,
name|line
operator|.
name|textStart
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lr
operator|.
name|bottom
argument_list|()
operator|<=
name|pos
operator|.
name|y
argument_list|()
condition|)
block|{
name|off
operator|=
name|qMax
argument_list|(
name|off
argument_list|,
name|line
operator|.
name|textStart
argument_list|()
operator|+
name|line
operator|.
name|textLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|lr
operator|.
name|left
argument_list|()
operator|<=
name|pos
operator|.
name|x
argument_list|()
operator|&&
name|lr
operator|.
name|right
argument_list|()
operator|>=
name|pos
operator|.
name|x
argument_list|()
condition|)
name|hit
operator|=
name|PointExact
expr_stmt|;
comment|// when trying to hit an anchor we want it to hit not only in the left
comment|// half
if|if
condition|(
name|accuracy
operator|==
name|Qt
operator|::
name|ExactHit
condition|)
name|off
operator|=
name|line
operator|.
name|xToCursor
argument_list|(
name|pos
operator|.
name|x
argument_list|()
argument_list|,
name|QTextLine
operator|::
name|CursorOnCharacter
argument_list|)
expr_stmt|;
else|else
name|off
operator|=
name|line
operator|.
name|xToCursor
argument_list|(
name|pos
operator|.
name|x
argument_list|()
argument_list|,
name|QTextLine
operator|::
name|CursorBetweenCharacters
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
operator|*
name|position
operator|+=
name|off
expr_stmt|;
comment|//     LDEBUG<< "    inside="<< hit<< " pos="<< *position;
return|return
name|hit
return|;
block|}
end_function
begin_comment
comment|// ### could be moved to QTextBlock
end_comment
begin_function
DECL|function|blockIndent
name|QFixed
name|QTextDocumentLayoutPrivate
operator|::
name|blockIndent
parameter_list|(
specifier|const
name|QTextBlockFormat
modifier|&
name|blockFormat
parameter_list|)
specifier|const
block|{
name|qreal
name|indent
init|=
name|blockFormat
operator|.
name|indent
argument_list|()
decl_stmt|;
name|QTextObject
modifier|*
name|object
init|=
name|document
operator|->
name|objectForFormat
argument_list|(
name|blockFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
condition|)
name|indent
operator|+=
name|object
operator|->
name|format
argument_list|()
operator|.
name|toListFormat
argument_list|()
operator|.
name|indent
argument_list|()
expr_stmt|;
if|if
condition|(
name|qIsNull
argument_list|(
name|indent
argument_list|)
condition|)
return|return
literal|0
return|;
name|qreal
name|scale
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|paintDevice
condition|)
block|{
name|scale
operator|=
name|qreal
argument_list|(
name|paintDevice
operator|->
name|logicalDpiY
argument_list|()
argument_list|)
operator|/
name|qreal
argument_list|(
name|qt_defaultDpi
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|QFixed
operator|::
name|fromReal
argument_list|(
name|indent
operator|*
name|scale
operator|*
name|document
operator|->
name|indentWidth
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|drawBorder
name|void
name|QTextDocumentLayoutPrivate
operator|::
name|drawBorder
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
name|qreal
name|topMargin
parameter_list|,
name|qreal
name|bottomMargin
parameter_list|,
name|qreal
name|border
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|,
name|QTextFrameFormat
operator|::
name|BorderStyle
name|style
parameter_list|)
specifier|const
block|{
specifier|const
name|qreal
name|pageHeight
init|=
name|document
operator|->
name|pageSize
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
specifier|const
name|int
name|topPage
init|=
name|pageHeight
operator|>
literal|0
condition|?
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|rect
operator|.
name|top
argument_list|()
operator|/
name|pageHeight
argument_list|)
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|bottomPage
init|=
name|pageHeight
operator|>
literal|0
condition|?
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
operator|(
name|rect
operator|.
name|bottom
argument_list|()
operator|+
name|border
operator|)
operator|/
name|pageHeight
argument_list|)
else|:
literal|0
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CSSPARSER
name|QCss
operator|::
name|BorderStyle
name|cssStyle
init|=
cast|static_cast
argument_list|<
name|QCss
operator|::
name|BorderStyle
argument_list|>
argument_list|(
name|style
operator|+
literal|1
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|//QT_NO_CSSPARSER
name|bool
name|turn_off_antialiasing
init|=
operator|!
operator|(
name|painter
operator|->
name|renderHints
argument_list|()
operator|&
name|QPainter
operator|::
name|Antialiasing
operator|)
decl_stmt|;
name|painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|topPage
init|;
name|i
operator|<=
name|bottomPage
condition|;
operator|++
name|i
control|)
block|{
name|QRectF
name|clipped
init|=
name|rect
operator|.
name|toRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|topPage
operator|!=
name|bottomPage
condition|)
block|{
name|clipped
operator|.
name|setTop
argument_list|(
name|qMax
argument_list|(
name|clipped
operator|.
name|top
argument_list|()
argument_list|,
name|i
operator|*
name|pageHeight
operator|+
name|topMargin
operator|-
name|border
argument_list|)
argument_list|)
expr_stmt|;
name|clipped
operator|.
name|setBottom
argument_list|(
name|qMin
argument_list|(
name|clipped
operator|.
name|bottom
argument_list|()
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
name|pageHeight
operator|-
name|bottomMargin
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clipped
operator|.
name|bottom
argument_list|()
operator|<=
name|clipped
operator|.
name|top
argument_list|()
condition|)
continue|continue;
block|}
ifndef|#
directive|ifndef
name|QT_NO_CSSPARSER
name|qDrawEdge
argument_list|(
name|painter
argument_list|,
name|clipped
operator|.
name|left
argument_list|()
argument_list|,
name|clipped
operator|.
name|top
argument_list|()
argument_list|,
name|clipped
operator|.
name|left
argument_list|()
operator|+
name|border
argument_list|,
name|clipped
operator|.
name|bottom
argument_list|()
operator|+
name|border
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|QCss
operator|::
name|LeftEdge
argument_list|,
name|cssStyle
argument_list|,
name|brush
argument_list|)
expr_stmt|;
name|qDrawEdge
argument_list|(
name|painter
argument_list|,
name|clipped
operator|.
name|left
argument_list|()
operator|+
name|border
argument_list|,
name|clipped
operator|.
name|top
argument_list|()
argument_list|,
name|clipped
operator|.
name|right
argument_list|()
operator|+
name|border
argument_list|,
name|clipped
operator|.
name|top
argument_list|()
operator|+
name|border
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|QCss
operator|::
name|TopEdge
argument_list|,
name|cssStyle
argument_list|,
name|brush
argument_list|)
expr_stmt|;
name|qDrawEdge
argument_list|(
name|painter
argument_list|,
name|clipped
operator|.
name|right
argument_list|()
argument_list|,
name|clipped
operator|.
name|top
argument_list|()
operator|+
name|border
argument_list|,
name|clipped
operator|.
name|right
argument_list|()
operator|+
name|border
argument_list|,
name|clipped
operator|.
name|bottom
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|QCss
operator|::
name|RightEdge
argument_list|,
name|cssStyle
argument_list|,
name|brush
argument_list|)
expr_stmt|;
name|qDrawEdge
argument_list|(
name|painter
argument_list|,
name|clipped
operator|.
name|left
argument_list|()
operator|+
name|border
argument_list|,
name|clipped
operator|.
name|bottom
argument_list|()
argument_list|,
name|clipped
operator|.
name|right
argument_list|()
operator|+
name|border
argument_list|,
name|clipped
operator|.
name|bottom
argument_list|()
operator|+
name|border
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|QCss
operator|::
name|BottomEdge
argument_list|,
name|cssStyle
argument_list|,
name|brush
argument_list|)
expr_stmt|;
else|#
directive|else
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|brush
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|QRectF
argument_list|(
name|clipped
operator|.
name|left
argument_list|()
argument_list|,
name|clipped
operator|.
name|top
argument_list|()
argument_list|,
name|clipped
operator|.
name|left
argument_list|()
operator|+
name|border
argument_list|,
name|clipped
operator|.
name|bottom
argument_list|()
operator|+
name|border
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|QRectF
argument_list|(
name|clipped
operator|.
name|left
argument_list|()
operator|+
name|border
argument_list|,
name|clipped
operator|.
name|top
argument_list|()
argument_list|,
name|clipped
operator|.
name|right
argument_list|()
operator|+
name|border
argument_list|,
name|clipped
operator|.
name|top
argument_list|()
operator|+
name|border
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|QRectF
argument_list|(
name|clipped
operator|.
name|right
argument_list|()
argument_list|,
name|clipped
operator|.
name|top
argument_list|()
operator|+
name|border
argument_list|,
name|clipped
operator|.
name|right
argument_list|()
operator|+
name|border
argument_list|,
name|clipped
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|QRectF
argument_list|(
name|clipped
operator|.
name|left
argument_list|()
operator|+
name|border
argument_list|,
name|clipped
operator|.
name|bottom
argument_list|()
argument_list|,
name|clipped
operator|.
name|right
argument_list|()
operator|+
name|border
argument_list|,
name|clipped
operator|.
name|bottom
argument_list|()
operator|+
name|border
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|//QT_NO_CSSPARSER
block|}
if|if
condition|(
name|turn_off_antialiasing
condition|)
name|painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawFrameDecoration
name|void
name|QTextDocumentLayoutPrivate
operator|::
name|drawFrameDecoration
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
name|QTextFrame
modifier|*
name|frame
parameter_list|,
name|QTextFrameData
modifier|*
name|fd
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|clip
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
specifier|const
name|QBrush
name|bg
init|=
name|frame
operator|->
name|frameFormat
argument_list|()
operator|.
name|background
argument_list|()
decl_stmt|;
if|if
condition|(
name|bg
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
block|{
name|QRectF
name|bgRect
init|=
name|rect
decl_stmt|;
name|bgRect
operator|.
name|adjust
argument_list|(
operator|(
name|fd
operator|->
name|leftMargin
operator|+
name|fd
operator|->
name|border
operator|)
operator|.
name|toReal
argument_list|()
argument_list|,
operator|(
name|fd
operator|->
name|topMargin
operator|+
name|fd
operator|->
name|border
operator|)
operator|.
name|toReal
argument_list|()
argument_list|,
operator|-
operator|(
name|fd
operator|->
name|rightMargin
operator|+
name|fd
operator|->
name|border
operator|)
operator|.
name|toReal
argument_list|()
argument_list|,
operator|-
operator|(
name|fd
operator|->
name|bottomMargin
operator|+
name|fd
operator|->
name|border
operator|)
operator|.
name|toReal
argument_list|()
argument_list|)
expr_stmt|;
name|QRectF
name|gradientRect
decl_stmt|;
comment|// invalid makes it default to bgRect
name|QPointF
name|origin
init|=
name|bgRect
operator|.
name|topLeft
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|frame
operator|->
name|parentFrame
argument_list|()
condition|)
block|{
name|bgRect
operator|=
name|clip
expr_stmt|;
name|gradientRect
operator|.
name|setWidth
argument_list|(
name|painter
operator|->
name|device
argument_list|()
operator|->
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|gradientRect
operator|.
name|setHeight
argument_list|(
name|painter
operator|->
name|device
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fillBackground
argument_list|(
name|painter
argument_list|,
name|bgRect
argument_list|,
name|bg
argument_list|,
name|origin
argument_list|,
name|gradientRect
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fd
operator|->
name|border
operator|!=
literal|0
condition|)
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|Qt
operator|::
name|lightGray
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
specifier|const
name|qreal
name|leftEdge
init|=
name|rect
operator|.
name|left
argument_list|()
operator|+
name|fd
operator|->
name|leftMargin
operator|.
name|toReal
argument_list|()
decl_stmt|;
specifier|const
name|qreal
name|border
init|=
name|fd
operator|->
name|border
operator|.
name|toReal
argument_list|()
decl_stmt|;
specifier|const
name|qreal
name|topMargin
init|=
name|fd
operator|->
name|topMargin
operator|.
name|toReal
argument_list|()
decl_stmt|;
specifier|const
name|qreal
name|leftMargin
init|=
name|fd
operator|->
name|leftMargin
operator|.
name|toReal
argument_list|()
decl_stmt|;
specifier|const
name|qreal
name|bottomMargin
init|=
name|fd
operator|->
name|bottomMargin
operator|.
name|toReal
argument_list|()
decl_stmt|;
specifier|const
name|qreal
name|rightMargin
init|=
name|fd
operator|->
name|rightMargin
operator|.
name|toReal
argument_list|()
decl_stmt|;
specifier|const
name|qreal
name|w
init|=
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|2
operator|*
name|border
operator|-
name|leftMargin
operator|-
name|rightMargin
decl_stmt|;
specifier|const
name|qreal
name|h
init|=
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
operator|*
name|border
operator|-
name|topMargin
operator|-
name|bottomMargin
decl_stmt|;
name|drawBorder
argument_list|(
name|painter
argument_list|,
name|QRectF
argument_list|(
name|leftEdge
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|+
name|topMargin
argument_list|,
name|w
operator|+
name|border
argument_list|,
name|h
operator|+
name|border
argument_list|)
argument_list|,
name|fd
operator|->
name|effectiveTopMargin
operator|.
name|toReal
argument_list|()
argument_list|,
name|fd
operator|->
name|effectiveBottomMargin
operator|.
name|toReal
argument_list|()
argument_list|,
name|border
argument_list|,
name|frame
operator|->
name|frameFormat
argument_list|()
operator|.
name|borderBrush
argument_list|()
argument_list|,
name|frame
operator|->
name|frameFormat
argument_list|()
operator|.
name|borderStyle
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|adjustContextSelectionsForCell
specifier|static
name|void
name|adjustContextSelectionsForCell
parameter_list|(
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
modifier|&
name|cell_context
parameter_list|,
specifier|const
name|QTextTableCell
modifier|&
name|cell
parameter_list|,
name|int
name|r
parameter_list|,
name|int
name|c
parameter_list|,
specifier|const
name|int
modifier|*
name|selectedTableCells
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cell_context
operator|.
name|selections
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|row_start
init|=
name|selectedTableCells
index|[
name|i
operator|*
literal|4
index|]
decl_stmt|;
name|int
name|col_start
init|=
name|selectedTableCells
index|[
name|i
operator|*
literal|4
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|num_rows
init|=
name|selectedTableCells
index|[
name|i
operator|*
literal|4
operator|+
literal|2
index|]
decl_stmt|;
name|int
name|num_cols
init|=
name|selectedTableCells
index|[
name|i
operator|*
literal|4
operator|+
literal|3
index|]
decl_stmt|;
if|if
condition|(
name|row_start
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|r
operator|>=
name|row_start
operator|&&
name|r
operator|<
name|row_start
operator|+
name|num_rows
operator|&&
name|c
operator|>=
name|col_start
operator|&&
name|c
operator|<
name|col_start
operator|+
name|num_cols
condition|)
block|{
name|int
name|firstPosition
init|=
name|cell
operator|.
name|firstPosition
argument_list|()
decl_stmt|;
name|int
name|lastPosition
init|=
name|cell
operator|.
name|lastPosition
argument_list|()
decl_stmt|;
comment|// make sure empty cells are still selected
if|if
condition|(
name|firstPosition
operator|==
name|lastPosition
condition|)
operator|++
name|lastPosition
expr_stmt|;
name|cell_context
operator|.
name|selections
index|[
name|i
index|]
operator|.
name|cursor
operator|.
name|setPosition
argument_list|(
name|firstPosition
argument_list|)
expr_stmt|;
name|cell_context
operator|.
name|selections
index|[
name|i
index|]
operator|.
name|cursor
operator|.
name|setPosition
argument_list|(
name|lastPosition
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell_context
operator|.
name|selections
index|[
name|i
index|]
operator|.
name|cursor
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
block|}
block|}
comment|// FullWidthSelection is not useful for tables
name|cell_context
operator|.
name|selections
index|[
name|i
index|]
operator|.
name|format
operator|.
name|clearProperty
argument_list|(
name|QTextFormat
operator|::
name|FullWidthSelection
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawFrame
name|void
name|QTextDocumentLayoutPrivate
operator|::
name|drawFrame
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|offset
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
modifier|&
name|context
parameter_list|,
name|QTextFrame
modifier|*
name|frame
parameter_list|)
specifier|const
block|{
name|QTextFrameData
modifier|*
name|fd
init|=
name|data
argument_list|(
name|frame
argument_list|)
decl_stmt|;
comment|// #######
if|if
condition|(
name|fd
operator|->
name|layoutDirty
condition|)
return|return;
name|Q_ASSERT
argument_list|(
operator|!
name|fd
operator|->
name|sizeDirty
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|fd
operator|->
name|layoutDirty
argument_list|)
expr_stmt|;
specifier|const
name|QPointF
name|off
init|=
name|offset
operator|+
name|fd
operator|->
name|position
operator|.
name|toPointF
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|clip
operator|.
name|isValid
argument_list|()
operator|&&
operator|(
name|off
operator|.
name|y
argument_list|()
operator|>
name|context
operator|.
name|clip
operator|.
name|bottom
argument_list|()
operator|||
name|off
operator|.
name|y
argument_list|()
operator|+
name|fd
operator|->
name|size
operator|.
name|height
operator|.
name|toReal
argument_list|()
operator|<
name|context
operator|.
name|clip
operator|.
name|top
argument_list|()
operator|||
name|off
operator|.
name|x
argument_list|()
operator|>
name|context
operator|.
name|clip
operator|.
name|right
argument_list|()
operator|||
name|off
operator|.
name|x
argument_list|()
operator|+
name|fd
operator|->
name|size
operator|.
name|width
operator|.
name|toReal
argument_list|()
operator|<
name|context
operator|.
name|clip
operator|.
name|left
argument_list|()
operator|)
condition|)
return|return;
comment|//     LDEBUG<< debug_indent<< "drawFrame"<< frame->firstPosition()<< "--"<< frame->lastPosition()<< "at"<< offset;
comment|//     INC_INDENT;
comment|// if the cursor is /on/ a table border we may need to repaint it
comment|// afterwards, as we usually draw the decoration first
name|QTextBlock
name|cursorBlockNeedingRepaint
decl_stmt|;
name|QPointF
name|offsetOfRepaintedCursorBlock
init|=
name|off
decl_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|qobject_cast
argument_list|<
name|QTextTable
operator|*
argument_list|>
argument_list|(
name|frame
argument_list|)
decl_stmt|;
specifier|const
name|QRectF
name|frameRect
argument_list|(
name|off
argument_list|,
name|fd
operator|->
name|size
operator|.
name|toSizeF
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
condition|)
block|{
specifier|const
name|int
name|rows
init|=
name|table
operator|->
name|rows
argument_list|()
decl_stmt|;
specifier|const
name|int
name|columns
init|=
name|table
operator|->
name|columns
argument_list|()
decl_stmt|;
name|QTextTableData
modifier|*
name|td
init|=
cast|static_cast
argument_list|<
name|QTextTableData
operator|*
argument_list|>
argument_list|(
name|data
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
name|selectedTableCells
argument_list|(
name|context
operator|.
name|selections
operator|.
name|size
argument_list|()
operator|*
literal|4
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|context
operator|.
name|selections
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QAbstractTextDocumentLayout
operator|::
name|Selection
modifier|&
name|s
init|=
name|context
operator|.
name|selections
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|row_start
init|=
operator|-
literal|1
decl_stmt|,
name|col_start
init|=
operator|-
literal|1
decl_stmt|,
name|num_rows
init|=
operator|-
literal|1
decl_stmt|,
name|num_cols
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|cursor
operator|.
name|currentTable
argument_list|()
operator|==
name|table
condition|)
name|s
operator|.
name|cursor
operator|.
name|selectedTableCells
argument_list|(
operator|&
name|row_start
argument_list|,
operator|&
name|num_rows
argument_list|,
operator|&
name|col_start
argument_list|,
operator|&
name|num_cols
argument_list|)
expr_stmt|;
name|selectedTableCells
index|[
name|i
operator|*
literal|4
index|]
operator|=
name|row_start
expr_stmt|;
name|selectedTableCells
index|[
name|i
operator|*
literal|4
operator|+
literal|1
index|]
operator|=
name|col_start
expr_stmt|;
name|selectedTableCells
index|[
name|i
operator|*
literal|4
operator|+
literal|2
index|]
operator|=
name|num_rows
expr_stmt|;
name|selectedTableCells
index|[
name|i
operator|*
literal|4
operator|+
literal|3
index|]
operator|=
name|num_cols
expr_stmt|;
block|}
name|QFixed
name|pageHeight
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|document
operator|->
name|pageSize
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pageHeight
operator|<=
literal|0
condition|)
name|pageHeight
operator|=
name|QFIXED_MAX
expr_stmt|;
specifier|const
name|int
name|tableStartPage
init|=
operator|(
name|td
operator|->
name|position
operator|.
name|y
operator|/
name|pageHeight
operator|)
operator|.
name|truncate
argument_list|()
decl_stmt|;
specifier|const
name|int
name|tableEndPage
init|=
operator|(
operator|(
name|td
operator|->
name|position
operator|.
name|y
operator|+
name|td
operator|->
name|size
operator|.
name|height
operator|)
operator|/
name|pageHeight
operator|)
operator|.
name|truncate
argument_list|()
decl_stmt|;
name|qreal
name|border
init|=
name|td
operator|->
name|border
operator|.
name|toReal
argument_list|()
decl_stmt|;
name|drawFrameDecoration
argument_list|(
name|painter
argument_list|,
name|frame
argument_list|,
name|fd
argument_list|,
name|context
operator|.
name|clip
argument_list|,
name|frameRect
argument_list|)
expr_stmt|;
comment|// draw the table headers
specifier|const
name|int
name|headerRowCount
init|=
name|qMin
argument_list|(
name|table
operator|->
name|format
argument_list|()
operator|.
name|headerRowCount
argument_list|()
argument_list|,
name|rows
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|page
init|=
name|tableStartPage
operator|+
literal|1
decl_stmt|;
while|while
condition|(
name|page
operator|<=
name|tableEndPage
condition|)
block|{
specifier|const
name|QFixed
name|pageTop
init|=
name|page
operator|*
name|pageHeight
operator|+
name|td
operator|->
name|effectiveTopMargin
operator|+
name|td
operator|->
name|cellSpacing
operator|+
name|td
operator|->
name|border
decl_stmt|;
specifier|const
name|qreal
name|headerOffset
init|=
operator|(
name|pageTop
operator|-
name|td
operator|->
name|rowPositions
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|toReal
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|headerRowCount
condition|;
operator|++
name|r
control|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columns
condition|;
operator|++
name|c
control|)
block|{
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
name|cell_context
init|=
name|context
decl_stmt|;
name|adjustContextSelectionsForCell
argument_list|(
name|cell_context
argument_list|,
name|cell
argument_list|,
name|r
argument_list|,
name|c
argument_list|,
name|selectedTableCells
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QRectF
name|cellRect
init|=
name|td
operator|->
name|cellRect
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|cellRect
operator|.
name|translate
argument_list|(
name|off
operator|.
name|x
argument_list|()
argument_list|,
name|headerOffset
argument_list|)
expr_stmt|;
comment|// we need to account for the cell border in the clipping test
name|int
name|leftAdjust
init|=
name|qMin
argument_list|(
name|qreal
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1
operator|-
name|border
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell_context
operator|.
name|clip
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|cellRect
operator|.
name|adjusted
argument_list|(
name|leftAdjust
argument_list|,
name|leftAdjust
argument_list|,
name|border
argument_list|,
name|border
argument_list|)
operator|.
name|intersects
argument_list|(
name|cell_context
operator|.
name|clip
argument_list|)
condition|)
continue|continue;
name|drawTableCell
argument_list|(
name|cellRect
argument_list|,
name|painter
argument_list|,
name|cell_context
argument_list|,
name|table
argument_list|,
name|td
argument_list|,
name|r
argument_list|,
name|c
argument_list|,
operator|&
name|cursorBlockNeedingRepaint
argument_list|,
operator|&
name|offsetOfRepaintedCursorBlock
argument_list|)
expr_stmt|;
block|}
block|}
operator|++
name|page
expr_stmt|;
block|}
name|int
name|firstRow
init|=
literal|0
decl_stmt|;
name|int
name|lastRow
init|=
name|rows
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|clip
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QVector
argument_list|<
name|QFixed
argument_list|>
operator|::
name|ConstIterator
name|rowIt
init|=
name|std
operator|::
name|lower_bound
argument_list|(
name|td
operator|->
name|rowPositions
operator|.
name|constBegin
argument_list|()
argument_list|,
name|td
operator|->
name|rowPositions
operator|.
name|constEnd
argument_list|()
argument_list|,
name|QFixed
operator|::
name|fromReal
argument_list|(
name|context
operator|.
name|clip
operator|.
name|top
argument_list|()
operator|-
name|off
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowIt
operator|!=
name|td
operator|->
name|rowPositions
operator|.
name|constEnd
argument_list|()
operator|&&
name|rowIt
operator|!=
name|td
operator|->
name|rowPositions
operator|.
name|constBegin
argument_list|()
condition|)
block|{
operator|--
name|rowIt
expr_stmt|;
name|firstRow
operator|=
name|rowIt
operator|-
name|td
operator|->
name|rowPositions
operator|.
name|constBegin
argument_list|()
expr_stmt|;
block|}
name|rowIt
operator|=
name|std
operator|::
name|upper_bound
argument_list|(
name|td
operator|->
name|rowPositions
operator|.
name|constBegin
argument_list|()
argument_list|,
name|td
operator|->
name|rowPositions
operator|.
name|constEnd
argument_list|()
argument_list|,
name|QFixed
operator|::
name|fromReal
argument_list|(
name|context
operator|.
name|clip
operator|.
name|bottom
argument_list|()
operator|-
name|off
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rowIt
operator|!=
name|td
operator|->
name|rowPositions
operator|.
name|constEnd
argument_list|()
condition|)
block|{
operator|++
name|rowIt
expr_stmt|;
name|lastRow
operator|=
name|rowIt
operator|-
name|td
operator|->
name|rowPositions
operator|.
name|constBegin
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columns
condition|;
operator|++
name|c
control|)
block|{
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
name|firstRow
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|firstRow
operator|=
name|qMin
argument_list|(
name|firstRow
argument_list|,
name|cell
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|r
init|=
name|firstRow
init|;
name|r
operator|<
name|lastRow
condition|;
operator|++
name|r
control|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columns
condition|;
operator|++
name|c
control|)
block|{
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
name|cell_context
init|=
name|context
decl_stmt|;
name|adjustContextSelectionsForCell
argument_list|(
name|cell_context
argument_list|,
name|cell
argument_list|,
name|r
argument_list|,
name|c
argument_list|,
name|selectedTableCells
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QRectF
name|cellRect
init|=
name|td
operator|->
name|cellRect
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|cellRect
operator|.
name|translate
argument_list|(
name|off
argument_list|)
expr_stmt|;
comment|// we need to account for the cell border in the clipping test
name|int
name|leftAdjust
init|=
name|qMin
argument_list|(
name|qreal
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1
operator|-
name|border
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell_context
operator|.
name|clip
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|cellRect
operator|.
name|adjusted
argument_list|(
name|leftAdjust
argument_list|,
name|leftAdjust
argument_list|,
name|border
argument_list|,
name|border
argument_list|)
operator|.
name|intersects
argument_list|(
name|cell_context
operator|.
name|clip
argument_list|)
condition|)
continue|continue;
name|drawTableCell
argument_list|(
name|cellRect
argument_list|,
name|painter
argument_list|,
name|cell_context
argument_list|,
name|table
argument_list|,
name|td
argument_list|,
name|r
argument_list|,
name|c
argument_list|,
operator|&
name|cursorBlockNeedingRepaint
argument_list|,
operator|&
name|offsetOfRepaintedCursorBlock
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|drawFrameDecoration
argument_list|(
name|painter
argument_list|,
name|frame
argument_list|,
name|fd
argument_list|,
name|context
operator|.
name|clip
argument_list|,
name|frameRect
argument_list|)
expr_stmt|;
name|QTextFrame
operator|::
name|Iterator
name|it
init|=
name|frame
operator|->
name|begin
argument_list|()
decl_stmt|;
if|if
condition|(
name|frame
operator|==
name|docPrivate
operator|->
name|rootFrame
argument_list|()
condition|)
name|it
operator|=
name|frameIteratorForYPosition
argument_list|(
name|QFixed
operator|::
name|fromReal
argument_list|(
name|context
operator|.
name|clip
operator|.
name|top
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QTextFrame
modifier|*
argument_list|>
name|floats
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fd
operator|->
name|floats
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|floats
operator|.
name|append
argument_list|(
name|fd
operator|->
name|floats
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|drawFlow
argument_list|(
name|off
argument_list|,
name|painter
argument_list|,
name|context
argument_list|,
name|it
argument_list|,
name|floats
argument_list|,
operator|&
name|cursorBlockNeedingRepaint
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cursorBlockNeedingRepaint
operator|.
name|isValid
argument_list|()
condition|)
block|{
specifier|const
name|QPen
name|oldPen
init|=
name|painter
operator|->
name|pen
argument_list|()
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|context
operator|.
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|int
name|cursorPos
init|=
name|context
operator|.
name|cursorPosition
operator|-
name|cursorBlockNeedingRepaint
operator|.
name|position
argument_list|()
decl_stmt|;
name|cursorBlockNeedingRepaint
operator|.
name|layout
argument_list|()
operator|->
name|drawCursor
argument_list|(
name|painter
argument_list|,
name|offsetOfRepaintedCursorBlock
argument_list|,
name|cursorPos
argument_list|,
name|cursorWidth
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
block|}
comment|//     DEC_INDENT;
return|return;
block|}
end_function
begin_function
DECL|function|drawTableCell
name|void
name|QTextDocumentLayoutPrivate
operator|::
name|drawTableCell
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|cellRect
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
modifier|&
name|cell_context
parameter_list|,
name|QTextTable
modifier|*
name|table
parameter_list|,
name|QTextTableData
modifier|*
name|td
parameter_list|,
name|int
name|r
parameter_list|,
name|int
name|c
parameter_list|,
name|QTextBlock
modifier|*
name|cursorBlockNeedingRepaint
parameter_list|,
name|QPointF
modifier|*
name|cursorBlockOffset
parameter_list|)
specifier|const
block|{
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|int
name|rspan
init|=
name|cell
operator|.
name|rowSpan
argument_list|()
decl_stmt|;
name|int
name|cspan
init|=
name|cell
operator|.
name|columnSpan
argument_list|()
decl_stmt|;
if|if
condition|(
name|rspan
operator|!=
literal|1
condition|)
block|{
name|int
name|cr
init|=
name|cell
operator|.
name|row
argument_list|()
decl_stmt|;
if|if
condition|(
name|cr
operator|!=
name|r
condition|)
return|return;
block|}
if|if
condition|(
name|cspan
operator|!=
literal|1
condition|)
block|{
name|int
name|cc
init|=
name|cell
operator|.
name|column
argument_list|()
decl_stmt|;
if|if
condition|(
name|cc
operator|!=
name|c
condition|)
return|return;
block|}
name|QTextFormat
name|fmt
init|=
name|cell
operator|.
name|format
argument_list|()
decl_stmt|;
specifier|const
name|QFixed
name|leftPadding
init|=
name|td
operator|->
name|leftPadding
argument_list|(
name|fmt
argument_list|)
decl_stmt|;
specifier|const
name|QFixed
name|topPadding
init|=
name|td
operator|->
name|topPadding
argument_list|(
name|fmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|td
operator|->
name|border
operator|!=
literal|0
condition|)
block|{
specifier|const
name|QBrush
name|oldBrush
init|=
name|painter
operator|->
name|brush
argument_list|()
decl_stmt|;
specifier|const
name|QPen
name|oldPen
init|=
name|painter
operator|->
name|pen
argument_list|()
decl_stmt|;
specifier|const
name|qreal
name|border
init|=
name|td
operator|->
name|border
operator|.
name|toReal
argument_list|()
decl_stmt|;
name|QRectF
name|borderRect
argument_list|(
name|cellRect
operator|.
name|left
argument_list|()
operator|-
name|border
argument_list|,
name|cellRect
operator|.
name|top
argument_list|()
operator|-
name|border
argument_list|,
name|cellRect
operator|.
name|width
argument_list|()
operator|+
name|border
argument_list|,
name|cellRect
operator|.
name|height
argument_list|()
operator|+
name|border
argument_list|)
decl_stmt|;
comment|// invert the border style for cells
name|QTextFrameFormat
operator|::
name|BorderStyle
name|cellBorder
init|=
name|table
operator|->
name|format
argument_list|()
operator|.
name|borderStyle
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|cellBorder
condition|)
block|{
case|case
name|QTextFrameFormat
operator|::
name|BorderStyle_Inset
case|:
name|cellBorder
operator|=
name|QTextFrameFormat
operator|::
name|BorderStyle_Outset
expr_stmt|;
break|break;
case|case
name|QTextFrameFormat
operator|::
name|BorderStyle_Outset
case|:
name|cellBorder
operator|=
name|QTextFrameFormat
operator|::
name|BorderStyle_Inset
expr_stmt|;
break|break;
case|case
name|QTextFrameFormat
operator|::
name|BorderStyle_Groove
case|:
name|cellBorder
operator|=
name|QTextFrameFormat
operator|::
name|BorderStyle_Ridge
expr_stmt|;
break|break;
case|case
name|QTextFrameFormat
operator|::
name|BorderStyle_Ridge
case|:
name|cellBorder
operator|=
name|QTextFrameFormat
operator|::
name|BorderStyle_Groove
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|qreal
name|topMargin
init|=
operator|(
name|td
operator|->
name|effectiveTopMargin
operator|+
name|td
operator|->
name|cellSpacing
operator|+
name|td
operator|->
name|border
operator|)
operator|.
name|toReal
argument_list|()
decl_stmt|;
name|qreal
name|bottomMargin
init|=
operator|(
name|td
operator|->
name|effectiveBottomMargin
operator|+
name|td
operator|->
name|cellSpacing
operator|+
name|td
operator|->
name|border
operator|)
operator|.
name|toReal
argument_list|()
decl_stmt|;
specifier|const
name|int
name|headerRowCount
init|=
name|qMin
argument_list|(
name|table
operator|->
name|format
argument_list|()
operator|.
name|headerRowCount
argument_list|()
argument_list|,
name|table
operator|->
name|rows
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|>=
name|headerRowCount
condition|)
name|topMargin
operator|+=
name|td
operator|->
name|headerHeight
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|drawBorder
argument_list|(
name|painter
argument_list|,
name|borderRect
argument_list|,
name|topMargin
argument_list|,
name|bottomMargin
argument_list|,
name|border
argument_list|,
name|table
operator|->
name|format
argument_list|()
operator|.
name|borderBrush
argument_list|()
argument_list|,
name|cellBorder
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|oldBrush
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QBrush
name|bg
init|=
name|cell
operator|.
name|format
argument_list|()
operator|.
name|background
argument_list|()
decl_stmt|;
specifier|const
name|QPointF
name|brushOrigin
init|=
name|painter
operator|->
name|brushOrigin
argument_list|()
decl_stmt|;
if|if
condition|(
name|bg
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
block|{
name|fillBackground
argument_list|(
name|painter
argument_list|,
name|cellRect
argument_list|,
name|bg
argument_list|,
name|cellRect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bg
operator|.
name|style
argument_list|()
operator|>
name|Qt
operator|::
name|SolidPattern
condition|)
name|painter
operator|->
name|setBrushOrigin
argument_list|(
name|cellRect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QFixed
name|verticalOffset
init|=
name|td
operator|->
name|cellVerticalOffsets
operator|.
name|at
argument_list|(
name|c
operator|+
name|r
operator|*
name|table
operator|->
name|columns
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QPointF
name|cellPos
init|=
name|QPointF
argument_list|(
name|cellRect
operator|.
name|left
argument_list|()
operator|+
name|leftPadding
operator|.
name|toReal
argument_list|()
argument_list|,
name|cellRect
operator|.
name|top
argument_list|()
operator|+
operator|(
name|topPadding
operator|+
name|verticalOffset
operator|)
operator|.
name|toReal
argument_list|()
argument_list|)
decl_stmt|;
name|QTextBlock
name|repaintBlock
decl_stmt|;
name|drawFlow
argument_list|(
name|cellPos
argument_list|,
name|painter
argument_list|,
name|cell_context
argument_list|,
name|cell
operator|.
name|begin
argument_list|()
argument_list|,
name|td
operator|->
name|childFrameMap
operator|.
name|values
argument_list|(
name|r
operator|+
name|c
operator|*
name|table
operator|->
name|rows
argument_list|()
argument_list|)
argument_list|,
operator|&
name|repaintBlock
argument_list|)
expr_stmt|;
if|if
condition|(
name|repaintBlock
operator|.
name|isValid
argument_list|()
condition|)
block|{
operator|*
name|cursorBlockNeedingRepaint
operator|=
name|repaintBlock
expr_stmt|;
operator|*
name|cursorBlockOffset
operator|=
name|cellPos
expr_stmt|;
block|}
if|if
condition|(
name|bg
operator|.
name|style
argument_list|()
operator|>
name|Qt
operator|::
name|SolidPattern
condition|)
name|painter
operator|->
name|setBrushOrigin
argument_list|(
name|brushOrigin
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawFlow
name|void
name|QTextDocumentLayoutPrivate
operator|::
name|drawFlow
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|offset
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
modifier|&
name|context
parameter_list|,
name|QTextFrame
operator|::
name|Iterator
name|it
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QTextFrame
modifier|*
argument_list|>
modifier|&
name|floats
parameter_list|,
name|QTextBlock
modifier|*
name|cursorBlockNeedingRepaint
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|inRootFrame
init|=
operator|(
operator|!
name|it
operator|.
name|atEnd
argument_list|()
operator|&&
name|it
operator|.
name|parentFrame
argument_list|()
operator|&&
name|it
operator|.
name|parentFrame
argument_list|()
operator|->
name|parentFrame
argument_list|()
operator|==
literal|0
operator|)
decl_stmt|;
name|QVector
argument_list|<
name|QCheckPoint
argument_list|>
operator|::
name|ConstIterator
name|lastVisibleCheckPoint
init|=
name|checkPoints
operator|.
name|end
argument_list|()
decl_stmt|;
if|if
condition|(
name|inRootFrame
operator|&&
name|context
operator|.
name|clip
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|lastVisibleCheckPoint
operator|=
name|std
operator|::
name|lower_bound
argument_list|(
name|checkPoints
operator|.
name|begin
argument_list|()
argument_list|,
name|checkPoints
operator|.
name|end
argument_list|()
argument_list|,
name|QFixed
operator|::
name|fromReal
argument_list|(
name|context
operator|.
name|clip
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QTextBlock
name|previousBlock
decl_stmt|;
name|QTextFrame
modifier|*
name|previousFrame
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
operator|!
name|it
operator|.
name|atEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QTextFrame
modifier|*
name|c
init|=
name|it
operator|.
name|currentFrame
argument_list|()
decl_stmt|;
if|if
condition|(
name|inRootFrame
operator|&&
operator|!
name|checkPoints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|currentPosInDoc
decl_stmt|;
if|if
condition|(
name|c
condition|)
name|currentPosInDoc
operator|=
name|c
operator|->
name|firstPosition
argument_list|()
expr_stmt|;
else|else
name|currentPosInDoc
operator|=
name|it
operator|.
name|currentBlock
argument_list|()
operator|.
name|position
argument_list|()
expr_stmt|;
comment|// if we're past what is already laid out then we're better off
comment|// not trying to draw things that may not be positioned correctly yet
if|if
condition|(
name|currentPosInDoc
operator|>=
name|checkPoints
operator|.
name|last
argument_list|()
operator|.
name|positionInFrame
condition|)
break|break;
if|if
condition|(
name|lastVisibleCheckPoint
operator|!=
name|checkPoints
operator|.
name|end
argument_list|()
operator|&&
name|context
operator|.
name|clip
operator|.
name|isValid
argument_list|()
operator|&&
name|currentPosInDoc
operator|>=
name|lastVisibleCheckPoint
operator|->
name|positionInFrame
condition|)
break|break;
block|}
if|if
condition|(
name|c
condition|)
name|drawFrame
argument_list|(
name|offset
argument_list|,
name|painter
argument_list|,
name|context
argument_list|,
name|c
argument_list|)
expr_stmt|;
else|else
block|{
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
name|pc
init|=
name|context
decl_stmt|;
if|if
condition|(
name|isEmptyBlockAfterTable
argument_list|(
name|it
operator|.
name|currentBlock
argument_list|()
argument_list|,
name|previousFrame
argument_list|)
condition|)
name|pc
operator|.
name|selections
operator|.
name|clear
argument_list|()
expr_stmt|;
name|drawBlock
argument_list|(
name|offset
argument_list|,
name|painter
argument_list|,
name|pc
argument_list|,
name|it
operator|.
name|currentBlock
argument_list|()
argument_list|,
name|inRootFrame
argument_list|)
expr_stmt|;
block|}
comment|// when entering a table and the previous block is empty
comment|// then layoutFlow 'hides' the block that just causes a
comment|// new line by positioning it /on/ the table border. as we
comment|// draw that block before the table itself the decoration
comment|// 'overpaints' the cursor and we need to paint it afterwards
comment|// again
if|if
condition|(
name|isEmptyBlockBeforeTable
argument_list|(
name|previousBlock
argument_list|,
name|previousBlock
operator|.
name|blockFormat
argument_list|()
argument_list|,
name|it
argument_list|)
operator|&&
name|previousBlock
operator|.
name|contains
argument_list|(
name|context
operator|.
name|cursorPosition
argument_list|)
condition|)
block|{
operator|*
name|cursorBlockNeedingRepaint
operator|=
name|previousBlock
expr_stmt|;
block|}
name|previousBlock
operator|=
name|it
operator|.
name|currentBlock
argument_list|()
expr_stmt|;
name|previousFrame
operator|=
name|c
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|floats
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextFrame
modifier|*
name|frame
init|=
name|floats
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isFrameFromInlineObject
argument_list|(
name|frame
argument_list|)
operator|||
name|frame
operator|->
name|frameFormat
argument_list|()
operator|.
name|position
argument_list|()
operator|==
name|QTextFrameFormat
operator|::
name|InFlow
condition|)
continue|continue;
specifier|const
name|int
name|pos
init|=
name|frame
operator|->
name|firstPosition
argument_list|()
operator|-
literal|1
decl_stmt|;
name|QTextCharFormat
name|format
init|=
cast|const_cast
argument_list|<
name|QTextDocumentLayout
operator|*
argument_list|>
argument_list|(
name|q
argument_list|)
operator|->
name|format
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|QTextObjectInterface
modifier|*
name|handler
init|=
name|q
operator|->
name|handlerForObject
argument_list|(
name|format
operator|.
name|objectType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
condition|)
block|{
name|QRectF
name|rect
init|=
name|frameBoundingRectInternal
argument_list|(
name|frame
argument_list|)
decl_stmt|;
name|handler
operator|->
name|drawObject
argument_list|(
name|painter
argument_list|,
name|rect
argument_list|,
name|document
argument_list|,
name|pos
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|drawBlock
name|void
name|QTextDocumentLayoutPrivate
operator|::
name|drawBlock
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|offset
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
modifier|&
name|context
parameter_list|,
name|QTextBlock
name|bl
parameter_list|,
name|bool
name|inRootFrame
parameter_list|)
specifier|const
block|{
specifier|const
name|QTextLayout
modifier|*
name|tl
init|=
name|bl
operator|.
name|layout
argument_list|()
decl_stmt|;
name|QRectF
name|r
init|=
name|tl
operator|->
name|boundingRect
argument_list|()
decl_stmt|;
name|r
operator|.
name|translate
argument_list|(
name|offset
operator|+
name|tl
operator|->
name|position
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|clip
operator|.
name|isValid
argument_list|()
operator|&&
operator|(
name|r
operator|.
name|bottom
argument_list|()
operator|<
name|context
operator|.
name|clip
operator|.
name|y
argument_list|()
operator|||
name|r
operator|.
name|top
argument_list|()
operator|>
name|context
operator|.
name|clip
operator|.
name|bottom
argument_list|()
operator|)
condition|)
return|return;
comment|//      LDEBUG<< debug_indent<< "drawBlock"<< bl.position()<< "at"<< offset<< "br"<< tl->boundingRect();
name|QTextBlockFormat
name|blockFormat
init|=
name|bl
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QBrush
name|bg
init|=
name|blockFormat
operator|.
name|background
argument_list|()
decl_stmt|;
if|if
condition|(
name|bg
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
block|{
name|QRectF
name|rect
init|=
name|r
decl_stmt|;
comment|// extend the background rectangle if we're in the root frame with NoWrap,
comment|// as the rect of the text block will then be only the width of the text
comment|// instead of the full page width
if|if
condition|(
name|inRootFrame
operator|&&
name|document
operator|->
name|pageSize
argument_list|()
operator|.
name|width
argument_list|()
operator|<=
literal|0
condition|)
block|{
specifier|const
name|QTextFrameData
modifier|*
name|fd
init|=
name|data
argument_list|(
name|document
operator|->
name|rootFrame
argument_list|()
argument_list|)
decl_stmt|;
name|rect
operator|.
name|setRight
argument_list|(
operator|(
name|fd
operator|->
name|size
operator|.
name|width
operator|-
name|fd
operator|->
name|rightMargin
operator|)
operator|.
name|toReal
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fillBackground
argument_list|(
name|painter
argument_list|,
name|rect
argument_list|,
name|bg
argument_list|,
name|r
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVector
argument_list|<
name|QTextLayout
operator|::
name|FormatRange
argument_list|>
name|selections
decl_stmt|;
name|int
name|blpos
init|=
name|bl
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|bllen
init|=
name|bl
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|const
name|QTextCharFormat
modifier|*
name|selFormat
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|context
operator|.
name|selections
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QAbstractTextDocumentLayout
operator|::
name|Selection
modifier|&
name|range
init|=
name|context
operator|.
name|selections
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|int
name|selStart
init|=
name|range
operator|.
name|cursor
operator|.
name|selectionStart
argument_list|()
operator|-
name|blpos
decl_stmt|;
specifier|const
name|int
name|selEnd
init|=
name|range
operator|.
name|cursor
operator|.
name|selectionEnd
argument_list|()
operator|-
name|blpos
decl_stmt|;
if|if
condition|(
name|selStart
argument_list|<
name|bllen
operator|&&
name|selEnd
argument_list|>
literal|0
operator|&&
name|selEnd
operator|>
name|selStart
condition|)
block|{
name|QTextLayout
operator|::
name|FormatRange
name|o
decl_stmt|;
name|o
operator|.
name|start
operator|=
name|selStart
expr_stmt|;
name|o
operator|.
name|length
operator|=
name|selEnd
operator|-
name|selStart
expr_stmt|;
name|o
operator|.
name|format
operator|=
name|range
operator|.
name|format
expr_stmt|;
name|selections
operator|.
name|append
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|range
operator|.
name|cursor
operator|.
name|hasSelection
argument_list|()
operator|&&
name|range
operator|.
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|FullWidthSelection
argument_list|)
operator|&&
name|bl
operator|.
name|contains
argument_list|(
name|range
operator|.
name|cursor
operator|.
name|position
argument_list|()
argument_list|)
condition|)
block|{
comment|// for full width selections we don't require an actual selection, just
comment|// a position to specify the line. that's more convenience in usage.
name|QTextLayout
operator|::
name|FormatRange
name|o
decl_stmt|;
name|QTextLine
name|l
init|=
name|tl
operator|->
name|lineForTextPosition
argument_list|(
name|range
operator|.
name|cursor
operator|.
name|position
argument_list|()
operator|-
name|blpos
argument_list|)
decl_stmt|;
name|o
operator|.
name|start
operator|=
name|l
operator|.
name|textStart
argument_list|()
expr_stmt|;
name|o
operator|.
name|length
operator|=
name|l
operator|.
name|textLength
argument_list|()
expr_stmt|;
if|if
condition|(
name|o
operator|.
name|start
operator|+
name|o
operator|.
name|length
operator|==
name|bllen
operator|-
literal|1
condition|)
operator|++
name|o
operator|.
name|length
expr_stmt|;
comment|// include newline
name|o
operator|.
name|format
operator|=
name|range
operator|.
name|format
expr_stmt|;
name|selections
operator|.
name|append
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|selStart
operator|<
literal|0
operator|&&
name|selEnd
operator|>=
literal|1
condition|)
name|selFormat
operator|=
operator|&
name|range
operator|.
name|format
expr_stmt|;
block|}
name|QTextObject
modifier|*
name|object
init|=
name|document
operator|->
name|objectForFormat
argument_list|(
name|bl
operator|.
name|blockFormat
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|&&
name|object
operator|->
name|format
argument_list|()
operator|.
name|toListFormat
argument_list|()
operator|.
name|style
argument_list|()
operator|!=
name|QTextListFormat
operator|::
name|ListStyleUndefined
condition|)
name|drawListItem
argument_list|(
name|offset
argument_list|,
name|painter
argument_list|,
name|context
argument_list|,
name|bl
argument_list|,
name|selFormat
argument_list|)
expr_stmt|;
name|QPen
name|oldPen
init|=
name|painter
operator|->
name|pen
argument_list|()
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|context
operator|.
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|tl
operator|->
name|draw
argument_list|(
name|painter
argument_list|,
name|offset
argument_list|,
name|selections
argument_list|,
name|context
operator|.
name|clip
operator|.
name|isValid
argument_list|()
condition|?
operator|(
name|context
operator|.
name|clip
operator|&
name|clipRect
operator|)
else|:
name|clipRect
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|context
operator|.
name|cursorPosition
operator|>=
name|blpos
operator|&&
name|context
operator|.
name|cursorPosition
operator|<
name|blpos
operator|+
name|bllen
operator|)
operator|||
operator|(
name|context
operator|.
name|cursorPosition
operator|<
operator|-
literal|1
operator|&&
operator|!
name|tl
operator|->
name|preeditAreaText
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|int
name|cpos
init|=
name|context
operator|.
name|cursorPosition
decl_stmt|;
if|if
condition|(
name|cpos
operator|<
operator|-
literal|1
condition|)
name|cpos
operator|=
name|tl
operator|->
name|preeditAreaPosition
argument_list|()
operator|-
operator|(
name|cpos
operator|+
literal|2
operator|)
expr_stmt|;
else|else
name|cpos
operator|-=
name|blpos
expr_stmt|;
name|tl
operator|->
name|drawCursor
argument_list|(
name|painter
argument_list|,
name|offset
argument_list|,
name|cpos
argument_list|,
name|cursorWidth
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blockFormat
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BlockTrailingHorizontalRulerWidth
argument_list|)
condition|)
block|{
specifier|const
name|qreal
name|width
init|=
name|blockFormat
operator|.
name|lengthProperty
argument_list|(
name|QTextFormat
operator|::
name|BlockTrailingHorizontalRulerWidth
argument_list|)
operator|.
name|value
argument_list|(
name|r
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|context
operator|.
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|)
argument_list|)
expr_stmt|;
name|qreal
name|y
init|=
name|r
operator|.
name|bottom
argument_list|()
decl_stmt|;
if|if
condition|(
name|bl
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
name|y
operator|=
name|r
operator|.
name|top
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
operator|/
literal|2
expr_stmt|;
specifier|const
name|qreal
name|middleX
init|=
name|r
operator|.
name|left
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
operator|/
literal|2
decl_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|QLineF
argument_list|(
name|middleX
operator|-
name|width
operator|/
literal|2
argument_list|,
name|y
argument_list|,
name|middleX
operator|+
name|width
operator|/
literal|2
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawListItem
name|void
name|QTextDocumentLayoutPrivate
operator|::
name|drawListItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|offset
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
modifier|&
name|context
parameter_list|,
name|QTextBlock
name|bl
parameter_list|,
specifier|const
name|QTextCharFormat
modifier|*
name|selectionFormat
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
specifier|const
name|QTextBlockFormat
name|blockFormat
init|=
name|bl
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
specifier|const
name|QTextCharFormat
name|charFormat
init|=
name|QTextCursor
argument_list|(
name|bl
argument_list|)
operator|.
name|charFormat
argument_list|()
decl_stmt|;
name|QFont
name|font
argument_list|(
name|charFormat
operator|.
name|font
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|paintDevice
argument_list|()
condition|)
name|font
operator|=
name|QFont
argument_list|(
name|font
argument_list|,
name|q
operator|->
name|paintDevice
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QFontMetrics
name|fontMetrics
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|QTextObject
modifier|*
specifier|const
name|object
init|=
name|document
operator|->
name|objectForFormat
argument_list|(
name|blockFormat
argument_list|)
decl_stmt|;
specifier|const
name|QTextListFormat
name|lf
init|=
name|object
operator|->
name|format
argument_list|()
operator|.
name|toListFormat
argument_list|()
decl_stmt|;
name|int
name|style
init|=
name|lf
operator|.
name|style
argument_list|()
decl_stmt|;
name|QString
name|itemText
decl_stmt|;
name|QSizeF
name|size
decl_stmt|;
if|if
condition|(
name|blockFormat
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|ListStyle
argument_list|)
condition|)
name|style
operator|=
name|QTextListFormat
operator|::
name|Style
argument_list|(
name|blockFormat
operator|.
name|intProperty
argument_list|(
name|QTextFormat
operator|::
name|ListStyle
argument_list|)
argument_list|)
expr_stmt|;
name|QTextLayout
modifier|*
name|layout
init|=
name|bl
operator|.
name|layout
argument_list|()
decl_stmt|;
if|if
condition|(
name|layout
operator|->
name|lineCount
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|QTextLine
name|firstLine
init|=
name|layout
operator|->
name|lineAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|firstLine
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QPointF
name|pos
init|=
operator|(
name|offset
operator|+
name|layout
operator|->
name|position
argument_list|()
operator|)
operator|.
name|toPoint
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|LayoutDirection
name|dir
init|=
name|bl
operator|.
name|textDirection
argument_list|()
decl_stmt|;
block|{
name|QRectF
name|textRect
init|=
name|firstLine
operator|.
name|naturalTextRect
argument_list|()
decl_stmt|;
name|pos
operator|+=
name|textRect
operator|.
name|topLeft
argument_list|()
operator|.
name|toPoint
argument_list|()
expr_stmt|;
if|if
condition|(
name|dir
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|pos
operator|.
name|rx
argument_list|()
operator|+=
name|textRect
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|style
condition|)
block|{
case|case
name|QTextListFormat
operator|::
name|ListDecimal
case|:
case|case
name|QTextListFormat
operator|::
name|ListLowerAlpha
case|:
case|case
name|QTextListFormat
operator|::
name|ListUpperAlpha
case|:
case|case
name|QTextListFormat
operator|::
name|ListLowerRoman
case|:
case|case
name|QTextListFormat
operator|::
name|ListUpperRoman
case|:
name|itemText
operator|=
cast|static_cast
argument_list|<
name|QTextList
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
operator|->
name|itemText
argument_list|(
name|bl
argument_list|)
expr_stmt|;
name|size
operator|.
name|setWidth
argument_list|(
name|fontMetrics
operator|.
name|width
argument_list|(
name|itemText
argument_list|)
argument_list|)
expr_stmt|;
name|size
operator|.
name|setHeight
argument_list|(
name|fontMetrics
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextListFormat
operator|::
name|ListSquare
case|:
case|case
name|QTextListFormat
operator|::
name|ListCircle
case|:
case|case
name|QTextListFormat
operator|::
name|ListDisc
case|:
name|size
operator|.
name|setWidth
argument_list|(
name|fontMetrics
operator|.
name|lineSpacing
argument_list|()
operator|/
literal|3
argument_list|)
expr_stmt|;
name|size
operator|.
name|setHeight
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextListFormat
operator|::
name|ListStyleUndefined
case|:
return|return;
default|default:
return|return;
block|}
name|QRectF
name|r
argument_list|(
name|pos
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|qreal
name|xoff
init|=
name|fontMetrics
operator|.
name|width
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|==
name|Qt
operator|::
name|LeftToRight
condition|)
name|xoff
operator|=
operator|-
name|xoff
operator|-
name|size
operator|.
name|width
argument_list|()
expr_stmt|;
name|r
operator|.
name|translate
argument_list|(
name|xoff
argument_list|,
operator|(
name|fontMetrics
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
name|size
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectionFormat
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|selectionFormat
operator|->
name|foreground
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|r
argument_list|,
name|selectionFormat
operator|->
name|background
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QBrush
name|fg
init|=
name|charFormat
operator|.
name|foreground
argument_list|()
decl_stmt|;
if|if
condition|(
name|fg
operator|==
name|Qt
operator|::
name|NoBrush
condition|)
name|fg
operator|=
name|context
operator|.
name|palette
operator|.
name|text
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|fg
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QBrush
name|brush
init|=
name|context
operator|.
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|style
condition|)
block|{
case|case
name|QTextListFormat
operator|::
name|ListDecimal
case|:
case|case
name|QTextListFormat
operator|::
name|ListLowerAlpha
case|:
case|case
name|QTextListFormat
operator|::
name|ListUpperAlpha
case|:
case|case
name|QTextListFormat
operator|::
name|ListLowerRoman
case|:
case|case
name|QTextListFormat
operator|::
name|ListUpperRoman
case|:
block|{
name|QTextLayout
name|layout
argument_list|(
name|itemText
argument_list|,
name|font
argument_list|,
name|q
operator|->
name|paintDevice
argument_list|()
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTextOption
name|option
argument_list|(
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignAbsolute
argument_list|)
decl_stmt|;
name|option
operator|.
name|setTextDirection
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|isValid
argument_list|()
condition|)
name|line
operator|.
name|setLeadingIncluded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|layout
operator|.
name|draw
argument_list|(
name|painter
argument_list|,
name|QPointF
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|pos
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QTextListFormat
operator|::
name|ListSquare
case|:
name|painter
operator|->
name|fillRect
argument_list|(
name|r
argument_list|,
name|brush
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextListFormat
operator|::
name|ListCircle
case|:
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|brush
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawEllipse
argument_list|(
name|r
operator|.
name|translated
argument_list|(
literal|0.5
argument_list|,
literal|0.5
argument_list|)
argument_list|)
expr_stmt|;
comment|// pixel align for sharper rendering
break|break;
case|case
name|QTextListFormat
operator|::
name|ListDisc
case|:
name|painter
operator|->
name|setBrush
argument_list|(
name|brush
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawEllipse
argument_list|(
name|r
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextListFormat
operator|::
name|ListStyleUndefined
case|:
break|break;
default|default:
break|break;
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|flowPosition
specifier|static
name|QFixed
name|flowPosition
parameter_list|(
specifier|const
name|QTextFrame
operator|::
name|iterator
name|it
parameter_list|)
block|{
if|if
condition|(
name|it
operator|.
name|atEnd
argument_list|()
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|it
operator|.
name|currentFrame
argument_list|()
condition|)
block|{
return|return
name|data
argument_list|(
name|it
operator|.
name|currentFrame
argument_list|()
argument_list|)
operator|->
name|position
operator|.
name|y
return|;
block|}
else|else
block|{
name|QTextBlock
name|block
init|=
name|it
operator|.
name|currentBlock
argument_list|()
decl_stmt|;
name|QTextLayout
modifier|*
name|layout
init|=
name|block
operator|.
name|layout
argument_list|()
decl_stmt|;
if|if
condition|(
name|layout
operator|->
name|lineCount
argument_list|()
operator|==
literal|0
condition|)
return|return
name|QFixed
operator|::
name|fromReal
argument_list|(
name|layout
operator|->
name|position
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
return|;
else|else
return|return
name|QFixed
operator|::
name|fromReal
argument_list|(
name|layout
operator|->
name|position
argument_list|()
operator|.
name|y
argument_list|()
operator|+
name|layout
operator|->
name|lineAt
argument_list|(
literal|0
argument_list|)
operator|.
name|y
argument_list|()
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|firstChildPos
specifier|static
name|QFixed
name|firstChildPos
parameter_list|(
specifier|const
name|QTextFrame
modifier|*
name|f
parameter_list|)
block|{
return|return
name|flowPosition
argument_list|(
name|f
operator|->
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|layoutCell
name|QTextLayoutStruct
name|QTextDocumentLayoutPrivate
operator|::
name|layoutCell
parameter_list|(
name|QTextTable
modifier|*
name|t
parameter_list|,
specifier|const
name|QTextTableCell
modifier|&
name|cell
parameter_list|,
name|QFixed
name|width
parameter_list|,
name|int
name|layoutFrom
parameter_list|,
name|int
name|layoutTo
parameter_list|,
name|QTextTableData
modifier|*
name|td
parameter_list|,
name|QFixed
name|absoluteTableY
parameter_list|,
name|bool
name|withPageBreaks
parameter_list|)
block|{
name|LDEBUG
operator|<<
literal|"layoutCell"
expr_stmt|;
name|QTextLayoutStruct
name|layoutStruct
decl_stmt|;
name|layoutStruct
operator|.
name|frame
operator|=
name|t
expr_stmt|;
name|layoutStruct
operator|.
name|minimumWidth
operator|=
literal|0
expr_stmt|;
name|layoutStruct
operator|.
name|maximumWidth
operator|=
name|QFIXED_MAX
expr_stmt|;
name|layoutStruct
operator|.
name|y
operator|=
literal|0
expr_stmt|;
specifier|const
name|QTextFormat
name|fmt
init|=
name|cell
operator|.
name|format
argument_list|()
decl_stmt|;
specifier|const
name|QFixed
name|topPadding
init|=
name|td
operator|->
name|topPadding
argument_list|(
name|fmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|withPageBreaks
condition|)
block|{
name|layoutStruct
operator|.
name|frameY
operator|=
name|absoluteTableY
operator|+
name|td
operator|->
name|rowPositions
operator|.
name|at
argument_list|(
name|cell
operator|.
name|row
argument_list|()
argument_list|)
operator|+
name|topPadding
expr_stmt|;
block|}
name|layoutStruct
operator|.
name|x_left
operator|=
literal|0
expr_stmt|;
name|layoutStruct
operator|.
name|x_right
operator|=
name|width
expr_stmt|;
comment|// we get called with different widths all the time (for example for figuring
comment|// out the min/max widths), so we always have to do the full layout ;(
comment|// also when for example in a table layoutFrom/layoutTo affect only one cell,
comment|// making that one cell grow the available width of the other cells may change
comment|// (shrink) and therefore when layoutCell gets called for them they have to
comment|// be re-laid out, even if layoutFrom/layoutTo is not in their range. Hence
comment|// this line:
name|layoutStruct
operator|.
name|pageHeight
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|document
operator|->
name|pageSize
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|layoutStruct
operator|.
name|pageHeight
operator|<
literal|0
operator|||
operator|!
name|withPageBreaks
condition|)
name|layoutStruct
operator|.
name|pageHeight
operator|=
name|QFIXED_MAX
expr_stmt|;
specifier|const
name|int
name|currentPage
init|=
name|layoutStruct
operator|.
name|currentPage
argument_list|()
decl_stmt|;
name|layoutStruct
operator|.
name|pageTopMargin
operator|=
name|td
operator|->
name|effectiveTopMargin
operator|+
name|td
operator|->
name|cellSpacing
operator|+
name|td
operator|->
name|border
operator|+
name|topPadding
expr_stmt|;
name|layoutStruct
operator|.
name|pageBottomMargin
operator|=
name|td
operator|->
name|effectiveBottomMargin
operator|+
name|td
operator|->
name|cellSpacing
operator|+
name|td
operator|->
name|border
operator|+
name|td
operator|->
name|bottomPadding
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|layoutStruct
operator|.
name|pageBottom
operator|=
operator|(
name|currentPage
operator|+
literal|1
operator|)
operator|*
name|layoutStruct
operator|.
name|pageHeight
operator|-
name|layoutStruct
operator|.
name|pageBottomMargin
expr_stmt|;
name|layoutStruct
operator|.
name|fullLayout
operator|=
literal|true
expr_stmt|;
name|QFixed
name|pageTop
init|=
name|currentPage
operator|*
name|layoutStruct
operator|.
name|pageHeight
operator|+
name|layoutStruct
operator|.
name|pageTopMargin
operator|-
name|layoutStruct
operator|.
name|frameY
decl_stmt|;
name|layoutStruct
operator|.
name|y
operator|=
name|qMax
argument_list|(
name|layoutStruct
operator|.
name|y
argument_list|,
name|pageTop
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|QTextFrame
modifier|*
argument_list|>
name|childFrames
init|=
name|td
operator|->
name|childFrameMap
operator|.
name|values
argument_list|(
name|cell
operator|.
name|row
argument_list|()
operator|+
name|cell
operator|.
name|column
argument_list|()
operator|*
name|t
operator|->
name|rows
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childFrames
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextFrame
modifier|*
name|frame
init|=
name|childFrames
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QTextFrameData
modifier|*
name|cd
init|=
name|data
argument_list|(
name|frame
argument_list|)
decl_stmt|;
name|cd
operator|->
name|sizeDirty
operator|=
literal|true
expr_stmt|;
block|}
name|layoutFlow
argument_list|(
name|cell
operator|.
name|begin
argument_list|()
argument_list|,
operator|&
name|layoutStruct
argument_list|,
name|layoutFrom
argument_list|,
name|layoutTo
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|QFixed
name|floatMinWidth
decl_stmt|;
comment|// floats that are located inside the text (like inline images) aren't taken into account by
comment|// layoutFlow with regards to the cell height (layoutStruct->y), so for a safety measure we
comment|// do that here. For example with<td><img align="right" src="..." />blah</td>
comment|// when the image happens to be higher than the text
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childFrames
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextFrame
modifier|*
name|frame
init|=
name|childFrames
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QTextFrameData
modifier|*
name|cd
init|=
name|data
argument_list|(
name|frame
argument_list|)
decl_stmt|;
if|if
condition|(
name|frame
operator|->
name|frameFormat
argument_list|()
operator|.
name|position
argument_list|()
operator|!=
name|QTextFrameFormat
operator|::
name|InFlow
condition|)
name|layoutStruct
operator|.
name|y
operator|=
name|qMax
argument_list|(
name|layoutStruct
operator|.
name|y
argument_list|,
name|cd
operator|->
name|position
operator|.
name|y
operator|+
name|cd
operator|->
name|size
operator|.
name|height
argument_list|)
expr_stmt|;
name|floatMinWidth
operator|=
name|qMax
argument_list|(
name|floatMinWidth
argument_list|,
name|cd
operator|->
name|minimumWidth
argument_list|)
expr_stmt|;
block|}
comment|// constraint the maximumWidth by the minimum width of the fixed size floats, to
comment|// keep them visible
name|layoutStruct
operator|.
name|maximumWidth
operator|=
name|qMax
argument_list|(
name|layoutStruct
operator|.
name|maximumWidth
argument_list|,
name|floatMinWidth
argument_list|)
expr_stmt|;
comment|// as floats in cells get added to the table's float list but must not affect
comment|// floats in other cells we must clear the list here.
name|data
argument_list|(
name|t
argument_list|)
operator|->
name|floats
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//    qDebug()<< "layoutCell done";
return|return
name|layoutStruct
return|;
block|}
end_function
begin_function
DECL|function|layoutTable
name|QRectF
name|QTextDocumentLayoutPrivate
operator|::
name|layoutTable
parameter_list|(
name|QTextTable
modifier|*
name|table
parameter_list|,
name|int
name|layoutFrom
parameter_list|,
name|int
name|layoutTo
parameter_list|,
name|QFixed
name|parentY
parameter_list|)
block|{
name|LDEBUG
operator|<<
literal|"layoutTable"
expr_stmt|;
name|QTextTableData
modifier|*
name|td
init|=
cast|static_cast
argument_list|<
name|QTextTableData
operator|*
argument_list|>
argument_list|(
name|data
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|td
operator|->
name|sizeDirty
argument_list|)
expr_stmt|;
specifier|const
name|int
name|rows
init|=
name|table
operator|->
name|rows
argument_list|()
decl_stmt|;
specifier|const
name|int
name|columns
init|=
name|table
operator|->
name|columns
argument_list|()
decl_stmt|;
specifier|const
name|QTextTableFormat
name|fmt
init|=
name|table
operator|->
name|format
argument_list|()
decl_stmt|;
name|td
operator|->
name|childFrameMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|{
specifier|const
name|QList
argument_list|<
name|QTextFrame
modifier|*
argument_list|>
name|children
init|=
name|table
operator|->
name|childFrames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextFrame
modifier|*
name|frame
init|=
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
name|frame
operator|->
name|firstPosition
argument_list|()
argument_list|)
decl_stmt|;
name|td
operator|->
name|childFrameMap
operator|.
name|insertMulti
argument_list|(
name|cell
operator|.
name|row
argument_list|()
operator|+
name|cell
operator|.
name|column
argument_list|()
operator|*
name|rows
argument_list|,
name|frame
argument_list|)
expr_stmt|;
block|}
block|}
name|QVector
argument_list|<
name|QTextLength
argument_list|>
name|columnWidthConstraints
init|=
name|fmt
operator|.
name|columnWidthConstraints
argument_list|()
decl_stmt|;
if|if
condition|(
name|columnWidthConstraints
operator|.
name|size
argument_list|()
operator|!=
name|columns
condition|)
name|columnWidthConstraints
operator|.
name|resize
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|columnWidthConstraints
operator|.
name|count
argument_list|()
operator|==
name|columns
argument_list|)
expr_stmt|;
specifier|const
name|QFixed
name|cellSpacing
init|=
name|td
operator|->
name|cellSpacing
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|scaleToDevice
argument_list|(
name|fmt
operator|.
name|cellSpacing
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|td
operator|->
name|deviceScale
operator|=
name|scaleToDevice
argument_list|(
name|qreal
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|td
operator|->
name|cellPadding
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|scaleToDevice
argument_list|(
name|fmt
operator|.
name|cellPadding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QFixed
name|leftMargin
init|=
name|td
operator|->
name|leftMargin
operator|+
name|td
operator|->
name|border
operator|+
name|td
operator|->
name|padding
decl_stmt|;
specifier|const
name|QFixed
name|rightMargin
init|=
name|td
operator|->
name|rightMargin
operator|+
name|td
operator|->
name|border
operator|+
name|td
operator|->
name|padding
decl_stmt|;
specifier|const
name|QFixed
name|topMargin
init|=
name|td
operator|->
name|topMargin
operator|+
name|td
operator|->
name|border
operator|+
name|td
operator|->
name|padding
decl_stmt|;
specifier|const
name|QFixed
name|absoluteTableY
init|=
name|parentY
operator|+
name|td
operator|->
name|position
operator|.
name|y
decl_stmt|;
specifier|const
name|QTextOption
operator|::
name|WrapMode
name|oldDefaultWrapMode
init|=
name|docPrivate
operator|->
name|defaultTextOption
operator|.
name|wrapMode
argument_list|()
decl_stmt|;
name|recalc_minmax_widths
label|:
name|QFixed
name|remainingWidth
init|=
name|td
operator|->
name|contentsWidth
decl_stmt|;
comment|// two (vertical) borders per cell per column
name|remainingWidth
operator|-=
name|columns
operator|*
literal|2
operator|*
name|td
operator|->
name|border
expr_stmt|;
comment|// inter-cell spacing
name|remainingWidth
operator|-=
operator|(
name|columns
operator|-
literal|1
operator|)
operator|*
name|cellSpacing
expr_stmt|;
comment|// cell spacing at the left and right hand side
name|remainingWidth
operator|-=
literal|2
operator|*
name|cellSpacing
expr_stmt|;
comment|// remember the width used to distribute to percentaged columns
specifier|const
name|QFixed
name|initialTotalWidth
init|=
name|remainingWidth
decl_stmt|;
name|td
operator|->
name|widths
operator|.
name|resize
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|td
operator|->
name|widths
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|td
operator|->
name|minWidths
operator|.
name|resize
argument_list|(
name|columns
argument_list|)
expr_stmt|;
comment|// start with a minimum width of 0. totally empty
comment|// cells of default created tables are invisible otherwise
comment|// and therefore hardly editable
name|td
operator|->
name|minWidths
operator|.
name|fill
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|td
operator|->
name|maxWidths
operator|.
name|resize
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|td
operator|->
name|maxWidths
operator|.
name|fill
argument_list|(
name|QFIXED_MAX
argument_list|)
expr_stmt|;
comment|// calculate minimum and maximum sizes of the columns
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|rows
condition|;
operator|++
name|row
control|)
block|{
specifier|const
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
name|row
argument_list|,
name|i
argument_list|)
decl_stmt|;
specifier|const
name|int
name|cspan
init|=
name|cell
operator|.
name|columnSpan
argument_list|()
decl_stmt|;
if|if
condition|(
name|cspan
operator|>
literal|1
operator|&&
name|i
operator|!=
name|cell
operator|.
name|column
argument_list|()
condition|)
continue|continue;
specifier|const
name|QTextFormat
name|fmt
init|=
name|cell
operator|.
name|format
argument_list|()
decl_stmt|;
specifier|const
name|QFixed
name|leftPadding
init|=
name|td
operator|->
name|leftPadding
argument_list|(
name|fmt
argument_list|)
decl_stmt|;
specifier|const
name|QFixed
name|rightPadding
init|=
name|td
operator|->
name|rightPadding
argument_list|(
name|fmt
argument_list|)
decl_stmt|;
specifier|const
name|QFixed
name|widthPadding
init|=
name|leftPadding
operator|+
name|rightPadding
decl_stmt|;
comment|// to figure out the min and the max width lay out the cell at
comment|// maximum width. otherwise the maxwidth calculation sometimes
comment|// returns wrong values
name|QTextLayoutStruct
name|layoutStruct
init|=
name|layoutCell
argument_list|(
name|table
argument_list|,
name|cell
argument_list|,
name|QFIXED_MAX
argument_list|,
name|layoutFrom
argument_list|,
name|layoutTo
argument_list|,
name|td
argument_list|,
name|absoluteTableY
argument_list|,
comment|/*withPageBreaks =*/
literal|false
argument_list|)
decl_stmt|;
comment|// distribute the minimum width over all columns the cell spans
name|QFixed
name|widthToDistribute
init|=
name|layoutStruct
operator|.
name|minimumWidth
operator|+
name|widthPadding
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|cspan
condition|;
operator|++
name|n
control|)
block|{
specifier|const
name|int
name|col
init|=
name|i
operator|+
name|n
decl_stmt|;
name|QFixed
name|w
init|=
name|widthToDistribute
operator|/
operator|(
name|cspan
operator|-
name|n
operator|)
decl_stmt|;
name|td
operator|->
name|minWidths
index|[
name|col
index|]
operator|=
name|qMax
argument_list|(
name|td
operator|->
name|minWidths
operator|.
name|at
argument_list|(
name|col
argument_list|)
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|widthToDistribute
operator|-=
name|td
operator|->
name|minWidths
operator|.
name|at
argument_list|(
name|col
argument_list|)
expr_stmt|;
if|if
condition|(
name|widthToDistribute
operator|<=
literal|0
condition|)
break|break;
block|}
name|QFixed
name|maxW
init|=
name|td
operator|->
name|maxWidths
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|layoutStruct
operator|.
name|maximumWidth
operator|!=
name|QFIXED_MAX
condition|)
block|{
if|if
condition|(
name|maxW
operator|==
name|QFIXED_MAX
condition|)
name|maxW
operator|=
name|layoutStruct
operator|.
name|maximumWidth
operator|+
name|widthPadding
expr_stmt|;
else|else
name|maxW
operator|=
name|qMax
argument_list|(
name|maxW
argument_list|,
name|layoutStruct
operator|.
name|maximumWidth
operator|+
name|widthPadding
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxW
operator|==
name|QFIXED_MAX
condition|)
continue|continue;
name|widthToDistribute
operator|=
name|maxW
expr_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|cspan
condition|;
operator|++
name|n
control|)
block|{
specifier|const
name|int
name|col
init|=
name|i
operator|+
name|n
decl_stmt|;
name|QFixed
name|w
init|=
name|widthToDistribute
operator|/
operator|(
name|cspan
operator|-
name|n
operator|)
decl_stmt|;
name|td
operator|->
name|maxWidths
index|[
name|col
index|]
operator|=
name|qMax
argument_list|(
name|td
operator|->
name|minWidths
operator|.
name|at
argument_list|(
name|col
argument_list|)
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|widthToDistribute
operator|-=
name|td
operator|->
name|maxWidths
operator|.
name|at
argument_list|(
name|col
argument_list|)
expr_stmt|;
if|if
condition|(
name|widthToDistribute
operator|<=
literal|0
condition|)
break|break;
block|}
block|}
block|}
comment|// set fixed values, figure out total percentages used and number of
comment|// variable length cells. Also assign the minimum width for variable columns.
name|QFixed
name|totalPercentage
decl_stmt|;
name|int
name|variableCols
init|=
literal|0
decl_stmt|;
name|QFixed
name|totalMinWidth
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QTextLength
modifier|&
name|length
init|=
name|columnWidthConstraints
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|.
name|type
argument_list|()
operator|==
name|QTextLength
operator|::
name|FixedLength
condition|)
block|{
name|td
operator|->
name|minWidths
index|[
name|i
index|]
operator|=
name|td
operator|->
name|widths
index|[
name|i
index|]
operator|=
name|qMax
argument_list|(
name|scaleToDevice
argument_list|(
name|QFixed
operator|::
name|fromReal
argument_list|(
name|length
operator|.
name|rawValue
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|td
operator|->
name|minWidths
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|remainingWidth
operator|-=
name|td
operator|->
name|widths
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|length
operator|.
name|type
argument_list|()
operator|==
name|QTextLength
operator|::
name|PercentageLength
condition|)
block|{
name|totalPercentage
operator|+=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|length
operator|.
name|rawValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|length
operator|.
name|type
argument_list|()
operator|==
name|QTextLength
operator|::
name|VariableLength
condition|)
block|{
name|variableCols
operator|++
expr_stmt|;
name|td
operator|->
name|widths
index|[
name|i
index|]
operator|=
name|td
operator|->
name|minWidths
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|remainingWidth
operator|-=
name|td
operator|->
name|minWidths
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|totalMinWidth
operator|+=
name|td
operator|->
name|minWidths
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|// set percentage values
block|{
specifier|const
name|QFixed
name|totalPercentagedWidth
init|=
name|initialTotalWidth
operator|*
name|totalPercentage
operator|/
literal|100
decl_stmt|;
name|QFixed
name|remainingMinWidths
init|=
name|totalMinWidth
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
condition|;
operator|++
name|i
control|)
block|{
name|remainingMinWidths
operator|-=
name|td
operator|->
name|minWidths
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|columnWidthConstraints
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QTextLength
operator|::
name|PercentageLength
condition|)
block|{
specifier|const
name|QFixed
name|allottedPercentage
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|columnWidthConstraints
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|rawValue
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QFixed
name|percentWidth
init|=
name|totalPercentagedWidth
operator|*
name|allottedPercentage
operator|/
name|totalPercentage
decl_stmt|;
if|if
condition|(
name|percentWidth
operator|>=
name|td
operator|->
name|minWidths
operator|.
name|at
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|td
operator|->
name|widths
index|[
name|i
index|]
operator|=
name|qBound
argument_list|(
name|td
operator|->
name|minWidths
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|percentWidth
argument_list|,
name|remainingWidth
operator|-
name|remainingMinWidths
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|td
operator|->
name|widths
index|[
name|i
index|]
operator|=
name|td
operator|->
name|minWidths
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|remainingWidth
operator|-=
name|td
operator|->
name|widths
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// for variable columns distribute the remaining space
if|if
condition|(
name|variableCols
operator|>
literal|0
operator|&&
name|remainingWidth
operator|>
literal|0
condition|)
block|{
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
name|columnsWithProperMaxSize
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|columnWidthConstraints
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QTextLength
operator|::
name|VariableLength
operator|&&
name|td
operator|->
name|maxWidths
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|!=
name|QFIXED_MAX
condition|)
name|columnsWithProperMaxSize
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QFixed
name|lastRemainingWidth
init|=
name|remainingWidth
decl_stmt|;
while|while
condition|(
name|remainingWidth
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|columnsWithProperMaxSize
operator|.
name|count
argument_list|()
condition|;
operator|++
name|k
control|)
block|{
specifier|const
name|int
name|col
init|=
name|columnsWithProperMaxSize
index|[
name|k
index|]
decl_stmt|;
specifier|const
name|int
name|colsLeft
init|=
name|columnsWithProperMaxSize
operator|.
name|count
argument_list|()
operator|-
name|k
decl_stmt|;
specifier|const
name|QFixed
name|w
init|=
name|qMin
argument_list|(
name|td
operator|->
name|maxWidths
operator|.
name|at
argument_list|(
name|col
argument_list|)
operator|-
name|td
operator|->
name|widths
operator|.
name|at
argument_list|(
name|col
argument_list|)
argument_list|,
name|remainingWidth
operator|/
name|colsLeft
argument_list|)
decl_stmt|;
name|td
operator|->
name|widths
index|[
name|col
index|]
operator|+=
name|w
expr_stmt|;
name|remainingWidth
operator|-=
name|w
expr_stmt|;
block|}
if|if
condition|(
name|remainingWidth
operator|==
name|lastRemainingWidth
condition|)
break|break;
name|lastRemainingWidth
operator|=
name|remainingWidth
expr_stmt|;
block|}
if|if
condition|(
name|remainingWidth
operator|>
literal|0
comment|// don't unnecessarily grow variable length sized tables
operator|&&
name|fmt
operator|.
name|width
argument_list|()
operator|.
name|type
argument_list|()
operator|!=
name|QTextLength
operator|::
name|VariableLength
condition|)
block|{
specifier|const
name|QFixed
name|widthPerAnySizedCol
init|=
name|remainingWidth
operator|/
name|variableCols
decl_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|columns
condition|;
operator|++
name|col
control|)
block|{
if|if
condition|(
name|columnWidthConstraints
operator|.
name|at
argument_list|(
name|col
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QTextLength
operator|::
name|VariableLength
condition|)
name|td
operator|->
name|widths
index|[
name|col
index|]
operator|+=
name|widthPerAnySizedCol
expr_stmt|;
block|}
block|}
block|}
name|td
operator|->
name|columnPositions
operator|.
name|resize
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|td
operator|->
name|columnPositions
index|[
literal|0
index|]
operator|=
name|leftMargin
comment|/*includes table border*/
operator|+
name|cellSpacing
operator|+
name|td
operator|->
name|border
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|columns
condition|;
operator|++
name|i
control|)
name|td
operator|->
name|columnPositions
index|[
name|i
index|]
operator|=
name|td
operator|->
name|columnPositions
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|+
name|td
operator|->
name|widths
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|+
literal|2
operator|*
name|td
operator|->
name|border
operator|+
name|cellSpacing
expr_stmt|;
comment|// - margin to compensate the + margin in columnPositions[0]
specifier|const
name|QFixed
name|contentsWidth
init|=
name|td
operator|->
name|columnPositions
operator|.
name|last
argument_list|()
operator|+
name|td
operator|->
name|widths
operator|.
name|last
argument_list|()
operator|+
name|td
operator|->
name|padding
operator|+
name|td
operator|->
name|border
operator|+
name|cellSpacing
operator|-
name|leftMargin
decl_stmt|;
comment|// if the table is too big and causes an overflow re-do the layout with WrapAnywhere as wrap
comment|// mode
if|if
condition|(
name|docPrivate
operator|->
name|defaultTextOption
operator|.
name|wrapMode
argument_list|()
operator|==
name|QTextOption
operator|::
name|WrapAtWordBoundaryOrAnywhere
operator|&&
name|contentsWidth
operator|>
name|td
operator|->
name|contentsWidth
condition|)
block|{
name|docPrivate
operator|->
name|defaultTextOption
operator|.
name|setWrapMode
argument_list|(
name|QTextOption
operator|::
name|WrapAnywhere
argument_list|)
expr_stmt|;
comment|// go back to the top of the function
goto|goto
name|recalc_minmax_widths
goto|;
block|}
name|td
operator|->
name|contentsWidth
operator|=
name|contentsWidth
expr_stmt|;
name|docPrivate
operator|->
name|defaultTextOption
operator|.
name|setWrapMode
argument_list|(
name|oldDefaultWrapMode
argument_list|)
expr_stmt|;
name|td
operator|->
name|heights
operator|.
name|resize
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|td
operator|->
name|heights
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|td
operator|->
name|rowPositions
operator|.
name|resize
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|td
operator|->
name|rowPositions
index|[
literal|0
index|]
operator|=
name|topMargin
comment|/*includes table border*/
operator|+
name|cellSpacing
operator|+
name|td
operator|->
name|border
expr_stmt|;
name|bool
name|haveRowSpannedCells
init|=
literal|false
decl_stmt|;
comment|// need to keep track of cell heights for vertical alignment
name|QVector
argument_list|<
name|QFixed
argument_list|>
name|cellHeights
decl_stmt|;
name|cellHeights
operator|.
name|reserve
argument_list|(
name|rows
operator|*
name|columns
argument_list|)
expr_stmt|;
name|QFixed
name|pageHeight
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|document
operator|->
name|pageSize
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pageHeight
operator|<=
literal|0
condition|)
name|pageHeight
operator|=
name|QFIXED_MAX
expr_stmt|;
name|QVector
argument_list|<
name|QFixed
argument_list|>
name|heightToDistribute
decl_stmt|;
name|heightToDistribute
operator|.
name|resize
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|td
operator|->
name|headerHeight
operator|=
literal|0
expr_stmt|;
specifier|const
name|int
name|headerRowCount
init|=
name|qMin
argument_list|(
name|table
operator|->
name|format
argument_list|()
operator|.
name|headerRowCount
argument_list|()
argument_list|,
name|rows
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QFixed
name|originalTopMargin
init|=
name|td
operator|->
name|effectiveTopMargin
decl_stmt|;
name|bool
name|hasDroppedTable
init|=
literal|false
decl_stmt|;
comment|// now that we have the column widths we can lay out all cells with the right width.
comment|// spanning cells are only allowed to grow the last row spanned by the cell.
comment|//
comment|// ### this could be made faster by iterating over the cells array of QTextTable
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rows
condition|;
operator|++
name|r
control|)
block|{
name|td
operator|->
name|calcRowPosition
argument_list|(
name|r
argument_list|)
expr_stmt|;
specifier|const
name|int
name|tableStartPage
init|=
operator|(
name|absoluteTableY
operator|/
name|pageHeight
operator|)
operator|.
name|truncate
argument_list|()
decl_stmt|;
specifier|const
name|int
name|currentPage
init|=
operator|(
operator|(
name|td
operator|->
name|rowPositions
index|[
name|r
index|]
operator|+
name|absoluteTableY
operator|)
operator|/
name|pageHeight
operator|)
operator|.
name|truncate
argument_list|()
decl_stmt|;
specifier|const
name|QFixed
name|pageBottom
init|=
operator|(
name|currentPage
operator|+
literal|1
operator|)
operator|*
name|pageHeight
operator|-
name|td
operator|->
name|effectiveBottomMargin
operator|-
name|absoluteTableY
operator|-
name|cellSpacing
operator|-
name|td
operator|->
name|border
decl_stmt|;
specifier|const
name|QFixed
name|pageTop
init|=
name|currentPage
operator|*
name|pageHeight
operator|+
name|td
operator|->
name|effectiveTopMargin
operator|-
name|absoluteTableY
operator|+
name|cellSpacing
operator|+
name|td
operator|->
name|border
decl_stmt|;
specifier|const
name|QFixed
name|nextPageTop
init|=
name|pageTop
operator|+
name|pageHeight
decl_stmt|;
if|if
condition|(
name|td
operator|->
name|rowPositions
index|[
name|r
index|]
operator|>
name|pageBottom
condition|)
name|td
operator|->
name|rowPositions
index|[
name|r
index|]
operator|=
name|nextPageTop
expr_stmt|;
elseif|else
if|if
condition|(
name|td
operator|->
name|rowPositions
index|[
name|r
index|]
operator|<
name|pageTop
condition|)
name|td
operator|->
name|rowPositions
index|[
name|r
index|]
operator|=
name|pageTop
expr_stmt|;
name|bool
name|dropRowToNextPage
init|=
literal|true
decl_stmt|;
name|int
name|cellCountBeforeRow
init|=
name|cellHeights
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// if we drop the row to the next page we need to subtract the drop
comment|// distance from any row spanning cells
name|QFixed
name|dropDistance
init|=
literal|0
decl_stmt|;
name|relayout
label|:
specifier|const
name|int
name|rowStartPage
init|=
operator|(
operator|(
name|td
operator|->
name|rowPositions
index|[
name|r
index|]
operator|+
name|absoluteTableY
operator|)
operator|/
name|pageHeight
operator|)
operator|.
name|truncate
argument_list|()
decl_stmt|;
comment|// if any of the header rows or the first non-header row start on the next page
comment|// then the entire header should be dropped
if|if
condition|(
name|r
operator|<=
name|headerRowCount
operator|&&
name|rowStartPage
operator|>
name|tableStartPage
operator|&&
operator|!
name|hasDroppedTable
condition|)
block|{
name|td
operator|->
name|rowPositions
index|[
literal|0
index|]
operator|=
name|nextPageTop
expr_stmt|;
name|cellHeights
operator|.
name|clear
argument_list|()
expr_stmt|;
name|td
operator|->
name|effectiveTopMargin
operator|=
name|originalTopMargin
expr_stmt|;
name|hasDroppedTable
operator|=
literal|true
expr_stmt|;
name|r
operator|=
operator|-
literal|1
expr_stmt|;
continue|continue;
block|}
name|int
name|rowCellCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columns
condition|;
operator|++
name|c
control|)
block|{
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
decl_stmt|;
specifier|const
name|int
name|rspan
init|=
name|cell
operator|.
name|rowSpan
argument_list|()
decl_stmt|;
specifier|const
name|int
name|cspan
init|=
name|cell
operator|.
name|columnSpan
argument_list|()
decl_stmt|;
if|if
condition|(
name|cspan
operator|>
literal|1
operator|&&
name|cell
operator|.
name|column
argument_list|()
operator|!=
name|c
condition|)
continue|continue;
if|if
condition|(
name|rspan
operator|>
literal|1
condition|)
block|{
name|haveRowSpannedCells
operator|=
literal|true
expr_stmt|;
specifier|const
name|int
name|cellRow
init|=
name|cell
operator|.
name|row
argument_list|()
decl_stmt|;
if|if
condition|(
name|cellRow
operator|!=
name|r
condition|)
block|{
comment|// the last row gets all the remaining space
if|if
condition|(
name|cellRow
operator|+
name|rspan
operator|-
literal|1
operator|==
name|r
condition|)
name|td
operator|->
name|heights
index|[
name|r
index|]
operator|=
name|qMax
argument_list|(
name|td
operator|->
name|heights
operator|.
name|at
argument_list|(
name|r
argument_list|)
argument_list|,
name|heightToDistribute
operator|.
name|at
argument_list|(
name|c
argument_list|)
operator|-
name|dropDistance
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
specifier|const
name|QTextFormat
name|fmt
init|=
name|cell
operator|.
name|format
argument_list|()
decl_stmt|;
specifier|const
name|QFixed
name|topPadding
init|=
name|td
operator|->
name|topPadding
argument_list|(
name|fmt
argument_list|)
decl_stmt|;
specifier|const
name|QFixed
name|bottomPadding
init|=
name|td
operator|->
name|bottomPadding
argument_list|(
name|fmt
argument_list|)
decl_stmt|;
specifier|const
name|QFixed
name|leftPadding
init|=
name|td
operator|->
name|leftPadding
argument_list|(
name|fmt
argument_list|)
decl_stmt|;
specifier|const
name|QFixed
name|rightPadding
init|=
name|td
operator|->
name|rightPadding
argument_list|(
name|fmt
argument_list|)
decl_stmt|;
specifier|const
name|QFixed
name|widthPadding
init|=
name|leftPadding
operator|+
name|rightPadding
decl_stmt|;
operator|++
name|rowCellCount
expr_stmt|;
specifier|const
name|QFixed
name|width
init|=
name|td
operator|->
name|cellWidth
argument_list|(
name|c
argument_list|,
name|cspan
argument_list|)
operator|-
name|widthPadding
decl_stmt|;
name|QTextLayoutStruct
name|layoutStruct
init|=
name|layoutCell
argument_list|(
name|table
argument_list|,
name|cell
argument_list|,
name|width
argument_list|,
name|layoutFrom
argument_list|,
name|layoutTo
argument_list|,
name|td
argument_list|,
name|absoluteTableY
argument_list|,
comment|/*withPageBreaks =*/
literal|true
argument_list|)
decl_stmt|;
specifier|const
name|QFixed
name|height
init|=
name|layoutStruct
operator|.
name|y
operator|+
name|bottomPadding
operator|+
name|topPadding
decl_stmt|;
if|if
condition|(
name|rspan
operator|>
literal|1
condition|)
name|heightToDistribute
index|[
name|c
index|]
operator|=
name|height
operator|+
name|dropDistance
expr_stmt|;
else|else
name|td
operator|->
name|heights
index|[
name|r
index|]
operator|=
name|qMax
argument_list|(
name|td
operator|->
name|heights
operator|.
name|at
argument_list|(
name|r
argument_list|)
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|cellHeights
operator|.
name|append
argument_list|(
name|layoutStruct
operator|.
name|y
argument_list|)
expr_stmt|;
name|QFixed
name|childPos
init|=
name|td
operator|->
name|rowPositions
operator|.
name|at
argument_list|(
name|r
argument_list|)
operator|+
name|topPadding
operator|+
name|flowPosition
argument_list|(
name|cell
operator|.
name|begin
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|childPos
operator|<
name|pageBottom
condition|)
name|dropRowToNextPage
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|rowCellCount
operator|>
literal|0
operator|&&
name|dropRowToNextPage
condition|)
block|{
name|dropDistance
operator|=
name|nextPageTop
operator|-
name|td
operator|->
name|rowPositions
index|[
name|r
index|]
expr_stmt|;
name|td
operator|->
name|rowPositions
index|[
name|r
index|]
operator|=
name|nextPageTop
expr_stmt|;
name|td
operator|->
name|heights
index|[
name|r
index|]
operator|=
literal|0
expr_stmt|;
name|dropRowToNextPage
operator|=
literal|false
expr_stmt|;
name|cellHeights
operator|.
name|resize
argument_list|(
name|cellCountBeforeRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|>
name|headerRowCount
condition|)
name|td
operator|->
name|heights
index|[
name|r
operator|-
literal|1
index|]
operator|=
name|pageBottom
operator|-
name|td
operator|->
name|rowPositions
index|[
name|r
operator|-
literal|1
index|]
expr_stmt|;
goto|goto
name|relayout
goto|;
block|}
if|if
condition|(
name|haveRowSpannedCells
condition|)
block|{
specifier|const
name|QFixed
name|effectiveHeight
init|=
name|td
operator|->
name|heights
operator|.
name|at
argument_list|(
name|r
argument_list|)
operator|+
name|td
operator|->
name|border
operator|+
name|cellSpacing
operator|+
name|td
operator|->
name|border
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columns
condition|;
operator|++
name|c
control|)
name|heightToDistribute
index|[
name|c
index|]
operator|=
name|qMax
argument_list|(
name|heightToDistribute
operator|.
name|at
argument_list|(
name|c
argument_list|)
operator|-
name|effectiveHeight
operator|-
name|dropDistance
argument_list|,
name|QFixed
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|==
name|headerRowCount
operator|-
literal|1
condition|)
block|{
name|td
operator|->
name|headerHeight
operator|=
name|td
operator|->
name|rowPositions
index|[
name|r
index|]
operator|+
name|td
operator|->
name|heights
index|[
name|r
index|]
operator|-
name|td
operator|->
name|rowPositions
index|[
literal|0
index|]
operator|+
name|td
operator|->
name|cellSpacing
operator|+
literal|2
operator|*
name|td
operator|->
name|border
expr_stmt|;
name|td
operator|->
name|headerHeight
operator|-=
name|td
operator|->
name|headerHeight
operator|*
operator|(
name|td
operator|->
name|headerHeight
operator|/
name|pageHeight
operator|)
operator|.
name|truncate
argument_list|()
expr_stmt|;
name|td
operator|->
name|effectiveTopMargin
operator|+=
name|td
operator|->
name|headerHeight
expr_stmt|;
block|}
block|}
name|td
operator|->
name|effectiveTopMargin
operator|=
name|originalTopMargin
expr_stmt|;
comment|// now that all cells have been properly laid out, we can compute the
comment|// vertical offsets for vertical alignment
name|td
operator|->
name|cellVerticalOffsets
operator|.
name|resize
argument_list|(
name|rows
operator|*
name|columns
argument_list|)
expr_stmt|;
name|int
name|cellIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rows
condition|;
operator|++
name|r
control|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columns
condition|;
operator|++
name|c
control|)
block|{
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|row
argument_list|()
operator|!=
name|r
operator|||
name|cell
operator|.
name|column
argument_list|()
operator|!=
name|c
condition|)
continue|continue;
specifier|const
name|int
name|rowSpan
init|=
name|cell
operator|.
name|rowSpan
argument_list|()
decl_stmt|;
specifier|const
name|QFixed
name|availableHeight
init|=
name|td
operator|->
name|rowPositions
operator|.
name|at
argument_list|(
name|r
operator|+
name|rowSpan
operator|-
literal|1
argument_list|)
operator|+
name|td
operator|->
name|heights
operator|.
name|at
argument_list|(
name|r
operator|+
name|rowSpan
operator|-
literal|1
argument_list|)
operator|-
name|td
operator|->
name|rowPositions
operator|.
name|at
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|const
name|QTextCharFormat
name|cellFormat
init|=
name|cell
operator|.
name|format
argument_list|()
decl_stmt|;
specifier|const
name|QFixed
name|cellHeight
init|=
name|cellHeights
operator|.
name|at
argument_list|(
name|cellIndex
operator|++
argument_list|)
operator|+
name|td
operator|->
name|topPadding
argument_list|(
name|cellFormat
argument_list|)
operator|+
name|td
operator|->
name|bottomPadding
argument_list|(
name|cellFormat
argument_list|)
decl_stmt|;
name|QFixed
name|offset
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|cellFormat
operator|.
name|verticalAlignment
argument_list|()
condition|)
block|{
case|case
name|QTextCharFormat
operator|::
name|AlignMiddle
case|:
name|offset
operator|=
operator|(
name|availableHeight
operator|-
name|cellHeight
operator|)
operator|/
literal|2
expr_stmt|;
break|break;
case|case
name|QTextCharFormat
operator|::
name|AlignBottom
case|:
name|offset
operator|=
name|availableHeight
operator|-
name|cellHeight
expr_stmt|;
break|break;
default|default:
break|break;
block|}
empty_stmt|;
for|for
control|(
name|int
name|rd
init|=
literal|0
init|;
name|rd
operator|<
name|cell
operator|.
name|rowSpan
argument_list|()
condition|;
operator|++
name|rd
control|)
block|{
for|for
control|(
name|int
name|cd
init|=
literal|0
init|;
name|cd
operator|<
name|cell
operator|.
name|columnSpan
argument_list|()
condition|;
operator|++
name|cd
control|)
block|{
specifier|const
name|int
name|index
init|=
operator|(
name|c
operator|+
name|cd
operator|)
operator|+
operator|(
name|r
operator|+
name|rd
operator|)
operator|*
name|columns
decl_stmt|;
name|td
operator|->
name|cellVerticalOffsets
index|[
name|index
index|]
operator|=
name|offset
expr_stmt|;
block|}
block|}
block|}
block|}
name|td
operator|->
name|minimumWidth
operator|=
name|td
operator|->
name|columnPositions
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
condition|;
operator|++
name|i
control|)
block|{
name|td
operator|->
name|minimumWidth
operator|+=
name|td
operator|->
name|minWidths
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|+
literal|2
operator|*
name|td
operator|->
name|border
operator|+
name|cellSpacing
expr_stmt|;
block|}
name|td
operator|->
name|minimumWidth
operator|+=
name|rightMargin
operator|-
name|td
operator|->
name|border
expr_stmt|;
name|td
operator|->
name|maximumWidth
operator|=
name|td
operator|->
name|columnPositions
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|td
operator|->
name|maxWidths
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|!=
name|QFIXED_MAX
condition|)
name|td
operator|->
name|maximumWidth
operator|+=
name|td
operator|->
name|maxWidths
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|+
literal|2
operator|*
name|td
operator|->
name|border
operator|+
name|cellSpacing
expr_stmt|;
name|td
operator|->
name|maximumWidth
operator|+=
name|rightMargin
operator|-
name|td
operator|->
name|border
expr_stmt|;
name|td
operator|->
name|updateTableSize
argument_list|()
expr_stmt|;
name|td
operator|->
name|sizeDirty
operator|=
literal|false
expr_stmt|;
return|return
name|QRectF
argument_list|()
return|;
comment|// invalid rect -> update everything
block|}
end_function
begin_function
DECL|function|positionFloat
name|void
name|QTextDocumentLayoutPrivate
operator|::
name|positionFloat
parameter_list|(
name|QTextFrame
modifier|*
name|frame
parameter_list|,
name|QTextLine
modifier|*
name|currentLine
parameter_list|)
block|{
name|QTextFrameData
modifier|*
name|fd
init|=
name|data
argument_list|(
name|frame
argument_list|)
decl_stmt|;
name|QTextFrame
modifier|*
name|parent
init|=
name|frame
operator|->
name|parentFrame
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|QTextFrameData
modifier|*
name|pd
init|=
name|data
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|pd
operator|&&
name|pd
operator|->
name|currentLayoutStruct
argument_list|)
expr_stmt|;
name|QTextLayoutStruct
modifier|*
name|layoutStruct
init|=
name|pd
operator|->
name|currentLayoutStruct
decl_stmt|;
if|if
condition|(
operator|!
name|pd
operator|->
name|floats
operator|.
name|contains
argument_list|(
name|frame
argument_list|)
condition|)
name|pd
operator|->
name|floats
operator|.
name|append
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|fd
operator|->
name|layoutDirty
operator|=
literal|true
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|fd
operator|->
name|sizeDirty
argument_list|)
expr_stmt|;
comment|//     qDebug()<< "positionFloat:"<< frame<< "width="<< fd->size.width;
name|QFixed
name|y
init|=
name|layoutStruct
operator|->
name|y
decl_stmt|;
if|if
condition|(
name|currentLine
condition|)
block|{
name|QFixed
name|left
decl_stmt|,
name|right
decl_stmt|;
name|floatMargins
argument_list|(
name|y
argument_list|,
name|layoutStruct
argument_list|,
operator|&
name|left
argument_list|,
operator|&
name|right
argument_list|)
expr_stmt|;
comment|//         qDebug()<< "have line: right="<< right<< "left="<< left<< "textWidth="<< currentLine->width();
if|if
condition|(
name|right
operator|-
name|left
operator|<
name|QFixed
operator|::
name|fromReal
argument_list|(
name|currentLine
operator|->
name|naturalTextWidth
argument_list|()
argument_list|)
operator|+
name|fd
operator|->
name|size
operator|.
name|width
condition|)
block|{
name|layoutStruct
operator|->
name|pendingFloats
operator|.
name|append
argument_list|(
name|frame
argument_list|)
expr_stmt|;
comment|//             qDebug()<< "    adding to pending list";
return|return;
block|}
block|}
name|bool
name|frameSpansIntoNextPage
init|=
operator|(
name|y
operator|+
name|layoutStruct
operator|->
name|frameY
operator|+
name|fd
operator|->
name|size
operator|.
name|height
operator|>
name|layoutStruct
operator|->
name|pageBottom
operator|)
decl_stmt|;
if|if
condition|(
name|frameSpansIntoNextPage
operator|&&
name|fd
operator|->
name|size
operator|.
name|height
operator|<=
name|layoutStruct
operator|->
name|pageHeight
condition|)
block|{
name|layoutStruct
operator|->
name|newPage
argument_list|()
expr_stmt|;
name|y
operator|=
name|layoutStruct
operator|->
name|y
expr_stmt|;
name|frameSpansIntoNextPage
operator|=
literal|false
expr_stmt|;
block|}
name|y
operator|=
name|findY
argument_list|(
name|y
argument_list|,
name|layoutStruct
argument_list|,
name|fd
operator|->
name|size
operator|.
name|width
argument_list|)
expr_stmt|;
name|QFixed
name|left
decl_stmt|,
name|right
decl_stmt|;
name|floatMargins
argument_list|(
name|y
argument_list|,
name|layoutStruct
argument_list|,
operator|&
name|left
argument_list|,
operator|&
name|right
argument_list|)
expr_stmt|;
if|if
condition|(
name|frame
operator|->
name|frameFormat
argument_list|()
operator|.
name|position
argument_list|()
operator|==
name|QTextFrameFormat
operator|::
name|FloatLeft
condition|)
block|{
name|fd
operator|->
name|position
operator|.
name|x
operator|=
name|left
expr_stmt|;
name|fd
operator|->
name|position
operator|.
name|y
operator|=
name|y
expr_stmt|;
block|}
else|else
block|{
name|fd
operator|->
name|position
operator|.
name|x
operator|=
name|right
operator|-
name|fd
operator|->
name|size
operator|.
name|width
expr_stmt|;
name|fd
operator|->
name|position
operator|.
name|y
operator|=
name|y
expr_stmt|;
block|}
name|layoutStruct
operator|->
name|minimumWidth
operator|=
name|qMax
argument_list|(
name|layoutStruct
operator|->
name|minimumWidth
argument_list|,
name|fd
operator|->
name|minimumWidth
argument_list|)
expr_stmt|;
name|layoutStruct
operator|->
name|maximumWidth
operator|=
name|qMin
argument_list|(
name|layoutStruct
operator|->
name|maximumWidth
argument_list|,
name|fd
operator|->
name|maximumWidth
argument_list|)
expr_stmt|;
comment|//     qDebug()<< "float positioned at "<< fd->position.x<< fd->position.y;
name|fd
operator|->
name|layoutDirty
operator|=
literal|false
expr_stmt|;
comment|// If the frame is a table, then positioning it will affect the size if it covers more than
comment|// one page, because of page breaks and repeating the header.
if|if
condition|(
name|qobject_cast
argument_list|<
name|QTextTable
operator|*
argument_list|>
argument_list|(
name|frame
argument_list|)
operator|!=
literal|0
condition|)
name|fd
operator|->
name|sizeDirty
operator|=
name|frameSpansIntoNextPage
expr_stmt|;
block|}
end_function
begin_function
DECL|function|layoutFrame
name|QRectF
name|QTextDocumentLayoutPrivate
operator|::
name|layoutFrame
parameter_list|(
name|QTextFrame
modifier|*
name|f
parameter_list|,
name|int
name|layoutFrom
parameter_list|,
name|int
name|layoutTo
parameter_list|,
name|QFixed
name|parentY
parameter_list|)
block|{
name|LDEBUG
operator|<<
literal|"layoutFrame (pre)"
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|data
argument_list|(
name|f
argument_list|)
operator|->
name|sizeDirty
argument_list|)
expr_stmt|;
comment|//     qDebug("layouting frame (%d--%d), parent=%p", f->firstPosition(), f->lastPosition(), f->parentFrame());
name|QTextFrameFormat
name|fformat
init|=
name|f
operator|->
name|frameFormat
argument_list|()
decl_stmt|;
name|QTextFrame
modifier|*
name|parent
init|=
name|f
operator|->
name|parentFrame
argument_list|()
decl_stmt|;
specifier|const
name|QTextFrameData
modifier|*
name|pd
init|=
name|parent
condition|?
name|data
argument_list|(
name|parent
argument_list|)
else|:
literal|0
decl_stmt|;
specifier|const
name|qreal
name|maximumWidth
init|=
name|qMax
argument_list|(
name|qreal
argument_list|(
literal|0
argument_list|)
argument_list|,
name|pd
condition|?
name|pd
operator|->
name|contentsWidth
operator|.
name|toReal
argument_list|()
else|:
name|document
operator|->
name|pageSize
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|QFixed
name|width
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|fformat
operator|.
name|width
argument_list|()
operator|.
name|value
argument_list|(
name|maximumWidth
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fformat
operator|.
name|width
argument_list|()
operator|.
name|type
argument_list|()
operator|==
name|QTextLength
operator|::
name|FixedLength
condition|)
name|width
operator|=
name|scaleToDevice
argument_list|(
name|width
argument_list|)
expr_stmt|;
specifier|const
name|QFixed
name|maximumHeight
init|=
name|pd
condition|?
name|pd
operator|->
name|contentsHeight
else|:
operator|-
literal|1
decl_stmt|;
specifier|const
name|QFixed
name|height
init|=
operator|(
name|maximumHeight
operator|!=
operator|-
literal|1
operator|||
name|fformat
operator|.
name|height
argument_list|()
operator|.
name|type
argument_list|()
operator|!=
name|QTextLength
operator|::
name|PercentageLength
operator|)
condition|?
name|QFixed
operator|::
name|fromReal
argument_list|(
name|fformat
operator|.
name|height
argument_list|()
operator|.
name|value
argument_list|(
name|maximumHeight
operator|.
name|toReal
argument_list|()
argument_list|)
argument_list|)
else|:
operator|-
literal|1
decl_stmt|;
return|return
name|layoutFrame
argument_list|(
name|f
argument_list|,
name|layoutFrom
argument_list|,
name|layoutTo
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|parentY
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|layoutFrame
name|QRectF
name|QTextDocumentLayoutPrivate
operator|::
name|layoutFrame
parameter_list|(
name|QTextFrame
modifier|*
name|f
parameter_list|,
name|int
name|layoutFrom
parameter_list|,
name|int
name|layoutTo
parameter_list|,
name|QFixed
name|frameWidth
parameter_list|,
name|QFixed
name|frameHeight
parameter_list|,
name|QFixed
name|parentY
parameter_list|)
block|{
name|LDEBUG
operator|<<
literal|"layoutFrame from="
operator|<<
name|layoutFrom
operator|<<
literal|"to="
operator|<<
name|layoutTo
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|data
argument_list|(
name|f
argument_list|)
operator|->
name|sizeDirty
argument_list|)
expr_stmt|;
comment|//     qDebug("layouting frame (%d--%d), parent=%p", f->firstPosition(), f->lastPosition(), f->parentFrame());
name|QTextFrameData
modifier|*
name|fd
init|=
name|data
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|QFixed
name|newContentsWidth
decl_stmt|;
block|{
name|QTextFrameFormat
name|fformat
init|=
name|f
operator|->
name|frameFormat
argument_list|()
decl_stmt|;
comment|// set sizes of this frame from the format
name|fd
operator|->
name|topMargin
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|fformat
operator|.
name|topMargin
argument_list|()
argument_list|)
expr_stmt|;
name|fd
operator|->
name|bottomMargin
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|fformat
operator|.
name|bottomMargin
argument_list|()
argument_list|)
expr_stmt|;
name|fd
operator|->
name|leftMargin
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|fformat
operator|.
name|leftMargin
argument_list|()
argument_list|)
expr_stmt|;
name|fd
operator|->
name|rightMargin
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|fformat
operator|.
name|rightMargin
argument_list|()
argument_list|)
expr_stmt|;
name|fd
operator|->
name|border
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|fformat
operator|.
name|border
argument_list|()
argument_list|)
expr_stmt|;
name|fd
operator|->
name|padding
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|fformat
operator|.
name|padding
argument_list|()
argument_list|)
expr_stmt|;
name|QTextFrame
modifier|*
name|parent
init|=
name|f
operator|->
name|parentFrame
argument_list|()
decl_stmt|;
specifier|const
name|QTextFrameData
modifier|*
name|pd
init|=
name|parent
condition|?
name|data
argument_list|(
name|parent
argument_list|)
else|:
literal|0
decl_stmt|;
comment|// accumulate top and bottom margins
if|if
condition|(
name|parent
condition|)
block|{
name|fd
operator|->
name|effectiveTopMargin
operator|=
name|pd
operator|->
name|effectiveTopMargin
operator|+
name|fd
operator|->
name|topMargin
operator|+
name|fd
operator|->
name|border
operator|+
name|fd
operator|->
name|padding
expr_stmt|;
name|fd
operator|->
name|effectiveBottomMargin
operator|=
name|pd
operator|->
name|effectiveBottomMargin
operator|+
name|fd
operator|->
name|topMargin
operator|+
name|fd
operator|->
name|border
operator|+
name|fd
operator|->
name|padding
expr_stmt|;
if|if
condition|(
name|qobject_cast
argument_list|<
name|QTextTable
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
condition|)
block|{
specifier|const
name|QTextTableData
modifier|*
name|td
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTextTableData
operator|*
argument_list|>
argument_list|(
name|pd
argument_list|)
decl_stmt|;
name|fd
operator|->
name|effectiveTopMargin
operator|+=
name|td
operator|->
name|cellSpacing
operator|+
name|td
operator|->
name|border
operator|+
name|td
operator|->
name|cellPadding
expr_stmt|;
name|fd
operator|->
name|effectiveBottomMargin
operator|+=
name|td
operator|->
name|cellSpacing
operator|+
name|td
operator|->
name|border
operator|+
name|td
operator|->
name|cellPadding
expr_stmt|;
block|}
block|}
else|else
block|{
name|fd
operator|->
name|effectiveTopMargin
operator|=
name|fd
operator|->
name|topMargin
operator|+
name|fd
operator|->
name|border
operator|+
name|fd
operator|->
name|padding
expr_stmt|;
name|fd
operator|->
name|effectiveBottomMargin
operator|=
name|fd
operator|->
name|bottomMargin
operator|+
name|fd
operator|->
name|border
operator|+
name|fd
operator|->
name|padding
expr_stmt|;
block|}
name|newContentsWidth
operator|=
name|frameWidth
operator|-
literal|2
operator|*
operator|(
name|fd
operator|->
name|border
operator|+
name|fd
operator|->
name|padding
operator|)
operator|-
name|fd
operator|->
name|leftMargin
operator|-
name|fd
operator|->
name|rightMargin
expr_stmt|;
if|if
condition|(
name|frameHeight
operator|!=
operator|-
literal|1
condition|)
block|{
name|fd
operator|->
name|contentsHeight
operator|=
name|frameHeight
operator|-
literal|2
operator|*
operator|(
name|fd
operator|->
name|border
operator|+
name|fd
operator|->
name|padding
operator|)
operator|-
name|fd
operator|->
name|topMargin
operator|-
name|fd
operator|->
name|bottomMargin
expr_stmt|;
block|}
else|else
block|{
name|fd
operator|->
name|contentsHeight
operator|=
name|frameHeight
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isFrameFromInlineObject
argument_list|(
name|f
argument_list|)
condition|)
block|{
comment|// never reached, handled in resizeInlineObject/positionFloat instead
return|return
name|QRectF
argument_list|()
return|;
block|}
if|if
condition|(
name|QTextTable
modifier|*
name|table
init|=
name|qobject_cast
argument_list|<
name|QTextTable
operator|*
argument_list|>
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|fd
operator|->
name|contentsWidth
operator|=
name|newContentsWidth
expr_stmt|;
return|return
name|layoutTable
argument_list|(
name|table
argument_list|,
name|layoutFrom
argument_list|,
name|layoutTo
argument_list|,
name|parentY
argument_list|)
return|;
block|}
comment|// set fd->contentsWidth temporarily, so that layoutFrame for the children
comment|// picks the right width. We'll initialize it properly at the end of this
comment|// function.
name|fd
operator|->
name|contentsWidth
operator|=
name|newContentsWidth
expr_stmt|;
name|QTextLayoutStruct
name|layoutStruct
decl_stmt|;
name|layoutStruct
operator|.
name|frame
operator|=
name|f
expr_stmt|;
name|layoutStruct
operator|.
name|x_left
operator|=
name|fd
operator|->
name|leftMargin
operator|+
name|fd
operator|->
name|border
operator|+
name|fd
operator|->
name|padding
expr_stmt|;
name|layoutStruct
operator|.
name|x_right
operator|=
name|layoutStruct
operator|.
name|x_left
operator|+
name|newContentsWidth
expr_stmt|;
name|layoutStruct
operator|.
name|y
operator|=
name|fd
operator|->
name|topMargin
operator|+
name|fd
operator|->
name|border
operator|+
name|fd
operator|->
name|padding
expr_stmt|;
name|layoutStruct
operator|.
name|frameY
operator|=
name|parentY
operator|+
name|fd
operator|->
name|position
operator|.
name|y
expr_stmt|;
name|layoutStruct
operator|.
name|contentsWidth
operator|=
literal|0
expr_stmt|;
name|layoutStruct
operator|.
name|minimumWidth
operator|=
literal|0
expr_stmt|;
name|layoutStruct
operator|.
name|maximumWidth
operator|=
name|QFIXED_MAX
expr_stmt|;
name|layoutStruct
operator|.
name|fullLayout
operator|=
name|fd
operator|->
name|oldContentsWidth
operator|!=
name|newContentsWidth
expr_stmt|;
name|layoutStruct
operator|.
name|updateRect
operator|=
name|QRectF
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QSizeF
argument_list|(
name|qreal
argument_list|(
name|INT_MAX
argument_list|)
argument_list|,
name|qreal
argument_list|(
name|INT_MAX
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LDEBUG
operator|<<
literal|"layoutStruct: x_left"
operator|<<
name|layoutStruct
operator|.
name|x_left
operator|<<
literal|"x_right"
operator|<<
name|layoutStruct
operator|.
name|x_right
operator|<<
literal|"fullLayout"
operator|<<
name|layoutStruct
operator|.
name|fullLayout
expr_stmt|;
name|fd
operator|->
name|oldContentsWidth
operator|=
name|newContentsWidth
expr_stmt|;
name|layoutStruct
operator|.
name|pageHeight
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|document
operator|->
name|pageSize
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|layoutStruct
operator|.
name|pageHeight
operator|<
literal|0
condition|)
name|layoutStruct
operator|.
name|pageHeight
operator|=
name|QFIXED_MAX
expr_stmt|;
specifier|const
name|int
name|currentPage
init|=
name|layoutStruct
operator|.
name|pageHeight
operator|==
literal|0
condition|?
literal|0
else|:
operator|(
name|layoutStruct
operator|.
name|frameY
operator|/
name|layoutStruct
operator|.
name|pageHeight
operator|)
operator|.
name|truncate
argument_list|()
decl_stmt|;
name|layoutStruct
operator|.
name|pageTopMargin
operator|=
name|fd
operator|->
name|effectiveTopMargin
expr_stmt|;
name|layoutStruct
operator|.
name|pageBottomMargin
operator|=
name|fd
operator|->
name|effectiveBottomMargin
expr_stmt|;
name|layoutStruct
operator|.
name|pageBottom
operator|=
operator|(
name|currentPage
operator|+
literal|1
operator|)
operator|*
name|layoutStruct
operator|.
name|pageHeight
operator|-
name|layoutStruct
operator|.
name|pageBottomMargin
expr_stmt|;
if|if
condition|(
operator|!
name|f
operator|->
name|parentFrame
argument_list|()
condition|)
name|idealWidth
operator|=
literal|0
expr_stmt|;
comment|// reset
name|QTextFrame
operator|::
name|Iterator
name|it
init|=
name|f
operator|->
name|begin
argument_list|()
decl_stmt|;
name|layoutFlow
argument_list|(
name|it
argument_list|,
operator|&
name|layoutStruct
argument_list|,
name|layoutFrom
argument_list|,
name|layoutTo
argument_list|)
expr_stmt|;
name|QFixed
name|maxChildFrameWidth
init|=
literal|0
decl_stmt|;
name|QList
argument_list|<
name|QTextFrame
modifier|*
argument_list|>
name|children
init|=
name|f
operator|->
name|childFrames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextFrame
modifier|*
name|c
init|=
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QTextFrameData
modifier|*
name|cd
init|=
name|data
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|maxChildFrameWidth
operator|=
name|qMax
argument_list|(
name|maxChildFrameWidth
argument_list|,
name|cd
operator|->
name|size
operator|.
name|width
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QFixed
name|marginWidth
init|=
literal|2
operator|*
operator|(
name|fd
operator|->
name|border
operator|+
name|fd
operator|->
name|padding
operator|)
operator|+
name|fd
operator|->
name|leftMargin
operator|+
name|fd
operator|->
name|rightMargin
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|->
name|parentFrame
argument_list|()
condition|)
block|{
name|idealWidth
operator|=
name|qMax
argument_list|(
name|maxChildFrameWidth
argument_list|,
name|layoutStruct
operator|.
name|contentsWidth
argument_list|)
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|idealWidth
operator|+=
name|marginWidth
operator|.
name|toReal
argument_list|()
expr_stmt|;
block|}
name|QFixed
name|actualWidth
init|=
name|qMax
argument_list|(
name|newContentsWidth
argument_list|,
name|qMax
argument_list|(
name|maxChildFrameWidth
argument_list|,
name|layoutStruct
operator|.
name|contentsWidth
argument_list|)
argument_list|)
decl_stmt|;
name|fd
operator|->
name|contentsWidth
operator|=
name|actualWidth
expr_stmt|;
if|if
condition|(
name|newContentsWidth
operator|<=
literal|0
condition|)
block|{
comment|// nowrap layout?
name|fd
operator|->
name|contentsWidth
operator|=
name|newContentsWidth
expr_stmt|;
block|}
name|fd
operator|->
name|minimumWidth
operator|=
name|layoutStruct
operator|.
name|minimumWidth
expr_stmt|;
name|fd
operator|->
name|maximumWidth
operator|=
name|layoutStruct
operator|.
name|maximumWidth
expr_stmt|;
name|fd
operator|->
name|size
operator|.
name|height
operator|=
name|fd
operator|->
name|contentsHeight
operator|==
operator|-
literal|1
condition|?
name|layoutStruct
operator|.
name|y
operator|+
name|fd
operator|->
name|border
operator|+
name|fd
operator|->
name|padding
operator|+
name|fd
operator|->
name|bottomMargin
else|:
name|fd
operator|->
name|contentsHeight
operator|+
literal|2
operator|*
operator|(
name|fd
operator|->
name|border
operator|+
name|fd
operator|->
name|padding
operator|)
operator|+
name|fd
operator|->
name|topMargin
operator|+
name|fd
operator|->
name|bottomMargin
expr_stmt|;
name|fd
operator|->
name|size
operator|.
name|width
operator|=
name|actualWidth
operator|+
name|marginWidth
expr_stmt|;
name|fd
operator|->
name|sizeDirty
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|layoutStruct
operator|.
name|updateRectForFloats
operator|.
name|isValid
argument_list|()
condition|)
name|layoutStruct
operator|.
name|updateRect
operator||=
name|layoutStruct
operator|.
name|updateRectForFloats
expr_stmt|;
return|return
name|layoutStruct
operator|.
name|updateRect
return|;
block|}
end_function
begin_function
DECL|function|layoutFlow
name|void
name|QTextDocumentLayoutPrivate
operator|::
name|layoutFlow
parameter_list|(
name|QTextFrame
operator|::
name|Iterator
name|it
parameter_list|,
name|QTextLayoutStruct
modifier|*
name|layoutStruct
parameter_list|,
name|int
name|layoutFrom
parameter_list|,
name|int
name|layoutTo
parameter_list|,
name|QFixed
name|width
parameter_list|)
block|{
name|LDEBUG
operator|<<
literal|"layoutFlow from="
operator|<<
name|layoutFrom
operator|<<
literal|"to="
operator|<<
name|layoutTo
expr_stmt|;
name|QTextFrameData
modifier|*
name|fd
init|=
name|data
argument_list|(
name|layoutStruct
operator|->
name|frame
argument_list|)
decl_stmt|;
name|fd
operator|->
name|currentLayoutStruct
operator|=
name|layoutStruct
expr_stmt|;
name|QTextFrame
operator|::
name|Iterator
name|previousIt
decl_stmt|;
specifier|const
name|bool
name|inRootFrame
init|=
operator|(
name|it
operator|.
name|parentFrame
argument_list|()
operator|==
name|document
operator|->
name|rootFrame
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|inRootFrame
condition|)
block|{
name|bool
name|redoCheckPoints
init|=
name|layoutStruct
operator|->
name|fullLayout
operator|||
name|checkPoints
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|redoCheckPoints
condition|)
block|{
name|QVector
argument_list|<
name|QCheckPoint
argument_list|>
operator|::
name|Iterator
name|checkPoint
init|=
name|std
operator|::
name|lower_bound
argument_list|(
name|checkPoints
operator|.
name|begin
argument_list|()
argument_list|,
name|checkPoints
operator|.
name|end
argument_list|()
argument_list|,
name|layoutFrom
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkPoint
operator|!=
name|checkPoints
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|checkPoint
operator|!=
name|checkPoints
operator|.
name|begin
argument_list|()
condition|)
operator|--
name|checkPoint
expr_stmt|;
name|layoutStruct
operator|->
name|y
operator|=
name|checkPoint
operator|->
name|y
expr_stmt|;
name|layoutStruct
operator|->
name|frameY
operator|=
name|checkPoint
operator|->
name|frameY
expr_stmt|;
name|layoutStruct
operator|->
name|minimumWidth
operator|=
name|checkPoint
operator|->
name|minimumWidth
expr_stmt|;
name|layoutStruct
operator|->
name|maximumWidth
operator|=
name|checkPoint
operator|->
name|maximumWidth
expr_stmt|;
name|layoutStruct
operator|->
name|contentsWidth
operator|=
name|checkPoint
operator|->
name|contentsWidth
expr_stmt|;
if|if
condition|(
name|layoutStruct
operator|->
name|pageHeight
operator|>
literal|0
condition|)
block|{
name|int
name|page
init|=
name|layoutStruct
operator|->
name|currentPage
argument_list|()
decl_stmt|;
name|layoutStruct
operator|->
name|pageBottom
operator|=
operator|(
name|page
operator|+
literal|1
operator|)
operator|*
name|layoutStruct
operator|->
name|pageHeight
operator|-
name|layoutStruct
operator|->
name|pageBottomMargin
expr_stmt|;
block|}
name|it
operator|=
name|frameIteratorForTextPosition
argument_list|(
name|checkPoint
operator|->
name|positionInFrame
argument_list|)
expr_stmt|;
name|checkPoints
operator|.
name|resize
argument_list|(
name|checkPoint
operator|-
name|checkPoints
operator|.
name|begin
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkPoint
operator|!=
name|checkPoints
operator|.
name|begin
argument_list|()
condition|)
block|{
name|previousIt
operator|=
name|it
expr_stmt|;
operator|--
name|previousIt
expr_stmt|;
block|}
block|}
else|else
block|{
name|redoCheckPoints
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|redoCheckPoints
condition|)
block|{
name|checkPoints
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCheckPoint
name|cp
decl_stmt|;
name|cp
operator|.
name|y
operator|=
name|layoutStruct
operator|->
name|y
expr_stmt|;
name|cp
operator|.
name|frameY
operator|=
name|layoutStruct
operator|->
name|frameY
expr_stmt|;
name|cp
operator|.
name|positionInFrame
operator|=
literal|0
expr_stmt|;
name|cp
operator|.
name|minimumWidth
operator|=
name|layoutStruct
operator|->
name|minimumWidth
expr_stmt|;
name|cp
operator|.
name|maximumWidth
operator|=
name|layoutStruct
operator|->
name|maximumWidth
expr_stmt|;
name|cp
operator|.
name|contentsWidth
operator|=
name|layoutStruct
operator|->
name|contentsWidth
expr_stmt|;
name|checkPoints
operator|.
name|append
argument_list|(
name|cp
argument_list|)
expr_stmt|;
block|}
block|}
name|QTextBlockFormat
name|previousBlockFormat
init|=
name|previousIt
operator|.
name|currentBlock
argument_list|()
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QFixed
name|maximumBlockWidth
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|it
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QTextFrame
modifier|*
name|c
init|=
name|it
operator|.
name|currentFrame
argument_list|()
decl_stmt|;
name|int
name|docPos
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|currentFrame
argument_list|()
condition|)
name|docPos
operator|=
name|it
operator|.
name|currentFrame
argument_list|()
operator|->
name|firstPosition
argument_list|()
expr_stmt|;
else|else
name|docPos
operator|=
name|it
operator|.
name|currentBlock
argument_list|()
operator|.
name|position
argument_list|()
expr_stmt|;
if|if
condition|(
name|inRootFrame
condition|)
block|{
if|if
condition|(
name|qAbs
argument_list|(
name|layoutStruct
operator|->
name|y
operator|-
name|checkPoints
operator|.
name|last
argument_list|()
operator|.
name|y
argument_list|)
operator|>
literal|2000
condition|)
block|{
name|QFixed
name|left
decl_stmt|,
name|right
decl_stmt|;
name|floatMargins
argument_list|(
name|layoutStruct
operator|->
name|y
argument_list|,
name|layoutStruct
argument_list|,
operator|&
name|left
argument_list|,
operator|&
name|right
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|==
name|layoutStruct
operator|->
name|x_left
operator|&&
name|right
operator|==
name|layoutStruct
operator|->
name|x_right
condition|)
block|{
name|QCheckPoint
name|p
decl_stmt|;
name|p
operator|.
name|y
operator|=
name|layoutStruct
operator|->
name|y
expr_stmt|;
name|p
operator|.
name|frameY
operator|=
name|layoutStruct
operator|->
name|frameY
expr_stmt|;
name|p
operator|.
name|positionInFrame
operator|=
name|docPos
expr_stmt|;
name|p
operator|.
name|minimumWidth
operator|=
name|layoutStruct
operator|->
name|minimumWidth
expr_stmt|;
name|p
operator|.
name|maximumWidth
operator|=
name|layoutStruct
operator|->
name|maximumWidth
expr_stmt|;
name|p
operator|.
name|contentsWidth
operator|=
name|layoutStruct
operator|->
name|contentsWidth
expr_stmt|;
name|checkPoints
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentLazyLayoutPosition
operator|!=
operator|-
literal|1
operator|&&
name|docPos
operator|>
name|currentLazyLayoutPosition
operator|+
name|lazyLayoutStepSize
condition|)
break|break;
block|}
block|}
block|}
if|if
condition|(
name|c
condition|)
block|{
comment|// position child frame
name|QTextFrameData
modifier|*
name|cd
init|=
name|data
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|QTextFrameFormat
name|fformat
init|=
name|c
operator|->
name|frameFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|fformat
operator|.
name|position
argument_list|()
operator|==
name|QTextFrameFormat
operator|::
name|InFlow
condition|)
block|{
if|if
condition|(
name|fformat
operator|.
name|pageBreakPolicy
argument_list|()
operator|&
name|QTextFormat
operator|::
name|PageBreak_AlwaysBefore
condition|)
name|layoutStruct
operator|->
name|newPage
argument_list|()
expr_stmt|;
name|QFixed
name|left
decl_stmt|,
name|right
decl_stmt|;
name|floatMargins
argument_list|(
name|layoutStruct
operator|->
name|y
argument_list|,
name|layoutStruct
argument_list|,
operator|&
name|left
argument_list|,
operator|&
name|right
argument_list|)
expr_stmt|;
name|left
operator|=
name|qMax
argument_list|(
name|left
argument_list|,
name|layoutStruct
operator|->
name|x_left
argument_list|)
expr_stmt|;
name|right
operator|=
name|qMin
argument_list|(
name|right
argument_list|,
name|layoutStruct
operator|->
name|x_right
argument_list|)
expr_stmt|;
if|if
condition|(
name|right
operator|-
name|left
operator|<
name|cd
operator|->
name|size
operator|.
name|width
condition|)
block|{
name|layoutStruct
operator|->
name|y
operator|=
name|findY
argument_list|(
name|layoutStruct
operator|->
name|y
argument_list|,
name|layoutStruct
argument_list|,
name|cd
operator|->
name|size
operator|.
name|width
argument_list|)
expr_stmt|;
name|floatMargins
argument_list|(
name|layoutStruct
operator|->
name|y
argument_list|,
name|layoutStruct
argument_list|,
operator|&
name|left
argument_list|,
operator|&
name|right
argument_list|)
expr_stmt|;
block|}
name|QFixedPoint
name|pos
argument_list|(
name|left
argument_list|,
name|layoutStruct
operator|->
name|y
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|Alignment
name|align
init|=
name|Qt
operator|::
name|AlignLeft
decl_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|qobject_cast
argument_list|<
name|QTextTable
operator|*
argument_list|>
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
condition|)
name|align
operator|=
name|table
operator|->
name|format
argument_list|()
operator|.
name|alignment
argument_list|()
operator|&
name|Qt
operator|::
name|AlignHorizontal_Mask
expr_stmt|;
comment|// detect whether we have any alignment in the document that disallows optimizations,
comment|// such as not laying out the document again in a textedit with wrapping disabled.
if|if
condition|(
name|inRootFrame
operator|&&
operator|!
operator|(
name|align
operator|&
name|Qt
operator|::
name|AlignLeft
operator|)
condition|)
name|contentHasAlignment
operator|=
literal|true
expr_stmt|;
name|cd
operator|->
name|position
operator|=
name|pos
expr_stmt|;
if|if
condition|(
name|document
operator|->
name|pageSize
argument_list|()
operator|.
name|height
argument_list|()
operator|>
literal|0.0f
condition|)
name|cd
operator|->
name|sizeDirty
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|cd
operator|->
name|sizeDirty
condition|)
block|{
if|if
condition|(
name|width
operator|!=
literal|0
condition|)
name|layoutFrame
argument_list|(
name|c
argument_list|,
name|layoutFrom
argument_list|,
name|layoutTo
argument_list|,
name|width
argument_list|,
operator|-
literal|1
argument_list|,
name|layoutStruct
operator|->
name|frameY
argument_list|)
expr_stmt|;
else|else
name|layoutFrame
argument_list|(
name|c
argument_list|,
name|layoutFrom
argument_list|,
name|layoutTo
argument_list|,
name|layoutStruct
operator|->
name|frameY
argument_list|)
expr_stmt|;
name|QFixed
name|absoluteChildPos
init|=
name|table
condition|?
name|pos
operator|.
name|y
operator|+
cast|static_cast
argument_list|<
name|QTextTableData
operator|*
argument_list|>
argument_list|(
name|data
argument_list|(
name|table
argument_list|)
argument_list|)
operator|->
name|rowPositions
operator|.
name|at
argument_list|(
literal|0
argument_list|)
else|:
name|pos
operator|.
name|y
operator|+
name|firstChildPos
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|absoluteChildPos
operator|+=
name|layoutStruct
operator|->
name|frameY
expr_stmt|;
comment|// drop entire frame to next page if first child of frame is on next page
if|if
condition|(
name|absoluteChildPos
operator|>
name|layoutStruct
operator|->
name|pageBottom
condition|)
block|{
name|layoutStruct
operator|->
name|newPage
argument_list|()
expr_stmt|;
name|pos
operator|.
name|y
operator|=
name|layoutStruct
operator|->
name|y
expr_stmt|;
name|cd
operator|->
name|position
operator|=
name|pos
expr_stmt|;
name|cd
operator|->
name|sizeDirty
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|width
operator|!=
literal|0
condition|)
name|layoutFrame
argument_list|(
name|c
argument_list|,
name|layoutFrom
argument_list|,
name|layoutTo
argument_list|,
name|width
argument_list|,
operator|-
literal|1
argument_list|,
name|layoutStruct
operator|->
name|frameY
argument_list|)
expr_stmt|;
else|else
name|layoutFrame
argument_list|(
name|c
argument_list|,
name|layoutFrom
argument_list|,
name|layoutTo
argument_list|,
name|layoutStruct
operator|->
name|frameY
argument_list|)
expr_stmt|;
block|}
block|}
comment|// align only if there is space for alignment
if|if
condition|(
name|right
operator|-
name|left
operator|>
name|cd
operator|->
name|size
operator|.
name|width
condition|)
block|{
if|if
condition|(
name|align
operator|&
name|Qt
operator|::
name|AlignRight
condition|)
name|pos
operator|.
name|x
operator|+=
name|layoutStruct
operator|->
name|x_right
operator|-
name|cd
operator|->
name|size
operator|.
name|width
expr_stmt|;
elseif|else
if|if
condition|(
name|align
operator|&
name|Qt
operator|::
name|AlignHCenter
condition|)
name|pos
operator|.
name|x
operator|+=
operator|(
name|layoutStruct
operator|->
name|x_right
operator|-
name|cd
operator|->
name|size
operator|.
name|width
operator|)
operator|/
literal|2
expr_stmt|;
block|}
name|cd
operator|->
name|position
operator|=
name|pos
expr_stmt|;
name|layoutStruct
operator|->
name|y
operator|+=
name|cd
operator|->
name|size
operator|.
name|height
expr_stmt|;
specifier|const
name|int
name|page
init|=
name|layoutStruct
operator|->
name|currentPage
argument_list|()
decl_stmt|;
name|layoutStruct
operator|->
name|pageBottom
operator|=
operator|(
name|page
operator|+
literal|1
operator|)
operator|*
name|layoutStruct
operator|->
name|pageHeight
operator|-
name|layoutStruct
operator|->
name|pageBottomMargin
expr_stmt|;
name|cd
operator|->
name|layoutDirty
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|c
operator|->
name|frameFormat
argument_list|()
operator|.
name|pageBreakPolicy
argument_list|()
operator|&
name|QTextFormat
operator|::
name|PageBreak_AlwaysAfter
condition|)
name|layoutStruct
operator|->
name|newPage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QRectF
name|oldFrameRect
argument_list|(
name|cd
operator|->
name|position
operator|.
name|toPointF
argument_list|()
argument_list|,
name|cd
operator|->
name|size
operator|.
name|toSizeF
argument_list|()
argument_list|)
decl_stmt|;
name|QRectF
name|updateRect
decl_stmt|;
if|if
condition|(
name|cd
operator|->
name|sizeDirty
condition|)
name|updateRect
operator|=
name|layoutFrame
argument_list|(
name|c
argument_list|,
name|layoutFrom
argument_list|,
name|layoutTo
argument_list|)
expr_stmt|;
name|positionFloat
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// If the size was made dirty when the position was set, layout again
if|if
condition|(
name|cd
operator|->
name|sizeDirty
condition|)
name|updateRect
operator|=
name|layoutFrame
argument_list|(
name|c
argument_list|,
name|layoutFrom
argument_list|,
name|layoutTo
argument_list|)
expr_stmt|;
name|QRectF
name|frameRect
argument_list|(
name|cd
operator|->
name|position
operator|.
name|toPointF
argument_list|()
argument_list|,
name|cd
operator|->
name|size
operator|.
name|toSizeF
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|frameRect
operator|==
name|oldFrameRect
operator|&&
name|updateRect
operator|.
name|isValid
argument_list|()
condition|)
name|updateRect
operator|.
name|translate
argument_list|(
name|cd
operator|->
name|position
operator|.
name|toPointF
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|updateRect
operator|=
name|frameRect
expr_stmt|;
name|layoutStruct
operator|->
name|addUpdateRectForFloat
argument_list|(
name|updateRect
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldFrameRect
operator|.
name|isValid
argument_list|()
condition|)
name|layoutStruct
operator|->
name|addUpdateRectForFloat
argument_list|(
name|oldFrameRect
argument_list|)
expr_stmt|;
block|}
name|layoutStruct
operator|->
name|minimumWidth
operator|=
name|qMax
argument_list|(
name|layoutStruct
operator|->
name|minimumWidth
argument_list|,
name|cd
operator|->
name|minimumWidth
argument_list|)
expr_stmt|;
name|layoutStruct
operator|->
name|maximumWidth
operator|=
name|qMin
argument_list|(
name|layoutStruct
operator|->
name|maximumWidth
argument_list|,
name|cd
operator|->
name|maximumWidth
argument_list|)
expr_stmt|;
name|previousIt
operator|=
name|it
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
else|else
block|{
name|QTextFrame
operator|::
name|Iterator
name|lastIt
decl_stmt|;
if|if
condition|(
operator|!
name|previousIt
operator|.
name|atEnd
argument_list|()
condition|)
name|lastIt
operator|=
name|previousIt
expr_stmt|;
name|previousIt
operator|=
name|it
expr_stmt|;
name|QTextBlock
name|block
init|=
name|it
operator|.
name|currentBlock
argument_list|()
decl_stmt|;
operator|++
name|it
expr_stmt|;
specifier|const
name|QTextBlockFormat
name|blockFormat
init|=
name|block
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|blockFormat
operator|.
name|pageBreakPolicy
argument_list|()
operator|&
name|QTextFormat
operator|::
name|PageBreak_AlwaysBefore
condition|)
name|layoutStruct
operator|->
name|newPage
argument_list|()
expr_stmt|;
specifier|const
name|QFixed
name|origY
init|=
name|layoutStruct
operator|->
name|y
decl_stmt|;
specifier|const
name|QFixed
name|origPageBottom
init|=
name|layoutStruct
operator|->
name|pageBottom
decl_stmt|;
specifier|const
name|QFixed
name|origMaximumWidth
init|=
name|layoutStruct
operator|->
name|maximumWidth
decl_stmt|;
name|layoutStruct
operator|->
name|maximumWidth
operator|=
literal|0
expr_stmt|;
specifier|const
name|QTextBlockFormat
modifier|*
name|previousBlockFormatPtr
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|lastIt
operator|.
name|currentBlock
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
name|previousBlockFormatPtr
operator|=
operator|&
name|previousBlockFormat
expr_stmt|;
comment|// layout and position child block
name|layoutBlock
argument_list|(
name|block
argument_list|,
name|docPos
argument_list|,
name|blockFormat
argument_list|,
name|layoutStruct
argument_list|,
name|layoutFrom
argument_list|,
name|layoutTo
argument_list|,
name|previousBlockFormatPtr
argument_list|)
expr_stmt|;
comment|// detect whether we have any alignment in the document that disallows optimizations,
comment|// such as not laying out the document again in a textedit with wrapping disabled.
if|if
condition|(
name|inRootFrame
operator|&&
operator|!
operator|(
name|block
operator|.
name|layout
argument_list|()
operator|->
name|textOption
argument_list|()
operator|.
name|alignment
argument_list|()
operator|&
name|Qt
operator|::
name|AlignLeft
operator|)
condition|)
name|contentHasAlignment
operator|=
literal|true
expr_stmt|;
comment|// if the block right before a table is empty 'hide' it by
comment|// positioning it into the table border
if|if
condition|(
name|isEmptyBlockBeforeTable
argument_list|(
name|block
argument_list|,
name|blockFormat
argument_list|,
name|it
argument_list|)
condition|)
block|{
specifier|const
name|QTextBlock
name|lastBlock
init|=
name|lastIt
operator|.
name|currentBlock
argument_list|()
decl_stmt|;
specifier|const
name|qreal
name|lastBlockBottomMargin
init|=
name|lastBlock
operator|.
name|isValid
argument_list|()
condition|?
name|lastBlock
operator|.
name|blockFormat
argument_list|()
operator|.
name|bottomMargin
argument_list|()
else|:
literal|0.0f
decl_stmt|;
name|layoutStruct
operator|->
name|y
operator|=
name|origY
operator|+
name|QFixed
operator|::
name|fromReal
argument_list|(
name|qMax
argument_list|(
name|lastBlockBottomMargin
argument_list|,
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|topMargin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|layoutStruct
operator|->
name|pageBottom
operator|=
name|origPageBottom
expr_stmt|;
block|}
else|else
block|{
comment|// if the block right after a table is empty then 'hide' it, too
if|if
condition|(
name|isEmptyBlockAfterTable
argument_list|(
name|block
argument_list|,
name|lastIt
operator|.
name|currentFrame
argument_list|()
argument_list|)
condition|)
block|{
name|QTextTableData
modifier|*
name|td
init|=
cast|static_cast
argument_list|<
name|QTextTableData
operator|*
argument_list|>
argument_list|(
name|data
argument_list|(
name|lastIt
operator|.
name|currentFrame
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QTextLayout
modifier|*
name|layout
init|=
name|block
operator|.
name|layout
argument_list|()
decl_stmt|;
name|QPointF
name|pos
argument_list|(
operator|(
name|td
operator|->
name|position
operator|.
name|x
operator|+
name|td
operator|->
name|size
operator|.
name|width
operator|)
operator|.
name|toReal
argument_list|()
argument_list|,
operator|(
name|td
operator|->
name|position
operator|.
name|y
operator|+
name|td
operator|->
name|size
operator|.
name|height
operator|)
operator|.
name|toReal
argument_list|()
operator|-
name|layout
operator|->
name|boundingRect
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|layout
operator|->
name|setPosition
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|layoutStruct
operator|->
name|y
operator|=
name|origY
expr_stmt|;
name|layoutStruct
operator|->
name|pageBottom
operator|=
name|origPageBottom
expr_stmt|;
block|}
comment|// if the block right after a table starts with a line separator, shift it up by one line
if|if
condition|(
name|isLineSeparatorBlockAfterTable
argument_list|(
name|block
argument_list|,
name|lastIt
operator|.
name|currentFrame
argument_list|()
argument_list|)
condition|)
block|{
name|QTextTableData
modifier|*
name|td
init|=
cast|static_cast
argument_list|<
name|QTextTableData
operator|*
argument_list|>
argument_list|(
name|data
argument_list|(
name|lastIt
operator|.
name|currentFrame
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QTextLayout
modifier|*
name|layout
init|=
name|block
operator|.
name|layout
argument_list|()
decl_stmt|;
name|QFixed
name|height
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|layout
operator|->
name|lineAt
argument_list|(
literal|0
argument_list|)
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|layoutStruct
operator|->
name|pageBottom
operator|==
name|origPageBottom
condition|)
block|{
name|layoutStruct
operator|->
name|y
operator|-=
name|height
expr_stmt|;
name|layout
operator|->
name|setPosition
argument_list|(
name|layout
operator|->
name|position
argument_list|()
operator|-
name|QPointF
argument_list|(
literal|0
argument_list|,
name|height
operator|.
name|toReal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// relayout block to correctly handle page breaks
name|layoutStruct
operator|->
name|y
operator|=
name|origY
operator|-
name|height
expr_stmt|;
name|layoutStruct
operator|->
name|pageBottom
operator|=
name|origPageBottom
expr_stmt|;
name|layoutBlock
argument_list|(
name|block
argument_list|,
name|docPos
argument_list|,
name|blockFormat
argument_list|,
name|layoutStruct
argument_list|,
name|layoutFrom
argument_list|,
name|layoutTo
argument_list|,
name|previousBlockFormatPtr
argument_list|)
expr_stmt|;
block|}
name|QPointF
name|linePos
argument_list|(
operator|(
name|td
operator|->
name|position
operator|.
name|x
operator|+
name|td
operator|->
name|size
operator|.
name|width
operator|)
operator|.
name|toReal
argument_list|()
argument_list|,
operator|(
name|td
operator|->
name|position
operator|.
name|y
operator|+
name|td
operator|->
name|size
operator|.
name|height
operator|-
name|height
operator|)
operator|.
name|toReal
argument_list|()
argument_list|)
decl_stmt|;
name|layout
operator|->
name|lineAt
argument_list|(
literal|0
argument_list|)
operator|.
name|setPosition
argument_list|(
name|linePos
operator|-
name|layout
operator|->
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blockFormat
operator|.
name|pageBreakPolicy
argument_list|()
operator|&
name|QTextFormat
operator|::
name|PageBreak_AlwaysAfter
condition|)
name|layoutStruct
operator|->
name|newPage
argument_list|()
expr_stmt|;
block|}
name|maximumBlockWidth
operator|=
name|qMax
argument_list|(
name|maximumBlockWidth
argument_list|,
name|layoutStruct
operator|->
name|maximumWidth
argument_list|)
expr_stmt|;
name|layoutStruct
operator|->
name|maximumWidth
operator|=
name|origMaximumWidth
expr_stmt|;
name|previousBlockFormat
operator|=
name|blockFormat
expr_stmt|;
block|}
block|}
if|if
condition|(
name|layoutStruct
operator|->
name|maximumWidth
operator|==
name|QFIXED_MAX
operator|&&
name|maximumBlockWidth
operator|>
literal|0
condition|)
name|layoutStruct
operator|->
name|maximumWidth
operator|=
name|maximumBlockWidth
expr_stmt|;
else|else
name|layoutStruct
operator|->
name|maximumWidth
operator|=
name|qMax
argument_list|(
name|layoutStruct
operator|->
name|maximumWidth
argument_list|,
name|maximumBlockWidth
argument_list|)
expr_stmt|;
comment|// a float at the bottom of a frame may make it taller, hence the qMax() for layoutStruct->y.
comment|// we don't need to do it for tables though because floats in tables are per table
comment|// and not per cell and layoutCell already takes care of doing the same as we do here
if|if
condition|(
operator|!
name|qobject_cast
argument_list|<
name|QTextTable
operator|*
argument_list|>
argument_list|(
name|layoutStruct
operator|->
name|frame
argument_list|)
condition|)
block|{
name|QList
argument_list|<
name|QTextFrame
modifier|*
argument_list|>
name|children
init|=
name|layoutStruct
operator|->
name|frame
operator|->
name|childFrames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextFrameData
modifier|*
name|fd
init|=
name|data
argument_list|(
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fd
operator|->
name|layoutDirty
operator|&&
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|frameFormat
argument_list|()
operator|.
name|position
argument_list|()
operator|!=
name|QTextFrameFormat
operator|::
name|InFlow
condition|)
name|layoutStruct
operator|->
name|y
operator|=
name|qMax
argument_list|(
name|layoutStruct
operator|->
name|y
argument_list|,
name|fd
operator|->
name|position
operator|.
name|y
operator|+
name|fd
operator|->
name|size
operator|.
name|height
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|inRootFrame
condition|)
block|{
comment|// we assume that any float is aligned in a way that disallows the optimizations that rely
comment|// on unaligned content.
if|if
condition|(
operator|!
name|fd
operator|->
name|floats
operator|.
name|isEmpty
argument_list|()
condition|)
name|contentHasAlignment
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|atEnd
argument_list|()
condition|)
block|{
comment|//qDebug()<< "layout done!";
name|currentLazyLayoutPosition
operator|=
operator|-
literal|1
expr_stmt|;
name|QCheckPoint
name|cp
decl_stmt|;
name|cp
operator|.
name|y
operator|=
name|layoutStruct
operator|->
name|y
expr_stmt|;
name|cp
operator|.
name|positionInFrame
operator|=
name|docPrivate
operator|->
name|length
argument_list|()
expr_stmt|;
name|cp
operator|.
name|minimumWidth
operator|=
name|layoutStruct
operator|->
name|minimumWidth
expr_stmt|;
name|cp
operator|.
name|maximumWidth
operator|=
name|layoutStruct
operator|->
name|maximumWidth
expr_stmt|;
name|cp
operator|.
name|contentsWidth
operator|=
name|layoutStruct
operator|->
name|contentsWidth
expr_stmt|;
name|checkPoints
operator|.
name|append
argument_list|(
name|cp
argument_list|)
expr_stmt|;
name|checkPoints
operator|.
name|reserve
argument_list|(
name|checkPoints
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentLazyLayoutPosition
operator|=
name|checkPoints
operator|.
name|last
argument_list|()
operator|.
name|positionInFrame
expr_stmt|;
comment|// #######
comment|//checkPoints.last().positionInFrame = q->document()->docHandle()->length();
block|}
block|}
name|fd
operator|->
name|currentLayoutStruct
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getLineHeightParams
specifier|static
specifier|inline
name|void
name|getLineHeightParams
parameter_list|(
specifier|const
name|QTextBlockFormat
modifier|&
name|blockFormat
parameter_list|,
specifier|const
name|QTextLine
modifier|&
name|line
parameter_list|,
name|qreal
name|scaling
parameter_list|,
name|QFixed
modifier|*
name|lineAdjustment
parameter_list|,
name|QFixed
modifier|*
name|lineBreakHeight
parameter_list|,
name|QFixed
modifier|*
name|lineHeight
parameter_list|)
block|{
operator|*
name|lineHeight
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|blockFormat
operator|.
name|lineHeight
argument_list|(
name|line
operator|.
name|height
argument_list|()
argument_list|,
name|scaling
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|blockFormat
operator|.
name|lineHeightType
argument_list|()
operator|==
name|QTextBlockFormat
operator|::
name|FixedHeight
operator|||
name|blockFormat
operator|.
name|lineHeightType
argument_list|()
operator|==
name|QTextBlockFormat
operator|::
name|MinimumHeight
condition|)
block|{
operator|*
name|lineBreakHeight
operator|=
operator|*
name|lineHeight
expr_stmt|;
if|if
condition|(
name|blockFormat
operator|.
name|lineHeightType
argument_list|()
operator|==
name|QTextBlockFormat
operator|::
name|FixedHeight
condition|)
operator|*
name|lineAdjustment
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|line
operator|.
name|ascent
argument_list|()
operator|+
name|qMax
argument_list|(
name|line
operator|.
name|leading
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|0.0
argument_list|)
argument_list|)
argument_list|)
operator|-
operator|(
operator|(
operator|*
name|lineHeight
operator|*
literal|4
operator|)
operator|/
literal|5
operator|)
expr_stmt|;
else|else
operator|*
name|lineAdjustment
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|line
operator|.
name|height
argument_list|()
argument_list|)
operator|-
operator|*
name|lineHeight
expr_stmt|;
block|}
else|else
block|{
operator|*
name|lineBreakHeight
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|line
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
operator|*
name|lineAdjustment
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|layoutBlock
name|void
name|QTextDocumentLayoutPrivate
operator|::
name|layoutBlock
parameter_list|(
specifier|const
name|QTextBlock
modifier|&
name|bl
parameter_list|,
name|int
name|blockPosition
parameter_list|,
specifier|const
name|QTextBlockFormat
modifier|&
name|blockFormat
parameter_list|,
name|QTextLayoutStruct
modifier|*
name|layoutStruct
parameter_list|,
name|int
name|layoutFrom
parameter_list|,
name|int
name|layoutTo
parameter_list|,
specifier|const
name|QTextBlockFormat
modifier|*
name|previousBlockFormat
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
name|QTextLayout
modifier|*
name|tl
init|=
name|bl
operator|.
name|layout
argument_list|()
decl_stmt|;
specifier|const
name|int
name|blockLength
init|=
name|bl
operator|.
name|length
argument_list|()
decl_stmt|;
name|LDEBUG
operator|<<
literal|"layoutBlock from="
operator|<<
name|layoutFrom
operator|<<
literal|"to="
operator|<<
name|layoutTo
expr_stmt|;
comment|//    qDebug()<< "layoutBlock; width"<< layoutStruct->x_right - layoutStruct->x_left<< "(maxWidth is btw"<< tl->maximumWidth()<< ')';
if|if
condition|(
name|previousBlockFormat
condition|)
block|{
name|qreal
name|margin
init|=
name|qMax
argument_list|(
name|blockFormat
operator|.
name|topMargin
argument_list|()
argument_list|,
name|previousBlockFormat
operator|->
name|bottomMargin
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|margin
operator|>
literal|0
operator|&&
name|q
operator|->
name|paintDevice
argument_list|()
condition|)
block|{
name|margin
operator|*=
name|qreal
argument_list|(
name|q
operator|->
name|paintDevice
argument_list|()
operator|->
name|logicalDpiY
argument_list|()
argument_list|)
operator|/
name|qreal
argument_list|(
name|qt_defaultDpi
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|layoutStruct
operator|->
name|y
operator|+=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|margin
argument_list|)
expr_stmt|;
block|}
comment|//QTextFrameData *fd = data(layoutStruct->frame);
name|Qt
operator|::
name|LayoutDirection
name|dir
init|=
name|bl
operator|.
name|textDirection
argument_list|()
decl_stmt|;
name|QFixed
name|extraMargin
decl_stmt|;
if|if
condition|(
name|docPrivate
operator|->
name|defaultTextOption
operator|.
name|flags
argument_list|()
operator|&
name|QTextOption
operator|::
name|AddSpaceForLineAndParagraphSeparators
condition|)
block|{
name|QFontMetricsF
name|fm
argument_list|(
name|bl
operator|.
name|charFormat
argument_list|()
operator|.
name|font
argument_list|()
argument_list|)
decl_stmt|;
name|extraMargin
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|fm
operator|.
name|width
argument_list|(
name|QChar
argument_list|(
name|QChar
argument_list|(
literal|0x21B5
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QFixed
name|indent
init|=
name|this
operator|->
name|blockIndent
argument_list|(
name|blockFormat
argument_list|)
decl_stmt|;
specifier|const
name|QFixed
name|totalLeftMargin
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|blockFormat
operator|.
name|leftMargin
argument_list|()
argument_list|)
operator|+
operator|(
name|dir
operator|==
name|Qt
operator|::
name|RightToLeft
condition|?
name|extraMargin
else|:
name|indent
operator|)
decl_stmt|;
specifier|const
name|QFixed
name|totalRightMargin
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|blockFormat
operator|.
name|rightMargin
argument_list|()
argument_list|)
operator|+
operator|(
name|dir
operator|==
name|Qt
operator|::
name|RightToLeft
condition|?
name|indent
else|:
name|extraMargin
operator|)
decl_stmt|;
specifier|const
name|QPointF
name|oldPosition
init|=
name|tl
operator|->
name|position
argument_list|()
decl_stmt|;
name|tl
operator|->
name|setPosition
argument_list|(
name|QPointF
argument_list|(
name|layoutStruct
operator|->
name|x_left
operator|.
name|toReal
argument_list|()
argument_list|,
name|layoutStruct
operator|->
name|y
operator|.
name|toReal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|layoutStruct
operator|->
name|fullLayout
operator|||
operator|(
name|blockPosition
operator|+
name|blockLength
operator|>
name|layoutFrom
operator|&&
name|blockPosition
operator|<=
name|layoutTo
operator|)
comment|// force relayout if we cross a page boundary
operator|||
operator|(
name|layoutStruct
operator|->
name|pageHeight
operator|!=
name|QFIXED_MAX
operator|&&
name|layoutStruct
operator|->
name|absoluteY
argument_list|()
operator|+
name|QFixed
operator|::
name|fromReal
argument_list|(
name|tl
operator|->
name|boundingRect
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
operator|>
name|layoutStruct
operator|->
name|pageBottom
operator|)
condition|)
block|{
name|LDEBUG
operator|<<
literal|" do layout"
expr_stmt|;
name|QTextOption
name|option
init|=
name|docPrivate
operator|->
name|defaultTextOption
decl_stmt|;
name|option
operator|.
name|setTextDirection
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|option
operator|.
name|setTabs
argument_list|(
name|blockFormat
operator|.
name|tabPositions
argument_list|()
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|Alignment
name|align
init|=
name|docPrivate
operator|->
name|defaultTextOption
operator|.
name|alignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|blockFormat
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BlockAlignment
argument_list|)
condition|)
name|align
operator|=
name|blockFormat
operator|.
name|alignment
argument_list|()
expr_stmt|;
name|option
operator|.
name|setAlignment
argument_list|(
name|QGuiApplicationPrivate
operator|::
name|visualAlignment
argument_list|(
name|dir
argument_list|,
name|align
argument_list|)
argument_list|)
expr_stmt|;
comment|// for paragraph that are RTL, alignment is auto-reversed;
if|if
condition|(
name|blockFormat
operator|.
name|nonBreakableLines
argument_list|()
operator|||
name|document
operator|->
name|pageSize
argument_list|()
operator|.
name|width
argument_list|()
operator|<
literal|0
condition|)
block|{
name|option
operator|.
name|setWrapMode
argument_list|(
name|QTextOption
operator|::
name|ManualWrap
argument_list|)
expr_stmt|;
block|}
name|tl
operator|->
name|setTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|haveWordOrAnyWrapMode
init|=
operator|(
name|option
operator|.
name|wrapMode
argument_list|()
operator|==
name|QTextOption
operator|::
name|WrapAtWordBoundaryOrAnywhere
operator|)
decl_stmt|;
comment|//         qDebug()<< "    layouting block at"<< bl.position();
specifier|const
name|QFixed
name|cy
init|=
name|layoutStruct
operator|->
name|y
decl_stmt|;
specifier|const
name|QFixed
name|l
init|=
name|layoutStruct
operator|->
name|x_left
operator|+
name|totalLeftMargin
decl_stmt|;
specifier|const
name|QFixed
name|r
init|=
name|layoutStruct
operator|->
name|x_right
operator|-
name|totalRightMargin
decl_stmt|;
name|tl
operator|->
name|beginLayout
argument_list|()
expr_stmt|;
name|bool
name|firstLine
init|=
literal|true
decl_stmt|;
while|while
condition|(
literal|1
condition|)
block|{
name|QTextLine
name|line
init|=
name|tl
operator|->
name|createLine
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|line
operator|.
name|isValid
argument_list|()
condition|)
break|break;
name|line
operator|.
name|setLeadingIncluded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QFixed
name|left
decl_stmt|,
name|right
decl_stmt|;
name|floatMargins
argument_list|(
name|layoutStruct
operator|->
name|y
argument_list|,
name|layoutStruct
argument_list|,
operator|&
name|left
argument_list|,
operator|&
name|right
argument_list|)
expr_stmt|;
name|left
operator|=
name|qMax
argument_list|(
name|left
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|right
operator|=
name|qMin
argument_list|(
name|right
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|QFixed
name|text_indent
decl_stmt|;
if|if
condition|(
name|firstLine
condition|)
block|{
name|text_indent
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|blockFormat
operator|.
name|textIndent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dir
operator|==
name|Qt
operator|::
name|LeftToRight
condition|)
name|left
operator|+=
name|text_indent
expr_stmt|;
else|else
name|right
operator|-=
name|text_indent
expr_stmt|;
name|firstLine
operator|=
literal|false
expr_stmt|;
block|}
comment|//         qDebug()<< "layout line y="<< currentYPos<< "left="<< left<< "right="<<right;
if|if
condition|(
name|fixedColumnWidth
operator|!=
operator|-
literal|1
condition|)
name|line
operator|.
name|setNumColumns
argument_list|(
name|fixedColumnWidth
argument_list|,
operator|(
name|right
operator|-
name|left
operator|)
operator|.
name|toReal
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|line
operator|.
name|setLineWidth
argument_list|(
operator|(
name|right
operator|-
name|left
operator|)
operator|.
name|toReal
argument_list|()
argument_list|)
expr_stmt|;
comment|//        qDebug()<< "layoutBlock; layouting line with width"<< right - left<< "->textWidth"<< line.textWidth();
name|floatMargins
argument_list|(
name|layoutStruct
operator|->
name|y
argument_list|,
name|layoutStruct
argument_list|,
operator|&
name|left
argument_list|,
operator|&
name|right
argument_list|)
expr_stmt|;
name|left
operator|=
name|qMax
argument_list|(
name|left
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|right
operator|=
name|qMin
argument_list|(
name|right
argument_list|,
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|dir
operator|==
name|Qt
operator|::
name|LeftToRight
condition|)
name|left
operator|+=
name|text_indent
expr_stmt|;
else|else
name|right
operator|-=
name|text_indent
expr_stmt|;
if|if
condition|(
name|fixedColumnWidth
operator|==
operator|-
literal|1
operator|&&
name|QFixed
operator|::
name|fromReal
argument_list|(
name|line
operator|.
name|naturalTextWidth
argument_list|()
argument_list|)
operator|>
name|right
operator|-
name|left
condition|)
block|{
comment|// float has been added in the meantime, redo
name|layoutStruct
operator|->
name|pendingFloats
operator|.
name|clear
argument_list|()
expr_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
operator|(
name|right
operator|-
name|left
operator|)
operator|.
name|toReal
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|QFixed
operator|::
name|fromReal
argument_list|(
name|line
operator|.
name|naturalTextWidth
argument_list|()
argument_list|)
operator|>
name|right
operator|-
name|left
condition|)
block|{
if|if
condition|(
name|haveWordOrAnyWrapMode
condition|)
block|{
name|option
operator|.
name|setWrapMode
argument_list|(
name|QTextOption
operator|::
name|WrapAnywhere
argument_list|)
expr_stmt|;
name|tl
operator|->
name|setTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
name|layoutStruct
operator|->
name|pendingFloats
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// lines min width more than what we have
name|layoutStruct
operator|->
name|y
operator|=
name|findY
argument_list|(
name|layoutStruct
operator|->
name|y
argument_list|,
name|layoutStruct
argument_list|,
name|QFixed
operator|::
name|fromReal
argument_list|(
name|line
operator|.
name|naturalTextWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|floatMargins
argument_list|(
name|layoutStruct
operator|->
name|y
argument_list|,
name|layoutStruct
argument_list|,
operator|&
name|left
argument_list|,
operator|&
name|right
argument_list|)
expr_stmt|;
name|left
operator|=
name|qMax
argument_list|(
name|left
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|right
operator|=
name|qMin
argument_list|(
name|right
argument_list|,
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|dir
operator|==
name|Qt
operator|::
name|LeftToRight
condition|)
name|left
operator|+=
name|text_indent
expr_stmt|;
else|else
name|right
operator|-=
name|text_indent
expr_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
name|qMax
argument_list|<
name|qreal
argument_list|>
argument_list|(
name|line
operator|.
name|naturalTextWidth
argument_list|()
argument_list|,
operator|(
name|right
operator|-
name|left
operator|)
operator|.
name|toReal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|haveWordOrAnyWrapMode
condition|)
block|{
name|option
operator|.
name|setWrapMode
argument_list|(
name|QTextOption
operator|::
name|WordWrap
argument_list|)
expr_stmt|;
name|tl
operator|->
name|setTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|QFixed
name|lineBreakHeight
decl_stmt|,
name|lineHeight
decl_stmt|,
name|lineAdjustment
decl_stmt|;
name|qreal
name|scaling
init|=
operator|(
name|q
operator|->
name|paintDevice
argument_list|()
operator|&&
name|q
operator|->
name|paintDevice
argument_list|()
operator|->
name|logicalDpiY
argument_list|()
operator|!=
name|qt_defaultDpi
argument_list|()
operator|)
condition|?
name|qreal
argument_list|(
name|q
operator|->
name|paintDevice
argument_list|()
operator|->
name|logicalDpiY
argument_list|()
argument_list|)
operator|/
name|qreal
argument_list|(
name|qt_defaultDpi
argument_list|()
argument_list|)
else|:
literal|1
decl_stmt|;
name|getLineHeightParams
argument_list|(
name|blockFormat
argument_list|,
name|line
argument_list|,
name|scaling
argument_list|,
operator|&
name|lineAdjustment
argument_list|,
operator|&
name|lineBreakHeight
argument_list|,
operator|&
name|lineHeight
argument_list|)
expr_stmt|;
if|if
condition|(
name|layoutStruct
operator|->
name|pageHeight
operator|>
literal|0
operator|&&
name|layoutStruct
operator|->
name|absoluteY
argument_list|()
operator|+
name|lineBreakHeight
operator|>
name|layoutStruct
operator|->
name|pageBottom
condition|)
block|{
name|layoutStruct
operator|->
name|newPage
argument_list|()
expr_stmt|;
name|floatMargins
argument_list|(
name|layoutStruct
operator|->
name|y
argument_list|,
name|layoutStruct
argument_list|,
operator|&
name|left
argument_list|,
operator|&
name|right
argument_list|)
expr_stmt|;
name|left
operator|=
name|qMax
argument_list|(
name|left
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|right
operator|=
name|qMin
argument_list|(
name|right
argument_list|,
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|dir
operator|==
name|Qt
operator|::
name|LeftToRight
condition|)
name|left
operator|+=
name|text_indent
expr_stmt|;
else|else
name|right
operator|-=
name|text_indent
expr_stmt|;
block|}
name|line
operator|.
name|setPosition
argument_list|(
name|QPointF
argument_list|(
operator|(
name|left
operator|-
name|layoutStruct
operator|->
name|x_left
operator|)
operator|.
name|toReal
argument_list|()
argument_list|,
operator|(
name|layoutStruct
operator|->
name|y
operator|-
name|cy
operator|-
name|lineAdjustment
operator|)
operator|.
name|toReal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|layoutStruct
operator|->
name|y
operator|+=
name|lineHeight
expr_stmt|;
name|layoutStruct
operator|->
name|contentsWidth
operator|=
name|qMax
argument_list|<
name|QFixed
argument_list|>
argument_list|(
name|layoutStruct
operator|->
name|contentsWidth
argument_list|,
name|QFixed
operator|::
name|fromReal
argument_list|(
name|line
operator|.
name|x
argument_list|()
operator|+
name|line
operator|.
name|naturalTextWidth
argument_list|()
argument_list|)
operator|+
name|totalRightMargin
argument_list|)
expr_stmt|;
comment|// position floats
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|layoutStruct
operator|->
name|pendingFloats
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextFrame
modifier|*
name|f
init|=
name|layoutStruct
operator|->
name|pendingFloats
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|positionFloat
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|layoutStruct
operator|->
name|pendingFloats
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|tl
operator|->
name|endLayout
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|int
name|cnt
init|=
name|tl
operator|->
name|lineCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
operator|++
name|i
control|)
block|{
name|LDEBUG
operator|<<
literal|"going to move text line"
operator|<<
name|i
expr_stmt|;
name|QTextLine
name|line
init|=
name|tl
operator|->
name|lineAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|layoutStruct
operator|->
name|contentsWidth
operator|=
name|qMax
argument_list|(
name|layoutStruct
operator|->
name|contentsWidth
argument_list|,
name|QFixed
operator|::
name|fromReal
argument_list|(
name|line
operator|.
name|x
argument_list|()
operator|+
name|tl
operator|->
name|lineAt
argument_list|(
name|i
argument_list|)
operator|.
name|naturalTextWidth
argument_list|()
argument_list|)
operator|+
name|totalRightMargin
argument_list|)
expr_stmt|;
name|QFixed
name|lineBreakHeight
decl_stmt|,
name|lineHeight
decl_stmt|,
name|lineAdjustment
decl_stmt|;
name|qreal
name|scaling
init|=
operator|(
name|q
operator|->
name|paintDevice
argument_list|()
operator|&&
name|q
operator|->
name|paintDevice
argument_list|()
operator|->
name|logicalDpiY
argument_list|()
operator|!=
name|qt_defaultDpi
argument_list|()
operator|)
condition|?
name|qreal
argument_list|(
name|q
operator|->
name|paintDevice
argument_list|()
operator|->
name|logicalDpiY
argument_list|()
argument_list|)
operator|/
name|qreal
argument_list|(
name|qt_defaultDpi
argument_list|()
argument_list|)
else|:
literal|1
decl_stmt|;
name|getLineHeightParams
argument_list|(
name|blockFormat
argument_list|,
name|line
argument_list|,
name|scaling
argument_list|,
operator|&
name|lineAdjustment
argument_list|,
operator|&
name|lineBreakHeight
argument_list|,
operator|&
name|lineHeight
argument_list|)
expr_stmt|;
if|if
condition|(
name|layoutStruct
operator|->
name|pageHeight
operator|!=
name|QFIXED_MAX
condition|)
block|{
if|if
condition|(
name|layoutStruct
operator|->
name|absoluteY
argument_list|()
operator|+
name|lineBreakHeight
operator|>
name|layoutStruct
operator|->
name|pageBottom
condition|)
name|layoutStruct
operator|->
name|newPage
argument_list|()
expr_stmt|;
name|line
operator|.
name|setPosition
argument_list|(
name|QPointF
argument_list|(
name|line
operator|.
name|position
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
operator|(
name|layoutStruct
operator|->
name|y
operator|-
name|lineAdjustment
operator|)
operator|.
name|toReal
argument_list|()
operator|-
name|tl
operator|->
name|position
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|layoutStruct
operator|->
name|y
operator|+=
name|lineHeight
expr_stmt|;
block|}
if|if
condition|(
name|layoutStruct
operator|->
name|updateRect
operator|.
name|isValid
argument_list|()
operator|&&
name|blockLength
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|layoutFrom
operator|>=
name|blockPosition
operator|+
name|blockLength
condition|)
block|{
comment|// if our height didn't change and the change in the document is
comment|// in one of the later paragraphs, then we don't need to repaint
comment|// this one
name|layoutStruct
operator|->
name|updateRect
operator|.
name|setTop
argument_list|(
name|qMax
argument_list|(
name|layoutStruct
operator|->
name|updateRect
operator|.
name|top
argument_list|()
argument_list|,
name|layoutStruct
operator|->
name|y
operator|.
name|toReal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|layoutTo
operator|<
name|blockPosition
condition|)
block|{
if|if
condition|(
name|oldPosition
operator|==
name|tl
operator|->
name|position
argument_list|()
condition|)
comment|// if the change in the document happened earlier in the document
comment|// and our position did /not/ change because none of the earlier paragraphs
comment|// or frames changed their height, then we don't need to repaint
comment|// this one
name|layoutStruct
operator|->
name|updateRect
operator|.
name|setBottom
argument_list|(
name|qMin
argument_list|(
name|layoutStruct
operator|->
name|updateRect
operator|.
name|bottom
argument_list|()
argument_list|,
name|tl
operator|->
name|position
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|layoutStruct
operator|->
name|updateRect
operator|.
name|setBottom
argument_list|(
name|qreal
argument_list|(
name|INT_MAX
argument_list|)
argument_list|)
expr_stmt|;
comment|// reset
block|}
block|}
block|}
comment|// ### doesn't take floats into account. would need to do it per line. but how to retrieve then? (Simon)
specifier|const
name|QFixed
name|margins
init|=
name|totalLeftMargin
operator|+
name|totalRightMargin
decl_stmt|;
name|layoutStruct
operator|->
name|minimumWidth
operator|=
name|qMax
argument_list|(
name|layoutStruct
operator|->
name|minimumWidth
argument_list|,
name|QFixed
operator|::
name|fromReal
argument_list|(
name|tl
operator|->
name|minimumWidth
argument_list|()
argument_list|)
operator|+
name|margins
argument_list|)
expr_stmt|;
specifier|const
name|QFixed
name|maxW
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|tl
operator|->
name|maximumWidth
argument_list|()
argument_list|)
operator|+
name|margins
decl_stmt|;
if|if
condition|(
name|maxW
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|layoutStruct
operator|->
name|maximumWidth
operator|==
name|QFIXED_MAX
condition|)
name|layoutStruct
operator|->
name|maximumWidth
operator|=
name|maxW
expr_stmt|;
else|else
name|layoutStruct
operator|->
name|maximumWidth
operator|=
name|qMax
argument_list|(
name|layoutStruct
operator|->
name|maximumWidth
argument_list|,
name|maxW
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|floatMargins
name|void
name|QTextDocumentLayoutPrivate
operator|::
name|floatMargins
parameter_list|(
specifier|const
name|QFixed
modifier|&
name|y
parameter_list|,
specifier|const
name|QTextLayoutStruct
modifier|*
name|layoutStruct
parameter_list|,
name|QFixed
modifier|*
name|left
parameter_list|,
name|QFixed
modifier|*
name|right
parameter_list|)
specifier|const
block|{
comment|//     qDebug()<< "floatMargins y="<< y;
operator|*
name|left
operator|=
name|layoutStruct
operator|->
name|x_left
expr_stmt|;
operator|*
name|right
operator|=
name|layoutStruct
operator|->
name|x_right
expr_stmt|;
name|QTextFrameData
modifier|*
name|lfd
init|=
name|data
argument_list|(
name|layoutStruct
operator|->
name|frame
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lfd
operator|->
name|floats
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextFrameData
modifier|*
name|fd
init|=
name|data
argument_list|(
name|lfd
operator|->
name|floats
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fd
operator|->
name|layoutDirty
condition|)
block|{
if|if
condition|(
name|fd
operator|->
name|position
operator|.
name|y
operator|<=
name|y
operator|&&
name|fd
operator|->
name|position
operator|.
name|y
operator|+
name|fd
operator|->
name|size
operator|.
name|height
operator|>
name|y
condition|)
block|{
comment|//                 qDebug()<< "adjusting with float"<< f<< fd->position.x()<< fd->size.width();
if|if
condition|(
name|lfd
operator|->
name|floats
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|frameFormat
argument_list|()
operator|.
name|position
argument_list|()
operator|==
name|QTextFrameFormat
operator|::
name|FloatLeft
condition|)
operator|*
name|left
operator|=
name|qMax
argument_list|(
operator|*
name|left
argument_list|,
name|fd
operator|->
name|position
operator|.
name|x
operator|+
name|fd
operator|->
name|size
operator|.
name|width
argument_list|)
expr_stmt|;
else|else
operator|*
name|right
operator|=
name|qMin
argument_list|(
operator|*
name|right
argument_list|,
name|fd
operator|->
name|position
operator|.
name|x
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//     qDebug()<< "floatMargins: left="<<*left<<"right="<<*right<<"y="<<y;
block|}
end_function
begin_function
DECL|function|findY
name|QFixed
name|QTextDocumentLayoutPrivate
operator|::
name|findY
parameter_list|(
name|QFixed
name|yFrom
parameter_list|,
specifier|const
name|QTextLayoutStruct
modifier|*
name|layoutStruct
parameter_list|,
name|QFixed
name|requiredWidth
parameter_list|)
specifier|const
block|{
name|QFixed
name|right
decl_stmt|,
name|left
decl_stmt|;
name|requiredWidth
operator|=
name|qMin
argument_list|(
name|requiredWidth
argument_list|,
name|layoutStruct
operator|->
name|x_right
operator|-
name|layoutStruct
operator|->
name|x_left
argument_list|)
expr_stmt|;
comment|//     qDebug()<< "findY:"<< yFrom;
while|while
condition|(
literal|1
condition|)
block|{
name|floatMargins
argument_list|(
name|yFrom
argument_list|,
name|layoutStruct
argument_list|,
operator|&
name|left
argument_list|,
operator|&
name|right
argument_list|)
expr_stmt|;
comment|//         qDebug()<< "    yFrom="<< yFrom<<"right="<< right<< "left="<< left<< "requiredWidth="<< requiredWidth;
if|if
condition|(
name|right
operator|-
name|left
operator|>=
name|requiredWidth
condition|)
break|break;
comment|// move float down until we find enough space
name|QFixed
name|newY
init|=
name|QFIXED_MAX
decl_stmt|;
name|QTextFrameData
modifier|*
name|lfd
init|=
name|data
argument_list|(
name|layoutStruct
operator|->
name|frame
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lfd
operator|->
name|floats
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextFrameData
modifier|*
name|fd
init|=
name|data
argument_list|(
name|lfd
operator|->
name|floats
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fd
operator|->
name|layoutDirty
condition|)
block|{
if|if
condition|(
name|fd
operator|->
name|position
operator|.
name|y
operator|<=
name|yFrom
operator|&&
name|fd
operator|->
name|position
operator|.
name|y
operator|+
name|fd
operator|->
name|size
operator|.
name|height
operator|>
name|yFrom
condition|)
name|newY
operator|=
name|qMin
argument_list|(
name|newY
argument_list|,
name|fd
operator|->
name|position
operator|.
name|y
operator|+
name|fd
operator|->
name|size
operator|.
name|height
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newY
operator|==
name|QFIXED_MAX
condition|)
break|break;
name|yFrom
operator|=
name|newY
expr_stmt|;
block|}
return|return
name|yFrom
return|;
block|}
end_function
begin_constructor
DECL|function|QTextDocumentLayout
name|QTextDocumentLayout
operator|::
name|QTextDocumentLayout
parameter_list|(
name|QTextDocument
modifier|*
name|doc
parameter_list|)
member_init_list|:
name|QAbstractTextDocumentLayout
argument_list|(
operator|*
operator|new
name|QTextDocumentLayoutPrivate
argument_list|,
name|doc
argument_list|)
block|{
name|registerHandler
argument_list|(
name|QTextFormat
operator|::
name|ImageObject
argument_list|,
operator|new
name|QTextImageHandler
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|draw
name|void
name|QTextDocumentLayout
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|PaintContext
modifier|&
name|context
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
name|QTextFrame
modifier|*
name|frame
init|=
name|d
operator|->
name|document
operator|->
name|rootFrame
argument_list|()
decl_stmt|;
name|QTextFrameData
modifier|*
name|fd
init|=
name|data
argument_list|(
name|frame
argument_list|)
decl_stmt|;
if|if
condition|(
name|fd
operator|->
name|sizeDirty
condition|)
return|return;
if|if
condition|(
name|context
operator|.
name|clip
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|->
name|ensureLayouted
argument_list|(
name|QFixed
operator|::
name|fromReal
argument_list|(
name|context
operator|.
name|clip
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|ensureLayoutFinished
argument_list|()
expr_stmt|;
block|}
name|QFixed
name|width
init|=
name|fd
operator|->
name|size
operator|.
name|width
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|document
operator|->
name|pageSize
argument_list|()
operator|.
name|width
argument_list|()
operator|==
literal|0
operator|&&
name|d
operator|->
name|viewportRect
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// we're in NoWrap mode, meaning the frame should expand to the viewport
comment|// so that backgrounds are drawn correctly
name|fd
operator|->
name|size
operator|.
name|width
operator|=
name|qMax
argument_list|(
name|width
argument_list|,
name|QFixed
operator|::
name|fromReal
argument_list|(
name|d
operator|->
name|viewportRect
operator|.
name|right
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Make sure we conform to the root frames bounds when drawing.
name|d
operator|->
name|clipRect
operator|=
name|QRectF
argument_list|(
name|fd
operator|->
name|position
operator|.
name|toPointF
argument_list|()
argument_list|,
name|fd
operator|->
name|size
operator|.
name|toSizeF
argument_list|()
argument_list|)
operator|.
name|adjusted
argument_list|(
name|fd
operator|->
name|leftMargin
operator|.
name|toReal
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|-
name|fd
operator|->
name|rightMargin
operator|.
name|toReal
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|drawFrame
argument_list|(
name|QPointF
argument_list|()
argument_list|,
name|painter
argument_list|,
name|context
argument_list|,
name|frame
argument_list|)
expr_stmt|;
name|fd
operator|->
name|size
operator|.
name|width
operator|=
name|width
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setViewport
name|void
name|QTextDocumentLayout
operator|::
name|setViewport
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|viewport
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|viewportRect
operator|=
name|viewport
expr_stmt|;
block|}
end_function
begin_function
DECL|function|markFrames
specifier|static
name|void
name|markFrames
parameter_list|(
name|QTextFrame
modifier|*
name|current
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|oldLength
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|int
name|end
init|=
name|qMax
argument_list|(
name|oldLength
argument_list|,
name|length
argument_list|)
operator|+
name|from
decl_stmt|;
if|if
condition|(
name|current
operator|->
name|firstPosition
argument_list|()
operator|>=
name|end
operator|||
name|current
operator|->
name|lastPosition
argument_list|()
operator|<
name|from
condition|)
return|return;
name|QTextFrameData
modifier|*
name|fd
init|=
name|data
argument_list|(
name|current
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fd
operator|->
name|floats
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextFrame
modifier|*
name|f
init|=
name|fd
operator|->
name|floats
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|f
condition|)
block|{
comment|// float got removed in editing operation
name|fd
operator|->
name|floats
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|--
name|i
expr_stmt|;
block|}
block|}
name|fd
operator|->
name|layoutDirty
operator|=
literal|true
expr_stmt|;
name|fd
operator|->
name|sizeDirty
operator|=
literal|true
expr_stmt|;
comment|//     qDebug("    marking frame (%d--%d) as dirty", current->firstPosition(), current->lastPosition());
name|QList
argument_list|<
name|QTextFrame
modifier|*
argument_list|>
name|children
init|=
name|current
operator|->
name|childFrames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|markFrames
argument_list|(
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|from
argument_list|,
name|oldLength
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|documentChanged
name|void
name|QTextDocumentLayout
operator|::
name|documentChanged
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|oldLength
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
name|QTextBlock
name|blockIt
init|=
name|document
argument_list|()
operator|->
name|findBlock
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|QTextBlock
name|endIt
init|=
name|document
argument_list|()
operator|->
name|findBlock
argument_list|(
name|qMax
argument_list|(
literal|0
argument_list|,
name|from
operator|+
name|length
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|endIt
operator|.
name|isValid
argument_list|()
condition|)
name|endIt
operator|=
name|endIt
operator|.
name|next
argument_list|()
expr_stmt|;
for|for
control|(
init|;
name|blockIt
operator|.
name|isValid
argument_list|()
operator|&&
name|blockIt
operator|!=
name|endIt
condition|;
name|blockIt
operator|=
name|blockIt
operator|.
name|next
argument_list|()
control|)
name|blockIt
operator|.
name|clearLayout
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|docPrivate
operator|->
name|pageSize
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|QRectF
name|updateRect
decl_stmt|;
name|d
operator|->
name|lazyLayoutStepSize
operator|=
literal|1000
expr_stmt|;
name|d
operator|->
name|sizeChangedTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|d
operator|->
name|insideDocumentChange
operator|=
literal|true
expr_stmt|;
specifier|const
name|int
name|documentLength
init|=
name|d
operator|->
name|docPrivate
operator|->
name|length
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|fullLayout
init|=
operator|(
name|oldLength
operator|==
literal|0
operator|&&
name|length
operator|==
name|documentLength
operator|)
decl_stmt|;
specifier|const
name|bool
name|smallChange
init|=
name|documentLength
operator|>
literal|0
operator|&&
operator|(
name|qMax
argument_list|(
name|length
argument_list|,
name|oldLength
argument_list|)
operator|*
literal|100
operator|/
name|documentLength
operator|)
operator|<
literal|5
decl_stmt|;
comment|// don't show incremental layout progress (avoid scroll bar flicker)
comment|// if we see only a small change in the document and we're either starting
comment|// a layout run or we're already in progress for that and we haven't seen
comment|// any bigger change previously (showLayoutProgress already false)
if|if
condition|(
name|smallChange
operator|&&
operator|(
name|d
operator|->
name|currentLazyLayoutPosition
operator|==
operator|-
literal|1
operator|||
name|d
operator|->
name|showLayoutProgress
operator|==
literal|false
operator|)
condition|)
name|d
operator|->
name|showLayoutProgress
operator|=
literal|false
expr_stmt|;
else|else
name|d
operator|->
name|showLayoutProgress
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|fullLayout
condition|)
block|{
name|d
operator|->
name|contentHasAlignment
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|currentLazyLayoutPosition
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|checkPoints
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|layoutStep
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|ensureLayoutedByPosition
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|updateRect
operator|=
name|doLayout
argument_list|(
name|from
argument_list|,
name|oldLength
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|layoutTimer
operator|.
name|isActive
argument_list|()
operator|&&
name|d
operator|->
name|currentLazyLayoutPosition
operator|!=
operator|-
literal|1
condition|)
name|d
operator|->
name|layoutTimer
operator|.
name|start
argument_list|(
literal|10
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|insideDocumentChange
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|showLayoutProgress
condition|)
block|{
specifier|const
name|QSizeF
name|newSize
init|=
name|dynamicDocumentSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|newSize
operator|!=
name|d
operator|->
name|lastReportedSize
condition|)
block|{
name|d
operator|->
name|lastReportedSize
operator|=
name|newSize
expr_stmt|;
emit|emit
name|documentSizeChanged
argument_list|(
name|newSize
argument_list|)
emit|;
block|}
block|}
if|if
condition|(
operator|!
name|updateRect
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// don't use the frame size, it might have shrunken
name|updateRect
operator|=
name|QRectF
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QSizeF
argument_list|(
name|qreal
argument_list|(
name|INT_MAX
argument_list|)
argument_list|,
name|qreal
argument_list|(
name|INT_MAX
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
emit|emit
name|update
argument_list|(
name|updateRect
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|doLayout
name|QRectF
name|QTextDocumentLayout
operator|::
name|doLayout
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|oldLength
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
comment|//     qDebug("documentChange: from=%d, oldLength=%d, length=%d", from, oldLength, length);
comment|// mark all frames between f_start and f_end as dirty
name|markFrames
argument_list|(
name|d
operator|->
name|docPrivate
operator|->
name|rootFrame
argument_list|()
argument_list|,
name|from
argument_list|,
name|oldLength
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|QRectF
name|updateRect
decl_stmt|;
name|QTextFrame
modifier|*
name|root
init|=
name|d
operator|->
name|docPrivate
operator|->
name|rootFrame
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
argument_list|(
name|root
argument_list|)
operator|->
name|sizeDirty
condition|)
name|updateRect
operator|=
name|d
operator|->
name|layoutFrame
argument_list|(
name|root
argument_list|,
name|from
argument_list|,
name|from
operator|+
name|length
argument_list|)
expr_stmt|;
name|data
argument_list|(
name|root
argument_list|)
operator|->
name|layoutDirty
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|currentLazyLayoutPosition
operator|==
operator|-
literal|1
condition|)
name|layoutFinished
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|showLayoutProgress
condition|)
name|d
operator|->
name|sizeChangedTimer
operator|.
name|start
argument_list|(
literal|0
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|updateRect
return|;
block|}
end_function
begin_function
DECL|function|hitTest
name|int
name|QTextDocumentLayout
operator|::
name|hitTest
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|point
parameter_list|,
name|Qt
operator|::
name|HitTestAccuracy
name|accuracy
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureLayouted
argument_list|(
name|QFixed
operator|::
name|fromReal
argument_list|(
name|point
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTextFrame
modifier|*
name|f
init|=
name|d
operator|->
name|docPrivate
operator|->
name|rootFrame
argument_list|()
decl_stmt|;
name|int
name|position
init|=
literal|0
decl_stmt|;
name|QTextLayout
modifier|*
name|l
init|=
literal|0
decl_stmt|;
name|QFixedPoint
name|pointf
decl_stmt|;
name|pointf
operator|.
name|x
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|point
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|pointf
operator|.
name|y
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|point
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QTextDocumentLayoutPrivate
operator|::
name|HitPoint
name|p
init|=
name|d
operator|->
name|hitTest
argument_list|(
name|f
argument_list|,
name|pointf
argument_list|,
operator|&
name|position
argument_list|,
operator|&
name|l
argument_list|,
name|accuracy
argument_list|)
decl_stmt|;
if|if
condition|(
name|accuracy
operator|==
name|Qt
operator|::
name|ExactHit
operator|&&
name|p
operator|<
name|QTextDocumentLayoutPrivate
operator|::
name|PointExact
condition|)
return|return
operator|-
literal|1
return|;
comment|// ensure we stay within document bounds
name|int
name|lastPos
init|=
name|f
operator|->
name|lastPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|&&
operator|!
name|l
operator|->
name|preeditAreaText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|lastPos
operator|+=
name|l
operator|->
name|preeditAreaText
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
name|position
operator|>
name|lastPos
condition|)
name|position
operator|=
name|lastPos
expr_stmt|;
elseif|else
if|if
condition|(
name|position
operator|<
literal|0
condition|)
name|position
operator|=
literal|0
expr_stmt|;
return|return
name|position
return|;
block|}
end_function
begin_function
DECL|function|resizeInlineObject
name|void
name|QTextDocumentLayout
operator|::
name|resizeInlineObject
parameter_list|(
name|QTextInlineObject
name|item
parameter_list|,
name|int
name|posInDocument
parameter_list|,
specifier|const
name|QTextFormat
modifier|&
name|format
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|f
init|=
name|format
operator|.
name|toCharFormat
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|f
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QTextObjectHandler
name|handler
init|=
name|d
operator|->
name|handlers
operator|.
name|value
argument_list|(
name|f
operator|.
name|objectType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|handler
operator|.
name|component
condition|)
return|return;
name|QSizeF
name|intrinsic
init|=
name|handler
operator|.
name|iface
operator|->
name|intrinsicSize
argument_list|(
name|d
operator|->
name|document
argument_list|,
name|posInDocument
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|QTextFrameFormat
operator|::
name|Position
name|pos
init|=
name|QTextFrameFormat
operator|::
name|InFlow
decl_stmt|;
name|QTextFrame
modifier|*
name|frame
init|=
name|qobject_cast
argument_list|<
name|QTextFrame
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|document
operator|->
name|objectForFormat
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|frame
condition|)
block|{
name|pos
operator|=
name|frame
operator|->
name|frameFormat
argument_list|()
operator|.
name|position
argument_list|()
expr_stmt|;
name|QTextFrameData
modifier|*
name|fd
init|=
name|data
argument_list|(
name|frame
argument_list|)
decl_stmt|;
name|fd
operator|->
name|sizeDirty
operator|=
literal|false
expr_stmt|;
name|fd
operator|->
name|size
operator|=
name|QFixedSize
operator|::
name|fromSizeF
argument_list|(
name|intrinsic
argument_list|)
expr_stmt|;
name|fd
operator|->
name|minimumWidth
operator|=
name|fd
operator|->
name|maximumWidth
operator|=
name|fd
operator|->
name|size
operator|.
name|width
expr_stmt|;
block|}
name|QSizeF
name|inlineSize
init|=
operator|(
name|pos
operator|==
name|QTextFrameFormat
operator|::
name|InFlow
condition|?
name|intrinsic
else|:
name|QSizeF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|)
decl_stmt|;
name|item
operator|.
name|setWidth
argument_list|(
name|inlineSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QFontMetrics
name|m
argument_list|(
name|f
operator|.
name|font
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|f
operator|.
name|verticalAlignment
argument_list|()
condition|)
block|{
case|case
name|QTextCharFormat
operator|::
name|AlignMiddle
case|:
name|item
operator|.
name|setDescent
argument_list|(
name|inlineSize
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|item
operator|.
name|setAscent
argument_list|(
name|inlineSize
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTextCharFormat
operator|::
name|AlignBaseline
case|:
name|item
operator|.
name|setDescent
argument_list|(
name|m
operator|.
name|descent
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|setAscent
argument_list|(
name|inlineSize
operator|.
name|height
argument_list|()
operator|-
name|m
operator|.
name|descent
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|item
operator|.
name|setDescent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|item
operator|.
name|setAscent
argument_list|(
name|inlineSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|positionInlineObject
name|void
name|QTextDocumentLayout
operator|::
name|positionInlineObject
parameter_list|(
name|QTextInlineObject
name|item
parameter_list|,
name|int
name|posInDocument
parameter_list|,
specifier|const
name|QTextFormat
modifier|&
name|format
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|posInDocument
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|.
name|width
argument_list|()
operator|!=
literal|0
condition|)
comment|// inline
return|return;
name|QTextCharFormat
name|f
init|=
name|format
operator|.
name|toCharFormat
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|f
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QTextObjectHandler
name|handler
init|=
name|d
operator|->
name|handlers
operator|.
name|value
argument_list|(
name|f
operator|.
name|objectType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|handler
operator|.
name|component
condition|)
return|return;
name|QTextFrame
modifier|*
name|frame
init|=
name|qobject_cast
argument_list|<
name|QTextFrame
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|document
operator|->
name|objectForFormat
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|frame
condition|)
return|return;
name|QTextBlock
name|b
init|=
name|d
operator|->
name|document
operator|->
name|findBlock
argument_list|(
name|frame
operator|->
name|firstPosition
argument_list|()
argument_list|)
decl_stmt|;
name|QTextLine
name|line
decl_stmt|;
if|if
condition|(
name|b
operator|.
name|position
argument_list|()
operator|<=
name|frame
operator|->
name|firstPosition
argument_list|()
operator|&&
name|b
operator|.
name|position
argument_list|()
operator|+
name|b
operator|.
name|length
argument_list|()
operator|>
name|frame
operator|->
name|lastPosition
argument_list|()
condition|)
name|line
operator|=
name|b
operator|.
name|layout
argument_list|()
operator|->
name|lineAt
argument_list|(
name|b
operator|.
name|layout
argument_list|()
operator|->
name|lineCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//     qDebug()<< "layoutObject: line.isValid"<< line.isValid()<< b.position()<< b.length()<<
comment|//         frame->firstPosition()<< frame->lastPosition();
name|d
operator|->
name|positionFloat
argument_list|(
name|frame
argument_list|,
name|line
operator|.
name|isValid
argument_list|()
condition|?
operator|&
name|line
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawInlineObject
name|void
name|QTextDocumentLayout
operator|::
name|drawInlineObject
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
name|QTextInlineObject
name|item
parameter_list|,
name|int
name|posInDocument
parameter_list|,
specifier|const
name|QTextFormat
modifier|&
name|format
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|f
init|=
name|format
operator|.
name|toCharFormat
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|f
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QTextFrame
modifier|*
name|frame
init|=
name|qobject_cast
argument_list|<
name|QTextFrame
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|document
operator|->
name|objectForFormat
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|frame
operator|&&
name|frame
operator|->
name|frameFormat
argument_list|()
operator|.
name|position
argument_list|()
operator|!=
name|QTextFrameFormat
operator|::
name|InFlow
condition|)
return|return;
comment|// don't draw floating frames from inline objects here but in drawFlow instead
comment|//    qDebug()<< "drawObject at"<< r;
name|QAbstractTextDocumentLayout
operator|::
name|drawInlineObject
argument_list|(
name|p
argument_list|,
name|rect
argument_list|,
name|item
argument_list|,
name|posInDocument
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dynamicPageCount
name|int
name|QTextDocumentLayout
operator|::
name|dynamicPageCount
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
specifier|const
name|QSizeF
name|pgSize
init|=
name|d
operator|->
name|document
operator|->
name|pageSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|pgSize
operator|.
name|height
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|1
return|;
return|return
name|qCeil
argument_list|(
name|dynamicDocumentSize
argument_list|()
operator|.
name|height
argument_list|()
operator|/
name|pgSize
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|dynamicDocumentSize
name|QSizeF
name|QTextDocumentLayout
operator|::
name|dynamicDocumentSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
return|return
name|data
argument_list|(
name|d
operator|->
name|docPrivate
operator|->
name|rootFrame
argument_list|()
argument_list|)
operator|->
name|size
operator|.
name|toSizeF
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|pageCount
name|int
name|QTextDocumentLayout
operator|::
name|pageCount
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureLayoutFinished
argument_list|()
expr_stmt|;
return|return
name|dynamicPageCount
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|documentSize
name|QSizeF
name|QTextDocumentLayout
operator|::
name|documentSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureLayoutFinished
argument_list|()
expr_stmt|;
return|return
name|dynamicDocumentSize
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|ensureLayouted
name|void
name|QTextDocumentLayoutPrivate
operator|::
name|ensureLayouted
parameter_list|(
name|QFixed
name|y
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentLazyLayoutPosition
operator|==
operator|-
literal|1
condition|)
return|return;
specifier|const
name|QSizeF
name|oldSize
init|=
name|q
operator|->
name|dynamicDocumentSize
argument_list|()
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|oldSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkPoints
operator|.
name|isEmpty
argument_list|()
condition|)
name|layoutStep
argument_list|()
expr_stmt|;
while|while
condition|(
name|currentLazyLayoutPosition
operator|!=
operator|-
literal|1
operator|&&
name|checkPoints
operator|.
name|last
argument_list|()
operator|.
name|y
operator|<
name|y
condition|)
name|layoutStep
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ensureLayoutedByPosition
name|void
name|QTextDocumentLayoutPrivate
operator|::
name|ensureLayoutedByPosition
parameter_list|(
name|int
name|position
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|currentLazyLayoutPosition
operator|==
operator|-
literal|1
condition|)
return|return;
if|if
condition|(
name|position
operator|<
name|currentLazyLayoutPosition
condition|)
return|return;
while|while
condition|(
name|currentLazyLayoutPosition
operator|!=
operator|-
literal|1
operator|&&
name|currentLazyLayoutPosition
operator|<
name|position
condition|)
block|{
cast|const_cast
argument_list|<
name|QTextDocumentLayout
operator|*
argument_list|>
argument_list|(
name|q_func
argument_list|()
argument_list|)
operator|->
name|doLayout
argument_list|(
name|currentLazyLayoutPosition
argument_list|,
literal|0
argument_list|,
name|INT_MAX
operator|-
name|currentLazyLayoutPosition
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|layoutStep
name|void
name|QTextDocumentLayoutPrivate
operator|::
name|layoutStep
parameter_list|()
specifier|const
block|{
name|ensureLayoutedByPosition
argument_list|(
name|currentLazyLayoutPosition
operator|+
name|lazyLayoutStepSize
argument_list|)
expr_stmt|;
name|lazyLayoutStepSize
operator|=
name|qMin
argument_list|(
literal|200000
argument_list|,
name|lazyLayoutStepSize
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCursorWidth
name|void
name|QTextDocumentLayout
operator|::
name|setCursorWidth
parameter_list|(
name|int
name|width
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|cursorWidth
operator|=
name|width
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorWidth
name|int
name|QTextDocumentLayout
operator|::
name|cursorWidth
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|cursorWidth
return|;
block|}
end_function
begin_function
DECL|function|setFixedColumnWidth
name|void
name|QTextDocumentLayout
operator|::
name|setFixedColumnWidth
parameter_list|(
name|int
name|width
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|fixedColumnWidth
operator|=
name|width
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tableCellBoundingRect
name|QRectF
name|QTextDocumentLayout
operator|::
name|tableCellBoundingRect
parameter_list|(
name|QTextTable
modifier|*
name|table
parameter_list|,
specifier|const
name|QTextTableCell
modifier|&
name|cell
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|cell
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QRectF
argument_list|()
return|;
name|QTextTableData
modifier|*
name|td
init|=
cast|static_cast
argument_list|<
name|QTextTableData
operator|*
argument_list|>
argument_list|(
name|data
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|QRectF
name|tableRect
init|=
name|tableBoundingRect
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|QRectF
name|cellRect
init|=
name|td
operator|->
name|cellRect
argument_list|(
name|cell
argument_list|)
decl_stmt|;
return|return
name|cellRect
operator|.
name|translated
argument_list|(
name|tableRect
operator|.
name|topLeft
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|tableBoundingRect
name|QRectF
name|QTextDocumentLayout
operator|::
name|tableBoundingRect
parameter_list|(
name|QTextTable
modifier|*
name|table
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|docPrivate
operator|->
name|pageSize
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QRectF
argument_list|()
return|;
name|d
operator|->
name|ensureLayoutFinished
argument_list|()
expr_stmt|;
name|QPointF
name|pos
decl_stmt|;
specifier|const
name|int
name|framePos
init|=
name|table
operator|->
name|firstPosition
argument_list|()
decl_stmt|;
name|QTextFrame
modifier|*
name|f
init|=
name|table
decl_stmt|;
while|while
condition|(
name|f
condition|)
block|{
name|QTextFrameData
modifier|*
name|fd
init|=
name|data
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|fd
operator|->
name|position
operator|.
name|toPointF
argument_list|()
expr_stmt|;
if|if
condition|(
name|f
operator|!=
name|table
condition|)
block|{
if|if
condition|(
name|QTextTable
modifier|*
name|table
init|=
name|qobject_cast
argument_list|<
name|QTextTable
operator|*
argument_list|>
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
name|framePos
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|isValid
argument_list|()
condition|)
name|pos
operator|+=
cast|static_cast
argument_list|<
name|QTextTableData
operator|*
argument_list|>
argument_list|(
name|fd
argument_list|)
operator|->
name|cellPosition
argument_list|(
name|cell
argument_list|)
operator|.
name|toPointF
argument_list|()
expr_stmt|;
block|}
block|}
name|f
operator|=
name|f
operator|->
name|parentFrame
argument_list|()
expr_stmt|;
block|}
return|return
name|QRectF
argument_list|(
name|pos
argument_list|,
name|data
argument_list|(
name|table
argument_list|)
operator|->
name|size
operator|.
name|toSizeF
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|frameBoundingRect
name|QRectF
name|QTextDocumentLayout
operator|::
name|frameBoundingRect
parameter_list|(
name|QTextFrame
modifier|*
name|frame
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|docPrivate
operator|->
name|pageSize
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QRectF
argument_list|()
return|;
name|d
operator|->
name|ensureLayoutFinished
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|frameBoundingRectInternal
argument_list|(
name|frame
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|frameBoundingRectInternal
name|QRectF
name|QTextDocumentLayoutPrivate
operator|::
name|frameBoundingRectInternal
parameter_list|(
name|QTextFrame
modifier|*
name|frame
parameter_list|)
specifier|const
block|{
name|QPointF
name|pos
decl_stmt|;
specifier|const
name|int
name|framePos
init|=
name|frame
operator|->
name|firstPosition
argument_list|()
decl_stmt|;
name|QTextFrame
modifier|*
name|f
init|=
name|frame
decl_stmt|;
while|while
condition|(
name|f
condition|)
block|{
name|QTextFrameData
modifier|*
name|fd
init|=
name|data
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|fd
operator|->
name|position
operator|.
name|toPointF
argument_list|()
expr_stmt|;
if|if
condition|(
name|QTextTable
modifier|*
name|table
init|=
name|qobject_cast
argument_list|<
name|QTextTable
operator|*
argument_list|>
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
name|framePos
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|isValid
argument_list|()
condition|)
name|pos
operator|+=
cast|static_cast
argument_list|<
name|QTextTableData
operator|*
argument_list|>
argument_list|(
name|fd
argument_list|)
operator|->
name|cellPosition
argument_list|(
name|cell
argument_list|)
operator|.
name|toPointF
argument_list|()
expr_stmt|;
block|}
name|f
operator|=
name|f
operator|->
name|parentFrame
argument_list|()
expr_stmt|;
block|}
return|return
name|QRectF
argument_list|(
name|pos
argument_list|,
name|data
argument_list|(
name|frame
argument_list|)
operator|->
name|size
operator|.
name|toSizeF
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|blockBoundingRect
name|QRectF
name|QTextDocumentLayout
operator|::
name|blockBoundingRect
parameter_list|(
specifier|const
name|QTextBlock
modifier|&
name|block
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|docPrivate
operator|->
name|pageSize
operator|.
name|isNull
argument_list|()
operator|||
operator|!
name|block
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QRectF
argument_list|()
return|;
name|d
operator|->
name|ensureLayoutedByPosition
argument_list|(
name|block
operator|.
name|position
argument_list|()
operator|+
name|block
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QTextFrame
modifier|*
name|frame
init|=
name|d
operator|->
name|document
operator|->
name|frameAt
argument_list|(
name|block
operator|.
name|position
argument_list|()
argument_list|)
decl_stmt|;
name|QPointF
name|offset
decl_stmt|;
specifier|const
name|int
name|blockPos
init|=
name|block
operator|.
name|position
argument_list|()
decl_stmt|;
while|while
condition|(
name|frame
condition|)
block|{
name|QTextFrameData
modifier|*
name|fd
init|=
name|data
argument_list|(
name|frame
argument_list|)
decl_stmt|;
name|offset
operator|+=
name|fd
operator|->
name|position
operator|.
name|toPointF
argument_list|()
expr_stmt|;
if|if
condition|(
name|QTextTable
modifier|*
name|table
init|=
name|qobject_cast
argument_list|<
name|QTextTable
operator|*
argument_list|>
argument_list|(
name|frame
argument_list|)
condition|)
block|{
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
name|blockPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|isValid
argument_list|()
condition|)
name|offset
operator|+=
cast|static_cast
argument_list|<
name|QTextTableData
operator|*
argument_list|>
argument_list|(
name|fd
argument_list|)
operator|->
name|cellPosition
argument_list|(
name|cell
argument_list|)
operator|.
name|toPointF
argument_list|()
expr_stmt|;
block|}
name|frame
operator|=
name|frame
operator|->
name|parentFrame
argument_list|()
expr_stmt|;
block|}
specifier|const
name|QTextLayout
modifier|*
name|layout
init|=
name|block
operator|.
name|layout
argument_list|()
decl_stmt|;
name|QRectF
name|rect
init|=
name|layout
operator|->
name|boundingRect
argument_list|()
decl_stmt|;
name|rect
operator|.
name|moveTopLeft
argument_list|(
name|layout
operator|->
name|position
argument_list|()
operator|+
name|offset
argument_list|)
expr_stmt|;
return|return
name|rect
return|;
block|}
end_function
begin_function
DECL|function|layoutStatus
name|int
name|QTextDocumentLayout
operator|::
name|layoutStatus
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|d
operator|->
name|currentLazyLayoutPosition
decl_stmt|;
if|if
condition|(
name|pos
operator|==
operator|-
literal|1
condition|)
return|return
literal|100
return|;
return|return
name|pos
operator|*
literal|100
operator|/
name|d
operator|->
name|document
operator|->
name|docHandle
argument_list|()
operator|->
name|length
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|QTextDocumentLayout
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|timerId
argument_list|()
operator|==
name|d
operator|->
name|layoutTimer
operator|.
name|timerId
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|currentLazyLayoutPosition
operator|!=
operator|-
literal|1
condition|)
name|d
operator|->
name|layoutStep
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|timerId
argument_list|()
operator|==
name|d
operator|->
name|sizeChangedTimer
operator|.
name|timerId
argument_list|()
condition|)
block|{
name|d
operator|->
name|lastReportedSize
operator|=
name|dynamicDocumentSize
argument_list|()
expr_stmt|;
emit|emit
name|documentSizeChanged
argument_list|(
name|d
operator|->
name|lastReportedSize
argument_list|)
emit|;
name|d
operator|->
name|sizeChangedTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|currentLazyLayoutPosition
operator|==
operator|-
literal|1
condition|)
block|{
specifier|const
name|int
name|newCount
init|=
name|dynamicPageCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|newCount
operator|!=
name|d
operator|->
name|lastPageCount
condition|)
block|{
name|d
operator|->
name|lastPageCount
operator|=
name|newCount
expr_stmt|;
emit|emit
name|pageCountChanged
argument_list|(
name|newCount
argument_list|)
emit|;
block|}
block|}
block|}
else|else
block|{
name|QAbstractTextDocumentLayout
operator|::
name|timerEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|layoutFinished
name|void
name|QTextDocumentLayout
operator|::
name|layoutFinished
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|layoutTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|insideDocumentChange
condition|)
name|d
operator|->
name|sizeChangedTimer
operator|.
name|start
argument_list|(
literal|0
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// reset
name|d
operator|->
name|showLayoutProgress
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ensureLayouted
name|void
name|QTextDocumentLayout
operator|::
name|ensureLayouted
parameter_list|(
name|qreal
name|y
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|ensureLayouted
argument_list|(
name|QFixed
operator|::
name|fromReal
argument_list|(
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|idealWidth
name|qreal
name|QTextDocumentLayout
operator|::
name|idealWidth
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureLayoutFinished
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|idealWidth
return|;
block|}
end_function
begin_function
DECL|function|contentHasAlignment
name|bool
name|QTextDocumentLayout
operator|::
name|contentHasAlignment
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTextDocumentLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|contentHasAlignment
return|;
block|}
end_function
begin_function
DECL|function|scaleToDevice
name|qreal
name|QTextDocumentLayoutPrivate
operator|::
name|scaleToDevice
parameter_list|(
name|qreal
name|value
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|paintDevice
condition|)
return|return
name|value
return|;
return|return
name|value
operator|*
name|paintDevice
operator|->
name|logicalDpiY
argument_list|()
operator|/
name|qreal
argument_list|(
name|qt_defaultDpi
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|scaleToDevice
name|QFixed
name|QTextDocumentLayoutPrivate
operator|::
name|scaleToDevice
parameter_list|(
name|QFixed
name|value
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|paintDevice
condition|)
return|return
name|value
return|;
return|return
name|value
operator|*
name|QFixed
argument_list|(
name|paintDevice
operator|->
name|logicalDpiY
argument_list|()
argument_list|)
operator|/
name|QFixed
argument_list|(
name|qt_defaultDpi
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qtextdocumentlayout_p.cpp"
end_include
end_unit
