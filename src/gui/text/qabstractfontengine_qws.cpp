begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qabstractfontengine_qws.h"
end_include
begin_include
include|#
directive|include
file|"qabstractfontengine_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qtextengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QFontEngineInfoPrivate
class|class
name|QFontEngineInfoPrivate
block|{
public|public:
DECL|function|QFontEngineInfoPrivate
specifier|inline
name|QFontEngineInfoPrivate
parameter_list|()
member_init_list|:
name|pixelSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|weight
argument_list|(
name|QFont
operator|::
name|Normal
argument_list|)
member_init_list|,
name|style
argument_list|(
name|QFont
operator|::
name|StyleNormal
argument_list|)
block|{}
DECL|member|family
name|QString
name|family
decl_stmt|;
DECL|member|pixelSize
name|qreal
name|pixelSize
decl_stmt|;
DECL|member|weight
name|int
name|weight
decl_stmt|;
DECL|member|style
name|QFont
operator|::
name|Style
name|style
decl_stmt|;
DECL|member|writingSystems
name|QList
argument_list|<
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|>
name|writingSystems
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     \class QFontEngineInfo     \preliminary     \brief The QFontEngineInfo class describes a specific font provided by a font engine plugin.     \since 4.3     \ingroup qws      \tableofcontents      QFontEngineInfo is used to describe a request of a font to a font engine plugin as well as to     describe the actual fonts a plugin provides.      \sa QAbstractFontEngine, QFontEnginePlugin */
end_comment
begin_comment
comment|/*!    Constructs a new empty QFontEngineInfo. */
end_comment
begin_constructor
DECL|function|QFontEngineInfo
name|QFontEngineInfo
operator|::
name|QFontEngineInfo
parameter_list|()
block|{
name|d
operator|=
operator|new
name|QFontEngineInfoPrivate
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!    Constructs a new QFontEngineInfo with the specified \a family.    The resulting object represents a freely scalable font with normal    weight and style. */
end_comment
begin_constructor
DECL|function|QFontEngineInfo
name|QFontEngineInfo
operator|::
name|QFontEngineInfo
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|)
block|{
name|d
operator|=
operator|new
name|QFontEngineInfoPrivate
expr_stmt|;
name|d
operator|->
name|family
operator|=
name|family
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!    Creates a new font engine info object with the same attributes as \a other. */
end_comment
begin_constructor
DECL|function|QFontEngineInfo
name|QFontEngineInfo
operator|::
name|QFontEngineInfo
parameter_list|(
specifier|const
name|QFontEngineInfo
modifier|&
name|other
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QFontEngineInfoPrivate
argument_list|(
operator|*
name|other
operator|.
name|d
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!    Assigns \a other to this font engine info object, and returns a reference    to this. */
end_comment
begin_function
DECL|function|operator =
name|QFontEngineInfo
modifier|&
name|QFontEngineInfo
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QFontEngineInfo
modifier|&
name|other
parameter_list|)
block|{
operator|*
name|d
operator|=
operator|*
name|other
operator|.
name|d
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!    Destroys this QFontEngineInfo object. */
end_comment
begin_destructor
DECL|function|~QFontEngineInfo
name|QFontEngineInfo
operator|::
name|~
name|QFontEngineInfo
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!    \property QFontEngineInfo::family    the family name of the font */
end_comment
begin_function
DECL|function|setFamily
name|void
name|QFontEngineInfo
operator|::
name|setFamily
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|)
block|{
name|d
operator|->
name|family
operator|=
name|family
expr_stmt|;
block|}
end_function
begin_function
DECL|function|family
name|QString
name|QFontEngineInfo
operator|::
name|family
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|family
return|;
block|}
end_function
begin_comment
comment|/*!    \property QFontEngineInfo::pixelSize    the pixel size of the font     A pixel size of 0 represents a freely scalable font. */
end_comment
begin_function
DECL|function|setPixelSize
name|void
name|QFontEngineInfo
operator|::
name|setPixelSize
parameter_list|(
name|qreal
name|size
parameter_list|)
block|{
name|d
operator|->
name|pixelSize
operator|=
name|size
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pixelSize
name|qreal
name|QFontEngineInfo
operator|::
name|pixelSize
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|pixelSize
return|;
block|}
end_function
begin_comment
comment|/*!    \property QFontEngineInfo::weight    the weight of the font     The value should be from the \l{QFont::Weight} enumeration. */
end_comment
begin_function
DECL|function|setWeight
name|void
name|QFontEngineInfo
operator|::
name|setWeight
parameter_list|(
name|int
name|weight
parameter_list|)
block|{
name|d
operator|->
name|weight
operator|=
name|weight
expr_stmt|;
block|}
end_function
begin_function
DECL|function|weight
name|int
name|QFontEngineInfo
operator|::
name|weight
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|weight
return|;
block|}
end_function
begin_comment
comment|/*!    \property QFontEngineInfo::style    the style of the font */
end_comment
begin_function
DECL|function|setStyle
name|void
name|QFontEngineInfo
operator|::
name|setStyle
parameter_list|(
name|QFont
operator|::
name|Style
name|style
parameter_list|)
block|{
name|d
operator|->
name|style
operator|=
name|style
expr_stmt|;
block|}
end_function
begin_function
DECL|function|style
name|QFont
operator|::
name|Style
name|QFontEngineInfo
operator|::
name|style
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|style
return|;
block|}
end_function
begin_comment
comment|/*!    \property QFontEngineInfo::writingSystems    the writing systems supported by the font     An empty list means that any writing system is supported. */
end_comment
begin_function
DECL|function|writingSystems
name|QList
argument_list|<
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|>
name|QFontEngineInfo
operator|::
name|writingSystems
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|writingSystems
return|;
block|}
end_function
begin_function
DECL|function|setWritingSystems
name|void
name|QFontEngineInfo
operator|::
name|setWritingSystems
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|>
modifier|&
name|writingSystems
parameter_list|)
block|{
name|d
operator|->
name|writingSystems
operator|=
name|writingSystems
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QFontEnginePluginPrivate
class|class
name|QFontEnginePluginPrivate
super|:
specifier|public
name|QObjectPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QFontEnginePlugin
parameter_list|)
DECL|member|foundry
name|QString
name|foundry
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     \class QFontEnginePlugin     \preliminary     \brief The QFontEnginePlugin class is the base class for font engine factory plugins in Qt for Embedded Linux.     \since 4.3     \ingroup qws     \ingroup plugins      \tableofcontents      QFontEnginePlugin is provided by font engine plugins to create     instances of subclasses of QAbstractFontEngine.      The member functions create() and availableFontEngines() must be     implemented.      \sa QAbstractFontEngine, QFontEngineInfo */
end_comment
begin_comment
comment|/*!   Creates a font engine plugin that creates font engines with the   specified \a foundry and \a parent. */
end_comment
begin_constructor
DECL|function|QFontEnginePlugin
name|QFontEnginePlugin
operator|::
name|QFontEnginePlugin
parameter_list|(
specifier|const
name|QString
modifier|&
name|foundry
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QFontEnginePluginPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QFontEnginePlugin
argument_list|)
expr_stmt|;
name|d
operator|->
name|foundry
operator|=
name|foundry
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!    Destroys this font engine plugin. */
end_comment
begin_destructor
DECL|function|~QFontEnginePlugin
name|QFontEnginePlugin
operator|::
name|~
name|QFontEnginePlugin
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!    Returns a list of foundries the font engine plugin provides.    The default implementation returns the foundry specified with the constructor. */
end_comment
begin_function
DECL|function|keys
name|QStringList
name|QFontEnginePlugin
operator|::
name|keys
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFontEnginePlugin
argument_list|)
expr_stmt|;
return|return
name|QStringList
argument_list|(
name|d
operator|->
name|foundry
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QAbstractFontEngine *QFontEnginePlugin::create(const QFontEngineInfo&info)      Implemented in subclasses to create a new font engine that provides a font that     matches \a info. */
end_comment
begin_comment
comment|/*!     \fn QList<QFontEngineInfo> QFontEnginePlugin::availableFontEngines() const      Implemented in subclasses to return a list of QFontEngineInfo objects that represents all font     engines the plugin can create. */
end_comment
begin_class
DECL|class|QAbstractFontEnginePrivate
class|class
name|QAbstractFontEnginePrivate
super|:
specifier|public
name|QObjectPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QAbstractFontEngine
parameter_list|)
specifier|public
private|:
block|}
class|;
end_class
begin_comment
comment|//The<classname> class is|provides|contains|specifies...
end_comment
begin_comment
comment|/*!     \class QAbstractFontEngine     \preliminary     \brief The QAbstractFontEngine class is the base class for font engine plugins in Qt for Embedded Linux.     \since 4.3     \ingroup qws      \tableofcontents      QAbstractFontEngine is implemented by font engine plugins through QFontEnginePlugin.      \sa QFontEnginePlugin, QFontEngineInfo */
end_comment
begin_comment
comment|/*!    \enum QAbstractFontEngine::Capability     This enum describes the capabilities of a font engine.     \value CanRenderGlyphs_Gray The font engine can render individual glyphs into 8 bpp images.    \value CanRenderGlyphs_Mono The font engine can render individual glyphs into 1 bpp images.    \value CanRenderGlyphs The font engine can render individual glyphs into images.    \value CanOutlineGlyphs The font engine can convert glyphs to painter paths. */
end_comment
begin_comment
comment|/*!    \enum QAbstractFontEngine::FontProperty     This enum describes the properties of a font provided by a font engine.     \value Ascent The ascent of the font, specified as a 26.6 fixed point value.    \value Descent The descent of the font, specified as a 26.6 fixed point value.    \value Leading The leading of the font, specified as a 26.6 fixed point value.    \value XHeight The 'x' height of the font, specified as a 26.6 fixed point value.    \value AverageCharWidth The average character width of the font, specified as a 26.6 fixed point value.    \value LineThickness The thickness of the underline and strikeout lines for the font, specified as a 26.6 fixed point value.    \value UnderlinePosition The distance from the base line to the underline position for the font, specified as a 26.6 fixed point value.    \value MaxCharWidth The width of the widest character in the font, specified as a 26.6 fixed point value.    \value MinLeftBearing The minimum left bearing of the font, specified as a 26.6 fixed point value.    \value MinRightBearing The maximum right bearing of the font, specified as a 26.6 fixed point value.    \value GlyphCount The number of glyphs in the font, specified as an integer value.    \value CacheGlyphsHint A boolean value specifying whether rendered glyphs should be cached by Qt.    \value OutlineGlyphsHint A boolean value specifying whether the font engine prefers outline drawing over image rendering for uncached glyphs. */
end_comment
begin_comment
comment|/*!    \enum QAbstractFontEngine::TextShapingFlag     This enum describes flags controlling conversion of characters to glyphs and their metrics.     \value RightToLeft The text is used in a right-to-left context.    \value ReturnDesignMetrics Return font design metrics instead of pixel metrics. */
end_comment
begin_comment
comment|/*!    \typedef QAbstractFontEngine::Fixed     This type is \c int, interpreted as a 26.6 fixed point value. */
end_comment
begin_comment
comment|/*!    \class QAbstractFontEngine::GlyphMetrics    \brief QAbstractFontEngine::GlyphMetrics defines the metrics of a single glyph.    \preliminary    \since 4.3 */
end_comment
begin_comment
comment|/*!    \variable QAbstractFontEngine::GlyphMetrics::x     The horizontal offset from the origin. */
end_comment
begin_comment
comment|/*!    \fn QAbstractFontEngine::GlyphMetrics::GlyphMetrics()     Constructs an empty glyph metrics object with all values    set to zero. */
end_comment
begin_comment
comment|/*!    \variable QAbstractFontEngine::GlyphMetrics::y     The vertical offset from the origin (baseline). */
end_comment
begin_comment
comment|/*!    \variable QAbstractFontEngine::GlyphMetrics::width     The width of the glyph. */
end_comment
begin_comment
comment|/*!    \variable QAbstractFontEngine::GlyphMetrics::height     The height of the glyph. */
end_comment
begin_comment
comment|/*!    \variable QAbstractFontEngine::GlyphMetrics::advance     The advance of the glyph. */
end_comment
begin_comment
comment|/*!    \class QAbstractFontEngine::FixedPoint    \brief QAbstractFontEngine::FixedPoint defines a point in the place using 26.6 fixed point precision.    \preliminary    \since 4.3 */
end_comment
begin_comment
comment|/*!    \variable QAbstractFontEngine::FixedPoint::x     The x coordinate of this point. */
end_comment
begin_comment
comment|/*!    \variable QAbstractFontEngine::FixedPoint::y     The y coordinate of this point. */
end_comment
begin_comment
comment|/*!    Constructs a new QAbstractFontEngine with the given \a parent. */
end_comment
begin_constructor
DECL|function|QAbstractFontEngine
name|QAbstractFontEngine
operator|::
name|QAbstractFontEngine
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QAbstractFontEnginePrivate
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!    Destroys this QAbstractFontEngine object. */
end_comment
begin_destructor
DECL|function|~QAbstractFontEngine
name|QAbstractFontEngine
operator|::
name|~
name|QAbstractFontEngine
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \fn QAbstractFontEngine::Capabilities QAbstractFontEngine::capabilities() const      Implemented in subclasses to specify the font engine's capabilities. The return value     may be cached by the caller and is expected not to change during the lifetime of the     font engine. */
end_comment
begin_comment
comment|/*!     \fn QVariant QAbstractFontEngine::fontProperty(FontProperty property) const      Implemented in subclasses to return the value of the font attribute \a property. The return     value may be cached by the caller and is expected not to change during the lifetime of the font     engine. */
end_comment
begin_comment
comment|/*!     \fn bool QAbstractFontEngine::convertStringToGlyphIndices(const QChar *string, int length, uint *glyphs, int *numGlyphs, TextShapingFlags flags) const      Implemented in subclasses to convert the characters specified by \a string and \a length to     glyph indicies, using \a flags. The glyph indicies should be returned in the \a glyphs array     provided by the caller. The maximum size of \a glyphs is specified by the value pointed to by \a     numGlyphs. If successful, the subclass implementation sets the value pointed to by \a numGlyphs     to the actual number of glyph indices generated, and returns true. Otherwise, e.g. if there is     not enough space in the provided \a glyphs array, it should set \a numGlyphs to the number of     glyphs needed for the conversion and return false. */
end_comment
begin_comment
comment|/*!     \fn void QAbstractFontEngine::getGlyphAdvances(const uint *glyphs, int numGlyphs, Fixed *advances, TextShapingFlags flags) const      Implemented in subclasses to retrieve the advances of the array specified by \a glyphs and \a     numGlyphs, using \a flags. The result is returned in \a advances, which is allocated by the     caller and contains \a numGlyphs elements. */
end_comment
begin_comment
comment|/*!     \fn QAbstractFontEngine::GlyphMetrics QAbstractFontEngine::glyphMetrics(uint glyph) const      Implemented in subclass to return the metrics for \a glyph. */
end_comment
begin_comment
comment|/*!    Implemented in subclasses to render the specified \a glyph into a \a buffer with the given \a depth ,    \a bytesPerLine and \a height.     Returns true if rendering succeeded, false otherwise. */
end_comment
begin_function
DECL|function|renderGlyph
name|bool
name|QAbstractFontEngine
operator|::
name|renderGlyph
parameter_list|(
name|uint
name|glyph
parameter_list|,
name|int
name|depth
parameter_list|,
name|int
name|bytesPerLine
parameter_list|,
name|int
name|height
parameter_list|,
name|uchar
modifier|*
name|buffer
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|glyph
argument_list|)
name|Q_UNUSED
argument_list|(
argument|depth
argument_list|)
name|Q_UNUSED
argument_list|(
argument|bytesPerLine
argument_list|)
name|Q_UNUSED
argument_list|(
argument|height
argument_list|)
name|Q_UNUSED
argument_list|(
argument|buffer
argument_list|)
name|qWarning
argument_list|(
literal|"QAbstractFontEngine: renderGlyph is not implemented in font plugin!"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!    Implemented in subclasses to add the outline of the glyphs specified by \a glyphs and \a    numGlyphs at the specified \a positions to the painter path \a path. */
end_comment
begin_function
DECL|function|addGlyphOutlinesToPath
name|void
name|QAbstractFontEngine
operator|::
name|addGlyphOutlinesToPath
parameter_list|(
name|uint
modifier|*
name|glyphs
parameter_list|,
name|int
name|numGlyphs
parameter_list|,
name|FixedPoint
modifier|*
name|positions
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|glyphs
argument_list|)
name|Q_UNUSED
argument_list|(
argument|numGlyphs
argument_list|)
name|Q_UNUSED
argument_list|(
argument|positions
argument_list|)
name|Q_UNUSED
argument_list|(
argument|path
argument_list|)
name|qWarning
argument_list|(
literal|"QAbstractFontEngine: addGlyphOutlinesToPath is not implemented in font plugin!"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/* bool QAbstractFontEngine::supportsExtension(Extension extension) const {     Q_UNUSED(extension)     return false; }  QVariant QAbstractFontEngine::extension(Extension extension, const QVariant&argument) {     Q_UNUSED(argument)     Q_UNUSED(extension)     return QVariant(); } */
end_comment
begin_constructor
DECL|function|QProxyFontEngine
name|QProxyFontEngine
operator|::
name|QProxyFontEngine
parameter_list|(
name|QAbstractFontEngine
modifier|*
name|customEngine
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|def
parameter_list|)
member_init_list|:
name|engine
argument_list|(
name|customEngine
argument_list|)
block|{
name|fontDef
operator|=
name|def
expr_stmt|;
name|engineCapabilities
operator|=
name|engine
operator|->
name|capabilities
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QProxyFontEngine
name|QProxyFontEngine
operator|::
name|~
name|QProxyFontEngine
parameter_list|()
block|{
operator|delete
name|engine
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|stringToCMap
name|bool
name|QProxyFontEngine
operator|::
name|stringToCMap
parameter_list|(
specifier|const
name|QChar
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|,
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|int
modifier|*
name|nglyphs
parameter_list|,
name|QTextEngine
operator|::
name|ShaperFlags
name|flags
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|*
name|nglyphs
operator|<
name|len
condition|)
block|{
operator|*
name|nglyphs
operator|=
name|len
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QVarLengthArray
argument_list|<
name|uint
argument_list|>
name|glyphIndicies
argument_list|(
operator|*
name|nglyphs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|engine
operator|->
name|convertStringToGlyphIndices
argument_list|(
name|str
argument_list|,
name|len
argument_list|,
name|glyphIndicies
operator|.
name|data
argument_list|()
argument_list|,
name|nglyphs
argument_list|,
name|QAbstractFontEngine
operator|::
name|TextShapingFlags
argument_list|(
name|int
argument_list|(
name|flags
argument_list|)
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// ### use memcopy instead
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|*
name|nglyphs
condition|;
operator|++
name|i
control|)
block|{
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
operator|=
name|glyphIndicies
index|[
name|i
index|]
expr_stmt|;
block|}
name|glyphs
operator|->
name|numGlyphs
operator|=
operator|*
name|nglyphs
expr_stmt|;
name|recalcAdvances
argument_list|(
name|glyphs
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|recalcAdvances
name|void
name|QProxyFontEngine
operator|::
name|recalcAdvances
parameter_list|(
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|QTextEngine
operator|::
name|ShaperFlags
name|flags
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|nglyphs
init|=
name|glyphs
operator|->
name|numGlyphs
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QAbstractFontEngine
operator|::
name|Fixed
argument_list|>
name|advances
argument_list|(
name|nglyphs
argument_list|)
decl_stmt|;
name|engine
operator|->
name|getGlyphAdvances
argument_list|(
name|glyphs
operator|->
name|glyphs
argument_list|,
name|nglyphs
argument_list|,
name|advances
operator|.
name|data
argument_list|()
argument_list|,
name|QAbstractFontEngine
operator|::
name|TextShapingFlags
argument_list|(
name|int
argument_list|(
name|flags
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// ### use memcopy instead
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nglyphs
condition|;
operator|++
name|i
control|)
block|{
name|glyphs
operator|->
name|advances_x
index|[
name|i
index|]
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|advances
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|glyphs
operator|->
name|advances_y
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|alphaMapFromPath
specifier|static
name|QImage
name|alphaMapFromPath
parameter_list|(
name|QFontEngine
modifier|*
name|fe
parameter_list|,
name|glyph_t
name|glyph
parameter_list|)
block|{
name|glyph_metrics_t
name|gm
init|=
name|fe
operator|->
name|boundingBox
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
name|int
name|glyph_x
init|=
name|qFloor
argument_list|(
name|gm
operator|.
name|x
operator|.
name|toReal
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|glyph_y
init|=
name|qFloor
argument_list|(
name|gm
operator|.
name|y
operator|.
name|toReal
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|glyph_width
init|=
name|qCeil
argument_list|(
operator|(
name|gm
operator|.
name|x
operator|+
name|gm
operator|.
name|width
operator|)
operator|.
name|toReal
argument_list|()
argument_list|)
operator|-
name|glyph_x
decl_stmt|;
name|int
name|glyph_height
init|=
name|qCeil
argument_list|(
operator|(
name|gm
operator|.
name|y
operator|+
name|gm
operator|.
name|height
operator|)
operator|.
name|toReal
argument_list|()
argument_list|)
operator|-
name|glyph_y
decl_stmt|;
if|if
condition|(
name|glyph_width
operator|<=
literal|0
operator|||
name|glyph_height
operator|<=
literal|0
condition|)
return|return
name|QImage
argument_list|()
return|;
name|QFixedPoint
name|pt
decl_stmt|;
name|pt
operator|.
name|x
operator|=
literal|0
expr_stmt|;
name|pt
operator|.
name|y
operator|=
operator|-
name|glyph_y
expr_stmt|;
comment|// the baseline
name|QPainterPath
name|path
decl_stmt|;
name|QImage
name|im
argument_list|(
name|glyph_width
operator|+
name|qAbs
argument_list|(
name|glyph_x
argument_list|)
operator|+
literal|4
argument_list|,
name|glyph_height
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|im
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|im
argument_list|)
decl_stmt|;
name|p
operator|.
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
name|fe
operator|->
name|addGlyphsToPath
argument_list|(
operator|&
name|glyph
argument_list|,
operator|&
name|pt
argument_list|,
literal|1
argument_list|,
operator|&
name|path
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QImage
name|indexed
argument_list|(
name|im
operator|.
name|width
argument_list|()
argument_list|,
name|im
operator|.
name|height
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|colors
argument_list|(
literal|256
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|colors
index|[
name|i
index|]
operator|=
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|indexed
operator|.
name|setColorTable
argument_list|(
name|colors
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|im
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
name|uchar
modifier|*
name|dst
init|=
operator|(
name|uchar
operator|*
operator|)
name|indexed
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|uint
modifier|*
name|src
init|=
operator|(
name|uint
operator|*
operator|)
name|im
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|im
operator|.
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
name|dst
index|[
name|x
index|]
operator|=
name|qAlpha
argument_list|(
name|src
index|[
name|x
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|indexed
return|;
block|}
end_function
begin_function
DECL|function|alphaMapForGlyph
name|QImage
name|QProxyFontEngine
operator|::
name|alphaMapForGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|engineCapabilities
operator|&
name|QAbstractFontEngine
operator|::
name|CanRenderGlyphs_Gray
operator|)
condition|)
return|return
name|alphaMapFromPath
argument_list|(
name|this
argument_list|,
name|glyph
argument_list|)
return|;
name|QAbstractFontEngine
operator|::
name|GlyphMetrics
name|metrics
init|=
name|engine
operator|->
name|glyphMetrics
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
if|if
condition|(
name|metrics
operator|.
name|width
operator|<=
literal|0
operator|||
name|metrics
operator|.
name|height
operator|<=
literal|0
condition|)
return|return
name|QImage
argument_list|()
return|;
name|QImage
name|img
argument_list|(
name|metrics
operator|.
name|width
operator|>>
literal|6
argument_list|,
name|metrics
operator|.
name|height
operator|>>
literal|6
argument_list|,
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
decl_stmt|;
comment|// ### we should have QImage::Format_GrayScale8
specifier|static
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|colorMap
decl_stmt|;
if|if
condition|(
name|colorMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|colorMap
operator|.
name|resize
argument_list|(
literal|256
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|colorMap
index|[
name|i
index|]
operator|=
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|img
operator|.
name|setColorTable
argument_list|(
name|colorMap
argument_list|)
expr_stmt|;
name|engine
operator|->
name|renderGlyph
argument_list|(
name|glyph
argument_list|,
comment|/*depth*/
literal|8
argument_list|,
name|img
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
name|img
operator|.
name|height
argument_list|()
argument_list|,
name|img
operator|.
name|bits
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|img
return|;
block|}
end_function
begin_function
DECL|function|addGlyphsToPath
name|void
name|QProxyFontEngine
operator|::
name|addGlyphsToPath
parameter_list|(
name|glyph_t
modifier|*
name|glyphs
parameter_list|,
name|QFixedPoint
modifier|*
name|positions
parameter_list|,
name|int
name|nglyphs
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|QTextItem
operator|::
name|RenderFlags
name|flags
parameter_list|)
block|{
if|if
condition|(
name|engineCapabilities
operator|&
name|QAbstractFontEngine
operator|::
name|CanOutlineGlyphs
condition|)
name|engine
operator|->
name|addGlyphOutlinesToPath
argument_list|(
name|glyphs
argument_list|,
name|nglyphs
argument_list|,
cast|reinterpret_cast
argument_list|<
name|QAbstractFontEngine
operator|::
name|FixedPoint
operator|*
argument_list|>
argument_list|(
name|positions
argument_list|)
argument_list|,
name|path
argument_list|)
expr_stmt|;
else|else
name|QFontEngine
operator|::
name|addGlyphsToPath
argument_list|(
name|glyphs
argument_list|,
name|positions
argument_list|,
name|nglyphs
argument_list|,
name|path
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QProxyFontEngine
operator|::
name|boundingBox
parameter_list|(
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|)
block|{
if|if
condition|(
name|glyphs
operator|.
name|numGlyphs
operator|==
literal|0
condition|)
return|return
name|glyph_metrics_t
argument_list|()
return|;
name|QFixed
name|w
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|numGlyphs
condition|;
operator|++
name|i
control|)
name|w
operator|+=
name|glyphs
operator|.
name|effectiveAdvance
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|glyph_metrics_t
argument_list|(
literal|0
argument_list|,
operator|-
name|ascent
argument_list|()
argument_list|,
name|w
argument_list|,
name|ascent
argument_list|()
operator|+
name|descent
argument_list|()
argument_list|,
name|w
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QProxyFontEngine
operator|::
name|boundingBox
parameter_list|(
name|glyph_t
name|glyph
parameter_list|)
block|{
name|glyph_metrics_t
name|m
decl_stmt|;
name|QAbstractFontEngine
operator|::
name|GlyphMetrics
name|metrics
init|=
name|engine
operator|->
name|glyphMetrics
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
name|m
operator|.
name|x
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|metrics
operator|.
name|x
argument_list|)
expr_stmt|;
name|m
operator|.
name|y
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|metrics
operator|.
name|y
argument_list|)
expr_stmt|;
name|m
operator|.
name|width
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|metrics
operator|.
name|width
argument_list|)
expr_stmt|;
name|m
operator|.
name|height
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|metrics
operator|.
name|height
argument_list|)
expr_stmt|;
name|m
operator|.
name|xoff
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|metrics
operator|.
name|advance
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
end_function
begin_function
DECL|function|ascent
name|QFixed
name|QProxyFontEngine
operator|::
name|ascent
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|engine
operator|->
name|fontProperty
argument_list|(
name|QAbstractFontEngine
operator|::
name|Ascent
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|descent
name|QFixed
name|QProxyFontEngine
operator|::
name|descent
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|engine
operator|->
name|fontProperty
argument_list|(
name|QAbstractFontEngine
operator|::
name|Descent
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|leading
name|QFixed
name|QProxyFontEngine
operator|::
name|leading
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|engine
operator|->
name|fontProperty
argument_list|(
name|QAbstractFontEngine
operator|::
name|Leading
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|xHeight
name|QFixed
name|QProxyFontEngine
operator|::
name|xHeight
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|engine
operator|->
name|fontProperty
argument_list|(
name|QAbstractFontEngine
operator|::
name|XHeight
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|averageCharWidth
name|QFixed
name|QProxyFontEngine
operator|::
name|averageCharWidth
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|engine
operator|->
name|fontProperty
argument_list|(
name|QAbstractFontEngine
operator|::
name|AverageCharWidth
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|lineThickness
name|QFixed
name|QProxyFontEngine
operator|::
name|lineThickness
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|engine
operator|->
name|fontProperty
argument_list|(
name|QAbstractFontEngine
operator|::
name|LineThickness
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|underlinePosition
name|QFixed
name|QProxyFontEngine
operator|::
name|underlinePosition
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|engine
operator|->
name|fontProperty
argument_list|(
name|QAbstractFontEngine
operator|::
name|UnderlinePosition
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|maxCharWidth
name|qreal
name|QProxyFontEngine
operator|::
name|maxCharWidth
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|engine
operator|->
name|fontProperty
argument_list|(
name|QAbstractFontEngine
operator|::
name|MaxCharWidth
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
operator|.
name|toReal
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|minLeftBearing
name|qreal
name|QProxyFontEngine
operator|::
name|minLeftBearing
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|engine
operator|->
name|fontProperty
argument_list|(
name|QAbstractFontEngine
operator|::
name|MinLeftBearing
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
operator|.
name|toReal
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|minRightBearing
name|qreal
name|QProxyFontEngine
operator|::
name|minRightBearing
parameter_list|()
specifier|const
block|{
return|return
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|engine
operator|->
name|fontProperty
argument_list|(
name|QAbstractFontEngine
operator|::
name|MinRightBearing
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
operator|.
name|toReal
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|glyphCount
name|int
name|QProxyFontEngine
operator|::
name|glyphCount
parameter_list|()
specifier|const
block|{
return|return
name|engine
operator|->
name|fontProperty
argument_list|(
name|QAbstractFontEngine
operator|::
name|GlyphCount
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|canRender
name|bool
name|QProxyFontEngine
operator|::
name|canRender
parameter_list|(
specifier|const
name|QChar
modifier|*
name|string
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|QVarLengthArray
argument_list|<
name|uint
argument_list|>
name|glyphs
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|int
name|numGlyphs
init|=
name|len
decl_stmt|;
if|if
condition|(
operator|!
name|engine
operator|->
name|convertStringToGlyphIndices
argument_list|(
name|string
argument_list|,
name|len
argument_list|,
name|glyphs
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|numGlyphs
argument_list|,
comment|/*flags*/
literal|0
argument_list|)
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numGlyphs
condition|;
operator|++
name|i
control|)
if|if
condition|(
operator|!
name|glyphs
index|[
name|i
index|]
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|draw
name|void
name|QProxyFontEngine
operator|::
name|draw
parameter_list|(
name|QPaintEngine
modifier|*
name|p
parameter_list|,
name|qreal
name|_x
parameter_list|,
name|qreal
name|_y
parameter_list|,
specifier|const
name|QTextItemInt
modifier|&
name|si
parameter_list|)
block|{
name|QPaintEngineState
modifier|*
name|pState
init|=
name|p
operator|->
name|state
decl_stmt|;
name|QRasterPaintEngine
modifier|*
name|paintEngine
init|=
cast|static_cast
argument_list|<
name|QRasterPaintEngine
operator|*
argument_list|>
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|QTransform
name|matrix
init|=
name|pState
operator|->
name|transform
argument_list|()
decl_stmt|;
name|matrix
operator|.
name|translate
argument_list|(
name|_x
argument_list|,
name|_y
argument_list|)
expr_stmt|;
name|QFixed
name|x
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|matrix
operator|.
name|dx
argument_list|()
argument_list|)
decl_stmt|;
name|QFixed
name|y
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QFixedPoint
argument_list|>
name|positions
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|glyph_t
argument_list|>
name|glyphs
decl_stmt|;
name|getGlyphPositions
argument_list|(
name|si
operator|.
name|glyphs
argument_list|,
name|matrix
argument_list|,
name|si
operator|.
name|flags
argument_list|,
name|glyphs
argument_list|,
name|positions
argument_list|)
expr_stmt|;
if|if
condition|(
name|glyphs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QImage
name|glyph
init|=
name|alphaMapForGlyph
argument_list|(
name|glyphs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|glyph
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|glyph
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_Indexed8
operator|&&
name|glyph
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_Mono
condition|)
continue|continue;
name|QAbstractFontEngine
operator|::
name|GlyphMetrics
name|metrics
init|=
name|engine
operator|->
name|glyphMetrics
argument_list|(
name|glyphs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|int
name|depth
init|=
name|glyph
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_Mono
condition|?
literal|1
else|:
literal|8
decl_stmt|;
name|paintEngine
operator|->
name|alphaPenBlt
argument_list|(
name|glyph
operator|.
name|bits
argument_list|()
argument_list|,
name|glyph
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
name|depth
argument_list|,
name|qRound
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|x
operator|+
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|metrics
operator|.
name|x
argument_list|)
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|y
operator|+
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|metrics
operator|.
name|y
argument_list|)
argument_list|)
argument_list|,
name|glyph
operator|.
name|width
argument_list|()
argument_list|,
name|glyph
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*  * This is only called when we use the proxy fontengine directly (without sharing the rendered  * glyphs). So we prefer outline rendering over rendering of unshared glyphs. That decision is  * done in qfontdatabase_qws.cpp by looking at the ShareGlyphsHint and the pixel size of the font.  */
end_comment
begin_function
DECL|function|drawAsOutline
name|bool
name|QProxyFontEngine
operator|::
name|drawAsOutline
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
operator|(
name|engineCapabilities
operator|&
name|QAbstractFontEngine
operator|::
name|CanOutlineGlyphs
operator|)
condition|)
return|return
literal|false
return|;
name|QVariant
name|outlineHint
init|=
name|engine
operator|->
name|fontProperty
argument_list|(
name|QAbstractFontEngine
operator|::
name|OutlineGlyphsHint
argument_list|)
decl_stmt|;
return|return
operator|!
name|outlineHint
operator|.
name|isValid
argument_list|()
operator|||
name|outlineHint
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
