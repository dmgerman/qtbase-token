begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfont.h"
end_include
begin_include
include|#
directive|include
file|"qfont_p.h"
end_include
begin_include
include|#
directive|include
file|"qfontengine_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextengine_p.h"
end_include
begin_include
include|#
directive|include
file|"qfontmetrics.h"
end_include
begin_include
include|#
directive|include
file|"qfontinfo.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|"qt_windows.h"
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|<private/qunicodetables_p.h>
end_include
begin_include
include|#
directive|include
file|<qfontdatabase.h>
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|HDC
name|shared_dc
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|// common dc for all fonts
end_comment
begin_function_decl
specifier|extern
name|QFont
operator|::
name|Weight
name|weightFromInteger
parameter_list|(
name|int
name|weight
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// qfontdatabase.cpp
end_comment
begin_comment
comment|// ### maybe move to qapplication_win
end_comment
begin_function
DECL|function|qt_LOGFONTtoQFont
name|QFont
name|qt_LOGFONTtoQFont
parameter_list|(
name|LOGFONT
modifier|&
name|lf
parameter_list|,
name|bool
comment|/*scale*/
parameter_list|)
block|{
name|QString
name|family
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|)
decl_stmt|;
name|QFont
name|qf
argument_list|(
name|family
argument_list|)
decl_stmt|;
name|qf
operator|.
name|setItalic
argument_list|(
name|lf
operator|.
name|lfItalic
argument_list|)
expr_stmt|;
if|if
condition|(
name|lf
operator|.
name|lfWeight
operator|!=
name|FW_DONTCARE
condition|)
name|qf
operator|.
name|setWeight
argument_list|(
name|weightFromInteger
argument_list|(
name|lf
operator|.
name|lfWeight
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|lfh
init|=
name|qAbs
argument_list|(
name|lf
operator|.
name|lfHeight
argument_list|)
decl_stmt|;
name|qf
operator|.
name|setPointSizeF
argument_list|(
name|lfh
operator|*
literal|72.0
operator|/
name|GetDeviceCaps
argument_list|(
name|shared_dc
argument_list|()
argument_list|,
name|LOGPIXELSY
argument_list|)
argument_list|)
expr_stmt|;
name|qf
operator|.
name|setUnderline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|qf
operator|.
name|setOverline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|qf
operator|.
name|setStrikeOut
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|qf
return|;
block|}
end_function
begin_function
DECL|function|pixelSize
specifier|static
specifier|inline
name|float
name|pixelSize
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|,
name|int
name|dpi
parameter_list|)
block|{
name|float
name|pSize
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|pointSize
operator|!=
operator|-
literal|1
condition|)
name|pSize
operator|=
name|request
operator|.
name|pointSize
operator|*
name|dpi
operator|/
literal|72.
expr_stmt|;
else|else
name|pSize
operator|=
name|request
operator|.
name|pixelSize
expr_stmt|;
return|return
name|pSize
return|;
block|}
end_function
begin_function
DECL|function|pointSize
specifier|static
specifier|inline
name|float
name|pointSize
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|fd
parameter_list|,
name|int
name|dpi
parameter_list|)
block|{
name|float
name|pSize
decl_stmt|;
if|if
condition|(
name|fd
operator|.
name|pointSize
operator|<
literal|0
condition|)
name|pSize
operator|=
name|fd
operator|.
name|pixelSize
operator|*
literal|72.
operator|/
operator|(
operator|(
name|float
operator|)
name|dpi
operator|)
expr_stmt|;
else|else
name|pSize
operator|=
name|fd
operator|.
name|pointSize
expr_stmt|;
return|return
name|pSize
return|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   QFont member functions  *****************************************************************************/
end_comment
begin_function
DECL|function|initialize
name|void
name|QFont
operator|::
name|initialize
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanup
name|void
name|QFont
operator|::
name|cleanup
parameter_list|()
block|{
name|QFontCache
operator|::
name|cleanup
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handle
name|HFONT
name|QFont
operator|::
name|handle
parameter_list|()
specifier|const
block|{
name|QFontEngine
modifier|*
name|engine
init|=
name|d
operator|->
name|engineForScript
argument_list|(
name|QUnicodeTables
operator|::
name|Common
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|engine
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|->
name|type
argument_list|()
operator|==
name|QFontEngine
operator|::
name|Multi
condition|)
name|engine
operator|=
cast|static_cast
argument_list|<
name|QFontEngineMulti
operator|*
argument_list|>
argument_list|(
name|engine
argument_list|)
operator|->
name|engine
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|->
name|type
argument_list|()
operator|==
name|QFontEngine
operator|::
name|Win
condition|)
return|return
cast|static_cast
argument_list|<
name|QFontEngineWin
operator|*
argument_list|>
argument_list|(
name|engine
argument_list|)
operator|->
name|hfont
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|rawName
name|QString
name|QFont
operator|::
name|rawName
parameter_list|()
specifier|const
block|{
return|return
name|family
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setRawName
name|void
name|QFont
operator|::
name|setRawName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|setFamily
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultFamily
name|QString
name|QFont
operator|::
name|defaultFamily
parameter_list|()
specifier|const
block|{
switch|switch
condition|(
name|d
operator|->
name|request
operator|.
name|styleHint
condition|)
block|{
case|case
name|QFont
operator|::
name|Times
case|:
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Times New Roman"
argument_list|)
return|;
case|case
name|QFont
operator|::
name|Courier
case|:
case|case
name|QFont
operator|::
name|Monospace
case|:
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Courier New"
argument_list|)
return|;
case|case
name|QFont
operator|::
name|Decorative
case|:
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Bookman Old Style"
argument_list|)
return|;
case|case
name|QFont
operator|::
name|Cursive
case|:
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Comic Sans MS"
argument_list|)
return|;
case|case
name|QFont
operator|::
name|Fantasy
case|:
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Impact"
argument_list|)
return|;
case|case
name|QFont
operator|::
name|Helvetica
case|:
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Arial"
argument_list|)
return|;
case|case
name|QFont
operator|::
name|System
case|:
default|default:
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"MS Sans Serif"
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|lastResortFamily
name|QString
name|QFont
operator|::
name|lastResortFamily
parameter_list|()
specifier|const
block|{
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"helvetica"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|lastResortFont
name|QString
name|QFont
operator|::
name|lastResortFont
parameter_list|()
specifier|const
block|{
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"arial"
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
