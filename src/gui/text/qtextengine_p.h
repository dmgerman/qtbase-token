begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTEXTENGINE_P_H
end_ifndef
begin_define
DECL|macro|QTEXTENGINE_P_H
define|#
directive|define
name|QTEXTENGINE_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of other Qt classes.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtCore/qglobal.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qstring.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qvarlengtharray.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qnamespace.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qtextlayout.h"
end_include
begin_include
include|#
directive|include
file|"private/qtextformat_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qfont_p.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qvector.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qpaintengine.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qtextobject.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qtextoption.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qtextcursor.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qset.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qdebug.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_BUILD_COMPAT_LIB
end_ifndef
begin_include
include|#
directive|include
file|"private/qtextdocument_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"private/qfixed_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qunicodetools_p.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QFontPrivate
name|class
name|QFontPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QFontEngine
name|class
name|QFontEngine
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QString
name|class
name|QString
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPainter
name|class
name|QPainter
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QAbstractTextDocumentLayout
name|class
name|QAbstractTextDocumentLayout
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|glyph_t
typedef|typedef
name|quint32
name|glyph_t
typedef|;
end_typedef
begin_ifdef
ifdef|#
directive|ifdef
name|__xlC__
end_ifdef
begin_typedef
DECL|typedef|q_hb_bitfield
typedef|typedef
name|unsigned
name|q_hb_bitfield
typedef|;
end_typedef
begin_else
else|#
directive|else
end_else
begin_typedef
DECL|typedef|q_hb_bitfield
typedef|typedef
name|quint8
name|q_hb_bitfield
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|justification
name|q_hb_bitfield
name|justification
range|:
literal|4
decl_stmt|;
comment|/* Justification class */
DECL|member|clusterStart
name|q_hb_bitfield
name|clusterStart
range|:
literal|1
decl_stmt|;
comment|/* First glyph of representation of cluster */
DECL|member|mark
name|q_hb_bitfield
name|mark
range|:
literal|1
decl_stmt|;
comment|/* needs to be positioned around base char */
DECL|member|zeroWidth
name|q_hb_bitfield
name|zeroWidth
range|:
literal|1
decl_stmt|;
comment|/* ZWJ, ZWNJ etc, with no width */
DECL|member|dontPrint
name|q_hb_bitfield
name|dontPrint
range|:
literal|1
decl_stmt|;
DECL|member|combiningClass
name|q_hb_bitfield
name|combiningClass
range|:
literal|8
decl_stmt|;
block|}
DECL|typedef|QGlyphAttributes
name|QGlyphAttributes
typedef|;
end_typedef
begin_comment
comment|// this uses the same coordinate system as Qt, but a different one to freetype.
end_comment
begin_comment
comment|// * y is usually negative, and is equal to the ascent.
end_comment
begin_comment
comment|// * negative yoff means the following stuff is drawn higher up.
end_comment
begin_comment
comment|// the characters bounding rect is given by QRect(x,y,width,height), its advance by
end_comment
begin_comment
comment|// xoo and yoff
end_comment
begin_struct
DECL|struct|glyph_metrics_t
struct|struct
name|Q_GUI_EXPORT
name|glyph_metrics_t
block|{
DECL|function|glyph_metrics_t
specifier|inline
name|glyph_metrics_t
argument_list|()
operator|:
name|x
argument_list|(
literal|100000
argument_list|)
operator|,
name|y
argument_list|(
literal|100000
argument_list|)
block|{}
DECL|function|glyph_metrics_t
specifier|inline
name|glyph_metrics_t
argument_list|(
argument|QFixed _x
argument_list|,
argument|QFixed _y
argument_list|,
argument|QFixed _width
argument_list|,
argument|QFixed _height
argument_list|,
argument|QFixed _xoff
argument_list|,
argument|QFixed _yoff
argument_list|)
operator|:
name|x
argument_list|(
name|_x
argument_list|)
operator|,
name|y
argument_list|(
name|_y
argument_list|)
operator|,
name|width
argument_list|(
name|_width
argument_list|)
operator|,
name|height
argument_list|(
name|_height
argument_list|)
operator|,
name|xoff
argument_list|(
name|_xoff
argument_list|)
operator|,
name|yoff
argument_list|(
argument|_yoff
argument_list|)
block|{}
DECL|member|x
name|QFixed
name|x
expr_stmt|;
DECL|member|y
name|QFixed
name|y
decl_stmt|;
DECL|member|width
name|QFixed
name|width
decl_stmt|;
DECL|member|height
name|QFixed
name|height
decl_stmt|;
DECL|member|xoff
name|QFixed
name|xoff
decl_stmt|;
DECL|member|yoff
name|QFixed
name|yoff
decl_stmt|;
name|glyph_metrics_t
name|transformed
argument_list|(
specifier|const
name|QTransform
operator|&
name|xform
argument_list|)
decl|const
decl_stmt|;
DECL|function|isValid
specifier|inline
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|x
operator|!=
literal|100000
operator|&&
name|y
operator|!=
literal|100000
return|;
block|}
block|}
struct|;
end_struct
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|glyph_metrics_t
argument_list|,
name|Q_PRIMITIVE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_struct
DECL|struct|QScriptAnalysis
struct|struct
name|Q_AUTOTEST_EXPORT
name|QScriptAnalysis
block|{
DECL|enum|Flags
enum|enum
name|Flags
block|{
DECL|enumerator|None
name|None
init|=
literal|0
block|,
DECL|enumerator|Lowercase
name|Lowercase
init|=
literal|1
block|,
DECL|enumerator|Uppercase
name|Uppercase
init|=
literal|2
block|,
DECL|enumerator|SmallCaps
name|SmallCaps
init|=
literal|3
block|,
DECL|enumerator|LineOrParagraphSeparator
name|LineOrParagraphSeparator
init|=
literal|4
block|,
DECL|enumerator|Space
name|Space
init|=
literal|5
block|,
DECL|enumerator|SpaceTabOrObject
name|SpaceTabOrObject
init|=
name|Space
block|,
DECL|enumerator|Tab
name|Tab
init|=
literal|6
block|,
DECL|enumerator|TabOrObject
name|TabOrObject
init|=
name|Tab
block|,
DECL|enumerator|Object
name|Object
init|=
literal|7
block|}
enum|;
DECL|member|script
name|unsigned
name|short
name|script
range|:
literal|7
decl_stmt|;
DECL|member|bidiLevel
name|unsigned
name|short
name|bidiLevel
range|:
literal|6
decl_stmt|;
comment|// Unicode Bidi algorithm embedding level (0-61)
DECL|member|flags
name|unsigned
name|short
name|flags
range|:
literal|3
decl_stmt|;
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QScriptAnalysis
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|script
operator|==
name|other
operator|.
name|script
operator|&&
name|bidiLevel
operator|==
name|other
operator|.
name|bidiLevel
operator|&&
name|flags
operator|==
name|other
operator|.
name|flags
return|;
block|}
block|}
struct|;
end_struct
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QScriptAnalysis
argument_list|,
name|Q_PRIMITIVE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_struct
DECL|struct|QGlyphJustification
struct|struct
name|QGlyphJustification
block|{
DECL|function|QGlyphJustification
specifier|inline
name|QGlyphJustification
argument_list|()
operator|:
name|type
argument_list|(
literal|0
argument_list|)
operator|,
name|nKashidas
argument_list|(
literal|0
argument_list|)
operator|,
name|space_18d6
argument_list|(
literal|0
argument_list|)
block|{}
expr|enum
DECL|enum|JustificationType
name|JustificationType
block|{
DECL|enumerator|JustifyNone
name|JustifyNone
block|,
DECL|enumerator|JustifySpace
name|JustifySpace
block|,
DECL|enumerator|JustifyKashida
name|JustifyKashida
block|}
expr_stmt|;
DECL|member|type
name|uint
name|type
range|:
literal|2
decl_stmt|;
DECL|member|nKashidas
name|uint
name|nKashidas
range|:
literal|6
decl_stmt|;
comment|// more do not make sense...
DECL|member|space_18d6
name|uint
name|space_18d6
range|:
literal|24
decl_stmt|;
block|}
struct|;
end_struct
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QGlyphJustification
argument_list|,
name|Q_PRIMITIVE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_struct
DECL|struct|QGlyphLayoutInstance
struct|struct
name|QGlyphLayoutInstance
block|{
DECL|member|offset
name|QFixedPoint
name|offset
decl_stmt|;
DECL|member|advance
name|QFixedPoint
name|advance
decl_stmt|;
DECL|member|glyph
name|glyph_t
name|glyph
decl_stmt|;
DECL|member|justification
name|QGlyphJustification
name|justification
decl_stmt|;
DECL|member|attributes
name|QGlyphAttributes
name|attributes
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QGlyphLayout
struct|struct
name|QGlyphLayout
block|{
comment|// init to 0 not needed, done when shaping
DECL|member|offsets
name|QFixedPoint
modifier|*
name|offsets
decl_stmt|;
comment|// 8 bytes per element
DECL|member|glyphs
name|glyph_t
modifier|*
name|glyphs
decl_stmt|;
comment|// 4 bytes per element
DECL|member|advances_x
name|QFixed
modifier|*
name|advances_x
decl_stmt|;
comment|// 4 bytes per element
DECL|member|advances_y
name|QFixed
modifier|*
name|advances_y
decl_stmt|;
comment|// 4 bytes per element
DECL|member|justifications
name|QGlyphJustification
modifier|*
name|justifications
decl_stmt|;
comment|// 4 bytes per element
DECL|member|attributes
name|QGlyphAttributes
modifier|*
name|attributes
decl_stmt|;
comment|// 2 bytes per element
DECL|member|numGlyphs
name|int
name|numGlyphs
decl_stmt|;
DECL|function|QGlyphLayout
specifier|inline
name|QGlyphLayout
argument_list|()
operator|:
name|numGlyphs
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|QGlyphLayout
specifier|inline
name|explicit
name|QGlyphLayout
argument_list|(
argument|char *address
argument_list|,
argument|int totalGlyphs
argument_list|)
block|{
name|offsets
operator|=
name|reinterpret_cast
operator|<
name|QFixedPoint
operator|*
operator|>
operator|(
name|address
operator|)
block|;
name|int
name|offset
operator|=
name|totalGlyphs
operator|*
sizeof|sizeof
argument_list|(
name|QFixedPoint
argument_list|)
block|;
name|glyphs
operator|=
name|reinterpret_cast
operator|<
name|glyph_t
operator|*
operator|>
operator|(
name|address
operator|+
name|offset
operator|)
block|;
name|offset
operator|+=
name|totalGlyphs
operator|*
sizeof|sizeof
argument_list|(
name|glyph_t
argument_list|)
block|;
name|advances_x
operator|=
name|reinterpret_cast
operator|<
name|QFixed
operator|*
operator|>
operator|(
name|address
operator|+
name|offset
operator|)
block|;
name|offset
operator|+=
name|totalGlyphs
operator|*
sizeof|sizeof
argument_list|(
name|QFixed
argument_list|)
block|;
name|advances_y
operator|=
name|reinterpret_cast
operator|<
name|QFixed
operator|*
operator|>
operator|(
name|address
operator|+
name|offset
operator|)
block|;
name|offset
operator|+=
name|totalGlyphs
operator|*
sizeof|sizeof
argument_list|(
name|QFixed
argument_list|)
block|;
name|justifications
operator|=
name|reinterpret_cast
operator|<
name|QGlyphJustification
operator|*
operator|>
operator|(
name|address
operator|+
name|offset
operator|)
block|;
name|offset
operator|+=
name|totalGlyphs
operator|*
sizeof|sizeof
argument_list|(
name|QGlyphJustification
argument_list|)
block|;
name|attributes
operator|=
name|reinterpret_cast
operator|<
name|QGlyphAttributes
operator|*
operator|>
operator|(
name|address
operator|+
name|offset
operator|)
block|;
name|numGlyphs
operator|=
name|totalGlyphs
block|;     }
DECL|function|mid
specifier|inline
name|QGlyphLayout
name|mid
argument_list|(
argument|int position
argument_list|,
argument|int n = -
literal|1
argument_list|)
specifier|const
block|{
name|QGlyphLayout
name|copy
operator|=
operator|*
name|this
block|;
name|copy
operator|.
name|glyphs
operator|+=
name|position
block|;
name|copy
operator|.
name|advances_x
operator|+=
name|position
block|;
name|copy
operator|.
name|advances_y
operator|+=
name|position
block|;
name|copy
operator|.
name|offsets
operator|+=
name|position
block|;
name|copy
operator|.
name|justifications
operator|+=
name|position
block|;
name|copy
operator|.
name|attributes
operator|+=
name|position
block|;
if|if
condition|(
name|n
operator|==
operator|-
literal|1
condition|)
name|copy
operator|.
name|numGlyphs
operator|-=
name|position
expr_stmt|;
else|else
name|copy
operator|.
name|numGlyphs
operator|=
name|n
expr_stmt|;
return|return
name|copy
return|;
block|}
DECL|function|spaceNeededForGlyphLayout
decl|static
specifier|inline
namespace|int
name|spaceNeededForGlyphLayout
namespace|(
name|int
name|totalGlyphs
struct|)
block|{
return|return
name|totalGlyphs
operator|*
operator|(
sizeof|sizeof
argument_list|(
name|glyph_t
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|QGlyphAttributes
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|QFixed
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|QFixed
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|QFixedPoint
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|QGlyphJustification
argument_list|)
operator|)
return|;
block|}
DECL|function|effectiveAdvance
specifier|inline
namespace|QFixed
name|effectiveAdvance
namespace|(
name|int
name|item
struct|)
specifier|const
block|{
return|return
operator|(
name|advances_x
index|[
name|item
index|]
operator|+
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|justifications
index|[
name|item
index|]
operator|.
name|space_18d6
argument_list|)
operator|)
operator|*
operator|!
name|attributes
index|[
name|item
index|]
operator|.
name|dontPrint
return|;
block|}
DECL|function|instance
specifier|inline
namespace|QGlyphLayoutInstance
name|instance
namespace|(
name|int
name|position
struct|)
specifier|const
block|{
name|QGlyphLayoutInstance
name|g
block|;
name|g
operator|.
name|offset
operator|.
name|x
operator|=
name|offsets
index|[
name|position
index|]
operator|.
name|x
block|;
name|g
operator|.
name|offset
operator|.
name|y
operator|=
name|offsets
index|[
name|position
index|]
operator|.
name|y
block|;
name|g
operator|.
name|glyph
operator|=
name|glyphs
index|[
name|position
index|]
block|;
name|g
operator|.
name|advance
operator|.
name|x
operator|=
name|advances_x
index|[
name|position
index|]
block|;
name|g
operator|.
name|advance
operator|.
name|y
operator|=
name|advances_y
index|[
name|position
index|]
block|;
name|g
operator|.
name|justification
operator|=
name|justifications
index|[
name|position
index|]
block|;
name|g
operator|.
name|attributes
operator|=
name|attributes
index|[
name|position
index|]
block|;
return|return
name|g
return|;
block|}
DECL|function|setInstance
specifier|inline
namespace|void
name|setInstance
namespace|(
name|int
name|position
operator|,
namespace|const
name|QGlyphLayoutInstance
namespace|&
name|g
struct|)
block|{
name|offsets
index|[
name|position
index|]
operator|.
name|x
operator|=
name|g
operator|.
name|offset
operator|.
name|x
expr_stmt|;
name|offsets
index|[
name|position
index|]
operator|.
name|y
operator|=
name|g
operator|.
name|offset
operator|.
name|y
expr_stmt|;
name|glyphs
index|[
name|position
index|]
operator|=
name|g
operator|.
name|glyph
expr_stmt|;
name|advances_x
index|[
name|position
index|]
operator|=
name|g
operator|.
name|advance
operator|.
name|x
expr_stmt|;
name|advances_y
index|[
name|position
index|]
operator|=
name|g
operator|.
name|advance
operator|.
name|y
expr_stmt|;
name|justifications
index|[
name|position
index|]
operator|=
name|g
operator|.
name|justification
expr_stmt|;
name|attributes
index|[
name|position
index|]
operator|=
name|g
operator|.
name|attributes
expr_stmt|;
block|}
DECL|function|clear
specifier|inline
namespace|void
name|clear
namespace|(
name|int
name|first
namespace|= 0
operator|,
name|int
name|last
namespace|= -1
struct|)
block|{
if|if
condition|(
name|last
operator|==
operator|-
literal|1
condition|)
name|last
operator|=
name|numGlyphs
expr_stmt|;
if|if
condition|(
name|first
operator|==
literal|0
operator|&&
name|last
operator|==
name|numGlyphs
operator|&&
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|offsets
operator|+
name|numGlyphs
operator|)
operator|==
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|glyphs
operator|)
condition|)
block|{
name|memset
argument_list|(
name|offsets
argument_list|,
literal|0
argument_list|,
name|spaceNeededForGlyphLayout
argument_list|(
name|numGlyphs
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|int
name|num
init|=
name|last
operator|-
name|first
decl_stmt|;
name|memset
argument_list|(
name|offsets
operator|+
name|first
argument_list|,
literal|0
argument_list|,
name|num
operator|*
sizeof|sizeof
argument_list|(
name|QFixedPoint
argument_list|)
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|glyphs
operator|+
name|first
argument_list|,
literal|0
argument_list|,
name|num
operator|*
sizeof|sizeof
argument_list|(
name|glyph_t
argument_list|)
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|advances_x
operator|+
name|first
argument_list|,
literal|0
argument_list|,
name|num
operator|*
sizeof|sizeof
argument_list|(
name|QFixed
argument_list|)
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|advances_y
operator|+
name|first
argument_list|,
literal|0
argument_list|,
name|num
operator|*
sizeof|sizeof
argument_list|(
name|QFixed
argument_list|)
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|justifications
operator|+
name|first
argument_list|,
literal|0
argument_list|,
name|num
operator|*
sizeof|sizeof
argument_list|(
name|QGlyphJustification
argument_list|)
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|attributes
operator|+
name|first
argument_list|,
literal|0
argument_list|,
name|num
operator|*
sizeof|sizeof
argument_list|(
name|QGlyphAttributes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|data
specifier|inline
namespace|char *
name|data
namespace|(
struct|)
block|{
return|return
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|offsets
operator|)
return|;
block|}
name|void
name|grow
argument_list|(
name|char
operator|*
name|address
argument_list|,
name|int
name|totalGlyphs
argument_list|)
struct|;
end_struct
begin_decl_stmt
unit|};
name|class
name|QVarLengthGlyphLayoutArray
range|:
name|private
name|QVarLengthArray
operator|<
name|void
operator|*
operator|>
decl_stmt|,
name|public
name|QGlyphLayout
block|{
name|private
label|:
typedef|typedef
name|QVarLengthArray
operator|<
name|void
operator|*
operator|>
name|Array
expr_stmt|;
name|public
label|:
name|QVarLengthGlyphLayoutArray
argument_list|(
argument|int totalGlyphs
argument_list|)
block|:
name|Array
argument_list|(
name|spaceNeededForGlyphLayout
argument_list|(
name|totalGlyphs
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|+
literal|1
argument_list|)
operator|,
name|QGlyphLayout
argument_list|(
argument|reinterpret_cast<char *>(Array::data())
argument_list|,
argument|totalGlyphs
argument_list|)
block|{
name|memset
argument_list|(
name|Array
operator|::
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Array
operator|::
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
block|;     }
name|void
name|resize
argument_list|(
argument|int totalGlyphs
argument_list|)
block|{
name|Array
operator|::
name|resize
argument_list|(
name|spaceNeededForGlyphLayout
argument_list|(
name|totalGlyphs
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|+
literal|1
argument_list|)
block|;
operator|*
operator|(
operator|(
name|QGlyphLayout
operator|*
operator|)
name|this
operator|)
operator|=
name|QGlyphLayout
argument_list|(
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|Array
operator|::
name|data
argument_list|()
operator|)
argument_list|,
name|totalGlyphs
argument_list|)
block|;
name|memset
argument_list|(
name|Array
operator|::
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Array
operator|::
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
block|;     }
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
DECL|struct|QGlyphLayout
name|template
operator|<
name|int
name|N
operator|>
expr|struct
name|QGlyphLayoutArray
operator|:
name|public
name|QGlyphLayout
block|{
DECL|member|public
name|public
operator|:
name|QGlyphLayoutArray
argument_list|()
operator|:
name|QGlyphLayout
argument_list|(
argument|reinterpret_cast<char *>(buffer)
argument_list|,
argument|N
argument_list|)
block|{
name|memset
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|buffer
argument_list|)
argument_list|)
block|;     }
DECL|member|private
name|private
operator|:
name|void
operator|*
name|buffer
index|[
operator|(
name|N
operator|*
operator|(
sizeof|sizeof
argument_list|(
name|glyph_t
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|QGlyphAttributes
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|QFixed
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|QFixed
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|QFixedPoint
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|QGlyphJustification
argument_list|)
operator|)
operator|)
operator|/
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|+
literal|1
index|]
block|; }
expr_stmt|;
end_expr_stmt
begin_struct_decl
struct_decl|struct
name|QScriptItem
struct_decl|;
end_struct_decl
begin_comment
comment|/// Internal QTextItem
end_comment
begin_decl_stmt
name|class
name|QTextItemInt
range|:
name|public
name|QTextItem
block|{
name|public
operator|:
specifier|inline
name|QTextItemInt
argument_list|()
operator|:
name|justified
argument_list|(
name|false
argument_list|)
block|,
name|underlineStyle
argument_list|(
name|QTextCharFormat
operator|::
name|NoUnderline
argument_list|)
block|,
name|num_chars
argument_list|(
literal|0
argument_list|)
block|,
name|chars
argument_list|(
literal|0
argument_list|)
block|,
name|logClusters
argument_list|(
literal|0
argument_list|)
block|,
name|f
argument_list|(
literal|0
argument_list|)
block|,
name|fontEngine
argument_list|(
literal|0
argument_list|)
block|{}
name|QTextItemInt
argument_list|(
specifier|const
name|QScriptItem
operator|&
name|si
argument_list|,
name|QFont
operator|*
name|font
argument_list|,
specifier|const
name|QTextCharFormat
operator|&
name|format
operator|=
name|QTextCharFormat
argument_list|()
argument_list|)
block|;
name|QTextItemInt
argument_list|(
argument|const QGlyphLayout&g
argument_list|,
argument|QFont *font
argument_list|,
argument|const QChar *chars
argument_list|,
argument|int numChars
argument_list|,
argument|QFontEngine *fe
argument_list|,
argument|const QTextCharFormat&format = QTextCharFormat()
argument_list|)
block|;
comment|/// copy the structure items, adjusting the glyphs arrays to the right subarrays.
comment|/// the width of the returned QTextItemInt is not adjusted, for speed reasons
name|QTextItemInt
name|midItem
argument_list|(
argument|QFontEngine *fontEngine
argument_list|,
argument|int firstGlyphIndex
argument_list|,
argument|int numGlyphs
argument_list|)
specifier|const
block|;
name|void
name|initWithScriptItem
argument_list|(
specifier|const
name|QScriptItem
operator|&
name|si
argument_list|)
block|;
name|QFixed
name|descent
block|;
name|QFixed
name|ascent
block|;
name|QFixed
name|width
block|;
name|RenderFlags
name|flags
block|;
name|bool
name|justified
block|;
name|QTextCharFormat
operator|::
name|UnderlineStyle
name|underlineStyle
block|;
specifier|const
name|QTextCharFormat
name|charFormat
block|;
name|int
name|num_chars
block|;
specifier|const
name|QChar
operator|*
name|chars
block|;
specifier|const
name|unsigned
name|short
operator|*
name|logClusters
block|;
specifier|const
name|QFont
operator|*
name|f
block|;
name|QGlyphLayout
name|glyphs
block|;
name|QFontEngine
operator|*
name|fontEngine
block|; }
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|QScriptItem
struct|struct
name|Q_AUTOTEST_EXPORT
name|QScriptItem
block|{
DECL|function|QScriptItem
specifier|inline
name|QScriptItem
argument_list|()
operator|:
name|position
argument_list|(
literal|0
argument_list|)
operator|,
name|num_glyphs
argument_list|(
literal|0
argument_list|)
operator|,
name|descent
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|ascent
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|leading
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|width
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|glyph_data_offset
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|QScriptItem
specifier|inline
name|QScriptItem
argument_list|(
argument|int p
argument_list|,
argument|const QScriptAnalysis&a
argument_list|)
operator|:
name|position
argument_list|(
name|p
argument_list|)
operator|,
name|analysis
argument_list|(
name|a
argument_list|)
operator|,
name|num_glyphs
argument_list|(
literal|0
argument_list|)
operator|,
name|descent
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|ascent
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|leading
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|width
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|glyph_data_offset
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|position
name|int
name|position
expr_stmt|;
DECL|member|analysis
name|QScriptAnalysis
name|analysis
decl_stmt|;
DECL|member|num_glyphs
name|unsigned
name|short
name|num_glyphs
decl_stmt|;
DECL|member|descent
name|QFixed
name|descent
decl_stmt|;
DECL|member|ascent
name|QFixed
name|ascent
decl_stmt|;
DECL|member|leading
name|QFixed
name|leading
decl_stmt|;
DECL|member|width
name|QFixed
name|width
decl_stmt|;
DECL|member|glyph_data_offset
name|int
name|glyph_data_offset
decl_stmt|;
DECL|function|height
name|QFixed
name|height
argument_list|()
specifier|const
block|{
return|return
name|ascent
operator|+
name|descent
return|;
block|}
block|}
struct|;
end_struct
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QScriptItem
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_typedef
DECL|typedef|QScriptItemArray
typedef|typedef
name|QVector
operator|<
name|QScriptItem
operator|>
name|QScriptItemArray
expr_stmt|;
end_typedef
begin_struct
DECL|struct|QScriptLine
struct|struct
name|Q_AUTOTEST_EXPORT
name|QScriptLine
block|{
comment|// created and filled in QTextLine::layout_helper
DECL|function|QScriptLine
name|QScriptLine
argument_list|()
operator|:
name|from
argument_list|(
literal|0
argument_list|)
operator|,
name|trailingSpaces
argument_list|(
literal|0
argument_list|)
operator|,
name|length
argument_list|(
literal|0
argument_list|)
operator|,
name|justified
argument_list|(
literal|0
argument_list|)
operator|,
name|gridfitted
argument_list|(
literal|0
argument_list|)
operator|,
name|hasTrailingSpaces
argument_list|(
literal|0
argument_list|)
operator|,
name|leadingIncluded
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|descent
name|QFixed
name|descent
expr_stmt|;
DECL|member|ascent
name|QFixed
name|ascent
decl_stmt|;
DECL|member|leading
name|QFixed
name|leading
decl_stmt|;
DECL|member|x
name|QFixed
name|x
decl_stmt|;
DECL|member|y
name|QFixed
name|y
decl_stmt|;
DECL|member|width
name|QFixed
name|width
decl_stmt|;
DECL|member|textWidth
name|QFixed
name|textWidth
decl_stmt|;
DECL|member|textAdvance
name|QFixed
name|textAdvance
decl_stmt|;
DECL|member|from
name|int
name|from
decl_stmt|;
DECL|member|trailingSpaces
name|unsigned
name|short
name|trailingSpaces
decl_stmt|;
DECL|member|length
name|signed
name|int
name|length
range|:
literal|28
decl_stmt|;
DECL|member|justified
name|mutable
name|uint
name|justified
range|:
literal|1
decl_stmt|;
DECL|member|gridfitted
name|mutable
name|uint
name|gridfitted
range|:
literal|1
decl_stmt|;
DECL|member|hasTrailingSpaces
name|uint
name|hasTrailingSpaces
range|:
literal|1
decl_stmt|;
DECL|member|leadingIncluded
name|uint
name|leadingIncluded
range|:
literal|1
decl_stmt|;
DECL|function|height
name|QFixed
name|height
argument_list|()
specifier|const
block|{
return|return
name|ascent
operator|+
name|descent
operator|+
operator|(
name|leadingIncluded
operator|?
name|qMax
argument_list|(
name|QFixed
argument_list|()
argument_list|,
name|leading
argument_list|)
operator|:
name|QFixed
argument_list|()
operator|)
return|;
block|}
DECL|function|base
name|QFixed
name|base
argument_list|()
specifier|const
block|{
return|return
name|ascent
operator|+
operator|(
name|leadingIncluded
operator|?
name|qMax
argument_list|(
name|QFixed
argument_list|()
argument_list|,
name|leading
argument_list|)
operator|:
name|QFixed
argument_list|()
operator|)
return|;
block|}
name|void
name|setDefaultHeight
parameter_list|(
name|QTextEngine
modifier|*
name|eng
parameter_list|)
function_decl|;
DECL|member|operator
name|void
name|operator
operator|+=
operator|(
specifier|const
name|QScriptLine
operator|&
name|other
operator|)
expr_stmt|;
block|}
struct|;
end_struct
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QScriptLine
argument_list|,
name|Q_PRIMITIVE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|operator
specifier|inline
name|void
name|QScriptLine
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|QScriptLine
operator|&
name|other
operator|)
block|{
name|leading
operator|=
name|qMax
argument_list|(
name|leading
operator|+
name|ascent
argument_list|,
name|other
operator|.
name|leading
operator|+
name|other
operator|.
name|ascent
argument_list|)
operator|-
name|qMax
argument_list|(
name|ascent
argument_list|,
name|other
operator|.
name|ascent
argument_list|)
block|;
name|descent
operator|=
name|qMax
argument_list|(
name|descent
argument_list|,
name|other
operator|.
name|descent
argument_list|)
block|;
name|ascent
operator|=
name|qMax
argument_list|(
name|ascent
argument_list|,
name|other
operator|.
name|ascent
argument_list|)
block|;
name|textWidth
operator|+=
name|other
operator|.
name|textWidth
block|;
name|length
operator|+=
name|other
operator|.
name|length
block|; }
end_expr_stmt
begin_typedef
typedef|typedef
name|QVector
operator|<
name|QScriptLine
operator|>
name|QScriptLineArray
expr_stmt|;
end_typedef
begin_decl_stmt
DECL|variable|QFontPrivate
name|class
name|QFontPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextFormatCollection
name|class
name|QTextFormatCollection
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QTextEngine
block|{
name|public
label|:
enum|enum
name|LayoutState
block|{
name|LayoutEmpty
block|,
name|InLayout
block|,
name|LayoutFailed
block|}
enum|;
struct|struct
name|Q_GUI_EXPORT
name|LayoutData
block|{
name|LayoutData
argument_list|(
argument|const QString&str
argument_list|,
argument|void **stack_memory
argument_list|,
argument|int mem_size
argument_list|)
empty_stmt|;
name|LayoutData
argument_list|()
expr_stmt|;
operator|~
name|LayoutData
argument_list|()
expr_stmt|;
name|mutable
name|QScriptItemArray
name|items
decl_stmt|;
name|int
name|allocated
decl_stmt|;
name|int
name|available_glyphs
decl_stmt|;
name|void
modifier|*
modifier|*
name|memory
decl_stmt|;
name|unsigned
name|short
modifier|*
name|logClustersPtr
decl_stmt|;
name|QGlyphLayout
name|glyphLayout
decl_stmt|;
name|mutable
name|int
name|used
decl_stmt|;
name|uint
name|hasBidi
range|:
literal|1
decl_stmt|;
name|uint
name|layoutState
range|:
literal|2
decl_stmt|;
name|uint
name|memory_on_stack
range|:
literal|1
decl_stmt|;
name|uint
name|haveCharAttributes
range|:
literal|1
decl_stmt|;
name|QString
name|string
decl_stmt|;
name|bool
name|reallocate
parameter_list|(
name|int
name|totalGlyphs
parameter_list|)
function_decl|;
block|}
struct|;
struct|struct
name|ItemDecoration
block|{
name|ItemDecoration
argument_list|(
argument|qreal x1
argument_list|,
argument|qreal x2
argument_list|,
argument|qreal y
argument_list|,
argument|const QPen&pen
argument_list|)
block|:
name|x1
argument_list|(
name|x1
argument_list|)
operator|,
name|x2
argument_list|(
name|x2
argument_list|)
operator|,
name|y
argument_list|(
name|y
argument_list|)
operator|,
name|pen
argument_list|(
argument|pen
argument_list|)
block|{}
name|qreal
name|x1
expr_stmt|;
name|qreal
name|x2
decl_stmt|;
name|qreal
name|y
decl_stmt|;
name|QPen
name|pen
decl_stmt|;
block|}
struct|;
typedef|typedef
name|QList
operator|<
name|ItemDecoration
operator|>
name|ItemDecorationList
expr_stmt|;
name|QTextEngine
argument_list|(
name|LayoutData
operator|*
name|data
argument_list|)
expr_stmt|;
name|QTextEngine
argument_list|()
expr_stmt|;
name|QTextEngine
argument_list|(
specifier|const
name|QString
operator|&
name|str
argument_list|,
specifier|const
name|QFont
operator|&
name|f
argument_list|)
expr_stmt|;
operator|~
name|QTextEngine
argument_list|()
expr_stmt|;
enum|enum
name|Mode
block|{
name|WidthOnly
init|=
literal|0x07
block|}
enum|;
name|void
name|invalidate
parameter_list|()
function_decl|;
name|void
name|clearLineData
parameter_list|()
function_decl|;
name|void
name|validate
argument_list|()
specifier|const
expr_stmt|;
name|void
name|itemize
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isRightToLeft
argument_list|()
specifier|const
expr_stmt|;
specifier|static
name|void
name|bidiReorder
parameter_list|(
name|int
name|numRuns
parameter_list|,
specifier|const
name|quint8
modifier|*
name|levels
parameter_list|,
name|int
modifier|*
name|visualOrder
parameter_list|)
function_decl|;
specifier|const
name|QCharAttributes
operator|*
name|attributes
argument_list|()
specifier|const
expr_stmt|;
name|void
name|shape
argument_list|(
name|int
name|item
argument_list|)
decl|const
decl_stmt|;
name|void
name|justify
parameter_list|(
specifier|const
name|QScriptLine
modifier|&
name|si
parameter_list|)
function_decl|;
name|QFixed
name|alignLine
parameter_list|(
specifier|const
name|QScriptLine
modifier|&
name|line
parameter_list|)
function_decl|;
name|QFixed
name|width
argument_list|(
name|int
name|charFrom
argument_list|,
name|int
name|numChars
argument_list|)
decl|const
decl_stmt|;
name|glyph_metrics_t
name|boundingBox
argument_list|(
name|int
name|from
argument_list|,
name|int
name|len
argument_list|)
decl|const
decl_stmt|;
name|glyph_metrics_t
name|tightBoundingBox
argument_list|(
name|int
name|from
argument_list|,
name|int
name|len
argument_list|)
decl|const
decl_stmt|;
name|int
name|length
argument_list|(
name|int
name|item
argument_list|)
decl|const
block|{
specifier|const
name|QScriptItem
modifier|&
name|si
init|=
name|layoutData
operator|->
name|items
index|[
name|item
index|]
decl_stmt|;
name|int
name|from
init|=
name|si
operator|.
name|position
decl_stmt|;
name|item
operator|++
expr_stmt|;
return|return
operator|(
name|item
operator|<
name|layoutData
operator|->
name|items
operator|.
name|size
argument_list|()
condition|?
name|layoutData
operator|->
name|items
index|[
name|item
index|]
operator|.
name|position
else|:
name|layoutData
operator|->
name|string
operator|.
name|length
argument_list|()
operator|)
operator|-
name|from
return|;
block|}
name|int
name|length
argument_list|(
specifier|const
name|QScriptItem
operator|*
name|si
argument_list|)
decl|const
block|{
name|int
name|end
decl_stmt|;
if|if
condition|(
name|si
operator|+
literal|1
operator|<
name|layoutData
operator|->
name|items
operator|.
name|constData
argument_list|()
operator|+
name|layoutData
operator|->
name|items
operator|.
name|size
argument_list|()
condition|)
name|end
operator|=
operator|(
name|si
operator|+
literal|1
operator|)
operator|->
name|position
expr_stmt|;
else|else
name|end
operator|=
name|layoutData
operator|->
name|string
operator|.
name|length
argument_list|()
expr_stmt|;
return|return
name|end
operator|-
name|si
operator|->
name|position
return|;
block|}
name|QFontEngine
modifier|*
name|fontEngine
argument_list|(
specifier|const
name|QScriptItem
operator|&
name|si
argument_list|,
name|QFixed
operator|*
name|ascent
operator|=
literal|0
argument_list|,
name|QFixed
operator|*
name|descent
operator|=
literal|0
argument_list|,
name|QFixed
operator|*
name|leading
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|QFont
name|font
argument_list|(
specifier|const
name|QScriptItem
operator|&
name|si
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QFont
name|font
argument_list|()
specifier|const
block|{
return|return
name|fnt
return|;
block|}
comment|/**      * Returns a pointer to an array of log clusters, offset at the script item.      * Each item in the array is a unsigned short.  For each character in the original string there is an entry in the table      * so there is a one to one correlation in indexes between the original text and the index in the logcluster.      * The value of each item is the position in the glyphs array. Multiple similar pointers in the logclusters array imply      * that one glyph is used for more than one character.      * \sa glyphs()      */
specifier|inline
name|unsigned
name|short
modifier|*
name|logClusters
argument_list|(
specifier|const
name|QScriptItem
operator|*
name|si
argument_list|)
decl|const
block|{
return|return
name|layoutData
operator|->
name|logClustersPtr
operator|+
name|si
operator|->
name|position
return|;
block|}
comment|/**      * Returns an array of QGlyphLayout items, offset at the script item.      * Each item in the array matches one glyph in the text, storing the advance, position etc.      * The returned item's length equals to the number of available glyphs. This may be more      * than what was actually shaped.      * \sa logClusters()      */
specifier|inline
name|QGlyphLayout
name|availableGlyphs
argument_list|(
specifier|const
name|QScriptItem
operator|*
name|si
argument_list|)
decl|const
block|{
return|return
name|layoutData
operator|->
name|glyphLayout
operator|.
name|mid
argument_list|(
name|si
operator|->
name|glyph_data_offset
argument_list|)
return|;
block|}
comment|/**      * Returns an array of QGlyphLayout items, offset at the script item.      * Each item in the array matches one glyph in the text, storing the advance, position etc.      * The returned item's length equals to the number of shaped glyphs.      * \sa logClusters()      */
specifier|inline
name|QGlyphLayout
name|shapedGlyphs
argument_list|(
specifier|const
name|QScriptItem
operator|*
name|si
argument_list|)
decl|const
block|{
return|return
name|layoutData
operator|->
name|glyphLayout
operator|.
name|mid
argument_list|(
name|si
operator|->
name|glyph_data_offset
argument_list|,
name|si
operator|->
name|num_glyphs
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|ensureSpace
argument_list|(
name|int
name|nGlyphs
argument_list|)
decl|const
block|{
if|if
condition|(
name|layoutData
operator|->
name|glyphLayout
operator|.
name|numGlyphs
operator|-
name|layoutData
operator|->
name|used
operator|<
name|nGlyphs
condition|)
return|return
name|layoutData
operator|->
name|reallocate
argument_list|(
operator|(
operator|(
operator|(
name|layoutData
operator|->
name|used
operator|+
name|nGlyphs
operator|)
operator|*
literal|3
operator|/
literal|2
operator|+
literal|15
operator|)
operator|>>
literal|4
operator|)
operator|<<
literal|4
argument_list|)
return|;
return|return
name|true
return|;
block|}
name|void
name|freeMemory
parameter_list|()
function_decl|;
name|int
name|findItem
argument_list|(
name|int
name|strPos
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QTextFormatCollection
operator|*
name|formats
argument_list|()
specifier|const
block|{
if|if
condition|(
name|block
operator|.
name|docHandle
argument_list|()
condition|)
return|return
name|block
operator|.
name|docHandle
argument_list|()
operator|->
name|formatCollection
argument_list|()
return|;
return|return
name|specialData
condition|?
name|specialData
operator|->
name|formats
operator|.
name|data
argument_list|()
else|:
literal|0
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|QTextCharFormat
name|format
argument_list|(
specifier|const
name|QScriptItem
operator|*
name|si
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
specifier|inline
name|QAbstractTextDocumentLayout
operator|*
name|docLayout
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|block
operator|.
name|docHandle
argument_list|()
argument_list|)
block|;
return|return
name|block
operator|.
name|docHandle
argument_list|()
operator|->
name|document
argument_list|()
operator|->
name|documentLayout
argument_list|()
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|int
name|formatIndex
argument_list|(
specifier|const
name|QScriptItem
operator|*
name|si
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_comment
comment|/// returns the width of tab at index (in the tabs array) with the tab-start at position x
end_comment
begin_decl_stmt
name|QFixed
name|calculateTabWidth
argument_list|(
name|int
name|index
argument_list|,
name|QFixed
name|x
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|mutable
name|QScriptLineArray
name|lines
decl_stmt|;
end_decl_stmt
begin_struct
struct|struct
name|FontEngineCache
block|{
name|FontEngineCache
argument_list|()
expr_stmt|;
name|mutable
name|QFontEngine
modifier|*
name|prevFontEngine
decl_stmt|;
name|mutable
name|QFontEngine
modifier|*
name|prevScaledFontEngine
decl_stmt|;
name|mutable
name|int
name|prevScript
decl_stmt|;
name|mutable
name|int
name|prevPosition
decl_stmt|;
name|mutable
name|int
name|prevLength
decl_stmt|;
specifier|inline
name|void
name|reset
parameter_list|()
block|{
name|prevFontEngine
operator|=
literal|0
expr_stmt|;
name|prevScaledFontEngine
operator|=
literal|0
expr_stmt|;
name|prevScript
operator|=
operator|-
literal|1
expr_stmt|;
name|prevPosition
operator|=
operator|-
literal|1
expr_stmt|;
name|prevLength
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_decl_stmt
name|mutable
name|FontEngineCache
name|feCache
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|text
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|mutable
name|QFont
name|fnt
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_RAWFONT
end_ifndef
begin_decl_stmt
name|QRawFont
name|rawFont
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QTextBlock
name|block
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QTextOption
name|option
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QFixed
name|minWidth
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QFixed
name|maxWidth
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QPointF
name|position
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|ignoreBidi
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|cacheGlyphs
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|stackEngine
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|forceJustification
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|visualMovement
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|delayDecorations
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_RAWFONT
end_ifndef
begin_decl_stmt
name|uint
name|useRawFont
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|int
modifier|*
name|underlinePositions
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|mutable
name|LayoutData
modifier|*
name|layoutData
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|ItemDecorationList
name|underlineList
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|ItemDecorationList
name|strikeOutList
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|ItemDecorationList
name|overlineList
decl_stmt|;
end_decl_stmt
begin_expr_stmt
specifier|inline
name|bool
name|visualCursorMovement
argument_list|()
specifier|const
block|{
return|return
operator|(
name|visualMovement
operator|||
operator|(
name|block
operator|.
name|docHandle
argument_list|()
operator|?
name|block
operator|.
name|docHandle
argument_list|()
operator|->
name|defaultCursorMoveStyle
operator|==
name|Qt
operator|::
name|VisualMoveStyle
operator|:
name|false
operator|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|preeditAreaPosition
argument_list|()
specifier|const
block|{
return|return
name|specialData
operator|?
name|specialData
operator|->
name|preeditPosition
operator|:
operator|-
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
name|preeditAreaText
argument_list|()
specifier|const
block|{
return|return
name|specialData
operator|?
name|specialData
operator|->
name|preeditText
operator|:
name|QString
argument_list|()
return|;
block|}
end_expr_stmt
begin_function_decl
name|void
name|setPreeditArea
parameter_list|(
name|int
name|position
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
specifier|inline
name|bool
name|hasFormats
argument_list|()
specifier|const
block|{
return|return
name|block
operator|.
name|docHandle
argument_list|()
operator|||
operator|(
name|specialData
operator|&&
operator|!
name|specialData
operator|->
name|addFormats
operator|.
name|isEmpty
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QList
operator|<
name|QTextLayout
operator|::
name|FormatRange
operator|>
name|additionalFormats
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|void
name|setAdditionalFormats
argument_list|(
specifier|const
name|QList
operator|<
name|QTextLayout
operator|::
name|FormatRange
operator|>
operator|&
name|formatList
argument_list|)
decl_stmt|;
end_decl_stmt
begin_label
name|private
label|:
end_label
begin_function_decl
specifier|static
name|void
name|init
parameter_list|(
name|QTextEngine
modifier|*
name|e
parameter_list|)
function_decl|;
end_function_decl
begin_struct
struct|struct
name|SpecialData
block|{
name|int
name|preeditPosition
decl_stmt|;
name|QString
name|preeditText
decl_stmt|;
name|QList
operator|<
name|QTextLayout
operator|::
name|FormatRange
operator|>
name|addFormats
expr_stmt|;
name|QVector
operator|<
name|int
operator|>
name|addFormatIndices
expr_stmt|;
name|QVector
operator|<
name|int
operator|>
name|resolvedFormatIndices
expr_stmt|;
comment|// only used when no docHandle is available
name|QScopedPointer
operator|<
name|QTextFormatCollection
operator|>
name|formats
expr_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
name|SpecialData
modifier|*
name|specialData
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|indexAdditionalFormats
parameter_list|()
function_decl|;
end_function_decl
begin_expr_stmt
name|void
name|resolveAdditionalFormats
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_label
name|public
label|:
end_label
begin_decl_stmt
name|bool
name|atWordSeparator
argument_list|(
name|int
name|position
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|atSpace
argument_list|(
name|int
name|position
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|elidedText
argument_list|(
name|Qt
operator|::
name|TextElideMode
name|mode
argument_list|,
specifier|const
name|QFixed
operator|&
name|width
argument_list|,
name|int
name|flags
operator|=
literal|0
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|,
name|int
name|count
operator|=
operator|-
literal|1
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|shapeLine
parameter_list|(
specifier|const
name|QScriptLine
modifier|&
name|line
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QFixed
name|leadingSpaceWidth
parameter_list|(
specifier|const
name|QScriptLine
modifier|&
name|line
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QFixed
name|offsetInLigature
parameter_list|(
specifier|const
name|QScriptItem
modifier|*
name|si
parameter_list|,
name|int
name|pos
parameter_list|,
name|int
name|max
parameter_list|,
name|int
name|glyph_pos
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|positionInLigature
parameter_list|(
specifier|const
name|QScriptItem
modifier|*
name|si
parameter_list|,
name|int
name|end
parameter_list|,
name|QFixed
name|x
parameter_list|,
name|QFixed
name|edge
parameter_list|,
name|int
name|glyph_pos
parameter_list|,
name|bool
name|cursorOnCharacter
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|int
name|previousLogicalPosition
argument_list|(
name|int
name|oldPos
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|nextLogicalPosition
argument_list|(
name|int
name|oldPos
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|int
name|lineNumberForTextPosition
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|int
name|positionAfterVisualMovement
argument_list|(
name|int
name|oldPos
argument_list|,
name|QTextCursor
operator|::
name|MoveOperation
name|op
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|void
name|insertionPointsForLine
argument_list|(
name|int
name|lineNum
argument_list|,
name|QVector
operator|<
name|int
operator|>
operator|&
name|insertionPoints
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|resetFontEngineCache
parameter_list|()
function_decl|;
end_function_decl
begin_function
name|void
name|enableDelayDecorations
parameter_list|(
name|bool
name|enable
init|=
name|true
parameter_list|)
block|{
name|delayDecorations
operator|=
name|enable
expr_stmt|;
block|}
end_function
begin_function_decl
name|void
name|addUnderline
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QLineF
modifier|&
name|line
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|addStrikeOut
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QLineF
modifier|&
name|line
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|addOverline
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QLineF
modifier|&
name|line
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|drawDecorations
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|clearDecorations
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|adjustUnderlines
parameter_list|()
function_decl|;
end_function_decl
begin_label
name|private
label|:
end_label
begin_function_decl
name|void
name|addItemDecoration
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QLineF
modifier|&
name|line
parameter_list|,
name|ItemDecorationList
modifier|*
name|decorationList
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|void
name|adjustUnderlines
argument_list|(
name|ItemDecorationList
operator|::
name|iterator
name|start
argument_list|,
name|ItemDecorationList
operator|::
name|iterator
name|end
argument_list|,
name|qreal
name|underlinePos
argument_list|,
name|qreal
name|penWidth
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|drawItemDecorationList
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|ItemDecorationList
modifier|&
name|decorationList
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|void
name|setBoundary
argument_list|(
name|int
name|strPos
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|void
name|addRequiredBoundaries
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|void
name|shapeText
argument_list|(
name|int
name|item
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|void
name|shapeTextWithHarfbuzz
argument_list|(
name|int
name|item
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|void
name|splitItem
argument_list|(
name|int
name|item
argument_list|,
name|int
name|pos
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|int
name|endOfLine
parameter_list|(
name|int
name|lineNum
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|beginningOfLine
parameter_list|(
name|int
name|lineNum
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|getClusterLength
parameter_list|(
name|unsigned
name|short
modifier|*
name|logClusters
parameter_list|,
specifier|const
name|QCharAttributes
modifier|*
name|attributes
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|int
name|glyph_pos
parameter_list|,
name|int
modifier|*
name|start
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
unit|};
name|class
name|Q_GUI_EXPORT
name|QStackTextEngine
range|:
name|public
name|QTextEngine
block|{
name|public
operator|:
expr|enum
block|{
name|MemSize
operator|=
literal|256
operator|*
literal|40
operator|/
expr|sizeof
operator|(
name|void
operator|*
operator|)
block|}
block|;
name|QStackTextEngine
argument_list|(
specifier|const
name|QString
operator|&
name|string
argument_list|,
specifier|const
name|QFont
operator|&
name|f
argument_list|)
block|;
name|LayoutData
name|_layoutData
block|;
name|void
operator|*
name|_memory
index|[
name|MemSize
index|]
block|; }
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|QTextLineItemIterator
struct|struct
name|QTextLineItemIterator
block|{
name|QTextLineItemIterator
argument_list|(
argument|QTextEngine *eng
argument_list|,
argument|int lineNum
argument_list|,
argument|const QPointF&pos = QPointF()
argument_list|,
argument|const QTextLayout::FormatRange *_selection =
literal|0
argument_list|)
empty_stmt|;
DECL|function|atEnd
specifier|inline
name|bool
name|atEnd
argument_list|()
specifier|const
block|{
return|return
name|logicalItem
operator|>=
name|nItems
operator|-
literal|1
return|;
block|}
DECL|function|atBeginning
specifier|inline
name|bool
name|atBeginning
argument_list|()
specifier|const
block|{
return|return
name|logicalItem
operator|<=
literal|0
return|;
block|}
name|QScriptItem
modifier|&
name|next
parameter_list|()
function_decl|;
name|bool
name|getSelectionBounds
argument_list|(
name|QFixed
operator|*
name|selectionX
argument_list|,
name|QFixed
operator|*
name|selectionWidth
argument_list|)
decl|const
decl_stmt|;
DECL|function|isOutsideSelection
specifier|inline
name|bool
name|isOutsideSelection
argument_list|()
specifier|const
block|{
name|QFixed
name|tmp1
block|,
name|tmp2
block|;
return|return
operator|!
name|getSelectionBounds
argument_list|(
operator|&
name|tmp1
argument_list|,
operator|&
name|tmp2
argument_list|)
return|;
block|}
DECL|member|eng
name|QTextEngine
modifier|*
name|eng
decl_stmt|;
DECL|member|x
name|QFixed
name|x
decl_stmt|;
DECL|member|pos_x
name|QFixed
name|pos_x
decl_stmt|;
DECL|member|line
specifier|const
name|QScriptLine
modifier|&
name|line
decl_stmt|;
DECL|member|si
name|QScriptItem
modifier|*
name|si
decl_stmt|;
DECL|member|lineNum
name|int
name|lineNum
decl_stmt|;
DECL|member|lineEnd
name|int
name|lineEnd
decl_stmt|;
DECL|member|firstItem
name|int
name|firstItem
decl_stmt|;
DECL|member|lastItem
name|int
name|lastItem
decl_stmt|;
DECL|member|nItems
name|int
name|nItems
decl_stmt|;
DECL|member|logicalItem
name|int
name|logicalItem
decl_stmt|;
DECL|member|item
name|int
name|item
decl_stmt|;
DECL|member|itemLength
name|int
name|itemLength
decl_stmt|;
DECL|member|glyphsStart
name|int
name|glyphsStart
decl_stmt|;
DECL|member|glyphsEnd
name|int
name|glyphsEnd
decl_stmt|;
DECL|member|itemStart
name|int
name|itemStart
decl_stmt|;
DECL|member|itemEnd
name|int
name|itemEnd
decl_stmt|;
DECL|member|itemWidth
name|QFixed
name|itemWidth
decl_stmt|;
DECL|member|visualOrder
name|QVarLengthArray
operator|<
name|int
operator|>
name|visualOrder
expr_stmt|;
DECL|member|levels
name|QVarLengthArray
operator|<
name|uchar
operator|>
name|levels
expr_stmt|;
DECL|member|selection
specifier|const
name|QTextLayout
operator|::
name|FormatRange
operator|*
name|selection
expr_stmt|;
block|}
struct|;
end_struct
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QTEXTENGINE_P_H
end_comment
end_unit
