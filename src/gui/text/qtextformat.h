begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTEXTFORMAT_H
end_ifndef
begin_define
DECL|macro|QTEXTFORMAT_H
define|#
directive|define
name|QTEXTFORMAT_H
end_define
begin_include
include|#
directive|include
file|<QtGui/qcolor.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qfont.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qshareddata.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvector.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvariant.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpen.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qbrush.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qtextoption.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|variable|QString
name|class
name|QString
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QVariant
name|class
name|QVariant
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QFont
name|class
name|QFont
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextFormatCollection
name|class
name|QTextFormatCollection
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextFormatPrivate
name|class
name|QTextFormatPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextBlockFormat
name|class
name|QTextBlockFormat
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextCharFormat
name|class
name|QTextCharFormat
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextListFormat
name|class
name|QTextListFormat
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextTableFormat
name|class
name|QTextTableFormat
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextFrameFormat
name|class
name|QTextFrameFormat
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextImageFormat
name|class
name|QTextImageFormat
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextTableCellFormat
name|class
name|QTextTableCellFormat
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextFormat
name|class
name|QTextFormat
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextObject
name|class
name|QTextObject
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextCursor
name|class
name|QTextCursor
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextDocument
name|class
name|QTextDocument
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextLength
name|class
name|QTextLength
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_expr_stmt
name|Q_GUI_EXPORT
name|QDataStream
operator|&
name|operator
operator|<<
operator|(
name|QDataStream
operator|&
operator|,
specifier|const
name|QTextLength
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_GUI_EXPORT
name|QDataStream
operator|&
name|operator
operator|>>
operator|(
name|QDataStream
operator|&
operator|,
name|QTextLength
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_GUI_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QTextLength
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QTextLength
block|{
name|public
label|:
enum|enum
name|Type
block|{
name|VariableLength
init|=
literal|0
block|,
name|FixedLength
block|,
name|PercentageLength
block|}
enum|;
specifier|inline
name|QTextLength
argument_list|()
operator|:
name|lengthType
argument_list|(
name|VariableLength
argument_list|)
operator|,
name|fixedValueOrPercentage
argument_list|(
literal|0
argument_list|)
block|{}
specifier|inline
name|explicit
name|QTextLength
argument_list|(
argument|Type type
argument_list|,
argument|qreal value
argument_list|)
expr_stmt|;
specifier|inline
name|Type
name|type
argument_list|()
specifier|const
block|{
return|return
name|lengthType
return|;
block|}
specifier|inline
name|qreal
name|value
argument_list|(
name|qreal
name|maximumLength
argument_list|)
decl|const
block|{
switch|switch
condition|(
name|lengthType
condition|)
block|{
case|case
name|FixedLength
case|:
return|return
name|fixedValueOrPercentage
return|;
case|case
name|VariableLength
case|:
return|return
name|maximumLength
return|;
case|case
name|PercentageLength
case|:
return|return
name|fixedValueOrPercentage
operator|*
name|maximumLength
operator|/
name|qreal
argument_list|(
literal|100
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|inline
name|qreal
name|rawValue
argument_list|()
specifier|const
block|{
return|return
name|fixedValueOrPercentage
return|;
block|}
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QTextLength
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|lengthType
operator|==
name|other
operator|.
name|lengthType
operator|&&
name|qFuzzyCompare
argument_list|(
name|fixedValueOrPercentage
argument_list|,
name|other
operator|.
name|fixedValueOrPercentage
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QTextLength
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|lengthType
operator|!=
name|other
operator|.
name|lengthType
operator|||
operator|!
name|qFuzzyCompare
argument_list|(
name|fixedValueOrPercentage
argument_list|,
name|other
operator|.
name|fixedValueOrPercentage
argument_list|)
return|;
block|}
name|operator
name|QVariant
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|Type
name|lengthType
decl_stmt|;
name|qreal
name|fixedValueOrPercentage
decl_stmt|;
name|friend
name|Q_GUI_EXPORT
name|QDataStream
operator|&
name|operator
operator|<<
operator|(
name|QDataStream
operator|&
operator|,
specifier|const
name|QTextLength
operator|&
operator|)
expr_stmt|;
name|friend
name|Q_GUI_EXPORT
name|QDataStream
operator|&
name|operator
operator|>>
operator|(
name|QDataStream
operator|&
operator|,
name|QTextLength
operator|&
operator|)
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
DECL|function|QTextLength
specifier|inline
name|QTextLength
operator|::
name|QTextLength
argument_list|(
argument|Type atype
argument_list|,
argument|qreal avalue
argument_list|)
operator|:
name|lengthType
argument_list|(
name|atype
argument_list|)
operator|,
name|fixedValueOrPercentage
argument_list|(
argument|avalue
argument_list|)
block|{}
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
name|Q_GUI_EXPORT
name|QDataStream
operator|&
name|operator
operator|<<
operator|(
name|QDataStream
operator|&
operator|,
specifier|const
name|QTextFormat
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_GUI_EXPORT
name|QDataStream
operator|&
name|operator
operator|>>
operator|(
name|QDataStream
operator|&
operator|,
name|QTextFormat
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_GUI_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QTextFormat
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QTextFormat
block|{
name|Q_GADGET
name|Q_ENUMS
argument_list|(
name|FormatType
name|Property
name|ObjectTypes
argument_list|)
name|public
range|:     enum
name|FormatType
block|{
name|InvalidFormat
operator|=
operator|-
literal|1
block|,
name|BlockFormat
operator|=
literal|1
block|,
name|CharFormat
operator|=
literal|2
block|,
name|ListFormat
operator|=
literal|3
block|,
name|TableFormat
operator|=
literal|4
block|,
name|FrameFormat
operator|=
literal|5
block|,
name|UserFormat
operator|=
literal|100
block|}
decl_stmt|;
enum|enum
name|Property
block|{
name|ObjectIndex
init|=
literal|0x0
block|,
comment|// paragraph and char
name|CssFloat
init|=
literal|0x0800
block|,
name|LayoutDirection
init|=
literal|0x0801
block|,
name|OutlinePen
init|=
literal|0x810
block|,
name|BackgroundBrush
init|=
literal|0x820
block|,
name|ForegroundBrush
init|=
literal|0x821
block|,
comment|// Internal to qtextlayout.cpp: ObjectSelectionBrush = 0x822
name|BackgroundImageUrl
init|=
literal|0x823
block|,
comment|// paragraph
name|BlockAlignment
init|=
literal|0x1010
block|,
name|BlockTopMargin
init|=
literal|0x1030
block|,
name|BlockBottomMargin
init|=
literal|0x1031
block|,
name|BlockLeftMargin
init|=
literal|0x1032
block|,
name|BlockRightMargin
init|=
literal|0x1033
block|,
name|TextIndent
init|=
literal|0x1034
block|,
name|TabPositions
init|=
literal|0x1035
block|,
name|BlockIndent
init|=
literal|0x1040
block|,
name|LineHeight
init|=
literal|0x1048
block|,
name|LineHeightType
init|=
literal|0x1049
block|,
name|BlockNonBreakableLines
init|=
literal|0x1050
block|,
name|BlockTrailingHorizontalRulerWidth
init|=
literal|0x1060
block|,
comment|// character properties
name|FirstFontProperty
init|=
literal|0x1FE0
block|,
name|FontCapitalization
init|=
name|FirstFontProperty
block|,
name|FontLetterSpacingType
init|=
literal|0x2033
block|,
name|FontLetterSpacing
init|=
literal|0x1FE1
block|,
name|FontWordSpacing
init|=
literal|0x1FE2
block|,
name|FontStretch
init|=
literal|0x2034
block|,
name|FontStyleHint
init|=
literal|0x1FE3
block|,
name|FontStyleStrategy
init|=
literal|0x1FE4
block|,
name|FontKerning
init|=
literal|0x1FE5
block|,
name|FontHintingPreference
init|=
literal|0x1FE6
block|,
name|FontFamily
init|=
literal|0x2000
block|,
name|FontPointSize
init|=
literal|0x2001
block|,
name|FontSizeAdjustment
init|=
literal|0x2002
block|,
name|FontSizeIncrement
init|=
name|FontSizeAdjustment
block|,
comment|// old name, compat
name|FontWeight
init|=
literal|0x2003
block|,
name|FontItalic
init|=
literal|0x2004
block|,
name|FontUnderline
init|=
literal|0x2005
block|,
comment|// deprecated, use TextUnderlineStyle instead
name|FontOverline
init|=
literal|0x2006
block|,
name|FontStrikeOut
init|=
literal|0x2007
block|,
name|FontFixedPitch
init|=
literal|0x2008
block|,
name|FontPixelSize
init|=
literal|0x2009
block|,
name|LastFontProperty
init|=
name|FontPixelSize
block|,
name|TextUnderlineColor
init|=
literal|0x2010
block|,
name|TextVerticalAlignment
init|=
literal|0x2021
block|,
name|TextOutline
init|=
literal|0x2022
block|,
name|TextUnderlineStyle
init|=
literal|0x2023
block|,
name|TextToolTip
init|=
literal|0x2024
block|,
name|IsAnchor
init|=
literal|0x2030
block|,
name|AnchorHref
init|=
literal|0x2031
block|,
name|AnchorName
init|=
literal|0x2032
block|,
name|ObjectType
init|=
literal|0x2f00
block|,
comment|// list properties
name|ListStyle
init|=
literal|0x3000
block|,
name|ListIndent
init|=
literal|0x3001
block|,
name|ListNumberPrefix
init|=
literal|0x3002
block|,
name|ListNumberSuffix
init|=
literal|0x3003
block|,
comment|// table and frame properties
name|FrameBorder
init|=
literal|0x4000
block|,
name|FrameMargin
init|=
literal|0x4001
block|,
name|FramePadding
init|=
literal|0x4002
block|,
name|FrameWidth
init|=
literal|0x4003
block|,
name|FrameHeight
init|=
literal|0x4004
block|,
name|FrameTopMargin
init|=
literal|0x4005
block|,
name|FrameBottomMargin
init|=
literal|0x4006
block|,
name|FrameLeftMargin
init|=
literal|0x4007
block|,
name|FrameRightMargin
init|=
literal|0x4008
block|,
name|FrameBorderBrush
init|=
literal|0x4009
block|,
name|FrameBorderStyle
init|=
literal|0x4010
block|,
name|TableColumns
init|=
literal|0x4100
block|,
name|TableColumnWidthConstraints
init|=
literal|0x4101
block|,
name|TableCellSpacing
init|=
literal|0x4102
block|,
name|TableCellPadding
init|=
literal|0x4103
block|,
name|TableHeaderRowCount
init|=
literal|0x4104
block|,
comment|// table cell properties
name|TableCellRowSpan
init|=
literal|0x4810
block|,
name|TableCellColumnSpan
init|=
literal|0x4811
block|,
name|TableCellTopPadding
init|=
literal|0x4812
block|,
name|TableCellBottomPadding
init|=
literal|0x4813
block|,
name|TableCellLeftPadding
init|=
literal|0x4814
block|,
name|TableCellRightPadding
init|=
literal|0x4815
block|,
comment|// image properties
name|ImageName
init|=
literal|0x5000
block|,
name|ImageWidth
init|=
literal|0x5010
block|,
name|ImageHeight
init|=
literal|0x5011
block|,
comment|// internal
comment|/*            SuppressText = 0x5012,            SuppressBackground = 0x513         */
comment|// selection properties
name|FullWidthSelection
init|=
literal|0x06000
block|,
comment|// page break properties
name|PageBreakPolicy
init|=
literal|0x7000
block|,
comment|// --
name|UserProperty
init|=
literal|0x100000
block|}
enum|;
enum|enum
name|ObjectTypes
block|{
name|NoObject
block|,
name|ImageObject
block|,
name|TableObject
block|,
name|TableCellObject
block|,
name|UserObject
init|=
literal|0x1000
block|}
enum|;
enum|enum
name|PageBreakFlag
block|{
name|PageBreak_Auto
init|=
literal|0
block|,
name|PageBreak_AlwaysBefore
init|=
literal|0x001
block|,
name|PageBreak_AlwaysAfter
init|=
literal|0x010
comment|// PageBreak_AlwaysInside = 0x100
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|PageBreakFlags
argument_list|,
argument|PageBreakFlag
argument_list|)
name|QTextFormat
argument_list|()
expr_stmt|;
name|explicit
name|QTextFormat
parameter_list|(
name|int
name|type
parameter_list|)
function_decl|;
name|QTextFormat
argument_list|(
specifier|const
name|QTextFormat
operator|&
name|rhs
argument_list|)
expr_stmt|;
name|QTextFormat
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QTextFormat
operator|&
name|rhs
operator|)
decl_stmt|;
operator|~
name|QTextFormat
argument_list|()
expr_stmt|;
name|void
name|swap
parameter_list|(
name|QTextFormat
modifier|&
name|other
parameter_list|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|format_type
argument_list|,
name|other
operator|.
name|format_type
argument_list|)
expr_stmt|;
block|}
name|void
name|merge
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|other
parameter_list|)
function_decl|;
specifier|inline
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|type
argument_list|()
operator|!=
name|InvalidFormat
return|;
block|}
name|int
name|type
argument_list|()
specifier|const
expr_stmt|;
name|int
name|objectIndex
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setObjectIndex
parameter_list|(
name|int
name|object
parameter_list|)
function_decl|;
name|QVariant
name|property
argument_list|(
name|int
name|propertyId
argument_list|)
decl|const
decl_stmt|;
name|void
name|setProperty
parameter_list|(
name|int
name|propertyId
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
function_decl|;
name|void
name|clearProperty
parameter_list|(
name|int
name|propertyId
parameter_list|)
function_decl|;
name|bool
name|hasProperty
argument_list|(
name|int
name|propertyId
argument_list|)
decl|const
decl_stmt|;
name|bool
name|boolProperty
argument_list|(
name|int
name|propertyId
argument_list|)
decl|const
decl_stmt|;
name|int
name|intProperty
argument_list|(
name|int
name|propertyId
argument_list|)
decl|const
decl_stmt|;
name|qreal
name|doubleProperty
argument_list|(
name|int
name|propertyId
argument_list|)
decl|const
decl_stmt|;
name|QString
name|stringProperty
argument_list|(
name|int
name|propertyId
argument_list|)
decl|const
decl_stmt|;
name|QColor
name|colorProperty
argument_list|(
name|int
name|propertyId
argument_list|)
decl|const
decl_stmt|;
name|QPen
name|penProperty
argument_list|(
name|int
name|propertyId
argument_list|)
decl|const
decl_stmt|;
name|QBrush
name|brushProperty
argument_list|(
name|int
name|propertyId
argument_list|)
decl|const
decl_stmt|;
name|QTextLength
name|lengthProperty
argument_list|(
name|int
name|propertyId
argument_list|)
decl|const
decl_stmt|;
name|QVector
operator|<
name|QTextLength
operator|>
name|lengthVectorProperty
argument_list|(
argument|int propertyId
argument_list|)
specifier|const
expr_stmt|;
name|void
name|setProperty
argument_list|(
name|int
name|propertyId
argument_list|,
specifier|const
name|QVector
operator|<
name|QTextLength
operator|>
operator|&
name|lengths
argument_list|)
decl_stmt|;
name|QMap
operator|<
name|int
operator|,
name|QVariant
operator|>
name|properties
argument_list|()
specifier|const
expr_stmt|;
name|int
name|propertyCount
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|void
name|setObjectType
parameter_list|(
name|int
name|type
parameter_list|)
function_decl|;
specifier|inline
name|int
name|objectType
argument_list|()
specifier|const
block|{
return|return
name|intProperty
argument_list|(
name|ObjectType
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|isCharFormat
argument_list|()
specifier|const
block|{
return|return
name|type
argument_list|()
operator|==
name|CharFormat
return|;
block|}
specifier|inline
name|bool
name|isBlockFormat
argument_list|()
specifier|const
block|{
return|return
name|type
argument_list|()
operator|==
name|BlockFormat
return|;
block|}
specifier|inline
name|bool
name|isListFormat
argument_list|()
specifier|const
block|{
return|return
name|type
argument_list|()
operator|==
name|ListFormat
return|;
block|}
specifier|inline
name|bool
name|isFrameFormat
argument_list|()
specifier|const
block|{
return|return
name|type
argument_list|()
operator|==
name|FrameFormat
return|;
block|}
specifier|inline
name|bool
name|isImageFormat
argument_list|()
specifier|const
block|{
return|return
name|type
argument_list|()
operator|==
name|CharFormat
operator|&&
name|objectType
argument_list|()
operator|==
name|ImageObject
return|;
block|}
specifier|inline
name|bool
name|isTableFormat
argument_list|()
specifier|const
block|{
return|return
name|type
argument_list|()
operator|==
name|FrameFormat
operator|&&
name|objectType
argument_list|()
operator|==
name|TableObject
return|;
block|}
specifier|inline
name|bool
name|isTableCellFormat
argument_list|()
specifier|const
block|{
return|return
name|type
argument_list|()
operator|==
name|CharFormat
operator|&&
name|objectType
argument_list|()
operator|==
name|TableCellObject
return|;
block|}
name|QTextBlockFormat
name|toBlockFormat
argument_list|()
specifier|const
expr_stmt|;
name|QTextCharFormat
name|toCharFormat
argument_list|()
specifier|const
expr_stmt|;
name|QTextListFormat
name|toListFormat
argument_list|()
specifier|const
expr_stmt|;
name|QTextTableFormat
name|toTableFormat
argument_list|()
specifier|const
expr_stmt|;
name|QTextFrameFormat
name|toFrameFormat
argument_list|()
specifier|const
expr_stmt|;
name|QTextImageFormat
name|toImageFormat
argument_list|()
specifier|const
expr_stmt|;
name|QTextTableCellFormat
name|toTableCellFormat
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QTextFormat
operator|&
name|rhs
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QTextFormat
operator|&
name|rhs
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|rhs
operator|)
return|;
block|}
name|operator
name|QVariant
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|void
name|setLayoutDirection
argument_list|(
name|Qt
operator|::
name|LayoutDirection
name|direction
argument_list|)
block|{
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|LayoutDirection
argument_list|,
name|direction
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|Qt
operator|::
name|LayoutDirection
name|layoutDirection
argument_list|()
specifier|const
block|{
return|return
name|Qt
operator|::
name|LayoutDirection
argument_list|(
name|intProperty
argument_list|(
name|QTextFormat
operator|::
name|LayoutDirection
argument_list|)
argument_list|)
return|;
block|}
specifier|inline
name|void
name|setBackground
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
name|setProperty
argument_list|(
name|BackgroundBrush
argument_list|,
name|brush
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|QBrush
name|background
argument_list|()
specifier|const
block|{
return|return
name|brushProperty
argument_list|(
name|BackgroundBrush
argument_list|)
return|;
block|}
specifier|inline
name|void
name|clearBackground
parameter_list|()
block|{
name|clearProperty
argument_list|(
name|BackgroundBrush
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|setForeground
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
name|setProperty
argument_list|(
name|ForegroundBrush
argument_list|,
name|brush
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|QBrush
name|foreground
argument_list|()
specifier|const
block|{
return|return
name|brushProperty
argument_list|(
name|ForegroundBrush
argument_list|)
return|;
block|}
specifier|inline
name|void
name|clearForeground
parameter_list|()
block|{
name|clearProperty
argument_list|(
name|ForegroundBrush
argument_list|)
expr_stmt|;
block|}
name|private
label|:
name|QSharedDataPointer
operator|<
name|QTextFormatPrivate
operator|>
name|d
expr_stmt|;
name|qint32
name|format_type
decl_stmt|;
name|friend
name|class
name|QTextFormatCollection
decl_stmt|;
name|friend
name|class
name|QTextCharFormat
decl_stmt|;
name|friend
name|Q_GUI_EXPORT
name|QDataStream
operator|&
name|operator
operator|<<
operator|(
name|QDataStream
operator|&
operator|,
specifier|const
name|QTextFormat
operator|&
operator|)
expr_stmt|;
name|friend
name|Q_GUI_EXPORT
name|QDataStream
operator|&
name|operator
operator|>>
operator|(
name|QDataStream
operator|&
operator|,
name|QTextFormat
operator|&
operator|)
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
DECL|function|Q_DECLARE_SHARED
name|Q_DECLARE_SHARED
argument_list|(
argument|QTextFormat
argument_list|)
end_macro
begin_expr_stmt
specifier|inline
name|void
name|QTextFormat
operator|::
name|setObjectType
argument_list|(
argument|int atype
argument_list|)
block|{
name|setProperty
argument_list|(
name|ObjectType
argument_list|,
name|atype
argument_list|)
block|; }
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QTextFormat::PageBreakFlags
argument_list|)
name|class
name|Q_GUI_EXPORT
name|QTextCharFormat
operator|:
name|public
name|QTextFormat
block|{
name|public
operator|:
expr|enum
name|VerticalAlignment
block|{
name|AlignNormal
operator|=
literal|0
block|,
name|AlignSuperScript
block|,
name|AlignSubScript
block|,
name|AlignMiddle
block|,
name|AlignTop
block|,
name|AlignBottom
block|,
name|AlignBaseline
block|}
block|;     enum
name|UnderlineStyle
block|{
comment|// keep in sync with Qt::PenStyle!
name|NoUnderline
block|,
name|SingleUnderline
block|,
name|DashUnderline
block|,
name|DotLine
block|,
name|DashDotLine
block|,
name|DashDotDotLine
block|,
name|WaveUnderline
block|,
name|SpellCheckUnderline
block|}
block|;
name|QTextCharFormat
argument_list|()
block|;
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|isCharFormat
argument_list|()
return|;
block|}
name|void
name|setFont
argument_list|(
specifier|const
name|QFont
operator|&
name|font
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QFont
name|font
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function
specifier|inline
name|void
name|setFontFamily
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|)
block|{
name|setProperty
argument_list|(
name|FontFamily
argument_list|,
name|family
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|QString
name|fontFamily
argument_list|()
specifier|const
block|{
return|return
name|stringProperty
argument_list|(
name|FontFamily
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setFontPointSize
parameter_list|(
name|qreal
name|size
parameter_list|)
block|{
name|setProperty
argument_list|(
name|FontPointSize
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|qreal
name|fontPointSize
argument_list|()
specifier|const
block|{
return|return
name|doubleProperty
argument_list|(
name|FontPointSize
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setFontWeight
parameter_list|(
name|int
name|weight
parameter_list|)
block|{
if|if
condition|(
name|weight
operator|==
name|QFont
operator|::
name|Normal
condition|)
name|weight
operator|=
literal|0
expr_stmt|;
name|setProperty
argument_list|(
name|FontWeight
argument_list|,
name|weight
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|int
name|fontWeight
argument_list|()
specifier|const
block|{
name|int
name|weight
operator|=
name|intProperty
argument_list|(
name|FontWeight
argument_list|)
block|;
if|if
condition|(
name|weight
operator|==
literal|0
condition|)
name|weight
operator|=
name|QFont
operator|::
name|Normal
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|weight
return|;
end_return
begin_function
unit|}     inline
name|void
name|setFontItalic
parameter_list|(
name|bool
name|italic
parameter_list|)
block|{
name|setProperty
argument_list|(
name|FontItalic
argument_list|,
name|italic
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|bool
name|fontItalic
argument_list|()
specifier|const
block|{
return|return
name|boolProperty
argument_list|(
name|FontItalic
argument_list|)
return|;
block|}
end_expr_stmt
begin_decl_stmt
specifier|inline
name|void
name|setFontCapitalization
argument_list|(
name|QFont
operator|::
name|Capitalization
name|capitalization
argument_list|)
block|{
name|setProperty
argument_list|(
name|FontCapitalization
argument_list|,
name|capitalization
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|QFont
operator|::
name|Capitalization
name|fontCapitalization
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|QFont
operator|::
name|Capitalization
operator|>
operator|(
name|intProperty
argument_list|(
name|FontCapitalization
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_decl_stmt
specifier|inline
name|void
name|setFontLetterSpacingType
argument_list|(
name|QFont
operator|::
name|SpacingType
name|letterSpacingType
argument_list|)
block|{
name|setProperty
argument_list|(
name|FontLetterSpacingType
argument_list|,
name|letterSpacingType
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|QFont
operator|::
name|SpacingType
name|fontLetterSpacingType
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|QFont
operator|::
name|SpacingType
operator|>
operator|(
name|intProperty
argument_list|(
name|FontLetterSpacingType
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setFontLetterSpacing
parameter_list|(
name|qreal
name|spacing
parameter_list|)
block|{
name|setProperty
argument_list|(
name|FontLetterSpacing
argument_list|,
name|spacing
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|qreal
name|fontLetterSpacing
argument_list|()
specifier|const
block|{
return|return
name|doubleProperty
argument_list|(
name|FontLetterSpacing
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setFontWordSpacing
parameter_list|(
name|qreal
name|spacing
parameter_list|)
block|{
name|setProperty
argument_list|(
name|FontWordSpacing
argument_list|,
name|spacing
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|qreal
name|fontWordSpacing
argument_list|()
specifier|const
block|{
return|return
name|doubleProperty
argument_list|(
name|FontWordSpacing
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setFontUnderline
parameter_list|(
name|bool
name|underline
parameter_list|)
block|{
name|setProperty
argument_list|(
name|TextUnderlineStyle
argument_list|,
name|underline
condition|?
name|SingleUnderline
else|:
name|NoUnderline
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|bool
name|fontUnderline
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function
specifier|inline
name|void
name|setFontOverline
parameter_list|(
name|bool
name|overline
parameter_list|)
block|{
name|setProperty
argument_list|(
name|FontOverline
argument_list|,
name|overline
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|bool
name|fontOverline
argument_list|()
specifier|const
block|{
return|return
name|boolProperty
argument_list|(
name|FontOverline
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setFontStrikeOut
parameter_list|(
name|bool
name|strikeOut
parameter_list|)
block|{
name|setProperty
argument_list|(
name|FontStrikeOut
argument_list|,
name|strikeOut
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|bool
name|fontStrikeOut
argument_list|()
specifier|const
block|{
return|return
name|boolProperty
argument_list|(
name|FontStrikeOut
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setUnderlineColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|setProperty
argument_list|(
name|TextUnderlineColor
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|QColor
name|underlineColor
argument_list|()
specifier|const
block|{
return|return
name|colorProperty
argument_list|(
name|TextUnderlineColor
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setFontFixedPitch
parameter_list|(
name|bool
name|fixedPitch
parameter_list|)
block|{
name|setProperty
argument_list|(
name|FontFixedPitch
argument_list|,
name|fixedPitch
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|bool
name|fontFixedPitch
argument_list|()
specifier|const
block|{
return|return
name|boolProperty
argument_list|(
name|FontFixedPitch
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setFontStretch
parameter_list|(
name|int
name|factor
parameter_list|)
block|{
name|setProperty
argument_list|(
name|FontStretch
argument_list|,
name|factor
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|int
name|fontStretch
argument_list|()
specifier|const
block|{
return|return
name|intProperty
argument_list|(
name|FontStretch
argument_list|)
return|;
block|}
end_expr_stmt
begin_decl_stmt
specifier|inline
name|void
name|setFontStyleHint
argument_list|(
name|QFont
operator|::
name|StyleHint
name|hint
argument_list|,
name|QFont
operator|::
name|StyleStrategy
name|strategy
operator|=
name|QFont
operator|::
name|PreferDefault
argument_list|)
block|{
name|setProperty
argument_list|(
name|FontStyleHint
argument_list|,
name|hint
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|FontStyleStrategy
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|void
name|setFontStyleStrategy
argument_list|(
name|QFont
operator|::
name|StyleStrategy
name|strategy
argument_list|)
block|{
name|setProperty
argument_list|(
name|FontStyleStrategy
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
name|QFont
operator|::
name|StyleHint
name|fontStyleHint
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|QFont
operator|::
name|StyleHint
operator|>
operator|(
name|intProperty
argument_list|(
name|FontStyleHint
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QFont
operator|::
name|StyleStrategy
name|fontStyleStrategy
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|QFont
operator|::
name|StyleStrategy
operator|>
operator|(
name|intProperty
argument_list|(
name|FontStyleStrategy
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_decl_stmt
specifier|inline
name|void
name|setFontHintingPreference
argument_list|(
name|QFont
operator|::
name|HintingPreference
name|hintingPreference
argument_list|)
block|{
name|setProperty
argument_list|(
name|FontHintingPreference
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|QFont
operator|::
name|HintingPreference
name|fontHintingPreference
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|QFont
operator|::
name|HintingPreference
operator|>
operator|(
name|intProperty
argument_list|(
name|FontHintingPreference
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setFontKerning
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|setProperty
argument_list|(
name|FontKerning
argument_list|,
name|enable
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|bool
name|fontKerning
argument_list|()
specifier|const
block|{
return|return
name|boolProperty
argument_list|(
name|FontKerning
argument_list|)
return|;
block|}
end_expr_stmt
begin_function_decl
name|void
name|setUnderlineStyle
parameter_list|(
name|UnderlineStyle
name|style
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
specifier|inline
name|UnderlineStyle
name|underlineStyle
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|UnderlineStyle
operator|>
operator|(
name|intProperty
argument_list|(
name|TextUnderlineStyle
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setVerticalAlignment
parameter_list|(
name|VerticalAlignment
name|alignment
parameter_list|)
block|{
name|setProperty
argument_list|(
name|TextVerticalAlignment
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|VerticalAlignment
name|verticalAlignment
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|VerticalAlignment
operator|>
operator|(
name|intProperty
argument_list|(
name|TextVerticalAlignment
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setTextOutline
parameter_list|(
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
name|setProperty
argument_list|(
name|TextOutline
argument_list|,
name|pen
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|QPen
name|textOutline
argument_list|()
specifier|const
block|{
return|return
name|penProperty
argument_list|(
name|TextOutline
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setToolTip
parameter_list|(
specifier|const
name|QString
modifier|&
name|tip
parameter_list|)
block|{
name|setProperty
argument_list|(
name|TextToolTip
argument_list|,
name|tip
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|QString
name|toolTip
argument_list|()
specifier|const
block|{
return|return
name|stringProperty
argument_list|(
name|TextToolTip
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setAnchor
parameter_list|(
name|bool
name|anchor
parameter_list|)
block|{
name|setProperty
argument_list|(
name|IsAnchor
argument_list|,
name|anchor
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|bool
name|isAnchor
argument_list|()
specifier|const
block|{
return|return
name|boolProperty
argument_list|(
name|IsAnchor
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setAnchorHref
parameter_list|(
specifier|const
name|QString
modifier|&
name|value
parameter_list|)
block|{
name|setProperty
argument_list|(
name|AnchorHref
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|QString
name|anchorHref
argument_list|()
specifier|const
block|{
return|return
name|stringProperty
argument_list|(
name|AnchorHref
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setAnchorName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|setAnchorNames
argument_list|(
name|QStringList
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|QString
name|anchorName
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function
specifier|inline
name|void
name|setAnchorNames
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|names
parameter_list|)
block|{
name|setProperty
argument_list|(
name|AnchorName
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|QStringList
name|anchorNames
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|inline
name|void
name|setTableCellRowSpan
parameter_list|(
name|int
name|tableCellRowSpan
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
specifier|inline
name|int
name|tableCellRowSpan
argument_list|()
specifier|const
block|{
name|int
name|s
operator|=
name|intProperty
argument_list|(
name|TableCellRowSpan
argument_list|)
block|;
if|if
condition|(
name|s
operator|==
literal|0
condition|)
name|s
operator|=
literal|1
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|s
return|;
end_return
begin_function_decl
unit|}     inline
name|void
name|setTableCellColumnSpan
parameter_list|(
name|int
name|tableCellColumnSpan
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
specifier|inline
name|int
name|tableCellColumnSpan
argument_list|()
specifier|const
block|{
name|int
name|s
operator|=
name|intProperty
argument_list|(
name|TableCellColumnSpan
argument_list|)
block|;
if|if
condition|(
name|s
operator|==
literal|0
condition|)
name|s
operator|=
literal|1
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|s
return|;
end_return
begin_function_decl
unit|}  protected:
name|explicit
name|QTextCharFormat
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|fmt
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|friend
name|class
name|QTextFormat
decl_stmt|;
end_decl_stmt
begin_macro
unit|};
DECL|function|Q_DECLARE_SHARED
name|Q_DECLARE_SHARED
argument_list|(
argument|QTextCharFormat
argument_list|)
end_macro
begin_expr_stmt
specifier|inline
name|void
name|QTextCharFormat
operator|::
name|setTableCellRowSpan
argument_list|(
argument|int _tableCellRowSpan
argument_list|)
block|{
if|if
condition|(
name|_tableCellRowSpan
operator|<=
literal|1
condition|)
name|clearProperty
argument_list|(
name|TableCellRowSpan
argument_list|)
expr_stmt|;
comment|// the getter will return 1 here.
else|else
name|setProperty
argument_list|(
name|TableCellRowSpan
argument_list|,
name|_tableCellRowSpan
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|setTableCellColumnSpan
specifier|inline
name|void
name|QTextCharFormat
operator|::
name|setTableCellColumnSpan
argument_list|(
argument|int _tableCellColumnSpan
argument_list|)
block|{
if|if
condition|(
name|_tableCellColumnSpan
operator|<=
literal|1
condition|)
name|clearProperty
argument_list|(
name|TableCellColumnSpan
argument_list|)
expr_stmt|;
comment|// the getter will return 1 here.
else|else
name|setProperty
argument_list|(
name|TableCellColumnSpan
argument_list|,
name|_tableCellColumnSpan
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QTextBlockFormat
range|:
name|public
name|QTextFormat
block|{
name|public
operator|:
expr|enum
name|LineHeightTypes
block|{
name|SingleHeight
operator|=
literal|0
block|,
name|ProportionalHeight
operator|=
literal|1
block|,
name|FixedHeight
operator|=
literal|2
block|,
name|MinimumHeight
operator|=
literal|3
block|,
name|LineDistanceHeight
operator|=
literal|4
block|}
block|;
name|QTextBlockFormat
argument_list|()
block|;
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|isBlockFormat
argument_list|()
return|;
block|}
specifier|inline
name|void
name|setAlignment
argument_list|(
argument|Qt::Alignment alignment
argument_list|)
block|;
specifier|inline
name|Qt
operator|::
name|Alignment
name|alignment
argument_list|()
specifier|const
block|{
name|int
name|a
operator|=
name|intProperty
argument_list|(
name|BlockAlignment
argument_list|)
block|;
if|if
condition|(
name|a
operator|==
literal|0
condition|)
name|a
operator|=
name|Qt
operator|::
name|AlignLeft
expr_stmt|;
return|return
name|QFlag
argument_list|(
name|a
argument_list|)
return|;
block|}
end_decl_stmt
begin_function
specifier|inline
name|void
name|setTopMargin
parameter_list|(
name|qreal
name|margin
parameter_list|)
block|{
name|setProperty
argument_list|(
name|BlockTopMargin
argument_list|,
name|margin
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|qreal
name|topMargin
argument_list|()
specifier|const
block|{
return|return
name|doubleProperty
argument_list|(
name|BlockTopMargin
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setBottomMargin
parameter_list|(
name|qreal
name|margin
parameter_list|)
block|{
name|setProperty
argument_list|(
name|BlockBottomMargin
argument_list|,
name|margin
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|qreal
name|bottomMargin
argument_list|()
specifier|const
block|{
return|return
name|doubleProperty
argument_list|(
name|BlockBottomMargin
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setLeftMargin
parameter_list|(
name|qreal
name|margin
parameter_list|)
block|{
name|setProperty
argument_list|(
name|BlockLeftMargin
argument_list|,
name|margin
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|qreal
name|leftMargin
argument_list|()
specifier|const
block|{
return|return
name|doubleProperty
argument_list|(
name|BlockLeftMargin
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setRightMargin
parameter_list|(
name|qreal
name|margin
parameter_list|)
block|{
name|setProperty
argument_list|(
name|BlockRightMargin
argument_list|,
name|margin
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|qreal
name|rightMargin
argument_list|()
specifier|const
block|{
return|return
name|doubleProperty
argument_list|(
name|BlockRightMargin
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setTextIndent
parameter_list|(
name|qreal
name|aindent
parameter_list|)
block|{
name|setProperty
argument_list|(
name|TextIndent
argument_list|,
name|aindent
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|qreal
name|textIndent
argument_list|()
specifier|const
block|{
return|return
name|doubleProperty
argument_list|(
name|TextIndent
argument_list|)
return|;
block|}
end_expr_stmt
begin_function_decl
specifier|inline
name|void
name|setIndent
parameter_list|(
name|int
name|indent
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
specifier|inline
name|int
name|indent
argument_list|()
specifier|const
block|{
return|return
name|intProperty
argument_list|(
name|BlockIndent
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setLineHeight
parameter_list|(
name|qreal
name|height
parameter_list|,
name|int
name|heightType
parameter_list|)
block|{
name|setProperty
argument_list|(
name|LineHeight
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|LineHeightType
argument_list|,
name|heightType
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
specifier|inline
name|qreal
name|lineHeight
argument_list|(
name|qreal
name|scriptLineHeight
argument_list|,
name|qreal
name|scaling
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
specifier|inline
name|qreal
name|lineHeight
argument_list|()
specifier|const
block|{
return|return
name|doubleProperty
argument_list|(
name|LineHeight
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|lineHeightType
argument_list|()
specifier|const
block|{
return|return
name|intProperty
argument_list|(
name|LineHeightType
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setNonBreakableLines
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|setProperty
argument_list|(
name|BlockNonBreakableLines
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|bool
name|nonBreakableLines
argument_list|()
specifier|const
block|{
return|return
name|boolProperty
argument_list|(
name|BlockNonBreakableLines
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setPageBreakPolicy
parameter_list|(
name|PageBreakFlags
name|flags
parameter_list|)
block|{
name|setProperty
argument_list|(
name|PageBreakPolicy
argument_list|,
name|int
argument_list|(
name|flags
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|PageBreakFlags
name|pageBreakPolicy
argument_list|()
specifier|const
block|{
return|return
name|PageBreakFlags
argument_list|(
name|intProperty
argument_list|(
name|PageBreakPolicy
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|void
name|setTabPositions
argument_list|(
specifier|const
name|QList
operator|<
name|QTextOption
operator|::
name|Tab
operator|>
operator|&
name|tabs
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QList
operator|<
name|QTextOption
operator|::
name|Tab
operator|>
name|tabPositions
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_label
name|protected
label|:
end_label
begin_function_decl
name|explicit
name|QTextBlockFormat
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|fmt
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|friend
name|class
name|QTextFormat
decl_stmt|;
end_decl_stmt
begin_macro
unit|};
DECL|function|Q_DECLARE_SHARED
name|Q_DECLARE_SHARED
argument_list|(
argument|QTextBlockFormat
argument_list|)
end_macro
begin_expr_stmt
specifier|inline
name|void
name|QTextBlockFormat
operator|::
name|setAlignment
argument_list|(
argument|Qt::Alignment aalignment
argument_list|)
block|{
name|setProperty
argument_list|(
name|BlockAlignment
argument_list|,
name|int
argument_list|(
name|aalignment
argument_list|)
argument_list|)
block|; }
DECL|function|setIndent
specifier|inline
name|void
name|QTextBlockFormat
operator|::
name|setIndent
argument_list|(
argument|int aindent
argument_list|)
block|{
name|setProperty
argument_list|(
name|BlockIndent
argument_list|,
name|aindent
argument_list|)
block|; }
DECL|function|lineHeight
specifier|inline
name|qreal
name|QTextBlockFormat
operator|::
name|lineHeight
argument_list|(
argument|qreal scriptLineHeight
argument_list|,
argument|qreal scaling =
literal|1.0
argument_list|)
specifier|const
block|{
switch|switch
condition|(
name|intProperty
argument_list|(
name|LineHeightType
argument_list|)
condition|)
block|{
case|case
name|SingleHeight
case|:
return|return
operator|(
name|scriptLineHeight
operator|)
return|;
case|case
name|ProportionalHeight
case|:
return|return
operator|(
name|scriptLineHeight
operator|*
name|doubleProperty
argument_list|(
name|LineHeight
argument_list|)
operator|/
literal|100.0
operator|)
return|;
case|case
name|FixedHeight
case|:
return|return
operator|(
name|doubleProperty
argument_list|(
name|LineHeight
argument_list|)
operator|*
name|scaling
operator|)
return|;
case|case
name|MinimumHeight
case|:
return|return
operator|(
name|qMax
argument_list|(
name|scriptLineHeight
argument_list|,
name|doubleProperty
argument_list|(
name|LineHeight
argument_list|)
operator|*
name|scaling
argument_list|)
operator|)
return|;
case|case
name|LineDistanceHeight
case|:
return|return
operator|(
name|scriptLineHeight
operator|+
name|doubleProperty
argument_list|(
name|LineHeight
argument_list|)
operator|*
name|scaling
operator|)
return|;
block|}
end_expr_stmt
begin_return
return|return
operator|(
literal|0
operator|)
return|;
end_return
begin_decl_stmt
unit|}  class
name|Q_GUI_EXPORT
name|QTextListFormat
range|:
name|public
name|QTextFormat
block|{
name|public
operator|:
name|QTextListFormat
argument_list|()
block|;
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|isListFormat
argument_list|()
return|;
block|}
expr|enum
name|Style
block|{
name|ListDisc
operator|=
operator|-
literal|1
block|,
name|ListCircle
operator|=
operator|-
literal|2
block|,
name|ListSquare
operator|=
operator|-
literal|3
block|,
name|ListDecimal
operator|=
operator|-
literal|4
block|,
name|ListLowerAlpha
operator|=
operator|-
literal|5
block|,
name|ListUpperAlpha
operator|=
operator|-
literal|6
block|,
name|ListLowerRoman
operator|=
operator|-
literal|7
block|,
name|ListUpperRoman
operator|=
operator|-
literal|8
block|,
name|ListStyleUndefined
operator|=
literal|0
block|}
block|;
specifier|inline
name|void
name|setStyle
argument_list|(
argument|Style style
argument_list|)
block|;
specifier|inline
name|Style
name|style
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|Style
operator|>
operator|(
name|intProperty
argument_list|(
name|ListStyle
argument_list|)
operator|)
return|;
block|}
specifier|inline
name|void
name|setIndent
argument_list|(
argument|int indent
argument_list|)
block|;
specifier|inline
name|int
name|indent
argument_list|()
specifier|const
block|{
return|return
name|intProperty
argument_list|(
name|ListIndent
argument_list|)
return|;
block|}
specifier|inline
name|void
name|setNumberPrefix
argument_list|(
specifier|const
name|QString
operator|&
name|numberPrefix
argument_list|)
block|;
specifier|inline
name|QString
name|numberPrefix
argument_list|()
specifier|const
block|{
return|return
name|stringProperty
argument_list|(
name|ListNumberPrefix
argument_list|)
return|;
block|}
specifier|inline
name|void
name|setNumberSuffix
argument_list|(
specifier|const
name|QString
operator|&
name|numberSuffix
argument_list|)
block|;
specifier|inline
name|QString
name|numberSuffix
argument_list|()
specifier|const
block|{
return|return
name|stringProperty
argument_list|(
name|ListNumberSuffix
argument_list|)
return|;
block|}
name|protected
operator|:
name|explicit
name|QTextListFormat
argument_list|(
specifier|const
name|QTextFormat
operator|&
name|fmt
argument_list|)
block|;
name|friend
name|class
name|QTextFormat
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
DECL|function|Q_DECLARE_SHARED
name|Q_DECLARE_SHARED
argument_list|(
argument|QTextListFormat
argument_list|)
end_macro
begin_expr_stmt
specifier|inline
name|void
name|QTextListFormat
operator|::
name|setStyle
argument_list|(
argument|Style astyle
argument_list|)
block|{
name|setProperty
argument_list|(
name|ListStyle
argument_list|,
name|astyle
argument_list|)
block|; }
DECL|function|setIndent
specifier|inline
name|void
name|QTextListFormat
operator|::
name|setIndent
argument_list|(
argument|int aindent
argument_list|)
block|{
name|setProperty
argument_list|(
name|ListIndent
argument_list|,
name|aindent
argument_list|)
block|; }
DECL|function|setNumberPrefix
specifier|inline
name|void
name|QTextListFormat
operator|::
name|setNumberPrefix
argument_list|(
argument|const QString&np
argument_list|)
block|{
name|setProperty
argument_list|(
name|ListNumberPrefix
argument_list|,
name|np
argument_list|)
block|; }
DECL|function|setNumberSuffix
specifier|inline
name|void
name|QTextListFormat
operator|::
name|setNumberSuffix
argument_list|(
argument|const QString&ns
argument_list|)
block|{
name|setProperty
argument_list|(
name|ListNumberSuffix
argument_list|,
name|ns
argument_list|)
block|; }
name|class
name|Q_GUI_EXPORT
name|QTextImageFormat
operator|:
name|public
name|QTextCharFormat
block|{
name|public
operator|:
name|QTextImageFormat
argument_list|()
block|;
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|isImageFormat
argument_list|()
return|;
block|}
specifier|inline
name|void
name|setName
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
name|name
argument_list|()
specifier|const
block|{
return|return
name|stringProperty
argument_list|(
name|ImageName
argument_list|)
return|;
block|}
end_expr_stmt
begin_function_decl
specifier|inline
name|void
name|setWidth
parameter_list|(
name|qreal
name|width
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
specifier|inline
name|qreal
name|width
argument_list|()
specifier|const
block|{
return|return
name|doubleProperty
argument_list|(
name|ImageWidth
argument_list|)
return|;
block|}
end_expr_stmt
begin_function_decl
specifier|inline
name|void
name|setHeight
parameter_list|(
name|qreal
name|height
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
specifier|inline
name|qreal
name|height
argument_list|()
specifier|const
block|{
return|return
name|doubleProperty
argument_list|(
name|ImageHeight
argument_list|)
return|;
block|}
end_expr_stmt
begin_label
name|protected
label|:
end_label
begin_function_decl
name|explicit
name|QTextImageFormat
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|format
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|friend
name|class
name|QTextFormat
decl_stmt|;
end_decl_stmt
begin_macro
unit|};
DECL|function|Q_DECLARE_SHARED
name|Q_DECLARE_SHARED
argument_list|(
argument|QTextImageFormat
argument_list|)
end_macro
begin_expr_stmt
specifier|inline
name|void
name|QTextImageFormat
operator|::
name|setName
argument_list|(
argument|const QString&aname
argument_list|)
block|{
name|setProperty
argument_list|(
name|ImageName
argument_list|,
name|aname
argument_list|)
block|; }
DECL|function|setWidth
specifier|inline
name|void
name|QTextImageFormat
operator|::
name|setWidth
argument_list|(
argument|qreal awidth
argument_list|)
block|{
name|setProperty
argument_list|(
name|ImageWidth
argument_list|,
name|awidth
argument_list|)
block|; }
DECL|function|setHeight
specifier|inline
name|void
name|QTextImageFormat
operator|::
name|setHeight
argument_list|(
argument|qreal aheight
argument_list|)
block|{
name|setProperty
argument_list|(
name|ImageHeight
argument_list|,
name|aheight
argument_list|)
block|; }
name|class
name|Q_GUI_EXPORT
name|QTextFrameFormat
operator|:
name|public
name|QTextFormat
block|{
name|public
operator|:
name|QTextFrameFormat
argument_list|()
block|;
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|isFrameFormat
argument_list|()
return|;
block|}
expr|enum
name|Position
block|{
name|InFlow
block|,
name|FloatLeft
block|,
name|FloatRight
comment|// ######
comment|//        Absolute
block|}
expr_stmt|;
end_expr_stmt
begin_enum
enum|enum
name|BorderStyle
block|{
name|BorderStyle_None
block|,
name|BorderStyle_Dotted
block|,
name|BorderStyle_Dashed
block|,
name|BorderStyle_Solid
block|,
name|BorderStyle_Double
block|,
name|BorderStyle_DotDash
block|,
name|BorderStyle_DotDotDash
block|,
name|BorderStyle_Groove
block|,
name|BorderStyle_Ridge
block|,
name|BorderStyle_Inset
block|,
name|BorderStyle_Outset
block|}
enum|;
end_enum
begin_function
specifier|inline
name|void
name|setPosition
parameter_list|(
name|Position
name|f
parameter_list|)
block|{
name|setProperty
argument_list|(
name|CssFloat
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|Position
name|position
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|Position
operator|>
operator|(
name|intProperty
argument_list|(
name|CssFloat
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_function_decl
specifier|inline
name|void
name|setBorder
parameter_list|(
name|qreal
name|border
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
specifier|inline
name|qreal
name|border
argument_list|()
specifier|const
block|{
return|return
name|doubleProperty
argument_list|(
name|FrameBorder
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setBorderBrush
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
name|setProperty
argument_list|(
name|FrameBorderBrush
argument_list|,
name|brush
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|QBrush
name|borderBrush
argument_list|()
specifier|const
block|{
return|return
name|brushProperty
argument_list|(
name|FrameBorderBrush
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setBorderStyle
parameter_list|(
name|BorderStyle
name|style
parameter_list|)
block|{
name|setProperty
argument_list|(
name|FrameBorderStyle
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|BorderStyle
name|borderStyle
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|BorderStyle
operator|>
operator|(
name|intProperty
argument_list|(
name|FrameBorderStyle
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_function_decl
name|void
name|setMargin
parameter_list|(
name|qreal
name|margin
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
specifier|inline
name|qreal
name|margin
argument_list|()
specifier|const
block|{
return|return
name|doubleProperty
argument_list|(
name|FrameMargin
argument_list|)
return|;
block|}
end_expr_stmt
begin_function_decl
specifier|inline
name|void
name|setTopMargin
parameter_list|(
name|qreal
name|margin
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|qreal
name|topMargin
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|inline
name|void
name|setBottomMargin
parameter_list|(
name|qreal
name|margin
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|qreal
name|bottomMargin
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|inline
name|void
name|setLeftMargin
parameter_list|(
name|qreal
name|margin
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|qreal
name|leftMargin
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|inline
name|void
name|setRightMargin
parameter_list|(
name|qreal
name|margin
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|qreal
name|rightMargin
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|inline
name|void
name|setPadding
parameter_list|(
name|qreal
name|padding
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
specifier|inline
name|qreal
name|padding
argument_list|()
specifier|const
block|{
return|return
name|doubleProperty
argument_list|(
name|FramePadding
argument_list|)
return|;
block|}
end_expr_stmt
begin_function_decl
specifier|inline
name|void
name|setWidth
parameter_list|(
name|qreal
name|width
parameter_list|)
function_decl|;
end_function_decl
begin_function
specifier|inline
name|void
name|setWidth
parameter_list|(
specifier|const
name|QTextLength
modifier|&
name|length
parameter_list|)
block|{
name|setProperty
argument_list|(
name|FrameWidth
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|QTextLength
name|width
argument_list|()
specifier|const
block|{
return|return
name|lengthProperty
argument_list|(
name|FrameWidth
argument_list|)
return|;
block|}
end_expr_stmt
begin_function_decl
specifier|inline
name|void
name|setHeight
parameter_list|(
name|qreal
name|height
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|inline
name|void
name|setHeight
parameter_list|(
specifier|const
name|QTextLength
modifier|&
name|height
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
specifier|inline
name|QTextLength
name|height
argument_list|()
specifier|const
block|{
return|return
name|lengthProperty
argument_list|(
name|FrameHeight
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setPageBreakPolicy
parameter_list|(
name|PageBreakFlags
name|flags
parameter_list|)
block|{
name|setProperty
argument_list|(
name|PageBreakPolicy
argument_list|,
name|int
argument_list|(
name|flags
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|PageBreakFlags
name|pageBreakPolicy
argument_list|()
specifier|const
block|{
return|return
name|PageBreakFlags
argument_list|(
name|intProperty
argument_list|(
name|PageBreakPolicy
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_label
name|protected
label|:
end_label
begin_function_decl
name|explicit
name|QTextFrameFormat
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|fmt
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|friend
name|class
name|QTextFormat
decl_stmt|;
end_decl_stmt
begin_macro
unit|};
DECL|function|Q_DECLARE_SHARED
name|Q_DECLARE_SHARED
argument_list|(
argument|QTextFrameFormat
argument_list|)
end_macro
begin_expr_stmt
specifier|inline
name|void
name|QTextFrameFormat
operator|::
name|setBorder
argument_list|(
argument|qreal aborder
argument_list|)
block|{
name|setProperty
argument_list|(
name|FrameBorder
argument_list|,
name|aborder
argument_list|)
block|; }
DECL|function|setPadding
specifier|inline
name|void
name|QTextFrameFormat
operator|::
name|setPadding
argument_list|(
argument|qreal apadding
argument_list|)
block|{
name|setProperty
argument_list|(
name|FramePadding
argument_list|,
name|apadding
argument_list|)
block|; }
DECL|function|setWidth
specifier|inline
name|void
name|QTextFrameFormat
operator|::
name|setWidth
argument_list|(
argument|qreal awidth
argument_list|)
block|{
name|setProperty
argument_list|(
name|FrameWidth
argument_list|,
name|QTextLength
argument_list|(
name|QTextLength
operator|::
name|FixedLength
argument_list|,
name|awidth
argument_list|)
argument_list|)
block|; }
DECL|function|setHeight
specifier|inline
name|void
name|QTextFrameFormat
operator|::
name|setHeight
argument_list|(
argument|qreal aheight
argument_list|)
block|{
name|setProperty
argument_list|(
name|FrameHeight
argument_list|,
name|QTextLength
argument_list|(
name|QTextLength
operator|::
name|FixedLength
argument_list|,
name|aheight
argument_list|)
argument_list|)
block|; }
DECL|function|setHeight
specifier|inline
name|void
name|QTextFrameFormat
operator|::
name|setHeight
argument_list|(
argument|const QTextLength&aheight
argument_list|)
block|{
name|setProperty
argument_list|(
name|FrameHeight
argument_list|,
name|aheight
argument_list|)
block|; }
DECL|function|setTopMargin
specifier|inline
name|void
name|QTextFrameFormat
operator|::
name|setTopMargin
argument_list|(
argument|qreal amargin
argument_list|)
block|{
name|setProperty
argument_list|(
name|FrameTopMargin
argument_list|,
name|amargin
argument_list|)
block|; }
DECL|function|setBottomMargin
specifier|inline
name|void
name|QTextFrameFormat
operator|::
name|setBottomMargin
argument_list|(
argument|qreal amargin
argument_list|)
block|{
name|setProperty
argument_list|(
name|FrameBottomMargin
argument_list|,
name|amargin
argument_list|)
block|; }
DECL|function|setLeftMargin
specifier|inline
name|void
name|QTextFrameFormat
operator|::
name|setLeftMargin
argument_list|(
argument|qreal amargin
argument_list|)
block|{
name|setProperty
argument_list|(
name|FrameLeftMargin
argument_list|,
name|amargin
argument_list|)
block|; }
DECL|function|setRightMargin
specifier|inline
name|void
name|QTextFrameFormat
operator|::
name|setRightMargin
argument_list|(
argument|qreal amargin
argument_list|)
block|{
name|setProperty
argument_list|(
name|FrameRightMargin
argument_list|,
name|amargin
argument_list|)
block|; }
name|class
name|Q_GUI_EXPORT
name|QTextTableFormat
operator|:
name|public
name|QTextFrameFormat
block|{
name|public
operator|:
name|QTextTableFormat
argument_list|()
block|;
specifier|inline
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|isTableFormat
argument_list|()
return|;
block|}
specifier|inline
name|int
name|columns
argument_list|()
specifier|const
block|{
name|int
name|cols
operator|=
name|intProperty
argument_list|(
name|TableColumns
argument_list|)
block|;
if|if
condition|(
name|cols
operator|==
literal|0
condition|)
name|cols
operator|=
literal|1
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|cols
return|;
end_return
begin_function_decl
unit|}     inline
name|void
name|setColumns
parameter_list|(
name|int
name|columns
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|inline
name|void
name|setColumnWidthConstraints
argument_list|(
specifier|const
name|QVector
operator|<
name|QTextLength
operator|>
operator|&
name|constraints
argument_list|)
block|{
name|setProperty
argument_list|(
name|TableColumnWidthConstraints
argument_list|,
name|constraints
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|QVector
operator|<
name|QTextLength
operator|>
name|columnWidthConstraints
argument_list|()
specifier|const
block|{
return|return
name|lengthVectorProperty
argument_list|(
name|TableColumnWidthConstraints
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|clearColumnWidthConstraints
parameter_list|()
block|{
name|clearProperty
argument_list|(
name|TableColumnWidthConstraints
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|qreal
name|cellSpacing
argument_list|()
specifier|const
block|{
return|return
name|doubleProperty
argument_list|(
name|TableCellSpacing
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setCellSpacing
parameter_list|(
name|qreal
name|spacing
parameter_list|)
block|{
name|setProperty
argument_list|(
name|TableCellSpacing
argument_list|,
name|spacing
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|qreal
name|cellPadding
argument_list|()
specifier|const
block|{
return|return
name|doubleProperty
argument_list|(
name|TableCellPadding
argument_list|)
return|;
block|}
end_expr_stmt
begin_function_decl
specifier|inline
name|void
name|setCellPadding
parameter_list|(
name|qreal
name|padding
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|inline
name|void
name|setAlignment
argument_list|(
name|Qt
operator|::
name|Alignment
name|alignment
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
specifier|inline
name|Qt
operator|::
name|Alignment
name|alignment
argument_list|()
specifier|const
block|{
return|return
name|QFlag
argument_list|(
name|intProperty
argument_list|(
name|BlockAlignment
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setHeaderRowCount
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|setProperty
argument_list|(
name|TableHeaderRowCount
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|int
name|headerRowCount
argument_list|()
specifier|const
block|{
return|return
name|intProperty
argument_list|(
name|TableHeaderRowCount
argument_list|)
return|;
block|}
end_expr_stmt
begin_label
name|protected
label|:
end_label
begin_function_decl
name|explicit
name|QTextTableFormat
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|fmt
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|friend
name|class
name|QTextFormat
decl_stmt|;
end_decl_stmt
begin_macro
unit|};
DECL|function|Q_DECLARE_SHARED
name|Q_DECLARE_SHARED
argument_list|(
argument|QTextTableFormat
argument_list|)
end_macro
begin_expr_stmt
specifier|inline
name|void
name|QTextTableFormat
operator|::
name|setColumns
argument_list|(
argument|int acolumns
argument_list|)
block|{
if|if
condition|(
name|acolumns
operator|==
literal|1
condition|)
name|acolumns
operator|=
literal|0
expr_stmt|;
name|setProperty
argument_list|(
name|TableColumns
argument_list|,
name|acolumns
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  inline
DECL|function|setCellPadding
name|void
name|QTextTableFormat
operator|::
name|setCellPadding
argument_list|(
argument|qreal apadding
argument_list|)
block|{
name|setProperty
argument_list|(
name|TableCellPadding
argument_list|,
name|apadding
argument_list|)
block|; }
DECL|function|setAlignment
specifier|inline
name|void
name|QTextTableFormat
operator|::
name|setAlignment
argument_list|(
argument|Qt::Alignment aalignment
argument_list|)
block|{
name|setProperty
argument_list|(
name|BlockAlignment
argument_list|,
name|int
argument_list|(
name|aalignment
argument_list|)
argument_list|)
block|; }
name|class
name|Q_GUI_EXPORT
name|QTextTableCellFormat
operator|:
name|public
name|QTextCharFormat
block|{
name|public
operator|:
name|QTextTableCellFormat
argument_list|()
block|;
specifier|inline
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|isTableCellFormat
argument_list|()
return|;
block|}
specifier|inline
name|void
name|setTopPadding
argument_list|(
argument|qreal padding
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|qreal
name|topPadding
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|inline
name|void
name|setBottomPadding
parameter_list|(
name|qreal
name|padding
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
specifier|inline
name|qreal
name|bottomPadding
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|inline
name|void
name|setLeftPadding
parameter_list|(
name|qreal
name|padding
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
specifier|inline
name|qreal
name|leftPadding
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|inline
name|void
name|setRightPadding
parameter_list|(
name|qreal
name|padding
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
specifier|inline
name|qreal
name|rightPadding
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|inline
name|void
name|setPadding
parameter_list|(
name|qreal
name|padding
parameter_list|)
function_decl|;
end_function_decl
begin_label
name|protected
label|:
end_label
begin_function_decl
name|explicit
name|QTextTableCellFormat
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|fmt
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|friend
name|class
name|QTextFormat
decl_stmt|;
end_decl_stmt
begin_macro
unit|};
DECL|function|Q_DECLARE_SHARED
name|Q_DECLARE_SHARED
argument_list|(
argument|QTextTableCellFormat
argument_list|)
end_macro
begin_expr_stmt
specifier|inline
name|void
name|QTextTableCellFormat
operator|::
name|setTopPadding
argument_list|(
argument|qreal padding
argument_list|)
block|{
name|setProperty
argument_list|(
name|TableCellTopPadding
argument_list|,
name|padding
argument_list|)
block|; }
DECL|function|topPadding
specifier|inline
name|qreal
name|QTextTableCellFormat
operator|::
name|topPadding
argument_list|()
specifier|const
block|{
return|return
name|doubleProperty
argument_list|(
name|TableCellTopPadding
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|setBottomPadding
specifier|inline
name|void
name|QTextTableCellFormat
operator|::
name|setBottomPadding
argument_list|(
argument|qreal padding
argument_list|)
block|{
name|setProperty
argument_list|(
name|TableCellBottomPadding
argument_list|,
name|padding
argument_list|)
block|; }
DECL|function|bottomPadding
specifier|inline
name|qreal
name|QTextTableCellFormat
operator|::
name|bottomPadding
argument_list|()
specifier|const
block|{
return|return
name|doubleProperty
argument_list|(
name|TableCellBottomPadding
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|setLeftPadding
specifier|inline
name|void
name|QTextTableCellFormat
operator|::
name|setLeftPadding
argument_list|(
argument|qreal padding
argument_list|)
block|{
name|setProperty
argument_list|(
name|TableCellLeftPadding
argument_list|,
name|padding
argument_list|)
block|; }
DECL|function|leftPadding
specifier|inline
name|qreal
name|QTextTableCellFormat
operator|::
name|leftPadding
argument_list|()
specifier|const
block|{
return|return
name|doubleProperty
argument_list|(
name|TableCellLeftPadding
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|setRightPadding
specifier|inline
name|void
name|QTextTableCellFormat
operator|::
name|setRightPadding
argument_list|(
argument|qreal padding
argument_list|)
block|{
name|setProperty
argument_list|(
name|TableCellRightPadding
argument_list|,
name|padding
argument_list|)
block|; }
DECL|function|rightPadding
specifier|inline
name|qreal
name|QTextTableCellFormat
operator|::
name|rightPadding
argument_list|()
specifier|const
block|{
return|return
name|doubleProperty
argument_list|(
name|TableCellRightPadding
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|setPadding
specifier|inline
name|void
name|QTextTableCellFormat
operator|::
name|setPadding
argument_list|(
argument|qreal padding
argument_list|)
block|{
name|setTopPadding
argument_list|(
name|padding
argument_list|)
block|;
name|setBottomPadding
argument_list|(
name|padding
argument_list|)
block|;
name|setLeftPadding
argument_list|(
name|padding
argument_list|)
block|;
name|setRightPadding
argument_list|(
name|padding
argument_list|)
block|; }
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QTEXTFORMAT_H
end_comment
end_unit
