begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qglobal.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_RAWFONT
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qglyphs.h"
end_include
begin_include
include|#
directive|include
file|"qglyphs_p.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QGlyphs     \brief the QGlyphs class provides direct access to the internal glyphs in a font     \since 4.8      \ingroup text     \mainclass      When Qt displays a string of text encoded in Unicode, it will first convert the Unicode points     into a list of glyph indexes and a list of positions based on one or more fonts. The Unicode     representation of the text and the QFont object will in this case serve as a convenient     abstraction that hides the details of what actually takes place when displaying the text     on-screen. For instance, by the time the text actually reaches the screen, it may be represented     by a set of fonts in addition to the one specified by the user, e.g. in case the originally     selected font did not support all the writing systems contained in the text.      Under certain circumstances, it can be useful as an application developer to have more low-level     control over which glyphs in a specific font are drawn to the screen. This could for instance     be the case in applications that use an external font engine and text shaper together with Qt.     QGlyphs provides an interface to the raw data needed to get text on the screen. It     contains a list of glyph indexes, a position for each glyph and a font.      It is the user's responsibility to ensure that the selected font actually contains the     provided glyph indexes.      QTextLayout::glyphs() or QTextFragment::glyphs() can be used to convert unicode encoded text     into a list of QGlyphs objects, and QPainter::drawGlyphs() can be used to draw the glyphs.      \note Please note that QRawFont is considered local to the thread in which it is constructed.     This in turn means that a new QRawFont will have to be created and set on the QGlyphs if it is     moved to a different thread. If the QGlyphs contains a reference to a QRawFont from a different     thread than the current, it will not be possible to draw the glyphs using a QPainter, as the     QRawFont is considered invalid and inaccessible in this case. */
end_comment
begin_comment
comment|/*!     Constructs an empty QGlyphs object. */
end_comment
begin_constructor
DECL|function|QGlyphs
name|QGlyphs
operator|::
name|QGlyphs
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|new
name|QGlyphsPrivate
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a QGlyphs object which is a copy of \a other. */
end_comment
begin_constructor
DECL|function|QGlyphs
name|QGlyphs
operator|::
name|QGlyphs
parameter_list|(
specifier|const
name|QGlyphs
modifier|&
name|other
parameter_list|)
block|{
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the QGlyphs. */
end_comment
begin_destructor
DECL|function|~QGlyphs
name|QGlyphs
operator|::
name|~
name|QGlyphs
parameter_list|()
block|{
comment|// Required for QExplicitlySharedDataPointer
block|}
end_destructor
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|detach
name|void
name|QGlyphs
operator|::
name|detach
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|!=
literal|1
condition|)
name|d
operator|.
name|detach
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Assigns \a other to this QGlyphs object. */
end_comment
begin_function
DECL|function|operator =
name|QGlyphs
modifier|&
name|QGlyphs
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QGlyphs
modifier|&
name|other
parameter_list|)
block|{
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     Compares \a other to this QGlyphs object. Returns true if the list of glyph indexes,     the list of positions and the font are all equal, otherwise returns false. */
end_comment
begin_function
DECL|function|operator ==
name|bool
name|QGlyphs
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|QGlyphs
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
operator|(
operator|(
name|d
operator|==
name|other
operator|.
name|d
operator|)
operator|||
operator|(
name|d
operator|->
name|glyphIndexes
operator|==
name|other
operator|.
name|d
operator|->
name|glyphIndexes
operator|&&
name|d
operator|->
name|glyphPositions
operator|==
name|other
operator|.
name|d
operator|->
name|glyphPositions
operator|&&
name|d
operator|->
name|overline
operator|==
name|other
operator|.
name|d
operator|->
name|overline
operator|&&
name|d
operator|->
name|underline
operator|==
name|other
operator|.
name|d
operator|->
name|underline
operator|&&
name|d
operator|->
name|strikeOut
operator|==
name|other
operator|.
name|d
operator|->
name|strikeOut
operator|&&
name|d
operator|->
name|font
operator|==
name|other
operator|.
name|d
operator|->
name|font
operator|)
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     Compares \a other to this QGlyphs object. Returns true if any of the list of glyph     indexes, the list of positions or the font are different, otherwise returns false. */
end_comment
begin_function
DECL|function|operator !=
name|bool
name|QGlyphs
operator|::
name|operator
name|!=
parameter_list|(
specifier|const
name|QGlyphs
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Adds together the lists of glyph indexes and positions in \a other and this QGlyphs     object and returns the result. The font in the returned QGlyphs will be the same as in     this QGlyphs object. */
end_comment
begin_function
DECL|function|operator +
name|QGlyphs
name|QGlyphs
operator|::
name|operator
name|+
parameter_list|(
specifier|const
name|QGlyphs
modifier|&
name|other
parameter_list|)
specifier|const
block|{
name|QGlyphs
name|ret
argument_list|(
operator|*
name|this
argument_list|)
decl_stmt|;
name|ret
operator|+=
name|other
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Appends the glyph indexes and positions in \a other to this QGlyphs object and returns     a reference to the current object. */
end_comment
begin_function
DECL|function|operator +=
name|QGlyphs
modifier|&
name|QGlyphs
operator|::
name|operator
name|+=
parameter_list|(
specifier|const
name|QGlyphs
modifier|&
name|other
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|glyphIndexes
operator|+=
name|other
operator|.
name|d
operator|->
name|glyphIndexes
expr_stmt|;
name|d
operator|->
name|glyphPositions
operator|+=
name|other
operator|.
name|d
operator|->
name|glyphPositions
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the font selected for this QGlyphs object.      \sa setFont() */
end_comment
begin_function
DECL|function|font
name|QRawFont
name|QGlyphs
operator|::
name|font
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|font
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the font in which to look up the glyph indexes to \a font.      \sa font(), setGlyphIndexes() */
end_comment
begin_function
DECL|function|setFont
name|void
name|QGlyphs
operator|::
name|setFont
parameter_list|(
specifier|const
name|QRawFont
modifier|&
name|font
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|font
operator|=
name|font
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the glyph indexes for this QGlyphs object.      \sa setGlyphIndexes(), setPositions() */
end_comment
begin_function
DECL|function|glyphIndexes
name|QVector
argument_list|<
name|quint32
argument_list|>
name|QGlyphs
operator|::
name|glyphIndexes
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|glyphIndexes
return|;
block|}
end_function
begin_comment
comment|/*!     Set the glyph indexes for this QGlyphs object to \a glyphIndexes. The glyph indexes must     be valid for the selected font. */
end_comment
begin_function
DECL|function|setGlyphIndexes
name|void
name|QGlyphs
operator|::
name|setGlyphIndexes
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|quint32
argument_list|>
modifier|&
name|glyphIndexes
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|glyphIndexes
operator|=
name|glyphIndexes
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the position of the edge of the baseline for each glyph in this set of glyph indexes. */
end_comment
begin_function
DECL|function|positions
name|QVector
argument_list|<
name|QPointF
argument_list|>
name|QGlyphs
operator|::
name|positions
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|glyphPositions
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the positions of the edge of the baseline for each glyph in this set of glyph indexes to     \a positions. */
end_comment
begin_function
DECL|function|setPositions
name|void
name|QGlyphs
operator|::
name|setPositions
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|QPointF
argument_list|>
modifier|&
name|positions
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|glyphPositions
operator|=
name|positions
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Clears all data in the QGlyphs object. */
end_comment
begin_function
DECL|function|clear
name|void
name|QGlyphs
operator|::
name|clear
parameter_list|()
block|{
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|glyphPositions
operator|=
name|QVector
argument_list|<
name|QPointF
argument_list|>
argument_list|()
expr_stmt|;
name|d
operator|->
name|glyphIndexes
operator|=
name|QVector
argument_list|<
name|quint32
argument_list|>
argument_list|()
expr_stmt|;
name|d
operator|->
name|font
operator|=
name|QRawFont
argument_list|()
expr_stmt|;
name|d
operator|->
name|strikeOut
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|overline
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|underline
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!    Returns true if this QGlyphs should be painted with an overline decoration.     \sa setOverline() */
end_comment
begin_function
DECL|function|overline
name|bool
name|QGlyphs
operator|::
name|overline
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|overline
return|;
block|}
end_function
begin_comment
comment|/*!   Indicates that this QGlyphs should be painted with an overline decoration if \a overline is true.   Otherwise the QGlyphs should be painted with no overline decoration.    \sa overline() */
end_comment
begin_function
DECL|function|setOverline
name|void
name|QGlyphs
operator|::
name|setOverline
parameter_list|(
name|bool
name|overline
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|overline
operator|=
name|overline
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!    Returns true if this QGlyphs should be painted with an underline decoration.     \sa setUnderline() */
end_comment
begin_function
DECL|function|underline
name|bool
name|QGlyphs
operator|::
name|underline
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|underline
return|;
block|}
end_function
begin_comment
comment|/*!   Indicates that this QGlyphs should be painted with an underline decoration if \a underline is   true. Otherwise the QGlyphs should be painted with no underline decoration.    \sa underline() */
end_comment
begin_function
DECL|function|setUnderline
name|void
name|QGlyphs
operator|::
name|setUnderline
parameter_list|(
name|bool
name|underline
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|underline
operator|=
name|underline
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!    Returns true if this QGlyphs should be painted with a strike out decoration.     \sa setStrikeOut() */
end_comment
begin_function
DECL|function|strikeOut
name|bool
name|QGlyphs
operator|::
name|strikeOut
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|strikeOut
return|;
block|}
end_function
begin_comment
comment|/*!   Indicates that this QGlyphs should be painted with an strike out decoration if \a strikeOut is   true. Otherwise the QGlyphs should be painted with no strike out decoration.    \sa strikeOut() */
end_comment
begin_function
DECL|function|setStrikeOut
name|void
name|QGlyphs
operator|::
name|setStrikeOut
parameter_list|(
name|bool
name|strikeOut
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|strikeOut
operator|=
name|strikeOut
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_RAWFONT
end_comment
end_unit
