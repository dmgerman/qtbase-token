begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_comment
comment|// #define FONTENGINE_DEBUG
end_comment
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qtextcodec.h>
end_include
begin_include
include|#
directive|include
file|<qthread.h>
end_include
begin_include
include|#
directive|include
file|"qfontdatabase.h"
end_include
begin_include
include|#
directive|include
file|"qpaintdevice.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qvarlengtharray.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qsettings.h"
end_include
begin_include
include|#
directive|include
file|"qfile.h"
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_x11_p.h>
end_include
begin_include
include|#
directive|include
file|"qfont.h"
end_include
begin_include
include|#
directive|include
file|"qfont_p.h"
end_include
begin_include
include|#
directive|include
file|"qfontengine_p.h"
end_include
begin_include
include|#
directive|include
file|<qhash.h>
end_include
begin_include
include|#
directive|include
file|<private/qpainter_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qunicodetables_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qt_x11_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpixmap_x11_p.h>
end_include
begin_include
include|#
directive|include
file|"qx11info_x11.h"
end_include
begin_include
include|#
directive|include
file|"qfontengine_x11_p.h"
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<ft2build.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|FT_LCD_FILTER_H
argument_list|)
end_if
begin_include
include|#
directive|include
include|FT_LCD_FILTER_H
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|FC_LCD_FILTER
argument_list|)
end_if
begin_ifndef
ifndef|#
directive|ifndef
name|FC_LCD_FILTER_NONE
end_ifndef
begin_define
DECL|macro|FC_LCD_FILTER_NONE
define|#
directive|define
name|FC_LCD_FILTER_NONE
value|FC_LCD_NONE
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|FC_LCD_FILTER_DEFAULT
end_ifndef
begin_define
DECL|macro|FC_LCD_FILTER_DEFAULT
define|#
directive|define
name|FC_LCD_FILTER_DEFAULT
value|FC_LCD_DEFAULT
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|FC_LCD_FILTER_LIGHT
end_ifndef
begin_define
DECL|macro|FC_LCD_FILTER_LIGHT
define|#
directive|define
name|FC_LCD_FILTER_LIGHT
value|FC_LCD_LIGHT
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|FC_LCD_FILTER_LEGACY
end_ifndef
begin_define
DECL|macro|FC_LCD_FILTER_LEGACY
define|#
directive|define
name|FC_LCD_FILTER_LEGACY
value|FC_LCD_LEGACY
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|// ------------------------------------------------------------------
end_comment
begin_comment
comment|// Multi XLFD engine
end_comment
begin_comment
comment|// ------------------------------------------------------------------
end_comment
begin_constructor
DECL|function|QFontEngineMultiXLFD
name|QFontEngineMultiXLFD
operator|::
name|QFontEngineMultiXLFD
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|r
parameter_list|,
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
name|l
parameter_list|,
name|int
name|s
parameter_list|)
member_init_list|:
name|QFontEngineMulti
argument_list|(
name|l
operator|.
name|size
argument_list|()
argument_list|)
member_init_list|,
name|encodings
argument_list|(
name|l
argument_list|)
member_init_list|,
name|screen
argument_list|(
name|s
argument_list|)
member_init_list|,
name|request
argument_list|(
name|r
argument_list|)
block|{
name|loadEngine
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fontDef
operator|=
name|engines
index|[
literal|0
index|]
operator|->
name|fontDef
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QFontEngineMultiXLFD
name|QFontEngineMultiXLFD
operator|::
name|~
name|QFontEngineMultiXLFD
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|loadEngine
name|void
name|QFontEngineMultiXLFD
operator|::
name|loadEngine
parameter_list|(
name|int
name|at
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|at
operator|<
name|engines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|engines
operator|.
name|at
argument_list|(
name|at
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|int
name|encoding
init|=
name|encodings
operator|.
name|at
argument_list|(
name|at
argument_list|)
decl_stmt|;
name|QFontEngine
modifier|*
name|fontEngine
init|=
name|QFontDatabase
operator|::
name|loadXlfd
argument_list|(
literal|0
argument_list|,
name|QUnicodeTables
operator|::
name|Common
argument_list|,
name|request
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|fontEngine
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|fontEngine
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|engines
index|[
name|at
index|]
operator|=
name|fontEngine
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------
end_comment
begin_comment
comment|// Xlfd font engine
end_comment
begin_comment
comment|// ------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FREETYPE
end_ifndef
begin_decl_stmt
DECL|variable|qt_fontpath
specifier|static
name|QStringList
modifier|*
name|qt_fontpath
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|fontPath
specifier|static
name|QStringList
name|fontPath
parameter_list|()
block|{
if|if
condition|(
name|qt_fontpath
condition|)
return|return
operator|*
name|qt_fontpath
return|;
comment|// append qsettings fontpath
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
name|QLatin1String
argument_list|(
literal|"Trolltech"
argument_list|)
argument_list|)
decl_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
name|QLatin1String
argument_list|(
literal|"Qt"
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|fontpath
decl_stmt|;
name|int
name|npaths
decl_stmt|;
name|char
modifier|*
modifier|*
name|font_path
decl_stmt|;
name|font_path
operator|=
name|XGetFontPath
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|npaths
argument_list|)
expr_stmt|;
name|bool
name|xfsconfig_read
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|npaths
condition|;
name|i
operator|++
control|)
block|{
comment|// If we're using xfs, append font paths from /etc/X11/fs/config
comment|// can't hurt, and chances are we'll get all fonts that way.
if|if
condition|(
operator|(
operator|(
name|font_path
index|[
name|i
index|]
operator|)
index|[
literal|0
index|]
operator|!=
literal|'/'
operator|)
operator|&&
operator|!
name|xfsconfig_read
condition|)
block|{
comment|// We're using xfs -> read its config
name|bool
name|finished
init|=
literal|false
decl_stmt|;
name|QFile
name|f
argument_list|(
name|QLatin1String
argument_list|(
literal|"/etc/X11/fs/config"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
name|f
operator|.
name|setFileName
argument_list|(
name|QLatin1String
argument_list|(
literal|"/usr/X11R6/lib/X11/fs/config"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
name|f
operator|.
name|setFileName
argument_list|(
name|QLatin1String
argument_list|(
literal|"/usr/X11/lib/X11/fs/config"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
while|while
condition|(
name|f
operator|.
name|error
argument_list|()
operator|==
name|QFile
operator|::
name|NoError
operator|&&
operator|!
name|finished
condition|)
block|{
name|QString
name|fs
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|f
operator|.
name|readLine
argument_list|(
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|=
name|fs
operator|.
name|trimmed
argument_list|()
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|left
argument_list|(
literal|9
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"catalogue"
argument_list|)
operator|&&
name|fs
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
argument_list|)
condition|)
block|{
name|fs
operator|=
name|fs
operator|.
name|mid
argument_list|(
name|fs
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
argument_list|)
operator|+
literal|1
argument_list|)
operator|.
name|trimmed
argument_list|()
expr_stmt|;
name|bool
name|end
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|f
operator|.
name|error
argument_list|()
operator|==
name|QFile
operator|::
name|NoError
operator|&&
operator|!
name|end
condition|)
block|{
if|if
condition|(
name|fs
index|[
name|int
argument_list|(
name|fs
operator|.
name|length
argument_list|()
argument_list|)
operator|-
literal|1
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
condition|)
name|fs
operator|=
name|fs
operator|.
name|left
argument_list|(
name|fs
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
else|else
name|end
operator|=
literal|true
expr_stmt|;
name|fs
operator|=
name|fs
operator|.
name|left
argument_list|(
name|fs
operator|.
name|indexOf
argument_list|(
name|QLatin1String
argument_list|(
literal|":unscaled"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
index|[
literal|0
index|]
operator|!=
name|QLatin1Char
argument_list|(
literal|'#'
argument_list|)
condition|)
name|fontpath
operator|+=
name|fs
expr_stmt|;
name|fs
operator|=
name|QLatin1String
argument_list|(
name|f
operator|.
name|readLine
argument_list|(
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|=
name|fs
operator|.
name|trimmed
argument_list|()
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|isEmpty
argument_list|()
condition|)
name|end
operator|=
literal|true
expr_stmt|;
block|}
name|finished
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|xfsconfig_read
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|QString
name|fs
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|font_path
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|fontpath
operator|+=
name|fs
operator|.
name|left
argument_list|(
name|fs
operator|.
name|indexOf
argument_list|(
name|QLatin1String
argument_list|(
literal|":unscaled"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|XFreeFontPath
argument_list|(
name|font_path
argument_list|)
expr_stmt|;
comment|// append qsettings fontpath
name|QStringList
name|fp
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"fontPath"
argument_list|)
argument_list|)
operator|.
name|toStringList
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fp
operator|.
name|isEmpty
argument_list|()
condition|)
name|fontpath
operator|+=
name|fp
expr_stmt|;
name|qt_fontpath
operator|=
operator|new
name|QStringList
argument_list|(
name|fontpath
argument_list|)
expr_stmt|;
return|return
name|fontpath
return|;
block|}
end_function
begin_function
DECL|function|fontFile
specifier|static
name|QFontEngine
operator|::
name|FaceId
name|fontFile
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|_xname
parameter_list|,
name|QFreetypeFace
modifier|*
modifier|*
name|freetype
parameter_list|,
name|int
modifier|*
name|synth
parameter_list|)
block|{
operator|*
name|freetype
operator|=
literal|0
expr_stmt|;
operator|*
name|synth
operator|=
literal|0
expr_stmt|;
name|QByteArray
name|xname
init|=
name|_xname
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|int
name|minus
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|minus
operator|<
literal|5
operator|&&
operator|(
name|pos
operator|=
name|xname
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|,
name|pos
operator|+
literal|1
argument_list|)
operator|)
condition|)
operator|++
name|minus
expr_stmt|;
name|QByteArray
name|searchname
init|=
name|xname
operator|.
name|left
argument_list|(
name|pos
argument_list|)
decl_stmt|;
while|while
condition|(
name|minus
operator|<
literal|12
operator|&&
operator|(
name|pos
operator|=
name|xname
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|,
name|pos
operator|+
literal|1
argument_list|)
operator|)
condition|)
operator|++
name|minus
expr_stmt|;
name|QByteArray
name|encoding
init|=
name|xname
operator|.
name|mid
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|//qDebug("xname='%s', searchname='%s', encoding='%s'", xname.data(), searchname.data(), encoding.data());
name|QStringList
name|fontpath
init|=
name|fontPath
argument_list|()
decl_stmt|;
name|QFontEngine
operator|::
name|FaceId
name|face_id
decl_stmt|;
name|face_id
operator|.
name|index
operator|=
literal|0
expr_stmt|;
name|QByteArray
name|best_mapping
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|fontpath
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|fontpath
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|!
operator|(
operator|*
name|it
operator|)
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
continue|continue;
comment|// not a path name, a font server
name|QString
name|fontmapname
decl_stmt|;
name|int
name|num
init|=
literal|0
decl_stmt|;
comment|// search font.dir and font.scale for the right file
while|while
condition|(
name|num
operator|<
literal|2
condition|)
block|{
if|if
condition|(
name|num
operator|==
literal|0
condition|)
name|fontmapname
operator|=
operator|(
operator|*
name|it
operator|)
operator|+
name|QLatin1String
argument_list|(
literal|"/fonts.scale"
argument_list|)
expr_stmt|;
else|else
name|fontmapname
operator|=
operator|(
operator|*
name|it
operator|)
operator|+
name|QLatin1String
argument_list|(
literal|"/fonts.dir"
argument_list|)
expr_stmt|;
operator|++
name|num
expr_stmt|;
comment|//qWarning(fontmapname);
name|QFile
name|fontmap
argument_list|(
name|fontmapname
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fontmap
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
continue|continue;
while|while
condition|(
operator|!
name|fontmap
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QByteArray
name|mapping
init|=
name|fontmap
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QByteArray
name|lmapping
init|=
name|mapping
operator|.
name|toLower
argument_list|()
decl_stmt|;
comment|//qWarning(xfontname);
comment|//qWarning(mapping);
if|if
condition|(
operator|!
name|lmapping
operator|.
name|contains
argument_list|(
name|searchname
argument_list|)
condition|)
continue|continue;
name|int
name|index
init|=
name|mapping
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|QByteArray
name|ffn
init|=
name|mapping
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
comment|// remove bitmap formats freetype can't handle
if|if
condition|(
name|ffn
operator|.
name|contains
argument_list|(
literal|".spd"
argument_list|)
operator|||
name|ffn
operator|.
name|contains
argument_list|(
literal|".phont"
argument_list|)
condition|)
continue|continue;
name|bool
name|best_match
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|best_mapping
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|lmapping
operator|.
name|contains
argument_list|(
literal|"-0-0-0-0-"
argument_list|)
condition|)
block|{
comment|// scalable font
name|best_match
operator|=
literal|true
expr_stmt|;
goto|goto
name|found
goto|;
block|}
if|if
condition|(
name|lmapping
operator|.
name|contains
argument_list|(
name|encoding
argument_list|)
operator|&&
operator|!
name|best_mapping
operator|.
name|toLower
argument_list|()
operator|.
name|contains
argument_list|(
name|encoding
argument_list|)
condition|)
goto|goto
name|found
goto|;
continue|continue;
block|}
name|found
label|:
name|int
name|colon
init|=
name|ffn
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|colon
operator|!=
operator|-
literal|1
condition|)
block|{
name|QByteArray
name|s
init|=
name|ffn
operator|.
name|left
argument_list|(
name|colon
argument_list|)
decl_stmt|;
name|ffn
operator|=
name|ffn
operator|.
name|mid
argument_list|(
name|colon
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
literal|"ds="
argument_list|)
condition|)
operator|*
name|synth
operator||=
name|QFontEngine
operator|::
name|SynthesizedBold
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
literal|"ai="
argument_list|)
condition|)
operator|*
name|synth
operator||=
name|QFontEngine
operator|::
name|SynthesizedItalic
expr_stmt|;
block|}
name|face_id
operator|.
name|filename
operator|=
operator|(
operator|*
name|it
operator|)
operator|.
name|toLocal8Bit
argument_list|()
operator|+
literal|'/'
operator|+
name|ffn
expr_stmt|;
name|best_mapping
operator|=
name|mapping
expr_stmt|;
if|if
condition|(
name|best_match
condition|)
goto|goto
name|end
goto|;
block|}
block|}
block|}
name|end
label|:
comment|//     qDebug("fontfile for %s is from '%s'\n    got %s synth=%d", xname.data(),
comment|//            best_mapping.data(), face_id.filename.data(), *synth);
operator|*
name|freetype
operator|=
name|QFreetypeFace
operator|::
name|getFace
argument_list|(
name|face_id
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|*
name|freetype
condition|)
block|{
name|face_id
operator|.
name|index
operator|=
literal|0
expr_stmt|;
name|face_id
operator|.
name|filename
operator|=
name|QByteArray
argument_list|()
expr_stmt|;
block|}
return|return
name|face_id
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_FREETYPE
end_comment
begin_comment
comment|// defined in qfontdatabase_x11.cpp
end_comment
begin_function_decl
specifier|extern
name|int
name|qt_mib_for_xlfd_encoding
parameter_list|(
specifier|const
name|char
modifier|*
name|encoding
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|qt_xlfd_encoding_id
parameter_list|(
specifier|const
name|char
modifier|*
name|encoding
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|charStruct
specifier|static
specifier|inline
name|XCharStruct
modifier|*
name|charStruct
parameter_list|(
name|XFontStruct
modifier|*
name|xfs
parameter_list|,
name|uint
name|ch
parameter_list|)
block|{
name|XCharStruct
modifier|*
name|xcs
init|=
literal|0
decl_stmt|;
name|unsigned
name|char
name|r
init|=
name|ch
operator|>>
literal|8
decl_stmt|;
name|unsigned
name|char
name|c
init|=
name|ch
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
name|xfs
operator|->
name|per_char
operator|&&
name|r
operator|>=
name|xfs
operator|->
name|min_byte1
operator|&&
name|r
operator|<=
name|xfs
operator|->
name|max_byte1
operator|&&
name|c
operator|>=
name|xfs
operator|->
name|min_char_or_byte2
operator|&&
name|c
operator|<=
name|xfs
operator|->
name|max_char_or_byte2
condition|)
block|{
name|xcs
operator|=
name|xfs
operator|->
name|per_char
operator|+
operator|(
operator|(
name|r
operator|-
name|xfs
operator|->
name|min_byte1
operator|)
operator|*
operator|(
name|xfs
operator|->
name|max_char_or_byte2
operator|-
name|xfs
operator|->
name|min_char_or_byte2
operator|+
literal|1
operator|)
operator|)
operator|+
operator|(
name|c
operator|-
name|xfs
operator|->
name|min_char_or_byte2
operator|)
expr_stmt|;
if|if
condition|(
name|xcs
operator|->
name|width
operator|==
literal|0
operator|&&
name|xcs
operator|->
name|ascent
operator|==
literal|0
operator|&&
name|xcs
operator|->
name|descent
operator|==
literal|0
condition|)
name|xcs
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|xcs
return|;
block|}
end_function
begin_constructor
DECL|function|QFontEngineXLFD
name|QFontEngineXLFD
operator|::
name|QFontEngineXLFD
parameter_list|(
name|XFontStruct
modifier|*
name|fs
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|name
parameter_list|,
name|int
name|mib
parameter_list|)
member_init_list|:
name|_fs
argument_list|(
name|fs
argument_list|)
member_init_list|,
name|_name
argument_list|(
name|name
argument_list|)
member_init_list|,
name|_codec
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|_cmap
argument_list|(
name|mib
argument_list|)
block|{
if|if
condition|(
name|_cmap
condition|)
name|_codec
operator|=
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
name|_cmap
argument_list|)
expr_stmt|;
name|cache_cost
operator|=
operator|(
operator|(
operator|(
name|fs
operator|->
name|max_byte1
operator|-
name|fs
operator|->
name|min_byte1
operator|)
operator|*
operator|(
name|fs
operator|->
name|max_char_or_byte2
operator|-
name|fs
operator|->
name|min_char_or_byte2
operator|+
literal|1
operator|)
operator|)
operator|+
name|fs
operator|->
name|max_char_or_byte2
operator|-
name|fs
operator|->
name|min_char_or_byte2
operator|)
expr_stmt|;
name|cache_cost
operator|=
operator|(
operator|(
name|fs
operator|->
name|max_bounds
operator|.
name|ascent
operator|+
name|fs
operator|->
name|max_bounds
operator|.
name|descent
operator|)
operator|*
operator|(
name|fs
operator|->
name|max_bounds
operator|.
name|width
operator|*
name|cache_cost
operator|/
literal|8
operator|)
operator|)
expr_stmt|;
name|lbearing
operator|=
name|SHRT_MIN
expr_stmt|;
name|rbearing
operator|=
name|SHRT_MIN
expr_stmt|;
name|face_id
operator|.
name|index
operator|=
operator|-
literal|1
expr_stmt|;
name|freetype
operator|=
literal|0
expr_stmt|;
name|synth
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QFontEngineXLFD
name|QFontEngineXLFD
operator|::
name|~
name|QFontEngineXLFD
parameter_list|()
block|{
name|XFreeFont
argument_list|(
name|QX11Info
operator|::
name|display
argument_list|()
argument_list|,
name|_fs
argument_list|)
expr_stmt|;
name|_fs
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FREETYPE
if|if
condition|(
name|freetype
condition|)
name|freetype
operator|->
name|release
argument_list|(
name|face_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_function
DECL|function|stringToCMap
name|bool
name|QFontEngineXLFD
operator|::
name|stringToCMap
parameter_list|(
specifier|const
name|QChar
modifier|*
name|s
parameter_list|,
name|int
name|len
parameter_list|,
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|int
modifier|*
name|nglyphs
parameter_list|,
name|QTextEngine
operator|::
name|ShaperFlags
name|flags
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|*
name|nglyphs
operator|<
name|len
condition|)
block|{
operator|*
name|nglyphs
operator|=
name|len
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// filter out surrogates, we can't handle them anyway with XLFD fonts
name|QVarLengthArray
argument_list|<
name|ushort
argument_list|>
name|_s
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|QChar
modifier|*
name|str
init|=
operator|(
name|QChar
operator|*
operator|)
name|_s
operator|.
name|data
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|s
index|[
name|i
index|]
operator|.
name|isHighSurrogate
argument_list|()
operator|&&
name|i
operator|<
name|len
operator|-
literal|1
operator|&&
name|s
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|isLowSurrogate
argument_list|()
condition|)
block|{
operator|*
name|str
operator|=
name|QChar
argument_list|()
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
else|else
block|{
operator|*
name|str
operator|=
name|s
index|[
name|i
index|]
expr_stmt|;
block|}
operator|++
name|str
expr_stmt|;
block|}
name|len
operator|=
name|str
operator|-
operator|(
name|QChar
operator|*
operator|)
name|_s
operator|.
name|data
argument_list|()
expr_stmt|;
name|str
operator|=
operator|(
name|QChar
operator|*
operator|)
name|_s
operator|.
name|data
argument_list|()
expr_stmt|;
name|bool
name|mirrored
init|=
name|flags
operator|&
name|QTextEngine
operator|::
name|RightToLeft
decl_stmt|;
if|if
condition|(
name|_codec
condition|)
block|{
name|bool
name|haveNbsp
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|str
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|0xa0
condition|)
block|{
name|haveNbsp
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|QVarLengthArray
argument_list|<
name|unsigned
name|short
argument_list|>
name|ch
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|QChar
modifier|*
name|chars
init|=
operator|(
name|QChar
operator|*
operator|)
name|ch
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
name|haveNbsp
operator|||
name|mirrored
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
name|chars
index|[
name|i
index|]
operator|=
operator|(
name|str
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|0xa0
condition|?
literal|0x20
else|:
operator|(
name|mirrored
condition|?
name|QChar
operator|::
name|mirroredChar
argument_list|(
name|str
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
argument_list|)
else|:
name|str
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
operator|)
operator|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
name|chars
index|[
name|i
index|]
operator|=
name|str
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
expr_stmt|;
block|}
name|QTextCodec
operator|::
name|ConverterState
name|state
decl_stmt|;
name|state
operator|.
name|flags
operator|=
name|QTextCodec
operator|::
name|ConvertInvalidToNull
expr_stmt|;
name|QByteArray
name|ba
init|=
name|_codec
operator|->
name|fromUnicode
argument_list|(
name|chars
argument_list|,
name|len
argument_list|,
operator|&
name|state
argument_list|)
decl_stmt|;
if|if
condition|(
name|ba
operator|.
name|length
argument_list|()
operator|==
literal|2
operator|*
name|len
condition|)
block|{
comment|// double byte encoding
specifier|const
name|uchar
modifier|*
name|data
init|=
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|ba
operator|.
name|constData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|ushort
operator|)
name|data
index|[
literal|0
index|]
operator|<<
literal|8
operator|)
operator|+
name|data
index|[
literal|1
index|]
expr_stmt|;
name|data
operator|+=
literal|2
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|uchar
modifier|*
name|data
init|=
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|ba
operator|.
name|constData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
operator|=
operator|(
name|ushort
operator|)
name|data
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|i
init|=
name|len
decl_stmt|;
specifier|const
name|QChar
modifier|*
name|c
init|=
name|str
operator|+
name|len
decl_stmt|;
if|if
condition|(
name|mirrored
condition|)
block|{
while|while
condition|(
name|c
operator|!=
name|str
condition|)
name|glyphs
operator|->
name|glyphs
index|[
operator|--
name|i
index|]
operator|=
operator|(
operator|--
name|c
operator|)
operator|->
name|unicode
argument_list|()
operator|==
literal|0xa0
condition|?
literal|0x20
else|:
name|QChar
operator|::
name|mirroredChar
argument_list|(
name|c
operator|->
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|c
operator|!=
name|str
condition|)
name|glyphs
operator|->
name|glyphs
index|[
operator|--
name|i
index|]
operator|=
operator|(
operator|--
name|c
operator|)
operator|->
name|unicode
argument_list|()
operator|==
literal|0xa0
condition|?
literal|0x20
else|:
name|c
operator|->
name|unicode
argument_list|()
expr_stmt|;
block|}
block|}
operator|*
name|nglyphs
operator|=
name|len
expr_stmt|;
name|glyphs
operator|->
name|numGlyphs
operator|=
name|len
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|QTextEngine
operator|::
name|GlyphIndicesOnly
operator|)
condition|)
name|recalcAdvances
argument_list|(
name|glyphs
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|recalcAdvances
name|void
name|QFontEngineXLFD
operator|::
name|recalcAdvances
parameter_list|(
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|QTextEngine
operator|::
name|ShaperFlags
comment|/*flags*/
parameter_list|)
specifier|const
block|{
name|int
name|i
init|=
name|glyphs
operator|->
name|numGlyphs
decl_stmt|;
name|XCharStruct
modifier|*
name|xcs
decl_stmt|;
comment|// inlined for better performance
if|if
condition|(
operator|!
name|_fs
operator|->
name|per_char
condition|)
block|{
name|xcs
operator|=
operator|&
name|_fs
operator|->
name|min_bounds
expr_stmt|;
while|while
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
operator|--
name|i
expr_stmt|;
specifier|const
name|unsigned
name|char
name|r
init|=
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
operator|>>
literal|8
decl_stmt|;
specifier|const
name|unsigned
name|char
name|c
init|=
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
name|r
operator|>=
name|_fs
operator|->
name|min_byte1
operator|&&
name|r
operator|<=
name|_fs
operator|->
name|max_byte1
operator|&&
name|c
operator|>=
name|_fs
operator|->
name|min_char_or_byte2
operator|&&
name|c
operator|<=
name|_fs
operator|->
name|max_char_or_byte2
condition|)
block|{
name|glyphs
operator|->
name|advances_x
index|[
name|i
index|]
operator|=
name|xcs
operator|->
name|width
expr_stmt|;
block|}
else|else
block|{
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|_fs
operator|->
name|max_byte1
condition|)
block|{
name|XCharStruct
modifier|*
name|base
init|=
name|_fs
operator|->
name|per_char
operator|-
name|_fs
operator|->
name|min_char_or_byte2
decl_stmt|;
while|while
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|unsigned
name|int
name|gl
init|=
name|glyphs
operator|->
name|glyphs
index|[
operator|--
name|i
index|]
decl_stmt|;
name|xcs
operator|=
operator|(
name|gl
operator|>=
name|_fs
operator|->
name|min_char_or_byte2
operator|&&
name|gl
operator|<=
name|_fs
operator|->
name|max_char_or_byte2
operator|)
condition|?
name|base
operator|+
name|gl
else|:
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|xcs
operator|||
operator|(
operator|!
name|xcs
operator|->
name|width
operator|&&
operator|!
name|xcs
operator|->
name|ascent
operator|&&
operator|!
name|xcs
operator|->
name|descent
operator|)
condition|)
block|{
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|glyphs
operator|->
name|advances_x
index|[
name|i
index|]
operator|=
name|xcs
operator|->
name|width
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
while|while
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|xcs
operator|=
name|charStruct
argument_list|(
name|_fs
argument_list|,
name|glyphs
operator|->
name|glyphs
index|[
operator|--
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|xcs
condition|)
block|{
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|glyphs
operator|->
name|advances_x
index|[
name|i
index|]
operator|=
name|xcs
operator|->
name|width
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngineXLFD
operator|::
name|boundingBox
parameter_list|(
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
name|glyph_metrics_t
name|overall
decl_stmt|;
comment|// initialize with line height, we get the same behaviour on all platforms
name|overall
operator|.
name|y
operator|=
operator|-
name|ascent
argument_list|()
expr_stmt|;
name|overall
operator|.
name|height
operator|=
name|ascent
argument_list|()
operator|+
name|descent
argument_list|()
operator|+
literal|1
expr_stmt|;
name|QFixed
name|ymax
decl_stmt|;
name|QFixed
name|xmax
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|numGlyphs
condition|;
name|i
operator|++
control|)
block|{
name|XCharStruct
modifier|*
name|xcs
init|=
name|charStruct
argument_list|(
name|_fs
argument_list|,
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|xcs
condition|)
block|{
name|QFixed
name|x
init|=
name|overall
operator|.
name|xoff
operator|+
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|x
operator|+
name|xcs
operator|->
name|lbearing
decl_stmt|;
name|QFixed
name|y
init|=
name|overall
operator|.
name|yoff
operator|+
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|y
operator|-
name|xcs
operator|->
name|ascent
decl_stmt|;
name|overall
operator|.
name|x
operator|=
name|qMin
argument_list|(
name|overall
operator|.
name|x
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|overall
operator|.
name|y
operator|=
name|qMin
argument_list|(
name|overall
operator|.
name|y
argument_list|,
name|y
argument_list|)
expr_stmt|;
comment|// XCharStruct::rbearing is defined as distance from left edge to rightmost pixel
name|xmax
operator|=
name|qMax
argument_list|(
name|xmax
argument_list|,
name|overall
operator|.
name|xoff
operator|+
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|x
operator|+
name|xcs
operator|->
name|rbearing
argument_list|)
expr_stmt|;
name|ymax
operator|=
name|qMax
argument_list|(
name|ymax
argument_list|,
name|y
operator|+
name|xcs
operator|->
name|ascent
operator|+
name|xcs
operator|->
name|descent
argument_list|)
expr_stmt|;
name|overall
operator|.
name|xoff
operator|+=
name|glyphs
operator|.
name|advances_x
index|[
name|i
index|]
operator|+
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|glyphs
operator|.
name|justifications
index|[
name|i
index|]
operator|.
name|space_18d6
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QFixed
name|size
init|=
name|_fs
operator|->
name|ascent
decl_stmt|;
name|overall
operator|.
name|x
operator|=
name|qMin
argument_list|(
name|overall
operator|.
name|x
argument_list|,
name|overall
operator|.
name|xoff
argument_list|)
expr_stmt|;
name|overall
operator|.
name|y
operator|=
name|qMin
argument_list|(
name|overall
operator|.
name|y
argument_list|,
name|overall
operator|.
name|yoff
operator|-
name|size
argument_list|)
expr_stmt|;
name|ymax
operator|=
name|qMax
argument_list|(
name|ymax
argument_list|,
name|overall
operator|.
name|yoff
argument_list|)
expr_stmt|;
name|overall
operator|.
name|xoff
operator|+=
name|size
expr_stmt|;
name|xmax
operator|=
name|qMax
argument_list|(
name|xmax
argument_list|,
name|overall
operator|.
name|xoff
argument_list|)
expr_stmt|;
block|}
block|}
name|overall
operator|.
name|height
operator|=
name|qMax
argument_list|(
name|overall
operator|.
name|height
argument_list|,
name|ymax
operator|-
name|overall
operator|.
name|y
argument_list|)
expr_stmt|;
name|overall
operator|.
name|width
operator|=
name|xmax
operator|-
name|overall
operator|.
name|x
expr_stmt|;
return|return
name|overall
return|;
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngineXLFD
operator|::
name|boundingBox
parameter_list|(
name|glyph_t
name|glyph
parameter_list|)
block|{
name|glyph_metrics_t
name|gm
decl_stmt|;
name|XCharStruct
modifier|*
name|xcs
init|=
name|charStruct
argument_list|(
name|_fs
argument_list|,
name|glyph
argument_list|)
decl_stmt|;
if|if
condition|(
name|xcs
condition|)
block|{
comment|// XCharStruct::rbearing is defined as distance from left edge to rightmost pixel
comment|// XCharStruct::width is defined as the advance
name|gm
operator|=
name|glyph_metrics_t
argument_list|(
name|xcs
operator|->
name|lbearing
argument_list|,
operator|-
name|xcs
operator|->
name|ascent
argument_list|,
name|xcs
operator|->
name|rbearing
operator|-
name|xcs
operator|->
name|lbearing
argument_list|,
name|xcs
operator|->
name|ascent
operator|+
name|xcs
operator|->
name|descent
argument_list|,
name|xcs
operator|->
name|width
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QFixed
name|size
init|=
name|ascent
argument_list|()
decl_stmt|;
name|gm
operator|=
name|glyph_metrics_t
argument_list|(
literal|0
argument_list|,
name|size
argument_list|,
name|size
argument_list|,
name|size
argument_list|,
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|gm
return|;
block|}
end_function
begin_function
DECL|function|ascent
name|QFixed
name|QFontEngineXLFD
operator|::
name|ascent
parameter_list|()
specifier|const
block|{
return|return
name|_fs
operator|->
name|ascent
return|;
block|}
end_function
begin_function
DECL|function|descent
name|QFixed
name|QFontEngineXLFD
operator|::
name|descent
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|_fs
operator|->
name|descent
operator|-
literal|1
operator|)
return|;
block|}
end_function
begin_function
DECL|function|leading
name|QFixed
name|QFontEngineXLFD
operator|::
name|leading
parameter_list|()
specifier|const
block|{
name|QFixed
name|l
init|=
name|QFixed
argument_list|(
name|qMin
argument_list|<
name|int
argument_list|>
argument_list|(
name|_fs
operator|->
name|ascent
argument_list|,
name|_fs
operator|->
name|max_bounds
operator|.
name|ascent
argument_list|)
operator|+
name|qMin
argument_list|<
name|int
argument_list|>
argument_list|(
name|_fs
operator|->
name|descent
argument_list|,
name|_fs
operator|->
name|max_bounds
operator|.
name|descent
argument_list|)
argument_list|)
operator|*
name|QFixed
operator|::
name|fromReal
argument_list|(
literal|0.15
argument_list|)
decl_stmt|;
return|return
name|l
operator|.
name|ceil
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|maxCharWidth
name|qreal
name|QFontEngineXLFD
operator|::
name|maxCharWidth
parameter_list|()
specifier|const
block|{
return|return
name|_fs
operator|->
name|max_bounds
operator|.
name|width
return|;
block|}
end_function
begin_comment
comment|// Loads the font for the specified script
end_comment
begin_function
DECL|function|maxIndex
specifier|static
specifier|inline
name|int
name|maxIndex
parameter_list|(
name|XFontStruct
modifier|*
name|f
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|f
operator|->
name|max_byte1
operator|-
name|f
operator|->
name|min_byte1
operator|)
operator|*
operator|(
name|f
operator|->
name|max_char_or_byte2
operator|-
name|f
operator|->
name|min_char_or_byte2
operator|+
literal|1
operator|)
operator|)
operator|+
name|f
operator|->
name|max_char_or_byte2
operator|-
name|f
operator|->
name|min_char_or_byte2
operator|)
return|;
block|}
end_function
begin_function
DECL|function|minLeftBearing
name|qreal
name|QFontEngineXLFD
operator|::
name|minLeftBearing
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|lbearing
operator|==
name|SHRT_MIN
condition|)
block|{
if|if
condition|(
name|_fs
operator|->
name|per_char
condition|)
block|{
name|XCharStruct
modifier|*
name|cs
init|=
name|_fs
operator|->
name|per_char
decl_stmt|;
name|int
name|nc
init|=
name|maxIndex
argument_list|(
name|_fs
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|mx
init|=
name|cs
operator|->
name|lbearing
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|1
init|;
name|c
operator|<
name|nc
condition|;
name|c
operator|++
control|)
block|{
comment|// ignore the bearings for characters whose ink is
comment|// completely outside the normal bounding box
if|if
condition|(
operator|(
name|cs
index|[
name|c
index|]
operator|.
name|lbearing
operator|<=
literal|0
operator|&&
name|cs
index|[
name|c
index|]
operator|.
name|rbearing
operator|<=
literal|0
operator|)
operator|||
operator|(
name|cs
index|[
name|c
index|]
operator|.
name|lbearing
operator|>=
name|cs
index|[
name|c
index|]
operator|.
name|width
operator|&&
name|cs
index|[
name|c
index|]
operator|.
name|rbearing
operator|>=
name|cs
index|[
name|c
index|]
operator|.
name|width
operator|)
condition|)
continue|continue;
name|int
name|nmx
init|=
name|cs
index|[
name|c
index|]
operator|.
name|lbearing
decl_stmt|;
if|if
condition|(
name|nmx
operator|<
name|mx
condition|)
name|mx
operator|=
name|nmx
expr_stmt|;
block|}
operator|(
operator|(
name|QFontEngineXLFD
operator|*
operator|)
name|this
operator|)
operator|->
name|lbearing
operator|=
name|mx
expr_stmt|;
block|}
else|else
operator|(
operator|(
name|QFontEngineXLFD
operator|*
operator|)
name|this
operator|)
operator|->
name|lbearing
operator|=
name|_fs
operator|->
name|min_bounds
operator|.
name|lbearing
expr_stmt|;
block|}
return|return
name|lbearing
return|;
block|}
end_function
begin_function
DECL|function|minRightBearing
name|qreal
name|QFontEngineXLFD
operator|::
name|minRightBearing
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|rbearing
operator|==
name|SHRT_MIN
condition|)
block|{
if|if
condition|(
name|_fs
operator|->
name|per_char
condition|)
block|{
name|XCharStruct
modifier|*
name|cs
init|=
name|_fs
operator|->
name|per_char
decl_stmt|;
name|int
name|nc
init|=
name|maxIndex
argument_list|(
name|_fs
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|mx
init|=
name|cs
operator|->
name|rbearing
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|1
init|;
name|c
operator|<
name|nc
condition|;
name|c
operator|++
control|)
block|{
comment|// ignore the bearings for characters whose ink is
comment|// completely outside the normal bounding box
if|if
condition|(
operator|(
name|cs
index|[
name|c
index|]
operator|.
name|lbearing
operator|<=
literal|0
operator|&&
name|cs
index|[
name|c
index|]
operator|.
name|rbearing
operator|<=
literal|0
operator|)
operator|||
operator|(
name|cs
index|[
name|c
index|]
operator|.
name|lbearing
operator|>=
name|cs
index|[
name|c
index|]
operator|.
name|width
operator|&&
name|cs
index|[
name|c
index|]
operator|.
name|rbearing
operator|>=
name|cs
index|[
name|c
index|]
operator|.
name|width
operator|)
condition|)
continue|continue;
name|int
name|nmx
init|=
name|cs
index|[
name|c
index|]
operator|.
name|rbearing
decl_stmt|;
if|if
condition|(
name|nmx
operator|<
name|mx
condition|)
name|mx
operator|=
name|nmx
expr_stmt|;
block|}
operator|(
operator|(
name|QFontEngineXLFD
operator|*
operator|)
name|this
operator|)
operator|->
name|rbearing
operator|=
name|mx
expr_stmt|;
block|}
else|else
operator|(
operator|(
name|QFontEngineXLFD
operator|*
operator|)
name|this
operator|)
operator|->
name|rbearing
operator|=
name|_fs
operator|->
name|min_bounds
operator|.
name|rbearing
expr_stmt|;
block|}
return|return
name|rbearing
return|;
block|}
end_function
begin_function
DECL|function|name
specifier|const
name|char
modifier|*
name|QFontEngineXLFD
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
name|_name
return|;
block|}
end_function
begin_function
DECL|function|canRender
name|bool
name|QFontEngineXLFD
operator|::
name|canRender
parameter_list|(
specifier|const
name|QChar
modifier|*
name|string
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|QVarLengthGlyphLayoutArray
name|glyphs
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|int
name|nglyphs
init|=
name|len
decl_stmt|;
if|if
condition|(
name|stringToCMap
argument_list|(
name|string
argument_list|,
name|len
argument_list|,
operator|&
name|glyphs
argument_list|,
operator|&
name|nglyphs
argument_list|,
literal|0
argument_list|)
operator|==
literal|false
condition|)
block|{
name|glyphs
operator|.
name|resize
argument_list|(
name|nglyphs
argument_list|)
expr_stmt|;
name|stringToCMap
argument_list|(
name|string
argument_list|,
name|len
argument_list|,
operator|&
name|glyphs
argument_list|,
operator|&
name|nglyphs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|bool
name|allExist
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nglyphs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
operator|||
operator|!
name|charStruct
argument_list|(
name|_fs
argument_list|,
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|allExist
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
return|return
name|allExist
return|;
block|}
end_function
begin_function
DECL|function|bitmapForGlyphs
name|QBitmap
name|QFontEngineXLFD
operator|::
name|bitmapForGlyphs
parameter_list|(
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|,
specifier|const
name|glyph_metrics_t
modifier|&
name|metrics
parameter_list|,
name|QTextItem
operator|::
name|RenderFlags
name|flags
parameter_list|)
block|{
name|int
name|w
init|=
name|metrics
operator|.
name|width
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|metrics
operator|.
name|height
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
operator|<=
literal|0
operator|||
name|h
operator|<=
literal|0
condition|)
return|return
name|QBitmap
argument_list|()
return|;
name|QPixmapData
modifier|*
name|data
init|=
operator|new
name|QX11PixmapData
argument_list|(
name|QPixmapData
operator|::
name|BitmapType
argument_list|)
decl_stmt|;
name|data
operator|->
name|resize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|QPixmap
name|bm
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|bm
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|Qt
operator|::
name|color0
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
name|QTextItemInt
name|item
decl_stmt|;
name|item
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
name|item
operator|.
name|ascent
operator|=
operator|-
name|metrics
operator|.
name|y
expr_stmt|;
name|item
operator|.
name|descent
operator|=
name|metrics
operator|.
name|height
operator|-
name|item
operator|.
name|ascent
expr_stmt|;
name|item
operator|.
name|width
operator|=
name|metrics
operator|.
name|width
expr_stmt|;
name|item
operator|.
name|chars
operator|=
literal|0
expr_stmt|;
name|item
operator|.
name|num_chars
operator|=
literal|0
expr_stmt|;
name|item
operator|.
name|logClusters
operator|=
literal|0
expr_stmt|;
name|item
operator|.
name|glyphs
operator|=
name|glyphs
expr_stmt|;
name|item
operator|.
name|fontEngine
operator|=
name|this
expr_stmt|;
name|item
operator|.
name|f
operator|=
literal|0
expr_stmt|;
name|p
operator|.
name|drawTextItem
argument_list|(
name|QPointF
argument_list|(
operator|-
name|metrics
operator|.
name|x
operator|.
name|toReal
argument_list|()
argument_list|,
name|item
operator|.
name|ascent
operator|.
name|toReal
argument_list|()
argument_list|)
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
return|return
name|QBitmap
argument_list|(
name|bm
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|addOutlineToPath
name|void
name|QFontEngineXLFD
operator|::
name|addOutlineToPath
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|,
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|QTextItem
operator|::
name|RenderFlags
name|flags
parameter_list|)
block|{
comment|// cannot use QFontEngine::addBitmapFontToPath(), since we don't
comment|// have direct access to the glyph bitmaps, so we have to draw
comment|// onto a QBitmap, then convert to QImage, then to path
name|glyph_metrics_t
name|metrics
init|=
name|boundingBox
argument_list|(
name|glyphs
argument_list|)
decl_stmt|;
name|QImage
name|image
init|=
name|bitmapForGlyphs
argument_list|(
name|glyphs
argument_list|,
name|metrics
argument_list|,
name|flags
argument_list|)
operator|.
name|toImage
argument_list|()
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|image
operator|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Mono
argument_list|)
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|image_data
init|=
name|image
operator|.
name|bits
argument_list|()
decl_stmt|;
name|uint
name|bpl
init|=
name|image
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
comment|// from qfontengine.cpp
specifier|extern
name|void
name|qt_addBitmapToPath
argument_list|(
name|qreal
name|x0
argument_list|,
name|qreal
name|y0
argument_list|,
specifier|const
name|uchar
operator|*
name|image_data
argument_list|,
name|int
name|bpl
argument_list|,
name|int
name|w
argument_list|,
name|int
name|h
argument_list|,
name|QPainterPath
operator|*
name|path
argument_list|)
decl_stmt|;
name|qt_addBitmapToPath
argument_list|(
name|x
argument_list|,
name|y
operator|+
name|metrics
operator|.
name|y
operator|.
name|toReal
argument_list|()
argument_list|,
name|image_data
argument_list|,
name|bpl
argument_list|,
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|faceId
name|QFontEngine
operator|::
name|FaceId
name|QFontEngineXLFD
operator|::
name|faceId
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_FREETYPE
if|if
condition|(
name|face_id
operator|.
name|index
operator|==
operator|-
literal|1
condition|)
block|{
name|face_id
operator|=
name|fontFile
argument_list|(
name|_name
argument_list|,
operator|&
name|freetype
argument_list|,
operator|&
name|synth
argument_list|)
expr_stmt|;
if|if
condition|(
name|_codec
condition|)
name|face_id
operator|.
name|encoding
operator|=
name|_codec
operator|->
name|mibEnum
argument_list|()
expr_stmt|;
if|if
condition|(
name|freetype
condition|)
block|{
cast|const_cast
argument_list|<
name|QFontEngineXLFD
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|fsType
operator|=
name|freetype
operator|->
name|fsType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|face_id
operator|.
name|index
operator|=
literal|0
expr_stmt|;
name|face_id
operator|.
name|filename
operator|=
literal|'-'
operator|+
name|QFontEngine
operator|::
name|properties
argument_list|()
operator|.
name|postscriptName
expr_stmt|;
block|}
block|}
endif|#
directive|endif
return|return
name|face_id
return|;
block|}
end_function
begin_function
DECL|function|properties
name|QFontEngine
operator|::
name|Properties
name|QFontEngineXLFD
operator|::
name|properties
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|face_id
operator|.
name|index
operator|==
operator|-
literal|1
condition|)
operator|(
name|void
operator|)
name|faceId
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FREETYPE
if|if
condition|(
name|freetype
condition|)
return|return
name|freetype
operator|->
name|properties
argument_list|()
return|;
endif|#
directive|endif
return|return
name|QFontEngine
operator|::
name|properties
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getUnscaledGlyph
name|void
name|QFontEngineXLFD
operator|::
name|getUnscaledGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|glyph_metrics_t
modifier|*
name|metrics
parameter_list|)
block|{
if|if
condition|(
name|face_id
operator|.
name|index
operator|==
operator|-
literal|1
condition|)
operator|(
name|void
operator|)
name|faceId
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FREETYPE
if|if
condition|(
operator|!
name|freetype
condition|)
endif|#
directive|endif
block|{
name|QFontEngine
operator|::
name|getUnscaledGlyph
argument_list|(
name|glyph
argument_list|,
name|path
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
return|return;
block|}
ifndef|#
directive|ifndef
name|QT_NO_FREETYPE
name|freetype
operator|->
name|lock
argument_list|()
expr_stmt|;
name|FT_Face
name|face
init|=
name|freetype
operator|->
name|face
decl_stmt|;
name|FT_Set_Char_Size
argument_list|(
name|face
argument_list|,
name|face
operator|->
name|units_per_EM
operator|<<
literal|6
argument_list|,
name|face
operator|->
name|units_per_EM
operator|<<
literal|6
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|freetype
operator|->
name|xsize
operator|=
name|face
operator|->
name|units_per_EM
operator|<<
literal|6
expr_stmt|;
name|freetype
operator|->
name|ysize
operator|=
name|face
operator|->
name|units_per_EM
operator|<<
literal|6
expr_stmt|;
name|FT_Set_Transform
argument_list|(
name|face
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glyph
operator|=
name|glyphIndexToFreetypeGlyphIndex
argument_list|(
name|glyph
argument_list|)
expr_stmt|;
name|FT_Load_Glyph
argument_list|(
name|face
argument_list|,
name|glyph
argument_list|,
name|FT_LOAD_NO_BITMAP
argument_list|)
expr_stmt|;
name|int
name|left
init|=
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|horiBearingX
decl_stmt|;
name|int
name|right
init|=
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|horiBearingX
operator|+
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|width
decl_stmt|;
name|int
name|top
init|=
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|horiBearingY
decl_stmt|;
name|int
name|bottom
init|=
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|horiBearingY
operator|-
name|face
operator|->
name|glyph
operator|->
name|metrics
operator|.
name|height
decl_stmt|;
name|QFixedPoint
name|p
decl_stmt|;
name|p
operator|.
name|x
operator|=
literal|0
expr_stmt|;
name|p
operator|.
name|y
operator|=
literal|0
expr_stmt|;
name|metrics
operator|->
name|width
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|right
operator|-
name|left
argument_list|)
expr_stmt|;
name|metrics
operator|->
name|height
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|top
operator|-
name|bottom
argument_list|)
expr_stmt|;
name|metrics
operator|->
name|x
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|metrics
operator|->
name|y
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
operator|-
name|top
argument_list|)
expr_stmt|;
name|metrics
operator|->
name|xoff
operator|=
name|QFixed
operator|::
name|fromFixed
argument_list|(
name|face
operator|->
name|glyph
operator|->
name|advance
operator|.
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|FT_IS_SCALABLE
argument_list|(
name|freetype
operator|->
name|face
argument_list|)
condition|)
name|QFreetypeFace
operator|::
name|addBitmapToPath
argument_list|(
name|face
operator|->
name|glyph
argument_list|,
name|p
argument_list|,
name|path
argument_list|)
expr_stmt|;
else|else
name|QFreetypeFace
operator|::
name|addGlyphToPath
argument_list|(
name|face
argument_list|,
name|face
operator|->
name|glyph
argument_list|,
name|p
argument_list|,
name|path
argument_list|,
name|face
operator|->
name|units_per_EM
operator|<<
literal|6
argument_list|,
name|face
operator|->
name|units_per_EM
operator|<<
literal|6
argument_list|)
expr_stmt|;
name|FT_Set_Transform
argument_list|(
name|face
argument_list|,
operator|&
name|freetype
operator|->
name|matrix
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|freetype
operator|->
name|unlock
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_FREETYPE
block|}
end_function
begin_function
DECL|function|getSfntTableData
name|bool
name|QFontEngineXLFD
operator|::
name|getSfntTableData
parameter_list|(
name|uint
name|tag
parameter_list|,
name|uchar
modifier|*
name|buffer
parameter_list|,
name|uint
modifier|*
name|length
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_FREETYPE
if|if
condition|(
name|face_id
operator|.
name|index
operator|==
operator|-
literal|1
condition|)
operator|(
name|void
operator|)
name|faceId
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|freetype
condition|)
return|return
literal|false
return|;
return|return
name|freetype
operator|->
name|getSfntTable
argument_list|(
name|tag
argument_list|,
name|buffer
argument_list|,
name|length
argument_list|)
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|length
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|synthesized
name|int
name|QFontEngineXLFD
operator|::
name|synthesized
parameter_list|()
specifier|const
block|{
return|return
name|synth
return|;
block|}
end_function
begin_function
DECL|function|alphaMapForGlyph
name|QImage
name|QFontEngineXLFD
operator|::
name|alphaMapForGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|)
block|{
name|glyph_metrics_t
name|metrics
init|=
name|boundingBox
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
comment|/*     printf("a) w=%.2f, h=%.2f, xoff=%.2f, yoff=%.2f, x=%.2f, y=%.2f\n",            metrics.width.toReal(),            metrics.height.toReal(),            metrics.xoff.toReal(),            metrics.yoff.toReal(),            metrics.x.toReal(),            metrics.y.toReal()); */
name|QGlyphLayoutArray
argument_list|<
literal|1
argument_list|>
name|glyphs
decl_stmt|;
name|glyphs
operator|.
name|glyphs
index|[
literal|0
index|]
operator|=
name|glyph
expr_stmt|;
name|QImage
name|image
init|=
name|bitmapForGlyphs
argument_list|(
name|glyphs
argument_list|,
name|metrics
argument_list|)
operator|.
name|toImage
argument_list|()
decl_stmt|;
comment|//image.save(QString::fromLatin1("x11cache-%1.png").arg((int)glyph));
name|image
operator|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|colors
argument_list|(
literal|256
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|colors
index|[
name|i
index|]
operator|=
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColorTable
argument_list|(
name|colors
argument_list|)
expr_stmt|;
name|int
name|width
init|=
name|image
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|image
operator|.
name|height
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
operator|++
name|y
control|)
block|{
name|uchar
modifier|*
name|bits
init|=
name|image
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
operator|++
name|x
control|)
name|bits
index|[
name|x
index|]
operator|=
operator|~
operator|(
name|bits
index|[
name|x
index|]
operator|-
literal|1
operator|)
expr_stmt|;
block|}
return|return
name|image
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FREETYPE
end_ifndef
begin_function
DECL|function|non_locked_face
name|FT_Face
name|QFontEngineXLFD
operator|::
name|non_locked_face
parameter_list|()
specifier|const
block|{
return|return
name|freetype
condition|?
name|freetype
operator|->
name|face
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|toUnicode
name|uint
name|QFontEngineXLFD
operator|::
name|toUnicode
parameter_list|(
name|glyph_t
name|g
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|_codec
condition|)
block|{
name|QTextCodec
operator|::
name|ConverterState
name|state
decl_stmt|;
name|state
operator|.
name|flags
operator|=
name|QTextCodec
operator|::
name|ConvertInvalidToNull
expr_stmt|;
name|uchar
name|data
index|[
literal|2
index|]
decl_stmt|;
name|int
name|l
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|g
operator|>
literal|255
condition|)
block|{
name|data
index|[
literal|0
index|]
operator|=
operator|(
name|g
operator|>>
literal|8
operator|)
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|(
name|g
operator|&
literal|255
operator|)
expr_stmt|;
name|l
operator|=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|data
index|[
literal|0
index|]
operator|=
name|g
expr_stmt|;
block|}
name|QString
name|s
init|=
name|_codec
operator|->
name|toUnicode
argument_list|(
operator|(
name|char
operator|*
operator|)
name|data
argument_list|,
name|l
argument_list|,
operator|&
name|state
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|g
operator|=
name|s
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
expr_stmt|;
block|}
return|return
name|g
return|;
block|}
end_function
begin_function
DECL|function|glyphIndexToFreetypeGlyphIndex
name|glyph_t
name|QFontEngineXLFD
operator|::
name|glyphIndexToFreetypeGlyphIndex
parameter_list|(
name|glyph_t
name|g
parameter_list|)
specifier|const
block|{
return|return
name|FT_Get_Char_Index
argument_list|(
name|freetype
operator|->
name|face
argument_list|,
name|toUnicode
argument_list|(
name|g
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FONTCONFIG
end_ifndef
begin_comment
comment|// ------------------------------------------------------------------
end_comment
begin_comment
comment|// Multi FT engine
end_comment
begin_comment
comment|// ------------------------------------------------------------------
end_comment
begin_function
DECL|function|engineForPattern
specifier|static
name|QFontEngine
modifier|*
name|engineForPattern
parameter_list|(
name|FcPattern
modifier|*
name|match
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|,
name|int
name|screen
parameter_list|)
block|{
name|QFontEngineX11FT
modifier|*
name|engine
init|=
operator|new
name|QFontEngineX11FT
argument_list|(
name|match
argument_list|,
name|request
argument_list|,
name|screen
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|engine
operator|->
name|invalid
argument_list|()
condition|)
return|return
name|engine
return|;
operator|delete
name|engine
expr_stmt|;
name|QFontEngine
modifier|*
name|fe
init|=
operator|new
name|QFontEngineBox
argument_list|(
name|request
operator|.
name|pixelSize
argument_list|)
decl_stmt|;
name|fe
operator|->
name|fontDef
operator|=
name|request
expr_stmt|;
return|return
name|fe
return|;
block|}
end_function
begin_constructor
DECL|function|QFontEngineMultiFT
name|QFontEngineMultiFT
operator|::
name|QFontEngineMultiFT
parameter_list|(
name|QFontEngine
modifier|*
name|fe
parameter_list|,
name|FcPattern
modifier|*
name|matchedPattern
parameter_list|,
name|FcPattern
modifier|*
name|p
parameter_list|,
name|int
name|s
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|req
parameter_list|)
member_init_list|:
name|QFontEngineMulti
argument_list|(
literal|2
argument_list|)
member_init_list|,
name|request
argument_list|(
name|req
argument_list|)
member_init_list|,
name|pattern
argument_list|(
name|p
argument_list|)
member_init_list|,
name|fontSet
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|screen
argument_list|(
name|s
argument_list|)
block|{
name|firstEnginePattern
operator|=
name|FcPatternDuplicate
argument_list|(
name|matchedPattern
argument_list|)
expr_stmt|;
name|engines
index|[
literal|0
index|]
operator|=
name|fe
expr_stmt|;
name|engines
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|ref
operator|.
name|ref
argument_list|()
expr_stmt|;
name|fontDef
operator|=
name|engines
index|[
literal|0
index|]
operator|->
name|fontDef
expr_stmt|;
name|cache_cost
operator|=
literal|100
expr_stmt|;
name|firstFontIndex
operator|=
literal|1
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QFontEngineMultiFT
name|QFontEngineMultiFT
operator|::
name|~
name|QFontEngineMultiFT
parameter_list|()
block|{
specifier|extern
name|QMutex
modifier|*
name|qt_fontdatabase_mutex
argument_list|()
decl_stmt|;
name|QMutexLocker
name|locker
argument_list|(
name|qt_fontdatabase_mutex
argument_list|()
argument_list|)
decl_stmt|;
name|FcPatternDestroy
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstEnginePattern
condition|)
name|FcPatternDestroy
argument_list|(
name|firstEnginePattern
argument_list|)
expr_stmt|;
if|if
condition|(
name|fontSet
condition|)
name|FcFontSetDestroy
argument_list|(
name|fontSet
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|loadEngine
name|void
name|QFontEngineMultiFT
operator|::
name|loadEngine
parameter_list|(
name|int
name|at
parameter_list|)
block|{
specifier|extern
name|QMutex
modifier|*
name|qt_fontdatabase_mutex
argument_list|()
decl_stmt|;
name|QMutexLocker
name|locker
argument_list|(
name|qt_fontdatabase_mutex
argument_list|()
argument_list|)
decl_stmt|;
specifier|extern
name|QFontDef
name|qt_FcPatternToQFontDef
argument_list|(
name|FcPattern
operator|*
name|pattern
argument_list|,
specifier|const
name|QFontDef
operator|&
argument_list|)
decl_stmt|;
specifier|extern
name|FcFontSet
modifier|*
name|qt_fontSetForPattern
argument_list|(
name|FcPattern
operator|*
name|pattern
argument_list|,
specifier|const
name|QFontDef
operator|&
name|request
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|at
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fontSet
condition|)
block|{
name|fontSet
operator|=
name|qt_fontSetForPattern
argument_list|(
name|pattern
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// it may happen that the fontset of fallbacks consists of only one font. In this case we
comment|// have to fall back to the box fontengine as we cannot render the glyph.
if|if
condition|(
name|fontSet
operator|->
name|nfont
operator|==
literal|1
operator|&&
name|at
operator|==
literal|1
operator|&&
name|engines
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|engines
operator|.
name|at
argument_list|(
name|at
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QFontEngine
modifier|*
name|fe
init|=
operator|new
name|QFontEngineBox
argument_list|(
name|request
operator|.
name|pixelSize
argument_list|)
decl_stmt|;
name|fe
operator|->
name|fontDef
operator|=
name|request
expr_stmt|;
name|engines
index|[
name|at
index|]
operator|=
name|fe
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|firstEnginePattern
condition|)
block|{
if|if
condition|(
operator|!
name|FcPatternEqual
argument_list|(
name|firstEnginePattern
argument_list|,
name|fontSet
operator|->
name|fonts
index|[
literal|0
index|]
argument_list|)
condition|)
name|firstFontIndex
operator|=
literal|0
expr_stmt|;
name|FcPatternDestroy
argument_list|(
name|firstEnginePattern
argument_list|)
expr_stmt|;
name|firstEnginePattern
operator|=
literal|0
expr_stmt|;
block|}
name|engines
operator|.
name|resize
argument_list|(
name|fontSet
operator|->
name|nfont
operator|+
literal|1
operator|-
name|firstFontIndex
argument_list|)
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|at
operator|<
name|engines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|engines
operator|.
name|at
argument_list|(
name|at
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|FcPattern
modifier|*
name|match
init|=
name|FcFontRenderPrepare
argument_list|(
name|NULL
argument_list|,
name|pattern
argument_list|,
name|fontSet
operator|->
name|fonts
index|[
name|at
operator|+
name|firstFontIndex
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
name|QFontDef
name|fontDef
init|=
name|qt_FcPatternToQFontDef
argument_list|(
name|match
argument_list|,
name|this
operator|->
name|request
argument_list|)
decl_stmt|;
comment|// note: we use -1 for the script to make sure that we keep real
comment|// FT engines separate from Multi engines in the font cache
name|QFontCache
operator|::
name|Key
name|key
argument_list|(
name|fontDef
argument_list|,
operator|-
literal|1
argument_list|,
name|screen
argument_list|)
decl_stmt|;
name|QFontEngine
modifier|*
name|fontEngine
init|=
name|QFontCache
operator|::
name|instance
argument_list|()
operator|->
name|findEngine
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fontEngine
condition|)
block|{
name|fontEngine
operator|=
name|engineForPattern
argument_list|(
name|match
argument_list|,
name|request
argument_list|,
name|screen
argument_list|)
expr_stmt|;
name|QFontCache
operator|::
name|instance
argument_list|()
operator|->
name|insertEngine
argument_list|(
name|key
argument_list|,
name|fontEngine
argument_list|)
expr_stmt|;
block|}
name|FcPatternDestroy
argument_list|(
name|match
argument_list|)
expr_stmt|;
name|fontEngine
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|engines
index|[
name|at
index|]
operator|=
name|fontEngine
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------
end_comment
begin_comment
comment|// X11 FT engine
end_comment
begin_comment
comment|// ------------------------------------------------------------------
end_comment
begin_function
DECL|function|qt_x11ft_convert_pattern
name|Q_GUI_EXPORT
name|void
name|qt_x11ft_convert_pattern
parameter_list|(
name|FcPattern
modifier|*
name|pattern
parameter_list|,
name|QByteArray
modifier|*
name|file_name
parameter_list|,
name|int
modifier|*
name|index
parameter_list|,
name|bool
modifier|*
name|antialias
parameter_list|)
block|{
name|FcChar8
modifier|*
name|fileName
decl_stmt|;
name|FcPatternGetString
argument_list|(
name|pattern
argument_list|,
name|FC_FILE
argument_list|,
literal|0
argument_list|,
operator|&
name|fileName
argument_list|)
expr_stmt|;
operator|*
name|file_name
operator|=
operator|(
specifier|const
name|char
operator|*
operator|)
name|fileName
expr_stmt|;
if|if
condition|(
operator|!
name|FcPatternGetInteger
argument_list|(
name|pattern
argument_list|,
name|FC_INDEX
argument_list|,
literal|0
argument_list|,
name|index
argument_list|)
condition|)
name|index
operator|=
literal|0
expr_stmt|;
name|FcBool
name|b
decl_stmt|;
if|if
condition|(
name|FcPatternGetBool
argument_list|(
name|pattern
argument_list|,
name|FC_ANTIALIAS
argument_list|,
literal|0
argument_list|,
operator|&
name|b
argument_list|)
operator|==
name|FcResultMatch
condition|)
operator|*
name|antialias
operator|=
name|b
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QFontEngineX11FT
name|QFontEngineX11FT
operator|::
name|QFontEngineX11FT
parameter_list|(
name|FcPattern
modifier|*
name|pattern
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|fd
parameter_list|,
name|int
name|screen
parameter_list|)
member_init_list|:
name|QFontEngineFT
argument_list|(
name|fd
argument_list|)
block|{
comment|//     FcPatternPrint(pattern);
name|bool
name|antialias
init|=
name|X11
operator|->
name|fc_antialias
decl_stmt|;
name|QByteArray
name|file_name
decl_stmt|;
name|int
name|face_index
decl_stmt|;
name|qt_x11ft_convert_pattern
argument_list|(
name|pattern
argument_list|,
operator|&
name|file_name
argument_list|,
operator|&
name|face_index
argument_list|,
operator|&
name|antialias
argument_list|)
expr_stmt|;
name|QFontEngine
operator|::
name|FaceId
name|face_id
decl_stmt|;
name|face_id
operator|.
name|filename
operator|=
name|file_name
expr_stmt|;
name|face_id
operator|.
name|index
operator|=
name|face_index
expr_stmt|;
name|canUploadGlyphsToServer
operator|=
name|QApplication
operator|::
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_X11InitThreads
argument_list|)
operator|||
operator|(
name|qApp
operator|->
name|thread
argument_list|()
operator|==
name|QThread
operator|::
name|currentThread
argument_list|()
operator|)
expr_stmt|;
name|subpixelType
operator|=
name|Subpixel_None
expr_stmt|;
if|if
condition|(
name|antialias
condition|)
block|{
name|int
name|subpixel
init|=
name|X11
operator|->
name|display
condition|?
name|X11
operator|->
name|screens
index|[
name|screen
index|]
operator|.
name|subpixel
else|:
name|FC_RGBA_UNKNOWN
decl_stmt|;
if|if
condition|(
name|subpixel
operator|==
name|FC_RGBA_UNKNOWN
condition|)
operator|(
name|void
operator|)
name|FcPatternGetInteger
argument_list|(
name|pattern
argument_list|,
name|FC_RGBA
argument_list|,
literal|0
argument_list|,
operator|&
name|subpixel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|antialias
operator|||
name|subpixel
operator|==
name|FC_RGBA_UNKNOWN
condition|)
name|subpixel
operator|=
name|FC_RGBA_NONE
expr_stmt|;
switch|switch
condition|(
name|subpixel
condition|)
block|{
case|case
name|FC_RGBA_NONE
case|:
name|subpixelType
operator|=
name|Subpixel_None
expr_stmt|;
break|break;
case|case
name|FC_RGBA_RGB
case|:
name|subpixelType
operator|=
name|Subpixel_RGB
expr_stmt|;
break|break;
case|case
name|FC_RGBA_BGR
case|:
name|subpixelType
operator|=
name|Subpixel_BGR
expr_stmt|;
break|break;
case|case
name|FC_RGBA_VRGB
case|:
name|subpixelType
operator|=
name|Subpixel_VRGB
expr_stmt|;
break|break;
case|case
name|FC_RGBA_VBGR
case|:
name|subpixelType
operator|=
name|Subpixel_VBGR
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|fd
operator|.
name|hintingPreference
operator|!=
name|QFont
operator|::
name|PreferDefaultHinting
condition|)
block|{
switch|switch
condition|(
name|fd
operator|.
name|hintingPreference
condition|)
block|{
case|case
name|QFont
operator|::
name|PreferNoHinting
case|:
name|default_hint_style
operator|=
name|HintNone
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|PreferVerticalHinting
case|:
name|default_hint_style
operator|=
name|HintLight
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|PreferFullHinting
case|:
default|default:
name|default_hint_style
operator|=
name|HintFull
expr_stmt|;
break|break;
block|}
block|}
ifdef|#
directive|ifdef
name|FC_HINT_STYLE
else|else
block|{
name|int
name|hint_style
init|=
literal|0
decl_stmt|;
comment|// Try to use Xft.hintstyle from XDefaults first if running in GNOME, to match
comment|// the behavior of cairo
if|if
condition|(
name|X11
operator|->
name|fc_hint_style
operator|>
operator|-
literal|1
operator|&&
name|X11
operator|->
name|desktopEnvironment
operator|==
name|DE_GNOME
condition|)
name|hint_style
operator|=
name|X11
operator|->
name|fc_hint_style
expr_stmt|;
elseif|else
if|if
condition|(
name|FcPatternGetInteger
argument_list|(
name|pattern
argument_list|,
name|FC_HINT_STYLE
argument_list|,
literal|0
argument_list|,
operator|&
name|hint_style
argument_list|)
operator|==
name|FcResultNoMatch
operator|&&
name|X11
operator|->
name|fc_hint_style
operator|>
operator|-
literal|1
condition|)
name|hint_style
operator|=
name|X11
operator|->
name|fc_hint_style
expr_stmt|;
switch|switch
condition|(
name|hint_style
condition|)
block|{
case|case
name|FC_HINT_NONE
case|:
name|default_hint_style
operator|=
name|HintNone
expr_stmt|;
break|break;
case|case
name|FC_HINT_SLIGHT
case|:
name|default_hint_style
operator|=
name|HintLight
expr_stmt|;
break|break;
case|case
name|FC_HINT_MEDIUM
case|:
name|default_hint_style
operator|=
name|HintMedium
expr_stmt|;
break|break;
default|default:
name|default_hint_style
operator|=
name|HintFull
expr_stmt|;
break|break;
block|}
block|}
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|FC_AUTOHINT
argument_list|)
operator|&&
name|defined
argument_list|(
name|FT_LOAD_FORCE_AUTOHINT
argument_list|)
block|{
name|bool
name|autohint
init|=
literal|false
decl_stmt|;
name|FcBool
name|b
decl_stmt|;
if|if
condition|(
name|FcPatternGetBool
argument_list|(
name|pattern
argument_list|,
name|FC_AUTOHINT
argument_list|,
literal|0
argument_list|,
operator|&
name|b
argument_list|)
operator|==
name|FcResultMatch
condition|)
name|autohint
operator|=
name|b
expr_stmt|;
if|if
condition|(
name|autohint
condition|)
name|default_load_flags
operator||=
name|FT_LOAD_FORCE_AUTOHINT
expr_stmt|;
block|}
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|FC_LCD_FILTER
argument_list|)
operator|&&
name|defined
argument_list|(
name|FT_LCD_FILTER_H
argument_list|)
block|{
name|int
name|filter
init|=
name|FC_LCD_FILTER_NONE
decl_stmt|;
if|if
condition|(
name|FcPatternGetInteger
argument_list|(
name|pattern
argument_list|,
name|FC_LCD_FILTER
argument_list|,
literal|0
argument_list|,
operator|&
name|filter
argument_list|)
operator|==
name|FcResultMatch
condition|)
block|{
switch|switch
condition|(
name|filter
condition|)
block|{
case|case
name|FC_LCD_FILTER_NONE
case|:
name|lcdFilterType
operator|=
name|FT_LCD_FILTER_NONE
expr_stmt|;
break|break;
case|case
name|FC_LCD_FILTER_DEFAULT
case|:
name|lcdFilterType
operator|=
name|FT_LCD_FILTER_DEFAULT
expr_stmt|;
break|break;
case|case
name|FC_LCD_FILTER_LIGHT
case|:
name|lcdFilterType
operator|=
name|FT_LCD_FILTER_LIGHT
expr_stmt|;
break|break;
case|case
name|FC_LCD_FILTER_LEGACY
case|:
name|lcdFilterType
operator|=
name|FT_LCD_FILTER_LEGACY
expr_stmt|;
break|break;
default|default:
comment|// new unknown lcd filter type?!
break|break;
block|}
block|}
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|FC_EMBEDDED_BITMAP
block|{
name|FcBool
name|b
decl_stmt|;
if|if
condition|(
name|FcPatternGetBool
argument_list|(
name|pattern
argument_list|,
name|FC_EMBEDDED_BITMAP
argument_list|,
literal|0
argument_list|,
operator|&
name|b
argument_list|)
operator|==
name|FcResultMatch
condition|)
name|embeddedbitmap
operator|=
name|b
expr_stmt|;
block|}
endif|#
directive|endif
name|GlyphFormat
name|defaultFormat
init|=
name|Format_None
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
if|if
condition|(
name|X11
operator|->
name|use_xrender
condition|)
block|{
name|int
name|format
init|=
name|PictStandardA8
decl_stmt|;
if|if
condition|(
operator|!
name|antialias
condition|)
name|format
operator|=
name|PictStandardA1
expr_stmt|;
elseif|else
if|if
condition|(
name|subpixelType
operator|==
name|Subpixel_RGB
operator|||
name|subpixelType
operator|==
name|Subpixel_BGR
operator|||
name|subpixelType
operator|==
name|Subpixel_VRGB
operator|||
name|subpixelType
operator|==
name|Subpixel_VBGR
condition|)
name|format
operator|=
name|PictStandardARGB32
expr_stmt|;
name|xglyph_format
operator|=
name|format
expr_stmt|;
if|if
condition|(
name|subpixelType
operator|!=
name|QFontEngineFT
operator|::
name|Subpixel_None
condition|)
name|defaultFormat
operator|=
name|Format_A32
expr_stmt|;
elseif|else
if|if
condition|(
name|antialias
condition|)
name|defaultFormat
operator|=
name|Format_A8
expr_stmt|;
else|else
name|defaultFormat
operator|=
name|Format_Mono
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|init
argument_list|(
name|face_id
argument_list|,
name|antialias
argument_list|,
name|defaultFormat
argument_list|)
condition|)
return|return;
if|if
condition|(
operator|!
name|freetype
operator|->
name|charset
condition|)
block|{
name|FcCharSet
modifier|*
name|cs
decl_stmt|;
name|FcPatternGetCharSet
argument_list|(
name|pattern
argument_list|,
name|FC_CHARSET
argument_list|,
literal|0
argument_list|,
operator|&
name|cs
argument_list|)
expr_stmt|;
name|freetype
operator|->
name|charset
operator|=
name|FcCharSetCopy
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QFontEngineX11FT
name|QFontEngineX11FT
operator|::
name|~
name|QFontEngineX11FT
parameter_list|()
block|{
name|freeGlyphSets
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|allocateServerGlyphSet
name|unsigned
name|long
name|QFontEngineX11FT
operator|::
name|allocateServerGlyphSet
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
if|if
condition|(
operator|!
name|canUploadGlyphsToServer
operator|||
operator|!
name|X11
operator|->
name|use_xrender
condition|)
return|return
literal|0
return|;
return|return
name|XRenderCreateGlyphSet
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|XRenderFindStandardFormat
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|xglyph_format
argument_list|)
argument_list|)
return|;
else|#
directive|else
return|return
literal|0
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|freeServerGlyphSet
name|void
name|QFontEngineX11FT
operator|::
name|freeServerGlyphSet
parameter_list|(
name|unsigned
name|long
name|id
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
if|if
condition|(
operator|!
name|id
condition|)
return|return;
name|XRenderFreeGlyphSet
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|id
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|uploadGlyphToServer
name|bool
name|QFontEngineX11FT
operator|::
name|uploadGlyphToServer
parameter_list|(
name|QGlyphSet
modifier|*
name|set
parameter_list|,
name|uint
name|glyphid
parameter_list|,
name|Glyph
modifier|*
name|g
parameter_list|,
name|GlyphInfo
modifier|*
name|info
parameter_list|,
name|int
name|glyphDataSize
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
if|if
condition|(
operator|!
name|canUploadGlyphsToServer
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|g
operator|->
name|format
operator|==
name|Format_Mono
condition|)
block|{
comment|/*          * swap bit order around; FreeType is always MSBFirst          */
if|if
condition|(
name|BitmapBitOrder
argument_list|(
name|X11
operator|->
name|display
argument_list|)
operator|!=
name|MSBFirst
condition|)
block|{
name|unsigned
name|char
modifier|*
name|line
init|=
name|g
operator|->
name|data
decl_stmt|;
name|int
name|i
init|=
name|glyphDataSize
decl_stmt|;
while|while
condition|(
name|i
operator|--
condition|)
block|{
name|unsigned
name|char
name|c
decl_stmt|;
name|c
operator|=
operator|*
name|line
expr_stmt|;
name|c
operator|=
operator|(
operator|(
name|c
operator|<<
literal|1
operator|)
operator|&
literal|0xaa
operator|)
operator||
operator|(
operator|(
name|c
operator|>>
literal|1
operator|)
operator|&
literal|0x55
operator|)
expr_stmt|;
name|c
operator|=
operator|(
operator|(
name|c
operator|<<
literal|2
operator|)
operator|&
literal|0xcc
operator|)
operator||
operator|(
operator|(
name|c
operator|>>
literal|2
operator|)
operator|&
literal|0x33
operator|)
expr_stmt|;
name|c
operator|=
operator|(
operator|(
name|c
operator|<<
literal|4
operator|)
operator|&
literal|0xf0
operator|)
operator||
operator|(
operator|(
name|c
operator|>>
literal|4
operator|)
operator|&
literal|0x0f
operator|)
expr_stmt|;
operator|*
name|line
operator|++
operator|=
name|c
expr_stmt|;
block|}
block|}
block|}
operator|::
name|Glyph
name|xglyph
init|=
name|glyphid
decl_stmt|;
name|XRenderAddGlyphs
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|set
operator|->
name|id
argument_list|,
operator|&
name|xglyph
argument_list|,
name|info
argument_list|,
literal|1
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|g
operator|->
name|data
argument_list|,
name|glyphDataSize
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|g
operator|->
name|data
expr_stmt|;
name|g
operator|->
name|data
operator|=
literal|0
expr_stmt|;
name|g
operator|->
name|format
operator|=
name|Format_None
expr_stmt|;
name|g
operator|->
name|uploadedToServer
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|cloneWithSize
name|QFontEngine
modifier|*
name|QFontEngineX11FT
operator|::
name|cloneWithSize
parameter_list|(
name|qreal
name|pixelSize
parameter_list|)
specifier|const
block|{
name|QFontDef
name|fontDef
decl_stmt|;
name|fontDef
operator|.
name|pixelSize
operator|=
name|pixelSize
expr_stmt|;
name|QFontEngineX11FT
modifier|*
name|fe
init|=
operator|new
name|QFontEngineX11FT
argument_list|(
name|fontDef
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fe
operator|->
name|initFromFontEngine
argument_list|(
name|this
argument_list|)
condition|)
block|{
operator|delete
name|fe
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
name|fe
operator|->
name|xglyph_format
operator|=
name|xglyph_format
expr_stmt|;
endif|#
directive|endif
return|return
name|fe
return|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_FONTCONFIG
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
