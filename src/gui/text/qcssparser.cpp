begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qcssparser_p.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qicon.h>
end_include
begin_include
include|#
directive|include
file|<qcolor.h>
end_include
begin_include
include|#
directive|include
file|<qfont.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<qfontmetrics.h>
end_include
begin_include
include|#
directive|include
file|<qbrush.h>
end_include
begin_include
include|#
directive|include
file|<qimagereader.h>
end_include
begin_include
include|#
directive|include
file|"private/qfunctions_p.h"
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CSSPARSER
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qcssscanner.cpp"
end_include
begin_using
using|using
namespace|namespace
name|QCss
namespace|;
end_using
begin_struct
DECL|struct|QCssKnownValue
struct|struct
name|QCssKnownValue
block|{
DECL|member|name
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
DECL|member|id
name|quint64
name|id
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|properties
specifier|static
specifier|const
name|QCssKnownValue
name|properties
index|[
name|NumProperties
operator|-
literal|1
index|]
init|=
block|{
block|{
literal|"-qt-background-role"
block|,
name|QtBackgroundRole
block|}
block|,
block|{
literal|"-qt-block-indent"
block|,
name|QtBlockIndent
block|}
block|,
block|{
literal|"-qt-list-indent"
block|,
name|QtListIndent
block|}
block|,
block|{
literal|"-qt-list-number-prefix"
block|,
name|QtListNumberPrefix
block|}
block|,
block|{
literal|"-qt-list-number-suffix"
block|,
name|QtListNumberSuffix
block|}
block|,
block|{
literal|"-qt-paragraph-type"
block|,
name|QtParagraphType
block|}
block|,
block|{
literal|"-qt-style-features"
block|,
name|QtStyleFeatures
block|}
block|,
block|{
literal|"-qt-table-type"
block|,
name|QtTableType
block|}
block|,
block|{
literal|"-qt-user-state"
block|,
name|QtUserState
block|}
block|,
block|{
literal|"alternate-background-color"
block|,
name|QtAlternateBackground
block|}
block|,
block|{
literal|"background"
block|,
name|Background
block|}
block|,
block|{
literal|"background-attachment"
block|,
name|BackgroundAttachment
block|}
block|,
block|{
literal|"background-clip"
block|,
name|BackgroundClip
block|}
block|,
block|{
literal|"background-color"
block|,
name|BackgroundColor
block|}
block|,
block|{
literal|"background-image"
block|,
name|BackgroundImage
block|}
block|,
block|{
literal|"background-origin"
block|,
name|BackgroundOrigin
block|}
block|,
block|{
literal|"background-position"
block|,
name|BackgroundPosition
block|}
block|,
block|{
literal|"background-repeat"
block|,
name|BackgroundRepeat
block|}
block|,
block|{
literal|"border"
block|,
name|Border
block|}
block|,
block|{
literal|"border-bottom"
block|,
name|BorderBottom
block|}
block|,
block|{
literal|"border-bottom-color"
block|,
name|BorderBottomColor
block|}
block|,
block|{
literal|"border-bottom-left-radius"
block|,
name|BorderBottomLeftRadius
block|}
block|,
block|{
literal|"border-bottom-right-radius"
block|,
name|BorderBottomRightRadius
block|}
block|,
block|{
literal|"border-bottom-style"
block|,
name|BorderBottomStyle
block|}
block|,
block|{
literal|"border-bottom-width"
block|,
name|BorderBottomWidth
block|}
block|,
block|{
literal|"border-color"
block|,
name|BorderColor
block|}
block|,
block|{
literal|"border-image"
block|,
name|BorderImage
block|}
block|,
block|{
literal|"border-left"
block|,
name|BorderLeft
block|}
block|,
block|{
literal|"border-left-color"
block|,
name|BorderLeftColor
block|}
block|,
block|{
literal|"border-left-style"
block|,
name|BorderLeftStyle
block|}
block|,
block|{
literal|"border-left-width"
block|,
name|BorderLeftWidth
block|}
block|,
block|{
literal|"border-radius"
block|,
name|BorderRadius
block|}
block|,
block|{
literal|"border-right"
block|,
name|BorderRight
block|}
block|,
block|{
literal|"border-right-color"
block|,
name|BorderRightColor
block|}
block|,
block|{
literal|"border-right-style"
block|,
name|BorderRightStyle
block|}
block|,
block|{
literal|"border-right-width"
block|,
name|BorderRightWidth
block|}
block|,
block|{
literal|"border-style"
block|,
name|BorderStyles
block|}
block|,
block|{
literal|"border-top"
block|,
name|BorderTop
block|}
block|,
block|{
literal|"border-top-color"
block|,
name|BorderTopColor
block|}
block|,
block|{
literal|"border-top-left-radius"
block|,
name|BorderTopLeftRadius
block|}
block|,
block|{
literal|"border-top-right-radius"
block|,
name|BorderTopRightRadius
block|}
block|,
block|{
literal|"border-top-style"
block|,
name|BorderTopStyle
block|}
block|,
block|{
literal|"border-top-width"
block|,
name|BorderTopWidth
block|}
block|,
block|{
literal|"border-width"
block|,
name|BorderWidth
block|}
block|,
block|{
literal|"bottom"
block|,
name|Bottom
block|}
block|,
block|{
literal|"color"
block|,
name|Color
block|}
block|,
block|{
literal|"float"
block|,
name|Float
block|}
block|,
block|{
literal|"font"
block|,
name|Font
block|}
block|,
block|{
literal|"font-family"
block|,
name|FontFamily
block|}
block|,
block|{
literal|"font-size"
block|,
name|FontSize
block|}
block|,
block|{
literal|"font-style"
block|,
name|FontStyle
block|}
block|,
block|{
literal|"font-variant"
block|,
name|FontVariant
block|}
block|,
block|{
literal|"font-weight"
block|,
name|FontWeight
block|}
block|,
block|{
literal|"height"
block|,
name|Height
block|}
block|,
block|{
literal|"image"
block|,
name|QtImage
block|}
block|,
block|{
literal|"image-position"
block|,
name|QtImageAlignment
block|}
block|,
block|{
literal|"left"
block|,
name|Left
block|}
block|,
block|{
literal|"line-height"
block|,
name|LineHeight
block|}
block|,
block|{
literal|"list-style"
block|,
name|ListStyle
block|}
block|,
block|{
literal|"list-style-type"
block|,
name|ListStyleType
block|}
block|,
block|{
literal|"margin"
block|,
name|Margin
block|}
block|,
block|{
literal|"margin-bottom"
block|,
name|MarginBottom
block|}
block|,
block|{
literal|"margin-left"
block|,
name|MarginLeft
block|}
block|,
block|{
literal|"margin-right"
block|,
name|MarginRight
block|}
block|,
block|{
literal|"margin-top"
block|,
name|MarginTop
block|}
block|,
block|{
literal|"max-height"
block|,
name|MaximumHeight
block|}
block|,
block|{
literal|"max-width"
block|,
name|MaximumWidth
block|}
block|,
block|{
literal|"min-height"
block|,
name|MinimumHeight
block|}
block|,
block|{
literal|"min-width"
block|,
name|MinimumWidth
block|}
block|,
block|{
literal|"outline"
block|,
name|Outline
block|}
block|,
block|{
literal|"outline-bottom-left-radius"
block|,
name|OutlineBottomLeftRadius
block|}
block|,
block|{
literal|"outline-bottom-right-radius"
block|,
name|OutlineBottomRightRadius
block|}
block|,
block|{
literal|"outline-color"
block|,
name|OutlineColor
block|}
block|,
block|{
literal|"outline-offset"
block|,
name|OutlineOffset
block|}
block|,
block|{
literal|"outline-radius"
block|,
name|OutlineRadius
block|}
block|,
block|{
literal|"outline-style"
block|,
name|OutlineStyle
block|}
block|,
block|{
literal|"outline-top-left-radius"
block|,
name|OutlineTopLeftRadius
block|}
block|,
block|{
literal|"outline-top-right-radius"
block|,
name|OutlineTopRightRadius
block|}
block|,
block|{
literal|"outline-width"
block|,
name|OutlineWidth
block|}
block|,
block|{
literal|"padding"
block|,
name|Padding
block|}
block|,
block|{
literal|"padding-bottom"
block|,
name|PaddingBottom
block|}
block|,
block|{
literal|"padding-left"
block|,
name|PaddingLeft
block|}
block|,
block|{
literal|"padding-right"
block|,
name|PaddingRight
block|}
block|,
block|{
literal|"padding-top"
block|,
name|PaddingTop
block|}
block|,
block|{
literal|"page-break-after"
block|,
name|PageBreakAfter
block|}
block|,
block|{
literal|"page-break-before"
block|,
name|PageBreakBefore
block|}
block|,
block|{
literal|"position"
block|,
name|Position
block|}
block|,
block|{
literal|"right"
block|,
name|Right
block|}
block|,
block|{
literal|"selection-background-color"
block|,
name|QtSelectionBackground
block|}
block|,
block|{
literal|"selection-color"
block|,
name|QtSelectionForeground
block|}
block|,
block|{
literal|"spacing"
block|,
name|QtSpacing
block|}
block|,
block|{
literal|"subcontrol-origin"
block|,
name|QtOrigin
block|}
block|,
block|{
literal|"subcontrol-position"
block|,
name|QtPosition
block|}
block|,
block|{
literal|"text-align"
block|,
name|TextAlignment
block|}
block|,
block|{
literal|"text-decoration"
block|,
name|TextDecoration
block|}
block|,
block|{
literal|"text-indent"
block|,
name|TextIndent
block|}
block|,
block|{
literal|"text-transform"
block|,
name|TextTransform
block|}
block|,
block|{
literal|"text-underline-style"
block|,
name|TextUnderlineStyle
block|}
block|,
block|{
literal|"top"
block|,
name|Top
block|}
block|,
block|{
literal|"vertical-align"
block|,
name|VerticalAlignment
block|}
block|,
block|{
literal|"white-space"
block|,
name|Whitespace
block|}
block|,
block|{
literal|"width"
block|,
name|Width
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|values
specifier|static
specifier|const
name|QCssKnownValue
name|values
index|[
name|NumKnownValues
operator|-
literal|1
index|]
init|=
block|{
block|{
literal|"active"
block|,
name|Value_Active
block|}
block|,
block|{
literal|"alternate-base"
block|,
name|Value_AlternateBase
block|}
block|,
block|{
literal|"always"
block|,
name|Value_Always
block|}
block|,
block|{
literal|"auto"
block|,
name|Value_Auto
block|}
block|,
block|{
literal|"base"
block|,
name|Value_Base
block|}
block|,
block|{
literal|"bold"
block|,
name|Value_Bold
block|}
block|,
block|{
literal|"bottom"
block|,
name|Value_Bottom
block|}
block|,
block|{
literal|"bright-text"
block|,
name|Value_BrightText
block|}
block|,
block|{
literal|"button"
block|,
name|Value_Button
block|}
block|,
block|{
literal|"button-text"
block|,
name|Value_ButtonText
block|}
block|,
block|{
literal|"center"
block|,
name|Value_Center
block|}
block|,
block|{
literal|"circle"
block|,
name|Value_Circle
block|}
block|,
block|{
literal|"dark"
block|,
name|Value_Dark
block|}
block|,
block|{
literal|"dashed"
block|,
name|Value_Dashed
block|}
block|,
block|{
literal|"decimal"
block|,
name|Value_Decimal
block|}
block|,
block|{
literal|"disabled"
block|,
name|Value_Disabled
block|}
block|,
block|{
literal|"disc"
block|,
name|Value_Disc
block|}
block|,
block|{
literal|"dot-dash"
block|,
name|Value_DotDash
block|}
block|,
block|{
literal|"dot-dot-dash"
block|,
name|Value_DotDotDash
block|}
block|,
block|{
literal|"dotted"
block|,
name|Value_Dotted
block|}
block|,
block|{
literal|"double"
block|,
name|Value_Double
block|}
block|,
block|{
literal|"groove"
block|,
name|Value_Groove
block|}
block|,
block|{
literal|"highlight"
block|,
name|Value_Highlight
block|}
block|,
block|{
literal|"highlighted-text"
block|,
name|Value_HighlightedText
block|}
block|,
block|{
literal|"inset"
block|,
name|Value_Inset
block|}
block|,
block|{
literal|"italic"
block|,
name|Value_Italic
block|}
block|,
block|{
literal|"large"
block|,
name|Value_Large
block|}
block|,
block|{
literal|"left"
block|,
name|Value_Left
block|}
block|,
block|{
literal|"light"
block|,
name|Value_Light
block|}
block|,
block|{
literal|"line-through"
block|,
name|Value_LineThrough
block|}
block|,
block|{
literal|"link"
block|,
name|Value_Link
block|}
block|,
block|{
literal|"link-visited"
block|,
name|Value_LinkVisited
block|}
block|,
block|{
literal|"lower-alpha"
block|,
name|Value_LowerAlpha
block|}
block|,
block|{
literal|"lower-roman"
block|,
name|Value_LowerRoman
block|}
block|,
block|{
literal|"lowercase"
block|,
name|Value_Lowercase
block|}
block|,
block|{
literal|"medium"
block|,
name|Value_Medium
block|}
block|,
block|{
literal|"mid"
block|,
name|Value_Mid
block|}
block|,
block|{
literal|"middle"
block|,
name|Value_Middle
block|}
block|,
block|{
literal|"midlight"
block|,
name|Value_Midlight
block|}
block|,
block|{
literal|"native"
block|,
name|Value_Native
block|}
block|,
block|{
literal|"none"
block|,
name|Value_None
block|}
block|,
block|{
literal|"normal"
block|,
name|Value_Normal
block|}
block|,
block|{
literal|"nowrap"
block|,
name|Value_NoWrap
block|}
block|,
block|{
literal|"oblique"
block|,
name|Value_Oblique
block|}
block|,
block|{
literal|"off"
block|,
name|Value_Off
block|}
block|,
block|{
literal|"on"
block|,
name|Value_On
block|}
block|,
block|{
literal|"outset"
block|,
name|Value_Outset
block|}
block|,
block|{
literal|"overline"
block|,
name|Value_Overline
block|}
block|,
block|{
literal|"pre"
block|,
name|Value_Pre
block|}
block|,
block|{
literal|"pre-wrap"
block|,
name|Value_PreWrap
block|}
block|,
block|{
literal|"ridge"
block|,
name|Value_Ridge
block|}
block|,
block|{
literal|"right"
block|,
name|Value_Right
block|}
block|,
block|{
literal|"selected"
block|,
name|Value_Selected
block|}
block|,
block|{
literal|"shadow"
block|,
name|Value_Shadow
block|}
block|,
block|{
literal|"small"
block|,
name|Value_Small
block|}
block|,
block|{
literal|"small-caps"
block|,
name|Value_SmallCaps
block|}
block|,
block|{
literal|"solid"
block|,
name|Value_Solid
block|}
block|,
block|{
literal|"square"
block|,
name|Value_Square
block|}
block|,
block|{
literal|"sub"
block|,
name|Value_Sub
block|}
block|,
block|{
literal|"super"
block|,
name|Value_Super
block|}
block|,
block|{
literal|"text"
block|,
name|Value_Text
block|}
block|,
block|{
literal|"top"
block|,
name|Value_Top
block|}
block|,
block|{
literal|"transparent"
block|,
name|Value_Transparent
block|}
block|,
block|{
literal|"underline"
block|,
name|Value_Underline
block|}
block|,
block|{
literal|"upper-alpha"
block|,
name|Value_UpperAlpha
block|}
block|,
block|{
literal|"upper-roman"
block|,
name|Value_UpperRoman
block|}
block|,
block|{
literal|"uppercase"
block|,
name|Value_Uppercase
block|}
block|,
block|{
literal|"wave"
block|,
name|Value_Wave
block|}
block|,
block|{
literal|"window"
block|,
name|Value_Window
block|}
block|,
block|{
literal|"window-text"
block|,
name|Value_WindowText
block|}
block|,
block|{
literal|"x-large"
block|,
name|Value_XLarge
block|}
block|,
block|{
literal|"xx-large"
block|,
name|Value_XXLarge
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|//Map id to strings as they appears in the 'values' array above
end_comment
begin_decl_stmt
DECL|variable|indexOfId
specifier|static
specifier|const
name|short
name|indexOfId
index|[
name|NumKnownValues
index|]
init|=
block|{
literal|0
block|,
literal|41
block|,
literal|48
block|,
literal|42
block|,
literal|49
block|,
literal|54
block|,
literal|35
block|,
literal|26
block|,
literal|70
block|,
literal|71
block|,
literal|25
block|,
literal|43
block|,
literal|5
block|,
literal|63
block|,
literal|47
block|,
literal|29
block|,
literal|58
block|,
literal|59
block|,
literal|27
block|,
literal|51
block|,
literal|61
block|,
literal|6
block|,
literal|10
block|,
literal|39
block|,
literal|56
block|,
literal|19
block|,
literal|13
block|,
literal|17
block|,
literal|18
block|,
literal|20
block|,
literal|21
block|,
literal|50
block|,
literal|24
block|,
literal|46
block|,
literal|67
block|,
literal|37
block|,
literal|3
block|,
literal|2
block|,
literal|40
block|,
literal|62
block|,
literal|16
block|,
literal|11
block|,
literal|57
block|,
literal|14
block|,
literal|32
block|,
literal|64
block|,
literal|33
block|,
literal|65
block|,
literal|55
block|,
literal|66
block|,
literal|34
block|,
literal|69
block|,
literal|8
block|,
literal|28
block|,
literal|38
block|,
literal|12
block|,
literal|36
block|,
literal|60
block|,
literal|7
block|,
literal|9
block|,
literal|4
block|,
literal|68
block|,
literal|53
block|,
literal|22
block|,
literal|23
block|,
literal|30
block|,
literal|31
block|,
literal|1
block|,
literal|15
block|,
literal|0
block|,
literal|52
block|,
literal|45
block|,
literal|44
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|toString
name|QString
name|Value
operator|::
name|toString
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|type
operator|==
name|KnownIdentifier
condition|)
block|{
return|return
name|QLatin1String
argument_list|(
name|values
index|[
name|indexOfId
index|[
name|variant
operator|.
name|toInt
argument_list|()
index|]
index|]
operator|.
name|name
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|variant
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_function
begin_decl_stmt
DECL|variable|pseudos
specifier|static
specifier|const
name|QCssKnownValue
name|pseudos
index|[
name|NumPseudos
operator|-
literal|1
index|]
init|=
block|{
block|{
literal|"active"
block|,
name|PseudoClass_Active
block|}
block|,
block|{
literal|"adjoins-item"
block|,
name|PseudoClass_Item
block|}
block|,
block|{
literal|"alternate"
block|,
name|PseudoClass_Alternate
block|}
block|,
block|{
literal|"bottom"
block|,
name|PseudoClass_Bottom
block|}
block|,
block|{
literal|"checked"
block|,
name|PseudoClass_Checked
block|}
block|,
block|{
literal|"closable"
block|,
name|PseudoClass_Closable
block|}
block|,
block|{
literal|"closed"
block|,
name|PseudoClass_Closed
block|}
block|,
block|{
literal|"default"
block|,
name|PseudoClass_Default
block|}
block|,
block|{
literal|"disabled"
block|,
name|PseudoClass_Disabled
block|}
block|,
block|{
literal|"edit-focus"
block|,
name|PseudoClass_EditFocus
block|}
block|,
block|{
literal|"editable"
block|,
name|PseudoClass_Editable
block|}
block|,
block|{
literal|"enabled"
block|,
name|PseudoClass_Enabled
block|}
block|,
block|{
literal|"exclusive"
block|,
name|PseudoClass_Exclusive
block|}
block|,
block|{
literal|"first"
block|,
name|PseudoClass_First
block|}
block|,
block|{
literal|"flat"
block|,
name|PseudoClass_Flat
block|}
block|,
block|{
literal|"floatable"
block|,
name|PseudoClass_Floatable
block|}
block|,
block|{
literal|"focus"
block|,
name|PseudoClass_Focus
block|}
block|,
block|{
literal|"has-children"
block|,
name|PseudoClass_Children
block|}
block|,
block|{
literal|"has-siblings"
block|,
name|PseudoClass_Sibling
block|}
block|,
block|{
literal|"horizontal"
block|,
name|PseudoClass_Horizontal
block|}
block|,
block|{
literal|"hover"
block|,
name|PseudoClass_Hover
block|}
block|,
block|{
literal|"indeterminate"
block|,
name|PseudoClass_Indeterminate
block|}
block|,
block|{
literal|"last"
block|,
name|PseudoClass_Last
block|}
block|,
block|{
literal|"left"
block|,
name|PseudoClass_Left
block|}
block|,
block|{
literal|"maximized"
block|,
name|PseudoClass_Maximized
block|}
block|,
block|{
literal|"middle"
block|,
name|PseudoClass_Middle
block|}
block|,
block|{
literal|"minimized"
block|,
name|PseudoClass_Minimized
block|}
block|,
block|{
literal|"movable"
block|,
name|PseudoClass_Movable
block|}
block|,
block|{
literal|"next-selected"
block|,
name|PseudoClass_NextSelected
block|}
block|,
block|{
literal|"no-frame"
block|,
name|PseudoClass_Frameless
block|}
block|,
block|{
literal|"non-exclusive"
block|,
name|PseudoClass_NonExclusive
block|}
block|,
block|{
literal|"off"
block|,
name|PseudoClass_Unchecked
block|}
block|,
block|{
literal|"on"
block|,
name|PseudoClass_Checked
block|}
block|,
block|{
literal|"only-one"
block|,
name|PseudoClass_OnlyOne
block|}
block|,
block|{
literal|"open"
block|,
name|PseudoClass_Open
block|}
block|,
block|{
literal|"pressed"
block|,
name|PseudoClass_Pressed
block|}
block|,
block|{
literal|"previous-selected"
block|,
name|PseudoClass_PreviousSelected
block|}
block|,
block|{
literal|"read-only"
block|,
name|PseudoClass_ReadOnly
block|}
block|,
block|{
literal|"right"
block|,
name|PseudoClass_Right
block|}
block|,
block|{
literal|"selected"
block|,
name|PseudoClass_Selected
block|}
block|,
block|{
literal|"top"
block|,
name|PseudoClass_Top
block|}
block|,
block|{
literal|"unchecked"
block|,
name|PseudoClass_Unchecked
block|}
block|,
block|{
literal|"vertical"
block|,
name|PseudoClass_Vertical
block|}
block|,
block|{
literal|"window"
block|,
name|PseudoClass_Window
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|origins
specifier|static
specifier|const
name|QCssKnownValue
name|origins
index|[
name|NumKnownOrigins
operator|-
literal|1
index|]
init|=
block|{
block|{
literal|"border"
block|,
name|Origin_Border
block|}
block|,
block|{
literal|"content"
block|,
name|Origin_Content
block|}
block|,
block|{
literal|"margin"
block|,
name|Origin_Margin
block|}
block|,
comment|// not in css
block|{
literal|"padding"
block|,
name|Origin_Padding
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|repeats
specifier|static
specifier|const
name|QCssKnownValue
name|repeats
index|[
name|NumKnownRepeats
operator|-
literal|1
index|]
init|=
block|{
block|{
literal|"no-repeat"
block|,
name|Repeat_None
block|}
block|,
block|{
literal|"repeat-x"
block|,
name|Repeat_X
block|}
block|,
block|{
literal|"repeat-xy"
block|,
name|Repeat_XY
block|}
block|,
block|{
literal|"repeat-y"
block|,
name|Repeat_Y
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|tileModes
specifier|static
specifier|const
name|QCssKnownValue
name|tileModes
index|[
name|NumKnownTileModes
operator|-
literal|1
index|]
init|=
block|{
block|{
literal|"repeat"
block|,
name|TileMode_Repeat
block|}
block|,
block|{
literal|"round"
block|,
name|TileMode_Round
block|}
block|,
block|{
literal|"stretch"
block|,
name|TileMode_Stretch
block|}
block|, }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|positions
specifier|static
specifier|const
name|QCssKnownValue
name|positions
index|[
name|NumKnownPositionModes
operator|-
literal|1
index|]
init|=
block|{
block|{
literal|"absolute"
block|,
name|PositionMode_Absolute
block|}
block|,
block|{
literal|"fixed"
block|,
name|PositionMode_Fixed
block|}
block|,
block|{
literal|"relative"
block|,
name|PositionMode_Relative
block|}
block|,
block|{
literal|"static"
block|,
name|PositionMode_Static
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|attachments
specifier|static
specifier|const
name|QCssKnownValue
name|attachments
index|[
name|NumKnownAttachments
operator|-
literal|1
index|]
init|=
block|{
block|{
literal|"fixed"
block|,
name|Attachment_Fixed
block|}
block|,
block|{
literal|"scroll"
block|,
name|Attachment_Scroll
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|styleFeatures
specifier|static
specifier|const
name|QCssKnownValue
name|styleFeatures
index|[
name|NumKnownStyleFeatures
operator|-
literal|1
index|]
init|=
block|{
block|{
literal|"background-color"
block|,
name|StyleFeature_BackgroundColor
block|}
block|,
block|{
literal|"background-gradient"
block|,
name|StyleFeature_BackgroundGradient
block|}
block|,
block|{
literal|"none"
block|,
name|StyleFeature_None
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
operator|&&
name|_MSC_VER
operator|<
literal|1600
end_if
begin_function
DECL|function|operator <
name|Q_STATIC_GLOBAL_OPERATOR
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|QCssKnownValue
modifier|&
name|prop1
parameter_list|,
specifier|const
name|QCssKnownValue
modifier|&
name|prop2
parameter_list|)
block|{
return|return
name|QString
operator|::
name|compare
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|prop1
operator|.
name|name
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|prop2
operator|.
name|name
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<
literal|0
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|operator <
name|Q_STATIC_GLOBAL_OPERATOR
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QCssKnownValue
modifier|&
name|prop
parameter_list|)
block|{
return|return
name|QString
operator|::
name|compare
argument_list|(
name|name
argument_list|,
name|QLatin1String
argument_list|(
name|prop
operator|.
name|name
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<
literal|0
return|;
block|}
end_function
begin_function
DECL|function|operator <
name|Q_STATIC_GLOBAL_OPERATOR
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|QCssKnownValue
modifier|&
name|prop
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
return|return
name|QString
operator|::
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|prop
operator|.
name|name
argument_list|)
argument_list|,
name|name
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<
literal|0
return|;
block|}
end_function
begin_function
DECL|function|findKnownValue
specifier|static
name|quint64
name|findKnownValue
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QCssKnownValue
modifier|*
name|start
parameter_list|,
name|int
name|numValues
parameter_list|)
block|{
specifier|const
name|QCssKnownValue
modifier|*
name|end
init|=
operator|&
name|start
index|[
name|numValues
operator|-
literal|1
index|]
decl_stmt|;
specifier|const
name|QCssKnownValue
modifier|*
name|prop
init|=
name|std
operator|::
name|lower_bound
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|prop
operator|==
name|end
operator|)
operator|||
operator|(
name|name
operator|<
operator|*
name|prop
operator|)
condition|)
return|return
literal|0
return|;
return|return
name|prop
operator|->
name|id
return|;
block|}
end_function
begin_comment
comment|///////////////////////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|// Value Extractor
end_comment
begin_constructor
DECL|function|ValueExtractor
name|ValueExtractor
operator|::
name|ValueExtractor
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|Declaration
argument_list|>
modifier|&
name|decls
parameter_list|,
specifier|const
name|QPalette
modifier|&
name|pal
parameter_list|)
member_init_list|:
name|declarations
argument_list|(
name|decls
argument_list|)
member_init_list|,
name|adjustment
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|fontExtracted
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|pal
argument_list|(
name|pal
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|lengthValue
name|LengthData
name|ValueExtractor
operator|::
name|lengthValue
parameter_list|(
specifier|const
name|Value
modifier|&
name|v
parameter_list|)
block|{
name|QString
name|s
init|=
name|v
operator|.
name|variant
operator|.
name|toString
argument_list|()
decl_stmt|;
name|s
operator|.
name|reserve
argument_list|(
name|s
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|LengthData
name|data
decl_stmt|;
name|data
operator|.
name|unit
operator|=
name|LengthData
operator|::
name|None
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"px"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|data
operator|.
name|unit
operator|=
name|LengthData
operator|::
name|Px
expr_stmt|;
elseif|else
if|if
condition|(
name|s
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ex"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|data
operator|.
name|unit
operator|=
name|LengthData
operator|::
name|Ex
expr_stmt|;
elseif|else
if|if
condition|(
name|s
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"em"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|data
operator|.
name|unit
operator|=
name|LengthData
operator|::
name|Em
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|unit
operator|!=
name|LengthData
operator|::
name|None
condition|)
name|s
operator|.
name|chop
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|data
operator|.
name|number
operator|=
name|s
operator|.
name|toDouble
argument_list|()
expr_stmt|;
return|return
name|data
return|;
block|}
end_function
begin_function
DECL|function|lengthValueFromData
specifier|static
name|int
name|lengthValueFromData
parameter_list|(
specifier|const
name|LengthData
modifier|&
name|data
parameter_list|,
specifier|const
name|QFont
modifier|&
name|f
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|unit
operator|==
name|LengthData
operator|::
name|Ex
condition|)
return|return
name|qRound
argument_list|(
name|QFontMetrics
argument_list|(
name|f
argument_list|)
operator|.
name|xHeight
argument_list|()
operator|*
name|data
operator|.
name|number
argument_list|)
return|;
elseif|else
if|if
condition|(
name|data
operator|.
name|unit
operator|==
name|LengthData
operator|::
name|Em
condition|)
return|return
name|qRound
argument_list|(
name|QFontMetrics
argument_list|(
name|f
argument_list|)
operator|.
name|height
argument_list|()
operator|*
name|data
operator|.
name|number
argument_list|)
return|;
return|return
name|qRound
argument_list|(
name|data
operator|.
name|number
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|lengthValue
name|int
name|ValueExtractor
operator|::
name|lengthValue
parameter_list|(
specifier|const
name|Declaration
modifier|&
name|decl
parameter_list|)
block|{
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|parsed
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|lengthValueFromData
argument_list|(
name|qvariant_cast
argument_list|<
name|LengthData
argument_list|>
argument_list|(
name|decl
operator|.
name|d
operator|->
name|parsed
argument_list|)
argument_list|,
name|f
argument_list|)
return|;
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|<
literal|1
condition|)
return|return
literal|0
return|;
name|LengthData
name|data
init|=
name|lengthValue
argument_list|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|decl
operator|.
name|d
operator|->
name|parsed
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|<
name|LengthData
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|lengthValueFromData
argument_list|(
name|data
argument_list|,
name|f
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|lengthValues
name|void
name|ValueExtractor
operator|::
name|lengthValues
parameter_list|(
specifier|const
name|Declaration
modifier|&
name|decl
parameter_list|,
name|int
modifier|*
name|m
parameter_list|)
block|{
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|parsed
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|v
init|=
name|decl
operator|.
name|d
operator|->
name|parsed
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
name|m
index|[
name|i
index|]
operator|=
name|lengthValueFromData
argument_list|(
name|qvariant_cast
argument_list|<
name|LengthData
argument_list|>
argument_list|(
name|v
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|f
argument_list|)
expr_stmt|;
return|return;
block|}
name|LengthData
name|datas
index|[
literal|4
index|]
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|qMin
argument_list|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
condition|;
name|i
operator|++
control|)
name|datas
index|[
name|i
index|]
operator|=
name|lengthValue
argument_list|(
name|decl
operator|.
name|d
operator|->
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|LengthData
name|zero
init|=
block|{
literal|0.0
block|,
name|LengthData
operator|::
name|None
block|}
decl_stmt|;
name|datas
index|[
literal|0
index|]
operator|=
name|datas
index|[
literal|1
index|]
operator|=
name|datas
index|[
literal|2
index|]
operator|=
name|datas
index|[
literal|3
index|]
operator|=
name|zero
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|datas
index|[
literal|3
index|]
operator|=
name|datas
index|[
literal|2
index|]
operator|=
name|datas
index|[
literal|1
index|]
operator|=
name|datas
index|[
literal|0
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|2
condition|)
block|{
name|datas
index|[
literal|2
index|]
operator|=
name|datas
index|[
literal|0
index|]
expr_stmt|;
name|datas
index|[
literal|3
index|]
operator|=
name|datas
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|3
condition|)
block|{
name|datas
index|[
literal|3
index|]
operator|=
name|datas
index|[
literal|1
index|]
expr_stmt|;
block|}
name|QList
argument_list|<
name|QVariant
argument_list|>
name|v
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|v
operator|+=
name|QVariant
operator|::
name|fromValue
argument_list|<
name|LengthData
argument_list|>
argument_list|(
name|datas
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|m
index|[
name|i
index|]
operator|=
name|lengthValueFromData
argument_list|(
name|datas
index|[
name|i
index|]
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
name|decl
operator|.
name|d
operator|->
name|parsed
operator|=
name|v
expr_stmt|;
block|}
end_function
begin_function
DECL|function|extractGeometry
name|bool
name|ValueExtractor
operator|::
name|extractGeometry
parameter_list|(
name|int
modifier|*
name|w
parameter_list|,
name|int
modifier|*
name|h
parameter_list|,
name|int
modifier|*
name|minw
parameter_list|,
name|int
modifier|*
name|minh
parameter_list|,
name|int
modifier|*
name|maxw
parameter_list|,
name|int
modifier|*
name|maxh
parameter_list|)
block|{
name|extractFont
argument_list|()
expr_stmt|;
name|bool
name|hit
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|declarations
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|Declaration
modifier|&
name|decl
init|=
name|declarations
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|decl
operator|.
name|d
operator|->
name|propertyId
condition|)
block|{
case|case
name|Width
case|:
operator|*
name|w
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|Height
case|:
operator|*
name|h
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|MinimumWidth
case|:
operator|*
name|minw
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|MinimumHeight
case|:
operator|*
name|minh
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|MaximumWidth
case|:
operator|*
name|maxw
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|MaximumHeight
case|:
operator|*
name|maxh
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
default|default:
continue|continue;
block|}
name|hit
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|hit
return|;
block|}
end_function
begin_function
DECL|function|extractPosition
name|bool
name|ValueExtractor
operator|::
name|extractPosition
parameter_list|(
name|int
modifier|*
name|left
parameter_list|,
name|int
modifier|*
name|top
parameter_list|,
name|int
modifier|*
name|right
parameter_list|,
name|int
modifier|*
name|bottom
parameter_list|,
name|QCss
operator|::
name|Origin
modifier|*
name|origin
parameter_list|,
name|Qt
operator|::
name|Alignment
modifier|*
name|position
parameter_list|,
name|QCss
operator|::
name|PositionMode
modifier|*
name|mode
parameter_list|,
name|Qt
operator|::
name|Alignment
modifier|*
name|textAlignment
parameter_list|)
block|{
name|extractFont
argument_list|()
expr_stmt|;
name|bool
name|hit
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|declarations
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|Declaration
modifier|&
name|decl
init|=
name|declarations
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|decl
operator|.
name|d
operator|->
name|propertyId
condition|)
block|{
case|case
name|Left
case|:
operator|*
name|left
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|Top
case|:
operator|*
name|top
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|Right
case|:
operator|*
name|right
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|Bottom
case|:
operator|*
name|bottom
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|QtOrigin
case|:
operator|*
name|origin
operator|=
name|decl
operator|.
name|originValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|QtPosition
case|:
operator|*
name|position
operator|=
name|decl
operator|.
name|alignmentValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|TextAlignment
case|:
operator|*
name|textAlignment
operator|=
name|decl
operator|.
name|alignmentValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|Position
case|:
operator|*
name|mode
operator|=
name|decl
operator|.
name|positionValue
argument_list|()
expr_stmt|;
break|break;
default|default:
continue|continue;
block|}
name|hit
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|hit
return|;
block|}
end_function
begin_function
DECL|function|extractBox
name|bool
name|ValueExtractor
operator|::
name|extractBox
parameter_list|(
name|int
modifier|*
name|margins
parameter_list|,
name|int
modifier|*
name|paddings
parameter_list|,
name|int
modifier|*
name|spacing
parameter_list|)
block|{
name|extractFont
argument_list|()
expr_stmt|;
name|bool
name|hit
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|declarations
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|Declaration
modifier|&
name|decl
init|=
name|declarations
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|decl
operator|.
name|d
operator|->
name|propertyId
condition|)
block|{
case|case
name|PaddingLeft
case|:
name|paddings
index|[
name|LeftEdge
index|]
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|PaddingRight
case|:
name|paddings
index|[
name|RightEdge
index|]
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|PaddingTop
case|:
name|paddings
index|[
name|TopEdge
index|]
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|PaddingBottom
case|:
name|paddings
index|[
name|BottomEdge
index|]
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|Padding
case|:
name|lengthValues
argument_list|(
name|decl
argument_list|,
name|paddings
argument_list|)
expr_stmt|;
break|break;
case|case
name|MarginLeft
case|:
name|margins
index|[
name|LeftEdge
index|]
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|MarginRight
case|:
name|margins
index|[
name|RightEdge
index|]
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|MarginTop
case|:
name|margins
index|[
name|TopEdge
index|]
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|MarginBottom
case|:
name|margins
index|[
name|BottomEdge
index|]
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|Margin
case|:
name|lengthValues
argument_list|(
name|decl
argument_list|,
name|margins
argument_list|)
expr_stmt|;
break|break;
case|case
name|QtSpacing
case|:
if|if
condition|(
name|spacing
condition|)
operator|*
name|spacing
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
default|default:
continue|continue;
block|}
name|hit
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|hit
return|;
block|}
end_function
begin_function
DECL|function|extractStyleFeatures
name|int
name|ValueExtractor
operator|::
name|extractStyleFeatures
parameter_list|()
block|{
name|int
name|features
init|=
name|StyleFeature_None
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|declarations
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|Declaration
modifier|&
name|decl
init|=
name|declarations
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|propertyId
operator|==
name|QtStyleFeatures
condition|)
name|features
operator|=
name|decl
operator|.
name|styleFeaturesValue
argument_list|()
expr_stmt|;
block|}
return|return
name|features
return|;
block|}
end_function
begin_function
DECL|function|sizeValue
name|QSize
name|ValueExtractor
operator|::
name|sizeValue
parameter_list|(
specifier|const
name|Declaration
modifier|&
name|decl
parameter_list|)
block|{
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|parsed
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|v
init|=
name|decl
operator|.
name|d
operator|->
name|parsed
operator|.
name|toList
argument_list|()
decl_stmt|;
return|return
name|QSize
argument_list|(
name|lengthValueFromData
argument_list|(
name|qvariant_cast
argument_list|<
name|LengthData
argument_list|>
argument_list|(
name|v
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|f
argument_list|)
argument_list|,
name|lengthValueFromData
argument_list|(
name|qvariant_cast
argument_list|<
name|LengthData
argument_list|>
argument_list|(
name|v
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|f
argument_list|)
argument_list|)
return|;
block|}
name|LengthData
name|x
index|[
literal|2
index|]
init|=
block|{
block|{
literal|0
block|,
name|LengthData
operator|::
name|None
block|}
block|,
block|{
literal|0
block|,
name|LengthData
operator|::
name|None
block|}
block|}
decl_stmt|;
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
name|x
index|[
literal|0
index|]
operator|=
name|lengthValue
argument_list|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
name|x
index|[
literal|1
index|]
operator|=
name|lengthValue
argument_list|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|x
index|[
literal|1
index|]
operator|=
name|x
index|[
literal|0
index|]
expr_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|v
decl_stmt|;
name|v
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|<
name|LengthData
argument_list|>
argument_list|(
name|x
index|[
literal|0
index|]
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|<
name|LengthData
argument_list|>
argument_list|(
name|x
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|decl
operator|.
name|d
operator|->
name|parsed
operator|=
name|v
expr_stmt|;
return|return
name|QSize
argument_list|(
name|lengthValueFromData
argument_list|(
name|x
index|[
literal|0
index|]
argument_list|,
name|f
argument_list|)
argument_list|,
name|lengthValueFromData
argument_list|(
name|x
index|[
literal|1
index|]
argument_list|,
name|f
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|sizeValues
name|void
name|ValueExtractor
operator|::
name|sizeValues
parameter_list|(
specifier|const
name|Declaration
modifier|&
name|decl
parameter_list|,
name|QSize
modifier|*
name|radii
parameter_list|)
block|{
name|radii
index|[
literal|0
index|]
operator|=
name|sizeValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
name|radii
index|[
name|i
index|]
operator|=
name|radii
index|[
literal|0
index|]
expr_stmt|;
block|}
end_function
begin_function
DECL|function|extractBorder
name|bool
name|ValueExtractor
operator|::
name|extractBorder
parameter_list|(
name|int
modifier|*
name|borders
parameter_list|,
name|QBrush
modifier|*
name|colors
parameter_list|,
name|BorderStyle
modifier|*
name|styles
parameter_list|,
name|QSize
modifier|*
name|radii
parameter_list|)
block|{
name|extractFont
argument_list|()
expr_stmt|;
name|bool
name|hit
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|declarations
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|Declaration
modifier|&
name|decl
init|=
name|declarations
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|decl
operator|.
name|d
operator|->
name|propertyId
condition|)
block|{
case|case
name|BorderLeftWidth
case|:
name|borders
index|[
name|LeftEdge
index|]
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|BorderRightWidth
case|:
name|borders
index|[
name|RightEdge
index|]
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|BorderTopWidth
case|:
name|borders
index|[
name|TopEdge
index|]
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|BorderBottomWidth
case|:
name|borders
index|[
name|BottomEdge
index|]
operator|=
name|lengthValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|BorderWidth
case|:
name|lengthValues
argument_list|(
name|decl
argument_list|,
name|borders
argument_list|)
expr_stmt|;
break|break;
case|case
name|BorderLeftColor
case|:
name|colors
index|[
name|LeftEdge
index|]
operator|=
name|decl
operator|.
name|brushValue
argument_list|(
name|pal
argument_list|)
expr_stmt|;
break|break;
case|case
name|BorderRightColor
case|:
name|colors
index|[
name|RightEdge
index|]
operator|=
name|decl
operator|.
name|brushValue
argument_list|(
name|pal
argument_list|)
expr_stmt|;
break|break;
case|case
name|BorderTopColor
case|:
name|colors
index|[
name|TopEdge
index|]
operator|=
name|decl
operator|.
name|brushValue
argument_list|(
name|pal
argument_list|)
expr_stmt|;
break|break;
case|case
name|BorderBottomColor
case|:
name|colors
index|[
name|BottomEdge
index|]
operator|=
name|decl
operator|.
name|brushValue
argument_list|(
name|pal
argument_list|)
expr_stmt|;
break|break;
case|case
name|BorderColor
case|:
name|decl
operator|.
name|brushValues
argument_list|(
name|colors
argument_list|,
name|pal
argument_list|)
expr_stmt|;
break|break;
case|case
name|BorderTopStyle
case|:
name|styles
index|[
name|TopEdge
index|]
operator|=
name|decl
operator|.
name|styleValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|BorderBottomStyle
case|:
name|styles
index|[
name|BottomEdge
index|]
operator|=
name|decl
operator|.
name|styleValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|BorderLeftStyle
case|:
name|styles
index|[
name|LeftEdge
index|]
operator|=
name|decl
operator|.
name|styleValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|BorderRightStyle
case|:
name|styles
index|[
name|RightEdge
index|]
operator|=
name|decl
operator|.
name|styleValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|BorderStyles
case|:
name|decl
operator|.
name|styleValues
argument_list|(
name|styles
argument_list|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_OS_ANDROID_GCC_48_WORKAROUND
case|case
name|BorderTopLeftRadius
case|:
name|radii
index|[
literal|0
index|]
operator|=
name|sizeValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
else|#
directive|else
case|case
name|BorderTopLeftRadius
case|:
operator|new
operator|(
name|radii
operator|)
name|QSize
argument_list|(
name|sizeValue
argument_list|(
name|decl
argument_list|)
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|BorderTopRightRadius
case|:
name|radii
index|[
literal|1
index|]
operator|=
name|sizeValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|BorderBottomLeftRadius
case|:
name|radii
index|[
literal|2
index|]
operator|=
name|sizeValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|BorderBottomRightRadius
case|:
name|radii
index|[
literal|3
index|]
operator|=
name|sizeValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|BorderRadius
case|:
name|sizeValues
argument_list|(
name|decl
argument_list|,
name|radii
argument_list|)
expr_stmt|;
break|break;
case|case
name|BorderLeft
case|:
name|borderValue
argument_list|(
name|decl
argument_list|,
operator|&
name|borders
index|[
name|LeftEdge
index|]
argument_list|,
operator|&
name|styles
index|[
name|LeftEdge
index|]
argument_list|,
operator|&
name|colors
index|[
name|LeftEdge
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|BorderTop
case|:
name|borderValue
argument_list|(
name|decl
argument_list|,
operator|&
name|borders
index|[
name|TopEdge
index|]
argument_list|,
operator|&
name|styles
index|[
name|TopEdge
index|]
argument_list|,
operator|&
name|colors
index|[
name|TopEdge
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|BorderRight
case|:
name|borderValue
argument_list|(
name|decl
argument_list|,
operator|&
name|borders
index|[
name|RightEdge
index|]
argument_list|,
operator|&
name|styles
index|[
name|RightEdge
index|]
argument_list|,
operator|&
name|colors
index|[
name|RightEdge
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|BorderBottom
case|:
name|borderValue
argument_list|(
name|decl
argument_list|,
operator|&
name|borders
index|[
name|BottomEdge
index|]
argument_list|,
operator|&
name|styles
index|[
name|BottomEdge
index|]
argument_list|,
operator|&
name|colors
index|[
name|BottomEdge
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|Border
case|:
name|borderValue
argument_list|(
name|decl
argument_list|,
operator|&
name|borders
index|[
name|LeftEdge
index|]
argument_list|,
operator|&
name|styles
index|[
name|LeftEdge
index|]
argument_list|,
operator|&
name|colors
index|[
name|LeftEdge
index|]
argument_list|)
expr_stmt|;
name|borders
index|[
name|TopEdge
index|]
operator|=
name|borders
index|[
name|RightEdge
index|]
operator|=
name|borders
index|[
name|BottomEdge
index|]
operator|=
name|borders
index|[
name|LeftEdge
index|]
expr_stmt|;
name|styles
index|[
name|TopEdge
index|]
operator|=
name|styles
index|[
name|RightEdge
index|]
operator|=
name|styles
index|[
name|BottomEdge
index|]
operator|=
name|styles
index|[
name|LeftEdge
index|]
expr_stmt|;
name|colors
index|[
name|TopEdge
index|]
operator|=
name|colors
index|[
name|RightEdge
index|]
operator|=
name|colors
index|[
name|BottomEdge
index|]
operator|=
name|colors
index|[
name|LeftEdge
index|]
expr_stmt|;
break|break;
default|default:
continue|continue;
block|}
name|hit
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|hit
return|;
block|}
end_function
begin_function
DECL|function|extractOutline
name|bool
name|ValueExtractor
operator|::
name|extractOutline
parameter_list|(
name|int
modifier|*
name|borders
parameter_list|,
name|QBrush
modifier|*
name|colors
parameter_list|,
name|BorderStyle
modifier|*
name|styles
parameter_list|,
name|QSize
modifier|*
name|radii
parameter_list|,
name|int
modifier|*
name|offsets
parameter_list|)
block|{
name|extractFont
argument_list|()
expr_stmt|;
name|bool
name|hit
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|declarations
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|Declaration
modifier|&
name|decl
init|=
name|declarations
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|decl
operator|.
name|d
operator|->
name|propertyId
condition|)
block|{
case|case
name|OutlineWidth
case|:
name|lengthValues
argument_list|(
name|decl
argument_list|,
name|borders
argument_list|)
expr_stmt|;
break|break;
case|case
name|OutlineColor
case|:
name|decl
operator|.
name|brushValues
argument_list|(
name|colors
argument_list|,
name|pal
argument_list|)
expr_stmt|;
break|break;
case|case
name|OutlineStyle
case|:
name|decl
operator|.
name|styleValues
argument_list|(
name|styles
argument_list|)
expr_stmt|;
break|break;
case|case
name|OutlineTopLeftRadius
case|:
name|radii
index|[
literal|0
index|]
operator|=
name|sizeValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|OutlineTopRightRadius
case|:
name|radii
index|[
literal|1
index|]
operator|=
name|sizeValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|OutlineBottomLeftRadius
case|:
name|radii
index|[
literal|2
index|]
operator|=
name|sizeValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|OutlineBottomRightRadius
case|:
name|radii
index|[
literal|3
index|]
operator|=
name|sizeValue
argument_list|(
name|decl
argument_list|)
expr_stmt|;
break|break;
case|case
name|OutlineRadius
case|:
name|sizeValues
argument_list|(
name|decl
argument_list|,
name|radii
argument_list|)
expr_stmt|;
break|break;
case|case
name|OutlineOffset
case|:
name|lengthValues
argument_list|(
name|decl
argument_list|,
name|offsets
argument_list|)
expr_stmt|;
break|break;
case|case
name|Outline
case|:
name|borderValue
argument_list|(
name|decl
argument_list|,
operator|&
name|borders
index|[
name|LeftEdge
index|]
argument_list|,
operator|&
name|styles
index|[
name|LeftEdge
index|]
argument_list|,
operator|&
name|colors
index|[
name|LeftEdge
index|]
argument_list|)
expr_stmt|;
name|borders
index|[
name|TopEdge
index|]
operator|=
name|borders
index|[
name|RightEdge
index|]
operator|=
name|borders
index|[
name|BottomEdge
index|]
operator|=
name|borders
index|[
name|LeftEdge
index|]
expr_stmt|;
name|styles
index|[
name|TopEdge
index|]
operator|=
name|styles
index|[
name|RightEdge
index|]
operator|=
name|styles
index|[
name|BottomEdge
index|]
operator|=
name|styles
index|[
name|LeftEdge
index|]
expr_stmt|;
name|colors
index|[
name|TopEdge
index|]
operator|=
name|colors
index|[
name|RightEdge
index|]
operator|=
name|colors
index|[
name|BottomEdge
index|]
operator|=
name|colors
index|[
name|LeftEdge
index|]
expr_stmt|;
break|break;
default|default:
continue|continue;
block|}
name|hit
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|hit
return|;
block|}
end_function
begin_function
DECL|function|parseAlignment
specifier|static
name|Qt
operator|::
name|Alignment
name|parseAlignment
parameter_list|(
specifier|const
name|QCss
operator|::
name|Value
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Qt
operator|::
name|Alignment
name|a
index|[
literal|2
index|]
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qMin
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|values
index|[
name|i
index|]
operator|.
name|type
operator|!=
name|Value
operator|::
name|KnownIdentifier
condition|)
break|break;
switch|switch
condition|(
name|values
index|[
name|i
index|]
operator|.
name|variant
operator|.
name|toInt
argument_list|()
condition|)
block|{
case|case
name|Value_Left
case|:
name|a
index|[
name|i
index|]
operator|=
name|Qt
operator|::
name|AlignLeft
expr_stmt|;
break|break;
case|case
name|Value_Right
case|:
name|a
index|[
name|i
index|]
operator|=
name|Qt
operator|::
name|AlignRight
expr_stmt|;
break|break;
case|case
name|Value_Top
case|:
name|a
index|[
name|i
index|]
operator|=
name|Qt
operator|::
name|AlignTop
expr_stmt|;
break|break;
case|case
name|Value_Bottom
case|:
name|a
index|[
name|i
index|]
operator|=
name|Qt
operator|::
name|AlignBottom
expr_stmt|;
break|break;
case|case
name|Value_Center
case|:
name|a
index|[
name|i
index|]
operator|=
name|Qt
operator|::
name|AlignCenter
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|a
index|[
literal|0
index|]
operator|==
name|Qt
operator|::
name|AlignCenter
operator|&&
name|a
index|[
literal|1
index|]
operator|!=
literal|0
operator|&&
name|a
index|[
literal|1
index|]
operator|!=
name|Qt
operator|::
name|AlignCenter
condition|)
name|a
index|[
literal|0
index|]
operator|=
operator|(
name|a
index|[
literal|1
index|]
operator|==
name|Qt
operator|::
name|AlignLeft
operator|||
name|a
index|[
literal|1
index|]
operator|==
name|Qt
operator|::
name|AlignRight
operator|)
condition|?
name|Qt
operator|::
name|AlignVCenter
else|:
name|Qt
operator|::
name|AlignHCenter
expr_stmt|;
if|if
condition|(
operator|(
name|a
index|[
literal|1
index|]
operator|==
literal|0
operator|||
name|a
index|[
literal|1
index|]
operator|==
name|Qt
operator|::
name|AlignCenter
operator|)
operator|&&
name|a
index|[
literal|0
index|]
operator|!=
name|Qt
operator|::
name|AlignCenter
condition|)
name|a
index|[
literal|1
index|]
operator|=
operator|(
name|a
index|[
literal|0
index|]
operator|==
name|Qt
operator|::
name|AlignLeft
operator|||
name|a
index|[
literal|0
index|]
operator|==
name|Qt
operator|::
name|AlignRight
operator|)
condition|?
name|Qt
operator|::
name|AlignVCenter
else|:
name|Qt
operator|::
name|AlignHCenter
expr_stmt|;
return|return
name|a
index|[
literal|0
index|]
operator||
name|a
index|[
literal|1
index|]
return|;
block|}
end_function
begin_function
DECL|function|parseColorValue
specifier|static
name|ColorData
name|parseColorValue
parameter_list|(
name|QCss
operator|::
name|Value
name|v
parameter_list|)
block|{
if|if
condition|(
name|v
operator|.
name|type
operator|==
name|Value
operator|::
name|Identifier
operator|||
name|v
operator|.
name|type
operator|==
name|Value
operator|::
name|String
condition|)
block|{
name|v
operator|.
name|variant
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|Color
argument_list|)
expr_stmt|;
name|v
operator|.
name|type
operator|=
name|Value
operator|::
name|Color
expr_stmt|;
block|}
if|if
condition|(
name|v
operator|.
name|type
operator|==
name|Value
operator|::
name|Color
condition|)
return|return
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|v
operator|.
name|variant
argument_list|)
return|;
if|if
condition|(
name|v
operator|.
name|type
operator|==
name|Value
operator|::
name|KnownIdentifier
operator|&&
name|v
operator|.
name|variant
operator|.
name|toInt
argument_list|()
operator|==
name|Value_Transparent
condition|)
return|return
name|QColor
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
return|;
if|if
condition|(
name|v
operator|.
name|type
operator|!=
name|Value
operator|::
name|Function
condition|)
return|return
name|ColorData
argument_list|()
return|;
name|QStringList
name|lst
init|=
name|v
operator|.
name|variant
operator|.
name|toStringList
argument_list|()
decl_stmt|;
if|if
condition|(
name|lst
operator|.
name|count
argument_list|()
operator|!=
literal|2
condition|)
return|return
name|ColorData
argument_list|()
return|;
if|if
condition|(
operator|(
name|lst
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"palette"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|)
operator|==
literal|0
condition|)
block|{
name|int
name|role
init|=
name|findKnownValue
argument_list|(
name|lst
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|trimmed
argument_list|()
argument_list|,
name|values
argument_list|,
name|NumKnownValues
argument_list|)
decl_stmt|;
if|if
condition|(
name|role
operator|>=
name|Value_FirstColorRole
operator|&&
name|role
operator|<=
name|Value_LastColorRole
condition|)
return|return
call|(
name|QPalette
operator|::
name|ColorRole
call|)
argument_list|(
name|role
operator|-
name|Value_FirstColorRole
argument_list|)
return|;
return|return
name|ColorData
argument_list|()
return|;
block|}
name|bool
name|rgb
init|=
name|lst
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"rgb"
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|rgba
init|=
name|lst
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"rgba"
argument_list|)
argument_list|)
decl_stmt|;
name|Parser
name|p
argument_list|(
name|lst
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|testExpr
argument_list|()
condition|)
return|return
name|ColorData
argument_list|()
return|;
name|QVector
argument_list|<
name|QCss
operator|::
name|Value
argument_list|>
name|colorDigits
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|parseExpr
argument_list|(
operator|&
name|colorDigits
argument_list|)
condition|)
return|return
name|ColorData
argument_list|()
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qMin
argument_list|(
name|colorDigits
operator|.
name|count
argument_list|()
argument_list|,
literal|7
argument_list|)
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
name|colorDigits
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
operator|==
name|Value
operator|::
name|Percentage
condition|)
block|{
name|colorDigits
index|[
name|i
index|]
operator|.
name|variant
operator|=
name|colorDigits
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|variant
operator|.
name|toReal
argument_list|()
operator|*
operator|(
literal|255.
operator|/
literal|100.
operator|)
expr_stmt|;
name|colorDigits
index|[
name|i
index|]
operator|.
name|type
operator|=
name|Value
operator|::
name|Number
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colorDigits
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
operator|!=
name|Value
operator|::
name|Number
condition|)
block|{
return|return
name|ColorData
argument_list|()
return|;
block|}
block|}
name|int
name|v1
init|=
name|colorDigits
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|variant
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|v2
init|=
name|colorDigits
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|variant
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|v3
init|=
name|colorDigits
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|variant
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|alpha
init|=
literal|255
decl_stmt|;
if|if
condition|(
name|colorDigits
operator|.
name|count
argument_list|()
operator|>=
literal|7
condition|)
block|{
name|int
name|alphaValue
init|=
name|colorDigits
operator|.
name|at
argument_list|(
literal|6
argument_list|)
operator|.
name|variant
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|rgba
operator|&&
name|alphaValue
operator|<=
literal|1
condition|)
name|alpha
operator|=
name|colorDigits
operator|.
name|at
argument_list|(
literal|6
argument_list|)
operator|.
name|variant
operator|.
name|toReal
argument_list|()
operator|*
literal|255.
expr_stmt|;
else|else
name|alpha
operator|=
name|alphaValue
expr_stmt|;
block|}
return|return
name|rgb
condition|?
name|QColor
operator|::
name|fromRgb
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|,
name|v3
argument_list|,
name|alpha
argument_list|)
else|:
name|QColor
operator|::
name|fromHsv
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|,
name|v3
argument_list|,
name|alpha
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|colorFromData
specifier|static
name|QColor
name|colorFromData
parameter_list|(
specifier|const
name|ColorData
modifier|&
name|c
parameter_list|,
specifier|const
name|QPalette
modifier|&
name|pal
parameter_list|)
block|{
if|if
condition|(
name|c
operator|.
name|type
operator|==
name|ColorData
operator|::
name|Color
condition|)
block|{
return|return
name|c
operator|.
name|color
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|type
operator|==
name|ColorData
operator|::
name|Role
condition|)
block|{
return|return
name|pal
operator|.
name|color
argument_list|(
name|c
operator|.
name|role
argument_list|)
return|;
block|}
return|return
name|QColor
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|parseBrushValue
specifier|static
name|BrushData
name|parseBrushValue
parameter_list|(
specifier|const
name|QCss
operator|::
name|Value
modifier|&
name|v
parameter_list|,
specifier|const
name|QPalette
modifier|&
name|pal
parameter_list|)
block|{
name|ColorData
name|c
init|=
name|parseColorValue
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|type
operator|==
name|ColorData
operator|::
name|Color
condition|)
block|{
return|return
name|QBrush
argument_list|(
name|c
operator|.
name|color
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|type
operator|==
name|ColorData
operator|::
name|Role
condition|)
block|{
return|return
name|c
operator|.
name|role
return|;
block|}
if|if
condition|(
name|v
operator|.
name|type
operator|!=
name|Value
operator|::
name|Function
condition|)
return|return
name|BrushData
argument_list|()
return|;
name|QStringList
name|lst
init|=
name|v
operator|.
name|variant
operator|.
name|toStringList
argument_list|()
decl_stmt|;
if|if
condition|(
name|lst
operator|.
name|count
argument_list|()
operator|!=
literal|2
condition|)
return|return
name|BrushData
argument_list|()
return|;
name|QStringList
name|gradFuncs
decl_stmt|;
name|gradFuncs
operator|<<
name|QLatin1String
argument_list|(
literal|"qlineargradient"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"qradialgradient"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"qconicalgradient"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"qgradient"
argument_list|)
expr_stmt|;
name|int
name|gradType
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|(
name|gradType
operator|=
name|gradFuncs
operator|.
name|indexOf
argument_list|(
name|lst
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|)
operator|)
operator|==
operator|-
literal|1
condition|)
return|return
name|BrushData
argument_list|()
return|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|qreal
argument_list|>
name|vars
decl_stmt|;
name|QVector
argument_list|<
name|QGradientStop
argument_list|>
name|stops
decl_stmt|;
name|int
name|spread
init|=
operator|-
literal|1
decl_stmt|;
name|QStringList
name|spreads
decl_stmt|;
name|spreads
operator|<<
name|QLatin1String
argument_list|(
literal|"pad"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"reflect"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"repeat"
argument_list|)
expr_stmt|;
name|bool
name|dependsOnThePalette
init|=
literal|false
decl_stmt|;
name|Parser
name|parser
argument_list|(
name|lst
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|parser
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|parser
operator|.
name|skipSpace
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|parser
operator|.
name|test
argument_list|(
name|IDENT
argument_list|)
condition|)
return|return
name|BrushData
argument_list|()
return|;
name|QString
name|attr
init|=
name|parser
operator|.
name|lexem
argument_list|()
decl_stmt|;
name|parser
operator|.
name|skipSpace
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|parser
operator|.
name|test
argument_list|(
name|COLON
argument_list|)
condition|)
return|return
name|BrushData
argument_list|()
return|;
name|parser
operator|.
name|skipSpace
argument_list|()
expr_stmt|;
if|if
condition|(
name|attr
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"stop"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
block|{
name|QCss
operator|::
name|Value
name|stop
decl_stmt|,
name|color
decl_stmt|;
name|parser
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|parser
operator|.
name|parseTerm
argument_list|(
operator|&
name|stop
argument_list|)
condition|)
return|return
name|BrushData
argument_list|()
return|;
name|parser
operator|.
name|skipSpace
argument_list|()
expr_stmt|;
name|parser
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|parser
operator|.
name|parseTerm
argument_list|(
operator|&
name|color
argument_list|)
condition|)
return|return
name|BrushData
argument_list|()
return|;
name|ColorData
name|cd
init|=
name|parseColorValue
argument_list|(
name|color
argument_list|)
decl_stmt|;
if|if
condition|(
name|cd
operator|.
name|type
operator|==
name|ColorData
operator|::
name|Role
condition|)
name|dependsOnThePalette
operator|=
literal|true
expr_stmt|;
name|stops
operator|.
name|append
argument_list|(
name|QGradientStop
argument_list|(
name|stop
operator|.
name|variant
operator|.
name|toReal
argument_list|()
argument_list|,
name|colorFromData
argument_list|(
name|cd
argument_list|,
name|pal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parser
operator|.
name|next
argument_list|()
expr_stmt|;
name|QCss
operator|::
name|Value
name|value
decl_stmt|;
operator|(
name|void
operator|)
name|parser
operator|.
name|parseTerm
argument_list|(
operator|&
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|attr
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"spread"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
block|{
name|spread
operator|=
name|spreads
operator|.
name|indexOf
argument_list|(
name|value
operator|.
name|variant
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vars
index|[
name|attr
index|]
operator|=
name|value
operator|.
name|variant
operator|.
name|toReal
argument_list|()
expr_stmt|;
block|}
block|}
name|parser
operator|.
name|skipSpace
argument_list|()
expr_stmt|;
operator|(
name|void
operator|)
name|parser
operator|.
name|test
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gradType
operator|==
literal|0
condition|)
block|{
name|QLinearGradient
name|lg
argument_list|(
name|vars
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"x1"
argument_list|)
argument_list|)
argument_list|,
name|vars
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"y1"
argument_list|)
argument_list|)
argument_list|,
name|vars
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"x2"
argument_list|)
argument_list|)
argument_list|,
name|vars
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"y2"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|lg
operator|.
name|setCoordinateMode
argument_list|(
name|QGradient
operator|::
name|ObjectBoundingMode
argument_list|)
expr_stmt|;
name|lg
operator|.
name|setStops
argument_list|(
name|stops
argument_list|)
expr_stmt|;
if|if
condition|(
name|spread
operator|!=
operator|-
literal|1
condition|)
name|lg
operator|.
name|setSpread
argument_list|(
name|QGradient
operator|::
name|Spread
argument_list|(
name|spread
argument_list|)
argument_list|)
expr_stmt|;
name|BrushData
name|bd
init|=
name|QBrush
argument_list|(
name|lg
argument_list|)
decl_stmt|;
if|if
condition|(
name|dependsOnThePalette
condition|)
name|bd
operator|.
name|type
operator|=
name|BrushData
operator|::
name|DependsOnThePalette
expr_stmt|;
return|return
name|bd
return|;
block|}
if|if
condition|(
name|gradType
operator|==
literal|1
condition|)
block|{
name|QRadialGradient
name|rg
argument_list|(
name|vars
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"cx"
argument_list|)
argument_list|)
argument_list|,
name|vars
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"cy"
argument_list|)
argument_list|)
argument_list|,
name|vars
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"radius"
argument_list|)
argument_list|)
argument_list|,
name|vars
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"fx"
argument_list|)
argument_list|)
argument_list|,
name|vars
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"fy"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|rg
operator|.
name|setCoordinateMode
argument_list|(
name|QGradient
operator|::
name|ObjectBoundingMode
argument_list|)
expr_stmt|;
name|rg
operator|.
name|setStops
argument_list|(
name|stops
argument_list|)
expr_stmt|;
if|if
condition|(
name|spread
operator|!=
operator|-
literal|1
condition|)
name|rg
operator|.
name|setSpread
argument_list|(
name|QGradient
operator|::
name|Spread
argument_list|(
name|spread
argument_list|)
argument_list|)
expr_stmt|;
name|BrushData
name|bd
init|=
name|QBrush
argument_list|(
name|rg
argument_list|)
decl_stmt|;
if|if
condition|(
name|dependsOnThePalette
condition|)
name|bd
operator|.
name|type
operator|=
name|BrushData
operator|::
name|DependsOnThePalette
expr_stmt|;
return|return
name|bd
return|;
block|}
if|if
condition|(
name|gradType
operator|==
literal|2
condition|)
block|{
name|QConicalGradient
name|cg
argument_list|(
name|vars
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"cx"
argument_list|)
argument_list|)
argument_list|,
name|vars
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"cy"
argument_list|)
argument_list|)
argument_list|,
name|vars
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"angle"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|cg
operator|.
name|setCoordinateMode
argument_list|(
name|QGradient
operator|::
name|ObjectBoundingMode
argument_list|)
expr_stmt|;
name|cg
operator|.
name|setStops
argument_list|(
name|stops
argument_list|)
expr_stmt|;
if|if
condition|(
name|spread
operator|!=
operator|-
literal|1
condition|)
name|cg
operator|.
name|setSpread
argument_list|(
name|QGradient
operator|::
name|Spread
argument_list|(
name|spread
argument_list|)
argument_list|)
expr_stmt|;
name|BrushData
name|bd
init|=
name|QBrush
argument_list|(
name|cg
argument_list|)
decl_stmt|;
if|if
condition|(
name|dependsOnThePalette
condition|)
name|bd
operator|.
name|type
operator|=
name|BrushData
operator|::
name|DependsOnThePalette
expr_stmt|;
return|return
name|bd
return|;
block|}
return|return
name|BrushData
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|brushFromData
specifier|static
name|QBrush
name|brushFromData
parameter_list|(
specifier|const
name|BrushData
modifier|&
name|c
parameter_list|,
specifier|const
name|QPalette
modifier|&
name|pal
parameter_list|)
block|{
if|if
condition|(
name|c
operator|.
name|type
operator|==
name|BrushData
operator|::
name|Role
condition|)
block|{
return|return
name|pal
operator|.
name|color
argument_list|(
name|c
operator|.
name|role
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|c
operator|.
name|brush
return|;
block|}
block|}
end_function
begin_function
DECL|function|parseStyleValue
specifier|static
name|BorderStyle
name|parseStyleValue
parameter_list|(
name|QCss
operator|::
name|Value
name|v
parameter_list|)
block|{
if|if
condition|(
name|v
operator|.
name|type
operator|==
name|Value
operator|::
name|KnownIdentifier
condition|)
block|{
switch|switch
condition|(
name|v
operator|.
name|variant
operator|.
name|toInt
argument_list|()
condition|)
block|{
case|case
name|Value_None
case|:
return|return
name|BorderStyle_None
return|;
case|case
name|Value_Dotted
case|:
return|return
name|BorderStyle_Dotted
return|;
case|case
name|Value_Dashed
case|:
return|return
name|BorderStyle_Dashed
return|;
case|case
name|Value_Solid
case|:
return|return
name|BorderStyle_Solid
return|;
case|case
name|Value_Double
case|:
return|return
name|BorderStyle_Double
return|;
case|case
name|Value_DotDash
case|:
return|return
name|BorderStyle_DotDash
return|;
case|case
name|Value_DotDotDash
case|:
return|return
name|BorderStyle_DotDotDash
return|;
case|case
name|Value_Groove
case|:
return|return
name|BorderStyle_Groove
return|;
case|case
name|Value_Ridge
case|:
return|return
name|BorderStyle_Ridge
return|;
case|case
name|Value_Inset
case|:
return|return
name|BorderStyle_Inset
return|;
case|case
name|Value_Outset
case|:
return|return
name|BorderStyle_Outset
return|;
case|case
name|Value_Native
case|:
return|return
name|BorderStyle_Native
return|;
default|default:
break|break;
block|}
block|}
return|return
name|BorderStyle_Unknown
return|;
block|}
end_function
begin_function
DECL|function|borderValue
name|void
name|ValueExtractor
operator|::
name|borderValue
parameter_list|(
specifier|const
name|Declaration
modifier|&
name|decl
parameter_list|,
name|int
modifier|*
name|width
parameter_list|,
name|QCss
operator|::
name|BorderStyle
modifier|*
name|style
parameter_list|,
name|QBrush
modifier|*
name|color
parameter_list|)
block|{
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|parsed
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|BorderData
name|data
init|=
name|qvariant_cast
argument_list|<
name|BorderData
argument_list|>
argument_list|(
name|decl
operator|.
name|d
operator|->
name|parsed
argument_list|)
decl_stmt|;
operator|*
name|width
operator|=
name|lengthValueFromData
argument_list|(
name|data
operator|.
name|width
argument_list|,
name|f
argument_list|)
expr_stmt|;
operator|*
name|style
operator|=
name|data
operator|.
name|style
expr_stmt|;
operator|*
name|color
operator|=
name|data
operator|.
name|color
operator|.
name|type
operator|!=
name|BrushData
operator|::
name|Invalid
condition|?
name|brushFromData
argument_list|(
name|data
operator|.
name|color
argument_list|,
name|pal
argument_list|)
else|:
name|QBrush
argument_list|(
name|QColor
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|width
operator|=
literal|0
expr_stmt|;
operator|*
name|style
operator|=
name|BorderStyle_None
expr_stmt|;
operator|*
name|color
operator|=
name|QColor
argument_list|()
expr_stmt|;
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|BorderData
name|data
decl_stmt|;
name|data
operator|.
name|width
operator|.
name|number
operator|=
literal|0
expr_stmt|;
name|data
operator|.
name|width
operator|.
name|unit
operator|=
name|LengthData
operator|::
name|None
expr_stmt|;
name|data
operator|.
name|style
operator|=
name|BorderStyle_None
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
operator|==
name|Value
operator|::
name|Length
operator|||
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
operator|==
name|Value
operator|::
name|Number
condition|)
block|{
name|data
operator|.
name|width
operator|=
name|lengthValue
argument_list|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|width
operator|=
name|lengthValueFromData
argument_list|(
name|data
operator|.
name|width
argument_list|,
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|i
operator|>=
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
condition|)
block|{
name|decl
operator|.
name|d
operator|->
name|parsed
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|<
name|BorderData
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|data
operator|.
name|style
operator|=
name|parseStyleValue
argument_list|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|style
operator|!=
name|BorderStyle_Unknown
condition|)
block|{
operator|*
name|style
operator|=
name|data
operator|.
name|style
expr_stmt|;
if|if
condition|(
operator|++
name|i
operator|>=
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
condition|)
block|{
name|decl
operator|.
name|d
operator|->
name|parsed
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|<
name|BorderData
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
name|data
operator|.
name|style
operator|=
name|BorderStyle_None
expr_stmt|;
block|}
name|data
operator|.
name|color
operator|=
name|parseBrushValue
argument_list|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|pal
argument_list|)
expr_stmt|;
operator|*
name|color
operator|=
name|brushFromData
argument_list|(
name|data
operator|.
name|color
argument_list|,
name|pal
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|color
operator|.
name|type
operator|!=
name|BrushData
operator|::
name|DependsOnThePalette
condition|)
name|decl
operator|.
name|d
operator|->
name|parsed
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|<
name|BorderData
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parseShorthandBackgroundProperty
specifier|static
name|void
name|parseShorthandBackgroundProperty
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|QCss
operator|::
name|Value
argument_list|>
modifier|&
name|values
parameter_list|,
name|BrushData
modifier|*
name|brush
parameter_list|,
name|QString
modifier|*
name|image
parameter_list|,
name|Repeat
modifier|*
name|repeat
parameter_list|,
name|Qt
operator|::
name|Alignment
modifier|*
name|alignment
parameter_list|,
specifier|const
name|QPalette
modifier|&
name|pal
parameter_list|)
block|{
operator|*
name|brush
operator|=
name|BrushData
argument_list|()
expr_stmt|;
operator|*
name|image
operator|=
name|QString
argument_list|()
expr_stmt|;
operator|*
name|repeat
operator|=
name|Repeat_XY
expr_stmt|;
operator|*
name|alignment
operator|=
name|Qt
operator|::
name|AlignTop
operator||
name|Qt
operator|::
name|AlignLeft
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QCss
operator|::
name|Value
modifier|&
name|v
init|=
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|type
operator|==
name|Value
operator|::
name|Uri
condition|)
block|{
operator|*
name|image
operator|=
name|v
operator|.
name|variant
operator|.
name|toString
argument_list|()
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|v
operator|.
name|type
operator|==
name|Value
operator|::
name|KnownIdentifier
operator|&&
name|v
operator|.
name|variant
operator|.
name|toInt
argument_list|()
operator|==
name|Value_None
condition|)
block|{
operator|*
name|image
operator|=
name|QString
argument_list|()
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|v
operator|.
name|type
operator|==
name|Value
operator|::
name|KnownIdentifier
operator|&&
name|v
operator|.
name|variant
operator|.
name|toInt
argument_list|()
operator|==
name|Value_Transparent
condition|)
block|{
operator|*
name|brush
operator|=
name|QBrush
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
block|}
name|Repeat
name|repeatAttempt
init|=
cast|static_cast
argument_list|<
name|Repeat
argument_list|>
argument_list|(
name|findKnownValue
argument_list|(
name|v
operator|.
name|variant
operator|.
name|toString
argument_list|()
argument_list|,
name|repeats
argument_list|,
name|NumKnownRepeats
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|repeatAttempt
operator|!=
name|Repeat_Unknown
condition|)
block|{
operator|*
name|repeat
operator|=
name|repeatAttempt
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|v
operator|.
name|type
operator|==
name|Value
operator|::
name|KnownIdentifier
condition|)
block|{
specifier|const
name|int
name|start
init|=
name|i
decl_stmt|;
name|int
name|count
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|values
operator|.
name|count
argument_list|()
operator|-
literal|1
operator|&&
name|values
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|type
operator|==
name|Value
operator|::
name|KnownIdentifier
condition|)
block|{
operator|++
name|i
expr_stmt|;
operator|++
name|count
expr_stmt|;
block|}
name|Qt
operator|::
name|Alignment
name|a
init|=
name|parseAlignment
argument_list|(
name|values
operator|.
name|constData
argument_list|()
operator|+
name|start
argument_list|,
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|int
argument_list|(
name|a
argument_list|)
operator|!=
literal|0
condition|)
block|{
operator|*
name|alignment
operator|=
name|a
expr_stmt|;
continue|continue;
block|}
name|i
operator|-=
name|count
operator|-
literal|1
expr_stmt|;
block|}
operator|*
name|brush
operator|=
name|parseBrushValue
argument_list|(
name|v
argument_list|,
name|pal
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|extractBackground
name|bool
name|ValueExtractor
operator|::
name|extractBackground
parameter_list|(
name|QBrush
modifier|*
name|brush
parameter_list|,
name|QString
modifier|*
name|image
parameter_list|,
name|Repeat
modifier|*
name|repeat
parameter_list|,
name|Qt
operator|::
name|Alignment
modifier|*
name|alignment
parameter_list|,
name|Origin
modifier|*
name|origin
parameter_list|,
name|Attachment
modifier|*
name|attachment
parameter_list|,
name|Origin
modifier|*
name|clip
parameter_list|)
block|{
name|bool
name|hit
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|declarations
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|Declaration
modifier|&
name|decl
init|=
name|declarations
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
specifier|const
name|QCss
operator|::
name|Value
modifier|&
name|val
init|=
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|decl
operator|.
name|d
operator|->
name|propertyId
condition|)
block|{
case|case
name|BackgroundColor
case|:
operator|*
name|brush
operator|=
name|decl
operator|.
name|brushValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|BackgroundImage
case|:
if|if
condition|(
name|val
operator|.
name|type
operator|==
name|Value
operator|::
name|Uri
condition|)
operator|*
name|image
operator|=
name|val
operator|.
name|variant
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|BackgroundRepeat
case|:
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|parsed
operator|.
name|isValid
argument_list|()
condition|)
block|{
operator|*
name|repeat
operator|=
cast|static_cast
argument_list|<
name|Repeat
argument_list|>
argument_list|(
name|decl
operator|.
name|d
operator|->
name|parsed
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|*
name|repeat
operator|=
cast|static_cast
argument_list|<
name|Repeat
argument_list|>
argument_list|(
name|findKnownValue
argument_list|(
name|val
operator|.
name|variant
operator|.
name|toString
argument_list|()
argument_list|,
name|repeats
argument_list|,
name|NumKnownRepeats
argument_list|)
argument_list|)
expr_stmt|;
name|decl
operator|.
name|d
operator|->
name|parsed
operator|=
operator|*
name|repeat
expr_stmt|;
block|}
break|break;
case|case
name|BackgroundPosition
case|:
operator|*
name|alignment
operator|=
name|decl
operator|.
name|alignmentValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|BackgroundOrigin
case|:
operator|*
name|origin
operator|=
name|decl
operator|.
name|originValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|BackgroundClip
case|:
operator|*
name|clip
operator|=
name|decl
operator|.
name|originValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|Background
case|:
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|parsed
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|BackgroundData
name|data
init|=
name|qvariant_cast
argument_list|<
name|BackgroundData
argument_list|>
argument_list|(
name|decl
operator|.
name|d
operator|->
name|parsed
argument_list|)
decl_stmt|;
operator|*
name|brush
operator|=
name|brushFromData
argument_list|(
name|data
operator|.
name|brush
argument_list|,
name|pal
argument_list|)
expr_stmt|;
operator|*
name|image
operator|=
name|data
operator|.
name|image
expr_stmt|;
operator|*
name|repeat
operator|=
name|data
operator|.
name|repeat
expr_stmt|;
operator|*
name|alignment
operator|=
name|data
operator|.
name|alignment
expr_stmt|;
block|}
else|else
block|{
name|BrushData
name|brushData
decl_stmt|;
name|parseShorthandBackgroundProperty
argument_list|(
name|decl
operator|.
name|d
operator|->
name|values
argument_list|,
operator|&
name|brushData
argument_list|,
name|image
argument_list|,
name|repeat
argument_list|,
name|alignment
argument_list|,
name|pal
argument_list|)
expr_stmt|;
operator|*
name|brush
operator|=
name|brushFromData
argument_list|(
name|brushData
argument_list|,
name|pal
argument_list|)
expr_stmt|;
if|if
condition|(
name|brushData
operator|.
name|type
operator|!=
name|BrushData
operator|::
name|DependsOnThePalette
condition|)
block|{
name|BackgroundData
name|data
init|=
block|{
name|brushData
block|,
operator|*
name|image
block|,
operator|*
name|repeat
block|,
operator|*
name|alignment
block|}
decl_stmt|;
name|decl
operator|.
name|d
operator|->
name|parsed
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|<
name|BackgroundData
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|BackgroundAttachment
case|:
operator|*
name|attachment
operator|=
name|decl
operator|.
name|attachmentValue
argument_list|()
expr_stmt|;
break|break;
default|default:
continue|continue;
block|}
name|hit
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|hit
return|;
block|}
end_function
begin_function
DECL|function|setFontSizeFromValue
specifier|static
name|bool
name|setFontSizeFromValue
parameter_list|(
name|QCss
operator|::
name|Value
name|value
parameter_list|,
name|QFont
modifier|*
name|font
parameter_list|,
name|int
modifier|*
name|fontSizeAdjustment
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|type
operator|==
name|Value
operator|::
name|KnownIdentifier
condition|)
block|{
name|bool
name|valid
init|=
literal|true
decl_stmt|;
switch|switch
condition|(
name|value
operator|.
name|variant
operator|.
name|toInt
argument_list|()
condition|)
block|{
case|case
name|Value_Small
case|:
operator|*
name|fontSizeAdjustment
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
case|case
name|Value_Medium
case|:
operator|*
name|fontSizeAdjustment
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|Value_Large
case|:
operator|*
name|fontSizeAdjustment
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|Value_XLarge
case|:
operator|*
name|fontSizeAdjustment
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|Value_XXLarge
case|:
operator|*
name|fontSizeAdjustment
operator|=
literal|3
expr_stmt|;
break|break;
default|default:
name|valid
operator|=
literal|false
expr_stmt|;
break|break;
block|}
return|return
name|valid
return|;
block|}
if|if
condition|(
name|value
operator|.
name|type
operator|!=
name|Value
operator|::
name|Length
condition|)
return|return
literal|false
return|;
name|bool
name|valid
init|=
literal|false
decl_stmt|;
name|QString
name|s
init|=
name|value
operator|.
name|variant
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"pt"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
name|s
operator|.
name|chop
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|value
operator|.
name|variant
operator|=
name|s
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|variant
operator|.
name|convert
argument_list|(
operator|(
name|QVariant
operator|::
name|Type
operator|)
name|qMetaTypeId
argument_list|<
name|qreal
argument_list|>
argument_list|()
argument_list|)
condition|)
block|{
name|font
operator|->
name|setPointSizeF
argument_list|(
name|value
operator|.
name|variant
operator|.
name|toReal
argument_list|()
argument_list|)
expr_stmt|;
name|valid
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"px"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
name|s
operator|.
name|chop
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|value
operator|.
name|variant
operator|=
name|s
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|variant
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
condition|)
block|{
name|font
operator|->
name|setPixelSize
argument_list|(
name|value
operator|.
name|variant
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|valid
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|valid
return|;
block|}
end_function
begin_function
DECL|function|setFontStyleFromValue
specifier|static
name|bool
name|setFontStyleFromValue
parameter_list|(
specifier|const
name|QCss
operator|::
name|Value
modifier|&
name|value
parameter_list|,
name|QFont
modifier|*
name|font
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|type
operator|!=
name|Value
operator|::
name|KnownIdentifier
condition|)
return|return
literal|false
return|;
switch|switch
condition|(
name|value
operator|.
name|variant
operator|.
name|toInt
argument_list|()
condition|)
block|{
case|case
name|Value_Normal
case|:
name|font
operator|->
name|setStyle
argument_list|(
name|QFont
operator|::
name|StyleNormal
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|Value_Italic
case|:
name|font
operator|->
name|setStyle
argument_list|(
name|QFont
operator|::
name|StyleItalic
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|Value_Oblique
case|:
name|font
operator|->
name|setStyle
argument_list|(
name|QFont
operator|::
name|StyleOblique
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
default|default:
break|break;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|setFontWeightFromValue
specifier|static
name|bool
name|setFontWeightFromValue
parameter_list|(
specifier|const
name|QCss
operator|::
name|Value
modifier|&
name|value
parameter_list|,
name|QFont
modifier|*
name|font
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|type
operator|==
name|Value
operator|::
name|KnownIdentifier
condition|)
block|{
switch|switch
condition|(
name|value
operator|.
name|variant
operator|.
name|toInt
argument_list|()
condition|)
block|{
case|case
name|Value_Normal
case|:
name|font
operator|->
name|setWeight
argument_list|(
name|QFont
operator|::
name|Normal
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|Value_Bold
case|:
name|font
operator|->
name|setWeight
argument_list|(
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
default|default:
break|break;
block|}
return|return
literal|false
return|;
block|}
if|if
condition|(
name|value
operator|.
name|type
operator|!=
name|Value
operator|::
name|Number
condition|)
return|return
literal|false
return|;
name|font
operator|->
name|setWeight
argument_list|(
name|qMin
argument_list|(
name|value
operator|.
name|variant
operator|.
name|toInt
argument_list|()
operator|/
literal|8
argument_list|,
literal|99
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/** \internal  * parse the font family from the values (starting from index \a start)  * and set it the \a font  * The function returns \c true if a family was extracted.  */
end_comment
begin_function
DECL|function|setFontFamilyFromValues
specifier|static
name|bool
name|setFontFamilyFromValues
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|QCss
operator|::
name|Value
argument_list|>
modifier|&
name|values
parameter_list|,
name|QFont
modifier|*
name|font
parameter_list|,
name|int
name|start
init|=
literal|0
parameter_list|)
block|{
name|QString
name|family
decl_stmt|;
name|bool
name|shouldAddSpace
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QCss
operator|::
name|Value
modifier|&
name|v
init|=
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|type
operator|==
name|Value
operator|::
name|TermOperatorComma
condition|)
block|{
name|family
operator|+=
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|shouldAddSpace
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
specifier|const
name|QString
name|str
init|=
name|v
operator|.
name|variant
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
if|if
condition|(
name|shouldAddSpace
condition|)
name|family
operator|+=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|family
operator|+=
name|str
expr_stmt|;
name|shouldAddSpace
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|family
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|font
operator|->
name|setFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setTextDecorationFromValues
specifier|static
name|void
name|setTextDecorationFromValues
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|QCss
operator|::
name|Value
argument_list|>
modifier|&
name|values
parameter_list|,
name|QFont
modifier|*
name|font
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
operator|!=
name|Value
operator|::
name|KnownIdentifier
condition|)
continue|continue;
switch|switch
condition|(
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|variant
operator|.
name|toInt
argument_list|()
condition|)
block|{
case|case
name|Value_Underline
case|:
name|font
operator|->
name|setUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|Value_Overline
case|:
name|font
operator|->
name|setOverline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|Value_LineThrough
case|:
name|font
operator|->
name|setStrikeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|Value_None
case|:
name|font
operator|->
name|setUnderline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|font
operator|->
name|setOverline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|font
operator|->
name|setStrikeOut
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|parseShorthandFontProperty
specifier|static
name|void
name|parseShorthandFontProperty
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|QCss
operator|::
name|Value
argument_list|>
modifier|&
name|values
parameter_list|,
name|QFont
modifier|*
name|font
parameter_list|,
name|int
modifier|*
name|fontSizeAdjustment
parameter_list|)
block|{
name|font
operator|->
name|setStyle
argument_list|(
name|QFont
operator|::
name|StyleNormal
argument_list|)
expr_stmt|;
name|font
operator|->
name|setWeight
argument_list|(
name|QFont
operator|::
name|Normal
argument_list|)
expr_stmt|;
operator|*
name|fontSizeAdjustment
operator|=
operator|-
literal|255
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|values
operator|.
name|count
argument_list|()
condition|)
block|{
if|if
condition|(
name|setFontStyleFromValue
argument_list|(
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|font
argument_list|)
operator|||
name|setFontWeightFromValue
argument_list|(
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|font
argument_list|)
condition|)
operator|++
name|i
expr_stmt|;
else|else
break|break;
block|}
if|if
condition|(
name|i
operator|<
name|values
operator|.
name|count
argument_list|()
condition|)
block|{
name|setFontSizeFromValue
argument_list|(
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|font
argument_list|,
name|fontSizeAdjustment
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
name|values
operator|.
name|count
argument_list|()
condition|)
block|{
name|setFontFamilyFromValues
argument_list|(
name|values
argument_list|,
name|font
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setFontVariantFromValue
specifier|static
name|void
name|setFontVariantFromValue
parameter_list|(
specifier|const
name|QCss
operator|::
name|Value
modifier|&
name|value
parameter_list|,
name|QFont
modifier|*
name|font
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|type
operator|==
name|Value
operator|::
name|KnownIdentifier
condition|)
block|{
switch|switch
condition|(
name|value
operator|.
name|variant
operator|.
name|toInt
argument_list|()
condition|)
block|{
case|case
name|Value_Normal
case|:
name|font
operator|->
name|setCapitalization
argument_list|(
name|QFont
operator|::
name|MixedCase
argument_list|)
expr_stmt|;
break|break;
case|case
name|Value_SmallCaps
case|:
name|font
operator|->
name|setCapitalization
argument_list|(
name|QFont
operator|::
name|SmallCaps
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setTextTransformFromValue
specifier|static
name|void
name|setTextTransformFromValue
parameter_list|(
specifier|const
name|QCss
operator|::
name|Value
modifier|&
name|value
parameter_list|,
name|QFont
modifier|*
name|font
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|type
operator|==
name|Value
operator|::
name|KnownIdentifier
condition|)
block|{
switch|switch
condition|(
name|value
operator|.
name|variant
operator|.
name|toInt
argument_list|()
condition|)
block|{
case|case
name|Value_None
case|:
name|font
operator|->
name|setCapitalization
argument_list|(
name|QFont
operator|::
name|MixedCase
argument_list|)
expr_stmt|;
break|break;
case|case
name|Value_Uppercase
case|:
name|font
operator|->
name|setCapitalization
argument_list|(
name|QFont
operator|::
name|AllUppercase
argument_list|)
expr_stmt|;
break|break;
case|case
name|Value_Lowercase
case|:
name|font
operator|->
name|setCapitalization
argument_list|(
name|QFont
operator|::
name|AllLowercase
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|extractFont
name|bool
name|ValueExtractor
operator|::
name|extractFont
parameter_list|(
name|QFont
modifier|*
name|font
parameter_list|,
name|int
modifier|*
name|fontSizeAdjustment
parameter_list|)
block|{
if|if
condition|(
name|fontExtracted
condition|)
block|{
operator|*
name|font
operator|=
name|f
expr_stmt|;
operator|*
name|fontSizeAdjustment
operator|=
name|adjustment
expr_stmt|;
return|return
name|fontExtracted
operator|==
literal|1
return|;
block|}
name|bool
name|hit
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|declarations
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|Declaration
modifier|&
name|decl
init|=
name|declarations
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
specifier|const
name|QCss
operator|::
name|Value
modifier|&
name|val
init|=
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|decl
operator|.
name|d
operator|->
name|propertyId
condition|)
block|{
case|case
name|FontSize
case|:
name|setFontSizeFromValue
argument_list|(
name|val
argument_list|,
name|font
argument_list|,
name|fontSizeAdjustment
argument_list|)
expr_stmt|;
break|break;
case|case
name|FontStyle
case|:
name|setFontStyleFromValue
argument_list|(
name|val
argument_list|,
name|font
argument_list|)
expr_stmt|;
break|break;
case|case
name|FontWeight
case|:
name|setFontWeightFromValue
argument_list|(
name|val
argument_list|,
name|font
argument_list|)
expr_stmt|;
break|break;
case|case
name|FontFamily
case|:
name|setFontFamilyFromValues
argument_list|(
name|decl
operator|.
name|d
operator|->
name|values
argument_list|,
name|font
argument_list|)
expr_stmt|;
break|break;
case|case
name|TextDecoration
case|:
name|setTextDecorationFromValues
argument_list|(
name|decl
operator|.
name|d
operator|->
name|values
argument_list|,
name|font
argument_list|)
expr_stmt|;
break|break;
case|case
name|Font
case|:
name|parseShorthandFontProperty
argument_list|(
name|decl
operator|.
name|d
operator|->
name|values
argument_list|,
name|font
argument_list|,
name|fontSizeAdjustment
argument_list|)
expr_stmt|;
break|break;
case|case
name|FontVariant
case|:
name|setFontVariantFromValue
argument_list|(
name|val
argument_list|,
name|font
argument_list|)
expr_stmt|;
break|break;
case|case
name|TextTransform
case|:
name|setTextTransformFromValue
argument_list|(
name|val
argument_list|,
name|font
argument_list|)
expr_stmt|;
break|break;
default|default:
continue|continue;
block|}
name|hit
operator|=
literal|true
expr_stmt|;
block|}
name|f
operator|=
operator|*
name|font
expr_stmt|;
name|adjustment
operator|=
operator|*
name|fontSizeAdjustment
expr_stmt|;
name|fontExtracted
operator|=
name|hit
condition|?
literal|1
else|:
literal|2
expr_stmt|;
return|return
name|hit
return|;
block|}
end_function
begin_function
DECL|function|extractPalette
name|bool
name|ValueExtractor
operator|::
name|extractPalette
parameter_list|(
name|QBrush
modifier|*
name|fg
parameter_list|,
name|QBrush
modifier|*
name|sfg
parameter_list|,
name|QBrush
modifier|*
name|sbg
parameter_list|,
name|QBrush
modifier|*
name|abg
parameter_list|)
block|{
name|bool
name|hit
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|declarations
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|Declaration
modifier|&
name|decl
init|=
name|declarations
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|decl
operator|.
name|d
operator|->
name|propertyId
condition|)
block|{
case|case
name|Color
case|:
operator|*
name|fg
operator|=
name|decl
operator|.
name|brushValue
argument_list|(
name|pal
argument_list|)
expr_stmt|;
break|break;
case|case
name|QtSelectionForeground
case|:
operator|*
name|sfg
operator|=
name|decl
operator|.
name|brushValue
argument_list|(
name|pal
argument_list|)
expr_stmt|;
break|break;
case|case
name|QtSelectionBackground
case|:
operator|*
name|sbg
operator|=
name|decl
operator|.
name|brushValue
argument_list|(
name|pal
argument_list|)
expr_stmt|;
break|break;
case|case
name|QtAlternateBackground
case|:
operator|*
name|abg
operator|=
name|decl
operator|.
name|brushValue
argument_list|(
name|pal
argument_list|)
expr_stmt|;
break|break;
default|default:
continue|continue;
block|}
name|hit
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|hit
return|;
block|}
end_function
begin_function
DECL|function|extractFont
name|void
name|ValueExtractor
operator|::
name|extractFont
parameter_list|()
block|{
if|if
condition|(
name|fontExtracted
condition|)
return|return;
name|int
name|dummy
init|=
operator|-
literal|255
decl_stmt|;
name|extractFont
argument_list|(
operator|&
name|f
argument_list|,
operator|&
name|dummy
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|extractImage
name|bool
name|ValueExtractor
operator|::
name|extractImage
parameter_list|(
name|QIcon
modifier|*
name|icon
parameter_list|,
name|Qt
operator|::
name|Alignment
modifier|*
name|a
parameter_list|,
name|QSize
modifier|*
name|size
parameter_list|)
block|{
name|bool
name|hit
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|declarations
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|Declaration
modifier|&
name|decl
init|=
name|declarations
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|decl
operator|.
name|d
operator|->
name|propertyId
condition|)
block|{
case|case
name|QtImage
case|:
operator|*
name|icon
operator|=
name|decl
operator|.
name|iconValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|>
literal|0
operator|&&
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|type
operator|==
name|Value
operator|::
name|Uri
condition|)
block|{
comment|// try to pull just the size from the image...
name|QImageReader
name|imageReader
argument_list|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|variant
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|*
name|size
operator|=
name|imageReader
operator|.
name|size
argument_list|()
operator|)
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// but we'll have to load the whole image if the
comment|// format doesn't support just reading the size
operator|*
name|size
operator|=
name|imageReader
operator|.
name|read
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
case|case
name|QtImageAlignment
case|:
operator|*
name|a
operator|=
name|decl
operator|.
name|alignmentValue
argument_list|()
expr_stmt|;
break|break;
default|default:
continue|continue;
block|}
name|hit
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|hit
return|;
block|}
end_function
begin_comment
comment|///////////////////////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|// Declaration
end_comment
begin_function
DECL|function|colorValue
name|QColor
name|Declaration
operator|::
name|colorValue
parameter_list|(
specifier|const
name|QPalette
modifier|&
name|pal
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|!=
literal|1
condition|)
return|return
name|QColor
argument_list|()
return|;
if|if
condition|(
name|d
operator|->
name|parsed
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|parsed
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Color
condition|)
return|return
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|d
operator|->
name|parsed
argument_list|)
return|;
if|if
condition|(
name|d
operator|->
name|parsed
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
condition|)
return|return
name|pal
operator|.
name|color
argument_list|(
call|(
name|QPalette
operator|::
name|ColorRole
call|)
argument_list|(
name|d
operator|->
name|parsed
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|ColorData
name|color
init|=
name|parseColorValue
argument_list|(
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|color
operator|.
name|type
operator|==
name|ColorData
operator|::
name|Role
condition|)
block|{
name|d
operator|->
name|parsed
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|<
name|int
argument_list|>
argument_list|(
name|color
operator|.
name|role
argument_list|)
expr_stmt|;
return|return
name|pal
operator|.
name|color
argument_list|(
call|(
name|QPalette
operator|::
name|ColorRole
call|)
argument_list|(
name|color
operator|.
name|role
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|d
operator|->
name|parsed
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|color
operator|.
name|color
argument_list|)
expr_stmt|;
return|return
name|color
operator|.
name|color
return|;
block|}
block|}
end_function
begin_function
DECL|function|brushValue
name|QBrush
name|Declaration
operator|::
name|brushValue
parameter_list|(
specifier|const
name|QPalette
modifier|&
name|pal
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|!=
literal|1
condition|)
return|return
name|QBrush
argument_list|()
return|;
if|if
condition|(
name|d
operator|->
name|parsed
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|parsed
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Brush
condition|)
return|return
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|d
operator|->
name|parsed
argument_list|)
return|;
if|if
condition|(
name|d
operator|->
name|parsed
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
condition|)
return|return
name|pal
operator|.
name|color
argument_list|(
call|(
name|QPalette
operator|::
name|ColorRole
call|)
argument_list|(
name|d
operator|->
name|parsed
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|BrushData
name|data
init|=
name|parseBrushValue
argument_list|(
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|pal
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|type
operator|==
name|BrushData
operator|::
name|Role
condition|)
block|{
name|d
operator|->
name|parsed
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|<
name|int
argument_list|>
argument_list|(
name|data
operator|.
name|role
argument_list|)
expr_stmt|;
return|return
name|pal
operator|.
name|color
argument_list|(
call|(
name|QPalette
operator|::
name|ColorRole
call|)
argument_list|(
name|data
operator|.
name|role
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|data
operator|.
name|type
operator|!=
name|BrushData
operator|::
name|DependsOnThePalette
condition|)
name|d
operator|->
name|parsed
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|data
operator|.
name|brush
argument_list|)
expr_stmt|;
return|return
name|data
operator|.
name|brush
return|;
block|}
block|}
end_function
begin_function
DECL|function|brushValues
name|void
name|Declaration
operator|::
name|brushValues
parameter_list|(
name|QBrush
modifier|*
name|c
parameter_list|,
specifier|const
name|QPalette
modifier|&
name|pal
parameter_list|)
specifier|const
block|{
name|int
name|needParse
init|=
literal|0x1f
decl_stmt|;
comment|// bits 0..3 say if we should parse the corresponding value.
comment|// the bit 4 say we need to update d->parsed
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|parsed
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|needParse
operator|=
literal|0
expr_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|v
init|=
name|d
operator|->
name|parsed
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|qMin
argument_list|(
name|v
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|v
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Brush
condition|)
block|{
name|c
index|[
name|i
index|]
operator|=
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|v
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
condition|)
block|{
name|c
index|[
name|i
index|]
operator|=
name|pal
operator|.
name|color
argument_list|(
call|(
name|QPalette
operator|::
name|ColorRole
call|)
argument_list|(
name|v
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|needParse
operator||=
operator|(
literal|1
operator|<<
name|i
operator|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|needParse
operator|!=
literal|0
condition|)
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|v
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|qMin
argument_list|(
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|needParse
operator|&
operator|(
literal|1
operator|<<
name|i
operator|)
operator|)
condition|)
continue|continue;
name|BrushData
name|data
init|=
name|parseBrushValue
argument_list|(
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|pal
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|type
operator|==
name|BrushData
operator|::
name|Role
condition|)
block|{
name|v
operator|+=
name|QVariant
operator|::
name|fromValue
argument_list|<
name|int
argument_list|>
argument_list|(
name|data
operator|.
name|role
argument_list|)
expr_stmt|;
name|c
index|[
name|i
index|]
operator|=
name|pal
operator|.
name|color
argument_list|(
call|(
name|QPalette
operator|::
name|ColorRole
call|)
argument_list|(
name|data
operator|.
name|role
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|data
operator|.
name|type
operator|!=
name|BrushData
operator|::
name|DependsOnThePalette
condition|)
block|{
name|v
operator|+=
name|QVariant
operator|::
name|fromValue
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|data
operator|.
name|brush
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|v
operator|+=
name|QVariant
argument_list|()
expr_stmt|;
block|}
name|c
index|[
name|i
index|]
operator|=
name|data
operator|.
name|brush
expr_stmt|;
block|}
block|}
if|if
condition|(
name|needParse
operator|&
literal|0x10
condition|)
name|d
operator|->
name|parsed
operator|=
name|v
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|c
index|[
literal|0
index|]
operator|=
name|c
index|[
literal|1
index|]
operator|=
name|c
index|[
literal|2
index|]
operator|=
name|c
index|[
literal|3
index|]
operator|=
name|QBrush
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|==
literal|1
condition|)
name|c
index|[
literal|3
index|]
operator|=
name|c
index|[
literal|2
index|]
operator|=
name|c
index|[
literal|1
index|]
operator|=
name|c
index|[
literal|0
index|]
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|==
literal|2
condition|)
name|c
index|[
literal|2
index|]
operator|=
name|c
index|[
literal|0
index|]
operator|,
name|c
index|[
literal|3
index|]
operator|=
name|c
index|[
literal|1
index|]
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|==
literal|3
condition|)
name|c
index|[
literal|3
index|]
operator|=
name|c
index|[
literal|1
index|]
expr_stmt|;
block|}
end_function
begin_function
DECL|function|realValue
name|bool
name|Declaration
operator|::
name|realValue
parameter_list|(
name|qreal
modifier|*
name|real
parameter_list|,
specifier|const
name|char
modifier|*
name|unit
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|!=
literal|1
condition|)
return|return
literal|false
return|;
specifier|const
name|Value
modifier|&
name|v
init|=
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|unit
operator|&&
name|v
operator|.
name|type
operator|!=
name|Value
operator|::
name|Length
condition|)
return|return
literal|false
return|;
name|QString
name|s
init|=
name|v
operator|.
name|variant
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|unit
condition|)
block|{
if|if
condition|(
operator|!
name|s
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
name|unit
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
return|return
literal|false
return|;
name|s
operator|.
name|chop
argument_list|(
name|qstrlen
argument_list|(
name|unit
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|qreal
name|val
init|=
name|s
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
operator|*
name|real
operator|=
name|val
expr_stmt|;
return|return
name|ok
return|;
block|}
end_function
begin_function
DECL|function|intValueHelper
specifier|static
name|bool
name|intValueHelper
parameter_list|(
specifier|const
name|QCss
operator|::
name|Value
modifier|&
name|v
parameter_list|,
name|int
modifier|*
name|i
parameter_list|,
specifier|const
name|char
modifier|*
name|unit
parameter_list|)
block|{
if|if
condition|(
name|unit
operator|&&
name|v
operator|.
name|type
operator|!=
name|Value
operator|::
name|Length
condition|)
return|return
literal|false
return|;
name|QString
name|s
init|=
name|v
operator|.
name|variant
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|unit
condition|)
block|{
if|if
condition|(
operator|!
name|s
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
name|unit
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
return|return
literal|false
return|;
name|s
operator|.
name|chop
argument_list|(
name|qstrlen
argument_list|(
name|unit
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|int
name|val
init|=
name|s
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
operator|*
name|i
operator|=
name|val
expr_stmt|;
return|return
name|ok
return|;
block|}
end_function
begin_function
DECL|function|intValue
name|bool
name|Declaration
operator|::
name|intValue
parameter_list|(
name|int
modifier|*
name|i
parameter_list|,
specifier|const
name|char
modifier|*
name|unit
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|!=
literal|1
condition|)
return|return
literal|false
return|;
return|return
name|intValueHelper
argument_list|(
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|i
argument_list|,
name|unit
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|sizeValue
name|QSize
name|Declaration
operator|::
name|sizeValue
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|parsed
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|qvariant_cast
argument_list|<
name|QSize
argument_list|>
argument_list|(
name|d
operator|->
name|parsed
argument_list|)
return|;
name|int
name|x
index|[
literal|2
index|]
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
name|intValueHelper
argument_list|(
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|&
name|x
index|[
literal|0
index|]
argument_list|,
literal|"px"
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
name|intValueHelper
argument_list|(
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|&
name|x
index|[
literal|1
index|]
argument_list|,
literal|"px"
argument_list|)
expr_stmt|;
else|else
name|x
index|[
literal|1
index|]
operator|=
name|x
index|[
literal|0
index|]
expr_stmt|;
name|QSize
name|size
argument_list|(
name|x
index|[
literal|0
index|]
argument_list|,
name|x
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|d
operator|->
name|parsed
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|<
name|QSize
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
return|return
name|size
return|;
block|}
end_function
begin_function
DECL|function|rectValue
name|QRect
name|Declaration
operator|::
name|rectValue
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|!=
literal|1
condition|)
return|return
name|QRect
argument_list|()
return|;
if|if
condition|(
name|d
operator|->
name|parsed
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|qvariant_cast
argument_list|<
name|QRect
argument_list|>
argument_list|(
name|d
operator|->
name|parsed
argument_list|)
return|;
specifier|const
name|QCss
operator|::
name|Value
modifier|&
name|v
init|=
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|type
operator|!=
name|Value
operator|::
name|Function
condition|)
return|return
name|QRect
argument_list|()
return|;
name|QStringList
name|func
init|=
name|v
operator|.
name|variant
operator|.
name|toStringList
argument_list|()
decl_stmt|;
if|if
condition|(
name|func
operator|.
name|count
argument_list|()
operator|!=
literal|2
operator|||
name|func
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"rect"
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
return|return
name|QRect
argument_list|()
return|;
name|QStringList
name|args
init|=
name|func
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|count
argument_list|()
operator|!=
literal|4
condition|)
return|return
name|QRect
argument_list|()
return|;
name|QRect
name|rect
argument_list|(
name|args
index|[
literal|0
index|]
operator|.
name|toInt
argument_list|()
argument_list|,
name|args
index|[
literal|1
index|]
operator|.
name|toInt
argument_list|()
argument_list|,
name|args
index|[
literal|2
index|]
operator|.
name|toInt
argument_list|()
argument_list|,
name|args
index|[
literal|3
index|]
operator|.
name|toInt
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|->
name|parsed
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|<
name|QRect
argument_list|>
argument_list|(
name|rect
argument_list|)
expr_stmt|;
return|return
name|rect
return|;
block|}
end_function
begin_function
DECL|function|colorValues
name|void
name|Declaration
operator|::
name|colorValues
parameter_list|(
name|QColor
modifier|*
name|c
parameter_list|,
specifier|const
name|QPalette
modifier|&
name|pal
parameter_list|)
specifier|const
block|{
name|int
name|i
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|parsed
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|v
init|=
name|d
operator|->
name|parsed
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|qMin
argument_list|(
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|v
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Color
condition|)
block|{
name|c
index|[
name|i
index|]
operator|=
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|v
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
index|[
name|i
index|]
operator|=
name|pal
operator|.
name|color
argument_list|(
call|(
name|QPalette
operator|::
name|ColorRole
call|)
argument_list|(
name|v
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|v
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|qMin
argument_list|(
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|ColorData
name|color
init|=
name|parseColorValue
argument_list|(
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|color
operator|.
name|type
operator|==
name|ColorData
operator|::
name|Role
condition|)
block|{
name|v
operator|+=
name|QVariant
operator|::
name|fromValue
argument_list|<
name|int
argument_list|>
argument_list|(
name|color
operator|.
name|role
argument_list|)
expr_stmt|;
name|c
index|[
name|i
index|]
operator|=
name|pal
operator|.
name|color
argument_list|(
call|(
name|QPalette
operator|::
name|ColorRole
call|)
argument_list|(
name|color
operator|.
name|role
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|v
operator|+=
name|QVariant
operator|::
name|fromValue
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|color
operator|.
name|color
argument_list|)
expr_stmt|;
name|c
index|[
name|i
index|]
operator|=
name|color
operator|.
name|color
expr_stmt|;
block|}
block|}
name|d
operator|->
name|parsed
operator|=
name|v
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|c
index|[
literal|0
index|]
operator|=
name|c
index|[
literal|1
index|]
operator|=
name|c
index|[
literal|2
index|]
operator|=
name|c
index|[
literal|3
index|]
operator|=
name|QColor
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|==
literal|1
condition|)
name|c
index|[
literal|3
index|]
operator|=
name|c
index|[
literal|2
index|]
operator|=
name|c
index|[
literal|1
index|]
operator|=
name|c
index|[
literal|0
index|]
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|==
literal|2
condition|)
name|c
index|[
literal|2
index|]
operator|=
name|c
index|[
literal|0
index|]
operator|,
name|c
index|[
literal|3
index|]
operator|=
name|c
index|[
literal|1
index|]
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|==
literal|3
condition|)
name|c
index|[
literal|3
index|]
operator|=
name|c
index|[
literal|1
index|]
expr_stmt|;
block|}
end_function
begin_function
DECL|function|styleValue
name|BorderStyle
name|Declaration
operator|::
name|styleValue
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|!=
literal|1
condition|)
return|return
name|BorderStyle_None
return|;
return|return
name|parseStyleValue
argument_list|(
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|styleValues
name|void
name|Declaration
operator|::
name|styleValues
parameter_list|(
name|BorderStyle
modifier|*
name|s
parameter_list|)
specifier|const
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|qMin
argument_list|(
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
condition|;
name|i
operator|++
control|)
name|s
index|[
name|i
index|]
operator|=
name|parseStyleValue
argument_list|(
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|s
index|[
literal|0
index|]
operator|=
name|s
index|[
literal|1
index|]
operator|=
name|s
index|[
literal|2
index|]
operator|=
name|s
index|[
literal|3
index|]
operator|=
name|BorderStyle_None
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|==
literal|1
condition|)
name|s
index|[
literal|3
index|]
operator|=
name|s
index|[
literal|2
index|]
operator|=
name|s
index|[
literal|1
index|]
operator|=
name|s
index|[
literal|0
index|]
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|==
literal|2
condition|)
name|s
index|[
literal|2
index|]
operator|=
name|s
index|[
literal|0
index|]
operator|,
name|s
index|[
literal|3
index|]
operator|=
name|s
index|[
literal|1
index|]
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|==
literal|3
condition|)
name|s
index|[
literal|3
index|]
operator|=
name|s
index|[
literal|1
index|]
expr_stmt|;
block|}
end_function
begin_function
DECL|function|repeatValue
name|Repeat
name|Declaration
operator|::
name|repeatValue
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|parsed
operator|.
name|isValid
argument_list|()
condition|)
return|return
cast|static_cast
argument_list|<
name|Repeat
argument_list|>
argument_list|(
name|d
operator|->
name|parsed
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|!=
literal|1
condition|)
return|return
name|Repeat_Unknown
return|;
name|int
name|v
init|=
name|findKnownValue
argument_list|(
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|variant
operator|.
name|toString
argument_list|()
argument_list|,
name|repeats
argument_list|,
name|NumKnownRepeats
argument_list|)
decl_stmt|;
name|d
operator|->
name|parsed
operator|=
name|v
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|Repeat
argument_list|>
argument_list|(
name|v
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|originValue
name|Origin
name|Declaration
operator|::
name|originValue
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|parsed
operator|.
name|isValid
argument_list|()
condition|)
return|return
cast|static_cast
argument_list|<
name|Origin
argument_list|>
argument_list|(
name|d
operator|->
name|parsed
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|!=
literal|1
condition|)
return|return
name|Origin_Unknown
return|;
name|int
name|v
init|=
name|findKnownValue
argument_list|(
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|variant
operator|.
name|toString
argument_list|()
argument_list|,
name|origins
argument_list|,
name|NumKnownOrigins
argument_list|)
decl_stmt|;
name|d
operator|->
name|parsed
operator|=
name|v
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|Origin
argument_list|>
argument_list|(
name|v
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|positionValue
name|PositionMode
name|Declaration
operator|::
name|positionValue
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|parsed
operator|.
name|isValid
argument_list|()
condition|)
return|return
cast|static_cast
argument_list|<
name|PositionMode
argument_list|>
argument_list|(
name|d
operator|->
name|parsed
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|!=
literal|1
condition|)
return|return
name|PositionMode_Unknown
return|;
name|int
name|v
init|=
name|findKnownValue
argument_list|(
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|variant
operator|.
name|toString
argument_list|()
argument_list|,
name|positions
argument_list|,
name|NumKnownPositionModes
argument_list|)
decl_stmt|;
name|d
operator|->
name|parsed
operator|=
name|v
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|PositionMode
argument_list|>
argument_list|(
name|v
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|attachmentValue
name|Attachment
name|Declaration
operator|::
name|attachmentValue
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|parsed
operator|.
name|isValid
argument_list|()
condition|)
return|return
cast|static_cast
argument_list|<
name|Attachment
argument_list|>
argument_list|(
name|d
operator|->
name|parsed
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|!=
literal|1
condition|)
return|return
name|Attachment_Unknown
return|;
name|int
name|v
init|=
name|findKnownValue
argument_list|(
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|variant
operator|.
name|toString
argument_list|()
argument_list|,
name|attachments
argument_list|,
name|NumKnownAttachments
argument_list|)
decl_stmt|;
name|d
operator|->
name|parsed
operator|=
name|v
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|Attachment
argument_list|>
argument_list|(
name|v
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|styleFeaturesValue
name|int
name|Declaration
operator|::
name|styleFeaturesValue
parameter_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|propertyId
operator|==
name|QtStyleFeatures
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|parsed
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|d
operator|->
name|parsed
operator|.
name|toInt
argument_list|()
return|;
name|int
name|features
init|=
name|StyleFeature_None
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|features
operator||=
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|findKnownValue
argument_list|(
name|d
operator|->
name|values
operator|.
name|value
argument_list|(
name|i
argument_list|)
operator|.
name|variant
operator|.
name|toString
argument_list|()
argument_list|,
name|styleFeatures
argument_list|,
name|NumKnownStyleFeatures
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|parsed
operator|=
name|features
expr_stmt|;
return|return
name|features
return|;
block|}
end_function
begin_function
DECL|function|uriValue
name|QString
name|Declaration
operator|::
name|uriValue
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|values
operator|.
name|isEmpty
argument_list|()
operator|||
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|type
operator|!=
name|Value
operator|::
name|Uri
condition|)
return|return
name|QString
argument_list|()
return|;
return|return
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|variant
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|alignmentValue
name|Qt
operator|::
name|Alignment
name|Declaration
operator|::
name|alignmentValue
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|parsed
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|Qt
operator|::
name|Alignment
argument_list|(
name|d
operator|->
name|parsed
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|d
operator|->
name|values
operator|.
name|isEmpty
argument_list|()
operator|||
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|>
literal|2
condition|)
return|return
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignTop
return|;
name|Qt
operator|::
name|Alignment
name|v
init|=
name|parseAlignment
argument_list|(
name|d
operator|->
name|values
operator|.
name|constData
argument_list|()
argument_list|,
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|->
name|parsed
operator|=
name|int
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
end_function
begin_function
DECL|function|borderImageValue
name|void
name|Declaration
operator|::
name|borderImageValue
parameter_list|(
name|QString
modifier|*
name|image
parameter_list|,
name|int
modifier|*
name|cuts
parameter_list|,
name|TileMode
modifier|*
name|h
parameter_list|,
name|TileMode
modifier|*
name|v
parameter_list|)
specifier|const
block|{
operator|*
name|image
operator|=
name|uriValue
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
name|cuts
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
operator|*
name|h
operator|=
operator|*
name|v
operator|=
name|TileMode_Stretch
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|<
literal|2
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|type
operator|==
name|Value
operator|::
name|Number
condition|)
block|{
comment|// cuts!
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|qMin
argument_list|(
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|,
literal|4
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|Value
modifier|&
name|v
init|=
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|type
operator|!=
name|Value
operator|::
name|Number
condition|)
break|break;
name|cuts
index|[
name|i
index|]
operator|=
name|v
operator|.
name|variant
operator|.
name|toString
argument_list|()
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|cuts
index|[
literal|0
index|]
operator|=
name|cuts
index|[
literal|1
index|]
operator|=
name|cuts
index|[
literal|2
index|]
operator|=
name|cuts
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|==
literal|1
condition|)
name|cuts
index|[
literal|3
index|]
operator|=
name|cuts
index|[
literal|2
index|]
operator|=
name|cuts
index|[
literal|1
index|]
operator|=
name|cuts
index|[
literal|0
index|]
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|==
literal|2
condition|)
name|cuts
index|[
literal|2
index|]
operator|=
name|cuts
index|[
literal|0
index|]
operator|,
name|cuts
index|[
literal|3
index|]
operator|=
name|cuts
index|[
literal|1
index|]
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|==
literal|3
condition|)
name|cuts
index|[
literal|3
index|]
operator|=
name|cuts
index|[
literal|1
index|]
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|values
operator|.
name|last
argument_list|()
operator|.
name|type
operator|==
name|Value
operator|::
name|Identifier
condition|)
block|{
operator|*
name|v
operator|=
cast|static_cast
argument_list|<
name|TileMode
argument_list|>
argument_list|(
name|findKnownValue
argument_list|(
name|d
operator|->
name|values
operator|.
name|last
argument_list|()
operator|.
name|variant
operator|.
name|toString
argument_list|()
argument_list|,
name|tileModes
argument_list|,
name|NumKnownTileModes
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|values
index|[
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|-
literal|2
index|]
operator|.
name|type
operator|==
name|Value
operator|::
name|Identifier
condition|)
block|{
operator|*
name|h
operator|=
cast|static_cast
argument_list|<
name|TileMode
argument_list|>
argument_list|(
name|findKnownValue
argument_list|(
name|d
operator|->
name|values
index|[
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|-
literal|2
index|]
operator|.
name|variant
operator|.
name|toString
argument_list|()
argument_list|,
name|tileModes
argument_list|,
name|NumKnownTileModes
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
operator|*
name|h
operator|=
operator|*
name|v
expr_stmt|;
block|}
end_function
begin_function
DECL|function|iconValue
name|QIcon
name|Declaration
operator|::
name|iconValue
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|parsed
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|qvariant_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|d
operator|->
name|parsed
argument_list|)
return|;
name|QIcon
name|icon
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
condition|;
control|)
block|{
specifier|const
name|Value
modifier|&
name|value
init|=
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|type
operator|!=
name|Value
operator|::
name|Uri
condition|)
break|break;
name|QString
name|uri
init|=
name|value
operator|.
name|variant
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QIcon
operator|::
name|Mode
name|mode
init|=
name|QIcon
operator|::
name|Normal
decl_stmt|;
name|QIcon
operator|::
name|State
name|state
init|=
name|QIcon
operator|::
name|Off
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|2
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|&&
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
operator|==
name|Value
operator|::
name|KnownIdentifier
condition|)
block|{
switch|switch
condition|(
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|variant
operator|.
name|toInt
argument_list|()
condition|)
block|{
case|case
name|Value_Disabled
case|:
name|mode
operator|=
name|QIcon
operator|::
name|Disabled
expr_stmt|;
break|break;
case|case
name|Value_Active
case|:
name|mode
operator|=
name|QIcon
operator|::
name|Active
expr_stmt|;
break|break;
case|case
name|Value_Selected
case|:
name|mode
operator|=
name|QIcon
operator|::
name|Selected
expr_stmt|;
break|break;
case|case
name|Value_Normal
case|:
name|mode
operator|=
name|QIcon
operator|::
name|Normal
expr_stmt|;
break|break;
case|case
name|Value_On
case|:
name|state
operator|=
name|QIcon
operator|::
name|On
expr_stmt|;
break|break;
case|case
name|Value_Off
case|:
name|state
operator|=
name|QIcon
operator|::
name|Off
expr_stmt|;
break|break;
default|default:
break|break;
block|}
operator|++
name|i
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
comment|// QIcon is soo broken
if|if
condition|(
name|icon
operator|.
name|isNull
argument_list|()
condition|)
name|icon
operator|=
name|QIcon
argument_list|(
name|uri
argument_list|)
expr_stmt|;
else|else
name|icon
operator|.
name|addPixmap
argument_list|(
name|uri
argument_list|,
name|mode
argument_list|,
name|state
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
condition|)
break|break;
if|if
condition|(
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
operator|==
name|Value
operator|::
name|TermOperatorComma
condition|)
name|i
operator|++
expr_stmt|;
block|}
name|d
operator|->
name|parsed
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|icon
argument_list|)
expr_stmt|;
return|return
name|icon
return|;
block|}
end_function
begin_comment
comment|///////////////////////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|// Selector
end_comment
begin_function
DECL|function|specificity
name|int
name|Selector
operator|::
name|specificity
parameter_list|()
specifier|const
block|{
name|int
name|val
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|basicSelectors
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|BasicSelector
modifier|&
name|sel
init|=
name|basicSelectors
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sel
operator|.
name|elementName
operator|.
name|isEmpty
argument_list|()
condition|)
name|val
operator|+=
literal|1
expr_stmt|;
name|val
operator|+=
operator|(
name|sel
operator|.
name|pseudos
operator|.
name|count
argument_list|()
operator|+
name|sel
operator|.
name|attributeSelectors
operator|.
name|count
argument_list|()
operator|)
operator|*
literal|0x10
expr_stmt|;
name|val
operator|+=
name|sel
operator|.
name|ids
operator|.
name|count
argument_list|()
operator|*
literal|0x100
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
end_function
begin_function
DECL|function|pseudoElement
name|QString
name|Selector
operator|::
name|pseudoElement
parameter_list|()
specifier|const
block|{
specifier|const
name|BasicSelector
modifier|&
name|bs
init|=
name|basicSelectors
operator|.
name|last
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|bs
operator|.
name|pseudos
operator|.
name|isEmpty
argument_list|()
operator|&&
name|bs
operator|.
name|pseudos
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|type
operator|==
name|PseudoClass_Unknown
condition|)
return|return
name|bs
operator|.
name|pseudos
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|name
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|pseudoClass
name|quint64
name|Selector
operator|::
name|pseudoClass
parameter_list|(
name|quint64
modifier|*
name|negated
parameter_list|)
specifier|const
block|{
specifier|const
name|BasicSelector
modifier|&
name|bs
init|=
name|basicSelectors
operator|.
name|last
argument_list|()
decl_stmt|;
if|if
condition|(
name|bs
operator|.
name|pseudos
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|PseudoClass_Unspecified
return|;
name|quint64
name|pc
init|=
name|PseudoClass_Unknown
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|!
name|pseudoElement
argument_list|()
operator|.
name|isEmpty
argument_list|()
init|;
name|i
operator|<
name|bs
operator|.
name|pseudos
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|Pseudo
modifier|&
name|pseudo
init|=
name|bs
operator|.
name|pseudos
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|pseudo
operator|.
name|type
operator|==
name|PseudoClass_Unknown
condition|)
return|return
name|PseudoClass_Unknown
return|;
if|if
condition|(
operator|!
name|pseudo
operator|.
name|negated
condition|)
name|pc
operator||=
name|pseudo
operator|.
name|type
expr_stmt|;
elseif|else
if|if
condition|(
name|negated
condition|)
operator|*
name|negated
operator||=
name|pseudo
operator|.
name|type
expr_stmt|;
block|}
return|return
name|pc
return|;
block|}
end_function
begin_comment
comment|///////////////////////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|// StyleSheet
end_comment
begin_function
DECL|function|buildIndexes
name|void
name|StyleSheet
operator|::
name|buildIndexes
parameter_list|(
name|Qt
operator|::
name|CaseSensitivity
name|nameCaseSensitivity
parameter_list|)
block|{
name|QVector
argument_list|<
name|StyleRule
argument_list|>
name|universals
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|styleRules
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|StyleRule
modifier|&
name|rule
init|=
name|styleRules
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|Selector
argument_list|>
name|universalsSelectors
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|rule
operator|.
name|selectors
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
specifier|const
name|Selector
modifier|&
name|selector
init|=
name|rule
operator|.
name|selectors
operator|.
name|at
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|selector
operator|.
name|basicSelectors
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|selector
operator|.
name|basicSelectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|relationToNext
operator|==
name|BasicSelector
operator|::
name|NoRelation
condition|)
block|{
if|if
condition|(
name|selector
operator|.
name|basicSelectors
operator|.
name|count
argument_list|()
operator|!=
literal|1
condition|)
continue|continue;
block|}
elseif|else
if|if
condition|(
name|selector
operator|.
name|basicSelectors
operator|.
name|count
argument_list|()
operator|<=
literal|1
condition|)
block|{
continue|continue;
block|}
specifier|const
name|BasicSelector
modifier|&
name|sel
init|=
name|selector
operator|.
name|basicSelectors
operator|.
name|at
argument_list|(
name|selector
operator|.
name|basicSelectors
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sel
operator|.
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StyleRule
name|nr
decl_stmt|;
name|nr
operator|.
name|selectors
operator|+=
name|selector
expr_stmt|;
name|nr
operator|.
name|declarations
operator|=
name|rule
operator|.
name|declarations
expr_stmt|;
name|nr
operator|.
name|order
operator|=
name|i
expr_stmt|;
name|idIndex
operator|.
name|insert
argument_list|(
name|sel
operator|.
name|ids
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|nr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|sel
operator|.
name|elementName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StyleRule
name|nr
decl_stmt|;
name|nr
operator|.
name|selectors
operator|+=
name|selector
expr_stmt|;
name|nr
operator|.
name|declarations
operator|=
name|rule
operator|.
name|declarations
expr_stmt|;
name|nr
operator|.
name|order
operator|=
name|i
expr_stmt|;
name|QString
name|name
init|=
name|sel
operator|.
name|elementName
decl_stmt|;
if|if
condition|(
name|nameCaseSensitivity
operator|==
name|Qt
operator|::
name|CaseInsensitive
condition|)
name|name
operator|=
name|name
operator|.
name|toLower
argument_list|()
expr_stmt|;
name|nameIndex
operator|.
name|insert
argument_list|(
name|name
argument_list|,
name|nr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|universalsSelectors
operator|+=
name|selector
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|universalsSelectors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StyleRule
name|nr
decl_stmt|;
name|nr
operator|.
name|selectors
operator|=
name|universalsSelectors
expr_stmt|;
name|nr
operator|.
name|declarations
operator|=
name|rule
operator|.
name|declarations
expr_stmt|;
name|nr
operator|.
name|order
operator|=
name|i
expr_stmt|;
name|universals
operator|<<
name|nr
expr_stmt|;
block|}
block|}
name|styleRules
operator|=
name|universals
expr_stmt|;
block|}
end_function
begin_comment
comment|///////////////////////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|// StyleSelector
end_comment
begin_destructor
DECL|function|~StyleSelector
name|StyleSelector
operator|::
name|~
name|StyleSelector
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|nodeNameEquals
name|bool
name|StyleSelector
operator|::
name|nodeNameEquals
parameter_list|(
name|NodePtr
name|node
parameter_list|,
specifier|const
name|QString
modifier|&
name|nodeName
parameter_list|)
specifier|const
block|{
return|return
name|nodeNames
argument_list|(
name|node
argument_list|)
operator|.
name|contains
argument_list|(
name|nodeName
argument_list|,
name|nameCaseSensitivity
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|nodeIds
name|QStringList
name|StyleSelector
operator|::
name|nodeIds
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
block|{
return|return
name|QStringList
argument_list|(
name|attribute
argument_list|(
name|node
argument_list|,
name|QLatin1String
argument_list|(
literal|"id"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|selectorMatches
name|bool
name|StyleSelector
operator|::
name|selectorMatches
parameter_list|(
specifier|const
name|Selector
modifier|&
name|selector
parameter_list|,
name|NodePtr
name|node
parameter_list|)
block|{
if|if
condition|(
name|selector
operator|.
name|basicSelectors
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|selector
operator|.
name|basicSelectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|relationToNext
operator|==
name|BasicSelector
operator|::
name|NoRelation
condition|)
block|{
if|if
condition|(
name|selector
operator|.
name|basicSelectors
operator|.
name|count
argument_list|()
operator|!=
literal|1
condition|)
return|return
literal|false
return|;
return|return
name|basicSelectorMatches
argument_list|(
name|selector
operator|.
name|basicSelectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|node
argument_list|)
return|;
block|}
if|if
condition|(
name|selector
operator|.
name|basicSelectors
operator|.
name|count
argument_list|()
operator|<=
literal|1
condition|)
return|return
literal|false
return|;
name|int
name|i
init|=
name|selector
operator|.
name|basicSelectors
operator|.
name|count
argument_list|()
operator|-
literal|1
decl_stmt|;
name|node
operator|=
name|duplicateNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|bool
name|match
init|=
literal|true
decl_stmt|;
name|BasicSelector
name|sel
init|=
name|selector
operator|.
name|basicSelectors
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
do|do
block|{
name|match
operator|=
name|basicSelectorMatches
argument_list|(
name|sel
argument_list|,
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|match
condition|)
block|{
if|if
condition|(
name|sel
operator|.
name|relationToNext
operator|==
name|BasicSelector
operator|::
name|MatchNextSelectorIfParent
operator|||
name|i
operator|==
name|selector
operator|.
name|basicSelectors
operator|.
name|count
argument_list|()
operator|-
literal|1
condition|)
comment|// first element must always match!
break|break;
block|}
if|if
condition|(
name|match
operator|||
name|sel
operator|.
name|relationToNext
operator|!=
name|BasicSelector
operator|::
name|MatchNextSelectorIfAncestor
condition|)
operator|--
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
break|break;
name|sel
operator|=
name|selector
operator|.
name|basicSelectors
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|sel
operator|.
name|relationToNext
operator|==
name|BasicSelector
operator|::
name|MatchNextSelectorIfAncestor
operator|||
name|sel
operator|.
name|relationToNext
operator|==
name|BasicSelector
operator|::
name|MatchNextSelectorIfParent
condition|)
block|{
name|NodePtr
name|nextParent
init|=
name|parentNode
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|freeNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|node
operator|=
name|nextParent
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sel
operator|.
name|relationToNext
operator|==
name|BasicSelector
operator|::
name|MatchNextSelectorIfPreceeds
condition|)
block|{
name|NodePtr
name|previousSibling
init|=
name|previousSiblingNode
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|freeNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|node
operator|=
name|previousSibling
expr_stmt|;
block|}
if|if
condition|(
name|isNullNode
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
do|while
condition|(
name|i
operator|>=
literal|0
operator|&&
operator|(
name|match
operator|||
name|sel
operator|.
name|relationToNext
operator|==
name|BasicSelector
operator|::
name|MatchNextSelectorIfAncestor
operator|)
condition|)
do|;
name|freeNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|match
return|;
block|}
end_function
begin_function
DECL|function|basicSelectorMatches
name|bool
name|StyleSelector
operator|::
name|basicSelectorMatches
parameter_list|(
specifier|const
name|BasicSelector
modifier|&
name|sel
parameter_list|,
name|NodePtr
name|node
parameter_list|)
block|{
if|if
condition|(
operator|!
name|sel
operator|.
name|attributeSelectors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|hasAttributes
argument_list|(
name|node
argument_list|)
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sel
operator|.
name|attributeSelectors
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QCss
operator|::
name|AttributeSelector
modifier|&
name|a
init|=
name|sel
operator|.
name|attributeSelectors
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|attrValue
init|=
name|attribute
argument_list|(
name|node
argument_list|,
name|a
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|attrValue
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|a
operator|.
name|valueMatchCriterium
operator|==
name|QCss
operator|::
name|AttributeSelector
operator|::
name|MatchContains
condition|)
block|{
name|QStringList
name|lst
init|=
name|attrValue
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lst
operator|.
name|contains
argument_list|(
name|a
operator|.
name|value
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|a
operator|.
name|valueMatchCriterium
operator|==
name|QCss
operator|::
name|AttributeSelector
operator|::
name|MatchEqual
operator|&&
name|attrValue
operator|!=
name|a
operator|.
name|value
operator|)
operator|||
operator|(
name|a
operator|.
name|valueMatchCriterium
operator|==
name|QCss
operator|::
name|AttributeSelector
operator|::
name|MatchBeginsWith
operator|&&
operator|!
name|attrValue
operator|.
name|startsWith
argument_list|(
name|a
operator|.
name|value
argument_list|)
operator|)
condition|)
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
operator|!
name|sel
operator|.
name|elementName
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|nodeNameEquals
argument_list|(
name|node
argument_list|,
name|sel
operator|.
name|elementName
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|sel
operator|.
name|ids
operator|.
name|isEmpty
argument_list|()
operator|&&
name|sel
operator|.
name|ids
operator|!=
name|nodeIds
argument_list|(
name|node
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|matchRule
name|void
name|StyleSelector
operator|::
name|matchRule
parameter_list|(
name|NodePtr
name|node
parameter_list|,
specifier|const
name|StyleRule
modifier|&
name|rule
parameter_list|,
name|StyleSheetOrigin
name|origin
parameter_list|,
name|int
name|depth
parameter_list|,
name|QMap
argument_list|<
name|uint
argument_list|,
name|StyleRule
argument_list|>
modifier|*
name|weightedRules
parameter_list|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|rule
operator|.
name|selectors
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
specifier|const
name|Selector
modifier|&
name|selector
init|=
name|rule
operator|.
name|selectors
operator|.
name|at
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|selectorMatches
argument_list|(
name|selector
argument_list|,
name|node
argument_list|)
condition|)
block|{
name|uint
name|weight
init|=
name|rule
operator|.
name|order
operator|+
name|selector
operator|.
name|specificity
argument_list|()
operator|*
literal|0x100
operator|+
operator|(
name|uint
argument_list|(
name|origin
argument_list|)
operator|+
name|depth
operator|)
operator|*
literal|0x100000
decl_stmt|;
name|StyleRule
name|newRule
init|=
name|rule
decl_stmt|;
if|if
condition|(
name|rule
operator|.
name|selectors
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
block|{
name|newRule
operator|.
name|selectors
operator|.
name|resize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|newRule
operator|.
name|selectors
index|[
literal|0
index|]
operator|=
name|selector
expr_stmt|;
block|}
comment|//We might have rules with the same weight if they came from a rule with several selectors
name|weightedRules
operator|->
name|insertMulti
argument_list|(
name|weight
argument_list|,
name|newRule
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// Returns style rules that are in ascending order of specificity
end_comment
begin_comment
comment|// Each of the StyleRule returned will contain exactly one Selector
end_comment
begin_function
DECL|function|styleRulesForNode
name|QVector
argument_list|<
name|StyleRule
argument_list|>
name|StyleSelector
operator|::
name|styleRulesForNode
parameter_list|(
name|NodePtr
name|node
parameter_list|)
block|{
name|QVector
argument_list|<
name|StyleRule
argument_list|>
name|rules
decl_stmt|;
if|if
condition|(
name|styleSheets
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|rules
return|;
name|QMap
argument_list|<
name|uint
argument_list|,
name|StyleRule
argument_list|>
name|weightedRules
decl_stmt|;
comment|// (spec, rule) that will be sorted below
comment|//prune using indexed stylesheet
for|for
control|(
name|int
name|sheetIdx
init|=
literal|0
init|;
name|sheetIdx
operator|<
name|styleSheets
operator|.
name|count
argument_list|()
condition|;
operator|++
name|sheetIdx
control|)
block|{
specifier|const
name|StyleSheet
modifier|&
name|styleSheet
init|=
name|styleSheets
operator|.
name|at
argument_list|(
name|sheetIdx
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|styleSheet
operator|.
name|styleRules
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|matchRule
argument_list|(
name|node
argument_list|,
name|styleSheet
operator|.
name|styleRules
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|styleSheet
operator|.
name|origin
argument_list|,
name|styleSheet
operator|.
name|depth
argument_list|,
operator|&
name|weightedRules
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|styleSheet
operator|.
name|idIndex
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
name|ids
init|=
name|nodeIds
argument_list|(
name|node
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ids
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|QString
modifier|&
name|key
init|=
name|ids
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QMultiHash
argument_list|<
name|QString
argument_list|,
name|StyleRule
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|styleSheet
operator|.
name|idIndex
operator|.
name|constFind
argument_list|(
name|key
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|styleSheet
operator|.
name|idIndex
operator|.
name|constEnd
argument_list|()
operator|&&
name|it
operator|.
name|key
argument_list|()
operator|==
name|key
condition|)
block|{
name|matchRule
argument_list|(
name|node
argument_list|,
name|it
operator|.
name|value
argument_list|()
argument_list|,
name|styleSheet
operator|.
name|origin
argument_list|,
name|styleSheet
operator|.
name|depth
argument_list|,
operator|&
name|weightedRules
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|styleSheet
operator|.
name|nameIndex
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
name|names
init|=
name|nodeNames
argument_list|(
name|node
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|name
init|=
name|names
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameCaseSensitivity
operator|==
name|Qt
operator|::
name|CaseInsensitive
condition|)
name|name
operator|=
name|name
operator|.
name|toLower
argument_list|()
expr_stmt|;
name|QMultiHash
argument_list|<
name|QString
argument_list|,
name|StyleRule
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|styleSheet
operator|.
name|nameIndex
operator|.
name|constFind
argument_list|(
name|name
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|styleSheet
operator|.
name|nameIndex
operator|.
name|constEnd
argument_list|()
operator|&&
name|it
operator|.
name|key
argument_list|()
operator|==
name|name
condition|)
block|{
name|matchRule
argument_list|(
name|node
argument_list|,
name|it
operator|.
name|value
argument_list|()
argument_list|,
name|styleSheet
operator|.
name|origin
argument_list|,
name|styleSheet
operator|.
name|depth
argument_list|,
operator|&
name|weightedRules
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|medium
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|styleSheet
operator|.
name|mediaRules
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|styleSheet
operator|.
name|mediaRules
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|media
operator|.
name|contains
argument_list|(
name|medium
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|styleSheet
operator|.
name|mediaRules
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|styleRules
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|matchRule
argument_list|(
name|node
argument_list|,
name|styleSheet
operator|.
name|mediaRules
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|styleRules
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|,
name|styleSheet
operator|.
name|origin
argument_list|,
name|styleSheet
operator|.
name|depth
argument_list|,
operator|&
name|weightedRules
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|rules
operator|.
name|reserve
argument_list|(
name|weightedRules
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|uint
argument_list|,
name|StyleRule
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|weightedRules
operator|.
name|constBegin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|weightedRules
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
name|rules
operator|+=
operator|*
name|it
expr_stmt|;
return|return
name|rules
return|;
block|}
end_function
begin_comment
comment|// for qtexthtmlparser which requires just the declarations with Enabled state
end_comment
begin_comment
comment|// and without pseudo elements
end_comment
begin_function
DECL|function|declarationsForNode
name|QVector
argument_list|<
name|Declaration
argument_list|>
name|StyleSelector
operator|::
name|declarationsForNode
parameter_list|(
name|NodePtr
name|node
parameter_list|,
specifier|const
name|char
modifier|*
name|extraPseudo
parameter_list|)
block|{
name|QVector
argument_list|<
name|Declaration
argument_list|>
name|decls
decl_stmt|;
name|QVector
argument_list|<
name|StyleRule
argument_list|>
name|rules
init|=
name|styleRulesForNode
argument_list|(
name|node
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rules
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|Selector
modifier|&
name|selector
init|=
name|rules
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|pseudoElement
init|=
name|selector
operator|.
name|pseudoElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|extraPseudo
operator|&&
name|pseudoElement
operator|==
name|QLatin1String
argument_list|(
name|extraPseudo
argument_list|)
condition|)
block|{
name|decls
operator|+=
name|rules
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|declarations
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|pseudoElement
operator|.
name|isEmpty
argument_list|()
condition|)
comment|// skip rules with pseudo elements
continue|continue;
name|quint64
name|pseudoClass
init|=
name|selector
operator|.
name|pseudoClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|pseudoClass
operator|==
name|PseudoClass_Enabled
operator|||
name|pseudoClass
operator|==
name|PseudoClass_Unspecified
condition|)
name|decls
operator|+=
name|rules
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|declarations
expr_stmt|;
block|}
return|return
name|decls
return|;
block|}
end_function
begin_function
DECL|function|isHexDigit
specifier|static
specifier|inline
name|bool
name|isHexDigit
parameter_list|(
specifier|const
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|c
operator|>=
literal|'a'
operator|&&
name|c
operator|<=
literal|'f'
operator|)
operator|||
operator|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'F'
operator|)
return|;
block|}
end_function
begin_function
DECL|function|preprocess
name|QString
name|Scanner
operator|::
name|preprocess
parameter_list|(
specifier|const
name|QString
modifier|&
name|input
parameter_list|,
name|bool
modifier|*
name|hasEscapeSequences
parameter_list|)
block|{
name|QString
name|output
init|=
name|input
decl_stmt|;
if|if
condition|(
name|hasEscapeSequences
condition|)
operator|*
name|hasEscapeSequences
operator|=
literal|false
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|output
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|output
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
condition|)
block|{
operator|++
name|i
expr_stmt|;
comment|// test for unicode hex escape
name|int
name|hexCount
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|hexStart
init|=
name|i
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|output
operator|.
name|size
argument_list|()
operator|&&
name|isHexDigit
argument_list|(
name|output
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|&&
name|hexCount
operator|<
literal|7
condition|)
block|{
operator|++
name|hexCount
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
if|if
condition|(
name|hexCount
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|hasEscapeSequences
condition|)
operator|*
name|hasEscapeSequences
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
name|hexCount
operator|=
name|qMin
argument_list|(
name|hexCount
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|ushort
name|code
init|=
name|output
operator|.
name|mid
argument_list|(
name|hexStart
argument_list|,
name|hexCount
argument_list|)
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|,
literal|16
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
name|output
operator|.
name|replace
argument_list|(
name|hexStart
operator|-
literal|1
argument_list|,
name|hexCount
operator|+
literal|1
argument_list|,
name|QChar
argument_list|(
name|code
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|=
name|hexStart
expr_stmt|;
block|}
else|else
block|{
name|i
operator|=
name|hexStart
expr_stmt|;
block|}
block|}
else|else
block|{
operator|++
name|i
expr_stmt|;
block|}
block|}
return|return
name|output
return|;
block|}
end_function
begin_function
DECL|function|handleCommentStart
name|int
name|QCssScanner_Generated
operator|::
name|handleCommentStart
parameter_list|()
block|{
while|while
condition|(
name|pos
operator|<
name|input
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|input
operator|.
name|at
argument_list|(
name|pos
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'*'
argument_list|)
operator|&&
name|input
operator|.
name|at
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
condition|)
block|{
name|pos
operator|+=
literal|2
expr_stmt|;
break|break;
block|}
operator|++
name|pos
expr_stmt|;
block|}
return|return
name|S
return|;
block|}
end_function
begin_function
DECL|function|scan
name|void
name|Scanner
operator|::
name|scan
parameter_list|(
specifier|const
name|QString
modifier|&
name|preprocessedInput
parameter_list|,
name|QVector
argument_list|<
name|Symbol
argument_list|>
modifier|*
name|symbols
parameter_list|)
block|{
name|QCssScanner_Generated
name|scanner
argument_list|(
name|preprocessedInput
argument_list|)
decl_stmt|;
name|Symbol
name|sym
decl_stmt|;
name|int
name|tok
init|=
name|scanner
operator|.
name|lex
argument_list|()
decl_stmt|;
while|while
condition|(
name|tok
operator|!=
operator|-
literal|1
condition|)
block|{
name|sym
operator|.
name|token
operator|=
cast|static_cast
argument_list|<
name|QCss
operator|::
name|TokenType
argument_list|>
argument_list|(
name|tok
argument_list|)
expr_stmt|;
name|sym
operator|.
name|text
operator|=
name|scanner
operator|.
name|input
expr_stmt|;
name|sym
operator|.
name|start
operator|=
name|scanner
operator|.
name|lexemStart
expr_stmt|;
name|sym
operator|.
name|len
operator|=
name|scanner
operator|.
name|lexemLength
expr_stmt|;
name|symbols
operator|->
name|append
argument_list|(
name|sym
argument_list|)
expr_stmt|;
name|tok
operator|=
name|scanner
operator|.
name|lex
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|lexem
name|QString
name|Symbol
operator|::
name|lexem
parameter_list|()
specifier|const
block|{
name|QString
name|result
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
name|result
operator|.
name|reserve
argument_list|(
name|len
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|text
operator|.
name|at
argument_list|(
name|start
operator|+
name|i
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
operator|&&
name|i
operator|<
name|len
operator|-
literal|1
condition|)
operator|++
name|i
expr_stmt|;
name|result
operator|+=
name|text
operator|.
name|at
argument_list|(
name|start
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_constructor
DECL|function|Parser
name|Parser
operator|::
name|Parser
parameter_list|(
specifier|const
name|QString
modifier|&
name|css
parameter_list|,
name|bool
name|isFile
parameter_list|)
block|{
name|init
argument_list|(
name|css
argument_list|,
name|isFile
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|Parser
name|Parser
operator|::
name|Parser
parameter_list|()
block|{
name|index
operator|=
literal|0
expr_stmt|;
name|errorIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|hasEscapeSequences
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|init
name|void
name|Parser
operator|::
name|init
parameter_list|(
specifier|const
name|QString
modifier|&
name|css
parameter_list|,
name|bool
name|isFile
parameter_list|)
block|{
name|QString
name|styleSheet
init|=
name|css
decl_stmt|;
if|if
condition|(
name|isFile
condition|)
block|{
name|QFile
name|file
argument_list|(
name|css
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|sourcePath
operator|=
name|QFileInfo
argument_list|(
name|styleSheet
argument_list|)
operator|.
name|absolutePath
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|styleSheet
operator|=
name|stream
operator|.
name|readAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QCss::Parser - Failed to load file "
operator|<<
name|css
expr_stmt|;
name|styleSheet
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|sourcePath
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|hasEscapeSequences
operator|=
literal|false
expr_stmt|;
name|symbols
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|symbols
operator|.
name|reserve
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|Scanner
operator|::
name|scan
argument_list|(
name|Scanner
operator|::
name|preprocess
argument_list|(
name|styleSheet
argument_list|,
operator|&
name|hasEscapeSequences
argument_list|)
argument_list|,
operator|&
name|symbols
argument_list|)
expr_stmt|;
name|index
operator|=
literal|0
expr_stmt|;
name|errorIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parse
name|bool
name|Parser
operator|::
name|parse
parameter_list|(
name|StyleSheet
modifier|*
name|styleSheet
parameter_list|,
name|Qt
operator|::
name|CaseSensitivity
name|nameCaseSensitivity
parameter_list|)
block|{
if|if
condition|(
name|testTokenAndEndsWith
argument_list|(
name|ATKEYWORD_SYM
argument_list|,
name|QLatin1String
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|next
argument_list|(
name|STRING
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|next
argument_list|(
name|SEMICOLON
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
while|while
condition|(
name|test
argument_list|(
name|S
argument_list|)
operator|||
name|test
argument_list|(
name|CDO
argument_list|)
operator|||
name|test
argument_list|(
name|CDC
argument_list|)
condition|)
block|{}
while|while
condition|(
name|testImport
argument_list|()
condition|)
block|{
name|ImportRule
name|rule
decl_stmt|;
if|if
condition|(
operator|!
name|parseImport
argument_list|(
operator|&
name|rule
argument_list|)
condition|)
return|return
literal|false
return|;
name|styleSheet
operator|->
name|importRules
operator|.
name|append
argument_list|(
name|rule
argument_list|)
expr_stmt|;
while|while
condition|(
name|test
argument_list|(
name|S
argument_list|)
operator|||
name|test
argument_list|(
name|CDO
argument_list|)
operator|||
name|test
argument_list|(
name|CDC
argument_list|)
condition|)
block|{}
block|}
do|do
block|{
if|if
condition|(
name|testMedia
argument_list|()
condition|)
block|{
name|MediaRule
name|rule
decl_stmt|;
if|if
condition|(
operator|!
name|parseMedia
argument_list|(
operator|&
name|rule
argument_list|)
condition|)
return|return
literal|false
return|;
name|styleSheet
operator|->
name|mediaRules
operator|.
name|append
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testPage
argument_list|()
condition|)
block|{
name|PageRule
name|rule
decl_stmt|;
if|if
condition|(
operator|!
name|parsePage
argument_list|(
operator|&
name|rule
argument_list|)
condition|)
return|return
literal|false
return|;
name|styleSheet
operator|->
name|pageRules
operator|.
name|append
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testRuleset
argument_list|()
condition|)
block|{
name|StyleRule
name|rule
decl_stmt|;
if|if
condition|(
operator|!
name|parseRuleset
argument_list|(
operator|&
name|rule
argument_list|)
condition|)
return|return
literal|false
return|;
name|styleSheet
operator|->
name|styleRules
operator|.
name|append
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|test
argument_list|(
name|ATKEYWORD_SYM
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|until
argument_list|(
name|RBRACE
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
while|while
condition|(
name|test
argument_list|(
name|S
argument_list|)
operator|||
name|test
argument_list|(
name|CDO
argument_list|)
operator|||
name|test
argument_list|(
name|CDC
argument_list|)
condition|)
block|{}
block|}
do|while
condition|(
name|hasNext
argument_list|()
condition|)
do|;
name|styleSheet
operator|->
name|buildIndexes
argument_list|(
name|nameCaseSensitivity
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|errorSymbol
name|Symbol
name|Parser
operator|::
name|errorSymbol
parameter_list|()
block|{
if|if
condition|(
name|errorIndex
operator|==
operator|-
literal|1
condition|)
return|return
name|Symbol
argument_list|()
return|;
return|return
name|symbols
operator|.
name|at
argument_list|(
name|errorIndex
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|removeOptionalQuotes
specifier|static
specifier|inline
name|void
name|removeOptionalQuotes
parameter_list|(
name|QString
modifier|*
name|str
parameter_list|)
block|{
if|if
condition|(
operator|!
name|str
operator|->
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
argument_list|)
operator|&&
operator|!
name|str
operator|->
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\"'
argument_list|)
argument_list|)
condition|)
return|return;
name|str
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|str
operator|->
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parseImport
name|bool
name|Parser
operator|::
name|parseImport
parameter_list|(
name|ImportRule
modifier|*
name|importRule
parameter_list|)
block|{
name|skipSpace
argument_list|()
expr_stmt|;
if|if
condition|(
name|test
argument_list|(
name|STRING
argument_list|)
condition|)
block|{
name|importRule
operator|->
name|href
operator|=
name|lexem
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|testAndParseUri
argument_list|(
operator|&
name|importRule
operator|->
name|href
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|removeOptionalQuotes
argument_list|(
operator|&
name|importRule
operator|->
name|href
argument_list|)
expr_stmt|;
name|skipSpace
argument_list|()
expr_stmt|;
if|if
condition|(
name|testMedium
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|parseMedium
argument_list|(
operator|&
name|importRule
operator|->
name|media
argument_list|)
condition|)
return|return
literal|false
return|;
while|while
condition|(
name|test
argument_list|(
name|COMMA
argument_list|)
condition|)
block|{
name|skipSpace
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|parseNextMedium
argument_list|(
operator|&
name|importRule
operator|->
name|media
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
operator|!
name|next
argument_list|(
name|SEMICOLON
argument_list|)
condition|)
return|return
literal|false
return|;
name|skipSpace
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|parseMedia
name|bool
name|Parser
operator|::
name|parseMedia
parameter_list|(
name|MediaRule
modifier|*
name|mediaRule
parameter_list|)
block|{
do|do
block|{
name|skipSpace
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|parseNextMedium
argument_list|(
operator|&
name|mediaRule
operator|->
name|media
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
do|while
condition|(
name|test
argument_list|(
name|COMMA
argument_list|)
condition|)
do|;
if|if
condition|(
operator|!
name|next
argument_list|(
name|LBRACE
argument_list|)
condition|)
return|return
literal|false
return|;
name|skipSpace
argument_list|()
expr_stmt|;
while|while
condition|(
name|testRuleset
argument_list|()
condition|)
block|{
name|StyleRule
name|rule
decl_stmt|;
if|if
condition|(
operator|!
name|parseRuleset
argument_list|(
operator|&
name|rule
argument_list|)
condition|)
return|return
literal|false
return|;
name|mediaRule
operator|->
name|styleRules
operator|.
name|append
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|next
argument_list|(
name|RBRACE
argument_list|)
condition|)
return|return
literal|false
return|;
name|skipSpace
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|parseMedium
name|bool
name|Parser
operator|::
name|parseMedium
parameter_list|(
name|QStringList
modifier|*
name|media
parameter_list|)
block|{
name|media
operator|->
name|append
argument_list|(
name|lexem
argument_list|()
argument_list|)
expr_stmt|;
name|skipSpace
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|parsePage
name|bool
name|Parser
operator|::
name|parsePage
parameter_list|(
name|PageRule
modifier|*
name|pageRule
parameter_list|)
block|{
name|skipSpace
argument_list|()
expr_stmt|;
if|if
condition|(
name|testPseudoPage
argument_list|()
condition|)
if|if
condition|(
operator|!
name|parsePseudoPage
argument_list|(
operator|&
name|pageRule
operator|->
name|selector
argument_list|)
condition|)
return|return
literal|false
return|;
name|skipSpace
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|next
argument_list|(
name|LBRACE
argument_list|)
condition|)
return|return
literal|false
return|;
do|do
block|{
name|skipSpace
argument_list|()
expr_stmt|;
name|Declaration
name|decl
decl_stmt|;
if|if
condition|(
operator|!
name|parseNextDeclaration
argument_list|(
operator|&
name|decl
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|decl
operator|.
name|isEmpty
argument_list|()
condition|)
name|pageRule
operator|->
name|declarations
operator|.
name|append
argument_list|(
name|decl
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|test
argument_list|(
name|SEMICOLON
argument_list|)
condition|)
do|;
if|if
condition|(
operator|!
name|next
argument_list|(
name|RBRACE
argument_list|)
condition|)
return|return
literal|false
return|;
name|skipSpace
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|parsePseudoPage
name|bool
name|Parser
operator|::
name|parsePseudoPage
parameter_list|(
name|QString
modifier|*
name|selector
parameter_list|)
block|{
if|if
condition|(
operator|!
name|next
argument_list|(
name|IDENT
argument_list|)
condition|)
return|return
literal|false
return|;
operator|*
name|selector
operator|=
name|lexem
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|parseNextOperator
name|bool
name|Parser
operator|::
name|parseNextOperator
parameter_list|(
name|Value
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
return|return
literal|true
return|;
switch|switch
condition|(
name|next
argument_list|()
condition|)
block|{
case|case
name|SLASH
case|:
name|value
operator|->
name|type
operator|=
name|Value
operator|::
name|TermOperatorSlash
expr_stmt|;
name|skipSpace
argument_list|()
expr_stmt|;
break|break;
case|case
name|COMMA
case|:
name|value
operator|->
name|type
operator|=
name|Value
operator|::
name|TermOperatorComma
expr_stmt|;
name|skipSpace
argument_list|()
expr_stmt|;
break|break;
default|default:
name|prev
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|parseCombinator
name|bool
name|Parser
operator|::
name|parseCombinator
parameter_list|(
name|BasicSelector
operator|::
name|Relation
modifier|*
name|relation
parameter_list|)
block|{
operator|*
name|relation
operator|=
name|BasicSelector
operator|::
name|NoRelation
expr_stmt|;
if|if
condition|(
name|lookup
argument_list|()
operator|==
name|S
condition|)
block|{
operator|*
name|relation
operator|=
name|BasicSelector
operator|::
name|MatchNextSelectorIfAncestor
expr_stmt|;
name|skipSpace
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|prev
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|test
argument_list|(
name|PLUS
argument_list|)
condition|)
block|{
operator|*
name|relation
operator|=
name|BasicSelector
operator|::
name|MatchNextSelectorIfPreceeds
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|test
argument_list|(
name|GREATER
argument_list|)
condition|)
block|{
operator|*
name|relation
operator|=
name|BasicSelector
operator|::
name|MatchNextSelectorIfParent
expr_stmt|;
block|}
name|skipSpace
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|parseProperty
name|bool
name|Parser
operator|::
name|parseProperty
parameter_list|(
name|Declaration
modifier|*
name|decl
parameter_list|)
block|{
name|decl
operator|->
name|d
operator|->
name|property
operator|=
name|lexem
argument_list|()
expr_stmt|;
name|decl
operator|->
name|d
operator|->
name|propertyId
operator|=
cast|static_cast
argument_list|<
name|Property
argument_list|>
argument_list|(
name|findKnownValue
argument_list|(
name|decl
operator|->
name|d
operator|->
name|property
argument_list|,
name|properties
argument_list|,
name|NumProperties
argument_list|)
argument_list|)
expr_stmt|;
name|skipSpace
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|parseRuleset
name|bool
name|Parser
operator|::
name|parseRuleset
parameter_list|(
name|StyleRule
modifier|*
name|styleRule
parameter_list|)
block|{
name|Selector
name|sel
decl_stmt|;
if|if
condition|(
operator|!
name|parseSelector
argument_list|(
operator|&
name|sel
argument_list|)
condition|)
return|return
literal|false
return|;
name|styleRule
operator|->
name|selectors
operator|.
name|append
argument_list|(
name|sel
argument_list|)
expr_stmt|;
while|while
condition|(
name|test
argument_list|(
name|COMMA
argument_list|)
condition|)
block|{
name|skipSpace
argument_list|()
expr_stmt|;
name|Selector
name|sel
decl_stmt|;
if|if
condition|(
operator|!
name|parseNextSelector
argument_list|(
operator|&
name|sel
argument_list|)
condition|)
return|return
literal|false
return|;
name|styleRule
operator|->
name|selectors
operator|.
name|append
argument_list|(
name|sel
argument_list|)
expr_stmt|;
block|}
name|skipSpace
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|next
argument_list|(
name|LBRACE
argument_list|)
condition|)
return|return
literal|false
return|;
specifier|const
name|int
name|declarationStart
init|=
name|index
decl_stmt|;
do|do
block|{
name|skipSpace
argument_list|()
expr_stmt|;
name|Declaration
name|decl
decl_stmt|;
specifier|const
name|int
name|rewind
init|=
name|index
decl_stmt|;
if|if
condition|(
operator|!
name|parseNextDeclaration
argument_list|(
operator|&
name|decl
argument_list|)
condition|)
block|{
name|index
operator|=
name|rewind
expr_stmt|;
specifier|const
name|bool
name|foundSemicolon
init|=
name|until
argument_list|(
name|SEMICOLON
argument_list|)
decl_stmt|;
specifier|const
name|int
name|semicolonIndex
init|=
name|index
decl_stmt|;
name|index
operator|=
name|declarationStart
expr_stmt|;
specifier|const
name|bool
name|foundRBrace
init|=
name|until
argument_list|(
name|RBRACE
argument_list|)
decl_stmt|;
if|if
condition|(
name|foundSemicolon
operator|&&
name|semicolonIndex
operator|<
name|index
condition|)
block|{
name|decl
operator|=
name|Declaration
argument_list|()
expr_stmt|;
name|index
operator|=
name|semicolonIndex
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|skipSpace
argument_list|()
expr_stmt|;
return|return
name|foundRBrace
return|;
block|}
block|}
if|if
condition|(
operator|!
name|decl
operator|.
name|isEmpty
argument_list|()
condition|)
name|styleRule
operator|->
name|declarations
operator|.
name|append
argument_list|(
name|decl
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|test
argument_list|(
name|SEMICOLON
argument_list|)
condition|)
do|;
if|if
condition|(
operator|!
name|next
argument_list|(
name|RBRACE
argument_list|)
condition|)
return|return
literal|false
return|;
name|skipSpace
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|parseSelector
name|bool
name|Parser
operator|::
name|parseSelector
parameter_list|(
name|Selector
modifier|*
name|sel
parameter_list|)
block|{
name|BasicSelector
name|basicSel
decl_stmt|;
if|if
condition|(
operator|!
name|parseSimpleSelector
argument_list|(
operator|&
name|basicSel
argument_list|)
condition|)
return|return
literal|false
return|;
while|while
condition|(
name|testCombinator
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|parseCombinator
argument_list|(
operator|&
name|basicSel
operator|.
name|relationToNext
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|testSimpleSelector
argument_list|()
condition|)
break|break;
name|sel
operator|->
name|basicSelectors
operator|.
name|append
argument_list|(
name|basicSel
argument_list|)
expr_stmt|;
name|basicSel
operator|=
name|BasicSelector
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|parseSimpleSelector
argument_list|(
operator|&
name|basicSel
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|sel
operator|->
name|basicSelectors
operator|.
name|append
argument_list|(
name|basicSel
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|parseSimpleSelector
name|bool
name|Parser
operator|::
name|parseSimpleSelector
parameter_list|(
name|BasicSelector
modifier|*
name|basicSel
parameter_list|)
block|{
name|int
name|minCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|lookupElementName
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|parseElementName
argument_list|(
operator|&
name|basicSel
operator|->
name|elementName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
name|prev
argument_list|()
expr_stmt|;
name|minCount
operator|=
literal|1
expr_stmt|;
block|}
name|bool
name|onceMore
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
do|do
block|{
name|onceMore
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|test
argument_list|(
name|HASH
argument_list|)
condition|)
block|{
name|QString
name|theid
init|=
name|lexem
argument_list|()
decl_stmt|;
comment|// chop off leading #
name|theid
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|basicSel
operator|->
name|ids
operator|.
name|append
argument_list|(
name|theid
argument_list|)
expr_stmt|;
name|onceMore
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testClass
argument_list|()
condition|)
block|{
name|onceMore
operator|=
literal|true
expr_stmt|;
name|AttributeSelector
name|a
decl_stmt|;
name|a
operator|.
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"class"
argument_list|)
expr_stmt|;
name|a
operator|.
name|valueMatchCriterium
operator|=
name|AttributeSelector
operator|::
name|MatchContains
expr_stmt|;
if|if
condition|(
operator|!
name|parseClass
argument_list|(
operator|&
name|a
operator|.
name|value
argument_list|)
condition|)
return|return
literal|false
return|;
name|basicSel
operator|->
name|attributeSelectors
operator|.
name|append
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testAttrib
argument_list|()
condition|)
block|{
name|onceMore
operator|=
literal|true
expr_stmt|;
name|AttributeSelector
name|a
decl_stmt|;
if|if
condition|(
operator|!
name|parseAttrib
argument_list|(
operator|&
name|a
argument_list|)
condition|)
return|return
literal|false
return|;
name|basicSel
operator|->
name|attributeSelectors
operator|.
name|append
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testPseudo
argument_list|()
condition|)
block|{
name|onceMore
operator|=
literal|true
expr_stmt|;
name|Pseudo
name|ps
decl_stmt|;
if|if
condition|(
operator|!
name|parsePseudo
argument_list|(
operator|&
name|ps
argument_list|)
condition|)
return|return
literal|false
return|;
name|basicSel
operator|->
name|pseudos
operator|.
name|append
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|onceMore
condition|)
operator|++
name|count
expr_stmt|;
block|}
do|while
condition|(
name|onceMore
condition|)
do|;
return|return
name|count
operator|>=
name|minCount
return|;
block|}
end_function
begin_function
DECL|function|parseClass
name|bool
name|Parser
operator|::
name|parseClass
parameter_list|(
name|QString
modifier|*
name|name
parameter_list|)
block|{
if|if
condition|(
operator|!
name|next
argument_list|(
name|IDENT
argument_list|)
condition|)
return|return
literal|false
return|;
operator|*
name|name
operator|=
name|lexem
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|parseElementName
name|bool
name|Parser
operator|::
name|parseElementName
parameter_list|(
name|QString
modifier|*
name|name
parameter_list|)
block|{
switch|switch
condition|(
name|lookup
argument_list|()
condition|)
block|{
case|case
name|STAR
case|:
name|name
operator|->
name|clear
argument_list|()
expr_stmt|;
break|break;
case|case
name|IDENT
case|:
operator|*
name|name
operator|=
name|lexem
argument_list|()
expr_stmt|;
break|break;
default|default:
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|parseAttrib
name|bool
name|Parser
operator|::
name|parseAttrib
parameter_list|(
name|AttributeSelector
modifier|*
name|attr
parameter_list|)
block|{
name|skipSpace
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|next
argument_list|(
name|IDENT
argument_list|)
condition|)
return|return
literal|false
return|;
name|attr
operator|->
name|name
operator|=
name|lexem
argument_list|()
expr_stmt|;
name|skipSpace
argument_list|()
expr_stmt|;
if|if
condition|(
name|test
argument_list|(
name|EQUAL
argument_list|)
condition|)
block|{
name|attr
operator|->
name|valueMatchCriterium
operator|=
name|AttributeSelector
operator|::
name|MatchEqual
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|test
argument_list|(
name|INCLUDES
argument_list|)
condition|)
block|{
name|attr
operator|->
name|valueMatchCriterium
operator|=
name|AttributeSelector
operator|::
name|MatchContains
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|test
argument_list|(
name|DASHMATCH
argument_list|)
condition|)
block|{
name|attr
operator|->
name|valueMatchCriterium
operator|=
name|AttributeSelector
operator|::
name|MatchBeginsWith
expr_stmt|;
block|}
else|else
block|{
return|return
name|next
argument_list|(
name|RBRACKET
argument_list|)
return|;
block|}
name|skipSpace
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|test
argument_list|(
name|IDENT
argument_list|)
operator|&&
operator|!
name|test
argument_list|(
name|STRING
argument_list|)
condition|)
return|return
literal|false
return|;
name|attr
operator|->
name|value
operator|=
name|unquotedLexem
argument_list|()
expr_stmt|;
name|skipSpace
argument_list|()
expr_stmt|;
return|return
name|next
argument_list|(
name|RBRACKET
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|parsePseudo
name|bool
name|Parser
operator|::
name|parsePseudo
parameter_list|(
name|Pseudo
modifier|*
name|pseudo
parameter_list|)
block|{
operator|(
name|void
operator|)
name|test
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|pseudo
operator|->
name|negated
operator|=
name|test
argument_list|(
name|EXCLAMATION_SYM
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
argument_list|(
name|IDENT
argument_list|)
condition|)
block|{
name|pseudo
operator|->
name|name
operator|=
name|lexem
argument_list|()
expr_stmt|;
name|pseudo
operator|->
name|type
operator|=
cast|static_cast
argument_list|<
name|quint64
argument_list|>
argument_list|(
name|findKnownValue
argument_list|(
name|pseudo
operator|->
name|name
argument_list|,
name|pseudos
argument_list|,
name|NumPseudos
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|next
argument_list|(
name|FUNCTION
argument_list|)
condition|)
return|return
literal|false
return|;
name|pseudo
operator|->
name|function
operator|=
name|lexem
argument_list|()
expr_stmt|;
comment|// chop off trailing parenthesis
name|pseudo
operator|->
name|function
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|skipSpace
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|test
argument_list|(
name|IDENT
argument_list|)
condition|)
return|return
literal|false
return|;
name|pseudo
operator|->
name|name
operator|=
name|lexem
argument_list|()
expr_stmt|;
name|skipSpace
argument_list|()
expr_stmt|;
return|return
name|next
argument_list|(
name|RPAREN
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|parseNextDeclaration
name|bool
name|Parser
operator|::
name|parseNextDeclaration
parameter_list|(
name|Declaration
modifier|*
name|decl
parameter_list|)
block|{
if|if
condition|(
operator|!
name|testProperty
argument_list|()
condition|)
return|return
literal|true
return|;
comment|// not an error!
if|if
condition|(
operator|!
name|parseProperty
argument_list|(
name|decl
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|next
argument_list|(
name|COLON
argument_list|)
condition|)
return|return
literal|false
return|;
name|skipSpace
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|parseNextExpr
argument_list|(
operator|&
name|decl
operator|->
name|d
operator|->
name|values
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|testPrio
argument_list|()
condition|)
if|if
condition|(
operator|!
name|parsePrio
argument_list|(
name|decl
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|testPrio
name|bool
name|Parser
operator|::
name|testPrio
parameter_list|()
block|{
specifier|const
name|int
name|rewind
init|=
name|index
decl_stmt|;
if|if
condition|(
operator|!
name|test
argument_list|(
name|EXCLAMATION_SYM
argument_list|)
condition|)
return|return
literal|false
return|;
name|skipSpace
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|test
argument_list|(
name|IDENT
argument_list|)
condition|)
block|{
name|index
operator|=
name|rewind
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|lexem
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"important"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|index
operator|=
name|rewind
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|parsePrio
name|bool
name|Parser
operator|::
name|parsePrio
parameter_list|(
name|Declaration
modifier|*
name|declaration
parameter_list|)
block|{
name|declaration
operator|->
name|d
operator|->
name|important
operator|=
literal|true
expr_stmt|;
name|skipSpace
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|parseExpr
name|bool
name|Parser
operator|::
name|parseExpr
parameter_list|(
name|QVector
argument_list|<
name|Value
argument_list|>
modifier|*
name|values
parameter_list|)
block|{
name|Value
name|val
decl_stmt|;
if|if
condition|(
operator|!
name|parseTerm
argument_list|(
operator|&
name|val
argument_list|)
condition|)
return|return
literal|false
return|;
name|values
operator|->
name|append
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|bool
name|onceMore
decl_stmt|;
do|do
block|{
name|onceMore
operator|=
literal|false
expr_stmt|;
name|val
operator|=
name|Value
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|parseNextOperator
argument_list|(
operator|&
name|val
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|val
operator|.
name|type
operator|!=
name|QCss
operator|::
name|Value
operator|::
name|Unknown
condition|)
name|values
operator|->
name|append
argument_list|(
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|testTerm
argument_list|()
condition|)
block|{
name|onceMore
operator|=
literal|true
expr_stmt|;
name|val
operator|=
name|Value
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|parseTerm
argument_list|(
operator|&
name|val
argument_list|)
condition|)
return|return
literal|false
return|;
name|values
operator|->
name|append
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|onceMore
condition|)
do|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|testTerm
name|bool
name|Parser
operator|::
name|testTerm
parameter_list|()
block|{
return|return
name|test
argument_list|(
name|PLUS
argument_list|)
operator|||
name|test
argument_list|(
name|MINUS
argument_list|)
operator|||
name|test
argument_list|(
name|NUMBER
argument_list|)
operator|||
name|test
argument_list|(
name|PERCENTAGE
argument_list|)
operator|||
name|test
argument_list|(
name|LENGTH
argument_list|)
operator|||
name|test
argument_list|(
name|STRING
argument_list|)
operator|||
name|test
argument_list|(
name|IDENT
argument_list|)
operator|||
name|testHexColor
argument_list|()
operator|||
name|testFunction
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|parseTerm
name|bool
name|Parser
operator|::
name|parseTerm
parameter_list|(
name|Value
modifier|*
name|value
parameter_list|)
block|{
name|QString
name|str
init|=
name|lexem
argument_list|()
decl_stmt|;
name|bool
name|haveUnary
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|lookup
argument_list|()
operator|==
name|PLUS
operator|||
name|lookup
argument_list|()
operator|==
name|MINUS
condition|)
block|{
name|haveUnary
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
return|return
literal|false
return|;
name|next
argument_list|()
expr_stmt|;
name|str
operator|+=
name|lexem
argument_list|()
expr_stmt|;
block|}
name|value
operator|->
name|variant
operator|=
name|str
expr_stmt|;
name|value
operator|->
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|String
expr_stmt|;
switch|switch
condition|(
name|lookup
argument_list|()
condition|)
block|{
case|case
name|NUMBER
case|:
name|value
operator|->
name|type
operator|=
name|Value
operator|::
name|Number
expr_stmt|;
name|value
operator|->
name|variant
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
break|break;
case|case
name|PERCENTAGE
case|:
name|value
operator|->
name|type
operator|=
name|Value
operator|::
name|Percentage
expr_stmt|;
name|str
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// strip off %
name|value
operator|->
name|variant
operator|=
name|str
expr_stmt|;
break|break;
case|case
name|LENGTH
case|:
name|value
operator|->
name|type
operator|=
name|Value
operator|::
name|Length
expr_stmt|;
break|break;
case|case
name|STRING
case|:
if|if
condition|(
name|haveUnary
condition|)
return|return
literal|false
return|;
name|value
operator|->
name|type
operator|=
name|Value
operator|::
name|String
expr_stmt|;
name|str
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|str
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|value
operator|->
name|variant
operator|=
name|str
expr_stmt|;
break|break;
case|case
name|IDENT
case|:
block|{
if|if
condition|(
name|haveUnary
condition|)
return|return
literal|false
return|;
name|value
operator|->
name|type
operator|=
name|Value
operator|::
name|Identifier
expr_stmt|;
specifier|const
name|int
name|theid
init|=
name|findKnownValue
argument_list|(
name|str
argument_list|,
name|values
argument_list|,
name|NumKnownValues
argument_list|)
decl_stmt|;
if|if
condition|(
name|theid
operator|!=
literal|0
condition|)
block|{
name|value
operator|->
name|type
operator|=
name|Value
operator|::
name|KnownIdentifier
expr_stmt|;
name|value
operator|->
name|variant
operator|=
name|theid
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
if|if
condition|(
name|haveUnary
condition|)
return|return
literal|false
return|;
name|prev
argument_list|()
expr_stmt|;
if|if
condition|(
name|testHexColor
argument_list|()
condition|)
block|{
name|QColor
name|col
decl_stmt|;
if|if
condition|(
operator|!
name|parseHexColor
argument_list|(
operator|&
name|col
argument_list|)
condition|)
return|return
literal|false
return|;
name|value
operator|->
name|type
operator|=
name|Value
operator|::
name|Color
expr_stmt|;
name|value
operator|->
name|variant
operator|=
name|col
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testFunction
argument_list|()
condition|)
block|{
name|QString
name|name
decl_stmt|,
name|args
decl_stmt|;
if|if
condition|(
operator|!
name|parseFunction
argument_list|(
operator|&
name|name
argument_list|,
operator|&
name|args
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"url"
argument_list|)
condition|)
block|{
name|value
operator|->
name|type
operator|=
name|Value
operator|::
name|Uri
expr_stmt|;
name|removeOptionalQuotes
argument_list|(
operator|&
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|QFileInfo
argument_list|(
name|args
argument_list|)
operator|.
name|isRelative
argument_list|()
operator|&&
operator|!
name|sourcePath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|args
operator|.
name|prepend
argument_list|(
name|sourcePath
argument_list|)
expr_stmt|;
block|}
name|value
operator|->
name|variant
operator|=
name|args
expr_stmt|;
block|}
else|else
block|{
name|value
operator|->
name|type
operator|=
name|Value
operator|::
name|Function
expr_stmt|;
name|value
operator|->
name|variant
operator|=
name|QStringList
argument_list|()
operator|<<
name|name
operator|<<
name|args
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
name|recordError
argument_list|()
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
name|skipSpace
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|parseFunction
name|bool
name|Parser
operator|::
name|parseFunction
parameter_list|(
name|QString
modifier|*
name|name
parameter_list|,
name|QString
modifier|*
name|args
parameter_list|)
block|{
operator|*
name|name
operator|=
name|lexem
argument_list|()
expr_stmt|;
name|name
operator|->
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|skipSpace
argument_list|()
expr_stmt|;
specifier|const
name|int
name|start
init|=
name|index
decl_stmt|;
if|if
condition|(
operator|!
name|until
argument_list|(
name|RPAREN
argument_list|)
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|index
operator|-
literal|1
condition|;
operator|++
name|i
control|)
name|args
operator|->
name|append
argument_list|(
name|symbols
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|lexem
argument_list|()
argument_list|)
expr_stmt|;
comment|/*     if (!nextExpr(&arguments)) return false;     if (!next(RPAREN)) return false;     */
name|skipSpace
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|parseHexColor
name|bool
name|Parser
operator|::
name|parseHexColor
parameter_list|(
name|QColor
modifier|*
name|col
parameter_list|)
block|{
name|col
operator|->
name|setNamedColor
argument_list|(
name|lexem
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|col
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QCssParser::parseHexColor: Unknown color name '%s'"
argument_list|,
name|lexem
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|skipSpace
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|testAndParseUri
name|bool
name|Parser
operator|::
name|testAndParseUri
parameter_list|(
name|QString
modifier|*
name|uri
parameter_list|)
block|{
specifier|const
name|int
name|rewind
init|=
name|index
decl_stmt|;
if|if
condition|(
operator|!
name|testFunction
argument_list|()
condition|)
return|return
literal|false
return|;
name|QString
name|name
decl_stmt|,
name|args
decl_stmt|;
if|if
condition|(
operator|!
name|parseFunction
argument_list|(
operator|&
name|name
argument_list|,
operator|&
name|args
argument_list|)
condition|)
block|{
name|index
operator|=
name|rewind
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|name
operator|.
name|toLower
argument_list|()
operator|!=
name|QLatin1String
argument_list|(
literal|"url"
argument_list|)
condition|)
block|{
name|index
operator|=
name|rewind
expr_stmt|;
return|return
literal|false
return|;
block|}
operator|*
name|uri
operator|=
name|args
expr_stmt|;
name|removeOptionalQuotes
argument_list|(
name|uri
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|testSimpleSelector
name|bool
name|Parser
operator|::
name|testSimpleSelector
parameter_list|()
block|{
return|return
name|testElementName
argument_list|()
operator|||
operator|(
name|test
argument_list|(
name|HASH
argument_list|)
operator|)
operator|||
name|testClass
argument_list|()
operator|||
name|testAttrib
argument_list|()
operator|||
name|testPseudo
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|next
name|bool
name|Parser
operator|::
name|next
parameter_list|(
name|QCss
operator|::
name|TokenType
name|t
parameter_list|)
block|{
if|if
condition|(
name|hasNext
argument_list|()
operator|&&
name|next
argument_list|()
operator|==
name|t
condition|)
return|return
literal|true
return|;
return|return
name|recordError
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|test
name|bool
name|Parser
operator|::
name|test
parameter_list|(
name|QCss
operator|::
name|TokenType
name|t
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
name|symbols
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|symbols
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|.
name|token
operator|==
name|t
condition|)
block|{
operator|++
name|index
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|unquotedLexem
name|QString
name|Parser
operator|::
name|unquotedLexem
parameter_list|()
specifier|const
block|{
name|QString
name|s
init|=
name|lexem
argument_list|()
decl_stmt|;
if|if
condition|(
name|lookup
argument_list|()
operator|==
name|STRING
condition|)
block|{
name|s
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|s
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
end_function
begin_function
DECL|function|lexemUntil
name|QString
name|Parser
operator|::
name|lexemUntil
parameter_list|(
name|QCss
operator|::
name|TokenType
name|t
parameter_list|)
block|{
name|QString
name|lexem
decl_stmt|;
while|while
condition|(
name|hasNext
argument_list|()
operator|&&
name|next
argument_list|()
operator|!=
name|t
condition|)
name|lexem
operator|+=
name|symbol
argument_list|()
operator|.
name|lexem
argument_list|()
expr_stmt|;
return|return
name|lexem
return|;
block|}
end_function
begin_function
DECL|function|until
name|bool
name|Parser
operator|::
name|until
parameter_list|(
name|QCss
operator|::
name|TokenType
name|target
parameter_list|,
name|QCss
operator|::
name|TokenType
name|target2
parameter_list|)
block|{
name|int
name|braceCount
init|=
literal|0
decl_stmt|;
name|int
name|brackCount
init|=
literal|0
decl_stmt|;
name|int
name|parenCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|index
condition|)
block|{
switch|switch
condition|(
name|symbols
operator|.
name|at
argument_list|(
name|index
operator|-
literal|1
argument_list|)
operator|.
name|token
condition|)
block|{
case|case
name|LBRACE
case|:
operator|++
name|braceCount
expr_stmt|;
break|break;
case|case
name|LBRACKET
case|:
operator|++
name|brackCount
expr_stmt|;
break|break;
case|case
name|FUNCTION
case|:
case|case
name|LPAREN
case|:
operator|++
name|parenCount
expr_stmt|;
break|break;
default|default:
empty_stmt|;
block|}
block|}
while|while
condition|(
name|index
operator|<
name|symbols
operator|.
name|size
argument_list|()
condition|)
block|{
name|QCss
operator|::
name|TokenType
name|t
init|=
name|symbols
operator|.
name|at
argument_list|(
name|index
operator|++
argument_list|)
operator|.
name|token
decl_stmt|;
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|LBRACE
case|:
operator|++
name|braceCount
expr_stmt|;
break|break;
case|case
name|RBRACE
case|:
operator|--
name|braceCount
expr_stmt|;
break|break;
case|case
name|LBRACKET
case|:
operator|++
name|brackCount
expr_stmt|;
break|break;
case|case
name|RBRACKET
case|:
operator|--
name|brackCount
expr_stmt|;
break|break;
case|case
name|FUNCTION
case|:
case|case
name|LPAREN
case|:
operator|++
name|parenCount
expr_stmt|;
break|break;
case|case
name|RPAREN
case|:
operator|--
name|parenCount
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
operator|(
name|t
operator|==
name|target
operator|||
operator|(
name|target2
operator|!=
name|NONE
operator|&&
name|t
operator|==
name|target2
operator|)
operator|)
operator|&&
name|braceCount
operator|<=
literal|0
operator|&&
name|brackCount
operator|<=
literal|0
operator|&&
name|parenCount
operator|<=
literal|0
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|braceCount
operator|<
literal|0
operator|||
name|brackCount
operator|<
literal|0
operator|||
name|parenCount
operator|<
literal|0
condition|)
block|{
operator|--
name|index
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|testTokenAndEndsWith
name|bool
name|Parser
operator|::
name|testTokenAndEndsWith
parameter_list|(
name|QCss
operator|::
name|TokenType
name|t
parameter_list|,
name|QLatin1String
name|str
parameter_list|)
block|{
if|if
condition|(
operator|!
name|test
argument_list|(
name|t
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|lexem
argument_list|()
operator|.
name|endsWith
argument_list|(
name|str
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
name|prev
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CSSPARSER
end_comment
end_unit
