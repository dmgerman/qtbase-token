begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qtextformat.h"
end_include
begin_include
include|#
directive|include
file|"qtextformat_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextengine_p.h"
end_include
begin_include
include|#
directive|include
file|"qabstracttextdocumentlayout.h"
end_include
begin_include
include|#
directive|include
file|"qtextlayout.h"
end_include
begin_include
include|#
directive|include
file|"qtextboundaryfinder.h"
end_include
begin_include
include|#
directive|include
file|"qvarlengtharray.h"
end_include
begin_include
include|#
directive|include
file|"qfont.h"
end_include
begin_include
include|#
directive|include
file|"qfont_p.h"
end_include
begin_include
include|#
directive|include
file|"qfontengine_p.h"
end_include
begin_include
include|#
directive|include
file|"qstring.h"
end_include
begin_include
include|#
directive|include
file|<private/qunicodetables_p.h>
end_include
begin_include
include|#
directive|include
file|"qtextdocument_p.h"
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
namespace|namespace
block|{
comment|// Helper class used in QTextEngine::itemize
comment|// keep it out here to allow us to keep supporting various compilers.
DECL|class|Itemizer
class|class
name|Itemizer
block|{
public|public:
DECL|function|Itemizer
name|Itemizer
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|,
specifier|const
name|QScriptAnalysis
modifier|*
name|analysis
parameter_list|,
name|QScriptItemArray
modifier|&
name|items
parameter_list|)
member_init_list|:
name|m_string
argument_list|(
name|string
argument_list|)
member_init_list|,
name|m_analysis
argument_list|(
name|analysis
argument_list|)
member_init_list|,
name|m_items
argument_list|(
name|items
argument_list|)
member_init_list|,
name|m_splitter
argument_list|(
literal|0
argument_list|)
block|{     }
DECL|function|~Itemizer
name|~
name|Itemizer
parameter_list|()
block|{
operator|delete
name|m_splitter
expr_stmt|;
block|}
comment|/// generate the script items
comment|/// The caps parameter is used to choose the algoritm of splitting text and assiging roles to the textitems
DECL|function|generate
name|void
name|generate
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|,
name|QFont
operator|::
name|Capitalization
name|caps
parameter_list|)
block|{
if|if
condition|(
operator|(
name|int
operator|)
name|caps
operator|==
operator|(
name|int
operator|)
name|QFont
operator|::
name|SmallCaps
condition|)
name|generateScriptItemsSmallCaps
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|ushort
operator|*
argument_list|>
argument_list|(
name|m_string
operator|.
name|unicode
argument_list|()
argument_list|)
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|caps
operator|==
name|QFont
operator|::
name|Capitalize
condition|)
name|generateScriptItemsCapitalize
argument_list|(
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|caps
operator|!=
name|QFont
operator|::
name|MixedCase
condition|)
block|{
name|generateScriptItemsAndChangeCase
argument_list|(
name|start
argument_list|,
name|length
argument_list|,
name|caps
operator|==
name|QFont
operator|::
name|AllLowercase
condition|?
name|QScriptAnalysis
operator|::
name|Lowercase
else|:
name|QScriptAnalysis
operator|::
name|Uppercase
argument_list|)
expr_stmt|;
block|}
else|else
name|generateScriptItems
argument_list|(
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|enumerator|MaxItemLength
enum|enum
block|{
name|MaxItemLength
init|=
literal|4096
block|}
enum|;
DECL|function|generateScriptItemsAndChangeCase
name|void
name|generateScriptItemsAndChangeCase
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|,
name|QScriptAnalysis
operator|::
name|Flags
name|flags
parameter_list|)
block|{
name|generateScriptItems
argument_list|(
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_items
operator|.
name|isEmpty
argument_list|()
condition|)
comment|// the next loop won't work in that case
return|return;
name|QScriptItemArray
operator|::
name|Iterator
name|iter
init|=
name|m_items
operator|.
name|end
argument_list|()
decl_stmt|;
do|do
block|{
name|iter
operator|--
expr_stmt|;
if|if
condition|(
name|iter
operator|->
name|analysis
operator|.
name|flags
operator|<
name|QScriptAnalysis
operator|::
name|TabOrObject
condition|)
name|iter
operator|->
name|analysis
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
block|}
do|while
condition|(
name|iter
operator|->
name|position
operator|>
name|start
condition|)
do|;
block|}
DECL|function|generateScriptItems
name|void
name|generateScriptItems
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
operator|!
name|length
condition|)
return|return;
specifier|const
name|int
name|end
init|=
name|start
operator|+
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
operator|+
literal|1
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
name|m_analysis
index|[
name|i
index|]
operator|==
name|m_analysis
index|[
name|start
index|]
operator|)
operator|&&
name|m_analysis
index|[
name|i
index|]
operator|.
name|flags
operator|<
name|QScriptAnalysis
operator|::
name|SpaceTabOrObject
operator|&&
name|i
operator|-
name|start
operator|<
name|MaxItemLength
condition|)
continue|continue;
name|m_items
operator|.
name|append
argument_list|(
name|QScriptItem
argument_list|(
name|start
argument_list|,
name|m_analysis
index|[
name|start
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
name|i
expr_stmt|;
block|}
name|m_items
operator|.
name|append
argument_list|(
name|QScriptItem
argument_list|(
name|start
argument_list|,
name|m_analysis
index|[
name|start
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|generateScriptItemsCapitalize
name|void
name|generateScriptItemsCapitalize
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
operator|!
name|length
condition|)
return|return;
if|if
condition|(
operator|!
name|m_splitter
condition|)
name|m_splitter
operator|=
operator|new
name|QTextBoundaryFinder
argument_list|(
name|QTextBoundaryFinder
operator|::
name|Word
argument_list|,
name|m_string
operator|.
name|constData
argument_list|()
argument_list|,
name|m_string
operator|.
name|length
argument_list|()
argument_list|,
comment|/*buffer*/
literal|0
argument_list|,
comment|/*buffer size*/
literal|0
argument_list|)
expr_stmt|;
name|m_splitter
operator|->
name|setPosition
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|QScriptAnalysis
name|itemAnalysis
init|=
name|m_analysis
index|[
name|start
index|]
decl_stmt|;
if|if
condition|(
name|m_splitter
operator|->
name|boundaryReasons
argument_list|()
operator|&
name|QTextBoundaryFinder
operator|::
name|StartWord
condition|)
block|{
name|itemAnalysis
operator|.
name|flags
operator|=
name|QScriptAnalysis
operator|::
name|Uppercase
expr_stmt|;
name|m_splitter
operator|->
name|toNextBoundary
argument_list|()
expr_stmt|;
block|}
specifier|const
name|int
name|end
init|=
name|start
operator|+
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
operator|+
literal|1
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
block|{
name|bool
name|atWordBoundary
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|m_splitter
operator|->
name|position
argument_list|()
condition|)
block|{
if|if
condition|(
name|m_splitter
operator|->
name|boundaryReasons
argument_list|()
operator|&
name|QTextBoundaryFinder
operator|::
name|StartWord
operator|&&
name|m_analysis
index|[
name|i
index|]
operator|.
name|flags
operator|<
name|QScriptAnalysis
operator|::
name|TabOrObject
condition|)
name|atWordBoundary
operator|=
literal|true
expr_stmt|;
name|m_splitter
operator|->
name|toNextBoundary
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|m_analysis
index|[
name|i
index|]
operator|==
name|itemAnalysis
operator|&&
name|m_analysis
index|[
name|i
index|]
operator|.
name|flags
operator|<
name|QScriptAnalysis
operator|::
name|TabOrObject
operator|&&
operator|!
name|atWordBoundary
operator|&&
name|i
operator|-
name|start
operator|<
name|MaxItemLength
condition|)
continue|continue;
name|m_items
operator|.
name|append
argument_list|(
name|QScriptItem
argument_list|(
name|start
argument_list|,
name|itemAnalysis
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
name|i
expr_stmt|;
name|itemAnalysis
operator|=
name|m_analysis
index|[
name|start
index|]
expr_stmt|;
if|if
condition|(
name|atWordBoundary
condition|)
name|itemAnalysis
operator|.
name|flags
operator|=
name|QScriptAnalysis
operator|::
name|Uppercase
expr_stmt|;
block|}
name|m_items
operator|.
name|append
argument_list|(
name|QScriptItem
argument_list|(
name|start
argument_list|,
name|itemAnalysis
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|generateScriptItemsSmallCaps
name|void
name|generateScriptItemsSmallCaps
parameter_list|(
specifier|const
name|ushort
modifier|*
name|uc
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
operator|!
name|length
condition|)
return|return;
name|bool
name|lower
init|=
operator|(
name|QChar
operator|::
name|category
argument_list|(
name|uc
index|[
name|start
index|]
argument_list|)
operator|==
name|QChar
operator|::
name|Letter_Lowercase
operator|)
decl_stmt|;
specifier|const
name|int
name|end
init|=
name|start
operator|+
name|length
decl_stmt|;
comment|// split text into parts that are already uppercase and parts that are lowercase, and mark the latter to be uppercased later.
for|for
control|(
name|int
name|i
init|=
name|start
operator|+
literal|1
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
block|{
name|bool
name|l
init|=
operator|(
name|QChar
operator|::
name|category
argument_list|(
name|uc
index|[
name|i
index|]
argument_list|)
operator|==
name|QChar
operator|::
name|Letter_Lowercase
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|m_analysis
index|[
name|i
index|]
operator|==
name|m_analysis
index|[
name|start
index|]
operator|)
operator|&&
name|m_analysis
index|[
name|i
index|]
operator|.
name|flags
operator|<
name|QScriptAnalysis
operator|::
name|TabOrObject
operator|&&
name|l
operator|==
name|lower
operator|&&
name|i
operator|-
name|start
operator|<
name|MaxItemLength
condition|)
continue|continue;
name|m_items
operator|.
name|append
argument_list|(
name|QScriptItem
argument_list|(
name|start
argument_list|,
name|m_analysis
index|[
name|start
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|lower
condition|)
name|m_items
operator|.
name|last
argument_list|()
operator|.
name|analysis
operator|.
name|flags
operator|=
name|QScriptAnalysis
operator|::
name|SmallCaps
expr_stmt|;
name|start
operator|=
name|i
expr_stmt|;
name|lower
operator|=
name|l
expr_stmt|;
block|}
name|m_items
operator|.
name|append
argument_list|(
name|QScriptItem
argument_list|(
name|start
argument_list|,
name|m_analysis
index|[
name|start
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|lower
condition|)
name|m_items
operator|.
name|last
argument_list|()
operator|.
name|analysis
operator|.
name|flags
operator|=
name|QScriptAnalysis
operator|::
name|SmallCaps
expr_stmt|;
block|}
DECL|member|m_string
specifier|const
name|QString
modifier|&
name|m_string
decl_stmt|;
DECL|member|m_analysis
specifier|const
name|QScriptAnalysis
modifier|*
specifier|const
name|m_analysis
decl_stmt|;
DECL|member|m_items
name|QScriptItemArray
modifier|&
name|m_items
decl_stmt|;
DECL|member|m_splitter
name|QTextBoundaryFinder
modifier|*
name|m_splitter
decl_stmt|;
block|}
class|;
block|}
end_namespace
begin_comment
comment|// ----------------------------------------------------------------------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// The BiDi algorithm
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// ----------------------------------------------------------------------------
end_comment
begin_define
DECL|macro|BIDI_DEBUG
define|#
directive|define
name|BIDI_DEBUG
value|0
end_define
begin_if
if|#
directive|if
operator|(
name|BIDI_DEBUG
operator|>=
literal|1
operator|)
end_if
begin_expr_stmt
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|<iostream>
name|QT_END_INCLUDE_NAMESPACE
expr|using
end_expr_stmt
begin_namespace
namespace|namespace
name|std
namespace|;
end_namespace
begin_decl_stmt
DECL|variable|directions
specifier|static
specifier|const
name|char
modifier|*
name|directions
index|[]
init|=
block|{
literal|"DirL"
block|,
literal|"DirR"
block|,
literal|"DirEN"
block|,
literal|"DirES"
block|,
literal|"DirET"
block|,
literal|"DirAN"
block|,
literal|"DirCS"
block|,
literal|"DirB"
block|,
literal|"DirS"
block|,
literal|"DirWS"
block|,
literal|"DirON"
block|,
literal|"DirLRE"
block|,
literal|"DirLRO"
block|,
literal|"DirAL"
block|,
literal|"DirRLE"
block|,
literal|"DirRLO"
block|,
literal|"DirPDF"
block|,
literal|"DirNSM"
block|,
literal|"DirBN"
block|}
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_struct
DECL|struct|QBidiStatus
struct|struct
name|QBidiStatus
block|{
DECL|function|QBidiStatus
name|QBidiStatus
parameter_list|()
block|{
name|eor
operator|=
name|QChar
operator|::
name|DirON
expr_stmt|;
name|lastStrong
operator|=
name|QChar
operator|::
name|DirON
expr_stmt|;
name|last
operator|=
name|QChar
operator|::
name|DirON
expr_stmt|;
name|dir
operator|=
name|QChar
operator|::
name|DirON
expr_stmt|;
block|}
DECL|member|eor
name|QChar
operator|::
name|Direction
name|eor
decl_stmt|;
DECL|member|lastStrong
name|QChar
operator|::
name|Direction
name|lastStrong
decl_stmt|;
DECL|member|last
name|QChar
operator|::
name|Direction
name|last
decl_stmt|;
DECL|member|dir
name|QChar
operator|::
name|Direction
name|dir
decl_stmt|;
block|}
struct|;
end_struct
begin_enum
DECL|enumerator|MaxBidiLevel
enum|enum
block|{
name|MaxBidiLevel
init|=
literal|61
block|}
enum|;
end_enum
begin_struct
DECL|struct|QBidiControl
struct|struct
name|QBidiControl
block|{
DECL|function|QBidiControl
specifier|inline
name|QBidiControl
parameter_list|(
name|bool
name|rtl
parameter_list|)
member_init_list|:
name|cCtx
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|base
argument_list|(
name|rtl
condition|?
literal|1
else|:
literal|0
argument_list|)
member_init_list|,
name|level
argument_list|(
name|rtl
condition|?
literal|1
else|:
literal|0
argument_list|)
member_init_list|,
name|override
argument_list|(
literal|false
argument_list|)
block|{}
DECL|function|embed
specifier|inline
name|void
name|embed
parameter_list|(
name|bool
name|rtl
parameter_list|,
name|bool
name|o
init|=
literal|false
parameter_list|)
block|{
name|unsigned
name|int
name|toAdd
init|=
literal|1
decl_stmt|;
if|if
condition|(
operator|(
name|level
operator|%
literal|2
operator|!=
literal|0
operator|)
operator|==
name|rtl
condition|)
block|{
operator|++
name|toAdd
expr_stmt|;
block|}
if|if
condition|(
name|level
operator|+
name|toAdd
operator|<=
name|MaxBidiLevel
condition|)
block|{
name|ctx
index|[
name|cCtx
index|]
operator|.
name|level
operator|=
name|level
expr_stmt|;
name|ctx
index|[
name|cCtx
index|]
operator|.
name|override
operator|=
name|override
expr_stmt|;
name|cCtx
operator|++
expr_stmt|;
name|override
operator|=
name|o
expr_stmt|;
name|level
operator|+=
name|toAdd
expr_stmt|;
block|}
block|}
DECL|function|canPop
specifier|inline
name|bool
name|canPop
parameter_list|()
specifier|const
block|{
return|return
name|cCtx
operator|!=
literal|0
return|;
block|}
DECL|function|pdf
specifier|inline
name|void
name|pdf
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|cCtx
argument_list|)
expr_stmt|;
operator|--
name|cCtx
expr_stmt|;
name|level
operator|=
name|ctx
index|[
name|cCtx
index|]
operator|.
name|level
expr_stmt|;
name|override
operator|=
name|ctx
index|[
name|cCtx
index|]
operator|.
name|override
expr_stmt|;
block|}
DECL|function|basicDirection
specifier|inline
name|QChar
operator|::
name|Direction
name|basicDirection
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|base
condition|?
name|QChar
operator|::
name|DirR
else|:
name|QChar
operator|::
name|DirL
operator|)
return|;
block|}
DECL|function|baseLevel
specifier|inline
name|unsigned
name|int
name|baseLevel
parameter_list|()
specifier|const
block|{
return|return
name|base
return|;
block|}
DECL|function|direction
specifier|inline
name|QChar
operator|::
name|Direction
name|direction
parameter_list|()
specifier|const
block|{
return|return
operator|(
operator|(
name|level
operator|%
literal|2
operator|)
condition|?
name|QChar
operator|::
name|DirR
else|:
name|QChar
operator|::
name|DirL
operator|)
return|;
block|}
struct|struct
block|{
DECL|member|level
name|unsigned
name|int
name|level
decl_stmt|;
DECL|member|override
name|bool
name|override
decl_stmt|;
DECL|member|ctx
block|}
name|ctx
index|[
name|MaxBidiLevel
index|]
struct|;
DECL|member|cCtx
name|unsigned
name|int
name|cCtx
decl_stmt|;
DECL|member|base
specifier|const
name|unsigned
name|int
name|base
decl_stmt|;
DECL|member|level
name|unsigned
name|int
name|level
decl_stmt|;
DECL|member|override
name|bool
name|override
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|appendItems
specifier|static
name|void
name|appendItems
parameter_list|(
name|QScriptAnalysis
modifier|*
name|analysis
parameter_list|,
name|int
modifier|&
name|start
parameter_list|,
name|int
modifier|&
name|stop
parameter_list|,
specifier|const
name|QBidiControl
modifier|&
name|control
parameter_list|,
name|QChar
operator|::
name|Direction
name|dir
parameter_list|)
block|{
if|if
condition|(
name|start
operator|>
name|stop
condition|)
return|return;
name|int
name|level
init|=
name|control
operator|.
name|level
decl_stmt|;
if|if
condition|(
name|dir
operator|!=
name|QChar
operator|::
name|DirON
operator|&&
operator|!
name|control
operator|.
name|override
condition|)
block|{
comment|// add level of run (cases I1& I2)
if|if
condition|(
name|level
operator|%
literal|2
condition|)
block|{
if|if
condition|(
name|dir
operator|==
name|QChar
operator|::
name|DirL
operator|||
name|dir
operator|==
name|QChar
operator|::
name|DirAN
operator|||
name|dir
operator|==
name|QChar
operator|::
name|DirEN
condition|)
name|level
operator|++
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|dir
operator|==
name|QChar
operator|::
name|DirR
condition|)
name|level
operator|++
expr_stmt|;
elseif|else
if|if
condition|(
name|dir
operator|==
name|QChar
operator|::
name|DirAN
operator|||
name|dir
operator|==
name|QChar
operator|::
name|DirEN
condition|)
name|level
operator|+=
literal|2
expr_stmt|;
block|}
block|}
if|#
directive|if
operator|(
name|BIDI_DEBUG
operator|>=
literal|1
operator|)
name|qDebug
argument_list|(
literal|"new run: dir=%s from %d, to %d level = %d override=%d"
argument_list|,
name|directions
index|[
name|dir
index|]
argument_list|,
name|start
argument_list|,
name|stop
argument_list|,
name|level
argument_list|,
name|control
operator|.
name|override
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QScriptAnalysis
modifier|*
name|s
init|=
name|analysis
operator|+
name|start
decl_stmt|;
specifier|const
name|QScriptAnalysis
modifier|*
name|e
init|=
name|analysis
operator|+
name|stop
decl_stmt|;
while|while
condition|(
name|s
operator|<=
name|e
condition|)
block|{
name|s
operator|->
name|bidiLevel
operator|=
name|level
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
operator|++
name|stop
expr_stmt|;
name|start
operator|=
name|stop
expr_stmt|;
block|}
end_function
begin_function
DECL|function|skipBoundryNeutrals
specifier|static
name|QChar
operator|::
name|Direction
name|skipBoundryNeutrals
parameter_list|(
name|QScriptAnalysis
modifier|*
name|analysis
parameter_list|,
specifier|const
name|ushort
modifier|*
name|unicode
parameter_list|,
name|int
name|length
parameter_list|,
name|int
modifier|&
name|sor
parameter_list|,
name|int
modifier|&
name|eor
parameter_list|,
name|QBidiControl
modifier|&
name|control
parameter_list|)
block|{
name|QChar
operator|::
name|Direction
name|dir
init|=
name|control
operator|.
name|basicDirection
argument_list|()
decl_stmt|;
name|int
name|level
init|=
name|sor
operator|>
literal|0
condition|?
name|analysis
index|[
name|sor
operator|-
literal|1
index|]
operator|.
name|bidiLevel
else|:
name|control
operator|.
name|level
decl_stmt|;
while|while
condition|(
name|sor
operator|<
name|length
condition|)
block|{
name|dir
operator|=
name|QChar
operator|::
name|direction
argument_list|(
name|unicode
index|[
name|sor
index|]
argument_list|)
expr_stmt|;
comment|// Keep skipping DirBN as if it doesn't exist
if|if
condition|(
name|dir
operator|!=
name|QChar
operator|::
name|DirBN
condition|)
break|break;
name|analysis
index|[
name|sor
operator|++
index|]
operator|.
name|bidiLevel
operator|=
name|level
expr_stmt|;
block|}
name|eor
operator|=
name|sor
expr_stmt|;
if|if
condition|(
name|eor
operator|==
name|length
condition|)
name|dir
operator|=
name|control
operator|.
name|basicDirection
argument_list|()
expr_stmt|;
return|return
name|dir
return|;
block|}
end_function
begin_comment
comment|// creates the next QScript items.
end_comment
begin_function
DECL|function|bidiItemize
specifier|static
name|bool
name|bidiItemize
parameter_list|(
name|QTextEngine
modifier|*
name|engine
parameter_list|,
name|QScriptAnalysis
modifier|*
name|analysis
parameter_list|,
name|QBidiControl
modifier|&
name|control
parameter_list|)
block|{
name|bool
name|rightToLeft
init|=
operator|(
name|control
operator|.
name|basicDirection
argument_list|()
operator|==
literal|1
operator|)
decl_stmt|;
name|bool
name|hasBidi
init|=
name|rightToLeft
decl_stmt|;
if|#
directive|if
name|BIDI_DEBUG
operator|>=
literal|2
name|qDebug
argument_list|()
operator|<<
literal|"bidiItemize: rightToLeft="
operator|<<
name|rightToLeft
operator|<<
name|engine
operator|->
name|layoutData
operator|->
name|string
expr_stmt|;
endif|#
directive|endif
name|int
name|sor
init|=
literal|0
decl_stmt|;
name|int
name|eor
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|length
init|=
name|engine
operator|->
name|layoutData
operator|->
name|string
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|const
name|ushort
modifier|*
name|unicode
init|=
operator|(
specifier|const
name|ushort
operator|*
operator|)
name|engine
operator|->
name|layoutData
operator|->
name|string
operator|.
name|unicode
argument_list|()
decl_stmt|;
name|int
name|current
init|=
literal|0
decl_stmt|;
name|QChar
operator|::
name|Direction
name|dir
init|=
name|rightToLeft
condition|?
name|QChar
operator|::
name|DirR
else|:
name|QChar
operator|::
name|DirL
decl_stmt|;
name|QBidiStatus
name|status
decl_stmt|;
name|QChar
operator|::
name|Direction
name|sdir
init|=
name|QChar
operator|::
name|direction
argument_list|(
operator|*
name|unicode
argument_list|)
decl_stmt|;
if|if
condition|(
name|sdir
operator|!=
name|QChar
operator|::
name|DirL
operator|&&
name|sdir
operator|!=
name|QChar
operator|::
name|DirR
operator|&&
name|sdir
operator|!=
name|QChar
operator|::
name|DirEN
operator|&&
name|sdir
operator|!=
name|QChar
operator|::
name|DirAN
condition|)
name|sdir
operator|=
name|QChar
operator|::
name|DirON
expr_stmt|;
else|else
name|dir
operator|=
name|QChar
operator|::
name|DirON
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|sdir
expr_stmt|;
name|status
operator|.
name|lastStrong
operator|=
name|rightToLeft
condition|?
name|QChar
operator|::
name|DirR
else|:
name|QChar
operator|::
name|DirL
expr_stmt|;
name|status
operator|.
name|last
operator|=
name|status
operator|.
name|lastStrong
expr_stmt|;
name|status
operator|.
name|dir
operator|=
name|sdir
expr_stmt|;
while|while
condition|(
name|current
operator|<=
name|length
condition|)
block|{
name|QChar
operator|::
name|Direction
name|dirCurrent
decl_stmt|;
if|if
condition|(
name|current
operator|==
operator|(
name|int
operator|)
name|length
condition|)
name|dirCurrent
operator|=
name|control
operator|.
name|basicDirection
argument_list|()
expr_stmt|;
else|else
name|dirCurrent
operator|=
name|QChar
operator|::
name|direction
argument_list|(
name|unicode
index|[
name|current
index|]
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|BIDI_DEBUG
operator|>=
literal|2
operator|)
comment|//         qDebug()<< "pos="<< current<< " dir="<< directions[dir]
comment|//<< " current="<< directions[dirCurrent]<< " last="<< directions[status.last]
comment|//<< " eor="<< eor<< '/'<< directions[status.eor]
comment|//<< " sor="<< sor<< " lastStrong="
comment|//<< directions[status.lastStrong]
comment|//<< " level="<< (int)control.level<< " override="<< (bool)control.override;
endif|#
directive|endif
switch|switch
condition|(
name|dirCurrent
condition|)
block|{
comment|// embedding and overrides (X1-X9 in the BiDi specs)
case|case
name|QChar
operator|::
name|DirRLE
case|:
case|case
name|QChar
operator|::
name|DirRLO
case|:
case|case
name|QChar
operator|::
name|DirLRE
case|:
case|case
name|QChar
operator|::
name|DirLRO
case|:
block|{
name|bool
name|rtl
init|=
operator|(
name|dirCurrent
operator|==
name|QChar
operator|::
name|DirRLE
operator|||
name|dirCurrent
operator|==
name|QChar
operator|::
name|DirRLO
operator|)
decl_stmt|;
name|hasBidi
operator||=
name|rtl
expr_stmt|;
name|bool
name|override
init|=
operator|(
name|dirCurrent
operator|==
name|QChar
operator|::
name|DirLRO
operator|||
name|dirCurrent
operator|==
name|QChar
operator|::
name|DirRLO
operator|)
decl_stmt|;
name|unsigned
name|int
name|level
init|=
name|control
operator|.
name|level
operator|+
literal|1
decl_stmt|;
if|if
condition|(
operator|(
name|level
operator|%
literal|2
operator|!=
literal|0
operator|)
operator|==
name|rtl
condition|)
operator|++
name|level
expr_stmt|;
if|if
condition|(
name|level
operator|<
name|MaxBidiLevel
condition|)
block|{
name|eor
operator|=
name|current
operator|-
literal|1
expr_stmt|;
name|appendItems
argument_list|(
name|analysis
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|eor
operator|=
name|current
expr_stmt|;
name|control
operator|.
name|embed
argument_list|(
name|rtl
argument_list|,
name|override
argument_list|)
expr_stmt|;
name|QChar
operator|::
name|Direction
name|edir
init|=
operator|(
name|rtl
condition|?
name|QChar
operator|::
name|DirR
else|:
name|QChar
operator|::
name|DirL
operator|)
decl_stmt|;
name|dir
operator|=
name|status
operator|.
name|eor
operator|=
name|edir
expr_stmt|;
name|status
operator|.
name|lastStrong
operator|=
name|edir
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QChar
operator|::
name|DirPDF
case|:
block|{
if|if
condition|(
name|control
operator|.
name|canPop
argument_list|()
condition|)
block|{
if|if
condition|(
name|dir
operator|!=
name|control
operator|.
name|direction
argument_list|()
condition|)
block|{
name|eor
operator|=
name|current
operator|-
literal|1
expr_stmt|;
name|appendItems
argument_list|(
name|analysis
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|=
name|control
operator|.
name|direction
argument_list|()
expr_stmt|;
block|}
name|eor
operator|=
name|current
expr_stmt|;
name|appendItems
argument_list|(
name|analysis
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|control
operator|.
name|pdf
argument_list|()
expr_stmt|;
name|dir
operator|=
name|QChar
operator|::
name|DirON
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|QChar
operator|::
name|DirON
expr_stmt|;
name|status
operator|.
name|last
operator|=
name|control
operator|.
name|direction
argument_list|()
expr_stmt|;
if|if
condition|(
name|control
operator|.
name|override
condition|)
name|dir
operator|=
name|control
operator|.
name|direction
argument_list|()
expr_stmt|;
else|else
name|dir
operator|=
name|QChar
operator|::
name|DirON
expr_stmt|;
name|status
operator|.
name|lastStrong
operator|=
name|control
operator|.
name|direction
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
comment|// strong types
case|case
name|QChar
operator|::
name|DirL
case|:
if|if
condition|(
name|dir
operator|==
name|QChar
operator|::
name|DirON
condition|)
name|dir
operator|=
name|QChar
operator|::
name|DirL
expr_stmt|;
switch|switch
condition|(
name|status
operator|.
name|last
condition|)
block|{
case|case
name|QChar
operator|::
name|DirL
case|:
name|eor
operator|=
name|current
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|QChar
operator|::
name|DirL
expr_stmt|;
break|break;
case|case
name|QChar
operator|::
name|DirR
case|:
case|case
name|QChar
operator|::
name|DirAL
case|:
case|case
name|QChar
operator|::
name|DirEN
case|:
case|case
name|QChar
operator|::
name|DirAN
case|:
if|if
condition|(
name|eor
operator|>=
literal|0
condition|)
block|{
name|appendItems
argument_list|(
name|analysis
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|dir
operator|=
name|skipBoundryNeutrals
argument_list|(
name|analysis
argument_list|,
name|unicode
argument_list|,
name|length
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|eor
operator|=
name|current
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|dir
expr_stmt|;
block|}
break|break;
case|case
name|QChar
operator|::
name|DirES
case|:
case|case
name|QChar
operator|::
name|DirET
case|:
case|case
name|QChar
operator|::
name|DirCS
case|:
case|case
name|QChar
operator|::
name|DirBN
case|:
case|case
name|QChar
operator|::
name|DirB
case|:
case|case
name|QChar
operator|::
name|DirS
case|:
case|case
name|QChar
operator|::
name|DirWS
case|:
case|case
name|QChar
operator|::
name|DirON
case|:
if|if
condition|(
name|dir
operator|!=
name|QChar
operator|::
name|DirL
condition|)
block|{
comment|//last stuff takes embedding dir
if|if
condition|(
name|control
operator|.
name|direction
argument_list|()
operator|==
name|QChar
operator|::
name|DirR
condition|)
block|{
if|if
condition|(
name|status
operator|.
name|eor
operator|!=
name|QChar
operator|::
name|DirR
condition|)
block|{
comment|// AN or EN
name|appendItems
argument_list|(
name|analysis
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|QChar
operator|::
name|DirON
expr_stmt|;
name|dir
operator|=
name|QChar
operator|::
name|DirR
expr_stmt|;
block|}
name|eor
operator|=
name|current
operator|-
literal|1
expr_stmt|;
name|appendItems
argument_list|(
name|analysis
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|dir
operator|=
name|skipBoundryNeutrals
argument_list|(
name|analysis
argument_list|,
name|unicode
argument_list|,
name|length
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|status
operator|.
name|eor
operator|!=
name|QChar
operator|::
name|DirL
condition|)
block|{
name|appendItems
argument_list|(
name|analysis
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|QChar
operator|::
name|DirON
expr_stmt|;
name|dir
operator|=
name|QChar
operator|::
name|DirL
expr_stmt|;
block|}
else|else
block|{
name|eor
operator|=
name|current
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|QChar
operator|::
name|DirL
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|eor
operator|=
name|current
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|QChar
operator|::
name|DirL
expr_stmt|;
block|}
default|default:
break|break;
block|}
name|status
operator|.
name|lastStrong
operator|=
name|QChar
operator|::
name|DirL
expr_stmt|;
break|break;
case|case
name|QChar
operator|::
name|DirAL
case|:
case|case
name|QChar
operator|::
name|DirR
case|:
name|hasBidi
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|dir
operator|==
name|QChar
operator|::
name|DirON
condition|)
name|dir
operator|=
name|QChar
operator|::
name|DirR
expr_stmt|;
switch|switch
condition|(
name|status
operator|.
name|last
condition|)
block|{
case|case
name|QChar
operator|::
name|DirL
case|:
case|case
name|QChar
operator|::
name|DirEN
case|:
case|case
name|QChar
operator|::
name|DirAN
case|:
if|if
condition|(
name|eor
operator|>=
literal|0
condition|)
name|appendItems
argument_list|(
name|analysis
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|,
name|dir
argument_list|)
expr_stmt|;
comment|// fall through
case|case
name|QChar
operator|::
name|DirR
case|:
case|case
name|QChar
operator|::
name|DirAL
case|:
name|dir
operator|=
name|QChar
operator|::
name|DirR
expr_stmt|;
name|eor
operator|=
name|current
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|QChar
operator|::
name|DirR
expr_stmt|;
break|break;
case|case
name|QChar
operator|::
name|DirES
case|:
case|case
name|QChar
operator|::
name|DirET
case|:
case|case
name|QChar
operator|::
name|DirCS
case|:
case|case
name|QChar
operator|::
name|DirBN
case|:
case|case
name|QChar
operator|::
name|DirB
case|:
case|case
name|QChar
operator|::
name|DirS
case|:
case|case
name|QChar
operator|::
name|DirWS
case|:
case|case
name|QChar
operator|::
name|DirON
case|:
if|if
condition|(
name|status
operator|.
name|eor
operator|!=
name|QChar
operator|::
name|DirR
operator|&&
name|status
operator|.
name|eor
operator|!=
name|QChar
operator|::
name|DirAL
condition|)
block|{
comment|//last stuff takes embedding dir
if|if
condition|(
name|control
operator|.
name|direction
argument_list|()
operator|==
name|QChar
operator|::
name|DirR
operator|||
name|status
operator|.
name|lastStrong
operator|==
name|QChar
operator|::
name|DirR
operator|||
name|status
operator|.
name|lastStrong
operator|==
name|QChar
operator|::
name|DirAL
condition|)
block|{
name|appendItems
argument_list|(
name|analysis
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|=
name|QChar
operator|::
name|DirR
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|QChar
operator|::
name|DirON
expr_stmt|;
name|eor
operator|=
name|current
expr_stmt|;
block|}
else|else
block|{
name|eor
operator|=
name|current
operator|-
literal|1
expr_stmt|;
name|appendItems
argument_list|(
name|analysis
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|=
name|QChar
operator|::
name|DirR
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|QChar
operator|::
name|DirON
expr_stmt|;
block|}
block|}
else|else
block|{
name|eor
operator|=
name|current
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|QChar
operator|::
name|DirR
expr_stmt|;
block|}
default|default:
break|break;
block|}
name|status
operator|.
name|lastStrong
operator|=
name|dirCurrent
expr_stmt|;
break|break;
comment|// weak types:
case|case
name|QChar
operator|::
name|DirNSM
case|:
if|if
condition|(
name|eor
operator|==
name|current
operator|-
literal|1
condition|)
name|eor
operator|=
name|current
expr_stmt|;
break|break;
case|case
name|QChar
operator|::
name|DirEN
case|:
comment|// if last strong was AL change EN to AN
if|if
condition|(
name|status
operator|.
name|lastStrong
operator|!=
name|QChar
operator|::
name|DirAL
condition|)
block|{
if|if
condition|(
name|dir
operator|==
name|QChar
operator|::
name|DirON
condition|)
block|{
if|if
condition|(
name|status
operator|.
name|lastStrong
operator|==
name|QChar
operator|::
name|DirL
condition|)
name|dir
operator|=
name|QChar
operator|::
name|DirL
expr_stmt|;
else|else
name|dir
operator|=
name|QChar
operator|::
name|DirEN
expr_stmt|;
block|}
switch|switch
condition|(
name|status
operator|.
name|last
condition|)
block|{
case|case
name|QChar
operator|::
name|DirET
case|:
if|if
condition|(
name|status
operator|.
name|lastStrong
operator|==
name|QChar
operator|::
name|DirR
operator|||
name|status
operator|.
name|lastStrong
operator|==
name|QChar
operator|::
name|DirAL
condition|)
block|{
name|appendItems
argument_list|(
name|analysis
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|QChar
operator|::
name|DirON
expr_stmt|;
name|dir
operator|=
name|QChar
operator|::
name|DirAN
expr_stmt|;
block|}
comment|// fall through
case|case
name|QChar
operator|::
name|DirEN
case|:
case|case
name|QChar
operator|::
name|DirL
case|:
name|eor
operator|=
name|current
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|dirCurrent
expr_stmt|;
break|break;
case|case
name|QChar
operator|::
name|DirR
case|:
case|case
name|QChar
operator|::
name|DirAL
case|:
case|case
name|QChar
operator|::
name|DirAN
case|:
if|if
condition|(
name|eor
operator|>=
literal|0
condition|)
name|appendItems
argument_list|(
name|analysis
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|,
name|dir
argument_list|)
expr_stmt|;
else|else
name|eor
operator|=
name|current
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|QChar
operator|::
name|DirEN
expr_stmt|;
name|dir
operator|=
name|QChar
operator|::
name|DirAN
expr_stmt|;
break|break;
case|case
name|QChar
operator|::
name|DirES
case|:
case|case
name|QChar
operator|::
name|DirCS
case|:
if|if
condition|(
name|status
operator|.
name|eor
operator|==
name|QChar
operator|::
name|DirEN
operator|||
name|dir
operator|==
name|QChar
operator|::
name|DirAN
condition|)
block|{
name|eor
operator|=
name|current
expr_stmt|;
break|break;
block|}
case|case
name|QChar
operator|::
name|DirBN
case|:
case|case
name|QChar
operator|::
name|DirB
case|:
case|case
name|QChar
operator|::
name|DirS
case|:
case|case
name|QChar
operator|::
name|DirWS
case|:
case|case
name|QChar
operator|::
name|DirON
case|:
if|if
condition|(
name|status
operator|.
name|eor
operator|==
name|QChar
operator|::
name|DirR
condition|)
block|{
comment|// neutrals go to R
name|eor
operator|=
name|current
operator|-
literal|1
expr_stmt|;
name|appendItems
argument_list|(
name|analysis
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|=
name|QChar
operator|::
name|DirON
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|QChar
operator|::
name|DirEN
expr_stmt|;
name|dir
operator|=
name|QChar
operator|::
name|DirAN
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|eor
operator|==
name|QChar
operator|::
name|DirL
operator|||
operator|(
name|status
operator|.
name|eor
operator|==
name|QChar
operator|::
name|DirEN
operator|&&
name|status
operator|.
name|lastStrong
operator|==
name|QChar
operator|::
name|DirL
operator|)
condition|)
block|{
name|eor
operator|=
name|current
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|dirCurrent
expr_stmt|;
block|}
else|else
block|{
comment|// numbers on both sides, neutrals get right to left direction
if|if
condition|(
name|dir
operator|!=
name|QChar
operator|::
name|DirL
condition|)
block|{
name|appendItems
argument_list|(
name|analysis
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|=
name|QChar
operator|::
name|DirON
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|QChar
operator|::
name|DirON
expr_stmt|;
name|eor
operator|=
name|current
operator|-
literal|1
expr_stmt|;
name|dir
operator|=
name|QChar
operator|::
name|DirR
expr_stmt|;
name|appendItems
argument_list|(
name|analysis
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|=
name|QChar
operator|::
name|DirON
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|QChar
operator|::
name|DirON
expr_stmt|;
name|dir
operator|=
name|QChar
operator|::
name|DirAN
expr_stmt|;
block|}
else|else
block|{
name|eor
operator|=
name|current
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|dirCurrent
expr_stmt|;
block|}
block|}
default|default:
break|break;
block|}
break|break;
block|}
case|case
name|QChar
operator|::
name|DirAN
case|:
name|hasBidi
operator|=
literal|true
expr_stmt|;
name|dirCurrent
operator|=
name|QChar
operator|::
name|DirAN
expr_stmt|;
if|if
condition|(
name|dir
operator|==
name|QChar
operator|::
name|DirON
condition|)
name|dir
operator|=
name|QChar
operator|::
name|DirAN
expr_stmt|;
switch|switch
condition|(
name|status
operator|.
name|last
condition|)
block|{
case|case
name|QChar
operator|::
name|DirL
case|:
case|case
name|QChar
operator|::
name|DirAN
case|:
name|eor
operator|=
name|current
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|QChar
operator|::
name|DirAN
expr_stmt|;
break|break;
case|case
name|QChar
operator|::
name|DirR
case|:
case|case
name|QChar
operator|::
name|DirAL
case|:
case|case
name|QChar
operator|::
name|DirEN
case|:
if|if
condition|(
name|eor
operator|>=
literal|0
condition|)
block|{
name|appendItems
argument_list|(
name|analysis
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|eor
operator|=
name|current
expr_stmt|;
block|}
name|dir
operator|=
name|QChar
operator|::
name|DirAN
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|QChar
operator|::
name|DirAN
expr_stmt|;
break|break;
case|case
name|QChar
operator|::
name|DirCS
case|:
if|if
condition|(
name|status
operator|.
name|eor
operator|==
name|QChar
operator|::
name|DirAN
condition|)
block|{
name|eor
operator|=
name|current
expr_stmt|;
break|break;
block|}
case|case
name|QChar
operator|::
name|DirES
case|:
case|case
name|QChar
operator|::
name|DirET
case|:
case|case
name|QChar
operator|::
name|DirBN
case|:
case|case
name|QChar
operator|::
name|DirB
case|:
case|case
name|QChar
operator|::
name|DirS
case|:
case|case
name|QChar
operator|::
name|DirWS
case|:
case|case
name|QChar
operator|::
name|DirON
case|:
if|if
condition|(
name|status
operator|.
name|eor
operator|==
name|QChar
operator|::
name|DirR
condition|)
block|{
comment|// neutrals go to R
name|eor
operator|=
name|current
operator|-
literal|1
expr_stmt|;
name|appendItems
argument_list|(
name|analysis
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|QChar
operator|::
name|DirAN
expr_stmt|;
name|dir
operator|=
name|QChar
operator|::
name|DirAN
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|eor
operator|==
name|QChar
operator|::
name|DirL
operator|||
operator|(
name|status
operator|.
name|eor
operator|==
name|QChar
operator|::
name|DirEN
operator|&&
name|status
operator|.
name|lastStrong
operator|==
name|QChar
operator|::
name|DirL
operator|)
condition|)
block|{
name|eor
operator|=
name|current
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|dirCurrent
expr_stmt|;
block|}
else|else
block|{
comment|// numbers on both sides, neutrals get right to left direction
if|if
condition|(
name|dir
operator|!=
name|QChar
operator|::
name|DirL
condition|)
block|{
name|appendItems
argument_list|(
name|analysis
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|QChar
operator|::
name|DirON
expr_stmt|;
name|eor
operator|=
name|current
operator|-
literal|1
expr_stmt|;
name|dir
operator|=
name|QChar
operator|::
name|DirR
expr_stmt|;
name|appendItems
argument_list|(
name|analysis
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|QChar
operator|::
name|DirAN
expr_stmt|;
name|dir
operator|=
name|QChar
operator|::
name|DirAN
expr_stmt|;
block|}
else|else
block|{
name|eor
operator|=
name|current
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|dirCurrent
expr_stmt|;
block|}
block|}
default|default:
break|break;
block|}
break|break;
case|case
name|QChar
operator|::
name|DirES
case|:
case|case
name|QChar
operator|::
name|DirCS
case|:
break|break;
case|case
name|QChar
operator|::
name|DirET
case|:
if|if
condition|(
name|status
operator|.
name|last
operator|==
name|QChar
operator|::
name|DirEN
condition|)
block|{
name|dirCurrent
operator|=
name|QChar
operator|::
name|DirEN
expr_stmt|;
name|eor
operator|=
name|current
expr_stmt|;
name|status
operator|.
name|eor
operator|=
name|dirCurrent
expr_stmt|;
block|}
break|break;
comment|// boundary neutrals should be ignored
case|case
name|QChar
operator|::
name|DirBN
case|:
break|break;
comment|// neutrals
case|case
name|QChar
operator|::
name|DirB
case|:
comment|// ### what do we do with newline and paragraph separators that come to here?
break|break;
case|case
name|QChar
operator|::
name|DirS
case|:
comment|// ### implement rule L1
break|break;
case|case
name|QChar
operator|::
name|DirWS
case|:
case|case
name|QChar
operator|::
name|DirON
case|:
break|break;
default|default:
break|break;
block|}
comment|//qDebug()<< "     after: dir="<< //        dir<< " current="<< dirCurrent<< " last="<< status.last<< " eor="<< status.eor<< " lastStrong="<< status.lastStrong<< " embedding="<< control.direction();
if|if
condition|(
name|current
operator|>=
operator|(
name|int
operator|)
name|length
condition|)
break|break;
comment|// set status.last as needed.
switch|switch
condition|(
name|dirCurrent
condition|)
block|{
case|case
name|QChar
operator|::
name|DirET
case|:
case|case
name|QChar
operator|::
name|DirES
case|:
case|case
name|QChar
operator|::
name|DirCS
case|:
case|case
name|QChar
operator|::
name|DirS
case|:
case|case
name|QChar
operator|::
name|DirWS
case|:
case|case
name|QChar
operator|::
name|DirON
case|:
switch|switch
condition|(
name|status
operator|.
name|last
condition|)
block|{
case|case
name|QChar
operator|::
name|DirL
case|:
case|case
name|QChar
operator|::
name|DirR
case|:
case|case
name|QChar
operator|::
name|DirAL
case|:
case|case
name|QChar
operator|::
name|DirEN
case|:
case|case
name|QChar
operator|::
name|DirAN
case|:
name|status
operator|.
name|last
operator|=
name|dirCurrent
expr_stmt|;
break|break;
default|default:
name|status
operator|.
name|last
operator|=
name|QChar
operator|::
name|DirON
expr_stmt|;
block|}
break|break;
case|case
name|QChar
operator|::
name|DirNSM
case|:
case|case
name|QChar
operator|::
name|DirBN
case|:
comment|// ignore these
break|break;
case|case
name|QChar
operator|::
name|DirLRO
case|:
case|case
name|QChar
operator|::
name|DirLRE
case|:
name|status
operator|.
name|last
operator|=
name|QChar
operator|::
name|DirL
expr_stmt|;
break|break;
case|case
name|QChar
operator|::
name|DirRLO
case|:
case|case
name|QChar
operator|::
name|DirRLE
case|:
name|status
operator|.
name|last
operator|=
name|QChar
operator|::
name|DirR
expr_stmt|;
break|break;
case|case
name|QChar
operator|::
name|DirEN
case|:
if|if
condition|(
name|status
operator|.
name|last
operator|==
name|QChar
operator|::
name|DirL
condition|)
block|{
name|status
operator|.
name|last
operator|=
name|QChar
operator|::
name|DirL
expr_stmt|;
break|break;
block|}
comment|// fall through
default|default:
name|status
operator|.
name|last
operator|=
name|dirCurrent
expr_stmt|;
block|}
operator|++
name|current
expr_stmt|;
block|}
if|#
directive|if
operator|(
name|BIDI_DEBUG
operator|>=
literal|1
operator|)
name|qDebug
argument_list|()
operator|<<
literal|"reached end of line current="
operator|<<
name|current
operator|<<
literal|", eor="
operator|<<
name|eor
expr_stmt|;
endif|#
directive|endif
name|eor
operator|=
name|current
operator|-
literal|1
expr_stmt|;
comment|// remove dummy char
if|if
condition|(
name|sor
operator|<=
name|eor
condition|)
name|appendItems
argument_list|(
name|analysis
argument_list|,
name|sor
argument_list|,
name|eor
argument_list|,
name|control
argument_list|,
name|dir
argument_list|)
expr_stmt|;
return|return
name|hasBidi
return|;
block|}
end_function
begin_function
DECL|function|bidiReorder
name|void
name|QTextEngine
operator|::
name|bidiReorder
parameter_list|(
name|int
name|numItems
parameter_list|,
specifier|const
name|quint8
modifier|*
name|levels
parameter_list|,
name|int
modifier|*
name|visualOrder
parameter_list|)
block|{
comment|// first find highest and lowest levels
name|quint8
name|levelLow
init|=
literal|128
decl_stmt|;
name|quint8
name|levelHigh
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|numItems
condition|)
block|{
comment|//printf("level = %d\n", r->level);
if|if
condition|(
name|levels
index|[
name|i
index|]
operator|>
name|levelHigh
condition|)
name|levelHigh
operator|=
name|levels
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|levels
index|[
name|i
index|]
operator|<
name|levelLow
condition|)
name|levelLow
operator|=
name|levels
index|[
name|i
index|]
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
comment|// implements reordering of the line (L2 according to BiDi spec):
comment|// L2. From the highest level found in the text to the lowest odd level on each line,
comment|// reverse any contiguous sequence of characters that are at that level or higher.
comment|// reversing is only done up to the lowest odd level
if|if
condition|(
operator|!
operator|(
name|levelLow
operator|%
literal|2
operator|)
condition|)
name|levelLow
operator|++
expr_stmt|;
if|#
directive|if
operator|(
name|BIDI_DEBUG
operator|>=
literal|1
operator|)
comment|//     qDebug()<< "reorderLine: lineLow = "<< (uint)levelLow<< ", lineHigh = "<< (uint)levelHigh;
endif|#
directive|endif
name|int
name|count
init|=
name|numItems
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|numItems
condition|;
name|i
operator|++
control|)
name|visualOrder
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
while|while
condition|(
name|levelHigh
operator|>=
name|levelLow
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|count
condition|)
block|{
while|while
condition|(
name|i
operator|<
name|count
operator|&&
name|levels
index|[
name|i
index|]
operator|<
name|levelHigh
condition|)
name|i
operator|++
expr_stmt|;
name|int
name|start
init|=
name|i
decl_stmt|;
while|while
condition|(
name|i
operator|<=
name|count
operator|&&
name|levels
index|[
name|i
index|]
operator|>=
name|levelHigh
condition|)
name|i
operator|++
expr_stmt|;
name|int
name|end
init|=
name|i
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|start
operator|!=
name|end
condition|)
block|{
comment|//qDebug()<< "reversing from "<< start<< " to "<< end;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
operator|(
name|end
operator|-
name|start
operator|+
literal|1
operator|)
operator|/
literal|2
condition|;
name|j
operator|++
control|)
block|{
name|int
name|tmp
init|=
name|visualOrder
index|[
name|start
operator|+
name|j
index|]
decl_stmt|;
name|visualOrder
index|[
name|start
operator|+
name|j
index|]
operator|=
name|visualOrder
index|[
name|end
operator|-
name|j
index|]
expr_stmt|;
name|visualOrder
index|[
name|end
operator|-
name|j
index|]
operator|=
name|tmp
expr_stmt|;
block|}
block|}
name|i
operator|++
expr_stmt|;
block|}
name|levelHigh
operator|--
expr_stmt|;
block|}
if|#
directive|if
operator|(
name|BIDI_DEBUG
operator|>=
literal|1
operator|)
comment|//     qDebug()<< "visual order is:";
comment|//     for (i = 0; i< numItems; i++)
comment|//         qDebug()<< visualOrder[i];
endif|#
directive|endif
block|}
end_function
begin_function
name|QT_BEGIN_INCLUDE_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
include|#
directive|include
file|"qfontengine_ft_p.h"
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
include|#
directive|include
file|"qtextengine_mac.cpp"
endif|#
directive|endif
include|#
directive|include
file|<private/qharfbuzz_p.h>
name|QT_END_INCLUDE_NAMESPACE
comment|// ask the font engine to find out which glyphs (as an index in the specific font) to use for the text in one item.
DECL|function|stringToGlyphs
specifier|static
name|bool
name|stringToGlyphs
parameter_list|(
name|HB_ShaperItem
modifier|*
name|item
parameter_list|,
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|QFontEngine
modifier|*
name|fontEngine
parameter_list|)
block|{
name|int
name|nGlyphs
init|=
name|item
operator|->
name|num_glyphs
decl_stmt|;
name|QTextEngine
operator|::
name|ShaperFlags
name|shaperFlags
argument_list|(
name|QTextEngine
operator|::
name|GlyphIndicesOnly
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|->
name|item
operator|.
name|bidiLevel
operator|%
literal|2
condition|)
name|shaperFlags
operator||=
name|QTextEngine
operator|::
name|RightToLeft
expr_stmt|;
name|bool
name|result
init|=
name|fontEngine
operator|->
name|stringToCMap
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|QChar
operator|*
argument_list|>
argument_list|(
name|item
operator|->
name|string
operator|+
name|item
operator|->
name|item
operator|.
name|pos
argument_list|)
argument_list|,
name|item
operator|->
name|item
operator|.
name|length
argument_list|,
name|glyphs
argument_list|,
operator|&
name|nGlyphs
argument_list|,
name|shaperFlags
argument_list|)
decl_stmt|;
name|item
operator|->
name|num_glyphs
operator|=
name|nGlyphs
expr_stmt|;
name|glyphs
operator|->
name|numGlyphs
operator|=
name|nGlyphs
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|// shape all the items that intersect with the line, taking tab widths into account to find out what text actually fits in the line.
end_comment
begin_function
DECL|function|shapeLine
name|void
name|QTextEngine
operator|::
name|shapeLine
parameter_list|(
specifier|const
name|QScriptLine
modifier|&
name|line
parameter_list|)
block|{
name|QFixed
name|x
decl_stmt|;
name|bool
name|first
init|=
literal|true
decl_stmt|;
specifier|const
name|int
name|end
init|=
name|findItem
argument_list|(
name|line
operator|.
name|from
operator|+
name|line
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|item
init|=
name|findItem
argument_list|(
name|line
operator|.
name|from
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|==
operator|-
literal|1
condition|)
return|return;
for|for
control|(
name|item
operator|=
name|findItem
argument_list|(
name|line
operator|.
name|from
argument_list|)
init|;
name|item
operator|<=
name|end
condition|;
operator|++
name|item
control|)
block|{
name|QScriptItem
modifier|&
name|si
init|=
name|layoutData
operator|->
name|items
index|[
name|item
index|]
decl_stmt|;
if|if
condition|(
name|si
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|Tab
condition|)
block|{
name|ensureSpace
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|si
operator|.
name|width
operator|=
name|calculateTabWidth
argument_list|(
name|item
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shape
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|first
operator|&&
name|si
operator|.
name|position
operator|!=
name|line
operator|.
name|from
condition|)
block|{
comment|// that means our x position has to be offset
name|QGlyphLayout
name|glyphs
init|=
name|shapedGlyphs
argument_list|(
operator|&
name|si
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|line
operator|.
name|from
operator|>
name|si
operator|.
name|position
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|line
operator|.
name|from
operator|-
name|si
operator|.
name|position
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|x
operator|-=
name|glyphs
operator|.
name|effectiveAdvance
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|x
operator|+=
name|si
operator|.
name|width
expr_stmt|;
block|}
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_ENABLE_HARFBUZZ_FOR_MAC
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
end_if
begin_function
DECL|function|enableHarfBuzz
specifier|static
name|bool
name|enableHarfBuzz
parameter_list|()
block|{
specifier|static
enum|enum
block|{
name|Yes
block|,
name|No
block|,
name|Unknown
block|}
name|status
init|=
name|Unknown
enum|;
if|if
condition|(
name|status
operator|==
name|Unknown
condition|)
block|{
name|QByteArray
name|v
init|=
name|qgetenv
argument_list|(
literal|"QT_ENABLE_HARFBUZZ"
argument_list|)
decl_stmt|;
name|bool
name|value
init|=
operator|!
name|v
operator|.
name|isEmpty
argument_list|()
operator|&&
name|v
operator|!=
literal|"0"
operator|&&
name|v
operator|!=
literal|"false"
decl_stmt|;
if|if
condition|(
name|value
condition|)
name|status
operator|=
name|Yes
expr_stmt|;
else|else
name|status
operator|=
name|No
expr_stmt|;
block|}
return|return
name|status
operator|==
name|Yes
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|shapeText
name|void
name|QTextEngine
operator|::
name|shapeText
parameter_list|(
name|int
name|item
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|item
operator|<
name|layoutData
operator|->
name|items
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QScriptItem
modifier|&
name|si
init|=
name|layoutData
operator|->
name|items
index|[
name|item
index|]
decl_stmt|;
if|if
condition|(
name|si
operator|.
name|num_glyphs
condition|)
return|return;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_ENABLE_HARFBUZZ_FOR_MAC
argument_list|)
if|if
condition|(
name|enableHarfBuzz
argument_list|()
condition|)
block|{
endif|#
directive|endif
name|QFontEngine
modifier|*
name|actualFontEngine
init|=
name|fontEngine
argument_list|(
name|si
argument_list|,
operator|&
name|si
operator|.
name|ascent
argument_list|,
operator|&
name|si
operator|.
name|descent
argument_list|,
operator|&
name|si
operator|.
name|leading
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualFontEngine
operator|->
name|type
argument_list|()
operator|==
name|QFontEngine
operator|::
name|Multi
condition|)
name|actualFontEngine
operator|=
cast|static_cast
argument_list|<
name|QFontEngineMulti
operator|*
argument_list|>
argument_list|(
name|actualFontEngine
argument_list|)
operator|->
name|engine
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|HB_Face
name|face
init|=
name|actualFontEngine
operator|->
name|harfbuzzFace
argument_list|()
decl_stmt|;
name|HB_Script
name|script
init|=
operator|(
name|HB_Script
operator|)
name|si
operator|.
name|analysis
operator|.
name|script
decl_stmt|;
if|if
condition|(
name|face
operator|->
name|supported_scripts
index|[
name|script
index|]
condition|)
name|shapeTextWithHarfbuzz
argument_list|(
name|item
argument_list|)
expr_stmt|;
else|else
name|shapeTextMac
argument_list|(
name|item
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_ENABLE_HARFBUZZ_FOR_MAC
argument_list|)
block|}
else|else
block|{
name|shapeTextMac
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
name|shapeTextWithCE
argument_list|(
name|item
argument_list|)
expr_stmt|;
else|#
directive|else
name|shapeTextWithHarfbuzz
argument_list|(
name|item
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|si
operator|.
name|width
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|si
operator|.
name|num_glyphs
condition|)
return|return;
name|QGlyphLayout
name|glyphs
init|=
name|shapedGlyphs
argument_list|(
operator|&
name|si
argument_list|)
decl_stmt|;
name|QFont
name|font
init|=
name|this
operator|->
name|font
argument_list|(
name|si
argument_list|)
decl_stmt|;
name|bool
name|letterSpacingIsAbsolute
init|=
name|font
operator|.
name|d
operator|->
name|letterSpacingIsAbsolute
decl_stmt|;
name|QFixed
name|letterSpacing
init|=
name|font
operator|.
name|d
operator|->
name|letterSpacing
decl_stmt|;
name|QFixed
name|wordSpacing
init|=
name|font
operator|.
name|d
operator|->
name|wordSpacing
decl_stmt|;
if|if
condition|(
name|letterSpacingIsAbsolute
operator|&&
name|letterSpacing
operator|.
name|value
argument_list|()
condition|)
name|letterSpacing
operator|*=
name|font
operator|.
name|d
operator|->
name|dpi
operator|/
name|qt_defaultDpiY
argument_list|()
expr_stmt|;
if|if
condition|(
name|letterSpacing
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|si
operator|.
name|num_glyphs
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|glyphs
operator|.
name|attributes
index|[
name|i
index|]
operator|.
name|clusterStart
condition|)
block|{
if|if
condition|(
name|letterSpacingIsAbsolute
condition|)
name|glyphs
operator|.
name|advances_x
index|[
name|i
operator|-
literal|1
index|]
operator|+=
name|letterSpacing
expr_stmt|;
else|else
block|{
name|QFixed
modifier|&
name|advance
init|=
name|glyphs
operator|.
name|advances_x
index|[
name|i
operator|-
literal|1
index|]
decl_stmt|;
name|advance
operator|+=
operator|(
name|letterSpacing
operator|-
literal|100
operator|)
operator|*
name|advance
operator|/
literal|100
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|letterSpacingIsAbsolute
condition|)
name|glyphs
operator|.
name|advances_x
index|[
name|si
operator|.
name|num_glyphs
operator|-
literal|1
index|]
operator|+=
name|letterSpacing
expr_stmt|;
else|else
block|{
name|QFixed
modifier|&
name|advance
init|=
name|glyphs
operator|.
name|advances_x
index|[
name|si
operator|.
name|num_glyphs
operator|-
literal|1
index|]
decl_stmt|;
name|advance
operator|+=
operator|(
name|letterSpacing
operator|-
literal|100
operator|)
operator|*
name|advance
operator|/
literal|100
expr_stmt|;
block|}
block|}
if|if
condition|(
name|wordSpacing
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|si
operator|.
name|num_glyphs
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|glyphs
operator|.
name|attributes
index|[
name|i
index|]
operator|.
name|justification
operator|==
name|HB_Space
operator|||
name|glyphs
operator|.
name|attributes
index|[
name|i
index|]
operator|.
name|justification
operator|==
name|HB_Arabic_Space
condition|)
block|{
comment|// word spacing only gets added once to a consecutive run of spaces (see CSS spec)
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|si
operator|.
name|num_glyphs
operator|||
operator|(
name|glyphs
operator|.
name|attributes
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|justification
operator|!=
name|HB_Space
operator|&&
name|glyphs
operator|.
name|attributes
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|justification
operator|!=
name|HB_Arabic_Space
operator|)
condition|)
name|glyphs
operator|.
name|advances_x
index|[
name|i
index|]
operator|+=
name|wordSpacing
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|si
operator|.
name|num_glyphs
condition|;
operator|++
name|i
control|)
name|si
operator|.
name|width
operator|+=
name|glyphs
operator|.
name|advances_x
index|[
name|i
index|]
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasCaseChange
specifier|static
specifier|inline
name|bool
name|hasCaseChange
parameter_list|(
specifier|const
name|QScriptItem
modifier|&
name|si
parameter_list|)
block|{
return|return
name|si
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|SmallCaps
operator|||
name|si
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|Uppercase
operator|||
name|si
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|Lowercase
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
end_if
begin_comment
comment|//TODO
end_comment
begin_comment
comment|// set the glyph attributes heuristically. Assumes a 1 to 1 relationship between chars and glyphs
end_comment
begin_comment
comment|// and no reordering.
end_comment
begin_comment
comment|// also computes logClusters heuristically
end_comment
begin_function
DECL|function|heuristicSetGlyphAttributes
specifier|static
name|void
name|heuristicSetGlyphAttributes
parameter_list|(
specifier|const
name|QChar
modifier|*
name|uc
parameter_list|,
name|int
name|length
parameter_list|,
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|unsigned
name|short
modifier|*
name|logClusters
parameter_list|,
name|int
name|num_glyphs
parameter_list|)
block|{
comment|// ### zeroWidth and justification are missing here!!!!!
name|Q_UNUSED
argument_list|(
name|num_glyphs
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|num_glyphs
operator|<=
name|length
argument_list|)
expr_stmt|;
comment|//     qDebug("QScriptEngine::heuristicSetGlyphAttributes, num_glyphs=%d", item->num_glyphs);
name|int
name|glyph_pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|uc
index|[
name|i
index|]
operator|.
name|isHighSurrogate
argument_list|()
operator|&&
name|i
operator|<
name|length
operator|-
literal|1
operator|&&
name|uc
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|isLowSurrogate
argument_list|()
condition|)
block|{
name|logClusters
index|[
name|i
index|]
operator|=
name|glyph_pos
expr_stmt|;
name|logClusters
index|[
operator|++
name|i
index|]
operator|=
name|glyph_pos
expr_stmt|;
block|}
else|else
block|{
name|logClusters
index|[
name|i
index|]
operator|=
name|glyph_pos
expr_stmt|;
block|}
operator|++
name|glyph_pos
expr_stmt|;
block|}
comment|// first char in a run is never (treated as) a mark
name|int
name|cStart
init|=
literal|0
decl_stmt|;
specifier|const
name|bool
name|symbolFont
init|=
literal|false
decl_stmt|;
comment|// ####
name|glyphs
operator|->
name|attributes
index|[
literal|0
index|]
operator|.
name|mark
operator|=
literal|false
expr_stmt|;
name|glyphs
operator|->
name|attributes
index|[
literal|0
index|]
operator|.
name|clusterStart
operator|=
literal|true
expr_stmt|;
name|glyphs
operator|->
name|attributes
index|[
literal|0
index|]
operator|.
name|dontPrint
operator|=
operator|(
operator|!
name|symbolFont
operator|&&
name|uc
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|0x00ad
operator|)
operator|||
name|qIsControlChar
argument_list|(
name|uc
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|int
name|lastCat
init|=
name|QChar
operator|::
name|category
argument_list|(
name|uc
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|logClusters
index|[
name|i
index|]
operator|==
name|pos
condition|)
comment|// same glyph
continue|continue;
operator|++
name|pos
expr_stmt|;
while|while
condition|(
name|pos
operator|<
name|logClusters
index|[
name|i
index|]
condition|)
block|{
name|glyphs
index|[
name|pos
index|]
operator|.
name|attributes
operator|=
name|glyphs
index|[
name|pos
operator|-
literal|1
index|]
operator|.
name|attributes
expr_stmt|;
operator|++
name|pos
expr_stmt|;
block|}
comment|// hide soft-hyphens by default
if|if
condition|(
operator|(
operator|!
name|symbolFont
operator|&&
name|uc
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|0x00ad
operator|)
operator|||
name|qIsControlChar
argument_list|(
name|uc
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
argument_list|)
condition|)
name|glyphs
operator|->
name|attributes
index|[
name|pos
index|]
operator|.
name|dontPrint
operator|=
literal|true
expr_stmt|;
specifier|const
name|QUnicodeTables
operator|::
name|Properties
modifier|*
name|prop
init|=
name|QUnicodeTables
operator|::
name|properties
argument_list|(
name|uc
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|cat
init|=
name|prop
operator|->
name|category
decl_stmt|;
if|if
condition|(
name|cat
operator|!=
name|QChar
operator|::
name|Mark_NonSpacing
condition|)
block|{
name|glyphs
operator|->
name|attributes
index|[
name|pos
index|]
operator|.
name|mark
operator|=
literal|false
expr_stmt|;
name|glyphs
operator|->
name|attributes
index|[
name|pos
index|]
operator|.
name|clusterStart
operator|=
literal|true
expr_stmt|;
name|glyphs
operator|->
name|attributes
index|[
name|pos
index|]
operator|.
name|combiningClass
operator|=
literal|0
expr_stmt|;
name|cStart
operator|=
name|logClusters
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|int
name|cmb
init|=
name|prop
operator|->
name|combiningClass
decl_stmt|;
if|if
condition|(
name|cmb
operator|==
literal|0
condition|)
block|{
comment|// Fix 0 combining classes
if|if
condition|(
operator|(
name|uc
index|[
name|pos
index|]
operator|.
name|unicode
argument_list|()
operator|&
literal|0xff00
operator|)
operator|==
literal|0x0e00
condition|)
block|{
comment|// thai or lao
name|unsigned
name|char
name|col
init|=
name|uc
index|[
name|pos
index|]
operator|.
name|cell
argument_list|()
decl_stmt|;
if|if
condition|(
name|col
operator|==
literal|0x31
operator|||
name|col
operator|==
literal|0x34
operator|||
name|col
operator|==
literal|0x35
operator|||
name|col
operator|==
literal|0x36
operator|||
name|col
operator|==
literal|0x37
operator|||
name|col
operator|==
literal|0x47
operator|||
name|col
operator|==
literal|0x4c
operator|||
name|col
operator|==
literal|0x4d
operator|||
name|col
operator|==
literal|0x4e
condition|)
block|{
name|cmb
operator|=
name|QChar
operator|::
name|Combining_AboveRight
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|col
operator|==
literal|0xb1
operator|||
name|col
operator|==
literal|0xb4
operator|||
name|col
operator|==
literal|0xb5
operator|||
name|col
operator|==
literal|0xb6
operator|||
name|col
operator|==
literal|0xb7
operator|||
name|col
operator|==
literal|0xbb
operator|||
name|col
operator|==
literal|0xcc
operator|||
name|col
operator|==
literal|0xcd
condition|)
block|{
name|cmb
operator|=
name|QChar
operator|::
name|Combining_Above
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|col
operator|==
literal|0xbc
condition|)
block|{
name|cmb
operator|=
name|QChar
operator|::
name|Combining_Below
expr_stmt|;
block|}
block|}
block|}
name|glyphs
operator|->
name|attributes
index|[
name|pos
index|]
operator|.
name|mark
operator|=
literal|true
expr_stmt|;
name|glyphs
operator|->
name|attributes
index|[
name|pos
index|]
operator|.
name|clusterStart
operator|=
literal|false
expr_stmt|;
name|glyphs
operator|->
name|attributes
index|[
name|pos
index|]
operator|.
name|combiningClass
operator|=
name|cmb
expr_stmt|;
name|logClusters
index|[
name|i
index|]
operator|=
name|cStart
expr_stmt|;
name|glyphs
operator|->
name|advances_x
index|[
name|pos
index|]
operator|=
literal|0
expr_stmt|;
name|glyphs
operator|->
name|advances_y
index|[
name|pos
index|]
operator|=
literal|0
expr_stmt|;
block|}
comment|// one gets an inter character justification point if the current char is not a non spacing mark.
comment|// as then the current char belongs to the last one and one gets a space justification point
comment|// after the space char.
if|if
condition|(
name|lastCat
operator|==
name|QChar
operator|::
name|Separator_Space
condition|)
name|glyphs
operator|->
name|attributes
index|[
name|pos
operator|-
literal|1
index|]
operator|.
name|justification
operator|=
name|HB_Space
expr_stmt|;
elseif|else
if|if
condition|(
name|cat
operator|!=
name|QChar
operator|::
name|Mark_NonSpacing
condition|)
name|glyphs
operator|->
name|attributes
index|[
name|pos
operator|-
literal|1
index|]
operator|.
name|justification
operator|=
name|HB_Character
expr_stmt|;
else|else
name|glyphs
operator|->
name|attributes
index|[
name|pos
operator|-
literal|1
index|]
operator|.
name|justification
operator|=
name|HB_NoJustification
expr_stmt|;
name|lastCat
operator|=
name|cat
expr_stmt|;
block|}
name|pos
operator|=
name|logClusters
index|[
name|length
operator|-
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|lastCat
operator|==
name|QChar
operator|::
name|Separator_Space
condition|)
name|glyphs
operator|->
name|attributes
index|[
name|pos
index|]
operator|.
name|justification
operator|=
name|HB_Space
expr_stmt|;
else|else
name|glyphs
operator|->
name|attributes
index|[
name|pos
index|]
operator|.
name|justification
operator|=
name|HB_Character
expr_stmt|;
block|}
end_function
begin_function
DECL|function|shapeTextWithCE
name|void
name|QTextEngine
operator|::
name|shapeTextWithCE
parameter_list|(
name|int
name|item
parameter_list|)
specifier|const
block|{
name|QScriptItem
modifier|&
name|si
init|=
name|layoutData
operator|->
name|items
index|[
name|item
index|]
decl_stmt|;
name|si
operator|.
name|glyph_data_offset
operator|=
name|layoutData
operator|->
name|used
expr_stmt|;
name|QFontEngine
modifier|*
name|fe
init|=
name|fontEngine
argument_list|(
name|si
argument_list|,
operator|&
name|si
operator|.
name|ascent
argument_list|,
operator|&
name|si
operator|.
name|descent
argument_list|,
operator|&
name|si
operator|.
name|leading
argument_list|)
decl_stmt|;
name|QTextEngine
operator|::
name|ShaperFlags
name|flags
decl_stmt|;
if|if
condition|(
name|si
operator|.
name|analysis
operator|.
name|bidiLevel
operator|%
literal|2
condition|)
name|flags
operator||=
name|RightToLeft
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|useDesignMetrics
argument_list|()
condition|)
name|flags
operator||=
name|DesignMetrics
expr_stmt|;
comment|// pre-initialize char attributes
if|if
condition|(
operator|!
name|attributes
argument_list|()
condition|)
return|return;
specifier|const
name|int
name|len
init|=
name|length
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|int
name|num_glyphs
init|=
name|length
argument_list|(
name|item
argument_list|)
decl_stmt|;
specifier|const
name|QChar
modifier|*
name|str
init|=
name|layoutData
operator|->
name|string
operator|.
name|unicode
argument_list|()
operator|+
name|si
operator|.
name|position
decl_stmt|;
name|ushort
name|upperCased
index|[
literal|256
index|]
decl_stmt|;
if|if
condition|(
name|hasCaseChange
argument_list|(
name|si
argument_list|)
condition|)
block|{
name|ushort
modifier|*
name|uc
init|=
name|upperCased
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|256
condition|)
name|uc
operator|=
operator|new
name|ushort
index|[
name|len
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|si
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|Lowercase
condition|)
name|uc
index|[
name|i
index|]
operator|=
name|str
index|[
name|i
index|]
operator|.
name|toLower
argument_list|()
operator|.
name|unicode
argument_list|()
expr_stmt|;
else|else
name|uc
index|[
name|i
index|]
operator|=
name|str
index|[
name|i
index|]
operator|.
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
expr_stmt|;
block|}
name|str
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|QChar
operator|*
argument_list|>
argument_list|(
name|uc
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|!
name|ensureSpace
argument_list|(
name|num_glyphs
argument_list|)
condition|)
block|{
comment|// If str is converted to uppercase/lowercase form with a new buffer,
comment|// we need to delete that buffer before return for error
specifier|const
name|ushort
modifier|*
name|uc
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ushort
operator|*
argument_list|>
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasCaseChange
argument_list|(
name|si
argument_list|)
operator|&&
name|uc
operator|!=
name|upperCased
condition|)
operator|delete
index|[]
name|uc
expr_stmt|;
return|return;
block|}
name|num_glyphs
operator|=
name|layoutData
operator|->
name|glyphLayout
operator|.
name|numGlyphs
operator|-
name|layoutData
operator|->
name|used
expr_stmt|;
name|QGlyphLayout
name|g
init|=
name|availableGlyphs
argument_list|(
operator|&
name|si
argument_list|)
decl_stmt|;
name|unsigned
name|short
modifier|*
name|log_clusters
init|=
name|logClusters
argument_list|(
operator|&
name|si
argument_list|)
decl_stmt|;
if|if
condition|(
name|fe
operator|->
name|stringToCMap
argument_list|(
name|str
argument_list|,
name|len
argument_list|,
operator|&
name|g
argument_list|,
operator|&
name|num_glyphs
argument_list|,
name|flags
argument_list|)
condition|)
block|{
name|heuristicSetGlyphAttributes
argument_list|(
name|str
argument_list|,
name|len
argument_list|,
operator|&
name|g
argument_list|,
name|log_clusters
argument_list|,
name|num_glyphs
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|si
operator|.
name|num_glyphs
operator|=
name|num_glyphs
expr_stmt|;
name|layoutData
operator|->
name|used
operator|+=
name|si
operator|.
name|num_glyphs
expr_stmt|;
specifier|const
name|ushort
modifier|*
name|uc
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ushort
operator|*
argument_list|>
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasCaseChange
argument_list|(
name|si
argument_list|)
operator|&&
name|uc
operator|!=
name|upperCased
condition|)
operator|delete
index|[]
name|uc
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|moveGlyphData
specifier|static
specifier|inline
name|void
name|moveGlyphData
parameter_list|(
specifier|const
name|QGlyphLayout
modifier|&
name|destination
parameter_list|,
specifier|const
name|QGlyphLayout
modifier|&
name|source
parameter_list|,
name|int
name|num
parameter_list|)
block|{
if|if
condition|(
name|num
operator|>
literal|0
operator|&&
name|destination
operator|.
name|glyphs
operator|!=
name|source
operator|.
name|glyphs
condition|)
block|{
name|memmove
argument_list|(
name|destination
operator|.
name|glyphs
argument_list|,
name|source
operator|.
name|glyphs
argument_list|,
name|num
operator|*
sizeof|sizeof
argument_list|(
name|HB_Glyph
argument_list|)
argument_list|)
expr_stmt|;
name|memmove
argument_list|(
name|destination
operator|.
name|attributes
argument_list|,
name|source
operator|.
name|attributes
argument_list|,
name|num
operator|*
sizeof|sizeof
argument_list|(
name|HB_GlyphAttributes
argument_list|)
argument_list|)
expr_stmt|;
name|memmove
argument_list|(
name|destination
operator|.
name|advances_x
argument_list|,
name|source
operator|.
name|advances_x
argument_list|,
name|num
operator|*
sizeof|sizeof
argument_list|(
name|HB_Fixed
argument_list|)
argument_list|)
expr_stmt|;
name|memmove
argument_list|(
name|destination
operator|.
name|offsets
argument_list|,
name|source
operator|.
name|offsets
argument_list|,
name|num
operator|*
sizeof|sizeof
argument_list|(
name|HB_FixedPoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/// take the item from layoutData->items and
end_comment
begin_function
DECL|function|shapeTextWithHarfbuzz
name|void
name|QTextEngine
operator|::
name|shapeTextWithHarfbuzz
parameter_list|(
name|int
name|item
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|HB_Fixed
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|QFixed
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|HB_FixedPoint
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|QFixedPoint
argument_list|)
argument_list|)
expr_stmt|;
name|QScriptItem
modifier|&
name|si
init|=
name|layoutData
operator|->
name|items
index|[
name|item
index|]
decl_stmt|;
name|si
operator|.
name|glyph_data_offset
operator|=
name|layoutData
operator|->
name|used
expr_stmt|;
name|QFontEngine
modifier|*
name|font
init|=
name|fontEngine
argument_list|(
name|si
argument_list|,
operator|&
name|si
operator|.
name|ascent
argument_list|,
operator|&
name|si
operator|.
name|descent
argument_list|,
operator|&
name|si
operator|.
name|leading
argument_list|)
decl_stmt|;
name|bool
name|kerningEnabled
init|=
name|this
operator|->
name|font
argument_list|(
name|si
argument_list|)
operator|.
name|d
operator|->
name|kerning
decl_stmt|;
name|HB_ShaperItem
name|entire_shaper_item
decl_stmt|;
name|qMemSet
argument_list|(
operator|&
name|entire_shaper_item
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|entire_shaper_item
argument_list|)
argument_list|)
expr_stmt|;
name|entire_shaper_item
operator|.
name|string
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|HB_UChar16
operator|*
argument_list|>
argument_list|(
name|layoutData
operator|->
name|string
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|entire_shaper_item
operator|.
name|stringLength
operator|=
name|layoutData
operator|->
name|string
operator|.
name|length
argument_list|()
expr_stmt|;
name|entire_shaper_item
operator|.
name|item
operator|.
name|script
operator|=
operator|(
name|HB_Script
operator|)
name|si
operator|.
name|analysis
operator|.
name|script
expr_stmt|;
name|entire_shaper_item
operator|.
name|item
operator|.
name|pos
operator|=
name|si
operator|.
name|position
expr_stmt|;
name|entire_shaper_item
operator|.
name|item
operator|.
name|length
operator|=
name|length
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|entire_shaper_item
operator|.
name|item
operator|.
name|bidiLevel
operator|=
name|si
operator|.
name|analysis
operator|.
name|bidiLevel
expr_stmt|;
name|HB_UChar16
name|upperCased
index|[
literal|256
index|]
decl_stmt|;
comment|// XXX what about making this 4096, so we don't have to extend it ever.
if|if
condition|(
name|hasCaseChange
argument_list|(
name|si
argument_list|)
condition|)
block|{
name|HB_UChar16
modifier|*
name|uc
init|=
name|upperCased
decl_stmt|;
if|if
condition|(
name|entire_shaper_item
operator|.
name|item
operator|.
name|length
operator|>
literal|256
condition|)
name|uc
operator|=
operator|new
name|HB_UChar16
index|[
name|entire_shaper_item
operator|.
name|item
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entire_shaper_item
operator|.
name|item
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|si
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|Lowercase
condition|)
name|uc
index|[
name|i
index|]
operator|=
name|QChar
operator|::
name|toLower
argument_list|(
name|entire_shaper_item
operator|.
name|string
index|[
name|si
operator|.
name|position
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
else|else
name|uc
index|[
name|i
index|]
operator|=
name|QChar
operator|::
name|toUpper
argument_list|(
name|entire_shaper_item
operator|.
name|string
index|[
name|si
operator|.
name|position
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|entire_shaper_item
operator|.
name|item
operator|.
name|pos
operator|=
literal|0
expr_stmt|;
name|entire_shaper_item
operator|.
name|string
operator|=
name|uc
expr_stmt|;
name|entire_shaper_item
operator|.
name|stringLength
operator|=
name|entire_shaper_item
operator|.
name|item
operator|.
name|length
expr_stmt|;
block|}
name|entire_shaper_item
operator|.
name|shaperFlags
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|kerningEnabled
condition|)
name|entire_shaper_item
operator|.
name|shaperFlags
operator||=
name|HB_ShaperFlag_NoKerning
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|useDesignMetrics
argument_list|()
condition|)
name|entire_shaper_item
operator|.
name|shaperFlags
operator||=
name|HB_ShaperFlag_UseDesignMetrics
expr_stmt|;
name|entire_shaper_item
operator|.
name|num_glyphs
operator|=
name|qMax
argument_list|(
name|layoutData
operator|->
name|glyphLayout
operator|.
name|numGlyphs
operator|-
name|layoutData
operator|->
name|used
argument_list|,
name|int
argument_list|(
name|entire_shaper_item
operator|.
name|item
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ensureSpace
argument_list|(
name|entire_shaper_item
operator|.
name|num_glyphs
argument_list|)
condition|)
block|{
if|if
condition|(
name|hasCaseChange
argument_list|(
name|si
argument_list|)
condition|)
operator|delete
index|[]
cast|const_cast
argument_list|<
name|HB_UChar16
operator|*
argument_list|>
argument_list|(
name|entire_shaper_item
operator|.
name|string
argument_list|)
expr_stmt|;
return|return;
block|}
name|QGlyphLayout
name|initialGlyphs
init|=
name|availableGlyphs
argument_list|(
operator|&
name|si
argument_list|)
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|entire_shaper_item
operator|.
name|num_glyphs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|stringToGlyphs
argument_list|(
operator|&
name|entire_shaper_item
argument_list|,
operator|&
name|initialGlyphs
argument_list|,
name|font
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|ensureSpace
argument_list|(
name|entire_shaper_item
operator|.
name|num_glyphs
argument_list|)
condition|)
block|{
if|if
condition|(
name|hasCaseChange
argument_list|(
name|si
argument_list|)
condition|)
operator|delete
index|[]
cast|const_cast
argument_list|<
name|HB_UChar16
operator|*
argument_list|>
argument_list|(
name|entire_shaper_item
operator|.
name|string
argument_list|)
expr_stmt|;
return|return;
block|}
name|initialGlyphs
operator|=
name|availableGlyphs
argument_list|(
operator|&
name|si
argument_list|)
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|entire_shaper_item
operator|.
name|num_glyphs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|stringToGlyphs
argument_list|(
operator|&
name|entire_shaper_item
argument_list|,
operator|&
name|initialGlyphs
argument_list|,
name|font
argument_list|)
condition|)
block|{
comment|// ############ if this happens there's a bug in the fontengine
if|if
condition|(
name|hasCaseChange
argument_list|(
name|si
argument_list|)
operator|&&
name|entire_shaper_item
operator|.
name|string
operator|!=
name|upperCased
condition|)
operator|delete
index|[]
cast|const_cast
argument_list|<
name|HB_UChar16
operator|*
argument_list|>
argument_list|(
name|entire_shaper_item
operator|.
name|string
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// split up the item into parts that come from different font engines.
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
name|itemBoundaries
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// k * 2 entries, array[k] == index in string, array[k + 1] == index in glyphs
name|itemBoundaries
index|[
literal|0
index|]
operator|=
name|entire_shaper_item
operator|.
name|item
operator|.
name|pos
expr_stmt|;
name|itemBoundaries
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|font
operator|->
name|type
argument_list|()
operator|==
name|QFontEngine
operator|::
name|Multi
condition|)
block|{
name|uint
name|lastEngine
init|=
literal|0
decl_stmt|;
name|int
name|charIdx
init|=
name|entire_shaper_item
operator|.
name|item
operator|.
name|pos
decl_stmt|;
specifier|const
name|int
name|stringEnd
init|=
name|charIdx
operator|+
name|entire_shaper_item
operator|.
name|item
operator|.
name|length
decl_stmt|;
for|for
control|(
name|quint32
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entire_shaper_item
operator|.
name|num_glyphs
condition|;
operator|++
name|i
operator|,
operator|++
name|charIdx
control|)
block|{
name|uint
name|engineIdx
init|=
name|initialGlyphs
operator|.
name|glyphs
index|[
name|i
index|]
operator|>>
literal|24
decl_stmt|;
if|if
condition|(
name|engineIdx
operator|!=
name|lastEngine
operator|&&
name|i
operator|>
literal|0
condition|)
block|{
name|itemBoundaries
operator|.
name|append
argument_list|(
name|charIdx
argument_list|)
expr_stmt|;
name|itemBoundaries
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|lastEngine
operator|=
name|engineIdx
expr_stmt|;
if|if
condition|(
name|HB_IsHighSurrogate
argument_list|(
name|entire_shaper_item
operator|.
name|string
index|[
name|charIdx
index|]
argument_list|)
operator|&&
name|charIdx
operator|<
name|stringEnd
operator|-
literal|1
operator|&&
name|HB_IsLowSurrogate
argument_list|(
name|entire_shaper_item
operator|.
name|string
index|[
name|charIdx
operator|+
literal|1
index|]
argument_list|)
condition|)
operator|++
name|charIdx
expr_stmt|;
block|}
block|}
name|int
name|remaining_glyphs
init|=
name|entire_shaper_item
operator|.
name|num_glyphs
decl_stmt|;
name|int
name|glyph_pos
init|=
literal|0
decl_stmt|;
comment|// for each item shape using harfbuzz and store the results in our layoutData's glyphs array.
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|itemBoundaries
operator|.
name|size
argument_list|()
condition|;
name|k
operator|+=
literal|2
control|)
block|{
comment|// for the +2, see the comment at the definition of itemBoundaries
name|HB_ShaperItem
name|shaper_item
init|=
name|entire_shaper_item
decl_stmt|;
name|shaper_item
operator|.
name|item
operator|.
name|pos
operator|=
name|itemBoundaries
index|[
name|k
index|]
expr_stmt|;
if|if
condition|(
name|k
operator|<
name|itemBoundaries
operator|.
name|size
argument_list|()
operator|-
literal|3
condition|)
block|{
name|shaper_item
operator|.
name|item
operator|.
name|length
operator|=
name|itemBoundaries
index|[
name|k
operator|+
literal|2
index|]
operator|-
name|shaper_item
operator|.
name|item
operator|.
name|pos
expr_stmt|;
name|shaper_item
operator|.
name|num_glyphs
operator|=
name|itemBoundaries
index|[
name|k
operator|+
literal|3
index|]
operator|-
name|itemBoundaries
index|[
name|k
operator|+
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
comment|// last combo in the list, avoid out of bounds access.
name|shaper_item
operator|.
name|item
operator|.
name|length
operator|-=
name|shaper_item
operator|.
name|item
operator|.
name|pos
operator|-
name|entire_shaper_item
operator|.
name|item
operator|.
name|pos
expr_stmt|;
name|shaper_item
operator|.
name|num_glyphs
operator|-=
name|itemBoundaries
index|[
name|k
operator|+
literal|1
index|]
expr_stmt|;
block|}
name|shaper_item
operator|.
name|initialGlyphCount
operator|=
name|shaper_item
operator|.
name|num_glyphs
expr_stmt|;
if|if
condition|(
name|shaper_item
operator|.
name|num_glyphs
operator|<
name|shaper_item
operator|.
name|item
operator|.
name|length
condition|)
name|shaper_item
operator|.
name|num_glyphs
operator|=
name|shaper_item
operator|.
name|item
operator|.
name|length
expr_stmt|;
name|QFontEngine
modifier|*
name|actualFontEngine
init|=
name|font
decl_stmt|;
name|uint
name|engineIdx
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|font
operator|->
name|type
argument_list|()
operator|==
name|QFontEngine
operator|::
name|Multi
condition|)
block|{
name|engineIdx
operator|=
name|uint
argument_list|(
name|availableGlyphs
argument_list|(
operator|&
name|si
argument_list|)
operator|.
name|glyphs
index|[
name|glyph_pos
index|]
operator|>>
literal|24
argument_list|)
expr_stmt|;
name|actualFontEngine
operator|=
cast|static_cast
argument_list|<
name|QFontEngineMulti
operator|*
argument_list|>
argument_list|(
name|font
argument_list|)
operator|->
name|engine
argument_list|(
name|engineIdx
argument_list|)
expr_stmt|;
block|}
name|si
operator|.
name|ascent
operator|=
name|qMax
argument_list|(
name|actualFontEngine
operator|->
name|ascent
argument_list|()
argument_list|,
name|si
operator|.
name|ascent
argument_list|)
expr_stmt|;
name|si
operator|.
name|descent
operator|=
name|qMax
argument_list|(
name|actualFontEngine
operator|->
name|descent
argument_list|()
argument_list|,
name|si
operator|.
name|descent
argument_list|)
expr_stmt|;
name|si
operator|.
name|leading
operator|=
name|qMax
argument_list|(
name|actualFontEngine
operator|->
name|leading
argument_list|()
argument_list|,
name|si
operator|.
name|leading
argument_list|)
expr_stmt|;
name|shaper_item
operator|.
name|font
operator|=
name|actualFontEngine
operator|->
name|harfbuzzFont
argument_list|()
expr_stmt|;
name|shaper_item
operator|.
name|face
operator|=
name|actualFontEngine
operator|->
name|harfbuzzFace
argument_list|()
expr_stmt|;
name|shaper_item
operator|.
name|glyphIndicesPresent
operator|=
literal|true
expr_stmt|;
name|remaining_glyphs
operator|-=
name|shaper_item
operator|.
name|initialGlyphCount
expr_stmt|;
do|do
block|{
if|if
condition|(
operator|!
name|ensureSpace
argument_list|(
name|glyph_pos
operator|+
name|shaper_item
operator|.
name|num_glyphs
operator|+
name|remaining_glyphs
argument_list|)
condition|)
block|{
if|if
condition|(
name|hasCaseChange
argument_list|(
name|si
argument_list|)
condition|)
operator|delete
index|[]
cast|const_cast
argument_list|<
name|HB_UChar16
operator|*
argument_list|>
argument_list|(
name|entire_shaper_item
operator|.
name|string
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|QGlyphLayout
name|g
init|=
name|availableGlyphs
argument_list|(
operator|&
name|si
argument_list|)
operator|.
name|mid
argument_list|(
name|glyph_pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|shaper_item
operator|.
name|num_glyphs
operator|>
name|shaper_item
operator|.
name|item
operator|.
name|length
condition|)
name|moveGlyphData
argument_list|(
name|g
operator|.
name|mid
argument_list|(
name|shaper_item
operator|.
name|num_glyphs
argument_list|)
argument_list|,
name|g
operator|.
name|mid
argument_list|(
name|shaper_item
operator|.
name|initialGlyphCount
argument_list|)
argument_list|,
name|remaining_glyphs
argument_list|)
expr_stmt|;
name|shaper_item
operator|.
name|glyphs
operator|=
name|g
operator|.
name|glyphs
expr_stmt|;
name|shaper_item
operator|.
name|attributes
operator|=
name|g
operator|.
name|attributes
expr_stmt|;
name|shaper_item
operator|.
name|advances
operator|=
cast|reinterpret_cast
argument_list|<
name|HB_Fixed
operator|*
argument_list|>
argument_list|(
name|g
operator|.
name|advances_x
argument_list|)
expr_stmt|;
name|shaper_item
operator|.
name|offsets
operator|=
cast|reinterpret_cast
argument_list|<
name|HB_FixedPoint
operator|*
argument_list|>
argument_list|(
name|g
operator|.
name|offsets
argument_list|)
expr_stmt|;
if|if
condition|(
name|shaper_item
operator|.
name|glyphIndicesPresent
condition|)
block|{
for|for
control|(
name|hb_uint32
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shaper_item
operator|.
name|initialGlyphCount
condition|;
operator|++
name|i
control|)
name|shaper_item
operator|.
name|glyphs
index|[
name|i
index|]
operator|&=
literal|0x00ffffff
expr_stmt|;
block|}
name|shaper_item
operator|.
name|log_clusters
operator|=
name|logClusters
argument_list|(
operator|&
name|si
argument_list|)
operator|+
name|shaper_item
operator|.
name|item
operator|.
name|pos
operator|-
name|entire_shaper_item
operator|.
name|item
operator|.
name|pos
expr_stmt|;
comment|//          qDebug("    .. num_glyphs=%d, used=%d, item.num_glyphs=%d", num_glyphs, used, shaper_item.num_glyphs);
block|}
do|while
condition|(
operator|!
name|qShapeItem
argument_list|(
operator|&
name|shaper_item
argument_list|)
condition|)
do|;
comment|// this does the actual shaping via harfbuzz.
name|QGlyphLayout
name|g
init|=
name|availableGlyphs
argument_list|(
operator|&
name|si
argument_list|)
operator|.
name|mid
argument_list|(
name|glyph_pos
argument_list|,
name|shaper_item
operator|.
name|num_glyphs
argument_list|)
decl_stmt|;
name|moveGlyphData
argument_list|(
name|g
operator|.
name|mid
argument_list|(
name|shaper_item
operator|.
name|num_glyphs
argument_list|)
argument_list|,
name|g
operator|.
name|mid
argument_list|(
name|shaper_item
operator|.
name|initialGlyphCount
argument_list|)
argument_list|,
name|remaining_glyphs
argument_list|)
expr_stmt|;
for|for
control|(
name|hb_uint32
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shaper_item
operator|.
name|num_glyphs
condition|;
operator|++
name|i
control|)
name|g
operator|.
name|glyphs
index|[
name|i
index|]
operator|=
name|g
operator|.
name|glyphs
index|[
name|i
index|]
operator||
operator|(
name|engineIdx
operator|<<
literal|24
operator|)
expr_stmt|;
for|for
control|(
name|hb_uint32
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shaper_item
operator|.
name|item
operator|.
name|length
condition|;
operator|++
name|i
control|)
name|shaper_item
operator|.
name|log_clusters
index|[
name|i
index|]
operator|+=
name|glyph_pos
expr_stmt|;
if|if
condition|(
name|kerningEnabled
operator|&&
operator|!
name|shaper_item
operator|.
name|kerning_applied
condition|)
name|font
operator|->
name|doKerning
argument_list|(
operator|&
name|g
argument_list|,
name|option
operator|.
name|useDesignMetrics
argument_list|()
condition|?
name|QFlag
argument_list|(
name|QTextEngine
operator|::
name|DesignMetrics
argument_list|)
else|:
name|QFlag
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|glyph_pos
operator|+=
name|shaper_item
operator|.
name|num_glyphs
expr_stmt|;
block|}
comment|//     qDebug("    -> item: script=%d num_glyphs=%d", shaper_item.script, shaper_item.num_glyphs);
name|si
operator|.
name|num_glyphs
operator|=
name|glyph_pos
expr_stmt|;
name|layoutData
operator|->
name|used
operator|+=
name|si
operator|.
name|num_glyphs
expr_stmt|;
if|if
condition|(
name|hasCaseChange
argument_list|(
name|si
argument_list|)
operator|&&
name|entire_shaper_item
operator|.
name|string
operator|!=
name|upperCased
condition|)
operator|delete
index|[]
cast|const_cast
argument_list|<
name|HB_UChar16
operator|*
argument_list|>
argument_list|(
name|entire_shaper_item
operator|.
name|string
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
specifier|static
name|void
name|init
parameter_list|(
name|QTextEngine
modifier|*
name|e
parameter_list|)
block|{
name|e
operator|->
name|ignoreBidi
operator|=
literal|false
expr_stmt|;
name|e
operator|->
name|cacheGlyphs
operator|=
literal|false
expr_stmt|;
name|e
operator|->
name|forceJustification
operator|=
literal|false
expr_stmt|;
name|e
operator|->
name|visualMovement
operator|=
literal|false
expr_stmt|;
name|e
operator|->
name|layoutData
operator|=
literal|0
expr_stmt|;
name|e
operator|->
name|minWidth
operator|=
literal|0
expr_stmt|;
name|e
operator|->
name|maxWidth
operator|=
literal|0
expr_stmt|;
name|e
operator|->
name|underlinePositions
operator|=
literal|0
expr_stmt|;
name|e
operator|->
name|specialData
operator|=
literal|0
expr_stmt|;
name|e
operator|->
name|stackEngine
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QTextEngine
name|QTextEngine
operator|::
name|QTextEngine
parameter_list|()
block|{
name|init
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QTextEngine
name|QTextEngine
operator|::
name|QTextEngine
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
specifier|const
name|QFont
modifier|&
name|f
parameter_list|)
member_init_list|:
name|text
argument_list|(
name|str
argument_list|)
member_init_list|,
name|fnt
argument_list|(
name|f
argument_list|)
block|{
name|init
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QTextEngine
name|QTextEngine
operator|::
name|~
name|QTextEngine
parameter_list|()
block|{
if|if
condition|(
operator|!
name|stackEngine
condition|)
operator|delete
name|layoutData
expr_stmt|;
operator|delete
name|specialData
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|attributes
specifier|const
name|HB_CharAttributes
modifier|*
name|QTextEngine
operator|::
name|attributes
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|layoutData
operator|&&
name|layoutData
operator|->
name|haveCharAttributes
condition|)
return|return
operator|(
name|HB_CharAttributes
operator|*
operator|)
name|layoutData
operator|->
name|memory
return|;
name|itemize
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|ensureSpace
argument_list|(
name|layoutData
operator|->
name|string
operator|.
name|length
argument_list|()
argument_list|)
condition|)
return|return
name|NULL
return|;
name|QVarLengthArray
argument_list|<
name|HB_ScriptItem
argument_list|>
name|hbScriptItems
argument_list|(
name|layoutData
operator|->
name|items
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|layoutData
operator|->
name|items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QScriptItem
modifier|&
name|si
init|=
name|layoutData
operator|->
name|items
index|[
name|i
index|]
decl_stmt|;
name|hbScriptItems
index|[
name|i
index|]
operator|.
name|pos
operator|=
name|si
operator|.
name|position
expr_stmt|;
name|hbScriptItems
index|[
name|i
index|]
operator|.
name|length
operator|=
name|length
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|hbScriptItems
index|[
name|i
index|]
operator|.
name|bidiLevel
operator|=
name|si
operator|.
name|analysis
operator|.
name|bidiLevel
expr_stmt|;
name|hbScriptItems
index|[
name|i
index|]
operator|.
name|script
operator|=
operator|(
name|HB_Script
operator|)
name|si
operator|.
name|analysis
operator|.
name|script
expr_stmt|;
block|}
name|qGetCharAttributes
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|HB_UChar16
operator|*
argument_list|>
argument_list|(
name|layoutData
operator|->
name|string
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|layoutData
operator|->
name|string
operator|.
name|length
argument_list|()
argument_list|,
name|hbScriptItems
operator|.
name|data
argument_list|()
argument_list|,
name|hbScriptItems
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|HB_CharAttributes
operator|*
operator|)
name|layoutData
operator|->
name|memory
argument_list|)
expr_stmt|;
name|layoutData
operator|->
name|haveCharAttributes
operator|=
literal|true
expr_stmt|;
return|return
operator|(
name|HB_CharAttributes
operator|*
operator|)
name|layoutData
operator|->
name|memory
return|;
block|}
end_function
begin_function
DECL|function|shape
name|void
name|QTextEngine
operator|::
name|shape
parameter_list|(
name|int
name|item
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|layoutData
operator|->
name|items
index|[
name|item
index|]
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|Object
condition|)
block|{
name|ensureSpace
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|block
operator|.
name|docHandle
argument_list|()
condition|)
block|{
name|QTextFormat
name|format
init|=
name|formats
argument_list|()
operator|->
name|format
argument_list|(
name|formatIndex
argument_list|(
operator|&
name|layoutData
operator|->
name|items
index|[
name|item
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|docLayout
argument_list|()
operator|->
name|resizeInlineObject
argument_list|(
name|QTextInlineObject
argument_list|(
name|item
argument_list|,
cast|const_cast
argument_list|<
name|QTextEngine
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|,
name|layoutData
operator|->
name|items
index|[
name|item
index|]
operator|.
name|position
operator|+
name|block
operator|.
name|position
argument_list|()
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|layoutData
operator|->
name|items
index|[
name|item
index|]
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|Tab
condition|)
block|{
comment|// set up at least the ascent/descent/leading of the script item for the tab
name|fontEngine
argument_list|(
name|layoutData
operator|->
name|items
index|[
name|item
index|]
argument_list|,
operator|&
name|layoutData
operator|->
name|items
index|[
name|item
index|]
operator|.
name|ascent
argument_list|,
operator|&
name|layoutData
operator|->
name|items
index|[
name|item
index|]
operator|.
name|descent
argument_list|,
operator|&
name|layoutData
operator|->
name|items
index|[
name|item
index|]
operator|.
name|leading
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shapeText
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|releaseCachedFontEngine
specifier|static
specifier|inline
name|void
name|releaseCachedFontEngine
parameter_list|(
name|QFontEngine
modifier|*
name|fontEngine
parameter_list|)
block|{
if|if
condition|(
name|fontEngine
condition|)
block|{
name|fontEngine
operator|->
name|ref
operator|.
name|deref
argument_list|()
expr_stmt|;
if|if
condition|(
name|fontEngine
operator|->
name|cache_count
operator|==
literal|0
operator|&&
name|fontEngine
operator|->
name|ref
operator|==
literal|0
condition|)
operator|delete
name|fontEngine
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|invalidate
name|void
name|QTextEngine
operator|::
name|invalidate
parameter_list|()
block|{
name|freeMemory
argument_list|()
expr_stmt|;
name|minWidth
operator|=
literal|0
expr_stmt|;
name|maxWidth
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|specialData
condition|)
name|specialData
operator|->
name|resolvedFormatIndices
operator|.
name|clear
argument_list|()
expr_stmt|;
name|releaseCachedFontEngine
argument_list|(
name|feCache
operator|.
name|prevFontEngine
argument_list|)
expr_stmt|;
name|releaseCachedFontEngine
argument_list|(
name|feCache
operator|.
name|prevScaledFontEngine
argument_list|)
expr_stmt|;
name|feCache
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearLineData
name|void
name|QTextEngine
operator|::
name|clearLineData
parameter_list|()
block|{
name|lines
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|validate
name|void
name|QTextEngine
operator|::
name|validate
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|layoutData
condition|)
return|return;
name|layoutData
operator|=
operator|new
name|LayoutData
argument_list|()
expr_stmt|;
if|if
condition|(
name|block
operator|.
name|docHandle
argument_list|()
condition|)
block|{
name|layoutData
operator|->
name|string
operator|=
name|block
operator|.
name|text
argument_list|()
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|flags
argument_list|()
operator|&
name|QTextOption
operator|::
name|ShowLineAndParagraphSeparators
condition|)
name|layoutData
operator|->
name|string
operator|+=
name|QLatin1Char
argument_list|(
name|block
operator|.
name|next
argument_list|()
operator|.
name|isValid
argument_list|()
condition|?
literal|0xb6
else|:
literal|0x20
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|layoutData
operator|->
name|string
operator|=
name|text
expr_stmt|;
block|}
if|if
condition|(
name|specialData
operator|&&
name|specialData
operator|->
name|preeditPosition
operator|!=
operator|-
literal|1
condition|)
name|layoutData
operator|->
name|string
operator|.
name|insert
argument_list|(
name|specialData
operator|->
name|preeditPosition
argument_list|,
name|specialData
operator|->
name|preeditText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|itemize
name|void
name|QTextEngine
operator|::
name|itemize
parameter_list|()
specifier|const
block|{
name|validate
argument_list|()
expr_stmt|;
if|if
condition|(
name|layoutData
operator|->
name|items
operator|.
name|size
argument_list|()
condition|)
return|return;
name|int
name|length
init|=
name|layoutData
operator|->
name|string
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|length
condition|)
return|return;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_MAC_USE_COCOA
argument_list|)
comment|// ATSUI requires RTL flags to correctly identify the character stops.
name|bool
name|ignore
init|=
literal|false
decl_stmt|;
else|#
directive|else
name|bool
name|ignore
init|=
name|ignoreBidi
decl_stmt|;
endif|#
directive|endif
name|bool
name|rtl
init|=
name|isRightToLeft
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ignore
operator|&&
operator|!
name|rtl
condition|)
block|{
name|ignore
operator|=
literal|true
expr_stmt|;
specifier|const
name|QChar
modifier|*
name|start
init|=
name|layoutData
operator|->
name|string
operator|.
name|unicode
argument_list|()
decl_stmt|;
specifier|const
name|QChar
modifier|*
specifier|const
name|end
init|=
name|start
operator|+
name|length
decl_stmt|;
while|while
condition|(
name|start
operator|<
name|end
condition|)
block|{
if|if
condition|(
name|start
operator|->
name|unicode
argument_list|()
operator|>=
literal|0x590
condition|)
block|{
name|ignore
operator|=
literal|false
expr_stmt|;
break|break;
block|}
operator|++
name|start
expr_stmt|;
block|}
block|}
name|QVarLengthArray
argument_list|<
name|QScriptAnalysis
argument_list|,
literal|4096
argument_list|>
name|scriptAnalysis
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|QScriptAnalysis
modifier|*
name|analysis
init|=
name|scriptAnalysis
operator|.
name|data
argument_list|()
decl_stmt|;
name|QBidiControl
name|control
argument_list|(
name|rtl
argument_list|)
decl_stmt|;
if|if
condition|(
name|ignore
condition|)
block|{
name|memset
argument_list|(
name|analysis
argument_list|,
literal|0
argument_list|,
name|length
operator|*
sizeof|sizeof
argument_list|(
name|QScriptAnalysis
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|textDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
name|analysis
index|[
name|i
index|]
operator|.
name|bidiLevel
operator|=
literal|1
expr_stmt|;
name|layoutData
operator|->
name|hasBidi
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|layoutData
operator|->
name|hasBidi
operator|=
name|bidiItemize
argument_list|(
cast|const_cast
argument_list|<
name|QTextEngine
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
argument_list|,
name|analysis
argument_list|,
name|control
argument_list|)
expr_stmt|;
block|}
specifier|const
name|ushort
modifier|*
name|uc
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ushort
operator|*
argument_list|>
argument_list|(
name|layoutData
operator|->
name|string
operator|.
name|unicode
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|ushort
modifier|*
name|e
init|=
name|uc
operator|+
name|length
decl_stmt|;
name|int
name|lastScript
init|=
name|QUnicodeTables
operator|::
name|Common
decl_stmt|;
while|while
condition|(
name|uc
operator|<
name|e
condition|)
block|{
switch|switch
condition|(
operator|*
name|uc
condition|)
block|{
case|case
name|QChar
operator|::
name|ObjectReplacementCharacter
case|:
name|analysis
operator|->
name|script
operator|=
name|QUnicodeTables
operator|::
name|Common
expr_stmt|;
name|analysis
operator|->
name|flags
operator|=
name|QScriptAnalysis
operator|::
name|Object
expr_stmt|;
break|break;
case|case
name|QChar
operator|::
name|LineSeparator
case|:
if|if
condition|(
name|analysis
operator|->
name|bidiLevel
operator|%
literal|2
condition|)
operator|--
name|analysis
operator|->
name|bidiLevel
expr_stmt|;
name|analysis
operator|->
name|script
operator|=
name|QUnicodeTables
operator|::
name|Common
expr_stmt|;
name|analysis
operator|->
name|flags
operator|=
name|QScriptAnalysis
operator|::
name|LineOrParagraphSeparator
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|flags
argument_list|()
operator|&
name|QTextOption
operator|::
name|ShowLineAndParagraphSeparators
condition|)
operator|*
cast|const_cast
argument_list|<
name|ushort
operator|*
argument_list|>
argument_list|(
name|uc
argument_list|)
operator|=
literal|0x21B5
expr_stmt|;
comment|// visual line separator
break|break;
case|case
literal|9
case|:
comment|// Tab
name|analysis
operator|->
name|script
operator|=
name|QUnicodeTables
operator|::
name|Common
expr_stmt|;
name|analysis
operator|->
name|flags
operator|=
name|QScriptAnalysis
operator|::
name|Tab
expr_stmt|;
name|analysis
operator|->
name|bidiLevel
operator|=
name|control
operator|.
name|baseLevel
argument_list|()
expr_stmt|;
break|break;
case|case
literal|32
case|:
comment|// Space
case|case
name|QChar
operator|::
name|Nbsp
case|:
if|if
condition|(
name|option
operator|.
name|flags
argument_list|()
operator|&
name|QTextOption
operator|::
name|ShowTabsAndSpaces
condition|)
block|{
name|analysis
operator|->
name|script
operator|=
name|QUnicodeTables
operator|::
name|Common
expr_stmt|;
name|analysis
operator|->
name|flags
operator|=
name|QScriptAnalysis
operator|::
name|Space
expr_stmt|;
name|analysis
operator|->
name|bidiLevel
operator|=
name|control
operator|.
name|baseLevel
argument_list|()
expr_stmt|;
break|break;
block|}
comment|// fall through
default|default:
name|int
name|script
init|=
name|QUnicodeTables
operator|::
name|script
argument_list|(
operator|*
name|uc
argument_list|)
decl_stmt|;
name|analysis
operator|->
name|script
operator|=
name|script
operator|==
name|QUnicodeTables
operator|::
name|Inherited
condition|?
name|lastScript
else|:
name|script
expr_stmt|;
name|analysis
operator|->
name|flags
operator|=
name|QScriptAnalysis
operator|::
name|None
expr_stmt|;
break|break;
block|}
name|lastScript
operator|=
name|analysis
operator|->
name|script
expr_stmt|;
operator|++
name|uc
expr_stmt|;
operator|++
name|analysis
expr_stmt|;
block|}
if|if
condition|(
name|option
operator|.
name|flags
argument_list|()
operator|&
name|QTextOption
operator|::
name|ShowLineAndParagraphSeparators
condition|)
block|{
operator|(
name|analysis
operator|-
literal|1
operator|)
operator|->
name|flags
operator|=
name|QScriptAnalysis
operator|::
name|LineOrParagraphSeparator
expr_stmt|;
comment|// to exclude it from width
block|}
name|Itemizer
name|itemizer
argument_list|(
name|layoutData
operator|->
name|string
argument_list|,
name|scriptAnalysis
operator|.
name|data
argument_list|()
argument_list|,
name|layoutData
operator|->
name|items
argument_list|)
decl_stmt|;
specifier|const
name|QTextDocumentPrivate
modifier|*
name|p
init|=
name|block
operator|.
name|docHandle
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
condition|)
block|{
name|SpecialData
modifier|*
name|s
init|=
name|specialData
decl_stmt|;
name|QTextDocumentPrivate
operator|::
name|FragmentIterator
name|it
init|=
name|p
operator|->
name|find
argument_list|(
name|block
operator|.
name|position
argument_list|()
argument_list|)
decl_stmt|;
name|QTextDocumentPrivate
operator|::
name|FragmentIterator
name|end
init|=
name|p
operator|->
name|find
argument_list|(
name|block
operator|.
name|position
argument_list|()
operator|+
name|block
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// -1 to omit the block separator char
name|int
name|format
init|=
name|it
operator|.
name|value
argument_list|()
operator|->
name|format
decl_stmt|;
name|int
name|prevPosition
init|=
literal|0
decl_stmt|;
name|int
name|position
init|=
name|prevPosition
decl_stmt|;
while|while
condition|(
literal|1
condition|)
block|{
specifier|const
name|QTextFragmentData
modifier|*
specifier|const
name|frag
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|end
operator|||
name|format
operator|!=
name|frag
operator|->
name|format
condition|)
block|{
if|if
condition|(
name|s
operator|&&
name|position
operator|>=
name|s
operator|->
name|preeditPosition
condition|)
block|{
name|position
operator|+=
name|s
operator|->
name|preeditText
operator|.
name|length
argument_list|()
expr_stmt|;
name|s
operator|=
literal|0
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|position
operator|<=
name|length
argument_list|)
expr_stmt|;
name|itemizer
operator|.
name|generate
argument_list|(
name|prevPosition
argument_list|,
name|position
operator|-
name|prevPosition
argument_list|,
name|formats
argument_list|()
operator|->
name|charFormat
argument_list|(
name|format
argument_list|)
operator|.
name|fontCapitalization
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|==
name|end
condition|)
block|{
if|if
condition|(
name|position
operator|<
name|length
condition|)
name|itemizer
operator|.
name|generate
argument_list|(
name|position
argument_list|,
name|length
operator|-
name|position
argument_list|,
name|formats
argument_list|()
operator|->
name|charFormat
argument_list|(
name|format
argument_list|)
operator|.
name|fontCapitalization
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|format
operator|=
name|frag
operator|->
name|format
expr_stmt|;
name|prevPosition
operator|=
name|position
expr_stmt|;
block|}
name|position
operator|+=
name|frag
operator|->
name|size_array
index|[
literal|0
index|]
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
block|}
else|else
block|{
name|itemizer
operator|.
name|generate
argument_list|(
literal|0
argument_list|,
name|length
argument_list|,
cast|static_cast
argument_list|<
name|QFont
operator|::
name|Capitalization
argument_list|>
argument_list|(
name|fnt
operator|.
name|d
operator|->
name|capital
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addRequiredBoundaries
argument_list|()
expr_stmt|;
name|resolveAdditionalFormats
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isRightToLeft
name|bool
name|QTextEngine
operator|::
name|isRightToLeft
parameter_list|()
specifier|const
block|{
switch|switch
condition|(
name|option
operator|.
name|textDirection
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|LeftToRight
case|:
return|return
literal|false
return|;
case|case
name|Qt
operator|::
name|RightToLeft
case|:
return|return
literal|true
return|;
default|default:
break|break;
block|}
if|if
condition|(
operator|!
name|layoutData
condition|)
name|itemize
argument_list|()
expr_stmt|;
comment|// this places the cursor in the right position depending on the keyboard layout
if|if
condition|(
name|layoutData
operator|->
name|string
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QApplication
operator|::
name|keyboardInputDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
return|;
return|return
name|layoutData
operator|->
name|string
operator|.
name|isRightToLeft
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|findItem
name|int
name|QTextEngine
operator|::
name|findItem
parameter_list|(
name|int
name|strPos
parameter_list|)
specifier|const
block|{
name|itemize
argument_list|()
expr_stmt|;
name|int
name|left
init|=
literal|1
decl_stmt|;
name|int
name|right
init|=
name|layoutData
operator|->
name|items
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|left
operator|<=
name|right
condition|)
block|{
name|int
name|middle
init|=
operator|(
operator|(
name|right
operator|-
name|left
operator|)
operator|/
literal|2
operator|)
operator|+
name|left
decl_stmt|;
if|if
condition|(
name|strPos
operator|>
name|layoutData
operator|->
name|items
index|[
name|middle
index|]
operator|.
name|position
condition|)
name|left
operator|=
name|middle
operator|+
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|strPos
operator|<
name|layoutData
operator|->
name|items
index|[
name|middle
index|]
operator|.
name|position
condition|)
name|right
operator|=
name|middle
operator|-
literal|1
expr_stmt|;
else|else
block|{
return|return
name|middle
return|;
block|}
block|}
return|return
name|right
return|;
block|}
end_function
begin_function
DECL|function|width
name|QFixed
name|QTextEngine
operator|::
name|width
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|len
parameter_list|)
specifier|const
block|{
name|itemize
argument_list|()
expr_stmt|;
name|QFixed
name|w
init|=
literal|0
decl_stmt|;
comment|//     qDebug("QTextEngine::width(from = %d, len = %d), numItems=%d, strleng=%d", from,  len, items.size(), string.length());
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|layoutData
operator|->
name|items
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|QScriptItem
modifier|*
name|si
init|=
name|layoutData
operator|->
name|items
operator|.
name|constData
argument_list|()
operator|+
name|i
decl_stmt|;
name|int
name|pos
init|=
name|si
operator|->
name|position
decl_stmt|;
name|int
name|ilen
init|=
name|length
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|//          qDebug("item %d: from %d len %d", i, pos, ilen);
if|if
condition|(
name|pos
operator|>=
name|from
operator|+
name|len
condition|)
break|break;
if|if
condition|(
name|pos
operator|+
name|ilen
operator|>
name|from
condition|)
block|{
if|if
condition|(
operator|!
name|si
operator|->
name|num_glyphs
condition|)
name|shape
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|si
operator|->
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|Object
condition|)
block|{
name|w
operator|+=
name|si
operator|->
name|width
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|si
operator|->
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|Tab
condition|)
block|{
name|w
operator|+=
name|calculateTabWidth
argument_list|(
name|i
argument_list|,
name|w
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QGlyphLayout
name|glyphs
init|=
name|shapedGlyphs
argument_list|(
name|si
argument_list|)
decl_stmt|;
name|unsigned
name|short
modifier|*
name|logClusters
init|=
name|this
operator|->
name|logClusters
argument_list|(
name|si
argument_list|)
decl_stmt|;
comment|//             fprintf(stderr, "  logclusters:");
comment|//             for (int k = 0; k< ilen; k++)
comment|//                 fprintf(stderr, " %d", logClusters[k]);
comment|//             fprintf(stderr, "\n");
comment|// do the simple thing for now and give the first glyph in a cluster the full width, all other ones 0.
name|int
name|charFrom
init|=
name|from
operator|-
name|pos
decl_stmt|;
if|if
condition|(
name|charFrom
operator|<
literal|0
condition|)
name|charFrom
operator|=
literal|0
expr_stmt|;
name|int
name|glyphStart
init|=
name|logClusters
index|[
name|charFrom
index|]
decl_stmt|;
if|if
condition|(
name|charFrom
operator|>
literal|0
operator|&&
name|logClusters
index|[
name|charFrom
operator|-
literal|1
index|]
operator|==
name|glyphStart
condition|)
while|while
condition|(
name|charFrom
operator|<
name|ilen
operator|&&
name|logClusters
index|[
name|charFrom
index|]
operator|==
name|glyphStart
condition|)
name|charFrom
operator|++
expr_stmt|;
if|if
condition|(
name|charFrom
operator|<
name|ilen
condition|)
block|{
name|glyphStart
operator|=
name|logClusters
index|[
name|charFrom
index|]
expr_stmt|;
name|int
name|charEnd
init|=
name|from
operator|+
name|len
operator|-
literal|1
operator|-
name|pos
decl_stmt|;
if|if
condition|(
name|charEnd
operator|>=
name|ilen
condition|)
name|charEnd
operator|=
name|ilen
operator|-
literal|1
expr_stmt|;
name|int
name|glyphEnd
init|=
name|logClusters
index|[
name|charEnd
index|]
decl_stmt|;
while|while
condition|(
name|charEnd
operator|<
name|ilen
operator|&&
name|logClusters
index|[
name|charEnd
index|]
operator|==
name|glyphEnd
condition|)
name|charEnd
operator|++
expr_stmt|;
name|glyphEnd
operator|=
operator|(
name|charEnd
operator|==
name|ilen
operator|)
condition|?
name|si
operator|->
name|num_glyphs
else|:
name|logClusters
index|[
name|charEnd
index|]
expr_stmt|;
comment|//                 qDebug("char: start=%d end=%d / glyph: start = %d, end = %d", charFrom, charEnd, glyphStart, glyphEnd);
for|for
control|(
name|int
name|i
init|=
name|glyphStart
init|;
name|i
operator|<
name|glyphEnd
condition|;
name|i
operator|++
control|)
name|w
operator|+=
name|glyphs
operator|.
name|advances_x
index|[
name|i
index|]
operator|*
operator|!
name|glyphs
operator|.
name|attributes
index|[
name|i
index|]
operator|.
name|dontPrint
expr_stmt|;
block|}
block|}
block|}
comment|//     qDebug("   --> w= %d ", w);
return|return
name|w
return|;
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QTextEngine
operator|::
name|boundingBox
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|len
parameter_list|)
specifier|const
block|{
name|itemize
argument_list|()
expr_stmt|;
name|glyph_metrics_t
name|gm
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|layoutData
operator|->
name|items
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|QScriptItem
modifier|*
name|si
init|=
name|layoutData
operator|->
name|items
operator|.
name|constData
argument_list|()
operator|+
name|i
decl_stmt|;
name|int
name|pos
init|=
name|si
operator|->
name|position
decl_stmt|;
name|int
name|ilen
init|=
name|length
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>
name|from
operator|+
name|len
condition|)
break|break;
if|if
condition|(
name|pos
operator|+
name|ilen
operator|>
name|from
condition|)
block|{
if|if
condition|(
operator|!
name|si
operator|->
name|num_glyphs
condition|)
name|shape
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|si
operator|->
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|Object
condition|)
block|{
name|gm
operator|.
name|width
operator|+=
name|si
operator|->
name|width
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|si
operator|->
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|Tab
condition|)
block|{
name|gm
operator|.
name|width
operator|+=
name|calculateTabWidth
argument_list|(
name|i
argument_list|,
name|gm
operator|.
name|width
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|unsigned
name|short
modifier|*
name|logClusters
init|=
name|this
operator|->
name|logClusters
argument_list|(
name|si
argument_list|)
decl_stmt|;
name|QGlyphLayout
name|glyphs
init|=
name|shapedGlyphs
argument_list|(
name|si
argument_list|)
decl_stmt|;
comment|// do the simple thing for now and give the first glyph in a cluster the full width, all other ones 0.
name|int
name|charFrom
init|=
name|from
operator|-
name|pos
decl_stmt|;
if|if
condition|(
name|charFrom
operator|<
literal|0
condition|)
name|charFrom
operator|=
literal|0
expr_stmt|;
name|int
name|glyphStart
init|=
name|logClusters
index|[
name|charFrom
index|]
decl_stmt|;
if|if
condition|(
name|charFrom
operator|>
literal|0
operator|&&
name|logClusters
index|[
name|charFrom
operator|-
literal|1
index|]
operator|==
name|glyphStart
condition|)
while|while
condition|(
name|charFrom
operator|<
name|ilen
operator|&&
name|logClusters
index|[
name|charFrom
index|]
operator|==
name|glyphStart
condition|)
name|charFrom
operator|++
expr_stmt|;
if|if
condition|(
name|charFrom
operator|<
name|ilen
condition|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
name|fontEngine
argument_list|(
operator|*
name|si
argument_list|)
decl_stmt|;
name|glyphStart
operator|=
name|logClusters
index|[
name|charFrom
index|]
expr_stmt|;
name|int
name|charEnd
init|=
name|from
operator|+
name|len
operator|-
literal|1
operator|-
name|pos
decl_stmt|;
if|if
condition|(
name|charEnd
operator|>=
name|ilen
condition|)
name|charEnd
operator|=
name|ilen
operator|-
literal|1
expr_stmt|;
name|int
name|glyphEnd
init|=
name|logClusters
index|[
name|charEnd
index|]
decl_stmt|;
while|while
condition|(
name|charEnd
operator|<
name|ilen
operator|&&
name|logClusters
index|[
name|charEnd
index|]
operator|==
name|glyphEnd
condition|)
name|charEnd
operator|++
expr_stmt|;
name|glyphEnd
operator|=
operator|(
name|charEnd
operator|==
name|ilen
operator|)
condition|?
name|si
operator|->
name|num_glyphs
else|:
name|logClusters
index|[
name|charEnd
index|]
expr_stmt|;
if|if
condition|(
name|glyphStart
operator|<=
name|glyphEnd
condition|)
block|{
name|glyph_metrics_t
name|m
init|=
name|fe
operator|->
name|boundingBox
argument_list|(
name|glyphs
operator|.
name|mid
argument_list|(
name|glyphStart
argument_list|,
name|glyphEnd
operator|-
name|glyphStart
argument_list|)
argument_list|)
decl_stmt|;
name|gm
operator|.
name|x
operator|=
name|qMin
argument_list|(
name|gm
operator|.
name|x
argument_list|,
name|m
operator|.
name|x
operator|+
name|gm
operator|.
name|xoff
argument_list|)
expr_stmt|;
name|gm
operator|.
name|y
operator|=
name|qMin
argument_list|(
name|gm
operator|.
name|y
argument_list|,
name|m
operator|.
name|y
operator|+
name|gm
operator|.
name|yoff
argument_list|)
expr_stmt|;
name|gm
operator|.
name|width
operator|=
name|qMax
argument_list|(
name|gm
operator|.
name|width
argument_list|,
name|m
operator|.
name|width
operator|+
name|gm
operator|.
name|xoff
argument_list|)
expr_stmt|;
name|gm
operator|.
name|height
operator|=
name|qMax
argument_list|(
name|gm
operator|.
name|height
argument_list|,
name|m
operator|.
name|height
operator|+
name|gm
operator|.
name|yoff
argument_list|)
expr_stmt|;
name|gm
operator|.
name|xoff
operator|+=
name|m
operator|.
name|xoff
expr_stmt|;
name|gm
operator|.
name|yoff
operator|+=
name|m
operator|.
name|yoff
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|gm
return|;
block|}
end_function
begin_function
DECL|function|tightBoundingBox
name|glyph_metrics_t
name|QTextEngine
operator|::
name|tightBoundingBox
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|len
parameter_list|)
specifier|const
block|{
name|itemize
argument_list|()
expr_stmt|;
name|glyph_metrics_t
name|gm
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|layoutData
operator|->
name|items
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|QScriptItem
modifier|*
name|si
init|=
name|layoutData
operator|->
name|items
operator|.
name|constData
argument_list|()
operator|+
name|i
decl_stmt|;
name|int
name|pos
init|=
name|si
operator|->
name|position
decl_stmt|;
name|int
name|ilen
init|=
name|length
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>
name|from
operator|+
name|len
condition|)
break|break;
if|if
condition|(
name|pos
operator|+
name|len
operator|>
name|from
condition|)
block|{
if|if
condition|(
operator|!
name|si
operator|->
name|num_glyphs
condition|)
name|shape
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|unsigned
name|short
modifier|*
name|logClusters
init|=
name|this
operator|->
name|logClusters
argument_list|(
name|si
argument_list|)
decl_stmt|;
name|QGlyphLayout
name|glyphs
init|=
name|shapedGlyphs
argument_list|(
name|si
argument_list|)
decl_stmt|;
comment|// do the simple thing for now and give the first glyph in a cluster the full width, all other ones 0.
name|int
name|charFrom
init|=
name|from
operator|-
name|pos
decl_stmt|;
if|if
condition|(
name|charFrom
operator|<
literal|0
condition|)
name|charFrom
operator|=
literal|0
expr_stmt|;
name|int
name|glyphStart
init|=
name|logClusters
index|[
name|charFrom
index|]
decl_stmt|;
if|if
condition|(
name|charFrom
operator|>
literal|0
operator|&&
name|logClusters
index|[
name|charFrom
operator|-
literal|1
index|]
operator|==
name|glyphStart
condition|)
while|while
condition|(
name|charFrom
operator|<
name|ilen
operator|&&
name|logClusters
index|[
name|charFrom
index|]
operator|==
name|glyphStart
condition|)
name|charFrom
operator|++
expr_stmt|;
if|if
condition|(
name|charFrom
operator|<
name|ilen
condition|)
block|{
name|glyphStart
operator|=
name|logClusters
index|[
name|charFrom
index|]
expr_stmt|;
name|int
name|charEnd
init|=
name|from
operator|+
name|len
operator|-
literal|1
operator|-
name|pos
decl_stmt|;
if|if
condition|(
name|charEnd
operator|>=
name|ilen
condition|)
name|charEnd
operator|=
name|ilen
operator|-
literal|1
expr_stmt|;
name|int
name|glyphEnd
init|=
name|logClusters
index|[
name|charEnd
index|]
decl_stmt|;
while|while
condition|(
name|charEnd
operator|<
name|ilen
operator|&&
name|logClusters
index|[
name|charEnd
index|]
operator|==
name|glyphEnd
condition|)
name|charEnd
operator|++
expr_stmt|;
name|glyphEnd
operator|=
operator|(
name|charEnd
operator|==
name|ilen
operator|)
condition|?
name|si
operator|->
name|num_glyphs
else|:
name|logClusters
index|[
name|charEnd
index|]
expr_stmt|;
if|if
condition|(
name|glyphStart
operator|<=
name|glyphEnd
condition|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
name|fontEngine
argument_list|(
operator|*
name|si
argument_list|)
decl_stmt|;
name|glyph_metrics_t
name|m
init|=
name|fe
operator|->
name|tightBoundingBox
argument_list|(
name|glyphs
operator|.
name|mid
argument_list|(
name|glyphStart
argument_list|,
name|glyphEnd
operator|-
name|glyphStart
argument_list|)
argument_list|)
decl_stmt|;
name|gm
operator|.
name|x
operator|=
name|qMin
argument_list|(
name|gm
operator|.
name|x
argument_list|,
name|m
operator|.
name|x
operator|+
name|gm
operator|.
name|xoff
argument_list|)
expr_stmt|;
name|gm
operator|.
name|y
operator|=
name|qMin
argument_list|(
name|gm
operator|.
name|y
argument_list|,
name|m
operator|.
name|y
operator|+
name|gm
operator|.
name|yoff
argument_list|)
expr_stmt|;
name|gm
operator|.
name|width
operator|=
name|qMax
argument_list|(
name|gm
operator|.
name|width
argument_list|,
name|m
operator|.
name|width
operator|+
name|gm
operator|.
name|xoff
argument_list|)
expr_stmt|;
name|gm
operator|.
name|height
operator|=
name|qMax
argument_list|(
name|gm
operator|.
name|height
argument_list|,
name|m
operator|.
name|height
operator|+
name|gm
operator|.
name|yoff
argument_list|)
expr_stmt|;
name|gm
operator|.
name|xoff
operator|+=
name|m
operator|.
name|xoff
expr_stmt|;
name|gm
operator|.
name|yoff
operator|+=
name|m
operator|.
name|yoff
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|gm
return|;
block|}
end_function
begin_function
DECL|function|font
name|QFont
name|QTextEngine
operator|::
name|font
parameter_list|(
specifier|const
name|QScriptItem
modifier|&
name|si
parameter_list|)
specifier|const
block|{
name|QFont
name|font
init|=
name|fnt
decl_stmt|;
if|if
condition|(
name|hasFormats
argument_list|()
condition|)
block|{
name|QTextCharFormat
name|f
init|=
name|format
argument_list|(
operator|&
name|si
argument_list|)
decl_stmt|;
name|font
operator|=
name|f
operator|.
name|font
argument_list|()
expr_stmt|;
if|if
condition|(
name|block
operator|.
name|docHandle
argument_list|()
operator|&&
name|block
operator|.
name|docHandle
argument_list|()
operator|->
name|layout
argument_list|()
condition|)
block|{
comment|// Make sure we get the right dpi on printers
name|QPaintDevice
modifier|*
name|pdev
init|=
name|block
operator|.
name|docHandle
argument_list|()
operator|->
name|layout
argument_list|()
operator|->
name|paintDevice
argument_list|()
decl_stmt|;
if|if
condition|(
name|pdev
condition|)
name|font
operator|=
name|QFont
argument_list|(
name|font
argument_list|,
name|pdev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|font
operator|=
name|font
operator|.
name|resolve
argument_list|(
name|fnt
argument_list|)
expr_stmt|;
block|}
name|QTextCharFormat
operator|::
name|VerticalAlignment
name|valign
init|=
name|f
operator|.
name|verticalAlignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|valign
operator|==
name|QTextCharFormat
operator|::
name|AlignSuperScript
operator|||
name|valign
operator|==
name|QTextCharFormat
operator|::
name|AlignSubScript
condition|)
block|{
if|if
condition|(
name|font
operator|.
name|pointSize
argument_list|()
operator|!=
operator|-
literal|1
condition|)
name|font
operator|.
name|setPointSize
argument_list|(
operator|(
name|font
operator|.
name|pointSize
argument_list|()
operator|*
literal|2
operator|)
operator|/
literal|3
argument_list|)
expr_stmt|;
else|else
name|font
operator|.
name|setPixelSize
argument_list|(
operator|(
name|font
operator|.
name|pixelSize
argument_list|()
operator|*
literal|2
operator|)
operator|/
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|si
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|SmallCaps
condition|)
name|font
operator|=
name|font
operator|.
name|d
operator|->
name|smallCapsFont
argument_list|()
expr_stmt|;
return|return
name|font
return|;
block|}
end_function
begin_constructor
DECL|function|FontEngineCache
name|QTextEngine
operator|::
name|FontEngineCache
operator|::
name|FontEngineCache
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|//we cache the previous results of this function, as calling it numerous times with the same effective
end_comment
begin_comment
comment|//input is common (and hard to cache at a higher level)
end_comment
begin_function
DECL|function|fontEngine
name|QFontEngine
modifier|*
name|QTextEngine
operator|::
name|fontEngine
parameter_list|(
specifier|const
name|QScriptItem
modifier|&
name|si
parameter_list|,
name|QFixed
modifier|*
name|ascent
parameter_list|,
name|QFixed
modifier|*
name|descent
parameter_list|,
name|QFixed
modifier|*
name|leading
parameter_list|)
specifier|const
block|{
name|QFontEngine
modifier|*
name|engine
init|=
literal|0
decl_stmt|;
name|QFontEngine
modifier|*
name|scaledEngine
init|=
literal|0
decl_stmt|;
name|int
name|script
init|=
name|si
operator|.
name|analysis
operator|.
name|script
decl_stmt|;
name|QFont
name|font
init|=
name|fnt
decl_stmt|;
if|if
condition|(
name|hasFormats
argument_list|()
condition|)
block|{
if|if
condition|(
name|feCache
operator|.
name|prevFontEngine
operator|&&
name|feCache
operator|.
name|prevPosition
operator|==
name|si
operator|.
name|position
operator|&&
name|feCache
operator|.
name|prevLength
operator|==
name|length
argument_list|(
operator|&
name|si
argument_list|)
operator|&&
name|feCache
operator|.
name|prevScript
operator|==
name|script
condition|)
block|{
name|engine
operator|=
name|feCache
operator|.
name|prevFontEngine
expr_stmt|;
name|scaledEngine
operator|=
name|feCache
operator|.
name|prevScaledFontEngine
expr_stmt|;
block|}
else|else
block|{
name|QTextCharFormat
name|f
init|=
name|format
argument_list|(
operator|&
name|si
argument_list|)
decl_stmt|;
name|font
operator|=
name|f
operator|.
name|font
argument_list|()
expr_stmt|;
if|if
condition|(
name|block
operator|.
name|docHandle
argument_list|()
operator|&&
name|block
operator|.
name|docHandle
argument_list|()
operator|->
name|layout
argument_list|()
condition|)
block|{
comment|// Make sure we get the right dpi on printers
name|QPaintDevice
modifier|*
name|pdev
init|=
name|block
operator|.
name|docHandle
argument_list|()
operator|->
name|layout
argument_list|()
operator|->
name|paintDevice
argument_list|()
decl_stmt|;
if|if
condition|(
name|pdev
condition|)
name|font
operator|=
name|QFont
argument_list|(
name|font
argument_list|,
name|pdev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|font
operator|=
name|font
operator|.
name|resolve
argument_list|(
name|fnt
argument_list|)
expr_stmt|;
block|}
name|engine
operator|=
name|font
operator|.
name|d
operator|->
name|engineForScript
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|QTextCharFormat
operator|::
name|VerticalAlignment
name|valign
init|=
name|f
operator|.
name|verticalAlignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|valign
operator|==
name|QTextCharFormat
operator|::
name|AlignSuperScript
operator|||
name|valign
operator|==
name|QTextCharFormat
operator|::
name|AlignSubScript
condition|)
block|{
if|if
condition|(
name|font
operator|.
name|pointSize
argument_list|()
operator|!=
operator|-
literal|1
condition|)
name|font
operator|.
name|setPointSize
argument_list|(
operator|(
name|font
operator|.
name|pointSize
argument_list|()
operator|*
literal|2
operator|)
operator|/
literal|3
argument_list|)
expr_stmt|;
else|else
name|font
operator|.
name|setPixelSize
argument_list|(
operator|(
name|font
operator|.
name|pixelSize
argument_list|()
operator|*
literal|2
operator|)
operator|/
literal|3
argument_list|)
expr_stmt|;
name|scaledEngine
operator|=
name|font
operator|.
name|d
operator|->
name|engineForScript
argument_list|(
name|script
argument_list|)
expr_stmt|;
block|}
name|feCache
operator|.
name|prevFontEngine
operator|=
name|engine
expr_stmt|;
if|if
condition|(
name|engine
condition|)
name|engine
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|feCache
operator|.
name|prevScaledFontEngine
operator|=
name|scaledEngine
expr_stmt|;
if|if
condition|(
name|scaledEngine
condition|)
name|scaledEngine
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|feCache
operator|.
name|prevScript
operator|=
name|script
expr_stmt|;
name|feCache
operator|.
name|prevPosition
operator|=
name|si
operator|.
name|position
expr_stmt|;
name|feCache
operator|.
name|prevLength
operator|=
name|length
argument_list|(
operator|&
name|si
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|feCache
operator|.
name|prevFontEngine
operator|&&
name|feCache
operator|.
name|prevScript
operator|==
name|script
operator|&&
name|feCache
operator|.
name|prevPosition
operator|==
operator|-
literal|1
condition|)
name|engine
operator|=
name|feCache
operator|.
name|prevFontEngine
expr_stmt|;
else|else
block|{
name|engine
operator|=
name|font
operator|.
name|d
operator|->
name|engineForScript
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|feCache
operator|.
name|prevFontEngine
operator|=
name|engine
expr_stmt|;
if|if
condition|(
name|engine
condition|)
name|engine
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|feCache
operator|.
name|prevScript
operator|=
name|script
expr_stmt|;
name|feCache
operator|.
name|prevPosition
operator|=
operator|-
literal|1
expr_stmt|;
name|feCache
operator|.
name|prevLength
operator|=
operator|-
literal|1
expr_stmt|;
name|feCache
operator|.
name|prevScaledFontEngine
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|si
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|SmallCaps
condition|)
block|{
name|QFontPrivate
modifier|*
name|p
init|=
name|font
operator|.
name|d
operator|->
name|smallCapsFontPrivate
argument_list|()
decl_stmt|;
name|scaledEngine
operator|=
name|p
operator|->
name|engineForScript
argument_list|(
name|script
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ascent
condition|)
block|{
operator|*
name|ascent
operator|=
name|engine
operator|->
name|ascent
argument_list|()
expr_stmt|;
operator|*
name|descent
operator|=
name|engine
operator|->
name|descent
argument_list|()
expr_stmt|;
operator|*
name|leading
operator|=
name|engine
operator|->
name|leading
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|scaledEngine
condition|)
return|return
name|scaledEngine
return|;
return|return
name|engine
return|;
block|}
end_function
begin_struct
DECL|struct|QJustificationPoint
struct|struct
name|QJustificationPoint
block|{
DECL|member|type
name|int
name|type
decl_stmt|;
DECL|member|kashidaWidth
name|QFixed
name|kashidaWidth
decl_stmt|;
DECL|member|glyph
name|QGlyphLayout
name|glyph
decl_stmt|;
DECL|member|fontEngine
name|QFontEngine
modifier|*
name|fontEngine
decl_stmt|;
block|}
struct|;
end_struct
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QJustificationPoint
argument_list|,
name|Q_PRIMITIVE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|set
specifier|static
name|void
name|set
parameter_list|(
name|QJustificationPoint
modifier|*
name|point
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|QGlyphLayout
modifier|&
name|glyph
parameter_list|,
name|QFontEngine
modifier|*
name|fe
parameter_list|)
block|{
name|point
operator|->
name|type
operator|=
name|type
expr_stmt|;
name|point
operator|->
name|glyph
operator|=
name|glyph
expr_stmt|;
name|point
operator|->
name|fontEngine
operator|=
name|fe
expr_stmt|;
if|if
condition|(
name|type
operator|>=
name|HB_Arabic_Normal
condition|)
block|{
name|QChar
name|ch
argument_list|(
literal|0x640
argument_list|)
decl_stmt|;
comment|// Kashida character
name|QGlyphLayoutArray
argument_list|<
literal|8
argument_list|>
name|glyphs
decl_stmt|;
name|int
name|nglyphs
init|=
literal|7
decl_stmt|;
name|fe
operator|->
name|stringToCMap
argument_list|(
operator|&
name|ch
argument_list|,
literal|1
argument_list|,
operator|&
name|glyphs
argument_list|,
operator|&
name|nglyphs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|glyphs
operator|.
name|glyphs
index|[
literal|0
index|]
operator|&&
name|glyphs
operator|.
name|advances_x
index|[
literal|0
index|]
operator|!=
literal|0
condition|)
block|{
name|point
operator|->
name|kashidaWidth
operator|=
name|glyphs
operator|.
name|advances_x
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|point
operator|->
name|type
operator|=
name|HB_NoJustification
expr_stmt|;
name|point
operator|->
name|kashidaWidth
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|justify
name|void
name|QTextEngine
operator|::
name|justify
parameter_list|(
specifier|const
name|QScriptLine
modifier|&
name|line
parameter_list|)
block|{
comment|//     qDebug("justify: line.gridfitted = %d, line.justified=%d", line.gridfitted, line.justified);
if|if
condition|(
name|line
operator|.
name|gridfitted
operator|&&
name|line
operator|.
name|justified
condition|)
return|return;
if|if
condition|(
operator|!
name|line
operator|.
name|gridfitted
condition|)
block|{
comment|// redo layout in device metrics, then adjust
cast|const_cast
argument_list|<
name|QScriptLine
operator|&
argument_list|>
argument_list|(
name|line
argument_list|)
operator|.
name|gridfitted
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|option
operator|.
name|alignment
argument_list|()
operator|&
name|Qt
operator|::
name|AlignHorizontal_Mask
operator|)
operator|!=
name|Qt
operator|::
name|AlignJustify
condition|)
return|return;
name|itemize
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|forceJustification
condition|)
block|{
name|int
name|end
init|=
name|line
operator|.
name|from
operator|+
operator|(
name|int
operator|)
name|line
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|end
operator|==
name|layoutData
operator|->
name|string
operator|.
name|length
argument_list|()
condition|)
return|return;
comment|// no justification at end of paragraph
if|if
condition|(
name|end
operator|&&
name|layoutData
operator|->
name|items
index|[
name|findItem
argument_list|(
name|end
operator|-
literal|1
argument_list|)
index|]
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|LineOrParagraphSeparator
condition|)
return|return;
comment|// no justification at the end of an explicitly separated line
block|}
comment|// justify line
name|int
name|maxJustify
init|=
literal|0
decl_stmt|;
comment|// don't include trailing white spaces when doing justification
name|int
name|line_length
init|=
name|line
operator|.
name|length
decl_stmt|;
specifier|const
name|HB_CharAttributes
modifier|*
name|a
init|=
name|attributes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|a
condition|)
return|return;
name|a
operator|+=
name|line
operator|.
name|from
expr_stmt|;
while|while
condition|(
name|line_length
operator|&&
name|a
index|[
name|line_length
operator|-
literal|1
index|]
operator|.
name|whiteSpace
condition|)
operator|--
name|line_length
expr_stmt|;
comment|// subtract one char more, as we can't justfy after the last character
operator|--
name|line_length
expr_stmt|;
if|if
condition|(
operator|!
name|line_length
condition|)
return|return;
name|int
name|firstItem
init|=
name|findItem
argument_list|(
name|line
operator|.
name|from
argument_list|)
decl_stmt|;
name|int
name|nItems
init|=
name|findItem
argument_list|(
name|line
operator|.
name|from
operator|+
name|line_length
operator|-
literal|1
argument_list|)
operator|-
name|firstItem
operator|+
literal|1
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QJustificationPoint
argument_list|>
name|justificationPoints
decl_stmt|;
name|int
name|nPoints
init|=
literal|0
decl_stmt|;
comment|//     qDebug("justifying from %d len %d, firstItem=%d, nItems=%d (%s)", line.from, line_length, firstItem, nItems, layoutData->string.mid(line.from, line_length).toUtf8().constData());
name|QFixed
name|minKashida
init|=
literal|0x100000
decl_stmt|;
comment|// we need to do all shaping before we go into the next loop, as we there
comment|// store pointers to the glyph data that could get reallocated by the shaping
comment|// process.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nItems
condition|;
operator|++
name|i
control|)
block|{
name|QScriptItem
modifier|&
name|si
init|=
name|layoutData
operator|->
name|items
index|[
name|firstItem
operator|+
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|si
operator|.
name|num_glyphs
condition|)
name|shape
argument_list|(
name|firstItem
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nItems
condition|;
operator|++
name|i
control|)
block|{
name|QScriptItem
modifier|&
name|si
init|=
name|layoutData
operator|->
name|items
index|[
name|firstItem
operator|+
name|i
index|]
decl_stmt|;
name|int
name|kashida_type
init|=
name|HB_Arabic_Normal
decl_stmt|;
name|int
name|kashida_pos
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|start
init|=
name|qMax
argument_list|(
name|line
operator|.
name|from
operator|-
name|si
operator|.
name|position
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|qMin
argument_list|(
name|line
operator|.
name|from
operator|+
name|line_length
operator|-
operator|(
name|int
operator|)
name|si
operator|.
name|position
argument_list|,
name|length
argument_list|(
name|firstItem
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|unsigned
name|short
modifier|*
name|log_clusters
init|=
name|logClusters
argument_list|(
operator|&
name|si
argument_list|)
decl_stmt|;
name|int
name|gs
init|=
name|log_clusters
index|[
name|start
index|]
decl_stmt|;
name|int
name|ge
init|=
operator|(
name|end
operator|==
name|length
argument_list|(
name|firstItem
operator|+
name|i
argument_list|)
condition|?
name|si
operator|.
name|num_glyphs
else|:
name|log_clusters
index|[
name|end
index|]
operator|)
decl_stmt|;
specifier|const
name|QGlyphLayout
name|g
init|=
name|shapedGlyphs
argument_list|(
operator|&
name|si
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|gs
init|;
name|i
operator|<
name|ge
condition|;
operator|++
name|i
control|)
block|{
name|g
operator|.
name|justifications
index|[
name|i
index|]
operator|.
name|type
operator|=
name|QGlyphJustification
operator|::
name|JustifyNone
expr_stmt|;
name|g
operator|.
name|justifications
index|[
name|i
index|]
operator|.
name|nKashidas
operator|=
literal|0
expr_stmt|;
name|g
operator|.
name|justifications
index|[
name|i
index|]
operator|.
name|space_18d6
operator|=
literal|0
expr_stmt|;
name|justificationPoints
operator|.
name|resize
argument_list|(
name|nPoints
operator|+
literal|3
argument_list|)
expr_stmt|;
name|int
name|justification
init|=
name|g
operator|.
name|attributes
index|[
name|i
index|]
operator|.
name|justification
decl_stmt|;
switch|switch
condition|(
name|justification
condition|)
block|{
case|case
name|HB_NoJustification
case|:
break|break;
case|case
name|HB_Space
case|:
comment|// fall through
case|case
name|HB_Arabic_Space
case|:
if|if
condition|(
name|kashida_pos
operator|>=
literal|0
condition|)
block|{
comment|//                     qDebug("kashida position at %d in word", kashida_pos);
name|set
argument_list|(
operator|&
name|justificationPoints
index|[
name|nPoints
index|]
argument_list|,
name|kashida_type
argument_list|,
name|g
operator|.
name|mid
argument_list|(
name|kashida_pos
argument_list|)
argument_list|,
name|fontEngine
argument_list|(
name|si
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|justificationPoints
index|[
name|nPoints
index|]
operator|.
name|kashidaWidth
operator|>
literal|0
condition|)
block|{
name|minKashida
operator|=
name|qMin
argument_list|(
name|minKashida
argument_list|,
name|justificationPoints
index|[
name|nPoints
index|]
operator|.
name|kashidaWidth
argument_list|)
expr_stmt|;
name|maxJustify
operator|=
name|qMax
argument_list|(
name|maxJustify
argument_list|,
name|justificationPoints
index|[
name|nPoints
index|]
operator|.
name|type
argument_list|)
expr_stmt|;
operator|++
name|nPoints
expr_stmt|;
block|}
block|}
name|kashida_pos
operator|=
operator|-
literal|1
expr_stmt|;
name|kashida_type
operator|=
name|HB_Arabic_Normal
expr_stmt|;
comment|// fall through
case|case
name|HB_Character
case|:
name|set
argument_list|(
operator|&
name|justificationPoints
index|[
name|nPoints
operator|++
index|]
argument_list|,
name|justification
argument_list|,
name|g
operator|.
name|mid
argument_list|(
name|i
argument_list|)
argument_list|,
name|fontEngine
argument_list|(
name|si
argument_list|)
argument_list|)
expr_stmt|;
name|maxJustify
operator|=
name|qMax
argument_list|(
name|maxJustify
argument_list|,
name|justification
argument_list|)
expr_stmt|;
break|break;
case|case
name|HB_Arabic_Normal
case|:
case|case
name|HB_Arabic_Waw
case|:
case|case
name|HB_Arabic_BaRa
case|:
case|case
name|HB_Arabic_Alef
case|:
case|case
name|HB_Arabic_HaaDal
case|:
case|case
name|HB_Arabic_Seen
case|:
case|case
name|HB_Arabic_Kashida
case|:
if|if
condition|(
name|justification
operator|>=
name|kashida_type
condition|)
block|{
name|kashida_pos
operator|=
name|i
expr_stmt|;
name|kashida_type
operator|=
name|justification
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|kashida_pos
operator|>=
literal|0
condition|)
block|{
name|set
argument_list|(
operator|&
name|justificationPoints
index|[
name|nPoints
index|]
argument_list|,
name|kashida_type
argument_list|,
name|g
operator|.
name|mid
argument_list|(
name|kashida_pos
argument_list|)
argument_list|,
name|fontEngine
argument_list|(
name|si
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|justificationPoints
index|[
name|nPoints
index|]
operator|.
name|kashidaWidth
operator|>
literal|0
condition|)
block|{
name|minKashida
operator|=
name|qMin
argument_list|(
name|minKashida
argument_list|,
name|justificationPoints
index|[
name|nPoints
index|]
operator|.
name|kashidaWidth
argument_list|)
expr_stmt|;
name|maxJustify
operator|=
name|qMax
argument_list|(
name|maxJustify
argument_list|,
name|justificationPoints
index|[
name|nPoints
index|]
operator|.
name|type
argument_list|)
expr_stmt|;
operator|++
name|nPoints
expr_stmt|;
block|}
block|}
block|}
name|QFixed
name|leading
init|=
name|leadingSpaceWidth
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|QFixed
name|need
init|=
name|line
operator|.
name|width
operator|-
name|line
operator|.
name|textWidth
operator|-
name|leading
decl_stmt|;
if|if
condition|(
name|need
operator|<
literal|0
condition|)
block|{
comment|// line overflows already!
cast|const_cast
argument_list|<
name|QScriptLine
operator|&
argument_list|>
argument_list|(
name|line
argument_list|)
operator|.
name|justified
operator|=
literal|true
expr_stmt|;
return|return;
block|}
comment|//     qDebug("doing justification: textWidth=%x, requested=%x, maxJustify=%d", line.textWidth.value(), line.width.value(), maxJustify);
comment|//     qDebug("     minKashida=%f, need=%f", minKashida.toReal(), need.toReal());
comment|// distribute in priority order
if|if
condition|(
name|maxJustify
operator|>=
name|HB_Arabic_Normal
condition|)
block|{
while|while
condition|(
name|need
operator|>=
name|minKashida
condition|)
block|{
for|for
control|(
name|int
name|type
init|=
name|maxJustify
init|;
name|need
operator|>=
name|minKashida
operator|&&
name|type
operator|>=
name|HB_Arabic_Normal
condition|;
operator|--
name|type
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|need
operator|>=
name|minKashida
operator|&&
name|i
operator|<
name|nPoints
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|justificationPoints
index|[
name|i
index|]
operator|.
name|type
operator|==
name|type
operator|&&
name|justificationPoints
index|[
name|i
index|]
operator|.
name|kashidaWidth
operator|<=
name|need
condition|)
block|{
name|justificationPoints
index|[
name|i
index|]
operator|.
name|glyph
operator|.
name|justifications
operator|->
name|nKashidas
operator|++
expr_stmt|;
comment|// ############
name|justificationPoints
index|[
name|i
index|]
operator|.
name|glyph
operator|.
name|justifications
operator|->
name|space_18d6
operator|+=
name|justificationPoints
index|[
name|i
index|]
operator|.
name|kashidaWidth
operator|.
name|value
argument_list|()
expr_stmt|;
name|need
operator|-=
name|justificationPoints
index|[
name|i
index|]
operator|.
name|kashidaWidth
expr_stmt|;
comment|//                         qDebug("adding kashida type %d with width %x, neednow %x", type, justificationPoints[i].kashidaWidth, need.value());
block|}
block|}
block|}
block|}
block|}
name|Q_ASSERT
argument_list|(
name|need
operator|>=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|need
condition|)
goto|goto
name|end
goto|;
name|maxJustify
operator|=
name|qMin
argument_list|(
name|maxJustify
argument_list|,
operator|(
name|int
operator|)
name|HB_Space
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|type
init|=
name|maxJustify
init|;
name|need
operator|!=
literal|0
operator|&&
name|type
operator|>
literal|0
condition|;
operator|--
name|type
control|)
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPoints
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|justificationPoints
index|[
name|i
index|]
operator|.
name|type
operator|==
name|type
condition|)
operator|++
name|n
expr_stmt|;
block|}
comment|//          qDebug("number of points for justification type %d: %d", type, n);
if|if
condition|(
operator|!
name|n
condition|)
continue|continue;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPoints
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|justificationPoints
index|[
name|i
index|]
operator|.
name|type
operator|==
name|type
condition|)
block|{
name|QFixed
name|add
init|=
name|need
operator|/
name|n
decl_stmt|;
comment|//                  qDebug("adding %x to glyph %x", add.value(), justificationPoints[i].glyph->glyph);
name|justificationPoints
index|[
name|i
index|]
operator|.
name|glyph
operator|.
name|justifications
index|[
literal|0
index|]
operator|.
name|space_18d6
operator|=
name|add
operator|.
name|value
argument_list|()
expr_stmt|;
name|need
operator|-=
name|add
expr_stmt|;
operator|--
name|n
expr_stmt|;
block|}
block|}
name|Q_ASSERT
argument_list|(
operator|!
name|need
argument_list|)
expr_stmt|;
block|}
name|end
label|:
cast|const_cast
argument_list|<
name|QScriptLine
operator|&
argument_list|>
argument_list|(
name|line
argument_list|)
operator|.
name|justified
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setDefaultHeight
name|void
name|QScriptLine
operator|::
name|setDefaultHeight
parameter_list|(
name|QTextEngine
modifier|*
name|eng
parameter_list|)
block|{
name|QFont
name|f
decl_stmt|;
name|QFontEngine
modifier|*
name|e
decl_stmt|;
if|if
condition|(
name|eng
operator|->
name|block
operator|.
name|docHandle
argument_list|()
operator|&&
name|eng
operator|->
name|block
operator|.
name|docHandle
argument_list|()
operator|->
name|layout
argument_list|()
condition|)
block|{
name|f
operator|=
name|eng
operator|->
name|block
operator|.
name|charFormat
argument_list|()
operator|.
name|font
argument_list|()
expr_stmt|;
comment|// Make sure we get the right dpi on printers
name|QPaintDevice
modifier|*
name|pdev
init|=
name|eng
operator|->
name|block
operator|.
name|docHandle
argument_list|()
operator|->
name|layout
argument_list|()
operator|->
name|paintDevice
argument_list|()
decl_stmt|;
if|if
condition|(
name|pdev
condition|)
name|f
operator|=
name|QFont
argument_list|(
name|f
argument_list|,
name|pdev
argument_list|)
expr_stmt|;
name|e
operator|=
name|f
operator|.
name|d
operator|->
name|engineForScript
argument_list|(
name|QUnicodeTables
operator|::
name|Common
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|e
operator|=
name|eng
operator|->
name|fnt
operator|.
name|d
operator|->
name|engineForScript
argument_list|(
name|QUnicodeTables
operator|::
name|Common
argument_list|)
expr_stmt|;
block|}
name|QFixed
name|other_ascent
init|=
name|e
operator|->
name|ascent
argument_list|()
decl_stmt|;
name|QFixed
name|other_descent
init|=
name|e
operator|->
name|descent
argument_list|()
decl_stmt|;
name|QFixed
name|other_leading
init|=
name|e
operator|->
name|leading
argument_list|()
decl_stmt|;
name|leading
operator|=
name|qMax
argument_list|(
name|leading
operator|+
name|ascent
argument_list|,
name|other_leading
operator|+
name|other_ascent
argument_list|)
operator|-
name|qMax
argument_list|(
name|ascent
argument_list|,
name|other_ascent
argument_list|)
expr_stmt|;
name|ascent
operator|=
name|qMax
argument_list|(
name|ascent
argument_list|,
name|other_ascent
argument_list|)
expr_stmt|;
name|descent
operator|=
name|qMax
argument_list|(
name|descent
argument_list|,
name|other_descent
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|LayoutData
name|QTextEngine
operator|::
name|LayoutData
operator|::
name|LayoutData
parameter_list|()
block|{
name|memory
operator|=
literal|0
expr_stmt|;
name|allocated
operator|=
literal|0
expr_stmt|;
name|memory_on_stack
operator|=
literal|false
expr_stmt|;
name|used
operator|=
literal|0
expr_stmt|;
name|hasBidi
operator|=
literal|false
expr_stmt|;
name|layoutState
operator|=
name|LayoutEmpty
expr_stmt|;
name|haveCharAttributes
operator|=
literal|false
expr_stmt|;
name|logClustersPtr
operator|=
literal|0
expr_stmt|;
name|available_glyphs
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|LayoutData
name|QTextEngine
operator|::
name|LayoutData
operator|::
name|LayoutData
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|void
modifier|*
modifier|*
name|stack_memory
parameter_list|,
name|int
name|_allocated
parameter_list|)
member_init_list|:
name|string
argument_list|(
name|str
argument_list|)
block|{
name|allocated
operator|=
name|_allocated
expr_stmt|;
name|int
name|space_charAttributes
init|=
sizeof|sizeof
argument_list|(
name|HB_CharAttributes
argument_list|)
operator|*
name|string
operator|.
name|length
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|space_logClusters
init|=
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
operator|*
name|string
operator|.
name|length
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|+
literal|1
decl_stmt|;
name|available_glyphs
operator|=
operator|(
operator|(
name|int
operator|)
name|allocated
operator|-
name|space_charAttributes
operator|-
name|space_logClusters
operator|)
operator|*
operator|(
name|int
operator|)
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|/
operator|(
name|int
operator|)
name|QGlyphLayout
operator|::
name|spaceNeededForGlyphLayout
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|available_glyphs
operator|<
name|str
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// need to allocate on the heap
name|allocated
operator|=
literal|0
expr_stmt|;
name|memory_on_stack
operator|=
literal|false
expr_stmt|;
name|memory
operator|=
literal|0
expr_stmt|;
name|logClustersPtr
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|memory_on_stack
operator|=
literal|true
expr_stmt|;
name|memory
operator|=
name|stack_memory
expr_stmt|;
name|logClustersPtr
operator|=
operator|(
name|unsigned
name|short
operator|*
operator|)
operator|(
name|memory
operator|+
name|space_charAttributes
operator|)
expr_stmt|;
name|void
modifier|*
name|m
init|=
name|memory
operator|+
name|space_charAttributes
operator|+
name|space_logClusters
decl_stmt|;
name|glyphLayout
operator|=
name|QGlyphLayout
argument_list|(
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|m
argument_list|)
argument_list|,
name|str
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|glyphLayout
operator|.
name|clear
argument_list|()
expr_stmt|;
name|memset
argument_list|(
name|memory
argument_list|,
literal|0
argument_list|,
name|space_charAttributes
operator|*
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|used
operator|=
literal|0
expr_stmt|;
name|hasBidi
operator|=
literal|false
expr_stmt|;
name|layoutState
operator|=
name|LayoutEmpty
expr_stmt|;
name|haveCharAttributes
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~LayoutData
name|QTextEngine
operator|::
name|LayoutData
operator|::
name|~
name|LayoutData
parameter_list|()
block|{
if|if
condition|(
operator|!
name|memory_on_stack
condition|)
name|free
argument_list|(
name|memory
argument_list|)
expr_stmt|;
name|memory
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|reallocate
name|bool
name|QTextEngine
operator|::
name|LayoutData
operator|::
name|reallocate
parameter_list|(
name|int
name|totalGlyphs
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|totalGlyphs
operator|>=
name|glyphLayout
operator|.
name|numGlyphs
argument_list|)
expr_stmt|;
if|if
condition|(
name|memory_on_stack
operator|&&
name|available_glyphs
operator|>=
name|totalGlyphs
condition|)
block|{
name|glyphLayout
operator|.
name|grow
argument_list|(
name|glyphLayout
operator|.
name|data
argument_list|()
argument_list|,
name|totalGlyphs
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|int
name|space_charAttributes
init|=
sizeof|sizeof
argument_list|(
name|HB_CharAttributes
argument_list|)
operator|*
name|string
operator|.
name|length
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|space_logClusters
init|=
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
operator|*
name|string
operator|.
name|length
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|space_glyphs
init|=
name|QGlyphLayout
operator|::
name|spaceNeededForGlyphLayout
argument_list|(
name|totalGlyphs
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|+
literal|2
decl_stmt|;
name|int
name|newAllocated
init|=
name|space_charAttributes
operator|+
name|space_glyphs
operator|+
name|space_logClusters
decl_stmt|;
comment|// These values can be negative if the length of string/glyphs causes overflow,
comment|// we can't layout such a long string all at once, so return false here to
comment|// indicate there is a failure
if|if
condition|(
name|space_charAttributes
operator|<
literal|0
operator|||
name|space_logClusters
operator|<
literal|0
operator|||
name|space_glyphs
operator|<
literal|0
operator|||
name|newAllocated
operator|<
name|allocated
condition|)
block|{
name|layoutState
operator|=
name|LayoutFailed
expr_stmt|;
return|return
literal|false
return|;
block|}
name|void
modifier|*
modifier|*
name|newMem
init|=
name|memory
decl_stmt|;
name|newMem
operator|=
operator|(
name|void
operator|*
operator|*
operator|)
operator|::
name|realloc
argument_list|(
name|memory_on_stack
condition|?
literal|0
else|:
name|memory
argument_list|,
name|newAllocated
operator|*
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|newMem
condition|)
block|{
name|layoutState
operator|=
name|LayoutFailed
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|memory_on_stack
condition|)
name|memcpy
argument_list|(
name|newMem
argument_list|,
name|memory
argument_list|,
name|allocated
operator|*
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
expr_stmt|;
name|memory
operator|=
name|newMem
expr_stmt|;
name|memory_on_stack
operator|=
literal|false
expr_stmt|;
name|void
modifier|*
modifier|*
name|m
init|=
name|memory
decl_stmt|;
name|m
operator|+=
name|space_charAttributes
expr_stmt|;
name|logClustersPtr
operator|=
operator|(
name|unsigned
name|short
operator|*
operator|)
name|m
expr_stmt|;
name|m
operator|+=
name|space_logClusters
expr_stmt|;
specifier|const
name|int
name|space_preGlyphLayout
init|=
name|space_charAttributes
operator|+
name|space_logClusters
decl_stmt|;
if|if
condition|(
name|allocated
operator|<
name|space_preGlyphLayout
condition|)
name|memset
argument_list|(
name|memory
operator|+
name|allocated
argument_list|,
literal|0
argument_list|,
operator|(
name|space_preGlyphLayout
operator|-
name|allocated
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
expr_stmt|;
name|glyphLayout
operator|.
name|grow
argument_list|(
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|m
argument_list|)
argument_list|,
name|totalGlyphs
argument_list|)
expr_stmt|;
name|allocated
operator|=
name|newAllocated
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// grow to the new size, copying the existing data to the new layout
end_comment
begin_function
DECL|function|grow
name|void
name|QGlyphLayout
operator|::
name|grow
parameter_list|(
name|char
modifier|*
name|address
parameter_list|,
name|int
name|totalGlyphs
parameter_list|)
block|{
name|QGlyphLayout
name|oldLayout
argument_list|(
name|address
argument_list|,
name|numGlyphs
argument_list|)
decl_stmt|;
name|QGlyphLayout
name|newLayout
argument_list|(
name|address
argument_list|,
name|totalGlyphs
argument_list|)
decl_stmt|;
if|if
condition|(
name|numGlyphs
condition|)
block|{
comment|// move the existing data
name|memmove
argument_list|(
name|newLayout
operator|.
name|attributes
argument_list|,
name|oldLayout
operator|.
name|attributes
argument_list|,
name|numGlyphs
operator|*
sizeof|sizeof
argument_list|(
name|HB_GlyphAttributes
argument_list|)
argument_list|)
expr_stmt|;
name|memmove
argument_list|(
name|newLayout
operator|.
name|justifications
argument_list|,
name|oldLayout
operator|.
name|justifications
argument_list|,
name|numGlyphs
operator|*
sizeof|sizeof
argument_list|(
name|QGlyphJustification
argument_list|)
argument_list|)
expr_stmt|;
name|memmove
argument_list|(
name|newLayout
operator|.
name|advances_y
argument_list|,
name|oldLayout
operator|.
name|advances_y
argument_list|,
name|numGlyphs
operator|*
sizeof|sizeof
argument_list|(
name|QFixed
argument_list|)
argument_list|)
expr_stmt|;
name|memmove
argument_list|(
name|newLayout
operator|.
name|advances_x
argument_list|,
name|oldLayout
operator|.
name|advances_x
argument_list|,
name|numGlyphs
operator|*
sizeof|sizeof
argument_list|(
name|QFixed
argument_list|)
argument_list|)
expr_stmt|;
name|memmove
argument_list|(
name|newLayout
operator|.
name|glyphs
argument_list|,
name|oldLayout
operator|.
name|glyphs
argument_list|,
name|numGlyphs
operator|*
sizeof|sizeof
argument_list|(
name|HB_Glyph
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// clear the new data
name|newLayout
operator|.
name|clear
argument_list|(
name|numGlyphs
argument_list|)
expr_stmt|;
operator|*
name|this
operator|=
name|newLayout
expr_stmt|;
block|}
end_function
begin_function
DECL|function|freeMemory
name|void
name|QTextEngine
operator|::
name|freeMemory
parameter_list|()
block|{
if|if
condition|(
operator|!
name|stackEngine
condition|)
block|{
operator|delete
name|layoutData
expr_stmt|;
name|layoutData
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|layoutData
operator|->
name|used
operator|=
literal|0
expr_stmt|;
name|layoutData
operator|->
name|hasBidi
operator|=
literal|false
expr_stmt|;
name|layoutData
operator|->
name|layoutState
operator|=
name|LayoutEmpty
expr_stmt|;
name|layoutData
operator|->
name|haveCharAttributes
operator|=
literal|false
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lines
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|lines
index|[
name|i
index|]
operator|.
name|justified
operator|=
literal|0
expr_stmt|;
name|lines
index|[
name|i
index|]
operator|.
name|gridfitted
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|formatIndex
name|int
name|QTextEngine
operator|::
name|formatIndex
parameter_list|(
specifier|const
name|QScriptItem
modifier|*
name|si
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|specialData
operator|&&
operator|!
name|specialData
operator|->
name|resolvedFormatIndices
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|specialData
operator|->
name|resolvedFormatIndices
operator|.
name|at
argument_list|(
name|si
operator|-
operator|&
name|layoutData
operator|->
name|items
index|[
literal|0
index|]
argument_list|)
return|;
name|QTextDocumentPrivate
modifier|*
name|p
init|=
name|block
operator|.
name|docHandle
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|p
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|pos
init|=
name|si
operator|->
name|position
decl_stmt|;
if|if
condition|(
name|specialData
operator|&&
name|si
operator|->
name|position
operator|>=
name|specialData
operator|->
name|preeditPosition
condition|)
block|{
if|if
condition|(
name|si
operator|->
name|position
operator|<
name|specialData
operator|->
name|preeditPosition
operator|+
name|specialData
operator|->
name|preeditText
operator|.
name|length
argument_list|()
condition|)
name|pos
operator|=
name|qMax
argument_list|(
name|specialData
operator|->
name|preeditPosition
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|pos
operator|-=
name|specialData
operator|->
name|preeditText
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|QTextDocumentPrivate
operator|::
name|FragmentIterator
name|it
init|=
name|p
operator|->
name|find
argument_list|(
name|block
operator|.
name|position
argument_list|()
operator|+
name|pos
argument_list|)
decl_stmt|;
return|return
name|it
operator|.
name|value
argument_list|()
operator|->
name|format
return|;
block|}
end_function
begin_function
DECL|function|format
name|QTextCharFormat
name|QTextEngine
operator|::
name|format
parameter_list|(
specifier|const
name|QScriptItem
modifier|*
name|si
parameter_list|)
specifier|const
block|{
name|QTextCharFormat
name|format
decl_stmt|;
specifier|const
name|QTextFormatCollection
modifier|*
name|formats
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|block
operator|.
name|docHandle
argument_list|()
condition|)
block|{
name|formats
operator|=
name|this
operator|->
name|formats
argument_list|()
expr_stmt|;
name|format
operator|=
name|formats
operator|->
name|charFormat
argument_list|(
name|formatIndex
argument_list|(
name|si
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|specialData
operator|&&
name|specialData
operator|->
name|resolvedFormatIndices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|end
init|=
name|si
operator|->
name|position
operator|+
name|length
argument_list|(
name|si
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|specialData
operator|->
name|addFormats
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QTextLayout
operator|::
name|FormatRange
modifier|&
name|r
init|=
name|specialData
operator|->
name|addFormats
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|start
operator|<=
name|si
operator|->
name|position
operator|&&
name|r
operator|.
name|start
operator|+
name|r
operator|.
name|length
operator|>=
name|end
condition|)
block|{
if|if
condition|(
operator|!
name|specialData
operator|->
name|addFormatIndices
operator|.
name|isEmpty
argument_list|()
condition|)
name|format
operator|.
name|merge
argument_list|(
name|formats
operator|->
name|format
argument_list|(
name|specialData
operator|->
name|addFormatIndices
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|format
operator|.
name|merge
argument_list|(
name|r
operator|.
name|format
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|format
return|;
block|}
end_function
begin_function
DECL|function|addRequiredBoundaries
name|void
name|QTextEngine
operator|::
name|addRequiredBoundaries
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|specialData
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|specialData
operator|->
name|addFormats
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QTextLayout
operator|::
name|FormatRange
modifier|&
name|r
init|=
name|specialData
operator|->
name|addFormats
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|setBoundary
argument_list|(
name|r
operator|.
name|start
argument_list|)
expr_stmt|;
name|setBoundary
argument_list|(
name|r
operator|.
name|start
operator|+
name|r
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//qDebug("adding boundaries %d %d", r.start, r.start+r.length);
block|}
block|}
block|}
end_function
begin_function
DECL|function|atWordSeparator
name|bool
name|QTextEngine
operator|::
name|atWordSeparator
parameter_list|(
name|int
name|position
parameter_list|)
specifier|const
block|{
specifier|const
name|QChar
name|c
init|=
name|layoutData
operator|->
name|string
operator|.
name|at
argument_list|(
name|position
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|c
operator|.
name|toLatin1
argument_list|()
condition|)
block|{
case|case
literal|'.'
case|:
case|case
literal|','
case|:
case|case
literal|'?'
case|:
case|case
literal|'!'
case|:
case|case
literal|'@'
case|:
case|case
literal|'#'
case|:
case|case
literal|'$'
case|:
case|case
literal|':'
case|:
case|case
literal|';'
case|:
case|case
literal|'-'
case|:
case|case
literal|'<'
case|:
case|case
literal|'>'
case|:
case|case
literal|'['
case|:
case|case
literal|']'
case|:
case|case
literal|'('
case|:
case|case
literal|')'
case|:
case|case
literal|'{'
case|:
case|case
literal|'}'
case|:
case|case
literal|'='
case|:
case|case
literal|'/'
case|:
case|case
literal|'+'
case|:
case|case
literal|'%'
case|:
case|case
literal|'&'
case|:
case|case
literal|'^'
case|:
case|case
literal|'*'
case|:
case|case
literal|'\''
case|:
case|case
literal|'"'
case|:
case|case
literal|'`'
case|:
case|case
literal|'~'
case|:
case|case
literal|'|'
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|atSpace
name|bool
name|QTextEngine
operator|::
name|atSpace
parameter_list|(
name|int
name|position
parameter_list|)
specifier|const
block|{
specifier|const
name|QChar
name|c
init|=
name|layoutData
operator|->
name|string
operator|.
name|at
argument_list|(
name|position
argument_list|)
decl_stmt|;
return|return
name|c
operator|==
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|||
name|c
operator|==
name|QChar
operator|::
name|Nbsp
operator|||
name|c
operator|==
name|QChar
operator|::
name|LineSeparator
operator|||
name|c
operator|==
name|QLatin1Char
argument_list|(
literal|'\t'
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|indexAdditionalFormats
name|void
name|QTextEngine
operator|::
name|indexAdditionalFormats
parameter_list|()
block|{
if|if
condition|(
operator|!
name|block
operator|.
name|docHandle
argument_list|()
condition|)
return|return;
name|specialData
operator|->
name|addFormatIndices
operator|.
name|resize
argument_list|(
name|specialData
operator|->
name|addFormats
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QTextFormatCollection
modifier|*
specifier|const
name|formats
init|=
name|this
operator|->
name|formats
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|specialData
operator|->
name|addFormats
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|specialData
operator|->
name|addFormatIndices
index|[
name|i
index|]
operator|=
name|formats
operator|->
name|indexForFormat
argument_list|(
name|specialData
operator|->
name|addFormats
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|format
argument_list|)
expr_stmt|;
name|specialData
operator|->
name|addFormats
index|[
name|i
index|]
operator|.
name|format
operator|=
name|QTextCharFormat
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/* These two helper functions are used to determine whether we need to insert a ZWJ character    between the text that gets truncated and the ellipsis. This is important to get    correctly shaped results for arabic text. */
end_comment
begin_function
DECL|function|nextCharJoins
specifier|static
specifier|inline
name|bool
name|nextCharJoins
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
while|while
condition|(
name|pos
operator|<
name|string
operator|.
name|length
argument_list|()
operator|&&
name|string
operator|.
name|at
argument_list|(
name|pos
argument_list|)
operator|.
name|category
argument_list|()
operator|==
name|QChar
operator|::
name|Mark_NonSpacing
condition|)
operator|++
name|pos
expr_stmt|;
if|if
condition|(
name|pos
operator|==
name|string
operator|.
name|length
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
name|string
operator|.
name|at
argument_list|(
name|pos
argument_list|)
operator|.
name|joining
argument_list|()
operator|!=
name|QChar
operator|::
name|OtherJoining
return|;
block|}
end_function
begin_function
DECL|function|prevCharJoins
specifier|static
specifier|inline
name|bool
name|prevCharJoins
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
while|while
condition|(
name|pos
operator|>
literal|0
operator|&&
name|string
operator|.
name|at
argument_list|(
name|pos
operator|-
literal|1
argument_list|)
operator|.
name|category
argument_list|()
operator|==
name|QChar
operator|::
name|Mark_NonSpacing
condition|)
operator|--
name|pos
expr_stmt|;
if|if
condition|(
name|pos
operator|==
literal|0
condition|)
return|return
literal|false
return|;
name|QChar
operator|::
name|Joining
name|joining
init|=
name|string
operator|.
name|at
argument_list|(
name|pos
operator|-
literal|1
argument_list|)
operator|.
name|joining
argument_list|()
decl_stmt|;
return|return
operator|(
name|joining
operator|==
name|QChar
operator|::
name|Dual
operator|||
name|joining
operator|==
name|QChar
operator|::
name|Center
operator|)
return|;
block|}
end_function
begin_function
DECL|function|elidedText
name|QString
name|QTextEngine
operator|::
name|elidedText
parameter_list|(
name|Qt
operator|::
name|TextElideMode
name|mode
parameter_list|,
specifier|const
name|QFixed
modifier|&
name|width
parameter_list|,
name|int
name|flags
parameter_list|)
specifier|const
block|{
comment|//    qDebug()<< "elidedText; available width"<< width.toReal()<< "text width:"<< this->width(0, layoutData->string.length()).toReal();
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|TextShowMnemonic
condition|)
block|{
name|itemize
argument_list|()
expr_stmt|;
name|HB_CharAttributes
modifier|*
name|attributes
init|=
cast|const_cast
argument_list|<
name|HB_CharAttributes
operator|*
argument_list|>
argument_list|(
name|this
operator|->
name|attributes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
condition|)
return|return
name|QString
argument_list|()
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|layoutData
operator|->
name|items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QScriptItem
modifier|&
name|si
init|=
name|layoutData
operator|->
name|items
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|si
operator|.
name|num_glyphs
condition|)
name|shape
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|unsigned
name|short
modifier|*
name|logClusters
init|=
name|this
operator|->
name|logClusters
argument_list|(
operator|&
name|si
argument_list|)
decl_stmt|;
name|QGlyphLayout
name|glyphs
init|=
name|shapedGlyphs
argument_list|(
operator|&
name|si
argument_list|)
decl_stmt|;
specifier|const
name|int
name|end
init|=
name|si
operator|.
name|position
operator|+
name|length
argument_list|(
operator|&
name|si
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|si
operator|.
name|position
init|;
name|i
operator|<
name|end
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|layoutData
operator|->
name|string
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'&'
argument_list|)
condition|)
block|{
specifier|const
name|int
name|gp
init|=
name|logClusters
index|[
name|i
operator|-
name|si
operator|.
name|position
index|]
decl_stmt|;
name|glyphs
operator|.
name|attributes
index|[
name|gp
index|]
operator|.
name|dontPrint
operator|=
literal|true
expr_stmt|;
name|attributes
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|charStop
operator|=
literal|false
expr_stmt|;
name|attributes
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|whiteSpace
operator|=
literal|false
expr_stmt|;
name|attributes
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|lineBreakType
operator|=
name|HB_NoBreak
expr_stmt|;
if|if
condition|(
name|layoutData
operator|->
name|string
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'&'
argument_list|)
condition|)
operator|++
name|i
expr_stmt|;
block|}
block|}
block|}
block|}
name|validate
argument_list|()
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|Qt
operator|::
name|ElideNone
operator|||
name|this
operator|->
name|width
argument_list|(
literal|0
argument_list|,
name|layoutData
operator|->
name|string
operator|.
name|length
argument_list|()
argument_list|)
operator|<=
name|width
operator|||
name|layoutData
operator|->
name|string
operator|.
name|length
argument_list|()
operator|<=
literal|1
condition|)
return|return
name|layoutData
operator|->
name|string
return|;
name|QFixed
name|ellipsisWidth
decl_stmt|;
name|QString
name|ellipsisText
decl_stmt|;
block|{
name|QChar
name|ellipsisChar
argument_list|(
literal|0x2026
argument_list|)
decl_stmt|;
name|QFontEngine
modifier|*
name|fe
init|=
name|fnt
operator|.
name|d
operator|->
name|engineForScript
argument_list|(
name|QUnicodeTables
operator|::
name|Common
argument_list|)
decl_stmt|;
name|QGlyphLayoutArray
argument_list|<
literal|1
argument_list|>
name|ellipsisGlyph
decl_stmt|;
block|{
name|QFontEngine
modifier|*
name|feForEllipsis
init|=
operator|(
name|fe
operator|->
name|type
argument_list|()
operator|==
name|QFontEngine
operator|::
name|Multi
operator|)
condition|?
cast|static_cast
argument_list|<
name|QFontEngineMulti
operator|*
argument_list|>
argument_list|(
name|fe
argument_list|)
operator|->
name|engine
argument_list|(
literal|0
argument_list|)
else|:
name|fe
decl_stmt|;
if|if
condition|(
name|feForEllipsis
operator|->
name|type
argument_list|()
operator|==
name|QFontEngine
operator|::
name|Mac
condition|)
name|feForEllipsis
operator|=
name|fe
expr_stmt|;
comment|// the lookup can be really slow when we use XLFD fonts
if|if
condition|(
name|feForEllipsis
operator|->
name|type
argument_list|()
operator|!=
name|QFontEngine
operator|::
name|XLFD
operator|&&
name|feForEllipsis
operator|->
name|canRender
argument_list|(
operator|&
name|ellipsisChar
argument_list|,
literal|1
argument_list|)
condition|)
block|{
name|int
name|nGlyphs
init|=
literal|1
decl_stmt|;
name|feForEllipsis
operator|->
name|stringToCMap
argument_list|(
operator|&
name|ellipsisChar
argument_list|,
literal|1
argument_list|,
operator|&
name|ellipsisGlyph
argument_list|,
operator|&
name|nGlyphs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ellipsisGlyph
operator|.
name|glyphs
index|[
literal|0
index|]
condition|)
block|{
name|ellipsisWidth
operator|=
name|ellipsisGlyph
operator|.
name|advances_x
index|[
literal|0
index|]
expr_stmt|;
name|ellipsisText
operator|=
name|ellipsisChar
expr_stmt|;
block|}
else|else
block|{
name|QString
name|dotDotDot
argument_list|(
name|QLatin1String
argument_list|(
literal|"..."
argument_list|)
argument_list|)
decl_stmt|;
name|QGlyphLayoutArray
argument_list|<
literal|3
argument_list|>
name|glyphs
decl_stmt|;
name|int
name|nGlyphs
init|=
literal|3
decl_stmt|;
if|if
condition|(
operator|!
name|fe
operator|->
name|stringToCMap
argument_list|(
name|dotDotDot
operator|.
name|constData
argument_list|()
argument_list|,
literal|3
argument_list|,
operator|&
name|glyphs
argument_list|,
operator|&
name|nGlyphs
argument_list|,
literal|0
argument_list|)
condition|)
comment|// should never happen...
return|return
name|layoutData
operator|->
name|string
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nGlyphs
condition|;
operator|++
name|i
control|)
name|ellipsisWidth
operator|+=
name|glyphs
operator|.
name|advances_x
index|[
name|i
index|]
expr_stmt|;
name|ellipsisText
operator|=
name|dotDotDot
expr_stmt|;
block|}
block|}
specifier|const
name|QFixed
name|availableWidth
init|=
name|width
operator|-
name|ellipsisWidth
decl_stmt|;
if|if
condition|(
name|availableWidth
operator|<
literal|0
condition|)
return|return
name|QString
argument_list|()
return|;
specifier|const
name|HB_CharAttributes
modifier|*
name|attributes
init|=
name|this
operator|->
name|attributes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
condition|)
return|return
name|QString
argument_list|()
return|;
if|if
condition|(
name|mode
operator|==
name|Qt
operator|::
name|ElideRight
condition|)
block|{
name|QFixed
name|currentWidth
decl_stmt|;
name|int
name|pos
decl_stmt|;
name|int
name|nextBreak
init|=
literal|0
decl_stmt|;
do|do
block|{
name|pos
operator|=
name|nextBreak
expr_stmt|;
operator|++
name|nextBreak
expr_stmt|;
while|while
condition|(
name|nextBreak
operator|<
name|layoutData
operator|->
name|string
operator|.
name|length
argument_list|()
operator|&&
operator|!
name|attributes
index|[
name|nextBreak
index|]
operator|.
name|charStop
condition|)
operator|++
name|nextBreak
expr_stmt|;
name|currentWidth
operator|+=
name|this
operator|->
name|width
argument_list|(
name|pos
argument_list|,
name|nextBreak
operator|-
name|pos
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|nextBreak
operator|<
name|layoutData
operator|->
name|string
operator|.
name|length
argument_list|()
operator|&&
name|currentWidth
operator|<
name|availableWidth
condition|)
do|;
if|if
condition|(
name|nextCharJoins
argument_list|(
name|layoutData
operator|->
name|string
argument_list|,
name|pos
argument_list|)
condition|)
name|ellipsisText
operator|.
name|prepend
argument_list|(
name|QChar
argument_list|(
literal|0x200d
argument_list|)
comment|/* ZWJ */
argument_list|)
expr_stmt|;
return|return
name|layoutData
operator|->
name|string
operator|.
name|left
argument_list|(
name|pos
argument_list|)
operator|+
name|ellipsisText
return|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|Qt
operator|::
name|ElideLeft
condition|)
block|{
name|QFixed
name|currentWidth
decl_stmt|;
name|int
name|pos
decl_stmt|;
name|int
name|nextBreak
init|=
name|layoutData
operator|->
name|string
operator|.
name|length
argument_list|()
decl_stmt|;
do|do
block|{
name|pos
operator|=
name|nextBreak
expr_stmt|;
operator|--
name|nextBreak
expr_stmt|;
while|while
condition|(
name|nextBreak
operator|>
literal|0
operator|&&
operator|!
name|attributes
index|[
name|nextBreak
index|]
operator|.
name|charStop
condition|)
operator|--
name|nextBreak
expr_stmt|;
name|currentWidth
operator|+=
name|this
operator|->
name|width
argument_list|(
name|nextBreak
argument_list|,
name|pos
operator|-
name|nextBreak
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|nextBreak
operator|>
literal|0
operator|&&
name|currentWidth
operator|<
name|availableWidth
condition|)
do|;
if|if
condition|(
name|prevCharJoins
argument_list|(
name|layoutData
operator|->
name|string
argument_list|,
name|pos
argument_list|)
condition|)
name|ellipsisText
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0x200d
argument_list|)
comment|/* ZWJ */
argument_list|)
expr_stmt|;
return|return
name|ellipsisText
operator|+
name|layoutData
operator|->
name|string
operator|.
name|mid
argument_list|(
name|pos
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|Qt
operator|::
name|ElideMiddle
condition|)
block|{
name|QFixed
name|leftWidth
decl_stmt|;
name|QFixed
name|rightWidth
decl_stmt|;
name|int
name|leftPos
init|=
literal|0
decl_stmt|;
name|int
name|nextLeftBreak
init|=
literal|0
decl_stmt|;
name|int
name|rightPos
init|=
name|layoutData
operator|->
name|string
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|nextRightBreak
init|=
name|layoutData
operator|->
name|string
operator|.
name|length
argument_list|()
decl_stmt|;
do|do
block|{
name|leftPos
operator|=
name|nextLeftBreak
expr_stmt|;
name|rightPos
operator|=
name|nextRightBreak
expr_stmt|;
operator|++
name|nextLeftBreak
expr_stmt|;
while|while
condition|(
name|nextLeftBreak
operator|<
name|layoutData
operator|->
name|string
operator|.
name|length
argument_list|()
operator|&&
operator|!
name|attributes
index|[
name|nextLeftBreak
index|]
operator|.
name|charStop
condition|)
operator|++
name|nextLeftBreak
expr_stmt|;
operator|--
name|nextRightBreak
expr_stmt|;
while|while
condition|(
name|nextRightBreak
operator|>
literal|0
operator|&&
operator|!
name|attributes
index|[
name|nextRightBreak
index|]
operator|.
name|charStop
condition|)
operator|--
name|nextRightBreak
expr_stmt|;
name|leftWidth
operator|+=
name|this
operator|->
name|width
argument_list|(
name|leftPos
argument_list|,
name|nextLeftBreak
operator|-
name|leftPos
argument_list|)
expr_stmt|;
name|rightWidth
operator|+=
name|this
operator|->
name|width
argument_list|(
name|nextRightBreak
argument_list|,
name|rightPos
operator|-
name|nextRightBreak
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|nextLeftBreak
argument_list|<
name|layoutData
operator|->
name|string
operator|.
name|length
operator|(
operator|)
operator|&&
name|nextRightBreak
argument_list|>
literal|0
operator|&&
name|leftWidth
operator|+
name|rightWidth
operator|<
name|availableWidth
condition|)
do|;
if|if
condition|(
name|nextCharJoins
argument_list|(
name|layoutData
operator|->
name|string
argument_list|,
name|leftPos
argument_list|)
condition|)
name|ellipsisText
operator|.
name|prepend
argument_list|(
name|QChar
argument_list|(
literal|0x200d
argument_list|)
comment|/* ZWJ */
argument_list|)
expr_stmt|;
if|if
condition|(
name|prevCharJoins
argument_list|(
name|layoutData
operator|->
name|string
argument_list|,
name|rightPos
argument_list|)
condition|)
name|ellipsisText
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0x200d
argument_list|)
comment|/* ZWJ */
argument_list|)
expr_stmt|;
return|return
name|layoutData
operator|->
name|string
operator|.
name|left
argument_list|(
name|leftPos
argument_list|)
operator|+
name|ellipsisText
operator|+
name|layoutData
operator|->
name|string
operator|.
name|mid
argument_list|(
name|rightPos
argument_list|)
return|;
block|}
return|return
name|layoutData
operator|->
name|string
return|;
block|}
end_function
begin_function
DECL|function|setBoundary
name|void
name|QTextEngine
operator|::
name|setBoundary
parameter_list|(
name|int
name|strPos
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|strPos
operator|<=
literal|0
operator|||
name|strPos
operator|>=
name|layoutData
operator|->
name|string
operator|.
name|length
argument_list|()
condition|)
return|return;
name|int
name|itemToSplit
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|itemToSplit
operator|<
name|layoutData
operator|->
name|items
operator|.
name|size
argument_list|()
operator|&&
name|layoutData
operator|->
name|items
operator|.
name|at
argument_list|(
name|itemToSplit
argument_list|)
operator|.
name|position
operator|<=
name|strPos
condition|)
name|itemToSplit
operator|++
expr_stmt|;
name|itemToSplit
operator|--
expr_stmt|;
if|if
condition|(
name|layoutData
operator|->
name|items
operator|.
name|at
argument_list|(
name|itemToSplit
argument_list|)
operator|.
name|position
operator|==
name|strPos
condition|)
block|{
comment|// already a split at the requested position
return|return;
block|}
name|splitItem
argument_list|(
name|itemToSplit
argument_list|,
name|strPos
operator|-
name|layoutData
operator|->
name|items
operator|.
name|at
argument_list|(
name|itemToSplit
argument_list|)
operator|.
name|position
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|splitItem
name|void
name|QTextEngine
operator|::
name|splitItem
parameter_list|(
name|int
name|item
parameter_list|,
name|int
name|pos
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|pos
operator|<=
literal|0
condition|)
return|return;
name|layoutData
operator|->
name|items
operator|.
name|insert
argument_list|(
name|item
operator|+
literal|1
argument_list|,
name|layoutData
operator|->
name|items
index|[
name|item
index|]
argument_list|)
expr_stmt|;
name|QScriptItem
modifier|&
name|oldItem
init|=
name|layoutData
operator|->
name|items
index|[
name|item
index|]
decl_stmt|;
name|QScriptItem
modifier|&
name|newItem
init|=
name|layoutData
operator|->
name|items
index|[
name|item
operator|+
literal|1
index|]
decl_stmt|;
name|newItem
operator|.
name|position
operator|+=
name|pos
expr_stmt|;
if|if
condition|(
name|oldItem
operator|.
name|num_glyphs
condition|)
block|{
comment|// already shaped, break glyphs aswell
name|int
name|breakGlyph
init|=
name|logClusters
argument_list|(
operator|&
name|oldItem
argument_list|)
index|[
name|pos
index|]
decl_stmt|;
name|newItem
operator|.
name|num_glyphs
operator|=
name|oldItem
operator|.
name|num_glyphs
operator|-
name|breakGlyph
expr_stmt|;
name|oldItem
operator|.
name|num_glyphs
operator|=
name|breakGlyph
expr_stmt|;
name|newItem
operator|.
name|glyph_data_offset
operator|=
name|oldItem
operator|.
name|glyph_data_offset
operator|+
name|breakGlyph
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newItem
operator|.
name|num_glyphs
condition|;
name|i
operator|++
control|)
name|logClusters
argument_list|(
operator|&
name|newItem
argument_list|)
index|[
name|i
index|]
operator|-=
name|breakGlyph
expr_stmt|;
name|QFixed
name|w
init|=
literal|0
decl_stmt|;
specifier|const
name|QGlyphLayout
name|g
init|=
name|shapedGlyphs
argument_list|(
operator|&
name|oldItem
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|breakGlyph
condition|;
operator|++
name|j
control|)
name|w
operator|+=
name|g
operator|.
name|advances_x
index|[
name|j
index|]
expr_stmt|;
name|newItem
operator|.
name|width
operator|=
name|oldItem
operator|.
name|width
operator|-
name|w
expr_stmt|;
name|oldItem
operator|.
name|width
operator|=
name|w
expr_stmt|;
block|}
comment|//     qDebug("split at position %d itempos=%d", pos, item);
block|}
end_function
begin_function
DECL|function|calculateTabWidth
name|QFixed
name|QTextEngine
operator|::
name|calculateTabWidth
parameter_list|(
name|int
name|item
parameter_list|,
name|QFixed
name|x
parameter_list|)
specifier|const
block|{
specifier|const
name|QScriptItem
modifier|&
name|si
init|=
name|layoutData
operator|->
name|items
index|[
name|item
index|]
decl_stmt|;
name|QFixed
name|dpiScale
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|block
operator|.
name|docHandle
argument_list|()
operator|&&
name|block
operator|.
name|docHandle
argument_list|()
operator|->
name|layout
argument_list|()
condition|)
block|{
name|QPaintDevice
modifier|*
name|pdev
init|=
name|block
operator|.
name|docHandle
argument_list|()
operator|->
name|layout
argument_list|()
operator|->
name|paintDevice
argument_list|()
decl_stmt|;
if|if
condition|(
name|pdev
condition|)
name|dpiScale
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|pdev
operator|->
name|logicalDpiY
argument_list|()
operator|/
name|qreal
argument_list|(
name|qt_defaultDpiY
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dpiScale
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|fnt
operator|.
name|d
operator|->
name|dpi
operator|/
name|qreal
argument_list|(
name|qt_defaultDpiY
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QList
argument_list|<
name|QTextOption
operator|::
name|Tab
argument_list|>
name|tabArray
init|=
name|option
operator|.
name|tabs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tabArray
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
block|{
comment|// rebase the tabArray positions.
name|QList
argument_list|<
name|QTextOption
operator|::
name|Tab
argument_list|>
name|newTabs
decl_stmt|;
name|QList
argument_list|<
name|QTextOption
operator|::
name|Tab
argument_list|>
operator|::
name|Iterator
name|iter
init|=
name|tabArray
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|!=
name|tabArray
operator|.
name|end
argument_list|()
condition|)
block|{
name|QTextOption
operator|::
name|Tab
name|tab
init|=
operator|*
name|iter
decl_stmt|;
if|if
condition|(
name|tab
operator|.
name|type
operator|==
name|QTextOption
operator|::
name|LeftTab
condition|)
name|tab
operator|.
name|type
operator|=
name|QTextOption
operator|::
name|RightTab
expr_stmt|;
elseif|else
if|if
condition|(
name|tab
operator|.
name|type
operator|==
name|QTextOption
operator|::
name|RightTab
condition|)
name|tab
operator|.
name|type
operator|=
name|QTextOption
operator|::
name|LeftTab
expr_stmt|;
name|newTabs
operator|<<
name|tab
expr_stmt|;
operator|++
name|iter
expr_stmt|;
block|}
name|tabArray
operator|=
name|newTabs
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabArray
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFixed
name|tab
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|tabArray
index|[
name|i
index|]
operator|.
name|position
argument_list|)
operator|*
name|dpiScale
decl_stmt|;
if|if
condition|(
name|tab
operator|>
name|x
condition|)
block|{
comment|// this is the tab we need.
name|QTextOption
operator|::
name|Tab
name|tabSpec
init|=
name|tabArray
index|[
name|i
index|]
decl_stmt|;
name|int
name|tabSectionEnd
init|=
name|layoutData
operator|->
name|string
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|tabSpec
operator|.
name|type
operator|==
name|QTextOption
operator|::
name|RightTab
operator|||
name|tabSpec
operator|.
name|type
operator|==
name|QTextOption
operator|::
name|CenterTab
condition|)
block|{
comment|// find next tab to calculate the width required.
name|tab
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|tabSpec
operator|.
name|position
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|item
operator|+
literal|1
init|;
name|i
operator|<
name|layoutData
operator|->
name|items
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|QScriptItem
modifier|&
name|item
init|=
name|layoutData
operator|->
name|items
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|TabOrObject
condition|)
block|{
comment|// found it.
name|tabSectionEnd
operator|=
name|item
operator|.
name|position
expr_stmt|;
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|tabSpec
operator|.
name|type
operator|==
name|QTextOption
operator|::
name|DelimiterTab
condition|)
comment|// find delimitor character to calculate the width required
name|tabSectionEnd
operator|=
name|qMax
argument_list|(
name|si
operator|.
name|position
argument_list|,
name|layoutData
operator|->
name|string
operator|.
name|indexOf
argument_list|(
name|tabSpec
operator|.
name|delimiter
argument_list|,
name|si
operator|.
name|position
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|tabSectionEnd
operator|>
name|si
operator|.
name|position
condition|)
block|{
name|QFixed
name|length
decl_stmt|;
comment|// Calculate the length of text between this tab and the tabSectionEnd
for|for
control|(
name|int
name|i
init|=
name|item
init|;
name|i
operator|<
name|layoutData
operator|->
name|items
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QScriptItem
modifier|&
name|item
init|=
name|layoutData
operator|->
name|items
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|position
operator|>
name|tabSectionEnd
operator|||
name|item
operator|.
name|position
operator|<=
name|si
operator|.
name|position
condition|)
continue|continue;
name|shape
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// first, lets make sure relevant text is already shaped
name|QGlyphLayout
name|glyphs
init|=
name|this
operator|->
name|shapedGlyphs
argument_list|(
operator|&
name|item
argument_list|)
decl_stmt|;
specifier|const
name|int
name|end
init|=
name|qMin
argument_list|(
name|item
operator|.
name|position
operator|+
name|item
operator|.
name|num_glyphs
argument_list|,
name|tabSectionEnd
argument_list|)
operator|-
name|item
operator|.
name|position
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
name|length
operator|+=
name|glyphs
operator|.
name|advances_x
index|[
name|i
index|]
operator|*
operator|!
name|glyphs
operator|.
name|attributes
index|[
name|i
index|]
operator|.
name|dontPrint
expr_stmt|;
if|if
condition|(
name|end
operator|+
name|item
operator|.
name|position
operator|==
name|tabSectionEnd
operator|&&
name|tabSpec
operator|.
name|type
operator|==
name|QTextOption
operator|::
name|DelimiterTab
condition|)
comment|// remove half of matching char
name|length
operator|-=
name|glyphs
operator|.
name|advances_x
index|[
name|end
index|]
operator|/
literal|2
operator|*
operator|!
name|glyphs
operator|.
name|attributes
index|[
name|end
index|]
operator|.
name|dontPrint
expr_stmt|;
block|}
switch|switch
condition|(
name|tabSpec
operator|.
name|type
condition|)
block|{
case|case
name|QTextOption
operator|::
name|CenterTab
case|:
name|length
operator|/=
literal|2
expr_stmt|;
comment|// fall through
case|case
name|QTextOption
operator|::
name|DelimiterTab
case|:
comment|// fall through
case|case
name|QTextOption
operator|::
name|RightTab
case|:
name|tab
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|tabSpec
operator|.
name|position
argument_list|)
operator|*
name|dpiScale
operator|-
name|length
expr_stmt|;
if|if
condition|(
name|tab
operator|<
literal|0
condition|)
comment|// default to tab taking no space
return|return
name|QFixed
argument_list|()
return|;
break|break;
case|case
name|QTextOption
operator|::
name|LeftTab
case|:
break|break;
block|}
block|}
return|return
name|tab
operator|-
name|x
return|;
block|}
block|}
block|}
name|QFixed
name|tab
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|option
operator|.
name|tabStop
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tab
operator|<=
literal|0
condition|)
name|tab
operator|=
literal|80
expr_stmt|;
comment|// default
name|tab
operator|*=
name|dpiScale
expr_stmt|;
name|QFixed
name|nextTabPos
init|=
operator|(
operator|(
name|x
operator|/
name|tab
operator|)
operator|.
name|truncate
argument_list|()
operator|+
literal|1
operator|)
operator|*
name|tab
decl_stmt|;
name|QFixed
name|tabWidth
init|=
name|nextTabPos
operator|-
name|x
decl_stmt|;
return|return
name|tabWidth
return|;
block|}
end_function
begin_function
DECL|function|resolveAdditionalFormats
name|void
name|QTextEngine
operator|::
name|resolveAdditionalFormats
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|specialData
operator|||
name|specialData
operator|->
name|addFormats
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|block
operator|.
name|docHandle
argument_list|()
operator|||
operator|!
name|specialData
operator|->
name|resolvedFormatIndices
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QTextFormatCollection
modifier|*
name|collection
init|=
name|this
operator|->
name|formats
argument_list|()
decl_stmt|;
name|specialData
operator|->
name|resolvedFormatIndices
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|indices
argument_list|(
name|layoutData
operator|->
name|items
operator|.
name|count
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|layoutData
operator|->
name|items
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextCharFormat
name|f
init|=
name|format
argument_list|(
operator|&
name|layoutData
operator|->
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|indices
index|[
name|i
index|]
operator|=
name|collection
operator|->
name|indexForFormat
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|specialData
operator|->
name|resolvedFormatIndices
operator|=
name|indices
expr_stmt|;
block|}
end_function
begin_function
DECL|function|leadingSpaceWidth
name|QFixed
name|QTextEngine
operator|::
name|leadingSpaceWidth
parameter_list|(
specifier|const
name|QScriptLine
modifier|&
name|line
parameter_list|)
block|{
if|if
condition|(
operator|!
name|line
operator|.
name|hasTrailingSpaces
operator|||
operator|(
name|option
operator|.
name|flags
argument_list|()
operator|&
name|QTextOption
operator|::
name|IncludeTrailingSpaces
operator|)
operator|||
operator|!
name|isRightToLeft
argument_list|()
condition|)
return|return
name|QFixed
argument_list|()
return|;
name|int
name|pos
init|=
name|line
operator|.
name|length
decl_stmt|;
specifier|const
name|HB_CharAttributes
modifier|*
name|attributes
init|=
name|this
operator|->
name|attributes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
condition|)
return|return
name|QFixed
argument_list|()
return|;
while|while
condition|(
name|pos
operator|>
literal|0
operator|&&
name|attributes
index|[
name|line
operator|.
name|from
operator|+
name|pos
operator|-
literal|1
index|]
operator|.
name|whiteSpace
condition|)
operator|--
name|pos
expr_stmt|;
return|return
name|width
argument_list|(
name|line
operator|.
name|from
operator|+
name|pos
argument_list|,
name|line
operator|.
name|length
operator|-
name|pos
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|alignLine
name|QFixed
name|QTextEngine
operator|::
name|alignLine
parameter_list|(
specifier|const
name|QScriptLine
modifier|&
name|line
parameter_list|)
block|{
name|QFixed
name|x
init|=
literal|0
decl_stmt|;
name|justify
argument_list|(
name|line
argument_list|)
expr_stmt|;
comment|// if width is QFIXED_MAX that means we used setNumColumns() and that implicitly makes this line left aligned.
if|if
condition|(
operator|!
name|line
operator|.
name|justified
operator|&&
name|line
operator|.
name|width
operator|!=
name|QFIXED_MAX
condition|)
block|{
name|int
name|align
init|=
name|option
operator|.
name|alignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|align
operator|&
name|Qt
operator|::
name|AlignLeft
condition|)
name|x
operator|-=
name|leadingSpaceWidth
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|align
operator|&
name|Qt
operator|::
name|AlignJustify
operator|&&
name|isRightToLeft
argument_list|()
condition|)
name|align
operator|=
name|Qt
operator|::
name|AlignRight
expr_stmt|;
if|if
condition|(
name|align
operator|&
name|Qt
operator|::
name|AlignRight
condition|)
name|x
operator|=
name|line
operator|.
name|width
operator|-
operator|(
name|line
operator|.
name|textAdvance
operator|+
name|leadingSpaceWidth
argument_list|(
name|line
argument_list|)
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|align
operator|&
name|Qt
operator|::
name|AlignHCenter
condition|)
name|x
operator|=
operator|(
name|line
operator|.
name|width
operator|-
name|line
operator|.
name|textAdvance
operator|)
operator|/
literal|2
operator|-
name|leadingSpaceWidth
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
return|return
name|x
return|;
block|}
end_function
begin_function
DECL|function|offsetInLigature
name|QFixed
name|QTextEngine
operator|::
name|offsetInLigature
parameter_list|(
specifier|const
name|QScriptItem
modifier|*
name|si
parameter_list|,
name|int
name|pos
parameter_list|,
name|int
name|max
parameter_list|,
name|int
name|glyph_pos
parameter_list|)
block|{
name|unsigned
name|short
modifier|*
name|logClusters
init|=
name|this
operator|->
name|logClusters
argument_list|(
name|si
argument_list|)
decl_stmt|;
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
init|=
name|shapedGlyphs
argument_list|(
name|si
argument_list|)
decl_stmt|;
name|int
name|offsetInCluster
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|pos
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|logClusters
index|[
name|i
index|]
operator|==
name|glyph_pos
condition|)
name|offsetInCluster
operator|++
expr_stmt|;
else|else
break|break;
block|}
comment|// in the case that the offset is inside a (multi-character) glyph,
comment|// interpolate the position.
if|if
condition|(
name|offsetInCluster
operator|>
literal|0
condition|)
block|{
name|int
name|clusterLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|pos
operator|-
name|offsetInCluster
init|;
name|i
operator|<
name|max
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|logClusters
index|[
name|i
index|]
operator|==
name|glyph_pos
condition|)
name|clusterLength
operator|++
expr_stmt|;
else|else
break|break;
block|}
if|if
condition|(
name|clusterLength
condition|)
return|return
name|glyphs
operator|.
name|advances_x
index|[
name|glyph_pos
index|]
operator|*
name|offsetInCluster
operator|/
name|clusterLength
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|// Scan in logClusters[from..to-1] for glyph_pos
end_comment
begin_function
DECL|function|getClusterLength
name|int
name|QTextEngine
operator|::
name|getClusterLength
parameter_list|(
name|unsigned
name|short
modifier|*
name|logClusters
parameter_list|,
specifier|const
name|HB_CharAttributes
modifier|*
name|attributes
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|int
name|glyph_pos
parameter_list|,
name|int
modifier|*
name|start
parameter_list|)
block|{
name|int
name|clusterLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|from
init|;
name|i
operator|<
name|to
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|logClusters
index|[
name|i
index|]
operator|==
name|glyph_pos
operator|&&
name|attributes
index|[
name|i
index|]
operator|.
name|charStop
condition|)
block|{
if|if
condition|(
operator|*
name|start
operator|<
literal|0
condition|)
operator|*
name|start
operator|=
name|i
expr_stmt|;
name|clusterLength
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|clusterLength
condition|)
break|break;
block|}
return|return
name|clusterLength
return|;
block|}
end_function
begin_function
DECL|function|positionInLigature
name|int
name|QTextEngine
operator|::
name|positionInLigature
parameter_list|(
specifier|const
name|QScriptItem
modifier|*
name|si
parameter_list|,
name|int
name|end
parameter_list|,
name|QFixed
name|x
parameter_list|,
name|QFixed
name|edge
parameter_list|,
name|int
name|glyph_pos
parameter_list|,
name|bool
name|cursorOnCharacter
parameter_list|)
block|{
name|unsigned
name|short
modifier|*
name|logClusters
init|=
name|this
operator|->
name|logClusters
argument_list|(
name|si
argument_list|)
decl_stmt|;
name|int
name|clusterStart
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|clusterLength
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|si
operator|->
name|analysis
operator|.
name|script
operator|!=
name|QUnicodeTables
operator|::
name|Common
operator|&&
name|si
operator|->
name|analysis
operator|.
name|script
operator|!=
name|QUnicodeTables
operator|::
name|Greek
condition|)
block|{
if|if
condition|(
name|glyph_pos
operator|==
operator|-
literal|1
condition|)
return|return
name|si
operator|->
name|position
operator|+
name|end
return|;
else|else
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|logClusters
index|[
name|i
index|]
operator|==
name|glyph_pos
condition|)
break|break;
return|return
name|si
operator|->
name|position
operator|+
name|i
return|;
block|}
block|}
if|if
condition|(
name|glyph_pos
operator|==
operator|-
literal|1
operator|&&
name|end
operator|>
literal|0
condition|)
name|glyph_pos
operator|=
name|logClusters
index|[
name|end
operator|-
literal|1
index|]
expr_stmt|;
else|else
block|{
if|if
condition|(
name|x
operator|<=
name|edge
condition|)
name|glyph_pos
operator|--
expr_stmt|;
block|}
specifier|const
name|HB_CharAttributes
modifier|*
name|attrs
init|=
name|attributes
argument_list|()
decl_stmt|;
name|logClusters
operator|=
name|this
operator|->
name|logClusters
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|clusterLength
operator|=
name|getClusterLength
argument_list|(
name|logClusters
argument_list|,
name|attrs
argument_list|,
literal|0
argument_list|,
name|end
argument_list|,
name|glyph_pos
argument_list|,
operator|&
name|clusterStart
argument_list|)
expr_stmt|;
if|if
condition|(
name|clusterLength
condition|)
block|{
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
init|=
name|shapedGlyphs
argument_list|(
name|si
argument_list|)
decl_stmt|;
name|QFixed
name|glyphWidth
init|=
name|glyphs
operator|.
name|effectiveAdvance
argument_list|(
name|glyph_pos
argument_list|)
decl_stmt|;
comment|// the approximate width of each individual element of the ligature
name|QFixed
name|perItemWidth
init|=
name|glyphWidth
operator|/
name|clusterLength
decl_stmt|;
name|QFixed
name|left
init|=
name|x
operator|>
name|edge
condition|?
name|edge
else|:
name|edge
operator|-
name|glyphWidth
decl_stmt|;
name|int
name|n
init|=
operator|(
operator|(
name|x
operator|-
name|left
operator|)
operator|/
name|perItemWidth
operator|)
operator|.
name|floor
argument_list|()
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QFixed
name|dist
init|=
name|x
operator|-
name|left
operator|-
name|n
operator|*
name|perItemWidth
decl_stmt|;
name|int
name|closestItem
init|=
name|dist
operator|>
operator|(
name|perItemWidth
operator|/
literal|2
operator|)
condition|?
name|n
operator|+
literal|1
else|:
name|n
decl_stmt|;
if|if
condition|(
name|cursorOnCharacter
operator|&&
name|closestItem
operator|>
literal|0
condition|)
name|closestItem
operator|--
expr_stmt|;
name|int
name|pos
init|=
name|si
operator|->
name|position
operator|+
name|clusterStart
operator|+
name|closestItem
decl_stmt|;
comment|// Jump to the next charStop
while|while
condition|(
operator|!
name|attrs
index|[
name|pos
index|]
operator|.
name|charStop
operator|&&
name|pos
operator|<
name|end
condition|)
name|pos
operator|++
expr_stmt|;
return|return
name|pos
return|;
block|}
return|return
name|si
operator|->
name|position
operator|+
name|end
return|;
block|}
end_function
begin_function
DECL|function|previousLogicalPosition
name|int
name|QTextEngine
operator|::
name|previousLogicalPosition
parameter_list|(
name|int
name|oldPos
parameter_list|)
specifier|const
block|{
specifier|const
name|HB_CharAttributes
modifier|*
name|attrs
init|=
name|attributes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attrs
operator|||
name|oldPos
operator|<
literal|0
condition|)
return|return
name|oldPos
return|;
if|if
condition|(
name|oldPos
operator|<=
literal|0
condition|)
return|return
literal|0
return|;
name|oldPos
operator|--
expr_stmt|;
while|while
condition|(
name|oldPos
operator|&&
operator|!
name|attrs
index|[
name|oldPos
index|]
operator|.
name|charStop
condition|)
name|oldPos
operator|--
expr_stmt|;
return|return
name|oldPos
return|;
block|}
end_function
begin_function
DECL|function|nextLogicalPosition
name|int
name|QTextEngine
operator|::
name|nextLogicalPosition
parameter_list|(
name|int
name|oldPos
parameter_list|)
specifier|const
block|{
specifier|const
name|HB_CharAttributes
modifier|*
name|attrs
init|=
name|attributes
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|block
operator|.
name|isValid
argument_list|()
condition|?
name|block
operator|.
name|length
argument_list|()
operator|-
literal|1
else|:
name|layoutData
operator|->
name|string
operator|.
name|length
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|len
operator|<=
name|layoutData
operator|->
name|string
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|attrs
operator|||
name|oldPos
operator|<
literal|0
operator|||
name|oldPos
operator|>=
name|len
condition|)
return|return
name|oldPos
return|;
name|oldPos
operator|++
expr_stmt|;
while|while
condition|(
name|oldPos
operator|<
name|len
operator|&&
operator|!
name|attrs
index|[
name|oldPos
index|]
operator|.
name|charStop
condition|)
name|oldPos
operator|++
expr_stmt|;
return|return
name|oldPos
return|;
block|}
end_function
begin_function
DECL|function|lineNumberForTextPosition
name|int
name|QTextEngine
operator|::
name|lineNumberForTextPosition
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
if|if
condition|(
operator|!
name|layoutData
condition|)
name|itemize
argument_list|()
expr_stmt|;
if|if
condition|(
name|pos
operator|==
name|layoutData
operator|->
name|string
operator|.
name|length
argument_list|()
operator|&&
name|lines
operator|.
name|size
argument_list|()
condition|)
return|return
name|lines
operator|.
name|size
argument_list|()
operator|-
literal|1
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lines
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QScriptLine
modifier|&
name|line
init|=
name|lines
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|from
operator|+
name|line
operator|.
name|length
operator|>
name|pos
condition|)
return|return
name|i
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|insertionPointsForLine
name|void
name|QTextEngine
operator|::
name|insertionPointsForLine
parameter_list|(
name|int
name|lineNum
parameter_list|,
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|insertionPoints
parameter_list|)
block|{
name|QTextLineItemIterator
name|iterator
argument_list|(
name|this
argument_list|,
name|lineNum
argument_list|)
decl_stmt|;
name|bool
name|rtl
init|=
name|isRightToLeft
argument_list|()
decl_stmt|;
name|bool
name|lastLine
init|=
name|lineNum
operator|>=
name|lines
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|!
name|iterator
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
specifier|const
name|QScriptItem
modifier|*
name|si
init|=
operator|&
name|layoutData
operator|->
name|items
index|[
name|iterator
operator|.
name|item
index|]
decl_stmt|;
if|if
condition|(
name|si
operator|->
name|analysis
operator|.
name|bidiLevel
operator|%
literal|2
condition|)
block|{
name|int
name|i
init|=
name|iterator
operator|.
name|itemEnd
operator|-
literal|1
decl_stmt|,
name|min
init|=
name|iterator
operator|.
name|itemStart
decl_stmt|;
if|if
condition|(
name|lastLine
operator|&&
operator|(
name|rtl
condition|?
name|iterator
operator|.
name|atBeginning
argument_list|()
else|:
name|iterator
operator|.
name|atEnd
argument_list|()
operator|)
condition|)
name|i
operator|++
expr_stmt|;
for|for
control|(
init|;
name|i
operator|>=
name|min
condition|;
name|i
operator|--
control|)
name|insertionPoints
operator|.
name|push_back
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|i
init|=
name|iterator
operator|.
name|itemStart
decl_stmt|,
name|max
init|=
name|iterator
operator|.
name|itemEnd
decl_stmt|;
if|if
condition|(
name|lastLine
operator|&&
operator|(
name|rtl
condition|?
name|iterator
operator|.
name|atBeginning
argument_list|()
else|:
name|iterator
operator|.
name|atEnd
argument_list|()
operator|)
condition|)
name|max
operator|++
expr_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|max
condition|;
name|i
operator|++
control|)
name|insertionPoints
operator|.
name|push_back
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|endOfLine
name|int
name|QTextEngine
operator|::
name|endOfLine
parameter_list|(
name|int
name|lineNum
parameter_list|)
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|insertionPoints
decl_stmt|;
name|insertionPointsForLine
argument_list|(
name|lineNum
argument_list|,
name|insertionPoints
argument_list|)
expr_stmt|;
if|if
condition|(
name|insertionPoints
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
return|return
name|insertionPoints
operator|.
name|last
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|beginningOfLine
name|int
name|QTextEngine
operator|::
name|beginningOfLine
parameter_list|(
name|int
name|lineNum
parameter_list|)
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|insertionPoints
decl_stmt|;
name|insertionPointsForLine
argument_list|(
name|lineNum
argument_list|,
name|insertionPoints
argument_list|)
expr_stmt|;
if|if
condition|(
name|insertionPoints
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
return|return
name|insertionPoints
operator|.
name|first
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|positionAfterVisualMovement
name|int
name|QTextEngine
operator|::
name|positionAfterVisualMovement
parameter_list|(
name|int
name|pos
parameter_list|,
name|QTextCursor
operator|::
name|MoveOperation
name|op
parameter_list|)
block|{
if|if
condition|(
operator|!
name|layoutData
condition|)
name|itemize
argument_list|()
expr_stmt|;
name|bool
name|moveRight
init|=
operator|(
name|op
operator|==
name|QTextCursor
operator|::
name|Right
operator|)
decl_stmt|;
name|bool
name|alignRight
init|=
name|isRightToLeft
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|layoutData
operator|->
name|hasBidi
condition|)
return|return
name|moveRight
operator|^
name|alignRight
condition|?
name|nextLogicalPosition
argument_list|(
name|pos
argument_list|)
else|:
name|previousLogicalPosition
argument_list|(
name|pos
argument_list|)
return|;
name|int
name|lineNum
init|=
name|lineNumberForTextPosition
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|lineNum
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|insertionPoints
decl_stmt|;
name|insertionPointsForLine
argument_list|(
name|lineNum
argument_list|,
name|insertionPoints
argument_list|)
expr_stmt|;
name|int
name|i
decl_stmt|,
name|max
init|=
name|insertionPoints
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|max
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|pos
operator|==
name|insertionPoints
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|moveRight
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|max
condition|)
return|return
name|insertionPoints
index|[
name|i
operator|+
literal|1
index|]
return|;
block|}
else|else
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
return|return
name|insertionPoints
index|[
name|i
operator|-
literal|1
index|]
return|;
block|}
if|if
condition|(
name|moveRight
operator|^
name|alignRight
condition|)
block|{
if|if
condition|(
name|lineNum
operator|+
literal|1
operator|<
name|lines
operator|.
name|size
argument_list|()
condition|)
return|return
name|alignRight
condition|?
name|endOfLine
argument_list|(
name|lineNum
operator|+
literal|1
argument_list|)
else|:
name|beginningOfLine
argument_list|(
name|lineNum
operator|+
literal|1
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|lineNum
operator|>
literal|0
condition|)
return|return
name|alignRight
condition|?
name|beginningOfLine
argument_list|(
name|lineNum
operator|-
literal|1
argument_list|)
else|:
name|endOfLine
argument_list|(
name|lineNum
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
return|return
name|pos
return|;
block|}
end_function
begin_constructor
DECL|function|QStackTextEngine
name|QStackTextEngine
operator|::
name|QStackTextEngine
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|,
specifier|const
name|QFont
modifier|&
name|f
parameter_list|)
member_init_list|:
name|QTextEngine
argument_list|(
name|string
argument_list|,
name|f
argument_list|)
member_init_list|,
name|_layoutData
argument_list|(
name|string
argument_list|,
name|_memory
argument_list|,
name|MemSize
argument_list|)
block|{
name|stackEngine
operator|=
literal|true
expr_stmt|;
name|layoutData
operator|=
operator|&
name|_layoutData
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QTextItemInt
name|QTextItemInt
operator|::
name|QTextItemInt
parameter_list|(
specifier|const
name|QScriptItem
modifier|&
name|si
parameter_list|,
name|QFont
modifier|*
name|font
parameter_list|,
specifier|const
name|QTextCharFormat
modifier|&
name|format
parameter_list|)
member_init_list|:
name|justified
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|underlineStyle
argument_list|(
name|QTextCharFormat
operator|::
name|NoUnderline
argument_list|)
member_init_list|,
name|charFormat
argument_list|(
name|format
argument_list|)
member_init_list|,
name|num_chars
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|chars
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|logClusters
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|f
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|fontEngine
argument_list|(
literal|0
argument_list|)
block|{
name|f
operator|=
name|font
expr_stmt|;
name|fontEngine
operator|=
name|f
operator|->
name|d
operator|->
name|engineForScript
argument_list|(
name|si
operator|.
name|analysis
operator|.
name|script
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|fontEngine
argument_list|)
expr_stmt|;
name|initWithScriptItem
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QTextItemInt
name|QTextItemInt
operator|::
name|QTextItemInt
parameter_list|(
specifier|const
name|QGlyphLayout
modifier|&
name|g
parameter_list|,
name|QFont
modifier|*
name|font
parameter_list|,
specifier|const
name|QChar
modifier|*
name|chars_
parameter_list|,
name|int
name|numChars
parameter_list|,
name|QFontEngine
modifier|*
name|fe
parameter_list|,
specifier|const
name|QTextCharFormat
modifier|&
name|format
parameter_list|)
member_init_list|:
name|flags
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|justified
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|underlineStyle
argument_list|(
name|QTextCharFormat
operator|::
name|NoUnderline
argument_list|)
member_init_list|,
name|charFormat
argument_list|(
name|format
argument_list|)
member_init_list|,
name|num_chars
argument_list|(
name|numChars
argument_list|)
member_init_list|,
name|chars
argument_list|(
name|chars_
argument_list|)
member_init_list|,
name|logClusters
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|f
argument_list|(
name|font
argument_list|)
member_init_list|,
name|glyphs
argument_list|(
name|g
argument_list|)
member_init_list|,
name|fontEngine
argument_list|(
name|fe
argument_list|)
block|{ }
end_constructor
begin_comment
comment|// Fix up flags and underlineStyle with given info
end_comment
begin_function
DECL|function|initWithScriptItem
name|void
name|QTextItemInt
operator|::
name|initWithScriptItem
parameter_list|(
specifier|const
name|QScriptItem
modifier|&
name|si
parameter_list|)
block|{
comment|// explicitly initialize flags so that initFontAttributes can be called
comment|// multiple times on the same TextItem
name|flags
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|si
operator|.
name|analysis
operator|.
name|bidiLevel
operator|%
literal|2
condition|)
name|flags
operator||=
name|QTextItem
operator|::
name|RightToLeft
expr_stmt|;
name|ascent
operator|=
name|si
operator|.
name|ascent
expr_stmt|;
name|descent
operator|=
name|si
operator|.
name|descent
expr_stmt|;
if|if
condition|(
name|charFormat
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|TextUnderlineStyle
argument_list|)
condition|)
block|{
name|underlineStyle
operator|=
name|charFormat
operator|.
name|underlineStyle
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|charFormat
operator|.
name|boolProperty
argument_list|(
name|QTextFormat
operator|::
name|FontUnderline
argument_list|)
operator|||
name|f
operator|->
name|d
operator|->
name|underline
condition|)
block|{
name|underlineStyle
operator|=
name|QTextCharFormat
operator|::
name|SingleUnderline
expr_stmt|;
block|}
comment|// compat
if|if
condition|(
name|underlineStyle
operator|==
name|QTextCharFormat
operator|::
name|SingleUnderline
condition|)
name|flags
operator||=
name|QTextItem
operator|::
name|Underline
expr_stmt|;
if|if
condition|(
name|f
operator|->
name|d
operator|->
name|overline
operator|||
name|charFormat
operator|.
name|fontOverline
argument_list|()
condition|)
name|flags
operator||=
name|QTextItem
operator|::
name|Overline
expr_stmt|;
if|if
condition|(
name|f
operator|->
name|d
operator|->
name|strikeOut
operator|||
name|charFormat
operator|.
name|fontStrikeOut
argument_list|()
condition|)
name|flags
operator||=
name|QTextItem
operator|::
name|StrikeOut
expr_stmt|;
block|}
end_function
begin_function
DECL|function|midItem
name|QTextItemInt
name|QTextItemInt
operator|::
name|midItem
parameter_list|(
name|QFontEngine
modifier|*
name|fontEngine
parameter_list|,
name|int
name|firstGlyphIndex
parameter_list|,
name|int
name|numGlyphs
parameter_list|)
specifier|const
block|{
name|QTextItemInt
name|ti
init|=
operator|*
name|this
decl_stmt|;
specifier|const
name|int
name|end
init|=
name|firstGlyphIndex
operator|+
name|numGlyphs
decl_stmt|;
name|ti
operator|.
name|glyphs
operator|=
name|glyphs
operator|.
name|mid
argument_list|(
name|firstGlyphIndex
argument_list|,
name|numGlyphs
argument_list|)
expr_stmt|;
name|ti
operator|.
name|fontEngine
operator|=
name|fontEngine
expr_stmt|;
if|if
condition|(
name|logClusters
operator|&&
name|chars
condition|)
block|{
specifier|const
name|int
name|logClusterOffset
init|=
name|logClusters
index|[
literal|0
index|]
decl_stmt|;
while|while
condition|(
name|logClusters
index|[
name|ti
operator|.
name|chars
operator|-
name|chars
index|]
operator|-
name|logClusterOffset
operator|<
name|firstGlyphIndex
condition|)
operator|++
name|ti
operator|.
name|chars
expr_stmt|;
name|ti
operator|.
name|logClusters
operator|+=
operator|(
name|ti
operator|.
name|chars
operator|-
name|chars
operator|)
expr_stmt|;
name|ti
operator|.
name|num_chars
operator|=
literal|0
expr_stmt|;
name|int
name|char_start
init|=
name|ti
operator|.
name|chars
operator|-
name|chars
decl_stmt|;
while|while
condition|(
name|char_start
operator|+
name|ti
operator|.
name|num_chars
operator|<
name|num_chars
operator|&&
name|ti
operator|.
name|logClusters
index|[
name|ti
operator|.
name|num_chars
index|]
operator|-
name|logClusterOffset
operator|<
name|end
condition|)
operator|++
name|ti
operator|.
name|num_chars
expr_stmt|;
block|}
return|return
name|ti
return|;
block|}
end_function
begin_function
DECL|function|qt_true_matrix
name|QTransform
name|qt_true_matrix
parameter_list|(
name|qreal
name|w
parameter_list|,
name|qreal
name|h
parameter_list|,
name|QTransform
name|x
parameter_list|)
block|{
name|QRectF
name|rect
init|=
name|x
operator|.
name|mapRect
argument_list|(
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|x
operator|*
name|QTransform
operator|::
name|fromTranslate
argument_list|(
operator|-
name|rect
operator|.
name|x
argument_list|()
argument_list|,
operator|-
name|rect
operator|.
name|y
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|transformed
name|glyph_metrics_t
name|glyph_metrics_t
operator|::
name|transformed
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|matrix
operator|.
name|type
argument_list|()
operator|<
name|QTransform
operator|::
name|TxTranslate
condition|)
return|return
operator|*
name|this
return|;
name|glyph_metrics_t
name|m
init|=
operator|*
name|this
decl_stmt|;
name|qreal
name|w
init|=
name|width
operator|.
name|toReal
argument_list|()
decl_stmt|;
name|qreal
name|h
init|=
name|height
operator|.
name|toReal
argument_list|()
decl_stmt|;
name|QTransform
name|xform
init|=
name|qt_true_matrix
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|matrix
argument_list|)
decl_stmt|;
name|QRectF
name|rect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|rect
operator|=
name|xform
operator|.
name|mapRect
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|m
operator|.
name|width
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|height
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QLineF
name|l
init|=
name|xform
operator|.
name|map
argument_list|(
name|QLineF
argument_list|(
name|x
operator|.
name|toReal
argument_list|()
argument_list|,
name|y
operator|.
name|toReal
argument_list|()
argument_list|,
name|xoff
operator|.
name|toReal
argument_list|()
argument_list|,
name|yoff
operator|.
name|toReal
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|m
operator|.
name|x
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|l
operator|.
name|x1
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|y
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|l
operator|.
name|y1
argument_list|()
argument_list|)
expr_stmt|;
comment|// The offset is relative to the baseline which is why we use dx/dy of the line
name|m
operator|.
name|xoff
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|l
operator|.
name|dx
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|yoff
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|l
operator|.
name|dy
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
end_function
begin_constructor
DECL|function|QTextLineItemIterator
name|QTextLineItemIterator
operator|::
name|QTextLineItemIterator
parameter_list|(
name|QTextEngine
modifier|*
name|_eng
parameter_list|,
name|int
name|_lineNum
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QTextLayout
operator|::
name|FormatRange
modifier|*
name|_selection
parameter_list|)
member_init_list|:
name|eng
argument_list|(
name|_eng
argument_list|)
member_init_list|,
name|line
argument_list|(
name|eng
operator|->
name|lines
index|[
name|_lineNum
index|]
argument_list|)
member_init_list|,
name|si
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|lineNum
argument_list|(
name|_lineNum
argument_list|)
member_init_list|,
name|lineEnd
argument_list|(
name|line
operator|.
name|from
operator|+
name|line
operator|.
name|length
argument_list|)
member_init_list|,
name|firstItem
argument_list|(
name|eng
operator|->
name|findItem
argument_list|(
name|line
operator|.
name|from
argument_list|)
argument_list|)
member_init_list|,
name|lastItem
argument_list|(
name|eng
operator|->
name|findItem
argument_list|(
name|lineEnd
operator|-
literal|1
argument_list|)
argument_list|)
member_init_list|,
name|nItems
argument_list|(
operator|(
name|firstItem
operator|>=
literal|0
operator|&&
name|lastItem
operator|>=
name|firstItem
operator|)
condition|?
operator|(
name|lastItem
operator|-
name|firstItem
operator|+
literal|1
operator|)
else|:
literal|0
argument_list|)
member_init_list|,
name|logicalItem
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|item
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|visualOrder
argument_list|(
name|nItems
argument_list|)
member_init_list|,
name|levels
argument_list|(
name|nItems
argument_list|)
member_init_list|,
name|selection
argument_list|(
name|_selection
argument_list|)
block|{
name|pos_x
operator|=
name|x
operator|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|pos
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|+=
name|line
operator|.
name|x
expr_stmt|;
name|x
operator|+=
name|eng
operator|->
name|alignLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nItems
condition|;
operator|++
name|i
control|)
name|levels
index|[
name|i
index|]
operator|=
name|eng
operator|->
name|layoutData
operator|->
name|items
index|[
name|i
operator|+
name|firstItem
index|]
operator|.
name|analysis
operator|.
name|bidiLevel
expr_stmt|;
name|QTextEngine
operator|::
name|bidiReorder
argument_list|(
name|nItems
argument_list|,
name|levels
operator|.
name|data
argument_list|()
argument_list|,
name|visualOrder
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|eng
operator|->
name|shapeLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|next
name|QScriptItem
modifier|&
name|QTextLineItemIterator
operator|::
name|next
parameter_list|()
block|{
name|x
operator|+=
name|itemWidth
expr_stmt|;
operator|++
name|logicalItem
expr_stmt|;
name|item
operator|=
name|visualOrder
index|[
name|logicalItem
index|]
operator|+
name|firstItem
expr_stmt|;
name|itemLength
operator|=
name|eng
operator|->
name|length
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|si
operator|=
operator|&
name|eng
operator|->
name|layoutData
operator|->
name|items
index|[
name|item
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|si
operator|->
name|num_glyphs
condition|)
name|eng
operator|->
name|shape
argument_list|(
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|si
operator|->
name|analysis
operator|.
name|flags
operator|>=
name|QScriptAnalysis
operator|::
name|TabOrObject
condition|)
block|{
name|itemWidth
operator|=
name|si
operator|->
name|width
expr_stmt|;
return|return
operator|*
name|si
return|;
block|}
name|unsigned
name|short
modifier|*
name|logClusters
init|=
name|eng
operator|->
name|logClusters
argument_list|(
name|si
argument_list|)
decl_stmt|;
name|QGlyphLayout
name|glyphs
init|=
name|eng
operator|->
name|shapedGlyphs
argument_list|(
name|si
argument_list|)
decl_stmt|;
name|itemStart
operator|=
name|qMax
argument_list|(
name|line
operator|.
name|from
argument_list|,
name|si
operator|->
name|position
argument_list|)
expr_stmt|;
name|glyphsStart
operator|=
name|logClusters
index|[
name|itemStart
operator|-
name|si
operator|->
name|position
index|]
expr_stmt|;
if|if
condition|(
name|lineEnd
operator|<
name|si
operator|->
name|position
operator|+
name|itemLength
condition|)
block|{
name|itemEnd
operator|=
name|lineEnd
expr_stmt|;
name|glyphsEnd
operator|=
name|logClusters
index|[
name|itemEnd
operator|-
name|si
operator|->
name|position
index|]
expr_stmt|;
block|}
else|else
block|{
name|itemEnd
operator|=
name|si
operator|->
name|position
operator|+
name|itemLength
expr_stmt|;
name|glyphsEnd
operator|=
name|si
operator|->
name|num_glyphs
expr_stmt|;
block|}
comment|// show soft-hyphen at line-break
if|if
condition|(
name|si
operator|->
name|position
operator|+
name|itemLength
operator|>=
name|lineEnd
operator|&&
name|eng
operator|->
name|layoutData
operator|->
name|string
operator|.
name|at
argument_list|(
name|lineEnd
operator|-
literal|1
argument_list|)
operator|==
literal|0x00ad
condition|)
name|glyphs
operator|.
name|attributes
index|[
name|glyphsEnd
operator|-
literal|1
index|]
operator|.
name|dontPrint
operator|=
literal|false
expr_stmt|;
name|itemWidth
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|g
init|=
name|glyphsStart
init|;
name|g
operator|<
name|glyphsEnd
condition|;
operator|++
name|g
control|)
name|itemWidth
operator|+=
name|glyphs
operator|.
name|effectiveAdvance
argument_list|(
name|g
argument_list|)
expr_stmt|;
return|return
operator|*
name|si
return|;
block|}
end_function
begin_function
DECL|function|getSelectionBounds
name|bool
name|QTextLineItemIterator
operator|::
name|getSelectionBounds
parameter_list|(
name|QFixed
modifier|*
name|selectionX
parameter_list|,
name|QFixed
modifier|*
name|selectionWidth
parameter_list|)
specifier|const
block|{
operator|*
name|selectionX
operator|=
operator|*
name|selectionWidth
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|selection
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|si
operator|->
name|analysis
operator|.
name|flags
operator|>=
name|QScriptAnalysis
operator|::
name|TabOrObject
condition|)
block|{
if|if
condition|(
name|si
operator|->
name|position
operator|>=
name|selection
operator|->
name|start
operator|+
name|selection
operator|->
name|length
operator|||
name|si
operator|->
name|position
operator|+
name|itemLength
operator|<=
name|selection
operator|->
name|start
condition|)
return|return
literal|false
return|;
operator|*
name|selectionX
operator|=
name|x
expr_stmt|;
operator|*
name|selectionWidth
operator|=
name|itemWidth
expr_stmt|;
block|}
else|else
block|{
name|unsigned
name|short
modifier|*
name|logClusters
init|=
name|eng
operator|->
name|logClusters
argument_list|(
name|si
argument_list|)
decl_stmt|;
name|QGlyphLayout
name|glyphs
init|=
name|eng
operator|->
name|shapedGlyphs
argument_list|(
name|si
argument_list|)
decl_stmt|;
name|int
name|from
init|=
name|qMax
argument_list|(
name|itemStart
argument_list|,
name|selection
operator|->
name|start
argument_list|)
operator|-
name|si
operator|->
name|position
decl_stmt|;
name|int
name|to
init|=
name|qMin
argument_list|(
name|itemEnd
argument_list|,
name|selection
operator|->
name|start
operator|+
name|selection
operator|->
name|length
argument_list|)
operator|-
name|si
operator|->
name|position
decl_stmt|;
if|if
condition|(
name|from
operator|>=
name|to
condition|)
return|return
literal|false
return|;
name|int
name|start_glyph
init|=
name|logClusters
index|[
name|from
index|]
decl_stmt|;
name|int
name|end_glyph
init|=
operator|(
name|to
operator|==
name|eng
operator|->
name|length
argument_list|(
name|item
argument_list|)
operator|)
condition|?
name|si
operator|->
name|num_glyphs
else|:
name|logClusters
index|[
name|to
index|]
decl_stmt|;
name|QFixed
name|soff
decl_stmt|;
name|QFixed
name|swidth
decl_stmt|;
if|if
condition|(
name|si
operator|->
name|analysis
operator|.
name|bidiLevel
operator|%
literal|2
condition|)
block|{
for|for
control|(
name|int
name|g
init|=
name|glyphsEnd
operator|-
literal|1
init|;
name|g
operator|>=
name|end_glyph
condition|;
operator|--
name|g
control|)
name|soff
operator|+=
name|glyphs
operator|.
name|effectiveAdvance
argument_list|(
name|g
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|g
init|=
name|end_glyph
operator|-
literal|1
init|;
name|g
operator|>=
name|start_glyph
condition|;
operator|--
name|g
control|)
name|swidth
operator|+=
name|glyphs
operator|.
name|effectiveAdvance
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|g
init|=
name|glyphsStart
init|;
name|g
operator|<
name|start_glyph
condition|;
operator|++
name|g
control|)
name|soff
operator|+=
name|glyphs
operator|.
name|effectiveAdvance
argument_list|(
name|g
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|g
init|=
name|start_glyph
init|;
name|g
operator|<
name|end_glyph
condition|;
operator|++
name|g
control|)
name|swidth
operator|+=
name|glyphs
operator|.
name|effectiveAdvance
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
comment|// If the starting character is in the middle of a ligature,
comment|// selection should only contain the right part of that ligature
comment|// glyph, so we need to get the width of the left part here and
comment|// add it to *selectionX
name|QFixed
name|leftOffsetInLigature
init|=
name|eng
operator|->
name|offsetInLigature
argument_list|(
name|si
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|start_glyph
argument_list|)
decl_stmt|;
operator|*
name|selectionX
operator|=
name|x
operator|+
name|soff
operator|+
name|leftOffsetInLigature
expr_stmt|;
operator|*
name|selectionWidth
operator|=
name|swidth
operator|-
name|leftOffsetInLigature
expr_stmt|;
comment|// If the ending character is also part of a ligature, swidth does
comment|// not contain that part yet, we also need to find out the width of
comment|// that left part
operator|*
name|selectionWidth
operator|+=
name|eng
operator|->
name|offsetInLigature
argument_list|(
name|si
argument_list|,
name|to
argument_list|,
name|eng
operator|->
name|length
argument_list|(
name|item
argument_list|)
argument_list|,
name|end_glyph
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
