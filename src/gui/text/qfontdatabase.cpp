begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfontdatabase.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qalgorithms.h"
end_include
begin_include
include|#
directive|include
file|"qguiapplication.h"
end_include
begin_include
include|#
directive|include
file|"qvarlengtharray.h"
end_include
begin_comment
comment|// here or earlier - workaround for VC++6
end_comment
begin_include
include|#
directive|include
file|"qthread.h"
end_include
begin_include
include|#
directive|include
file|"qmutex.h"
end_include
begin_include
include|#
directive|include
file|"qfile.h"
end_include
begin_include
include|#
directive|include
file|"qfileinfo.h"
end_include
begin_include
include|#
directive|include
file|"qfontengine_p.h"
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformintegration.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformfontdatabase.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformtheme.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qcache.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmath.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_comment
comment|// #define QFONTDATABASE_DEBUG
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QFONTDATABASE_DEBUG
end_ifdef
begin_define
DECL|macro|FD_DEBUG
define|#
directive|define
name|FD_DEBUG
value|qDebug
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|FD_DEBUG
define|#
directive|define
name|FD_DEBUG
value|if (false) qDebug
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// #define FONT_MATCH_DEBUG
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|FONT_MATCH_DEBUG
end_ifdef
begin_define
DECL|macro|FM_DEBUG
define|#
directive|define
name|FM_DEBUG
value|qDebug
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|FM_DEBUG
define|#
directive|define
name|FM_DEBUG
value|if (false) qDebug
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|macro|SMOOTH_SCALABLE
define|#
directive|define
name|SMOOTH_SCALABLE
value|0xffff
if|#
directive|if
name|defined
argument_list|(
name|QT_BUILD_INTERNAL
argument_list|)
DECL|variable|qt_enable_test_font
name|bool
name|qt_enable_test_font
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_setQtEnableTestFont
name|Q_AUTOTEST_EXPORT
name|void
name|qt_setQtEnableTestFont
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|qt_enable_test_font
operator|=
name|value
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|getFontWeight
specifier|static
name|int
name|getFontWeight
parameter_list|(
specifier|const
name|QString
modifier|&
name|weightString
parameter_list|)
block|{
name|QString
name|s
init|=
name|weightString
operator|.
name|toLower
argument_list|()
decl_stmt|;
comment|// Order here is important. We want to match the common cases first, but we
comment|// must also take care to acknowledge the cost of our tests.
comment|//
comment|// As a result, we test in two orders; the order of commonness, and the
comment|// order of "expense".
comment|//
comment|// A simple string test is the cheapest, so let's do that first.
comment|// Test in decreasing order of commonness
if|if
condition|(
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"normal"
argument_list|)
operator|||
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"regular"
argument_list|)
condition|)
return|return
name|QFont
operator|::
name|Normal
return|;
if|if
condition|(
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"bold"
argument_list|)
condition|)
return|return
name|QFont
operator|::
name|Bold
return|;
if|if
condition|(
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"semibold"
argument_list|)
operator|||
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"semi bold"
argument_list|)
operator|||
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"demibold"
argument_list|)
operator|||
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"demi bold"
argument_list|)
condition|)
return|return
name|QFont
operator|::
name|DemiBold
return|;
if|if
condition|(
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"medium"
argument_list|)
condition|)
return|return
name|QFont
operator|::
name|Medium
return|;
if|if
condition|(
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"black"
argument_list|)
condition|)
return|return
name|QFont
operator|::
name|Black
return|;
if|if
condition|(
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"light"
argument_list|)
condition|)
return|return
name|QFont
operator|::
name|Light
return|;
if|if
condition|(
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"thin"
argument_list|)
condition|)
return|return
name|QFont
operator|::
name|Thin
return|;
specifier|const
name|QStringRef
name|s2
init|=
name|s
operator|.
name|midRef
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ex"
argument_list|)
argument_list|)
operator|||
name|s
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ul"
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|s2
operator|==
name|QLatin1String
argument_list|(
literal|"tralight"
argument_list|)
operator|||
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"tra light"
argument_list|)
condition|)
return|return
name|QFont
operator|::
name|ExtraLight
return|;
if|if
condition|(
name|s2
operator|==
name|QLatin1String
argument_list|(
literal|"trabold"
argument_list|)
operator|||
name|s2
operator|==
name|QLatin1String
argument_list|(
literal|"tra bold"
argument_list|)
condition|)
return|return
name|QFont
operator|::
name|ExtraBold
return|;
block|}
comment|// Next up, let's see if contains() matches: slightly more expensive, but
comment|// still fast enough.
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"bold"
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"demi"
argument_list|)
argument_list|)
condition|)
return|return
name|QFont
operator|::
name|DemiBold
return|;
return|return
name|QFont
operator|::
name|Bold
return|;
block|}
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"thin"
argument_list|)
argument_list|)
condition|)
return|return
name|QFont
operator|::
name|Thin
return|;
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"light"
argument_list|)
argument_list|)
condition|)
return|return
name|QFont
operator|::
name|Light
return|;
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"black"
argument_list|)
argument_list|)
condition|)
return|return
name|QFont
operator|::
name|Black
return|;
comment|// Now, we perform string translations& comparisons with those.
comment|// These are (very) slow compared to simple string ops, so we do these last.
comment|// As using translated values for such things is not very common, this should
comment|// not be too bad.
if|if
condition|(
name|s
operator|.
name|compare
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Normal"
argument_list|,
literal|"The Normal or Regular font weight"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
return|return
name|QFont
operator|::
name|Normal
return|;
specifier|const
name|QString
name|translatedBold
init|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Bold"
argument_list|)
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
name|translatedBold
condition|)
return|return
name|QFont
operator|::
name|Bold
return|;
if|if
condition|(
name|s
operator|.
name|compare
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Demi Bold"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
return|return
name|QFont
operator|::
name|DemiBold
return|;
if|if
condition|(
name|s
operator|.
name|compare
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Medium"
argument_list|,
literal|"The Medium font weight"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
return|return
name|QFont
operator|::
name|Medium
return|;
if|if
condition|(
name|s
operator|.
name|compare
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Black"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
return|return
name|QFont
operator|::
name|Black
return|;
specifier|const
name|QString
name|translatedLight
init|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Light"
argument_list|)
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
name|translatedLight
condition|)
return|return
name|QFont
operator|::
name|Light
return|;
if|if
condition|(
name|s
operator|.
name|compare
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Thin"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
return|return
name|QFont
operator|::
name|Thin
return|;
if|if
condition|(
name|s
operator|.
name|compare
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Extra Light"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
return|return
name|QFont
operator|::
name|ExtraLight
return|;
if|if
condition|(
name|s
operator|.
name|compare
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Extra Bold"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
return|return
name|QFont
operator|::
name|ExtraBold
return|;
comment|// And now the contains() checks for the translated strings.
comment|//: The word for "Extra" as in "Extra Bold, Extra Thin" used as a pattern for string searches
specifier|const
name|QString
name|translatedExtra
init|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Extra"
argument_list|)
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
name|translatedBold
argument_list|)
condition|)
block|{
comment|//: The word for "Demi" as in "Demi Bold" used as a pattern for string searches
name|QString
name|translatedDemi
init|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Demi"
argument_list|)
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
name|translatedDemi
argument_list|)
condition|)
return|return
name|QFont
operator|::
name|DemiBold
return|;
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
name|translatedExtra
argument_list|)
condition|)
return|return
name|QFont
operator|::
name|ExtraBold
return|;
return|return
name|QFont
operator|::
name|Bold
return|;
block|}
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
name|translatedLight
argument_list|)
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
name|translatedExtra
argument_list|)
condition|)
return|return
name|QFont
operator|::
name|ExtraLight
return|;
return|return
name|QFont
operator|::
name|Light
return|;
block|}
return|return
name|QFont
operator|::
name|Normal
return|;
block|}
end_function
begin_struct
DECL|struct|QtFontSize
struct|struct
name|QtFontSize
block|{
DECL|member|handle
name|void
modifier|*
name|handle
decl_stmt|;
DECL|member|pixelSize
name|unsigned
name|short
name|pixelSize
range|:
literal|16
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QtFontStyle
struct|struct
name|QtFontStyle
block|{
DECL|struct|Key
struct|struct
name|Key
block|{
name|Key
parameter_list|(
specifier|const
name|QString
modifier|&
name|styleString
parameter_list|)
constructor_decl|;
DECL|function|Key
name|Key
parameter_list|()
member_init_list|:
name|style
argument_list|(
name|QFont
operator|::
name|StyleNormal
argument_list|)
member_init_list|,
name|weight
argument_list|(
name|QFont
operator|::
name|Normal
argument_list|)
member_init_list|,
name|stretch
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|Key
name|Key
parameter_list|(
specifier|const
name|Key
modifier|&
name|o
parameter_list|)
member_init_list|:
name|style
argument_list|(
name|o
operator|.
name|style
argument_list|)
member_init_list|,
name|weight
argument_list|(
name|o
operator|.
name|weight
argument_list|)
member_init_list|,
name|stretch
argument_list|(
name|o
operator|.
name|stretch
argument_list|)
block|{ }
DECL|member|style
name|uint
name|style
range|:
literal|2
decl_stmt|;
DECL|member|weight
name|signed
name|int
name|weight
range|:
literal|8
decl_stmt|;
DECL|member|stretch
name|signed
name|int
name|stretch
range|:
literal|12
decl_stmt|;
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|Key
modifier|&
name|other
parameter_list|)
block|{
return|return
operator|(
name|style
operator|==
name|other
operator|.
name|style
operator|&&
name|weight
operator|==
name|other
operator|.
name|weight
operator|&&
operator|(
name|stretch
operator|==
literal|0
operator|||
name|other
operator|.
name|stretch
operator|==
literal|0
operator|||
name|stretch
operator|==
name|other
operator|.
name|stretch
operator|)
operator|)
return|;
block|}
DECL|function|operator !=
name|bool
name|operator
name|!=
parameter_list|(
specifier|const
name|Key
modifier|&
name|other
parameter_list|)
block|{
return|return
operator|!
name|operator
name|==
argument_list|(
name|other
argument_list|)
return|;
block|}
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|Key
modifier|&
name|o
parameter_list|)
block|{
name|int
name|x
init|=
operator|(
name|style
operator|<<
literal|12
operator|)
operator|+
operator|(
name|weight
operator|<<
literal|14
operator|)
operator|+
name|stretch
decl_stmt|;
name|int
name|y
init|=
operator|(
name|o
operator|.
name|style
operator|<<
literal|12
operator|)
operator|+
operator|(
name|o
operator|.
name|weight
operator|<<
literal|14
operator|)
operator|+
name|o
operator|.
name|stretch
decl_stmt|;
return|return
operator|(
name|x
operator|<
name|y
operator|)
return|;
block|}
block|}
struct|;
DECL|function|QtFontStyle
name|QtFontStyle
parameter_list|(
specifier|const
name|Key
modifier|&
name|k
parameter_list|)
member_init_list|:
name|key
argument_list|(
name|k
argument_list|)
member_init_list|,
name|bitmapScalable
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|smoothScalable
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|count
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|pixelSizes
argument_list|(
literal|0
argument_list|)
block|{     }
DECL|function|~QtFontStyle
name|~
name|QtFontStyle
parameter_list|()
block|{
while|while
condition|(
name|count
condition|)
block|{
comment|// bitfield count-- in while condition does not work correctly in mwccsym2
name|count
operator|--
expr_stmt|;
name|QPlatformIntegration
modifier|*
name|integration
init|=
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
decl_stmt|;
if|if
condition|(
name|integration
condition|)
block|{
name|integration
operator|->
name|fontDatabase
argument_list|()
operator|->
name|releaseHandle
argument_list|(
name|pixelSizes
index|[
name|count
index|]
operator|.
name|handle
argument_list|)
expr_stmt|;
block|}
block|}
name|free
argument_list|(
name|pixelSizes
argument_list|)
expr_stmt|;
block|}
DECL|member|key
name|Key
name|key
decl_stmt|;
DECL|member|bitmapScalable
name|bool
name|bitmapScalable
range|:
literal|1
decl_stmt|;
DECL|member|smoothScalable
name|bool
name|smoothScalable
range|:
literal|1
decl_stmt|;
DECL|member|count
name|signed
name|int
name|count
range|:
literal|30
decl_stmt|;
DECL|member|pixelSizes
name|QtFontSize
modifier|*
name|pixelSizes
decl_stmt|;
DECL|member|styleName
name|QString
name|styleName
decl_stmt|;
DECL|member|antialiased
name|bool
name|antialiased
decl_stmt|;
name|QtFontSize
modifier|*
name|pixelSize
parameter_list|(
name|unsigned
name|short
name|size
parameter_list|,
name|bool
init|=
literal|false
parameter_list|)
function_decl|;
block|}
struct|;
end_struct
begin_constructor
DECL|function|Key
name|QtFontStyle
operator|::
name|Key
operator|::
name|Key
parameter_list|(
specifier|const
name|QString
modifier|&
name|styleString
parameter_list|)
member_init_list|:
name|style
argument_list|(
name|QFont
operator|::
name|StyleNormal
argument_list|)
member_init_list|,
name|weight
argument_list|(
name|QFont
operator|::
name|Normal
argument_list|)
member_init_list|,
name|stretch
argument_list|(
literal|0
argument_list|)
block|{
name|weight
operator|=
name|getFontWeight
argument_list|(
name|styleString
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|styleString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// First the straightforward no-translation checks, these are fast.
if|if
condition|(
name|styleString
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"Italic"
argument_list|)
argument_list|)
condition|)
name|style
operator|=
name|QFont
operator|::
name|StyleItalic
expr_stmt|;
elseif|else
if|if
condition|(
name|styleString
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"Oblique"
argument_list|)
argument_list|)
condition|)
name|style
operator|=
name|QFont
operator|::
name|StyleOblique
expr_stmt|;
comment|// Then the translation checks. These aren't as fast.
elseif|else
if|if
condition|(
name|styleString
operator|.
name|contains
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Italic"
argument_list|)
argument_list|)
condition|)
name|style
operator|=
name|QFont
operator|::
name|StyleItalic
expr_stmt|;
elseif|else
if|if
condition|(
name|styleString
operator|.
name|contains
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Oblique"
argument_list|)
argument_list|)
condition|)
name|style
operator|=
name|QFont
operator|::
name|StyleOblique
expr_stmt|;
block|}
block|}
end_constructor
begin_function
DECL|function|pixelSize
name|QtFontSize
modifier|*
name|QtFontStyle
operator|::
name|pixelSize
parameter_list|(
name|unsigned
name|short
name|size
parameter_list|,
name|bool
name|add
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|pixelSizes
index|[
name|i
index|]
operator|.
name|pixelSize
operator|==
name|size
condition|)
return|return
name|pixelSizes
operator|+
name|i
return|;
block|}
if|if
condition|(
operator|!
name|add
condition|)
return|return
literal|0
return|;
if|if
condition|(
operator|!
name|pixelSizes
condition|)
block|{
comment|// Most style have only one font size, we avoid waisting memory
name|QtFontSize
modifier|*
name|newPixelSizes
init|=
operator|(
name|QtFontSize
operator|*
operator|)
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
name|QtFontSize
argument_list|)
argument_list|)
decl_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|newPixelSizes
argument_list|)
expr_stmt|;
name|pixelSizes
operator|=
name|newPixelSizes
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|count
operator|%
literal|8
operator|)
operator|||
name|count
operator|==
literal|1
condition|)
block|{
name|QtFontSize
modifier|*
name|newPixelSizes
init|=
operator|(
name|QtFontSize
operator|*
operator|)
name|realloc
argument_list|(
name|pixelSizes
argument_list|,
operator|(
operator|(
operator|(
name|count
operator|+
literal|8
operator|)
operator|>>
literal|3
operator|)
operator|<<
literal|3
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|QtFontSize
argument_list|)
argument_list|)
decl_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|newPixelSizes
argument_list|)
expr_stmt|;
name|pixelSizes
operator|=
name|newPixelSizes
expr_stmt|;
block|}
name|pixelSizes
index|[
name|count
index|]
operator|.
name|pixelSize
operator|=
name|size
expr_stmt|;
name|pixelSizes
index|[
name|count
index|]
operator|.
name|handle
operator|=
literal|0
expr_stmt|;
return|return
name|pixelSizes
operator|+
operator|(
name|count
operator|++
operator|)
return|;
block|}
end_function
begin_struct
DECL|struct|QtFontFoundry
struct|struct
name|QtFontFoundry
block|{
DECL|function|QtFontFoundry
name|QtFontFoundry
parameter_list|(
specifier|const
name|QString
modifier|&
name|n
parameter_list|)
member_init_list|:
name|name
argument_list|(
name|n
argument_list|)
member_init_list|,
name|count
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|styles
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|~QtFontFoundry
name|~
name|QtFontFoundry
parameter_list|()
block|{
while|while
condition|(
name|count
operator|--
condition|)
operator|delete
name|styles
index|[
name|count
index|]
expr_stmt|;
name|free
argument_list|(
name|styles
argument_list|)
expr_stmt|;
block|}
DECL|member|name
name|QString
name|name
decl_stmt|;
DECL|member|count
name|int
name|count
decl_stmt|;
DECL|member|styles
name|QtFontStyle
modifier|*
modifier|*
name|styles
decl_stmt|;
name|QtFontStyle
modifier|*
name|style
parameter_list|(
specifier|const
name|QtFontStyle
operator|::
name|Key
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
init|=
name|QString
argument_list|()
parameter_list|,
name|bool
init|=
literal|false
parameter_list|)
function_decl|;
block|}
struct|;
end_struct
begin_function
DECL|function|style
name|QtFontStyle
modifier|*
name|QtFontFoundry
operator|::
name|style
parameter_list|(
specifier|const
name|QtFontStyle
operator|::
name|Key
modifier|&
name|key
parameter_list|,
specifier|const
name|QString
modifier|&
name|styleName
parameter_list|,
name|bool
name|create
parameter_list|)
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|pos
operator|<
name|count
condition|;
name|pos
operator|++
control|)
block|{
name|bool
name|hasStyleName
init|=
operator|!
name|styleName
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
comment|// search styleName first if available
if|if
condition|(
name|hasStyleName
operator|&&
operator|!
name|styles
index|[
name|pos
index|]
operator|->
name|styleName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|styles
index|[
name|pos
index|]
operator|->
name|styleName
operator|==
name|styleName
condition|)
return|return
name|styles
index|[
name|pos
index|]
return|;
block|}
else|else
block|{
if|if
condition|(
name|styles
index|[
name|pos
index|]
operator|->
name|key
operator|==
name|key
condition|)
return|return
name|styles
index|[
name|pos
index|]
return|;
block|}
block|}
if|if
condition|(
operator|!
name|create
condition|)
return|return
literal|0
return|;
comment|//     qDebug("adding key (weight=%d, style=%d, oblique=%d stretch=%d) at %d", key.weight, key.style, key.oblique, key.stretch, pos);
if|if
condition|(
operator|!
operator|(
name|count
operator|%
literal|8
operator|)
condition|)
block|{
name|QtFontStyle
modifier|*
modifier|*
name|newStyles
init|=
operator|(
name|QtFontStyle
operator|*
operator|*
operator|)
name|realloc
argument_list|(
name|styles
argument_list|,
operator|(
operator|(
operator|(
name|count
operator|+
literal|8
operator|)
operator|>>
literal|3
operator|)
operator|<<
literal|3
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|QtFontStyle
operator|*
argument_list|)
argument_list|)
decl_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|newStyles
argument_list|)
expr_stmt|;
name|styles
operator|=
name|newStyles
expr_stmt|;
block|}
name|QtFontStyle
modifier|*
name|style
init|=
operator|new
name|QtFontStyle
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|style
operator|->
name|styleName
operator|=
name|styleName
expr_stmt|;
name|styles
index|[
name|pos
index|]
operator|=
name|style
expr_stmt|;
name|count
operator|++
expr_stmt|;
return|return
name|styles
index|[
name|pos
index|]
return|;
block|}
end_function
begin_struct
DECL|struct|QtFontFamily
struct|struct
name|QtFontFamily
block|{
DECL|enum|WritingSystemStatus
enum|enum
name|WritingSystemStatus
block|{
DECL|enumerator|Unknown
name|Unknown
init|=
literal|0
block|,
DECL|enumerator|Supported
name|Supported
init|=
literal|1
block|,
DECL|enumerator|UnsupportedFT
name|UnsupportedFT
init|=
literal|2
block|,
DECL|enumerator|Unsupported
name|Unsupported
init|=
name|UnsupportedFT
block|}
enum|;
DECL|function|QtFontFamily
name|QtFontFamily
parameter_list|(
specifier|const
name|QString
modifier|&
name|n
parameter_list|)
member_init_list|:
name|populated
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|fixedPitch
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|name
argument_list|(
name|n
argument_list|)
member_init_list|,
name|count
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|foundries
argument_list|(
literal|0
argument_list|)
block|{
name|memset
argument_list|(
name|writingSystems
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|writingSystems
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|~QtFontFamily
name|~
name|QtFontFamily
parameter_list|()
block|{
while|while
condition|(
name|count
operator|--
condition|)
operator|delete
name|foundries
index|[
name|count
index|]
expr_stmt|;
name|free
argument_list|(
name|foundries
argument_list|)
expr_stmt|;
block|}
DECL|member|populated
name|bool
name|populated
range|:
literal|1
decl_stmt|;
DECL|member|fixedPitch
name|bool
name|fixedPitch
range|:
literal|1
decl_stmt|;
DECL|member|name
name|QString
name|name
decl_stmt|;
DECL|member|aliases
name|QStringList
name|aliases
decl_stmt|;
DECL|member|count
name|int
name|count
decl_stmt|;
DECL|member|foundries
name|QtFontFoundry
modifier|*
modifier|*
name|foundries
decl_stmt|;
DECL|member|writingSystems
name|unsigned
name|char
name|writingSystems
index|[
name|QFontDatabase
operator|::
name|WritingSystemsCount
index|]
decl_stmt|;
name|bool
name|matchesFamilyName
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|)
specifier|const
function_decl|;
name|QtFontFoundry
modifier|*
name|foundry
parameter_list|(
specifier|const
name|QString
modifier|&
name|f
parameter_list|,
name|bool
init|=
literal|false
parameter_list|)
function_decl|;
name|void
name|ensurePopulated
parameter_list|()
function_decl|;
block|}
struct|;
end_struct
begin_function
DECL|function|foundry
name|QtFontFoundry
modifier|*
name|QtFontFamily
operator|::
name|foundry
parameter_list|(
specifier|const
name|QString
modifier|&
name|f
parameter_list|,
name|bool
name|create
parameter_list|)
block|{
if|if
condition|(
name|f
operator|.
name|isNull
argument_list|()
operator|&&
name|count
operator|==
literal|1
condition|)
return|return
name|foundries
index|[
literal|0
index|]
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|foundries
index|[
name|i
index|]
operator|->
name|name
operator|.
name|compare
argument_list|(
name|f
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
return|return
name|foundries
index|[
name|i
index|]
return|;
block|}
if|if
condition|(
operator|!
name|create
condition|)
return|return
literal|0
return|;
if|if
condition|(
operator|!
operator|(
name|count
operator|%
literal|8
operator|)
condition|)
block|{
name|QtFontFoundry
modifier|*
modifier|*
name|newFoundries
init|=
operator|(
name|QtFontFoundry
operator|*
operator|*
operator|)
name|realloc
argument_list|(
name|foundries
argument_list|,
operator|(
operator|(
operator|(
name|count
operator|+
literal|8
operator|)
operator|>>
literal|3
operator|)
operator|<<
literal|3
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|QtFontFoundry
operator|*
argument_list|)
argument_list|)
decl_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|newFoundries
argument_list|)
expr_stmt|;
name|foundries
operator|=
name|newFoundries
expr_stmt|;
block|}
name|foundries
index|[
name|count
index|]
operator|=
operator|new
name|QtFontFoundry
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
name|foundries
index|[
name|count
operator|++
index|]
return|;
block|}
end_function
begin_function
DECL|function|matchesFamilyName
name|bool
name|QtFontFamily
operator|::
name|matchesFamilyName
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|)
specifier|const
block|{
return|return
name|name
operator|.
name|compare
argument_list|(
name|familyName
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
operator|||
name|aliases
operator|.
name|contains
argument_list|(
name|familyName
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|ensurePopulated
name|void
name|QtFontFamily
operator|::
name|ensurePopulated
parameter_list|()
block|{
if|if
condition|(
name|populated
condition|)
return|return;
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|fontDatabase
argument_list|()
operator|->
name|populateFamily
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|populated
argument_list|,
name|Q_FUNC_INFO
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|FallbacksCacheKey
struct|struct
name|FallbacksCacheKey
block|{
DECL|member|family
name|QString
name|family
decl_stmt|;
DECL|member|style
name|QFont
operator|::
name|Style
name|style
decl_stmt|;
DECL|member|styleHint
name|QFont
operator|::
name|StyleHint
name|styleHint
decl_stmt|;
DECL|member|script
name|QChar
operator|::
name|Script
name|script
decl_stmt|;
block|}
struct|;
end_struct
begin_function
specifier|inline
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|FallbacksCacheKey
modifier|&
name|lhs
parameter_list|,
specifier|const
name|FallbacksCacheKey
modifier|&
name|rhs
parameter_list|)
name|Q_DECL_NOTHROW
block|{
return|return
name|lhs
operator|.
name|script
operator|==
name|rhs
operator|.
name|script
operator|&&
name|lhs
operator|.
name|styleHint
operator|==
name|rhs
operator|.
name|styleHint
operator|&&
name|lhs
operator|.
name|style
operator|==
name|rhs
operator|.
name|style
operator|&&
name|lhs
operator|.
name|family
operator|==
name|rhs
operator|.
name|family
return|;
block|}
end_function
begin_function
specifier|inline
name|bool
name|operator
name|!=
parameter_list|(
specifier|const
name|FallbacksCacheKey
modifier|&
name|lhs
parameter_list|,
specifier|const
name|FallbacksCacheKey
modifier|&
name|rhs
parameter_list|)
name|Q_DECL_NOTHROW
block|{
return|return
operator|!
name|operator
name|==
argument_list|(
name|lhs
argument_list|,
name|rhs
argument_list|)
return|;
block|}
end_function
begin_function
specifier|inline
name|uint
name|qHash
parameter_list|(
specifier|const
name|FallbacksCacheKey
modifier|&
name|key
parameter_list|,
name|uint
name|seed
init|=
literal|0
parameter_list|)
name|Q_DECL_NOTHROW
block|{
name|QtPrivate
operator|::
name|QHashCombine
name|hash
decl_stmt|;
name|seed
operator|=
name|hash
argument_list|(
name|seed
argument_list|,
name|key
operator|.
name|family
argument_list|)
expr_stmt|;
name|seed
operator|=
name|hash
argument_list|(
name|seed
argument_list|,
name|int
argument_list|(
name|key
operator|.
name|style
argument_list|)
argument_list|)
expr_stmt|;
name|seed
operator|=
name|hash
argument_list|(
name|seed
argument_list|,
name|int
argument_list|(
name|key
operator|.
name|styleHint
argument_list|)
argument_list|)
expr_stmt|;
name|seed
operator|=
name|hash
argument_list|(
name|seed
argument_list|,
name|int
argument_list|(
name|key
operator|.
name|script
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|seed
return|;
block|}
end_function
begin_class
DECL|class|QFontDatabasePrivate
class|class
name|QFontDatabasePrivate
block|{
public|public:
DECL|function|QFontDatabasePrivate
name|QFontDatabasePrivate
parameter_list|()
member_init_list|:
name|count
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|families
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|fallbacksCache
argument_list|(
literal|64
argument_list|)
member_init_list|,
name|reregisterAppFonts
argument_list|(
literal|false
argument_list|)
block|{ }
DECL|function|~QFontDatabasePrivate
name|~
name|QFontDatabasePrivate
parameter_list|()
block|{
name|free
argument_list|()
expr_stmt|;
block|}
DECL|enum|FamilyRequestFlags
enum|enum
name|FamilyRequestFlags
block|{
DECL|enumerator|RequestFamily
name|RequestFamily
init|=
literal|0
block|,
DECL|enumerator|EnsureCreated
name|EnsureCreated
block|,
DECL|enumerator|EnsurePopulated
name|EnsurePopulated
block|}
enum|;
name|QtFontFamily
modifier|*
name|family
parameter_list|(
specifier|const
name|QString
modifier|&
name|f
parameter_list|,
name|FamilyRequestFlags
name|flags
init|=
name|EnsurePopulated
parameter_list|)
function_decl|;
DECL|function|free
name|void
name|free
parameter_list|()
block|{
while|while
condition|(
name|count
operator|--
condition|)
operator|delete
name|families
index|[
name|count
index|]
expr_stmt|;
operator|::
name|free
argument_list|(
name|families
argument_list|)
expr_stmt|;
name|families
operator|=
literal|0
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
comment|// don't clear the memory fonts!
block|}
DECL|member|count
name|int
name|count
decl_stmt|;
DECL|member|families
name|QtFontFamily
modifier|*
modifier|*
name|families
decl_stmt|;
DECL|member|fallbacksCache
name|QCache
argument_list|<
name|FallbacksCacheKey
argument_list|,
name|QStringList
argument_list|>
name|fallbacksCache
decl_stmt|;
DECL|struct|ApplicationFont
struct|struct
name|ApplicationFont
block|{
DECL|member|fileName
name|QString
name|fileName
decl_stmt|;
DECL|member|data
name|QByteArray
name|data
decl_stmt|;
DECL|member|families
name|QStringList
name|families
decl_stmt|;
block|}
struct|;
DECL|member|applicationFonts
name|QVector
argument_list|<
name|ApplicationFont
argument_list|>
name|applicationFonts
decl_stmt|;
name|int
name|addAppFont
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
function_decl|;
DECL|member|reregisterAppFonts
name|bool
name|reregisterAppFonts
decl_stmt|;
name|bool
name|isApplicationFont
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
function_decl|;
name|void
name|invalidate
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|invalidate
name|void
name|QFontDatabasePrivate
operator|::
name|invalidate
parameter_list|()
block|{
name|QFontCache
operator|::
name|instance
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
name|fallbacksCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|free
argument_list|()
expr_stmt|;
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|fontDatabase
argument_list|()
operator|->
name|invalidate
argument_list|()
expr_stmt|;
emit|emit
cast|static_cast
argument_list|<
name|QGuiApplication
operator|*
argument_list|>
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|)
operator|->
name|fontDatabaseChanged
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|family
name|QtFontFamily
modifier|*
name|QFontDatabasePrivate
operator|::
name|family
parameter_list|(
specifier|const
name|QString
modifier|&
name|f
parameter_list|,
name|FamilyRequestFlags
name|flags
parameter_list|)
block|{
name|QtFontFamily
modifier|*
name|fam
init|=
literal|0
decl_stmt|;
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|count
decl_stmt|;
name|int
name|pos
init|=
name|count
operator|/
literal|2
decl_stmt|;
name|int
name|res
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|count
condition|)
block|{
while|while
condition|(
operator|(
name|res
operator|=
name|families
index|[
name|pos
index|]
operator|->
name|name
operator|.
name|compare
argument_list|(
name|f
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|)
operator|&&
name|pos
operator|!=
name|low
condition|)
block|{
if|if
condition|(
name|res
operator|>
literal|0
condition|)
name|high
operator|=
name|pos
expr_stmt|;
else|else
name|low
operator|=
name|pos
expr_stmt|;
name|pos
operator|=
operator|(
name|high
operator|+
name|low
operator|)
operator|/
literal|2
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|res
condition|)
name|fam
operator|=
name|families
index|[
name|pos
index|]
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fam
operator|&&
operator|(
name|flags
operator|&
name|EnsureCreated
operator|)
condition|)
block|{
if|if
condition|(
name|res
operator|<
literal|0
condition|)
name|pos
operator|++
expr_stmt|;
comment|// qDebug()<< "adding family "<< f.toLatin1()<< " at "<< pos<< " total="<< count;
if|if
condition|(
operator|!
operator|(
name|count
operator|%
literal|8
operator|)
condition|)
block|{
name|QtFontFamily
modifier|*
modifier|*
name|newFamilies
init|=
operator|(
name|QtFontFamily
operator|*
operator|*
operator|)
name|realloc
argument_list|(
name|families
argument_list|,
operator|(
operator|(
operator|(
name|count
operator|+
literal|8
operator|)
operator|>>
literal|3
operator|)
operator|<<
literal|3
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|QtFontFamily
operator|*
argument_list|)
argument_list|)
decl_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|newFamilies
argument_list|)
expr_stmt|;
name|families
operator|=
name|newFamilies
expr_stmt|;
block|}
name|QtFontFamily
modifier|*
name|family
init|=
operator|new
name|QtFontFamily
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|memmove
argument_list|(
name|families
operator|+
name|pos
operator|+
literal|1
argument_list|,
name|families
operator|+
name|pos
argument_list|,
operator|(
name|count
operator|-
name|pos
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|QtFontFamily
operator|*
argument_list|)
argument_list|)
expr_stmt|;
name|families
index|[
name|pos
index|]
operator|=
name|family
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|fam
operator|=
name|families
index|[
name|pos
index|]
expr_stmt|;
block|}
if|if
condition|(
name|fam
operator|&&
operator|(
name|flags
operator|&
name|EnsurePopulated
operator|)
condition|)
name|fam
operator|->
name|ensurePopulated
argument_list|()
expr_stmt|;
return|return
name|fam
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|scriptForWritingSystem
specifier|static
specifier|const
name|int
name|scriptForWritingSystem
index|[]
init|=
block|{
name|QChar
operator|::
name|Script_Common
block|,
comment|// Any
name|QChar
operator|::
name|Script_Latin
block|,
comment|// Latin
name|QChar
operator|::
name|Script_Greek
block|,
comment|// Greek
name|QChar
operator|::
name|Script_Cyrillic
block|,
comment|// Cyrillic
name|QChar
operator|::
name|Script_Armenian
block|,
comment|// Armenian
name|QChar
operator|::
name|Script_Hebrew
block|,
comment|// Hebrew
name|QChar
operator|::
name|Script_Arabic
block|,
comment|// Arabic
name|QChar
operator|::
name|Script_Syriac
block|,
comment|// Syriac
name|QChar
operator|::
name|Script_Thaana
block|,
comment|// Thaana
name|QChar
operator|::
name|Script_Devanagari
block|,
comment|// Devanagari
name|QChar
operator|::
name|Script_Bengali
block|,
comment|// Bengali
name|QChar
operator|::
name|Script_Gurmukhi
block|,
comment|// Gurmukhi
name|QChar
operator|::
name|Script_Gujarati
block|,
comment|// Gujarati
name|QChar
operator|::
name|Script_Oriya
block|,
comment|// Oriya
name|QChar
operator|::
name|Script_Tamil
block|,
comment|// Tamil
name|QChar
operator|::
name|Script_Telugu
block|,
comment|// Telugu
name|QChar
operator|::
name|Script_Kannada
block|,
comment|// Kannada
name|QChar
operator|::
name|Script_Malayalam
block|,
comment|// Malayalam
name|QChar
operator|::
name|Script_Sinhala
block|,
comment|// Sinhala
name|QChar
operator|::
name|Script_Thai
block|,
comment|// Thai
name|QChar
operator|::
name|Script_Lao
block|,
comment|// Lao
name|QChar
operator|::
name|Script_Tibetan
block|,
comment|// Tibetan
name|QChar
operator|::
name|Script_Myanmar
block|,
comment|// Myanmar
name|QChar
operator|::
name|Script_Georgian
block|,
comment|// Georgian
name|QChar
operator|::
name|Script_Khmer
block|,
comment|// Khmer
name|QChar
operator|::
name|Script_Han
block|,
comment|// SimplifiedChinese
name|QChar
operator|::
name|Script_Han
block|,
comment|// TraditionalChinese
name|QChar
operator|::
name|Script_Han
block|,
comment|// Japanese
name|QChar
operator|::
name|Script_Hangul
block|,
comment|// Korean
name|QChar
operator|::
name|Script_Latin
block|,
comment|// Vietnamese
name|QChar
operator|::
name|Script_Common
block|,
comment|// Symbol
name|QChar
operator|::
name|Script_Ogham
block|,
comment|// Ogham
name|QChar
operator|::
name|Script_Runic
block|,
comment|// Runic
name|QChar
operator|::
name|Script_Nko
comment|// Nko
block|}
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|member|WritingSystemsCount
name|Q_STATIC_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|scriptForWritingSystem
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|scriptForWritingSystem
index|[
literal|0
index|]
argument_list|)
operator|==
name|QFontDatabase
operator|::
name|WritingSystemsCount
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|qt_script_for_writing_system
name|Q_GUI_EXPORT
name|int
name|qt_script_for_writing_system
parameter_list|(
name|QFontDatabase
operator|::
name|WritingSystem
name|writingSystem
parameter_list|)
block|{
return|return
name|scriptForWritingSystem
index|[
name|writingSystem
index|]
return|;
block|}
end_function
begin_comment
comment|/*!   \internal    This makes sense of the font family name:    if the family name contains a '[' and a ']', then we take the text   between the square brackets as the foundry, and the text before the   square brackets as the family (ie. "Arial [Monotype]") */
end_comment
begin_function
DECL|function|parseFontName
specifier|static
name|void
name|parseFontName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|QString
modifier|&
name|foundry
parameter_list|,
name|QString
modifier|&
name|family
parameter_list|)
block|{
name|int
name|i
init|=
name|name
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'['
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|li
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|']'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
operator|&&
name|li
operator|>=
literal|0
operator|&&
name|i
operator|<
name|li
condition|)
block|{
name|foundry
operator|=
name|name
operator|.
name|mid
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|li
operator|-
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|name
index|[
name|i
operator|-
literal|1
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
condition|)
name|i
operator|--
expr_stmt|;
name|family
operator|=
name|name
operator|.
name|left
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|foundry
operator|.
name|clear
argument_list|()
expr_stmt|;
name|family
operator|=
name|name
expr_stmt|;
block|}
comment|// capitalize the family/foundry names
name|bool
name|space
init|=
literal|true
decl_stmt|;
name|QChar
modifier|*
name|s
init|=
name|family
operator|.
name|data
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|family
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|len
operator|--
condition|)
block|{
if|if
condition|(
name|space
condition|)
operator|*
name|s
operator|=
name|s
operator|->
name|toUpper
argument_list|()
expr_stmt|;
name|space
operator|=
name|s
operator|->
name|isSpace
argument_list|()
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
name|space
operator|=
literal|true
expr_stmt|;
name|s
operator|=
name|foundry
operator|.
name|data
argument_list|()
expr_stmt|;
name|len
operator|=
name|foundry
operator|.
name|length
argument_list|()
expr_stmt|;
while|while
condition|(
name|len
operator|--
condition|)
block|{
if|if
condition|(
name|space
condition|)
operator|*
name|s
operator|=
name|s
operator|->
name|toUpper
argument_list|()
expr_stmt|;
name|space
operator|=
name|s
operator|->
name|isSpace
argument_list|()
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
block|}
end_function
begin_struct
DECL|struct|QtFontDesc
struct|struct
name|QtFontDesc
block|{
DECL|function|QtFontDesc
specifier|inline
name|QtFontDesc
parameter_list|()
member_init_list|:
name|family
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|foundry
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|style
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|size
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|family
name|QtFontFamily
modifier|*
name|family
decl_stmt|;
DECL|member|foundry
name|QtFontFoundry
modifier|*
name|foundry
decl_stmt|;
DECL|member|style
name|QtFontStyle
modifier|*
name|style
decl_stmt|;
DECL|member|size
name|QtFontSize
modifier|*
name|size
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|initFontDef
specifier|static
name|void
name|initFontDef
parameter_list|(
specifier|const
name|QtFontDesc
modifier|&
name|desc
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|,
name|QFontDef
modifier|*
name|fontDef
parameter_list|,
name|bool
name|multi
parameter_list|)
block|{
name|fontDef
operator|->
name|family
operator|=
name|desc
operator|.
name|family
operator|->
name|name
expr_stmt|;
if|if
condition|(
operator|!
name|desc
operator|.
name|foundry
operator|->
name|name
operator|.
name|isEmpty
argument_list|()
operator|&&
name|desc
operator|.
name|family
operator|->
name|count
operator|>
literal|1
condition|)
block|{
name|fontDef
operator|->
name|family
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" ["
argument_list|)
expr_stmt|;
name|fontDef
operator|->
name|family
operator|+=
name|desc
operator|.
name|foundry
operator|->
name|name
expr_stmt|;
name|fontDef
operator|->
name|family
operator|+=
name|QLatin1Char
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|desc
operator|.
name|style
operator|->
name|smoothScalable
operator|||
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|fontDatabase
argument_list|()
operator|->
name|fontsAlwaysScalable
argument_list|()
operator|||
operator|(
name|desc
operator|.
name|style
operator|->
name|bitmapScalable
operator|&&
operator|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferMatch
operator|)
operator|)
condition|)
block|{
name|fontDef
operator|->
name|pixelSize
operator|=
name|request
operator|.
name|pixelSize
expr_stmt|;
block|}
else|else
block|{
name|fontDef
operator|->
name|pixelSize
operator|=
name|desc
operator|.
name|size
operator|->
name|pixelSize
expr_stmt|;
block|}
name|fontDef
operator|->
name|pointSize
operator|=
name|request
operator|.
name|pointSize
expr_stmt|;
name|fontDef
operator|->
name|styleHint
operator|=
name|request
operator|.
name|styleHint
expr_stmt|;
name|fontDef
operator|->
name|styleStrategy
operator|=
name|request
operator|.
name|styleStrategy
expr_stmt|;
if|if
condition|(
operator|!
name|multi
condition|)
name|fontDef
operator|->
name|weight
operator|=
name|desc
operator|.
name|style
operator|->
name|key
operator|.
name|weight
expr_stmt|;
if|if
condition|(
operator|!
name|multi
condition|)
name|fontDef
operator|->
name|style
operator|=
name|desc
operator|.
name|style
operator|->
name|key
operator|.
name|style
expr_stmt|;
name|fontDef
operator|->
name|fixedPitch
operator|=
name|desc
operator|.
name|family
operator|->
name|fixedPitch
expr_stmt|;
name|fontDef
operator|->
name|stretch
operator|=
name|desc
operator|.
name|style
operator|->
name|key
operator|.
name|stretch
expr_stmt|;
name|fontDef
operator|->
name|ignorePitch
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|familyList
specifier|static
name|QStringList
name|familyList
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|req
parameter_list|)
block|{
comment|// list of families to try
name|QStringList
name|family_list
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|family
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|family_list
return|;
name|QStringList
name|list
init|=
name|req
operator|.
name|family
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|numFamilies
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
name|family_list
operator|.
name|reserve
argument_list|(
name|numFamilies
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFamilies
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|str
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|trimmed
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|str
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
operator|&&
name|str
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
operator|)
operator|||
operator|(
name|str
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
argument_list|)
operator|&&
name|str
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
argument_list|)
operator|)
condition|)
name|str
operator|=
name|str
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
name|str
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|family_list
operator|<<
name|str
expr_stmt|;
block|}
comment|// append the substitute list for each family in family_list
name|QStringList
name|subs_list
decl_stmt|;
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|family_list
operator|.
name|constBegin
argument_list|()
decl_stmt|,
name|end
init|=
name|family_list
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
name|subs_list
operator|+=
name|QFont
operator|::
name|substitutes
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
comment|//         qDebug()<< "adding substs: "<< subs_list;
name|family_list
operator|+=
name|subs_list
expr_stmt|;
return|return
name|family_list
return|;
block|}
end_function
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QFontDatabasePrivate
argument_list|,
argument|privateDb
argument_list|)
end_macro
begin_macro
name|Q_GLOBAL_STATIC_WITH_ARGS
argument_list|(
argument|QMutex
argument_list|,
argument|fontDatabaseMutex
argument_list|,
argument|(QMutex::Recursive)
argument_list|)
end_macro
begin_comment
comment|// used in qguiapplication.cpp
end_comment
begin_function
DECL|function|qt_cleanupFontDatabase
name|void
name|qt_cleanupFontDatabase
parameter_list|()
block|{
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
if|if
condition|(
name|db
condition|)
block|{
name|db
operator|->
name|fallbacksCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|db
operator|->
name|free
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// used in qfontengine_x11.cpp
end_comment
begin_function
DECL|function|qt_fontdatabase_mutex
name|QMutex
modifier|*
name|qt_fontdatabase_mutex
parameter_list|()
block|{
return|return
name|fontDatabaseMutex
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|qt_registerFont
name|void
name|qt_registerFont
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|,
specifier|const
name|QString
modifier|&
name|stylename
parameter_list|,
specifier|const
name|QString
modifier|&
name|foundryname
parameter_list|,
name|int
name|weight
parameter_list|,
name|QFont
operator|::
name|Style
name|style
parameter_list|,
name|int
name|stretch
parameter_list|,
name|bool
name|antialiased
parameter_list|,
name|bool
name|scalable
parameter_list|,
name|int
name|pixelSize
parameter_list|,
name|bool
name|fixedPitch
parameter_list|,
specifier|const
name|QSupportedWritingSystems
modifier|&
name|writingSystems
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
block|{
name|QFontDatabasePrivate
modifier|*
name|d
init|=
name|privateDb
argument_list|()
decl_stmt|;
comment|//    qDebug()<< "Adding font"<< familyName<< weight<< style<< pixelSize<< antialiased;
name|QtFontStyle
operator|::
name|Key
name|styleKey
decl_stmt|;
name|styleKey
operator|.
name|style
operator|=
name|style
expr_stmt|;
name|styleKey
operator|.
name|weight
operator|=
name|weight
expr_stmt|;
name|styleKey
operator|.
name|stretch
operator|=
name|stretch
expr_stmt|;
name|QtFontFamily
modifier|*
name|f
init|=
name|d
operator|->
name|family
argument_list|(
name|familyName
argument_list|,
name|QFontDatabasePrivate
operator|::
name|EnsureCreated
argument_list|)
decl_stmt|;
name|f
operator|->
name|fixedPitch
operator|=
name|fixedPitch
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QFontDatabase
operator|::
name|WritingSystemsCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|writingSystems
operator|.
name|supported
argument_list|(
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
name|f
operator|->
name|writingSystems
index|[
name|i
index|]
operator|=
name|QtFontFamily
operator|::
name|Supported
expr_stmt|;
block|}
name|QtFontFoundry
modifier|*
name|foundry
init|=
name|f
operator|->
name|foundry
argument_list|(
name|foundryname
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QtFontStyle
modifier|*
name|fontStyle
init|=
name|foundry
operator|->
name|style
argument_list|(
name|styleKey
argument_list|,
name|stylename
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|fontStyle
operator|->
name|smoothScalable
operator|=
name|scalable
expr_stmt|;
name|fontStyle
operator|->
name|antialiased
operator|=
name|antialiased
expr_stmt|;
name|QtFontSize
modifier|*
name|size
init|=
name|fontStyle
operator|->
name|pixelSize
argument_list|(
name|pixelSize
condition|?
name|pixelSize
else|:
name|SMOOTH_SCALABLE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|->
name|handle
condition|)
block|{
name|QPlatformIntegration
modifier|*
name|integration
init|=
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
decl_stmt|;
if|if
condition|(
name|integration
condition|)
name|integration
operator|->
name|fontDatabase
argument_list|()
operator|->
name|releaseHandle
argument_list|(
name|size
operator|->
name|handle
argument_list|)
expr_stmt|;
block|}
name|size
operator|->
name|handle
operator|=
name|handle
expr_stmt|;
name|f
operator|->
name|populated
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_registerFontFamily
name|void
name|qt_registerFontFamily
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|)
block|{
comment|// Create uninitialized/unpopulated family
name|privateDb
argument_list|()
operator|->
name|family
argument_list|(
name|familyName
argument_list|,
name|QFontDatabasePrivate
operator|::
name|EnsureCreated
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_registerAliasToFontFamily
name|void
name|qt_registerAliasToFontFamily
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|,
specifier|const
name|QString
modifier|&
name|alias
parameter_list|)
block|{
if|if
condition|(
name|alias
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QFontDatabasePrivate
modifier|*
name|d
init|=
name|privateDb
argument_list|()
decl_stmt|;
name|QtFontFamily
modifier|*
name|f
init|=
name|d
operator|->
name|family
argument_list|(
name|familyName
argument_list|,
name|QFontDatabasePrivate
operator|::
name|RequestFamily
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
condition|)
return|return;
if|if
condition|(
name|f
operator|->
name|aliases
operator|.
name|contains
argument_list|(
name|alias
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
return|return;
name|f
operator|->
name|aliases
operator|.
name|push_back
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_resolveFontFamilyAlias
name|QString
name|qt_resolveFontFamilyAlias
parameter_list|(
specifier|const
name|QString
modifier|&
name|alias
parameter_list|)
block|{
if|if
condition|(
operator|!
name|alias
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QFontDatabasePrivate
modifier|*
name|d
init|=
name|privateDb
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|count
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|d
operator|->
name|families
index|[
name|i
index|]
operator|->
name|matchesFamilyName
argument_list|(
name|alias
argument_list|)
condition|)
return|return
name|d
operator|->
name|families
index|[
name|i
index|]
operator|->
name|name
return|;
block|}
return|return
name|alias
return|;
block|}
end_function
begin_function
DECL|function|fallbacksForFamily
name|QStringList
name|QPlatformFontDatabase
operator|::
name|fallbacksForFamily
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|,
name|QFont
operator|::
name|Style
name|style
parameter_list|,
name|QFont
operator|::
name|StyleHint
name|styleHint
parameter_list|,
name|QChar
operator|::
name|Script
name|script
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|styleHint
argument_list|)
expr_stmt|;
name|QStringList
name|retList
decl_stmt|;
name|size_t
name|writingSystem
init|=
name|std
operator|::
name|find
argument_list|(
name|scriptForWritingSystem
argument_list|,
name|scriptForWritingSystem
operator|+
name|QFontDatabase
operator|::
name|WritingSystemsCount
argument_list|,
name|script
argument_list|)
operator|-
name|scriptForWritingSystem
decl_stmt|;
if|if
condition|(
name|writingSystem
operator|>=
name|QFontDatabase
operator|::
name|WritingSystemsCount
condition|)
name|writingSystem
operator|=
name|QFontDatabase
operator|::
name|Any
expr_stmt|;
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|db
operator|->
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QtFontFamily
modifier|*
name|f
init|=
name|db
operator|->
name|families
index|[
name|i
index|]
decl_stmt|;
name|f
operator|->
name|ensurePopulated
argument_list|()
expr_stmt|;
if|if
condition|(
name|writingSystem
operator|>
name|QFontDatabase
operator|::
name|Any
operator|&&
name|f
operator|->
name|writingSystems
index|[
name|writingSystem
index|]
operator|!=
name|QtFontFamily
operator|::
name|Supported
condition|)
continue|continue;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|f
operator|->
name|count
condition|;
operator|++
name|j
control|)
block|{
name|QtFontFoundry
modifier|*
name|foundry
init|=
name|f
operator|->
name|foundries
index|[
name|j
index|]
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|foundry
operator|->
name|count
condition|;
operator|++
name|k
control|)
block|{
if|if
condition|(
name|style
operator|==
name|foundry
operator|->
name|styles
index|[
name|k
index|]
operator|->
name|key
operator|.
name|style
condition|)
block|{
if|if
condition|(
name|foundry
operator|->
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
name|retList
operator|.
name|append
argument_list|(
name|f
operator|->
name|name
argument_list|)
expr_stmt|;
else|else
name|retList
operator|.
name|append
argument_list|(
name|f
operator|->
name|name
operator|+
name|QLatin1String
argument_list|(
literal|" ["
argument_list|)
operator|+
name|foundry
operator|->
name|name
operator|+
name|QLatin1Char
argument_list|(
literal|']'
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|retList
return|;
block|}
end_function
begin_function
DECL|function|fallbacksForFamily
specifier|static
name|QStringList
name|fallbacksForFamily
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|,
name|QFont
operator|::
name|Style
name|style
parameter_list|,
name|QFont
operator|::
name|StyleHint
name|styleHint
parameter_list|,
name|QChar
operator|::
name|Script
name|script
parameter_list|)
block|{
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
specifier|const
name|FallbacksCacheKey
name|cacheKey
init|=
block|{
name|family
block|,
name|style
block|,
name|styleHint
block|,
name|script
block|}
decl_stmt|;
if|if
condition|(
specifier|const
name|QStringList
modifier|*
name|fallbacks
init|=
name|db
operator|->
name|fallbacksCache
operator|.
name|object
argument_list|(
name|cacheKey
argument_list|)
condition|)
return|return
operator|*
name|fallbacks
return|;
comment|// make sure that the db has all fallback families
name|QStringList
name|retList
init|=
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|fontDatabase
argument_list|()
operator|->
name|fallbacksForFamily
argument_list|(
name|family
argument_list|,
name|style
argument_list|,
name|styleHint
argument_list|,
name|script
argument_list|)
decl_stmt|;
name|QStringList
operator|::
name|iterator
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|retList
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|retList
operator|.
name|end
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|bool
name|contains
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|db
operator|->
name|count
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|db
operator|->
name|families
index|[
name|j
index|]
operator|->
name|matchesFamilyName
argument_list|(
operator|*
name|i
argument_list|)
condition|)
block|{
name|contains
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|contains
condition|)
block|{
name|i
operator|=
name|retList
operator|.
name|erase
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|--
name|i
expr_stmt|;
block|}
block|}
name|db
operator|->
name|fallbacksCache
operator|.
name|insert
argument_list|(
name|cacheKey
argument_list|,
operator|new
name|QStringList
argument_list|(
name|retList
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|retList
return|;
block|}
end_function
begin_function
DECL|function|qt_fallbacksForFamily
name|QStringList
name|qt_fallbacksForFamily
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|,
name|QFont
operator|::
name|Style
name|style
parameter_list|,
name|QFont
operator|::
name|StyleHint
name|styleHint
parameter_list|,
name|QChar
operator|::
name|Script
name|script
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|fallbacksForFamily
argument_list|(
name|family
argument_list|,
name|style
argument_list|,
name|styleHint
argument_list|,
name|script
argument_list|)
return|;
block|}
end_function
begin_function_decl
specifier|static
name|void
name|registerFont
parameter_list|(
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
modifier|*
name|fnt
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|initializeDb
specifier|static
name|void
name|initializeDb
parameter_list|()
block|{
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
comment|// init by asking for the platformfontdb for the first time or after invalidation
if|if
condition|(
operator|!
name|db
operator|->
name|count
condition|)
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|fontDatabase
argument_list|()
operator|->
name|populateFontDatabase
argument_list|()
expr_stmt|;
if|if
condition|(
name|db
operator|->
name|reregisterAppFonts
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|db
operator|->
name|applicationFonts
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|db
operator|->
name|applicationFonts
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|families
operator|.
name|isEmpty
argument_list|()
condition|)
name|registerFont
argument_list|(
operator|&
name|db
operator|->
name|applicationFonts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|db
operator|->
name|reregisterAppFonts
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|load
specifier|static
specifier|inline
name|void
name|load
parameter_list|(
specifier|const
name|QString
modifier|&
init|=
name|QString
argument_list|()
parameter_list|,
name|int
init|=
operator|-
literal|1
parameter_list|)
block|{
comment|// Only initialize the database if it has been cleared or not initialized yet
if|if
condition|(
operator|!
name|privateDb
argument_list|()
operator|->
name|count
condition|)
name|initializeDb
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
specifier|static
DECL|function|loadSingleEngine
name|QFontEngine
modifier|*
name|loadSingleEngine
parameter_list|(
name|int
name|script
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|,
name|QtFontFamily
modifier|*
name|family
parameter_list|,
name|QtFontFoundry
modifier|*
name|foundry
parameter_list|,
name|QtFontStyle
modifier|*
name|style
parameter_list|,
name|QtFontSize
modifier|*
name|size
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|foundry
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|QPlatformFontDatabase
modifier|*
name|pfdb
init|=
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|fontDatabase
argument_list|()
decl_stmt|;
name|int
name|pixelSize
init|=
name|size
operator|->
name|pixelSize
decl_stmt|;
if|if
condition|(
operator|!
name|pixelSize
operator|||
operator|(
name|style
operator|->
name|smoothScalable
operator|&&
name|pixelSize
operator|==
name|SMOOTH_SCALABLE
operator|)
operator|||
name|pfdb
operator|->
name|fontsAlwaysScalable
argument_list|()
condition|)
block|{
name|pixelSize
operator|=
name|request
operator|.
name|pixelSize
expr_stmt|;
block|}
name|QFontDef
name|def
init|=
name|request
decl_stmt|;
name|def
operator|.
name|pixelSize
operator|=
name|pixelSize
expr_stmt|;
name|QFontCache
modifier|*
name|fontCache
init|=
name|QFontCache
operator|::
name|instance
argument_list|()
decl_stmt|;
name|QFontCache
operator|::
name|Key
name|key
argument_list|(
name|def
argument_list|,
name|script
argument_list|)
decl_stmt|;
name|QFontEngine
modifier|*
name|engine
init|=
name|fontCache
operator|->
name|findEngine
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|engine
condition|)
block|{
specifier|const
name|bool
name|cacheForCommonScript
init|=
name|script
operator|!=
name|QChar
operator|::
name|Script_Common
operator|&&
operator|(
name|family
operator|->
name|writingSystems
index|[
name|QFontDatabase
operator|::
name|Latin
index|]
operator|&
name|QtFontFamily
operator|::
name|Supported
operator|)
operator|!=
literal|0
decl_stmt|;
if|if
condition|(
name|Q_LIKELY
argument_list|(
name|cacheForCommonScript
argument_list|)
condition|)
block|{
comment|// fast path: check if engine was loaded for another script
name|key
operator|.
name|script
operator|=
name|QChar
operator|::
name|Script_Common
expr_stmt|;
name|engine
operator|=
name|fontCache
operator|->
name|findEngine
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|key
operator|.
name|script
operator|=
name|script
expr_stmt|;
if|if
condition|(
name|engine
condition|)
block|{
comment|// Also check for OpenType tables when using complex scripts
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
operator|!
name|engine
operator|->
name|supportsScript
argument_list|(
name|QChar
operator|::
name|Script
argument_list|(
name|script
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"  OpenType support missing for script %d"
argument_list|,
name|script
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|fontCache
operator|->
name|insertEngine
argument_list|(
name|key
argument_list|,
name|engine
argument_list|)
expr_stmt|;
return|return
name|engine
return|;
block|}
block|}
comment|// If the font data's native stretch matches the requested stretch we need to set stretch to 100
comment|// to avoid the fontengine synthesizing stretch. If they didn't match exactly we need to calculate
comment|// the new stretch factor. This only done if not matched by styleName.
if|if
condition|(
name|style
operator|->
name|key
operator|.
name|stretch
operator|!=
literal|0
operator|&&
name|request
operator|.
name|stretch
operator|!=
literal|0
operator|&&
operator|(
name|request
operator|.
name|styleName
operator|.
name|isEmpty
argument_list|()
operator|||
name|request
operator|.
name|styleName
operator|!=
name|style
operator|->
name|styleName
operator|)
condition|)
block|{
name|def
operator|.
name|stretch
operator|=
operator|(
name|request
operator|.
name|stretch
operator|*
literal|100
operator|+
literal|50
operator|)
operator|/
name|style
operator|->
name|key
operator|.
name|stretch
expr_stmt|;
block|}
name|engine
operator|=
name|pfdb
operator|->
name|fontEngine
argument_list|(
name|def
argument_list|,
name|size
operator|->
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
condition|)
block|{
comment|// Also check for OpenType tables when using complex scripts
if|if
condition|(
operator|!
name|engine
operator|->
name|supportsScript
argument_list|(
name|QChar
operator|::
name|Script
argument_list|(
name|script
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"  OpenType support missing for script %d"
argument_list|,
name|script
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|==
literal|0
condition|)
operator|delete
name|engine
expr_stmt|;
return|return
literal|0
return|;
block|}
name|fontCache
operator|->
name|insertEngine
argument_list|(
name|key
argument_list|,
name|engine
argument_list|)
expr_stmt|;
if|if
condition|(
name|Q_LIKELY
argument_list|(
name|cacheForCommonScript
operator|&&
operator|!
name|engine
operator|->
name|symbol
argument_list|)
condition|)
block|{
comment|// cache engine for Common script as well
name|key
operator|.
name|script
operator|=
name|QChar
operator|::
name|Script_Common
expr_stmt|;
if|if
condition|(
operator|!
name|fontCache
operator|->
name|findEngine
argument_list|(
name|key
argument_list|)
condition|)
name|fontCache
operator|->
name|insertEngine
argument_list|(
name|key
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|engine
return|;
block|}
end_function
begin_function
specifier|static
DECL|function|loadEngine
name|QFontEngine
modifier|*
name|loadEngine
parameter_list|(
name|int
name|script
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|,
name|QtFontFamily
modifier|*
name|family
parameter_list|,
name|QtFontFoundry
modifier|*
name|foundry
parameter_list|,
name|QtFontStyle
modifier|*
name|style
parameter_list|,
name|QtFontSize
modifier|*
name|size
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|engine
init|=
name|loadSingleEngine
argument_list|(
name|script
argument_list|,
name|request
argument_list|,
name|family
argument_list|,
name|foundry
argument_list|,
name|style
argument_list|,
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|engine
operator|&&
operator|!
operator|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoFontMerging
operator|)
operator|&&
operator|!
name|engine
operator|->
name|symbol
condition|)
block|{
name|QPlatformFontDatabase
modifier|*
name|pfdb
init|=
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|fontDatabase
argument_list|()
decl_stmt|;
name|QFontEngineMulti
modifier|*
name|pfMultiEngine
init|=
name|pfdb
operator|->
name|fontEngineMulti
argument_list|(
name|engine
argument_list|,
name|QChar
operator|::
name|Script
argument_list|(
name|script
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|fallBackFamilies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
name|fallbacks
init|=
name|request
operator|.
name|fallBackFamilies
decl_stmt|;
name|QFont
operator|::
name|StyleHint
name|styleHint
init|=
name|QFont
operator|::
name|StyleHint
argument_list|(
name|request
operator|.
name|styleHint
argument_list|)
decl_stmt|;
if|if
condition|(
name|styleHint
operator|==
name|QFont
operator|::
name|AnyStyle
operator|&&
name|request
operator|.
name|fixedPitch
condition|)
name|styleHint
operator|=
name|QFont
operator|::
name|TypeWriter
expr_stmt|;
name|fallbacks
operator|+=
name|fallbacksForFamily
argument_list|(
name|family
operator|->
name|name
argument_list|,
name|QFont
operator|::
name|Style
argument_list|(
name|style
operator|->
name|key
operator|.
name|style
argument_list|)
argument_list|,
name|styleHint
argument_list|,
name|QChar
operator|::
name|Script
argument_list|(
name|script
argument_list|)
argument_list|)
expr_stmt|;
name|pfMultiEngine
operator|->
name|setFallbackFamiliesList
argument_list|(
name|fallbacks
argument_list|)
expr_stmt|;
block|}
name|engine
operator|=
name|pfMultiEngine
expr_stmt|;
comment|// Cache Multi font engine as well in case we got the single
comment|// font engine when we are actually looking for a Multi one
name|QFontCache
operator|::
name|Key
name|key
argument_list|(
name|request
argument_list|,
name|script
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QFontCache
operator|::
name|instance
argument_list|()
operator|->
name|insertEngine
argument_list|(
name|key
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
return|return
name|engine
return|;
block|}
end_function
begin_function
DECL|function|registerFont
specifier|static
name|void
name|registerFont
parameter_list|(
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
modifier|*
name|fnt
parameter_list|)
block|{
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
name|fnt
operator|->
name|families
operator|=
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|fontDatabase
argument_list|()
operator|->
name|addApplicationFont
argument_list|(
name|fnt
operator|->
name|data
argument_list|,
name|fnt
operator|->
name|fileName
argument_list|)
expr_stmt|;
name|db
operator|->
name|reregisterAppFonts
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|bestStyle
specifier|static
name|QtFontStyle
modifier|*
name|bestStyle
parameter_list|(
name|QtFontFoundry
modifier|*
name|foundry
parameter_list|,
specifier|const
name|QtFontStyle
operator|::
name|Key
modifier|&
name|styleKey
parameter_list|,
specifier|const
name|QString
modifier|&
name|styleName
init|=
name|QString
argument_list|()
parameter_list|)
block|{
name|int
name|best
init|=
literal|0
decl_stmt|;
name|int
name|dist
init|=
literal|0xffff
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|foundry
operator|->
name|count
condition|;
name|i
operator|++
control|)
block|{
name|QtFontStyle
modifier|*
name|style
init|=
name|foundry
operator|->
name|styles
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|styleName
operator|.
name|isEmpty
argument_list|()
operator|&&
name|styleName
operator|==
name|style
operator|->
name|styleName
condition|)
block|{
name|dist
operator|=
literal|0
expr_stmt|;
name|best
operator|=
name|i
expr_stmt|;
break|break;
block|}
name|int
name|d
init|=
name|qAbs
argument_list|(
name|styleKey
operator|.
name|weight
operator|-
name|style
operator|->
name|key
operator|.
name|weight
argument_list|)
decl_stmt|;
if|if
condition|(
name|styleKey
operator|.
name|stretch
operator|!=
literal|0
operator|&&
name|style
operator|->
name|key
operator|.
name|stretch
operator|!=
literal|0
condition|)
block|{
name|d
operator|+=
name|qAbs
argument_list|(
name|styleKey
operator|.
name|stretch
operator|-
name|style
operator|->
name|key
operator|.
name|stretch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|styleKey
operator|.
name|style
operator|!=
name|style
operator|->
name|key
operator|.
name|style
condition|)
block|{
if|if
condition|(
name|styleKey
operator|.
name|style
operator|!=
name|QFont
operator|::
name|StyleNormal
operator|&&
name|style
operator|->
name|key
operator|.
name|style
operator|!=
name|QFont
operator|::
name|StyleNormal
condition|)
comment|// one is italic, the other oblique
name|d
operator|+=
literal|0x0001
expr_stmt|;
else|else
name|d
operator|+=
literal|0x1000
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|<
name|dist
condition|)
block|{
name|best
operator|=
name|i
expr_stmt|;
name|dist
operator|=
name|d
expr_stmt|;
block|}
block|}
name|FM_DEBUG
argument_list|(
literal|"          best style has distance 0x%x"
argument_list|,
name|dist
argument_list|)
expr_stmt|;
return|return
name|foundry
operator|->
name|styles
index|[
name|best
index|]
return|;
block|}
end_function
begin_function
specifier|static
DECL|function|bestFoundry
name|unsigned
name|int
name|bestFoundry
parameter_list|(
name|int
name|script
parameter_list|,
name|unsigned
name|int
name|score
parameter_list|,
name|int
name|styleStrategy
parameter_list|,
specifier|const
name|QtFontFamily
modifier|*
name|family
parameter_list|,
specifier|const
name|QString
modifier|&
name|foundry_name
parameter_list|,
name|QtFontStyle
operator|::
name|Key
name|styleKey
parameter_list|,
name|int
name|pixelSize
parameter_list|,
name|char
name|pitch
parameter_list|,
name|QtFontDesc
modifier|*
name|desc
parameter_list|,
specifier|const
name|QString
modifier|&
name|styleName
init|=
name|QString
argument_list|()
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|pitch
argument_list|)
expr_stmt|;
name|desc
operator|->
name|foundry
operator|=
literal|0
expr_stmt|;
name|desc
operator|->
name|style
operator|=
literal|0
expr_stmt|;
name|desc
operator|->
name|size
operator|=
literal|0
expr_stmt|;
name|FM_DEBUG
argument_list|(
literal|"  REMARK: looking for best foundry for family '%s' [%d]"
argument_list|,
name|family
operator|->
name|name
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|family
operator|->
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|family
operator|->
name|count
condition|;
operator|++
name|x
control|)
block|{
name|QtFontFoundry
modifier|*
name|foundry
init|=
name|family
operator|->
name|foundries
index|[
name|x
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|foundry_name
operator|.
name|isEmpty
argument_list|()
operator|&&
name|foundry
operator|->
name|name
operator|.
name|compare
argument_list|(
name|foundry_name
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|!=
literal|0
condition|)
continue|continue;
name|FM_DEBUG
argument_list|(
literal|"          looking for matching style in foundry '%s' %d"
argument_list|,
name|foundry
operator|->
name|name
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"-- none --"
else|:
name|foundry
operator|->
name|name
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|foundry
operator|->
name|count
argument_list|)
expr_stmt|;
name|QtFontStyle
modifier|*
name|style
init|=
name|bestStyle
argument_list|(
name|foundry
argument_list|,
name|styleKey
argument_list|,
name|styleName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|style
operator|->
name|smoothScalable
operator|&&
operator|(
name|styleStrategy
operator|&
name|QFont
operator|::
name|ForceOutline
operator|)
condition|)
block|{
name|FM_DEBUG
argument_list|(
literal|"            ForceOutline set, but not smoothly scalable"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|int
name|px
init|=
operator|-
literal|1
decl_stmt|;
name|QtFontSize
modifier|*
name|size
init|=
literal|0
decl_stmt|;
comment|// 1. see if we have an exact matching size
if|if
condition|(
operator|!
operator|(
name|styleStrategy
operator|&
name|QFont
operator|::
name|ForceOutline
operator|)
condition|)
block|{
name|size
operator|=
name|style
operator|->
name|pixelSize
argument_list|(
name|pixelSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
condition|)
block|{
name|FM_DEBUG
argument_list|(
literal|"          found exact size match (%d pixels)"
argument_list|,
name|size
operator|->
name|pixelSize
argument_list|)
expr_stmt|;
name|px
operator|=
name|size
operator|->
name|pixelSize
expr_stmt|;
block|}
block|}
comment|// 2. see if we have a smoothly scalable font
if|if
condition|(
operator|!
name|size
operator|&&
name|style
operator|->
name|smoothScalable
operator|&&
operator|!
operator|(
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferBitmap
operator|)
condition|)
block|{
name|size
operator|=
name|style
operator|->
name|pixelSize
argument_list|(
name|SMOOTH_SCALABLE
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
condition|)
block|{
name|FM_DEBUG
argument_list|(
literal|"          found smoothly scalable font (%d pixels)"
argument_list|,
name|pixelSize
argument_list|)
expr_stmt|;
name|px
operator|=
name|pixelSize
expr_stmt|;
block|}
block|}
comment|// 3. see if we have a bitmap scalable font
if|if
condition|(
operator|!
name|size
operator|&&
name|style
operator|->
name|bitmapScalable
operator|&&
operator|(
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferMatch
operator|)
condition|)
block|{
name|size
operator|=
name|style
operator|->
name|pixelSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
condition|)
block|{
name|FM_DEBUG
argument_list|(
literal|"          found bitmap scalable font (%d pixels)"
argument_list|,
name|pixelSize
argument_list|)
expr_stmt|;
name|px
operator|=
name|pixelSize
expr_stmt|;
block|}
block|}
comment|// 4. find closest size match
if|if
condition|(
operator|!
name|size
condition|)
block|{
name|unsigned
name|int
name|distance
init|=
operator|~
literal|0u
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|style
operator|->
name|count
condition|;
operator|++
name|x
control|)
block|{
name|unsigned
name|int
name|d
decl_stmt|;
if|if
condition|(
name|style
operator|->
name|pixelSizes
index|[
name|x
index|]
operator|.
name|pixelSize
operator|<
name|pixelSize
condition|)
block|{
comment|// penalize sizes that are smaller than the
comment|// requested size, due to truncation from floating
comment|// point to integer conversions
name|d
operator|=
name|pixelSize
operator|-
name|style
operator|->
name|pixelSizes
index|[
name|x
index|]
operator|.
name|pixelSize
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
name|style
operator|->
name|pixelSizes
index|[
name|x
index|]
operator|.
name|pixelSize
operator|-
name|pixelSize
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|<
name|distance
condition|)
block|{
name|distance
operator|=
name|d
expr_stmt|;
name|size
operator|=
name|style
operator|->
name|pixelSizes
operator|+
name|x
expr_stmt|;
name|FM_DEBUG
argument_list|(
literal|"          best size so far: %3d (%d)"
argument_list|,
name|size
operator|->
name|pixelSize
argument_list|,
name|pixelSize
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|size
condition|)
block|{
name|FM_DEBUG
argument_list|(
literal|"          no size supports the script we want"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|style
operator|->
name|bitmapScalable
operator|&&
operator|!
operator|(
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferQuality
operator|)
operator|&&
operator|(
name|distance
operator|*
literal|10
operator|/
name|pixelSize
operator|)
operator|>=
literal|2
condition|)
block|{
comment|// the closest size is not close enough, go ahead and
comment|// use a bitmap scaled font
name|size
operator|=
name|style
operator|->
name|pixelSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|px
operator|=
name|pixelSize
expr_stmt|;
block|}
else|else
block|{
name|px
operator|=
name|size
operator|->
name|pixelSize
expr_stmt|;
block|}
block|}
name|unsigned
name|int
name|this_score
init|=
literal|0x0000
decl_stmt|;
enum|enum
block|{
name|PitchMismatch
init|=
literal|0x4000
block|,
name|StyleMismatch
init|=
literal|0x2000
block|,
name|BitmapScaledPenalty
init|=
literal|0x1000
block|}
enum|;
if|if
condition|(
name|pitch
operator|!=
literal|'*'
condition|)
block|{
if|if
condition|(
operator|(
name|pitch
operator|==
literal|'m'
operator|&&
operator|!
name|family
operator|->
name|fixedPitch
operator|)
operator|||
operator|(
name|pitch
operator|==
literal|'p'
operator|&&
name|family
operator|->
name|fixedPitch
operator|)
condition|)
name|this_score
operator|+=
name|PitchMismatch
expr_stmt|;
block|}
if|if
condition|(
name|styleKey
operator|!=
name|style
operator|->
name|key
condition|)
name|this_score
operator|+=
name|StyleMismatch
expr_stmt|;
if|if
condition|(
operator|!
name|style
operator|->
name|smoothScalable
operator|&&
name|px
operator|!=
name|size
operator|->
name|pixelSize
condition|)
comment|// bitmap scaled
name|this_score
operator|+=
name|BitmapScaledPenalty
expr_stmt|;
if|if
condition|(
name|px
operator|!=
name|pixelSize
condition|)
comment|// close, but not exact, size match
name|this_score
operator|+=
name|qAbs
argument_list|(
name|px
operator|-
name|pixelSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|this_score
operator|<
name|score
condition|)
block|{
name|FM_DEBUG
argument_list|(
literal|"          found a match: score %x best score so far %x"
argument_list|,
name|this_score
argument_list|,
name|score
argument_list|)
expr_stmt|;
name|score
operator|=
name|this_score
expr_stmt|;
name|desc
operator|->
name|foundry
operator|=
name|foundry
expr_stmt|;
name|desc
operator|->
name|style
operator|=
name|style
expr_stmt|;
name|desc
operator|->
name|size
operator|=
name|size
expr_stmt|;
block|}
else|else
block|{
name|FM_DEBUG
argument_list|(
literal|"          score %x no better than best %x"
argument_list|,
name|this_score
argument_list|,
name|score
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|score
return|;
block|}
end_function
begin_function
DECL|function|matchFamilyName
specifier|static
name|bool
name|matchFamilyName
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|,
name|QtFontFamily
modifier|*
name|f
parameter_list|)
block|{
if|if
condition|(
name|familyName
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
name|f
operator|->
name|matchesFamilyName
argument_list|(
name|familyName
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Tries to find the best match for a given request and family/foundry */
end_comment
begin_function
DECL|function|match
specifier|static
name|int
name|match
parameter_list|(
name|int
name|script
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|,
specifier|const
name|QString
modifier|&
name|family_name
parameter_list|,
specifier|const
name|QString
modifier|&
name|foundry_name
parameter_list|,
name|QtFontDesc
modifier|*
name|desc
parameter_list|,
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
name|blacklistedFamilies
parameter_list|)
block|{
name|int
name|result
init|=
operator|-
literal|1
decl_stmt|;
name|QtFontStyle
operator|::
name|Key
name|styleKey
decl_stmt|;
name|styleKey
operator|.
name|style
operator|=
name|request
operator|.
name|style
expr_stmt|;
name|styleKey
operator|.
name|weight
operator|=
name|request
operator|.
name|weight
expr_stmt|;
name|styleKey
operator|.
name|stretch
operator|=
name|request
operator|.
name|stretch
expr_stmt|;
name|char
name|pitch
init|=
name|request
operator|.
name|ignorePitch
condition|?
literal|'*'
else|:
name|request
operator|.
name|fixedPitch
condition|?
literal|'m'
else|:
literal|'p'
decl_stmt|;
name|FM_DEBUG
argument_list|(
literal|"QFontDatabase::match\n"
literal|"  request:\n"
literal|"    family: %s [%s], script: %d\n"
literal|"    weight: %d, style: %d\n"
literal|"    stretch: %d\n"
literal|"    pixelSize: %g\n"
literal|"    pitch: %c"
argument_list|,
name|family_name
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"-- first in script --"
else|:
name|family_name
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|foundry_name
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"-- any --"
else|:
name|foundry_name
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|script
argument_list|,
name|request
operator|.
name|weight
argument_list|,
name|request
operator|.
name|style
argument_list|,
name|request
operator|.
name|stretch
argument_list|,
name|request
operator|.
name|pixelSize
argument_list|,
name|pitch
argument_list|)
expr_stmt|;
name|desc
operator|->
name|family
operator|=
literal|0
expr_stmt|;
name|desc
operator|->
name|foundry
operator|=
literal|0
expr_stmt|;
name|desc
operator|->
name|style
operator|=
literal|0
expr_stmt|;
name|desc
operator|->
name|size
operator|=
literal|0
expr_stmt|;
name|unsigned
name|int
name|score
init|=
operator|~
literal|0u
decl_stmt|;
name|load
argument_list|(
name|family_name
argument_list|,
name|script
argument_list|)
expr_stmt|;
name|size_t
name|writingSystem
init|=
name|std
operator|::
name|find
argument_list|(
name|scriptForWritingSystem
argument_list|,
name|scriptForWritingSystem
operator|+
name|QFontDatabase
operator|::
name|WritingSystemsCount
argument_list|,
name|script
argument_list|)
operator|-
name|scriptForWritingSystem
decl_stmt|;
if|if
condition|(
name|writingSystem
operator|>=
name|QFontDatabase
operator|::
name|WritingSystemsCount
condition|)
name|writingSystem
operator|=
name|QFontDatabase
operator|::
name|Any
expr_stmt|;
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|db
operator|->
name|count
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|blacklistedFamilies
operator|.
name|contains
argument_list|(
name|x
argument_list|)
condition|)
continue|continue;
name|QtFontDesc
name|test
decl_stmt|;
name|test
operator|.
name|family
operator|=
name|db
operator|->
name|families
index|[
name|x
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|matchFamilyName
argument_list|(
name|family_name
argument_list|,
name|test
operator|.
name|family
argument_list|)
condition|)
continue|continue;
name|test
operator|.
name|family
operator|->
name|ensurePopulated
argument_list|()
expr_stmt|;
comment|// Check if family is supported in the script we want
if|if
condition|(
name|writingSystem
operator|!=
name|QFontDatabase
operator|::
name|Any
operator|&&
operator|!
operator|(
name|test
operator|.
name|family
operator|->
name|writingSystems
index|[
name|writingSystem
index|]
operator|&
name|QtFontFamily
operator|::
name|Supported
operator|)
condition|)
continue|continue;
comment|// as we know the script is supported, we can be sure
comment|// to find a matching font here.
name|unsigned
name|int
name|newscore
init|=
name|bestFoundry
argument_list|(
name|script
argument_list|,
name|score
argument_list|,
name|request
operator|.
name|styleStrategy
argument_list|,
name|test
operator|.
name|family
argument_list|,
name|foundry_name
argument_list|,
name|styleKey
argument_list|,
name|request
operator|.
name|pixelSize
argument_list|,
name|pitch
argument_list|,
operator|&
name|test
argument_list|,
name|request
operator|.
name|styleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|foundry
operator|==
literal|0
operator|&&
operator|!
name|foundry_name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// the specific foundry was not found, so look for
comment|// any foundry matching our requirements
name|newscore
operator|=
name|bestFoundry
argument_list|(
name|script
argument_list|,
name|score
argument_list|,
name|request
operator|.
name|styleStrategy
argument_list|,
name|test
operator|.
name|family
argument_list|,
name|QString
argument_list|()
argument_list|,
name|styleKey
argument_list|,
name|request
operator|.
name|pixelSize
argument_list|,
name|pitch
argument_list|,
operator|&
name|test
argument_list|,
name|request
operator|.
name|styleName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newscore
operator|<
name|score
condition|)
block|{
name|result
operator|=
name|x
expr_stmt|;
name|score
operator|=
name|newscore
expr_stmt|;
operator|*
name|desc
operator|=
name|test
expr_stmt|;
block|}
if|if
condition|(
name|newscore
operator|<
literal|10
condition|)
comment|// xlfd instead of FT... just accept it
break|break;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|styleStringHelper
specifier|static
name|QString
name|styleStringHelper
parameter_list|(
name|int
name|weight
parameter_list|,
name|QFont
operator|::
name|Style
name|style
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
if|if
condition|(
name|weight
operator|>
name|QFont
operator|::
name|Normal
condition|)
block|{
if|if
condition|(
name|weight
operator|>=
name|QFont
operator|::
name|Black
condition|)
name|result
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Black"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|weight
operator|>=
name|QFont
operator|::
name|ExtraBold
condition|)
name|result
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Extra Bold"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|weight
operator|>=
name|QFont
operator|::
name|Bold
condition|)
name|result
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Bold"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|weight
operator|>=
name|QFont
operator|::
name|DemiBold
condition|)
name|result
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Demi Bold"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|weight
operator|>=
name|QFont
operator|::
name|Medium
condition|)
name|result
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Medium"
argument_list|,
literal|"The Medium font weight"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|weight
operator|<=
name|QFont
operator|::
name|Thin
condition|)
name|result
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Thin"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|weight
operator|<=
name|QFont
operator|::
name|ExtraLight
condition|)
name|result
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Extra Light"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|weight
operator|<=
name|QFont
operator|::
name|Light
condition|)
name|result
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Light"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|style
operator|==
name|QFont
operator|::
name|StyleItalic
condition|)
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Italic"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|style
operator|==
name|QFont
operator|::
name|StyleOblique
condition|)
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Oblique"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Normal"
argument_list|,
literal|"The Normal or Regular font weight"
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|simplified
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a string that describes the style of the \a font. For     example, "Bold Italic", "Bold", "Italic" or "Normal". An empty     string may be returned. */
end_comment
begin_function
DECL|function|styleString
name|QString
name|QFontDatabase
operator|::
name|styleString
parameter_list|(
specifier|const
name|QFont
modifier|&
name|font
parameter_list|)
block|{
return|return
name|font
operator|.
name|styleName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|styleStringHelper
argument_list|(
name|font
operator|.
name|weight
argument_list|()
argument_list|,
name|font
operator|.
name|style
argument_list|()
argument_list|)
else|:
name|font
operator|.
name|styleName
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a string that describes the style of the \a fontInfo. For     example, "Bold Italic", "Bold", "Italic" or "Normal". An empty     string may be returned. */
end_comment
begin_function
DECL|function|styleString
name|QString
name|QFontDatabase
operator|::
name|styleString
parameter_list|(
specifier|const
name|QFontInfo
modifier|&
name|fontInfo
parameter_list|)
block|{
return|return
name|fontInfo
operator|.
name|styleName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|styleStringHelper
argument_list|(
name|fontInfo
operator|.
name|weight
argument_list|()
argument_list|,
name|fontInfo
operator|.
name|style
argument_list|()
argument_list|)
else|:
name|fontInfo
operator|.
name|styleName
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \class QFontDatabase     \threadsafe     \inmodule QtGui      \brief The QFontDatabase class provides information about the fonts available in the underlying window system.      \ingroup appearance      The most common uses of this class are to query the database for     the list of font families() and for the pointSizes() and styles()     that are available for each family. An alternative to pointSizes()     is smoothSizes() which returns the sizes at which a given family     and style will look attractive.      If the font family is available from two or more foundries the     foundry name is included in the family name; for example:     "Helvetica [Adobe]" and "Helvetica [Cronyx]". When you specify a     family, you can either use the old hyphenated "foundry-family"     format or the bracketed "family [foundry]" format; for example:     "Cronyx-Helvetica" or "Helvetica [Cronyx]". If the family has a     foundry it is always returned using the bracketed format, as is     the case with the value returned by families().      The font() function returns a QFont given a family, style and     point size.      A family and style combination can be checked to see if it is     italic() or bold(), and to retrieve its weight(). Similarly we can     call isBitmapScalable(), isSmoothlyScalable(), isScalable() and     isFixedPitch().      Use the styleString() to obtain a text version of a style.      The QFontDatabase class also supports some static functions, for     example, standardSizes(). You can retrieve the description of a     writing system using writingSystemName(), and a sample of     characters in a writing system with writingSystemSample().      Example:      \snippet qfontdatabase/main.cpp 0     \snippet qfontdatabase/main.cpp 1      This example gets the list of font families, the list of     styles for each family, and the point sizes that are available for     each combination of family and style, displaying this information     in a tree view.      \sa QFont, QFontInfo, QFontMetrics, {Character Map Example} */
end_comment
begin_comment
comment|/*!     Creates a font database object. */
end_comment
begin_constructor
DECL|function|QFontDatabase
name|QFontDatabase
operator|::
name|QFontDatabase
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qApp
operator|||
operator|!
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
condition|)
name|qFatal
argument_list|(
literal|"QFontDatabase: Must construct a QGuiApplication before accessing QFontDatabase"
argument_list|)
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|createDatabase
argument_list|()
expr_stmt|;
name|d
operator|=
name|privateDb
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \enum QFontDatabase::WritingSystem      \value Any     \value Latin     \value Greek     \value Cyrillic     \value Armenian     \value Hebrew     \value Arabic     \value Syriac     \value Thaana     \value Devanagari     \value Bengali     \value Gurmukhi     \value Gujarati     \value Oriya     \value Tamil     \value Telugu     \value Kannada     \value Malayalam     \value Sinhala     \value Thai     \value Lao     \value Tibetan     \value Myanmar     \value Georgian     \value Khmer     \value SimplifiedChinese     \value TraditionalChinese     \value Japanese     \value Korean     \value Vietnamese     \value Symbol     \value Other (the same as Symbol)     \value Ogham     \value Runic     \value Nko      \omitvalue WritingSystemsCount */
end_comment
begin_comment
comment|/*!     \enum QFontDatabase::SystemFont      \value GeneralFont              The default system font.     \value FixedFont                The fixed font that the system recommends.     \value TitleFont                The system standard font for titles.     \value SmallestReadableFont     The smallest readable system font.      \since 5.2 */
end_comment
begin_comment
comment|/*!     Returns a sorted list of the available writing systems. This is     list generated from information about all installed fonts on the     system.      \sa families() */
end_comment
begin_function
DECL|function|writingSystems
name|QList
argument_list|<
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|>
name|QFontDatabase
operator|::
name|writingSystems
parameter_list|()
specifier|const
block|{
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QT_PREPEND_NAMESPACE
function_decl|(
name|load
function_decl|)
parameter_list|()
function_decl|;
name|quint64
name|writingSystemsFound
init|=
literal|0
decl_stmt|;
name|Q_STATIC_ASSERT
argument_list|(
name|WritingSystemsCount
operator|<
literal|64
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QtFontFamily
modifier|*
name|family
init|=
name|d
operator|->
name|families
index|[
name|i
index|]
decl_stmt|;
name|family
operator|->
name|ensurePopulated
argument_list|()
expr_stmt|;
if|if
condition|(
name|family
operator|->
name|count
operator|==
literal|0
condition|)
continue|continue;
for|for
control|(
name|uint
name|x
init|=
name|Latin
init|;
name|x
operator|<
name|uint
argument_list|(
name|WritingSystemsCount
argument_list|)
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|family
operator|->
name|writingSystems
index|[
name|x
index|]
operator|&
name|QtFontFamily
operator|::
name|Supported
condition|)
name|writingSystemsFound
operator||=
name|quint64
argument_list|(
literal|1
argument_list|)
operator|<<
name|x
expr_stmt|;
block|}
block|}
comment|// mutex protection no longer needed - just working on local data now:
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|WritingSystem
argument_list|>
name|list
decl_stmt|;
name|list
operator|.
name|reserve
argument_list|(
name|qPopulationCount
argument_list|(
name|writingSystemsFound
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|uint
name|x
init|=
name|Latin
init|;
name|x
operator|<
name|uint
argument_list|(
name|WritingSystemsCount
argument_list|)
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|writingSystemsFound
operator|&
operator|(
name|quint64
argument_list|(
literal|1
argument_list|)
operator|<<
name|x
operator|)
condition|)
name|list
operator|.
name|push_back
argument_list|(
name|WritingSystem
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a sorted list of the writing systems supported by a given     font \a family.      \sa families() */
end_comment
begin_function
DECL|function|writingSystems
name|QList
argument_list|<
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|>
name|QFontDatabase
operator|::
name|writingSystems
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|)
specifier|const
block|{
name|QString
name|familyName
decl_stmt|,
name|foundryName
decl_stmt|;
name|parseFontName
argument_list|(
name|family
argument_list|,
name|foundryName
argument_list|,
name|familyName
argument_list|)
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QT_PREPEND_NAMESPACE
function_decl|(
name|load
function_decl|)
parameter_list|()
function_decl|;
name|QList
argument_list|<
name|WritingSystem
argument_list|>
name|list
decl_stmt|;
name|QtFontFamily
modifier|*
name|f
init|=
name|d
operator|->
name|family
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|||
name|f
operator|->
name|count
operator|==
literal|0
condition|)
return|return
name|list
return|;
for|for
control|(
name|int
name|x
init|=
name|Latin
init|;
name|x
operator|<
name|WritingSystemsCount
condition|;
operator|++
name|x
control|)
block|{
specifier|const
name|WritingSystem
name|writingSystem
init|=
name|WritingSystem
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|->
name|writingSystems
index|[
name|writingSystem
index|]
operator|&
name|QtFontFamily
operator|::
name|Supported
condition|)
name|list
operator|.
name|append
argument_list|(
name|writingSystem
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a sorted list of the available font families which support     the \a writingSystem.      If a family exists in several foundries, the returned name for     that font is in the form "family [foundry]". Examples: "Times     [Adobe]", "Times [Cronyx]", "Palatino".      \sa writingSystems() */
end_comment
begin_function
DECL|function|families
name|QStringList
name|QFontDatabase
operator|::
name|families
parameter_list|(
name|WritingSystem
name|writingSystem
parameter_list|)
specifier|const
block|{
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QT_PREPEND_NAMESPACE
function_decl|(
name|load
function_decl|)
parameter_list|()
function_decl|;
name|QStringList
name|flist
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|count
condition|;
name|i
operator|++
control|)
block|{
name|QtFontFamily
modifier|*
name|f
init|=
name|d
operator|->
name|families
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|f
operator|->
name|populated
operator|&&
name|f
operator|->
name|count
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|writingSystem
operator|!=
name|Any
condition|)
block|{
name|f
operator|->
name|ensurePopulated
argument_list|()
expr_stmt|;
if|if
condition|(
name|f
operator|->
name|writingSystems
index|[
name|writingSystem
index|]
operator|!=
name|QtFontFamily
operator|::
name|Supported
condition|)
continue|continue;
block|}
if|if
condition|(
operator|!
name|f
operator|->
name|populated
operator|||
name|f
operator|->
name|count
operator|==
literal|1
condition|)
block|{
name|flist
operator|.
name|append
argument_list|(
name|f
operator|->
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|f
operator|->
name|count
condition|;
name|j
operator|++
control|)
block|{
name|QString
name|str
init|=
name|f
operator|->
name|name
decl_stmt|;
name|QString
name|foundry
init|=
name|f
operator|->
name|foundries
index|[
name|j
index|]
operator|->
name|name
decl_stmt|;
if|if
condition|(
operator|!
name|foundry
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|str
operator|+=
name|QLatin1String
argument_list|(
literal|" ["
argument_list|)
expr_stmt|;
name|str
operator|+=
name|foundry
expr_stmt|;
name|str
operator|+=
name|QLatin1Char
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
name|flist
operator|.
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|flist
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of the styles available for the font family \a     family. Some example styles: "Light", "Light Italic", "Bold",     "Oblique", "Demi". The list may be empty.      \sa families() */
end_comment
begin_function
DECL|function|styles
name|QStringList
name|QFontDatabase
operator|::
name|styles
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|)
specifier|const
block|{
name|QString
name|familyName
decl_stmt|,
name|foundryName
decl_stmt|;
name|parseFontName
argument_list|(
name|family
argument_list|,
name|foundryName
argument_list|,
name|familyName
argument_list|)
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QT_PREPEND_NAMESPACE
function_decl|(
name|load
function_decl|)
parameter_list|(
name|familyName
parameter_list|)
function_decl|;
name|QStringList
name|l
decl_stmt|;
name|QtFontFamily
modifier|*
name|f
init|=
name|d
operator|->
name|family
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
condition|)
return|return
name|l
return|;
name|QtFontFoundry
name|allStyles
argument_list|(
name|foundryName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|f
operator|->
name|count
condition|;
name|j
operator|++
control|)
block|{
name|QtFontFoundry
modifier|*
name|foundry
init|=
name|f
operator|->
name|foundries
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|foundryName
operator|.
name|isEmpty
argument_list|()
operator|||
name|foundry
operator|->
name|name
operator|.
name|compare
argument_list|(
name|foundryName
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|foundry
operator|->
name|count
condition|;
name|k
operator|++
control|)
block|{
name|QtFontStyle
operator|::
name|Key
name|ke
argument_list|(
name|foundry
operator|->
name|styles
index|[
name|k
index|]
operator|->
name|key
argument_list|)
decl_stmt|;
name|ke
operator|.
name|stretch
operator|=
literal|0
expr_stmt|;
name|allStyles
operator|.
name|style
argument_list|(
name|ke
argument_list|,
name|foundry
operator|->
name|styles
index|[
name|k
index|]
operator|->
name|styleName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|l
operator|.
name|reserve
argument_list|(
name|allStyles
operator|.
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allStyles
operator|.
name|count
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|.
name|append
argument_list|(
name|allStyles
operator|.
name|styles
index|[
name|i
index|]
operator|->
name|styleName
operator|.
name|isEmpty
argument_list|()
condition|?
name|styleStringHelper
argument_list|(
name|allStyles
operator|.
name|styles
index|[
name|i
index|]
operator|->
name|key
operator|.
name|weight
argument_list|,
operator|(
name|QFont
operator|::
name|Style
operator|)
name|allStyles
operator|.
name|styles
index|[
name|i
index|]
operator|->
name|key
operator|.
name|style
argument_list|)
else|:
name|allStyles
operator|.
name|styles
index|[
name|i
index|]
operator|->
name|styleName
argument_list|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the font that has family \a family and style \a     style is fixed pitch; otherwise returns \c false. */
end_comment
begin_function
DECL|function|isFixedPitch
name|bool
name|QFontDatabase
operator|::
name|isFixedPitch
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|,
specifier|const
name|QString
modifier|&
name|style
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|QString
name|familyName
decl_stmt|,
name|foundryName
decl_stmt|;
name|parseFontName
argument_list|(
name|family
argument_list|,
name|foundryName
argument_list|,
name|familyName
argument_list|)
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QT_PREPEND_NAMESPACE
function_decl|(
name|load
function_decl|)
parameter_list|(
name|familyName
parameter_list|)
function_decl|;
name|QtFontFamily
modifier|*
name|f
init|=
name|d
operator|->
name|family
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
return|return
operator|(
name|f
operator|&&
name|f
operator|->
name|fixedPitch
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the font that has family \a family and style \a     style is a scalable bitmap font; otherwise returns \c false. Scaling     a bitmap font usually produces an unattractive hardly readable     result, because the pixels of the font are scaled. If you need to     scale a bitmap font it is better to scale it to one of the fixed     sizes returned by smoothSizes().      \sa isScalable(), isSmoothlyScalable() */
end_comment
begin_function
DECL|function|isBitmapScalable
name|bool
name|QFontDatabase
operator|::
name|isBitmapScalable
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|,
specifier|const
name|QString
modifier|&
name|style
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|fontDatabase
argument_list|()
operator|->
name|fontsAlwaysScalable
argument_list|()
condition|)
return|return
literal|true
return|;
name|bool
name|bitmapScalable
init|=
literal|false
decl_stmt|;
name|QString
name|familyName
decl_stmt|,
name|foundryName
decl_stmt|;
name|parseFontName
argument_list|(
name|family
argument_list|,
name|foundryName
argument_list|,
name|familyName
argument_list|)
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QT_PREPEND_NAMESPACE
function_decl|(
name|load
function_decl|)
parameter_list|(
name|familyName
parameter_list|)
function_decl|;
name|QtFontFamily
modifier|*
name|f
init|=
name|d
operator|->
name|family
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
condition|)
return|return
name|bitmapScalable
return|;
name|QtFontStyle
operator|::
name|Key
name|styleKey
argument_list|(
name|style
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|f
operator|->
name|count
condition|;
name|j
operator|++
control|)
block|{
name|QtFontFoundry
modifier|*
name|foundry
init|=
name|f
operator|->
name|foundries
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|foundryName
operator|.
name|isEmpty
argument_list|()
operator|||
name|foundry
operator|->
name|name
operator|.
name|compare
argument_list|(
name|foundryName
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|foundry
operator|->
name|count
condition|;
name|k
operator|++
control|)
if|if
condition|(
operator|(
name|style
operator|.
name|isEmpty
argument_list|()
operator|||
name|foundry
operator|->
name|styles
index|[
name|k
index|]
operator|->
name|styleName
operator|==
name|style
operator|||
name|foundry
operator|->
name|styles
index|[
name|k
index|]
operator|->
name|key
operator|==
name|styleKey
operator|)
operator|&&
name|foundry
operator|->
name|styles
index|[
name|k
index|]
operator|->
name|bitmapScalable
operator|&&
operator|!
name|foundry
operator|->
name|styles
index|[
name|k
index|]
operator|->
name|smoothScalable
condition|)
block|{
name|bitmapScalable
operator|=
literal|true
expr_stmt|;
goto|goto
name|end
goto|;
block|}
block|}
block|}
name|end
label|:
return|return
name|bitmapScalable
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the font that has family \a family and style \a     style is smoothly scalable; otherwise returns \c false. If this     function returns \c true, it's safe to scale this font to any size,     and the result will always look attractive.      \sa isScalable(), isBitmapScalable() */
end_comment
begin_function
DECL|function|isSmoothlyScalable
name|bool
name|QFontDatabase
operator|::
name|isSmoothlyScalable
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|,
specifier|const
name|QString
modifier|&
name|style
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|fontDatabase
argument_list|()
operator|->
name|fontsAlwaysScalable
argument_list|()
condition|)
return|return
literal|true
return|;
name|bool
name|smoothScalable
init|=
literal|false
decl_stmt|;
name|QString
name|familyName
decl_stmt|,
name|foundryName
decl_stmt|;
name|parseFontName
argument_list|(
name|family
argument_list|,
name|foundryName
argument_list|,
name|familyName
argument_list|)
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QT_PREPEND_NAMESPACE
function_decl|(
name|load
function_decl|)
parameter_list|(
name|familyName
parameter_list|)
function_decl|;
name|QtFontFamily
modifier|*
name|f
init|=
name|d
operator|->
name|family
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|->
name|families
index|[
name|i
index|]
operator|->
name|matchesFamilyName
argument_list|(
name|familyName
argument_list|)
condition|)
block|{
name|f
operator|=
name|d
operator|->
name|families
index|[
name|i
index|]
expr_stmt|;
name|f
operator|->
name|ensurePopulated
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|f
condition|)
return|return
name|smoothScalable
return|;
name|QtFontStyle
operator|::
name|Key
name|styleKey
argument_list|(
name|style
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|f
operator|->
name|count
condition|;
name|j
operator|++
control|)
block|{
name|QtFontFoundry
modifier|*
name|foundry
init|=
name|f
operator|->
name|foundries
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|foundryName
operator|.
name|isEmpty
argument_list|()
operator|||
name|foundry
operator|->
name|name
operator|.
name|compare
argument_list|(
name|foundryName
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|foundry
operator|->
name|count
condition|;
name|k
operator|++
control|)
if|if
condition|(
operator|(
name|style
operator|.
name|isEmpty
argument_list|()
operator|||
name|foundry
operator|->
name|styles
index|[
name|k
index|]
operator|->
name|styleName
operator|==
name|style
operator|||
name|foundry
operator|->
name|styles
index|[
name|k
index|]
operator|->
name|key
operator|==
name|styleKey
operator|)
operator|&&
name|foundry
operator|->
name|styles
index|[
name|k
index|]
operator|->
name|smoothScalable
condition|)
block|{
name|smoothScalable
operator|=
literal|true
expr_stmt|;
goto|goto
name|end
goto|;
block|}
block|}
block|}
name|end
label|:
return|return
name|smoothScalable
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the font that has family \a family and style \a     style is scalable; otherwise returns \c false.      \sa isBitmapScalable(), isSmoothlyScalable() */
end_comment
begin_function
DECL|function|isScalable
name|bool
name|QFontDatabase
operator|::
name|isScalable
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|,
specifier|const
name|QString
modifier|&
name|style
parameter_list|)
specifier|const
block|{
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSmoothlyScalable
argument_list|(
name|family
argument_list|,
name|style
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|isBitmapScalable
argument_list|(
name|family
argument_list|,
name|style
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of the point sizes available for the font that has     family \a family and style \a styleName. The list may be empty.      \sa smoothSizes(), standardSizes() */
end_comment
begin_function
DECL|function|pointSizes
name|QList
argument_list|<
name|int
argument_list|>
name|QFontDatabase
operator|::
name|pointSizes
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|,
specifier|const
name|QString
modifier|&
name|styleName
parameter_list|)
block|{
if|if
condition|(
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|fontDatabase
argument_list|()
operator|->
name|fontsAlwaysScalable
argument_list|()
condition|)
return|return
name|standardSizes
argument_list|()
return|;
name|bool
name|smoothScalable
init|=
literal|false
decl_stmt|;
name|QString
name|familyName
decl_stmt|,
name|foundryName
decl_stmt|;
name|parseFontName
argument_list|(
name|family
argument_list|,
name|foundryName
argument_list|,
name|familyName
argument_list|)
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QT_PREPEND_NAMESPACE
function_decl|(
name|load
function_decl|)
parameter_list|(
name|familyName
parameter_list|)
function_decl|;
name|QList
argument_list|<
name|int
argument_list|>
name|sizes
decl_stmt|;
name|QtFontFamily
modifier|*
name|fam
init|=
name|d
operator|->
name|family
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fam
condition|)
return|return
name|sizes
return|;
specifier|const
name|int
name|dpi
init|=
name|qt_defaultDpiY
argument_list|()
decl_stmt|;
comment|// embedded
name|QtFontStyle
operator|::
name|Key
name|styleKey
argument_list|(
name|styleName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fam
operator|->
name|count
condition|;
name|j
operator|++
control|)
block|{
name|QtFontFoundry
modifier|*
name|foundry
init|=
name|fam
operator|->
name|foundries
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|foundryName
operator|.
name|isEmpty
argument_list|()
operator|||
name|foundry
operator|->
name|name
operator|.
name|compare
argument_list|(
name|foundryName
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
block|{
name|QtFontStyle
modifier|*
name|style
init|=
name|foundry
operator|->
name|style
argument_list|(
name|styleKey
argument_list|,
name|styleName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|style
condition|)
continue|continue;
if|if
condition|(
name|style
operator|->
name|smoothScalable
condition|)
block|{
name|smoothScalable
operator|=
literal|true
expr_stmt|;
goto|goto
name|end
goto|;
block|}
for|for
control|(
name|int
name|l
init|=
literal|0
init|;
name|l
operator|<
name|style
operator|->
name|count
condition|;
name|l
operator|++
control|)
block|{
specifier|const
name|QtFontSize
modifier|*
name|size
init|=
name|style
operator|->
name|pixelSizes
operator|+
name|l
decl_stmt|;
if|if
condition|(
name|size
operator|->
name|pixelSize
operator|!=
literal|0
operator|&&
name|size
operator|->
name|pixelSize
operator|!=
name|SMOOTH_SCALABLE
condition|)
block|{
specifier|const
name|uint
name|pointSize
init|=
name|qRound
argument_list|(
name|size
operator|->
name|pixelSize
operator|*
literal|72.0
operator|/
name|dpi
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sizes
operator|.
name|contains
argument_list|(
name|pointSize
argument_list|)
condition|)
name|sizes
operator|.
name|append
argument_list|(
name|pointSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|end
label|:
if|if
condition|(
name|smoothScalable
condition|)
return|return
name|standardSizes
argument_list|()
return|;
name|std
operator|::
name|sort
argument_list|(
name|sizes
operator|.
name|begin
argument_list|()
argument_list|,
name|sizes
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sizes
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a QFont object that has family \a family, style \a style     and point size \a pointSize. If no matching font could be created,     a QFont object that uses the application's default font is     returned. */
end_comment
begin_function
DECL|function|font
name|QFont
name|QFontDatabase
operator|::
name|font
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|,
specifier|const
name|QString
modifier|&
name|style
parameter_list|,
name|int
name|pointSize
parameter_list|)
specifier|const
block|{
name|QString
name|familyName
decl_stmt|,
name|foundryName
decl_stmt|;
name|parseFontName
argument_list|(
name|family
argument_list|,
name|foundryName
argument_list|,
name|familyName
argument_list|)
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QT_PREPEND_NAMESPACE
function_decl|(
name|load
function_decl|)
parameter_list|(
name|familyName
parameter_list|)
function_decl|;
name|QtFontFoundry
name|allStyles
argument_list|(
name|foundryName
argument_list|)
decl_stmt|;
name|QtFontFamily
modifier|*
name|f
init|=
name|d
operator|->
name|family
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
condition|)
return|return
name|QGuiApplication
operator|::
name|font
argument_list|()
return|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|f
operator|->
name|count
condition|;
name|j
operator|++
control|)
block|{
name|QtFontFoundry
modifier|*
name|foundry
init|=
name|f
operator|->
name|foundries
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|foundryName
operator|.
name|isEmpty
argument_list|()
operator|||
name|foundry
operator|->
name|name
operator|.
name|compare
argument_list|(
name|foundryName
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|foundry
operator|->
name|count
condition|;
name|k
operator|++
control|)
name|allStyles
operator|.
name|style
argument_list|(
name|foundry
operator|->
name|styles
index|[
name|k
index|]
operator|->
name|key
argument_list|,
name|foundry
operator|->
name|styles
index|[
name|k
index|]
operator|->
name|styleName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|QtFontStyle
operator|::
name|Key
name|styleKey
argument_list|(
name|style
argument_list|)
decl_stmt|;
name|QtFontStyle
modifier|*
name|s
init|=
name|bestStyle
argument_list|(
operator|&
name|allStyles
argument_list|,
name|styleKey
argument_list|,
name|style
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
condition|)
comment|// no styles found?
return|return
name|QGuiApplication
operator|::
name|font
argument_list|()
return|;
name|QFont
name|fnt
argument_list|(
name|family
argument_list|,
name|pointSize
argument_list|,
name|s
operator|->
name|key
operator|.
name|weight
argument_list|)
decl_stmt|;
name|fnt
operator|.
name|setStyle
argument_list|(
operator|(
name|QFont
operator|::
name|Style
operator|)
name|s
operator|->
name|key
operator|.
name|style
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|s
operator|->
name|styleName
operator|.
name|isEmpty
argument_list|()
condition|)
name|fnt
operator|.
name|setStyleName
argument_list|(
name|s
operator|->
name|styleName
argument_list|)
expr_stmt|;
return|return
name|fnt
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the point sizes of a font that has family \a family and     style \a styleName that will look attractive. The list may be empty.     For non-scalable fonts and bitmap scalable fonts, this function     is equivalent to pointSizes().    \sa pointSizes(), standardSizes() */
end_comment
begin_function
DECL|function|smoothSizes
name|QList
argument_list|<
name|int
argument_list|>
name|QFontDatabase
operator|::
name|smoothSizes
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|,
specifier|const
name|QString
modifier|&
name|styleName
parameter_list|)
block|{
if|if
condition|(
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|fontDatabase
argument_list|()
operator|->
name|fontsAlwaysScalable
argument_list|()
condition|)
return|return
name|standardSizes
argument_list|()
return|;
name|bool
name|smoothScalable
init|=
literal|false
decl_stmt|;
name|QString
name|familyName
decl_stmt|,
name|foundryName
decl_stmt|;
name|parseFontName
argument_list|(
name|family
argument_list|,
name|foundryName
argument_list|,
name|familyName
argument_list|)
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QT_PREPEND_NAMESPACE
function_decl|(
name|load
function_decl|)
parameter_list|(
name|familyName
parameter_list|)
function_decl|;
name|QList
argument_list|<
name|int
argument_list|>
name|sizes
decl_stmt|;
name|QtFontFamily
modifier|*
name|fam
init|=
name|d
operator|->
name|family
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fam
condition|)
return|return
name|sizes
return|;
specifier|const
name|int
name|dpi
init|=
name|qt_defaultDpiY
argument_list|()
decl_stmt|;
comment|// embedded
name|QtFontStyle
operator|::
name|Key
name|styleKey
argument_list|(
name|styleName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fam
operator|->
name|count
condition|;
name|j
operator|++
control|)
block|{
name|QtFontFoundry
modifier|*
name|foundry
init|=
name|fam
operator|->
name|foundries
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|foundryName
operator|.
name|isEmpty
argument_list|()
operator|||
name|foundry
operator|->
name|name
operator|.
name|compare
argument_list|(
name|foundryName
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
block|{
name|QtFontStyle
modifier|*
name|style
init|=
name|foundry
operator|->
name|style
argument_list|(
name|styleKey
argument_list|,
name|styleName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|style
condition|)
continue|continue;
if|if
condition|(
name|style
operator|->
name|smoothScalable
condition|)
block|{
name|smoothScalable
operator|=
literal|true
expr_stmt|;
goto|goto
name|end
goto|;
block|}
for|for
control|(
name|int
name|l
init|=
literal|0
init|;
name|l
operator|<
name|style
operator|->
name|count
condition|;
name|l
operator|++
control|)
block|{
specifier|const
name|QtFontSize
modifier|*
name|size
init|=
name|style
operator|->
name|pixelSizes
operator|+
name|l
decl_stmt|;
if|if
condition|(
name|size
operator|->
name|pixelSize
operator|!=
literal|0
operator|&&
name|size
operator|->
name|pixelSize
operator|!=
name|SMOOTH_SCALABLE
condition|)
block|{
specifier|const
name|uint
name|pointSize
init|=
name|qRound
argument_list|(
name|size
operator|->
name|pixelSize
operator|*
literal|72.0
operator|/
name|dpi
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sizes
operator|.
name|contains
argument_list|(
name|pointSize
argument_list|)
condition|)
name|sizes
operator|.
name|append
argument_list|(
name|pointSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|end
label|:
if|if
condition|(
name|smoothScalable
condition|)
return|return
name|QFontDatabase
operator|::
name|standardSizes
argument_list|()
return|;
name|std
operator|::
name|sort
argument_list|(
name|sizes
operator|.
name|begin
argument_list|()
argument_list|,
name|sizes
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sizes
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of standard font sizes.      \sa smoothSizes(), pointSizes() */
end_comment
begin_function
DECL|function|standardSizes
name|QList
argument_list|<
name|int
argument_list|>
name|QFontDatabase
operator|::
name|standardSizes
parameter_list|()
block|{
return|return
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|fontDatabase
argument_list|()
operator|->
name|standardSizes
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the font that has family \a family and style \a     style is italic; otherwise returns \c false.      \sa weight(), bold() */
end_comment
begin_function
DECL|function|italic
name|bool
name|QFontDatabase
operator|::
name|italic
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|,
specifier|const
name|QString
modifier|&
name|style
parameter_list|)
specifier|const
block|{
name|QString
name|familyName
decl_stmt|,
name|foundryName
decl_stmt|;
name|parseFontName
argument_list|(
name|family
argument_list|,
name|foundryName
argument_list|,
name|familyName
argument_list|)
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QT_PREPEND_NAMESPACE
function_decl|(
name|load
function_decl|)
parameter_list|(
name|familyName
parameter_list|)
function_decl|;
name|QtFontFoundry
name|allStyles
argument_list|(
name|foundryName
argument_list|)
decl_stmt|;
name|QtFontFamily
modifier|*
name|f
init|=
name|d
operator|->
name|family
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|f
operator|->
name|count
condition|;
name|j
operator|++
control|)
block|{
name|QtFontFoundry
modifier|*
name|foundry
init|=
name|f
operator|->
name|foundries
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|foundryName
operator|.
name|isEmpty
argument_list|()
operator|||
name|foundry
operator|->
name|name
operator|.
name|compare
argument_list|(
name|foundryName
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|foundry
operator|->
name|count
condition|;
name|k
operator|++
control|)
name|allStyles
operator|.
name|style
argument_list|(
name|foundry
operator|->
name|styles
index|[
name|k
index|]
operator|->
name|key
argument_list|,
name|foundry
operator|->
name|styles
index|[
name|k
index|]
operator|->
name|styleName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|QtFontStyle
operator|::
name|Key
name|styleKey
argument_list|(
name|style
argument_list|)
decl_stmt|;
name|QtFontStyle
modifier|*
name|s
init|=
name|allStyles
operator|.
name|style
argument_list|(
name|styleKey
argument_list|,
name|style
argument_list|)
decl_stmt|;
return|return
name|s
operator|&&
name|s
operator|->
name|key
operator|.
name|style
operator|==
name|QFont
operator|::
name|StyleItalic
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the font that has family \a family and style \a     style is bold; otherwise returns \c false.      \sa italic(), weight() */
end_comment
begin_function
DECL|function|bold
name|bool
name|QFontDatabase
operator|::
name|bold
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|,
specifier|const
name|QString
modifier|&
name|style
parameter_list|)
specifier|const
block|{
name|QString
name|familyName
decl_stmt|,
name|foundryName
decl_stmt|;
name|parseFontName
argument_list|(
name|family
argument_list|,
name|foundryName
argument_list|,
name|familyName
argument_list|)
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QT_PREPEND_NAMESPACE
function_decl|(
name|load
function_decl|)
parameter_list|(
name|familyName
parameter_list|)
function_decl|;
name|QtFontFoundry
name|allStyles
argument_list|(
name|foundryName
argument_list|)
decl_stmt|;
name|QtFontFamily
modifier|*
name|f
init|=
name|d
operator|->
name|family
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|f
operator|->
name|count
condition|;
name|j
operator|++
control|)
block|{
name|QtFontFoundry
modifier|*
name|foundry
init|=
name|f
operator|->
name|foundries
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|foundryName
operator|.
name|isEmpty
argument_list|()
operator|||
name|foundry
operator|->
name|name
operator|.
name|compare
argument_list|(
name|foundryName
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|foundry
operator|->
name|count
condition|;
name|k
operator|++
control|)
name|allStyles
operator|.
name|style
argument_list|(
name|foundry
operator|->
name|styles
index|[
name|k
index|]
operator|->
name|key
argument_list|,
name|foundry
operator|->
name|styles
index|[
name|k
index|]
operator|->
name|styleName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|QtFontStyle
operator|::
name|Key
name|styleKey
argument_list|(
name|style
argument_list|)
decl_stmt|;
name|QtFontStyle
modifier|*
name|s
init|=
name|allStyles
operator|.
name|style
argument_list|(
name|styleKey
argument_list|,
name|style
argument_list|)
decl_stmt|;
return|return
name|s
operator|&&
name|s
operator|->
name|key
operator|.
name|weight
operator|>=
name|QFont
operator|::
name|Bold
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the weight of the font that has family \a family and style     \a style. If there is no such family and style combination,     returns -1.      \sa italic(), bold() */
end_comment
begin_function
DECL|function|weight
name|int
name|QFontDatabase
operator|::
name|weight
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|,
specifier|const
name|QString
modifier|&
name|style
parameter_list|)
specifier|const
block|{
name|QString
name|familyName
decl_stmt|,
name|foundryName
decl_stmt|;
name|parseFontName
argument_list|(
name|family
argument_list|,
name|foundryName
argument_list|,
name|familyName
argument_list|)
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QT_PREPEND_NAMESPACE
function_decl|(
name|load
function_decl|)
parameter_list|(
name|familyName
parameter_list|)
function_decl|;
name|QtFontFoundry
name|allStyles
argument_list|(
name|foundryName
argument_list|)
decl_stmt|;
name|QtFontFamily
modifier|*
name|f
init|=
name|d
operator|->
name|family
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
condition|)
return|return
operator|-
literal|1
return|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|f
operator|->
name|count
condition|;
name|j
operator|++
control|)
block|{
name|QtFontFoundry
modifier|*
name|foundry
init|=
name|f
operator|->
name|foundries
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|foundryName
operator|.
name|isEmpty
argument_list|()
operator|||
name|foundry
operator|->
name|name
operator|.
name|compare
argument_list|(
name|foundryName
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|foundry
operator|->
name|count
condition|;
name|k
operator|++
control|)
name|allStyles
operator|.
name|style
argument_list|(
name|foundry
operator|->
name|styles
index|[
name|k
index|]
operator|->
name|key
argument_list|,
name|foundry
operator|->
name|styles
index|[
name|k
index|]
operator|->
name|styleName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|QtFontStyle
operator|::
name|Key
name|styleKey
argument_list|(
name|style
argument_list|)
decl_stmt|;
name|QtFontStyle
modifier|*
name|s
init|=
name|allStyles
operator|.
name|style
argument_list|(
name|styleKey
argument_list|,
name|style
argument_list|)
decl_stmt|;
return|return
name|s
condition|?
name|s
operator|->
name|key
operator|.
name|weight
else|:
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|hasFamily
name|bool
name|QFontDatabase
operator|::
name|hasFamily
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|)
specifier|const
block|{
name|QString
name|parsedFamily
decl_stmt|,
name|foundry
decl_stmt|;
name|parseFontName
argument_list|(
name|family
argument_list|,
name|foundry
argument_list|,
name|parsedFamily
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|familyAlias
init|=
name|resolveFontFamilyAlias
argument_list|(
name|parsedFamily
argument_list|)
decl_stmt|;
return|return
name|families
argument_list|()
operator|.
name|contains
argument_list|(
name|familyAlias
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 5.5      Returns \c true if and only if the \a family font family is private.      This happens, for instance, on OS X and iOS, where the system UI fonts are not     accessible to the user. For completeness, QFontDatabase::families() returns all     font families, including the private ones. You should use this function if you     are developing a font selection control in order to keep private fonts hidden.      \sa families() */
end_comment
begin_function
DECL|function|isPrivateFamily
name|bool
name|QFontDatabase
operator|::
name|isPrivateFamily
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|)
specifier|const
block|{
return|return
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|fontDatabase
argument_list|()
operator|->
name|isPrivateFontFamily
argument_list|(
name|family
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the names the \a writingSystem (e.g. for displaying to the     user in a dialog). */
end_comment
begin_function
DECL|function|writingSystemName
name|QString
name|QFontDatabase
operator|::
name|writingSystemName
parameter_list|(
name|WritingSystem
name|writingSystem
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|name
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|writingSystem
condition|)
block|{
case|case
name|Any
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Any"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Latin
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Latin"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Greek
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Greek"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Cyrillic
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Cyrillic"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Armenian
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Armenian"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Hebrew
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Hebrew"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Arabic
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Arabic"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Syriac
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Syriac"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Thaana
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Thaana"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Devanagari
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Devanagari"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Bengali
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Bengali"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Gurmukhi
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Gurmukhi"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Gujarati
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Gujarati"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Oriya
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Oriya"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Tamil
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Tamil"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Telugu
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Telugu"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Kannada
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Kannada"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Malayalam
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Malayalam"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Sinhala
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Sinhala"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Thai
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Thai"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Lao
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Lao"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Tibetan
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Tibetan"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Myanmar
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Myanmar"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Georgian
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Georgian"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Khmer
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Khmer"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SimplifiedChinese
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Simplified Chinese"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TraditionalChinese
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Traditional Chinese"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Japanese
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Japanese"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Korean
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Korean"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Vietnamese
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Vietnamese"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Symbol
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Symbol"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Ogham
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Ogham"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Runic
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"Runic"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Nko
case|:
name|name
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QFontDatabase"
argument_list|,
literal|"N'Ko"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Q_ASSERT_X
argument_list|(
literal|false
argument_list|,
literal|"QFontDatabase::writingSystemName"
argument_list|,
literal|"invalid 'writingSystem' parameter"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFontDatabase"
argument_list|,
name|name
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a string with sample characters from \a writingSystem. */
end_comment
begin_function
DECL|function|writingSystemSample
name|QString
name|QFontDatabase
operator|::
name|writingSystemSample
parameter_list|(
name|WritingSystem
name|writingSystem
parameter_list|)
block|{
name|QString
name|sample
decl_stmt|;
switch|switch
condition|(
name|writingSystem
condition|)
block|{
case|case
name|Any
case|:
case|case
name|Symbol
case|:
comment|// show only ascii characters
name|sample
operator|+=
name|QLatin1String
argument_list|(
literal|"AaBbzZ"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Latin
case|:
comment|// This is cheating... we only show latin-1 characters so that we don't
comment|// end up loading lots of fonts - at least on X11...
name|sample
operator|=
name|QLatin1String
argument_list|(
literal|"Aa"
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x00C3
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x00E1
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QLatin1String
argument_list|(
literal|"Zz"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Greek
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0393
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x03B1
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x03A9
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x03C9
argument_list|)
expr_stmt|;
break|break;
case|case
name|Cyrillic
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0414
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0434
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0436
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x044f
argument_list|)
expr_stmt|;
break|break;
case|case
name|Armenian
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x053f
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x054f
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x056f
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x057f
argument_list|)
expr_stmt|;
break|break;
case|case
name|Hebrew
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x05D0
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x05D1
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x05D2
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x05D3
argument_list|)
expr_stmt|;
break|break;
case|case
name|Arabic
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0628
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0629
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x062A
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x063A
argument_list|)
expr_stmt|;
break|break;
case|case
name|Syriac
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0715
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0725
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0716
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0726
argument_list|)
expr_stmt|;
break|break;
case|case
name|Thaana
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0784
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0794
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x078c
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x078d
argument_list|)
expr_stmt|;
break|break;
case|case
name|Devanagari
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0905
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0915
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0925
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0935
argument_list|)
expr_stmt|;
break|break;
case|case
name|Bengali
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0986
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0996
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x09a6
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x09b6
argument_list|)
expr_stmt|;
break|break;
case|case
name|Gurmukhi
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0a05
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0a15
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0a25
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0a35
argument_list|)
expr_stmt|;
break|break;
case|case
name|Gujarati
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0a85
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0a95
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0aa5
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0ab5
argument_list|)
expr_stmt|;
break|break;
case|case
name|Oriya
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0b06
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0b16
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0b2b
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0b36
argument_list|)
expr_stmt|;
break|break;
case|case
name|Tamil
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0b89
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0b99
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0ba9
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0bb9
argument_list|)
expr_stmt|;
break|break;
case|case
name|Telugu
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0c05
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0c15
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0c25
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0c35
argument_list|)
expr_stmt|;
break|break;
case|case
name|Kannada
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0c85
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0c95
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0ca5
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0cb5
argument_list|)
expr_stmt|;
break|break;
case|case
name|Malayalam
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0d05
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0d15
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0d25
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0d35
argument_list|)
expr_stmt|;
break|break;
case|case
name|Sinhala
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0d90
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0da0
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0db0
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0dc0
argument_list|)
expr_stmt|;
break|break;
case|case
name|Thai
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0e02
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0e12
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0e22
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0e32
argument_list|)
expr_stmt|;
break|break;
case|case
name|Lao
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0e8d
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0e9d
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0ead
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0ebd
argument_list|)
expr_stmt|;
break|break;
case|case
name|Tibetan
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0f00
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0f01
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0f02
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x0f03
argument_list|)
expr_stmt|;
break|break;
case|case
name|Myanmar
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x1000
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x1001
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x1002
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x1003
argument_list|)
expr_stmt|;
break|break;
case|case
name|Georgian
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x10a0
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x10b0
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x10c0
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x10d0
argument_list|)
expr_stmt|;
break|break;
case|case
name|Khmer
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x1780
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x1790
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x17b0
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x17c0
argument_list|)
expr_stmt|;
break|break;
case|case
name|SimplifiedChinese
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x4e2d
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x6587
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x8303
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x4f8b
argument_list|)
expr_stmt|;
break|break;
case|case
name|TraditionalChinese
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x4e2d
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x6587
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x7bc4
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x4f8b
argument_list|)
expr_stmt|;
break|break;
case|case
name|Japanese
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x30b5
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x30f3
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x30d7
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x30eb
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x3067
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x3059
argument_list|)
expr_stmt|;
break|break;
case|case
name|Korean
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0xac00
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0xac11
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0xac1a
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0xac2f
argument_list|)
expr_stmt|;
break|break;
case|case
name|Vietnamese
case|:
block|{
specifier|static
specifier|const
name|char
name|vietnameseUtf8
index|[]
init|=
block|{
name|char
argument_list|(
literal|0xef
argument_list|)
block|,
name|char
argument_list|(
literal|0xbb
argument_list|)
block|,
name|char
argument_list|(
literal|0xbf
argument_list|)
block|,
name|char
argument_list|(
literal|0xe1
argument_list|)
block|,
name|char
argument_list|(
literal|0xbb
argument_list|)
block|,
name|char
argument_list|(
literal|0x97
argument_list|)
block|,
name|char
argument_list|(
literal|0xe1
argument_list|)
block|,
name|char
argument_list|(
literal|0xbb
argument_list|)
block|,
name|char
argument_list|(
literal|0x99
argument_list|)
block|,
name|char
argument_list|(
literal|0xe1
argument_list|)
block|,
name|char
argument_list|(
literal|0xbb
argument_list|)
block|,
name|char
argument_list|(
literal|0x91
argument_list|)
block|,
name|char
argument_list|(
literal|0xe1
argument_list|)
block|,
name|char
argument_list|(
literal|0xbb
argument_list|)
block|,
name|char
argument_list|(
literal|0x93
argument_list|)
block|,         }
decl_stmt|;
name|sample
operator|+=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|vietnameseUtf8
argument_list|,
sizeof|sizeof
argument_list|(
name|vietnameseUtf8
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Ogham
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x1681
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x1682
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x1683
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x1684
argument_list|)
expr_stmt|;
break|break;
case|case
name|Runic
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x16a0
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x16a1
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x16a2
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x16a3
argument_list|)
expr_stmt|;
break|break;
case|case
name|Nko
case|:
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x7ca
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x7cb
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x7cc
argument_list|)
expr_stmt|;
name|sample
operator|+=
name|QChar
argument_list|(
literal|0x7cd
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|sample
return|;
block|}
end_function
begin_function
DECL|function|parseFontName
name|void
name|QFontDatabase
operator|::
name|parseFontName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|QString
modifier|&
name|foundry
parameter_list|,
name|QString
modifier|&
name|family
parameter_list|)
block|{
name|QT_PREPEND_NAMESPACE
function_decl|(
name|parseFontName
function_decl|)
parameter_list|(
name|name
parameter_list|,
name|foundry
parameter_list|,
name|family
parameter_list|)
function_decl|;
block|}
end_function
begin_function
DECL|function|createDatabase
name|void
name|QFontDatabase
operator|::
name|createDatabase
parameter_list|()
block|{
name|initializeDb
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// used from qfontengine_ft.cpp
end_comment
begin_function
DECL|function|qt_fontdata_from_index
name|Q_GUI_EXPORT
name|QByteArray
name|qt_fontdata_from_index
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|privateDb
argument_list|()
operator|->
name|applicationFonts
operator|.
name|value
argument_list|(
name|index
argument_list|)
operator|.
name|data
return|;
block|}
end_function
begin_function
DECL|function|addAppFont
name|int
name|QFontDatabasePrivate
operator|::
name|addAppFont
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
name|font
decl_stmt|;
name|font
operator|.
name|data
operator|=
name|fontData
expr_stmt|;
name|font
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|applicationFonts
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|applicationFonts
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|families
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
if|if
condition|(
name|i
operator|>=
name|applicationFonts
operator|.
name|count
argument_list|()
condition|)
block|{
name|applicationFonts
operator|.
name|append
argument_list|(
name|ApplicationFont
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|=
name|applicationFonts
operator|.
name|count
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|font
operator|.
name|fileName
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|fontData
operator|.
name|isEmpty
argument_list|()
condition|)
name|font
operator|.
name|fileName
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|":qmemoryfonts/"
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|registerFont
argument_list|(
operator|&
name|font
argument_list|)
expr_stmt|;
if|if
condition|(
name|font
operator|.
name|families
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|applicationFonts
index|[
name|i
index|]
operator|=
name|font
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
return|return
name|i
return|;
block|}
end_function
begin_function
DECL|function|isApplicationFont
name|bool
name|QFontDatabasePrivate
operator|::
name|isApplicationFont
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|applicationFonts
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|applicationFonts
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|fileName
operator|==
name|fileName
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Loads the font from the file specified by \a fileName and makes it available to     the application. An ID is returned that can be used to remove the font again     with removeApplicationFont() or to retrieve the list of family names contained     in the font.      The function returns -1 if the font could not be loaded.      Currently only TrueType fonts, TrueType font collections, and OpenType fonts are     supported.      \note Adding application fonts on Unix/X11 platforms without fontconfig is     currently not supported.      \sa addApplicationFontFromData(), applicationFontFamilies(), removeApplicationFont() */
end_comment
begin_function
DECL|function|addApplicationFont
name|int
name|QFontDatabase
operator|::
name|addApplicationFont
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|QByteArray
name|data
decl_stmt|;
if|if
condition|(
operator|!
name|QFileInfo
argument_list|(
name|fileName
argument_list|)
operator|.
name|isNativePath
argument_list|()
condition|)
block|{
name|QFile
name|f
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
name|data
operator|=
name|f
operator|.
name|readAll
argument_list|()
expr_stmt|;
block|}
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|privateDb
argument_list|()
operator|->
name|addAppFont
argument_list|(
name|data
argument_list|,
name|fileName
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Loads the font from binary data specified by \a fontData and makes it available to     the application. An ID is returned that can be used to remove the font again     with removeApplicationFont() or to retrieve the list of family names contained     in the font.      The function returns -1 if the font could not be loaded.      Currently only TrueType fonts and TrueType font collections are supported.      \b{Note:} Adding application fonts on Unix/X11 platforms without fontconfig is     currently not supported.      \sa addApplicationFont(), applicationFontFamilies(), removeApplicationFont() */
end_comment
begin_function
DECL|function|addApplicationFontFromData
name|int
name|QFontDatabase
operator|::
name|addApplicationFontFromData
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|privateDb
argument_list|()
operator|->
name|addAppFont
argument_list|(
name|fontData
argument_list|,
name|QString
argument_list|()
comment|/* fileName */
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns a list of font families for the given application font identified by     \a id.      \sa addApplicationFont(), addApplicationFontFromData() */
end_comment
begin_function
DECL|function|applicationFontFamilies
name|QStringList
name|QFontDatabase
operator|::
name|applicationFontFamilies
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|privateDb
argument_list|()
operator|->
name|applicationFonts
operator|.
name|value
argument_list|(
name|id
argument_list|)
operator|.
name|families
return|;
block|}
end_function
begin_comment
comment|/*!     \since 5.2      Returns the most adequate font for a given \a type case for proper integration     with the system's look and feel.      \sa QGuiApplication::font() */
end_comment
begin_function
DECL|function|systemFont
name|QFont
name|QFontDatabase
operator|::
name|systemFont
parameter_list|(
name|QFontDatabase
operator|::
name|SystemFont
name|type
parameter_list|)
block|{
specifier|const
name|QFont
modifier|*
name|font
init|=
literal|0
decl_stmt|;
if|if
condition|(
specifier|const
name|QPlatformTheme
modifier|*
name|theme
init|=
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GeneralFont
case|:
name|font
operator|=
name|theme
operator|->
name|font
argument_list|(
name|QPlatformTheme
operator|::
name|SystemFont
argument_list|)
expr_stmt|;
break|break;
case|case
name|FixedFont
case|:
name|font
operator|=
name|theme
operator|->
name|font
argument_list|(
name|QPlatformTheme
operator|::
name|FixedFont
argument_list|)
expr_stmt|;
break|break;
case|case
name|TitleFont
case|:
name|font
operator|=
name|theme
operator|->
name|font
argument_list|(
name|QPlatformTheme
operator|::
name|TitleBarFont
argument_list|)
expr_stmt|;
break|break;
case|case
name|SmallestReadableFont
case|:
name|font
operator|=
name|theme
operator|->
name|font
argument_list|(
name|QPlatformTheme
operator|::
name|MiniFont
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|font
condition|)
return|return
operator|*
name|font
return|;
elseif|else
if|if
condition|(
name|QPlatformIntegration
modifier|*
name|integration
init|=
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
condition|)
return|return
name|integration
operator|->
name|fontDatabase
argument_list|()
operator|->
name|defaultFont
argument_list|()
return|;
else|else
return|return
name|QFont
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QFontDatabase::removeApplicationFont(int id)     \since 4.2      Removes the previously loaded application font identified by \a     id. Returns \c true if unloading of the font succeeded; otherwise     returns \c false.      \sa removeAllApplicationFonts(), addApplicationFont(),         addApplicationFontFromData() */
end_comment
begin_function
DECL|function|removeApplicationFont
name|bool
name|QFontDatabase
operator|::
name|removeApplicationFont
parameter_list|(
name|int
name|handle
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
if|if
condition|(
name|handle
operator|<
literal|0
operator|||
name|handle
operator|>=
name|db
operator|->
name|applicationFonts
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
name|db
operator|->
name|applicationFonts
index|[
name|handle
index|]
operator|=
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
argument_list|()
expr_stmt|;
name|db
operator|->
name|reregisterAppFonts
operator|=
literal|true
expr_stmt|;
name|db
operator|->
name|invalidate
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QFontDatabase::removeAllApplicationFonts()     \since 4.2      Removes all application-local fonts previously added using addApplicationFont()     and addApplicationFontFromData().      Returns \c true if unloading of the fonts succeeded; otherwise     returns \c false.      \sa removeApplicationFont(), addApplicationFont(), addApplicationFontFromData() */
end_comment
begin_function
DECL|function|removeAllApplicationFonts
name|bool
name|QFontDatabase
operator|::
name|removeAllApplicationFonts
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
if|if
condition|(
name|db
operator|->
name|applicationFonts
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|db
operator|->
name|applicationFonts
operator|.
name|clear
argument_list|()
expr_stmt|;
name|db
operator|->
name|invalidate
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QFontDatabase::supportsThreadedFontRendering()     \since 4.4     \deprecated      Returns \c true if font rendering is supported outside the GUI     thread, false otherwise. In other words, a return value of false     means that all QPainter::drawText() calls outside the GUI thread     will not produce readable output.      As of 5.0, always returns \c true.      \sa {Thread-Support in Qt Modules#Painting In Threads}{Painting In Threads} */
end_comment
begin_if
if|#
directive|if
name|QT_DEPRECATED_SINCE
argument_list|(
literal|5
operator|,
literal|2
argument_list|)
end_if
begin_function
DECL|function|supportsThreadedFontRendering
name|bool
name|QFontDatabase
operator|::
name|supportsThreadedFontRendering
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|findFont
name|QFontEngine
modifier|*
name|QFontDatabase
operator|::
name|findFont
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|,
name|int
name|script
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|privateDb
argument_list|()
operator|->
name|count
condition|)
name|initializeDb
argument_list|()
expr_stmt|;
name|QFontEngine
modifier|*
name|engine
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_BUILD_INTERNAL
argument_list|)
comment|// For testing purpose only, emulates an exact-matching monospace font
if|if
condition|(
name|qt_enable_test_font
operator|&&
name|request
operator|.
name|family
operator|==
name|QLatin1String
argument_list|(
literal|"__Qt__Box__Engine__"
argument_list|)
condition|)
block|{
name|engine
operator|=
operator|new
name|QTestFontEngine
argument_list|(
name|request
operator|.
name|pixelSize
argument_list|)
expr_stmt|;
name|engine
operator|->
name|fontDef
operator|=
name|request
expr_stmt|;
return|return
name|engine
return|;
block|}
endif|#
directive|endif
name|QFontCache
modifier|*
name|fontCache
init|=
name|QFontCache
operator|::
name|instance
argument_list|()
decl_stmt|;
comment|// Until we specifically asked not to, try looking for Multi font engine
comment|// first, the last '1' indicates that we want Multi font engine instead
comment|// of single ones
name|bool
name|multi
init|=
operator|!
operator|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoFontMerging
operator|)
decl_stmt|;
name|QFontCache
operator|::
name|Key
name|key
argument_list|(
name|request
argument_list|,
name|script
argument_list|,
name|multi
condition|?
literal|1
else|:
literal|0
argument_list|)
decl_stmt|;
name|engine
operator|=
name|fontCache
operator|->
name|findEngine
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
condition|)
block|{
name|FM_DEBUG
argument_list|(
literal|"Cache hit level 1"
argument_list|)
expr_stmt|;
return|return
name|engine
return|;
block|}
name|QString
name|family_name
decl_stmt|,
name|foundry_name
decl_stmt|;
name|parseFontName
argument_list|(
name|request
operator|.
name|family
argument_list|,
name|foundry_name
argument_list|,
name|family_name
argument_list|)
expr_stmt|;
name|QtFontDesc
name|desc
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|blackListed
decl_stmt|;
name|int
name|index
init|=
name|match
argument_list|(
name|script
argument_list|,
name|request
argument_list|,
name|family_name
argument_list|,
name|foundry_name
argument_list|,
operator|&
name|desc
argument_list|,
name|blackListed
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|engine
operator|=
name|loadEngine
argument_list|(
name|script
argument_list|,
name|request
argument_list|,
name|desc
operator|.
name|family
argument_list|,
name|desc
operator|.
name|foundry
argument_list|,
name|desc
operator|.
name|style
argument_list|,
name|desc
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
condition|)
name|initFontDef
argument_list|(
name|desc
argument_list|,
name|request
argument_list|,
operator|&
name|engine
operator|->
name|fontDef
argument_list|,
name|multi
argument_list|)
expr_stmt|;
else|else
name|blackListed
operator|.
name|append
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FM_DEBUG
argument_list|(
literal|"  NO MATCH FOUND\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|engine
condition|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|family
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QFont
operator|::
name|StyleHint
name|styleHint
init|=
name|QFont
operator|::
name|StyleHint
argument_list|(
name|request
operator|.
name|styleHint
argument_list|)
decl_stmt|;
if|if
condition|(
name|styleHint
operator|==
name|QFont
operator|::
name|AnyStyle
operator|&&
name|request
operator|.
name|fixedPitch
condition|)
name|styleHint
operator|=
name|QFont
operator|::
name|TypeWriter
expr_stmt|;
name|QStringList
name|fallbacks
init|=
name|request
operator|.
name|fallBackFamilies
operator|+
name|fallbacksForFamily
argument_list|(
name|request
operator|.
name|family
argument_list|,
name|QFont
operator|::
name|Style
argument_list|(
name|request
operator|.
name|style
argument_list|)
argument_list|,
name|styleHint
argument_list|,
name|QChar
operator|::
name|Script
argument_list|(
name|script
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|script
operator|>
name|QChar
operator|::
name|Script_Common
condition|)
name|fallbacks
operator|+=
name|QString
argument_list|()
expr_stmt|;
comment|// Find the first font matching the specified script.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|engine
operator|&&
name|i
operator|<
name|fallbacks
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QFontDef
name|def
init|=
name|request
decl_stmt|;
name|def
operator|.
name|family
operator|=
name|fallbacks
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QFontCache
operator|::
name|Key
name|key
argument_list|(
name|def
argument_list|,
name|script
argument_list|,
name|multi
condition|?
literal|1
else|:
literal|0
argument_list|)
decl_stmt|;
name|engine
operator|=
name|fontCache
operator|->
name|findEngine
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|engine
condition|)
block|{
name|QtFontDesc
name|desc
decl_stmt|;
do|do
block|{
name|index
operator|=
name|match
argument_list|(
name|script
argument_list|,
name|def
argument_list|,
name|def
operator|.
name|family
argument_list|,
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|&
name|desc
argument_list|,
name|blackListed
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|QFontDef
name|loadDef
init|=
name|def
decl_stmt|;
if|if
condition|(
name|loadDef
operator|.
name|family
operator|.
name|isEmpty
argument_list|()
condition|)
name|loadDef
operator|.
name|family
operator|=
name|desc
operator|.
name|family
operator|->
name|name
expr_stmt|;
name|engine
operator|=
name|loadEngine
argument_list|(
name|script
argument_list|,
name|loadDef
argument_list|,
name|desc
operator|.
name|family
argument_list|,
name|desc
operator|.
name|foundry
argument_list|,
name|desc
operator|.
name|style
argument_list|,
name|desc
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
condition|)
name|initFontDef
argument_list|(
name|desc
argument_list|,
name|loadDef
argument_list|,
operator|&
name|engine
operator|->
name|fontDef
argument_list|,
name|multi
argument_list|)
expr_stmt|;
else|else
name|blackListed
operator|.
name|append
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|index
operator|>=
literal|0
operator|&&
operator|!
name|engine
condition|)
do|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|engine
condition|)
name|engine
operator|=
operator|new
name|QFontEngineBox
argument_list|(
name|request
operator|.
name|pixelSize
argument_list|)
expr_stmt|;
name|FM_DEBUG
argument_list|(
literal|"returning box engine"
argument_list|)
expr_stmt|;
block|}
return|return
name|engine
return|;
block|}
end_function
begin_function
DECL|function|load
name|void
name|QFontDatabase
operator|::
name|load
parameter_list|(
specifier|const
name|QFontPrivate
modifier|*
name|d
parameter_list|,
name|int
name|script
parameter_list|)
block|{
name|QFontDef
name|req
init|=
name|d
operator|->
name|request
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|pixelSize
operator|==
operator|-
literal|1
condition|)
block|{
name|req
operator|.
name|pixelSize
operator|=
name|std
operator|::
name|floor
argument_list|(
operator|(
operator|(
name|req
operator|.
name|pointSize
operator|*
name|d
operator|->
name|dpi
operator|)
operator|/
literal|72
operator|)
operator|*
literal|100
operator|+
literal|0.5
argument_list|)
operator|/
literal|100
expr_stmt|;
name|req
operator|.
name|pixelSize
operator|=
name|qRound
argument_list|(
name|req
operator|.
name|pixelSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|req
operator|.
name|pointSize
operator|<
literal|0
condition|)
name|req
operator|.
name|pointSize
operator|=
name|req
operator|.
name|pixelSize
operator|*
literal|72.0
operator|/
name|d
operator|->
name|dpi
expr_stmt|;
if|if
condition|(
name|req
operator|.
name|stretch
operator|==
literal|0
condition|)
name|req
operator|.
name|stretch
operator|=
literal|100
expr_stmt|;
comment|// respect the fallback families that might be passed through the request
specifier|const
name|QStringList
name|fallBackFamilies
init|=
name|familyList
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|engineData
condition|)
block|{
name|QFontCache
modifier|*
name|fontCache
init|=
name|QFontCache
operator|::
name|instance
argument_list|()
decl_stmt|;
comment|// look for the requested font in the engine data cache
comment|// note: fallBackFamilies are not respected in the EngineData cache key;
comment|//       join them with the primary selection family to avoid cache misses
name|req
operator|.
name|family
operator|=
name|fallBackFamilies
operator|.
name|join
argument_list|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|engineData
operator|=
name|fontCache
operator|->
name|findEngineData
argument_list|(
name|req
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|engineData
condition|)
block|{
comment|// create a new one
name|d
operator|->
name|engineData
operator|=
operator|new
name|QFontEngineData
expr_stmt|;
name|fontCache
operator|->
name|insertEngineData
argument_list|(
name|req
argument_list|,
name|d
operator|->
name|engineData
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|engineData
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
comment|// the cached engineData could have already loaded the engine we want
if|if
condition|(
name|d
operator|->
name|engineData
operator|->
name|engines
index|[
name|script
index|]
condition|)
return|return;
name|QFontEngine
modifier|*
name|fe
init|=
name|Q_NULLPTR
decl_stmt|;
name|req
operator|.
name|fallBackFamilies
operator|=
name|fallBackFamilies
expr_stmt|;
if|if
condition|(
operator|!
name|req
operator|.
name|fallBackFamilies
operator|.
name|isEmpty
argument_list|()
condition|)
name|req
operator|.
name|family
operator|=
name|req
operator|.
name|fallBackFamilies
operator|.
name|takeFirst
argument_list|()
expr_stmt|;
comment|// list of families to try
name|QStringList
name|family_list
decl_stmt|;
if|if
condition|(
operator|!
name|req
operator|.
name|family
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Add primary selection
name|family_list
operator|<<
name|req
operator|.
name|family
expr_stmt|;
comment|// add the default family
name|QString
name|defaultFamily
init|=
name|QGuiApplication
operator|::
name|font
argument_list|()
operator|.
name|family
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|family_list
operator|.
name|contains
argument_list|(
name|defaultFamily
argument_list|)
condition|)
name|family_list
operator|<<
name|defaultFamily
expr_stmt|;
block|}
comment|// null family means find the first font matching the specified script
name|family_list
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|family_list
operator|.
name|constBegin
argument_list|()
decl_stmt|,
name|end
init|=
name|family_list
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
init|;
operator|!
name|fe
operator|&&
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
name|req
operator|.
name|family
operator|=
operator|*
name|it
expr_stmt|;
name|fe
operator|=
name|QFontDatabase
operator|::
name|findFont
argument_list|(
name|req
argument_list|,
name|script
argument_list|)
expr_stmt|;
if|if
condition|(
name|fe
condition|)
block|{
if|if
condition|(
name|fe
operator|->
name|type
argument_list|()
operator|==
name|QFontEngine
operator|::
name|Box
operator|&&
operator|!
name|req
operator|.
name|family
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|fe
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|==
literal|0
condition|)
operator|delete
name|fe
expr_stmt|;
name|fe
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|d
operator|->
name|dpi
operator|>
literal|0
condition|)
name|fe
operator|->
name|fontDef
operator|.
name|pointSize
operator|=
name|qreal
argument_list|(
name|double
argument_list|(
operator|(
name|fe
operator|->
name|fontDef
operator|.
name|pixelSize
operator|*
literal|72
operator|)
operator|/
name|d
operator|->
name|dpi
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// No need to check requested fallback families again
name|req
operator|.
name|fallBackFamilies
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fe
operator|->
name|symbol
operator|||
operator|(
name|d
operator|->
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoFontMerging
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QChar
operator|::
name|ScriptCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|engineData
operator|->
name|engines
index|[
name|i
index|]
condition|)
block|{
name|d
operator|->
name|engineData
operator|->
name|engines
index|[
name|i
index|]
operator|=
name|fe
expr_stmt|;
name|fe
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
block|}
block|}
else|else
block|{
name|d
operator|->
name|engineData
operator|->
name|engines
index|[
name|script
index|]
operator|=
name|fe
expr_stmt|;
name|fe
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
block|}
end_function
begin_function
DECL|function|resolveFontFamilyAlias
name|QString
name|QFontDatabase
operator|::
name|resolveFontFamilyAlias
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|)
block|{
return|return
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|fontDatabase
argument_list|()
operator|->
name|resolveFontFamilyAlias
argument_list|(
name|family
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
