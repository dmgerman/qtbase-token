begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DIRECTWRITE
end_ifndef
begin_include
include|#
directive|include
file|"qfontenginedirectwrite_p.h"
end_include
begin_include
include|#
directive|include
file|<qendian.h>
end_include
begin_include
include|#
directive|include
file|<dwrite.h>
end_include
begin_include
include|#
directive|include
file|<private/qnativeimage_p.h>
end_include
begin_include
include|#
directive|include
file|<d2d1.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|// Convert from design units to logical pixels
end_comment
begin_define
DECL|macro|DESIGN_TO_LOGICAL
define|#
directive|define
name|DESIGN_TO_LOGICAL
parameter_list|(
name|DESIGN_UNIT_VALUE
parameter_list|)
define|\
value|QFixed::fromReal((qreal(DESIGN_UNIT_VALUE) / qreal(m_unitsPerEm)) * fontDef.pixelSize)
end_define
begin_namespace
namespace|namespace
block|{
DECL|class|GeometrySink
class|class
name|GeometrySink
super|:
specifier|public
name|IDWriteGeometrySink
block|{
public|public:
DECL|function|GeometrySink
name|GeometrySink
parameter_list|(
name|QPainterPath
modifier|*
name|path
parameter_list|)
member_init_list|:
name|m_path
argument_list|(
name|path
argument_list|)
member_init_list|,
name|m_refCount
argument_list|(
literal|0
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|m_path
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
name|IFACEMETHOD_
argument_list|(
argument|void
argument_list|,
argument|AddBeziers
argument_list|)
operator|(
specifier|const
name|D2D1_BEZIER_SEGMENT
operator|*
name|beziers
operator|,
name|UINT
name|bezierCount
operator|)
expr_stmt|;
name|IFACEMETHOD_
argument_list|(
argument|void
argument_list|,
argument|AddLines
argument_list|)
operator|(
specifier|const
name|D2D1_POINT_2F
operator|*
name|points
operator|,
name|UINT
name|pointCount
operator|)
expr_stmt|;
name|IFACEMETHOD_
argument_list|(
argument|void
argument_list|,
argument|BeginFigure
argument_list|)
operator|(
name|D2D1_POINT_2F
name|startPoint
operator|,
name|D2D1_FIGURE_BEGIN
name|figureBegin
operator|)
expr_stmt|;
name|IFACEMETHOD
function_decl|(
name|Close
function_decl|)
parameter_list|()
function_decl|;
name|IFACEMETHOD_
argument_list|(
argument|void
argument_list|,
argument|EndFigure
argument_list|)
operator|(
name|D2D1_FIGURE_END
name|figureEnd
operator|)
expr_stmt|;
name|IFACEMETHOD_
argument_list|(
argument|void
argument_list|,
argument|SetFillMode
argument_list|)
operator|(
name|D2D1_FILL_MODE
name|fillMode
operator|)
expr_stmt|;
name|IFACEMETHOD_
argument_list|(
argument|void
argument_list|,
argument|SetSegmentFlags
argument_list|)
operator|(
name|D2D1_PATH_SEGMENT
name|vertexFlags
operator|)
expr_stmt|;
name|IFACEMETHOD_
argument_list|(
argument|unsigned long
argument_list|,
argument|AddRef
argument_list|)
operator|(
operator|)
expr_stmt|;
name|IFACEMETHOD_
argument_list|(
argument|unsigned long
argument_list|,
argument|Release
argument_list|)
operator|(
operator|)
expr_stmt|;
name|IFACEMETHOD
function_decl|(
name|QueryInterface
function_decl|)
parameter_list|(
name|IID
specifier|const
modifier|&
name|riid
parameter_list|,
name|void
modifier|*
modifier|*
name|ppvObject
parameter_list|)
function_decl|;
private|private:
DECL|function|fromD2D1_POINT_2F
specifier|inline
specifier|static
name|QPointF
name|fromD2D1_POINT_2F
parameter_list|(
specifier|const
name|D2D1_POINT_2F
modifier|&
name|inp
parameter_list|)
block|{
return|return
name|QPointF
argument_list|(
name|inp
operator|.
name|x
argument_list|,
name|inp
operator|.
name|y
argument_list|)
return|;
block|}
DECL|member|m_refCount
name|unsigned
name|long
name|m_refCount
decl_stmt|;
DECL|member|m_startPoint
name|QPointF
name|m_startPoint
decl_stmt|;
DECL|member|m_path
name|QPainterPath
modifier|*
name|m_path
decl_stmt|;
block|}
class|;
DECL|function|AddBeziers
name|void
name|GeometrySink
operator|::
name|AddBeziers
parameter_list|(
specifier|const
name|D2D1_BEZIER_SEGMENT
modifier|*
name|beziers
parameter_list|,
name|UINT
name|bezierCount
parameter_list|)
block|{
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bezierCount
condition|;
operator|++
name|i
control|)
block|{
name|QPointF
name|c1
init|=
name|fromD2D1_POINT_2F
argument_list|(
name|beziers
index|[
name|i
index|]
operator|.
name|point1
argument_list|)
decl_stmt|;
name|QPointF
name|c2
init|=
name|fromD2D1_POINT_2F
argument_list|(
name|beziers
index|[
name|i
index|]
operator|.
name|point2
argument_list|)
decl_stmt|;
name|QPointF
name|p2
init|=
name|fromD2D1_POINT_2F
argument_list|(
name|beziers
index|[
name|i
index|]
operator|.
name|point3
argument_list|)
decl_stmt|;
name|m_path
operator|->
name|cubicTo
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|,
name|p2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|AddLines
name|void
name|GeometrySink
operator|::
name|AddLines
parameter_list|(
specifier|const
name|D2D1_POINT_2F
modifier|*
name|points
parameter_list|,
name|UINT
name|pointsCount
parameter_list|)
block|{
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pointsCount
condition|;
operator|++
name|i
control|)
name|m_path
operator|->
name|lineTo
argument_list|(
name|fromD2D1_POINT_2F
argument_list|(
name|points
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|BeginFigure
name|void
name|GeometrySink
operator|::
name|BeginFigure
parameter_list|(
name|D2D1_POINT_2F
name|startPoint
parameter_list|,
name|D2D1_FIGURE_BEGIN
comment|/*figureBegin*/
parameter_list|)
block|{
name|m_startPoint
operator|=
name|fromD2D1_POINT_2F
argument_list|(
name|startPoint
argument_list|)
expr_stmt|;
name|m_path
operator|->
name|moveTo
argument_list|(
name|m_startPoint
argument_list|)
expr_stmt|;
block|}
DECL|function|Close
name|IFACEMETHODIMP
name|GeometrySink
operator|::
name|Close
parameter_list|()
block|{
return|return
name|E_NOTIMPL
return|;
block|}
DECL|function|EndFigure
name|void
name|GeometrySink
operator|::
name|EndFigure
parameter_list|(
name|D2D1_FIGURE_END
name|figureEnd
parameter_list|)
block|{
if|if
condition|(
name|figureEnd
operator|==
name|D2D1_FIGURE_END_CLOSED
condition|)
name|m_path
operator|->
name|closeSubpath
argument_list|()
expr_stmt|;
block|}
DECL|function|SetFillMode
name|void
name|GeometrySink
operator|::
name|SetFillMode
parameter_list|(
name|D2D1_FILL_MODE
name|fillMode
parameter_list|)
block|{
name|m_path
operator|->
name|setFillRule
argument_list|(
name|fillMode
operator|==
name|D2D1_FILL_MODE_ALTERNATE
condition|?
name|Qt
operator|::
name|OddEvenFill
else|:
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
block|}
DECL|function|SetSegmentFlags
name|void
name|GeometrySink
operator|::
name|SetSegmentFlags
parameter_list|(
name|D2D1_PATH_SEGMENT
comment|/*vertexFlags*/
parameter_list|)
block|{
comment|/* Not implemented */
block|}
DECL|function|AddRef
name|IFACEMETHODIMP_
argument_list|(
argument|unsigned long
argument_list|)
name|GeometrySink
operator|::
name|AddRef
operator|(
operator|)
block|{
return|return
name|InterlockedIncrement
argument_list|(
operator|&
name|m_refCount
argument_list|)
return|;
block|}
DECL|function|Release
name|IFACEMETHODIMP_
argument_list|(
argument|unsigned long
argument_list|)
name|GeometrySink
operator|::
name|Release
operator|(
operator|)
block|{
name|unsigned
name|long
name|newCount
operator|=
name|InterlockedDecrement
argument_list|(
operator|&
name|m_refCount
argument_list|)
block|;
if|if
condition|(
name|newCount
operator|==
literal|0
condition|)
block|{
operator|delete
name|this
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|newCount
return|;
block|}
end_namespace
begin_function
DECL|function|QueryInterface
name|IFACEMETHODIMP
name|GeometrySink
operator|::
name|QueryInterface
parameter_list|(
name|IID
specifier|const
modifier|&
name|riid
parameter_list|,
name|void
modifier|*
modifier|*
name|ppvObject
parameter_list|)
block|{
if|if
condition|(
name|__uuidof
argument_list|(
name|IDWriteGeometrySink
argument_list|)
operator|==
name|riid
condition|)
block|{
operator|*
name|ppvObject
operator|=
name|this
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|__uuidof
argument_list|(
name|IUnknown
argument_list|)
operator|==
name|riid
condition|)
block|{
operator|*
name|ppvObject
operator|=
name|this
expr_stmt|;
block|}
else|else
block|{
operator|*
name|ppvObject
operator|=
name|NULL
expr_stmt|;
return|return
name|E_FAIL
return|;
block|}
name|AddRef
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_expr_stmt
unit|}  QFontEngineDirectWrite
DECL|function|QFontEngineDirectWrite
operator|::
name|QFontEngineDirectWrite
operator|(
name|IDWriteFactory
operator|*
name|directWriteFactory
operator|,
name|IDWriteFontFace
operator|*
name|directWriteFontFace
operator|,
name|qreal
name|pixelSize
operator|)
operator|:
name|m_directWriteFontFace
argument_list|(
name|directWriteFontFace
argument_list|)
operator|,
name|m_directWriteFactory
argument_list|(
name|directWriteFactory
argument_list|)
operator|,
name|m_directWriteBitmapRenderTarget
argument_list|(
literal|0
argument_list|)
operator|,
name|m_lineThickness
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|m_unitsPerEm
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|m_ascent
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|m_descent
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|m_xHeight
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|m_lineGap
argument_list|(
argument|-
literal|1
argument_list|)
block|{
name|m_directWriteFactory
operator|->
name|AddRef
argument_list|()
block|;
name|m_directWriteFontFace
operator|->
name|AddRef
argument_list|()
block|;
name|fontDef
operator|.
name|pixelSize
operator|=
name|pixelSize
block|;
name|collectMetrics
argument_list|()
block|; }
DECL|function|~QFontEngineDirectWrite
name|QFontEngineDirectWrite
operator|::
name|~
name|QFontEngineDirectWrite
operator|(
operator|)
block|{
name|m_directWriteFactory
operator|->
name|Release
argument_list|()
block|;
name|m_directWriteFontFace
operator|->
name|Release
argument_list|()
block|;
if|if
condition|(
name|m_directWriteBitmapRenderTarget
operator|!=
literal|0
condition|)
name|m_directWriteBitmapRenderTarget
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_function
DECL|function|collectMetrics
name|void
name|QFontEngineDirectWrite
operator|::
name|collectMetrics
parameter_list|()
block|{
if|if
condition|(
name|m_directWriteFontFace
operator|!=
literal|0
condition|)
block|{
name|DWRITE_FONT_METRICS
name|metrics
decl_stmt|;
name|m_directWriteFontFace
operator|->
name|GetMetrics
argument_list|(
operator|&
name|metrics
argument_list|)
expr_stmt|;
name|m_unitsPerEm
operator|=
name|metrics
operator|.
name|designUnitsPerEm
expr_stmt|;
name|m_lineThickness
operator|=
name|DESIGN_TO_LOGICAL
argument_list|(
name|metrics
operator|.
name|underlineThickness
argument_list|)
expr_stmt|;
name|m_ascent
operator|=
name|DESIGN_TO_LOGICAL
argument_list|(
name|metrics
operator|.
name|ascent
argument_list|)
expr_stmt|;
name|m_descent
operator|=
name|DESIGN_TO_LOGICAL
argument_list|(
name|metrics
operator|.
name|descent
argument_list|)
expr_stmt|;
name|m_xHeight
operator|=
name|DESIGN_TO_LOGICAL
argument_list|(
name|metrics
operator|.
name|xHeight
argument_list|)
expr_stmt|;
name|m_lineGap
operator|=
name|DESIGN_TO_LOGICAL
argument_list|(
name|metrics
operator|.
name|lineGap
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|lineThickness
name|QFixed
name|QFontEngineDirectWrite
operator|::
name|lineThickness
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_lineThickness
operator|>
literal|0
condition|)
return|return
name|m_lineThickness
return|;
else|else
return|return
name|QFontEngine
operator|::
name|lineThickness
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getSfntTableData
name|bool
name|QFontEngineDirectWrite
operator|::
name|getSfntTableData
parameter_list|(
name|uint
name|tag
parameter_list|,
name|uchar
modifier|*
name|buffer
parameter_list|,
name|uint
modifier|*
name|length
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|m_directWriteFontFace
condition|)
block|{
name|DWORD
name|t
init|=
name|qbswap
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tag
argument_list|)
decl_stmt|;
specifier|const
name|void
modifier|*
name|tableData
init|=
literal|0
decl_stmt|;
name|void
modifier|*
name|tableContext
init|=
literal|0
decl_stmt|;
name|UINT32
name|tableSize
decl_stmt|;
name|BOOL
name|exists
decl_stmt|;
name|HRESULT
name|hr
init|=
name|m_directWriteFontFace
operator|->
name|TryGetFontTable
argument_list|(
name|t
argument_list|,
operator|&
name|tableData
argument_list|,
operator|&
name|tableSize
argument_list|,
operator|&
name|tableContext
argument_list|,
operator|&
name|exists
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|exists
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|buffer
operator|==
literal|0
condition|)
block|{
operator|*
name|length
operator|=
name|tableSize
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
operator|*
name|length
operator|<
name|tableSize
condition|)
block|{
return|return
literal|false
return|;
block|}
name|memcpy
argument_list|(
name|buffer
argument_list|,
name|tableData
argument_list|,
name|tableSize
argument_list|)
expr_stmt|;
name|m_directWriteFontFace
operator|->
name|ReleaseFontTable
argument_list|(
name|tableContext
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|qErrnoWarning
argument_list|(
literal|"QFontEngineDirectWrite::getSfntTableData: TryGetFontTable failed"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|emSquareSize
name|QFixed
name|QFontEngineDirectWrite
operator|::
name|emSquareSize
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_unitsPerEm
operator|>
literal|0
condition|)
return|return
name|m_unitsPerEm
return|;
else|else
return|return
name|QFontEngine
operator|::
name|emSquareSize
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getChar
specifier|inline
name|unsigned
name|int
name|getChar
parameter_list|(
specifier|const
name|QChar
modifier|*
name|str
parameter_list|,
name|int
modifier|&
name|i
parameter_list|,
specifier|const
name|int
name|len
parameter_list|)
block|{
name|uint
name|ucs4
init|=
name|str
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
index|[
name|i
index|]
operator|.
name|isHighSurrogate
argument_list|()
operator|&&
name|i
operator|<
name|len
operator|-
literal|1
operator|&&
name|str
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|isLowSurrogate
argument_list|()
condition|)
block|{
operator|++
name|i
expr_stmt|;
name|ucs4
operator|=
name|QChar
operator|::
name|surrogateToUcs4
argument_list|(
name|ucs4
argument_list|,
name|str
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ucs4
return|;
block|}
end_function
begin_function
DECL|function|stringToCMap
name|bool
name|QFontEngineDirectWrite
operator|::
name|stringToCMap
parameter_list|(
specifier|const
name|QChar
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|,
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|int
modifier|*
name|nglyphs
parameter_list|,
name|QTextEngine
operator|::
name|ShaperFlags
name|flags
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|m_directWriteFontFace
operator|!=
literal|0
condition|)
block|{
name|QVarLengthArray
argument_list|<
name|UINT32
argument_list|>
name|codePoints
argument_list|(
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|codePoints
index|[
name|i
index|]
operator|=
name|getChar
argument_list|(
name|str
argument_list|,
name|i
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|QTextEngine
operator|::
name|RightToLeft
condition|)
name|codePoints
index|[
name|i
index|]
operator|=
name|QChar
operator|::
name|mirroredChar
argument_list|(
name|codePoints
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|QVarLengthArray
argument_list|<
name|UINT16
argument_list|>
name|glyphIndices
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|HRESULT
name|hr
init|=
name|m_directWriteFontFace
operator|->
name|GetGlyphIndicesW
argument_list|(
name|codePoints
operator|.
name|data
argument_list|()
argument_list|,
name|len
argument_list|,
name|glyphIndices
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
operator|=
name|glyphIndices
index|[
name|i
index|]
expr_stmt|;
operator|*
name|nglyphs
operator|=
name|len
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|QTextEngine
operator|::
name|GlyphIndicesOnly
operator|)
condition|)
name|recalcAdvances
argument_list|(
name|glyphs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|qErrnoWarning
argument_list|(
literal|"QFontEngineDirectWrite::stringToCMap: GetGlyphIndicesW failed"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|recalcAdvances
name|void
name|QFontEngineDirectWrite
operator|::
name|recalcAdvances
parameter_list|(
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|QTextEngine
operator|::
name|ShaperFlags
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|m_directWriteFontFace
operator|==
literal|0
condition|)
return|return;
name|QVarLengthArray
argument_list|<
name|UINT16
argument_list|>
name|glyphIndices
argument_list|(
name|glyphs
operator|->
name|numGlyphs
argument_list|)
decl_stmt|;
comment|// ### Caching?
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|->
name|numGlyphs
condition|;
name|i
operator|++
control|)
name|glyphIndices
index|[
name|i
index|]
operator|=
name|UINT16
argument_list|(
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QVarLengthArray
argument_list|<
name|DWRITE_GLYPH_METRICS
argument_list|>
name|glyphMetrics
argument_list|(
name|glyphIndices
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|HRESULT
name|hr
init|=
name|m_directWriteFontFace
operator|->
name|GetDesignGlyphMetrics
argument_list|(
name|glyphIndices
operator|.
name|data
argument_list|()
argument_list|,
name|glyphIndices
operator|.
name|size
argument_list|()
argument_list|,
name|glyphMetrics
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|->
name|numGlyphs
condition|;
operator|++
name|i
control|)
block|{
name|glyphs
operator|->
name|advances_x
index|[
name|i
index|]
operator|=
name|DESIGN_TO_LOGICAL
argument_list|(
name|glyphMetrics
index|[
name|i
index|]
operator|.
name|advanceWidth
argument_list|)
expr_stmt|;
if|if
condition|(
name|fontDef
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|ForceIntegerMetrics
condition|)
name|glyphs
operator|->
name|advances_x
index|[
name|i
index|]
operator|=
name|glyphs
operator|->
name|advances_x
index|[
name|i
index|]
operator|.
name|round
argument_list|()
expr_stmt|;
name|glyphs
operator|->
name|advances_y
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
name|qErrnoWarning
argument_list|(
literal|"QFontEngineDirectWrite::recalcAdvances: GetDesignGlyphMetrics failed"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|addGlyphsToPath
name|void
name|QFontEngineDirectWrite
operator|::
name|addGlyphsToPath
parameter_list|(
name|glyph_t
modifier|*
name|glyphs
parameter_list|,
name|QFixedPoint
modifier|*
name|positions
parameter_list|,
name|int
name|nglyphs
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|QTextItem
operator|::
name|RenderFlags
name|flags
parameter_list|)
block|{
if|if
condition|(
name|m_directWriteFontFace
operator|==
literal|0
condition|)
return|return;
name|QVarLengthArray
argument_list|<
name|UINT16
argument_list|>
name|glyphIndices
argument_list|(
name|nglyphs
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|DWRITE_GLYPH_OFFSET
argument_list|>
name|glyphOffsets
argument_list|(
name|nglyphs
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|FLOAT
argument_list|>
name|glyphAdvances
argument_list|(
name|nglyphs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nglyphs
condition|;
operator|++
name|i
control|)
block|{
name|glyphIndices
index|[
name|i
index|]
operator|=
name|glyphs
index|[
name|i
index|]
expr_stmt|;
name|glyphOffsets
index|[
name|i
index|]
operator|.
name|advanceOffset
operator|=
name|positions
index|[
name|i
index|]
operator|.
name|x
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|glyphOffsets
index|[
name|i
index|]
operator|.
name|ascenderOffset
operator|=
operator|-
name|positions
index|[
name|i
index|]
operator|.
name|y
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|glyphAdvances
index|[
name|i
index|]
operator|=
literal|0.0
expr_stmt|;
block|}
name|GeometrySink
name|geometrySink
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|HRESULT
name|hr
init|=
name|m_directWriteFontFace
operator|->
name|GetGlyphRunOutline
argument_list|(
name|fontDef
operator|.
name|pixelSize
argument_list|,
name|glyphIndices
operator|.
name|data
argument_list|()
argument_list|,
name|glyphAdvances
operator|.
name|data
argument_list|()
argument_list|,
name|glyphOffsets
operator|.
name|data
argument_list|()
argument_list|,
name|nglyphs
argument_list|,
literal|false
argument_list|,
name|flags
operator|&
name|QTextItem
operator|::
name|RightToLeft
argument_list|,
operator|&
name|geometrySink
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
name|qErrnoWarning
argument_list|(
literal|"QFontEngineDirectWrite::addGlyphsToPath: GetGlyphRunOutline failed"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngineDirectWrite
operator|::
name|boundingBox
parameter_list|(
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|)
block|{
if|if
condition|(
name|glyphs
operator|.
name|numGlyphs
operator|==
literal|0
condition|)
return|return
name|glyph_metrics_t
argument_list|()
return|;
name|bool
name|round
init|=
name|fontDef
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|ForceIntegerMetrics
decl_stmt|;
name|QFixed
name|w
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|numGlyphs
condition|;
operator|++
name|i
control|)
block|{
name|w
operator|+=
name|round
condition|?
name|glyphs
operator|.
name|effectiveAdvance
argument_list|(
name|i
argument_list|)
operator|.
name|round
argument_list|()
else|:
name|glyphs
operator|.
name|effectiveAdvance
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|glyph_metrics_t
argument_list|(
literal|0
argument_list|,
operator|-
name|m_ascent
argument_list|,
name|w
operator|-
name|lastRightBearing
argument_list|(
name|glyphs
argument_list|)
argument_list|,
name|m_ascent
operator|+
name|m_descent
argument_list|,
name|w
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|alphaMapBoundingBox
name|glyph_metrics_t
name|QFontEngineDirectWrite
operator|::
name|alphaMapBoundingBox
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|QFixed
name|subPixelPosition
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|GlyphFormat
comment|/*format*/
parameter_list|)
block|{
name|glyph_metrics_t
name|bbox
init|=
name|QFontEngine
operator|::
name|boundingBox
argument_list|(
name|glyph
argument_list|,
name|matrix
argument_list|)
decl_stmt|;
comment|// To get transformed advance
name|UINT16
name|glyphIndex
init|=
name|glyph
decl_stmt|;
name|FLOAT
name|glyphAdvance
init|=
literal|0
decl_stmt|;
name|DWRITE_GLYPH_OFFSET
name|glyphOffset
decl_stmt|;
name|glyphOffset
operator|.
name|advanceOffset
operator|=
literal|0
expr_stmt|;
name|glyphOffset
operator|.
name|ascenderOffset
operator|=
literal|0
expr_stmt|;
name|DWRITE_GLYPH_RUN
name|glyphRun
decl_stmt|;
name|glyphRun
operator|.
name|fontFace
operator|=
name|m_directWriteFontFace
expr_stmt|;
name|glyphRun
operator|.
name|fontEmSize
operator|=
name|fontDef
operator|.
name|pixelSize
expr_stmt|;
name|glyphRun
operator|.
name|glyphCount
operator|=
literal|1
expr_stmt|;
name|glyphRun
operator|.
name|glyphIndices
operator|=
operator|&
name|glyphIndex
expr_stmt|;
name|glyphRun
operator|.
name|glyphAdvances
operator|=
operator|&
name|glyphAdvance
expr_stmt|;
name|glyphRun
operator|.
name|isSideways
operator|=
literal|false
expr_stmt|;
name|glyphRun
operator|.
name|bidiLevel
operator|=
literal|0
expr_stmt|;
name|glyphRun
operator|.
name|glyphOffsets
operator|=
operator|&
name|glyphOffset
expr_stmt|;
name|DWRITE_MATRIX
name|transform
decl_stmt|;
name|transform
operator|.
name|dx
operator|=
name|subPixelPosition
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|transform
operator|.
name|dy
operator|=
literal|0
expr_stmt|;
name|transform
operator|.
name|m11
operator|=
name|matrix
operator|.
name|m11
argument_list|()
expr_stmt|;
name|transform
operator|.
name|m12
operator|=
name|matrix
operator|.
name|m12
argument_list|()
expr_stmt|;
name|transform
operator|.
name|m21
operator|=
name|matrix
operator|.
name|m21
argument_list|()
expr_stmt|;
name|transform
operator|.
name|m22
operator|=
name|matrix
operator|.
name|m22
argument_list|()
expr_stmt|;
name|IDWriteGlyphRunAnalysis
modifier|*
name|glyphAnalysis
init|=
name|NULL
decl_stmt|;
name|HRESULT
name|hr
init|=
name|m_directWriteFactory
operator|->
name|CreateGlyphRunAnalysis
argument_list|(
operator|&
name|glyphRun
argument_list|,
literal|1.0f
argument_list|,
operator|&
name|transform
argument_list|,
name|DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC
argument_list|,
name|DWRITE_MEASURING_MODE_NATURAL
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
operator|&
name|glyphAnalysis
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|RECT
name|rect
decl_stmt|;
name|glyphAnalysis
operator|->
name|GetAlphaTextureBounds
argument_list|(
name|DWRITE_TEXTURE_CLEARTYPE_3x1
argument_list|,
operator|&
name|rect
argument_list|)
expr_stmt|;
name|glyphAnalysis
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return
name|glyph_metrics_t
argument_list|(
name|rect
operator|.
name|left
argument_list|,
name|rect
operator|.
name|top
argument_list|,
name|rect
operator|.
name|right
operator|-
name|rect
operator|.
name|left
argument_list|,
name|rect
operator|.
name|bottom
operator|-
name|rect
operator|.
name|top
argument_list|,
name|bbox
operator|.
name|xoff
argument_list|,
name|bbox
operator|.
name|yoff
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|glyph_metrics_t
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngineDirectWrite
operator|::
name|boundingBox
parameter_list|(
name|glyph_t
name|g
parameter_list|)
block|{
if|if
condition|(
name|m_directWriteFontFace
operator|==
literal|0
condition|)
return|return
name|glyph_metrics_t
argument_list|()
return|;
name|UINT16
name|glyphIndex
init|=
name|g
decl_stmt|;
name|DWRITE_GLYPH_METRICS
name|glyphMetrics
decl_stmt|;
name|HRESULT
name|hr
init|=
name|m_directWriteFontFace
operator|->
name|GetDesignGlyphMetrics
argument_list|(
operator|&
name|glyphIndex
argument_list|,
literal|1
argument_list|,
operator|&
name|glyphMetrics
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|QFixed
name|advanceWidth
init|=
name|DESIGN_TO_LOGICAL
argument_list|(
name|glyphMetrics
operator|.
name|advanceWidth
argument_list|)
decl_stmt|;
name|QFixed
name|leftSideBearing
init|=
name|DESIGN_TO_LOGICAL
argument_list|(
name|glyphMetrics
operator|.
name|leftSideBearing
argument_list|)
decl_stmt|;
name|QFixed
name|rightSideBearing
init|=
name|DESIGN_TO_LOGICAL
argument_list|(
name|glyphMetrics
operator|.
name|rightSideBearing
argument_list|)
decl_stmt|;
name|QFixed
name|advanceHeight
init|=
name|DESIGN_TO_LOGICAL
argument_list|(
name|glyphMetrics
operator|.
name|advanceHeight
argument_list|)
decl_stmt|;
name|QFixed
name|verticalOriginY
init|=
name|DESIGN_TO_LOGICAL
argument_list|(
name|glyphMetrics
operator|.
name|verticalOriginY
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontDef
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|ForceIntegerMetrics
condition|)
block|{
name|advanceWidth
operator|=
name|advanceWidth
operator|.
name|round
argument_list|()
expr_stmt|;
name|advanceHeight
operator|=
name|advanceHeight
operator|.
name|round
argument_list|()
expr_stmt|;
block|}
name|QFixed
name|width
init|=
name|advanceWidth
operator|-
name|leftSideBearing
operator|-
name|rightSideBearing
decl_stmt|;
return|return
name|glyph_metrics_t
argument_list|(
operator|-
name|leftSideBearing
argument_list|,
operator|-
name|verticalOriginY
argument_list|,
name|width
argument_list|,
name|m_ascent
operator|+
name|m_descent
argument_list|,
name|advanceWidth
argument_list|,
name|advanceHeight
argument_list|)
return|;
block|}
else|else
block|{
name|qErrnoWarning
argument_list|(
literal|"QFontEngineDirectWrite::boundingBox: GetDesignGlyphMetrics failed"
argument_list|)
expr_stmt|;
block|}
return|return
name|glyph_metrics_t
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|ascent
name|QFixed
name|QFontEngineDirectWrite
operator|::
name|ascent
parameter_list|()
specifier|const
block|{
return|return
name|fontDef
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|ForceIntegerMetrics
condition|?
name|m_ascent
operator|.
name|round
argument_list|()
else|:
name|m_ascent
return|;
block|}
end_function
begin_function
DECL|function|descent
name|QFixed
name|QFontEngineDirectWrite
operator|::
name|descent
parameter_list|()
specifier|const
block|{
return|return
name|fontDef
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|ForceIntegerMetrics
condition|?
operator|(
name|m_descent
operator|)
operator|.
name|round
argument_list|()
else|:
operator|(
name|m_descent
operator|)
return|;
block|}
end_function
begin_function
DECL|function|leading
name|QFixed
name|QFontEngineDirectWrite
operator|::
name|leading
parameter_list|()
specifier|const
block|{
return|return
name|fontDef
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|ForceIntegerMetrics
condition|?
name|m_lineGap
operator|.
name|round
argument_list|()
else|:
name|m_lineGap
return|;
block|}
end_function
begin_function
DECL|function|xHeight
name|QFixed
name|QFontEngineDirectWrite
operator|::
name|xHeight
parameter_list|()
specifier|const
block|{
return|return
name|fontDef
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|ForceIntegerMetrics
condition|?
name|m_xHeight
operator|.
name|round
argument_list|()
else|:
name|m_xHeight
return|;
block|}
end_function
begin_function
DECL|function|maxCharWidth
name|qreal
name|QFontEngineDirectWrite
operator|::
name|maxCharWidth
parameter_list|()
specifier|const
block|{
comment|// ###
return|return
literal|0
return|;
block|}
end_function
begin_function_decl
specifier|extern
specifier|const
name|uint
modifier|*
name|qt_pow_gamma
parameter_list|()
function_decl|;
end_function_decl
begin_function
DECL|function|alphaMapForGlyph
name|QImage
name|QFontEngineDirectWrite
operator|::
name|alphaMapForGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|QFixed
name|subPixelPosition
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|xform
parameter_list|)
block|{
name|QImage
name|im
init|=
name|imageForGlyph
argument_list|(
name|glyph
argument_list|,
name|subPixelPosition
argument_list|,
literal|0
argument_list|,
name|xform
argument_list|)
decl_stmt|;
name|QImage
name|indexed
argument_list|(
name|im
operator|.
name|width
argument_list|()
argument_list|,
name|im
operator|.
name|height
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|colors
argument_list|(
literal|256
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|colors
index|[
name|i
index|]
operator|=
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|indexed
operator|.
name|setColorTable
argument_list|(
name|colors
argument_list|)
expr_stmt|;
name|uint
modifier|*
name|gamma
init|=
name|qt_pow_gamma
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|im
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
name|uint
modifier|*
name|src
init|=
operator|(
name|uint
operator|*
operator|)
name|im
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|uchar
modifier|*
name|dst
init|=
name|indexed
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|im
operator|.
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
name|uint
name|gray
init|=
name|qGray
argument_list|(
literal|0xffffffff
operator|-
operator|*
name|src
argument_list|)
decl_stmt|;
operator|*
name|dst
operator|=
literal|255
operator|-
operator|(
name|gamma
condition|?
name|gamma
index|[
name|gray
index|]
operator|*
literal|255.
operator|/
literal|2047.
else|:
name|gray
operator|)
expr_stmt|;
operator|++
name|dst
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
block|}
return|return
name|indexed
return|;
block|}
end_function
begin_function
DECL|function|supportsSubPixelPositions
name|bool
name|QFontEngineDirectWrite
operator|::
name|supportsSubPixelPositions
parameter_list|()
specifier|const
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|imageForGlyph
name|QImage
name|QFontEngineDirectWrite
operator|::
name|imageForGlyph
parameter_list|(
name|glyph_t
name|t
parameter_list|,
name|QFixed
name|subPixelPosition
parameter_list|,
name|int
name|margin
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|xform
parameter_list|)
block|{
name|UINT16
name|glyphIndex
init|=
name|t
decl_stmt|;
name|FLOAT
name|glyphAdvance
init|=
literal|0
decl_stmt|;
name|DWRITE_GLYPH_OFFSET
name|glyphOffset
decl_stmt|;
name|glyphOffset
operator|.
name|advanceOffset
operator|=
literal|0
expr_stmt|;
name|glyphOffset
operator|.
name|ascenderOffset
operator|=
literal|0
expr_stmt|;
name|DWRITE_GLYPH_RUN
name|glyphRun
decl_stmt|;
name|glyphRun
operator|.
name|fontFace
operator|=
name|m_directWriteFontFace
expr_stmt|;
name|glyphRun
operator|.
name|fontEmSize
operator|=
name|fontDef
operator|.
name|pixelSize
expr_stmt|;
name|glyphRun
operator|.
name|glyphCount
operator|=
literal|1
expr_stmt|;
name|glyphRun
operator|.
name|glyphIndices
operator|=
operator|&
name|glyphIndex
expr_stmt|;
name|glyphRun
operator|.
name|glyphAdvances
operator|=
operator|&
name|glyphAdvance
expr_stmt|;
name|glyphRun
operator|.
name|isSideways
operator|=
literal|false
expr_stmt|;
name|glyphRun
operator|.
name|bidiLevel
operator|=
literal|0
expr_stmt|;
name|glyphRun
operator|.
name|glyphOffsets
operator|=
operator|&
name|glyphOffset
expr_stmt|;
name|DWRITE_MATRIX
name|transform
decl_stmt|;
name|transform
operator|.
name|dx
operator|=
name|subPixelPosition
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|transform
operator|.
name|dy
operator|=
literal|0
expr_stmt|;
name|transform
operator|.
name|m11
operator|=
name|xform
operator|.
name|m11
argument_list|()
expr_stmt|;
name|transform
operator|.
name|m12
operator|=
name|xform
operator|.
name|m12
argument_list|()
expr_stmt|;
name|transform
operator|.
name|m21
operator|=
name|xform
operator|.
name|m21
argument_list|()
expr_stmt|;
name|transform
operator|.
name|m22
operator|=
name|xform
operator|.
name|m22
argument_list|()
expr_stmt|;
name|IDWriteGlyphRunAnalysis
modifier|*
name|glyphAnalysis
init|=
name|NULL
decl_stmt|;
name|HRESULT
name|hr
init|=
name|m_directWriteFactory
operator|->
name|CreateGlyphRunAnalysis
argument_list|(
operator|&
name|glyphRun
argument_list|,
literal|1.0f
argument_list|,
operator|&
name|transform
argument_list|,
name|DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC
argument_list|,
name|DWRITE_MEASURING_MODE_NATURAL
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
operator|&
name|glyphAnalysis
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|RECT
name|rect
decl_stmt|;
name|glyphAnalysis
operator|->
name|GetAlphaTextureBounds
argument_list|(
name|DWRITE_TEXTURE_CLEARTYPE_3x1
argument_list|,
operator|&
name|rect
argument_list|)
expr_stmt|;
name|rect
operator|.
name|left
operator|-=
name|margin
expr_stmt|;
name|rect
operator|.
name|top
operator|-=
name|margin
expr_stmt|;
name|rect
operator|.
name|right
operator|+=
name|margin
expr_stmt|;
name|rect
operator|.
name|bottom
operator|+=
name|margin
expr_stmt|;
name|int
name|width
init|=
name|rect
operator|.
name|right
operator|-
name|rect
operator|.
name|left
decl_stmt|;
name|int
name|height
init|=
name|rect
operator|.
name|bottom
operator|-
name|rect
operator|.
name|top
decl_stmt|;
name|int
name|size
init|=
name|width
operator|*
name|height
operator|*
literal|3
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|BYTE
modifier|*
name|alphaValues
init|=
operator|new
name|BYTE
index|[
name|size
index|]
decl_stmt|;
name|memset
argument_list|(
name|alphaValues
argument_list|,
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hr
operator|=
name|glyphAnalysis
operator|->
name|CreateAlphaTexture
argument_list|(
name|DWRITE_TEXTURE_CLEARTYPE_3x1
argument_list|,
operator|&
name|rect
argument_list|,
name|alphaValues
argument_list|,
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|QImage
name|img
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|img
operator|.
name|fill
argument_list|(
literal|0xffffffff
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
operator|++
name|y
control|)
block|{
name|uint
modifier|*
name|dest
init|=
cast|reinterpret_cast
argument_list|<
name|uint
operator|*
argument_list|>
argument_list|(
name|img
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
argument_list|)
decl_stmt|;
name|BYTE
modifier|*
name|src
init|=
name|alphaValues
operator|+
name|width
operator|*
literal|3
operator|*
name|y
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
operator|++
name|x
control|)
block|{
name|dest
index|[
name|x
index|]
operator|=
operator|*
operator|(
name|src
operator|)
operator|<<
literal|16
operator||
operator|*
operator|(
name|src
operator|+
literal|1
operator|)
operator|<<
literal|8
operator||
operator|*
operator|(
name|src
operator|+
literal|2
operator|)
expr_stmt|;
name|src
operator|+=
literal|3
expr_stmt|;
block|}
block|}
operator|delete
index|[]
name|alphaValues
expr_stmt|;
name|glyphAnalysis
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return
name|img
return|;
block|}
else|else
block|{
operator|delete
index|[]
name|alphaValues
expr_stmt|;
name|glyphAnalysis
operator|->
name|Release
argument_list|()
expr_stmt|;
name|qErrnoWarning
argument_list|(
literal|"QFontEngineDirectWrite::imageForGlyph: CreateAlphaTexture failed"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|qErrnoWarning
argument_list|(
literal|"QFontEngineDirectWrite::imageForGlyph: CreateGlyphRunAnalysis failed"
argument_list|)
expr_stmt|;
block|}
return|return
name|QImage
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|alphaRGBMapForGlyph
name|QImage
name|QFontEngineDirectWrite
operator|::
name|alphaRGBMapForGlyph
parameter_list|(
name|glyph_t
name|t
parameter_list|,
name|QFixed
name|subPixelPosition
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|xform
parameter_list|)
block|{
name|QImage
name|mask
init|=
name|imageForGlyph
argument_list|(
name|t
argument_list|,
name|subPixelPosition
argument_list|,
name|glyphMargin
argument_list|(
name|QFontEngineGlyphCache
operator|::
name|Raster_RGBMask
argument_list|)
argument_list|,
name|xform
argument_list|)
decl_stmt|;
return|return
name|mask
operator|.
name|depth
argument_list|()
operator|==
literal|32
condition|?
name|mask
else|:
name|mask
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|name
specifier|const
name|char
modifier|*
name|QFontEngineDirectWrite
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|canRender
name|bool
name|QFontEngineDirectWrite
operator|::
name|canRender
parameter_list|(
specifier|const
name|QChar
modifier|*
name|string
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|QVarLengthArray
argument_list|<
name|UINT32
argument_list|>
name|codePoints
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|int
name|actualLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
operator|,
name|actualLength
operator|++
control|)
name|codePoints
index|[
name|actualLength
index|]
operator|=
name|getChar
argument_list|(
name|string
argument_list|,
name|i
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QVarLengthArray
argument_list|<
name|UINT16
argument_list|>
name|glyphIndices
argument_list|(
name|actualLength
argument_list|)
decl_stmt|;
name|HRESULT
name|hr
init|=
name|m_directWriteFontFace
operator|->
name|GetGlyphIndices
argument_list|(
name|codePoints
operator|.
name|data
argument_list|()
argument_list|,
name|actualLength
argument_list|,
name|glyphIndices
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hr
argument_list|,
literal|"QFontEngineDirectWrite::canRender: GetGlyphIndices failed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphIndices
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|glyphIndices
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|0
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_function
begin_function
DECL|function|type
name|QFontEngine
operator|::
name|Type
name|QFontEngineDirectWrite
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|QFontEngine
operator|::
name|DirectWrite
return|;
block|}
end_function
begin_function
DECL|function|cloneWithSize
name|QFontEngine
modifier|*
name|QFontEngineDirectWrite
operator|::
name|cloneWithSize
parameter_list|(
name|qreal
name|pixelSize
parameter_list|)
specifier|const
block|{
name|QFontEngine
modifier|*
name|fontEngine
init|=
operator|new
name|QFontEngineDirectWrite
argument_list|(
name|m_directWriteFactory
argument_list|,
name|m_directWriteFontFace
argument_list|,
name|pixelSize
argument_list|)
decl_stmt|;
name|fontEngine
operator|->
name|fontDef
operator|=
name|fontDef
expr_stmt|;
name|fontEngine
operator|->
name|fontDef
operator|.
name|pixelSize
operator|=
name|pixelSize
expr_stmt|;
return|return
name|fontEngine
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DIRECTWRITE
end_comment
end_unit
