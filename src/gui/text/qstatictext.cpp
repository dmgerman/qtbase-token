begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qstatictext.h"
end_include
begin_include
include|#
directive|include
file|"qstatictext_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qtextengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qfontengine_p.h>
end_include
begin_include
include|#
directive|include
file|<qabstracttextdocumentlayout.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qapplication.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QStaticText     \brief The QStaticText class enables optimized drawing of text when the text and its layout     is updated rarely.     \since 4.7      \ingroup multimedia     \ingroup text     \mainclass      QStaticText provides a way to cache layout data for a block of text so that it can be drawn     more efficiently than by using QPainter::drawText() in which the layout information is      recalculated with every call.       The class primarily provides an optimization for cases where the text, its font and the     transformations on the painter are static over several paint events. If the text or its layout     is changed for every iteration, QPainter::drawText() is the more efficient alternative, since     the static text's layout would have to be recalculated to take the new state into consideration.      Translating the painter will not cause the layout of the text to be recalculated, but will cause     a very small performance impact on drawStaticText(). Altering any other parts of the painter's     transformation or the painter's font will cause the layout of the static text to be     recalculated. This should be avoided as often as possible to maximize the performance     benefit of using QStaticText.      In addition, only affine transformations are supported by drawStaticText(). Calling     drawStaticText() on a projected painter will perform slightly worse than using the regular     drawText() call, so this should be avoided.      \code     class MyWidget: public QWidget     {     public:         MyWidget(QWidget *parent = 0) : QWidget(parent), m_staticText("This is static text")      protected:         void paintEvent(QPaintEvent *)         {             QPainter painter(this);             painter.drawStaticText(0, 0, m_staticText);         }      private:         QStaticText m_staticText;     };     \endcode      The QStaticText class can be used to mimic the behavior of QPainter::drawText() to a specific     point with no boundaries, and also when QPainter::drawText() is called with a bounding      rectangle.       If a bounding rectangle is not required, create a QStaticText object without setting a preferred     text width. The text will then occupy a single line.      If you set a text width on the QStaticText object, this will bound the text. The text will     be formatted so that no line exceeds the given width. The text width set for QStaticText will     not automatically be used for clipping. To achieve clipping in addition to line breaks, use     QPainter::setClipRect(). The position of the text is decided by the argument passed to     QPainter::drawStaticText() and can change from call to call with a minimal impact on     performance.      For extra convenience, it is possible to apply formatting to the text using the HTML subset     supported by QTextDocument. QStaticText will attempt to guess the format of the input text using     Qt::mightBeRichText(), and interpret it as rich text if this function returns true. To force     QStaticText to display its contents as either plain text or rich text, use the function     QStaticText::setTextFormat() and pass in, respectively, Qt::PlainText and Qt::RichText.      QStaticText can only represent text, so only HTML tags which alter the layout or appearance of     the text will be respected. Adding an image to the input HTML, for instance, will cause the     image to be included as part of the layout, affecting the positions of the text glyphs, but it     will not be displayed. The result will be an empty area the size of the image in the output.     Similarly, using tables will cause the text to be laid out in table format, but the borders     will not be drawn.      If it's the first time the static text is drawn, or if the static text, or the painter's font     has been altered since the last time it was drawn, the text's layout has to be     recalculated. On some paint engines, changing the matrix of the painter will also cause the     layout to be recalculated. In particular, this will happen for any engine except for the     OpenGL2 paint engine. Recalculating the layout will impose an overhead on the     QPainter::drawStaticText() call where it occurs. To avoid this overhead in the paint event, you     can call prepare() ahead of time to ensure that the layout is calculated.      \sa QPainter::drawText(), QPainter::drawStaticText(), QTextLayout, QTextDocument */
end_comment
begin_comment
comment|/*!     \enum QStaticText::PerformanceHint      This enum the different performance hints that can be set on the QStaticText. These hints     can be used to indicate that the QStaticText should use additional caches, if possible,     to improve performance at the expense of memory. In particular, setting the performance hint     AggressiveCaching on the QStaticText will improve performance when using the OpenGL graphics     system or when drawing to a QGLWidget.      \value ModerateCaching Do basic caching for high performance at a low memory cost.     \value AggressiveCaching Use additional caching when available. This may improve performance            at a higher memory cost. */
end_comment
begin_comment
comment|/*!     Constructs an empty QStaticText */
end_comment
begin_constructor
DECL|function|QStaticText
name|QStaticText
operator|::
name|QStaticText
parameter_list|()
member_init_list|:
name|data
argument_list|(
operator|new
name|QStaticTextPrivate
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a QStaticText object with the given \a text. */
end_comment
begin_constructor
DECL|function|QStaticText
name|QStaticText
operator|::
name|QStaticText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
member_init_list|:
name|data
argument_list|(
operator|new
name|QStaticTextPrivate
argument_list|)
block|{
name|data
operator|->
name|text
operator|=
name|text
expr_stmt|;
name|data
operator|->
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a QStaticText object which is a copy of \a other. */
end_comment
begin_constructor
DECL|function|QStaticText
name|QStaticText
operator|::
name|QStaticText
parameter_list|(
specifier|const
name|QStaticText
modifier|&
name|other
parameter_list|)
block|{
name|data
operator|=
name|other
operator|.
name|data
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the QStaticText. */
end_comment
begin_destructor
DECL|function|~QStaticText
name|QStaticText
operator|::
name|~
name|QStaticText
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|data
operator|||
name|data
operator|->
name|ref
operator|>=
literal|1
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|detach
name|void
name|QStaticText
operator|::
name|detach
parameter_list|()
block|{
if|if
condition|(
name|data
operator|->
name|ref
operator|!=
literal|1
condition|)
name|data
operator|.
name|detach
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Prepares the QStaticText object for being painted with the given \a matrix and the given \a font   to avoid overhead when the actual drawStaticText() call is made.    When drawStaticText() is called, the layout of the QStaticText will be recalculated if any part   of the QStaticText object has changed since the last time it was drawn. It will also be   recalculated if the painter's font is not the same as when the QStaticText was last drawn, or,   on any other paint engine than the OpenGL2 engine, if the painter's matrix has been altered   since the static text was last drawn.    To avoid the overhead of creating the layout the first time you draw the QStaticText after   making changes, you can use the prepare() function and pass in the \a matrix and \a font you   expect to use when drawing the text.    \sa QPainter::setFont(), QPainter::setMatrix() */
end_comment
begin_function
DECL|function|prepare
name|void
name|QStaticText
operator|::
name|prepare
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
specifier|const
name|QFont
modifier|&
name|font
parameter_list|)
block|{
name|data
operator|->
name|matrix
operator|=
name|matrix
expr_stmt|;
name|data
operator|->
name|font
operator|=
name|font
expr_stmt|;
name|data
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Assigns \a other to this QStaticText. */
end_comment
begin_function
DECL|function|operator =
name|QStaticText
modifier|&
name|QStaticText
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QStaticText
modifier|&
name|other
parameter_list|)
block|{
name|data
operator|=
name|other
operator|.
name|data
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     Compares \a other to this QStaticText. Returns true if the texts, fonts and text widths     are equal. */
end_comment
begin_function
DECL|function|operator ==
name|bool
name|QStaticText
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|QStaticText
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|data
operator|==
name|other
operator|.
name|data
operator|||
operator|(
name|data
operator|->
name|text
operator|==
name|other
operator|.
name|data
operator|->
name|text
operator|&&
name|data
operator|->
name|font
operator|==
name|other
operator|.
name|data
operator|->
name|font
operator|&&
name|data
operator|->
name|textWidth
operator|==
name|other
operator|.
name|data
operator|->
name|textWidth
operator|)
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     Compares \a other to this QStaticText. Returns true if the texts, fonts or maximum sizes     are different. */
end_comment
begin_function
DECL|function|operator !=
name|bool
name|QStaticText
operator|::
name|operator
name|!=
parameter_list|(
specifier|const
name|QStaticText
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the text of the QStaticText to \a text.      \note This function will cause the layout of the text to require recalculation.      \sa text() */
end_comment
begin_function
DECL|function|setText
name|void
name|QStaticText
operator|::
name|setText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|data
operator|->
name|text
operator|=
name|text
expr_stmt|;
name|data
operator|->
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!    Sets the text format of the QStaticText to \a textFormat. If \a textFormat is set to    Qt::AutoText (the default), the format of the text will try to be determined using the    function Qt::mightBeRichText(). If the text format is Qt::PlainText, then the text will be    displayed as is, whereas it will be interpreted as HTML if the format is Qt::RichText. HTML tags    that alter the font of the text, its color, or its layout are supported by QStaticText.     \note This function will cause the layout of the text to require recalculation.     \sa textFormat(), setText(), text() */
end_comment
begin_function
DECL|function|setTextFormat
name|void
name|QStaticText
operator|::
name|setTextFormat
parameter_list|(
name|Qt
operator|::
name|TextFormat
name|textFormat
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|data
operator|->
name|textFormat
operator|=
name|textFormat
expr_stmt|;
name|data
operator|->
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the text format of the QStaticText.    \sa setTextFormat(), setText(), text() */
end_comment
begin_function
DECL|function|textFormat
name|Qt
operator|::
name|TextFormat
name|QStaticText
operator|::
name|textFormat
parameter_list|()
specifier|const
block|{
return|return
name|Qt
operator|::
name|TextFormat
argument_list|(
name|data
operator|->
name|textFormat
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the text of the QStaticText.      \sa setText() */
end_comment
begin_function
DECL|function|text
name|QString
name|QStaticText
operator|::
name|text
parameter_list|()
specifier|const
block|{
return|return
name|data
operator|->
name|text
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the performance hint of the QStaticText according to the \a   performanceHint provided. The \a performanceHint is used to   customize how much caching is done internally to improve   performance.    The default is QStaticText::ModerateCaching.    \note This function will cause the layout of the text to require recalculation.    \sa performanceHint() */
end_comment
begin_function
DECL|function|setPerformanceHint
name|void
name|QStaticText
operator|::
name|setPerformanceHint
parameter_list|(
name|PerformanceHint
name|performanceHint
parameter_list|)
block|{
if|if
condition|(
operator|(
name|performanceHint
operator|==
name|ModerateCaching
operator|&&
operator|!
name|data
operator|->
name|useBackendOptimizations
operator|)
operator|||
operator|(
name|performanceHint
operator|==
name|AggressiveCaching
operator|&&
name|data
operator|->
name|useBackendOptimizations
operator|)
condition|)
block|{
return|return;
block|}
name|detach
argument_list|()
expr_stmt|;
name|data
operator|->
name|useBackendOptimizations
operator|=
operator|(
name|performanceHint
operator|==
name|AggressiveCaching
operator|)
expr_stmt|;
name|data
operator|->
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns which performance hint is set for the QStaticText.    \sa setPerformanceHint() */
end_comment
begin_function
DECL|function|performanceHint
name|QStaticText
operator|::
name|PerformanceHint
name|QStaticText
operator|::
name|performanceHint
parameter_list|()
specifier|const
block|{
return|return
name|data
operator|->
name|useBackendOptimizations
condition|?
name|AggressiveCaching
else|:
name|ModerateCaching
return|;
block|}
end_function
begin_comment
comment|/*!    Sets the text option structure that controls the layout process to the given \a textOption.     \sa textOption() */
end_comment
begin_function
DECL|function|setTextOption
name|void
name|QStaticText
operator|::
name|setTextOption
parameter_list|(
specifier|const
name|QTextOption
modifier|&
name|textOption
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|data
operator|->
name|textOption
operator|=
name|textOption
expr_stmt|;
name|data
operator|->
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the current text option used to control the layout process. */
end_comment
begin_function
DECL|function|textOption
name|QTextOption
name|QStaticText
operator|::
name|textOption
parameter_list|()
specifier|const
block|{
return|return
name|data
operator|->
name|textOption
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the preferred width for this QStaticText. If the text is wider than the specified width,     it will be broken into multiple lines and grow vertically. If the text cannot be split into     multiple lines, it will be larger than the specified \a textWidth.      Setting the preferred text width to a negative number will cause the text to be unbounded.      Use size() to get the actual size of the text.      \note This function will cause the layout of the text to require recalculation.      \sa textWidth(), size() */
end_comment
begin_function
DECL|function|setTextWidth
name|void
name|QStaticText
operator|::
name|setTextWidth
parameter_list|(
name|qreal
name|textWidth
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|data
operator|->
name|textWidth
operator|=
name|textWidth
expr_stmt|;
name|data
operator|->
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the preferred width for this QStaticText.      \sa setTextWidth() */
end_comment
begin_function
DECL|function|textWidth
name|qreal
name|QStaticText
operator|::
name|textWidth
parameter_list|()
specifier|const
block|{
return|return
name|data
operator|->
name|textWidth
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the size of the bounding rect for this QStaticText.    \sa textWidth() */
end_comment
begin_function
DECL|function|size
name|QSizeF
name|QStaticText
operator|::
name|size
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|data
operator|->
name|needsRelayout
condition|)
name|data
operator|->
name|init
argument_list|()
expr_stmt|;
return|return
name|data
operator|->
name|actualSize
return|;
block|}
end_function
begin_constructor
DECL|function|QStaticTextPrivate
name|QStaticTextPrivate
operator|::
name|QStaticTextPrivate
parameter_list|()
member_init_list|:
name|textWidth
argument_list|(
operator|-
literal|1.0
argument_list|)
member_init_list|,
name|items
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|itemCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|glyphPool
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|positionPool
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|charPool
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|needsRelayout
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|useBackendOptimizations
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|textFormat
argument_list|(
name|Qt
operator|::
name|AutoText
argument_list|)
member_init_list|,
name|untransformedCoordinates
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|QStaticTextPrivate
name|QStaticTextPrivate
operator|::
name|QStaticTextPrivate
parameter_list|(
specifier|const
name|QStaticTextPrivate
modifier|&
name|other
parameter_list|)
member_init_list|:
name|text
argument_list|(
name|other
operator|.
name|text
argument_list|)
member_init_list|,
name|font
argument_list|(
name|other
operator|.
name|font
argument_list|)
member_init_list|,
name|textWidth
argument_list|(
name|other
operator|.
name|textWidth
argument_list|)
member_init_list|,
name|matrix
argument_list|(
name|other
operator|.
name|matrix
argument_list|)
member_init_list|,
name|items
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|itemCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|glyphPool
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|positionPool
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|charPool
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|textOption
argument_list|(
name|other
operator|.
name|textOption
argument_list|)
member_init_list|,
name|needsRelayout
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|useBackendOptimizations
argument_list|(
name|other
operator|.
name|useBackendOptimizations
argument_list|)
member_init_list|,
name|textFormat
argument_list|(
name|other
operator|.
name|textFormat
argument_list|)
member_init_list|,
name|untransformedCoordinates
argument_list|(
name|other
operator|.
name|untransformedCoordinates
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QStaticTextPrivate
name|QStaticTextPrivate
operator|::
name|~
name|QStaticTextPrivate
parameter_list|()
block|{
operator|delete
index|[]
name|items
expr_stmt|;
operator|delete
index|[]
name|glyphPool
expr_stmt|;
operator|delete
index|[]
name|positionPool
expr_stmt|;
operator|delete
index|[]
name|charPool
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|get
name|QStaticTextPrivate
modifier|*
name|QStaticTextPrivate
operator|::
name|get
parameter_list|(
specifier|const
name|QStaticText
modifier|*
name|q
parameter_list|)
block|{
return|return
name|q
operator|->
name|data
operator|.
name|data
argument_list|()
return|;
block|}
end_function
begin_namespace
namespace|namespace
block|{
DECL|class|DrawTextItemRecorder
class|class
name|DrawTextItemRecorder
super|:
specifier|public
name|QPaintEngine
block|{
public|public:
DECL|function|DrawTextItemRecorder
name|DrawTextItemRecorder
parameter_list|(
name|bool
name|untransformedCoordinates
parameter_list|,
name|bool
name|useBackendOptimizations
parameter_list|)
member_init_list|:
name|m_dirtyPen
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_useBackendOptimizations
argument_list|(
name|useBackendOptimizations
argument_list|)
member_init_list|,
name|m_untransformedCoordinates
argument_list|(
name|untransformedCoordinates
argument_list|)
block|{         }
DECL|function|updateState
specifier|virtual
name|void
name|updateState
parameter_list|(
specifier|const
name|QPaintEngineState
modifier|&
name|newState
parameter_list|)
block|{
if|if
condition|(
name|newState
operator|.
name|state
argument_list|()
operator|&
name|QPaintEngine
operator|::
name|DirtyPen
condition|)
name|m_dirtyPen
operator|=
literal|true
expr_stmt|;
block|}
DECL|function|drawTextItem
specifier|virtual
name|void
name|drawTextItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|position
parameter_list|,
specifier|const
name|QTextItem
modifier|&
name|textItem
parameter_list|)
block|{
specifier|const
name|QTextItemInt
modifier|&
name|ti
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTextItemInt
operator|&
argument_list|>
argument_list|(
name|textItem
argument_list|)
decl_stmt|;
name|QStaticTextItem
name|currentItem
decl_stmt|;
name|currentItem
operator|.
name|setFontEngine
argument_list|(
name|ti
operator|.
name|fontEngine
argument_list|)
expr_stmt|;
name|currentItem
operator|.
name|font
operator|=
name|ti
operator|.
name|font
argument_list|()
expr_stmt|;
name|currentItem
operator|.
name|charOffset
operator|=
name|m_chars
operator|.
name|size
argument_list|()
expr_stmt|;
name|currentItem
operator|.
name|numChars
operator|=
name|ti
operator|.
name|num_chars
expr_stmt|;
name|currentItem
operator|.
name|glyphOffset
operator|=
name|m_glyphs
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// Store offset into glyph pool
name|currentItem
operator|.
name|positionOffset
operator|=
name|m_glyphs
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// Offset into position pool
name|currentItem
operator|.
name|useBackendOptimizations
operator|=
name|m_useBackendOptimizations
expr_stmt|;
if|if
condition|(
name|m_dirtyPen
condition|)
name|currentItem
operator|.
name|color
operator|=
name|state
operator|->
name|pen
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|QTransform
name|matrix
init|=
name|m_untransformedCoordinates
condition|?
name|QTransform
argument_list|()
else|:
name|state
operator|->
name|transform
argument_list|()
decl_stmt|;
name|matrix
operator|.
name|translate
argument_list|(
name|position
operator|.
name|x
argument_list|()
argument_list|,
name|position
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QVarLengthArray
argument_list|<
name|glyph_t
argument_list|>
name|glyphs
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QFixedPoint
argument_list|>
name|positions
decl_stmt|;
name|ti
operator|.
name|fontEngine
operator|->
name|getGlyphPositions
argument_list|(
name|ti
operator|.
name|glyphs
argument_list|,
name|matrix
argument_list|,
name|ti
operator|.
name|flags
argument_list|,
name|glyphs
argument_list|,
name|positions
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|glyphs
operator|.
name|size
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|size
operator|==
name|positions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|currentItem
operator|.
name|numGlyphs
operator|=
name|size
expr_stmt|;
name|m_glyphs
operator|.
name|resize
argument_list|(
name|m_glyphs
operator|.
name|size
argument_list|()
operator|+
name|size
argument_list|)
expr_stmt|;
name|m_positions
operator|.
name|resize
argument_list|(
name|m_glyphs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|m_chars
operator|.
name|resize
argument_list|(
name|m_chars
operator|.
name|size
argument_list|()
operator|+
name|ti
operator|.
name|num_chars
argument_list|)
expr_stmt|;
name|glyph_t
modifier|*
name|glyphsDestination
init|=
name|m_glyphs
operator|.
name|data
argument_list|()
operator|+
name|currentItem
operator|.
name|glyphOffset
decl_stmt|;
name|memcpy
argument_list|(
name|glyphsDestination
argument_list|,
name|glyphs
operator|.
name|constData
argument_list|()
argument_list|,
sizeof|sizeof
argument_list|(
name|glyph_t
argument_list|)
operator|*
name|currentItem
operator|.
name|numGlyphs
argument_list|)
expr_stmt|;
name|QFixedPoint
modifier|*
name|positionsDestination
init|=
name|m_positions
operator|.
name|data
argument_list|()
operator|+
name|currentItem
operator|.
name|positionOffset
decl_stmt|;
name|memcpy
argument_list|(
name|positionsDestination
argument_list|,
name|positions
operator|.
name|constData
argument_list|()
argument_list|,
sizeof|sizeof
argument_list|(
name|QFixedPoint
argument_list|)
operator|*
name|currentItem
operator|.
name|numGlyphs
argument_list|)
expr_stmt|;
name|QChar
modifier|*
name|charsDestination
init|=
name|m_chars
operator|.
name|data
argument_list|()
operator|+
name|currentItem
operator|.
name|charOffset
decl_stmt|;
name|memcpy
argument_list|(
name|charsDestination
argument_list|,
name|ti
operator|.
name|chars
argument_list|,
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
operator|*
name|currentItem
operator|.
name|numChars
argument_list|)
expr_stmt|;
name|m_items
operator|.
name|append
argument_list|(
name|currentItem
argument_list|)
expr_stmt|;
block|}
DECL|function|drawPolygon
specifier|virtual
name|void
name|drawPolygon
parameter_list|(
specifier|const
name|QPointF
modifier|*
parameter_list|,
name|int
parameter_list|,
name|PolygonDrawMode
parameter_list|)
block|{
comment|/* intentionally empty */
block|}
DECL|function|begin
specifier|virtual
name|bool
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
DECL|function|end
specifier|virtual
name|bool
name|end
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|function|drawPixmap
specifier|virtual
name|void
name|drawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
parameter_list|,
specifier|const
name|QPixmap
modifier|&
parameter_list|,
specifier|const
name|QRectF
modifier|&
parameter_list|)
block|{}
DECL|function|type
specifier|virtual
name|Type
name|type
parameter_list|()
specifier|const
block|{
return|return
name|User
return|;
block|}
DECL|function|items
name|QVector
argument_list|<
name|QStaticTextItem
argument_list|>
name|items
parameter_list|()
specifier|const
block|{
return|return
name|m_items
return|;
block|}
DECL|function|positions
name|QVector
argument_list|<
name|QFixedPoint
argument_list|>
name|positions
parameter_list|()
specifier|const
block|{
return|return
name|m_positions
return|;
block|}
DECL|function|glyphs
name|QVector
argument_list|<
name|glyph_t
argument_list|>
name|glyphs
parameter_list|()
specifier|const
block|{
return|return
name|m_glyphs
return|;
block|}
DECL|function|chars
name|QVector
argument_list|<
name|QChar
argument_list|>
name|chars
parameter_list|()
specifier|const
block|{
return|return
name|m_chars
return|;
block|}
private|private:
DECL|member|m_items
name|QVector
argument_list|<
name|QStaticTextItem
argument_list|>
name|m_items
decl_stmt|;
DECL|member|m_positions
name|QVector
argument_list|<
name|QFixedPoint
argument_list|>
name|m_positions
decl_stmt|;
DECL|member|m_glyphs
name|QVector
argument_list|<
name|glyph_t
argument_list|>
name|m_glyphs
decl_stmt|;
DECL|member|m_chars
name|QVector
argument_list|<
name|QChar
argument_list|>
name|m_chars
decl_stmt|;
DECL|member|m_dirtyPen
name|bool
name|m_dirtyPen
decl_stmt|;
DECL|member|m_useBackendOptimizations
name|bool
name|m_useBackendOptimizations
decl_stmt|;
DECL|member|m_untransformedCoordinates
name|bool
name|m_untransformedCoordinates
decl_stmt|;
block|}
class|;
DECL|class|DrawTextItemDevice
class|class
name|DrawTextItemDevice
super|:
specifier|public
name|QPaintDevice
block|{
public|public:
DECL|function|DrawTextItemDevice
name|DrawTextItemDevice
parameter_list|(
name|bool
name|untransformedCoordinates
parameter_list|,
name|bool
name|useBackendOptimizations
parameter_list|)
block|{
name|m_paintEngine
operator|=
operator|new
name|DrawTextItemRecorder
argument_list|(
name|untransformedCoordinates
argument_list|,
name|useBackendOptimizations
argument_list|)
expr_stmt|;
block|}
DECL|function|~DrawTextItemDevice
name|~
name|DrawTextItemDevice
parameter_list|()
block|{
operator|delete
name|m_paintEngine
expr_stmt|;
block|}
DECL|function|metric
name|int
name|metric
parameter_list|(
name|PaintDeviceMetric
name|m
parameter_list|)
specifier|const
block|{
name|int
name|val
decl_stmt|;
switch|switch
condition|(
name|m
condition|)
block|{
case|case
name|PdmWidth
case|:
case|case
name|PdmHeight
case|:
case|case
name|PdmWidthMM
case|:
case|case
name|PdmHeightMM
case|:
name|val
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|PdmDpiX
case|:
case|case
name|PdmPhysicalDpiX
case|:
name|val
operator|=
name|qt_defaultDpiX
argument_list|()
expr_stmt|;
break|break;
case|case
name|PdmDpiY
case|:
case|case
name|PdmPhysicalDpiY
case|:
name|val
operator|=
name|qt_defaultDpiY
argument_list|()
expr_stmt|;
break|break;
case|case
name|PdmNumColors
case|:
name|val
operator|=
literal|16777216
expr_stmt|;
break|break;
case|case
name|PdmDepth
case|:
name|val
operator|=
literal|24
expr_stmt|;
break|break;
default|default:
name|val
operator|=
literal|0
expr_stmt|;
name|qWarning
argument_list|(
literal|"DrawTextItemDevice::metric: Invalid metric command"
argument_list|)
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
DECL|function|paintEngine
specifier|virtual
name|QPaintEngine
modifier|*
name|paintEngine
parameter_list|()
specifier|const
block|{
return|return
name|m_paintEngine
return|;
block|}
DECL|function|glyphs
name|QVector
argument_list|<
name|glyph_t
argument_list|>
name|glyphs
parameter_list|()
specifier|const
block|{
return|return
name|m_paintEngine
operator|->
name|glyphs
argument_list|()
return|;
block|}
DECL|function|positions
name|QVector
argument_list|<
name|QFixedPoint
argument_list|>
name|positions
parameter_list|()
specifier|const
block|{
return|return
name|m_paintEngine
operator|->
name|positions
argument_list|()
return|;
block|}
DECL|function|items
name|QVector
argument_list|<
name|QStaticTextItem
argument_list|>
name|items
parameter_list|()
specifier|const
block|{
return|return
name|m_paintEngine
operator|->
name|items
argument_list|()
return|;
block|}
DECL|function|chars
name|QVector
argument_list|<
name|QChar
argument_list|>
name|chars
parameter_list|()
specifier|const
block|{
return|return
name|m_paintEngine
operator|->
name|chars
argument_list|()
return|;
block|}
private|private:
DECL|member|m_paintEngine
name|DrawTextItemRecorder
modifier|*
name|m_paintEngine
decl_stmt|;
block|}
class|;
block|}
end_namespace
begin_function
DECL|function|paintText
name|void
name|QStaticTextPrivate
operator|::
name|paintText
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|topLeftPosition
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|)
block|{
name|bool
name|preferRichText
init|=
name|textFormat
operator|==
name|Qt
operator|::
name|RichText
operator|||
operator|(
name|textFormat
operator|==
name|Qt
operator|::
name|AutoText
operator|&&
name|Qt
operator|::
name|mightBeRichText
argument_list|(
name|text
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|preferRichText
condition|)
block|{
name|QTextLayout
name|textLayout
decl_stmt|;
name|textLayout
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|textLayout
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|textLayout
operator|.
name|setTextOption
argument_list|(
name|textOption
argument_list|)
expr_stmt|;
name|qreal
name|leading
init|=
name|QFontMetricsF
argument_list|(
name|font
argument_list|)
operator|.
name|leading
argument_list|()
decl_stmt|;
name|qreal
name|height
init|=
operator|-
name|leading
decl_stmt|;
name|textLayout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
while|while
condition|(
literal|1
condition|)
block|{
name|QTextLine
name|line
init|=
name|textLayout
operator|.
name|createLine
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|line
operator|.
name|isValid
argument_list|()
condition|)
break|break;
if|if
condition|(
name|textWidth
operator|>=
literal|0.0
condition|)
name|line
operator|.
name|setLineWidth
argument_list|(
name|textWidth
argument_list|)
expr_stmt|;
name|height
operator|+=
name|leading
expr_stmt|;
name|line
operator|.
name|setPosition
argument_list|(
name|QPointF
argument_list|(
literal|0.0
argument_list|,
name|height
argument_list|)
argument_list|)
expr_stmt|;
name|height
operator|+=
name|line
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|textLayout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|actualSize
operator|=
name|textLayout
operator|.
name|boundingRect
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|textLayout
operator|.
name|draw
argument_list|(
name|p
argument_list|,
name|topLeftPosition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QTextDocument
name|document
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CSSPARSER
name|QColor
name|color
init|=
name|p
operator|->
name|pen
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|document
operator|.
name|setDefaultStyleSheet
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"body { color: #%1%2%3 }"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|color
operator|.
name|red
argument_list|()
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|2
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|color
operator|.
name|green
argument_list|()
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|2
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|color
operator|.
name|blue
argument_list|()
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|2
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|document
operator|.
name|setDefaultFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|document
operator|.
name|setDocumentMargin
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TEXTHTMLPARSER
name|document
operator|.
name|setHtml
argument_list|(
name|text
argument_list|)
expr_stmt|;
else|#
directive|else
name|document
operator|.
name|setPlainText
argument_list|(
name|text
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|textWidth
operator|>=
literal|0.0
condition|)
name|document
operator|.
name|setTextWidth
argument_list|(
name|textWidth
argument_list|)
expr_stmt|;
else|else
name|document
operator|.
name|adjustSize
argument_list|()
expr_stmt|;
name|document
operator|.
name|setDefaultTextOption
argument_list|(
name|textOption
argument_list|)
expr_stmt|;
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|translate
argument_list|(
name|topLeftPosition
argument_list|)
expr_stmt|;
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
name|ctx
decl_stmt|;
name|ctx
operator|.
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
name|p
operator|->
name|pen
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|document
operator|.
name|documentLayout
argument_list|()
operator|->
name|draw
argument_list|(
name|p
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
if|if
condition|(
name|textWidth
operator|>=
literal|0.0
condition|)
name|document
operator|.
name|adjustSize
argument_list|()
expr_stmt|;
comment|// Find optimal size
name|actualSize
operator|=
name|document
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|init
name|void
name|QStaticTextPrivate
operator|::
name|init
parameter_list|()
block|{
operator|delete
index|[]
name|items
expr_stmt|;
operator|delete
index|[]
name|glyphPool
expr_stmt|;
operator|delete
index|[]
name|positionPool
expr_stmt|;
operator|delete
index|[]
name|charPool
expr_stmt|;
name|position
operator|=
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DrawTextItemDevice
name|device
argument_list|(
name|untransformedCoordinates
argument_list|,
name|useBackendOptimizations
argument_list|)
decl_stmt|;
block|{
name|QPainter
name|painter
argument_list|(
operator|&
name|device
argument_list|)
decl_stmt|;
name|painter
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setTransform
argument_list|(
name|matrix
argument_list|)
expr_stmt|;
name|paintText
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|&
name|painter
argument_list|)
expr_stmt|;
block|}
name|QVector
argument_list|<
name|QStaticTextItem
argument_list|>
name|deviceItems
init|=
name|device
operator|.
name|items
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|QFixedPoint
argument_list|>
name|positions
init|=
name|device
operator|.
name|positions
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|glyph_t
argument_list|>
name|glyphs
init|=
name|device
operator|.
name|glyphs
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|QChar
argument_list|>
name|chars
init|=
name|device
operator|.
name|chars
argument_list|()
decl_stmt|;
name|itemCount
operator|=
name|deviceItems
operator|.
name|size
argument_list|()
expr_stmt|;
name|items
operator|=
operator|new
name|QStaticTextItem
index|[
name|itemCount
index|]
expr_stmt|;
name|glyphPool
operator|=
operator|new
name|glyph_t
index|[
name|glyphs
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|memcpy
argument_list|(
name|glyphPool
argument_list|,
name|glyphs
operator|.
name|constData
argument_list|()
argument_list|,
name|glyphs
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|glyph_t
argument_list|)
argument_list|)
expr_stmt|;
name|positionPool
operator|=
operator|new
name|QFixedPoint
index|[
name|positions
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|memcpy
argument_list|(
name|positionPool
argument_list|,
name|positions
operator|.
name|constData
argument_list|()
argument_list|,
name|positions
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|QFixedPoint
argument_list|)
argument_list|)
expr_stmt|;
name|charPool
operator|=
operator|new
name|QChar
index|[
name|chars
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|memcpy
argument_list|(
name|charPool
argument_list|,
name|chars
operator|.
name|constData
argument_list|()
argument_list|,
name|chars
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|itemCount
condition|;
operator|++
name|i
control|)
block|{
name|items
index|[
name|i
index|]
operator|=
name|deviceItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|items
index|[
name|i
index|]
operator|.
name|glyphs
operator|=
name|glyphPool
operator|+
name|items
index|[
name|i
index|]
operator|.
name|glyphOffset
expr_stmt|;
name|items
index|[
name|i
index|]
operator|.
name|glyphPositions
operator|=
name|positionPool
operator|+
name|items
index|[
name|i
index|]
operator|.
name|positionOffset
expr_stmt|;
name|items
index|[
name|i
index|]
operator|.
name|chars
operator|=
name|charPool
operator|+
name|items
index|[
name|i
index|]
operator|.
name|charOffset
expr_stmt|;
block|}
name|needsRelayout
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~QStaticTextItem
name|QStaticTextItem
operator|::
name|~
name|QStaticTextItem
parameter_list|()
block|{
if|if
condition|(
name|m_userData
operator|!=
literal|0
operator|&&
operator|!
name|m_userData
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|m_userData
expr_stmt|;
name|m_fontEngine
operator|->
name|ref
operator|.
name|deref
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setFontEngine
name|void
name|QStaticTextItem
operator|::
name|setFontEngine
parameter_list|(
name|QFontEngine
modifier|*
name|fe
parameter_list|)
block|{
if|if
condition|(
name|m_fontEngine
operator|!=
literal|0
condition|)
name|m_fontEngine
operator|->
name|ref
operator|.
name|deref
argument_list|()
expr_stmt|;
name|m_fontEngine
operator|=
name|fe
expr_stmt|;
if|if
condition|(
name|m_fontEngine
operator|!=
literal|0
condition|)
name|m_fontEngine
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
