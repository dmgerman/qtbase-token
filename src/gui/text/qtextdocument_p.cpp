begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<private/qtools_p.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|"qtextdocument_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextdocument.h"
end_include
begin_include
include|#
directive|include
file|<qtextformat.h>
end_include
begin_include
include|#
directive|include
file|"qtextformat_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextobject_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextcursor.h"
end_include
begin_include
include|#
directive|include
file|"qtextimagehandler_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextcursor_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextdocumentlayout_p.h"
end_include
begin_include
include|#
directive|include
file|"qtexttable.h"
end_include
begin_include
include|#
directive|include
file|"qtextengine_p.h"
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|macro|PMDEBUG
define|#
directive|define
name|PMDEBUG
value|if(0) qDebug
comment|// The VxWorks DIAB compiler crashes when initializing the anonymouse union with { a7 }
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_CC_DIAB
argument_list|)
DECL|macro|QT_INIT_TEXTUNDOCOMMAND
define|#
directive|define
name|QT_INIT_TEXTUNDOCOMMAND
parameter_list|(
name|c
parameter_list|,
name|a1
parameter_list|,
name|a2
parameter_list|,
name|a3
parameter_list|,
name|a4
parameter_list|,
name|a5
parameter_list|,
name|a6
parameter_list|,
name|a7
parameter_list|,
name|a8
parameter_list|)
define|\
value|QTextUndoCommand c = { a1, a2, 0, 0, quint8(a3), a4, a5, a6, { a7 }, a8 }
else|#
directive|else
define|#
directive|define
name|QT_INIT_TEXTUNDOCOMMAND
parameter_list|(
name|c
parameter_list|,
name|a1
parameter_list|,
name|a2
parameter_list|,
name|a3
parameter_list|,
name|a4
parameter_list|,
name|a5
parameter_list|,
name|a6
parameter_list|,
name|a7
parameter_list|,
name|a8
parameter_list|)
define|\
value|QTextUndoCommand c = { a1, a2, 0, 0, a3, a4, a5, a6 }; c.blockFormat = a7; c.revision = a8
endif|#
directive|endif
comment|/*   Structure of a document:    DOCUMENT :== FRAME_CONTENTS   FRAME :== START_OF_FRAME  FRAME_CONTENTS END_OF_FRAME   FRAME_CONTENTS = LIST_OF_BLOCKS ((FRAME | TABLE) LIST_OF_BLOCKS)*   TABLE :== (START_OF_FRAME TABLE_CELL)+ END_OF_FRAME   TABLE_CELL = FRAME_CONTENTS   LIST_OF_BLOCKS :== (BLOCK END_OF_PARA)* BLOCK   BLOCK :== (FRAGMENT)*   FRAGMENT :== String of characters    END_OF_PARA :== 0x2029 # Paragraph separator in Unicode   START_OF_FRAME :== 0xfdd0   END_OF_FRAME := 0xfdd1    Note also that LIST_OF_BLOCKS can be empty. Nevertheless, there is   at least one valid cursor position there where you could start   typing. The block format is in this case determined by the last   END_OF_PARA/START_OF_FRAME/END_OF_FRAME (see below).    Lists are not in here, as they are treated specially. A list is just   a collection of (not necessarily connected) blocks, that share the   same objectIndex() in the format that refers to the list format and   object.    The above does not clearly note where formats are. Here's   how it looks currently:    FRAGMENT: one charFormat associated    END_OF_PARA: one charFormat, and a blockFormat for the _next_ block.    START_OF_FRAME: one char format, and a blockFormat (for the next   block). The format associated with the objectIndex() of the   charFormat decides whether this is a frame or table and its   properties    END_OF_FRAME: one charFormat and a blockFormat (for the next   block). The object() of the charFormat is the same as for the   corresponding START_OF_BLOCK.     The document is independent of the layout with certain restrictions:    * Cursor movement (esp. up and down) depend on the layout.   * You cannot have more than one layout, as the layout data of QTextObjects     is stored in the text object itself.  */
DECL|function|invalidate
name|void
name|QTextBlockData
operator|::
name|invalidate
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|layout
condition|)
name|layout
operator|->
name|engine
argument_list|()
operator|->
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isValidBlockSeparator
specifier|static
name|bool
name|isValidBlockSeparator
parameter_list|(
specifier|const
name|QChar
modifier|&
name|ch
parameter_list|)
block|{
return|return
name|ch
operator|==
name|QChar
operator|::
name|ParagraphSeparator
operator|||
name|ch
operator|==
name|QTextBeginningOfFrame
operator|||
name|ch
operator|==
name|QTextEndOfFrame
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
end_ifndef
begin_function
DECL|function|noBlockInString
specifier|static
name|bool
name|noBlockInString
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
return|return
operator|!
name|str
operator|.
name|contains
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
operator|&&
operator|!
name|str
operator|.
name|contains
argument_list|(
name|QTextBeginningOfFrame
argument_list|)
operator|&&
operator|!
name|str
operator|.
name|contains
argument_list|(
name|QTextEndOfFrame
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|tryMerge
name|bool
name|QTextUndoCommand
operator|::
name|tryMerge
parameter_list|(
specifier|const
name|QTextUndoCommand
modifier|&
name|other
parameter_list|)
block|{
if|if
condition|(
name|command
operator|!=
name|other
operator|.
name|command
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|command
operator|==
name|Inserted
operator|&&
operator|(
name|pos
operator|+
name|length
operator|==
name|other
operator|.
name|pos
operator|)
operator|&&
operator|(
name|strPos
operator|+
name|length
operator|==
name|other
operator|.
name|strPos
operator|)
operator|&&
name|format
operator|==
name|other
operator|.
name|format
condition|)
block|{
name|length
operator|+=
name|other
operator|.
name|length
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// removal to the 'right' using 'Delete' key
if|if
condition|(
name|command
operator|==
name|Removed
operator|&&
name|pos
operator|==
name|other
operator|.
name|pos
operator|&&
operator|(
name|strPos
operator|+
name|length
operator|==
name|other
operator|.
name|strPos
operator|)
operator|&&
name|format
operator|==
name|other
operator|.
name|format
condition|)
block|{
name|length
operator|+=
name|other
operator|.
name|length
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// removal to the 'left' using 'Backspace'
if|if
condition|(
name|command
operator|==
name|Removed
operator|&&
operator|(
name|other
operator|.
name|pos
operator|+
name|other
operator|.
name|length
operator|==
name|pos
operator|)
operator|&&
operator|(
name|other
operator|.
name|strPos
operator|+
name|other
operator|.
name|length
operator|==
name|strPos
operator|)
operator|&&
operator|(
name|format
operator|==
name|other
operator|.
name|format
operator|)
condition|)
block|{
name|int
name|l
init|=
name|length
decl_stmt|;
operator|(
operator|*
name|this
operator|)
operator|=
name|other
expr_stmt|;
name|length
operator|+=
name|l
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_constructor
DECL|function|QTextDocumentPrivate
name|QTextDocumentPrivate
operator|::
name|QTextDocumentPrivate
parameter_list|()
member_init_list|:
name|wasUndoAvailable
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|wasRedoAvailable
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|docChangeOldLength
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|docChangeLength
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|framesDirty
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|rtFrame
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|initialBlockCharFormatIndex
argument_list|(
operator|-
literal|1
argument_list|)
comment|// set correctly later in init()
block|{
name|editBlock
operator|=
literal|0
expr_stmt|;
name|editBlockCursorPosition
operator|=
operator|-
literal|1
expr_stmt|;
name|docChangeFrom
operator|=
operator|-
literal|1
expr_stmt|;
name|undoState
operator|=
literal|0
expr_stmt|;
name|revision
operator|=
operator|-
literal|1
expr_stmt|;
comment|// init() inserts a block, bringing it to 0
name|lout
operator|=
literal|0
expr_stmt|;
name|modified
operator|=
literal|false
expr_stmt|;
name|modifiedState
operator|=
literal|0
expr_stmt|;
name|undoEnabled
operator|=
literal|true
expr_stmt|;
name|inContentsChange
operator|=
literal|false
expr_stmt|;
name|blockCursorAdjustment
operator|=
literal|false
expr_stmt|;
name|defaultTextOption
operator|.
name|setTabStop
argument_list|(
literal|80
argument_list|)
expr_stmt|;
comment|// same as in qtextengine.cpp
name|defaultTextOption
operator|.
name|setWrapMode
argument_list|(
name|QTextOption
operator|::
name|WrapAtWordBoundaryOrAnywhere
argument_list|)
expr_stmt|;
name|defaultCursorMoveStyle
operator|=
name|QTextCursor
operator|::
name|Logical
expr_stmt|;
name|indentWidth
operator|=
literal|40
expr_stmt|;
name|documentMargin
operator|=
literal|4
expr_stmt|;
name|maximumBlockCount
operator|=
literal|0
expr_stmt|;
name|needsEnsureMaximumBlockCount
operator|=
literal|false
expr_stmt|;
name|unreachableCharacterCount
operator|=
literal|0
expr_stmt|;
name|lastBlockCount
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|init
name|void
name|QTextDocumentPrivate
operator|::
name|init
parameter_list|()
block|{
name|framesDirty
operator|=
literal|false
expr_stmt|;
name|bool
name|undoState
init|=
name|undoEnabled
decl_stmt|;
name|undoEnabled
operator|=
literal|false
expr_stmt|;
name|initialBlockCharFormatIndex
operator|=
name|formats
operator|.
name|indexForFormat
argument_list|(
name|QTextCharFormat
argument_list|()
argument_list|)
expr_stmt|;
name|insertBlock
argument_list|(
literal|0
argument_list|,
name|formats
operator|.
name|indexForFormat
argument_list|(
name|QTextBlockFormat
argument_list|()
argument_list|)
argument_list|,
name|formats
operator|.
name|indexForFormat
argument_list|(
name|QTextCharFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|undoEnabled
operator|=
name|undoState
expr_stmt|;
name|modified
operator|=
literal|false
expr_stmt|;
name|modifiedState
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|QTextDocumentPrivate
operator|::
name|clear
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QTextDocument
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QTextCursorPrivate
modifier|*
name|curs
decl|,
name|cursors
control|)
block|{
name|curs
operator|->
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|curs
operator|->
name|currentCharFormat
operator|=
operator|-
literal|1
expr_stmt|;
name|curs
operator|->
name|anchor
operator|=
literal|0
expr_stmt|;
name|curs
operator|->
name|adjusted_anchor
operator|=
literal|0
expr_stmt|;
block|}
name|QList
argument_list|<
name|QTextCursorPrivate
modifier|*
argument_list|>
name|oldCursors
init|=
name|cursors
decl_stmt|;
name|QT_TRY
block|{
name|cursors
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|QTextObject
modifier|*
argument_list|>
operator|::
name|Iterator
name|objectIt
init|=
name|objects
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|objectIt
operator|!=
name|objects
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
operator|*
name|objectIt
operator|!=
name|rtFrame
condition|)
block|{
operator|delete
operator|*
name|objectIt
expr_stmt|;
name|objectIt
operator|=
name|objects
operator|.
name|erase
argument_list|(
name|objectIt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|++
name|objectIt
expr_stmt|;
block|}
block|}
comment|// also clear out the remaining root frame pointer
comment|// (we're going to delete the object further down)
name|objects
operator|.
name|clear
argument_list|()
expr_stmt|;
name|title
operator|.
name|clear
argument_list|()
expr_stmt|;
name|clearUndoRedoStacks
argument_list|(
name|QTextDocument
operator|::
name|UndoAndRedoStacks
argument_list|)
expr_stmt|;
name|text
operator|=
name|QString
argument_list|()
expr_stmt|;
name|unreachableCharacterCount
operator|=
literal|0
expr_stmt|;
name|modifiedState
operator|=
literal|0
expr_stmt|;
name|modified
operator|=
literal|false
expr_stmt|;
name|formats
operator|=
name|QTextFormatCollection
argument_list|()
expr_stmt|;
name|int
name|len
init|=
name|fragments
operator|.
name|length
argument_list|()
decl_stmt|;
name|fragments
operator|.
name|clear
argument_list|()
expr_stmt|;
name|blocks
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cachedResources
operator|.
name|clear
argument_list|()
expr_stmt|;
operator|delete
name|rtFrame
expr_stmt|;
name|rtFrame
operator|=
literal|0
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
name|cursors
operator|=
name|oldCursors
expr_stmt|;
name|inContentsChange
operator|=
literal|true
expr_stmt|;
name|q
operator|->
name|contentsChange
argument_list|(
literal|0
argument_list|,
name|len
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|inContentsChange
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|lout
condition|)
name|lout
operator|->
name|documentChanged
argument_list|(
literal|0
argument_list|,
name|len
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|cursors
operator|=
name|oldCursors
expr_stmt|;
comment|// at least recover the cursors
name|QT_RETHROW
expr_stmt|;
block|}
block|}
end_function
begin_destructor
DECL|function|~QTextDocumentPrivate
name|QTextDocumentPrivate
operator|::
name|~
name|QTextDocumentPrivate
parameter_list|()
block|{
foreach|foreach
control|(
name|QTextCursorPrivate
modifier|*
name|curs
decl|,
name|cursors
control|)
name|curs
operator|->
name|priv
operator|=
literal|0
expr_stmt|;
name|cursors
operator|.
name|clear
argument_list|()
expr_stmt|;
name|undoState
operator|=
literal|0
expr_stmt|;
name|undoEnabled
operator|=
literal|true
expr_stmt|;
name|clearUndoRedoStacks
argument_list|(
name|QTextDocument
operator|::
name|RedoStack
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setLayout
name|void
name|QTextDocumentPrivate
operator|::
name|setLayout
parameter_list|(
name|QAbstractTextDocumentLayout
modifier|*
name|layout
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTextDocument
argument_list|)
expr_stmt|;
if|if
condition|(
name|lout
operator|==
name|layout
condition|)
return|return;
specifier|const
name|bool
name|firstLayout
init|=
operator|!
name|lout
decl_stmt|;
operator|delete
name|lout
expr_stmt|;
name|lout
operator|=
name|layout
expr_stmt|;
if|if
condition|(
operator|!
name|firstLayout
condition|)
for|for
control|(
name|BlockMap
operator|::
name|Iterator
name|it
init|=
name|blocks
operator|.
name|begin
argument_list|()
init|;
operator|!
name|it
operator|.
name|atEnd
argument_list|()
condition|;
operator|++
name|it
control|)
name|it
operator|->
name|free
argument_list|()
expr_stmt|;
emit|emit
name|q
operator|->
name|documentLayoutChanged
argument_list|()
emit|;
name|inContentsChange
operator|=
literal|true
expr_stmt|;
emit|emit
name|q
operator|->
name|contentsChange
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|length
argument_list|()
argument_list|)
emit|;
name|inContentsChange
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|lout
condition|)
name|lout
operator|->
name|documentChanged
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insert_string
name|void
name|QTextDocumentPrivate
operator|::
name|insert_string
parameter_list|(
name|int
name|pos
parameter_list|,
name|uint
name|strPos
parameter_list|,
name|uint
name|length
parameter_list|,
name|int
name|format
parameter_list|,
name|QTextUndoCommand
operator|::
name|Operation
name|op
parameter_list|)
block|{
comment|// ##### optimize when only appending to the fragment!
name|Q_ASSERT
argument_list|(
name|noBlockInString
argument_list|(
name|text
operator|.
name|mid
argument_list|(
name|strPos
argument_list|,
name|length
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|split
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|uint
name|x
init|=
name|fragments
operator|.
name|insert_single
argument_list|(
name|pos
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|QTextFragmentData
modifier|*
name|X
init|=
name|fragments
operator|.
name|fragment
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|X
operator|->
name|format
operator|=
name|format
expr_stmt|;
name|X
operator|->
name|stringPosition
operator|=
name|strPos
expr_stmt|;
name|uint
name|w
init|=
name|fragments
operator|.
name|previous
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
condition|)
name|unite
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|int
name|b
init|=
name|blocks
operator|.
name|findNode
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|blocks
operator|.
name|setSize
argument_list|(
name|b
argument_list|,
name|blocks
operator|.
name|size
argument_list|(
name|b
argument_list|)
operator|+
name|length
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|blocks
operator|.
name|length
argument_list|()
operator|==
name|fragments
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QTextFrame
modifier|*
name|frame
init|=
name|qobject_cast
argument_list|<
name|QTextFrame
operator|*
argument_list|>
argument_list|(
name|objectForFormat
argument_list|(
name|format
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|frame
condition|)
block|{
name|frame
operator|->
name|d_func
argument_list|()
operator|->
name|fragmentAdded
argument_list|(
name|text
operator|.
name|at
argument_list|(
name|strPos
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|framesDirty
operator|=
literal|true
expr_stmt|;
block|}
name|adjustDocumentChangesAndCursors
argument_list|(
name|pos
argument_list|,
name|length
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insert_block
name|int
name|QTextDocumentPrivate
operator|::
name|insert_block
parameter_list|(
name|int
name|pos
parameter_list|,
name|uint
name|strPos
parameter_list|,
name|int
name|format
parameter_list|,
name|int
name|blockFormat
parameter_list|,
name|QTextUndoCommand
operator|::
name|Operation
name|op
parameter_list|,
name|int
name|command
parameter_list|)
block|{
name|split
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|uint
name|x
init|=
name|fragments
operator|.
name|insert_single
argument_list|(
name|pos
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QTextFragmentData
modifier|*
name|X
init|=
name|fragments
operator|.
name|fragment
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|X
operator|->
name|format
operator|=
name|format
expr_stmt|;
name|X
operator|->
name|stringPosition
operator|=
name|strPos
expr_stmt|;
comment|// no need trying to unite, since paragraph separators are always in a fragment of their own
name|Q_ASSERT
argument_list|(
name|isValidBlockSeparator
argument_list|(
name|text
operator|.
name|at
argument_list|(
name|strPos
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|blocks
operator|.
name|length
argument_list|()
operator|+
literal|1
operator|==
name|fragments
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|block_pos
init|=
name|pos
decl_stmt|;
if|if
condition|(
name|blocks
operator|.
name|length
argument_list|()
operator|&&
name|command
operator|==
name|QTextUndoCommand
operator|::
name|BlockRemoved
condition|)
operator|++
name|block_pos
expr_stmt|;
name|int
name|size
init|=
literal|1
decl_stmt|;
name|int
name|n
init|=
name|blocks
operator|.
name|findNode
argument_list|(
name|block_pos
argument_list|)
decl_stmt|;
name|int
name|key
init|=
name|n
condition|?
name|blocks
operator|.
name|position
argument_list|(
name|n
argument_list|)
else|:
name|blocks
operator|.
name|length
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|n
operator|||
operator|(
operator|!
name|n
operator|&&
name|block_pos
operator|==
name|blocks
operator|.
name|length
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|!=
name|block_pos
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|key
operator|<
name|block_pos
argument_list|)
expr_stmt|;
name|int
name|oldSize
init|=
name|blocks
operator|.
name|size
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|blocks
operator|.
name|setSize
argument_list|(
name|n
argument_list|,
name|block_pos
operator|-
name|key
argument_list|)
expr_stmt|;
name|size
operator|+=
name|oldSize
operator|-
operator|(
name|block_pos
operator|-
name|key
operator|)
expr_stmt|;
block|}
name|int
name|b
init|=
name|blocks
operator|.
name|insert_single
argument_list|(
name|block_pos
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|QTextBlockData
modifier|*
name|B
init|=
name|blocks
operator|.
name|fragment
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|B
operator|->
name|format
operator|=
name|blockFormat
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|blocks
operator|.
name|length
argument_list|()
operator|==
name|fragments
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QTextBlockGroup
modifier|*
name|group
init|=
name|qobject_cast
argument_list|<
name|QTextBlockGroup
operator|*
argument_list|>
argument_list|(
name|objectForFormat
argument_list|(
name|blockFormat
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
condition|)
name|group
operator|->
name|blockInserted
argument_list|(
name|QTextBlock
argument_list|(
name|this
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|QTextFrame
modifier|*
name|frame
init|=
name|qobject_cast
argument_list|<
name|QTextFrame
operator|*
argument_list|>
argument_list|(
name|objectForFormat
argument_list|(
name|formats
operator|.
name|format
argument_list|(
name|format
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|frame
condition|)
block|{
name|frame
operator|->
name|d_func
argument_list|()
operator|->
name|fragmentAdded
argument_list|(
name|text
operator|.
name|at
argument_list|(
name|strPos
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|framesDirty
operator|=
literal|true
expr_stmt|;
block|}
name|adjustDocumentChangesAndCursors
argument_list|(
name|pos
argument_list|,
literal|1
argument_list|,
name|op
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
end_function
begin_function
DECL|function|insertBlock
name|int
name|QTextDocumentPrivate
operator|::
name|insertBlock
parameter_list|(
specifier|const
name|QChar
modifier|&
name|blockSeparator
parameter_list|,
name|int
name|pos
parameter_list|,
name|int
name|blockFormat
parameter_list|,
name|int
name|charFormat
parameter_list|,
name|QTextUndoCommand
operator|::
name|Operation
name|op
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|formats
operator|.
name|format
argument_list|(
name|blockFormat
argument_list|)
operator|.
name|isBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|formats
operator|.
name|format
argument_list|(
name|charFormat
argument_list|)
operator|.
name|isCharFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|pos
operator|>=
literal|0
operator|&&
operator|(
name|pos
operator|<
name|fragments
operator|.
name|length
argument_list|()
operator|||
operator|(
name|pos
operator|==
literal|0
operator|&&
name|fragments
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
operator|)
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|isValidBlockSeparator
argument_list|(
name|blockSeparator
argument_list|)
argument_list|)
expr_stmt|;
name|beginEditBlock
argument_list|()
expr_stmt|;
name|int
name|strPos
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|text
operator|.
name|append
argument_list|(
name|blockSeparator
argument_list|)
expr_stmt|;
name|int
name|ob
init|=
name|blocks
operator|.
name|findNode
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|bool
name|atBlockEnd
init|=
literal|true
decl_stmt|;
name|bool
name|atBlockStart
init|=
literal|true
decl_stmt|;
name|int
name|oldRevision
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ob
condition|)
block|{
name|atBlockEnd
operator|=
operator|(
name|pos
operator|-
name|blocks
operator|.
name|position
argument_list|(
name|ob
argument_list|)
operator|==
name|blocks
operator|.
name|size
argument_list|(
name|ob
argument_list|)
operator|-
literal|1
operator|)
expr_stmt|;
name|atBlockStart
operator|=
operator|(
operator|(
name|int
operator|)
name|blocks
operator|.
name|position
argument_list|(
name|ob
argument_list|)
operator|==
name|pos
operator|)
expr_stmt|;
name|oldRevision
operator|=
name|blocks
operator|.
name|fragment
argument_list|(
name|ob
argument_list|)
operator|->
name|revision
expr_stmt|;
block|}
specifier|const
name|int
name|fragment
init|=
name|insert_block
argument_list|(
name|pos
argument_list|,
name|strPos
argument_list|,
name|charFormat
argument_list|,
name|blockFormat
argument_list|,
name|op
argument_list|,
name|QTextUndoCommand
operator|::
name|BlockRemoved
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|blocks
operator|.
name|length
argument_list|()
operator|==
name|fragments
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|b
init|=
name|blocks
operator|.
name|findNode
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|QTextBlockData
modifier|*
name|B
init|=
name|blocks
operator|.
name|fragment
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|QT_INIT_TEXTUNDOCOMMAND
argument_list|(
name|c
argument_list|,
name|QTextUndoCommand
operator|::
name|BlockInserted
argument_list|,
operator|(
name|editBlock
operator|!=
literal|0
operator|)
argument_list|,
name|op
argument_list|,
name|charFormat
argument_list|,
name|strPos
argument_list|,
name|pos
argument_list|,
name|blockFormat
argument_list|,
name|B
operator|->
name|revision
argument_list|)
expr_stmt|;
name|appendUndoItem
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|undoState
operator|==
name|undoStack
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// update revision numbers of the modified blocks.
name|B
operator|->
name|revision
operator|=
operator|(
name|atBlockEnd
operator|&&
operator|!
name|atBlockStart
operator|)
condition|?
name|oldRevision
else|:
name|revision
expr_stmt|;
name|b
operator|=
name|blocks
operator|.
name|next
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
condition|)
block|{
name|B
operator|=
name|blocks
operator|.
name|fragment
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|B
operator|->
name|revision
operator|=
name|atBlockStart
condition|?
name|oldRevision
else|:
name|revision
expr_stmt|;
block|}
if|if
condition|(
name|formats
operator|.
name|charFormat
argument_list|(
name|charFormat
argument_list|)
operator|.
name|objectIndex
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|needsEnsureMaximumBlockCount
operator|=
literal|true
expr_stmt|;
name|endEditBlock
argument_list|()
expr_stmt|;
return|return
name|fragment
return|;
block|}
end_function
begin_function
DECL|function|insertBlock
name|int
name|QTextDocumentPrivate
operator|::
name|insertBlock
parameter_list|(
name|int
name|pos
parameter_list|,
name|int
name|blockFormat
parameter_list|,
name|int
name|charFormat
parameter_list|,
name|QTextUndoCommand
operator|::
name|Operation
name|op
parameter_list|)
block|{
return|return
name|insertBlock
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|,
name|pos
argument_list|,
name|blockFormat
argument_list|,
name|charFormat
argument_list|,
name|op
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|insert
name|void
name|QTextDocumentPrivate
operator|::
name|insert
parameter_list|(
name|int
name|pos
parameter_list|,
name|int
name|strPos
parameter_list|,
name|int
name|strLength
parameter_list|,
name|int
name|format
parameter_list|)
block|{
if|if
condition|(
name|strLength
operator|<=
literal|0
condition|)
return|return;
name|Q_ASSERT
argument_list|(
name|pos
operator|>=
literal|0
operator|&&
name|pos
operator|<
name|fragments
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|formats
operator|.
name|format
argument_list|(
name|format
argument_list|)
operator|.
name|isCharFormat
argument_list|()
argument_list|)
expr_stmt|;
name|insert_string
argument_list|(
name|pos
argument_list|,
name|strPos
argument_list|,
name|strLength
argument_list|,
name|format
argument_list|,
name|QTextUndoCommand
operator|::
name|MoveCursor
argument_list|)
expr_stmt|;
if|if
condition|(
name|undoEnabled
condition|)
block|{
name|int
name|b
init|=
name|blocks
operator|.
name|findNode
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|QTextBlockData
modifier|*
name|B
init|=
name|blocks
operator|.
name|fragment
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|QT_INIT_TEXTUNDOCOMMAND
argument_list|(
name|c
argument_list|,
name|QTextUndoCommand
operator|::
name|Inserted
argument_list|,
operator|(
name|editBlock
operator|!=
literal|0
operator|)
argument_list|,
name|QTextUndoCommand
operator|::
name|MoveCursor
argument_list|,
name|format
argument_list|,
name|strPos
argument_list|,
name|pos
argument_list|,
name|strLength
argument_list|,
name|B
operator|->
name|revision
argument_list|)
expr_stmt|;
name|appendUndoItem
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|B
operator|->
name|revision
operator|=
name|revision
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|undoState
operator|==
name|undoStack
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|finishEdit
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insert
name|void
name|QTextDocumentPrivate
operator|::
name|insert
parameter_list|(
name|int
name|pos
parameter_list|,
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|int
name|format
parameter_list|)
block|{
if|if
condition|(
name|str
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|Q_ASSERT
argument_list|(
name|noBlockInString
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|strPos
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|text
operator|.
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|pos
argument_list|,
name|strPos
argument_list|,
name|str
operator|.
name|length
argument_list|()
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remove_string
name|int
name|QTextDocumentPrivate
operator|::
name|remove_string
parameter_list|(
name|int
name|pos
parameter_list|,
name|uint
name|length
parameter_list|,
name|QTextUndoCommand
operator|::
name|Operation
name|op
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|pos
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|blocks
operator|.
name|length
argument_list|()
operator|==
name|fragments
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|blocks
operator|.
name|length
argument_list|()
operator|>=
name|pos
operator|+
operator|(
name|int
operator|)
name|length
argument_list|)
expr_stmt|;
name|int
name|b
init|=
name|blocks
operator|.
name|findNode
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|uint
name|x
init|=
name|fragments
operator|.
name|findNode
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|blocks
operator|.
name|size
argument_list|(
name|b
argument_list|)
operator|>
name|length
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|x
operator|&&
name|fragments
operator|.
name|position
argument_list|(
name|x
argument_list|)
operator|==
operator|(
name|uint
operator|)
name|pos
operator|&&
name|fragments
operator|.
name|size
argument_list|(
name|x
argument_list|)
operator|==
name|length
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|noBlockInString
argument_list|(
name|text
operator|.
name|mid
argument_list|(
name|fragments
operator|.
name|fragment
argument_list|(
name|x
argument_list|)
operator|->
name|stringPosition
argument_list|,
name|length
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|blocks
operator|.
name|setSize
argument_list|(
name|b
argument_list|,
name|blocks
operator|.
name|size
argument_list|(
name|b
argument_list|)
operator|-
name|length
argument_list|)
expr_stmt|;
name|QTextFrame
modifier|*
name|frame
init|=
name|qobject_cast
argument_list|<
name|QTextFrame
operator|*
argument_list|>
argument_list|(
name|objectForFormat
argument_list|(
name|fragments
operator|.
name|fragment
argument_list|(
name|x
argument_list|)
operator|->
name|format
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|frame
condition|)
block|{
name|frame
operator|->
name|d_func
argument_list|()
operator|->
name|fragmentRemoved
argument_list|(
name|text
operator|.
name|at
argument_list|(
name|fragments
operator|.
name|fragment
argument_list|(
name|x
argument_list|)
operator|->
name|stringPosition
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|framesDirty
operator|=
literal|true
expr_stmt|;
block|}
specifier|const
name|int
name|w
init|=
name|fragments
operator|.
name|erase_single
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|undoEnabled
condition|)
name|unreachableCharacterCount
operator|+=
name|length
expr_stmt|;
name|adjustDocumentChangesAndCursors
argument_list|(
name|pos
argument_list|,
operator|-
name|int
argument_list|(
name|length
argument_list|)
argument_list|,
name|op
argument_list|)
expr_stmt|;
return|return
name|w
return|;
block|}
end_function
begin_function
DECL|function|remove_block
name|int
name|QTextDocumentPrivate
operator|::
name|remove_block
parameter_list|(
name|int
name|pos
parameter_list|,
name|int
modifier|*
name|blockFormat
parameter_list|,
name|int
name|command
parameter_list|,
name|QTextUndoCommand
operator|::
name|Operation
name|op
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|pos
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|blocks
operator|.
name|length
argument_list|()
operator|==
name|fragments
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|blocks
operator|.
name|length
argument_list|()
operator|>
name|pos
argument_list|)
expr_stmt|;
name|int
name|b
init|=
name|blocks
operator|.
name|findNode
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|uint
name|x
init|=
name|fragments
operator|.
name|findNode
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|x
operator|&&
operator|(
name|int
operator|)
name|fragments
operator|.
name|position
argument_list|(
name|x
argument_list|)
operator|==
name|pos
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|fragments
operator|.
name|size
argument_list|(
name|x
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|isValidBlockSeparator
argument_list|(
name|text
operator|.
name|at
argument_list|(
name|fragments
operator|.
name|fragment
argument_list|(
name|x
argument_list|)
operator|->
name|stringPosition
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|blocks
operator|.
name|size
argument_list|(
name|b
argument_list|)
operator|==
literal|1
operator|&&
name|command
operator|==
name|QTextUndoCommand
operator|::
name|BlockAdded
condition|)
block|{
name|Q_ASSERT
argument_list|(
operator|(
name|int
operator|)
name|blocks
operator|.
name|position
argument_list|(
name|b
argument_list|)
operator|==
name|pos
argument_list|)
expr_stmt|;
comment|//  	qDebug("removing empty block");
comment|// empty block remove the block itself
block|}
else|else
block|{
comment|// non empty block, merge with next one into this block
comment|//  	qDebug("merging block with next");
name|int
name|n
init|=
name|blocks
operator|.
name|next
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
operator|(
name|int
operator|)
name|blocks
operator|.
name|position
argument_list|(
name|n
argument_list|)
operator|==
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
name|blocks
operator|.
name|setSize
argument_list|(
name|b
argument_list|,
name|blocks
operator|.
name|size
argument_list|(
name|b
argument_list|)
operator|+
name|blocks
operator|.
name|size
argument_list|(
name|n
argument_list|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|b
operator|=
name|n
expr_stmt|;
block|}
operator|*
name|blockFormat
operator|=
name|blocks
operator|.
name|fragment
argument_list|(
name|b
argument_list|)
operator|->
name|format
expr_stmt|;
name|QTextBlockGroup
modifier|*
name|group
init|=
name|qobject_cast
argument_list|<
name|QTextBlockGroup
operator|*
argument_list|>
argument_list|(
name|objectForFormat
argument_list|(
name|blocks
operator|.
name|fragment
argument_list|(
name|b
argument_list|)
operator|->
name|format
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
condition|)
name|group
operator|->
name|blockRemoved
argument_list|(
name|QTextBlock
argument_list|(
name|this
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|QTextFrame
modifier|*
name|frame
init|=
name|qobject_cast
argument_list|<
name|QTextFrame
operator|*
argument_list|>
argument_list|(
name|objectForFormat
argument_list|(
name|fragments
operator|.
name|fragment
argument_list|(
name|x
argument_list|)
operator|->
name|format
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|frame
condition|)
block|{
name|frame
operator|->
name|d_func
argument_list|()
operator|->
name|fragmentRemoved
argument_list|(
name|text
operator|.
name|at
argument_list|(
name|fragments
operator|.
name|fragment
argument_list|(
name|x
argument_list|)
operator|->
name|stringPosition
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|framesDirty
operator|=
literal|true
expr_stmt|;
block|}
name|blocks
operator|.
name|erase_single
argument_list|(
name|b
argument_list|)
expr_stmt|;
specifier|const
name|int
name|w
init|=
name|fragments
operator|.
name|erase_single
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|adjustDocumentChangesAndCursors
argument_list|(
name|pos
argument_list|,
operator|-
literal|1
argument_list|,
name|op
argument_list|)
expr_stmt|;
return|return
name|w
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DEBUG
argument_list|)
end_if
begin_function
DECL|function|isAncestorFrame
specifier|static
name|bool
name|isAncestorFrame
parameter_list|(
name|QTextFrame
modifier|*
name|possibleAncestor
parameter_list|,
name|QTextFrame
modifier|*
name|child
parameter_list|)
block|{
while|while
condition|(
name|child
condition|)
block|{
if|if
condition|(
name|child
operator|==
name|possibleAncestor
condition|)
return|return
literal|true
return|;
name|child
operator|=
name|child
operator|->
name|parentFrame
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|move
name|void
name|QTextDocumentPrivate
operator|::
name|move
parameter_list|(
name|int
name|pos
parameter_list|,
name|int
name|to
parameter_list|,
name|int
name|length
parameter_list|,
name|QTextUndoCommand
operator|::
name|Operation
name|op
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|to
operator|<=
name|fragments
operator|.
name|length
argument_list|()
operator|&&
name|to
operator|<=
name|pos
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|pos
operator|>=
literal|0
operator|&&
name|pos
operator|+
name|length
operator|<=
name|fragments
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|blocks
operator|.
name|length
argument_list|()
operator|==
name|fragments
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|==
name|to
condition|)
return|return;
specifier|const
name|bool
name|needsInsert
init|=
name|to
operator|!=
operator|-
literal|1
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DEBUG
argument_list|)
specifier|const
name|bool
name|startAndEndInSameFrame
init|=
operator|(
name|frameAt
argument_list|(
name|pos
argument_list|)
operator|==
name|frameAt
argument_list|(
name|pos
operator|+
name|length
operator|-
literal|1
argument_list|)
operator|)
decl_stmt|;
specifier|const
name|bool
name|endIsEndOfChildFrame
init|=
operator|(
name|isAncestorFrame
argument_list|(
name|frameAt
argument_list|(
name|pos
argument_list|)
argument_list|,
name|frameAt
argument_list|(
name|pos
operator|+
name|length
operator|-
literal|1
argument_list|)
argument_list|)
operator|&&
name|text
operator|.
name|at
argument_list|(
name|find
argument_list|(
name|pos
operator|+
name|length
operator|-
literal|1
argument_list|)
operator|->
name|stringPosition
argument_list|)
operator|==
name|QTextEndOfFrame
operator|)
decl_stmt|;
specifier|const
name|bool
name|startIsStartOfFrameAndEndIsEndOfFrameWithCommonParent
init|=
operator|(
name|text
operator|.
name|at
argument_list|(
name|find
argument_list|(
name|pos
argument_list|)
operator|->
name|stringPosition
argument_list|)
operator|==
name|QTextBeginningOfFrame
operator|&&
name|text
operator|.
name|at
argument_list|(
name|find
argument_list|(
name|pos
operator|+
name|length
operator|-
literal|1
argument_list|)
operator|->
name|stringPosition
argument_list|)
operator|==
name|QTextEndOfFrame
operator|&&
name|frameAt
argument_list|(
name|pos
argument_list|)
operator|->
name|parentFrame
argument_list|()
operator|==
name|frameAt
argument_list|(
name|pos
operator|+
name|length
operator|-
literal|1
argument_list|)
operator|->
name|parentFrame
argument_list|()
operator|)
decl_stmt|;
specifier|const
name|bool
name|isFirstTableCell
init|=
operator|(
name|qobject_cast
argument_list|<
name|QTextTable
operator|*
argument_list|>
argument_list|(
name|frameAt
argument_list|(
name|pos
operator|+
name|length
operator|-
literal|1
argument_list|)
argument_list|)
operator|&&
name|frameAt
argument_list|(
name|pos
operator|+
name|length
operator|-
literal|1
argument_list|)
operator|->
name|parentFrame
argument_list|()
operator|==
name|frameAt
argument_list|(
name|pos
argument_list|)
operator|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|startAndEndInSameFrame
operator|||
name|endIsEndOfChildFrame
operator|||
name|startIsStartOfFrameAndEndIsEndOfFrameWithCommonParent
operator|||
name|isFirstTableCell
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|split
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|split
argument_list|(
name|pos
operator|+
name|length
argument_list|)
expr_stmt|;
name|uint
name|dst
init|=
name|needsInsert
condition|?
name|fragments
operator|.
name|findNode
argument_list|(
name|to
argument_list|)
else|:
literal|0
decl_stmt|;
name|uint
name|dstKey
init|=
name|needsInsert
condition|?
name|fragments
operator|.
name|position
argument_list|(
name|dst
argument_list|)
else|:
literal|0
decl_stmt|;
name|uint
name|x
init|=
name|fragments
operator|.
name|findNode
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|uint
name|end
init|=
name|fragments
operator|.
name|findNode
argument_list|(
name|pos
operator|+
name|length
argument_list|)
decl_stmt|;
name|uint
name|w
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|x
operator|!=
name|end
condition|)
block|{
name|uint
name|n
init|=
name|fragments
operator|.
name|next
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|uint
name|key
init|=
name|fragments
operator|.
name|position
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|uint
name|b
init|=
name|blocks
operator|.
name|findNode
argument_list|(
name|key
operator|+
literal|1
argument_list|)
decl_stmt|;
name|QTextBlockData
modifier|*
name|B
init|=
name|blocks
operator|.
name|fragment
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|int
name|blockRevision
init|=
name|B
operator|->
name|revision
decl_stmt|;
name|QTextFragmentData
modifier|*
name|X
init|=
name|fragments
operator|.
name|fragment
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|QT_INIT_TEXTUNDOCOMMAND
argument_list|(
name|c
argument_list|,
name|QTextUndoCommand
operator|::
name|Removed
argument_list|,
operator|(
name|editBlock
operator|!=
literal|0
operator|)
argument_list|,
name|op
argument_list|,
name|X
operator|->
name|format
argument_list|,
name|X
operator|->
name|stringPosition
argument_list|,
name|key
argument_list|,
name|X
operator|->
name|size_array
index|[
literal|0
index|]
argument_list|,
name|blockRevision
argument_list|)
expr_stmt|;
name|QT_INIT_TEXTUNDOCOMMAND
argument_list|(
name|cInsert
argument_list|,
name|QTextUndoCommand
operator|::
name|Inserted
argument_list|,
operator|(
name|editBlock
operator|!=
literal|0
operator|)
argument_list|,
name|op
argument_list|,
name|X
operator|->
name|format
argument_list|,
name|X
operator|->
name|stringPosition
argument_list|,
name|dstKey
argument_list|,
name|X
operator|->
name|size_array
index|[
literal|0
index|]
argument_list|,
name|blockRevision
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|+
literal|1
operator|!=
name|blocks
operator|.
name|position
argument_list|(
name|b
argument_list|)
condition|)
block|{
comment|//	    qDebug("remove_string from %d length %d", key, X->size_array[0]);
name|Q_ASSERT
argument_list|(
name|noBlockInString
argument_list|(
name|text
operator|.
name|mid
argument_list|(
name|X
operator|->
name|stringPosition
argument_list|,
name|X
operator|->
name|size_array
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|=
name|remove_string
argument_list|(
name|key
argument_list|,
name|X
operator|->
name|size_array
index|[
literal|0
index|]
argument_list|,
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsInsert
condition|)
block|{
name|insert_string
argument_list|(
name|dstKey
argument_list|,
name|X
operator|->
name|stringPosition
argument_list|,
name|X
operator|->
name|size_array
index|[
literal|0
index|]
argument_list|,
name|X
operator|->
name|format
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|dstKey
operator|+=
name|X
operator|->
name|size_array
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//	    qDebug("remove_block at %d", key);
name|Q_ASSERT
argument_list|(
name|X
operator|->
name|size_array
index|[
literal|0
index|]
operator|==
literal|1
operator|&&
name|isValidBlockSeparator
argument_list|(
name|text
operator|.
name|at
argument_list|(
name|X
operator|->
name|stringPosition
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|=
name|blocks
operator|.
name|previous
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|B
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|command
operator|=
name|blocks
operator|.
name|size
argument_list|(
name|b
argument_list|)
operator|==
literal|1
condition|?
name|QTextUndoCommand
operator|::
name|BlockDeleted
else|:
name|QTextUndoCommand
operator|::
name|BlockRemoved
expr_stmt|;
name|w
operator|=
name|remove_block
argument_list|(
name|key
argument_list|,
operator|&
name|c
operator|.
name|blockFormat
argument_list|,
name|QTextUndoCommand
operator|::
name|BlockAdded
argument_list|,
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsInsert
condition|)
block|{
name|insert_block
argument_list|(
name|dstKey
operator|++
argument_list|,
name|X
operator|->
name|stringPosition
argument_list|,
name|X
operator|->
name|format
argument_list|,
name|c
operator|.
name|blockFormat
argument_list|,
name|op
argument_list|,
name|QTextUndoCommand
operator|::
name|BlockRemoved
argument_list|)
expr_stmt|;
name|cInsert
operator|.
name|command
operator|=
name|blocks
operator|.
name|size
argument_list|(
name|b
argument_list|)
operator|==
literal|1
condition|?
name|QTextUndoCommand
operator|::
name|BlockAdded
else|:
name|QTextUndoCommand
operator|::
name|BlockInserted
expr_stmt|;
name|cInsert
operator|.
name|blockFormat
operator|=
name|c
operator|.
name|blockFormat
expr_stmt|;
block|}
block|}
name|appendUndoItem
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|B
condition|)
name|B
operator|->
name|revision
operator|=
name|revision
expr_stmt|;
name|x
operator|=
name|n
expr_stmt|;
if|if
condition|(
name|needsInsert
condition|)
name|appendUndoItem
argument_list|(
name|cInsert
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|w
condition|)
name|unite
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|blocks
operator|.
name|length
argument_list|()
operator|==
name|fragments
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|blockCursorAdjustment
condition|)
name|finishEdit
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remove
name|void
name|QTextDocumentPrivate
operator|::
name|remove
parameter_list|(
name|int
name|pos
parameter_list|,
name|int
name|length
parameter_list|,
name|QTextUndoCommand
operator|::
name|Operation
name|op
parameter_list|)
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
return|return;
name|blockCursorAdjustment
operator|=
literal|true
expr_stmt|;
name|move
argument_list|(
name|pos
argument_list|,
operator|-
literal|1
argument_list|,
name|length
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|blockCursorAdjustment
operator|=
literal|false
expr_stmt|;
foreach|foreach
control|(
name|QTextCursorPrivate
modifier|*
name|curs
decl|,
name|cursors
control|)
block|{
if|if
condition|(
name|curs
operator|->
name|adjustPosition
argument_list|(
name|pos
argument_list|,
operator|-
name|length
argument_list|,
name|op
argument_list|)
operator|==
name|QTextCursorPrivate
operator|::
name|CursorMoved
condition|)
block|{
name|curs
operator|->
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|finishEdit
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCharFormat
name|void
name|QTextDocumentPrivate
operator|::
name|setCharFormat
parameter_list|(
name|int
name|pos
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|QTextCharFormat
modifier|&
name|newFormat
parameter_list|,
name|FormatChangeMode
name|mode
parameter_list|)
block|{
name|beginEditBlock
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|newFormat
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|newFormatIdx
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|SetFormatAndPreserveObjectIndices
condition|)
block|{
name|QTextCharFormat
name|cleanFormat
init|=
name|newFormat
decl_stmt|;
name|cleanFormat
operator|.
name|clearProperty
argument_list|(
name|QTextFormat
operator|::
name|ObjectIndex
argument_list|)
expr_stmt|;
name|newFormatIdx
operator|=
name|formats
operator|.
name|indexForFormat
argument_list|(
name|cleanFormat
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|SetFormat
condition|)
block|{
name|newFormatIdx
operator|=
name|formats
operator|.
name|indexForFormat
argument_list|(
name|newFormat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|MergeFormat
condition|)
block|{
name|QTextFormat
name|format
init|=
name|formats
operator|.
name|format
argument_list|(
name|initialBlockCharFormatIndex
argument_list|)
decl_stmt|;
name|format
operator|.
name|merge
argument_list|(
name|newFormat
argument_list|)
expr_stmt|;
name|initialBlockCharFormatIndex
operator|=
name|formats
operator|.
name|indexForFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|SetFormatAndPreserveObjectIndices
operator|&&
name|formats
operator|.
name|format
argument_list|(
name|initialBlockCharFormatIndex
argument_list|)
operator|.
name|objectIndex
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|QTextCharFormat
name|f
init|=
name|newFormat
decl_stmt|;
name|f
operator|.
name|setObjectIndex
argument_list|(
name|formats
operator|.
name|format
argument_list|(
name|initialBlockCharFormatIndex
argument_list|)
operator|.
name|objectIndex
argument_list|()
argument_list|)
expr_stmt|;
name|initialBlockCharFormatIndex
operator|=
name|formats
operator|.
name|indexForFormat
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|initialBlockCharFormatIndex
operator|=
name|newFormatIdx
expr_stmt|;
block|}
operator|++
name|pos
expr_stmt|;
operator|--
name|length
expr_stmt|;
block|}
specifier|const
name|int
name|startPos
init|=
name|pos
decl_stmt|;
specifier|const
name|int
name|endPos
init|=
name|pos
operator|+
name|length
decl_stmt|;
name|split
argument_list|(
name|startPos
argument_list|)
expr_stmt|;
name|split
argument_list|(
name|endPos
argument_list|)
expr_stmt|;
while|while
condition|(
name|pos
operator|<
name|endPos
condition|)
block|{
name|FragmentMap
operator|::
name|Iterator
name|it
init|=
name|fragments
operator|.
name|find
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|it
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QTextFragmentData
modifier|*
name|fragment
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|formats
operator|.
name|format
argument_list|(
name|fragment
operator|->
name|format
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QTextFormat
operator|::
name|CharFormat
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
name|pos
operator|-
name|it
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|qMin
argument_list|(
name|endPos
operator|-
name|pos
argument_list|,
name|int
argument_list|(
name|fragment
operator|->
name|size_array
index|[
literal|0
index|]
operator|-
name|offset
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|oldFormat
init|=
name|fragment
operator|->
name|format
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|MergeFormat
condition|)
block|{
name|QTextFormat
name|format
init|=
name|formats
operator|.
name|format
argument_list|(
name|fragment
operator|->
name|format
argument_list|)
decl_stmt|;
name|format
operator|.
name|merge
argument_list|(
name|newFormat
argument_list|)
expr_stmt|;
name|fragment
operator|->
name|format
operator|=
name|formats
operator|.
name|indexForFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|SetFormatAndPreserveObjectIndices
operator|&&
name|formats
operator|.
name|format
argument_list|(
name|oldFormat
argument_list|)
operator|.
name|objectIndex
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|QTextCharFormat
name|f
init|=
name|newFormat
decl_stmt|;
name|f
operator|.
name|setObjectIndex
argument_list|(
name|formats
operator|.
name|format
argument_list|(
name|oldFormat
argument_list|)
operator|.
name|objectIndex
argument_list|()
argument_list|)
expr_stmt|;
name|fragment
operator|->
name|format
operator|=
name|formats
operator|.
name|indexForFormat
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fragment
operator|->
name|format
operator|=
name|newFormatIdx
expr_stmt|;
block|}
name|QT_INIT_TEXTUNDOCOMMAND
argument_list|(
name|c
argument_list|,
name|QTextUndoCommand
operator|::
name|CharFormatChanged
argument_list|,
literal|true
argument_list|,
name|QTextUndoCommand
operator|::
name|MoveCursor
argument_list|,
name|oldFormat
argument_list|,
literal|0
argument_list|,
name|pos
argument_list|,
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|appendUndoItem
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|length
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|pos
operator|==
call|(
name|int
call|)
argument_list|(
name|it
operator|.
name|position
argument_list|()
operator|+
name|fragment
operator|->
name|size_array
index|[
literal|0
index|]
argument_list|)
operator|||
name|pos
operator|>=
name|endPos
argument_list|)
expr_stmt|;
block|}
name|int
name|n
init|=
name|fragments
operator|.
name|findNode
argument_list|(
name|startPos
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
condition|)
name|unite
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|n
operator|=
name|fragments
operator|.
name|findNode
argument_list|(
name|endPos
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
condition|)
name|unite
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|QTextBlock
name|blockIt
init|=
name|blocksFind
argument_list|(
name|startPos
argument_list|)
decl_stmt|;
name|QTextBlock
name|endIt
init|=
name|blocksFind
argument_list|(
name|endPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|endIt
operator|.
name|isValid
argument_list|()
condition|)
name|endIt
operator|=
name|endIt
operator|.
name|next
argument_list|()
expr_stmt|;
for|for
control|(
init|;
name|blockIt
operator|.
name|isValid
argument_list|()
operator|&&
name|blockIt
operator|!=
name|endIt
condition|;
name|blockIt
operator|=
name|blockIt
operator|.
name|next
argument_list|()
control|)
name|QTextDocumentPrivate
operator|::
name|block
argument_list|(
name|blockIt
argument_list|)
operator|->
name|invalidate
argument_list|()
expr_stmt|;
name|documentChange
argument_list|(
name|startPos
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|endEditBlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setBlockFormat
name|void
name|QTextDocumentPrivate
operator|::
name|setBlockFormat
parameter_list|(
specifier|const
name|QTextBlock
modifier|&
name|from
parameter_list|,
specifier|const
name|QTextBlock
modifier|&
name|to
parameter_list|,
specifier|const
name|QTextBlockFormat
modifier|&
name|newFormat
parameter_list|,
name|FormatChangeMode
name|mode
parameter_list|)
block|{
name|beginEditBlock
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|mode
operator|!=
name|SetFormatAndPreserveObjectIndices
argument_list|)
expr_stmt|;
comment|// only implemented for setCharFormat
name|Q_ASSERT
argument_list|(
name|newFormat
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|newFormatIdx
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|SetFormat
condition|)
name|newFormatIdx
operator|=
name|formats
operator|.
name|indexForFormat
argument_list|(
name|newFormat
argument_list|)
expr_stmt|;
name|QTextBlockGroup
modifier|*
name|group
init|=
name|qobject_cast
argument_list|<
name|QTextBlockGroup
operator|*
argument_list|>
argument_list|(
name|objectForFormat
argument_list|(
name|newFormat
argument_list|)
argument_list|)
decl_stmt|;
name|QTextBlock
name|it
init|=
name|from
decl_stmt|;
name|QTextBlock
name|end
init|=
name|to
decl_stmt|;
if|if
condition|(
name|end
operator|.
name|isValid
argument_list|()
condition|)
name|end
operator|=
name|end
operator|.
name|next
argument_list|()
expr_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
name|it
operator|=
name|it
operator|.
name|next
argument_list|()
control|)
block|{
name|int
name|oldFormat
init|=
name|block
argument_list|(
name|it
argument_list|)
operator|->
name|format
decl_stmt|;
name|QTextBlockFormat
name|format
init|=
name|formats
operator|.
name|blockFormat
argument_list|(
name|oldFormat
argument_list|)
decl_stmt|;
name|QTextBlockGroup
modifier|*
name|oldGroup
init|=
name|qobject_cast
argument_list|<
name|QTextBlockGroup
operator|*
argument_list|>
argument_list|(
name|objectForFormat
argument_list|(
name|format
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|MergeFormat
condition|)
block|{
name|format
operator|.
name|merge
argument_list|(
name|newFormat
argument_list|)
expr_stmt|;
name|newFormatIdx
operator|=
name|formats
operator|.
name|indexForFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|group
operator|=
name|qobject_cast
argument_list|<
name|QTextBlockGroup
operator|*
argument_list|>
argument_list|(
name|objectForFormat
argument_list|(
name|format
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|block
argument_list|(
name|it
argument_list|)
operator|->
name|format
operator|=
name|newFormatIdx
expr_stmt|;
name|block
argument_list|(
name|it
argument_list|)
operator|->
name|invalidate
argument_list|()
expr_stmt|;
name|QT_INIT_TEXTUNDOCOMMAND
argument_list|(
name|c
argument_list|,
name|QTextUndoCommand
operator|::
name|BlockFormatChanged
argument_list|,
literal|true
argument_list|,
name|QTextUndoCommand
operator|::
name|MoveCursor
argument_list|,
name|oldFormat
argument_list|,
literal|0
argument_list|,
name|it
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|appendUndoItem
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|!=
name|oldGroup
condition|)
block|{
if|if
condition|(
name|oldGroup
condition|)
name|oldGroup
operator|->
name|blockRemoved
argument_list|(
name|it
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
condition|)
name|group
operator|->
name|blockInserted
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|group
condition|)
block|{
name|group
operator|->
name|blockFormatChanged
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
block|}
name|documentChange
argument_list|(
name|from
operator|.
name|position
argument_list|()
argument_list|,
name|to
operator|.
name|position
argument_list|()
operator|+
name|to
operator|.
name|length
argument_list|()
operator|-
name|from
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|endEditBlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|split
name|bool
name|QTextDocumentPrivate
operator|::
name|split
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|uint
name|x
init|=
name|fragments
operator|.
name|findNode
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
condition|)
block|{
name|int
name|k
init|=
name|fragments
operator|.
name|position
argument_list|(
name|x
argument_list|)
decl_stmt|;
comment|//          qDebug("found fragment with key %d, size_left=%d, size=%d to split at %d",
comment|//                k, (*it)->size_left[0], (*it)->size_array[0], pos);
if|if
condition|(
name|k
operator|!=
name|pos
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|k
operator|<=
name|pos
argument_list|)
expr_stmt|;
comment|// need to resize the first fragment and add a new one
name|QTextFragmentData
modifier|*
name|X
init|=
name|fragments
operator|.
name|fragment
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|int
name|oldsize
init|=
name|X
operator|->
name|size_array
index|[
literal|0
index|]
decl_stmt|;
name|fragments
operator|.
name|setSize
argument_list|(
name|x
argument_list|,
name|pos
operator|-
name|k
argument_list|)
expr_stmt|;
name|uint
name|n
init|=
name|fragments
operator|.
name|insert_single
argument_list|(
name|pos
argument_list|,
name|oldsize
operator|-
operator|(
name|pos
operator|-
name|k
operator|)
argument_list|)
decl_stmt|;
name|X
operator|=
name|fragments
operator|.
name|fragment
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|QTextFragmentData
modifier|*
name|N
init|=
name|fragments
operator|.
name|fragment
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|N
operator|->
name|stringPosition
operator|=
name|X
operator|->
name|stringPosition
operator|+
name|pos
operator|-
name|k
expr_stmt|;
name|N
operator|->
name|format
operator|=
name|X
operator|->
name|format
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|unite
name|bool
name|QTextDocumentPrivate
operator|::
name|unite
parameter_list|(
name|uint
name|f
parameter_list|)
block|{
name|uint
name|n
init|=
name|fragments
operator|.
name|next
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|n
condition|)
return|return
literal|false
return|;
name|QTextFragmentData
modifier|*
name|ff
init|=
name|fragments
operator|.
name|fragment
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|QTextFragmentData
modifier|*
name|nf
init|=
name|fragments
operator|.
name|fragment
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|nf
operator|->
name|format
operator|==
name|ff
operator|->
name|format
operator|&&
operator|(
name|ff
operator|->
name|stringPosition
operator|+
operator|(
name|int
operator|)
name|ff
operator|->
name|size_array
index|[
literal|0
index|]
operator|==
name|nf
operator|->
name|stringPosition
operator|)
condition|)
block|{
if|if
condition|(
name|isValidBlockSeparator
argument_list|(
name|text
operator|.
name|at
argument_list|(
name|ff
operator|->
name|stringPosition
argument_list|)
argument_list|)
operator|||
name|isValidBlockSeparator
argument_list|(
name|text
operator|.
name|at
argument_list|(
name|nf
operator|->
name|stringPosition
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
name|fragments
operator|.
name|setSize
argument_list|(
name|f
argument_list|,
name|ff
operator|->
name|size_array
index|[
literal|0
index|]
operator|+
name|nf
operator|->
name|size_array
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|fragments
operator|.
name|erase_single
argument_list|(
name|n
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|undoRedo
name|int
name|QTextDocumentPrivate
operator|::
name|undoRedo
parameter_list|(
name|bool
name|undo
parameter_list|)
block|{
name|PMDEBUG
argument_list|(
literal|"%s, undoState=%d, undoStack size=%d"
argument_list|,
name|undo
condition|?
literal|"undo:"
else|:
literal|"redo:"
argument_list|,
name|undoState
argument_list|,
name|undoStack
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|undoEnabled
operator|||
operator|(
name|undo
operator|&&
name|undoState
operator|==
literal|0
operator|)
operator|||
operator|(
operator|!
name|undo
operator|&&
name|undoState
operator|==
name|undoStack
operator|.
name|size
argument_list|()
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|undoEnabled
operator|=
literal|false
expr_stmt|;
name|beginEditBlock
argument_list|()
expr_stmt|;
name|int
name|editPos
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|editLength
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
literal|1
condition|)
block|{
if|if
condition|(
name|undo
condition|)
operator|--
name|undoState
expr_stmt|;
name|QTextUndoCommand
modifier|&
name|c
init|=
name|undoStack
index|[
name|undoState
index|]
decl_stmt|;
name|int
name|resetBlockRevision
init|=
name|c
operator|.
name|pos
decl_stmt|;
switch|switch
condition|(
name|c
operator|.
name|command
condition|)
block|{
case|case
name|QTextUndoCommand
operator|::
name|Inserted
case|:
name|remove
argument_list|(
name|c
operator|.
name|pos
argument_list|,
name|c
operator|.
name|length
argument_list|,
operator|(
name|QTextUndoCommand
operator|::
name|Operation
operator|)
name|c
operator|.
name|operation
argument_list|)
expr_stmt|;
name|PMDEBUG
argument_list|(
literal|"   erase: from %d, length %d"
argument_list|,
name|c
operator|.
name|pos
argument_list|,
name|c
operator|.
name|length
argument_list|)
expr_stmt|;
name|c
operator|.
name|command
operator|=
name|QTextUndoCommand
operator|::
name|Removed
expr_stmt|;
name|editPos
operator|=
name|c
operator|.
name|pos
expr_stmt|;
name|editLength
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|QTextUndoCommand
operator|::
name|Removed
case|:
name|PMDEBUG
argument_list|(
literal|"   insert: format %d (from %d, length %d, strpos=%d)"
argument_list|,
name|c
operator|.
name|format
argument_list|,
name|c
operator|.
name|pos
argument_list|,
name|c
operator|.
name|length
argument_list|,
name|c
operator|.
name|strPos
argument_list|)
expr_stmt|;
name|insert_string
argument_list|(
name|c
operator|.
name|pos
argument_list|,
name|c
operator|.
name|strPos
argument_list|,
name|c
operator|.
name|length
argument_list|,
name|c
operator|.
name|format
argument_list|,
operator|(
name|QTextUndoCommand
operator|::
name|Operation
operator|)
name|c
operator|.
name|operation
argument_list|)
expr_stmt|;
name|c
operator|.
name|command
operator|=
name|QTextUndoCommand
operator|::
name|Inserted
expr_stmt|;
if|if
condition|(
name|editPos
operator|!=
operator|(
name|int
operator|)
name|c
operator|.
name|pos
condition|)
name|editLength
operator|=
literal|0
expr_stmt|;
name|editPos
operator|=
name|c
operator|.
name|pos
expr_stmt|;
name|editLength
operator|+=
name|c
operator|.
name|length
expr_stmt|;
break|break;
case|case
name|QTextUndoCommand
operator|::
name|BlockInserted
case|:
case|case
name|QTextUndoCommand
operator|::
name|BlockAdded
case|:
name|remove_block
argument_list|(
name|c
operator|.
name|pos
argument_list|,
operator|&
name|c
operator|.
name|blockFormat
argument_list|,
name|c
operator|.
name|command
argument_list|,
operator|(
name|QTextUndoCommand
operator|::
name|Operation
operator|)
name|c
operator|.
name|operation
argument_list|)
expr_stmt|;
name|PMDEBUG
argument_list|(
literal|"   blockremove: from %d"
argument_list|,
name|c
operator|.
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|command
operator|==
name|QTextUndoCommand
operator|::
name|BlockInserted
condition|)
name|c
operator|.
name|command
operator|=
name|QTextUndoCommand
operator|::
name|BlockRemoved
expr_stmt|;
else|else
name|c
operator|.
name|command
operator|=
name|QTextUndoCommand
operator|::
name|BlockDeleted
expr_stmt|;
name|editPos
operator|=
name|c
operator|.
name|pos
expr_stmt|;
name|editLength
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|QTextUndoCommand
operator|::
name|BlockRemoved
case|:
case|case
name|QTextUndoCommand
operator|::
name|BlockDeleted
case|:
name|PMDEBUG
argument_list|(
literal|"   blockinsert: charformat %d blockformat %d (pos %d, strpos=%d)"
argument_list|,
name|c
operator|.
name|format
argument_list|,
name|c
operator|.
name|blockFormat
argument_list|,
name|c
operator|.
name|pos
argument_list|,
name|c
operator|.
name|strPos
argument_list|)
expr_stmt|;
name|insert_block
argument_list|(
name|c
operator|.
name|pos
argument_list|,
name|c
operator|.
name|strPos
argument_list|,
name|c
operator|.
name|format
argument_list|,
name|c
operator|.
name|blockFormat
argument_list|,
operator|(
name|QTextUndoCommand
operator|::
name|Operation
operator|)
name|c
operator|.
name|operation
argument_list|,
name|c
operator|.
name|command
argument_list|)
expr_stmt|;
name|resetBlockRevision
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|command
operator|==
name|QTextUndoCommand
operator|::
name|BlockRemoved
condition|)
name|c
operator|.
name|command
operator|=
name|QTextUndoCommand
operator|::
name|BlockInserted
expr_stmt|;
else|else
name|c
operator|.
name|command
operator|=
name|QTextUndoCommand
operator|::
name|BlockAdded
expr_stmt|;
if|if
condition|(
name|editPos
operator|!=
operator|(
name|int
operator|)
name|c
operator|.
name|pos
condition|)
name|editLength
operator|=
literal|0
expr_stmt|;
name|editPos
operator|=
name|c
operator|.
name|pos
expr_stmt|;
name|editLength
operator|+=
literal|1
expr_stmt|;
break|break;
case|case
name|QTextUndoCommand
operator|::
name|CharFormatChanged
case|:
block|{
name|resetBlockRevision
operator|=
operator|-
literal|1
expr_stmt|;
comment|// ## TODO
name|PMDEBUG
argument_list|(
literal|"   charFormat: format %d (from %d, length %d)"
argument_list|,
name|c
operator|.
name|format
argument_list|,
name|c
operator|.
name|pos
argument_list|,
name|c
operator|.
name|length
argument_list|)
expr_stmt|;
name|FragmentIterator
name|it
init|=
name|find
argument_list|(
name|c
operator|.
name|pos
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|it
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|oldFormat
init|=
name|it
operator|.
name|value
argument_list|()
operator|->
name|format
decl_stmt|;
name|setCharFormat
argument_list|(
name|c
operator|.
name|pos
argument_list|,
name|c
operator|.
name|length
argument_list|,
name|formats
operator|.
name|charFormat
argument_list|(
name|c
operator|.
name|format
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|format
operator|=
name|oldFormat
expr_stmt|;
if|if
condition|(
name|editPos
operator|!=
operator|(
name|int
operator|)
name|c
operator|.
name|pos
condition|)
name|editLength
operator|=
literal|0
expr_stmt|;
name|editPos
operator|=
name|c
operator|.
name|pos
expr_stmt|;
name|editLength
operator|+=
name|c
operator|.
name|length
expr_stmt|;
break|break;
block|}
case|case
name|QTextUndoCommand
operator|::
name|BlockFormatChanged
case|:
block|{
name|resetBlockRevision
operator|=
operator|-
literal|1
expr_stmt|;
comment|// ## TODO
name|PMDEBUG
argument_list|(
literal|"   blockformat: format %d pos %d"
argument_list|,
name|c
operator|.
name|format
argument_list|,
name|c
operator|.
name|pos
argument_list|)
expr_stmt|;
name|QTextBlock
name|it
init|=
name|blocksFind
argument_list|(
name|c
operator|.
name|pos
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|it
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|oldFormat
init|=
name|block
argument_list|(
name|it
argument_list|)
operator|->
name|format
decl_stmt|;
name|block
argument_list|(
name|it
argument_list|)
operator|->
name|format
operator|=
name|c
operator|.
name|format
expr_stmt|;
name|QTextBlockGroup
modifier|*
name|oldGroup
init|=
name|qobject_cast
argument_list|<
name|QTextBlockGroup
operator|*
argument_list|>
argument_list|(
name|objectForFormat
argument_list|(
name|formats
operator|.
name|blockFormat
argument_list|(
name|oldFormat
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QTextBlockGroup
modifier|*
name|group
init|=
name|qobject_cast
argument_list|<
name|QTextBlockGroup
operator|*
argument_list|>
argument_list|(
name|objectForFormat
argument_list|(
name|formats
operator|.
name|blockFormat
argument_list|(
name|c
operator|.
name|format
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|c
operator|.
name|format
operator|=
name|oldFormat
expr_stmt|;
if|if
condition|(
name|group
operator|!=
name|oldGroup
condition|)
block|{
if|if
condition|(
name|oldGroup
condition|)
name|oldGroup
operator|->
name|blockRemoved
argument_list|(
name|it
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
condition|)
name|group
operator|->
name|blockInserted
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|group
condition|)
block|{
name|group
operator|->
name|blockFormatChanged
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
name|documentChange
argument_list|(
name|it
operator|.
name|position
argument_list|()
argument_list|,
name|it
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|editPos
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
case|case
name|QTextUndoCommand
operator|::
name|GroupFormatChange
case|:
block|{
name|resetBlockRevision
operator|=
operator|-
literal|1
expr_stmt|;
comment|// ## TODO
name|PMDEBUG
argument_list|(
literal|"   group format change"
argument_list|)
expr_stmt|;
name|QTextObject
modifier|*
name|object
init|=
name|objectForIndex
argument_list|(
name|c
operator|.
name|objectIndex
argument_list|)
decl_stmt|;
name|int
name|oldFormat
init|=
name|formats
operator|.
name|objectFormatIndex
argument_list|(
name|c
operator|.
name|objectIndex
argument_list|)
decl_stmt|;
name|changeObjectFormat
argument_list|(
name|object
argument_list|,
name|c
operator|.
name|format
argument_list|)
expr_stmt|;
name|c
operator|.
name|format
operator|=
name|oldFormat
expr_stmt|;
name|editPos
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
case|case
name|QTextUndoCommand
operator|::
name|CursorMoved
case|:
name|editPos
operator|=
name|c
operator|.
name|pos
expr_stmt|;
name|editLength
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|QTextUndoCommand
operator|::
name|Custom
case|:
name|resetBlockRevision
operator|=
operator|-
literal|1
expr_stmt|;
comment|// ## TODO
if|if
condition|(
name|undo
condition|)
name|c
operator|.
name|custom
operator|->
name|undo
argument_list|()
expr_stmt|;
else|else
name|c
operator|.
name|custom
operator|->
name|redo
argument_list|()
expr_stmt|;
name|editPos
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
default|default:
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resetBlockRevision
operator|>=
literal|0
condition|)
block|{
name|int
name|b
init|=
name|blocks
operator|.
name|findNode
argument_list|(
name|resetBlockRevision
argument_list|)
decl_stmt|;
name|QTextBlockData
modifier|*
name|B
init|=
name|blocks
operator|.
name|fragment
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|B
operator|->
name|revision
operator|=
name|c
operator|.
name|revision
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|undo
condition|)
operator|++
name|undoState
expr_stmt|;
name|bool
name|inBlock
init|=
operator|(
name|undoState
operator|>
literal|0
operator|&&
name|undoState
operator|<
name|undoStack
operator|.
name|size
argument_list|()
operator|&&
name|undoStack
index|[
name|undoState
index|]
operator|.
name|block_part
operator|&&
name|undoStack
index|[
name|undoState
operator|-
literal|1
index|]
operator|.
name|block_part
operator|&&
operator|!
name|undoStack
index|[
name|undoState
operator|-
literal|1
index|]
operator|.
name|block_end
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|inBlock
condition|)
break|break;
block|}
name|undoEnabled
operator|=
literal|true
expr_stmt|;
name|int
name|newCursorPos
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|editPos
operator|>=
literal|0
condition|)
name|newCursorPos
operator|=
name|editPos
operator|+
name|editLength
expr_stmt|;
elseif|else
if|if
condition|(
name|docChangeFrom
operator|>=
literal|0
condition|)
name|newCursorPos
operator|=
name|qMin
argument_list|(
name|docChangeFrom
operator|+
name|docChangeLength
argument_list|,
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|endEditBlock
argument_list|()
expr_stmt|;
name|emitUndoAvailable
argument_list|(
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|emitRedoAvailable
argument_list|(
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newCursorPos
return|;
block|}
end_function
begin_comment
comment|/*!     Appends a custom undo \a item to the undo stack. */
end_comment
begin_function
DECL|function|appendUndoItem
name|void
name|QTextDocumentPrivate
operator|::
name|appendUndoItem
parameter_list|(
name|QAbstractUndoItem
modifier|*
name|item
parameter_list|)
block|{
if|if
condition|(
operator|!
name|undoEnabled
condition|)
block|{
operator|delete
name|item
expr_stmt|;
return|return;
block|}
name|QTextUndoCommand
name|c
decl_stmt|;
name|c
operator|.
name|command
operator|=
name|QTextUndoCommand
operator|::
name|Custom
expr_stmt|;
name|c
operator|.
name|block_part
operator|=
name|editBlock
operator|!=
literal|0
expr_stmt|;
name|c
operator|.
name|block_end
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|operation
operator|=
name|QTextUndoCommand
operator|::
name|MoveCursor
expr_stmt|;
name|c
operator|.
name|format
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|strPos
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|pos
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|blockFormat
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|custom
operator|=
name|item
expr_stmt|;
name|appendUndoItem
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendUndoItem
name|void
name|QTextDocumentPrivate
operator|::
name|appendUndoItem
parameter_list|(
specifier|const
name|QTextUndoCommand
modifier|&
name|c
parameter_list|)
block|{
name|PMDEBUG
argument_list|(
literal|"appendUndoItem, command=%d enabled=%d"
argument_list|,
name|c
operator|.
name|command
argument_list|,
name|undoEnabled
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|undoEnabled
condition|)
return|return;
if|if
condition|(
name|undoState
operator|<
name|undoStack
operator|.
name|size
argument_list|()
condition|)
name|clearUndoRedoStacks
argument_list|(
name|QTextDocument
operator|::
name|RedoStack
argument_list|)
expr_stmt|;
if|if
condition|(
name|editBlock
operator|!=
literal|0
operator|&&
name|editBlockCursorPosition
operator|>=
literal|0
condition|)
block|{
comment|// we had a beginEditBlock() with a cursor position
if|if
condition|(
name|c
operator|.
name|pos
operator|!=
operator|(
name|quint32
operator|)
name|editBlockCursorPosition
condition|)
block|{
comment|// and that cursor position is different from the command
comment|// generate a CursorMoved undo item
name|QT_INIT_TEXTUNDOCOMMAND
argument_list|(
name|cc
argument_list|,
name|QTextUndoCommand
operator|::
name|CursorMoved
argument_list|,
literal|true
argument_list|,
name|QTextUndoCommand
operator|::
name|MoveCursor
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|editBlockCursorPosition
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|undoStack
operator|.
name|append
argument_list|(
name|cc
argument_list|)
expr_stmt|;
name|undoState
operator|++
expr_stmt|;
name|editBlockCursorPosition
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|undoStack
operator|.
name|isEmpty
argument_list|()
operator|&&
name|modified
condition|)
block|{
name|QTextUndoCommand
modifier|&
name|last
init|=
name|undoStack
index|[
name|undoState
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|last
operator|.
name|block_part
operator|&&
name|c
operator|.
name|block_part
operator|&&
operator|!
name|last
operator|.
name|block_end
operator|)
comment|// part of the same block => can merge
operator|||
operator|(
operator|!
name|c
operator|.
name|block_part
operator|&&
operator|!
name|last
operator|.
name|block_part
operator|)
condition|)
block|{
comment|// two single undo items => can merge
if|if
condition|(
name|last
operator|.
name|tryMerge
argument_list|(
name|c
argument_list|)
condition|)
return|return;
block|}
block|}
if|if
condition|(
name|modifiedState
operator|>
name|undoState
condition|)
name|modifiedState
operator|=
operator|-
literal|1
expr_stmt|;
name|undoStack
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|undoState
operator|++
expr_stmt|;
name|emitUndoAvailable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|emitRedoAvailable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|block_part
condition|)
emit|emit
name|document
argument_list|()
operator|->
name|undoCommandAdded
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|clearUndoRedoStacks
name|void
name|QTextDocumentPrivate
operator|::
name|clearUndoRedoStacks
parameter_list|(
name|QTextDocument
operator|::
name|Stacks
name|stacksToClear
parameter_list|,
name|bool
name|emitSignals
parameter_list|)
block|{
name|bool
name|undoCommandsAvailable
init|=
name|undoState
operator|!=
literal|0
decl_stmt|;
name|bool
name|redoCommandsAvailable
init|=
name|undoState
operator|!=
name|undoStack
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|stacksToClear
operator|==
name|QTextDocument
operator|::
name|UndoStack
operator|&&
name|undoCommandsAvailable
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|undoState
condition|;
operator|++
name|i
control|)
block|{
name|QTextUndoCommand
name|c
init|=
name|undoStack
index|[
name|undoState
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|command
operator|&
name|QTextUndoCommand
operator|::
name|Custom
condition|)
operator|delete
name|c
operator|.
name|custom
expr_stmt|;
block|}
name|undoStack
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|undoState
argument_list|)
expr_stmt|;
name|undoStack
operator|.
name|resize
argument_list|(
name|undoStack
operator|.
name|size
argument_list|()
operator|-
name|undoState
argument_list|)
expr_stmt|;
name|undoState
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|emitSignals
condition|)
name|emitUndoAvailable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stacksToClear
operator|==
name|QTextDocument
operator|::
name|RedoStack
operator|&&
name|redoCommandsAvailable
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|undoState
init|;
name|i
operator|<
name|undoStack
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextUndoCommand
name|c
init|=
name|undoStack
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|command
operator|&
name|QTextUndoCommand
operator|::
name|Custom
condition|)
operator|delete
name|c
operator|.
name|custom
expr_stmt|;
block|}
name|undoStack
operator|.
name|resize
argument_list|(
name|undoState
argument_list|)
expr_stmt|;
if|if
condition|(
name|emitSignals
condition|)
name|emitRedoAvailable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stacksToClear
operator|==
name|QTextDocument
operator|::
name|UndoAndRedoStacks
operator|&&
operator|!
name|undoStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|undoStack
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextUndoCommand
name|c
init|=
name|undoStack
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|command
operator|&
name|QTextUndoCommand
operator|::
name|Custom
condition|)
operator|delete
name|c
operator|.
name|custom
expr_stmt|;
block|}
name|undoState
operator|=
literal|0
expr_stmt|;
name|undoStack
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|emitSignals
operator|&&
name|undoCommandsAvailable
condition|)
name|emitUndoAvailable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|emitSignals
operator|&&
name|redoCommandsAvailable
condition|)
name|emitRedoAvailable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|emitUndoAvailable
name|void
name|QTextDocumentPrivate
operator|::
name|emitUndoAvailable
parameter_list|(
name|bool
name|available
parameter_list|)
block|{
if|if
condition|(
name|available
operator|!=
name|wasUndoAvailable
condition|)
block|{
name|Q_Q
argument_list|(
name|QTextDocument
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|undoAvailable
argument_list|(
name|available
argument_list|)
emit|;
name|wasUndoAvailable
operator|=
name|available
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|emitRedoAvailable
name|void
name|QTextDocumentPrivate
operator|::
name|emitRedoAvailable
parameter_list|(
name|bool
name|available
parameter_list|)
block|{
if|if
condition|(
name|available
operator|!=
name|wasRedoAvailable
condition|)
block|{
name|Q_Q
argument_list|(
name|QTextDocument
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|redoAvailable
argument_list|(
name|available
argument_list|)
emit|;
name|wasRedoAvailable
operator|=
name|available
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|enableUndoRedo
name|void
name|QTextDocumentPrivate
operator|::
name|enableUndoRedo
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
if|if
condition|(
name|enable
operator|&&
name|maximumBlockCount
operator|>
literal|0
condition|)
return|return;
if|if
condition|(
operator|!
name|enable
condition|)
block|{
name|undoState
operator|=
literal|0
expr_stmt|;
name|clearUndoRedoStacks
argument_list|(
name|QTextDocument
operator|::
name|RedoStack
argument_list|)
expr_stmt|;
name|emitUndoAvailable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|emitRedoAvailable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|modifiedState
operator|=
name|modified
condition|?
operator|-
literal|1
else|:
name|undoState
expr_stmt|;
name|undoEnabled
operator|=
name|enable
expr_stmt|;
if|if
condition|(
operator|!
name|undoEnabled
condition|)
name|compressPieceTable
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|joinPreviousEditBlock
name|void
name|QTextDocumentPrivate
operator|::
name|joinPreviousEditBlock
parameter_list|()
block|{
name|beginEditBlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|undoEnabled
operator|&&
name|undoState
condition|)
name|undoStack
index|[
name|undoState
operator|-
literal|1
index|]
operator|.
name|block_end
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endEditBlock
name|void
name|QTextDocumentPrivate
operator|::
name|endEditBlock
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|editBlock
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|--
name|editBlock
condition|)
return|return;
if|if
condition|(
name|undoEnabled
operator|&&
name|undoState
operator|>
literal|0
condition|)
block|{
specifier|const
name|bool
name|wasBlocking
init|=
operator|!
name|undoStack
index|[
name|undoState
operator|-
literal|1
index|]
operator|.
name|block_end
decl_stmt|;
if|if
condition|(
name|undoStack
index|[
name|undoState
operator|-
literal|1
index|]
operator|.
name|block_part
condition|)
block|{
name|undoStack
index|[
name|undoState
operator|-
literal|1
index|]
operator|.
name|block_end
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|wasBlocking
condition|)
emit|emit
name|document
argument_list|()
operator|->
name|undoCommandAdded
argument_list|()
emit|;
block|}
block|}
name|editBlockCursorPosition
operator|=
operator|-
literal|1
expr_stmt|;
name|finishEdit
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|finishEdit
name|void
name|QTextDocumentPrivate
operator|::
name|finishEdit
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QTextDocument
argument_list|)
expr_stmt|;
if|if
condition|(
name|editBlock
condition|)
return|return;
if|if
condition|(
name|framesDirty
condition|)
name|scan_frames
argument_list|(
name|docChangeFrom
argument_list|,
name|docChangeOldLength
argument_list|,
name|docChangeLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|lout
operator|&&
name|docChangeFrom
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|inContentsChange
condition|)
block|{
name|inContentsChange
operator|=
literal|true
expr_stmt|;
emit|emit
name|q
operator|->
name|contentsChange
argument_list|(
name|docChangeFrom
argument_list|,
name|docChangeOldLength
argument_list|,
name|docChangeLength
argument_list|)
emit|;
name|inContentsChange
operator|=
literal|false
expr_stmt|;
block|}
name|lout
operator|->
name|documentChanged
argument_list|(
name|docChangeFrom
argument_list|,
name|docChangeOldLength
argument_list|,
name|docChangeLength
argument_list|)
expr_stmt|;
block|}
name|docChangeFrom
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|needsEnsureMaximumBlockCount
condition|)
block|{
name|needsEnsureMaximumBlockCount
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|ensureMaximumBlockCount
argument_list|()
condition|)
block|{
comment|// if ensureMaximumBlockCount() returns true
comment|// it will have called endEditBlock() and
comment|// compressPieceTable() itself, so we return here
comment|// to prevent getting two contentsChanged emits
return|return;
block|}
block|}
name|QList
argument_list|<
name|QTextCursor
argument_list|>
name|changedCursors
decl_stmt|;
foreach|foreach
control|(
name|QTextCursorPrivate
modifier|*
name|curs
decl|,
name|cursors
control|)
block|{
if|if
condition|(
name|curs
operator|->
name|changed
condition|)
block|{
name|curs
operator|->
name|changed
operator|=
literal|false
expr_stmt|;
name|changedCursors
operator|.
name|append
argument_list|(
name|QTextCursor
argument_list|(
name|curs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
foreach|foreach
control|(
specifier|const
name|QTextCursor
modifier|&
name|cursor
decl|,
name|changedCursors
control|)
emit|emit
name|q
operator|->
name|cursorPositionChanged
argument_list|(
name|cursor
argument_list|)
emit|;
name|contentsChanged
argument_list|()
expr_stmt|;
if|if
condition|(
name|blocks
operator|.
name|numNodes
argument_list|()
operator|!=
name|lastBlockCount
condition|)
block|{
name|lastBlockCount
operator|=
name|blocks
operator|.
name|numNodes
argument_list|()
expr_stmt|;
emit|emit
name|q
operator|->
name|blockCountChanged
argument_list|(
name|lastBlockCount
argument_list|)
emit|;
block|}
if|if
condition|(
operator|!
name|undoEnabled
operator|&&
name|unreachableCharacterCount
condition|)
name|compressPieceTable
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|documentChange
name|void
name|QTextDocumentPrivate
operator|::
name|documentChange
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|length
parameter_list|)
block|{
comment|//     qDebug("QTextDocumentPrivate::documentChange: from=%d,length=%d", from, length);
if|if
condition|(
name|docChangeFrom
operator|<
literal|0
condition|)
block|{
name|docChangeFrom
operator|=
name|from
expr_stmt|;
name|docChangeOldLength
operator|=
name|length
expr_stmt|;
name|docChangeLength
operator|=
name|length
expr_stmt|;
return|return;
block|}
name|int
name|start
init|=
name|qMin
argument_list|(
name|from
argument_list|,
name|docChangeFrom
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|qMax
argument_list|(
name|from
operator|+
name|length
argument_list|,
name|docChangeFrom
operator|+
name|docChangeLength
argument_list|)
decl_stmt|;
name|int
name|diff
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|end
operator|-
name|start
operator|-
name|docChangeLength
argument_list|)
decl_stmt|;
name|docChangeFrom
operator|=
name|start
expr_stmt|;
name|docChangeOldLength
operator|+=
name|diff
expr_stmt|;
name|docChangeLength
operator|+=
name|diff
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     adjustDocumentChangesAndCursors is called whenever there is an insert or remove of characters.     param from is the cursor position in the document     param addedOrRemoved is the amount of characters added or removed.  A negative number means characters are removed.      The function stores information to be emitted when finishEdit() is called. */
end_comment
begin_function
DECL|function|adjustDocumentChangesAndCursors
name|void
name|QTextDocumentPrivate
operator|::
name|adjustDocumentChangesAndCursors
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|addedOrRemoved
parameter_list|,
name|QTextUndoCommand
operator|::
name|Operation
name|op
parameter_list|)
block|{
if|if
condition|(
operator|!
name|editBlock
condition|)
operator|++
name|revision
expr_stmt|;
if|if
condition|(
name|blockCursorAdjustment
condition|)
block|{
empty_stmt|;
comment|// postpone, will be called again from QTextDocumentPrivate::remove()
block|}
else|else
block|{
foreach|foreach
control|(
name|QTextCursorPrivate
modifier|*
name|curs
decl|,
name|cursors
control|)
block|{
if|if
condition|(
name|curs
operator|->
name|adjustPosition
argument_list|(
name|from
argument_list|,
name|addedOrRemoved
argument_list|,
name|op
argument_list|)
operator|==
name|QTextCursorPrivate
operator|::
name|CursorMoved
condition|)
block|{
name|curs
operator|->
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|//     qDebug("QTextDocumentPrivate::adjustDocumentChanges: from=%d,addedOrRemoved=%d", from, addedOrRemoved);
if|if
condition|(
name|docChangeFrom
operator|<
literal|0
condition|)
block|{
name|docChangeFrom
operator|=
name|from
expr_stmt|;
if|if
condition|(
name|addedOrRemoved
operator|>
literal|0
condition|)
block|{
name|docChangeOldLength
operator|=
literal|0
expr_stmt|;
name|docChangeLength
operator|=
name|addedOrRemoved
expr_stmt|;
block|}
else|else
block|{
name|docChangeOldLength
operator|=
operator|-
name|addedOrRemoved
expr_stmt|;
name|docChangeLength
operator|=
literal|0
expr_stmt|;
block|}
comment|//         qDebug("adjustDocumentChanges:");
comment|//         qDebug("    -> %d %d %d", docChangeFrom, docChangeOldLength, docChangeLength);
return|return;
block|}
comment|// have to merge the new change with the already existing one.
name|int
name|added
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|addedOrRemoved
argument_list|)
decl_stmt|;
name|int
name|removed
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
operator|-
name|addedOrRemoved
argument_list|)
decl_stmt|;
name|int
name|diff
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|from
operator|+
name|removed
operator|<
name|docChangeFrom
condition|)
name|diff
operator|=
name|docChangeFrom
operator|-
name|from
operator|-
name|removed
expr_stmt|;
elseif|else
if|if
condition|(
name|from
operator|>
name|docChangeFrom
operator|+
name|docChangeLength
condition|)
name|diff
operator|=
name|from
operator|-
operator|(
name|docChangeFrom
operator|+
name|docChangeLength
operator|)
expr_stmt|;
name|int
name|overlap_start
init|=
name|qMax
argument_list|(
name|from
argument_list|,
name|docChangeFrom
argument_list|)
decl_stmt|;
name|int
name|overlap_end
init|=
name|qMin
argument_list|(
name|from
operator|+
name|removed
argument_list|,
name|docChangeFrom
operator|+
name|docChangeLength
argument_list|)
decl_stmt|;
name|int
name|removedInside
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|overlap_end
operator|-
name|overlap_start
argument_list|)
decl_stmt|;
name|removed
operator|-=
name|removedInside
expr_stmt|;
comment|//     qDebug("adjustDocumentChanges: from=%d, addedOrRemoved=%d, diff=%d, removedInside=%d", from, addedOrRemoved, diff, removedInside);
name|docChangeFrom
operator|=
name|qMin
argument_list|(
name|docChangeFrom
argument_list|,
name|from
argument_list|)
expr_stmt|;
name|docChangeOldLength
operator|+=
name|removed
operator|+
name|diff
expr_stmt|;
name|docChangeLength
operator|+=
name|added
operator|-
name|removedInside
operator|+
name|diff
expr_stmt|;
comment|//     qDebug("    -> %d %d %d", docChangeFrom, docChangeOldLength, docChangeLength);
block|}
end_function
begin_function
DECL|function|plainText
name|QString
name|QTextDocumentPrivate
operator|::
name|plainText
parameter_list|()
specifier|const
block|{
name|QString
name|result
decl_stmt|;
name|result
operator|.
name|resize
argument_list|(
name|length
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QChar
modifier|*
name|text_unicode
init|=
name|text
operator|.
name|unicode
argument_list|()
decl_stmt|;
name|QChar
modifier|*
name|data
init|=
name|result
operator|.
name|data
argument_list|()
decl_stmt|;
for|for
control|(
name|QTextDocumentPrivate
operator|::
name|FragmentIterator
name|it
init|=
name|begin
argument_list|()
init|;
name|it
operator|!=
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|QTextFragmentData
modifier|*
name|f
init|=
operator|*
name|it
decl_stmt|;
operator|::
name|memcpy
argument_list|(
name|data
argument_list|,
name|text_unicode
operator|+
name|f
operator|->
name|stringPosition
argument_list|,
name|f
operator|->
name|size_array
index|[
literal|0
index|]
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|+=
name|f
operator|->
name|size_array
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|// remove trailing block separator
name|result
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|blockCharFormatIndex
name|int
name|QTextDocumentPrivate
operator|::
name|blockCharFormatIndex
parameter_list|(
name|int
name|node
parameter_list|)
specifier|const
block|{
name|int
name|pos
init|=
name|blocks
operator|.
name|position
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|==
literal|0
condition|)
return|return
name|initialBlockCharFormatIndex
return|;
return|return
name|fragments
operator|.
name|find
argument_list|(
name|pos
operator|-
literal|1
argument_list|)
operator|->
name|format
return|;
block|}
end_function
begin_function
DECL|function|nextCursorPosition
name|int
name|QTextDocumentPrivate
operator|::
name|nextCursorPosition
parameter_list|(
name|int
name|position
parameter_list|,
name|QTextLayout
operator|::
name|CursorMode
name|mode
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|position
operator|==
name|length
argument_list|()
operator|-
literal|1
condition|)
return|return
name|position
return|;
name|QTextBlock
name|it
init|=
name|blocksFind
argument_list|(
name|position
argument_list|)
decl_stmt|;
name|int
name|start
init|=
name|it
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|start
operator|+
name|it
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|position
operator|==
name|end
condition|)
return|return
name|end
operator|+
literal|1
return|;
return|return
name|it
operator|.
name|layout
argument_list|()
operator|->
name|nextCursorPosition
argument_list|(
name|position
operator|-
name|start
argument_list|,
name|mode
argument_list|)
operator|+
name|start
return|;
block|}
end_function
begin_function
DECL|function|previousCursorPosition
name|int
name|QTextDocumentPrivate
operator|::
name|previousCursorPosition
parameter_list|(
name|int
name|position
parameter_list|,
name|QTextLayout
operator|::
name|CursorMode
name|mode
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|position
operator|==
literal|0
condition|)
return|return
name|position
return|;
name|QTextBlock
name|it
init|=
name|blocksFind
argument_list|(
name|position
argument_list|)
decl_stmt|;
name|int
name|start
init|=
name|it
operator|.
name|position
argument_list|()
decl_stmt|;
if|if
condition|(
name|position
operator|==
name|start
condition|)
return|return
name|start
operator|-
literal|1
return|;
return|return
name|it
operator|.
name|layout
argument_list|()
operator|->
name|previousCursorPosition
argument_list|(
name|position
operator|-
name|start
argument_list|,
name|mode
argument_list|)
operator|+
name|start
return|;
block|}
end_function
begin_function
DECL|function|leftCursorPosition
name|int
name|QTextDocumentPrivate
operator|::
name|leftCursorPosition
parameter_list|(
name|int
name|position
parameter_list|)
specifier|const
block|{
name|QTextBlock
name|it
init|=
name|blocksFind
argument_list|(
name|position
argument_list|)
decl_stmt|;
name|int
name|start
init|=
name|it
operator|.
name|position
argument_list|()
decl_stmt|;
return|return
name|it
operator|.
name|layout
argument_list|()
operator|->
name|leftCursorPosition
argument_list|(
name|position
operator|-
name|start
argument_list|)
operator|+
name|start
return|;
block|}
end_function
begin_function
DECL|function|rightCursorPosition
name|int
name|QTextDocumentPrivate
operator|::
name|rightCursorPosition
parameter_list|(
name|int
name|position
parameter_list|)
specifier|const
block|{
name|QTextBlock
name|it
init|=
name|blocksFind
argument_list|(
name|position
argument_list|)
decl_stmt|;
name|int
name|start
init|=
name|it
operator|.
name|position
argument_list|()
decl_stmt|;
return|return
name|it
operator|.
name|layout
argument_list|()
operator|->
name|rightCursorPosition
argument_list|(
name|position
operator|-
name|start
argument_list|)
operator|+
name|start
return|;
block|}
end_function
begin_function
DECL|function|changeObjectFormat
name|void
name|QTextDocumentPrivate
operator|::
name|changeObjectFormat
parameter_list|(
name|QTextObject
modifier|*
name|obj
parameter_list|,
name|int
name|format
parameter_list|)
block|{
name|beginEditBlock
argument_list|()
expr_stmt|;
name|int
name|objectIndex
init|=
name|obj
operator|->
name|objectIndex
argument_list|()
decl_stmt|;
name|int
name|oldFormatIndex
init|=
name|formats
operator|.
name|objectFormatIndex
argument_list|(
name|objectIndex
argument_list|)
decl_stmt|;
name|formats
operator|.
name|setObjectFormatIndex
argument_list|(
name|objectIndex
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QTextBlockGroup
modifier|*
name|b
init|=
name|qobject_cast
argument_list|<
name|QTextBlockGroup
operator|*
argument_list|>
argument_list|(
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
condition|)
block|{
name|b
operator|->
name|d_func
argument_list|()
operator|->
name|markBlocksDirty
argument_list|()
expr_stmt|;
block|}
name|QTextFrame
modifier|*
name|f
init|=
name|qobject_cast
argument_list|<
name|QTextFrame
operator|*
argument_list|>
argument_list|(
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
condition|)
name|documentChange
argument_list|(
name|f
operator|->
name|firstPosition
argument_list|()
argument_list|,
name|f
operator|->
name|lastPosition
argument_list|()
operator|-
name|f
operator|->
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
name|QT_INIT_TEXTUNDOCOMMAND
argument_list|(
name|c
argument_list|,
name|QTextUndoCommand
operator|::
name|GroupFormatChange
argument_list|,
operator|(
name|editBlock
operator|!=
literal|0
operator|)
argument_list|,
name|QTextUndoCommand
operator|::
name|MoveCursor
argument_list|,
name|oldFormatIndex
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|obj
operator|->
name|d_func
argument_list|()
operator|->
name|objectIndex
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|appendUndoItem
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|endEditBlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findChildFrame
specifier|static
name|QTextFrame
modifier|*
name|findChildFrame
parameter_list|(
name|QTextFrame
modifier|*
name|f
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
comment|/* Binary search for frame at pos */
specifier|const
name|QList
argument_list|<
name|QTextFrame
modifier|*
argument_list|>
name|children
init|=
name|f
operator|->
name|childFrames
argument_list|()
decl_stmt|;
name|int
name|first
init|=
literal|0
decl_stmt|;
name|int
name|last
init|=
name|children
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|first
operator|<=
name|last
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|first
operator|+
name|last
operator|)
operator|/
literal|2
decl_stmt|;
name|QTextFrame
modifier|*
name|c
init|=
name|children
operator|.
name|at
argument_list|(
name|mid
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>
name|c
operator|->
name|lastPosition
argument_list|()
condition|)
name|first
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|pos
operator|<
name|c
operator|->
name|firstPosition
argument_list|()
condition|)
name|last
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
else|else
return|return
name|c
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|rootFrame
name|QTextFrame
modifier|*
name|QTextDocumentPrivate
operator|::
name|rootFrame
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|rtFrame
condition|)
block|{
name|QTextFrameFormat
name|defaultRootFrameFormat
decl_stmt|;
name|defaultRootFrameFormat
operator|.
name|setMargin
argument_list|(
name|documentMargin
argument_list|)
expr_stmt|;
name|rtFrame
operator|=
name|qobject_cast
argument_list|<
name|QTextFrame
operator|*
argument_list|>
argument_list|(
cast|const_cast
argument_list|<
name|QTextDocumentPrivate
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|createObject
argument_list|(
name|defaultRootFrameFormat
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rtFrame
return|;
block|}
end_function
begin_function
DECL|function|frameAt
name|QTextFrame
modifier|*
name|QTextDocumentPrivate
operator|::
name|frameAt
parameter_list|(
name|int
name|pos
parameter_list|)
specifier|const
block|{
name|QTextFrame
modifier|*
name|f
init|=
name|rootFrame
argument_list|()
decl_stmt|;
while|while
condition|(
literal|1
condition|)
block|{
name|QTextFrame
modifier|*
name|c
init|=
name|findChildFrame
argument_list|(
name|f
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|c
condition|)
return|return
name|f
return|;
name|f
operator|=
name|c
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|clearFrame
name|void
name|QTextDocumentPrivate
operator|::
name|clearFrame
parameter_list|(
name|QTextFrame
modifier|*
name|f
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|f
operator|->
name|d_func
argument_list|()
operator|->
name|childFrames
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|clearFrame
argument_list|(
name|f
operator|->
name|d_func
argument_list|()
operator|->
name|childFrames
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|->
name|d_func
argument_list|()
operator|->
name|childFrames
operator|.
name|clear
argument_list|()
expr_stmt|;
name|f
operator|->
name|d_func
argument_list|()
operator|->
name|parentFrame
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scan_frames
name|void
name|QTextDocumentPrivate
operator|::
name|scan_frames
parameter_list|(
name|int
name|pos
parameter_list|,
name|int
name|charsRemoved
parameter_list|,
name|int
name|charsAdded
parameter_list|)
block|{
comment|// ###### optimize
name|Q_UNUSED
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|charsRemoved
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|charsAdded
argument_list|)
expr_stmt|;
name|QTextFrame
modifier|*
name|f
init|=
name|rootFrame
argument_list|()
decl_stmt|;
name|clearFrame
argument_list|(
name|f
argument_list|)
expr_stmt|;
for|for
control|(
name|FragmentIterator
name|it
init|=
name|begin
argument_list|()
init|;
name|it
operator|!=
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
comment|// QTextFormat fmt = formats.format(it->format);
name|QTextFrame
modifier|*
name|frame
init|=
name|qobject_cast
argument_list|<
name|QTextFrame
operator|*
argument_list|>
argument_list|(
name|objectForFormat
argument_list|(
name|it
operator|->
name|format
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|frame
condition|)
continue|continue;
name|Q_ASSERT
argument_list|(
name|it
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QChar
name|ch
init|=
name|text
operator|.
name|at
argument_list|(
name|it
operator|->
name|stringPosition
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
name|QTextBeginningOfFrame
condition|)
block|{
if|if
condition|(
name|f
operator|!=
name|frame
condition|)
block|{
comment|// f == frame happens for tables
name|Q_ASSERT
argument_list|(
name|frame
operator|->
name|d_func
argument_list|()
operator|->
name|fragment_start
operator|==
name|it
operator|.
name|n
operator|||
name|frame
operator|->
name|d_func
argument_list|()
operator|->
name|fragment_start
operator|==
literal|0
argument_list|)
expr_stmt|;
name|frame
operator|->
name|d_func
argument_list|()
operator|->
name|parentFrame
operator|=
name|f
expr_stmt|;
name|f
operator|->
name|d_func
argument_list|()
operator|->
name|childFrames
operator|.
name|append
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|f
operator|=
name|frame
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
name|QTextEndOfFrame
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|f
operator|==
name|frame
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|frame
operator|->
name|d_func
argument_list|()
operator|->
name|fragment_end
operator|==
name|it
operator|.
name|n
operator|||
name|frame
operator|->
name|d_func
argument_list|()
operator|->
name|fragment_end
operator|==
literal|0
argument_list|)
expr_stmt|;
name|f
operator|=
name|frame
operator|->
name|d_func
argument_list|()
operator|->
name|parentFrame
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
name|QChar
operator|::
name|ObjectReplacementCharacter
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|f
operator|!=
name|frame
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|frame
operator|->
name|d_func
argument_list|()
operator|->
name|fragment_start
operator|==
name|it
operator|.
name|n
operator|||
name|frame
operator|->
name|d_func
argument_list|()
operator|->
name|fragment_start
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|frame
operator|->
name|d_func
argument_list|()
operator|->
name|fragment_end
operator|==
name|it
operator|.
name|n
operator|||
name|frame
operator|->
name|d_func
argument_list|()
operator|->
name|fragment_end
operator|==
literal|0
argument_list|)
expr_stmt|;
name|frame
operator|->
name|d_func
argument_list|()
operator|->
name|parentFrame
operator|=
name|f
expr_stmt|;
name|f
operator|->
name|d_func
argument_list|()
operator|->
name|childFrames
operator|.
name|append
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|Q_ASSERT
argument_list|(
name|f
operator|==
name|rtFrame
argument_list|)
expr_stmt|;
name|framesDirty
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insert_frame
name|void
name|QTextDocumentPrivate
operator|::
name|insert_frame
parameter_list|(
name|QTextFrame
modifier|*
name|f
parameter_list|)
block|{
name|int
name|start
init|=
name|f
operator|->
name|firstPosition
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|f
operator|->
name|lastPosition
argument_list|()
decl_stmt|;
name|QTextFrame
modifier|*
name|parent
init|=
name|frameAt
argument_list|(
name|start
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|parent
operator|==
name|frameAt
argument_list|(
name|end
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|start
operator|!=
name|end
condition|)
block|{
comment|// iterator over the parent and move all children contained in my frame to myself
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parent
operator|->
name|d_func
argument_list|()
operator|->
name|childFrames
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextFrame
modifier|*
name|c
init|=
name|parent
operator|->
name|d_func
argument_list|()
operator|->
name|childFrames
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
argument_list|<
name|c
operator|->
name|firstPosition
operator|(
operator|)
operator|&&
name|end
argument_list|>
name|c
operator|->
name|lastPosition
argument_list|()
condition|)
block|{
name|parent
operator|->
name|d_func
argument_list|()
operator|->
name|childFrames
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|f
operator|->
name|d_func
argument_list|()
operator|->
name|childFrames
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|->
name|d_func
argument_list|()
operator|->
name|parentFrame
operator|=
name|f
expr_stmt|;
block|}
block|}
block|}
comment|// insert at the correct position
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|parent
operator|->
name|d_func
argument_list|()
operator|->
name|childFrames
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextFrame
modifier|*
name|c
init|=
name|parent
operator|->
name|d_func
argument_list|()
operator|->
name|childFrames
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|->
name|firstPosition
argument_list|()
operator|>
name|end
condition|)
break|break;
block|}
name|parent
operator|->
name|d_func
argument_list|()
operator|->
name|childFrames
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|f
operator|->
name|d_func
argument_list|()
operator|->
name|parentFrame
operator|=
name|parent
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertFrame
name|QTextFrame
modifier|*
name|QTextDocumentPrivate
operator|::
name|insertFrame
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
specifier|const
name|QTextFrameFormat
modifier|&
name|format
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|start
operator|>=
literal|0
operator|&&
name|start
operator|<
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|end
operator|>=
literal|0
operator|&&
name|end
operator|<
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|start
operator|<=
name|end
operator|||
name|end
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|start
operator|!=
name|end
operator|&&
name|frameAt
argument_list|(
name|start
argument_list|)
operator|!=
name|frameAt
argument_list|(
name|end
argument_list|)
condition|)
return|return
literal|0
return|;
name|beginEditBlock
argument_list|()
expr_stmt|;
name|QTextFrame
modifier|*
name|frame
init|=
name|qobject_cast
argument_list|<
name|QTextFrame
operator|*
argument_list|>
argument_list|(
name|createObject
argument_list|(
name|format
argument_list|)
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|frame
argument_list|)
expr_stmt|;
comment|// #### using the default block and char format below might be wrong
name|int
name|idx
init|=
name|formats
operator|.
name|indexForFormat
argument_list|(
name|QTextBlockFormat
argument_list|()
argument_list|)
decl_stmt|;
name|QTextCharFormat
name|cfmt
decl_stmt|;
name|cfmt
operator|.
name|setObjectIndex
argument_list|(
name|frame
operator|->
name|objectIndex
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|charIdx
init|=
name|formats
operator|.
name|indexForFormat
argument_list|(
name|cfmt
argument_list|)
decl_stmt|;
name|insertBlock
argument_list|(
name|QTextBeginningOfFrame
argument_list|,
name|start
argument_list|,
name|idx
argument_list|,
name|charIdx
argument_list|,
name|QTextUndoCommand
operator|::
name|MoveCursor
argument_list|)
expr_stmt|;
name|insertBlock
argument_list|(
name|QTextEndOfFrame
argument_list|,
operator|++
name|end
argument_list|,
name|idx
argument_list|,
name|charIdx
argument_list|,
name|QTextUndoCommand
operator|::
name|KeepCursor
argument_list|)
expr_stmt|;
name|frame
operator|->
name|d_func
argument_list|()
operator|->
name|fragment_start
operator|=
name|find
argument_list|(
name|start
argument_list|)
operator|.
name|n
expr_stmt|;
name|frame
operator|->
name|d_func
argument_list|()
operator|->
name|fragment_end
operator|=
name|find
argument_list|(
name|end
argument_list|)
operator|.
name|n
expr_stmt|;
name|insert_frame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|endEditBlock
argument_list|()
expr_stmt|;
return|return
name|frame
return|;
block|}
end_function
begin_function
DECL|function|removeFrame
name|void
name|QTextDocumentPrivate
operator|::
name|removeFrame
parameter_list|(
name|QTextFrame
modifier|*
name|frame
parameter_list|)
block|{
name|QTextFrame
modifier|*
name|parent
init|=
name|frame
operator|->
name|d_func
argument_list|()
operator|->
name|parentFrame
decl_stmt|;
if|if
condition|(
operator|!
name|parent
condition|)
return|return;
name|int
name|start
init|=
name|frame
operator|->
name|firstPosition
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|frame
operator|->
name|lastPosition
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|end
operator|>=
name|start
argument_list|)
expr_stmt|;
name|beginEditBlock
argument_list|()
expr_stmt|;
comment|// remove already removes the frames from the tree
name|remove
argument_list|(
name|end
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|remove
argument_list|(
name|start
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|endEditBlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|objectForIndex
name|QTextObject
modifier|*
name|QTextDocumentPrivate
operator|::
name|objectForIndex
parameter_list|(
name|int
name|objectIndex
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|objectIndex
operator|<
literal|0
condition|)
return|return
literal|0
return|;
name|QTextObject
modifier|*
name|object
init|=
name|objects
operator|.
name|value
argument_list|(
name|objectIndex
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|object
condition|)
block|{
name|QTextDocumentPrivate
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QTextDocumentPrivate
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QTextFormat
name|fmt
init|=
name|formats
operator|.
name|objectFormat
argument_list|(
name|objectIndex
argument_list|)
decl_stmt|;
name|object
operator|=
name|that
operator|->
name|createObject
argument_list|(
name|fmt
argument_list|,
name|objectIndex
argument_list|)
expr_stmt|;
block|}
return|return
name|object
return|;
block|}
end_function
begin_function
DECL|function|objectForFormat
name|QTextObject
modifier|*
name|QTextDocumentPrivate
operator|::
name|objectForFormat
parameter_list|(
name|int
name|formatIndex
parameter_list|)
specifier|const
block|{
name|int
name|objectIndex
init|=
name|formats
operator|.
name|format
argument_list|(
name|formatIndex
argument_list|)
operator|.
name|objectIndex
argument_list|()
decl_stmt|;
return|return
name|objectForIndex
argument_list|(
name|objectIndex
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|objectForFormat
name|QTextObject
modifier|*
name|QTextDocumentPrivate
operator|::
name|objectForFormat
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|f
parameter_list|)
specifier|const
block|{
return|return
name|objectForIndex
argument_list|(
name|f
operator|.
name|objectIndex
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createObject
name|QTextObject
modifier|*
name|QTextDocumentPrivate
operator|::
name|createObject
parameter_list|(
specifier|const
name|QTextFormat
modifier|&
name|f
parameter_list|,
name|int
name|objectIndex
parameter_list|)
block|{
name|QTextObject
modifier|*
name|obj
init|=
name|document
argument_list|()
operator|->
name|createObject
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
condition|)
block|{
name|obj
operator|->
name|d_func
argument_list|()
operator|->
name|objectIndex
operator|=
name|objectIndex
operator|==
operator|-
literal|1
condition|?
name|formats
operator|.
name|createObjectIndex
argument_list|(
name|f
argument_list|)
else|:
name|objectIndex
expr_stmt|;
name|objects
index|[
name|obj
operator|->
name|d_func
argument_list|()
operator|->
name|objectIndex
index|]
operator|=
name|obj
expr_stmt|;
block|}
return|return
name|obj
return|;
block|}
end_function
begin_function
DECL|function|deleteObject
name|void
name|QTextDocumentPrivate
operator|::
name|deleteObject
parameter_list|(
name|QTextObject
modifier|*
name|object
parameter_list|)
block|{
specifier|const
name|int
name|objIdx
init|=
name|object
operator|->
name|d_func
argument_list|()
operator|->
name|objectIndex
decl_stmt|;
name|objects
operator|.
name|remove
argument_list|(
name|objIdx
argument_list|)
expr_stmt|;
operator|delete
name|object
expr_stmt|;
block|}
end_function
begin_function
DECL|function|contentsChanged
name|void
name|QTextDocumentPrivate
operator|::
name|contentsChanged
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QTextDocument
argument_list|)
expr_stmt|;
if|if
condition|(
name|editBlock
condition|)
return|return;
name|bool
name|m
init|=
name|undoEnabled
condition|?
operator|(
name|modifiedState
operator|!=
name|undoState
operator|)
else|:
literal|true
decl_stmt|;
if|if
condition|(
name|modified
operator|!=
name|m
condition|)
block|{
name|modified
operator|=
name|m
expr_stmt|;
emit|emit
name|q
operator|->
name|modificationChanged
argument_list|(
name|modified
argument_list|)
emit|;
block|}
emit|emit
name|q
operator|->
name|contentsChanged
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|compressPieceTable
name|void
name|QTextDocumentPrivate
operator|::
name|compressPieceTable
parameter_list|()
block|{
if|if
condition|(
name|undoEnabled
condition|)
return|return;
specifier|const
name|uint
name|garbageCollectionThreshold
init|=
literal|96
operator|*
literal|1024
decl_stmt|;
comment|// bytes
comment|//qDebug()<< "unreachable bytes:"<< unreachableCharacterCount * sizeof(QChar)<< " -- limit"<< garbageCollectionThreshold<< "text size ="<< text.size()<< "capacity:"<< text.capacity();
name|bool
name|compressTable
init|=
name|unreachableCharacterCount
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
operator|>
name|garbageCollectionThreshold
operator|&&
name|text
operator|.
name|size
argument_list|()
operator|>=
name|text
operator|.
name|capacity
argument_list|()
operator|*
literal|0.9
decl_stmt|;
if|if
condition|(
operator|!
name|compressTable
condition|)
return|return;
name|QString
name|newText
decl_stmt|;
name|newText
operator|.
name|resize
argument_list|(
name|text
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QChar
modifier|*
name|newTextPtr
init|=
name|newText
operator|.
name|data
argument_list|()
decl_stmt|;
name|int
name|newLen
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FragmentMap
operator|::
name|Iterator
name|it
init|=
name|fragments
operator|.
name|begin
argument_list|()
init|;
operator|!
name|it
operator|.
name|atEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|memcpy
argument_list|(
name|newTextPtr
argument_list|,
name|text
operator|.
name|constData
argument_list|()
operator|+
name|it
operator|->
name|stringPosition
argument_list|,
name|it
operator|->
name|size_array
index|[
literal|0
index|]
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
expr_stmt|;
name|it
operator|->
name|stringPosition
operator|=
name|newLen
expr_stmt|;
name|newTextPtr
operator|+=
name|it
operator|->
name|size_array
index|[
literal|0
index|]
expr_stmt|;
name|newLen
operator|+=
name|it
operator|->
name|size_array
index|[
literal|0
index|]
expr_stmt|;
block|}
name|newText
operator|.
name|resize
argument_list|(
name|newLen
argument_list|)
expr_stmt|;
name|newText
operator|.
name|squeeze
argument_list|()
expr_stmt|;
comment|//qDebug()<< "removed"<< text.size() - newText.size()<< "characters";
name|text
operator|=
name|newText
expr_stmt|;
name|unreachableCharacterCount
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setModified
name|void
name|QTextDocumentPrivate
operator|::
name|setModified
parameter_list|(
name|bool
name|m
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTextDocument
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|==
name|modified
condition|)
return|return;
name|modified
operator|=
name|m
expr_stmt|;
if|if
condition|(
operator|!
name|modified
condition|)
name|modifiedState
operator|=
name|undoState
expr_stmt|;
else|else
name|modifiedState
operator|=
operator|-
literal|1
expr_stmt|;
emit|emit
name|q
operator|->
name|modificationChanged
argument_list|(
name|modified
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|ensureMaximumBlockCount
name|bool
name|QTextDocumentPrivate
operator|::
name|ensureMaximumBlockCount
parameter_list|()
block|{
if|if
condition|(
name|maximumBlockCount
operator|<=
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|blocks
operator|.
name|numNodes
argument_list|()
operator|<=
name|maximumBlockCount
condition|)
return|return
literal|false
return|;
name|beginEditBlock
argument_list|()
expr_stmt|;
specifier|const
name|int
name|blocksToRemove
init|=
name|blocks
operator|.
name|numNodes
argument_list|()
operator|-
name|maximumBlockCount
decl_stmt|;
name|QTextCursor
name|cursor
argument_list|(
name|this
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|,
name|blocksToRemove
argument_list|)
expr_stmt|;
name|unreachableCharacterCount
operator|+=
name|cursor
operator|.
name|selectionEnd
argument_list|()
operator|-
name|cursor
operator|.
name|selectionStart
argument_list|()
expr_stmt|;
comment|// preserve the char format of the paragraph that is to become the new first one
name|QTextCharFormat
name|charFmt
init|=
name|cursor
operator|.
name|blockCharFormat
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|removeSelectedText
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|setBlockCharFormat
argument_list|(
name|charFmt
argument_list|)
expr_stmt|;
name|endEditBlock
argument_list|()
expr_stmt|;
name|compressPieceTable
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/// This method is called from QTextTable when it is about to remove a table-cell to allow cursors to update their selection.
end_comment
begin_function
DECL|function|aboutToRemoveCell
name|void
name|QTextDocumentPrivate
operator|::
name|aboutToRemoveCell
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|from
operator|<=
name|to
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QTextCursorPrivate
modifier|*
name|curs
decl|,
name|cursors
control|)
name|curs
operator|->
name|aboutToRemoveCell
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
